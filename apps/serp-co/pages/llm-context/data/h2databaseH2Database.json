[
  {
    "owner": "h2database",
    "repo": "h2database",
    "content": "TITLE: Hierarchical Employee Query Using CTE in SQL\nDESCRIPTION: A SQL query that uses a Common Table Expression (CTE) to display employee hierarchical relationships. The query begins with managers who have no manager (ManagerID IS NULL) and recursively adds their direct reports, filtering by department group name.\nSOURCE: https://github.com/h2database/h2database/blob/master/h2/src/test/org/h2/test/todo/recursiveQueries.txt#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nWITH DirectReports (ManagerID, EmployeeID, Title, DeptID, Level)\nAS\n(\n-- Anchor member definition\n    SELECT e.ManagerID, e.EmployeeID, e.Title, edh.DepartmentID,\n        0 AS Level\n    FROM Employee AS e\n    INNER JOIN EmployeeDepartmentHistory AS edh\n        ON e.EmployeeID = edh.EmployeeID AND edh.EndDate IS NULL\n    WHERE ManagerID IS NULL\n    UNION ALL\n-- Recursive member definition\n    SELECT e.ManagerID, e.EmployeeID, e.Title, edh.DepartmentID,\n        Level + 1\n    FROM Employee AS e\n    INNER JOIN EmployeeDepartmentHistory AS edh\n        ON e.EmployeeID = edh.EmployeeID AND edh.EndDate IS NULL\n    INNER JOIN DirectReports AS d\n        ON e.ManagerID = d.EmployeeID\n)\n-- Statement that executes the CTE\nSELECT ManagerID, EmployeeID, Title, Level\nFROM DirectReports\nINNER JOIN Department AS dp\n    ON DirectReports.DeptID = dp.DepartmentID\nWHERE dp.GroupName = N'Research and Development' OR Level = 0;\nGO\n```\n\n----------------------------------------\n\nTITLE: Updating Multiple Tables with Merge in SQL\nDESCRIPTION: This snippet demonstrates how to update multiple tables using the MERGE statement in SQL. It creates a table, inserts data, and performs merge operations.\nSOURCE: https://github.com/h2database/h2database/blob/master/h2/src/test/org/h2/test/todo/todo.txt#2025-04-23_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\ndrop table statisticlog;\ncreate table statisticlog(id int primary key, datatext varchar, moment int);\n@LOOP 20000 insert into statisticlog values(?, ?, ?);\nmerge into statisticlog(id, datatext) key(id)\nselect id, 'data1' from statisticlog order by moment limit 5;\nselect * from statisticlog where id < 10;\nUPDATE statisticlog SET datatext = 'data2'\nWHERE id IN (SELECT id FROM statisticlog ORDER BY moment LIMIT 5);\nselect * from statisticlog where id < 10;\n```\n\n----------------------------------------\n\nTITLE: Parameterized Recursive CTE in SQL\nDESCRIPTION: A SQL example showing a parameterized recursive query using CTE. The example creates a simple parent-child relationship table and demonstrates how to use a parameterized CTE to traverse the hierarchy starting from a specific node.\nSOURCE: https://github.com/h2database/h2database/blob/master/h2/src/test/org/h2/test/todo/recursiveQueries.txt#2025-04-23_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\ndrop all objects;\ncreate table parent(id int primary key, parent int);\ninsert into parent values(1, null), (2, 1), (3, 1);\n\nwith test_view(id, parent) as\nselect id, parent from parent where id = ?\nunion all\nselect parent.id, parent.parent from test_view, parent\nwhere parent.parent = test_view.id\nselect * from test_view {1: 1};\n\ndrop view test_view;\n\nwith test_view(id, parent) as\nselect id, parent from parent where id = 1\nunion all\nselect parent.id, parent.parent from test_view, parent\nwhere parent.parent = test_view.id\nselect * from test_view;\n\ndrop view test_view;\n\ndrop table parent;\n```\n\n----------------------------------------\n\nTITLE: Creating and Querying Test Table with Index in SQL\nDESCRIPTION: This snippet creates a test table, inserts data using loops, creates an index, and performs various select operations to test direct lookup optimization.\nSOURCE: https://github.com/h2database/h2database/blob/master/h2/src/test/org/h2/test/todo/todo.txt#2025-04-23_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\ndrop table test;\ncreate table test(id int, version int, idx int);\n@LOOP 1000 insert into test values(1, 1, ?);\n@LOOP 1000 insert into test values(1, 2, ?);\n@LOOP 1000 insert into test values(2, 1, ?);\ncreate index idx_test on test(id, version, idx);\n@LOOP 1000 select max(id)+1 from test;\n@LOOP 1000 select max(idx)+1 from test where id=1 and version=2;\n@LOOP 1000 select max(id)+1 from test;\n@LOOP 1000 select max(idx)+1 from test where id=1 and version=2;\n@LOOP 1000 select max(id)+1 from test;\n@LOOP 1000 select max(idx)+1 from test where id=1 and version=2;\n-- should be direct query\n```\n\n----------------------------------------\n\nTITLE: Case-Insensitive Indexing with VARCHAR_IGNORECASE in SQL\nDESCRIPTION: A SQL example demonstrating the behavior of VARCHAR_IGNORECASE data type with queries using IN, BETWEEN operators, and with/without indexes. The example shows how adding an index can affect the case-insensitive behavior of queries.\nSOURCE: https://github.com/h2database/h2database/blob/master/h2/src/test/org/h2/test/todo/recursiveQueries.txt#2025-04-23_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE LOCAL TEMPORARY TABLE test (family_name VARCHAR_IGNORECASE(63) NOT NULL);\nINSERT INTO test VALUES('Smith');\nINSERT INTO test VALUES('de Smith');\nINSERT INTO test VALUES('el Smith');\nINSERT INTO test VALUES('von Smith');\nSELECT * FROM test WHERE family_name IN ('de Smith', 'Smith');\n-- okay IN(...) with TABLE_SCAN\n\nSELECT * FROM test WHERE family_name BETWEEN 'd' AND 'T';\n-- okay, ignorecase honoured\n\nSELECT * FROM test WHERE family_name BETWEEN 'D' AND 'T';\n-- okay, ignorecase honoured\n\nCREATE INDEX family_name ON test(family_name);\nSELECT * FROM test WHERE family_name IN ('de Smith', 'Smith');\n-- OOPS, the comparison's operands are sorted incorrectly for ignorecase!\n\nEXPLAIN SELECT * FROM test WHERE family_name IN ('de Smith', 'Smith');\n```\n\n----------------------------------------\n\nTITLE: Testing Aggregate Function Alias in HAVING Clause in SQL\nDESCRIPTION: This query counts all rows, aliases the result as 'A', groups by ID, and uses the alias in the HAVING clause. It tests if databases allow referencing aggregate function aliases in the HAVING clause.\nSOURCE: https://github.com/h2database/h2database/blob/master/h2/src/test/org/h2/test/todo/columnAlias.txt#2025-04-23_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT COUNT(*) AS A FROM TEST GROUP BY ID HAVING A>0;\n```\n\n----------------------------------------\n\nTITLE: Testing Column Alias in HAVING Clause in SQL\nDESCRIPTION: This query selects the ID column with an alias 'A', groups by ID, and uses the alias in the HAVING clause. It tests if databases allow referencing column aliases in the HAVING clause.\nSOURCE: https://github.com/h2database/h2database/blob/master/h2/src/test/org/h2/test/todo/columnAlias.txt#2025-04-23_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT ID AS A FROM TEST GROUP BY ID HAVING A>0;\n```\n\n----------------------------------------\n\nTITLE: Testing TIMESTAMPDIFF Function in SQL\nDESCRIPTION: This snippet demonstrates various test cases for the TIMESTAMPDIFF function in SQL, covering different date intervals and edge cases.\nSOURCE: https://github.com/h2database/h2database/blob/master/h2/src/test/org/h2/test/todo/todo.txt#2025-04-23_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nselect timestampdiff(year, '2000-01-01', '2001-01-01');\nselect timestampdiff(year, '2000-03-01', '2001-03-01');\nselect timestampdiff(day, '2000-03-01', '2001-03-01');\nselect timestampdiff(year, '2000-02-29', '2001-02-28');\nselect timestampdiff(day, '2000-02-29', '2001-02-28');\nselect timestampdiff(month, '2000-02-29', '2001-02-28');\nselect timestampadd(year, 1, '2000-02-29');\n```\n\n----------------------------------------\n\nTITLE: Recursive Query with Explicit Recursive View in SQL\nDESCRIPTION: A SQL example showing a simplified way to create a recursive hierarchical query using the RECURSIVE keyword. This approach creates the same hierarchy as the previous example but uses a direct recursive view declaration instead of force views.\nSOURCE: https://github.com/h2database/h2database/blob/master/h2/src/test/org/h2/test/todo/recursiveQueries.txt#2025-04-23_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nDROP VIEW IF EXISTS TEST_REC;\nDROP VIEW IF EXISTS TEST_2;\nDROP TABLE IF EXISTS TEST;\n\nCREATE TABLE TEST(ID INT PRIMARY KEY, PARENT INT, NAME VARCHAR(255));\nINSERT INTO TEST VALUES(1, NULL, 'Root');\nINSERT INTO TEST VALUES(2, 1, 'Plant');\nINSERT INTO TEST VALUES(3, 1, 'Animal');\nINSERT INTO TEST VALUES(4, 2, 'Tree');\nINSERT INTO TEST VALUES(5, 2, 'Flower');\nINSERT INTO TEST VALUES(6, 3, 'Elephant');\nINSERT INTO TEST VALUES(7, 3, 'Dog');\n\nCREATE VIEW RECURSIVE TEST_REC(ID, PARENT, NAME) AS\nSELECT ID, PARENT, NAME FROM TEST T\nWHERE PARENT IS NULL\nUNION ALL\nSELECT T.ID, T.PARENT, T.NAME\nFROM TEST T, TEST_REC R\nWHERE T.PARENT=R.ID;\n\nSELECT * FROM TEST_REC;\n```\n\n----------------------------------------\n\nTITLE: Recursive Query with Force Views in SQL\nDESCRIPTION: An example of implementing a recursive hierarchical query using force views in SQL. This approach creates a hierarchical structure of test data (root, plant, animal, etc.) and uses mutually dependent views (TEST_2 and TEST_REC) to traverse the hierarchy recursively.\nSOURCE: https://github.com/h2database/h2database/blob/master/h2/src/test/org/h2/test/todo/recursiveQueries.txt#2025-04-23_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nDROP VIEW IF EXISTS TEST_REC;\nDROP VIEW IF EXISTS TEST_2;\nDROP TABLE IF EXISTS TEST;\n\nCREATE TABLE TEST(ID INT PRIMARY KEY, PARENT INT, NAME VARCHAR(255));\nINSERT INTO TEST VALUES(1, NULL, 'Root');\nINSERT INTO TEST VALUES(2, 1, 'Plant');\nINSERT INTO TEST VALUES(3, 1, 'Animal');\nINSERT INTO TEST VALUES(4, 2, 'Tree');\nINSERT INTO TEST VALUES(5, 2, 'Flower');\nINSERT INTO TEST VALUES(6, 3, 'Elephant');\nINSERT INTO TEST VALUES(7, 3, 'Dog');\n\nCREATE FORCE VIEW TEST_2(ID, PARENT, NAME) AS SELECT ID, PARENT, NAME FROM TEST_REC;\n\nCREATE FORCE VIEW TEST_REC(ID, PARENT, NAME) AS\nSELECT ID, PARENT, NAME FROM TEST T\nWHERE PARENT IS NULL\nUNION ALL\nSELECT T.ID, T.PARENT, T.NAME\nFROM TEST T, TEST_2 R\nWHERE T.PARENT=R.ID;\n\nSELECT * FROM TEST_REC;\n```\n\n----------------------------------------\n\nTITLE: Testing Column Alias in GROUP BY Clause in SQL\nDESCRIPTION: This query selects the ID column with an alias 'A' and uses this alias in the GROUP BY clause. It tests if databases allow referencing column aliases in the GROUP BY clause.\nSOURCE: https://github.com/h2database/h2database/blob/master/h2/src/test/org/h2/test/todo/columnAlias.txt#2025-04-23_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT ID AS A FROM TEST GROUP BY A;\n```\n\n----------------------------------------\n\nTITLE: Testing Negated Column Alias in GROUP BY Clause in SQL\nDESCRIPTION: This query selects the ID column with an alias 'A' and uses the negation of this alias in the GROUP BY clause. It tests if databases allow using expressions with column aliases in the GROUP BY clause.\nSOURCE: https://github.com/h2database/h2database/blob/master/h2/src/test/org/h2/test/todo/columnAlias.txt#2025-04-23_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT ID AS A FROM TEST GROUP BY -A;\n```\n\n----------------------------------------\n\nTITLE: Sending Email via Gmail SMTP in Java\nDESCRIPTION: This code snippet demonstrates how to send an email using Gmail's SMTP server in Java. It utilizes the javax.mail library to create and send a MIME message. The method allows specifying the recipient, subject, and body of the email.\nSOURCE: https://github.com/h2database/h2database/blob/master/h2/src/tools/org/h2/dev/mail/SendMail.java.txt#2025-04-23_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nstatic void sendMailOverGmail(String password, String to, String subject, String body) throws Exception {\n    String username = \"testing1212123\" + \"@\" + \"gmail.com\";\n    String host = \"smtp.gmail.com\";\n    Properties prop = new Properties();\n    prop.put(\"mail.smtps.auth\", \"true\");\n    Session session = Session.getDefaultInstance(prop);\n    session.setProtocolForAddress(\"rfc822\", \"smtps\");\n    session.setDebug(true);\n    MimeMessage msg = new MimeMessage(session);\n    msg.setRecipients(RecipientType.TO, to);\n    msg.setSubject(subject);\n    msg.setText(body);\n    Transport t = session.getTransport(\"smtps\");\n    try {\n        t.connect(host, username, password);\n        t.sendMessage(msg, msg.getAllRecipients());\n    } finally {\n        t.close();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Column Alias in ORDER BY Clause in SQL\nDESCRIPTION: This query selects the ID column with an alias 'A' and uses this alias in the ORDER BY clause. It tests if databases allow referencing column aliases in the ORDER BY clause.\nSOURCE: https://github.com/h2database/h2database/blob/master/h2/src/test/org/h2/test/todo/columnAlias.txt#2025-04-23_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT ID AS A FROM TEST ORDER BY A;\n```\n\n----------------------------------------\n\nTITLE: Testing Negated Column Alias in ORDER BY Clause in SQL\nDESCRIPTION: This query selects the ID column with an alias 'A' and uses the negation of this alias in the ORDER BY clause. It tests if databases allow using expressions with column aliases in the ORDER BY clause.\nSOURCE: https://github.com/h2database/h2database/blob/master/h2/src/test/org/h2/test/todo/columnAlias.txt#2025-04-23_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT ID AS A FROM TEST ORDER BY -A;\n```\n\n----------------------------------------\n\nTITLE: Testing Column Alias in WHERE Clause in SQL\nDESCRIPTION: This query selects the ID column with an alias 'A' and uses this alias in the WHERE clause. It tests if databases allow referencing column aliases in the WHERE clause.\nSOURCE: https://github.com/h2database/h2database/blob/master/h2/src/test/org/h2/test/todo/columnAlias.txt#2025-04-23_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT ID AS A FROM TEST WHERE A>0;\n```\n\n----------------------------------------\n\nTITLE: Database Recovery Script Generation - SQL\nDESCRIPTION: SQL command to generate a recovery script for a potentially corrupted database.\nSOURCE: https://github.com/h2database/h2database/blob/master/h2/src/test/org/h2/test/todo/supportTemplates.txt#2025-04-23_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSCRIPT TO 'test.sql'\n```\n\n----------------------------------------\n\nTITLE: Querying Database Creation Version - SQL\nDESCRIPTION: SQL query to determine the version of H2 that created a database by checking the information schema settings.\nSOURCE: https://github.com/h2database/h2database/blob/master/h2/src/test/org/h2/test/todo/supportTemplates.txt#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect * from information_schema.settings where name='CREATE_BUILD'\n```\n\n----------------------------------------\n\nTITLE: MySQL Database and User Initialization\nDESCRIPTION: SQL commands to create a test database and set up a user with full privileges\nSOURCE: https://github.com/h2database/h2database/blob/master/h2/src/test/org/h2/test/otherDatabases.txt#2025-04-23_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate database test;\ncreate user 'sa'@'localhost' identified by 'sa';\nuse test;\ngrant all on * to 'sa'@'localhost' with grant option;\n```\n\n----------------------------------------\n\nTITLE: Adding Seconds to Date in H2 Database\nDESCRIPTION: Updates table FOO by adding 4,320,000 seconds to column 'a' using H2's DATEADD function.\nSOURCE: https://github.com/h2database/h2database/blob/master/h2/src/test/org/h2/test/todo/dateFunctions.txt#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nupdate FOO set a = dateadd('second', 4320000, a);\n```\n\n----------------------------------------\n\nTITLE: Querying H2 Database Version\nDESCRIPTION: SQL query to retrieve the build version of H2 database from information schema settings.\nSOURCE: https://github.com/h2database/h2database/blob/master/h2/src/test/org/h2/test/todo/supportTemplates.txt#2025-04-23_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselect * from information_schema.settings where name='CREATE_BUILD'\n```\n\n----------------------------------------\n\nTITLE: Adding Seconds to Date in MySQL\nDESCRIPTION: Updates table FOO by adding 4,320,000 seconds to column 'a' using MySQL's DATE_ADD function with the INTERVAL keyword.\nSOURCE: https://github.com/h2database/h2database/blob/master/h2/src/test/org/h2/test/todo/dateFunctions.txt#2025-04-23_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nupdate FOO set a = date_add(a, interval 4320000 second);\n```\n\n----------------------------------------\n\nTITLE: Adding Seconds to Date in PostgreSQL\nDESCRIPTION: Updates table FOO by adding 4,320,000 seconds to column 'a' using PostgreSQL's interval addition syntax with the 's' unit identifier.\nSOURCE: https://github.com/h2database/h2database/blob/master/h2/src/test/org/h2/test/todo/dateFunctions.txt#2025-04-23_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nupdate FOO set a = a + interval '4320000 s';\n```\n\n----------------------------------------\n\nTITLE: Adding Seconds to Date in Microsoft SQL Server\nDESCRIPTION: Updates table FOO by adding 4,320,000 seconds to column 'a' using SQL Server's DATEADD function with the shorthand 's' for seconds.\nSOURCE: https://github.com/h2database/h2database/blob/master/h2/src/test/org/h2/test/todo/dateFunctions.txt#2025-04-23_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nupdate FOO set a = dateadd(s, 4320000, a);\n```\n\n----------------------------------------\n\nTITLE: Adding Seconds to Date in Oracle\nDESCRIPTION: Updates table FOO by adding 4,320,000 seconds to column 'a' using Oracle's interval addition syntax with the SECOND unit identifier.\nSOURCE: https://github.com/h2database/h2database/blob/master/h2/src/test/org/h2/test/todo/dateFunctions.txt#2025-04-23_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nupdate FOO set a = a + INTERVAL '4320000' SECOND;\n```\n\n----------------------------------------\n\nTITLE: Creating and Populating Test Table in SQL\nDESCRIPTION: This snippet creates a table named TEST with an ID column, then inserts two rows of data. It's a setup for the subsequent test queries.\nSOURCE: https://github.com/h2database/h2database/blob/master/h2/src/test/org/h2/test/todo/columnAlias.txt#2025-04-23_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nDROP TABLE TEST;\nCREATE TABLE TEST(ID INT);\nINSERT INTO TEST VALUES(1);\nINSERT INTO TEST VALUES(2);\n```\n\n----------------------------------------\n\nTITLE: HSQLDB Connection String Configuration\nDESCRIPTION: JDBC connection string with H2-compatible settings for HSQLDB\nSOURCE: https://github.com/h2database/h2database/blob/master/h2/src/test/org/h2/test/otherDatabases.txt#2025-04-23_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSET WRITE_DELAY 1\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL String Escape Examples\nDESCRIPTION: Demonstration of string escape mechanisms in PostgreSQL\nSOURCE: https://github.com/h2database/h2database/blob/master/h2/src/test/org/h2/test/otherDatabases.txt#2025-04-23_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nselect 'Joe''s', 'Joe\\'s';\n```\n\n----------------------------------------\n\nTITLE: MySQL SQL Mode Configuration\nDESCRIPTION: Commands to set and check SQL mode settings in MySQL\nSOURCE: https://github.com/h2database/h2database/blob/master/h2/src/test/org/h2/test/otherDatabases.txt#2025-04-23_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSET GLOBAL sql_mode='ANSI';\nSELECT @@global.sql_mode;\n```\n\n----------------------------------------\n\nTITLE: MySQL NULL Comparison Test Case\nDESCRIPTION: Example demonstrating NULL comparison behavior in MySQL\nSOURCE: https://github.com/h2database/h2database/blob/master/h2/src/test/org/h2/test/otherDatabases.txt#2025-04-23_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ndrop table test;\ncreate table test(id int);\ninsert into test values(1);\ninsert into test values(null);\nselect * from test where id=id and 1=1;\n```\n\n----------------------------------------\n\nTITLE: Starting MySQL Server with InnoDB Configuration\nDESCRIPTION: Commands to start MySQL server with InnoDB storage engine and custom timeout settings\nSOURCE: https://github.com/h2database/h2database/blob/master/h2/src/test/org/h2/test/otherDatabases.txt#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo mysqld_safe --default-storage-engine=innodb\nsudo mysqld_safe --default-storage-engine=innodb --wait_timeout=10\n```\n\n----------------------------------------\n\nTITLE: Installing H2 Database via Maven Dependency\nDESCRIPTION: Maven dependency configuration for adding H2 database to a Java project. Specifies the groupId, artifactId, and version for the H2 database dependency.\nSOURCE: https://github.com/h2database/h2database/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n    <groupId>com.h2database</groupId>\n    <artifactId>h2</artifactId>\n    <version>2.3.232</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Testing Email Sending Functionality in Java\nDESCRIPTION: This main method serves as a test for the email sending functionality. It calls the sendMailOverGmail method with predefined parameters to send a test email. The recipient email address is constructed to avoid direct exposure.\nSOURCE: https://github.com/h2database/h2database/blob/master/h2/src/tools/org/h2/dev/mail/SendMail.java.txt#2025-04-23_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npublic static void main(String[] args) throws Exception {\n    String to = \"thomas.tom.mueller\" + \"@\" + \"gmail.com\";\n    sendMailOverGmail(\"\", to, \"Test\", \"Test Mail\");\n}\n```\n\n----------------------------------------\n\nTITLE: Building H2 database release on Unix/Linux\nDESCRIPTION: Command sequence for building a release version of H2 database on Unix/Linux systems.\nSOURCE: https://github.com/h2database/h2database/blob/master/h2/src/installer/release.txt#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncd src/installer\n./buildRelease.sh\n```\n\n----------------------------------------\n\nTITLE: Building H2 database release on Windows\nDESCRIPTION: Command sequence for building a release version of H2 database on Windows systems.\nSOURCE: https://github.com/h2database/h2database/blob/master/h2/src/installer/release.txt#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncd src/installer\nbuildRelease.bat\n```\n\n----------------------------------------\n\nTITLE: Updating version in Constants.java for H2 database\nDESCRIPTION: Java code snippet showing which constants need to be updated in the Constants.java file when releasing a new version of H2.\nSOURCE: https://github.com/h2database/h2database/blob/master/h2/src/installer/release.txt#2025-04-23_snippet_10\n\nLANGUAGE: java\nCODE:\n```\n// Update org.h2.engine.Constants.java:\n// change the version and build number:\n//     set BUILD_DATE to today\n//     increment BUILD_ID, the value must be even (for example, 202)\n//     set VERSION_MAJOR / VERSION_MINOR to the new version number\n// if the last TCP_PROTOCOL_VERSION_##\n//     doesn't have a release date set it to current BUILD_DATE\n```\n\n----------------------------------------\n\nTITLE: Building MVStore jar file for H2 database\nDESCRIPTION: Command to build the MVStore jar file, which should be around 300 KB to ensure it doesn't accidentally reference database code.\nSOURCE: https://github.com/h2database/h2database/blob/master/h2/src/installer/release.txt#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n./build.sh jarMVStore\n```\n\n----------------------------------------\n\nTITLE: Building documentation for H2 database\nDESCRIPTION: Command to clean, compile and generate documentation for the H2 database, which includes checking for overly long lines.\nSOURCE: https://github.com/h2database/h2database/blob/master/h2/src/installer/release.txt#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./build.sh clean compile docs\n```\n\n----------------------------------------\n\nTITLE: Publishing H2 to Maven Central\nDESCRIPTION: Command to build and deploy H2 to Maven Central repository.\nSOURCE: https://github.com/h2database/h2database/blob/master/h2/src/installer/release.txt#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n./build.sh clean compile jar mavenDeployCentral\n```\n\n----------------------------------------\n\nTITLE: Generating Javadoc documentation for H2 database\nDESCRIPTION: Command to clean, compile and generate Javadoc documentation for the H2 database implementation.\nSOURCE: https://github.com/h2database/h2database/blob/master/h2/src/installer/release.txt#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./build.sh clean compile javadocImpl\n```\n\n----------------------------------------\n\nTITLE: Running spellcheck for H2 database\nDESCRIPTION: Command for cleaning, compiling, and running spellcheck on the H2 database codebase to identify and fix typos.\nSOURCE: https://github.com/h2database/h2database/blob/master/h2/src/installer/release.txt#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./build.sh clean compile spellcheck\n```\n\n----------------------------------------\n\nTITLE: Removing checksum files from Maven repository\nDESCRIPTION: Commands to remove SHA1 and MD5 checksum files from the Maven repository before signing.\nSOURCE: https://github.com/h2database/h2database/blob/master/h2/src/installer/release.txt#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncd /data/h2database/m2-repo/com/h2database\nfind . -name \"*.sha1\" -delete\nfind . -name \"*.md5\" -delete\n```\n\n----------------------------------------\n\nTITLE: Signing H2 database release files with GPG\nDESCRIPTION: Command for digitally signing H2 release files with GPG before uploading to Maven Central.\nSOURCE: https://github.com/h2database/h2database/blob/master/h2/src/installer/release.txt#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ngpg -u \"Thomas Mueller Graf <thomas.tom.mueller@gmail.com>\" -ab h2-<...>\n```\n\n----------------------------------------\n\nTITLE: Creating bundle jar for Maven Central\nDESCRIPTION: Command to create a bundle jar containing all the signed H2 files for uploading to Maven Central.\nSOURCE: https://github.com/h2database/h2database/blob/master/h2/src/installer/release.txt#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\njar -cvf bundle.jar h2-*\n```\n\n----------------------------------------\n\nTITLE: Converting H2 Database HTML Documentation to PDF using BASIC\nDESCRIPTION: This script loads the H2 database HTML documentation, applies proper styling to headings and text, adds a table of contents with hyperlinks, inserts page numbers in the footer, and exports the result as a PDF file. It handles image sizing, page breaks, and document formatting to create a professional documentation PDF.\nSOURCE: https://github.com/h2database/h2database/blob/master/h2/src/installer/openoffice.txt#2025-04-23_snippet_0\n\nLANGUAGE: BASIC\nCODE:\n```\nREM  *****  BASIC  *****\n\nSub Main\n    H2Pdf\nEnd Sub\n\nsub H2Pdf\n    BaseDir = \"file:///C:/data/h2database/\"\n    REM BaseDir = \"file:///Users/tmueller/data/\"\n\n    Url = BaseDir & \"h2/docs/html/onePage.html\"\n    dim FileProperties(1) As New com.sun.star.beans.PropertyValue\n    FileProperties(0).Name = \"FilterName\"\n    FileProperties(0).Value = \"HTML (StarWriter)\"\n    FileProperties(1).Name = \"UpdateDocMode\"\n    FileProperties(1).Value = 3 'full update\n    document = StarDesktop.loadComponentFromURL(Url, \"_blank\", 0, FileProperties)\n    docs = ThisComponent.CurrentController.Frame\n    dispatcher = createUnoService(\"com.sun.star.frame.DispatchHelper\")\n    dispatcher.executeDispatch(docs, \".uno:UpdateAll\", \"\", 0, Array())\n    StyleFamilies = document.StyleFamilies\n\n    ParagraphStyles = StyleFamilies.getByName(\"ParagraphStyles\")\n    BodyStyle = ParagraphStyles.getByName(\"Text body\")\n    BodyStyle.ParaOrphans = 2\n    BodyStyle.ParaWidows = 2\n\n    HeadingStyle = ParagraphStyles.getByName(\"Heading 1\")\n    HeadingStyle.BreakType = 3 ' Insert Page Break Before\n    HeadingStyle.ParaKeepTogether = false\n\n    For i = 1 to 4\n        ParagraphStyles.getByName(\"Heading \" + i).OutlineLevel = i\n    Next\n\n    images = document.GraphicObjects\n    For i = 0 to images.getCount() - 1\n        image = images.getByIndex(i)\n        if image.Size.Width <> image.ActualSize.Width or image.Size.Height <> image.ActualSize.Height then\n            image.Size.Width = image.ActualSize.Width\n            image.Size.Height = image.ActualSize.Height\n            wait 100\n        end if\n    Next\n    dispatcher.executeDispatch(docs, \".uno:UpdateAll\", \"\", 0, Array())\n\n    PageStyles = StyleFamilies.getByName(\"PageStyles\")\n\n    Standard = PageStyles.getByName(\"HTML\")\n    Standard.FooterIsOn = True\n\n    dispatcher.executeDispatch(docs, \".uno:UpdateAll\", \"\", 0, Array())\n\n    oText = Standard.FooterText\n    oText.setString(\"\")\n    PageNumber = document.createInstance(\"com.sun.star.text.TextField.PageNumber\")\n    PageNumber.NumberingType = 4 ' magic constant: 4=Arabic numbers\n    PageNumber.SubType = 1 ' magic constant: use current page number\n\n    PageCount = document.createInstance(\"com.sun.star.text.TextField.PageCount\")\n    PageCount.NumberingType = 4 ' magic constant: 4=Arabic numbers\n\n    FooterCursor = oText.Text.createTextCursor()\n    oText.insertString(FooterCursor, Chr(09)& Chr(09), False)\n    oText.insertTextContent(FooterCursor, PageNumber, False)\n    oText.insertString(FooterCursor, \" of \", False)\n    oText.insertTextContent(FooterCursor, PageCount, False)\n\n    Cursor = document.Text.createTextCursor()\n    Cursor.gotoStart(false)\n    Cursor.gotoNextParagraph(false)\n    Cursor.gotoNextParagraph(false)\n\n    dispatcher.executeDispatch(docs, \".uno:UpdateAll\", \"\", 0, Array())\n\n    toc = document.createInstance(\"com.sun.star.text.ContentIndex\")\n    toc.Title= \"Table of Contents\"\n    toc.CreateFromOutline = True\n    toc.Level = 4\n    toc.IsProtected = false\n    document.Text.insertTextContent(Cursor, toc, false)\n\n    Cursor.gotoStart(false)\n    result = true\n    while result\n        result = Cursor.gotoNextParagraph(false)\n        if Cursor.ParaStyleName = \"Heading 1\" then\n            Cursor.BreakType = 4 ' Insert Page Break After\n        end if\n    wend\n\n    dim linkStart(0) As New com.sun.star.beans.PropertyValue\n    dim linkEnd(0) As New com.sun.star.beans.PropertyValue\n\n    for i = 1 To 4\n        oLevel = toc.LevelFormat.getByIndex(i)\n        bound = UBound(oLevel)\n        x = DimArray(bound + 2)\n        x(0) = linkStart\n        for j = 0 to bound\n            x(j + 1) = oLevel(j)\n        next\n        x(bound + 2) = linkEnd\n        linkStart(0).Name = \"TokenType\"\n        linkStart(0).Value = \"TokenHyperlinkStart\"\n        linkStart(0).Handle = -1\n        linkStart(0).State = com.sun.star.beans.PropertyState.DIRECT_VALUE\n        linkEnd(0).Name = \"TokenType\"\n        linkEnd(0).Value = \"TokenHyperlinkEnd\"\n        linkEnd(0).Handle = -1\n        linkEnd(0).State = com.sun.star.beans.PropertyState.DIRECT_VALUE\n        toc.LevelFormat.replaceByIndex(i, x)\n    next\n\n    dispatcher.executeDispatch(docs, \".uno:UpdateAll\", \"\", 0, Array())\n    toc.update()\n    dispatcher.executeDispatch(docs, \".uno:UpdateAll\", \"\", 0, Array())\n    toc.update()\n    dispatcher.executeDispatch(docs, \".uno:UpdateAll\", \"\", 0, Array())\n\n    pdfTemp = BaseDir & \"h2web/h2temp.pdf\"\n    pdf = BaseDir & \"h2web/h2.pdf\"\n\n    dim pdfProperties(1) as new com.sun.star.beans.PropertyValue\n    pdfProperties(0).Name = \"FilterName\"\n    pdfProperties(0).Value = \"writer_pdf_Export\"\n    document.storeToURL(pdfTemp, pdfProperties())\n\n    fileAccessService = createUnoService(\"com.sun.star.ucb.SimpleFileAccess\")\n    fileAccessService.move(pdfTemp, pdf)\n\n    ThisComponent.close(true)\nend sub\n```"
  }
]