[
  {
    "owner": "jfversluis",
    "repo": "plugin.maui.swipecardview",
    "content": "TITLE: Populating SwipeCardView with ItemsSource in XAML\nDESCRIPTION: Demonstrates how to populate a SwipeCardView with an array of strings using the ItemsSource property in XAML. This example shows a basic card template with a Label.\nSOURCE: https://github.com/jfversluis/plugin.maui.swipecardview/blob/main/docs/index.md#2025-04-23_snippet_0\n\nLANGUAGE: xaml\nCODE:\n```\n<swipeCardView:SwipeCardView \n    VerticalOptions=\"FillAndExpand\">\n    <swipeCardView:SwipeCardView.ItemTemplate>\n        <DataTemplate>\n            <Label Text=\"{Binding .}\" FontSize=\"Large\" HorizontalTextAlignment=\"Center\" VerticalTextAlignment=\"Center\" BackgroundColor=\"Beige\"/>\n        </DataTemplate>\n    </swipeCardView:SwipeCardView.ItemTemplate>\n    <swipeCardView:SwipeCardView.ItemsSource>\n        <x:Array Type=\"{x:Type x:String}\">\n            <x:String>Card 1</x:String>\n            <x:String>Card 2</x:String>\n            <x:String>Card 3</x:String>\n        </x:Array>\n    </swipeCardView:SwipeCardView.ItemsSource>\n</swipeCardView:SwipeCardView>\n```\n\n----------------------------------------\n\nTITLE: Binding SwipeCardView ItemsSource to ViewModel in XAML\nDESCRIPTION: Demonstrates how to bind the ItemsSource of SwipeCardView to a property in the ViewModel. This example uses a simple DataTemplate with a Label.\nSOURCE: https://github.com/jfversluis/plugin.maui.swipecardview/blob/main/docs/index.md#2025-04-23_snippet_2\n\nLANGUAGE: xaml\nCODE:\n```\n<swipeCardView:SwipeCardView\n    ItemsSource=\"{Binding CardItems}\">\n    <swipeCardView:SwipeCardView.ItemTemplate>\n        <DataTemplate>\n            <Label Text=\"{Binding .}\" />\n        </DataTemplate>\n    </swipeCardView:SwipeCardView.ItemTemplate>\n</swipeCardView:SwipeCardView>\n```\n\n----------------------------------------\n\nTITLE: Handling Swiped Event in SwipeCardView\nDESCRIPTION: Shows how to implement an event handler for the Swiped event of SwipeCardView. This handler allows responding to different swipe directions.\nSOURCE: https://github.com/jfversluis/plugin.maui.swipecardview/blob/main/docs/index.md#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvoid OnSwiped(object sender, SwipedCardEventArgs e)\n{\n    switch (e.Direction)\n    {\n        case SwipeCardDirection.None:\n            break;\n        case SwipeCardDirection.Right:\n            break;\n        case SwipeCardDirection.Left:\n            break;\n        case SwipeCardDirection.Up:\n            break;\n        case SwipeCardDirection.Down:\n            break;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Dragging Event in SwipeCardView\nDESCRIPTION: Demonstrates how to implement an event handler for the Dragging event of SwipeCardView. This handler allows responding to different stages of the dragging movement.\nSOURCE: https://github.com/jfversluis/plugin.maui.swipecardview/blob/main/docs/index.md#2025-04-23_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nprivate void OnDragging(object sender, DraggingCardEventArgs e)\n{\n    switch (e.Position)\n    {\n        case DraggingCardPosition.Start:\n            break;\n        case DraggingCardPosition.UnderThreshold:\n            break;\n        case DraggingCardPosition.OverThreshold:\n            break;\n        case DraggingCardPosition.FinishedUnderThreshold:\n            break;\n        case DraggingCardPosition.FinishedOverThreshold:\n            break;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SwipeCardView in XAML for Simple Page\nDESCRIPTION: XAML code snippet demonstrating how to implement a basic SwipeCardView with data binding and a simple card template.\nSOURCE: https://github.com/jfversluis/plugin.maui.swipecardview/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<swipeCardView:SwipeCardView\n    ItemsSource=\"{Binding CardItems}\"\n    SwipedCommand=\"{Binding SwipedCommand}\"\n    VerticalOptions=\"FillAndExpand\">\n    <swipeCardView:SwipeCardView.ItemTemplate>\n        <DataTemplate>\n            <Label Text=\"{Binding .}\" FontSize=\"Large\" HorizontalTextAlignment=\"Center\" VerticalTextAlignment=\"Center\" BackgroundColor=\"Beige\"/>\n        </DataTemplate>\n    </swipeCardView:SwipeCardView.ItemTemplate>\n</swipeCardView:SwipeCardView>\n```\n\n----------------------------------------\n\nTITLE: Binding TopItem Property of SwipeCardView in XAML\nDESCRIPTION: Shows how to bind the TopItem property of SwipeCardView to a property in the ViewModel. This allows for easy access to the currently displayed item.\nSOURCE: https://github.com/jfversluis/plugin.maui.swipecardview/blob/main/docs/index.md#2025-04-23_snippet_3\n\nLANGUAGE: xaml\nCODE:\n```\n<swipeCardView:SwipeCardView\n    ItemsSource=\"{Binding CardItems}\"\n    TopItem=\"{Binding TopItem}\">\n    <swipeCardView:SwipeCardView.ItemTemplate>\n        <DataTemplate>\n            <Label Text=\"{Binding .}\" />\n        </DataTemplate>\n    </swipeCardView:SwipeCardView.ItemTemplate>\n</swipeCardView:SwipeCardView>\n```\n\n----------------------------------------\n\nTITLE: Implementing TopItem Property in ViewModel for SwipeCardView\nDESCRIPTION: Demonstrates how to implement the TopItem property in the ViewModel for use with SwipeCardView. This property is typically used for getting the top item value.\nSOURCE: https://github.com/jfversluis/plugin.maui.swipecardview/blob/main/docs/index.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nprivate string _topItem;\n\npublic string TopItem\n{\n    get => _topItem;\n    set\n    {\n        _topItem = value;\n        RaisePropertyChanged();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ObservableCollection for SwipeCardView in C#\nDESCRIPTION: Shows how to define an ObservableCollection in the ViewModel for use with SwipeCardView. This collection can be bound to the ItemsSource property of SwipeCardView.\nSOURCE: https://github.com/jfversluis/plugin.maui.swipecardview/blob/main/docs/index.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nprivate ObservableCollection<string> _cardItems = new ObservableCollection<string>();\n\npublic ObservableCollection<string> CardItems\n{\n    get => _cardItems;\n    set\n    {\n        _cardItems = value;\n        this.RaisePropertyChanged();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring SwipeCardView Method\nDESCRIPTION: Method declaration for InvokeSwipe that simulates PanGesture movement in a specified direction with configurable touch parameters.\nSOURCE: https://github.com/jfversluis/plugin.maui.swipecardview/blob/main/docs/api.md#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic Task InvokeSwipe(SwipeCardDirection swipeCardDirection, uint numberOfTouches, uint touchDifferenceX, TimeSpan touchDelay, TimeSpan endTouch)\n```\n\n----------------------------------------\n\nTITLE: Installing SwipeCardView Package via .NET CLI\nDESCRIPTION: Command to install the SwipeCardView NuGet package using the .NET CLI.\nSOURCE: https://github.com/jfversluis/plugin.maui.swipecardview/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Plugin.Maui.SwipeCardView\n```\n\n----------------------------------------\n\nTITLE: Configuring MauiAsset Build Action in .csproj\nDESCRIPTION: MSBuild configuration that specifies how raw assets should be included in the MAUI application package. The build action ensures all files in the Resources/Raw directory and its subdirectories are deployed with the application.\nSOURCE: https://github.com/jfversluis/plugin.maui.swipecardview/blob/main/samples/SwipeCardView.Sample/Resources/Raw/AboutAssets.txt#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Asset File Using FileSystem\nDESCRIPTION: Demonstrates how to load a raw asset file from the application package using the FileSystem API. The code opens a file stream, reads the contents using a StreamReader, and returns the file contents as a string.\nSOURCE: https://github.com/jfversluis/plugin.maui.swipecardview/blob/main/samples/SwipeCardView.Sample/Resources/Raw/AboutAssets.txt#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```"
  }
]