[
  {
    "owner": "codama-idl",
    "repo": "codama",
    "content": "TITLE: Basic Usage of Rust Renderer\nDESCRIPTION: Example showing how to use the renderVisitor function to generate Rust clients from a Codama IDL\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/renderers-rust/README.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// node ./codama.mjs\nimport { renderVisitor } from '@codama/renderers-rust';\n\nconst pathToGeneratedFolder = path.join(__dirname, 'clients', 'rust', 'src', 'generated');\nconst options = {}; // See below.\ncodama.accept(renderVisitor(pathToGeneratedFolder, options));\n```\n\n----------------------------------------\n\nTITLE: Creating a Complete RootNode with Counter Program in TypeScript\nDESCRIPTION: Shows a comprehensive example of creating a RootNode with a counter program that includes account definitions and instructions. The example defines the program structure with name, public key, version, accounts with structured data, and various instructions.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/RootNode.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = rootNode(\n    programNode({\n        name: 'counter',\n        publicKey: '2R3Ui2TVUUCyGcZdopxJauk8ZBzgAaHHZCVUhm5ifPaC',\n        version: '1.0.0',\n        accounts: [\n            accountNode({\n                name: 'counter',\n                data: structTypeNode([\n                    structFieldTypeNode({ name: 'authority', type: publicKeyTypeNode() }),\n                    structFieldTypeNode({ name: 'value', type: numberTypeNode('u32') }),\n                ]),\n            }),\n        ],\n        instructions: [\n            instructionNode({ name: 'create' /* ... */ }),\n            instructionNode({ name: 'increment' /* ... */ }),\n            instructionNode({ name: 'transferAuthority' /* ... */ }),\n            instructionNode({ name: 'delete' /* ... */ }),\n        ],\n    }),\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Instructions Including Sub-Instructions in TypeScript\nDESCRIPTION: Example of using the getAllInstructionsWithSubs helper function to get all instructions including nested sub-instructions from different node types.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/InstructionNode.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst allInstructionsFromTheRoot = getAllInstructionsWithSubs(rootNode);\nconst allInstructionsFromThisProgram = getAllInstructionsWithSubs(programNode);\nconst allInstructionsFromThisInstruction = getAllInstructionsWithSubs(instructionNode);\n```\n\n----------------------------------------\n\nTITLE: Installing Codama CLI and Initializing Project\nDESCRIPTION: Commands to install the Codama package and initialize a new Codama project. This will prompt for the IDL path and script presets.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/cli/README.md#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm install codama\ncodama init\n```\n\n----------------------------------------\n\nTITLE: Creating a ProgramNode Using Helper Function in TypeScript\nDESCRIPTION: Example of using the programNode helper function to create a new ProgramNode object with specified properties including name, public key, version and empty collections for accounts, instructions, defined types, PDAs, and errors.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/ProgramNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = programNode({\n    name: 'counter',\n    publicKey: '7ovtg4pFqjQdSwFAUCu8gTnh5thZHzAyJFXy3Ssnj3yK',\n    version: '1.42.6',\n    accounts: [],\n    instructions: [],\n    definedTypes: [],\n    pdas: [],\n    errors: [],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Parameterized Account Counter\nDESCRIPTION: Enhanced visitor implementation with a multiplier parameter.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/visitors-core/README.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst accountCounterVisitor = (multiplier = 1): Visitor<number, 'programNode'> => ({\n    visitProgram: (node: ProgramNode) => node.accounts.length * multiplier,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an Account with a Linked PDA in TypeScript\nDESCRIPTION: Example showing how to create an account with a linked PDA definition within a program node. The PDA uses both constant and variable seeds to derive the account address.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/AccountNode.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nprogramNode({\n    name: 'myProgram',\n    accounts: [\n        accountNode({\n            name: 'token',\n            data: structTypeNode([structFieldTypeNode({ name: 'authority', type: publicKeyTypeNode() })]),\n            pda: pdaLinkNode('myPda'),\n        }),\n    ],\n    pdas: [\n        pdaNode({\n            name: 'myPda',\n            seeds: [\n                constantPdaSeedNodeFromString('utf8', 'token'),\n                variablePdaSeedNode('authority', publicKeyTypeNode()),\n            ],\n        }),\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Using parseAccountData Function in TypeScript\nDESCRIPTION: Example of using the parseAccountData function to identify and deserialize account data from a byte array, showing how to access the parsed data and account node.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/dynamic-parsers/README.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst parsedData = parseAccountData(rootNode, bytes);\n// ^ ParsedData<AccountNode> | undefined\n\nif (parsedData) {\n    const accountNode: AccountNode = getLastNodeFromPath(parsedData.path);\n    const decodedData: unknown = parsedData.data;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Codama Instance from JSON\nDESCRIPTION: Example of creating a new Codama instance by parsing a JSON file using the createFromJson function.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/library/README.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst json: string = fs.readFileSync('path/to/codamaIdl.json', 'utf-8');\nconst codama = createFromJson(json);\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Defined Types Using getAllDefinedTypes Helper in TypeScript\nDESCRIPTION: Example of using the getAllDefinedTypes helper function to retrieve all DefinedTypeNodes under a specified node, which can be a RootNode, a ProgramNode, or an array of ProgramNodes.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/ProgramNode.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst allDefinedTypes = getAllDefinedTypes(rootNode);\n```\n\n----------------------------------------\n\nTITLE: Creating an Instruction for Account Creation in TypeScript\nDESCRIPTION: Example of creating an instruction that creates a new account, including byte delta information to track account data size changes.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/InstructionNode.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninstructionNode({\n    name: 'createCounter',\n    accounts: [\n        instructionAccountNode({ name: 'counter', isWritable: true, isSigner: true }),\n        instructionAccountNode({ name: 'authority', isWritable: false, isSigner: false }),\n    ],\n    byteDeltas: [instructionByteDeltaNode(accountLinkNode('counter'))],\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Accounts in Codama IDL\nDESCRIPTION: Updates or deletes AccountNodes based on a configuration object. Supports renaming accounts, renaming fields, adding PDA seeds, and deleting accounts entirely.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/visitors/README.md#2025-04-19_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\ncodama.update(\n    updateAccountsVisitor({\n        vault: {\n            // Rename the 'vault' account to 'safe'.\n            name: 'safe',\n            // Rename the 'owner' field to 'authority'.\n            data: { owner: 'authority' },\n            // Create a new PDA node and link it to this account.\n            seeds: [variablePdaSeedNode('authority', publicKeyTypeNode())],\n        },\n        counter: {\n            // Delete the 'counter' account.\n            delete: true,\n        },\n    }),\n);\n```\n\n----------------------------------------\n\nTITLE: Transforming Defined Types into Accounts in Codama IDL\nDESCRIPTION: Transforms DefinedTypeNodes matching specified names into AccountNodes within the same ProgramNode. This visitor allows for conversion of defined types into proper account structures.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/visitors/README.md#2025-04-19_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ncodama.update(transformDefinedTypesIntoAccountsVisitor(['counter', 'escrow']));\n```\n\n----------------------------------------\n\nTITLE: Advanced Example of Link Node Resolution with getNodeCodec\nDESCRIPTION: Demonstrates how getNodeCodec resolves link nodes in a Codama IDL. The example shows defining a program with two types where one is a link to the other, then creating and using a codec for the linked type.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/dynamic-codecs/README.md#2025-04-19_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n// Here we define a program with two types, one of which is a link to the other.\nconst root = rootNode(\n    programNode({\n        definedTypes: [\n            definedTypeNode({ name: 'slot', type: numberTypeNode('u64') }),\n            definedTypeNode({ name: 'lastSlot', type: definedTypeLinkNode('slot') }),\n        ],\n        name: 'myProgram',\n        publicKey: '1111',\n    }),\n);\n\n// The codec for the linked `lastSlot` defined type is resolved using the `slot` defined type.\nconst codec = getNodeCodec([root, root.program, root.program.definedTypes[1]]);\nexpect(codec.encode(42)).toStrictEqual(hex('2a00000000000000'));\nexpect(codec.decode(hex('2a00000000000000'))).toBe(42n);\n```\n\n----------------------------------------\n\nTITLE: Converting Anchor IDL to Codama IDL in JavaScript\nDESCRIPTION: Example code demonstrating how to use the rootNodeFromAnchor function to convert an Anchor IDL file into a Codama IDL. The process involves reading the Anchor IDL JSON file, parsing it, and then using createFromRoot to generate the Codama IDL representation.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes-from-anchor/README.md#2025-04-19_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// node ./codama.mjs\nimport { rootNodeFromAnchor } from '@codama/nodes-from-anchor';\nimport { createFromRoot } from 'codama';\nimport { readFileSync } from 'node:fs';\nimport path from 'path';\n\n// Read the content of your IDL file.\nconst anchorIdlPath = path.join(__dirname, 'target', 'idl', 'anchor_program.json');\nconst anchorIdl = JSON.parse(readFileSync(anchorIdlPath, 'utf-8'));\n\n// Parse it into a Codama IDL.\nconst codama = createFromRoot(rootNodeFromAnchor(anchorIdl));\n```\n\n----------------------------------------\n\nTITLE: Using Visit Functions\nDESCRIPTION: Examples of using visit and visitOrElse functions with visitors.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/visitors-core/README.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst counter: number = visit(programNode, accountCounterVisitor());\nconst counter: number = visit(stringTypeNode, accountCounterVisitor(), () => 0);\n```\n\n----------------------------------------\n\nTITLE: Creating AccountLinkNode Objects in TypeScript\nDESCRIPTION: Example of creating AccountLinkNode objects using the helper function. The first example creates a reference to an account in the current program, while the second creates a reference to an account in another program.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/linkNodes/AccountLinkNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = accountLinkNode('myAccount');\nconst nodeFromAnotherProgram = accountLinkNode('myAccount', 'myOtherProgram');\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of getNodeCodec Function\nDESCRIPTION: Demonstrates how to use the getNodeCodec function to create a codec for a node in a Codama IDL, then using it to encode and decode data.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/dynamic-codecs/README.md#2025-04-19_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nconst codec = getNodeCodec([root, program, definedType]);\nconst bytes = codec.encode(someData);\nconst decodedData = codec.decode(bytes);\n```\n\n----------------------------------------\n\nTITLE: Creating an AccountNode with accountNode() Helper Function in TypeScript\nDESCRIPTION: Example demonstrating how to create a basic AccountNode object using the accountNode() helper function. This creates a 'myCounter' account with authority and value fields.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/AccountNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = accountNode({\n    name: 'myCounter',\n    data: structTypeNode([\n        structFieldTypeNode({ name: 'authority', type: publicKeyTypeNode() }),\n        structFieldTypeNode({ name: 'value', type: numberTypeNode('u64') }),\n    ]),\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Client Code from Codama IDL\nDESCRIPTION: Demonstrates how to generate JavaScript and Rust client code from a Codama IDL using renderer visitors.\nSOURCE: https://github.com/codama-idl/codama/blob/main/README.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { renderJavaScriptVisitor, renderRustVisitor } from '@codama/renderers';\n\ncodama.accept(renderJavaScriptVisitor('clients/js/src/generated', { ... }));\ncodama.accept(renderRustVisitor('clients/rust/src/generated', { ... }));\n```\n\n----------------------------------------\n\nTITLE: Writing RenderMap to Filesystem\nDESCRIPTION: Example of writing RenderMap content to the filesystem with base directory configuration.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/renderers-core/README.md#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst renderMap = new RenderMap()\n    .add('programs/token.ts', 'export type TokenProgram = { /* ... */ }')\n    .add('accounts/mint.ts', 'export type MintAccount = { /* ... */ }');\n\nrenderMap.write('src/generated');\n// In this example, files will be written to:\n// - src/generated/programs/token.ts\n// - src/generated/accounts/mint.ts.\n```\n\n----------------------------------------\n\nTITLE: PDA Node Example with UTF-8 Constant Seed in TypeScript\nDESCRIPTION: Shows a practical example of using ConstantPdaSeedNode within a PDA node configuration\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/pdaSeedNodes/ConstantPdaSeedNode.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\npdaNode({\n    name: 'tickets',\n    seeds: [constantPdaSeedNodeFromString('utf8', 'tickets')],\n});\n```\n\n----------------------------------------\n\nTITLE: Using JavaScript Renderer with Codama\nDESCRIPTION: Example of using the renderVisitor function to generate JavaScript clients from a Codama IDL. Shows how to specify the output directory and configure options.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/renderers-js/README.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// node ./codama.mjs\nimport { renderVisitor } from '@codama/renderers-js';\n\nconst pathToGeneratedFolder = path.join(__dirname, 'clients', 'js', 'src', 'generated');\nconst options = {}; // See below.\ncodama.accept(renderVisitor(pathToGeneratedFolder, options));\n```\n\n----------------------------------------\n\nTITLE: Setting Instruction Discriminators in TypeScript\nDESCRIPTION: Example of using setInstructionDiscriminatorsVisitor to add discriminator arguments to specified instructions.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/visitors/README.md#2025-04-19_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ncodama.update(\n    setInstructionDiscriminatorsVisitor({\n        mint: { name: 'discriminator', type: numberTypeNode('u8'), value: numberValueNode(0) },\n        transfer: { name: 'discriminator', type: numberTypeNode('u8'), value: numberValueNode(1) },\n        burn: { name: 'discriminator', type: numberTypeNode('u8'), value: numberValueNode(2) },\n    }),\n);\n```\n\n----------------------------------------\n\nTITLE: Extending a Visitor for Custom Node Processing in TypeScript\nDESCRIPTION: Example of using extendVisitor to modify behavior for specific node types. This extends a base counting visitor to add 10 to the count when visiting a PublicKeyTypeNode.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/visitors-core/README.md#2025-04-19_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst visitor = extendVisitor(baseVisitor, {\n    visitPublicKeyType: (node, { next }) => next(node) + 10,\n});\n\nconst result = visit(tupleTypeNode([publicKeyTypeNode(), numberTypeNode('u32')]), visitor);\n// ^ 13\n```\n\n----------------------------------------\n\nTITLE: Using renderVisitor Function to Generate JavaScript Umi Clients\nDESCRIPTION: Example TypeScript code demonstrating how to use the renderVisitor function from @codama/renderers-js-umi to generate JavaScript clients compatible with Umi. The code specifies the output directory and passes optional configuration parameters.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/renderers-js-umi/README.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// node ./codama.mjs\nimport { renderVisitor } from '@codama/renderers-js-umi';\n\nconst pathToGeneratedFolder = path.join(__dirname, 'clients', 'js', 'src', 'generated');\nconst options = {}; // See below.\ncodama.accept(renderVisitor(pathToGeneratedFolder, options));\n```\n\n----------------------------------------\n\nTITLE: Adding PDAs to Programs using addPdasVisitor in TypeScript\nDESCRIPTION: Example of using the addPdasVisitor to add PDA nodes to specific programs in a Codama IDL.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/visitors/README.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncodama.update(\n    addPdasVisitor({\n        // Add a PDA to the 'token' program.\n        token: [\n            {\n                name: 'associatedToken',\n                seeds: [\n                    variablePdaSeedNode('mint', publicKeyTypeNode()),\n                    constantPdaSeedNode(\n                        publicKeyTypeNode(),\n                        publicKeyValueNode('TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'),\n                    ),\n                    variablePdaSeedNode('owner', publicKeyTypeNode()),\n                ],\n            },\n        ],\n        // Add two PDAs to the 'counter' program.\n        counter: [\n            {\n                name: 'counter',\n                seeds: [variablePdaSeedNode('authority', publicKeyTypeNode())],\n            },\n            {\n                name: 'counterConfig',\n                seeds: [variablePdaSeedNode('counter', publicKeyTypeNode())],\n            },\n        ],\n    }),\n);\n```\n\n----------------------------------------\n\nTITLE: Example of a u32 Zeroable Option with Custom Zero Value\nDESCRIPTION: Shows how to create a zeroable option for a u32 type with a custom zero value (0xFFFFFFFF) and demonstrates its binary representation for None and Some values.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/typeNodes/ZeroableOptionTypeNode.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nzeroableOptionTypeNode(numbetypeNode('u32'), constantValueNode(bytesTypeNode(), bytesValueNode('base16', 'ffffffff')));\n\n// None     => 0xFFFFFFFF\n// Some(42) => 0x2A000000\n```\n\n----------------------------------------\n\nTITLE: Using parseInstructionData Function in TypeScript\nDESCRIPTION: Example of using the parseInstructionData function to match and deserialize instruction data from a byte array, showing how to access the parsed data and instruction node.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/dynamic-parsers/README.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst parsedData = parseInstructionData(rootNode, bytes);\n// ^ ParsedData<InstructionNode> | undefined\n\nif (parsedData) {\n    const instructionNode: InstructionNode = getLastNodeFromPath(parsedData.path);\n    const decodedData: unknown = parsedData.data;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting All Instruction Arguments with Helper Function in TypeScript\nDESCRIPTION: Example of using the getAllInstructionArguments helper function to retrieve all arguments of an instruction including extra arguments.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/InstructionNode.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst allArguments = getAllInstructionArguments(instruction);\n```\n\n----------------------------------------\n\nTITLE: Using Codama Renderers for Multi-Language Code Generation\nDESCRIPTION: Example of importing and using different renderers from the @codama/renderers package to generate client code in JavaScript, JavaScript Umi, and Rust. Each renderer is passed a target directory path where the generated code will be placed.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/renderers/README.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// node ./codama.mjs\nimport { renderJavaScriptVisitor, renderJavaScriptUmiVisitor, renderRustVisitor } from '@codama/renderers';\n\ncodama.accept(renderJavaScriptVisitor('clients/js/src/generated'));\ncodama.accept(renderJavaScriptUmiVisitor('clients/js-umi/src/generated'));\ncodama.accept(renderRustVisitor('clients/rust/src/generated'));\n```\n\n----------------------------------------\n\nTITLE: Using identifyInstructionData Function in TypeScript\nDESCRIPTION: Example of using the identifyInstructionData function to match bytes to an instruction node without parsing the data, returning just the node path if successful.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/dynamic-parsers/README.md#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst path = identifyInstructionData(root, bytes);\n// ^ NodePath<InstructionNode> | undefined\n\nif (path) {\n    const instructionNode: InstructionNode = getLastNodeFromPath(path);\n}\n```\n\n----------------------------------------\n\nTITLE: Running Codama Scripts with CLI\nDESCRIPTION: Examples of using the 'codama run' command to execute Codama scripts. Shows options for running specific scripts or all scripts.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/cli/README.md#2025-04-19_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncodama run         # Only runs your before visitors.\ncodama run js rust # Runs your before visitors followed by the `js` and `rust` scripts.\ncodama run --all   # Runs your before visitors followed by all your scripts.\n```\n\n----------------------------------------\n\nTITLE: Merge Visitor Examples\nDESCRIPTION: Examples of using mergeVisitor to create aggregating visitors.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/visitors-core/README.md#2025-04-19_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst visitor = mergeVisitor(\n    (node): string => node.kind,\n    (node, values: string[]): string => `${node.kind}(${values.join(',')})`,\n);\n\nconst visitor = mergeVisitor(\n    () => 1,\n    (, values) => values.reduce((a, b) => a + b, 1),\n);\n```\n\n----------------------------------------\n\nTITLE: Defining a Person Struct with Name and Age in TypeScript\nDESCRIPTION: This example shows how to create a struct representing a person with a fixed-size UTF-8 string for the name (10 bytes) and an 8-bit unsigned integer for the age. The comment illustrates how the struct is serialized to bytes.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/typeNodes/StructTypeNode.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nstructTypeNode([\n    structFieldTypeNode({ name: 'name', type: fixedSizeTypeNode(stringTypeNode('utf8'), 10) }),\n    structFieldTypeNode({ name: 'age', type: numberTypeNode('u8') }),\n]);\n\n// { name: Alice, age: 42 } => 0x416C69636500000000002A\n```\n\n----------------------------------------\n\nTITLE: Using Recursive Visitor Extension in TypeScript\nDESCRIPTION: Example of using extendVisitor with the self property to recursively call the extended visitor. This visitor only visits the first item of tuple types.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/visitors-core/README.md#2025-04-19_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst visitor = extendVisitor(baseVisitor, {\n    visitTupleType: (node, { self }) => visit(node.items[0], self) + 1,\n});\n\nconst result = visit(tupleTypeNode([tupleTypeNode([publicKeyTypeNode()]), numberTypeNode('u32')]), visitor);\n// ^ 3\n```\n\n----------------------------------------\n\nTITLE: Using identifyAccountData Function in TypeScript\nDESCRIPTION: Example of using the identifyAccountData function to match bytes to an account node without parsing the data, returning just the node path if successful.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/dynamic-parsers/README.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst path = identifyAccountData(root, bytes);\n// ^ NodePath<AccountNode> | undefined\n\nif (path) {\n    const accountNode: AccountNode = getLastNodeFromPath(path);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Struct Default Values in TypeScript\nDESCRIPTION: Example of using setStructDefaultValuesVisitor to set default values for specified fields in structs.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/visitors/README.md#2025-04-19_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ncodama.update(\n    setStructDefaultValuesVisitor({\n        person: {\n            age: numberValueNode(42),\n            dateOfBirth: noneValueNode(),\n        },\n        counter: {\n            count: numberValueNode(0),\n        },\n    }),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating PdaLinkNode Objects with Helper Function in TypeScript\nDESCRIPTION: Demonstrates how to use the pdaLinkNode helper function to create PdaLinkNode objects. The function accepts the name of the target PdaNode and an optional program parameter to reference PDAs from other programs.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/linkNodes/PdaLinkNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = pdaLinkNode('myPda');\nconst nodeFromAnotherProgram = pdaLinkNode('myPda', 'myOtherProgram');\n```\n\n----------------------------------------\n\nTITLE: Updating Codama Nodes\nDESCRIPTION: Examples of using the update method to modify nodes in the Codama IDL, including deleting account nodes and transforming number nodes.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/library/README.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Delete account nodes named \"mint\".\ncodama.update(deleteNodesVisitor(['[accountNode]mint']));\n\n// Transform all number nodes into u64 number nodes.\ncodama.update(\n    bottomUpTransformerVisitor([\n        {\n            select: '[numberTypeNode]',\n            transform: () => numberTypeNode(u64),\n        },\n    ]),\n);\n```\n\n----------------------------------------\n\nTITLE: Defining a Character Histogram MapTypeNode in TypeScript\nDESCRIPTION: Shows how to create a MapTypeNode for a character histogram, using single UTF-8 characters as keys, 16-bit unsigned integers as values, and a u8 prefixed count for the map length.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/typeNodes/MapTypeNode.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nmapTypeNode(\n    fixedSizeTypeNode(stringTypeNode('utf8'), 1), // Key: Single UTF-8 character.\n    numberTypeNode('u16'), // Value: 16-bit unsigned integer.\n    prefixedCountNode(numberTypeNode('u8')), // Count: map length is prefixed with a u8.\n);\n\n// { A: 42, B: 1, C: 16 } => 0x03000000412A00420100431000\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Remaining Signers\nDESCRIPTION: Example of creating remaining accounts that are optional and must be signers, using the argumentValueNode named 'authorities'.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/InstructionRemainingAccountsNode.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninstructionRemainingAccountsNode(argumentValueNode('authorities'), {\n    isSigner: true,\n    isOptional: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving All PDAs Using getAllPdas Helper in TypeScript\nDESCRIPTION: Example of using the getAllPdas helper function to retrieve all PdaNodes under a specified node, which can be a RootNode, a ProgramNode, or an array of ProgramNodes.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/ProgramNode.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst allPdas = getAllPdas(rootNode);\n```\n\n----------------------------------------\n\nTITLE: Creating a StructTypeNode with Helper Function in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the structTypeNode helper function to create a struct with authority and amount fields. The authority field is a public key, and the amount field is a 64-bit unsigned integer.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/typeNodes/StructTypeNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = structTypeNode([\n    structFieldTypeNode({ name: 'authority', type: publicKeyTypeNode() }),\n    structFieldTypeNode({ name: 'amount', type: numberTypeNode('u64') }),\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating an InstructionNode with instructionNode Helper Function in TypeScript\nDESCRIPTION: Example of using the instructionNode helper function to create an InstructionNode object with basic accounts and arguments structure.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/InstructionNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = instructionNode({\n    name: 'increment',\n    accounts: [\n        instructionAccountNode({ name: 'counter', isWritable: true, isSigner: false }),\n        instructionAccountNode({ name: 'authority', isWritable: false, isSigner: true }),\n    ],\n    arguments: [instructionArgumentNode({ name: 'amount', type: numberTypeNode('u8') })],\n});\n```\n\n----------------------------------------\n\nTITLE: Identity Visitor Examples\nDESCRIPTION: Examples of using identityVisitor for node transformation and deletion.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/visitors-core/README.md#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst visitor = identityVisitor();\nvisitor.visitPublicKeyType = () => null;\n\nconst node = visit(tupleTypeNode([numberTypeNode('u32'), publicKeyTypeNode()]), visitor);\n\nconst node = visit(definedTypeNode({ name: 'address', type: publicKeyTypeNode() }), visitor);\n```\n\n----------------------------------------\n\nTITLE: Creating Sub-Instructions from Enum Args in TypeScript\nDESCRIPTION: Example of using createSubInstructionsFromEnumArgsVisitor to split instructions based on enum arguments.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/visitors/README.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ncodama.update(\n    createSubInstructionsFromEnumArgsVisitor({\n        mint: 'mintArgs',\n        transfer: 'transferArgs',\n        burn: 'burnArgs',\n    }),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Renderer Implementation\nDESCRIPTION: Example of implementing a custom renderer using RenderMap and visitor pattern with configurable options.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/renderers-core/README.md#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { deleteDirectory } from '@codama/renderers-core';\nimport { rootNodeVisitor, visit } from '@codama/visitors-core';\n\ntype RenderOptions = {\n    deleteFolderBeforeRendering?: boolean;\n    // Any other options...\n};\n\nexport function renderVisitor(path: string, options: RenderOptions = {}) {\n    return rootNodeVisitor(async root => {\n        // Delete existing generated folder.\n        if (options.deleteFolderBeforeRendering ?? true) {\n            deleteDirectory(path);\n        }\n\n        // Render the new files.\n        visit(root, writeRenderMapVisitor(getRenderMapVisitor(options), path));\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Accounts Using getAllAccounts Helper in TypeScript\nDESCRIPTION: Example of using the getAllAccounts helper function to retrieve all AccountNodes under a specified node, which can be a RootNode, a ProgramNode, or an array of ProgramNodes.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/ProgramNode.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst allAccounts = getAllAccounts(rootNode);\n```\n\n----------------------------------------\n\nTITLE: Creating an Instruction with Nested Versioned Instructions in TypeScript\nDESCRIPTION: Example of creating an instruction with sub-instructions that represent different versions of the same operation, each with specific account and argument requirements.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/InstructionNode.md#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ninstructionNode({\n    name: 'increment',\n    accounts: [\n        instructionAccountNode({ name: 'counter', isWritable: true, isSigner: 'either' }),\n        instructionAccountNode({ name: 'authority', isWritable: false, isSigner: true }),\n    ],\n    arguments: [\n        instructionArgumentNode({ name: 'version', type: numberTypeNode('u8') }),\n        instructionArgumentNode({ name: 'amount', type: numberTypeNode('u8') }),\n    ],\n    subInstructions: [\n        instructionNode({\n            name: 'incrementV1',\n            accounts: [instructionAccountNode({ name: 'counter', isWritable: true, isSigner: true })],\n            arguments: [\n                instructionArgumentNode({\n                    name: 'version',\n                    type: numberTypeNode('u8'),\n                    defaultValue: numberValueNode(0),\n                    defaultValueStrategy: 'omitted',\n                }),\n                instructionArgumentNode({ name: 'amount', type: numberTypeNode('u8') }),\n            ],\n        }),\n        instructionNode({\n            name: 'incrementV2',\n            accounts: [\n                instructionAccountNode({ name: 'counter', isWritable: true, isSigner: false }),\n                instructionAccountNode({ name: 'authority', isWritable: false, isSigner: true }),\n            ],\n            arguments: [\n                instructionArgumentNode({\n                    name: 'version',\n                    type: numberTypeNode('u8'),\n                    defaultValue: numberValueNode(1),\n                    defaultValueStrategy: 'omitted',\n                }),\n                instructionArgumentNode({ name: 'amount', type: numberTypeNode('u8') }),\n            ],\n        }),\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Converting U8 Arrays to Bytes in Codama IDL\nDESCRIPTION: Transforms any fixed-size array of u8 numbers into a fixed-size BytesTypeNode. This visitor simplifies the representation of byte arrays in the IDL.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/visitors/README.md#2025-04-19_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ncodama.update(transformU8ArraysToBytesVisitor());\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Programs Using getAllPrograms Helper in TypeScript\nDESCRIPTION: Example of using the getAllPrograms helper function to retrieve all ProgramNodes under a specified node, which can be a RootNode, a ProgramNode (returning itself in an array), or an array of ProgramNodes.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/ProgramNode.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst allPrograms = getAllPrograms(rootNode);\n```\n\n----------------------------------------\n\nTITLE: Transforming Codama IDL with Visitors\nDESCRIPTION: Shows how to use visitors to transform a Codama IDL by updating accounts and instructions information.\nSOURCE: https://github.com/codama-idl/codama/blob/main/README.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { updateAccountsVisitor, updateInstructionsVisitor } from 'codama';\n\ncodama.update(updateAccountsVisitor({ ... }));\ncodama.update(updateInstructionsVisitor({ ... }));\n```\n\n----------------------------------------\n\nTITLE: Using ConditionalValueNode for Optional Account Default Value in TypeScript\nDESCRIPTION: Shows how to use a ConditionalValueNode for implementing conditional logic in instruction accounts. This example sets up a transfer instruction where the destination account defaults to the source account when the transfer amount is 0.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/contextualValueNodes/ConditionalValueNode.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninstructionNode({\n    name: 'transfer',\n    accounts: [\n        instructionAccountNode({\n            name: 'source',\n            isSigner: false,\n            isWritable: true,\n        }),\n        instructionAccountNode({\n            name: 'destination',\n            isSigner: false,\n            isWritable: true,\n            isOptional: true,\n            defaultValue: conditionalValueNode({\n                condition: argumentValueNode('amount'),\n                value: numberValueNode(0),\n                ifTrue: accountValueNode('source'),\n            }),\n        }),\n        // ...\n    ],\n    arguments: [\n        instructionArgumentNode({\n            name: 'amount',\n            type: numberTypeNode('u64'),\n        }),\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Using Codama Helper Methods\nDESCRIPTION: Examples of using various helper methods available in the Codama interface including clone, getJson, and getRoot.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/library/README.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst clonedCodama = codama.clone();\nconst jsonIdl = codama.getJson();\nconst rootNode = codama.getRoot();\n```\n\n----------------------------------------\n\nTITLE: Creating InstructionLinkNode References in TypeScript\nDESCRIPTION: Demonstrates how to create an InstructionLinkNode object using the instructionLinkNode helper function. Shows examples of referencing instructions from the current program and from another program.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/linkNodes/InstructionLinkNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = instructionLinkNode('myInstruction');\nconst nodeFromAnotherProgram = instructionLinkNode('myInstruction', 'myOtherProgram');\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Instructions Using getAllInstructions Helper in TypeScript\nDESCRIPTION: Example of using the getAllInstructions helper function to retrieve all InstructionNodes under a specified node, which can be a RootNode, a ProgramNode, or an array of ProgramNodes.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/ProgramNode.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst allInstructions = getAllInstructions(rootNode);\n```\n\n----------------------------------------\n\nTITLE: Deduplicating Identical Defined Types in TypeScript\nDESCRIPTION: Example of using deduplicateIdenticalDefinedTypesVisitor to remove duplicate DefinedTypeNodes across programs.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/visitors/README.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ncodama.update(deduplicateIdenticalDefinedTypesVisitor());\n```\n\n----------------------------------------\n\nTITLE: Creating an ArgumentValueNode using the helper function in TypeScript\nDESCRIPTION: Helper function that creates an ArgumentValueNode object from an argument name. This function simplifies the creation of nodes that reference other arguments.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/contextualValueNodes/ArgumentValueNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = argumentValueNode('amount');\n```\n\n----------------------------------------\n\nTITLE: Updating Errors in Codama IDL\nDESCRIPTION: Updates or deletes ErrorNodes based on a configuration object. Supports renaming errors, changing error messages, updating error codes, and deleting errors entirely.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/visitors/README.md#2025-04-19_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\ncodama.update(\n    updateErrorsVisitor({\n        invalidPda: {\n            // Rename the 'invalidPda' error to 'invalidProgramDerivedAddress'.\n            name: 'invalidProgramDerivedAddress',\n            // Change the error message.\n            message: 'The program-derived address is invalid.',\n            // Change the error code.\n            code: 123,\n        },\n        accountMismatch: {\n            // Delete the 'accountMismatch' error.\n            delete: true,\n        },\n    }),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a U32-Prefixed Array of U8 Numbers in TypeScript\nDESCRIPTION: Shows how to define an array of u8 numbers where the array length is stored as a u32 prefix. The example also demonstrates the serialized output format of such an array.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/typeNodes/ArrayTypeNode.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\narrayTypeNode(numberTypeNode('u8'), prefixedCountNode(numberTypeNode('u32')));\n\n// [1, 2, 3] => 0x03000000010203\n```\n\n----------------------------------------\n\nTITLE: Error Handling with Type Refinement\nDESCRIPTION: Example of catching and handling Codama errors with TypeScript type refinement using isCodamaError() function.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/errors/README.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CODAMA_ERROR__UNEXPECTED_NODE_KIND, isCodamaError } from '@codama/errors';\n\ntry {\n    const codama = createFromJson(jsonIdl);\n} catch (e) {\n    if (isCodamaError(e, CODAMA_ERROR__UNEXPECTED_NODE_KIND)) {\n        const { expectedKinds, kind, node } = e.context;\n        // ...\n    } else if (isCodamaError(e, CODAMA_ERROR__VERSION_MISMATCH)) {\n        const { codamaVersion, rootVersion } = e.context;\n        // ...\n    } else {\n        throw e;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Complex EnumTypeNode Example with Multiple Variants\nDESCRIPTION: Comprehensive example showing an enum with three variants: an empty variant 'flip', a tuple variant 'rotate' with U32 value, and a struct variant 'move' with x/y coordinates. Includes serialization examples.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/typeNodes/EnumTypeNode.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nenumTypeNode([\n    enumEmptyVariantTypeNode('flip'),\n    enumTupleVariantTypeNode('rotate', tupleTypeNode([numberTypeNode('u32')])),\n    enumStructVariantTypeNode(\n        'move',\n        structTypeNode([\n            structFieldTypeNode({ name: 'x', type: numberTypeNode('u16') }),\n            structFieldTypeNode({ name: 'y', type: numberTypeNode('u16') }),\n        ]),\n    ),\n]);\n\n// Flip                => 0x00\n// Rotate (42)         => 0x012A000000\n// Move { x: 1, y: 2 } => 0x0201000200\n```\n\n----------------------------------------\n\nTITLE: Creating Struct Field Nodes in TypeScript\nDESCRIPTION: Helper function usage examples for creating StructFieldTypeNode objects with and without default values. The first example creates a simple 'authority' field with a public key type, while the second example creates an 'age' field with a default value of 42.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/typeNodes/StructFieldTypeNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst authorityField = structFieldTypeNode({\n    name: 'authority',\n    type: publicKeyTypeNode(),\n});\n\nconst ageFieldWithDefaultValue = structFieldTypeNode({\n    name: 'age',\n    type: numberTypeNode('u8'),\n    defaultValue: numberValueNode(42),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a PdaValueNode with Helper Function in TypeScript\nDESCRIPTION: Demonstrates how to create a PdaValueNode object using the pdaValueNode helper function with a string PDA identifier and an array of seed values.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/contextualValueNodes/PdaValueNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = pdaValueNode('associatedToken', [\n    pdaSeedValueNode('mint', publicKeyValueNode('G345gmp34svbGxyXuCvKVVHDbqJQ66y65vVrx7m7FmBE')),\n    pdaSeedValueNode('owner', publicKeyValueNode('Nzgr9bYfMRq5768bHfXsXoPTnLWAXgQNosRBxK63jRH')),\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating a Single Node Visitor in TypeScript\nDESCRIPTION: Example of using singleNodeVisitor to create a visitor that only processes one type of node. This visitor counts the number of items in a tuple type node.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/visitors-core/README.md#2025-04-19_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nconst visitor = singleNodeVisitor('tupleTypeNode', node => node.items.length);\n\nconst result = visit(tupleTypeNode([numberTypeNode('u32'), publicKeyTypeNode()]), visitor);\n// ^ 2\n```\n\n----------------------------------------\n\nTITLE: Using Argument Values for Dynamic Space Allocation in TypeScript\nDESCRIPTION: Creates an InstructionByteDeltaNode that uses a dynamic argument value to represent additional space requirements, explicitly setting withHeader to false to exclude account header size.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/InstructionByteDeltaNode.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninstructionByteDeltaNode(argumentValueNode('additionalSpace'), { withHeader: false });\n```\n\n----------------------------------------\n\nTITLE: Using getValidationItemsVisitor function in TypeScript\nDESCRIPTION: Example of how to use the getValidationItemsVisitor function to collect validation items from a Codama IDL.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/validators/README.md#2025-04-19_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { getValidationItemsVisitor } from '@codama/validators';\n\nconst validationItems = codama.accept(getValidationItemsVisitor());\n```\n\n----------------------------------------\n\nTITLE: Calculating Byte Size of TypeNodes in TypeScript\nDESCRIPTION: The getByteSizeVisitor function calculates the byte size of a given TypeNode. It returns a number for fixed sizes or null for variable sizes, and requires a LinkableDictionary to resolve link nodes.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/visitors-core/README.md#2025-04-19_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nconst visitor = getByteSizeVisitor(linkables);\nconst size = visit(tupleTypeNode([numberTypeNode('u32'), publicKeyTypeNode()]), visitor);\n// ^ 36 (4 bytes for the u32 number and 32 bytes for the public key)\n```\n\n----------------------------------------\n\nTITLE: Creating PDA Node with Mixed Seeds\nDESCRIPTION: Shows how to create a PDA node with both constant and variable seeds. Uses UTF-8 encoded strings for constant seeds and includes public key and number type variables.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/PdaNode.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\npdaNode({\n    name: 'ticket',\n    seeds: [\n        constantPdaSeedNodeFromString('utf8', 'raffles'),\n        variablePdaSeedNode('raffle', publicKeyTypeNode()),\n        constantPdaSeedNodeFromString('utf8', 'tickets'),\n        variablePdaSeedNode('ticketNumber', numberTypeNode('u32')),\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Logging AST Node Strings to Console in TypeScript\nDESCRIPTION: The consoleLogVisitor function transforms a Visitor<string> into a Visitor<void> that logs the provided string to the console. This is useful for debugging AST traversals.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/visitors-core/README.md#2025-04-19_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\n// Outputs the indented debug string to the console.\nconst visitor = consoleLogVisitor(getDebugStringVisitor({ indent: true }));\n```\n\n----------------------------------------\n\nTITLE: Creating a SentinelTypeNode with Helper Function\nDESCRIPTION: Demonstrates how to create a SentinelTypeNode object using the sentinelTypeNode helper function. It creates a UTF-8 string node terminated by a 0xFF byte sentinel.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/typeNodes/SentinelTypeNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst sentinel = constantValueNode(bytesTypeNode(), bytesValueNode('base16', 'ff'));\nconst node = sentinelTypeNode(stringTypeNode('utf8'), sentinel);\n```\n\n----------------------------------------\n\nTITLE: Function-Based Node Transformation\nDESCRIPTION: Example of using direct transformation functions with bottomUpTransformerVisitor.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/visitors-core/README.md#2025-04-19_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nconst visitor = bottomUpTransformerVisitor([\n    (node, stack) => {\n        if (!isNode(node, numberTypeNode)) {\n            return node;\n        }\n        const swappedEndian = node.endian === 'be' ? 'le' : 'be';\n        return numberTypeNode(node.format, swappedEndian);\n    },\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating Basic PDA Node with Variable Seed\nDESCRIPTION: Demonstrates creating a PDA node with a single variable seed using the authority public key. The node is named 'counter' and includes documentation.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/PdaNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = pdaNode({\n    name: 'counter',\n    seeds: [variablePdaSeedNode('authority', publicKeyTypeNode())],\n    docs: ['The counter PDA derived from its authority.'],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an Instruction with Omitted Optional Accounts in TypeScript\nDESCRIPTION: Example of creating an instruction with optional accounts that uses the 'omitted' strategy to handle optional accounts that aren't provided.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/InstructionNode.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninstructionNode({\n    name: 'initialize',\n    accounts: [\n        instructionAccountNode({ name: 'counter', isWritable: true, isSigner: true }),\n        instructionAccountNode({ name: 'authority', isWritable: false, isSigner: false }),\n        instructionAccountNode({ name: 'freezeAuthority', isWritable: false, isSigner: false, isOptional: true }),\n    ],\n    optionalAccountStrategy: 'omitted',\n});\n```\n\n----------------------------------------\n\nTITLE: Converting Anchor IDL to Codama IDL\nDESCRIPTION: Demonstrates how to convert an Anchor IDL into a Codama IDL using the @codama/nodes-from-anchor package.\nSOURCE: https://github.com/codama-idl/codama/blob/main/README.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFromRoot } from 'codama';\nimport { rootNodeFromAnchor } from '@codama/nodes-from-anchor';\nimport anchorIdl from 'anchor-idl.json';\n\nconst codama = createFromRoot(rootNodeFromAnchor(anchorIdl));\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Visitor Counter in TypeScript\nDESCRIPTION: Example of creating a base visitor that counts the number of nodes using the mergeVisitor function. This visitor returns 1 for leaf nodes and sums the values for non-leaf nodes plus 1.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/visitors-core/README.md#2025-04-19_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst baseVisitor = mergeVisitor(\n    () => 1,\n    (_, values) => values.reduce((a, b) => a + b, 1),\n);\n```\n\n----------------------------------------\n\nTITLE: Unwrapping Type Defined Links in Codama IDL\nDESCRIPTION: Selectively replaces DefinedTypeLinkNodes matching provided NodeSelectors with their actual DefinedTypeNodes. Unlike unwrapDefinedTypesVisitor, it doesn't remove the original DefinedTypeNode from the ProgramNode.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/visitors/README.md#2025-04-19_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\ncodama.update(unwrapTypeDefinedLinksVisitor(['[accountNode]counter.data', '[instructionNode]transfer.config']));\n```\n\n----------------------------------------\n\nTITLE: Piping Visitor Transformations in TypeScript\nDESCRIPTION: Basic example of using the pipe helper function to compose visitors in a readable way. This enables chaining multiple visitor transformations together.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/visitors-core/README.md#2025-04-19_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst visitor = pipe(\n    baseVisitor,\n    v => extendVisitor(v /** ... */),\n    v => interceptVisitor(v /** ... */),\n    v => mapVisitor(v /** ... */),\n    v => tapVisitor(v /** ... */),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a HiddenSuffixTypeNode with a Number and Bytes Suffix\nDESCRIPTION: Helper function example that creates a HiddenSuffixTypeNode wrapping a u32 number type node with a constant bytes suffix of 'ffff' in base16 encoding.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/typeNodes/HiddenSuffixTypeNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = hiddenSuffixTypeNode(numberTypeNode('u32'), [\n    constantValueNode(bytesTypeNode(), bytesValueNode('base16', 'ffff')),\n]);\n```\n\n----------------------------------------\n\nTITLE: PdaValueNode with References to Other Accounts in TypeScript\nDESCRIPTION: Shows how to create a PdaValueNode where seed values reference other accounts in the system, enabling dynamic PDA address derivation based on related accounts.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/contextualValueNodes/PdaValueNode.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\npdaValueNode('associatedToken', [\n    pdaSeedValueNode('mint', accountValueNode('mint')),\n    pdaSeedValueNode('owner', accountValueNode('authority')),\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating a Tuple for Person's Name and Age\nDESCRIPTION: Example showing how to create a tuple that stores a person's name (as a fixed-size UTF-8 string) and age (as a u8 number). The example includes the serialized binary representation.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/typeNodes/TupleTypeNode.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntupleTypeNode([fixedSizeTypeNode(stringTypeNode('utf8'), 10), numberTypeNode('u8')]);\n\n// (Alice, 42) => 0x416C69636500000000002A\n```\n\n----------------------------------------\n\nTITLE: Fixed Byte Array Example - TypeScript\nDESCRIPTION: Shows how to create a fixed-size byte array of 4 bytes. Demonstrates both padding (when input is shorter) and truncation (when input is longer) behaviors.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/typeNodes/FixedSizeTypeNode.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfixedSizeTypeNode(bytesTypeNode(), 4);\n\n// [1, 2]          => 0x01020000\n// [1, 2, 3, 4, 5] => 0x01020304\n```\n\n----------------------------------------\n\nTITLE: Creating a DefinedTypeNode using the definedTypeNode helper function in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the definedTypeNode helper function to create a DefinedTypeNode object. It defines a 'person' type with 'name' and 'age' fields.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/DefinedTypeNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = definedTypeNode({\n    name: 'person',\n    docs: ['This type describes a Person.'],\n    type: structTypeNode([\n        structFieldTypeNode({ name: 'name', type: stringTypeNode('utf8') }),\n        structFieldTypeNode({ name: 'age', type: numberTypeNode('u8') }),\n    ]),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a TupleTypeNode with tupleTypeNode() Helper Function\nDESCRIPTION: Demonstrates how to use the tupleTypeNode() helper function to create a tuple containing a public key and a u64 number type.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/typeNodes/TupleTypeNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = tupleTypeNode([publicKeyTypeNode(), numberTypeNode('u64')]);\n```\n\n----------------------------------------\n\nTITLE: PdaValueNode with Inlined PDA Definition in TypeScript\nDESCRIPTION: Demonstrates creating a PdaValueNode with an inlined PDA definition instead of referencing an existing one, providing more flexibility when the PDA definition needs to be unique to this usage.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/contextualValueNodes/PdaValueNode.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst inlinedPdaNode = pdaNode({\n    name: 'associatedToken',\n    seeds: [\n        variablePdaSeedNode('mint', publicKeyTypeNode()),\n        constantPdaSeedNode(publicKeyTypeNode(), publicKeyValueNode('TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA')),\n        variablePdaSeedNode('owner', publicKeyTypeNode()),\n    ],\n});\n\npdaValueNode(inlinedPdaNode, [\n    pdaSeedValueNode('mint', accountValueNode('mint')),\n    pdaSeedValueNode('owner', accountValueNode('authority')),\n]);\n```\n\n----------------------------------------\n\nTITLE: Using parseInstruction Function in TypeScript\nDESCRIPTION: Example of using the parseInstruction function to parse a complete Solana instruction, including identifying instruction data and matching accounts with their names.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/dynamic-parsers/README.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst parsedData = parseInstruction(rootNode, instruction);\n\nif (parsedData) {\n    const namedAccounts = parsedData.accounts;\n    // ^ Array<IAccountMeta & { name: string }>\n}\n```\n\n----------------------------------------\n\nTITLE: Feature Flags Configuration\nDESCRIPTION: Example of configuring feature flags for trait rendering\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/renderers-rust/README.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst traitOptions = {\n    featureFlags: { fruits: ['fruits::Apple', 'fruits::Banana'] },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Basic InstructionArgumentNode in TypeScript\nDESCRIPTION: Helper function demonstrating how to create a basic InstructionArgumentNode object with a name, type, and documentation.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/InstructionArgumentNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = instructionArgumentNode({\n    name: 'amount',\n    type: numberTypeNode('u64'),\n    docs: ['This amount of tokens to transfer.'],\n});\n```\n\n----------------------------------------\n\nTITLE: Encoding shortU16 Integers in TypeScript\nDESCRIPTION: Illustrates how to encode integers using the variable-length shortU16 format with the NumberTypeNode.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/typeNodes/NumberTypeNode.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nnumberTypeNode('shortU16');\n\n// 42    => 0x2A\n// 128   => 0x8001\n// 16384 => 0x808001\n```\n\n----------------------------------------\n\nTITLE: Creating OptionTypeNode using helper function in TypeScript\nDESCRIPTION: Demonstrates how to create OptionTypeNode instances using the optionTypeNode helper function with different configurations including default prefix, custom prefix, and fixed option.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/typeNodes/OptionTypeNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = optionTypeNode(publicKeyTypeNode());\nconst nodeWithCustomPrefix = optionTypeNode(publicKeyTypeNode(), { prefix: numberTypeNode('u16') });\nconst fixedNode = optionTypeNode(publicKeyTypeNode(), { fixed: true });\n```\n\n----------------------------------------\n\nTITLE: ParsedData Type Definition in TypeScript\nDESCRIPTION: Type definition for ParsedData which represents the result of parsing a byte array, containing the parsed data and the path to the identified node.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/dynamic-parsers/README.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype ParsedData<TNode extends AccountNode | InstructionNode> = {\n    data: unknown;\n    path: NodePath<TNode>;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating an Instruction with Remaining Signers in TypeScript\nDESCRIPTION: Example of creating an instruction with dynamic remaining accounts requirements, specifically for multiple signers with specified properties.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/InstructionNode.md#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ninstructionNode({\n    name: 'multisigIncrement',\n    accounts: [instructionAccountNode({ name: 'counter', isWritable: true, isSigner: false })],\n    remainingAccounts: [instructionRemainingAccountsNode(argumentValueNode('authorities'), { isSigner: true })],\n});\n```\n\n----------------------------------------\n\nTITLE: Flattening Instruction Data Arguments in TypeScript\nDESCRIPTION: Example of using flattenInstructionDataArgumentsVisitor to simplify nested struct arguments in instructions.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/visitors/README.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ncodama.update(flattenInstructionDataArgumentsVisitor());\n```\n\n----------------------------------------\n\nTITLE: Working with Node Paths in TypeScript\nDESCRIPTION: Example demonstrating various utility functions for working with NodePath instances. Shows how to access, filter, validate, and display node paths.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/visitors-core/README.md#2025-04-19_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n// An example of a node path.\nconst path: NodePath<AccountNode> = [rootNode, programNode, accountNode];\n\n// Access the last node in the path. I.e. given NodePath<T>, returns T.\nconst lastNode: AccountNode = getLastNodeFromPath(path);\n\n// Access the first/last node of a specific kind in the path.\nconst firstProgramNode: ProgramNode | undefined = findFirstNodeFromPath(path, 'programNode');\nconst lastProgramNode: ProgramNode | undefined = findLastNodeFromPath(path, 'programNode');\n\n// Access the last program/instruction node in the path (sugar for `findLastNodeFromPath`).\nconst programNode: ProgramNode | undefined = findProgramNodeFromPath(path);\nconst instructionNode: InstructionNode | undefined = findInstructionNodeFromPath(path);\n\n// Get the subpath of a path from the beginning to the last node matching a specific kind.\nconst subpath: NodePath = getNodePathUntilLastNode(path, 'programNode');\n// ^ [rootNode, programNode]\n\n// Check that a path is not empty.\nif (isFilledNodePath(path as NodePath)) {\n    path satisfies NodePath<Node>;\n}\n\n// Check that a path finishes with a node matching the provided kind or kinds.\nif (isNodePath(path as NodePath, ['AccountNode', 'InstructionNode'])) {\n    path satisfies NodePath<AccountNode | InstructionNode>;\n}\n\n// Assert that a path finishes with a node matching the provided kind or kinds.\nassertIsNodePath(path as NodePath, ['AccountNode', 'InstructionNode']);\npath satisfies NodePath<AccountNode | InstructionNode>;\n\n// Display paths as strings or arrays of strings.\nnodePathToStringArray(path); // -> ['[rootNode]', '[programNode]token', '[accountNode]mint']\nnodePathToString(path); // -> \"[rootNode] > [programNode]token > [accountNode]mint\"\n```\n\n----------------------------------------\n\nTITLE: Creating MapTypeNode with Helper Function in TypeScript\nDESCRIPTION: Demonstrates the use of the mapTypeNode helper function to create a MapTypeNode object with a public key type, a number type, and a prefixed count node.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/typeNodes/MapTypeNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = mapTypeNode(publicKeyTypeNode(), numberTypeNode('u32'), prefixedCountNode(numberTypeNode('u32')));\n```\n\n----------------------------------------\n\nTITLE: Struct Field with Default Value Example in TypeScript\nDESCRIPTION: Example showing how to create a struct field with a default value and its serialization behavior. The age field has a default value of 42 which is used when no value is provided during serialization.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/typeNodes/StructFieldTypeNode.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nstructFieldTypeNode({\n    name: 'age',\n    type: numberTypeNode('u8'),\n    defaultValue: numberValueNode(42),\n});\n\n// {}          => 0x2A\n// { age: 29 } => 0x1D\n```\n\n----------------------------------------\n\nTITLE: Defining Optional UTF-8 String with RemainderOptionTypeNode in TypeScript\nDESCRIPTION: Example of using RemainderOptionTypeNode to define an optional UTF-8 string that uses remaining bytes in the buffer. It demonstrates how the node behaves for both None and Some cases.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/typeNodes/RemainderOptionTypeNode.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nremainderOptionTypeNode(stringTypeNode('UTF-8'));\n\n// None          => 0x\n// Some(\"Hello\") => 0x48656C6C6F\n```\n\n----------------------------------------\n\nTITLE: Filling Default PDA Seed Values in TypeScript\nDESCRIPTION: Example of using fillDefaultPdaSeedValuesVisitor to automatically fill missing PdaSeedValueNodes based on instruction context.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/visitors/README.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ncodama.update(fillDefaultPdaSeedValuesVisitor(instructionPath, linkables, strictMode));\n```\n\n----------------------------------------\n\nTITLE: Using DateTimeTypeNode with u64 for Unix Datetime in TypeScript\nDESCRIPTION: An example showing how to create a u64 unix datetime representation and its serialized format, displaying both the TypeScript code and the sample conversion of a date to its hexadecimal representation.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/typeNodes/DateTimeTypeNode.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndateTimeTypeNode(numberTypeNode('u64'));\n\n// 2024-06-27T14:57:56Z => 0x667D7DF400000000\n```\n\n----------------------------------------\n\nTITLE: Unwrapping Defined Types in Codama IDL\nDESCRIPTION: Replaces DefinedTypeLinkNodes with the actual DefinedTypeNodes they point to. Can be configured to unwrap all defined types or just specific ones by name. Each link node gets replaced by a copy of the defined type.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/visitors/README.md#2025-04-19_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\ncodama.update(unwrapDefinedTypesVisitor(['counter', 'escrow']));\n```\n\n----------------------------------------\n\nTITLE: Creating RemainderOptionTypeNode in TypeScript\nDESCRIPTION: Helper function that creates a RemainderOptionTypeNode object from the item TypeNode. This function is used to define an optional item that may or may not exist based on remaining bytes in a buffer.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/typeNodes/RemainderOptionTypeNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = remainderOptionTypeNode(publicKeyTypeNode());\n```\n\n----------------------------------------\n\nTITLE: Unwrapping Instruction Arguments Defined Types in Codama IDL\nDESCRIPTION: Replaces DefinedTypeLinkNodes used only once inside instruction arguments with the actual DefinedTypeNodes they refer to. This visitor simplifies the instruction argument structure.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/visitors/README.md#2025-04-19_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\ncodama.update(unwrapInstructionArgsDefinedTypesVisitor());\n```\n\n----------------------------------------\n\nTITLE: Creating a RootNode with Helper Function in TypeScript\nDESCRIPTION: Demonstrates how to create a RootNode object using the rootNode helper function with a programNode as input. The function automatically sets the standard to 'codama' and uses the installed Codama version.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/RootNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = rootNode(programNode({ ... }));\n```\n\n----------------------------------------\n\nTITLE: Creating a StructFieldValueNode using helper function in TypeScript\nDESCRIPTION: Demonstrates how to use the structFieldValueNode helper function to create a StructFieldValueNode object with a field name and a value node.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/valueNodes/StructFieldValueNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = structFieldValueNode('age', numberValueNode(42));\n```\n\n----------------------------------------\n\nTITLE: Creating ErrorNode Object with Helper Function in TypeScript\nDESCRIPTION: Demonstrates how to use the errorNode helper function to create an ErrorNode object. This function takes an input object with properties like name, code, and message to construct the error.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/ErrorNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = errorNode({\n    name: 'invalidAmountArgument',\n    code: 1,\n    message: 'The amount argument is invalid.',\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an Instruction with a u8 Discriminator in TypeScript\nDESCRIPTION: Example of creating an instruction with a u8 discriminator argument that has a default value and omits the default value by default.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/InstructionNode.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninstructionNode({\n    name: 'increment',\n    accounts: [\n        instructionAccountNode({ name: 'counter', isWritable: true, isSigner: true }),\n        instructionAccountNode({ name: 'authority', isWritable: false, isSigner: false }),\n    ],\n    arguments: [\n        instructionArgumentNode({\n            name: 'discriminator',\n            type: numberTypeNode('u8'),\n            defaultValue: numberValueNode(42),\n            defaultValueStrategy: 'omitted',\n        }),\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering Node Kinds Examples\nDESCRIPTION: Examples of filtering visitors to specific node kinds using options.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/visitors-core/README.md#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst visitor: Visitor<number, 'programNode'> = voidVisitor({ keys: 'programNode' });\n\nconst visitor: Visitor<number, 'numberTypeNode' | 'stringTypeNode'> = voidVisitor({\n    keys: ['numberTypeNode', 'stringTypeNode'],\n});\n\nconst visitor: Visitor<number, TypeNode['kind']> = voidVisitor({ keys: TYPE_NODES });\n\nconst visitor: Visitor<number> = voidVisitor();\n```\n\n----------------------------------------\n\nTITLE: Creating InstructionArgumentNode with Omitted Default Value in TypeScript\nDESCRIPTION: Example showing how to create an InstructionArgumentNode with an omitted default value, meaning the default value will always be used.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/InstructionArgumentNode.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninstructionArgumentNode({\n    name: 'instructionDiscriminator',\n    type: numberTypeNode('u8'),\n    defaultValue: numberValueNode(42),\n    defaultValueStrategy: 'omitted',\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Size-Prefixed UTF-8 String with Example Values\nDESCRIPTION: Shows how to create a size-prefixed UTF-8 string with a u16 size prefix. Includes examples of encoded values for empty string and the string \"Hello\".\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/typeNodes/SizePrefixTypeNode.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nsizePrefixTypeNode(stringTypeNode('utf8'), numberTypeNode('u16'));\n\n// \"\"      => 0x0000\n// \"Hello\" => 0x050048656C6C6F\n```\n\n----------------------------------------\n\nTITLE: Example of a u32 Zeroable Option\nDESCRIPTION: Shows how to create a zeroable option for a u32 type and demonstrates its binary representation for None and Some values.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/typeNodes/ZeroableOptionTypeNode.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nzeroableOptionTypeNode(numbetypeNode('u32'));\n\n// None     => 0x00000000\n// Some(42) => 0x2A000000\n```\n\n----------------------------------------\n\nTITLE: Creating EnumTypeNode with TypeScript Helper Function\nDESCRIPTION: Examples of creating an EnumTypeNode using the helper function. Shows basic usage and creation with a custom U32 discriminator size.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/typeNodes/EnumTypeNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = enumTypeNode(variants);\nconst nodeWithU32Discriminator = enumTypeNode(variants, { size: numberTypeNode('u32') });\n```\n\n----------------------------------------\n\nTITLE: Creating a ResolverValueNode in TypeScript\nDESCRIPTION: Example of creating a ResolverValueNode using the resolverValueNode helper function. The example demonstrates defining a custom token program resolver that depends on a mint account and delegatedAmount argument.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/contextualValueNodes/ResolverValueNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = resolverValueNode('resolveCustomTokenProgram', {\n    docs: [\n        'If the mint account has more than 0 decimals and the ',\n        'delegated amount is greater than zero, than we use our ',\n        'own custom token program. Otherwise, we use Token 2022.',\n    ],\n    dependsOn: [accountValueNode('mint'), argumentValueNode('delegatedAmount')],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Optional InstructionAccountNode in TypeScript\nDESCRIPTION: Shows how to create an optional InstructionAccountNode for a freeze authority account. The account is configured as non-writable, non-signer, and optional.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/InstructionAccountNode.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninstructionAccountNode({\n    name: 'freezeAuthority',\n    isWritable: false,\n    isSigner: false,\n    isOptional: true,\n    docs: ['The freeze authority to set on the asset, if any.']\n});\n```\n\n----------------------------------------\n\nTITLE: Transforming RenderMap Content\nDESCRIPTION: Examples of synchronous and asynchronous content transformation methods for RenderMap files.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/renderers-core/README.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nrenderMap.mapContent(content => `/** Prefix for all files */\\n\\n${content}`);\n\nawait renderMap.mapContentAsync(async content => {\n    const transformedContent = await someAsyncFunction(content);\n    return `/** Prefix for all files */\\n\\n${transformedContent}`;\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a StructValueNode using the helper function in TypeScript\nDESCRIPTION: Demonstrates how to use the structValueNode helper function to create a StructValueNode object with field values for 'name' and 'age'. The example shows the construction of a structure with a string field and a number field.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/valueNodes/StructValueNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = structValueNode([\n    structFieldValueNode('name', stringValueNode('Alice')),\n    structFieldValueNode('age', numberValueNode(42)),\n]);\n```\n\n----------------------------------------\n\nTITLE: Mapping Visitor Results in TypeScript\nDESCRIPTION: Example of using mapVisitor to transform the results of a visitor. This example creates a visitor that gets string representations of nodes and then maps it to count the characters.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/visitors-core/README.md#2025-04-19_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// Gets a nested string representation of node kinds.\nconst baseVisitor = mergeVisitor(\n    node => node.kind as string,\n    (node, values) => `${node.kind}(${values.join(',')})`,\n);\n\n// Counts the number of characters in the string representation.\nconst visitor = mapVisitor(baseVisitor, (value: string): number => value.length);\n\nconst result = visit(tupleTypeNode([numberTypeNode('u32'), publicKeyTypeNode()]), visitor);\n// ^ 47\n```\n\n----------------------------------------\n\nTITLE: Creating InstructionArgumentLinkNodes in TypeScript\nDESCRIPTION: Helper function examples showing different ways to create InstructionArgumentLinkNode objects. The examples demonstrate linking to arguments in the current instruction, in another instruction within the same program, and in another instruction from a different program.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/linkNodes/InstructionArgumentLinkNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Links to an argument in the current instruction.\nconst node = instructionArgumentLinkNode('myArgument');\n\n// Links to an argument in another instruction but within the same program.\nconst nodeFromAnotherInstruction = instructionArgumentLinkNode('myArgument', 'myOtherInstruction');\n\n// Links to an argument in another instruction from another program.\nconst nodeFromAnotherProgram = instructionArgumentLinkNode(\n    'myArgument',\n    instructionLinkNode('myOtherInstruction', 'myOtherProgram'),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating ZeroableOptionTypeNode Instances with Helper Function\nDESCRIPTION: Demonstrates how to create ZeroableOptionTypeNode instances using the helper function, with both default zero value and custom zero value examples.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/typeNodes/ZeroableOptionTypeNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = zeroableOptionTypeNode(publicKeyTypeNode());\n\nconst nodeWithZeroValue = zeroableOptionTypeNode(\n    numbetypeNode('u32'),\n    constantValueNode(bytesTypeNode(), bytesValueNode('base16', 'ffffffff')),\n);\n```\n\n----------------------------------------\n\nTITLE: Resolving Nested Type Nodes in TypeScript\nDESCRIPTION: Demonstrates using resolveNestedTypeNode() to get the final TypeNode from a nested structure. Takes a nested type node as input and returns the innermost TypeNode.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/typeNodes/NestedTypeNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst nestedNode = fixedSizeTypeNode(stringTypeNode('utf8'), 10);\nconst resolvedNode = resolveNestedTypeNode(nestedNode);\n// ^ stringTypeNode('utf8')\n```\n\n----------------------------------------\n\nTITLE: Creating EnumValueNode Objects with TypeScript\nDESCRIPTION: Demonstrates how to create EnumValueNode objects using the enumValueNode helper function. It shows examples of creating nodes with and without associated data, and using both string and DefinedTypeLinkNode references for the enum type.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/valueNodes/EnumValueNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = enumValueNode('myEnum', 'myVariant');\nconst nodeWithExplicitEnum = enumValueNode(definedTypeLinkNode('myEnum'), 'myVariant');\n\nconst nodeWithData = enumValueNode(\n    'myEnum',\n    'myVariantWithData',\n    structValueNode([\n        structFieldValueNode('name', stringValueNode('Alice')),\n        structFieldValueNode('age', numberValueNode(42)),\n    ]),\n);\n```\n\n----------------------------------------\n\nTITLE: Using Console Log Visitor with Codama\nDESCRIPTION: Example showing how to use the accept method with console log visitor to display the Codama IDL.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/library/README.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncodama.accept(consoleLogVisitor(getDebugStringVisitor({ indent: true })));\n```\n\n----------------------------------------\n\nTITLE: Creating a u32 Prefixed Set of u8 Numbers in TypeScript\nDESCRIPTION: Example of creating a set of u8 numbers with a u32 prefix that indicates the count of items. The example also shows how a set with values 1, 2, 3 would be serialized.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/typeNodes/SetTypeNode.md#2025-04-19_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nsetTypeNode(numberTypeNode('u8'), prefixedCountNode(numberTypeNode('u32')));\n\n// Set (1, 2, 3) => 0x03000000010203\n```\n\n----------------------------------------\n\nTITLE: Using Codama Interface\nDESCRIPTION: Examples of using visitors with the Codama interface wrapper.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/visitors-core/README.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst result: number = codama.accept(myNumberVisitor());\ncodama.update(myTransformerVisitor());\n```\n\n----------------------------------------\n\nTITLE: Creating Boolean Type Nodes in TypeScript\nDESCRIPTION: Demonstrates creating BooleanTypeNode instances using the helper function booleanTypeNode(). Shows both explicit number type specification and implicit u8 default usage.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/typeNodes/BooleanTypeNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = booleanTypeNode(numberTypeNode('u32'));\nconst implicitU8Node = booleanTypeNode(); // u8 by default\n```\n\n----------------------------------------\n\nTITLE: Using FixedCountNode with ArrayTypeNode in TypeScript\nDESCRIPTION: Example showing how to use FixedCountNode in conjunction with arrayTypeNode to create an array type with fixed length of 3 public keys.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/countNodes/FixedCountNode.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\narrayTypeNode(publicKeyTypeNode(), fixedCountNode(3));\n```\n\n----------------------------------------\n\nTITLE: Fixed UTF-8 String Example - TypeScript\nDESCRIPTION: Demonstrates creating a fixed-size UTF-8 string node of 10 bytes. When the string 'Hello' is processed, it gets padded with null bytes to reach the fixed length.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/typeNodes/FixedSizeTypeNode.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfixedSizeTypeNode(stringTypeNode('utf8'), 10);\n\n// Hello => 0x48656C6C6F0000000000\n```\n\n----------------------------------------\n\nTITLE: Creating a Root Node Visitor with Custom Logic in TypeScript\nDESCRIPTION: Example of using rootNodeVisitor for top-level processing. This creates a visitor that applies a series of other visitors to update a root node.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/visitors-core/README.md#2025-04-19_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nconst visitor = rootNodeVisitor((root: RootNode) => {\n    let newRoot = root;\n    newRoot = visit(newRoot, visitorA);\n    newRoot = visit(newRoot, visitorB);\n    newRoot = visit(newRoot, visitorC);\n    return newRoot;\n});\n```\n\n----------------------------------------\n\nTITLE: Creating InstructionAccountLinkNode Objects in TypeScript\nDESCRIPTION: This snippet demonstrates how to create InstructionAccountLinkNode objects using the instructionAccountLinkNode helper function. It shows three scenarios: linking to an account in the current instruction, linking to an account in another instruction within the same program, and linking to an account in another instruction from another program.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/linkNodes/InstructionAccountLinkNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Links to an account in the current instruction.\nconst node = instructionAccountLinkNode('myAccount');\n\n// Links to an account in another instruction but within the same program.\nconst nodeFromAnotherInstruction = instructionAccountLinkNode('myAccount', 'myOtherInstruction');\n\n// Links to an account in another instruction from another program.\nconst nodeFromAnotherProgram = instructionAccountLinkNode(\n    'myAccount',\n    instructionLinkNode('myOtherInstruction', 'myOtherProgram'),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Codama Instance from Root Node\nDESCRIPTION: Example of creating a new Codama instance using the createFromRoot function with a root node.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/library/README.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst codama = createFromRoot(rootNode(programNode({ ... })));\n```\n\n----------------------------------------\n\nTITLE: Creating Basic ConstantPdaSeedNode in TypeScript\nDESCRIPTION: Demonstrates creating a ConstantPdaSeedNode using the helper function with a number type and value\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/pdaSeedNodes/ConstantPdaSeedNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = constantPdaSeedNode(numberTypeNode('u32'), numberValueNode(42));\n```\n\n----------------------------------------\n\nTITLE: Instruction Discrimination Example in TypeScript\nDESCRIPTION: Example demonstrating instruction node creation with an 8-byte discriminator argument at offset 0, using a specific hex value as default.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/discriminatorNodes/FieldDiscriminatorNode.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninstructionNode({\n    arguments: [\n        instructionArgumentNode({\n            name: 'discriminator',\n            type: fixedSizeTypeNode(bytesTypeNode(), 8),\n            defaultValue: bytesValueNode('base16', '0011223344556677'),\n            defaultValueStrategy: 'omitted',\n        }),\n        // ...\n    ],\n    discriminators: [fieldDiscriminatorNode('discriminator')],\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Creating FixedSizeTypeNode - TypeScript Helper Function\nDESCRIPTION: Example showing how to create a FixedSizeTypeNode using the helper function to create a fixed-size UTF-8 string node of 32 bytes.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/typeNodes/FixedSizeTypeNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = fixedSizeTypeNode(stringTypeNode('utf8'), 32);\n```\n\n----------------------------------------\n\nTITLE: Creating a PDA with a Public Key Variable Seed\nDESCRIPTION: Example of creating a PDA node with a variable seed of type public key. This demonstrates how to use the variablePdaSeedNode function as part of defining a complete PDA structure with an 'authority' seed.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/pdaSeedNodes/VariablePdaSeedNode.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\npdaNode({\n    name: 'ticket',\n    seeds: [variablePdaSeedNode('authority', publicKeyTypeNode())],\n});\n```\n\n----------------------------------------\n\nTITLE: Transforming Nested Type Nodes in TypeScript\nDESCRIPTION: Shows how to use transformNestedTypeNode() to modify the final TypeNode while preserving the wrapper structure. Takes a nested node and transformation function as input.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/typeNodes/NestedTypeNode.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst nestedNode = fixedSizeTypeNode(stringTypeNode('utf8'), 10);\nconst transformedNode = transformNestedTypeNode(nestedNode, () => stringTypeNode('base64'));\n// ^ fixedSizeTypeNode(stringTypeNode('base64'), 10);\n```\n\n----------------------------------------\n\nTITLE: Setting Instruction Account Default Values in TypeScript\nDESCRIPTION: Example of using setInstructionAccountDefaultValuesVisitor to set default values for instruction accounts based on rules.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/visitors/README.md#2025-04-19_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ncodama.update(\n    setInstructionAccountDefaultValuesVisitor([\n        {\n            // Set this public key as default value to any account named 'counterProgram'.\n            account: 'counterProgram',\n            defaultValue: publicKeyValueNode('MyCounterProgram11111111111111111111111111'),\n        },\n        {\n            // Set this PDA as default value to any account named 'associatedToken' or 'ata'.\n            account: /^(associatedToken|ata)$/,\n            defaultValue: pdaValueNode('associatedToken'),\n        },\n    ]),\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Programs in Codama IDL\nDESCRIPTION: Updates or deletes ProgramNodes based on a configuration object. Supports renaming programs, changing program versions, updating public keys, and deleting programs entirely.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/visitors/README.md#2025-04-19_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\ncodama.update(\n    updateProgramsVisitor({\n        splToken: {\n            // Rename the 'splToken' program to 'token'.\n            name: 'token',\n            // Change the program version.\n            version: '3.0.0',\n            // Change the program's public key.\n            publicKey: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n        },\n        splAssociatedToken: {\n            // Delete the 'splAssociatedToken' program.\n            delete: true,\n        },\n    }),\n);\n```\n\n----------------------------------------\n\nTITLE: Using Filesystem Wrapper Functions\nDESCRIPTION: Examples of filesystem helper functions for reading JSON, creating directories and files, and deleting directories. These functions use native node:fs API in Node.js and throw errors in other environments.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/renderers-core/README.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Reads the UTF-8 content of a file as a JSON object.\nconst json = readJson<MyJsonDefinition>(filePath);\n\n// Creates a directory at the given path, recursively.\ncreateDirectory(newDirectoryPath);\n\n// Deletes a directory, recursively, if it exists.\ndeleteDirectory(directoryPath);\n\n// Creates a new file at the given path with the given content.\n// Creates its parent directory, recursively, if it does not exist.\ncreateFile(filePath, content);\n```\n\n----------------------------------------\n\nTITLE: Using throwValidatorItemsVisitor function in TypeScript\nDESCRIPTION: Examples showing how to use throwValidatorItemsVisitor to throw errors when validation items of certain levels are found in Codama IDL.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/validators/README.md#2025-04-19_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { throwValidatorItemsVisitor, getValidationItemsVisitor } from '@codama/validators';\n\n// Throw if any \"error\" items are found.\ncodama.accept(throwValidatorItemsVisitor(getValidationItemsVisitor()));\n\n// Throw if any \"warn\" or \"error\" items are found.\ncodama.accept(throwValidatorItemsVisitor(getValidationItemsVisitor(), 'warn'));\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Errors Using getAllErrors Helper in TypeScript\nDESCRIPTION: Example of using the getAllErrors helper function to retrieve all ErrorNodes under a specified node, which can be a RootNode, a ProgramNode, or an array of ProgramNodes.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/ProgramNode.md#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst allErrors = getAllErrors(rootNode);\n```\n\n----------------------------------------\n\nTITLE: Defining Remaining Accounts with Mixed Signer Status\nDESCRIPTION: Example of creating remaining accounts where each account may or may not be a signer, using the 'either' option for the isSigner attribute.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/InstructionRemainingAccountsNode.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninstructionRemainingAccountsNode(argumentValueNode('authorities'), {\n    isSigner: 'either',\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Account Discriminators from Fields in TypeScript\nDESCRIPTION: Example of using setAccountDiscriminatorFromFieldVisitor to set account discriminators based on specific fields and values.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/visitors/README.md#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ncodama.update(\n    setAccountDiscriminatorFromFieldVisitor({\n        counter: { field: 'discriminator', value: k.enumValueNode('accountState', 'counter') },\n        escrow: { field: 'discriminator', value: k.enumValueNode('accountState', 'escrow') },\n        vault: { field: 'discriminator', value: k.enumValueNode('accountState', 'vault') },\n    }),\n);\n```\n\n----------------------------------------\n\nTITLE: Using AccountBumpValueNode in an Instruction Definition\nDESCRIPTION: Example showing how to use the accountBumpValueNode as a default value for an instruction argument. This pattern is commonly used when an instruction needs the bump value for a PDA account.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/contextualValueNodes/AccountBumpValueNode.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninstructionNode({\n    name: 'transfer',\n    accounts: [\n        instructionAccountNode({\n            name: 'associatedTokenAccount',\n            isSigner: false,\n            isWritable: true,\n        }),\n        // ...\n    ],\n    arguments: [\n        instructionArgumentNode({\n            name: 'bump',\n            type: numberTypeNode('u8'),\n            defaultValue: accountBumpValueNode('associatedTokenAccount'),\n        }),\n        // ...\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Defined Types in Codama IDL\nDESCRIPTION: Updates or deletes DefinedTypeNodes based on a configuration object. Supports renaming types, renaming fields, and deleting types entirely.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/visitors/README.md#2025-04-19_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\ncodama.update(\n    updateDefinedTypesVisitor({\n        options: {\n            // Rename the 'options' type to 'configs'.\n            name: 'configs',\n            // Rename the 'sol' field to 'lamports'.\n            data: { sol: 'lamports' },\n        },\n        player: {\n            // Delete the 'player' type.\n            delete: true,\n        },\n    }),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating NumberValueNode Instance in TypeScript\nDESCRIPTION: Demonstrates how to create a NumberValueNode instance using the numberValueNode helper function. The function takes a numeric value and returns a NumberValueNode object with the specified number value.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/valueNodes/NumberValueNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = numberValueNode(42);\n```\n\n----------------------------------------\n\nTITLE: U32 Number Overwritten by U16 Number using PostOffsetTypeNode\nDESCRIPTION: Demonstrates how to use PostOffsetTypeNode in combination with tupleTypeNode to overwrite a u32 number with a u16 number.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/typeNodes/PostOffsetTypeNode.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntupleTypleNode([postOffsetTypeNode(numberTypeNode('u32'), -2), numberTypeNode('u16')]);\n\n// [1, 2]           => 0x01000200\n// [0xFFFFFFFF, 42] => 0xFFFF2A00\n```\n\n----------------------------------------\n\nTITLE: Creating TupleValueNode using Helper Function in TypeScript\nDESCRIPTION: Demonstrates how to create a TupleValueNode object using the tupleValueNode helper function. The example shows creating a tuple with a string value 'Alice' and a number value 42.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/valueNodes/TupleValueNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = tupleValueNode([stringValueNode('Alice'), numberValueNode(42)]);\n```\n\n----------------------------------------\n\nTITLE: Defining InstructionInputValueNode Type Helper in Markdown\nDESCRIPTION: This snippet defines the InstructionInputValueNode type helper and lists the concrete node types that can be used in its place. It includes links to the documentation for each concrete type.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/contextualValueNodes/InstructionInputValueNode.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# `InstructionInputValueNode` (abstract)\n\nThe `InstructionInputValueNode` type helper represents all values that can be used as a default value for an instruction account or an instruction argument. Note that `InstructionInputValueNode` is a type alias and cannot be used directly as a node. Instead you may use one of the following nodes:\n\n- [`ContextualValueNode`](./README.md) (abstract)\n- [`ProgramLinkNode`](../linkNodes/ProgramLinkNode.md)\n- [`ValueNode`](../valueNodes/README.md) (abstract)\n```\n\n----------------------------------------\n\nTITLE: Creating a ProgramLinkNode using the helper function in TypeScript\nDESCRIPTION: Example demonstrating how to use the programLinkNode helper function to create a reference to an existing ProgramNode. The function takes the name of the target ProgramNode as a parameter and returns a ProgramLinkNode object.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/linkNodes/ProgramLinkNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = programLinkNode('myProgram');\n```\n\n----------------------------------------\n\nTITLE: Using PayerValueNode as Default Value in Instruction Account in TypeScript\nDESCRIPTION: This example demonstrates how to use a PayerValueNode as the default value for an instruction account. The payer account is configured as a signer that isn't writable, with its value defaulting to the application's payer wallet.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/contextualValueNodes/PayerValueNode.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninstructionNode({\n    name: 'transfer',\n    accounts: [\n        instructionAccountNode({\n            name: 'payer',\n            isSigner: true,\n            isWritable: false,\n            defaultValue: payerValueNode(),\n        }),\n        // ...\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Example of a UTF-8 String Terminated by 0xFF Sentinel\nDESCRIPTION: Shows how to define a UTF-8 string that is terminated by a 0xFF byte sentinel value. The comment demonstrates how the string \"Hello\" would be encoded with the sentinel value appended.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/typeNodes/SentinelTypeNode.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nsentinelTypeNode(stringTypeNode('utf8'), constantValueNode(bytesTypeNode(), bytesValueNode('base16', 'ff')));\n\n// Hello => 0x48656C6C6FFF\n```\n\n----------------------------------------\n\nTITLE: Using a Resolver for Remaining Accounts\nDESCRIPTION: Example of creating remaining accounts using a resolver function that conditionally includes authorities based on whether a multisig is set up, with dependencies on other arguments.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/InstructionRemainingAccountsNode.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninstructionRemainingAccountsNode(\n    resolverValueNode('resolveTransferRemainingAccounts', {\n        docs: ['Provide authorities as remaining accounts if and only if the asset has a multisig set up.'],\n        dependsOn: [argumentValueNode('hasMultisig'), argumentValueNode('authorities')],\n    }),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating StringTypeNode in TypeScript\nDESCRIPTION: Helper function that creates a StringTypeNode object from an encoding. The function takes an encoding parameter and returns a StringTypeNode object.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/typeNodes/StringTypeNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = stringTypeNode('utf8');\n```\n\n----------------------------------------\n\nTITLE: Using AccountValueNode as a default value in instruction accounts in TypeScript\nDESCRIPTION: Shows how to reference one account as the default value for another account in an instruction definition, using the accountValueNode to create the reference to the 'payer' account.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/contextualValueNodes/AccountValueNode.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninstructionNode({\n    name: 'mint',\n    accounts: [\n        instructionAccountNode({\n            name: 'payer',\n            isSigner: true,\n            isWritable: false,\n        }),\n        instructionAccountNode({\n            name: 'authority',\n            isSigner: false,\n            isWritable: true,\n            defaultValue: accountValueNode('payer'),\n        }),\n        // ...\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Overwriting a U32 Number with a U16 Number in TypeScript\nDESCRIPTION: Demonstrates how to use PreOffsetTypeNode within a tuple to overwrite part of a u32 number with a u16 number.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/typeNodes/PreOffsetTypeNode.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntupleTypleNode([numberTypeNode('u32'), preOffsetTypeNode(numberTypeNode('u16'), -2)]);\n\n// [1, 2]           => 0x01000200\n// [0xFFFFFFFF, 42] => 0xFFFF2A00\n```\n\n----------------------------------------\n\nTITLE: Optional UTF-8 string with u16 prefix in TypeScript\nDESCRIPTION: Example of creating an optional UTF-8 string with a u16 prefix. Shows the encoding patterns for both None and Some states with their hexadecimal representations.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/typeNodes/OptionTypeNode.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\noptionTypeNode(stringTypeNode('UTF-8'), { prefix: numberTypeNode('u16') });\n\n// None          => 0x0000\n// Some(\"Hello\") => 0x010048656C6C6F\n```\n\n----------------------------------------\n\nTITLE: Creating an InstructionRemainingAccountsNode with Options\nDESCRIPTION: Helper function that creates an InstructionRemainingAccountsNode object from a value node with optional configuration for signer status and optionality.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/InstructionRemainingAccountsNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = instructionRemainingAccountsNode(argumentValueNode('signers'), {\n    isSigner: true,\n    isOptional: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Example of a fixed UTF-8 string with Hello prefix\nDESCRIPTION: Shows how to create a HiddenPrefixTypeNode for a fixed-size UTF-8 string with a \"Hello\" string prefix, including an example of the encoded output.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/typeNodes/HiddenPrefixTypeNode.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nhiddenPrefixTypeNode(fixedSizeTypeNode(stringTypeNode('utf8'), 10), [\n    constantValueNode(stringTypeNode('utf8'), stringValueNode('Hello')),\n]);\n\n// World => 0x48656C6C6F576F726C640000000000\n```\n\n----------------------------------------\n\nTITLE: Creating a HiddenSuffixTypeNode with Fixed String and Text Suffix\nDESCRIPTION: Example of creating a HiddenSuffixTypeNode that appends the constant string \"Hello\" after a fixed-size UTF-8 string of length 10. When encoding \"World\", it produces the byte sequence shown in the comment.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/typeNodes/HiddenSuffixTypeNode.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nhiddenSuffixTypeNode(fixedSizeTypeNode(stringTypeNode('utf8'), 10), [\n    constantValueNode(stringTypeNode('utf8'), stringValueNode('Hello')),\n]);\n\n// World => 0x576F726C64000000000048656c6c6F\n```\n\n----------------------------------------\n\nTITLE: Accessing RenderMap Content\nDESCRIPTION: Methods for accessing and verifying content within a RenderMap, including safe access and pattern matching.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/renderers-core/README.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst content: string = renderMap.get('programs/token.ts');\n\nconst content: string | undefined = renderMap.safeGet('programs/token.ts');\n\nconst hasTokenProgram = renderMap.has('programs/token.ts');\nconst hasNoFiles = renderMap.isEmpty();\n\nconst hasTokenProgram = renderMap.contains('programs/token.ts', 'export type TokenProgram = { /* ... */ }');\nconst hasMintAccount = renderMap.contains('programs/token.ts', /MintAccount/);\n```\n\n----------------------------------------\n\nTITLE: Declaring Visitor Types\nDESCRIPTION: Examples showing how to declare different types of visitors with varying scopes and return types.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/visitors-core/README.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlet myNumberVisitor: Visitor<number>;\nlet myVisitorForProgramNodesOnly: Visitor<number, 'programNode'>;\nlet myVisitorForTypeNodesOnly: Visitor<number, TypeNode['kind']>;\n```\n\n----------------------------------------\n\nTITLE: Creating PreOffsetTypeNode Instances in TypeScript\nDESCRIPTION: Demonstrates how to create PreOffsetTypeNode instances using the helper function with different offset strategies.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/typeNodes/PreOffsetTypeNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst relativeOffsetNode = preOffsetTypeNode(numberTypeNode('u32'), 2);\nconst absoluteOffsetNode = preOffsetTypeNode(numberTypeNode('u32'), -2, 'absolute');\n```\n\n----------------------------------------\n\nTITLE: Generating Debug String for AST Nodes in TypeScript\nDESCRIPTION: The getDebugStringVisitor function creates a string representation of AST nodes for debugging purposes. It can optionally include indentation for better readability.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/visitors-core/README.md#2025-04-19_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nconst visitor = getDebugStringVisitor();\nconst result = visit(tupleTypeNode([numberTypeNode('u32'), publicKeyTypeNode()]), visitor);\n// ^ \"tupleTypeNode(numberTypeNode[u32], publicKeyTypeNode)\"\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst visitor = getDebugStringVisitor({ indent: true });\nconst result = visit(tupleTypeNode([numberTypeNode('u32'), publicKeyTypeNode()]), visitor);\n// tupleTypeNode\n// |   numberTypeNode [u32]\n// |   publicKeyTypeNode\n```\n\n----------------------------------------\n\nTITLE: Account Discrimination using U32 Number\nDESCRIPTION: Shows how to create an account node with a discriminator that checks for a U32 number equal to 42 at offset 0.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/discriminatorNodes/ConstantDiscriminatorNode.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\naccountNode({\n    discriminators: [constantDiscriminatorNode(constantValueNode(numberTypeNode('u32'), numberValueNode(42)))],\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a PdaSeedValueNode using the helper function in TypeScript\nDESCRIPTION: This example demonstrates how to use the pdaSeedValueNode helper function to create a PdaSeedValueNode object. The function takes the name of the variable seed and its value, which in this case references an account named 'mint'.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/contextualValueNodes/PdaSeedValueNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = pdaSeedValueNode('mint', accountValueNode('mint'));\n```\n\n----------------------------------------\n\nTITLE: Creating String Constant Value Node in TypeScript\nDESCRIPTION: Demonstrates creating a string constant value with UTF-8 encoding using the helper function and shows the equivalent verbose syntax\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/valueNodes/ConstantValueNode.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconstantValueNodeFromString('utf8', 'Hello');\n\n// Equivalent to:\nconstantValueNode(stringTypeNode('utf8'), stringValueNode('Hello'));\n```\n\n----------------------------------------\n\nTITLE: Creating PrefixedCountNode with Number Type\nDESCRIPTION: Demonstrates creating a PrefixedCountNode instance using a u32 number type node.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/countNodes/PrefixedCountNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = prefixedCountNode(numberTypeNode(u32));\n```\n\n----------------------------------------\n\nTITLE: Recording Node Stack with Visitor Pattern\nDESCRIPTION: Example of using recordNodeStackVisitor to log the NodeStack during tree traversal.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/visitors-core/README.md#2025-04-19_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nconst stack = new NodeStack();\nconst visitor = pipe(\n    baseVisitor,\n    v =>\n        interceptVisitor(v, (node, next) => {\n            console.log(nodePathToString(stack.getPath()));\n            return next(node);\n        }),\n    v => recordNodeStackVisitor(v, stack)\n);\n```\n\n----------------------------------------\n\nTITLE: Creating PostOffsetTypeNode with Helper Function in TypeScript\nDESCRIPTION: Demonstrates how to create PostOffsetTypeNode instances using the helper function with different strategies.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/typeNodes/PostOffsetTypeNode.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst relativeOffsetNode = postOffsetTypeNode(numberTypeNode('u32'), 2);\nconst absoluteOffsetNode = postOffsetTypeNode(numberTypeNode('u32'), -2, 'absolute');\n```\n\n----------------------------------------\n\nTITLE: Checking Nested Type Node Kind in TypeScript\nDESCRIPTION: Demonstrates using isNestedTypeNode() to check if the final TypeNode matches specific kinds. Supports checking against a single kind or array of kinds.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/typeNodes/NestedTypeNode.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst nestedNode = fixedSizeTypeNode(stringTypeNode('utf8'), 10);\n\nisNestedTypeNode(nestedNode, 'stringTypeNode'); // true\nisNestedTypeNode(nestedNode, 'numberTypeNode'); // false\nisNestedTypeNode(nestedNode, ['stringTypeNode', 'numberTypeNode']); // true\n```\n\n----------------------------------------\n\nTITLE: Managing Linkable Nodes with LinkableDictionary in TypeScript\nDESCRIPTION: The LinkableDictionary class provides utilities for storing and accessing linkable nodes such as ProgramNodes, AccountNodes, or PdaNodes from their respective link nodes.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/visitors-core/README.md#2025-04-19_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nconst linkables = new LinkableDictionary();\n\n// Record linkable nodes via their full path.\nlinkables.recordPath([rootNode, programNode, accountNode]);\n\n// Get a linkable node using the full path of a link node, or return undefined if it is not found.\nconst programNode: ProgramNode | undefined = linkables.get([...somePath, programLinkNode]);\n\n// Get a linkable node using the full path of a link node, or throw an error if it is not found.\nconst programNode: ProgramNode = linkables.getOrThrow([...somePath, programLinkNode]);\n\n// Get the path of a linkable node using the full path of a link node, or return undefined if it is not found.\nconst accountPath: NodePath<AccountNode> | undefined = linkables.getPath([...somePath, accountLinkNode]);\n\n// Get the path of a linkable node using the full path of a link node, or throw an error if it is not found.\nconst accountPath: NodePath<AccountNode> = linkables.getPathOrThrow([...somePath, accountLinkNode]);\n```\n\n----------------------------------------\n\nTITLE: Creating Basic InstructionAccountNode in TypeScript\nDESCRIPTION: Demonstrates creating a basic InstructionAccountNode for an authority account using the helper function. The account is configured as non-writable but requires a signer.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/InstructionAccountNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = instructionAccountNode({\n    name: 'authority',\n    isWritable: false,\n    isSigner: true,\n    docs: ['This account that has the authority to perform this instruction.']\n});\n```\n\n----------------------------------------\n\nTITLE: Using getValueNodeVisitor in TypeScript\nDESCRIPTION: Shows the usage of the getValueNodeVisitor function to retrieve an unknown value for a visited ValueNode. This function is used internally by getValueNodeVisitor.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/dynamic-codecs/README.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nreturn visit(someValueNode, getValueNodeVisitor(linkables));\n```\n\n----------------------------------------\n\nTITLE: Implementing a Left-Padded U32 Number in TypeScript\nDESCRIPTION: Shows how to create a PreOffsetTypeNode that adds left padding to a u32 number using the 'padded' strategy.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/typeNodes/PreOffsetTypeNode.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\npreOffsetTypeNode(numberTypeNode('u32'), 4, 'padded');\n\n// 42 => 0x000000002A000000\n```\n\n----------------------------------------\n\nTITLE: Creating a PublicKeyValueNode in TypeScript\nDESCRIPTION: Example of using the publicKeyValueNode helper function to create a PublicKeyValueNode object from a base58 encoded public key. This function optionally accepts an identifier parameter for the public key.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/valueNodes/PublicKeyValueNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = publicKeyValueNode('7rA1KcBdW5hKmMasQdRVBFsD6T1nLtYuR6y59TJNgevR');\n```\n\n----------------------------------------\n\nTITLE: Creating PDA Node without Seeds\nDESCRIPTION: Demonstrates creating a minimal PDA node without any seeds. Shows the simplest possible PDA node configuration.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/PdaNode.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\npdaNode({\n    name: 'seedlessPda',\n    seeds: [],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an AccountBumpValueNode in TypeScript\nDESCRIPTION: Helper function that creates an AccountBumpValueNode object from an account name. This is used to reference the bump value of a PDA account.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/contextualValueNodes/AccountBumpValueNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = accountBumpValueNode('associatedTokenAccount');\n```\n\n----------------------------------------\n\nTITLE: Right-Padded U32 Number Example with PostOffsetTypeNode\nDESCRIPTION: Shows how to create a right-padded u32 number using PostOffsetTypeNode with the 'padded' strategy.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/typeNodes/PostOffsetTypeNode.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\npostOffsetTypeNode(numberTypeNode('u32'), 4, 'padded');\n\n// 42 => 0x2A00000000000000\n```\n\n----------------------------------------\n\nTITLE: Example of 2-Decimal USD Amount Representation in TypeScript\nDESCRIPTION: Shows how to create an AmountTypeNode representing a USD currency value with 2 decimal places precision. Includes examples of how different decimal values are stored in hexadecimal format after being processed through the node.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/typeNodes/AmountTypeNode.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\namountTypeNode(numberTypeNode('u32'), 2, 'USD');\n\n// 0.01 USD   => 0x01000000\n// 10 USD     => 0xE8030000\n// 400.60 USD => 0x7C9C0000\n```\n\n----------------------------------------\n\nTITLE: Creating a BytesTypeNode using the helper function in TypeScript\nDESCRIPTION: Demonstrates how to use the bytesTypeNode() helper function to create a BytesTypeNode object that represents data as raw bytes without a specific structure.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/typeNodes/BytesTypeNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = bytesTypeNode();\n```\n\n----------------------------------------\n\nTITLE: Creating EnumStructVariantTypeNode using Helper Function in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the enumStructVariantTypeNode helper function to create an EnumStructVariantTypeNode object. It creates a variant named 'coordinates' with a struct containing 'x' and 'y' fields of type u32.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/typeNodes/EnumStructVariantTypeNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = enumStructVariantTypeNode(\n    'coordinates',\n    structTypeNode([\n        structFieldTypeNode({ name: 'x', type: numberTypeNode('u32') }),\n        structFieldTypeNode({ name: 'y', type: numberTypeNode('u32') }),\n    ]),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a BooleanValueNode in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the booleanValueNode helper function to create a BooleanValueNode object. The function takes a boolean value as an argument and returns a BooleanValueNode.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/valueNodes/BooleanValueNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = booleanValueNode(true);\n```\n\n----------------------------------------\n\nTITLE: Creating SetTypeNode using Helper Function in TypeScript\nDESCRIPTION: Example of using the setTypeNode helper function to create a set of public keys with a u32 prefix count.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/typeNodes/SetTypeNode.md#2025-04-19_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nconst node = setTypeNode(publicKeyTypeNode(), prefixedCountNode(numberTypeNode('u32')));\n```\n\n----------------------------------------\n\nTITLE: Creating a Variable PDA Seed Node with a Number Type\nDESCRIPTION: Helper function usage to create a VariablePdaSeedNode object with a number type. This example creates a seed named 'amount' with a u32 number type.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/pdaSeedNodes/VariablePdaSeedNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = variablePdaSeedNode('amount', numberTypeNode('u32'));\n```\n\n----------------------------------------\n\nTITLE: Creating NumberTypeNode Objects in TypeScript\nDESCRIPTION: Demonstrates how to create NumberTypeNode objects using the helper function numberTypeNode() with different formats and endianness.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/typeNodes/NumberTypeNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst littleEndianNode = numberTypeNode('u32'); // Little-endian by default.\n\nconst bigEndianNode = numberTypeNode('u32', 'be');\n```\n\n----------------------------------------\n\nTITLE: Installing Codama Rust Renderer Package\nDESCRIPTION: Command to install the @codama/renderers-rust package using pnpm package manager\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/renderers-rust/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm install @codama/renderers-rust\n```\n\n----------------------------------------\n\nTITLE: Creating a MapValueNode using helper function in TypeScript\nDESCRIPTION: Example of using the mapValueNode helper function to create a MapValueNode object from an array of MapEntryValueNode objects. Each entry represents a key-value pair in the map.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/valueNodes/MapValueNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = mapValueNode([\n    mapEntryValueNode(stringValueNode('apples'), numberValueNode(12)),\n    mapEntryValueNode(stringValueNode('bananas'), numberValueNode(34)),\n    mapEntryValueNode(stringValueNode('carrots'), numberValueNode(56)),\n]);\n```\n\n----------------------------------------\n\nTITLE: U8 Boolean Type Node Example\nDESCRIPTION: Shows the byte representation of boolean values using u8 number type, which is the default configuration.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/typeNodes/BooleanTypeNode.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nbooleanTypeNode();\n\n// true  => 0x01\n// false => 0x00\n```\n\n----------------------------------------\n\nTITLE: Creating a DateTimeTypeNode with Helper Function in TypeScript\nDESCRIPTION: Demonstrates how to create a DateTimeTypeNode object using the dateTimeTypeNode helper function with a NumberTypeNode as its parameter.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/typeNodes/DateTimeTypeNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = dateTimeTypeNode(numberTypeNode('u64'));\n```\n\n----------------------------------------\n\nTITLE: Creating a SizePrefixTypeNode with Helper Function\nDESCRIPTION: Demonstrates how to create a SizePrefixTypeNode object using the helper function. This example creates a node with a UTF-8 string type and a u32 number type as the size prefix.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/typeNodes/SizePrefixTypeNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = sizePrefixTypeNode(stringTypeNode('utf8'), numberTypeNode('u32'));\n```\n\n----------------------------------------\n\nTITLE: Encoding u32 Integers in TypeScript\nDESCRIPTION: Demonstrates how to encode unsigned 32-bit integers using the NumberTypeNode with 'u32' format.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/typeNodes/NumberTypeNode.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nnumberTypeNode('u32');\n\n// 5     => 0x00000000\n// 42    => 0x2A000000\n// 65535 => 0xFFFF0000\n```\n\n----------------------------------------\n\nTITLE: Creating a ConditionalValueNode with Helper Function in TypeScript\nDESCRIPTION: Demonstrates how to create a ConditionalValueNode using the conditionalValueNode helper function. The example sets up a condition based on an 'amount' argument, comparing it to 0, and returns different accounts based on the condition's evaluation.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/contextualValueNodes/ConditionalValueNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = conditionalValueNode({\n    condition: argumentValueNode('amount'),\n    value: numberValueNode(0),\n    ifTrue: accountValueNode('mint'),\n    ifFalse: programIdValueNode(),\n});\n```\n\n----------------------------------------\n\nTITLE: Decoding Error Messages in Production\nDESCRIPTION: Command to decode error codes back to human-readable messages using the CLI tool.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/errors/README.md#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx @codama/errors decode -- 123\n```\n\n----------------------------------------\n\nTITLE: Defining CountNode Type Helper in Markdown\nDESCRIPTION: Describes the abstract CountNode type helper and lists its concrete implementations that can be used for determining collection sizes. The type is not directly usable and must be implemented through one of the specified node types.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/countNodes/README.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# `CountNode` (abstract)\n\nThe `CountNode` type helper represents all available strategies that determine the size of a collection. Note that `CountNode` is a type alias and cannot be used directly as a node. Instead you may use one of the following nodes:\n\n- [`FixedCountNode`](./FixedCountNode.md)\n- [`PrefixedCountNode`](./PrefixedCountNode.md)\n- [`RemainderCountNode`](./RemainderCountNode.md)\n```\n\n----------------------------------------\n\nTITLE: Example of a number with 0xFFFF prefix\nDESCRIPTION: Shows how to create a HiddenPrefixTypeNode for a u32 number with a 0xFFFF bytes prefix, including an example of the encoded output.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/typeNodes/HiddenPrefixTypeNode.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nhiddenPrefixTypeNode(numberTypeNode('u32'), [constantValueNode(bytesTypeNode(), bytesValueNode('base16', 'ffff'))]);\n\n// 42 => 0xFFFF2A000000\n```\n\n----------------------------------------\n\nTITLE: Creating a PayerValueNode using Helper Function in TypeScript\nDESCRIPTION: A simple example showing how to create a PayerValueNode object using the payerValueNode() helper function. This function creates a node that represents the main wallet for payment operations.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/contextualValueNodes/PayerValueNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = payerValueNode();\n```\n\n----------------------------------------\n\nTITLE: Example Codama Configuration File\nDESCRIPTION: A sample JSON configuration file for Codama, demonstrating the structure and options available. Includes IDL path, before visitors, and script definitions.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/cli/README.md#2025-04-19_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"idl\": \"path/to/idl\",\n    \"before\": [\n        \"./my-before-visitor.js\",\n        { \"from\": \"some-library#removeTypes\", \"args\": [[\"internalFoo\", \"internalBar\"]] }\n    ],\n    \"scripts\": {\n        \"js\": [\n            {\n                \"from\": \"@codama/renderers-js\",\n                \"args\": [\"clients/js/src/generated\"]\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Encoding f32 Big-Endian Decimal Numbers in TypeScript\nDESCRIPTION: Shows how to encode 32-bit floating-point numbers in big-endian format using the NumberTypeNode with 'f32' format and 'be' endianness.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/typeNodes/NumberTypeNode.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nnumberTypeNode('f32', 'be');\n\n// 1      => 0x3F800000\n// -42    => 0xC2280000\n// 3.1415 => 0x40490E56\n```\n\n----------------------------------------\n\nTITLE: Creating a SizeDiscriminatorNode in TypeScript\nDESCRIPTION: Helper function that creates a SizeDiscriminatorNode object from a size value. This is used to identify data structures based on their exact byte size.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/discriminatorNodes/SizeDiscriminatorNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = sizeDiscriminatorNode(165);\n```\n\n----------------------------------------\n\nTITLE: Removing Documentation from AST Nodes in TypeScript\nDESCRIPTION: The removeDocsVisitor function traverses all nodes with a 'docs' property and clears its content. This is useful for generating unique identifiers for nodes regardless of their documentation.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/visitors-core/README.md#2025-04-19_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = definedTypeNode({\n    name: 'authority',\n    type: publicKeyTypeNode(),\n    docs: ['The authority of the account'],\n});\nconst updatedNode = visit(node, removeDocsVisitor());\n// ^ definedTypeNode({ name: 'authority', type: publicKeyTypeNode() })\n```\n\n----------------------------------------\n\nTITLE: Creating a ProgramIdValueNode using the helper function in TypeScript\nDESCRIPTION: Example demonstrating how to create a ProgramIdValueNode object using the programIdValueNode() helper function. This function creates a node that represents the public key of the current program.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/contextualValueNodes/ProgramIdValueNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = programIdValueNode();\n```\n\n----------------------------------------\n\nTITLE: Creating Bytes Constant Value Node in TypeScript\nDESCRIPTION: Shows how to create a bytes constant value with base16 encoding using the helper function and displays the equivalent expanded form\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/valueNodes/ConstantValueNode.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconstantValueNodeFromBytes('base16', 'FF99CC');\n\n// Equivalent to:\nconstantValueNode(bytesTypeNode(), bytesValueNode('base16', 'FF99CC'));\n```\n\n----------------------------------------\n\nTITLE: Using SizeDiscriminatorNode with an Account Definition\nDESCRIPTION: Example of defining an account that's distinguished by having a size equal to 42 bytes. The sizeDiscriminatorNode is used in the discriminators array of an accountNode.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/discriminatorNodes/SizeDiscriminatorNode.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\naccountNode({\n    discriminators: [sizeDiscriminatorNode(42)],\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Number Constant Value Node in TypeScript\nDESCRIPTION: Creates a ConstantValueNode instance with a number type (u32) and value (42)\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/valueNodes/ConstantValueNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = constantValueNode(numberTypeNode('u32'), numberValueNode(42));\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Account Counter Visitor\nDESCRIPTION: Simple visitor implementation that counts program accounts.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/visitors-core/README.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst accountCounterVisitor: Visitor<number, 'programNode'> = {\n    visitProgram: (node: ProgramNode) => node.accounts.length,\n};\n```\n\n----------------------------------------\n\nTITLE: Creating InstructionByteDeltaNode with Helper Function in TypeScript\nDESCRIPTION: Demonstrates how to use the instructionByteDeltaNode helper function to create a node with a specific byte size of 42 and explicitly setting the withHeader option to false.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/InstructionByteDeltaNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = instructionByteDeltaNode(numberValueNode(42), { withHeader: false });\n```\n\n----------------------------------------\n\nTITLE: Account Discrimination Example in TypeScript\nDESCRIPTION: Example showing how to create an account node with a u32 discriminator field at offset 0. The discriminator uses a default value of 42.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/discriminatorNodes/FieldDiscriminatorNode.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\naccountNode({\n    data: structTypeNode([\n        structFieldTypeNode({\n            name: 'discriminator',\n            type: numberTypeNode('u32'),\n            defaultValue: numberValueNode(42),\n            defaultValueStrategy: 'omitted',\n        }),\n        // ...\n    ]),\n    discriminators: [fieldDiscriminatorNode('discriminator')],\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Bottom-Up Node Transformation Examples\nDESCRIPTION: Shows how to use bottomUpTransformerVisitor for node transformation and deletion.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/visitors-core/README.md#2025-04-19_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nconst visitor = bottomUpTransformerVisitor([\n    {\n        // Transform all numbers into u64 numbers.\n        select: '[numberTypeNode]',\n        transform: () => numberTypeNode('u64'),\n    },\n    {\n        // Delete all account nodes that start with \"m\".\n        select: ['[accountNode]', node => 'name' in node && node.name.startsWith('m')],\n        transform: () => null,\n    },\n    {\n        // Prefix all fields inside a defined type with \"super\".\n        select: '[definedTypeNode]metadata.[structFieldTypeNode]',\n        transform: node => structFieldTypeNode({ ...node, name: `super${pascalCase(node.name)}` }),\n    },\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating BytesValueNode Objects in TypeScript\nDESCRIPTION: Demonstrates the usage of the bytesValueNode helper function to create BytesValueNode objects with different encodings. It shows examples for base16 and utf8 encodings.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/valueNodes/BytesValueNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = bytesValueNode('base16', '010203');\nconst utf8Node = bytesValueNode('utf8', 'Hello');\n```\n\n----------------------------------------\n\nTITLE: Setting Fixed Account Sizes in TypeScript\nDESCRIPTION: Example of using setFixedAccountSizesVisitor to automatically set fixed sizes for accounts based on their content.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/visitors/README.md#2025-04-19_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ncodama.update(setFixedAccountSizesVisitor());\n```\n\n----------------------------------------\n\nTITLE: Creating String-based ConstantPdaSeedNode in TypeScript\nDESCRIPTION: Shows how to create a ConstantPdaSeedNode with UTF-8 string encoding using the helper function and its equivalent expanded form\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/pdaSeedNodes/ConstantPdaSeedNode.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconstantPdaSeedNodeFromString('utf8', 'Hello');\n\n// Equivalent to:\nconstantPdaSeedNode(stringTypeNode('utf8'), stringValueNode('Hello'));\n```\n\n----------------------------------------\n\nTITLE: Creating ArrayValueNode with Helper Function in TypeScript\nDESCRIPTION: Demonstrates using the arrayValueNode helper function to create an array node containing three number values. The function takes an array of ValueNode objects as input and constructs a new ArrayValueNode instance.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/valueNodes/ArrayValueNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = arrayValueNode([numberValueNode(1), numberValueNode(2), numberValueNode(3)]);\n```\n\n----------------------------------------\n\nTITLE: Getting Defined Type Histogram in TypeScript\nDESCRIPTION: Example of using getDefinedTypeHistogramVisitor to analyze the usage of defined types in the Codama IDL.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/visitors/README.md#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst histogram = codama.accept(getDefinedTypeHistogramVisitor());\n```\n\n----------------------------------------\n\nTITLE: Installing @codama/node-types with pnpm\nDESCRIPTION: Command to install the @codama/node-types package using pnpm package manager. This provides type definitions for Codama nodes.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/node-types/README.md#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm install @codama/node-types\n```\n\n----------------------------------------\n\nTITLE: Tapping into Visitor Operations in TypeScript\nDESCRIPTION: Example of using tapVisitor to observe visitor behavior without modifying it. This visitor counts number nodes while otherwise behaving like a void visitor.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/visitors-core/README.md#2025-04-19_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nlet numberOfNumberNodes = 0;\nconst visitor = tapVisitor(voidVisitor(), 'numberTypeNode', node => {\n    numberOfNumberNodes++;\n});\n\nvisit(tupleTypeNode([numberTypeNode('u32'), publicKeyTypeNode()]), visitor);\n// numberOfNumberNodes === 1\n```\n\n----------------------------------------\n\nTITLE: Creating Bytes-based ConstantValueNode in TypeScript\nDESCRIPTION: Demonstrates creating a ConstantValueNode with bytes encoding using the helper function and its equivalent expanded form\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/pdaSeedNodes/ConstantPdaSeedNode.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconstantValueNodeFromBytes('base16', 'FF99CC');\n\n// Equivalent to:\nconstantValueNode(bytesTypeNode(), bytesValueNode('base16', 'FF99CC'));\n```\n\n----------------------------------------\n\nTITLE: Creating SomeValueNode Object with Helper Function in TypeScript\nDESCRIPTION: Demonstrates how to use the someValueNode helper function to create a SomeValueNode object from a value node. In this example, it creates a SomeValueNode with a number value of 42.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/valueNodes/SomeValueNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = someValueNode(numberValueNode(42));\n```\n\n----------------------------------------\n\nTITLE: Node Type Guard Usage in TypeScript\nDESCRIPTION: Demonstrates the usage of isNode function to check if a node matches specific kind(s). Returns false for null or undefined nodes.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/README.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nisNode(stringTypeNode('utf8'), 'stringTypeNode'); // true.\nisNode(stringTypeNode('utf8'), 'numberTypeNode'); // false.\nisNode(stringTypeNode('utf8'), ['stringTypeNode', 'numberTypeNode']); // true.\nisNode(null, 'stringTypeNode'); // false.\nisNode(undefined, 'stringTypeNode'); // false.\n```\n\n----------------------------------------\n\nTITLE: Using SizeDiscriminatorNode with an Instruction Definition\nDESCRIPTION: Example of defining an instruction that's distinguished by having a size equal to 42 bytes. The sizeDiscriminatorNode is used in the discriminators array of an instructionNode.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/discriminatorNodes/SizeDiscriminatorNode.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninstructionNode({\n    discriminators: [sizeDiscriminatorNode(42)],\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: NodeStack Method Examples\nDESCRIPTION: Demonstrates various NodeStack methods including push, pop, peek, getPath, and clone operations.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/visitors-core/README.md#2025-04-19_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n// Push a node to the stack.\nnodeStack.push(node);\n\n// Pop the last node out of the stack.\nconst lastNode = nodeStack.pop();\n\n// Peek at the last node in the stack.\nconst lastNode = nodeStack.peek();\n\n// Get all the nodes in the stack as an immutable `NodePath` array.\nconst path: NodePath = nodeStack.getPath();\n\n// Get a `NodePath` whilst asserting on the last node kind.\nconst path: NodePath<AccountNode> = nodeStack.getPath('accountNode');\n\n// Check if the stack is empty.\nconst isEmpty = nodeStack.isEmpty();\n\n// Clone the stack.\nconst clonedStack = nodeStack.clone();\n```\n\n----------------------------------------\n\nTITLE: U32 Boolean Type Node Example\nDESCRIPTION: Demonstrates boolean representation using u32 number type, showing how the byte pattern changes with larger number sizes.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/typeNodes/BooleanTypeNode.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nbooleanTypeNode(numberTypeNode('u32'));\n\n// true  => 0x01000000\n// false => 0x00000000\n```\n\n----------------------------------------\n\nTITLE: Creating a StringValueNode in TypeScript\nDESCRIPTION: Demonstrates how to use the stringValueNode helper function to create a StringValueNode object from a string value.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/valueNodes/StringValueNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = stringValueNode('Hello');\n```\n\n----------------------------------------\n\nTITLE: Node Filter Function Creation in TypeScript\nDESCRIPTION: Example of using isNodeFilter to create a filter function for array operations that checks against specific node types.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/README.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nmyNodes.filter(isNodeFilter('stringTypeNode')); // Keep only string type nodes.\nmyNodes.filter(isNodeFilter(['stringTypeNode', 'numberTypeNode'])); // Keep only string and number type nodes.\n```\n\n----------------------------------------\n\nTITLE: Creating Flexible Signer InstructionAccountNode in TypeScript\nDESCRIPTION: Demonstrates creating an InstructionAccountNode with flexible signer requirements using the 'either' option. The account is writable and can optionally be a signer.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/InstructionAccountNode.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninstructionAccountNode({\n    name: 'owner',\n    isWritable: true,\n    isSigner: 'either',\n    docs: ['The owner of the asset. The owner must only sign the transaction if the asset is being updated.']\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Content to RenderMap\nDESCRIPTION: Example of using the RenderMap class to add content with relative paths for file generation.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/renderers-core/README.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst renderMap = new RenderMap()\n    .add('programs/token.ts', 'export type TokenProgram = { /* ... */ }')\n    .add('accounts/mint.ts', 'export type MintAccount = { /* ... */ }')\n    .add('instructions/transfer.ts', 'export function getTransferInstruction = { /* ... */ }');\n```\n\n----------------------------------------\n\nTITLE: Creating Field Discriminator Node in TypeScript\nDESCRIPTION: Helper function usage for creating a FieldDiscriminatorNode with a field name and offset parameter.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/discriminatorNodes/FieldDiscriminatorNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = fieldDiscriminatorNode('accountState', 64);\n```\n\n----------------------------------------\n\nTITLE: PdaSeedNode Type Reference\nDESCRIPTION: Abstract type helper that defines the interface for PDA seed definitions. This type cannot be used directly but must be implemented through concrete types ConstantPdaSeedNode or VariablePdaSeedNode.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/pdaSeedNodes/README.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# `PdaSeedNode` (abstract)\n```\n\n----------------------------------------\n\nTITLE: Node Assertion Filter in TypeScript\nDESCRIPTION: Demonstrates creating assertion filters using assertIsNodeFilter for array operations with type checking.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/README.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nmyNodes.filter(assertIsNodeFilter('stringTypeNode')); // Fail if there are non-string type node.\nmyNodes.filter(assertIsNodeFilter(['stringTypeNode', 'numberTypeNode'])); // Fail if there are nodes that are not string or number type nodes.\n```\n\n----------------------------------------\n\nTITLE: Using PrefixedCountNode with Array Type\nDESCRIPTION: Shows how to create an array type with a public key type and u32 length prefix.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/countNodes/PrefixedCountNode.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\narrayTypeNode(publicKeyTypeNode(), prefixedCountNode(numberTypeNode(u32)));\n```\n\n----------------------------------------\n\nTITLE: Using IdentityValueNode as a default value for an instruction account in TypeScript\nDESCRIPTION: This example demonstrates how to use an IdentityValueNode as the default value for an authority account in an instruction node. The identity value will be used as the signer authority.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/contextualValueNodes/IdentityValueNode.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninstructionNode({\n    name: 'transfer',\n    accounts: [\n        instructionAccountNode({\n            name: 'authority',\n            isSigner: true,\n            isWritable: false,\n            defaultValue: identityValueNode(),\n        }),\n        // ...\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Using NodeStack in TypeScript\nDESCRIPTION: Example showing how to create and traverse a node tree using NodeStack. Creates a defined type with a tuple containing a number and public key.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/visitors-core/README.md#2025-04-19_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = definedTypeNode({\n    name: 'myType',\n    type: tupleTypeNode([numberTypeNode('u32'), publicKeyTypeNode()]),\n});\n```\n\n----------------------------------------\n\nTITLE: Recording Linkables on First Visit in TypeScript\nDESCRIPTION: The recordLinkablesOnFirstVisitVisitor function combines interceptFirstVisitVisitor and getRecordLinkablesVisitor to record all linkable nodes before the first visit of any node in the AST.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/visitors-core/README.md#2025-04-19_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nconst linkables = new LinkableDictionary();\nconst stack = new NodeStack();\nconst visitor = pipe(\n    baseVisitor,\n    v =>\n        tapVisitor(v, 'pdaLinkNode', node => {\n            const pdaNode = linkables.getOrThrow(stack.getPath(node.kind));\n            console.log(`${pdaNode.seeds.length} seeds`);\n        }),\n    v => recordNodeStackVisitor(v, stack),\n    v => recordLinkablesOnFirstVisitVisitor(v, linkables),\n);\n```\n\n----------------------------------------\n\nTITLE: Null-Safe Node Assertion Filter in TypeScript\nDESCRIPTION: Shows usage of removeNullAndAssertIsNodeFilter to filter arrays while removing null/undefined values and asserting types.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/README.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst myNodes = [null, stringTypeNode('utf8'), undefined, stringTypeNode('base58')];\n\nmyNodes.filter(removeNullAndAssertIsNodeFilter('stringTypeNode')); // Ok and removes null and undefined values.\nmyNodes.filter(removeNullAndAssertIsNodeFilter('numberTypeNode')); // Throws an error.\nmyNodes.filter(removeNullAndAssertIsNodeFilter(['stringTypeNode', 'numberTypeNode'])); // Ok and removes null and undefined values.\n```\n\n----------------------------------------\n\nTITLE: Creating FixedCountNode in TypeScript\nDESCRIPTION: Helper function example showing how to create a FixedCountNode object with a specific fixed count value.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/countNodes/FixedCountNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = fixedCountNode(42);\n```\n\n----------------------------------------\n\nTITLE: Representing Account Deletion in TypeScript\nDESCRIPTION: Creates an InstructionByteDeltaNode that represents the byte delta for deleting a token account by setting the subtract option to true, effectively making the byte delta negative.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/InstructionByteDeltaNode.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninstructionByteDeltaNode(accountLinkNode('token'), { subtract: true });\n```\n\n----------------------------------------\n\nTITLE: Complex Visitor Composition with Pipe in TypeScript\nDESCRIPTION: Extended example of using pipe to transform a visitor through multiple steps. This creates a visitor that transforms number types, logs tuple sizes, and wraps nodes in a defined type.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/visitors-core/README.md#2025-04-19_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nconst visitor = pipe(\n    // Starts with the identity visitor.\n    identityVisitor(),\n    v =>\n        // Extends the visitor to make all number types u64.\n        extendVisitor(v, {\n            visitNumberType: node => numberTypeNode('u64'),\n        }),\n    v =>\n        // Log the amount of items in tuple types.\n        tapVisitor(v, 'tupleTypeNode', node => {\n            console.log(node.items.length);\n        }),\n    v =>\n        // Wrap the visited node in a `DefinedTypeNode` labelled \"gift\".\n        interceptVisitor(v, node => (node, next) => {\n            return definedTypeNode({ name: 'gift', type: next(node) });\n        }),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a SolAmountTypeNode using Helper Function in TypeScript\nDESCRIPTION: Demonstrates how to create a SolAmountTypeNode object using the solAmountTypeNode helper function with a u64 numberTypeNode. This helper function simplifies the creation of nodes representing SOL amounts.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/typeNodes/SolAmountTypeNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = solAmountTypeNode(numberTypeNode('u64'));\n```\n\n----------------------------------------\n\nTITLE: Creating MapEntryValueNode using Helper Function in TypeScript\nDESCRIPTION: Demonstrates how to create a MapEntryValueNode object using the mapEntryValueNode helper function. The example shows creating an entry with a string key 'total' and numeric value 42.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/valueNodes/MapEntryValueNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = mapEntryValueNode(stringValueNode('total'), numberValueNode(42));\n```\n\n----------------------------------------\n\nTITLE: Static Visitor Example\nDESCRIPTION: Example of using staticVisitor to create a simple string-returning visitor.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/visitors-core/README.md#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst visitor: Visitor<string> = staticVisitor(node => `Visiting ${node.kind}`);\nconst kind = visit(numberTypeNode('u32'), visitor);\n```\n\n----------------------------------------\n\nTITLE: Creating an AccountValueNode using the helper function in TypeScript\nDESCRIPTION: Demonstrates how to use the accountValueNode helper function to create a node that refers to an account named 'mint'.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/contextualValueNodes/AccountValueNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = accountValueNode('mint');\n```\n\n----------------------------------------\n\nTITLE: Using getNodeCodecVisitor in TypeScript\nDESCRIPTION: Demonstrates how to use the getNodeCodecVisitor function to obtain a Codec<unknown> for a visited node. This function is utilized internally by getNodeCodec.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/dynamic-codecs/README.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nreturn visit(someTypeNode, getNodeCodecVisitor(linkables));\n```\n\n----------------------------------------\n\nTITLE: Using SolAmountTypeNode with Examples in TypeScript\nDESCRIPTION: Shows how to create a SolAmountTypeNode for u64 Solana amounts and provides examples of encoded values for 1.5 SOL and 300 SOL in hexadecimal format, demonstrating how values are represented in lamports.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/typeNodes/SolAmountTypeNode.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nsolAmountTypeNode(numberTypeNode('u64'));\n\n// 1.5 SOL => 0x002F685900000000\n// 300 SOL => 0x00B864D945000000\n```\n\n----------------------------------------\n\nTITLE: Using RemainderCountNode with Array Type in TypeScript\nDESCRIPTION: Example demonstrating how to use RemainderCountNode with an arrayTypeNode to create a variable-length array of public keys.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/countNodes/RemainderCountNode.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\narrayTypeNode(publicKeyTypeNode(), remainderCountNode());\n```\n\n----------------------------------------\n\nTITLE: Instruction Discrimination using Base16 Hash\nDESCRIPTION: Demonstrates creating an instruction node with a discriminator that uses an 8-byte base16 hash value.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/discriminatorNodes/ConstantDiscriminatorNode.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninstructionNode({\n    discriminators: [constantValueNodeFromBytes('base16', '0011223344556677')],\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a NoneValueNode using helper function in TypeScript\nDESCRIPTION: Example of using the noneValueNode() helper function to create a NoneValueNode object. This function takes no parameters and returns a new NoneValueNode instance with a kind attribute set to \"noneValueNode\".\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/valueNodes/NoneValueNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = noneValueNode();\n```\n\n----------------------------------------\n\nTITLE: Dependency Update Links\nDESCRIPTION: Git commit links for dependency updates referenced in the changelog\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/visitors/CHANGELOG.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[`5071455`](https://github.com/codama-idl/codama/commit/5071455b05359fc427c1d6295e7abb0e39503a15)\n[`7e275ab`](https://github.com/codama-idl/codama/commit/7e275ab51c6d1b20b54ea9f4976b0692a308b2d2)\n[`f0c2190`](https://github.com/codama-idl/codama/commit/f0c219076af58c098319f4ca9494a98e198d99a1)\n```\n\n----------------------------------------\n\nTITLE: Recording Linkable Nodes with getRecordLinkablesVisitor in TypeScript\nDESCRIPTION: The getRecordLinkablesVisitor function creates a visitor that records all linkable nodes encountered during AST traversal into a LinkableDictionary instance.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/visitors-core/README.md#2025-04-19_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nconst linkables = new LinkableDictionary();\nvisit(rootNode, getRecordLinkablesVisitor(linkables));\n// Now, all linkable nodes are recorded in the `linkables` dictionary.\n```\n\n----------------------------------------\n\nTITLE: Creating PublicKeyTypeNode in TypeScript\nDESCRIPTION: Helper function demonstration for instantiating a PublicKeyTypeNode object. This function creates a node with the 'publicKeyTypeNode' kind discriminator and no children.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/typeNodes/PublicKeyTypeNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = publicKeyTypeNode();\n```\n\n----------------------------------------\n\nTITLE: Creating AmountTypeNode Objects with Helper Function in TypeScript\nDESCRIPTION: Demonstrates how to use the amountTypeNode helper function to create AmountTypeNode instances. Shows creating both a node with a currency unit (USD) and one without any units, each with 2 decimal places of precision.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/typeNodes/AmountTypeNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = amountTypeNode(numberTypeNode('u64'), 2, 'USD');\nconst nodeWithoutUnits = amountTypeNode(numberTypeNode('u16'), 2);\n```\n\n----------------------------------------\n\nTITLE: Checking NumberTypeNode Properties in TypeScript\nDESCRIPTION: Shows how to use various helper functions to check properties of NumberTypeNode objects, such as whether they represent signed integers, unsigned integers, integers, or decimal numbers.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/typeNodes/NumberTypeNode.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nisSignedInteger(numberTypeNode('u32')); // false\nisSignedInteger(numberTypeNode('i32')); // true\n```\n\nLANGUAGE: typescript\nCODE:\n```\nisUnsignedInteger(numberTypeNode('u32')); // true\nisUnsignedInteger(numberTypeNode('i32')); // false\n```\n\nLANGUAGE: typescript\nCODE:\n```\nisInteger(numberTypeNode('u32')); // true\nisInteger(numberTypeNode('i32')); // true\nisInteger(numberTypeNode('f32')); // false\n```\n\nLANGUAGE: typescript\nCODE:\n```\nisDecimal(numberTypeNode('u32')); // false\nisDecimal(numberTypeNode('i32')); // false\nisDecimal(numberTypeNode('f32')); // true\n```\n\n----------------------------------------\n\nTITLE: Rust Trait Generation Examples\nDESCRIPTION: Examples of how traits are rendered in Rust code with different feature flag configurations\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/renderers-rust/README.md#2025-04-19_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n// With `useFullyQualifiedName` set to `false` (default).\nuse serde::Serialize;\nuse serde::Deserialize;\n// ...\n#[derive(Serialize, Deserialize)]\n\n// With `useFullyQualifiedName` set to `true`.\n#[derive(serde::Serialize, serde::Deserialize)]\n```\n\n----------------------------------------\n\nTITLE: Dependency Updates in Markdown Format\nDESCRIPTION: Lists updated dependencies with commit references for the Codama project. Shows that @codama/errors and @codama/nodes packages were updated to version 0.20.2 following a fix for invalid package dependencies.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/visitors-core/CHANGELOG.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Updated dependencies [[`964776f`](https://github.com/codama-idl/codama/commit/964776fe73402c236d334032821013674c3b1a5e)]:\n    - @codama/errors@0.20.2\n    - @codama/nodes@0.20.2\n```\n\n----------------------------------------\n\nTITLE: Top-Down Node Transformation Example\nDESCRIPTION: Demonstrates using topDownTransformerVisitor to transform program nodes.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/visitors-core/README.md#2025-04-19_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nconst visitor = topDownTransformerVisitor([\n    {\n        // Half the amount of all accounts and instructions in programs.\n        // The other half won't be visited on the way down.\n        select: '[programNode]',\n        transform: node =>\n            programNode({\n                ...node,\n                accounts: node.accounts.slice(0, Math.floor(node.accounts.length / 2)),\n                instructions: node.instructions.slice(0, Math.floor(node.instructions.length / 2)),\n            }),\n    },\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating RemainderCountNode in TypeScript\nDESCRIPTION: Example showing how to create a basic RemainderCountNode instance using the helper function.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/countNodes/RemainderCountNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = remainderCountNode();\n```\n\n----------------------------------------\n\nTITLE: Merging Multiple RenderMaps\nDESCRIPTION: Demonstration of merging multiple RenderMap instances using the mergeWith method.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/renderers-core/README.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst renderMapA = new RenderMap().add('programs/programA.ts', 'export type ProgramA = { /* ... */ }');\nconst renderMapB = new RenderMap().add('programs/programB.ts', 'export type ProgramB = { /* ... */ }');\nconst renderMapC = new RenderMap().mergeWith(renderMapA, renderMapB);\n```\n\n----------------------------------------\n\nTITLE: Installing @codama/renderers Package with pnpm\nDESCRIPTION: Command to install the @codama/renderers package using the pnpm package manager. This package provides access to all available renderers for Codama IDLs.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/renderers/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm install @codama/renderers\n```\n\n----------------------------------------\n\nTITLE: Trait Overrides Configuration\nDESCRIPTION: Example of overriding default traits for specific types\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/renderers-rust/README.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst traitOptions = {\n    overrides: {\n        myCustomType: ['Clone', 'my::custom::Trait', 'my::custom::OtherTrait'],\n        myTypeWithNoTraits: [],\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Node Deletion Using Visitor Pattern\nDESCRIPTION: Shows how to use deleteNodesVisitor to remove specific nodes from the tree.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/visitors-core/README.md#2025-04-19_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\n// Deletes all account nodes named \"mint\" and all number type nodes.\nconst visitor = deleteNodesVisitor(['[accountNode]mint', '[numberTypeNode]']);\n```\n\n----------------------------------------\n\nTITLE: Creating an EnumTupleVariantTypeNode with the Helper Function in TypeScript\nDESCRIPTION: Demonstrates how to use the enumTupleVariantTypeNode helper function to create a node that represents an enum variant with tuple data. This example creates a 'coordinates' variant with a tuple of two u32 numbers.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/typeNodes/EnumTupleVariantTypeNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = enumTupleVariantTypeNode('coordinates', tupleTypeNode([numberTypeNode('u32'), numberTypeNode('u32')]));\n\n```\n\n----------------------------------------\n\nTITLE: Generating Unique Hash String for AST Nodes in TypeScript\nDESCRIPTION: The getUniqueHashStringVisitor function creates a unique string representation of AST nodes that can be used to generate a hash. This is useful for comparing node content.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/visitors-core/README.md#2025-04-19_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nconst visitor = getUniqueHashStringVisitor();\nconst result = visit(tupleTypeNode([numberTypeNode('u32'), publicKeyTypeNode()]), visitor);\n// ^ '{\"items\":[{\"endian\":\"le\",\"format\":\"u32\",\"kind\":\"numberTypeNode\"},{\"kind\":\"publicKeyTypeNode\"}],\"kind\":\"tupleTypeNode\"}'\n```\n\n----------------------------------------\n\nTITLE: Defining Available ContextualValueNode Types in Markdown\nDESCRIPTION: A structured list of all available concrete implementations of the ContextualValueNode type helper, including links to their detailed documentation.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/contextualValueNodes/README.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# `ContextualValueNode` (abstract)\n\nThe `ContextualValueNode` type helper represents all the available contextual value nodes. Note that `ContextualValueNode` is a type alias and cannot be used directly as a node. Instead you may use one of the following nodes:\n\n- [`AccountBumpValueNode`](./AccountBumpValueNode.md)\n- [`AccountValueNode`](./AccountValueNode.md)\n- [`ArgumentValueNode`](./ArgumentValueNode.md)\n- [`ConditionalValueNode`](./ConditionalValueNode.md)\n- [`IdentityValueNode`](./IdentityValueNode.md)\n- [`PayerValueNode`](./PayerValueNode.md)\n- [`PdaValueNode`](./PdaValueNode.md)\n- [`ProgramIdValueNode`](./ProgramIdValueNode.md)\n- [`ResolverValueNode`](./ResolverValueNode.md)\n```\n\n----------------------------------------\n\nTITLE: Asserting Nested Type Node Kind in TypeScript\nDESCRIPTION: Shows usage of assertIsNestedTypeNode() to validate the final TypeNode kind with thrown errors on failed assertions. Supports single kind or array of kinds.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/typeNodes/NestedTypeNode.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst nestedNode = fixedSizeTypeNode(stringTypeNode('utf8'), 10);\n\nassertIsNestedTypeNode(nestedNode, 'stringTypeNode'); // Ok\nassertIsNestedTypeNode(nestedNode, 'numberTypeNode'); // Throws an error\nassertIsNestedTypeNode(nestedNode, ['stringTypeNode', 'numberTypeNode']); // Ok\n```\n\n----------------------------------------\n\nTITLE: Node Selector Pattern Examples\nDESCRIPTION: Demonstrates various node selection patterns using the NodeSelector syntax.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/visitors-core/README.md#2025-04-19_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\n'[accountNode]';\n// Matches any `AccountNode`.\n\n'mint';\n// Matches any node named \"mint\".\n\n'[accountNode]mint';\n// Matches any `AccountNode` named \"mint\".\n\n'[programNode]token.[accountNode]mint';\n// Matches any `AccountNode` named \"mint\" within a `ProgramNode` named \"token\".\n\n'[programNode]token.*';\n// Matches any node within a `ProgramNode` named \"token\" (excluding the program node itself).\n\n'token.[structTypeNode].amount';\n// Matches any node named \"amount\" within a `StructTypeNode` within any node named \"token\".\n```\n\n----------------------------------------\n\nTITLE: Creating a HiddenPrefixTypeNode with number type and bytes prefix\nDESCRIPTION: Helper function example showing how to create a HiddenPrefixTypeNode that wraps a u32 number type with a 0xFFFF bytes prefix.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/typeNodes/HiddenPrefixTypeNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = hiddenPrefixTypeNode(numberTypeNode('u32'), [\n    constantValueNode(bytesTypeNode(), bytesValueNode('base16', 'ffff')),\n]);\n```\n\n----------------------------------------\n\nTITLE: NodeStack Path Management\nDESCRIPTION: Shows how to save and restore multiple node paths using pushPath and popPath methods.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/visitors-core/README.md#2025-04-19_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n// Save the current path and push a new path.\nstack.pushPath([rootNode, programNode, linkableNode]);\n\n// Pop the current path and restore the previous path.\nconst previousPath = stack.popPath();\n```\n\n----------------------------------------\n\nTITLE: Using ArgumentValueNode as a default value in an instruction definition\nDESCRIPTION: Example showing how to reference one argument as the default value for another argument within an instruction definition. This demonstrates the practical use of ArgumentValueNode for creating relationships between arguments.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/contextualValueNodes/ArgumentValueNode.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninstructionNode({\n    name: 'mint',\n    arguments: [\n        instructionArgumentNode({\n            name: 'amount',\n            type: numberTypeNode('u64'),\n        }),\n        instructionArgumentNode({\n            name: 'amountToDelegate',\n            type: numberTypeNode('u64'),\n            defaultValue: argumentValueNode('amount'),\n        }),\n        // ...\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Main Codama Package with pnpm\nDESCRIPTION: Alternative installation command for the main codama package, which includes @codama/nodes. This is mentioned in a note explaining that @codama/nodes is already included in the main package.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/README.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm install codama\n```\n\n----------------------------------------\n\nTITLE: Using ByteSizeVisitor with NodeStack\nDESCRIPTION: Shows how to use a shared NodeStack instance across multiple visitors including getByteSizeVisitor.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/visitors-core/README.md#2025-04-19_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nconst stack = new NodeStack();\nconst byteSizeVisitor = getByteSizeVisitor(..., { stack });\n\nconst visitor = pipe(\n    voidVisitor(),\n    v => tapVisitor(v, 'definedTypeNode', node => {\n        const byteSize = visit(node, byteSizeVisitor);\n        console.log(`The byte size of ${node.name} is ${byteSize}`);\n    }),\n    v => recordNodeStackVisitor(v, stack)\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a HiddenSuffixTypeNode with u32 Number and Hex Suffix\nDESCRIPTION: Example of creating a HiddenSuffixTypeNode that appends the constant hex value 0xFFFF after a u32 number. When encoding the value 42, it produces the byte sequence 0x2A000000FFFF.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/typeNodes/HiddenSuffixTypeNode.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nhiddenSuffixTypeNode(numberTypeNode('u32'), [constantValueNode(bytesTypeNode(), bytesValueNode('base16', 'ffff'))]);\n\n// 42 => 0x2A000000FFFF\n```\n\n----------------------------------------\n\nTITLE: NodeStack Path Construction Example\nDESCRIPTION: Demonstrates how to build a path to a specific node using NodeStack's push method.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/visitors-core/README.md#2025-04-19_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nconst stack = new NodeStack()\n    .push(node) // -> definedTypeNode.\n    .push(node.type) // -> tupleTypeNode.\n    .push(node.type.items[0]); // -> numberTypeNode.\n```\n\n----------------------------------------\n\nTITLE: Creating a Fixed-Size Account in TypeScript\nDESCRIPTION: Example demonstrating how to create a token account with a fixed size of 72 bytes. It includes mint, owner, and amount fields with a size discriminator.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/AccountNode.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = accountNode({\n    name: 'token',\n    data: structTypeNode([\n        structFieldTypeNode({ name: 'mint', type: publicKeyTypeNode() }),\n        structFieldTypeNode({ name: 'owner', type: publicKeyTypeNode() }),\n        structFieldTypeNode({ name: 'amount', type: numberTypeNode('u64') }),\n    ]),\n    discriminators: [sizeDiscriminatorNode(72)],\n    size: 72,\n});\n```\n\n----------------------------------------\n\nTITLE: Installing JavaScript Renderer Package\nDESCRIPTION: Command to install the @codama/renderers-js package using pnpm package manager\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/renderers-js/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm install @codama/renderers-js\n```\n\n----------------------------------------\n\nTITLE: Intercepting First Visit Events in TypeScript\nDESCRIPTION: Example of using interceptFirstVisitVisitor to only intercept the first visit of a node. This captures events only for the top-level node, not for its children.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/visitors-core/README.md#2025-04-19_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst events: string[] = [];\nconst visitor = interceptFirstVisitVisitor(voidVisitor(), (node, next) => {\n    events.push(`down:${node.kind}`);\n    next(node);\n    events.push(`up:${node.kind}`);\n});\n\nvisit(tupleTypeNode([numberTypeNode('u32'), publicKeyTypeNode()]), visitor);\n// events === [\n//     'down:tupleTypeNode',\n//     'up:tupleTypeNode',\n// ]\n```\n\n----------------------------------------\n\nTITLE: Creating ConstantDiscriminatorNode with UTF-8 String\nDESCRIPTION: Demonstrates creating a ConstantDiscriminatorNode using a UTF-8 string constant value at offset 64.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/discriminatorNodes/ConstantDiscriminatorNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = constantDiscriminatorNode(constantValueNodeFromString('utf8', 'Hello'), 64);\n```\n\n----------------------------------------\n\nTITLE: Abstract LinkNode Type Reference Documentation\nDESCRIPTION: Documentation of the abstract LinkNode type and its concrete implementations including AccountLinkNode, DefinedTypeLinkNode, InstructionAccountLinkNode, InstructionArgumentLinkNode, InstructionLinkNode, PdaLinkNode, and ProgramLinkNode.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/linkNodes/README.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# `LinkNode` (abstract)\n\nThe `LinkNode` type helper represents all nodes that link to other nodes. Note that `LinkNode` is a type alias and cannot be used directly as a node. Instead you may use one of the following nodes:\n\n- [`AccountLinkNode`](./AccountLinkNode.md)\n- [`DefinedTypeLinkNode`](./DefinedTypeLinkNode.md)\n- [`InstructionAccountLinkNode`](./InstructionAccountLinkNode.md)\n- [`InstructionArgumentLinkNode`](./InstructionArgumentLinkNode.md)\n- [`InstructionLinkNode`](./InstructionLinkNode.md)\n- [`PdaLinkNode`](./PdaLinkNode.md)\n- [`ProgramLinkNode`](./ProgramLinkNode.md)\n```\n\n----------------------------------------\n\nTITLE: Fixed optional u32 number in TypeScript\nDESCRIPTION: Example of creating a fixed optional u32 number. Shows the encoding patterns for both None and Some states, demonstrating how the fixed option ensures consistent size by padding None values.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/typeNodes/OptionTypeNode.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\noptionTypeNode(numberTypeNode('u32'), { fixed: true });\n\n// None     => 0x0000000000\n// Some(42) => 0x012A000000\n```\n\n----------------------------------------\n\nTITLE: Unwrapping Tuple Enums with Single Struct in Codama IDL\nDESCRIPTION: Transforms EnumTupleVariantTypeNodes that contain a single StructTypeNode item into EnumStructVariantTypeNodes. Can be configured to transform all matching variants or specific ones by name.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/visitors/README.md#2025-04-19_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\ncodama.update(unwrapTupleEnumWithSingleStructVisitor());\n```\n\n----------------------------------------\n\nTITLE: Intercepting Visitor Events in TypeScript\nDESCRIPTION: Example of using interceptVisitor to wrap every visiting function and capture events. This intercepts a voidVisitor and captures down/up events when visiting nodes.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/visitors-core/README.md#2025-04-19_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst events: string[] = [];\nconst visitor = interceptVisitor(voidVisitor(), (node, next) => {\n    events.push(`down:${node.kind}`);\n    next(node);\n    events.push(`up:${node.kind}`);\n});\n\nvisit(tupleTypeNode([numberTypeNode('u32'), publicKeyTypeNode()]), visitor);\n// events === [\n//     'down:tupleTypeNode',\n//     'down:numberTypeNode',\n//     'up:numberTypeNode',\n//     'down:publicKeyTypeNode',\n//     'up:publicKeyTypeNode',\n//     'up:tupleTypeNode',\n// ]\n```\n\n----------------------------------------\n\nTITLE: Installing @codama/dynamic-codecs Package\nDESCRIPTION: Command to install the @codama/dynamic-codecs package using pnpm. This package is not included in the main codama library package.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/dynamic-codecs/README.md#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm install @codama/dynamic-codecs\n```\n\n----------------------------------------\n\nTITLE: Creating an IdentityValueNode using the helper function in TypeScript\nDESCRIPTION: A simple example showing how to create an IdentityValueNode object using the identityValueNode() helper function.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/contextualValueNodes/IdentityValueNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = identityValueNode();\n```\n\n----------------------------------------\n\nTITLE: Creating InstructionArgumentNode with Default Value in TypeScript\nDESCRIPTION: Example showing how to create an InstructionArgumentNode with a default value using the optional strategy.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/InstructionArgumentNode.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninstructionArgumentNode({\n    name: 'amount',\n    type: numberTypeNode('u64'),\n    defaultValue: numberValueNode(0),\n});\n```\n\n----------------------------------------\n\nTITLE: Installing @codama/renderers-js-umi Package with pnpm\nDESCRIPTION: Command to install the @codama/renderers-js-umi package using pnpm package manager. This is the first step to use the JavaScript Umi renderer.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/renderers-js-umi/README.md#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm install @codama/renderers-js-umi\n```\n\n----------------------------------------\n\nTITLE: Updating Instructions in Codama IDL\nDESCRIPTION: Updates or deletes InstructionNodes based on a configuration object. Supports renaming instructions, modifying instruction accounts (renaming, setting defaults, updating signer status, marking as optional), updating arguments, and deleting instructions entirely.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/visitors/README.md#2025-04-19_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\ncodama.update(\n    updateInstructionsVisitor({\n        send: {\n            // Rename the 'send' instruction to 'transfer'.\n            name: 'transfer',\n            accounts: {\n                // Rename the 'owner' instruction account to 'authority'.\n                owner: { name: 'authority' },\n                // Set a default value for the 'associatedToken' instruction account.\n                associatedToken: { defaultValue: pdaValueNode('associatedToken') },\n                // Update the signer status of the 'payer' instruction account to `true`.\n                payer: { isSigner: true },\n                // Mark the 'mint' instruction account as optional.\n                mint: { isOptional: true },\n            },\n            arguments: {\n                // Set a default value for the 'amount' instruction argument to 1.\n                amount: { defaultValue: numberValueNode(1) },\n                // Rename the 'decimals' instruction argument to 'mintDecimals'.\n                decimals: { name: 'mintDecimals' },\n            },\n        },\n        burn: {\n            // Delete the 'burn' instruction.\n            delete: true,\n        },\n    }),\n);\n```\n\n----------------------------------------\n\nTITLE: ValidationItem type definition in TypeScript\nDESCRIPTION: Type definition for ValidationItem which describes validation information about a node in Codama IDL, including level, message, node, and path properties.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/validators/README.md#2025-04-19_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\ntype ValidationItem = {\n    // The level of importance of a validation item.\n    level: 'debug' | 'trace' | 'info' | 'warn' | 'error';\n    // A human-readable message describing the issue or information.\n    message: string;\n    // The node that the validation item is related to.\n    node: Node;\n    // The path of nodes that led to the node above (including the node itself).\n    path: NodePath;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating DefinedTypeLinkNode Instances in TypeScript\nDESCRIPTION: Demonstrates how to create a DefinedTypeLinkNode object using the helper function. The function accepts the name of the defined type to reference, and an optional program parameter when referencing types from another program.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/linkNodes/DefinedTypeLinkNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = definedTypeLinkNode('myDefinedType');\nconst nodeFromAnotherProgram = definedTypeLinkNode('myDefinedType', 'myOtherProgram');\n```\n\n----------------------------------------\n\nTITLE: Installing the main codama package\nDESCRIPTION: Command to install the main codama package, which includes @codama/validators.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/validators/README.md#2025-04-19_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm install codama\n```\n\n----------------------------------------\n\nTITLE: Setting Number Wrappers in TypeScript\nDESCRIPTION: Example of using setNumberWrappersVisitor to wrap specific number types with custom wrappers.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/visitors/README.md#2025-04-19_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ncodama.update(\n    setNumberWrappersVisitor({\n        lamports: { kind: 'SolAmount' },\n        timestamp: { kind: 'DateTime' },\n        percent: { decimals: 2, kind: 'Amount', unit: '%' },\n    }),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating an EnumEmptyVariantTypeNode using the helper function in TypeScript\nDESCRIPTION: Example showing how to use the enumEmptyVariantTypeNode helper function to create a new EnumEmptyVariantTypeNode instance with a specified name. This function simplifies the creation of empty enum variants.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/typeNodes/EnumEmptyVariantTypeNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = enumEmptyVariantTypeNode('myVariantName');\n```\n\n----------------------------------------\n\nTITLE: Installing Codama Visitors Package via pnpm\nDESCRIPTION: Command to install the @codama/visitors package using pnpm package manager.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/visitors/README.md#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm install @codama/visitors\n```\n\n----------------------------------------\n\nTITLE: Flattening Struct Fields in TypeScript\nDESCRIPTION: Example of using flattenStructVisitor to flatten nested struct fields for specified structs.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/visitors/README.md#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ncodama.update(\n    flattenStructVisitor({\n        counter: ['data', 'config'],\n        escrow: '*',\n    }),\n);\n```\n\n----------------------------------------\n\nTITLE: Illustrating Buffer Offset Example in Hexadecimal\nDESCRIPTION: This code snippet shows a hexadecimal buffer representation to illustrate the initial pre-offset and post-offset positions for the PostOffsetTypeNode.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/typeNodes/PostOffsetTypeNode.md#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n0x00000099FF000000;\n        | └-- Initial post-offset\n        └-- Pre-offset\n```\n\n----------------------------------------\n\nTITLE: Creating an ArrayTypeNode Using Helper Function in TypeScript\nDESCRIPTION: Demonstrates how to create an ArrayTypeNode using the arrayTypeNode helper function with a publicKeyTypeNode and a prefixedCountNode containing a u32 number type.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/typeNodes/ArrayTypeNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = arrayTypeNode(publicKeyTypeNode(), prefixedCountNode(numberTypeNode('u32')));\n```\n\n----------------------------------------\n\nTITLE: Using RenderMap with Visitors\nDESCRIPTION: Examples of using visitors with RenderMap for code generation, including basic and wrapped visitor implementations.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/renderers-core/README.md#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getRenderMapVisitor } from '@codama/renderers-js';\n\nconst renderMap = codama.accept(getRenderMapVisitor());\n\ncodama.accept(writeRenderMapVisitor(getRenderMapVisitor(), 'src/generated'));\n\ncodama.accept(renderVisitor('src/generated'));\n```\n\n----------------------------------------\n\nTITLE: ValueNode Abstract Type Reference List in Markdown\nDESCRIPTION: A comprehensive list of all concrete implementations of the ValueNode type, presented as markdown links to their respective documentation pages.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/valueNodes/README.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [`ArrayValueNode`](./ArrayValueNode.md)\n- [`BytesValueNode`](./BytesValueNode.md)\n- [`BooleanValueNode`](./BooleanValueNode.md)\n- [`ConstantValueNode`](./ConstantValueNode.md)\n- [`EnumValueNode`](./EnumValueNode.md)\n- [`MapValueNode`](./MapValueNode.md)\n- [`NoneValueNode`](./NoneValueNode.md)\n- [`NumberValueNode`](./NumberValueNode.md)\n- [`PublicKeyValueNode`](./PublicKeyValueNode.md)\n- [`SetValueNode`](./SetValueNode.md)\n- [`SomeValueNode`](./SomeValueNode.md)\n- [`StringValueNode`](./StringValueNode.md)\n- [`StructValueNode`](./StructValueNode.md)\n- [`TupleValueNode`](./TupleValueNode.md)\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for DiscriminatorNode Type\nDESCRIPTION: Documentation explaining the DiscriminatorNode abstract type and its concrete implementations: ConstantDiscriminatorNode, FieldDiscriminatorNode, and SizeDiscriminatorNode. This type helper is used for discriminating between different blocks of data like accounts and instructions.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/discriminatorNodes/README.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# `DiscriminatorNode` (abstract)\n\nThe `DiscriminatorNode` type helper represents all available strategies that help distinguish blocks of data — such as accounts and instructions. Note that `DiscriminatorNode` is a type alias and cannot be used directly as a node. Instead you may use one of the following nodes:\n\n- [`ConstantDiscriminatorNode`](./ConstantDiscriminatorNode.md)\n- [`FieldDiscriminatorNode`](./FieldDiscriminatorNode.md)\n- [`SizeDiscriminatorNode`](./SizeDiscriminatorNode.md)\n```\n\n----------------------------------------\n\nTITLE: Node Type Assertion in TypeScript\nDESCRIPTION: Shows how to use assertIsNode function to assert node types. Throws an error for non-matching nodes or null/undefined values.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/README.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nassertIsNode(stringTypeNode('utf8'), 'stringTypeNode'); // Ok.\nassertIsNode(stringTypeNode('utf8'), 'numberTypeNode'); // Throws an error.\nassertIsNode(stringTypeNode('utf8'), ['stringTypeNode', 'numberTypeNode']); // Ok.\nassertIsNode(null, 'stringTypeNode'); // Throws an error.\nassertIsNode(undefined, 'stringTypeNode'); // Throws an error.\n```\n\n----------------------------------------\n\nTITLE: Installing @codama/nodes Package with pnpm\nDESCRIPTION: Command to install the @codama/nodes package using pnpm. This package defines various nodes that make up the Codama IDL and provides types and helper functions.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm install @codama/nodes\n```\n\n----------------------------------------\n\nTITLE: Installing Codama Nodes From Anchor Package with pnpm\nDESCRIPTION: Command to install the @codama/nodes-from-anchor package using pnpm package manager. This package is not included in the main codama library and needs to be installed separately.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes-from-anchor/README.md#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm install @codama/nodes-from-anchor\n```\n\n----------------------------------------\n\nTITLE: Type Node Reference List in Markdown\nDESCRIPTION: A markdown list of all available type nodes that can be used in place of the abstract TypeNode, including links to their respective documentation pages.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/typeNodes/README.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [`AmountTypeNode`](./AmountTypeNode.md)\n- [`ArrayTypeNode`](./ArrayTypeNode.md)\n- [`BooleanTypeNode`](./BooleanTypeNode.md)\n- [`BytesTypeNode`](./BytesTypeNode.md)\n- [`DateTimeTypeNode`](./DateTimeTypeNode.md)\n- [`DefinedTypeLinkNode`](../linkNodes/DefinedTypeLinkNode.md)\n- [`EnumTypeNode`](./EnumTypeNode.md)\n- [`FixedSizeTypeNode`](./FixedSizeTypeNode.md)\n- [`HiddenPrefixTypeNode`](./HiddenPrefixTypeNode.md)\n- [`HiddenSuffixTypeNode`](./HiddenSuffixTypeNode.md)\n- [`MapTypeNode`](./MapTypeNode.md)\n- [`NumberTypeNode`](./NumberTypeNode.md)\n- [`OptionTypeNode`](./OptionTypeNode.md)\n- [`PostOffsetTypeNode`](./PostOffsetTypeNode.md)\n- [`PreOffsetTypeNode`](./PreOffsetTypeNode.md)\n- [`PublicKeyTypeNode`](./PublicKeyTypeNode.md)\n- [`RemainderOptionTypeNode`](./RemainderOptionTypeNode.md)\n- [`SentinelTypeNode`](./SentinelTypeNode.md)\n- [`SetTypeNode`](./SetTypeNode.md)\n- [`SizePrefixTypeNode`](./SizePrefixTypeNode.md)\n- [`SolAmountTypeNode`](./SolAmountTypeNode.md)\n- [`StringTypeNode`](./StringTypeNode.md)\n- [`StructTypeNode`](./StructTypeNode.md)\n- [`TupleTypeNode`](./TupleTypeNode.md)\n- [`ZeroableOptionTypeNode`](./ZeroableOptionTypeNode.md)\n```\n\n----------------------------------------\n\nTITLE: Trait Options Configuration\nDESCRIPTION: Example of configuring default traits for Rust type generation\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/renderers-rust/README.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst traitOptions = {\n    baseDefaults: [\n        'borsh::BorshSerialize',\n        'borsh::BorshDeserialize',\n        'serde::Serialize',\n        'serde::Deserialize',\n        'Clone',\n        'Debug',\n        'Eq',\n        'PartialEq',\n    ],\n    dataEnumDefaults: [],\n    scalarEnumDefaults: ['Copy', 'PartialOrd', 'Hash', 'num_derive::FromPrimitive'],\n    structDefaults: [],\n};\n```\n\n----------------------------------------\n\nTITLE: Alternative Installation Methods for Codama\nDESCRIPTION: Commands for installing either @codama/nodes or the main codama library, both of which include the node-types package as a dependency.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/node-types/README.md#2025-04-19_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm install @codama/nodes\npnpm install codama\n```\n\n----------------------------------------\n\nTITLE: Installing Codama Renderers Core Package\nDESCRIPTION: Command to install the @codama/renderers-core package using pnpm package manager.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/renderers-core/README.md#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm install @codama/renderers-core\n```\n\n----------------------------------------\n\nTITLE: Installing Codama via Package Manager\nDESCRIPTION: Command to install the Codama package using pnpm package manager.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/library/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm install codama\n```\n\n----------------------------------------\n\nTITLE: SomeNode Example Usage with Currency Values - TypeScript\nDESCRIPTION: Example showing the conversion of currency values using someNode function. Demonstrates how different USD values are converted to hexadecimal representations.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/_template.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nsomeNode(TODO);\n\n// 0.01 USD   => 0x01000000\n// 10 USD     => 0x03E80000\n// 400.60 USD => 0x9C7C0000\n```\n\n----------------------------------------\n\nTITLE: Installing @codama/validators package\nDESCRIPTION: Command to install the @codama/validators package using pnpm package manager.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/validators/README.md#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm install @codama/validators\n```\n\n----------------------------------------\n\nTITLE: Installing Codama Errors Package\nDESCRIPTION: Command to install the @codama/errors package using pnpm package manager.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/errors/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm install @codama/errors\n```\n\n----------------------------------------\n\nTITLE: Installing Codama Dynamic Parsers Package\nDESCRIPTION: Installation command for adding the Codama dynamic parsers package to your project using pnpm.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/dynamic-parsers/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @codama/dynamic-parsers\n```\n\n----------------------------------------\n\nTITLE: Installing Codama Visitors Core Package\nDESCRIPTION: Command to install the @codama/visitors-core package using pnpm package manager.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/visitors-core/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm install @codama/visitors-core\n```\n\n----------------------------------------\n\nTITLE: Creating a SetValueNode using the helper function in TypeScript\nDESCRIPTION: Example of using the setValueNode helper function to create a new SetValueNode object containing three number values. This function takes an array of ValueNode objects as input and returns a SetValueNode instance.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/valueNodes/SetValueNode.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = setValueNode([numberValueNode(1), numberValueNode(2), numberValueNode(3)]);\n```\n\n----------------------------------------\n\nTITLE: Previous Version Dependency Updates in Markdown\nDESCRIPTION: Documents dependency updates for version 0.20.1 of the Codama project, referencing specific commit hashes and showing that @codama/errors and @codama/nodes were updated to version 0.20.1.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/visitors-core/CHANGELOG.md#2025-04-19_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- Updated dependencies [[`0dec0c8`](https://github.com/codama-idl/codama/commit/0dec0c8fff5e80fafc964416058e4ddf1db2bda0)]:\n    - @codama/errors@0.20.1\n    - @codama/nodes@0.20.1\n```\n\n----------------------------------------\n\nTITLE: Creating SomeNode Instance - TypeScript\nDESCRIPTION: Example demonstrating how to create a SomeNode object using the someNode helper function. The function takes a TODO input parameter.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/_template.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst node = someNode(TODO);\n```\n\n----------------------------------------\n\nTITLE: Representing New Account Creation in TypeScript\nDESCRIPTION: Creates an InstructionByteDeltaNode that represents the byte delta for creating a new token account, including the account header size by default.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/nodes/docs/InstructionByteDeltaNode.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninstructionByteDeltaNode(accountLinkNode('token'));\n```\n\n----------------------------------------\n\nTITLE: Installing Main Codama Package\nDESCRIPTION: Alternative installation command for the main Codama package which includes the errors package.\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/errors/README.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm install codama\n```\n\n----------------------------------------\n\nTITLE: Version Entries\nDESCRIPTION: Version history entries showing patch, minor and major changes\nSOURCE: https://github.com/codama-idl/codama/blob/main/packages/visitors/CHANGELOG.md#2025-04-19_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.2.11\n\n### Patch Changes\n\n- Updated dependencies [[`5071455`]]:\n    - @codama/visitors-core@1.2.11\n    - @codama/nodes@1.2.11\n    - @codama/errors@1.2.11\n```"
  }
]