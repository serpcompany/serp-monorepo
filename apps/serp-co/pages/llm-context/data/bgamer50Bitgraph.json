[
  {
    "owner": "bgamer50",
    "repo": "bitgraph",
    "content": "TITLE: Processing Questions with Graph Traversal and Neural Network\nDESCRIPTION: Processes questions by extracting relevant entities, performing graph traversals to find connected information, and using a GRetriever model to generate answers. The code includes timing measurements for performance analysis.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/examples/rag_demo.ipynb#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nent_match_limit = 4\nque_match_limit = 4\n\nout_limit_h0 = 4\nout_limit_h1 = 4\nin_limit_h0 = 4\nin_limit_h1 = 4\n\nfrom time import perf_counter\n\nfor i in range(3):\n    question = truth_df.question.iloc[i]\n    answer = truth_df.answer.iloc[i]\n    emb_q = getem(question)\n\n    vids_q = np.concatenate(\n        [\n            g.V().like('emb', [getem(ent['word'])], ent_match_limit).toArray()\n            for ent in ner(question)\n        ] + [\n            g.V().like('emb', [emb_q], que_match_limit).toArray()\n        ]\n    )\n    \n    # TODO control hops\n    start_time = perf_counter()\n    eids = g.V(vids_q)._union([\n        __().outE().order().by(__().inV().similarity('emb', [emb_q])).limit(4)._as('h0').inV(),\n        __().inE().order().by(__().outV().similarity('emb', [emb_q])).limit(4)._as('h0').outV(),\n    ])._union([\n        __().outE().order().by(__().inV().similarity('emb', [emb_q])).limit(4)._as('h1').inV(),\n        __().inE().order().by(__().outV().similarity('emb', [emb_q])).limit(4)._as('h1').outV(),\n    ])._union([__().select('h0'), __().select('h1')]).dedup().toArray()\n    end_time = perf_counter()\n\n    print('query time:', end_time - start_time)\n\n    out = graph.subgraph_coo(\n        eids\n    )\n\n    data = coo_to_data(out)\n    print(data)\n\n    loss = model(\n        question=[f'question: {question}\\nanswer:'],\n        x=data.x,\n        edge_index=data.edge_index,\n        batch=data.batch,\n        label=[answer],\n        edge_attr=None, # edge features\n        additional_text_context=None # additional context\n    )\n    print(loss)\n```\n\n----------------------------------------\n\nTITLE: Finding and Decoding Question-Related Vertices\nDESCRIPTION: Retrieves vertices related to the question by combining entity-based and question-based similarity searches, then decodes them to human-readable format. Uses CuPy for array concatenation.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/examples/rag_demo.ipynb#2025-04-17_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nvids_q = cupy.concatenate(\n    [\n        g.V().like('emb', [getem(ent['word'])], qp['entity_vertex_match_limit']).toArray()\n        for ent in ents\n    ] + [\n        g.V().like('emb', [emb_q], qp['question_vertex_match_limit']).toArray()\n    ]\n)\ndecode(vids_q)\n```\n\n----------------------------------------\n\nTITLE: Query Function Implementation\nDESCRIPTION: Implements search functionality to query the graph using embeddings and return relevant articles and sentences.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/examples/rag_demo.ipynb#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef query(search_query, lim=4):\n    qe = getem(search_query)\n    vids = g.V().like('emb', [qe], lim).toArray()\n\n    f = vids < len(titles)\n    article_ids = vids[f]\n    sentence_ids = vids[~f] - len(titles)\n\n    print('articles:', titles.iloc[article_ids.get()])\n    print('sentences:', sentences.iloc[sentence_ids.get()])\n```\n\n----------------------------------------\n\nTITLE: Executing Multi-Hop Graph Traversal and Decoding Results\nDESCRIPTION: Performs a multi-hop graph traversal starting from question-related vertices, with ordered traversals based on embedding similarity to the question. Combines results from different hops and deduplicates them, then decodes for readability.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/examples/rag_demo.ipynb#2025-04-17_snippet_42\n\nLANGUAGE: python\nCODE:\n```\nfrom pygremlinxx import GraphTraversal\n__ = lambda : GraphTraversal()\n\nvids = g.V(vids_q)._union([\n    __().out().order().by(__().similarity('emb', [emb_q])).limit(qp['hop_0_outgoing_limit'])._as('h0'),\n    __()._in().order().by(__().similarity('emb', [emb_q])).limit(qp['hop_0_incoming_limit'])._as('h0'),\n])._union([\n    __().out().order().by(__().similarity('emb', [emb_q])).limit(qp['hop_1_outgoing_limit'])._as('h1'),\n    __()._in().order().by(__().similarity('emb', [emb_q])).limit(qp['hop_1_incoming_limit'])._as('h1'),\n])._union([__().select('h0'), __().select('h1')]).dedup().toArray()\n\ndecode(vids)\n```\n\n----------------------------------------\n\nTITLE: Initializing Graph Retriever Model with GAT and LLM Components\nDESCRIPTION: Creates a Graph Retriever model by combining a Graph Attention Network (GAT) and a Language Model (LLM). The GAT processes graph embeddings, and the LLM handles text inputs, forming an integrated model for graph-based question answering.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/examples/rag_demo.ipynb#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom torch_geometric.nn import GRetriever, GAT\nfrom torch_geometric.nn.nlp import LLM\n\nllm = LLM(\n    model_name='TinyLlama/TinyLlama-1.1B-Chat-v0.1',\n    num_params=1,\n)\n\ngnn = GAT(\n    in_channels=300,\n    hidden_channels=256,\n    out_channels=300,\n    num_layers=4,\n    heads=4,\n)\n\nmodel = GRetriever(llm=llm, gnn=gnn, mlp_out_channels=2048)\n```\n\n----------------------------------------\n\nTITLE: Wiki Data Processing Function\nDESCRIPTION: Reads and processes wiki data from JSON files, handling mentions and creating graph edges. Manages sentence offsets and vertex mappings for the graph structure.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/examples/rag_demo.ipynb#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef read_wiki_data(fname, skip_empty=True):\n    df = cudf.read_json('/mnt/para_with_hyperlink.jsonl', lines=True)\n\n    mentions = df.mentions.explode()\n    mentions = mentions[~mentions.struct.field('sent_idx').isna()]\n    mentions = mentions[~mentions.struct.field('ref_ids').isna()]\n\n    slens = df.sentences.list.len().astype('int64')\n    slens[(slens==0)] = 1\n\n    df['sentence_offsets'] = cupy.concatenate([\n        cupy.array([0]),\n        slens.cumsum().values[:-1]\n    ])\n\n    mix = torch.as_tensor(\n        mentions.struct.field('ref_ids').list.get(0).astype('int64').values,\n        device='cuda'\n    )\n    ids = torch.as_tensor(df.id.astype('int64').values, device='cuda')\n    vals, inds = torch.sort(ids)\n\n    destinations_m = inds[torch.searchsorted(vals, mix)]\n    sources_m = torch.as_tensor(\n        mentions.struct.field('sent_idx').values + df.sentence_offsets[mentions.index].values + len(df),\n        device='cuda'\n    )\n\n    if skip_empty:\n        # Does not add vertices/edges for vertices with no embedding\n        f = destinations_m < len(df)\n        destinations_m = destinations_m[f]\n        sources_m = sources_m[f]\n        del f\n\n    eim = torch.stack([\n        torch.as_tensor(sources_m, device='cuda'),\n        torch.as_tensor(destinations_m, device='cuda'),\n    ])\n\n    sentences = df.sentences.explode().reset_index().rename({\"index\": 'article'},axis=1)\n\n    sources_s = sentences.index.values + len(df)\n    destinations_s = sentences.article.values\n    eis = torch.stack([\n        torch.as_tensor(sources_s, device='cuda'),\n        torch.as_tensor(destinations_s, device='cuda'),\n    ])\n\n    eix = torch.concatenate([eim,eis],axis=1)\n    del eis\n    del eim\n\n    return eix, df.title.to_pandas(), sentences.sentences.to_pandas()\n```\n\n----------------------------------------\n\nTITLE: Initializing BitGraph System with Dependencies\nDESCRIPTION: Sets up the BitGraph environment with RMM memory management and required dependencies including CUDA integration for PyTorch and CuPy. Initializes memory allocators to prevent fragmentation.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/examples/rag_demo.ipynb#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport argparse\nimport sys, os\nimport re\nimport warnings\n\nimport numpy as np\n\nimport rmm\nfrom rmm.allocators.torch import rmm_torch_allocator\nfrom rmm.allocators.cupy import rmm_cupy_allocator\n\n# Initialize shared allocator to prevent fragmentation\nrmm.reinitialize(devices=0, pool_allocator=False, managed_memory=False)\n\nimport cupy\ncupy.cuda.set_allocator(rmm_cupy_allocator)\n\nimport torch\ntorch.cuda.change_current_allocator(rmm_torch_allocator)\n```\n\n----------------------------------------\n\nTITLE: Creating and Initializing BitGraph with Vertices and Edges in Python\nDESCRIPTION: This snippet creates a BitGraph instance, adds vertices and edges, and sets vertex embeddings. It uses NumPy arrays for source, destination, and embedding data.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/examples/similarity.ipynb#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nsrc = np.array([0, 1, 2, 3, 4, 5, 6])\ndst = np.array([5, 4, 3, 2, 1, 6, 0])\nemb = np.array([[1.1, 2.1], [2.2, 4.4], [3.3, 5.5], [4.4, 1.6], [5.5, 4.1], [6.6, 3.0], [-7.7, 9.9]], dtype='float32')\n\ngraph = BitGraph(\n    \"int64\",\n    \"int64\",\n    \"DEVICE\",\n    \"PINNED\",\n    \"DEVICE\",\n)\n\ngraph.add_vertices(7)\ngraph.add_edges(src, dst, 'link')\ngraph.set_vertex_embeddings('emb', np.array([],dtype='int64'), emb)\ng = graph.traversal()\n```\n\n----------------------------------------\n\nTITLE: Graph Edge Construction and Embedding Loading\nDESCRIPTION: Processes mentions and sentences data to construct graph edges and loads pre-trained embeddings into the graph\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/examples/advanced_rag.ipynb#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport torch\nimport cupy\nimport cudf\n\ndf = cudf.read_json('/mnt/para_with_hyperlink.jsonl', lines=True)\nmentions = df.mentions.explode()\nmentions = mentions[~mentions.struct.field('sent_idx').isna()]\nmentions = mentions[~mentions.struct.field('ref_ids').isna()]\n\ndf['sentence_offsets'] = cupy.concatenate([\n    cupy.array([0]),\n    df.sentences.list.len().cumsum().values[:-1]\n])\n\ndestinations_m = mentions.struct.field('ref_ids').list.get(0).astype('int64').values\nsources_m = mentions.struct.field('sent_idx').values + df.sentence_offsets[mentions.index].values + len(df)\neim = torch.stack([\n    torch.as_tensor(sources_m, device='cuda'),\n    torch.as_tensor(destinations_m, device='cuda'),\n])\n```\n\n----------------------------------------\n\nTITLE: Processing Mentions and Reference IDs with PyTorch\nDESCRIPTION: Processes mention data from a DataFrame, extracts reference IDs, and performs sorting and searching operations using PyTorch tensors on GPU. The code filters invalid mentions and creates mappings between mentions and their references.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/examples/rag_demo.ipynb#2025-04-17_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport torch\nmentions = df.mentions.explode()\nmentions = mentions[~mentions.struct.field('sent_idx').isna()]\nmentions = mentions[~mentions.struct.field('ref_ids').isna()]\n\nmix = torch.as_tensor(\n    mentions.struct.field('ref_ids').list.get(0).astype('int64').values,\n    device='cuda'\n)\nids = torch.as_tensor(df.id.astype('int64').values, device='cuda')\nvals, inds = torch.sort(ids)\n\n\ndestinations_m = inds[torch.searchsorted(vals, mix)]\ndestinations_m\n```\n\n----------------------------------------\n\nTITLE: Complex Graph Traversal with Unions and Aliasing\nDESCRIPTION: Demonstrates a complex graph traversal pattern that uses vertex selection, bidirectional edge traversal, deduplication, aliasing, and union operations to navigate through the graph.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/examples/rag_demo.ipynb#2025-04-17_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom pygremlinxx import GraphTraversal\n__ = lambda : GraphTraversal()\n\ng.V([0, ]).bothE().dedup()._as('h0').inV().bothE().dedup()._union([__().select('h0'), __().identity()]).dedup().toArray()\n```\n\n----------------------------------------\n\nTITLE: Finding Vertices Similar to Question Embedding\nDESCRIPTION: Retrieves vertices from the graph that have embeddings similar to the question embedding, limited by the question_vertex_match_limit parameter.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/examples/rag_demo.ipynb#2025-04-17_snippet_34\n\nLANGUAGE: python\nCODE:\n```\ng.V().like('emb', [emb_q], qp['question_vertex_match_limit']).toArray()\n```\n\n----------------------------------------\n\nTITLE: Executing Complex Graph Traversal with BitGraph\nDESCRIPTION: This snippet demonstrates a complex graph traversal operation to extract a subgraph from a BitGraph instance. It uses a traversal pattern that selects edges from specified vertices and performs a union operation with deduplication.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/examples/rag_demo.ipynb#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# The subgraph step does not work due to nanobind limitations, so use this way instead\nout = graph.subgraph_coo(\n    g.V(vids).bothE().dedup()._as('h0').inV().bothE().dedup()._union([__().select('h0'), __().identity()]).dedup().toArray()\n)\n```\n\n----------------------------------------\n\nTITLE: Performing Similarity Query on BitGraph in Python\nDESCRIPTION: This snippet demonstrates how to perform a similarity query on the graph using the 'emb' embedding and a specific vector.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/examples/similarity.ipynb#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ng.V().similarity('emb', [np.array([1.1, 2.1], dtype='float32')]).toArray()\n```\n\n----------------------------------------\n\nTITLE: NER Pipeline Setup and Entity Extraction\nDESCRIPTION: Configures a BERT-based named entity recognition pipeline using the transformers library and defines an extraction function to process entity lists\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/examples/advanced_rag.ipynb#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom transformers import AutoTokenizer, AutoModelForTokenClassification\nfrom transformers import pipeline\n\ndef extract(entsList):\n    words = []\n    for ents in entsList:\n        row = []\n        for ent in ents:\n            row.append(ent['word'])\n        words.append(row)\n    return words\n\ntokenizer = AutoTokenizer.from_pretrained(\"dslim/bert-large-NER\")\nmodel = AutoModelForTokenClassification.from_pretrained(\"dslim/bert-large-NER\")\n\nner = pipeline(\"ner\", model=model, tokenizer=tokenizer, device=0, aggregation_strategy=\"max\")\n\nents = extract(ner(['What is the capital of Afghanistan?', 'Who directed Pulp Fiction?', 'What is the capital of France?', 'What English settlement was John Smith associated with?', 'Who were some key historical figures during the Victorian Era?', 'Who is the current president of the Teamsters union?', 'How do the populist platforms of Theodore Roosevelt and Andrew Jackson differ?', 'How were the 1950s in New York City different from the 1980s?', 'How large are the biggest species of tortoise?']))\n\nprint('')\nprint('Extracted Entity Words:')\nfor ent in ents:\n    print(ent)\n```\n\n----------------------------------------\n\nTITLE: GPU-Accelerated Similarity Search\nDESCRIPTION: Performs similarity search using CUDA-accelerated operations with cuDF and cuML.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/examples/rag.ipynb#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom cuml.metrics.pairwise_distances import pairwise_distances\nv = cupy.array(nlp('Afghanistan').vector).reshape((1,300))\n\nmatches = pairwise_distances(\n    s,\n    v\n).sort_values()[:10]\nmatches\n```\n\n----------------------------------------\n\nTITLE: Named Entity Recognition Pipeline\nDESCRIPTION: Sets up a BERT-based Named Entity Recognition pipeline using the Transformers library for entity extraction from text.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/examples/rag_demo.ipynb#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom transformers import AutoTokenizer, AutoModelForTokenClassification\nfrom transformers import pipeline\n\ndef extract(entsList):\n    words = []\n    for ents in entsList:\n        row = []\n        for ent in ents:\n            row.append(ent['word'])\n        words.append(row)\n    return words\n\ntokenizer = AutoTokenizer.from_pretrained(\"dslim/bert-large-NER\")\nmodel = AutoModelForTokenClassification.from_pretrained(\"dslim/bert-large-NER\")\n\nner = pipeline(\"ner\", model=model, tokenizer=tokenizer, device=0, aggregation_strategy=\"max\")\n```\n\n----------------------------------------\n\nTITLE: Initializing BitGraph and Adding Test Data\nDESCRIPTION: Sets up a BitGraph instance, defines the data types and memory locations, and adds test vertices and edges. The code creates a sample graph with 6 vertices and 10 edges, then initializes a traversal object.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/examples/rag_demo.ipynb#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport torch\n\nimport sys\nsys.path.append('/mnt/bitgraph')\nsys.path.append('/mnt/gremlin++')\nfrom pybitgraph import BitGraph\n\n\ngraph = BitGraph(\n    'uint64',\n    'uint64',\n    'DEVICE',\n    'MANAGED',\n    'DEVICE',\n)\n\nsrc = torch.tensor([5, 4, 1, 0, 2, 3, 5, 1, 2, 0], dtype=torch.uint64)\ndst = torch.tensor([1, 3, 2, 5, 1, 5, 4, 4, 4, 1], dtype=torch.uint64)\n\ngraph.add_vertices(6)\ngraph.add_edges(src, dst, 'e')\n\ng = graph.traversal()\n```\n\n----------------------------------------\n\nTITLE: BitGraph Initialization and Edge Loading\nDESCRIPTION: Creates a BitGraph instance and loads edges from the edge list data.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/examples/rag.ipynb#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom pybitgraph import BitGraph\n\ngraph = BitGraph(\n    \"int64\",\n    \"int64\",\n    \"DEVICE\",\n    \"MANAGED\",\n    \"MANAGED\",\n)\n\ngraph.add_vertices(num_vertices)\ngraph.add_edges(\n    edf.src.values,\n    edf.dst.values,\n    'link'\n)\n\ng = graph.traversal()\n```\n\n----------------------------------------\n\nTITLE: Converting COO Format to PyTorch Geometric Data Object\nDESCRIPTION: Function to convert a coordinate format (COO) graph representation to a PyTorch Geometric Data object for use with GNN models. It creates a data object with edge indices, node features, and batch information.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/examples/rag_demo.ipynb#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom torch_geometric.data import Data\n\ndef coo_to_data(coo):\n    data = Data()\n    data.edge_index = torch.stack([\n        torch.as_tensor(coo['dst'].astype('int64'), device='cuda'),\n        torch.as_tensor(coo['src'].astype('int64'), device='cuda'),\n    ])\n    data.x = torch.as_tensor(\n        g.V(coo['vid']).encode('emb').toArray(),\n        device='cuda'\n    ).reshape((-1, 300))\n    data.batch = torch.zeros((data.x.shape[0],), dtype=torch.int64, device='cuda')\n\n    return data\n```\n\n----------------------------------------\n\nTITLE: Executing Likeness Query on BitGraph in Python\nDESCRIPTION: This snippet shows how to execute a likeness query on the graph using the 'emb' embedding, a specific vector, and a threshold of 0.90.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/examples/similarity.ipynb#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ng.V().like('emb', [np.array([1.1, 2.1],dtype='float32')], 0.90).toArray()\n```\n\n----------------------------------------\n\nTITLE: Parquet Data Loading and Graph Construction\nDESCRIPTION: Loads article and edge data from Parquet files and constructs a BitGraph instance with the loaded data\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/examples/advanced_rag.ipynb#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pandas\nadf = pandas.read_parquet('/mnt/bitgraph/data/rag/articles.parquet')\nedf = pandas.read_parquet('/mnt/bitgraph/data/rag/edgelist.parquet')\n\nnum_vertices = max(edf.src.max(), edf.dst.max(), len(adf))\n\nimport sys\nsys.path.append('/mnt/bitgraph')\nsys.path.append('/mnt/gremlin++')\nfrom pybitgraph import BitGraph\n\ngraph = BitGraph('int64', 'int64', 'DEVICE', 'DEVICE', 'DEVICE')\n\ngraph.add_vertices(num_vertices)\ngraph.add_edges(\n    edf.src.values,\n    edf.dst.values,\n    'link',\n)\n```\n\n----------------------------------------\n\nTITLE: Preprocessing Data for QRAG\nDESCRIPTION: Instructions for generating embeddings required by QRAG. The script needs to be run twice - once for sentences and once for articles. The QRAG paper used roberta embeddings, though word2vec embeddings can also be used as a less expensive alternative.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/examples/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npreprocess.py\n```\n\n----------------------------------------\n\nTITLE: Traversing Graph Outgoing Edges\nDESCRIPTION: Performs a graph traversal to retrieve outgoing vertices from a set of vertex IDs and returns the results as an array.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/examples/rag_demo.ipynb#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ng.V(vids).out().toArray()\n```\n\n----------------------------------------\n\nTITLE: Creating a Function to Decode Vertex IDs\nDESCRIPTION: Defines a helper function to decode vertex IDs into readable information. It distinguishes between article and sentence vertices based on index ranges and prints the corresponding content.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/examples/rag_demo.ipynb#2025-04-17_snippet_33\n\nLANGUAGE: python\nCODE:\n```\ndef decode(vids):\n    f = (vids < len(titles))\n    print('articles:', titles.iloc[vids[f].get()])\n    print('sentences:', sentences.iloc[vids[~f].get() - len(titles)])\n```\n\n----------------------------------------\n\nTITLE: Text Embedding Generation\nDESCRIPTION: Creates vector embeddings for article titles using spaCy's language model.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/examples/rag.ipynb#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nt1 = nlp('brown fox')\n\nm = df.title.map(lambda x : nlp(x).vector)\nm\n```\n\n----------------------------------------\n\nTITLE: Sentence Transformer Implementation\nDESCRIPTION: Defines a custom Sentence Transformer class that implements mean pooling and normalization for BERT embeddings\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/examples/advanced_rag.ipynb#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport torch\nimport torch.nn.functional as F\nclass Sentence_Transformer(torch.nn.Module):\n\n    def __init__(self, bert_model):\n        super(Sentence_Transformer, self).__init__()\n        self.bert_model = bert_model\n\n    def mean_pooling(self, model_output, attention_mask):\n        token_embeddings = model_output[0]\n        data_type = token_embeddings.dtype\n        input_mask_expanded = attention_mask.unsqueeze(-1).expand(token_embeddings.size()).to(data_type)\n        return torch.sum(token_embeddings * input_mask_expanded, 1) / torch.clamp(input_mask_expanded.sum(1), min=1e-9)\n\n    def forward(self, input_ids, att_mask):\n        bert_out = self.bert_model(input_ids=input_ids, attention_mask=att_mask)\n        sentence_embeddings = self.mean_pooling(bert_out, att_mask)\n\n        sentence_embeddings = F.normalize(sentence_embeddings, p=2, dim=1)\n        return sentence_embeddings\n```\n\n----------------------------------------\n\nTITLE: Defining Query Parameters Dictionary\nDESCRIPTION: Creates a dictionary of query parameters for controlling the graph traversal process, including limits for vertex matching and traversal depths.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/examples/rag_demo.ipynb#2025-04-17_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nqp = {\"question_vertex_match_limit\": 1, \"hop_1_outgoing_limit\": 8, \"hop_1_incoming_limit\": 8, \"hop_0_outgoing_limit\": 2, \"hop_0_incoming_limit\": 2, \"entity_vertex_match_limit\": 2}\n```\n\n----------------------------------------\n\nTITLE: Extracting a Subgraph Based on Vertex IDs\nDESCRIPTION: Extracts a subgraph from the BitGraph instance using specified vertex IDs (0, 2, 4), returning a coordinate format representation of the subgraph.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/examples/rag_demo.ipynb#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ngraph.subgraph_coo(torch.tensor([0, 2, 4], dtype=torch.uint64))\n```\n\n----------------------------------------\n\nTITLE: Calculating Sentence Offsets with CuPy\nDESCRIPTION: Calculates sentence offsets for articles in the DataFrame using CuPy for GPU acceleration. It handles cases with zero sentences by setting a minimum value of 1, then computes cumulative sums to create offset values.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/examples/rag_demo.ipynb#2025-04-17_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimport cupy\n\nslens = df.sentences.list.len().astype('int64')\nslens[(slens==0)] = 1\n\ndf['sentence_offsets'] = cupy.concatenate([\n    cupy.array([0]),\n    slens.cumsum().values[:-1]\n])\ndf\n```\n\n----------------------------------------\n\nTITLE: Loading JSON Data with CUDF\nDESCRIPTION: Loads JSON data from a file containing paragraphs with hyperlinks using CUDF, a GPU-accelerated DataFrame library.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/examples/rag_demo.ipynb#2025-04-17_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport cudf\ndf = cudf.read_json('/mnt/para_with_hyperlink.jsonl', lines=True)\n```\n\n----------------------------------------\n\nTITLE: Graph Traversal Performance Testing\nDESCRIPTION: Executes and benchmarks graph traversal operations with different optimization strategies.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/examples/rag.ipynb#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom pygremlinxx import TraversalStrategy\nfrom pygremlinxx import GraphTraversal\n__ = lambda : GraphTraversal()\n\nfrom time import perf_counter\n\nh = graph.traversal().withoutStrategy(BitGraph.BitGraphSelectionStrategy).withoutStrategy(TraversalStrategy.BasicPatternExtractionStrategy).withoutStrategy(TraversalStrategy.RepeatUnrollStrategy).withoutStrategy(TraversalStrategy.HasJoinStrategy)\n\nfor _ in range(11):\n    start_time = perf_counter()\n    additional_docs = h.V(vertex_ids).emit(__().identity()).repeat(__().out().dedup().order().by(__().out().count()).limit(10)).times(2).dedup().order().by(__().out().count()).toArray()\n    end_time = perf_counter()\n    print(end_time - start_time)\nadditional_docs\n```\n\n----------------------------------------\n\nTITLE: Finding and Decoding Vertices Similar to 'Shameless'\nDESCRIPTION: Retrieves vertices from the graph that have embeddings similar to the term 'Shameless', limited to 4 matches, and decodes them for readability.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/examples/rag_demo.ipynb#2025-04-17_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nvids = g.V().like('emb', [getem('Shameless')], 4).toArray()\ndecode(vids)\n```\n\n----------------------------------------\n\nTITLE: Extracting and Preparing Sentences DataFrame\nDESCRIPTION: Extracts sentences from articles, converting the nested structure into a flattened DataFrame with article references. The explode operation converts list columns to rows with index tracking.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/examples/rag_demo.ipynb#2025-04-17_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nsentences = df.sentences.explode().reset_index().rename({\"index\": 'article'},axis=1)\nsentences\n```\n\n----------------------------------------\n\nTITLE: Generating Embedding for a Specific Term\nDESCRIPTION: Generates an embedding for the term 'Shameless' using the getem function, likely for similarity comparisons in graph traversals.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/examples/rag_demo.ipynb#2025-04-17_snippet_36\n\nLANGUAGE: python\nCODE:\n```\ngetem('Shameless')\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Question for Processing\nDESCRIPTION: Sets up a question for graph-based processing, specifically about comparing directors of two films. The code assigns the question string to a variable and extracts named entities for further processing.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/examples/rag_demo.ipynb#2025-04-17_snippet_32\n\nLANGUAGE: python\nCODE:\n```\n#question = \"What is the date of birth of the director of film Rathimanmadhan?\"\n#question = \"What is the place of birth of the director of film Discord (Film)?\"\n#question = \"Did the movies Torkaman (Film) and Shameless (2008 Film), originate from the same country?\"\nquestion = \"Do both directors of films The Big Bang (1989 Film) and Tender Fictions share the same nationality?\"\n\nents = ner(question)\nemb_q = getem(question)\nents\n```\n\n----------------------------------------\n\nTITLE: Retrieving Bidirectional Edges for a Vertex\nDESCRIPTION: Performs a graph traversal to retrieve all bidirectional edges connected to vertex ID 2 and returns the results as an array.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/examples/rag_demo.ipynb#2025-04-17_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ng.V(2).bothE().toArray()\n```\n\n----------------------------------------\n\nTITLE: Creating Source Indices for Mentions\nDESCRIPTION: Calculates source indices for mentions by combining sentence indices with article offsets and adding the length of the dataframe. This helps map mentions to their corresponding positions in the combined data structure.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/examples/rag_demo.ipynb#2025-04-17_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nsrc = torch.as_tensor(\n    mentions.struct.field('sent_idx').values + df.sentence_offsets[mentions.index].values,\n    device='cuda'\n) + len(df)\nsrc\n```\n\n----------------------------------------\n\nTITLE: Running QRAG Benchmarks\nDESCRIPTION: Instructions for running standard benchmarks for QRAG using run.sh which executes various operations defined in construct.py. The script can also visualize subgraphs extracted by QRAG for debugging purposes.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/examples/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrun.sh\n```\n\n----------------------------------------\n\nTITLE: Creating Destination and Source Arrays for Sentences\nDESCRIPTION: Creates destination and source arrays for sentences, mapping sentence indices to article references. The destination indices are calculated by adding the DataFrame length to the sentence indices.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/examples/rag_demo.ipynb#2025-04-17_snippet_22\n\nLANGUAGE: python\nCODE:\n```\ndestinations_s = sentences.index.values + len(df)\nsources_s = sentences.article.values\n```\n\n----------------------------------------\n\nTITLE: Installing BitGraph for QRAG Implementation\nDESCRIPTION: Instructions for building BitGraph which is required for running QRAG. The process involves running the build.sh script to build both C++ libraries and Python extensions. BitGraph has dependencies on Maelstrom and Gremlin++ which should be accessible to BitGraph.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/examples/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbuild.sh\n```\n\n----------------------------------------\n\nTITLE: Adding NER Pipeline\nDESCRIPTION: Adds Named Entity Recognition component to the spaCy pipeline.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/examples/rag.ipynb#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nner = nlp.add_pipe('ner')\n```\n\n----------------------------------------\n\nTITLE: Defining BitGraph Main Library Target\nDESCRIPTION: Creates the main shared library for BitGraph, including all source files for the core functionality, structure components, traversal system, and strategy implementations.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(\n    bitgraph SHARED\n\n    structure/BitGraph_construct.cpp\n    structure/BitGraph_access.cpp\n    structure/BitGraph_convert.cpp\n    structure/BitGraph_query.cpp\n    structure/BitGraph_index.cu\n\n    traversal/BitGraphTraversalSource.cpp\n\n    step/BitGraphVStep.cpp\n    \n    strategy/BitGraphStrategy.cpp\n    strategy/BitGraphSelectionStrategy.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Cleaning and Resetting Sentences DataFrame\nDESCRIPTION: Cleans the sentences DataFrame by removing null values and resetting the index to ensure continuous numbering. This prepares the data for further processing and analysis.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/examples/rag_demo.ipynb#2025-04-17_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nsentences = df.sentences.explode().reset_index().rename({\"index\": 'article'},axis=1)\nsentences.dropna(inplace=True)\nsentences.reset_index(drop=True, inplace=True)\n```\n\n----------------------------------------\n\nTITLE: Loading Article Data\nDESCRIPTION: Reads article data from a Parquet file into a pandas DataFrame.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/examples/rag.ipynb#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport pandas\ndf = pandas.read_parquet('/mnt/bitgraph/data/rag/articles.parquet')\ndf\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Edges from the Graph\nDESCRIPTION: Fetches all edges from the graph traversal object and returns them as an array.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/examples/rag_demo.ipynb#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ng.E().toArray()\n```\n\n----------------------------------------\n\nTITLE: Importing BitGraph Library in Python\nDESCRIPTION: This snippet imports the necessary modules and adds required paths to the system path for using BitGraph and Gremlin++.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/examples/similarity.ipynb#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nsys.path.append('/mnt/bitgraph')\nsys.path.append('/mnt/gremlin++')\nfrom pybitgraph import BitGraph\n```\n\n----------------------------------------\n\nTITLE: NLP Model Initialization\nDESCRIPTION: Initializes spaCy NLP pipeline with the medium English model.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/examples/rag.ipynb#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport spacy\nnlp = spacy.load('en_core_web_md')\n```\n\n----------------------------------------\n\nTITLE: Counting Matches Between Sources and Destinations\nDESCRIPTION: Counts the number of matching entries between source indices and a specific destination ID (4111782), filtering and using PyTorch tensor operations for the comparison.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/examples/rag_demo.ipynb#2025-04-17_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n(src[(destinations_m == 4111782)] == 13590393).sum()\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Bindings with nanobind\nDESCRIPTION: Sets up Python bindings for BitGraph using nanobind, detecting the installed nanobind package, creating the pybitgraph module, and linking it with the required libraries.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/CMakeLists.txt#2025-04-17_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\n# Detect the installed nanobind package and import it into CMake\nexecute_process(\n  COMMAND \"${Python_EXECUTABLE}\" -m nanobind --cmake_dir\n  OUTPUT_STRIP_TRAILING_WHITESPACE OUTPUT_VARIABLE NB_DIR)\nlist(APPEND CMAKE_PREFIX_PATH \"${NB_DIR}\")\nfind_package(nanobind CONFIG REQUIRED)\n\nnanobind_add_module(pybitgraph bindings/PyBitGraph.cpp)\ntarget_link_libraries(\n    pybitgraph \n    PRIVATE  \n        bitgraph \n        gremlinxx \n        maelstrom\n        faiss\n)\ntarget_link_directories(\n       pybitgraph\n       PRIVATE\n         \"../maelstrom/\" \n         \"../gremlin++/\"\n         \"../faiss/build/faiss\"\n)\n```\n\n----------------------------------------\n\nTITLE: Loading Training Data from JSON\nDESCRIPTION: Loads training data from a JSON file into a pandas DataFrame for use in question answering tasks.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/examples/rag_demo.ipynb#2025-04-17_snippet_43\n\nLANGUAGE: python\nCODE:\n```\nimport pandas\ndf = pandas.read_json('/mnt/data/train.json')\n```\n\n----------------------------------------\n\nTITLE: Retrieving Sentences for Question-Related Vertices\nDESCRIPTION: Accesses the sentences corresponding to the question-related vertex IDs (vids_q) after adjusting for the DataFrame length.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/examples/rag_demo.ipynb#2025-04-17_snippet_41\n\nLANGUAGE: python\nCODE:\n```\nsentences.iloc[vids_q.get() - len(titles)]\n```\n\n----------------------------------------\n\nTITLE: Filtering Sentence Destinations by Article ID\nDESCRIPTION: Retrieves sentence destination indices that correspond to a specific article ID (1954484).\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/examples/rag_demo.ipynb#2025-04-17_snippet_23\n\nLANGUAGE: python\nCODE:\n```\ndestinations_s[sources_s==1954484]\n```\n\n----------------------------------------\n\nTITLE: Filtering Sentences by Article ID\nDESCRIPTION: Retrieves all sentences that belong to a specific article ID (1954484) from the sentences DataFrame.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/examples/rag_demo.ipynb#2025-04-17_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nsentences[sentences.article==1954484]\n```\n\n----------------------------------------\n\nTITLE: Adding Example Executables for BitGraph\nDESCRIPTION: Creates executable targets for BitGraph example applications, including connected components analysis, edge query operations, and shortest path calculation.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/CMakeLists.txt#2025-04-17_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nAddBitGraphExec(\n    \"components.exe\" \"examples/components.cu\"\n)\n\nAddBitGraphExec(\n    \"edge_query.exe\" \"examples/edge_query.cu\"\n)\n\nAddBitGraphExec(\n    \"shortest_path.exe\" \"examples/shortest_path.cu\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for BitGraph\nDESCRIPTION: Sets up include directories for the BitGraph library, including paths to BitGraph's own includes, GremlinC++ library, Maelstrom library, and FAISS vector similarity search library.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/CMakeLists.txt#2025-04-17_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(\n    bitgraph\n    PUBLIC\n        \"include/\" # bitgraph path\n        \"../gremlin++\" # gremlinxx path\n        \"../maelstrom/include\" # maelstrom path\n        \"../faiss\" # faiss path\n)\n```\n\n----------------------------------------\n\nTITLE: Calculating Combined Index with DataFrame Length\nDESCRIPTION: Adds the length of the DataFrame to a specific index (7600544) to create a combined index, likely for mapping between different data structures.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/examples/rag_demo.ipynb#2025-04-17_snippet_26\n\nLANGUAGE: python\nCODE:\n```\n7600544+len(df)\n```\n\n----------------------------------------\n\nTITLE: Importing BitGraph Dependencies\nDESCRIPTION: Sets up Python path and imports BitGraph library for graph processing.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/examples/rag.ipynb#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nsys.path.append('/mnt/bitgraph')\nsys.path.append('/mnt/gremlin++')\nfrom pybitgraph import BitGraph\n```\n\n----------------------------------------\n\nTITLE: Setting up BitGraph CMake Project with CUDA support\nDESCRIPTION: Initializes the BitGraph project with CMake, setting up C++ and CUDA language support with C++20 standard and necessary CUDA flags for lambda expressions and constexpr relaxation.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n\nproject(\n    BITGRAPH\n    VERSION 1.0.0\n    LANGUAGES CXX CUDA\n)\n\nset(CMAKE_CXX_STANDARD 20)\nset(CMAKE_CXX_STANDARD_REQUIRED True)\nset(CMAKE_CUDA_FLAGS \"-forward-unknown-to-host-compiler --expt-relaxed-constexpr --expt-extended-lambda\")\n\n# Minimum supported arch is 75\nset(CMAKE_CUDA_ARCHITECTURES \"86\")\n\nset(POSITION_INDEPENDENT_CODE True)\nset(INTERFACE_POSITION_INDEPENDENT_CODE True)\n```\n\n----------------------------------------\n\nTITLE: Accessing Question Vertex Match Limit Parameter\nDESCRIPTION: Retrieves the question_vertex_match_limit value from the query parameters dictionary.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/examples/rag_demo.ipynb#2025-04-17_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nqp['question_vertex_match_limit']\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Optimization Flags for BitGraph\nDESCRIPTION: Configures compiler optimization flags for the BitGraph library, including aggressive optimizations for math operations, register renaming, loop unrolling, and sized deallocation.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_options(\n    bitgraph\n    PUBLIC\n        -O3\n        -funsafe-math-optimizations\n        -frename-registers\n        -funroll-loops\n        -fsized-deallocation\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing Reference IDs from Mentions\nDESCRIPTION: Retrieves the reference IDs from the last five entries in the mentions DataFrame using the struct field accessor.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/examples/rag_demo.ipynb#2025-04-17_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nmentions[-5:].struct.field('ref_ids')\n```\n\n----------------------------------------\n\nTITLE: Graph Edge List Data\nDESCRIPTION: A list of edges where each line represents a directed edge from the first number (source vertex) to the second number (target vertex). The numbers appear to represent vertex IDs in a graph structure.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/data/karate.txt#2025-04-17_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n2 1\n3 1\n3 2\n4 1\n4 2\n4 3\n5 1\n6 1\n7 1\n7 5\n7 6\n8 1\n8 2\n8 3\n8 4\n9 1\n9 3\n10 3\n11 1\n11 5\n11 6\n12 1\n13 1\n13 4\n14 1\n14 2\n14 3\n14 4\n17 6\n17 7\n18 1\n18 2\n20 1\n20 2\n22 1\n22 2\n26 24\n26 25\n28 3\n28 24\n28 25\n29 3\n30 24\n30 27\n31 2\n31 9\n32 1\n32 25\n32 26\n32 29\n33 3\n33 9\n33 15\n33 16\n33 19\n33 21\n33 23\n33 24\n33 30\n33 31\n33 32\n34 9\n34 10\n34 14\n34 15\n34 16\n34 19\n34 20\n34 21\n34 23\n34 24\n34 27\n34 28\n34 29\n34 30\n34 31\n34 32\n34 33\n```\n\n----------------------------------------\n\nTITLE: Viewing Last Source Indices\nDESCRIPTION: Displays the last five source indices from the previously calculated src tensor.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/examples/rag_demo.ipynb#2025-04-17_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nsrc[-5:]\n```\n\n----------------------------------------\n\nTITLE: Creating Function to Add BitGraph Executable Targets\nDESCRIPTION: Defines a CMake function for adding BitGraph executable targets with standardized properties, link directories, and dependencies including BitGraph, GremlinC++, Maelstrom, and FAISS libraries.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/CMakeLists.txt#2025-04-17_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(AddBitGraphExec EXEC_NAME)\n    \n    add_executable(${EXEC_NAME} ${ARGN})\n\n    set_target_properties(\n        ${EXEC_NAME}\n        PROPERTIES\n            RUNTIME_OUTPUT_DIRECTORY \"bin\"\n    )\n\n    target_link_directories(\n        ${EXEC_NAME}\n        PRIVATE\n          \"../maelstrom/\" \n          \"../gremlin++/\"\n          \"../faiss/build/faiss\"\n     )\n\n    target_link_libraries(\n        ${EXEC_NAME}\n        PRIVATE\n            bitgraph   \n            gremlinxx\n            maelstrom\n            faiss\n    )\n\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Installing spaCy Language Model\nDESCRIPTION: Downloads the medium-sized English language model for spaCy NLP processing.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/examples/rag.ipynb#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!python3 -m spacy download en_core_web_md\n```\n\n----------------------------------------\n\nTITLE: Retrieving Sentence Text by Source Indices\nDESCRIPTION: Retrieves the actual sentence text for the last five source indices, converting the CuDF values to host memory as a Python list.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/examples/rag_demo.ipynb#2025-04-17_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nsentences.iloc[src[-5:]].sentences.values_host.tolist()\n```\n\n----------------------------------------\n\nTITLE: Creating Function to Add BitGraph Test Executables\nDESCRIPTION: Defines a CMake function for adding BitGraph test executables with standardized properties, link directories, and dependencies, outputting them to the test/bin directory.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/CMakeLists.txt#2025-04-17_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(AddBitGraphTest EXEC_NAME)\n    \n    add_executable(${EXEC_NAME} ${ARGN})\n\n    set_target_properties(\n        ${EXEC_NAME}\n        PROPERTIES\n            RUNTIME_OUTPUT_DIRECTORY \"test/bin\"\n    )\n\n    target_link_directories(\n       ${EXEC_NAME}\n       PRIVATE\n         \"../maelstrom/\" \n         \"../gremlin++/\"\n         \"../faiss/build/faiss\"\n    )\n\n    target_link_libraries(\n        ${EXEC_NAME}\n        PRIVATE\n            bitgraph\n            gremlinxx\n            maelstrom\n            faiss\n    )\n\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting Default Build Type for BitGraph\nDESCRIPTION: Configures the default build type to Release if not otherwise specified, with options for Debug, MinSizeRel, and RelWithDebInfo builds.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/CMakeLists.txt#2025-04-17_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE Release CACHE STRING \"Choose the type of build.\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS \"Debug\" \"Release\" \"MinSizeRel\" \"RelWithDebInfo\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Sentence by Index\nDESCRIPTION: Retrieves a specific sentence from the sentences DataFrame using its adjusted index value (subtracting the DataFrame length).\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/examples/rag_demo.ipynb#2025-04-17_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nsentences.iloc[13560798-len(df)]\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Dependencies for BitGraph\nDESCRIPTION: Finds the required Python 3.10 installation with necessary components for Python module development.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Python 3.10 COMPONENTS Interpreter Development.Module REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Converting Embeddings to NumPy Array\nDESCRIPTION: Converts the embedding vectors into a NumPy array for further processing.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/examples/rag.ipynb#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nemb = np.array(m.values.tolist())\nemb\n```\n\n----------------------------------------\n\nTITLE: Inspecting Data Object\nDESCRIPTION: Simple code snippet to inspect the contents of a data object, likely a PyTorch Geometric Data object from previous operations.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/examples/rag_demo.ipynb#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndata\n```\n\n----------------------------------------\n\nTITLE: Edge List Representation in Graph Data Structure\nDESCRIPTION: This is a plain text representation of graph edges where each line contains two numeric vertex identifiers. The first number represents the source vertex and the second number represents the destination vertex of an edge.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/data/ds2.txt#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n1 2\n2 6\n3 6\n6 4\n5 3\n6 1\n11 2\n9 11\n9 12\n10 11\n10 8\n8 7\n3 8\n13 14\n```\n\n----------------------------------------\n\nTITLE: Graph Edge List in Space-Separated Format\nDESCRIPTION: A plain text representation of a graph using an edge list format. Each line contains two integers separated by a space, representing an edge from the first vertex to the second vertex. This format is commonly used for graph data input in graph processing algorithms.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/data/ds3.txt#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n0 1\n1 2\n3 2\n2 4\n4 5\n6 5\n```\n\n----------------------------------------\n\nTITLE: Accessing Named Entities\nDESCRIPTION: Displays the named entities extracted from the question, which are stored in the ents variable.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/examples/rag_demo.ipynb#2025-04-17_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nents\n```\n\n----------------------------------------\n\nTITLE: Accessing Reference URLs from Mentions\nDESCRIPTION: Retrieves the reference URLs from the last five entries in the mentions DataFrame using the struct field accessor.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/examples/rag_demo.ipynb#2025-04-17_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nmentions[-5:].struct.field('ref_url')\n```\n\n----------------------------------------\n\nTITLE: Adding Basic Test for BitGraph\nDESCRIPTION: Creates a test executable for basic BitGraph functionality using the custom test function.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/CMakeLists.txt#2025-04-17_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nAddBitGraphTest(\n    \"test_basic.exe\" \"test/test_basic.cpp\"\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying DataFrame Contents\nDESCRIPTION: Displays the entire contents of the pandas DataFrame loaded from the training data JSON file.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/examples/rag_demo.ipynb#2025-04-17_snippet_44\n\nLANGUAGE: python\nCODE:\n```\ndf\n```\n\n----------------------------------------\n\nTITLE: Accessing a Specific Title by Index\nDESCRIPTION: Retrieves a specific title from the titles DataFrame using its index (5956065).\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/examples/rag_demo.ipynb#2025-04-17_snippet_40\n\nLANGUAGE: python\nCODE:\n```\ntitles.iloc[5956065]\n```\n\n----------------------------------------\n\nTITLE: Accessing a Specific Question from Training Data\nDESCRIPTION: Retrieves the question at index 30 from the training data DataFrame.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/examples/rag_demo.ipynb#2025-04-17_snippet_45\n\nLANGUAGE: python\nCODE:\n```\ndf.question[30]\n```\n\n----------------------------------------\n\nTITLE: Declaring BitGraphVStep Class with Identifier\nDESCRIPTION: Simple declaration of a BitGraphVStep class with an identifier of 0x11, likely used for identifying this step type in a graph traversal system.\nSOURCE: https://github.com/bgamer50/BitGraph/blob/main/bitgraph_step_reference.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nBitGraphVStep 0x11\n```"
  }
]