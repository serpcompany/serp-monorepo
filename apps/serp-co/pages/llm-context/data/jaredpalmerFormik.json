[
  {
    "owner": "jaredpalmer",
    "repo": "formik",
    "content": "TITLE: Creating a Simple Newsletter Signup Form with Formik in React\nDESCRIPTION: This snippet demonstrates how to create a basic email signup form using Formik's useFormik hook. It shows how to set up initial values, handle form submission, and manage form state.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/tutorial.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { useFormik } from 'formik';\n\nconst SignupForm = () => {\n  // Pass the useFormik() hook initial form values and a submit function that will\n  // be called when the form is submitted\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n    },\n    onSubmit: values => {\n      alert(JSON.stringify(values, null, 2));\n    },\n  });\n  return (\n    <form onSubmit={formik.handleSubmit}>\n      <label htmlFor=\"email\">Email Address</label>\n      <input\n        id=\"email\"\n        name=\"email\"\n        type=\"email\"\n        onChange={formik.handleChange}\n        value={formik.values.email}\n      />\n\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Validation with Yup Schema\nDESCRIPTION: React component implementing a signup form using Formik with Yup validation schema. Demonstrates form field validation for first name, last name, and email with explicit event handlers.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/tutorial.md#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\n\nconst SignupForm = () => {\n  const formik = useFormik({\n    initialValues: {\n      firstName: '',\n      lastName: '',\n      email: '',\n    },\n    validationSchema: Yup.object({\n      firstName: Yup.string()\n        .max(15, 'Must be 15 characters or less')\n        .required('Required'),\n      lastName: Yup.string()\n        .max(20, 'Must be 20 characters or less')\n        .required('Required'),\n      email: Yup.string().email('Invalid email address').required('Required'),\n    }),\n    onSubmit: values => {\n      alert(JSON.stringify(values, null, 2));\n    },\n  });\n  return (\n    <form onSubmit={formik.handleSubmit}>\n      <label htmlFor=\"firstName\">First Name</label>\n      <input\n        id=\"firstName\"\n        name=\"firstName\"\n        type=\"text\"\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        value={formik.values.firstName}\n      />\n      {formik.touched.firstName && formik.errors.firstName ? (\n        <div>{formik.errors.firstName}</div>\n      ) : null}\n\n      <label htmlFor=\"lastName\">Last Name</label>\n      <input\n        id=\"lastName\"\n        name=\"lastName\"\n        type=\"text\"\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        value={formik.values.lastName}\n      />\n      {formik.touched.lastName && formik.errors.lastName ? (\n        <div>{formik.errors.lastName}</div>\n      ) : null}\n\n      <label htmlFor=\"email\">Email Address</label>\n      <input\n        id=\"email\"\n        name=\"email\"\n        type=\"email\"\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        value={formik.values.email}\n      />\n      {formik.touched.email && formik.errors.email ? (\n        <div>{formik.errors.email}</div>\n      ) : null}\n\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Messages with Formik and Yup Validation\nDESCRIPTION: Example demonstrates how to create a form with validation using Formik and Yup schema validation. Shows error message display logic based on field touch state and validation errors. Includes validation for username length and email format requirements.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/guides/validation.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Formik, Form, Field } from 'formik';\nimport * as Yup from 'yup';\n\nconst DisplayingErrorMessagesSchema = Yup.object().shape({\n  username: Yup.string()\n    .min(2, 'Too Short!')\n    .max(50, 'Too Long!')\n    .required('Required'),\n  email: Yup.string().email('Invalid email').required('Required'),\n});\n\nexport const DisplayingErrorMessagesExample = () => (\n  <div>\n    <h1>Displaying Error Messages</h1>\n    <Formik\n      initialValues={{\n        username: '',\n        email: '',\n      }}\n      validationSchema={DisplayingErrorMessagesSchema}\n      onSubmit={values => {\n        // same shape as initial values\n        console.log(values);\n      }}\n    >\n      {({ errors, touched }) => (\n        <Form>\n          <Field name=\"username\" />\n          {/* If this field has been touched, and it contains an error, display it\n           */}\n          {touched.username && errors.username && <div>{errors.username}</div>}\n          <Field name=\"email\" />\n          {/* If this field has been touched, and it contains an error, display\n          it */}\n          {touched.email && errors.email && <div>{errors.email}</div>}\n          <button type=\"submit\">Submit</button>\n        </Form>\n      )}\n    </Formik>\n  </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Formik Form Implementation in React\nDESCRIPTION: Demonstrates a basic form implementation using Formik component with initial values, submission handling, and form validation. Shows usage of core Formik props like handleSubmit, handleChange, and handleBlur.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/api/formik.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Formik } from 'formik';\n\nconst BasicExample = () => (\n  <div>\n    <h1>My Form</h1>\n    <Formik\n      initialValues={{ name: 'jared' }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n    >\n      {props => (\n        <form onSubmit={props.handleSubmit}>\n          <input\n            type=\"text\"\n            onChange={props.handleChange}\n            onBlur={props.handleBlur}\n            value={props.values.name}\n            name=\"name\"\n          />\n          {props.errors.name && <div id=\"feedback\">{props.errors.name}</div>}\n          <button type=\"submit\">Submit</button>\n        </form>\n      )}\n    </Formik>\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable Form Input Components with Formik in React\nDESCRIPTION: This code demonstrates how to create reusable form input components using Formik's useField hook. It includes examples for text inputs, checkboxes, and select inputs, showing how to handle different input types and display validation errors.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/tutorial.md#2025-04-16_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Formik, Form, useField } from 'formik';\nimport * as Yup from 'yup';\n\nconst MyTextInput = ({ label, ...props }) => {\n  const [field, meta] = useField(props);\n  return (\n    <>\n      <label htmlFor={props.id || props.name}>{label}</label>\n      <input className=\"text-input\" {...field} {...props} />\n      {meta.touched && meta.error ? (\n        <div className=\"error\">{meta.error}</div>\n      ) : null}\n    </>\n  );\n};\n\nconst MyCheckbox = ({ children, ...props }) => {\n  const [field, meta] = useField({ ...props, type: 'checkbox' });\n  return (\n    <div>\n      <label className=\"checkbox-input\">\n        <input type=\"checkbox\" {...field} {...props} />\n        {children}\n      </label>\n      {meta.touched && meta.error ? (\n        <div className=\"error\">{meta.error}</div>\n      ) : null}\n    </div>\n  );\n};\n\nconst MySelect = ({children, label, ...props }) => {\n  const [field, meta] = useField(props);\n  return (\n    <div>\n      <label htmlFor={props.id || props.name}>{label}</label>\n      <select {...field} {...props} />\n      {children}\n      {meta.touched && meta.error ? (\n        <div className=\"error\">{meta.error}</div>\n      ) : null}\n    </div>\n  );\n};\n\nconst SignupForm = () => {\n  return (\n    <>\n      <h1>Subscribe!</h1>\n      <Formik\n        initialValues={{\n          firstName: '',\n          lastName: '',\n          email: '',\n          acceptedTerms: false,\n          jobType: '',\n        }}\n        validationSchema={Yup.object({\n          firstName: Yup.string()\n            .max(15, 'Must be 15 characters or less')\n            .required('Required'),\n          lastName: Yup.string()\n            .max(20, 'Must be 20 characters or less')\n            .required('Required'),\n          email: Yup.string()\n            .email('Invalid email address')\n            .required('Required'),\n          acceptedTerms: Yup.boolean()\n            .required('Required')\n            .oneOf([true], 'You must accept the terms and conditions.'),\n          jobType: Yup.string()\n            .oneOf(\n              ['designer', 'development', 'product', 'other'],\n              'Invalid Job Type'\n            )\n            .required('Required'),\n        })}\n        onSubmit={(values, { setSubmitting }) => {\n          setTimeout(() => {\n            alert(JSON.stringify(values, null, 2));\n            setSubmitting(false);\n          }, 400);\n        }}\n      >\n        <Form>\n          <MyTextInput\n            label=\"First Name\"\n            name=\"firstName\"\n            type=\"text\"\n            placeholder=\"Jane\"\n          />\n\n          <MyTextInput\n            label=\"Last Name\"\n            name=\"lastName\"\n            type=\"text\"\n          />\n        </Form>\n      </Formik>\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Simplified Formik Usage with Helper Components\nDESCRIPTION: Example of using Formik's helper components (Form, Field, ErrorMessage) to reduce boilerplate code in a React form.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/overview.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\n\nconst Basic = () => (\n  <div>\n    <h1>Any place in your app!</h1>\n    <Formik\n      initialValues={{ email: '', password: '' }}\n      validate={values => {\n        const errors = {};\n        if (!values.email) {\n          errors.email = 'Required';\n        } else if (\n          !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\n        ) {\n          errors.email = 'Invalid email address';\n        }\n        return errors;\n      }}\n      onSubmit={(values, { setSubmitting }) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          setSubmitting(false);\n        }, 400);\n      }}\n    >\n      {({ isSubmitting }) => (\n        <Form>\n          <Field type=\"email\" name=\"email\" />\n          <ErrorMessage name=\"email\" component=\"div\" />\n          <Field type=\"password\" name=\"password\" />\n          <ErrorMessage name=\"password\" component=\"div\" />\n          <button type=\"submit\" disabled={isSubmitting}>\n            Submit\n          </button>\n        </Form>\n      )}\n    </Formik>\n  </div>\n);\n\nexport default Basic;\n```\n\n----------------------------------------\n\nTITLE: Implementing Friend List with FieldArray in React and Formik\nDESCRIPTION: This snippet demonstrates how to create a form with an editable list of friends using Formik's FieldArray component. It includes functionality to add, remove, and insert friends in the list.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/api/fieldarray.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik';\n\n// Here is an example of a form with an editable list.\n// Next to each input are buttons for insert and remove.\n// If the list is empty, there is a button to add an item.\nexport const FriendList = () => (\n  <div>\n    <h1>Friend List</h1>\n    <Formik\n      initialValues={{ friends: ['jared', 'ian', 'brent'] }}\n      onSubmit={values =>\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n        }, 500)\n      }\n      render={({ values }) => (\n        <Form>\n          <FieldArray\n            name=\"friends\"\n            render={arrayHelpers => (\n              <div>\n                {values.friends && values.friends.length > 0 ? (\n                  values.friends.map((friend, index) => (\n                    <div key={index}>\n                      <Field name={`friends.${index}`} />\n                      <button\n                        type=\"button\"\n                        onClick={() => arrayHelpers.remove(index)} // remove a friend from the list\n                      >\n                        -\n                      </button>\n                      <button\n                        type=\"button\"\n                        onClick={() => arrayHelpers.insert(index, '')} // insert an empty string at a position\n                      >\n                        +\n                      </button>\n                    </div>\n                  ))\n                ) : (\n                  <button type=\"button\" onClick={() => arrayHelpers.push('')}>\n                    {/* show this when user has removed all friends from the list */}\n                    Add a friend\n                  </button>\n                )}\n                <div>\n                  <button type=\"submit\">Submit</button>\n                </div>\n              </div>\n            )}\n          />\n        </Form>\n      )}\n    />\n  </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Form with withFormik() HOC in React\nDESCRIPTION: This example demonstrates how to create a form component and enhance it with Formik's withFormik() higher-order component. It shows basic form implementation with validation, form submission handling, and error display.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/api/withFormik.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { withFormik } from 'formik';\n\nconst MyForm = props => {\n  const {\n    values,\n    touched,\n    errors,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n  } = props;\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        value={values.name}\n        name=\"name\"\n      />\n      {errors.name && touched.name && <div id=\"feedback\">{errors.name}</div>}\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n};\n\nconst MyEnhancedForm = withFormik({\n  mapPropsToValues: () => ({ name: '' }),\n\n  // Custom sync validation\n  validate: values => {\n    const errors = {};\n\n    if (!values.name) {\n      errors.name = 'Required';\n    }\n\n    return errors;\n  },\n\n  handleSubmit: (values, { setSubmitting }) => {\n    setTimeout(() => {\n      alert(JSON.stringify(values, null, 2));\n      setSubmitting(false);\n    }, 1000);\n  },\n\n  displayName: 'BasicForm',\n})(MyForm);\n```\n\n----------------------------------------\n\nTITLE: Basic Form Validation with Formik\nDESCRIPTION: Implementation of a signup form with basic validation using useFormik hook. Includes validation for required fields and field-specific constraints like character length and email format.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/tutorial.md#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { useFormik } from 'formik';\n\nconst validate = values => {\n  const errors = {};\n  if (!values.firstName) {\n    errors.firstName = 'Required';\n  } else if (values.firstName.length > 15) {\n    errors.firstName = 'Must be 15 characters or less';\n  }\n\n  if (!values.lastName) {\n    errors.lastName = 'Required';\n  } else if (values.lastName.length > 20) {\n    errors.lastName = 'Must be 20 characters or less';\n  }\n\n  if (!values.email) {\n    errors.email = 'Required';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = 'Invalid email address';\n  }\n\n  return errors;\n};\n\nconst SignupForm = () => {\n  const formik = useFormik({\n    initialValues: {\n      firstName: '',\n      lastName: '',\n      email: '',\n    },\n    validate,\n    onSubmit: values => {\n      alert(JSON.stringify(values, null, 2));\n    },\n  });\n  return (\n    <form onSubmit={formik.handleSubmit}>\n      <label htmlFor=\"firstName\">First Name</label>\n      <input\n        id=\"firstName\"\n        name=\"firstName\"\n        type=\"text\"\n        onChange={formik.handleChange}\n        value={formik.values.firstName}\n      />\n      {formik.errors.firstName ? <div>{formik.errors.firstName}</div> : null}\n\n      <label htmlFor=\"lastName\">Last Name</label>\n      <input\n        id=\"lastName\"\n        name=\"lastName\"\n        type=\"text\"\n        onChange={formik.handleChange}\n        value={formik.values.lastName}\n      />\n      {formik.errors.lastName ? <div>{formik.errors.lastName}</div> : null}\n\n      <label htmlFor=\"email\">Email Address</label>\n      <input\n        id=\"email\"\n        name=\"email\"\n        type=\"email\"\n        onChange={formik.handleChange}\n        value={formik.values.email}\n      />\n      {formik.errors.email ? <div>{formik.errors.email}</div> : null}\n\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Simplified Form Using Formik Components in React\nDESCRIPTION: This snippet shows a more concise way of creating forms using Formik's Field, Form, and ErrorMessage components. It reduces boilerplate code and leverages Formik's built-in components for form handling.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/tutorial.md#2025-04-16_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\n\nconst SignupForm = () => {\n  return (\n    <Formik\n      initialValues={{ firstName: '', lastName: '', email: '' }}\n      validationSchema={Yup.object({\n        firstName: Yup.string()\n          .max(15, 'Must be 15 characters or less')\n          .required('Required'),\n        lastName: Yup.string()\n          .max(20, 'Must be 20 characters or less')\n          .required('Required'),\n        email: Yup.string().email('Invalid email address').required('Required'),\n      })}\n      onSubmit={(values, { setSubmitting }) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          setSubmitting(false);\n        }, 400);\n      }}\n    >\n      <Form>\n        <label htmlFor=\"firstName\">First Name</label>\n        <Field name=\"firstName\" type=\"text\" />\n        <ErrorMessage name=\"firstName\" />\n\n        <label htmlFor=\"lastName\">Last Name</label>\n        <Field name=\"lastName\" type=\"text\" />\n        <ErrorMessage name=\"lastName\" />\n\n        <label htmlFor=\"email\">Email Address</label>\n        <Field name=\"email\" type=\"email\" />\n        <ErrorMessage name=\"email\" />\n\n        <button type=\"submit\">Submit</button>\n      </Form>\n    </Formik>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Formik with Render Props in TypeScript\nDESCRIPTION: This snippet demonstrates how to use Formik's render props pattern with TypeScript. It shows type definitions for form values and how to properly type the Formik component and its callbacks.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/guides/typescript.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React from 'react';\nimport {\n  Formik,\n  FormikHelpers,\n  FormikProps,\n  Form,\n  Field,\n  FieldProps,\n} from 'formik';\n\ninterface MyFormValues {\n  firstName: string;\n}\n\nexport const MyApp: React.FC<{}> = () => {\n  const initialValues: MyFormValues = { firstName: '' };\n  return (\n    <div>\n      <h1>My Example</h1>\n      <Formik\n        initialValues={initialValues}\n        onSubmit={(values, actions) => {\n          console.log({ values, actions });\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }}\n      >\n        <Form>\n          <label htmlFor=\"firstName\">First Name</label>\n          <Field id=\"firstName\" name=\"firstName\" placeholder=\"First Name\" />\n          <button type=\"submit\">Submit</button>\n        </Form>\n      </Formik>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Validation with ErrorMessage Component in React/Formik\nDESCRIPTION: Example showing how to implement form validation using Formik's ErrorMessage component with Yup schema validation. Demonstrates the replacement of manual error checking with the ErrorMessage component.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/api/errormessage.md#2025-04-16_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\nimport React from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from \"yup\";\n\nconst SignupSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'Too Short!')\n    .max(70, 'Too Long!')\n    .required('Required'),\n  email: Yup.string()\n    .email('Invalid email')\n    .required('Required'),\n});\n\nexport const ValidationSchemaExample = () => (\n  <div>\n    <h1>Signup</h1>\n    <Formik\n      initialValues={{\n        name: '',\n        email: '',\n      }}\n      validationSchema={SignupSchema}\n      onSubmit={values => {\n        // same shape as initial values\n        console.log(values);\n      }}\n    >\n      {({ errors, touched }) => (\n        <Form>\n          <Field name=\"name\"  />\n-           {errors.name && touched.name ? (\n-            <div>{errors.name}</div>\n-          ) : null}\n+         <ErrorMessage name=\"name\" />\n          <Field name=\"email\" type=\"email\" />\n-           {errors.email && touched.email ? (\n-            <div>{errors.email}</div>\n-          ) : null}\n+         <ErrorMessage name=\"email\" />\n          <button type=\"submit\">Submit</button>\n        </Form>\n      )}\n    </Formik>\n  </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Synchronous and Asynchronous Form Validation in Formik\nDESCRIPTION: Examples of both synchronous and asynchronous form-level validation functions using Formik's validate prop. The synchronous version validates email format while the async version checks for restricted usernames.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/guides/validation.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Synchronous validation\nconst validate = (values, props /* only available when using withFormik */) => {\n  const errors = {};\n\n  if (!values.email) {\n    errors.email = 'Required';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = 'Invalid email address';\n  }\n\n  //...\n\n  return errors;\n};\n\n// Async Validation\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst validate = (values, props /* only available when using withFormik */) => {\n  return sleep(2000).then(() => {\n    const errors = {};\n    if (['admin', 'null', 'god'].includes(values.username)) {\n      errors.username = 'Nice try';\n    }\n    // ...\n    return errors;\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Using withFormik Higher-Order Component with TypeScript\nDESCRIPTION: This example shows how to use the withFormik() higher-order component with TypeScript. It demonstrates type definitions for form values, props, and how to properly type the withFormik() function and its configuration object.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/guides/typescript.md#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport * as Yup from 'yup';\nimport { withFormik, FormikProps, FormikErrors, Form, Field } from 'formik';\n\n// Shape of form values\ninterface FormValues {\n  email: string;\n  password: string;\n}\n\ninterface OtherProps {\n  message: string;\n}\n\n// Aside: You may see InjectedFormikProps<OtherProps, FormValues> instead of what comes below in older code.. InjectedFormikProps was artifact of when Formik only exported a HoC. It is also less flexible as it MUST wrap all props (it passes them through).\nconst InnerForm = (props: OtherProps & FormikProps<FormValues>) => {\n  const { touched, errors, isSubmitting, message } = props;\n  return (\n    <Form>\n      <h1>{message}</h1>\n      <Field type=\"email\" name=\"email\" />\n      {touched.email && errors.email && <div>{errors.email}</div>}\n\n      <Field type=\"password\" name=\"password\" />\n      {touched.password && errors.password && <div>{errors.password}</div>}\n\n      <button type=\"submit\" disabled={isSubmitting}>\n        Submit\n      </button>\n    </Form>\n  );\n};\n\n// The type of props MyForm receives\ninterface MyFormProps {\n  initialEmail?: string;\n  message: string; // if this passed all the way through you might do this or make a union type\n}\n\n// Wrap our form with the withFormik HoC\nconst MyForm = withFormik<MyFormProps, FormValues>({\n  // Transform outer props into form values\n  mapPropsToValues: props => {\n    return {\n      email: props.initialEmail || '',\n      password: '',\n    };\n  },\n\n  // Add a custom validation function (this can be async too!)\n  validate: (values: FormValues) => {\n    let errors: FormikErrors<FormValues> = {};\n    if (!values.email) {\n      errors.email = 'Required';\n    } else if (!isValidEmail(values.email)) {\n      errors.email = 'Invalid email address';\n    }\n    return errors;\n  },\n\n  handleSubmit: values => {\n    // do submitting things\n  },\n})(InnerForm);\n\n// Use <MyForm /> wherevs\nconst Basic = () => (\n  <div>\n    <h1>My App</h1>\n    <p>This can be anywhere in your application</p>\n    <MyForm message=\"Sign up\" />\n  </div>\n);\n\nexport default Basic;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Text Field Component with useField in TypeScript\nDESCRIPTION: Example showing how to create a custom text field component using useField hook with TypeScript, including form setup with Formik and field validation display.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/api/useField.md#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { useField, Form, FormikProps, Formik } from 'formik';\n\ninterface Values {\n  firstName: string;\n  lastName: string;\n  email: string;\n}\n\nconst MyTextField = ({ label, ...props }) => {\n  const [field, meta] = useField(props);\n  return (\n    <>\n      <label>\n        {label}\n        <input {...field} {...props} />\n      </label>\n      {meta.touched && meta.error ? (\n        <div className=\"error\">{meta.error}</div>\n      ) : null}\n    </>\n  );\n};\n\nconst Example = () => (\n  <div>\n    <h1>My Form</h1>\n    <Formik\n      initialValues={{\n        email: '',\n        firstName: 'red',\n        lastName: '',\n      }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n    >\n      {(props: FormikProps<Values>) => (\n        <Form>\n          <MyTextField name=\"firstName\" type=\"text\" label=\"First Name\" />\n          <MyTextField name=\"lastName\" type=\"text\" label=\"Last Name\" />\n          <MyTextField name=\"email\" type=\"email\" label=\"Email\" />\n          <button type=\"submit\">Submit</button>\n        </Form>\n      )}\n    </Formik>\n  </div>\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Formik Field Component Usage\nDESCRIPTION: Example showing different ways to use the Field component including basic inputs, select dropdowns, and custom components with form validation.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/api/field.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Field, Form, Formik, FormikProps } from 'formik';\n\nconst MyInput = ({ field, form, ...props }) => {\n  return <input {...field} {...props} />;\n};\n\nconst Example = () => (\n  <div>\n    <h1>My Form</h1>\n    <Formik\n      initialValues={{ email: '', color: 'red', firstName: '', lastName: '' }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n    >\n      {(props: FormikProps<any>) => (\n        <Form>\n          <Field type=\"email\" name=\"email\" placeholder=\"Email\" />\n          <Field as=\"select\" name=\"color\">\n            <option value=\"red\">Red</option>\n            <option value=\"green\">Green</option>\n            <option value=\"blue\">Blue</option>\n          </Field>\n\n          <Field name=\"lastName\">\n            {({\n              field,\n              form: { touched, errors },\n              meta,\n            }) => (\n              <div>\n                <input type=\"text\" placeholder=\"Email\" {...field} />\n                {meta.touched && meta.error && (\n                  <div className=\"error\">{meta.error}</div>\n                )}\n              </div>\n            )}\n          </Field>\n          <Field name=\"lastName\" placeholder=\"Doe\" component={MyInput} />\n          <button type=\"submit\">Submit</button>\n        </Form>\n      )}\n    </Formik>\n  </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Handling Arrays in Formik Forms (JSX)\nDESCRIPTION: This example shows how to use bracket notation in Formik's 'name' prop to handle arrays. It creates a form with fields for an array of friends' names.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/guides/arrays.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Formik, Form, Field } from 'formik';\n\nexport const BasicArrayExample = () => (\n  <div>\n    <h1>Friends</h1>\n    <Formik\n      initialValues={{\n        friends: ['jared', 'ian'],\n      }}\n      onSubmit={values => {\n        // same shape as initial values\n        console.log(values);\n      }}\n    >\n      <Form>\n        <Field name=\"friends[0]\" />\n        <Field name=\"friends[1]\" />\n        <button type=\"submit\">Submit</button>\n      </Form>\n    </Formik>\n  </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Using useFormik() Hook in React Component\nDESCRIPTION: This snippet demonstrates how to use the useFormik() hook to create a simple signup form in a React component. It shows the initialization of form values, handling form submission, and binding form inputs to Formik.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/api/useFormik.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { useFormik } from 'formik';\n\nconst SignupForm = () => {\n  const formik = useFormik({\n    initialValues: {\n      firstName: '',\n      lastName: '',\n      email: '',\n    },\n    onSubmit: values => {\n      alert(JSON.stringify(values, null, 2));\n    },\n  });\n  return (\n    <form onSubmit={formik.handleSubmit}>\n      <label htmlFor=\"firstName\">First Name</label>\n      <input\n        id=\"firstName\"\n        name=\"firstName\"\n        type=\"text\"\n        onChange={formik.handleChange}\n        value={formik.values.firstName}\n      />\n      <label htmlFor=\"lastName\">Last Name</label>\n      <input\n        id=\"lastName\"\n        name=\"lastName\"\n        type=\"text\"\n        onChange={formik.handleChange}\n        value={formik.values.lastName}\n      />\n      <label htmlFor=\"email\">Email Address</label>\n      <input\n        id=\"email\"\n        name=\"email\"\n        type=\"email\"\n        onChange={formik.handleChange}\n        value={formik.values.email}\n      />\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Schema Validation with Yup in Formik\nDESCRIPTION: Implementation of form validation using Yup schema validation. Demonstrates validation for firstName, lastName, and email fields with custom validation rules.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/guides/validation.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Formik, Form, Field } from 'formik';\nimport * as Yup from 'yup';\n\nconst SignupSchema = Yup.object().shape({\n  firstName: Yup.string()\n    .min(2, 'Too Short!')\n    .max(50, 'Too Long!')\n    .required('Required'),\n  lastName: Yup.string()\n    .min(2, 'Too Short!')\n    .max(50, 'Too Long!')\n    .required('Required'),\n  email: Yup.string().email('Invalid email').required('Required'),\n});\n\nexport const ValidationSchemaExample = () => (\n  <div>\n    <h1>Signup</h1>\n    <Formik\n      initialValues={{\n        firstName: '',\n        lastName: '',\n        email: '',\n      }}\n      validationSchema={SignupSchema}\n      onSubmit={values => {\n        // same shape as initial values\n        console.log(values);\n      }}\n    >\n      {({ errors, touched }) => (\n        <Form>\n          <Field name=\"firstName\" />\n          {errors.firstName && touched.firstName ? (\n            <div>{errors.firstName}</div>\n          ) : null}\n          <Field name=\"lastName\" />\n          {errors.lastName && touched.lastName ? (\n            <div>{errors.lastName}</div>\n          ) : null}\n          <Field name=\"email\" type=\"email\" />\n          {errors.email && touched.email ? <div>{errors.email}</div> : null}\n          <button type=\"submit\">Submit</button>\n        </Form>\n      )}\n    </Formik>\n  </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing FastField and Field Components in a Formik Form (JSX)\nDESCRIPTION: This example demonstrates the usage of <FastField /> and <Field /> components within a Formik form. It shows how <FastField /> optimizes rendering for specific form fields, while <Field /> updates for all changes to Formik state.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/api/fastfield.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Formik, Field, FastField, Form } from 'formik';\nimport * as Yup from 'yup';\n\nconst Basic = () => (\n  <div>\n    <h1>Sign Up</h1>\n    <Formik\n      initialValues={{\n        firstName: '',\n        lastName: '',\n        email: '',\n      }}\n      validationSchema={Yup.object().shape({\n        firstName: Yup.string().required(),\n        middleInitial: Yup.string(),\n        lastName: Yup.string().required(),\n        email: Yup.string().email().required(),\n      })}\n      onSubmit={values => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n        }, 500);\n      }}\n    >\n      {formikProps => (\n        <Form>\n          {/** This <FastField> only updates for changes made to\n           values.firstName, touched.firstName, errors.firstName */}\n          <label htmlFor=\"firstName\">First Name</label>\n          <FastField name=\"firstName\" placeholder=\"Weezy\" />\n\n          {/** Updates for all changes because it's from the\n           top-level formikProps which get all updates */}\n          {formikProps.touched.firstName && formikProps.errors.firstName && (\n            <div>{formikProps.errors.firstName}</div>\n          )}\n\n          <label htmlFor=\"middleInitial\">Middle Initial</label>\n          <FastField name=\"middleInitial\" placeholder=\"F\">\n            {({ field, form, meta }) => (\n              <div>\n                <input {...field} />\n                {/**\n                 * This updates normally because it's from the same slice of Formik state,\n                 * i.e. path to the object matches the name of this <FastField />\n                 */}\n                {meta.touched ? meta.error : null}\n\n                {/** This won't ever update since it's coming from\n                 from another <Field>/<FastField>'s (i.e. firstName's) slice   */}\n                {form.touched.firstName && form.errors.firstName\n                  ? form.errors.firstName\n                  : null}\n\n                {/* This doesn't update either */}\n                {form.submitCount}\n\n                {/* Imperative methods still work as expected */}\n                <button\n                  type=\"button\"\n                  onClick={form.setFieldValue('middleInitial', 'J')}\n                >\n                  J\n                </button>\n              </div>\n            )}\n          </FastField>\n\n          {/** Updates for all changes to Formik state\n           and all changes by all <Field>s and <FastField>s */}\n          <label htmlFor=\"lastName\">LastName</label>\n          <Field name=\"lastName\" placeholder=\"Baby\">\n            {({ field, form, meta }) => (\n              <div>\n                <input {...field} />\n                {/**  Works because this is inside\n                 of a <Field/>, which gets all updates */}\n                {form.touched.firstName && form.errors.firstName\n                  ? form.errors.firstName\n                  : null}\n              </div>\n            )}\n          </Field>\n\n          {/** Updates for all changes to Formik state and\n           all changes by all <Field>s and <FastField>s */}\n          <label htmlFor=\"email\">Email</label>\n          <Field name=\"email\" placeholder=\"jane@acme.com\" type=\"email\" />\n\n          <button type=\"submit\">Submit</button>\n        </Form>\n      )}\n    </Formik>\n  </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Field-Level Validation in Formik\nDESCRIPTION: Example of implementing field-level validation for email and username fields using validate prop on Field components.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/guides/validation.md#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Formik, Form, Field } from 'formik';\n\nfunction validateEmail(value) {\n  let error;\n  if (!value) {\n    error = 'Required';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\n    error = 'Invalid email address';\n  }\n  return error;\n}\n\nfunction validateUsername(value) {\n  let error;\n  if (value === 'admin') {\n    error = 'Nice try!';\n  }\n  return error;\n}\n\nexport const FieldLevelValidationExample = () => (\n  <div>\n    <h1>Signup</h1>\n    <Formik\n      initialValues={{\n        username: '',\n        email: '',\n      }}\n      onSubmit={values => {\n        // same shape as initial values\n        console.log(values);\n      }}\n    >\n      {({ errors, touched, isValidating }) => (\n        <Form>\n          <Field name=\"email\" validate={validateEmail} />\n          {errors.email && touched.email && <div>{errors.email}</div>}\n\n          <Field name=\"username\" validate={validateUsername} />\n          {errors.username && touched.username && <div>{errors.username}</div>}\n\n          <button type=\"submit\">Submit</button>\n        </Form>\n      )}\n    </Formik>\n  </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Yup Validation Schema with Cross-field References\nDESCRIPTION: Example showing how to use Yup's context feature for cross-field validation across nested objects using the $ prefix for references.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/packages/formik/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst deepNestedSchema = Yup.object({\n  object: Yup.object({\n    nestedField: Yup.number().required(),\n  }),\n  object2: Yup.object({\n    nestedFieldWithRef: Yup.number()\n      .min(0)\n      .max(Yup.ref('$object.nestedField')),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Validation in Formik\nDESCRIPTION: Example of an asynchronous validation function for Formik that returns a Promise. This demonstrates how to perform delayed validation like server-side checks for username availability.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/api/withFormik.md#2025-04-16_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// Async Validation\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst validate = (values, props) => {\n  return sleep(2000).then(() => {\n    const errors = {};\n    if (['admin', 'null', 'god'].includes(values.username)) {\n      errors.username = 'Nice try';\n    }\n    // ...\n    return errors;\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Using FieldArray with Array of Objects in React and Formik\nDESCRIPTION: This snippet shows how to use FieldArray to iterate through an array of objects, demonstrating the naming convention for accessing nested properties within the array.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/api/fieldarray.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Form>\n  <FieldArray\n    name=\"friends\"\n    render={arrayHelpers => (\n      <div>\n        {values.friends.map((friend, index) => (\n          <div key={index}>\n            {/** both these conventions do the same */}\n            <Field name={`friends[${index}].name`} />\n            <Field name={`friends.${index}.age`} />\n\n            <button type=\"button\" onClick={() => arrayHelpers.remove(index)}>\n              -\n            </button>\n          </div>\n        ))}\n        <button\n          type=\"button\"\n          onClick={() => arrayHelpers.push({ name: '', age: '' })}\n        >\n          +\n        </button>\n      </div>\n    )}\n  />\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Synchronous Form Validation in Formik\nDESCRIPTION: Example of implementing synchronous form validation using a custom validate function that returns an errors object.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/api/formik.md#2025-04-16_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n// Synchronous validation\nconst validate = values => {\n  const errors = {};\n\n  if (!values.email) {\n    errors.email = 'Required';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = 'Invalid email address';\n  }\n\n  //...\n\n  return errors;\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Field Component Usage in React with Formik\nDESCRIPTION: This code snippet demonstrates the change in usage of the Field component in Formik, transitioning from the deprecated render prop to a child callback function. This change aligns with React Context Consumer's usage pattern.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/migrating-v2.md#2025-04-16_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n- <Field name=\"firstName\" render={props => ....} />\n+ <Field name=\"firstName\">{props => ... }</Field>\n```\n\n----------------------------------------\n\nTITLE: Defining Validation Schema for FieldArray in Yup\nDESCRIPTION: This snippet demonstrates how to create a Yup validation schema for a FieldArray, including array-level and nested object-level validations.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/api/fieldarray.md#2025-04-16_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst schema = Yup.object().shape({\n  friends: Yup.array()\n    .of(\n      Yup.object().shape({\n        name: Yup.string().min(4, 'too short').required('Required'), // these constraints take precedence\n        salary: Yup.string().min(3, 'cmon').required('Required'), // these constraints take precedence\n      })\n    )\n    .required('Must have friends') // these constraints are shown if and only if inner constraints are satisfied\n    .min(3, 'Minimum of 3 friends'),\n});\n```\n\n----------------------------------------\n\nTITLE: Form Validation with Field Visit Tracking\nDESCRIPTION: Enhanced form validation that includes field visit tracking using Formik's touched property. Shows validation errors only after a field has been visited using onBlur event handlers.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/tutorial.md#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { useFormik } from 'formik';\n\nconst SignupForm = () => {\n  const formik = useFormik({\n    initialValues: {\n      firstName: '',\n      lastName: '',\n      email: '',\n    },\n    validate,\n    onSubmit: values => {\n      alert(JSON.stringify(values, null, 2));\n    },\n  });\n  return (\n    <form onSubmit={formik.handleSubmit}>\n      <label htmlFor=\"firstName\">First Name</label>\n      <input\n        id=\"firstName\"\n        name=\"firstName\"\n        type=\"text\"\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        value={formik.values.firstName}\n      />\n      {formik.touched.firstName && formik.errors.firstName ? (\n        <div>{formik.errors.firstName}</div>\n      ) : null}\n\n      <label htmlFor=\"lastName\">Last Name</label>\n      <input\n        id=\"lastName\"\n        name=\"lastName\"\n        type=\"text\"\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        value={formik.values.lastName}\n      />\n      {formik.touched.lastName && formik.errors.lastName ? (\n        <div>{formik.errors.lastName}</div>\n      ) : null}\n\n      <label htmlFor=\"email\">Email Address</label>\n      <input\n        id=\"email\"\n        name=\"email\"\n        type=\"email\"\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        value={formik.values.email}\n      />\n      {formik.touched.email && formik.errors.email ? (\n        <div>{formik.errors.email}</div>\n      ) : null}\n\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: ErrorMessage with Render Prop\nDESCRIPTION: Example demonstrating the use of the render prop pattern with ErrorMessage component for custom error rendering.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/api/errormessage.md#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// the render callback will only be called when the\n// field has been touched and an error exists and subsequent updates.\n<ErrorMessage name=\"email\" render={msg => <div>{msg}</div>} />\n```\n\n----------------------------------------\n\nTITLE: Using useField Hook with Different Component Patterns\nDESCRIPTION: Demonstrates three different patterns for using useField: basic input integration, direct field usage, and custom component implementation with setValue helper.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/api/useField.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { useField } from 'formik';\n\nfunction MyTextField(props) {\n  // this will return field props for an <input />\n  const [field, meta, helpers] = useField(props.name);\n  return (\n    <>\n      <input {...field} {...props} />\n      {meta.error && meta.touched && <div>{meta.error}</div>}\n    </>\n  );\n}\n\nfunction MyInput(props) {\n  // this will return field exactly like <Field>{({ field }) => ... }</Field>\n  const [field, meta] = useField(props);\n  return (\n    <>\n      <input {...field} {...props} />\n      {meta.error && meta.touched && <div>{meta.error}</div>}\n    </>\n  );\n}\n\nfunction MyOtherComponent(props) {\n  // This isn't an input, so instead of using the values in 'field' directly,\n  // we'll use 'meta' and 'helpers'.\n  const [field, meta, helpers] = useField(props.name);\n\n  const { value } = meta;\n  const { setValue } = helpers;\n\n  const isSelected = v => (v === value ? 'selected' : '');\n\n  return (\n    <div className=\"itemsPerPage\">\n      <button onClick={() => setValue(5)} className={isSelected(5)}>\n        5\n      </button>\n      <button onClick={() => setValue(10)} className={isSelected(10)}>\n        10\n      </button>\n      <button onClick={() => setValue(25)} className={isSelected(25)}>\n        25\n      </button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom ErrorMessage Component with connect() in React\nDESCRIPTION: Demonstrates how to use connect() to create a custom ErrorMessage component that displays field errors. It utilizes the Formik context to access errors and touched states.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/api/connect.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { connect, getIn } from 'formik';\n\n// This component renders an error message if a field has\n// an error and it's already been touched.\nconst ErrorMessage = props => {\n  // All FormikProps available on props.formik!\n  const error = getIn(props.formik.errors, props.name);\n  const touch = getIn(props.formik.touched, props.name);\n  return touch && error ? error : null;\n};\n\nexport default connect(ErrorMessage);\n```\n\n----------------------------------------\n\nTITLE: TypeScript FormikActions Import Update\nDESCRIPTION: Shows how to update the FormikActions type import in Formik v2, which has been renamed to FormikHelpers.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/packages/formik/MIGRATING-v2.md#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FormikActions } from 'formik';\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FormikHelpers as FormikActions } from 'formik';\n```\n\n----------------------------------------\n\nTITLE: Using Formik's Form Component in JSX\nDESCRIPTION: This snippet demonstrates the equivalence between using Formik's <Form /> component and manually connecting an HTML form to Formik's handlers. The <Form /> component automatically hooks into handleSubmit and handleReset methods from Formik context.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/api/form.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// so...\n<Form />\n\n// is identical to this...\n<form onReset={formikProps.handleReset} onSubmit={formikProps.handleSubmit} {...props} />\n```\n\n----------------------------------------\n\nTITLE: Formik Children Prop Pattern\nDESCRIPTION: Shows how to use Formik's children prop pattern, either as a function or React nodes, to create forms with full access to form state.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/api/formik.md#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Formik children={props => <ContactForm {...props} />} />\n\n// or...\n\n<Formik>\n  {({ handleSubmit, handleChange, handleBlur, values, errors }) => (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        value={values.name}\n        name=\"name\"\n      />\n      {errors.name &&\n        <div>\n          {errors.name}\n        </div>}\n      <button type=\"submit\">Submit</button>\n    </form>\n  )}\n</Formik>\n```\n\n----------------------------------------\n\nTITLE: Embedding CodeSandbox Demo for Basic Formik Example in React\nDESCRIPTION: This code snippet embeds a CodeSandbox iframe that demonstrates a basic Formik implementation. The iframe links to a Formik example from the official repository and includes styling and security attributes.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/examples/basic.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<iframe\n  src=\"https://codesandbox.io/embed/github/formik/formik/tree/main/examples/basic?fontsize=14&hidenavigation=1&theme=dark\"\n  style={{ width:'100%', height: '100%', border:0, borderRadius: 4, overflow: 'hidden'}}\n  title=\"formik/formik: async-submission\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n  ></iframe>\n```\n\n----------------------------------------\n\nTITLE: Field Validation Implementation\nDESCRIPTION: Example demonstrating both synchronous and asynchronous field-level validation in Formik forms.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/api/field.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Formik, Form, Field } from 'formik';\n\n// Synchronous validation function\nconst validate = value => {\n  let errorMessage;\n  if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\n    errorMessage = 'Invalid email address';\n  }\n  return errorMessage;\n};\n\n// Async validation function\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst validateAsync = value => {\n  return sleep(2000).then(() => {\n    if (['admin', 'null', 'god'].includes(value)) {\n      return 'Nice try';\n    }\n  });\n};\n\n// example usage\nconst MyForm = () => (\n  <Formik\n    initialValues={{ email: '', username: '' }}\n    onSubmit={values => alert(JSON.stringify(values, null, 2))}\n  >\n    {({ errors, touched }) => (\n      <Form>\n        <Field validate={validate} name=\"email\" type=\"email\" />\n        {errors.email && touched.email ? <div>{errors.email}</div> : null}\n        <Field validate={validateAsync} name=\"username\" />\n        {errors.username && touched.username ? (\n          <div>{errors.username}</div>\n        ) : null}\n        <button type=\"submit\">Submit</button>\n      </Form>\n    )}\n  </Formik>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Forms with Formik Component Pattern\nDESCRIPTION: Example showing how to use Formik's component prop to render a form with validation and error handling. Demonstrates handling submit, change, and blur events.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/api/formik.md#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Formik component={ContactForm} />;\n\nconst ContactForm = ({\n  handleSubmit,\n  handleChange,\n  handleBlur,\n  values,\n  errors,\n}) => (\n  <form onSubmit={handleSubmit}>\n    <input\n      type=\"text\"\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={values.name}\n      name=\"name\"\n    />\n    {errors.name && <div>{errors.name}</div>}\n    <button type=\"submit\">Submit</button>\n  </form>\n);\n```\n\n----------------------------------------\n\nTITLE: Yup Schema with Limited Cross-field Validation\nDESCRIPTION: Example demonstrating the limitations of Yup's default behavior where cross-field validation only works within the same field object.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/packages/formik/CHANGELOG.md#2025-04-16_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst deepNestedSchema = Yup.object({\n  object: Yup.object({\n    nestedField: Yup.number().required(),\n  }),\n  object2: Yup.object({\n    // this doesn't work because `object.nestedField` is outside of `object2`\n    nestedFieldWithRef: Yup.number()\n      .min(0)\n      .max(Yup.ref('object.nestedField')),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Form Validation in Formik\nDESCRIPTION: Demonstrates asynchronous form validation using a Promise-based validate function with artificial delay.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/api/formik.md#2025-04-16_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n// Async Validation\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst validate = values => {\n  return sleep(2000).then(() => {\n    const errors = {};\n    if (['admin', 'null', 'god'].includes(values.username)) {\n      errors.username = 'Nice try';\n    }\n    // ...\n    return errors;\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Manual Validation Triggering in Formik\nDESCRIPTION: Implementation showing how to manually trigger form and field validation using validateForm and validateField methods.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/guides/validation.md#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Formik, Form, Field } from 'formik';\n\nfunction validateEmail(value) {\n  let error;\n  if (!value) {\n    error = 'Required';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\n    error = 'Invalid email address';\n  }\n  return error;\n}\n\nfunction validateUsername(value) {\n  let error;\n  if (value === 'admin') {\n    error = 'Nice try!';\n  }\n  return error;\n}\n\nexport const FieldLevelValidationExample = () => (\n  <div>\n    <h1>Signup</h1>\n    <Formik\n      initialValues={{\n        username: '',\n        email: '',\n      }}\n      onSubmit={values => {\n        // same shape as initial values\n        console.log(values);\n      }}\n    >\n      {({ errors, touched, validateField, validateForm }) => (\n        <Form>\n          <Field name=\"email\" validate={validateEmail} />\n          {errors.email && touched.email && <div>{errors.email}</div>}\n\n          <Field name=\"username\" validate={validateUsername} />\n          {errors.username && touched.username && <div>{errors.username}</div>}\n          {/** Trigger field-level validation\n           imperatively */}\n          <button type=\"button\" onClick={() => validateField('username')}>\n            Check Username\n          </button>\n          {/** Trigger form-level validation\n           imperatively */}\n          <button\n            type=\"button\"\n            onClick={() => validateForm().then(() => console.log('blah'))}\n          >\n            Validate All\n          </button>\n          <button type=\"submit\">Submit</button>\n        </Form>\n      )}\n    </Formik>\n  </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Breaking Change Example - No Longer Working in Formik 3\nDESCRIPTION: Example showing code that no longer works in Formik 3 Alpha due to the breaking change. This pattern uses a curried version of the field.onChange method which is no longer supported.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/website/src/blog/formik-3-alpha.md#2025-04-16_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport const MyTextField = props => {\n  const [field] = useField(props);\n  const onChange = e => {\n    e.persist();\n    if (e.target.value === 'foo') {\n      // Using the curried version of onChange,\n      // effectively equivalent to setFieldValue() no longer works\n      field.onChange(props.name)('bar');\n    } else {\n      field.onChange(e);\n    }\n  };\n  return <input {...field} onChange={onChange} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Auto-Submit Functionality with useFormikContext in React\nDESCRIPTION: This code demonstrates how to use the useFormikContext hook to create a two-factor verification form that automatically submits when a 6-digit code is entered. It showcases accessing form values and the submitForm function from context, and using them in a useEffect hook for auto-submission.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/api/useFormikContext.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { useFormikContext, Formik, Form, Field } from 'formik';\n\nconst AutoSubmitToken = () => {\n  // Grab values and submitForm from context\n  const { values, submitForm } = useFormikContext();\n  React.useEffect(() => {\n    // Submit the form imperatively as an effect as soon as form values.token are 6 digits long\n    if (values.token.length === 6) {\n      submitForm();\n    }\n  }, [values, submitForm]);\n  return null;\n};\n\nconst TwoFactorVerificationForm = () => (\n  <div>\n    <h1>2-step Verification</h1>\n    <p>Please enter the 6 digit code sent to your device</p>\n    <Formik\n      initialValues={{ token: '' }}\n      validate={values => {\n        const errors = {};\n        if (values.token.length < 5) {\n          errors.token = 'Invalid code. Too short.';\n        }\n        return errors;\n      }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n    >\n      <Form>\n        <Field name=\"token\" type=\"tel\" />\n        <AutoSubmitToken />\n      </Form>\n    </Formik>\n  </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Handling Nested Objects in Formik Forms (JSX)\nDESCRIPTION: This snippet demonstrates how to use dot notation in Formik's 'name' prop to handle nested objects. It creates a form with nested social profile fields for Facebook and Twitter.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/guides/arrays.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Formik, Form, Field } from 'formik';\n\nexport const NestedExample = () => (\n  <div>\n    <h1>Social Profiles</h1>\n    <Formik\n      initialValues={{\n        social: {\n          facebook: '',\n          twitter: '',\n        },\n      }}\n      onSubmit={values => {\n        // same shape as initial values\n        console.log(values);\n      }}\n    >\n      <Form>\n        <Field name=\"social.facebook\" />\n        <Field name=\"social.twitter\" />\n        <button type=\"submit\">Submit</button>\n      </Form>\n    </Formik>\n  </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Checking for Empty Arrays in Formik\nDESCRIPTION: A utility function that determines if a value is an empty array. Returns a boolean.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/api/utils.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nisEmptyArray: (value?: any) => boolean\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Form with Formik in React Native\nDESCRIPTION: This snippet demonstrates a minimal implementation of a Formik form in React Native. It showcases how to handle form submission, input changes, and blur events using Formik's props and methods with React Native components.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/guides/react-native.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// Formik x React Native example\nimport React from 'react';\nimport { Button, TextInput, View } from 'react-native';\nimport { Formik } from 'formik';\n\nexport const MyReactNativeForm = props => (\n  <Formik\n    initialValues={{ email: '' }}\n    onSubmit={values => console.log(values)}\n  >\n    {({ handleChange, handleBlur, handleSubmit, values }) => (\n      <View>\n        <TextInput\n          onChangeText={handleChange('email')}\n          onBlur={handleBlur('email')}\n          value={values.email}\n        />\n        <Button onPress={handleSubmit} title=\"Submit\" />\n      </View>\n    )}\n  </Formik>\n);\n```\n\n----------------------------------------\n\nTITLE: Checkbox and Multi-Select Example\nDESCRIPTION: Comprehensive example showing new checkbox and multi-select functionality in Formik v2.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/migrating-v2.md#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Formik, Field, Form } from 'formik';\nimport { Debug } from './Debug';\n\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst CheckboxExample = () => (\n  <div>\n    <h1>Checkboxes</h1>\n    <p>\n      This example demonstrates how to properly create checkboxes with Formik.\n    </p>\n    <Formik\n      initialValues={{\n        isAwesome: false,\n        terms: false,\n        newsletter: false,\n        jobType: ['designer'],\n        location: [],\n      }}\n      onSubmit={async values => {\n        await sleep(1000);\n        alert(JSON.stringify(values, null, 2));\n      }}\n    >\n      {({ isSubmitting, getFieldProps, handleChange, handleBlur, values }) => (\n        <Form>\n          <div className=\"label\">Basic Info</div>\n          <label>\n            <Field type=\"checkbox\" name=\"isAwesome\" />\n            Are you awesome?\n          </label>\n          <div className=\"label\">\n            What best describes you? (check all that apply)\n          </div>\n          <label>\n            <Field type=\"checkbox\" name=\"jobType\" value=\"designer\" />\n            Designer\n          </label>\n          <label>\n            <Field type=\"checkbox\" name=\"jobType\" value=\"developer\" />\n            Developer\n          </label>\n          <label>\n            <Field type=\"checkbox\" name=\"jobType\" value=\"product\" />\n            Product Manager\n          </label>\n          <label>\n            <input\n              type=\"checkbox\"\n              name=\"jobType\"\n              value=\"founder\"\n              checked={values.jobType.includes('founder')}\n              onChange={handleChange}\n              onBlur={handleBlur}\n            />\n            CEO / Founder\n          </label>\n          <label htmlFor=\"location\">Where do you work?</label>\n          <Field\n            component=\"select\"\n            id=\"location\"\n            name=\"location\"\n            multiple={true}\n          >\n            <option value=\"NY\">New York</option>\n            <option value=\"SF\">San Francisco</option>\n            <option value=\"CH\">Chicago</option>\n            <option value=\"OTHER\">Other</option>\n          </Field>\n          <label>\n            <Field type=\"checkbox\" name=\"terms\" />I accept the terms and\n            conditions.\n          </label>\n          {!!values.terms ? (\n            <div>\n              <label>\n                <Field type=\"checkbox\" name=\"newsletter\" />\n                Send me the newsletter <em style={{ color: 'rebeccapurple' }}>\n                  (This is only shown if terms = true)\n                </em>\n              </label>\n            </div>\n          ) : null}\n          <button type=\"submit\" disabled={isSubmitting}>\n            Submit\n          </button>\n          <Debug />\n        </Form>\n      )}\n    </Formik>\n  </div>\n);\n\nexport default CheckboxExample;\n```\n\n----------------------------------------\n\nTITLE: Checking if Value is an Object in Formik\nDESCRIPTION: A type guard utility that determines if a value is an object. Returns a boolean with type narrowing.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/api/utils.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nisObject: (obj: any) => obj is Object\n```\n\n----------------------------------------\n\nTITLE: Using Formik Component with Render Props in React\nDESCRIPTION: This code shows how to use the Formik component with render props instead of the useFormik hook. It demonstrates form validation using Yup and how to handle form submission.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/tutorial.md#2025-04-16_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\n\nconst SignupForm = () => {\n  return (\n    <Formik\n      initialValues={{ firstName: '', lastName: '', email: '' }}\n      validationSchema={Yup.object({\n        firstName: Yup.string()\n          .max(15, 'Must be 15 characters or less')\n          .required('Required'),\n        lastName: Yup.string()\n          .max(20, 'Must be 20 characters or less')\n          .required('Required'),\n        email: Yup.string().email('Invalid email address').required('Required'),\n      })}\n      onSubmit={(values, { setSubmitting }) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          setSubmitting(false);\n        }, 400);\n      }}\n    >\n      {formik => (\n        <form onSubmit={formik.handleSubmit}>\n          <label htmlFor=\"firstName\">First Name</label>\n          <input\n            id=\"firstName\"\n            type=\"text\"\n            {...formik.getFieldProps('firstName')}\n          />\n          {formik.touched.firstName && formik.errors.firstName ? (\n            <div>{formik.errors.firstName}</div>\n          ) : null}\n\n          <label htmlFor=\"lastName\">Last Name</label>\n          <input\n            id=\"lastName\"\n            type=\"text\"\n            {...formik.getFieldProps('lastName')}\n          />\n          {formik.touched.lastName && formik.errors.lastName ? (\n            <div>{formik.errors.lastName}</div>\n          ) : null}\n\n          <label htmlFor=\"email\">Email Address</label>\n          <input id=\"email\" type=\"email\" {...formik.getFieldProps('email')} />\n          {formik.touched.email && formik.errors.email ? (\n            <div>{formik.errors.email}</div>\n          ) : null}\n\n          <button type=\"submit\">Submit</button>\n        </form>\n      )}\n    </Formik>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Field Component As Prop Usage\nDESCRIPTION: Shows how to use the new 'as' prop with Field component for different input types and styled components.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/migrating-v2.md#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n// <input className=\"form-input\" placeholder=\"Jane\"  />\n<Field name=\"firstName\" className=\"form-input\" placeholder=\"Jane\" />\n\n// <textarea className=\"form-textarea\"/></textarea>\n<Field name=\"message\" as=\"textarea\"  className=\"form-textarea\"/>\n\n// <select className=\"my-select\"/>\n<Field name=\"colors\" as=\"select\" className=\"my-select\">\n  <option value=\"red\">Red</option>\n  <option value=\"green\">Green</option>\n  <option value=\"blue\">Blue</option>\n</Field>\n\n// with styled-components/emotion\nconst MyStyledInput = styled.input`\n  padding: .5em;\n  border: 1px solid #eee;\n  /* ... */\n`\nconst MyStyledTextarea = MyStyledInput.withComponent('textarea');\n\n// <input className=\"czx_123\" placeholder=\"google.com\"  />\n<Field name=\"website\" as={MyStyledInput} placeholder=\"google.com\"/>\n\n// <textarea placeholder=\"Post a message...\" rows={5}></textarea>\n<Field name=\"message\" as={MyStyledTextArea} placeholder=\"Post a message..\" rows={4}/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom MDX Loader in Next.js for Documentation\nDESCRIPTION: This custom webpack loader processes MDX files by extracting front-matter metadata and injecting a wrapper Layout component export. It allows MDX documentation to be readable both on GitHub and in the Next.js application while supporting custom layouts on a per-page basis.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/website/src/blog/new-docs.md#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst fm = require('gray-matter');\n\n// Makes mdx in next.js much better by injecting necessary exports so that\n// the docs are still readable on github\n// (Shamelessly stolen from Expo.io docs)\n// @see https://github.com/expo/expo/blob/master/docs/common/md-loader.js\nmodule.exports = async function (src) {\n  const callback = this.async();\n  const { content, data } = fm(src);\n  const layout = data.layout || 'Docs';\n  const code =\n    `import { Layout${layout} } from 'components/Layout${layout}';\nexport const meta = ${JSON.stringify(data)};\nexport default ({ children, ...props }) => (\n  <Layout${layout} meta={meta} {...props}>{children}</Layout${layout}>\n);` + content;\n\n  return callback(null, code);\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom Formik Input Components in React\nDESCRIPTION: This snippet shows the JSX structure for rendering custom input components within a Formik form. It includes text inputs, a select dropdown, and a checkbox, all connected to Formik using the useField hook.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/tutorial.md#2025-04-16_snippet_12\n\nLANGUAGE: JSX\nCODE:\n```\n          <MyTextInput\n            label=\"Email Address\"\n            name=\"email\"\n            type=\"email\"\n            placeholder=\"jane@formik.com\"\n          />\n\n          <MySelect label=\"Job Type\" name=\"jobType\">\n            <option value=\"\">Select a job type</option>\n            <option value=\"designer\">Designer</option>\n            <option value=\"development\">Developer</option>\n            <option value=\"product\">Product Manager</option>\n            <option value=\"other\">Other</option>\n          </MySelect>\n\n          <MyCheckbox name=\"acceptedTerms\">\n            I accept the terms and conditions\n          </MyCheckbox>\n\n          <button type=\"submit\">Submit</button>\n        </Form>\n      </Formik>\n```\n\n----------------------------------------\n\nTITLE: Checkbox and Multi-Select Implementation\nDESCRIPTION: Comprehensive example showing how to implement checkboxes and multi-select fields in Formik 2.x, including array binding and boolean behavior.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/packages/formik/MIGRATING-v2.md#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Formik, Field, Form } from 'formik';\nimport { Debug } from './Debug';\n\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst CheckboxExample = () => (\n  <div>\n    <h1>Checkboxes</h1>\n    <p>\n      This example demonstrates how to properly create checkboxes with Formik.\n    </p>\n    <Formik\n      initialValues={{\n        isAwesome: false,\n        terms: false,\n        newsletter: false,\n        jobType: ['designer'],\n        location: [],\n      }}\n      onSubmit={async values => {\n        await sleep(1000);\n        alert(JSON.stringify(values, null, 2));\n      }}\n    >\n      {({ isSubmitting, getFieldProps, handleChange, handleBlur, values }) => (\n        <Form>\n          <div className=\"label\">Basic Info</div>\n          <label>\n            <Field type=\"checkbox\" name=\"isAwesome\" />\n            Are you awesome?\n          </label>\n          <div className=\"label\">\n            What best describes you? (check all that apply)\n          </div>\n          <label>\n            <Field type=\"checkbox\" name=\"jobType\" value=\"designer\" />\n            Designer\n          </label>\n          <label>\n            <Field type=\"checkbox\" name=\"jobType\" value=\"developer\" />\n            Developer\n          </label>\n          <label>\n            <Field type=\"checkbox\" name=\"jobType\" value=\"product\" />\n            Product Manager\n          </label>\n          <label>\n            <input\n              type=\"checkbox\"\n              name=\"jobType\"\n              value=\"founder\"\n              checked={values.jobType.includes('founder')}\n              onChange={handleChange}\n              onBlur={handleBlur}\n            />\n            CEO / Founder\n          </label>\n          <label htmlFor=\"location\">Where do you work?</label>\n          <Field\n            component=\"select\"\n            id=\"location\"\n            name=\"location\"\n            multiple={true}\n          >\n            <option value=\"NY\">New York</option>\n            <option value=\"SF\">San Francisco</option>\n            <option value=\"CH\">Chicago</option>\n            <option value=\"OTHER\">Other</option>\n          </Field>\n          <label>\n            <Field type=\"checkbox\" name=\"terms\" />I accept the terms and\n            conditions.\n          </label>\n          {!!values.terms ? (\n            <div>\n              <label>\n                <Field type=\"checkbox\" name=\"newsletter\" />\n                Send me the newsletter <em style={{ color: 'rebeccapurple' }}>\n                  (This is only shown if terms = true)\n                </em>\n              </label>\n            </div>\n          ) : null}\n          <button type=\"submit\" disabled={isSubmitting}>\n            Submit\n          </button>\n          <Debug />\n        </Form>\n      )}\n    </Formik>\n  </div>\n);\n\nexport default CheckboxExample;\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server in TSDX\nDESCRIPTION: Command to run the project in development/watch mode with auto-rebuild on changes. Includes formatted error messages compatible with VS Code.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/packages/formik-native/CONTRIBUTING.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm start\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Basic Formik Usage with React\nDESCRIPTION: Example of using Formik to handle form state, validation, and submission in a React component. It demonstrates the use of Formik's render props API.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/overview.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Formik } from 'formik';\n\nconst Basic = () => (\n  <div>\n    <h1>Anywhere in your app!</h1>\n    <Formik\n      initialValues={{ email: '', password: '' }}\n      validate={values => {\n        const errors = {};\n        if (!values.email) {\n          errors.email = 'Required';\n        } else if (\n          !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\n        ) {\n          errors.email = 'Invalid email address';\n        }\n        return errors;\n      }}\n      onSubmit={(values, { setSubmitting }) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          setSubmitting(false);\n        }, 400);\n      }}\n    >\n      {({\n        values,\n        errors,\n        touched,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isSubmitting,\n        /* and other goodies */\n      }) => (\n        <form onSubmit={handleSubmit}>\n          <input\n            type=\"email\"\n            name=\"email\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.email}\n          />\n          {errors.email && touched.email && errors.email}\n          <input\n            type=\"password\"\n            name=\"password\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.password}\n          />\n          {errors.password && touched.password && errors.password}\n          <button type=\"submit\" disabled={isSubmitting}>\n            Submit\n          </button>\n        </form>\n      )}\n    </Formik>\n  </div>\n);\n\nexport default Basic;\n```\n\n----------------------------------------\n\nTITLE: Accessing Nested Object Properties in Formik\nDESCRIPTION: A utility function that safely retrieves a value from a nested object using a string or array path. Includes optional default value and position parameters.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/api/utils.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetIn(obj: any, key: string | string[], def?: any, p?: number): any\n```\n\n----------------------------------------\n\nTITLE: Running TSDX Tests\nDESCRIPTION: Command to run Jest test watcher in interactive mode, by default running tests related to files changed since the last commit.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/packages/formik-native/CONTRIBUTING.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm test\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Formik v2 Checkbox and Multi-Select Example Component\nDESCRIPTION: A complete example showing how to use checkboxes and multi-select inputs in Formik v2, including single boolean checkboxes, checkbox groups for array values, and multiple select elements.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/MIGRATING-v2.md#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Formik, Field, Form } from 'formik';\nimport { Debug } from './Debug';\n\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst CheckboxExample = () => (\n  <div>\n    <h1>Checkboxes</h1>\n    <p>\n      This example demonstrates how to properly create checkboxes with Formik.\n    </p>\n    <Formik\n      initialValues={{\n        isAwesome: false,\n        terms: false,\n        newsletter: false,\n        jobType: ['designer'],\n        location: [],\n      }}\n      onSubmit={async values => {\n        await sleep(1000);\n        alert(JSON.stringify(values, null, 2));\n      }}\n    >\n      {({ isSubmitting, getFieldProps, handleChange, handleBlur, values }) => (\n        <Form>\n          {/* \n            This first checkbox will result in a boolean value being stored.\n          */}\n          <div className=\"label\">Basic Info</div>\n          <label>\n            <Field type=\"checkbox\" name=\"isAwesome\" />\n            Are you awesome?\n          </label>\n          {/* \n            Multiple checkboxes with the same name attribute, but different\n            value attributes will be considered a \"checkbox group\". Formik will automagically\n            bind the checked values to a single array for your benefit. All the add and remove\n            logic will be taken care of for you.\n          */}\n          <div className=\"label\">\n            What best describes you? (check all that apply)\n          </div>\n          <label>\n            <Field type=\"checkbox\" name=\"jobType\" value=\"designer\" />\n            Designer\n          </label>\n          <label>\n            <Field type=\"checkbox\" name=\"jobType\" value=\"developer\" />\n            Developer\n          </label>\n          <label>\n            <Field type=\"checkbox\" name=\"jobType\" value=\"product\" />\n            Product Manager\n          </label>\n          {/*\n           You do not _need_ to use <Field>/useField to get this behavior, \n           using handleChange, handleBlur, and values works as well. \n          */}\n          <label>\n            <input\n              type=\"checkbox\"\n              name=\"jobType\"\n              value=\"founder\"\n              checked={values.jobType.includes('founder')}\n              onChange={handleChange}\n              onBlur={handleBlur}\n            />\n            CEO / Founder\n          </label>\n\n          {/* \n           The <select> element will also behave the same way if \n           you pass `multiple` prop to it. \n          */}\n          <label htmlFor=\"location\">Where do you work?</label>\n          <Field\n            component=\"select\"\n            id=\"location\"\n            name=\"location\"\n            multiple={true}\n          >\n            <option value=\"NY\">New York</option>\n            <option value=\"SF\">San Francisco</option>\n            <option value=\"CH\">Chicago</option>\n            <option value=\"OTHER\">Other</option>\n          </Field>\n          <label>\n            <Field type=\"checkbox\" name=\"terms\" />I accept the terms and\n            conditions.\n          </label>\n          {/* Here's how you can use a checkbox to show / hide another field */}\n          {!!values.terms ? (\n            <div>\n              <label>\n                <Field type=\"checkbox\" name=\"newsletter\" />\n                Send me the newsletter <em style={{ color: 'rebeccapurple' }}>\n                  (This is only shown if terms = true)\n                </em>\n              </label>\n            </div>\n          ) : null}\n          <button type=\"submit\" disabled={isSubmitting}>\n            Submit\n          </button>\n          <Debug />\n        </Form>\n      )}\n    </Formik>\n  </div>\n);\n\nexport default CheckboxExample;\n```\n\n----------------------------------------\n\nTITLE: Creating a Formik Context Provider in React\nDESCRIPTION: This snippet demonstrates how to create a custom Formik context provider using React's createContext and the useFormik hook. It sets up the foundation for using Formik with React Context.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/tutorial.md#2025-04-16_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { useFormik } from 'formik';\n\n// Create empty context\nconst FormikContext = React.createContext({});\n\n// Place all of what's returned by useFormik into context\nexport const Formik = ({ children, ...props }) => {\n  const formikStateAndHelpers = useFormik(props);\n  return (\n    <FormikContext.Provider value={formikStateAndHelpers}>\n      {typeof children === 'function'\n        ? children(formikStateAndHelpers)\n        : children}\n    </FormikContext.Provider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Optimized Form Implementation Using getFieldProps\nDESCRIPTION: Enhanced version of the signup form using Formik's getFieldProps() helper to reduce boilerplate code while maintaining the same functionality\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/tutorial.md#2025-04-16_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\n\nconst SignupForm = () => {\n  const formik = useFormik({\n    initialValues: {\n      firstName: '',\n      lastName: '',\n      email: '',\n    },\n    validationSchema: Yup.object({\n      firstName: Yup.string()\n        .max(15, 'Must be 15 characters or less')\n        .required('Required'),\n      lastName: Yup.string()\n        .max(20, 'Must be 20 characters or less')\n        .required('Required'),\n      email: Yup.string().email('Invalid email address').required('Required'),\n    }),\n    onSubmit: values => {\n      alert(JSON.stringify(values, null, 2));\n    },\n  });\n  return (\n    <form onSubmit={formik.handleSubmit}>\n      <label htmlFor=\"firstName\">First Name</label>\n      <input\n        id=\"firstName\"\n        type=\"text\"\n        {...formik.getFieldProps('firstName')}\n      />\n      {formik.touched.firstName && formik.errors.firstName ? (\n        <div>{formik.errors.firstName}</div>\n      ) : null}\n\n      <label htmlFor=\"lastName\">Last Name</label>\n      <input id=\"lastName\" type=\"text\" {...formik.getFieldProps('lastName')} />\n      {formik.touched.lastName && formik.errors.lastName ? (\n        <div>{formik.errors.lastName}</div>\n      ) : null}\n\n      <label htmlFor=\"email\">Email Address</label>\n      <input id=\"email\" type=\"email\" {...formik.getFieldProps('email')} />\n      {formik.touched.email && formik.errors.email ? (\n        <div>{formik.errors.email}</div>\n      ) : null}\n\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using ErrorMessage with Children Render Prop\nDESCRIPTION: Example showing how to use the ErrorMessage component with a children render prop function to customize error message rendering.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/api/errormessage.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// the render callback will only be called when the\n// field has been touched and an error exists and subsequent updates.\n<ErrorMessage name=\"email\">{msg => <div>{msg}</div>}</ErrorMessage>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom ErrorMessage Component for FieldArray in React and Formik\nDESCRIPTION: This snippet shows how to create a custom ErrorMessage component to handle nested field errors in a FieldArray, using Formik's getIn utility.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/api/fieldarray.md#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Field, getIn } from 'formik';\n\nconst ErrorMessage = ({ name }) => (\n  <Field\n    name={name}\n    render={({ form }) => {\n      const error = getIn(form.errors, name);\n      const touch = getIn(form.touched, name);\n      return touch && error ? error : null;\n    }}\n  />\n);\n\n// Usage\n<ErrorMessage name=\"friends[0].name\" />; // => null, 'too short', or 'required'\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for New Field Configuration Props in Formik 3\nDESCRIPTION: TypeScript interface showing the new parse, format, and formatOnBlur props added in Formik 3 Alpha. These props facilitate input masking by transforming input values for display and state management.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/website/src/blog/formik-3-alpha.md#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\ninterface FieldConfig<V> {\n  // ...omitted for brevity\n\n  /**\n   * Function to parse raw input value before setting it to state\n   */\n  parse?: (rawInput: string, name: string) => V;\n\n  /**\n   * Function to transform value passed to input\n   */\n  format?: (value: V, name: string) => any;\n\n  /**\n   * Should Formik wait until the blur event before formatting input value?\n   * @default false\n   */\n  formatOnBlur?: boolean;\n}\n\n// ...elsewhere...\n\nconst [field] = useField({ name: 'phone', parse: rawInput => ... })\n<Field name=\"phone\" parse={rawInput => ... } />\n<input {...formikProps.getFieldProps({ name: 'phone', parse: rawInput => ... }) />\n```\n\n----------------------------------------\n\nTITLE: TypeScript Formik Implementation Example\nDESCRIPTION: Example showing how to use Formik with TypeScript generics for type-safe form handling. Demonstrates proper typing of form values and submission handling.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/api/formik.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction MyForm(props: MyFormProps) {\n  // using TSX Generics here to set <Values> to <Blog>\n  return (\n    <Formik<Blog>\n      initialValues={props.initVals}\n      onSubmit={(values, actions) => {\n        props.onSubmit(values).then(() => {\n          actions.setSubmitting(false);\n          actions.resetForm({\n            values: {\n              // the type of `values` inferred to be Blog\n              title: '',\n              image: '',\n              body: '',\n            },\n            // you can also set the other form states here\n          });\n        });\n      }}\n    >\n      // etc\n    </Formik>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Formik State Interface Definition\nDESCRIPTION: TypeScript interface definition for Formik's form state, including values, errors, touched states, and submission status flags. Used for type checking and documentation of form state structure.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/api/formik.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface FormikState<Values> {\n  /** Form values */\n  values: Values;\n  /** map of field names to specific error for that field */\n  errors: FormikErrors<Values>;\n  /** map of field names to **whether** the field has been touched */\n  touched: FormikTouched<Values>;\n  /** whether the form is currently submitting */\n  isSubmitting: boolean;\n  /** whether the form is currently validating (prior to submission) */\n  isValidating: boolean;\n  /** Top level status state, in case you need it */\n  status?: any;\n  /** Number of times user tried to submit the form */\n  submitCount: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Expanding the Signup Form with Multiple Fields using Formik in React\nDESCRIPTION: This snippet expands on the previous example by adding first name and last name fields to the form. It demonstrates how Formik simplifies handling multiple form inputs with the same change handler and value management.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/tutorial.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { useFormik } from 'formik';\n\nconst SignupForm = () => {\n  // Note that we have to initialize ALL of fields with values. These\n  // could come from props, but since we don't want to prefill this form,\n  // we just use an empty string. If we don't do this, React will yell\n  // at us.\n  const formik = useFormik({\n    initialValues: {\n      firstName: '',\n      lastName: '',\n      email: '',\n    },\n    onSubmit: values => {\n      alert(JSON.stringify(values, null, 2));\n    },\n  });\n  return (\n    <form onSubmit={formik.handleSubmit}>\n      <label htmlFor=\"firstName\">First Name</label>\n      <input\n        id=\"firstName\"\n        name=\"firstName\"\n        type=\"text\"\n        onChange={formik.handleChange}\n        value={formik.values.firstName}\n      />\n\n      <label htmlFor=\"lastName\">Last Name</label>\n      <input\n        id=\"lastName\"\n        name=\"lastName\"\n        type=\"text\"\n        onChange={formik.handleChange}\n        value={formik.values.lastName}\n      />\n\n      <label htmlFor=\"email\">Email Address</label>\n      <input\n        id=\"email\"\n        name=\"email\"\n        type=\"email\"\n        onChange={formik.handleChange}\n        value={formik.values.email}\n      />\n\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Previous Values in React State Update Pattern with Formik\nDESCRIPTION: Example of using React's state updater pattern with Formik's setValues method, allowing access to previous values to prevent stale closure issues.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/packages/formik/CHANGELOG.md#2025-04-16_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nsetValues(prevValues => ({...prevValues, ... }))\n```\n\n----------------------------------------\n\nTITLE: Pseudo-code for Formik Form Submission Process\nDESCRIPTION: This pseudo-code outlines the steps Formik takes during form submission, including pre-submit actions, validation, and the actual submission process. It details how Formik handles errors, promises, and state updates throughout the submission cycle.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/guides/form-submission.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Pre-submit\ntouch all fields\nset isSubmitting to true\nincrement submitCount\n\n// Validation\nset isValidating to true\nrun all validations\nif (errors) {\n  abort submission\n  set isValidating to false\n  set errors\n  set isSubmitting to false\n} else {\n  set isValidating to false\n  proceed to submission\n}\n\n// Submission\nrun submission handler\nif (handler returns promise) {\n  wait for resolution\n  set isSubmitting to false\n} else {\n  set isSubmitting to false\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FieldMetaProps Interface in TypeScript for Formik\nDESCRIPTION: This code snippet defines the FieldMetaProps interface in TypeScript, which is returned by the getFieldMeta(name) function in Formik. It includes properties for field value, error message, touched state, and initial values.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/migrating-v2.md#2025-04-16_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nexport interface FieldMetaProps<Value> {\n  /** Value of the field */\n  value: Value;\n  /** Error message of the field */\n  error?: string;\n  /** Has the field been visited? */\n  touched: boolean;\n  /** Initial value of the field */\n  initialValue?: Value;\n  /** Initial touched state of the field */\n  initialTouched: boolean;\n  /** Initial error message of the field */\n  initialError?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Updated Pattern for Formik 3 - Working Alternative\nDESCRIPTION: Example showing the new recommended pattern that works with Formik 3 Alpha. This demonstrates directly passing values to field.onChange instead of using the curried approach.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/website/src/blog/formik-3-alpha.md#2025-04-16_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport const MyTextField = props => {\n  const [field] = useField(props);\n  const onChange = e => {\n    e.persist();\n    if (e.target.value === 'foo') {\n      // You can now just set the value\n      field.onChange('bar');\n    } else {\n      // Or pass an event\n      field.onChange(e);\n    }\n  };\n  return <input {...field} onChange={onChange} />;\n};\n```\n\n----------------------------------------\n\nTITLE: React Native Form Example with Current Formik API\nDESCRIPTION: Example showing the existing API that still works in Formik 3 but doesn't support the new parse, format, and formatOnBlur props. This example uses curried handleChange and handleBlur methods.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/website/src/blog/formik-3-alpha.md#2025-04-16_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport const MyReactNativeForm = props => (\n  <Formik\n    initialValues={{ email: '' }}\n    onSubmit={values => console.log(values)}\n  >\n    {({ handleChange, handleBlur, handleSubmit, values }) => (\n      <View>\n        <TextInput\n          onChangeText={handleChange('email')} // curried\n          onBlur={handleBlur('email')} // curried\n          value={values.email}\n        />\n        <Button onPress={handleSubmit} title=\"Submit\" />\n      </View>\n    )}\n  </Formik>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Change Handler in React\nDESCRIPTION: This snippet shows how Formik's handleChange function works under the hood, demonstrating a custom implementation using React's useState hook for comparison.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/tutorial.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst [values, setValues] = React.useState({});\n\nconst handleChange = event => {\n  setValues(prevValues => ({\n    ...prevValues,\n    // we use the name to tell Formik which key of `values` to update\n    [event.target.name]: event.target.value\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Using Field 'as' prop with different HTML elements and styled components\nDESCRIPTION: Examples of using the new 'as' prop in Field components to render different HTML elements or styled components, showing how it injects form props directly to the component.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/MIGRATING-v2.md#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// <input className=\"form-input\" placeholder=\"Jane\"  />\n<Field name=\"firstName\" className=\"form-input\" placeholder=\"Jane\" />\n\n// <textarea className=\"form-textarea\"/></textarea>\n<Field name=\"message\" as=\"textarea\"  className=\"form-textarea\"/>\n\n// <select className=\"my-select\"/>\n<Field name=\"colors\" as=\"select\" className=\"my-select\">\n  <option value=\"red\">Red</option>\n  <option value=\"green\">Green</option>\n  <option value=\"blue\">Blue</option>\n</Field>\n\n// with styled-components/emotion\nconst MyStyledInput = styled.input`\n  padding: .5em;\n  border: 1px solid #eee;\n  /* ... */\n`\nconst MyStyledTextarea = MyStyledInput.withComponent('textarea');\n\n// <input className=\"czx_123\" placeholder=\"google.com\"  />\n<Field name=\"website\" as={MyStyledInput} placeholder=\"google.com\"/>\n\n// <textarea placeholder=\"Post a message...\" rows={5}></textarea>\n<Field name=\"message\" as={MyStyledTextArea} placeholder=\"Post a message..\" rows={4}/>\n```\n\n----------------------------------------\n\nTITLE: Embedding CodeSandbox Example for Formik TypeScript Demo\nDESCRIPTION: HTML iframe code that embeds a CodeSandbox demonstration of Formik with TypeScript implementation. The sandbox includes basic form handling with type safety.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/examples/typescript.md#2025-04-16_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<iframe\nsrc=\"https://codesandbox.io/embed/github/formik/formik/tree/main/examples/basic-typescript?fontsize=14&hidenavigation=1&theme=dark\"\nstyle={{ width:'100%', height: '100%', border:0, borderRadius: 4, overflow: 'hidden'}}\ntitle=\"formik/formik: async-submission\"\nallow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\nsandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n></iframe>\n```\n\n----------------------------------------\n\nTITLE: TypeScript FieldProps generic parameters change in v1 vs v2\nDESCRIPTION: Example showing how FieldProps generic type parameters have changed in v2. FormValues has been moved from the first to the second parameter position.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/MIGRATING-v2.md#2025-04-16_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\ntype Props = FieldProps<FormValues>;\n```\n\nLANGUAGE: tsx\nCODE:\n```\ntype Props = FieldProps<FieldValue, FormValues>;\n```\n\n----------------------------------------\n\nTITLE: Using resetForm in Formik v1 vs v2\nDESCRIPTION: Example showing how resetForm usage has changed from v1 to v2. In v1, it accepted only nextValues, while in v2 it accepts an object with values and other form state properties.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/MIGRATING-v2.md#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nresetForm(nextValues);\n```\n\nLANGUAGE: tsx\nCODE:\n```\nresetForm({ values: nextValues /* errors, touched, etc ... */ });\n```\n\n----------------------------------------\n\nTITLE: TypeScript FormikActions import in v1 vs FormikHelpers in v2\nDESCRIPTION: Example showing how the FormikActions type has been renamed to FormikHelpers in Formik v2. This demonstrates how to import the type in both versions.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/MIGRATING-v2.md#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FormikActions } from 'formik';\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FormikHelpers as FormikActions } from 'formik';\n```\n\n----------------------------------------\n\nTITLE: Installing Formik via NPM or Yarn\nDESCRIPTION: Commands to install Formik using NPM or Yarn package managers.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/overview.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install formik --save\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add formik\n```\n\n----------------------------------------\n\nTITLE: Updating resetForm Usage in Formik 2.x\nDESCRIPTION: Examples showing the difference between resetForm usage in Formik v1 and v2. The v2 version accepts an object with values and other form state properties.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/packages/formik/MIGRATING-v2.md#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nresetForm(nextValues);\n```\n\nLANGUAGE: tsx\nCODE:\n```\nresetForm({ values: nextValues /* errors, touched, etc ... */ });\n```\n\n----------------------------------------\n\nTITLE: Checking if Value is an Input Event in Formik\nDESCRIPTION: A type guard utility that determines if a value is a React synthetic input event. Returns a boolean with type narrowing.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/api/utils.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nisInputEvent: (value: any) => value is React.SyntheticEvent<any, Event>\n```\n\n----------------------------------------\n\nTITLE: FieldProps TypeScript Migration\nDESCRIPTION: Demonstrates changes to FieldProps generic type parameters between v1 and v2.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/migrating-v2.md#2025-04-16_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\ntype Props = FieldProps<FormValues>;\n```\n\nLANGUAGE: tsx\nCODE:\n```\ntype Props = FieldProps<FieldValue, FormValues>;\n```\n\n----------------------------------------\n\nTITLE: Type Signature for connect() Higher-Order Component in TypeScript\nDESCRIPTION: Defines the type signature for the connect() function in Formik. It takes a component type and returns a new component type with Formik context injected.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/api/connect.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconnect<OuterProps, Values = any>(Comp: React.ComponentType<OuterProps & { formik: FormikContext<Values> }>) => React.ComponentType<OuterProps>\n```\n\n----------------------------------------\n\nTITLE: Setting Values in Nested Objects in Formik\nDESCRIPTION: A generic utility function that recursively sets all nested values in an object to a specified value. Includes optional parameters for tracking visited objects and storing responses.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/api/utils.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nsetNestedObjectValues<T>(object: any, value: any, visited?: any, response?: any): T\n```\n\n----------------------------------------\n\nTITLE: Embedding CodeSandbox Example for Formik with Material UI\nDESCRIPTION: JSX code for embedding a CodeSandbox example that demonstrates how to integrate Formik with Material UI components. The iframe loads a ready-to-use example from the Formik GitHub repository.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/examples/with-material-ui.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"embed-responsive aspect-ratio-square\">\n  <iframe\n  src=\"https://codesandbox.io/embed/github/formik/formik/tree/main/examples/with-material-ui?fontsize=14&hidenavigation=1&theme=dark\"\n  style={{ width:'100%', height: '100%', border:0, borderRadius: 4, overflow: 'hidden'}}\n  title=\"formik/formik: async-submission\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Nested Object Properties in Formik\nDESCRIPTION: A utility function that sets a value in a nested object at a specified path. Returns the modified object.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/api/utils.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nsetIn(obj: any, path: string, value: any): any\n```\n\n----------------------------------------\n\nTITLE: Embedding CodeSandbox Demo for Async Submission in React\nDESCRIPTION: This code snippet embeds a CodeSandbox demo of an async submission example using Formik. The iframe is styled to be responsive and includes necessary attributes for security and functionality.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/examples/async-submission.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"embed-responsive aspect-ratio-square\">\n  <iframe\n  src=\"https://codesandbox.io/embed/github/formik/formik/tree/main/examples/async-submission?fontsize=14&hidenavigation=1&theme=dark\"\n  style={{ width:'100%', height: '100%', border:0, borderRadius: 4, overflow: 'hidden'}}\n  title=\"formik/formik: async-submission\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: ErrorMessage Component Prop Examples\nDESCRIPTION: Examples demonstrating different ways to use the component prop with ErrorMessage to control the rendered HTML element or component.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/api/errormessage.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ErrorMessage component=\"div\" name=\"email\" />\n// --> {touched.email && error.email ? <div>{error.email}</div> : null}\n\n<ErrorMessage component=\"span\" name=\"email\" />\n// --> {touched.email && error.email ? <span>{error.email}</span> : null}\n\n<ErrorMessage component={Custom} name=\"email\" />\n// --> {touched.email && error.email ? <Custom>{error.email}</Custom> : null}\n\n<ErrorMessage name=\"email\" />\n// This will return a string. React 16+.\n// --> {touched.email && error.email ? error.email : null}\n```\n\n----------------------------------------\n\nTITLE: Checking if Value is a Function in Formik\nDESCRIPTION: A type guard utility that determines if a value is a function. Returns a boolean with type narrowing.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/api/utils.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nisFunction: (obj: any) => obj is Function\n```\n\n----------------------------------------\n\nTITLE: Deprecating render props in favor of child callback functions\nDESCRIPTION: Example of how render props are being deprecated in Formik v2 in favor of child callback functions, aligning with React Context Consumer's usage pattern.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/MIGRATING-v2.md#2025-04-16_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n- <Field name=\"firstName\" render={props => ....} />\n+ <Field name=\"firstName\">{props => ... }</Field>\n```\n\n----------------------------------------\n\nTITLE: Embedding Interactive CodeSandbox Example in React\nDESCRIPTION: Code for embedding a CodeSandbox example that demonstrates Formik's instant feedback capabilities. The iframe is styled to be responsive and accessible, with appropriate sandbox permissions for security.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/examples/instant-feedback.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"embed-responsive aspect-ratio-square\">\n  <iframe\n  src=\"https://codesandbox.io/embed/github/formik/formik/tree/main/examples/instant-feedback?fontsize=14&hidenavigation=1&theme=dark\"\n  style={{ width:'100%', height: '100%', border:0, borderRadius: 4, overflow: 'hidden'}}\n  title=\"formik/formik: async-submission\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Embedding CodeSandbox Example for Formik Radio Group\nDESCRIPTION: This code snippet embeds a CodeSandbox iframe that demonstrates how to create a radio group using Formik. The iframe is set to full width and height within its container, with specific styling and permissions for interactivity.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/examples/radio-group.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"embed-responsive aspect-ratio-square\">\n  <iframe\n  src=\"https://codesandbox.io/embed/github/formik/formik/tree/main/examples/radio-group?fontsize=14&hidenavigation=1&theme=dark\"\n  style={{ width:'100%', height: '100%', border:0, borderRadius: 4, overflow: 'hidden'}}\n  title=\"formik/formik: async-submission\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Checking if Value is a String in Formik\nDESCRIPTION: A type guard utility that determines if a value is a string. Returns a boolean with type narrowing.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/api/utils.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nisString: (obj: any) => obj is string\n```\n\n----------------------------------------\n\nTITLE: Embedding CodeSandbox Example for Formik Field Arrays\nDESCRIPTION: This HTML snippet embeds a CodeSandbox example demonstrating the usage of field arrays in Formik. The iframe is styled to be responsive and provides a dark-themed interactive coding environment.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/examples/field-arrays.md#2025-04-16_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div className=\"embed-responsive aspect-ratio-square\">\n  <iframe\n  src=\"https://codesandbox.io/embed/github/formik/formik/tree/main/examples/field-arrays?fontsize=14&hidenavigation=1&theme=dark\"\n  style={{ width:'100%', height: '100%', border:0, borderRadius: 4, overflow: 'hidden'}}\n  title=\"formik/formik: async-submission\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: ErrorMessage with Testing ID\nDESCRIPTION: Example showing how to add an ID prop to ErrorMessage component for e2e testing purposes.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/api/errormessage.md#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// id will be used only for testing purposes\n// not contributing anything to the core implementation.\n<ErrorMessage name=\"email\" id=\"form_email_id\" />\n```\n\n----------------------------------------\n\nTITLE: Embedding Formik Checkbox Example in React\nDESCRIPTION: This code snippet embeds a CodeSandbox iframe showcasing a Formik checkbox group example. The iframe is styled to be responsive and fits within its container.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/examples/checkboxes.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"embed-responsive aspect-ratio-square\">\n  <iframe\n  src=\"https://codesandbox.io/embed/github/formik/formik/tree/main/examples/checkboxes?fontsize=14&hidenavigation=1&theme=dark\"\n  style={{ width:'100%', height: '100%', border:0, borderRadius: 4, overflow: 'hidden'}}\n  title=\"formik/formik: async-submission\"\n  allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n  sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: FormikActions TypeScript Migration\nDESCRIPTION: Shows how to migrate FormikActions type import in TypeScript from v1 to v2.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/migrating-v2.md#2025-04-16_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FormikActions } from 'formik';\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { FormikHelpers as FormikActions } from 'formik';\n```\n\n----------------------------------------\n\nTITLE: Checking if Value is a Promise in Formik\nDESCRIPTION: A type guard utility that determines if a value is a Promise or Promise-like object. Returns a boolean with type narrowing.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/api/utils.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nisPromise: (value: any) => value is PromiseLike<any>\n```\n\n----------------------------------------\n\nTITLE: Installing Formik and Formik Native packages using Yarn\nDESCRIPTION: This command installs both the Formik and Formik Native packages using Yarn package manager. Formik is the core library for form handling in React, while Formik Native is an experimental extension for React Native.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/packages/formik-native/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn add formik formik-native\n```\n\n----------------------------------------\n\nTITLE: Checking for Empty Children in Formik\nDESCRIPTION: A utility function that determines if React children are empty. Returns a boolean.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/api/utils.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nisEmptyChildren: (children: any) => boolean\n```\n\n----------------------------------------\n\nTITLE: Accessing Formik Radio Group Example in CodeSandbox\nDESCRIPTION: A markdown link that opens a CodeSandbox demo of the Formik radio group example with field-level validation. The sandbox loads directly from the Formik GitHub repository master branch.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/examples/field-level-validation/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![Edit formik-example-radio-group](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/github/jaredpalmer/formik/tree/master/examples/radio-group?fontsize=14&hidenavigation=1&theme=dark)\n```\n\n----------------------------------------\n\nTITLE: Checking if Value is an Integer in Formik\nDESCRIPTION: A utility function that determines if a value is an integer. Returns a boolean.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/api/utils.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nisInteger: (obj: any) => boolean\n```\n\n----------------------------------------\n\nTITLE: ResetForm Usage in Formik v2\nDESCRIPTION: Shows new resetForm functionality in v2 with support for initialErrors, initialTouched, and initialStatus.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/migrating-v2.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// Reset the form. This will set the next initial state of\n// Formik to the `initialValues`, `initialErrors`, `initialTouched`,\n// `initialStatus` props.\nformik.resetForm();\n\n// Reset the form back to `initialXXXX` but change next\n// `initialValues` to a custom value\nformik.resetForm({\n  values: { name: 'Custom initial values', email: '' },\n});\n\n// Reset form back to `initialXXXX`, but change next `initialValues`\n// and `initialErrors` of the form\nformik.resetForm({\n  values: { name: '', email: '' },\n  errors: { name: 'Something special' },\n});\n\n// Reset form back to `initialXXXX`, but change next `initialStatus` to 'Foo'\nformik.resetForm({\n  status: 'Foo',\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Active DOM Element in Formik\nDESCRIPTION: A utility function that returns the currently active element in the document. Accepts an optional document parameter.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/api/utils.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetActiveElement(doc?: Document): Element | null\n```\n\n----------------------------------------\n\nTITLE: ResetForm Usage in Formik v1\nDESCRIPTION: Demonstrates how resetForm was used in Formik v1 to reset form values.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/migrating-v2.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// Reset to `initialValues`\nformik.resetForm();\n// Reset form and set the next `initialValues` of the form\nformik.resetForm({ name: '', email: '' });\n```\n\n----------------------------------------\n\nTITLE: FieldInputProps Interface Definition\nDESCRIPTION: TypeScript interface definition for FieldInputProps showing available props for field inputs.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/migrating-v2.md#2025-04-16_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nexport interface FieldInputProps<Value> {\n  /** Value of the field */\n  value: Value;\n  /** Name of the field */\n  name: string;\n  /** Multiple select? */\n  multiple?: boolean;\n  /** Is the field checked? */\n  checked?: boolean;\n  /** Change event handler */\n  onChange: FormikHandlers['handleChange'];\n  /** Blur event handler */\n  onBlur: FormikHandlers['handleBlur'];\n}\n```\n\n----------------------------------------\n\nTITLE: FieldProps Generic Type Parameters Update\nDESCRIPTION: Demonstrates the change in FieldProps generic type parameters where FormValues has been moved from first to second parameter.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/packages/formik/MIGRATING-v2.md#2025-04-16_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\ntype Props = FieldProps<FormValues>;\n```\n\nLANGUAGE: tsx\nCODE:\n```\ntype Props = FieldProps<FieldValue, FormValues>;\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies for Formik docs project\nDESCRIPTION: This command installs all necessary dependencies for the Formik documentation project using Yarn package manager.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/website/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Installing Yup Dependency\nDESCRIPTION: Command to install Yup schema validation library as a project dependency.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/guides/validation.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install yup --save\n```\n\n----------------------------------------\n\nTITLE: Installing Yup for Form Validation\nDESCRIPTION: Commands to install Yup, a JavaScript schema validation library often used with Formik for form validation.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/overview.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm install yup --save\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add yup\n```\n\n----------------------------------------\n\nTITLE: Checking if Value is NaN in Formik\nDESCRIPTION: A utility function that determines if a value is NaN (Not a Number). Returns a boolean.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/api/utils.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nisNaN: (obj: any) => boolean\n```\n\n----------------------------------------\n\nTITLE: Installing Yup Package\nDESCRIPTION: Commands to install Yup validation library using npm or yarn package managers\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/tutorial.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install yup --save\n\n# or via yarn\n\nyarn add yup\n```\n\n----------------------------------------\n\nTITLE: Installing Formik 3 Alpha using npm\nDESCRIPTION: Command to install the alpha version of Formik v3 using npm. This installs the package from the 'next' distribution tag.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/website/src/blog/formik-3-alpha.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nnpm install formik@next\n```\n\n----------------------------------------\n\nTITLE: Field Component Usage Examples\nDESCRIPTION: Shows various ways to use the Field component with different HTML elements and styled-components.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/packages/formik/MIGRATING-v2.md#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// <input className=\"form-input\" placeholder=\"Jane\"  />\n<Field name=\"firstName\" className=\"form-input\" placeholder=\"Jane\" />\n\n// <textarea className=\"form-textarea\"/></textarea>\n<Field name=\"message\" as=\"textarea\"  className=\"form-textarea\"/>\n\n// <select className=\"my-select\"/>\n<Field name=\"colors\" as=\"select\" className=\"my-select\">\n  <option value=\"red\">Red</option>\n  <option value=\"green\">Green</option>\n  <option value=\"blue\">Blue</option>\n</Field>\n\n// with styled-components/emotion\nconst MyStyledInput = styled.input`\n  padding: .5em;\n  border: 1px solid #eee;\n  /* ... */\n`\nconst MyStyledTextarea = MyStyledInput.withComponent('textarea');\n\n// <input className=\"czx_123\" placeholder=\"google.com\"  />\n<Field name=\"website\" as={MyStyledInput} placeholder=\"google.com\"/>\n\n// <textarea placeholder=\"Post a message...\" rows={5}></textarea>\n<Field name=\"message\" as={MyStyledTextArea} placeholder=\"Post a message..\" rows={4}/>\n```\n\n----------------------------------------\n\nTITLE: Configuring environment variables for Formik docs\nDESCRIPTION: This snippet shows the required changes to the .env and .env.build files for setting up Notion integration. It demonstrates how to add the Notion token and blog index ID.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/website/README.md#2025-04-16_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n-NOTION_TOKEN=XXXX\n+NOTION_TOKEN=<YOUR_TOKEN>\n-BLOG_INDEX_ID=XXXXX\n+BLOG_INDEX_ID=<YOUR_BLOG_INDEX_ID>\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access in robots.txt\nDESCRIPTION: This snippet defines the rules for web crawlers accessing the website. It allows all user agents (*) and does not disallow access to any specific paths.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/website/public/robots.txt#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Building TSDX Project\nDESCRIPTION: Command to bundle the package to the dist folder using Rollup, creating optimized bundles in CommonJS, UMD, and ES Module formats.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/packages/formik-native/CONTRIBUTING.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Avoiding Nesting in Formik Forms (JSX)\nDESCRIPTION: This snippet illustrates how to avoid default nesting behavior in Formik by using square bracket notation. It creates a form with a field that includes a dot in its name without creating a nested object.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/guides/arrays.md#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Formik, Form, Field } from 'formik';\n\nexport const NestedExample = () => (\n  <div>\n    <h1>Social Profiles</h1>\n    <Formik\n      initialValues={{\n        'owner.fullname': '',\n      }}\n      onSubmit={values => {\n        // same shape as initial values\n        console.log(values);\n      }}\n    >\n      <Form>\n        <Field name=\"['owner.fullname']\" />\n        <button type=\"submit\">Submit</button>\n      </Form>\n    </Formik>\n  </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Synchronous Validation in Formik\nDESCRIPTION: Example of a synchronous validation function for Formik forms. This function validates email format and returns an errors object that Formik uses to display validation messages.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/api/withFormik.md#2025-04-16_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// Synchronous validation\nconst validate = (values, props) => {\n  const errors = {};\n\n  if (!values.email) {\n    errors.email = 'Required';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = 'Invalid email address';\n  }\n\n  //...\n\n  return errors;\n};\n```\n\n----------------------------------------\n\nTITLE: Formik Render Prop Pattern\nDESCRIPTION: Demonstrates using Formik's render prop pattern (deprecated in 2.x) to create forms with inline rendering and access to form state and handlers.\nSOURCE: https://github.com/jaredpalmer/formik/blob/main/docs/api/formik.md#2025-04-16_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Formik render={props => <ContactForm {...props} />} />\n\n<Formik\n  render={({ handleSubmit, handleChange, handleBlur, values, errors }) => (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        value={values.name}\n        name=\"name\"\n      />\n      {errors.name &&\n        <div>\n          {errors.name}\n        </div>}\n      <button type=\"submit\">Submit</button>\n    </form>\n  )}\n/>\n```"
  }
]