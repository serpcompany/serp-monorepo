[
  {
    "owner": "chakra-ui",
    "repo": "chakra-ui",
    "content": "TITLE: Setting up Chakra UI Provider in React\nDESCRIPTION: Demonstrates how to wrap the application with the Chakra UI Provider component, which includes ChakraProvider and ThemeProvider for styling and color mode management.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/get-started/installation.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Provider } from \"@/components/ui/provider\"\n\nfunction App({ Component, pageProps }) {\n  return (\n    <Provider>\n      <Component {...pageProps} />\n    </Provider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Chakra UI Components in React\nDESCRIPTION: Demonstrates the usage of Chakra UI components (Button and HStack) in a React component, showcasing the simplicity of building UI elements with Chakra UI.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/get-started/installation.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, HStack } from \"@chakra-ui/react\"\n\nconst Demo = () => {\n  return (\n    <HStack>\n      <Button>Click me</Button>\n      <Button>Click me</Button>\n    </HStack>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Chakra UI with Package Managers\nDESCRIPTION: Commands to install the @chakra-ui/react package using either yarn or npm package managers.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/packages/react/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn add @chakra-ui/react\n# or\n$ npm install --save @chakra-ui/react\n```\n\n----------------------------------------\n\nTITLE: Using Compound Checkbox Components (TSX)\nDESCRIPTION: Shows how to consume the compound Checkbox components created with `createSlotRecipeContext`. Variant props, such as `size=\"md\"`, are passed to the root component (`CheckboxRoot`), which then distributes the corresponding styles defined in the recipe to itself and its context-aware children (`CheckboxControl`, `CheckboxLabel`).\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/slot-recipes.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n```tsx title=\"app.tsx\"\nconst App = () => {\n  return (\n    <CheckboxRoot size=\"md\">\n      <CheckboxControl />\n      <CheckboxLabel />\n    </CheckboxRoot>\n  )\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Chakra UI Dependencies with npm\nDESCRIPTION: Installs the required Chakra UI and Emotion packages using npm.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/get-started/frameworks/vite.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @chakra-ui/react @emotion/react\n```\n\n----------------------------------------\n\nTITLE: Basic File Upload Component Structure in React\nDESCRIPTION: Demonstrates the basic structure of the FileUpload component with its subcomponents.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/file-upload.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<FileUpload.Root>\n  <FileUpload.HiddenInput />\n  <FileUpload.Label />\n  <FileUpload.Dropzone>\n    <FileUpload.DropzoneContent />\n  </FileUpload.Dropzone>\n  <FileUpload.Trigger />\n  <FileUpload.ItemGroup>\n    <FileUpload.Item>\n      <FileUpload.ItemPreview />\n      <FileUpload.ItemFileName />\n      <FileUpload.ItemSizeText />\n      <FileUpload.ItemDeleteTrigger />\n    </FileUpload.Item>\n  </FileUpload.ItemGroup>\n</FileUpload.Root>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Breadcrumb Component in Chakra UI\nDESCRIPTION: This snippet demonstrates the basic structure of the Breadcrumb component, including Root, List, Item, Link, and Separator elements.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/breadcrumb.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Breadcrumb.Root>\n  <Breadcrumb.List>\n    <Breadcrumb.Item>\n      <Breadcrumb.Link />\n    </Breadcrumb.Item>\n    <Breadcrumb.Separator />\n  </Breadcrumb.List>\n</Breadcrumb.Root>\n```\n\n----------------------------------------\n\nTITLE: Implementing ColorModeProvider in Chakra UI Layout\nDESCRIPTION: This snippet demonstrates how to wrap your app with the ColorModeProvider and ChakraProvider to enable dark mode support.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/dark-mode.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ColorModeProvider } from \"@/components/ui/color-mode\"\nimport { ChakraProvider, defaultSystem } from \"@chakra-ui/react\"\n\nexport default function Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <ChakraProvider value={defaultSystem}>\n      <ColorModeProvider>{children}</ColorModeProvider>\n    </ChakraProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Popover Structure in Chakra UI\nDESCRIPTION: This snippet demonstrates the basic structure of a Popover component in Chakra UI, including the root, trigger, positioner, content, close trigger, arrow, and body elements.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/popover.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Popover.Root>\n  <Popover.Trigger />\n  <Popover.Positioner>\n    <Popover.Content>\n      <Popover.CloseTrigger />\n      <Popover.Arrow>\n        <Popover.ArrowTip />\n      </Popover.Arrow>\n      <Popover.Body>\n        <Popover.Title />\n      </Popover.Body>\n    </Popover.Content>\n  </Popover.Positioner>\n</Popover.Root>\n```\n\n----------------------------------------\n\nTITLE: Setting up Chakra UI Provider in Next.js App Layout\nDESCRIPTION: This TypeScript React snippet demonstrates how to wrap the Next.js app with the Chakra UI Provider component, which includes ChakraProvider and ThemeProvider for styling and color mode management.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/get-started/frameworks/next-app.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Provider } from \"@/components/ui/provider\"\n\nexport default function RootLayout(props: { children: React.ReactNode }) {\n  const { children } = props\n  return (\n    <html suppressHydrationWarning>\n      <body>\n        <Provider>{children}</Provider>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Chakra UI and Emotion with npm\nDESCRIPTION: Installs the Chakra UI React package and its Emotion dependency using npm.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/get-started/installation.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @chakra-ui/react @emotion/react\n```\n\n----------------------------------------\n\nTITLE: Converting a Custom Component with Chakra Factory in JSX\nDESCRIPTION: This example demonstrates how to use the chakra function to convert a custom component from Radix UI into a Chakra-compatible component.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/chakra-factory.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as RadixScrollArea from \"@radix-ui/react-scroll-area\"\n\nconst ScrollArea = chakra(RadixScrollArea.Root)\n\nfunction Example() {\n  return (\n    <ScrollArea>\n      <RadixScrollArea.Viewport>\n        <div>Hello</div>\n      </RadixScrollArea.Viewport>\n    </ScrollArea>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Array Syntax for Responsive Styling in Chakra UI (JSX)\nDESCRIPTION: Illustrates array-based responsive props in a Chakra UI Text component, with the array's positions mapping to specific breakpoints as per Chakra UI's responsive notation. Dependencies are Chakra UI and React. Here, the text has 'fontWeight' set to 'medium' at the base breakpoint and 'bold' at the fourth breakpoint (corresponding to 'lg'); 'undefined' values skip intermediate breakpoints. Inputs are array-indexed prop values; output adapts to screen size.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/responsive-design.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Text fontWeight={[\"medium\", undefined, undefined, \"bold\"]}>Text</Text>\n```\n\n----------------------------------------\n\nTITLE: Implementing Component Composition Best Practices\nDESCRIPTION: Demonstrates best practices for component composition including proper ref forwarding and prop spreading. Shows implementation with both 'as' and 'asChild' props.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/concepts/composition.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst MyComponent = React.forwardRef((props, ref) => {\n  return <Box ref={ref} {...props} />\n})\n\n// with `as` prop\n<MyComponent as=\"button\" />\n\n// with `asChild` prop\n<Button asChild>\n  <MyComponent> Click me </MyComponent>\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Implementing Enter Animation with _open Pseudo Prop in Chakra UI\nDESCRIPTION: Example showing how to apply a fade-in animation to a Chakra UI Box component when it enters (opens). The animation is applied using the _open pseudo prop which targets the data-state=\"open\" attribute.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/concepts/animation.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Box\n  data-state=\"open\"\n  _open={{\n    animation: \"fade-in 300ms ease-out\",\n  }}\n>\n  This is open\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Applying Background Color with and without Opacity using Chakra UI (JSX)\nDESCRIPTION: Shows several ways to set an element's background color using bg and bgColor on <Box> components in Chakra UI, including the use of color modifiers to set opacity. Requires Chakra UI and supports color tokens. Accepts direct color values or tokens in the bg/bgColor attributes, with optional opacity specified via '/'.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/background.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Box bg=\"red.200\" />\n<Box bgColor=\"red.200\" />\n\n// with opacity modifier\n<Box bg=\"blue.200/30\" />\n<Box bgColor=\"blue.200/30\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Chakra UI Image Component in JSX\nDESCRIPTION: This example demonstrates the basic usage of the Image component. The 'src' prop is used to specify the image source.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/image.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Image src=\"...\" />\n```\n\n----------------------------------------\n\nTITLE: Defining a Button Recipe with Variants in Chakra UI (TypeScript)\nDESCRIPTION: Defines a button recipe using Chakra UI's defineRecipe function, specifying base styles, multiple visual and size variants, and their corresponding styling objects. Dependencies include @chakra-ui/react's defineRecipe. The exported buttonRecipe is later imported for use in both component and theme composition, allowing for type-safe variant management.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/recipes.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { defineRecipe } from \"@chakra-ui/react\"\n\nexport const buttonRecipe = defineRecipe({\n  base: {\n    display: \"flex\",\n  },\n  variants: {\n    visual: {\n      solid: { bg: \"red.200\", color: \"white\" },\n      outline: { borderWidth: \"1px\", borderColor: \"red.200\" },\n    },\n    size: {\n      sm: { padding: \"4\", fontSize: \"12px\" },\n      lg: { padding: \"8\", fontSize: \"24px\" },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Applying Uniform Scale Transform with Chakra UI Box Component in JSX\nDESCRIPTION: Demonstrates scaling a Chakra UI `Box` component uniformly along both X and Y axes using the `scale` prop. The value \"1.2\" increases the size of the element by 20%.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/transforms.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Box scale=\"1.2\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Area Chart Structure in Chakra UI\nDESCRIPTION: The minimal structure needed to create an Area Chart in Chakra UI. It wraps the Recharts AreaChart component within Chart.Root and includes CartesianGrid, XAxis, and YAxis for basic chart visualization.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/area-chart.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Chart.Root>\n  <AreaChart>\n    <CartesianGrid />\n    <XAxis />\n    <YAxis />\n  </AreaChart>\n</Chart.Root>\n```\n\n----------------------------------------\n\nTITLE: Extending Button Variants with defineRecipe in Chakra UI (TypeScript)\nDESCRIPTION: Demonstrates how to use the `defineRecipe` function to extend an existing Chakra UI Button recipe with a new `xl` size variant. Requires Chakra UI theming APIs and inclusion in a custom theme config via `defineConfig`. The config overrides are integrated into the system using `createSystem`. Inputs include variant definitions; outputs are a system object with enhanced theming support. All parameters such as variant name and style values must follow Chakra UI conventions.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/customization/recipes.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst buttonRecipe = defineRecipe({\n  variants: {\n    size: {\n      xl: {\n        fontSize: \"lg\",\n        px: 6,\n        py: 3,\n      },\n    },\n  },\n})\n\nconst customConfig = defineConfig({\n  theme: {\n    recipes: {\n      button: buttonRecipe,\n    },\n  },\n})\n\nexport const system = createSystem(defaultConfig, customConfig)\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Password Input Components (JSX)\nDESCRIPTION: Demonstrates the fundamental rendering of the `PasswordInput` and `PasswordStrengthMeter` components within a JSX structure. This will display a standard password input field with associated features like visibility toggle and the strength indicator.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/password-input.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<PasswordInput />\n<PasswordStrengthMeter />\n```\n\n----------------------------------------\n\nTITLE: Using the 'as' Prop in Chakra UI Components\nDESCRIPTION: Demonstrates how to use the 'as' prop to change the underlying HTML element of a Chakra UI component while maintaining its functionality. In this example, a Heading component is rendered as an h3 element.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/concepts/composition.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Heading as=\"h3\">Hello, world!</Heading>\n```\n\n----------------------------------------\n\nTITLE: Setting up Chakra UI Theme Provider\nDESCRIPTION: Example showing how to wrap a React application with Chakra UI's ThemeProvider and ColorModeProvider for theme and dark mode support.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/packages/react/README.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ColorModeProvider, ThemeProvider } from \"@chakra-ui/react\"\n\nconst App = ({ children }) => (\n  <ThemeProvider>\n    <ColorModeProvider>{children}</ColorModeProvider>\n  </ThemeProvider>\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Slot-Based Component Recipes with sva in Chakra UI Theming (TypeScript)\nDESCRIPTION: Shows usage of system.sva to define recipes for multi-slot components (e.g. Alert with title, description, and icon). Base and variant styles can be specified for each slot. The recipe returns style objects for slots based on input props. Input: sva config with slots, base, and variants; output: style mapping for slots.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/overview.mdx#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nconst system = createSystem(defaultConfig, config)\n\nconst alert = system.sva({\n  slots: [\"title\", \"description\", \"icon\"],\n  base: {\n    title: { color: \"white\" },\n    description: { color: \"white\" },\n    icon: { color: \"white\" },\n  },\n  variants: {\n    status: {\n      info: {\n        title: { color: \"blue.500\" },\n        description: { color: \"blue.500\" },\n        icon: { color: \"blue.500\" },\n      },\n    },\n  },\n})\n\nalert({ status: \"info\" })\n// => { title: { color: \"blue.500\" }, description: { color: \"blue.500\" }, icon: { color: \"blue.500\" } }\n\n```\n\n----------------------------------------\n\nTITLE: Structuring a Basic Chakra UI Table in React\nDESCRIPTION: Demonstrates the basic JSX structure for creating a table using Chakra UI components. It utilizes `Table.Root` as the main container, enclosing `Table.Header`, `Table.Body`, and `Table.Footer` sections. Each section contains `Table.Row` elements, which in turn hold `Table.ColumnHeader` (for headers) or `Table.Cell` (for data/footer cells) components.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/table.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Table.Root>\n  <Table.Header>\n    <Table.Row>\n      <Table.ColumnHeader />\n    </Table.Row>\n  </Table.Header>\n  <Table.Body>\n    <Table.Row>\n      <Table.Cell />\n    </Table.Row>\n  </Table.Body>\n  <Table.Footer>\n    <Table.Row>\n      <Table.Cell />\n    </Table.Row>\n  </Table.Footer>\n</Table.Root>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Icon Button in JSX\nDESCRIPTION: This example demonstrates the basic usage of the IconButton component with an aria-label and a search icon.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/icon-button.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<IconButton aria-label=\"Search database\">\n  <LuSearch />\n</IconButton>\n```\n\n----------------------------------------\n\nTITLE: Basic DataList Implementation in React\nDESCRIPTION: Basic example of using the DataList component to render a list of items with labels and values.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/data-list.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<DataList.Root>\n  {data.map((item) => (\n    <DataList.Item key={item.label}>\n      <DataList.ItemLabel>{item.label}</DataList.ItemLabel>\n      <DataList.ItemValue>{item.value}</DataList.ItemValue>\n    </DataList.Item>\n  ))}\n</DataList.Root>\n```\n\n----------------------------------------\n\nTITLE: Basic Menu Structure in Chakra UI\nDESCRIPTION: This snippet demonstrates the basic structure of a Menu component in Chakra UI, including various sub-components like Trigger, Positioner, Content, Item, ItemGroup, Separator, Arrow, CheckboxItem, and RadioItemGroup.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/menu.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Menu.Root>\n  <Menu.Trigger />\n  <Menu.Positioner>\n    <Menu.Content>\n      <Menu.Item />\n\n      <Menu.ItemGroup>\n        <Menu.Item />\n      </Menu.ItemGroup>\n\n      <Menu.Separator />\n      <Menu.Arrow />\n\n      <Menu.CheckboxItem>\n        <Menu.ItemIndicator />\n      </Menu.CheckboxItem>\n\n      <Menu.RadioItemGroup>\n        <Menu.RadioItem>\n          <Menu.ItemIndicator />\n        </Menu.RadioItem>\n      </Menu.RadioItemGroup>\n    </Menu.Content>\n  </Menu.Positioner>\n</Menu.Root>\n```\n\n----------------------------------------\n\nTITLE: Composing a Basic Slider with Subcomponents in Chakra UI (React, TSX)\nDESCRIPTION: This code snippet shows a basic composition of the Slider component in Chakra UI, using its subcomponents such as Label, ValueText, Control, Track, Range, Thumb, DraggingIndicator, HiddenInput, MarkerGroup, and Marker. Each subcomponent is used to represent different parts of the slider UI. Required dependencies include '@chakra-ui/react' and its CSS. No props are being set here, but subcomponents can accept various attributes for customization. The structure can be customized as needed for more complex use cases.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/slider.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Slider.Root>\n  <Slider.Label />\n  <Slider.ValueText />\n  <Slider.Control>\n    <Slider.Track>\n      <Slider.Range />\n    </Slider.Track>\n    <Slider.Thumb>\n      <Slider.DraggingIndicator />\n      <Slider.HiddenInput />\n    </Slider.Thumb>\n    <Slider.MarkerGroup>\n      <Slider.Marker />\n    </Slider.MarkerGroup>\n  </Slider.Control>\n</Slider.Root>\n```\n\n----------------------------------------\n\nTITLE: Basic Field Component Structure in Chakra UI\nDESCRIPTION: Demonstrates the basic structure of a Field component with label, required indicator, input, helper text, and error text.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/field.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Field.Root>\n  <Field.Label>\n    <Field.RequiredIndicator />\n  </Field.Label>\n  <Input />\n  <Field.HelperText />\n  <Field.ErrorText />\n</Field.Root>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of LinkBox and LinkOverlay in Chakra UI\nDESCRIPTION: This snippet demonstrates the basic structure of using LinkBox and LinkOverlay components together.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/link-overlay.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<LinkBox>\n  <LinkOverlay />\n</LinkBox>\n```\n\n----------------------------------------\n\nTITLE: Using the Recipe in a React Button Component with useRecipe (TypeScript)\nDESCRIPTION: Implements a Button React component that utilizes the useRecipe hook from Chakra UI to extract variant-specific styles at runtime. It destructures visual and size props from the input, applies them to the recipe, and renders a chakra.button with computed CSS. Requires @chakra-ui/react and a previously defined buttonRecipe. Inputs are any button props; outputs a styled button element.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/recipes.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"use client\"\n\nimport { chakra, useRecipe } from \"@chakra-ui/react\"\nimport { buttonRecipe } from \"./button.recipe\"\n\nexport const Button = (props) => {\n  const { visual, size, ...restProps } = props\n\n  const recipe = useRecipe({ recipe: buttonRecipe })\n  const styles = recipe({ visual, size })\n\n  return <chakra.button css={styles} {...restProps} />\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of the Chakra UI Tooltip Component in React/JSX\nDESCRIPTION: Demonstrates the fundamental usage of the `Tooltip` component. It wraps a target element (a `<button>` in this example) and displays the text provided in the `content` prop when the user hovers over the target element.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/tooltip.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Tooltip content=\"...\">\n  <button />\n</Tooltip>\n```\n\n----------------------------------------\n\nTITLE: Configuring and Initializing Chakra UI Theming System in React with TypeScript\nDESCRIPTION: Demonstrates full initialization of Chakra UI theming by defining a theme config, creating the styling system engine using createSystem, and passing it to ChakraProvider within a React functional component. Dependencies include @chakra-ui/react and its theming helpers. Inputs are a configuration object for tokens (empty here for example), while the output is a themed application context via ChakraProvider. Key parameters are defineConfig(config), createSystem(defaultConfig, config), and ChakraProvider's value prop.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/overview.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  ChakraProvider,\n  createSystem,\n  defaultConfig,\n  defineConfig,\n} from \"@chakra-ui/react\"\n\nconst config = defineConfig({\n  theme: {\n    tokens: {\n      colors: {},\n    },\n  },\n})\n\nconst system = createSystem(defaultConfig, config)\n\nexport default function App() {\n  return (\n    <ChakraProvider value={system}>\n      <Box>Hello World</Box>\n    </ChakraProvider>\n  )\n}\n\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies in Chakra UI v2 vs v3\nDESCRIPTION: Comparison of the npm install commands for Chakra UI v2 and v3. Version 2 requires four dependencies (@chakra-ui/react, @emotion/react, @emotion/styled, framer-motion) while version 3 only requires two (@chakra-ui/react, @emotion/react).\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/blog/01-chakra-v2-vs-v3-a-detailed-comparison.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @chakra-ui/react @emotion/react @emotion/styled framer-motion\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @chakra-ui/react @emotion/react\n\n```\n\n----------------------------------------\n\nTITLE: Composing Number Input with Chakra UI Subcomponents in TSX\nDESCRIPTION: Creates a Number Input field using Chakra UI's open composition pattern, nesting label, value text, control with increment/decrement triggers, scrubber, and input. Each subcomponent provides structure or interaction, and props on the Root can be used to further control behavior. No external dependencies apart from '@chakra-ui/react'. Expected input/output is managed by child's value and interaction.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/number-input.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<NumberInput.Root>\n  <NumberInput.Label />\n  <NumberInput.ValueText />\n  <NumberInput.Control>\n    <NumberInput.IncrementTrigger />\n    <NumberInput.DecrementTrigger />\n  </NumberInput.Control>\n  <NumberInput.Scrubber />\n  <NumberInput.Input />\n</NumberInput.Root>\n```\n\n----------------------------------------\n\nTITLE: Defining Compound Variants in a Slot Recipe (TypeScript)\nDESCRIPTION: Shows how to define `compoundVariants` within a slot recipe configuration using `defineSlotRecipe`. These variants apply specific CSS overrides to designated slots (e.g., 'control', 'label') only when a specific combination of other variants (e.g., `size: \"sm\"` and `visual: \"outline\"`) is active on the component.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/slot-recipes.mdx#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n```tsx title=\"checkbox.recipe.ts\" /compoundVariants/\nimport { defineSlotRecipe } from \"@chakra-ui/react\"\n\nexport const checkboxRecipe = defineSlotRecipe({\n  slots: [\"root\", \"control\", \"label\"],\n  base: {},\n  variants: {\n    size: {\n      sm: {},\n      md: {},\n    },\n    visual: {\n      contained: {},\n      outline: {},\n    },\n  },\n  compoundVariants: [\n    {\n      size: \"sm\",\n      visual: \"outline\",\n      css: {\n        control: { borderWidth: \"1px\" },\n        label: { color: \"green.500\" },\n      },\n    },\n  ],\n})\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Conditional Semantic Tokens for Light/Dark Mode in Chakra UI (JavaScript)\nDESCRIPTION: This snippet illustrates defining semantic tokens (`danger`, `success`) that adapt based on color mode conditions. The `value` property is an object where `base` defines the default (light mode) value and `_dark` defines the value for dark mode. Both values reference other theme tokens. This configuration enables automatic color switching based on the active color mode.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/semantic-tokens.mdx#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n```js title=\"theme.ts\"\nimport { createSystem, defaultConfig, defineConfig } from \"@chakra-ui/react\"\n\nconst config = defineConfig({\n  theme: {\n    semanticTokens: {\n      colors: {\n        danger: {\n          value: { base: \"{colors.red}\", _dark: \"{colors.darkred}\" },\n        },\n        success: {\n          value: { base: \"{colors.green}\", _dark: \"{colors.darkgreen}\" },\n        },\n      },\n    },\n  },\n})\n\nexport default createSystem(defaultConfig, config)\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Render Function for Chakra UI Components\nDESCRIPTION: This custom render function wraps the component under test in a ChakraProvider, allowing for proper rendering and testing of Chakra UI components. It uses the render function from @testing-library/react.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/concepts/testing.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// ./testing/render.tsx\nimport { Provider } from \"@/components/ui/provider\"\nimport { render as rtlRender } from \"@testing-library/react\"\n\nexport function render(ui: React.ReactNode) {\n  return rtlRender(<>{ui}</>, {\n    wrapper: (props: React.PropsWithChildren) => (\n      <Provider>{props.children}</Provider>\n    ),\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using At-Rules in Chakra UI\nDESCRIPTION: Demonstrates how to use @container rule within the css prop for conditional styling.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/conditional-styles.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Box\n  css={{\n    \"@container (min-width: 10px)\": {\n      color: \"green.300\",\n    },\n  }}\n>\n  Hello\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Using the Button Component with Variant Props in App (TypeScript)\nDESCRIPTION: Demonstrates usage of the styled Button component with variant props visual and size, showing component composition. Assumes the existence of a Button component as previously defined. Inputs are variant prop values; output is a rendered button in a React application.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/recipes.mdx#2025-04-23_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Button } from \"./button\"\n\nconst App = () => {\n  return (\n    <Button visual=\"solid\" size=\"lg\">\n      Click Me\n    </Button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Next.js Image with Chakra UI Image Component in JSX\nDESCRIPTION: This snippet shows how to use the Next.js Image component within Chakra UI's Image component. The 'asChild' prop is used to render the Next.js Image as a child of the Chakra UI Image component.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/image.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// import NextImage from \"next/image\"\n\n<Image asChild>\n  <NextImage src=\"...\" alt=\"...\" />\n</Image>\n```\n\n----------------------------------------\n\nTITLE: Basic Container Usage - Chakra UI React\nDESCRIPTION: Demonstrates the basic usage of the Container component wrapping a div element. The default maxWidth is set to 8xl (90rem/1440px).\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/container.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Container>\n  <div />\n</Container>\n```\n\n----------------------------------------\n\nTITLE: Styling Even and Odd Elements in Chakra UI\nDESCRIPTION: Shows how to apply different background colors to even and odd table rows using _even and _odd modifiers.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/conditional-styles.mdx#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<table>\n  <tbody>\n    {items.map((item) => (\n      <chakra.tr key={item} _even={{ bg: \"gray.100\" }} _odd={{ bg: \"white\" }}>\n        <td>{item}</td>\n      </chakra.tr>\n    ))}\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Router Links in Chakra UI Menu\nDESCRIPTION: This snippet shows how to use custom router links with the Menu component in Chakra UI. It demonstrates setting the navigate prop on the Menu.Root component to work with react-router-dom.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/menu.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\"\n\nimport { Menu } from \"@chakra-ui/react\"\nimport { useNavigate } from \"react-router-dom\"\n\nconst Demo = () => {\n  const navigate = useNavigate()\n  return (\n    <Menu.Root navigate={({ value, node }) => navigate(`/${value}`)}>\n      {/* ... */}\n    </Menu.Root>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Responsive Breakpoints with Chakra UI Styling Engine (TypeScript)\nDESCRIPTION: Demonstrates querying responsive breakpoint values via system.breakpoints methods: up (min-width), down (max-width), only (range), and keys (list). Inputs are breakpoint names; outputs are CSS media queries or string arrays. Requires system instance initialized with a theme defining breakpoints.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/overview.mdx#2025-04-23_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nconst system = createSystem(defaultConfig, config)\n\nsystem.breakpoints.up(\"sm\")\n// => \"@media (min-width: 320px)\"\n\nsystem.breakpoints.down(\"sm\")\n// => \"@media (max-width: 319px)\"\n\nsystem.breakpoints.only(\"md\")\n// => \"@media (min-width: 320px) and (max-width: 768px)\"\n\nsystem.breakpoints.keys()\n// => [\"sm\", \"md\", \"lg\", \"xl\"]\n\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Segmented Control in React with Chakra UI\nDESCRIPTION: Demonstrates the basic structure of the SegmentGroup component with its subcomponents.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/segmented-control.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<SegmentGroup.Root>\n  <SegmentGroup.Indicator />\n  <SegmentGroup.Item>\n    <SegmentGroup.ItemText />\n    <SegmentGroup.ItemHiddenInput />\n  </SegmentGroup.Item>\n</SegmentGroup.Root>\n```\n\n----------------------------------------\n\nTITLE: Using the Closed Chakra UI Switch Component in TSX\nDESCRIPTION: Demonstrates how to use the simplified 'closed' Switch component, typically added via the CLI or defined separately. It accepts children directly, which often serve as the label for the switch (e.g., 'Activate Chakra').\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/switch.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<Switch>Activate Chakra</Switch>\n```\n\n----------------------------------------\n\nTITLE: Customizing Dark Mode Semantic Tokens in Chakra UI\nDESCRIPTION: Demonstrates how to override default dark mode colors by modifying semantic color tokens in your theme configuration. The example customizes background, foreground, and border colors with their dark mode variants.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/guides/theming-customize-dark-mode-colors.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = defineConfig({\n  theme: {\n    semanticTokens: {\n      colors: {\n        bg: {\n          DEFAULT: {\n            value: { _light: \"{colors.white}\", _dark: \"#141414\" }, // Custom dark background\n          },\n          subtle: {\n            value: { _light: \"{colors.gray.50}\", _dark: \"#1a1a1a\" }, // Custom dark subtle background\n          },\n          muted: {\n            value: { _light: \"{colors.gray.100}\", _dark: \"#262626\" }, // Custom dark muted background\n          },\n        },\n        fg: {\n          DEFAULT: {\n            value: { _light: \"{colors.black}\", _dark: \"#e5e5e5\" }, // Custom dark text color\n          },\n          muted: {\n            value: { _light: \"{colors.gray.600}\", _dark: \"#a3a3a3\" }, // Custom dark muted text\n          },\n        },\n        border: {\n          DEFAULT: {\n            value: { _light: \"{colors.gray.200}\", _dark: \"#404040\" }, // Custom dark border\n          },\n        },\n      },\n    },\n  },\n})\n\nexport const system = createSystem(defaultConfig, config)\n```\n\n----------------------------------------\n\nTITLE: Basic Alert Component Structure in Chakra UI\nDESCRIPTION: Shows the fundamental composition of the Alert component with its subcomponents: Root, Indicator, Content, Title, and Description.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/alert.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Alert.Root>\n  <Alert.Indicator />\n  <Alert.Content>\n    <Alert.Title />\n    <Alert.Description />\n  </Alert.Content>\n</Alert.Root>\n```\n\n----------------------------------------\n\nTITLE: Using Chakra UI Components\nDESCRIPTION: Basic example demonstrating how to import and use a Chakra UI component (Button) in a React application.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/packages/react/README.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button } from \"@chakra-ui/react\"\n\nconst App = () => <Button>I just consumed some ⚡️Chakra!</Button>\n```\n\n----------------------------------------\n\nTITLE: Defining Compound Variants for a Button with CVA (TypeScript)\nDESCRIPTION: Defines a button configuration using cva (class variance authority pattern) with base, variants, and compoundVariants, allowing styles to be conditionally applied when multiple variant conditions are met. The example applies a thicker border when size is 'small' and visual is 'outline.' Inputs are variant combinations; output is merged CSS styles. Requires @chakra-ui/react and cva utility.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/recipes.mdx#2025-04-23_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"use client\"\n\nimport { chakra } from \"@chakra-ui/react\"\n\nconst button = cva({\n  base: {\n    display: \"flex\",\n  },\n  variants: {\n    visual: {\n      solid: { bg: \"red.200\", color: \"white\" },\n      outline: { borderWidth: \"1px\", borderColor: \"red.200\" },\n    },\n    size: {\n      sm: { padding: \"4\", fontSize: \"12px\" },\n      lg: { padding: \"8\", fontSize: \"24px\" },\n    },\n  },\n  compoundVariants: [\n    {\n      size: \"small\",\n      visual: \"outline\",\n      css: {\n        borderWidth: \"2px\",\n      },\n    },\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Core Color Tokens in Chakra UI Theme\nDESCRIPTION: Shows how to create custom color tokens by extending Chakra UI's theme using the defineConfig function. This example defines a custom brand color palette with various shades.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/blog/03-building-consistent-uis-with-design-tokens.mdx#2025-04-23_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { createSystem, defaultConfig, defineConfig } from \"@chakra-ui/react\"\n\nconst customConfig = defineConfig({\n  theme: {\n    tokens: {\n      colors: {\n        brand: {\n          50: { value: \"#e6f2ff\" },\n          100: { value: \"#e6f2ff\" },\n          200: { value: \"#bfdeff\" },\n          300: { value: \"#99caff\" },\n          // ...\n          950: { value: \"#001a33\" },\n        },\n      },\n    },\n  },\n})\n\nexport const system = createSystem(defaultConfig, customConfig)\n```\n\n----------------------------------------\n\nTITLE: Converting Chakra UI Style Objects to CSS with Styling System in TypeScript\nDESCRIPTION: Uses system.css to transform style objects using Chakra shorthand tokens into CSS-ready objects. Inputs are objects with style properties and tokenized values; output is a plain object with CSS variables as values. Integrates with emotion, styled-components, or any CSS-in-JS library.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/overview.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nconst system = createSystem(defaultConfig, config)\n\nsystem.css({\n  color: \"red.200\",\n  bg: \"blue.200\",\n})\n\n// => { color: \"var(--chakra-colors-red-200)\", background: \"var(--chakra-colors-blue-200)\" }\n\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Theme, Tokens, and Animations in Chakra UI Theming with TypeScript\nDESCRIPTION: Illustrates a comprehensive theme configuration, setting up breakpoints, color tokens, semantic tokens, and keyframes. Uses defineConfig to structure theme settings for responsiveness and custom styling, then passes the config to createSystem for engine creation. Dependencies: @chakra-ui/react, TypeScript. Input is a nested theme object; output is a new system instance supporting advanced theming features.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/overview.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = defineConfig({\n  theme: {\n    breakpoints: {\n      sm: \"320px\",\n      md: \"768px\",\n      lg: \"960px\",\n      xl: \"1200px\",\n    },\n    tokens: {\n      colors: {\n        red: \"#EE0F0F\",\n      },\n    },\n    semanticTokens: {\n      colors: {\n        danger: { value: \"{colors.red}\" },\n      },\n    },\n    keyframes: {\n      spin: {\n        from: { transform: \"rotate(0deg)\" },\n        to: { transform: \"rotate(360deg)\" },\n      },\n    },\n  },\n})\n\nexport default createSystem(defaultConfig, config)\n\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Text Component in JSX\nDESCRIPTION: This example demonstrates the basic usage of the Text component. It renders a simple text string within the component.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/text.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Text>This is the text component</Text>\n```\n\n----------------------------------------\n\nTITLE: Grouping Slider Markers Manually in Chakra UI (React, TSX)\nDESCRIPTION: This snippet illustrates manual composition of slider marks using 'Slider.MarkerGroup', encapsulating individual 'Slider.Marker' elements for specific values (e.g., 0 and 50). This pattern is useful when you need precise control over which marks are shown and their properties. '@chakra-ui/react' must be available and any value assigned to 'value' must fall within the slider's domain.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/slider.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Slider.MarkerGroup>\n  <Slider.Marker value={0} />\n  <Slider.Marker value={50} />\n</Slider.MarkerGroup>\n```\n\n----------------------------------------\n\nTITLE: Setting up Chakra UI Provider in Next.js App\nDESCRIPTION: Code to wrap the Next.js application with the Chakra UI Provider component, which includes ChakraProvider and ThemeProvider.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/get-started/frameworks/next-pages.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Provider } from \"@/components/ui/provider\"\n\nexport default function App({ Component, pageProps }: AppProps) {\n  return (\n    <Provider>\n      <Component {...pageProps} />\n    </Provider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Dark Mode Toggle Button in Chakra UI\nDESCRIPTION: This code shows how to add a ColorModeButton component to toggle between light and dark modes in a Chakra UI application.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/dark-mode.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ColorModeButton } from \"@/components/ui/color-mode\"\n\nexport default function Page({ children }: { children: React.ReactNode }) {\n  return (\n    <>\n      <ColorModeButton />\n      {children}\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Individual Animation Properties in Chakra UI Components (TSX)\nDESCRIPTION: This snippet demonstrates setting each animation-related property individually on a Chakra UI `Box` component in JSX. Properties like `animationName`, `animationDuration`, `animationTimingFunction`, and `animationIterationCount` are assigned values explicitly, closely controlling the animation behavior per component. This pattern is useful when more fine-grained or dynamic animation settings are needed rather than tokenized styles. Requires Chakra UI's component library and an animation keyframe of the given name (e.g., `shakeX`) to be defined in the theme for correct referencing.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/customization/animations.mdx#2025-04-23_snippet_3\n\nLANGUAGE: TSX\nCODE:\n```\n<Box\n  animationName=\"shakeX\"\n  animationDuration=\"1s\"\n  animationTimingFunction=\"ease-in-out\"\n  animationIterationCount=\"infinite\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Targeting Breakpoint Range Styling with Chakra UI in JSX\nDESCRIPTION: This snippet demonstrates how to use the 'mdToXl' prop in Chakra UI to apply styles between the 'md' and 'xl' breakpoints only. It requires Chakra UI 2.x+ for the 'mdToXl' feature and a React setup. When rendered, the Text component has a 'fontWeight' of 'bold' only between medium and extra large viewport widths. Key parameter is the responsive prop, with output being the styled Text element.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/responsive-design.mdx#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Text fontWeight={{ mdToXl: \"bold\" }}>Text</Text>\n```\n\n----------------------------------------\n\nTITLE: Basic Structure of the Stat Component in Chakra UI (TSX)\nDESCRIPTION: Illustrates the fundamental structure for using the `Stat` component. It utilizes compound components nested within `Stat.Root`, including `Stat.Label` for the title, `Stat.ValueText` for the main figure, `Stat.HelpText` for additional context, and `Stat.UpIndicator` (or potentially `Stat.DownIndicator`) for trend indication.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/stat.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Stat.Root>\n  <Stat.Label />\n  <Stat.ValueText />\n  <Stat.HelpText />\n  <Stat.UpIndicator />\n</Stat.Root>\n```\n\n----------------------------------------\n\nTITLE: Nested Conditional Styles in Chakra UI\nDESCRIPTION: Shows how to apply nested conditional styles to change the background color on hover and focus.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/conditional-styles.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Box bg={{ base: \"red.500\", _hover: { _focus: \"red.700\" } }}>\n  Hover & Focus me\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Styling for Dark Mode in Chakra UI Components\nDESCRIPTION: These snippets demonstrate two methods of applying dark mode styles to Chakra UI components using the _dark condition.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/dark-mode.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Box bg={{ base: \"white\", _dark: \"black\" }}>\n  <Text>Hello</Text>\n</Box>\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<Box bg=\"white\" _dark={{ bg: \"black\" }}>\n  <Text>Hello</Text>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Optimizing Chakra UI bundle in Next.js configuration\nDESCRIPTION: This JavaScript snippet shows how to configure Next.js to optimize package imports for Chakra UI, reducing bundle size by loading only the necessary modules.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/get-started/frameworks/next-app.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport default {\n  experimental: {\n    optimizePackageImports: [\"@chakra-ui/react\"],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Tabs Structure in Chakra UI\nDESCRIPTION: Demonstrates the basic structure of the Tabs component, including Root, List, Trigger, Indicator, and Content elements.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/tabs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Tabs.Root>\n  <Tabs.List>\n    <Tabs.Trigger />\n    <Tabs.Indicator />\n  </Tabs.List>\n  <Tabs.Content />\n</Tabs.Root>\n```\n\n----------------------------------------\n\nTITLE: Basic Clipboard Component Structure in Chakra UI\nDESCRIPTION: Demonstrates the basic structure of the Clipboard component with its subcomponents: Root, Trigger, CopyText, Indicator, and Input.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/clipboard.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Clipboard.Root>\n  <Clipboard.Trigger>\n    <Clipboard.CopyText />\n    <Clipboard.Indicator />\n  </Clipboard.Trigger>\n  <Clipboard.Input />\n</Clipboard.Root>\n```\n\n----------------------------------------\n\nTITLE: Using Pseudo-Element Styles in Chakra UI\nDESCRIPTION: Demonstrates how to style ::before and ::after pseudo-elements using _before and _after modifiers.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/conditional-styles.mdx#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Box _before={{ content: '\"👋\"' }} _after={{ content: '\"🥂\"' }}>\n  Hello\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Using Chakra UI components in a React component\nDESCRIPTION: This TypeScript React snippet demonstrates the usage of Chakra UI components (Button and HStack) to create a simple UI element with two buttons.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/get-started/frameworks/next-app.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, HStack } from \"@chakra-ui/react\"\n\nconst Demo = () => {\n  return (\n    <HStack>\n      <Button>Click me</Button>\n      <Button>Click me</Button>\n    </HStack>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Tokens in Chakra UI Theme (TypeScript)\nDESCRIPTION: Demonstrates how to define basic color and font design tokens within the `theme.tokens` object in a Chakra UI configuration file (`theme.ts`). It uses `defineConfig` to structure the theme and `createSystem` to initialize the system with the custom configuration and default settings. Each token requires a `value` key.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/tokens.mdx#2025-04-23_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { createSystem, defaultConfig, defineConfig } from \"@chakra-ui/react\"\n\nconst config = defineConfig({\n  theme: {\n    tokens: {\n      colors: {\n        primary: { value: \"#0FEE0F\" },\n        secondary: { value: \"#EE0F0F\" },\n      },\n      fonts: {\n        body: { value: \"system-ui, sans-serif\" },\n      },\n    },\n  },\n})\n\nexport const system = createSystem(defaultConfig, config)\n```\n\n----------------------------------------\n\nTITLE: Styling Ark UI Carousel with Chakra Factory\nDESCRIPTION: Creating a styled Carousel component by wrapping Ark UI components with the chakra factory. Defines styles for each part of the carousel with base styles and variants for theming and customization.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/guides/styling-external-libraries.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Carousel as ArkCarousel } from \"@ark-ui/react/carousel\"\nimport { chakra } from \"@chakra-ui/react\"\n\nconst CarouselRoot = chakra(ArkCarousel.Root, {\n  base: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n\n  variants: {},\n})\n\nconst CarouselItem = chakra(ArkCarousel.Item, {\n  base: {\n    width: \"100%\",\n    height: \"100%\",\n  },\n})\n\nconst CarouselIndicatorGroup = chakra(ArkCarousel.IndicatorGroup, {\n  base: {\n    display: \"flex\",\n    gap: 2,\n  },\n})\n\nconst CarouselIndicator = chakra(ArkCarousel.Indicator, {\n  base: {\n    borderRadius: \"full\",\n    bg: \"bg.subtle\",\n    _selected: {\n      bg: \"teal.solid\",\n    },\n  },\n  variants: {\n    size: {\n      sm: {\n        width: 3,\n        height: 3,\n      },\n      md: {\n        width: 4,\n        height: 4,\n      },\n    },\n  },\n})\n\nconst CarouselItemGroup = chakra(ArkCarousel.ItemGroup, {\n  base: {\n    display: \"flex\",\n    gap: 2,\n  },\n})\n\nexport const Carousel = {\n  Root: CarouselRoot,\n  IndicatorGroup: CarouselIndicatorGroup,\n  Indicator: CarouselIndicator,\n  ItemGroup: CarouselItemGroup,\n  Item: CarouselItem,\n  NextTrigger: ArkCarousel.NextTrigger,\n  PrevTrigger: ArkCarousel.PrevTrigger,\n}\n```\n\n----------------------------------------\n\nTITLE: Using the 'asChild' Prop with Popover Component\nDESCRIPTION: Shows how to use the 'asChild' prop to compose a Popover's trigger functionality onto a Button component, following the Radix UI pattern for component composition.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/concepts/composition.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Popover.Root>\n  <Popover.Trigger asChild>\n    <Button>Open</Button>\n  </Popover.Trigger>\n</Popover.Root>\n```\n\n----------------------------------------\n\nTITLE: Applying Hover Styles in Chakra UI\nDESCRIPTION: Demonstrates how to change the background color of a Box component when hovered using the _hover prop.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/conditional-styles.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Box bg=\"red.500\" _hover={{ bg: \"red.700\" }}>\n  Hover me\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Chakra UI Component with Factory Function\nDESCRIPTION: This example shows how to create a custom Chakra UI component using the chakra() factory function. It defines a BlogPost component with base styles and variants.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/concepts/server-components.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n\"use client\"\n\nimport { chakra } from \"@chakra-ui/react\"\n\nexport const BlogPost = chakra(\"div\", {\n  base: {\n    color: \"red\",\n  },\n  variants: {\n    primary: {\n      true: { color: \"blue\" },\n      false: { color: \"green\" },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Fractional Widths in Chakra UI JSX\nDESCRIPTION: Illustrates how to set fractional widths (e.g., 1/2, 1/3, 1/4) on Chakra UI Box components within a Flex container using the `width` prop. This allows for easy layout division based on available space. Requires the Chakra UI library and the Box and Flex components.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/sizing.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// half width\n<Flex>\n  <Box width=\"1/2\" />\n  <Box width=\"1/2\" />\n</Flex>\n\n// thirds\n<Flex>\n  <Box width=\"1/3\" />\n  <Box width=\"2/3\" />\n</Flex>\n\n// fourths\n<Flex>\n  <Box width=\"1/4\" />\n  <Box width=\"3/4\" />\n</Flex>\n\n// fifths\n<Flex>\n  <Box width=\"1/5\" />\n  <Box width=\"4/5\" />\n</Flex>\n\n// sixths\n<Flex>\n  <Box width=\"1/6\" />\n  <Box width=\"5/6\" />\n</Flex>\n\n// twelfths\n<Flex>\n  <Box width=\"3/12\" />\n  <Box width=\"9/12\" />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Importing Alert Component in React with Chakra UI\nDESCRIPTION: Basic import statement for the Alert component from Chakra UI's React package.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/alert.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Alert } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Splitting Variant Props with recipe.splitVariantProps (TSX)\nDESCRIPTION: Shows how to use the `recipe.splitVariantProps` function, obtained from `useSlotRecipe`, to automatically separate recipe-specific variant props (like `size`) from other component props. This simplifies prop handling when applying recipe styles by isolating props meant for the recipe logic.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/slot-recipes.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n```tsx title=\"checkbox.tsx\" {8}\n\"use client\"\n\nimport { chakra, useSlotRecipe } from \"@chakra-ui/react\"\nimport { checkboxSlotRecipe } from \"./checkbox.recipe\"\n\nexport const Checkbox = (props) => {\n  const recipe = useSlotRecipe({ recipe: checkboxSlotRecipe })\n  const [recipeProps, restProps] = recipe.splitVariantProps(props)\n  const styles = recipe(recipeProps)\n\n  //...\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Utilizing Virtual Color Placeholders in Chakra UI Buttons (JSX)\nDESCRIPTION: Showcases the use of the colorPalette property on Chakra UI Button components for primary and outlined button variants. Requires Chakra UI and React. These examples take typical Button props and utilize the color palette syntax to theme buttons dynamically.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/virtual-color.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Button colorPalette=\"blue\">Click me</Button>\n<Button colorPalette=\"red\" variant=\"outline\">\n  Click me\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Basic Bar Chart Structure in React with Chakra UI and Recharts\nDESCRIPTION: This code demonstrates the basic structure of a bar chart using Chakra UI's Chart component and Recharts elements.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/bar-chart.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Chart.Root>\n  <BarChart>\n    <CartesianGrid />\n    <XAxis />\n    <YAxis />\n    <Bar />\n  </BarChart>\n</Chart.Root>\n```\n\n----------------------------------------\n\nTITLE: Using VisuallyHidden Component in React with Chakra UI\nDESCRIPTION: This example demonstrates how to use the VisuallyHidden component to hide content visually while keeping it accessible to screen readers. The content inside the component will be hidden from view but still readable by assistive technologies.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/visually-hidden.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<VisuallyHidden>Hidden content</VisuallyHidden>\n```\n\n----------------------------------------\n\nTITLE: Defining Chakra UI Breakpoints in TypeScript\nDESCRIPTION: This TypeScript snippet defines the default breakpoints for Chakra UI using a JavaScript object. Each key represents a named breakpoint and maps to a CSS 'em' value. Requires Chakra UI and a React project, and is typically imported or extended when customizing themes or responsive logic. Inputs are not required; the object is generally exported or merged with other theme settings.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/responsive-design.mdx#2025-04-23_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nconst breakpoints = {\n  base: \"0em\", // 0px\n  sm: \"30em\", // ~480px\n  md: \"48em\", // ~768px\n  lg: \"62em\", // ~992px\n  xl: \"80em\", // ~1280px\n  \"2xl\": \"96em\", // ~1536px\n}\n```\n\n----------------------------------------\n\nTITLE: Using Slider.Marks Shortcut Prop in Chakra UI (React, TSX)\nDESCRIPTION: This snippet simplifies the rendering of marks by using the 'Slider.Marks' shortcut component. The 'marks' prop receives an array of values to render markers at those positions. This is suitable for standard use cases where advanced customization of individual markers is not needed. Only the 'marks' array must be provided; values should respect the slider's min/max.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/slider.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<Slider.Marks marks={[0, 50]} />\n```\n\n----------------------------------------\n\nTITLE: Applying a Semantic Token in a Chakra UI Component (TSX)\nDESCRIPTION: This snippet demonstrates how to use a previously defined semantic token (`danger`) within a React component using Chakra UI. The `danger` token is applied to the `color` prop of the `Box` component. This assumes the theme containing the `danger` semantic token is correctly configured and potentially that theme typings have been generated for autocompletion.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/semantic-tokens.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\n<Box color=\"danger\">Hello World</Box>\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Semantic Color Tokens for a Custom Palette in Chakra UI (TypeScript)\nDESCRIPTION: Demonstrates how to create semantic tokens (e.g., `solid`, `contrast`, `fg`) for the custom 'brand' color within the `semanticTokens.colors` section of the theme. These tokens reference the base color tokens (e.g., `{colors.brand.500}`) and provide meaningful names for common color roles, enhancing consistency and enabling features like `colorPalette`.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/customization/colors.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx title=\"theme.ts\"\nconst customConfig = defineConfig({\n  theme: {\n    tokens: {\n      colors: {\n        brand: {\n          // ...\n        },\n      },\n    },\n    semanticTokens: {\n      colors: {\n        brand: {\n          solid: { value: \"{colors.brand.500}\" },\n          contrast: { value: \"{colors.brand.100}\" },\n          fg: { value: \"{colors.brand.700}\" },\n          muted: { value: \"{colors.brand.100}\" },\n          subtle: { value: \"{colors.brand.200}\" },\n          emphasized: { value: \"{colors.brand.300}\" },\n          focusRing: { value: \"{colors.brand.500}\" },\n        },\n      },\n    },\n  },\n})\n```\n```\n\n----------------------------------------\n\nTITLE: Basic Stack Usage in Chakra UI\nDESCRIPTION: Demonstrates the basic usage of the Stack component. By default, it applies a vertical layout with a gap of 8px between child elements.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/stack.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Stack>\n  <div />\n  <div />\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Applying Data-Attribute Styles in Chakra UI\nDESCRIPTION: Demonstrates how to apply styles based on a data-loading attribute using the _loading modifier.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/conditional-styles.mdx#2025-04-23_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\n<Box data-loading _loading={{ bg: \"gray.500\" }}>\n  Hello\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Using Chakra UI Components in Next.js\nDESCRIPTION: Example of using Chakra UI components (Button and HStack) in a Next.js component.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/get-started/frameworks/next-pages.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, HStack } from \"@chakra-ui/react\"\n\nconst Demo = () => {\n  return (\n    <HStack>\n      <Button>Click me</Button>\n      <Button>Click me</Button>\n    </HStack>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Spacing Tokens for Consistent Layouts in Chakra UI\nDESCRIPTION: Shows how to use Chakra UI's numeric spacing tokens for padding and margin. The tokens represent multiples of the base unit (0.25rem or 4px), ensuring consistent spacing across components.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/blog/03-building-consistent-uis-with-design-tokens.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Box padding={4} margin={2}>\n  Consistent Padding and Margin\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Styling Chakra UI Text Responsively with Object Syntax in JSX\nDESCRIPTION: Demonstrates using object syntax in JSX to conditionally apply 'fontWeight' based on the 'lg' (large screen) breakpoint in Chakra UI. Requires a React environment with Chakra UI installed. The 'fontWeight' prop is set to 'medium' by default and becomes 'bold' on large screens, letting the Text component adapt stylistically to different viewport widths. The key input is the JSX prop; output is a Text element styled responsively.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/responsive-design.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Text fontWeight=\"medium\" lg={{ fontWeight: \"bold\" }}>\n  Text\n</Text>\n```\n\n----------------------------------------\n\nTITLE: Forcing Element-Specific Dark Mode in Chakra UI\nDESCRIPTION: This snippet demonstrates how to force dark mode for a specific element by applying the 'dark' className.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/dark-mode.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<Box bg=\"black\" className=\"dark\">\n  <Box bg=\"bg.subtle\">\n    <Text>Hello</Text>\n  </Box>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Color Tokens in Chakra UI (TypeScript)\nDESCRIPTION: Shows how to add a custom color scale ('brand') to the Chakra UI theme using `defineConfig`. It defines specific hex values for different shades (50-950) under `theme.tokens.colors`. This allows referencing these colors like `brand.100` in components and initializes the system with `createSystem`.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/customization/colors.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx title=\"theme.ts\"\nimport { createSystem, defaultConfig, defineConfig } from \"@chakra-ui/react\"\n\nconst customConfig = defineConfig({\n  theme: {\n    tokens: {\n      colors: {\n        brand: {\n          50: { value: \"#e6f2ff\" },\n          100: { value: \"#e6f2ff\" },\n          200: { value: \"#bfdeff\" },\n          300: { value: \"#99caff\" },\n          // ...\n          950: { value: \"#001a33\" },\n        },\n      },\n    },\n  },\n})\n\nexport const system = createSystem(defaultConfig, customConfig)\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Border Tokens in Chakra UI Theme (TypeScript)\nDESCRIPTION: Demonstrates defining border tokens using `defineTokens`. It includes examples using a simple string (`subtle`), a string with a color token reference (`danger`), and a composite object specifying width, color, and style (`accent`). These tokens are used for border-related CSS properties and added via `createSystem`.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/tokens.mdx#2025-04-23_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineTokens } from \"@chakra-ui/react\"\n\nconst tokens = defineTokens({\n  borders: {\n    // string value\n    subtle: { value: \"1px solid red\" },\n    // string value with reference to color token\n    danger: { value: \"1px solid {colors.red.400}\" },\n    // composite value\n    accent: { value: { width: \"1px\", color: \"red\", style: \"solid\" } },\n  },\n})\n\nexport default createSystem({\n  theme: { tokens },\n})\n```\n\n----------------------------------------\n\nTITLE: Applying Motion-Safe Styles in Chakra UI\nDESCRIPTION: Shows how to apply styles based on the user's motion preference using the _motionSafe modifier.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/conditional-styles.mdx#2025-04-23_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<Box _motionSafe={{ transition: \"all 0.3s\" }}>Hello</Box>\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Chakra UI Utility (`br`) using Theme Tokens in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a custom utility `br` in Chakra UI using `defineConfig`. The `br` utility maps to the `borderRadius` CSS property and uses values from the theme's `radii` token scale. The `transform` function applies the chosen token value to the `borderRadius` property.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/customization/utilities.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createSystem, defaultConfig, defineConfig } from \"@chakra-ui/react\"\n\nconst customConfig = defineConfig({\n  utilities: {\n    extend: {\n      br: {\n        values: \"radii\",\n        transform(value) {\n          return { borderRadius: value }\n        },\n      },\n    },\n  },\n})\n\nconst system = createSystem(defaultConfig, customConfig)\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Recipe with defineRecipe in Chakra UI (TypeScript)\nDESCRIPTION: Shows comprehensive creation of a custom recipe named `Title`, with base styles and multiple size variants using `defineRecipe` and TypeScript. The snippet demonstrates integrating the new recipe into the theme and system. All parameters specify their intent (baseStyle for defaults, variants for variant types). Prerequisites: Chakra UI theming API setup.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/customization/recipes.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst titleRecipe = defineRecipe({\n  baseStyle: {\n    fontWeight: \"bold\",\n    letterSpacing: \"tight\",\n  },\n  variants: {\n    size: {\n      md: { fontSize: \"xl\" },\n      lg: { fontSize: \"2xl\" },\n    },\n  },\n})\n\nconst customConfig = defineConfig({\n  theme: {\n    recipes: {\n      title: titleRecipe,\n    },\n  },\n})\n\nexport const system = createSystem(defaultConfig, customConfig)\n```\n\n----------------------------------------\n\nTITLE: Basic Pagination Usage in React\nDESCRIPTION: Demonstrates the basic structure of the Pagination component with its subcomponents.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/pagination.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Pagination.Root>\n  <Pagination.PrevTrigger />\n  <Pagination.Ellipsis />\n  <Pagination.Item />\n  <Pagination.PageText />\n  <Pagination.NextTrigger />\n</Pagination.Root>\n```\n\n----------------------------------------\n\nTITLE: Creating Variants-Based Component Recipes with cva in Chakra UI Theming (TypeScript)\nDESCRIPTION: Demonstrates usage of system.cva to define component recipes with base styles and variant overrides. The returned function computes the style object based on variant props. Inputs are recipe config with base and variants; output is a style object. Assumes system instance from createSystem.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/overview.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nconst system = createSystem(defaultConfig, config)\n\nconst button = system.cva({\n  base: {\n    color: \"white\",\n    bg: \"blue.500\",\n  },\n  variants: {\n    outline: {\n      color: \"blue.500\",\n      bg: \"transparent\",\n      border: \"1px solid\",\n    },\n  },\n})\n\nbutton({ variant: \"outline\" })\n// => { color: \"blue.500\", bg: \"transparent\", border: \"1px solid\" }\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Chakra UI Theme Config in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use Chakra UI's helper functions to define a custom theme configuration. It imports the createSystem, defaultBaseConfig, and defineConfig utilities from @chakra-ui/react. The customConfig object establishes a new color variant, and the system object is then created by merging the defaultBaseConfig with the custom setup. Dependencies: @chakra-ui/react must be installed. Inputs: theme object with desired customizations. Output: a system object for use with ChakraProvider.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/customization/overview.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createSystem, defaultBaseConfig, defineConfig } from \"@chakra-ui/react\"\n\nconst customConfig = defineConfig({\n  theme: {\n    colors: {\n      brand: {\n        500: \"tomato\",\n      },\n    },\n  },\n})\n\nexport const system = createSystem(defaultBaseConfig, customConfig)\n```\n\n----------------------------------------\n\nTITLE: Basic Line Chart Structure in React\nDESCRIPTION: Create a basic structure for a line chart using Chakra UI and Recharts components.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/line-chart.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Chart.Root>\n  <LineChart>\n    <CartesianGrid />\n    <XAxis />\n    <YAxis />\n    <Line />\n  </LineChart>\n</Chart.Root>\n```\n\n----------------------------------------\n\nTITLE: Using Defined Tokens in Chakra UI Components (TSX)\nDESCRIPTION: Example of applying previously defined design tokens (`primary` for color, `body` for font family) to props of a Chakra UI `Box` component. This relies on the theme configuration and potentially the generated typings for autocompletion.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/tokens.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Box color=\"primary\" fontFamily=\"body\">\n  Hello World\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Basic Accordion Structure in Chakra UI (TSX)\nDESCRIPTION: This snippet demonstrates the basic structure of an Accordion component in Chakra UI. It includes the root, item, trigger, indicator, content, and body elements.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/accordion.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Accordion.Root>\n  <Accordion.Item>\n    <Accordion.ItemTrigger>\n      <Accordion.ItemIndicator />\n    </Accordion.ItemTrigger>\n    <Accordion.ItemContent>\n      <Accordion.ItemBody />\n    </Accordion.ItemContent>\n  </Accordion.Item>\n</Accordion.Root>\n```\n\n----------------------------------------\n\nTITLE: Defining Color Tokens with `defineTokens` Helper (TypeScript)\nDESCRIPTION: Example of defining color tokens using the `defineTokens` helper function provided by Chakra UI. This structures the color definitions (e.g., `red.100`) which are then passed to `createSystem` within the `theme.tokens` key.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/tokens.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineTokens } from \"@chakra-ui/react\"\n\nconst tokens = defineTokens({\n  colors: {\n    red: {\n      100: { value: \"#fff1f0\" },\n    },\n  },\n})\n\nexport default createSystem({\n  theme: { tokens },\n})\n```\n\n----------------------------------------\n\nTITLE: Applying Padding to Elements with Chakra UI - JavaScript/JSX\nDESCRIPTION: This snippet illustrates multiple ways to apply padding to a Chakra UI <Box> element using the padding prop with both raw CSS and theme token values, as well as shorthand notation (p). Dependencies: React, Chakra UI. Key parameters: 'padding' and 'p' props, accepting string values that are either numeric tokens or raw CSS values. Outputs a padded Box component; tokens refer to theme spacing scales. Only works within a ChakraProvider context.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/spacing.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// raw value\\n<Box padding=\\\"40px\\\" />\\n<Box p=\\\"40px\\\" /> // shorthand\\n\\n// token value\\n<Box padding=\\\"4\\\" />\\n<Box p=\\\"4\\\" /> // shorthand\n```\n\n----------------------------------------\n\nTITLE: Basic ActionBar Structure in Chakra UI (TSX)\nDESCRIPTION: Demonstrates the basic structure of the ActionBar component with its subcomponents including Root, Positioner, Content, CloseTrigger, SelectionTrigger, and Separator.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/action-bar.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<ActionBar.Root>\n  <ActionBar.Positioner>\n    <ActionBar.Content>\n      <ActionBar.CloseTrigger />\n      <ActionBar.SelectionTrigger />\n      <ActionBar.Separator />\n    </ActionBar.Content>\n  </ActionBar.Positioner>\n</ActionBar.Root>\n```\n\n----------------------------------------\n\nTITLE: Basic Box Component Usage\nDESCRIPTION: Demonstrates the most basic usage of the Box component with no props. This renders an empty div with Chakra UI's default styling.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/box.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Box />\n```\n\n----------------------------------------\n\nTITLE: Implementing Chakra UI Provider in React Application Root\nDESCRIPTION: This React code demonstrates how to wrap the main application component with the custom Provider to enable Chakra UI with Shadow DOM support at the root level of the application.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/get-started/environments/shadow-dom.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Provider } from \"@/components/ui/provider\"\nimport { StrictMode } from \"react\"\nimport { createRoot } from \"react-dom/client\"\nimport App from \"./App.tsx\"\n\ncreateRoot(document.getElementById(\"root\")!).render(\n  <StrictMode>\n    <Provider>\n      <App />\n    </Provider>\n  </StrictMode>,\n)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Rendering Children with Show Component (JSX)\nDESCRIPTION: This snippet shows how to use the Chakra UI Show component to conditionally render its children and an optional fallback UI. The 'when' prop accepts a boolean to control rendering, while the 'fallback' prop specifies content to display when the condition is false. The main input is the boolean expression in 'when'; outputs are the rendered content or fallback. Requires @chakra-ui/react as a dependency.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/show.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Show when={...} fallback={...}>\n  <div>Content</div>\n</Show>\n```\n\n----------------------------------------\n\nTITLE: Structuring Basic Chakra UI Switch with Parts in TSX\nDESCRIPTION: Demonstrates the fundamental composition of the Chakra UI Switch using its constituent parts: `Switch.Root`, `Switch.HiddenInput`, `Switch.Control`, `Switch.Thumb`, and `Switch.Label`. This approach offers maximum flexibility for customization and accessibility.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/switch.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Switch.Root>\n  <Switch.HiddenInput />\n  <Switch.Control>\n    <Switch.Thumb />\n  </Switch.Control>\n  <Switch.Label />\n</Switch.Root>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Collapsible Component in JSX\nDESCRIPTION: This example demonstrates the basic structure of the Collapsible component. It includes the Root, Trigger, and Content subcomponents, which are essential for creating an expandable/collapsible section.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/collapsible.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Collapsible.Root>\n  <Collapsible.Trigger />\n  <Collapsible.Content />\n</Collapsible.Root>\n```\n\n----------------------------------------\n\nTITLE: Basic Structure of a Chakra UI Timeline (React/TSX)\nDESCRIPTION: This JSX code illustrates the fundamental structure for rendering a Chakra UI Timeline. It utilizes the imported `Timeline` component and its subcomponents (`Root`, `Item`, `Connector`, `Separator`, `Indicator`, `Content`, `Title`, `Description`) to create a single timeline event entry. This pattern forms the basis for displaying a list of events chronologically.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/timeline.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Timeline.Root>\n  <Timeline.Item>\n    <Timeline.Connector>\n      <Timeline.Separator />\n      <Timeline.Indicator />\n    </Timeline.Connector>\n    <Timeline.Content>\n      <Timeline.Title />\n      <Timeline.Description />\n    </Timeline.Content>\n  </Timeline.Item>\n</Timeline.Root>\n```\n\n----------------------------------------\n\nTITLE: Limiting Textarea Autoresize Height in Chakra UI (TSX)\nDESCRIPTION: Shows how to limit the maximum height of an autoresizing Chakra UI `Textarea` component using the `maxH` prop. The value `5lh` restricts the height to 5 line heights, preventing it from growing indefinitely while still allowing vertical resizing based on content.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/textarea.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Textarea autoresize maxH=\"5lh\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of QR Code Component in Chakra UI\nDESCRIPTION: This snippet demonstrates the basic structure and usage of the QR Code component in Chakra UI. It shows how to set up the root, frame, and pattern elements.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/qr-code.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<QrCode.Root value=\"...\">\n  <QrCode.Frame>\n    <QrCode.Pattern />\n  </QrCode.Frame>\n</QrCode.Root>\n```\n\n----------------------------------------\n\nTITLE: Defining Text Styles with Chakra UI in JavaScript\nDESCRIPTION: This snippet demonstrates how to define custom text styles for typography using Chakra UI's defineTextStyles function in a JavaScript module. Required dependency is @chakra-ui/react. The exported textStyles object includes a 'body' style with properties such as fontFamily, fontWeight, fontSize, lineHeight, letterSpacing, textDecoration, and textTransform. The output is the textStyles object, which is used for further theme configuration.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/text-styles.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { defineTextStyles } from \"@chakra-ui/react\"\n\nexport const textStyles = defineTextStyles({\n  body: {\n    description: \"The body text style - used in paragraphs\",\n    value: {\n      fontFamily: \"Inter\",\n      fontWeight: \"500\",\n      fontSize: \"16px\",\n      lineHeight: \"24\",\n      letterSpacing: \"0\",\n      textDecoration: \"None\",\n      textTransform: \"None\",\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Dark Mode Support via Chakra UI CLI\nDESCRIPTION: This command adds the necessary snippets for dark mode support to your Chakra UI project using the Chakra UI CLI.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/dark-mode.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @chakra-ui/cli snippet add color-mode\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Toast Notification - Chakra UI with React (JSX)\nDESCRIPTION: Demonstrates calling the `toaster.create` function to trigger a new toast with a title and description. The main parameters are `title` and `description`, both of type string. This function shows how to display temporary messages to the user programmatically.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/toast.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\ntoaster.create({\n  title: \"Toast Title\",\n  description: \"Toast Description\",\n})\n```\n\n----------------------------------------\n\nTITLE: Using Em Component in JSX for Text Emphasis\nDESCRIPTION: This example demonstrates how to use the Em component within a Text component to emphasize specific words or phrases. The Em component wraps the text that needs to be emphasized.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/em.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Text>\n  The <Em>design system</Em> is a collection of UI elements\n</Text>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Provider for Chakra UI with Shadow DOM\nDESCRIPTION: This React component creates a custom provider that composes ChakraProvider, EnvironmentProvider, CacheProvider, and ThemeProvider to enable Chakra UI to work correctly within a Shadow DOM environment.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/get-started/environments/shadow-dom.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\"\n\nimport { ChakraProvider, EnvironmentProvider } from \"@chakra-ui/react\"\nimport createCache from \"@emotion/cache\"\nimport { CacheProvider } from \"@emotion/react\"\nimport { ThemeProvider, type ThemeProviderProps } from \"next-themes\"\nimport { useEffect, useState } from \"react\"\nimport root from \"react-shadow/emotion\"\nimport { system } from \"./system\"\n\nexport function Provider(props: ThemeProviderProps) {\n  const [shadow, setShadow] = useState<HTMLElement | null>(null)\n  const [cache, setCache] = useState<ReturnType<typeof createCache> | null>(\n    null,\n  )\n\n  useEffect(() => {\n    if (!shadow?.shadowRoot || cache) return\n    const emotionCache = createCache({\n      key: \"root\",\n      container: shadow.shadowRoot,\n    })\n    setCache(emotionCache)\n  }, [shadow, cache])\n\n  return (\n    <root.div ref={setShadow}>\n      {shadow && cache && (\n        <EnvironmentProvider value={() => shadow.shadowRoot ?? document}>\n          <CacheProvider value={cache}>\n            <ChakraProvider value={system}>\n              <ThemeProvider {...props} />\n            </ChakraProvider>\n          </CacheProvider>\n        </EnvironmentProvider>\n      )}\n    </root.div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Button Usage in Chakra UI\nDESCRIPTION: Demonstrates the basic implementation of a Button component with text content\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/button.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Button>Click me</Button>\n```\n\n----------------------------------------\n\nTITLE: Using Layer Styles in Chakra UI Components\nDESCRIPTION: This JSX snippet demonstrates how to apply a layer style to a Chakra UI Box component using the layerStyle prop. It applies the 'container' style defined earlier.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/layer-styles.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Box layerStyle=\"container\">This is inside a container style</Box>\n```\n\n----------------------------------------\n\nTITLE: Using IframeProvider in Chakra UI Application\nDESCRIPTION: This TypeScript code demonstrates how to use the IframeProvider component to render Chakra UI components inside an iframe within a React application.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/get-started/environments/iframe.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, Container, Heading, Stack } from \"@chakra-ui/react\"\nimport { IframeProvider } from \"./components/ui/iframe-provider\"\n\nfunction App() {\n  return (\n    <Container py=\"8\">\n      <Heading mb=\"5\">Outside Iframe</Heading>\n\n      <IframeProvider>\n        <Stack p=\"6\" align=\"flex-start\" border=\"1px solid red\">\n          <Heading>Inside Iframe</Heading>\n          <Button>Click me</Button>\n        </Stack>\n      </IframeProvider>\n    </Container>\n  )\n}\n\nexport default App\n```\n\n----------------------------------------\n\nTITLE: Extending Chakra UI Theme with Custom Shadow Tokens - JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to extend Chakra UI's theme by adding a new custom semantic shadow token via the createSystem method. It requires the createSystem and defaultConfig objects from Chakra UI as dependencies. The code specifies shadow values for both light and dark modes, allowing for consistent theming. The export provides a customized system configuration, and the semanticTokens.shadows.custom.value object allows specifying mode-based shadow values.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/shadows.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const system = createSystem(defaultConfig, {\n    theme: {\n        semanticTokens: {\n            shadows: {\n                custom: {\n                    value: {\n                        _light: \"0 32px 56px 0 rgba(0, 0, 0, 0.25)\",\n                        _dark: \"0 32px 56px 0 rgba(0, 0, 0, 0.25)\",\n                    },\n                },\n            },\n        },\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing QRCode Component in React with Chakra UI\nDESCRIPTION: Example of how to use the new QRCode component in Chakra UI for converting text and links to QR codes. The component uses a compound component pattern with Root, Frame, and Pattern sub-components.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/packages/react/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { QrCode } from \"@chakra-ui/react\"\n\nexport const QrCodeWithoutSnippet = () => {\n  return (\n    <QrCode.Root value=\"...\" size=\"md\">\n      <QrCode.Frame>\n        <QrCode.Pattern />\n      </QrCode.Frame>\n    </QrCode.Root>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic CSS Variables in Chakra UI (JSX)\nDESCRIPTION: Demonstrates how to use the 'css' prop to create CSS variables in Chakra UI. The example shows setting a font size variable and applying it to different elements.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/css-variables.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Box css={{ \"--font-size\": \"18px\" }}>\n  <h3 style={{ fontSize: \"calc(var(--font-size) * 2)\" }}>Hello</h3>\n  <p style={{ fontSize: \"var(--font-size)\" }}>Hello</p>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Rendering File Upload Items with Context in React\nDESCRIPTION: Shows how to render uploaded file items using FileUpload.Context and mapping over accepted files.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/file-upload.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<FileUpload.ItemGroup>\n  <FileUpload.Context>\n    {({ acceptedFiles }) =>\n      acceptedFiles.map((file) => (\n        <FileUpload.Item key={file.name} file={file}>\n          <FileUpload.ItemPreview />\n          <FileUpload.ItemName />\n          <FileUpload.ItemSizeText />\n          <FileUpload.ItemDeleteTrigger />\n        </FileUpload.Item>\n      ))\n    }\n  </FileUpload.Context>\n</FileUpload.ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Setting Flex Grow Factor with flexGrow Prop - Chakra UI - JSX\nDESCRIPTION: Shows the usage of flexGrow prop on Chakra UI's Box components to control their grow factor within a Flex. Accepts numeric values; '0' disables growth, '1' enables it, and so on. React and Chakra UI are prerequisites.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/flex-and-grid.mdx#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex>\\n  <Box flexGrow=\"0\" />\\n  <Box flexGrow=\"1\" />\\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Basic Flex Container Usage in JSX\nDESCRIPTION: Demonstrates the basic usage of the Flex component as a container for child elements.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/flex.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex>\n  <div />\n  <div />\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Using useSlotRecipe Hook in a Checkbox Component (TSX)\nDESCRIPTION: Demonstrates consuming a defined slot recipe directly within a functional component using the `useSlotRecipe` hook. It retrieves styles based on the `size` prop and applies them to `chakra` elements representing the checkbox parts (root, control, label). Requires the `\"use client\"` directive as it uses React hooks.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/slot-recipes.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```tsx title=\"checkbox.tsx\"\n\"use client\"\n\nimport { chakra, useSlotRecipe } from \"@chakra-ui/react\"\nimport { checkboxSlotRecipe } from \"./checkbox.recipe\"\n\nexport const Checkbox = (props) => {\n  const { size, ...restProps } = props\n\n  const recipe = useSlotRecipe({ recipe: checkboxSlotRecipe })\n  const styles = recipe({ size })\n\n  return (\n    <chakra.label css={styles.root}>\n      <chakra.input type=\"checkbox\" css={styles.control} {...restProps} />\n      <chakra.span css={styles.label}>Checkbox Label</chakra.span>\n    </chakra.label>\n  )\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Hover Card Component in React\nDESCRIPTION: This example demonstrates the basic structure and usage of the HoverCard component in a React application, including the root, trigger, positioner, content, and arrow elements.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/hover-card.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<HoverCard.Root>\n  <HoverCard.Trigger />\n  <HoverCard.Positioner>\n    <HoverCard.Content>\n      <HoverCard.Arrow>\n        <HoverCard.ArrowTip />\n      </HoverCard.Arrow>\n    </HoverCard.Content>\n  </HoverCard.Positioner>\n</HoverCard.Root>\n```\n\n----------------------------------------\n\nTITLE: Hiding Elements Below a Breakpoint in Chakra UI with 'hideBelow' Utility (JSX)\nDESCRIPTION: This snippet uses the 'hideBelow' utility on a Chakra UI Stack to hide its contents (such as a Text child) on all screens smaller than 'md'. Requires Chakra UI and React. Inputs include the 'hideBelow' prop with a named breakpoint; output is the Stack's contents hidden for screen widths below 'md'. There are no side effects beyond display/hide.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/responsive-design.mdx#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Stack hideBelow=\"md\">\n  <Text>This text will be hidden below the `md` breakpoint</Text>\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Defining a Checkbox Slot Recipe in Chakra UI (TypeScript)\nDESCRIPTION: Defines a slot recipe for a Checkbox component using `defineSlotRecipe`. It specifies the component parts (`slots`), base styles for each part (`base`), and size variants (`variants`) affecting the 'control' and 'label' parts. This recipe serves as a reusable styling configuration.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/slot-recipes.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```tsx title=\"checkbox.recipe.ts\"\nimport { defineSlotRecipe } from \"@chakra-ui/react\"\n\nexport const checkboxSlotRecipe = defineSlotRecipe({\n  slots: [\"root\", \"control\", \"label\"],\n  base: {\n    root: { display: \"flex\", alignItems: \"center\", gap: \"2\" },\n    control: { borderWidth: \"1px\", borderRadius: \"sm\" },\n    label: { marginStart: \"2\" },\n  },\n  variants: {\n    size: {\n      sm: {\n        control: { width: \"8\", height: \"8\" },\n        label: { fontSize: \"sm\" },\n      },\n      md: {\n        control: { width: \"10\", height: \"10\" },\n        label: { fontSize: \"md\" },\n      },\n    },\n  },\n})\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Background Position with Chakra UI (JSX)\nDESCRIPTION: Explains how to use bgImage and bgPosition on Chakra UI's <Box> to manage both the source and positioning of a background image. Requires Chakra UI and utilizes bgImage for specifying the image and bgPosition for placing the image (e.g., 'center', 'top left').\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/background.mdx#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Box bgImage=\"url(...)\" bgPosition=\"center\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Responsive CSS Variables in Chakra UI (JSX)\nDESCRIPTION: Demonstrates how to create responsive CSS variables using Chakra UI's responsive syntax. The example shows a font size that changes based on screen size.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/css-variables.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Box css={{ \"--font-size\": { base: \"18px\", lg: \"24px\" } }}>\n  <h3 style={{ fontSize: \"calc(var(--font-size) * 2)\" }}>Hello</h3>\n  <p style={{ fontSize: \"var(--font-size)\" }}>Hello</p>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Configuring Chakra UI Theming System with cssVarsRoot in TypeScript\nDESCRIPTION: Shows how to set the cssVarsRoot property using defineConfig to specify the root element where token CSS variables are applied. This enables CSS variable scoping at custom DOM roots. Requires @chakra-ui/react and optionally TypeScript; expects a config object and outputs a system engine instance for export.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/overview.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = defineConfig({\n  cssVarsRoot: \":where(:root, :host)\",\n})\n\nexport default createSystem(defaultConfig, config)\n\n```\n\n----------------------------------------\n\nTITLE: Creating Compound Components with createSlotRecipeContext (TSX)\nDESCRIPTION: Demonstrates creating compound components (CheckboxRoot, CheckboxControl, CheckboxLabel) using `createSlotRecipeContext` and the provided `checkboxSlotRecipe`. This pattern utilizes React context (`withProvider`, `withContext`) to share recipe styles among related components. Requires manual typing for generics and the `\"use client\"` directive.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/slot-recipes.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n```tsx title=\"checkbox.tsx\"\n\"use client\"\n\nimport { createSlotRecipeContext } from \"@chakra-ui/react\"\nimport { checkboxSlotRecipe } from \"./checkbox.recipe\"\n\nconst { withProvider, withContext } = createSlotRecipeContext({\n  recipe: checkboxSlotRecipe,\n})\n\ninterface CheckboxRootProps\n  extends HTMLChakraProps<\n    \"label\",\n    RecipeVariantProps<typeof checkboxSlotRecipe>\n  > {}\nexport const CheckboxRoot = withProvider<HTMLLabelElement, CheckboxRootProps>(\n  \"label\",\n  \"root\",\n)\n\ninterface CheckboxControlProps extends HTMLChakraProps<\"input\"> {}\nexport const CheckboxControl = withContext<\n  HTMLInputElement,\n  CheckboxControlProps\n>(\"input\", \"control\")\n\ninterface CheckboxLabelProps extends HTMLChakraProps<\"span\"> {}\nexport const CheckboxLabel = withContext<HTMLSpanElement, CheckboxLabelProps>(\n  \"span\",\n  \"label\",\n)\n```\n```\n\n----------------------------------------\n\nTITLE: Importing Show Component in Chakra UI (JSX)\nDESCRIPTION: This snippet demonstrates how to import the Show component from the @chakra-ui/react package for use in a React application. The Show component allows for conditional rendering based on a boolean condition. The import statement is required before using the component within JSX. Ensure that @chakra-ui/react is installed as a dependency in your project.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/show.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Show } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Setting Flex Direction with Flex Component Alias - Chakra UI - JSX\nDESCRIPTION: Illustrates the use of the direction prop on Chakra UI's Flex component, which is an alias for flexDirection, to control flex layout direction. Takes the same values as flexDirection and outputs items arranged in the specified direction.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/flex-and-grid.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex direction=\"column\">\\n  <Box>Item 1</Box>\\n  <Box>Item 2</Box>\\n  <Box>Item 3</Box>\\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Basic Ark UI Carousel Implementation\nDESCRIPTION: Example of using the Carousel component from Ark UI without Chakra UI styling. Shows the component anatomy with Root, Control, PrevTrigger, NextTrigger, IndicatorGroup, and ItemGroup elements.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/guides/styling-external-libraries.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Carousel } from \"@ark-ui/react/carousel\"\n\nconst images = Array.from(\n  { length: 5 },\n  (_, i) => `https://picsum.photos/seed/${i + 1}/500/300`,\n)\n\nexport const Demo = () => {\n  return (\n    <Carousel.Root defaultPage={0} slideCount={images.length}>\n      <Carousel.Control>\n        <Carousel.PrevTrigger>Previous</Carousel.PrevTrigger>\n        <Carousel.NextTrigger>Next</Carousel.NextTrigger>\n      </Carousel.Control>\n      <Carousel.IndicatorGroup>\n        {images.map((_, index) => (\n          <Carousel.Indicator key={index} index={index} />\n        ))}\n      </Carousel.IndicatorGroup>\n      <Carousel.ItemGroup>\n        {images.map((image, index) => (\n          <Carousel.Item key={index} index={index}>\n            <img src={image} alt={`Slide ${index}`} />\n          </Carousel.Item>\n        ))}\n      </Carousel.ItemGroup>\n    </Carousel.Root>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic EmptyState Component Structure - Chakra UI TSX\nDESCRIPTION: Demonstrates the compound component structure of EmptyState with Root, Content, Indicator, Title, and Description components.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/empty-state.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<EmptyState.Root>\n  <EmptyState.Content>\n    <EmptyState.Indicator />\n    <EmptyState.Title />\n    <EmptyState.Description />\n  </EmptyState.Content>\n</EmptyState.Root>\n```\n\n----------------------------------------\n\nTITLE: Basic Structure of the Steps Component in React/TSX\nDESCRIPTION: This snippet illustrates the fundamental JSX structure for implementing the Chakra UI `Steps` component. It outlines the hierarchy using `Steps.Root` as the main container, `Steps.List` for the steps themselves, and `Steps.Item` for individual steps. Each item contains a `Steps.Trigger` (making it potentially interactive), `Steps.Indicator`, `Steps.Title`, `Steps.Description`, and a `Steps.Separator` between items. It also shows placeholders for `Steps.Content` (content for the current step), `Steps.CompletedContent` (content shown when all steps are done), and navigation triggers (`Steps.PrevTrigger`, `Steps.NextTrigger`).\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/steps.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Steps.Root>\n  <Steps.List>\n    <Steps.Item>\n      <Steps.Trigger>\n        <Steps.Indicator />\n        <Steps.Title />\n        <Steps.Description />\n      </Steps.Trigger>\n      <Steps.Separator />\n    </Steps.Item>\n  </Steps.List>\n  <Steps.Content />\n  <Steps.CompletedContent />\n  <Steps.PrevTrigger />\n  <Steps.NextTrigger />\n</Steps.Root>\n```\n\n----------------------------------------\n\nTITLE: Using ToggleTip Component in React JSX\nDESCRIPTION: This example demonstrates the basic usage of the ToggleTip component. It wraps a button element and provides content for the toggle tip. The content will be displayed when the button is interacted with.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/toggle-tip.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<ToggleTip content=\"...\">\n  <button />\n</ToggleTip>\n```\n\n----------------------------------------\n\nTITLE: Themed Outline Button Creation with Virtual Colors in Chakra UI (JSX)\nDESCRIPTION: Illustrates the creation of a themed outline button component using Chakra UI's chakra.button and virtual color properties. It uses the colorPalette property for red-themed styles, with dynamic border colors on hover. This requires Chakra UI and React set up. The code accepts standard button props; the output is a button that changes its border color based on the color palette, supporting theming.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/virtual-color.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<chakra.button\n  borderWidth=\"1px\"\n  colorPalette=\"red\"\n  borderColor=\"colorPalette.500\"\n  _hover={{\n    borderColor: \"colorPalette.600\",\n  }}\n>\n  Click me\n</chakra.button>\n```\n\n----------------------------------------\n\nTITLE: Setting Grid Row Start and End with gridRowStart and gridRowEnd - Chakra UI - JSX\nDESCRIPTION: Shows how to define the vertical start and end of an item within a CSS grid using the gridRowStart and gridRowEnd props on a Box component in Chakra UI. Useful for spanning items across rows. Requires Chakra UI/React.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/flex-and-grid.mdx#2025-04-23_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\n<Box display=\"grid\" gap=\"4\" gridTemplateRows=\"repeat(3, minmax(0, 1fr))\">\\n  <Box gridRowStart=\"1\" gridRowEnd=\"3\">\\n    Item 1\\n  </Box>\\n  <Box>Item 2</Box>\\n  <Box>Item 3</Box>\\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Creating Iframe Provider for Chakra UI\nDESCRIPTION: This TypeScript code creates an IframeProvider component that sets up the necessary context for using Chakra UI within an iframe, including emotion cache and ChakraProvider.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/get-started/environments/iframe.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  ChakraProvider,\n  EnvironmentProvider,\n  defaultSystem,\n} from \"@chakra-ui/react\"\nimport createCache from \"@emotion/cache\"\nimport { CacheProvider } from \"@emotion/react\"\nimport Iframe, { FrameContextConsumer } from \"react-frame-component\"\n\nfunction memoize<T extends object, R>(func: (arg: T) => R): (arg: T) => R {\n  const cache = new WeakMap<T, R>()\n  return (arg: T) => {\n    if (cache.has(arg)) return cache.get(arg)!\n    const ret = func(arg)\n    cache.set(arg, ret)\n    return ret\n  }\n}\n\nconst createCacheFn = memoize((container: HTMLElement) =>\n  createCache({ container, key: \"frame\" }),\n)\n\nexport const IframeProvider = (props: React.PropsWithChildren) => {\n  const { children } = props\n  return (\n    <Iframe>\n      <FrameContextConsumer>\n        {(frame) => {\n          const head = frame.document?.head\n          if (!head) return null\n          return (\n            <CacheProvider value={createCacheFn(head)}>\n              <EnvironmentProvider value={() => head.ownerDocument}>\n                <ChakraProvider value={defaultSystem}>\n                  {children}\n                </ChakraProvider>\n              </EnvironmentProvider>\n            </CacheProvider>\n          )\n        }}\n      </FrameContextConsumer>\n    </Iframe>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Structure of Select Component in React\nDESCRIPTION: Demonstrates the basic structure and subcomponents of the Select component in Chakra UI.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/select.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Select.Root>\n  <Select.HiddenSelect />\n  <Select.Label />\n\n  <Select.Control>\n    <Select.Trigger>\n      <Select.ValueText />\n    </Select.Trigger>\n    <Select.IndicatorGroup>\n      <Select.Indicator />\n      <Select.ClearTrigger />\n    </Select.IndicatorGroup>\n  </Select.Control>\n\n  <Select.Positioner>\n    <Select.Content>\n      <Select.Item />\n\n      <Select.ItemGroup>\n        <Select.ItemGroupLabel />\n        <Select.Item />\n      </Select.ItemGroup>\n    </Select.Content>\n  </Select.Positioner>\n</Select.Root>\n```\n\n----------------------------------------\n\nTITLE: Basic Float Component Usage\nDESCRIPTION: Basic implementation of the Float component within a Box container. The parent Box must have position:relative for Float to work properly.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/float.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Box position=\"relative\">\n  <Float>\n    <div />\n  </Float>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Configuring Grid Column Span via gridColumn Prop - Chakra UI - JSX\nDESCRIPTION: Illustrates setting grid column span for an item using the gridColumn prop on a Box inside a grid container. The example shows one Box spanning two columns. Chakra UI/React dependencies.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/flex-and-grid.mdx#2025-04-23_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n<Box display=\"grid\" gridTemplateColumns=\"repeat(3, minmax(0, 1fr))\">\\n  <Box>Item 1</Box>\\n  <Box gridColumn=\"span 2 / span 2\">Item 2</Box>\\n  <Box>Item 3</Box>\\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Applying Predefined Text Styles with Chakra UI in JSX\nDESCRIPTION: This snippet demonstrates applying composite text styles (font size, line height, letter spacing) defined in `theme.textStyles` using the `textStyle` prop on the Chakra UI `<Text>` component. Various predefined style keys like 'xs', 'sm', 'md', etc., are shown.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/typography.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Text textStyle=\"xs\">Hello World</Text>\n<Text textStyle=\"sm\">Hello World</Text>\n<Text textStyle=\"md\">Hello World</Text>\n<Text textStyle=\"lg\">Hello World</Text>\n<Text textStyle=\"xl\">Hello World</Text>\n<Text textStyle=\"2xl\">Hello World</Text>\n<Text textStyle=\"3xl\">Hello World</Text>\n<Text textStyle=\"4xl\">Hello World</Text>\n<Text textStyle=\"5xl\">Hello World</Text>\n```\n\n----------------------------------------\n\nTITLE: Controlling Flex Wrap via flexWrap Prop - Chakra UI - JSX\nDESCRIPTION: Usage of the flexWrap prop on the Box component (displayed as flex) in Chakra UI to allow flex items to wrap onto multiple lines. Set flexWrap to 'wrap' or 'nowrap' as needed. Chakra UI and React are required.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/flex-and-grid.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Box display=\"flex\" flexWrap=\"wrap\">\\n  <Box>Item 1</Box>\\n  <Box>Item 2</Box>\\n  <Box>Item 3</Box>\\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Handling Dark Mode with Virtual Color Placeholders in Chakra UI (JSX)\nDESCRIPTION: Demonstrates how to differentiate background color values for light and dark modes using the colorPalette property and _dark key in Chakra UI. Requires Chakra UI v2+ with dark mode support and React. Accepts Box component props, with bg providing both base and dark background colors using palette keys; outputs a styled component adaptive to theme mode.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/virtual-color.mdx#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Box\n  colorPalette=\"blue\"\n  bg={{ base: \"colorPalette.600\", _dark: \"colorPalette.400\" }}\n>\n  Hello World\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Using Color Opacity Modifier in Chakra UI CSS Variables (JSX)\nDESCRIPTION: Shows how to use the color opacity modifier when accessing color tokens in CSS variables. The example demonstrates setting a color with 40% opacity.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/css-variables.mdx#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Box css={{ \"--color\": \"{colors.red.500/40}\" }}>\n  <p style={{ color: \"var(--color)\" }}>Hello</p>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Setting Text Decoration Style with Chakra UI in JSX\nDESCRIPTION: This snippet demonstrates setting the style of the text decoration (e.g., 'dashed' underline) on a Chakra UI `<Text>` component using the `textDecorationStyle` prop. It requires a `textDecoration` to be set and maps to the `text-decoration-style` CSS property.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/typography.mdx#2025-04-23_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\n<Text textDecoration=\"underline\" textDecorationStyle=\"dashed\">\n  Hello World\n</Text>\n```\n\n----------------------------------------\n\nTITLE: Basic Dialog Structure in React\nDESCRIPTION: Demonstrates the complete structure of a Dialog component with all its nested parts including Trigger, Backdrop, Content, Header, Body, Footer and Close Trigger elements.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/dialog.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Dialog.Root>\n  <Dialog.Trigger />\n  <Dialog.Backdrop />\n  <Dialog.Positioner>\n    <Dialog.Content>\n      <Dialog.CloseTrigger />\n      <Dialog.Header>\n        <Dialog.Title />\n      </Dialog.Header>\n      <Dialog.Body />\n      <Dialog.Footer />\n    </Dialog.Content>\n  </Dialog.Positioner>\n</Dialog.Root>\n```\n\n----------------------------------------\n\nTITLE: Creating a Button Component with Chakra Factory in JSX\nDESCRIPTION: This example demonstrates how to use the chakra factory to create a button component with style props in JSX.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/chakra-factory.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { chakra } from \"@chakra-ui/react\"\n\nconst Button = ({ children }) => (\n  <chakra.button bg=\"blue.500\" color=\"white\" py=\"2\" px=\"4\" rounded=\"md\">\n    {children}\n  </chakra.button>\n)\n```\n\n----------------------------------------\n\nTITLE: Applying Responsive Styles with Prop-Based Modifier in Chakra UI (JSX)\nDESCRIPTION: Shows an alternative object-based responsive notation for Chakra UI, using the 'fontWeight' prop to specify values for multiple breakpoints within a JSX Text component. Dependencies include Chakra UI and React. Here, 'fontWeight' is 'medium' at the base breakpoint and switches to 'bold' on large screens ('lg'). Inputs/outputs are the JSX component's props; this approach offers concise breakpoint targeting within props.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/responsive-design.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Text fontWeight={{ base: \"medium\", lg: \"bold\" }}>Text</Text>\n```\n\n----------------------------------------\n\nTITLE: Creating Stacking Contexts with Chakra UI Isolation Prop in JSX\nDESCRIPTION: Example of using the isolation prop with value 'isolate' on a Box to create a new stacking context for its children. Includes a nested Box with background color and dimensions to illustrate stacking behavior. Requires Chakra UI; isolation maps to CSS stacking context rules.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/layout.mdx#2025-04-23_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<Box isolation=\\\"isolate\\\">\\n  <Box bg=\\\"red.500\\\" width=\\\"10\\\" height=\\\"10\\\" />\\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Importing Checkbox Card Component in Chakra UI\nDESCRIPTION: This snippet shows how to import the CheckboxCard component from Chakra UI.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/checkbox-card.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CheckboxCard } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Importing Chart Components for Area Charts in React\nDESCRIPTION: Basic imports required for creating Area Charts with Chakra UI and Recharts. This includes the Chart and useChart from Chakra UI's charts package and the Area, AreaChart, CartesianGrid, XAxis, and YAxis components from Recharts.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/area-chart.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Chart, useChart } from \"@chakra-ui/charts\"\nimport { Area, AreaChart, CartesianGrid, XAxis, YAxis } from \"recharts\"\n```\n\n----------------------------------------\n\nTITLE: Applying Box Shadow Effects - Chakra UI - JavaScript/JSX\nDESCRIPTION: These snippets demonstrate how to use the 'shadow' or 'boxShadow' prop in Chakra UI to add shadow effects to Box components. The first example applies a hardcoded CSS box-shadow, while the second leverages a design token ('lg'). Ensure Chakra UI components are imported and used within a ChakraProvider. The 'shadow' prop can accept both raw CSS values and predefined tokens as inputs.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/effects.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// hardcoded values\\n<Box shadow=\\\"12px 12px 2px 1px rgba(0, 0, 255, .2)\\\" />\\n\\n// token values\\n<Box shadow=\\\"lg\\\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Editable Component Structure - React/Chakra UI\nDESCRIPTION: Demonstrates the basic structure of the Editable component with Preview and Input subcomponents.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/editable.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Editable.Root>\n  <Editable.Preview />\n  <Editable.Input />\n</Editable.Root>\n```\n\n----------------------------------------\n\nTITLE: Spacing Between Elements with spaceX/spaceY Props in Chakra UI - JavaScript/JSX\nDESCRIPTION: Demonstrates how to use the spaceX and spaceY props on a parent <Box> (display=flex) to automatically apply spacing between child elements using the owl selector and margin-based spacing. Dependencies: React, Chakra UI. Inputs: 'spaceX'/'spaceY' props as theme tokens or CSS values, display must be set to 'flex'. Outputs a flex container with even spacing between children, supporting negative values (unlike gap). Must be rendered within the ChakraProvider.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/spacing.mdx#2025-04-23_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<Box display=\\\"flex\\\" spaceX=\\\"8\\\">\\n  <Box>Item 1</Box>\\n  <Box>Item 2</Box>\\n  <Box>Item 3</Box>\\n</Box>\\n\\n<Box display=\\\"flex\\\" spaceY=\\\"8\\\">\\n  <Box>Item 1</Box>\\n  <Box>Item 2</Box>\\n  <Box>Item 3</Box>\\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Integrating Custom Chakra UI System into Provider using TypeScript\nDESCRIPTION: This React component demonstrates how to apply a customized Chakra UI system configuration (created in previous steps) to the application. It imports the custom `system` and passes it as the `value` prop to the `ChakraProvider`. This ensures that the custom global styles (or lack thereof) are applied throughout the components wrapped by this provider. The component also includes a `ColorModeProvider`.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/customization/global-css.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\"\n\nimport { system } from \"@/components/theme\"\nimport {\n  ColorModeProvider,\n  type ColorModeProviderProps,\n} from \"@/components/ui/color-mode\"\nimport { ChakraProvider } from \"@chakra-ui/react\"\n\nexport function Provider(props: ColorModeProviderProps) {\n  return (\n    <ChakraProvider value={system}>\n      <ColorModeProvider {...props} />\n    </ChakraProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Avatar with Next.js Image in React\nDESCRIPTION: Shows how to compose the Avatar component with Next.js Image functionality, using getImageProps to set up the image source.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/avatar.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getImageProps } from \"next/image\"\n\nfunction Demo() {\n  const imageProps = getImageProps({\n    src: \"/image.png\",\n  })\n  return (\n    <Avatar.Root>\n      <Avatar.Fallback name=\"Segun Adebayo\" />\n      <Avatar.Image {...imageProps} />\n    </Avatar.Root>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Semantic Color Tokens Directly in Chakra UI Components (TSX)\nDESCRIPTION: Illustrates applying semantic tokens directly to component props instead of using `colorPalette`. The `color` prop is set to `brand.contrast` and the `bg` prop is set to `brand.solid`, styling the `Box` component according to the defined semantic theme values.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/customization/colors.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\n<Box color=\"brand.contrast\" bg=\"brand.solid\">\n  Hello world\n</Box>\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum Height in Chakra UI JSX\nDESCRIPTION: Demonstrates setting the minimum height of a Chakra UI Box component using the `minHeight` and shorthand `minH` props. Examples show both hardcoded pixel/rem values and theme token values (represented by numbers mapped to the theme's `sizes` scale). Requires the Chakra UI library and the Box component.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/sizing.mdx#2025-04-23_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n// hardcoded values\n<Box minHeight=\"40px\" />\n<Box minH=\"0.4rem\" /> // shorthand\n\n// token values\n<Box minHeight=\"8\" />\n<Box minH=\"10\" /> // shorthand\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Native Select Component in Chakra UI\nDESCRIPTION: This example demonstrates the basic structure and usage of the NativeSelect component, including the Root, Field, and Indicator parts.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/native-select.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<NativeSelect.Root>\n  <NativeSelect.Field>\n    <option value=\"1\">Option 1</option>\n    <option value=\"2\">Option 2</option>\n  </NativeSelect.Field>\n  <NativeSelect.Indicator />\n</NativeSelect.Root>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Chakra UI Textarea in React\nDESCRIPTION: Demonstrates the basic implementation of the Chakra UI `Textarea` component in JSX. It includes a `placeholder` prop to display hint text when the textarea is empty.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/textarea.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Textarea placeholder=\"...\" />\n```\n\n----------------------------------------\n\nTITLE: Justifying Content in Flex Layout Using justifyContent Prop - Chakra UI - JSX\nDESCRIPTION: Demonstrates using the justifyContent prop on the Box component (set to display flex) for aligning children along the main axis. Accepts standard CSS justify-content values. Requires Chakra UI.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/flex-and-grid.mdx#2025-04-23_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\n<Box display=\"flex\" justifyContent=\"center\">\\n  <Box>Item 1</Box>\\n  <Box>Item 2</Box>\\n  <Box>Item 3</Box>\\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Applying Margin to Elements with Chakra UI - JavaScript/JSX\nDESCRIPTION: Illustrates setting margin on all sides of a Chakra UI <Box> using the margin prop or its shorthand 'm'. Dependencies: React, Chakra UI. Parameter: 'margin', 'm', values as theme tokens or raw CSS. Outputs a Box with uniform margin. These props must be used in Chakra components within a ChakraProvider context.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/spacing.mdx#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Box margin=\\\"5\\\" />\\n<Box m=\\\"5\\\" /> // shorthand\n```\n\n----------------------------------------\n\nTITLE: Expanded PaginationItems Implementation in React\nDESCRIPTION: Demonstrates the expanded version of what the PaginationItems shortcut does internally.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/pagination.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Pagination.Context>\n  {({ pages }) =>\n    pages.map((page, index) =>\n      page.type === \"page\" ? (\n        <Pagination.Item key={index} {...page} />\n      ) : (\n        <Pagination.Ellipsis key={index} index={index} />\n      ),\n    )\n  }\n</Pagination.Context>\n```\n\n----------------------------------------\n\nTITLE: Defining Size Tokens in Chakra UI Theme (TypeScript)\nDESCRIPTION: Shows how to define size tokens (e.g., `sm`) using the `defineTokens` helper. These tokens represent width/height values as strings and are typically used in CSS properties like `width`, `height`, `minWidth`, `maxWidth`, etc. The defined tokens are added to the theme via `createSystem`.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/tokens.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineTokens } from \"@chakra-ui/react\"\n\nconst tokens = defineTokens({\n  sizes: {\n    sm: { value: \"12px\" },\n  },\n})\n\nexport default createSystem({\n  theme: { tokens },\n})\n```\n\n----------------------------------------\n\nTITLE: Forwarding Props with Chakra Factory in TypeScript\nDESCRIPTION: This snippet shows how to control prop forwarding using the shouldForwardProp option in the chakra function.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/chakra-factory.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nfunction shouldForwardProp(prop: string) {\n  return !prop.startsWith(\"$\")\n}\n\nconst Component = chakra(\"div\", {}, { shouldForwardProp })\n```\n\n----------------------------------------\n\nTITLE: Basic Checkbox Usage in React\nDESCRIPTION: Demonstrates the basic structure of the Checkbox component using its subcomponents.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/checkbox.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Checkbox.Root>\n  <Checkbox.HiddenInput />\n  <Checkbox.Control>\n    <Checkbox.Indicator />\n  </Checkbox.Control>\n  <Checkbox.Label />\n</Checkbox.Root>\n```\n\n----------------------------------------\n\nTITLE: Applying Blur Effect using the `blur` Prop in JSX\nDESCRIPTION: Illustrates applying a blur effect using the dedicated `blur` prop. This requires the `filter` prop to be set to `auto`. The `blur` prop accepts both hardcoded CSS values (e.g., '5px') and theme token values (e.g., 'sm' from the `blurs` token category).\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/filters.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// hardcoded value\n<Box filter=\"auto\" blur=\"5px\" />\n\n// token value\n<Box filter=\"auto\" blur=\"sm\" />\n```\n\n----------------------------------------\n\nTITLE: Enabling Overlapping Toasts - Chakra UI with React (JSX)\nDESCRIPTION: Configures the toaster to allow notifications to overlap each other by setting the `overlap` property to `true`. Appearing at the specified placement, this is useful where stacking toasts is undesirable or if screen real estate is limited.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/toast.mdx#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nconst toaster = createToaster({\n  placement: \"top-end\",\n  overlap: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Testing a Chakra UI Button Component\nDESCRIPTION: This test demonstrates how to use the custom render function to test a Chakra UI Button component. It renders the button and checks if the button text is present in the document.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/concepts/testing.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from \"@chakra-ui/react\"\nimport { render } from \"./testing/render\"\n\ntest(\"renders a button\", () => {\n  render(<Button>Click me</Button>)\n  expect(screen.getByText(\"Click me\")).toBeInTheDocument()\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Chakra UI Number Input Component in TypeScript/TSX\nDESCRIPTION: Imports the NumberInput component from '@chakra-ui/react' for use in a React TypeScript (TSX) project. This import is required to utilize Chakra UI's number input controls and related subcomponents.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/number-input.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NumberInput } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Semantic Tokens in Chakra UI (JavaScript)\nDESCRIPTION: This snippet shows how to define a simple semantic token named `danger` within the `semanticTokens.colors` section of a Chakra UI theme. It references an existing base color token (`colors.red`) using the `{}` syntax. This configuration is typically placed within a theme file (e.g., `theme.ts`) and utilizes `defineConfig` and `createSystem` from `@chakra-ui/react`.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/semantic-tokens.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```js title=\"theme.ts\"\nimport { createSystem, defaultConfig, defineConfig } from \"@chakra-ui/react\"\n\nconst config = defineConfig({\n  theme: {\n    tokens: {\n      colors: {\n        red: { value: \"#EE0F0F\" },\n      },\n    },\n    semanticTokens: {\n      colors: {\n        danger: { value: \"{colors.red}\" },\n      },\n    },\n  },\n})\n\nexport default createSystem(defaultConfig, config)\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Reference Points to Line Chart in React\nDESCRIPTION: Highlight specific data points or values using reference components from Recharts.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/line-chart.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n<ReferenceDot x=\"August\" y={110} r={6} />\n<ReferenceLine y={110} label={{ value: \"Target\", position: \"top\" }} />\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Center Component in Chakra UI (JSX)\nDESCRIPTION: This example demonstrates the basic usage of the Center component, creating a centered content area with a tomato background and white text.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/center.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Center bg=\"tomato\" h=\"100px\" color=\"white\">\n  This is the Center\n</Center>\n```\n\n----------------------------------------\n\nTITLE: Forcing Element-Specific Light Mode in Chakra UI\nDESCRIPTION: This example shows how to force light mode for a specific element by applying the 'light' className.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/dark-mode.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<Box bg=\"white\" className=\"light\">\n  <Box bg=\"bg.subtle\">\n    <Text>Hello</Text>\n  </Box>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Basic ColorPicker Component Structure in JSX\nDESCRIPTION: Demonstrates the basic structure of the ColorPicker component with all its subcomponents including input controls, positioner, and content area.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/color-picker.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ColorPicker.Root>\n  <ColorPicker.HiddenInput />\n  <ColorPicker.Label />\n  <ColorPicker.Control>\n    <ColorPicker.Input />\n    <ColorPicker.Trigger />\n  </ColorPicker.Control>\n  <ColorPicker.Positioner>\n    <ColorPicker.Content>\n      <ColorPicker.Area />\n      <ColorPicker.EyeDropper />\n      <ColorPicker.Sliders />\n      <ColorPicker.SwatchGroup>\n        <ColorPicker.SwatchTrigger>\n          <ColorPicker.Swatch />\n        </ColorPicker.SwatchTrigger>\n      </ColorPicker.SwatchGroup>\n    </ColorPicker.Content>\n  </ColorPicker.Positioner>\n</ColorPicker.Root>\n```\n\n----------------------------------------\n\nTITLE: Positioning Elements Using Offset Props with Chakra UI in JSX\nDESCRIPTION: Illustrates use of top, left, and logical insetStart offset props to set positioning of absolutely positioned Box components. Accepts values as strings, tokens (e.g., '4'), or hardcoded pixel values ('100px'). Used to fine-tune placement in conjunction with position prop. Chakra UI dependency applies; respects directionality if insetStart is used.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/layout.mdx#2025-04-23_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\n<Box position=\\\"absolute\\\" top=\\\"0\\\" left=\\\"0\\\" />\\n\\n// using spacing tokens\\n<Box position=\\\"absolute\\\" top=\\\"4\\\" />\\n\\n// using hardcoded values\\n<Box position=\\\"absolute\\\" top=\\\"100px\\\" />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Box position=\\\"absolute\\\" insetStart=\\\"0\\\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Fieldset Component Structure in Chakra UI\nDESCRIPTION: The basic structure of a Fieldset component in Chakra UI, showing the Root, Legend, and Content subcomponents.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/fieldset.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Fieldset.Root>\n  <Fieldset.Legend />\n  <Fieldset.Content />\n</Fieldset.Root>\n```\n\n----------------------------------------\n\nTITLE: Strict Token Usage Example and Error Enforcement in Chakra UI Theming with TypeScript\nDESCRIPTION: Example code illustrating the result of the strictTokens enforcement: attempting to use a non-theme hex color triggers a TypeScript error, while using a valid themed color works. For React components using Chakra UI; depends on strictTokens: true in theme config.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/overview.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n// \\u274C This will throw a TS error\n<Box color=\"#4f343e\">Hello World</Box>\n\n// \\u2705 This will work\n<Box color=\"red.400\">Hello World</Box>\n\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of the Spinner Component in React/JSX\nDESCRIPTION: Demonstrates the fundamental usage of the `Spinner` component in a React/JSX context. This renders a default spinner visual element, typically used to indicate that an action is processing or content is loading. Further customization can be applied via props as shown in subsequent examples.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/spinner.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Spinner />\n```\n\n----------------------------------------\n\nTITLE: Using FileUpload.Items Shortcut in React\nDESCRIPTION: Demonstrates a more concise way to render file upload items using the FileUpload.Items shortcut.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/file-upload.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<FileUpload.ItemGroup>\n  <FileUpload.Items />\n</FileUpload.ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Applying Border Radius to Specific Corners with Chakra UI JSX Props - JavaScript/JSX\nDESCRIPTION: These code snippets apply border radius to individual corners of the <Box> component using chakra props (borderTopLeftRadius, roundedTopLeft, etc). Chakra UI React required. Each prop accepts a radius value to target a specified corner, with logical equivalents for direction-aware layouts.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/border.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Box borderTopLeftRadius=\"md\" />\n<Box roundedTopLeft=\"md\" /> // shorthand\n```\n\n----------------------------------------\n\nTITLE: Creating an Overlay Component with Chakra UI in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a new overlay component using the createOverlay function from Chakra UI. It sets up a dialog with customizable props and structure.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/overlay-manager.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createOverlay } from \"@chakra-ui/react\"\n\nconst dialog = createOverlay<DialogProps>((props) => {\n  const { title, description, content, ...rest } = props\n  return (\n    <Dialog.Root {...rest}>\n      <Portal>\n        <Dialog.Backdrop />\n        <Dialog.Positioner>\n          <Dialog.Content>\n            {title && (\n              <Dialog.Header>\n                <Dialog.Title>{title}</Dialog.Title>\n              </Dialog.Header>\n            )}\n            <Dialog.Body spaceY=\"4\">\n              {description && (\n                <Dialog.Description>{description}</Dialog.Description>\n              )}\n              {content}\n            </Dialog.Body>\n          </Dialog.Content>\n        </Dialog.Positioner>\n      </Portal>\n    </Dialog.Root>\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Outside Labels to Pie Chart\nDESCRIPTION: Example of adding labels outside the Pie Chart segments using the label prop with a custom formatting function and disabling label lines.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/pie-chart.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Pie labelLine={false} label={({ name, value }) => `${name}: ${value}`}>\n  {/* ... */}\n</Pie>\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Tokens with DEFAULT Key in Chakra UI (TypeScript)\nDESCRIPTION: Shows how to define nested tokens (e.g., `colors.red` with variations like `100`) in the `theme.tokens` configuration using `defineConfig`. It introduces the use of the `DEFAULT` key to specify the token's value when referenced without a specific variant (e.g., `bg=\"red\"`).\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/tokens.mdx#2025-04-23_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { createSystem, defaultConfig, defineConfig } from \"@chakra-ui/react\"\n\nconst config = defineConfig({\n  theme: {\n    tokens: {\n      colors: {\n        red: {\n          DEFAULT: { value: \"#EE0F0F\" },\n          100: { value: \"#EE0F0F\" },\n        },\n      },\n    },\n  },\n})\n\nexport default createSystem(defaultConfig, config)\n```\n\n----------------------------------------\n\nTITLE: Button Reference Implementation in TypeScript\nDESCRIPTION: Example showing how to access the underlying button element reference using TypeScript and useRef hook\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/button.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst Demo = () => {\n  const ref = useRef<HTMLButtonElement | null>(null)\n  return <Button ref={ref}>Click me</Button>\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Button with Focus Ring in Chakra UI\nDESCRIPTION: Demonstrates how to apply a focus ring to a Chakra UI button using the focusRing prop.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/focus-ring.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<chakra.button px=\"4\" py=\"2\" focusRing=\"outside\">\n  Click me\n</chakra.button>\n```\n\n----------------------------------------\n\nTITLE: Using Chakra UI Component in Next.js Server Component\nDESCRIPTION: This snippet demonstrates how to use a Chakra UI component (Heading) within a Next.js server component. It reads content from a file and renders it using the Heading component.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/concepts/server-components.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Heading } from \"@chakra-ui/react\"\nimport fs from \"node:fs\"\n\nexport default async function Page() {\n  const content = fs.readFileSync(\"path/to/file.md\", \"utf-8\")\n  return <Heading as=\"h1\">{content}</Heading>\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Per-Edge Toast Offsets - Chakra UI with React (JSX)\nDESCRIPTION: Defines individual pixel offsets for each edge using the `offsets` prop as an object. Allows precise positioning for top, left, right, and bottom edges. This configuration provides more granular control over toast positioning for complex layouts.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/toast.mdx#2025-04-23_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nconst toaster = createToaster({\n  offsets: { left: \"20px\", top: \"20px\", right: \"20px\", bottom: \"20px\" },\n})\n```\n\n----------------------------------------\n\nTITLE: Using ColorPicker.Sliders for Hue and Alpha Control\nDESCRIPTION: Demonstrates the implementation of ColorPicker.Sliders, which is a shortcut component that creates channel sliders for hue and alpha controls within a Stack.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/color-picker.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Stack>\n  <ColorPickerChannelSlider channel=\"hue\" />\n  <ColorPickerChannelSlider channel=\"alpha\" />\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Adding the Button Recipe to the Chakra Theme (TypeScript)\nDESCRIPTION: Configures a custom Chakra UI system theme, using createSystem and defineConfig, and adds the buttonRecipe to the theme.recipes property for global reuse. This pattern enables referencing the recipe via key in components. Requires @chakra-ui/react, a recipe definition, and export of the modified system.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/recipes.mdx#2025-04-23_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createSystem, defaultConfig, defineConfig } from \"@chakra-ui/react\"\nimport { buttonRecipe } from \"./button.recipe\"\n\nconst config = defineConfig({\n  theme: {\n    recipes: {\n      button: buttonRecipe,\n    },\n  },\n})\n\nexport default createSystem(defaultConfig, config)\n```\n\n----------------------------------------\n\nTITLE: Importing Chakra Factory in JavaScript\nDESCRIPTION: This snippet shows how to import the chakra factory from the Chakra UI React package.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/chakra-factory.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { chakra } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Defining Gradient Tokens in Chakra UI Theme (TypeScript)\nDESCRIPTION: Demonstrates defining gradient tokens using `defineTokens`. It shows two methods: a simple CSS string value (`simple`) and a composite object value (`primary`) specifying gradient type, placement, and stops. These tokens are then integrated into the theme via `createSystem`.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/tokens.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineTokens } from \"@chakra-ui/react\"\n\nconst tokens = defineTokens({\n  gradients: {\n    // string value\n    simple: { value: \"linear-gradient(to right, red, blue)\" },\n\n    // composite value\n    primary: {\n      value: { type: \"linear\", placement: \"to right\", stops: [\"red\", \"blue\"] },\n    },\n  },\n})\n\nexport default createSystem({\n  theme: { tokens },\n})\n```\n\n----------------------------------------\n\nTITLE: Setting List Style Type with Chakra UI - JSX\nDESCRIPTION: Demonstrates how to use the listStyleType prop on a Chakra UI Box component rendered as an unordered list. Setting listStyleType to \\\"circle\\\" modifies the marker shape for child list items. Requires Chakra UI components and valid JSX setup. Inputs are the Box's props; outputs are styled list markers of specified type.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/list.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx\n<Box as=\\\"ul\\\" listStyleType=\\\"circle\\\">\\n  <li>Item 1</li>\\n  <li>Item 2</li>\\n  <li>Item 3</li>\\n</Box>\\n```\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Chakra UI Link Component in JSX\nDESCRIPTION: Demonstrates the basic usage of the Link component with an href attribute.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/link.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Link href=\"...\">Click here</Link>\n```\n\n----------------------------------------\n\nTITLE: Using Chakra UI Components in Storybook Stories\nDESCRIPTION: Example of how to use Chakra UI components in Storybook stories, demonstrating the usage of a Button component.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/get-started/frameworks/storybook.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from \"@chakra-ui/react\"\n\nexport const SampleStory = {\n  render() {\n    return <Button>Click me</Button>\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Shape Variant to Alert Slot Recipe with defineSlotRecipe (TypeScript)\nDESCRIPTION: Extends the Alert slot recipe with a new `shape` variant using `defineSlotRecipe`. Fully demonstrates defining anatomy-driven variants and including them in the custom theme. Dependencies include Chakra UI's anatomy helpers, theming APIs, and slot usage support.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/customization/recipes.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { alertAnatomy } from \"@chakra-ui/react/anatomy\"\n\nconst alertSlotRecipe = defineSlotRecipe({\n  slots: alertAnatomy.keys(),\n  variants: {\n    shape: {\n      rounded: {\n        root: { borderRadius: \"full\" },\n      },\n    },\n  },\n})\n\nconst customConfig = defineConfig({\n  theme: {\n    slotRecipes: {\n      alert: alertSlotRecipe,\n    },\n  },\n})\n\nexport const system = createSystem(defaultConfig, customConfig)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Raw and Fallback Token Values with Chakra UI Styling System in TypeScript\nDESCRIPTION: Demonstrates the use of system.token and system.token.var to retrieve raw or CSS variable token values, including fallback handling. Always returns CSS variables for semantic tokens. Inputs are token paths and optional fallbacks; outputs are string values or CSS variables. Requires a created system instance.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/overview.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nconst system = createSystem(defaultConfig, config)\n\n// raw token\nsystem.token(\"colors.red.200\")\n// => \"#EE0F0F\"\n\n// token with fallback\nsystem.token(\"colors.pink.240\", \"#000\")\n// => \"#000\"\n\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// css variable\nsystem.token.var(\"colors.red.200\")\n// => \"var(--chakra-colors-red-200)\"\n\n// token with fallback\nsystem.token.var(\"colors.pink.240\", \"colors.red.200\")\n// => \"var(--chakra-colors-red-200)\"\n\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// semantic token\nsystem.token(\"colors.danger\")\n// => \"var(--chakra-colors-danger)\"\n\nsystem.token.var(\"colors.danger\")\n// => \"var(--chakra-colors-danger)\"\n\n```\n\n----------------------------------------\n\nTITLE: Adding Gaps Between Flex Items with gap Prop - Chakra UI - JSX\nDESCRIPTION: Shows using the gap prop to set spacing between items in a Chakra UI Flex container. Requires Chakra UI and React; value should match spacing tokens or CSS units.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/flex-and-grid.mdx#2025-04-23_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex gap=\"4\">\\n  <Box>Item 1</Box>\\n  <Box>Item 2</Box>\\n  <Box>Item 3</Box>\\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Blockquote Component in React\nDESCRIPTION: Demonstrates the basic structure of the Blockquote component, including the Root, Content, and Caption elements. The Content element includes a 'cite' attribute for referencing the quote source.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/blockquote.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Blockquote.Root>\n  <Blockquote.Content cite=\"https://\" />\n  <Blockquote.Caption>\n    <cite>Uzumaki Naruto</cite>\n  </Blockquote.Caption>\n</Blockquote.Root>\n```\n\n----------------------------------------\n\nTITLE: Using FileUpload.List Shortcut in React\nDESCRIPTION: Shows how to use the FileUpload.List shortcut, which combines FileUpload.ItemGroup and FileUpload.Items.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/file-upload.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<FileUpload.List />\n```\n\n----------------------------------------\n\nTITLE: Applying Border Radius to Specific Sides with Chakra UI JSX Props - JavaScript/JSX\nDESCRIPTION: These snippets demonstrate setting border radius on individual sides (top, left) of a Chakra UI <Box> component, using either standard or shorthand props. Chakra UI must be imported. Props like borderTopRadius or roundedTop (shorthand) accept radii tokens and target only the specified edge.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/border.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Box borderTopRadius=\"md\" />\n<Box roundedTop=\"md\" /> // shorthand\n\n<Box borderLeftRadius=\"md\" />\n<Box roundedLeft=\"md\" /> // shorthand\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Animation Styles in Chakra UI (JavaScript)\nDESCRIPTION: This snippet demonstrates how to define a reusable animation style named 'bounceFadeIn' using the `defineAnimationStyles` function imported from `@chakra-ui/react`. It specifies CSS animation properties like `animationName`, `animationDuration`, `animationTimingFunction`, and `animationIterationCount` within the `value` object.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/animation-styles.mdx#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { defineAnimationStyles } from \"@chakra-ui/react\"\n\nconst animationStyles = defineAnimationStyles({\n  bounceFadeIn: {\n    value: {\n      animationName: \"bounce, fade-in\",\n      animationDuration: \"1s\",\n      animationTimingFunction: \"ease-in-out\",\n      animationIterationCount: \"infinite\",\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Simplified Popover Arrow in Chakra UI\nDESCRIPTION: This snippet shows a simplified way to include the Popover arrow without explicitly adding the ArrowTip component.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/popover.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Popover.Arrow />\n```\n\n----------------------------------------\n\nTITLE: Using Animation Tokens in Chakra UI Components (TSX)\nDESCRIPTION: This snippet shows how to apply a registered animation token (such as the previously defined `shakeX`) directly to a Chakra UI component's `animation` style property using JSX syntax. The `Box` component (from Chakra UI) receives the animation token by name, which references theme-defined animation parameters. It expects the corresponding theme and token definitions to be in place, with Chakra UI properly configured. The output is a React component styled with the designated animation.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/customization/animations.mdx#2025-04-23_snippet_2\n\nLANGUAGE: TSX\nCODE:\n```\n<Box animation=\"shakeX\" />\n```\n\n----------------------------------------\n\nTITLE: Composing Multiple Animations in Chakra UI Components\nDESCRIPTION: Example demonstrating how to compose multiple animations together using the animationName prop in Chakra UI. This approach combines fade and scale animations for both entering and exiting states.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/concepts/animation.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Box\n  data-state=\"open\"\n  _open={{\n    animationName: \"fade-in, scale-in\",\n    animationDuration: \"300ms\",\n  }}\n  _closed={{\n    animationName: \"fade-out, scale-out\",\n    animationDuration: \"120ms\",\n  }}\n>\n  This is a composed animation\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Assigning Background Images and Gradients in Chakra UI (JSX)\nDESCRIPTION: Demonstrates usage of the bgImage prop with <Box> in Chakra UI to set various types of backgrounds, including URLs and CSS gradients. Shows regular images, radial gradients, linear gradients, and usage of color tokens. Requires Chakra UI and supports asset URLs or gradient syntax, including dynamic color references.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/background.mdx#2025-04-23_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<Box bgImage=\"url(...)\" />\n<Box bgImage=\"radial-gradient(circle, #0000 45%, #000f 48%)\" />\n<Box bgImage=\"linear-gradient(black, white)\" />\n\n// with token reference\n<Box bgImage=\"linear-gradient({colors.red.200}, {colors.blue.200})\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Radio Card Structure in React\nDESCRIPTION: Demonstrates the basic structure of a Radio Card component using nested subcomponents.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/radio-card.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<RadioCard.Root>\n  <RadioCard.Label />\n  <RadioCard.Item>\n    <RadioCard.ItemHiddenInput />\n    <RadioCard.ItemControl>\n      <RadioCard.ItemContent>\n        <RadioCard.ItemText />\n        <RadioCard.ItemDescription />\n      </RadioCard.ItemContent>\n      <RadioCard.ItemIndicator />\n    </RadioCard.ItemControl>\n  </RadioCard.Item>\n</RadioCard.Root>\n```\n\n----------------------------------------\n\nTITLE: Implementing Styled Carousel Component with Chakra IconButton\nDESCRIPTION: Example of using the styled Carousel component in a React application. Incorporates Chakra UI's IconButton component for previous and next triggers using React Icons for a complete styled carousel implementation.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/guides/styling-external-libraries.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Carousel } from \"@/components/ui/carousel\"\nimport { IconButton } from \"@chakra-ui/react\"\nimport { LuArrowLeft, LuArrowRight } from \"react-icons/lu\"\n\nconst images = Array.from(\n  { length: 5 },\n  (_, i) => `https://picsum.photos/seed/${i + 1}/500/300`,\n)\n\nexport const Demo = () => {\n  return (\n    <Carousel.Root defaultPage={0} slideCount={images.length}>\n      <Carousel.Control>\n        <Carousel.PrevTrigger asChild>\n          <IconButton>\n            <LuArrowLeft />\n          </IconButton>\n        </Carousel.PrevTrigger>\n        <Carousel.NextTrigger asChild>\n          <IconButton>\n            <LuArrowRight />\n          </IconButton>\n        </Carousel.NextTrigger>\n      </Carousel.Control>\n      <Carousel.IndicatorGroup>\n        {images.map((_, index) => (\n          <Carousel.Indicator key={index} index={index} />\n        ))}\n      </Carousel.IndicatorGroup>\n      <Carousel.ItemGroup>\n        {images.map((image, index) => (\n          <Carousel.Item key={index} index={index}>\n            <img src={image} alt={`Slide ${index}`} />\n          </Carousel.Item>\n        ))}\n      </Carousel.ItemGroup>\n    </Carousel.Root>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Styles for a Single Breakpoint with Chakra UI 'Only' Notation in JSX\nDESCRIPTION: This example uses the 'lgOnly' prop in Chakra UI to set 'fontWeight' to 'bold' exclusively at the 'lg' (large) breakpoint. It relies on Chakra UI version that supports 'Only' notation and React. The Text component changes style only at the specified breakpoint, making it easy to fine-tune appearance for one screen size. Parameter is the responsive prop with breakpoint; output: breakpoint-restricted styling.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/responsive-design.mdx#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Text fontWeight={{ lgOnly: \"bold\" }}>Text</Text>\n```\n\n----------------------------------------\n\nTITLE: Setting Fractional Height in Chakra UI JSX\nDESCRIPTION: Illustrates how to set fractional heights (e.g., 1/2, 1/3) on Chakra UI Box components using the `height` and shorthand `h` props. This allows for sizing relative to the container's height. Requires the Chakra UI library and the Box component.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/sizing.mdx#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Box height=\"1/2\" />\n<Box h=\"1/2\" /> // shorthand\n```\n\n----------------------------------------\n\nTITLE: Importing Chakra UI Chart Components and Recharts\nDESCRIPTION: Import statements for using Chakra UI Chart components along with Recharts' Pie and PieChart components.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/pie-chart.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Chart, useChart } from \"@chakra-ui/charts\"\nimport { Pie, PieChart } from \"recharts\"\n```\n\n----------------------------------------\n\nTITLE: Creating Chakra UI System with Custom Font Configuration\nDESCRIPTION: Use the createSystem method to define the custom font in Chakra UI's theme configuration. This sets the Bricolage Grotesque Variable font for both heading and body text elements.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/guides/theming-add-custom-font-to-vite.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\"\n\nimport { createSystem, defaultConfig } from \"@chakra-ui/react\"\n\nconst system = createSystem(defaultConfig, {\n  theme: {\n    tokens: {\n      fonts: {\n        heading: { value: \"Bricolage Grotesque Variable\" },\n        body: { value: \"Bricolage Grotesque Variable\" },\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Flex Direction via flexDirection Prop - Chakra UI - JSX\nDESCRIPTION: Shows how to set the direction of the main axis in a flex container using Chakra UI's Box component with the flexDirection prop. The value should be a standard CSS flex-direction keyword. Chakra UI and React are required dependencies.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/flex-and-grid.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Box display=\"flex\" flexDirection=\"column\">\\n  <Box>Item 1</Box>\\n  <Box>Item 2</Box>\\n  <Box>Item 3</Box>\\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Composing a Custom Radio Group - Chakra UI (TypeScript/React)\nDESCRIPTION: Defines a radio group using Chakra UI's primitive components: RadioGroup.Root, RadioGroup.Item, and associated subcomponents. This composition enables fine-grained control over input, indicator, and label rendering. Developers should import these components from Chakra UI and wrap items appropriately. Receives no props here but can be extended for value and event handling. Expects to be used within a React application using TypeScript.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/radio.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<RadioGroup.Root>\n  <RadioGroup.Item>\n    <RadioGroup.ItemHiddenInput />\n    <RadioGroup.ItemIndicator />\n    <RadioGroup.ItemText />\n  </RadioGroup.Item>\n</RadioGroup.Root>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Heading Component in JSX\nDESCRIPTION: Demonstrates the basic usage of the Heading component in a React application.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/heading.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Heading>I'm a Heading</Heading>\n```\n\n----------------------------------------\n\nTITLE: Basic Avatar Usage with Composition in React\nDESCRIPTION: Demonstrates the basic usage of the Avatar component using a compositional approach with AvatarGroup, Root, Fallback, and Image sub-components.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/avatar.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<AvatarGroup>\n  <Avatar.Root>\n    <Avatar.Fallback />\n    <Avatar.Image />\n  </Avatar.Root>\n</AvatarGroup>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Test Environment for Chakra UI v3 Projects\nDESCRIPTION: This setup file configures the testing environment for Chakra UI v3 projects. It includes mocks for ResizeObserver, IntersectionObserver, and various browser APIs to ensure proper testing of components that rely on these features.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/concepts/testing.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"@testing-library/jest-dom/vitest\"\nimport { JSDOM } from \"jsdom\"\nimport ResizeObserver from \"resize-observer-polyfill\"\nimport { vi } from \"vitest\"\nimport \"vitest-axe/extend-expect\"\n\nconst { window } = new JSDOM()\n\n// ResizeObserver mock\nvi.stubGlobal(\"ResizeObserver\", ResizeObserver)\nwindow[\"ResizeObserver\"] = ResizeObserver\n\n// IntersectionObserver mock\nconst IntersectionObserverMock = vi.fn(() => ({\n  disconnect: vi.fn(),\n  observe: vi.fn(),\n  takeRecords: vi.fn(),\n  unobserve: vi.fn(),\n}))\nvi.stubGlobal(\"IntersectionObserver\", IntersectionObserverMock)\nwindow[\"IntersectionObserver\"] = IntersectionObserverMock\n\n// Scroll Methods mock\nwindow.Element.prototype.scrollTo = () => {}\nwindow.Element.prototype.scrollIntoView = () => {}\n\n// requestAnimationFrame mock\nwindow.requestAnimationFrame = (cb) => setTimeout(cb, 1000 / 60)\n\n// URL object mock\nwindow.URL.createObjectURL = () => \"https://i.pravatar.cc/300\"\nwindow.URL.revokeObjectURL = () => {}\n\n// navigator mock\nObject.defineProperty(window, \"navigator\", {\n  value: {\n    clipboard: {\n      writeText: vi.fn(),\n    },\n  },\n})\n\n// Override globalThis\nObject.assign(global, { window, document: window.document })\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Height in Chakra UI JSX\nDESCRIPTION: Demonstrates setting the maximum height of a Chakra UI Box component using the `maxHeight` and shorthand `maxH` props. Examples show both hardcoded pixel/rem values and theme token values (represented by numbers mapped to the theme's `sizes` scale). Requires the Chakra UI library and the Box component.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/sizing.mdx#2025-04-23_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n// hardcoded values\n<Box maxHeight=\"40px\" />\n<Box maxH=\"0.4rem\" /> // shorthand\n\n// token values\n<Box maxHeight=\"8\" />\n<Box maxH=\"10\" /> // shorthand\n```\n\n----------------------------------------\n\nTITLE: Generating Types for Custom Theme with Chakra CLI\nDESCRIPTION: Uses the Chakra UI CLI typegen command to generate TypeScript types for the custom theme, ensuring type safety when using custom colors.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/guides/theming-custom-colors.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx chakra typegen ./theme.ts\n```\n\n----------------------------------------\n\nTITLE: Importing Theme Component from Chakra UI (JSX)\nDESCRIPTION: This snippet shows how to import the Theme component from the @chakra-ui/react package. The Theme component is used to control color modes (light or dark) for sections of the React component tree. No additional dependencies are required beyond the chakra-ui/react package. Usage: after importing Theme, it can be used to wrap components to force a color mode appearance.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/theme.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Theme } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Implementing EmptyState Component\nDESCRIPTION: Shows how to use the new EmptyState component to display an empty state message with an icon, title, description and action button.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/packages/react/CHANGELOG.md#2025-04-23_snippet_23\n\nLANGUAGE: jsx\nCODE:\n```\n<EmptyState.Root>\n  <EmptyState.Content>\n    <EmptyState.Indicator>\n      <HiTemplate />\n    </EmptyState.Indicator>\n\n    <VStack textAlign=\"center\">\n      <Text fontWeight=\"medium\">No template found</Text>\n      <Text fontSize=\"sm\" color=\"fg.muted\">\n        Try creating a new template with the button below\n      </Text>\n    </VStack>\n\n    <Button variant=\"outline\">\n      <HiPlus /> Create Template\n    </Button>\n  </EmptyState.Content>\n</EmptyState.Root>\n```\n\n----------------------------------------\n\nTITLE: Configuring Overscroll Behavior with Chakra UI in JSX\nDESCRIPTION: Shows how to set overscrollBehavior prop, which controls the browser's response at the scroll boundary (e.g., 'contain'). Must be used on scrollable elements, commonly paired with maxHeight. Chakra UI dependency applies; values map to CSS overscroll-behavior standard.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/layout.mdx#2025-04-23_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n<Box maxHeight=\\\"120px\\\" overscrollBehavior=\\\"contain\\\" />\n```\n\n----------------------------------------\n\nTITLE: Using Shape Variant in Alert Slot Recipe (TSX)\nDESCRIPTION: Illustrates the use of a new `shape` variant on the Alert component. Leverages the previously defined slot variant to adjust the Alert root's border radius via the `shape` prop. Relies on theme and anatomy slot setup done earlier.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/customization/recipes.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<Alert shape=\"rounded\" title=\"...\" />\n```\n\n----------------------------------------\n\nTITLE: Custom Prop Forwarding with Chakra Factory in TypeScript\nDESCRIPTION: This example demonstrates how to create custom prop forwarding logic using @emotion/is-prop-valid and Chakra UI's isValidProperty.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/chakra-factory.mdx#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { chakra, defaultSystem } from \"@chakra-ui/react\"\nimport shouldForwardProp from \"@emotion/is-prop-valid\"\n\nconst { isValidProperty } = defaultSystem\n\nfunction shouldForwardProp(prop: string, variantKeys: string[]) {\n  const chakraSfp = !variantKeys?.includes(prop) && !isValidProperty(prop)\n  return shouldForwardProp(prop) || chakraSfp\n}\n\nconst Component = chakra(\"div\", {}, { shouldForwardProp })\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of the Tag Component in Chakra UI (TSX)\nDESCRIPTION: Demonstrates the fundamental structure for rendering a simple tag using the `Tag.Root` and `Tag.Label` sub-components provided by Chakra UI. This creates a tag with the text 'Tag here'.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/tag.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Tag.Root>\n  <Tag.Label>Tag here</Tag.Label>\n</Tag.Root>\n```\n\n----------------------------------------\n\nTITLE: Configuring Tabs with Custom Router Links in Chakra UI\nDESCRIPTION: Shows how to use custom router links with Tabs by setting the navigate prop on the Tabs.Root component. This example uses react-router-dom for navigation.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/tabs.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\"\n\nimport { Tabs } from \"@chakra-ui/react\"\nimport { useNavigate } from \"react-router-dom\"\n\nconst Demo = () => {\n  const navigate = useNavigate()\n  return (\n    <Tabs.Root navigate={({ value, node }) => navigate(`/${value}`)}>\n      {/* ... */}\n    </Tabs.Root>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Breadcrumb with Routing Library in Chakra UI\nDESCRIPTION: This example shows how to use the Breadcrumb component with a routing library like Next.js, utilizing the 'asChild' prop to change the underlying breadcrumb link.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/breadcrumb.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Breadcrumb } from \"@chakra-ui/react\"\nimport { Link } from \"next/link\"\n\nexport const Example = () => {\n  return (\n    <Breadcrumb.Root>\n      <Breadcrumb.List>\n        <Breadcrumb.Item>\n          <Breadcrumb.Link asChild>\n            <Link href=\"/docs\">Docs</Link>\n          </Breadcrumb.Link>\n        </Breadcrumb.Item>\n        <Breadcrumb.Separator />\n      </Breadcrumb.List>\n    </Breadcrumb.Root>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Relative Viewport Height in Chakra UI JSX\nDESCRIPTION: Shows how to set the height of a Chakra UI Box component relative to the viewport using modern relative height units. The `dvh`, `svh`, and `lvh` values map directly to `100dvh`, `100svh`, and `100lvh` CSS values respectively. Both `height` and shorthand `h` props can be used. Requires the Chakra UI library and the Box component.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/sizing.mdx#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Box height=\"dvh\" />\n<Box h=\"dvh\" /> // shorthand\n```\n\n----------------------------------------\n\nTITLE: Creating CSS Keyframes for Fade-Out Animation\nDESCRIPTION: CSS keyframes definition for a fade-out animation that transitions opacity from 1 to 0, to be used with Chakra UI components.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/concepts/animation.mdx#2025-04-23_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n@keyframes fadeOut {\n  from {\n    opacity: 1;\n  }\n  to {\n    opacity: 0;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Token Reference Syntax in Chakra UI Props (TSX)\nDESCRIPTION: Illustrates the token reference syntax `{path.to.token}` to embed token values within string-based CSS properties like `border`, `p` (padding), and `boxShadow` on a Chakra UI `Box` component. Requires using the full token path (e.g., `{colors.red.300}`).\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/tokens.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Box\n  border=\"1px solid {colors.red.300}\"\n  p=\"{spacing.4} {spacing.6} {spacing.8} {spacing.10}\"\n  boxShadow=\"{spacing.4} {spacing.2} {spacing.2} {colors.red.300}\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Customizing List Item Markers with Chakra UI _marker Prop - JSX\nDESCRIPTION: Displays usage of the _marker pseudo-prop on Chakra UI Box components rendered as li elements within a native ul. The _marker prop enables custom marker styling, such as color, for individual list items. Requires Chakra UI Box, React, and styled-system support. Input is the marker's style object; output is visually differentiated markers per list item.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/list.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx /_marker/\n<ul>\\n  <Box as=\\\"li\\\" _marker={{ color: \\\"red\\\" }}>\\n    Item 1\\n  </Box>\\n  <Box as=\\\"li\\\" _marker={{ color: \\\"blue\\\" }}>\\n    Item 2\\n  </Box>\\n  <Box as=\\\"li\\\" _marker={{ color: \\\"green\\\" }}>\\n    Item 3\\n  </Box>\\n</ul>\\n```\n```\n\n----------------------------------------\n\nTITLE: Basic Donut Chart Structure in Chakra UI\nDESCRIPTION: Basic structure for creating a donut chart using Chakra UI and Recharts components.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/donut-chart.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Chart.Root>\n  <PieChart>\n    <Pie>\n      <Cell />\n    </Pie>\n  </PieChart>\n</Chart.Root>\n```\n\n----------------------------------------\n\nTITLE: Creating Toggle Tip Component in Chakra UI\nDESCRIPTION: This snippet shows how to create a closed component composition for the ToggleTip component in Chakra UI. It provides a reusable structure for implementing toggle tips.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/toggle-tip.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<SnippetCode name=\"toggle-tip\" />\n```\n\n----------------------------------------\n\nTITLE: Applying Pseudo-Class Styles in Chakra UI\nDESCRIPTION: Shows how to style hover, active, focus, and disabled states of a button using conditional props.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/conditional-styles.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<chakra.button\n  _hover={{ bg: \"red.700\" }}\n  _active={{ bg: \"red.900\" }}\n  _focus={{ bg: \"red.800\" }}\n  _disabled={{ opacity: \"0.5\" }}\n>\n  Hover me > Hover me\n</chakra.button>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of ColorSwatch Component in Chakra UI (TSX)\nDESCRIPTION: This example demonstrates the most basic usage of the ColorSwatch component. It renders a default color swatch without any customization.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/color-swatch.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<ColorSwatch />\n```\n\n----------------------------------------\n\nTITLE: Applying Horizontal and Vertical Padding Axes with Chakra UI - JavaScript/JSX\nDESCRIPTION: Shows the use of paddingX/paddingY (and px/py) to apply padding across horizontal and vertical axes on a Chakra UI <Box>. Dependencies: React, Chakra UI. Parameters: 'paddingX', 'px', 'paddingY', 'py', accept theme tokens. Inputs automatically set both respective sides (left/right for X, top/bottom for Y). Outputs boxes with applied axis-specific padding. Must be inside a ChakraProvider.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/spacing.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Box paddingX=\\\"8\\\" />\\n<Box px=\\\"8\\\" /> // shorthand\\n\\n<Box paddingY=\\\"8\\\" />\\n<Box py=\\\"8\\\" /> // shorthand\n```\n\n----------------------------------------\n\nTITLE: Placing Items in Grid Container with placeItems Prop - Chakra UI - JSX\nDESCRIPTION: Shows usage of the placeItems prop on a Box component set as grid, aligning all items on both axes. The value should be a CSS place-items value. React and Chakra UI are required.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/flex-and-grid.mdx#2025-04-23_snippet_26\n\nLANGUAGE: jsx\nCODE:\n```\n<Box display=\"grid\" placeItems=\"center\">\\n  <Box>Item 1</Box>\\n  <Box>Item 2</Box>\\n  <Box>Item 3</Box>\\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Installing Chakra UI dependencies in Remix\nDESCRIPTION: Installs the required Chakra UI and Emotion packages for use in a Remix project.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/get-started/frameworks/remix.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @chakra-ui/react @emotion/react\n```\n\n----------------------------------------\n\nTITLE: Applying Divide Color Between Elements in Chakra UI - JavaScript/JSX\nDESCRIPTION: This snippet uses the divideColor prop on a parent <Box> to set color for the borders between its direct child elements. The prop takes a Chakra color token (e.g., 'red.400'). Children are automatically styled.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/border.mdx#2025-04-23_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n<Box divideColor=\"red.400\">\n  <Box>1</Box>\n  <Box>2</Box>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Setting Transition Duration with Chakra UI in JSX\nDESCRIPTION: Displays how to set the duration of a transition using the transitionDuration prop in Chakra UI. The Box component transitions its background color on hover with the duration set to a theme token (e.g., 'fast'). This approach requires the Chakra UI theme to define duration tokens.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/transitions.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Box\\n  bg=\\\"red.400\\\"\\n  _hover={{ bg: \\\"red.500\\\" }}\\n  transition=\\\"backgrounds\\\"\\n  transitionDuration=\\\"fast\\\"\\n>\\n  Hover me\\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Adding Labels to Bar List in Chakra UI Charts (TSX)\nDESCRIPTION: This code shows how to add name and value labels to the bars using the BarList.Label component.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/bar-list.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<BarList.Label title=\"Search Engine\" flex=\"1\">\n  <BarList.Bar />\n</BarList.Label>\n```\n\n----------------------------------------\n\nTITLE: Setting Width using Hardcoded and Token Values in Chakra UI JSX\nDESCRIPTION: Demonstrates setting the width of a Chakra UI Box component using the `width` and shorthand `w` props. Examples show both hardcoded pixel/rem values and theme token values (represented by numbers or strings mapped to the theme's `sizes` scale). Requires the Chakra UI library and the Box component.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/sizing.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// hardcoded values\n<Box width=\"64px\" />\n<Box w=\"4rem\" />\n\n// token values\n<Box width=\"5\" />\n<Box w=\"5\" />\n```\n\n----------------------------------------\n\nTITLE: Using Chakra UI Components with Shadow DOM\nDESCRIPTION: This React component demonstrates the usage of Chakra UI components (Button and HStack) within an application that has been set up to work with Shadow DOM.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/get-started/environments/shadow-dom.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, HStack } from \"@chakra-ui/react\"\n\nexport default function App() {\n  return (\n    <HStack>\n      <Button>Click me</Button>\n      <Button>Click me</Button>\n    </HStack>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Adjusting Focus Ring Width for Button in Chakra UI\nDESCRIPTION: Demonstrates how to change the focus ring width for a specific button using the focusRingWidth prop.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/focus-ring.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Button focusRingWidth=\"2px\">Click me</Button>\n```\n\n----------------------------------------\n\nTITLE: Using Compound Variants in Button Component in App (TypeScript)\nDESCRIPTION: Shows how to use the Button component with a variant combination that triggers a compoundVariant (size='small', visual='outline'), which applies extra CSS as defined in the recipe. Inputs are specific variant values; output is a button with compound style changes.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/recipes.mdx#2025-04-23_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\n<Button size=\"small\" visual=\"outline\">\n  Click Me\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Defining Grid Template Columns with gridTemplateColumns Prop - Chakra UI - JSX\nDESCRIPTION: Demonstrates how to use the gridTemplateColumns prop on a Box component rendered as a grid to define column structure. Requires Chakra UI and React. The value should be a valid CSS grid-template-columns definition.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/flex-and-grid.mdx#2025-04-23_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<Box display=\"grid\" gridTemplateColumns=\"repeat(3, minmax(0, 1fr))\">\\n  <Box>Item 1</Box>\\n  <Box>Item 2</Box>\\n  <Box>Item 3</Box>\\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Setting up Chakra UI Provider in Storybook Preview\nDESCRIPTION: Configure the .storybook/preview.tsx file to include the Chakra UI provider, wrapping all stories with the ChakraProvider component.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/get-started/frameworks/storybook.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ChakraProvider, defaultSystem } from \"@chakra-ui/react\"\nimport type { Preview } from \"@storybook/react\"\n\nconst preview: Preview = {\n  // ...\n  decorators: [\n    (Story) => (\n      <ChakraProvider value={defaultSystem}>\n        <Story />\n      </ChakraProvider>\n    ),\n  ],\n}\n\nexport default preview\n```\n\n----------------------------------------\n\nTITLE: Basic Grid Layout Structure in Chakra UI\nDESCRIPTION: This example demonstrates the basic structure of a Grid layout using Chakra UI components. It shows a Grid container with two GridItem children.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/grid.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Grid>\n  <GridItem />\n  <GridItem />\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Keyframes in Chakra UI Theme (TypeScript)\nDESCRIPTION: This snippet shows how to extend the Chakra UI theme with custom keyframes using TypeScript. It imports Chakra UI theming utilities, creates a config object with custom keyframes (e.g., \"shakeX\" for horizontal shaking), and exports the theme system. Dependencies include Chakra UI's `@chakra-ui/react` package and its theming APIs. The `config` object specifies keyframes under `theme.keyframes`, mapping key percentages to corresponding transform styles. Inputs are the keyframes object; output is the themed system instance. Should be used at the root of your Chakra-enabled application.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/customization/animations.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createSystem, defaultConfig, defineConfig } from \"@chakra-ui/react\"\n\nconst config = defineConfig({\n  theme: {\n    keyframes: {\n      shakeX: {\n        \"0%, 100%\": { transform: \"translateX(-100%)\" },\n        \"50%\": { transform: \"translateX(100%)\" },\n      },\n    },\n  },\n})\n\nexport const system = createSystem(defaultConfig, config)\n```\n\n----------------------------------------\n\nTITLE: Accessing Textarea Element Reference with useRef in React (TSX)\nDESCRIPTION: Provides an example of how to get a reference to the underlying HTML `textarea` element using the `useRef` hook in a React functional component written in TypeScript. This allows direct interaction with the DOM element if needed, for instance, to manually focus the textarea.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/textarea.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst Demo = () => {\n  const ref = useRef<HTMLTextAreaElement | null>(null)\n  return <Textarea ref={ref} />\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Drawer Component Structure in Chakra UI\nDESCRIPTION: Demonstrates the basic structure of a Drawer component in Chakra UI, including root, backdrop, trigger, content, header, body, and footer elements.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/drawer.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Drawer.Root>\n  <Drawer.Backdrop />\n  <Drawer.Trigger />\n  <Drawer.Positioner>\n    <Drawer.Content>\n      <Drawer.CloseTrigger />\n      <Drawer.Header>\n        <Drawer.Title />\n      </Drawer.Header>\n      <Drawer.Body />\n      <Drawer.Footer />\n    </Drawer.Content>\n  </Drawer.Positioner>\n</Drawer.Root>\n```\n\n----------------------------------------\n\nTITLE: Basic Radar Chart Implementation\nDESCRIPTION: Demonstrates the minimal structure needed to create a radar chart using Chakra UI and Recharts. This basic implementation consists of Chart.Root wrapper containing a RadarChart with a Radar component.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/radar-chart.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Chart.Root>\n  <RadarChart>\n    <Radar />\n  </RadarChart>\n</Chart.Root>\n```\n\n----------------------------------------\n\nTITLE: Using ClientOnly Component - React/Chakra UI\nDESCRIPTION: Demonstrates usage of the ClientOnly component with a fallback Skeleton component while rendering a ColorModeButton only on the client side.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/client-only.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ClientOnly fallback={<Skeleton />}>\n  <ColorModeButton />\n</ClientOnly>\n```\n\n----------------------------------------\n\nTITLE: Defining Themed Button Recipes with Virtual Colors in Chakra UI (JavaScript)\nDESCRIPTION: Shows how to define a recipe for themable buttons using the defineRecipe util and virtual color palettes in Chakra UI. The base config sets colorPalette to 'blue' and defines two variants: primary (blue background) and outline (bordered). Requires Chakra UI's recipe system enabled and proper imports. Inputs are recipe options and variant props; outputs are recipe objects usable in component theming.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/virtual-color.mdx#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst buttonRecipe = defineRecipe({\n  base: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    // set the color palette\n    colorPalette: \"blue\",\n  },\n  variants: {\n    variant: {\n      primary: {\n        bg: \"colorPalette.500\",\n        color: \"white\",\n      },\n      outline: {\n        borderWidth: \"1px\",\n        borderColor: \"colorPalette.500\",\n        _hover: {\n          borderColor: \"colorPalette.600\",\n        },\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Start and End Angles for Partial Donut Charts\nDESCRIPTION: Example of how to create partial donut charts by customizing the startAngle and endAngle props of the Pie component.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/donut-chart.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Pie startAngle={180} endAngle={0}>\n  {/* ... */}\n</Pie>\n```\n\n----------------------------------------\n\nTITLE: Using Semantic Color Tokens in Chakra UI Components\nDESCRIPTION: Shows how to directly use the semantic color tokens (brand.contrast and brand.solid) in Chakra UI components for styling.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/guides/theming-custom-colors.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Box color=\"brand.contrast\" bg=\"brand.solid\">\n  Hello world\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Setting Global Toast Offset - Chakra UI with React (JSX)\nDESCRIPTION: Sets a uniform offset for all edges by providing a string value (e.g., '20px') to the `offsets` property. This moves all toasts inward by the specified number of pixels from each edge of the screen. Ensures toasts do not sit flush against the page borders.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/toast.mdx#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nconst toaster = createToaster({\n  offsets: \"20px\",\n})\n```\n\n----------------------------------------\n\nTITLE: Using Semantic Tokens for Contextual Styling in Chakra UI\nDESCRIPTION: Shows how to use semantic tokens for context-based styling in Chakra UI. This example uses a 'danger' semantic token for the button color.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/blog/03-building-consistent-uis-with-design-tokens.mdx#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Button color=\"danger\">Click me</Button>\n```\n\n----------------------------------------\n\nTITLE: Integrating a Slot Recipe into the Chakra UI Theme (TypeScript)\nDESCRIPTION: Demonstrates how to incorporate a defined slot recipe (`checkboxSlotRecipe`) into the global Chakra UI theme configuration using `defineConfig`. The recipe is added under the `theme.slotRecipes` property with a unique key (\"checkbox\"), making it accessible throughout the application via this key.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/slot-recipes.mdx#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n```tsx title=\"theme.ts\"\nimport { createSystem, defaultConfig, defineConfig } from \"@chakra-ui/react\"\nimport { checkboxSlotRecipe } from \"./checkbox.recipe\"\n\nconst config = defineConfig({\n  theme: {\n    slotRecipes: {\n      checkbox: checkboxSlotRecipe,\n    },\n  },\n})\n\nexport default createSystem(defaultConfig, config)\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Breakpoints in Chakra UI Theme Configuration\nDESCRIPTION: Creates a custom theme configuration with extended breakpoints using defineConfig. This example adds xl, 2xl, 3xl, and 4xl breakpoints with their corresponding em values.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/guides/theming-custom-breakpoints.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = defineConfig({\n  theme: {\n    breakpoints: {\n      xl: \"80em\" ,\n      \"2xl\": \"96em\" ,\n      \"3xl\": \"120em\" ,\n      \"4xl\": \"160em\" ,\n    },\n  },\n})\n\nexport const system = createSystem(defaultConfig, config)\n```\n\n----------------------------------------\n\nTITLE: Applying Animation Prop with Chakra UI in JSX\nDESCRIPTION: Shows how to use the animation prop to apply a named keyframe animation (e.g., 'bounce') to a Chakra UI Box component. The keyframe must be defined in the theme's keyframes section. No other configuration is required except ensuring the animation is available in the theme.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/transitions.mdx#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Box animation=\\\"bounce\\\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Skeleton Components in Chakra UI (JSX)\nDESCRIPTION: Demonstrates how to use `Skeleton`, `SkeletonCircle`, and `SkeletonText` components within a `Stack` and `HStack` layout to create a basic loading placeholder structure. It utilizes props like `size`, `noOfLines`, and `height` to configure the appearance.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/skeleton.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Stack gap=\"6\" maxW=\"xs\">\n  <HStack width=\"full\">\n    <SkeletonCircle size=\"10\" />\n    <SkeletonText noOfLines={2} />\n  </HStack>\n  <Skeleton height=\"200px\" />\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Using LinkOverlay with Custom Link Component in Chakra UI\nDESCRIPTION: This example shows how to use LinkOverlay with a custom Link component, such as Next.js's Link. It demonstrates the use of the 'asChild' prop for custom link support.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/link-overlay.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { LinkBox, LinkOverlay } from \"@chakra-ui/react\"\nimport NextLink from \"next/link\"\n\nfunction Example() {\n  return (\n    <LinkBox as=\"article\">\n      <h2>\n        <LinkOverlay asChild>\n          <NextLink href=\"#\">Blog Post Title</NextLink>\n        </LinkOverlay>\n      </h2>\n      <p>Some blog post content</p>\n      <NextLink href=\"#inner-link\">Some inner link</NextLink>\n    </LinkBox>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Theme with ChakraProvider\nDESCRIPTION: Pass the configured system to the ChakraProvider to apply the custom font theme across the entire application.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/guides/theming-add-custom-font-to-nextjs.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport function Provider(props: ColorModeProviderProps) {\n  return (\n    <ChakraProvider value={system}>\n      <ColorModeProvider {...props} />\n    </ChakraProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Focus Ring Color for Specific Button in Chakra UI\nDESCRIPTION: Shows how to change the focus ring color for a specific button using the focusRingColor prop.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/focus-ring.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Button focusRingColor=\"red.500\">Click me</Button>\n```\n\n----------------------------------------\n\nTITLE: Setting Text Alignment with Chakra UI in JSX\nDESCRIPTION: This snippet demonstrates setting the horizontal alignment of text within a Chakra UI `<Text>` component using the `textAlign` prop with standard CSS values like 'left', 'center', 'right', and 'justify'.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/typography.mdx#2025-04-23_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<Text textAlign=\"left\">Hello World</Text>\n<Text textAlign=\"center\">Hello World</Text>\n<Text textAlign=\"right\">Hello World</Text>\n<Text textAlign=\"justify\">Hello World</Text>\n```\n\n----------------------------------------\n\nTITLE: Setting Z-Index with Chakra UI in JSX\nDESCRIPTION: Provides examples for configuring Box zIndex with both literal numeric values and Chakra UI tokens (e.g., 'overlay') to control stacking order. Prop accepts number or string. Requires Chakra UI and works for visual layering control.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/layout.mdx#2025-04-23_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\n// using hardcoded values\\n<Box zIndex=\\\"1\\\" />\\n\\n// using token\\n<Box zIndex=\\\"overlay\\\" />\n```\n\n----------------------------------------\n\nTITLE: Using Chakra UI Number Input Control Shortcut in TSX\nDESCRIPTION: Demonstrates the shorthand way to render numeric input control triggers within Chakra UI by using 'NumberInput.Control' with no children. This automatically renders increment and decrement triggers as children, saving boilerplate for standard use cases.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/number-input.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<NumberInput.Control />\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom System in Chakra Provider\nDESCRIPTION: Shows how to add the custom system with dark mode colors to the ChakraProvider in a React component. This ensures your custom color system is applied throughout the application.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/guides/theming-customize-dark-mode-colors.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\"\n\nimport { system } from \"@/components/theme\"\nimport { ChakraProvider } from \"@chakra-ui/react\"\n\nexport function Provider(props: ColorModeProviderProps) {\n  return (\n    <ChakraProvider value={system}>\n      <ColorModeProvider {...props} />\n    </ChakraProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Semantic Tokens for Light and Dark Modes\nDESCRIPTION: Shows how to create custom semantic tokens with different values for light and dark themes. This example defines a 'checkbox-border' token that varies based on the color mode.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/blog/03-building-consistent-uis-with-design-tokens.mdx#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createSystem, defaultConfig, defineConfig } from \"@chakra-ui/react\"\n\nconst customConfig = defineConfig({\n  theme: {\n    semanticTokens: {\n      colors: {\n        \"checkbox-border\": {\n          value: { _light: \"gray.200\", _dark: \"gray.800\" },\n        },\n      },\n    },\n  },\n})\n\nexport const system = createSystem(defaultConfig, customConfig)\n```\n\n----------------------------------------\n\nTITLE: Creating CSS Keyframes for Fade-In Animation\nDESCRIPTION: CSS keyframes definition for a fade-in animation that transitions opacity from 0 to 1, to be used with Chakra UI components.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/concepts/animation.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@keyframes fade-in {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using LocaleProvider to Wrap App Component in React\nDESCRIPTION: This example demonstrates how to use the LocaleProvider component to wrap your main App component, setting the locale for the entire application.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/locale-provider.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<LocaleProvider locale=\"...\">{/* Your App */}</LocaleProvider>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Navbar Slot Recipe with useSlotRecipe in Chakra UI (TSX)\nDESCRIPTION: Shows how to consume a custom slot recipe in a Chakra UI functional component by retrieving slot styles with `useSlotRecipe`. This component renders a navbar using the style keys for each slot, demonstrating advanced slot-based theming. Assumes prior theme extension.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/customization/recipes.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nconst Navbar = (props) => {\n  const recipe = useSlotRecipe({ key: \"navbar\" })\n  const styles = recipe()\n  return (\n    <Box css={styles.root}>\n      {props.children}\n      <Box css={styles.badge} />\n      <Box css={styles.icon} />\n    </Box>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Bar List Structure in Chakra UI Charts (TSX)\nDESCRIPTION: This code demonstrates the basic structure of a Bar List component in Chakra UI charts, including the root, content, bar, and value elements.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/bar-list.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<BarList.Root>\n  <BarList.Content>\n    <BarList.Bar />\n    <BarList.Value />\n  </BarList.Content>\n</BarList.Root>\n```\n\n----------------------------------------\n\nTITLE: Setting Element Position with Chakra UI Position Utilities in JSX\nDESCRIPTION: Demonstrates use of position and its shorthand pos prop to set Box components' positions (e.g., 'absolute'). Only works with Chakra UI components that accept these props. Standard CSS position values can be used as input.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/layout.mdx#2025-04-23_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\n<Box position=\\\"absolute\\\" />\\n<Box pos=\\\"absolute\\\" /> // shorthand\n```\n\n----------------------------------------\n\nTITLE: Clearing Floated Elements with Chakra UI in JSX\nDESCRIPTION: Demonstrates use of the clear prop to specify how a Box clears previous floated elements, alongside multiple Box components floated left and right. Chakra UI is required. The clear property accepts 'left', 'right', 'both', or 'none' to control flow. Useful after floated siblings to maintain layout integrity.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/layout.mdx#2025-04-23_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<Box>\\n  <Box float=\\\"left\\\">Left</Box>\\n  <Box float=\\\"right\\\">Right</Box>\\n  <Box clear=\\\"none\\\">\\n    As much mud in the streets as if the waters had but newly retired from the\\n    face of the earth, and it would not be wonderful to meet a Megalosaurus,\\n    forty feet long or so, waddling like an elephantine lizard up Holborn Hill.\\n  </Box>\\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Importing Line Chart Components in React\nDESCRIPTION: Import necessary components from Chakra UI charts and Recharts libraries to create a line chart.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/line-chart.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Chart, useChart } from \"@chakra-ui/charts\"\nimport { CartesianGrid, Line, LineChart, XAxis, YAxis } from \"recharts\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Button Component via Chakra Factory with a Recipe (TypeScript)\nDESCRIPTION: Creates a Button React component directly using Chakra UI's chakra factory function with the buttonRecipe, enabling variant-driven styling. The recipe can be inlined or imported, and the component supports all recipe variant props. Requires @chakra-ui/react and the recipe definition; outputs a type-safe, reusable button.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/recipes.mdx#2025-04-23_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"use client\"\n\nimport { chakra } from \"@chakra-ui/react\"\nimport { buttonRecipe } from \"./button.recipe\"\n\nexport const Button = chakra(\"button\", buttonRecipe)\n```\n\n----------------------------------------\n\nTITLE: Importing Password Input Components (JSX)\nDESCRIPTION: Imports the `PasswordInput` and `PasswordStrengthMeter` components from a relative path within the project's components directory (`@/components/ui/password-input`). This is necessary to use these components in a React/JSX file after adding the snippet.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/password-input.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  PasswordInput,\n  PasswordStrengthMeter,\n} from \"@/components/ui/password-input\"\n```\n\n----------------------------------------\n\nTITLE: Splitting Variant Props from Other Props in Button Component (TypeScript)\nDESCRIPTION: Shows how to use the splitVariantProps helper from the recipe object to automatically separate variant properties from other component props in a React Button. This enables more flexible prop handling for recipe-driven components using useRecipe. Inputs are any props for Button; output is a tuple separating variant and rest props.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/recipes.mdx#2025-04-23_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"use client\"\n\nimport { chakra, useRecipe } from \"@chakra-ui/react\"\nimport { buttonRecipe } from \"./button.recipe\"\n\nexport const Button = (props) => {\n  const recipe = useRecipe({ recipe: buttonRecipe })\n  const [recipeProps, restProps] = recipe.splitVariantProps(props)\n  const styles = recipe(recipeProps)\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Composing Custom Components with Group\nDESCRIPTION: Illustrates how to compose custom components with the Group component, ensuring props are forwarded correctly when using the 'attached' prop.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/group.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Demo = () => {\n  return (\n    <Group attached>\n      <FocusButton />\n      <IconButton variant=\"outline\">Two</IconButton>\n    </Group>\n  )\n}\n\nfunction FocusButton(props: ButtonProps) {\n  return (\n    <IconButton variant=\"outline\" {...props}>\n      <LuFocus />\n    </IconButton>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Composing Animation Names with Chakra UI in JSX\nDESCRIPTION: Demonstrates the use of the animationName and animationDuration props to apply multiple named animations to a Box component. This approach allows for composing complex animation sequences. Both keyframes ('bounce', 'fade-in') must exist in the Chakra UI theme keyframes, and the duration should correspond to a theme-defined token.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/transitions.mdx#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Box animationName=\\\"bounce, fade-in\\\" animationDuration=\\\"fast\\\" />\n```\n\n----------------------------------------\n\nTITLE: Applying Translation Transform with Chakra UI Box Component in JSX\nDESCRIPTION: Examples of translating (moving) a Chakra UI `Box` component using the `translate` prop. Accepts single values (e.g., \"40px\", applied to both X and Y axes) or two values (e.g., \"50% -40%\", applied to X and Y axes respectively).\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/transforms.mdx#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Box translate=\"40px\" />\n<Box translate=\"50% -40%\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Text Color with Chakra UI in JSX\nDESCRIPTION: This snippet shows how to set the color of a Chakra UI `<Text>` component using the `color` prop. The value 'red' could be a standard CSS color name or potentially a token from the theme's `colors` category.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/typography.mdx#2025-04-23_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n<Text color=\"red\">Hello World</Text>\n```\n\n----------------------------------------\n\nTITLE: Setting Text Overflow Behavior with Chakra UI in JSX\nDESCRIPTION: This snippet demonstrates controlling how overflowed text is signaled within a Chakra UI `<Text>` component using the `textOverflow` prop (e.g., 'ellipsis'). This often requires setting `overflow` and `white-space` properties as well (potentially handled implicitly by other props like `truncate` or `lineClamp`). It maps to the `text-overflow` CSS property.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/typography.mdx#2025-04-23_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\n<Text textOverflow=\"ellipsis\">Hello World</Text>\n```\n\n----------------------------------------\n\nTITLE: Implementing Exit Animation with _closed Pseudo Prop in Chakra UI\nDESCRIPTION: Example showing how to apply a fade-out animation to a Chakra UI Box component when it exits (closes). The animation is applied using the _closed pseudo prop which targets the data-state=\"closed\" attribute.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/concepts/animation.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Box\n  data-state=\"closed\"\n  _closed={{\n    animation: \"fadeOut 300ms ease-in\",\n  }}\n>\n  This is closed\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Using Logical Corner Props for Border Radius in Chakra UI - JavaScript/JSX\nDESCRIPTION: These snippets use logical properties (borderStartStartRadius, roundedStartStart) to round specific corners according to text direction for <Box> components. Accepts Chakra UI radii keys. Enables dynamic styling for RTL/LTR language support.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/border.mdx#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Box borderStartStartRadius=\"md\" />\n<Box roundedStartStart=\"md\" /> // shorthand\n```\n\n----------------------------------------\n\nTITLE: Setting Text Decoration Color with Chakra UI in JSX\nDESCRIPTION: This snippet shows how to set the color of the text decoration (e.g., the underline) on a Chakra UI `<Text>` component using the `textDecorationColor` prop. It requires a `textDecoration` to be set and maps to the `text-decoration-color` CSS property, potentially using theme `colors`.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/typography.mdx#2025-04-23_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n<Text textDecoration=\"underline\" textDecorationColor=\"red\">\n  Hello World\n</Text>\n```\n\n----------------------------------------\n\nTITLE: Simplified Rating Control in Chakra UI\nDESCRIPTION: Demonstrates a more concise way to render rating items using the Control component.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/rating.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<RatingGroup.Control />\n```\n\n----------------------------------------\n\nTITLE: Applying Backdrop Blur Effect using `backdropBlur` Prop in JSX\nDESCRIPTION: Illustrates applying a blur effect to the area behind an element using the `backdropBlur` prop. This requires the `backdropFilter` prop to be set to `auto`. It accepts hardcoded CSS values or theme token values.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/filters.mdx#2025-04-23_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n// hardcoded value\n<Box backdropFilter=\"auto\" backdropBlur=\"5px\" />\n\n// token value\n<Box backdropFilter=\"auto\" backdropBlur=\"sm\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Element Aspect Ratio with Chakra UI in JSX\nDESCRIPTION: Demonstrates use of the aspectRatio prop on a Box component to control the aspect ratio, accepting either raw numeric values or string tokens (e.g., '1.2', 'square'). No external dependencies beyond Chakra UI are required. Input is the aspectRatio value; output is a Box element with the specified aspect ratio. Prop only works with Chakra UI components supporting aspectRatio.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/layout.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// raw value\\n<Box aspectRatio=\\\"1.2\\\" />\\n\\n// token\\n<Box aspectRatio=\\\"square\\\" />\n```\n\n----------------------------------------\n\nTITLE: Using Logical Border Color Props for Directional Styling - Chakra UI - JavaScript/JSX\nDESCRIPTION: These snippets apply border colors to logical start and end edges via borderStartColor and borderEndColor. Props accept color tokens and are direction-sensitive, ideal for dynamic layouts with Chakra UI.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/border.mdx#2025-04-23_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<Box borderStartColor=\"red.400\" />\n<Box borderEndColor=\"red.400\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Card Structure in React\nDESCRIPTION: Demonstrates the basic structure of a Card component with Header, Body, and Footer subcomponents.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/card.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Card.Root>\n  <Card.Header />\n  <Card.Body />\n  <Card.Footer />\n</Card.Root>\n```\n\n----------------------------------------\n\nTITLE: Importing useChart Hook in TypeScript React\nDESCRIPTION: Shows how to import the useChart hook from the Chakra UI charts package.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/use-chart.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useChart } from \"@chakra-ui/charts\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Grid Autoflow with gridAutoFlow Prop - Chakra UI - JSX\nDESCRIPTION: Shows how to set the grid's autoflow behavior—row or column—using the gridAutoFlow prop on a Box displayed as grid. The prop accepts 'row', 'column', or other standard CSS grid-auto-flow values. Chakra UI/React needed.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/flex-and-grid.mdx#2025-04-23_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\n<Box display=\"grid\" gridAutoFlow=\"row\">\\n  <Box>Item 1</Box>\\n  <Box>Item 2</Box>\\n  <Box>Item 3</Box>\\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Y-Axes in Chakra UI Charts\nDESCRIPTION: Shows how to include multiple Y-axes with different orientations and colors.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/axes.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<YAxis yAxisId=\"left\" orientation=\"left\" stroke=\"#8884d8\" />\n<YAxis yAxisId=\"right\" orientation=\"right\" stroke=\"#82ca9d\" />\n```\n\n----------------------------------------\n\nTITLE: Formatting Y-Axis Values in Recharts\nDESCRIPTION: This code demonstrates how to use the formatter provided by the useChart hook to format the values on the Y-axis of a bar chart.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/bar-chart.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<YAxis\n  tickFormatter={chart.formatNumber({\n    style: \"currency\",\n    currency: \"USD\",\n    notation: \"compact\",\n  })}\n/>\n```\n\n----------------------------------------\n\nTITLE: Controlling Element Visibility with Chakra UI in JSX\nDESCRIPTION: Demonstrates usage of the visibility prop to programmatically hide an element (e.g., visibility='hidden'). Expects a string value mapping to CSS visibility. Requires only Chakra UI and can be applied to any compatible component.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/layout.mdx#2025-04-23_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\n<Box visibility=\\\"hidden\\\" />\n```\n\n----------------------------------------\n\nTITLE: Setting SVG Fill Color with Chakra UI in JSX\nDESCRIPTION: This snippet demonstrates how to set the fill color of an SVG element using the `fill` prop on the `chakra.svg` component. The `fill` prop maps directly to the CSS `fill` property and utilizes values from the `colors` token category in the Chakra UI theme.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/svg.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<chakra.svg fill=\"blue.500\">\n  <path d=\"...\" />\n</chakra.svg>\n```\n\n----------------------------------------\n\nTITLE: Blending Background Image and Color with Chakra UI (JSX)\nDESCRIPTION: Shows how to apply the bgBlendMode prop on a Chakra UI <Box> to control how a background image blends with a background color. Requires Chakra UI; bgBlendMode accepts blend mode values (e.g., 'multiply'), while bgColor and bgImage set the color and image respectively. Useful for achieving overlay or compositing effects on backgrounds.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/background.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Box bgBlendMode=\"multiply\" bgColor=\"red.200\" bgImage=\"url(...)\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Focus Ring Color in Chakra UI\nDESCRIPTION: Demonstrates how to change the focus ring color globally by configuring the focusRing semantic token.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/focus-ring.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst colors = defineSemanticTokens.colors({\n  focusRing: {\n    value: { base: \"{colors.red.500}\", _dark: \"{colors.red.500}\" },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using Core Color Tokens in Chakra UI Box Component\nDESCRIPTION: Demonstrates how to apply a core color token to a Chakra UI Box component for consistent styling. The example uses the gray.300 color token for the background.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/blog/03-building-consistent-uis-with-design-tokens.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Box bg=\"gray.300\" p={4}>\n  Chakra Box with Core Color Token\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Integrating Animation Styles into Chakra UI Theme (JavaScript)\nDESCRIPTION: This snippet shows how to integrate previously defined animation styles into the Chakra UI theme configuration. It imports the `animationStyles` object (presumably containing definitions like the previous example) and adds it to the `theme` object under the `animationStyles` key using `defineConfig`. The entire configuration is then passed to `createSystem` to generate the final theme system.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/animation-styles.mdx#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// filename=\"theme.ts\"\nimport { createSystem, defineConfig } from \"@chakra-ui/react\"\nimport { animationStyles } from \"./animation-styles\"\n\nconst config = defineConfig({\n  theme: {\n    animationStyles,\n  },\n})\n\nexport default createSystem(defaultConfig, config)\n```\n\n----------------------------------------\n\nTITLE: Applying Y-axis Scale Transform with Chakra UI Box Component in JSX\nDESCRIPTION: Illustrates scaling a Chakra UI `Box` component only along the Y-axis using the `scaleY` prop. This requires setting the `scale` prop to `auto` first. The value \"0.4\" decreases the height of the element to 40% of its original size.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/transforms.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Box scale=\"auto\" scaleY=\"0.4\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Mouse Cursor Style in Chakra UI JSX\nDESCRIPTION: Demonstrates applying the `cursor` prop to a `Box` component to change the mouse pointer image when hovering over the element. This example sets the cursor to a pointer.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/interactivity.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Box cursor=\"pointer\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Text Underline Offset with Chakra UI in JSX\nDESCRIPTION: This snippet demonstrates setting the offset distance of the underline from the text on a Chakra UI `<Text>` component using the `textUnderlineOffset` prop with a CSS length value like '1px'. It requires `textDecoration=\"underline\"` and maps to the `text-underline-offset` CSS property.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/typography.mdx#2025-04-23_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\n<Text textDecoration=\"underline\" textUnderlineOffset=\"1px\">\n  Hello World\n</Text>\n```\n\n----------------------------------------\n\nTITLE: Using Switch.Control with Explicit Thumb in TSX\nDESCRIPTION: Illustrates using the `Switch.Control` component while explicitly including the `Switch.Thumb` as a child. This is the default internal behavior but shown here for clarity or if specific props need to be passed to the thumb.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/switch.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Switch.Control>\n  <Switch.Thumb />\n</Switch.Control>\n```\n\n----------------------------------------\n\nTITLE: Applying X-axis Translation with Chakra UI Box Component in JSX\nDESCRIPTION: Demonstrates translating a Chakra UI `Box` component along the X-axis using the `translateX` prop. This requires setting the `translate` prop to `auto` first. Accepts standard CSS length/percentage values (e.g., \"50%\", \"20px\") or theme spacing token values (e.g., \"4\", \"-10\").\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/transforms.mdx#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n// hardcoded values\n<Box translate=\"auto\" translateX=\"50%\" />\n<Box translate=\"auto\" translateX=\"20px\" />\n\n// token values\n<Box translate=\"auto\" translateX=\"4\" />\n<Box translate=\"auto\" translateX=\"-10\" />\n```\n\n----------------------------------------\n\nTITLE: Applying Horizontal Dividers with Chakra UI Box (JSX)\nDESCRIPTION: This snippet demonstrates the use of the divideX prop in Chakra UI's Box component to add a horizontal divider ('border-inline-start-width') of 2px between child elements. It requires the Chakra UI library, and should be used within a React component tree with Box elements as children. The main parameter is divideX, which sets the divider width; the output visually separates each child element with a vertical border.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/divide.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Box divideX=\\\"2px\\\">\\n  <Box>Item 1</Box>\\n  <Box>Item 2</Box>\\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Setting Scroll Behavior in Chakra UI JSX\nDESCRIPTION: Illustrates how to use the `scrollBehavior` prop on a scrollable `Box` component (`overflowY='auto'`) to define the scrolling animation. Setting it to 'smooth' enables smooth scrolling when triggered programmatically or via navigation.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/interactivity.mdx#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Box maxH=\"100px\" overflowY=\"auto\" scrollBehavior=\"smooth\">\n  <div>Scroll me</div>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Defining Grid Template Rows with gridTemplateRows Prop - Chakra UI - JSX\nDESCRIPTION: Demonstrates configuring row sizes for a grid using the gridTemplateRows prop on a Chakra UI Box displayed as grid. This sets up 3 rows with flexible sizes. Chakra UI and React are required.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/flex-and-grid.mdx#2025-04-23_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n<Box display=\"grid\" gap=\"4\" gridTemplateRows=\"repeat(3, minmax(0, 1fr))\">\\n  <Box>Item 1</Box>\\n  <Box>Item 2</Box>\\n  <Box>Item 3</Box>\\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Controlling Content Overflow with Chakra UI in JSX\nDESCRIPTION: Demonstrates setting overflow prop to values 'hidden' or 'auto' on a Box, paired with a constrained maxHeight. Useful for managing content that may exceed available space by hiding it or adding scrollbars automatically. Chakra UI is required. Typical inputs are overflow style values.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/layout.mdx#2025-04-23_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n<Box overflow=\\\"hidden\\\" maxHeight=\\\"120px\\\" />\\n<Box overflow=\\\"auto\\\" maxHeight=\\\"120px\\\" />\n```\n\n----------------------------------------\n\nTITLE: Applying Backdrop Contrast Effect using `backdropContrast` Prop in JSX\nDESCRIPTION: Shows how to apply a contrast effect to the area behind an element using the `backdropContrast` prop. This requires the `backdropFilter` prop to be set to `auto`. The value adjusts the contrast.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/filters.mdx#2025-04-23_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n<Box backdropFilter=\"auto\" backdropContrast=\"0.3\" />\n```\n\n----------------------------------------\n\nTITLE: Using Color Opacity Modifier in CSS Variables (TSX)\nDESCRIPTION: Illustrates defining a custom CSS variable (`--bg`) within a Chakra UI `Box` component using the `css` prop. The variable's value is set using the color opacity modifier syntax within curly braces (`\"{colors.red.400/40}\"`) to reference a theme token and apply 40% opacity. This variable is then consumed by a child `Box` component via its `bg` prop.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/color-opacity-modifier.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Box css={{ \"--bg\": \"{colors.red.400/40}\" }}>\n  <Text>Hello World</Text>\n  <Box bg=\"var(--bg)\" />\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Chakra UI List Component in JSX\nDESCRIPTION: This example demonstrates the basic structure of a Chakra UI List component. It shows how to create a simple list with two items using the List.Root and List.Item components.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/list.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<List.Root>\n  <List.Item>Item 1</List.Item>\n  <List.Item>Item 2</List.Item>\n</List.Root>\n```\n\n----------------------------------------\n\nTITLE: Hiding Elements From a Breakpoint using hideFrom with Chakra UI Box Component - JSX\nDESCRIPTION: Shows how to use the 'hideFrom' prop on Chakra UI's <Box> component to hide the element from a specified breakpoint and above. Dependencies are Chakra UI and React. The code sets 'display' to flex and hides the element from 'md' (medium) breakpoint onward. Useful for responsive design where elements should be hidden above certain screen sizes.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/display.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx\\n<Box display=\\\"flex\\\" hideFrom=\\\"md\\\" />\\n```\n```\n\n----------------------------------------\n\nTITLE: Resizing Images with Chakra UI Object Fit in JSX\nDESCRIPTION: Demonstrates application of the objectFit prop on an Image component to control how images resize within their containers (e.g., 'cover'). Image src, width, and height are specified. Requires Chakra UI; objectFit aligns with CSS object-fit property and standard image display constraints.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/layout.mdx#2025-04-23_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<Image src=\\\"...\\\" objectFit=\\\"cover\\\" width=\\\"10\\\" height=\\\"10\\\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Reference Lines in Chakra UI Charts\nDESCRIPTION: Demonstrates how to add a reference line with a label at a specific Y-value.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/axes.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<ReferenceLine y={1000} stroke=\"red\" label=\"Threshold\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Font Variant Numeric with Chakra UI in JSX\nDESCRIPTION: This snippet illustrates using the `fontVariantNumeric` prop on a Chakra UI `<Text>` component to control the usage of alternate glyphs for numbers (e.g., 'lining-nums'). This maps to the `font-variant-numeric` CSS property.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/typography.mdx#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Text fontVariantNumeric=\"lining-nums\">Hello World</Text>\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Semantic Tokens in Chakra UI (JavaScript)\nDESCRIPTION: This example shows how to structure semantic tokens hierarchically. A `bg` token group is defined under `colors`. The `DEFAULT` key sets the value for the base `bg` token (referencing `colors.gray.100`). Additional keys like `primary` and `secondary` define nested tokens (`bg.primary`, `bg.secondary`) referencing other colors. This allows for more organized token management.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/semantic-tokens.mdx#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n```js title=\"theme.ts\"\nimport { createSystem, defaultConfig, defineConfig } from \"@chakra-ui/react\"\n\nconst config = defineConfig({\n  theme: {\n    semanticTokens: {\n      colors: {\n        bg: {\n          DEFAULT: { value: \"{colors.gray.100}\" },\n          primary: { value: \"{colors.teal.100}\" },\n          secondary: { value: \"{colors.gray.100}\" },\n        },\n      },\n    },\n  },\n})\n\nexport default createSystem(defaultConfig, config)\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering Overlay Viewport in Chakra UI with TypeScript\nDESCRIPTION: This snippet shows how to render the Viewport component to display the overlay created using the createOverlay function.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/overlay-manager.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<dialog.Viewport />\n```\n\n----------------------------------------\n\nTITLE: Limiting Maximum Visible Toasts - Chakra UI with React (JSX)\nDESCRIPTION: Configures a toaster instance with a `max` property set to 3, restricting the number of visible toasts at any time. Additional toasts will be queued until a visible toast is dismissed. This configuration is useful for managing UI clutter in notifications-heavy interfaces.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/toast.mdx#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst toaster = createToaster({\n  max: 3,\n})\n```\n\n----------------------------------------\n\nTITLE: Formatting Bar Values in Chakra UI Charts (TSX)\nDESCRIPTION: This example demonstrates how to use a value formatter function with the BarList.Value component to format the displayed values.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/bar-list.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<BarList.Value valueFormatter={(value) => value.toLocaleString()} />\n```\n\n----------------------------------------\n\nTITLE: Applying Conditional Animation Styles in Chakra UI Component (JSX)\nDESCRIPTION: This JSX snippet demonstrates how to apply animation styles conditionally to a Chakra UI `Box` component based on its `data-state` attribute. The `animationStyle` prop takes an object where keys like `_open` and `_closed` correspond to `data-state=\"open\"` and `data-state=\"closed\"` respectively, applying different pre-defined animation styles ('slide-fade-in', 'slide-fade-out') for each state. The `animationDuration` prop is also used.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/animation-styles.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Box\n  data-state=\"open\"\n  animationDuration=\"slow\"\n  animationStyle={{ _open: \"slide-fade-in\", _closed: \"slide-fade-out\" }}\n>\n  This content will fade in\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Configuring Toast Placement - Chakra UI with React (JSX)\nDESCRIPTION: Initializes the toaster with a `placement` option, here set to `top-end`, specifying where on the screen toast notifications will appear. This prop accepts several positions (e.g., top-end, bottom-start) and determines the visual location of toasts.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/toast.mdx#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst toaster = createToaster({\n  placement: \"top-end\",\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Axis Labels to Line Chart in React\nDESCRIPTION: Add labels to the X and Y axes of a line chart using the Label component from Recharts.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/line-chart.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<XAxis axisLine={false} label={{ value: \"X Axis\", position: \"bottom\" }} />\n<YAxis axisLine={false} label={{ value: \"Y Axis\", position: \"left\", angle: -90 }} />\n```\n\n----------------------------------------\n\nTITLE: Using Closed Component Radio Card in React\nDESCRIPTION: Demonstrates how to use the closed component version of the Radio Card.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/radio-card.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<RadioCardRoot>\n  <RadioCardLabel />\n  <RadioCardItem />\n</RadioCardRoot>\n```\n\n----------------------------------------\n\nTITLE: Recipe Implementation Using Data Attributes\nDESCRIPTION: Chakra UI recipe that applies styling based on data attributes. The recipe uses CSS selectors to target elements with specific data attributes.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/guides/theming-recipe-dynamic-styling.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport const buttonRecipe = defineRecipe({\n  base: {\n    display: \"flex\",\n  },\n  variants: {\n    size: {\n      sm: {\n        padding: \"4\",\n        fontSize: \"12px\",\n        \"&[data-pressed]\": {\n          padding: \"8\",\n        },\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Border Spacing on Chakra UI Table - JSX\nDESCRIPTION: Demonstrates how to apply the Chakra UI 'borderSpacing' prop on a table element to control the CSS 'border-spacing' property via the spacing token. This requires the Chakra UI library and is intended for use in a React component with the 'chakra' factory. Input: spacing token or value for the border spacing (here, '2'). Output: a table with all cell borders spaced as specified. Only applicable within Chakra-enabled React code.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/tables.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<chakra.table borderSpacing=\\\"2\\\">\\n  <tbody>\\n    <tr>\\n      <td>Cell 1</td>\\n      <td>Cell 2</td>\\n    </tr>\\n  </tbody>\\n</chakra.table>\n```\n\n----------------------------------------\n\nTITLE: Importing Chakra UI Slider in React using TypeScript\nDESCRIPTION: This snippet demonstrates how to import the Slider component from the '@chakra-ui/react' package using TypeScript. This import is required before you can use any part of the Slider API in a TypeScript React project. No configuration or parameters are needed, and the component can be used as shown in subsequent examples. Ensure that '@chakra-ui/react' is installed as a dependency in your project.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/slider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Slider } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Applying Contrast Effect using the `contrast` Prop in JSX\nDESCRIPTION: Shows how to apply a contrast effect using the `contrast` prop. This requires the `filter` prop to be explicitly set to `auto`. The prop value adjusts the contrast level.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/filters.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Box filter=\"auto\" contrast=\"0.3\" />\n```\n\n----------------------------------------\n\nTITLE: Applying Text Styles in Chakra UI Components (JSX)\nDESCRIPTION: This JSX snippet demonstrates how to use the textStyle property in a Chakra UI component to apply the custom 'body' text style defined in the theme. Requires the theme to be configured with textStyles. <Box textStyle=\"body\"> will render with the styles set under 'body' in the theme. The input is the styled Box component, and the output is a UI element with appropriate typography styling.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/text-styles.mdx#2025-04-23_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<Box textStyle=\"body\">This is the body text style</Box>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Checkbox Card Component in Chakra UI\nDESCRIPTION: This code demonstrates the basic structure and usage of the CheckboxCard component, including its subcomponents.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/checkbox-card.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<CheckboxCard.Root>\n  <CheckboxCard.HiddenInput />\n  <CheckboxCard.Control>\n    <CheckboxCard.Content>\n      <CheckboxCard.Label />\n      <CheckboxCard.Description />\n    </CheckboxCard.Content>\n    <CheckboxCard.Indicator />\n  </CheckboxCard.Control>\n</CheckboxCard.Root>\n```\n\n----------------------------------------\n\nTITLE: Setting Scroll Snap Type in Chakra UI JSX\nDESCRIPTION: Shows how to use the `scrollSnapType` prop on a scrollable `Box` component to control how strictly scroll snap points are enforced. This example sets the snapping behavior for the x-axis.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/interactivity.mdx#2025-04-23_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n<Box maxH=\"100px\" overflowY=\"auto\" scrollSnapType=\"x\">\n  Scroll container with x snap type\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Styling List Items in Chakra UI\nDESCRIPTION: Demonstrates how to style the first and last elements in a list using _first and _last modifiers.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/conditional-styles.mdx#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Box as=\"ul\">\n  {items.map((item) => (\n    <Box\n      as=\"li\"\n      key={item}\n      _first={{ color: \"red.500\" }}\n      _last={{ color: \"red.800\" }}\n    >\n      {item}\n    </Box>\n  ))}\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Using Logical Border Radius Props for Text Direction with Chakra UI - JavaScript/JSX\nDESCRIPTION: These examples use logical border radius props (roundedStart, roundedEnd) to set border radius adaptively based on text direction. Useful for RTL/LTR layouts. Requires Chakra UI React. Accepts radii keys as prop values and applies them to logical start/end sides.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/border.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Box roundedStart=\"md\" />\n<Box roundedEnd=\"md\" />\n```\n\n----------------------------------------\n\nTITLE: Applying Padding to a Specific Side with Chakra UI - JavaScript/JSX\nDESCRIPTION: Demonstrates how to set padding for a single side (left or top) of a Chakra UI <Box> using the paddingLeft/paddingTop props or their shorthand equivalents (pl/pt). Dependencies: React, Chakra UI. Props accept theme spacing tokens, and the output is a Box with specified side padding. These properties are only meaningful inside Chakra components and rely on the theme scale. Limitations: only affects the specified edge.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/spacing.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Box paddingLeft=\\\"3\\\" />\\n<Box pl=\\\"3\\\" /> // shorthand\\n\\n<Box paddingTop=\\\"3\\\" />\\n<Box pt=\\\"3\\\" /> // shorthand\n```\n\n----------------------------------------\n\nTITLE: Stack Component Spacing in v2 vs Gap in v3\nDESCRIPTION: Shows how spacing between elements is handled differently in v2 and v3. Version 2 uses the spacing prop for Stack components, while version 3 uses the gap prop, aligning with modern CSS practices.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/blog/01-chakra-v2-vs-v3-a-detailed-comparison.mdx#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Stack spacing={4}>\n  <Box>Item 1</Box>\n  <Box>Item 2</Box>\n</Stack>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Stack gap={4}>\n  <Box>Item 1</Box>\n  <Box>Item 2</Box>\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Clamping Multi-Line Text with Chakra UI in JSX\nDESCRIPTION: These snippets show how to use the `lineClamp` prop on a Chakra UI `<Text>` component to limit the text content to a specific number of lines (e.g., '2') before truncating with an ellipsis. Setting `lineClamp` to 'none' disables the truncation. This relies on the `-webkit-line-clamp` CSS property.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/typography.mdx#2025-04-23_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<Text lineClamp=\"2\">Lorem ipsum dolor sit amet...</Text>\n\n// revert truncation\n<Text lineClamp=\"none\">Lorem ipsum dolor sit amet...</Text>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of FormatNumber Component in React\nDESCRIPTION: Demonstrates the basic usage of the FormatNumber component to format a number value.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/format-number.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<FormatNumber value={1000} />\n```\n\n----------------------------------------\n\nTITLE: Expanded ColorPicker.ChannelSlider Component Structure\nDESCRIPTION: Shows the expanded structure of the ChannelSlider shortcut component with its constituent parts explicitly defined.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/color-picker.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<ColorPicker.ChannelSlider>\n  <ColorPickerTransparencyGrid />\n  <ColorPickerChannelSliderTrack />\n  <ColorPickerChannelSliderThumb />\n</ColorPicker.ChannelSlider>\n```\n\n----------------------------------------\n\nTITLE: Setting Flex Shrink Factor with flexShrink Prop - Chakra UI - JSX\nDESCRIPTION: Demonstrates using the flexShrink prop to control shrinking behavior of Box components inside a Chakra UI Flex. Numeric value indicates allowable shrinkage; Chakra UI/React are dependencies.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/flex-and-grid.mdx#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex>\\n  <Box flexShrink=\"0\" />\\n  <Box flexShrink=\"1\" />\\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Disabling Recipe Styles with the unstyled Prop (TSX)\nDESCRIPTION: Example demonstrating the use of the `unstyled` boolean prop on the root component (`CheckboxRoot`) created via `createSlotRecipeContext`. When `unstyled` is true, it prevents the application of any styles defined in the associated slot recipe, allowing for completely custom styling.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/slot-recipes.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n```tsx title=\"checkbox.tsx\" /unstyled/\n<CheckboxRoot unstyled>\n  <CheckboxControl />\n  <CheckboxLabel />\n</CheckboxRoot>\n```\n```\n\n----------------------------------------\n\nTITLE: Targeting Child Elements in Chakra UI\nDESCRIPTION: Demonstrates how to target and style child elements using the css prop.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/conditional-styles.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n<Box\n  css={{\n    \"& > *\": { margin: \"2\" },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Breakpoints in Chakra UI Theme (TypeScript)\nDESCRIPTION: This TypeScript code snippet demonstrates how to define custom breakpoints within a Chakra UI theme configuration. It uses `defineConfig` to create a configuration object specifying new breakpoints (`tablet`, `desktop`, `wide`) with their corresponding pixel values. The `createSystem` function then integrates this configuration with the default Chakra UI configuration. Dependencies include `@chakra-ui/react`.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/customization/breakpoints.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createSystem, defaultConfig, defineConfig } from \"@chakra-ui/react\"\n\nconst config = defineConfig({\n  theme: {\n    breakpoints: {\n      tablet: \"992px\",\n      desktop: \"1200px\",\n      wide: \"1400px\",\n    },\n  },\n})\n\nexport default createSystem(defaultConfig, config)\n\n```\n\n----------------------------------------\n\nTITLE: Setting Scroll Padding in Chakra UI JSX\nDESCRIPTION: Illustrates applying scroll padding using the `scrollPadding*` props. This example uses `scrollPaddingY=\"2\"` on a scrollable `Box` to add padding space (using theme spacing scale value '2') on the block axis (top and bottom) inside the scroll container's edge.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/interactivity.mdx#2025-04-23_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<Box maxH=\"100px\" overflowY=\"auto\" scrollPaddingY=\"2\">\n  Scrollbar Container with block padding\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Creating Biaxial Line Chart in React\nDESCRIPTION: Create a chart with two Y-axes by using the yAxisId prop in the series object and YAxis components.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/line-chart.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<YAxis yAxisId=\"left\" />\n<YAxis yAxisId=\"right\" orientation=\"right\" />\n```\n\n----------------------------------------\n\nTITLE: Setting List Style Position with Chakra UI - JSX\nDESCRIPTION: Shows the use of the listStylePosition prop to set the position of list markers inside the content box for a Chakra UI Box component. This prop allows for placement customization, with \\\"inside\\\" rendering markers within the element's box. Requires Chakra UI and JSX, and accepts standard CSS list-style-position values.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/list.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx\n<Box as=\\\"ul\\\" listStylePosition=\\\"inside\\\">\\n  <li>Item 1</li>\\n  <li>Item 2</li>\\n  <li>Item 3</li>\\n</Box>\\n```\n```\n\n----------------------------------------\n\nTITLE: Truncating Single-Line Text with Chakra UI in JSX\nDESCRIPTION: This snippet demonstrates using the boolean `truncate` prop on a Chakra UI `<Text>` component to truncate overflowing text on a single line with an ellipsis. It primarily controls `text-overflow`, `overflow`, and `white-space` CSS properties.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/typography.mdx#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Text truncate>Lorem ipsum dolor sit amet...</Text>\n```\n\n----------------------------------------\n\nTITLE: Applying Gradient to Line Chart in React\nDESCRIPTION: Create a gradient effect for the line in a chart using the Chart.Gradient component and applying it to the Line component.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/line-chart.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<defs>\n  <Chart.Gradient id=\"custom-gradient\" stops={[]} />\n</defs>\n<Line stroke=\"url(#custom-gradient)\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Hover Card Component in React\nDESCRIPTION: This snippet shows how to import the HoverCard component from Chakra UI in a React application.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/hover-card.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { HoverCard } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Applying Logical Padding with css() in Chakra UI - JavaScript/JSX\nDESCRIPTION: Shows how to programmatically apply logical padding (paddingStart/paddingEnd) using the css() utility with both full and shorthand property names. Dependencies: Chakra UI's css function, likely in a non-component context or for custom styling, and proper theme setup. Key parameters: 'paddingStart', 'ps', 'paddingEnd', 'pe', values as theme tokens or CSS sizes. Outputs a <div> with logical padding applied based on text direction. Intended for RTL/LTR language compatibility.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/spacing.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<div className={css({ paddingStart: '8' })} />\\n<div className={css({ ps: '8' })} /> // shorthand\\n\\n<div className={css({ paddingEnd: '8' })} />\\n<div className={css({ pe: '8' })} /> // shorthand\n```\n\n----------------------------------------\n\nTITLE: Using Semantic Tokens for Dark Mode in Chakra UI\nDESCRIPTION: This example shows how to use Chakra UI's semantic tokens to automatically apply appropriate styles for both light and dark modes.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/dark-mode.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Box bg=\"bg.subtle\">\n  <Text>Hello</Text>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Setting Box Shadow Color - Chakra UI - JavaScript/JSX\nDESCRIPTION: This snippet shows the use of the 'shadowColor' prop in conjunction with the 'shadow' prop to customize the box shadow color for a Box component in Chakra UI. The 'shadowColor' prop maps to the CSS '--shadow-color' variable, allowing dynamic control over shadow appearance. Requires Chakra UI setup and the Box component; 'shadowColor' should be a valid color string or token.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/effects.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Box shadow=\\\"60px -16px var(--shadow-color)\\\" shadowColor=\\\"red\\\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Line Height with Chakra UI in JSX\nDESCRIPTION: These snippets illustrate setting the line height of a Chakra UI `<Text>` component using the `lineHeight` prop. Examples include a hardcoded unitless value ('1.5') and a theme token ('tall') from the `lineHeights` category.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/typography.mdx#2025-04-23_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n// hardcoded values\n<Text lineHeight=\"1.5\">Hello World</Text>\n\n// token values\n<Text lineHeight=\"tall\">Hello World</Text>\n```\n\n----------------------------------------\n\nTITLE: Using Status.Root with Status.Indicator - Chakra UI - TypeScript\nDESCRIPTION: Shows how to utilize Chakra UI's Status.Root and Status.Indicator components in a React TypeScript application. Status.Root acts as a wrapper, while Status.Indicator represents the visual status cue. Accepts children components and can be extended with additional props (such as size), with no required parameters for basic usage. Expects to be placed within a Chakra UI provider context for styling.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/status.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Status.Root>\n  <Status.Indicator />\n</Status.Root>\n```\n\n----------------------------------------\n\nTITLE: Integrating Chakra UI Link with Next.js Routing in JSX\nDESCRIPTION: Shows how to compose the Chakra UI Link component with Next.js routing using the asChild prop.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/link.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link as ChakraLink } from \"@chakra-ui/react\"\nimport NextLink from \"next/link\"\n\nconst Demo = () => {\n  return (\n    <ChakraLink asChild>\n      <NextLink href=\"/about\">Click here</NextLink>\n    </ChakraLink>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Transition Props with Chakra UI in JSX\nDESCRIPTION: Demonstrates basic use of the transition prop on Chakra UI's Box component. The first snippet uses a hardcoded CSS value to transition the background color on hover, while the second showcases a Chakra UI token shortcut (\\\"backgrounds\\\"). No external dependencies are needed beyond Chakra UI. Inputs include component props such as bg and transition; output is a Box component that animates its background color when hovered.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/transitions.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// hardcoded value\\n<Box bg=\\\"red.400\\\" _hover={{ bg: \\\"red.500\\\" }} transition=\\\"background 0.2s ease-in-out\\\">\\n  Hover me\\n</Box>\\n\\n// shortcut value\\n<Box bg=\\\"red.400\\\" _hover={{ bg: \\\"red.500\\\" }} transition=\\\"backgrounds\\\">\\n  Hover me\\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Placing a Grid Item in Both Axes with placeSelf Prop - Chakra UI - JSX\nDESCRIPTION: Demonstrates the use of placeSelf prop on a Box to control both block and inline axis placement for a single item inside a grid. The value should be a CSS place-self value. Chakra UI and React are dependencies.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/flex-and-grid.mdx#2025-04-23_snippet_27\n\nLANGUAGE: jsx\nCODE:\n```\n<Box display=\"grid\">\\n  <Box placeSelf=\"center\">Item 1</Box>\\n  <Box>Item 2</Box>\\n  <Box>Item 3</Box>\\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Color Tokens in Chakra UI Box Component\nDESCRIPTION: Demonstrates how to use a custom color token in a Chakra UI Box component. This example applies the brand.100 custom color to the background.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/blog/03-building-consistent-uis-with-design-tokens.mdx#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Box bg=\"brand.100\">This Box uses a custom token</Box>\n```\n\n----------------------------------------\n\nTITLE: Setting Text Decoration with Chakra UI in JSX\nDESCRIPTION: This snippet demonstrates applying text decoration (like underline) to a Chakra UI `<Text>` component using the `textDecoration` prop (or its alias `textDecor`). It maps to the `text-decoration` CSS property.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/typography.mdx#2025-04-23_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n<Text textDecoration=\"underline\">Hello World</Text>\n```\n\n----------------------------------------\n\nTITLE: Using Chakra Factory as a Function in JSX\nDESCRIPTION: This snippet shows how to use the chakra function to convert a native element into a component that accepts style props.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/chakra-factory.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst Link = chakra(\"a\")\n\nfunction Example() {\n  return <Link bg=\"red.200\" href=\"https://chakra-ui.com\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Justifying Content in Flex Layout with justify Alias - Chakra UI Flex - JSX\nDESCRIPTION: Shows the use of justify prop, which aliases to justifyContent, on Chakra UI's Flex component for main axis alignment. Value is typical CSS alignment keyword. Chakra UI/React are dependencies.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/flex-and-grid.mdx#2025-04-23_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex justify=\"center\">\\n  <Box>Item 1</Box>\\n  <Box>Item 2</Box>\\n  <Box>Item 3</Box>\\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Highlight Component in React\nDESCRIPTION: Demonstrates the basic usage of the Highlight component to highlight a substring within text.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/highlight.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Highlight query=\"Hello\">Hello World</Highlight>\n```\n\n----------------------------------------\n\nTITLE: Creating Chakra UI Styling Engine from Theme Config in TypeScript\nDESCRIPTION: Shows the fundamental call to createSystem with defaultConfig and custom config, returning the styling engine object. This exported engine supplies all token, css, and style helpers for further use. Dependencies: @chakra-ui/react, TypeScript.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/overview.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nconst system = createSystem(defaultConfig, config)\n\n```\n\n----------------------------------------\n\nTITLE: Using Custom Breakpoints in Responsive Styles with Chakra UI\nDESCRIPTION: Demonstrates how to use the custom breakpoints in responsive styles. This example sets a base font size and a different font size at the 4xl breakpoint.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/guides/theming-custom-breakpoints.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Box fontSize={{ base: \"sm\", \"4xl\": \"lg\" }}>Hello world</Box>\n```\n\n----------------------------------------\n\nTITLE: Using Slider.Thumbs for Multiple Thumbs in Chakra UI (React, TSX)\nDESCRIPTION: This concise snippet demonstrates the use of the 'Slider.Thumbs' component to render all thumbs and hidden inputs at once, removing the need for explicit rendering of each one. It simplifies multi-thumb range sliders and is ideal when further customization of each thumb is not required. The slider context from Chakra UI is necessary for this to function.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/slider.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Slider.Thumbs />\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Tooltip in React Line Chart\nDESCRIPTION: Create a custom tooltip component to replace the default Chart.Tooltip in a line chart.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/line-chart.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nfunction CustomTooltip(props: TooltipProps<string, string>) {\n  const { active, payload, label } = props\n  if (!active || !payload || payload.length === 0) return null\n\n  return <Box>{/* Your custom tooltip content */}</Box>\n}\n```\n\n----------------------------------------\n\nTITLE: Aligning Grid Items with alignItems Prop - Chakra UI - JSX\nDESCRIPTION: Demonstrates using the alignItems prop on a Box displayed as grid to vertically align items. Accepts standard CSS align-items values. Chakra UI and React required.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/flex-and-grid.mdx#2025-04-23_snippet_23\n\nLANGUAGE: jsx\nCODE:\n```\n<Box display=\"grid\" alignItems=\"center\">\\n  <Box>Item 1</Box>\\n  <Box>Item 2</Box>\\n  <Box>Item 3</Box>\\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Configuring Box Decoration Break with Chakra UI in JSX\nDESCRIPTION: Demonstrates setting the boxDecorationBreak prop on a Box to define how background, padding, or border rendering behaves when a box wraps across lines or columns. Uses a gradient background to show visual effect. Chakra UI is required; prop value like 'clone' maps to CSS 'box-decoration-break'.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/layout.mdx#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Box bgImage=\\\"linear-gradient(red, blue)\\\" boxDecorationBreak=\\\"clone\\\">\\n  Chakra is <br /> great!\\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Width in Chakra UI JSX\nDESCRIPTION: Demonstrates setting the maximum width of a Chakra UI Box component using the `maxWidth` and shorthand `maxW` props. Examples show both hardcoded pixel/rem values and theme token values (e.g., 'xl', '2xl') mapped to the theme's `sizes` scale. Requires the Chakra UI library and the Box component.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/sizing.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// hardcoded values\n<Box maxWidth=\"640px\" />\n<Box maxW=\"4rem\" /> // shorthand\n\n// token values\n<Box maxWidth=\"xl\" />\n<Box maxW=\"2xl\" /> // shorthand\n```\n\n----------------------------------------\n\nTITLE: Importing Image Component from Chakra UI in JavaScript\nDESCRIPTION: This snippet shows how to import the Image component from Chakra UI. It's the first step in using the component in your React application.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/image.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Image } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Motion Styles in JSX\nDESCRIPTION: Example showing how to define and use motion styles with the new animation system in Chakra UI. Demonstrates custom animation definitions with transformOrigin and data-placement attributes.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/packages/react/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { defineMotionStyles } from \"@chakra-ui/react\"\n\nexport const motionStyles = defineMotionStyles({\n  \"slide-fade-in\": {\n    value: {\n      transformOrigin: \"var(--transform-origin)\",\n      animationDuration: \"fast\",\n      \"&[data-placement^=top]\": {\n        animationName: \"slide-from-top, fade-in\",\n      },\n      \"&[data-placement^=bottom]\": {\n        animationName: \"slide-from-bottom, fade-in\",\n      },\n      \"&[data-placement^=left]\": {\n        animationName: \"slide-from-left, fade-in\",\n      },\n      \"&[data-placement^=right]\": {\n        animationName: \"slide-from-right, fade-in\",\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using CloseButton Component in JSX\nDESCRIPTION: This snippet demonstrates the basic usage of the CloseButton component in a React application.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/close-button.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<CloseButton />\n```\n\n----------------------------------------\n\nTITLE: Hiding Elements Below a Breakpoint using hideBelow with Chakra UI Box Component - JSX\nDESCRIPTION: Illustrates usage of the 'hideBelow' prop on Chakra UI's <Box> to conditionally hide the element below the specified breakpoint. Prerequisites include Chakra UI and React setup. This approach ensures the <Box> is only visible on 'md' (medium) screens and up, with 'display' set to flex, supporting precise responsive layouts.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/display.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx\\n<Box display=\\\"flex\\\" hideBelow=\\\"md\\\" />\\n```\n```\n\n----------------------------------------\n\nTITLE: Applying Color Contrast Styles in Chakra UI\nDESCRIPTION: Shows how to apply styles based on the user's color contrast preference using the _highContrast modifier.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/conditional-styles.mdx#2025-04-23_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n<Box bg={{ base: \"white\", _highContrast: \"black\" }}>Hello</Box>\n```\n\n----------------------------------------\n\nTITLE: Applying a Custom Color Palette to Components in Chakra UI (TSX)\nDESCRIPTION: Example of using the `colorPalette` prop on a Chakra UI `Button` component. Setting `colorPalette=\"brand\"` automatically applies the corresponding semantic tokens (like `brand.solid`, `brand.contrast`) defined in the theme to style the button appropriately.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/customization/colors.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\n<Button colorPalette=\"brand\">Click me</Button>\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Font Size with Chakra UI in JSX\nDESCRIPTION: These snippets illustrate setting the font size on a Chakra UI `<Text>` component using the `fontSize` prop. Examples show using both hardcoded CSS values (like '12px', '10rem') and theme-defined token values (like 'xs', '4xl', '5xl') from the `fonts` category.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/typography.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// hardcoded values\n<Text fontSize=\"12px\">Hello World</Text>\n<Text fontSize=\"10rem\">Hello World</Text>\n\n// token values\n<Text fontSize=\"xs\">Hello World</Text>\n<Text fontSize=\"4xl\">Hello World</Text>\n<Text fontSize=\"5xl\">Hello World</Text>\n```\n\n----------------------------------------\n\nTITLE: Configuring Item Order in Flex Layout with order Prop - Chakra UI - JSX\nDESCRIPTION: Shows how to use the order prop to specify the visual order of flex items within a Chakra UI Flex container. Accepts a number for the order. Requires Chakra UI.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/flex-and-grid.mdx#2025-04-23_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex>\\n  <Box order=\"0\" />\\n  <Box order=\"1\" />\\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: CheckboxCard Component Implementation\nDESCRIPTION: Shows the implementation of the new CheckboxCard component for rendering a card with checkbox functionality.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/packages/react/CHANGELOG.md#2025-04-23_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<CheckboxCard.Root>\n  <CheckboxCard.Control>\n    <Stack gap=\"0\" flex=\"1\">\n      <CheckboxCard.Label>Checkbox</CheckboxCard.Label>\n      <Text>Some description</Text>\n    </Stack>\n\n    <CheckboxCard.HiddenInput />\n    <CheckboxCard.Indicator />\n  </CheckboxCard.Control>\n</CheckboxCard.Root>\n```\n\n----------------------------------------\n\nTITLE: Setting Accent Color in Chakra UI JSX\nDESCRIPTION: Demonstrates setting the accent color for browser-generated UI controls like checkboxes using the `accentColor` prop on a `chakra.input` component. Examples show using both a hardcoded hex value and a theme token value.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/interactivity.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// hardcoded\n<label>\n  <chakra.input type=\"checkbox\" accentColor=\"#3b82f6\" />\n</label>\n\n// token value\n<label>\n  <chakra.input type=\"checkbox\" accentColor=\"blue.500\" />\n</label>\n```\n\n----------------------------------------\n\nTITLE: Controlling Background Repeat Behavior in Chakra UI (JSX)\nDESCRIPTION: Shows how bgRepeat can be used on a Chakra UI <Box> to specify if and how a background image repeats. Requires Chakra UI. The bgRepeat property accepts values like 'no-repeat', 'repeat', etc., in conjunction with bgImage to adjust image tiling behavior.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/background.mdx#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Box bgRepeat=\"no-repeat\" bgImage=\"url(...)\" />\n```\n\n----------------------------------------\n\nTITLE: Justifying Grid Items with justifyItems Prop - Chakra UI - JSX\nDESCRIPTION: Demonstrates aligning grid items using the justifyItems prop on a Box displayed as grid. Value must be standard CSS justify-items ('start', 'center', etc.). Dependencies: Chakra UI, React.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/flex-and-grid.mdx#2025-04-23_snippet_20\n\nLANGUAGE: jsx\nCODE:\n```\n<Box display=\"grid\" justifyItems=\"center\">\\n  <Box>Item 1</Box>\\n  <Box>Item 2</Box>\\n  <Box>Item 3</Box>\\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Closed Component Usage of Pin Input in React\nDESCRIPTION: This snippet shows how to use the PinInput component as a closed component with the mask prop.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/pin-input.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<PinInput mask />\n```\n\n----------------------------------------\n\nTITLE: Creating Dashed Line in Chart using React\nDESCRIPTION: Create a dashed line in a chart by setting the strokeDasharray property in the series object.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/line-chart.mdx#2025-04-23_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nconst chart = useChart({\n  data: [\n    { windows: 186, mac: 165, month: \"January\" },\n    //...\n  ],\n  series: [\n    { name: \"windows\", color: \"teal.solid\", strokeDasharray: \"5 5\" },\n    { name: \"mac\", color: \"purple.solid\" },\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Using Sibling Selectors in Chakra UI\nDESCRIPTION: Demonstrates how to style an element based on its sibling's state using the peer class and _peerHover modifier.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/conditional-styles.mdx#2025-04-23_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\n<div>\n  <p className=\"peer\">Hover me</p>\n  <Box _peerHover={{ bg: \"red.500\" }}>I'll change by bg</Box>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Color Tokens in Chakra UI Components (TSX)\nDESCRIPTION: Illustrates how to apply a custom color token ('brand.100') defined in the theme to a Chakra UI component (`Box`) using the `bg` prop. This sets the background color of the Box component based on the theme configuration.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/customization/colors.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\n<Box bg=\"brand.100\" />\n```\n```\n\n----------------------------------------\n\nTITLE: Integrating Custom Theme in Chakra UI Provider\nDESCRIPTION: Sets up a Provider component that uses the custom theme system and wraps it with ChakraProvider. This component includes ColorModeProvider to support color mode functionality.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/guides/theming-custom-colors.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\"\n\nimport { system } from \"@/components/theme\"\nimport {\n  ColorModeProvider,\n  type ColorModeProviderProps,\n} from \"@/components/ui/color-mode\"\nimport { ChakraProvider } from \"@chakra-ui/react\"\n\nexport function Provider(props: ColorModeProviderProps) {\n  return (\n    <ChakraProvider value={system}>\n      <ColorModeProvider {...props} />\n    </ChakraProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Aligning Flex Content Along Cross Axis with alignContent Prop - Chakra UI - JSX\nDESCRIPTION: Shows using the alignContent prop on the Box component set to flex for aligning content along the cross axis. Takes typical CSS align-content values. Chakra UI/React needed.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/flex-and-grid.mdx#2025-04-23_snippet_21\n\nLANGUAGE: jsx\nCODE:\n```\n<Box display=\"flex\" alignContent=\"center\">\\n  <Box>Item 1</Box>\\n  <Box>Item 2</Box>\\n  <Box>Item 3</Box>\\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Specifying Auto-Generated Grid Rows with gridAutoRows - Chakra UI - JSX\nDESCRIPTION: Shows how to use the gridAutoRows prop to set the height for automatically created rows in a Chakra UI grid. The prop expects a CSS length value. Chakra UI/React dependencies apply.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/flex-and-grid.mdx#2025-04-23_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\n<Box display=\"grid\" gridTemplateRows=\"200px\" gridAutoRows=\"120px\">\\n  <Box>Item 1</Box>\\n  <Box>Item 2</Box>\\n  <Box>Item 3</Box>\\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Chakra UI Utility (`borderX`) with Enum Values in TypeScript\nDESCRIPTION: This snippet shows how to define a custom utility `borderX` with a shorthand `bx` using `defineConfig` in Chakra UI. It accepts only specific string values (\"1px\", \"2px\", \"4px\") for `borderInlineWidth` and automatically applies a border color using the `token` function within the `transform` method.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/customization/utilities.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createSystem, defaultConfig, defineConfig } from \"@chakra-ui/react\"\n\nconst customConfig = defineConfig({\n  utilities: {\n    extend: {\n      borderX: {\n        values: [\"1px\", \"2px\", \"4px\"],\n        shorthand: \"bx\",\n        transform(value, { token }) {\n          return {\n            borderInlineWidth: value,\n            borderColor: token(\"colors.red.200\"),\n          }\n        },\n      },\n    },\n  },\n})\n\nconst system = createSystem(defaultConfig, customConfig)\n```\n\n----------------------------------------\n\nTITLE: Importing the Table Component in React (Chakra UI)\nDESCRIPTION: Imports the `Table` component from the `@chakra-ui/react` library. This step is necessary to make the Table component and its sub-components available for use within a React application.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/table.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Table } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Importing CloseButton from Chakra UI in JSX\nDESCRIPTION: This snippet shows how to import the CloseButton component from the Chakra UI library.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/close-button.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { CloseButton } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Defining Font Size Tokens in Chakra UI Theme (TypeScript)\nDESCRIPTION: Shows how to define font size tokens (e.g., `sm`) using `defineTokens`. These tokens represent text size values as strings and are used for the `font-size` CSS property. The defined tokens are added to the theme via `createSystem`.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/tokens.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineTokens } from \"@chakra-ui/react\"\n\nconst tokens = defineTokens({\n  fontSizes: {\n    sm: { value: \"12px\" },\n  },\n})\n\nexport default createSystem({\n  theme: { tokens },\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Font Weight with Chakra UI in JSX\nDESCRIPTION: These snippets demonstrate setting the font weight of a Chakra UI `<Text>` component using the `fontWeight` prop. Examples include a hardcoded numeric value ('600') and a theme token ('semibold') from the `fontWeights` category.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/typography.mdx#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// hardcoded values\n<Text fontWeight=\"600\">Hello World</Text>\n\n// token values\n<Text fontWeight=\"semibold\">Hello World</Text>\n```\n\n----------------------------------------\n\nTITLE: Applying Dark Appearance with Theme Component (JSX)\nDESCRIPTION: This snippet demonstrates how to use the Theme component from Chakra UI to force its children to adopt a dark appearance. The 'appearance' prop accepts either 'light' or 'dark' as values to control the mode. Key parameter: 'appearance'. The output is that all descendant components are rendered with the specified theme appearance, regardless of the global setting.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/theme.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Theme appearance=\"dark\">\n  <div />\n</Theme>\n```\n\n----------------------------------------\n\nTITLE: Styling File Input Button in Chakra UI\nDESCRIPTION: Demonstrates how to style the file input button using the _file modifier.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/conditional-styles.mdx#2025-04-23_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<chakra.input\n  type=\"file\"\n  _file={{ bg: \"gray.500\", px: \"4\", py: \"2\", marginEnd: \"3\" }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Word Breaking Rules with Chakra UI in JSX\nDESCRIPTION: This snippet demonstrates controlling how words are broken when text overflows its container within a Chakra UI `<Text>` component using the `wordBreak` prop (e.g., 'break-all'). It maps to the `word-break` CSS property.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/typography.mdx#2025-04-23_snippet_23\n\nLANGUAGE: jsx\nCODE:\n```\n<Text wordBreak=\"break-all\">Hello World</Text>\n```\n\n----------------------------------------\n\nTITLE: Applying Virtual Color Placeholders in Chakra UI Components (JavaScript)\nDESCRIPTION: Demonstrates how to apply the colorPalette property to a Chakra UI <Box> component for dynamic color theming. Requires Chakra UI installed and set up. The code sets the colorPalette to 'blue', uses virtual background keys for base and hover states, and outputs a styled box with theme-aware colors. Inputs are standard props to the Box component; outputs are UI elements with correctly themed backgrounds.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/virtual-color.mdx#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n<Box\n  colorPalette=\"blue\"\n  bg={{ base: \"colorPalette.100\", _hover: \"colorPalette.200\" }}\n>\n  Hello World\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Controlling Background Attachment with Chakra UI (JSX)\nDESCRIPTION: Demonstrates how to set the background attachment property on a Chakra UI <Box> component using the bgAttachment prop. Requires Chakra UI as a dependency and is used to create fixed or scrollable background images. The bgImage attribute specifies the image source, and bgAttachment accepts values like 'fixed' or 'scroll' to determine behavior.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/background.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Box bgAttachment=\"fixed\" bgImage=\"url(...)\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Horizontal Border Spacing (X) on Chakra UI Table - JSX\nDESCRIPTION: Shows how to use the Chakra UI 'borderSpacingX' prop to set the horizontal border-spacing CSS property for a table. Requires Chakra UI and a React environment. Key parameter is 'borderSpacingX', which determines horizontal spacing between table columns using a spacing value (here, '2'). Output is a table with customized horizontal spacing between cells.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/tables.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<chakra.table borderSpacingX=\\\"2\\\">\\n  <tbody>\\n    <tr>\\n      <td>Cell 1</td>\\n      <td>Cell 2</td>\\n    </tr>\\n  </tbody>\\n</chakra.table>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Color Tokens in Chakra UI Theme Configuration\nDESCRIPTION: Creates a custom theme configuration with tokens for a brand color palette (50-950) and semanticTokens for solid, contrast, fg, muted, subtle, emphasized, and focusRing color keys. The system is then created using createSystem with the defined config.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/guides/theming-custom-colors.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = defineConfig({\n  theme: {\n    tokens: {\n      colors: {\n        brand: {\n          50: { value: \"#e6f2ff\" },\n          100: { value: \"#e6f2ff\" },\n          200: { value: \"#bfdeff\" },\n          300: { value: \"#99caff\" },\n          // ...\n          950: { value: \"#001a33\" },\n        },\n      },\n    },\n    semanticTokens: {\n      colors: {\n        brand: {\n          solid: { value: \"{colors.brand.500}\" },\n          contrast: { value: \"{colors.brand.100}\" },\n          fg: { value: \"{colors.brand.700}\" },\n          muted: { value: \"{colors.brand.100}\" },\n          subtle: { value: \"{colors.brand.200}\" },\n          emphasized: { value: \"{colors.brand.300}\" },\n          focusRing: { value: \"{colors.brand.500}\" },\n        },\n      },\n    },\n  },\n})\n\nexport const system = createSystem(defaultConfig, config)\n```\n\n----------------------------------------\n\nTITLE: Importing Text Component from Chakra UI in JSX\nDESCRIPTION: This snippet shows how to import the Text component from Chakra UI. It's the first step in using the component in your React application.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/text.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Text } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Using Logical Border Width Props for Directional Styling - Chakra UI - JavaScript/JSX\nDESCRIPTION: Snippets show how to use borderInlineStartWidth and borderInlineWidth (shorthand) to apply border widths based on content direction. Requires Chakra UI. Props accept width strings and adapt for RTL/LTR automatically.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/border.mdx#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Box borderInlineStartWidth=\"1px\" />\n<Box borderInlineWidth=\"1px\" /> // shorthand\n```\n\n----------------------------------------\n\nTITLE: Importing Toaster Components - Chakra UI with React (JSX)\nDESCRIPTION: Imports the `Toaster` component and the `toaster` utility from the local Chakra UI-based implementation. Dependencies include the `@/components/ui/toaster` module. This import is necessary for rendering toast notifications and programmatically creating them within a React app.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/toast.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Toaster, toaster } from \"@/components/ui/toaster\"\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Chakra UI Input Component in TypeScript\nDESCRIPTION: This snippet demonstrates the most basic usage of the Input component. It renders a default input field without any additional props or customization.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/input.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Input />\n```\n\n----------------------------------------\n\nTITLE: Defining Letter Spacing Tokens in Chakra UI Theme (TypeScript)\nDESCRIPTION: Shows how to define letter spacing tokens (e.g., `wide`) using `defineTokens`. These tokens represent the spacing between letters as strings and are used for the `letter-spacing` CSS property. The defined tokens are added to the theme via `createSystem`.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/tokens.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nconst tokens = defineTokens({\n  letterSpacings: {\n    wide: { value: \"0.1em\" },\n  },\n})\n\nexport default createSystem({\n  theme: { tokens },\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing CSS Variable Prefix - Chakra UI - TypeScript\nDESCRIPTION: This TypeScript snippet configures Chakra UI to use a custom prefix (\"sui\") for emitted CSS variables. Utilizing createSystem, defaultConfig, and defineConfig from @chakra-ui/react, it creates a configuration object with cssVarsPrefix set to 'sui'. This affects the naming convention of all generated CSS variables. Requires @chakra-ui/react and affects global CSS variable names, which can help prevent naming collisions.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/customization/css-variables.mdx#2025-04-23_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createSystem, defaultConfig, defineConfig } from \"@chakra-ui/react\"\n\nconst customConfig = defineConfig({\n  cssVarsPrefix: \"sui\",\n})\n\nexport const system = createSystem(defaultConfig, customConfig)\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum Width in Chakra UI JSX\nDESCRIPTION: Demonstrates setting the minimum width of a Chakra UI Box component using the `minWidth` and shorthand `minW` props. Examples show both hardcoded pixel/rem values and theme token values (represented by numbers mapped to the theme's `sizes` scale). Requires the Chakra UI library and the Box component.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/sizing.mdx#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// hardcoded values\n<Box minWidth=\"64px\" />\n<Box minW=\"4rem\" /> // shorthand\n\n// token values\n<Box minWidth=\"8\" />\n<Box minW=\"10\" /> // shorthand\n```\n\n----------------------------------------\n\nTITLE: Setting Animation Timing Function with Chakra UI in JSX\nDESCRIPTION: Illustrates controlling the animation's timing function using the animationTimingFunction prop along with the animation prop. Both props are set on a Chakra UI Box component, with timing function values (e.g., 'ease-in-out') coming from the theme. Ensures smooth animation transitions based on pre-defined theme easings.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/transitions.mdx#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Box animation=\\\"bounce\\\" animationTimingFunction=\\\"ease-in-out\\\" />\n```\n\n----------------------------------------\n\nTITLE: Controlling Flex Wrap with Flex Component Alias - Chakra UI - JSX\nDESCRIPTION: Demonstrates using the wrap prop, an alias for flexWrap, on the Chakra UI Flex component to allow flex items to wrap. Requires Chakra UI and React.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/flex-and-grid.mdx#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex wrap=\"wrap\">\\n  <Box>Item 1</Box>\\n  <Box>Item 2</Box>\\n  <Box>Item 3</Box>\\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Applying Drop Shadow Effect using the `dropShadow` Prop in JSX\nDESCRIPTION: Demonstrates applying a drop shadow effect using the `dropShadow` prop. This requires setting the `filter` prop to `auto`. The value corresponds to the CSS `drop-shadow()` function.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/filters.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Box filter=\"auto\" dropShadow=\"0px 0px 10px rgba(0, 0, 0, 0.5)\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Animation Delay with Chakra UI in JSX\nDESCRIPTION: Shows usage of the animationDelay prop to postpone animation start on the Chakra UI Box component. The delay references a token in the Chakra UI theme (e.g., 'fast'). Describes a way to sequence animation effects by controlling start timing.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/transitions.mdx#2025-04-23_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<Box animation=\\\"bounce\\\" animationDelay=\\\"fast\\\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Select Component in React\nDESCRIPTION: Shows how to import the Select component from Chakra UI.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/select.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Select } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Using Focus Ring Style Props in Chakra UI\nDESCRIPTION: Demonstrates the new focusRing and focusRingColor style props for easily styling the focus visible state of form controls.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/packages/react/CHANGELOG.md#2025-04-23_snippet_20\n\nLANGUAGE: jsx\nCODE:\n```\n<Box asChild focusRing=\"extend\" focusRingColor=\"pink.500\">\n  <input type=\"text\" />\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Basic Bleed Component Usage\nDESCRIPTION: Demonstrates the basic usage of the Bleed component wrapping a div element.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/bleed.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Bleed>\n  <div />\n</Bleed>\n```\n\n----------------------------------------\n\nTITLE: Setting Vertical Alignment with Chakra UI in JSX\nDESCRIPTION: This snippet demonstrates setting the vertical alignment of a Chakra UI `<Text>` component (useful when it behaves as an inline or table-cell element) using the `verticalAlign` prop (e.g., 'top'). It maps to the `vertical-align` CSS property.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/typography.mdx#2025-04-23_snippet_21\n\nLANGUAGE: jsx\nCODE:\n```\n<Text verticalAlign=\"top\">Hello World</Text>\n```\n\n----------------------------------------\n\nTITLE: CSS Variables Applied to Custom Root Selector - CSS\nDESCRIPTION: This CSS snippet shows the output of customizing Chakra UI's CSS variable root. CSS variables for Chakra UI colors are now applied to the \":where(html)\" selector as a result of the TypeScript configuration. The variables represent color tokens and will be used throughout the application for theming. Requires Chakra UI and corresponding configuration that sets cssVarsRoot.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/customization/css-variables.mdx#2025-04-23_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\n:where(html) {\n  --chakra-colors-gray-100: #e6f2ff;\n  --chakra-colors-gray-200: #bfdeff;\n  --chakra-colors-gray-300: #99caff;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Size Variant in Chakra UI Button (TSX)\nDESCRIPTION: Illustrates component usage of the extended button recipe with the newly added `xl` size. This requires that the preceding theme configuration has made the `xl` variant available in the Button's variants. The component expects `xl` to be present in the theme, and renders a button that inherits the defined size styling.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/customization/recipes.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Button size=\"xl\">Click me</Button>\n```\n\n----------------------------------------\n\nTITLE: Applying Invert Effect using the `invert` Prop in JSX\nDESCRIPTION: Demonstrates applying an invert effect using the `invert` prop. This requires the `filter` prop to be set to `auto`. The value specifies the proportion of the conversion (e.g., '40%').\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/filters.mdx#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Box filter=\"auto\" invert=\"40%\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Height using Hardcoded and Token Values in Chakra UI JSX\nDESCRIPTION: Demonstrates setting the height of a Chakra UI Box component using the `height` and shorthand `h` props. Examples show both hardcoded pixel/rem values and theme token values (represented by numbers mapped to the theme's `sizes` scale). Requires the Chakra UI library and the Box component.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/sizing.mdx#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n// hardcoded values\n<Box height=\"40px\" />\n<Box h=\"0.4rem\" /> // shorthand\n\n// token values\n<Box height=\"5\" />\n<Box h=\"5\" /> // shorthand\n```\n\n----------------------------------------\n\nTITLE: Conditional Bar Coloring and Labeling in Recharts\nDESCRIPTION: This snippet demonstrates how to conditionally color bars and add labels based on the data values in a Recharts bar chart.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/bar-chart.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Bar dataKey=\"views\">\n  <LabelList dataKey=\"views\" position=\"top\" />\n  {chart.data.map((item, index) => (\n    <Cell key={index} fill={item.views > 0 ? \"green\" : \"red\"} />\n  ))}\n</Bar>\n```\n\n----------------------------------------\n\nTITLE: Importing Menu Component in Chakra UI\nDESCRIPTION: This snippet shows how to import the Menu component from Chakra UI.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/menu.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Menu } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Basic Bar Segment Component Structure in Chakra UI\nDESCRIPTION: Shows the fundamental component structure for creating a bar segment chart, including the root, content container, value display, bar element, and label.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/bar-segment.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<BarSegment.Root>\n  <BarSegment.Content>\n    <BarSegment.Value />\n    <BarSegment.Bar />\n    <BarSegment.Label />\n  </BarSegment.Content>\n</BarSegment.Root>\n```\n\n----------------------------------------\n\nTITLE: Basic AspectRatio Component Usage with Iframe\nDESCRIPTION: Basic example of using the AspectRatio component to embed a YouTube video with a responsive aspect ratio.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/aspect-ratio.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<AspectRatio>\n  <iframe\n    title=\"naruto\"\n    src=\"https://www.youtube.com/embed/QhBnZ6NPOY0\"\n    allowFullScreen\n  />\n</AspectRatio>\n```\n\n----------------------------------------\n\nTITLE: Controlling Opacity - Chakra UI - JavaScript/JSX\nDESCRIPTION: This snippet illustrates the use of the 'opacity' prop on a Box component in Chakra UI to set its transparency. The 'opacity' prop is mapped directly to the CSS 'opacity' property and expects a value between 0 (fully transparent) and 1 (fully opaque). Requires Chakra UI and must be used within a valid React component.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/effects.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Box opacity=\\\"0.5\\\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Dots in Area Charts\nDESCRIPTION: Shows how to configure dot visualization in an Area Chart. Sets the dot's fill color to red with full opacity, while disabling active dots that appear on hover.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/area-chart.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Area dot={{ fill: \"red\", fillOpacity: 1 }} activeDot={false} />\n```\n\n----------------------------------------\n\nTITLE: Applying Color Opacity Directly in Chakra UI (TSX)\nDESCRIPTION: Demonstrates setting the background color of a Chakra UI `Text` component to the theme color `red.300` with 40% opacity using the shorthand `bg=\"red.300/40\"` syntax. The `color` prop is set to `white`. This relies on Chakra UI converting the syntax into a CSS `color-mix` function.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/color-opacity-modifier.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Text bg=\"red.300/40\" color=\"white\">\n  Hello World\n</Text>\n```\n\n----------------------------------------\n\nTITLE: Implementing Steps Component in Chakra UI\nDESCRIPTION: Shows the new Steps component implementation with improved accessibility using the tabs pattern and ARIA attributes.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/packages/react/CHANGELOG.md#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<Steps.Root defaultIndex={0} count={2}>\n  <Steps.List>\n    <Steps.Item index={0}>\n      <Steps.Trigger>\n        <Steps.Title>Step 1</Steps.Title>\n      </Steps.Trigger>\n      <Steps.Separator />\n    </Steps.Item>\n\n    <Steps.Item index={1}>\n      <Steps.Trigger>\n        <Steps.Title>Step 2</Steps.Title>\n      </Steps.Trigger>\n      <Steps.Separator />\n    </Steps.Item>\n  </Steps.List>\n\n  <Steps.Content index={0}>Step 1</Steps.Content>\n  <Steps.Content index={1}>Step 2</Steps.Content>\n  <Steps.CompleteContent>Complete</Steps.CompleteContent>\n</Steps.Root>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Semantic Tokens with Light/Dark Mode in Chakra UI (TypeScript)\nDESCRIPTION: Example of creating a custom semantic token `checkbox-border` within the theme's `semanticTokens.colors`. It defines different values for light (`_light`) and dark (`_dark`) modes using specific color values (e.g., `gray.200`, `gray.800`), allowing components to adapt their border color automatically based on the current color mode.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/customization/colors.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx title=\"theme.ts\"\nimport { createSystem, defaultConfig, defineConfig } from \"@chakra-ui/react\"\n\nconst customConfig = defineConfig({\n  theme: {\n    semanticTokens: {\n      colors: {\n        \"checkbox-border\": {\n          value: { _light: \"gray.200\", _dark: \"gray.800\" },\n        },\n      },\n    },\n  },\n})\n\nexport const system = createSystem(defaultConfig, customConfig)\n```\n```\n\n----------------------------------------\n\nTITLE: Importing the Steps Component in React/TSX\nDESCRIPTION: This snippet shows the necessary import statement to bring the `Steps` component into a React/TSX file from the `@chakra-ui/react` library. This is the first step required to use the component.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/steps.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Steps } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Explicitly Rendering Increment and Decrement Triggers in Chakra UI NumberInput in TSX\nDESCRIPTION: Shows the expanded form of NumberInput.Control where Increment and Decrement triggers are rendered explicitly as children. This approach allows for granular customization of input control behavior or style.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/number-input.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<NumberInput.Control>\n  <NumberInput.IncrementTrigger />\n  <NumberInput.DecrementTrigger />\n</NumberInput.Control>\n```\n\n----------------------------------------\n\nTITLE: Attaching Recipes to a Component with Chakra Factory in JSX\nDESCRIPTION: This example demonstrates how to attach a recipe (variants) to a component using the chakra function.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/chakra-factory.mdx#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst Card = chakra(\"div\", {\n  base: {\n    shadow: \"lg\",\n    rounded: \"lg\",\n    bg: \"white\",\n  },\n  variants: {\n    variant: {\n      outline: {\n        border: \"1px solid\",\n        borderColor: \"red.500\",\n      },\n      solid: {\n        bg: \"red.500\",\n        color: \"white\",\n      },\n    },\n  },\n})\n\n// usage: <Card variant=\"outline\" />\n```\n\n----------------------------------------\n\nTITLE: Updating Theme with Custom Text Styles in Chakra UI (JavaScript)\nDESCRIPTION: This code shows how to integrate previously defined text styles into a Chakra UI theme configuration by using createSystem and defineConfig from @chakra-ui/react. It imports textStyles from a local module and sets them as part of the theme object. The theme is then exported for use throughout the app. Dependencies include @chakra-ui/react and the custom text-styles module. Key parameters are the theme object and textStyles property.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/text-styles.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createSystem, defineConfig } from \"@chakra-ui/react\"\nimport { textStyles } from \"./text-styles\"\n\nconst config = defineConfig({\n  theme: {\n    textStyles,\n  },\n})\n\nexport default createSystem(defaultConfig, config)\n```\n\n----------------------------------------\n\nTITLE: Importing Chakra UI Chart Components for Sparkline\nDESCRIPTION: Demonstrates how to import the required components from Chakra UI charts and recharts to build sparkline charts. This includes the Chart, useChart hook from Chakra UI, and Area/AreaChart components from recharts.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/sparkline.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Chart, useChart } from \"@chakra-ui/charts\"\nimport { Area, AreaChart } from \"recharts\"\n```\n\n----------------------------------------\n\nTITLE: Generating Theme and Recipe Typings with Chakra CLI\nDESCRIPTION: Examples of using the 'chakra typegen' command to generate theme and recipe typings, including options for watching changes and generating strict types.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/get-started/cli.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Generate typings\nchakra typegen src/theme.ts\n\n# Watch for changes and rebuild\nchakra typegen src/theme.ts --watch\n\n# Generate strict types for props variant and size\nchakra typegen src/theme.ts --strict\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom System in Chakra UI Provider Component\nDESCRIPTION: This TypeScript React code shows how to use a custom system configuration in the Chakra UI Provider component. It imports the system from the theme file and passes it as a prop to ChakraProvider.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/cascade-layers.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ColorModeProvider } from \"@/components/ui/color-mode\"\nimport { ChakraProvider } from \"@chakra-ui/react\"\nimport { system } from \"./theme\"\n\nexport function Provider(props: React.PropsWithChildren) {\n  return (\n    <ChakraProvider value={system}>\n      <ColorModeProvider>{props.children}</ColorModeProvider>\n    </ChakraProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting White Space Handling with Chakra UI in JSX\nDESCRIPTION: This snippet shows how to control the handling of white space and line breaks within a Chakra UI `<Text>` component using the `whiteSpace` prop (e.g., 'nowrap'). It maps to the `white-space` CSS property.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/typography.mdx#2025-04-23_snippet_22\n\nLANGUAGE: jsx\nCODE:\n```\n<Text whiteSpace=\"nowrap\">Hello World</Text>\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Chakra UI Utility (`br`) in a React Component with TypeScript\nDESCRIPTION: This snippet shows how to apply the previously defined custom utility `br` to a `Box` component from Chakra UI. The value `\"sm\"` corresponds to a token defined in the theme's `radii` scale, applying the associated border-radius.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/customization/utilities.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Box } from \"@chakra-ui/react\"\n\nfunction App() {\n  return <Box br=\"sm\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Backdrop Grayscale Effect using `backdropGrayscale` Prop in JSX\nDESCRIPTION: Demonstrates applying a grayscale effect to the area behind an element using the `backdropGrayscale` prop. This requires the `backdropFilter` prop to be set to `auto`. The value specifies the proportion of the conversion.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/filters.mdx#2025-04-23_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n<Box backdropFilter=\"auto\" backdropGrayscale=\"64%\" />\n```\n\n----------------------------------------\n\nTITLE: Applying Focus Visible Ring to Button in Chakra UI\nDESCRIPTION: Shows how to use the focusVisibleRing prop to apply a focus ring that only appears on keyboard focus.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/focus-ring.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<chakra.button px=\"4\" py=\"2\" focusVisibleRing=\"outside\">\n  Click me\n</chakra.button>\n```\n\n----------------------------------------\n\nTITLE: Accessing Size Tokens in Chakra UI CSS Variables (JSX)\nDESCRIPTION: Illustrates how to access size tokens in Chakra UI using CSS variables. The example sets a size variable and applies it to both width and height of an element.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/css-variables.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Box css={{ \"--size\": \"sizes.10\" }}>\n  <p style={{ width: \"var(--size)\", height: \"var(--size)\" }}>Hello</p>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Applying Backdrop Invert Effect using `backdropInvert` Prop in JSX\nDESCRIPTION: Shows how to apply an invert effect to the area behind an element using the `backdropInvert` prop. This requires the `backdropFilter` prop to be set to `auto`. The value specifies the proportion of the conversion.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/filters.mdx#2025-04-23_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\n<Box backdropFilter=\"auto\" backdropInvert=\"40%\" />\n```\n\n----------------------------------------\n\nTITLE: Concise Switch.Control Usage in TSX\nDESCRIPTION: Shows a more concise way to use `Switch.Control` by omitting the child `Switch.Thumb`. The `Switch.Control` renders the `Switch.Thumb` internally by default, making this suitable when no thumb customization is needed.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/switch.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Switch.Control />\n```\n\n----------------------------------------\n\nTITLE: Importing Native Select Component in Chakra UI\nDESCRIPTION: This snippet shows how to import the NativeSelect component from Chakra UI.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/native-select.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { NativeSelect } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Controlling Pointer Events in Chakra UI JSX\nDESCRIPTION: Illustrates using the `pointerEvents` prop on a `Box` component to control how the element responds to pointer events. Setting it to 'none' prevents the element and its children from being the target of mouse events.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/interactivity.mdx#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Box pointerEvents=\"none\">Can't click me</Box>\n```\n\n----------------------------------------\n\nTITLE: Applying Divide Style Between Elements in Chakra UI - JavaScript/JSX\nDESCRIPTION: These snippets show the use of divideX and divideStyle props to apply custom styles (e.g., 'dashed') for borders between children. Parent <Box> is given both divide width and style; children inherit the styling automatically. Accepts valid CSS border style values.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/border.mdx#2025-04-23_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n<Box divideX=\"2px\" divideStyle=\"dashed\">\n  <Box>1</Box>\n  <Box>2</Box>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Progress Component in Chakra UI\nDESCRIPTION: This snippet demonstrates the basic structure of the Progress component, including Root, Track, Range, Label, and ValueText subcomponents.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/progress.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Progress.Root>\n  <Progress.Track>\n    <Progress.Range />\n  </Progress.Track>\n  <Progress.Label />\n  <Progress.ValueText />\n</Progress.Root>\n```\n\n----------------------------------------\n\nTITLE: Installing Testing Dependencies for React Components\nDESCRIPTION: This command installs the necessary dependencies for testing React components with Vitest or Jest, including jsdom for DOM simulation and various testing library packages.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/concepts/testing.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-dev vitest jsdom @testing-library/dom @testing-library/jest-dom @testing-library/react @testing-library/user-event\n```\n\n----------------------------------------\n\nTITLE: EmptyState Component Implementation\nDESCRIPTION: Demonstrates the new EmptyState component for rendering empty state messages with title, description, and action button.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/packages/react/CHANGELOG.md#2025-04-23_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<EmptyState.Root>\n  <EmptyState.Content>\n    <EmptyState.Indicator>\n      <HiTemplate />\n    </EmptyState.Indicator>\n\n    <VStack textAlign=\"center\">\n      <Text fontWeight=\"medium\">No template found</Text>\n      <Text fontSize=\"sm\" color=\"fg.muted\">\n        Try creating a new template with the button below\n      </Text>\n    </VStack>\n\n    <Button variant=\"outline\">\n      <HiPlus /> Create Template\n    </Button>\n  </EmptyState.Content>\n</EmptyState.Root>\n```\n\n----------------------------------------\n\nTITLE: Applying Logical Margin with Chakra UI - JavaScript/JSX\nDESCRIPTION: Demonstrates adding margin to logical axes (start/end) of a Chakra UI <Box> using marginStart/marginEnd or their shorthands (ms/me). Dependencies: React, Chakra UI. Accepts theme tokens or raw values, enabling RTL-aware margin. Ensures components are styled consistently regardless of text direction. Valid only for Chakra components inside a ThemeProvider.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/spacing.mdx#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Box marginStart=\\\"8\\\" />\\n<Box ms=\\\"8\\\" /> // shorthand\\n\\n<Box marginEnd=\\\"8\\\" />\\n<Box me=\\\"8\\\" /> // shorthand\n```\n\n----------------------------------------\n\nTITLE: Creating Gradient Fill for Sparkline Charts\nDESCRIPTION: Demonstrates how to create a gradient fill for sparkline charts using the Chart.Gradient component. This example shows defining gradient stops with color and opacity values to create a visual effect for the chart.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/sparkline.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<defs>\n  <Chart.Gradient\n    id=\"custom-gradient\"\n    stops={[\n      { offset: \"0%\", color: \"teal.solid\", opacity: 1 },\n      { offset: \"100%\", color: \"teal.solid\", opacity: 0.01 },\n    ]}\n  />\n</defs>\n```\n\n----------------------------------------\n\nTITLE: Simplified Checkbox Control Usage in React\nDESCRIPTION: Shows a more concise way to use the Checkbox.Control component when customization of the indicator is not needed.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/checkbox.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Checkbox.Control />\n```\n\n----------------------------------------\n\nTITLE: Applying Custom State Conditions in Chakra UI Components (TypeScript)\nDESCRIPTION: This example shows how to utilize the previously defined custom conditions (`_off`, `_on`) within Chakra UI components. `Box` components are styled conditionally based on their `data-state` attribute, applying a red background when `data-state=\"off\"` via the `_off` prop, and a green background when `data-state=\"on\"` via the `_on` prop. This relies on the custom theme configuration (including the conditions) being properly integrated into the application.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/customization/conditions.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx title=\"app.tsx\"\nimport { Box } from \"@chakra-ui/react\"\n\n<Box data-state=\"off\" _off={{ bg: \"red.500\" }} />\n<Box data-state=\"on\" _on={{ bg: \"green.500\" }} />\n```\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Chakra UI Utility (`borderX`) with Mapped Values in a React Component\nDESCRIPTION: This snippet shows applying the custom utility `borderX` (configured with mapped values like `\"small\"` and `\"medium\"`) to a `Box` component. The example uses `\"sm\"`, likely intended to correspond to the `\"small\"` key defined in the associated configuration, which maps to `borderTopWidth: \"2px\"`.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/customization/utilities.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Box } from \"@chakra-ui/react\"\n\nfunction App() {\n  return <Box borderX=\"sm\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Bar Segment Components from Chakra UI Charts\nDESCRIPTION: Demonstrates how to import the necessary components from the Chakra UI charts package to create bar segment visualizations.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/bar-segment.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { BarSegment, Chart, useChart } from \"@chakra-ui/charts\"\n```\n\n----------------------------------------\n\nTITLE: Formatting Chart Data\nDESCRIPTION: Demonstrates how to use the formatDate and formatNumber functions for formatting axis labels and tooltips.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/installation.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// format the x-axis labels\n<XAxis tickFormatter={chart.formatDate({ month: \"short\", day: \"2-digit\" })} />\n\n// format the y-axis labels\n<YAxis tickFormatter={chart.formatNumber({ maximumFractionDigits: 1 })} />\n```\n\n----------------------------------------\n\nTITLE: Generated CSS for Color Opacity Modifier (CSS)\nDESCRIPTION: Shows the resulting CSS generated by Chakra UI when using the color opacity modifier syntax (e.g., `bg=\"red.300/40\"`). It defines a CSS custom property (`--mix-background`) using `color-mix` to blend the specified theme color (`--colors-red-300`) with `transparent` at the given opacity (40%). The `background` property then uses this variable with a fallback to the original color.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/color-opacity-modifier.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.css-sxdf {\n  --mix-background: color-mix(in srgb, var(--colors-red-300) 40%, transparent);\n  background: var(--mix-background, var(--colors-red-300));\n  color: var(--colors-white);\n}\n```\n\n----------------------------------------\n\nTITLE: Applying General Filters using the `filter` Prop in JSX\nDESCRIPTION: Demonstrates applying visual effects like blur or color shift directly to an element using the `filter` prop on a Chakra UI `Box` component. This prop accepts standard CSS filter function values.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/filters.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Box filter=\"blur(5px)\" />\n<Box filter=\"grayscale(80%)\" />\n```\n\n----------------------------------------\n\nTITLE: Applying X-axis Scale Transform with Chakra UI Box Component in JSX\nDESCRIPTION: Shows how to scale a Chakra UI `Box` component only along the X-axis using the `scaleX` prop. This requires setting the `scale` prop to `auto` first. The value \"1.3\" increases the width of the element by 30%.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/transforms.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Box scale=\"auto\" scaleX=\"1.3\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Font Tokens in Chakra UI Theme (TypeScript)\nDESCRIPTION: Demonstrates defining font tokens using `defineTokens`. It shows examples using both a single string value (`body`) and an array of strings for font fallbacks (`heading`). These tokens are used for the `font-family` CSS property and added to the theme via `createSystem`.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/tokens.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineTokens } from \"@chakra-ui/react\"\n\nconst tokens = defineTokens({\n  fonts: {\n    body: { value: \"Inter, sans-serif\" },\n    heading: { value: [\"Roboto Mono\", \"sans-serif\"] },\n  },\n})\n\nexport default createSystem({\n  theme: { tokens },\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering Aspect Ratio Documentation Component in React\nDESCRIPTION: This React component snippet renders the `AspectRatioTokenDoc` component. This component is responsible for displaying the list of available aspect ratio tokens within the Chakra UI framework, likely fetching and formatting them for presentation in the documentation. It depends on React and the Chakra UI library/documentation system.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/aspect-ratios.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<AspectRatioTokenDoc />\n```\n\n----------------------------------------\n\nTITLE: Applying Backdrop Saturation Effect using `backdropSaturate` Prop in JSX\nDESCRIPTION: Illustrates applying a saturation effect to the area behind an element using the `backdropSaturate` prop. This requires the `backdropFilter` prop to be set to `auto`. The value adjusts the saturation level.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/filters.mdx#2025-04-23_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\n<Box backdropFilter=\"auto\" backdropSaturate=\"0.4\" />\n```\n\n----------------------------------------\n\nTITLE: Using Custom Size Tokens in Chakra UI Box Component - TSX\nDESCRIPTION: This snippet shows how to apply the custom size tokens defined in the Chakra UI theme to a Box component using TSX. You can assign the 'width' and 'height' props to the custom tokens like '1/7' and '2/7'. This requires the theme customization introduced previously and '@chakra-ui/react' as a dependency. The Box component will render with width and height set according to the defined token values. It must be wrapped in a Chakra UI Provider with the customized theme loaded.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/customization/sizes.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Box width=\"1/7\" height=\"2/7\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing Divider Color in Chakra UI Box (JSX)\nDESCRIPTION: This snippet uses both divideY and divideColor props on a Chakra UI Box component to add a 2px vertical divider with a custom color ('red.200'). The code requires Chakra UI and React, with divideY controlling divider width and divideColor specifying the divider color. It outputs stacked Box components with a colored divider between them.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/divide.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Box divideY=\\\"2px\\\" divideColor=\\\"red.200\\\">\\n  <Box>Item 1</Box>\\n  <Box>Item 2</Box>\\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Importing Grid Components in React with Chakra UI\nDESCRIPTION: This snippet shows how to import the Grid and GridItem components from Chakra UI in a React application.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/grid.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Grid, GridItem } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Setting Letter Spacing with Chakra UI in JSX\nDESCRIPTION: These snippets show how to adjust the letter spacing of a Chakra UI `<Text>` component using the `letterSpacing` prop. Examples use a hardcoded rem value ('0.1rem') and theme tokens ('tight', 'wide', etc.) from the `letterSpacings` category.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/typography.mdx#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n// hardcoded values\n<Text letterSpacing=\"0.1rem\">Hello World</Text>\n\n// token values\n<Text letterSpacing=\"tight\">Hello World</Text>\n<Text letterSpacing=\"wide\">Hello World</Text>\n<Text letterSpacing=\"wider\">Hello World</Text>\n<Text letterSpacing=\"widest\">Hello World</Text>\n```\n\n----------------------------------------\n\nTITLE: Setting Text Decoration Thickness with Chakra UI in JSX\nDESCRIPTION: This snippet shows how to set the thickness of the text decoration line (e.g., underline) on a Chakra UI `<Text>` component using the `textDecorationThickness` prop with a CSS length value like '1px'. It requires a `textDecoration` to be set and maps to the `text-decoration-thickness` CSS property.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/typography.mdx#2025-04-23_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\n<Text textDecoration=\"underline\" textDecorationThickness=\"1px\">\n  Hello World\n</Text>\n```\n\n----------------------------------------\n\nTITLE: Installing Chakra UI CLI Snippets with TypeScript Flag\nDESCRIPTION: Command to install Chakra UI CLI snippets with explicit TypeScript (tsx) flag. This allows users to specifically install jsx or tsx snippets regardless of project type detection.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/blog/03-chakra-3.3.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @chakra-ui/cli@latest snippet add [...components] --tsx\n```\n\n----------------------------------------\n\nTITLE: Setting Font Family with Chakra UI in JSX\nDESCRIPTION: This snippet demonstrates how to set the font family for a Chakra UI `<Text>` component using the `fontFamily` prop. The value 'mono' likely refers to a monospace font defined in the theme's `fonts` token category.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/typography.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Text fontFamily=\"mono\">Hello World</Text>\n```\n\n----------------------------------------\n\nTITLE: Implementing Semantic Color Tokens in Chakra UI v3\nDESCRIPTION: Demonstrates usage of semantic color tokens with subtle and solid color variations that automatically adapt to dark mode\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/blog/00-announcing-v3.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// A subtle version of red\n<Box bg=\"red.subtle\" color=\"red.fg\">\n  Welcome\n</Box>\n\n// A solid version of red\n<Box bg=\"red.solid\" color=\"red.contrast\">\n  Welcome\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Aligning Flex Content with align Alias - Chakra UI Flex - JSX\nDESCRIPTION: Demonstrates the use of the align prop, aliased to alignContent, on Chakra UI's Flex component. Aligns rows along the cross axis. Chakra UI, React required.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/flex-and-grid.mdx#2025-04-23_snippet_22\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex align=\"center\">\\n  <Box>Item 1</Box>\\n  <Box>Item 2</Box>\\n  <Box>Item 3</Box>\\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Defining Shadow Tokens in Chakra UI Theme (TypeScript)\nDESCRIPTION: Demonstrates defining shadow tokens using `defineTokens`. It includes examples using a single string value (`subtle`), a composite object detailing offset, blur, spread, and color (`accent`), and an array of string values for multiple shadows (`realistic`). These tokens are used for the `box-shadow` CSS property and added via `createSystem`.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/tokens.mdx#2025-04-23_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineTokens } from \"@chakra-ui/react\"\n\nconst tokens = defineTokens({\n  shadows: {\n    // string value\n    subtle: { value: \"0 1px 2px 0 rgba(0, 0, 0, 0.05)\" },\n    // composite value\n    accent: {\n      value: {\n        offsetX: 0,\n        offsetY: 4,\n        blur: 4,\n        spread: 0,\n        color: \"rgba(0, 0, 0, 0.1)\",\n      },\n    },\n    // multiple string values\n    realistic: {\n      value: [\n        \"0 1px 2px 0 rgba(0, 0, 0, 0.05)\",\n        \"0 1px 4px 0 rgba(0, 0, 0, 0.1)\",\n      ],\n    },\n  },\n})\n\nexport default createSystem({\n  theme: { tokens },\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Closed Checkbox Component to Project\nDESCRIPTION: Command to automatically add the closed Checkbox component to a project using Chakra UI CLI.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/checkbox.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx @chakra-ui/cli snippet add checkbox\n```\n\n----------------------------------------\n\nTITLE: Floating Elements with Chakra UI in JSX\nDESCRIPTION: Illustrates applying the float prop to a nested Box component, positioning it left within a parent. Includes a surrounding Text component for context. Chakra UI dependency required. Accepts values like 'left', 'right', or 'none' for the float property.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/layout.mdx#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Box>\\n  <Text>As much mud in the streets...</Text>\\n  <Box float=\\\"left\\\">Float me</Box>\\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Setting Flex Basis with Chakra UI - JSX\nDESCRIPTION: Demonstrates how to use the flexBasis prop to set the initial main size of flex items inside a Flex container with Chakra UI's JSX components. Requires Chakra UI and React. The prop accepts a CSS length value as its parameter; expected input is a percentage or absolute value, output is a flex item sized accordingly.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/flex-and-grid.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex>\\n  <Box flexBasis=\"25%\" />\\n  <Box flexBasis=\"25%\" />\\n  <Box flexBasis=\"50%\" />\\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Setting Background Size with Chakra UI (JSX)\nDESCRIPTION: Demonstrates the use of the bgSize prop to specify background image scaling on a Chakra UI <Box>. Requires Chakra UI. The bgSize parameter accepts values such as 'cover', 'contain', or CSS size values to control how the background image fits within its container.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/background.mdx#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Box bgSize=\"cover\" bgImage=\"url(...)\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Chakra UI and Storybook\nDESCRIPTION: Install the required dependencies for Chakra UI and Storybook using npm.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/get-started/frameworks/storybook.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @storybook/addon-themes @chakra-ui/react @emotion/react\n```\n\n----------------------------------------\n\nTITLE: Setting Column Count with Chakra UI in JSX\nDESCRIPTION: Shows how to use the columns prop to define the number of columns in a Box component. Chakra UI is required. Input is a numerical value (e.g., 2) that maps to the CSS columns property, controlling content flow in multiple columns.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/layout.mdx#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Box columns={2} />\n```\n\n----------------------------------------\n\nTITLE: Applying Backdrop Opacity Effect using `backdropOpacity` Prop in JSX\nDESCRIPTION: Demonstrates applying an opacity effect to the area behind an element using the `backdropOpacity` prop. This requires the `backdropFilter` prop to be set to `auto`. The value adjusts the opacity level.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/filters.mdx#2025-04-23_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\n<Box backdropFilter=\"auto\" backdropOpacity=\"0.4\" />\n```\n\n----------------------------------------\n\nTITLE: Using Built-in Animations in Chakra UI\nDESCRIPTION: Demonstrates how to use Chakra UI's built-in animations directly in components without JavaScript. This example combines slide and fade animations.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/packages/react/CHANGELOG.md#2025-04-23_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n<Box animationName=\"slide-from-top, fade-in\" animationDuration=\"fast\">\n  Slide from top and fade in\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Styling Placeholder Text in Chakra UI\nDESCRIPTION: Shows how to style the placeholder text of an input using the _placeholder modifier.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/conditional-styles.mdx#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<chakra.input\n  placeholder=\"Enter your name\"\n  _placeholder={{ color: \"gray.500\" }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Spacing Tokens in Chakra UI Theme (TypeScript)\nDESCRIPTION: Example of defining spacing tokens (e.g., `gutter`) using `defineTokens`. These tokens represent margin/padding values as strings and are typically used in CSS properties like `margin`, `padding`, `gap`, `top`, `right`, `bottom`, `left`, etc. The defined tokens are added to the theme via `createSystem`.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/tokens.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineTokens } from \"@chakra-ui/react\"\n\nconst tokens = defineTokens({\n  spacing: {\n    gutter: { value: \"12px\" },\n  },\n})\n\nexport default createSystem({\n  theme: { tokens },\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering Chakra UI Semantic Tokens Documentation with React\nDESCRIPTION: This JSX snippet employs the `<ColorSemanticTokenDoc />` component, likely a custom React component, to render documentation for Chakra UI's semantic color tokens. The component is responsible for retrieving and displaying these specific tokens, often used for theme-aware styling.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/colors.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ColorSemanticTokenDoc />\n```\n\n----------------------------------------\n\nTITLE: Setting Scroll Snap Margins in Chakra UI JSX\nDESCRIPTION: Demonstrates applying scroll snap margins using the `scrollSnapMargin*` props. This example uses `scrollSnapMarginY=\"2\"` on a scrollable `Box` to set the margin on the block axis (top and bottom) that defines the scroll snap area.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/interactivity.mdx#2025-04-23_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<Box maxH=\"100px\" overflowY=\"auto\" scrollSnapMarginY=\"2\">\n  Scrollbar Container with block padding\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Configuring Chakra UI Theming System with cssVarsPrefix in TypeScript\nDESCRIPTION: Demonstrates how to set the cssVarsPrefix property using defineConfig, customizing the prefix for generated CSS variables (e.g., --ck-color-*). Useful for CSS encapsulation and isolation. Dependencies are @chakra-ui/react and TypeScript; takes a prefix string and outputs a new system instance.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/overview.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = defineConfig({\n  cssVarsPrefix: \"ck\",\n})\n\nexport default createSystem(defaultConfig, config)\n\n```\n\n----------------------------------------\n\nTITLE: Applying Horizontal and Vertical Margin Axes with Chakra UI - JavaScript/JSX\nDESCRIPTION: Shows usage of marginX/marginY or their shorthands (mx/my) to add margin along the horizontal or vertical axes of a Chakra UI <Box>. Dependencies: React, Chakra UI. Parameters: 'marginX'/'mx', 'marginY'/'my', values as theme tokens/CSS. Impacts both associated sides (left/right or top/bottom). Requires ChakraProvider.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/spacing.mdx#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Box marginX=\\\"8\\\" />\\n<Box mx=\\\"8\\\" /> // shorthand\\n\\n<Box marginY=\\\"8\\\" />\\n<Box my=\\\"8\\\" /> // shorthand\n```\n\n----------------------------------------\n\nTITLE: Importing Radio and RadioGroup Components - Chakra UI (TypeScript/React)\nDESCRIPTION: Imports the Radio and RadioGroup components from the '@chakra-ui/react' package to enable their use in the application. This import is required to build Chakra-based radio button groups in a TypeScript React project.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/radio.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Radio, RadioGroup } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Code Component in Chakra UI\nDESCRIPTION: Demonstrates the basic usage of the Code component to display inline code content.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/code.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Code>Hello world</Code>\n```\n\n----------------------------------------\n\nTITLE: Setting Font Style with Chakra UI in JSX\nDESCRIPTION: This snippet shows how to apply an italic font style to a Chakra UI `<Text>` component using the `fontStyle` prop, which directly maps to the `font-style` CSS property.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/typography.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Text fontStyle=\"italic\">Hello World</Text>\n```\n\n----------------------------------------\n\nTITLE: Importing Stack Components in Chakra UI\nDESCRIPTION: Shows how to import the Stack, HStack, and VStack components from Chakra UI. These components are used for creating vertical or horizontal layouts.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/stack.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { HStack, Stack, VStack } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Importing Component Snippets in Chakra UI v3\nDESCRIPTION: Demonstrates how to import component snippets that were added using the Chakra CLI. Components are organized in the /components/ui folder and can be imported directly.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/blog/01-chakra-v2-vs-v3-a-detailed-comparison.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nimport { Button } from \"@/components/ui/button\"\n```\n\n----------------------------------------\n\nTITLE: Setting Box Sizing with Chakra UI in JSX\nDESCRIPTION: Demonstrates the use of boxSizing prop to control how the component's size is calculated, e.g., border-box. Additional style props like padding, width, and height are set for visual context. Requires Chakra UI; boxSizing values like 'content-box' or 'border-box' map to CSS box-sizing.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/layout.mdx#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Box boxSizing=\\\"border-box\\\" padding=\\\"4\\\" width=\\\"8\\\" height=\\\"8\\\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Viewport Width in Chakra UI JSX\nDESCRIPTION: Shows how to set the width of a Chakra UI Box component relative to the viewport using modern viewport width units. The `dvw`, `svw`, and `lvw` values map directly to `100dvw`, `100svw`, and `100lvw` CSS values respectively. Both `width` and shorthand `w` props can be used. Requires the Chakra UI library and the Box component.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/sizing.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Box width=\"dvw\" />\n<Box w=\"dvw\" /> // shorthand\n```\n\n----------------------------------------\n\nTITLE: Adding Legend Interaction to Chart in React\nDESCRIPTION: Enable interactivity for chart legends by setting the interaction prop on the Chart.Legend component.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/line-chart.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<Chart.Legend interaction=\"hover\" />\n```\n\n----------------------------------------\n\nTITLE: Closed Component Usage of Rating in Chakra UI\nDESCRIPTION: Shows how to use the Rating component as a closed component with default value and size props.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/rating.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Rating defaultValue={3} size=\"sm\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Border Width on All Sides with Chakra UI - JavaScript/JSX\nDESCRIPTION: This snippet assigns border width to all sides of a <Box> using the borderWidth prop. Chakra UI applies 'solid' style and a default color if not specified. Input is the border thickness as a string (e.g., '1px'); output is a box with a visible border.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/border.mdx#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Box borderWidth=\"1px\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Flex Property for Items in Chakra UI - JSX\nDESCRIPTION: Demonstrates setting the 'flex' shorthand property on Chakra UI's Box components inside a Flex layout. The flex prop receives a valid CSS flex shortform value, determining how the item grows or shrinks. Chakra UI and React are required.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/flex-and-grid.mdx#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex>\\n  <Box flex=\"1\" />\\n  <Box />\\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Importing Portal Component in Chakra UI\nDESCRIPTION: This snippet shows how to import the Portal component from Chakra UI.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/portal.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Portal } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Mapping Items in Segmented Control with React\nDESCRIPTION: Shows how to map an array of items to create multiple SegmentGroup.Item components.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/segmented-control.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<>\n  {items.map((item) => (\n    <SegmentGroup.Item key={item.value} value={item.value}>\n      <SegmentGroup.ItemText>{item.label}</SegmentGroup.ItemText>\n      <SegmentGroup.ItemHiddenInput />\n    </SegmentGroup.Item>\n  ))}\n</>\n```\n\n----------------------------------------\n\nTITLE: Using Chakra UI components in Remix\nDESCRIPTION: Demonstrates the usage of Chakra UI components (Button and HStack) in a Remix application for building UI faster.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/get-started/frameworks/remix.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, HStack } from \"@chakra-ui/react\"\n\nconst Demo = () => {\n  return (\n    <HStack>\n      <Button>Click me</Button>\n      <Button>Click me</Button>\n    </HStack>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CheckboxCard Component in JSX\nDESCRIPTION: Example showing how to use the new CheckboxCard component to create a card with a checkbox, label and description.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/packages/react/CHANGELOG.md#2025-04-23_snippet_21\n\nLANGUAGE: jsx\nCODE:\n```\n<CheckboxCard.Root>\n  <CheckboxCard.Control>\n    <Stack gap=\"0\" flex=\"1\">\n      <CheckboxCard.Label>Checkbox</CheckboxCard.Label>\n      <Text>Some description</Text>\n    </Stack>\n\n    <CheckboxCard.HiddenInput />\n    <CheckboxCard.Indicator />\n  </CheckboxCard.Control>\n</CheckboxCard.Root>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Colors with colorPalette Prop in Chakra UI\nDESCRIPTION: Demonstrates how to use the custom brand color palette with Chakra UI components via the colorPalette prop.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/guides/theming-custom-colors.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Button colorPalette=\"brand\">Click me</Button>\n```\n\n----------------------------------------\n\nTITLE: Defining Line Height Tokens in Chakra UI Theme (TypeScript)\nDESCRIPTION: Example of defining line height tokens (e.g., `normal`) using `defineTokens`. These tokens represent the height of a line of text as strings and are used for the `line-height` CSS property. The defined tokens are added to the theme via `createSystem`.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/tokens.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineTokens } from \"@chakra-ui/react\"\n\nconst tokens = defineTokens({\n  lineHeights: {\n    normal: { value: \"1.5\" },\n  },\n})\n\nexport default createSystem({\n  theme: { tokens },\n})\n```\n\n----------------------------------------\n\nTITLE: Controlling Column Break Behavior Before Elements with Chakra UI in JSX\nDESCRIPTION: Demonstrates the use of breakBefore prop to control where column or page breaks happen before a specific Box element. Chakra UI dependency required; breakBefore value like 'page' maps to CSS 'break-before'. Used in multi-column or paged layouts to control content flow.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/layout.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Box columns=\\\"2\\\">\\n  <Box>Item 1</Box>\\n  <Box breakBefore=\\\"page\\\">Item 2</Box>\\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Size Token with size in TypeScript React\nDESCRIPTION: Shows how to use the size function to retrieve a Chakra UI size token.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/use-chart.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nconst chartSize = chart.size(\"4\") // var(--chakra-sizes-4)\n```\n\n----------------------------------------\n\nTITLE: Setting Border Width on Specific Sides in Chakra UI - JavaScript/JSX\nDESCRIPTION: These examples demonstrate setting top and left border widths on a Chakra UI <Box> via borderTopWidth and borderLeftWidth props. Both props expect strings (like '1px'). Applies border thickness only to the specified edges.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/border.mdx#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Box borderTopWidth=\"1px\" />\n<Box borderLeftWidth=\"1px\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Border Width Tokens in Chakra UI Theme (TypeScript)\nDESCRIPTION: Shows how to define border width tokens (e.g., `thin`, `thick`, `medium`) using `defineTokens`. These tokens represent the width of borders as strings and are added to the theme configuration via `createSystem`.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/tokens.mdx#2025-04-23_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineTokens } from \"@chakra-ui/react\"\n\nconst tokens = defineTokens({\n  borderWidths: {\n    thin: { value: \"1px\" },\n    thick: { value: \"2px\" },\n    medium: { value: \"1.5px\" },\n  },\n})\n\nexport default createSystem({\n  theme: { tokens },\n})\n```\n\n----------------------------------------\n\nTITLE: Hiding Y-Axis in Chakra UI Charts\nDESCRIPTION: Shows how to completely hide the Y-axis from the chart.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/axes.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<YAxis hide />\n```\n\n----------------------------------------\n\nTITLE: Applying Border Color on All Sides with Chakra UI - JavaScript/JSX\nDESCRIPTION: These snippets set the border color for a <Box> component using the borderColor prop. Accepts named color tokens (e.g., 'red.400') and supports opacity with '/20' notation. Chakra UI React is a dependency.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/border.mdx#2025-04-23_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<Box borderColor=\"red.400\" />\n\n// with opacity modifier\n<Box borderColor=\"red.400/20\" />\n```\n\n----------------------------------------\n\nTITLE: Importing FormatNumber Component in React\nDESCRIPTION: Shows how to import the FormatNumber component from Chakra UI.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/format-number.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { FormatNumber } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Defining Grid Columns with templateColumns Alias on Grid Component - Chakra UI - JSX\nDESCRIPTION: Shows how to use the templateColumns prop, an alias for gridTemplateColumns, on Chakra UI's Grid component. Value is standard CSS grid definition. Chakra UI/React required.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/flex-and-grid.mdx#2025-04-23_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n<Grid templateColumns=\"repeat(3, minmax(0, 1fr))\">\\n  <Box>Item 1</Box>\\n  <Box>Item 2</Box>\\n  <Box>Item 3</Box>\\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Setting Value Domain in React Line Chart\nDESCRIPTION: Set the upper and lower bounds of the Y-axis using the domain prop on the YAxis component.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/line-chart.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n<YAxis domain={[0, 100]} />\n```\n\n----------------------------------------\n\nTITLE: Controlling Element Resizability in Chakra UI JSX\nDESCRIPTION: Shows how to use the `resize` prop on a `chakra.textarea` component to control whether the user can resize the element. Examples demonstrate allowing resizing in both directions ('both'), only horizontally ('horizontal'), or only vertically ('vertical').\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/interactivity.mdx#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<chakra.textarea resize=\"both\" />\n<chakra.textarea resize=\"horizontal\" />\n<chakra.textarea resize=\"vertical\" />\n```\n\n----------------------------------------\n\nTITLE: Controlling Column Break Behavior After Elements with Chakra UI in JSX\nDESCRIPTION: Illustrates setting the breakAfter prop in a multi-column layout to determine how column or page breaks behave after a Box element. Requires Chakra UI; Box component must accept the breakAfter prop. Expects a breakAfter string value such as 'page'. This affects CSS 'break-after' property, applicable in paged or column-based layouts.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/layout.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Box columns=\\\"2\\\">\\n  <Box>Item 1</Box>\\n  <Box breakAfter=\\\"page\\\">Item 2</Box>\\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Updating useRecipe in a Component to Get Recipe from Theme Key (Diff)\nDESCRIPTION: Shows a diff for changing a Button component's useRecipe call to reference a recipe by key from the theme, rather than directly importing the recipe. Facilitates centralized theme management of recipes. The diff marks the removed and added lines.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/recipes.mdx#2025-04-23_snippet_13\n\nLANGUAGE: Diff\nCODE:\n```\nconst Button = () => {\n-  const recipe = useRecipe({ recipe: buttonRecipe })\n+  const recipe = useRecipe({ key: \"button\" })\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Alert Slot Recipe with Extra Size Using defineSlotRecipe (TypeScript)\nDESCRIPTION: Shows how to use `defineSlotRecipe` and `alertAnatomy` to extend an Alert slot recipe in Chakra UI, adding an `xl` size variant and customizing root slot styles. Requires importing anatomy helpers, Chakra UI theming APIs, and integrating with a theme config. Outputs a system object with new slot variant support.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/customization/recipes.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { alertAnatomy } from \"@chakra-ui/react/anatomy\"\n\nconst alertSlotRecipe = defineSlotRecipe({\n  slots: alertAnatomy.keys(),\n  variants: {\n    size: {\n      xl: {\n        root: {\n          fontSize: \"lg\",\n          px: 6,\n          py: 3,\n        },\n      },\n    },\n  },\n})\n\nconst customConfig = defineConfig({\n  theme: {\n    slotRecipes: {\n      alert: alertSlotRecipe,\n    },\n  },\n})\n\nexport const system = createSystem(defaultConfig, customConfig)\n```\n\n----------------------------------------\n\nTITLE: Adding Series Labels to Line Chart in React\nDESCRIPTION: Add custom labels to chart series by setting the label prop in the series object.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/line-chart.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nconst chart = useChart({\n  data: [\n    { mac: 10, linux: 120, month: \"January\" },\n    //...\n  ],\n  series: [\n    { name: \"mac\", label: \"Mac sales\", color: \"purple.solid\" },\n    { name: \"linux\", label: \"Linux sales\", color: \"blue.solid\" },\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Specifying Auto-Generated Grid Columns with gridAutoColumns - Chakra UI - JSX\nDESCRIPTION: Demonstrates the use of gridAutoColumns prop to set the size for auto-generated grid columns in a Chakra UI Box displayed as grid. The value can be any CSS length. Chakra UI/React are required.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/flex-and-grid.mdx#2025-04-23_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\n<Box display=\"grid\" gridAutoColumns=\"120px\">\\n  <Box>Item 1</Box>\\n  <Box>Item 2</Box>\\n  <Box>Item 3</Box>\\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Importing Dialog Component in React\nDESCRIPTION: Shows how to import the Dialog component from Chakra UI library.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/dialog.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Dialog } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Container for Portal in Chakra UI\nDESCRIPTION: This snippet shows how to use the 'container' prop to render the portal content in a custom container using a ref.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/portal.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Portal } from \"@chakra-ui/react\"\n\nconst Demo = () => {\n  const containerRef = React.useRef()\n  return (\n    <>\n      <Portal container={containerRef}>\n        <div>Portal content</div>\n      </Portal>\n      <div ref={containerRef} />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting SVG Stroke Width with Chakra UI in JSX\nDESCRIPTION: This snippet shows how to apply a stroke width to an SVG element using the `strokeWidth` prop on the `chakra.svg` component. The `strokeWidth` prop translates to the CSS `stroke-width` property and typically uses values from the `borderWidths` token category in the Chakra UI theme.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/svg.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<chakra.svg strokeWidth=\"1px\">\n  <path d=\"...\" />\n</chakra.svg>\n```\n\n----------------------------------------\n\nTITLE: Using Fill Layer Styles in Chakra UI\nDESCRIPTION: Shows how to apply fill layer styles with color palettes for quick prototyping with automatic dark mode support.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/packages/react/CHANGELOG.md#2025-04-23_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n<Box layerStyle=\"fill.muted\" colorPalette=\"red\">\n  This is a subtle fill layer\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Using Chakra UI Hook in Client Component\nDESCRIPTION: This example shows how to use a Chakra UI hook (useBreakpointValue) in a client component. It demonstrates responsive value selection based on breakpoints.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/concepts/server-components.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n\"use client\"\n\nimport { useBreakpointValue } from \"@chakra-ui/react\"\n\nexport function MyComponent() {\n  const value = useBreakpointValue({ base: \"mobile\", md: \"desktop\" })\n  return <div>{value}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Applying LTR and RTL Styles in Chakra UI\nDESCRIPTION: Shows how to apply styles based on text direction using _ltr and _rtl modifiers.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/conditional-styles.mdx#2025-04-23_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\n<div dir=\"ltr\">\n  <Box _ltr={{ ml: \"3\" }} _rtl={{ mr: \"3\" }}>\n    Hello\n  </Box>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Opacity Tokens in Chakra UI Theme\nDESCRIPTION: Demonstrates how to define opacity tokens in the theme system. These tokens are used to set the opacity of elements with values between 0 and 1.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/tokens.mdx#2025-04-23_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineTokens } from \"@chakra-ui/react\"\n\nconst tokens = defineTokens({\n  opacity: {\n    50: { value: 0.5 },\n  },\n})\n\nexport default createSystem({\n  theme: { tokens },\n})\n```\n\n----------------------------------------\n\nTITLE: Positioning Images with Chakra UI Object Position in JSX\nDESCRIPTION: Shows how to use objectPosition prop to set alignment of an image within its box (e.g., 'center'). Image source and dimensions are included for context. Requires Chakra UI and CSS object-position support. Used when displaying images that need specific cropping or alignment.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/layout.mdx#2025-04-23_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n<Image src=\\\"...\\\" objectPosition=\\\"center\\\" width=\\\"10\\\" height=\\\"10\\\" />\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Breakpoints to Chakra UI Components (TypeScript)\nDESCRIPTION: This TypeScript (TSX) snippet illustrates how to apply responsive styles using the custom breakpoints defined in the theme. It uses a Chakra UI `Box` component and sets the `fontSize` property with an object. The keys of this object (`base`, `tablet`, `desktop`) correspond to the breakpoint names, and the values specify the font size to apply at or above that breakpoint.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/customization/breakpoints.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Box fontSize={{ base: \"16px\", tablet: \"18px\", desktop: \"20px\" }}>Hello</Box>\n\n```\n\n----------------------------------------\n\nTITLE: Customizing Scrollbar Appearance in Chakra UI JSX\nDESCRIPTION: Demonstrates using the `scrollbar` prop, specifically setting it to 'hidden' on a `Box` component with `overflowY='auto'`, to hide the scrollbar while still allowing scrolling.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/interactivity.mdx#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Box scrollbar=\"hidden\" maxH=\"100px\" overflowY=\"auto\">\n  Scrollbar hidden\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Importing Popover Component in Chakra UI\nDESCRIPTION: This snippet shows how to import the Popover component from Chakra UI.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/popover.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Popover } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Installing Chakra UI Charts Package via NPM\nDESCRIPTION: Command to install the @chakra-ui/charts package using npm package manager.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/packages/charts/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @chakra-ui/charts\n```\n\n----------------------------------------\n\nTITLE: Setting Table Caption Side with Chakra UI - JSX\nDESCRIPTION: Demonstrates how to use the Chakra UI 'captionSide' prop on the caption element within an HTML table to control the position of the table caption (e.g., 'bottom'). Depends on Chakra UI's 'chakra' component factory and usage in a React component. The 'captionSide' prop sets the CSS 'caption-side' to bottom, placing the caption below the table. Outputs a table with a styled caption as specified.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/tables.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<table>\\n  <chakra.caption captionSide=\\\"bottom\\\">This is a caption</chakra.caption>\\n  <tbody>\\n    <tr>\\n      <td>Cell 1</td>\\n      <td>Cell 2</td>\\n    </tr>\\n  </tbody>\\n</table>\n```\n\n----------------------------------------\n\nTITLE: Importing Accordion Component in JavaScript\nDESCRIPTION: Shows how to import the Accordion component from the Chakra UI React package.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/notes/mdx-reference.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Accordion } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Basic Scatter Chart Structure in TypeScript\nDESCRIPTION: Create a basic structure for a scatter chart using Chakra UI and Recharts components.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/scatter-chart.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Chart.Root>\n  <ScatterChart>\n    <XAxis />\n    <YAxis />\n    <Scatter />\n  </ScatterChart>\n</Chart.Root>\n```\n\n----------------------------------------\n\nTITLE: Setting Caret Color in Chakra UI JSX\nDESCRIPTION: Shows how to customize the color of the text cursor (caret) within input fields using the `caretColor` prop on a `chakra.input` component. Examples include using a hardcoded hex value and a theme token.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/interactivity.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// hardcoded\n<chakra.input caretColor=\"#3b82f6\" />\n\n// token value\n<chakra.input caretColor=\"blue.500\" />\n```\n\n----------------------------------------\n\nTITLE: Using Arbitrary Selectors in Chakra UI\nDESCRIPTION: Shows how to use the css prop for applying styles with arbitrary selectors.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/conditional-styles.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n<Box css={{ \"&[data-state=closed]\": { color: \"red.300\" } }} />\n```\n\n----------------------------------------\n\nTITLE: Inferring Recipe Variant Prop Types after Type Generation (TypeScript)\nDESCRIPTION: Shows importing generated RecipeVariantProps types after typegen to strictly type the variant props in a Button component interface. Ensures all recipe-variant typings are up-to-date with the recipe definition and theme. Depends on @chakra-ui/react and typegen output.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/recipes.mdx#2025-04-23_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { RecipeVariantProps } from \"@chakra-ui/react\"\nimport { buttonRecipe } from \"./button.recipe\"\n\ntype ButtonVariantProps = RecipeVariantProps<typeof buttonRecipe>\n\nexport interface ButtonProps\n  extends React.PropsWithChildren<ButtonVariantProps> {}\n```\n\n----------------------------------------\n\nTITLE: Using Polymorphism with Chakra Factory Components in TSX\nDESCRIPTION: These examples demonstrate how to use the 'as' and 'asChild' props for polymorphism with components created using the chakra factory.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/chakra-factory.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<Button as=\"a\" href=\"https://chakra-ui.com\">\n  Chakra UI\n</Button>\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<Button asChild>\n  <a href=\"https://chakra-ui.com\">Chakra UI</a>\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Setting Text Shadow with Chakra UI in JSX\nDESCRIPTION: This snippet shows how to apply a text shadow effect to a Chakra UI `<Text>` component using the `textShadow` prop with a standard CSS shadow value ('0 0 1px red'). Values can also potentially be theme tokens from the `shadows` category.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/typography.mdx#2025-04-23_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\n<Text textShadow=\"0 0 1px red\">Hello World</Text>\n```\n\n----------------------------------------\n\nTITLE: Applying Grayscale Effect using the `grayscale` Prop in JSX\nDESCRIPTION: Illustrates applying a grayscale effect using the `grayscale` prop. This requires the `filter` prop to be set to `auto`. The value specifies the proportion of the conversion (e.g., '64%').\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/filters.mdx#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Box filter=\"auto\" grayscale=\"64%\" />\n```\n\n----------------------------------------\n\nTITLE: CLI Help Command Output\nDESCRIPTION: Displays all available CLI options and commands for theme token generation, including output path, strict typing options, and watch mode\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/packages/cli/README.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ npx @chakra-ui/cli tokens --help\n\nUsage: chakra-cli tokens [options] <source>\n\nOptions:\n  --out <path>              output file e.g. node_modules/@chakra-ui/styled-system/dist/declarations/src/theming.types.d.ts\n  --strict-component-types  Generate strict types for props variant and size\n  --strict-token-types      Generate strict types for theme tokens (e.g. color, spacing)\n  --no-format               Disable auto formatting\n  --watch [path]            Watch directory for changes and rebuild\n  --template <template>     Choose the template to use for the generation (choices: \"default\", \"augmentation\", default: \"default\"\n  -h, --help                display help for command\n\nExample call:\n  $ chakra-cli tokens theme.ts\n```\n\n----------------------------------------\n\nTITLE: Defining Background Origin with Chakra UI (JSX)\nDESCRIPTION: Demonstrates setting the background origin for a background image using bgOrigin on a <Box> component. Chakra UI is required. The bgOrigin attribute accepts values such as 'border-box', allowing fine control over where a background image starts relative to the box model. Typically paired with bgImage.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/background.mdx#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Box bgOrigin=\"border-box\" bgImage=\"url(...)\" />\n```\n\n----------------------------------------\n\nTITLE: Using Mark Component in JSX for Text Emphasis\nDESCRIPTION: This example demonstrates how to use the Mark component within a Text component to emphasize specific text.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/mark.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Text>\n  The <Mark>design system</Mark> is a collection of UI elements\n</Text>\n```\n\n----------------------------------------\n\nTITLE: ColorPicker.EyeDropper Implementation with Icon Button\nDESCRIPTION: Shows how the ColorPicker.EyeDropper component is a shortcut for implementing an eye dropper trigger with an icon button.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/color-picker.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<ColorPicker.EyeDropperTrigger asChild>\n  <IconButton>\n    <LuPipette />\n  </IconButton>\n</ColorPicker.EyeDropperTrigger>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Rating Component in Chakra UI\nDESCRIPTION: Demonstrates the basic structure of the Rating component using nested elements.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/rating.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<RatingGroup.Root>\n  <RatingGroup.Label />\n  <RatingGroup.HiddenInput />\n  <RatingGroup.Control>\n    <RatingGroup.Item>\n      <RatingGroup.ItemIndicator />\n    </RatingGroup.Item>\n  </RatingGroup.Control>\n</RatingGroup.Root>\n```\n\n----------------------------------------\n\nTITLE: Customizing Theme Spacing in Chakra UI (TypeScript)\nDESCRIPTION: This snippet extends the Chakra UI theme with additional spacing tokens by defining a custom configuration object. It imports necessary Chakra UI functions, adds new spacing values ('128' and '144'), and merges them with the default theme config. The dependencies include '@chakra-ui/react' and relevant theming utilities. Inputs are the extended spacing values, and output is an initialized Chakra UI system that can be used throughout the application. Ensure that tokens use valid CSS length units.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/customization/spacing.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createSystem, defaultConfig, defineConfig } from \"@chakra-ui/react\"\n\nconst customConfig = defineConfig({\n  theme: {\n    tokens: {\n      spacing: {\n        \"128\": { value: \"32rem\" },\n        \"144\": { value: \"36rem\" },\n      },\n    },\n  },\n})\n\nexport const system = createSystem(defaultConfig, customConfig)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Root Provider for Chakra UI Application\nDESCRIPTION: This JSX code sets up the root provider for a Chakra UI application, wrapping the main App component with necessary providers including ChakraProvider and ThemeProvider.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/get-started/environments/iframe.mdx#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Provider } from \"@/components/ui/provider\"\nimport React from \"react\"\nimport ReactDOM from \"react-dom/client\"\nimport App from \"./App\"\n\nReactDOM.createRoot(document.getElementById(\"root\")!).render(\n  <React.StrictMode>\n    <Provider>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n)\n```\n\n----------------------------------------\n\nTITLE: Applying Backdrop Hue Rotate Effect using `backdropHueRotate` Prop in JSX\nDESCRIPTION: Illustrates applying a hue rotation effect to the area behind an element using the `backdropHueRotate` prop. This requires the `backdropFilter` prop to be set to `auto`. The value specifies the angle of rotation.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/filters.mdx#2025-04-23_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n<Box backdropFilter=\"auto\" backdropHueRotate=\"30deg\" />\n```\n\n----------------------------------------\n\nTITLE: Applying X-axis Rotation Transform with Chakra UI Box Component in JSX\nDESCRIPTION: Demonstrates rotating a Chakra UI `Box` component around the X-axis using the `rotateX` prop. The value \"45deg\" applies a 45-degree rotation around the horizontal axis.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/transforms.mdx#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Box rotateX=\"45deg\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Icon Button from Chakra UI in JSX\nDESCRIPTION: This snippet shows how to import the IconButton component from Chakra UI.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/icon-button.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { IconButton } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Importing ActionBar in Chakra UI (TSX)\nDESCRIPTION: Shows how to import the ActionBar component from Chakra UI in a TypeScript React application.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/action-bar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ActionBar } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Using Closed Composition Radio Group - Chakra UI (TypeScript/React)\nDESCRIPTION: Illustrates the usage of the closed composition variant of Chakra UI's RadioGroup and Radio components. After generating the closed component via CLI, developers import and use RadioGroup and Radio tags directly. No props are specified here, but typically support selection-related properties. Intended for use in a React (TypeScript/TSX) project.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/radio.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<RadioGroup>\n  <Radio />\n</RadioGroup>\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Cascade Layer Order in Chakra UI\nDESCRIPTION: This CSS snippet shows the order in which Chakra UI appends cascade layers to the generated emotion stylesheet. It defines the layers for reset, base, tokens, and recipes.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/cascade-layers.mdx#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n@layer reset, base, tokens, recipes;\n```\n\n----------------------------------------\n\nTITLE: Applying Rotation Transform with Chakra UI Box Component in JSX\nDESCRIPTION: Example of rotating a Chakra UI `Box` component using the `rotate` prop. The value \"45deg\" rotates the element 45 degrees clockwise.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/transforms.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Box rotate=\"45deg\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Pie Chart Setup with Chakra UI\nDESCRIPTION: Basic implementation of a Pie Chart using Chakra UI's Chart.Root wrapper with Recharts' PieChart and Pie components.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/pie-chart.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Chart.Root>\n  <PieChart>\n    <Pie />\n  </PieChart>\n</Chart.Root>\n```\n\n----------------------------------------\n\nTITLE: Applying Backdrop Sepia Effect using `backdropSepia` Prop in JSX\nDESCRIPTION: Shows how to apply a sepia effect to the area behind an element using the `backdropSepia` prop. This requires the `backdropFilter` prop to be set to `auto`. The value specifies the proportion of the conversion.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/filters.mdx#2025-04-23_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\n<Box backdropFilter=\"auto\" backdropSepia=\"0.4\" />\n```\n\n----------------------------------------\n\nTITLE: Removing Dots from Line Chart in React\nDESCRIPTION: Hide the dots on a line chart by setting dot and activeDot properties to false.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/line-chart.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Line dot={false} activeDot={false} />\n```\n\n----------------------------------------\n\nTITLE: Accessing Text Component Reference in TSX\nDESCRIPTION: This snippet shows how to access the underlying element reference of the Text component using the useRef hook in TypeScript. It demonstrates creating a ref and passing it to the Text component.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/text.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst Demo = () => {\n  const ref = useRef<HTMLParagraphElement | null>(null)\n  return <Text ref={ref}>This is the text component</Text>\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Specific Locale with LocaleProvider in React\nDESCRIPTION: This snippet shows how to set a specific locale (in this case, Arabic for Bahrain) using the LocaleProvider component.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/locale-provider.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<LocaleProvider locale=\"ar-BH\">\n  <Component />\n</LocaleProvider>\n```\n\n----------------------------------------\n\nTITLE: Applying Sepia Effect using the `sepia` Prop in JSX\nDESCRIPTION: Shows how to apply a sepia effect using the `sepia` prop. This requires the `filter` prop to be set to `auto`. The value specifies the proportion of the conversion (e.g., '0.4').\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/filters.mdx#2025-04-23_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<Box filter=\"auto\" sepia=\"0.4\" />\n```\n\n----------------------------------------\n\nTITLE: Hinting Property Changes with will-change in Chakra UI JSX\nDESCRIPTION: Illustrates applying the `willChange` prop to a `Box` component. This prop provides a hint to the browser about which properties are expected to change, allowing potential performance optimizations. This example hints that the 'transform' property will change.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/interactivity.mdx#2025-04-23_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\n<Box willChange=\"transform\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Keyframe Documentation with KeyframeDoc Component in JSX\nDESCRIPTION: This JSX snippet utilizes the custom `KeyframeDoc` component to display the available keyframe animations within the Chakra UI framework. It's expected to render a list or table of predefined keyframes, likely sourced from the Chakra UI theme configuration. Requires React and the definition of the `KeyframeDoc` component.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/animations.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<KeyframeDoc />\n```\n\n----------------------------------------\n\nTITLE: EnvironmentProvider with Shadow DOM Implementation\nDESCRIPTION: Example demonstrating EnvironmentProvider usage with react-shadow for Shadow DOM environments.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/environment-provider.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { EnvironmentProvider } from \"@chakra-ui/react\"\nimport { useRef } from \"react\"\nimport root from \"react-shadow\"\n\nexport const Demo = () => {\n  const portalRef = useRef()\n  return (\n    <root.div ref={portalRef}>\n      <EnvironmentProvider\n        value={() => portalRef?.current?.shadowRoot ?? document}\n      >\n        {/* Your App */}\n      </EnvironmentProvider>\n    </root.div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Semantic Colors in Charts\nDESCRIPTION: Shows how to use the color function provided by useChart to apply semantic colors from the Chakra UI theme.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/installation.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<CartesianGrid stroke={chart.color(\"border.muted\")} />\n```\n\n----------------------------------------\n\nTITLE: Using ColorPicker.ChannelSlider Shortcut Component\nDESCRIPTION: Shows how to use the ChannelSlider shortcut component that renders slider track, thumb, and transparency grid in a single element.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/color-picker.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<ColorPicker.ChannelSlider />\n```\n\n----------------------------------------\n\nTITLE: Creating Clickable Bars with Links in Chakra UI Charts (TSX)\nDESCRIPTION: This snippet demonstrates how to make bars render as clickable links by passing a label prop to the BarList.Bar component.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/bar-list.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<BarList.Bar\n  label={({ payload }) => <a href={payload.href}>{payload.name}</a>}\n/>\n```\n\n----------------------------------------\n\nTITLE: Disabling Portal Component in Chakra UI\nDESCRIPTION: This example demonstrates how to use the 'disabled' prop to render the portal content in the same DOM hierarchy instead of creating a portal.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/portal.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Portal } from \"@chakra-ui/react\"\n\nconst Demo = () => {\n  return (\n    <Portal disabled>\n      <div>Will render the content in place</div>\n    </Portal>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Size Tokens in Chakra UI Theme - TypeScript\nDESCRIPTION: This snippet demonstrates how to extend the default Chakra UI theme by defining custom size tokens and integrating them into the system using TypeScript. It imports createSystem, defaultConfig, and defineConfig from '@chakra-ui/react', defines custom size tokens (such as '1/7'), and creates a new system instance with the augmented configuration. Dependencies include '@chakra-ui/react'. The primary parameters are the tokens defined under 'sizes'. The output is an exported system object usable in Chakra UI's provider. The snippet must be placed in a TypeScript theme configuration file and should be imported where Chakra UI setup occurs.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/customization/sizes.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSystem, defaultConfig, defineConfig } from \"@chakra-ui/react\"\n\nconst customConfig = defineConfig({\n  theme: {\n    tokens: {\n      sizes: {\n        \"1/7\": { value: \"14.285%\" },\n        \"2/7\": { value: \"28.571%\" },\n        \"3/7\": { value: \"42.857%\" },\n      },\n    },\n  },\n})\n\nexport const system = createSystem(defaultConfig, customConfig)\n```\n\n----------------------------------------\n\nTITLE: Customizing Specific Color Palettes for Dark Mode\nDESCRIPTION: Shows how to customize specific color palettes like blue for dark mode, modifying individual color variants while maintaining the semantic token structure.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/guides/theming-customize-dark-mode-colors.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = defineConfig({\n  theme: {\n    semanticTokens: {\n      colors: {\n        blue: {\n          solid: {\n            value: { _light: \"{colors.blue.600}\", _dark: \"#0284c7\" }, // Custom dark blue\n          },\n          muted: {\n            value: { _light: \"{colors.blue.100}\", _dark: \"#082f49\" }, // Custom dark muted blue\n          },\n        },\n        // Add more color palettes as needed\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Chakra UI with Shadow DOM\nDESCRIPTION: This command installs the necessary packages for using Chakra UI with Shadow DOM, including @chakra-ui/react, @emotion/react, @emotion/cache, and react-shadow.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/get-started/environments/shadow-dom.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @chakra-ui/react @emotion/react @emotion/cache react-shadow\n```\n\n----------------------------------------\n\nTITLE: Modifying Focus Ring Style for Button in Chakra UI\nDESCRIPTION: Shows how to change the focus ring style for a specific button using the focusRingStyle prop.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/focus-ring.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<Button focusRingStyle=\"dashed\">Click me</Button>\n```\n\n----------------------------------------\n\nTITLE: Formatting Y-Axis Labels in Chakra UI Charts\nDESCRIPTION: Demonstrates how to format Y-axis values as percentages.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/axes.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<YAxis tickFormatter={(value) => `${value}%`} />\n```\n\n----------------------------------------\n\nTITLE: Importing Accordion Component in Chakra UI (TSX)\nDESCRIPTION: This snippet shows how to import the Accordion component from Chakra UI. It's the first step in using the Accordion in your React application.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/accordion.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Accordion } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Transition Timing Function with Chakra UI in JSX\nDESCRIPTION: Demonstrates setting the timing function of a transition using the transitionTimingFunction prop alongside other transition-related props on the Chakra UI Box component. This snippet assumes a theme with defined timing functions (e.g., ease-in-out) in Chakra UI. The Box's background changes on hover with a smooth timing effect.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/transitions.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Box\\n  bg=\\\"red.400\\\"\\n  _hover={{ bg: \\\"red.500\\\" }}\\n  transition=\\\"backgrounds\\\"\\n  transitionTimingFunction=\\\"ease-in-out\\\"\\n>\\n  Hover me\\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Adding Centered Text to Donut Charts\nDESCRIPTION: Shows how to use the Chart.RadialText component to display centered text on the chart with an optional description.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/donut-chart.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Label\n  content={({ viewBox }) => (\n    <Chart.RadialText viewBox={viewBox} title={1200} description=\"users\" />\n  )}\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Animation Duration with Chakra UI in JSX\nDESCRIPTION: Demonstrates specifying how long an animation runs using the animationDuration prop with the Box component. The named animation (e.g., 'bounce') is run for the specified duration, which references a Chakra UI theme token. The approach assumes both the animation and duration exist in the theme.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/transitions.mdx#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Box animation=\\\"bounce\\\" animationDuration=\\\"fast\\\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Point Labels to Line Chart in React\nDESCRIPTION: Display labels at each data point on a line chart using the LabelList component from Recharts.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/line-chart.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Line>\n  <LabelList position=\"right\" offset={10} />\n</Line>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Separator Component in React\nDESCRIPTION: Demonstrates the basic usage of the Separator component in a React application.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/separator.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Separator />\n```\n\n----------------------------------------\n\nTITLE: Inferring Recipe Variant Prop Types with RecipeVariantProps (TypeScript)\nDESCRIPTION: Illustrates using the `RecipeVariantProps` type helper from Chakra UI to infer the types of variant props accepted by a specific slot recipe (`checkboxSlotRecipe`). This enhances type safety when defining component props interfaces, ensuring only valid variant props are accepted.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/slot-recipes.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n```tsx title=\"checkbox.tsx\"\nimport type { RecipeVariantProps } from \"@chakra-ui/react\"\nimport { checkboxSlotRecipe } from \"./checkbox.recipe\"\n\ntype CheckboxVariantProps = RecipeVariantProps<typeof checkboxSlotRecipe>\n\nexport interface CheckboxProps\n  extends React.PropsWithChildren<CheckboxVariantProps> {}\n```\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Pin Input Component in React\nDESCRIPTION: This example demonstrates the basic structure of the PinInput component with its subcomponents.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/pin-input.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<PinInput.Root>\n  <PinInput.HiddenInput />\n  <PinInput.Control>\n    <PinInput.Input />\n  </PinInput.Control>\n</PinInput.Root>\n```\n\n----------------------------------------\n\nTITLE: Applying Vertical Dividers with Chakra UI Box (JSX)\nDESCRIPTION: This code applies the divideY prop to a Chakra UI Box component to create vertical dividers ('border-top-width') of 2px between stacked child elements. It depends on Chakra UI, and divideY sets the width of the divider between items. Inputs are child Box components; the output is visually separated items with a horizontal border line in a vertically arranged list.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/divide.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Box divideY=\\\"2px\\\">\\n  <Box>Item 1</Box>\\n  <Box>Item 2</Box>\\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Setting Default Props with Chakra Factory in JSX\nDESCRIPTION: This snippet shows how to set default props for a component created with the chakra function.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/chakra-factory.mdx#2025-04-23_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nconst Button = chakra(\n  \"button\",\n  {\n    base: {\n      bg: \"blue.500\",\n      color: \"white\",\n    },\n  },\n  { defaultProps: { type: \"button\" } },\n)\n```\n\n----------------------------------------\n\nTITLE: Shorthand ColorPicker.Area Component Usage\nDESCRIPTION: Shows the shorthand usage of the ColorPicker.Area component which internally includes the thumb and background elements.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/color-picker.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<ColorPicker.Area />\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Wrap Component in Chakra UI (TSX)\nDESCRIPTION: This example demonstrates the basic usage of the Wrap component, which applies display: flex, flex-wrap: wrap, and gap: 8px to its children by default.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/wrap.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Wrap>\n  <div />\n  <div />\n</Wrap>\n```\n\n----------------------------------------\n\nTITLE: Using the borderEnd Shorthand Style Prop in Chakra UI\nDESCRIPTION: Demonstrates the new borderEnd shorthand style prop which provides a more concise way to apply border styles to the end edge of an element based on the current text direction.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/blog/07-chakra-3.16.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Box borderEnd=\"2px solid red\">\n  <Text>Hello</Text>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom State Conditions in Chakra UI (TypeScript)\nDESCRIPTION: This snippet demonstrates how to define custom styling conditions in Chakra UI using `defineConfig`. It adds `off` and `on` conditions mapped to CSS selectors targeting the `data-state` attribute values 'off' and 'on' respectively. These custom conditions are then merged with the default configuration using `createSystem` to make them available throughout the application.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/customization/conditions.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx title=\"theme.ts\"\nimport { createSystem, defaultConfig, defineConfig } from \"@chakra-ui/react\"\n\nconst customConfig = defineConfig({\n  conditions: {\n    off: \"&:is([data-state=off])\",\n    on: \"&:is([data-state=on])\",\n  },\n})\n\nexport const system = createSystem(defaultConfig, customConfig)\n```\n```\n\n----------------------------------------\n\nTITLE: Using isPressed Variant Prop in Button Component\nDESCRIPTION: Example of passing the isPressed variant as a prop to a Button component, which works with the compound variants approach.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/guides/theming-recipe-dynamic-styling.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<Button visual=\"solid\" isPressed={isPressed}>\n  Click Me\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint with React Plugin Support\nDESCRIPTION: This code demonstrates how to configure ESLint for React projects by importing the eslint-plugin-react package, setting the React version, and enabling recommended React-specific rules and JSX runtime rules.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/sandbox/panda-preset/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport react from \"eslint-plugin-react\"\n\nexport default tseslint.config({\n  // Set the react version\n  settings: { react: { version: \"18.3\" } },\n  plugins: {\n    // Add the react plugin\n    react,\n  },\n  rules: {\n    // other rules...\n    // Enable its recommended rules\n    ...react.configs.recommended.rules,\n    ...react.configs[\"jsx-runtime\"].rules,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Series Key with getKey in TypeScript React\nDESCRIPTION: Shows how to use the getKey function to access a series key in a type-safe manner.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/use-chart.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst key = chart.getKey(\"revenue\")\n```\n\n----------------------------------------\n\nTITLE: Simplified Hover Card Arrow Usage in React\nDESCRIPTION: This example demonstrates a more concise way to use the HoverCard.Arrow component without explicitly including the ArrowTip, suitable when customization of the arrow tip is not needed.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/hover-card.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<HoverCard.Arrow />\n```\n\n----------------------------------------\n\nTITLE: Importing ClientOnly Component - React/Chakra UI\nDESCRIPTION: Shows how to import the ClientOnly component and Skeleton component from Chakra UI React package.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/client-only.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ClientOnly, Skeleton } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Importing Color Mode Components and Hooks\nDESCRIPTION: Example of importing the color mode components and hooks from the snippet, including ColorModeButton, DarkMode, LightMode and hook utilities.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/concepts/color-mode.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  ColorModeButton,\n  DarkMode,\n  LightMode,\n  useColorMode,\n  useColorModeValue,\n} from \"@/components/ui/color-mode\"\n```\n\n----------------------------------------\n\nTITLE: Formatting X-Axis Tick Labels in Chakra UI Charts\nDESCRIPTION: Shows how to format date labels on the X-axis using custom formatting options.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/axes.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<XAxis dataKey=\"date\" tickFormatter={chart.formatDate({ month: \"short\" })} />\n```\n\n----------------------------------------\n\nTITLE: Using Chakra UI Components in React\nDESCRIPTION: Demonstrates the usage of Chakra UI components (Button and HStack) in a React component.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/get-started/frameworks/vite.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, HStack } from \"@chakra-ui/react\"\n\nconst Demo = () => {\n  return (\n    <HStack>\n      <Button>Click me</Button>\n      <Button>Click me</Button>\n    </HStack>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Slot Recipe (Navbar) with defineSlotRecipe in Chakra UI (TypeScript)\nDESCRIPTION: Demonstrates the creation of a new slot recipe named `Navbar` with custom slots and base styles using `defineSlotRecipe`. This example does not use anatomy helpers and defines slot names and styles directly. Expected to be integrated into the Chakra UI theming system as shown in other snippets.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/customization/recipes.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nconst navbarSlotRecipe = defineSlotRecipe({\n  slots: [\"root\", \"badge\", \"icon\"],\n  base: {\n    root: {\n      bg: \"blue.500\",\n      color: \"white\",\n      px: 4,\n      py: 2,\n    },\n    badge: {\n      borderRadius: \"full\",\n      px: 2,\n      py: 1,\n    },\n  },\n})\n\nconst customConfig = defineConfig({\n  theme: {\n    slotRecipes: {\n      navbar: navbarSlotRecipe,\n    },\n  },\n})\n\nexport const system = createSystem(defaultConfig, customConfig)\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Prose Component in React\nDESCRIPTION: Example of using the Prose component to wrap HTML content. The content is inserted using dangerouslySetInnerHTML, which should be used cautiously.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/prose.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Prose>\n  <div dangerouslySetInnerHTML={{ __html: \"...\" }} />\n</Prose>\n```\n\n----------------------------------------\n\nTITLE: Setting Highlighted Series in TypeScript React\nDESCRIPTION: Demonstrates how to use the setHighlightedSeries function to set the highlighted series in the chart.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/use-chart.mdx#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nchart.setHighlightedSeries(\"revenue\")\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Presence Component in Chakra UI\nDESCRIPTION: Demonstrates the basic usage of the Presence component with a boolean 'present' prop to control visibility.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/presence.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Presence present={true}>\n  <div>Presence content</div>\n</Presence>\n```\n\n----------------------------------------\n\nTITLE: Customizing Divider Style in Chakra UI Box (JSX)\nDESCRIPTION: In this example, the divideY and divideStyle props are used on a Chakra UI Box to add a 2px vertical divider with a 'dashed' line style. The code relies on Chakra UI and React. The divideY parameter sets the divider thickness, while divideStyle changes its CSS border style. It outputs child Box components separated by a styled dashed border.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/divide.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Box divideY=\\\"2px\\\" divideStyle=\\\"dashed\\\">\\n  <Box>Item 1</Box>\\n  <Box>Item 2</Box>\\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Color Token with color in TypeScript React\nDESCRIPTION: Demonstrates how to use the color function to retrieve a Chakra UI color token.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/use-chart.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nconst barColor = chart.color(\"blue.500\") // var(--chakra-colors-blue-500)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Media Query and Selector Conditions in Chakra UI Theming with TypeScript\nDESCRIPTION: Demonstrates how to add custom media queries and selector aliases such as container queries and child selectors using the conditions property in Chakra UI's theme config. This enhances responsive and advanced styling scenarios. The config is applied via createSystem. Input is a conditions object defining named selectors, output is a system instance capable of recognizing these custom keys.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/overview.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = defineConfig({\n  conditions: {\n    cqSm: \"@container(min-width: 320px)\",\n    child: \"& > *\",\n  },\n})\n\nexport default createSystem(defaultConfig, config)\n\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Portal Component in Chakra UI\nDESCRIPTION: This example demonstrates the basic usage of the Portal component to render content outside the DOM hierarchy.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/portal.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Portal>\n  <div>Portal content</div>\n</Portal>\n```\n\n----------------------------------------\n\nTITLE: Conditional Styling Example Using Custom Condition Key in Chakra UI with TypeScript\nDESCRIPTION: Example of applying a condition-based override via Chakra UI custom condition key (_cqSm). The Box component uses margin-top \"40px\" by default, but sets it to \"0px\" when the 'cqSm' container query matches. This relies on prior conditions definition in the theme. Used in React with Chakra UI components.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/overview.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<Box mt=\"40px\" _cqSm={{ mt: \"0px\" }}>\n  <Text>Hello World</Text>\n</Box>\n\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Kbd Component in React\nDESCRIPTION: Demonstrates the basic usage of the Kbd component to display a single keyboard key.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/kbd.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Kbd>F12</Kbd>\n```\n\n----------------------------------------\n\nTITLE: Setting Default Variant Values in a Chakra Factory Button (TypeScript)\nDESCRIPTION: Illustrates configuring a Button via chakra factory with defaultVariants for visual and size, ensuring default styling when variant props are omitted. Recipe object includes base, variants, and defaultVariants properties. Requires @chakra-ui/react.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/recipes.mdx#2025-04-23_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"use client\"\n\nimport { chakra } from \"@chakra-ui/react\"\n\nconst Button = chakra(\"button\", {\n  base: {\n    display: \"flex\",\n  },\n  variants: {\n    visual: {\n      solid: { bg: \"red.200\", color: \"white\" },\n      outline: { borderWidth: \"1px\", borderColor: \"red.200\" },\n    },\n    size: {\n      sm: { padding: \"4\", fontSize: \"12px\" },\n      lg: { padding: \"8\", fontSize: \"24px\" },\n    },\n  },\n  defaultVariants: {\n    visual: \"solid\",\n    size: \"lg\",\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Spacing Token with spacing in TypeScript React\nDESCRIPTION: Demonstrates how to use the spacing function to retrieve a Chakra UI spacing token.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/use-chart.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nconst barColor = chart.color(\"blue.500\") // var(--chakra-colors-blue-500)\nconst chartPadding = chart.spacing(\"4\") // var(--chakra-spacing-4)\n```\n\n----------------------------------------\n\nTITLE: Installing Fontsource Package with pnpm\nDESCRIPTION: Install the Bricolage Grotesque variable font from Fontsource using pnpm. This makes the font available to be imported into the project.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/guides/theming-add-custom-font-to-vite.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @fontsource-variable/bricolage-grotesque\n```\n\n----------------------------------------\n\nTITLE: Finding Maximum Value with getMax in TypeScript React\nDESCRIPTION: Demonstrates how to use the getMax function to find the maximum value for a given key in the dataset.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/use-chart.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconsole.log(chart.getMax(\"revenue\")) // 3000\n```\n\n----------------------------------------\n\nTITLE: Expanded ColorPicker.Area Component Structure\nDESCRIPTION: Shows the expanded version of the ColorPicker.Area component with its thumb and background elements explicitly defined.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/color-picker.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<ColorPicker.Area>\n  <ColorPicker.AreaThumb />\n  <ColorPicker.AreaBackground />\n</ColorPicker.Area>\n```\n\n----------------------------------------\n\nTITLE: Importing the Chakra UI Tooltip Component in React/JSX\nDESCRIPTION: Shows the standard ES6 import statement required to use the `Tooltip` component within a React/JSX file. It assumes the component is located at the specified path '@/components/ui/tooltip'.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/tooltip.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Tooltip } from \"@/components/ui/tooltip\"\n```\n\n----------------------------------------\n\nTITLE: Importing Button Component in Chakra UI\nDESCRIPTION: Shows how to import the Button and ButtonGroup components from Chakra UI React package\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/button.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button, ButtonGroup } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Setting Y-Axis Domain in Chakra UI Charts\nDESCRIPTION: Shows how to manually set the minimum and maximum values for the Y-axis.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/axes.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<YAxis domain={[0, \"dataMax + 100\"]} />\n```\n\n----------------------------------------\n\nTITLE: Hiding Elements From a Breakpoint Up in Chakra UI with 'hideFrom' Utility (JSX)\nDESCRIPTION: Shows use of the 'hideFrom' utility prop in a Chakra UI Stack to hide all its children (such as a Text element) from the 'md' breakpoint and above. Requires Chakra UI and React. The Stack and its content will not be rendered for medium (md) screens and up. The main parameters are the breakpoint string; the output is conditional render/hide behavior.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/responsive-design.mdx#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Stack hideFrom=\"md\">\n  <Text>This text will be hidden from the `md` breakpoint</Text>\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Configuring the ChakraProvider with a Custom System in React (TypeScript)\nDESCRIPTION: This snippet shows how to wrap the application in a ChakraProvider that uses a customized system. The Provider component receives children and composes ChakraProvider and ThemeProvider (from next-themes) with the custom system injected. Dependencies: @chakra-ui/react, next-themes, relevant theme config. Input: React children. Output: Composed providers for context and theming. Ensure the system object is correctly exported from your theme configuration.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/customization/overview.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { ChakraProvider } from \"@chakra-ui/react\"\nimport { ThemeProvider } from \"next-themes\"\nimport { system } from \"./theme\"\n\nexport function Provider(props: { children: React.ReactNode }) {\n  return (\n    <ChakraProvider value={system}>\n      <ThemeProvider attribute=\"class\" disableTransitionOnChange>\n        {props.children}\n      </ThemeProvider>\n    </ChakraProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Importing List Component from Chakra UI in JSX\nDESCRIPTION: This snippet shows how to import the List component from the Chakra UI library. It's the first step in using the List component in a React application.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/list.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { List } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Controlling Hyphenation with Chakra UI in JSX\nDESCRIPTION: This snippet shows how to control automatic hyphenation for text wrapping within a Chakra UI `<Text>` component using the `hyphens` prop (e.g., 'auto'). It maps to the `hyphens` CSS property.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/typography.mdx#2025-04-23_snippet_24\n\nLANGUAGE: jsx\nCODE:\n```\n<Text hyphens=\"auto\">Hello World</Text>\n```\n\n----------------------------------------\n\nTITLE: Connecting Dots in Scatter Chart with TypeScript\nDESCRIPTION: Draw a line between dots in a scatter chart by passing the line prop to the Scatter component.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/scatter-chart.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Scatter line={{ stroke: \"red\" }} />\n```\n\n----------------------------------------\n\nTITLE: Composing a Slider Thumb with Hidden Input in Chakra UI (React, TSX)\nDESCRIPTION: This snippet renders a single Slider.Thumb with an index of 0 and nests a Slider.HiddenInput within it. This is an explicit approach for rendering a thumb at a particular index. It is useful when you need to fully control the thumb's properties and behavior. The code assumes a slider context and the '@chakra-ui/react' dependency. 'index' is a required parameter indicating the thumb's position.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/slider.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Slider.Thumb index={0}>\n  <Slider.HiddenInput />\n</Slider.Thumb>\n```\n\n----------------------------------------\n\nTITLE: Semantic Color Token Pattern in Chakra UI\nDESCRIPTION: Demonstrates the pattern structure for semantic color tokens in Chakra UI, showing how light and dark mode values are defined for different color keys and variants.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/guides/theming-customize-dark-mode-colors.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  [colorKey]: {\n    [variant]: {\n      value: {\n        _light: string, // Light mode value\n        _dark: string   // Dark mode value\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Chakra UI Closed Number Input Component in TSX\nDESCRIPTION: Shows how to use a closed composition version of the Number Input by directly consuming NumberInputRoot and NumberInputField components, typically after installing the snippet via the CLI. This encapsulates logic and is easier to use for simple scenarios.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/number-input.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<NumberInputRoot>\n  <NumberInputField />\n</NumberInputRoot>\n```\n\n----------------------------------------\n\nTITLE: Hover Card Arrow with Explicit ArrowTip in React\nDESCRIPTION: This snippet shows how to explicitly include the HoverCard.ArrowTip component within the HoverCard.Arrow component.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/hover-card.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<HoverCard.Arrow>\n  <HoverCard.ArrowTip />\n</HoverCard.Arrow>\n```\n\n----------------------------------------\n\nTITLE: Basic CartesianGrid Implementation\nDESCRIPTION: Simple implementation of CartesianGrid component that renders default grid with light gray lines on both X and Y axes.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/cartesian-grid.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<CartesianGrid />\n```\n\n----------------------------------------\n\nTITLE: Locking Page Color Mode with Theme and ColorModeProvider (TSX)\nDESCRIPTION: This TypeScript snippet shows how to enforce a specific color mode across a page using both Theme and a custom ColorModeProvider component. The ForcedColorMode component wraps its children first in a ColorModeProvider with a forcedTheme prop, then inside a Theme component with the 'appearance' prop. Dependencies: @chakra-ui/react for Theme, a custom ColorModeProvider from '@/components/ui/color-mode'. Main parameters: 'forcedTheme' on the provider, 'appearance' on Theme. Input: React children. Output: Children are displayed with the enforced dark mode, and nested components respect this setting.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/theme.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ColorModeProvider } from \"@/components/ui/color-mode\"\nimport { Theme } from \"@chakra-ui/react\"\n\nexport const ForcedColorMode = ({ children }) => {\n  return (\n    <ColorModeProvider forcedTheme=\"dark\">\n      <Theme appearance=\"dark\">{/* Rest of the page */}</Theme>\n    </ColorModeProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Percentage with getValuePercent in TypeScript React\nDESCRIPTION: Shows how to use the getValuePercent function to calculate the percentage of a value relative to the dataset or a given domain.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/use-chart.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst percentage = chart.getValuePercent(\"revenue\", 5000)\nconsole.log(percentage) // 0.5\n```\n\n----------------------------------------\n\nTITLE: Creating Semantic Tokens in Chakra UI Theme\nDESCRIPTION: Demonstrates how to create semantic tokens by referencing existing core tokens using the token reference syntax. This example creates a 'danger' semantic token that references a 'red' core token.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/blog/03-building-consistent-uis-with-design-tokens.mdx#2025-04-23_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport { createSystem, defaultConfig, defineConfig } from \"@chakra-ui/react\"\n\nconst config = defineConfig({\n  theme: {\n    tokens: {\n      colors: {\n        red: { value: \"#EE0F0F\" },\n      },\n    },\n    semanticTokens: {\n      colors: {\n        danger: { value: \"{colors.red}\" },\n      },\n    },\n  },\n})\n\nexport default createSystem(defaultConfig, config)\n```\n\n----------------------------------------\n\nTITLE: Defining Bar Chart Data with Range Values in TypeScript\nDESCRIPTION: This code shows how to define data for a bar chart with range values, where each bar represents a range instead of a single value.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/bar-chart.mdx#2025-04-23_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nconst chart = useChart({\n  data: [\n    { name: \"UK\", value: [10, 20] },\n    // ...\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Pin Input Component in React\nDESCRIPTION: This snippet shows how to import the PinInput component from Chakra UI.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/pin-input.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PinInput } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Importing Box Component from Chakra UI\nDESCRIPTION: Shows how to import the Box component from the Chakra UI React library. This is the first step required before using the Box component in your React application.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/box.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Box } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Font Size Token Documentation in React\nDESCRIPTION: This snippet utilizes the `<FontSizeTokenDoc />` React component to render documentation for the various font size tokens provided by Chakra UI. The component is expected to fetch and display the relevant font size values.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/typography.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<FontSizeTokenDoc />\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Group Component\nDESCRIPTION: Demonstrates the basic usage of the Group component to wrap child elements.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/group.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Group>\n  <div />\n  <div />\n</Group>\n```\n\n----------------------------------------\n\nTITLE: Controlling Grid Line Visibility\nDESCRIPTION: Demonstration of how to show/hide horizontal and vertical grid lines using boolean props.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/cartesian-grid.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<CartesianGrid vertical={false} horizontal={true} />\n```\n\n----------------------------------------\n\nTITLE: Sorting Chart Data in TypeScript React\nDESCRIPTION: Shows how to automatically sort the chart data based on a specified key and direction using the sort option in useChart.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/use-chart.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nconst chart = useChart({\n  data: [\n    { date: \"2024-01-01\", revenue: 1000 },\n    { date: \"2024-01-02\", revenue: 2000 },\n    { date: \"2024-01-03\", revenue: 3000 },\n  ],\n  sort: { by: \"date\", direction: \"asc\" },\n  series: [{ name: \"revenue\", color: \"blue.500\" }],\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Closed Switch Component via Chakra UI CLI\nDESCRIPTION: Provides the bash command using the Chakra UI CLI (`@chakra-ui/cli`) to automatically add the pre-defined 'closed' Switch component snippet to the user's project. This simplifies using the Switch component in a less granular way.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/switch.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx @chakra-ui/cli snippet add switch\n```\n\n----------------------------------------\n\nTITLE: Importing Container Component - Chakra UI React\nDESCRIPTION: Shows how to import the Container component from Chakra UI React package.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/container.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Container } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Applying Nested Semantic Tokens in Chakra UI Components (TSX)\nDESCRIPTION: This snippet demonstrates the usage of nested semantic tokens defined in the theme. The outer `Box` uses the default `bg` token, while the inner `Box` components use the nested variants `bg.primary` and `bg.secondary` for their `bg` (background) prop. This usage pattern leverages the hierarchical structure defined in the theme.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/semantic-tokens.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\n<Box bg=\"bg\">\n  <Box bg=\"bg.primary\">Hello World</Box>\n  <Box bg=\"bg.secondary\">Hello World</Box>\n</Box>\n```\n```\n\n----------------------------------------\n\nTITLE: Using Chakra UI Render Prop Component in Client Component\nDESCRIPTION: This snippet demonstrates how to use a Chakra UI render prop component (ProgressContext) in a client component. It shows how to access and render the context value.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/concepts/server-components.mdx#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n\"use client\"\n\nimport { ProgressContext } from \"@chakra-ui/react\"\n\nexport function MyComponent() {\n  return <ProgressContext>{({ value }) => <div>{value}</div>}</ProgressContext>\n}\n```\n\n----------------------------------------\n\nTITLE: Basic FormatByte Usage - React/Chakra UI\nDESCRIPTION: Demonstrates basic usage of the FormatByte component with a numeric value input\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/format-byte.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<FormatByte value={1000} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Aspect Ratio Tokens in Chakra UI Theme\nDESCRIPTION: Shows how to define aspect ratio tokens for maintaining element proportions using standard ratios like 1:1 and 16:9.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/tokens.mdx#2025-04-23_snippet_26\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineTokens } from \"@chakra-ui/react\"\n\nconst tokens = defineTokens({\n  aspectRatios: {\n    \"1:1\": { value: \"1 / 1\" },\n    \"16:9\": { value: \"16 / 9\" },\n  },\n})\n\nexport default createSystem({\n  theme: { tokens },\n})\n```\n\n----------------------------------------\n\nTITLE: Using Closed Component Version of Checkbox Card in Chakra UI\nDESCRIPTION: This snippet shows how to use the closed component version of the Checkbox Card after adding it to your project.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/checkbox-card.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<CheckboxCard label=\"Checkbox Card\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering a Bar Chart with Chakra UI\nDESCRIPTION: Demonstrates how to render a BarChart from recharts within the Chart.Root component from Chakra UI.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/installation.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Chart.Root chart={chart}>\n  <BarChart data={chart.data}>\n    {chart.series.map((item) => (\n      <Bar\n        key={item.name}\n        dataKey={chart.key(item.name)}\n        fill={chart.color(item.color)}\n      />\n    ))}\n  </BarChart>\n</Chart.Root>\n```\n\n----------------------------------------\n\nTITLE: Basic Sparkline Chart Structure in Chakra UI\nDESCRIPTION: Shows the minimal structure required to create a basic sparkline chart using Chakra UI components. It uses Chart.Root as the container and embeds recharts' AreaChart and Area components.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/sparkline.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Chart.Root>\n  <AreaChart>\n    <Area />\n  </AreaChart>\n</Chart.Root>\n```\n\n----------------------------------------\n\nTITLE: Importing Status Component in Chakra UI - TypeScript\nDESCRIPTION: Demonstrates how to import the Status component from the @chakra-ui/react library in a TypeScript React application. This import is necessary before using Status components in your project. No configuration is required beyond ensuring @chakra-ui/react is installed as a project dependency.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/status.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Status } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Forcing Page-Specific Dark Mode in Chakra UI\nDESCRIPTION: This snippet illustrates how to force dark mode for an entire page using the ColorModeProvider component with the forcedTheme prop.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/dark-mode.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<ColorModeProvider forcedTheme=\"dark\">\n  <Box bg=\"black\" className=\"dark\">\n    <Box bg=\"bg.subtle\">\n      <Text>Hello</Text>\n    </Box>\n  </Box>\n</ColorModeProvider>\n```\n\n----------------------------------------\n\nTITLE: Customizing X-Axis Label Styles in Chakra UI Charts\nDESCRIPTION: Demonstrates how to customize the appearance of X-axis labels.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/axes.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<XAxis dataKey=\"name\" tick={{ fontSize: 12, fill: \"blue\" }} />\n```\n\n----------------------------------------\n\nTITLE: Upgrading Chakra UI to v3.2.0 using npm\nDESCRIPTION: Command to upgrade Chakra UI to the latest version (3.2.0) using npm. This should be run in the project directory to update the package.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/blog/02-chakra-3.2.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @chakra-ui/react@latest\n```\n\n----------------------------------------\n\nTITLE: Rendering Multiple Rating Items in Chakra UI\nDESCRIPTION: Shows how to manually render multiple rating items using Array.from and map.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/rating.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<RatingGroup.Control>\n  {Array.from({ length: 5 }).map((_, index) => (\n    <RatingGroup.Item key={index} index={index + 1}>\n      <RatingGroup.ItemIndicator />\n    </RatingGroup.Item>\n  ))}\n</RatingGroup.Control>\n```\n\n----------------------------------------\n\nTITLE: Configuring Chakra UI Style Engine for Shadow DOM\nDESCRIPTION: This TypeScript code configures the Chakra UI style engine to target the Shadow DOM, setting up the CSS variables root and custom conditions for light mode.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/get-started/environments/shadow-dom.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createSystem, defaultConfig, defineConfig } from \"@chakra-ui/react\"\n\nconst varRoot = \":host\"\n\nconst config = defineConfig({\n  cssVarsRoot: varRoot,\n  conditions: {\n    light: `${varRoot} &, .light &`,\n  },\n  preflight: { scope: varRoot },\n  globalCss: {\n    [varRoot]: defaultConfig.globalCss?.html ?? {},\n  },\n})\n\nexport const system = createSystem(defaultConfig, config)\n```\n\n----------------------------------------\n\nTITLE: Rendering Font Token Documentation in React\nDESCRIPTION: This snippet uses the custom React component `<FontTokenDoc />` to display documentation related to the available font tokens within the Chakra UI library. It assumes the component is defined elsewhere and handles the rendering of font details.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/typography.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<FontTokenDoc />\n```\n\n----------------------------------------\n\nTITLE: Importing Center Components in Chakra UI (JSX)\nDESCRIPTION: This snippet shows how to import the Center, AbsoluteCenter, Circle, and Square components from Chakra UI.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/center.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { AbsoluteCenter, Center, Circle, Square } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Applying General Backdrop Filters using `backdropFilter` Prop in JSX\nDESCRIPTION: Demonstrates applying visual effects like blur or color shift to the area *behind* an element using the `backdropFilter` prop on a Chakra UI `Box` component. This prop accepts standard CSS `backdrop-filter` function values.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/filters.mdx#2025-04-23_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<Box backdropFilter=\"blur(5px)\" />\n<Box backdropFilter=\"grayscale(80%)\" />\n```\n\n----------------------------------------\n\nTITLE: Adjusting Y-Axis Width in Chakra UI Charts\nDESCRIPTION: Controls the width allocated for Y-axis labels.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/axes.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<YAxis width={50} />\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Chakra UI in Remix\nDESCRIPTION: Updates the tsconfig.json file with necessary compiler options for using Chakra UI with TypeScript in a Remix project.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/get-started/frameworks/remix.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"target\": \"ESNext\",\n    \"module\": \"ESNext\",\n    \"moduleResolution\": \"Bundler\",\n    \"skipLibCheck\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing the Code Component in Chakra UI\nDESCRIPTION: Shows how to import the Code component from Chakra UI package.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/code.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Code } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Using Raw Color Token Values in Chakra UI Components\nDESCRIPTION: Demonstrates how to use the raw color token values (brand.500) directly in Chakra UI components for styling.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/guides/theming-custom-colors.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<Box color=\"brand.500\">Hello world</Box>\n```\n\n----------------------------------------\n\nTITLE: Finding Minimum Value with getMin in TypeScript React\nDESCRIPTION: Shows how to use the getMin function to find the minimum value for a given key in the dataset.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/use-chart.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconsole.log(chart.getMin(\"revenue\")) // 1000\n```\n\n----------------------------------------\n\nTITLE: Using Raised Boolean Variant in Chakra UI Button (TSX)\nDESCRIPTION: Depicts application of a boolean `raised` variant in a Chakra UI Button. This piece utilizes the previously defined variant in usage code. The `Button` automatically receives the styles for `boxShadow` when the `raised` prop is set.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/customization/recipes.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Button raised>Click me</Button>\n```\n\n----------------------------------------\n\nTITLE: Configuring Sort Order for Bar List in Chakra UI Charts (TS)\nDESCRIPTION: This snippet shows how to use the useChart hook to configure the sort order of bars in ascending order based on their values.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/bar-list.mdx#2025-04-23_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nconst chart = useChart<BarListData>({\n  sort: { by: \"value\", direction: \"asc\" },\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Trend Line to Scatter Chart in TypeScript\nDESCRIPTION: Implement a trend line in a scatter chart using the Scatter component from Recharts. This example uses the least squares regression method.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/scatter-chart.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Scatter data={trendLine} shape={() => <Fragment />} />\n```\n\n----------------------------------------\n\nTITLE: Setting up Chakra UI Provider in Vite React App\nDESCRIPTION: Wraps the main React component with the Chakra UI Provider for styling and theme support.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/get-started/frameworks/vite.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Provider } from \"@/components/ui/provider\"\nimport React from \"react\"\nimport ReactDOM from \"react-dom/client\"\nimport App from \"./App\"\n\nReactDOM.createRoot(document.getElementById(\"root\")!).render(\n  <React.StrictMode>\n    <Provider>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n)\n```\n\n----------------------------------------\n\nTITLE: Importing Progress Component in Chakra UI\nDESCRIPTION: This snippet shows how to import the Progress component from Chakra UI.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/progress.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Progress } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Rendering the Toaster Component - Chakra UI with React (JSX)\nDESCRIPTION: Renders the `Toaster` React component, which handles the display of all toast notifications within the application. The component must be included near the root of your component tree for toasts to appear. No props are required for basic usage.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/toast.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Toaster />\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Chakra UI in Iframe\nDESCRIPTION: This command installs the necessary packages for using Chakra UI in an iframe, including @chakra-ui/react, @emotion/react, @emotion/cache, and react-frame-component.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/get-started/environments/iframe.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @chakra-ui/react @emotion/react @emotion/cache react-frame-component\n```\n\n----------------------------------------\n\nTITLE: Setting Text Indentation with Chakra UI in JSX\nDESCRIPTION: These snippets illustrate indenting the first line of text in a Chakra UI `<Text>` component using the `textIndent` prop. Examples show using a hardcoded CSS length ('1rem') and a theme token ('3') likely corresponding to a value in the `spacing` category.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/typography.mdx#2025-04-23_snippet_20\n\nLANGUAGE: jsx\nCODE:\n```\n// hardcoded values\n<Text textIndent=\"1rem\">Hello World</Text>\n\n// token values\n<Text textIndent=\"3\">Hello World</Text>\n```\n\n----------------------------------------\n\nTITLE: Creating an Overlay Manager with createOverlay in React\nDESCRIPTION: Demonstrates how to create a reusable dialog overlay component using the new createOverlay function. This code creates a configurable dialog that can be opened programmatically from anywhere in the application.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/blog/07-chakra-3.16.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, Dialog, Portal, createOverlay } from \"@chakra-ui/react\"\n\ninterface DialogProps {\n  title: string\n  description?: string\n  content?: React.ReactNode\n}\n\nconst dialog = createOverlay<DialogProps>((props) => {\n  const { title, description, content, ...rest } = props\n  return (\n    <Dialog.Root {...rest}>\n      <Portal>\n        <Dialog.Backdrop />\n        <Dialog.Positioner>\n          <Dialog.Content>\n            {title && (\n              <Dialog.Header>\n                <Dialog.Title>{title}</Dialog.Title>\n              </Dialog.Header>\n            )}\n            <Dialog.Body spaceY=\"4\">\n              {description && (\n                <Dialog.Description>{description}</Dialog.Description>\n              )}\n              {content}\n            </Dialog.Body>\n          </Dialog.Content>\n        </Dialog.Positioner>\n      </Portal>\n    </Dialog.Root>\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Easing Tokens in Chakra UI Theme (TypeScript)\nDESCRIPTION: Shows how to define easing function tokens using `defineTokens`. It includes examples using both a string value representing a cubic bezier (`easeIn`) and an array of numbers representing the cubic bezier points (`easeOut`). These tokens are used for the `transition-timing-function` CSS property and added via `createSystem`.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/tokens.mdx#2025-04-23_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineTokens } from \"@chakra-ui/react\"\n\nconst tokens = defineTokens({\n  easings: {\n    // string value\n    easeIn: { value: \"cubic-bezier(0.4, 0, 0.2, 1)\" },\n    // array value\n    easeOut: { value: [0.4, 0, 0.2, 1] },\n  },\n})\n\nexport default createSystem({\n  theme: { tokens },\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Global RTL Direction using HTML `dir` Attribute in TSX\nDESCRIPTION: Demonstrates how to apply Right-to-Left (RTL) text direction globally or to a specific section by setting the `dir=\"rtl\"` attribute on the `<html>` tag or any parent element. This affects the rendering direction of Chakra UI components like `Heading` and `Slider`.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/guides/overview-rtl-support.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<html dir=\"rtl\">\n  <Heading>RTL - الى أن مرجع ويتّفق, ان </Heading>\n  <Slider />\n</html>\n```\n\n----------------------------------------\n\nTITLE: Importing Input Component from Chakra UI in TypeScript\nDESCRIPTION: This snippet shows how to import the Input component from Chakra UI. It's the basic setup required before using the Input component in your React application.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/input.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Input } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Basic Badge Usage in Chakra UI\nDESCRIPTION: Demonstrates the basic usage of the Badge component with text content.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/badge.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Badge>Badge</Badge>\n```\n\n----------------------------------------\n\nTITLE: Setting Scroll Snap Strictness in Chakra UI JSX\nDESCRIPTION: Illustrates using the `scrollSnapStrictness` prop on a scrollable `Box` to define the strictness ('mandatory' or 'proximity') of scroll snapping. This prop requires `scrollSnapType` to be set and maps to the CSS variable `--scroll-snap-strictness`.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/interactivity.mdx#2025-04-23_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n<Box maxH=\"100px\" overflowY=\"auto\" scrollSnapStrictness=\"proximity\">\n  <Box>Item 1</Box>\n  <Box>Item 2</Box>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Importing LinkBox and LinkOverlay in Chakra UI\nDESCRIPTION: This snippet shows how to import the LinkBox and LinkOverlay components from Chakra UI.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/link-overlay.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { LinkBox, LinkOverlay } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Chakra UI in Next.js\nDESCRIPTION: This JSON snippet shows the required TypeScript compiler options for using Chakra UI with Next.js, including module resolution and path aliasing.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/get-started/frameworks/next-app.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"target\": \"ESNext\",\n    \"module\": \"ESNext\",\n    \"moduleResolution\": \"Bundler\",\n    \"skipLibCheck\": true,\n    \"paths\": {\n      \"@/*\": [\"./src/*\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Closed Breadcrumb Component to Chakra UI Project\nDESCRIPTION: This command uses the Chakra UI CLI to automatically add a closed Breadcrumb component to your project.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/breadcrumb.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx @chakra-ui/cli snippet add breadcrumb\n```\n\n----------------------------------------\n\nTITLE: Using Custom Chakra UI Component in Next.js Server Component\nDESCRIPTION: This snippet demonstrates how to import and use a custom Chakra UI component (BlogPost) within a Next.js server component. It reads content from a file and renders it using the BlogPost component.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/concepts/server-components.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { BlogPost } from \"./blog-post\"\n\nexport default async function Page() {\n  const content = fs.readFileSync(\"path/to/file.md\", \"utf-8\")\n  return <BlogPost>{content}</BlogPost>\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Semantic Tokens in Chakra UI Components (TSX)\nDESCRIPTION: Shows how to apply the custom semantic token `checkbox-border` (defined with light/dark mode variants) to the `borderColor` prop of a Chakra UI `Square` component. The border color will dynamically adapt based on the active color mode (light or dark).\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/customization/colors.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\n<Square size=\"4\" borderColor=\"checkbox-border\">\n  <LuCheck />\n</Square>\n```\n```\n\n----------------------------------------\n\nTITLE: Using Custom Size Variant in Alert Slot Recipe (TSX)\nDESCRIPTION: Demonstrates consumption of the extended Alert slot recipe by specifying the new `xl` size. The themed Alert now displays root styles as defined via the slot variant. No special logic is required in the component aside from using the new variant value.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/customization/recipes.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<Alert size=\"xl\" title=\"...\" />\n```\n\n----------------------------------------\n\nTITLE: Basic EnvironmentProvider Usage\nDESCRIPTION: Simple example showing how to wrap an application with EnvironmentProvider.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/environment-provider.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<EnvironmentProvider>{/* Your App */}</EnvironmentProvider>\n```\n\n----------------------------------------\n\nTITLE: Importing Chakra UI Switch Component in TSX\nDESCRIPTION: Shows how to import the `Switch` component from the `@chakra-ui/react` library for use within a React application using TypeScript (TSX). This is the first step required to use the Switch component.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/switch.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Switch } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Importing Bar List Components in Chakra UI Charts (TSX)\nDESCRIPTION: This snippet shows how to import the necessary components from the Chakra UI charts library to use the Bar List feature.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/bar-list.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { BarList, Chart, useChart } from \"@chakra-ui/charts\"\n```\n\n----------------------------------------\n\nTITLE: Applying Nested Tokens in Chakra UI Components (TSX)\nDESCRIPTION: Demonstrates how to apply nested tokens defined in the theme. Using the base key (`red`) applies the `DEFAULT` value, while specifying the full path (`red.100`) applies the specific variant's value to component props like `bg` and `color` on a `Box` component.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/tokens.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<Box\n  // 👇🏻 This will use the `DEFAULT` value\n  bg=\"red\"\n  color=\"red.100\"\n>\n  Hello World\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Importing Chart Components\nDESCRIPTION: Imports the necessary components from @chakra-ui/charts and recharts packages to create charts.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/installation.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Chart, useChart } from \"@chakra-ui/charts\"\nimport { Bar, BarChart, XAxis, YAxis } from \"recharts\"\n```\n\n----------------------------------------\n\nTITLE: Setting up Chakra UI Provider in Remix root component\nDESCRIPTION: Wraps the Remix application with a Provider component that includes ChakraProvider for styling and ThemeProvider for color mode management.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/get-started/frameworks/remix.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\"\nimport ReactDOM from \"react-dom/client\"\nimport App from \"./App\"\nimport { Provider } from \"@/components/ui/provider\"\n\nexport default function App() {\n  return (\n    <Provider>\n      <Outlet />\n    </Provider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Updating TypeScript Configuration for Chakra UI\nDESCRIPTION: This JSON configuration updates the tsconfig.json file to include necessary compiler options for using Chakra UI with TypeScript.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/get-started/environments/iframe.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"module\": \"ESNext\",\n    \"moduleResolution\": \"Bundler\",\n    \"skipLibCheck\": true,\n    \"paths\": {\n      \"@/*\": [\"./src/*\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Orientation-Based Styles in Chakra UI\nDESCRIPTION: Demonstrates how to apply styles based on the user's device orientation using the _portrait modifier.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/conditional-styles.mdx#2025-04-23_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n<Box pb=\"4\" _portrait={{ pb: \"8\" }}>\n  Hello\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Data Attribute Approach for Dynamic Styling\nDESCRIPTION: Component implementation using data-* attributes to apply dynamic styling based on state.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/guides/theming-recipe-dynamic-styling.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst App = () => {\n  const [isPressed, setPressed] = useState(false)\n  return <Button data-pressed={isPressed || undefined}>Click Me</Button>\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Hue Rotate Effect using the `hueRotate` Prop in JSX\nDESCRIPTION: Shows how to apply a hue rotation effect using the `hueRotate` prop. This requires setting the `filter` prop to `auto`. The value specifies the angle of rotation (e.g., '30deg').\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/filters.mdx#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Box filter=\"auto\" hueRotate=\"30deg\" />\n```\n\n----------------------------------------\n\nTITLE: Using Closed Checkbox Component in React\nDESCRIPTION: Demonstrates how to use the Checkbox component in a closed composition style.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/checkbox.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Checkbox>Accept terms and conditions</Checkbox>\n```\n\n----------------------------------------\n\nTITLE: Importing EmptyState Component - Chakra UI TSX\nDESCRIPTION: Shows how to import the EmptyState component from Chakra UI library.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/empty-state.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { EmptyState } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Controlling User Text Selection in Chakra UI JSX\nDESCRIPTION: Shows how to use the `userSelect` prop on a `Box` component to control whether the text content within the element can be selected by the user. Setting it to 'none' prevents text selection.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/interactivity.mdx#2025-04-23_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\n<Box userSelect=\"none\">\n  <p>Can't Select me</p>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Importing FormatByte Component - React/Chakra UI\nDESCRIPTION: Shows how to import the FormatByte component from Chakra UI library\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/format-byte.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { FormatByte } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Chakra UI with Shadow DOM\nDESCRIPTION: This TypeScript configuration update is necessary when using Chakra UI with Shadow DOM, setting the module to ESNext and enabling proper module resolution.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/get-started/environments/shadow-dom.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"module\": \"ESNext\",\n    \"moduleResolution\": \"Bundler\",\n    \"skipLibCheck\": true,\n    \"paths\": {\n      \"@/*\": [\"./src/*\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Component Snippets with Chakra CLI\nDESCRIPTION: Examples of using the 'chakra snippet' command to add useful component compositions, including options for adding all snippets, specific snippets, listing available snippets, and specifying a custom output directory.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/get-started/cli.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Add all snippets\nchakra snippet add --all\n\n# Add a specific snippet\nchakra snippet add button\n\n# List all available snippets\nchakra snippet list\n\n# Specify a custom directory\nchakra snippet add dialog --outdir ./components/custom\n```\n\n----------------------------------------\n\nTITLE: Embedding a Code Example Preview - Chakra UI - JSX\nDESCRIPTION: This JSX snippet embeds the ExamplePreview component with the prop name set to \"tokens/layer-style\". It demonstrates how to include a live or static preview of code or UI styling examples inside Chakra UI documentation. The component depends on Chakra UI's internal documentation setup, and requires the relevant preview component and its dependencies to be available in the project. The main parameters is 'name', indicating the example location or identifier. No direct input/output; usage is limited to documentation or storybook contexts.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/layer-styles.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<ExamplePreview name=\\\"tokens/layer-style\\\" />\n```\n\n----------------------------------------\n\nTITLE: Applying Orientation-Based Styles in Chakra UI\nDESCRIPTION: Demonstrates how to apply styles based on data-orientation attribute using _horizontal and _vertical modifiers.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/conditional-styles.mdx#2025-04-23_snippet_20\n\nLANGUAGE: jsx\nCODE:\n```\n<Box\n  data-orientation=\"horizontal\"\n  _horizontal={{ bg: \"red.500\" }}\n  _vertical={{ bg: \"blue.500\" }}\n>\n  Hello\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Defining Radii Tokens in Chakra UI Theme (TypeScript)\nDESCRIPTION: Shows how to define radii tokens (e.g., `sm`) using `defineTokens`. These tokens represent border radius values as strings and are used for the `border-radius` CSS property. The defined tokens are added to the theme via `createSystem`.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/tokens.mdx#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineTokens } from \"@chakra-ui/react\"\n\nconst tokens = defineTokens({\n  radii: {\n    sm: { value: \"4px\" },\n  },\n})\n\nexport default createSystem({\n  theme: { tokens },\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Mark Component from Chakra UI in JavaScript\nDESCRIPTION: This snippet shows how to import the Mark component from the Chakra UI library.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/mark.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Mark } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Importing Card Component in React\nDESCRIPTION: Shows how to import the Card component from Chakra UI in a React application.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/card.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Card } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Y-Axis Grid Lines in Chakra UI Charts\nDESCRIPTION: Demonstrates how to remove tick lines and axis lines from the Y-axis.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/axes.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<YAxis tickLine={false} axisLine={false} />\n```\n\n----------------------------------------\n\nTITLE: Importing Radar Chart Components from Chakra UI and Recharts\nDESCRIPTION: Shows how to import the necessary components from Chakra UI's chart library and Recharts to create a radar chart.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/radar-chart.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Chart, useChart } from \"@chakra-ui/charts\"\nimport { Radar, RadarChart } from \"recharts\"\n```\n\n----------------------------------------\n\nTITLE: Importing Google Font from next/font/google in Next.js\nDESCRIPTION: Import the Bricolage Grotesque font from the Next.js font system to use it in your application.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/guides/theming-add-custom-font-to-nextjs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Bricolage_Grotesque } from \"next/font/google\"\n```\n\n----------------------------------------\n\nTITLE: Defining FrontMatter in Markdown for Chakra UI Components Page\nDESCRIPTION: FrontMatter configuration for the Components page in the Chakra UI documentation. It sets the page title to 'Components', provides a description about the accessible UI components, and hides the table of contents for this page.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/concepts/overview.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Components\ndescription: Accessible, modern and easy to style UI components.\nhideToc: true\n---\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript Dependencies\nDESCRIPTION: Command to install TypeScript as a development dependency in the Next.js project.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/sandbox/next-pages/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev typescript\n```\n\n----------------------------------------\n\nTITLE: Basic React Component with State for Button Styling\nDESCRIPTION: Initial React component setup with a state variable for tracking button press state, but without styling implementation.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/guides/theming-recipe-dynamic-styling.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst App = () => {\n  const [isPressed, setPressed] = useState(false)\n  // How do style the button separately based on the pressed state?\n  return <Button>Click Me</Button>\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Heading Base Style in TypeScript\nDESCRIPTION: Shows how to customize the base style of the Heading component using the createSystem and defineRecipe functions from Chakra UI.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/heading.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSystem, defineRecipe } from \"@chakra-ui/react\"\nimport { defaultConfig } from \"@chakra-ui/react\"\n\nconst headingRecipe = defineRecipe({\n  base: {\n    fontWeight: \"normal\",\n    textStyle: \"4xl\",\n  },\n})\n\nconst system = createSystem(defaultConfig, {\n  theme: {\n    recipes: { heading: headingRecipe },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Importing AspectRatio Component in React\nDESCRIPTION: How to import the AspectRatio component from Chakra UI in a React application.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/aspect-ratio.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { AspectRatio } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Dark Mode Toggle in Storybook\nDESCRIPTION: Use the withThemeByClassName decorator from @storybook/addon-themes to add a color mode toggle to the Storybook toolbar, allowing switching between light and dark themes.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/get-started/frameworks/storybook.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { withThemeByClassName } from \"@storybook/addon-themes\"\nimport type { Preview, ReactRenderer } from \"@storybook/react\"\n\nconst preview: Preview = {\n  decorators: [\n    // ...\n    withThemeByClassName({\n      defaultTheme: \"light\",\n      themes: { light: \"\", dark: \"dark\" },\n    }),\n  ],\n}\n\nexport default preview\n```\n\n----------------------------------------\n\nTITLE: Configuring Z-Index Tokens in Chakra UI Theme\nDESCRIPTION: Shows how to define z-index tokens for managing element stacking order. Used to control the depth of elements on the z-axis.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/tokens.mdx#2025-04-23_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineTokens } from \"@chakra-ui/react\"\n\nconst tokens = defineTokens({\n  zIndex: {\n    modal: { value: 1000 },\n  },\n})\n\nexport default createSystem({\n  theme: { tokens },\n})\n```\n\n----------------------------------------\n\nTITLE: Applying Y-axis Translation with Chakra UI Box Component in JSX\nDESCRIPTION: Illustrates translating a Chakra UI `Box` component along the Y-axis using the `translateY` prop. This requires setting the `translate` prop to `auto` first. Accepts standard CSS length/percentage values (e.g., \"-40%\", \"4rem\") or theme spacing token values (e.g., \"4\", \"-10\").\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/transforms.mdx#2025-04-23_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n// hardcoded values\n<Box translate=\"auto\" translateY=\"-40%\" />\n<Box translate=\"auto\" translateY=\"4rem\" />\n\n// token values\n<Box translate=\"auto\" translateY=\"4\" />\n<Box translate=\"auto\" translateY=\"-10\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Virtual Colors in Chakra UI CSS Variables (JSX)\nDESCRIPTION: Illustrates how to use virtual colors in CSS variables, which is useful for creating theme components. The example shows setting a color variable using the colorPalette prop.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/css-variables.mdx#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Box colorPalette=\"blue\" css={{ \"--color\": \"colors.colorPalette.400\" }}>\n  <p style={{ color: \"var(--color)\" }}>Hello</p>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Updating useSlotRecipe to Use Theme Key (Diff)\nDESCRIPTION: Shows the code modification required when using the `useSlotRecipe` hook after the corresponding recipe has been integrated into the theme. Instead of passing the `recipe` object directly, the hook is now invoked with the `key` property referencing the recipe's key in the theme (\"checkbox\").\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/slot-recipes.mdx#2025-04-23_snippet_13\n\nLANGUAGE: diff\nCODE:\n```\n```diff title=\"checkbox.tsx\"\nconst Checkbox = () => {\n-  const recipe = useRecipe({ recipe: checkboxRecipe })\n+  const recipe = useRecipe({ key: \"checkbox\" })\n  // ...\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Ejecting Default Theme Tokens and Recipes with Chakra CLI\nDESCRIPTION: Example of using the 'chakra eject' command to generate files containing default theme tokens and recipes for full control over customization.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/get-started/cli.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Copy the tokens and recipes to your project\nchakra eject --outdir src/theme\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Global CSS Styles in Chakra UI with TypeScript\nDESCRIPTION: This snippet demonstrates how to define custom global CSS rules, specifically targeting all placeholder pseudo-elements and selection pseudo-elements. It uses `defineConfig` to specify the styles and `createSystem` to merge these custom styles with the `defaultConfig`, creating a new Chakra UI system configuration.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/customization/global-css.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createSystem, defaultConfig, defineConfig } from \"@chakra-ui/react\"\n\nconst customConfig = defineConfig({\n  globalCss: {\n    \"*::placeholder\": {\n      opacity: 1,\n      color: \"fg.subtle\",\n    },\n    \"*::selection\": {\n      bg: \"green.200\",\n    },\n  },\n})\n\nexport const system = createSystem(defaultConfig, customConfig)\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Compiler Options for Chakra UI\nDESCRIPTION: TypeScript configuration options required for using Chakra UI, including module settings and path aliases.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/get-started/frameworks/next-pages.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"target\": \"ESNext\",\n    \"module\": \"ESNext\",\n    \"moduleResolution\": \"Bundler\",\n    \"skipLibCheck\": true,\n    \"paths\": {\n      \"@/*\": [\"./src/*\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Type Definitions for Chakra UI Theming\nDESCRIPTION: Example command for using Chakra UI CLI to generate and update type definitions based on theme configuration. Ensures type safety and developer experience by keeping TypeScript types synchronized with the theme file. Usage: npx @chakra-ui/cli typegen ./theme.ts.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/overview.mdx#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx @chakra-ui/cli typegen ./theme.ts\n\n```\n\n----------------------------------------\n\nTITLE: Using useEnvironmentContext Hook\nDESCRIPTION: Example showing how to access the environment context using the useEnvironmentContext hook.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/environment-provider.mdx#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEnvironmentContext } from \"@chakra-ui/react\"\n\nexport const Demo = () => {\n  const { getRootNode } = useEnvironmentContext()\n\n  return <pre>{JSON.stringify(getRootNode(), null, 2)}</pre>\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Axis and Tick Lines in Chakra UI Charts\nDESCRIPTION: Shows how to remove both tick lines and axis lines from X and Y axes.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/axes.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n<XAxis tickLine={false} axisLine={false} />\n<YAxis tickLine={false} axisLine={false} />\n```\n\n----------------------------------------\n\nTITLE: Hiding X-Axis in Chakra UI Charts\nDESCRIPTION: Shows how to completely hide the X-axis from the chart.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/axes.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<XAxis hide />\n```\n\n----------------------------------------\n\nTITLE: Setting Element Appearance in Chakra UI JSX\nDESCRIPTION: Illustrates how to use the `appearance` prop to control the native appearance of an element, specifically removing the default styling of a `chakra.select` component by setting `appearance` to 'none'.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/interactivity.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<chakra.select appearance=\"none\">\n  <option value=\"1\">Option 1</option>\n  <option value=\"2\">Option 2</option>\n  <option value=\"3\">Option 3</option>\n</chakra.select>\n```\n\n----------------------------------------\n\nTITLE: Importing Blockquote Component in React\nDESCRIPTION: Shows how to import the Blockquote component from Chakra UI in a React application.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/blockquote.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Blockquote } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Implementing the Custom Font System in ChakraProvider\nDESCRIPTION: Pass the system configuration to the ChakraProvider to apply the custom font throughout the application. This ensures all components use the configured font settings.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/guides/theming-add-custom-font-to-vite.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport function Provider(props: ColorModeProviderProps) {\n  return (\n    <ChakraProvider value={system}>\n      <ColorModeProvider {...props} />\n    </ChakraProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Updating createSlotRecipeContext to Use Theme Key (Diff)\nDESCRIPTION: Illustrates the change needed when using `createSlotRecipeContext` for a recipe integrated into the theme. The configuration object passed to the function replaces the `recipe` property (containing the recipe object) with the `key` property, specifying the recipe's key in the theme (\"checkbox\").\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/slot-recipes.mdx#2025-04-23_snippet_14\n\nLANGUAGE: diff\nCODE:\n```\n```diff title=\"checkbox.tsx\"\nconst { withProvider, withContext } = createSlotRecipeContext({\n-  recipe: checkboxRecipe,\n+  key: \"checkbox\",\n})\n```\n```\n\n----------------------------------------\n\nTITLE: Building React Router Application for Production\nDESCRIPTION: Command to create an optimized production build of the React Router application.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/sandbox/react-router/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Combining `LocaleProvider` and `dir` Attribute for Full RTL Support in TSX\nDESCRIPTION: Shows a complete example combining `LocaleProvider` and the `dir` attribute for comprehensive RTL support in Chakra UI. `LocaleProvider` sets the locale ('ar-Ar') for Ark UI based components, while `dir=\"rtl\"` on a container like `Stack` ensures correct layout and text direction for all nested components.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/guides/overview-rtl-support.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<LocaleProvider locale=\"ar-Ar\">\n  <Stack dir=\"rtl\">\n    <Heading>RTL - الى أن مرجع ويتّفق, ان </Heading>\n    <Slider />\n  </Stack>\n</LocaleProvider>\n```\n\n----------------------------------------\n\nTITLE: Configuring Animation Tokens in Chakra UI Theme\nDESCRIPTION: Demonstrates how to define animation tokens for keyframe animations with timing and iteration properties.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/tokens.mdx#2025-04-23_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineTokens } from \"@chakra-ui/react\"\n\nconst tokens = defineTokens({\n  animations: {\n    spin: {\n      value: \"spin 1s linear infinite\",\n    },\n  },\n})\n\nexport default createSystem({\n  theme: { tokens },\n})\n```\n\n----------------------------------------\n\nTITLE: Chakra UI CLI Usage and Commands\nDESCRIPTION: Overview of the Chakra UI CLI usage and available commands, including options for version, help, and specific commands like typegen, snippet, and eject.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/get-started/cli.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nUsage: npx chakra [options] [command]\n\nThe official CLI for Chakra UI projects\n\nOptions:\n  -V, --version               output the version number\n  -h, --help                  display help for command\n\nCommands:\n  typegen [options] <source>  Generate theme and recipe typings\n  snippet                     Add snippets to your project for better DX\n  eject [options]             Take control over the default theme tokens and recipes\n  help [command]              display help for command\n```\n\n----------------------------------------\n\nTITLE: Installing Chakra UI Charts and Recharts\nDESCRIPTION: Command to install the charts component and its peer dependency recharts using npm.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/installation.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @chakra-ui/charts recharts\n```\n\n----------------------------------------\n\nTITLE: Placing Flex/Grid Content with placeContent Prop - Chakra UI Flex - JSX\nDESCRIPTION: Demonstrates usage of the placeContent prop on Flex for setting both justifyContent and alignContent simultaneously. Accepts values such as 'center'. Requires Chakra UI/React.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/flex-and-grid.mdx#2025-04-23_snippet_25\n\nLANGUAGE: jsx\nCODE:\n```\n<Flex placeContent=\"center\">\\n  <Box>Item 1</Box>\\n  <Box>Item 2</Box>\\n  <Box>Item 3</Box>\\n</Flex>\n```\n\n----------------------------------------\n\nTITLE: Accessing Color Tokens in Chakra UI CSS Variables (JSX)\nDESCRIPTION: Shows how to access color tokens using the full token path in CSS variables. The example demonstrates setting a color variable using a Chakra UI color token.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/css-variables.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Box css={{ \"--color\": \"colors.red.500\" }}>\n  <p style={{ color: \"var(--color)\" }}>Hello</p>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Adding Tag Snippet via Chakra UI CLI (Bash)\nDESCRIPTION: Provides a shell command using `npx` to execute the Chakra UI CLI (`@chakra-ui/cli`) and add a pre-defined 'tag' snippet (likely the closed component version) to the user's project.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/tag.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx @chakra-ui/cli snippet add tag\n```\n\n----------------------------------------\n\nTITLE: Generating Theme Typings with Chakra CLI (Bash)\nDESCRIPTION: Shows the command to run the Chakra UI CLI (`@chakra-ui/cli typegen`) to generate TypeScript typings for the defined theme tokens located in `./src/theme.ts`. This enables autocompletion and type safety when using tokens in the application.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/tokens.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx @chakra-ui/cli typegen ./src/theme.ts\n```\n\n----------------------------------------\n\nTITLE: Importing Icon Component from Chakra UI in JSX\nDESCRIPTION: This snippet shows how to import the Icon component from Chakra UI. It's the first step in using the Icon component in your React application.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/icon.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Icon } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Typing Compound Component Props with UnstyledProp (TypeScript)\nDESCRIPTION: Demonstrates extending component prop types (like `CheckboxProps`) to include `UnstyledProp` alongside `RecipeVariantProps`. This allows the component, typically the root provider component, to accept the `unstyled` boolean prop for optionally disabling recipe styles.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/slot-recipes.mdx#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nimport type { RecipeVariantProps, UnstyledProp } from \"@chakra-ui/react\"\nimport { checkboxSlotRecipe } from \"./checkbox.recipe\"\n\ntype CheckboxVariantProps = RecipeVariantProps<typeof checkboxSlotRecipe>\n\nexport interface CheckboxProps\n  extends React.PropsWithChildren<CheckboxVariantProps>,\n    UnstyledProp {}\n```\n```\n\n----------------------------------------\n\nTITLE: Adjusting X-Axis Padding in Chakra UI Charts\nDESCRIPTION: Controls the spacing between first and last tick labels on the X-axis.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/axes.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<XAxis dataKey=\"name\" padding={{ left: 20, right: 20 }} />\n```\n\n----------------------------------------\n\nTITLE: Importing For Component - Chakra UI JSX\nDESCRIPTION: Shows how to import the For component from Chakra UI library.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/for.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { For } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Customizing CartesianGrid Appearance\nDESCRIPTION: Example showing how to customize grid appearance using stroke color, dash pattern, and opacity properties.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/cartesian-grid.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<CartesianGrid stroke=\"#ccc\" strokeDasharray=\"3 3\" opacity={0.5} />\n```\n\n----------------------------------------\n\nTITLE: Adding Chakra UI Snippets using CLI\nDESCRIPTION: Command to add pre-built Chakra UI snippets to the project using the Chakra UI CLI tool.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/get-started/frameworks/next-pages.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx @chakra-ui/cli snippet add\n```\n\n----------------------------------------\n\nTITLE: Basic For Component Usage - Chakra UI JSX\nDESCRIPTION: Demonstrates the basic usage syntax of the For component with an empty array and fallback prop.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/for.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<For each={[]} fallback={...} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom System in Chakra UI Provider\nDESCRIPTION: Sets up the ChakraProvider with the custom system that contains the breakpoint definitions. This client-side component wraps the application with the custom theme system.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/guides/theming-custom-breakpoints.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\"\n\nimport { system } from \"@/components/theme\"\nimport {\n  ColorModeProvider,\n  type ColorModeProviderProps,\n} from \"@/components/ui/color-mode\"\nimport { ChakraProvider } from \"@chakra-ui/react\"\n\nexport function Provider(props: ColorModeProviderProps) {\n  return (\n    <ChakraProvider value={system}>\n      <ColorModeProvider {...props} />\n    </ChakraProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Theme Type Augmentation with Chakra CLI\nDESCRIPTION: Command for generating theme typings that use module augmentation of the @chakra-ui/styled-system package. This allows for better type checking and auto-completion of theme properties.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/packages/cli/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nchakra-cli tokens --template augmentation --out ./types/chakra-ui__styled-system.d.ts\n```\n\n----------------------------------------\n\nTITLE: Adding Boolean Variant to Chakra UI Button with defineRecipe (TypeScript)\nDESCRIPTION: Shows how to use `defineRecipe` to add a boolean variant named `raised` to the Button component. When the `raised` variant is true, a shadow is applied. Incorporates the variant into the system by extending the theme as before. Dependencies and usage mirror the previous example, with new logic for boolean variant handling.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/customization/recipes.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst buttonRecipe = defineRecipe({\n  variants: {\n    raised: {\n      true: {\n        boxShadow: \"md\",\n      },\n    },\n  },\n})\n\nconst customConfig = defineConfig({\n  theme: {\n    recipes: {\n      button: buttonRecipe,\n    },\n  },\n})\n\nexport const system = createSystem(defaultConfig, customConfig)\n```\n\n----------------------------------------\n\nTITLE: Using Layer Styles with Color Palette\nDESCRIPTION: Examples of using built-in layer styles with color palettes in Chakra UI components. Shows various style combinations for fills, borders, and indicators.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/packages/react/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Box layerStyle=\"fill.muted\" colorPalette=\"red\">\n  This is a subtle fill layer\n</Box>\n\n<Box layerStyle=\"outline.muted\" colorPalette=\"red\">\n  This is a subtle outline layer\n</Box>\n\n<Box layerStyle=\"indicator.top\" colorPalette=\"red\">\n  This is a top indicator layer\n</Box>\n\n<Box _disabled={{ layerStyle: \"disabled\" }}>Disabled Button</Box>\n\n<Box\n  layerStyle=\"fill.muted\"\n  _hover={{ layerStyle: \"outline.solid\" }}\n  colorPalette=\"red\"\n>\n  This is a complex layer\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Importing Avatar Components in React\nDESCRIPTION: This snippet shows how to import the Avatar and AvatarGroup components from Chakra UI.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/avatar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Avatar, AvatarGroup } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Defining Chart Data with useChart Hook\nDESCRIPTION: Creates a chart instance by passing data to the useChart hook.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/installation.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst chart = useChart({\n  data: [\n    { month: \"January\", value: 100 },\n    { month: \"February\", value: 200 },\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Strict Token Types with Chakra CLI\nDESCRIPTION: Command for enabling strict type checking for theme tokens. Using the --strict-token-types flag ensures that only valid tokens defined in the theme can be used as prop values.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/packages/cli/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nchakra-cli tokens --strict-token-types\n```\n\n----------------------------------------\n\nTITLE: Using Group Selectors in Chakra UI\nDESCRIPTION: Shows how to style an element based on its parent's state using the group class and _groupHover modifier.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/conditional-styles.mdx#2025-04-23_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"group\">\n  <Text _groupHover={{ bg: \"red.500\" }}>Hover me</Text>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Layer Styles in Chakra UI\nDESCRIPTION: This snippet demonstrates how to define custom layer styles using the defineLayerStyles function from Chakra UI. It creates a 'container' style with specific background, border, and border color properties.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/layer-styles.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineLayerStyles } from \"@chakra-ui/react\"\n\nconst layerStyles = defineLayerStyles({\n  container: {\n    description: \"container styles\",\n    value: {\n      background: \"gray.50\",\n      border: \"2px solid\",\n      borderColor: \"gray.500\",\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Chakra UI Textarea Component in React\nDESCRIPTION: Imports the `Textarea` component from the `@chakra-ui/react` library, making it available for use within a React application. This is the standard way to import components from Chakra UI.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/textarea.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Textarea } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Text Styles Example with ExamplePreview Component (JSX)\nDESCRIPTION: This JSX snippet utilizes a custom `ExamplePreview` component, likely within an MDX or similar documentation environment, to dynamically render a visual demonstration of Chakra UI's built-in text styles. The `name` prop ('tokens/text-styles') specifies which predefined example configuration to load and display on the page.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/text-styles.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ExamplePreview name=\"tokens/text-styles\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Locale and Direction with `LocaleProvider` in TSX\nDESCRIPTION: Illustrates the use of Chakra UI's `LocaleProvider` component to set the `locale` (e.g., 'ar-Ar') and implicitly the direction for logic-based components inherited from Ark UI. This ensures components like `Slider` behave correctly in an RTL context. It's recommended to wrap the root application component with `LocaleProvider`.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/guides/overview-rtl-support.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<LocaleProvider locale=\"ar-Ar\">\n  <Heading>RTL - الى أن مرجع ويتّفق, ان </Heading>\n  <Slider />\n</LocaleProvider>\n```\n\n----------------------------------------\n\nTITLE: Compound Variants Approach for Dynamic Button Styling\nDESCRIPTION: Chakra UI recipe implementation using compound variants to create style overrides based on variant combinations, including size and pressed state.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/guides/theming-recipe-dynamic-styling.mdx#2025-04-23_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineRecipe } from \"@chakra-ui/react\"\n\nexport const buttonRecipe = defineRecipe({\n  base: {\n    display: \"flex\",\n  },\n  variants: {\n    size: {\n      sm: {\n        padding: \"4\",\n        fontSize: \"12px\",\n      },\n    },\n    isPressed: {\n      true: {},\n      false: {},\n    },\n  },\n  compoundVariants: [\n    {\n      size: \"sm\",\n      isPressed: true,\n      css: {\n        padding: \"8px\",\n        fontSize: \"12px\",\n      },\n    },\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Bar Chart Components in React with Chakra UI and Recharts\nDESCRIPTION: This snippet shows how to import the necessary components from Chakra UI's chart library and Recharts to create a bar chart.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/bar-chart.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Chart, useChart } from \"@chakra-ui/charts\"\nimport { Bar, BarChart, CartesianGrid, XAxis, YAxis } from \"recharts\"\n```\n\n----------------------------------------\n\nTITLE: Setting List Style Image with Chakra UI - JSX\nDESCRIPTION: Illustrates configuring custom images as list markers by passing the listStyleImage prop to a Chakra UI Box rendered as a list. The url(...) value replaces standard bullets with the provided image. Chakra UI, JSX runtime, and a valid image URL are required. Outputs a list with image-based markers.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/list.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx\n<Box as=\\\"ul\\\" listStyleImage=\\\"url(...)\\\">\\n  <li>Item 1</li>\\n  <li>Item 2</li>\\n  <li>Item 3</li>\\n</Box>\\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Chakra UI with package managers\nDESCRIPTION: Instructions for installing Chakra UI and its peer dependencies using various package managers including Yarn, npm, pnpm, and Bun.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# with Yarn\n$ yarn add @chakra-ui/react @emotion/react\n\n# with npm\n$ npm i @chakra-ui/react @emotion/react\n\n# with pnpm\n$ pnpm add @chakra-ui/react @emotion/react\n\n# with Bun\n$ bun add @chakra-ui/react @emotion/react\n```\n\n----------------------------------------\n\nTITLE: Optimizing Chakra UI Bundle in Next.js Config\nDESCRIPTION: Next.js configuration to optimize package imports for Chakra UI, improving bundle size and performance.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/get-started/frameworks/next-pages.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nexport default {\n  experimental: {\n    optimizePackageImports: [\"@chakra-ui/react\"],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Chakra UI snippets to Remix project\nDESCRIPTION: Uses the Chakra UI CLI to add pre-built component snippets to the project for faster UI development.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/get-started/frameworks/remix.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx @chakra-ui/cli snippet add\n```\n\n----------------------------------------\n\nTITLE: Using Custom Size Variant for Heading in TypeScript\nDESCRIPTION: Shows how to use the custom size variant created for the Heading component.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/heading.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Heading size=\"custom\">I'm a custom size</Heading>\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js TypeScript Project with create-next-app\nDESCRIPTION: Commands to bootstrap a new Next.js project with TypeScript using create-next-app via npm or yarn.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/sandbox/next-pages/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-typescript with-typescript-app\n# or\nyarn create next-app --example with-typescript with-typescript-app\n```\n\n----------------------------------------\n\nTITLE: Using useColorModeValue Hook in Chakra UI\nDESCRIPTION: Demonstrates the signature of the useColorModeValue hook which returns different values based on the current color mode.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/concepts/color-mode.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst result = useColorModeValue(\"<light-mode-value>\", \"<dark-mode-value>\")\n```\n\n----------------------------------------\n\nTITLE: Creating Animation Tokens in Chakra UI Theme (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to customize the Chakra UI theme with animation tokens that utilize previously defined keyframes. Using the Chakra theming API, tokens are placed under `theme.tokens.animations`, and include properties such as keyframe names, durations, and timing functions. The example shows a `shakeX` animation referencing the custom keyframe and setting its timing, duration, and iteration. Prerequisites are the registration of keyframes and Chakra UI's theming modules. This pattern allows for referencing complex animations via tokens in Chakra components.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/customization/animations.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createSystem, defaultConfig, defineConfig } from \"@chakra-ui/react\"\n\nconst config = defineConfig({\n  theme: {\n    keyframes: {\n      // ... keyframes from above\n    },\n    tokens: {\n      animations: {\n        shakeX: { value: \"shakeX 1s ease-in-out infinite\" },\n      },\n    },\n  },\n})\n\nexport const system = createSystem(defaultConfig, config)\n```\n\n----------------------------------------\n\nTITLE: Setting Color Palette Options in Chakra UI\nDESCRIPTION: Examples of different color palette options that can be used, including built-in palettes like blue, green, and red, as well as custom brand palettes defined in your theme.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/guides/theming-change-default-color-palette.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// Built-in color palettes\ncolorPalette: \"blue\"\ncolorPalette: \"green\"\ncolorPalette: \"red\"\n\n// Custom color palette (if defined in your theme)\ncolorPalette: \"brand\"\n```\n\n----------------------------------------\n\nTITLE: Importing ColorPicker Component in React\nDESCRIPTION: Shows how to import the ColorPicker component from the Chakra UI library.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/color-picker.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ColorPicker } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Rotating X-Axis Labels in Chakra UI Charts\nDESCRIPTION: Demonstrates how to rotate X-axis labels to prevent overlap.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/axes.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<XAxis dataKey=\"name\" angle={-45} textAnchor=\"end\" />\n```\n\n----------------------------------------\n\nTITLE: Targeting Specific Slots by className in Slot Recipes (TypeScript)\nDESCRIPTION: Illustrates setting a `className` prefix (e.g., \"checkbox\") in the slot recipe configuration. This allows targeting specific slots using CSS selectors within the recipe's style definitions (e.g., `_hover: { \"& .checkbox__label\": { color: \"white\" } }`). The generated class name follows the pattern `${className}__${slot}`.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/slot-recipes.mdx#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n```tsx title=\"checkbox.recipe.ts\" /& .checkbox__label/\nimport { defineSlotRecipe } from \"@chakra-ui/react\"\n\nexport const checkboxRecipe = defineSlotRecipe({\n  className: \"checkbox\",\n  slots: [\"root\", \"control\", \"label\"],\n  base: {\n    root: {\n      bg: \"blue.500\",\n      _hover: {\n        \"& .checkbox__label\": { color: \"white\" },\n      },\n    },\n  },\n})\n```\n```\n\n----------------------------------------\n\nTITLE: Applying Color Scheme Styles in Chakra UI\nDESCRIPTION: Demonstrates how to apply styles based on the user's color scheme preference using _osLight and _osDark modifiers.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/conditional-styles.mdx#2025-04-23_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<chakra.div bg={{ base: \"white\", _osDark: \"black\" }}>Hello</chakra.div>\n```\n\n----------------------------------------\n\nTITLE: Importing Heading Component in JavaScript\nDESCRIPTION: Shows how to import the Heading component from Chakra UI.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/heading.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Heading } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Controlling Touch Action in Chakra UI JSX\nDESCRIPTION: Demonstrates using the `touchAction` prop on a `Box` component to control how touch interactions (like panning or zooming) are handled within the element's region. Setting it to 'none' disables default touch behaviors.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/interactivity.mdx#2025-04-23_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n<Box touchAction=\"none\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Collapsible Component from Chakra UI in JSX\nDESCRIPTION: This snippet shows how to import the Collapsible component from Chakra UI. It's the first step in using the component in a React application.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/collapsible.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Collapsible } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Incorrect Function-Based Recipe Approach in Chakra UI\nDESCRIPTION: Example of a non-working approach using functions in recipe variants, which is not supported in Chakra UI because recipes must be serializable.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/guides/theming-recipe-dynamic-styling.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineRecipe } from \"@chakra-ui/react\"\n\nexport const buttonRecipe = defineRecipe({\n  base: {\n    display: \"flex\",\n  },\n  variants: {\n    size: {\n      sm: ({ isPressed }) => ({\n        padding: isPressed ? \"8\" : \"4\",\n        fontSize: \"12px\",\n      }),\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Drawer Component in Chakra UI\nDESCRIPTION: Shows how to import the Drawer component from Chakra UI library.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/drawer.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Drawer } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Importing Presence Component in Chakra UI\nDESCRIPTION: Shows how to import the Presence component from Chakra UI.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/presence.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Presence } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Installing Chakra UI CLI with Package Managers\nDESCRIPTION: Instructions for installing the Chakra UI CLI as a dev dependency using npm, pnpm, or bun.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/get-started/cli.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -D @chakra-ui/cli\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -D @chakra-ui/cli\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add -d @chakra-ui/cli\n```\n\n----------------------------------------\n\nTITLE: Upgrading to Latest Chakra UI Version\nDESCRIPTION: Command to upgrade an existing project to the latest version of Chakra UI. This ensures the project is using the most recent features and bug fixes.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/blog/03-chakra-3.3.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @chakra-ui/react@latest\n```\n\n----------------------------------------\n\nTITLE: Installing Prose Snippet in Chakra UI CLI\nDESCRIPTION: Command to add the 'prose' snippet using Chakra UI CLI. This step is necessary if you don't already have the snippet installed.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/prose.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx @chakra-ui/cli snippet add prose\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript Type Definitions\nDESCRIPTION: Command to install type definitions for React and Node.js to enable full TypeScript support.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/sandbox/next-pages/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @types/react @types/react-dom @types/node\n```\n\n----------------------------------------\n\nTITLE: Referencing LLMs.txt Files in Windstatic\nDESCRIPTION: Instructions for referencing LLMs.txt files in Windstatic using the @ symbol or in .windsurfrules files. This allows developers to access Chakra UI v3 documentation within their Windstatic projects.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/get-started/llms.mdx#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Windstatic\n\nReference the LLMs.txt files using `@` or in your `.windsurfrules` files.\n\n[Read more](https://docs.codeium.com/windsurf/memories#memories-and-rules)\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Spacing Token in Chakra UI Component (TypeScript)\nDESCRIPTION: This snippet shows how to use a newly defined spacing token in a Chakra UI component. The <Box> receives a 'margin' prop set to '128', referencing the custom spacing value previously added to the theme. This requires the theme extension to have been applied as in the preceding snippet. The primary parameter is the prop name that maps to spacing, and the component will adjust its margin according to the specified token.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/customization/spacing.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Box margin=\"128\" />\n```\n\n----------------------------------------\n\nTITLE: Referencing LLMs.txt Files in Cursor\nDESCRIPTION: Instructions for using the @Docs feature in Cursor to include LLMs.txt files in a project. This allows developers to access Chakra UI v3 documentation within their development environment.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/get-started/llms.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Cursor\n\nUse `@Docs` feature in Cursor to include the LLMs.txt files in your project.\n\n[Read more](https://docs.cursor.com/context/@-symbols/@-docs)\n```\n\n----------------------------------------\n\nTITLE: Word Highlighting in TypeScript\nDESCRIPTION: Demonstrates how to highlight a specific word (\"Hello\") in TypeScript code using a special comment directive.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/notes/mdx-reference.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// [!code word:Hello]\nconst message = \"Hello World\"\n```\n\n----------------------------------------\n\nTITLE: Removing All Grid Lines\nDESCRIPTION: Example showing how to completely remove grid lines by setting both horizontal and vertical props to false.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/cartesian-grid.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<CartesianGrid horizontal={false} vertical={false} />\n```\n\n----------------------------------------\n\nTITLE: Using Chakra CLI for Component Snippets\nDESCRIPTION: Examples of using the new Chakra CLI to add pre-built component snippets to your project. Shows commands for adding all snippets or a specific component snippet.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/blog/01-chakra-v2-vs-v3-a-detailed-comparison.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Add all snippets\nchakra snippet add\n\n# Add a specific snippet\nchakra snippet add button\n\n```\n\n----------------------------------------\n\nTITLE: Splitting CSS Props from Non-CSS Props in Chakra UI Styling Engine (TypeScript)\nDESCRIPTION: Shows the use of system.splitCssProps to separate CSS style-related properties from miscellaneous (non-CSS) props. Useful for isolating style processing or forwarding remaining props in components. Input is an object of props; output is two objects: one for CSS props, one for others.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/overview.mdx#2025-04-23_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nconst system = createSystem(defaultConfig, config)\n\nsystem.splitCssProps({\n  color: \"red.200\",\n  bg: \"blue.200\",\n  \"aria-label\": \"Hello World\",\n})\n// => [{ color: \"red.200\", bg: \"blue.200\" }, { \"aria-label\": \"Hello World\" }]\n\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Size for Heading Component in TypeScript\nDESCRIPTION: Demonstrates how to create a custom size variant for the Heading component using the createSystem and defineRecipe functions.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/heading.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSystem, defineRecipe } from \"@chakra-ui/react\"\nimport { defaultConfig } from \"@chakra-ui/react\"\n\nconst headingRecipe = defineRecipe({\n  variants: {\n    size: {\n      custom: {\n        fontSize: \"100px\",\n        lineHeight: \"100px\",\n        letterSpacing: \"-2px\",\n      },\n    },\n  },\n})\n\nconst system = createSystem(defaultConfig, {\n  theme: {\n    recipes: { heading: headingRecipe },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Scatter Chart Components in TypeScript\nDESCRIPTION: Import necessary components from Chakra UI and Recharts libraries for creating scatter charts.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/scatter-chart.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Chart, useChart } from \"@chakra-ui/charts\"\nimport { Scatter, ScatterChart, XAxis, YAxis } from \"recharts\"\n```\n\n----------------------------------------\n\nTITLE: Applying Saturation Effect using the `saturate` Prop in JSX\nDESCRIPTION: Illustrates applying a saturation effect using the `saturate` prop. This requires setting the `filter` prop to `auto`. The value adjusts the saturation level (e.g., '0.4').\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/filters.mdx#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Box filter=\"auto\" saturate=\"0.4\" />\n```\n\n----------------------------------------\n\nTITLE: Setting up Provider in Chakra UI v2 vs v3\nDESCRIPTION: Comparison of the provider setup between v2 and v3. Version 2 uses ChakraProvider directly from @chakra-ui/react, while version 3 uses a custom Provider component that handles both styling and color mode.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/blog/01-chakra-v2-vs-v3-a-detailed-comparison.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ChakraProvider } from \"@chakra-ui/react\"\n\nfunction App() {\n  return <ChakraProvider>{/* the rest of your app */}</ChakraProvider>\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Provider } from \"@/components/ui/provider\"\n\nfunction App() {\n  return <Provider>{/* the rest of your app */}</Provider>\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Toggle Tip Components in React\nDESCRIPTION: This code snippet shows how to import the InfoTip and ToggleTip components from the project's UI components directory. It's necessary for using these components in your React application.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/toggle-tip.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { InfoTip, ToggleTip } from \"@/components/ui/toggle-tip\"\n```\n\n----------------------------------------\n\nTITLE: Importing DataList Component in Chakra UI\nDESCRIPTION: How to import the DataList component from Chakra UI.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/data-list.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DataList } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Adding Chakra UI snippets using CLI\nDESCRIPTION: This command uses the Chakra UI CLI to add pre-built component snippets to the project for faster UI development.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/get-started/frameworks/next-app.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx @chakra-ui/cli snippet add\n```\n\n----------------------------------------\n\nTITLE: Using Overlay Manager in React Components\nDESCRIPTION: Shows how to implement and use the created overlay manager within a React component. This example demonstrates opening a dialog with specific props and including the required Viewport component in the component tree.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/blog/07-chakra-3.16.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport const MyComponent = () => {\n  return (\n    <>\n      <Button\n        onClick={() => {\n          dialog.open(\"a\", {\n            title: \"Dialog Title\",\n            description: \"Dialog Description\",\n          })\n        }}\n      >\n        Open Modal\n      </Button>\n      <dialog.Viewport />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Field Component Snippet with Chakra CLI\nDESCRIPTION: Command to add the closed Field component snippet to a project using the Chakra UI CLI tool.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/field.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx @chakra-ui/cli snippet add field\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Directory for Chakra UI CLI Snippets\nDESCRIPTION: Command to generate Chakra UI component snippets in a custom directory instead of the default 'components/ui' location. The '--outdir' flag allows you to specify the target directory where the snippets will be created.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/guides/snippet-specify-custom-directory.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx chakra snippets --outdir ./components/custom\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Next.js TypeScript Project\nDESCRIPTION: Commands to install dependencies and start the development server for a Next.js TypeScript project, with options for both npm and yarn package managers.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/sandbox/next-app/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n# or\nyarn\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Adding Checkbox Card Snippet to Project using Chakra UI CLI\nDESCRIPTION: This command uses the Chakra UI CLI to automatically add the closed component version of the Checkbox Card to your project.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/checkbox-card.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx @chakra-ui/cli snippet add checkbox-card\n```\n\n----------------------------------------\n\nTITLE: Defining Font Weight Tokens in Chakra UI Theme (TypeScript)\nDESCRIPTION: Example of defining font weight tokens (e.g., `bold`) using `defineTokens`. These tokens represent text weight values (like '700') as strings and are used for the `font-weight` CSS property. The defined tokens are added to the theme via `createSystem`.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/tokens.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineTokens } from \"@chakra-ui/react\"\n\nconst tokens = defineTokens({\n  fontWeights: {\n    bold: { value: \"700\" },\n  },\n})\n\nexport default createSystem({\n  theme: { tokens },\n})\n```\n\n----------------------------------------\n\nTITLE: Attaching Font to HTML Element in Next.js\nDESCRIPTION: Attach the configured font to the HTML element by adding its variable class, which makes the font available throughout the application.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/guides/theming-add-custom-font-to-nextjs.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<html className={bricolage.variable} lang=\"en\" suppressHydrationWarning>\n  <body>\n    <Provider>{children}</Provider>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Formatting Dates with formatDate in TypeScript React\nDESCRIPTION: Shows how to use the formatDate function to format a date string based on locale settings.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/use-chart.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nconst formatDate = chart.formatDate({ year: \"numeric\", month: \"short\" })\nconsole.log(formatDate(\"2024-03-28\")) // \"Mar 2024\"\n```\n\n----------------------------------------\n\nTITLE: Importing Float Component in React\nDESCRIPTION: Basic import statement for the Float and Box components from Chakra UI.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/float.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Box, Float } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Duration Token Documentation with DurationTokenDoc Component in JSX\nDESCRIPTION: This JSX snippet employs the custom `DurationTokenDoc` component to present the predefined animation duration tokens available in Chakra UI. It likely renders a list or documentation related to these duration values, sourced from the theme. Requires React and the definition of the `DurationTokenDoc` component.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/animations.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DurationTokenDoc />\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Theme with Chakra UI's createSystem\nDESCRIPTION: Use Chakra UI's createSystem method to define a custom theme that specifies the imported font for heading and body text elements.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/guides/theming-add-custom-font-to-nextjs.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\"\n\nimport { createSystem, defaultConfig } from \"@chakra-ui/react\"\n\nconst system = createSystem(defaultConfig, {\n  theme: {\n    tokens: {\n      fonts: {\n        heading: { value: \"var(--font-bricolage)\" },\n        body: { value: \"var(--font-bricolage)\" },\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Importing CartesianGrid from Recharts\nDESCRIPTION: Basic import statement for the CartesianGrid component from Recharts library.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/cartesian-grid.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CartesianGrid } from \"recharts\"\n```\n\n----------------------------------------\n\nTITLE: Using Mix Blend Mode - Chakra UI - JavaScript/JSX\nDESCRIPTION: This snippet demonstrates applying the 'mixBlendMode' prop to an Image component inside a Box to control content blending in Chakra UI. The property follows the CSS 'mix-blend-mode' specification. 'mixBlendMode' can take CSS blend mode values such as 'hard-light'. Requires Chakra UI setup with Box and Image components.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/effects.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Box bg=\\\"red.400\\\">\\n  <Image src=\\\"...\\\" mixBlendMode=\\\"hard-light\\\" />\\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Generating Theme Typings with Chakra CLI (Bash)\nDESCRIPTION: This command utilizes the Chakra UI Command Line Interface (CLI) via `npx` to generate TypeScript typings for a theme definition file located at `./src/theme.ts`. Running this command creates type definitions based on the theme tokens and semantic tokens, enabling autocompletion and type safety when using tokens in components. Requires `@chakra-ui/cli` to be installed or accessible via `npx`.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/semantic-tokens.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nnpx @chakra-ui/cli typegen ./src/theme.ts\n```\n```\n\n----------------------------------------\n\nTITLE: Importing Accordion Components (After Refactoring)\nDESCRIPTION: Demonstrates how Accordion components are imported and used after refactoring, using the namespace pattern directly from the Chakra UI package.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/blog/05-refactoring-snippets.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Accordion } from \"@chakra-ui/react\"\n\nconst Demo = () => {\n  return (\n    <Accordion.Root>\n      <Accordion.Item>\n        <Accordion.ItemTrigger>\n          Item\n          <Accordion.ItemIndicator />\n        </Accordion.ItemTrigger>\n        <Accordion.ItemContent>\n          <Accordion.ItemBody>Content</Accordion.ItemBody>\n        </Accordion.ItemContent>\n      </Accordion.Item>\n    </Accordion.Root>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Types for Custom Breakpoints in Chakra UI\nDESCRIPTION: Uses the Chakra UI CLI to generate TypeScript type definitions for the custom breakpoints. This ensures proper type checking when using the custom breakpoints in your components.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/guides/theming-custom-breakpoints.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx chakra typegen ./components/theme.ts\n```\n\n----------------------------------------\n\nTITLE: Importing LocaleProvider and useLocaleContext in React\nDESCRIPTION: This snippet shows how to import the LocaleProvider component and useLocaleContext hook from Chakra UI.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/locale-provider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { LocaleProvider, useLocaleContext } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Formatting Numbers with formatNumber in TypeScript React\nDESCRIPTION: Demonstrates how to use the formatNumber function to format numbers using the current locale and Intl.NumberFormatOptions.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/use-chart.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nconst format = chart.formatNumber({ style: \"currency\", currency: \"USD\" })\nconsole.log(format(1000)) // \"$1,000.00\"\n```\n\n----------------------------------------\n\nTITLE: Installing Chakra UI Panda Preset Package - Bash\nDESCRIPTION: Command to install the @chakra-ui/panda-preset package using npm package manager.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/packages/panda-preset/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @chakra-ui/panda-preset\n```\n\n----------------------------------------\n\nTITLE: Adding Radio Card Snippet via CLI\nDESCRIPTION: Shows the command to automatically add the closed component Radio Card snippet to a project using Chakra UI CLI.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/radio-card.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx @chakra-ui/cli snippet add radio-card\n```\n\n----------------------------------------\n\nTITLE: Scaffolding Steps Component with CLI in Chakra UI\nDESCRIPTION: Shows how to use the Chakra UI CLI to quickly generate a composed Steps component.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/packages/react/CHANGELOG.md#2025-04-23_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\nchakra composition add steps\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Parser Options for TypeScript in Vite\nDESCRIPTION: This code configures the ESLint parser options for TypeScript projects in Vite. It sets up the parser to use TypeScript configuration files (tsconfig) for type-aware linting.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/sandbox/panda-preset/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default tseslint.config({\n  languageOptions: {\n    // other options...\n    parserOptions: {\n      project: [\"./tsconfig.node.json\", \"./tsconfig.app.json\"],\n      tsconfigRootDir: import.meta.dirname,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for React Router Application\nDESCRIPTION: Command to install the required dependencies for the React Router application using npm.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/sandbox/react-router/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Inferring TypeScript Types for Recipe Variant Props using RecipeVariantProps (TypeScript)\nDESCRIPTION: Explains how to infer type-safe props for recipe variants using RecipeVariantProps from Chakra UI. This allows robust TypeScript definitions for variant-driven components. Requires importing RecipeVariantProps and the relevant recipe definition. Outputs extended interface for use with React components.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/recipes.mdx#2025-04-23_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { RecipeVariantProps } from \"@chakra-ui/react\"\nimport { buttonRecipe } from \"./button.recipe\"\n\ntype ButtonVariantProps = RecipeVariantProps<typeof buttonRecipe>\n\nexport interface ButtonProps\n  extends React.PropsWithChildren<ButtonVariantProps> {}\n```\n\n----------------------------------------\n\nTITLE: Importing Group Component from Chakra UI\nDESCRIPTION: Shows how to import the Group component from Chakra UI.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/group.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Group } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Installing Chakra UI with npm\nDESCRIPTION: Command to install Chakra UI React package using npm package manager.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/notes/mdx-reference.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @chakra-ui/react\n```\n\n----------------------------------------\n\nTITLE: Installing Chakra UI v3 and Emotion React via npm\nDESCRIPTION: This command installs the Chakra UI v3 React package and its dependency, Emotion React, using npm. These packages are essential for using Chakra UI v3 in a React project.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/blog/00-announcing-v3.mdx#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @chakra-ui/react @emotion/react\n```\n\n----------------------------------------\n\nTITLE: Setting Vertical Border Spacing (Y) on Chakra UI Table - JSX\nDESCRIPTION: Illustrates the use of Chakra UI's 'borderSpacingY' prop to control the vertical border-spacing for a table. This should be used within a React component that imports Chakra UI. The 'borderSpacingY' accept a spacing value (e.g., '2'), which adjusts the spacing between table rows. Output: a table with the specified vertical border spacing.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/tables.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<chakra.table borderSpacingY=\\\"2\\\">\\n  <tbody>\\n    <tr>\\n      <td>Cell 1</td>\\n      <td>Cell 2</td>\\n    </tr>\\n  </tbody>\\n</chakra.table>\n```\n\n----------------------------------------\n\nTITLE: Rendering Line Height Token Documentation in React\nDESCRIPTION: This snippet shows the usage of the `<LineHeightTokenDoc />` React component. It is responsible for rendering the documentation concerning the line height tokens defined within Chakra UI.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/typography.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<LineHeightTokenDoc />\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Font in Next.js\nDESCRIPTION: Configure the imported font by defining the CSS variable name and specifying the required character subsets.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/guides/theming-add-custom-font-to-nextjs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst bricolage = Bricolage_Grotesque({\n  variable: \"--font-bricolage\",\n  subsets: [\"latin\"],\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering Font Weight Token Documentation in React\nDESCRIPTION: This code snippet employs the `<FontWeightTokenDoc />` React component. Its purpose is to display the documentation for the different font weight tokens available in the Chakra UI system.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/typography.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<FontWeightTokenDoc />\n```\n\n----------------------------------------\n\nTITLE: Applying Border Color to Specific Sides with Chakra UI - JavaScript/JSX\nDESCRIPTION: This code targets the top and left border colors using borderTopColor and borderLeftColor props on a Chakra UI <Box>. Inputs are Chakra color tokens. Only the selected sides are affected.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/border.mdx#2025-04-23_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<Box borderTopColor=\"red.400\" />\n<Box borderLeftColor=\"red.400\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Chakra UI Toaster Snippet using NPX - Shell Script\nDESCRIPTION: Installs the Chakra UI toaster code snippet using the npx command-line interface. This is a prerequisite step to set up the Toast component boilerplate in your project. No code parameters are required; running this command will fetch and install the snippet automatically.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/toast.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx @chakra-ui/cli snippet add toaster\n```\n\n----------------------------------------\n\nTITLE: Implementing Checkbox with Simplified Syntax\nDESCRIPTION: Demonstrates the simplified shortcut syntax for Checkbox when customization of the indicator isn't needed.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/blog/05-refactoring-snippets.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<Checkbox.Control />\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Theme for Chakra UI\nDESCRIPTION: This TypeScript code snippet shows how to create a custom theme using the createSystem function from Chakra UI, which can be used to customize the appearance of components.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/get-started/environments/iframe.mdx#2025-04-23_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nexport const system = createSystem(defaultConfig, {\n  theme: { colors: {} },\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Rating Component in Chakra UI\nDESCRIPTION: Shows how to import the RatingGroup component from Chakra UI.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/rating.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RatingGroup } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Adding Closed Avatar Component with Chakra CLI\nDESCRIPTION: Command to automatically add a closed Avatar component to a project using the Chakra UI CLI.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/avatar.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx @chakra-ui/cli snippet add avatar\n```\n\n----------------------------------------\n\nTITLE: Adding Closed Component Snippet for Native Select\nDESCRIPTION: This command adds a closed component snippet for the Native Select to your project using the Chakra UI CLI.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/native-select.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx @chakra-ui/cli snippet add native-select\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js TypeScript Project Using create-next-app\nDESCRIPTION: Commands to bootstrap a Next.js project with TypeScript using the create-next-app CLI tool, with options for both npm and yarn package managers.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/sandbox/next-app/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app --example with-typescript with-typescript-app\n# or\nyarn create next-app --example with-typescript with-typescript-app\n```\n\n----------------------------------------\n\nTITLE: Installing Toggle Tip Component via Chakra UI CLI\nDESCRIPTION: This command uses the Chakra UI CLI to add the toggle-tip snippet to your project. It provides a quick way to integrate the ToggleTip component.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/toggle-tip.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpx @chakra-ui/cli snippet add toggle-tip\n```\n\n----------------------------------------\n\nTITLE: Implementing Checkbox with Explicit Indicator\nDESCRIPTION: Shows the verbose way of implementing a Checkbox component with explicit control over the indicator element.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/blog/05-refactoring-snippets.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Checkbox.Control>\n  <Checkbox.Indicator />\n</Checkbox.Control>\n```\n\n----------------------------------------\n\nTITLE: Building a Remix Application for Production\nDESCRIPTION: Command to build the Remix application for production deployment, which creates optimized assets in the build directory.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/sandbox/remix-ts/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Starting a Remix Application in Production Mode\nDESCRIPTION: Command to run the built Remix application in production mode, using the assets created by the build command.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/sandbox/remix-ts/README.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Unsupported Compound Variants with Responsive Props (TypeScript)\nDESCRIPTION: Example shows that using responsive objects for variant props (like size={{ base: 'sm', md: 'lg' }}) does not work with compoundVariants due to library constraints. Theoretical input is responsive variant props; output is undefined or incorrect style merging. Recommends rendering per breakpoint if needed.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/recipes.mdx#2025-04-23_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\n<Button size={{ base: \"sm\", md: \"lg\" }} visual=\"outline\">\n  Click Me\n</Button>\n```\n\n----------------------------------------\n\nTITLE: EnvironmentProvider with iframe Implementation\nDESCRIPTION: Example showing how to use EnvironmentProvider with react-frame-component for iframe environments.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/environment-provider.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { EnvironmentProvider } from \"@chakra-ui/react\"\nimport Frame, { FrameContextConsumer } from \"react-frame-component\"\n\nexport const Demo = () => (\n  <Frame>\n    <FrameContextConsumer>\n      {({ document }) => (\n        <EnvironmentProvider value={() => document}>\n          {/* Your App */}\n        </EnvironmentProvider>\n      )}\n    </FrameContextConsumer>\n  </Frame>\n)\n```\n\n----------------------------------------\n\nTITLE: Importing File Upload Component in React\nDESCRIPTION: Shows how to import the FileUpload component from Chakra UI.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/file-upload.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { FileUpload } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Using ColorPalette Feature in Chakra UI v3\nDESCRIPTION: Shows how to use the colorPalette feature to create color placeholders that can be swapped using CSS variables\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/blog/00-announcing-v3.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Box colorPalette=\"red\">\n  <Box bg=\"colorPalette.subtle\" color=\"colorPalette.fg\">\n    Welcome\n  </Box>\n  <Box bg=\"colorPalette.solid\" color=\"colorPalette.contrast\">\n    Welcome\n  </Box>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Chakra UI Utility (`borderX`) with Mapped Values in TypeScript\nDESCRIPTION: This snippet illustrates defining a custom utility `borderX` (shorthand `bx`) in Chakra UI using `defineConfig` with mapped values. It allows using keys like `\"small\"` or `\"medium\"` which are then transformed into specific pixel values (`\"2px\"`, `\"5px\"`) for `borderTopWidth`. The `transform` function also sets a fixed `borderTopColor` using a theme token.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/customization/utilities.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createSystem, defaultConfig, defineConfig } from \"@chakra-ui/react\"\n\nconst customConfig = defineConfig({\n  utilities: {\n    extend: {\n      borderX: {\n        values: { small: \"2px\", medium: \"5px\" },\n        shorthand: \"bx\",\n        transform(value, { token }) {\n          return {\n            borderTopWidth: value,\n            borderTopColor: token(\"colors.gray.400\"),\n          }\n        },\n      },\n    },\n  },\n})\n\nconst system = createSystem(defaultConfig, customConfig)\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Theme Conditions in Chakra UI\nDESCRIPTION: Shows how to add custom theme conditions or pseudo props using theme.conditions config. This allows for custom data-state selectors.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/packages/react/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst theme = extendTheme({\n  conditions: {\n    _closed: \"[data-state='closed']\", // pseudo prop\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Chakra UI dependencies with npm\nDESCRIPTION: This command installs the required Chakra UI and Emotion dependencies for use with Next.js.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/get-started/frameworks/next-app.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @chakra-ui/react @emotion/react\n```\n\n----------------------------------------\n\nTITLE: Defining Motion Styles in Chakra UI\nDESCRIPTION: Creates reusable motion styles for animations using the defineMotionStyles function. This example defines a 'slide-fade-in' animation that adapts to different placements.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/packages/react/CHANGELOG.md#2025-04-23_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport { defineMotionStyles } from \"@chakra-ui/react\"\n\nexport const motionStyles = defineMotionStyles({\n  \"slide-fade-in\": {\n    value: {\n      transformOrigin: \"var(--transform-origin)\",\n      animationDuration: \"fast\",\n      \"&[data-placement^=top]\": {\n        animationName: \"slide-from-top, fade-in\",\n      },\n      \"&[data-placement^=bottom]\": {\n        animationName: \"slide-from-bottom, fade-in\",\n      },\n      \"&[data-placement^=left]\": {\n        animationName: \"slide-from-left, fade-in\",\n      },\n      \"&[data-placement^=right]\": {\n        animationName: \"slide-from-right, fade-in\",\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Chakra UI Snippets using CLI\nDESCRIPTION: Uses the Chakra UI CLI to add pre-built component snippets to the project for faster UI development.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/get-started/installation.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx @chakra-ui/cli snippet add\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Chakra UI Icon Component in JSX\nDESCRIPTION: This snippet demonstrates the most basic usage of the Icon component. Note that Chakra UI doesn't provide icons out of the box, so this will not display any icon by default.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/icon.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Icon />\n```\n\n----------------------------------------\n\nTITLE: Configuring Panda CSS with Chakra UI Preset - TypeScript\nDESCRIPTION: Configuration setup for integrating Chakra UI preset into Panda CSS using defineConfig. Creates a TypeScript configuration file that includes the Chakra UI preset in Panda CSS settings.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/packages/panda-preset/README.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// panda.config.ts\nimport { defineConfig } from \"@pandacss/dev\"\n\nexport default defineConfig({\n  presets: [\"@chakra-ui/panda-preset\"],\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Types for Chakra UI Theme with Animation Styles (Bash)\nDESCRIPTION: This command uses the Chakra UI Command Line Interface (CLI) tool (`@chakra-ui/cli`) to generate TypeScript types based on the theme configuration file specified (`./theme.ts`). Running this command after updating the theme ensures that the newly added animation styles are recognized by TypeScript for better developer experience and type safety.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/animation-styles.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx @chakra-ui/cli typegen ./theme.ts\n```\n\n----------------------------------------\n\nTITLE: Configuring Pie Chart Start and End Angles\nDESCRIPTION: Setting custom start and end angles for the Pie Chart to control its orientation and arc coverage.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/pie-chart.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Pie startAngle={180} endAngle={0}>\n  {/* ... */}\n</Pie>\n```\n\n----------------------------------------\n\nTITLE: Adding QR Code Closed Component to Chakra UI Project\nDESCRIPTION: This bash command adds a closed component version of the QR Code to a Chakra UI project using the Chakra CLI.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/qr-code.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx @chakra-ui/cli snippet add qr-code\n```\n\n----------------------------------------\n\nTITLE: Importing Prose Component in React\nDESCRIPTION: Import statement for the Prose component from the local UI components directory.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/prose.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Prose } from \"@/components/ui/prose\"\n```\n\n----------------------------------------\n\nTITLE: Theme Configuration in Chakra UI v2 vs v3\nDESCRIPTION: Comparison of theme setup between v2 and v3. Version 2 uses extendTheme function for customization, while v3 uses createSystem with a more modular approach for defining tokens.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/blog/01-chakra-v2-vs-v3-a-detailed-comparison.mdx#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst theme = extendTheme({\n  colors: {\n    brand: {\n      100: \"#f7fafc\",\n      900: \"#1a202c\",\n    },\n  },\n})\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createSystem } from \"@chakra-ui/react\"\n\nexport const system = createSystem(defaultConfig, {\n  theme: {\n    tokens: {\n      fonts: {\n        heading: { value: `'Figtree', sans-serif` },\n        body: { value: `'Figtree', sans-serif` },\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Separator Component in React\nDESCRIPTION: Shows how to import the Separator component from Chakra UI in a React application.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/separator.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Separator } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Installing Chakra UI with Multiple Package Managers\nDESCRIPTION: Commands to install Chakra UI React package using different package managers (npm, pnpm, and bun).\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/notes/mdx-reference.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @chakra-ui/react\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm i @chakra-ui/react\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun i @chakra-ui/react\n```\n\n----------------------------------------\n\nTITLE: Updating Chakra UI Theme with Layer Styles\nDESCRIPTION: This code shows how to update the Chakra UI theme with custom layer styles. It imports the layerStyles and adds them to the theme configuration using createSystem and defineConfig functions.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/layer-styles.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createSystem, defineConfig } from \"@chakra-ui/react\"\nimport { layerStyles } from \"./layer-styles\"\n\nconst config = defineConfig({\n  theme: {\n    layerStyles,\n  },\n})\n\nexport default createSystem(defaultConfig, config)\n```\n\n----------------------------------------\n\nTITLE: Combining Layer Styles in Chakra UI\nDESCRIPTION: Shows how to combine multiple layer styles, including hover states, to create complex designs with minimal code.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/packages/react/CHANGELOG.md#2025-04-23_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\n<Box\n  layerStyle=\"fill.muted\"\n  _hover={{ layerStyle: \"outline.solid\" }}\n  colorPalette=\"red\"\n>\n  This is a complex layer\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Importing Clipboard Component in Chakra UI\nDESCRIPTION: Shows how to import the Clipboard component from Chakra UI.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/clipboard.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Clipboard } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Using Simplified Checkbox in Chakra UI v3\nDESCRIPTION: Shows how to use the simplified Checkbox component after implementing snippets\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/blog/00-announcing-v3.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Checkbox } from \"@/components/ui/checkbox\"\n\nconst Demo = () => <Checkbox>Click me</Checkbox>\n```\n\n----------------------------------------\n\nTITLE: Setting SVG Stroke Color with Chakra UI in JSX\nDESCRIPTION: This snippet illustrates using the `stroke` prop on the `chakra.svg` component to define the stroke color of an SVG element. This prop corresponds to the CSS `stroke` property and accepts values from the `colors` token category within the Chakra UI theme.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/svg.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<chakra.svg stroke=\"blue.500\">\n  <path d=\"...\" />\n</chakra.svg>\n```\n\n----------------------------------------\n\nTITLE: Adding EmptyState Component via CLI - Chakra UI Bash\nDESCRIPTION: Command to automatically add the closed component version of Empty State to a project using Chakra UI CLI.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/empty-state.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx @chakra-ui/cli snippet add empty-state\n```\n\n----------------------------------------\n\nTITLE: Validating Style Prop Names with isValidProperty in Chakra UI Theming (TypeScript)\nDESCRIPTION: Demonstrates how to use system.isValidProperty to check if given style prop names are valid within Chakra UI's custom props system. Useful for filtering props or implementing custom logic. Takes a property name as input; returns a boolean.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/overview.mdx#2025-04-23_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nconst system = createSystem(defaultConfig, config)\n\nsystem.isValidProperty(\"color\")\n// => true\n\nsystem.isValidProperty(\"background\")\n// => true\n\nsystem.isValidProperty(\"invalid\")\n// => false\n\n```\n\n----------------------------------------\n\nTITLE: Installing Chakra UI Dependencies with npm\nDESCRIPTION: Command to install the required Chakra UI and Emotion packages using npm.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/get-started/frameworks/next-pages.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @chakra-ui/react @emotion/react\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Theme in Chakra UI Provider\nDESCRIPTION: This TSX snippet demonstrates how to pass a custom theme to the ChakraProvider component, ensuring that the custom theme is used throughout the application, including inside iframes.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/get-started/environments/iframe.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<ChakraProvider value={system}>{/* ... */}</ChakraProvider>\n```\n\n----------------------------------------\n\nTITLE: Adding Chakra UI Snippets using CLI\nDESCRIPTION: Uses the Chakra UI CLI to add pre-built component snippets to the project.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/get-started/frameworks/vite.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx @chakra-ui/cli snippet add\n```\n\n----------------------------------------\n\nTITLE: Generating Theme Types with Chakra UI CLI (Bash)\nDESCRIPTION: Shows the command using the Chakra UI Command Line Interface (`@chakra-ui/cli typegen`) to generate TypeScript definitions based on a theme configuration file (`./theme.ts`). This process introspects the theme, including slot recipes, and creates types for improved developer experience and type safety.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/slot-recipes.mdx#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nnpx @chakra-ui/cli typegen ./theme.ts\n```\n```\n\n----------------------------------------\n\nTITLE: Customizing Bar Color in Recharts\nDESCRIPTION: This snippet shows how to customize the color of individual bars in a Recharts bar chart using the Cell component.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/bar-chart.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Bar dataKey=\"allocation\">\n  <Cell fill=\"red\" />\n</Bar>\n```\n\n----------------------------------------\n\nTITLE: Rendering Breakpoint Documentation Component - Chakra UI - JSX\nDESCRIPTION: Renders the <BreakpointDoc /> React component, which likely displays the list of available breakpoints in Chakra UI. This snippet requires that the BreakpointDoc component be available in the scope, and it is typically used within a markdown or MDX context. There are no parameters required. The output is a rendered list or table of breakpoints. Requires a React/MDX environment; may not render in pure markdown files.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/breakpoints.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<BreakpointDoc />\n```\n\n----------------------------------------\n\nTITLE: Adding Status Snippet via Chakra UI CLI - Bash\nDESCRIPTION: Provides the CLI command for installing the Status component snippet into your project using Chakra UI's CLI. Requires Node.js and Chakra UI CLI to be installed. The command fetches and adds the status code example for rapid setup. Run from your project root directory.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/status.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx @chakra-ui/cli snippet add status\n```\n\n----------------------------------------\n\nTITLE: Rendering Chakra UI Color Tokens Documentation with React\nDESCRIPTION: This JSX snippet utilizes the `<ColorTokenDoc />` component, presumably a custom React component within the documentation system, to display the standard color tokens available in Chakra UI. This component likely fetches and formats the token data for presentation.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/colors.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ColorTokenDoc />\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for TypeScript Path Aliases\nDESCRIPTION: Updates the Vite configuration to use TypeScript path aliases, enhancing module resolution.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/get-started/frameworks/vite.mdx#2025-04-23_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport react from \"@vitejs/plugin-react\"\nimport { defineConfig } from \"vite\"\nimport tsconfigPaths from \"vite-tsconfig-paths\"\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [react(), tsconfigPaths()],\n})\n```\n\n----------------------------------------\n\nTITLE: Running the Remix Development Server\nDESCRIPTION: Command to start the Remix application in development mode, which provides features like hot reloading for a better development experience.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/sandbox/remix-ts/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shellscript\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Creating Gradient Fill for Area Charts\nDESCRIPTION: Example of using Chart.Gradient to create a gradient fill for an area chart. The code highlights the stops configuration with a syntax error in the 'offset' property of the first stop, showing how to define gradient colors and opacity.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/area-chart.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<defs>\n  <Chart.Gradient\n    id=\"uv-gradient\"\n    stops={[\n      { offse: \"0%\", color: \"teal.solid\", opacity: 1 },\n      { offset: \"100%\", color: \"red.solid\", opacity: 1 },\n    ]}\n  />\n</defs>\n```\n\n----------------------------------------\n\nTITLE: Importing Fieldset Component in Chakra UI\nDESCRIPTION: How to import the Fieldset component from Chakra UI in a React application.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/fieldset.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Fieldset } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js Document for Chakra UI\nDESCRIPTION: Modification to the Next.js _document.tsx file to add the suppressHydrationWarning prop for Chakra UI compatibility.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/get-started/frameworks/next-pages.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Head, Html, Main, NextScript } from \"next/document\"\n\nexport default function Document() {\n  return (\n    <Html suppressHydrationWarning>\n      <Head />\n      <body>\n        <Main />\n        <NextScript />\n      </body>\n    </Html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Scaffolding Default Chakra UI Tokens and Recipes via CLI (Bash)\nDESCRIPTION: Run this CLI command to generate a theme directory containing all default tokens and recipes. Useful for fully custom themes, this command outputs the structure needed to override any aspect of the design system. Requires npx and @chakra-ui/cli installed in your environment. Output location is customizable with --outdir. Input: none. Output: theme files in specified directory.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/customization/overview.mdx#2025-04-23_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nnpx @chakra-ui/cli eject --outdir ./theme\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript Type Declarations for React and Node\nDESCRIPTION: Command to install TypeScript type declarations for React, React DOM, and Node.js as development dependencies, which provides type checking and autocompletion for these libraries.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/sandbox/next-app/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @types/react @types/react-dom @types/node\n```\n\n----------------------------------------\n\nTITLE: Importing Badge Component in Chakra UI\nDESCRIPTION: Shows how to import the Badge component from Chakra UI React package.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/badge.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Badge } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Using Typography Tokens in Chakra UI Text Component\nDESCRIPTION: Demonstrates applying font size and weight tokens to a Chakra UI Text component. This ensures typography remains consistent throughout the application.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/blog/03-building-consistent-uis-with-design-tokens.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Text fontSize=\"lg\" fontWeight=\"bold\">\n  Styled with Font Tokens\n</Text>\n```\n\n----------------------------------------\n\nTITLE: Importing Editable Component - React/Chakra UI\nDESCRIPTION: Shows how to import the Editable component from Chakra UI library.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/editable.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Editable } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Enforcing Strict Token Usage in Chakra UI Theming with TypeScript\nDESCRIPTION: Shows configuration enforcing strict token usage via the strictTokens property in defineConfig. Setting this to true enables TypeScript checks that restrict style properties to only those defined as design tokens in the theme. Non-token values (e.g., hex colors not in the tokens map) cause TS errors. Output is a custom system instance.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/overview.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = defineConfig({\n  strictTokens: true,\n})\n\nexport default createSystem(defaultConfig, config)\n\n```\n\n----------------------------------------\n\nTITLE: Upgrading to Chakra UI v3.16\nDESCRIPTION: Command to upgrade to the latest version of Chakra UI using npm. This installs the most recent version of the @chakra-ui/react package.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/blog/07-chakra-3.16.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @chakra-ui/react@latest\n```\n\n----------------------------------------\n\nTITLE: Implementing Menu Component (After Refactoring)\nDESCRIPTION: Demonstrates how Menu components are imported and used after refactoring, using the namespace pattern directly from the Chakra UI package and adding Portal/Positioner components.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/blog/05-refactoring-snippets.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Menu, Portal } from \"@chakra-ui/react\"\n\nconst Demo = () => {\n  return (\n    <Menu.Root>\n      <Menu.Trigger asChild>\n        <Button>Open</Button>\n      </Menu.Trigger>\n      <Portal>\n        <Menu.Positioner>\n          <Menu.Content>\n            <Menu.Item value=\"...\" />\n          </Menu.Content>\n        </Menu.Positioner>\n      </Portal>\n    </Menu.Root>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Color Mode Snippet with Chakra CLI\nDESCRIPTION: Command to add the color mode snippet to your Chakra UI project using the CLI tool.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/concepts/color-mode.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @chakra-ui/cli snippet add color-mode\n```\n\n----------------------------------------\n\nTITLE: Applying Global Styles with Chakra UI Theming System in TypeScript\nDESCRIPTION: Configures the globalCss property in the Chakra UI theming config, allowing the developer to apply global CSS rules (such as margin and padding resets) to html and body. This requires @chakra-ui/react and TypeScript, and outputs a system ready for use in the app.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/overview.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = defineConfig({\n  globalCss: {\n    \"html, body\": {\n      margin: 0,\n      padding: 0,\n    },\n  },\n})\n\nexport default createSystem(defaultConfig, config)\n\n```\n\n----------------------------------------\n\nTITLE: Customizing X-Axis Ticks in React Line Chart\nDESCRIPTION: Show only start and end ticks on the X-axis and add a custom label by passing props to the XAxis component.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/line-chart.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n<XAxis\n  ticks={[\"January\", \"August\"]}\n  label={{ value: \"[January - August] Customers\", position: \"bottom\" }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Resource Card Component in JSX\nDESCRIPTION: JSX code showing the ResourceCard component usage for displaying external resources like slides and video links\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/blog/04-chakra-ui-london-meetup-2024.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ResourceCard\n  type=\"figma\"\n  title=\"View the slides\"\n  url=\"https://www.figma.com/deck/WbCGjQGQCupXNvCiSqMHsf/Chakra-Meetup-Nov.?node-id=1-25&node-type=slide&viewport=-136%2C-13%2C0.63&t=tAFo6Oa8uI2pxIW5-1&scaling=min-zoom&content-scaling=fixed&page-id=0%3A1\"\n/>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<ResourceCard\n  type=\"site\"\n  title=\"View the slides\"\n  url=\"https://hidden-gems-of-chakra-ui-v3.vercel.app/1\"\n/>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<ResourceCard\n  type=\"youtube\"\n  title=\"Watch the talk\"\n  url=\"https://youtu.be/neesBbYuGT0\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Tokens in Chakra UI Theme\nDESCRIPTION: Example of defining asset tokens for logos and icons, supporting both URL and SVG formats.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/tokens.mdx#2025-04-23_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineTokens } from \"@chakra-ui/react\"\n\nconst tokens = defineTokens({\n  tokens: {\n    assets: {\n      logo: {\n        value: { type: \"url\", value: \"/static/logo.png\" },\n      },\n      checkmark: {\n        value: { type: \"svg\", value: \"<svg>...</svg>\" },\n      },\n    },\n  },\n})\n\nexport default createSystem({\n  theme: { tokens },\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Link Component from Chakra UI in JSX\nDESCRIPTION: Shows how to import the Link component from the Chakra UI library.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/link.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Link } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Executing the CLI Tokens Command with a Published Theme Package in Shell\nDESCRIPTION: Command to generate theme token type definitions from a published Chakra UI theme package using the tokens command.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/packages/cli/CHANGELOG.md#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nnpx @chakra-ui/cli tokens <@your-org/chakra-theme-package>\n```\n\n----------------------------------------\n\nTITLE: Calculating Total Sum with getTotal in TypeScript React\nDESCRIPTION: Demonstrates how to use the getTotal function to compute the total sum of a given series across all entries.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/use-chart.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconsole.log(chart.getTotal(\"revenue\")) // 6000\n```\n\n----------------------------------------\n\nTITLE: Importing VisuallyHidden Component in React with Chakra UI\nDESCRIPTION: This snippet shows how to import the VisuallyHidden component from Chakra UI in a React application. This is the first step to using the component in your project.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/visually-hidden.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { VisuallyHidden } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Recipe Variant Types with Chakra CLI (Bash)\nDESCRIPTION: Demonstrates running the Chakra UI CLI command to generate TypeScript types for recipes present in the theme.ts file. Produces typed variant prop helpers for use in components. Dependency: @chakra-ui/cli installed in the project.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/recipes.mdx#2025-04-23_snippet_11\n\nLANGUAGE: Bash\nCODE:\n```\nnpx @chakra-ui/cli typegen ./theme.ts\n```\n\n----------------------------------------\n\nTITLE: Adding Alert Component Snippet with Chakra CLI\nDESCRIPTION: Command line instruction for adding the Alert component snippet to a project using Chakra UI's CLI tool.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/alert.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx @chakra-ui/cli snippet add alert\n```\n\n----------------------------------------\n\nTITLE: Implementing Rating Group with Explicit Items\nDESCRIPTION: Shows the verbose way of implementing a Rating Group component with explicit control over individual rating items.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/blog/05-refactoring-snippets.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<RatingGroup.Control>\n  {Array.from({ length: 5 }).map((_, index) => (\n    <RatingGroup.Item key={index} index={index + 1}>\n      <RatingGroup.ItemIndicator />\n    </RatingGroup.Item>\n  ))}\n</RatingGroup.Control>\n```\n\n----------------------------------------\n\nTITLE: Importing QR Code Component in Chakra UI\nDESCRIPTION: This snippet shows how to import the QR Code component from Chakra UI.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/qr-code.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { QrCode } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Adding a Radio Group via CLI - Chakra UI CLI (Bash)\nDESCRIPTION: Runs a CLI command to add the closed component implementation for Chakra UI's Radio Group to the project. Requires the '@chakra-ui/cli' package to be installed; running this will scaffold the necessary component files for rapid integration.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/radio.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx @chakra-ui/cli snippet add radio\n```\n\n----------------------------------------\n\nTITLE: Managing Column Breaks Inside Elements with Chakra UI in JSX\nDESCRIPTION: Shows how to use the breakInside prop to define page, column, or region break behavior inside a Box element. Requires Chakra UI; breakInside prop takes values like 'avoid' to prevent interior breaks. This maps to the CSS 'break-inside' property.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/layout.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Box columns=\\\"2\\\">\\n  <Box>Item 1</Box>\\n  <Box breakInside=\\\"avoid\\\">Item 2</Box>\\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Using SegmentGroup.Items Shortcut in React with Chakra UI\nDESCRIPTION: Demonstrates a more concise way to render multiple items using the SegmentGroup.Items shortcut.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/segmented-control.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<SegmentGroup.Items items={items} />\n```\n\n----------------------------------------\n\nTITLE: Disabling Cascade Layers in Chakra UI Theme Configuration\nDESCRIPTION: This JavaScript code demonstrates how to disable cascade layers in Chakra UI by setting the 'disableLayers' option to true when creating the system configuration.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/cascade-layers.mdx#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nexport const system = createSystem(defaultConfig, {\n  disableLayers: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Starting Storybook Server\nDESCRIPTION: Command to start the Storybook server and run the application.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/get-started/frameworks/storybook.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run storybook\n```\n\n----------------------------------------\n\nTITLE: Importing Kbd Component in React\nDESCRIPTION: Shows how to import the Kbd component from Chakra UI in a React application.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/kbd.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Kbd } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Basic CLI Usage for Theme Token Generation\nDESCRIPTION: Shows the basic command to generate TypeScript types from a theme file\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/packages/cli/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx @chakra-ui/cli tokens <path/to/your/theme.(js|ts)>\n```\n\n----------------------------------------\n\nTITLE: Customizing Token CSS Variable Root Selector - Chakra UI - TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to configure Chakra UI's system to apply CSS variables to a custom root selector using createSystem and defineConfig. It imports necessary Chakra UI theming utilities, defines a custom configuration with the cssVarsRoot option targeting the \":where(html)\" selector, and exports the customized system. Key parameters include cssVarsRoot, which changes where CSS variables are attached. Requires @chakra-ui/react as a dependency, and usage expects the configuration to alter resultant CSS variable location.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/customization/css-variables.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createSystem, defaultConfig, defineConfig } from \"@chakra-ui/react\"\n\nconst customConfig = defineConfig({\n  cssVarsRoot: \":where(html)\",\n})\n\nexport const system = createSystem(defaultConfig, customConfig)\n```\n\n----------------------------------------\n\nTITLE: Adding Inside Labels to Pie Chart\nDESCRIPTION: Example of adding labels inside the Pie Chart segments using Recharts' LabelList component with position set to 'inside'.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/pie-chart.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Pie>\n  <LabelList dataKey=\"name\" position=\"inside\" />\n</Pie>\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Chakra UI\nDESCRIPTION: Updates the tsconfig.json file with necessary compiler options for using Chakra UI with TypeScript, including module settings and path aliases.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/get-started/installation.mdx#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"module\": \"ESNext\",\n    \"moduleResolution\": \"Bundler\",\n    \"skipLibCheck\": true,\n    \"paths\": {\n      \"@/*\": [\"./src/*\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Duration Tokens in Chakra UI Theme\nDESCRIPTION: Shows how to define duration tokens for animations and transitions, specified in milliseconds.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/tokens.mdx#2025-04-23_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineTokens } from \"@chakra-ui/react\"\n\nconst tokens = defineTokens({\n  durations: {\n    fast: { value: \"100ms\" },\n  },\n})\n\nexport default createSystem({\n  theme: { tokens },\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Radio Card Component in React\nDESCRIPTION: Shows how to import the RadioCard component from Chakra UI.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/radio-card.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RadioCard } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Chakra UI in Vite\nDESCRIPTION: Updates the tsconfig.app.json file with necessary compiler options for Chakra UI in a Vite project.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/get-started/frameworks/vite.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"target\": \"ESNext\",\n    \"module\": \"ESNext\",\n    \"moduleResolution\": \"Bundler\",\n    \"skipLibCheck\": true,\n    \"paths\": {\n      \"@/*\": [\"./src/*\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GitHub Issue Reference in Markdown\nDESCRIPTION: Markdown formatting for referencing GitHub issue numbers with links\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/sandbox/next-pages/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[#3623](https://github.com/chakra-ui/chakra-ui/pull/3623)\n```\n\n----------------------------------------\n\nTITLE: Creating Detached Segments in Donut Charts\nDESCRIPTION: Demonstrates how to create an effect where the active segment is scaled and detached from the rest of the segments using activeIndex and activeShape props.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/donut-chart.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Pie\n  innerRadius={60}\n  outerRadius={100}\n  activeIndex={0}\n  activeShape={<Sector outerRadius={120} />}\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding Tooltip Snippet via Chakra UI CLI\nDESCRIPTION: Adds the pre-defined `tooltip` code snippet to the user's project using the Chakra UI command-line interface (CLI). This command simplifies the setup process as an alternative to manual component composition.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/tooltip.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx @chakra-ui/cli snippet add tooltip\n```\n\n----------------------------------------\n\nTITLE: Code Difference Highlighting in TypeScript\nDESCRIPTION: Demonstrates code diff highlighting in TypeScript, showing a line being replaced with different text, with removal and addition annotations.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/notes/mdx-reference.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(\"hewwo\") // [!code --]\nconsole.log(\"hello\") // [!code ++]\nconsole.log(\"goodbye\")\n```\n\n----------------------------------------\n\nTITLE: Known hydration error in Remix with Chakra UI\nDESCRIPTION: Displays a common error message related to hydration issues when using Chakra UI with Remix, which may be caused by browser extensions.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/get-started/frameworks/remix.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nError: There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering.\n```\n\n----------------------------------------\n\nTITLE: Setting Scroll Margins in Chakra UI JSX\nDESCRIPTION: Demonstrates applying scroll margins using the `scrollMargin*` props. This example uses `scrollMarginY=\"2\"` on a scrollable `Box` to add margin space (using theme spacing scale value '2') on the block axis (top and bottom) outside the scroll snap area.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/interactivity.mdx#2025-04-23_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<Box maxH=\"100px\" overflowY=\"auto\" scrollMarginY=\"2\">\n  Scrollbar Container with block padding\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Consuming a Custom Title Recipe with useRecipe in Chakra UI (TSX)\nDESCRIPTION: Demonstrates how to consume a custom theme recipe in a Chakra UI component. Uses `useRecipe` to retrieve styles for a given variant and applies them to a Box element used as a heading. Expects a recipe named `title` defined in the theme. Inputs include any extra props; outputs styled JSX.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/customization/recipes.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst Title = (props) => {\n  const recipe = useRecipe({ key: \"title\" })\n  const styles = recipe({ size: \"lg\" })\n  return <Box as=\"h1\" css={styles} {...props} />\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Blockquote Snippet to Project using Chakra CLI\nDESCRIPTION: Shows the command to automatically add a closed component composition of the Blockquote to your project using the Chakra UI CLI.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/blockquote.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx @chakra-ui/cli snippet add blockquote\n```\n\n----------------------------------------\n\nTITLE: Running Chakra UI CLI Snippet Add Command for Number Input\nDESCRIPTION: Uses the Chakra UI CLI to automatically install and add the number-input closed component snippet to the project. Requires the '@chakra-ui/cli' package and adequate permissions to run commands via npx.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/number-input.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx @chakra-ui/cli snippet add number-input\n```\n\n----------------------------------------\n\nTITLE: Building Local Packages\nDESCRIPTION: Command to build local versions of all packages in the Chakra UI monorepo. The fast build option is used for quicker development.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm build:fast\n```\n\n----------------------------------------\n\nTITLE: Generating Types for Custom Conditions\nDESCRIPTION: CLI command to generate TypeScript types for custom theme conditions.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/packages/react/CHANGELOG.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npnpm chakra-cli tokens src/theme/index.ts\n```\n\n----------------------------------------\n\nTITLE: Including ComponentGrid Component in Markdown for Chakra UI\nDESCRIPTION: A component inclusion that renders a grid display of all the UI components available in the Chakra UI library. This component likely fetches and organizes all components into a visual grid for easy browsing.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/concepts/overview.mdx#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<ComponentGrid />\n```\n\n----------------------------------------\n\nTITLE: Line Highlighting in TypeScript\nDESCRIPTION: Shows how to highlight a specific line (line 1) in TypeScript code using curly braces notation.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/notes/mdx-reference.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(\"hewwo\")\nconsole.log(\"goodbye\")\n```\n\n----------------------------------------\n\nTITLE: Adding Chakra UI Slider as a CLI Snippet (Bash Command)\nDESCRIPTION: This bash snippet shows how to use Chakra UI's CLI to fetch and add a prebuilt slider snippet into your project. The command 'npx @chakra-ui/cli snippet add slider' downloads and inserts the relevant slider boilerplate. 'npx' and '@chakra-ui/cli' are required as global or local dependencies. Output is CLI-driven and files will be created or modified in your project's directory.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/slider.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx @chakra-ui/cli snippet add slider\n```\n\n----------------------------------------\n\nTITLE: Using Indicator Layer Styles in Chakra UI\nDESCRIPTION: Shows how to use indicator layer styles for different positions (top, end, bottom, start) with color palettes.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/packages/react/CHANGELOG.md#2025-04-23_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\n<Box layerStyle=\"indicator.top\" colorPalette=\"red\">\n  This is a top indicator layer\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Version Tracking in Markdown\nDESCRIPTION: Changelog entry documenting version updates and changes to the @chakra-ui/react package, including fixes to Dialog, Drawer, SegmentGroup components and more across multiple versions.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/packages/react/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @chakra-ui/react\n\n## 3.16.1\n\n### Patch Changes\n\n- [`46075ba`](https://github.com/chakra-ui/chakra-ui/commit/46075ba8cb69730378c7aeb1b710d36df0e01355)\n  Thanks [@segunadebayo](https://github.com/segunadebayo)! - - **Dialog,\n  Drawer**: Use correct z-index for dialog and drawer backdrop\n\n  - **SegmentGroup**: Fix issue where `orientation` prop to `SegmentGroup.Root`\n    doesn't work as expected\n```\n\n----------------------------------------\n\nTITLE: Using Disabled Layer Styles in Chakra UI\nDESCRIPTION: Demonstrates how to apply disabled styles conditionally using the _disabled prop.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/packages/react/CHANGELOG.md#2025-04-23_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\n<Box _disabled={{ layerStyle: \"disabled\" }}>Disabled Button</Box>\n```\n\n----------------------------------------\n\nTITLE: Docker Deployment Commands\nDESCRIPTION: Commands to build and run the React Router application using Docker, exposing port 3000.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/sandbox/react-router/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t my-app .\n\n# Run the container\ndocker run -p 3000:3000 my-app\n```\n\n----------------------------------------\n\nTITLE: New Compound Checkbox Implementation in Chakra UI v3\nDESCRIPTION: Demonstrates the new composable approach for Checkbox component in v3\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/blog/00-announcing-v3.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Checkbox.Root>\n  <Checkbox.HiddenInput />\n  <Checkbox.Control>\n    <Checkbox.Indicator />\n  </Checkbox.Control>\n  <Checkbox.Label>Click me</Checkbox.Label>\n</Checkbox.Root>\n```\n\n----------------------------------------\n\nTITLE: Forcing Chakra UI Snippet Updates with CLI\nDESCRIPTION: Command to overwrite existing Chakra UI snippets in your project using the --force flag with the CLI. This is useful when you want to update snippets to their latest versions from Chakra UI.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/guides/snippet-how-to-manage-updates.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx chakra snippet add --force\n```\n\n----------------------------------------\n\nTITLE: Adding Chakra UI Snippets via CLI\nDESCRIPTION: This command uses the Chakra UI CLI to add pre-built component snippets to the project for faster UI development.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/get-started/environments/shadow-dom.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx @chakra-ui/cli snippet add\n```\n\n----------------------------------------\n\nTITLE: Rendering Z-Index Token Documentation with MDX Component (Markdown)\nDESCRIPTION: This snippet demonstrates how to embed the <ZIndexTokenDoc /> MDX component within a Markdown (.mdx) documentation file. It is used in Chakra UI documentation to automatically display a formatted list of z-index tokens for users. The snippet relies on Chakra UI's documentation site's ability to process MDX and assumes the <ZIndexTokenDoc /> component is available in scope. No additional parameters are required; the component is self-contained and outputs a pre-defined table or list of tokens.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/z-index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<ZIndexTokenDoc />\n```\n\n----------------------------------------\n\nTITLE: Setting Background Clip with Chakra UI (JSX)\nDESCRIPTION: Illustrates how to use the bgClip prop on a Chakra UI <Box> component to define how the background image or color is clipped. Requires Chakra UI. The bgClip property accepts values like 'border-box', 'padding-box', or 'content-box', and is frequently used together with bgImage to control image rendering.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/background.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Box bgClip=\"border-box\" bgImage=\"url(...)\" />\n```\n\n----------------------------------------\n\nTITLE: Applying Data-Active Styles in Chakra UI\nDESCRIPTION: Shows how to apply styles based on a data-active attribute using the _active modifier.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/conditional-styles.mdx#2025-04-23_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\n<Box data-active _active={{ bg: \"gray.500\" }}>\n  Hello\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Color System in ChakraProvider\nDESCRIPTION: Shows how to apply the customized system to the ChakraProvider component. This allows the new color palette to be used throughout the application's components.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/guides/theming-change-default-color-palette.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\"\n\nimport { system } from \"@/components/theme\"\nimport { ChakraProvider } from \"@chakra-ui/react\"\n\nexport function Provider(props: ColorModeProviderProps) {\n  return (\n    <ChakraProvider value={system}>\n      <ColorModeProvider {...props} />\n    </ChakraProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Size Token Documentation with React Component\nDESCRIPTION: This snippet shows the usage of the custom `<SizesTokenDoc />` React component. This component is intended to be rendered within a documentation page (likely MDX or similar) to display the list of available size tokens defined in the Chakra UI theme. It requires a React environment and the `SizesTokenDoc` component definition to be available in the scope.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/sizes.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<SizesTokenDoc />\n```\n\n----------------------------------------\n\nTITLE: Starting Storybook for Component Development\nDESCRIPTION: Command to start the Storybook development environment, which allows you to view and develop components in isolation.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm storybook\n```\n\n----------------------------------------\n\nTITLE: Exporting a Theme from a Published Package in JavaScript\nDESCRIPTION: Example of how to export a theme object from a published theme package, either as a default export or a named export to be used with the CLI tokens command.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/packages/cli/CHANGELOG.md#2025-04-23_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n// chakra-theme-package/src/index.js\nimport { extendTheme } from \"@chakra-ui/react\"\n\nconst theme = extendTheme({})\n\n// as default export\nexport default theme\n// as named export\nexport { theme }\n```\n\n----------------------------------------\n\nTITLE: Running a Next.js Development Server in Different Package Managers\nDESCRIPTION: Commands for starting the Next.js development server using different package managers: npm, yarn, pnpm, or bun. Running these commands will start a local development server for the Next.js application.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Using Custom Theme Conditions in Components\nDESCRIPTION: Demonstrates usage of custom theme conditions in React components using the _closed pseudo prop.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/packages/react/CHANGELOG.md#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Box data-state=\"closed\" _closed={{ bg: \"red.200\" }}>\n  This box is closed\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Legacy Checkbox Implementation in Chakra UI v2\nDESCRIPTION: Shows the basic usage of Checkbox component in Chakra UI v2\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/blog/00-announcing-v3.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Checkbox>Click me</Checkbox>\n```\n\n----------------------------------------\n\nTITLE: Using the Chakra CLI tokens command with watch flag\nDESCRIPTION: Example of using the Chakra CLI tokens command with the new watch flag that monitors directories for changes. The command defaults to watching the parent directory of the source file.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/packages/cli/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n> chakra-cli tokens src/theme/theme.ts --watch\n```\n\n----------------------------------------\n\nTITLE: Using PaginationItems Shortcut in React\nDESCRIPTION: Shows how to use the PaginationItems shortcut component for rendering pagination items.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/pagination.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Pagination.Items />\n```\n\n----------------------------------------\n\nTITLE: Setting up ESLint with React Plugin\nDESCRIPTION: Configuration for integrating eslint-plugin-react with the project, including React version settings and recommended rules setup. Implements both standard React rules and JSX runtime rules.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/sandbox/iframe/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport react from \"eslint-plugin-react\"\n\nexport default tseslint.config({\n  // Set the react version\n  settings: { react: { version: \"18.3\" } },\n  plugins: {\n    // Add the react plugin\n    react,\n  },\n  rules: {\n    // other rules...\n    // Enable its recommended rules\n    ...react.configs.recommended.rules,\n    ...react.configs[\"jsx-runtime\"].rules,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Manual Download of Next.js TypeScript Example\nDESCRIPTION: Commands to manually download and set up the Next.js TypeScript example project from the official repository.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/sandbox/next-pages/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://codeload.github.com/vercel/next.js/tar.gz/canary | tar -xz --strip=2 next.js-canary/examples/with-typescript\ncd with-typescript\n```\n\n----------------------------------------\n\nTITLE: Rendering Image Component in JSX\nDESCRIPTION: React/JSX code snippets showing the Image component usage with object-fit and fill properties for displaying meetup photos\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/blog/04-chakra-ui-london-meetup-2024.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Image\n  src=\"/images/group-photos.png\"\n  alt=\"Group photos\"\n  objectFit=\"contain\"\n  fill\n  height=\"500px\"\n/>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Image\n  src=\"/images/sage-talk.png\"\n  alt=\"Sage Talk\"\n  objectFit=\"contain\"\n  fill\n  height=\"500px\"\n/>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Image\n  src=\"/images/ivica-talk.png\"\n  alt=\"Ivica Talk\"\n  objectFit=\"contain\"\n  fill\n  height=\"500px\"\n/>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Image\n  src=\"/images/esther-talk.png\"\n  alt=\"Esther Talk\"\n  objectFit=\"contain\"\n  fill\n  height=\"500px\"\n/>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Image\n  src=\"/images/stickers.png\"\n  alt=\"Chakra Stickers\"\n  objectFit=\"contain\"\n  fill\n  height=\"500px\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Letter Spacing Token Documentation in React\nDESCRIPTION: This code utilizes the `<LetterSpacingTokenDoc />` React component to display documentation for the available letter spacing tokens in the Chakra UI library. The component handles the presentation of these spacing values.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/typography.mdx#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<LetterSpacingTokenDoc />\n```\n\n----------------------------------------\n\nTITLE: Rendering Context Menu Example with ExampleTabs Component (JSX)\nDESCRIPTION: This snippet utilizes a custom `ExampleTabs` component (likely specific to the documentation platform) to display an interactive example related to implementing a context menu. The `name` prop specifies which example content to load, in this case, \"menu-with-context-trigger\". This component is used to embed runnable or viewable code examples within the documentation.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/guides/component-implement-context-menu.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ExampleTabs name=\"menu-with-context-trigger\" />\n```\n\n----------------------------------------\n\nTITLE: Running Tests\nDESCRIPTION: Command to execute the test suite for the Chakra UI project.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/get-started/contributing.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Scaffolding Steps Component\nDESCRIPTION: CLI command to scaffold a pre-composed steps component.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/packages/react/CHANGELOG.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nchakra composition add steps\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Button Cursor in Chakra UI Theme (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to customize the Chakra UI theme to change the default cursor style for button elements. It uses the `createSystem` function from `@chakra-ui/react` to initialize a system with a custom theme configuration, specifically overriding the `cursor.button` token to use the `pointer` value.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/cursors.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nimport { createSystem, defaultConfig } from \"@chakra-ui/react\"\n\nexport const system = createSystem(defaultConfig, {\n  theme: {\n    tokens: {\n      cursor: {\n        button: { value: \"pointer\" },\n      },\n    },\n  },\n})\n```\n```\n\n----------------------------------------\n\nTITLE: Starting the Documentation Website\nDESCRIPTION: Command to start the documentation website in development mode, allowing you to make and preview changes to the docs.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/CONTRIBUTING.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm www dev\n```\n\n----------------------------------------\n\nTITLE: Importing Tabs Component in Chakra UI\nDESCRIPTION: Shows how to import the Tabs component from Chakra UI.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/tabs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Tabs } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Installing Ark UI with npm\nDESCRIPTION: Command to install the React version of Ark UI, which provides headless components that can be styled with Chakra UI.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/guides/styling-external-libraries.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @ark-ui/react\n```\n\n----------------------------------------\n\nTITLE: Checking Highlighted Series in TypeScript React\nDESCRIPTION: Shows how to use the isHighlightedSeries function to check if a series is currently highlighted in the chart.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/use-chart.mdx#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nconst isActive = chart.isHighlightedSeries(\"revenue\")\n```\n\n----------------------------------------\n\nTITLE: Adding Chakra UI Snippets\nDESCRIPTION: This command uses the Chakra UI CLI to add pre-built component snippets to the project for faster UI development.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/get-started/environments/iframe.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx @chakra-ui/cli snippet add\n```\n\n----------------------------------------\n\nTITLE: Checkbox Implementation Details in Chakra UI v2\nDESCRIPTION: Detailed implementation of the Checkbox component in Chakra UI v2 showing internal structure\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/blog/00-announcing-v3.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Checkbox = forwardRef(function Checkbox(props, ref) {\n  const { children, iconColor, iconSize, icon, inputProps, ...checkboxProps } =\n    props\n\n  const checkbox = useCheckbox(checkboxProps)\n\n  return (\n    <chakra.label {...checkbox.getRootProps()}>\n      <input {...checkbox.getInputProps(inputProps, ref)} />\n      <chakra.span {...getCheckboxProps()}>\n        <CheckIcon as={icon} color={iconColor} size={iconSize} />\n      </chakra.span>\n      {children && (\n        <chakra.span {...checkbox.getLabelProps()}>{children}</chakra.span>\n      )}\n    </chakra.label>\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Accordion Components (Before Refactoring)\nDESCRIPTION: Shows how Accordion components were imported and used before the refactoring, with components imported from a local UI components directory.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/blog/05-refactoring-snippets.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  AccordionItem,\n  AccordionItemContent,\n  AccordionItemTrigger,\n  AccordionRoot,\n} from \"@/components/ui/accordion\"\n\nconst Demo = () => {\n  return (\n    <AccordionRoot>\n      <AccordionItem>\n        <AccordionItemTrigger>Item</AccordionItemTrigger>\n        <AccordionItemContent>Content</AccordionItemContent>\n      </AccordionItem>\n    </AccordionRoot>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Initial Panda Preset Release - Markdown Changelog Entry\nDESCRIPTION: Documents the initial release of the Panda preset for Chakra UI under version 3.3.0, along with pull request and commit references.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/packages/panda-preset/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[#9430](https://github.com/chakra-ui/chakra-ui/pull/9430)\n[`8f59d88`](https://github.com/chakra-ui/chakra-ui/commit/8f59d88a09f5b03838db1a784fff2f0ed9a81c74)\nThanks [@segunadebayo](https://github.com/segunadebayo)! - Initial release of\nPanda preset for Chakra UI\n```\n\n----------------------------------------\n\nTITLE: Latest Preset Generation - Markdown Changelog Entry\nDESCRIPTION: Documents the generation of the latest preset under version 3.13.0, including pull request and commit references.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/packages/panda-preset/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[#9786](https://github.com/chakra-ui/chakra-ui/pull/9786)\n[`65f932d`](https://github.com/chakra-ui/chakra-ui/commit/65f932dd52782de35e69157dcac7fee255c4efc0)\nThanks [@isBatak](https://github.com/isBatak)! - Generate latest preset\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Chakra UI Utility (`borderX`) with Enum Config in a React Component\nDESCRIPTION: This snippet demonstrates applying the previously defined custom utility `borderX` to a `Box` component from Chakra UI. It attempts to use the value `\"sm\"`, although the associated configuration defined specific pixel values (\"1px\", \"2px\", \"4px\"). Ensure the value used matches the configuration.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/customization/utilities.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Box } from \"@chakra-ui/react\"\n\nfunction App() {\n  return <Box borderX=\"sm\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Applying ARIA-Based Styles in Chakra UI\nDESCRIPTION: Shows how to apply styles based on an aria-expanded attribute using the _expanded modifier.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/conditional-styles.mdx#2025-04-23_snippet_21\n\nLANGUAGE: jsx\nCODE:\n```\n<Box aria-expanded=\"true\" _expanded={{ bg: \"gray.500\" }}>\n  Hello\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Accessing Element Reference in Native Select Component\nDESCRIPTION: This snippet shows how to access the underlying element reference of the NativeSelect component using the useRef hook.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/native-select.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NativeSelect } from \"@chakra-ui/react\"\n\nconst Demo = () => {\n  const ref = useRef<HTMLSelectElement | null>(null)\n  return (\n    <NativeSelect.Root>\n      <NativeSelect.Field ref={ref}>\n        <option value=\"1\">Option 1</option>\n        <option value=\"2\">Option 2</option>\n      </NativeSelect.Field>\n      <NativeSelect.Indicator />\n    </NativeSelect.Root>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Package-based CLI Usage for Theme Token Generation\nDESCRIPTION: Demonstrates how to generate types from a published theme package\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/packages/cli/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpx @chakra-ui/cli tokens <@your-org/chakra-theme-package>\n```\n\n----------------------------------------\n\nTITLE: Importing Checkbox Component in React\nDESCRIPTION: Shows how to import the Checkbox component from Chakra UI.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/checkbox.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Checkbox } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Using Checkmark Component with Different States\nDESCRIPTION: Demonstrates various states of the new Checkmark component including checked, indeterminate and disabled states.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/packages/react/CHANGELOG.md#2025-04-23_snippet_22\n\nLANGUAGE: jsx\nCODE:\n```\n<Stack>\n  <Checkmark />\n  <Checkmark checked />\n  <Checkmark indeterminate />\n  <Checkmark disabled />\n  <Checkmark checked disabled />\n  <Checkmark indeterminate disabled />\n</Stack>\n```\n\n----------------------------------------\n\nTITLE: Building Local Version of Packages\nDESCRIPTION: Command to build a local version of all packages in the Chakra UI project.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/get-started/contributing.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm build:fast\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Parser Options for TypeScript\nDESCRIPTION: Configuration for enabling type-aware lint rules by setting up parser options with TypeScript config files. Specifies project paths and root directory using import.meta.dirname.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/sandbox/iframe/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default tseslint.config({\n  languageOptions: {\n    // other options...\n    parserOptions: {\n      project: [\"./tsconfig.node.json\", \"./tsconfig.app.json\"],\n      tsconfigRootDir: import.meta.dirname,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Installing DataList Closed Component with Chakra CLI\nDESCRIPTION: Command to automatically add the closed DataList component to your project using the Chakra UI CLI.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/data-list.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx @chakra-ui/cli snippet add data-list\n```\n\n----------------------------------------\n\nTITLE: Cloning Chakra UI Repository\nDESCRIPTION: Command to clone the Chakra UI repository from GitHub.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/get-started/contributing.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/chakra-ui/chakra-ui.git\n```\n\n----------------------------------------\n\nTITLE: Manually Downloading Next.js TypeScript Example\nDESCRIPTION: Commands to manually download the Next.js TypeScript example from GitHub using curl, extract the files, and navigate to the project directory.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/sandbox/next-app/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://codeload.github.com/vercel/next.js/tar.gz/canary | tar -xz --strip=2 next.js-canary/examples/with-typescript\ncd with-typescript\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Progress Circle Component in React\nDESCRIPTION: Demonstrates the basic structure and usage of the ProgressCircle component, including its subcomponents.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/progress-circle.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<ProgressCircle.Root>\n  <ProgressCircle.Circle>\n    <ProgressCircle.Track />\n    <ProgressCircle.Range />\n  </ProgressCircle.Circle>\n  <ProgressCircle.ValueText />\n</ProgressCircle.Root>\n```\n\n----------------------------------------\n\nTITLE: JavaScript Output Examples in TypeScript\nDESCRIPTION: Examples showing different ways to output \"hello world\" in TypeScript, using console.log and alert methods.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/notes/mdx-reference.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(\"hello world\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nalert(\"hello world\")\n```\n\n----------------------------------------\n\nTITLE: Importing ColorSwatch Component in Chakra UI (TSX)\nDESCRIPTION: This snippet shows how to import the ColorSwatch component from Chakra UI. It's the first step in using the component in your React application.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/color-swatch.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ColorSwatch } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Chakra CLI tokens command help information\nDESCRIPTION: Help output for the Chakra CLI tokens command showing available options including output path specification, strict component types generation, and watch functionality.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/packages/cli/CHANGELOG.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n> chakra-cli tokens --help\nUsage: chakra-cli tokens [options] <source>\n\nOptions:\n  --out <path>              output file e.g. node_modules/@chakra-ui/styled-system/dist/declarations/src/theming.types.d.ts\n  --strict-component-types  Generate strict types for props variant and size\n  --watch [path]            Watch directory for changes and rebuild\n  -h, --help                display help for command\n```\n\n----------------------------------------\n\nTITLE: Configuring Vitest for React Component Testing\nDESCRIPTION: This configuration file sets up Vitest for testing React components. It enables global imports, sets the test environment to jsdom, and specifies a setup file for additional configuration.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/concepts/testing.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from \"vitest/config\"\n\nexport default defineConfig({\n  // ...\n  test: {\n    globals: true,\n    environment: \"jsdom\",\n    setupFiles: \"./setup-test.ts\",\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Starting Documentation Website\nDESCRIPTION: Command to start the development server for the Chakra UI documentation website.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/get-started/contributing.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm www dev\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript for Next.js\nDESCRIPTION: Command to install TypeScript as a development dependency for a Next.js project, which enables TypeScript support in the application.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/sandbox/next-app/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev typescript\n```\n\n----------------------------------------\n\nTITLE: Applying Y-axis Rotation Transform with Chakra UI Box Component in JSX\nDESCRIPTION: Shows how to rotate a Chakra UI `Box` component around the Y-axis using the `rotateY` prop. The value \"45deg\" applies a 45-degree rotation around the vertical axis.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/transforms.mdx#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Box rotateY=\"45deg\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with PNPM\nDESCRIPTION: Command to install all project dependencies using PNPM package manager. This needs to be run after cloning the repository.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Importing Highlight Component in React\nDESCRIPTION: Shows how to import the Highlight component from Chakra UI in a React application.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/highlight.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Highlight } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Generating Chakra UI Theme Typings via CLI (Bash)\nDESCRIPTION: This command uses the Chakra UI CLI tool to generate TypeScript typings for the configured theme. Dependency is the @chakra-ui/cli NPM package. It is run in the shell once the theme has been updated. There are no input parameters. The output is updated TypeScript definitions for the Chakra UI theme.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/text-styles.mdx#2025-04-23_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nnpx @chakra-ui/cli typegen\n```\n\n----------------------------------------\n\nTITLE: Using Chakra UI Composition Command in CLI\nDESCRIPTION: Command syntax for using the 'composition' command in Chakra UI CLI to import ready-made component compositions for faster development. This command supports adding new compositions and listing existing ones.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/packages/cli/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nUsage: chakra-ui composition [options] [command]\n\nAdd compositions to your project for better DX\n\nOptions:\n  -h, --help                     display help for command\n\nCommands:\n  add [options] [components...]  Add a new composition for better DX\n  list                           List all compositions\n  help [command]                 display help for command\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Parser Options in ESLint\nDESCRIPTION: Configuration for enabling type-aware lint rules by setting up parser options for TypeScript projects. Specifies project files and root directory for TypeScript configuration.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/sandbox/shadow-dom/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default tseslint.config({\n  languageOptions: {\n    // other options...\n    parserOptions: {\n      project: [\"./tsconfig.node.json\", \"./tsconfig.app.json\"],\n      tsconfigRootDir: import.meta.dirname,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Importing the Spinner Component in React/JSX\nDESCRIPTION: Imports the `Spinner` component from the `@chakra-ui/react` library. This step is necessary to make the component available for use within a React application using Chakra UI.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/spinner.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Spinner } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Using the Redesigned Steps Component in Chakra UI\nDESCRIPTION: Demonstrates the new Steps component which replaces the Stepper component. It includes improved accessibility with ARIA attributes and follows the tabs pattern.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/packages/react/CHANGELOG.md#2025-04-23_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\n<Steps.Root defaultIndex={0} count={2}>\n  <Steps.List>\n    <Steps.Item index={0}>\n      <Steps.Trigger>\n        <Steps.Title>Step 1</Steps.Title>\n      </Steps.Trigger>\n      <Steps.Separator />\n    </Steps.Item>\n\n    <Steps.Item index={1}>\n      <Steps.Trigger>\n        <Steps.Title>Step 2</Steps.Title>\n      </Steps.Trigger>\n      <Steps.Separator />\n    </Steps.Item>\n  </Steps.List>\n\n  <Steps.Content index={0}>Step 1</Steps.Content>\n  <Steps.Content index={1}>Step 2</Steps.Content>\n  <Steps.CompleteContent>Complete</Steps.CompleteContent>\n</Steps.Root>\n```\n\n----------------------------------------\n\nTITLE: Applying Display and Responsive Display with Chakra UI Box Component - JSX\nDESCRIPTION: Demonstrates how to set the 'display' property, including responsive variations, on Chakra UI's <Box> component using the 'display' prop. Requires Chakra UI and React as dependencies. The first example applies a static flex display; the second uses an object for breaking display behavior at different breakpoints (e.g., hidden on base, block on md and up). Does not handle conditional logic or side effects.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/display.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx\\n<Box display=\\\"flex\\\" />\\n\\n// responsive\\n<Box display={{ base: \\\"none\\\", md: \\\"block\\\" }} />\\n```\n```\n\n----------------------------------------\n\nTITLE: Importing Wrap Component in Chakra UI (TSX)\nDESCRIPTION: This snippet shows how to import the Wrap and WrapItem components from Chakra UI.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/wrap.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Wrap, WrapItem } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Importing Em Component from Chakra UI in JavaScript\nDESCRIPTION: This snippet shows how to import the Em component from the Chakra UI library. The Em component is used to mark text for emphasis in React applications.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/em.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Em } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Attaching Styles to a Component with Chakra Factory in JSX\nDESCRIPTION: This snippet shows how to attach styles to a component using the chakra function.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/chakra-factory.mdx#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst Link = chakra(\"a\", {\n  base: {\n    bg: \"papayawhip\",\n    color: \"red.500\",\n  },\n})\n\n// usage: <Link href=\"https://chakra-ui.com\" />\n```\n\n----------------------------------------\n\nTITLE: Importing the Tag Component in Chakra UI (TSX)\nDESCRIPTION: Imports the `Tag` component from the `@chakra-ui/react` library, making it available for use within a React/TypeScript application.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/tag.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tag } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Importing Pagination Component in React\nDESCRIPTION: Shows how to import the Pagination component from Chakra UI.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/pagination.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Pagination } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Importing SimpleGrid Component from Chakra UI\nDESCRIPTION: Shows how to import the SimpleGrid component from the Chakra UI library.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/simple-grid.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SimpleGrid } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Importing the Stat Component in Chakra UI (TSX)\nDESCRIPTION: Imports the `Stat` component from the `@chakra-ui/react` library. This import is necessary to utilize the `Stat` component and its associated sub-components within a React application using Chakra UI.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/stat.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Stat } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Applying Divide Width Between Elements in Chakra UI - JavaScript/JSX\nDESCRIPTION: This code demonstrates how to add horizontal or vertical divides between child elements using divideXWidth or divideYWidth props. Parent <Box> receives the divide prop; children are auto-styled. Props take width values such as '1px' and apply to all immediate children (using '> * + *' selector).\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/border.mdx#2025-04-23_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n<Box divideXWidth=\"1px\">\n  <Box>1</Box>\n  <Box>2</Box>\n</Box>\n\n<Box divideYWidth=\"1px\">\n  <Box>1</Box>\n  <Box>2</Box>\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Importing the Flex Component from Chakra UI in JSX\nDESCRIPTION: Shows how to import the Flex component from the Chakra UI library.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/flex.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Flex } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Importing Donut Chart Components in Chakra UI\nDESCRIPTION: Import statements for the necessary components to create a donut chart using Chakra UI and Recharts.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/donut-chart.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Chart, useChart } from \"@chakra-ui/charts\"\nimport { Cell, Pie, PieChart } from \"recharts\"\n```\n\n----------------------------------------\n\nTITLE: Importing Field Component from Chakra UI\nDESCRIPTION: Basic import statement for the Field component from Chakra UI.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/field.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Field } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Formatting Y-Axis Values in React Line Chart\nDESCRIPTION: Format the Y-axis tick values using the tickFormatter prop on the YAxis component.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/line-chart.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<YAxis\n  tickFormatter={chart.formatNumber({\n    style: \"currency\",\n    currency: \"USD\",\n    notation: \"compact\",\n  })}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing the Timeline Component in Chakra UI (React/TSX)\nDESCRIPTION: This snippet shows how to import the necessary `Timeline` component from the `@chakra-ui/react` package. This import is required to use the Timeline component and its associated subcomponents within a React/TypeScript application.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/timeline.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Timeline } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Connecting Null Values in React Line Chart\nDESCRIPTION: Enable connecting of null values in a line chart by setting the connectNulls prop on the Line component.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/line-chart.mdx#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\n<Line connectNulls />\n```\n\n----------------------------------------\n\nTITLE: Creating Background Gradients using Chakra UI (JSX)\nDESCRIPTION: Shows how to create complex background gradients for a <Box> component using Chakra UI props such as bgGradient, gradientFrom, and gradientTo. Requires Chakra UI. Key parameters define gradient direction and color stops using token values, allowing easy and semantic gradient styling.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/background.mdx#2025-04-23_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<Box bgGradient=\"to-r\" gradientFrom=\"red.200\" gradientTo=\"blue.200\" />\n```\n\n----------------------------------------\n\nTITLE: Importing EnvironmentProvider in Chakra UI\nDESCRIPTION: Basic import statement for the EnvironmentProvider component from Chakra UI.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/environment-provider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { EnvironmentProvider } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Importing Skeleton Components in Chakra UI (JSX)\nDESCRIPTION: Imports the necessary Skeleton components (`Skeleton`, `SkeletonCircle`, `SkeletonText`) from the `@chakra-ui/react` library.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/skeleton.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Skeleton, SkeletonCircle, SkeletonText } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Types for Customized Chakra UI Theme (Bash)\nDESCRIPTION: This CLI command is used after theme customization to generate TypeScript typings based on your new theme configuration. Ensures type safety and IntelliSense for your Chakra setup. Requires npx and @chakra-ui/cli. Input: path to your customized theme file. Output: type definitions for use in your project.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/customization/overview.mdx#2025-04-23_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nnpx @chakra-ui/cli typegen ./theme.ts\n```\n\n----------------------------------------\n\nTITLE: Checkbox Snippet Implementation in Chakra UI v3\nDESCRIPTION: Shows how to implement a simplified Checkbox component using snippets in v3\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/blog/00-announcing-v3.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n// components/ui/checkbox.tsx\nexport const Checkbox = forwardRef(function Checkbox(props, ref) {\n  const { children, icon, inputProps, ...restProps } = props\n  return (\n    <Checkbox.Root {...restProps}>\n      <Checkbox.HiddenInput {...inputProps} ref={ref} />\n      <Checkbox.Control>\n        <Checkbox.Indicator>{icon}</Checkbox.Indicator>\n      </Checkbox.Control>\n      {children && <Checkbox.Label>{children}</Checkbox.Label>}\n    </Checkbox.Root>\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Reading Locale and Direction Using useLocaleContext in React\nDESCRIPTION: This example demonstrates how to use the useLocaleContext hook to read the current locale and text direction within a component.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/locale-provider.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nexport const Usage = () => {\n  const { locale, dir } = useLocaleContext()\n  return <pre>{JSON.stringify({ locale, dir }, null, 2)}</pre>\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Chakra UI v3 Snippets\nDESCRIPTION: Command to add Chakra UI v3 snippets to your project\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/blog/00-announcing-v3.mdx#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnpx @chakra-ui/cli@init snippets add\n```\n\n----------------------------------------\n\nTITLE: Setting Text Transformation with Chakra UI in JSX\nDESCRIPTION: This snippet shows how to transform the casing of text within a Chakra UI `<Text>` component using the `textTransform` prop (e.g., 'uppercase'). It maps directly to the `text-transform` CSS property.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/typography.mdx#2025-04-23_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\n<Text textTransform=\"uppercase\">Hello World</Text>\n```\n\n----------------------------------------\n\nTITLE: Configuring tsconfig.json with Path Aliases for CLI Resolution in JSON5\nDESCRIPTION: Example showing how to set up path aliases in tsconfig.json that will be resolved by the CLI. Note that only the first alias target from the string array will be resolved.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/packages/cli/CHANGELOG.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n// tsconfig.json\n{\n  //...\n  compilerOptions: {\n    baseUrl: \"src\",\n    paths: {\n      \"@alias/*\": [\"target/*\"],\n      //           ^-- only the first target will be resolved\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Asset Token Types in Chakra UI\nDESCRIPTION: Type definition for asset tokens that can represent URLs or SVG strings.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/tokens.mdx#2025-04-23_snippet_22\n\nLANGUAGE: ts\nCODE:\n```\ntype CompositeAsset = { type: \"url\" | \"svg\"; value: string }\ntype Asset = string | CompositeAsset\n```\n\n----------------------------------------\n\nTITLE: Importing Progress Circle Component in React\nDESCRIPTION: Shows how to import the ProgressCircle component from Chakra UI.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/progress-circle.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ProgressCircle } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Menu Component (Before Refactoring)\nDESCRIPTION: Shows how Menu components were imported and used before the refactoring, with components imported from a local UI components directory.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/blog/05-refactoring-snippets.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  MenuContent,\n  MenuItem,\n  MenuRoot,\n  MenuTrigger,\n} from \"@/components/ui/menu\"\n\nconst Demo = () => {\n  return (\n    <MenuRoot>\n      <MenuTrigger asChild>\n        <Button>Open</Button>\n      </MenuTrigger>\n      <MenuContent>\n        <MenuItem value=\"...\" />\n      </MenuContent>\n    </MenuRoot>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Chart Data with useChart Hook in TypeScript React\nDESCRIPTION: Demonstrates how to initialize chart data using the useChart hook, including setting up data points and series configuration.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/charts/use-chart.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst chart = useChart({\n  data: [\n    { date: \"2024-01-01\", revenue: 1000 },\n    { date: \"2024-01-02\", revenue: 2000 },\n    { date: \"2024-01-03\", revenue: 3000 },\n  ],\n  series: [{ name: \"revenue\", color: \"blue.500\" }],\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Bleed Component from Chakra UI\nDESCRIPTION: Shows how to import the Bleed component from the Chakra UI library.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/bleed.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Bleed } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: List Component Import and Usage in v2 vs v3\nDESCRIPTION: Comparison of how to import and use the List component in Chakra UI v2 and v3. Version 3 introduces a more cohesive API with object notation for related components.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/blog/01-chakra-v2-vs-v3-a-detailed-comparison.mdx#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { List, ListItem } from \"@chakra-ui/react\"\n\nfunction App() {\n  return (\n    <List>\n      <ListItem>Item 1</ListItem>\n    </List>\n  )\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { List } from \"@chakra-ui/react\"\n\nfunction App() {\n  return (\n    <List.Root>\n      <List.Item>Item 1</List.Item>\n    </List.Root>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Font Stylesheet in Vite Project\nDESCRIPTION: Import the font's CSS at the root of the Vite project to make it available throughout the application. This should be done in the main entry file.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/guides/theming-add-custom-font-to-vite.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport \"@fontsource-variable/bricolage-grotesque/index.css\"\n```\n\n----------------------------------------\n\nTITLE: Adding Password Input Snippet using Chakra UI CLI (Shell)\nDESCRIPTION: This command utilizes the Chakra UI Command Line Interface (CLI) via `npx` to fetch and integrate the pre-defined `password-input` snippet into the user's project. This snippet provides the necessary component code for `PasswordInput`.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/password-input.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx @chakra-ui/cli snippet add password-input\n```\n\n----------------------------------------\n\nTITLE: Defining Transition Delay with Chakra UI in JSX\nDESCRIPTION: Illustrates the use of the transitionDelay prop, which sets a delay before a transition is triggered. The Box component's background transitions on hover after the specified delay, which references a Chakra UI theme duration token like 'fast'.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/transitions.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Box\\n  bg=\\\"red.400\\\"\\n  _hover={{ bg: \\\"red.500\\\" }}\\n  transition=\\\"backgrounds\\\"\\n  transitionDelay=\\\"fast\\\"\\n>\\n  Hover me\\n</Box>\n```\n\n----------------------------------------\n\nTITLE: CLI Usage Command Example - Composition\nDESCRIPTION: Example showing the usage syntax for the Chakra UI CLI composition command, including available options and subcommands.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/packages/cli/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nUsage: chakra-ui composition [options] [command]\n\nAdd compositions to your project for better DX\n\nOptions:\n  -h, --help                     display help for command\n\nCommands:\n  add [options] [components...]  Add a new composition for better DX\n  list                           List all compositions\n  help [command]                 display help for command\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server with HMR\nDESCRIPTION: Command to start the development server with Hot Module Replacement (HMR) enabled, running on port 5173.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/sandbox/react-router/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Manipulating and Querying Design Tokens with Chakra UI Styling System in TypeScript\nDESCRIPTION: Shows how to access and use the tokens property of the Chakra UI system to get variable names, expand token references, and inspect internal token maps. Inputs are token keys or tokenized strings; outputs are CSS variables, expanded strings, or map objects. Requires system instance created by createSystem.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/overview.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nconst system = createSystem(defaultConfig, config)\n\nsystem.tokens.getVar(\"colors.red.200\")\n// => \"var(--chakra-colors-red-200)\"\n\nsystem.tokens.expandReferenceInValue(\"3px solid {colors.red.200}\")\n// => \"3px solid var(--chakra-colors-red-200)\"\n\nsystem.tokens.cssVarMap\n// => Map { \"colors\": Map { \"red.200\": \"var(--chakra-colors-red-200)\" } }\n\nsystem.tokens.flatMap\n// => Map { \"colors.red.200\": \"var(--chakra-colors-red-200)\" }\n\n```\n\n----------------------------------------\n\nTITLE: Starting Storybook\nDESCRIPTION: Command to start the Storybook development environment for Chakra UI.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/get-started/contributing.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm storybook\n```\n\n----------------------------------------\n\nTITLE: Generating Chakra UI Type Definitions\nDESCRIPTION: This bash command generates type definitions for Chakra UI after updating the theme with custom layer styles. It uses the Chakra UI CLI tool.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/layer-styles.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx @chakra-ui/cli typegen\n```\n\n----------------------------------------\n\nTITLE: Importing Segmented Control in React with Chakra UI\nDESCRIPTION: Shows how to import the SegmentGroup component from Chakra UI.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/segmented-control.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SegmentGroup } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with pnpm\nDESCRIPTION: Command to install project dependencies using pnpm package manager.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/get-started/contributing.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Removing Default Global CSS in Chakra UI with TypeScript\nDESCRIPTION: This snippet shows how to completely remove the default global CSS styles applied by Chakra UI. It achieves this by destructuring the `globalCss` property out of the `defaultConfig` object and passing the remaining configuration (`restConfig`) to the `createSystem` function.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/customization/global-css.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createSystem, defaultConfig } from \"@chakra-ui/react\"\n\nconst { globalCss: _, ...restConfig } = defaultConfig\nexport const system = createSystem(restConfig)\n```\n\n----------------------------------------\n\nTITLE: Formatting Commit Hash Link in Markdown\nDESCRIPTION: Markdown formatting for commit hash link using GitHub repository URL pattern\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/sandbox/next-pages/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[[`6095eaf9a`](https://github.com/chakra-ui/chakra-ui/commit/6095eaf9ac64a7e4d9f934bcb530bae2a92111a6)]\n```\n\n----------------------------------------\n\nTITLE: Package.json Script Configuration\nDESCRIPTION: Shows how to add theme type generation scripts to package.json, including a postinstall hook for automatic generation after dependency installation\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/packages/cli/README.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  \"gen:theme-typings\": \"chakra-cli tokens <path/to/your/theme.(js|ts)>\",\n  \"postinstall\": \"npm run gen:theme-typings\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Rating Group with Simplified Syntax\nDESCRIPTION: Demonstrates the simplified shortcut syntax for Rating Group when customization of the rating items isn't needed.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/blog/05-refactoring-snippets.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<RatingGroup.Control />\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of SimpleGrid Component\nDESCRIPTION: Demonstrates the basic structure of using the SimpleGrid component with child Box components.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/simple-grid.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<SimpleGrid>\n  <Box />\n  <Box />\n</SimpleGrid>\n```\n\n----------------------------------------\n\nTITLE: Importing Breadcrumb Component in Chakra UI\nDESCRIPTION: This snippet shows how to import the Breadcrumb component from Chakra UI.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/components/breadcrumb.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Breadcrumb } from \"@chakra-ui/react\"\n```\n\n----------------------------------------\n\nTITLE: Cloning the Chakra UI Repository\nDESCRIPTION: Command to clone the Chakra UI repository to your local machine. This is the first step in setting up the project locally for development.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/chakra-ui/chakra-ui.git\n```\n\n----------------------------------------\n\nTITLE: Running Tests\nDESCRIPTION: Command to run the test suite for the Chakra UI project, ensuring your changes don't break existing functionality.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/CONTRIBUTING.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Rendering SpacingTokenDoc Component in Chakra UI Documentation (JSX)\nDESCRIPTION: This snippet renders the <SpacingTokenDoc /> component in a Markdown documentation file to programmatically display all available spacing tokens supported by Chakra UI. This component likely fetches or generates a visual reference for spacing values, enabling users to review and utilize them in their projects. No direct dependencies are needed in this snippet, but it assumes the existence and export of a SpacingTokenDoc component elsewhere in the project.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/spacing.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<SpacingTokenDoc />\n```\n\n----------------------------------------\n\nTITLE: Configuring React ESLint Plugin\nDESCRIPTION: Setup for eslint-plugin-react including React version specification, plugin configuration, and recommended rule sets for both standard React and JSX runtime.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/sandbox/shadow-dom/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport react from \"eslint-plugin-react\"\n\nexport default tseslint.config({\n  // Set the react version\n  settings: { react: { version: \"18.3\" } },\n  plugins: {\n    // Add the react plugin\n    react,\n  },\n  rules: {\n    // other rules...\n    // Enable its recommended rules\n    ...react.configs.recommended.rules,\n    ...react.configs[\"jsx-runtime\"].rules,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using Border Layer Styles in Chakra UI\nDESCRIPTION: Demonstrates the outline layer styles that can be used for borders with automatic dark mode adaptation.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/packages/react/CHANGELOG.md#2025-04-23_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\n<Box layerStyle=\"outline.muted\" colorPalette=\"red\">\n  This is a subtle outline layer\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Applying Border Radius with Chakra UI JSX Props - JavaScript/JSX\nDESCRIPTION: These snippets show how to set border radius on all sides of a Chakra UI <Box> component via the borderRadius or its shorthand rounded prop. Requires Chakra UI React library. The props accept radii keys (e.g., 'md') and apply uniform corner rounding to all sides. Inputs are JSX attributes; output is a styled Box component.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/border.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Box borderRadius=\"md\" />\n<Box rounded=\"md\" /> // shorthand\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Next.js TypeScript Project\nDESCRIPTION: Commands to install dependencies and start the development server using either npm or yarn.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/sandbox/next-pages/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n# or\nyarn\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Aligning a Single Grid Item with alignSelf Prop - Chakra UI - JSX\nDESCRIPTION: Shows usage of alignSelf on a single Box within a CSS grid layout for individual alignment. Value must be a CSS align-self keyword like 'center'. Requires Chakra UI/React.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/flex-and-grid.mdx#2025-04-23_snippet_24\n\nLANGUAGE: jsx\nCODE:\n```\n<Box display=\"grid\">\\n  <Box alignSelf=\"center\">Item 1</Box>\\n  <Box>Item 2</Box>\\n  <Box>Item 3</Box>\\n</Box>\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entries\nDESCRIPTION: Structured changelog entries showing version updates and dependency changes for the Chakra UI project. Each entry includes version number, change type (Major/Patch), and details about dependency updates.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/sandbox/next-pages/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Change Log\n\n## 2.0.14\n\n### Patch Changes\n\n- Updated dependencies []:\n  - @chakra-ui/icons@2.0.8\n  - @chakra-ui/react@2.2.8\n  - @chakra-ui/theme-tools@2.0.9\n```\n\n----------------------------------------\n\nTITLE: Boolean Props Change in Button Component\nDESCRIPTION: Demonstrates the change in boolean prop naming convention. Version 2 used 'is' prefix (e.g., isDisabled), while version 3 removes this prefix for simpler, more intuitive props that align with standard HTML.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/blog/01-chakra-v2-vs-v3-a-detailed-comparison.mdx#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Button isDisabled>Click Me</Button>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Button disabled>Click Me</Button>\n```\n\n----------------------------------------\n\nTITLE: Configuring Global CSS with createSystem in Chakra UI\nDESCRIPTION: Demonstrates how to override the default color palette using the createSystem method in the theme configuration file. This sets a new default color palette that will apply throughout the application.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/guides/theming-change-default-color-palette.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst config = defineConfig({\n  globalCss: {\n    html: {\n      colorPalette: \"blue\", // Change this to any color palette you prefer\n    },\n  },\n})\n\nexport const system = createSystem(defaultConfig, config)\n```\n\n----------------------------------------\n\nTITLE: CSS Variables with Custom Prefix - Chakra UI - CSS\nDESCRIPTION: This CSS snippet illustrates the result of applying a custom prefix to Chakra UI's CSS variables. Here, variables start with '--sui', reflecting the configuration option cssVarsPrefix. The variables define theme color tokens and will be referenced throughout the Chakra UI component styles. This output requires prior TypeScript configuration and assists in variable namespace isolation within global CSS.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/customization/css-variables.mdx#2025-04-23_snippet_3\n\nLANGUAGE: CSS\nCODE:\n```\n:where(html) {\n  --sui-colors-gray-100: #e6f2ff;\n  --sui-colors-gray-200: #bfdeff;\n  --sui-colors-gray-300: #99caff;\n}\n```\n\n----------------------------------------\n\nTITLE: Typing Component Props Using Theme Recipe Key (TypeScript)\nDESCRIPTION: Illustrates using the `SlotRecipeProps` type helper in conjunction with the theme key (\"checkbox\") assigned during theme integration. This allows inferring the correct variant prop types for a component that consumes the recipe from the theme, requiring prior type generation via the CLI.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/theming/slot-recipes.mdx#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n```tsx title=\"checkbox.tsx\"\nimport type { SlotRecipeProps, UnstyledProp } from \"@chakra-ui/react\"\n\nexport interface CheckboxProps\n  extends SlotRecipeProps<\"checkbox\">,\n    UnstyledProp {}\n```\n```\n\n----------------------------------------\n\nTITLE: Applying Margin to a Specific Side with Chakra UI - JavaScript/JSX\nDESCRIPTION: Shows usage of marginLeft/marginTop or their shortforms (ml/mt) for edge-specific margin control in Chakra UI. Dependencies: React, Chakra UI. Props accept string tokens or CSS values. Used for precise margin customization on Box edges. Operates only within Chakra components and via theme.\nSOURCE: https://github.com/chakra-ui/chakra-ui/blob/main/apps/www/content/docs/styling/style-props/spacing.mdx#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Box marginLeft=\\\"3\\\" />\\n<Box ml=\\\"3\\\" /> // shorthand\\n\\n<Box marginTop=\\\"3\\\" />\\n<Box mt=\\\"3\\\" /> // shorthand\n```"
  }
]