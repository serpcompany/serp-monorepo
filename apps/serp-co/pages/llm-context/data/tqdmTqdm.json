[
  {
    "owner": "tqdm",
    "repo": "tqdm",
    "content": "TITLE: Basic Usage of tqdm in Python\nDESCRIPTION: Demonstrates how to wrap an iterable with tqdm to display a progress bar. This basic example shows tqdm being used with a range() function.\nSOURCE: https://github.com/tqdm/tqdm/blob/master/README.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom tqdm import tqdm\nfor i in tqdm(range(10000)):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Using tqdm with Iterables in Python\nDESCRIPTION: Demonstrates how to use tqdm with different types of iterables in Python, including lists and custom loops with sleep intervals.\nSOURCE: https://github.com/tqdm/tqdm/blob/master/README.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom tqdm import tqdm\nfrom time import sleep\n\ntext = \"\"\nfor char in tqdm([\"a\", \"b\", \"c\", \"d\"]):\n    sleep(0.25)\n    text = text + char\n```\n\n----------------------------------------\n\nTITLE: Using trange in Python\nDESCRIPTION: Shows the usage of trange, a special optimized instance of tqdm for range iterations.\nSOURCE: https://github.com/tqdm/tqdm/blob/master/README.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom tqdm import trange\n\nfor i in trange(100):\n    sleep(0.01)\n```\n\n----------------------------------------\n\nTITLE: Manual Control of tqdm Progress Bar in Python\nDESCRIPTION: Demonstrates manual control of the tqdm progress bar, including setting descriptions and updating progress outside of loops.\nSOURCE: https://github.com/tqdm/tqdm/blob/master/README.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\npbar = tqdm([\"a\", \"b\", \"c\", \"d\"])\nfor char in pbar:\n    sleep(0.25)\n    pbar.set_description(\"Processing %s\" % char)\n```\n\n----------------------------------------\n\nTITLE: Using tqdm with Context Manager in Python\nDESCRIPTION: Shows how to use tqdm within a 'with' statement for manual control of updates and automatic closing of the progress bar.\nSOURCE: https://github.com/tqdm/tqdm/blob/master/README.rst#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nwith tqdm(total=100) as pbar:\n    for i in range(10):\n        sleep(0.1)\n        pbar.update(10)\n```\n\n----------------------------------------\n\nTITLE: Manual tqdm Instance Management in Python\nDESCRIPTION: Demonstrates manual creation, updating, and closing of a tqdm instance without using a context manager.\nSOURCE: https://github.com/tqdm/tqdm/blob/master/README.rst#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\npbar = tqdm(total=100)\nfor i in range(10):\n    sleep(0.1)\n    pbar.update(10)\npbar.close()\n```\n\n----------------------------------------\n\nTITLE: TQDM Core Methods Implementation\nDESCRIPTION: Implementation of core TQDM methods including update(), close(), clear(), refresh(), unpause(), reset(), set_description(), and set_postfix() for controlling the progress bar state and display.\nSOURCE: https://github.com/tqdm/tqdm/blob/master/README.rst#2025-04-16_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nclass tqdm():\n      def update(self, n=1):\n          \"\"\"\n          Manually update the progress bar, useful for streams\n          such as reading files.\n          E.g.:\n          >>> t = tqdm(total=filesize) # Initialise\n          >>> for current_buffer in stream:\n          ...    ...\n          ...    t.update(len(current_buffer))\n          >>> t.close()\n          The last line is highly recommended, but possibly not necessary if\n          ``t.update()`` will be called in such a way that ``filesize`` will be\n          exactly reached and printed.\n\n          Parameters\n          ----------\n          n  : int or float, optional\n              Increment to add to the internal counter of iterations\n              [default: 1]. If using float, consider specifying ``{n:.3f}``\n              or similar in ``bar_format``, or specifying ``unit_scale``.\n\n          Returns\n          -------\n          out  : bool or None\n              True if a ``display()`` was triggered.\n          \"\"\"\n\n      def close(self):\n          \"\"\"Cleanup and (if leave=False) close the progressbar.\"\"\"\n\n      def clear(self, nomove=False):\n          \"\"\"Clear current bar display.\"\"\"\n\n      def refresh(self):\n          \"\"\"\n          Force refresh the display of this bar.\n\n          Parameters\n          ----------\n          nolock  : bool, optional\n              If ``True``, does not lock.\n              If [default: ``False``]: calls ``acquire()`` on internal lock.\n          lock_args  : tuple, optional\n              Passed to internal lock's ``acquire()``.\n              If specified, will only ``display()`` if ``acquire()`` returns ``True``.\n          \"\"\"\n\n      def unpause(self):\n          \"\"\"Restart tqdm timer from last print time.\"\"\"\n\n      def reset(self, total=None):\n          \"\"\"\n          Resets to 0 iterations for repeated use.\n\n          Consider combining with ``leave=True``.\n\n          Parameters\n          ----------\n          total  : int or float, optional. Total to use for the new bar.\n          \"\"\"\n\n      def set_description(self, desc=None, refresh=True):\n          \"\"\"\n          Set/modify description of the progress bar.\n\n          Parameters\n          ----------\n          desc  : str, optional\n          refresh  : bool, optional\n              Forces refresh [default: True].\n          \"\"\"\n\n      def set_postfix(self, ordered_dict=None, refresh=True, **tqdm_kwargs):\n          \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Initializing TQDM Progress Bar Class\nDESCRIPTION: Main TQDM class definition with initialization parameters for creating and configuring progress bars. Includes comprehensive parameter list for customizing the progress bar appearance, behavior and output.\nSOURCE: https://github.com/tqdm/tqdm/blob/master/README.rst#2025-04-16_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nclass tqdm():\n      \"\"\"\n      Decorate an iterable object, returning an iterator which acts exactly\n      like the original iterable, but prints a dynamically updating\n      progressbar every time a value is requested.\n      \"\"\"\n\n      @envwrap(\"TQDM_\")  # override defaults via env vars\n      def __init__(self, iterable=None, desc=None, total=None, leave=True,\n                   file=None, ncols=None, mininterval=0.1,\n                   maxinterval=10.0, miniters=None, ascii=None, disable=False,\n                   unit='it', unit_scale=False, dynamic_ncols=False,\n                   smoothing=0.3, bar_format=None, initial=0, position=None,\n                   postfix=None, unit_divisor=1000, write_bytes=False,\n                   lock_args=None, nrows=None, colour=None, delay=0):\n```\n\n----------------------------------------\n\nTITLE: Displaying Custom Progress Information with TQDM\nDESCRIPTION: Example showing how to display and update custom information on TQDM progress bars using desc and postfix arguments. Demonstrates dynamic updates of description and postfix with different data types.\nSOURCE: https://github.com/tqdm/tqdm/blob/master/README.rst#2025-04-16_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom tqdm import tqdm, trange\nfrom random import random, randint\nfrom time import sleep\n\nwith trange(10) as t:\n    for i in t:\n        # Description will be displayed on the left\n        t.set_description('GEN %i' % i)\n        # Postfix will be displayed on the right,\n        # formatted automatically based on argument's datatype\n        t.set_postfix(loss=random(), gen=randint(1,999), str='h',\n                      lst=[1, 2])\n        sleep(0.1)\n\nwith tqdm(total=10, bar_format=\"{postfix[0]} {postfix[1][value]:>8.2g}\",\n          postfix=[\"Batch\", {\"value\": 0}]) as t:\n    for i in range(10):\n        sleep(0.1)\n        t.postfix[1][\"value\"] = i / 2\n        t.update()\n```\n\n----------------------------------------\n\nTITLE: Nested Progress Bars Implementation in TQDM\nDESCRIPTION: Demonstration of nested progress bars using TQDM. Shows how to create and manage multiple levels of progress bars with proper positioning and descriptions.\nSOURCE: https://github.com/tqdm/tqdm/blob/master/README.rst#2025-04-16_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nfrom tqdm.auto import trange\nfrom time import sleep\n\nfor i in trange(4, desc='1st loop'):\n    for j in trange(5, desc='2nd loop'):\n        for k in trange(50, desc='3rd loop', leave=False):\n            sleep(0.01)\n```\n\n----------------------------------------\n\nTITLE: TQDM Progress Bars with Multi-Processing\nDESCRIPTION: Implementation of TQDM progress bars in a multi-processing context. Shows thread-safe progress tracking for multiple parallel processes.\nSOURCE: https://github.com/tqdm/tqdm/blob/master/README.rst#2025-04-16_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nfrom time import sleep\nfrom tqdm import trange, tqdm\nfrom multiprocessing import Pool, RLock, freeze_support\n\nL = list(range(9))\n\ndef progresser(n):\n    interval = 0.001 / (n + 2)\n    total = 5000\n    text = f\"#{n}, est. {interval * total:<04.2}s\"\n    for _ in trange(total, desc=text, position=n):\n        sleep(interval)\n\nif __name__ == '__main__':\n    freeze_support()  # for Windows support\n    tqdm.set_lock(RLock())  # for managing output contention\n    p = Pool(initializer=tqdm.set_lock, initargs=(tqdm.get_lock(),))\n    p.map(progresser, L)\n```\n\n----------------------------------------\n\nTITLE: TQDM URL Download Progress Tracking\nDESCRIPTION: Implementation of a custom TQDM class for tracking URL download progress. Shows how to create hooks for urllib to display download progress.\nSOURCE: https://github.com/tqdm/tqdm/blob/master/README.rst#2025-04-16_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nimport urllib, os\nfrom tqdm import tqdm\nurllib = getattr(urllib, 'request', urllib)\n\nclass TqdmUpTo(tqdm):\n    \"\"\"Provides `update_to(n)` which uses `tqdm.update(delta_n)`.\"\"\"\n    def update_to(self, b=1, bsize=1, tsize=None):\n        \"\"\"\n        b  : int, optional\n            Number of blocks transferred so far [default: 1].\n        bsize  : int, optional\n            Size of each block (in tqdm units) [default: 1].\n        tsize  : int, optional\n        \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Downloading File with TQDM Progress Bar in Python\nDESCRIPTION: This snippet demonstrates how to use TQDM to display a progress bar while downloading a file using urllib. It uses the TqdmUpTo class to create a custom progress bar.\nSOURCE: https://github.com/tqdm/tqdm/blob/master/README.rst#2025-04-16_snippet_24\n\nLANGUAGE: python\nCODE:\n```\neg_link = \"https://caspersci.uk.to/matryoshka.zip\"\nwith TqdmUpTo(unit='B', unit_scale=True, unit_divisor=1024, miniters=1,\n              desc=eg_link.split('/')[-1]) as t:  # all optional kwargs\n    urllib.urlretrieve(eg_link, filename=os.devnull,\n                       reporthook=t.update_to, data=None)\n    t.total = t.n\n```\n\n----------------------------------------\n\nTITLE: Wrapping File Read/Write Methods with TQDM in Python\nDESCRIPTION: This example shows how to use TQDM's CallbackIOWrapper to measure throughput through a file-like object's read or write methods. It wraps the file object with a progress bar.\nSOURCE: https://github.com/tqdm/tqdm/blob/master/README.rst#2025-04-16_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nfrom tqdm.auto import tqdm\nfrom tqdm.utils import CallbackIOWrapper\n\nwith tqdm(total=file_obj.size,\n          unit='B', unit_scale=True, unit_divisor=1024) as t:\n    fobj = CallbackIOWrapper(t.update, file_obj, \"read\")\n    while True:\n        chunk = fobj.read(chunk_size)\n        if not chunk:\n            break\n    t.reset()\n    # ... continue to use `t` for something else\n```\n\n----------------------------------------\n\nTITLE: Simplified File Download with TQDM WrapAttr in Python\nDESCRIPTION: This snippet demonstrates a simpler way to download a file with a progress bar using TQDM's wrapattr function. It works with both urllib and requests libraries.\nSOURCE: https://github.com/tqdm/tqdm/blob/master/README.rst#2025-04-16_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nimport urllib, os\nfrom tqdm import tqdm\n\neg_link = \"https://caspersci.uk.to/matryoshka.zip\"\nresponse = getattr(urllib, 'request', urllib).urlopen(eg_link)\nwith tqdm.wrapattr(open(os.devnull, \"wb\"), \"write\",\n                   miniters=1, desc=eg_link.split('/')[-1],\n                   total=getattr(response, 'length', None)) as fout:\n    for chunk in response:\n        fout.write(chunk)\n```\n\n----------------------------------------\n\nTITLE: Custom Callback with TQDM in Python\nDESCRIPTION: This example shows how to create a custom callback with TQDM that takes advantage of TQDM's intelligent display skipping. It uses the return value of update() to determine if a display was triggered.\nSOURCE: https://github.com/tqdm/tqdm/blob/master/README.rst#2025-04-16_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nfrom tqdm.auto import tqdm as std_tqdm\n\ndef external_callback(*args, **kwargs):\n    ...\n\nclass TqdmExt(std_tqdm):\n    def update(self, n=1):\n        displayed = super().update(n)\n        if displayed:\n            external_callback(**self.format_dict)\n        return displayed\n```\n\n----------------------------------------\n\nTITLE: TQDM with Asyncio in Python\nDESCRIPTION: This snippet demonstrates how to use TQDM with asyncio. It shows the correct way to use TQDM in an asynchronous context manager to ensure proper cleanup.\nSOURCE: https://github.com/tqdm/tqdm/blob/master/README.rst#2025-04-16_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nfrom tqdm.asyncio import tqdm\n\nwith tqdm(range(9)) as pbar:\n    async for i in pbar:\n        if i == 2:\n            break\n```\n\n----------------------------------------\n\nTITLE: Pandas Integration with TQDM in Python\nDESCRIPTION: This example shows how to integrate TQDM with pandas for progress bars in DataFrame operations. It demonstrates the use of progress_apply and progress_map methods.\nSOURCE: https://github.com/tqdm/tqdm/blob/master/README.rst#2025-04-16_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nimport numpy as np\nfrom tqdm import tqdm\n\ndf = pd.DataFrame(np.random.randint(0, 100, (100000, 6)))\n\n# Register `pandas.progress_apply` and `pandas.Series.map_apply` with `tqdm`\ntqdm.pandas(desc=\"my bar!\")\n\n# Now you can use `progress_apply` instead of `apply`\n# and `progress_map` instead of `map`\ndf.progress_apply(lambda x: x**2)\n# can also groupby:\n# df.groupby(0).progress_apply(lambda x: x**2)\n```\n\n----------------------------------------\n\nTITLE: Keras Integration with TQDM in Python\nDESCRIPTION: This snippet demonstrates how to use TQDM as a callback in Keras for progress tracking during model training.\nSOURCE: https://github.com/tqdm/tqdm/blob/master/README.rst#2025-04-16_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nfrom tqdm.keras import TqdmCallback\n\n...\n\nmodel.fit(..., verbose=0, callbacks=[TqdmCallback()])\n```\n\n----------------------------------------\n\nTITLE: Dask Integration with TQDM in Python\nDESCRIPTION: This example shows how to use TQDM as a callback for Dask operations, providing progress tracking for distributed computations.\nSOURCE: https://github.com/tqdm/tqdm/blob/master/README.rst#2025-04-16_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nfrom tqdm.dask import TqdmCallback\n\nwith TqdmCallback(desc=\"compute\"):\n    ...\n    arr.compute()\n\n# or use callback globally\ncb = TqdmCallback(desc=\"global\")\ncb.register()\narr.compute()\n```\n\n----------------------------------------\n\nTITLE: IPython/Jupyter Integration with TQDM in Python\nDESCRIPTION: This snippet demonstrates how to use TQDM in IPython/Jupyter notebooks. It shows the usage of tqdm.notebook for native Jupyter widget support and nested progress bars.\nSOURCE: https://github.com/tqdm/tqdm/blob/master/README.rst#2025-04-16_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nfrom tqdm.notebook import trange, tqdm\nfrom time import sleep\n\nfor i in trange(3, desc='1st loop'):\n    for j in tqdm(range(100), desc='2nd loop'):\n        sleep(0.01)\n```\n\n----------------------------------------\n\nTITLE: Dynamic File Search with TQDM in Python\nDESCRIPTION: This example demonstrates using TQDM as a dynamic meter for recursively searching files. The total updates as new objects are found, while n represents the number of files.\nSOURCE: https://github.com/tqdm/tqdm/blob/master/README.rst#2025-04-16_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nfrom tqdm import tqdm\nimport os.path\n\ndef find_files_recursively(path, show_progress=True):\n    files = []\n    # total=1 assumes `path` is a file\n    t = tqdm(total=1, unit=\"file\", disable=not show_progress)\n    if not os.path.exists(path):\n        raise IOError(\"Cannot find:\" + path)\n```\n\n----------------------------------------\n\nTITLE: Recursive File Search with TQDM Progress Bar\nDESCRIPTION: Functions for recursively searching directories while updating a TQDM progress bar. Includes utilities for appending files and listing directory contents with progress updates.\nSOURCE: https://github.com/tqdm/tqdm/blob/master/README.rst#2025-04-16_snippet_34\n\nLANGUAGE: python\nCODE:\n```\ndef append_found_file(f):\n    files.append(f)\n    t.update()\n\ndef list_found_dir(path):\n    \"\"\"returns os.listdir(path) assuming os.path.isdir(path)\"\"\"\n    listing = os.listdir(path)\n    # subtract 1 since a \"file\" we found was actually this directory\n    t.total += len(listing) - 1\n    # fancy way to give info without forcing a refresh\n    t.set_postfix(dir=path[-10:], refresh=False)\n    t.update(0)  # may trigger a refresh\n    return listing\n\ndef recursively_search(path):\n    if os.path.isdir(path):\n        for f in list_found_dir(path):\n            recursively_search(os.path.join(path, f))\n    else:\n        append_found_file(path)\n\nrecursively_search(path)\nt.set_postfix(dir=path)\nt.close()\nreturn files\n```\n\n----------------------------------------\n\nTITLE: Writing Messages with TQDM Progress Bar\nDESCRIPTION: Example showing how to write messages to the console while a TQDM progress bar is active using the .write() method to avoid display collisions.\nSOURCE: https://github.com/tqdm/tqdm/blob/master/README.rst#2025-04-16_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nfrom tqdm.auto import tqdm, trange\nfrom time import sleep\n\nbar = trange(10)\nfor i in bar:\n    # Print using tqdm class method .write()\n    sleep(0.1)\n    if not (i % 3):\n        tqdm.write(\"Done task %i\" % i)\n    # Can also use bar.write()\n```\n\n----------------------------------------\n\nTITLE: STDOUT/STDERR Redirection with TQDM\nDESCRIPTION: Implementation of a context manager to redirect stdout and stderr to TQDM's write method for clean progress bar display when using external printing.\nSOURCE: https://github.com/tqdm/tqdm/blob/master/README.rst#2025-04-16_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nfrom time import sleep\nimport contextlib\nimport sys\nfrom tqdm import tqdm\nfrom tqdm.contrib import DummyTqdmFile\n\n@contextlib.contextmanager\ndef std_out_err_redirect_tqdm():\n    orig_out_err = sys.stdout, sys.stderr\n    try:\n        sys.stdout, sys.stderr = map(DummyTqdmFile, orig_out_err)\n        yield orig_out_err[0]\n    # Relay exceptions\n    except Exception as exc:\n        raise exc\n    # Always restore sys.stdout/err if necessary\n    finally:\n        sys.stdout, sys.stderr = orig_out_err\n\ndef some_fun(i):\n    print(\"Fee, fi, fo,\".split()[i])\n\n# Redirect stdout to tqdm.write() (don't forget the `as save_stdout`)\nwith std_out_err_redirect_tqdm() as orig_stdout:\n    # tqdm needs the original stdout\n    # and dynamic_ncols=True to autodetect console width\n    for i in tqdm(range(3), file=orig_stdout, dynamic_ncols=True):\n        sleep(.5)\n        some_fun(i)\n\n# After the `with`, printing is restored\nprint(\"Done!\")\n```\n\n----------------------------------------\n\nTITLE: Logging Redirection with TQDM\nDESCRIPTION: Example demonstrating how to redirect Python logging to TQDM's write method using the logging_redirect_tqdm context manager.\nSOURCE: https://github.com/tqdm/tqdm/blob/master/README.rst#2025-04-16_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nfrom tqdm import trange\nfrom tqdm.contrib.logging import logging_redirect_tqdm\n\nLOG = logging.getLogger(__name__)\n\nif __name__ == '__main__':\n    logging.basicConfig(level=logging.INFO)\n    with logging_redirect_tqdm():\n        for i in trange(9):\n            if i == 4:\n                LOG.info(\"console logging redirected to `tqdm.write()`\")\n    # logging restored\n```\n\n----------------------------------------\n\nTITLE: Custom TQDM Formatting Class Implementation\nDESCRIPTION: Example of extending TQDM class to add custom formatting parameters. Shows how to add a total_time parameter to the progress bar format.\nSOURCE: https://github.com/tqdm/tqdm/blob/master/README.rst#2025-04-16_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nfrom tqdm import tqdm\nclass TqdmExtraFormat(tqdm):\n    \"\"\"Provides a `total_time` format parameter\"\"\"\n    @property\n    def format_dict(self):\n        d = super().format_dict\n        total_time = d[\"elapsed\"] * (d[\"total\"] or 0) / max(d[\"n\"], 1)\n        d.update(total_time=self.format_interval(total_time) + \" in total\")\n        return d\n\nfor i in TqdmExtraFormat(\n      range(9), ascii=\" .oO0\",\n      bar_format=\"{total_time}: {percentage:.0f}%|{bar}{r_bar}\"):\n    if i == 4:\n        break\n```\n\n----------------------------------------\n\nTITLE: Using tqdm as a Python Iterable Wrapper\nDESCRIPTION: Demonstrates the basic usage of tqdm by wrapping a Python range iterable to display progress during iteration. This example shows how to create a progress bar that updates as the loop processes each item.\nSOURCE: https://github.com/tqdm/tqdm/blob/master/examples/paper.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom tqdm import tqdm\nfrom time import sleep\nfor i in tqdm(range(100)):\n    sleep(0.1)\n100%|#########################################| 100/100 [00:10<00:00,  9.95it/s]\n```\n\n----------------------------------------\n\nTITLE: Using tqdm Command-line Interface (CLI) with Unix Pipes\nDESCRIPTION: Shows how to use tqdm's CLI functionality to display progress information when processing data through Unix pipes. Examples demonstrate counting lines in text files with progress indication.\nSOURCE: https://github.com/tqdm/tqdm/blob/master/examples/paper.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n # count lines of text in all *.txt files\n$ cat *.txt | wc -l\n1075075\n # same but with continuously updating progress information\n$ cat *.txt | python3 -m tqdm --unit loc --unit_scale | wc -l\n1.08Mloc [00:07, 142kloc/s]\n # same if `total` is known\n$ cat *.txt | python3 -m tqdm --unit loc --unit_scale --total 1075075 | wc -l\n100%|#####################################| 1.08/1.08M [00:07<00:00,  142kloc/s]\n1075075\n```\n\n----------------------------------------\n\nTITLE: Using tqdm as a Module with Pipes in Shell\nDESCRIPTION: Shows how to use tqdm as a module in shell commands, piping input through tqdm to display progress. This example counts lines in a file while showing a progress bar.\nSOURCE: https://github.com/tqdm/tqdm/blob/master/README.rst#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ seq 9999999 | tqdm --bytes | wc -l\n75.2MB [00:00, 217MB/s]\n9999999\n```\n\n----------------------------------------\n\nTITLE: Using tqdm with File Operations in Shell\nDESCRIPTION: Demonstrates using tqdm with file operations like tar in shell commands. This example shows progress while creating a backup archive.\nSOURCE: https://github.com/tqdm/tqdm/blob/master/README.rst#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ tar -zcf - docs/ | tqdm --bytes --total `du -sb docs/ | cut -f1` \\\n    > backup.tgz\n 32%|██████████▍                      | 8.89G/27.9G [00:42<01:31, 223MB/s]\n```\n\n----------------------------------------\n\nTITLE: Using tqdm in Shell Pipelines\nDESCRIPTION: Shows how to use tqdm in shell pipelines to count lines in Python files while displaying progress.\nSOURCE: https://github.com/tqdm/tqdm/blob/master/README.rst#2025-04-16_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\n$ time find . -name '*.py' -type f -exec cat \\{\\} \\; | tqdm | wc -l\n857366it [00:03, 246471.31it/s]\n857365\n\nreal    0m3.585s\nuser    0m0.862s\nsys     0m3.358s\n```\n\n----------------------------------------\n\nTITLE: Advanced tqdm Usage in Shell with Custom Units\nDESCRIPTION: Demonstrates advanced usage of tqdm in shell commands, including setting custom units and total values.\nSOURCE: https://github.com/tqdm/tqdm/blob/master/README.rst#2025-04-16_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\n$ find . -name '*.py' -type f -exec cat \\{\\} \\; |\n    tqdm --unit loc --unit_scale --total 857366 >> /dev/null\n100%|█████████████████████████████████| 857K/857K [00:04<00:00, 246Kloc/s]\n```\n\n----------------------------------------\n\nTITLE: Backup Directory with tqdm Progress in Shell\nDESCRIPTION: Shows how to use tqdm to display progress while backing up a large directory using tar command.\nSOURCE: https://github.com/tqdm/tqdm/blob/master/README.rst#2025-04-16_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\n$ tar -zcf - docs/ | tqdm --bytes --total `du -sb docs/ | cut -f1` \\\n  > backup.tgz\n 44%|██████████████▊                   | 153M/352M [00:14<00:18, 11.0MB/s]\n```\n\n----------------------------------------\n\nTITLE: Complex Backup with Multiple tqdm Progress Bars in Shell\nDESCRIPTION: Demonstrates a more complex backup scenario using multiple tqdm progress bars to show both processing and compression progress.\nSOURCE: https://github.com/tqdm/tqdm/blob/master/README.rst#2025-04-16_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\n$ BYTES=$(du -sb docs/ | cut -f1)\n$ tar -cf - docs/ \\\n  | tqdm --bytes --total \"$BYTES\" --desc Processing | gzip \\\n  | tqdm --bytes --total \"$BYTES\" --desc Compressed --position 1 \\\n  > ~/backup.tgz\nProcessing: 100%|██████████████████████| 352M/352M [00:14<00:00, 30.2MB/s]\nCompressed:  42%|█████████▎            | 148M/352M [00:14<00:19, 10.9MB/s]\n```\n\n----------------------------------------\n\nTITLE: Using tqdm with 7-zip in Shell\nDESCRIPTION: Shows how to use tqdm to display progress when compressing files using 7-zip on a file level.\nSOURCE: https://github.com/tqdm/tqdm/blob/master/README.rst#2025-04-16_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\n$ 7z a -bd -r backup.7z docs/ | grep Compressing \\\n  | tqdm --total $(find docs/ -type f | wc -l) --unit files \\\n  | grep -v Compressing\n100%|██████████████████████████▉| 15327/15327 [01:00<00:00, 712.96files/s]\n```\n\n----------------------------------------\n\nTITLE: Using tqdm's Update Flags with Existing CLI Programs\nDESCRIPTION: Demonstrates how to use tqdm's --update and --update_to flags with pre-existing CLI programs that output basic progress information.\nSOURCE: https://github.com/tqdm/tqdm/blob/master/README.rst#2025-04-16_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\n$ seq 3 0.1 5 | tqdm --total 5 --update_to --null\n100%|████████████████████████████████████| 5.0/5 [00:00<00:00, 9673.21it/s]\n$ seq 10 | tqdm --update --null  # 1 + 2 + ... + 10 = 55 iterations\n55it [00:00, 90006.52it/s]\n```\n\n----------------------------------------\n\nTITLE: Installing tqdm via pip\nDESCRIPTION: Shows the command to install the latest stable release of tqdm using pip package manager.\nSOURCE: https://github.com/tqdm/tqdm/blob/master/README.rst#2025-04-16_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npip install tqdm\n```\n\n----------------------------------------\n\nTITLE: Installing tqdm Development Version from GitHub\nDESCRIPTION: Demonstrates how to install the latest development release of tqdm directly from the GitHub repository.\nSOURCE: https://github.com/tqdm/tqdm/blob/master/README.rst#2025-04-16_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\npip install \"git+https://github.com/tqdm/tqdm.git@devel#egg=tqdm\"\n```\n\n----------------------------------------\n\nTITLE: Installing tqdm via Conda\nDESCRIPTION: Shows the command to install tqdm using the Conda package manager from the conda-forge channel.\nSOURCE: https://github.com/tqdm/tqdm/blob/master/README.rst#2025-04-16_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nconda install -c conda-forge tqdm\n```\n\n----------------------------------------\n\nTITLE: Running Make Commands for tqdm Development\nDESCRIPTION: Shows how to run make commands for tqdm development, either using standard make on UNIX-like systems or using Python's py-make module as an alternative when make is unavailable.\nSOURCE: https://github.com/tqdm/tqdm/blob/master/CONTRIBUTING.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake [<alias>]  # on UNIX-like environments\npython -m pymake [<alias>]  # if make is unavailable\n```\n\n----------------------------------------\n\nTITLE: Running tqdm Tests with tox\nDESCRIPTION: Commands to run tqdm tests using tox in a virtual environment. This will build the module and test against multiple Python versions defined in tox.ini.\nSOURCE: https://github.com/tqdm/tqdm/blob/master/CONTRIBUTING.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n[python -m py]make test\n# or:\ntox --skip-missing-interpreters\n```\n\n----------------------------------------\n\nTITLE: Running tqdm Tests with pytest\nDESCRIPTION: Commands to run tests with pytest for the current Python version only. This requires installing test dependencies first.\nSOURCE: https://github.com/tqdm/tqdm/blob/master/CONTRIBUTING.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n[python -m py]make alltests\n```\n\n----------------------------------------\n\nTITLE: Building and Publishing Docker Images for tqdm\nDESCRIPTION: Commands to build and publish Docker images for tqdm to Docker Hub, including pushing the latest version and a version-specific tag.\nSOURCE: https://github.com/tqdm/tqdm/blob/master/CONTRIBUTING.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake -B docker\ndocker login\ndocker push tqdm/tqdm:latest\ndocker push tqdm/tqdm:$(docker run -i --rm tqdm/tqdm -v)\n```\n\n----------------------------------------\n\nTITLE: Building and Publishing Snap Packages for tqdm\nDESCRIPTION: Commands to build and publish Snap packages for tqdm to the Snap Store, assuming snapcraft is installed.\nSOURCE: https://github.com/tqdm/tqdm/blob/master/CONTRIBUTING.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmake snap\nsnapcraft login\nsnapcraft push tqdm*.snap --release stable\n```\n\n----------------------------------------\n\nTITLE: Helper Bots Command Examples\nDESCRIPTION: Examples of bot commands like tagging versions and automated tasks run by GitHub Actions workflows.\nSOURCE: https://github.com/tqdm/tqdm/blob/master/CONTRIBUTING.md#2025-04-16_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n/tag vM.m.p commit_hash\n```\n\n----------------------------------------\n\nTITLE: Development Commands\nDESCRIPTION: Various development and release-related commands including testing, building, and deployment steps.\nSOURCE: https://github.com/tqdm/tqdm/blob/master/CONTRIBUTING.md#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n[python -m py]make alltests\ngit commit [--amend]\ngit push\ngit tag vM.m.p && git push --tags\n[python -m py]make distclean\n[python -m py]make build\n[python -m py]make pypi\ntwine upload -s -i $(git config user.signingkey) dist/tqdm-*\nmake -B docker\ndocker push tqdm/tqdm:latest\ndocker push tqdm/tqdm:$(docker run -i --rm tqdm/tqdm -v)\nmake snap\nsnapcraft push tqdm*.snap --release stable\n[python -m py]make testasvfull\nasv gh-pages\n```\n\n----------------------------------------\n\nTITLE: Running TQDM Benchmarks Locally with ASV\nDESCRIPTION: Instructions for running TQDM benchmarks locally using the ASV benchmarking tool. The process requires installing virtualenv and asv, cloning the repository, and then running the asv command from the repository root.\nSOURCE: https://github.com/tqdm/tqdm/blob/master/benchmarks/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nasv --help\n```\n\n----------------------------------------\n\nTITLE: Defining Badge and Image References in ReStructuredText for TQDM Project\nDESCRIPTION: A comprehensive collection of image directives in ReStructuredText format that define various badges and links for the TQDM project documentation. These include GitHub statistics, download metrics, compatibility information, and other project indicators.\nSOURCE: https://github.com/tqdm/tqdm/blob/master/README.rst#2025-04-16_snippet_38\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. |GitHub-Stars| image:: https://img.shields.io/github/stars/tqdm/tqdm.svg?logo=github&logoColor=white\n   :target: https://github.com/tqdm/tqdm/stargazers\n.. |GitHub-Commits| image:: https://img.shields.io/github/commit-activity/y/tqdm/tqdm.svg?logo=git&logoColor=white\n   :target: https://github.com/tqdm/tqdm/graphs/commit-activity\n.. |GitHub-Issues| image:: https://img.shields.io/github/issues-closed/tqdm/tqdm.svg?logo=github&logoColor=white\n   :target: https://github.com/tqdm/tqdm/issues?q=\n.. |GitHub-PRs| image:: https://img.shields.io/github/issues-pr-closed/tqdm/tqdm.svg?logo=github&logoColor=white\n   :target: https://github.com/tqdm/tqdm/pulls\n.. |GitHub-Contributions| image:: https://img.shields.io/github/contributors/tqdm/tqdm.svg?logo=github&logoColor=white\n   :target: https://github.com/tqdm/tqdm/graphs/contributors\n.. |GitHub-Updated| image:: https://img.shields.io/github/last-commit/tqdm/tqdm/master.svg?logo=github&logoColor=white&label=pushed\n   :target: https://github.com/tqdm/tqdm/pulse\n.. |Gift-Casper| image:: https://img.shields.io/badge/dynamic/json.svg?color=ff69b4&label=gifts%20received&prefix=%C2%A3&query=%24..sum&url=https%3A%2F%2Fcaspersci.uk.to%2Fgifts.json\n   :target: https://cdcl.ml/sponsor\n.. |Versions| image:: https://img.shields.io/pypi/v/tqdm.svg\n   :target: https://tqdm.github.io/releases\n.. |PyPI-Downloads| image:: https://img.shields.io/pypi/dm/tqdm.svg?label=pypi%20downloads&logo=PyPI&logoColor=white\n   :target: https://pepy.tech/project/tqdm\n.. |Py-Versions| image:: https://img.shields.io/pypi/pyversions/tqdm.svg?logo=python&logoColor=white\n   :target: https://pypi.org/project/tqdm\n.. |Conda-Forge-Status| image:: https://img.shields.io/conda/v/conda-forge/tqdm.svg?label=conda-forge&logo=conda-forge\n   :target: https://anaconda.org/conda-forge/tqdm\n.. |Snapcraft| image:: https://img.shields.io/badge/snap-install-82BEA0.svg?logo=snapcraft\n   :target: https://snapcraft.io/tqdm\n.. |Docker| image:: https://img.shields.io/badge/docker-pull-blue.svg?logo=docker&logoColor=white\n   :target: https://hub.docker.com/r/tqdm/tqdm\n.. |Libraries-Rank| image:: https://img.shields.io/librariesio/sourcerank/pypi/tqdm.svg?logo=koding&logoColor=white\n   :target: https://libraries.io/pypi/tqdm\n.. |Libraries-Dependents| image:: https://img.shields.io/librariesio/dependent-repos/pypi/tqdm.svg?logo=koding&logoColor=white\n    :target: https://github.com/tqdm/tqdm/network/dependents\n.. |OpenHub-Status| image:: https://www.openhub.net/p/tqdm/widgets/project_thin_badge?format=gif\n   :target: https://www.openhub.net/p/tqdm?ref=Thin+badge\n.. |awesome-python| image:: https://awesome.re/mentioned-badge.svg\n   :target: https://github.com/vinta/awesome-python\n.. |LICENCE| image:: https://img.shields.io/pypi/l/tqdm.svg\n   :target: https://raw.githubusercontent.com/tqdm/tqdm/master/LICENCE\n.. |DOI| image:: https://img.shields.io/badge/DOI-10.5281/zenodo.595120-blue.svg\n   :target: https://doi.org/10.5281/zenodo.595120\n.. |binder-demo| image:: https://mybinder.org/badge_logo.svg\n   :target: https://mybinder.org/v2/gh/tqdm/tqdm/master?filepath=DEMO.ipynb\n.. |Screenshot-Jupyter1| image:: https://tqdm.github.io/img/jupyter-1.gif\n.. |Screenshot-Jupyter2| image:: https://tqdm.github.io/img/jupyter-2.gif\n.. |Screenshot-Jupyter3| image:: https://tqdm.github.io/img/jupyter-3.gif\n.. |README-Hits| image:: https://cgi.cdcl.ml/hits?q=tqdm&style=social&r=https://github.com/tqdm/tqdm&l=https://tqdm.github.io/img/favicon.png&f=https://tqdm.github.io/img/logo.gif\n   :target: https://cgi.cdcl.ml/hits?q=tqdm&a=plot&r=https://github.com/tqdm/tqdm&l=https://tqdm.github.io/img/favicon.png&f=https://tqdm.github.io/img/logo.gif&style=social\n```"
  }
]