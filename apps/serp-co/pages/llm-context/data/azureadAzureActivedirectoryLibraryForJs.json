[
  {
    "owner": "azuread",
    "repo": "azure-activedirectory-library-for-js",
    "content": "TITLE: Initializing ADAL with Azure AD App Configuration\nDESCRIPTION: JavaScript code showing how to initialize ADAL with the minimum required configuration, providing the client ID of your Azure AD application.\nSOURCE: https://github.com/azuread/azure-activedirectory-library-for-js/blob/dev/README.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nwindow.config = {\n   clientId: 'g075edef-0efa-453b-997b-de1337c29185'\n};\nvar authContext = new AuthenticationContext(config);\n```\n\n----------------------------------------\n\nTITLE: Initializing ADAL with Azure AD in AngularJS\nDESCRIPTION: JavaScript code that shows how to initialize ADAL in an AngularJS application with the minimum required configuration, including passing the $httpProvider to inject request interceptors.\nSOURCE: https://github.com/azuread/azure-activedirectory-library-for-js/blob/dev/README.md#2025-04-23_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nadalAuthenticationServiceProvider.init({\n        // clientId is the identifier assigned to your app by Azure Active Directory.\n        clientId: \"e9a5a8b6-8af7-4719-9821-0deef255f68e\"\n    },\n    $httpProvider   // pass http provider to inject request interceptor to attach tokens\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS API Endpoints in ADAL.js\nDESCRIPTION: This code snippet shows how to configure CORS API endpoints in ADAL.js. It demonstrates setting up endpoint-to-resource mapping and initializing the ADAL authentication service provider with these endpoints. This is necessary for making CORS API calls with proper token attachment.\nSOURCE: https://github.com/azuread/azure-activedirectory-library-for-js/blob/dev/README.md#2025-04-23_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\n// endpoint to resource mapping(optional)\nvar endpoints = {\n    \"https://yourhost/api\": \"b6a68585-5287-45b2-ba82-383ba1f60932\",\n};\nadalAuthenticationServiceProvider.init(\n    {\n        tenant: \"52d4b072-9470-49fb-8721-bc3a1c9912a1\", // Optional by default, it sends common\n        clientId: \"e9a5a8b6-8af7-4719-9821-0deef255f68e\", // Required\n        endpoints: endpoints  // If you need to send CORS API requests.\n    },\n    $httpProvider   // pass http provider to inject request interceptor to attach tokens\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing CORS API Service in AngularJS with ADAL.js\nDESCRIPTION: This snippet demonstrates how to implement a service in AngularJS that makes CORS API calls using ADAL.js. It shows the setup of an Angular factory that configures CORS headers and makes an HTTP GET request to a specified API endpoint.\nSOURCE: https://github.com/azuread/azure-activedirectory-library-for-js/blob/dev/README.md#2025-04-23_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\n'use strict';\napp.factory('contactService', ['$http', function ($http) {\n    var serviceFactory = {};\n\n    var _getItems = function () {\n        $http.defaults.useXDomain = true;\n        delete $http.defaults.headers.common['X-Requested-With'];\n        return $http.get('http://adaljscors.azurewebsites.net/api/contacts');\n    };\n\n    serviceFactory.getItems = _getItems;\n\n    return serviceFactory;\n}]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Tenant Support in ADAL.js\nDESCRIPTION: This snippet demonstrates how to configure ADAL.js for multi-tenant support by specifying the tenant ID. By default, ADAL uses 'common' as the tenant, allowing any Microsoft account to authenticate. Setting a specific tenant ID restricts authentication to that tenant.\nSOURCE: https://github.com/azuread/azure-activedirectory-library-for-js/blob/dev/README.md#2025-04-23_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nwindow.config = {\n    tenant: \"52d4b072-9470-49fb-8721-bc3a1c9912a1\", // Optional by default, it sends common\n    clientId: 'g075edef-0efa-453b-997b-de1337c29185'\n};\n```\n\n----------------------------------------\n\nTITLE: Securing Routes with ADAL in AngularJS\nDESCRIPTION: JavaScript code showing how to define routes that require ADAL authentication by adding the requireADLogin property set to true in the route definition.\nSOURCE: https://github.com/azuread/azure-activedirectory-library-for-js/blob/dev/README.md#2025-04-23_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n$routeProvider.\n    when(\"/todoList\", {\n        controller: \"todoListController\",\n        templateUrl: \"/App/Views/todoList.html\",\n        requireADLogin: true\n    });\n```\n\n----------------------------------------\n\nTITLE: AngularJS Controller with ADAL Authentication Handling\nDESCRIPTION: JavaScript code for an AngularJS controller that handles login, logout, and authentication events with the ADAL authentication service, including event listeners for success, failure, and authorization events.\nSOURCE: https://github.com/azuread/azure-activedirectory-library-for-js/blob/dev/README.md#2025-04-23_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n'use strict';\napp.controller('homeController', ['$scope', '$location', 'adalAuthenticationService', function ($scope, $location, adalAuthenticationService) {\n    // this is referencing adal module to do login\n\n    //userInfo is defined at the $rootscope with adalAngular module\n    $scope.testMessage = \"\";\n    $scope.init = function () {\n        $scope.testMessage = \"\";\n    };\n\n    $scope.logout = function () {\n        adalAuthenticationService.logOut();\n    };\n\n    $scope.login = function () {\n        adalAuthenticationService.login();\n    };\n\n    // optional\n    $scope.$on(\"adal:loginSuccess\", function () {\n        $scope.testMessage = \"loginSuccess\";\n    });\n\n    // optional\n    $scope.$on(\"adal:loginFailure\", function () {\n        $scope.testMessage = \"loginFailure\";\n        $location.path(\"/login\");\n    });\n\n    // optional\n    $scope.$on(\"adal:notAuthorized\", function (event, rejection, forResource) {\n        $scope.testMessage = \"It is not Authorized for resource:\" + forResource;\n    });\n\n}]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Logging in ADAL.js\nDESCRIPTION: This snippet demonstrates how to implement logging in ADAL.js. It defines log levels and provides a custom log method that can be implemented to redirect logs as needed. This is useful for debugging and monitoring ADAL.js behavior.\nSOURCE: https://github.com/azuread/azure-activedirectory-library-for-js/blob/dev/README.md#2025-04-23_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nLogging = {\n    level: 3,\n    log: function (message) {\n        console.log(message);\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Triggering Login and Logout with ADAL Context\nDESCRIPTION: JavaScript code demonstrating how to handle login and logout actions by binding them to button click events using the authContext object.\nSOURCE: https://github.com/azuread/azure-activedirectory-library-for-js/blob/dev/README.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n$signInButton.click(function () {\n    authContext.login();\n});\n\n$signOutButton.click(function () {\n    authContext.logOut();\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Cache Location in ADAL.js Configuration\nDESCRIPTION: This code snippet shows how to specify the cache location for ADAL.js. By default, sessionStorage is used, but localStorage can be specified as an alternative. This setting affects where authentication tokens are stored in the browser.\nSOURCE: https://github.com/azuread/azure-activedirectory-library-for-js/blob/dev/README.md#2025-04-23_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nwindow.config = {\n    clientId: 'g075edef-0efa-453b-997b-de1337c29185',\n    cacheLocation: 'localStorage' // optional cache location. Default is sessionStorage\n};\n```\n\n----------------------------------------\n\nTITLE: Complete AngularJS Application with ADAL Integration\nDESCRIPTION: HTML code for a complete AngularJS application that includes the necessary scripts and user interface elements for login/logout with ADAL, as well as accessing user information.\nSOURCE: https://github.com/azuread/azure-activedirectory-library-for-js/blob/dev/README.md#2025-04-23_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Angular Adal Sample</title>\n</head>\n<body ng-app=\"adalDemo\" ng-controller=\"homeController\" ng-init=\"hmCtl.init()\">\n    <a href=\"#\">Home</a>\n    <a href=\"#/todoList\">ToDo List</a>\n\n\n    <!--These links are added to manage login/logout-->\n    <div data-ng-model=\"userInfo\">\n        <span data-ng-hide=\"!userInfo.isAuthenticated\">Welcome {{userInfo.userName}} </span>\n        <button data-ng-hide=\"!userInfo.isAuthenticated\" data-ng-click=\"logout()\">Logout</button>\n        <button data-ng-hide=\"userInfo.isAuthenticated\" data-ng-click=\"login()\">Login</button>\n\n        <div>\n            {{userInfo.loginError}}\n        </div>\n        <div>\n            {{testMessage}}\n        </div>\n    </div>\n    <div ng-view>\n        Your view will appear here.\n    </div>\n\n    <script src=\"/Scripts/angular.min.js\"></script>\n    <script src=\"/Scripts/angular-route.min.js\"></script>\n    <script src=\"/Scripts/adal.js\"></script>\n    <script src=\"/Scripts/adal-angular.js\"></script>\n    <script src=\"App/Scripts/app.js\"></script>\n    <script src=\"App/Scripts/homeController.js\"></script>\n    <script src=\"App/Scripts/todoDetailController.js\"></script>\n    <script src=\"App/Scripts/todoListController.js\"></script>\n    <script src=\"App/Scripts/todoService.js\"></script>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Including ADAL JS Scripts in HTML\nDESCRIPTION: HTML code that demonstrates how to reference the ADAL JS library in your main app page before your application scripts.\nSOURCE: https://github.com/azuread/azure-activedirectory-library-for-js/blob/dev/README.md#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"App/Scripts/adal.js\"></script>\n<script src=\"App/Scripts/app.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Including ADAL Module in AngularJS App\nDESCRIPTION: JavaScript code that shows how to include a reference to the ADAL Angular module in your Angular application module.\nSOURCE: https://github.com/azuread/azure-activedirectory-library-for-js/blob/dev/README.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar app = angular.module('demoApp', ['ngRoute', 'AdalAngular']);\n```\n\n----------------------------------------\n\nTITLE: Including ADAL Scripts in AngularJS Application\nDESCRIPTION: HTML code showing how to reference Angular.js libraries, ADAL.js, and ADAL-Angular.js in the proper order for an AngularJS application.\nSOURCE: https://github.com/azuread/azure-activedirectory-library-for-js/blob/dev/README.md#2025-04-23_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"/Scripts/angular.min.js\"></script>\n<script src=\"/Scripts/angular-route.min.js\"></script>\n<script src=\"/Scripts/adal.js\"></script>\n<script src=\"/Scripts/adal-angular.js\"></script>\n<script src=\"App/Scripts/app.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML5 Mode with hashPrefix for ADAL\nDESCRIPTION: JavaScript code that demonstrates how to set the $locationProvider hashPrefix when HTML5 mode is configured to prevent infinite login loops with ADAL.\nSOURCE: https://github.com/azuread/azure-activedirectory-library-for-js/blob/dev/README.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n// using '!' as the hashPrefix but can be a character of your choosing\napp.config(['$locationProvider', function($locationProvider) {\n\t$locationProvider.html5Mode(true).hashPrefix('!');\n}]);\n```\n\n----------------------------------------\n\nTITLE: Specifying ADAL iOS Version in CocoaPods\nDESCRIPTION: This code snippet demonstrates how to specify the version of ADAL for iOS in a CocoaPods podfile. It ensures that the latest build greater than 1.1 but less than 1.2 will be used.\nSOURCE: https://github.com/azuread/azure-activedirectory-library-for-js/blob/dev/RELEASES.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\npod 'ADALiOS', '~> 1.1'\n```\n\n----------------------------------------\n\nTITLE: Specifying ADAL .NET Version in NuGet\nDESCRIPTION: This XML snippet shows how to specify the version of ADAL for .NET in a NuGet package reference. It ensures that all versions from 1.1.0 to 1.1.x are included, but not 1.2.\nSOURCE: https://github.com/azuread/azure-activedirectory-library-for-js/blob/dev/RELEASES.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency\nid=\"ADALfordotNet\"\nversion=\"[1.1,1.2)\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up the JavaScript Repository\nDESCRIPTION: Commands for cloning the Azure Active Directory library for JavaScript repository, navigating to the project directory, and adding the upstream remote repository reference.\nSOURCE: https://github.com/azuread/azure-activedirectory-library-for-js/blob/dev/contributing.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone git@github.com:username/azure-activedirectory-library-for-js.git\n$ cd azure-activedirectory-library-for-js\n$ git remote add upstream git@github.com:MSOpenTech/azure-activedirectory-library-for-js.git\n```\n\n----------------------------------------\n\nTITLE: Rebasing with Upstream\nDESCRIPTION: Commands for syncing your feature branch with the latest changes from the upstream repository using git rebase.\nSOURCE: https://github.com/azuread/azure-activedirectory-library-for-js/blob/dev/contributing.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ git fetch upstream\n$ git rebase upstream/v0.1  # or upstream/master\n```\n\n----------------------------------------\n\nTITLE: Creating a Feature Branch\nDESCRIPTION: Command for creating and checking out a new feature branch to work on changes.\nSOURCE: https://github.com/azuread/azure-activedirectory-library-for-js/blob/dev/contributing.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ git checkout -b my-feature-branch\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to Your Fork\nDESCRIPTION: Command for pushing your feature branch to your fork on GitHub to prepare for creating a pull request.\nSOURCE: https://github.com/azuread/azure-activedirectory-library-for-js/blob/dev/contributing.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ git push origin my-feature-branch\n```\n\n----------------------------------------\n\nTITLE: Configuring Git User Information\nDESCRIPTION: Commands for setting up Git with your name and email address for commit attribution.\nSOURCE: https://github.com/azuread/azure-activedirectory-library-for-js/blob/dev/contributing.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ git config --global user.name \"J. Random User\"\n$ git config --global user.email \"j.random.user@example.com\"\n```\n\n----------------------------------------\n\nTITLE: Example of Good Commit Message Format\nDESCRIPTION: Example showing the proper format for commit messages, with a concise first line followed by a detailed explanation of changes.\nSOURCE: https://github.com/azuread/azure-activedirectory-library-for-js/blob/dev/contributing.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfix: explaining the commit in one line\n\nBody of commit message is a few lines of text, explaining things\nin more detail, possibly giving some background about the issue\nbeing fixed, etc etc.\n\nThe body of the commit message can be several paragraphs, and\nplease do proper word-wrap and keep columns shorter than about\n72 characters or so. That way `git log` will show things\nnicely even when it is indented.\n```\n\n----------------------------------------\n\nTITLE: Applying Apache License 2.0 Boilerplate Notice\nDESCRIPTION: A template for the boilerplate notice to be included when applying the Apache License 2.0 to a software project. It includes placeholders for the copyright year and owner.\nSOURCE: https://github.com/azuread/azure-activedirectory-library-for-js/blob/dev/LICENSE.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice Template\nDESCRIPTION: A template for the copyright notice that should be included when applying the Apache License 2.0 to a project. The template includes placeholders for the year and copyright owner, with instructions to customize these fields.\nSOURCE: https://github.com/azuread/azure-activedirectory-library-for-js/blob/dev/doc/scripts/prettify/Apache-License-2.0.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```"
  }
]