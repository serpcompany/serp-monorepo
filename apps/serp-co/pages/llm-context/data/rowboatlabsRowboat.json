[
  {
    "owner": "rowboatlabs",
    "repo": "rowboat",
    "content": "TITLE: Initializing and Using Rowboat Python Chat Client - Python\nDESCRIPTION: This Python snippet shows how to create a Rowboat Client instance and send a chat message to a specific project. It requires the 'rowboat' package and valid host, project ID, and API key credentials. The Client handles authentication and message exchange, returning structured response messages and conversational state suitable for further processing. The key parameters include messages (a list of role/content dicts), with expected outputs of response_messages and a state dictionary.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/apps/docs/docs/testing.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom rowboat import Client\n\nclient = Client(\n    host=\"<HOST>\",\n    project_id=\"<PROJECT_ID>\",\n    api_key=\"<API_KEY>\"  # Generate this from /projects/<PROJECT_ID>/config\n)\n\n# Simple chat interaction\nmessages = [{\"role\": \"user\", \"content\": \"What is my pending payment amount?\"}]\nresponse_messages, state = client.chat(messages=messages)\n```\n\n----------------------------------------\n\nTITLE: Basic Stateful Conversation with RowBoat Python SDK\nDESCRIPTION: Demonstrates the basic usage of the RowBoat Python SDK using the `StatefulChat` class. It initializes the `Client` with the host URL, project ID, and API key, then creates a `StatefulChat` instance. Subsequent calls to `chat.run()` send user messages and receive responses, with the conversation context and state automatically maintained by the `StatefulChat` object.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/apps/docs/docs/using_the_sdk.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom rowboat import Client, StatefulChat\n\n# Initialize the client\nclient = Client(\n    host=\"<HOST>\",\n    project_id=\"<PROJECT_ID>\",\n    api_key=\"<API_KEY>\"\n)\n\n# Create a stateful chat session\nchat = StatefulChat(client)\n\n# Have a conversation\nresponse = chat.run(\"What is the capital of France?\")\nprint(response)\n# The capital of France is Paris.\n\n# Continue the conversation - the context is maintained automatically\nresponse = chat.run(\"What other major cities are in that country?\")\nprint(response)\n# Other major cities in France include Lyon, Marseille, Toulouse, and Nice.\n\nresponse = chat.run(\"What's the population of the first city you mentioned?\")\nprint(response)\n# Lyon has a population of approximately 513,000 in the city proper.\n```\n\n----------------------------------------\n\nTITLE: Initializing StatefulChat with a Specific Workflow ID (Python)\nDESCRIPTION: Shows how to initialize the `StatefulChat` class to use a specific pre-defined workflow. By providing the `workflow_id` during instantiation, the chat session will adhere to the configuration and behavior defined by that particular workflow in the Rowboat platform.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/apps/python-sdk/README.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nchat = StatefulChat(\n    client,\n    workflow_id=\"<WORKFLOW_ID>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining the Chat API Request Body Schema (TypeScript)\nDESCRIPTION: Outlines the TypeScript interface for the JSON request body sent to the chat API endpoint. It specifies required fields `messages` (an array representing the conversation history) and `state` (the state object from the previous response, or `null` initially), along with optional fields `workflowId` and `testProfileId` for advanced control.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/apps/docs/docs/using_the_api.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    // Required fields\n    messages: Message[];      // Array of message objects representing the conversation history\n    state: any;              // State object from previous response, or null for first message\n\n    // Optional fields\n    workflowId?: string;     // Specific workflow ID to use (defaults to production workflow)\n    testProfileId?: string;  // Test profile ID for simulation\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Rowboat Python SDK for Chat Interaction\nDESCRIPTION: This Python snippet demonstrates initializing the Rowboat client, connecting to a running Rowboat instance (local or remote), and interacting with an agent. It shows both creating a stateful chat session for continuous conversation and using the lower-level client API for sending individual message lists. Requires replacing `<PROJECT_ID>` and `<API_KEY>`.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/README.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom rowboat import Client, StatefulChat\nfrom rowboat.schema import UserMessage, SystemMessage\n\n# Initialize the client\nclient = Client(\n    host=\"http://localhost:3000\",\n    project_id=\"<PROJECT_ID>\",\n    api_key=\"<API_KEY>\"\n)\n\n# Create a stateful chat session (recommended)\nchat = StatefulChat(client)\nresponse = chat.run(\"What's the weather in London?\")\nprint(response)\n\n# Or use the low-level client API\nmessages = [\n    SystemMessage(role='system', content=\"You are a helpful assistant\"),\n    UserMessage(role='user', content=\"Hello, how are you?\")\n]\n\n# Get response\nresponse = client.chat(messages=messages)\nprint(response.messages[-1].content)\n```\n\n----------------------------------------\n\nTITLE: Defining the Chat API Response Body Schema (TypeScript)\nDESCRIPTION: Outlines the TypeScript interface for the JSON response body returned by the chat API. The response contains an array `messages` with the new message(s) generated by the assistant during that turn, and the updated `state` object which must be passed back in the next request to maintain conversational context.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/apps/docs/docs/using_the_api.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    messages: Message[];  // Array of new messages from this turn\n    state: any;          // State object to pass in the next request\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Low-Level Chat Interaction using Rowboat Client (Python)\nDESCRIPTION: Demonstrates direct interaction with the Rowboat API using the `Client` class. This approach requires manual management of the conversation history (`messages` list) and state. Messages are created using schema objects like `UserMessage`, and the `client.chat()` method is called explicitly, passing the message list and the state received from the previous response for subsequent calls.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/apps/python-sdk/README.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom rowboat.schema import UserMessage\n\n# Initialize the client\nclient = Client(\n    host=\"<HOST>\",\n    project_id=\"<PROJECT_ID>\",\n    api_key=\"<API_KEY>\"\n)\n\n# Create messages\nmessages = [\n    UserMessage(role='user', content=\"Hello, how are you?\")\n]\n\n# Get response\nresponse = client.chat(messages=messages)\nprint(response.messages[-1].content)\n\n# For subsequent messages, you need to manage the message history and state manually\nmessages.extend(response.messages)\nmessages.append(UserMessage(role='user', content=\"What's your name?\"))\nresponse = client.chat(messages=messages, state=response.state)\n```\n\n----------------------------------------\n\nTITLE: Defining the Assistant Message Schema (TypeScript)\nDESCRIPTION: Specifies the TypeScript interface for an 'assistant' message object, representing the assistant's response within the `messages` array (used in both requests for history and in responses). It includes the `role` (\"assistant\"), `content` (textual response), `agenticResponseType` (indicating if it's internal processing or external output), and an optional `agenticSender` identifier.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/apps/docs/docs/using_the_api.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    role: \"assistant\";\n    content: string;\n    agenticResponseType: \"internal\" | \"external\";\n    agenticSender?: string | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the System Message Schema (TypeScript)\nDESCRIPTION: Specifies the TypeScript interface for a 'system' message object, intended to be part of the `messages` array in the request body. System messages typically provide context or instructions to the assistant and consist of a `role` set to \"system\" and a `content` string.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/apps/docs/docs/using_the_api.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    role: \"system\";\n    content: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the User Message Schema (TypeScript)\nDESCRIPTION: Specifies the TypeScript interface for a 'user' message object, representing user input within the `messages` array of the request body. User messages consist of a `role` set to \"user\" and the user's textual `content`.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/apps/docs/docs/using_the_api.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    role: \"user\";\n    content: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing the Rowboat SDK using pip (Bash)\nDESCRIPTION: This command installs the Rowboat Python SDK package using pip, the Python package installer. This is the standard way to add the `rowboat` library to a Python environment, making its classes and functions available for use in scripts.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/apps/python-sdk/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install rowboat\n```\n\n----------------------------------------\n\nTITLE: Example API Response for First Turn (JSON)\nDESCRIPTION: Illustrates the JSON structure of a typical response from the Rowboat chat API after the first turn. The response includes the assistant's message(s) in the `messages` array and a `state` object. This `state` object must be included in subsequent requests to maintain conversation context.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/apps/docs/docs/using_the_api.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"messages\": [\n        {\n            \"role\": \"assistant\",\n            \"content\": \"Hello! Yes, I'd be happy to help you. What can I assist you with today?\",\n            \"agenticResponseType\": \"external\"\n        }\n    ],\n    \"state\": {\n        \"last_agent_name\": \"MainAgent\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Low-Level Chat Interaction using RowBoat Client (Python)\nDESCRIPTION: Demonstrates direct interaction with the RowBoat API using the `Client` class for more control. It involves initializing the `Client`, manually constructing a list of messages (starting with a `UserMessage`), calling `client.chat()` to get a response, and then manually updating the message list and passing the received `response.state` object in subsequent `client.chat()` calls to maintain conversation continuity.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/apps/docs/docs/using_the_sdk.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom rowboat.schema import UserMessage\n\n# Initialize the client\nclient = Client(\n    host=\"<HOST>\",\n    project_id=\"<PROJECT_ID>\",\n    api_key=\"<API_KEY>\"\n)\n\n# Create messages\nmessages = [\n    UserMessage(role='user', content=\"Hello, how are you?\")\n]\n\n# Get response\nresponse = client.chat(messages=messages)\nprint(response.messages[-1].content)\n\n# For subsequent messages, you need to manage the message history and state manually\nmessages.extend(response.messages)\nmessages.append(UserMessage(role='user', content=\"What's your name?\"))\nresponse = client.chat(messages=messages, state=response.state)\n```\n\n----------------------------------------\n\nTITLE: Sending Chat Message Requests with cURL to Rowboat API - Bash\nDESCRIPTION: This Bash snippet demonstrates how to send a chat message to a Rowboat project using cURL. It includes the necessary headers for authentication and content type, and sends a JSON payload containing user message history. Required parameters include the API host, project ID, and an API key, all injected via template placeholders. The response follows a JSON structure where the assistant can respond directly or trigger internal tool calls, enabling complex agent workflows.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/apps/docs/docs/testing.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'http://<HOST>/api/v1/<PROJECT_ID>/chat' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer <API_KEY>' \\\n--data '{\n    \"messages\": [\n        {\n            \"role\": \"user\",\n            \"content\": \"What is my pending payment amount?\"\n        }\n    ]\n}'\n```\n\n----------------------------------------\n\nTITLE: Installing Rowboat Python SDK via pip - Bash\nDESCRIPTION: This Bash command installs the Rowboat Python SDK using pip. The SDK is required for integrating chat interactions with Python applications. Ensure that pip is available in your environment and that you have the appropriate access to install packages.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/apps/docs/docs/testing.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install rowboat\n```\n\n----------------------------------------\n\nTITLE: Defining the Rowboat Chat API Endpoint\nDESCRIPTION: Specifies the structure of the HTTP POST endpoint used to interact with the Rowboat chat API. Requires substituting `<HOST>` (e.g., `http://localhost:3000` for self-hosted) and `<PROJECT_ID>` with actual values obtained from the project's developer configs.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/apps/docs/docs/using_the_api.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nPOST <HOST>/api/v1/<PROJECT_ID>/chat\n```\n\n----------------------------------------\n\nTITLE: Parsing Rowboat Chat API Response Structure - JSON\nDESCRIPTION: This JSON snippet displays the structure of a typical response from the Rowboat chat API. The response includes a messages array with multiple roles, such as assistant, tool, and user, as well as a state object for maintaining interaction context. Important fields like sender, role, response_type, content, tool_calls, and timestamps are available, supporting both direct user replies and internal tool transitions. This structure is critical for applications that need to process conversational state and workflows programmatically.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/apps/docs/docs/testing.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"messages\": [\n        {\n            \"sender\": \"Credit Card Hub\",\n            \"role\": \"assistant\",\n            \"response_type\": \"internal\",\n            \"content\": null,\n            \"created_at\": \"2025-02-01T06:55:47.843909\",\n            \"current_turn\": true,\n            \"tool_calls\": [\n                {\n                    \"function\": {\n                    \"arguments\": \"{\\\"args\\\":\\\"\\\",\\\"kwargs\\\":\\\"\\\"}\",\n                    // Internal tool calls are used to transfer between agents\n                    \"name\": \"transfer_to_outstanding_payment\"\n                    },\n                    \"id\": \"call_7jGpwpVvzhZFOyRgxHFkdOdU\",\n                    \"type\": \"function\"\n                }\n            ]\n        },\n        {\n            \"tool_name\": \"transfer_to_outstanding_payment\",\n            \"role\": \"tool\",\n            \"content\": \"{\\\"assistant\\\": \\\"Outstanding Payment\\\"}\",\n            \"tool_call_id\": \"call_7jGpwpVvzhZFOyRgxHFkdOdU\"\n        },\n        {\n            \"sender\": \"Outstanding Payment\",\n            \"role\": \"assistant\",\n            // Response is not user-facing, to enable further post processing\n            \"response_type\": \"internal\",\n            \"content\": \"Sure, could you provide the last four digits of your card or your registered mobile number so I can look up your pending payment amount?\",\n            \"created_at\": \"2025-02-01T06:55:49.648008\",\n            \"current_turn\": true\n        },\n        {\n            \"sender\": \"Outstanding Payment >> Post process\",\n            \"role\": \"assistant\",\n            // Response is user-facing\n            \"response_type\": \"external\",\n            \"content\": \"Sure, please provide the last four digits of your card or your registered mobile number so I can check your pending payment amount.\",\n            \"created_at\": \"2025-02-01T06:55:49.648008\",\n            \"current_turn\": true\n        }\n    ],\n    \"state\": {\n        // .. state data\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending First Chat Message using cURL (Bash)\nDESCRIPTION: Provides a cURL command example for initiating a conversation (first turn) with the Rowboat API. It sends a POST request to the chat endpoint, including the initial user message in the `messages` array and `null` for the `state`. Requires replacing `<HOST>`, `<PROJECT_ID>`, and `<API_KEY>` placeholders.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/apps/docs/docs/using_the_api.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location '<HOST>/api/v1/<PROJECT_ID>/chat' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer <API_KEY>' \\\n--data '{\n    \"messages\": [\n        {\n            \"role\": \"user\",\n            \"content\": \"Hello, can you help me?\"\n        }\n    ],\n    \"state\": null\n}'\n```\n\n----------------------------------------\n\nTITLE: Example Chat API Response - REST API - JSON\nDESCRIPTION: This snippet provides a sample JSON response from the RowBoat Chat API after submitting a user message. The response lists an ordered array of messages representing assistant, internal tool, and user-facing outputs, as well as a state object capturing the API's conversational state. The format supports internal processing and external user-facing responses, with indicators such as response_type. Inputs are submitted via the chat POST endpoint, and the response structure facilitates further processing or UI rendering. Note: The sample includes nested objects, tool calls, and timestamps.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/apps/docs/docs/hosted_setup.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"messages\": [\n        {\n            \"sender\": \"Credit Card Hub\",\n            \"role\": \"assistant\",\n            \"response_type\": \"internal\",\n            \"content\": null,\n            \"created_at\": \"2025-02-01T06:55:47.843909\",\n            \"current_turn\": true,\n            \"tool_calls\": [\n                {\n                    \"function\": {\n                    \"arguments\": \"{\\\"args\\\":\\\"\\\",\\\"kwargs\\\":\\\"\\\"}\",\n                    // Internal tool calls are used to transfer between agents\n                    \"name\": \"transfer_to_outstanding_payment\"\n                    },\n                    \"id\": \"call_7jGpwpVvzhZFOyRgxHFkdOdU\",\n                    \"type\": \"function\"\n                }\n            ]\n        },\n        {\n            \"tool_name\": \"transfer_to_outstanding_payment\",\n            \"role\": \"tool\",\n            \"content\": \"{\\\"assistant\\\": \\\"Outstanding Payment\\\"}\",\n            \"tool_call_id\": \"call_7jGpwpVvzhZFOyRgxHFkdOdU\"\n        },\n        {\n            \"sender\": \"Outstanding Payment\",\n            \"role\": \"assistant\",\n            // Response is not user-facing, to enable further post processing\n            \"response_type\": \"internal\",\n            \"content\": \"Sure, could you provide the last four digits of your card or your registered mobile number so I can look up your pending payment amount?\",\n            \"created_at\": \"2025-02-01T06:55:49.648008\",\n            \"current_turn\": true\n        },\n        {\n            \"sender\": \"Outstanding Payment >> Post process\",\n            \"role\": \"assistant\",\n            // Response is user-facing\n            \"response_type\": \"external\",\n            \"content\": \"Sure, please provide the last four digits of your card or your registered mobile number so I can check your pending payment amount.\",\n            \"created_at\": \"2025-02-01T06:55:49.648008\",\n            \"current_turn\": true\n        }\n    ],\n    \"state\": {\n        // .. state data\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using StatefulChat with Rowboat Client (Python)\nDESCRIPTION: Demonstrates basic usage of the Rowboat SDK. It initializes the `Client` with host, project ID, and API key, then creates a `StatefulChat` instance which automatically manages conversation history and state. The `chat.run()` method sends user messages and retrieves responses, maintaining context between turns.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/apps/python-sdk/README.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom rowboat import Client, StatefulChat\n\n# Initialize the client\nclient = Client(\n    host=\"<HOST>\",\n    project_id=\"<PROJECT_ID>\",\n    api_key=\"<API_KEY>\"\n)\n\n# Create a stateful chat session\nchat = StatefulChat(client)\n\n# Have a conversation\nresponse = chat.run(\"What is the capital of France?\")\nprint(response)\n# The capital of France is Paris.\n\n# Continue the conversation - the context is maintained automatically\nresponse = chat.run(\"What other major cities are in that country?\")\nprint(response)\n# Other major cities in France include Lyon, Marseille, Toulouse, and Nice.\n\nresponse = chat.run(\"What's the population of the first city you mentioned?\")\nprint(response)\n# Lyon has a population of approximately 513,000 in the city proper.\n```\n\n----------------------------------------\n\nTITLE: Sending a Chat Message via API using cURL - REST API - Bash\nDESCRIPTION: This snippet demonstrates how to send a chat message to RowBoat's API using cURL. It issues a POST request with a JSON payload containing user messages, using the appropriate Content-Type header and Bearer token for authentication. Replace <PROJECT_ID> with your project identifier and <API_KEY> with an API key generated from your project config. The input parameter messages defines the conversation context; the expected output is a JSON response containing messages and conversation state. Make sure you have cURL installed and valid credentials available.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/apps/docs/docs/hosted_setup.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'http://localhost:3000/api/v1/<PROJECT_ID>/chat' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer <API_KEY>' \\\n--data '{\n    \"messages\": [\n        {\n            \"role\": \"user\",\n            \"content\": \"What is my pending payment amount?\"\n        }\n    ]\n}'\n```\n\n----------------------------------------\n\nTITLE: Defining Python Dependencies with requirements.txt\nDESCRIPTION: This snippet lists Python package dependencies, each with an exact required version, for consistent environment setup. The file is used with pip to automate installation of all listed libraries, supporting application code, documentation generation, and development workflows. Each entry specifies a third-party package required by the project; lines without comments or inline logic ensure straightforward usage. Expected input is a plain text file, output is a fully installed Python environment. No special parameters, constraints, or advanced configurations are included.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/apps/docs/requirements.txt#_snippet_0\n\nLANGUAGE: requirements\nCODE:\n```\nbabel==2.16.0\ncertifi==2024.12.14\ncharset-normalizer==3.4.1\nclick==8.1.8\ncolorama==0.4.6\nghp-import==2.1.0\nidna==3.10\nJinja2==3.1.5\nMarkdown==3.7\nMarkupSafe==3.0.2\nmergedeep==1.3.4\nmkdocs==1.6.1\nmkdocs-get-deps==0.2.0\nmkdocs-material==9.5.50\nmkdocs-material-extensions==1.3.1\npackaging==24.2\npaginate==0.5.7\npathspec==0.12.1\nplatformdirs==4.3.6\nPygments==2.19.1\npymdown-extensions==10.14.1\npython-dateutil==2.9.0.post0\nPyYAML==6.0.2\npyyaml_env_tag==0.1\nregex==2024.11.6\nrequests==2.32.3\nsix==1.17.0\nurllib3==2.3.0\nwatchdog==6.0.0\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Requirements for Rowboat\nDESCRIPTION: This snippet lists all Python package dependencies and their specific versions required for the Rowboat project. Using this list with tools like pip (e.g., `pip install -r requirements.txt`) ensures that the correct versions of libraries such as `httpx`, `openai`, `pymongo`, `motor`, `pydantic`, `pytest`, and `rowboat` itself are installed, guaranteeing a consistent runtime environment.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/apps/experimental/simulation_runner/requirements.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nannotated-types==0.7.0\nanyio==4.8.0\ncertifi==2025.1.31\ncharset-normalizer==3.4.1\ndistro==1.9.0\ndnspython==2.7.0\nh11==0.14.0\nhttpcore==1.0.7\nhttpx==0.28.1\nidna==3.10\niniconfig==2.0.0\njiter==0.8.2\nmotor==3.7.0\nopenai==1.63.0\npackaging==24.2\npluggy==1.5.0\npydantic==2.10.6\npydantic_core==2.27.2\npymongo==4.11.1\npytest==8.3.4\npytest-asyncio==0.25.3\npython-dateutil==2.9.0.post0\nrequests==2.32.3\nrowboat==2.1.0\nsix==1.17.0\nsniffio==1.3.1\ntqdm==4.67.1\ntyping_extensions==4.12.2\nurllib3==2.3.0\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Dependencies for Rowboat Project\nDESCRIPTION: This snippet lists the Python libraries and their exact versions required to run the `/rowboatlabs/rowboat` project. This format is standard for `requirements.txt` files and is used by `pip` to install dependencies, ensuring environment consistency. Key dependencies include Flask (web framework), PyJWT (JSON Web Tokens), and pytest (testing framework).\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/apps/experimental/tools_webhook/requirements.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nblinker==1.9.0\nclick==8.1.8\nFlask==3.1.0\niniconfig==2.0.0\nitsdangerous==2.2.0\nJinja2==3.1.5\nMarkupSafe==3.0.2\npackaging==24.2\npluggy==1.5.0\nPyJWT==2.10.1\npytest==8.3.4\nWerkzeug==3.1.3\n```\n\n----------------------------------------\n\nTITLE: Sending a POST Request to the /chat API Endpoint (Bash/cURL)\nDESCRIPTION: This cURL command provides an example of how to send a POST request to the application's `/chat` endpoint. It includes setting the `Content-Type` header to `application/json`, providing an `Authorization` bearer token (using the previously set `API_KEY`), and sending a JSON payload containing user messages, workflow schema, and current workflow configuration.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/apps/copilot/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://localhost:3002/chat \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer test-api-key\" \\\n  -d '{\n    \"messages\": [\n      {\n        \"role\": \"user\",\n        \"content\": \"Your message here\"\n      }\n    ],\n    \"workflow_schema\": \"Your workflow schema here\",\n    \"current_workflow_config\": \"Your current workflow configuration here\"\n  }'\n```\n\n----------------------------------------\n\nTITLE: Sending Subsequent Chat Message using cURL (Bash)\nDESCRIPTION: Demonstrates a cURL command for sending a subsequent message in an ongoing conversation. Crucially, it includes the *entire* previous conversation history in the `messages` array and passes the `state` object received from the immediately preceding API response. Requires replacing `<HOST>`, `<PROJECT_ID>`, and `<API_KEY>` placeholders.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/apps/docs/docs/using_the_api.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location '<HOST>/api/v1/<PROJECT_ID>/chat' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer <API_KEY>' \\\n--data '{\n    \"messages\": [\n        {\n            \"role\": \"user\",\n            \"content\": \"Hello, can you help me?\"\n        },\n        {\n            \"role\": \"assistant\",\n            \"content\": \"Hello! Yes, I'd be happy to help you. What can I assist you with today?\",\n            \"agenticResponseType\": \"external\"\n        },\n        {\n            \"role\": \"user\",\n            \"content\": \"What services do you offer?\"\n        }\n    ],\n    \"state\": {\n        \"last_agent_name\": \"MainAgent\"\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Interacting with Rowboat Chat API via cURL (Bash)\nDESCRIPTION: This cURL command demonstrates how to send a chat message to a specific Rowboat project's API endpoint. It requires replacing `<PROJECT_ID>` and `<API_KEY>` with actual values obtained from the Rowboat settings. The request sends a user message in JSON format and expects a response from the agent.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'http://localhost:3000/api/v1/<PROJECT_ID>/chat' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer <API_KEY>' \\\n--data '{\n    \"messages\": [\n        {\n            \"role\": \"user\",\n            \"content\": \"tell me the weather in london in metric units\"\n        }\n    ],\n    \"state\": null\n}'\n```\n\n----------------------------------------\n\nTITLE: Cloning and Running Rowboat with Docker Compose (Bash)\nDESCRIPTION: These commands clone the Rowboat project repository from GitHub, navigate into the project directory, and then build and start the necessary services using Docker Compose. This is the standard procedure for setting up and running the Rowboat application locally.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:rowboatlabs/rowboat.git\ncd rowboat\ndocker-compose up --build\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for MkDocs Material - Bash\nDESCRIPTION: This bash snippet installs all required Python dependencies for the MkDocs Material documentation site using pip. It requires Python 3.x and pip to be installed on the system. The command expects a 'requirements.txt' file in the project directory listing all necessary packages, and will download and install them accordingly. Successful execution prepares the environment for further development with MkDocs.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/apps/docs/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Running Local MkDocs Development Server - Bash\nDESCRIPTION: This bash command starts a local development server for the MkDocs documentation site. It allows users to preview and live-edit their documentation at http://localhost:8000. The snippet assumes that MkDocs and all dependencies have been installed, and must be run from the project directory containing the MkDocs configuration. No additional parameters are required.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/apps/docs/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdocs serve\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies using npm (Bash)\nDESCRIPTION: This command uses the Node Package Manager (npm) to install all the project dependencies defined in the `package.json` file. It should be executed in the root directory of the Next.js project after cloning or downloading the source code.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/apps/rowboat/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nnpm install\n```\n```\n\n----------------------------------------\n\nTITLE: Specifying a Workflow ID in StatefulChat (Python)\nDESCRIPTION: Illustrates how to initialize a `StatefulChat` instance to use a specific workflow configuration defined in RowBoat Studio. The `workflow_id` parameter is passed during the `StatefulChat` instantiation, directing the conversation to follow the logic of that particular workflow.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/apps/docs/docs/using_the_sdk.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nchat = StatefulChat(\n    client,\n    workflow_id=\"<WORKFLOW_ID>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing StatefulChat with a Specific Test Profile ID (Python)\nDESCRIPTION: Illustrates initializing `StatefulChat` with a specific test profile. Passing the `test_profile_id` ensures the chat session uses the parameters and settings defined in that test profile, useful for testing different configurations or scenarios.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/apps/python-sdk/README.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nchat = StatefulChat(\n    client,\n    test_profile_id=\"<TEST_PROFILE_ID>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Building MkDocs Static Site - Bash\nDESCRIPTION: This bash command triggers MkDocs to build static files for the documentation site into the 'site' directory. It assumes that all documentation source files are in place and MkDocs is properly configured via 'mkdocs.yml'. The result is a fully static version of the site suitable for deployment. All previously generated contents in the output directory may be overwritten.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/apps/docs/readme.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmkdocs build\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server using npm (Bash)\nDESCRIPTION: This command executes the 'dev' script specified in the project's `package.json` file, which typically starts the Next.js development server. This allows developers to view the application locally (usually at http://localhost:3000) with features like hot module replacement. Dependencies must be installed using `npm install` before running this command.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/apps/rowboat/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nnpm run dev\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies (Bash)\nDESCRIPTION: This command uses pip, the Python package installer, to install all the dependencies listed in the `requirements.txt` file into the currently active virtual environment. This step is crucial after setting up the environment.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/apps/copilot/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for API Keys (Bash)\nDESCRIPTION: These commands demonstrate how to set the required `OPENAI_API_KEY` and a shared `API_KEY` for the application as environment variables using the `export` command (for Unix-like systems) or `set` (for Windows). These keys are necessary for authenticating with the OpenAI service and the application's own API.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/apps/copilot/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY='your-api-key-here'  # On Windows, use: set OPENAI_API_KEY=your-api-key-here\nexport API_KEY='test-api-key' # set a shared API key for the application\n```\n\n----------------------------------------\n\nTITLE: Running the Flask Application Server (Bash)\nDESCRIPTION: This command executes the main application script `app.py` using the Python interpreter. This starts the Flask development server, making the AI Workflow Copilot application accessible, typically at `http://localhost:3002`.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/apps/copilot/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython app.py\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response from the /chat API Endpoint (JSON)\nDESCRIPTION: This snippet shows the expected JSON structure of a successful response from the `/chat` API endpoint. It contains a single key, `response`, whose value is the string generated by the assistant based on the request.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/apps/copilot/README.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"response\": \"Assistant's response here\"\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying API Key Authentication Header\nDESCRIPTION: Defines the required `Authorization` HTTP header for authenticating API requests. The header value must follow the Bearer token scheme, using the API key generated via the project's developer configs.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/apps/docs/docs/using_the_api.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nAuthorization: Bearer <API_KEY>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Conda Environment for RowBoat Agents - Shell\nDESCRIPTION: These commands initialize and activate a new Conda environment with Python 3.12, as required by the RowBoat Agents framework. Python 3.10 or higher is necessary for full functionality. Executing these commands in a terminal ensures the correct environment is available for installing further dependencies and running the framework.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/apps/rowboat_agents/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nconda create -n myenv python=3.12\nconda activate myenv\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Poetry - Shell\nDESCRIPTION: These commands install the Poetry tool and package all Python dependencies as declared in the project configuration. Poetry is an alternative package manager to pip and is recommended for streamlined dependency and environment management within Python projects. Run these in your activated Conda environment.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/apps/rowboat_agents/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install poetry\npoetry install\n```\n\n----------------------------------------\n\nTITLE: Creating the 2FA Change Support Agent - Copilot Configuration - JSON\nDESCRIPTION: Defines a conversational agent named '2FA Change' whose core role is to help users change their existing 2FA method. The configuration connects to the 'get_current_2fa_method' tool to verify the user's current method before confirming and changing their 2FA method. Includes instructions, scope definition, usage examples, and conversation guidelines. Requires the user to confirm, and does not support general or unrelated queries.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/apps/copilot/example_multi_agent_1.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n// action: create_new\\n// config_type: agent\\n// name: 2FA Change\\n{\\n  \\\"change_description\\\": \\\"Created an agent to help users change their 2FA methods, with additional tool integration for better functionality.\\\",\\n  \\\"config_changes\\\": {\\n    \\\"name\\\": \\\"2FA Change\\\",\\n    \\\"type\\\": \\\"conversation\\\",\\n    \\\"description\\\": \\\"Agent to assist users in changing their 2FA method.\\\",\\n    \\\"instructions\\\": \\\"## 🧑‍💼 Role:\\\\nAssist users in changing their 2FA method preferences.\\\\n\\\\n---\\\\n## ⚙️ Steps to Follow:\\\\n1. Fetch the current 2FA method using the [@tool:get_current_2fa_method](#mention) tool.\\\\n2. Confirm with the user if they want to change the method.\\\\n3. Guide them through the process of changing the method.\\\\n4. If the user request is out of scope, call [@agent:2FA Hub](#mention)\\\\n\\\\n---\\\\n## 🎯 Scope:\\\\n✅ In Scope:\\\\n- Changing existing 2FA settings\\\\n\\\\n❌ Out of Scope:\\\\n- Initial setup of 2FA\\\\n- Handling queries outside 2FA setup.\\\\n- General knowledge queries.\\\\n\\\\n---\\\\n## 📋 Guidelines:\\\\n✔️ Dos:\\\\n- Ensure the user is aware of the current method before change.\\\\n\\\\n🚫 Don'ts:\\\\n- Change methods without explicit user confirmation.\\\\n- Extend the conversation beyond 2FA change.\\\",\\n    \\\"examples\\\": \\\"- **User** : I want to change my 2FA method from SMS to Email.\\\\n - **Agent response**: I can help with that. Let me fetch your current 2FA setting first.\\\\n - **Agent actions**: Call [@tool:get_current_2fa_method](#mention)\\\\n\\\\n- **User** : Can I switch to using an Authenticator App instead of Email?\\\\n - **Agent response**: Sure, I'll guide you through switching to an Authenticator App.\\\\n - **Agent actions**: Call [@tool:get_current_2fa_method](#mention)\\\\n\\\\n- **User** : I don't want to use 2FA via phone anymore, can you change it?\\\\n - **Agent response**: Let's check your current method and proceed with the change.\\\\n - **Agent actions**: Call [@tool:get_current_2fa_method](#mention)\\\\n\\\\n- **User** : I'd like to update my 2FA to be more secure, what do you suggest?\\\\n - **Agent response**: For enhanced security, consider using an Authenticator App. Let's fetch your current method and update it.\\\\n - **Agent actions**: Call [@tool:get_current_2fa_method](#mention)\\\\n\\\\n- **User** : I'm having trouble changing my 2FA method, can you assist?\\\\n - **Agent response**: Certainly, let's see what your current setup is and I'll walk you through the change.\\\",\\n    \\\"model\\\": \\\"gpt-4o\\\",\\n    \\\"toggleAble\\\": true\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Pip - Shell\nDESCRIPTION: This command uses pip to install required Python dependencies specified in the project's requirements.txt file. It serves as an alternative to using Poetry and must be run in the appropriately activated Python environment. Ensures all libraries and tools required by RowBoat Agents are installed.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/apps/rowboat_agents/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Running RowBoat Agents Server on Remote Machine via Gunicorn - Shell\nDESCRIPTION: This command starts the RowBoat Agents server on port 4040 using Gunicorn, a production-ready WSGI server. The server binds to all network interfaces (0.0.0.0), enabling remote access. 'src.app.main:app' specifies the Flask app entry point. Used for deploying the framework in production or remote environments.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/apps/rowboat_agents/README.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngunicorn -b 0.0.0.0:4040 src.app.main:app\n```\n\n----------------------------------------\n\nTITLE: Running the RowBoat Agents Interactive Test - Python\nDESCRIPTION: This command runs an interactive test client using the Python module system. It loads a workflow configuration and a sample request file, optionally preloading initial messages. The script is used for validating workflows and for development, requiring valid config and sample request JSON located in the specified folders. Parameters:\n--config: Name of config file in 'configs'\n--sample_request: Path to input sample request\n--load_messages: If set, loads messages from the request file\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/apps/rowboat_agents/README.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\npython -m tests.interactive --config default_config.json --sample_request default_example.json --load_messages\n```\n\n----------------------------------------\n\nTITLE: Running the RowBoat Agents Test Client Against API - Python\nDESCRIPTION: This Python command executes the test client, simulating an upstream service making API calls to the RowBoat server. It takes a sample request file and an API key for authentication. Useful for end-to-end testing of the server as deployed. The API key should match what is set in the .env configuration.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/apps/rowboat_agents/README.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\npython -m tests.app_client --sample_request default_example.json --api_key test\n```\n\n----------------------------------------\n\nTITLE: Installing the RowBoat Python SDK - Python - Bash\nDESCRIPTION: This snippet shows how to install the RowBoat Python SDK using pip, a Python package management tool. The rowboat package is required for integrating Python apps with RowBoat services. Run this command in your command terminal before using the Python Chat Client.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/apps/docs/docs/hosted_setup.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install rowboat\n```\n\n----------------------------------------\n\nTITLE: Using a Test Profile ID in StatefulChat (Python)\nDESCRIPTION: Shows how to configure a `StatefulChat` instance to use a specific test profile by passing the `test_profile_id` parameter during initialization. This allows running the conversation using configurations or parameters defined within that test profile in RowBoat Studio.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/apps/docs/docs/using_the_sdk.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nchat = StatefulChat(\n    client,\n    test_profile_id=\"<TEST_PROFILE_ID>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Installing the RowBoat Python SDK using Pip\nDESCRIPTION: Installs the RowBoat Python SDK package using the pip package installer. This command needs to be run in a shell or terminal environment as a prerequisite before using the SDK in Python code.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/apps/docs/docs/using_the_sdk.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install rowboat\n```\n\n----------------------------------------\n\nTITLE: Creating the 2FA Troubleshooting Support Agent - Copilot Configuration - JSON\nDESCRIPTION: Implements an agent focused on troubleshooting cases where users are not receiving 2FA codes. The agent's configuration guides it to verify user contact details, inquire about specific delivery issues, offer troubleshooting steps, and escalate when necessary. The support is strictly for troubleshooting and does not include setup or changing of 2FA methods.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/apps/copilot/example_multi_agent_1.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n// action: create_new\\n// config_type: agent\\n// name: 2FA Troubleshooting\\n{\\n  \\\"change_description\\\": \\\"Created an agent to troubleshoot problems with receiving 2FA codes, with added verification prompts.\\\",\\n  \\\"config_changes\\\": {\\n    \\\"name\\\": \\\"2FA Troubleshooting\\\",\\n    \\\"type\\\": \\\"conversation\\\",\\n    \\\"description\\\": \\\"Agent to troubleshoot issues related to not receiving 2FA codes.\\\",\\n    \\\"instructions\\\": \\\"## 🧑‍💼 Role:\\\\nTroubleshoot and resolve issues with 2FA codes.\\\\n\\\\n---\\\\n## ⚙️ Steps to Follow:\\\\n1. Confirm the contact details for 2FA are correct.\\\\n2. Ask about the issue specifics (e.g., not receiving codes at all, delayed codes).\\\\n3. Provide troubleshooting steps or escalate if unresolved.\\\\n4. If the user request is out of scope, call [@agent:2FA Hub](#mention)\\\\n\\\\n---\\\\n## 🎯 Scope:\\\\n✅ In Scope:\\\\n- Troubleshooting issues with receiving 2FA codes\\\\n\\\\n❌ Out of Scope:\\\\n- Setting up or changing 2FA methods\\\\n- Handling queries outside 2FA Troubleshooting.\\\\n- General knowledge queries.\\\\n\\\\n---\\\\n## 📋 Guidelines:\\\\n✔️ Dos:\\\\n- Verify contact information for accuracy.\\\\n\\\\n🚫 Don'ts:\\\\n- Extend the conversation beyond 2FA change.\\\",\\n    \\\"examples\\\": \\\"- **User** : I haven't received my 2FA code.\\\\n - **Agent response**: Let's ensure your contact details are correct. Could you verify if the phone number or email you are expecting the code on is correct?\\\\n\\\\n- **User** : My 2FA codes are always delayed.\\\\n - **Agent response**: I apologize for the inconvenience. Have you checked your spam or junk folder in case of email, or experienced network issues if it's through SMS?\\\\n\\\\n- **User** : The codes aren't coming to my phone.\\\\n - **Agent response**: Let's confirm the number on file for you. Could you also check if your phone's SMS settings might be blocking incoming messages?\\\\n\\\\n- **User** : I'm facing issues with receiving 2FA codes via email.\\\\n - **Agent response**: Please double-check the email address on record and ensure the codes aren't found in spam or trash. I can assist further if needed.\\\\n\\\\n- **User** : My codes are coming to the wrong email address.\\\\n - **Agent response**: I recommend updating your 2FA contact information. Would you like assistance with how to change your email for 2FA notifications?\\\",\\n    \\\"model\\\": \\\"gpt-4o\\\",\\n    \\\"toggleAble\\\": true\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Setting PYTHONPATH for RowBoat Agents - Shell\nDESCRIPTION: This command appends the current directory to the PYTHONPATH environmental variable, ensuring Python modules in this directory are properly discoverable during server startup. Required for both local development and server deployment. Run this command from the 'apps/agents' directory.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/apps/rowboat_agents/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nexport PYTHONPATH=$PYTHONPATH:$(pwd)\n```\n\n----------------------------------------\n\nTITLE: Formatting Agent Interaction Examples in Markdown\nDESCRIPTION: Defines the Markdown-based format for documenting example user-agent interactions within an agent's configuration, specifically in the 'example' field. It specifies fields for user input, agent actions (including syntax for calling other agents like 'Call [@agent:<agent_name>](#mention)' or tools like 'Call [@tool:tool_name_1](#mention)'), and agent responses. The format guides the creation of training or testing data, detailing how to handle actions involving agent/tool calls and response placeholders. By default, 5 examples should be added.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/apps/copilot/copilot_multi_agent.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\n  - **User** : <user's message>\n  - **Agent actions**: <actions like if applicable>\n  - **Agent response**: \"<response to the user if applicable>\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Agent Configuration Structure using Markdown\nDESCRIPTION: Presents a mandatory template using Markdown to structure the configuration for a new agent. It includes standard sections: 'Role' (agent's responsibility), 'Steps to Follow' (operational procedures, including tool/agent calls like '[@tool:get_shipping_details](#mention)' or '[@agent:Delivery Hub](#mention)'), 'Scope' (defining in-scope and out-of-scope tasks), and 'Guidelines' (dos and don'ts). This structure ensures consistency and completeness when creating new agents, with GPT-4o suggested as the default model.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/apps/copilot/copilot_multi_agent.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```\n## 🧑‍💼 Role:\n\nYou are responsible for providing delivery information to the user.\n\n---\n\n## ⚙️ Steps to Follow:\n\n1. Fetch the delivery details using the function: [@tool:get_shipping_details](#mention).\n2. Answer the user's question based on the fetched delivery details.\n3. If the user's issue concerns refunds or other topics beyond delivery, politely inform them that the information is not available within this chat and express regret for the inconvenience.\n4. If the user's request is out of scope, call [@agent:Delivery Hub](#mention)\n\n---\n## 🎯 Scope:\n\n✅ In Scope:\n- Questions about delivery status, shipping timelines, and delivery processes.\n- Generic delivery/shipping-related questions where answers can be sourced from articles.\n\n❌ Out of Scope:\n- Questions unrelated to delivery or shipping.\n- Questions about products features, returns, subscriptions, or promotions.\n- If a question is out of scope, politely inform the user and avoid providing an answer.\n\n---\n\n## 📋 Guidelines:\n\n✔️ Dos:\n- Use [@tool:get_shipping_details](#mention) to fetch accurate delivery information.\n- Provide complete and clear answers based on the delivery details.\n- For generic delivery questions, refer to relevant articles if necessary.\n- Stick to factual information when answering.\n\n🚫 Don'ts:\n- Do not provide answers without fetching delivery details when required.\n- Do not leave the user with partial information. Refrain from phrases like 'please contact support'; instead, relay information limitations gracefully.\n'''\n```\n\n----------------------------------------\n\nTITLE: Running RowBoat Agents Server Locally via Flask - Shell\nDESCRIPTION: This command launches the Flask development server for RowBoat Agents, binding to port 4040. Useful for local testing and debugging; not recommended for production. The server exposes REST endpoints for multi-agent conversation workflows.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/apps/rowboat_agents/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nflask --app src.app.main run --port=4040\n```\n\n----------------------------------------\n\nTITLE: Providing Example Agent Instructions - Markdown\nDESCRIPTION: This snippet presents a comprehensive example of agent instructions in markdown format, specifying the agent's role, steps to follow, scope (in-scope/out-of-scope questions), and explicit guidelines using checklists and formatting. It serves as a strict template when generating new agents. The snippet requires understanding of markdown syntax and assumes integration with the Rowboat platform's tool mention syntax. Expected input is a request for agent creation; output is well-structured agent instructions. The format is prescriptive and not directly executable as code.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/apps/copilot/copilot_edit_agent.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 🧑‍💼 Role:\n\nYou are responsible for providing delivery information to the user.\n\n---\n\n## ⚙️ Steps to Follow:\n\n1. Fetch the delivery details using the function: [@tool:get_shipping_details](#mention).\n2. Answer the user's question based on the fetched delivery details.\n3. If the user's issue concerns refunds or other topics beyond delivery, politely inform them that the information is not available within this chat and express regret for the inconvenience.\n\n---\n## 🎯 Scope:\n\n✅ In Scope:\n- Questions about delivery status, shipping timelines, and delivery processes.\n- Generic delivery/shipping-related questions where answers can be sourced from articles.\n\n❌ Out of Scope:\n- Questions unrelated to delivery or shipping.\n- Questions about products features, returns, subscriptions, or promotions.\n- If a question is out of scope, politely inform the user and avoid providing an answer.\n\n---\n\n## 📋 Guidelines:\n\n✔️ Dos:\n- Use [@tool:get_shipping_details](#mention) to fetch accurate delivery information.\n- Provide complete and clear answers based on the delivery details.\n- For generic delivery questions, refer to relevant articles if necessary.\n- Stick to factual information when answering.\n\n🚫 Don'ts:\n- Do not provide answers without fetching delivery details when required.\n- Do not leave the user with partial information. Refrain from phrases like 'please contact support'; instead, relay information limitations gracefully.\n```\n\n----------------------------------------\n\nTITLE: Outputting Edited Agent Instructions in JSON - JSON\nDESCRIPTION: This snippet defines the required JSON output format for edited or newly created agent instructions, with the instructions nested inside the 'agent_instructions' property. It is intended to be rendered by a backend system or automation, expecting the markdown-formatted agent instructions as a single escaped string. No external dependencies are required other than a JSON parser. The expected input is the result of an edit or creation operation; the output is the compliant JSON structure.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/apps/copilot/copilot_edit_agent.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"agent_instructions\": \"<new agent instructions with relevant changes>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Interacting with RowBoat Chat API via the Python SDK - Python - Python\nDESCRIPTION: This Python snippet demonstrates initializing the RowBoat SDK's Client, authenticating with host, project ID, and API key parameters, and sending messages using the chat API endpoint. It defines a list of messages for conversation history, calls client.chat to exchange messages, and receives response_messages and state as output, matching the API's structure. Make sure to install the rowboat dependency via pip, and substitute <PROJECT_ID> and <API_KEY> with actual credentials. Inputs are messages as a list of role-content dicts; outputs include API-supplied messages and internal state.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/apps/docs/docs/hosted_setup.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom rowboat import Client\n\nclient = Client(\n    host=\"http://localhost:3000\",\n    project_id=\"<PROJECT_ID>\",\n    api_key=\"<API_KEY>\"  # Generate this from /projects/<PROJECT_ID>/config\n)\n\n# Simple chat interaction\nmessages = [{\"role\": \"user\", \"content\": \"What is my pending payment amount?\"}]\nresponse_messages, state = client.chat(messages=messages)\n```\n\n----------------------------------------\n\nTITLE: Editing an Agent 'Example agent' using copilot_change\nDESCRIPTION: This snippet defines a configuration change to edit an existing agent named 'Example agent'. It uses comments to specify metadata: the action is 'edit', the configuration type is 'agent', and the name is 'Example agent'. The body includes a JSON-like structure detailing the update description and placeholder configuration changes.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/apps/rowboat/app/projects/[projectId]/copilot/example.md#_snippet_1\n\nLANGUAGE: copilot_change\nCODE:\n```\n// action: edit\n// config_type: agent\n// name: Example agent\n{\n\t\"change_description\": \"updated the instructions...\",\n\t\"config_changes\": {\n\t\t// same as before\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating the get_current_2fa_method Tool - Copilot Configuration - JSON\nDESCRIPTION: Defines a configuration change for creating the get_current_2fa_method tool, which is used to fetch a user's current 2FA method. This tool takes a unique user_id as input parameter, and is intended to assist the 2FA Change agent in verifying existing user configuration before modifications. Requires integration with user account backend or a simulated/mock response. The output is the user's current 2FA method for the banking app; limitations include requiring a valid user_id and no actual implementation logic within this config.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/apps/copilot/example_multi_agent_1.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n// action: create_new\\n// config_type: tool\\n// name: get_current_2fa_method\\n{\\n  \\\"change_description\\\": \\\"Created a tool to fetch the current 2FA method to assist in changing 2FA settings, with detailed parameters.\\\",\\n  \\\"config_changes\\\": {\\n    \\\"name\\\": \\\"get_current_2fa_method\\\",\\n    \\\"description\\\": \\\"Tool to fetch the user's current 2FA method.\\\",\\n    \\\"mockInstructions\\\": \\\"Return a random 2FA method for a banking app.\\\",\\n    \\\"parameters\\\": {\\n      \\\"type\\\": \\\"object\\\",\\n      \\\"properties\\\": {\\n        \\\"user_id\\\": {\\n          \\\"type\\\": \\\"string\\\",\\n          \\\"description\\\": \\\"The unique identifier for the user whose 2FA method is being queried.\\\"\\n        }\\n      },\\n      \\\"required\\\": [\\n        \\\"user_id\\\"\\n      ]\\n    }\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Activating Python Virtual Environment (Bash)\nDESCRIPTION: This snippet shows the bash commands to create a Python virtual environment named 'venv' and activate it. This isolates project dependencies. The activation command differs between Unix-like systems (`source`) and Windows (`venv\\Scripts\\activate`).\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/apps/copilot/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m venv venv\nsource venv/bin/activate  # On Windows, use: venv\\Scripts\\activate\n```\n\n----------------------------------------\n\nTITLE: Creating the 2FA Setup Support Agent - Copilot Configuration - JSON\nDESCRIPTION: Specifies a new conversational agent named '2FA Setup' designed for guiding users through the process of setting up their preferred 2FA method. The agent includes detailed instructions, usage examples, enabled model, and guidelines for scope and do's/don'ts. Dependency is the agent configuration infrastructure, with toggleable functionality. Inputs are user queries; outputs are guided setup interactions. Not intended for changing existing settings or other unrelated support flows.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/apps/copilot/example_multi_agent_1.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n// action: create_new\\n// config_type: agent\\n// name: 2FA Setup\\n{\\n  \\\"change_description\\\": \\\"Created an agent to guide users in setting up their 2FA method, with added prompts for user interaction.\\\",\\n  \\\"config_changes\\\": {\\n    \\\"name\\\": \\\"2FA Setup\\\",\\n    \\\"type\\\": \\\"conversation\\\",\\n    \\\"description\\\": \\\"Agent to guide users in setting up 2FA.\\\",\\n    \\\"instructions\\\": \\\"## 🧑‍💼 Role:\\\\nHelp users set up their 2FA preferences.\\\\n\\\\n---\\\\n## ⚙️ Steps to Follow:\\\\n1. Ask the user about their preferred 2FA method (e.g., SMS, Email).\\\\n2. Confirm the setup method with the user.\\\\n3. Guide them through the setup steps.\\\\n4. If the user request is out of scope, call [@agent:2FA Hub](#mention)\\\\n\\\\n---\\\\n## 🎯 Scope:\\\\n✅ In Scope:\\\\n- Setting up 2FA preferences\\\\n\\\\n❌ Out of Scope:\\\\n- Changing existing 2FA settings\\\\n- Handling queries outside 2FA setup.\\\\n- General knowledge queries.\\\\n\\\\n---\\\\n## 📋 Guidelines:\\\\n✔️ Dos:\\\\n- Clearly explain setup options and steps.\\\\n\\\\n🚫 Don'ts:\\\\n- Assume preferences without user confirmation.\\\\n- Extend the conversation beyond 2FA setup.\\\",\\n    \\\"examples\\\": \\\"- **User** : I'd like to set up 2FA for my account.\\\\n - **Agent response**: Sure, can you tell me your preferred method for 2FA? Options include SMS, Email, or an Authenticator App.\\\\n\\\\n- **User** : I want to use SMS for 2FA.\\\\n - **Agent response**: Great, I'll guide you through the steps to set up 2FA via SMS.\\\\n\\\\n- **User** : How about using an Authenticator App?\\\\n - **Agent response**: Sure, let's set up 2FA with an Authenticator App. I'll walk you through the necessary steps.\\\\n\\\\n- **User** : Can you help me set up 2FA through Email?\\\\n - **Agent response**: No problem, I'll explain how to set up 2FA via Email now.\\\\n\\\\n- **User** : I changed my mind, can we start over?\\\\n - **Agent response**: Of course, let's begin again. Please select your preferred 2FA method from SMS, Email, or Authenticator App.\\\",\\n    \\\"model\\\": \\\"gpt-4o\\\",\\n    \\\"toggleAble\\\": true\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Editing the Example Agent to Create the 2FA Hub Routing Agent - Copilot Configuration - JSON\nDESCRIPTION: Modifies the Example Agent's configuration to serve as a central hub, called '2FA Hub', which classifies and routes all incoming 2FA-related customer queries to the appropriate specialized agents (Setup, Change, Troubleshooting). It provides clear instructions, scope, guidelines, and fallback escalation. Prerequisite is that all specific agents are implemented and available for mention/routing. Limits interactions to categorizing and routing without detailed troubleshooting.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/apps/copilot/example_multi_agent_1.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n// action: edit\\n// config_type: agent\\n// name: Example Agent\\n{\\n  \\\"change_description\\\": \\\"Created a hub agent for 2FA-related queries to manage directing queries to specific agents, with updated fallback actions and clarifying instructions.\\\",\\n  \\\"config_changes\\\": {\\n    \\\"name\\\": \\\"2FA Hub\\\",\\n    \\\"description\\\": \\\"Hub agent to manage 2FA-related queries.\\\",\\n    \\\"instructions\\\": \\\"## 🧑‍💼 Role:\\\\nYou are responsible for directing 2FA-related queries to appropriate agents.\\\\n\\\\n---\\\\n## ⚙️ Steps to Follow:\\\\n1. Greet the user and ask which 2FA-related query they need help with (e.g., 'Are you setting up, changing, or troubleshooting your 2FA?').\\\\n2. If the query matches a specific task, direct the user to the corresponding agent:\\\\n   - Setup → [@agent:2FA Setup](#mention)\\\\n   - Change → [@agent:2FA Change](#mention)\\\\n   - Troubleshooting → [@agent:2FA Troubleshooting](#mention)\\\\n3. If the query doesn't match any specific task, respond with 'I'm sorry, I didn't understand. Could you clarify your request?' or escalate to human support.\\\\n\\\\n---\\\\n## 🎯 Scope:\\\\n✅ In Scope:\\\\n- Initialization of 2FA setup\\\\n- Changing 2FA methods\\\\n- Troubleshooting 2FA issues\\\\n\\\\n❌ Out of Scope:\\\\n- Issues unrelated to 2FA\\\\n- General knowledge queries\\\\n\\\\n---\\\\n## 📋 Guidelines:\\\\n✔️ Dos:\\\\n- Direct queries to specific 2FA agents promptly.\\\\n\\\\n🚫 Don'ts:\\\\n- Engage in detailed support.\\\\n- Extend the conversation beyond 2FA.\\\\n- Provide user-facing text such as 'I will connect you now...' when calling another agent\\\"\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server with Various Package Managers - Bash\nDESCRIPTION: These bash commands demonstrate how to start the Next.js development server using four different package managers: npm, yarn, pnpm, and bun. Each command runs the application in development mode, enabling live-reload functionality and automatic page updates when files are modified. Ensure that the respective package manager is installed and that project dependencies are already installed via the chosen tool. The server will be available at http://localhost:3000 by default if started successfully. Limitations include requiring the correct Node.js environment and up-to-date dependencies.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/apps/experimental/chat_widget/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Creating a New Tool 'get_status' using copilot_change\nDESCRIPTION: This snippet defines a configuration change to create a new tool named 'get_status'. It uses comments to specify metadata: the action is 'create_new', the configuration type is 'tool', and the name is 'get_status'. The body contains a JSON-like structure with a description of the change and placeholder configuration details.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/apps/rowboat/app/projects/[projectId]/copilot/example.md#_snippet_0\n\nLANGUAGE: copilot_change\nCODE:\n```\n// action: create_new\n// config_type: tool\n// name: get_status\n{\n\t\"change_description\": \"added a new tool...\",\n\t\"config_changes\": {\n\t\t// same as before\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies for Rowboat Project\nDESCRIPTION: This snippet lists the exact versions of Python libraries required for the Rowboat project, ensuring environment consistency. It includes dependencies for asynchronous operations (e.g., aiohttp, anyio), web frameworks (Flask), data validation (pydantic), database interaction (pymongo), communication APIs (twilio, elevenlabs), and various other utilities. Pinning versions helps maintain reproducibility and prevent issues from upstream package changes. This format is standard for Python's `requirements.txt` files.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/apps/experimental/twilio_handler/requirements.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\naiohappyeyeballs==2.5.0\naiohttp==3.11.13\naiohttp-retry==2.9.1\naiosignal==1.3.2\nannotated-types==0.7.0\nanyio==4.8.0\nattrs==25.1.0\nblinker==1.9.0\ncertifi==2025.1.31\ncharset-normalizer==3.4.1\nclick==8.1.8\ndnspython==2.7.0\ndotenv==0.9.9\nelevenlabs==1.52.0\nFlask==3.1.0\nfrozenlist==1.5.0\nh11==0.14.0\nhttpcore==1.0.7\nhttpx==0.28.1\nidna==3.10\nitsdangerous==2.2.0\nJinja2==3.1.6\nMarkupSafe==3.0.2\nmultidict==6.1.0\npropcache==0.3.0\npydantic==2.10.6\npydantic_core==2.27.2\nPyJWT==2.10.1\npymongo==4.11.2\npython-dotenv==1.0.1\nrequests==2.32.3\nrowboat==2.1.0\nsniffio==1.3.1\ntwilio==9.4.6\ntyping_extensions==4.12.2\nurllib3==2.3.0\nwebsockets==15.0.1\nWerkzeug==3.1.3\nyarl==1.18.3\n```\n\n----------------------------------------\n\nTITLE: Representing Multi-Agent Workflow with JSON Schema Placeholder\nDESCRIPTION: This placeholder represents the JSON schema defining the structure and state of the multi-agent workflow. According to the surrounding text, if the main agent within this schema is named 'Example Agent', it signifies an initial state requiring the system to be planned and created based on the user's first request. The actual schema structure is not provided here, only indicated by the placeholder.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/apps/copilot/current_workflow.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\nworkflow_schema\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Python Project Dependencies (requirements.txt)\nDESCRIPTION: A standard requirements.txt file listing Python packages and their specific versions needed for the Rowboat project. Includes web frameworks (Flask, Gunicorn), HTTP clients (httpx), data validation (Pydantic), OpenAI SDK, and utility libraries. Use 'pip install -r <filename>' to install these dependencies.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/apps/copilot/requirements.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nannotated-types==0.7.0\nanyio==4.7.0\nblinker==1.9.0\ncertifi==2024.8.30\nclick==8.1.7\ndistro==1.9.0\nFlask==3.1.0\ngunicorn==23.0.0\nh11==0.14.0\nhttpcore==1.0.7\nhttpx==0.28.0\nidna==3.10\nitsdangerous==2.2.0\nJinja2==3.1.4\njiter==0.8.0\nMarkupSafe==3.0.2\nopenai==1.61.0\npackaging==24.2\npydantic==2.10.3\npydantic_core==2.27.1\nsniffio==1.3.1\ntqdm==4.67.1\ntyping_extensions==4.12.2\nWerkzeug==3.1.3\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Dependencies using requirements.txt format\nDESCRIPTION: This snippet defines the required Python packages and their specific versions for the project. Each line follows the `package_name==version_number` format, commonly used in `requirements.txt` files. This allows package managers like `pip` to install the exact dependencies needed to run the project, ensuring environment consistency.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/apps/rowboat_agents/requirements.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\naiofiles==24.1.0\naiohappyeyeballs==2.6.1\naiohttp==3.11.14\naiosignal==1.3.2\nannotated-types==0.7.0\nanyio==4.8.0\nasgiref==3.8.1\nattrs==25.3.0\nbeautifulsoup4==4.12.3\nblinker==1.9.0\nbuild==1.2.2.post1\nCacheControl==0.14.2\ncertifi==2024.12.14\ncffi==1.17.1\ncharset-normalizer==3.4.1\ncleo==2.1.0\nclick==8.1.8\ncolorama==0.4.6\ncrashtest==0.4.1\ndistlib==0.3.9\ndistro==1.9.0\ndnspython==2.7.0\ndulwich==0.22.8\net_xmlfile==2.0.0\neval_type_backport==0.2.2\nfastjsonschema==2.21.1\nfilelock==3.18.0\nfindpython==0.6.3\nfirecrawl==1.9.0\nFlask==3.1.0\nfrozenlist==1.5.0\ngriffe==1.6.2\ngrpcio==1.71.0\ngrpcio-tools==1.71.0\ngunicorn==23.0.0\nh11==0.14.0\nh2==4.2.0\nhpack==4.1.0\nhttpcore==1.0.7\nhttpx==0.27.2\nhttpx-sse==0.4.0\nHypercorn==0.17.3\nhyperframe==6.1.0\nidna==3.10\ninstaller==0.7.0\nitsdangerous==2.2.0\njaraco.classes==3.4.0\njaraco.context==6.0.1\njaraco.functools==4.1.0\nJinja2==3.1.5\njiter==0.6.1\njsonpath-python==1.0.6\nkeyring==25.6.0\nlxml==5.3.0\nmarkdownify==0.13.1\nMarkupSafe==3.0.2\nmcp==1.5.0\nmore-itertools==10.6.0\nmotor==3.7.0\nmsgpack==1.1.0\nmultidict==6.2.0\nmypy-extensions==1.0.0\nnest-asyncio==1.6.0\nnumpy==2.2.1\nopenai==1.68.0\nopenai-agents==0.0.4\nopenpyxl==3.1.5\npackaging==24.2\npandas==2.2.3\npbs-installer==2025.3.17\npkginfo==1.12.1.2\nplatformdirs==4.3.7\npoetry==2.1.1\npoetry-core==2.1.1\nportalocker==2.10.1\npriority==2.0.0\npropcache==0.3.0\nprotobuf==5.29.4\npycparser==2.22\npydantic==2.10.5\npydantic-settings==2.8.1\npydantic_core==2.27.2\nPyJWT==2.10.1\npymongo==4.10.1\npyproject_hooks==1.2.0\npython-dateutil==2.9.0.post0\npython-docx==1.1.2\npython-dotenv==1.0.1\npytz==2024.2\nqdrant-client==1.13.3\nQuart==0.20.0\nRapidFuzz==3.12.2\nrequests==2.32.3\nrequests-toolbelt==1.0.0\nsetuptools==75.8.0\nshellingham==1.5.4\nsix==1.17.0\nsniffio==1.3.1\nsounddevice==0.5.1\nsoupsieve==2.6\nsse-starlette==2.2.1\nstarlette==0.46.1\ntabulate==0.9.0\ntomlkit==0.13.2\ntqdm==4.67.1\ntrove-classifiers==2025.3.19.19\ntypes-requests==2.32.0.20250306\ntyping-inspect==0.9.0\ntyping_extensions==4.12.2\ntzdata==2024.2\nurllib3==2.3.0\nuvicorn==0.34.0\nvirtualenv==20.29.3\nwaitress==2.1.2\nwebsockets==13.1\nWerkzeug==3.1.3\nwheel==0.44.0\nwsproto==1.2.0\nxattr==1.1.4\nyarl==1.18.3\nzstandard==0.23.0\n```\n\n----------------------------------------\n\nTITLE: Listing Python Project Dependencies (requirements.txt format)\nDESCRIPTION: Defines the specific versions of Python packages required for the 'rowboat' project. This format is standard for `requirements.txt` files, used by package managers like pip to install the correct dependencies.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/apps/python-sdk/requirements.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nannotated-types==0.7.0\ncertifi==2024.12.14\ncharset-normalizer==3.4.1\nidna==3.10\npydantic==2.10.5\npydantic_core==2.27.2\nrequests==2.32.3\ntyping_extensions==4.12.2\nurllib3==2.3.0\n```\n\n----------------------------------------\n\nTITLE: Starting RowBoat Services with Docker Compose (Shell)\nDESCRIPTION: This command uses Docker Compose to build the images for all RowBoat services (Agents, Copilot, Frontend/Backend) if they don't exist or have changed, and then starts the containers defined in the project's docker-compose file. This makes the RowBoat Studio accessible in the browser and activates the associated APIs and SDK.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/apps/docs/docs/oss_installation.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose up --build\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key Environment Variable (Bash)\nDESCRIPTION: This command exports the OpenAI API key as an environment variable named OPENAI_API_KEY. This is a prerequisite for running Rowboat, as it relies on OpenAI's services. Replace 'your-openai-api-key' with your actual key.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=your-openai-api-key\n```\n\n----------------------------------------\n\nTITLE: Installing Rowboat Python SDK (Shell)\nDESCRIPTION: This command uses pip, the Python package installer, to install the `rowboat` library. This SDK allows developers to interact programmatically with agents created in Rowboat from their Python applications.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install rowboat\n```\n\n----------------------------------------\n\nTITLE: Displaying OpenAI Swarm MIT License Text\nDESCRIPTION: This snippet presents the full text of the MIT License under which the original OpenAI Swarm project is distributed. It is included here as required by the license terms for any derivative works or copies, ensuring proper attribution to OpenAI.\nSOURCE: https://github.com/rowboatlabs/rowboat/blob/main/apps/rowboat_agents/NOTICE.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nMIT License\n\nCopyright (c) 2024 OpenAI\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n```"
  }
]