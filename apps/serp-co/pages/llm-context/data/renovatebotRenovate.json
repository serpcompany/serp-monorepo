[
  {
    "owner": "renovatebot",
    "repo": "renovate",
    "content": "TITLE: Adding Encrypted npmToken or npmrc in Renovate Config - JSON\nDESCRIPTION: Shows encrypted authentication configuration for npm in Renovate using the 'encrypted' block for sensitive data. This prevents exposing secrets in plaintext. Optionally includes both 'npmToken' and an 'npmrc' string with a placeholder for injected token values. Input: JSON with 'encrypted' object and npmrc. Output: Secrets decrypted at runtime by Renovate for secure authentication to custom or default registries.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/getting-started/private-packages.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"encrypted\": {\n    \"npmToken\": \"xxT19RIdhAh09lkhdrK39HzKNBn3etoLZAwHdeJ25cX+5y52a9kAC7flXmdw5JrkciN08aQuRNqDaKxp53IVptB5AYOnQPrt8MCT+x0zHgp4A1zv1QOV84I6uugdWpFSjPUkmLGMgULudEZJMlY/dAn/IVwf/IImqwazY8eHyJAA4vyUqKkL9SXzHjvS+OBonQ/9/AHYYKmDJwT8vLSRCKrXxJCdUfH7ZnikZbFqjnURJ9nGUHP44rlYJ7PFl05RZ+X5WuZG/A27S5LuBvguyQGcw8A2AZilHSDta9S/4eG6kb22jX87jXTrT6orUkxh2WHI/xvNUEout0gxwWMDk==\"\n  },\n  \"npmrc\": \"registry=https://my.custom.registry/npm\\n//my.custom.registry/npm:_authToken=${NPM_TOKEN}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Customized Renovate Host Rules and Environment Variables for Go Modules (gomod) using JSON\nDESCRIPTION: This JSON configuration shows an advanced Renovate setup for handling private Go modules, demonstrating use of hostRules for gitlab.com and github.com with specific tokens and hostTypes, as well as specification of environment variables relevant to Go's module proxying logic (GOPRIVATE, GONOSUMDB, GONOPROXY). The configuration requires Renovate (with Go module support), various tokens, and appropriate permissions; it includes the $schema parameter, customEnvVariables, and postUpdateOptions for go mod tidy. Inputs are host base URLs and org names, and the output is a Renovate process with correctly scoped access to private Go modules during dependency lookups and updates. Limitations include the need for explicit tokens and hostTypes per host.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/getting-started/private-packages.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://docs.renovatebot.com/renovate-schema.json\",\n  \"dependencyDashboard\": true,\n  \"hostRules\": [\n    {\n      \"matchHost\": \"https://gitlab.com\",\n      \"token\": \"glpat-token_for_different_git_platform\",\n      \"hostType\": \"gitlab\"\n    },\n    {\n      \"matchHost\": \"https://github.com/some-org\",\n      \"token\": \"ghp_token_for_different_org\",\n      \"hostType\": \"go\"\n    },\n    {\n      \"matchHost\": \"https://api.github.com/repos/some-org\",\n      \"token\": \"ghp_token_for_different_org\",\n      \"hostType\": \"github\"\n    }\n  ],\n  \"customEnvVariables\": {\n    \"GOPRIVATE\": \"github.com/some-org,github.com/some-other-org,gitlab.com/some-org\",\n    \"GONOSUMDB\": \"github.com/some-org,github.com/some-other-org,gitlab.com/some-org\",\n    \"GONOPROXY\": \"github.com/some-org,github.com/some-other-org,gitlab.com/some-org\"\n  },\n  \"postUpdateOptions\": [\"gomodTidy\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Automerge Non-Major Updates for Merge Queue - Renovate JSON\nDESCRIPTION: This example Renovate configuration automatically merges minor and patch updates for qualifying dependencies. It can be used in conjunction with GitHub's Merge Queue setup as part of branch protection workflows. Dependencies: Requires Renovate and a properly configured GitHub repository. Inputs are package rules and update types; output is PRs for minor and patch updates automerged after passing all required CI checks.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/key-concepts/automerge.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"packageRules\": [\\n    {\\n      \"description\": \"Automerge non-major updates\",\\n      \"matchUpdateTypes\": [\"minor\", \"patch\"],\\n      \"automerge\": true\\n    }\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Annotating Docker Images with Source Repository - Dockerfile\nDESCRIPTION: This Dockerfile snippet demonstrates how to add the OCI-compliant label 'org.opencontainers.image.source' to a Docker image, enabling tools like Renovate to discover the source repository and changelog links. This step requires only a LABEL directive within your Dockerfile and adheres to the OCI Image Format Specification. The value should be set to a URL pointing to the project's repository (e.g., on GitHub or GitLab). No additional dependencies are needed, but correct label usage is crucial for automation compatibility.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/docker/readme.md#_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nLABEL org.opencontainers.image.source=\"https://github.com/renovatebot/renovate\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Replacement Rule in Renovate JSON\nDESCRIPTION: This Renovate JSON configuration defines a `packageRule` that targets packages named \"java\". It specifies that matched packages should be replaced with \"eclipse-temurin\" and the version should be updated to \"11\". This rule is used in conjunction with an example Dockerfile and the `autoReplaceGlobalMatch` option to illustrate potential replacement issues when the version string appears multiple times.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\"java\"],\n      \"replacementName\": \"eclipse-temurin\",\n      \"replacementVersion\": \"11\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Base Image in FROM Directive - Dockerfile\nDESCRIPTION: This Dockerfile snippet sets up a build stage using the node:20.9.0 image in the FROM directive. It demonstrates the standard method for specifying a container base image that Renovate can update. No additional dependencies are required beyond Docker, with node:20.9.0 as the input. The output is a base image ready for additional build steps. There are no special limitations.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/dockerfile/readme.md#_snippet_0\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM node:20.9.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Renovate Regex Manager for Comment-Based Dependencies (JSON5)\nDESCRIPTION: Defines a Renovate `customManager` using `regex` in JSON5 format. It uses two `matchStrings` with named capture groups to extract dependency information (`datasource`, `depName`, `versioning`, `currentValue`) from specially formatted comments within matched files, allowing updates for versions appearing on either side of the comment structure. Includes a `versioningTemplate` for conditional versioning scheme selection.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/custom/regex/readme.md#_snippet_1\n\nLANGUAGE: json5\nCODE:\n```\n```json5 title=\"Full Renovate .json5 config\"\n{\n  customManagers: [\n    {\n      customType: 'regex',\n      fileMatch: ['file-you-want-to-match'],\n      matchStrings: [\n        // for the version on the left part, ignoring the right\n        '# renovate: datasource=(?<datasource>.*?) depName=(?<depName>.*?)( versioning=(?<versioning>.*?))?\\s\\S+?:(?<currentValue>\\S+)\\s+\\S+:.+',\n        // for the version on the right part, ignoring the left\n        '# renovate: datasource=(?<datasource>.*?) depName=(?<depName>.*?)( versioning=(?<versioning>.*?))?\\s\\S+?:\\S+\\s+\\S+:(?<currentValue>\\S+)',\n      ],\n      versioningTemplate: '{{#if versioning}}{{{versioning}}}{{else}}semver{{/if}}',\n    },\n  ],\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Image Dependencies for Helm Charts using Renovate (YAML)\nDESCRIPTION: This snippet demonstrates the supported YAML structure for declaring Docker image dependencies, enabling Renovate to automate version updates within Helm Chart values.yaml or compatible YAML files. The structure requires fields such as 'repository', 'tag' or 'version', and an optional 'registry'. The keys must follow this conventional format for correct detection and updates. Inputs are YAML configuration files; outputs are automated pull requests with updated image tags or versions. Dependencies include Renovate with appropriate fileMatch configuration and adherence to the demonstrated schema.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/helm-values/readme.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nimage:\n  repository: 'some-docker/dependency'\n  tag: v1.0.0\n  registry: registry.example.com # optional key, will default to \"docker.io\"\n\nimage:\n  repository: 'some-docker/dependency'\n  version: v1.0.0\n\ncoreImage:\n  registry: docker.io\n  repository: bitnami/harbor-core\n  tag: 2.1.3-debian-10-r38\n```\n\n----------------------------------------\n\nTITLE: Enabling Lock File Maintenance Automerge - Renovate JSON\nDESCRIPTION: This configuration snippet enables automerge for lock file maintenance updates in Renovate. It sets both 'enabled' and 'automerge' options to true under the 'lockFileMaintenance' property. Required dependency: Renovate must be installed and pointed at this configuration. No parameters are required beyond the standard Renovate config entry, and the input is a JSON file. This setting will result in updated lock files (e.g., package-lock.json) being automerged once Renovate determines it is safe, with no code or manifest file changes.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/key-concepts/automerge.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"lockFileMaintenance\": {\\n    \"enabled\": true,\\n    \"automerge\": true\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Running Renovate Config Validator in Strict Mode (Console)\nDESCRIPTION: Executes the `renovate-config-validator` via `npx` with the `--strict` flag. In strict mode, the validator exits with a non-zero code if there are any validation warnings, errors, or if the configuration requires migration (e.g., updating deprecated options). This is useful for ensuring configuration is fully up-to-date in CI/CD pipelines. The example output shows a warning when migration is necessary.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/config-validation.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ npx --yes --package renovate -- renovate-config-validator --strict\n INFO: Validating renovate.json\n WARN: Config migration necessary\n       \"oldConfig\": {\n         \"$schema\": \"https://docs.renovatebot.com/renovate-schema.json\",\n         \"extends\": [ \"config:base\" ]\n       },\n       \"newConfig\": {\n         \"$schema\": \"https://docs.renovatebot.com/renovate-schema.json\",\n         \"extends\": [ \"config:recommended\" ]\n       },\n```\n\n----------------------------------------\n\nTITLE: Configuring JSONata Custom Manager for JSON Files - JavaScript\nDESCRIPTION: Shows how to set up a Renovate custom manager for JSON files using JSONata queries. The configuration specifies the manager type, file format, file matching rules, and places a query placeholder where users add their custom JSONata logic. A dependency on the 'jsonata' package and Renovate itself is implied. Key parameters: 'fileMatch' (regex/filepath patterns), 'matchStrings' (array of JSONata queries), and optional extension fields. Inputs are JSON files, outputs are extracted dependency objects; correct mapping and accurate queries are required.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/custom/jsonata/readme.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"customManagers\": [\n    {\n      \"customType\": \"jsonata\",\n      \"fileFormat\": \"json\",\n      \"fileMatch\": [\"<file match pattern>\"],\n      \"matchStrings\": ['<query>'],\n      ...\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding File Paths from Renovate Commits (JSON)\nDESCRIPTION: This configuration uses the `excludeCommitPaths` option in `renovate.json` to prevent files matching the specified glob pattern (`vendor/golang.org/x/text/**`) from being included in Renovate's commits. This is useful for excluding vendored dependency files from update commits.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_44\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"excludeCommitPaths\": [\"vendor/golang.org/x/text/**\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Dependency Package Requirements and Extras - pip\nDESCRIPTION: These lines declare Python package dependencies for pip, covering standard version pinning, extra requirements (e.g., Django[argon2]), optional extras (e.g., celery [redis]), and handling of whitespace or non-standard version specifiers. This configuration supports complex dependency resolution in pip-based projects, ensuring that all required core and optional components are installed correctly.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/pip_requirements/__fixtures__/requirements7.txt#_snippet_1\n\nLANGUAGE: pip\nCODE:\n```\n# Packages\\nDjango[argon2]==2.0.12\\ncelery [redis]==4.1.1\\nfoo [bar] == 3.2.1 # handles extra white space\\nsome-package==0.3.1\\nsome-other-package==1.0.0\\nnot_semver==1.9\n```\n\n----------------------------------------\n\nTITLE: Configuring Extra Python Package Index URLs with Authentication - pip\nDESCRIPTION: These lines configure additional Python package indexes for pip to search, including private repositories requiring authentication tokens supplied via environment variables (e.g., $PIP_TEST_TOKEN, ${PIP_TEST_TOKEN1}). Quotation marks are used for shell/syntax compatibility, with support for both quoted and unquoted URL forms. This setup ensures secure access to private packages during pip install operations.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/pip_requirements/__fixtures__/requirements7.txt#_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n# Repositories\\n--extra-index-url http://$PIP_TEST_TOKEN:example.com/private-pypi/\\n--extra-index-url http://${PIP_TEST_TOKEN}:example.com/private-pypi/\\n--extra-index-url \\\"http://$PIP_TEST_TOKEN:example.com/private-pypi/\\\"\\n--extra-index-url \\\"http://${PIP_TEST_TOKEN1}:example.com/private-pypi/\\\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Vulnerability Alert PR Behavior in Renovate (JSON)\nDESCRIPTION: Demonstrates how to use the 'vulnerabilityAlerts' config object to set custom labels, enable automerge, and assign PRs for vulnerability fixes when GitHub Dependency Graph and Dependabot alerts are enabled. All key parameters are specified under 'vulnerabilityAlerts'; proper permissions for reading security alerts are required. The input is a JSON object specifying labels, automerge behavior, and assignees.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_147\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"vulnerabilityAlerts\\\": {\\n    \\\"labels\\\": [\\\"security\\\"],\\n    \\\"automerge\\\": true,\\n    \\\"assignees\\\": [\\\"@rarkins\\\"]\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Regex-Based Manager for YAML Updates - JSON\nDESCRIPTION: This JSON configuration registers a custom manager in Renovate that uses a regular expression to identify lines in files (e.g., .yml files) containing the Renovate annotation and extract the dependency name, version, and versioning strategy. The 'fileMatch' parameter targets YAML files, 'datasourceTemplate' ties the manager to the custom datasource, and 'matchStrings' provides the regex for extracting required fields. 'versioningTemplate' selects the versioning scheme based on the comment or falls back to 'semver'. This enables Renovate to find and update dependencies in files not natively supported.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/custom/readme.md#_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"customManagers\": [\n    {\n      \"customType\": \"regex\",\n      \"fileMatch\": [\"\\\\.yml$\"],\n      \"datasourceTemplate\": \"custom.nexus_generic\",\n      \"matchStrings\": [\n        \"#\\\\s*renovate:\\\\s*(datasource=(?<datasource>.*?)\\\\s*)?depName=(?<depName>.*?)(\\\\s*versioning=(?<versioning>.*?))?\\\\s*\\\\w*:\\\\s*[\\\"']?(?<currentValue>.+?)[\\\"']?\\\\s\"\n      ],\n      \"versioningTemplate\": \"{{#if versioning}}{{{versioning}}}{{else}}semver{{/if}}\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Artifactory Authentication for Maven in Renovate (JavaScript)\nDESCRIPTION: Provides a JavaScript configuration example (`config.js`) for authenticating Renovate with a private Artifactory Maven repository. It defines a `hostRule` for the specific Artifactory host, setting the `hostType` to `maven` and using environment variables (`ARTIFACTORY_USERNAME`, `ARTIFACTORY_PASSWORD`) to supply the necessary credentials securely.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/java.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  hostRules: [\n    {\n      hostType: 'maven',\n      matchHost: 'https://artifactory.yourcompany.com/',\n      username: process.env.ARTIFACTORY_USERNAME,\n      password: process.env.ARTIFACTORY_PASSWORD,\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Kubernetes ConfigMap with config.json and CronJob for Renovate (YAML)\nDESCRIPTION: Shows how to supply a custom config.json file via Kubernetes ConfigMap and mount it into a dedicated Renovate CronJob. The manifest uses two volumes (one for ConfigMap, one for workdir), sets core environment variables (platform, token, autodiscover, base dir, config file, log level), and schedules the bot hourly. Dependencies: valid Renovate Docker image, config.json content. Limitation: Example exposes secrets for illustration; recommended to use Kubernetes secrets in production.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/examples/self-hosting.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: renovate-config\ndata:\n  config.json: |-\n    {\n      \"repositories\": [\"orgname/repo\",\"username/repo\"],\n      \"dryRun\" : \"full\"\n    }\n\n---\napiVersion: batch/v1\nkind: CronJob\nmetadata:\n  name: renovate-bot\nspec:\n  schedule: '@hourly'\n  concurrencyPolicy: Forbid\n  jobTemplate:\n    spec:\n      template:\n        spec:\n          containers:\n            - image: renovate/renovate:39.252.0\n              name: renovate-bot\n              env: # For illustration purposes, please use secrets.\n                - name: RENOVATE_PLATFORM\n                  value: 'github'\n                - name: RENOVATE_TOKEN\n                  value: 'some-token'\n                - name: RENOVATE_AUTODISCOVER\n                  value: 'false'\n                - name: RENOVATE_BASE_DIR\n                  value: '/tmp/renovate/'\n                - name: RENOVATE_CONFIG_FILE\n                  value: '/opt/renovate/config.json'\n                - name: LOG_LEVEL\n                  value: debug\n              volumeMounts:\n                - name: config-volume\n                  mountPath: /opt/renovate/\n                - name: work-volume\n                  mountPath: /tmp/renovate/\n          restartPolicy: Never\n          volumes:\n            - name: config-volume\n              configMap:\n                name: renovate-config\n            - name: work-volume\n              emptyDir: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Renovate GCR/GAR Basic Authentication with Encrypted Base64 Prefixed Token (JSON)\nDESCRIPTION: Configures Renovate `hostRules` using `Basic` authentication (`authType: \"Basic\"`) for GCR/GAR. It uses an encrypted, base64 encoded token placed under `encrypted.token`. This token must be derived from a service account JSON file prefixed with `_json_key:`. Suitable for repository-level Renovate configurations.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/docker.md#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hostRules\": [\n    {\n      \"matchHost\": \"europe-docker.pkg.dev\",\n      \"authType\": \"Basic\",\n      \"encrypted\": {\n        \"token\": \"<encrypted base64 prefixed service account>\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Repo-Scoped GitHub Host Rules using JSON in Renovate\nDESCRIPTION: This JSON snippet provides an example of specifying repo-scoped credentials for GitHub and GitHub Enterprise within Renovate's configuration using the hostRules array. Each entry details matchHost values pointing to GitHub REST API endpoints for specific repositories and a corresponding token for authentication. No additional dependencies are required, and inputs/outputs consist of API base URLs and tokens. This configuration ensures Renovate uses the correct credentials for requests associated with the specified repositories.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/getting-started/private-packages.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hostRules\": [\n    {\n      \"matchHost\": \"https://api.github.com/repos/org/repo\",\n      \"token\": \"abc123\"\n    },\n    {\n      \"matchHost\": \"https://github.domain.com/api/v3/repos/org/repo\",\n      \"token\": \"abc123\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom PR Body Column Definition for Sourcegraph - JSON\nDESCRIPTION: This JSON snippet extends PR body table definitions to introduce a custom 'Sourcegraph' column that links to a code search query. It also specifies the corresponding 'prBodyColumns' order to ensure the new column appears. Dependencies include Sourcegraph for link functionality. Inputs are the definitions of custom columns and a columns array; outputs are PR tables with Sourcegraph links for each dependency. Template expressions like '{{{depName}}}' and '{{{repository}}}' are dynamically substituted by Renovate.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_133\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"prBodyDefinitions\\\": {\\n    \\\"Sourcegraph\\\": \\\"[![code search for \\\\\\\"{{{depName}}}\\\\\\\"](https://sourcegraph.com/search/badge?q=repo:%5Egithub%5C.com/{{{repository}}}%24+case:yes+-file:package%28-lock%29%3F%5C.json+{{{depName}}}&label=matches)](https://sourcegraph.com/search?q=repo:%5Egithub%5C.com/{{{repository}}}%24+case:yes+-file:package%28-lock%29%3F%5C.json+{{{depName}}})\\\"\\n  },\\n  \\\"prBodyColumns\\\": [\\n    \\\"Package\\\",\\n    \\\"Update\\\",\\n    \\\"New value\\\",\\n    \\\"References\\\",\\n    \\\"Sourcegraph\\\"\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Pinning Terragrunt GitHub Dependencies for Renovate Updates (HCL)\nDESCRIPTION: This HCL snippet demonstrates how to define a Terragrunt dependency pointing to a GitHub source pinned to a specific version (`v1.0.0`) via the `ref` parameter. Renovate uses this declaration within a `terragrunt.hcl` file to identify and update the dependency when newer versions become available, based on the configured versioning scheme.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/terragrunt/readme.md#_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  source = \"github.com/hashicorp/example?ref=v1.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Gradle Lockfiles with Renovate (Shell)\nDESCRIPTION: This command is executed by Renovate during lock file maintenance on the root project and subprojects. It uses the Gradle wrapper (`./gradlew`) to regenerate dependency lockfiles (`.lockfile` artifacts or those used by `gradle-consistent-versions`) by writing the current resolved dependencies. Renovate discards standard output from this command, only monitoring `stderr` for errors.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/gradle/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew :dependencies --write-locks\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Environments with Wildcard Match in JSON\nDESCRIPTION: Demonstrates a valid use of the special `*` wildcard within a Renovate configuration. Setting `allowedEnv` to `[\"*\"]` signifies that all environments are permitted, effectively matching everything.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/string-pattern-matching.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"Example of valid wildcard use\"\n{\n  \"allowedEnv\": [\"*\"]\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Renovate for Grafana Dashboard Revision Tracking (JSON)\nDESCRIPTION: Provides a Renovate configuration with a custom regex manager (`customManagers`) designed to find Grafana dashboard definitions in YAML files (like Helm chart values). It extracts the dashboard name (`depName`), GNet ID (as `packageName`), and current revision (`currentValue`) using `matchStrings`. It uses a custom datasource `grafana-dashboards` to query the Grafana API (`defaultRegistryUrlTemplate`) for the latest revision based on the GNet ID.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/custom/readme.md#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"customManagers\": [\n    {\n      \"customType\": \"regex\",\n      \"fileMatch\": [\"\\\\.yml$\"],\n      \"matchStrings\": [\n        \"#\\\\s+renovate:\\\\s+depName=\\\"(?<depName>.*)\\\"\\\\n\\\\s+gnetId:\\\\s+(?<packageName>.*?)\\\\n\\\\s+revision:\\\\s+(?<currentValue>.*)\"\n      ],\n      \"versioningTemplate\": \"regex:^(?<major>\\\\d+)$\",\n      \"datasourceTemplate\": \"custom.grafana-dashboards\"\n    }\n  ],\n  \"customDatasources\": {\n    \"grafana-dashboards\": {\n      \"defaultRegistryUrlTemplate\": \"https://grafana.com/api/dashboards/{{packageName}}\",\n      \"format\": \"json\",\n      \"transformTemplates\": [\n        \"{\\\"releases\\\":[{\\\"version\\\": $string(revision)}]}\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting GitHub PAT in Renovate config.js (JavaScript)\nDESCRIPTION: Sets the GitHub Personal Access Token (PAT) directly within the `config.js` file using the `token` property. This token requires at least the `repo` scope, and optionally the `workflow` scope if managing GitHub Actions.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/platform/github/readme.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntoken: \"YOUR_GITHUB_PAT\"\n```\n\n----------------------------------------\n\nTITLE: Inheriting Multiple Best Practice Presets in Renovate (JSON)\nDESCRIPTION: This JSON snippet demonstrates the complete composition of the 'config:best-practices' preset in Renovate. It lists all the preset extensions included: recommended config, Docker digest pinning, GitHub Action digest pinning, config migration, and dev dependency pinning. Place this within your Renovate configuration file if you wish to replicate the best practice suite manually or understand its internal structure. All listed presets must be recognized by the Renovate tool.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/upgrade-best-practices.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": [\n    \"config:recommended\",\n    \"docker:pinDigests\",\n    \"helpers:pinGitHubActionDigests\",\n    \":configMigration\",\n    \":pinDevDependencies\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Pipelines for Renovate Automation - YAML\nDESCRIPTION: This YAML pipeline configuration schedules Renovate to run daily at 3am UTC, with manual triggers disabled, and sets up an Ubuntu-based runner. It authenticates to a private NPM registry using the npmAuthenticate task and runs Renovate with environment variables for Azure configuration. Dependencies: Azure DevOps Pipelines, valid Personal Access Token with required permissions, .npmrc file. Key parameters are schedule (cron), repository branch, and authentication tokens. The pipeline expects to run successfully in environments with the right access and secret variables.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/platform/azure/readme.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nschedules:\n  - cron: '0 3 * * *'\n    displayName: 'Every day at 3am (UTC)'\n    branches:\n      include: [main]\n    always: true\n\ntrigger: none\n\npool:\n  vmImage: ubuntu-latest\n\nsteps:\n  - task: npmAuthenticate@0\n    inputs:\n      workingFile: .npmrc\n\n  - bash: |\n      git config --global user.email 'bot@renovateapp.com'\n      git config --global user.name 'Renovate Bot'\n      npx --userconfig .npmrc renovate\n    env:\n      RENOVATE_PLATFORM: azure\n      RENOVATE_ENDPOINT: $(System.CollectionUri)\n      RENOVATE_TOKEN: $(System.AccessToken)\n\n```\n\n----------------------------------------\n\nTITLE: Authenticating to Private GitLab Registry using CI Job Token (JavaScript)\nDESCRIPTION: This JavaScript configuration example elicits how to set up hostRules for private GitLab package registries in Renovate running under GitLab CI. It uses the GitLab CI job token as password and 'gitlab-ci-token' as the username for authenticating requests against the gitlab.example.com registry of type 'pypi'. The pattern supports using CI/CD environment variables for dynamic secret provisioning during automated bot runs. The snippet is intended for use in a Renovate config.js file deployed in CI/CD contexts.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/getting-started/private-packages.md#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  hostRules: [\n    {\n      matchHost: 'gitlab.example.com',\n      hostType: 'pypi',\n      username: 'gitlab-ci-token',\n      password: process.env.CI_JOB_TOKEN,\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Using Digest Pinning with Version Tags in GitHub Actions YAML\nDESCRIPTION: Example GitHub Actions workflow step demonstrating digest pinning where the commit SHA is used for the `uses` field, and the corresponding version tag (e.g., `# v4.0.0`) is included as a comment. Renovate uses this comment to update the SHA to the latest commit associated with that tag (or a newer compatible tag), supporting SHA1 and SHA256 digests.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/github-actions/readme.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: build\n\non: [push]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4.0.0\n```\n\n----------------------------------------\n\nTITLE: Updating Gradle Dependency Verification Metadata (Shell)\nDESCRIPTION: Renovate runs this command when a `gradle/verification-metadata.xml` file exists and metadata or signature verification is enabled. It updates the verification metadata file with checksums for dependencies. Renovate determines the `<hashTypes>` (e.g., `sha256`, `sha512`) based on existing types in the file, excluding insecure `md5` and `sha1` (defaulting to `sha256` if only those are found).\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/gradle/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngradle --write-verification-metadata <hashTypes> dependencies\n```\n\n----------------------------------------\n\nTITLE: Excluding Branches using Negated Regex in Renovate JSON\nDESCRIPTION: This JSON configuration shows how to use a negated regular expression in the `baseBranches` option within `renovate.json`. By prefixing the regex with '!', it instructs Renovate to process all branches *except* those matching `/^pre-release\\/.*/'. Only a single negation should be used, and it cannot be mixed with other branch names in the same negated entry.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"baseBranches\": [\"!/^pre-release\\\\/.*/\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Limiting Concurrent Requests to a Host API in Renovate JSON\nDESCRIPTION: Configures Renovate to limit the number of concurrent HTTP requests made to `api.github.com` to a maximum of 2. This is useful for hosts that impose rate limits or have performance issues under high load. Requires matching an exact host (e.g., `api.github.com` not `github.com`) and should not be combined with `hostType` in the same rule.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_65\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hostRules\": [\n    {\n      \"matchHost\": \"api.github.com\",\n      \"concurrentRequestLimit\": 2\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Renovate Rules by Glob Filename Pattern in JSON\nDESCRIPTION: This JSON configuration uses `matchFileNames` with a glob pattern ('**/package.json') within `packageRules`. It groups all dependencies found in any 'package.json' file, regardless of its directory depth (e.g., 'package.json', 'backend/package.json'), into a group named 'All package.json changes'.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_109\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"description\": \"Group dependencies from package.json files\",\n      \"matchFileNames\": [\"**/package.json\"],\n      \"groupName\": \"All package.json changes\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example Package File: package.json (npm/Yarn)\nDESCRIPTION: Illustrates `package.json` as an example of a package file managed by npm or Yarn. Renovate scans such files to find dependencies and checks for available updates.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/getting-started/use-cases.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n`package.json`\n```\n\n----------------------------------------\n\nTITLE: Configuring Renovate Git Submodule Management in JSON\nDESCRIPTION: This JSON snippet demonstrates how to configure Renovate's behavior for Git submodules. It enables the `git-submodules` manager and specifies a list of submodule paths (e.g., 'path/to/submodule') to be ignored during dependency updates using the top-level `ignoreDeps` array.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/git-submodules/readme.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ignoreDeps\": [\"path/to/submodule\", \"path/to/submodule2\"],\n  \"git-submodules\": {\n    \"enabled\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AUR Package Version and Renovate Source in Bash PKGBUILD\nDESCRIPTION: Example line from a PKGBUILD file showing how to declare the package version (`pkgver`). It includes a specific comment format (`# renovate: ...`) that instructs Renovate to use the `github-tags` datasource for the `Azure/bicep` repository to find updates, based on the configuration in `renovate.json`.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/user-stories/maintaining-aur-packages-with-renovate.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npkgver=0.15.31 # renovate: datasource=github-tags depName=Azure/bicep\n```\n\n----------------------------------------\n\nTITLE: Enabling Custom Package Managers in Renovate (JSON)\nDESCRIPTION: This example demonstrates how to enable a custom manager named 'regex' using the `enabledManagers` option in `renovate.json`. Custom managers must be prefixed with `custom.` when listed in this array.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_41\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"enabledManagers\": [\"custom.regex\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Git Sign-off via Preset in Renovate (JSON)\nDESCRIPTION: This JSON configuration shows how to enable Git sign-off for commits made by Renovate. By adding the `:gitSignOff` preset to the `extends` array, Renovate will automatically add a `Signed-off-by:` trailer to its commits, eliminating the need to configure it via `commitBody`.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": [\":gitSignOff\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating for npm Package in a Private GitHub npm Registry - JSON\nDESCRIPTION: Demonstrates configuring Renovate to authenticate to GitHub's npm package registry using hostRules and encrypted tokens, with npmrc indicating scope. Key input parameters: matchHost, hostType, encrypted.token. The configuration enables secure access to GitHub Packages registry for npm dependencies.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/getting-started/private-packages.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hostRules\": [\n    {\n      \"matchHost\": \"https://npm.pkg.github.com/\",\n      \"hostType\": \"npm\",\n      \"encrypted\": {\n        \"token\": \"<Encrypted PAT Token>\"\n      }\n    }\n  ],\n  \"npmrc\": \"@organizationName:registry=https://npm.pkg.github.com/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic Digest Pinning in Renovate Configuration (JSON)\nDESCRIPTION: Demonstrates how to configure Renovate to automatically pin GitHub Action digests by extending the `helpers:pinGitHubActionDigests` preset within the `extends` array in the Renovate configuration file (e.g., `renovate.json`). This simplifies maintaining pinned digests.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/github-actions/readme.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": [\"helpers:pinGitHubActionDigests\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven hostRules for GitLab Registry Authentication - JavaScript\nDESCRIPTION: Provides an example hostRules array in JavaScript syntax to configure Renovate for Maven registry authentication using a CI token in GitLab pipelines. It sets hostType to 'maven', matchHost and includes a token for authorization. Placed in Renovate's config.js or similar, enabling controlled access to private Maven artifacts.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/getting-started/private-packages.md#_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nhostRules: [\n  {\n    hostType: 'maven',\n    matchHost: 'https://gitlab.host.com/api/v4',\n    token: process.env.CI_JOB_TOKEN,\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Example pip-compile Output File Header (Text)\nDESCRIPTION: Illustrates the expected header format in files generated by `pip-compile`. Renovate parses this header, specifically the command line shown (e.g., `pip-compile --no-emit-index-url --output-file=requirements.txt requirements.in`), to extract the original arguments and source files (`requirements.in` in this case). Using the `--no-header` option during generation is incompatible with this manager.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/pip-compile/readme.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n#\n# This file is autogenerated by pip-compile with Python 3.11\n# by the following command:\n#\n#    pip-compile --no-emit-index-url --output-file=requirements.txt requirements.in\n#\n```\n\n----------------------------------------\n\nTITLE: Defining Default Helm v3 Registry Alias in Renovate (JSON)\nDESCRIPTION: Specifies the default `registryAliases` configuration used by Renovate's `helmv3` manager. This maps the common alias \"stable\" to the official Helm chart repository URL. Users must provide their own aliases if they use different ones in their charts.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/helmv3/readme.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"registryAliases\": {\n    \"stable\": \"https://charts.helm.sh/stable\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Command for Lock File Update (npm)\nDESCRIPTION: Illustrates the command (`npm install`) that Renovate executes to delegate the lock file (`package-lock.json`) update process to the native package manager (npm) after modifying the primary package file (`package.json`).\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/getting-started/use-cases.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n`npm install`\n```\n\n----------------------------------------\n\nTITLE: Parsing Dependencies from TOML Files with Custom JSONata Manager - JSON\nDESCRIPTION: This JSON snippet demonstrates configuring a Renovate custom manager to process TOML files using the 'jsonata' engine. It specifies 'fileFormat' as 'toml' to enable correct parsing. The matchStrings expression targets TOML package declarations to extract dependency names and versions. Dependencies: Requires TOML file input and Renovate's TOML and JSONata support. Input: TOML file ('file.toml'); Output: extracted depName and currentValue.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"customManagers\\\": [\\n    {\\n      \\\"customType\\\": \\\"jsonata\\\",\\n      \\\"fileFormat\\\": \\\"toml\\\",\\n      \\\"fileMatch\\\": [\\\"file.toml\\\"],\\n      \\\"matchStrings\\\": [\\n        \\\"packages.{ 'depName': package, 'currentValue': version }\\\"\\n      ]\\n    }\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Helm Subchart Archive Updates in Renovate (JSON)\nDESCRIPTION: Shows the Renovate configuration required to enable updates for subchart archives located in the `/charts` folder. This is achieved by adding the `helmUpdateSubChartArchives` string to the `postUpdateOptions` array within the Renovate configuration.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/helmv3/readme.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"postUpdateOptions\": [\"helmUpdateSubChartArchives\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Specific Reviewers for Failed Automerge Notifications in Renovate (JSON)\nDESCRIPTION: Configures Renovate using `ignoreReviewers` to disregard certain usernames (e.g., `renovate-approve`) when checking if a PR already has reviewers. This applies when automerge fails and Renovate considers adding the configured `reviewers` (`foo`) only if the PR's current reviewer list (excluding ignored ones) is empty.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_79\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"reviewers\": [\"foo\"],\n  \"ignoreReviewers\": [\"renovate-approve\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Renovate CLI via npx (Shell)\nDESCRIPTION: This command demonstrates how to run the Mend Renovate CLI tool directly using npx. NPX allows executing Node.js packages from the npm registry without necessarily installing them globally or locally. This method is mentioned as an option for triggering Renovate within custom CI/CD pipeline definitions (e.g., using a yml file).\nSOURCE: https://github.com/renovatebot/renovate/blob/main/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx renovate\n```\n\n----------------------------------------\n\nTITLE: Configuring Registry Imports in Bazel - Markdown/Config\nDESCRIPTION: Demonstrates the inclusion and import of registry entries in .bazelrc files, showing how multiple files can be combined to define the full set of Bazel registries to be used. No explicit language, shown as Bazel config snippets for illustrative purposes. Inputs are .bazelrc files containing import and registry directives; output is the effective registry list discovered by Renovate.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/bazel.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nimport .registry.bazelrc\nbuild --registry=https://raw.githubusercontent.com/bazelbuild/bazel-central-registry/main\n```\n\n----------------------------------------\n\nTITLE: Stripping 'release-' Prefix from Versions Using Regex in Renovate (JSON)\nDESCRIPTION: This package rule within `renovate.json` targets packages named 'bar' and uses `extractVersion` to remove a 'release-' prefix from version strings. The regex `^release-(?<version>.*)$` captures everything after the prefix into the `version` group (e.g., `release-2.0.0` becomes `2.0.0`).\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_46\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\"bar\"],\n      \"extractVersion\": \"^release-(?<version>.*)$\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Gradle Metadata Verification in XML\nDESCRIPTION: This XML tag, found within `gradle/verification-metadata.xml`, signals that Gradle should verify the metadata of dependencies. Its presence (set to `true`) triggers Renovate to execute the `gradle --write-verification-metadata` command during updates.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/gradle/readme.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<verify-metadata>true</verify-metadata>\n```\n\n----------------------------------------\n\nTITLE: Example Composer Tilde Range (Major Version)\nDESCRIPTION: A Composer tilde range specifying only the major version. This range behaves differently in Composer compared to npm, being equivalent to npm's caret range '^4'.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/versioning/composer/readme.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n`~4`\n```\n\n----------------------------------------\n\nTITLE: Dependency Name as Node Key, Version as Child Value - JSON\nDESCRIPTION: Demonstrates a JSON input where dependency names are used as object keys and their versions as child values, fitting advanced mapping scenarios. Used as input for JSONata query to link keys (dependency names) to values (versions).\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/custom/jsonata/readme.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"foo\": {\n    \"version\": \"1.2.3\"\n  },\n  \"bar\": {\n    \"version\": \"4.5.6\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Remote Tekton Tasks/Pipelines via PipelinesAsCode Annotations in YAML\nDESCRIPTION: This YAML snippet demonstrates a Tekton `PipelineRun` configuration using annotations (`pipelinesascode.tekton.dev/task` and `pipelinesascode.tekton.dev/pipeline`) to reference specific versions of remote Tasks and Pipelines via GitHub URLs. This method allows Renovate to detect and update these versioned URLs.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/tekton/readme.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml title=\"How an annotation could look like in an pipeline-run.yaml\"\napiVersion: tekton.dev/v1\nkind: PipelineRun\nmetadata:\n  name: main\n  annotations:\n    pipelinesascode.tekton.dev/task: 'https://github.com/foo/bar/raw/v0.0.1/task/my-task/my-task.yaml'\n    pipelinesascode.tekton.dev/pipeline: 'https://github.com/foo/bar/raw/v0.0.1/pipeline/my-pipeline/my-pipeline.yaml'\n```\n```\n\n----------------------------------------\n\nTITLE: Disabling Renovate Entirely for a Repository (JSON)\nDESCRIPTION: This `renovate.json` configuration completely disables Renovate's functionality for the repository where it's placed by setting the top-level `enabled` property to `false`.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_37\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"enabled\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PEP 440 Versioning for Python Docker Image in Renovate (JSON)\nDESCRIPTION: Shows a `packageRules` configuration in `renovate.json` instructing Renovate to apply PEP 440 versioning rules when checking for updates to the official `python` Docker image. This is useful for images that follow Python's specific versioning standard.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/docker.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\"docker\"],\n      \"matchPackageNames\": [\"python\"],\n      \"versioning\": \"pep440\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Local File-Based Datasource for Renovate - JSON\nDESCRIPTION: This snippet defines a custom datasource named 'local_generic' in Renovate, which reads version data directly from local files using a file:// URL scheme. The configuration mirrors the 'nexus_generic' source but uses a file path template, allowing dependency information to be read from files within the local filesystem. This is useful for fully offline environments or when external HTTP(S) servers are unavailable. Each package's versiontracker.json file must exist at the specified path.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/custom/readme.md#_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"customDatasources\": {\n    \"local_generic\": {\n      \"defaultRegistryUrlTemplate\": \"file://dependencies/{{packageName}}/versiontracker.json\",\n      \"transformTemplates\": [\n        \"{ \\\"releases\\\": $map($, function($v) { { \\\"version\\\": $v.version, \\\"sourceUrl\\\": $v.filelink } }) }\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Onboarding Configuration Extending Organization Preset\nDESCRIPTION: This JSON snippet shows a sample `renovate.json` file that might be generated during Renovate onboarding. It extends a local preset found at the organization or group level (e.g., in a `.github` repository named `renovate-config` within the organization). The `local>` prefix indicates it's hosted on the same platform.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/config-presets.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://docs.renovatebot.com/renovate-schema.json\",\n  \"extends\": [\"local>myorgname/.github:renovate-config\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Example Terraform tfvars File with Renovate Datasource Annotation (HCL)\nDESCRIPTION: This HCL snippet shows an example `.tfvars` file defining a `kubernetes_version`. A special comment (`# renovate: ...`) instructs Renovate to use the `endoflife-date` datasource, look for the `amazon-eks` package, and use `loose` versioning to manage updates for this variable.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/endoflife-date/readme.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# renovate: datasource=endoflife-date depName=amazon-eks versioning=loose\nkubernetes_version = \"1.26\"\n```\n\n----------------------------------------\n\nTITLE: Full JSONata Custom Manager Config for package.json - JavaScript\nDESCRIPTION: Presents a recommended Renovate configuration setup for extracting dependencies from package.json using multiple JSONata queries per dependency group. Sets a fixed datasource ('npm'). Each 'matchStrings' element is a query targeting a different property (dependencies, devDependencies, etc.), flexible for coverage of all node types. Prerequisite: Renovate, jsonata. Any nonstandard package.json shapes may require query adjustment.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/custom/jsonata/readme.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"customType\": \"jsonata\",\n  \"fileMatch\": [\"package.json\"],\n  \"matchStrings\": [\n    \"$each(dependencies, function($v, $k) { {\\\"depName\\\":$k, \\\"currentValue\\\": $v, \\\"depType\\\": \\\"dependencies\\\"}})\",\n    \"$each(devDependencies, function($v, $k) { {\\\"depName\\\":$k, \\\"currentValue\\\": $v, \\\"depType\\\": \\\"devDependencies\\\"}})\",\n    \"$each(optionalDependencies, function($v, $k) { {\\\"depName\\\":$k, \\\"currentValue\\\": $v, \\\"depType\\\": \\\"optionalDependencies\\\"}})\",\n    \"{ \\\"depName\\\": \\\"pnpm\\\", \\\"currentValue\\\": $substring(packageManager, 5),  \\\"depType\\\": \\\"packageManager\\\"}\"\n  ],\n  \"datasourceTemplate\": \"npm\"\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Renovate Configuration with Best Practices Preset (JSON)\nDESCRIPTION: This snippet demonstrates how to extend a Renovate configuration using the 'config:best-practices' preset in JSON. It ensures that the repository inherits all best practice rules for dependency updates as maintained by the Renovate team. The configuration should be placed in the Renovate config file (e.g., 'renovate.json'). No other dependencies are required beyond Renovate itself. The 'extends' property takes a list of presets; here, it includes 'config:best-practices' as its only element.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/upgrade-best-practices.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": [\"config:best-practices\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Automerge Lint and Prettier DevDependencies - Renovate JSON\nDESCRIPTION: This snippet configures Renovate to automerge updates for lint and Prettier development dependencies. The 'packageRules' array includes a rule that matches dependencies of the 'devDependencies' type and package names 'lint' and 'prettier', setting 'automerge' to true. Renovate and a valid configuration file are required. Inputs are the dependency names/types; outputs are automatic merges once tests pass. This rule will not impact production dependencies, only the specified development tools.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/key-concepts/automerge.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"packageRules\": [\\n    {\\n      \"matchDepTypes\": [\"devDependencies\"],\\n      \"matchPackageNames\": [\"lint\", \"prettier\"],\\n      \"automerge\": true\\n    }\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Secure Environment Variables in Renovate Configuration\nDESCRIPTION: This syntax demonstrates how to securely reference sensitive environment variables within Renovate configuration, particularly when using features like `customEnvVariables`. By using `{{ secrets.VAR_NAME }}`, Renovate retrieves the value from its secrets management system at runtime, preventing the exposure of sensitive data in configuration files or logs. This is a recommended security practice for self-hosted Renovate instances.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/security-and-permissions.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n({{ secrets.VAR_NAME }})\n```\n\n----------------------------------------\n\nTITLE: Switching from Recommended to Best Practices Preset in Renovate (Diff)\nDESCRIPTION: This diff snippet shows the recommended change to migrate a Renovate configuration from using 'config:recommended' to using 'config:best-practices'. It highlights the single line to be replaced in the JSON config file. This operation is suitable for existing projects aiming to improve their dependency update strategy with more robust preset recommendations.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/upgrade-best-practices.md#_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n- \"extends\": [\"config:recommended\"]\n+ \"extends\": [\"config:best-practices\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring hostRules for Custom Go Module Registry Authentication in Renovate - JavaScript\nDESCRIPTION: This JavaScript snippet shows how to configure Renovate's 'hostRules' setting for authenticating against custom Go module sources using environment tokens. Each host entry includes a 'matchHost' field for the domain, a 'token' (usually from process.env), and an optional 'hostType' (like 'github'). Place this in your renovate.config.js. The configuration enables Renovate to authenticate with specific Git-based module sources when fetching Go modules, and supports both host rules with and without explicit hostType.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/golang.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\\n  hostRules: [\\n    {\\n      matchHost: 'github.enterprise.com',\\n      token: process.env.GO_GITHUB_TOKEN,\\n      hostType: 'github',\\n    },\\n    {\\n      matchHost: 'someGitHost.enterprise.com',\\n      token: process.env.GO_GIT_TOKEN,\\n    },\\n  ],\\n};\n```\n\n----------------------------------------\n\nTITLE: Ignoring Specific Dependencies in Renovate (JSON)\nDESCRIPTION: Provides a list of dependency names (`eslint`, `eslint-config-base`) using the top-level `ignoreDeps` array that Renovate should not check for updates or manage. This configuration uses exact string matches for dependency names.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_75\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ignoreDeps\": [\"eslint\", \"eslint-config-base\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Tool Versions in mise.toml - TOML\nDESCRIPTION: This code snippet demonstrates a typical tools table in a .mise.toml file, where specific versions for tools (such as Erlang) are listed as arrays. Renovate's mise manager uses this structure to identify and update only the primary version (first item in the array), leaving fallback versions for manual update. No external dependencies are required to read this format, but Renovate must be configured for automatic management.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/mise/readme.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[tools]\nerlang = [\"23.3\", \"22.0\"]\n\n```\n\n----------------------------------------\n\nTITLE: Extending GitHub-hosted Renovate Presets in JSON\nDESCRIPTION: This JSON snippet shows how to extend a Renovate preset hosted on GitHub within a `renovate.json` file. The `github>owner/name` syntax specifies the platform and repository path (e.g., `github>rarkins/renovate-config`) from which Renovate should fetch the preset configuration (typically `default.json` or `<preset-name>.json` from the default branch).\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/config-presets.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": [\"github>rarkins/renovate-config\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting AWS CodeCommit IAM User Credentials via Environment Variables\nDESCRIPTION: Lists the standard AWS environment variables used by Renovate to authenticate with CodeCommit using an IAM user. Setting `AWS_ACCESS_KEY_ID`, `AWS_SECRET_ACCESS_KEY`, and `AWS_REGION` is required. `AWS_SESSION_TOKEN` is optional for temporary credentials. This method is common in CI/CD environments.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/platform/codecommit/readme.md#_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n```\nAWS_ACCESS_KEY_ID: AWS IAM access key id\nAWS_SECRET_ACCESS_KEY: AWS Secret access key\nAWS_REGION: the AWS region e.g us-east-1\nAWS_SESSION_TOKEN: AWS session token, if you have one\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Major Version Extraction for Azure Pipelines Tasks (JSON)\nDESCRIPTION: This JSON configuration snippet defines a Renovate package rule to extract only the major version number from Azure Pipelines task versions. This aligns Renovate's behavior with the common Azure Pipelines convention of specifying tasks like `NodeTool@0` instead of the full version like `NodeTool@0.216.0`.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/azure-pipelines/readme.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\"azure-pipelines-tasks\"],\n      \"extractVersion\": \"^(?<version>\\\\d+)\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Modified PKGBUILD Directory in GitHub Actions YAML/Bash\nDESCRIPTION: A GitHub Actions step executing a Bash script to identify the package directory that was updated in the pull request. It uses `git diff --name-only` to compare the pull request branch with the main branch, filters for PKGBUILD files, takes the first result, extracts the directory using `dirname`, and saves it to the `$GITHUB_ENV` as `pkgbuild` for use in subsequent steps.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/user-stories/maintaining-aur-packages-with-renovate.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Find updated package\n  run: |\n    #!/usr/bin/env bash\n    set -euxo pipefail\n\n    echo \"pkgbuild=$(git diff --name-only origin/main origin/${GITHUB_HEAD_REF} \"*PKGBUILD\" | head -1 | xargs dirname)\" >> $GITHUB_ENV\n```\n\n----------------------------------------\n\nTITLE: Define Puppet Module from Git Repository Using Tag in Ruby Puppetfile\nDESCRIPTION: Demonstrates defining a Puppet module sourced from a generic Git repository (using SSH protocol in this example). The specific version is locked to a Git tag ('5.0.0') using the `:git` and `:tag` parameters.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/puppet/readme.md#_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nmod 'stdlib',\n    :git => 'git@gitlab.com:example/project_stdlib.git',\n    :tag => '5.0.0'\n```\n\n----------------------------------------\n\nTITLE: Publishing Updated Package to AUR via GitHub Actions YAML\nDESCRIPTION: Employs the `KSXGitHub/github-actions-deploy-aur@v2.6.0` action to automate publishing the updated package to the Arch User Repository (AUR). The step requires configuration including the package name (`pkgname`), the path to the `PKGBUILD` file, and AUR authentication credentials (username, email, SSH private key) supplied via GitHub secrets. It only runs if a package was identified (`env.pkgbuild != ''`).\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/user-stories/maintaining-aur-packages-with-renovate.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Publish package\n  uses: KSXGitHub/github-actions-deploy-aur@065b6056b25bdd43830d5a3f01899d0ff7169819 # v2.6.0\n  if: ${{ env.pkgbuild != '' }}\n  with:\n    pkgname: ${{ env.pkgbuild }}\n    pkgbuild: ${{ env.pkgbuild }}/PKGBUILD\n    commit_username: ${{ secrets.AUR_USERNAME }}\n    commit_email: ${{ secrets.AUR_EMAIL }}\n    ssh_private_key: ${{ secrets.AUR_SSH_PRIVATE_KEY }}\n```\n\n----------------------------------------\n\nTITLE: Querying Anaconda Registry for a Specific Channel - JavaScript\nDESCRIPTION: This JavaScript configuration object demonstrates how to look up the 'numpy' package in the 'conda-forge' channel of the Anaconda registry. The object specifies the full channel/package name in the 'packageName' property. No additional dependencies are required for this declaration, which will be used by the datasource logic of renovatebot. The input is an object with 'packageName', and the output is its use in a lookup process for release retrieval.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/conda/readme.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  packageName: 'conda-forge/numpy',\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Namespaces for Autodiscovery in Renovate Config (GitLab)\nDESCRIPTION: This JSON snippet shows how to configure the `autodiscoverNamespaces` option, specifically for the GitLab platform. This option allows Renovate to efficiently autodiscover repositories only within the specified namespaces (groups or subgroups). Filtering happens platform-side, making it more performant than `autodiscoverFilter` for this purpose. The example targets repositories within the `a-group` top-level group and the `another-group/some-subgroup` subgroup. Note potential platform limitations (e.g., incompatibility with `autodiscoverTopics` on Gitea/Forgejo).\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/self-hosted-configuration.md#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"platform\": \"gitlab\",\n  \"autodiscoverNamespaces\": [\"a-group\", \"another-group/some-subgroup\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring VCS Repository in Composer - JSON\nDESCRIPTION: This JSON snippet defines how to add a VCS (Version Control System) repository to the repositories section in composer.json. The configuration sets the name of the VCS package, its type, and the repository's URL, which allows tools like Renovate to fetch updates and ensure dependencies are managed accurately. The required properties are: 'name' (must match the package's composer identity), 'type' (should be set to 'vcs'), and 'url' (the location of the repository). This structure is necessary for Composer to locate and install packages not available on Packagist.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/composer/readme.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"name\\\": \\\"acme/foo\\\",\\n  \\\"type\\\": \\\"vcs\\\",\\n  \\\"url\\\": \\\"http://vcs-of-acme.org/acme/foo.git\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Example Updated Dependency Version String\nDESCRIPTION: Represents the newer version (`1.1.0`) of a dependency that Renovate identifies as available and subsequently patches into the relevant package file.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/getting-started/use-cases.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n`1.1.0`\n```\n\n----------------------------------------\n\nTITLE: Running Renovate with Custom config.js in Docker (Shell)\nDESCRIPTION: Demonstrates mounting a custom configuration file (config.js) into the Docker container for Renovate via volume mapping. The command expects a valid local config.js file and mounts it to the container's /usr/src/app/config.js path, allowing for custom CLI configuration inside the running container.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/examples/self-hosting.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ndocker run --rm -v \"/path/to/your/config.js:/usr/src/app/config.js\" renovate/renovate\n```\n\n----------------------------------------\n\nTITLE: Manually Approving All Major Jest Updates with Renovate (JSON)\nDESCRIPTION: This JSON configuration instructs Renovate to require dependency dashboard approval for major updates to the 'jest' package only. By specifying 'matchPackageNames' and 'matchUpdateTypes', the snippet fine-tunes the rule's scope. Use this in the 'renovate.json' file to control high-impact updates for critical packages like 'jest'. The rule is specific to 'major' upgrades for the named package.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/faq.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\"jest\"],\n      \"matchUpdateTypes\": [\"major\"],\n      \"dependencyDashboardApproval\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Renovate for Yarn and Multiple Registries - JavaScript\nDESCRIPTION: This JavaScript configuration enables Renovate to authenticate with both a custom Azure NPM registry and GitHub by defining matchHost rules, using environment tokens for each. This example accommodates Yarn's need for fully matching registry URLs. Requirements: RENOVATE_TOKEN and RENOVATE_GITHUB_COM_TOKEN in environment, proper registry/repository values, config.js placed at repo root. Inputs: platform, hostRules, repository list. Outputs: allows automated Renovate PRs for both NPM and GitHub sources.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/platform/azure/readme.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  platform: 'azure',\n  hostRules: [\n    {\n      matchHost:\n        'https://myorg.pkgs.visualstudio.com/_packaging/myorg/npm/registry/',\n      token: process.env.RENOVATE_TOKEN,\n      hostType: 'npm',\n    },\n    {\n      matchHost: 'github.com',\n      token: process.env.RENOVATE_GITHUB_COM_TOKEN,\n    },\n  ],\n  repositories: ['YOUR-PROJECT/YOUR-REPO'],\n};\n\n```\n\n----------------------------------------\n\nTITLE: Specifying Docker Credentials via CI Environment Variables for Renovate (Markdown)\nDESCRIPTION: This code snippet shows an alternative way to configure credentials for Renovate to access Docker registries by setting two specific CI/CD environment variables: DOCKER_REGISTRY_GITLAB_COM_USERNAME and DOCKER_REGISTRY_GITLAB_COM_PASSWORD, using GitLab's runner environment. This approach is effective when detectHostRulesFromEnv is enabled in Renovate settings.\n\nDependencies: Renovate configuration option 'detectHostRulesFromEnv', environment variables (GITLAB_USER_NAME, RENOVATE_TOKEN). These settings only take effect if the referenced feature flag is enabled. The credentials must correspond to a GitLab user with appropriate scopes for accessing container registries.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/platform/gitlab/readme.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nset the CI variables `DOCKER_REGISTRY_GITLAB_COM_USERNAME=${GITLAB_USER_NAME}` and `DOCKER_REGISTRY_GITLAB_COM_PASSWORD=${RENOVATE_TOKEN}`.\n```\n\n----------------------------------------\n\nTITLE: Including Pre-release Versions in Conan Ranges\nDESCRIPTION: This syntax modifies a version range to include pre-release versions (e.g., alpha, beta, rc) by setting `include_prerelease=True`.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/versioning/conan/readme.md#_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n`[>1.1 <2.1, include_prerelease=True]`\n```\n\n----------------------------------------\n\nTITLE: Comparing DateTimes with Luxon - TypeScript\nDESCRIPTION: Demonstrates the preferred way to handle and compare UTC dates and times using the Luxon library. Initializes current and target dates in UTC and tests if the end-of-life has passed. Dependency: 'luxon' package required. Inputs: 'end' ISO string; Outputs: Boolean indicating if current time is past EOL.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/development/best-practices.md#_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nif (end) {\n  const now = DateTime.now().toUTC();\n  const eol = DateTime.fromISO(end, { zone: 'utc' });\n  return eol < now;\n}\n```\n\n----------------------------------------\n\nTITLE: Resulting Host Rule for GitLab Tags Authentication from Environment Variables in JSON\nDESCRIPTION: This JSON snippet illustrates the `hostRules` configuration generated by Renovate when it detects the environment variables `GITLAB__TAGS_CODE__HOST_COMPANY_COM_USERNAME=bot` and `GITLAB__TAGS_CODE__HOST_COMPANY_COM_PASSWORD=botpass123`, assuming `detectHostRulesFromEnv` is enabled. It configures authentication using username and password for the `gitlab-tags` host `code-host.company.com`.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/self-hosted-configuration.md#_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hostRules\": [\n    {\n      \"hostType\": \"gitlab-tags\",\n      \"matchHost\": \"code-host.company.com\",\n      \"username\": \"bot\",\n      \"password\": \"botpass123\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Autodiscovered Repos by Project in Renovate Config (Bitbucket)\nDESCRIPTION: This JSON snippet demonstrates the `autodiscoverProjects` option, shown here for the Bitbucket platform. This allows filtering autodiscovered repositories based on their project association using an array of glob or regex patterns (following Renovate's string pattern matching rules). The example includes projects matching `a-group` and excludes those matching `another-group/some-subgroup`. This provides fine-grained control over which repositories within specific platform projects Renovate should manage.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/self-hosted-configuration.md#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"platform\": \"bitbucket\",\n  \"autodiscoverProjects\": [\"a-group\", \"!another-group/some-subgroup\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Jenkins Plugin Versions and Update Policies - Plain Text\nDESCRIPTION: This snippet demonstrates how to declare Jenkins plugin dependencies and their versions, optionally annotating certain plugins to be ignored by the Renovate bot for automated updates. Dependencies are defined line by line in the format 'plugin-name:version', with hash ('#') symbols introducing comments or special Renovate instructions. This file requires no external dependencies, but is consumed by CI tools (including Renovate and Jenkins) to determine which plugins to manage and install. All lines starting with '#' are ignored, and specific plugins can be opted out from automated updates with the 'renovate:ignore' comment.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/jenkins/__fixtures__/plugins.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nemail-ext:1.2.3\n\napache-httpcomponents-client-4-api:4.4.10-2.0 # comment\nauthentication-tokens:1.2\nblueocean:1.21.0 # another comment\n#blueocean:1.22.0\n\n# this line is completely ignored\n\n# these deps will be ignored:\ngit:4.2.0         # renovate:ignore\ngit-client:3.3.1  # renovate:ignore\n```\n\n----------------------------------------\n\nTITLE: Preferring Automatic Ordered Lists in Markdown - Markdown\nDESCRIPTION: Shows the preferred approach to ordered lists where each list item starts with '1.' and Markdown handles numbering automatically. This increases maintainability by avoiding manual renumbering. Inputs are multiple items, each prefixed with 1.; output is a Markdown rendered ordered list with appropriate numbering. No dependencies required.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/development/style-guide.md#_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n1. First item\\n1. Second item\\n1. Third item\n```\n\n----------------------------------------\n\nTITLE: Defining Renovate Configuration in Node.js (JavaScript)\nDESCRIPTION: This snippet demonstrates how to define a configuration file for Renovate using Node.js module exports. The file includes keys for a personal access token and an array of repository identifiers for targeting specific repositories. This file is intended to be placed in the root directory as config.js, and is used by Renovate when running in debug mode in VS Code. The required dependencies are Node.js, and the expected inputs are a string token and an array of repository names. The output is a configuration object consumable by Renovate; ensure the file does not expose actual sensitive credentials.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/development/local-development.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  token: 'xxxxxxxx',\n  repositories: ['r4harry/testrepo1'],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Renovate GCR/GAR Basic Authentication with Base64 Prefixed Service Account Token (JSON)\nDESCRIPTION: Defines Renovate `hostRules` using `Basic` authentication (`authType: \"Basic\"`) for GCR/GAR. It expects a `token` value containing the base64 encoded string derived from a service account JSON file that was prefixed with `_json_key:`. This method is suitable for self-hosted Renovate configurations.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/docker.md#_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hostRules\": [\n    {\n      \"matchHost\": \"europe-docker.pkg.dev\",\n      \"authType\": \"Basic\",\n      \"token\": \"<base64 prefixed service account>\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Renovate Custom Manager for AWS Aurora RDS in Terraform (JSON)\nDESCRIPTION: Defines a Renovate custom manager configuration tailored for updating AWS Aurora RDS versions specified within Terraform (`.tf`) files. It uses a regex in `matchStrings` to parse a specially formatted comment containing the `rdsFilter`, `depName`, and `versioning` strategy, along with the `engine_version` assignment line to extract the `currentValue`. This setup links the discovered dependency to the `aws-rds` datasource for version management, specifically accommodating Aurora's versioning needs.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/aws-rds/readme.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"customManagers\": [\n    {\n      \"description\": \"Update RDS\",\n      \"customType\": \"regex\",\n      \"fileMatch\": [\".+\\\\.tf$\"],\n      \"matchStrings\": [\n        \"\\\\s*#\\\\s*renovate:\\\\s*rdsFilter=(?<lookupName>.+?) depName=(?<depName>.*) versioning=(?<versioning>.*)\\\\s*.*_version\\\\s*=\\\\s*\\\"(?<currentValue>.*)\\\"\"\n      ],\n      \"datasourceTemplate\": \"aws-rds\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes Secret for SSH Keys in YAML (yml)\nDESCRIPTION: Illustrates the YAML structure of a Kubernetes Secret resource named `ssh-key-secret`. It contains base64 encoded data for the SSH `config` file, the `id_rsa` private key, and the `id_rsa.pub` public key. The actual base64 strings and namespace need to be provided when using this definition.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/examples/self-hosting.md#_snippet_13\n\nLANGUAGE: yml\nCODE:\n```\napiVersion: v1\ndata:\n  config: aG9zdCBnaXRsYWIuY29tCiAgSG9zdE5hbWUgZ2l0bGFiLmNvbQogIFN0cmljdEhvc3RLZXlDaGVja2luZyBubwogIElkZW50aXR5RmlsZSB+Ly5zc2gvaWRfcnNhCiAgVXNlciBnaXQ=\n  id_rsa: <base64String>\n  id_rsa.pub: <base64String>\nkind: Secret\nmetadata:\n  name: ssh-key-secret\n  namespace: <namespace>\n```\n\n----------------------------------------\n\nTITLE: Configuring Renovate Update Schedule - JSON\nDESCRIPTION: Demonstrates how to set up a 'schedule' property in the Renovate configuration using a JSON object. This snippet sets a custom time window, ensuring Renovate only runs updates on weekdays at night (10 PM to 4 AM) and anytime on weekends. Requires a valid Renovate configuration context and adherence to Cron syntax for schedule expressions. Inputs are the cron pattern strings, and expected behavior is that updates only occur during specified windows. Place this configuration at the appropriate level in your renovate.json file.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_141\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"Schedule on weekdays at night (10 PM - 4 AM) and anytime on weekends\",\n  \"schedule\": [\"* 22-23,0-4 * * *\", \"* * * * 0,6\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting autodiscoverFilter via Environment Variables in Bash\nDESCRIPTION: This Bash snippet demonstrates setting the `RENOVATE_AUTODISCOVER_FILTER` environment variable to control which repositories Renovate discovers when `autodiscover` is enabled. It highlights a limitation: commas cannot be used within a single filter pattern when set via environment variables or CLI, as commas act as delimiters for multiple filters. The example shows a problematic glob pattern and suggests using a regular expression pattern as a workaround to achieve the same filtering effect (`/MyOrg\\/(my|foo)-repo/`).\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/self-hosted-configuration.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# DO NOT use commas inside the filter if your are using env or cli variables to configure it.\nRENOVATE_AUTODISCOVER_FILTER=\"/MyOrg/{my-repo,foo-repo}\"\n\n\n# in this example you can use regex instead\nRENOVATE_AUTODISCOVER_FILTER=\"/MyOrg\\/(my|foo)-repo/\"\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS CodeCommit IAM User Credentials in Renovate config.js\nDESCRIPTION: Defines the structure for providing AWS IAM user credentials within a Renovate `config.js` file for CodeCommit authentication. It requires the `username` (Access Key ID), `password` (Secret Access Key), and `endpoint` (CodeCommit URL). An optional `token` (AWS Session Token) can also be included for temporary credentials. This method stores credentials directly in the configuration file.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/platform/codecommit/readme.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n```\nusername: AWS IAM access key id\npassword: AWS Secret access key\nendpoint: the URL endpoint e.g https://git-codecommit.us-east-1.amazonaws.com/\ntoken: AWS session token, if you have one\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Regex Managers for Dockerfile Dependencies in Renovate (JSON)\nDESCRIPTION: This snippet shows a Renovate config defining a custom regex manager for Dockerfiles with the 'any' matchStringsStrategy. Each specified regex is applied to extract dependencies such as ENV and FROM lines. Requires Renovate bot and assumes the Dockerfile matches the '^Dockerfile$' pattern. Extracted groups like 'depName' and 'currentValue' are mapped for updating images/versions, using the 'docker' datasource. Takes a list of regexes, each triggering independent dependency matches.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"customManagers\": [\n    {\n      \"customType\": \"regex\",\n      \"fileMatch\": [\"^Dockerfile$\"],\n      \"matchStringsStrategy\": \"any\",\n      \"matchStrings\": [\n        \"ENV [A-Z]+_VERSION=(?<currentValue>.*) # (?<datasource>.*?)/(?<depName>.*?)(\\\\&versioning=(?<versioning>.*?))?\\\\s\",\n        \"FROM (?<depName>\\\\S*):(?<currentValue>\\\\S*)\"\n      ],\n      \"datasourceTemplate\": \"docker\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Approving All Major npm Updates with Renovate (JSON)\nDESCRIPTION: This JSON snippet configures Renovate to require manual approval before creating pull requests for all major updates managed by the npm package manager. The configuration is set using a 'packageRules' array where updates matching 'major' type and managed by 'npm' require 'dependencyDashboardApproval'. Place this in your 'renovate.json' or corresponding configuration file. Only major version updates trigger this rule; other update types proceed as usual.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/faq.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchUpdateTypes\": [\"major\"],\n      \"matchManagers\": [\"npm\"],\n      \"dependencyDashboardApproval\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Poetry hostRules with Environment Variables (JavaScript)\nDESCRIPTION: This JavaScript snippet configures hostRules for Poetry registries by mapping a custom pypi.example.com endpoint to credentials passed in from environment variables. Renovate uses this configuration (typically in config.js) to supply username and password via the POETRY_HTTP_BASIC_X_USERNAME and POETRY_HTTP_BASIC_X_PASSWORD environment variables, derived from host source names. This ensures protected packages can be accessed securely in automated runs; the approach supports environment variable substitution for sensitive information.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/getting-started/private-packages.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  hostRules: [\n    {\n      matchHost: 'pypi.example.com',\n      hostType: 'pypi',\n      username: process.env.PYPI_USERNAME,\n      password: process.env.PYPI_PASSWORD,\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Host Rules for Package Registries using JSON in Renovate\nDESCRIPTION: This JSON snippet provides an example configuration for the \"hostRules\" property, specifying how Renovate should authenticate with npm and PyPI registries. Each rule in the hostRules array describes either a token-based (for npmjs) or username/password-based (for company PyPI) authentication for requests to specific hosts. Dependencies include only Renovate itself; key parameters include matchHost, token, username, and password. Inputs are registry hostnames or URLs, and outputs are authenticated HTTP(s) lookups managed by Renovate internally, with the constraint that only token or basic auth is currently supported.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/getting-started/private-packages.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hostRules\": [\n    {\n      \"matchHost\": \"registry.npmjs.org\",\n      \"token\": \"abc123\"\n    },\n    {\n      \"matchHost\": \"https://registry.company.com/pypi-simple/\",\n      \"username\": \"engineering\",\n      \"password\": \"abc123\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Providing Entire Encrypted .npmrc in Renovate Config - JSON\nDESCRIPTION: Encrypts an entire .npmrc file (newlines replaced with \\n) for inclusion in Renovate config under the 'encrypted' object. Used when a custom registry or multiple auth settings are needed. Input: JSON with encrypted.npmrc. Output: Renovate decrypts the npmrc for use at runtime. Key limitation: Must use Renovate's encryption feature; not compatible with plaintext secrets.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/getting-started/private-packages.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"encrypted\": {\n    \"npmrc\": \"WOTWu+jliBtXYz3CU2eI7dDyMIvSJKS2N5PEHZmLB3XKT3vLaaYTGCU6m92Q9FgdaM/q2wLYun2JrTP4GPaW8eGZ3iiG1cm7lgOR5xPnkCzz0DUmSf6Cc/6geeVeSFdJ0zqlEAhdNMyJ4pUW6iQxC3WJKgM/ADvFtme077Acvc0fhCXv0XvbNSbtUwHF/gD6OJ0r2qlIzUMGJk/eI254xo5SwWVctc1iZS9LW+L0/CKjqhWh4SbyglP3lKE5shg3q7mzWDZepa/nJmAnNmXdoVO2aPPeQCG3BKqCtCfvLUUU/0LvnJ2SbQ1obyzL7vhh2OF/VsATS5cxbHvoX/hxWQ==\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Automerge Patch and Minor Updates in Monorepo Group - Renovate JSON\nDESCRIPTION: This JSON snippet configures Renovate to automerge patch and minor updates for packages defined by the 'monorepo:ionic-native' preset. The rule uses 'extends' to inherit preset behavior, combined with 'automerge' and 'matchUpdateTypes'. This requires Renovate and applicable preset support. It targets grouped packages for streamlined merging; expected input is preset and update types, output is automerged PRs for patch and minor updates in the defined group.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/key-concepts/automerge.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"packageRules\": [\\n    {\\n      \"extends\": [\"monorepo:ionic-native\"],\\n      \"matchUpdateTypes\": [\"patch\", \"minor\"],\\n      \"automerge\": true\\n    }\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Matching Renovate Rules by Package Name Glob Pattern in JSON\nDESCRIPTION: This JSON snippet uses `matchPackageNames` with glob patterns, including negation, within `packageRules`. It sets the `rangeStrategy` to 'replace' for any npm package starting with '@angular/' (e.g., '@angular/core') *except* for the specific package '@angular/abc'.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_116\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\"@angular/**\", \"!@angular/abc\"],\n      \"rangeStrategy\": \"replace\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Chaining Result Transformations with zod - TypeScript\nDESCRIPTION: This snippet demonstrates using the Result class to parse and validate a URL, perform an HTTP GET request, handle errors, and transform the HTTP response in TypeScript. It uses zod for schema validation and demonstrates how to attach side effects on errors with onError, and how to extract parsed data with transform. Dependencies include Result, zod, a logger, and an http client. The method chain accepts a URL, logs warnings upon failure, and transforms the response to get its body.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/development/zod.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst { val, err } = Result.parse(url, z.string().url())\n  .transform((url) => http.get(url))\n  .onError((err) => {\n    logger.warn({ err }, 'Failed to fetch something important');\n  })\n  .transform((res) => res.body);\n```\n\n----------------------------------------\n\nTITLE: Grouping Related Packages in a Single PR by Name Prefix (JSON)\nDESCRIPTION: This JSON example groups all package updates with names starting with 'abc' into one PR, rather than separate PRs for each. It uses a 'packageRules' entry with a glob pattern and 'groupName'. Useful for reducing PR noise and coordinating version updates for related packages. Add to your 'renovate.json' to aggregate updates for dependency families.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/faq.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": \"abc**\",\n      \"groupName\": [\"abc packages\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling the Dependency Dashboard - Renovate - JSON\nDESCRIPTION: Illustrates how to disable the Dependency Dashboard in Renovate by adding the ':disableDependencyDashboard' preset to the 'extends' array of the configuration. The snippet should be placed inside a valid Renovate configuration file. Required parameter is the 'extends' array with the disabling preset. Produces a configuration that turns off the dashboard feature.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/key-concepts/dashboard.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": [\"config:recommended\", \":disableDependencyDashboard\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Python Git Dependency URLs\nDESCRIPTION: A list of Git URLs specifying Python package dependencies, intended for tools like pip or dependency managers such as Renovate. These URLs use both SSH (`git+ssh://`) and HTTPS (`git+https://`) protocols to point to repositories on GitHub and a private GitLab instance (`gitlab.company.com`). Specific package versions are indicated using tags (e.g., `@v1.1.0`, `@1.0.0`, `@v0.9.0`) or a commit hash (e.g., `@abcde`). This format allows installing packages directly from version control.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/pip_requirements/__fixtures__/requirements-git-packages.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ngit+ssh://git@github.com/rwxd/python-pip-setup-test.git@v1.1.0\ngit+ssh://git@github.com/rwxd/test_package@1.0.0\ngit+ssh://git@gitlab.company.com/rwxd/python-package.git@abcde\ngit+https://peter@github.com/rwxd/python-pip-setup-test.git@v0.9.0\ngit+https://github.com/rwxd/python-pip-setup-test.git@v0.9.0\n```\n\n----------------------------------------\n\nTITLE: Manually Parsing JSON Before Zod Validation (Incorrect)\nDESCRIPTION: Illustrates an incorrect method for handling stringified JSON data. It involves manually calling `JSON.parse()` within a try-catch block before applying Zod validation (`ApiResults.parse`). The guideline recommends using dedicated helper utilities instead. Requires the `zod` library (`z`).\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/development/zod.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst ApiResults = z.array(\n  z.object({\n    id: z.number(),\n    value: z.string(),\n  }),\n);\ntype ApiResults = z.infer<typeof ApiResults>;\n\nlet results: ApiResults | null = null;\ntry {\n  const json = JSON.parse(input);\n  results = ApiResults.parse(json);\n} catch (e) {\n  results = null;\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Library CDN URLs - JavaScript\nDESCRIPTION: This snippet lists multiple CDN URLs for JavaScript libraries that are dependencies of a React-based project. Libraries include React, ReactDOM, Babel, React Router, Axios, and various supporting UI and utility libraries. There are no direct dependencies to run this code as it is declarative data; URLs are intended to be consumed by an HTML template, loader, or a build script. No input or output is processed directly by this snippet, and the URLs should be updated as library versions are upgraded; malformed or unreachable URLs will cause runtime load errors if referenced in an application.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/cdnurl/__fixtures__/sample.txt#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nhttps://cdnjs.cloudflare.com/ajax/libs/prop-types/15.6.1/prop-types.min.js\n//cdnjs.cloudflare.com/ajax/libs/react/16.3.2/umd/react.production.min.js\nhttps://cdnjs.cloudflare.com/ajax/libs/react-dom/16.3.2/umd/react-dom.production.min.js\nhttps://unpkg.com/babel-standalone@6.26.0/babel.js\nhttps://cdnjs.cloudflare.com/ajax/libs/react-transition-group/2.2.1/react-transition-group.min.js\nhttps://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js\nhttps://cdnjs.cloudflare.com/ajax/libs/react-popper/0.10.4/umd/react-popper.min.js\nhttps://cdnjs.cloudflare.com/ajax/libs/reactstrap/7.1.0/reactstrap.min.js\nhttps://cdnjs.cloudflare.com/ajax/libs/react-router/4.3.1/react-router.min.js\nhttps://cdnjs.cloudflare.com/ajax/libs/react-markdown/4.0.6/react-markdown.js\nhttps://unpkg.com/react-router-dom@4.3.1/umd/react-router-dom.min.js\nhttps://cdnjs.cloudflare.com/ajax/libs/axios/0.18.0/axios.min.js\nhttps://unpkg.com/bootstrap/dist/css/bootstrap.min.css\n\nhttps://cdnjs.cloudflare.com/ajax/libs/axios/\n```\n\n----------------------------------------\n\nTITLE: Validating a Specific Renovate Config File (Console)\nDESCRIPTION: Demonstrates validating a specific configuration file by passing its path (`first_config.json` in this example) as a command-line argument to `renovate-config-validator`, executed via `npx`. This approach bypasses the default location checks and focuses validation solely on the provided file.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/config-validation.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ npx --yes --package renovate -- renovate-config-validator first_config.json\n INFO: Validating first_config_.json\n INFO: Config validated successfully\n```\n\n----------------------------------------\n\nTITLE: Enabling Abort on Error for All Hosts in Renovate JSON\nDESCRIPTION: Sets `abortOnError` to `true` globally within `hostRules` (by omitting `matchHost` and `hostType`), causing Renovate runs to abort upon encountering significant HTTP errors (like timeouts or 5xx errors) from any host it interacts with. By default, Renovate only aborts for known public hosts.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_59\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hostRules\": [\n    {\n      \"abortOnError\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Renovate Configuration File for GitLab Platform (JavaScript)\nDESCRIPTION: Defines Renovate configuration targeting a self-hosted GitLab instance in JavaScript export syntax. Key parameters include endpoint URL, token for authentication, platform identifier, onboardingConfig (for extending preset configs), and the list of repositories to manage. This file must be customized to actual repository names and tokens before use, and can be referenced by setting the RENOVATE_CONFIG_FILE environment variable.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/examples/self-hosting.md#_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  endpoint: 'https://self-hosted.gitlab/api/v4/',\n  token: '**gitlab_token**',\n  platform: 'gitlab',\n  onboardingConfig: {\n    extends: ['config:recommended'],\n  },\n  repositories: ['username/repo', 'orgname/repo'],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Yarn 2+ npmRegistries for Authentication - JSON\nDESCRIPTION: Configures Renovate with hostRules for authenticating to a Yarn 2+ (Berry) npm registry, enabling Renovate to update .yarnrc.yml 'npmRegistries' entries. Inputs include matchHost, hostType, and encrypted token. The Renovate bot will inject credentials and update registry keys for secure package access during dependency updates.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/getting-started/private-packages.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hostRules\": [\n    {\n      \"matchHost\": \"https://npm.pkg.github.com/\",\n      \"hostType\": \"npm\",\n      \"encrypted\": {\n        \"token\": \"<Encrypted PAT Token>\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Renovate Automerge (JSON)\nDESCRIPTION: Sets the Renovate `automerge` configuration option to `true`. This allows Renovate to automatically merge its pull requests once all status checks pass and other conditions (like approvals, if configured) are met. When `automerge` is true and `rebaseWhen` is `auto` (default), Renovate will also proactively rebase branches when they fall behind the base branch. This setting is part of Renovate's JSON configuration.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/updating-rebasing.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"automerge\": true\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Test Runner in Jest\nDESCRIPTION: Specifies an optional custom test runner, such as Jasmine 2, via the `testRunner` configuration option in Jest's settings. This allows integration with different testing backends. Mentioned as added in 0.8.0 and configurable in 0.6.0.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/workers/repository/update/pr/changelog/__fixtures__/jest.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\ntestRunner\n```\n\n----------------------------------------\n\nTITLE: Defining Docker Credentials in Renovate Configuration - JSON\nDESCRIPTION: This JSON snippet demonstrates setting up Docker host authentication using username and password-only credentials in the Renovate config. The 'hostRules' array entry defines a 'hostType' of 'docker' with the supplied credentials, allowing Renovate to authenticate to Docker registries. No explicit host is needed; only the datasource and credential pairs are provided as required. Inputs needed are the Docker username and password; outputs affect Renovate's registry authentication.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/self-hosted-configuration.md#_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hostRules\": [\n    {\n      \"hostType\": \"docker\",\n      \"username\": \"bot\",\n      \"password\": \"botpass123\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Matching Specific Host URLs for Authentication in Renovate (JSON)\nDESCRIPTION: Demonstrates using `matchHost` within `hostRules` to apply specific configurations, like an authentication `token`, to requests targeting a particular base URL (e.g., a private GitLab package registry). This ensures Renovate uses the correct credentials for the specified host, matching the URL exactly.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_68\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hostRules\": [\n    {\n      \"matchHost\": \"https://gitlab.myorg.com/api/v4/packages/npm/\",\n      \"token\": \"abc123\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting JSDOM Environment URL with testURL in Jest Config\nDESCRIPTION: Explains the `testURL` configuration option, highlighted in Jest 0.5.1. This option allows setting the `location` URL for the jsdom test environment.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/workers/repository/update/pr/changelog/__fixtures__/jest.md#_snippet_18\n\nLANGUAGE: json\nCODE:\n```\ntestURL\n```\n\n----------------------------------------\n\nTITLE: Using the toEqual Matcher for Deep Equality in Jest\nDESCRIPTION: Describes the `toEqual` matcher in Jest. Version 0.6.0 updated its behavior to also check the internal `[[Class]]` name of objects, improving accuracy for comparisons like arrays vs. objects.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/workers/repository/update/pr/changelog/__fixtures__/jest.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ntoEqual\n```\n\n----------------------------------------\n\nTITLE: Renovate Custom Manager Identifier\nDESCRIPTION: Refers to the `custom` manager within Renovate. This manager allows users to define bespoke rules and patterns for extracting dependencies from file formats not natively supported or from proprietary files.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/getting-started/use-cases.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n`custom`\n```\n\n----------------------------------------\n\nTITLE: Using Zod's `.transform()` for Inline Data Transformation\nDESCRIPTION: Demonstrates the idiomatic use of Zod's `.transform()` method. The schema `BoxVolume` first validates the input object for `width`, `height`, and `length`, and then immediately transforms the validated object into the calculated volume within the schema definition itself. Requires the `zod` library (`z`).\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/development/zod.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst BoxVolume = z\n  .object({\n    width: z.number(),\n    height: z.number(),\n    length: z.number(),\n  })\n  .transform(({ width, height, length }) => width * height * length);\n\nconst volume = BoxVolume.parse({\n  width: 10,\n  height: 20,\n  length: 125,\n}); // => 25000\n```\n\n----------------------------------------\n\nTITLE: Adding Custom HTTP Headers via Host Rules in Renovate JSON\nDESCRIPTION: Shows how to add a custom HTTP header (`X-custom-header: secret`) to requests sent to `https://domain.com/all-versions`. By default, only headers starting with `X-` are allowed unless configured otherwise by a bot administrator using `allowedHeaders`. Bot admin configurations can bypass this restriction.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_66\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hostRules\": [\n    {\n      \"matchHost\": \"https://domain.com/all-versions\",\n      \"headers\": {\n        \"X-custom-header\": \"secret\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Debugging Memory Leaks with --logHeapUsage Flag in Jest\nDESCRIPTION: Introduces the `--logHeapUsage` command-line flag in Jest 0.7.0. This flag logs memory usage after each test, intended for debugging memory leaks, but may significantly slow down test execution.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/workers/repository/update/pr/changelog/__fixtures__/jest.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n--logHeapUsage\n```\n\n----------------------------------------\n\nTITLE: Running Renovate Config Validator with Defaults (Console)\nDESCRIPTION: Executes the `renovate-config-validator` using `npx` without any arguments. This command checks default configuration file locations (like `renovate.json`, `.github/renovate.json`) and the `RENOVATE_CONFIG_FILE` environment variable for a valid Renovate configuration. It outputs status messages indicating success or failure.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/config-validation.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ npx --yes --package renovate -- renovate-config-validator\n INFO: Validating renovate.json\n INFO: Config validated successfully\n```\n\n----------------------------------------\n\nTITLE: Setting Node.js Version Constraints in Renovate Configuration (JSON)\nDESCRIPTION: This JSON snippet shows how to define language constraints directly within the Renovate configuration file (`renovate.json` or similar). The `constraints` object allows specifying version ranges for languages like `node`. In this example, Renovate is instructed to consider packages compatible with Node.js versions 18.x or 20.x and higher. This configuration is used when project files lack constraint declarations, don't declare any, or when you need to override project-level constraints. Note that these manually set constraints are not automatically updated by Renovate.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/language-constraints-and-upgrading.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"constraints\": {\n    \"node\": \"^18.0.0 || >=20.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Renovate Docker Image in AWS CodeBuild for CodeCommit (buildspec.yml)\nDESCRIPTION: Provides an example AWS CodeBuild `buildspec.yml` configuration to execute Renovate using its official Docker image. It enables the `git-credential-helper` for IAM role authentication, sets necessary environment variables (`RENOVATE_PLATFORM`, `RENOVATE_REPOSITORIES`, `RENOVATE_CONFIG`, `LOG_LEVEL`, `AWS_REGION`), and runs the `renovate/renovate` Docker container, passing environment variables.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/platform/codecommit/readme.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n```yml title=\"Example buildspec.yml file\"\nversion: 0.2\nenv:\n  shell: bash\n  git-credential-helper: yes\n  variables:\n    RENOVATE_PLATFORM: 'codecommit'\n    RENOVATE_REPOSITORIES: '[\"repoName1\", \"repoName2\"]'\n    RENOVATE_CONFIG: '{\"extends\":[\"config:recommended\"]}'\n    LOG_LEVEL: 'debug'\n    AWS_REGION: 'us-east-1'\nphases:\n  build:\n    on-failure: CONTINUE\n    commands:\n      - docker run --rm -e AWS_REGION -e RENOVATE_CONFIG -e RENOVATE_PLATFORM -e RENOVATE_REPOSITORIES -e LOG_LEVEL renovate/renovate\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom registryUrls in renovate.json for Ansible Galaxy Datasource\nDESCRIPTION: This JSON configuration snippet demonstrates how to configure Renovate using a `packageRule` to specify custom registry URLs for the `galaxy-collection` datasource. When Renovate encounters Ansible Galaxy collections, this rule directs it to check the listed URLs (`https://hub.mydomain.com/...`) instead of the default public registry.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/galaxy-collection/readme.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\"galaxy-collection\"],\n      \"registryUrls\": [\n        \"https://hub.mydomain.com/api/galaxy/content/community/\",\n        \"https://hub.mydomain.com/api/galaxy/content/certified/\",\n        \"https://hub.mydomain.com/api/galaxy/content/myprivaterepo/\"\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Restricting Angular Upgrade Version using allowedVersions in JSON\nDESCRIPTION: Provides an example `packageRules` entry to restrict upgrades for the 'angular' package. The `allowedVersions` property uses the semantic version range `<=1.5` to prevent Renovate from upgrading Angular beyond version 1.5.x.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_91\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\"angular\"],\n      \"allowedVersions\": \"<=1.5\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Automerge for devDependencies in Renovate JSON\nDESCRIPTION: This Renovate JSON configuration snippet demonstrates how to enable automerge specifically for development dependencies. Using `packageRules`, it matches dependencies identified as `devDependencies` and sets the `automerge` option to `true` for them, allowing these updates to be merged automatically if tests pass.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchDepTypes\": [\"devDependencies\"],\n      \"automerge\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pip Registry URL with packageRules - JSON\nDESCRIPTION: Demonstrates 'packageRules' in Renovate config for changing the pip registry URL for requirements.txt-based projects. 'matchManagers' is set to 'pip_requirements' to target only pip requirements, with 'registryUrls' providing a new registry to use. Input: JSON config. Output: Renovate uses this alternate registry URL when updating dependencies.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/getting-started/private-packages.md#_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchManagers\": [\"pip_requirements\"],\n      \"registryUrls\": [\"https://docker.mycompany.domain\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding npm hostRules to Renovate Config - JavaScript\nDESCRIPTION: Shows multiple ways of configuring npm authentication in a Renovate config file using the 'hostRules' array. Demonstrates support for npmjs.org, Azure Artifacts, and JFrog Artifactory with methods for specifying tokens, usernames, and passwords using environment variables or static strings. Intended for the bot's main 'config.js'. Inputs include hostType, matchHost, token, username, and password settings. Output: Secure authentication for various npm-compatible registries during Renovate runs.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/getting-started/private-packages.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  hostRules: [\n    {\n      hostType: 'npm',\n      matchHost: 'registry.npmjs.org',\n      token: process.env.NPMJS_TOKEN,\n    },\n    {\n      hostType: 'npm',\n      matchHost:\n        'https://pkgs.dev.azure.com/{organization}/{project}/_packaging/{feed}/npm/registry/',\n      username: 'VssSessionToken',\n      password: process.env.AZURE_NPM_TOKEN,\n    },\n    {\n      // https://www.jfrog.com/confluence/display/JFROG/npm+Registry\n      // Will be passed as `//artifactory.my-company.com/artifactory/api/npm/npm:_auth=<TOKEN>` to `.npmrc`\n      hostType: 'npm',\n      matchHost: 'https://artifactory.my-company.com/artifactory/api/npm/npm/',\n      token: process.env.ARTIFACTORY_NPM_TOKEN,\n      authType: 'Basic',\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple NuGet Feeds in Renovate JSON\nDESCRIPTION: This JSON snippet shows how to configure Renovate to use multiple NuGet feeds for dependency lookups. It uses a `packageRules` entry targeting the `nuget` datasource and lists the desired feed URLs in the `registryUrls` array. Renovate uses a 'merge' strategy, checking all specified feeds for updates and combining the results.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/nuget.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\"nuget\"],\n      \"registryUrls\": [\n        \"https://api.nuget.org/v3/index.json\",\n        \"https://example1.com/nuget/\",\n        \"https://example2.com/nuget/v3/index.json\"\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PR Comment Automerge Trigger in Renovate JSON\nDESCRIPTION: This Renovate JSON configuration enables automerge (`automerge: true`) but delegates the actual merge action by setting `automergeType` to `\"pr-comment\"`. The `automergeComment` specifies the exact comment (\"bors: r+\") that Renovate should post to the pull request, typically used to trigger a merge bot like Bors-NG.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"automerge\": true,\n  \"automergeType\": \"pr-comment\",\n  \"automergeComment\": \"bors: r+\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Artifact Registry Authentication with Encryption in Renovate (JSON)\nDESCRIPTION: Shows how to configure authentication for Google Artifact Registry within a repository's Renovate configuration file (`renovate.json`) using encrypted credentials. Similar to the self-hosted setup, it uses a `hostRule` with `_json_key_base64` as the username, but the Base64 encoded service account password is encrypted using Renovate's encryption feature (`encrypted.password`) for enhanced security within the repository.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/java.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hostRules\": [\n    {\n      \"matchHost\": \"europe-maven.pkg.dev\",\n      \"username\": \"_json_key_base64\",\n      \"encrypted\": {\n        \"password\": \"<encrypted base64 service account>\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example Composer Tilde Range (Zero Major Version)\nDESCRIPTION: A Composer tilde range example where the major version is zero. This behaves similarly to npm's handling for zero-major versions, being equivalent to '>=0.4 <1'.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/versioning/composer/readme.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n`~0.4`\n```\n\n----------------------------------------\n\nTITLE: Referencing Removed Virtual Modules in Jest\nDESCRIPTION: Lists virtual modules (`mock-modules`, `node-haste`, `mocks`) that were removed in Jest 0.7.0. This was a breaking change to an undocumented public API.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/workers/repository/update/pr/changelog/__fixtures__/jest.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmock-modules\n```\n\nLANGUAGE: javascript\nCODE:\n```\nnode-haste\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmocks\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Regex Manager for GitLab Tags in Renovate (JSON)\nDESCRIPTION: This JSON configuration defines a custom regex manager within `renovate.json`. It targets files named `versions.ini` and uses a regular expression with named capture groups (`datasource`, `depName`, `versioning`, `registryUrl`, `currentValue`) to extract dependency information. The `versioningTemplate` defaults to `semver` if not specified in the matched comment. This setup enables Renovate to update versions based on comments in the target INI files, using datasources like `gitlab-tags`.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/gitlab-tags/readme.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"customManagers\": [\n    {\n      \"customType\": \"regex\",\n      \"fileMatch\": [\"^versions.ini$\"],\n      \"matchStrings\": [\n        \"# renovate: datasource=(?<datasource>.*?) depName=(?<depName>.*?)( versioning=(?<versioning>.*?))?( registryUrl=(?<registryUrl>.*?))?\\\\s.*?_VERSION=(?<currentValue>.*)\\\\s\"\n      ],\n      \"versioningTemplate\": \"{{#if versioning}}{{{versioning}}}{{else}}semver{{/if}}\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Enterprise Server API Endpoint\nDESCRIPTION: Sets the API endpoint for GitHub Enterprise Server using the `endpoint` property. This is required when self-hosting Renovate against a GHE instance and must point to the specific API v3 URL. This setting can be placed in `config.js`, passed as an environment variable (`RENOVATE_ENDPOINT`), or via a CLI parameter (`--endpoint`).\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/platform/github/readme.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Example in config.js\nendpoint: \"https://github-enterprise.example.com/api/v3/\"\n```\n\n----------------------------------------\n\nTITLE: Setting Source URL for a Package in Renovate - JSON\nDESCRIPTION: Example displaying how to specify or override the 'sourceUrl' for a package ('dummy') within a Renovate 'packageRules' configuration. Dependencies: 'packageRules' and 'sourceUrl'. Input is JSON; effect is to control where Renovate looks for changelogs and links for the specified package.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_129\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"packageRules\\\": [\\n    {\\n      \\\"matchPackageNames\\\": [\\\"dummy\\\"],\\n      \\\"sourceUrl\\\": \\\"https://github.com/org/dummy\\\"\\n    }\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Gradle Wrapper Datasource URLs in Renovate (JSON)\nDESCRIPTION: Shows a Renovate `packageRule` configuration to specify custom URLs for the `gradle-version` datasource. This allows Renovate to check for new Gradle Wrapper versions from alternative locations, such as internal mirrors, proxies, or repositories hosting custom distributions, instead of the default Gradle services endpoint. It targets packages managed by the `gradle-version` datasource and provides a list of `registryUrls`.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/java.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\"gradle-version\"],\n      \"registryUrls\": [\n        \"https://domain.tld/repository/custom-gradle-wrapper/versions.json\"\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Restricting Host Rule Authentication by Manager Type in Renovate JSON\nDESCRIPTION: Shows how to use `artifactAuth` to apply the provided GitLab token (`abc123` for `gitlab.myorg.com`) only when Renovate is processing dependencies for the `composer` manager. This prevents the token from being used for other manager types (e.g., npm, pip) interacting with the same host, which might use different authentication methods.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_62\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hostRules\": [\n    {\n      \"hostType\": \"gitlab\",\n      \"matchHost\": \"gitlab.myorg.com\",\n      \"token\": \"abc123\",\n      \"artifactAuth\": [\"composer\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Dashboard Approval for Root package.json using packageRules in JSON\nDESCRIPTION: Shows how to use `matchFileNames` in `packageRules` to target a specific file, the root `package.json`, and enable the `dependencyDashboardApproval` option exclusively for dependencies listed in that file.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_90\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchFileNames\": [\"package.json\"],\n      \"dependencyDashboardApproval\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Git Credential Helper in AWS CodeBuild (YAML)\nDESCRIPTION: Sets the `git-credential-helper` environment variable to `yes` within an AWS CodeBuild `buildspec.yml` file. This enables integration with AWS CodeCommit using IAM roles and the AWS Git credential helper, allowing Renovate to authenticate without explicit access keys when running in CodeBuild. This assumes the necessary IAM role permissions and helper setup on the build environment.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/platform/codecommit/readme.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml title=\"Add git-credential helper to your buildspec.yml file\"\nenv: git-credential-helper:yes\n```\n```\n\n----------------------------------------\n\nTITLE: Defining GitHub Enterprise HTTPS Auth in Renovate Configuration - JSON\nDESCRIPTION: This JSON snippet sets up Renovate to authenticate with a specific GitHub Enterprise host using HTTPS certificate credentials. Within 'hostRules', a 'hostType' of 'github' matches 'some.github-enterprise.host' and supplies keys for private key, certificate, and certificate authority. Dependencies are valid HTTPS certificates and private keys; key parameters include 'httpsPrivateKey', 'httpsCertificate', and 'httpsCertificateAuthority'. Outputs configure Renovate for secure GitHub Enterprise authentication; ensure private credentials are provided and match the host.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/self-hosted-configuration.md#_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hostRules\": [\n    {\n      \"hostType\": \"github\",\n      \"matchHost\": \"some.github-enterprise.host\",\n      \"httpsPrivateKey\": \"private-key\",\n      \"httpsCertificate\": \"certificate\",\n      \"httpsCertificateAuthority\": \"certificate-authority\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Default Filename for Renovate Repository Configuration\nDESCRIPTION: Renovate looks for repository-specific configuration within the repository itself. The default filename it searches for is `renovate.json`. If multiple config files exist (e.g., `.github/renovate.json`, `renovate.json5`), only the first one found according to a predefined search order is used.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/config-overview.md#_snippet_11\n\nLANGUAGE: text\nCODE:\n```\nrenovate.json\n```\n\n----------------------------------------\n\nTITLE: Example: Ubuntu Dated Codename Version\nDESCRIPTION: Demonstrates the dated codename format (codename-YYYYMMDD) for Ubuntu container images, such as 'noble-20240423'. This format pins the image to a specific build date within a release series.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/versioning/ubuntu/readme.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nnoble-20240423\n```\n\n----------------------------------------\n\nTITLE: Default Location and Filename for Renovate Inherited Configuration\nDESCRIPTION: When `inheritConfig` is enabled in global config, Renovate looks for inherited settings. By default, it checks the `{{parentOrg}}/renovate-config` repository for an `org-inherited-config.json` file. These defaults can be configured using `inheritConfig*` settings.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/config-overview.md#_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n{{parentOrg}}/renovate-config\n```\n\nLANGUAGE: text\nCODE:\n```\norg-inherited-config.json\n```\n\n----------------------------------------\n\nTITLE: Configuring Renovate AWS ECR Authentication using AWS CLI (JSON)\nDESCRIPTION: Configures Renovate `hostRules` in JSON to authenticate with AWS ECR using credentials obtained via the `aws ecr get-login-password` command. The `username` must be explicitly set to `AWS`. The corresponding password (obtained from the AWS CLI command) should be provided, typically encrypted within the configuration.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/docker.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hostRules\": [\n    {\n      \"hostType\": \"docker\",\n      \"matchHost\": \"12345612312.dkr.ecr.us-east-1.amazonaws.com\",\n      \"username\": \"AWS\",\n      \"encrypted\": {\n        \"password\": \"w...A\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Specific File Paths in Renovate (JSON)\nDESCRIPTION: Configures Renovate to exclude files matching the provided glob pattern (`**/examples/**`) from its dependency scanning process using the `ignorePaths` array. This prevents Renovate from autodiscovering or updating dependencies within the specified paths.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_77\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ignorePaths\": [\"**/examples/**\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping Dependency Updates by Type and Update Level - Renovate Bot - JSON\nDESCRIPTION: This example groups multiple dependency updates into a single PR by matching development dependency types and update levels (patch and minor). The configuration uses 'packageRules' with 'matchDepTypes', 'matchUpdateTypes', and 'groupName' fields to define the grouping. Prerequisite is that Renovate uses this JSON configuration; changes take effect by batching relevant updates under the shared group name. Key inputs are dependency types and update types; output is grouped PRs for matching updates.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_52\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchDepTypes\": [\"devDependencies\"],\n      \"matchUpdateTypes\": [\"patch\", \"minor\"],\n      \"groupName\": \"devDependencies (non-major)\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Renovate Comment Directives for Hashicorp Version Tracking (YAML)\nDESCRIPTION: Demonstrates how to annotate a variable in a YAML file (e.g., an Ansible variable file) with a `# renovate:` comment directive. This allows the custom regex manager defined in the corresponding Renovate configuration to identify 'nomad' as the dependency (`depName`) to be updated by the 'custom.hashicorp' datasource.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/custom/readme.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n# renovate: depName=nomad\nnomad_version: 1.6.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Renovate to Use SemVer for Docker Images - JSON\nDESCRIPTION: This JSON snippet is a configuration for Renovate, instructing it to apply the semver versioning scheme to Docker image dependencies matching whitesource/renovate. Dependencies include a Renovate bot instance. Key parameters are matchDatasources, matchPackageNames, and versioning. Inputs are pattern matches for image selection, and the output is Renovate behavior conforming to semantic versioning for the specified dependency.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/dockerfile/readme.md#_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\"docker\"],\n      \"matchPackageNames\": [\"whitesource/renovate\"],\n      \"versioning\": \"semver\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Renovate CLI via npm (Shell)\nDESCRIPTION: Demonstrates installing the Renovate CLI tool globally using npm. Required dependencies include Node.js and npm, with renovate being fetched from the npm registry as a global command. No input parameters are needed, and the expected output is the availability of the “renovate” command for CLI usage.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/examples/self-hosting.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -g renovate\n```\n\n----------------------------------------\n\nTITLE: Recommended: Referencing App Secrets in Renovate Config (JSON)\nDESCRIPTION: Illustrates the recommended method for handling secrets in Renovate configuration. Instead of embedding encrypted values, it references a secret named `GITHUB_COM_TOKEN` stored securely in the Mend Cloud App settings using the `{{ secrets.SECRET_NAME }}` template syntax within the `hostRules`. This requires the secret to be pre-configured in the corresponding App settings.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/mend-hosted/migrating-secrets.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hostRules\": [\n    {\n      \"matchHost\": \"github.com\",\n      \"token\": \"{{ secrets.GITHUB_COM_TOKEN }}\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Automerge Package Rules with Renovate JSON\nDESCRIPTION: This JSON snippet shows how to override inherited global automerge settings from a .github repository in Renovate by configuring the packageRules which match all package names and disable automerge. Requires a correctly structured renovate.json file extending from a shared config or organization repository. Key parameters include $schema (for validation), extends, and packageRules. The input is a renovate.json file in the repository root; the output is that automerge is turned off for all dependencies in that repo, regardless of global config—note the use of \"matchPackageNames\": [\"*\"] and \"automerge\": false.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/key-concepts/automerge.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://docs.renovatebot.com/renovate-schema.json\",\n  \"extends\": [\"local>org-name/.github:renovate-config\"],\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\"*\"],\n      \"automerge\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Providing an .npmrc Authentication Line in Renovate Config - JSON\nDESCRIPTION: Defines the 'npmrc' field in Renovate JSON config to directly provide an authentication token for a registry. This enables Renovate to authenticate without using repository-checked-in .npmrc files. Key: A valid registry URL and auth token must be inserted. Input: npmrc string. Output: Renovate uses this string as its .npmrc for all npm operations.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/getting-started/private-packages.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"npmrc\": \"//some.registry.com/:_authToken=abcdefghi-1234-jklmno-aac6-12345567889\"\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying packageRules for PyPI registry URLs in Renovate (JSON)\nDESCRIPTION: A Renovate configuration example in JSON format that defines custom packageRules. For dependencies sourced from PyPI, this rule overrides the default registry by specifying a new registry URL through the registryUrls array. Requires Renovate to be configured with this JSON (e.g. renovate.json). matchDatasources targets PyPI dependencies; registryUrls lists alternative indexes. Input is the configuration object; output is Renovate using the specified PyPI registry for updates.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/python.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"packageRules\\\": [\\n    {\\n      \\\"matchDatasources\\\": [\\\"pypi\\\"],\\n      \\\"registryUrls\\\": [\\\"http://example.com/private-pypi/\\\"]\\n    }\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Using Secrets in Renovate Repository Configuration (JSON)\nDESCRIPTION: Shows how to utilize a previously defined secret (like `GOOGLE_TOKEN`) within a repository's configuration file (e.g., `renovate.json`) or a shared preset. Secrets are accessed using Handlebars-style template syntax `{{ secrets.SECRET_NAME }}`. This example demonstrates using the secret to provide a token for a specific host rule.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/self-hosted-configuration.md#_snippet_35\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"hostRules\": [\n    {\n      \"matchHost\": \"google.com\",\n      \"token\": \"{{ secrets.GOOGLE_TOKEN }}\"\n    }\n  ]\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Overriding Maven Datasource Repository URLs in Renovate (JavaScript)\nDESCRIPTION: Illustrates how to configure Renovate using JavaScript (`config.js`) to look up Maven dependency versions from specific custom repositories instead of the default ones (like Maven Central). It uses a `packageRule` targeting the `maven` datasource and specifies an array of custom repository URLs in the `registryUrls` property.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/java.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  packageRules: [\n    {\n      matchDatasources: ['maven'],\n      registryUrls: ['https://repo-a.tld/repo', 'https://repo-b.tld/repo'],\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Automerge Non-Major Updates in SemVer Ecosystem - Renovate JSON\nDESCRIPTION: This Renovate configuration automerges minor and patch updates for dependencies that are not pre-1.0.0 in SemVer-compliant ecosystems. The rule uses 'matchUpdateTypes' for 'minor' and 'patch', and excludes versions that match the regular expression pre-1.0.0 via 'matchCurrentVersion'. Dependencies: Renovate needs to use this JSON configuration, and the excluded dependencies are those not meeting SemVer's non-breaking promise. Input is a rules array, output is automatic merging of qualifying updates.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/key-concepts/automerge.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"packageRules\": [\\n    {\\n      \"matchUpdateTypes\": [\"minor\", \"patch\"],\\n      \"matchCurrentVersion\": \"!/^0/\",\\n      \"automerge\": true\\n    }\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping Neutrino Monorepo Packages using packageRules in JSON\nDESCRIPTION: Illustrates grouping the 'neutrino' package and any packages starting with '@neutrino/' into a single PR named 'neutrino monorepo'. This `packageRules` entry combines an exact match and a prefix pattern in `matchPackageNames`.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_88\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\"neutrino\", \"@neutrino/**\"],\n      \"groupName\": \"neutrino monorepo\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping ESLint Packages using packageRules in JSON\nDESCRIPTION: Demonstrates grouping packages starting with 'eslint' into a single PR named 'eslint packages' using a `packageRules` entry in Renovate configuration. It utilizes `matchPackageNames` with a wildcard pattern `eslint**`.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_86\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\"eslint**\"],\n      \"groupName\": \"eslint packages\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NuGet hostRules for Azure DevOps - JavaScript\nDESCRIPTION: Configures hostRules for NuGet feeds, using a PAT for Azure DevOps, including dummy username (value doesn't matter for Azure), feed URL, and authentication settings. Enables Renovate to add sources securely using dotnet CLI during dependency update runs.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/getting-started/private-packages.md#_snippet_15\n\nLANGUAGE: js\nCODE:\n```\nhostRules: [\n  {\n    matchHost: 'https://pkgs.dev.azure.com/<org>/',\n    hostType: 'nuget',\n    username: 'user', // doesn't matter for azure\n    password: '<PAT>',\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Displaying Config Migration Checkbox in Markdown\nDESCRIPTION: This snippet shows the Markdown text for a checkbox that appears in the Renovate Dependency Dashboard. This checkbox allows users to trigger an on-demand configuration migration Pull Request when automatic migration PRs are disabled but migration is necessary.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/config-migration.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\n- [ ] Select this checkbox to let Renovate create an automated Config Migration PR.\n```\n```\n\n----------------------------------------\n\nTITLE: Describing Pessimistic Version Constraint Operator in RubyGems - Markdown\nDESCRIPTION: This snippet uses Markdown inline code to emphasize the '~>' operator, which serves as the 'pessimistic' greater than or equals version constraint in RubyGems. The snippet is for documentation and does not require dependencies. It is used to educate developers on syntax differences in specifying version ranges between RubyGems and npm. Outputs are static and are intended for rendered documentation to explain semantic concepts.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/versioning/ruby/readme.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n`~>`\n```\n\n----------------------------------------\n\nTITLE: Using ES6 Import Syntax - TypeScript\nDESCRIPTION: Demonstrates correct and incorrect styles for importing modules in TypeScript, enforcing the ES6 import pattern for consistency and maintainability. Recommends named imports and avoiding CommonJS require imports. No dependencies outside of TypeScript module system. Inputs/outputs: import statements; must use ES6 module style.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/development/best-practices.md#_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport { square, diag } from 'lib';\n\n// You may also use:\n\nimport * as lib from 'lib';\n```\n\nLANGUAGE: ts\nCODE:\n```\nimport x = require('...');\n```\n\n----------------------------------------\n\nTITLE: Setting Renovate replacement approach to alias for npm (JSON)\nDESCRIPTION: Configures the `replacementApproach` for the `npm` manager to `alias` in the Renovate configuration. This instructs Renovate to use npm aliases (e.g., `\"foo\": \"npm:@my/foo@1.2.4\"`) when replacing a dependency (`foo`) instead of changing the package name directly in `package.json`.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_138\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"replacementApproach\": \"alias\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Setting a Static Custom Changelog URL using changelogUrl in JSON\nDESCRIPTION: Shows how to provide a specific URL for a package's changelog using the `changelogUrl` option within a `packageRules` entry. This example sets a custom changelog URL for the 'dummy' package. Renovate will link to this URL in the PR body instead of trying to fetch and embed the content.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_94\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\"dummy\"],\n      \"changelogUrl\": \"https://github.com/org/dummy\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Loose Versioning for Docker Images - Renovate JSON\nDESCRIPTION: This JSON snippet provides an example Renovate configuration to enable 'loose' versioning for Docker images with non-standard tagging schemes. It defines a package rule targeting datasources from Docker and specific package names where normal SemVer parsing may fail. The top-level property is 'packageRules', which is an array of rule objects. Each rule object includes 'matchDatasources' (specifying the type of packages, e.g., Docker), 'matchPackageNames' (listing the affected Docker image names), and a 'versioning' property (such as 'loose' to instruct Renovate to relax version parsing). This snippet must be placed within the Renovate configuration file (e.g., renovate.json), and proper permissions/configuration of Renovate are required.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/versioning/docker/readme.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\\n  \\\"packageRules\\\": [\\n    {\\n      \\\"matchDatasources\\\": [\\\"docker\\\"],\\n      \\\"matchPackageNames\\\": [\\\"badly-versioned-docker-image\\\"],\\n      \\\"versioning\\\": \\\"loose\\\"\\n    }\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Digest Updates for Docker Compose in Renovate (JSON)\nDESCRIPTION: Provides a `renovate.json` configuration snippet that selectively disables Docker image digest updates specifically for Docker Compose files (`docker-compose.yml`, `compose.yml`). This is achieved by setting `enabled: false` within the `docker-compose.digest` configuration block, while leaving digest updates enabled for other managers like Dockerfile.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/docker.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"docker-compose\": {\n    \"digest\": {\n      \"enabled\": false\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pinning attrs Package Version and Hashes in requirements.txt\nDESCRIPTION: Specifies the exact version 21.2.0 for the 'attrs' Python package. It includes two SHA256 hashes to verify the integrity of the downloaded package, ensuring that the correct and untampered version is installed. This entry is part of the dependency list automatically generated by 'pip-compile'.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/pip-compile/__fixtures__/requirementsWithHashes.txt#_snippet_0\n\nLANGUAGE: requirements\nCODE:\n```\nattrs==21.2.0 \\\n    --hash=sha256:149e90d6d8ac20db7a955ad60cf0e6881a3f20d37096140088356da6c716b0b1 \\\n    --hash=sha256:ef6aaac3ca6cd92904cdd0d83f629a15f18053ec84e6432106f7a4d04ae4f5fb\n```\n\n----------------------------------------\n\nTITLE: Mapping hostRules for pip-compile Index URLs (JSON)\nDESCRIPTION: This JSON snippet configures Renovate for pip-compile by specifying fileMatch for requirements.in and adding hostRules associating pypi.my.domain with required credentials. These rules enable Renovate to access the private index using provided username and password, mapping to credentials gathered from environment or configuration. This is critical for successful dependency resolution when private packages are involved. The fileMatch and hostRules patterns must be accurate to avoid authentication failures.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/getting-started/private-packages.md#_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"pip-compile\": {\n    \"fileMatch\": [\"requirements.in\"]\n  },\n  \"hostRules\": [\n    {\n      \"matchHost\": \"pypi.my.domain\",\n      \"username\": \"myuser\",\n      \"password\": \"mypassword\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Dynamic Custom Changelog URL using changelogUrl Template in JSON\nDESCRIPTION: Demonstrates using template variables within the `changelogUrl` option in a `packageRules` entry. This example sets a dynamic changelog URL for the 'dummy' package, incorporating the `{{{sourceDirectory}}}` template variable to point to a file within a monorepo structure.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_95\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\"dummy\"],\n      \"changelogUrl\": \"https://github.com/org/monorepo/blob/{{{sourceDirectory}}}/my-custom-changelog.txt\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example: Ubuntu Release Codename Version\nDESCRIPTION: Shows the codename format for referencing Ubuntu container images, like 'noble' for Ubuntu 24.04 LTS (Noble Numbat). This provides a symbolic reference to a specific Ubuntu release series.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/versioning/ubuntu/readme.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nnoble\n```\n\n----------------------------------------\n\nTITLE: Example Renovate Directives for EKS Addon Filtering (YAML)\nDESCRIPTION: Provides various examples of the `eksAddonsFilter` comment directive used within configuration files. These directives specify the parameters (like addon name, Kubernetes version, region, profile, or default version flag) for Renovate to query the correct EKS addon versions.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/aws-eks-addon/readme.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# discover kube-proxy addon versions without specifying a cluster version.\nrenovate: eksAddonsFilter={\"addonName\":\"kube-proxy\"}\n\n# discover kube-proxy default addon versions\nrenovate: eksAddonsFilter={\"addonName\":\"kube-proxy\", \"default\":true}\n\n# discover vpc-cni addon versions on Kubernetes 1.30 in us-east-1 region using environmental AWS credentials.\nrenovate: eksAddonsFilter={\"kubernetesVersion\":\"1.30\",\"addonName\":\"vpc-cni\",\"region\":\"eu-west-1\"}\n\n# discover vpc-cni addon versions on Kubernetes 1.30 in us-east-1 region using AWS credentials from `renovate-east` profile.\nrenovate: eksAddonsFilter={\"kubernetesVersion\":\"1.30\",\"addonName\":\"vpc-cni\",\"region\":\"us-east-1\",\"profile\":\"renovate-east\"}\n```\n\n----------------------------------------\n\nTITLE: Enhanced Dockerfile with Metadata Comments for Regex Manager\nDESCRIPTION: Presents an advanced Dockerfile example where comments starting with `# renovate:` precede `ENV` variable definitions. These comments provide structured metadata (datasource, depName, packageName, versioning) for each dependency, enabling a single, more generic Renovate regex custom manager rule to handle updates for all listed variables.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/custom/regex/readme.md#_snippet_4\n\nLANGUAGE: dockerfile\nCODE:\n```\n```Dockerfile\n# renovate: datasource=github-tags depName=node packageName=nodejs/node versioning=node\nENV NODE_VERSION=20.10.0\n# renovate: datasource=github-releases depName=composer packageName=composer/composer\nENV COMPOSER_VERSION=1.9.3\n# renovate: datasource=docker packageName=docker versioning=docker\nENV DOCKER_VERSION=19.03.1\n# renovate: datasource=npm packageName=yarn\nENV YARN_VERSION=1.19.1\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling Semantic Commit Messages - Renovate JSON\nDESCRIPTION: Enables semantic commit messages for Renovate by including the ':semanticCommits' preset in the 'extends' array. No additional dependencies are required; place this inside your Renovate configuration. Input is a JSON object with an 'extends' array, expected output is that Renovate PRs and commits use semantic prefixes according to its rules. No custom parameters or constraints apply beyond normal Renovate config structure.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/semantic-commits.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": [\":semanticCommits\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Prioritizing Pull Requests in Renovate Using prPriority - JSON\nDESCRIPTION: Shows how to set custom PR sorting in Renovate with the 'prPriority' field for both dependency types and specific packages. Dependencies: Used in 'packageRules'. Key parameters are 'matchDepTypes', 'prPriority', and 'matchPackageNames'. Input is a JSON array of packageRules; effect is adjusting PR queue order based on custom criteria.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_123\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"packageRules\\\": [\\n    {\\n      \\\"matchDepTypes\\\": [\\\"devDependencies\\\"],\\n      \\\"prPriority\\\": -1\\n    },\\n    {\\n      \\\"matchPackageNames\\\": [\\\"react\\\"],\\n      \\\"prPriority\\\": 5\\n    }\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Specific Sub-Presets in Renovate Configuration (JSON)\nDESCRIPTION: Demonstrates how to use `ignorePresets` to prevent a specific named preset (`group:monorepos`) from being applied when extending a parent preset (`config:recommended`). This allows for selective exclusion of rules inherited from complex base configurations.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_78\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": [\"config:recommended\"],\n  \"ignorePresets\": [\"group:monorepos\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting GCR Token into Renovate Config in GitLab CI (YAML/Shell)\nDESCRIPTION: Demonstrates a GitLab CI `script` block within a YAML configuration. It uses shell commands to dynamically generate a `config.js` file for Renovate. The script fetches a short-lived GCR access token using `gcloud auth print-access-token` and embeds it within the `hostRules` definition in the generated `config.js`, immediately before executing the `renovate` command.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/docker.md#_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nscript:\n  - 'echo \"module.exports = { hostRules: [ { matchHost: ''eu.gcr.io'', token: ''\"$(gcloud auth print-access-token)\"'' } ] };\" > config.js'\n  - renovate $RENOVATE_EXTRA_FLAGS\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Repositories and Dependencies - plaintext\nDESCRIPTION: Defines an extra Python package repository using '--extra-index-url' and lists required packages with exact versions. Some packages specify 'extras' in square brackets for additional features, and comments are included to clarify configuration intent. No external dependencies are required to parse this file but it must be used with package management tools like pip; white space and non-PEP 440 versions may cause issues in strict environments.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/pip_requirements/__fixtures__/requirements6.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# Repositories\\n--extra-index-url http://example.com/private-pypi/\\n# Packages\\nDjango[argon2]==2.0.12\\ncelery [redis]==4.1.1\\nfoo [bar] == 3.2.1 # handles extra white space\\nsome-package==0.3.1\\nsome-other-package==1.0.0\\nnot_semver==1.9\n```\n\n----------------------------------------\n\nTITLE: Enabling the Dependency Dashboard via Direct Boolean - Renovate - JSON\nDESCRIPTION: Shows an alternative method for enabling the Dependency Dashboard by explicitly setting 'dependencyDashboard' to true in the Renovate configuration. This snippet assumes the configuration file is in use. Only the 'dependencyDashboard' property is required and expected inputs are a boolean value setting (true).\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/key-concepts/dashboard.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencyDashboard\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Lock File Maintenance in Renovate JSON Config\nDESCRIPTION: This JSON snippet demonstrates how to enable the `lockFileMaintenance` feature in Renovate by setting the `enabled` property within the `lockFileMaintenance` object to `true`. This instructs Renovate to periodically refresh lock files by deleting and regenerating them using the relevant package manager, typically scheduled weekly.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_81\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lockFileMaintenance\": { \"enabled\": true }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Renovate Updates for npm devDependencies (JSON)\nDESCRIPTION: This `renovate.json` snippet configures a package rule to disable Renovate updates specifically for npm `devDependencies`. It targets the `npm` manager and the `devDependencies` dependency type, setting `enabled` to `false` for matching dependencies.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_39\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchManagers\": [\"npm\"],\n      \"matchDepTypes\": [\"devDependencies\"],\n      \"enabled\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Per-Repository Secrets in Renovate config.js (JavaScript)\nDESCRIPTION: Illustrates how to configure secrets specific to a particular repository (`abc/def`) by adding a `secrets` object within that repository's configuration block inside the `repositories` array in `config.js`. This approach allows for granular secret management on a per-repository basis.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/self-hosted-configuration.md#_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nmodule.exports = {\n  repositories: [\n    {\n      repository: 'abc/def',\n      secrets: {\n        GOOGLE_TOKEN: 'abc123',\n      },\n    },\n  ],\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Caret SemVer Range in package.json\nDESCRIPTION: Illustrates a dependency entry in `package.json` using a caret (`^`) range. This range (`^1.1.0`) allows updates to any version greater than or equal to 1.1.0 but less than 2.0.0, including minor and patch releases.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/dependency-pinning.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"foobar\": \"^1.1.0\"\n```\n\n----------------------------------------\n\nTITLE: Triggering GitHub Actions Workflow on Pull Requests in YAML\nDESCRIPTION: Defines the `on` trigger for a GitHub Actions workflow. This configuration ensures the workflow runs only when pull requests targeting the `main` branch are opened or updated (synchronized).\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/user-stories/maintaining-aur-packages-with-renovate.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  pull_request:\n    types:\n      - opened\n      - synchronize\n    branches:\n      - main\n```\n\n----------------------------------------\n\nTITLE: Setting Python Version Constraints in Renovate (JSON)\nDESCRIPTION: This JSON configuration demonstrates how to use the `constraints` option to restrict dependency updates based on language support. Here, it specifies that Renovate should only consider updates compatible with Python version 2.7 when checking datasource versions.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"constraints\": {\n    \"python\": \"2.7\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CircleCI Workflow Using Renovate Orb (YAML)\nDESCRIPTION: Configures CircleCI workflows to run the self-hosted Renovate bot hourly using the daniel-shuy/renovate orb. The config specifies the orb version, a custom config file path, and uses a cron schedule for automation. Inputs include the Renovate orb and an optional config file; outputs are Renovate runs on targeted repositories. Note: This configuration is for an outdated orb version.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/examples/self-hosting.md#_snippet_7\n\nLANGUAGE: yml\nCODE:\n```\nversion: '2.1'\norbs:\n  renovate: daniel-shuy/renovate@2.2.0\nworkflows:\n  renovate:\n    jobs:\n      - renovate/self-hosted:\n          config_file_path: renovate-config.js\n    nightly:\n      triggers:\n        - schedule:\n            cron: 0 * * * *\n            filters:\n              branches:\n                only:\n                  - main\n```\n\n----------------------------------------\n\nTITLE: Securing Private Composer Credentials with Encrypted Host Rules in Renovate (JSON)\nDESCRIPTION: This JSON snippet describes how to provide encrypted Composer authentication credentials to Renovate using the 'encrypted' object. Each host rule specifies the encrypted 'username', 'password', or 'token', which can be generated through Renovate's encryption tool. This approach increases security for sensitive data, particularly when using hosted Renovate services. Required parameters include 'matchHost', 'hostType', and an 'encrypted' object containing encrypted credential fields. Inputs are JSON objects with encrypted credentials. Outputs are credential-protected connections to private registries. Credentials inside 'encrypted' must be generated appropriately for Renovate to decrypt at runtime.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/php.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hostRules\": [\n    {\n      \"matchHost\": \"some.vendor.com\",\n      \"hostType\": \"packagist\",\n      \"encrypted\": {\n        \"username\": \"<your-encrypted-username>\",\n        \"password\": \"<your-encrypted-password>\"\n      }\n    },\n    {\n      \"matchHost\": \"bearer-auth.for.vendor.com\",\n      \"hostType\": \"packagist\",\n      \"encrypted\": {\n        \"token\": \"<your-encrypted-token>\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Arrow Functions in Expressions - TypeScript\nDESCRIPTION: Highlights replacing anonymous function expressions with arrow functions for clarity, particularly when the enclosing 'this' context is required. Demonstrates both the discouraged and recommended styles for function arguments used as callbacks. No external dependencies; works with standard TypeScript. Inputs are functions requiring callback behavior; ensures 'this' context remains unchanged.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/development/best-practices.md#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nbar(function(){...})\n```\n\nLANGUAGE: ts\nCODE:\n```\nbar(() => {\n  this.doSomething();\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Minimum IAM Permissions for AWS AMI Datasource in JSON\nDESCRIPTION: This JSON snippet specifies an IAM policy statement granting the `ec2:DescribeImages` action permission on all resources (`\"Resource\": \"*\"`). This is the minimum required privilege for the Renovate AWS AMI datasource to function, allowing it to query AWS for the latest AMI information based on provided filters.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/aws-machine-image/readme.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowEc2ImageLookup\",\n  \"Effect\": \"Allow\",\n  \"Action\": [\"ec2:DescribeImages\"],\n  \"Resource\": \"*\"\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Conan Package Version Range\nDESCRIPTION: This syntax defines a range of acceptable package versions. Conan will use any version that falls strictly between the lower and upper bounds specified.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/versioning/conan/readme.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n`[>1.1 <2.1]`\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Hub Authentication in Renovate (JavaScript)\nDESCRIPTION: Demonstrates how to set up authentication for Docker Hub within Renovate's `config.js` using `hostRules`. It specifies the `hostType` as 'docker', provides a static username, and securely retrieves the corresponding password from the `DOCKER_HUB_PASSWORD` environment variable at runtime.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/docker.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n// config.js\nmodule.exports = {\n  hostRules: [\n    {\n      hostType: 'docker',\n      username: '<your-username>',\n      password: process.env.DOCKER_HUB_PASSWORD,\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Comparing Maven Versions with Maven Artifact - Shell\nDESCRIPTION: This shell snippet demonstrates how to use the maven-artifact JAR to compare Maven version strings from the command line. The command requires Java and a downloaded maven-artifact-*.jar file (as suggested in the prerequisites), with Maven version strings provided as arguments. The tool outputs both parsed canonical forms and the results of Maven's version comparison, helping developers understand version precedence according to Maven's logic. The snippet is intended for development and experimentation and assumes that the correct JAR version matching your Maven installation is present in your working directory.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/versioning/maven/readme.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ java -jar maven-artifact-*.jar 3.2.4-alpha-1 3.2.4-SNAPSHOT 3.2.4.0\nDisplay parameters as parsed by Maven (in canonical form) and comparison result:\n1. 3.2.4-alpha-1 == 3.2.4.alpha.1\n   3.2.4-alpha-1 < 3.2.4-SNAPSHOT\n2. 3.2.4-SNAPSHOT == 3.2.4.snapshot\n   3.2.4-SNAPSHOT < 3.2.4.0\n3. 3.2.4.0 == 3.2.4\n\n```\n\n----------------------------------------\n\nTITLE: Parsing Dependencies from YAML Files with Custom JSONata Manager - JSON\nDESCRIPTION: This JSON snippet sets up a Renovate custom manager for YAML files, leveraging the 'jsonata' engine and specifying 'fileFormat' as 'yaml'. Its matchStrings field is a JSONata expression to extract the required fields from YAML package documents. Dependencies: Requires a YAML-parsable file and Renovate with JSONata capabilities. Input: YAML file ('file.yml'); Output: extracted dependency-name/version pairs.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"customManagers\\\": [\\n    {\\n      \\\"customType\\\": \\\"jsonata\\\",\\n      \\\"fileFormat\\\": \\\"yaml\\\",\\n      \\\"fileMatch\\\": [\\\"file.yml\\\"],\\n      \\\"matchStrings\\\": [\\n        \\\"packages.{ 'depName': package, 'currentValue': version }\\\"\\n      ]\\n    }\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Setting GitHub PAT via --token CLI Argument (Shell)\nDESCRIPTION: Provides the GitHub Personal Access Token (PAT) directly on the command line using the `--token=` flag when executing the Renovate command. Ensure the PAT has the required scopes (`repo`, `workflow`).\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/platform/github/readme.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nrenovate --token=YOUR_GITHUB_PAT\n```\n\n----------------------------------------\n\nTITLE: Replacing Substrings using Regex with 'replace' Helper (Handlebars)\nDESCRIPTION: Explains the `replace` helper, which replaces all occurrences of a pattern (defined by a regular expression, e.g., `[a-z]+\\.github\\.com`) within a string (`depName`) with a replacement string ('ghc'). It leverages JavaScript's `String.prototype.replace()`.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/templates.md#_snippet_12\n\nLANGUAGE: handlebars\nCODE:\n```\n{{{replace '[a-z]+\\.github\\.com' 'ghc' depName}}}\n```\n\n----------------------------------------\n\nTITLE: Requiring Approval for Major Updates - Renovate Dependency Dashboard - JSON\nDESCRIPTION: This snippet configures Renovate to require approval specifically for major updates by setting the 'dependencyDashboardApproval' property to true within the 'major' object. It is used within a Renovate configuration file and only affects updates categorized as 'major'. The key input is the 'major' object with the corresponding approval flag.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/key-concepts/dashboard.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"major\": {\n    \"dependencyDashboardApproval\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Renovate pip-compile Manager with fileMatch (JSON)\nDESCRIPTION: Activates the Renovate `pip-compile` manager, which is disabled by default (empty `fileMatch` array). This JSON configuration snippet specifies a `fileMatch` pattern (regular expression) to identify the output files (e.g., `requirements.txt`) that the manager should process. Note that `fileMatch` must target the output `.txt` files, not the input `.in` files, as Renovate reads the output to extract command arguments.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/pip-compile/readme.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"pip-compile\": {\n    \"fileMatch\": [\"(^|/)requirements\\\\.txt$\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Package Indexes and Requirements - Python\nDESCRIPTION: Specifies custom Python Package Index (PyPI) repository URLs, trusted hosts, and timeout settings for pip operations, followed by a curated list of required packages with pinned versions. Dependencies include having pip installed and access to the specified repositories. Package entries may include extras (e.g., 'Django[argon2]'), strict version requirements (e.g., '==2.0.12'), or non-semver formatting. Input is supplied to pip via a file or STDIN, output is a resolved and installed package environment. Correctly handling whitespace and optional extras is required by pip.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/pip_requirements/__fixtures__/requirements5.txt#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# Repositories\n--index-url https://artifactory.company.com/artifactory/api/pypi/python/simple --trusted-host artifactory.company.com --default-timeout 600\n--extra-index-url http://example.com/private-pypi/\n# Packages\nDjango[argon2]==2.0.12\ncelery [redis]==4.1.1\nfoo [bar] == 3.2.1 # handles extra white space\nsome-package==0.3.1\nsome-other-package==1.0.0\nnot_semver==1.9\n```\n\n----------------------------------------\n\nTITLE: Extending Multiple Renovate Presets in JSON Configuration\nDESCRIPTION: This JSON snippet demonstrates how to use the 'extends' array within a Renovate configuration file (e.g., renovate.json or .github/renovate.json) to apply multiple configuration presets. It combines the 'config:recommended' preset with the 'helpers:pinGitHubActionDigests' preset. Renovate applies the rules from both, with rules from later presets in the array overriding conflicting rules from earlier ones.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/key-concepts/presets.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": [\"config:recommended\", \"helpers:pinGitHubActionDigests\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting GitHub App Installation Token via --token CLI Argument (Shell)\nDESCRIPTION: Specifies the GitHub App installation token using the `--token=` command-line flag when running Renovate. This is an alternative to configuration files or environment variables. The token expires after 1 hour.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/platform/github/readme.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nrenovate --token=ghs_123exampletoken\n```\n\n----------------------------------------\n\nTITLE: Disabling Vulnerability Alerts in Renovate (JSON)\nDESCRIPTION: Shows how to disable the GitHub vulnerability alert integration in Renovate by setting 'enabled' to false within the 'vulnerabilityAlerts' object. This prevents Renovate from creating vulnerability-fix PRs, regardless of alerts present. The input is a JSON object and the effect is a full opt-out from the vulnerability alert feature.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_148\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"vulnerabilityAlerts\\\": {\\n    \\\"enabled\\\": false\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Conan Build Generators and Library Options (INI)\nDESCRIPTION: This configuration snippet, likely for the Conan C/C++ package manager, specifies the desired build system generators (`xcode`, `cmake`, `qmake`) under the `[generators]` section. Under the `[options]` section, it configures dependencies, explicitly setting both the `poco` and `openssl` libraries to be built or used as shared libraries (`shared=True`). The `# A comment` line is ignored.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/conan/__fixtures__/conanfile2.txt#_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[generators]\nxcode\ncmake\nqmake\n\n[options]\npoco:shared=True\nopenssl:shared=True\n\n# A comment\n```\n\n----------------------------------------\n\nTITLE: Example TypeScript File Matching Renovate Custom Manager for AWS AMIs\nDESCRIPTION: This TypeScript code provides examples of how AMI definitions can be identified by the Renovate custom regex manager within `.ts` files. It requires specific comment patterns (`# amiFilter=...`, `# currentImageName=...`) preceding the AMI ID assignment, shown here assigned to a property within an object and as a standalone constant.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/aws-machine-image/readme.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst myConfigObject = {\n  // With AMI name mentioned in the comments\n  // amiFilter=[{\"Name\":\"owner-id\",\"Values\":[\"602401143452\"]},{\"Name\":\"name\",\"Values\":[\"amazon-eks-node-1.21-*\"]}]\n  // currentImageName=unknown\n  my_ami1: 'ami-02ce3d9008cab69cb',\n};\n\n/**\n * Only AMI, no AMI name mentioned\n * amiFilter=[{\"Name\":\"owner-id\",\"Values\":[\"602401143452\"]},{\"Name\":\"name\",\"Values\":[\"amazon-eks-node-1.20-*\"]}]\n * currentImageName=unknown\n */\nconst my_ami2 = 'ami-0083e9407e275acf2';\n```\n\n----------------------------------------\n\nTITLE: Example Paginated Results for Recurring GitHub Fetch (JavaScript)\nDESCRIPTION: Demonstrates example data retrieved during a recurring GitHub GraphQL fetch where a new version exists (4.0.0) and older versions (3.0.1, 3.0.2) have been deleted. Fetching stops after retrieving version 2.2.2 because it's considered 'old' (outside the freshness period defined by the cache TTL) and already exists in the cache. Comments clarify the status (new, fresh, old) and reconciliation outcome for each item.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/util/github/graphql/readme.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Page 1                                                   --- FETCHED AND RECONCILED ---\n[\n  { \"version\": \"4.0.0\", \"releaseTimestamp\": \"2022-12-30\" }, // new    <- item cached\n  { \"version\": \"3.1.1\", \"releaseTimestamp\": \"2022-12-18\" }, // fresh  <- item updated\n  { \"version\": \"3.1.0\", \"releaseTimestamp\": \"2022-12-15\" }, // fresh  <- item updated\n//{ \"version\": \"3.0.2\", \"releaseTimestamp\": \"2022-12-09\" }, // fresh  <- item deleted\n//{ \"version\": \"3.0.1\", \"releaseTimestamp\": \"2022-12-08\" }, // fresh  <- item deleted\n  { \"version\": \"3.0.0\", \"releaseTimestamp\": \"2022-12-05\" }, // fresh  <- item updated\n  { \"version\": \"2.2.2\", \"releaseTimestamp\": \"2022-11-23\" }, // old    <- fetching stopped\n]\n\n// Page 2                                                   --- NOT FETCHED ---\n[\n  { \"version\": \"2.2.1\", \"releaseTimestamp\": \"2022-10-17\" }, // old\n  { \"version\": \"2.2.0\", \"releaseTimestamp\": \"2022-10-13\" }, // old\n  { \"version\": \"2.1.1\", \"releaseTimestamp\": \"2022-10-07\" }, // old\n  { \"version\": \"2.1.0\", \"releaseTimestamp\": \"2022-09-21\" }, // old\n  { \"version\": \"2.0.1\", \"releaseTimestamp\": \"2022-09-18\" }, // old\n]\n\n// Page 3                                                   --- NOT FETCHED ---\n[\n  { \"version\": \"2.0.0\", \"releaseTimestamp\": \"2022-09-01\" }, // old\n]\n```\n\n----------------------------------------\n\nTITLE: Example Docker Image Tag (Semantic Version)\nDESCRIPTION: An example semantic version tag (`14.17.4`) for a Docker image (like `node`). Renovate identifies such tags and can update them to newer patch, minor, or major versions (e.g., `14.17.5`).\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/getting-started/use-cases.md#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n`14.17.4`\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Release References in vendir.yml (YAML)\nDESCRIPTION: This YAML snippet shows how to configure vendir.yml to reference explicit GitHub releases using Renovate for automated tag updates. The snippet includes the repository slug and an optional release tag. 'slug' (in the format org/repo) is required, while 'tag' is needed unless 'tagSelection' is used. Requires vendir and valid access to the target repository.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/vendir/readme.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndirectories:\\n  - path: config/_ytt_lib\\n    contents:\\n      path: github.com/cloudfoundry/cf-k8s-networking\\n      githubRelease:\\n        # slug for repository (org/repo) (required)\\n        slug: k14s/kapp-controller\\n        # use release tag (optional)\\n        # optional if tagSelection is specified (available in v0.22.0+)\\n        tag: v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependencies with Tooling Comments in Python Requirements File\nDESCRIPTION: Defines the required Python packages and specific versions for a Django project using the requirements.txt file format. The snippet pins versions of each package and annotates lines with comments for automation tools like Renovate and pyup to track or ignore updates. Key dependencies include Django, psycopg2, and dj-database-url, essential for project operation. Inputs are not expected as the file is for pip consumption and maintains stable, repeatable build environments.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/pip_requirements/__fixtures__/requirements3.txt#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nDjango==1.11.23 # renovate\ndistribute==0.6.27 # renovate: ignore\ndj-database-url==0.2 # pyup: nothing\npsycopg2==2.4.5 # renovate:\nwsgiref==0.1.2 # something else\n```\n\n----------------------------------------\n\nTITLE: Assigning GitHub team reviewers in Renovate (JSON)\nDESCRIPTION: Illustrates how to assign a GitHub team as a reviewer for Renovate pull requests using the `reviewers` configuration option. The `team:` prefix is required, followed by the team's slug (the last part of the team name, e.g., `foo` for a team named `@organization/foo`).\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_139\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"reviewers\": [\"team:foo\"]\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Applying a Package Rule to Packages with a Name Prefix (JSON)\nDESCRIPTION: This snippet applies a configuration rule to all packages with names starting with 'abc', using a glob pattern ('abc**'). Defined in a 'packageRules' entry, this is helpful for applying common rules, such as assigning reviewers, to a family of related packages. Place it in your Renovate configuration to automate handling for entire package scopes or prefixes.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/faq.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": \"abc**\",\n      \"assignees\": [\"importantreviewer\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Dependencies from JSON Files with Custom JSONata Manager - JSON\nDESCRIPTION: This JSON snippet configures a Renovate custom manager using the 'jsonata' engine to extract dependency names and versions from a JSON file ('file.json'). The matchStrings field provides a JSONata query to locate and output objects with 'depName' and 'currentValue' keys. Dependencies: Requires Renovate's jsonata support, and the project file must be valid JSON in the expected structure. Inputs: JSON file; Outputs: dependency objects extracted for updates.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"customManagers\\\": [\\n    {\\n      \\\"customType\\\": \\\"jsonata\\\",\\n      \\\"fileFormat\\\": \\\"json\\\",\\n      \\\"fileMatch\\\": [\\\"file.json\\\"],\\n      \\\"matchStrings\\\": [\\n        \\\"packages.{ \\\\\\\"depName\\\\\\\": package, \\\\\\\"currentValue\\\\\\\": version }\\\"\\n      ]\\n    }\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Dependency Dashboard and Setting Approval Requirements in Renovate (JSON)\nDESCRIPTION: This JSON configuration snippet demonstrates how to disable the Dependency Dashboard using the ':disableDependencyDashboard' preset or control its display via the dependencyDashboard flag. Additional snippets illustrate requiring manual approval of PRs via the dashboard, either globally, for major updates, or for specific packages using packageRules. This config is applicable to Renovate users wishing to customize or restrict their update workflow.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_34\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": [\"config:recommended\", \":disableDependencyDashboard\"]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencyDashboardApproval\": true\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"major\": {\n    \"dependencyDashboardApproval\": true\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\"/^@package-name/\"],\n      \"dependencyDashboardApproval\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Kubernetes CronJob Manifest for Renovate (YAML)\nDESCRIPTION: Provides a Kubernetes CronJob manifest to schedule Renovate to run hourly, targeting GitHub Enterprise. It specifies the Renovate image, a debug log level, environment secrets, and volume references for configuration. Dependencies include Kubernetes 1.8+ (for CronJobs), the specified Docker image tag, and referenced secrets/configs. Inputs are scheduled by K8s CronJob, and outputs are logs and bot activity as per Renovate's configuration.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/examples/self-hosting.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: batch/v1\nkind: CronJob\nmetadata:\n  name: renovate\nspec:\n  schedule: '@hourly'\n  concurrencyPolicy: Forbid\n  jobTemplate:\n    spec:\n      template:\n        spec:\n          containers:\n            - name: renovate\n              # Update this to the latest available and then enable Renovate on\n              # the manifest\n              image: renovate/renovate:39.252.0\n              args:\n                - user/repo\n              # Environment Variables\n              env:\n                - name: LOG_LEVEL\n                  value: debug\n              envFrom:\n                - secretRef:\n                    name: renovate-env\n          restartPolicy: Never\n```\n\n----------------------------------------\n\nTITLE: Configuring NPM Registry Authentication for Azure Artifacts - INI\nDESCRIPTION: This INI snippet configures the local NPM client to authenticate with a scoped Azure Artifacts/NPM registry, specifying the registry URL (to be customized for the user's org/feed) and enabling always-auth for private feeds. Dependencies: Azure Artifacts enabled in Azure DevOps, correct organization and feed substituted. Inputs: registry URL and always-auth flag. Outputs: allows NPM commands to access private packages in Azure DevOps.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/platform/azure/readme.md#_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nregistry=https://pkgs.dev.azure.com/YOUR-ORG/_packaging/YOUR-FEED/npm/registry/\nalways-auth=true\n\n```\n\n----------------------------------------\n\nTITLE: Configuring RENOVATE_HOST_RULES for GitLab Container Registry (Markdown)\nDESCRIPTION: This snippet demonstrates how to set the RENOVATE_HOST_RULES CI variable as a JSON string in your CI environment to allow the Renovate bot to authenticate against a private GitLab container registry. It uses GitLab-provided environment variables for the registry URL, bot username, and token. This configuration is necessary for Renovate to access private container images during updates.\n\nDependencies: Renovate, GitLab CI/CD, environment variables (CI_REGISTRY, GITLAB_USER_NAME, RENOVATE_TOKEN). The JSON object must be valid and may require escaping depending on how it is entered. Limitations: Only necessary for container images hosted on private GitLab registries; appropriate permissions and token scopes must be set.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/platform/gitlab/readme.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nSet the `RENOVATE_HOST_RULES` CI variable to `[{\"matchHost\": \"${CI_REGISTRY}\",\"username\": \"${GITLAB_USER_NAME}\",\"password\": \"${RENOVATE_TOKEN}\", \"hostType\": \"docker\"}]`.\n```\n\n----------------------------------------\n\nTITLE: Configuring Authenticated NuGet Feeds in Renovate JSON\nDESCRIPTION: This JSON snippet shows how to provide credentials for authenticated private NuGet feeds using `hostRules` in Renovate's configuration. It specifies the `hostType` as `nuget`, matches the specific host URL, and provides the `username` and `password` for Basic HTTP authentication. For Azure DevOps, `matchHost` should be set to `pkgs.dev.azure.com` and a PAT token used.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/nuget.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hostRules\": [\n    {\n      \"hostType\": \"nuget\",\n      \"matchHost\": \"http://example1.com/nuget\",\n      \"username\": \"root\",\n      \"password\": \"p4$$w0rd\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Logging with Static Message Components and Metadata - TypeScript\nDESCRIPTION: Illustrates best practices and anti-patterns for logging, highlighting the use of logger metadata and static message components for error grouping. Shows correct and incorrect usage for different log levels. Assumes a logger object with debug() and warn() methods. Applies when logging complex objects or status messages in TypeScript.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/development/best-practices.md#_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nlogger.debug({ config }, 'Full config');\nlogger.debug(`Generated branchName: ${branchName}`);\nlogger.warn({ presetName }, 'Failed to look up preset');\n```\n\nLANGUAGE: ts\nCODE:\n```\nlogger.debug({ branchName }, 'Generated branchName');\nlogger.warn(`Failed to look up preset ${presetName}`);\n```\n\n----------------------------------------\n\nTITLE: Configuring Renovate Rebase When Behind Base Branch (JSON)\nDESCRIPTION: Sets the Renovate `rebaseWhen` configuration option to `behind-base-branch`. This instructs Renovate to rebase its managed branch whenever it falls behind the repository's base branch, even if there are no merge conflicts. This setting is typically used within a Renovate configuration file (e.g., `renovate.json`).\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/updating-rebasing.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"rebaseWhen\": \"behind-base-branch\"\n```\n\n----------------------------------------\n\nTITLE: Specifying attrs Dependency with Version and Hashes\nDESCRIPTION: This entry in a pip requirements file specifies a dependency on the Python package 'attrs' fixed at version 21.2.0. It includes two SHA256 hashes (`--hash`) to verify the integrity of the downloaded package during installation, enhancing security and reproducibility. The backslash (`\\`) indicates line continuation.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/pip-compile/__fixtures__/requirementsWithUnknownArguments.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nattrs==21.2.0 \\\n    --hash=sha256:149e90d6d8ac20db7a955ad60cf0e6881a3f20d37096140088356da6c716b0b1 \\\n    --hash=sha256:ef6aaac3ca6cd92904cdd0d83f629a15f18053ec84e6432106f7a4d04ae4f5fb\n```\n\n----------------------------------------\n\nTITLE: Configuring Renovate Regex Manager for Helm Chart appVersion (JSON)\nDESCRIPTION: Configures a Renovate `customManager` using `regex` in JSON format to update the `appVersion` in Helm `Chart.yaml` files based on Docker image tags. It sets `datasourceTemplate` to `docker`, matches `Chart.yaml` files, and uses `matchStrings` to extract the Docker image name (`depName`) from a `# renovate: image=` comment and the current version (`currentValue`) from the `appVersion` field.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/custom/regex/readme.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"customManagers\": [\n    {\n      \"customType\": \"regex\",\n      \"datasourceTemplate\": \"docker\",\n      \"fileMatch\": [\"(^|/)Chart\\\\.yaml$\"],\n      \"matchStrings\": [\n        \"#\\\\s?renovate: image=(?<depName>.*?)\\\\s?appVersion:\\\\s?\\\\\"?(?<currentValue>[\\\\w+\\\\.\\\\-]*)\\\"\"\n      ]\n    }\n  ]\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependencies with Hash Verification - pip requirements.txt - requirements\nDESCRIPTION: This snippet lists a Python dependency (Django 1.9.1) using pip's requirements.txt syntax, including two SHA256 hashes for secure verification during installation. It ensures that only the specified version of Django is installed, and the package’s content is verified against the provided hashes to prevent tampering. This approach requires pip version 8.0.0 or higher and hash-checking mode to be effective.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/pip_requirements/__fixtures__/requirements8.txt#_snippet_0\n\nLANGUAGE: requirements\nCODE:\n```\nDjango==1.9.1 \\\n    --hash=sha256:9f7ca04c6dbcf08b794f2ea5283c60156a37ebf2b8316d1027f594f34ff61101 \\\n    --hash=sha256:a29aac46a686cade6da87ce7e7287d5d53cddabc41d777c6230a583c36244a18\n```\n\n----------------------------------------\n\nTITLE: Constraining Go Binary Version in Renovate - JSON\nDESCRIPTION: This JSON snippet demonstrates how to instruct Renovate to use the latest patch version of a specific Go binary (e.g., 1.23). It defines a configuration with the 'constraints' property, specifying the 'go' version. This configuration goes in Renovate's configuration file (e.g. renovate.json). The 'go' field accepts only the major.minor version (not patch level, e.g., '1.23.3' is invalid). The input is Renovate's configuration JSON, and the effect is that Renovate will run with the latest 1.23 Go binary.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/golang.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"constraints\\\": {\\n    \\\"go\\\": \\\"1.23\\\"\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Regex Manager Example for Parsing ENV Lines in YAML/Config - JSON\nDESCRIPTION: This JSON snippet demonstrates configuring a custom regex-type manager in Renovate to capture environment variable version strings from files matching 'values.yaml'. The defined 'matchStrings' expression uses named groups for currentValue, datasource, and depName, enabling extraction from lines like 'ENV ..._VERSION=... # datasource/depName'. Dependencies: Requires Renovate and files matching the provided pattern. Input: config file lines matching the pattern. Output: detected dependencies for update checks.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"customManagers\\\": [\\n    {\\n      \\\"customType\\\": \\\"regex\\\",\\n      \\\"fileMatch\\\": [\\\"values.yaml$\\\"],\\n      \\\"matchStrings\\\": [\\n        \\\"ENV .*?_VERSION=(?<currentValue>.*) # (?<datasource>.*?)/(?<depName>.*?)\\\\\\\\s\\\"\\n      ]\\n    }\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Group Branch Slug in Renovate JSON\nDESCRIPTION: Demonstrates how to use the `groupSlug` option within a `packageRules` entry to define a specific branch name suffix (`dev-dependencies`) for a group named \"devDependencies (non-major)\", overriding the default slugification. This results in branches named like `renovate/dev-dependencies`. This configuration is useful for creating shorter or more specific branch names than the automatically generated ones.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_53\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchDepTypes\": [\"devDependencies\"],\n      \"matchUpdateTypes\": [\"patch\", \"minor\"],\n      \"groupName\": \"devDependencies (non-major)\",\n      \"groupSlug\": \"dev-dependencies\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Pinning Image Tags with Digests in Kustomization Images Section - YAML\nDESCRIPTION: This YAML set demonstrates how to use digests in newTag or as a separate digest field for precise container image pinning. If 'newTag' contains a digest (after @sha256:...), or if the separate 'digest' key is used (possibly tracked as ':latest' if version omitted), kustomize/renovate recognize the image as fully pinned. 'name' defines the image, 'newTag' sets version and digest, while 'digest' exclusively sets the sha256. Prerequisites: a valid sha256 digest. Output pins the image reference to a unique hash.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/kustomize/readme.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- name: image/name\\n  newTag: v0.0.1@sha256:3eeba3e2caa30d2aba0fd78a34c1bbeebaa1b96c7aa3c95ec9bac44163c5ca4f\\n# without a version, digests are tracked as :latest\\n- name: image/name\\n  digest: sha256:3eeba3e2caa30d2aba0fd78a34c1bbeebaa1b96c7aa3c95ec9bac44163c5ca4f\n```\n\n----------------------------------------\n\nTITLE: Specifying single_version_override in Bazel Module - Python\nDESCRIPTION: Demonstrates how to use single_version_override declarations to explicitly pin or redirect version and/or registry for a specific module. When version is present, Renovate ignores the bazel_dep version and skips update checks. When a registry is specified, only that registry is checked for updates. Key inputs are module_name, version, and optional registry.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/bazel.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nbazel_dep(name = \"rules_foo\", version = \"1.2.4\")\n\nsingle_version_override(\n  module_name = \"rules_foo\",\n  version = \"1.2.3\",\n)\n\nbazel_dep(name = \"rules_bar\")\n\nsingle_version_override(\n  module_name = \"rules_bar\",\n  version = \"1.2.3\",\n)\n```\n\n----------------------------------------\n\nTITLE: Overriding Commit Type to 'ci' - Renovate JSON\nDESCRIPTION: Instructs Renovate to use 'ci' as the semantic commit type for all PRs and commit messages, by including ':semanticCommitTypeAll(ci)' in the 'extends' array. No extra dependencies are required. Outputs commit messages like 'ci(deps): ...' and should be used in the Renovate config JSON.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/semantic-commits.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": [\":semanticCommitTypeAll(ci)\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Multiple Channels for Package Lookup - JavaScript\nDESCRIPTION: This code snippet shows a configuration object for looking up a package across multiple channels, prioritizing the Anaconda registry before attempting a lookup on prefix.dev. The 'registryUrls' array lists both the API endpoint for the Anaconda conda-forge channel and the prefix.dev conda-forge channel. When provided to the renovatebot datasource logic, this object enables fallback query strategies. The primary parameters are 'packageName' and 'registryUrls', and the output is channel-ordered lookup behavior. Dependency is the application logic that supports this configuration format.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/conda/readme.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  packageName: 'some-package',\n  registryUrls: [\n    \"https://api.anaconda.org/package/conda-forge/\",\n    \"https://prefix.dev/conda-forge/\",\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Docker User and Group in Renovate Configuration - JSON\nDESCRIPTION: This JSON snippet sets the UID and GID for Docker-based tools run by Renovate. The 'dockerUser' field is assigned a string in 'UID:GID' format, with the example setting both to non-root values. Required dependencies: The desired UID and GID must exist in the OS; changing these impacts file permission handling within containers. Outputs allow Renovate's Docker child processes to run as the specified user and group, preventing permission issues.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/self-hosted-configuration.md#_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dockerUser\": \"1001:1002\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Renovate Custom Manager and Package Rule for tfvars (JSON)\nDESCRIPTION: This JSON configuration for `renovate.json` sets up a custom manager and a package rule. The `customManager` uses regex to find variables marked with the specific `# renovate:` comment in `.tfvars` files. The `packageRule` targets the `amazon-eks` package from the `endoflife-date` datasource, defining a regex (`extractVersion`) to strip the `-eks.*` suffix from the version string provided by the datasource before applying the update.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/endoflife-date/readme.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"customManagers\": [\n    {\n      \"customType\": \"regex\",\n      \"description\": \"Update Kubernetes version for Amazon EKS in tfvars files\",\n      \"fileMatch\": [\".+\\\\.tfvars$\"],\n      \"matchStrings\": [\n        \"#\\\\s*renovate:\\\\s*datasource=(?<datasource>.*?) depName=(?<depName>.*?)( versioning=(?<versioning>.*?))?\\\\s.*?_version\\\\s*=\\\\s*\\\"(?<currentValue>.*)\\\"\"\n      ],\n      \"versioningTemplate\": \"{{#if versioning}}{{{versioning}}}{{/if}}\"\n    }\n  ],\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\"endoflife-date\"],\n      \"matchPackageNames\": [\"amazon-eks\"],\n      \"extractVersion\": \"^(?<version>.*)-eks.+$\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Conflicting Renovate Managers (JSON)\nDESCRIPTION: Provides a JSON configuration snippet to disable the `pip_requirements` and `pip_setup` managers within Renovate. This is necessary when using the `pip-compile` manager to avoid processing the same source files (like `*.in` or `setup.py`) twice, as the `pip-compile` manager handles updates originating from these source files.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/pip-compile/readme.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"pip_requirements\": {\n    \"enabled\": false\n  },\n  \"pip_setup\": {\n    \"enabled\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Individual Renovate Options via Environment Variables (Shell)\nDESCRIPTION: Illustrates configuring Renovate using individual environment variables. Each variable corresponds to a specific configuration option, prefixed with `RENOVATE_` (by default) and using upper-camel-case format (e.g., `RENOVATE_TOKEN`, `RENOVATE_GIT_AUTHOR`). These override settings from `RENOVATE_CONFIG` or config files.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/getting-started/running.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nRENOVATE_TOKEN=abc123\n```\n\nLANGUAGE: shell\nCODE:\n```\nRENOVATE_GIT_AUTHOR=a@b.com\n```\n\n----------------------------------------\n\nTITLE: Defining Dependency with Version Pinning and Hashes - pip requirements.txt - requirements\nDESCRIPTION: This snippet specifies the 'bgg' package at version 0.22.1 along with two SHA256 hashes, providing a secure and verifiable method for dependency management. The hashes ensure that the exact package version is fetched and has not been altered, increasing the security of the project’s installation process. It is intended for use with pip's hash-checking mode, necessitating a recent version of pip.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/pip_requirements/__fixtures__/requirements8.txt#_snippet_1\n\nLANGUAGE: requirements\nCODE:\n```\nbgg==0.22.1 \\\n    --hash=sha256:e5172c3fda0e8a42d1797fd1ff75245c3953d7c8574089a41a219204dbaad83d \\\n    --hash=sha256:aaa53aea1cecb8a6e1288d6bfe52a51408a264a97d5c865c38b34ae16c9bff88\n```\n\n----------------------------------------\n\nTITLE: Example Package File: Gemfile (Bundler)\nDESCRIPTION: Shows `Gemfile` as an example of a package file managed by Bundler (Ruby). Renovate identifies dependencies within these files for potential updates.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/getting-started/use-cases.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n`Gemfile`\n```\n\n----------------------------------------\n\nTITLE: Limit AWS SDK Updates to Weekly Using Renovate Package Rules – JSON\nDESCRIPTION: This snippet sets a Renovate packageRules array to configure a schedule so that updates for all packages matching \"@aws-sdk/*\" are only checked and applied on Sunday nights (9 PM to 12 AM), using the cron string \"* 21-23 * * 0\" in the schedule property. This helps reduce notification noise caused by frequent updates to large dependency ecosystems. Inputs include match patterns, description for clarity, and multiple rules or schedules can be added as needed.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/key-concepts/scheduling.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"description\": \"Schedule AWS SDK updates on Sunday nights (9 PM - 12 AM)\",\n      \"matchPackageNames\": [\"@aws-sdk/*\"],\n      \"schedule\": [\"* 21-23 * * 0\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring Prefixed Google Service Account JSON for Renovate GCR/GAR Authentication (Text)\nDESCRIPTION: Illustrates the required format for a Google Cloud service account JSON file when using the `_json_key` authentication method, which supports both GCR and Artifact Registry. The entire JSON object must be prefixed with the literal string `_json_key:` before being base64 encoded for use as a token in Renovate `hostRules` with `authType: Basic`.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/docker.md#_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n_json_key:{\n  \"type\": \"service_account\",\n  \"project_id\": \"sample-project\",\n  \"private_key_id\": \"5786ff7e615522b932a2a37b4a6f9645c4316dbd\",\n  \"private_key\": \"-----BEGIN PRIVATE KEY-----\\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDaOkxZut9uDUHV\\n...\\n/PWs0Wa2z5+IawMD7nO63+b6\\n-----END PRIVATE KEY-----\\n\",\n  \"client_email\": \"renovate-lookup@sample-project.iam.gserviceaccount.com\",\n  \"client_id\": \"115429165445403928973\",\n  \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n  \"token_uri\": \"https://oauth2.googleapis.com/token\",\n  \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\n  \"client_x509_cert_url\": \"https://www.googleapis.com/robot/v1/metadata/x509/renovate-lookup%40sample-project.iam.gserviceaccount.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Repositories for GitHub App via RENOVATE_REPOSITORIES (Shell)\nDESCRIPTION: Specifies the list of repositories for Renovate (running as a GitHub App) using the `RENOVATE_REPOSITORIES` environment variable. Provide a comma-separated string of repository names (`orgname/repo-name`).\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/platform/github/readme.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nexport RENOVATE_REPOSITORIES=\"orgname/repo-1,orgname/repo-2\"\n```\n\n----------------------------------------\n\nTITLE: Filtering Renovate Rules by Exact Filename in JSON\nDESCRIPTION: This JSON configuration uses `matchFileNames` within `packageRules` to target dependencies found in a specific file. This example applies the label 'npm' to dependencies defined directly in the root 'package.json' file, but not in nested ones like 'frontend/package.json'. Matching occurs against both the package file and its lock file if present.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_108\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchFileNames\": [\"package.json\"],\n      \"labels\": [\"npm\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Draft Pull Requests in Renovate Configuration (JSON)\nDESCRIPTION: This configuration snippet sets the `draftPR` option to `true` within a `renovate.json` file. This instructs Renovate to create Pull Requests (or Merge Requests) as drafts instead of regular ones. Note potential conflicts with the `rebase!` command prefix on Forgejo, Gitea, and GitLab.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_36\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"draftPR\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Google Artifact Registry URL for Maven/Gradle in Renovate (JSON)\nDESCRIPTION: This JSON configuration snippet defines a `packageRule` within the repository's Renovate configuration. It directs the `maven` and `gradle` managers to use a specific Google Artifact Registry URL (`https://europe-maven.pkg.dev/<my-gcp-project>/<my-repository>`) for dependency lookups. This rule is essential after setting up authentication (via `hostRules`) to ensure Renovate queries the correct private registry.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/java.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"matchManagers\": [\"maven\", \"gradle\"],\n  \"registryUrls\": [\n    \"https://europe-maven.pkg.dev/<my-gcp-project>/<my-repository>\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Renovate AWS ECR Authentication with Access Keys (JSON)\nDESCRIPTION: Defines a Renovate `hostRules` entry within a JSON configuration to authenticate with a specific AWS ECR host. It uses an AWS Access Key ID as the `username` and requires the corresponding Secret Access Key to be provided (and likely encrypted) as the `password`. This rule applies only to the specified Docker host.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/docker.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hostRules\": [\n    {\n      \"hostType\": \"docker\",\n      \"matchHost\": \"12345612312.dkr.ecr.us-east-1.amazonaws.com\",\n      \"username\": \"AKIAABCDEFGHIJKLMNOPQ\",\n      \"encrypted\": {\n        \"password\": \"w...A\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Renovate Configuration File via Environment Variable (Shell)\nDESCRIPTION: Demonstrates setting the `RENOVATE_CONFIG_FILE` environment variable to specify a custom configuration file path (e.g., `config.yaml`) for Renovate. By default, Renovate looks for `config.js`, but this variable allows using other supported file types (`*.js`, `*.json`, `*.json5`, `*.yaml` or `*.yml`).\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/getting-started/running.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nRENOVATE_CONFIG_FILE=config.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Authentication with a Token via Host Rules in Renovate JSON\nDESCRIPTION: Configures Renovate to use HTTP Basic Authentication for `npm.custom.org`. It uses the provided `token` as the credential part (effectively the password, with an empty username) and sets the `authType` to `Basic`, resulting in an `Authorization: Basic <token>` header. Note that `username` and `password` fields should not be used alongside `authType`.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_63\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hostRules\": [\n    {\n      \"matchHost\": \"npm.custom.org\",\n      \"token\": \"<some-token>\",\n      \"authType\": \"Basic\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Matching Renovate Rules by Exact Package Name in JSON\nDESCRIPTION: This JSON configuration uses `matchPackageNames` for an exact match within `packageRules`. It specifically targets the npm package named 'angular' (matched case-insensitively via `matchDatasources`) and sets its `rangeStrategy` to 'pin'.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_115\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\"npm\"],\n      \"matchPackageNames\": [\"angular\"],\n      \"rangeStrategy\": \"pin\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Renovate Configuration Option: automerge\nDESCRIPTION: Refers to the `automerge` configuration option in Renovate's settings (typically JSON). Setting this to `true` enables Renovate to automatically merge its update Pull Requests if CI checks pass. Often used with internal dependencies.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/getting-started/use-cases.md#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n`automerge`\n```\n\n----------------------------------------\n\nTITLE: Configuring Repository-Specific Settings in Renovate (JavaScript/JSON)\nDESCRIPTION: Provides an example of how to structure the `repositories` array in Renovate configuration. It demonstrates that array elements can be simple strings representing repository paths (like `'g/r2'`) or objects (like `{ repository: 'g/r1', bumpVersion: 'patch' }`) to define repository-specific configuration overrides, such as setting the `bumpVersion` strategy for a particular repository.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/self-hosted-configuration.md#_snippet_31\n\nLANGUAGE: js\nCODE:\n```\n{\n  repositories: [{ repository: 'g/r1', bumpVersion: 'patch' }, 'g/r2'];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Rules for Go Version Bumps - JSON - Markdown\nDESCRIPTION: This JSON snippet defines a Renovate package rule to always bump the Go directive to the latest available version in go.mod files. It matches dependencies with the manager 'gomod', dependency name 'go', and dep type 'golang', using the 'bump' range strategy. Requires Renovate as a dependency and is intended to be placed within the renovate.json configuration file. Inputs are Renovate's package rules and outputs are automated PRs targeting Go version bumps.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/gomod/readme.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchManagers\": [\"gomod\"],\n      \"matchDepNames\": [\"go\"],\n      \"matchDepTypes\": [\"golang\"],\n      \"rangeStrategy\": \"bump\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON Strings with Zod using Helper Utilities\nDESCRIPTION: Demonstrates the correct and recommended way to parse stringified JSON data using a helper utility (`Json` from `schema-utils.ts`). The `Json` helper handles the parsing, and its result is piped (`pipe()`) directly into the Zod schema (`ApiResults`) for validation. Requires the `zod` library (`z`) and the custom `Json` helper.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/development/zod.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst ApiResults = Json.pipe(\n  z.array(\n    z.object({\n      id: z.number(),\n      value: z.string(),\n    }),\n  ),\n);\n\nconst results = ApiResults.parse(input);\n```\n\n----------------------------------------\n\nTITLE: Encrypting Secrets for Renovate Configuration via CLI (Shell)\nDESCRIPTION: This shell command sequence demonstrates how to encrypt a secret for use in Renovate configuration using common command-line tools. It fetches the Renovate public PGP key, prepares a JSON payload with the secret and its scope (organization, optional repository), encrypts it using GPG, and formats the output for inclusion in the `encrypted` configuration section. Requires `curl`, `echo`, `jq` (optional but recommended for validation), `gpg`, `grep`, and `tr`.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_42\n\nLANGUAGE: shell\nCODE:\n```\ncurl https://app.renovatebot.com/renovate.pgp --output renovate.pgp\necho -n '{\"o\":\"your-organization\", \"r\":\"your-repository (optional)\", \"v\":\"your-secret-value\"}' | jq . -c | gpg --encrypt -a --recipient-file renovate.pgp | grep -v '^----' | tr -d '\\n'\n```\n\n----------------------------------------\n\nTITLE: Defining Post-Upgrade Tasks for Angular in renovate.json\nDESCRIPTION: This JSON snippet demonstrates how to configure `postUpgradeTasks` within a `packageRules` block in `renovate.json`. It targets the `@angular/core` package and defines commands to run after an update. The commands utilize templating (`{{{depName}}}`, `{{{currentVersion}}}`, `{{{newVersion}}}`) to dynamically insert update details. Note that `npm ci --ignore-scripts` is included because installs might be skipped by default. The bot's main configuration must whitelist these commands using `allowedCommands`.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/self-hosted-configuration.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\"@angular/core\"],\n      \"postUpgradeTasks\": {\n        \"commands\": [\n          \"npm ci --ignore-scripts\",\n          \"npx ng update {{{depName}}} --from={{{currentVersion}}} --to={{{newVersion}}} --migrate-only --allow-dirty --force\"\n        ]\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for OpenTelemetry Stack (YAML)\nDESCRIPTION: Defines the Docker services for Jaeger (trace storage), Prometheus (metric storage), and the OpenTelemetry Collector using Docker Compose. It specifies container images, ports, command-line flags for Prometheus to enable OTLP receiver, volumes for the collector configuration, and dependencies between services.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/examples/opentelemetry.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: renovate-otel-demo\n\nservices:\n  # Jaeger for storing traces\n  jaeger:\n    image: jaegertracing/jaeger:2.5.0\n    ports:\n      - '16686:16686' # Web UI\n      - '4317' # OTLP gRPC\n      - '4318' # OTLP HTTP\n\n  # Prometheus for storing metrics\n  prometheus:\n    image: prom/prometheus:v3.3.0\n    ports:\n      - '9090:9090' # Web UI\n      - '4318' # OTLP HTTP\n    command:\n      - --web.enable-otlp-receiver\n      # Mirror these flags from the Dockerfile, because `command` overwrites the default flags.\n      # https://github.com/prometheus/prometheus/blob/5b5fee08af4c73230b2dae35964816f7b3c29351/Dockerfile#L23-L24\n      - --config.file=/etc/prometheus/prometheus.yml\n      - --storage.tsdb.path=/prometheus\n\n  otel-collector:\n    # Using the Contrib version to access the spanmetrics connector.\n    # If you don't need the spanmetrics connector, you can use the standard version\n    image: otel/opentelemetry-collector-contrib:0.123.0\n    volumes:\n      - ./otel-collector-config.yml:/etc/otelcol-contrib/config.yaml\n    ports:\n      - '4318:4318' # OTLP HTTP ( exposed to the host )\n      - '4317:4317' # OTLP gRPC ( exposed to the host )\n    depends_on:\n      - jaeger\n      - prometheus\n```\n\n----------------------------------------\n\nTITLE: Setting Git core.autocrlf for Consistent Line Endings in Bash\nDESCRIPTION: This snippet provides the Git command to set the core.autocrlf configuration to 'input', which normalizes line endings to LF on commit and prevents CRLF issues on Windows. Requires Git to be installed and configured on the system. The command updates the global Git configuration, ensuring that Windows developers avoid carriage return problems that may interfere with Renovate processes.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/development/best-practices.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global core.autocrlf input\n```\n\n----------------------------------------\n\nTITLE: Stripping 'v' Prefix from Versions Using Regex in Renovate (JSON)\nDESCRIPTION: Defined in `renovate.json`, this package rule applies to packages named 'baz'. It employs the `extractVersion` option with the regex `^v(?<version>.*)$` to remove a leading 'v' from version strings, capturing the rest into the `version` group (e.g., `v2.0.0` becomes `2.0.0`).\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_47\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\"baz\"],\n      \"extractVersion\": \"^v(?<version>.*)$\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Artifact Registry Authentication (Self-Hosted) in Renovate (JSON)\nDESCRIPTION: JSON configuration snippet for setting up authentication with Google Artifact Registry in a self-hosted Renovate instance. It uses a `hostRule` targeting the Artifact Registry host (`europe-maven.pkg.dev` in this example) and employs `Basic` authentication with the username `_json_key_base64` and a Base64 encoded service account JSON key as the password. This method requires downloading the service account key, encoding it, and adding it directly to the Renovate configuration.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/java.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hostRules\": [\n    {\n      \"matchHost\": \"europe-maven.pkg.dev\",\n      \"username\": \"_json_key_base64\",\n      \"password\": \"<base64 service account>\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Require Manual Approval for All Updates with Renovate (JSON)\nDESCRIPTION: This configuration enables dependency dashboard approval for every update Renovate detects, regardless of package, type, or manager. Set 'dependencyDashboardApproval' at the root of the config (not inside 'packageRules') to apply it globally. Place it in the 'renovate.json' to ensure all PRs need explicit approval before being created, useful for maximum update control.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/faq.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencyDashboardApproval\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Using Templates for Dynamic Labels with `addLabels` in Renovate JSON\nDESCRIPTION: This Renovate configuration snippet shows how to use templates within the `addLabels` option. The `{{depName}}` template will be replaced by the actual dependency name, resulting in a dynamic label being added to the pull request for each dependency update.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"addLabels\": [\"{{depName}}\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing and Validating Local File Content with Result and zod - TypeScript\nDESCRIPTION: This snippet shows how to read a JSON configuration file, validate its content against a zod schema, and handle errors using the Result class in TypeScript. It demonstrates asynchronous wrapping of a file read operation, transformation for schema parsing, and safe result extraction using unwrapOrThrow. Required dependencies are Result, zod, and a utility for reading local files. Key parameters include the file path and the zod schema; output is a validated config object or a thrown error on failure.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/development/zod.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst UserConfig = z.object({\n  /* ... */\n});\n\nconst config = await Result.wrap(readLocalFile('config.json'))\n  .transform((content) => Json.pipe(UserConfig).safeParse(content))\n  .unwrapOrThrow();\n```\n\n----------------------------------------\n\nTITLE: Defining Tilde SemVer Range in package.json\nDESCRIPTION: Illustrates a dependency entry in `package.json` using a tilde (`~`) range. This range (`~1.1.0`) allows updates to any version greater than or equal to 1.1.0 but less than 1.2.0, typically restricting updates to patch releases only within the specified minor version.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/dependency-pinning.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"foobar\": \"~1.1.0\"\n```\n\n----------------------------------------\n\nTITLE: Example Docker Image Digest (SHA256)\nDESCRIPTION: An example Docker image digest (`3419...78d9`), which is a SHA256 hash providing an immutable reference to a specific image layer. Renovate can be configured to update these digests automatically or pin them.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/getting-started/use-cases.md#_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n`341976f40d963a425d627a349a9b0034e1eafffbf4c82a173c1465ee403878d9`\n```\n\n----------------------------------------\n\nTITLE: Example Updated Docker Image Tag (with Variant)\nDESCRIPTION: Represents the updated version tag (`14.17.5-alpine3.11`) that Renovate would propose as an update for an image previously using the `14.17.4-alpine3.11` tag, demonstrating variant preservation.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/getting-started/use-cases.md#_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n`14.17.5-alpine3.11`\n```\n\n----------------------------------------\n\nTITLE: Adding Secure Package Dependency with Single Hash - pip requirements.txt - requirements\nDESCRIPTION: This snippet adds the 'html2text' package at version 2016.1.8, along with a single SHA256 hash for integrity verification. It ensures that only the verified package artifact matching the hash is installed, improving the security and reproducibility of the environment setup. As with the previous entries, pip in hash-checking mode is a prerequisite for effective enforcement.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/pip_requirements/__fixtures__/requirements8.txt#_snippet_2\n\nLANGUAGE: requirements\nCODE:\n```\nhtml2text==2016.1.8 \\\n    --hash=sha256:088046f9b126761ff7e3380064d4792279766abaa5722d0dd765d011cf0bb079\n```\n\n----------------------------------------\n\nTITLE: Setting GitHub App Installation Token in config.js (JavaScript)\nDESCRIPTION: Configures the GitHub App installation token in `config.js` using the `token` property. The token must be a valid installation token (usually starting with `ghs_`) obtained for the app installation and needs regular regeneration as it expires after 1 hour. Older tokens (e.g., from GHE < 3.2) or those not starting with `ghs_` must be prefixed with `x-access-token:`, although this prefix is deprecated.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/platform/github/readme.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ntoken:\"ghs_123exampletoken\"\n```\n\n----------------------------------------\n\nTITLE: Excluding Autodiscovered Repos with Negated Regex in Renovate Config\nDESCRIPTION: This JSON snippet illustrates how to use negation with the `autodiscoverFilter` option when using a regular expression. By prefixing the regex pattern with an exclamation mark (`!`), repositories matching the pattern are excluded. The example `[\"!/project/.*/\"]` configures Renovate to process all autodiscovered repositories *except* those whose path contains `project/`. Note that negated filters should typically be used alone, as combining them with inclusive filters might lead to unexpected behavior since filters are combined with OR logic.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/self-hosted-configuration.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"autodiscoverFilter\": [\"!/project/.*/\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Base Branches with Regex in Renovate JSON\nDESCRIPTION: This JSON snippet demonstrates how to configure the `baseBranches` option in `renovate.json`. It specifies that Renovate should process the 'main' branch and any branch matching the regular expression `/^release\\/.*/' (e.g., 'release/v1.0', 'release/next'). Regular expressions must start and end with '/'. This allows Renovate to manage updates across multiple release streams.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"baseBranches\": [\"main\", \"/^release\\\\/.*/\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTofu as the Preferred Registry in Renovate - JSON\nDESCRIPTION: This snippet configures Renovate to use the OpenTofu registry for Terraform providers and modules by default, overriding the built-in Terraform registry. It defines a `packageRules` block that matches datasources of type `terraform-provider` and `terraform-module`, specifying a custom `registryUrls` array pointing to the OpenTofu registry endpoint. Requires no external dependencies beyond Renovate itself and expects to be placed in a Renovate configuration file. Inputs are an array of rules; the output is Renovate's behavior adjusting to these new registry priorities for applicable dependencies.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/terraform/readme.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\"terraform-provider\", \"terraform-module\"],\n      \"registryUrls\": [\"https://registry.opentofu.org\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Project Homepage URL in Maven pom.xml - XML\nDESCRIPTION: This XML snippet illustrates setting the project's website by adding a top-level <url> property to your Maven pom.xml. Renovate and other tools will display this homepage URL in pull requests and metadata displays. No dependencies are required; simply include the <url> tag with the appropriate project homepage. The input is the correct project homepage URL, and the effect is its presentation in Renovate PRs and metadata panels.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/maven/readme.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<url>https://project.example.com</url>\n```\n\n----------------------------------------\n\nTITLE: Automerge Weekly ESLint Package Updates with Renovate (JSON)\nDESCRIPTION: This snippet adds automerge functionality to the previously scheduled weekly ESLint updates. If updates pass all tests, Renovate will merge them directly into the base branch (\"automergeType\": \"branch\"), otherwise a pull request will be raised. This configuration requires that your CI tests are robust and that Renovate is correctly installed in your workflow.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/noise-reduction.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"description\": \"Schedule updates on Monday mornings(before 4 AM)\",\n      \"matchPackageNames\": [\"/eslint/\"],\n      \"groupName\": \"eslint\",\n      \"schedule\": [\"* 0-3 * * 1\"],\n      \"automerge\": true,\n      \"automergeType\": \"branch\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Timezone in Renovate Configuration – JSON\nDESCRIPTION: This snippet demonstrates how to specify a custom timezone for Renovate schedules using the \"timezone\" property within a JSON config file. The valid values must match IANA time zone database names (e.g., \"America/Los_Angeles\"). Setting this option ensures that all schedule-related rules evaluate in the specified timezone rather than UTC. No external dependencies are required beyond Renovate's config parsing.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/key-concepts/scheduling.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"timezone\": \"America/Los_Angeles\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Merge Group Event - GitHub Actions YAML\nDESCRIPTION: This YAML snippet activates the 'pull_request' and 'merge_group' events for a GitHub Actions workflow. This is a pre-requisite for integrating with GitHub's Merge Queue when using Renovate. Dependencies: Requires GitHub Actions and GitHub repository configuration. Input is the 'on' field in a workflow YAML file; output is workflows triggered on pull requests and merge group events. Ensure that required checks and branch protection rules are set appropriately.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/key-concepts/automerge.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\non:\\n  pull_request:\\n  merge_group:\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Repositories for GitHub App in config.js (JavaScript)\nDESCRIPTION: Specifies the list of repositories Renovate should operate on when running as a GitHub App, using the `repositories` property in `config.js`. It accepts an array of strings, each formatted as `orgname/repo-name`. The GitHub App installation token must have access to these repositories.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/platform/github/readme.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nrepositories: [\"orgname/repo-1\",\"orgname/repo-2\"]\n```\n\n----------------------------------------\n\nTITLE: Filtering Renovate Rules by Base Branch Regex in JSON\nDESCRIPTION: This JSON configuration demonstrates using a regular expression within `matchBaseBranches` in `packageRules`. The rule applies only to base branches starting with 'release/' (e.g., 'release/v1.0', 'release/next'). It disables updates for packages whose names do not start with 'eslint' on these matching branches.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_97\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchBaseBranches\": [\"/^release/.*/\"],\n      \"matchPackageNames\": [\"!/^eslint/\"],\n      \"enabled\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Replacement Name and Version for npm Package in Renovate - JSON\nDESCRIPTION: Shows how to use 'replacementName' and 'replacementVersion' in a package rule to substitute one package for another with a specific version. Dependencies: 'packageRules' with 'matchDatasources', 'matchPackageNames', 'replacementName', and 'replacementVersion' (requires a compatible manager). Input is a JSON fragment specifying an npm package to replace (e.g., 'jade' with 'pug' at version '2.0.0'). Output is the overridden update behavior.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_126\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"packageRules\\\": [\\n    {\\n      \\\"matchDatasources\\\": [\\\"npm\\\"],\\n      \\\"matchPackageNames\\\": [\\\"jade\\\"],\\n      \\\"replacementName\\\": \\\"pug\\\",\\n      \\\"replacementVersion\\\": \\\"2.0.0\\\"\\n    }\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Commands in Renovate config.js\nDESCRIPTION: This JavaScript snippet shows how to configure the `allowedCommands` option in Renovate's `config.js`. It defines an array of regular expressions that specify which commands are permitted to run as part of `postUpgradeTasks`. In this case, it allows `npm ci --ignore-scripts` and `npx ng update` commands. This is crucial for enabling custom scripts during dependency updates, especially when `skipInstalls` is true or when using command templating.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/self-hosted-configuration.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  allowedCommands: ['^npm ci --ignore-scripts$', '^npx ng update'],\n};\n```\n\n----------------------------------------\n\nTITLE: Scheduling Daily Renovate Runs Before 4 AM – JSON\nDESCRIPTION: This snippet configures Renovate to process updates each day before 4 AM using the cron schedule \"* 0-3 * * *\" within the \"schedule\" array property of a JSON config. The \"description\" field clarifies intent. This approach restricts Renovate runs to early-morning hours, minimizing disruptions during working time. Inputs are accepted as an array (even for one cron expression), and all schedules are evaluated in the context of the configured timezone.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/key-concepts/scheduling.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"Schedule daily before 4 AM\",\n  \"schedule\": [\"* 0-3 * * *\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Renovate Custom Regex Manager for INI Files (JSON)\nDESCRIPTION: This JSON snippet defines a custom manager within a `renovate.json` file. It configures Renovate to use a regular expression (`matchStrings`) to find dependency information within files named `versions.ini` (`fileMatch`). The regex extracts datasource type, dependency name, versioning scheme, registry URL, and the current version from specially formatted comments. It sets a default versioning template.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/gitlab-releases/readme.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"customManagers\": [\n    {\n      \"customType\": \"regex\",\n      \"fileMatch\": [\"^versions.ini$\"],\n      \"matchStrings\": [\n        \"# renovate: datasource=(?<datasource>.*?) depName=(?<depName>.*?)( versioning=(?<versioning>.*?))?( registryUrl=(?<registryUrl>.*?))?\\\\s.*?_VERSION=(?<currentValue>.*)\\\\s\"\n      ],\n      \"versioningTemplate\": \"{{#if versioning}}{{{versioning}}}{{else}}semver{{/if}}\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Parameterized Renovate Presets in Configuration\nDESCRIPTION: This JSON snippet demonstrates how to use the parameterized presets defined previously within a Renovate configuration file (`renovate.json`). Arguments are passed within parentheses after the preset name in the `extends` array, like `:labels(dependencies,devops)` and `:assignee(rarkins)`.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/config-presets.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": [\":labels(dependencies,devops)\", \":assignee(rarkins)\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Prefixing Renovate Branches by Directory using `additionalBranchPrefix` in JSON\nDESCRIPTION: This JSON configuration snippet for Renovate utilizes the `additionalBranchPrefix` option with the `{{parentDir}}-` template. This prepends the name of the parent directory (followed by a hyphen) to the default Renovate branch name, useful for organizing branches in monorepos based on package location.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"additionalBranchPrefix\": \"{{parentDir}}-\"\n}\n```\n\n----------------------------------------\n\nTITLE: Securely Configuring Custom Environment Variables with Secrets in JavaScript/JSON5\nDESCRIPTION: This JavaScript/JSON5 configuration illustrates the recommended approach for injecting secret values into `customEnvVariables`. It first defines the secret within the `secrets` block (e.g., reading from `process.env.SECRET_TOKEN`) and then references it using template syntax (`'{{ secrets.SECRET_TOKEN }}'`) within `customEnvVariables`. This ensures the actual secret value is redacted in logs.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/self-hosted-configuration.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  secrets: {\n    SECRET_TOKEN: process.env.SECRET_TOKEN,\n  },\n  customEnvVariables: {\n    SECRET_TOKEN: '{{ secrets.SECRET_TOKEN }}',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Conditional Python Dependencies in Requirements File - Plain Text\nDESCRIPTION: This snippet sets a dependency on the 'attrs' package, requiring version 20.3.0, but only in specified Python environments: either when python_version is at least 2.7 and less than 3.0.0, or when python_full_version is 3.5.0 or higher. This pattern helps manage environment compatibility in CI/CD tools or when distributing Python projects. No additional tools are required beyond standard Python package managers (pip), and the markers ensure dependencies are installed only in compatible environments.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/pip_requirements/__fixtures__/requirements-env-markers.txt#_snippet_0\n\nLANGUAGE: Plain text\nCODE:\n```\nattrs==20.3.0; python_version >= \"2.7\" and python_full_version < \"3.0.0\" or python_full_version >= \"3.5.0\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Authentication via Host Rules in Renovate JSON\nDESCRIPTION: Provides an example of configuring authentication for `docker.io` using `hostRules`. It specifies the target host with `matchHost` and provides `username` and `password` credentials for Renovate to use when interacting with that Docker registry. This is essential for accessing private Docker images.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_54\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hostRules\": [\n    {\n      \"matchHost\": \"docker.io\",\n      \"username\": \"<some-username>\",\n      \"password\": \"<some-password>\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Renovate Logging Behavior via Environment Variables (Bash)\nDESCRIPTION: Specific environment variables control Renovate's logging initialization before standard configuration parsing. These allow setting context identifiers (`LOG_CONTEXT`), enabling file logging (`LOG_FILE`), defining log levels (`LOG_FILE_LEVEL`, `LOG_LEVEL`), and choosing log formats (`LOG_FORMAT` like 'json' or 'pretty').\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/config-overview.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nLOG_CONTEXT\n```\n\nLANGUAGE: bash\nCODE:\n```\nLOG_FILE\n```\n\nLANGUAGE: bash\nCODE:\n```\nLOG_FILE_LEVEL\n```\n\nLANGUAGE: bash\nCODE:\n```\nLOG_FORMAT\n```\n\nLANGUAGE: bash\nCODE:\n```\nLOG_LEVEL\n```\n\n----------------------------------------\n\nTITLE: Defining AWS IAM Policy Permissions for Renovate with CodeCommit (JSON)\nDESCRIPTION: Provides an example AWS IAM policy definition in JSON format, granting Renovate the necessary permissions to interact with AWS CodeCommit repositories. It includes actions like Git operations (Pull, Push), managing pull requests, and accessing repository information. The `Resource` field should be updated to specify the target repositories or set to `\"*\"` for broader access.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/platform/codecommit/readme.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"Example policy JSON file\"\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"RenovatePolicy\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"codecommit:DeleteCommentContent\",\n        \"codecommit:UpdatePullRequestDescription\",\n        \"codecommit:GitPull\",\n        \"codecommit:ListPullRequests\",\n        \"codecommit:GetCommentsForPullRequest\",\n        \"codecommit:ListRepositories\",\n        \"codecommit:UpdatePullRequestTitle\",\n        \"codecommit:GetFile\",\n        \"codecommit:UpdateComment\",\n        \"codecommit:GetRepository\",\n        \"codecommit:CreatePullRequest\",\n        \"codecommit:CreatePullRequestApprovalRule\",\n        \"codecommit:GitPush\",\n        \"codecommit:UpdatePullRequestStatus\",\n        \"codecommit:GetPullRequest\"\n      ],\n      \"Resource\": \"*\"\n    }\n  ]\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Regex Versioning for Python Docker Images (JSON)\nDESCRIPTION: This JSON snippet configures a Renovate `packageRule` for the `python` Docker image datasource. It employs a regex versioning strategy to handle versions that include pre-release indicators and compatibility suffixes. The regex captures `major`, `minor`, `patch`, `prerelease`, and `compatibility` groups.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/versioning/regex/readme.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\"docker\"],\n      \"matchPackageNames\": [\"python\"],\n      \"versioning\": \"regex:^(?<major>\\\\d+)\\\\.(?<minor>\\\\d+)\\\\.(?<patch>\\\\d+)(?<prerelease>[^.-]+)?(-(?<compatibility>.*))?$\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Encrypted Secrets in Renovate hostRules (JSON)\nDESCRIPTION: This JSON configuration snippet demonstrates secure referencing of credentials using Renovate's encrypted secrets syntax, via Mend-hosted Renovate settings. Here, the hostRule for github.com injects a token sourced from encrypted secrets defined in Mend's web UI ({{ secrets.RENOVATE_GITHUB_COM_TOKEN }}). This approach decouples secret storage from code/config files, preventing plain-text secret exposure. The mechanism requires proper secret provisioning and access in the Mend UI before reference.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/getting-started/private-packages.md#_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hostRules\": [\n    {\n      \"matchHost\": \"github.com\",\n      \"token\": \"{{ secrets.RENOVATE_GITHUB_COM_TOKEN }}\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Trace Logging for Custom Managers in Mend Renovate App (JSON)\nDESCRIPTION: Provides a Renovate configuration snippet using `logLevelRemap` to elevate the log level to 'info' for messages matching the regex pattern `/^Custom manager fetcher/`. This is useful for debugging custom datasource fetching issues, particularly when using the hosted Mend Renovate application.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/custom/readme.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"logLevelRemap\": [\n    {\n      \"matchMessage\": \"/^Custom manager fetcher/\",\n      \"newLogLevel\": \"info\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Regex Manager Configuration for Docker Image Migration - JSON\nDESCRIPTION: This JSON config snippet sets up a Renovate custom manager using the regex engine to update Docker image references in YAML files (ending with 'values.yaml'). Its 'matchStrings' regex captures the image name (depName) and tag (currentValue), and the 'autoReplaceStringTemplate' rewrites the image to a new registry and version. Dependencies: Requires Renovate for processing customManagers, and expects YAML files matching 'fileMatch'. Inputs: legacy image line; outputs: updated image reference. Only usable with the regex manager.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"customManagers\\\": [\\n    {\\n      \\\"customType\\\": \\\"regex\\\",\\n      \\\"fileMatch\\\": [\\\"values.yaml$\\\"],\\n      \\\"matchStrings\\\": [\\n        \\\"image:\\\\\\\\s+(?<depName>my\\\\.old\\\\.registry/aRepository/andImage):(?<currentValue>[^\\\\\\\\s]+)\\\"\\n      ],\\n      \\\"depNameTemplate\\\": \\\"my.new.registry/aRepository/andImage\\\",\\n      \\\"autoReplaceStringTemplate\\\": \\\"image: {{{depName}}}:{{{newValue}}}\\\",\\n      \\\"datasourceTemplate\\\": \\\"docker\\\"\\n    }\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Minimal IAM Privileges for AWS RDS Datasource in JSON\nDESCRIPTION: Specifies the minimum AWS IAM permissions policy required for the Renovate `aws-rds` datasource. It grants permission to call the `rds:DescribeDBEngineVersions` action on all resources (`*`), which is necessary for querying available database engine versions via the AWS API.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/aws-rds/readme.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowDBEngineVersionLookup\",\n  \"Effect\": \"Allow\",\n  \"Action\": [\"rds:DescribeDBEngineVersions\"],\n  \"Resource\": \"*\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Renovate for K3s Version Tracking using Custom Datasource (JSON)\nDESCRIPTION: Defines a custom regex manager to find the k3s version in a `k3s.version` file and a custom datasource `k3s` to fetch release information from the K3s update channel API (`update.k3s.io`). It uses a JSONata transformation (`transformTemplates`) to format the API response into the structure Renovate expects, extracting the stable version and constructing URLs.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/custom/readme.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"customManagers\": [\n    {\n      \"customType\": \"regex\",\n      \"fileMatch\": [\"k3s.version\"],\n      \"matchStrings\": [\"(?<currentValue>\\\\S+)\"],\n      \"depNameTemplate\": \"k3s\",\n      \"versioningTemplate\": \"semver-coerced\",\n      \"datasourceTemplate\": \"custom.k3s\"\n    }\n  ],\n  \"customDatasources\": {\n    \"k3s\": {\n      \"defaultRegistryUrlTemplate\": \"https://update.k3s.io/v1-release/channels\",\n      \"transformTemplates\": [\n        \"{\\\"releases\\\":[{\\\"version\\\": $$.(data[id = 'stable'].latest),\\\"sourceUrl\\\":\\\"https://github.com/k3s-io/k3s\\\",\\\"changelogUrl\\\":$join([\\\"https://github.com/k3s-io/k3s/releases/tag/\\\",data[id = 'stable'].latest])}],\\\"sourceUrl\\\": \\\"https://github.com/k3s-io/k3s\\\",\\\"homepage\\\": \\\"https://k3s.io/\\\"}\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Renovate with Docker Image (Shell)\nDESCRIPTION: Presents several valid commands for running the Renovate bot using its Docker image. Examples show how to use “latest”, major, minor, or fully specific semantic version tags to start the container. Running these commands launches Renovate in a new, ephemeral container process.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/examples/self-hosting.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndocker run --rm renovate/renovate\ndocker run --rm renovate/renovate:39\ndocker run --rm renovate/renovate:39.252\ndocker run --rm renovate/renovate:39.252.0\n```\n\n----------------------------------------\n\nTITLE: Declaring Dependencies in Kotlin Script (Kotlin)\nDESCRIPTION: This Kotlin Script example demonstrates how to declare dependencies using `@file:DependsOn` annotations for specific libraries (like `github-actions-kotlin-dsl`, `org.eclipse.jgit`, `lets-plot-kotlin-jvm`) and specify custom repositories using `@file:Repository`. Renovate parses these annotations to identify and update dependency versions.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/kotlin-script/readme.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n```kotlin\n#!/usr/bin/env kotlin\n@file:Repository(\"https://jitpack.io\")\n@file:DependsOn(\"com.github.krzema12:github-actions-kotlin-dsl:main-SNAPSHOT\")\n@file:DependsOn(\"org.eclipse.jgit:org.eclipse.jgit:4.6.0.201612231935-r\")\n@file:DependsOn(\"org.jetbrains.lets-plot:lets-plot-kotlin-jvm:3.0.2\")\n\nprintln(\"Hello world!\")\n\n// ...\n```\n```\n\n----------------------------------------\n\nTITLE: Setting List and Object Renovate Options via Environment Variables (Bash/JSON)\nDESCRIPTION: Shows how to provide list and object values via environment variables. Simple string lists (`RENOVATE_LABELS`) use comma separation and quotes. Complex objects (`RENOVATE_CONFIG`) or lists of objects (`RENOVATE_PACKAGE_RULES`) require stringified JSON, being careful with escaping quotes.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/config-overview.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nRENOVATE_LABELS=\"abc,def,label with space\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nRENOVATE_CONFIG=\"{platform\\\":\\\"gitlab\\\",\\\"onboarding\\\":false}\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nRENOVATE_PACKAGE_RULES=\"[{matchHost:\\\"gitlab\\\",token:\\\"$SOME_TOKEN\\\"}]\"\n```\n\n----------------------------------------\n\nTITLE: Filtering Renovate Rules by Exact Base Branch Name in JSON\nDESCRIPTION: This JSON configuration snippet demonstrates how to use the `matchBaseBranches` field within `packageRules` to apply a rule only when Renovate is running against a specific base branch, in this case, 'main'. The rule disables updates for any package whose name does not start with 'eslint'.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_96\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchBaseBranches\": [\"main\"],\n      \"matchPackageNames\": [\"!/^eslint/\"],\n      \"enabled\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Matching Update Types with Renovate Rules - JSON\nDESCRIPTION: Demonstrates how to use the 'matchUpdateTypes' field in Renovate's 'packageRules' to apply custom labeling (such as 'UPDATE-MAJOR') to updates based on their semantic versioning type. Dependencies: Renovate configuration must include 'packageRules'. 'matchUpdateTypes' accepts array values like ['major']. The input is a JSON config fragment; output is Renovate's behavioral adjustment in labeling updates.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_119\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"packageRules\\\": [\\n    {\\n      \\\"matchUpdateTypes\\\": [\\\"major\\\"],\\n      \\\"labels\\\": [\\\"UPDATE-MAJOR\\\"]\\n    }\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Secret for Renovate Environment (YAML)\nDESCRIPTION: Defines a Kubernetes Secret holding sensitive Renovate configuration (tokens, endpoints, author info). This secret enables secure injection of environment variables into the running Renovate container. Required for authentication, platform identification, and customizing platform endpoints. Limitation: always ensures the file is protected following Kubernetes RBAC policy.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/examples/self-hosting.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: renovate-env\ntype: Opaque\nstringData:\n  RENOVATE_GITHUB_COM_TOKEN: 'any-personal-user-token-for-github-com-for-fetching-changelogs'\n  # You can set RENOVATE_AUTODISCOVER to true to run Renovate on all repos you have push access to\n  RENOVATE_AUTODISCOVER: 'false'\n  RENOVATE_ENDPOINT: 'https://github.company.com/api/v3'\n  RENOVATE_GIT_AUTHOR: 'Renovate Bot <bot@renovateapp.com>'\n  RENOVATE_PLATFORM: 'github'\n  RENOVATE_TOKEN: 'your-github-enterprise-renovate-user-token'\n```\n\n----------------------------------------\n\nTITLE: Specifying Version Compatibility for Docker and Tagged Sources in Renovate (JSON)\nDESCRIPTION: Illustrates advanced configuration for handling version strings that include compatibility data (such as Docker image tags). By setting 'versionCompatibility' and 'versioning' within packageRules, Renovate can parse and differentiate compatibility and version components, enabling correct update comparisons. Requires understanding of regular expressions and specific datasource naming; the config is set under 'packageRules' as an array of match and rule objects.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_146\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"packageRules\\\": [\\n    {\\n      \\\"matchDatasources\\\": [\\\"docker\\\"],\\n      \\\"matchPackageNames\\\": [\\\"ghcr.io/umami-software/umami\\\"],\\n      \\\"versionCompatibility\\\": \\\"^(?<compatibility>.*)-(?<version>.*)$\\\",\\n      \\\"versioning\\\": \\\"semver\\\"\\n    },\\n    {\\n      \\\"matchDatasources\\\": [\\\"docker\\\"],\\n      \\\"matchPackageNames\\\": [\\\"node\\\"],\\n      \\\"versionCompatibility\\\": \\\"^(?<version>[^-]+)(?<compatibility>-.*)?$\\\",\\n      \\\"versioning\\\": \\\"node\\\"\\n    }\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Renovate Rules by Package Manager in JSON\nDESCRIPTION: This JSON configuration uses `matchManagers` within `packageRules` to apply a rule only to dependencies managed by a specific package manager. This example disables updates for the 'node' package specifically when it's managed by the 'dockerfile' manager.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_111\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\"node\"],\n      \"matchManagers\": [\"dockerfile\"],\n      \"enabled\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Version for pip-compile in Renovate (JSON)\nDESCRIPTION: Demonstrates how to configure Renovate to use a specific Python version (e.g., 3.7) when executing `pip-compile` or `uv pip compile`. This JSON snippet uses the top-level `constraints` object to set a specific `python` version, overriding the default detection from the file header (`pip-compile`) or the `--python-version` option (`uv`).\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/pip-compile/readme.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"constraints\": {\n    \"python\": \"==3.7\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Terraform Configuration for AWS Aurora RDS Update\nDESCRIPTION: Presents an example Terraform configuration snippet demonstrating how to structure the file for updates via the Aurora RDS custom manager. It includes a comment directive (`# renovate: ...`) providing necessary metadata: the minified `rdsFilter` (for `lookupName`), the dependency name (`depName`), and the `versioning` strategy (`loose`). This comment precedes the `engine_version` assignment, whose value (`currentValue`) Renovate will manage.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/aws-rds/readme.md#_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n# renovate:rdsFilter=[{\"Name\":\"engine\",\"Values\":[\"aurora-mysql\"]},{\"Name\":\"engine-version\",\"Values\":[\"8.0\"]}] depName=aurora-mysql versioning=loose\nengine_version = \"8.0.mysql_aurora.3.05.2\"\n```\n\n----------------------------------------\n\nTITLE: Example versions.ini File Using GitLab Tags Datasource (INI)\nDESCRIPTION: This example INI file (`versions.ini`) demonstrates how to use embedded Renovate comments to manage a version variable (`NKJS_VERSION`). The comment specifies `gitlab-tags` as the datasource, `gitlab-org/ci-cd/package-stage/feature-testing/new-packages-list` as the GitLab project path (`depName`), `semver` as the versioning scheme, and `https://gitlab.com` as the GitLab instance URL (`registryUrl`). Renovate uses this information, matched by the custom regex manager, to find and propose updates for `NKJS_VERSION` based on tags in the specified GitLab repository.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/gitlab-tags/readme.md#_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n# renovate: datasource=gitlab-tags depName=gitlab-org/ci-cd/package-stage/feature-testing/new-packages-list versioning=semver registryUrl=https://gitlab.com\nNKJS_VERSION=3.4.0\n```\n\n----------------------------------------\n\nTITLE: Scheduling Weekly ESLint Package Updates with Renovate (JSON)\nDESCRIPTION: This configuration schedules ESLint-related dependency updates every Monday before 4 AM. It defines a Renovate package rule using the schedule property to set frequency, targeting all packages with \"eslint\" in their name. The schedule uses cron syntax and requires Renovate to be set up in your repository.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/noise-reduction.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"description\": \"Schedule updates on Monday mornings(before 4 AM)\",\n      \"matchPackageNames\": [\"/eslint/\"],\n      \"groupName\": \"eslint\",\n      \"schedule\": [\"* 0-3 * * 1\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Self-Hosted Docker Registry Authentication in Renovate (JavaScript)\nDESCRIPTION: Shows how to configure authentication for a specific self-hosted Docker registry (`your.host.io`) in `config.js` using `hostRules`. It defines a rule that applies only to the specified host, providing the necessary username and retrieving the password from the `SELF_HOSTED_DOCKER_IMAGES_PASSWORD` environment variable. This allows Renovate to access private images while potentially using different or no credentials for other registries like Docker Hub.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/docker.md#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  hostRules: [\n    {\n      hostType: 'docker',\n      matchHost: 'your.host.io',\n      username: '<your-username>',\n      password: process.env.SELF_HOSTED_DOCKER_IMAGES_PASSWORD,\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Automerge for Specific Update Types in Renovate JSON\nDESCRIPTION: This Renovate JSON configuration uses `packageRules` to enable the `automerge` feature selectively. It specifies that updates matching the types \"minor\", \"patch\", \"pin\", or \"digest\" should be automatically merged if status checks pass, while other update types (like major) would still require manual review.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchUpdateTypes\": [\"minor\", \"patch\", \"pin\", \"digest\"],\n      \"automerge\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Safely Fetching and Handling HTTP JSON Responses with Result - TypeScript\nDESCRIPTION: This snippet illustrates making a safe HTTP GET request for an array of users with schema validation and error handling using http.getJsonSafe in TypeScript. The method returns a Result instance, allowing side-effectful error logging and safe unwrapping with a fallback value. Dependencies include a logger, Http, LooseArray, and zod for schema validation. The method takes a URL and a zod schema, returning either validated user data or an empty array on failure. It's suitable for scenarios requiring graceful error recovery.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/development/zod.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await http\n  .getJsonSafe('https://dummyjson.com/users', LooseArray(User))\n  .onError((err) => {\n    logger.warn({ err }, 'Failed to fetch users');\n  })\n  .unwrapOrElse([]);\n```\n\n----------------------------------------\n\nTITLE: Including Default Branch and Regex Branches in Renovate JSON\nDESCRIPTION: This example illustrates using the special `\"$default\"` string within the `baseBranches` configuration in `renovate.json`. This tells Renovate to include the repository's default branch along with any branches matching the specified regular expression (`/^release\\/.*/`). This is useful for applying consistent configurations across different repositories via organizational presets.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"baseBranches\": [\"$default\", \"/^release\\\\/.*/\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Example YAML Configuration with Renovate Directive (YML)\nDESCRIPTION: Shows an example YAML structure where an addon's version is specified. A comment includes the `eksAddonsFilter` directive, indicating which addon and filter criteria (e.g., default version) Renovate should use to find updates for the `version` field.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/aws-eks-addon/readme.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\naddons:\n  - name: vpc-cni\n    # only addon name and the supported default version\n    # renovate: eksAddonsFilter={\"addonName\":\"vpc-cni\", \"default\":true}\n    version: v1.18.5-eksbuild.1\n```\n\n----------------------------------------\n\nTITLE: Configuring Yarn to Authenticate with Azure NPM Registry - INI\nDESCRIPTION: This INI configuration is for Yarn or NPM to authenticate against a custom scoped Azure DevOps NPM registry, requiring the full registry URL and always-auth set to true for private package access. Place in .npmrc at repo root. Inputs: registry URL tailored to your Azure Artifacts setup. Ensures seamless install with Yarn or NPM using Renovate in Azure.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/platform/azure/readme.md#_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\nregistry=https://myorg.pkgs.visualstudio.com/_packaging/myorg/npm/registry/\nalways-auth=true\n\n```\n\n----------------------------------------\n\nTITLE: Matching Renovate Updates by Current Value (Glob) in JSON\nDESCRIPTION: This JSON configuration uses `matchCurrentValue` with a glob pattern within `packageRules`. It targets packages named like 'io.github.resilience4j**' whose current value (the version string in the manifest file) matches '1.*'. For matching dependencies, automerge is enabled.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_101\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\"io.github.resilience4j**\"],\n      \"matchCurrentValue\": \"1.*\",\n      \"automerge\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Renovate Regex Manager for Repology Datasource (JSON)\nDESCRIPTION: This JSON snippet shows how to configure a custom regex manager within Renovate's `renovate.json`. It targets Dockerfiles (`fileMatch`), uses a regular expression (`matchStrings`) to capture dependency details like `datasource`, `depName`, `versioning`, and `currentValue` from specially formatted comments and environment variable definitions, and sets a default versioning template. This setup enables Renovate to manage dependencies identified by these comments using datasources like Repology.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/repology/readme.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"customManagers\": [\n    {\n      \"customType\": \"regex\",\n      \"fileMatch\": [\"^Dockerfile$\"],\n      \"matchStrings\": [\n        \"#\\\\s*renovate:\\\\s*datasource=(?<datasource>.*?) depName=(?<depName>.*?)( versioning=(?<versioning>.*?))?\\\\sENV .*?_VERSION=\\\"(?<currentValue>.*)\\\"\\\\s\"\n      ],\n      \"versioningTemplate\": \"{{#if versioning}}{{{versioning}}}{{else}}semver{{/if}}\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Regex Manager Example: ENV Variable Pattern Extraction - JSON\nDESCRIPTION: This JSON snippet shows how to configure the 'matchStrings' field in a Renovate custom regex manager to extract version and datasource information from an ENV variable declaration line. The example demonstrates use of named capture groups to identify 'currentValue', 'datasource', and 'depName' from matching lines. Dependencies: Used with Renovate's regex manager. Input: text file with properly formatted ENV lines; Output: structured dependency objects for Renovate's processing.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"matchStrings\\\": [\\n    \\\"ENV .*?_VERSION=(?<currentValue>.*) # (?<datasource>.*?)/(?<depName>.*?)\\\\\\\\s\\\"\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Matching All YAML Files for Sveltos in Renovate (JSON)\nDESCRIPTION: This Renovate configuration snippet sets the `fileMatch` pattern for the `sveltos` manager to `[\"\\\\.yaml$\"]`. This regular expression instructs Renovate to consider all files ending with the `.yaml` extension within the repository as potential Sveltos definition files. This approach is suitable when most or all YAML files in the repository are Sveltos configurations.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/sveltos/readme.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sveltos\": {\n    \"fileMatch\": [\"\\\\.yaml$\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Renovate Custom Datasource for K3s Updates (JSON)\nDESCRIPTION: Shows the `customDatasources` configuration section needed to track K3s versions. It specifies the K3s update API endpoint (`defaultRegistryUrlTemplate`) and a JSONata transformation (`transformTemplates`) to extract the stable version, source URL, and changelog URL from the API response into the format required by Renovate.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/custom/readme.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"customDatasources\": {\n    \"k3s\": {\n      \"defaultRegistryUrlTemplate\": \"https://update.k3s.io/v1-release/channels\",\n      \"transformTemplates\": [\n        \"{\\\"releases\\\":[{\\\"version\\\": $$.(data[id = 'stable'].latest),\\\"sourceUrl\\\":\\\"https://github.com/k3s-io/k3s\\\",\\\"changelogUrl\\\":$join([\\\"https://github.com/k3s-io/k3s/releases/tag/\\\",data[id = 'stable'].latest])}],\\\"sourceUrl\\\": \\\"https://github.com/k3s-io/k3s\\\",\\\"homepage\\\": \\\"https://k3s.io/\\\"}\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Initial Dependency Version String\nDESCRIPTION: Represents an example dependency version (`1.0.0`) as found in a package file (e.g., `package.json`) before Renovate performs an update.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/getting-started/use-cases.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n`1.0.0`\n```\n\n----------------------------------------\n\nTITLE: Running Renovate via Bash Script (Shell)\nDESCRIPTION: A bash script to run Renovate, setting up PATH and required environment variables for configuration and access tokens. This script can be executed manually or scheduled via cron for automated execution. Core parameters include RENOVATE_CONFIG_FILE and RENOVATE_TOKEN, where secrets are injected as environment variables.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/examples/self-hosting.md#_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\n#!/bin/bash\n\nexport PATH=\"/home/user/.yarn/bin:/usr/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:$PATH\"\nexport RENOVATE_CONFIG_FILE=\"/home/user/renovate-config.js\"\nexport RENOVATE_TOKEN=\"**some-token**\" # GitHub, GitLab, Azure DevOps\nexport RENOVATE_GITHUB_COM_TOKEN=\"**github-token**\" # Delete this if using github.com\n\n# Renovate\nrenovate\n```\n\n----------------------------------------\n\nTITLE: Referencing Mend UI Secrets in Renovate JSON Configuration\nDESCRIPTION: This JSON configuration snippet shows how to use a secret stored in the Mend UI (developer.mend.io) within the `hostRules` section of a Renovate configuration file. The `{{ secrets.MY_ORG_SECRET }}` syntax dynamically injects the secret value named 'MY_ORG_SECRET' as the authentication token for interactions with 'github.com'. This requires the secret to be predefined in the Mend application settings at either the organization or repository level.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/mend-hosted/credentials.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"hostRules\": [\n    {\n      \"matchHost\": \"github.com\",\n      \"token\": \"{{ secrets.MY_ORG_SECRET }}\"\n    }\n  ]\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Renovate for Hashicorp Product Version Tracking (JSON)\nDESCRIPTION: Defines a Renovate configuration using a custom regex manager (`customManagers`) to extract dependency names (e.g., 'nomad') and current versions from comments in YAML files (`fileMatch`). It pairs this with a custom datasource `hashicorp` that queries the Hashicorp releases API (`defaultRegistryUrlTemplate`) using the extracted `packageName` and transforms the response using JSONata to track updates.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/custom/readme.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"customManagers\": [\n    {\n      \"customType\": \"regex\",\n      \"fileMatch\": [\"\\\\.yml$\"],\n      \"datasourceTemplate\": \"custom.hashicorp\",\n      \"matchStrings\": [\n        \"#\\\\s*renovate:\\\\s*(datasource=(?<datasource>.*?) )?depName=(?<depName>.*?)( versioning=(?<versioning>.*?))?\\\\s*\\w*:\\\\s*(?<currentValue>.*)\\\\s\"\n      ],\n      \"versioningTemplate\": \"{{#if versioning}}{{{versioning}}}{{else}}semver{{/if}}\"\n    }\n  ],\n  \"customDatasources\": {\n    \"hashicorp\": {\n      \"defaultRegistryUrlTemplate\": \"https://api.releases.hashicorp.com/v1/releases/{{packageName}}?license_class=oss\",\n      \"transformTemplates\": [\n        \"{ \\\"releases\\\": $map($, function($v) { { \\\"version\\\": $v.version, \\\"releaseTimestamp\\\": $v.timestamp_created, \\\"changelogUrl\\\": $v.url_changelog, \\\"sourceUrl\\\": $v.url_source_repository } }), \\\"homepage\\\": $[0].url_project_website, \\\"sourceUrl\\\": $[0].url_source_repository }\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Vulnerability Fix Strategy in Renovate (JSON)\nDESCRIPTION: Demonstrates setting the 'vulnerabilityFixStrategy' inside the 'vulnerabilityAlerts' object to 'highest', which instructs Renovate to update to the highest available version that fixes a vulnerability. This overrides the default behavior of upgrading to the lowest fixed version. Requires the vulnerabilityAlerts feature to be enabled and properly configured.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_149\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"vulnerabilityAlerts\\\": {\\n    \\\"vulnerabilityFixStrategy\\\": \\\"highest\\\"\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Pre-commit Manager in Renovate Using JSON\nDESCRIPTION: Enables the pre-commit integration in Renovate by adding a 'pre-commit' object with 'enabled' set to true in the Renovate configuration (typically renovate.json or package.json under the 'renovate' key). This directive allows Renovate to process pre-commit configuration files for Git dependency updates. No advanced configuration or additional parameters are included.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/pre-commit/readme.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"pre-commit\": {\n    \"enabled\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Docker Image Dependencies in Dockerfile for Renovate (Dockerfile)\nDESCRIPTION: This Dockerfile snippet is targeted by the above Renovate config; it declares FROM and ENV lines using patterns matched by the provided regexes. The FROM line specifies the base image and version, while ENV lines declare tool versions with inline comments encoding datasource/versioning metadata for Renovate. The snippet's purpose is to serve as an example of how dependencies can be marked up for parsing and automatic updating.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_29\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM amd64/ubuntu:24.04\nENV GRADLE_VERSION=6.2 # gradle-version/gradle&versioning=maven\nENV NODE_VERSION=10.19.0 # github-tags/nodejs/node&versioning=node\n```\n\n----------------------------------------\n\nTITLE: Filtering Renovate Rules by Directory Glob Pattern in JSON\nDESCRIPTION: This JSON snippet demonstrates using `matchFileNames` with a directory-focused glob pattern ('app/**') in `packageRules`. It groups all dependencies defined in any file within the 'app/' directory or its subdirectories into a group named 'App dependencies'.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_110\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"description\": \"Group all dependencies from the app directory\",\n      \"matchFileNames\": [\"app/**\"],\n      \"groupName\": \"App dependencies\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Pinned Dependency in package.json\nDESCRIPTION: Illustrates a pinned dependency entry in `package.json`. This format specifies an exact version (`1.1.0`) and ensures that only this specific version of the package will be installed, providing maximum predictability.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/dependency-pinning.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"foobar\": \"1.1.0\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Renovate Authentication for Private Helm Repositories (JSON5)\nDESCRIPTION: Illustrates configuring `hostRules` in Renovate for authenticating with private Helm repositories. Examples cover global host matching (e.g., `gitlab.com`) and specific repository URL matching. Setting `hostType: 'helm'` is optional but recommended to scope credentials specifically to Helm operations for that host. Requires substituting placeholder username and password.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/helmv3/readme.md#_snippet_2\n\nLANGUAGE: json5\nCODE:\n```\n{\n  hostRules: [\n    {\n      // Global login for 'gitlab.com' if using Helm\n      matchHost: 'gitlab.com',\n      hostType: 'helm', // this is optional, but else the credentials will be used for all requests matching `matchHost`\n      username: '<some-username>',\n      password: '<some-password>',\n    },\n    {\n      // Specific repository\n      matchHost: 'https://gitlab.com/api/v4/projects/xxxxxxx/packages/helm/stable',\n      hostType: 'helm', // this is optional\n      username: '<some-username>',\n      password: '<some-password>',\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Renovate Registry Aliases for GitLab CI Variables (JSON)\nDESCRIPTION: This JSON configuration snippet demonstrates how to define `registryAliases` within a Renovate configuration. It maps predefined GitLab CI environment variables (like `$CI_REGISTRY`, `$CI_SERVER_FQDN`, `$CI_SERVER_HOST`) to their corresponding actual registry hostnames (e.g., `registry.example.com`, `gitlab.example.com`). This mapping is essential for Renovate to correctly identify and update Docker images defined using these variables in `gitlab-ci.yml` files.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/gitlabci/readme.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"registryAliases\": {\n    \"$CI_REGISTRY\": \"registry.example.com\",\n    \"$CI_SERVER_FQDN\": \"gitlab.example.com\",\n    \"$CI_SERVER_HOST\": \"gitlab.example.com\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Parameterized Renovate Presets in JSON\nDESCRIPTION: This JSON snippet exemplifies how to define parameterized presets within a Renovate configuration. It shows `labels` and `assignee` presets using Handlebars-like syntax (`{{arg0}}`, `{{arg1}}`) as placeholders for arguments that will be provided when the preset is extended.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/config-presets.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"labels\": {\n    \"description\": \"Apply labels <code>{{arg0}}</code> and <code>{{arg1}}</code> to PRs\",\n    \"labels\": [\"{{arg0}}\", \"{{arg1}}\"]\n  },\n  \"assignee\": {\n    \"description\": \"Assign PRs to <code>{{arg0}}</code>\",\n    \"assignees\": [\"{{arg0}}\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating Private RubyGems Registry with Renovate - JSON\nDESCRIPTION: This JSON snippet demonstrates how to configure Renovate to authenticate Bundler operations with a private RubyGems registry using the hostRules setting. The example shows a single hostRule that matches the private registry host and uses a token, although username and password are also supported. The configuration should be placed in the Renovate bot config file (not the repository config) to avoid exposing sensitive information; for Mend Renovate App, use the encrypted config option. Key parameters: matchHost (private registry hostname), hostType (must be 'rubygems'), and token (authentication secret). The input is a JSON configuration object and there is no direct output; this data is consumed by Renovate for dependency update automation.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/bundler/readme.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"hostRules\\\": [\\n    {\\n      \\\"matchHost\\\": \\\"private-registry.company.com\\\",\\n      \\\"hostType\\\": \\\"rubygems\\\",\\n      \\\"token\\\": \\\"abc123\\\"\\n    }\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Private and OCI Helm Registries in Renovate with JSON5 Host Rules\nDESCRIPTION: This example snippet describes how to set up Renovate to authenticate with private or OCI Helm chart registries using a `hostRules` array in JSON5. It includes one global login configuration and another using an encrypted password, demonstrating required fields such as `matchHost`, `hostType`, `username`, and either `password` or an encrypted password object. The configuration must be included within the Renovate configuration file. Dependencies: Renovate must be able to process JSON5, and encrypted passwords require Renovate's encryption support.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/helmfile/readme.md#_snippet_1\n\nLANGUAGE: json5\nCODE:\n```\n{\\n  hostRules: [\\n    {\\n      // global login\\n      matchHost: 'ghcr.io',\\n      hostType: 'docker',\\n      username: '<some-username>',\\n      password: '<some-password>',\\n    },\\n    {\\n      // login with encrypted password\\n      matchHost: 'https://ghci.io',\\n      hostType: 'docker',\\n      username: '<some-username>',\\n      encrypted: {\\n        password: 'some-encrypted-password',\\n      },\\n    },\\n  ],\\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Debug Log Level for Self-Hosted Renovate (Shell)\nDESCRIPTION: Sets the `LOG_LEVEL` environment variable to `debug` before invoking Renovate. This increases the logging verbosity to the debug level, which is recommended for troubleshooting problems in self-hosted Renovate environments. This variable needs to be set in the environment where the Renovate process is executed.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/troubleshooting.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nLOG_LEVEL=debug\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Registry URLs for minimumReleaseAge in Renovate JSON\nDESCRIPTION: This JSON configuration snippet shows how to configure `registryUrls` for the Maven datasource to ensure `minimumReleaseAge` functions correctly, especially with pull-through registries like Google Artifact Registry (GAR) that might lack reliable `last-modified` headers. By placing `https://repo1.maven.org/maven2` first, Renovate can fetch timestamps from Maven Central for public dependencies.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_84\n\nLANGUAGE: json\nCODE:\n```\n\"registryUrls\": [\n  \"https://repo1.maven.org/maven2\",\n  \"https://europe-maven.pkg.dev/org-artifacts/maven-virtual\"\n],\n```\n\n----------------------------------------\n\nTITLE: Overriding Detected Node Version Constraints in Renovate (JSON)\nDESCRIPTION: This JSON snippet shows how to override automatically detected constraints using the `force` block within the Renovate configuration. In this case, it forces Renovate to adhere to a Node.js version constraint of less than 15.0.0, overriding any constraints Renovate might have detected from the repository.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"force\": {\n    \"constraints\": {\n      \"node\": \"< 15.0.0\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Requiring Approval for Specific Packages - Renovate Dependency Dashboard - JSON\nDESCRIPTION: Provides an example of requiring approval only for updates to packages matching a specified pattern by using the 'packageRules' array in Renovate configuration. Each entry specifies 'matchPackageName' (here demonstrating a scoped package pattern) and 'dependencyDashboardApproval' set to true. Used for granular control over update approvals for particular dependencies.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/key-concepts/dashboard.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchPackageName\": [\"@somescope/**\"],\n      \"dependencyDashboardApproval\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring pip-compile with Private Index URL (requirements.in, Python)\nDESCRIPTION: This snippet demonstrates how to extend pip-compile to use an additional Python package index by adding the --extra-index-url directive in the requirements.in file. The configuration ensures pip-compile can access both the default and a private package repository, which is essential for installing private dependencies. The specified package private-package==1.2.3 will be resolved using both the PyPI and the additional index provided; this must only be set in the .in file, not the generated lockfile.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/getting-started/private-packages.md#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n--extra-index-url https://pypi.my.domain/simple\n\nprivate-package==1.2.3\n```\n\n----------------------------------------\n\nTITLE: Configuring PyPI Index URL and Dependencies - requirements.txt - plaintext\nDESCRIPTION: This snippet, intended for a requirements.txt file, sets a custom package index URL and a trusted host for pip operations, specifies a default timeout, and lists Python dependencies with pinned versions. It demonstrates support for Django (with argon2 extra), Celery (with redis extra), and shows how to handle white space with comments. No additional dependencies beyond pip itself are required, and the \"--index-url\" and \"--trusted-host\" options instruct pip to use the specified repository, which may require user authentication. The inputs are parsed by pip; each dependency must be properly formatted. Improper formatting or missing packages in the specified repository may cause installation errors.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/pip_requirements/__fixtures__/requirements4.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n--index-url https://artifactory.company.com/artifactory/api/pypi/python/simple --trusted-host artifactory.company.com --default-timeout 600\nDjango[argon2]==2.0.12\ncelery [redis]==4.1.1\nfoo [bar] == 3.2.1 # handles extra white space\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Regex Manager for GitLab Packages in Renovate (JSON)\nDESCRIPTION: This JSON snippet defines a custom manager within a `renovate.json` configuration file. It uses the `regex` type to identify dependencies in files named `versions.ini`. The `matchStrings` pattern extracts information like datasource, dependency name, versioning scheme, registry URL, and the current version from comments within the target INI file. It defaults to `semver` versioning if not explicitly specified.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/gitlab-packages/readme.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"customManagers\": [\n    {\n      \"customType\": \"regex\",\n      \"fileMatch\": [\"^versions.ini$\"],\n      \"matchStrings\": [\n        \"# renovate: datasource=(?<datasource>.*?) depName=(?<depName>.*?)( versioning=(?<versioning>.*?))?( registryUrl=(?<registryUrl>.*?))?\\\\s.*?_VERSION=(?<currentValue>.*)\\\\s\"\n      ],\n      \"versioningTemplate\": \"{{#if versioning}}{{{versioning}}}{{else}}semver{{/if}}\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Restricting Upgrade Versions using Regex with allowedVersions in JSON\nDESCRIPTION: Demonstrates using a regular expression within the `allowedVersions` property of a `packageRules` entry. This example restricts upgrades for 'com.thoughtworks.xstream:xstream' to versions matching the pattern `/^[0-9]+\\\\.[0-9]+\\\\.[0-9]+(\\\\.[0-9]+)?$/`, effectively allowing only 3 or 4-part numeric versions. Note the required starting and ending `/` characters for the regex.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_92\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\"com.thoughtworks.xstream:xstream\"],\n      \"allowedVersions\": \"/^[0-9]+\\\\.[0-9]+\\\\.[0-9]+(\\\\.[0-9]+)?$/\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Templating Local Renovate Presets with JavaScript\nDESCRIPTION: This JavaScript configuration (`config.js`) demonstrates using Handlebars templating to dynamically extend a local preset based on an environment variable. It sets a custom environment variable `GITLAB_REF` (defaulting to 'main') and uses it within the `extends` path (`local>renovate/presets#{{ env.GITLAB_REF }}`) to specify a branch or tag for the preset. This allows validating presets on specific branches.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/config-presets.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// config.js\nmodule.exports = {\n  customEnvVariables: {\n    GITLAB_REF: process.env.CI_COMMIT_REF_NAME || 'main',\n  },\n  extends: ['local>renovate/presets#{{ env.GITLAB_REF }}'],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Renovate Authentication for Private Registries (JavaScript)\nDESCRIPTION: This JavaScript configuration example demonstrates how to set up `hostRules` in `renovate.json` to authenticate with private GitHub and Cargo registries. It uses environment variables (`process.env.GITHUB_TOKEN`, `process.env.CARGO_GIT_TOKEN`) to securely provide tokens and specifies the `hostType` (`github`, `crate`) to apply the correct authentication method for each matched host.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/rust.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  hostRules: [\n    {\n      matchHost: 'github.enterprise.com',\n      token: process.env.GITHUB_TOKEN,\n      hostType: 'github',\n    },\n    {\n      matchHost: 'someGitHost.enterprise.com',\n      token: process.env.CARGO_GIT_TOKEN,\n      hostType: 'crate',\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Matching Renovate Updates by Current Value (Regex) in JSON\nDESCRIPTION: This JSON snippet shows how to use `matchCurrentValue` with a regular expression (enclosed in '/') within `packageRules`. It targets packages named like 'io.github.resilience4j**' whose current value starts with '1.'. Regular expressions provide more complex pattern matching compared to globs.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_102\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\"io.github.resilience4j**\"],\n      \"matchCurrentValue\": \"/^1\\\\./\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to a Private Helm Repository - JavaScript\nDESCRIPTION: Defines a Renovate configuration object with a 'hostRules' entry for authenticating access to a private Helm chart repository. Uses environment variable substitution for the password. The snippet is intended for inclusion in the bot or repository configuration (e.g., renovate.json or config.js). Key fields: 'matchHost', 'hostType', 'username', 'password'. This enables Renovate to fetch private charts during dependency updates.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/getting-started/private-packages.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  hostRules: [\n    {\n      matchHost: 'your.host.io',\n      hostType: 'helm',\n      username: '<your-username>',\n      password: process.env.SELF_HOSTED_HELM_CHARTS_PASSWORD,\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Wildcard Pattern for TXT Requirements Files (Prefix)\nDESCRIPTION: A file pattern using a wildcard (`*`) after a hyphen prefix (`requirements-`) to match multiple Python requirements files ending with the `.txt` extension. This allows for environment-specific files like `requirements-dev.txt` or `requirements-test.txt`.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/pip_requirements/readme.md#_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nrequirements-*.txt\n```\n\n----------------------------------------\n\nTITLE: Setting GitHub PAT via RENOVATE_TOKEN Environment Variable (Shell)\nDESCRIPTION: Configures the GitHub Personal Access Token (PAT) for Renovate using the `RENOVATE_TOKEN` environment variable. This avoids hardcoding the token in configuration files. The PAT needs appropriate scopes (`repo`, `workflow`).\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/platform/github/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport RENOVATE_TOKEN=\"YOUR_GITHUB_PAT\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Version Argument in Dockerfile (dockerfile)\nDESCRIPTION: Defines a Python version argument in a Dockerfile using the ARG instruction, followed by using that argument in the FROM line to select a specific builder image. This setup enables automation tools like Renovate to programmatically update the Python version. The key parameter, PYTHON_VERSION, supports a compressed version format (e.g., '311' as '3.11'). The snippet assumes that a compatible builder image (e.g., image-python311-builder:1.0.0) is available.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/python-version/readme.md#_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nARG PYTHON_VERSION=311\\nFROM image-python${PYTHON_VERSION}-builder:1.0.0\\n\n```\n\n----------------------------------------\n\nTITLE: Overriding GitHub Packages Token for npm Registry (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to override the default GitHub platform token for npm.pkg.github.com within Renovate's configuration using hostRules. Here, a specific token (such as a personal access token) is provided to authenticate against the GitHub npm registry. By setting matchHost and hostType, administrators can ensure Renovate uses intended credentials for private package access. The token substitution approach should be at least as specific as the automatic rule and can help segregate access between users or roles.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/getting-started/private-packages.md#_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hostRules\": [\n    {\n      \"matchHost\": \"npm.pkg.github.com\",\n      \"hostType\": \"npm\",\n      \"token\": \"some-personal-access-token\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Building Custom Renovate Docker Image with Google Cloud SDK (Dockerfile)\nDESCRIPTION: Shows a conceptual snippet from a Dockerfile for creating a custom Renovate image. It starts from an official Renovate image and indicates the need to add steps (represented by `RUN ...`) to install the Google Cloud SDK, enabling the use of `gcloud` commands within the container, typically for obtaining authentication tokens.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/docker.md#_snippet_16\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM renovate/renovate:39.252.0\n# Include the \"Docker tip\" which you can find here https://cloud.google.com/sdk/docs/install\n# under \"Installation\" for \"Debian/Ubuntu\"\nRUN ...\n```\n\n----------------------------------------\n\nTITLE: Enabling Only Specific Package Managers in Renovate (JSON)\nDESCRIPTION: This configuration snippet within `renovate.json` uses the `enabledManagers` option to explicitly allow only the `dockerfile` and `npm` package managers. All other package managers will be implicitly disabled for the repository.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_40\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"enabledManagers\": [\"dockerfile\", \"npm\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Example Renovate Configuration for AWS CodeCommit (config.js)\nDESCRIPTION: Shows a sample `config.js` file for configuring Renovate to run against AWS CodeCommit. It specifies the `endpoint`, `platform` ('codecommit'), target `repositories`, authentication credentials (`username`, `password`, optional `token`), `gitAuthor`, and includes an example `packageRules` entry to disable updates for specific packages. Credentials should be replaced with actual values.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/platform/codecommit/readme.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n```js title=\"Example config.js file\"\nmodule.exports = {\n  endpoint: 'https://git-codecommit.us-east-1.amazonaws.com/',\n  platform: 'codecommit',\n  repositories: ['abc/def', 'abc/ghi'],\n  username: 'ACCESS_KEY_ID_GOES_HERE',\n  password: 'SECRET_ACCESS_KEY_GOES_HERE',\n  token: 'AWS_SESSION_TOKEN_GOES_HERE',\n  gitAuthor: 'your_email@domain',\n  packageRules: [\n    {\n      matchPackageNames: ['package_name', 'package_name2'],\n      enabled: false,\n    },\n  ],\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Disabling Platform-Native Automerge - Renovate JSON\nDESCRIPTION: This snippet demonstrates how to enable lock file maintenance automerge but disable platform-native automerge in Renovate. The configuration sets 'automergeType' to 'pr' and 'platformAutomerge' to false. Dependencies: Renovate with support for these options. Inputs are the behavior flags; output is automerged PRs without using the underlying platform's (e.g., GitHub) native automerge features.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/key-concepts/automerge.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"lockFileMaintenance\": {\\n    \"enabled\": true,\\n    \"automerge\": true,\\n    \"automergeType\": \"pr\",\\n    \"platformAutomerge\": false\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SemVer Versioning for a Specific Docker Image in Renovate (JSON)\nDESCRIPTION: Defines a `packageRules` entry in `renovate.json` to override the default Docker versioning behavior for the `foo/bar` image. This rule instructs Renovate to use the `semver` versioning scheme, treating suffixes as pre-release indicators rather than compatibility markers.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/docker.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\"docker\"],\n      \"matchPackageNames\": [\"foo/bar\"],\n      \"versioning\": \"semver\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example YAML Configuration Matching AWS RDS Custom Manager\nDESCRIPTION: Shows an example snippet from a YAML file designed to be processed by the previously defined Renovate custom manager. It includes a comment (`# rdsFilter=...`) containing the minified JSON filter string (used as `lookupName`) and the `engineVersion` key-value pair whose value (`currentValue`) Renovate will track and update using the `aws-rds` datasource.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/aws-rds/readme.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  # rdsFilter=[{\"Name\":\"engine\",\"Values\":[\"mysql\"]},{\"Name\":\"engine-version\",\"Values\":[\"5.7\"]}]\n  engineVersion: 5.7.34\n```\n\n----------------------------------------\n\nTITLE: Grouping ESLint-related Packages with Renovate Configuration (JSON)\nDESCRIPTION: This snippet demonstrates how to configure Renovate to group all dependencies with \"eslint\" in their package name into a single branch and pull request. No specific scheduling or automerging is set, focusing only on group logic. Requires a Renovate configuration file (renovate.json) in your repository.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/noise-reduction.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\"/eslint/\"],\n      \"groupName\": \"eslint\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Scheduling Renovate Runs Outside Office Hours – JSON\nDESCRIPTION: This snippet sets separate cron expressions to run Renovate outside typical office hours on weekdays (10 PM - 5 AM) and at any time during weekends, using the \"schedule\" array property. Multiple cron strings are allowed and interpreted as logical OR. This configuration minimizes the impact of pull requests on developers during daytime and is suitable for JSON configuration files used by Renovate.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/key-concepts/scheduling.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"Schedule during typical non-office hours on weekdays (i.e., 10 PM - 5 AM) and anytime on weekends\",\n  \"schedule\": [\"* 0-4,22-23 * * 1-5\", \"* * * * 0,6\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Building Custom Renovate Docker Image with Self-Signed Certificate (dockerfile)\nDESCRIPTION: Provides a Dockerfile example to build a custom Renovate image that trusts a self-signed certificate. It copies the certificate (`self-signed-certificate.crt`) into the image's standard location for CAs, runs `update-ca-certificates` to add it to the system trust store, and sets the `SSL_CERT_FILE` environment variable for OpenSSL compatibility. This allows Renovate and helper tools like Git/npm within the container to establish secure connections to hosts using the specified self-signed certificate.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/examples/self-hosting.md#_snippet_15\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM renovate/renovate\n\n# Changes to the certificate authority require root permissions\nUSER root\n\n# Copy and install the self signed certificate\nCOPY self-signed-certificate.crt /usr/local/share/ca-certificates/\nRUN update-ca-certificates\n\n# Change back to the Ubuntu user\nUSER 12021\n\n# OpenSSL\nENV SSL_CERT_FILE=/etc/ssl/certs/ca-certificates.crt\n```\n\n----------------------------------------\n\nTITLE: Filtering Autodiscovered Repos with Regex in Renovate Config\nDESCRIPTION: This JSON snippet demonstrates configuring the `autodiscoverFilter` option using a regular expression pattern enclosed in slashes (`/`). This example, `[\"/project/.*/\"]`, filters autodiscovered repositories to include only those whose path matches the regex (i.e., contains `project/`). This allows for more complex matching than glob patterns. Regex patterns are case-sensitive by default unless flags are used.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/self-hosted-configuration.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"autodiscoverFilter\": [\"/project/.*/\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables in Pipenv Source URLs - INI\nDESCRIPTION: Shows a Pipfile [source] entry using USERNAME and PASSWORD environment variables for package index authentication, with typical Pipenv syntax. This enables dynamic credential injection when used alongside Renovate's hostRules, allowing secure pipenv lock runs for private PyPI sources. Intended for use inside a Pipfile.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/getting-started/private-packages.md#_snippet_17\n\nLANGUAGE: ini\nCODE:\n```\n[[source]]\nurl = \"https://$USERNAME:${PASSWORD}@mypypi.example.com/simple\"\nverify_ssl = true\nname = \"pypi\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Hook with Additional Dependencies in YAML\nDESCRIPTION: Demonstrates how to configure a pre-commit hook with additional Python dependencies. For Renovate to correctly manage such dependencies, the 'language' parameter must be explicitly set to 'python', and 'additional_dependencies' should list the requirements with specific versions. This pattern enables partial support for Python-based hooks. Omitting the 'language' field (as shown in the next example) will result in Renovate not processing the dependencies.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/pre-commit/readme.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- repo: https://github.com/psf/black\n  rev: 19.3b0\n  hooks:\n    - id: black\n      language: python\n      additional_dependencies:\n        - 'request==1.1.1'\n```\n\n----------------------------------------\n\nTITLE: Setting minimumReleaseAge for npm Packages in Renovate JSON\nDESCRIPTION: This JSON configuration example demonstrates using `packageRules` to apply the `minimumReleaseAge` setting specifically to the `npm` datasource. Setting `minimumReleaseAge` to `\"3 days\"` helps prevent adopting npm packages that are less than 72 hours old and could potentially be unpublished from the registry.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_85\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\"npm\"],\n      \"minimumReleaseAge\": \"3 days\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Terragrunt Versioning with Regex in Renovate (JSON)\nDESCRIPTION: This JSON snippet configures Renovate to handle custom Terragrunt dependency versions using a regular expression. It defines a `versioning` rule under the `terragrunt` manager, specifying a regex pattern with named capture groups (`compatibility`, `major`, `minor`, `patch`) to parse non-standard SemVer tags like `module-v1.2.5`. This configuration should be placed within a Renovate configuration file.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/terragrunt/readme.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"terragrunt\": {\n    \"versioning\": \"regex:^((?<compatibility>.*)-v|v*)(?<major>\\\\d+)\\\\.(?<minor>\\\\d+)\\\\.(?<patch>\\\\d+)$\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Top-Level Zod Transform for Field Renaming (Correct)\nDESCRIPTION: Demonstrates the correct way to restructure data, such as extracting and renaming fields, using a single `.transform()` call at the top level of the Zod schema (`SourceUrl`). This approach extracts the `Github` URL from the nested structure directly in the final transform. Requires the `zod` library (`z`).\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/development/zod.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst SourceUrl = z\n  .object({\n    meta: z.object({\n      links: z.object({\n        Github: z.string().url(),\n      }),\n    }),\n  })\n  .transform(({ meta }) => meta.links.Github);\n```\n\n----------------------------------------\n\nTITLE: Applying Commit Type Rule Based on File Path using packageRules in JSON\nDESCRIPTION: Demonstrates using `matchFileNames` within `packageRules` to apply a specific configuration to files within the 'examples' directory. In this case, it sets the semantic commit type to 'chore' for all updates related to files matching 'examples/**'.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_89\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchFileNames\": [\"examples/**\"],\n      \"extends\": [\":semanticCommitTypeAll(chore)\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating Renovate in GitHub Actions with Google Workload Identity (YAML)\nDESCRIPTION: This YAML snippet shows a GitHub Actions workflow authenticating to Google Cloud using Workload Identity via `google-github-actions/auth`. It then executes Renovate using `renovatebot/github-action`, injecting the obtained short-lived OAuth2 access token into Renovate's `hostRules` via the `RENOVATE_HOST_RULES` environment variable for accessing Google Artifact Registry. Requires setting up Workload Identity and necessary IAM permissions (`artifactregistry.repositories.downloadArtifacts`).\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/docker.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n- name: authenticate to google cloud\n  id: auth\n  uses: google-github-actions/auth@v2.1.8\n  with:\n    token_format: 'access_token'\n    workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}\n    service_account: ${{ env.SERVICE_ACCOUNT }}\n\n- name: renovate\n  uses: renovatebot/github-action@v41.0.21\n  env:\n    RENOVATE_HOST_RULES: |\n      [\n        {\n          matchHost: \"us-central1-docker.pkg.dev\",\n          hostType: \"docker\",\n          username: \"oauth2accesstoken\",\n          password: \"${{ steps.auth.outputs.access_token }}\"\n        }\n      ]\n  with:\n    token: ${{ secrets.RENOVATE_TOKEN }}\n    configurationFile: .github/renovate.json5\n```\n\n----------------------------------------\n\nTITLE: Expanding ARG Variable in FROM Directive - Dockerfile\nDESCRIPTION: This Dockerfile snippet demonstrates usage of the ARG directive to set a tag variable (TAG=3.19.4), then references it when specifying the base image (alpine:${TAG}) in the FROM directive. Dependencies include Docker and support for ARG/variable expansion. The TAG argument allows dynamic selection of the base image version. The output is a build stage based on a variable Alpine Linux version.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/dockerfile/readme.md#_snippet_2\n\nLANGUAGE: Dockerfile\nCODE:\n```\nARG TAG=3.19.4\nFROM alpine:${TAG}\n```\n\n----------------------------------------\n\nTITLE: Scheduling AWS SDK Updates using packageRules in JSON\nDESCRIPTION: Shows how to configure Renovate to schedule updates for AWS SDK packages (`@aws-sdk/*`) only during Sunday nights (9 PM - 12 AM) using a `packageRules` entry and a cron expression in the `schedule` option.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_87\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"description\": \"Schedule AWS SDK updates on Sunday nights (9 PM - 12 AM)\",\n      \"matchPackageNames\": [\"@aws-sdk/*\"],\n      \"schedule\": [\"* 21-23 * * 0\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Limiting Request Rate per Host in Renovate (JSON)\nDESCRIPTION: Configures a maximum number of requests per second Renovate can send to a matched host (`api.github.com`) using `maxRequestsPerSecond` within `hostRules`. This setting helps avoid rate limits by throttling requests; fractional values are allowed for delays longer than one second. A value of `0` (default) means no limit.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_70\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hostRules\": [\n    {\n      \"matchHost\": \"api.github.com\",\n      \"maxRequestsPerSecond\": 2\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Labels for Renovate PRs using JSON\nDESCRIPTION: This JSON configuration example shows how to set a default label (`dependencies`) for all Renovate Pull Requests and override it with a specific label (`linting`) for packages matching the `/eslint/` pattern using `packageRules`. It illustrates the basic usage of the `labels` array and rule-based overrides.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_80\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"labels\": [\"dependencies\"],\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\"/eslint/\"],\n      \"labels\": [\"linting\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping Renovate Updates by Current Dependency Age in JSON\nDESCRIPTION: This JSON snippet demonstrates using `matchCurrentAge` in `packageRules` to apply rules based on the age of the currently installed dependency version. This example groups updates for dependencies whose current version is older than 2 years into a group named 'old dependencies'. The value must start with '>', '>=', '<', or '<=', and support time units like hours, days, weeks, months, years.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_100\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchCurrentAge\": \"> 2 years\",\n      \"groupName\": \"old dependencies\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Renovate CLI with Direct Arguments for Bitbucket Server\nDESCRIPTION: This command executes Renovate using `npx`, targeting a local Bitbucket Server instance. It specifies the platform, server endpoint, authentication credentials (username/password), git filesystem type (http), enables debug logging, and triggers autodiscovery.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/platform/bitbucket-server/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx renovate --platform=bitbucket-server --endpoint=http://localhost:7990 --git-fs=http --username=renovate-bot --password=abc123456789! --log-level=debug --autodiscover=true\n```\n\n----------------------------------------\n\nTITLE: Setting Up Job and Checking Out Code in GitHub Actions YAML\nDESCRIPTION: Configures a GitHub Actions job named `updpkgsums` to run on an Ubuntu runner. It includes a step using `actions/checkout@v4.0.0` to fetch the full repository history (`fetch-depth: 0`) and check out the specific ref associated with the workflow trigger (e.g., the pull request branch).\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/user-stories/maintaining-aur-packages-with-renovate.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  updpkgsums:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4.0.0\n        with:\n          fetch-depth: 0\n          ref: ${{ github.ref }}\n```\n\n----------------------------------------\n\nTITLE: Customizing Commit Scope - Renovate JSON\nDESCRIPTION: Customizes the semantic commit scope to 'package' by specifying ':semanticCommitScope(package)' within the 'extends' array. This affects Renovate commit messages and PR titles, which will use the new scope (e.g., 'chore(package): ...'). There are no dependencies except for Renovate config itself.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/semantic-commits.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": [\":semanticCommitScope(package)\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Artifactory Host Authentication for Debian Datasource in Renovate (JSON)\nDESCRIPTION: This JSON snippet demonstrates setting a host rule in Renovate to provide authentication for an Artifactory-hosted Debian repository, specifying the hostType, matchHost, username, and password fields. Dependencies include a properly generated username/password from Artifactory ('Set Me Up'). The input details host-based match configuration; the output is enabling Renovate to authenticate and access Artifactory repositories with user credentials for the deb datasource.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/deb/readme.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hostRules\": [\n    {\n      \"hostType\": \"deb\",\n      \"matchHost\": \"https://artifactory.example.com:443/artifactory/debian\",\n      \"username\": \"myuser\",\n      \"password\": \"< the generated password >\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Matching Renovate Updates by Current Version (Negated Regex) in JSON\nDESCRIPTION: This JSON configuration demonstrates using `matchCurrentVersion` with a negated regular expression (`!/ /`) within `packageRules`. It targets packages named like 'io.github.resilience4j**' whose resolved current version does *not* start with '0.'. This allows excluding specific version patterns based on the resolved version.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_106\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\"io.github.resilience4j**\"],\n      \"matchCurrentVersion\": \"!/^0\\\\./\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Local Renovate Presets in JSON\nDESCRIPTION: This JSON snippet shows how to extend a 'local' Renovate preset, meaning a preset hosted on the same platform (e.g., GitLab, GitHub) as the repository where Renovate is running. The `local>` prefix explicitly denotes this, but it can often be omitted (e.g., `renovate/presets`).\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/config-presets.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": [\"local>renovate/presets\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Multiple Renovate Presets Using JSON\nDESCRIPTION: This JSON snippet showcases how to extend multiple Renovate presets simultaneously by adding both `config:recommended` and `schedule:nonOfficeHours` to the `extends` array. Prerequisites include a Renovate setup and knowledge of available `schedule:` presets. The key parameters are the preset names inside the `extends` array. Input is a configuration object, which causes Renovate to apply both the recommended baseline and the specified schedule for running upgrades (e.g., limiting PRs to non-office hours). Outputs are pull request automation behaviors that honor both sets of rules.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/config-presets.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": [\"config:recommended\", \"schedule:nonOfficeHours\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Scheduling Monthly ESLint Package Updates with Renovate (JSON)\nDESCRIPTION: This JSON configuration instructs Renovate to schedule updates for all ESLint-related packages (matched by \"eslint\" in the name) on the first day of each month. It uses a cron-like schedule syntax. Requires Renovate configuration in your repository, and relies on the schedule being parsed by @breejs/later.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/noise-reduction.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"description\": \"Schedule updates on first day of each month\",\n      \"matchPackageNames\": [\"/eslint/\"],\n      \"groupName\": \"eslint\",\n      \"schedule\": [\"* * 1 * *\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Renovate Google Artifact Registry Authentication with Base64 Service Account (JSON)\nDESCRIPTION: Defines Renovate `hostRules` in JSON for authenticating with Google Artifact Registry using a base64 encoded service account key. The `username` is set to `_json_key_base64`, and the `password` contains the base64 encoded JSON key content. This method is suitable for self-hosted Renovate configurations where the key is not encrypted within the Renovate config itself.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/docker.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hostRules\": [\n    {\n      \"matchHost\": \"europe-docker.pkg.dev\",\n      \"username\": \"_json_key_base64\",\n      \"password\": \"<base64 service account>\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Renovate Regex Manager for Dockerfile ENV Variable (JSON)\nDESCRIPTION: Configures a Renovate `customManager` using `regex` in JSON format to update the `YARN_VERSION` environment variable within Dockerfiles (as shown in the first example). It specifies `fileMatch` for Dockerfiles, a `matchStrings` regex to capture the version (`currentValue`), and uses `depNameTemplate` and `datasourceTemplate` to hardcode the dependency name (`yarn`) and datasource (`npm`).\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/custom/regex/readme.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"customManagers\": [\n    {\n      \"customType\": \"regex\",\n      \"fileMatch\": [\"^Dockerfile$\"],\n      \"matchStrings\": [\"ENV YARN_VERSION=(?<currentValue>.*?)\\\\n\"],\n      \"depNameTemplate\": \"yarn\",\n      \"datasourceTemplate\": \"npm\"\n    }\n  ]\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Renovate Configuration Inline in package.json (JSON)\nDESCRIPTION: This example shows how to embed Renovate-specific configuration inside a project's package.json file as a nested object under the \"renovate\" property. No dependencies are required, but the project should use npm and maintain a valid package.json structure. The key parameter here is 'labels', which sets custom labels for Renovate-generated pull requests. The JSON object must remain well-formed; all keys and string values must be properly quoted. This allows repository-specific configuration, with settings overriding higher-level options. The expected input is simply the insertion of the \"renovate\" block into package.json, and Renovate will pick up these settings automatically.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/development/configuration.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"renovate\": {\n    \"labels\": [\"upgrade\", \"bot\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring File Match Pattern for a Single File in Renovate (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to match a specific file, \\\"config/k8s.yaml\\\", using the \\'fileMatch\\' option for the Kubernetes manager in Renovate. This configuration is ideal when there is only one Kubernetes manifest file to handle. The regular expression \\'^config/k8s\\\\.yaml$\\' ensures that only the desired file is selected.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/kubernetes/readme.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kubernetes\": {\n    \"fileMatch\": [\"^config/k8s\\\\.yaml$\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PR Target Branch with baseBranches in Renovate (JSON)\nDESCRIPTION: This JSON snippet sets Renovate's Pull Request target to an alternative branch (e.g., 'next') by using the 'baseBranches' array. Include this in your configuration file to direct all PRs to the specified branches rather than the repository default. Multiple branches can be listed in 'baseBranches' to update more than one concurrently.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/faq.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"baseBranches\": [\"next\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Host Rules for Private Composer Packages in Renovate (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to add host rules to Renovate for accessing private Composer package repositories. It shows the use of 'username' and 'password' fields for basic authentication, as well as a 'token' field for bearer token authentication. These entries should be added to the bot's main config file to avoid credential leaks. The 'hostRules' array can contain multiple host configuration objects, each specifying matchHost, hostType, and credentials. The key parameters are 'matchHost', 'hostType', 'username', 'password', and 'token'. Inputs are host rules as JSON objects, outputs are secure connections and successful dependency updates. The use of plain-text credentials presents a risk if not secured in application configuration.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/php.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hostRules\": [\n    {\n      \"matchHost\": \"some.vendor.com\",\n      \"hostType\": \"packagist\",\n      \"username\": \"<your-username>\",\n      \"password\": \"<your-password>\"\n    },\n    {\n      \"matchHost\": \"bearer-auth.for.vendor.com\",\n      \"hostType\": \"packagist\",\n      \"token\": \"abcdef0123456789\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Pre-commit Repositories and Hooks in YAML\nDESCRIPTION: Defines a minimal pre-commit configuration, declaring a list of repositories and required hooks within a .pre-commit-config.yaml file. The 'repos' key expects an array of objects, where each object must include 'repo' (repository URL), 'rev' (revision/version), and a 'hooks' array each with its 'id'. This structure is required for Renovate to identify and update dependencies. No additional dependencies or language are specified in this minimal example.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/pre-commit/readme.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nrepos:\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v1.0.0\n    hooks:\n      - id: some-hook-id\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Package Setup with setup.cfg (INI)\nDESCRIPTION: This snippet demonstrates a structured configuration for Python packaging using setuptools via the setup.cfg file format. It declares standard options such as zip safety, package discovery, Python version requirements, and install_requires for core dependencies. The file supports complex requirement specifications (including environment markers and extras), separate dependency groups for metadata, testing, coverage, and development environments, and utilizes comments for additional context. These configurations are essential for automating Python package installation, wheel creation, and environment setup via pip and other tools.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/setup-cfg/__fixtures__/setup-cfg-1.txt#_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[options]\nzip_safe = true\ninclude_package_data = true\npython_requires = >= 2.7, != 3.0.*, != 3.1.*, != 3.2.*, != 3.5.1\npackages = find:\ntest_suite = tests\ninstall_requires = coloredlogs ~=14.0\ninstall_requires = first ~=1.0;second==2.2 ; third>=3.0  # 1,2 and 3\ninstall_requires =\n    quux >=5.5.5\n    python-dateutil ~=2.1\n    foo >=1.1.1\n    baz >=3.3.3.\n    docopt ~=0.4\n    fs ~=2.1\n    nmspc.pkg ==1.0\n\n    requests[security] ~=2.18\n    compact~=1.2.3;python>'3.10'\ninstall_requires= \n    responses >=2.27.0\n\nsetup_requires =\n    six ~=1.4\n    tqdm ~=4.19\n    tenacity ~=6.0\ntests_require =\n    typing ~=3.6    ; python_version < '3.6'\n    verboselogs ~=1.7  # verboselogs\n    instalooter[test]\n\n\n[options.extras_require]\n# add EXIF metadata to downloaded pictures\nmetadata =\n    piexif\n    Pillow  # Python Image Library\n# all features\nall =\n    %(metadata)s\n# bar and qux\nbar = bar >=2.2.2  # bar\nqux = qux >=4.4.4  # qux\n# test dependencies\ntest =\n    contexter ~=0.1\n    mock ~=2.0 ; python_version < '3.4'\n    parameterized ~=0.6\n    green ~=2.12\n    %(metadata)s\n# coverage dependencies\ncoverage =\n    coverage\n    codecov\n    codacy-coverage\n# documentation dependencies\ndoc = sphinx ~=1.7\ndoc =\n    sphinx-bootstrap-theme ~=0.6\n    semantic-version ~=2.6\n# development dependencies\ndev =\n    docutils\n    Pygments\n    %(test)s\n    %(coverage)s\n\n\n[options]\npackages = find_namespace:\ninstall_requires =\n\taiortc>=0.9\n\twebsockets>=8.1\n\taiohttp>=3.6\n\tpyee>=6.0\n\twebsockets>=8.1\n\tdataclasses_json>=0.3\n\tcoloredlogs>=10.0\npython_requires = >=3.7\ninstall_requires = av~=8.0.0\n\n```\n\n----------------------------------------\n\nTITLE: Setting GitHub App Installation Token via RENOVATE_TOKEN (Shell)\nDESCRIPTION: Provides the GitHub App installation token using the `RENOVATE_TOKEN` environment variable. This is an alternative to setting it in `config.js` or via CLI. Remember that installation tokens expire after 1 hour and require regeneration.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/platform/github/readme.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nexport RENOVATE_TOKEN=\"ghs_123exampletoken\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Renovate registry URLs via packageRules (JSON)\nDESCRIPTION: Shows how to manually configure custom registry URLs for specific datasources using `packageRules` in Renovate. This example sets a custom Docker registry URL (`https://docker.mycompany.domain`) for all packages matched by the `docker` datasource, overriding default or auto-detected registries.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_137\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\"docker\"],\n      \"registryUrls\": [\"https://docker.mycompany.domain\"]\n    }\n  ]\n}\n```\n```\n\n----------------------------------------\n\nTITLE: JSONata Query: Extract from Specific Environment Node - Query\nDESCRIPTION: A JSONata query for extracting dependencies only from the 'production' node. No runtime dependencies except a JSONata-compliant processor. Key parameter: accesses the 'production' node, mapping 'package' and 'version' to 'depName' and 'currentValue'. Input: above JSON structure; Output: dependency objects from 'production' only.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/custom/jsonata/readme.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nproduction.{ \"depName\": package, \"currentValue\": version }\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret for SSH Keys using kubectl (sh)\nDESCRIPTION: Provides the `kubectl` command to create a Kubernetes generic secret named `ssh-key-secret`. This secret populates its data from local files: the SSH configuration file (`/path/to/config`), the private SSH key (`/path/to/.ssh/id_rsa`), and the public SSH key (`/path/to/.ssh/id_rsa.pub`). This is a prerequisite for mounting SSH credentials into the Renovate pod.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/examples/self-hosting.md#_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nkubectl create secret generic ssh-key-secret --from-file=config=/path/to/config --from-file=id_rsa=/path/to/.ssh/id_rsa --from-file=id_rsa.pub=/path/to/.ssh/id_rsa.pub\n```\n\n----------------------------------------\n\nTITLE: Following Specific Tag Versions - Renovate Bot - JSON\nDESCRIPTION: This example shows how to configure Renovate to follow a pre-release or custom tag for specific dependencies, such as always tracking the 'insiders' tag of TypeScript. The 'packageRules' array includes an object with 'matchPackageNames' and 'followTag'. Dependencies required are a Renovate-compatible configuration file; key parameters define which packages and tags to follow. Input is a JSON block, output is Renovate updating matching dependencies to the specified tag stream.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_49\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\"typescript\"],\n      \"followTag\": \"insiders\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Renovate CLI via npm in AWS CodeBuild for CodeCommit (buildspec.yml)\nDESCRIPTION: Presents an example AWS CodeBuild `buildspec.yml` configuration to execute Renovate by installing its CLI tool via npm. It enables the `git-credential-helper`, sets environment variables similar to the Docker example, installs the `renovate` package globally using `npm install -g renovate`, and then runs the `renovate` command. This requires Node.js and npm to be available in the build environment.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/platform/codecommit/readme.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n```yml title=\"Example buildspec.yml file\"\nversion: 0.2\nenv:\n  shell: bash\n  git-credential-helper: yes\n  variables:\n    RENOVATE_PLATFORM: 'codecommit'\n    RENOVATE_REPOSITORIES: '[\"repoName1\", \"repoName2\"]'\n    RENOVATE_CONFIG: '{\"extends\":[\"config:recommended\"]}'\n    LOG_LEVEL: 'debug'\n    AWS_REGION: 'us-east-1'\nphases:\n  build:\n    on-failure: CONTINUE\n    commands:\n      - npm install -g renovate\n      - renovate\n```\n```\n\n----------------------------------------\n\nTITLE: Define Puppet Modules with Multiple Forges in Ruby Puppetfile\nDESCRIPTION: Illustrates how to use multiple `forge` directives within a single Puppetfile. Modules listed after a `forge` directive use that specific forge until another `forge` directive is encountered. This example shows using both the public Puppet Forge and a private forge (`https://forgeapi.example.com`).\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/puppet/readme.md#_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nforge \"https://forgeapi.puppetlabs.com\"\n\nmod 'puppetlabs/apt', '8.3.0'\nmod 'puppetlabs/apache', '7.0.0'\nmod 'puppetlabs/concat', '7.1.1'\n\n# Private forge\nforge \"https://forgeapi.example.com\"\n\nmod 'example/infra', '3.3.0'\n```\n\n----------------------------------------\n\nTITLE: Scraping Versions from HTML Downloads Page with Custom Datasource - JSON\nDESCRIPTION: This configuration defines a custom datasource for Renovate named 'curl' that scrapes version information from an HTML downloads page. The 'defaultRegistryUrlTemplate' points to the target HTML page, 'format' signals HTML parsing, and the 'packageRules' array provides a capture regex to extract versions from file names. This approach works for projects that provide downloadable releases only via HTML listings, without a structured API.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/custom/readme.md#_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"customDatasources\": {\n    \"curl\": {\n      \"defaultRegistryUrlTemplate\": \"https://curl.se/download.html\",\n      \"format\": \"html\"\n    }\n  },\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\"custom.curl\"],\n      \"extractVersion\": \"/curl-(?<version>.+)\\\\.tar\\\\.gz$\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Post-Upgrade Tasks with Allowed Commands - JSON\nDESCRIPTION: This JSON snippet configures Renovate to run post-upgrade tasks after updating a dependency, specifying the commands to execute (such as 'tslint --fix'), file filters to control which files to commit, and the execution mode ('update' means per dependency update on the branch). Dependencies include setting up commands permitted in 'allowedCommands' in the global configuration and enabling optional command templating for dynamic tasks. Inputs are the commands to run and file patterns to apply, and outputs are modified or generated files included in the related commit. This feature works only on self-hosted Renovate instances.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_130\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"postUpgradeTasks\\\": {\\n    \\\"commands\\\": [\\\"tslint --fix\\\"],\\n    \\\"fileFilters\\\": [\\\"yarn.lock\\\", \\\"**/*.js\\\"],\\n    \\\"executionMode\\\": \\\"update\\\"\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping Renovate Updates by Source URL in JSON\nDESCRIPTION: This JSON configuration uses `matchSourceUrls` within `packageRules` to identify and group dependencies based on their source code repository URL. This example groups all packages originating from the Vue monorepo ('https://github.com/vuejs/vue') into a group named 'Vue monorepo packages'. It supports exact matches, globs, and regex.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_118\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchSourceUrls\": [\"https://github.com/vuejs/vue\"],\n      \"groupName\": \"Vue monorepo packages\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring File Match Pattern for Files in k8s Directory in Renovate (JSON)\nDESCRIPTION: This configuration targets all YAML files within the \\'k8s/\\' directory by applying a regular expression to the \\'fileMatch\\' option in the Kubernetes manager\\'s settings. This is suitable for repositories where Kubernetes manifests are organized in a designated directory. Place this JSON object within your Renovate configuration file. The main consideration is ensuring that the expression aligns with your directory structure.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/kubernetes/readme.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kubernetes\": {\n    \"fileMatch\": [\"k8s/.+\\\\.yaml$\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CircleCI Token Authentication - Renovate JSON\nDESCRIPTION: Shows a sample Renovate JSON configuration to authenticate CircleCI API requests for private orbs by specifying a hostRules entry. Requires an encrypted token generated from Renovate's encryption page, which is entered under the 'token' field. This configuration ensures the authorization header uses only the raw token, omitting Bearer/Basic prefixes, and is necessary for automated dependency extraction from private CircleCI orbs.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/circleci/readme.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hostRules\": [\n    {\n      \"matchHost\": \"circleci.com\",\n      \"authType\": \"Token-Only\",\n      \"encrypted\": {\n        \"token\": \"****\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Renovate Authentication for Private OCI Helm Registries (JSON5)\nDESCRIPTION: Demonstrates how to configure `hostRules` in Renovate to authenticate with private OCI registries for Helm charts. It includes examples for both global host matching (`registry.gitlab.com`) and specific repository URL matching (`oci://...`), using `hostType: 'docker'`. Requires substituting placeholder username and password.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/helmv3/readme.md#_snippet_1\n\nLANGUAGE: json5\nCODE:\n```\n{\n  hostRules: [\n    {\n      // Global login\n      matchHost: 'registry.gitlab.com',\n      hostType: 'docker',\n      username: '<some-username>',\n      password: '<some-password>',\n    },\n    {\n      // For repository string oci://registry.gitlab.com/user/oci-helm-test\n      matchHost: 'https://registry.gitlab.com/user/oci-helm-test',\n      hostType: 'docker',\n      username: '<some-username>',\n      password: '<some-password>',\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Requiring Approval for All Updates - Renovate Dependency Dashboard - JSON\nDESCRIPTION: Configures Renovate to require manual approval for all dependency updates by adding the ':dependencyDashboardApproval' preset to the 'extends' array. This is placed in the Renovate configuration and will delay all pull requests for dependencies until approval is given via the dashboard, except for vulnerability remediation PRs. The input is a JSON config object, and the output is an approval-gated update flow.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/key-concepts/dashboard.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": [\"config:recommended\", \":dependencyDashboardApproval\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Automerge to Specific NPM Packages in Renovate (JSON)\nDESCRIPTION: This JSON snippet demonstrates a `packageRules` configuration for Renovate. It targets dependencies identified by the `npm` datasource, specifically the `lodash` package, and enables the `automerge` feature for updates to this package. This rule would typically reside within the main Renovate configuration object in a file like `renovate.json`.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/modules/datasource/index.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\"npm\"],\n      \"matchPackageNames\": [\"lodash\"],\n      \"automerge\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Renovate Rules Based on Dependency Category in JSON\nDESCRIPTION: This JSON snippet shows how to use `matchCategories` within `packageRules` to target dependencies belonging to a specific category, 'python' in this example. The rule adds the label 'py' to pull requests generated for Python dependencies. Note that `matchCategories` rules are applied after dependency extraction.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_98\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchCategories\": [\"python\"],\n      \"addLabels\": [\"py\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Host Rules Selectively to Read-Only Operations in Renovate (JSON)\nDESCRIPTION: Configures a host rule using `readOnly: true` within `hostRules` to apply settings, such as a specific `token`, only to requests identified as read operations (e.g., GET, HEAD) targeting the matched host (`api.github.com`). This can offload read traffic to a different user/token, potentially avoiding rate limits.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_73\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hostRules\": [\n    {\n      \"matchHost\": \"api.github.com\",\n      \"readOnly\": true,\n      \"token\": \"********\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring File Match Pattern for All YAML Files in Renovate (JSON)\nDESCRIPTION: This JSON snippet configures the Renovate Kubernetes manager to match all files ending with \\'.yaml\\' in the repository. This is useful when most YAML files are Kubernetes-related. The configuration should be added to the main Renovate config file. The primary parameter is \\'fileMatch\\', which accepts a list of regular expressions for matching file paths.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/kubernetes/readme.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kubernetes\": {\n    \"fileMatch\": [\"\\\\.yaml$\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Matching Renovate Rules by Package Name Regex Pattern in JSON\nDESCRIPTION: This JSON configuration demonstrates using `matchPackageNames` with a regular expression (enclosed in '/') within `packageRules`. It groups together any npm package whose name starts with 'angular' (case-sensitive regex match) into a group named 'Angular'.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_117\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\"npm\"],\n      \"matchPackageNames\": [\"/^angular/\"],\n      \"groupName\": \"Angular\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Minimal IAM Permissions for EKS Addon Datasource (JSON)\nDESCRIPTION: Specifies the minimum AWS IAM policy required for the Renovate datasource to function. It grants permission to describe EKS addon versions using the `eks:DescribeAddonVersions` action on all resources.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/aws-eks-addon/readme.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"AllowDescribeEKSAddonVersions\",\n  \"Effect\": \"Allow\",\n  \"Action\": [\"eks:DescribeAddonVersions\"],\n  \"Resource\": \"*\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Renovate Custom Regex Manager for AWS AMIs in JavaScript\nDESCRIPTION: This JavaScript module exports a Renovate configuration object defining a custom manager required for the AWS AMI datasource. The manager uses a regular expression (`matchStrings`) to find AMI definitions across all files (`fileMatch: ['.*']`), extracting the AMI filter (`packageName`), current image name (`currentDigest`), dependency name (`depName`), and current AMI ID (`currentValue`). It configures Renovate to use the `aws-machine-image` datasource and versioning templates for updates.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/aws-machine-image/readme.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  customManagers: [\n    {\n      customType: 'regex',\n      fileMatch: ['.*'],\n      matchStrings: [\n        '.*amiFilter=(?<packageName>.*?)\\n(.*currentImageName=(?<currentDigest>.*?)\\n)?(.*\\n)?.*?(?<depName>[a-zA-Z0-9-_:]*)[ ]*?[:|=][ ]*?[\"|\\']?(?<currentValue>ami-[a-z0-9]{17})[\"|\\']?.*',\n      ],\n      datasourceTemplate: 'aws-machine-image',\n      versioningTemplate: 'aws-machine-image',\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Matching Renovate Updates by Current Value (Negated Regex) in JSON\nDESCRIPTION: This JSON configuration demonstrates using `matchCurrentValue` with a special negated regular expression syntax (`!/ /`) within `packageRules`. It targets packages named like 'io.github.resilience4j**' whose current value does *not* start with '0.'. This allows excluding certain version patterns.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_103\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\"io.github.resilience4j**\"],\n      \"matchCurrentValue\": \"!/^0\\\\./\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Renovate as a Kubernetes CronJob with SSH (yml)\nDESCRIPTION: A comprehensive Kubernetes configuration defining multiple resources to deploy Renovate. It includes a Namespace, a Secret (`renovate-env`) for environment variables (API endpoints, tokens, Git author), the SSH key Secret (`ssh-key-secret` defined previously), and a CronJob (`renovate`) scheduled hourly. The CronJob mounts the SSH key secret into the Renovate container's `/home/ubuntu/.ssh` directory and references the environment variables secret. Placeholders like `<namespace>`, `<repository>`, token values, and potentially image tag need customization.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/examples/self-hosting.md#_snippet_14\n\nLANGUAGE: yml\nCODE:\n```\n---\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: <namespace, for example renovate>\n\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: renovate-env\n  namespace: <namespace>\ntype: Opaque\nstringData:\n  RENOVATE_GITHUB_COM_TOKEN: 'any-personal-user-token-for-github-com-for-fetching-changelogs'\n  RENOVATE_AUTODISCOVER: 'false'\n  RENOVATE_ENDPOINT: 'https://github.company.com/api/v3'\n  RENOVATE_GIT_AUTHOR: 'Renovate Bot <bot@renovateapp.com>'\n  RENOVATE_PLATFORM: 'github'\n  RENOVATE_TOKEN: 'your-github-enterprise-renovate-user-token'\n---\napiVersion: v1\ndata:\n  config: aG9zdCBnaXRsYWIuY29tCiAgSG9zdE5hbWUgZ2l0bGFiLmNvbQogIFN0cmljdEhvc3RLZXlDaGVja2luZyBubwogIElkZW50aXR5RmlsZSB+Ly5zc2gvaWRfcnNhCiAgVXNlciBnaXQ=\n  id_rsa: <base64String>\n  id_rsa.pub: <base64String>\nkind: Secret\nmetadata:\n  name: ssh-key-secret\n  namespace: <namespace>\n---\napiVersion: batch/v1beta1\nkind: CronJob\nmetadata:\n  name: renovate\n  namespace: <namespace>\nspec:\n  schedule: '@hourly'\n  concurrencyPolicy: Forbid\n  jobTemplate:\n    spec:\n      template:\n        spec:\n          volumes:\n            - name: ssh-key-volume\n              secret:\n                secretName: ssh-key-secret\n          containers:\n            - name: renovate\n              # Update this to the latest available and then enable Renovate on the manifest\n              image: renovate/renovate:39.252.0\n              volumeMounts:\n                - name: ssh-key-volume\n                  readOnly: true\n                  mountPath: '/home/ubuntu/.ssh'\n              args:\n                - <repository>\n              # Environment Variables\n              envFrom:\n                - secretRef:\n                    name: renovate-env\n          restartPolicy: Never\n```\n\n----------------------------------------\n\nTITLE: Define Puppet Module from GitHub Using Tag in Ruby Puppetfile\nDESCRIPTION: Shows how to define a Puppet module sourced directly from a Git repository hosted on GitHub (though the syntax applies to any Git provider like GitLab shown here). It specifies the Git repository URL using the `:git` parameter and pins the version to a specific Git tag using the `:tag` parameter.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/puppet/readme.md#_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nmod 'example/standalone_jar',\n    :git => 'git@gitlab.example.de:puppet/example-standalone_jar',\n    :tag => '0.9.0'\n```\n\n----------------------------------------\n\nTITLE: Matching Renovate Updates by Current Version (Regex) in JSON\nDESCRIPTION: This JSON configuration shows using `matchCurrentVersion` with a regular expression within `packageRules`. It targets packages named like 'io.github.resilience4j**' whose resolved current version starts with '1.'. This differs from `matchCurrentValue` as it uses the resolved version, not the raw string from the manifest.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_105\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\"io.github.resilience4j**\"],\n      \"matchCurrentVersion\": \"/^1\\\\./\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using COPY --from to Reference an Image - Dockerfile\nDESCRIPTION: This Dockerfile snippet shows both a standard FROM directive and a COPY --from instruction, which pulls files from an external image (alpine:3.19.4). This enables multi-stage builds by copying /bin/sh from the alpine image to the current image. Dependencies include Docker and the specified images (node:20.9.0, alpine:3.19.4). Inputs are the image names and file paths. The output is a layered image containing copied files.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/dockerfile/readme.md#_snippet_3\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM node:20.9.0\nCOPY --from alpine:3.19.4 /bin/sh /usr/local/sh\n```\n\n----------------------------------------\n\nTITLE: Enabling Abort on Error for a Specific Docker Host in Renovate JSON\nDESCRIPTION: Demonstrates setting `abortOnError` to `true` specifically for the host `docker.company.com`, causing Renovate runs to abort if significant HTTP errors occur when interacting with this particular host. This allows fine-grained error handling for critical private registries.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_61\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hostRules\": [\n    {\n      \"matchHost\": \"docker.company.com\",\n      \"abortOnError\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Node.js Versions in Travis Build Matrix - diff\nDESCRIPTION: Shows a diff representing how Renovate updates Node.js versions in the node_js section of a .travis.yml file. This snippet demonstrates the replacement of old Node.js versions with newer LTS versions. Inputs are the YAML list of versions before and after update; output is a patched configuration. No direct dependencies, but expects usage in context of Renovate's automated pull requests and a YAML Travis configuration file.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/travis/readme.md#_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\nnode_js:\n-  - 8.10.0\n-  - 10.10.0\n+  - 16.13.0\n+  - 16.13.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Renovate Package Rules for Helm Managers - JSON\nDESCRIPTION: This JSON snippet shows how to disable Renovate for certain directories containing Helm charts, preventing updates to dependencies in charts directories during Helm manager processing. The object uses packageRules to match files in charts subdirectories, filter for specific managers ('helmv3' and 'helm-values'), and sets 'enabled' to false to exclude them from automated updates. The expected input is a Renovate configuration file; the output is that Renovate will ignore these matched files for the specified managers.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/kustomize/readme.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"packageRules\\\": [\\n    {\\n      \\\"matchFileNames\\\": [\\\"**/charts/**\\\"],\\n      \\\"matchManagers\\\": [\\\"helmv3\\\", \\\"helm-values\\\"],\\n      \\\"enabled\\\": false\\n    }\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Setting index URL in requirements.txt for Python (plaintext)\nDESCRIPTION: Demonstrates how to set a custom PyPI index URL directly in a requirements.txt file for Python dependency management. The first line specifies the index URL, while subsequent lines list pinned package versions. Renovate will detect and use this URL to look for dependency upgrades. Inputs are package names and versions; output is dependency installation using an alternate registry.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/python.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n--index-url http://example.com/private-pypi/\\nsome-package==0.3.1\\nsome-other-package==1.0.0\n```\n\n----------------------------------------\n\nTITLE: Enabling Indirect Dependency Updates for Go Modules - JSON - Markdown\nDESCRIPTION: This JSON configuration snippet enables Renovate to update indirect dependencies in go.mod files by specifying a package rule. The rule matches the manager 'gomod' and dep type 'indirect', and enables updates by setting 'enabled' to true. This must be added to renovate.json for the effect to take place. It assumes Renovate is installed and configured, with inputs as indirect dependencies matching the criteria and outputs as automatic updates.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/gomod/readme.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchManagers\": [\"gomod\"],\n      \"matchDepTypes\": [\"indirect\"],\n      \"enabled\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Matching Renovate Updates by New Value (Regex) in JSON\nDESCRIPTION: This JSON snippet shows how to use `matchNewValue` with a regular expression (enclosed in '/') within `packageRules`. It targets packages named like 'io.github.resilience4j**' where the proposed new version starts with '1.'.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_113\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\"io.github.resilience4j**\"],\n      \"matchNewValue\": \"/^1\\\\./\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Renovate Configuration via Config File in JavaScript\nDESCRIPTION: This snippet demonstrates how to define and export a global Renovate configuration as a JavaScript object using CommonJS module syntax. Dependencies require Node.js and the ability to run JavaScript files with module.exports; the config file must have an appropriate extension (e.g., .js or .cjs, especially for ESM repos). Key parameters like npmrc, baseDir, forkProcessing, and gradle are set as properties to customize Renovate behavior for all projects. The expected input is a JavaScript object; the Renovate process will read and apply these settings globally. The configuration file must be explicitly referenced if renamed or relocated, and only specific file types are supported.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/development/configuration.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  npmrc: '//registry.npmjs.org/:_authToken=abc123',\n  baseDir: '/tmp/renovate',\n  forkProcessing: 'enabled',\n  gradle: { enabled: false },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Renovate Custom Regex Manager for AWS AMIs in YAML/JSON\nDESCRIPTION: This YAML snippet shows an alternative representation of the Renovate custom manager configuration for AWS AMIs, equivalent to the JavaScript example but structured as YAML representing JSON. It defines a regex-based custom manager (`customType: 'regex'`) to detect AMI IDs in any file (`fileMatch: ['.*']`) using specific comment patterns (`# amiFilter=...`) and assigns the `aws-machine-image` datasource for updates.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/aws-machine-image/readme.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n{\n  'customManagers':\n    [\n      {\n        'customType': 'regex',\n        'fileMatch': ['.*'],\n        'matchStrings':\n          [\n            \".*amiFilter=(?<packageName>.*?)\\n(.*currentImageName=(?<currentDigest>.*?)\\n)?(.*\\n)?.*?(?<depName>[a-zA-Z0-9-_:]*)[ ]*?[:|=][ ]*?[\\\"|']?(?<currentValue>ami-[a-z0-9]{17})[\\\"|']?.*\",\n          ],\n        'datasourceTemplate': 'aws-machine-image',\n        'versioningTemplate': 'aws-machine-image',\n      },\n    ],\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Renovate Rules by Datasource in JSON\nDESCRIPTION: This JSON snippet demonstrates using `matchDatasources` within `packageRules` to apply a rule only to dependencies originating from a specific datasource. In this case, the rule adds the label 'circleci-orb!!' to updates for dependencies sourced from the 'orb' datasource (CircleCI Orbs).\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_107\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\"orb\"],\n      \"labels\": [\"circleci-orb!!\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: JSONata Query: Map Node Keys to Dependency Name - Query\nDESCRIPTION: JSONata query that iterates over all entries, mapping node key as 'depName' and the 'version' value as 'currentValue'. No dependencies. Input: object with dependency keys, Output: object mapping depName and version.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/custom/jsonata/readme.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n$each(function($v, $n) { { \"depName\": $n, \"currentValue\": $v.version } })\n```\n\n----------------------------------------\n\nTITLE: Matching Renovate Updates by New Value (Negated Regex) in JSON\nDESCRIPTION: This JSON configuration demonstrates using `matchNewValue` with a negated regular expression syntax (`!/ /`) within `packageRules`. It targets packages named like 'io.github.resilience4j**' where the proposed new version does *not* start with '0.'. This allows excluding updates to certain version patterns.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_114\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\"io.github.resilience4j**\"],\n      \"matchNewValue\": \"!/^0\\\\./\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SCM for Fetchable Changelogs in Maven pom.xml - XML\nDESCRIPTION: This XML snippet shows how to configure the <scm> section in a Maven pom.xml to specify a SCM URL, enabling Renovate to fetch changelogs automatically. The <url> property inside <scm> should point to your repository (public or private). No external dependencies beyond Maven are required. Input is the project pom.xml; output is correct harvesting of changelog links by Renovate. Note: SCM URLs for private repositories leverage Maven's existing credentials/token setup.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/maven/readme.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<scm>\\n    <url>scm:git:https://github.com/path_to_repository</url>\\n</scm>\n```\n\n----------------------------------------\n\nTITLE: Setting manager-specific Renovate registry aliases (JSON)\nDESCRIPTION: Demonstrates setting registry aliases specifically for the `gitlabci` manager within the Renovate configuration. It maps internal GitLab CI variable-based registry names (`$HARBOR_HOST/$HARBOR_PROJECT`, `$HARBOR_HOST/tools`) to external proxy or tool registry URLs like `registry.example.com/proxy`.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_136\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"Setting aliases for a specific Renovate manager only\"\n{\n  \"gitlabci\": {\n    \"registryAliases\": {\n      \"$HARBOR_HOST/$HARBOR_PROJECT\": \"registry.example.com/proxy\",\n      \"$HARBOR_HOST/tools\": \"registry.example.com/tools\"\n    }\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Source in requirements.yaml for Ansible Galaxy Collection\nDESCRIPTION: This YAML configuration snippet shows how to specify a custom source URL for an Ansible Galaxy collection directly within the `requirements.yaml` file. The `source` key overrides the default Ansible Galaxy URL, directing tools to fetch the specified collection (`community.general` version `3.0.0`) from the provided private hub URL.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/galaxy-collection/readme.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ncollections:\n  - name: community.general\n    version: 3.0.0\n    source: https://hub.mydomain.com/api/galaxy/content/community/\n```\n\n----------------------------------------\n\nTITLE: Configuring Recursive Regex Managers for Nested Dependencies in Renovate (JSON)\nDESCRIPTION: This JSON config defines two customManagers for extracting nested dependency definitions from JSON files using the 'recursive' matchStringsStrategy. The first manager chains three patterns to extract a docker image from a backup.test node, while the second manager extracts both docker images found in test keys. Used for incrementally narrowing down and extracting dependency information from deeply nested or repetitively structured JSON. Requires the customManagers option in Renovate's configuration.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"customManagers\": [\n    {\n      \"customType\": \"regex\",\n      \"fileMatch\": [\"^example.json$\"],\n      \"matchStringsStrategy\": \"recursive\",\n      \"matchStrings\": [\n        \"\\\"backup\\\":\\\\s*{[^}]*}\",\n        \"\\\"test\\\":\\\\s*\\\\{[^}]*}\",\n        \"\\\"name\\\":\\\\s*\\\"(?<depName>.*)\\\"[^\\\"]*\\\"type\\\":\\\\s*\\\"(?<datasource>.*)\\\"[^\\\"]*\\\"value\\\":\\\\s*\\\"(?<currentValue>.*)\\\"\"\n      ],\n      \"datasourceTemplate\": \"docker\"\n    },\n    {\n      \"fileMatch\": [\"^example.json$\"],\n      \"matchStringsStrategy\": \"recursive\",\n      \"matchStrings\": [\n        \"\\\"test\\\":\\\\s*\\\\{[^}]*}\",\n        \"\\\"name\\\":\\\\s*\\\"(?<depName>.*)\\\"[^\\\"]*\\\"type\\\":\\\\s*\\\"(?<datasource>.*)\\\"[^\\\"]*\\\"value\\\":\\\\s*\\\"(?<currentValue>.*)\\\"\"\n      ],\n      \"datasourceTemplate\": \"docker\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Argo CD File Match for Specific Directory (Renovate JSON)\nDESCRIPTION: This JSON configuration snippet shows how to configure Renovate's `argocd` manager to only consider YAML files within a specific directory (e.g., `argocd/`) using the `fileMatch` pattern `argocd/.+\\\\.yaml$`. This is useful when Argo CD files are organized in a dedicated folder.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/argocd/readme.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"Argo CD YAML files are in a argocd/ directory\"\n{\n  \"argocd\": {\n    \"fileMatch\": [\"argocd/.+\\\\.yaml$\"]\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Using Basic Template Variables in Renovate (Handlebars)\nDESCRIPTION: Demonstrates the basic syntax for using a template variable (`depName`) within Renovate configuration fields. These variables are substituted with runtime values by Renovate when processing dependencies.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/templates.md#_snippet_0\n\nLANGUAGE: handlebars\nCODE:\n```\n{{depName}}\n```\n\n----------------------------------------\n\nTITLE: Configuring fileMatch for Kubernetes Manager in JSON\nDESCRIPTION: This JSON configuration snippet demonstrates how to define the `fileMatch` property for the 'kubernetes' manager in Renovate. It specifies a regular expression to match YAML files located within the 'config/' directory at the root of the repository. This is necessary for managers that don't have a default filename convention.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/modules/manager/index.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kubernetes\": {\n    \"fileMatch\": [\"^config/.*\\\\.yaml$\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying a Package Rule to a Specific Package by Name (JSON)\nDESCRIPTION: This JSON snippet shows how to target a configuration rule to a single package named 'abc'. Using 'matchPackageNames' within 'packageRules', alongside custom options such as 'assignees', applies special handling for only the matched package. Add to 'renovate.json' to enforce package-specific assignment or other rule modifications for 'abc'.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/faq.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\"abc\"],\n      \"assignees\": [\"importantreviewer\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Conditional Labels with `addLabels` in Renovate JSON\nDESCRIPTION: This JSON configuration demonstrates how to use `addLabels` within `packageRules` in Renovate. It sets a base label \"dependencies\". A rule replaces this with \"linting\" for ESLint packages. Another rule uses `addLabels` to append \"optional\" to the base label for optional dependencies, resulting in \"dependencies\" and \"optional\" labels for those PRs.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"labels\": [\"dependencies\"],\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\"/eslint/\"],\n      \"labels\": [\"linting\"]\n    },\n    {\n      \"matchDepTypes\": [\"optionalDependencies\"],\n      \"addLabels\": [\"optional\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Regex Manager with git-refs Datasource in Renovate (JSON)\nDESCRIPTION: This snippet demonstrates how to set up a custom manager in Renovate's configuration to use the git-refs datasource for updating digests, such as the HEAD of a repository branch. It requires Renovate and a configuration file (usually renovate.json or .renovaterc.json). The key parameters include fileMatch to specify the target files, matchStrings to extract the current digest, and templates for naming and linking the dependency. The configuration enables Renovate to track and update arbitrary Git references, which is useful for repositories or branches not natively supported. Input files must match the specified regex; outputs are automated dependency updates based on Git reference changes.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/git-refs/readme.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"customManagers\": [\n    {\n      \"customType\": \"regex\",\n      \"fileMatch\": [\"^versions.ini$\"],\n      \"matchStrings\": [\"GOOGLE_API_VERSION=(?<currentDigest>.*?)\\\\n\"],\n      \"currentValueTemplate\": \"master\",\n      \"depNameTemplate\": \"googleapis\",\n      \"packageNameTemplate\": \"https://github.com/googleapis/googleapis\",\n      \"datasourceTemplate\": \"git-refs\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Basic Configuration from config.js in JavaScript\nDESCRIPTION: This snippet demonstrates the simplest way to provide configuration to Renovate using a `config.js` file. It exports a plain JavaScript object containing configuration options (like a `token`) via `module.exports`. Renovate expects this file to export either an object directly, a Promise resolving to an object, or a function returning either.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/getting-started/running.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  token: 'abcdefg',\n};\n```\n\n----------------------------------------\n\nTITLE: Limiting Enabled Managers Using enabledManagers in JSON\nDESCRIPTION: This JSON configuration demonstrates how to use the `enabledManagers` array to restrict Renovate's operation to a specific set of managers. By listing 'npm' and 'dockerfile' in the array, Renovate will only process dependencies managed by these two managers and disable all others (like Bundler, Composer, etc.).\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/modules/manager/index.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"enabledManagers\": [\"npm\", \"dockerfile\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Renovate Host Rules for Azure DevOps - JavaScript\nDESCRIPTION: This JavaScript module exports a Renovate configuration object defining host rules for authenticating to Azure Artifacts/NPM registry using environment tokens, and specifies which repositories Renovate should operate on. Dependency: process.env.RENOVATE_TOKEN must be set (via pipeline or environment). Key parameters: hostType (npm), matchHost (registry host), username (apikey), password (token). Expects to be placed in config.js in repo root. Replace repository string accordingly.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/platform/azure/readme.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  hostRules: [\n    {\n      hostType: 'npm',\n      matchHost: 'pkgs.dev.azure.com',\n      username: 'apikey',\n      password: process.env.RENOVATE_TOKEN,\n    },\n  ],\n  repositories: ['YOUR-PROJECT/YOUR-REPO'],\n};\n\n```\n\n----------------------------------------\n\nTITLE: Example INI File Using Renovate GitLab Packages Datasource (INI)\nDESCRIPTION: This INI snippet demonstrates how to use comments within a `versions.ini` file to instruct Renovate (configured with the custom regex manager) to manage a dependency. The comment specifies the `gitlab-packages` datasource, the `depName` including the GitLab project path and package name (`gitlab-org/ci-cd/package-stage/feature-testing/new-packages-list:@gitlab-org/nk-js`), the `semver` versioning scheme, and the `registryUrl`. The current version is defined in the `NKJS_VERSION` variable.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/gitlab-packages/readme.md#_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n# renovate: datasource=gitlab-packages depName=gitlab-org/ci-cd/package-stage/feature-testing/new-packages-list:@gitlab-org/nk-js versioning=semver registryUrl=https://gitlab.com\nNKJS_VERSION=3.4.0\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Regex Manager for Debian Datasource in Renovate (JSON)\nDESCRIPTION: This JSON snippet defines a custom regex manager configuration in Renovate, instructing it to match Dockerfiles and extract Debian package information from version environment variables. Dependencies include a properly structured ‘renovate.json’ file and use of the ‘regex’ custom manager type. Key parameters include ‘matchStrings’ for regex-based matching, ‘registryUrlTemplate’ for specifying the Debian repository endpoint, and ‘datasourceTemplate’ set to ‘deb’. The input targets Dockerfile lines with Renovate comments to automate updates for apt-installable packages; output is automated PRs for dependency updates.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/deb/readme.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://docs.renovatebot.com/renovate-schema.json\",\n  \"customManagers\": [\n    {\n      \"customType\": \"regex\",\n      \"fileMatch\": [\"^Dockerfile$\"],\n      \"matchStrings\": [\n        \"#\\\\s*renovate:\\\\s*?(suite=(?<suite>.*?))?\\\\s*depName=(?<depName>.*?)?\\\\sENV .*?_VERSION=\\\"(?<currentValue>.*)\\\"\"\n      ],\n      \"registryUrlTemplate\": \"https://deb.debian.org/debian?suite={{#if suite }}{{suite}}{{else}}stable{{/if}}&components=main,contrib,non-free&binaryArch=amd64\",\n      \"datasourceTemplate\": \"deb\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Prefix.dev Channel Using API with JavaScript Configuration Object\nDESCRIPTION: This configuration object enables querying for the 'numpy' package from the 'conda-forge' channel specifically using prefix.dev's API endpoint. The 'packageName' is set to 'numpy' (without the channel prefix), and 'registryUrls' is provided as an array containing the prefix.dev registry URL for the channel. The dependencies are the JavaScript datasource logic that reads these config objects. The key parameters are 'packageName' and 'registryUrls'; the expected use is to provide this object to a function that handles registry lookups. Limitations include needing explicit URL specification for prefix.dev queries.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/conda/readme.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  packageName: 'numpy',\n  registryUrls: [\"https://prefix.dev/conda-forge/\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Pulling Docker/OCI Images using oci.pull in Bazel\nDESCRIPTION: This snippet shows how to use the `oci.pull` method, provided by the initialized `oci` extension, to pull a Docker/OCI image. It specifies the image name, digest, repository URL, target platforms, and tag. Renovate can update the `digest` or `tag` based on the datasource configuration.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/bazel-module/readme.md#_snippet_4\n\nLANGUAGE: bazel\nCODE:\n```\noci.pull(\n    name = \"nginx_image\",\n    digest = \"sha256:287ff321f9e3cde74b600cc26197424404157a72043226cbbf07ee8304a2c720\",\n    image = \"index.docker.io/library/nginx\",\n    platforms = [\"linux/amd64\"],\n    tag = \"1.27.1\",\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Helm Chart References in vendir.yml (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to configure vendir.yml to manage Helm chart dependencies using Renovate. It specifies chart name, version, repository URL (supporting OCI or HTTPS), and optional Helm CLI version. Requires vendir and the relevant Helm binary. Key parameters include 'name', 'version', 'repository.url', and 'helmVersion', and the expected output is vendir-managed chart content placed at the specified path.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/vendir/readme.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: vendir.k14s.io/v1alpha1\\nkind: Config\\n\\n# one or more directories to manage with vendir\\ndirectories:\\n  - # path is relative to the `vendir` CLI working directory\\n    path: config/_ytt_lib\\n    contents:\\n      path: github.com/cloudfoundry/cf-k8s-networking\\n      helmChart:\\n        # chart name (required)\\n        name: stable/redis\\n        # use specific chart version (string; optional)\\n        version: '1.2.1'\\n        # specifies Helm repository to fetch from (optional)\\n        repository:\\n          # repository url; supports experimental OCI Helm fetch via\\n          # oci:// scheme (required)\\n          url: https://...\\n        # specify Helm binary version to use;\\n        # '3' means binary 'helm3' needs to be on the path (optional)\\n        helmVersion: '3'\n```\n\n----------------------------------------\n\nTITLE: Configuring Crossplane `fileMatch` for All YAML Files (JSON)\nDESCRIPTION: This JSON configuration snippet demonstrates how to configure Renovate's `crossplane` manager to scan all files ending with `.yaml` in the repository using the `fileMatch` option. This approach is suitable when most YAML files in the repository are related to Crossplane definitions, avoiding the need for Renovate to check every YAML file.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/crossplane/readme.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"crossplane\": {\n    \"fileMatch\": [\"\\\\.yaml$\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Major.Minor Version Using Regex in Renovate (JSON)\nDESCRIPTION: This `renovate.json` package rule uses the `extractVersion` option with a regular expression to modify version strings for packages named 'foo'. The regex `^(?<version>v\\\\d+\\\\.\\\\d+)` captures only the 'v', major version, and minor version into a named group called `version`, effectively truncating patch versions (e.g., `v1.31.5` becomes `v1.31`).\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_45\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\"foo\"],\n      \"extractVersion\": \"^(?<version>v\\\\d+\\\\.\\\\d+)\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring NuGet Paths When Extending Renovate Presets\nDESCRIPTION: This JSON snippet demonstrates the correct way to ignore specific NuGet package file paths when using Renovate presets (like `config:recommended`) that extend `:ignoreModulesAndTests`. The `ignorePaths` configuration must be placed inside a dedicated `nuget` object within the Renovate configuration to ensure it merges correctly with the preset's settings, rather than being overridden.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/nuget.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://docs.renovatebot.com/renovate-schema.json\",\n  \"extends\": [\"config:recommended\"],\n  \"nuget\": {\n    \"ignorePaths\": [\"IgnoreThisPackage/**\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Providing Full Renovate Configuration via Single Environment Variable (Bash)\nDESCRIPTION: The `RENOVATE_CONFIG` environment variable allows passing a stringified JSON object containing multiple configuration options, such as platform and onboarding settings. Other specific `RENOVATE_` variables will override values set within this variable.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/config-overview.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nRENOVATE_CONFIG={\"platform\":\"gitlab\",\"onboarding\":false}\n```\n\n----------------------------------------\n\nTITLE: Matching Renovate Updates by Current Version Range in JSON\nDESCRIPTION: This JSON snippet illustrates using `matchCurrentVersion` in `packageRules` to target dependencies based on their resolved current version (considering lock files or resolved versions). This example matches 'angular' packages whose current version is 1.0.0 or higher (using SemVer range syntax). The range syntax must match the package's versioning scheme.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_104\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchCurrentVersion\": \">=1.0.0\",\n      \"matchPackageNames\": [\"angular\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Datasource and Package Name in Renovate - JSON\nDESCRIPTION: Demonstrates using 'overrideDatasource' and 'overridePackageName' within 'packageRules' to resolve package lookup problems by changing the datasource and/or package name. Dependencies: Renovate configuration with 'packageRules'. Key parameters are 'matchDatasources', 'matchPackageNames', 'overrideDatasource', 'overridePackageName'. Input is a JSON config fragment; output is re-mapped lookup logic during Renovate runs.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_121\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"packageRules\\\": [\\n    {\\n      \\\"matchDatasources\\\": [\\\"docker\\\"],\\n      \\\"matchPackageNames\\\": [\\\"renovate/renovate\\\"],\\n      \\\"overrideDatasource\\\": \\\"npm\\\",\\n      \\\"overridePackageName\\\": \\\"renovate\\\"\\n    }\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Renovate Package Manager Commands (JSON)\nDESCRIPTION: This `renovate.json` snippet demonstrates the `env` configuration option, used to set specific environment variables (e.g., `SOME_ENV_VARIABLE`) when Renovate executes package manager commands. This is a top-level option only, and the variable names must be pre-approved by the administrator in the `allowedEnv` configuration.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_43\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"env\": {\n    \"SOME_ENV_VARIABLE\": \"SOME_STRING_VALUE\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Registry URL Template in Custom Datasource for Renovate (JSON5)\nDESCRIPTION: This config snippet sets a defaultRegistryUrlTemplate for a custom datasource named 'foo' in Renovate. The URL includes a Handlebars-style template to interpolate the packageName. Use case: when the default registry for a datasource doesn't support all scenarios, or when extracted regex groups don't provide the registryUrl. Requires Renovate and assumes the custom datasource plugin infrastructure is enabled.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_35\n\nLANGUAGE: json\nCODE:\n```\n{\n  customDatasources: {\n    foo: {\n      defaultRegistryUrlTemplate: 'https://example.foo.bar/v1/{{ packageName }}',\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a git_repository in Bazel Module - Python\nDESCRIPTION: Defines a git_repository rule with name, remote (GitHub), and commit attributes in a Bazel module context. Renovate uses the commit to track updates from the GitHub repository. Inputs include the unique dependency name, repository URL, and commit hash. Renovate only supports GitHub remotes for update tracking.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/bazel.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ngit_repository(\n    name = \"rules_foo\",\n    remote = \"https://github.com/fooexample/rules_foo.git\",\n    commit = \"8c94e11c2b05b6f25ced5f23cd07d0cfd36edc1a\",\n)\n```\n\n----------------------------------------\n\nTITLE: Ignoring Specific Paths for Dockerfile Scanning in Renovate (JSON)\nDESCRIPTION: Configures Renovate via `renovate.json` to skip scanning for Docker dependencies within specified directory paths. This example uses the `ignorePaths` array to prevent Renovate from processing any files within the `docker/old-files/` directory.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/docker.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": [\"config:recommended\"],\n  \"ignorePaths\": [\"docker/old-files/\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Regex Versioning Scheme Override in Renovate (JSON)\nDESCRIPTION: This JSON configuration illustrates defining a package rule in Renovate to apply a custom regex-based versioning scheme for dependencies matching the package name 'foo/bar'. The 'versioning' property uses a named-group regex to extract compatibility, major, minor, and optional patch versions from semantic-like tags. This approach requires understanding of regex pattern syntax and is useful for packages that do not follow conventional schemes.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/modules/versioning/index.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\\n  \\\"packageRules\\\": [\\n    {\\n      \\\"matchPackageNames\\\": [\\\"foo/bar\\\"],\\n      \\\"versioning\\\": \\\"regex:^(?<compatibility>.*)-v?(?<major>\\\\d+)\\\\.(?<minor>\\\\d+)\\\\.(?<patch>\\\\d+)?$\\\"\\n    }\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Renovate's Operational Workflow with Mermaid\nDESCRIPTION: This Mermaid flowchart diagram outlines the step-by-step process Renovate follows. It starts with initialization (merging configurations, platform setup, repository discovery), then iterates through each repository, extracting dependencies via managers, looking up updates using datasources and versioning rules, writing updates by creating branches and PRs, and finally performing cleanup tasks like checking for config migrations and cleaning stale branches. Requires a Mermaid renderer.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/key-concepts/how-renovate-works.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TB\n    subgraph INITIALIZATION\n        direction TB\n        MC[Merge configurations \\n most important to least: \\n cli > env > file > default]\n        MC --> IP[Initialize platform]\n        IP --> AD[Query the platform for repositories]\n        AD --> NFIL[Narrow the list with filters]\n    end\n\n    subgraph REPOSITORY\n       direction TB\n       FER{{For each repository}}\n\n      subgraph EXTRACTD[EXTRACT DEPENDENCIES]\n          direction TB\n          CLBRANCH[Extract base branches]\n          CLBRANCH --> VULN[Check for vulnerabilities]\n          VULN --> CC{{For each manager}}\n          CC -->|manager A| CD[\"...\"        ]\n          CC -->|manager B| CCF[\"match files\"]\n          CCF --> CFEF{{For each file}}\n          CFEF -->|file 1| CCD1[Extract dependency]\n          CFEF -->|file 2| CCD2[...]\n      end\n\n      subgraph LOOKUP[LOOK UP UPDATES]\n          direction TB\n          UC{{For each manager}}\n          UC -->|manager A| UD[\"...\"        ]\n          UC -->|manager B| UFEF{{For each file}}\n          UFEF -->|file 1| FED{{For each dependency}}\n          UFEF -->|file 2| FED2[...]\n          FED -->|dep 1| D1[...]\n          D1 -..-> CU\n          FED -->|dep 2| D2[use datasource to \\n fetch versions]\n          D2 --> J[use versioning to find \\n next valid update]\n          FED2 -...-> CU\n          UD -....-> CU\n          J --> CU[Look up updates]\n      end\n\n      subgraph WRITEU[WRITE UPDATES]\n        direction TB\n        FEU{{For each update}}\n        FEU --> AUCOND[Check if branch needed: \\n existing/rebase/concurrent amount]\n        AUCOND --> AU[Create branch\\nApply update\\nCreate PR]\n      end\n\n      subgraph FINALIZE[FINALIZE]\n      direction TB\n        CM[Check for config migration]\n        CM --> CSB[Clean stale branches]\n\n      end\n\n      FER --> IRPO[Initialize repository]\n\n      IRPO --> EXTRACTD\n      EXTRACTD --> LOOKUP\n\n      LOOKUP --> WRITEU\n\n      WRITEU --> FINALIZE\n\n    end\n\n    INITIALIZATION --> REPOSITORY\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Rancher Fleet File Matching in Renovate (JSON)\nDESCRIPTION: This JSON snippet sets the 'fileMatch' configuration in Renovate to recognize Rancher Fleet bundles and specific GitRepo YAML files. It instructs Renovate to look for files matching patterns such as 'fleet.yaml', 'fleet.yml', and 'myGitRepoManifests.yaml', enabling the tool to process and upgrade both bundle definitions and GitRepo manifests. Dependencies required include a working Renovate setup and understanding of its configuration options, with 'fileMatch' controlling which files Renovate will inspect and update.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/fleet/readme.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"fileMatch\": [\"'(^|/)fleet.ya?ml\", \"myGitRepoManifests\\\\.yaml\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Renovate Custom Manager for EKS Addons (JavaScript/JSON)\nDESCRIPTION: Example Renovate configuration (in JSON format, typically part of `renovate.json` or similar) setting up a custom manager. This manager uses a regex (`matchStrings`) to find `eksAddonsFilter` directives within Terraform files (`fileMatch`), extracting the minified JSON filter as `packageName` and the current version as `currentValue`. It maps these findings to the `aws-eks-addon` datasource.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/aws-eks-addon/readme.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\"aws-eks-addon\"]\n    }\n  ],\n  \"customManagers\": [\n    {\n      \"customType\": \"regex\",\n      \"fileMatch\": [\".*\\\\.tf\"],\n      \"matchStrings\": [\n        \".*# renovate: eksAddonsFilter=(?<packageName>.*?)\\n.*?[a-zA-Z0-9-_:]*[ ]*?[:|=][ ]*?[\"|']?(?<currentValue>[a-zA-Z0-9-_.]+)[\"|']?.*\"\n      ],\n      \"datasourceTemplate\": \"aws-eks-addon\",\n      \"versioningTemplate\": \"aws-eks-addon\" // Optional. Default value is 'aws-eks-addon'\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Dependencies Using Package Rules in Renovate (JSON)\nDESCRIPTION: Illustrates the equivalent `packageRules` configuration for achieving the same outcome as the `ignoreDeps` option. It defines a rule that matches specific package names (`eslint`, `eslint-config-base`) using `matchPackageNames` and sets `enabled` to `false` for them, effectively disabling Renovate for these dependencies.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_76\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\"eslint\", \"eslint-config-base\"],\n      \"enabled\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Docker Versioning with pep440 in Renovate (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to override the default Docker versioning in Renovate for the 'python' image by specifying the 'pep440' versioning scheme. It uses a 'packageRules' array entry to match the 'docker' datasource and the 'python' package name. No external dependencies are needed beyond Renovate itself, and this should be placed within your Renovate configuration file; it targets Python Docker images only.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/modules/versioning/index.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\\n  \\\"packageRules\\\": [\\n    {\\n      \\\"matchDatasources\\\": [\\\"docker\\\"],\\n      \\\"matchPackageNames\\\": [\\\"python\\\"],\\n      \\\"versioning\\\": \\\"pep440\\\"\\n    }\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Setting generic Renovate registry aliases (JSON)\nDESCRIPTION: Defines generic registry aliases using the `registryAliases` object in the Renovate configuration. This allows mapping registry hostnames (like `jfrogecosystem` or `jfrog.com`) to a specific mirror URL (`some.jfrog.mirror`), applied globally across supported managers like Docker, Helm, Terraform, etc.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_135\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"Setting generic aliases\"\n{\n  \"registryAliases\": {\n    \"jfrogecosystem\": \"some.jfrog.mirror\",\n    \"jfrog.com\": \"some.jfrog.mirror\"\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Example .npmrc Configuration for Private Registry (Config)\nDESCRIPTION: Provides an example `.npmrc` file content that corresponds to the `matchHost` configuration for a private GitLab NPM registry. It sets the registry URL that tools like npm or yarn will use, ensuring dependency resolution points to the correct private registry.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_69\n\nLANGUAGE: plaintext\nCODE:\n```\nregistry=https://gitlab.myorg.com/api/v4/packages/npm/\n```\n\n----------------------------------------\n\nTITLE: Customizing Commit Message Topic for GitHub Actions in Renovate (JSON)\nDESCRIPTION: This JSON snippet illustrates how to use `packageRules` to customize the commit message topic for specific package managers. In this example, for dependencies managed by `github-actions`, the `commitMessageTopic` is set to the dependency name (`{{depName}}`), which affects the generated commit message and PR title.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchManagers\": [\"github-actions\"],\n      \"commitMessageTopic\": \"{{depName}}\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Repology Datasource in Dockerfile with Renovate Comments\nDESCRIPTION: This Dockerfile example illustrates how to integrate Renovate with the Repology datasource for managing system package versions (gcc, musl-dev). It uses specific comment formats (`# renovate: datasource=repology ...`) to provide Renovate with the necessary information (datasource, dependency name with Repology repository identifier, and versioning strategy). Environment variables (`ENV ..._VERSION`) hold the current pinned versions, which Renovate will update when newer versions are found in the specified Repology repository (`alpine_3_12`). The `RUN` command then uses these variables to install the packages.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/repology/readme.md#_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM alpine:3.12.0@sha256:a15790640a6690aa1730c38cf0a440e2aa44aaca9b0e8931a9f2b0d7cc90fd65\n\n# renovate: datasource=repology depName=alpine_3_12/gcc versioning=loose\nENV GCC_VERSION=\"9.3.0-r2\"\n# renovate: datasource=repology depName=alpine_3_12/musl-dev versioning=loose\nENV MUSL_DEV_VERSION=\"1.1.24-r8\"\n\nRUN apk add --no-cache \\\n    gcc=\"${GCC_VERSION}\" \\\n    musl-dev=\"${MUSL_DEV_VERSION}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Version Bump Strategy in Renovate - JSON\nDESCRIPTION: This JSON snippet is intended for a Renovate configuration file and sets package rules for how Go versions are updated in `go.mod` files. By setting `matchDatasources` to `[\"golang-version\"]` and `rangeStrategy` to `\"bump\"`, Renovate will upgrade the `go` directive every time there is a new minor Go release. Dependencies: Requires Renovate to be running in your repository. Key parameters are `matchDatasources` (defines which package/data source rule applies to), and `rangeStrategy` (controls upgrade behavior). The input is a JSON configuration block; the output is the automated behavior of version bumping by Renovate for Go modules.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/versioning/go-mod-directive/readme.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"packageRules\\\": [\\n    {\\n      \\\"matchDatasources\\\": [\\\"golang-version\\\"],\\n      \\\"rangeStrategy\\\": \\\"bump\\\"\\n    }\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Renovate Recommended Preset Using JSON\nDESCRIPTION: This JSON snippet demonstrates a minimal Renovate configuration that extends the default recommended preset (`config:recommended`). Dependencies: This config requires a Renovate bot installation and access to Renovate's preset registry. The `extends` key is an array, and valid values must reference known or accessible presets. Input is a JSON object with the `extends` array; output is the application of `config:recommended` rules during Renovate runs. This example is suitable for onboarding and can be placed in `renovate.json`.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/config-presets.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": [\"config:recommended\"]\n}\n```\n\n----------------------------------------\n\nTITLE: CircleCI Workflow for Config Validation using Renovate Orb (YAML)\nDESCRIPTION: Enables linting and validation of the Renovate configuration file as a job in the CircleCI workflow using the same daniel-shuy/renovate orb. The workflow runs “renovate/validate-config” to check config syntax and validity. Inputs are config files; outputs are pass/fail status for further CI steps.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/examples/self-hosting.md#_snippet_8\n\nLANGUAGE: yml\nCODE:\n```\nversion: '2.1'\norbs:\n  renovate: daniel-shuy/renovate@2.2.0\nworkflows:\n  lint:\n    jobs:\n      - renovate/validate-config\n```\n\n----------------------------------------\n\nTITLE: Setting Basic Renovate Configuration Options via Environment Variables (Bash)\nDESCRIPTION: Demonstrates setting boolean (`RENOVATE_ONBOARDING`), string (`RENOVATE_BASE_DIR`), and numeric (`RENOVATE_PR_HOURLY_LIMIT`) configuration options using `RENOVATE_` prefixed environment variables. Note the requirement for quoting strings containing spaces.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/config-overview.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nRENOVATE_ONBOARDING=true\n```\n\nLANGUAGE: bash\nCODE:\n```\nRENOVATE_BASE_DIR=/tmp/something\n```\n\nLANGUAGE: bash\nCODE:\n```\nRENOVATE_BASE_DIR=\"/tmp/some thing\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nRENOVATE_PR_HOURLY_LIMIT=1\n```\n\n----------------------------------------\n\nTITLE: Extending HTTP-hosted Renovate Presets with Parameters\nDESCRIPTION: This JSON snippet demonstrates how to extend an HTTP-hosted Renovate preset while also passing parameters. Parameters are enclosed in parentheses and appended directly to the URL within the `extends` array.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/config-presets.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": [\n    \"http://my.server/users/me/repos/renovate-presets/raw/default.json?at=refs%2Fheads%2Fmain(param)\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Renovate Updates for Pinned NuGet Versions (JSON)\nDESCRIPTION: This JSON configuration defines a Renovate `packageRule` specifically for the `nuget` manager. It uses the `matchCurrentValue` regex `/^\\[[^,]+\\]$/` to identify dependencies pinned to an exact version (e.g., `[1.2.3]`) and sets `enabled: false` to prevent Renovate from proposing updates for these packages. This rule is intended to be placed within a Renovate configuration file (e.g., `renovate.json`).\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/nuget/readme.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"description\": \"Skip pinned versions\",\n      \"matchManagers\": [\"nuget\"],\n      \"matchCurrentValue\": \"/^\\\\[[^,]+\\\\]$/\",\n      \"enabled\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Java LTS Workaround Preset in Renovate Configuration (JSON)\nDESCRIPTION: Demonstrates how to modify the Renovate configuration (typically in `renovate.json`) to include updates for all major Java versions, not just Long-Term Support (LTS) releases. This is achieved by adding the `workarounds:javaLTSVersions` preset to the `ignorePresets` array, effectively disabling the default behavior included in `config:recommended`.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/java.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": [\"config:recommended\"],\n  \"ignorePresets\": [\"workarounds:javaLTSVersions\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Project Dependencies with Conan - INI\nDESCRIPTION: This snippet showcases the use of Conan, a C/C++ package manager, for declaring required libraries, build requirements, project options, and import rules within an INI-style configuration file (typically 'conanfile.txt'). The file specifies required libraries and their versions, build requirements (such as 7zip, curl, and others), and uses comments for documentation or disabling specific dependencies. It further configures generator tools and import directives for copying DLL and dylib files, supporting complex build environments. There are no direct runtime parameters; instead, configuration keys determine the behavior. No external code dependencies are needed beyond Conan itself. The output of this configuration is a well-defined build environment with all dependencies and tools specified and set up according to the rules and options provided.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/conan/__fixtures__/conanfile.txt#_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[requires]\npoco/1.9.4\nzlib/[~1.2.3, loose=False]\nfake/8.62.134@test/dev\ncairo/1.17.2#aff2d03608351db075ec1348a3afc9ff\ncairo/1.17.2@_/_#aff2d03608351db075ec1348a3afc9ff\nFake/8.62.134@\n\n[build_requires]\n7zip/[>1.1 <2.1, include_prerelease=True]\ncurl/[~1.2.3, loose=False, include_prerelease=True]@test/dev\nboost/[>1.1 <2.1]\ncatch2/[2.8]\nopenssl/[~=3.0]@test/prod\ncmake/[>1.1 || 0.8]\ncryptopp/[1.2.7 || >=1.2.9 <2.0.0]@test/local\n#commentedout/1.2\n# commentedout/3.4\nmeson/0.63.0@_/_#bc592346b33fd19c1fbffce25d1e4236\n\n[generators]\nxcode\ncmake\nqmake\n\n[options]\npoco:shared=True\nopenssl:shared=True\n\n# A comment\n\n[imports]\nbin, *.dll -> ./bin # Copies all dll files from packages bin folder to my local \"bin\" folder\nlib, *.dylib* -> ./bin # Copies all dylib files from packages lib folder to my local \"bin\" folder\n```\n\n----------------------------------------\n\nTITLE: Enabling the Dependency Dashboard - Renovate - JSON\nDESCRIPTION: Demonstrates how to manually enable the Dependency Dashboard in Renovate by adding the ':dependencyDashboard' preset to the 'extends' array within the configuration file. This snippet requires a valid Renovate configuration context and will enable the dashboard feature for the repository. The only required parameter is the 'extends' array, and the input is a JSON object. The output is an operational Renovate dashboard. No particular constraints, aside from being in the correct configuration context.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/key-concepts/dashboard.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": [\"config:recommended\", \":dependencyDashboard\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Commit Body in Renovate (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to configure the `commitBody` option in Renovate. Setting `commitBody` to `\"[skip ci]\"` instructs Renovate to append this string to the body of every commit it generates, which is often used to prevent CI systems from running on these commits.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"commitBody\": \"[skip ci]\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Renovate Regex Manager for AUR PKGBUILD Files in JSON\nDESCRIPTION: Defines a Renovate custom manager using the regex type to find PKGBUILD files. It uses a regular expression (`matchStrings`) to extract the `pkgver`, datasource, and dependency name from specially formatted comments, enabling automatic dependency updates for AUR packages. The `extractVersionTemplate` cleans potential 'v' prefixes from Git tags.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/user-stories/maintaining-aur-packages-with-renovate.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"customManagers\": [\n    {\n      \"customType\": \"regex\",\n      \"fileMatch\": [\"(^|/)PKGBUILD$\"],\n      \"matchStrings\": [\n        \"pkgver=(?<currentValue>.*) # renovate: datasource=(?<datasource>.*) depName=(?<depName>.*)\"\n      ],\n      \"extractVersionTemplate\": \"^v?(?<version>.*)$\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Combining bazel_dep with git_override in Bazel Module - Python\nDESCRIPTION: Shows how to specify both bazel_dep and git_override for a module in a MODULE.bazel file. When git_override is present, Renovate tracks commits on the referenced GitHub repo to evaluate updates, and ignores the associated version in bazel_dep. Key parameters include module_name, remote (must be a GitHub repository), and commit hash.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/bazel.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nbazel_dep(name = \"cgrindel_bazel_starlib\", version = \"0.15.0\")\n\ngit_override(\n    module_name = \"cgrindel_bazel_starlib\",\n    commit = \"fb47f0e9f7c376a7700fc9fe3319231ae57880df\",\n    remote = \"https://github.com/cgrindel/bazel-starlib.git\",\n)\n\nbazel_dep(name = \"rules_foo\")\ngit_override(\n    module_name = \"rules_foo\",\n    remote = \"https://github.com/foo/rules_foo.git\",\n    commit = \"8a1e9abe415eda7cd7f2a744fdac7499ce42cdca\",\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Regex Managers for GitLab-CI File Migration - Renovate - JSON\nDESCRIPTION: This JSON snippet configures Renovate's custom regex manager to detect and update dependency names and versions in GitLab-CI YAML files whose locations or names have changed. The configuration targets any \".yml\" or \".yaml\" file, defines multiple match strings to cover both old and new naming patterns, and prescribes how replacement should occur. Required dependency: Renovate must be installed in the repository, and matchStrings must correctly match the content. Input files are YAML CI configurations; output is automated version and path updates in those files.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/custom/regex/readme.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"customManagers\": [\n    {\n      \"customType\": \"regex\",\n      \"fileMatch\": [\".*y[a]?ml$\"],\n      \"matchStringsStrategy\": \"combination\",\n      \"matchStrings\": [\n        \"['\\\"]?(?<depName>/pipeline-fragments/fragment-version-check)['\\\"]?\\\\s*ref:\\\\s['\\\"]?(?<currentValue>[\\\\d-]*)['\\\"]?\",\n        \"['\\\"]?(?<depName>pipeline-solutions/gitlab/fragments/fragment-version-check)['\\\"]?\\\\s*ref:\\\\s['\\\"]?(?<currentValue>[\\\\d-]*)['\\\"]?\"\n      ],\n      \"depNameTemplate\": \"pipeline-solutions/gitlab/fragments/fragment-version-check\",\n      \"autoReplaceStringTemplate\": \"'{{{depName}}}'\\n    ref: {{{newValue}}}\",\n      \"datasourceTemplate\": \"gitlab-tags\",\n      \"versioningTemplate\": \"gitlab-tags\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Renovate Flux Manager for Specific Directory\nDESCRIPTION: This JSON configuration snippet demonstrates how to configure Renovate's `flux` manager to scan for Flux manifests only within a specific directory. It sets the `fileMatch` pattern to target `.yaml` files located anywhere inside a directory named `flux/`.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/flux/readme.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"flux\": {\n    \"fileMatch\": [\"flux/.+\\\\.yaml$\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Define Puppet Modules Without a Forge in Ruby Puppetfile\nDESCRIPTION: Shows how to define Puppet modules directly using the `mod` directive without specifying a global forge. Each module specifies its version. Renovate will use the default Puppet Forge (`https://forgeapi.puppetlabs.com`) to resolve these modules.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/puppet/readme.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nmod 'puppetlabs/apt', '8.3.0'\nmod 'puppetlabs/apache', '7.0.0'\n```\n\n----------------------------------------\n\nTITLE: single_version_override with custom registry in Bazel Module - Python\nDESCRIPTION: Uses single_version_override to specify a custom registry URL for a module, overriding default or .bazelrc-discovered registries for update checks. Inputs are module_name and registry. Renovate consults only the provided registry for this module during dependency updates.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/bazel.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nbazel_dep(name = \"rules_foo\", version = \"1.2.3\")\n\nsingle_version_override(\n  module_name = \"rules_foo\",\n  registry = \"https://example.com/custom_registry\",\n)\n```\n\n----------------------------------------\n\nTITLE: Constructing AWS EC2 Image Filters for Renovate Datasource in YAML/JSON\nDESCRIPTION: This snippet shows how to define filters for the AWS EC2 `describe-images` API call, used as the `packageName` for the Renovate datasource. It first presents a human-readable JSON array (within a YAML block scalar) filtering for official EKS images owned by AWS account '602401143452' in `eu-central-1` matching the name 'amazon-eks-node-1.21-*'. It then shows the required minified JSON string format needed for the datasource configuration.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/aws-machine-image/readme.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Getting the latest official EKS image from AWS (account '602401143452' for eu-central-1) for EKS 1.21 (name matches 'amazon-eks-node-1.21-*') would look as a describe images filter like:\n\n[\n  {\n    \"Name\": \"owner-id\",\n    \"Values\": [ \"602401143452\" ]\n  },\n  {\n    \"Name\": \"name\",\n    \"Values\": [ \"amazon-eks-node-1.21-*\" ]\n  }\n]\n\n# In order to use it with this datasource, you have to minify it:\n\n[{\"Name\":\"owner-id\",\"Values\":[\"602401143452\"]},{\"Name\":\"name\",\"Values\":[\"amazon-eks-node-1.21-*\"]}]\n```\n\n----------------------------------------\n\nTITLE: Defining Renovate GCR Host Rule with Bearer Token in JavaScript Config\nDESCRIPTION: Provides an example JavaScript structure for defining `hostRules` within Renovate's JavaScript configuration (e.g., `config.js`). It demonstrates setting up a rule for `eu.gcr.io` using a Bearer `token`. The placeholder token indicates where a dynamically fetched, short-lived Google Access Token should be inserted.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/docker.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nhostRules: [\n  {\n    matchHost: 'eu.gcr.io',\n    token: 'MyReallySecretTokenThatExpiresAfter60Minutes',\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Yarn 2+ npmRegistries - Registry Key with Protocol - YAML\nDESCRIPTION: Shows a .yarnrc.yml npmRegistries config where the registry key includes the protocol (e.g., https://). Used by Renovate when updating npmRegistries with credentials. Key parameter: registry URL as key, value is a decrypted token.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/getting-started/private-packages.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nnpmRegistries:\n  https://npm.pkg.github.com:\n    npmAuthToken: <Decrypted PAT Token>\n```\n\n----------------------------------------\n\nTITLE: Setting Renovate Platform via Command-Line Interface Argument (Bash)\nDESCRIPTION: Global configuration can be passed via CLI arguments. This example sets the platform to GitLab using the `--platform=gitlab` flag. CLI arguments take precedence over environment variables and file configurations.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/config-overview.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n--platform=gitlab\n```\n\n----------------------------------------\n\nTITLE: Defining a Renovate Custom Regex Manager for Python Version Updates (json)\nDESCRIPTION: Configures a Renovate custom manager to target Python version arguments in Dockerfiles using a regular expression. The JSON describes file matching logic, the regex pattern for Python versions, and string templates for updating versions by removing the dot between major and minor components. Dependencies include Renovate, a proper regex manager, and support for 'python-version' datasources; files matching '^Dockerfile$' will be processed. The configuration enables automated and consistent Python version updates, particularly handling compressed formats.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/python-version/readme.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"customManagers\\\": [\\n    {\\n      \\\"customType\\\": \\\"regex\\\",\\n      \\\"fileMatch\\\": [\\\"^Dockerfile$\\\"],\\n      \\\"matchStringsStrategy\\\": \\\"any\\\",\\n      \\\"matchStrings\\\": [\\n        \\\"ARG PYTHON_VERSION=\\\\\\\"?(?<currentValue>3(?<minor>\\\\\\\\d+))\\\\\\\"?\\\\\\\\s\\\"\\n      ],\\n      \\\"autoReplaceStringTemplate\\\": \\\"ARG PYTHON_VERSION={{{replace '\\\\\\\\.' '' newValue}}}\\\\n\\\",\\n      \\\"currentValueTemplate\\\": \\\"3.{{{minor}}}\\\",\\n      \\\"datasourceTemplate\\\": \\\"python-version\\\",\\n      \\\"versioningTemplate\\\": \\\"python\\\",\\n      \\\"depNameTemplate\\\": \\\"python\\\"\\n    }\\n  ]\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring a Git Submodule to Track a Specific Tag in .gitmodules\nDESCRIPTION: This INI snippet from a `.gitmodules` file shows how to configure a specific submodule ('renovate' located at 'deps/renovate') to track a specific Git tag (`v0.0.1`) instead of a branch by setting the `branch` property. Renovate can then update this submodule based on versioning rules, but this configuration may disrupt the standard `git submodule update --remote` workflow.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/git-submodules/readme.md#_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[submodule \"renovate\"]\n  path = deps/renovate\n  url = https://github.com/renovatebot/renovate.git\n  branch = v0.0.1\n```\n\n----------------------------------------\n\nTITLE: JSONata Query: Extract from TOML Array Table - Query\nDESCRIPTION: A JSONata query for TOML-derived JSON format to extract dependencies from 'packages' array. Directly maps 'package' to 'depName' and 'version' to 'currentValue' for Renovate. TOML files must be parsed to JSON for this to work.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/custom/jsonata/readme.md#_snippet_17\n\nLANGUAGE: text\nCODE:\n```\npackages.{ \"depName\": package, \"currentValue\": version }\n```\n\n----------------------------------------\n\nTITLE: Configuring dotnet-sdk Versioning and RollForward Policy in JSON\nDESCRIPTION: This JSON snippet demonstrates how to specify both the SDK version and the rollForward behavior for .NET projects. Setting 'rollForward' to 'major' instructs the environment to select the highest available version with the same major number, within the range >= {specified version} and < {next major}. The primary dependency is the .NET SDK; no external libraries are required at this configuration stage. Inputs include the version string and rollForward mode, and this is consumed by the .NET build/runtime tools.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/versioning/same-major/readme.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"sdk\\\": {\\n    \\\"version\\\": \\\"6.0.300\\\",\\n    \\\"rollForward\\\": \\\"major\\\"\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Allowed Commands with Regex in Renovate Config\nDESCRIPTION: This JSON snippet provides an example of the `allowedCommands` configuration option, used within the main Renovate bot configuration (e.g., `config.js` or a JSON config file). It uses an array of regular expressions to define which commands are allowed to be executed via `postUpgradeTasks`. In this specific case, it permits the exact command `tslint --fix` and any `tslint` command with a single lowercase letter flag (e.g., `tslint --c`). If this list is empty, no commands from `postUpgradeTasks` will run. Remember to match the template string if using command templating.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/self-hosted-configuration.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"allowedCommands\": [\"^tslint --fix$\", \"^tslint --[a-z]+$\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Example YAML File Matching Renovate Custom Manager for AWS AMIs\nDESCRIPTION: This YAML code demonstrates example file content that the previously defined Renovate custom regex manager would target for AMI updates. It includes required comments containing the minified JSON `amiFilter` and `currentImageName`, followed by key-value pairs where the value is an AMI ID (`ami-...`). An example also shows embedding AWS profile and region within the filter definition.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/aws-machine-image/readme.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# With AMI name mentioned in the comments\n# amiFilter=[{\"Name\":\"owner-id\",\"Values\":[\"602401143452\"]},{\"Name\":\"name\",\"Values\":[\"amazon-eks-node-1.21-*\"]}]\n# currentImageName=unknown\nmy_ami1: ami-02ce3d9008cab69cb\n# Only AMI, no name mentioned\n# amiFilter=[{\"Name\":\"owner-id\",\"Values\":[\"602401143452\"]},{\"Name\":\"name\",\"Values\":[\"amazon-eks-node-1.20-*\"]}]\n# currentImageName=unknown\nmy_ami2: ami-0083e9407e275acf2\n\n# Using custom aws profile and region\n# amiFilter=[{\"Name\":\"owner-id\",\"Values\":[\"602401143452\"]},{\"Name\":\"name\",\"Values\":[\"amazon-eks-node-1.20-*\"]},{\"profile\":\"test\",\"region\":\"eu-central-1\"}]\n# currentImageName=unknown\nami = \"ami-0083e9407e275acf2\"\n```\n\n----------------------------------------\n\nTITLE: Example HCL (Terraform) File Matching Renovate Custom Manager for AWS AMIs\nDESCRIPTION: This HCL snippet, typically used for Terraform infrastructure-as-code, illustrates how an `aws_instance` resource definition containing an AMI ID can be matched by the Renovate custom regex manager. The required `amiFilter` and `currentImageName` information must be provided in comments immediately preceding the `ami` attribute assignment for the manager's regex to capture it.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/aws-machine-image/readme.md#_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"web\" {\n\n    # Only AMI, no name mentioned\n    # amiFilter=[{\"Name\":\"owner-id\",\"Values\":[\"602401143452\"]},{\"Name\":\"name\",\"Values\":[\"amazon-eks-node-1.20-*\"]}]\n    # currentImageName=unknown\n    ami = \"ami-0083e9407e275acf2\"\n\n    count = 2\n    source_dest_check = false\n\n    connection {\n        user = \"root\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Maven Extension with Custom Variable Name in Bazel\nDESCRIPTION: This snippet shows initializing the Maven extension from `rules_jvm_external` and assigning it to a variable `maven_1`. Renovate supports variable names starting with `maven` (like `maven_1`) for identifying Maven extensions.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/bazel-module/readme.md#_snippet_1\n\nLANGUAGE: bazel\nCODE:\n```\nmaven_1 = use_extension(\"@rules_jvm_external//:extensions.bzl\", \"maven\")\n```\n\n----------------------------------------\n\nTITLE: Debian Artifactory Registry URL Format Example (Text Example)\nDESCRIPTION: This example provides valid URL formats for Debian repositories hosted on Artifactory, showing acceptable structures with placeholders and a specific sample. It serves as a guide for formatting ‘registryUrl’ parameters in Renovate configurations to access custom or enterprise Debian repositories. Inputs are Artifactory server host/port and repository slug, with suite/components/binaryArch supplied as query parameters; expected usage is in Renovate configuration fields.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/deb/readme.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nhttps://<host>:<port>/artifactory/<repository-slug>?suite=<suite>&components=<components>&binaryArch=<binaryArch>\nhttps://artifactory.example.com:443/artifactory/debian?suite=bookworm&components=main,contrib,non-free&binaryArch=amd64\n```\n\n----------------------------------------\n\nTITLE: Equivalent Logic without 'lookupArray' Helper (Handlebars)\nDESCRIPTION: Provides the equivalent standard Handlebars code using nested `#each` and `#with` block helpers to achieve the same result as the `lookupArray` helper example. This illustrates the standard Handlebars way of accessing nested properties in arrays.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/templates.md#_snippet_9\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#each upgrades}}{{#with prBodyDefinitions}} {{{Issue}}}{{/with}}{{/each}}\n```\n\n----------------------------------------\n\nTITLE: Parsing Dependencies from .renovaterc (JSON) with Custom JSONata Manager - JSON\nDESCRIPTION: This JSON snippet shows a Renovate custom manager configured to parse dependencies from a .renovaterc file using the JSONata engine and specifying 'fileFormat' as 'json'. The matchString locates package entries and extracts their names and versions. Dependencies: Requires Renovate with JSONata, and a correct .renovaterc format. Inputs: .renovaterc file; Outputs: structured information about dependencies extracted for update processing.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"customManagers\\\": [\\n    {\\n      \\\"customType\\\": \\\"jsonata\\\",\\n      \\\"fileFormat\\\": \\\"json\\\",\\n      \\\"fileMatch\\\": [\\\".renovaterc\\\"],\\n      \\\"matchStrings\\\": [\\n        \\\"packages.{ 'depName': package, 'currentValue': version }\\\"\\n      ]\\n    }\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Objects from Key-Value Pairs with 'toObject' (Handlebars)\nDESCRIPTION: Demonstrates the `toObject` helper, which takes pairs of arguments (key, value, key, value, ...) and constructs a JavaScript object from them. The example creates an object `{ \"key1\": \"value1\", \"key2\": \"value2\" }` and then converts it to a JSON string.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/templates.md#_snippet_17\n\nLANGUAGE: handlebars\nCODE:\n```\n{{{ toJSON (toObject 'key1' 'value1' 'key2' 'value2') }}}\n```\n\n----------------------------------------\n\nTITLE: Example Dockerfile Debian Codename Upgrade by Renovate (Diff)\nDESCRIPTION: Demonstrates Renovate suggesting an upgrade for a Debian base image in a Dockerfile. It shows the transition from one stable release codename (`bullseye`) to the subsequent stable release (`bookworm`), highlighting Renovate's awareness of Debian release names.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/docker.md#_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n- FROM debian:bullseye\n+ FROM debian:bookworm\n```\n\n----------------------------------------\n\nTITLE: Overriding Dockerfile fileMatch Patterns - Renovate Bot - JSON\nDESCRIPTION: This configuration example demonstrates extending the default Renovate fileMatch patterns for the dockerfile manager to additionally recognize files like 'ACTUALLY_A_DOCKERFILE.template'. The 'fileMatch' array contains custom regular expressions and must be set inside the appropriate manager object. Mergeable defaults allow users to only specify what is missing without duplicating existing patterns. Input is a JSON configuration block; output is a modified Renovate file-matching behavior.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_48\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dockerfile\": {\n    \"fileMatch\": [\"^ACTUALLY_A_DOCKERFILE\\\\.template$\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom PR Body Warning Note in Renovate - JSON\nDESCRIPTION: This JSON configuration snippet demonstrates how to add a custom warning note to PR bodies, conditionally displayed for major version updates. The example leverages Handlebars-style templating with the 'isMajor' condition, signaling major updates with an attention emoji. Requires Renovate to be configured for the repository and supports all default Renovate templating capabilities. Takes an array of templated strings under 'prBodyNotes'; inputs are processed per PR and output as Markdown in the PR body. Limited to usage inside applicable Renovate configuration files such as renovate.json.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_134\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"prBodyNotes\": [\"{{#if isMajor}}:warning: MAJOR MAJOR MAJOR :warning:{{/if}}\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Regex Versioning for Bitnami Docker Images (JSON)\nDESCRIPTION: This JSON configuration sets up a Renovate `packageRule` for Bitnami Docker images, matching names like `bitnami/**` and `docker.io/bitnami/**`. It utilizes a regex versioning scheme designed to parse Bitnami's specific version format, capturing `major`, `minor`, `patch`, `compatibility`, `build`, and `revision` components.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/versioning/regex/readme.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\"docker\"],\n      \"matchPackageNames\": [\"bitnami/**\", \"docker.io/bitnami/**\"],\n      \"versioning\": \"regex:^(?<major>\\\\d+)\\\\.(?<minor>\\\\d+)\\\\.(?<patch>\\\\d+)(?:-(?<compatibility>.+)(?<build>\\\\d+)-r(?<revision>\\\\d+))?$\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Average Repositories per Run (PromQL)\nDESCRIPTION: Provides a PromQL query to calculate the average number of repositories processed per Renovate run. It divides the total count of 'repository' spans by the total count of 'run' spans for the 'renovate' service, using the metrics generated by the spanmetrics connector.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/examples/opentelemetry.md#_snippet_6\n\nLANGUAGE: promql\nCODE:\n```\ntraces_span_metrics_calls_total{span_name=\"repository\",service_name=\"renovate\"} / traces_span_metrics_calls_total{span_name=\"run\",service_name=\"renovate\"}\n```\n\n----------------------------------------\n\nTITLE: Overriding Renovate Global Configuration File Path via Environment Variable (Bash)\nDESCRIPTION: The default global configuration file (`config.js`) location can be overridden by setting the `RENOVATE_CONFIG_FILE` environment variable to a specific file path. Renovate will error if this specified file is not found.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/config-overview.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nRENOVATE_CONFIG_FILE=/tmp/my-renovate-config.js\n```\n\n----------------------------------------\n\nTITLE: Configuring Renovate Regex Manager for Metadata Comments in Dockerfile (JSON)\nDESCRIPTION: Defines a Renovate `customManager` using `regex` in JSON format designed to parse the enhanced Dockerfile (previous example). It uses a single complex `matchStrings` pattern with named capture groups to extract dependency metadata (`datasource`, `depName`, `packageName`, `versioning`) from `# renovate:` comments and the version (`currentValue`) from the subsequent `ENV` or `ARG` line.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/custom/regex/readme.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"customManagers\": [\n    {\n      \"customType\": \"regex\",\n      \"description\": \"Update _VERSION variables in Dockerfiles\",\n      \"fileMatch\": [\"(^|/|\\\\.)Dockerfile$\", \"(^|/)Dockerfile\\\\.[^/]*$\"],\n      \"matchStrings\": [\n        \"# renovate: datasource=(?<datasource>[a-z-]+?)(?: depName=(?<depName>.+?))? packageName=(?<packageName>.+?)(?: versioning=(?<versioning>[a-z-]+?))?\\\\s(?:ENV|ARG) .+?_VERSION=(?<currentValue>.+?)\\\\s\"\n      ]\n    }\n  ]\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Minimal Expected JSON Output for Renovate Custom Datasource (JSON)\nDESCRIPTION: Illustrates the simplest valid JSON structure that a Renovate custom datasource transformation must produce after processing the fetched data. It requires a `releases` array where each object contains at least a `version` field.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/custom/readme.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"releases\": [\n    {\n      \"version\": \"v1.1.0\"\n    },\n    {\n      \"version\": \"v1.2.0\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Gradle Signature Verification in XML\nDESCRIPTION: This XML tag, located in `gradle/verification-metadata.xml`, indicates that Gradle should verify the digital signatures of dependencies. When this tag is present and set to `true`, Renovate will run the `gradle --write-verification-metadata` command to update the verification file.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/gradle/readme.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<verify-signatures>true</verify-signatures>\n```\n\n----------------------------------------\n\nTITLE: Filtering Autodiscovered Repos with Minimatch in Renovate Config\nDESCRIPTION: This JSON snippet shows how to use the `autodiscoverFilter` option in the main Renovate configuration with a minimatch glob pattern. This filter restricts the repositories Renovate processes when `autodiscover` is enabled. The example `[\"my-org/*\"]` configures Renovate to only operate on repositories directly within the `my-org` organization/namespace. The matching is case-insensitive. Multiple patterns can be provided in the array, and repositories matching any pattern are included.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/self-hosted-configuration.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"autodiscoverFilter\": [\"my-org/*\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Argo CD File Match for a Single File (Renovate JSON)\nDESCRIPTION: This JSON configuration snippet illustrates how to configure Renovate's `argocd` manager to target a single, specific Argo CD YAML file (e.g., `config/applications.yaml`) using the `fileMatch` pattern `^config/applications\\\\.yaml$`. This is suitable for repositories with only one main Argo CD application file.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/argocd/readme.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"One Argo CD file in a directory\"\n{\n  \"argocd\": {\n    \"fileMatch\": [\"^config/applications\\\\.yaml$\"]\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Combining Options in Conan Version Ranges\nDESCRIPTION: Multiple options like `loose` and `include_prerelease` can be combined within the same Conan version range specification.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/versioning/conan/readme.md#_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n`[~1.2.3, loose=False, include_prerelease=True]`\n```\n\n----------------------------------------\n\nTITLE: Using Replacement Name Template for Docker Registry Replacement - JSON\nDESCRIPTION: Demonstrates employing 'replacementNameTemplate' in 'packageRules' to transform Docker image package names via Handlebars templates for registry migration. Dependencies: Renovate config supporting 'replacementNameTemplate', typically with 'matchDatasources' and 'matchPackageNames'. Limitations: Only supported by some managers. Input is a JSON config fragment, output is remapped package names (e.g., 'docker.io/' replaced with 'ghcr.io/').\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_124\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"packageRules\\\": [\\n    {\\n      \\\"matchDatasources\\\": [\\\"docker\\\"],\\n      \\\"matchPackageNames\\\": [\\\"docker.io/**\\\"],\\n      \\\"replacementNameTemplate\\\": \\\"{{{replace 'docker\\\\.io/' 'ghcr.io/' packageName}}}\\\"\\n    }\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Renovate's Yarn Proxy Configuration via Environment Variable\nDESCRIPTION: Set the `RENOVATE_X_YARN_PROXY` environment variable to `true` to enable Renovate to automatically configure Yarn's proxy settings based on `HTTP_PROXY` and `HTTPS_PROXY` variables. When set, Renovate checks for these variables and, if found while using Yarn 2+, modifies the `~/.yarnrc.yml` file accordingly. Note that `NO_PROXY` conversion is not supported.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/npm/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nRENOVATE_X_YARN_PROXY=true\n```\n\n----------------------------------------\n\nTITLE: Overriding Image Repository and Tags in Kustomization Images Section - YAML\nDESCRIPTION: These YAML examples show how to use 'newName' to change the image repository, optionally combined with tag and digest. Various permutations allow for explicit repository override, with or without version or digest, using the fields 'name', 'newName', 'newTag', and 'digest'. Renovate tracks both the original image name and its override, ensuring correct upgrade or pinning. Inputs are existing image names; outputs are replaced with specified names, tags, and digests. All permutations shown are supported. No additional dependencies are required.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/kustomize/readme.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- name: image/name\\n  newName: custom-image/name:v0.0.1\\n- name: image/name\\n  newName: custom-image/name:v0.0.1@sha256:3eeba3e2caa30d2aba0fd78a34c1bbeebaa1b96c7aa3c95ec9bac44163c5ca4f\\n- name: image/name\\n  newName: custom-image/name@sha256:3eeba3e2caa30d2aba0fd78a34c1bbeebaa1b96c7aa3c95ec9bac44163c5ca4f\\n- name: image/name\\n  newName: custom-image/name\\n  newTag: v0.0.1@sha256:3eeba3e2caa30d2aba0fd78a34c1bbeebaa1b96c7aa3c95ec9bac44163c5ca4f\\n- name: image/name\\n  newName: custom-image/name\\n  digest: sha256:3eeba3e2caa30d2aba0fd78a34c1bbeebaa1b96c7aa3c95ec9bac44163c5ca4f\n```\n\n----------------------------------------\n\nTITLE: Running Renovate CLI with Environment Variables for Bitbucket Server\nDESCRIPTION: This sequence of shell commands first exports necessary Renovate configuration parameters (platform, endpoint, credentials, git filesystem, log level) as environment variables. Then, it runs Renovate using `npx` with only the `--autodiscover=true` flag, relying on the previously set environment variables for configuration.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/platform/bitbucket-server/readme.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport RENOVATE_PLATFORM=bitbucket-server\nexport RENOVATE_ENDPOINT=http://localhost:7990\nexport RENOVATE_GIT_FS=http\nexport RENOVATE_USERNAME=renovate-bot\nexport RENOVATE_PASSWORD=abc123456789!\nexport LOG_LEVEL=debug\nnpx renovate --autodiscover=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Renovate Automatic Rebase Behavior (Default - JSON)\nDESCRIPTION: Sets the Renovate `rebaseWhen` configuration option to `auto`, which is the default behavior. With this setting, Renovate automatically rebases branches when necessary, such as to resolve merge conflicts, or if repository settings require branches to be up-to-date before merging (e.g., GitHub's branch protection rules), or when `automerge` is enabled. This snippet represents a common setting in Renovate's JSON configuration.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/updating-rebasing.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"rebaseWhen\": \"auto\"\n```\n\n----------------------------------------\n\nTITLE: Assigning a GitHub Milestone to Renovate PRs via JSON Config\nDESCRIPTION: This JSON configuration example demonstrates how to use the `milestone` option to assign a specific GitHub milestone (identified by its number, here `12`) to Pull Requests created by Renovate. The milestone is only added when the PR is initially created.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_83\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"milestone\": 12\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Lines for Dependency Extraction in Renovate Using Combination Strategy (JSON)\nDESCRIPTION: This config snippet demonstrates two customManagers, each extracting a single dependency from an Ansible YAML file using the 'combination' matchStringsStrategy. Each manager pairs a depName and version pattern, combining values across lines to identify one dependency per match. Designed for files where related metadata is split across lines. Requires Renovate and applies to files matching '^main.yml$'.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_32\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"customManagers\": [\n    {\n      \"customType\": \"regex\",\n      \"fileMatch\": [\"^main.yml$\"],\n      \"matchStringsStrategy\": \"combination\",\n      \"matchStrings\": [\n        \"prometheus_image:\\\\s*\\\"(?<depName>.*)\\\"\\\\s*//\",\n        \"prometheus_version:\\\\s*\\\"(?<currentValue>.*)\\\"\\\\s*//\"\n      ],\n      \"datasourceTemplate\": \"docker\"\n    },\n    {\n      \"fileMatch\": [\"^main.yml$\"],\n      \"matchStringsStrategy\": \"combination\",\n      \"matchStrings\": [\n        \"thanos_image:\\\\s*\\\"(?<depName>.*)\\\"\\\\s*//\",\n        \"thanos_version:\\\\s*\\\"(?<currentValue>.*)\\\"\\\\s*//\"\n      ],\n      \"datasourceTemplate\": \"docker\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring `cdnurl` Manager File Matching in Renovate (JSON)\nDESCRIPTION: This JSON snippet shows an example configuration within a Renovate setup (e.g., `renovate.json`). It configures the `cdnurl` manager to operate on files ending with `.html` or `.htm` by setting the `fileMatch` array with the regular expression `\"\\\\.html?$\"`. This enables the manager to find and potentially update CDN URLs within the specified files. Note the warning in the surrounding text: this manager does not read or update Subresource Integrity (SRI) hashes.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/cdnurl/readme.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cdnurl\": {\n    \"fileMatch\": [\"\\\\.html?$\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Requests to a Specific Host via Host Rules in Renovate JSON\nDESCRIPTION: Shows how to explicitly disable Renovate's interactions with `registry.npmjs.org` by setting the `enabled` property to `false` within a matching `hostRules` entry. This can be used to prevent Renovate from contacting specific registries or hosts.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_55\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hostRules\": [\n    {\n      \"matchHost\": \"registry.npmjs.org\",\n      \"enabled\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example Composer Tilde Range (Minor Version)\nDESCRIPTION: A Composer tilde range specifying major and minor versions. This range is equivalent to npm's caret range '^4.1', allowing updates within the minor version.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/versioning/composer/readme.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n`~4.1`\n```\n\n----------------------------------------\n\nTITLE: Configuring Renovate Google Artifact Registry Authentication with Encrypted Base64 Service Account (JSON)\nDESCRIPTION: Configures Renovate `hostRules` in JSON for authenticating with Google Artifact Registry using a base64 encoded service account key, where the key itself is encrypted using Renovate's encryption mechanism. The `username` is `_json_key_base64` and the encrypted key is placed under `encrypted.password`. This is suitable for repository-level Renovate configurations.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/docker.md#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hostRules\": [\n    {\n      \"matchHost\": \"europe-docker.pkg.dev\",\n      \"username\": \"_json_key_base64\",\n      \"encrypted\": {\n        \"password\": \"<encrypted base64 service account>\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Requests to a Specific Host and Port via Host Rules in Renovate JSON\nDESCRIPTION: Illustrates how to disable requests to a specific host and port (`https://domain.com:9118`) by including the protocol and port in the `matchHost` string and setting `enabled` to `false`. Using `matchHost` without a protocol applies the rule less specifically.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_57\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hostRules\": [\n    {\n      \"matchHost\": \"https://domain.com:9118\",\n      \"enabled\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring goGetDirs for Go Modules Updates - Renovate Bot - JSON\nDESCRIPTION: This snippet demonstrates overriding the default directory patterns used by Renovate when performing Go module updates. The 'goGetDirs' array replaces the default './...' with explicit directories, allowing control over which subfolders are processed. Dependencies include a Renovate-compatible config; input is a JSON block specifying directory globs. Output is controlled Go get execution during Renovate runs.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_51\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"goGetDirs\": [\"./some-project/\", \"./tools/...\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Allowing Custom Environment Variables in Renovate config.js\nDESCRIPTION: This JavaScript snippet shows an example `config.js` configuration for the `allowedEnv` option. This setting allows Renovate bot administrators to specify which custom environment variables, defined in repository `renovate.json` files (like in the previous JSON example), are permitted. It accepts an array of exact names, glob patterns (like `SOME_ENV_*`), or regex patterns to match allowed environment variable names. In this example, variables exactly named `EXTRA_ENV_NAME` or starting with `SOME_ENV_` are allowed.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/self-hosted-configuration.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  allowedEnv: ['SOME_ENV_*', 'EXTRA_ENV_NAME'],\n};\n```\n\n----------------------------------------\n\nTITLE: Overriding Commit Type to 'chore' - Renovate JSON\nDESCRIPTION: Forces Renovate to always use the 'chore' type for semantic commit messages and PR titles by specifying ':semanticCommitTypeAll(chore)' in the 'extends' array. No dependencies beyond standard Renovate configuration are required. This config results in commit messages like 'chore(deps): ...'.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/semantic-commits.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": [\":semanticCommitTypeAll(chore)\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Global Secrets in Renovate config.js (JavaScript)\nDESCRIPTION: Example of defining a global secret (`GOOGLE_TOKEN`) within the `secrets` object in the main `config.js` file (`module.exports`). These secrets become available for templating within repository configurations across all repositories managed by this Renovate instance. Secret names must adhere to specific character constraints (start with a letter, contain letters, digits, or underscores).\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/self-hosted-configuration.md#_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nmodule.exports = {\n  secrets: {\n    GOOGLE_TOKEN: 'abc123',\n  },\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Regex Versioning for Guava Maven Package (JSON)\nDESCRIPTION: This JSON configuration defines a Renovate `packageRule` specifically for the `com.google.guava:guava` Maven package. It applies a custom regex versioning scheme to correctly parse versions that might misuse suffixes as compatibility indicators. The regex captures `major`, `minor`, `patch`, and `compatibility` components.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/versioning/regex/readme.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\"com.google.guava:guava\"],\n      \"versioning\": \"regex:^(?<major>\\\\d+)(\\\\.(?<minor>\\\\d+))?(\\\\.(?<patch>\\\\d+))?(-(?<compatibility>.*))?$\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Avoiding Ambiguous Kustomize Image Values - YAML\nDESCRIPTION: These YAML snippets outline problematic and correct usages of image values in kustomization.yaml. When both 'newTag' and 'digest' are set for the same image, Kustomize ignores 'newTag', leading to ambiguity. Renovate will skip these to avoid confusion. The first sample is a bad pattern (ambiguous), and the next shows a good pattern (tag with digest in newTag). Correct syntax ensures both versioning and hash are tracked. Expected input: image fields in images section. Output: ambiguous patterns skipped.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/kustomize/readme.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# bad: skipped because newTag: is ignored when digest: is set\\n- name: image/name\\n  newTag: v0.0.1\\n  digest: sha256:3eeba3e2caa30d2aba0fd78a34c1bbeebaa1b96c7aa3c95ec9bac44163c5ca4f\\n# good:\\n- name: image/name\\n  newTag: v0.0.1@sha256:3eeba3e2caa30d2aba0fd78a34c1bbeebaa1b96c7aa3c95ec9bac44163c5ca4f\n```\n\n----------------------------------------\n\nTITLE: Configuring Stop Updating PRs Label in Renovate (JSON)\nDESCRIPTION: Demonstrates how to change the default label used by Renovate to stop updating pull requests. By setting the 'stopUpdatingLabel' key in your configuration file, you can specify a custom label such as 'take-a-break-renovate'. Requires Renovate to be running on a supported platform and the configured label must be applied to relevant PRs. The input is a JSON object and the output is effective label-based PR update suppression.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_143\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"stopUpdatingLabel\\\": \\\"take-a-break-renovate\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Renovate Custom Manager for AWS RDS in YAML Files (JSON)\nDESCRIPTION: Provides a Renovate configuration snippet using a custom manager to detect AWS RDS engine versions within YAML files. It employs a regular expression (`matchStrings`) to find lines specifying an RDS filter (captured as `lookupName`) and the current engine version (captured as `currentValue`), linking them to the `aws-rds` datasource for updates. The `fileMatch` targets all files ending in `.yaml`.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/aws-rds/readme.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"customManagers\": [\n    {\n      \"customType\": \"regex\",\n      \"fileMatch\": [\"\\\\.yaml$\"],\n      \"matchStrings\": [\n        \".*rdsFilter=(?<lookupName>.+?)[ ]*\\n[ ]*(?<depName>[a-zA-Z0-9-_:]*)[ ]*?:[ ]*?[\"|']?(?<currentValue>[.\\\\d]+)[\"|']?.*\"\n      ],\n      \"datasourceTemplate\": \"aws-rds\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SSH Client for GitLab Connection (plaintext)\nDESCRIPTION: Specifies the SSH client configuration needed to connect to gitlab.com using a specific identity file (`~/.ssh/id_rsa`) and user (`git`). It disables strict host key checking, which might be necessary in some environments but carries security implications. This configuration is intended to be stored in a file (e.g., `config`) and included in a Kubernetes secret.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/examples/self-hosting.md#_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\nhost gitlab.com\n  HostName gitlab.com\n  StrictHostKeyChecking no\n  IdentityFile ~/.ssh/id_rsa\n  User git\n```\n\n----------------------------------------\n\nTITLE: Configuring Merge Confidence Tokens in Renovate - JSON\nDESCRIPTION: Shows how to configure authentication tokens for Renovate's 'merge-confidence' hostType using the 'hostRules' field. Dependencies: Uses the 'hostRules' array within Renovate configuration. Key parameters include 'hostType' and 'token'. Input is a JSON config fragment; output is enabling merge confidence checks via the provided token.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_120\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"hostRules\\\": [\\n    {\\n      \\\"hostType\\\": \\\"merge-confidence\\\",\\n      \\\"token\\\": \\\"********\\\"\\n    }\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Setting NuGet v3 Protocol Version in NuGet.config\nDESCRIPTION: This XML snippet demonstrates how to configure a specific NuGet package source in a `NuGet.config` file, explicitly setting the protocol version to 3 using the `protocolVersion` attribute. This is necessary if a v3 feed URL does not end with `index.json`.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/nuget.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<packageSources>\n   <clear />\n   <add key=\"myV3feed\" value=\"http://myV3feed\" protocolVersion=\"3\" />\n</packageSources>\n```\n\n----------------------------------------\n\nTITLE: JSONata Query: Extract from Multi-Document YAML - Query\nDESCRIPTION: This JSONata query extracts all dependencies from each document's 'packages' node in a multi-document YAML structure. Output is an array of dependency objects suitable for Renovate processing.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/custom/jsonata/readme.md#_snippet_15\n\nLANGUAGE: text\nCODE:\n```\npackages.{ \"depName\": package, \"currentValue\": version }\n```\n\n----------------------------------------\n\nTITLE: Generating PGP Key Pair using GPG (Shell)\nDESCRIPTION: Demonstrates the interactive command-line process for generating a new PGP key pair using `gpg --full-generate-key`. This output shows selecting RSA keys, setting key size (4096 bits), expiration (none), user ID, and the final key generation summary. This is used within the Renovate configuration context for setting up encrypted configuration values via the `privateKey` option.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/self-hosted-configuration.md#_snippet_28\n\nLANGUAGE: shell\nCODE:\n```\n❯ gpg --full-generate-key\ngpg (GnuPG) 2.2.24; Copyright (C) 2020 Free Software Foundation, Inc.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\nPlease select what kind of key you want:\n   (1) RSA and RSA (default)\n   (2) DSA and Elgamal\n   (3) DSA (sign only)\n   (4) RSA (sign only)\n  (14) Existing key from card\nYour selection? 1\nRSA keys may be between 1024 and 4096 bits long.\nWhat keysize do you want? (3072) 4096\nRequested keysize is 4096 bits\nPlease specify how long the key should be valid.\n         0 = key does not expire\n      <n>  = key expires in n days\n      <n>w = key expires in n weeks\n      <n>m = key expires in n months\n      <n>y = key expires in n years\nKey is valid for? (0) \nKey does not expire at all\nIs this correct? (y/N) y\n\nGnuPG needs to construct a user ID to identify your key.\n\nReal name: Renovate Bot\nEmail address: renovate@whitesourcesoftware.com\nComment: \nYou selected this USER-ID:\n    \"Renovate Bot <renovate@whitesourcesoftware.com>\"\n\nChange (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? O\n\ngpg: key 0649CC3899F22A66 marked as ultimately trusted\ngpg: revocation certificate stored as '/Users/rhys/.gnupg/openpgp-revocs.d/794B820F34B34A8DF32AADB20649CC3899F22A66.rev'\npublic and secret key created and signed.\n\npub   rsa4096 2021-09-10 [SC]\n      794B820F34B34A8DF32AADB20649CEXAMPLEONLY\nuid                      Renovate Bot <renovate@whitesourcesoftware.com>\nsub   rsa4096 2021-09-10 [E]\n```\n\n----------------------------------------\n\nTITLE: Ignoring Specific Versions using Negated Regex with allowedVersions in JSON\nDESCRIPTION: Illustrates how to use negated regular expression syntax (`!/ /`) within the `allowedVersions` property of a `packageRules` entry. This example ignores any versions of the 'chalk' package that end with 'java' (`!/java$/`).\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_93\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\"chalk\"],\n      \"allowedVersions\": \"!/java$/\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Renovate Updates for Specific Packages (JSON)\nDESCRIPTION: This configuration uses a package rule within `renovate.json` to disable Renovate updates for any package whose name starts with 'eslint'. It achieves this by matching package names using a glob pattern (`eslint**`) and setting `enabled` to `false` within the rule.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_38\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\"eslint**\"],\n      \"enabled\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Argo CD File Match for All YAML Files (Renovate JSON)\nDESCRIPTION: This JSON configuration snippet demonstrates how to configure Renovate's `argocd` manager to treat almost all `.yaml` files in the repository as Argo CD files by setting the `fileMatch` pattern to `\\\\.yaml$`. This approach is suitable when the majority of YAML files are related to Argo CD.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/argocd/readme.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"If most .yaml files in your repository are for Argo CD\"\n{\n  \"argocd\": {\n    \"fileMatch\": [\"\\\\.yaml$\"]\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Helm Registry Aliases in Renovate Using JSON\nDESCRIPTION: This snippet shows how to define default registry aliases for Helm charts in a Renovate configuration using JSON. It maps the alias 'stable' to the official Helm charts registry URL. Users can extend this object with their own aliases as needed. No additional dependencies are required, but alias values must be well-formed URIs. The object should typically be placed within a Renovate configuration file and is read by the helmfile manager.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/helmfile/readme.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"registryAliases\\\": {\\n    \\\"stable\\\": \\\"https://charts.helm.sh/stable\\\"\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Matching Renovate Updates by New Value (Glob) in JSON\nDESCRIPTION: This JSON configuration uses `matchNewValue` with a glob pattern within `packageRules`. It targets packages named like 'io.github.resilience4j**' where the *new* version being proposed matches '1.*'. For matching updates, automerge is enabled.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_112\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchPackageNames\": [\"io.github.resilience4j**\"],\n      \"matchNewValue\": \"1.*\",\n      \"automerge\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Regex Versioning for Tautulli Docker Image (JSON)\nDESCRIPTION: This JSON snippet defines a Renovate `packageRule` for the `ghcr.io/linuxserver/tautulli` Docker image. It uses a custom regex versioning scheme to handle version tags that include string prefixes ('v', 'ls') before the numeric parts. The regex captures `major`, `minor`, `patch`, and `build` components.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/versioning/regex/readme.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\"docker\"],\n      \"matchPackageNames\": [\"ghcr.io/linuxserver/tautulli\"],\n      \"versioning\": \"regex:^v(?<major>\\\\d+)\\\\.(?<minor>\\\\d+)\\\\.(?<patch>\\\\d+)-ls(?<build>.+)$\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Regex Versioning for OpenSSH Server Docker Image (JSON)\nDESCRIPTION: This JSON configuration establishes a Renovate `packageRule` for the `ghcr.io/linuxserver/openssh-server` Docker image. It applies a specific regex versioning scheme to parse version tags containing various string prefixes ('p', 'r', 'ls') mixed with numeric components. The regex captures `major`, `minor`, `patch`, `build`, and `revision` parts.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/versioning/regex/readme.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\"docker\"],\n      \"matchPackageNames\": [\"ghcr.io/linuxserver/openssh-server\"],\n      \"versioning\": \"regex:^(?<major>\\\\d+)\\\\.(?<minor>\\\\d+)_p(?<patch>\\\\d+)-r(?<build>\\\\d)-ls(?<revision>.+)$\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Module Paths with moduleNameMapper in Jest Config\nDESCRIPTION: Introduces the `moduleNameMapper` configuration option in Jest 0.6.0. This allows mapping module paths to different files, often used for stubbing modules during testing.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/workers/repository/update/pr/changelog/__fixtures__/jest.md#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\nmoduleNameMapper\n```\n\n----------------------------------------\n\nTITLE: Configuring Renovate Branch Name via Environment Variable (Shell)\nDESCRIPTION: This shell command demonstrates setting a Renovate configuration option (specifically `branchName`) using an environment variable (`RENOVATE_BRANCH_NAME`) when invoking the Renovate CLI. In this example, the branch name template is set to `foo` for the execution of the `renovate` command. This approach is recommended for configuring string templates via the command line to avoid cluttering CLI help, as an alternative to using a configuration file.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/development/design-decisions.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nRENOVATE_BRANCH_NAME=foo renovate\n```\n\n----------------------------------------\n\nTITLE: Configuring File Matching for Batect Integration in Renovate - JSON\nDESCRIPTION: This JSON snippet demonstrates how to extend Renovate's Batect manager to recognize custom configuration files by specifying a \"batect\" object with a fileMatch array. Each element in the fileMatch array is a regular expression string that tells Renovate which files to consider as Batect configurations. To use this, add it to the root of your renovate.json file. The key parameters are the regular expressions in fileMatch, which should match the target file names or paths. Expected input is valid JSON; the output is enhanced automated detection of Batect files by Renovate.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/batect/readme.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"batect\": {\n    \"fileMatch\": [\n      \"(^|/)batect(-bundle)?\\\\.yml$\",\n      \"(^|/)my-other-batect-file\\\\.yml$\",\n      \"^a-directory/[^/]*\\\\.yml$\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching and Validating JSON via Http with zod - TypeScript\nDESCRIPTION: This example demonstrates schema validation of HTTP response data fetched using the Http class's getJson method in TypeScript. A zod schema defines the expected structure of the users object, which is then provided as the last argument to getJson for automatic validation. Dependencies include zod, Http, and a helper LooseArray. The input is a URL; the method returns an object with a validated users array in the body property. Invalid data will cause an exception due to underlying parseAsync errors.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/development/zod.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst Users = z.object({\n  users: z.object({\n    id: z.number(),\n    firstName: z.string(),\n    lastName: z.string(),\n  }),\n});\n\nconst { body: users } = await http.getJson(\n  'https://dummyjson.com/users',\n  LooseArray(User),\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum Retry-After Wait Time in Renovate (JSON)\nDESCRIPTION: Specifies the maximum duration (in seconds) Renovate will wait before retrying a request when a host (`api.github.com`) returns a `Retry-After` header due to rate limiting. This `maxRetryAfter` setting within `hostRules` overrides the default maximum wait time of 60 seconds.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_71\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hostRules\": [\n    {\n      \"matchHost\": \"api.github.com\",\n      \"maxRetryAfter\": 25\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Full Renovate Configuration via JSON String in Environment Variable (Shell)\nDESCRIPTION: Shows how to provide the entire Renovate configuration as a JSON string assigned to the `RENOVATE_CONFIG` environment variable. This allows setting multiple options compactly. Note that the JSON string must be properly escaped for the shell environment. Individual environment variables (like `RENOVATE_TOKEN`) will override values within this JSON string if both are set.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/getting-started/running.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nRENOVATE_CONFIG='{\"token\":\"abc123\",\"gitAuthor\":\"a@b.com\"}'\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables via Renovate Configuration (JSON)\nDESCRIPTION: Shows an example JSON configuration block for the `processEnv` option in Renovate. This allows setting environment variables directly within the configuration file, useful for passing sensitive information like AWS access keys and region settings without relying on system environment variables. All values must be provided as strings.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/self-hosted-configuration.md#_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"processEnv\": {\n    \"AWS_ACCESS_KEY_ID\": \"AKIAIOSFODNN7EXAMPLE\",\n    \"AWS_SECRET_ACCESS_KEY\": \"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\",\n    \"AWS_DEFAULT_REGION\": \"us-west-2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables in Renovate Templates (Handlebars)\nDESCRIPTION: Shows how to access environment variables within Renovate templates using the `env` object (e.g., `{{env.HOME}}`). Access is restricted by default for security but can be configured via `customEnvVariables` or `exposeAllEnv` in self-hosted Renovate setups.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/templates.md#_snippet_18\n\nLANGUAGE: handlebars\nCODE:\n```\nHOME is {{env.HOME}}\n```\n\n----------------------------------------\n\nTITLE: Example Output of --write-discovered-repos Flag (JSON)\nDESCRIPTION: Demonstrates the JSON output format generated when running Renovate with the `--write-discovered-repos=/path/to/file.json` command-line argument. The output is a simple JSON array of strings, where each string represents the full name (e.g., 'organization/repository') of a repository discovered by Renovate. This feature allows external systems to consume the list of repositories for purposes like distributed processing or scaling.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/self-hosted-configuration.md#_snippet_36\n\nLANGUAGE: json\nCODE:\n```\n```json\n[\"myOrg/myRepo\", \"myOrg/anotherRepo\"]\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Image Tags in Kustomization Images Section - YAML\nDESCRIPTION: These YAML snippets illustrate how to specify an image and its new tag in the images section of kustomization.yaml. Both orders (name before newTag and newTag before name) are supported and equivalent. The key parameters are 'name' for the image and 'newTag' for the new tag to apply. Renovate can parse either style for image upgrades. No external dependencies are required, but field order does not affect functionality.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/kustomize/readme.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- name: image/name\\n  newTag: v0.0.1\\n# or\\n- newTag: v0.0.1\\n  name: image/name\n```\n\n----------------------------------------\n\nTITLE: Structuring AWS RDS Filters for Datasource in YAML\nDESCRIPTION: Demonstrates the structure of an AWS RDS filter used as input for the `aws-rds` datasource, formatted in YAML for readability. This example filter targets MySQL engine versions within the 5.7 major version. This structure is based on the AWS SDK `DescribeDBEngineVersions` filter format but needs to be minified into JSON before being used as the `packageName` in the Renovate configuration.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/aws-rds/readme.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Getting the latest supported MySQL 5.7 version from RDS as a filter would look like:\n\n[\n  {\n    \"Name\": \"engine\",\n    \"Values\": [ \"mysql\" ]\n  },\n  {\n    \"Name\": \"engine-version\",\n    \"Values\": [ \"5.7\" ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Environment Variables in renovate.json\nDESCRIPTION: This JSON snippet demonstrates how to set custom environment variables within a specific repository's `renovate.json` configuration using the `env` key. These variables can potentially be used by scripts executed during Renovate runs (e.g., in `postUpgradeTasks`). For these variables to be accepted and used by Renovate, the bot administrator must explicitly allow them using the `allowedEnv` option in the main bot configuration (`config.js`).\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/self-hosted-configuration.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"env\": {\n    \"SOME_ENV_VARIABLE\": \"some_value\",\n    \"EXTRA_ENV_NAME\": \"value\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Major Updates in Renovate for Travis - JSON\nDESCRIPTION: Provides a JSON configuration for Renovate that enables major updates for Travis dependencies. To activate this, place the shown configuration in the Renovate config file. The key 'travis.major.enabled' set to true allows Renovate to propose PRs for major version updates, which may require manual intervention if using a version matrix. No runtime dependencies, but requires Renovate to process this configuration.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/travis/readme.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"travis\": {\n    \"major\": {\n      \"enabled\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Presets in Renovate Configuration Using JavaScript\nDESCRIPTION: This configuration demonstrates how to automate migration of repository presets when updating or renaming Renovate presets. By setting the 'migratePresets' key in the config export, you can map old preset names (e.g., '@company') to new ones (e.g., 'local>org/renovate-config'). This is useful for large repositories needing mass updates and does not require manual edits to repository configs. The map keys are old preset names and values are replacement names; an empty string disables a preset. The code should be part of a Renovate configuration JavaScript file.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/self-hosted-configuration.md#_snippet_27\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodules.exports = {\n  migratePresets: {\n    '@company': 'local>org/renovate-config',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Pinning setuptools Package Version and Hashes in requirements.txt\nDESCRIPTION: Specifies the exact version 59.2.0 for the 'setuptools' Python package, a foundational library for building and distributing Python packages. It includes two SHA256 hashes for integrity verification. The preceding comment indicates that 'pip-compile' considers 'setuptools' potentially unsafe to pin directly in requirements files, often because it's a build dependency, but it's included here as generated.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/pip-compile/__fixtures__/requirementsWithHashes.txt#_snippet_1\n\nLANGUAGE: requirements\nCODE:\n```\n# The following packages are considered to be unsafe in a requirements file:\nsetuptools==59.2.0 \\\n    --hash=sha256:157d21de9d055ab9e8ea3186d91e7f4f865e11f42deafa952d90842671fc2576 \\\n    --hash=sha256:4adde3d1e1c89bde1c643c64d89cdd94cbfd8c75252ee459d4500bccb9c7d05d\n```\n\n----------------------------------------\n\nTITLE: Filtering Autodiscovered Repos by Topic in Renovate Config\nDESCRIPTION: This JSON snippet shows how to configure the `autodiscoverTopics` option in the main Renovate configuration. On platforms supporting repository topics/tags (like GitHub, GitLab), this allows Renovate to autodiscover only repositories tagged with *all* the specified topics. The example `[\"managed-by-renovate\"]` restricts autodiscovery to repositories tagged with `managed-by-renovate`. This provides an efficient, platform-side filtering mechanism.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/self-hosted-configuration.md#_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"autodiscoverTopics\": [\"managed-by-renovate\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Debian Registry URL with Package Rules in Renovate (JSON)\nDESCRIPTION: This JSON snippet configures a Renovate package rule to override the Debian registry URL for specific packages (e.g., gcc-11) when using the 'deb' datasource. Dependencies include the presence of a Renovate ‘renovate.json’ file and a need to fine-tune which Debian repo a given package resolves from. Inputs are the datasource and package name to match; outputs consist of rule-based updates for only those specified package(s), using the given registry URL.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/deb/readme.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\"deb\"],\n      \"matchPackageNames\": [\"gcc-11\"],\n      \"registryUrls\": [\n        \"https://deb.debian.org/debian?suite=stable&components=main,contrib,non-free&binaryArch=amd64\"\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Git References in vendir.yml (YAML)\nDESCRIPTION: This YAML snippet illustrates how to define Git repository sources in vendir.yml for tracking explicit refs with Renovate. It supports HTTP or SSH git URLs, referencing branches, tags, or commits, and may limit fetch depth for efficiency. Required parameters are 'url' and 'ref', with optional 'depth' to control the number of commit histories retrieved. vendir must be installed and can target public or private repos depending on credentials.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/vendir/readme.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: vendir.k14s.io/v1alpha1\\nkind: Config\\n\\n# one or more directories to manage with vendir\\ndirectories:\\n  - path: config/_ytt_lib\\n    contents:\\n      path: github.com/cloudfoundry/cf-k8s-networking\\n      git:\\n        # HTTP or SSH URLs are supported (required)\\n        url: https://github.com/cloudfoundry/cf-k8s-networking\\n        # branch, tag, commit; origin is the name of the remote (required)\\n        # optional if refSelection is specified (available in v0.11.0+)\\n        ref: origin/master\\n        # depth of commits to fetch; 0 (default) means everything (optional; v0.29.0+)\\n        depth: 1\\n        ...\n```\n\n----------------------------------------\n\nTITLE: Remapping Log Levels in Renovate using JSON Configuration\nDESCRIPTION: This JSON configuration example illustrates how to use the `logLevelRemap` option to change the log level for messages matching specific patterns. It shows remapping messages starting with `pip-compile:`, containing `Package lookup error`, or starting with `Please upgrade the version of Node.js` to different log levels (`info` or `warn`). This allows customizing log verbosity for particular Renovate operations or warnings.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_82\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"logLevelRemap\": [\n    {\n      \"matchMessage\": \"/^pip-compile:/\",\n      \"newLogLevel\": \"info\"\n    },\n    {\n      \"matchMessage\": \"Package lookup error\",\n      \"newLogLevel\": \"warn\"\n    },\n    {\n      \"matchMessage\": \"/^Please upgrade the version of Node.js/\",\n      \"newLogLevel\": \"info\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Merge Confidence Badges in Renovate Configuration (JSON)\nDESCRIPTION: This JSON snippet shows how to enable all Merge Confidence badges (Age, Adoption, Passing, Confidence) in a self-hosted Renovate instance by adding the `mergeConfidence:all-badges` preset to the `extends` array in the Renovate configuration file. This merges the preset's configuration, activating the badges on generated pull requests. The `mergeConfidence:age-confidence-badges` preset can be used alternatively to show only Age and Confidence badges.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/merge-confidence.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": [\"mergeConfidence:all-badges\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Crossplane `fileMatch` for Specific Directory (JSON)\nDESCRIPTION: This JSON configuration snippet shows how to configure Renovate's `crossplane` manager to specifically target `.yaml` files located within any subdirectory under the `packages/` directory. The `fileMatch` pattern `\"packages/.+\\\\.yaml$\"` ensures only YAML files within this specific directory structure are considered for Crossplane dependency updates.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/crossplane/readme.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"crossplane\": {\n    \"fileMatch\": [\"packages/.+\\\\.yaml$\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependencies with requirements.txt - Python\nDESCRIPTION: Defines all necessary libraries for the Python Django project, using the standard requirements.txt format. The snippet lists packages such as Django, distribute, dj-database-url, psycopg2, and wsgiref with specific versions, ensuring that deployments or development environments install the exact required libraries. The inputs are package names with version constraints and are utilized by tools like pip; the output is a fully provisioned Python environment ready for application execution.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/pip_requirements/__fixtures__/requirements2.txt#_snippet_0\n\nLANGUAGE: requirements.txt\nCODE:\n```\nDjango==1\\ndistribute==0.6.27\\ndj-database-url==0.2\\npsycopg2==2.4.5\\nwsgiref==0.1.2\n```\n\n----------------------------------------\n\nTITLE: Configuring Git line endings on Windows using Bash\nDESCRIPTION: Sets the global Git configuration `core.autocrlf` to `input` using a Bash command. This setting is recommended when self-hosting Renovate on Windows to ensure consistent line endings (LF) and prevent potential issues caused by CRLF (`\\r\\n`) line endings confusing the bot. Requires Git to be installed.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/getting-started/installing-onboarding.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global core.autocrlf input\n```\n\n----------------------------------------\n\nTITLE: Example Metric for HTTP Call Count (YAML)\nDESCRIPTION: Shows an example of the `traces_span_metrics_calls_total` metric specifically for HTTP client calls made by Renovate. This metric counts the number of successful GET requests made to `prometheus-community.github.io:443`.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/examples/opentelemetry.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ntraces_span_metrics_calls_total{http_host=\"prometheus-community.github.io:443\", http_method=\"GET\", http_status_code=\"200\", job=\"renovatebot.com/renovate\", service_name=\"renovate\", span_kind=\"SPAN_KIND_CLIENT\", span_name=\"GET\", status_code=\"STATUS_CODE_UNSET\"} 5\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Nexus Datasource for Renovate - JSON\nDESCRIPTION: This JSON block configures a custom datasource in Renovate named 'nexus_generic', specifying how to construct the registry URL for version tracking and how to transform the retrieved data. The 'defaultRegistryUrlTemplate' defines where to fetch the versiontracker.json file, and the 'transformTemplates' defines how to map fetched items into the desired format. Dependencies include a running Nexus server (or compatible secure HTTP server) hosting versiontracker.json files per package, with proper permissions for Renovate to access them.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/custom/readme.md#_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"customDatasources\": {\n    \"nexus_generic\": {\n      \"defaultRegistryUrlTemplate\": \"https://nexus.example.com/repository/versiontrackers/{{packageName}}/versiontracker.json\",\n      \"transformTemplates\": [\n        \"{ \\\"releases\\\": $map($, function($v) { { \\\"version\\\": $v.version, \\\"sourceUrl\\\": $v.filelink } }) }\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Configuration: Additional Dependencies without Language (YAML)\nDESCRIPTION: Illustrates an incorrect pre-commit hook configuration for use with Renovate: 'additional_dependencies' are specified without declaring 'language: python'. Renovate requires the explicit 'language' field to process additional dependencies for Python hooks; omitting it will prevent the dependency from being recognized or updated. This example highlights a key constraint when specifying dependencies for hooks in YAML configurations.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/pre-commit/readme.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- repo: https://github.com/psf/black\n  rev: 19.3b0\n  hooks:\n    - id: black\n      additional_dependencies:\n        - 'request==1.1.1'\n```\n\n----------------------------------------\n\nTITLE: Configuring SBT Package Registry URLs in Renovate - JSON\nDESCRIPTION: Demonstrates how to set the 'registryUrls' option in Renovate's configuration to customize the Maven repositories used for SBT package updates. This JSON object includes 'matchDatasources' to target 'sbt-package' and a 'registryUrls' array listing multiple repository endpoints. Inputs are JSON configuration attributes, and the output is Renovate using the specified repositories for package checks. Dependencies include Renovate and valid repository URLs.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/sbt-package/readme.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"matchDatasources\\\": [\\\"sbt-package\\\"],\\n  \\\"registryUrls\\\": [\\n    \\\"https://repo.maven.apache.org/maven2\\\",\\n    \\\"https://oss.sonatype.org/content/repositories/snapshots\\\"\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Pinning Python Dependencies using pip-compile - Plaintext\nDESCRIPTION: This snippet shows a requirements file generated by pip-compile, listing Python packages and their exact versions along with comments indicating how each dependency was included. There are no special dependencies or code execution needed—this file is intended to be read by pip for creating consistent project environments. All lines starting with a '#' are comments describing the file provenance and dependency origins; each pinned package includes an inline annotation of which dependency required it. The expected input to generate this file is a requirements.in file, and the output is a fully resolved requirements.txt for installation.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/pip-compile/__fixtures__/requirementsCustomCommand.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n#\n# This file is autogenerated by pip-compile with Python 3.11\n# by the following command:\n#\n#    ./pip-compile-wrapper requirements.in\n#\ncertifi==2023.11.17\n    # via requests\ncharset-normalizer==3.3.2\n    # via requests\nidna==3.6\n    # via requests\nmarkupsafe==2.1.4\n    # via jinja2\nrequests==2.31.0\n    # via -r requirements.in\nurllib3==2.1.0\n    # via requests\n```\n\n----------------------------------------\n\nTITLE: Using Configuration-Scoped Registry Entries in Bazel - Markdown/Config\nDESCRIPTION: Shows how to define registry entries in a .bazelrc file with and without configuration scopes (e.g., build:ci). Renovate will only use non-scope entries for dependency discovery, so configuration-specific registries are ignored.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/bazel.md#_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nbuild:ci --registry=https://internal.server/custom_registry\nbuild --registry=https://raw.githubusercontent.com/bazelbuild/bazel-central-registry/main\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic GitHub Packages Host Rules (Shell)\nDESCRIPTION: Enables automatic configuration of `hostRules` for GitHub Packages registries (`ghcr.io`, `maven.pkg.github.com`, etc.) by setting the `RENOVATE_X_GITHUB_HOST_RULES` environment variable. This allows Renovate to use the platform token for authentication against these registries when running on `github.com`. Note: This feature is experimental and may have issues with app tokens.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/platform/github/readme.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nexport RENOVATE_X_GITHUB_HOST_RULES=true\n```\n\n----------------------------------------\n\nTITLE: Differentiating Replacement Name Template for Official and Non-Official Docker Images - JSON\nDESCRIPTION: Presents two 'packageRules' using 'replacementNameTemplate' to assign registry prefixes to Docker images based on Regex-matched naming patterns. Dependencies: Uses 'matchDatasources', 'matchPackageNames', and 'replacementNameTemplate'. Input is a JSON config fragment with two package rules; effect is conditional registry prefixing for different classes of images.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_125\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"packageRules\\\": [\\n    {\\n      \\\"description\\\": \\\"official images\\\",\\n      \\\"matchDatasources\\\": [\\\"docker\\\"],\\n      \\\"matchPackageNames\\\": [\\\"/^[a-z-]+$/\\\"],\\n      \\\"replacementNameTemplate\\\": \\\"some.registry.org/library/{{{packageName}}}\\\"\\n    },\\n    {\\n      \\\"description\\\": \\\"non-official images\\\",\\n      \\\"matchDatasources\\\": [\\\"docker\\\"],\\n      \\\"matchPackageNames\\\": [\\\"/^[a-z-]+/[a-z-]+$/\\\"],\\n      \\\"replacementNameTemplate\\\": \\\"some.registry.org/{{{packageName}}}\\\"\\n    }\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Source Directory for a Package from Bitnami Charts Repo - JSON\nDESCRIPTION: Example showing how to set the 'sourceDirectory' for a given package ('dummy') from a bitnami charts repository in Renovate configuration, including the sourceUrl. Dependencies: Uses both 'sourceUrl' and 'sourceDirectory' in a 'packageRules' entry. Input is a JSON fragment; effect is to specify lookup path for package data.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_128\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"packageRules\\\": [\\n    {\\n      \\\"matchPackageNames\\\": [\\\"dummy\\\"],\\n      \\\"sourceUrl\\\": \\\"https://github.com/bitnami/charts\\\",\\n      \\\"sourceDirectory\\\": \\\"bitnami/kube-prometheus\\\"\\n    }\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping Renovate Updates by Merge Confidence in JSON\nDESCRIPTION: This JSON configuration uses `matchConfidence` within `packageRules` to group dependency updates that have 'high' or 'very high' merge confidence. A group named 'high merge confidence' will be created for these updates. This feature requires a Mend API key and is currently in private beta.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_99\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchConfidence\": [\"high\", \"very high\"],\n      \"groupName\": \"high merge confidence\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Yarn and pnpm for Renovate (Shell)\nDESCRIPTION: Shows the installation of yarn and pnpm package managers, which are needed if lockfile updates for projects using these tools are required. This is necessary because Renovate doesn’t embed these package managers by default, so the user must ensure correct versions are available globally.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/examples/self-hosting.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -g yarn pnpm\n```\n\n----------------------------------------\n\nTITLE: Setting Branch Concurrent Limit in Renovate JSON\nDESCRIPTION: This JSON snippet sets the maximum number of concurrent branches Renovate will manage for a repository using the `branchConcurrentLimit` option in `renovate.json`. In this example, the limit is set to 3. Lowering this limit can improve Renovate's processing speed, especially if rebasing many branches becomes time-consuming. This limit is enforced per repository.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"branchConcurrentLimit\": 3\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling an Experimental Manager in JSON\nDESCRIPTION: This JSON snippet illustrates how to enable an experimental Renovate manager, named 'some-new-manager' in this example. By setting the 'enabled' property to true within the manager's configuration block, the manager, which is disabled by default, will be activated.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/modules/manager/index.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"some-new-manager\": {\n    \"enabled\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom HTML Datasource for Nginx Directory Listing - JSON\nDESCRIPTION: This JSON snippet shows how to create a custom datasource in Renovate for a web directory (e.g., nginx downloads) that presents versions as HTML. The 'defaultRegistryUrlTemplate' targets the download directory, 'format' is set to 'html', and 'packageRules' defines a regex to extract the version from each file link. It enables Renovate to scrape and parse web directory listings where versions are embedded in filenames.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/custom/readme.md#_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"customDatasources\": {\n    \"nginx\": {\n      \"defaultRegistryUrlTemplate\": \"https://nginx.org/download\",\n      \"format\": \"html\"\n    }\n  },\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\"custom.nginx\"],\n      \"extractVersion\": \"^nginx-(?<version>.+)\\\\.tar\\\\.gz$\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Azure Pipelines Manager in Renovate Configuration (JSON)\nDESCRIPTION: This JSON configuration snippet enables the `azure-pipelines` manager within Renovate. This manager is disabled by default because Renovate cannot guarantee that task versions it proposes are available in the specific Azure DevOps environment.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/azure-pipelines/readme.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"azure-pipelines\": {\n    \"enabled\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Abort on Error for Docker Datasources in Renovate JSON\nDESCRIPTION: Configures Renovate to abort the run if any significant HTTP errors occur specifically when interacting with hosts identified as `docker` datasources, using the `hostType` property for targeting. This applies the abort behavior only to Docker-related network issues.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_60\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hostRules\": [\n    {\n      \"hostType\": \"docker\",\n      \"abortOnError\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Remapping Log Levels for Specific Messages in Renovate (JSON)\nDESCRIPTION: Demonstrates how to change the severity level (e.g., from error to warn) for log messages matching a specific regular expression (`/Error executing maven wrapper update command/`) using the `logLevelRemap` configuration array. This helps in managing log verbosity or adjusting the perceived severity of certain known issues.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_72\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"logLevelRemap\": [\n    {\n      \"matchMessage\": \"/Error executing maven wrapper update command/\",\n      \"newLogLevel\": \"warn\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Dependencies as Value Nodes Under an Array - JSON\nDESCRIPTION: Example JSON where each dependency is an object in the 'packages' array with 'package' and 'version' keys. Facilitates direct extraction for Renovate using JSONata. No code execution dependencies.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/custom/jsonata/readme.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": [\n    {\n      \"version\": \"1.2.3\",\n      \"package\": \"foo\"\n    },\n    {\n      \"version\": \"4.5.6\",\n      \"package\": \"bar\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Host Requests Using a Preset in Renovate JSON\nDESCRIPTION: Demonstrates using the `:disableHost()` preset within the `extends` array as an alternative way to prevent Renovate from contacting `registry.npmjs.org`. Presets offer a concise way to apply common configurations.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_56\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": [\":disableHost(registry.npmjs.org)\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Allowing Specific Custom Headers in Renovate config.js\nDESCRIPTION: This JavaScript snippet provides an example `config.js` configuration for the `allowedHeaders` option. This setting allows bot administrators to define which custom HTTP headers, potentially set via `hostRules` (like in the previous JSON example), are permitted in Renovate's requests. This example allows only the header named `custom-header`. Importantly, setting `allowedHeaders` overrides the default allowance for headers starting with `X-`, so if those are still needed, they must be explicitly included in this list (e.g., `['custom-header', 'X-*']`). It accepts an array of exact names, globs, or regex patterns.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/self-hosted-configuration.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  allowedHeaders: ['custom-header'],\n};\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom Base Directory for Renovate Data in Config\nDESCRIPTION: This JSON snippet illustrates how to configure the `baseDir` option in the main Renovate configuration. This option allows overriding the default temporary directory (e.g., `/tmp/renovate`) where Renovate clones repositories and stores temporary data during its execution. The example sets the base directory to `/my-own-different-temporary-folder`. This is useful in environments with specific storage requirements or permissions.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/self-hosted-configuration.md#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"baseDir\": \"/my-own-different-temporary-folder\"\n}\n```\n\n----------------------------------------\n\nTITLE: Passing AWS CodeCommit IAM User Credentials via CLI Arguments\nDESCRIPTION: Shows the Renovate CLI parameters for providing AWS IAM user credentials for CodeCommit authentication. It requires `--username` (Access Key ID), `--password` (Secret Access Key), and `--endpoint` (CodeCommit URL). The `--token` parameter is optional for session tokens. This method passes credentials directly on the command line.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/platform/codecommit/readme.md#_snippet_3\n\nLANGUAGE: cli\nCODE:\n```\n```\n--username: AWS IAM access key id\n--password: AWS Secret access key\n--endpoint: the URL endpoint for example https://git-codecommit.us-east-1.amazonaws.com/\n--token: AWS session token, if you have one\n```\n```\n\n----------------------------------------\n\nTITLE: Disabling Semantic Commit Messages - Renovate JSON\nDESCRIPTION: Disables semantic commit messages in Renovate by using the ':semanticCommitsDisabled' preset in the 'extends' array. Place this JSON snippet in your Renovate configuration file to revert to non-semantic commit messages. The input is a JSON object with a single configuration property, and no external dependencies are needed.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/semantic-commits.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": [\":semanticCommitsDisabled\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Example Renovate Log Output with Trace Info (Plaintext)\nDESCRIPTION: Shows sample log output from Renovate when OpenTelemetry tracing is enabled. It demonstrates the inclusion of `trace_id` and `span_id` fields in the structured log entry for a completed repository processing task, allowing correlation with traces in Jaeger.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/examples/opentelemetry.md#_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n INFO: Repository finished (repository=org/example)\n       \"durationMs\": 5574,\n       \"trace_id\": \"f9a4c33852333fc2a0fbdc163100c987\",\n       \"span_id\": \"4ac1323eeaee\n```\n\n----------------------------------------\n\nTITLE: Specifying Package Index URL and Dependencies - requirements.txt - Python\nDESCRIPTION: This requirements.txt snippet configures pip to use a specific private PyPI index using the --index-url directive and declares several Python dependencies, some with strict versioning (e.g., some-package==0.3.1) and others without. Inline comments are used for additional documentation, which are ignored by pip during installation. The file expects pip or any compatible Python package installer, and is typically used for environment setup or automation. Input is the file itself, and output is the installation of specified packages from the configured index—limitations include the need for network access to the specified PyPI and potential authentication requirements.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/pip_requirements/__fixtures__/requirements1.txt#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n--index-url http://example.com/private-pypi/\n# simple comment\nsome-package==0.3.1\nsome-other-package==1.0.0\nsphinx\nnot_semver==1.9\n```\n\n----------------------------------------\n\nTITLE: Adjusting Request Timeout for Hosts in Renovate (JSON)\nDESCRIPTION: Sets a custom timeout value (in milliseconds) for network requests made by Renovate, applied via `hostRules`. This example uses `\"timeout\": 10000` to reduce the timeout to 10 seconds for all matched hosts, overriding the default of 60 seconds (60000ms).\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_74\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hostRules\": [\n    {\n      \"timeout\": 10000\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example Composer Patch Version\nDESCRIPTION: Illustrates a Composer version number featuring a patch identifier ('-p1'). Composer considers versions with such suffixes as stable, which differs from npm's typical interpretation where suffixes often denote pre-releases. Renovate includes specific logic to handle the sorting and stability checks for these Composer patch versions correctly.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/versioning/composer/readme.md#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n`1.2.3-p1`\n```\n\n----------------------------------------\n\nTITLE: Visualizing Rubygems.org Version Sync State Machine (Mermaid)\nDESCRIPTION: A Mermaid state diagram illustrating the process Renovate uses to synchronize package versions from rubygems.org via the `/versions` endpoint. It shows the transitions between empty cache, full sync, delta sync, and synced states, including error handling based on HTTP response codes (200, 206, 404, 416) and data consistency checks. This process represents the first-level in-memory cache strategy used to mitigate rate limiting when querying the main rubygems.org registry.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/rubygems/readme.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nstateDiagram-v2\n  [*] --> Empty\n\n  state \"Empty\" as Empty\n  Empty --> FullSync: getPkgReleases()\n\n  state \"Synced\" as Synced\n  Synced --> DeltaSync\n\n  state \"Unsupported\" as Unsupported\n  Unsupported --> [*]\n\n  state \"Full sync\" as FullSync : GET /versions (~20Mb)\n  state full_sync_result <<choice>>\n  FullSync --> full_sync_result: Response\n  full_sync_result --> Synced: (1) Status 200\n  full_sync_result --> Unsupported: (2) Status 404\n  full_sync_result --> Empty: (3) Status other than 200 or 404\\n Clear cache and throw ExternalHostError\n\n  state \"Delta sync\" as DeltaSync: GET /versions with \"Range\" header\n  state delta_sync_result <<choice>>\n  DeltaSync --> delta_sync_result: Successful response\n  delta_sync_result --> Synced: (1) Status other than 206\\nFull data is received, extract and replace old cache\\n (as if it is the full sync)\n  delta_sync_result --> FullSync: (2) The head of response doesn't match\\n the tail of the previously fetched data\n  delta_sync_result --> Synced: (3) The head of response matches\\n the tail of the previously fetched data\n\n  state delta_sync_error <<choice>>\n  DeltaSync --> delta_sync_error: Error response\n  delta_sync_error --> FullSync: (1) Status 416 should not happen\\nbut moves to full sync\n  delta_sync_error --> Unsupported: (2) Status 404\n  delta_sync_error --> Empty: (3) Status other than 404 or 416\n```\n\n----------------------------------------\n\nTITLE: Disabling Renovate Automatic Rebase (JSON)\nDESCRIPTION: Sets the Renovate `rebaseWhen` configuration option to `never`. This prevents Renovate from automatically rebasing branches, even when merge conflicts occur with the base branch. Disabling this is generally not recommended as it requires manual intervention to resolve conflicts. This setting is part of Renovate's JSON configuration.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/updating-rebasing.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"rebaseWhen\": \"never\"\n```\n\n----------------------------------------\n\nTITLE: Extending HTTP-hosted Renovate Presets in JSON\nDESCRIPTION: This JSON snippet illustrates extending a Renovate preset hosted on an HTTP server. The full URL to the preset JSON file is provided in the `extends` array. This method is useful for custom hosting solutions or when the platform is unsupported.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/config-presets.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": [\n    \"http://my.server/users/me/repos/renovate-presets/raw/default.json?at=refs%2Fheads%2Fmain\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Docker Image Resource in YAML (helm-values.yaml) - YAML\nDESCRIPTION: This YAML snippet represents a Helm values file declaring a Docker image for a service. It serves as an input file pattern for Renovate's custom manager configuration. The 'image' property holds the image repo, name, and tag; the snippet is referenced by regex patterns to match and update versions programmatically. No dependencies are required except adherence to the file convention; inputs are the registry path and tag, and the output is a rewritten YAML file with possibly updated image name or tag.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\n# The image of the service <registry>/<repo>/<image>:<tag>\\nimage: my.old.registry/aRepository/andImage:1.18-alpine\n```\n\n----------------------------------------\n\nTITLE: Configuring fileMatch for the Helmsman Manager in JSON\nDESCRIPTION: This JSON snippet shows how to enable the Helmsman manager by specifying a fileMatch pattern, allowing the manager to locate YAML state files named desired_state.yaml. To use it, add this configuration to your project’s Helmsman manager settings. The \"fileMatch\" array takes regular expressions to match intended file paths. Expected input: an array of regex patterns; output: files matching those patterns will be processed. Helmsman currently only supports YAML file formats, not TOML.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/helmsman/readme.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"helmsman\": {\n    \"fileMatch\": [\"(^|/)desired_state\\\\.yaml$\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting GitHub App Git Author in config.js (JavaScript)\nDESCRIPTION: Optionally configures the Git author information used for commits made by the Renovate GitHub App in `config.js`. The format includes the app's display name, user ID, slug name with `[bot]`, and the noreply domain. The user ID can be found via the GitHub API. Renovate attempts autodetection if this is not supplied.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/platform/github/readme.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ngitAuthor:\"Self-hosted Renovate Bot <123456+self-hosted-renovate[bot]@users.noreply.github.enterprise.com>\"\n```\n\n----------------------------------------\n\nTITLE: Setting Docker User via Shell for Renovate - Shell\nDESCRIPTION: This shell snippet shows exporting the 'RENOVATE_DOCKER_USER' environment variable to set Docker processes to run as the current user's UID and the root GID (0). This approach is often used to avoid file permission problems within Renovate child containers. Input: current output of the 'id -u' command. Required dependency: POSIX 'id' tool and a shell environment. The variable should be exported before starting Renovate.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/self-hosted-configuration.md#_snippet_25\n\nLANGUAGE: shell\nCODE:\n```\n> export RENOVATE_DOCKER_USER=\"$(id -u):0\" # 500:0 (username:root)\n```\n\n----------------------------------------\n\nTITLE: Specifying PR Table Columns in Renovate PR Body - JSON\nDESCRIPTION: This JSON snippet configures which columns to include in a Renovate-generated pull request table, adding a 'Package file' column along with the defaults (Package, Update, Type, New value, References). It is typically used in conjunction with custom definitions for new or modified table columns and leverages predefined values where applicable. Inputs are an array of column names; outputs are expanded PR tables containing these columns. No external dependencies are required.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_131\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"prBodyColumns\\\": [\\n    \\\"Package\\\",\\n    \\\"Update\\\",\\n    \\\"Type\\\",\\n    \\\"New value\\\",\\n    \\\"Package file\\\",\\n    \\\"References\\\"\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Renovate Platform via JSON Configuration File\nDESCRIPTION: Within a JSON configuration file (e.g., `config.json` or embedded), options are set using key-value pairs. This example sets the `platform` key to `gitlab`. This is equivalent to setting `RENOVATE_PLATFORM=gitlab` as an environment variable.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/config-overview.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"platform\": \"gitlab\"\n```\n\n----------------------------------------\n\nTITLE: Using the 'or' Helper for Conditional Logic (Handlebars)\nDESCRIPTION: Illustrates the `or` helper, which returns true if at least one of the provided expressions evaluates to true. Used for conditional rendering, like showing different messages based on whether an update is a patch (`isPatch`) or a single version (`isSingleVersion`).\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/templates.md#_snippet_11\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#if (or isPatch isSingleVersion}}Small update, safer to merge and release.{{else}}Check out the changelog for all versions before merging!{{/if}}\n```\n\n----------------------------------------\n\nTITLE: Extending fileMatch for Dockerfile Manager in JSON\nDESCRIPTION: This JSON configuration shows how to extend the default `fileMatch` regular expressions for the 'dockerfile' manager in Renovate. By adding \"does-not-look-like-a-docker-file\" to the `fileMatch` array, Renovate will now also consider files matching this pattern, in addition to its default patterns like 'Dockerfile'. The `fileMatch` configuration is additive.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/modules/manager/index.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dockerfile\": {\n    \"fileMatch\": [\"does-not-look-like-a-docker-file\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Substrings with 'containsString' Helper (Handlebars)\nDESCRIPTION: Shows the `containsString` helper, which returns true if the first argument (a string, e.g., `depName`) contains the second argument (substring, e.g., 'python'). Useful for conditional logic based on string content within Renovate templates.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/templates.md#_snippet_2\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#if (containsString depName 'python')}}Python{{else}}Other{{/if}}\n```\n\n----------------------------------------\n\nTITLE: Defining Zod Schemas with Only Necessary Fields (Correct Example)\nDESCRIPTION: Shows the recommended practice of defining a Zod schema `Box` that includes only the fields (`width`, `height`, `length`) strictly required by the application logic (calculating volume). This reduces fragility by minimizing dependencies on external data structure details. Requires the `zod` library (`z`).\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/development/zod.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst Box = z.object({\n  width: z.number(),\n  height: z.number(),\n  length: z.number(),\n});\n\nconst { width, height, length } = Box.parse(input);\nconst volume = width * height * length;\n```\n\n----------------------------------------\n\nTITLE: Specifying Registries in Imported Bazel Config - Markdown/Config\nDESCRIPTION: Illustrates adding custom registries in an imported bazelrc file. This snippet works together with the main .bazelrc to construct the complete registry search path used by Renovate for dependency updates.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/bazel.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nbuild --registry=https://example.com/custom_registry\n```\n\n----------------------------------------\n\nTITLE: Configuring Renovate's Tekton Manager File Matching in JSON\nDESCRIPTION: This JSON configuration snippet shows how to define the `fileMatch` pattern for Renovate's `tekton` manager within the Renovate configuration file. Since there's no default, this example explicitly tells Renovate to scan all files ending with `.yaml` or `.yml` to find Tekton resources for dependency updates.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/tekton/readme.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"tekton\": {\n    \"fileMatch\": [\"\\\\.yaml$\", \"\\\\.yml$\"]\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Extracting Dependencies from TOML Array Table - TOML\nDESCRIPTION: Shows TOML input with a list of dependencies each as a [[packages]] array of tables. Each entry has 'version' and 'package' properties; allows direct transformation via JSONata in Renovate. Prerequisite: TOML-compatible Renovate parser.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/custom/jsonata/readme.md#_snippet_16\n\nLANGUAGE: toml\nCODE:\n```\n[[packages]]\nversion = \"1.2.3\"\npackage = \"foo\"\n\n[[packages]]\nversion = \"1.2.2\"\npackage = \"bar\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Renovate Flux Manager to Match All YAML Files\nDESCRIPTION: This JSON configuration snippet shows how to override the default `fileMatch` setting for Renovate's `flux` manager. It configures Renovate to scan all files ending with the `.yaml` extension within the repository for Flux manifests, instead of just the default `**/gotk-components.y(a)ml`.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/flux/readme.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"flux\": {\n    \"fileMatch\": [\"\\\\.yaml$\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Define Puppet Modules with a Single Forge in Ruby Puppetfile\nDESCRIPTION: Demonstrates defining a single default forge using the `forge` directive. Subsequent module definitions (`mod`) without specific source information will use this declared forge (`https://forgeapi.puppetlabs.com` in this example) for resolution.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/puppet/readme.md#_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nforge \"https://forgeapi.puppetlabs.com\"\n\nmod 'puppetlabs/apt', '8.3.0'\nmod 'puppetlabs/apache', '7.0.0'\nmod 'puppetlabs/concat', '7.1.1'\n```\n\n----------------------------------------\n\nTITLE: Wildcard Pattern for PIP Requirements Files (Infix)\nDESCRIPTION: A file pattern employing a wildcard (`*`) as an infix element between `requirements.` and `.pip`. This pattern is designed to detect files such as `requirements.dev.pip` or `requirements.prod.pip`.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/pip_requirements/readme.md#_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nrequirements.*.pip\n```\n\n----------------------------------------\n\nTITLE: Listing Python Dependencies in Requirements Format\nDESCRIPTION: This snippet defines the Python package dependencies for the project. It uses the standard pip requirements file format, listing packages like 'some-package', 'some-other-package', 'sphinx', and 'not_semver' along with their required versions (e.g., '==0.3.1'). This file is typically used by pip to install the necessary libraries.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/pip-compile/__fixtures__/requirementsNoHeaders.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# simple comment\nsome-package==0.3.1\nsome-other-package==1.0.0\nsphinx\nnot_semver==1.9\n```\n\n----------------------------------------\n\nTITLE: Making Authenticated HTTP Requests with Http Utility Class - TypeScript\nDESCRIPTION: Provides a pattern for making HTTP REST requests using a project-specific Http utility class that automates authentication, caching, and host rule application. Requires the custom Http class from '../../../util/http' and recommends handling async/await inside try-catch blocks. Inputs: URL to request; Outputs: Parsed JSON body of the HTTP response.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/development/best-practices.md#_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport { Http } from '../../../util/http';\n\nconst http = new Http('some-host-type');\n\ntry {\n    const body = (await http.getJson<Response>(url)).body;\n} catch (err) {\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Headers via hostRules in Renovate Config\nDESCRIPTION: This JSON snippet illustrates how to configure `hostRules` in the main Renovate configuration to add custom HTTP headers to requests made to specific hosts. In this example, an `X-Auth-Token` header with a secret value is added to requests targeting `https://domain.com/all-versions`. By default, headers starting with `X-` are allowed. If other headers are needed, they must be permitted using the `allowedHeaders` configuration option.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/self-hosted-configuration.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hostRules\": [\n    {\n      \"matchHost\": \"https://domain.com/all-versions\",\n      \"headers\": {\n        \"X-Auth-Token\": \"secret\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Renovate Configuration Option: groupName\nDESCRIPTION: Refers to the `groupName` configuration option, typically defined within `packageRules` in Renovate's JSON configuration. It allows users to assign a name to a group, causing Renovate to batch multiple dependency updates into a single Pull Request.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/getting-started/use-cases.md#_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n`groupName`\n```\n\n----------------------------------------\n\nTITLE: Illustrating Swift Package Version Specifiers and Potential Renovate Updates\nDESCRIPTION: These Swift code snippets demonstrate various ways to specify package dependencies in a `Package.swift` file. The examples cover exact version pinning (`.exact()`, `exact:`) and different range types (`from:`, closed `...`, half-open `..<`, upper-bound `...`/`..<`). The comments (`// => ...`) illustrate how Renovate might interpret and potentially update these versions, treating non-exact specifiers as ranges.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/swift/readme.md#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\npackage(name: \"<...>\", .exact(\"1.2.3\"))   // => 1.2.3\npackage(name: \"<...>\", exact: \"1.2.3\")    // => 1.2.3\npackage(name: \"<...>\", from: \"1.2.3\")     // => from: \"2.0.0\"\npackage(name: \"<...>\", \"1.2.3\"...)        // => \"2.0.0\"...\npackage(name: \"<...>\", \"1.2.3\"...\"1.3.0\") // => \"1.2.3\"...\"2.0.0\"\npackage(name: \"<...>\", \"1.2.3\"..<\"1.3.0\") // => \"1.2.3\"..<\"2.0.0\"\npackage(name: \"<...>\", ...\"1.2.3\")        // => ...\"2.0.0\"\npackage(name: \"<...>\", ..<\"1.2.3\")        // => ..<\"2.0.0\"\n```\n\n----------------------------------------\n\nTITLE: Example Bitrise Configuration (bitrise.yml) for Renovate Datasource in YAML\nDESCRIPTION: This YAML snippet shows an example `bitrise.yml` file. It defines the format version, default step library source (a GitHub URL used as `registryUrl` by Renovate), project type, environment variables, and a workflow ('test') containing a step ('script@1.1.5'). Renovate uses this structure to identify the step name (`script` as `packageName`), its version (`1.1.5`), and its source repository.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/bitrise/readme.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nformat_version: 11\ndefault_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git\nproject_type: android\napp:\n  envs:\n    - MY_NAME: My Name\nworkflows:\n  test:\n    steps:\n      - script@1.1.5:\n          inputs:\n            - content: echo \"Hello ${MY_NAME}!\"\n```\n```\n\n----------------------------------------\n\nTITLE: Using the 'and' Helper for Conditional Logic (Handlebars)\nDESCRIPTION: Illustrates the `and` helper, which returns true only if all provided expressions evaluate to true. Used for conditional rendering within Renovate templates, like showing a message only if an update is major (`isMajor`) and has release notes (`hasReleaseNotes`).\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/templates.md#_snippet_1\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#if (and isMajor hasReleaseNotes)}}Backwards Incompatible release! Check out the Release notes.{{/if}}\n```\n\n----------------------------------------\n\nTITLE: Showing Renovate's JSON Conversion of YAML Input (JSON)\nDESCRIPTION: Demonstrates how Renovate parses a YAML response and converts it into an equivalent JSON structure when the `yaml` format is specified for a custom datasource. This resulting JSON object, preserving the original structure, is then available for further processing via JSONata `transformTemplates`.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/custom/readme.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"releases\": [\n    {\n      \"version\": \"1.0.0\"\n    },\n    {\n      \"version\": \"2.0.0\"\n    },\n    {\n      \"version\": \"3.0.0\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: JSONata Query: Extract Dependencies from Array Node - Query\nDESCRIPTION: JSONata query to extract dependency objects from within an array under the 'packages' node. Maps 'package' to 'depName' and 'version' to 'currentValue'. Used by Renovate's custom manager logic.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/custom/jsonata/readme.md#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\npackages.{ \"depName\": package, \"currentValue\": version }\n```\n\n----------------------------------------\n\nTITLE: Forcing Pending Updates in Renovate Configuration - JSON\nDESCRIPTION: This JSON snippet demonstrates how to configure Renovate to generate many pending updates for a dependency (e.g., Prettier) by setting a high 'minimumReleaseAge' in the package rules. Prerequisites include an existing Renovate setup and the appropriate configuration schema. The 'matchPackageNames' field specifies which package(s) the rule applies to, while 'minimumReleaseAge' defines the minimum age of releases to consider for updates. Inputs: package rule details; Outputs: more pending updates in the Dependency Dashboard; Limitation: only effective for frequently updated dependencies.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/development/minimal-reproductions.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"extends\\\": [\\\"config:best-practices\\\"],\\n  \\\"packageRules\\\": [\\n    {\\n      \\\"description\\\": \\\"Force lots of pending updates for the Prettier package\\\",\\n      \\\"matchPackageNames\\\": [\\\"prettier\\\"],\\n      \\\"minimumReleaseAge\\\": \\\"365 days\\\"\\n    }\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Starting OpenTelemetry Stack with Docker Compose (Shell)\nDESCRIPTION: This shell command uses Docker Compose to start the services defined in the `docker-compose.yaml` file (Jaeger, Prometheus, OpenTelemetry Collector) in detached mode (`-d` is often used, though not shown here, `up` runs in foreground). It requires `docker-compose.yaml` and `otel-collector-config.yml` to be present in the current directory.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/examples/opentelemetry.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose up\n```\n\n----------------------------------------\n\nTITLE: Enabling only npm package manager in Renovate (JSON)\nDESCRIPTION: Illustrates how to restrict Renovate to use only the npm package manager by setting enabledManagers to an array containing 'npm'. Place this in the Renovate configuration to prevent other managers (including Python) from running. Input is a configuration JSON object; output is Renovate updating only npm-based dependencies, ignoring all others.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/python.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"enabledManagers\\\": [\\\"npm\\\"]\\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying GitHub Platform in Renovate Configuration\nDESCRIPTION: Specifies the platform as GitHub using `platform=github`. This setting is mandatory when targeting GitHub or GitHub Enterprise Server and can be configured in `config.js`, as an environment variable (`RENOVATE_PLATFORM`), or via a CLI parameter (`--platform=github`).\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/platform/github/readme.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Example in config.js\nplatform: \"github\"\n```\n\n----------------------------------------\n\nTITLE: Converting Objects/Arrays to JSON Strings with 'toJSON' (Handlebars)\nDESCRIPTION: Explains the `toJSON` helper, used to serialize a JavaScript object or array (e.g., the `upgrades` variable) into its JSON string representation within the template output. Useful for debugging or passing structured data.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/templates.md#_snippet_16\n\nLANGUAGE: handlebars\nCODE:\n```\n{{{ toJSON upgrades }}}\n```\n\n----------------------------------------\n\nTITLE: Pinning Debian Package Versions with Renovate Comments in Dockerfile (Dockerfile)\nDESCRIPTION: This Dockerfile snippet shows how to mark environment variables for package versions with Renovate comments, allowing automated version updates. It is intended for use in projects that install specific Debian packages (e.g., gcc-11) via apt. Requires Renovate configuration to read the renovate: comments and regex; inputs include Dockerfile lines formatted with Renovate-matching ENV markers. Outputs are environment variables updated by Renovate to track the latest version.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/deb/readme.md#_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM debian:bullseye\n\n# renovate: suite=bullseye depName=gcc-11\nENV GCC_VERSION=\"11.2.0-19\"\n\nRUN apt-get update && \\\n    apt-get install -y \\\n    gcc-11=\"${GCC_VERSION}\" && \\\n    apt-get clean\n```\n\n----------------------------------------\n\nTITLE: Looking Up Properties in Array Elements with 'lookupArray' (Handlebars)\nDESCRIPTION: Demonstrates the `lookupArray` helper, which retrieves a specific property ('prBodyDefinitions') from each object within an array (`upgrades`). This is simpler than nested block helpers for extracting specific fields from array elements.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/templates.md#_snippet_8\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#each (lookupArray upgrades \"prBodyDefinitions\")}} {{{Issue}}}{{/each}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Bare Token Authentication via Host Rules in Renovate JSON\nDESCRIPTION: Demonstrates how to configure Renovate to send a bare token in the HTTP `Authorization` header for a specific host (`https://hex.pm/api/repos/private_repo/`), as required by some services like Hex.pm. Setting `authType` to `Token-Only` results in an `Authorization: <some-token>` header.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_64\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hostRules\": [\n    {\n      \"matchHost\": \"https://hex.pm/api/repos/private_repo/\",\n      \"token\": \"<some-token>\",\n      \"authType\": \"Token-Only\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Renovate Automation Tags with HTML Comments in Markdown\nDESCRIPTION: This snippet demonstrates the usage of special HTML comments within Markdown code, which are recognized by RenovateBot to facilitate automation of dependency update workflows. Each comment encodes a command (e.g., 'approve-branch', 'unschedule-branch') with associated parameters, enabling RenovateBot or related automation to parse the file and respond to user actions. No dependencies are required aside from RenovateBot supporting the repository, and these comments are meant for automatic tool reading rather than manual editing. Inputs are user checkboxes, outputs are triggers for branch or PR actions.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/workers/repository/__fixtures__/dependency-dashboard-with-8-PR.txt#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- approve-branch=branchName1 -->\n<!-- approve-branch=branchName2 -->\n<!-- approve-all-pending-prs -->\n<!-- unschedule-branch=branchName3 -->\n<!-- unschedule-branch=branchName4 -->\n<!-- unlimit-branch=branchName5 -->\n<!-- unlimit-branch=branchName6 -->\n<!-- create-all-rate-limited-prs -->\n<!-- retry-branch=branchName7 -->\n<!-- retry-branch=branchName8 -->\n<!-- approvePr-branch=branchName9 -->\n```\n\n----------------------------------------\n\nTITLE: Starting Bitbucket Server Locally with Docker\nDESCRIPTION: These shell commands use Docker to create a persistent volume and run a specific version of the Atlassian Bitbucket Server image in a detached container. The server's web interface (port 7990) and SSH access (port 7999) are mapped to the host machine.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/platform/bitbucket-server/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker volume create --name bitbucketVolume\ndocker run -v bitbucketVolume:/var/atlassian/application-data/bitbucket --name=\"bitbucket\" -d -p 7990:7990 -p 7999:7999 atlassian/bitbucket-server:5.12.3\n```\n\n----------------------------------------\n\nTITLE: Creating Inferred Types from Zod Schemas in TypeScript\nDESCRIPTION: Demonstrates how to define a Zod schema `User` and subsequently infer its corresponding TypeScript type, also named `User`, using `z.infer<typeof User>`. This allows leveraging the schema definition for static type checking in the codebase. Requires the `zod` library imported as `z`.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/development/zod.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const User = z.object({\n  firstName: z.string(),\n  lastName: z.string(),\n});\nexport type User = z.infer<typeof User>;\n```\n\n----------------------------------------\n\nTITLE: Triggering Branch Recreation for Blocked Multi-Dependency PR (HTML Comment)\nDESCRIPTION: This HTML comment, located within a Markdown list item for a blocked pull request (`pr2`) affecting multiple dependencies (`dep2`, `dep3`), instructs Renovate. The `recreate-branch=branchName2` directive tells Renovate to recreate the branch named `branchName2` if the user checks the associated checkbox in the Dependency Dashboard issue.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/workers/repository/__fixtures__/dependency-dashboard-with-2-PR-closed-ignored.txt#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- recreate-branch=branchName2 -->\n```\n\n----------------------------------------\n\nTITLE: Overriding Docker Sidecar Image in Renovate Configuration - JSON\nDESCRIPTION: This JSON snippet configures Renovate to use a custom sidecar Docker image rather than the default. The 'dockerSidecarImage' key is set with the desired image URI (e.g., 'ghcr.io/your_company/sidecar'). Requires that the image exists and is accessible to Renovate. Input is the full Docker image name; output result is that sidecars are pulled or launched from the custom image.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/self-hosted-configuration.md#_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dockerSidecarImage\": \"ghcr.io/your_company/sidecar\"\n}\n```\n\n----------------------------------------\n\nTITLE: Resulting Host Rule for npmjs Token from Environment Variable in JSON\nDESCRIPTION: This JSON snippet shows the `hostRules` configuration that Renovate generates when it detects the environment variable `NPM_REGISTRY_NPMJS_ORG_TOKEN=abc123` and the `detectHostRulesFromEnv` option is enabled. It creates a rule for the `npm` host `registry.npmjs.org` using the provided token.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/self-hosted-configuration.md#_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hostRules\": [\n    {\n      \"hostType\": \"npm\",\n      \"matchHost\": \"registry.npmjs.org\",\n      \"token\": \"abc123\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Renovate Global Configuration File Types (JavaScript/JSON)\nDESCRIPTION: Renovate reads global configuration primarily from a `config.js` file by default. Both `.js` (allowing synchronous/asynchronous logic) and `.json` file formats are supported for defining global settings.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/config-overview.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconfig.js\n```\n\nLANGUAGE: text\nCODE:\n```\n.js\n```\n\nLANGUAGE: json\nCODE:\n```\n.json\n```\n\n----------------------------------------\n\nTITLE: Disabling Python managers in Renovate (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to disable all Renovate managers for Python by setting the language key ('python') and 'enabled' property to false. Intended for use in Renovate configuration, it is suitable for mono-repos or environments where Python management by Renovate is not desired. Input is a configuration object; outcome is that Renovate will skip all Python-related updates.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/python.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"python\\\": {\\n    \\\"enabled\\\": false\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Equivalent npm Caret Range for Composer '~4'\nDESCRIPTION: The npm caret range equivalent to the Composer tilde range '~4'. This notation generally allows updates within the specified major version (e.g., >=4.0.0 <5.0.0).\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/versioning/composer/readme.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n`^4`\n```\n\n----------------------------------------\n\nTITLE: Pretty-Printing JSON Strings with 'stringToPrettyJSON' (Handlebars)\nDESCRIPTION: Shows the `stringToPrettyJSON` helper, used to format a variable containing a valid JSON string (e.g., `myvar`) into a human-readable, indented format within the template output.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/templates.md#_snippet_14\n\nLANGUAGE: handlebars\nCODE:\n```\n{{{stringToPrettyJSON myvar}}}\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Repository Cache in Renovate (TypeScript)\nDESCRIPTION: Demonstrates setting the `repositoryCacheType` option to a S3 URI (e.g., 's3://bucket-name') to enable S3-backed repository caching. Renovate utilizes the AWS SDK for JavaScript V3 for S3 interactions, supporting its default credential provider chain. This cache stores repository-related data like extracted dependencies, not lookup cache data like dependency versions.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/self-hosted-configuration.md#_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\n```ts title=\"Set repositoryCacheType to an S3 URI to enable S3 backed repository cache\"\n{\n  repositoryCacheType: 's3://bucket-name';\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Removing Duplicates from Arrays with 'distinct' Helper (Handlebars)\nDESCRIPTION: Demonstrates the `distinct` helper, which takes an array and returns a new array with duplicate elements removed. This example uses it in conjunction with nested `lookupArray` calls to extract unique 'Issue' values from the 'prBodyDefinitions' within the 'upgrades' array.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/templates.md#_snippet_4\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#each (distinct (lookupArray (lookupArray upgrades \"prBodyDefinitions\") \"Issue\"))}} {{{.}}}{{/each}}\n```\n\n----------------------------------------\n\nTITLE: Example Yarn Command for Setting HTTP Proxy via Renovate\nDESCRIPTION: Illustrates the type of shell command Renovate runs to configure the HTTP proxy for Yarn when `RENOVATE_X_YARN_PROXY` is enabled and the `HTTP_PROXY` environment variable is set. This command directly modifies the user's global Yarn configuration file (`~/.yarnrc.yml`) by adding or updating the `httpProxy` setting.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/npm/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn config set --home httpProxy http://proxy\n```\n\n----------------------------------------\n\nTITLE: Specifying Minimum npm Version in package.json (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to specify a required npm version constraint within the 'engines' object in a package.json file. Renovate uses this constraint (e.g., \"^8.1.0\") to determine which version of npm to install and use when binarySource is set to 'docker' or 'install', ensuring compatibility during its operations.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/node.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"package.json\"\n{\n  \"engines\": {\n    \"npm\": \"^8.1.0\"\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Invalid Wildcard Use with Negation in JSON\nDESCRIPTION: Presents an invalid Renovate configuration example for `allowedEnv`. The `*` wildcard cannot be combined with a negative match (`\"!ABC\"`). In scenarios requiring negation alongside a broad match, the `*` should simply be omitted, as the negative pattern alone achieves the intended effect.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/string-pattern-matching.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"Example of invalid wildcard use with negation\"\n{\n  \"allowedEnv\": [\"*\", \"!ABC\"]\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Disabling the Gradle Manager in JSON\nDESCRIPTION: This JSON configuration provides an example of disabling a specific Renovate manager, in this case, 'gradle'. Setting the 'enabled' property to false within the 'gradle' manager's configuration block prevents Renovate from processing Gradle dependencies.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/modules/manager/index.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"gradle\": {\n    \"enabled\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Maven Dependencies using install and artifact in Bazel\nDESCRIPTION: This snippet illustrates two methods for declaring Maven dependencies using the initialized `maven` extension. The `install` method takes a list of artifacts specified as strings, while the `artifact` method declares a single dependency with parameters like `group`, `version`, and `neverlink`. Renovate can update the versions specified in both methods.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/bazel-module/readme.md#_snippet_2\n\nLANGUAGE: bazel\nCODE:\n```\nmaven.install(\n    artifacts = [\n        \"org.seleniumhq.selenium:selenium-java:4.4.0\",\n    ],\n)\n\nmaven.artifact(\n    artifact = \"javapoet\",\n    group = \"com.squareup\",\n    neverlink = True,\n    version = \"1.11.1\",\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Versioning for Bazel in Renovate - JSON\nDESCRIPTION: Presents a Renovate configuration for customizing Maven dependency versioning rules when used with Bazel. The packageRules section sets the versioning scheme for entries matching both bazel manager and maven datasource. Inputs are matchManagers, matchDatasources, and versioning parameters, and the configuration must be placed in Renovate's config file.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/bazel.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchManagers\": [\"bazel\"],\n      \"matchDatasources\": [\"maven\"],\n      \"versioning\": \"maven\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Locking Dependency Versions with pip-compile - Python\nDESCRIPTION: This snippet lists a Python package ('attrs==21.2.0') along with SHA256 hashes for secure, deterministic installation by pip. It assumes pip-compile was used to generate the constraints, and that 'attrs' is required by the project. Key parameters include the version and each '--hash' mapping; inputs are managed by the upstream requirements.in, and output is consumed by pip for package installations. Limitations stem from manual updates required to refresh dependency or hash information.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/pip-compile/__fixtures__/requirementsWithExploitingArguments.txt#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nattrs==21.2.0 \\\n    --hash=sha256:149e90d6d8ac20db7a955ad60cf0e6881a3f20d37096140088356da6c716b0b1 \\\n    --hash=sha256:ef6aaac3ca6cd92904cdd0d83f629a15f18053ec84e6432106f7a4d04ae4f5fb\n```\n\n----------------------------------------\n\nTITLE: Creating Arrays with 'toArray' Helper (Handlebars)\nDESCRIPTION: Illustrates the `toArray` helper, which takes multiple arguments ('value1', 'value2', 'value3') and converts them into an array. The example shows creating an array and then converting it to a JSON string using the `toJSON` helper.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/templates.md#_snippet_15\n\nLANGUAGE: handlebars\nCODE:\n```\n{{{ toJSON (toArray 'value1' 'value2' 'value3') }}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Registry URLs for SBT Plugin Datasource in Renovate - JSON\nDESCRIPTION: This JSON configuration snippet demonstrates how to override the default set of Maven repository URLs that Renovate uses to find SBT plugin updates. By specifying the matchDatasources array with 'sbt-plugin' and providing a custom list of registryUrls, users can control the order and sources Renovate checks for plugin updates. Inputs include the datasource type and an array of desired repository URLs; expected output is that Renovate uses these URLs in the specified sequence during dependency resolution, with no enforced constraints on the number of URLs.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/sbt-plugin/readme.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"matchDatasources\\\": [\\\"sbt-plugin\\\"],\\n  \\\"registryUrls\\\": [\\n    \\\"https://repo1.maven.org/maven2/\\\",\\n    \\\"https://oss.sonatype.org/content/repositories/snapshots\\\",\\n    \\\"https://repo.scala-sbt.org/scalasbt/sbt-plugin-releases\\\"\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Docker Tags Datasource Cache TTL in JSON\nDESCRIPTION: This JSON configuration snippet shows how to use the `cacheTtlOverride` option to set a custom Time-To-Live (TTL) for a specific Renovate datasource namespace. In this example, the cache TTL for `datasource-docker-tags` is set to 120 minutes, overriding the default.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/self-hosted-configuration.md#_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cacheTtlOverride\": {\n    \"datasource-docker-tags\": 120\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Colored Output from GitLab CI Jobs (Markdown)\nDESCRIPTION: This snippet suggests options for controlling text coloring in GitLab CI job outputs, which is necessary since GitLab Runner operates in non-interactive mode. By setting FORCE_COLOR or TERM environment variables (FORCE_COLOR: 3 or TERM: ansi), you can ensure that output from Renovate or other CLI tools is colorized. This can enhance readability, especially for log output.\n\nDependencies: GitLab Runner, job environment variables. FORCE_COLOR and TERM are general-purpose environment variables for Unix shells. Limitation: Coloring depends on tool support and output may differ if the variables are misconfigured.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/platform/gitlab/readme.md#_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nset `FORCE_COLOR: 3` or `TERM: ansi` to the job, in order to get colored output.\n```\n\n----------------------------------------\n\nTITLE: Triggering Renovate Recreation for Closed PR Branch (HTML/Markdown)\nDESCRIPTION: This HTML comment, embedded in a Markdown checkbox list item, instructs the Renovate bot to recreate a pull request for the specified branch (`renovate/docker-renovate-renovate-16.10.8` in this example), which was previously closed without merging. Clicking the associated checkbox triggers the recreation.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/platform/utils/__fixtures__/issue-body.txt#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!-- recreate-branch=renovate/docker-renovate-renovate-16.10.8 -->\n```\n\n----------------------------------------\n\nTITLE: Assigning required Azure DevOps reviewers in Renovate (JSON)\nDESCRIPTION: Shows how to assign a required reviewer (user or team) in Azure DevOps using the `reviewers` option in Renovate configuration. The `required:` prefix must be added before the username or team name (e.g., `bar`) to enforce the review requirement.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_140\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"reviewers\": [\"required:bar\"]\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Modifying Default PR Body Column Template for Package - JSON\nDESCRIPTION: This JSON snippet demonstrates overriding the default PR table definition for the 'Package' column so the package name appears inside a code block (using backticks). It serves to improve the visibility and formatting of key PR metadata. No dependencies are required, and the input is an object mapping column names to template strings using Mustache-like triple curly braces.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_132\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"prBodyDefinitions\\\": {\\n    \\\"Package\\\": \\\"`{{{depName}}}`\\\"\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Example Paginated Results for Initial GitHub Fetch (JavaScript)\nDESCRIPTION: Demonstrates example data retrieved over three pages during an initial GitHub GraphQL fetch for releases/tags, assuming a page size of 5. Each page contains items sorted reverse chronologically by `releaseTimestamp`, illustrating the pagination process. Each item includes `version` and `releaseTimestamp`.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/util/github/graphql/readme.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Page 1\n[\n  { \"version\": \"3.1.1\", \"releaseTimestamp\": \"2022-12-18\" },\n  { \"version\": \"3.1.0\", \"releaseTimestamp\": \"2022-12-15\" },\n  { \"version\": \"3.0.2\", \"releaseTimestamp\": \"2022-12-09\" },\n  { \"version\": \"3.0.1\", \"releaseTimestamp\": \"2022-12-08\" },\n  { \"version\": \"3.0.0\", \"releaseTimestamp\": \"2022-12-05\" },\n]\n\n// Page 2\n[\n  { \"version\": \"2.2.2\", \"releaseTimestamp\": \"2022-11-23\" },\n  { \"version\": \"2.2.1\", \"releaseTimestamp\": \"2022-10-17\" },\n  { \"version\": \"2.2.0\", \"releaseTimestamp\": \"2022-10-13\" },\n  { \"version\": \"2.1.1\", \"releaseTimestamp\": \"2022-10-07\" },\n  { \"version\": \"2.1.0\", \"releaseTimestamp\": \"2022-09-21\" },\n]\n\n// Page 3\n[\n  { \"version\": \"2.0.1\", \"releaseTimestamp\": \"2022-09-18\" },\n  { \"version\": \"2.0.0\", \"releaseTimestamp\": \"2022-09-01\" },\n]\n```\n\n----------------------------------------\n\nTITLE: Example Terraform Variable with Renovate Directive (HCL)\nDESCRIPTION: Demonstrates how a Terraform variable definition can include the `eksAddonsFilter` directive in a comment. The custom manager's regex would target this comment to extract the filter parameters (`packageName`) and the variable's default value (`currentValue`) for version tracking.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/aws-eks-addon/readme.md#_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"vpc_cni_version\" {\n  type        = string\n  description = \"EKS vpc-cni add-on version\"\n  # kubernetesVersion and addonName provided\n  # renovate: eksAddonsFilter={\"kubernetesVersion\":\"1.30\",\"addonName\":\"vpc-cni\"}\n  default     = \"v1.18.1-eksbuild.3\"\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Specific HTTP Status Codes for AbortOnError in Renovate JSON\nDESCRIPTION: Configures Renovate to ignore `404` status codes when deciding whether to abort a run due to an error, assuming `abortOnError` is also set to `true` in the same or an applicable host rule. This allows Renovate to continue running even if certain non-critical errors (like Not Found) occur.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_58\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hostRules\": [\n    {\n      \"abortOnError\": true,\n      \"abortIgnoreStatusCodes\": [404]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example Buildpacks project.toml for Renovate Updates (TOML)\nDESCRIPTION: This TOML snippet exemplifies a `project.toml` file compatible with the Renovate `buildpacks` manager. It defines a builder using a full registry URI and multiple buildpacks using Docker URIs (explicit `docker://` and implicit Docker Hub). It also includes a `file://` URI which Renovate ignores, illustrating the requirement for OCI image references for updates.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/buildpacks/readme.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\ntitle=\"Example of a project.toml file with Docker reference URIs\"\n[_]\nschema-version = \"0.2\"\n\n[io.buildpacks]\nbuilder = \"registry.corp/builder/noble:1.1.1\"\n\n[[io.buildpacks.group]]\nuri = \"docker://buildpacks/java:2.2.2\"\n\n[[io.buildpacks.group]]\nuri = \"buildpacks/nodejs:3.3.3\"\n\n[[io.buildpacks.group]]\nuri = \"file://local.oci\" # will be ignored\n```\n\n----------------------------------------\n\nTITLE: Equivalent npm Caret Range for Composer '~4.1'\nDESCRIPTION: The npm caret range equivalent to the Composer tilde range '~4.1'. This notation typically allows updates that do not modify the leftmost non-zero digit (e.g., >=4.1.0 <4.2.0).\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/versioning/composer/readme.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n`^4.1`\n```\n\n----------------------------------------\n\nTITLE: Declaring a Bazel Dependency with bazel_dep - Bazel Module - Python\nDESCRIPTION: Defines a Bazel module dependency using the bazel_dep function, specifying the dependency name and version. Renovate uses this declaration to check for newer dependency versions in recognized registries. Input parameters are name and version; output is the inclusion of the module with the requested version.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/bazel.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nbazel_dep(name = \"cgrindel_bazel_starlib\", version = \"0.15.0\")\n```\n\n----------------------------------------\n\nTITLE: Before State of GitLab-CI Include Fragment - YAML\nDESCRIPTION: This YAML snippet represents the original state of a GitLab-CI fragment inclusion using an old dependency path (e.g., 'pipeline-fragments/docker-lint'). It serves as an input example for the Renovate regex manager configuration. Parameters include: 'project' (dependency path), 'ref' (version), and 'file' (included YAML fragment). Inputs are static YAML configurations; output will be the updated fragment with a changed dependency name and (potentially) version.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/custom/regex/readme.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n- project: 'pipeline-fragments/docker-lint'\n  ref: 2-4-0\n  file: 'ci-include-docker-lint-base.yml'\n```\n\n----------------------------------------\n\nTITLE: Converting Strings to Lowercase with 'lowercase' Helper (Handlebars)\nDESCRIPTION: Shows the `lowercase` helper, which converts a given string (e.g., the value of `depName`) to its lowercase representation within a Renovate template.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/templates.md#_snippet_10\n\nLANGUAGE: handlebars\nCODE:\n```\n{{{ lowercase depName }}}\n```\n\n----------------------------------------\n\nTITLE: Updating syntax Image Reference - Dockerfile\nDESCRIPTION: This Dockerfile snippet uses a syntax comment (# syntax=docker/dockerfile:1.9.0) to specify the frontend for Docker BuildKit, followed by a FROM directive. Renovate can update the version of the Dockerfile syntax image as well as the alpine base image. Dependencies include Docker BuildKit. No input parameters besides the specified versions. The output is interpreted according to the defined frontend image.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/dockerfile/readme.md#_snippet_5\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1.9.0\nFROM alpine:3.19.4\n```\n\n----------------------------------------\n\nTITLE: Renaming Packages with Replacement Presets in Renovatebot (JSON)\nDESCRIPTION: This snippet demonstrates the format for specifying package renames in the replacements.json configuration file for Renovatebot. Dependencies include knowledge of the replaced package (“matchPackageNames”), its previous version (“matchCurrentVersion”), the new package name (“replacementName”), and the replacement version (“replacementVersion”). Inputs are the old and new package names along with version selectors, and the output enables Renovatebot to automatically upgrade references and versions. Fields such as “matchDatasources” identify the package registry (e.g., npm).\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/data/readme.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"matchCurrentVersion\": \">=3.10.3\",\n  \"matchDatasources\": [\"npm\"],\n  \"matchPackageNames\": [\n    \"apollo-server\",\n    \"apollo-server-core\",\n    \"apollo-server-express\"\n  ],\n  \"replacementName\": \"@apollo/server\",\n  \"replacementVersion\": \"4.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Status Check Names in Renovate - JSON\nDESCRIPTION: Shows how to override the context/names of status checks that Renovate adds to commits, branches, or PRs through the 'statusCheckNames' property in JSON. This snippet replaces the defaults for 'minimumReleaseAge' and 'mergeConfidence' with custom strings. Requires placement within a renovate.json configuration, and keys represent internal Renovate status types. Inputs are the mappings of check names, and outputs are custom contexts displayed on your PRs. If a value is set to null or an empty string, the status check is skipped.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_142\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"statusCheckNames\": {\n    \"minimumReleaseAge\": \"custom/stability-days\",\n    \"mergeConfidence\": \"custom/merge-confidence-level\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering Renovate PR Creation for All Rate-Limited Branches (HTML/Markdown)\nDESCRIPTION: This HTML comment, embedded in a Markdown checkbox list item, instructs the Renovate bot to create pull requests for all currently rate-limited dependency updates at once. Clicking the associated checkbox triggers this bulk action.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/platform/utils/__fixtures__/issue-body.txt#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- create-all-rate-limited-prs -->\n```\n\n----------------------------------------\n\nTITLE: Ignoring Test Paths with testPathIgnorePatterns in Jest Config\nDESCRIPTION: Mentions the `testPathIgnorePatterns` configuration option in Jest. Version 0.5.1 fixed a bug related to passing an empty value for this option, which is used to specify file path patterns that Jest should ignore when looking for tests.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/workers/repository/update/pr/changelog/__fixtures__/jest.md#_snippet_19\n\nLANGUAGE: json\nCODE:\n```\ntestPathIgnorePatterns\n```\n\n----------------------------------------\n\nTITLE: Suppressing Renovate Notifications (JSON)\nDESCRIPTION: Shows how to suppress specific notifications generated by Renovate by setting the 'suppressNotifications' field. For example, blocking the 'prIgnoreNotification' suppresses comments on PRs that are closed unmerged. Accepts an array of notification identifiers as input in a JSON object, enabling selective suppression of Renovate bot output.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_144\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"suppressNotifications\\\": [\\\"prIgnoreNotification\\\"]\\n}\n```\n\n----------------------------------------\n\nTITLE: Legacy git_repository Declaration in Bazel WORKSPACE - Starlark\nDESCRIPTION: Example of a git_repository declaration in a WORKSPACE file using SemVer tagging. Renovate updates the tag field when newer releases are available in the corresponding GitHub repository tags. Inputs are dependency name, GitHub remote, and SemVer tag. Output is tracking of versioned dependency releases.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/bazel.md#_snippet_9\n\nLANGUAGE: starlark\nCODE:\n```\ngit_repository(\n    name = \"build_bazel_rules_typescript\",\n    remote = \"https://github.com/bazelbuild/rules_typescript.git\",\n    tag = \"0.6.1\",\n)\n```\n\n----------------------------------------\n\nTITLE: Encoding Strings for URIs with 'encodeURIComponent' Helper (Handlebars)\nDESCRIPTION: Shows the `encodeURIComponent` helper, used to encode a string (e.g., the value of `baseDir`) into a percent-encoded format suitable for use in URIs. It uses the corresponding JavaScript global function.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/templates.md#_snippet_6\n\nLANGUAGE: handlebars\nCODE:\n```\n{{{encodeURIComponent baseDir}}}\n```\n\n----------------------------------------\n\nTITLE: After Migration: Updated GitLab-CI Include Fragment - YAML\nDESCRIPTION: This YAML snippet shows the result of running Renovate with the provided regex manager, updating the dependency path in the GitLab-CI include fragment to a new value ('pipeline-solutions/gitlab/fragments/docker-lint') with an incremented ref value. The 'project', 'ref', and 'file' fields remain, but the 'project' path and 'ref' version reflect the change. Inputs are YAML fragments from CI config; output is a migrated YAML fragment retaining original keys.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/custom/regex/readme.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n- project: 'pipeline-solutions/gitlab/fragments/docker-lint'\n  ref: 2-4-1\n  file: 'ci-include-docker-lint-base.yml'\n```\n\n----------------------------------------\n\nTITLE: Setting Replacement Version Template (Major Only) in Renovate - JSON\nDESCRIPTION: Demonstrates how to use 'replacementVersionTemplate' to extract and substitute the major version number from the current version in package updates. Dependencies: Renovate config using Handlebars expression within 'replacementVersionTemplate'. Parameter: Template string with 'lookup' and 'split'. Input is a JSON package rule; effect is automatic remapping of version numbers.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_127\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"packageRules\\\": [\\n    {\\n      \\\"matchPackageNames\\\": [\\\"dummy\\\"],\\n      \\\"replacementVersionTemplate\\\": \\\"{{ lookup (split currentValue '.') 0 }}\\\"\\n    }\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying OR Conditions for Conan Package Versions\nDESCRIPTION: This syntax allows combining multiple version conditions using an OR operator (`||`). Conan will accept versions matching any of the specified conditions.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/versioning/conan/readme.md#_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n`[>1.1 || 0.8]`\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n`[1.2.7 || >=1.2.9 <2.0.0]`\n```\n\n----------------------------------------\n\nTITLE: Defining Registry Aliases for Helm Chart References - Renovate - JSON\nDESCRIPTION: This JSON snippet defines the registryAliases object for configuring Helm chart repository aliases in Renovate. It maps the alias 'stable' to the official Helm stable charts URI, enabling Renovate's helm-requirements manager to correctly locate and update Helm Chart references. No external dependencies are required for the snippet itself, but it must be included in Renovate's configuration file for actual use. The expected input is a JSON object with string keys as aliases and string values as valid URIs; improper formatting of URIs may cause resolution errors.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/helm-requirements/readme.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"registryAliases\": {\n    \"stable\": \"https://charts.helm.sh/stable\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Helm Chart.yaml with Image Metadata Comment\nDESCRIPTION: Provides a sample Helm `Chart.yaml` file. It includes a comment (`# renovate: image=...`) that specifies the Docker image corresponding to the `appVersion` property, intended for use with a Renovate regex custom manager to keep the version synchronized with Docker tags.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/custom/regex/readme.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\napiVersion: v2\nname: amazon-eks-pod-identity-webhook\ndescription: A Kubernetes webhook for pods that need AWS IAM access\nversion: 1.0.3\ntype: application\n# renovate: image=amazon/amazon-eks-pod-identity-webhook\nappVersion: 'v0.4.0'\n```\n```\n\n----------------------------------------\n\nTITLE: Declaring a Private Composer VCS Repository in composer.json - JSON\nDESCRIPTION: Defines a private Composer VCS repository by specifying the 'type' as 'vcs' and providing a HTTPS URL. This enables Composer to pull packages from a non-Packagist/private Git source. No external dependencies are required other than the standard Composer tooling. The 'repositories' array is the key parameter, and each entry should list the repository details. Input: JSON with 'repositories' block. Output: Composer will use this VCS source for dependencies.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/getting-started/private-packages.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"repositories\": [\n    {\n      \"type\": \"vcs\",\n      \"url\": \"https://github.com/organization/private-repository\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Define Puppet Module from Git Repository Using Ref in Ruby Puppetfile\nDESCRIPTION: Illustrates defining a Puppet module sourced from a Git repository using a specific Git reference ('stable_version') via the `:ref` parameter. The `:ref` parameter can point to a branch name, tag, or commit SHA. Renovate will update the dependency based on changes to this reference if it's a branch or tag.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/puppet/readme.md#_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nmod 'example/samba',\n    :git => 'https://github.com/example/puppet-samba',\n    :ref => 'stable_version'\n```\n\n----------------------------------------\n\nTITLE: Setting Renovate Boolean Options via Command-Line Interface (Bash)\nDESCRIPTION: Demonstrates the correct (`--onboarding=true`) and incorrect (`--onboarding`) ways to set boolean flags via CLI. A value (`=true` or `=false`) must always be provided. Using the `=` notation is preferred over space separation (`--onboarding true`).\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/config-overview.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n--onboarding=true\n```\n\nLANGUAGE: bash\nCODE:\n```\n--onboarding\n```\n\nLANGUAGE: bash\nCODE:\n```\n--onboarding true\n```\n\n----------------------------------------\n\nTITLE: Initializing Maven Extension in Bazel\nDESCRIPTION: This snippet demonstrates how to initialize the Maven extension from `rules_jvm_external` within a Bazel MODULE.bazel file. The extension is assigned to the variable `maven`. Renovate's `bazel-module` manager recognizes variables named `maven*` for updating Maven dependencies.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/bazel-module/readme.md#_snippet_0\n\nLANGUAGE: bazel\nCODE:\n```\nmaven = use_extension(\"@rules_jvm_external//:extensions.bzl\", \"maven\")\n```\n\n----------------------------------------\n\nTITLE: Overriding depName Using Template Compilation in Renovate - JSON\nDESCRIPTION: Illustrates usage of 'overrideDepName', which supports template compilation, for customizing the displayed dependency name in PR titles and branch names. Dependencies: 'packageRules' with 'matchDatasources' and 'overrideDepName' fields in Renovate config. Key parameters include the Handlebars template string. Input is a JSON config fragment; expected effect is dynamic calculation of PR naming.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_122\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"packageRules\\\": [\\n    {\\n      \\\"matchDatasources\\\": [\\\"docker\\\"],\\n      \\\"overrideDepName\\\": \\\"{{replace 'docker.io/library/' '' depName}}\\\"\\n    }\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Base Image with Platform and Stage Alias - Dockerfile\nDESCRIPTION: This Dockerfile snippet uses advanced FROM flags, specifying both a target platform (linux/amd64) and assigning an alias (installer) for multi-stage builds. Dependencies include Docker with support for multi-architecture builds. Inputs are the image node:20.9.0 and the platform flag. The output is an aliased build stage, which can be used in later build steps.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/dockerfile/readme.md#_snippet_1\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM --platform=linux/amd64 node:20.9.0 AS installer\n```\n\n----------------------------------------\n\nTITLE: Custom JSONata Manager Example: Extracting Dependencies from packages Array - JSON\nDESCRIPTION: This snippet configures 'matchStrings' to use a JSONata query for extracting 'depName' and 'currentValue' from a packages array. This is intended for use with Renovate's jsonata manager, and requires that the source JSON file is structured as an array of packages with name and version keys. Inputs: compliant JSON file; Outputs: dependency objects.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"matchStrings\\\": [\\n    \\\"packages.{ \\\\\\\"depName\\\\\\\": package, \\\\\\\"currentValue\\\\\\\": version }\\\"\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Image in RUN --mount Directive - Dockerfile\nDESCRIPTION: This snippet demonstrates support for using images with the RUN --mount=from syntax, such as retrieving utilities from ghcr.io/astral-sh/uv:0.5. Dependencies include Docker BuildKit and access to the specified image, with /uv mounted to /bin/uv. The input is a Python base image and an external utility image; the output is a virtual environment set up via the uv tool.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/dockerfile/readme.md#_snippet_4\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM python:3.12\nRUN --mount=from=ghcr.io/astral-sh/uv:0.5,source=/uv,target=/bin/uv \\\n    uv venv\n```\n\n----------------------------------------\n\nTITLE: Providing npmToken in Renovate Config for npmjs.org - JSON\nDESCRIPTION: Sets the 'npmToken' field directly in Renovate config for use with the main npmjs registry. The value is the plaintext authentication token. No external dependencies are required. Input: JSON with npmToken field. Output: Renovate uses this token for npmjs.org operations. Limitations: For plaintext tokens only; not encrypted.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/getting-started/private-packages.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"npmToken\": \"abcdefghi-1234-jklmno-aac6-12345567889\"\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Strict Equality Checks with 'equals' Helper (Handlebars)\nDESCRIPTION: Explains the `equals` helper, which returns true if two values are strictly equal (`===`). Useful for conditional logic based on specific values, like checking if the `datasource` variable is exactly 'git-refs'.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/templates.md#_snippet_7\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#if (equals datasource 'git-refs')}}git-refs{{else}}Other{{/if}}\n```\n\n----------------------------------------\n\nTITLE: Example Dockerfile with Version Variable for Regex Management\nDESCRIPTION: Provides a sample Dockerfile defining an environment variable `YARN_VERSION`, which serves as an example target for Renovate's regex custom manager to extract and update. This illustrates a common scenario where regex managers are needed.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/custom/regex/readme.md#_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\n```Dockerfile title=\"Example Dockerfile\"\nFROM node:12\nENV YARN_VERSION=1.19.1\nRUN curl -o- -L https://yarnpkg.com/install.sh | bash -s -- --version ${YARN_VERSION}\n```\n```\n\n----------------------------------------\n\nTITLE: Installing npm Package with Default Settings\nDESCRIPTION: Demonstrates the command used to install an npm package (`foobar`). By default, npm adds the package to `package.json` using a caret (`^`) SemVer range.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/dependency-pinning.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install foobar\n```\n\n----------------------------------------\n\nTITLE: Referencing Removed navigator.onLine Global in Jest/JSDOM\nDESCRIPTION: Notes the removal of the `navigator.onLine` global property from the default jsdom environment in Jest 0.7.0. Tests should now set `window.navigator.onLine` directly if needed.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/workers/repository/update/pr/changelog/__fixtures__/jest.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nnavigator.onLine\n```\n\n----------------------------------------\n\nTITLE: Setting GitHub App Username in config.js (JavaScript)\nDESCRIPTION: Optionally configures the username associated with the GitHub App in `config.js`. This should be the app's slug name with `[bot]` appended (e.g., `self-hosted-renovate[bot]`). If not supplied, Renovate attempts to autodetect it.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/platform/github/readme.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nusername:\"self-hosted-renovate[bot]\"\n```\n\n----------------------------------------\n\nTITLE: Example Azure Pipelines Definition (YAML)\nDESCRIPTION: This YAML snippet provides an example Azure Pipelines definition showing structures that Renovate can update. It includes `resources` (repositories with refs, containers with image tags/digests) and `steps` containing versioned tasks (`Bash@3`). Renovate can manage dependencies within these blocks.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/azure-pipelines/readme.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n  repositories:\n    - type: github\n      name: renovate/renovate\n      ref: refs/heads/main\n    - type: github\n      name: user/repo\n      ref: refs/tags/v0.5.1\n  containers:\n    - container: linux\n      image: ubuntu:24.04\n    - container: python\n      image: python:3.13@sha256:34dc8eb488136014caf530ec03a3a2403473a92d67a01a26256c365b5b2fc0d4\n\nstages:\n  - stage: StageOne\n    jobs:\n      - job: JobOne\n        steps:\n          - task: Bash@3\n            inputs:\n              script: 'echo Hello World'\n```\n\n----------------------------------------\n\nTITLE: Initializing OCI Extension for Docker Images in Bazel\nDESCRIPTION: This snippet demonstrates initializing the OCI extension from `rules_oci` within a Bazel MODULE.bazel file. The extension must be assigned specifically to the variable named `oci` for Renovate's `bazel-module` manager to recognize it for updating OCI/Docker images.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/bazel-module/readme.md#_snippet_3\n\nLANGUAGE: bazel\nCODE:\n```\noci = use_extension(\"@rules_oci//oci:extensions.bzl\", \"oci\")\n```\n\n----------------------------------------\n\nTITLE: Splitting Strings into Arrays with 'split' Helper (Handlebars)\nDESCRIPTION: Demonstrates the `split` helper, which splits a string (e.g., `packageName`) by a delimiter ('-') into an array of substrings. The example shows how to access a specific element (index 1, the second part) of the resulting array using the built-in `lookup` helper.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/templates.md#_snippet_13\n\nLANGUAGE: handlebars\nCODE:\n```\n{{ lookup (split packageName '-') 1 }}\n```\n\n----------------------------------------\n\nTITLE: Renovate Configuration Option: automergeType\nDESCRIPTION: Refers to the `automergeType` configuration option, used alongside `automerge`. The example context mentions using `branch` as the type for automatically merging Git submodule update branches.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/getting-started/use-cases.md#_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n`automergeType`\n```\n\n----------------------------------------\n\nTITLE: Listing and Rebasing Renovate PRs in Markdown\nDESCRIPTION: This snippet shows a Markdown checklist of open PRs with associated rebase triggers using HTML comments. Each PR is presented as a list item with a link, optional dependency annotations, and special comments (e.g., <!-- rebase-branch=branchName1 -->) used by Renovate to automate PR management. The snippet enables users to select which PRs to rebase or retry and includes a global rebase-all option. There are no required dependencies, and the input consists of PR references with potential dependency names. The output is a dynamic checklist; HTML comments may be interpreted by tooling but remain invisible in rendered Markdown.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/workers/repository/__fixtures__/dependency-dashboard-with-3-PR-in-progress.txt#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n- [ ] <!-- rebase-branch=branchName1 -->[pr1](../pull/1)\n- [ ] <!-- rebase-branch=branchName2 -->[pr2](../pull/2) (`dep2`, `dep3`)\n- [ ] <!-- rebase-branch=branchName3 -->[pr3](../pull/3)\n- [ ] <!-- rebase-all-open-prs -->**Click on this checkbox to rebase all open PRs at once**\n```\n\n----------------------------------------\n\nTITLE: Setting NuGet v3 Protocol Version in Renovate JSON via URL Fragment\nDESCRIPTION: This JSON snippet illustrates how to configure a NuGet feed in `renovate.json` and explicitly specify the v3 protocol version by appending `#protocolVersion=3` to the registry URL. This method is used when the feed URL doesn't end in `index.json` and configuration is done within Renovate's settings instead of `NuGet.config`.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/nuget.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchDatasources\": [\"nuget\"],\n      \"registryUrls\": [\"https://example1.com/nuget/#protocolVersion=3\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Supported `depTypes` for Pipenv - Markdown\nDESCRIPTION: This Markdown snippet documents the default dependency type groups supported by Renovate when managing Pipenv dependencies, explicitly listing `packages` and `dev-packages` as primary categories. It may be used in contributing guides or technical documentation to inform users or maintainers about expected configuration and handling. No executable dependencies or code are present, and input/output is limited to informational content.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/pipenv/readme.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n- `packages`\n- `dev-packages`\n```\n\n----------------------------------------\n\nTITLE: Configuring Merge Confidence Datasources with JavaScript\nDESCRIPTION: This snippet shows how to configure the Renovate bot to query merge-confidence data only for specific datasources, such as 'npm'. The 'mergeConfidenceDatasources' key is set in the exported object array, which limits the API queries accordingly. It requires that you have an access token for Mend's Merge Confidence API. The value should be an array of supported datasource names. The expected input is an array of strings; no output is produced except for changing Renovate behavior at runtime.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/self-hosted-configuration.md#_snippet_26\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodules.exports = {\n  mergeConfidenceDatasources: ['npm'],\n};\n```\n\n----------------------------------------\n\nTITLE: Illustrating Plain Text Input for Renovate Custom Datasource (Plain Text)\nDESCRIPTION: Provides an example of a simple, newline-separated list of versions returned by an HTTP endpoint. This represents the raw response body when the `plain` format is specified for a Renovate custom datasource before Renovate converts it to JSON.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/custom/readme.md#_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n1.0.0\n2.0.0\n3.0.0\n```\n\n----------------------------------------\n\nTITLE: Setting Renovate Platform via Environment Variable (Bash)\nDESCRIPTION: Global configuration options like the target platform can be set using environment variables prefixed with `RENOVATE_`. This example sets the platform to GitLab. This is equivalent to setting `\"platform\": \"gitlab\"` in a config file.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/config-overview.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nRENOVATE_PLATFORM=gitlab\n```\n\n----------------------------------------\n\nTITLE: Disabling Commit Scope - Renovate JSON\nDESCRIPTION: Removes the semantic commit scope from Renovate commit messages by adding ':semanticCommitScopeDisabled' to the 'extends' array. This results in commit messages like 'chore:' with no scope. Used within the Renovate JSON configuration, and requires no other dependencies.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/semantic-commits.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": [\":semanticCommitScopeDisabled\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Enforcing Strict Semantic Versioning in Conan Ranges\nDESCRIPTION: This syntax enforces strict Semantic Versioning by setting `loose=False`. Versions that do not strictly adhere to the SemVer format (e.g., `1.2.3.4`) will not be accepted.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/versioning/conan/readme.md#_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n`[~1.2.3, loose=False]`\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Base and Cache Directories in JSON\nDESCRIPTION: This JSON configuration demonstrates how to use the `baseDir` and `cacheDir` options to specify custom directories for storing repository data and cache data, respectively, overriding Renovate's default temporary directory usage.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/self-hosted-configuration.md#_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"baseDir\": \"/my-own-different-temporary-folder\",\n  \"cacheDir\": \"/my-own-different-cache-folder\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example File Content Matching Regex Manager Configuration\nDESCRIPTION: Presents sample content for a file targeted by the preceding Renovate JSON5 configuration. It demonstrates the expected comment format (`# renovate: datasource=... depName=...`) that the `matchStrings` regex patterns are designed to parse for dependency information.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/custom/regex/readme.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n```text title=\"Example of how the file-you-want-to-match could look like\"\n# renovate: datasource=github-tags depName=org/repo versioning=loose\nsomething:4.7.2    something-else:4.7.2\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring fileMatch for Renovate ocb Manager (JSON)\nDESCRIPTION: This JSON snippet shows an example Renovate configuration for the `ocb` (OpenTelemetry Collector Builder) manager. It specifies a `fileMatch` pattern using a regular expression `builder.ya?ml$` to target files named `builder.yaml` or `builder.yml`. Explicitly defining `fileMatch` is required for the `ocb` manager as it lacks a default pattern.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/ocb/readme.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ocb\": {\n    \"fileMatch\": [\"builder.ya?ml$\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying GitHub API for GitHub App User ID (HTTP)\nDESCRIPTION: Provides example GitHub API endpoints to retrieve user details for a GitHub App, including its numeric user ID. This ID is necessary for constructing the `gitAuthor` string when configuring Renovate to run as a GitHub App. Replace `self-hosted-renovate[bot]` and potentially the domain for GHE.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/platform/github/readme.md#_snippet_12\n\nLANGUAGE: http\nCODE:\n```\napi.github.com/users/self-hosted-renovate[bot]\n```\n\nLANGUAGE: http\nCODE:\n```\ngithub.enterprise.com/api/v3/users/self-hosted-renovate[bot]\n```\n\n----------------------------------------\n\nTITLE: Defining Module File Extensions in Jest Configuration\nDESCRIPTION: Refers to the `moduleFileExtensions` configuration option in Jest, used to specify which file extensions Jest should recognize. Version 0.8.0 updated the defaults for this option.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/workers/repository/update/pr/changelog/__fixtures__/jest.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\nmoduleFileExtensions\n```\n\n----------------------------------------\n\nTITLE: Customizing Renovate Environment Variable Prefix (Shell)\nDESCRIPTION: Explains how to change the default `RENOVATE_` prefix for environment variables using the `ENV_PREFIX` variable. In this example, the prefix is changed to `RNV_`, so the token is set using `RNV_TOKEN` when invoking the `renovate` command. This allows avoiding potential conflicts with other environment variables.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/getting-started/running.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nENV_PREFIX=RNV_ RNV_TOKEN=abc123 renovate\n```\n\n----------------------------------------\n\nTITLE: Yarn 2+ npmRegistries - No Registry Set - YAML\nDESCRIPTION: Illustrates the .yarnrc.yml npmRegistries config when no registry is set. Key: the registry key is protocol-less and the token is provided as 'npmAuthToken'. When Renovate updates npmRegistries, it injects the decrypted PAT. This snippet is for illustrative purposes and is not directly part of Renovate config, but shows intended file output.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/getting-started/private-packages.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nnpmRegistries:\n  //npm.pkg.github.com/:\n    npmAuthToken: <Decrypted PAT Token>\n```\n\n----------------------------------------\n\nTITLE: Example Dockerfile Ubuntu Codename Upgrade by Renovate (Diff)\nDESCRIPTION: Illustrates how Renovate proposes an upgrade for an Ubuntu base image in a Dockerfile. It shows the change from one LTS release codename (`jammy`) to the next available LTS release (`noble`), demonstrating Renovate's understanding of Ubuntu release cycles.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/docker.md#_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n- FROM ubuntu:jammy\n+ FROM ubuntu:noble\n```\n\n----------------------------------------\n\nTITLE: Setting JSON Log Format for Self-Hosted Renovate (Shell)\nDESCRIPTION: Sets the `LOG_FORMAT` environment variable to `json` before invoking Renovate. This changes the log output format from human-readable text to JSON, which facilitates reliable parsing and filtering, especially when logs are processed by external log services in self-hosted setups. This variable should be set in the execution environment.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/troubleshooting.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nLOG_FORMAT=json\n```\n\n----------------------------------------\n\nTITLE: Encoding Strings to Base64 with 'encodeBase64' Helper (Handlebars)\nDESCRIPTION: Illustrates how to use the `encodeBase64` helper to convert a given string (e.g., the value of `body`) into its Base64 representation within a Renovate template.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/templates.md#_snippet_5\n\nLANGUAGE: handlebars\nCODE:\n```\n{{{encodeBase64 body}}}\n```\n\n----------------------------------------\n\nTITLE: Triggering Renovate Rebase for Specific PR Branch (HTML/Markdown)\nDESCRIPTION: This HTML comment, embedded in a Markdown checkbox list item, instructs the Renovate bot to rebase the pull request associated with the specified branch (e.g., `branchName1`, `renovate/docker-renovate-renovate-16.x`). This command is used to update an open PR or to discard manual edits and restart an edited/blocked PR. Clicking the associated checkbox triggers the rebase.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/platform/utils/__fixtures__/issue-body.txt#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- rebase-branch=branchName1 -->\n```\n\nLANGUAGE: html\nCODE:\n```\n<!-- rebase-branch=branchName2 -->\n```\n\nLANGUAGE: html\nCODE:\n```\n<!-- rebase-branch=branchName3 -->\n```\n\nLANGUAGE: html\nCODE:\n```\n<!-- rebase-branch=renovate/docker-renovate-renovate-16.x -->\n```\n\n----------------------------------------\n\nTITLE: Disabling Merge Confidence Badges in Renovate Configuration (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to disable the Merge Confidence badges for users of the Mend Renovate App (where they are enabled by default). It achieves this by adding the `mergeConfidence:all-badges` preset to the `ignorePresets` array within the Renovate configuration file, effectively preventing the default badge preset from being applied.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/merge-confidence.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ignorePresets\": [\"mergeConfidence:all-badges\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering Branch Recreation for Blocked PR (HTML Comment)\nDESCRIPTION: This HTML comment is embedded within a Markdown list item in a Renovate Dependency Dashboard issue. It contains the `recreate-branch` directive followed by the branch name (`branchName1`). When the corresponding checkbox is checked by a user, Renovate interprets this comment to recreate the specified branch associated with the blocked pull request (`pr1`).\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/workers/repository/__fixtures__/dependency-dashboard-with-2-PR-closed-ignored.txt#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- recreate-branch=branchName1 -->\n```\n\n----------------------------------------\n\nTITLE: Defining a Nix Flake Input URL in Nix\nDESCRIPTION: This Nix configuration snippet shows how to define an input within a `flake.nix` file. It assigns a specific GitHub repository URL (NixOS/nixpkgs at the nixos-unstable branch) to the `nixpkgs` input. This example is used to illustrate how Renovate derives the `depName` as 'nixpkgs' and the `packageName` as 'https://github.com/NixOS/nixpkgs' for its dependency update processing and rule matching.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/nix/readme.md#_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\nnix.inputs.nixpkgs.url = \"github:NixOS/nixpkgs/nixos-unstable\";\n```\n\n----------------------------------------\n\nTITLE: Specifying Git Authors Ignored by Renovate - JSON Configuration\nDESCRIPTION: This snippet allows users to specify one or more commit authors to be ignored by Renovate for modification detection. The 'gitIgnoredAuthors' array accepts RFC5322-compliant email strings, making Renovate treat PRs with these authors as unmodified. Required context is a Renovate JSON config file; key parameter is a string or list of author identifiers. Input is JSON; output is altered PR modification detection.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_50\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"gitIgnoredAuthors\": [\"some-bot@example.org\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Example Grafana Helm Chart Values for Renovate Dashboard Tracking (YAML)\nDESCRIPTION: Shows a snippet from a Grafana Helm chart's `values.yaml` file illustrating how dashboards are defined. It includes the `# renovate:` comment directives (specifying `depName`) and the `gnetId`/`revision` fields that the corresponding custom regex manager targets to enable automated updates of dashboard revisions via Renovate, using the Grafana API datasource.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/custom/readme.md#_snippet_14\n\nLANGUAGE: yml\nCODE:\n```\ndashboards:\n  default:\n    1860-node-exporter-full:\n      # renovate: depName=\"Node Exporter Full\"\n      gnetId: 1860\n      revision: 31\n      datasource: Prometheus\n    15760-kubernetes-views-pods:\n      # renovate: depName=\"Kubernetes / Views / Pods\"\n      gnetId: 15760\n      revision: 20\n      datasource: Prometheus\n```\n\n----------------------------------------\n\nTITLE: JSONata Query: Extract Dependencies from All Nodes - Query\nDESCRIPTION: Query flattens and extracts dependencies from all top-level environment nodes. Maps each entry's 'package' to 'depName' and 'version' to 'currentValue'. Used with Renovate to process all environments together. Input: multi-environment JSON; Output: flat list of dependency objects.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/custom/jsonata/readme.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n*.{ \"depName\": package, \"currentValue\": version }\n```\n\n----------------------------------------\n\nTITLE: Visualizing Renovate Bot Execution Flow with Mermaid\nDESCRIPTION: This Mermaid diagram uses a top-to-bottom flowchart (`flowchart TB`) to depict the execution flow of the Renovate bot. It details the initial setup (`Start` subgraph), the per-repository processing loop (`Repository` subgraph), including initialization (`initializeRepository` subgraph), dependency extraction (`extractDependencies` subgraph), and updating (`updateRepository` subgraph). Key steps like configuration loading, API initialization, dependency management, and pull request creation are visually represented.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/development/assets/renovate-flow.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\n```mermaid\nflowchart TB\n    subgraph Start\n    A[lib/renovate.ts] --> B[getConfig ordered by priority useBaseBranchConfig > Cli > ENV > file > default]\n    A --> C[global initialize]\n    A --> D[init platform]\n    A --> E[set and ensure dir]\n    A --> F[init cache limit commits]\n    A --> G[init host rules]\n    A --> H[validations]\n    A --> I[auto discover repositories]\n    end\n\n    subgraph Repository\n    J[workers/repository/index.ts, for each repository]\n    J --> K[initRepo]\n    J --> L[extractDependencies]\n    J --> M[ensureOnboardingPr]\n    J --> N[updateRepository]\n    J --> O[finalize repository]\n    end\n\n    subgraph initializeRepository\n    X[initRepo]\n    X--> P[InitializeConfig]\n    X--> Q[InitializeCaches]\n    X--> R[initApis]\n    X--> S[getRepoConfig]\n    X--> T[checkIfConfigured]\n    X--> U[applySecretsToConfig]\n    X--> V[setUserRepoConfig]\n    X--> W[detectVulnerabilityAlerts]\n    end\n\n    subgraph extractDependencies\n    Z[repository/process/index.ts]\n    Z --> AA[read dashboard body, put it into config]\n    Z --> QM{if config.basebranches exists}\n    QM --> |yes| AB[for each config.basebranches]\n    AB --> AC[getBaseBranch and extract all dependencies from managers]\n    AB --> AD[getBaseBranch and lookup new dependency versions]\n    QM --> |no| AE[extract and lookup]\n    end\n\n    subgraph updateRepository\n    BA[repository/process/write.ts]\n    BA--> BB[for each update branch]\n    BB --> BC[process branch]\n    BC --> BD[do all validation]\n    BC --> BF[schedules]\n    BC --> BG[updates]\n    BC --> BH[ensurePR]\n    end\n\n    Start ---> Repository\n    K ---> initializeRepository\n    L ----> extractDependencies\n    N -----> updateRepository\n```\n```\n\n----------------------------------------\n\nTITLE: Declaring Single-Purpose Functions - TypeScript\nDESCRIPTION: Illustrates the value of writing single-purpose functions by showing both monolithic and decomposed styles. Encourages breaking down functionality into separate, testable units. No special dependencies; assumes standard TypeScript. Inputs and outputs are function calls and their results; encourages refactoring large functions into smaller ones for improved testability.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/development/best-practices.md#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nfunction caller() {\n  // ..code..\n  calculateUpdateAndPrint(data)\n  // ..code..\n}\n\nfunction calculateUpdateAndPrint(...) { /* code */ }\n```\n\nLANGUAGE: ts\nCODE:\n```\nfunction caller() {\n    // code..\n    const res = calculate(data);\n    update(res);\n    print(res);\n    // code..\n}\n\nfunction calculate(...) { /* code */ }\nfunction update(...)    { /* code */ }\nfunction print(...)     { /* code */ }\n```\n\n----------------------------------------\n\nTITLE: Specifying Exact Conan Package Version\nDESCRIPTION: This syntax specifies an exact package version. Conan will only use this specific version.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/versioning/conan/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n`5.45`\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n`16.00`\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n`2.8.3`\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n`[2.8]`\n```\n\n----------------------------------------\n\nTITLE: Editing GPG Key Preferences to Disable AEAD (Bash)\nDESCRIPTION: Illustrates the commands and output for editing an existing PGP key's preferences using `gpg --edit-key`. This specific example shows disabling AEAD preferences (`setpref AES256 AES192 AES 3DES SHA512 SHA384 SHA256 SHA224 SHA1 ZLIB BZIP2 ZIP`) to ensure compatibility with Renovate's decryption mechanism when the key was generated with GnuPG v2.4 or newer. The changes are saved using the `save` command within the GPG prompt.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/self-hosted-configuration.md#_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\n❯ gpg --edit-key renovate@whitesourcesoftware.com\ngpg> showpref\n[ultimate] (1). Renovate Bot <renovate@whitesourcesoftware.com>\n     Cipher: AES256, AES192, AES, 3DES\n     AEAD: OCB, EAX\n     Digest: SHA512, SHA384, SHA256, SHA224, SHA1\n     Compression: ZLIB, BZIP2, ZIP, Uncompressed\n     Features: MDC, AEAD, Keyserver no-modify\n\ngpg> setpref AES256 AES192 AES 3DES SHA512 SHA384 SHA256 SHA224 SHA1 ZLIB BZIP2 ZIP\nSet preference list to:\n     Cipher: AES256, AES192, AES, 3DES\n     AEAD: \n     Digest: SHA512, SHA384, SHA256, SHA224, SHA1\n     Compression: ZLIB, BZIP2, ZIP, Uncompressed\n     Features: MDC, Keyserver no-modify\nReally update the preferences? (y/N) y\ngpg> save\n```\n\n----------------------------------------\n\nTITLE: Displaying Config Migration PR Link in Dashboard Text\nDESCRIPTION: This snippet illustrates the text shown in the Renovate Dependency Dashboard after a user has checked the migration box and Renovate has successfully created the corresponding configuration migration Pull Request. It replaces the checkbox with a direct link to the generated PR.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/config-migration.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n```\nSee Config Migration PR: #1.\n```\n```\n\n----------------------------------------\n\nTITLE: JSONata Query: Split Dependency String per Entry - Query\nDESCRIPTION: JSONata query splits each string in the 'packages' array at '@', mapping the first part to 'depName' and the second to 'currentVersion'. Assumes all strings conform to the 'name@version' pattern. Used to extract dependencies for Renovate; format deviations may cause extraction failures.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/custom/jsonata/readme.md#_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n$map($map(packages, function ($v) { $split($v, \"@\") }), function ($v) { { \"depName\": $v[0], \"currentVersion\": $v[1] } })\n```\n\n----------------------------------------\n\nTITLE: Defining Complete Expected JSON Output for Renovate Custom Datasource (JSON)\nDESCRIPTION: Shows the comprehensive JSON structure that a Renovate custom datasource can output after transformation, including optional fields like deprecation status (`isDeprecated`), timestamps (`releaseTimestamp`), changelogs (`changelogUrl`), source URLs/directories, digests, and stability flags (`isStable`).\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/custom/readme.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"releases\": [\n    {\n      \"version\": \"v1.0.0\",\n      \"isDeprecated\": true,\n      \"releaseTimestamp\": \"2022-12-24T18:21Z\",\n      \"changelogUrl\": \"https://github.com/demo-org/demo/blob/main/CHANGELOG.md#v0710\",\n      \"sourceUrl\": \"https://github.com/demo-org/demo\",\n      \"sourceDirectory\": \"monorepo/folder\",\n      \"digest\": \"c667f758f9e46e1d8111698e8d3a181c0b10f430\",\n      \"isStable\": true\n    }\n  ],\n  \"sourceUrl\": \"https://github.com/demo-org/demo\",\n  \"sourceDirectory\": \"monorepo/folder\",\n  \"changelogUrl\": \"https://github.com/demo-org/demo/blob/main/CHANGELOG.md\",\n  \"homepage\": \"https://demo.org\"\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering Renovate PR Creation for Rate-Limited Branch (HTML/Markdown)\nDESCRIPTION: This HTML comment, embedded in a Markdown checkbox list item, instructs the Renovate bot to immediately create a pull request for the specified dependency update branch (e.g., `renovate/ansi-regex-6.x`, `renovate/commander-10.x`). This bypasses any active rate limits. Clicking the associated checkbox triggers this action.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/platform/utils/__fixtures__/issue-body.txt#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- unlimit-branch=renovate/ansi-regex-6.x -->\n```\n\nLANGUAGE: html\nCODE:\n```\n<!-- unlimit-branch=renovate/commander-10.x -->\n```\n\nLANGUAGE: html\nCODE:\n```\n<!-- unlimit-branch=renovate/graceful-fs-4.x -->\n```\n\n----------------------------------------\n\nTITLE: Illustrating Invalid Wildcard Combination in JSON Configuration\nDESCRIPTION: Shows an invalid Renovate configuration where the `*` wildcard, meaning 'match everything', is incorrectly combined with another positive match (`\"ABC\"`) within the `allowedEnv` array. Renovate explicitly disallows combining the `*` wildcard with other positive or negative matches.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/string-pattern-matching.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n```json title=\"Example of invalid wildcard use with additional match\"\n{\n  \"allowedEnv\": [\"*\", \"ABC\"]\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Dependency Versions in Custom JSON Source - JSON\nDESCRIPTION: This snippet provides an example of a JSON file (versiontracker.json) that lists available versions for a specific software ('something'). Renovate can use this file via a custom datasource to determine which versions are available when an API is not present. The file contains an array of objects; each object must have a 'version' key representing an available version number. No dependencies are needed other than making this file accessible via HTTP(S) or file system.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/custom/readme.md#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"version\": \"77\"\n  },\n  {\n    \"version\": \"76\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: JSONata Query: Extract All from YAML Single Node - Query\nDESCRIPTION: A JSONata query for YAML or JSON files to extract dependency data from array under 'packages'. Maps 'package' and 'version'. Plug into Renovate for parsed YAML input.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/custom/jsonata/readme.md#_snippet_13\n\nLANGUAGE: text\nCODE:\n```\npackages.{ \"depName\": package, \"currentValue\": version }\n```\n\n----------------------------------------\n\nTITLE: Running Renovate with OpenTelemetry Exporting (Shell)\nDESCRIPTION: Executes the Renovate Docker container, configuring it to send OpenTelemetry data. It connects the container to the same network as the collector (`renovate-otel-demo_default`), sets the OTLP endpoint environment variable (`OTEL_EXPORTER_OTLP_ENDPOINT`) to the collector's HTTP address, mounts the user's `config.js` file, and removes the container after execution (`--rm`).\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/examples/opentelemetry.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndocker run \\\n  --rm \\\n  --network renovate-otel-demo_default \\\n  -e OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318 \\\n  -v \"/path/to/your/config.js:/usr/src/app/config.js\" \\\n  renovate/renovate:latest\n```\n\n----------------------------------------\n\nTITLE: Extracting All Dependencies Across Nodes using JSONata - JSON\nDESCRIPTION: Displays a JSON input where dependencies exist in both 'production' and 'development'. This structure illustrates cases for extracting dependencies from all environment nodes as one list. No dependencies aside from JSONata/Renovate use case.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/custom/jsonata/readme.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"production\": [\n    {\n      \"version\": \"1.2.3\",\n      \"package\": \"foo\"\n    }\n  ],\n  \"development\": [\n    {\n      \"version\": \"4.5.6\",\n      \"package\": \"bar\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting All Dependencies From Single Node Array - YAML\nDESCRIPTION: Demonstrates a YAML structure where packages are listed under a single 'packages' node. Suitable for YAML-based dependency files; the corresponding JSONata query extracts all dependencies. Used in Renovate customManagers for YAML support.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/custom/jsonata/readme.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\npackages:\n  - version: 1.2.3\n    package: foo\n```\n\n----------------------------------------\n\nTITLE: Running Custom Action to Update AUR Package Files in GitHub Actions YAML\nDESCRIPTION: This GitHub Actions step conditionally executes a local custom action (`./.github/actions/aur`) if a modified package directory (`env.pkgbuild`) was found. It invokes the `updpkgsums` functionality within the custom action, which typically runs `updpkgsums` and `makepkg --printsrcinfo`, targeting the specific package identified in the previous step.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/user-stories/maintaining-aur-packages-with-renovate.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Validate package\n  if: ${{ env.pkgbuild != '' }}\n  uses: ./.github/actions/aur\n  with:\n    action: 'updpkgsums'\n    pkgname: ${{ env.pkgbuild }}\n```\n\n----------------------------------------\n\nTITLE: Example Ansible Variable File for Combination Strategy in Renovate (YAML)\nDESCRIPTION: This YAML snippet contains variable definitions for two dependencies, each split across name and version lines, and annotated with comments. Used as input for Renovate's combination strategy, where the config combines related values on different lines. Designed for customManagers targeting Ansible or similar YAML-based deployment definitions. Each pair (prometheus/thanos) forms one dependency after parsing.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\nprometheus_image: \"prom/prometheus\"  // a comment\nprometheus_version: \"v2.21.0\" // a comment\n------\nthanos_image: \"prom/prometheus\"  // a comment\nthanos_version: \"0.15.0\" // a comment\n```\n\n----------------------------------------\n\nTITLE: Enabling Insecure Docker Registry Connections in Renovate (JSON)\nDESCRIPTION: Configures Renovate within `hostRules` to connect to a specified Docker registry (`reg.insecure.com`) via HTTP, bypassing the default HTTPS requirement. This setting is explicitly marked as insecure and should be used with caution.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_67\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hostRules\": [\n    {\n      \"matchHost\": \"reg.insecure.com\",\n      \"insecureRegistry\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Fixture Data Using the Fixture Utility in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the Fixture utility class in TypeScript to load test fixture data from files, supporting string, JSON, and binary formats. Requires that the Fixture class is available in the execution context. Key methods shown are Fixture.get for raw string, Fixture.getJson for parsed JSON objects, and Fixture.getBinary for binary data buffers. These methods are typically used in automated test setups where consistent fixture data is needed as input or expected output.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/development/best-practices.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nFixture.get('./file.json'); // for loading string data\nFixture.getJson('./file.json'); // for loading and parsing objects\nFixture.getBinary('./file.json'); // for retrieving a buffer\n```\n\n----------------------------------------\n\nTITLE: Triggering Renovate Rebase for All Open PRs (HTML/Markdown)\nDESCRIPTION: This HTML comment, embedded in a Markdown checkbox list item, instructs the Renovate bot to rebase all currently open dependency update pull requests at once. Clicking the associated checkbox triggers this bulk rebase action.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/platform/utils/__fixtures__/issue-body.txt#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- rebase-all-open-prs -->\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Collector (YAML)\nDESCRIPTION: Configures the OpenTelemetry Collector to receive traces and metrics via OTLP (gRPC and HTTP). It defines exporters to send traces to Jaeger (via OTLP) and metrics to Prometheus (via OTLP HTTP). A spanmetrics connector is configured to calculate metrics from traces, and batch processors are used. Service pipelines wire the receivers, processors, connectors, and exporters together for both traces and metrics.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/examples/opentelemetry.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  otlp:\n    protocols:\n      grpc:\n        endpoint: 0.0.0.0:4317\n      http:\n        endpoint: 0.0.0.0:4318\n\nexporters:\n  otlp/jaeger:\n    endpoint: jaeger:4317\n    tls:\n      insecure: true\n  otlphttp/prometheus:\n    endpoint: http://prometheus:9090/api/v1/otlp\n  debug:\n  # verbosity: normal\n\nconnectors:\n  spanmetrics:\n    histogram:\n      exponential:\n    dimensions:\n      - name: http.method\n        default: GET\n      - name: http.status_code\n      - name: http.host\n    dimensions_cache_size: 1000\n    aggregation_temporality: 'AGGREGATION_TEMPORALITY_CUMULATIVE'\n    exemplars:\n      enabled: true\n\nprocessors:\n  batch:\n\nextensions:\n  health_check:\n  pprof:\n  zpages:\n\nservice:\n  extensions: [pprof, zpages, health_check]\n  pipelines:\n    traces:\n      receivers: [otlp]\n      exporters:\n        - otlp/jaeger\n        # Send traces to connector for metrics calculation\n        - spanmetrics\n        # Enable debug exporter to see traces in the logs\n        #- debug\n      processors: [batch]\n\n    metrics:\n      receivers:\n        - otlp # Receive metrics from Renovate.\n        - spanmetrics # Receive metrics calculated by the spanmetrics connector.\n      processors: [batch]\n      exporters:\n        - otlphttp/prometheus\n        # Enable debug exporter to see metrics in the logs\n        # - debug\n```\n\n----------------------------------------\n\nTITLE: Disabling Jest Cache with --no-cache Flag\nDESCRIPTION: Introduces the `--no-cache` command-line flag in Jest 0.6.0. This option disables Jest's caching mechanisms, which is useful for debugging preprocessor scripts.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/workers/repository/update/pr/changelog/__fixtures__/jest.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n--no-cache\n```\n\n----------------------------------------\n\nTITLE: Illustrating Jest's toEqual Matcher Behavior Change\nDESCRIPTION: Provides a JavaScript code example `expect([]).toEqual({})` using Jest's `expect` and `toEqual`. This specific comparison, which previously passed incorrectly, now fails as of Jest 0.6.0 due to stricter checking including the object's internal class name.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/workers/repository/update/pr/changelog/__fixtures__/jest.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nexpect([]).toEqual({})\n```\n\n----------------------------------------\n\nTITLE: Providing Default Values with Zod's `.catch()` Method\nDESCRIPTION: Shows how to use the `.catch()` method in a Zod schema (`Box`) to provide default values for fields that fail validation or are missing. If `width` or `height` parsing fails (e.g., `height` is `null`), `.catch(10)` ensures the resulting parsed object gets `10` for that field, allowing for more permissive parsing. Requires the `zod` library (`z`).\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/development/zod.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst Box = z.object({\n  width: z.number().catch(10),\n  height: z.number().catch(10),\n});\n\nconst box = Box.parse({ width: 20, height: null });\n// => { width: 20, height: 10 }\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependencies with Versions in Mintfile\nDESCRIPTION: Shows the correct syntax for defining dependencies in a Mintfile, including the required version number (e.g., `@6.6.1`, `@ 0.48.0`). This format is necessary for Renovate to manage updates.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/mint/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n// Good:\nSwiftGen/SwiftGen@6.6.1\nrealm/SwiftLint @ 0.48.0\n```\n\n----------------------------------------\n\nTITLE: Defining Dependencies in versions.ini for Renovate Regex Manager (INI)\nDESCRIPTION: This INI snippet shows an example `versions.ini` file formatted for use with the previously defined custom regex manager in Renovate. A comment starting with `# renovate:` provides metadata for the `gitlab-releases` datasource, including the dependency name (GitLab project path), versioning scheme, and GitLab instance URL. The subsequent line defines the actual dependency (`NKJS_VERSION`) and its current value (`3.4.0`) which Renovate will update.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/gitlab-releases/readme.md#_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n# renovate: datasource=gitlab-releases depName=gitlab-org/ci-cd/package-stage/feature-testing/new-packages-list versioning=semver registryUrl=https://gitlab.com\nNKJS_VERSION=3.4.0\n```\n\n----------------------------------------\n\nTITLE: Displaying Renovate CLI Help in Shell\nDESCRIPTION: This shell command outputs the Renovate bot's CLI help to the console, displaying usage information and available command-line options. It assumes Node.js and the Renovate package are installed and properly referenced in the system path. There are no parameters to the command itself, but additional arguments can be appended to configure Renovate runs. This helps users discover CLI flags for configuration or debugging. Output is printed directly to the terminal.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/development/configuration.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnode renovate --help\n```\n\n----------------------------------------\n\nTITLE: Define Puppet Module from Git Repository Using Branch in Ruby Puppetfile\nDESCRIPTION: Shows how to define a Puppet module sourced from a Git repository (using HTTPS protocol), tracking a specific branch ('stable_version') instead of a tag or fixed version. This uses the `:git` and `:branch` parameters. Renovate will update this dependency when the specified branch head changes.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/puppet/readme.md#_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nmod 'example/samba',\n    :git    => 'https://github.com/example/puppet-samba',\n    :branch => 'stable_version'\n```\n\n----------------------------------------\n\nTITLE: Refactoring Nested Conditionals for Readability - TypeScript\nDESCRIPTION: Demonstrates refactoring deep nested conditionals into early returns, improving readability and reducing indentation. Shows both the verbose and simplified versions of a boolean function. No dependencies other than standard TypeScript. Inputs are strings; outputs are boolean. Encourages fail-fast coding patterns.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/development/best-practices.md#_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nfunction foo(str: string): boolean {\n  let result = false;\n  if (condition(str)) {\n    const x = extractData(str);\n    if (x) {\n      // do something\n      result = true;\n    }\n  }\n  return result;\n}\n```\n\nLANGUAGE: ts\nCODE:\n```\nfunction foo(str: string): boolean {\n  if (!condition(str)) {\n    return false;\n  }\n\n  const x = extractData(str);\n  if (!x) {\n    return false;\n  }\n\n  // do something\n  return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Managed Ansible Dependency Version - YAML\nDESCRIPTION: This YAML snippet serves as an example of an Ansible file tracked by Renovate, using a structured comment to associate a variable with a custom datasource, dependency name, and versioning strategy. Renovate's custom manager uses this annotation and value format to locate and update the managed variable. The key parameters are 'datasource', 'depName', and 'versioning', which guide Renovate's update logic for the variable value.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/custom/readme.md#_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\n# renovate: datasource=custom.nexus_generic depName=something versioning=loose\nsomething_version: '77'\n```\n\n----------------------------------------\n\nTITLE: Example JSON Source File for Dependency Extraction using Custom Regex Managers (JSON)\nDESCRIPTION: This sample JSON represents the structure expected by the recursive Renovate customManagers configuration above. It contains two objects ('backup' and 'setup'), each with a 'test' node that specifies the dependency name, datasource, and version (value). These structures allow the configured regexes to match and extract dependencies with hierarchical context. Primarily serves as the target for extraction examples in Renovate customization.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"backup\": {\n    \"test\": {\n      \"name\": \"grafana/loki\",\n      \"type\": \"docker\",\n      \"value\": \"1.6.1\"\n    }\n  },\n  \"setup\": {\n    \"test\": {\n      \"name\": \"python\",\n      \"type\": \"docker\",\n      \"value\": \"3.9.0\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Wildcard Pattern for PIP Requirements Files (Prefix)\nDESCRIPTION: A file pattern using a wildcard (`*`) after a hyphen prefix (`requirements-`) to match multiple Python requirements files ending with the `.pip` extension. This covers files like `requirements-dev.pip` or `requirements-test.pip`.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/pip_requirements/readme.md#_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nrequirements-*.pip\n```\n\n----------------------------------------\n\nTITLE: Filtering Invalid Array Elements Manually with Zod (Complex)\nDESCRIPTION: Illustrates a verbose method using standard Zod functions (`.nullable()`, `.catch(null)`, `.transform()`, `.filter()`) to parse an array (`Versions`) and filter out elements that don't conform to the inner schema (e.g., missing `version`). While functional, the guideline suggests using helpers like `LooseArray` for better readability. Requires the `zod` library (`z`).\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/development/zod.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst Versions = z\n  .array(\n    z\n      .object({\n        version: z.string(),\n      })\n      .nullable()\n      .catch(null),\n  )\n  .transform((releases) =>\n    releases.filter((x): x is { version: string } => x !== null),\n  );\n```\n\n----------------------------------------\n\nTITLE: Configuring Renovate for Kotlin Script File Matching (JSON)\nDESCRIPTION: This JSON configuration snippet for Renovate modifies the default behavior of the `kotlin-script` manager. By setting the `fileMatch` property to `[\"^.*\\\\.kts$\"]`, Renovate is instructed to scan all files with the `.kts` extension for dependencies, overriding the default behavior which only scans `.main.kts` files to avoid conflicts with Gradle Kotlin DSL files.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/kotlin-script/readme.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"kotlin-script\": {\n    \"fileMatch\": [\"^.*\\\\.kts$\"]\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Avoiding Array Constructors in TypeScript - TypeScript\nDESCRIPTION: Warns against using the Array constructor due to its ambiguous behavior and shows both incorrect and correct ways of array creation. The recommended pattern uses bracket initialization or Array.from().fill(). Dependencies: none beyond TypeScript. Input is array construction; output is the correctly initialized array.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/development/best-practices.md#_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nconst a = new Array(2); // [undefined, undefined]\nconst b = new Array(2, 3); // [2, 3];\n```\n\nLANGUAGE: ts\nCODE:\n```\n// [0, 0, 0, 0, 0]\nArray.from<number>({ length: 5 }).fill(0);\n```\n\n----------------------------------------\n\nTITLE: Renovate Configuration Key: packageRules\nDESCRIPTION: Refers to the `packageRules` key in Renovate's configuration (JSON). This key holds an array of rule objects that allow for fine-grained control over how Renovate handles specific packages or groups of packages (e.g., setting `groupName`, enabling Dashboard Approval).\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/getting-started/use-cases.md#_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n`packageRules`\n```\n\n----------------------------------------\n\nTITLE: Configuring Hermit Manager Registry URLs in Renovate (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to update the Renovate configuration to inform the Hermit manager of custom private registry URLs. It defines a package rule that matches the 'hermit' manager and sets 'defaultRegistryUrls' for private repositories. Dependencies include a working Renovate installation, access to a private Hermit package registry, and permission to edit the Renovate config file. The configuration ensures Renovate will consider packages from the specified URLs when processing updates. No runtime parameters are present; the snippet is declarative and should be placed in a configuration file, typically 'renovate.json' or similar.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/hermit/readme.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packageRules\": [\n    {\n      \"matchManagers\": [\"hermit\"],\n      \"defaultRegistryUrls\": [\n        \"https://github.com/your/private-hermit-packages\"\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Dependencies Encoded as Single String Values per Package - JSON\nDESCRIPTION: Provides a simplified JSON example where dependencies are expressed as single strings in the 'packages' array (e.g., 'foo@1.2.3'). Used to illustrate JSONata transformations splitting strings to extract the dependency name and version. No dependencies outside normal JSON processing.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/custom/jsonata/readme.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": [\"foo@1.2.3\", \"bar@4.5.6\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Crossplane `fileMatch` for a Single File (JSON)\nDESCRIPTION: This JSON configuration snippet illustrates how to configure Renovate's `crossplane` manager to target a single, specific Crossplane file located at `config/provider.yaml`. The `fileMatch` pattern `\"^config/provider\\\\.yaml$\"` uses anchors (`^`, `$`) to ensure an exact match of the file path, making Renovate check only this specific file for Crossplane dependencies.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/crossplane/readme.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"crossplane\": {\n    \"fileMatch\": [\"^config/provider\\\\.yaml$\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating HTML Input for Renovate Custom Datasource (HTML)\nDESCRIPTION: Presents a simple HTML document containing anchor (`<a>`) tags with `href` attributes. This serves as an example input for a Renovate custom datasource configured with the `html` format. Renovate will attempt to extract the `href` values from such links.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/custom/readme.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <body>\n    <a href=\"package-1.0.tar.gz\">package-1.0.tar.gz</a>\n    <a href=\"package-2.0.tar.gz\">package-2.0.tar.gz</a>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Executing Resolved Post-Upgrade Commands in Bash\nDESCRIPTION: This Bash snippet illustrates the actual commands executed by Renovate after resolving the templates defined in the `postUpgradeTasks` (like the previous JSON example). For an update of `@angular/core` from version 10.0.0 to 11.0.0, the templated command becomes this specific sequence of `npm ci` and `npx ng update` calls. This highlights how Renovate uses templating to run context-specific commands. The execution requires these commands to be permitted via the `allowedCommands` configuration.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/self-hosted-configuration.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm ci --ignore-scripts\nnpx ng update @angular/core --from=10.0.0 --to=11.0.0 --migrate-only --allow-dirty --force\n```\n\n----------------------------------------\n\nTITLE: Defining Storage Account and Nested Blob Service Resources in Bicep (Bicep)\nDESCRIPTION: This Bicep code snippet defines a storage account resource of type 'Microsoft.Storage/storageAccounts' and a nested 'blobServices' resource within it, both using a specific API version. The example highlights a limitation in Renovate where API version upgrades for nested resources, like 'blobServices', are currently not supported. The key parameters include the resource type, API version, name, kind, SKU, and location. This snippet is intended for use in infrastructure-as-code scenarios targeting Azure Resource Manager deployments, and relies on Bicep as the language.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/bicep.md#_snippet_0\n\nLANGUAGE: bicep\nCODE:\n```\nresource storageAccount 'Microsoft.Storage/storageAccounts@2022-05-01' = {\n  name: 'test'\n  kind: 'StorageV2'\n  sku: {\n    name: 'Standard_LRS'\n  }\n  location: location\n\n  resource blobServices 'blobServices@2022-05-01' = {\n    name: 'default'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Cache Structure after Initial GitHub Fetch (JavaScript)\nDESCRIPTION: Illustrates the internal cache data structure created after processing the paginated results from an initial fetch. It contains an `items` object where fetched releases/tags are indexed by their `version` for quick access, and a `createdAt` timestamp indicating when this cache entry was generated.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/util/github/graphql/readme.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"items\": {\n    \"3.1.1\": { \"version\": \"3.1.1\", \"releaseTimestamp\": \"2022-12-18\" },\n    \"3.1.0\": { \"version\": \"3.1.0\", \"releaseTimestamp\": \"2022-12-15\" },\n    \"3.0.2\": { \"version\": \"3.0.2\", \"releaseTimestamp\": \"2022-12-09\" },\n    \"3.0.1\": { \"version\": \"3.0.1\", \"releaseTimestamp\": \"2022-12-08\" },\n    \"3.0.0\": { \"version\": \"3.0.0\", \"releaseTimestamp\": \"2022-12-05\" },\n    \"2.2.2\": { \"version\": \"2.2.2\", \"releaseTimestamp\": \"2022-11-23\" },\n    \"2.2.1\": { \"version\": \"2.2.1\", \"releaseTimestamp\": \"2022-10-17\" },\n    \"2.2.0\": { \"version\": \"2.2.0\", \"releaseTimestamp\": \"2022-10-13\" },\n    \"2.1.1\": { \"version\": \"2.1.1\", \"releaseTimestamp\": \"2022-10-07\" },\n    \"2.1.0\": { \"version\": \"2.1.0\", \"releaseTimestamp\": \"2022-09-21\" },\n    \"2.0.1\": { \"version\": \"2.0.1\", \"releaseTimestamp\": \"2022-09-18\" },\n    \"2.0.0\": { \"version\": \"2.0.0\", \"releaseTimestamp\": \"2022-09-01\" },\n  },\n  \"createdAt\": \"2022-12-20\",\n}\n```\n\n----------------------------------------\n\nTITLE: Example Prometheus Latency Metrics After Second Request (10s)\nDESCRIPTION: This snippet shows the updated Prometheus histogram metrics after a second request to `api.github.com:443` takes 10 seconds. The bucket counters are incremented cumulatively; buckets with `le` (less than or equal to) threshold greater than or equal to 10 seconds now show a count of 2. The total duration sum (`_sum`) is updated to 11.533 seconds (1.533s + 10s), and the total request count (`_count`) becomes 2.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/examples/opentelemetry.md#_snippet_9\n\nLANGUAGE: prometheus\nCODE:\n```\ntraces_span_metrics_duration_milliseconds_bucket{http_host=\"api.github.com:443\",le=\"0.1\"} 0\ntraces_span_metrics_duration_milliseconds_bucket{http_host=\"api.github.com:443\",le=\"1\"} 0\ntraces_span_metrics_duration_milliseconds_bucket{http_host=\"api.github.com:443\",le=\"2\"} 1\ntraces_span_metrics_duration_milliseconds_bucket{http_host=\"api.github.com:443\",le=\"6\"} 1\ntraces_span_metrics_duration_milliseconds_bucket{http_host=\"api.github.com:443\",le=\"10\"} 2\ntraces_span_metrics_duration_milliseconds_bucket{http_host=\"api.github.com:443\",le=\"100\"} 2\ntraces_span_metrics_duration_milliseconds_bucket{http_host=\"api.github.com:443\",le=\"250\"} 2\ntraces_span_metrics_duration_milliseconds_bucket{http_host=\"api.github.com:443\",le=\"9.223372036854775e+12\"} 2\ntraces_span_metrics_duration_milliseconds_bucket{http_host=\"api.github.com:443\",le=\"+Inf\"} 2\ntraces_span_metrics_duration_milliseconds_sum{http_host=\"api.github.com:443\"} 11.533\ntraces_span_metrics_duration_milliseconds_count{http_host=\"api.github.com:443\"} 2\n```\n\n----------------------------------------\n\nTITLE: Example Updated Docker Image Tag\nDESCRIPTION: Represents the updated version tag (`14.17.5`) that Renovate would propose as an update for an image previously using the `14.17.4` tag.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/getting-started/use-cases.md#_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n`14.17.5`\n```\n\n----------------------------------------\n\nTITLE: Ignoring Dependencies with archive_override in Bazel Module - Python\nDESCRIPTION: Shows the use of archive_override (and by extension local_path_override) in Bazel module files, which instructs Renovate to ignore the corresponding bazel_dep entries, since these types do not support versioning. Inputs are module_name and urls; Renovate will not update nor version-check these modules.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/bazel.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nbazel_dep(name = \"rules_foo\", version = \"1.2.3\")\n\narchive_override(\n  module_name = \"rules_foo\",\n  urls = [\n    \"https://example.com/archive.tar.gz\",\n  ],\n)\n\nbazel_dep(name = \"rules_bar\")\n\narchive_override(\n  module_name = \"rules_bar\",\n  urls = [\n    \"https://example.com/archive.tar.gz\",\n  ],\n)\n```\n\n----------------------------------------\n\nTITLE: Marking Renovate PR Branch for Rebasing in Markdown Comments\nDESCRIPTION: These HTML comments embedded within Markdown are used by Renovate bot in its Dependency Dashboard issues. They serve as metadata markers linking a pull request listed in the issue (e.g., `[pr1](../pull/1)`) to its corresponding source branch (e.g., `branchName1`, `branchName2`). If the checkbox preceding the comment is ticked by a user, Renovate interprets this as a signal to rebase the specified branch. This pattern allows for manual control over rebasing specific update branches via the dashboard.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/workers/repository/__fixtures__/dependency-dashboard-with-2-PR-edited.txt#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- rebase-branch=branchName1 -->\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- rebase-branch=branchName2 -->\n```\n\n----------------------------------------\n\nTITLE: Mapping Renovate Status Checks to Gerrit Labels - JSON Example\nDESCRIPTION: Demonstrates how to map Renovate status checks, such as 'mergeConfidence', to custom Gerrit labels by specifying a corresponding mapping in the 'statusCheckNames' object of your configuration file. No external dependencies are required outside of a correctly configured Renovate bot and a Gerrit instance. The snippet expects 'mergeConfidence' as the key and your desired Gerrit label as the value; it outputs an object suitable for use in a Renovate JSON config file. Limitations: This only affects status check mapping for supported Renovate-Gerrit integrations; unsupported platform features like issues are not addressed.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/platform/gerrit/readme.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"statusCheckNames\": {\n    \"mergeConfidence\": \"Renovate-Merge-Confidence\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Renovate Bot Cache Data Structure (JSON)\nDESCRIPTION: This JSON object represents the typical structure of cached data used by Renovate bot. It includes fields like fingerprint, hash, payload (the encoded data), repository, and revision. This entire structure, or just the 'payload' field, can be pasted into the online cache decoder tool to retrieve the original data.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/util/cache/repository/impl/readme.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"fingerprint\": \"0123456789abcdef\",\n  \"hash\": \"756a22cbd28854a64687fa5e458eb1da5b51958d7b329094f4a152dc4dc533dd26213f97fdc10f2480784aa667382ef671d820c1625bb694542a99f8a709be45\",\n  \"payload\": \"Gx0A8EVPlvpLVKVkJggn0ExJYlEsqcMErTZdm8wdCOAB\",\n  \"repository\": \"some/repo\",\n  \"revision\": 13\n}\n```\n\n----------------------------------------\n\nTITLE: Decoding URI Components with 'decodeURIComponent' Helper (Handlebars)\nDESCRIPTION: Explains the usage of the `decodeURIComponent` helper to decode a percent-encoded string (e.g., the value of `depName`). It relies on the corresponding JavaScript global function and is useful when dealing with encoded dependency names or sources.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/templates.md#_snippet_3\n\nLANGUAGE: handlebars\nCODE:\n```\n{{{decodeURIComponent depName}}}\n```\n\n----------------------------------------\n\nTITLE: Matching a Specific Sveltos YAML File in Renovate (JSON)\nDESCRIPTION: This Renovate configuration snippet configures the `fileMatch` pattern for the `sveltos` manager to `[\"^config/sveltos\\\\.yaml$\"]`. This precise regular expression targets only the specific file named `sveltos.yaml` located directly within the `config/` directory at the root of the repository. Use this configuration when Renovate should only manage dependencies defined in this single, explicitly named file.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/sveltos/readme.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sveltos\": {\n    \"fileMatch\": [\"^config/sveltos\\\\.yaml$\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Dependencies from Multi-Document YAML - YAML\nDESCRIPTION: Shows the use of YAML multi-documents where each document has a 'packages' array. Renovate parses as multiple documents; JSONata can process each document's dependencies, supporting complex extraction scenarios.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/custom/jsonata/readme.md#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\npackages:\n  - version: 1.2.3\n    package: foo\n---\npackages:\n  - version: 1.2.5\n    package: bar\n```\n\n----------------------------------------\n\nTITLE: Updated Docker Image Resource in YAML (Post-Migration Example) - YAML\nDESCRIPTION: This YAML snippet shows the result after Renovate has applied updates according to the previous custom manager configuration. The Docker image reference has been updated to point to a new registry and a newer tag. It helps illustrate the effect of the autoReplaceStringTemplate and provides an expected output for the custom manager pipeline.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\n# The image of the service <registry>/<repo>/<image>:<tag>\\nimage: my.new.registry/aRepository/andImage:1.21-alpine\n```\n\n----------------------------------------\n\nTITLE: Customizing User-Facing Strings in Renovate (JSON)\nDESCRIPTION: Demonstrates how to customize user-facing comment text that Renovate posts when a PR is closed and future updates are ignored. The configuration allows you to modify the topic and contents of comments for major, digest, or other upgrades using the 'userStrings' object. Each key customizes a different aspect of the comment; the input is a nested JSON object and output is tailored PR comment messaging.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_145\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"userStrings\\\": {\\n    \\\"ignoreTopic\\\": \\\"Custom topic for PR comment\\\",\\n    \\\"ignoreMajor\\\": \\\"Custom text for major upgrades.\\\",\\n    \\\"ignoreDigest\\\": \\\"Custom text for digest upgrades.\\\",\\n    \\\"ignoreOther\\\": \\\"Custom text for other upgrades.\\\"\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting packageName for Custom Manager (YAML/JSON)\nDESCRIPTION: Illustrates the required structure for the `packageName` parameter when configuring a custom manager for the AWS EKS Addon datasource. It shows an expanded JSON example and the necessary minified version required by Renovate.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/aws-eks-addon/readme.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Getting the vpc-cni version for Kubernetes 1.30\n{\n   \"kubernetesVersion\": \"1.30\",\n   \"addonName\": \"vpc-cni\"\n}\n\n# In order to use it with this datasource, you have to minify it:\n{\"kubernetesVersion\":\"1.30\",\"addonName\":\"vpc-cni\"}\n```\n\n----------------------------------------\n\nTITLE: Wildcard Pattern for TXT Requirements Files (Infix)\nDESCRIPTION: A file pattern using a wildcard (`*`) as an infix element between `requirements.` and `.txt`. This pattern matches files like `requirements.dev.txt` or `requirements.prod.txt`.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/pip_requirements/readme.md#_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nrequirements.*.txt\n```\n\n----------------------------------------\n\nTITLE: Showing Renovate's JSON Conversion of Plain Text Input (JSON)\nDESCRIPTION: Demonstrates how Renovate automatically converts a plain text response (like a list of versions separated by newlines) into a structured JSON object. It creates a `releases` array where each line becomes an object with a `version` field. This conversion happens when the `plain` format is used, before any `transformTemplates` are applied.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/custom/readme.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"releases\": [\n    {\n      \"version\": \"1.0.0\"\n    },\n    {\n      \"version\": \"2.0.0\"\n    },\n    {\n      \"version\": \"3.0.0\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying SemVer Compatible Conan Package Version\nDESCRIPTION: This syntax indicates compatibility according to Semantic Versioning rules. For `[~=3.0]`, it typically means versions >=3.0.0 and <4.0.0.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/versioning/conan/readme.md#_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n`[~=3.0]`\n```\n\n----------------------------------------\n\nTITLE: Example Prometheus Metrics from Spanmetrics Connector (Plaintext)\nDESCRIPTION: Displays examples of metrics generated by the OpenTelemetry Collector's spanmetrics connector and sent to Prometheus. It includes `traces_span_metrics_calls_total` (counters for internal spans and external HTTP calls) and `traces_span_metrics_duration_milliseconds` (histogram buckets, sum, and count for span durations), along with their labels.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/examples/opentelemetry.md#_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n### Example of internal spans\ntraces_span_metrics_calls_total{http_method=\"GET\", job=\"renovatebot.com/renovate\", service_name=\"renovate\", span_kind=\"SPAN_KIND_INTERNAL\", span_name=\"repository\", status_code=\"STATUS_CODE_UNSET\"} 2\ntraces_span_metrics_calls_total{http_method=\"GET\", job=\"renovatebot.com/renovate\", service_name=\"renovate\", span_kind=\"SPAN_KIND_INTERNAL\", span_name=\"run\", status_code=\"STATUS_CODE_UNSET\"} 2\n\n### Example of http calls from Renovate to external services\ntraces_span_metrics_calls_total{http_host=\"api.github.com:443\", http_method=\"POST\", http_status_code=\"200\", job=\"renovatebot.com/renovate\", service_name=\"renovate\", span_kind=\"SPAN_KIND_CLIENT\", span_name=\"POST\", status_code=\"STATUS_CODE_UNSET\"} 4\n\n\n### Example histogram metrics\ntraces_span_metrics_duration_milliseconds_bucket{http_method=\"GET\", job=\"renovatebot.com/renovate\", le=\"8\", service_name=\"renovate\", span_kind=\"SPAN_KIND_INTERNAL\", span_name=\"repository\", status_code=\"STATUS_CODE_UNSET\"} 0\n...\ntraces_span_metrics_duration_milliseconds_bucket{http_method=\"GET\", job=\"renovatebot.com/renovate\", le=\"2000\", service_name=\"renovate\", span_kind=\"SPAN_KIND_INTERNAL\", span_name=\"repository\", status_code=\"STATUS_CODE_UNSET\"} 0\ntraces_span_metrics_duration_milliseconds_bucket{http_method=\"GET\", job=\"renovatebot.com/renovate\", le=\"5000\", service_name=\"renovate\", span_kind=\"SPAN_KIND_INTERNAL\", span_name=\"repository\", status_code=\"STATUS_CODE_UNSET\"} 1\ntraces_span_metrics_duration_milliseconds_bucket{http_method=\"GET\", job=\"renovatebot.com/renovate\", le=\"15000\", service_name=\"renovate\", span_kind=\"SPAN_KIND_INTERNAL\", span_name=\"repository\", status_code=\"STATUS_CODE_UNSET\"} 1\ntraces_span_metrics_duration_milliseconds_bucket{http_method=\"GET\", job=\"renovatebot.com/renovate\", le=\"10000\", service_name=\"renovate\", span_kind=\"SPAN_KIND_INTERNAL\", span_name=\"repository\", status_code=\"STATUS_CODE_UNSET\"} 1\ntraces_span_metrics_duration_milliseconds_bucket{http_method=\"GET\", job=\"renovatebot.com/renovate\", le=\"+Inf\", service_name=\"renovate\", span_kind=\"SPAN_KIND_INTERNAL\", span_name=\"repository\", status_code=\"STATUS_CODE_UNSET\"} 1\n\ntraces_span_metrics_duration_milliseconds_sum{http_method=\"GET\", job=\"renovatebot.com/renovate\", service_name=\"renovate\", span_kind=\"SPAN_KIND_INTERNAL\", span_name=\"repository\", status_code=\"STATUS_CODE_UNSET\"} 4190.694209\ntraces_span_metrics_duration_milliseconds_count{http_method=\"GET\", job=\"renovatebot.com/renovate\", service_name=\"renovate\", span_kind=\"SPAN_KIND_INTERNAL\", span_name=\"repository\", status_code=\"STATUS_CODE_UNSET\"} 1\n```\n\n----------------------------------------\n\nTITLE: Alternative Pip Requirements File\nDESCRIPTION: An alternative filename convention (`.pip` extension) for Python package requirements that Renovate also supports alongside the standard `requirements.txt`.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/pip_requirements/readme.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nrequirements.pip\n```\n\n----------------------------------------\n\nTITLE: Extending a Scoped npm-hosted Renovate Preset\nDESCRIPTION: This JSON snippet demonstrates extending a scoped npm-hosted Renovate preset (e.g., published as `@fastcore/renovate-config`). The preset is referenced using the `@` prefix followed by the scope name (`@fastcore`) in the `extends` array. This method is deprecated.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/config-presets.md#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": [\"@fastcore\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Example Updated Cache Structure after Recurring GitHub Fetch (JavaScript)\nDESCRIPTION: Illustrates the updated cache structure following a recurring fetch. It reflects the addition of the new version '4.0.0' and the implicit removal of the now-deleted versions '3.0.1' and '3.0.2'. Older items remain unchanged, and the original `createdAt` timestamp from the initial cache generation ('2022-12-20') is preserved.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/util/github/graphql/readme.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"items\": {\n    \"4.0.0\": { \"version\": \"4.0.0\", \"releaseTimestamp\": \"2022-12-30\" },\n    \"3.1.1\": { \"version\": \"3.1.1\", \"releaseTimestamp\": \"2022-12-18\" },\n    \"3.1.0\": { \"version\": \"3.1.0\", \"releaseTimestamp\": \"2022-12-15\" },\n    \"3.0.0\": { \"version\": \"3.0.0\", \"releaseTimestamp\": \"2022-12-05\" },\n    \"2.2.2\": { \"version\": \"2.2.2\", \"releaseTimestamp\": \"2022-11-23\" },\n    \"2.2.1\": { \"version\": \"2.2.1\", \"releaseTimestamp\": \"2022-10-17\" },\n    \"2.2.0\": { \"version\": \"2.2.0\", \"releaseTimestamp\": \"2022-10-13\" },\n    \"2.1.1\": { \"version\": \"2.1.1\", \"releaseTimestamp\": \"2022-10-07\" },\n    \"2.1.0\": { \"version\": \"2.1.0\", \"releaseTimestamp\": \"2022-09-21\" },\n    \"2.0.1\": { \"version\": \"2.0.1\", \"releaseTimestamp\": \"2022-09-18\" },\n    \"2.0.0\": { \"version\": \"2.0.0\", \"releaseTimestamp\": \"2022-09-01\" },\n  },\n  \"createdAt\": \"2022-12-20\",\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Authentication Tokens for Hermit Package Installation - Markdown\nDESCRIPTION: Lists the environment variable names ('HERMIT_GITHUB_TOKEN' and 'GITHUB_TOKEN') that can be set to authenticate downloads of private Hermit packages. These tokens must be provided as environment variables, potentially via the 'customEnvironmentVariables' configuration, to enable authenticated package upgrades in CI/CD or local development environments.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/hermit/readme.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nHERMIT_GITHUB_TOKEN\nGITHUB_TOKEN\n```\n\n----------------------------------------\n\nTITLE: Validating AWS AMI Format with Regular Expression\nDESCRIPTION: This regular expression pattern is used within Renovate to identify strings that conform to the standard AWS Amazon Machine Image (AMI) format. It checks if a string begins with 'ami-' followed by exactly 17 lowercase alphanumeric characters. Any string matching this pattern is considered a valid AMI identifier for versioning purposes.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/versioning/aws-machine-image/readme.md#_snippet_0\n\nLANGUAGE: regex\nCODE:\n```\n^ami-[a-z0-9]{17}$\n```\n\n----------------------------------------\n\nTITLE: Example Dockerfile `FROM` Instruction for `autoReplaceGlobalMatch` Scenario\nDESCRIPTION: This Dockerfile snippet shows a `FROM` instruction specifying a Java base image with version `8` and a SHA256 digest. It serves as the initial state in an example demonstrating the `autoReplaceGlobalMatch` configuration option in Renovate, where the version `8` might be incorrectly replaced within the digest if global matching is enabled by default.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM java:8@sha256:0e8b2a860\n```\n\n----------------------------------------\n\nTITLE: Showing Renovate's JSON Conversion of HTML Input (JSON)\nDESCRIPTION: Illustrates how Renovate processes an HTML response when the `html` format is used. It extracts the `href` attribute values from all anchor tags (`<a>`) found in the HTML and creates a JSON structure containing these values as `version` strings within the `releases` array. Note that the `href` values are used directly as versions.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/custom/readme.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"releases\": [\n    {\n      \"version\": \"package-1.0.tar.gz\"\n    },\n    {\n      \"version\": \"package-1.0.tar.gz\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating YAML Input for Renovate Custom Datasource (YAML)\nDESCRIPTION: Provides an example of a YAML response from an HTTP endpoint, containing a list of releases with versions. This structure is intended for use with the `yaml` format setting in a Renovate custom datasource.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/custom/readme.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nreleases:\n  - version: 1.0.0\n  - version: 2.0.0\n  - version: 3.0.0\n```\n\n----------------------------------------\n\nTITLE: Committing Updated AUR Files in GitHub Actions YAML\nDESCRIPTION: Utilizes the `stefanzweifel/git-auto-commit-action@v4.16.0` to automatically commit changes made to `PKGBUILD` and `.SRCINFO` files within any package directory. This step is conditional (`if: ${{ env.pkgbuild != '' }}`) and ensures the updates generated in previous steps are added back to the pull request branch.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/user-stories/maintaining-aur-packages-with-renovate.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Commit\n  if: ${{ env.pkgbuild != '' }}\n  uses: stefanzweifel/git-auto-commit-action@3ea6ae190baf489ba007f7c92608f33ce20ef04a # v4.16.0\n  with:\n    file_pattern: '*/PKGBUILD */.SRCINFO'\n```\n\n----------------------------------------\n\nTITLE: Extracting Dependencies by Environment Node using JSONata - JSON\nDESCRIPTION: Illustrates a JSON structure where dependencies are grouped under 'production' and 'development' nodes. Intended as an input example for JSONata queries. No code execution dependencies. Key fields: 'version', 'package'. Inputs are JSON nodes, outputs target environments; designed for usage with JSONata queries extracting from particular nodes.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/custom/jsonata/readme.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"production\": [\n    {\n      \"version\": \"1.2.3\",\n      \"package\": \"foo\"\n    }\n  ],\n  \"development\": [\n    {\n      \"version\": \"4.5.6\",\n      \"package\": \"bar\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Renovate Built-in Preset: config:recommended\nDESCRIPTION: Represents `config:recommended`, a named, built-in configuration preset provided by Renovate. It bundles a set of generally recommended settings and can be included in a repository's configuration using the `extends` array.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/getting-started/use-cases.md#_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n`config:recommended`\n```\n\n----------------------------------------\n\nTITLE: Equivalent Version Range for Composer '~0.4'\nDESCRIPTION: The explicit version range equivalent to Composer's '~0.4' tilde range (and similar npm ranges) when the major version is zero. It allows updates from 0.4 up to, but not including, version 1.0.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/versioning/composer/readme.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n`>=0.4 <1`\n```\n\n----------------------------------------\n\nTITLE: Using Nested Zod Transforms for Field Renaming (Incorrect)\nDESCRIPTION: Illustrates an incorrect pattern for restructuring data using multiple, nested `.transform()` calls within a Zod schema (`SourceUrl`). This approach extracts and renames the `Github` URL through intermediate transformations, which is discouraged. Requires the `zod` library (`z`).\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/development/zod.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst SourceUrl = z\n  .object({\n    meta: z\n      .object({\n        links: z.object({\n          Github: z.string().url(),\n        }),\n      })\n      .transform(({ links }) => links.Github),\n  })\n  .transform(({ meta: sourceUrl }) => sourceUrl);\n```\n\n----------------------------------------\n\nTITLE: Example Package File: go.mod (Go Modules)\nDESCRIPTION: Presents `go.mod` as an example package file managed by Go modules. Renovate processes these files to manage Go dependency updates.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/getting-started/use-cases.md#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n`go.mod`\n```\n\n----------------------------------------\n\nTITLE: Matching Sveltos YAML Files in a Specific Directory (JSON)\nDESCRIPTION: This Renovate configuration snippet defines the `fileMatch` pattern for the `sveltos` manager as `[\"sveltos/.+\\\\.yaml$\"]`. This pattern uses a regular expression to target only `.yaml` files located within any subdirectory under a top-level `sveltos/` directory. This is useful for repositories where Sveltos configuration files are organized within a dedicated folder.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/sveltos/readme.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sveltos\": {\n    \"fileMatch\": [\"sveltos/.+\\\\.yaml$\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Invalid Array Elements with `LooseArray` Helper\nDESCRIPTION: Demonstrates the recommended, concise way to achieve permissive array parsing using the custom `LooseArray` helper (from `schema-utils.ts`). This `Versions` schema automatically filters out any elements from the input array that fail validation against the inner `z.object({ version: z.string() })` schema. Requires the `zod` library (`z`) and the `LooseArray` helper.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/development/zod.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst Versions = LooseArray(\n  z.object({\n    version: z.string(),\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Minifying AWS RDS Filter for Datasource `packageName` in JSON\nDESCRIPTION: Shows the required minified JSON representation of an AWS RDS filter, derived from the YAML example. This specific filter targets MySQL engine versions within the 5.7 major version. This compact JSON format is necessary for use as the `packageName` parameter when configuring the `aws-rds` datasource within a Renovate custom manager.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/datasource/aws-rds/readme.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n# In order to use it with this datasource, you have to minify it:\n\n[{\"Name\":\"engine\",\"Values\":[\"mysql\"]},{\"Name\":\"engine-version\",\"Values\":[\"5.7\"]}]\n```\n\n----------------------------------------\n\nTITLE: Illustrating Unsupported Runner Variable Usage in GitHub Actions YAML\nDESCRIPTION: Example GitHub Actions workflow showing the use of an environment variable (`${{ env.RUNNER }}`) to specify the `runs-on` value for a job. This pattern is explicitly mentioned as *not* being supported by Renovate for dependency extraction or updates; Renovate will ignore runners configured this way.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/github-actions/readme.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: build\non: [push]\n\nenv:\n  RUNNER: ubuntu-22.04\n\njobs:\n  build:\n    runs-on: ${{ env.RUNNER }}\n```\n\n----------------------------------------\n\nTITLE: Viewing Renovate Version in Mend Developer Portal Logs (JSON)\nDESCRIPTION: This example shows a log entry from the Mend Developer Portal indicating the specific version of Renovate used during a job run. To find this, navigate to the job logs within the portal and select the 'Info' log level. The relevant information is often presented in a JSON-like structure.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/mend-hosted/hosted-apps-config.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n   INFO: Repository started\n   {\n     \"renovateVersion\": \"39.11.5\"\n   }\n```\n\n----------------------------------------\n\nTITLE: Performing Data Transformation After Zod Parsing (Undesired)\nDESCRIPTION: Shows an undesired pattern where data transformation (calculating volume) is performed in separate code after the data (`input`) has been parsed and validated by the Zod schema (`Box`). The guideline recommends integrating transformations using Zod's `.transform()` method. Requires the `zod` library (`z`).\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/development/zod.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst Box = z.object({\n  width: z.number(),\n  height: z.number(),\n  length: z.number(),\n});\n\nconst { width, height, length } = Box.parse(input);\nconst volume = width * height * length;\n```\n\n----------------------------------------\n\nTITLE: Example Composer Standard Version String\nDESCRIPTION: Illustrates a standard Semver-like Composer version string including major, minor, and patch components. This is presented as the more complete form compared to short versions like '1.2'.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/versioning/composer/readme.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n`1.2.0`\n```\n\n----------------------------------------\n\nTITLE: Mapping process.on in Jest's JSDOM Environment\nDESCRIPTION: Explains that Jest 0.7.1 correctly maps the Node.js `process.on` event listener function into the jsdom environment, fixing a bug introduced in Jest 0.7.0. This ensures proper event handling for processes within tests.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/workers/repository/update/pr/changelog/__fixtures__/jest.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nprocess.on\n```\n\n----------------------------------------\n\nTITLE: Running Utility Script to Find Users by Email (Node.js)\nDESCRIPTION: Executes a Node.js utility script added in version 19.11.0 to find Gitter users based on their email address. Requires Node.js and the script at 'script/utils/find-users-by-email.js'. The '--email' parameter specifies the target email.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/workers/repository/update/pr/changelog/__fixtures__/gitter-webapp.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnode script/utils/find-users-by-email.js --email foo@bar.com\n```\n\n----------------------------------------\n\nTITLE: Legacy http_archive Declaration in Bazel WORKSPACE - Starlark\nDESCRIPTION: Details an http_archive declaration specifying dependency name, release URL (pointing to a GitHub releases tarball), and sha256 checksum. Renovate checks for updates by comparing available releases at the given URL. Inputs are dependency name, release URL (including version), and SHA-256 hash; output is the downloaded dependency archive.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/bazel.md#_snippet_10\n\nLANGUAGE: starlark\nCODE:\n```\nhttp_archive(\n    name = \"io_bazel_rules_go\",\n    url = \"https://github.com/bazelbuild/rules_go/releases/download/0.7.1/rules_go-0.7.1.tar.gz\",\n    sha256 = \"341d5eacef704415386974bc82a1783a8b7ffbff2ab6ba02375e1ca20d9b031c\",\n)\n```\n\n----------------------------------------\n\nTITLE: Incorrect Dependency Specification in Mintfile (Missing Version)\nDESCRIPTION: Illustrates an incorrect dependency declaration in a Mintfile where the version is omitted (e.g., `yonaskolb/xcodegen`). Renovate requires explicit versions for dependency management.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/mint/readme.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n// Bad:\nyonaskolb/xcodegen\n```\n\n----------------------------------------\n\nTITLE: Example: Ubuntu Numeric Release Version\nDESCRIPTION: Illustrates the numeric release version format (YY.MM) for Ubuntu, such as '24.04' representing the April 2024 release. This format is used to reference specific Ubuntu container image versions.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/versioning/ubuntu/readme.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n24.04\n```\n\n----------------------------------------\n\nTITLE: Accessing module.parent in Jest Modules\nDESCRIPTION: Explains that modules executed within Jest 0.6.1 and later now receive a `module.parent` field. This prevents unmocked modules from incorrectly assuming they are the main entry point.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/workers/repository/update/pr/changelog/__fixtures__/jest.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.parent\n```\n\n----------------------------------------\n\nTITLE: Standard Python Requirements File\nDESCRIPTION: Represents the standard default filename convention for Python package requirements, commonly used by the `pip` package installer. Renovate automatically detects files with this exact name.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/pip_requirements/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nrequirements.txt\n```\n\n----------------------------------------\n\nTITLE: Defining Over-Specified Zod Schemas (Incorrect Example)\nDESCRIPTION: Illustrates an incorrect approach where a Zod schema `Box` includes fields (`color`, `weight`) that are not actually needed for the subsequent logic (calculating volume). The guideline advises against this to minimize the contract surface with external data sources. Requires the `zod` library (`z`).\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/development/zod.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst Box = z.object({\n  width: z.number(),\n  height: z.number(),\n  length: z.number(),\n  color: z.object({\n    red: z.number(),\n    green: z.number(),\n    blue: z.number(),\n  })\n  weight: z.number(),\n});\n\nconst { width, height, length } = Box.parse(input);\nconst volume = width * height * length;\n```\n\n----------------------------------------\n\nTITLE: Illustrating Renovate Config Migration for baseBranches (Diff)\nDESCRIPTION: This diff illustrates an example configuration migration performed by Renovate when the `configMigration` option is enabled. It shows the change from the deprecated `baseBranch` string field to the newer `baseBranches` array field, automatically updating the configuration format.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/configuration-options.md#_snippet_15\n\nLANGUAGE: diff\nCODE:\n```\n{\n- \"baseBranch\": \"main\"\n+ \"baseBranches\": [\"main\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Example Prometheus Latency Metrics After First Request (1.533s)\nDESCRIPTION: This snippet displays Prometheus histogram metrics for request duration (`traces_span_metrics_duration_milliseconds`) after a single request to `api.github.com:443` completed in 1.533 seconds. Buckets (`le`) greater than or equal to 2 seconds are incremented (value 1), along with the total sum (1.533s) and count (1). This format is standard for Prometheus histograms used for performance monitoring and creating heatmaps.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/examples/opentelemetry.md#_snippet_8\n\nLANGUAGE: prometheus\nCODE:\n```\ntraces_span_metrics_duration_milliseconds_bucket{http_host=\"api.github.com:443\",le=\"0.1\"} 0\ntraces_span_metrics_duration_milliseconds_bucket{http_host=\"api.github.com:443\",le=\"1\"} 0\ntraces_span_metrics_duration_milliseconds_bucket{http_host=\"api.github.com:443\",le=\"2\"} 1\ntraces_span_metrics_duration_milliseconds_bucket{http_host=\"api.github.com:443\",le=\"6\"} 1\ntraces_span_metrics_duration_milliseconds_bucket{http_host=\"api.github.com:443\",le=\"10\"} 1\ntraces_span_metrics_duration_milliseconds_bucket{http_host=\"api.github.com:443\",le=\"100\"} 1\ntraces_span_metrics_duration_milliseconds_bucket{http_host=\"api.github.com:443\",le=\"250\"} 1\ntraces_span_metrics_duration_milliseconds_bucket{http_host=\"api.github.com:443\",le=\"9.223372036854775e+12\"} 1\ntraces_span_metrics_duration_milliseconds_bucket{http_host=\"api.github.com:443\",le=\"+Inf\"} 1\ntraces_span_metrics_duration_milliseconds_sum{http_host=\"api.github.com:443\"} 1.533\ntraces_span_metrics_duration_milliseconds_count{http_host=\"api.github.com:443\"} 1\n```\n\n----------------------------------------\n\nTITLE: Renovate Configuration Option: schedule\nDESCRIPTION: Refers to the `schedule` configuration option in Renovate's JSON configuration. This option allows users to specify time windows (using cron-like syntax or presets) during which Renovate is permitted to create new branches or Pull Requests.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/getting-started/use-cases.md#_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n`schedule`\n```\n\n----------------------------------------\n\nTITLE: Outputting Jest Test Results as JSON using --json Flag\nDESCRIPTION: Introduces the `--json` command-line flag in Jest 0.6.0. This option instructs Jest to print test results in JSON format instead of the standard human-readable output.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/workers/repository/update/pr/changelog/__fixtures__/jest.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n--json\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for GitHub GraphQL Utilities\nDESCRIPTION: Illustrates the file organization for the GitHub GraphQL components within the Renovate project. It highlights key directories like `cache-strategies` (for memory and persistent caching), `query-adapters` (for releases and tags), the core `datasource-fetcher.ts` handling pagination logic, and the `index.ts` facade.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/util/github/graphql/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nlib/util/github/graphql\n│\n├── cache-strategies\n│   ├── abstract-cache-strategy.ts   <- common logic: `reconcile()` and `finalize()`\n│   ├── memory-cache-strategy.ts     <- single Renovate run (private packages)\n│   └── package-cache-strategy.ts    <- long-term persistence (public packages)\n│\n├── query-adapters\n│   ├── releases-query-adapter.ts    <- GitHub releases\n│   └── tags-query-adapter.ts        <- GitHub tags\n│\n├── datasource-fetcher.ts            <- Complex pagination loop\n│\n└── index.ts                         <- Facade that hides whole thing\n```\n\n----------------------------------------\n\nTITLE: Extending an Unscoped npm-hosted Renovate Preset\nDESCRIPTION: This JSON snippet shows how to extend an npm-hosted Renovate preset that is not scoped (e.g., published as `renovate-config-fastcore`). The preset is referenced by its shorthand name (`fastcore`) in the `extends` array within `renovate.json`. This method is deprecated.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/config-presets.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": [\"fastcore\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Map, WeakMap, and Set in Jest Context\nDESCRIPTION: Mentions fixing mocking support for the standard JavaScript built-in objects `Map`, `WeakMap`, and `Set` in Jest version 0.8.0.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/workers/repository/update/pr/changelog/__fixtures__/jest.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nMap\n```\n\nLANGUAGE: javascript\nCODE:\n```\nWeakMap\n```\n\nLANGUAGE: javascript\nCODE:\n```\nSet\n```\n\n----------------------------------------\n\nTITLE: Defining a Zod Object Schema with Recommended Naming (TypeScript)\nDESCRIPTION: Defines a basic Zod schema named `ComplexNumber` for an object containing two number properties, `re` and `im`. This example follows the guideline of using capitalized names without a `Schema` suffix. Requires the `zod` library imported as `z`.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/development/zod.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst ComplexNumber = z.object({\n  re: z.number(),\n  im: z.number(),\n});\n```\n\n----------------------------------------\n\nTITLE: Example Docker Image Tag (Version with Variant)\nDESCRIPTION: An example Docker image tag (`14.17.4-alpine3.11`) that includes a version number and a variant (`alpine3.11`). Renovate understands this format and can update the version while preserving the variant (e.g., to `14.17.5-alpine3.11`).\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/getting-started/use-cases.md#_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n`14.17.4-alpine3.11`\n```\n\n----------------------------------------\n\nTITLE: Disabling Stack Traces in Jest Output using --noStackTrace Flag\nDESCRIPTION: Introduces the `--noStackTrace` command-line flag in Jest 0.5.0. This option suppresses the output of stack traces in test results.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/workers/repository/update/pr/changelog/__fixtures__/jest.md#_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\n--noStackTrace\n```\n\n----------------------------------------\n\nTITLE: Setting Navigator Online Status in Jest Tests\nDESCRIPTION: Provides an example JavaScript snippet `window.navigator.onLine = true;` as the recommended way to set the browser's online status within Jest tests using jsdom, replacing the removed global modification mentioned in version 0.7.0.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/workers/repository/update/pr/changelog/__fixtures__/jest.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.navigator.onLine = true;\n```\n\n----------------------------------------\n\nTITLE: Renovate Configuration Option: extends\nDESCRIPTION: Refers to the `extends` configuration option in Renovate's JSON configuration. It accepts an array of strings specifying configuration presets (built-in like `config:recommended` or paths to custom presets) to inherit settings from.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/getting-started/use-cases.md#_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n`extends`\n```\n\n----------------------------------------\n\nTITLE: Using 'node' in moduleFileExtensions in Jest Config\nDESCRIPTION: Indicates that `node` (referring to .node native addon files) was added to the default values for the `moduleFileExtensions` configuration option in Jest version 0.8.0.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/workers/repository/update/pr/changelog/__fixtures__/jest.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\nnode\n```\n\n----------------------------------------\n\nTITLE: Identifying Utility Script to List Group Admins (Node.js)\nDESCRIPTION: References a Node.js utility script added in version 19.10.0, located at 'scripts/utils/list-group-admins.js'. This script is used to list the administrators of a specific Gitter group/forum, primarily to assist in gathering admin emails for topic exports.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/workers/repository/update/pr/changelog/__fixtures__/gitter-webapp.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nscripts/utils/list-group-admins.js\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Nested Hermit Directory Structure - Markdown\nDESCRIPTION: Illustrates a typical nested directory structure for Hermit within a project, where both the top level and a nested folder contain their own 'bin' and 'hermit' directories/files. This diagram is intended to help users visualize how to support multiple Hermit environments in a single codebase. There are no dependencies required, as this is a documentation snippet.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/manager/hermit/readme.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n├bin\n├─hermit\n├─(other files)\n├\n├nested\n├─bin\n├──hermit\n├──(other files)\n```\n\n----------------------------------------\n\nTITLE: Structuring Sentences Line-by-Line in Markdown - Markdown\nDESCRIPTION: Demonstrates the preferred practice of writing one sentence per line within Markdown files, improving clarity and facilitating reviews. Does not require any dependencies. Each sentence appears on a separate line with no additional syntax. Inputs are sentences; output is a Markdown section with each sentence on its own line.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/development/style-guide.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nFirst sentence on one line.\\nSecond sentence on a new line.\\nAnd so on.\n```\n\n----------------------------------------\n\nTITLE: Listing and Managing Renovate Updates in Markdown\nDESCRIPTION: This Markdown snippet structures the RenovateBot update statuses and user action items into clearly delineated sections, using headings and checkboxes for interaction. The checkboxes allow users to approve, unschedule, or trigger updates as needed, providing a visual and actionable overview. It requires no dependencies aside from a basic Markdown processor and is designed for user interaction, not automation. The expected input is manual checking of boxes to signal actions in the web interface, and the output is a clear workflow state for repository maintainers.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/workers/repository/__fixtures__/dependency-dashboard-with-8-PR.txt#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## Pending Approval\n\nThese branches will be created by Renovate only once you click their checkbox below.\n\n - [ ] <!-- approve-branch=branchName1 -->pr1\n - [ ] <!-- approve-branch=branchName2 -->pr2\n - [ ] <!-- approve-all-pending-prs -->🔐 **Create all pending approval PRs at once** 🔐\n\n## Awaiting Schedule\n\nThese updates are awaiting their schedule. Click on a checkbox to get an update now.\n\n - [ ] <!-- unschedule-branch=branchName3 -->pr3\n - [ ] <!-- unschedule-branch=branchName4 -->pr4\n\n## Rate-Limited\n\nThese updates are currently rate-limited. Click on a checkbox below to force their creation now.\n\n - [ ] <!-- unlimit-branch=branchName5 -->pr5\n - [ ] <!-- unlimit-branch=branchName6 -->pr6\n - [ ] <!-- create-all-rate-limited-prs -->🔐 **Create all rate-limited PRs at once** 🔐\n\n## Errored\n\nThese updates encountered an error and will be retried. Click on a checkbox below to force a retry now.\n\n - [ ] <!-- retry-branch=branchName7 -->pr7\n - [ ] <!-- retry-branch=branchName8 -->pr8\n\n## Pending Branch Automerge\n\nThese updates await pending status checks before automerging. Click on a checkbox to abort the branch automerge, and create a PR instead.\n\n - [ ] <!-- approvePr-branch=branchName9 -->pr9\n```\n\n----------------------------------------\n\nTITLE: Manually Updating Static Data using pnpm (Shell)\nDESCRIPTION: This shell command utilizes the pnpm package manager to execute the 'update-static-data' script defined in the project's package.json file. Running this command manually triggers the process to refresh the static data files bundled within the Renovate repository. This requires pnpm to be installed and the project repository to be cloned locally.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/development/static-data.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm run update-static-data\n```\n\n----------------------------------------\n\nTITLE: Defining an npm-hosted Renovate Preset in package.json\nDESCRIPTION: This JSON snippet illustrates how to define a Renovate preset within an npm package's `package.json` file. The configuration object is placed under the `renovate-config.default` key. This method of hosting presets via npm is deprecated.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/config-presets.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"renovate-config-fastcore\",\n  \"version\": \"0.0.1\",\n  \"renovate-config\": {\n    \"default\": {\n      \"extends\": [\"config:recommended\", \"schedule:nonOfficeHours\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Identifying Utility Script to Get Email for a User (Node.js)\nDESCRIPTION: References a Node.js utility script added in version 19.10.0, located at 'scripts/utils/email-for-user.js'. This script is used to retrieve the email address associated with a given Gitter user.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/workers/repository/update/pr/changelog/__fixtures__/gitter-webapp.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nscripts/utils/email-for-user.js\n```\n\n----------------------------------------\n\nTITLE: Identifying Utility Script to List All Forum Admins (Node.js)\nDESCRIPTION: References a Node.js utility script added in version 19.10.0, located at 'scripts/utils/list-admins-of-every-forum.js'. This script helps gather emails of administrators across all forums, likely related to the topic export feature.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/workers/repository/update/pr/changelog/__fixtures__/gitter-webapp.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nscripts/utils/list-admins-of-every-forum.js\n```\n\n----------------------------------------\n\nTITLE: Using Object.defineProperty to Modify Properties in Jest Tests\nDESCRIPTION: Recommends using the standard JavaScript function `Object.defineProperty` for modifying object properties in Jest tests, as an alternative to the removed `mockSetReadOnlyProperty` utility, mentioned in version 0.7.0 changes.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/workers/repository/update/pr/changelog/__fixtures__/jest.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nObject.defineProperty\n```\n\n----------------------------------------\n\nTITLE: Example Composer Short Version String\nDESCRIPTION: Illustrates a potentially incomplete Composer version string where the patch version is omitted. Some package authors may use this format instead of the full '1.2.0'.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/modules/versioning/composer/readme.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n`1.2`\n```\n\n----------------------------------------\n\nTITLE: Identifying Utility Script to Delete a Group/Community (Node.js)\nDESCRIPTION: References a Node.js utility script added in version 19.5.0, located at 'scripts/utils/delete-group.js'. This script provides functionality to delete a specified group or community within Gitter.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/workers/repository/update/pr/changelog/__fixtures__/gitter-webapp.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nscripts/utils/delete-group.js\n```\n\n----------------------------------------\n\nTITLE: Example Docker Image Name: node\nDESCRIPTION: Represents the `node` image from Docker Hub, used as a specific example of a Docker-compatible image whose various tags Renovate can track and propose updates for.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/getting-started/use-cases.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n`node`\n```\n\n----------------------------------------\n\nTITLE: Referencing Removed mockSetReadOnlyProperty Utility in Jest\nDESCRIPTION: Notes the removal of the `mockSetReadOnlyProperty` utility from the global jsdom environment in Jest 0.7.0. Users should use the standard `Object.defineProperty` instead.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/workers/repository/update/pr/changelog/__fixtures__/jest.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nmockSetReadOnlyProperty\n```\n\n----------------------------------------\n\nTITLE: Running Jest in Watch Mode using --watch Flag\nDESCRIPTION: Mentions the addition of the `--watch` command-line flag in Jest 0.5.5. This flag enables Jest's watch mode, which automatically re-runs tests when file changes are detected.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/workers/repository/update/pr/changelog/__fixtures__/jest.md#_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\n--watch\n```\n\n----------------------------------------\n\nTITLE: Omitting Unreachable Code from Coverage - TypeScript\nDESCRIPTION: This snippet demonstrates how to exclude unreachable code from code coverage analysis by appending a 'v8 ignore next' comment. This practice helps ensure that code coverage metrics accurately reflect executable code. Dependency: Requires a code coverage tool compatible with v8 coverage comments. No inputs or outputs—serves as a guideline for coverage handling.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/development/best-practices.md#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n/* v8 ignore next -- can never happen */\n```\n\n----------------------------------------\n\nTITLE: Avoiding Punctuation at End of Markdown List Items - Markdown\nDESCRIPTION: Illustrates the guideline of omitting punctuation at the end of list items in Markdown. Input is a single bullet point with a terminal period or comma omitted; output is a single-line Markdown list item. No dependencies involved. Limitation: Applies only to Markdown lists, not to prose.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/development/style-guide.md#_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n- List item, no punctuation at the end\n```\n\n----------------------------------------\n\nTITLE: Avoiding Contractions and Possessives in Markdown Lists - Markdown\nDESCRIPTION: Shows a list of discouraged contractions and possessives for documentation, conveying what word forms to avoid. No dependencies are needed. The key input is a list of words in colloquial or contracted form; the output is a plain Markdown list itemizing these words. Limitation: Does not enforce usage programmatically.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/development/style-guide.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\ndon't\\nwon't\\ndoesn't\\nshouldn't\\nwouldn't\\nmanager's\\nfile's\n```\n\n----------------------------------------\n\nTITLE: Example Git Branch Name: main\nDESCRIPTION: Refers to the `main` branch, the common default branch name in Git repositories. In the automerge example, this is the target branch where Renovate merges submodule updates and which triggers a deployment workflow.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/getting-started/use-cases.md#_snippet_17\n\nLANGUAGE: text\nCODE:\n```\n`main`\n```\n\n----------------------------------------\n\nTITLE: Example Repository Name: renovatebot/renovatebot.github.io\nDESCRIPTION: Represents the repository used for building and hosting the Renovate documentation website. In the provided example, this repository contains a Git submodule link pointing to `renovatebot/renovate`.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/getting-started/use-cases.md#_snippet_16\n\nLANGUAGE: text\nCODE:\n```\n`renovatebot/renovatebot.github.io`\n```\n\n----------------------------------------\n\nTITLE: Example Repository Name: renovatebot/renovate\nDESCRIPTION: Represents the main source code repository for the Renovate project itself. Used in an example demonstrating how Renovate can update Git submodules and automerge the changes in a dependent repository.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/getting-started/use-cases.md#_snippet_15\n\nLANGUAGE: text\nCODE:\n```\n`renovatebot/renovate`\n```\n\n----------------------------------------\n\nTITLE: Identifying Utility Script to Auto-Remove Users from Room (Node.js)\nDESCRIPTION: References a Node.js utility script mentioned in version 19.1.0, located at 'scripts/utils/auto-remove-from-room.js'. This script handles automatic user removal from rooms and was updated to be robust against non-existent rooms.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/lib/workers/repository/update/pr/changelog/__fixtures__/gitter-webapp.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nscripts/utils/auto-remove-from-room.js\n```\n\n----------------------------------------\n\nTITLE: Deprecated: Storing Encrypted Secrets in Renovate Config (JSON)\nDESCRIPTION: Demonstrates the deprecated method of embedding an encrypted token directly within the `hostRules` section of a Renovate JSON configuration file. The `encrypted` object contains the secret value generated by the Renovate encryption tool. This approach is no longer recommended and will cease to function.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/usage/mend-hosted/migrating-secrets.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hostRules\": [\n    {\n      \"matchHost\": \"github.com\",\n      \"encrypted\": {\n        \"token\": \"drsMDVf6M2hTZCN......+gQm/0Rpw\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Full Forms Instead of Contractions in Markdown Lists - Markdown\nDESCRIPTION: Presents the recommended full-form alternatives to common contractions for user-facing text. Requires no external libraries. Each item is an explicit, uncontracted phrase presented as a Markdown list. Inputs are full-form English phrases; output is a simple Markdown bullet list.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/development/style-guide.md#_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\ndo not\\nwill not\\ndoes not\\nshould not\\nwould not\n```\n\n----------------------------------------\n\nTITLE: Avoiding Manually Ordered Numbered Lists in Markdown - Markdown\nDESCRIPTION: Displays an example of a manually-numbered Markdown list where each item uses a sequential number. This is discouraged in favor of using repeated '1.' preamble for automatic numbering. There are no dependencies. Inputs are list items prefixed by 1., 2., 3.; output is a static Markdown ordered list. Limitation: Sensitive to renumbering or inserted/removed lines.\nSOURCE: https://github.com/renovatebot/renovate/blob/main/docs/development/style-guide.md#_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n1. First item\\n2. Second item\\n3. Third item\n```"
  }
]