[
  {
    "owner": "livebook-dev",
    "repo": "pythonx",
    "content": "TITLE: Using the ~PY Sigil for Interactive Python Evaluation\nDESCRIPTION: Shows how to use the ~PY sigil for interactive Python evaluation in dynamic environments like IEx and Livebook, with automatic variable sharing.\nSOURCE: https://github.com/livebook-dev/pythonx/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\nimport Pythonx\n\nx = 1\n\n~PY\"\"\"\ny = 10\nresult = x + y\n\"\"\"\n\nresult\n#=> #Pythonx.Object<\n#=>   11\n#=> >\n\ny\n#=> #Pythonx.Object<\n#=>   10\n#=> >\n```\n\n----------------------------------------\n\nTITLE: Evaluating Python Code with Global Variables\nDESCRIPTION: Demonstrates how to evaluate Python code with Pythonx.eval/2, providing initial global variables and accessing the result and updated globals.\nSOURCE: https://github.com/livebook-dev/pythonx/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\n{result, globals} =\n  Pythonx.eval(\n    \"\"\"\n    y = 10\n    x + y\n    \"\"\",\n    %{\"x\" => 1}\n  )\n\nPythonx.decode(result)\n#=> 11\n\nglobals\n#=> %{\n#=>   \"x\" => #Pythonx.Object<\n#=>     1\n#=>   >,\n#=>   \"y\" => #Pythonx.Object<\n#=>     10\n#=>   >\n#=> }\n```\n\n----------------------------------------\n\nTITLE: Initializing Python Interpreter with Dependencies\nDESCRIPTION: Initializes the Python interpreter with a specific Python version (3.13) and dependencies (numpy) using a TOML-formatted configuration.\nSOURCE: https://github.com/livebook-dev/pythonx/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\nPythonx.uv_init(\"\"\"\n[project]\nname = \"project\"\nversion = \"0.0.0\"\nrequires-python = \"==3.13.*\"\ndependencies = [\n  \"numpy==2.2.2\"\n]\n\"\"\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Pythonx in a Mix Project\nDESCRIPTION: Demonstrates how to configure Pythonx with the desired Python version and dependencies in a Mix project's config/config.exs file.\nSOURCE: https://github.com/livebook-dev/pythonx/blob/main/README.md#2025-04-21_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\nimport Config\n\nconfig :pythonx, :uv_init,\n  pyproject_toml: \"\"\"\n  [project]\n  name = \"project\"\n  version = \"0.0.0\"\n  requires-python = \"==3.13.*\"\n  dependencies = [\n    \"numpy==2.2.2\"\n  ]\n  \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Installing Pythonx as a Dependency in a Script\nDESCRIPTION: Adds Pythonx to your dependencies in a script context using Mix.install/1, specifying version 0.4.0.\nSOURCE: https://github.com/livebook-dev/pythonx/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\nMix.install([\n  {:pythonx, \"~> 0.4.0\"}\n])\n```\n\n----------------------------------------\n\nTITLE: Adding Pythonx to Mix Project Dependencies\nDESCRIPTION: Shows how to add Pythonx as a dependency in a Mix project configuration file.\nSOURCE: https://github.com/livebook-dev/pythonx/blob/main/README.md#2025-04-21_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\ndef deps do\n  [\n    {:pythonx, \"~> 0.4.0\"}\n  ]\nend\n```\n\n----------------------------------------\n\nTITLE: Updating Version and Changelog in Elixir Project\nDESCRIPTION: Update the version number in the mix.exs file and update the CHANGELOG file with new release information.\nSOURCE: https://github.com/livebook-dev/pythonx/blob/main/RELEASE.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Update version in `mix.exs` and update CHANGELOG.\n```\n\n----------------------------------------\n\nTITLE: Preparing for Next Development Cycle\nDESCRIPTION: Bump the version number in mix.exs and append '-dev' to indicate the development version.\nSOURCE: https://github.com/livebook-dev/pythonx/blob/main/RELEASE.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n6. Bump version in `mix.exs` and add `-dev`.\n```\n\n----------------------------------------\n\nTITLE: Creating Git Tag and Pushing to Remote\nDESCRIPTION: Create a new Git tag with the version number and push it to the remote repository. Wait for CI to precompile all artifacts.\nSOURCE: https://github.com/livebook-dev/pythonx/blob/main/RELEASE.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n2. Run `git tag x.y.z` and `git push --tags`.\n   1. Wait for CI to precompile all artifacts.\n```\n\n----------------------------------------\n\nTITLE: Publishing to Hex Package Manager\nDESCRIPTION: Publish the updated package to the Hex package manager for Elixir.\nSOURCE: https://github.com/livebook-dev/pythonx/blob/main/RELEASE.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n5. Run `mix hex.publish`.\n```\n\n----------------------------------------\n\nTITLE: Publishing GitHub Release\nDESCRIPTION: Publish a GitHub release with the changelog notes. CI creates a draft, which needs to be published to compute the checksum.\nSOURCE: https://github.com/livebook-dev/pythonx/blob/main/RELEASE.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n3. Publish GH release with copied changelog notes (CI creates a draft, we need to publish it to compute the checksum).\n```\n\n----------------------------------------\n\nTITLE: Computing Checksums for Elixir Make\nDESCRIPTION: Run the elixir_make.checksum mix task to compute checksums for all artifacts.\nSOURCE: https://github.com/livebook-dev/pythonx/blob/main/RELEASE.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n4. Run `mix elixir_make.checksum --all`.\n```"
  }
]