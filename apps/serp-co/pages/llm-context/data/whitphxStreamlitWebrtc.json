[
  {
    "owner": "whitphx",
    "repo": "streamlit-webrtc",
    "content": "TITLE: Basic Streamlit WebRTC Implementation\nDESCRIPTION: Minimal example showing how to create a basic video/audio streaming application using streamlit-webrtc.\nSOURCE: https://github.com/whitphx/streamlit-webrtc/blob/main/README.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom streamlit_webrtc import webrtc_streamer\n\nwebrtc_streamer(key=\"sample\")\n```\n\n----------------------------------------\n\nTITLE: Video Frame Processing with Callback\nDESCRIPTION: Example demonstrating how to process video frames using a callback function that flips the image vertically.\nSOURCE: https://github.com/whitphx/streamlit-webrtc/blob/main/README.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom streamlit_webrtc import webrtc_streamer\nimport av\n\n\ndef video_frame_callback(frame):\n    img = frame.to_ndarray(format=\"bgr24\")\n\n    flipped = img[::-1,:,:]\n\n    return av.VideoFrame.from_ndarray(flipped, format=\"bgr24\")\n\n\nwebrtc_streamer(key=\"example\", video_frame_callback=video_frame_callback)\n```\n\n----------------------------------------\n\nTITLE: Parameterized Video Processing\nDESCRIPTION: Implementation showing how to pass parameters to the video processing callback using Streamlit widgets.\nSOURCE: https://github.com/whitphx/streamlit-webrtc/blob/main/README.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\nfrom streamlit_webrtc import webrtc_streamer\nimport av\n\n\nflip = st.checkbox(\"Flip\")\n\n\ndef video_frame_callback(frame):\n    img = frame.to_ndarray(format=\"bgr24\")\n\n    flipped = img[::-1,:,:] if flip else img\n\n    return av.VideoFrame.from_ndarray(flipped, format=\"bgr24\")\n\n\nwebrtc_streamer(key=\"example\", video_frame_callback=video_frame_callback)\n```\n\n----------------------------------------\n\nTITLE: Thread-Safe Video Frame Analysis\nDESCRIPTION: Advanced example showing how to safely access video frames from outside the callback using threading locks and perform continuous analysis.\nSOURCE: https://github.com/whitphx/streamlit-webrtc/blob/main/README.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport threading\n\nimport cv2\nimport streamlit as st\nfrom matplotlib import pyplot as plt\n\nfrom streamlit_webrtc import webrtc_streamer\n\nlock = threading.Lock()\nimg_container = {\"img\": None}\n\n\ndef video_frame_callback(frame):\n    img = frame.to_ndarray(format=\"bgr24\")\n    with lock:\n        img_container[\"img\"] = img\n\n    return frame\n\n\nctx = webrtc_streamer(key=\"example\", video_frame_callback=video_frame_callback)\n\nfig_place = st.empty()\nfig, ax = plt.subplots(1, 1)\n\nwhile ctx.state.playing:\n    with lock:\n        img = img_container[\"img\"]\n    if img is None:\n        continue\n    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n    ax.cla()\n    ax.hist(gray.ravel(), 256, [0, 256])\n    fig_place.pyplot(fig)\n```\n\n----------------------------------------\n\nTITLE: Configuring Twilio TURN Server for WebRTC in Streamlit\nDESCRIPTION: Example code for integrating Twilio's Network Traversal Service as a TURN server solution. This is recommended for environments where WebRTC connections might be blocked by firewalls or proxies.\nSOURCE: https://github.com/whitphx/streamlit-webrtc/blob/main/README.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n## This sample code is from https://www.twilio.com/docs/stun-turn/api\n# Download the helper library from https://www.twilio.com/docs/python/install\nimport os\nfrom twilio.rest import Client\n\n# Find your Account SID and Auth Token at twilio.com/console\n# and set the environment variables. See http://twil.io/secure\naccount_sid = os.environ['TWILIO_ACCOUNT_SID']\nauth_token = os.environ['TWILIO_AUTH_TOKEN']\nclient = Client(account_sid, auth_token)\n\ntoken = client.tokens.create()\n\n# Then, pass the ICE server information to webrtc_streamer().\nwebrtc_streamer(\n  # ...\n  rtc_configuration={\n      \"iceServers\": token.ice_servers\n  }\n  # ...\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring STUN Server for WebRTC Connection in Streamlit\nDESCRIPTION: Example of configuring a STUN server using the rtc_configuration parameter in webrtc_streamer(). This is essential for establishing media streaming connections when the server is on a remote host.\nSOURCE: https://github.com/whitphx/streamlit-webrtc/blob/main/README.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nwebrtc_streamer(\n    # ...\n    rtc_configuration={  # Add this config\n        \"iceServers\": [{\"urls\": [\"stun:stun.l.google.com:19302\"]}]\n    }\n    # ...\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Streamlit WebRTC Package\nDESCRIPTION: Command to install the streamlit-webrtc package using pip package manager.\nSOURCE: https://github.com/whitphx/streamlit-webrtc/blob/main/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ pip install -U streamlit-webrtc\n```\n\n----------------------------------------\n\nTITLE: Setting up SSL Proxy for HTTPS Development with streamlit-webrtc\nDESCRIPTION: Command sequence for running a Streamlit app locally with HTTPS using the ssl-proxy tool. This is necessary for webcam/microphone access since getUserMedia() API requires a secure context.\nSOURCE: https://github.com/whitphx/streamlit-webrtc/blob/main/README.md#2025-04-17_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ streamlit run your_app.py  # Assume your app is running on http://localhost:8501\n# Then, after downloading the binary from the GitHub page above to ./ssl-proxy,\n$ ./ssl-proxy -from 0.0.0.0:8000 -to 127.0.0.1:8501  # Proxy the HTTP page from port 8501 to port 8000 via HTTPS\n# Then access https://localhost:8000\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging for aiortc Library in streamlit-webrtc\nDESCRIPTION: Example of setting log levels for the aiortc dependency used by streamlit-webrtc. This controls the verbosity of logs from the underlying WebRTC implementation.\nSOURCE: https://github.com/whitphx/streamlit-webrtc/blob/main/README.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\naioice_logger = logging.getLogger(\"aioice\")\naioice_logger.setLevel(logging.WARNING)\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging for streamlit-webrtc Library\nDESCRIPTION: Example of setting log levels for streamlit-webrtc and its dependencies. This demonstrates how to control the verbosity of logs from the library and related packages like aiortc.\nSOURCE: https://github.com/whitphx/streamlit-webrtc/blob/main/README.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nst_webrtc_logger = logging.getLogger(\"streamlit_webrtc\")\nst_webrtc_logger.setLevel(logging.WARNING)\n```\n\n----------------------------------------\n\nTITLE: Running the Streamlit Application\nDESCRIPTION: Launches the Streamlit application for testing and development.\nSOURCE: https://github.com/whitphx/streamlit-webrtc/blob/main/DEVELOPMENT.md#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ streamlit run home.py\n```\n\n----------------------------------------\n\nTITLE: Running the Frontend Development Server\nDESCRIPTION: Navigates to the frontend directory and starts the development server using pnpm.\nSOURCE: https://github.com/whitphx/streamlit-webrtc/blob/main/DEVELOPMENT.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ cd streamlit_webrtc/frontend\n$ pnpm dev\n```\n\n----------------------------------------\n\nTITLE: Installing Development Dependencies with uv\nDESCRIPTION: Uses uv to synchronize and install all project dependencies required for development.\nSOURCE: https://github.com/whitphx/streamlit-webrtc/blob/main/DEVELOPMENT.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ uv sync\n```\n\n----------------------------------------\n\nTITLE: Setting Up Git Pre-commit Hooks\nDESCRIPTION: Installs pre-commit hooks to enforce code quality checks before commits.\nSOURCE: https://github.com/whitphx/streamlit-webrtc/blob/main/DEVELOPMENT.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ pre-commit install\n```\n\n----------------------------------------\n\nTITLE: Building the Package\nDESCRIPTION: Runs the build process using make to create the distributable package.\nSOURCE: https://github.com/whitphx/streamlit-webrtc/blob/main/DEVELOPMENT.md#2025-04-17_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ make build\n```\n\n----------------------------------------\n\nTITLE: Bumping Version for Release\nDESCRIPTION: Uses bump-my-version to increment the package version, create a Git tag, and commit the changes.\nSOURCE: https://github.com/whitphx/streamlit-webrtc/blob/main/DEVELOPMENT.md#2025-04-17_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ uv run bump-my-version bump <version> --tag --commit --commit-args='--allow-empty' --verbose\n```\n\n----------------------------------------\n\nTITLE: Pushing Release to GitHub\nDESCRIPTION: Pushes the version commit and tags to GitHub to trigger the CI/CD release process.\nSOURCE: https://github.com/whitphx/streamlit-webrtc/blob/main/DEVELOPMENT.md#2025-04-17_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ git push\n$ git push --tags\n```\n\n----------------------------------------\n\nTITLE: Changelog Structure in Markdown\nDESCRIPTION: Structured markdown document showing version history, changes, fixes and updates to the streamlit-webrtc library. Each version includes date and categorized changes under headings like Added, Changed, and Fixed.\nSOURCE: https://github.com/whitphx/streamlit-webrtc/blob/main/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\nAll notable changes to this project will be documented in this file.\n\n## [Unreleased]\n\n## [0.62.4] - 2025-04-12\n\n### Fixed\n\n- Refine the message of the \"taking too long\" warning and set the timeout to 10 seconds display it\n```"
  }
]