[
  {
    "owner": "dgate-io",
    "repo": "dgate-api",
    "content": "TITLE: Example Module Implementation\nDESCRIPTION: Demonstration of a basic module function using the ModuleContext interface to access node properties. Shows how to retrieve tags and version information from the node context.\nSOURCE: https://github.com/dgate-io/dgate-api/blob/main/pkg/modules/README.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction exampleModule(): string {\n    const tags = this.node.tags;\n    const version = this.node.version;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Module Context Interface\nDESCRIPTION: TypeScript interface definition for ModuleContext that specifies available properties and their permission requirements. Includes request/response objects, namespace, service, route, module, node and cluster objects with their respective permission levels.\nSOURCE: https://github.com/dgate-io/dgate-api/blob/main/pkg/modules/README.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ModuleContext {\n    // this is the request object (requires request permission/minimal)\n    request: Request;\n    // this is the response object, this may not available for all modules (requires response permission/minimal)\n    response: Response;\n\n    // this is the namespace object (requires namespace permission/basic)\n    namespace: Namespace;\n    // this is the service object (requires service permission/basic)\n    service: Service;\n    // this is the route object (requires route permission/basic)\n    route: Route;\n    // this is the module object (requires module permission/basic)\n    module: Module;\n    \n    // this is the node object (requires node permission/advanced)\n    node: Node;\n    // this is the cluster object (requires cluster permission/advanced)\n    cluster: Cluster;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DGate Server with Go\nDESCRIPTION: Command to install the DGate server using Go's package manager. Requires Go version 1.22 or higher to install the latest version from GitHub.\nSOURCE: https://github.com/dgate-io/dgate-api/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# requires go 1.22+\ngo install github.com/dgate-io/dgate-api/cmd/dgate-server@latest\n```\n\n----------------------------------------\n\nTITLE: Running gRPC Client\nDESCRIPTION: Command to run the gRPC client and view the hello world response.\nSOURCE: https://github.com/dgate-io/dgate-api/blob/main/functional-tests/grpc_tests/README.md#2025-04-23_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ $(go env GOPATH)/bin/greeter_client\nGreeting: Hello world\n```\n\n----------------------------------------\n\nTITLE: Starting gRPC Server\nDESCRIPTION: Command to start the gRPC server in the background using the compiled binary from GOPATH.\nSOURCE: https://github.com/dgate-io/dgate-api/blob/main/functional-tests/grpc_tests/README.md#2025-04-23_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ $(go env GOPATH)/bin/greeter_server &\n```\n\n----------------------------------------\n\nTITLE: Installing gRPC Hello World Components\nDESCRIPTION: Commands to download the required gRPC example client and server packages using go get.\nSOURCE: https://github.com/dgate-io/dgate-api/blob/main/functional-tests/grpc_tests/README.md#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ go get google.golang.org/grpc/examples/helloworld/greeter_client\n$ go get google.golang.org/grpc/examples/helloworld/greeter_server\n```"
  }
]