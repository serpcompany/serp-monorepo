[
  {
    "owner": "rocicorp",
    "repo": "zero-docs",
    "content": "TITLE: Basic Zero Usage with React Components\nDESCRIPTION: Demonstrates the fundamental usage of Zero with React, showing how to query data with filters, limits, and relationships. The example uses the useZero and useQuery hooks to fetch and display a list of issues with related data.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/react.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useQuery, useZero} from '@rocicorp/zero/react';\nimport {type Schema} from './schema.ts';\nimport {type Mutators} from './mutators.ts';\n\nfunction IssueList() {\n  const z = useZero<Schema, Mutators>();\n  let issueQuery = z.query.issue\n    .related('creator')\n    .related('labels')\n    .limit(100);\n\n  const userID = selectedUserID();\n\n  if (userID) {\n    issueQuery = issueQuery.where('creatorID', '=', userID);\n  }\n\n  const [issues, issuesDetail] = useQuery(issueQuery);\n\n  return (\n    <>\n      <div>\n        {issuesDetail.type === 'complete' ? 'Complete' : 'Partial'}\n        results\n      </div>\n      <div>\n        {issues.map(issue => (\n          <IssueRow issue={issue} />\n        ))}\n      </div>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Basic Zero Mutator\nDESCRIPTION: Demonstrates how to use the basic insert mutator generated by Zero for a user table. This snippet shows the basic pattern of accessing mutators through the zero.mutate.<tablename> property.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/writing-data.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst z = new Zero(...);\nz.mutate.user.insert({\n\tid: nanoid(),\n\tusername: 'abby',\n\tlanguage: 'en-us',\n});\n```\n\n----------------------------------------\n\nTITLE: Selecting Tables with ZQL in TypeScript\nDESCRIPTION: Demonstrates how to initialize a ZQL query by selecting a table. ZQL queries always return the entire row to enable better local reuse and type sharing between different parts of the code.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/reading-data.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst z = new Zero(...);\n\n// Returns a query that selects all rows and columns from the issue table.\nz.query.issue;\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Mutators in Zero\nDESCRIPTION: Defines custom mutators for the Zero framework, demonstrating how to read data within a client mutator using ZQL, validate inputs, and make updates transactionally.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/custom-mutators.mdx#2025-04-23_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nexport function createMutators() {\n  return {\n    issue: {\n      update: async (tx, {id, title}: {id: string; title: string}) => {\n        // Read existing issue\n        const prev = await tx.query.issue.where('id', id).one().run();\n\n        // Validate title length. Legacy issues are exempt.\n        if (!prev.isLegacy && title.length > 100) {\n          throw new Error(`Title is too long`);\n        }\n\n        await tx.mutate.issue.update({id, title});\n      },\n    },\n  } as const satisfies CustomMutatorDefs<typeof schema>;\n}\n```\n\n----------------------------------------\n\nTITLE: Preloading Data in Zero with Related Entities\nDESCRIPTION: This snippet demonstrates how to preload a large dataset (1000 issues with related entities) using Zero's preload() helper. This approach avoids the overhead of materializing all data into JavaScript objects, which is beneficial for preloading large amounts of data that don't need immediate rendering.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/reading-data.mdx#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\n// Preload the first 1k issues + their creator, assignee, labels, and\n// the view state for the active user.\n//\n// There's no need to render this data, so we don't use `useQuery()`:\n// this avoids the overhead of pulling all this data into JS objects.\nz.query.issue\n  .related('creator')\n  .related('assignee')\n  .related('labels')\n  .related('viewState', q => q.where('userID', z.userID).one())\n  .orderBy('created', 'desc')\n  .limit(1000)\n  .preload();\n```\n\n----------------------------------------\n\nTITLE: Inserting Records with Zero\nDESCRIPTION: Shows how to create new records using the insert mutator. This basic example creates a new user with an ID, username, and language preference.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/writing-data.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nz.mutate.user.insert({\n  id: nanoid(),\n  username: 'sam',\n  language: 'js',\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Table Schema in Zero\nDESCRIPTION: This snippet demonstrates how to define a table in Zero schema using the table function. It creates a 'user' table with string and boolean columns and sets a primary key.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/zero-schema.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {table, string, boolean} from '@rocicorp/zero';\n\nconst user = table('user')\n  .columns({\n    id: string(),\n    name: string(),\n    partner: boolean(),\n  })\n  .primaryKey('id');\n```\n\n----------------------------------------\n\nTITLE: Performing Batch Mutations in Zero\nDESCRIPTION: Demonstrates how to perform multiple CRUD operations atomically in a single transaction. This example creates both a user record and a related language record in one batch operation.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/writing-data.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nz.mutateBatch(async tx => {\n  const samID = nanoid();\n  tx.user.create({\n    id: samID,\n    username: 'sam',\n  });\n\n  const langID = nanoid();\n  tx.language.insert({\n    id: langID,\n    userID: samID,\n    name: 'js',\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Relationships with Compound Keys in Zero Schema\nDESCRIPTION: This snippet demonstrates how to define relationships that traverse compound keys. It links a message table to a user table using compound keys.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/zero-schema.mdx#2025-04-23_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nconst messageRelationships = relationships(message, ({one}) => ({\n  sender: one({\n    sourceField: ['senderOrgID', 'senderUserID'],\n    destSchema: user,\n    destField: ['orgID', 'userID'],\n  }),\n}));\n```\n\n----------------------------------------\n\nTITLE: Building Compound Filters with ZQL in TypeScript\nDESCRIPTION: Demonstrates how to create complex filtering conditions using logical operators (and, or, not) in ZQL. Both callback-based compound expressions and chained where clauses are shown.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/reading-data.mdx#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n// Get all issues that have priority 'critical' or else have both\n// priority 'medium' and not more than 100 votes.\nz.query.issue.where(({cmp, and, or, not}) =>\n  or(\n    cmp('priority', 'critical'),\n    and(cmp('priority', 'medium'), not(cmp('numVotes', '>', 100))),\n  ),\n);\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// Find issues with priority 3 or higher, owned by aa\nz.query.issue.where('priority', '>=', 3).where('owner', 'aa');\n```\n\n----------------------------------------\n\nTITLE: CRUD Operations in Custom Mutators\nDESCRIPTION: Demonstrates the various CRUD operations available within a custom mutator, showing how to insert, upsert, update, and delete data using the Transaction interface.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/custom-mutators.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nasync function myMutator(tx: Transaction) {\n  // Insert a new issue\n  await tx.mutate.issue.insert({\n    id: 'issue-123',\n    title: 'New title',\n    description: 'New description',\n  });\n\n  // Upsert a new issue\n  await tx.mutate.issue.upsert({\n    id: 'issue-123',\n    title: 'New title',\n    description: 'New description',\n  });\n\n  // Update an issue\n  await tx.mutate.issue.update({\n    id: 'issue-123',\n    title: 'New title',\n  });\n\n  // Delete an issue\n  await tx.mutate.issue.delete({\n    id: 'issue-123',\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Compound Primary Keys in Zero Schema\nDESCRIPTION: This snippet demonstrates how to define a compound primary key by passing multiple columns to the primaryKey method. It creates a 'user' table with a compound key of 'orgID' and 'userID'.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/zero-schema.mdx#2025-04-23_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nconst user = table('user')\n  .columns({\n    orgID: string(),\n    userID: string(),\n    name: string(),\n  })\n  .primaryKey('orgID', 'userID');\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple Custom Mutator in TypeScript\nDESCRIPTION: A basic custom mutator function that validates a title's length before updating an issue record. This client-side implementation shows the standard pattern for custom mutators in Zero.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/custom-mutators.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nasync function updateIssue(\n  tx: Transaction,\n  {id, title}: {id: string; title: string},\n) {\n  // Validate title length.\n  if (title.length > 100) {\n    throw new Error(`Title is too long`);\n  }\n\n  await tx.mutate.issue.update({id, title});\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Related Data with ZQL in TypeScript\nDESCRIPTION: Shows how to retrieve related rows based on relationships defined in the Zero schema. Multiple relationships can be fetched in a single query, returning hierarchical data structures.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/reading-data.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// Get all issues and their related comments\nz.query.issue.related('comments');\n```\n\nLANGUAGE: tsx\nCODE:\n```\nz.query.issue.related('comments').related('reactions').related('assignees');\n```\n\n----------------------------------------\n\nTITLE: Refining Relationship Queries with ZQL in TypeScript\nDESCRIPTION: Demonstrates how to refine related data queries by providing a query function as a second parameter to the related method. This allows for filtering, ordering, and limiting the related rows.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/reading-data.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nz.query.issue.related(\n  'comments',\n  // It is common to use the 'q' shorthand variable for this parameter,\n  // but it is a _comment_ query in particular here, exactly as if you\n  // had done z.query.comment.\n  q => q.orderBy('modified', 'desc').limit(100).start(lastSeenComment),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication and Authorization in Zero Mutators\nDESCRIPTION: Demonstrates how to implement permission checks in custom mutators by passing authentication data and querying user permissions.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/custom-mutators.mdx#2025-04-23_snippet_13\n\nLANGUAGE: ts\nCODE:\n```\ntype AuthData = {\n  sub: string;\n};\n\nexport function createMutators(authData: AuthData | undefined) {\n  return {\n    issue: {\n      launchMissiles: async (tx, args: {target: string}) => {\n        if (!authData) {\n          throw new Error('Users must be logged in to launch missiles');\n        }\n\n        const hasPermission = await tx.query.user\n          .where('id', authData.sub)\n          .whereExists('permissions', q => q.where('name', 'launch-missiles'))\n          .one()\n          .run();\n        if (!hasPermission) {\n          throw new Error('User does not have permission to launch missiles');\n        }\n      },\n    },\n  } as const satisfies CustomMutatorDefs<typeof schema>;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Zero with JWT Authentication in TypeScript\nDESCRIPTION: Code showing how to construct a Zero instance with JWT token authentication. The userID must match the 'sub' field from the provided JWT token.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/auth.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst zero = new Zero({\n  ...,\n  auth: token, // your JWT\n  userID, // this must match the `sub` field from `token`\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Optional Fields in Insert Operations\nDESCRIPTION: Shows different ways to handle optional fields when inserting data. Demonstrates setting an explicit null value, omitting the field entirely, or setting it to undefined to use the server-side default.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/writing-data.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// Sets language to `null` specifically\nz.mutate.user.insert({\n  id: nanoid(),\n  username: 'sam',\n  language: null,\n});\n\n// Sets language to the default server-side value. Could be null, or some\n// generated or constant default value too.\nz.mutate.user.insert({\n  id: nanoid(),\n  username: 'sam',\n});\n\n// Same as above\nz.mutate.user.insert({\n  id: nanoid(),\n  username: 'sam',\n  language: undefined,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Relationships with ZQL in TypeScript\nDESCRIPTION: Shows how to implement arbitrarily nested relationships in ZQL queries, allowing for complex hierarchical data retrieval in a single query.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/reading-data.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n// Get all issues, first 100 comments for each (ordered by modified,desc),\n// and for each comment all of its reactions.\nz.query.issue.related(\n\t'comments', q => q.orderBy('modified', 'desc').limit(100).related(\n\t\t'reactions')\n\t)\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Select Permissions with Row Filtering\nDESCRIPTION: Example showing how to restrict read access to only rows created by the current user. This creates a filter that automatically excludes unauthorized data from query results rather than throwing errors.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/permissions.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ndefinePermissions<AuthData, Schema>(schema, () => {\n  const allowIfIssueCreator = (\n    authData: AuthData,\n    {cmp}: ExpressionBuilder<Schema, 'issue'>,\n  ) => cmp('creatorID', authData.sub);\n\n  return {\n    issue: {\n      row: {\n        select: [allowIfIssueCreator],\n      },\n    },\n  } satisfies PermissionsConfig<AuthData, Schema>;\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Server Results from Zero Mutations\nDESCRIPTION: Demonstrates how to asynchronously access server mutation results, handling both success and error cases through the server property.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/custom-mutators.mdx#2025-04-23_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nconst serverResult = await zero.mutate.issue.update({\n  id: 'issue-123',\n  title: 'New title',\n}).server;\n\nif (server.error) {\n  console.error('Server mutation went boom', server.error);\n} else {\n  console.log('Server mutation complete');\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Related Data with Zero ZQL\nDESCRIPTION: This snippet demonstrates how to query related data using the 'related' ZQL clause. It retrieves messages along with their senders and replies as defined in the relationships.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/zero-schema.mdx#2025-04-23_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nconst messagesWithSenderAndReplies = z.query.messages\n  .related('sender')\n  .related('replies');\n```\n\n----------------------------------------\n\nTITLE: Setting Up ZeroProvider for React Context\nDESCRIPTION: Shows how to set up the ZeroProvider component which is required for the useZero hook to work. The provider is responsible for making the Zero instance available to all child components in the React component tree.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/react.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ZeroProvider} from '@rocicorp/zero/react';\n\nexport function Root() {\n  const zero = new Zero<Schema, Mutators>(...);\n  return (\n    <ZeroProvider zero={zero}>\n      <App />\n    </ZeroProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Running One-Time Queries in Zero\nDESCRIPTION: This example shows how to execute a one-time query in Zero using the run() method instead of subscribing to query results. This is useful when you need query results only once rather than reactively tracking changes to the result set.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/reading-data.mdx#2025-04-23_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nconst results = z.query.issue.where('foo', 'bar').run();\n```\n\n----------------------------------------\n\nTITLE: Updating Records with Partial Data\nDESCRIPTION: Shows how to update only specific fields of an existing record. Demonstrates different ways to leave fields unchanged, update fields, or reset fields to null.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/writing-data.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// Leaves username field to previous value.\nz.mutate.user.update({\n  id: samID,\n  language: 'golang',\n});\n\n// Same as above\nz.mutate.user.update({\n  id: samID,\n  username: undefined,\n  language: 'haskell',\n});\n\n// Reset language field to `null`\nz.mutate.user.update({\n  id: samID,\n  language: null,\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Relationships Between Tables in Zero Schema\nDESCRIPTION: This snippet shows how to define relationships between tables using the 'one' and 'many' helpers. It creates 'sender' and 'replies' relationships for a message table.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/zero-schema.mdx#2025-04-23_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nconst messageRelationships = relationships(message, ({one, many}) => ({\n  sender: one({\n    sourceField: ['senderID'],\n    destField: ['id'],\n    destSchema: user,\n  }),\n  replies: many({\n    sourceField: ['id'],\n    destSchema: message,\n    destField: ['parentMessageID'],\n  }),\n}));\n```\n\n----------------------------------------\n\nTITLE: Update Permissions with Ownership Validation\nDESCRIPTION: Example of update rules that allow issue owners to edit but not reassign issues. Uses both preMutation and postMutation rules to verify ownership both before and after the update is applied.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/permissions.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ndefinePermissions<AuthData, Schema>(schema, () => {\n  const allowIfIssueOwner = (\n    authData: AuthData,\n    {cmp}: ExpressionBuilder<Schema, 'issue'>,\n  ) => cmp('ownerID', authData.sub);\n\n  return {\n    issue: {\n      row: {\n        update: {\n          preMutation: [allowIfIssueOwner],\n          postMutation: [allowIfIssueOwner],\n        },\n      },\n    },\n  } satisfies PermissionsConfig<AuthData, Schema>;\n});\n```\n\n----------------------------------------\n\nTITLE: Server Mutator with LLM Integration for Spam Detection\nDESCRIPTION: An advanced server mutator that uses an LLM to detect spam in issue titles, demonstrating how server-side mutators can incorporate external services and advanced validation.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/custom-mutators.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nasync function updateIssueOnServer(\n  tx: ServerTransaction,\n  {id, title}: {id: string; title: string},\n) {\n  const response = await llamaSession.prompt(\n    `Is this title update likely spam?\\n\\n${title}\\n\\nResponse \"yes\" or \"no\"`,\n  );\n  if (/yes/i.test(response)) {\n    throw new Error(`Title is likely spam`);\n  }\n\n  // delegate rest of implementation to client mutator\n  await updateIssue(tx, {id, title});\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Data with Where Clauses in ZQL\nDESCRIPTION: Demonstrates basic filtering with the where() method in ZQL. The method takes a column name and comparison parameters to filter rows based on column values.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/reading-data.mdx#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nz.query.issue.where('priority', '=', 'high');\n```\n\nLANGUAGE: tsx\nCODE:\n```\nz.query.issue.where('priority', 'high');\n```\n\n----------------------------------------\n\nTITLE: TypeScript Server Mutator Using Shared Logic\nDESCRIPTION: A server-side implementation that leverages the client-side mutator code, demonstrating how code can be shared between client and server when using TypeScript on both sides.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/custom-mutators.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nasync function updateIssueOnServer(\n  tx: ServerTransaction,\n  {id, title},\n  {id: string, title: string},\n) {\n  // Delegate to client mutator.\n  // The `ServerTransaction` here has a different implementation\n  // that runs the same ZQL queries against Postgres!\n  await updateIssue(tx, {id, title});\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Complete Zero Schema\nDESCRIPTION: This snippet demonstrates how to define the entire Zero schema using the createSchema function. It combines tables and relationships into a complete schema definition.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/zero-schema.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport {createSchema} from '@rocicorp/zero';\n\nexport const schema = createSchema(\n  {\n    tables: [user, medium, message],\n    relationships: [\n      userRelationships,\n      mediumRelationships,\n      messageRelationships,\n    ],\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Upserting Records with Zero\nDESCRIPTION: Demonstrates how to create or update records using the upsert mutator. This operation will create a new record if it doesn't exist, or update an existing one based on the primary key.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/writing-data.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nz.mutate.user.upsert({\n  id: samID,\n  username: 'sam',\n  language: 'ts',\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Table Schema with Optional Fields\nDESCRIPTION: Demonstrates how to create a table schema with an optional field. This schema defines a user table with id and name as required fields, and language as an optional field.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/writing-data.mdx#2025-04-23_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n// schema.ts\nimport {createTableSchema} from '@rocicorp/zero';\n\nconst userSchema = createTableSchema({\n  tableName: 'user',\n  columns: {\n    id: {type: 'string'},\n    name: {type: 'string'},\n    language: {type: 'string', optional: true},\n  },\n  primaryKey: ['id'],\n  relationships: {},\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting Records with Zero\nDESCRIPTION: Shows how to delete an existing record using the delete mutator. This operation requires only the primary key fields of the record to be specified.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/writing-data.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nz.mutate.user.delete({\n  id: samID,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Insert Permissions with Role Restrictions\nDESCRIPTION: Example of an insert rule that prevents creation of admin users. The rule is evaluated after insertion and allows the operation only if the inserted row doesn't have the 'admin' role.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/permissions.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ndefinePermissions<AuthData, Schema>(schema, () => {\n  const allowIfNonAdmin = (\n    authData: AuthData,\n    {cmp}: ExpressionBuilder<Schema, 'user'>,\n  ) => cmp('role', '!=', 'admin');\n\n  return {\n    user: {\n      row: {\n        insert: [allowIfNonAdmin],\n      },\n    },\n  } satisfies PermissionsConfig<AuthData, Schema>;\n});\n```\n\n----------------------------------------\n\nTITLE: Defining and Exporting Custom Mutators with TypeScript\nDESCRIPTION: A pattern for defining and exporting custom mutators in a dedicated file, using TypeScript's type system to ensure the mutators conform to the schema.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/custom-mutators.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// mutators.ts\nimport {CustomMutatorDefs} from '@rocicorp/zero';\nimport {schema} from './schema';\n\nexport function createMutators() {\n  return {\n    issue: {\n      update: async (tx, {id, title}: {id: string; title: string}) => {\n        // Validate title length. Legacy issues are exempt.\n        if (e.length > 100) {\n          throw new Error(`Title is too long`);\n        }\n        await tx.mutate.issue.update({id, title});\n      },\n    },\n  } as const satisfies CustomMutatorDefs<typeof schema>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination with ZQL in TypeScript\nDESCRIPTION: Shows how to implement pagination in ZQL using the start() method. The examples include both exclusive (default) pagination and inclusive pagination options for different use cases.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/reading-data.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nlet start: IssueRow | undefined;\nwhile (true) {\n  let q = z.query.issue.orderBy('created', 'desc').limit(100);\n  if (start) {\n    q = q.start(start);\n  }\n  const batch = await q.run();\n  console.log('got batch', batch);\n\n  if (batch.length < 100) {\n    break;\n  }\n  start = batch[batch.length - 1];\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nz.query.issue.start(row, {inclusive: true});\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Columns in Zero Schema\nDESCRIPTION: This snippet shows how to mark columns as optional (nullable) in a Zero schema. It creates a 'user' table with a nullable 'nickName' column.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/zero-schema.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst user = table('user')\n  .columns({\n    id: string(),\n    name: string(),\n    nickName: string().optional(),\n  })\n  .primaryKey('id');\n```\n\n----------------------------------------\n\nTITLE: Querying Data with Zero in SolidJS\nDESCRIPTION: This snippet demonstrates how to use the useQuery hook from Rocicorp Zero in a SolidJS component. It shows how to query issues, relate them to creators and labels, limit results, and conditionally filter by creator ID.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/solidjs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useQuery} from '@rocicorp/zero/solid';\n\nconst issues = useQuery(() => {\n  let issueQuery = z.query.issue\n    .related('creator')\n    .related('labels')\n    .limit(100);\n  const userID = selectedUserID();\n\n  if (userID) {\n    issueQuery = issueQuery.where('creatorID', '=', userID);\n  }\n  return issueQuery;\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Delete Permissions in Zero Framework\nDESCRIPTION: Example of defining delete permissions in schema.ts that restricts issue deletion to only the creator of the issue. Uses definePermissions to create a policy that evaluates if the authenticated user matches the creator ID.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/permissions.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// The decoded value of your JWT.\ntype AuthData = {\n  // The logged-in user.\n  sub: string;\n};\n\nexport const permissions = definePermissions<AuthData, Schema>(schema, () => {\n  const allowIfIssueCreator = (\n    authData: AuthData,\n    {cmp}: ExpressionBuilder<Schema, 'issue'>,\n  ) => cmp('creatorID', authData.sub);\n\n  return {\n    issue: {\n      row: {\n        delete: [allowIfIssueCreator],\n      },\n    },\n  } satisfies PermissionsConfig<AuthData, Schema>;\n});\n```\n\n----------------------------------------\n\nTITLE: Reading Data with Zero Query in JavaScript\nDESCRIPTION: Example of using Zero's materialize method to create a materialized view and listen for real-time updates.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/add-to-existing-project.mdx#2025-04-23_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconst view = z.query.message.materialize();\nview.addListener(data => console.log('Data updated:', data));\n```\n\n----------------------------------------\n\nTITLE: Using Custom Typed useZero Hook\nDESCRIPTION: Shows how to use the custom useZero hook created with createUseZero, which simplifies component code by eliminating the need to provide type parameters when using the hook.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/react.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useQuery} from \"@rocicorp/zero/react\";\nimport {useZero} from './hooks/use-zero.ts';\n\nfunction IssueList() {\n  const z = useZero();\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Raw SQL in Zero Server Mutators\nDESCRIPTION: Shows how to execute raw SQL queries in Zero mutators for complex operations or PostgreSQL features not supported by ZQL.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/custom-mutators.mdx#2025-04-23_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\nasync function markAllAsRead(tx: Transaction, {userId: string}) {\n  await tx.dbTransaction.query(\n    `\n    UPDATE notification\n    SET read = true\n    WHERE user_id = $1\n  `,\n    [userId],\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Ordering Query Results with ZQL in TypeScript\nDESCRIPTION: Shows how to sort ZQL query results using the orderBy clause. The example demonstrates both single and multiple ordering criteria, with notes about the default ordering by primary key.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/reading-data.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nz.query.issue.orderBy('created', 'desc');\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// Order by priority descending. For any rows with same priority,\n// then order by created desc.\nz.query.issue.orderBy('priority', 'desc').orderBy('created', 'desc');\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// Actually means: z.query.issue.orderBy('id', 'asc');\nz.query.issue;\n\n// Actually means: z.query.issue.orderBy('priority', 'desc').orderBy('id', 'asc');\nz.query.issue.orderBy('priority', 'desc');\n```\n\n----------------------------------------\n\nTITLE: Creating a Publication for Selective Replication in Postgres\nDESCRIPTION: This SQL snippet demonstrates how to create a publication in Postgres to control which tables and columns are replicated into zero-cache. It selects specific columns from the users table and includes the entire issues and comments tables.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/postgres-support.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE PUBLICATION zero_data FOR TABLE users (col1, col2, col3, ...), issues, comments;\n```\n\n----------------------------------------\n\nTITLE: Defining Many-to-Many Relationships in Zero Schema\nDESCRIPTION: This snippet shows how to create many-to-many relationships by chaining relationship definitions. It creates a relationship between issues and labels through a junction table.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/zero-schema.mdx#2025-04-23_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nconst issueRelationships = relationships(issue, ({many}) => ({\n  labels: many(\n    {\n      sourceField: ['id'],\n      destSchema: issueLabel,\n      destField: ['issueID'],\n    },\n    {\n      sourceField: ['labelID'],\n      destSchema: label,\n      destField: ['id'],\n    },\n  ),\n}));\n```\n\n----------------------------------------\n\nTITLE: Defining Zero Schema in TypeScript\nDESCRIPTION: Example of defining a Zero schema for a 'message' table with 'id' and 'body' columns.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/add-to-existing-project.mdx#2025-04-23_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n// schema.ts\nimport {createSchema, table, string} from '@rocicorp/zero';\n\nconst message = table('message')\n  .columns({\n    id: string(),\n    body: string(),\n  })\n  .primaryKey('id');\n\nexport const schema = createSchema({\n  tables: [message],\n});\n\nexport type Schema = typeof schema;\n```\n\n----------------------------------------\n\nTITLE: Updating Postgres Publication for Zero and Streaming Pre-existing Data\nDESCRIPTION: This SQL transaction shows how to change published tables/columns and ensure pre-existing data is streamed to Zero. It alters the publication, sets REPLICA IDENTITY to FULL, updates the table, and then resets REPLICA IDENTITY.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/postgres-support.mdx#2025-04-23_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nBEGIN;\n\nALTER PUBLICATION zero_data ADD TABLE foo;\n\nALTER TABLE foo REPLICA IDENTITY FULL;\nUPDATE foo SET id = id;  -- For some column \"id\" in \"foo\"\nALTER TABLE foo REPLICA IDENTITY DEFAULT;\n\nCOMMIT;\n```\n\n----------------------------------------\n\nTITLE: Limiting Query Results with ZQL in TypeScript\nDESCRIPTION: Demonstrates how to restrict the number of rows returned by a ZQL query using the limit() clause, which is typically used together with ordering.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/reading-data.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nz.query.issue.orderBy('created', 'desc').limit(100);\n```\n\n----------------------------------------\n\nTITLE: Defining Custom JSON Type Columns in Zero Schema\nDESCRIPTION: This snippet shows how to define a column that stores a JSON-compatible value with a custom TypeScript type. It creates a 'user' table with a 'settings' column containing theme preferences.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/zero-schema.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {table, string, json} from '@rocicorp/zero';\n\nconst user = table('user')\n  .columns({\n    id: string(),\n    name: string(),\n    settings: json<{theme: 'light' | 'dark'}>(),\n  })\n  .primaryKey('id');\n```\n\n----------------------------------------\n\nTITLE: Filtering Based on Relationship Existence in ZQL\nDESCRIPTION: Shows how to filter data based on the existence of related records using whereExists. This can be used with relationship refinements and in nested structures.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/reading-data.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n// Find all orgs that have at least one employee\nz.query.organization.whereExists('employees');\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// Find all orgs that have at least one cool employee\nz.query.organization.whereExists('employees', q =>\n  q.where('location', 'Hawaii'),\n);\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// Get all issues that have comments that have reactions\nz.query.issue.whereExists('comments',\n\tq => q.whereExists('reactions'));\n);\n```\n\n----------------------------------------\n\nTITLE: Querying for Unique Results with ZQL in TypeScript\nDESCRIPTION: Demonstrates the use of the one() clause to retrieve exactly zero or one result from a query. This changes the return type from Row[] to Row|undefined and overrides any limit() clauses.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/reading-data.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst result = await z.query.issue.where('id', 42).one().run();\nif (!result) {\n  console.error('not found');\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Existence Checks with Logical Operators in ZQL\nDESCRIPTION: Demonstrates how to use the exists helper with logical operators to build compound filters that combine relationship existence checks with other conditions.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/reading-data.mdx#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n// Find issues that have at least one comment or are high priority\nz.query.issue.where({cmp, or, exists} =>\n  or(\n    cmp('priority', 'high'),\n    exists('comments'),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Comparing with NULL in ZQL Queries\nDESCRIPTION: Shows how to properly compare with NULL values in ZQL using the IS and IS NOT operators, which follow SQL semantics where null is not equal to itself.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/reading-data.mdx#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n// Find employees not in any org.\nz.query.employee.where('orgID', 'IS', null);\n```\n\n----------------------------------------\n\nTITLE: Invoking Zero Client Mutators\nDESCRIPTION: Shows how to call client mutators from a frontend application and how to access server mutation results using the server property of a mutator's return value.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/custom-mutators.mdx#2025-04-23_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nzero.mutate.issue.update({\n  id: 'issue-123',\n  title: 'New title',\n});\n```\n\n----------------------------------------\n\nTITLE: Using the Query Analyzer Tool to Debug Slow Queries\nDESCRIPTION: Command line example showing how to use the analyze-query tool to examine a query with a specific schema. This tool helps to identify performance bottlenecks in query execution.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/debug/slow-queries.mdx#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpx analyze-query \\\n  --schema=./shared/schema.ts \\\n  --query='issue.related(\"comments\")'\n```\n\n----------------------------------------\n\nTITLE: Processing Async Tasks in Zero Push Handler\nDESCRIPTION: Executes async tasks after database transactions complete in a Zero push handler, ensuring notifications don't block database connections.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/custom-mutators.mdx#2025-04-23_snippet_16\n\nLANGUAGE: ts\nCODE:\n```\napp.post('/push', async c => {\n  const asyncTasks: Array<() => Promise<void>> = [];\n  const result = await processor.process(\n    createMutators(authData, asyncTasks),\n    c.req.query(),\n    await c.req.json(),\n  );\n\n  await Promise.all(asyncTasks.map(task => task()));\n  return await c.json(result);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Zero Instance in JavaScript\nDESCRIPTION: Example of creating a Zero client instance with user ID, server URL, and schema.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/add-to-existing-project.mdx#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport {Zero} from '@rocicorp/zero';\n\nconst z = new Zero({\n  userID: 'anon',\n  server: 'http://localhost:4848',\n  schema,\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up Zero Server Push Endpoint with Hono\nDESCRIPTION: Implements a server push endpoint using Hono and the Zero framework's PushProcessor to handle mutation requests from clients and apply them to a Postgres database.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/custom-mutators.mdx#2025-04-23_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nimport {Hono} from 'hono';\nimport {handle} from 'hono/vercel';\nimport {connectionProvider, PushProcessor} from '@rocicorp/zero/pg';\nimport postgres from 'postgres';\nimport {schema} from '../shared/schema';\nimport {createMutators} from '../shared/mutators';\n\n// PushProcessor is provided by Zero to encapsulate a standard\n// implementation of the push protocol.\nconst processor = new PushProcessor(\n  schema,\n  connectionProvider(postgres(process.env.ZERO_UPSTREAM_DB as string)),\n);\n\nexport const app = new Hono().basePath('/api');\n\napp.post('/push', async c => {\n  const result = await processor.process(\n    createMutators(),\n    c.req.query(),\n    await c.req.json(),\n  );\n  return await c.json(result);\n});\n\nexport default handle(app);\n```\n\n----------------------------------------\n\nTITLE: Enabling Full Access for Read Operations\nDESCRIPTION: Example showing how to use the ANYONE_CAN helper to grant universal read access to a table, while maintaining default denial for other operations. Useful during development or for public data.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/permissions.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {ANYONE_CAN} from '@rocicorp/zero';\n\nconst permissions = definePermissions<AuthData, Schema>(schema, () => {\n  return {\n    issue: {\n      row: {\n        select: ANYONE_CAN,\n        // Other operations are denied by default.\n      },\n    },\n    // Other tables are denied by default.\n  } satisfies PermissionsConfig<AuthData, Schema>;\n});\n```\n\n----------------------------------------\n\nTITLE: Update Permissions Allowing Reassignment\nDESCRIPTION: Example of update rules that allow issue owners to edit and reassign issues. Uses preMutation to verify initial ownership but postMutation with ANYONE_CAN to allow changes to ownership field.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/permissions.mdx#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ndefinePermissions<AuthData, Schema>(schema, () => {\n  const allowIfIssueOwner = (\n    authData: AuthData,\n    {cmp}: ExpressionBuilder<Schema, 'issue'>,\n  ) => cmp('ownerID', authData.sub);\n\n  return {\n    issue: {\n      row: {\n        update: {\n          preMutation: [allowIfIssueOwner],\n          postMutation: ANYONE_CAN,\n        },\n      },\n    },\n  } satisfies PermissionsConfig<AuthData, Schema>;\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Enumeration Columns in Zero Schema\nDESCRIPTION: This snippet demonstrates how to define an enumeration column that can only take specific values. It creates a 'user' table with a 'mood' column restricted to 'happy', 'sad', or 'taco'.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/zero-schema.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {table, string, enumeration} from '@rocicorp/zero';\n\nconst user = table('user')\n  .columns({\n    id: string(),\n    name: string(),\n    mood: enumeration<'happy' | 'sad' | 'taco'>(),\n  })\n  .primaryKey('id');\n```\n\n----------------------------------------\n\nTITLE: Granting Full Access to a Table\nDESCRIPTION: Example demonstrating the use of ANYONE_CAN_DO_ANYTHING helper to allow all operations on a specific table. This grants unrestricted access while maintaining default denial for other tables.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/permissions.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {ANYONE_CAN_DO_ANYTHING} from '@rocicorp/zero';\n\nconst permissions = definePermissions<AuthData, Schema>(schema, () => {\n  return {\n    // All operations on issue are allowed to all users.\n    issue: ANYONE_CAN_DO_ANYTHING,\n\n    // Other tables are denied by default.\n  } satisfies PermissionsConfig<AuthData, Schema>;\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Query Result Completeness\nDESCRIPTION: Example showing how to use the result object from useQuery to check if the returned data is complete (all data is present from the server) or incomplete (some data may be missing). This helps determine if the query results are fully up-to-date.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/reading-data.mdx#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst [issues, issuesResult] = useQuery(z.query.issue);\nif (issueResult.type === 'complete') {\n  console.log('All data is present');\n} else {\n  console.log('Some data is missing');\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Background Query TTL in Zero\nDESCRIPTION: Example of using the ttl parameter with useQuery to specify how long a query should continue syncing in the background after deactivation. This specific example shows a user query that will continue syncing for one day after being deactivated.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/reading-data.mdx#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst [user] = useQuery(z.query.user.where('id', userId), {ttl: '1d'});\n```\n\n----------------------------------------\n\nTITLE: Handling Async Tasks After Database Transactions in Zero\nDESCRIPTION: Implements a pattern for performing asynchronous work after database transactions complete, such as sending notifications or emails.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/custom-mutators.mdx#2025-04-23_snippet_15\n\nLANGUAGE: ts\nCODE:\n```\n// server-mutators.ts\nexport function createMutators(\n  authData: AuthData,\n  asyncTasks: Array<() => Promise<void>>,\n) {\n  return {\n    issue: {\n      update: async (tx, {id, title}: {id: string; title: string}) => {\n        await tx.mutate.issue.update({id, title});\n\n        asyncTasks.push(async () => {\n          await sendEmailToSubscribers(args.id);\n        });\n      },\n    },\n  } as const satisfies CustomMutatorDefs<typeof schema>;\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Table and Column Names in Zero Schema\nDESCRIPTION: This snippet shows how to map TypeScript table or column names to different database names using the from() method. It maps 'userPref' to 'user_pref' and 'orgID' to 'org_id'.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/zero-schema.mdx#2025-04-23_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nconst userPref = table('userPref')\n  // Map TS \"userPref\" to DB name \"user_pref\"\n  .from('user_pref')\n  .columns({\n    id: string(),\n    // Map TS \"orgID\" to DB name \"org_id\"\n    orgID: string().from('org_id'),\n  });\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Mutators with Zero Instance\nDESCRIPTION: Shows how to register the defined custom mutators when initializing a Zero instance, connecting the mutators to the Zero framework.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/custom-mutators.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// main.tsx\nimport {Zero} from '@rocicorp/zero';\nimport {schema} from './schema';\nimport {createMutators} from './mutators';\n\nconst zero = new Zero({\n  schema,\n  mutators: createMutators(),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Permission Rules with JWT Claims\nDESCRIPTION: Example of how to use JWT claims data in permission rules on the backend. This sample shows an admin role check using the 'cmp' helper function.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/auth.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst isAdminRule = (decodedJWT, {cmp}) => cmp(decodedJWT.role, '=', 'admin');\n```\n\n----------------------------------------\n\nTITLE: Cloning and Starting Zero Database\nDESCRIPTION: Commands to clone the hello-zero repository, install dependencies, and start the database component. This is the first step in setting up the Zero demo application.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/quickstart.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/rocicorp/hello-zero.git\ncd hello-zero\nnpm install\n\nnpm run dev:db-up\n```\n\n----------------------------------------\n\nTITLE: Conditional Logic Based on Client/Server Location in Zero\nDESCRIPTION: Shows how to execute different code paths depending on whether a mutator is running on the client or server using the transaction's location property.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/custom-mutators.mdx#2025-04-23_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\nmyMutator: (tx) => {\n  if (tx.location === 'client') {\n    // Client-side code\n  } else {\n    // Server-side code\n  }\n},\n```\n\n----------------------------------------\n\nTITLE: Update Permissions with Self-Assignment Requirement\nDESCRIPTION: Example of update rules that allow anyone to edit issues but requires them to assign the issue to themselves after editing. Uses ANYONE_CAN for preMutation but requires owner validation in postMutation.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/permissions.mdx#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ndefinePermissions<AuthData, Schema>(schema, () => {\n  const allowIfIssueOwner = (\n    authData: AuthData,\n    {cmp}: ExpressionBuilder<Schema, 'issue'>,\n  ) => cmp('ownerID', authData.sub);\n\n  return {\n    issue: {\n      row: {\n        update: {\n          preMutation: ANYONE_CAN,\n          postMutation: [allowIfIssueOwner],\n        },\n      },\n    },\n  } satisfies PermissionsConfig<AuthData, Schema>;\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Zero Cache Server\nDESCRIPTION: Commands to navigate to the project directory and start the Zero cache server component. This is the second component needed for running the demo application.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/quickstart.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd hello-zero\nnpm run dev:zero-cache\n```\n\n----------------------------------------\n\nTITLE: Implementing JWT Refresh Function in Zero Authentication\nDESCRIPTION: Example showing how to use a function for the auth parameter to dynamically fetch new JWT tokens when verification fails. This enables automatic token refresh.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/auth.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst zero = new Zero({\n  ...,\n  auth: async () => {\n    const token = await fetchNewToken();\n    return token;\n  },\n  userID,\n});\n```\n\n----------------------------------------\n\nTITLE: Inserting Data with Zero Mutator in TypeScript\nDESCRIPTION: Example of using Zero's CRUD mutator to insert a new message into the database.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/add-to-existing-project.mdx#2025-04-23_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nz.mutate.message.insert({id: nanoid(), body: 'Hello World!'});\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-tenant Mode with JSON in Zero\nDESCRIPTION: JSON structure for configuring per-tenant settings when running the Zero server in multi-tenant mode. This allows dispatching requests to different tenants based on host and path matching, with each tenant having its own environment variable overrides.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/zero-cache-config.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  /**\n  * Requests to the main application port are dispatched to the first tenant\n  * with a matching host and path. If both host and path are specified,\n  * both must match for the request to be dispatched to that tenant.\n  *\n  * Requests can also be sent directly to the ZERO_PORT specified\n  * in a tenant's env overrides. In this case, no host or path\n  * matching is necessary.\n  */\n  tenants: {\n    id: string;     // value of the \"tid\" context key in debug logs\n    host?: string;  // case-insensitive full Host: header match\n    path?: string;  // first path component, with or without leading slash\n\n    /**\n      * Options are inherited from the main application (e.g. args and ENV) by default,\n      * and are overridden by values in the tenant's env object.\n      */\n    env: {\n      ZERO_REPLICA_DB_FILE: string\n      ZERO_UPSTREAM_DB: string\n      ZERO_CVR_DB: string\n      ZERO_CHANGE_DB: string\n      ...\n    };\n  }[];\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Zero Inspector Instance in TypeScript\nDESCRIPTION: Demonstrates how to initialize a Zero instance and access its inspector API. The inspect method is asynchronous because it performs lazy loading of inspect-only related code.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/debug/inspector.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst z = new Zero({\n  /*your zero options*/\n});\nconst inspector = await z.inspect();\n```\n\n----------------------------------------\n\nTITLE: Accessing Multiple Postgres Schemas in Zero\nDESCRIPTION: This snippet demonstrates how to use the from() method to access tables from other Postgres schemas, specifically syncing the 'event' table from the 'analytics' schema.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/zero-schema.mdx#2025-04-23_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n// Sync the \"event\" table from the \"analytics\" schema.\nconst event = table('event').from('analytics.event');\n```\n\n----------------------------------------\n\nTITLE: Checking Postgres WAL Level Configuration in Bash\nDESCRIPTION: Command to check the current Write-Ahead Logging (WAL) level setting in Postgres, which must be set to 'logical' for Zero to work properly.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/connecting-to-postgres.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npsql -c 'SHOW wal_level'\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Specific Mutators in Zero\nDESCRIPTION: Creates server-specific mutators by extending client mutators, demonstrating how to preserve client behavior while adding server-only functionality like audit logging.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/custom-mutators.mdx#2025-04-23_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\n// server-mutators.ts\nimport { CustomMutatorDefs } from \"@rocicorp/zero\";\nimport { schema } from \"./schema\";\n\nexport function createMutators(clientMutators: CustomMutatorDefs<typeof schema>) {\n  return {\n    // Reuse all client mutators except the ones in `issue`\n    ...clientMutators\n\n    issue: {\n      // Reuse all issue mutators except `update`\n      ...clientMutators.issue,\n\n      update: async (tx, {id, title}: { id: string; title: string }) => {\n        // Call the shared mutator first\n        await clientMutators.issue.update(tx, args);\n\n        // Record a history of this operation happening in an audit\n        // log table.\n        await tx.mutate.auditLog.insert({\n          // Assuming you have an audit log table with fields for\n          // `issueId`, `action`, and `timestamp`.\n          issueId: args.id,\n          action: 'update-title',\n          timestamp: new Date().toISOString(),\n        });\n      },\n    }\n  } as const satisfies CustomMutatorDefs<typeof schema>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Circular Relationships in Zero Schema\nDESCRIPTION: This snippet shows how to create circular relationships where a table references itself. It creates a 'parent' relationship on a comment table that points to another comment.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/zero-schema.mdx#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nconst commentRelationships = relationships(comment, ({one}) => ({\n  parent: one({\n    sourceField: ['parentID'],\n    destSchema: comment,\n    destField: ['id'],\n  }),\n}));\n```\n\n----------------------------------------\n\nTITLE: Debugging Write Permissions in Zero (Server Log)\nDESCRIPTION: Shows a server log example for a failed write permission check. It includes the operation details, auth data, and applied permission policies.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/debug/permissions.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nPermission check failed for {\"op\":\"update\",\"tableName\":\"message\",...}, action update, phase preMutation, authData: {...}, rowPolicies: [...], cellPolicies: []\n```\n\n----------------------------------------\n\nTITLE: Setting Permissions for Zero Schema\nDESCRIPTION: Example of setting permissions for the 'message' table to allow all users to read and write.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/add-to-existing-project.mdx#2025-04-23_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\n// schema.ts\nimport {ANYONE_CAN_DO_ANYTHING, definePermissions} from '@rocicorp/zero';\n\nexport const permissions = definePermissions<unknown, Schema>(schema, () => ({\n  message: ANYONE_CAN_DO_ANYTHING,\n}));\n```\n\n----------------------------------------\n\nTITLE: Adding a Column with Default Value in Postgres for Zero Compatibility\nDESCRIPTION: This SQL transaction demonstrates the recommended approach for adding a new column with a non-constant DEFAULT value in Postgres when using Zero. It adds the column without a DEFAULT, backfills it, and then sets the DEFAULT value.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/postgres-support.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nBEGIN;\n\nALTER TABLE foo ADD bar ...;  -- without a DEFAULT value\nUPDATE foo SET bar = ...;\nALTER TABLE foo ALTER bar SET DEFAULT ...;\n\nCOMMIT;\n```\n\n----------------------------------------\n\nTITLE: Deploying Permissions to Postgres Database\nDESCRIPTION: Commands to generate and deploy permissions SQL to the Postgres database using zero-deploy-permissions tool.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/deployment.mdx#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx zero-deploy-permissions --schema-path='./src/schema.ts'  --output-file='/tmp/permissions.sql'\n(cat /tmp/permissions.sql; echo \"\\q\") | fly pg connect -a $PG_APP_NAME -d zstart\n```\n\n----------------------------------------\n\nTITLE: Creating a Typed useZero Hook\nDESCRIPTION: Demonstrates how to create a custom useZero hook with predefined type parameters using createUseZero, which eliminates the need to repeatedly specify Schema and Mutators types throughout the application.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/react.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {createUseZero} from '@rocicorp/zero/react';\nimport type {Schema} from './schema.ts';\nimport type {Mutators} from './mutators.ts';\n\nexport const useZero = createUseZero<Schema, Mutators>();\n```\n\n----------------------------------------\n\nTITLE: SST Deployment Script for Zero Permissions\nDESCRIPTION: Example of a deployment script that updates permissions in a production database as part of a CI process. Uses the zero-deploy-permissions command with environment variables for database configuration.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/permissions.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nnew command.local.Command(\n  'zero-deploy-permissions',\n  {\n    create: `npx zero-deploy-permissions -p ../../src/schema.ts`,\n    // Run the Command on every deploy ...\n    triggers: [Date.now()],\n    environment: {\n      ZERO_UPSTREAM_DB: commonEnv.ZERO_UPSTREAM_DB,\n      // If the application has a non-default App ID ...\n      ZERO_APP_ID: commonEnv.ZERO_APP_ID,\n    },\n  },\n  // after the view-syncer is deployed.\n  {dependsOn: viewSyncer},\n);\n```\n\n----------------------------------------\n\nTITLE: Inspecting All Clients in a Client Group in TypeScript\nDESCRIPTION: Demonstrates how to retrieve information about all clients within the current client group. This allows debugging multiple Zero instances across different tabs in the same browser profile.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/debug/inspector.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst allClients = await inspector.clients();\n```\n\n----------------------------------------\n\nTITLE: Identifying CVR Flush Performance Issues in Zero-Cache Logs\nDESCRIPTION: Example log output showing a slow CVR (Content Version Registry) flush operation. This indicates potential issues with database locality and network latency.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/debug/slow-queries.mdx#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nflushed cvr ... (124ms)\n```\n\n----------------------------------------\n\nTITLE: Dumping Client Database Contents in TypeScript\nDESCRIPTION: Shows how to access and display the contents of the client-side database, including raw key-value data and structured table data. This is useful for debugging data synchronization issues.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/debug/inspector.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst inspector = await zero.inspect();\nconst client = inspector.client;\n\n// All raw k/v data currently synced to client\nconsole.log('client map:');\nconsole.log(await client.map());\n\n// kv table extracted into tables\n// This is same info that is in z.query[tableName].run()\nfor (const tableName of Object.keys(schema.tables)) {\n  console.log(`table ${tableName}:`);\n  console.table(await client.rows(tableName));\n}\n```\n\n----------------------------------------\n\nTITLE: Server-Side Custom Mutator Implementation in Go\nDESCRIPTION: A Go implementation of the same updateIssue mutator for the server side, showing how mutations can be handled in different languages while maintaining the same validation logic.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/custom-mutators.mdx#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc updateIssueOnServer(tx *sql.Tx, id string, title string) error {\n  // Validate title length.\n  if len(title) > 100 {\n    return errors.New(\"Title is too long\")\n  }\n\n  _, err := tx.Exec(\"UPDATE issue SET title = $1 WHERE id = $2\", title, id)\n  return err\n}\n```\n\n----------------------------------------\n\nTITLE: Identifying Slow Query Materialization in Zero-Cache Logs\nDESCRIPTION: Example log output showing a slow query materialization with hash identifiers and execution time. This helps identify specific queries that are performing poorly.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/debug/slow-queries.mdx#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nhash=3rhuw19xt9vry transformationHash=1nv7ot74gxfl7\nSlow query materialization 325.46865100000286\n```\n\n----------------------------------------\n\nTITLE: Inspecting Zero Cache with SQLite CLI\nDESCRIPTION: This command opens the Zero replica database with the SQLite CLI tool for inspection. It uses npx to run the zero-sqlite3 utility against the replica database file.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/debug/replication.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx zero-sqlite3 /tmp/my-zero-replica.db\n```\n\n----------------------------------------\n\nTITLE: Running Frontend with Remote zero-cache\nDESCRIPTION: Command to start the frontend development server connected to the remote zero-cache instance on Fly.io.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/deployment.mdx#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nVITE_PUBLIC_SERVER=\"https://${CACHE_APP_NAME}.fly.dev/\" npm run dev:ui\n```\n\n----------------------------------------\n\nTITLE: Transforming Query with Permissions in Zero (TypeScript/Bash)\nDESCRIPTION: Uses the transform-query utility to apply permissions to a query. It requires the query hash and schema file path. The output includes the transformed ZQL query and its AST.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/debug/permissions.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx transform-query --hash=2i81bazy03a00 --schema=./shared/schema.ts\n```\n\n----------------------------------------\n\nTITLE: Identifying Slow View Hydration in Zero-Cache Logs\nDESCRIPTION: Example log output showing a slow view hydration with metrics like hydration time and number of rows. This log entry is from the view-syncer component and indicates the performance of the query.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/debug/slow-queries.mdx#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n{\n    \"level\": \"DEBUG\",\n    \"worker\": \"syncer\",\n    \"component\": \"view-syncer\",\n    \"hydrationTimeMs\": 1339,\n    \"message\": \"Total rows considered: 146\"\n  },\n```\n\n----------------------------------------\n\nTITLE: Configuring Zero Environment Variables\nDESCRIPTION: Example of a .env file configuration for Zero, including database connection and replica file location.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/add-to-existing-project.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nZERO_UPSTREAM_DB=\"postgresql://user:password@127.0.0.1/postgres\"\nZERO_REPLICA_FILE=\"/tmp/sync-replica.db\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Schema Update Behavior in Zero\nDESCRIPTION: This snippet shows how to customize the behavior when a schema update is needed by providing an onUpdateNeeded callback to the Zero constructor. This allows for custom handling of schema version mismatches.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/zero-schema.mdx#2025-04-23_snippet_13\n\nLANGUAGE: ts\nCODE:\n```\nconst z = new Zero({\n  onUpdateNeeded: updateReason => {\n    if (reason.type === 'SchemaVersionNotSupported') {\n      // Do something custom here, like show a banner.\n      // When you're ready, call `location.reload()`.\n    }\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Converting AST to ZQL in Bash\nDESCRIPTION: This command converts a JSON AST file to a ZQL query using the ast-to-zql tool. The output uses server names for columns and tables.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/debug/query-asts.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncat ast.json | npx ast-to-zql\n```\n\n----------------------------------------\n\nTITLE: Retrieving Query Details Using Hash from Logs\nDESCRIPTION: Command line example showing how to retrieve the full query details using a query hash from logs. This helps when investigating slow queries identified in server logs.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/debug/slow-queries.mdx#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpx transform-query --hash=2i81bazy03a00 --schema=./shared/schema.ts\n```\n\n----------------------------------------\n\nTITLE: Seeding and Configuring Postgres for Replication\nDESCRIPTION: Commands to populate the database with initial data and configure WAL level for logical replication support, followed by a database restart to apply changes.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/deployment.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n(cat ./docker/seed.sql; echo \"\\q\") | fly pg connect -a $PG_APP_NAME\necho \"ALTER SYSTEM SET wal_level = logical; \\q\" | fly pg connect -a $PG_APP_NAME\nfly postgres restart --app $PG_APP_NAME\n```\n\n----------------------------------------\n\nTITLE: Deploying Zero with SST\nDESCRIPTION: Command to deploy the Zero application using SST to AWS.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/deployment.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst deploy\n```\n\n----------------------------------------\n\nTITLE: Installing Zero Package with npm\nDESCRIPTION: Command to install the Zero package using npm. Note that additional steps may be required for pnpm or bun.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/add-to-existing-project.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @rocicorp/zero\n```\n\n----------------------------------------\n\nTITLE: Setting SST Secrets for Zero Deployment\nDESCRIPTION: Commands to set required secrets in SST for Zero deployment, including the Postgres connection string and Zero Auth Secret.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/deployment.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst secret set PostgresConnectionString \"YOUR-PG-CONN-STRING\"\nnpx sst secret set ZeroAuthSecret \"YOUR-ZERO-AUTH-SECRET\"\n```\n\n----------------------------------------\n\nTITLE: Creating zero-cache App on Fly.io\nDESCRIPTION: Command to create a Fly.io application for the zero-cache component using the previously defined initials for naming consistency.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/deployment.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nCACHE_APP_NAME=$INITIALS-zstart-cache\nfly app create $CACHE_APP_NAME\n```\n\n----------------------------------------\n\nTITLE: Initializing SST for Zero Deployment\nDESCRIPTION: Command to initialize a new SST project for Zero deployment on AWS.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/deployment.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst init --yes\n```\n\n----------------------------------------\n\nTITLE: Deploying Frontend to Vercel\nDESCRIPTION: Command to deploy the frontend application to Vercel with required environment variables for zero-cache connectivity.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/deployment.mdx#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nvercel deploy --prod \\\n  -e ZERO_AUTH_SECRET=\"secretkey\" \\\n  -e VITE_PUBLIC_SERVER='https://${CACHE_APP_NAME}.fly.dev/'\n```\n\n----------------------------------------\n\nTITLE: Destroying Zero View in JavaScript\nDESCRIPTION: Example of cleaning up a Zero view when it's no longer needed.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/add-to-existing-project.mdx#2025-04-23_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nview.destroy();\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Publication for Zero-Cache\nDESCRIPTION: Example SQL statement that zero-cache will automatically execute to create a publication for all tables in the public schema if no specific publications are provided. The publication name follows the pattern '_{app-id}_public_0'.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/zero-cache-config.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE PUBLICATION _{app-id}_public_0 FOR TABLES IN SCHEMA public;\n```\n\n----------------------------------------\n\nTITLE: Installing Zero 0.18 with npm\nDESCRIPTION: Command to install version 0.18 of the @rocicorp/zero package using npm. This is the entry point for using the Zero framework with the new Custom Mutators feature.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/release-notes/0.18.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @rocicorp/zero@0.18\n```\n\n----------------------------------------\n\nTITLE: Converting AST to ZQL with Schema Mapping in Bash\nDESCRIPTION: This command converts a JSON AST file to a ZQL query, using a provided schema file to map server names back to client names. This is useful when the schema uses the 'from' feature for different client and server naming.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/debug/query-asts.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncat ast.json | npx ast-to-zql --schema schema.ts\n```\n\n----------------------------------------\n\nTITLE: Installing Zero 0.15 with npm\nDESCRIPTION: Command to install version 0.15 of the @rocicorp/zero package using npm. This installs the latest release of Zero which includes live permission updates and other enhancements.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/release-notes/0.15.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @rocicorp/zero@0.15\n```\n\n----------------------------------------\n\nTITLE: Generating Fly.io Configuration for zero-cache\nDESCRIPTION: Script to generate a fly.toml configuration file with connection strings, resource requirements, deployment settings, and environment variables for the zero-cache component.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/deployment.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nCONNECTION_STRING=\"postgres://postgres:$PG_PASSWORD@$PG_APP_NAME.flycast:5432\"\nZERO_VERSION=$(npm list @rocicorp/zero | grep @rocicorp/zero | cut -f 3 -d @)\n\ncat <<EOF > fly.toml\napp = \"$CACHE_APP_NAME\"\nprimary_region = 'lax'\n\n[build]\nimage = \"registry.hub.docker.com/rocicorp/zero:${ZERO_VERSION}\"\n\n[http_service]\ninternal_port = 4848\nforce_https = true\nauto_stop_machines = 'off'\nmin_machines_running = 1\n\n[[http_service.checks]]\ngrace_period = \"10s\"\ninterval = \"30s\"\nmethod = \"GET\"\ntimeout = \"5s\"\npath = \"/\"\n\n[[vm]]\nmemory = '2gb'\ncpu_kind = 'shared'\ncpus = 2\n\n[mounts]\nsource = \"sqlite_db\"\ndestination = \"/data\"\n\n[env]\nZERO_REPLICA_FILE = \"/data/sync-replica.db\"\nZERO_UPSTREAM_DB=\"${CONNECTION_STRING}/zstart?sslmode=disable\"\nZERO_CVR_DB=\"${CONNECTION_STRING}/zstart_cvr?sslmode=disable\"\nZERO_CHANGE_DB=\"${CONNECTION_STRING}/zstart_cdb?sslmode=disable\"\nZERO_AUTH_SECRET=\"secretkey\"\nLOG_LEVEL = \"debug\"\nEOF\n```\n\n----------------------------------------\n\nTITLE: Viewing Active Queries for the Current Client in TypeScript\nDESCRIPTION: Shows how to access and display active queries for the current client using the inspector API. The queries method returns information about all active queries.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/debug/inspector.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.table(await inspector.client.queries());\n```\n\n----------------------------------------\n\nTITLE: Installing Zero 0.14 via npm\nDESCRIPTION: Command to install version 0.14 of the @rocicorp/zero package using npm. This installs the specific version that includes name mapping and multiple schema features.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/release-notes/0.14.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @rocicorp/zero@0.14\n```\n\n----------------------------------------\n\nTITLE: Configuring SST for Zero Deployment on AWS\nDESCRIPTION: Complete SST configuration file for deploying zero-cache on AWS with a replication manager and view syncer setup. Includes infrastructure configuration for VPC, ECS cluster, S3 bucket for replication, and services configuration.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/deployment.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/* eslint-disable */\n/// <reference path=\"./.sst/platform/config.d.ts\" />\nimport {execSync} from 'child_process';\n\nexport default $config({\n  app(input) {\n    return {\n      name: 'hello-zero',\n      removal: input?.stage === 'production' ? 'retain' : 'remove',\n      home: 'aws',\n      region: process.env.AWS_REGION || 'us-east-1',\n      providers: {\n        command: true,\n      },\n    };\n  },\n  async run() {\n    const zeroVersion = execSync('npm show @rocicorp/zero version')\n      .toString()\n      .trim();\n\n    // S3 Bucket\n    const replicationBucket = new sst.aws.Bucket(`replication-bucket`);\n\n    // VPC Configuration\n    const vpc = new sst.aws.Vpc(`vpc`, {\n      az: 2,\n    });\n\n    // ECS Cluster\n    const cluster = new sst.aws.Cluster(`cluster`, {\n      vpc,\n    });\n\n    const conn = new sst.Secret('PostgresConnectionString');\n    const zeroAuthSecret = new sst.Secret('ZeroAuthSecret');\n\n    // Common environment variables\n    const commonEnv = {\n      ZERO_UPSTREAM_DB: conn.value,\n      ZERO_CVR_DB: conn.value,\n      ZERO_CHANGE_DB: conn.value,\n      ZERO_AUTH_SECRET: zeroAuthSecret.value,\n      ZERO_REPLICA_FILE: 'sync-replica.db',\n      ZERO_LITESTREAM_BACKUP_URL: $interpolate`s3://${replicationBucket.name}/backup`,\n      ZERO_IMAGE_URL: `rocicorp/zero:${zeroVersion}`,\n      ZERO_CVR_MAX_CONNS: '10',\n      ZERO_UPSTREAM_MAX_CONNS: '10',\n    };\n\n    // Replication Manager Service\n    const replicationManager = cluster.addService(`replication-manager`, {\n      cpu: '0.5 vCPU',\n      memory: '1 GB',\n      architecture: 'arm64',\n      image: commonEnv.ZERO_IMAGE_URL,\n      link: [replicationBucket],\n      health: {\n        command: ['CMD-SHELL', 'curl -f http://localhost:4849/ || exit 1'],\n        interval: '5 seconds',\n        retries: 3,\n        startPeriod: '300 seconds',\n      },\n      environment: {\n        ...commonEnv,\n        ZERO_CHANGE_MAX_CONNS: '3',\n        ZERO_NUM_SYNC_WORKERS: '0',\n      },\n      loadBalancer: {\n        public: false,\n        ports: [\n          {\n            listen: '80/http',\n            forward: '4849/http',\n          },\n        ],\n      },\n      transform: {\n        loadBalancer: {\n          idleTimeout: 3600,\n        },\n        target: {\n          healthCheck: {\n            enabled: true,\n            path: '/keepalive',\n            protocol: 'HTTP',\n            interval: 5,\n            healthyThreshold: 2,\n            timeout: 3,\n          },\n        },\n      },\n    });\n\n    // View Syncer Service\n    const viewSyncer = cluster.addService(`view-syncer`, {\n      cpu: '1 vCPU',\n      memory: '2 GB',\n      architecture: 'arm64',\n      image: commonEnv.ZERO_IMAGE_URL,\n      link: [replicationBucket],\n      health: {\n        command: ['CMD-SHELL', 'curl -f http://localhost:4848/ || exit 1'],\n        interval: '5 seconds',\n        retries: 3,\n        startPeriod: '300 seconds',\n      },\n      environment: {\n        ...commonEnv,\n        ZERO_CHANGE_STREAMER_URI: replicationManager.url,\n      },\n      logging: {\n        retention: '1 month',\n      },\n      loadBalancer: {\n        public: true,\n        rules: [{listen: '80/http', forward: '4848/http'}],\n      },\n      transform: {\n        target: {\n          healthCheck: {\n            enabled: true,\n            path: '/keepalive',\n            protocol: 'HTTP',\n            interval: 5,\n            healthyThreshold: 2,\n            timeout: 3,\n          },\n          stickiness: {\n            enabled: true,\n            type: 'lb_cookie',\n            cookieDuration: 120,\n          },\n          loadBalancingAlgorithmType: 'least_outstanding_requests',\n        },\n      },\n    });\n\n    // Permissions deployment\n    // Note: this setup requires your CI/CD pipeline to have access to your\n    // Postgres database. If you do not want to do this, you can also use\n    // `npx zero-deploy-permissions --output-format=sql` during build to\n    // generate a permissions.sql file, then run that file as part of your\n    // deployment within your VPC. See hello-zero-solid for an example:\n    // https://github.com/rocicorp/hello-zero-solid/blob/main/sst.config.ts#L141\n    new command.local.Command(\n      'zero-deploy-permissions',\n      {\n        create: `npx zero-deploy-permissions -p ../../src/schema.ts`,\n        // Run the Command on every deploy ...\n        triggers: [Date.now()],\n        environment: {\n          ZERO_UPSTREAM_DB: commonEnv.ZERO_UPSTREAM_DB,\n        },\n      },\n      // after the view-syncer is deployed.\n      {dependsOn: viewSyncer},\n    );\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Deploying zero-cache to Fly.io\nDESCRIPTION: Command to deploy the configured zero-cache application to Fly.io.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/deployment.mdx#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nfly deploy\n```\n\n----------------------------------------\n\nTITLE: Installing Zero 0.11 via NPM\nDESCRIPTION: Command to install version 0.11 of the @rocicorp/zero package using npm. This is the primary installation method for the Zero package.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/release-notes/0.11.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @rocicorp/zero@0.11\n```\n\n----------------------------------------\n\nTITLE: Restarting Postgres Server in Bash\nDESCRIPTION: Commands to restart the Postgres server after changing configuration settings. This script gets the data directory path and uses pg_ctl to restart the server.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/connecting-to-postgres.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndata_dir=$(psql -t -A -c 'SHOW data_directory')\npg_ctl -D \"$data_dir\" restart\n```\n\n----------------------------------------\n\nTITLE: Installing Zero 0.5 Package\nDESCRIPTION: Command to install version 0.5 of the @rocicorp/zero package using npm.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/release-notes/0.5.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @rocicorp/zero@0.5\n```\n\n----------------------------------------\n\nTITLE: SQLite Commands for Exploring Zero Replica Database\nDESCRIPTION: These SQLite commands demonstrate how to explore the contents of a Zero replica database. It shows how to list all tables using .tables, set the output mode to qbox with .mode qbox, and query data from the label table.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/debug/replication.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nsqlite> .tables\n_zero.changeLog          emoji                    viewState\n_zero.replicationConfig  issue                    zero.permissions\n_zero.replicationState   issueLabel               zero.schemaVersions\n_zero.runtimeEvents      label                    zero_0.clients\n_zero.versionHistory     user\ncomment                  userPref\nsqlite> .mode qbox\nsqlite> SELECT * FROM label;\n┌─────────────────────────┬──────────────────────────┬────────────┐\n│           id            │           name           │ _0_version │\n├─────────────────────────┼──────────────────────────┼────────────┤\n│ 'ic_g-DZTYDApZR_v7Cdcy' │ 'bug'                    │ '4ehreg'   │\n...\n```\n\n----------------------------------------\n\nTITLE: Setting Postgres WAL Level to Logical in Bash\nDESCRIPTION: Command to alter the Postgres system configuration to set the Write-Ahead Logging (WAL) level to 'logical', which is required for Zero's logical replication functionality.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/connecting-to-postgres.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npsql -c \"ALTER SYSTEM SET wal_level = 'logical';\"\n```\n\n----------------------------------------\n\nTITLE: Schema Import Changes\nDESCRIPTION: Diff showing the breaking changes in import statements for schema-related functionality. Shows migration from main package to schema subpackage.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/release-notes/0.5.mdx#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n- import { createSchema, createTableSchema, SchemaToRow } from \"@rocicorp/zero\";\n+ import { createSchema, createTableSchema, TableSchemaToRow } from \"@rocicorp/zero/schema\";\n```\n\n----------------------------------------\n\nTITLE: Starting Zero Server via CLI\nDESCRIPTION: Command to start the Zero server using the CLI tool.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/add-to-existing-project.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx zero-cache\n```\n\n----------------------------------------\n\nTITLE: Updated Configuration in zero.config.json\nDESCRIPTION: Shows the renamed configuration keys in zero.config.json that represent breaking changes in the Zero 0.1 release. The keys have been renamed to be more descriptive of their purpose.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/release-notes/0.1.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"upstreamDBConnStr\": \"...\",  // formerly upstreamUri\n  \"cvrDBConnStr\": \"...\",      // formerly cvrDbUri\n  \"changeDBConnStr\": \"...\",   // formerly changeDbUri\n  \"replicaDBFile\": \"...\"      // formerly replicaDbFile\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Postgres WAL Level After Restart in Bash\nDESCRIPTION: Command to verify that the Write-Ahead Logging (WAL) level has been successfully changed to 'logical' after restarting the Postgres server.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/connecting-to-postgres.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npsql -c 'SHOW wal_level'\n```\n\n----------------------------------------\n\nTITLE: Features list of AriaDocsLite documentation template\nDESCRIPTION: A structured representation of the key features available in the AriaDocsLite documentation template, including MDX support, nested pages, syntax highlighting, table of contents, code formatting options, and theme modes.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nFeatures\n├── MDX supported\n├── Nested pages support\n├── Syntax highlighting\n├── Table of contents\n├── Code line highlight & code title\n├── Static site generation\n├── Custom components\n└── Light mode & dark mode\n```\n\n----------------------------------------\n\nTITLE: Setting Up Postgres Database on Fly.io\nDESCRIPTION: Script to create a Postgres database on Fly.io with appropriate sizing and configuration. Includes variable definition for app naming and secure password generation.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/deployment.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nINITIALS=aa\nPG_APP_NAME=$INITIALS-zstart-pg\n\nPG_PASSWORD=\"$(head -c 256 /dev/urandom | od -An -t x1 | tr -d ' \\n' | tr -dc 'a-zA-Z' | head -c 16)\"\n\nfly postgres create \\\n  --name $PG_APP_NAME \\\n  --region lax \\\n  --initial-cluster-size 1 \\\n  --vm-size shared-cpu-2x \\\n  --volume-size 40 \\\n  --password=$PG_PASSWORD\n```\n\n----------------------------------------\n\nTITLE: Installing Zero 0.17 with npm\nDESCRIPTION: This command installs version 0.17 of the @rocicorp/zero package using npm. It's the primary method for adding Zero to a project.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/release-notes/0.17.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @rocicorp/zero@0.17\n```\n\n----------------------------------------\n\nTITLE: Running the Next.js development server with various package managers\nDESCRIPTION: Commands to start the development server for the AriaDocsLite documentation template using different package managers. The server will run on http://localhost:3000.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Accessing PostgreSQL Database\nDESCRIPTION: Command to connect to the PostgreSQL database using psql CLI with the default credentials. This allows direct database inspection and modification for testing sync functionality.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/quickstart.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npsql postgresql://user:password@127.0.0.1:5430/postgres\n```\n\n----------------------------------------\n\nTITLE: Installing Zero 0.10 via NPM\nDESCRIPTION: Command to install version 0.10 of the @rocicorp/zero package using npm package manager.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/release-notes/0.10.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @rocicorp/zero@0.10\n```\n\n----------------------------------------\n\nTITLE: Installing Zero 0.9 with npm\nDESCRIPTION: Command to install Zero version 0.9 using npm package manager. This installs the package from the @rocicorp organization.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/release-notes/0.9.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @rocicorp/zero@0.9\n```\n\n----------------------------------------\n\nTITLE: PNPM Configuration for Zero's Binary Dependencies\nDESCRIPTION: JSON configuration for PNPM to enable installation of Zero's binary dependencies which require postinstall scripts. This addresses package manager security restrictions.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/quickstart.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"pnpm\": {\n  \"onlyBuiltDependencies\": [\n    \"@rocicorp/zero-sqlite3\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Zero 0.7 with npm\nDESCRIPTION: Command to install version 0.7 of the Zero package from npm. This is the entry point for getting started with the new version.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/release-notes/0.7.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @rocicorp/zero@0.7\n```\n\n----------------------------------------\n\nTITLE: Bun Configuration for Zero's Trusted Dependencies\nDESCRIPTION: JSON configuration for Bun package manager to allow installation of Zero's dependencies that require build scripts. This adds the specific package to the trusted dependencies list.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/quickstart.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"trustedDependencies\": [\n  \"@rocicorp/zero-sqlite3\"\n],\n```\n\n----------------------------------------\n\nTITLE: Installing Zero 0.3 via npm\nDESCRIPTION: Command to install the Zero 0.3 package using npm. This installs the @rocicorp/zero library at version 0.3.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/release-notes/0.3.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @rocicorp/zero@0.3\n```\n\n----------------------------------------\n\nTITLE: Starting Zero UI Component\nDESCRIPTION: Commands to navigate to the project directory and start the UI component of the Zero demo application. This is the final component needed to run the complete application.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/quickstart.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd hello-zero\nnpm run dev:ui\n```\n\n----------------------------------------\n\nTITLE: Installing Zero 0.6 via npm\nDESCRIPTION: Command to install version 0.6 of the @rocicorp/zero package using npm. This is the entry point for using the Zero framework with the new Relationship Filters feature.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/release-notes/0.6.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @rocicorp/zero@0.6\n```\n\n----------------------------------------\n\nTITLE: Installing Zero 0.13 via npm\nDESCRIPTION: Command to install version 0.13 of the @rocicorp/zero package using npm. This is the recommended installation method for the latest release with multinode and SST features.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/release-notes/0.13.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @rocicorp/zero@0.13\n```\n\n----------------------------------------\n\nTITLE: Installing Zero 0.8 via npm\nDESCRIPTION: This command installs version 0.8 of the @rocicorp/zero package using npm. It's the primary method for developers to add Zero 0.8 to their projects.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/release-notes/0.8.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @rocicorp/zero@0.8\n```\n\n----------------------------------------\n\nTITLE: Installing Zero 0.4 via npm\nDESCRIPTION: Command to install version 0.4 of the Zero package from npm registry. This is the entry point for using the new features including compound filters.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/release-notes/0.4.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @rocicorp/zero@0.4\n```\n\n----------------------------------------\n\nTITLE: Installing Zero 0.16 via NPM\nDESCRIPTION: Command to install version 0.16 of the @rocicorp/zero package using npm. This installs the specific version with Lambda-Based Permission Deployment features.\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/release-notes/0.16.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @rocicorp/zero@0.16\n```\n\n----------------------------------------\n\nTITLE: Installing Zero 0.12\nDESCRIPTION: NPM installation command for Zero version 0.12\nSOURCE: https://github.com/rocicorp/zero-docs/blob/main/contents/docs/release-notes/0.12.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @rocicorp/zero@0.12\n```"
  }
]