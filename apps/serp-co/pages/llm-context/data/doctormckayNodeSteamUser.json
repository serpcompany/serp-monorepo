[
  {
    "owner": "doctormckay",
    "repo": "node-steam-user",
    "content": "TITLE: Handling the 'friendRelationship' Event in node-steam-user (v1.9.0+)\nDESCRIPTION: Emitted when the relationship with a user changes (e.g., friend request received, unfriended). Provides the user's `sid` (SteamID), the new `relationship` (EFriendRelationship enum), and the `previousRelationship` (v4.20.2+). The `myFriends` property is updated *after* this event. This is an ID event.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_88\n\n\n\n----------------------------------------\n\nTITLE: Handling the 'user' Event in node-steam-user (v1.9.0+)\nDESCRIPTION: Emitted when persona information for a user is received from Steam (requires the client's persona state to be online). Provides the user's `sid` (SteamID object) and their persona `user` data object. The `users` property is updated *after* this event. This is an ID event.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_84\n\n\n\n----------------------------------------\n\nTITLE: Handling the 'tradeStarted' Event in node-steam-user (v1.9.0+)\nDESCRIPTION: Emitted when a new trade session begins (e.g., after accepting a request). Provides the trade partner's `steamID`. The trade URL is available and can be automated via `node-steam-trade`. This is an ID event.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_82\n\n\n\n----------------------------------------\n\nTITLE: Handling the 'group' Event in node-steam-user (v1.9.0+)\nDESCRIPTION: Emitted when information about a Steam group is received. Provides the group's `sid` (SteamID object) and its `group` data object. The `groups` property is updated *after* this event. This is an ID event.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_85\n\n\n\n----------------------------------------\n\nTITLE: Handling the 'groupRelationship' Event in node-steam-user (v1.9.0+)\nDESCRIPTION: Emitted when the relationship with a Steam group changes. Provides the group's `sid` (SteamID), the new `relationship` (EClanRelationship enum), and the `previousRelationship` (v4.20.2+). The `myGroups` property is updated *after* this event. This is an ID event.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_89\n\n\n\n----------------------------------------\n\nTITLE: Handling the 'tradeResponse' Event in node-steam-user (v1.9.0+)\nDESCRIPTION: Emitted when a user responds to your trade request or cancels their outstanding request to you. Provides the other user's `steamID`, the `response` code (EEconTradeResponse enum), and potential trade `restrictions`. This is an ID event.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_81\n\n\n\n----------------------------------------\n\nTITLE: Enabling Two-Factor Authentication with enableTwoFactor() (Requires v2.0.0+)\nDESCRIPTION: Starts the process to activate TOTP for two-factor authentication. It sends an activation code via SMS or email depending on linked phone presence. The response object, containing status and secrets, must be saved securely. Uses callback with error and response data.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nenableTwoFactor((err, response) => {\n    if (err) {\n        console.error('Failed to initiate 2FA:', err);\n    } else {\n        console.log('2FA initiation response:', response);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Generating New Steam Trade URL with SteamUser in JavaScript\nDESCRIPTION: Asks the Steam server to generate a new trade token and URL for the user's account, requiring SteamUser version 3.28.0 or later. The callback receives an error or a response object with 'token' and 'url' representing the new trade URL data. This enables users to refresh their trade URLs for security or management purposes.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_38\n\nLANGUAGE: JavaScript\nCODE:\n```\nchangeTradeURL(callback)\n// callback(err, response): response includes 'token' and 'url' strings\n```\n\n----------------------------------------\n\nTITLE: Emitting RefreshToken Event (JavaScript)\nDESCRIPTION: Emitted when a new refresh token is issued, requiring v5.0.0 or later. This occurs on initial logon with account/password or when renewing a nearly expired token if renewRefreshTokens is true.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_59\n\nLANGUAGE: JavaScript\nCODE:\n```\nclient.on('refreshToken', (refreshToken) => { });\n\nParameters:\n- refreshToken (string): The new refresh token.\n```\n\n----------------------------------------\n\nTITLE: Getting Equipped Profile Items - node-steam-user\nDESCRIPTION: Retrieves a list of a given user's equipped profile items. It accepts the user's SteamID and an optional language parameter for localization. This method requires v4.16.0 or later and returns a response object which may have null or profile item data.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_25\n\n\n\n----------------------------------------\n\nTITLE: Responding to Group Invite - node-steam-user\nDESCRIPTION: Allows the user to join or ignore an existing Steam group invitation. It uses the group's SteamID and a boolean value (accept) to indicate joining.  Requires v3.7.0 or later.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_28\n\n\n\n----------------------------------------\n\nTITLE: Handling the 'friendsList' Event in node-steam-user (v1.9.0+)\nDESCRIPTION: Emitted once the user's friends list has been downloaded from Steam after logon. The complete friends list is now available in the `myFriends` property.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_90\n\n\n\n----------------------------------------\n\nTITLE: Handling the 'playingState' Event in node-steam-user (v3.21.0+)\nDESCRIPTION: Emitted after logon (if blocked), when game activity changes on other sessions, or when game activity changes on the current session via `gamesPlayed`. Indicates if the session is `blocked` from playing (`true`/`false`) and the `playingApp` ID causing the block (if blocked) or being played currently (if not blocked).\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_83\n\n\n\n----------------------------------------\n\nTITLE: Retrieving Product Information and Changes from Steam\nDESCRIPTION: Methods to get information about Steam apps and packages, including change tracking, detailed product info, and access tokens.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\ngetProductChanges(sinceChangenumber, callback)\ngetProductInfo(apps, packages[, inclTokens], callback)\ngetProductAccessToken(apps, packages, callback)\n```\n\n----------------------------------------\n\nTITLE: Querying Steam Master Server for Game Servers\nDESCRIPTION: Methods for retrieving lists of game servers from the Steam master server with various filtering options and detailed server information.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nserverQuery(conditions, callback)\ngetServerList(filter, limit, callback)\n```\n\n----------------------------------------\n\nTITLE: Sending Trade Request - node-steam-user\nDESCRIPTION: Sends a trade request to the specified user by their SteamID.  Requires v1.9.0 or later.  The method doesn't guarantee real-time trade visibility within the Steam UI, but trades are possible.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_34\n\n\n\n----------------------------------------\n\nTITLE: Canceling Trade Request - node-steam-user\nDESCRIPTION: Cancels an outstanding trade request to the specified user. It needs the user's SteamID. This method requires v1.9.0 or later.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_35\n\n\n\n----------------------------------------\n\nTITLE: Creating Friends Group - node-steam-user\nDESCRIPTION: Creates a friends group within the Steam client (a.k.a. a tag). It takes the desired group name. An optional callback is available. The group's ID is returned. v3.27.0 or later is required.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_29\n\n\n\n----------------------------------------\n\nTITLE: Removing Friend from Group - node-steam-user\nDESCRIPTION: Removes a friend from a specified friends group by group ID and the user's SteamID. This method requires v3.27.0 or later. An optional callback is available.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_33\n\n\n\n----------------------------------------\n\nTITLE: Events - Steam User Event Handling (JavaScript)\nDESCRIPTION: Provides event handlers related to user login, Steam Guard, and errors. Handles `loggedOn`, `steamGuard`, and `error` events, including special handling for Steam Guard codes and account parental controls. Each event fires with related data parameters.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_56\n\nLANGUAGE: JavaScript\nCODE:\n```\nuser.on('loggedOn', function(details) {\n    // Emitted when login is successful with details and parental info\n});\n\nuser.on('steamGuard', function(domain, callback) {\n    // Emitted when Steam Guard code is needed\n    // Call callback with the generated code\n});\n\nuser.on('error', function(err) {\n    // Emitted when an error occurs during login or disconnection\n});\n```\n\n----------------------------------------\n\nTITLE: Kicking Off a Playing Session with kickPlayingSession() (Requires v3.21.0+)\nDESCRIPTION: Forcibly terminates other game sessions if the account is actively playing elsewhere, optionally providing a callback to handle response, which includes the AppID of the game being played.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nkickPlayingSession((err, response) => {\n    if (err) {\n        console.error('Failed to kick playing session:', err);\n    } else {\n        console.log('Player is playing app ID:', response.playingApp);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Emitting Wallet Event (JavaScript)\nDESCRIPTION: Emitted on logon and when wallet balance changes. Reports whether the account has a wallet, its currency, and current balance.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_72\n\nLANGUAGE: JavaScript\nCODE:\n```\nclient.on('wallet', (hasWallet, currency, balance) => { });\n\nParameters:\n- hasWallet (boolean): True if account has a wallet.\n- currency (SteamUser.ECurrencyCode): Wallet currency ID.\n- balance (number): Current wallet balance.\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Storage Engine for SteamUser (JavaScript)\nDESCRIPTION: Shows how to implement a custom storage engine for `SteamUser` by listening to the `save` and `read` events on the `user.storage` object. This allows storing Steam data (like server lists and machine auth tokens) in alternative locations like databases or cloud services instead of the default file system. Requires an initialized `SteamUser` instance (`user`) and provides example implementations for saving and reading file data using a hypothetical `someStorageSystem`.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nuser.storage.on('save', function(filename, contents, callback) {\n\t// filename is the name of the file, as a string\n\t// contents is a Buffer containing the file's contents\n\t// callback is a function which you MUST call on completion or error, with a single error argument\n\n\t// For example:\n\tsomeStorageSystem.saveFile(filename, contents, function(err) {\n\t\tcallback(err);\n\t});\n});\n\nuser.storage.on('read', function(filename, callback) {\n\t// filename is the name of the file, as a string\n\t// callback is a function which you MUST call on completion or error, with an error argument and a Buffer argument\n\n\t// For example:\n\tsomeStorageSystem.readFile(filename, function(err, file) {\n\t\tif(err) {\n\t\t\tcallback(err);\n\t\t\treturn;\n\t\t}\n\n\t\tcallback(null, file);\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Current Player Count with getPlayerCount()\nDESCRIPTION: Requests number of Steam users currently active in a specific app or overall if appid is 0. Uses callback to return error or player count.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\ngetPlayerCount(440, (err, count) => {\n    if (err) {\n        console.error('Failed to get player count:', err);\n    } else {\n        console.log('Current player count for app 440:', count);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: sendToGC Method - Send Messages to Game Coordinator (JavaScript)\nDESCRIPTION: Sends a message to the Steam Game Coordinator, requiring v4.1.0+. Involves constructing a message with app ID, message type, protobuf header, and payload, and then transmitting it as per the GitHub wiki documentation.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_55\n\nLANGUAGE: JavaScript\nCODE:\n```\nsendToGC(appid, msgType, protoBufHeader, payload[, callback])\n\n// Sends a message to the game coordinator. Requires v4.1.0+.\n// Refer to GitHub wiki for detailed implementation.\n```\n\n----------------------------------------\n\nTITLE: Emitting TradeOffers Event (JavaScript)\nDESCRIPTION: Emitted when Steam notifies the client of new or changed active received trade offers. This occurs shortly after logon if nonzero and whenever the count changes.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_63\n\nLANGUAGE: JavaScript\nCODE:\n```\nclient.on('tradeOffers', (count) => { });\n\nParameters:\n- count (number): The number of active received trade offers.\n```\n\n----------------------------------------\n\nTITLE: Emitting Licenses Event (JavaScript)\nDESCRIPTION: Emitted on logon and when licenses change. Provides an array of license data for owned packages. Not emitted for anonymous accounts, which implicitly have license 17906.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_73\n\nLANGUAGE: JavaScript\nCODE:\n```\nclient.on('licenses', (licenses) => { });\n\nParameters:\n- licenses (object[]): Array of license objects (see CMsgClientLicenseList.License structure).\n```\n\n----------------------------------------\n\nTITLE: Formatting Currency with SteamUser Static Method (JavaScript)\nDESCRIPTION: Demonstrates how to use the static `SteamUser.formatCurrency` method to format a numerical amount into a currency string based on a specified `ECurrencyCode`. Requires the `SteamUser` module and its `ECurrencyCode` enum. Shows examples for USD, JPY, and EUR.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(SteamUser.formatCurrency(12.34, SteamUser.ECurrencyCode.USD)); // $12.34\nconsole.log(SteamUser.formatCurrency(12345, SteamUser.ECurrencyCode.JPY)); // ¥ 12345\nconsole.log(SteamUser.formatCurrency(123.45, SteamUser.ECurrencyCode.EUR)); // 123,45€\n```\n\n----------------------------------------\n\nTITLE: Handling the 'changelist' Event in node-steam-user (v3.3.0+)\nDESCRIPTION: Emitted when a new PICS changelist is received from Steam, indicating changes to apps or packages. Provides the new `changenumber` and arrays of changed `apps` (AppIDs) and `packages` (PackageIDs). Requires `enablePicsCache` to be true and `changelistUpdateInterval` to be nonzero. The `picsCache` property is updated *after* this event.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_76\n\n\n\n----------------------------------------\n\nTITLE: Handling the 'ownershipCached' Event in node-steam-user (v3.3.0+)\nDESCRIPTION: Emitted once all app ownership data is loaded, enabling safe calls to ownership-related methods like `getOwnedApps` or `ownsApp`. Requires the `enablePicsCache` option to be true. This event was renamed from `appOwnershipCached` in v4.22.1 (the old name is deprecated).\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_75\n\n\n\n----------------------------------------\n\nTITLE: redeemKey Method - Redeem Steam Game CD Key (JavaScript)\nDESCRIPTION: Redeems a Steam-formatted game key on the user’s account. Requires v3.2.0+ and provides callback with error, purchase result details, and package list. If the operation fails, error object contains detailed info about the failure.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_49\n\nLANGUAGE: JavaScript\nCODE:\n```\nredeemKey(key[, callback])\n- `key` - Steam formatted game CD key\n- `callback` - Function invoked after redeeming, with error, result, and package info\n\n// Downloads a game key. Requires v3.2.0+\n// Error object may contain `purchaseResultDetails` and `packageList`.\n```\n\n----------------------------------------\n\nTITLE: Emitting NewItems Event (JavaScript)\nDESCRIPTION: Emitted when Steam notifies the client of new items. The count can be reset by loading the inventory page.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_61\n\nLANGUAGE: JavaScript\nCODE:\n```\nclient.on('newItems', (count) => { });\n\nParameters:\n- count (number): The number of new items.\n```\n\n----------------------------------------\n\nTITLE: Logging Off from Steam with logOff()\nDESCRIPTION: Logs the user out of Steam and terminates the connection. No parameters required. This method is used to safely end a user session.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nlogOff();\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Requesting Rich Presence\nDESCRIPTION: Illustrates the structure of the `response` object returned by the `requestRichPresence` method's callback (requires node-steam-user v4.18.0+). Shows the `users` object containing 64-bit SteamIDs mapped to objects with detailed `richPresence` key-value data and the final `localizedString` as displayed in Steam. `localizedString` can be null if no translation exists for the requested language.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"users\": {\n        \"76561198006409530\": {\n            \"richPresence\": {\n                \"status\": \"Playing CS:GO\",\n                \"version\": \"13765\",\n                \"time\": \"15.851017\",\n                \"game:state\": \"lobby\",\n                \"steam_display\": \"#display_Menu\",\n                \"connect\": \"+gcconnectG02C0193A\"\n            },\n            \"localizedString\": \"Playing CS:GO\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Payload for Uploading Steam Rich Presence\nDESCRIPTION: Provides an example JSON object structure for the `richPresence` parameter in the `uploadRichPresence` method (requires node-steam-user v4.4.0+). Demonstrates using `steam_display` with a localization key (#TF_RichPresence_Display) and placeholder keys (`state`, `matchgrouploc`, `currentmap`) to generate localized rich presence strings based on the game's localization data.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"steam_display\": \"#TF_RichPresence_Display\",\n\t\"state\": \"PlayingMatchGroup\",\n\t\"matchgrouploc\": \"SpecialEvent\",\n\t\"currentmap\": \"Hello, World!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Emitting VacBans Event (JavaScript)\nDESCRIPTION: Emitted on logon and potentially when ban status changes. Reports the number of VAC bans and a list of AppIDs affected (which may include non-existent ones).\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_71\n\nLANGUAGE: JavaScript\nCODE:\n```\nclient.on('vacBans', (numBans, appids) => { });\n\nParameters:\n- numBans (number): Number of bans.\n- appids (number[]): Array of affected AppIDs.\n```\n\n----------------------------------------\n\nTITLE: Setting Profile Background - node-steam-user\nDESCRIPTION: This method changes the user's profile background. It requires the asset ID of the background item to set. The background can be removed using an asset ID of '0'.  It needs v4.16.0 or later.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_26\n\n\n\n----------------------------------------\n\nTITLE: Creating a New SteamWeb Session with webLogOn()\nDESCRIPTION: Initiates a session with steamcommunity.com, useful when the current session expires or becomes invalid. Listens to the 'webSession' event to retrieve cookies necessary for authenticated requests.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nwebLogOn();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Authentication Secret with getAuthSecret() (Requires v3.10.0+)\nDESCRIPTION: Obtains the account's auth secret used for in-home streaming. Returns a secret ID and a key buffer via callback, after which it can be used for streaming authentication.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\ngetAuthSecret((err, secretID, key) => {\n    if (err) {\n        console.error('Failed to get auth secret:', err);\n    } else {\n        console.log('Auth secret ID:', secretID);\n        console.log('Auth secret key:', key);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Listing Owned Emoticons for a Steam Account Using SteamUser in JavaScript\nDESCRIPTION: Requests a list of emoticons available for use by the Steam account. Requires SteamUser version 4.5.0 or later. The callback provides an error or a response object containing an 'emoticons' dictionary. Each entry key is an emoticon name string with colons (e.g., \":steamhappy:\"), and values are objects detailing name, count owned, last used time, use count, and time received. Dates are JavaScript Date objects or null where applicable.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_39\n\nLANGUAGE: JavaScript\nCODE:\n```\ngetEmoticonList(callback)\n// callback(err, response): response contains 'emoticons' object with detailed properties\n```\n\n----------------------------------------\n\nTITLE: markAllNotificationsRead Method - Mark All Notifications as Read (JavaScript)\nDESCRIPTION: Marks all notifications as read. Requires v5.2.0+; this method does not provide feedback after execution.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_53\n\nLANGUAGE: JavaScript\nCODE:\n```\nmarkAllNotificationsRead()\n\n// Marks all notifications as read. No callback or response.\n```\n\n----------------------------------------\n\nTITLE: Emitting EmailInfo Event (JavaScript)\nDESCRIPTION: Emitted on logon and when account email details change. Provides the email address and validation status.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_69\n\nLANGUAGE: JavaScript\nCODE:\n```\nclient.on('emailInfo', (address, validated) => { });\n\nParameters:\n- address (string): Account's email address.\n- validated (boolean): Whether the email is validated.\n```\n\n----------------------------------------\n\nTITLE: Emitting MachineAuthToken Event (JavaScript)\nDESCRIPTION: Emitted when a new machine authentication token is issued. This is primarily relevant for accounts using email Steam Guard and requires v4.29.0 or later. The library usually manages these tokens automatically.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_58\n\nLANGUAGE: JavaScript\nCODE:\n```\nclient.on('machineAuthToken', (machineAuthToken) => { });\n\nParameters:\n- machineAuthToken (string): The new machine auth token.\n```\n\n----------------------------------------\n\nTITLE: Emitting CommunityMessages Event (JavaScript)\nDESCRIPTION: Emitted when Steam notifies the client of new community (moderator) messages, requiring v3.26.0 or later. Occurs shortly after logon if nonzero and whenever the count changes.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_64\n\nLANGUAGE: JavaScript\nCODE:\n```\nclient.on('communityMessages', (count) => { });\n\nParameters:\n- count (number): The number of unread community messages.\n```\n\n----------------------------------------\n\nTITLE: Emitting WebSession Event (JavaScript)\nDESCRIPTION: Emitted upon successful negotiation of a steamcommunity.com web session. This happens automatically on logon (unless a webLogonToken was used) and after webLogOn calls. Requires v4.19.0 or later.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_60\n\nLANGUAGE: JavaScript\nCODE:\n```\nclient.on('webSession', (sessionID, cookies) => { });\n\nParameters:\n- sessionID (string): The value of the 'sessionid' cookie.\n- cookies (string[]): An array of cookies as 'name=value' strings.\n```\n\n----------------------------------------\n\nTITLE: Emitting Disconnected Event (JavaScript)\nDESCRIPTION: Emitted when disconnected from Steam for a non-fatal reason with autoRelogin enabled, or in response to a logOff() call. The client will attempt to reconnect. The SteamID property remains defined.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_57\n\nLANGUAGE: JavaScript\nCODE:\n```\nclient.on('disconnected', (eresult, msg) => { });\n\nParameters:\n- eresult (SteamUser.EResult): A value indicating the reason for the disconnect.\n- msg (string | undefined): An optional string describing the reason.\n```\n\n----------------------------------------\n\nTITLE: Emitting NotificationsReceived Event (JavaScript)\nDESCRIPTION: Emitted when Steam backend notifies of new or changed notifications, requiring v5.2.0 or later. The payload contains an array of notification objects, but its behavior is not always intuitive, often including only the changed notification.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_66\n\nLANGUAGE: JavaScript\nCODE:\n```\nclient.on('notificationsReceived', (payload) => { });\n\nParameters:\n- payload (object): An object containing a 'notifications' array.\n  - notifications (object[]): Array of notification objects.\n    - id (string): Notification ID.\n    - type (ESteamNotificationType): Type of notification.\n    - body (any): Data specific to the notification type.\n    - read (boolean): Whether the notification is marked read.\n    - timestamp (Date): When the notification was created.\n    - hidden (boolean): Whether the notification is hidden.\n    - expiry (Date): When the notification expires.\n    - viewed (Date | null): When the notification was viewed.\n```\n\n----------------------------------------\n\nTITLE: Emitting VanityURL Event (JavaScript)\nDESCRIPTION: Emitted when the account's vanity URL changes, requiring v3.7.0 or later. The event provides the new URL before the corresponding property is updated.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_67\n\nLANGUAGE: JavaScript\nCODE:\n```\nclient.on('vanityURL', (url) => { });\n\nParameters:\n- url (string): The new vanity URL.\n```\n\n----------------------------------------\n\nTITLE: Leaving Legacy Chat Rooms Using SteamUser Deprecated Method in JavaScript\nDESCRIPTION: Leaves a specified legacy chat room using the room's SteamID object or a parsable string. Requires SteamUser version 1.9.0 or later. This method is deprecated; SteamChatRoomClient should be used to manage chat room membership instead.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_44\n\nLANGUAGE: JavaScript\nCODE:\n```\nleaveChat(steamID)\n// steamID: SteamID or string\n```\n\n----------------------------------------\n\nTITLE: Indicating Chat Typing Status Using SteamUser Deprecated Method in JavaScript\nDESCRIPTION: Notifies a recipient that the local user is typing a message. Requires SteamUser version 1.9.0 or later. Takes the recipient parameter as a SteamID object or a parsable string. This method is deprecated in favor of SteamChatRoomClient for managing typing notifications.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_41\n\nLANGUAGE: JavaScript\nCODE:\n```\nchatTyping(recipient)\n// recipient: SteamID or string\n```\n\n----------------------------------------\n\nTITLE: Joining Legacy Chat Rooms Using SteamUser Deprecated Method in JavaScript\nDESCRIPTION: Joins a legacy chat room or group chat using a SteamID object or parsable string. Requires SteamUser version 1.9.0 or later. The optional callback returns error information. This method is deprecated in favor of the SteamChatRoomClient interface for chat management.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_43\n\nLANGUAGE: JavaScript\nCODE:\n```\njoinChat(steamID[, callback])\n// steamID: SteamID or string\n// callback(err)\n```\n\n----------------------------------------\n\nTITLE: Checking User's App Ownership\nDESCRIPTION: Methods to determine which apps are owned by the current Steam account, with optional filtering capabilities for excluding shared or free licenses.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\ngetOwnedApps([filter])\nownsApp(appid[, filter])\n```\n\n----------------------------------------\n\nTITLE: Setting Legacy Chat Room Privacy Levels Using SteamUser Deprecated Methods in JavaScript\nDESCRIPTION: Includes methods to lock (setChatPrivate) and unlock (setChatPublic) a legacy chat room using its SteamID. These control whether only group members and invited users or anyone can join. Both require SteamUser version 1.9.0 or later and are deprecated in favor of SteamChatRoomClient. Similarly, setting and unsetting officers-only chat permissions are managed via setChatOfficersOnly and unsetChatOfficersOnly respectively.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_45\n\nLANGUAGE: JavaScript\nCODE:\n```\nsetChatPrivate(steamID)\nsetChatPublic(steamID)\nsetChatOfficersOnly(steamID)\nunsetChatOfficersOnly(steamID)\n// steamID: SteamID or string for chat room\n```\n\n----------------------------------------\n\nTITLE: Handling the 'groupAnnouncement' Event in node-steam-user (v1.9.0+)\nDESCRIPTION: Emitted when a group posts a new announcement. Provides the group's `sid` (SteamID), announcement `headline` (title), and announcement `gid` (for URL). This is an ID event.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_87\n\n\n\n----------------------------------------\n\nTITLE: Retrieving Steam Guard Details with getSteamGuardDetails() (Requires v1.11.0+)\nDESCRIPTION: Fetches details about Steam Guard status, including whether it's enabled, associated timestamps, trading ability, and phone verification. Uses a callback with error, boolean statuses, Date objects, and timestamps for account validation purposes.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\ngetSteamGuardDetails((err, details) => {\n    if (err) {\n        console.error('Failed to get Steam Guard details:', err);\n    } else {\n        console.log('Steam Guard details:', details);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Emitting AccountLimitations Event (JavaScript)\nDESCRIPTION: Emitted on logon and when account limitations change. Reports status regarding limited account status, community bans, account locks, and the ability to invite friends.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_70\n\nLANGUAGE: JavaScript\nCODE:\n```\nclient.on('accountLimitations', (limited, communityBanned, locked, canInviteFriends) => { });\n\nParameters:\n- limited (boolean): True if account is limited.\n- communityBanned (boolean): True if community banned.\n- locked (boolean): True if account is locked.\n- canInviteFriends (boolean): True if account can invite friends.\n```\n\n----------------------------------------\n\nTITLE: Handling the 'tradeRequest' Event in node-steam-user (v1.9.0+)\nDESCRIPTION: Emitted when another user sends a trade request. Provides the sender's `steamID` (SteamID object) and a `respond` function callback. Call `respond(true)` to accept or `respond(false)` to decline the request. This is classified as an ID event.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_80\n\nLANGUAGE: javascript\nCODE:\n```\nuser.on('tradeRequest', function(steamID, respond) {\n\tconsole.log(\"Incoming trade request from \" + steamID.getSteam3RenderedID() + \", accepting\");\n\trespond(true);\n});\n```\n\n----------------------------------------\n\nTITLE: Finalizing Two-Factor Authentication with finalizeTwoFactor() (Requires v2.0.0+)\nDESCRIPTION: Completes enabling TOTP 2FA using the shared secret buffer and the activation code received. The callback receives error information, confirming whether 2FA was successfully enabled.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nfinalizeTwoFactor(secretBuffer, '123456', (err) => {\n    if (err) {\n        console.error('Finalization of 2FA failed:', err);\n    } else {\n        console.log('Two-factor authentication enabled successfully.');\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Obtaining Steam Trade URL and Token with SteamUser in JavaScript\nDESCRIPTION: Fetches the Steam account's trade URL token and full URL. Requires SteamUser version 3.28.0 or later. The single-parameter callback returns an error or a response object containing 'token' (trade token string) and 'url' (full trade URL string). This method facilitates inventory trading operations by providing the user's current trade URL.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_37\n\nLANGUAGE: JavaScript\nCODE:\n```\ngetTradeURL(callback)\n// callback(err, response): response includes 'token' and 'url' strings\n```\n\n----------------------------------------\n\nTITLE: Fetching Privacy Settings with getPrivacySettings() (Requires v4.11.0+)\nDESCRIPTION: Retrieves the privacy states of profile, inventory, gifts, owned games, playtime, and friends list using a callback that provides error or a response object containing privacy states.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\ngetPrivacySettings((err, response) => {\n    if (err) {\n        console.error('Failed to get privacy settings:', err);\n    } else {\n        console.log('Privacy settings:', response);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: requestFreeLicense Method - Request Licenses for Free-to-Play Games (JavaScript)\nDESCRIPTION: Requests free-on-demand licenses for specified AppIDs. Requires v3.18.0+ and limits rate to approximately 50 apps per hour. On success, a `licenses` event is emitted with granted licenses. It helps to activate licenses for non-pre-installed free-to-play titles.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_50\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequestFreeLicense(appIDs[, callback])\n- `appIDs` - Array of AppIDs for license requests\n- `callback` - Function called after request with errors and granted license IDs\n\n// Requests licenses for free-to-play games. Rate limited. Emits `licenses` event on success.\n```\n\n----------------------------------------\n\nTITLE: Reporting Played Games with gamesPlayed() (Requires v3.21.0+)\nDESCRIPTION: Informs Steam about current game activity, supporting multiple formats: app IDs, game names, or detailed objects with game ID and extra info. Supports force option to kick other sessions if needed.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\ngamesPlayed([\n    440,\n    { game_id: 550, game_extra_info: \"Left 4 Dead 2\" },\n    \"Minecraft\"\n], true);\n```\n\n----------------------------------------\n\nTITLE: Emitting AccountInfo Event (JavaScript)\nDESCRIPTION: Emitted on logon and when account details change, requiring v3.4.0 or later. Provides updated information such as persona name, country, authorized machines, flags, and Facebook linking status.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_68\n\nLANGUAGE: JavaScript\nCODE:\n```\nclient.on('accountInfo', (name, country, authedMachines, flags, facebookID, facebookName) => { });\n\nParameters:\n- name (string): Account's persona name.\n- country (string): Login country code.\n- authedMachines (number): Count of authorized machines.\n- flags (number): Account's bitwise flags.\n- facebookID (string | undefined): Linked Facebook ID.\n- facebookName (string | undefined): Linked Facebook name.\n```\n\n----------------------------------------\n\nTITLE: Re-Logging into Steam with relog() (Requires v3.18.0+)\nDESCRIPTION: Performs a logoff followed immediately by a logon, useful for session refreshes. It succeeds only if logged into an anonymous or password-based account, or if a refresh token was used. Emits 'disconnected' and 'loggedOn' events sequentially.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nrelog();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Owned Apps - node-steam-user\nDESCRIPTION: This method retrieves a user's list of owned apps. It accepts the user's SteamID, along with optional parameters to filter or include additional data. It requires v4.16.0 or later. The function returns an array of app objects containing details like appid, name, and playtime information.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_22\n\n\n\n----------------------------------------\n\nTITLE: Getting Credential Change Times with getCredentialChangeTimes() (Requires v3.10.0+)\nDESCRIPTION: Provides timestamps for last password change, reset, and email change, assisting in security audits. The callback receives error, and Date objects or null if not available.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\ngetCredentialChangeTimes((err, timestamps) => {\n    if (err) {\n        console.error('Failed to retrieve credential change times:', err);\n    } else {\n        console.log('Credential timestamps:', timestamps);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Asset Description Data with SteamUser in JavaScript\nDESCRIPTION: Retrieves asset description information from Steam in the specified language for a given game app ID and a list of item classes. Requires SteamUser version 3.25.0 or later. The method takes a language code string, app ID number, an array of class objects (each with 'classid' and optional 'instanceid'), and a callback. The callback returns an error or an array of description objects. This method mimics the Steam WebAPI ISteamEconomy GetAssetClassInfo endpoint but currently lacks tag data.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_36\n\nLANGUAGE: JavaScript\nCODE:\n```\ngetAssetClassInfo(language, appid, classes, callback)\n// language: language code string (e.g. \"en\", \"es\", \"zh\")\n// appid: game AppID number\n// classes: array of objects each with 'classid' and optional 'instanceid'\n// callback(err, descriptions): called with error or array of description objects\n```\n\n----------------------------------------\n\nTITLE: Getting Friends That Play App - node-steam-user\nDESCRIPTION: This function retrieves a list of friends who have played or used a specific application, identified by its AppID. Requires v4.20.0 or later. The output is an array of SteamID objects representing the user's friends who play the specified game.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_23\n\n\n\n----------------------------------------\n\nTITLE: Requesting Email Validation with requestValidationEmail()\nDESCRIPTION: Sends a request to Steam to email a validation link to the registered email address. Accepts an optional callback invoked upon response, passing an error or null on success.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequestValidationEmail((err) => {\n    if (err) {\n        console.error('Failed to send validation email:', err);\n    } else {\n        console.log('Validation email sent successfully.');\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: createEncryptedAppTicket Method - Generate Encrypted App Ticket (JavaScript)\nDESCRIPTION: Requests an encrypted app ticket for a specific AppID, optionally including user data. Requires v3.14.0+ and provides the ticket as a Buffer in the callback. The ticket can be used to prove ownership or identity to publishers if set up appropriately in Steamworks.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_54\n\nLANGUAGE: JavaScript\nCODE:\n```\ncreateEncryptedAppTicket(appid[, userData], callback)\n- `appid` - Steam AppID\n- `userData` - Optional Buffer with user data to embed\n- `callback` - Called with error and the encrypted ticket Buffer\n\n// Generates an encrypted app ticket. Requires v3.14.0+.\n```\n\n----------------------------------------\n\nTITLE: Emitting OfflineMessages Event (JavaScript)\nDESCRIPTION: Emitted after logon when Steam notifies the client of unread offline chat messages, providing the total count and a list of senders.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_65\n\nLANGUAGE: JavaScript\nCODE:\n```\nclient.on('offlineMessages', (count, friends) => { });\n\nParameters:\n- count (number): The number of unread offline messages.\n- friends (string[]): An array of SteamID strings for users with unread messages.\n```\n\n----------------------------------------\n\nTITLE: Handling the 'gifts' Event in node-steam-user\nDESCRIPTION: Emitted upon logon and when gift/guest pass status changes (received, accepted, declined). Provides an array 'gifts' containing outstanding gift/guest pass objects sent to the user but not yet actioned. The `gifts` property is updated after this event.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_74\n\n\n\n----------------------------------------\n\nTITLE: Inviting to Steam Group - node-steam-user\nDESCRIPTION: Invites a user to a Steam group. It requires the SteamID of the user to invite and the group's SteamID. The method uses `SteamID` object or a parseable string as arguments. v3.7.0 or later is needed.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_27\n\n\n\n----------------------------------------\n\nTITLE: Adding Friend to Group - node-steam-user\nDESCRIPTION: Adds a friend to a specified friends group by group ID and user's SteamID. The method requires v3.27.0 or later. An optional callback is available.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_32\n\n\n\n----------------------------------------\n\nTITLE: markNotificationsRead Method - Mark Notifications as Read (JavaScript)\nDESCRIPTION: Marks specific notifications as read using their IDs. Requires v5.2.0+ and accepts an array of notification IDs. No response or feedback is provided upon completion.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_52\n\nLANGUAGE: JavaScript\nCODE:\n```\nmarkNotificationsRead(notificationIds)\n- `notificationIds` - Array of notification IDs (numbers or strings)\n\n// Marks specified notifications as read. No callback or response.\n```\n\n----------------------------------------\n\nTITLE: Retrieving Owned Profile Items - node-steam-user\nDESCRIPTION: This method retrieves a listing of profile items currently owned by the user. It accepts an optional 'language' to localize item data. Requires v4.16.0 or later. Returns an object with arrays for different item types like profile backgrounds, and animated avatars.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_24\n\n\n\n----------------------------------------\n\nTITLE: getLegacyGameKey Method - Retrieve Legacy CD Key for a Game (JavaScript)\nDESCRIPTION: Requests the legacy CD key for a game with the specified AppID, applicable only to games using legacy keys. Requires v4.24.0+ and provides the response via callback containing the key if successful.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_51\n\nLANGUAGE: JavaScript\nCODE:\n```\ngetLegacyGameKey(appid, callback)\n- `appid` - Steam AppID of the game\n- `callback` - Called with error and response containing the game key\n\n// Retrieves legacy CD key. Requires v4.24.0+.\n```\n\n----------------------------------------\n\nTITLE: Handling the 'appUpdate' Event in node-steam-user (v3.3.0+)\nDESCRIPTION: Emitted when an app already in the PICS cache updates. Provides the `appid` and the new app `data` (identical to `getProductInfo` output). Requires `enablePicsCache` to be true and `changelistUpdateInterval` to be nonzero. The `picsCache.apps[appid]` property is updated *after* this event.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_77\n\n\n\n----------------------------------------\n\nTITLE: Handling the 'packageUpdate' Event in node-steam-user (v3.3.0+)\nDESCRIPTION: Emitted when a package already in the PICS cache updates. Provides the `packageid` and the new package `data` (identical to `getProductInfo` output). Requires `enablePicsCache` to be true and `changelistUpdateInterval` to be nonzero. The `picsCache.packages[packageid]` property is updated *after* this event.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_78\n\n\n\n----------------------------------------\n\nTITLE: Handling the 'marketingMessages' Event in node-steam-user (v3.4.0+)\nDESCRIPTION: Emitted on logon and when new marketing messages (like post-game popups) are published. Provides a `timestamp` (Date object) and an array of `messages`, each with an `id`, `url`, and bitwise `flags`.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_79\n\n\n\n----------------------------------------\n\nTITLE: Emitting NewComments Event (JavaScript)\nDESCRIPTION: Emitted when Steam sends a notification about new comments, providing counts for total, on user content, and in discussions.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_62\n\nLANGUAGE: JavaScript\nCODE:\n```\nclient.on('newComments', (count, myItems, discussions) => { });\n\nParameters:\n- count (number): Total number of new comments.\n- myItems (number): Comments on the user's content.\n- discussions (number): Posts in subscribed discussion threads.\n```\n\n----------------------------------------\n\nTITLE: Handling the 'groupEvent' Event in node-steam-user (v1.9.0+)\nDESCRIPTION: Emitted when a group schedules or starts a new event. Provides the group's `sid` (SteamID), event `headline` (name), `date` (Date object), event `gid` (for URL), and associated `gameID` (AppID). This is an ID event.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_86\n\n\n\n----------------------------------------\n\nTITLE: Deleting Friends Group - node-steam-user\nDESCRIPTION: Deletes a specified friends group by its reference group ID. Requires v3.27.0 or later. An optional callback is provided.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_30\n\n\n\n----------------------------------------\n\nTITLE: Renaming Friends Group - node-steam-user\nDESCRIPTION: Renames an existing friends group by its ID. Takes the group's ID and the new name for the group as parameters.  Requires v3.27.0 or later.  Note that Steam Client doesn't update dynamically.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_31\n\n\n\n----------------------------------------\n\nTITLE: inviteToChat Method - Invite User to Legacy Chat Room (JavaScript)\nDESCRIPTION: Invites a user to a legacy Steam chat room using the `inviteToChat` method. It requires v1.9.0+ and is deprecated in favor of `SteamChatRoomClient`. The method takes a chat ID and user ID, both of which can be `SteamID` objects or parseable strings, with the purpose of inviting a user to an existing chat room.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_47\n\nLANGUAGE: JavaScript\nCODE:\n```\ninviteToChat(chatID, userID)\n- `chatID` - The SteamID of the chat room as a `SteamID` object or parseable string\n- `userID` - The SteamID of the user to invite as a `SteamID` object or parseable string\n\n// Invites a user to a legacy chat room. Requires v1.9.0+.\n// Deprecated: Use SteamChatRoomClient instead.\n\n// Documentation link: https://github.com/DoctorMcKay/node-steam-user/wiki/SteamChatRoomClient\n```\n\n----------------------------------------\n\nTITLE: Managing User Permissions in Legacy Chat Rooms Using SteamUser Deprecated Methods in JavaScript\nDESCRIPTION: Provides methods to kick, ban, and unban users from legacy chat rooms using their SteamIDs. Each method requires SteamUser version 1.9.0 or later and accepts the chat room SteamID and user SteamID as parameters. These methods are deprecated; modern chat moderation is handled by SteamChatRoomClient.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_46\n\nLANGUAGE: JavaScript\nCODE:\n```\nkickFromChat(chatID, userID)\nbanFromChat(chatID, userID)\nunbanFromChat(chatID, userID)\n// chatID: SteamID or string of chat room\n// userID: SteamID or string of user\n```\n\n----------------------------------------\n\nTITLE: Sending Chat Messages Using SteamUser Deprecated Methods in JavaScript\nDESCRIPTION: Sends a chat message to a friend or legacy chat room using SteamUser version 1.9.0 or later. Parameters include recipient (SteamID object or parsable string), message string, and optional message type from EChatEntryType (defaulting to ChatMsg). This method is deprecated; users are advised to use SteamChatRoomClient accessible via the SteamUser chat property for modern chat operations.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_40\n\nLANGUAGE: JavaScript\nCODE:\n```\nchatMessage(recipient, message[, type])\n// recipient: SteamID or string\n// message: chat string\n// type: optional EChatEntryType\n```\n\n----------------------------------------\n\nTITLE: createChatRoom Method - Create Multi-User Legacy Chat Room (JavaScript)\nDESCRIPTION: Creates a new legacy multi-user chat room, optionally converting an existing user's chat window and inviting specified users. Requires v1.9.0+ and is deprecated in favor of `SteamChatRoomClient`. The method accepts optional user IDs for conversion and invitation, along with a callback that provides the new chat room's SteamID or an error.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_48\n\nLANGUAGE: JavaScript\nCODE:\n```\ncreateChatRoom([convertUserID], [inviteUserID], [callback])\n- `convertUserID` - SteamID of user whose chat window to convert or invite.\n- `inviteUserID` - SteamID of user to auto-invite.\n- `callback` - Function called with error and new chat room SteamID.\n\n// Creates a legacy chat room. Requires v1.9.0+.\n// Deprecated: Use SteamChatRoomClient.\n\n// Documentation link: https://github.com/DoctorMcKay/node-steam-user/wiki/SteamChatRoomClient\n```\n\n----------------------------------------\n\nTITLE: Retrieving Chat History with a User Using SteamUser Deprecated Method in JavaScript\nDESCRIPTION: Requests chat message history with a user. Available in SteamUser version 1.9.0 or later. Accepts a SteamID or parsable string and an optional callback receiving error and an array of message objects. Each message includes SteamID of sender, timestamp Date object, message text, and unread status boolean. Results may also arrive via 'chatHistory' event. Deprecated; SteamChatRoomClient should be used instead.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_42\n\nLANGUAGE: JavaScript\nCODE:\n```\ngetChatHistory(steamID[, callback])\n// steamID: SteamID or string\n// callback(err, messages): messages array with detailed properties\n```\n\n----------------------------------------\n\nTITLE: Getting Server IP and SteamID Mapping Information\nDESCRIPTION: Methods to retrieve mappings between server IP addresses and SteamIDs, allowing conversion in both directions.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\ngetServerSteamIDsByIP(ips, callback)\ngetServerIPsBySteamID(steamids, callback)\n```\n\n----------------------------------------\n\nTITLE: Filtering Steam Licenses with Custom Function in JavaScript\nDESCRIPTION: Example of using a custom filter function with the ownershipFilter option to filter Steam licenses based on creation time. The function only includes licenses that were acquired at least a year ago.\nSOURCE: https://github.com/doctormckay/node-steam-user/blob/master/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nuser.setOption('ownershipFilter', (license) => {\n\t// only passes licenses that were acquired at least a year ago\n\tlet time = Math.floor(Date.now() / 1000);\n\treturn time - license.time_created >= 60 * 60 * 24 * 365;\n});\n```"
  }
]