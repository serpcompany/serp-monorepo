[
  {
    "owner": "scipp",
    "repo": "scipp",
    "content": "TITLE: Creating 1D, 2D, and 3D Variables in Python with Scipp\nDESCRIPTION: Demonstrates creating Variables of different dimensions using scipp.array function. The code shows how to specify dimensions and values for 1D, 2D, and 3D arrays.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/data-structures/creating-arrays-and-datasets.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport scipp as sc\n\nv1d = sc.array(dims=['x'], values=[1, 2, 3, 4])\nv2d = sc.array(dims=['x', 'y'], values=[[1, 2], [3, 4]])\nv3d = sc.array(dims=['x', 'y', 'z'], values=[[[1, 2], [3, 4]], [[5, 6], [7, 8]]])\n```\n\n----------------------------------------\n\nTITLE: Creating DataArray in Scipp\nDESCRIPTION: Shows how to create a DataArray in Scipp, including data, coordinates, and masks. Demonstrates the use of various Variable creation functions to build the components of a DataArray.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/data-structures/creating-arrays-and-datasets.ipynb#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport scipp as sc\n\nx = sc.linspace('x', start=1.5, stop=3.0, num=2, unit='m')\nx_square = x * x\ntime = sc.linspace('time', start=1.0, stop=5.0, num=4, unit='s')\ndata = sc.array(dims=['x', 'time'], values=[[1, 2, 3, 4], [6, 7, 8, 9]], unit='K')\nda = sc.DataArray(data, coords={'x': x, 'time': time, 'x_square': x_square})\nda\n\nx = sc.linspace('x', start=1.5, stop=3.0, num=4, unit='m')\nm = sc.array(dims=['x'], values=[True, False, True, False])\ndata = x**2\nsc.DataArray(data, coords={'x': x}, masks={'m': m})\n```\n\n----------------------------------------\n\nTITLE: Creating Vector Variables in Scipp\nDESCRIPTION: Demonstrates creating Variables with 3-vector values using scipp.vectors function.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/data-structures/creating-arrays-and-datasets.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nsc.vectors(dims=['position'], values=[[1, 2, 3], [4, 5, 6]], unit='m')\n```\n\n----------------------------------------\n\nTITLE: Creating Scipp Variable from NumPy Array\nDESCRIPTION: Shows how to create a Scipp Variable using a NumPy array. The code demonstrates passing dimensions and a NumPy array as values to scipp.array function.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/data-structures/creating-arrays-and-datasets.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\n\na = np.array([[1, 2], [3, 4]])\nv = sc.array(dims=['x', 'y'], values=a)\n```\n\n----------------------------------------\n\nTITLE: Creating a Dataset\nDESCRIPTION: Creates a Dataset with multiple data arrays sharing common coordinates.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/data-structures/data-structures.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nds = sc.Dataset(\n    data={\n        'a': sc.array(dims=['y', 'x'], values=np.random.rand(2, 3)),\n        'b': sc.array(dims=['x', 'y'], values=np.random.rand(3, 2)),\n    },\n    coords={\n        'x': sc.array(dims=['x'], values=np.arange(3.0), unit='m'),\n        'y': sc.array(dims=['y'], values=np.arange(2.0), unit='m'),\n        'aux': sc.array(dims=['x'], values=np.random.rand(3)),\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Filled Variables in Scipp\nDESCRIPTION: Demonstrates creating Variables filled with a constant value using scipp.zeros and scipp.full functions. Also shows the use of '_like' functions to create new Variables based on existing ones.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/data-structures/creating-arrays-and-datasets.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nsc.zeros(dims=['x', 'y'], shape=[3, 4])\n\nsc.full(dims=['x', 'y'], shape=[3, 4], value=1.23)\n\nv = sc.array(dims=['x', 'y'], values=[[1, 2], [3, 4]], unit='m')\nsc.zeros_like(v)\n```\n\n----------------------------------------\n\nTITLE: Creating a DataArray\nDESCRIPTION: Creates a DataArray with random data, coordinates in meters, and a boolean mask.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/data-structures/data-structures.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nda = sc.DataArray(\n    data=sc.array(dims=['y', 'x'], values=np.random.rand(2, 3)),\n    coords={\n        'y': sc.array(dims=['y'], values=np.arange(2.0), unit='m'),\n        'x': sc.array(dims=['x'], values=np.arange(3.0), unit='m'),\n    },\n    masks={\n        'm': sc.array(dims=['x'], values=[False, True, False]),\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Coordinate Sharing\nDESCRIPTION: Shows how coordinate sharing works when creating multiple references to the same data.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/data-structures/data-structures.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nx2 = sc.zeros(dims=['x'], shape=[3])\nda.coords['x2_shared'] = x2\nda.coords['x2_copied'] = x2.copy()\nx2 += 123\n```\n\n----------------------------------------\n\nTITLE: Creating a DataGroup with Mixed Data Types in Python\nDESCRIPTION: Demonstrates creation of a DataGroup object containing various data types including Scipp arrays, NumPy arrays, and strings. Shows the flexibility of DataGroup in storing different types of data without dimension compatibility requirements.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/data-structures/data-structures.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\n\nimport scipp as sc\n\ndg = sc.DataGroup(\n    a=sc.arange('x', 4),\n    b=sc.arange('x', 6),\n    c=sc.arange('y', 2),\n    d=np.ones((2, 3)),\n    e='a string',\n)\ndg\n```\n\n----------------------------------------\n\nTITLE: Importing Scipp library\nDESCRIPTION: Basic import of the Scipp library using the recommended alias 'sc'.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/quick-start.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport scipp as sc\n```\n\n----------------------------------------\n\nTITLE: Extracting Events Matching a Parameter Value in Scipp\nDESCRIPTION: Demonstrates how to extract events matching a specific parameter value using label-based indexing on the bins property. The output preserves the dimensions of the input data array and returns a copy of the filtered events.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/binned-data/filtering.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nparam_value = sc.scalar(1.2, unit='m')\nfiltered = da.bins['param', param_value]\n```\n\n----------------------------------------\n\nTITLE: Creating a new conda environment with Scipp\nDESCRIPTION: This command creates a new conda environment named 'env_with_scipp' and installs Scipp from the conda-forge and scipp channels.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/installation.rst#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nconda create -n env_with_scipp -c conda-forge -c scipp scipp\n```\n\n----------------------------------------\n\nTITLE: Creating a Scipp DataArray with coordinates\nDESCRIPTION: Combines variables into a DataArray with coordinates and displays the result using sc.show and the HTML representation.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/quick-start.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\narray = sc.DataArray(data=var, coords={'x': x, 'y': y})\nsc.show(array)\narray\n```\n\n----------------------------------------\n\nTITLE: Creating Scipp Variable with Explicit DType (Scipp DType)\nDESCRIPTION: Creates a Scipp Variable with zeros and explicitly specifies the dtype using Scipp's DType enum.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/dtype.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nvar = sc.zeros(dims=['x'], shape=[2], dtype=sc.DType.float32)\nvar.dtype\n```\n\n----------------------------------------\n\nTITLE: Loading Tabular Data from CSV with Scipp\nDESCRIPTION: Loads tabular data from a CSV file using Scipp's IO functionality. The file contains simulation data from a neutron-scattering experiment, and the 'bracket' header parser is used to extract physical units from column headers.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/tutorials/from-tabular-data-to-binned-data.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfilename = 'https://public.esss.dk/groups/scipp/scipp/1/data_dream_diamond.zip'\nds = sc.io.load_csv(\n    filename,\n    sep='\\t',\n    header_parser='bracket',\n)\nds\n```\n\n----------------------------------------\n\nTITLE: Saving Scipp DataArray to HDF5 File\nDESCRIPTION: Creates a Scipp DataArray with random values and saves it to an HDF5 file. The example demonstrates creation of a Variable as a coordinate and another Variable as data for the DataArray.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/reading-and-writing-files.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport scipp as sc\n\nx = sc.Variable(dims=['x'], values=np.arange(10))\nvar = sc.Variable(dims=['x', 'y'], values=np.random.rand(9, 3))\na = sc.DataArray(data=var, coords={'x': x})\n\na.save_hdf5(filename='test.hdf5')\n```\n\n----------------------------------------\n\nTITLE: Creating Scipp variables with dimensions and units\nDESCRIPTION: Creates two linear-spaced variables with specified dimensions and units. 'x' is created using arange while 'y' is created using linspace.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/quick-start.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nx = sc.arange('x', 5, unit='m')\ny = sc.linspace('y', 0.0, 1.0, num=4, unit='m')\n```\n\n----------------------------------------\n\nTITLE: Initializing Scipp array from NumPy data\nDESCRIPTION: Creates a Scipp array from random NumPy data with specified dimensions and displays it using the sc.show function.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/quick-start.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\n\nrng = np.random.default_rng(12345)\nvar = sc.array(dims=['y', 'x'], values=rng.random((4, 5)))\nsc.show(var)\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Operations in Scipp\nDESCRIPTION: Shows how Scipp handles broadcasting of arrays with missing dimensions and demonstrates operations with different dimensional shapes.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/computation.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nvar_xy = sc.array(dims=['x', 'y'], values=np.arange(6).reshape((2, 3)))\nprint(var_xy.values)\n```\n\nLANGUAGE: python\nCODE:\n```\nvar_y = sc.array(dims=['y'], values=np.arange(3))\nprint(var_y.values)\n```\n\nLANGUAGE: python\nCODE:\n```\nvar_xy -= var_y\nprint(var_xy.values)\n```\n\n----------------------------------------\n\nTITLE: Boolean Variable Indexing\nDESCRIPTION: Shows how to use boolean variables for indexing, including examples with both 1D and 2D variables.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/slicing.ipynb#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nvar = sc.arange('dummy', 12).fold(dim='dummy', sizes={'x': 6, 'y': 2})\ncondition = sc.array(dims=['x'], values=[True, False, False, True, False, False])\nvar[condition]\n```\n\n----------------------------------------\n\nTITLE: Creating Scipp Variable with Variances\nDESCRIPTION: Shows how to create a Scipp Variable with both values and variances. The example uses scipp.array function with both values and variances arguments.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/data-structures/creating-arrays-and-datasets.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsc.array(\n    dims=['x', 'y'], values=[[1.0, 2.0], [3.0, 4.0]], variances=[[0.1, 0.2], [0.3, 0.4]]\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Scipp Variable with NumPy Array (Integer)\nDESCRIPTION: Shows creation of a Scipp Variable using a NumPy array of integers. The dtype is automatically derived from the NumPy array.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/dtype.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nvar = sc.Variable(dims=['x'], values=np.arange(4))\nvar.dtype\n```\n\n----------------------------------------\n\nTITLE: Creating a Scalar Variable\nDESCRIPTION: Demonstrates creation of a 0-dimensional Variable (scalar) with a single value and unit.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/data-structures/data-structures.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nscalar = sc.scalar(1.2, unit='s')\nprint(scalar.value)\nprint(scalar.variance)\n```\n\n----------------------------------------\n\nTITLE: Plotting Scipp data\nDESCRIPTION: Creates a plot of a variable from the Dataset using Scipp's plotting functionality.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/quick-start.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nsc.plot(dataset['a'])\n```\n\n----------------------------------------\n\nTITLE: Dimension Matching and Transposing in Scipp\nDESCRIPTION: Demonstrates how Scipp handles operations between arrays with different dimension layouts, showing correct alignment based on dimension labels.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/computation.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\n\nimport scipp as sc\n\nrng = np.random.default_rng(12345)\na = sc.array(\n    dims=['x', 'y'], values=rng.random((2, 4)), variances=rng.random((2, 4)), unit='m'\n)\nb = sc.array(\n    dims=['y', 'x'], values=rng.random((4, 2)), variances=rng.random((4, 2)), unit='s'\n)\na / b\n```\n\n----------------------------------------\n\nTITLE: Using Scipp's Custom Assertion Function in Python\nDESCRIPTION: Demonstrates how to use scipp.testing.assert_identical for comparing objects in tests, which provides more detailed error messages than standard assertions.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/testing.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nscipp.testing.assert_identical(a, b)\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Units in Python using Scipp\nDESCRIPTION: Demonstrates the basic creation of units using the scipp.Unit class by constructing a length unit.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/units.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport scipp as sc\n\nlength = sc.Unit('m')\nlength\n```\n\n----------------------------------------\n\nTITLE: Variable Construction with Units in Scipp\nDESCRIPTION: Demonstrates different ways to create variables with units using array constructors and unit specifications.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/units.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nsc.array(dims=['x'], values=[1, 2], unit='one')\n```\n\nLANGUAGE: python\nCODE:\n```\nsc.array(dims=['x'], values=[1, 2], unit='m')\n```\n\nLANGUAGE: python\nCODE:\n```\nsc.array(dims=['x'], values=[1, 2], unit=sc.units.m)\n```\n\nLANGUAGE: python\nCODE:\n```\nsc.arange('x', 0, 3, unit=sc.units.s)\n```\n\n----------------------------------------\n\nTITLE: Creating DateTime Variables in Scipp\nDESCRIPTION: Shows how to create Variables with datetime values using scipp.datetimes function. Demonstrates creation from ISO 8601 strings and Unix timestamps.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/data-structures/creating-arrays-and-datasets.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nsc.datetimes(dims=['time'], values=['2021-01-10T01:23:45', '2021-01-11T23:45:01'])\n\nsc.datetimes(dims=['time'], values=[0, 1610288175], unit='s')\n\nsc.arange(\n    'time',\n    '2022-08-04T14:00:00',\n    '2022-08-04T14:04:00',\n    step=30 * sc.Unit('s'),\n    dtype='datetime64',\n)\n\nsc.datetime('now', unit='ms')\n\nsc.epoch(unit='s')\n```\n\n----------------------------------------\n\nTITLE: Plotting a single entry from a Dataset\nDESCRIPTION: Example of plotting a single item from a Dataset using indexing and the .plot() method.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/plotting.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nds['temp2'].plot()\n```\n\n----------------------------------------\n\nTITLE: Creating Dataset in Scipp\nDESCRIPTION: Demonstrates creating a Dataset in Scipp by combining multiple DataArrays or Variables. Shows two methods: one using Variables and another using DataArrays.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/data-structures/creating-arrays-and-datasets.ipynb#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nsc.Dataset({'data1': data, 'data2': -data}, coords={'x': x})\n\nda1 = sc.DataArray(data, coords={'x': x}, masks={'m': m})\nda2 = sc.DataArray(-data, coords={'x': x})\nsc.Dataset({'data1': da1, 'data2': da2})\n```\n\n----------------------------------------\n\nTITLE: Creating Vectors with Scipp\nDESCRIPTION: Demonstrates creation of 1-D variable containing vectors using scipp.vectors function. Uses numpy for array creation and reshaping.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/linear-algebra.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport scipp as sc\nimport scipp.spatial\nimport numpy as np\nimport plopp as pp\n\nvecs = sc.vectors(dims=['x'], unit='m', values=np.arange(2 * 3).reshape(2, 3))\nvecs\n```\n\n----------------------------------------\n\nTITLE: Comparison-Based Mask Creation\nDESCRIPTION: Creates a mask using comparison operators on a random array with units.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/masking.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nvar = sc.array(dims=['x'], values=np.random.random(5), unit='m')\nmask2 = var < 0.5 * sc.Unit('m')\nmask2\n```\n\n----------------------------------------\n\nTITLE: Renaming Dimensions and Plotting with New Coordinate in Python\nDESCRIPTION: This snippet renames the 'x' dimension to 'x_square' and plots the DataArray using the new squared coordinate.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/coordinate-transformations.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nda2 = da2.rename_dims({'x': 'x_square'})\nda2.plot(figsize=(4, 3))\n```\n\n----------------------------------------\n\nTITLE: Plotting a single DataArray\nDESCRIPTION: Example of plotting a single DataArray using the .plot() method, which automatically uses coordinate and unit information for axis labels.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/plotting.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nda1.plot()\n```\n\n----------------------------------------\n\nTITLE: Plotting a 1D slice of 2D data\nDESCRIPTION: Example of plotting a 1D slice through 2D data by using indexing to reduce dimensionality before plotting.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/plotting.ipynb#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nda['time', 4].plot()\n```\n\n----------------------------------------\n\nTITLE: Creating Scipp Variable with Unit\nDESCRIPTION: Demonstrates creating a Scipp Variable with a specified unit. The example uses scipp.array function with the unit argument set to meters.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/data-structures/creating-arrays-and-datasets.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsc.array(dims=['x', 'y'], values=[[1, 2], [3, 4]], unit='m')\n```\n\n----------------------------------------\n\nTITLE: Creating Scalar Variables in Scipp\nDESCRIPTION: Demonstrates creating scalar (0-D) Variables in Scipp using scipp.scalar function and unit multiplication/division.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/data-structures/creating-arrays-and-datasets.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nsc.scalar(3.41)\n\nsc.scalar([3.41])\n\n4.2 * sc.Unit('m')\n\n4.2 / sc.Unit('m')\n```\n\n----------------------------------------\n\nTITLE: Range vs. Single Element Indexing in DataArrays\nDESCRIPTION: Compares the behavior of range indexing (which preserves dimensions) with single element indexing (which removes dimensions) in a DataArray context.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/slicing.ipynb#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nsc.show(a['y', 1:2])  # Range of length 1\na['y', 1:2]\n```\n\n----------------------------------------\n\nTITLE: Plotting a 2D DataArray\nDESCRIPTION: Example of plotting a 2D DataArray directly using the .plot() method, which creates a 2D color plot.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/plotting.ipynb#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nda.plot()\n```\n\n----------------------------------------\n\nTITLE: Concatenation Operations\nDESCRIPTION: Demonstrates various concatenation operations and their effects on coordinates.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/development/internals/concepts.ipynb#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nedges = sc.Variable(dims=['x'], values=[1, 2, 3, 4, 5])\nda.coords['x'] = edges\nassert sc.identical(sc.concat([da['x', :2], da['x', 2:]], 'x'), da)\nassert sc.identical(sc.concat([da['x', 0], da['x', 1]], 'x'), da['x', 0:2])\nassert sc.identical(sc.concat([da['x', :-1], da['x', -1]], 'x'), da)\nda_yx = sc.concat([da['x', :2], da['x', 2:]], 'y')  # create 2-D coord\nassert sc.identical(\n    da_yx.coords['x'],\n    sc.concat([da.coords['x']['x', :3], da.coords['x']['x', 2:]], 'y'),\n)\n```\n\n----------------------------------------\n\nTITLE: Comparing Histogram, Groupby, and Binning Methods in Scipp\nDESCRIPTION: Demonstrates three different approaches to analyze data: histogramming, grouping, and binning. Creates linear space bins and applies each method to get intensity as a function of x.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/binned-data/histogramming-grouping-and-binning.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nxbins = sc.linspace('x', 0, 1, num=40, unit='m')\nds = sc.Dataset(\n    {\n        'histogram': table.hist(x=xbins),\n        'groupby': table.groupby('x', bins=xbins).sum('position'),\n        'bin': table.bin(x=xbins).bins.sum(),\n    }\n)\nds.plot()\n```\n\n----------------------------------------\n\nTITLE: DataArray with Masks\nDESCRIPTION: Creates a DataArray with coordinates and masks, demonstrating mask storage and access.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/masking.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\na = sc.DataArray(\n    data=sc.array(dims=['y', 'x'], values=np.arange(1.0, 7.0).reshape((2, 3))),\n    coords={'y': sc.arange('y', 2.0, unit='m'), 'x': sc.arange('x', 3.0, unit='m')},\n    masks={'x': sc.array(dims=['x'], values=[False, False, True])},\n)\nsc.show(a)\n```\n\n----------------------------------------\n\nTITLE: Plotting with logarithmic x-axis\nDESCRIPTION: Example of plotting 1D data with a logarithmic scale on the x-axis using the scale option.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/plotting.ipynb#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nda1.plot(scale={'x': 'log'})\n```\n\n----------------------------------------\n\nTITLE: Adding uncertainties to a Scipp DataArray\nDESCRIPTION: Adds variance data (uncertainties) to an existing DataArray using random values and displays the result. Creates a copy first to avoid modifying the original due to Scipp's ownership mechanism.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/quick-start.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\narray = array.copy()  # For more explanations why we `copy` see https://scipp.github.io/reference/ownership-mechanism-and-readonly-flags.html\narray.variances = np.square(rng.random((4, 5)))\nsc.show(array)\n```\n\n----------------------------------------\n\nTITLE: Slicing and Displaying 5D Data in Scipp\nDESCRIPTION: Shows how to slice and transpose multi-dimensional data for visualization purposes. Demonstrates handling of complex data structures with multiple dimensions.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/tutorials/from-tabular-data-to-binned-data.ipynb#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nsc.show(\n    binned_logical['strip', 0]['counter', 0]['segment', 0]['module', :5].transpose()\n)\n```\n\n----------------------------------------\n\nTITLE: Slicing Binned Data and Plotting a Subset\nDESCRIPTION: Demonstrates slicing binned data to select only data points within a specific x coordinate bin, then histograms and plots the resulting subset.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/binned-data/binned-data.ipynb#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nbinned['x', 0].hist(y=10).plot()\n```\n\n----------------------------------------\n\nTITLE: Creating a Scipp Dataset with multiple variables\nDESCRIPTION: Creates a Dataset containing multiple data variables and coordinates, then displays it using sc.show.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/quick-start.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndataset = sc.Dataset(data={'a': var}, coords={'x': x, 'y': y, 'aux': x})\ndataset['b'] = array\nsc.show(dataset)\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Coordinate Transformation Functions in Python\nDESCRIPTION: This snippet defines three functions for a multi-step coordinate transformation involving latitude, longitude, and datetime conversions.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/coordinate-transformations.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef lat_long(location):\n    x = location.fields.x\n    y = location.fields.y\n    z = location.fields.z\n    theta = sc.to_unit(sc.atan2(y=sc.sqrt(x * x + y * y), x=z), 'deg', copy=False)\n    phi = sc.to_unit(sc.atan2(y=y, x=x), 'deg', copy=False)\n    return {'latitude': 90.0 * sc.Unit('deg') - theta, 'longitude': phi}\n\n\ndef local_datetime(datetime, longitude):\n    long = sc.to_unit(longitude, unit='deg', copy=False)\n    angular_velocity = (360.0 * sc.Unit('deg')) / (24.0 * sc.Unit('hour'))\n    offset = (long / angular_velocity).astype('int64') + 12 * sc.Unit('hour')\n    return sc.to_unit(offset, datetime.unit) + datetime\n\n\ndef time(local_datetime):\n    seconds_per_day = sc.scalar(24 * 60 * 60, unit='s')\n    start_day = sc.scalar(start.value.astype('datetime64[D]'))\n    start_day_in_seconds = sc.scalar(start_day.values.astype('datetime64[s]'))\n    offset = local_datetime - start_day_in_seconds\n    time = (offset % seconds_per_day).astype('float64')\n    return time\n```\n\n----------------------------------------\n\nTITLE: Creating a Wavelength Histogram from Event Data\nDESCRIPTION: Demonstrates histogramming the event data by wavelength. This creates a histogram with 1000 equally sized bins covering the full wavelength range, where each bin contains the sum of all events falling into that bin.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/tutorials/from-tabular-data-to-binned-data.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nhistogrammed = table.hist(wavelength=1000)\nhistogrammed\n```\n\n----------------------------------------\n\nTITLE: Loading and Saving Scipp Objects from/to HDF5\nDESCRIPTION: Demonstrates how to save and load Scipp objects using the custom HDF5-based file format. The example uses a BytesIO object for demonstration, but the same code can be used with file names.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/data-structures/creating-arrays-and-datasets.ipynb#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom io import BytesIO\n\nbuffer = BytesIO()\nv = sc.arange('x', start=1.0, stop=5.0, step=1.0, unit='s')\nv.save_hdf5(buffer)\nsc.io.load_hdf5(buffer)\n```\n\n----------------------------------------\n\nTITLE: Arithmetic operations with Scipp data\nDESCRIPTION: Demonstrates arithmetic operations combined with slicing on Dataset entries, including unit handling and propagation of values.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/quick-start.ipynb#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndataset['a']['y', 0:2] -= dataset['y', 0:2]['a']['x', 0]\ndataset['b'] *= 1.23 * sc.Unit('m/s')\nprint(dataset)\n```\n\n----------------------------------------\n\nTITLE: Histogramming Binned Data with Default Bins\nDESCRIPTION: Converts the binned data into a histogram by summing the values within each bin, then plots the resulting 2D histogram using the original bin structure.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/binned-data/binned-data.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nbinned.hist().plot()\n```\n\n----------------------------------------\n\nTITLE: Installing Scipp using a conda environment file\nDESCRIPTION: This snippet demonstrates how to create and activate a conda environment using the provided scipp.yml file. It includes activating the base environment, creating the new environment, activating it, and launching Jupyter Lab.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/installation.rst#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nconda activate\nconda env create -f scipp.yml\nconda activate scipp\njupyter lab\n```\n\n----------------------------------------\n\nTITLE: Positional Range Indexing in Scipp\nDESCRIPTION: Shows how to slice a variable with a range of positions, which preserves the dimension even when the range has length 1. Examples include both multi-element and single-element ranges.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/slicing.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ns = var['x', 1:3]\nsc.show(s)\nprint(s.dims, s.shape)\n\ns = var['x', 1:2]\nsc.show(s)\nprint(s.dims, s.shape)\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Column Event Table\nDESCRIPTION: Creates a more complex event table with multiple columns including time stamps and weights.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/binned-data/computation.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ntimes = sc.array(\n    dims=['event'],\n    unit='us',  # micro second\n    values=[0, 1, 3, 1, 1, 1, 4, 1, 1, 2, 1, 1],\n    dtype='float64',\n)\nweights = sc.ones(dims=['event'], unit='counts', shape=[12], with_variances=True)\n\ntable = sc.DataArray(data=weights, coords={'time': times})\nsc.table(table)\ntable\n```\n\n----------------------------------------\n\nTITLE: NumPy Integration Examples\nDESCRIPTION: Demonstrates how to use NumPy functions with Scipp variables.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/tips-tricks-and-anti-patterns.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nvar = sc.arange('x', 10.0)\nvar.values = np.roll(var.values, 2)\nvar\n\nnp.exp(var.values, out=var.values)\nvar\n```\n\n----------------------------------------\n\nTITLE: Alternative Grouping Method Using Variable Object\nDESCRIPTION: Demonstrates an alternative approach to grouping using the parameter variable directly instead of its name.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/groupby.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ngrouped = sc.groupby(data, group=param, bins=bins).mean(\n    'x'\n)  # note the lack of quotes around param!\nsc.plot(grouped)\n```\n\n----------------------------------------\n\nTITLE: Creating Range-Like Variables in Scipp\nDESCRIPTION: Shows how to create 1D range-like Variables using scipp.linspace and scipp.arange functions. These create arrays with regularly spaced values.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/data-structures/creating-arrays-and-datasets.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nsc.linspace('x', start=-2, stop=5, num=6, unit='s')\n\nsc.arange('x', start=-2, stop=5, step=1.2, unit='K')\n```\n\n----------------------------------------\n\nTITLE: Creating 3D Image Data\nDESCRIPTION: Shows how to create a 3D data array representing 2D image sensor data over time.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/tips-tricks-and-anti-patterns.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nnx = 10\nny = npix // nx\ndata = sc.zeros(dims=['y', 'x', 'time'], shape=[ny, nx, ntime])\ndata\n```\n\n----------------------------------------\n\nTITLE: Comparing Histogrammed and Binned Data\nDESCRIPTION: Compares the result of direct histogramming with summing the contents of binned data. Since the same bin edges are used, the results are identical, demonstrated by plotting both results together.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/tutorials/from-tabular-data-to-binned-data.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nbin_sums = binned.hist()  # same as binned.bins.sum()\nsc.plot({'histogrammed': histogrammed, 'binned': bin_sums})\n```\n\n----------------------------------------\n\nTITLE: Using Predefined Units in Scipp\nDESCRIPTION: Demonstrates usage of predefined units from scipp.units module.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/units.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsc.units.kg\n```\n\nLANGUAGE: python\nCODE:\n```\nsc.units.m / sc.units.s\n```\n\nLANGUAGE: python\nCODE:\n```\nsc.units.dimensionless\n```\n\n----------------------------------------\n\nTITLE: Slicing Scipp data structures\nDESCRIPTION: Demonstrates how to slice a Dataset using dimension labels and indices, showing the result with sc.show.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/quick-start.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nsliced = dataset['b']['x', 2]\nsc.show(sliced)\nsliced\n```\n\n----------------------------------------\n\nTITLE: Comparing Event Counts in Different Slices\nDESCRIPTION: Demonstrates how slicing preserves event counts in binned data, showing that the sum of events in individual slices equals the total event count.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/binned-data/binned-data.ipynb#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ns0 = binned['x', 0]\ns1 = binned['x', 1]\nprint(f'total events: {binned.sum().value}')\nprint(f'events x=0:   {s0.sum().value}')\nprint(f'events x=1:   {s1.sum().value}')\n```\n\n----------------------------------------\n\nTITLE: Composite Unit Creation in Scipp\nDESCRIPTION: Shows creation of composite units directly from strings with various unit combinations.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/units.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsc.Unit('km')\n```\n\nLANGUAGE: python\nCODE:\n```\nsc.Unit('m/s')\n```\n\nLANGUAGE: python\nCODE:\n```\nsc.Unit('counts')\n```\n\nLANGUAGE: python\nCODE:\n```\nsc.Unit('kg*m^2/s^2')\n```\n\n----------------------------------------\n\nTITLE: Creating 1D DataArrays for plotting examples\nDESCRIPTION: Python code to create two 1D DataArrays with random data and coordinates, which will be used in subsequent plotting examples.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/plotting.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\n\nimport scipp as sc\n\nsize = 50\nrng = np.random.default_rng(seed=0)\nx = sc.linspace('x', 0.0, 2.0, num=size, unit='m')\ny = sc.linspace('y', 0.0, 1.0, num=5, unit='us')\ntemp1 = sc.array(dims=['x'], values=rng.random(size), unit='K')\ntemp1 += sc.linspace('x', 100, 105, num=size, unit='K')\nda1 = sc.DataArray(temp1, coords={'x': x})\nda1.name = 'temp1'  # Data array name is optional and will be used as a label\ntemp2 = sc.array(dims=['x'], values=rng.random(size), unit='K')\ntemp2.variances = temp2.values + 1\ntemp2 += sc.linspace('x', 99, 102, num=size, unit='K')\nda2 = sc.DataArray(temp2, coords={'x': x})\n```\n\n----------------------------------------\n\nTITLE: Calculating Surface Normal Vector\nDESCRIPTION: Computes the surface normal vector for the sensor using cross product of vectors and normalizes it.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/linear-algebra.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\na = sensor.coords['position']['x', 0]['y', 0]\nb = sensor.coords['position']['x', -1]['y', 0]\nc = sensor.coords['position']['x', 0]['y', -1]\nnorm = sc.cross(c - a, c - b)\nnorm /= sc.norm(norm)\nnorm\n```\n\n----------------------------------------\n\nTITLE: Creating DataArray for Continuous Parameters\nDESCRIPTION: Creates a DataArray structure with coordinates for the continuous parameter example.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/groupby.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndata = sc.DataArray(\n    values,\n    coords={\n        'x': sc.Variable(dims=['x'], values=np.arange(16)),\n        'y': sc.Variable(dims=['y'], values=np.arange(16)),\n    },\n)\nsc.plot(data)\n```\n\n----------------------------------------\n\nTITLE: Binning Scattered Data with Scipp\nDESCRIPTION: Uses scipp.bin to organize the scattered data into a 2D grid of bins based on x and y coordinates, creating a binned data structure that preserves the original values.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/binned-data/binned-data.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nbinned = table.bin(y=4, x=2)\nbinned\n```\n\n----------------------------------------\n\nTITLE: Creating Scipp Datetime Variable Array (String Input)\nDESCRIPTION: Demonstrates creation of a Scipp Variable containing multiple datetime values from string inputs.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/dtype.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nsc.datetimes(dims=['t'], values=['2022-01-10T14:31:21', '2022-01-11T11:09:05'])\n```\n\n----------------------------------------\n\nTITLE: Creating Scipp Variable with Specified Data Type\nDESCRIPTION: Illustrates how to create a Scipp Variable with a specified data type. The example uses scipp.array function with the dtype argument set to 'float64'.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/data-structures/creating-arrays-and-datasets.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsc.array(dims=['x', 'y'], values=[[1, 2], [3, 4]], dtype='float64')\n```\n\n----------------------------------------\n\nTITLE: Displaying Dataset content\nDESCRIPTION: Prints the string representation of the Dataset to show its structure and contents.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/quick-start.ipynb#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nprint(dataset)\n```\n\n----------------------------------------\n\nTITLE: Detector Efficiency Correction with Scipp\nDESCRIPTION: Normalizes spatial data by detector efficiency by binning into correct coordinate bins and performing division.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/tutorials/solar_flares.ipynb#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ncoarse_spatial = spatial.bin(x=efficiency.coords['x'], y=efficiency.coords['y'])\ncorrected = coarse_spatial / efficiency\n```\n\n----------------------------------------\n\nTITLE: Integer Array Indexing Example\nDESCRIPTION: Demonstrates integer array indexing by creating a 2D variable and selecting specific elements using integer arrays.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/slicing.ipynb#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nvar = sc.arange('dummy', 12).fold(dim='dummy', sizes={'x': 6, 'y': 2})\nvar['x', [1, 2, 5]]\n```\n\n----------------------------------------\n\nTITLE: Creating a DataArray with Coordinates and Masks in Scipp\nDESCRIPTION: Demonstrates the construction of a DataArray with 2D data and 1D coordinates and masks, which is used to illustrate indexing behavior specific to DataArrays.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/slicing.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\na = sc.DataArray(\n    data=sc.array(dims=['y', 'x'], values=np.random.rand(2, 3)),\n    coords={\n        'x': sc.array(dims=['x'], values=np.arange(3.0), unit='m'),\n        'y': sc.array(dims=['y'], values=np.arange(2.0), unit='m'),\n    },\n    masks={'mask': sc.array(dims=['x'], values=[True, False, False])},\n)\nsc.show(a)\na\n```\n\n----------------------------------------\n\nTITLE: Applying Rotation Matrix to Positions\nDESCRIPTION: Creates and applies a 30-degree rotation matrix around the y-axis to sensor positions, demonstrating rotation transformation.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/linear-algebra.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nrotation = sc.spatial.linear_transform(\n    value=[\n        [0.8660254, 0.0000000, 0.5000000],\n        [0.0000000, 1.0000000, 0.0000000],\n        [-0.5000000, 0.0000000, 0.8660254],\n    ]\n)\n\nsensor.coords['position']['x', 5:] = rotation * sensor.coords['position']['x', 5:]\npp.scatter3d(sensor, pos=\"position\", pixel_size=0.01, cbar=True)\n```\n\n----------------------------------------\n\nTITLE: Unit Conversion in Scipp\nDESCRIPTION: Demonstrates conversion between compatible units of different scales.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/units.ipynb#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nsc.to_unit(1.0 * sc.units.m, 'mm')\n```\n\nLANGUAGE: python\nCODE:\n```\nsc.to_unit(1.0 * sc.Unit('parsec'), 'm')\n```\n\nLANGUAGE: python\nCODE:\n```\nsc.to_unit(3.14 * sc.Unit('m/s'), 'km/h')\n```\n\nLANGUAGE: python\nCODE:\n```\nsc.to_unit(1.0 * sc.Unit('s'), 'm')\n```\n\n----------------------------------------\n\nTITLE: Splitting Data Based on Discrete Event Parameters in Scipp\nDESCRIPTION: Demonstrates using scipp.group to split data based on a discrete event parameter. This creates a new dimension 'param' in the output data array containing a copy of the reordered events.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/binned-data/filtering.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsplit = da.group('param')\n```\n\n----------------------------------------\n\nTITLE: Creating a Variable\nDESCRIPTION: Creates a 2D Variable with random values, dimensions labeled 'x' and 'y', and unit 's' (seconds).\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/data-structures/data-structures.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nvar = sc.array(dims=['x', 'y'], values=np.random.rand(2, 4), unit='s')\n```\n\n----------------------------------------\n\nTITLE: Positional Indexing for a Single Element in Scipp\nDESCRIPTION: Demonstrates indexing a variable with a single position along the 'x' dimension. This removes the dimension from the result since no range is specified.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/slicing.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ns = var['x', 1]\nsc.show(s)\nprint(s.dims, s.shape)\n```\n\n----------------------------------------\n\nTITLE: Chaining Positional Indexing Operations in Scipp\nDESCRIPTION: Demonstrates how slicing operations can be chained in arbitrary order, with each operation modifying the view of the data.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/slicing.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ns = var['x', 1:4]['y', 2]['x', 1]\nsc.show(s)\nprint(s.dims, s.shape)\n```\n\n----------------------------------------\n\nTITLE: Dataset Operations with Coordinate Matching\nDESCRIPTION: Illustrates how Scipp handles operations between datasets, including coordinate matching and name-based pairing of data items.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/computation.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nd1 = sc.Dataset(\n    data={\n        'a': sc.array(dims=['x', 'y'], values=rng.random((2, 3))),\n        'b': sc.array(dims=['y', 'x'], values=rng.random((3, 2))),\n        'c': sc.array(dims=['x', 'y'], values=rng.random((2, 3))),\n    },\n    coords={'x': sc.arange('x', 2.0, unit='m'), 'y': sc.arange('y', 3.0, unit='m')},\n)\nd2 = sc.Dataset(\n    data={\n        'a': sc.array(dims=['x', 'y'], values=rng.random((2, 3))),\n        'b': sc.array(dims=['y', 'x'], values=rng.random((3, 2))),\n    },\n    coords={'x': sc.arange('x', 2.0, unit='m'), 'y': sc.arange('y', 3.0, unit='m')},\n)\n```\n\n----------------------------------------\n\nTITLE: Converting Pandas DataFrame to Scipp Dataset\nDESCRIPTION: Converts a Pandas DataFrame to a Scipp dataset using sc.compat.from_pandas with bracket header parsing to extract units from column names.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/reading-and-writing-files.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nsc.compat.from_pandas(df, header_parser='bracket')\n```\n\n----------------------------------------\n\nTITLE: Plotting a Dataset\nDESCRIPTION: Example of creating a Dataset from multiple DataArrays and plotting it directly using the .plot() method.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/plotting.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nds = sc.Dataset({'temp1': da1, 'temp2': da2})\nds.plot()\n```\n\n----------------------------------------\n\nTITLE: Loading Scipp DataArray from HDF5 File\nDESCRIPTION: Loads a previously saved Scipp DataArray from an HDF5 file using the scipp.io.load_hdf5 function.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/reading-and-writing-files.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nb = sc.io.load_hdf5(filename='test.hdf5')\n```\n\n----------------------------------------\n\nTITLE: Creating Scipp Datetime Variable (Current Time)\nDESCRIPTION: Demonstrates a concise way to create a Scipp datetime Variable representing the current time.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/dtype.ipynb#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nsc.datetime('now')\n```\n\n----------------------------------------\n\nTITLE: Creating a Pulse Quality Interpolation Function in Scipp\nDESCRIPTION: Shows how to create an interpolation function using sc.lookup that identifies 'good' pulses as those with more than 90% of the mean proton charge, to be used for filtering events.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/binned-data/filtering.ipynb#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ngood_pulse = sc.lookup(proton_charge > 0.9 * proton_charge.mean(), mode='previous')\n```\n\n----------------------------------------\n\nTITLE: Boolean Mask Operations\nDESCRIPTION: Demonstrates various boolean operations on masks including NOT, XOR, AND, and OR operations.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/masking.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nprint(~mask)\nprint(mask ^ mask)\nprint(mask & ~mask)\nprint(mask | ~mask)\n```\n\n----------------------------------------\n\nTITLE: Trigonometric Operations with Units\nDESCRIPTION: Demonstrates trigonometric operations in Scipp with proper unit handling for angles in radians and degrees.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/computation.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nrad = 3.141593 * sc.units.rad\ndeg = 180.0 * sc.units.deg\nprint(sc.sin(rad))\nprint(sc.sin(deg))\ntry:\n    rad + deg\nexcept Exception as e:\n    print(str(e))\n```\n\n----------------------------------------\n\nTITLE: Commutative Property of Slicing and Item Access in Datasets\nDESCRIPTION: Verifies that slicing and item access operations in Datasets are commutative - they can be applied in any order with identical results.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/slicing.ipynb#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nassert sc.identical(d['x', 1:2]['a'], d['a']['x', 1:2])\nassert sc.identical(d['x', 1:2]['a'].coords['x'], d.coords['x']['x', 1:2])\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-dimensional Variable in Scipp\nDESCRIPTION: Creates a 3D random variable with dimensions 'z', 'y', and 'x', containing both values and variances. This demonstrates the basic structure creation pattern in Scipp.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/slicing.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport scipp as sc\n\nvar = sc.array(\n    dims=['z', 'y', 'x'],\n    values=np.random.rand(2, 3, 4),\n    variances=np.random.rand(2, 3, 4),\n)\nsc.show(var)\n```\n\n----------------------------------------\n\nTITLE: Unit Multiplication Operations in Scipp\nDESCRIPTION: Shows how to perform mathematical operations with units to create derived units like area and volume.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/units.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\narea = length * length\narea\n```\n\nLANGUAGE: python\nCODE:\n```\nvolume = length * length * length\nvolume\n```\n\nLANGUAGE: python\nCODE:\n```\nalso_volume = length**3\nalso_volume\n```\n\nLANGUAGE: python\nCODE:\n```\nsc.Unit('dimensionless') / length\n```\n\nLANGUAGE: python\nCODE:\n```\nspeed = length / sc.Unit('s')\nspeed\n```\n\n----------------------------------------\n\nTITLE: Single Element Indexing in DataArrays\nDESCRIPTION: Shows how single element indexing without a range removes the dimension from the resulting DataArray.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/slicing.ipynb#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nsc.show(a['y', 1])  # No range\na['y', 1]\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Scipp Variable\nDESCRIPTION: Demonstrates creation of a nested Scipp Variable, where a scalar Variable contains another Variable.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/dtype.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nvar = sc.scalar(sc.zeros(dims=['x'], shape=[2], dtype='float64'))\nvar\n```\n\n----------------------------------------\n\nTITLE: Plotting multiple DataArrays\nDESCRIPTION: Example of plotting multiple DataArrays by passing a dictionary to the sc.plot() function, demonstrating how error bars are automatically included for data with uncertainties.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/plotting.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nsc.plot({'temp1': da1, 'temp2': da2})\n```\n\n----------------------------------------\n\nTITLE: Custom Bin Edges with Scipp.linspace\nDESCRIPTION: Demonstrates creating custom bin edges using sc.linspace instead of relying on automatic binning. This example selects a Z-slice and rebins it with higher resolution in the X-Y plane using custom bin edges.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/tutorials/from-tabular-data-to-binned-data.ipynb#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nx_edges = sc.linspace('x_pos', 400, 1500, num=41, unit='mm')\nz_slice = binned_xyz['z_pos', sc.scalar(0.0, unit='mm')]\nxy_cut = z_slice.bin(y_pos=100, x_pos=x_edges)\nxy_cut\n```\n\n----------------------------------------\n\nTITLE: Creating Scipp Datetime Variable (String Input)\nDESCRIPTION: Shows how to create a Scipp datetime Variable using a string representation of a date and time.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/dtype.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nsc.datetime('2022-01-10T14:31:21')\n```\n\n----------------------------------------\n\nTITLE: Creating and Visualizing Complex Transformation Graph in Scipp\nDESCRIPTION: This code creates a complex transformation graph for latitude, longitude, and time conversions, and visualizes it using Scipp's show_graph function.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/coordinate-transformations.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ngraph = {\n    (\n        'longitude',\n        'latitude',\n    ): lat_long,\n    'local_time': time,\n    'local_datetime': local_datetime,\n}\nsc.show_graph(graph, size='6')\n```\n\n----------------------------------------\n\nTITLE: Creating a Variable with explicit dimensions, shape, unit, values, and variances in C++\nDESCRIPTION: This snippet demonstrates the full form of the makeVariable function with all possible arguments. It creates a 2D variable with X and Y dimensions, shape [1,3], unit in kg, values [1,2,3], and variances [4,5,6].\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/development/internals/constructing_variables.rst#2025-04-21_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nmakeVariable<float>(Dims{Dim::X, Dim::Y}, Shape{1, 3}, Unit{kg}, Values{1, 2, 3}, Variances{4, 5, 6});\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Scipp Environment\nDESCRIPTION: Basic imports of numpy and scipp libraries required for working with Scipp.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/tips-tricks-and-anti-patterns.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport scipp as sc\n```\n\n----------------------------------------\n\nTITLE: Double Binning Operation in Scipp\nDESCRIPTION: Shows how to perform sequential binning operations along different dimensions (x and y) while preserving data structure.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/binned-data/histogramming-grouping-and-binning.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nbinned = binned.bin(y=100)\nbinned\n```\n\n----------------------------------------\n\nTITLE: Range Indexing for One-Dimensional Objects in Scipp\nDESCRIPTION: Demonstrates slicing a 1D variable with a range without specifying a dimension label.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/slicing.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nvar1d[2:4]\n```\n\n----------------------------------------\n\nTITLE: Creating Scipp Datetime Variable (Scalar with Seconds)\nDESCRIPTION: Shows creation of a Scipp datetime Variable using a scalar value representing seconds since the epoch, with explicit unit and dtype.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/dtype.ipynb#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nvar = sc.scalar(value=681794055, unit=sc.units.s, dtype='datetime64')\nvar\n```\n\n----------------------------------------\n\nTITLE: Slicing a Specific Data Item in a Dataset\nDESCRIPTION: Shows how to first access a specific data variable from a Dataset and then apply dimensional slicing to just that variable.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/slicing.ipynb#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nsc.show(d['a']['x', 1:2])\n```\n\n----------------------------------------\n\nTITLE: Creating a Scalar Copy from a DataArray Slice\nDESCRIPTION: Shows how to extract and copy a single value from a DataArray using dimensional indexing.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/slicing.ipynb#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nval = a['x', 1]['y', 1].copy()\nval\n```\n\n----------------------------------------\n\nTITLE: Loading RHESSI Flare Data from HDF5 File\nDESCRIPTION: Loads the RHESSI solar flare dataset from an HDF5 file using Scipp's data loading utilities. The dataset includes flare list, non-solar indicators, and detector efficiency data.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/tutorials/solar_flares.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfilename = sc.data.rhessi_flares()\nflare_datagroup = sc.io.load_hdf5(filename)\nflare_datagroup\n```\n\n----------------------------------------\n\nTITLE: Multi-dimensional Spatial Binning in XYZ\nDESCRIPTION: Creates a 3D binning of event data by x, y, and z positions. The result is visualized using a slicer plot that shows a cross-section of the detector assembly, revealing its cylindrical structure.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/tutorials/from-tabular-data-to-binned-data.ipynb#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nbinned_xyz = table.bin(z_pos=31, y_pos=31, x_pos=31)  # 31**3 bins\npp.slicer(\n    binned_xyz['z_pos', 20:].hist(), keep=['x_pos', 'y_pos'], norm='log', aspect='equal'\n)\n```\n\n----------------------------------------\n\nTITLE: Efficient Slice Operation\nDESCRIPTION: Shows the efficient way to process consecutive images using slicing.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/tips-tricks-and-anti-patterns.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimages['image', :-1] -= images['image', 1:]\n```\n\n----------------------------------------\n\nTITLE: Handling Read-Only Flags in Scipp Broadcasts (Python)\nDESCRIPTION: Demonstrates how read-only flags protect against unintended modifications in broadcast variables.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/ownership-mechanism-and-readonly-flags.ipynb#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nvar = sc.broadcast(sc.scalar(1.0), dims=['x'], shape=[10])\ntry:\n    var += 7\nexcept sc.VariableError as e:\n    print(e)\n```\n\n----------------------------------------\n\nTITLE: Copying Variables in Scipp (Python)\nDESCRIPTION: Shows how to create a copy of a variable with sole ownership of the buffer using the copy() method. Also demonstrates creating a shallow copy.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/ownership-mechanism-and-readonly-flags.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nvar['x', 4:6].copy()\n```\n\nLANGUAGE: python\nCODE:\n```\nshallow_copy = var['x', 4:6].copy(deep=False)\nshallow_copy\n```\n\n----------------------------------------\n\nTITLE: Plotting Histogrammed Data with Applied Masks\nDESCRIPTION: Creates a histogram from the masked binned data, showing how the masks affect the resulting visualization with excluded regions and filtered data points.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/binned-data/binned-data.ipynb#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nbinned.hist().plot()\n```\n\n----------------------------------------\n\nTITLE: Binning Event Data by Wavelength\nDESCRIPTION: Demonstrates binning rather than histogramming the data. Binning preserves the original events and their metadata within each bin, unlike histogramming which only retains the sum of events per bin.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/tutorials/from-tabular-data-to-binned-data.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nbinned = table.bin(wavelength=1000)\nbinned\n```\n\n----------------------------------------\n\nTITLE: Creating Scipp Datetime Variable from NumPy Datetime\nDESCRIPTION: Shows how to create a Scipp datetime Variable using a NumPy datetime64 object representing the current time.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/dtype.ipynb#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nsc.scalar(value=np.datetime64('now'))\n```\n\n----------------------------------------\n\nTITLE: Converting Pandas DataFrame to Scipp Dataset in Python\nDESCRIPTION: This snippet demonstrates how to create a Pandas DataFrame and convert it to a Scipp dataset using scipp.compat.from_pandas. It creates a DataFrame with two columns: 'x' containing multiples of 10, and 'y' containing linearly spaced values.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/data-structures/creating-arrays-and-datasets.ipynb#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\n\ndf = pd.DataFrame({'x': 10 * np.arange(5), 'y': np.linspace(0.1, 0.5, 5)})\ndf\n```\n\nLANGUAGE: python\nCODE:\n```\nsc.compat.from_pandas(df)\n```\n\n----------------------------------------\n\nTITLE: Using scipp.show for SVG Representation in Python\nDESCRIPTION: Demonstrates the use of sc.show() to render Scipp objects as SVG images, showing relationships between coordinates and data.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/representations-and-tables.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nsc.show(ds)\n```\n\n----------------------------------------\n\nTITLE: Creating 2D Histogram from Binned Data in Scipp\nDESCRIPTION: Shows how to create a 2D histogram by first binning data along x-axis and then histogramming along y-axis.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/binned-data/histogramming-grouping-and-binning.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nbinned = table.bin(x=xbins)\nhist = binned.hist(y=30)\nhist.plot()\n```\n\n----------------------------------------\n\nTITLE: Converting Bin-Based Coordinate to Event-Based Coordinate\nDESCRIPTION: Demonstrates converting a bin-dimension coordinate (time) into an event-based coordinate, preparing binned data with a time dimension instead of the y dimension.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/binned-data/binned-data.ipynb#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nda = table.bin(y=4, x=2)\ndel da.coords['y']\ndel da.bins.coords['y']\nda = da.rename_dims({'y': 'time'})\nda.coords['time'] = sc.arange('time', 4, unit='s')\nda\n```\n\n----------------------------------------\n\nTITLE: Creating a Table of Scattered Data Points with Scipp\nDESCRIPTION: Creates a DataArray representing a table of measurements with random values and positions in the X-Y plane. Each measurement has coordinates for position, x, and y values with appropriate units.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/binned-data/binned-data.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nN = 50\nvalues = 10 * np.random.rand(N)\ntable = sc.DataArray(\n    data=sc.array(dims=['row'], unit=sc.units.counts, values=values, variances=values),\n    coords={\n        'position': sc.array(\n            dims=['row'], values=[f'site-{i}' for i in range(N)]\n        ),\n        'x': sc.array(dims=['row'], unit='m', values=np.random.rand(N)),\n        'y': sc.array(dims=['row'], unit='m', values=np.random.rand(N)),\n    },\n)\ntable\n```\n\n----------------------------------------\n\nTITLE: Shared Ownership in Scipp DataArrays (Python)\nDESCRIPTION: Illustrates the effects of shared ownership in DataArrays when using the same variable as both data and coordinate. Shows how modifications can unintentionally affect both.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/ownership-mechanism-and-readonly-flags.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nda = sc.DataArray(data=var, coords={'x': var})\nda += 666 * sc.units.m\nda\n```\n\n----------------------------------------\n\nTITLE: Strided Indexing in Scipp\nDESCRIPTION: Shows how to perform slicing with a stride (step) parameter, which selects every nth element in the range.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/slicing.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nvar['x', 1:4:2]\n```\n\n----------------------------------------\n\nTITLE: Creating a 2D DataArray for plotting\nDESCRIPTION: Python code to create a 2D DataArray with random data and coordinates, which will be used in subsequent 2D plotting examples.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/plotting.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nsize = 50\nrng = np.random.default_rng(seed=0)\nx = sc.linspace('x', 1.0, 3.0, num=size, unit='m')\ntime = sc.linspace('time', 1.0, 2.0, num=2 * size, unit='us')\ntemp = sc.array(dims=['x', 'time'], values=rng.random((size, 2 * size)), unit='K')\ntemp += sc.linspace('x', 100, 105, num=size, unit='K')\nda = sc.DataArray(temp, coords={'x': x, 'time': time})\nda.name = 'temperature'  # Data array name is optional and will be used as a label\n```\n\n----------------------------------------\n\nTITLE: Binning Transformed Data with Scipp\nDESCRIPTION: Creates time and latitude bins for flattened transformed data. Uses sc.linspace to generate edges for binning and sc.bin to perform the actual binning operation on flattened data.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/coordinate-transformations.ipynb#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ntime_edges = sc.linspace(dim='local_time', unit='s', start=0, stop=24 * 60 * 60, num=6)\nlatitude = sc.linspace(dim='latitude', unit='deg', start=-90, stop=90, num=13)\nbinned = sc.bin(transformed.flatten(to='dummy'), latitude=latitude, local_time=time_edges)\n```\n\n----------------------------------------\n\nTITLE: Adding Time Delta to Scipp Datetime Variable\nDESCRIPTION: Shows how to add a time delta (represented as a scalar with a time unit) to a Scipp datetime Variable.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/dtype.ipynb#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\na + sc.scalar(value=123, unit='ms')\n```\n\n----------------------------------------\n\nTITLE: Converting a View to an Independent Copy in Scipp\nDESCRIPTION: Shows how to use the copy() method to convert a view obtained from slicing into an independent object that can be modified without affecting the original data.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/slicing.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ns = var['x', 1:2].copy()\ns += 1000\nvar\n```\n\n----------------------------------------\n\nTITLE: Mapping Events to Bins\nDESCRIPTION: Demonstrates how to map events into bins using begin and end indices to create a binned variable.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/binned-data/computation.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nbegin = sc.array(dims=['x'], values=[0, 6, 6, 8], unit=None)\nend = sc.array(dims=['x'], values=[6, 6, 8, 12], unit=None)\nvar = sc.bins(begin=begin, end=end, dim='event', data=table)\nsc.show(var)\nvar\n```\n\n----------------------------------------\n\nTITLE: Applying Coordinate Transformation in Scipp\nDESCRIPTION: This code applies the defined coordinate transformation to a DataArray using Scipp's transform_coords method.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/coordinate-transformations.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ntransformed = da.transform_coords(['x^2'], graph=graph)\ntransformed\n```\n\n----------------------------------------\n\nTITLE: Scalar Unit Operations in Scipp\nDESCRIPTION: Shows how to create scalar values with units using multiplication and division operations.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/units.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n1.2 * sc.Unit('kg/m^3')\n```\n\nLANGUAGE: python\nCODE:\n```\n3.4 / sc.units.K\n```\n\n----------------------------------------\n\nTITLE: Displaying Table Data using Scipp's Table Function\nDESCRIPTION: Converts the DataArray to a table format for display, showing all rows with their values and coordinates.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/binned-data/binned-data.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsc.table(table)\n```\n\n----------------------------------------\n\nTITLE: Implementing Variable-level Operations Using Element-wise Operators in Scipp\nDESCRIPTION: Shows how to implement a variable-level operation in the scipp::variable namespace by wrapping a core element-wise operation with transform. Creates a clean interface for users while reusing the core implementation.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/development/internals/transform.rst#2025-04-21_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\n// In scipp/core/include/scipp/variable/my_op.h:\nnamespace scipp::variable {\nVariable my_op(const VariableConstView &a, const VariableConstView &b) {\n    return transform(a, b, core::element::my_op);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Applying Masks to Binned Data in Scipp\nDESCRIPTION: Demonstrates masking in binned data at two levels: creating an x-y region mask applied to the binned structure, and a 'broken sensor' mask applied to the underlying scattered data.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/binned-data/binned-data.ipynb#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nbinned = binned.bin(y=10, x=10)\nx_y_mask = (binned.coords['x'][1:] < 0.5 * sc.Unit('m')) & (\n    binned.coords['y'][1:] < 0.5 * sc.Unit('m')\n)\nbinned.masks['exclude'] = x_y_mask\nbinned.bins.masks['broken_sensor'] = binned.bins.coords['y'] > 0.6 * sc.Unit('m')\n```\n\n----------------------------------------\n\nTITLE: Adding a Squared Coordinate to a DataArray in Python\nDESCRIPTION: This code adds a new 'x_square' coordinate to a copy of the original DataArray, representing the square of the 'x' coordinate.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/coordinate-transformations.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nda2 = da.copy()\nda2.coords['x_square'] = x * x\nda2\n```\n\n----------------------------------------\n\nTITLE: Defining a Coordinate Transformation Function in Python\nDESCRIPTION: This code defines a simple function 'x_square' that computes the square of its input, to be used in coordinate transformation.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/coordinate-transformations.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef x_square(x):\n    return x * x\n```\n\n----------------------------------------\n\nTITLE: Creating a Scipp Dataset with Random Data in Python\nDESCRIPTION: Demonstrates how to create a Scipp Dataset with random data, including coordinates and multiple data arrays.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/representations-and-tables.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nx = sc.arange('x', 2.0)\ny = sc.arange('y', 4.0, unit='m')\nlabels = sc.arange('y', start=7.0, stop=10.0)\nds = sc.Dataset(\n    data={\n        'a': sc.array(\n            dims=['y', 'x'],\n            values=np.random.random((3, 2)),\n            variances=0.1 * np.random.random((3, 2)),\n            unit='angstrom',\n        )\n    },\n    coords={'x': x, 'y': y, 'y_label': labels},\n)\nds['b'] = ds['a']\n```\n\n----------------------------------------\n\nTITLE: Creating Rotation from Rotation Vector\nDESCRIPTION: Demonstrates creation of rotation transformation using rotation vectors, applying a -30 degree rotation around y-axis.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/linear-algebra.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom scipp.spatial import rotations_from_rotvecs\n\nrotation_back = rotations_from_rotvecs(\n    rotation_vectors=sc.vector(value=[0, -30.0, 0], unit=sc.units.deg)\n)\nsensor.coords['position']['x', 5:] = rotation_back * sensor.coords['position']['x', 5:]\npp.scatter3d(sensor, pos=\"position\", pixel_size=0.01, cbar=True)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Histogrammed Data Structure\nDESCRIPTION: Displays the internal structure of histogrammed data, which consists of an array of values and an array of wavelengths. This visualization helps understand the data representation.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/tutorials/from-tabular-data-to-binned-data.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nsc.show(histogrammed)\n```\n\n----------------------------------------\n\nTITLE: Handling Coordinate Modifications in Sliced DataArrays\nDESCRIPTION: Illustrates the rules that prevent unintentional modification of shared coordinates when working with sliced DataArrays.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/slicing.ipynb#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\na['x', 0:1].coords['x'] *= 2  # ok, modifies only coord value \"private\" to this x-slice\ntry:\n    # not ok, would modify coord value \"shared\" by all x-slices\n    a['x', 0:1].coords['y'] *= 2\nexcept sc.VariableError as e:\n    print(\n        f'\\'y\\' is shared with other \\'x\\'-slices and should not be modified by the slice, so we get an error:\\n{e}'\n    )\n```\n\n----------------------------------------\n\nTITLE: Plotting Binned Data in Scipp\nDESCRIPTION: Visualizes the binned data using a histogram plot. Demonstrates how to plot latitude and local time data using specific bin selections.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/coordinate-transformations.ipynb#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nbinned.hist(latitude=36, local_time=24).plot()\n```\n\n----------------------------------------\n\nTITLE: Applying Complex Coordinate Transformation in Scipp\nDESCRIPTION: This code applies the complex coordinate transformation to the sample DataArray using Scipp's transform_coords method.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/coordinate-transformations.ipynb#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ntransformed = da.transform_coords(['latitude', 'local_time'], graph=graph)\n```\n\n----------------------------------------\n\nTITLE: Grouping and Aggregating by Parameter Values\nDESCRIPTION: Groups the data by parameter values and calculates the mean for each group along the 'x' dimension.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/groupby.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ngrouped = sc.groupby(data, group='param').mean('x')\nsc.plot(grouped)\n```\n\n----------------------------------------\n\nTITLE: Comparing Strain Ranges with Coarse Binning\nDESCRIPTION: Creates coarse histograms for different strain ranges and plots them together for comparison. Uses logarithmic normalization for better visualization.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/binned-data/filtering.ipynb#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\ncoarse = normalized.hist(strain=6, dspacing=200)\nstrains = [coarse['strain', sc.scalar(x)] for x in [0.0, 0.3, 0.6]]\nlines = {f\"strain={strain.coords['strain'].values}\": strain for strain in strains}\nsc.plot(lines, norm='log')\n```\n\n----------------------------------------\n\nTITLE: Customizing Scipp Variable Generation with Hypothesis in Python\nDESCRIPTION: Demonstrates how to customize the variables strategy to generate specific types of variables, in this case, 2D variables with float dtypes.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/testing.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom hypothesis import given, strategies as st\nimport scipp.testing.strategies as scst\n\n@given(scst.variables(ndim=2,\n                      dtype=st.sampled_from(('float64', 'float32'))))\ndef test_mean_reduces_ndim(var):\n    assert var.mean(dim=var.dims[0]).ndim == 1\n```\n\n----------------------------------------\n\nTITLE: Subtracting Scipp Datetime Variables\nDESCRIPTION: Shows how to perform subtraction between two Scipp datetime Variables, resulting in a time difference.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/dtype.ipynb#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\na = sc.datetime('2021-03-14T00:00:00', unit='ms')\nb = sc.datetime('2000-01-01T00:00:00', unit='ms')\na - b\n```\n\n----------------------------------------\n\nTITLE: Extracting Data for Specific Strain Value\nDESCRIPTION: Demonstrates how to extract and visualize data for a specific strain value using positional indexing. Creates a histogram with custom d-spacing binning.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/binned-data/filtering.ipynb#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nnormalized['strain', 80].hist(dspacing=400).plot()\n```\n\n----------------------------------------\n\nTITLE: Creating 3D Scatter Plot with Sensor Data\nDESCRIPTION: Creates a simulated image sensor with 12x12 pixels and plots it as a 3D scatter plot using random data and position coordinates.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/linear-algebra.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nnx = 12\nny = 12\nx = sc.linspace(dim='x', start=-0.1, stop=0.1, num=nx, unit='m')\ny = sc.linspace(dim='y', start=-0.1, stop=0.1, num=ny, unit='m')\nsensor = sc.DataArray(\n    data=sc.array(dims=['x', 'y'], values=np.random.rand(nx, ny)),\n    coords={'position': sc.spatial.as_vectors(x, y, 0.0 * sc.units.m)},\n)\npp.scatter3d(sensor, pos=\"position\", pixel_size=0.01, cbar=True)\n```\n\n----------------------------------------\n\nTITLE: Grouping and Aggregating with Binned Parameters\nDESCRIPTION: Groups the data by binned parameter values and calculates the mean for each bin along the 'x' dimension.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/groupby.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndata.coords['param'] = param\ngrouped = sc.groupby(data, group='param', bins=bins).mean('x')\nsc.plot(grouped)\n```\n\n----------------------------------------\n\nTITLE: Creating and Displaying a Dataset in Scipp\nDESCRIPTION: Creates a Dataset with multiple data variables with different dimension orderings and shared coordinates, to demonstrate Dataset-specific indexing behavior.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/slicing.ipynb#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nd = sc.Dataset(\n    data={\n        'a': sc.array(dims=['y', 'x'], values=np.random.rand(2, 3)),\n        'b': sc.array(dims=['x', 'y'], values=np.random.rand(3, 2)),\n    },\n    coords={\n        'x': sc.array(dims=['x'], values=np.arange(3.0), unit='m'),\n        'y': sc.array(dims=['y'], values=np.arange(2.0), unit='m'),\n    },\n)\nsc.show(d)\n```\n\n----------------------------------------\n\nTITLE: Configuring StreamHandler for Scipp Logger in Python\nDESCRIPTION: This snippet demonstrates how to add a StreamHandler to the Scipp logger and set its level to INFO. It also sets the logger's overall level to INFO.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/logging.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport logging\n\nstream_handler = logging.StreamHandler()\nstream_handler.setLevel(logging.INFO)\nlogger.addHandler(stream_handler)\nlogger.setLevel(logging.INFO)\n```\n\n----------------------------------------\n\nTITLE: Slicing a Dataset by Dimension in Scipp\nDESCRIPTION: Demonstrates dimensional slicing of a Dataset, which applies the slice operation to all data variables that contain the specified dimension.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/slicing.ipynb#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nsc.show(d['y', 0])\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Groups for Subset Selection\nDESCRIPTION: Shows how to use explicit custom groups to extract a subset of the data. This example selects events from specific wire indices (1,2,3,4) and creates a histogram from this subset.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/tutorials/from-tabular-data-to-binned-data.ipynb#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nwire1234 = table.group(sc.array(dims=['wire'], values=[1, 2, 3, 4], unit=None))\nwire1234.hist().plot()\n```\n\n----------------------------------------\n\nTITLE: Splitting Data Based on Continuous Event Parameters in Scipp\nDESCRIPTION: Shows how to use scipp.bin to split data based on a continuous event parameter. The output has a new 'param' dimension and contains a copy of the reordered events.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/binned-data/filtering.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsplit = da.bin(param=10)\n```\n\n----------------------------------------\n\nTITLE: Temporal Distribution Analysis\nDESCRIPTION: Demonstrates two methods for analyzing temporal distribution: using concat and bin operations, and using make_binned for a more efficient approach.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/tutorials/solar_flares.ipynb#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\ntemporal = spatial.bins.concat('x').bins.concat('y').bin(peak_time=200)\ntemporal.hist().plot()\n\nfrom scipp.binning import make_binned\n\ntime = spatial.bins.coords['peak_time']\nmin_time = time.min().value\nmax_time = time.max().value\nstep = (max_time - min_time) / 200\ntime_edges = sc.arange('peak_time', min_time, max_time, step, unit=time.bins.unit)\ntemporal = make_binned(spatial, edges=[time_edges], erase=('x', 'y'))\ntemporal.hist().plot()\n```\n\n----------------------------------------\n\nTITLE: Extracting Events within a Time Interval in Scipp\nDESCRIPTION: Shows how to filter events based on a time interval by excluding data after the strain drops. Uses bins property indexing to extract events within the specified time range.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/binned-data/filtering.ipynb#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\n\nstart = strain.coords['time'][0]\nstop = strain.coords['time'][np.argmax(strain.values)]\nda = da.bins['time', start:stop]\n```\n\n----------------------------------------\n\nTITLE: Visualizing Binned Data Structure\nDESCRIPTION: Displays the internal structure of binned data, showing how it differs from histogrammed data by storing all contributing table rows in each bin. This helps understand the richer data model of binned data.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/tutorials/from-tabular-data-to-binned-data.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nsc.show(binned)\n```\n\n----------------------------------------\n\nTITLE: Computing Parameters from Time-Series Data in Scipp\nDESCRIPTION: Demonstrates using scipp.lookup with transform_coords to compute event parameters from time-series metadata. The example shows mapping temperature values to events based on timestamps.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/binned-data/filtering.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ntemperature = da.attrs['sample_temperature'].value  # temperature value time-series\ninterp_temperature = sc.lookup(temperature, mode='previous')\nfiltered = da.transform_coords(temperature=interp_temperature) \\\n             .bin(temperature=10)\n```\n\n----------------------------------------\n\nTITLE: Initializing Random Scattered Data Table in Scipp\nDESCRIPTION: Creates a sample dataset with random scattered measurements using Scipp's DataArray. Includes position coordinates (x,y) and values with exponential decay.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/binned-data/histogramming-grouping-and-binning.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport scipp as sc\n\nN = 5000\nvalues = 10 * np.random.rand(N)\ntable = sc.DataArray(\n    data=sc.array(\n        dims=['position'], unit=sc.units.counts, values=values, variances=values\n    ),\n    coords={\n        'x': sc.array(dims=['position'], unit='m', values=np.random.rand(N)),\n        'y': sc.array(dims=['position'], unit='m', values=np.random.rand(N)),\n    },\n)\ntable.values *= 1.0 / np.exp(5.0 * table.coords['x'].values)\nsc.table(table['position', :5])\n```\n\n----------------------------------------\n\nTITLE: Computing Derived Event Parameters in Scipp\nDESCRIPTION: Demonstrates using transform_coords to compute derived event parameters for subsequent extraction or splitting. The example shows creating a new parameter from two existing parameters.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/binned-data/filtering.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nda2 = da.transform_coords(derived_param=lambda p1, p2: p1 + p2)\n```\n\n----------------------------------------\n\nTITLE: Setting Scipp Logger Level in Python\nDESCRIPTION: This code sets the Scipp logger level to 'WARNING', which silences info messages.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/logging.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nlogger.setLevel('WARNING')\n```\n\n----------------------------------------\n\nTITLE: Label-based Indexing with Bin-edge Coordinates\nDESCRIPTION: Shows how to create and index a DataArray with bin-edge coordinates, which have length exceeding array dimensions by one.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/slicing.ipynb#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nda = sc.DataArray(\n    data=sc.array(dims=['x'], values=np.random.random(7)),\n    coords={'x': sc.array(dims=['x'], values=np.linspace(1.0, 2.0, num=8), unit='m')},\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Sample Data for Coordinate Transformation in Python\nDESCRIPTION: This snippet creates a sample DataArray with datetime and location coordinates, simulating lightning strike data around the globe.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/coordinate-transformations.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\n\nhour_steps = sc.arange(\n    dim='datetime',\n    dtype='int64',\n    unit='s',\n    start=0,\n    stop=3 * 24 * 60 * 60,\n    step=60 * 60,\n)\nstart = sc.scalar(np.datetime64('2021-06-01T17:00:00'))\ndatetime = start + hour_steps\nnsite = 1000\nntime = len(datetime)\nlocation = sc.vectors(dims=['location'], values=np.random.rand(nsite, 3)) - sc.vector(\n    value=[0.5, 0.5, 0.5]\n)\nlocation *= 6371 * sc.Unit('km') / sc.norm(location)\nda = sc.DataArray(\n    data=sc.array(dims=['location', 'datetime'], values=np.random.rand(nsite, ntime)),\n    coords={'location': location, 'datetime': datetime},\n)\nnorth = location.fields.z > 0.0 * sc.Unit('km')\nnorth.unit = sc.units.one\nda += 2.0 * (north).astype('float64')  # more lightning strikes in northern hemisphere\nphi0 = sc.atan2(y=location.fields.y, x=location.fields.x) - sc.to_unit(\n    90.0 * sc.Unit('deg'), 'rad'\n)\nsin = sc.sin(\n    phi0 + sc.linspace(dim='datetime', unit='rad', start=0, stop=6 * np.pi, num=ntime)\n)\nda += 2 * (sin + 1)  # more lightning strikes later in the day\nda.unit = 'counts'\n```\n\n----------------------------------------\n\nTITLE: Direct Extraction Using Computed Parameters in Scipp\nDESCRIPTION: Shows how to combine transform_coords with binning in a single operation, avoiding the need for an intermediate variable when computing and using derived parameters.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/binned-data/filtering.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfiltered = da.transform_coords(derived_param=lambda p1, p2: p1 + p2) \\\n             .bin(derived_param=10)\n```\n\n----------------------------------------\n\nTITLE: Computing Flare Duration (Advanced Method)\nDESCRIPTION: Uses coordinate transformation to calculate flare durations, which provides a more declarative approach.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/tutorials/solar_flares.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef compute_duration(start_time, end_time):\n    return end_time - start_time\n\n\nflares = flares.transform_coords('duration', {'duration': compute_duration})\n```\n\n----------------------------------------\n\nTITLE: Computing Proton Charge per Strain Value\nDESCRIPTION: Calculates integrated proton charge for strain values by binning data by time intervals and mapping to strain coordinates. Used for normalization of event data.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/binned-data/filtering.ipynb#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nproton_charge = dg['proton_charge']\ncharge_per_time_interval = proton_charge.bin(time=strain.coords['time'])\ncharge_per_time_interval.coords['strain'] = strain.data\ncharge_per_strain_value = charge_per_time_interval.bin(\n    strain=filtered.coords['strain']\n).hist()\n```\n\n----------------------------------------\n\nTITLE: Variables Without Units in Scipp\nDESCRIPTION: Demonstrates creation and handling of variables without units for special cases like strings and boolean values.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/units.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nsc.array(dims=['x'], values=[2, 4, 6], unit=None)\n```\n\nLANGUAGE: python\nCODE:\n```\nsc.array(dims=['x'], values=[False, True, False])\n```\n\nLANGUAGE: python\nCODE:\n```\nsc.scalar('a string')\n```\n\nLANGUAGE: python\nCODE:\n```\nsc.index(123)\n```\n\nLANGUAGE: python\nCODE:\n```\nsc.scalar(1, unit='one') * sc.scalar(2, unit=None)\n```\n\n----------------------------------------\n\nTITLE: Creating a DataArray with Coordinates\nDESCRIPTION: Constructs a DataArray from the values and adds coordinates for visualization.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/groupby.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndata = sc.DataArray(\n    values,\n    coords={\n        'x': sc.Variable(dims=['x'], values=np.arange(6)),\n        'y': sc.Variable(dims=['y'], values=np.arange(16)),\n    },\n)\nsc.plot(data)\n```\n\n----------------------------------------\n\nTITLE: Plotting Histogram Data in Scipp\nDESCRIPTION: Shows how to create and plot a histogram of the diffraction data, displaying the interplanar lattice spacing with two diffraction peaks.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/binned-data/filtering.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nda.hist().plot()\n```\n\n----------------------------------------\n\nTITLE: Loading Sample Data in Full Example\nDESCRIPTION: Shows how to load the sample neutron diffraction data for a stainless steel tensile bar from the VULCAN Engineering Materials Diffractometer dataset included in Scipp.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/binned-data/filtering.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport scipp as sc\n\ndg = sc.data.vulcan_steel_strain_data()\ndg\n```\n\n----------------------------------------\n\nTITLE: Plotting with logarithmic x and y axes\nDESCRIPTION: Example of plotting 2D data with logarithmic scales on both x and y axes using the scale option.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/plotting.ipynb#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nda.plot(scale={'x': 'log', 'time': 'log'})\n```\n\n----------------------------------------\n\nTITLE: Creating and Indexing DataArray with Coordinates\nDESCRIPTION: Creates a DataArray with year and x coordinates, demonstrating basic label-based indexing using coordinate values.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/slicing.ipynb#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nda = sc.DataArray(\n    data=sc.array(dims=['year', 'x'], values=np.random.random((3, 7))),\n    coords={\n        'x': sc.array(dims=['x'], values=np.linspace(0.1, 0.9, num=7), unit='m'),\n        'year': sc.array(dims=['year'], values=[2020, 2023, 2027]),\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Histogramming with Specified Bin Size\nDESCRIPTION: Shows an alternative way to create a histogram by specifying the bin size (0.02 Angstrom) rather than the number of bins. This allows for more precise control over the histogram resolution.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/tutorials/from-tabular-data-to-binned-data.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntable.hist(wavelength=sc.scalar(0.02, unit='Angstrom'))\n```\n\n----------------------------------------\n\nTITLE: Exercise 2 Solution: Cylindrical Coordinates Binning\nDESCRIPTION: Computes the radial distance from the z-axis, creates bin edges for the radius, and bins the data by z-position and radius. This demonstrates how to transform cartesian coordinates to cylindrical coordinates for more intuitive analysis of cylindrical detectors.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/tutorials/from-tabular-data-to-binned-data.ipynb#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nradius = sc.sqrt(table.coords['x_pos'] ** 2 + table.coords['y_pos'] ** 2)\ntable.coords['radius'] = radius\nradius_edges = sc.linspace(\n    'radius', radius.min(), radius.max() + sc.scalar(1, unit='mm'), num=13\n)\nbinned_zr = table.bin(z_pos=31, radius=radius_edges)\nbinned_zr.hist().plot()\n```\n\n----------------------------------------\n\nTITLE: Creating Unknown Position Mask\nDESCRIPTION: Creates a mask for flares with undetermined positions (where x and y coordinates are zero).\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/tutorials/solar_flares.ipynb#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nflares.masks['unknown_position'] = (flares.coords['x'] == 0 * sc.Unit('asec')) & (\n    flares.coords['y'] == 0 * sc.Unit('asec')\n)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Binned Data Structure with Grid Lines\nDESCRIPTION: Creates a scatter plot showing the original data points, with grid lines representing the bin edges, demonstrating how the data is organized within the binned structure.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/binned-data/binned-data.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfig, ax = plt.subplots(dpi=96)\nbuffer = binned.bins.constituents['data']\nscatter = ax.scatter(\n    x=buffer.coords['x'].values, y=buffer.coords['y'].values, c=buffer.values\n)\nax.set_xlabel('x [{}]'.format(binned.coords['x'].unit))\nax.set_ylabel('y [{}]'.format(binned.coords['y'].unit))\nax.set_xticks(binned.coords['x'].values)\nax.set_yticks(binned.coords['y'].values)\nax.grid()\ncbar = fig.colorbar(scatter)\ncbar.set_label(f\"[{table.unit}]\")\n```\n\n----------------------------------------\n\nTITLE: Comparing Unit Definitions\nDESCRIPTION: Compares two equivalent unit definitions using different syntax.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/units.ipynb#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nsc.Unit('4492800s') == sc.Unit('dogyear')\n```\n\n----------------------------------------\n\nTITLE: Adding Parameter Values as Non-Dimension Coordinate\nDESCRIPTION: Adds the parameter values as a non-dimension coordinate to be used for grouping.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/groupby.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndata.coords['param'] = param\n```\n\n----------------------------------------\n\nTITLE: Extracting Events Within a Parameter Interval in Scipp\nDESCRIPTION: Shows how to extract events falling within a parameter interval using label-based indexing. The upper bound of the interval is not included in the result, following standard slicing conventions.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/binned-data/filtering.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nstart = sc.scalar(1.2, unit='m')\nstop = sc.scalar(1.3, unit='m')\nfiltered = da.bins['param', start:stop]\n```\n\n----------------------------------------\n\nTITLE: Multi-dimensional Logical Binning of Detector Components\nDESCRIPTION: Demonstrates grouping data according to the logical structure of the detector array (modules, segments, counters, wires, and strips) instead of spatial coordinates. This creates a 5D structure that better reflects the detector architecture.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/tutorials/from-tabular-data-to-binned-data.ipynb#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nbinned_logical = table.group('module', 'segment', 'counter', 'wire', 'strip')\nbinned_logical\n```\n\n----------------------------------------\n\nTITLE: Transposing axes for 2D plot\nDESCRIPTION: Example of transposing a 2D DataArray before plotting to control which dimensions are shown along which axes of the figure.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/plotting.ipynb#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nda.transpose().plot()\n```\n\n----------------------------------------\n\nTITLE: Loading CSV Data into Scipp Dataset\nDESCRIPTION: Loads CSV data into a Scipp dataset using StringIO and sc.io.load_csv with bracket header parsing to extract units from column headers.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/reading-and-writing-files.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom io import StringIO\n\nds = sc.io.load_csv(StringIO(csv_content), header_parser='bracket')\nds\n```\n\n----------------------------------------\n\nTITLE: Wavelength and Strip Binning in Scipp\nDESCRIPTION: Combines grouping by strip and binning by wavelength to create a histogram. Shows how to merge different binning approaches for data analysis.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/tutorials/from-tabular-data-to-binned-data.ipynb#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nbinned_strip_wavelength = table.group('strip').bin(wavelength=1000)\nbinned_strip_wavelength.hist().plot(norm='log')\n```\n\n----------------------------------------\n\nTITLE: Binning Flares by Spatial Coordinates\nDESCRIPTION: Bins flare data by x and y coordinates to analyze spatial distribution, using a wide range to include all data.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/tutorials/solar_flares.ipynb#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nspatial = flares.bin(\n    y=sc.linspace('y', -1200, 1200, 100, unit='asec'),\n    x=sc.linspace('x', -1200, 1200, 100, unit='asec'),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating 3D Scatter Plot with Time Slider in Python\nDESCRIPTION: This function creates a 3D scatter plot of the sample data with a time slider, using the plopp library.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/coordinate-transformations.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef scatter_plot(da):\n    from plopp import widgets as pw\n\n    da = da.copy(deep=False)\n    da.coords['x'] = da.coords['location'].fields.x\n    da.coords['y'] = da.coords['location'].fields.y\n    da.coords['z'] = da.coords['location'].fields.z\n    inp = pp.Node(da)\n    slider = pw.SliceWidget(da, dims=['datetime'])\n    slider_node = pp.widget_node(slider)\n    slice_node = pw.slice_dims(inp, slider_node)\n    fig = pp.scatter3dfigure(slice_node, x='x', y='y', z='z', pixel_size=500, cbar=True)\n    return pw.Box([fig, slider])\n\n\nscatter_plot(da)\n```\n\n----------------------------------------\n\nTITLE: Creating a Variable with combined dimensions and shape in C++\nDESCRIPTION: This snippet shows how to use the Dimensions wrapper to combine dimension names and shape information. It creates a 2D variable with dimensions X=1 and Y=3, unit in kg, values [1,2,3], and variances [4,5,6].\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/development/internals/constructing_variables.rst#2025-04-21_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nmakeVariable<float>(Dimensions{{Dim::X, 1}, {Dim::Y, 3}}, Unit{kg}, Values{1, 2, 3}, Variances{4, 5, 6});\n```\n\n----------------------------------------\n\nTITLE: Basic Plotting of DataArray with Row Dimension\nDESCRIPTION: Plots the 1D table of measurements using Scipp's built-in plotting functionality, displaying the 'row' dimension on the x-axis.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/binned-data/binned-data.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntable.plot()\n```\n\n----------------------------------------\n\nTITLE: Creating Sample Data with Parameter Values\nDESCRIPTION: Creates parameter values and corresponding data values with repeated measurements for the same parameter.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/groupby.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nparam = sc.Variable(dims=['x'], values=[1, 3, 1, 1, 5, 3])\nvalues = sc.Variable(dims=['x', 'y'], values=np.random.rand(6, 16))\nvalues += 1.0 + param\n```\n\n----------------------------------------\n\nTITLE: Histogramming and Plotting Filtered Data\nDESCRIPTION: Creates a histogram of the filtered data and plots it after transposing. Basic visualization of strain-based data distribution.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/binned-data/filtering.ipynb#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfiltered.hist().transpose().plot()\n```\n\n----------------------------------------\n\nTITLE: Plotting Spatial Distribution of Flares\nDESCRIPTION: Creates a histogram from the binned data and plots it with log scaling, showing the spatial distribution of flares.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/tutorials/solar_flares.ipynb#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\np = spatial.hist().plot(aspect='equal', norm='log', cmap='inferno')\np.canvas.xlabel = 'x [asec]'\np.canvas.ylabel = 'y [asec]'\np\n```\n\n----------------------------------------\n\nTITLE: Creating Non-Solar Events Mask\nDESCRIPTION: Creates a mask for events not originating from the Sun, using the non_solar flag from the data group.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/tutorials/solar_flares.ipynb#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nflares.masks['non_solar'] = flare_datagroup['non_solar']\n```\n\n----------------------------------------\n\nTITLE: Plotting a DataArray with Quadratic Coordinate in Python\nDESCRIPTION: This snippet demonstrates creating a DataArray with a linear coordinate, then plotting it using the original coordinate.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/coordinate-transformations.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport scipp as sc\nimport plopp as pp\n\nx = sc.linspace(dim='x', unit='m', start=1.0, stop=55.0, num=100)\nda = sc.DataArray(data=x * x, coords={'x': x})\nda.plot(figsize=(4, 3))\n```\n\n----------------------------------------\n\nTITLE: Filtering Events Based on Pulse Quality in Scipp\nDESCRIPTION: Demonstrates how to combine transform_coords with bins indexing to extract only events that were created by 'good' proton pulses, filtering out events from problematic pulses.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/binned-data/filtering.ipynb#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nda = da.transform_coords(good_pulse=good_pulse).bins['good_pulse', sc.index(True)]\nda\n```\n\n----------------------------------------\n\nTITLE: Creating a Scatter Plot of X-Y Positioned Data with Matplotlib\nDESCRIPTION: Creates a scatter plot using matplotlib to visualize the spatial distribution of the measurements in the X-Y plane, using colors to represent the data values.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/binned-data/binned-data.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfig, ax = plt.subplots(dpi=96)\nscatter = ax.scatter(\n    x=table.coords['x'].values, y=table.coords['y'].values, c=table.values\n)\nax.set_xlabel('x [{}]'.format(table.coords['x'].unit))\nax.set_ylabel('y [{}]'.format(table.coords['y'].unit))\ncbar = plt.colorbar(scatter)\ncbar.set_label(f\"[{table.unit}]\")\n```\n\n----------------------------------------\n\nTITLE: Creating 2D Data Array\nDESCRIPTION: Demonstrates creation of a 2D data array with pixel and time dimensions.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/tips-tricks-and-anti-patterns.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nnpix = 100\nntime = 10\ndata = sc.zeros(dims=['pixel', 'time'], shape=[npix, ntime])\ndata\n```\n\n----------------------------------------\n\nTITLE: Creating a scalar Variable with values and variances in C++\nDESCRIPTION: This snippet demonstrates creating a 0-dimensional (scalar) variable by omitting Shape and Dims. It contains a single value of 1 and a variance of 2, with default unit of dimensionless.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/development/internals/constructing_variables.rst#2025-04-21_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nmakeVariable<float>(Values{1}, Variances{2});\n```\n\n----------------------------------------\n\nTITLE: Displaying Event-Based Coordinates for Different Bins\nDESCRIPTION: Shows the result of broadcasting the time coordinate to events, displaying the events in a different bin to demonstrate how each bin's events receive the corresponding time value.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/binned-data/binned-data.ipynb#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nsc.table(da.values[2])\n```\n\n----------------------------------------\n\nTITLE: Exercise 1 Solution: Z-Position Binning and Rebinning\nDESCRIPTION: Demonstrates binning and histogramming by z-position, and then rebinning the already binned data with a different resolution. This showcases the flexibility of binned data in allowing further transformations.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/tutorials/from-tabular-data-to-binned-data.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nbinned_z = table.bin(z_pos=100)\nsolution1 = {}\nsolution1['histogrammed'] = table.hist(z_pos=100)\nsolution1['binned'] = binned_z.hist()\nsolution1['binned_high_resolution'] = binned_z.bin(z_pos=300).hist()\nsc.plot(solution1)\n```\n\n----------------------------------------\n\nTITLE: Using bins_like to Broadcast Bin Coordinates to Event Level\nDESCRIPTION: Uses sc.bins_like to broadcast bin-level time coordinates to each event within bins, creating event-based time coordinates that match the original bin values.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/binned-data/binned-data.ipynb#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nda.bins.coords['time'] = sc.bins_like(da, da.coords['time'])\nsc.table(da.values[0])\n```\n\n----------------------------------------\n\nTITLE: 3D Scatter Plot of Neutron Counts\nDESCRIPTION: Creates a 3D scatter plot showing neutron counts per voxel. Includes data subsetting for visualization and handles invalid positions with NaN values.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/tutorials/from-tabular-data-to-binned-data.ipynb#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\ncounts_per_voxel = binned_logical.hist()\ncounts_per_voxel = counts_per_voxel['counter', 0]['strip', ::4]['wire', ::2]\npp.scatter3d(counts_per_voxel, pos='position', pixel_size=20, cbar=True)\n```\n\n----------------------------------------\n\nTITLE: Plotting Filtered Spatial Distribution\nDESCRIPTION: Creates an improved visualization of the spatial distribution after removing outliers, providing a clearer view of solar flare locations.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/tutorials/solar_flares.ipynb#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\np = spatial.hist().plot(aspect='equal', norm='log', cmap='inferno')\np.canvas.xlabel = 'x [asec]'\np.canvas.ylabel = 'y [asec]'\np\n```\n\n----------------------------------------\n\nTITLE: Installing Scipp in an existing conda environment\nDESCRIPTION: This command installs Scipp into an already existing conda environment, using both the conda-forge and scipp channels.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/installation.rst#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nconda install -c conda-forge -c scipp scipp\n```\n\n----------------------------------------\n\nTITLE: Fine Spatial Binning of Corrected Data\nDESCRIPTION: Rebins corrected data into finer spatial bins using scipp.bin with specified linear spacing.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/tutorials/solar_flares.ipynb#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nspatial = corrected.bin(\n    y=sc.linspace('y', -600, 600, 90, unit='asec'),\n    x=sc.linspace('x', -1000, 1000, 150, unit='asec'),\n)\n```\n\n----------------------------------------\n\nTITLE: Binning Flares with Restricted Spatial Range\nDESCRIPTION: Re-bins flare data with narrower spatial limits to exclude outliers, focusing on the valid instrument detection range.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/tutorials/solar_flares.ipynb#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nspatial = flares.bin(\n    y=sc.linspace('y', -600, 600, 90, unit='asec'),\n    x=sc.linspace('x', -1000, 1000, 150, unit='asec'),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Scipp Datetime Variable from NumPy Datetime (UTC)\nDESCRIPTION: Demonstrates creation of a Scipp datetime Variable from a NumPy datetime64 object, emphasizing that it's interpreted as UTC.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/dtype.ipynb#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nsc.scalar(value=np.datetime64('2021-09-03T12:30:00'))\n```\n\n----------------------------------------\n\nTITLE: Defining Bins for Grouping\nDESCRIPTION: Creates evenly spaced bins for grouping continuous parameter values.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/groupby.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nbins = sc.Variable(dims=[\"z\"], values=np.linspace(0.0, 1.0, 10))\n```\n\n----------------------------------------\n\nTITLE: Testing Coordinate and Mask Behavior in Slicing\nDESCRIPTION: Demonstrates how coordinates and masks behave during different types of slicing operations, showing alignment preservation rules.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/development/internals/concepts.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nassert da['x', 0:1].coords['x'].aligned  # range slice preserves coord and alignment\nassert 'x' in da['x', 0:1].masks  # range slice preserves mask\nassert not da['x', 0].coords['x'].aligned  # point slice makes coord unaligned\nassert 'x' in da['x', 0].masks  # point slice preserves masks\n```\n\n----------------------------------------\n\nTITLE: Random Matrix Creation and Inversion\nDESCRIPTION: Creates random matrices and computes their inverse using NumPy's linalg.inv function, demonstrating matrix manipulation capabilities.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/linear-algebra.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nnp.random.seed(0)  # matrices are not singular for this seed\nmats = sc.spatial.linear_transforms(dims=['x'], values=np.random.rand(2, 3, 3))\ninv = sc.spatial.linear_transforms(dims=['x'], values=np.linalg.inv(mats.values))\n(mats * inv).values.round(decimals=12)\n```\n\n----------------------------------------\n\nTITLE: Converting Dataset to DataArray with Counts\nDESCRIPTION: Transforms the loaded dataset into a DataArray representing event data, where each event has an implicit value of '1 count'. The original columns become coordinates in the new DataArray structure.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/tutorials/from-tabular-data-to-binned-data.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ntable = sc.DataArray(\n    sc.ones(sizes=ds.sizes, unit='counts'),\n    coords={name: column.data for name, column in ds.items()},\n)\nsc.table(table[:10])\n```\n\n----------------------------------------\n\nTITLE: Unit Prefixes and Formatting in Scipp\nDESCRIPTION: Shows usage of SI prefixes and unit formatting options.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/units.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nprint(\n    sc.Unit('mm'),\n    sc.Unit('microsecond'),\n    sc.Unit('micro s'),\n    sc.Unit('us'),\n    sc.Unit('MJ'),\n)\n```\n\nLANGUAGE: python\nCODE:\n```\nprint(sc.Unit('m^2'), sc.Unit('m**2'), sc.Unit('m') ** 2)\n```\n\n----------------------------------------\n\nTITLE: Histogramming Binned Data with Custom Bin Resolution\nDESCRIPTION: Creates a higher-resolution histogram from the binned data by specifying more bins in both x and y dimensions, then plots the resulting 2D histogram.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/binned-data/binned-data.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nbinned.hist(y=10, x=10).plot()\n```\n\n----------------------------------------\n\nTITLE: Temporal and Spatial Analysis Visualization\nDESCRIPTION: Creates an interactive visualization of temporal and spatial distribution using plopp.slicer with customized display parameters.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/tutorials/solar_flares.ipynb#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n%matplotlib widget\nimport plopp as pp\n\ntemporal_and_spatial = spatial.bin(peak_time=10)\np = pp.slicer(\n    temporal_and_spatial.hist(),\n    keep=['y', 'x'],\n    vmin=sc.scalar(1),\n    autoscale='fixed',\n    aspect='equal',\n    cmap='magma',\n    norm='log',\n)\np.canvas.xlabel = 'x [asec]'\np.canvas.ylabel = 'y [asec]'\np\n```\n\n----------------------------------------\n\nTITLE: Improving Pytest Error Messages for Scipp Types in Python\nDESCRIPTION: Custom pytest configuration function to enhance error messages for Scipp's Unit and DType comparisons.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/testing.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef pytest_assertrepr_compare(op: str, left: Any, right: Any) -> List[str]:\n    if isinstance(left, sc.Unit) and isinstance(right, sc.Unit):\n        return [f'Unit({left}) {op} Unit({right})']\n    if isinstance(left, sc.DType) or isinstance(right, sc.DType):\n        return [f'{left!r} {op} {right!r}']\n```\n\n----------------------------------------\n\nTITLE: Creating Scipp Datetime Variable (Scalar with Unit)\nDESCRIPTION: Demonstrates creation of a Scipp datetime Variable using a scalar value and unit, explicitly specifying the datetime64 dtype.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/dtype.ipynb#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nsc.scalar(value=24, unit='h', dtype=sc.DType.datetime64)\n```\n\n----------------------------------------\n\nTITLE: Accessing and Plotting Strain Metadata in Scipp\nDESCRIPTION: Demonstrates extracting the mechanical strain information from the dataset metadata and plotting it to visualize how the strain changes over time.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/binned-data/filtering.ipynb#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nstrain = dg['loadframe.strain']\nstrain.plot()\n```\n\n----------------------------------------\n\nTITLE: Dataset Slicing Equivalence\nDESCRIPTION: Shows equivalent ways of slicing datasets, demonstrating consistency between different access patterns.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/development/internals/concepts.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nassert sc.identical(ds['a']['x', 0:1], ds['x', 0:1]['a'])\nassert sc.identical(ds['a']['x', 0], ds['x', 0]['a'])\n```\n\n----------------------------------------\n\nTITLE: Creating Scipp Variable with Explicit DType (NumPy dtype)\nDESCRIPTION: Demonstrates creating a Scipp Variable with zeros and explicitly specifying the dtype using NumPy's dtype.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/dtype.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nvar = sc.zeros(dims=['x'], shape=[2], dtype=np.dtype(np.float32))\nvar.dtype\n```\n\n----------------------------------------\n\nTITLE: Creating Datasets from DataArrays in Scipp (Python)\nDESCRIPTION: Demonstrates creating a Dataset from a DataArray, which creates a shallow copy by default.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/ownership-mechanism-and-readonly-flags.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nds = sc.Dataset({'a': da})  # shallow copy\n```\n\n----------------------------------------\n\nTITLE: Normalizing and Plotting Strain Data\nDESCRIPTION: Normalizes filtered data by proton charge and creates a histogram with specific binning for strain and d-spacing. Shows diffraction peak splitting under mechanical strain.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/binned-data/filtering.ipynb#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nnormalized = filtered / charge_per_strain_value\nnormalized.hist(strain=30, dspacing=300).plot()\n```\n\n----------------------------------------\n\nTITLE: Accessing NumPy Datetime from Scipp Variable\nDESCRIPTION: Demonstrates how to access the underlying NumPy datetime64 object from a Scipp datetime Variable.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/dtype.ipynb#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nvar.value\n```\n\n----------------------------------------\n\nTITLE: Plotting a slice of a Dataset\nDESCRIPTION: Example of plotting a slice of a Dataset using indexing with a range and the .plot() method.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/plotting.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nds['x', 10:30].plot()\n```\n\n----------------------------------------\n\nTITLE: Configuring Python to Use Scipp Module\nDESCRIPTION: Commands to set up the Python environment to use the installed Scipp module.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/development/getting-started.rst#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nconda develop /home/user/scipp/install\n```\n\n----------------------------------------\n\nTITLE: Creating Bin-Based Position Metadata\nDESCRIPTION: Begins creating a variable to store position metadata for each bin (voxel) rather than for every event. This approach can be more efficient when all events in a bin share the same position information.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/tutorials/from-tabular-data-to-binned-data.ipynb#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\npos = sc.zeros(sizes=binned_logical.sizes, dtype=sc.DType.vector3, unit='mm')\n# We 'pop' the coordinates. If desired they could be kept by using\n```\n\n----------------------------------------\n\nTITLE: Accessing DataGroup Dimensions Property\nDESCRIPTION: Shows how to access the dims property of a DataGroup, which returns the union of dimensions across all items in the group.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/data-structures/data-structures.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndg.dims\n```\n\n----------------------------------------\n\nTITLE: Displaying Scipp Dataset in Jupyter Notebook\nDESCRIPTION: Shows how to display a Scipp Dataset in a Jupyter Notebook, which automatically uses the HTML representation.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/representations-and-tables.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nds\n```\n\n----------------------------------------\n\nTITLE: Plotting a 2D XY Slice\nDESCRIPTION: Visualizes the high-resolution XY cut created in the previous snippet. The plot shows the detector structure in the XY plane at Z=0, revealing details of the detector layout.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/tutorials/from-tabular-data-to-binned-data.ipynb#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nsc.plot(xy_cut.hist().transpose(), aspect='equal')\n```\n\n----------------------------------------\n\nTITLE: Creating Unit Instance\nDESCRIPTION: Demonstrates creating a Unit instance from the defined alias.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/units.ipynb#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nsc.Unit('dogyear')\n```\n\n----------------------------------------\n\nTITLE: Creating Independent DataArrays in Scipp (Python)\nDESCRIPTION: Shows how to create a DataArray with independent copies of variables to avoid unintended modifications to shared data.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/ownership-mechanism-and-readonly-flags.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nda = sc.DataArray(data=var.copy(), coords={'x': var.copy()})\nda += 666 * sc.units.m\nda\n```\n\n----------------------------------------\n\nTITLE: Handling Read-Only Flags in Scipp DataArrays (Python)\nDESCRIPTION: Illustrates the use of read-only flags to prevent unintended modifications to DataArray slices.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/ownership-mechanism-and-readonly-flags.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    da['x', 0].data = var['x', 2]\nexcept sc.DataArrayError as e:\n    print(e)\n```\n\n----------------------------------------\n\nTITLE: Invalid Unit Operations in Scipp\nDESCRIPTION: Demonstrates handling of invalid unit operations that raise exceptions.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/units.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nspeed + length\n```\n\n----------------------------------------\n\nTITLE: Coordinate Modification Restrictions\nDESCRIPTION: Demonstrates restrictions on modifying coordinates through dataset items.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/development/internals/concepts.ipynb#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    ds['a'].coords['fail'] = 1.0 * sc.units.m\nexcept sc.DataArrayError:\n    ok = False\nelse:\n    ok = True\nassert not ok\nassert 'fail' not in ds.coords\n```\n\n----------------------------------------\n\nTITLE: Plotting with logarithmic data axis\nDESCRIPTION: Example of plotting data with a logarithmic scale on the data axis (vertical axis) using the norm option.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/plotting.ipynb#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n(100 * (da1 - da1.min())).plot(norm='log')\n```\n\n----------------------------------------\n\nTITLE: Initializing Scipp Logger in Python\nDESCRIPTION: This snippet shows how to obtain the Scipp logger instance. The logger is an instance of logging.Logger with the name 'scipp'.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/logging.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport scipp as sc\n\nlogger = sc.get_logger()\n```\n\n----------------------------------------\n\nTITLE: Accessing Data Array in Scipp\nDESCRIPTION: Demonstrates retrieving the data array from the dataset group using dictionary-style access. This provides access to the main diffraction data for subsequent analysis.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/binned-data/filtering.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nda = dg['data']\nda\n```\n\n----------------------------------------\n\nTITLE: 2D Coordinate Operations\nDESCRIPTION: Shows how 2D coordinates affect slicing operations and dimension handling.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/development/internals/concepts.ipynb#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nda_2d = sc.DataArray(\n    data=sc.zeros(dims=['y', 'x'], shape=[2, 2]),\n    coords={\n        'x': sc.Variable(dims=['y', 'x'], values=np.array([[1, 2], [3, 4]])),\n        'y': sc.Variable(dims=['y'], values=[3, 4]),\n    },\n)\n\n(\n    da_2d['x', 0] + da_2d['x', 1]\n)  # Same as with 1-D coord: x-coord differs but not aligned due to slice.\ntry:\n    # 'y' sliced, so 'x' coord is aligned and yields different values from slices of 2-D coord.\n    da_2d['y', 0] + da_2d['y', 1]\nexcept RuntimeError:\n    ok = False\nelse:\n    ok = True\nassert not ok\n```\n\n----------------------------------------\n\nTITLE: Grouping Binned Data with Parameter Concatenation in Scipp\nDESCRIPTION: Demonstrates grouping of binned data by a parameter coordinate, combining bin contents through concatenation.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/binned-data/histogramming-grouping-and-binning.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nbinned = table.bin(x=xbins)\nbinned.coords['param'] = sc.array(\n    dims=['x'], values=(np.random.random(39) * 4).astype(np.int32)\n)\ngrouped = binned.groupby('param').concat('x')\ngrouped\n```\n\n----------------------------------------\n\nTITLE: Computing Flare Duration (Simple Method)\nDESCRIPTION: Calculates the duration of each flare by subtracting start_time from end_time and stores the result as a new coordinate.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/tutorials/solar_flares.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nduration = flares.coords['end_time'] - flares.coords['start_time']\nflares.coords['duration'] = duration\n```\n\n----------------------------------------\n\nTITLE: Modifying DataArray Masks\nDESCRIPTION: Shows how to modify existing masks and add new masks to a DataArray.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/masking.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nb = a.copy()\nb.masks['x'].values[1] = True\nb.masks['y'] = sc.array(dims=['y'], values=[False, True])\n```\n\n----------------------------------------\n\nTITLE: Creating tabular representation of Scipp data\nDESCRIPTION: Generates a table representation of a slice of a Dataset, suitable for 0-D and 1-D data.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/quick-start.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nsc.table(dataset['y', 2])\n```\n\n----------------------------------------\n\nTITLE: Transforming Event Data Based on Strain\nDESCRIPTION: Rearranges data based on strain values using interpolation and binning. Uses Scipp's lookup function for interpolation with 'previous' mode and transforms coordinates based on strain.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/binned-data/filtering.ipynb#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ninterpolate_strain = sc.lookup(strain, mode='previous')\nfiltered = da.transform_coords(strain=interpolate_strain).bin(strain=100)\n```\n\n----------------------------------------\n\nTITLE: Creating Scipp Variable with NumPy Array (Float)\nDESCRIPTION: Demonstrates creating a Scipp Variable using a NumPy array of floats. The dtype is automatically derived from the NumPy array.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/dtype.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport scipp as sc\n\nvar = sc.Variable(dims=['x'], values=np.arange(4.0))\nvar.dtype\n```\n\n----------------------------------------\n\nTITLE: Configuring Dataset Benchmark Executable in CMake\nDESCRIPTION: Sets up the dataset_benchmark executable, adds it as a dependency to all-benchmarks, and links it with the scipp-dataset library and benchmark framework.\nSOURCE: https://github.com/scipp/scipp/blob/main/lib/benchmark/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(dataset_benchmark dataset_benchmark.cpp)\nadd_dependencies(all-benchmarks dataset_benchmark)\ntarget_link_libraries(\n  dataset_benchmark LINK_PRIVATE scipp-dataset benchmark::benchmark_main\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing Dataset Masks\nDESCRIPTION: Demonstrates how to access masks of items within a Dataset.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/masking.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nds = sc.Dataset(data={'a': a})\nds['a'].masks['x']\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Mask Array\nDESCRIPTION: Creates a simple boolean mask array with dimension 'x'.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/masking.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmask = sc.array(dims=['x'], values=[False, False, True])\nmask\n```\n\n----------------------------------------\n\nTITLE: Creating and Slicing Variables in Scipp (Python)\nDESCRIPTION: Demonstrates creating a variable using Scipp's arange function and slicing it. Shows how slices share ownership of the underlying data buffer.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/ownership-mechanism-and-readonly-flags.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport scipp as sc\n\nvar = sc.arange(dim='x', unit='m', start=0, stop=12)\nvar['x', 4:6]\n```\n\n----------------------------------------\n\nTITLE: Accessing DataGroup Shape Property\nDESCRIPTION: Demonstrates accessing the shape property of a DataGroup, which returns the combined shape information of all items.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/data-structures/data-structures.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndg.shape\n```\n\n----------------------------------------\n\nTITLE: Displaying Loaded DataArray\nDESCRIPTION: Displays the DataArray that was loaded from the HDF5 file. This demonstrates how to verify the loaded object.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/reading-and-writing-files.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nb\n```\n\n----------------------------------------\n\nTITLE: Exercise 3 Solution: Grouping by Strip and Wire\nDESCRIPTION: Groups the data by strip and wire coordinates and creates a histogram. This simpler grouping demonstrates the detector structure at a high level, showing how neutron intensity decreases as they are absorbed deeper in the detector.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/tutorials/from-tabular-data-to-binned-data.ipynb#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nbinned_strip_wire = table.group('strip', 'wire')\nprint(\n    'Neutrons arrive from the \"left\" in the following figure (low wire index).'\n    'They are gradually absorbed so the intensity decreases as we reach deeper '\n    'voxel layers:'\n)\nbinned_strip_wire.hist().plot()\n```\n\n----------------------------------------\n\nTITLE: Creating Scipp Variable with Explicit DType (String)\nDESCRIPTION: Shows how to create a Scipp Variable with zeros and explicitly specify the dtype using a string representation.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/dtype.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nvar = sc.zeros(dims=['x'], shape=[2], dtype='float32')\nvar.dtype\n```\n\n----------------------------------------\n\nTITLE: Checking Variable Modification in Scipp (Python)\nDESCRIPTION: Demonstrates that modifications to a DataArray also affect the original variable due to shared ownership.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/ownership-mechanism-and-readonly-flags.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nvar\n```\n\n----------------------------------------\n\nTITLE: Displaying Scipp Log Widget in Jupyter Notebook\nDESCRIPTION: This code displays the Scipp log widget in a Jupyter notebook.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/logging.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nsc.display_logs()\n```\n\n----------------------------------------\n\nTITLE: Using scipp.table for 1D Data Representation in Python\nDESCRIPTION: Demonstrates how to use sc.table() to arrange 1D Scipp objects in a table format, using slicing for higher-dimensional data.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/representations-and-tables.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nsc.table(ds['y', 0])\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Ambiguous Indexing in Scipp\nDESCRIPTION: Demonstrates how Scipp raises a DimensionError when attempting to use positional indexing without specifying a dimension label for multi-dimensional data.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/slicing.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    var[1]\nexcept sc.DimensionError as e:\n    print(e)\n```\n\n----------------------------------------\n\nTITLE: Modifying DataArray Slices in Scipp (Python)\nDESCRIPTION: Shows the correct way to modify a slice of a DataArray using __setitem__.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/ownership-mechanism-and-readonly-flags.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nda['x', 0] = var['x', 2]\n```\n\n----------------------------------------\n\nTITLE: Creating Binned DataArray\nDESCRIPTION: Shows how to create a DataArray with binned data and additional coordinates.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/binned-data/computation.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nvar = sc.bins(begin=begin, end=end, dim='event', data=table)\na = sc.DataArray(data=var, coords={'x': sc.Variable(dims=['x'], values=np.arange(4.0))})\na\n```\n\n----------------------------------------\n\nTITLE: Defining Unit Alias with String\nDESCRIPTION: Alternative way to define the unit alias using a string representation.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/units.ipynb#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nsc.units.aliases.clear()\nsc.units.aliases['dogyear'] = '4492800s'\n```\n\n----------------------------------------\n\nTITLE: Coordinate Manipulation in Scipp\nDESCRIPTION: Extracts voxel coordinates from binned data and creates a position coordinate by combining x, y, z components. Demonstrates coordinate manipulation and data restructuring.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/tutorials/from-tabular-data-to-binned-data.ipynb#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\npos.fields.x = binned_logical.bins.coords.pop('voxel_x').bins.mean()\npos.fields.y = binned_logical.bins.coords.pop('voxel_y').bins.mean()\npos.fields.z = binned_logical.bins.coords.pop('voxel_z').bins.mean()\nbinned_logical.coords['position'] = pos\nbinned_logical\n```\n\n----------------------------------------\n\nTITLE: Creating Scipp Datetime Variable (Integer Input)\nDESCRIPTION: Shows how to create a Scipp datetime Variable using an integer representation of seconds since the epoch.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/dtype.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nsc.datetime(0, unit='s')\n```\n\n----------------------------------------\n\nTITLE: Transforming Two Variables with Specific Type Combinations in Scipp\nDESCRIPTION: Example of using transform to add two variables with specific type combinations (double+float and double+double). This creates a new variable as the result and handles units automatically.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/development/internals/transform.rst#2025-04-21_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nauto var = transform<\n    std::tuple<std::tuple<double, float>, std::tuple<double, double>>>(\n    a, b, [](const auto &a_, const auto &b_) { return a_ + b_; });\n```\n\n----------------------------------------\n\nTITLE: Dataset Coordinate and Mask Access Patterns\nDESCRIPTION: Verifies coordinate alignment and mask preservation in various dataset access patterns.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/development/internals/concepts.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nassert ds['a'].coords['x'].aligned\nassert ds['x', 0:1].coords['x'].aligned\nassert not ds['x', 0].coords['x'].aligned\n\nassert 'x' in ds['a'].masks\nassert 'x' in ds['x', 0:1]['a'].masks\nassert 'x' in ds['a']['x', 0].masks\nassert 'x' in ds['x', 0]['a'].masks\n```\n\n----------------------------------------\n\nTITLE: Using scipp.to_html for Multiple Objects in Python\nDESCRIPTION: Demonstrates how to use sc.to_html() to display multiple Scipp objects in a single Jupyter cell.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/representations-and-tables.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsc.to_html(ds['a'])\nsc.to_html(ds['b'])\n```\n\n----------------------------------------\n\nTITLE: Creating Scalar with Custom Unit\nDESCRIPTION: Creates a scalar value using the custom unit definition.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/units.ipynb#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nvar = sc.scalar(2, unit='dogyear')\nvar\n```\n\n----------------------------------------\n\nTITLE: Modifying Dataset Masks in Scipp (Python)\nDESCRIPTION: Shows that while buffers are shared, meta-data dicts like masks are not shared between DataArrays and Datasets.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/ownership-mechanism-and-readonly-flags.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nds['a'].masks['m'] = da.coords['x'] < 670 * sc.Unit('m')\n'm' in da.masks  # the masks *dict* is copied\n```\n\n----------------------------------------\n\nTITLE: Single Strip Visualization in Scipp\nDESCRIPTION: Generates a 3D scatter plot for a single strip of neutron detection data. Shows detailed visualization of component-level data.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/tutorials/from-tabular-data-to-binned-data.ipynb#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nstrip_counts = binned_logical['strip', 200].hist()\npp.scatter3d(strip_counts, pos='position', pixel_size=10, cbar=True)\n```\n\n----------------------------------------\n\nTITLE: Defining Unit Alias with Scalar\nDESCRIPTION: Creates a unit alias 'dogyear' using a scalar value with a multiplier of 4492800 seconds.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/units.ipynb#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nsc.units.aliases['dogyear'] = sc.scalar(4492800, unit='s')\n```\n\n----------------------------------------\n\nTITLE: Counting Total Number of Flares\nDESCRIPTION: Uses the sizes property to determine the total number of flares in the dataset.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/tutorials/solar_flares.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Number of flares\nflares.sizes['flare']\n```\n\n----------------------------------------\n\nTITLE: Event-Centric Histogram Scaling\nDESCRIPTION: Creates a histogram for scaling event weights and demonstrates lookup-based division operation.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/binned-data/computation.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntime_bins = sc.array(dims=['time'], unit=sc.units.us, values=[0.0, 3.0, 6.0])\nweight = sc.array(dims=['time'], values=[10.0, 3.0])\nhist = sc.DataArray(data=weight, coords={'time': time_bins})\nhist\n```\n\n----------------------------------------\n\nTITLE: Creating Scipp Datetime Variable Array (Integer Input)\nDESCRIPTION: Demonstrates creation of a Scipp Variable containing multiple datetime values from integer inputs representing microseconds since the epoch.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/dtype.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nsc.datetimes(dims=['t'], values=[123456789, 345678912], unit='us')\n```\n\n----------------------------------------\n\nTITLE: Setting Default Build Type in CMake\nDESCRIPTION: Sets the default build type to 'Release' if no build type was specified. This ensures optimized builds by default while allowing overrides through CMake configuration.\nSOURCE: https://github.com/scipp/scipp/blob/main/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE)\n  set(CMAKE_BUILD_TYPE\n      \"Release\"\n      CACHE\n        STRING\n        \"Choose the type of build, options are: Debug Release RelWithDebInfo MinSizeRel.\"\n        FORCE\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Displaying a Scipp variable\nDESCRIPTION: Shows the HTML representation of a Scipp variable by simply typing its name in a notebook cell.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/quick-start.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ny\n```\n\n----------------------------------------\n\nTITLE: Converting Units\nDESCRIPTION: Shows unit conversion between the custom unit and base seconds.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/units.ipynb#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nvar.to(unit='s')\n```\n\n----------------------------------------\n\nTITLE: Modifying Dataset Coordinates in Scipp (Python)\nDESCRIPTION: Demonstrates that modifying coordinates affects both the DataArray and Dataset due to shared buffer references.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/ownership-mechanism-and-readonly-flags.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nda.coords['x'] *= -1\n# the coords *dict* is copied,\n# but the 'x' coordinate references same buffer\nds.coords['x']\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic DataArray and Dataset\nDESCRIPTION: Creates a basic DataArray with coordinates and masks, and wraps it in a Dataset. Demonstrates fundamental structure setup with numpy and scipp.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/development/internals/concepts.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport scipp as sc\n\nx = sc.Variable(dims=['x'], values=[1, 2, 3, 4])\nda = sc.DataArray(data=x, coords={'x': x}, masks={'x': sc.less(x, 2 * sc.units.one)})\nds = sc.Dataset(data={'a': da})\n```\n\n----------------------------------------\n\nTITLE: String Representation of Scipp Objects in Python\nDESCRIPTION: Shows how to convert Scipp objects to strings and control the formatting using f-strings or the format function.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/representations-and-tables.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nprint(ds)\n\nvar = sc.linspace('x', 0.0, 1.0, 11, unit='m')\nf'{var}'\nf'{var:<}'\nf'{var:#5}'\nf'{var::.1e}'\nf'{var:<#5:.1e}'\n\nvar = sc.scalar(1.2345, variance=0.01, unit='kg')\nf'{var:c}'\n```\n\n----------------------------------------\n\nTITLE: Creating Binned Data in Scipp\nDESCRIPTION: Creates a binned dataset to demonstrate the error when broadcasting variables with variances to bin elements.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/about/migration/23-01.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nbinned = sc.data.table_xyz(100).bin(y=3)\n```\n\n----------------------------------------\n\nTITLE: Creating Scipp Epoch Variable\nDESCRIPTION: Shows how to create a Scipp Variable representing the epoch (start of Unix time) with a specified unit.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/dtype.ipynb#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nsc.epoch(unit='s')\n```\n\n----------------------------------------\n\nTITLE: Logging Formatted Scipp Variable as String in Python\nDESCRIPTION: This code demonstrates logging a Scipp Variable as a plain string representation using %r formatting.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/logging.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nlogger.info('A Variable converted to string: %r', sc.arange('r', 100, 105))\n```\n\n----------------------------------------\n\nTITLE: Removing Unit Alias\nDESCRIPTION: Demonstrates removing the unit alias to reveal the underlying multiplier.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/units.ipynb#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ndel sc.units.aliases['dogyear']\nvar\n```\n\n----------------------------------------\n\nTITLE: Enabling interactive plots in Jupyter notebooks\nDESCRIPTION: Magic command to enable interactive Matplotlib plots in Jupyter notebooks, which should be used at the start of the notebook.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/plotting.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n%matplotlib widget\n```\n\n----------------------------------------\n\nTITLE: Computing Delta Values for ViewIndex\nDESCRIPTION: Code snippet showing how delta values are computed for each dimension in ViewIndex. Delta represents the step length per dimension used in increment operations, considering array shape and strides.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/development/internals/multi_dimensional_indexing.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nif dim == 0:\n    delta[dim] = stride[dim]\nelse:\n    delta[dim] = stride[dim] - shape[dim-1] * stride[dim-1]\n```\n\n----------------------------------------\n\nTITLE: Flare Duration Analysis\nDESCRIPTION: Analyzes and plots flare durations over time by copying temporal data and using mean binning instead of histogram summation.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/tutorials/solar_flares.ipynb#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nduration = temporal.copy()\nduration.name = 'duration'\nduration.bins.data = duration.bins.coords.pop('duration')\nduration.bins.mean().plot()\n```\n\n----------------------------------------\n\nTITLE: Mask Handling in Operations\nDESCRIPTION: Demonstrates mask behavior in operations, showing the OR operation concept.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/development/internals/concepts.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nassert not sc.identical(da + da['x', 0], da + da['x', 0].data)\n```\n\n----------------------------------------\n\nTITLE: Importing Scipp in Python\nDESCRIPTION: Python code example showing how to import the Scipp library.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/development/getting-started.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport scipp as sc\n```\n\n----------------------------------------\n\nTITLE: Importing Scipp Package\nDESCRIPTION: Imports the Scipp library which is used throughout the tutorial for scientific data analysis.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/tutorials/solar_flares.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport scipp as sc\n```\n\n----------------------------------------\n\nTITLE: Accessing and Plotting Proton Charge Data in Scipp\nDESCRIPTION: Demonstrates retrieving and plotting the proton charge data, which represents the total charge of protons per pulse that produced the neutrons in the experiment.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/binned-data/filtering.ipynb#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nproton_charge = dg['proton_charge']\nproton_charge.plot()\n```\n\n----------------------------------------\n\nTITLE: Unit Representation in Scipp\nDESCRIPTION: Shows how to get string representation of units in terms of SI base units.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/units.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nrepr(sc.Unit('V/L'))\n```\n\n----------------------------------------\n\nTITLE: Loading JSON Data with Pandas\nDESCRIPTION: Demonstrates loading JSON data into a Pandas DataFrame using pandas.read_json for later conversion to a Scipp dataset.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/reading-and-writing-files.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\n\ndf = pd.read_json(json)\ndf\n```\n\n----------------------------------------\n\nTITLE: Counting Masked Flares\nDESCRIPTION: Counts flares masked by each condition individually and by their combination.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/tutorials/solar_flares.ipynb#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nns_mask = flares.masks['non_solar']\npos_mask = flares.masks['unknown_position']\n{\n    'non_solar': ns_mask.sum().value,\n    'unknown_position': pos_mask.sum().value,\n    'combined': sc.sum(ns_mask | pos_mask).value,\n}\n```\n\n----------------------------------------\n\nTITLE: Installing plopp package using conda\nDESCRIPTION: Command to install the plopp package using conda, an alternative method for installing the required plotting package for Scipp.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/plotting.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nconda install -c conda-forge -c scipp plopp\n```\n\n----------------------------------------\n\nTITLE: Calculating Total Duration of Flares\nDESCRIPTION: Sums all flare durations and converts the result to days with floating-point precision.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/tutorials/solar_flares.ipynb#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nsc.sum(duration).to(unit='D', dtype='float64')\n```\n\n----------------------------------------\n\nTITLE: Extracting Flares Data Array\nDESCRIPTION: Extracts the main flares data array from the loaded data group for easier access and manipulation.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/tutorials/solar_flares.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nflares = flare_datagroup['flares']\nflares\n```\n\n----------------------------------------\n\nTITLE: Importing Scipp and Plopp Libraries\nDESCRIPTION: Imports the required Python libraries: Scipp for data manipulation and Plopp for visualization. The '%matplotlib widget' magic command enables interactive plots in Jupyter notebooks.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/tutorials/from-tabular-data-to-binned-data.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plopp as pp\nimport scipp as sc\n\n%matplotlib widget\n```\n\n----------------------------------------\n\nTITLE: Logging Scipp Variable with HTML Representation in Python\nDESCRIPTION: This code demonstrates logging a Scipp Variable object, which will display its HTML representation in the log widget.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/logging.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nlogger.info(sc.arange('x', 0, 5))\n```\n\n----------------------------------------\n\nTITLE: Energy Band Analysis and Visualization\nDESCRIPTION: Groups and plots temporal distribution by energy bands, excluding lowest energy band and creating separate plots for each energy level.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/tutorials/solar_flares.ipynb#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\ngrouped_by_energy = temporal.group('min_energy')['min_energy', 1:]\n\nlines = {\n    f\"min_energy={energy.value} {energy.unit}\": grouped_by_energy[\n        'min_energy', energy\n    ].bins.sum()\n    for energy in grouped_by_energy.coords['min_energy']\n}\nsc.plot(lines)\n```\n\n----------------------------------------\n\nTITLE: Unit Aliases in Scipp\nDESCRIPTION: Shows how to define and use unit aliases for custom formatting and domain-specific units.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/units.ipynb#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nsc.Unit('us/angstrom**2')\n```\n\nLANGUAGE: python\nCODE:\n```\nsc.units.aliases['angstrom'] = 'angstrom'\nsc.Unit('us/angstrom**2')\n```\n\nLANGUAGE: python\nCODE:\n```\ndel sc.units.aliases['angstrom']\nsc.Unit('us/angstrom**2')\n```\n\nLANGUAGE: python\nCODE:\n```\nwith sc.units.aliases.scoped(angstrom='angstrom'):\n    print(sc.Unit('us/angstrom**2'))\nprint(sc.Unit('us/angstrom**2'))\n```\n\nLANGUAGE: python\nCODE:\n```\nsc.units.aliases['speed'] = 'm/s'\n```\n\nLANGUAGE: python\nCODE:\n```\nprint(sc.Unit('m/s'))\nprint(sc.Unit('km/s'))\nprint(sc.Unit('kg*m/s'))\n```\n\nLANGUAGE: python\nCODE:\n```\nprint(sc.Unit('speed'))\nprint(sc.Unit('kg*mspeed**2'))\n```\n\nLANGUAGE: python\nCODE:\n```\nsc.scalar(4, unit='speed')\n```\n\nLANGUAGE: python\nCODE:\n```\nrepr(sc.Unit('speed'))\n```\n\n----------------------------------------\n\nTITLE: Generating Code Coverage Reports for Scipp\nDESCRIPTION: Commands to configure CMake for coverage reporting and generate HTML coverage reports for the Scipp codebase.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/development/getting-started.rst#2025-04-21_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\ncmake -DCOVERAGE=On -DCMAKE_BUILD_TYPE=Debug\ncmake --build . --target coverage\n```\n\n----------------------------------------\n\nTITLE: Counting Non-Solar Flares\nDESCRIPTION: Sums the non-solar flag array to count flares not originating from the Sun.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/tutorials/solar_flares.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Number of flares flagged as non-solar\nflare_datagroup['non_solar'].sum()\n```\n\n----------------------------------------\n\nTITLE: Importing Scipp Dependencies\nDESCRIPTION: Basic imports required for using Scipp masking functionality.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/masking.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport scipp as sc\n```\n\n----------------------------------------\n\nTITLE: Resetting IPython Output Cache in Python\nDESCRIPTION: This code snippet demonstrates how to manually free the IPython output cache to reduce memory usage in Jupyter notebooks.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/faq.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%reset out\n```\n\n----------------------------------------\n\nTITLE: Projected Position Calculation and Visualization\nDESCRIPTION: Groups data by module, segment, counter, and strip, then calculates projected positions and creates a 3D scatter plot. Demonstrates handling of NaN values in position calculations.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/tutorials/from-tabular-data-to-binned-data.ipynb#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nproj = table.group('module', 'segment', 'counter', 'strip')\nproj_hist = proj.hist()\nproj_hist.coords['proj_pos'] = pos.nanmean('wire')\npp.scatter3d(proj_hist, pos='proj_pos', pixel_size=10, norm='log', cbar=True)\n```\n\n----------------------------------------\n\nTITLE: Finding End of Time Range\nDESCRIPTION: Determines the latest end time among all flares using the max function.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/tutorials/solar_flares.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# End of time range\nflares.coords['end_time'].max()\n```\n\n----------------------------------------\n\nTITLE: Logging Formatted Scipp Variable with HTML Representation in Python\nDESCRIPTION: This snippet shows how to embed a Scipp Variable's HTML representation in a log message using %-formatting.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/logging.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nlogger.info('The HTML representation of a Variable: %s', sc.arange('h', 10, 15))\n```\n\n----------------------------------------\n\nTITLE: Finding Start of Time Range\nDESCRIPTION: Determines the earliest start time among all flares using the min function.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/tutorials/solar_flares.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Start of time range\nflares.coords['start_time'].min()\n```\n\n----------------------------------------\n\nTITLE: Reverse Unit Conversion\nDESCRIPTION: Demonstrates converting from base seconds back to the custom unit.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/units.ipynb#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nsc.units.aliases['dogyear'] = '4492800s'\nsc.scalar(8985600, unit='s').to(unit='dogyear')\n```\n\n----------------------------------------\n\nTITLE: Accessing DataGroup Sizes Property\nDESCRIPTION: Shows how to access the sizes property of a DataGroup, which returns the combined size information across all items.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/data-structures/data-structures.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndg.sizes\n```\n\n----------------------------------------\n\nTITLE: Aligned Coordinate Precedence\nDESCRIPTION: Demonstrates how aligned coordinates take precedence over unaligned coordinates in operations.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/development/internals/concepts.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\na = da['x', 0].copy()\na.coords.set_aligned('x', True)\nb = da['x', 1].copy()\nassert sc.identical((a + b).coords['x'], a.coords['x'])\n```\n\n----------------------------------------\n\nTITLE: Slice Modification Restrictions\nDESCRIPTION: Demonstrates restrictions on modifying coordinates through slices.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/development/internals/concepts.ipynb#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    da['x', 0].coords['fail'] = 1.0 * sc.units.m\nexcept sc.DataArrayError:\n    ok = False\nelse:\n    ok = True\nassert not ok\nassert 'fail' not in da.coords\n```\n\n----------------------------------------\n\nTITLE: Adding Jupyter Widget Handler to Scipp Logger in Python\nDESCRIPTION: This snippet adds a WidgetHandler to the Scipp logger for use in Jupyter notebooks.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/logging.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# This only works in a Jupyter notebook.\nlogger.addHandler(sc.logging.make_widget_handler())\n```\n\n----------------------------------------\n\nTITLE: Creating Image Stack\nDESCRIPTION: Creates a stack of images with optimal dimension ordering for efficient slicing.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/tips-tricks-and-anti-patterns.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nnimage = 13\nimages = sc.zeros(\n    dims=['image', 'y', 'x'],\n    shape=[\n        nimage,\n        ny,\n        nx,\n    ],\n)\nimages\n```\n\n----------------------------------------\n\nTITLE: Testing Operations with Aligned Coordinates\nDESCRIPTION: Demonstrates how operations behave with aligned coordinates, showing error handling for mismatched coordinates.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/development/internals/concepts.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    ok = da['x', 0:1] + da['x', 1:2]\nexcept RuntimeError:\n    ok = False\nassert not ok\n```\n\n----------------------------------------\n\nTITLE: Sphinx autosummary directive for Scipp Typing\nDESCRIPTION: Sphinx configuration that generates documentation for Scipp's typing classes using a custom type template, providing type hint information for the library.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/classes.rst#2025-04-21_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. autosummary::\n   :toctree: ../generated/classes\n   :template: scipp-type-template.rst\n   :recursive:\n\n   typing.DTypeLike\n   typing.MetaDataMap\n   typing.VariableLike\n```\n\n----------------------------------------\n\nTITLE: Demonstrating VariancesError with Binned Data\nDESCRIPTION: Shows an operation that will raise VariancesError because norm would need to be broadcast to all bin elements.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/about/migration/23-01.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nbinned / norm\n```\n\n----------------------------------------\n\nTITLE: Testing Operations with Missing Unaligned Coordinates\nDESCRIPTION: Shows how operations handle missing unaligned coordinates and maintains associativity.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/development/internals/concepts.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\na = da['x', 0].copy()\nb = da['x', 1].copy()\nc = da['x', 2].copy()\nassert sc.identical(a + (b + c), (a + b) + c)\n```\n\n----------------------------------------\n\nTITLE: Data Reshaping with Fold\nDESCRIPTION: Example of using fold operation to reshape data for efficient processing.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/tips-tricks-and-anti-patterns.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nvar = sc.arange('x', 12.0)\nvar.fold('x', sizes={'x': 4, 'neighbors': 3}).sum('neighbors')\n```\n\n----------------------------------------\n\nTITLE: Using Hypothesis Strategies for Scipp Variable Testing in Python\nDESCRIPTION: Example of using Scipp's Hypothesis strategies to generate test inputs for variables, demonstrating a test that checks if the abs function preserves shape.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/testing.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom hypothesis import given\nimport scipp.testing.strategies as scst\n\n@given(scst.variables())\ndef test_abs_preserves_shape(var):\n    assert abs(var).shape == var.shape\n```\n\n----------------------------------------\n\nTITLE: Displaying all Scipp objects\nDESCRIPTION: Shows a list of all current Scipp objects (variables, data arrays, datasets) by typing the module name.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/quick-start.ipynb#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nsc\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries\nDESCRIPTION: Sets up the necessary imports for Scipp and NumPy, and initializes the random seed for reproducible results.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/groupby.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport scipp as sc\n\nnp.random.seed(0)\n```\n\n----------------------------------------\n\nTITLE: Handling Unaligned Coordinates\nDESCRIPTION: Shows behavior of operations with unaligned coordinates and data dropping.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/development/internals/concepts.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nassert sc.identical(da + da['x', 1], da + da['x', 1].data)\n```\n\n----------------------------------------\n\nTITLE: Coordinate Deletion Restrictions\nDESCRIPTION: Shows how coordinate deletion is restricted through dataset items.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/development/internals/concepts.ipynb#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nds.coords['xx'] = 1.0 * sc.units.m\nassert 'xx' in ds['a'].coords\ntry:\n    del ds['a'].coords['xx']\nexcept sc.DataArrayError:\n    ok = False\nelse:\n    ok = True\nassert not ok\nassert 'xx' in ds.coords\n```\n\n----------------------------------------\n\nTITLE: Installing Scipp with functional optional dependencies using pip\nDESCRIPTION: This command installs Scipp from PyPI with functional optional dependencies like h5py and scipy, but without interactive tools.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/installation.rst#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\npip install scipp[extra]\n```\n\n----------------------------------------\n\nTITLE: Setting Up Logging for Scipp Warnings\nDESCRIPTION: Configures a logger to display warnings when using the workaround that discards variances.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/about/migration/23-01.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport logging\n\nstream_handler = logging.StreamHandler()\nlogger = sc.get_logger()\nlogger.addHandler(stream_handler)\n```\n\n----------------------------------------\n\nTITLE: Displaying All Scipp Objects in Python\nDESCRIPTION: Shows how to display all Scipp objects (variables, data arrays, and datasets) by typing the module name.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/representations-and-tables.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsc\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Binned Data in Python\nDESCRIPTION: Sets up the environment for working with binned data by importing numpy, matplotlib, and scipp libraries. Sets a random seed for reproducible results.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/binned-data/binned-data.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%matplotlib inline\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport scipp as sc\n\nnp.random.seed(1)  # Fixed for reproducibility\n```\n\n----------------------------------------\n\nTITLE: Independent Mask Handling in Datasets\nDESCRIPTION: Shows how masks can be independently managed for different items in a dataset.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/development/internals/concepts.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nmasked1 = da.copy()\nmasked1.masks['x'] = sc.less(x, 1 * sc.units.one)\nmasked2 = da.copy()\nmasked2.masks['x'] = sc.less(x, 2 * sc.units.one)\nassert not sc.identical(masked1, masked2)\nds = sc.Dataset({'a': masked1, 'b': masked2})\nassert not sc.identical(ds['a'].masks['x'], ds['b'].masks['x'])\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Helper Headers and Interface Library in CMake\nDESCRIPTION: This CMake snippet defines the header files for test helpers and creates an interface library called scipp_test_helpers. It sets the include directories to the current directory, making the header files accessible to other targets that link against this library.\nSOURCE: https://github.com/scipp/scipp/blob/main/lib/test/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_FILES random.h test_macros.h test_nans.h test_operations.h\n              test_print_variable.h test_util.h\n)\nadd_library(scipp_test_helpers INTERFACE)\ntarget_include_directories(scipp_test_helpers INTERFACE .)\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up Scipp Repository\nDESCRIPTION: Commands to clone the Scipp repository, update submodules, and create a development Conda environment.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/development/getting-started.rst#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:scipp/scipp.git\ncd scipp\n\n# Update Git submodules\ngit submodule init\ngit submodule update\n\n# Create Conda environment with dependencies and development tools\nmamba env create -f docs/environments/developer.yml\nconda activate scipp-dev\n```\n\n----------------------------------------\n\nTITLE: Using Variable constructor with dtype in C++\nDESCRIPTION: This snippet shows the equivalent Variable constructor syntax that takes dtype as the first argument. This constructor performs the same operation as the makeVariable function but generates more code and is useful for runtime dispatching or Python bindings.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/development/internals/constructing_variables.rst#2025-04-21_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\nVariable(dtype<float>, Dimensions{Dim::X, 5}, Values{}, Variances{});\n```\n\n----------------------------------------\n\nTITLE: Creating a Variable with default-initialized values in C++\nDESCRIPTION: This snippet shows how to create a Variable with default-initialized values. It creates a 1D variable of length 5 along dimension X, with values initialized to [0,0,0,0,0] and no variances.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/development/internals/constructing_variables.rst#2025-04-21_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nmakeVariable<float>(Dimensions{Dim::X, 5});\n```\n\n----------------------------------------\n\nTITLE: Removing an existing Scipp conda environment\nDESCRIPTION: This snippet shows how to remove a previously created Scipp conda environment before creating a fresh one. It ensures you're in the base environment before removal.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/installation.rst#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nconda activate\nconda env remove -n scipp\n```\n\n----------------------------------------\n\nTITLE: Creating JSON Data for Pandas Integration Example\nDESCRIPTION: Creates a string containing JSON-formatted data with units embedded in square brackets in column names, to demonstrate Pandas integration with Scipp.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/reading-and-writing-files.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\njson = '''{{\"A [m]\": {{\"0\": 1, \"1\": 3, \"2\": 5}},\n\"B [m/s]\": {{\"0\": 2, \"1\": 4, \"2\": 6}}}}'''\n```\n\n----------------------------------------\n\nTITLE: In-place Operations\nDESCRIPTION: Demonstrates efficient in-place operations versus copying operations.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/tips-tricks-and-anti-patterns.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nvar = var * 2.0  # makes a copy\nvar *= 2.0  # in-place (faster)\n\nvar = sc.sqrt(var)  # makes a copy\nvar = sc.sqrt(var, out=var)  # in-place (faster)\n```\n\n----------------------------------------\n\nTITLE: Configuring Jupyter Kernel with TBB Malloc and HugePages\nDESCRIPTION: JSON configuration for a Jupyter kernel to use both TBB malloc proxy and explicit HugePages. This extends the previous configuration by adding the TBB_MALLOC_USE_HUGE_PAGES environment variable.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/tips-tricks-and-anti-patterns.ipynb#2025-04-21_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n \"argv\": [\n  \"/home/<username>/mambaforge/envs/myenv/bin/python\",\n  \"-m\",\n  \"ipykernel_launcher\",\n  \"-f\",\n  \"{connection_file}\"\n ],\n \"display_name\": \"Python 3 (ipykernel) with tbbmalloc_proxy\",\n \"language\": \"python\",\n \"env\":{\n   \"LD_PRELOAD\":\"libtbbmalloc_proxy.so.2\",\n   \"TBB_MALLOC_USE_HUGE_PAGES\":\"1\"\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Python Function with NumPy-style Docstring\nDESCRIPTION: Demonstrates the correct format for a Python function with a comprehensive NumPy-style docstring, including sections for description, parameters, returns, raises, see also, and examples.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/development/coding-conventions.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef foo(x: int, y: float) -> float:\n    \"\"\"Short description.\n\n    Long description.\n\n    With multiple paragraphs.\n\n    Warning\n    -------\n    Be careful!\n\n    Parameters\n    ----------\n    x:\n        First input.\n    y:\n        Second input.\n\n    Returns\n    -------\n    :\n        The result.\n\n    Raises\n    ------\n    ValueError\n        If the input is bad.\n    IndexError\n        If some lookup failed.\n\n    See Also\n    --------\n    scipp.fold:\n        For reshaping into multiple dimensions.\n    scipp.flatten:\n        For removing dimensions.\n\n    Examples\n    --------\n    This is how to use it:\n\n      >>> sc.arange('x', 3)\n      <scipp.Variable> (x: 3)      int64  [dimensionless]  [0, 1, 2]\n\n    And also:\n\n      >>> sc.linspace('x', 1, 4, 2)\n      <scipp.Variable> (x: 2)    float64  [dimensionless]  [1, 4]\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Scipp Migration Scripts Naming Convention\nDESCRIPTION: Example showing the naming pattern for Scipp version migration scripts. Scripts are prefixed with 'scipp-<version>-' where <version> indicates the target version being migrated to.\nSOURCE: https://github.com/scipp/scipp/blob/main/tools/migration/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Scipp Version Migration Tools\n```\n\n----------------------------------------\n\nTITLE: Creating Continuous Parameter Data\nDESCRIPTION: Creates a dataset with continuously distributed parameter values for demonstrating binned grouping.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/groupby.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nparam = sc.Variable(dims=['x'], values=np.random.rand(16))\nvalues = sc.Variable(dims=['x', 'y'], values=np.random.rand(16, 16))\nvalues += 1.0 + 5.0 * param\n```\n\n----------------------------------------\n\nTITLE: Equivalent Standard Assertion in Python\nDESCRIPTION: Shows the standard assertion equivalent to scipp.testing.assert_identical, which uses scipp.identical with equal_nan set to True.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/testing.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nassert scipp.identical(a, b, equal_nan=True)\n```\n\n----------------------------------------\n\nTITLE: Creating a Variable with default-initialized values and variances in C++\nDESCRIPTION: This snippet demonstrates explicitly initializing both values and variances to their defaults. It creates a 1D variable of length 5 along dimension X, with values [0,0,0,0,0] and variances [0,0,0,0,0].\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/development/internals/constructing_variables.rst#2025-04-21_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nmakeVariable<float>(Dimensions{Dim::X, 5}, Values{}, Variances{});\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Test Build for Scipp Variable Module\nDESCRIPTION: Configures CMake build settings for the scipp-variable test suite. Sets up test executable with source files, links required libraries, and configures platform-specific compiler options. Includes settings for interprocedural optimization, build exclusion conditions, and sanitizer support.\nSOURCE: https://github.com/scipp/scipp/blob/main/lib/variable/test/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# ~~~\n# SPDX-License-Identifier: BSD-3-Clause\n# Copyright (c) 2023 Scipp contributors (https://github.com/scipp)\n# ~~~\nset(TARGET_NAME \"scipp-variable-test\")\nadd_dependencies(all-tests ${TARGET_NAME})\nadd_executable(\n  ${TARGET_NAME}\n  accumulate_test.cpp\n  arithmetic_test.cpp\n  astype_test.cpp\n  bin_array_model_test.cpp\n  bin_util_test.cpp\n  comparison_test.cpp\n  concat_test.cpp\n  copy_test.cpp\n  creation_test.cpp\n  cumulative_test.cpp\n  equals_nan_test.cpp\n  hyperbolic_test.cpp\n  linalg_test.cpp\n  math_test.cpp\n  mean_test.cpp\n  operations_test.cpp\n  rebin_test.cpp\n  reduce_logical_test.cpp\n  reduce_various_test.cpp\n  shape_test.cpp\n  slice_test.cpp\n  sort_test.cpp\n  inv_test.cpp\n  special_values_test.cpp\n  subspan_view_test.cpp\n  sum_test.cpp\n  test_variables.cpp\n  to_unit_test.cpp\n  transform_test.cpp\n  transform_binary_test.cpp\n  transform_test_helpers.h\n  transform_test_helpers.cpp\n  transform_unary_test.cpp\n  trigonometry_test.cpp\n  util_test.cpp\n  variable_bin_test.cpp\n  variable_comparison_test.cpp\n  variable_custom_type_test.cpp\n  variable_keyword_args_constructor_test.cpp\n  variable_scalar_accessors_test.cpp\n  variable_structure_test.cpp\n  variable_test.cpp\n)\ntarget_link_libraries(\n  ${TARGET_NAME} LINK_PRIVATE scipp-variable scipp_test_helpers\n  GTest::gtest_main\n)\n\nif(WIN32)\n  target_compile_options(${TARGET_NAME} PRIVATE \"/bigobj\")\nendif()\n\nset_property(\n  TARGET ${TARGET_NAME} PROPERTY INTERPROCEDURAL_OPTIMIZATION\n                                 ${INTERPROCEDURAL_OPTIMIZATION_TESTS}\n)\nset_property(\n  TARGET ${TARGET_NAME} PROPERTY EXCLUDE_FROM_ALL $<NOT:$<BOOL:${FULL_BUILD}>>\n)\nif(SANITIZERS)\n  add_sanitizers(${TARGET_NAME})\nendif()\nscipp_test(${TARGET_NAME} variable)\n```\n\n----------------------------------------\n\nTITLE: Creating Event Table in Scipp\nDESCRIPTION: Creates a simple table of events as a Scipp variable with a single column of float values.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/binned-data/computation.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport scipp as sc\n\ntable = sc.array(\n    dims=['event'], values=[0, 1, 3, 1, 1, 1, 42, 1, 1, 1, 1, 1], dtype='float64'\n)\nsc.table(table)\n```\n\n----------------------------------------\n\nTITLE: Accessing Values from a Specific Bin\nDESCRIPTION: Accesses the contents of a specific bin from the binned data structure, showing the original table entries that fall within that bin.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/binned-data/binned-data.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nbinned.values[0]\n```\n\n----------------------------------------\n\nTITLE: Configuring Accumulate Benchmark Executable in CMake\nDESCRIPTION: Sets up the accumulate_benchmark executable, adds it as a dependency to all-benchmarks, and links it with the scipp-variable library and benchmark framework.\nSOURCE: https://github.com/scipp/scipp/blob/main/lib/benchmark/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(accumulate_benchmark accumulate_benchmark.cpp)\nadd_dependencies(all-benchmarks accumulate_benchmark)\ntarget_link_libraries(\n  accumulate_benchmark LINK_PRIVATE scipp-variable benchmark::benchmark_main\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Jupyter Kernels\nDESCRIPTION: Command to list available Jupyter kernels on the system.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/tips-tricks-and-anti-patterns.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ jupyter kernelspec list\n```\n\n----------------------------------------\n\nTITLE: Displaying Updated Flares Data\nDESCRIPTION: Shows the flares data array after adding the duration coordinate.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/tutorials/solar_flares.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nflares\n```\n\n----------------------------------------\n\nTITLE: Positional Indexing for One-Dimensional Objects in Scipp\nDESCRIPTION: Shows the exception to the dimension label rule for unambiguous 1D objects, where dimension label can be omitted.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/slicing.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nvar1d = sc.linspace(dim='x', start=0.1, stop=0.2, num=5)\nvar1d[1]\n```\n\n----------------------------------------\n\nTITLE: Displaying Binned Data with scipp.show in Python\nDESCRIPTION: Shows how to use sc.show() with binned data, representing bin contents as smaller blocks.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/representations-and-tables.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nsc.show(sc.data.binned_xy(100, 3, 2))\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building the Scipp-Units Library in CMake\nDESCRIPTION: This CMake script sets up the scipp-units library, configuring source files, includes, and build options. It handles both static and dynamic library building, sets up dependencies like LLNL-Units, configures installation, and manages optional features like precompiled headers and code coverage.\nSOURCE: https://github.com/scipp/scipp/blob/main/lib/units/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# ~~~\n# SPDX-License-Identifier: BSD-3-Clause\n# Copyright (c) 2023 Scipp contributors (https://github.com/scipp)\n# ~~~\nset(TARGET_NAME \"scipp-units\")\nset(INC_FILES include/scipp/units/except.h include/scipp/units/string.h\n              include/scipp/units/unit.h\n)\n\nset(SRC_FILES dim.cpp except.cpp string.cpp unit.cpp)\n\nset(LINK_TYPE \"STATIC\")\nif(DYNAMIC_LIB)\n  set(LINK_TYPE \"SHARED\")\nendif(DYNAMIC_LIB)\n\nadd_library(${TARGET_NAME} ${LINK_TYPE} ${INC_FILES} ${SRC_FILES})\ngenerate_export_header(${TARGET_NAME})\ntarget_compile_definitions(\n  ${TARGET_NAME} PUBLIC SCIPP_UNITS_${SCIPP_UNITS_SYSTEM}\n)\ninclude_directories(SYSTEM ${GMOCK_INCLUDE_DIR} ${GTEST_INCLUDE_DIR})\ntarget_link_libraries(${TARGET_NAME} PUBLIC scipp-common LLNL-Units::LLNL-Units)\ntarget_include_directories(\n  ${TARGET_NAME}\n  PUBLIC $<INSTALL_INTERFACE:include>\n         $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\n         $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>\n)\n\nset_target_properties(${TARGET_NAME} PROPERTIES POSITION_INDEPENDENT_CODE TRUE)\nset_target_properties(${TARGET_NAME} PROPERTIES EXPORT_NAME units)\n\nif(PRECOMPILED_HEADERS)\n  target_precompile_headers(${TARGET_NAME} PUBLIC ${INC_FILES})\nendif()\n\nadd_subdirectory(test)\n\nscipp_install_component(TARGET ${TARGET_NAME})\n\nif(COVERAGE)\n  append_coverage_compiler_flags()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Implementing Workaround by Discarding Variances\nDESCRIPTION: Demonstrates a workaround that removes variances from the broadcast term, with an explicit warning that this approach is incorrect but mimics the previous behavior.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/about/migration/23-01.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nlogger.warning(\n    \"\"\"ATTENTION:\n    Statistical uncertainties of the normalization term were IGNORED.\n    This is probably incorrect.\"\"\"\n)\nnorm.variances = None\nvar / norm\nbinned / norm\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for Coverage Testing\nDESCRIPTION: This snippet lists the Python package dependencies required for coverage testing in the project. It includes 'coverage' with TOML support and 'pytest-cov', along with their specific versions.\nSOURCE: https://github.com/scipp/scipp/blob/main/requirements/coverage.txt#2025-04-21_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n-r test.txt\ncoverage[toml]==7.7.0\n    # via pytest-cov\npytest-cov==6.0.0\n    # via -r coverage.in\n```\n\n----------------------------------------\n\nTITLE: Installing Scipp using pip\nDESCRIPTION: This command installs the basic Scipp package from PyPI using pip without optional dependencies.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/installation.rst#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\npip install scipp\n```\n\n----------------------------------------\n\nTITLE: Installing plopp package using pip\nDESCRIPTION: Command to install the plopp package using pip, which is required for plotting in Scipp.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/plotting.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install plopp\n```\n\n----------------------------------------\n\nTITLE: Configuring Pytest for Scipp Assertions in Python\nDESCRIPTION: Configuration code to be added to conftest.py for enabling pytest to recognize and enhance Scipp's custom assertions.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/testing.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npytest.register_assert_rewrite('scipp.testing.assertions')\n```\n\n----------------------------------------\n\nTITLE: Alternative Editable Install Approach for Scipp\nDESCRIPTION: Alternative commands to configure an editable install using tox for both C++ library building and Python configuration.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/development/getting-started.rst#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ntox -e lib\ntox -e editable\nconda develop src\n```\n\n----------------------------------------\n\nTITLE: Demonstrating invalid attributes in xarray operations\nDESCRIPTION: This example illustrates how attributes in xarray can lead to misleading results after operations. A DataArray with temperature data in Kelvin is created with appropriate attributes, but after applying np.power, the units and long_name attributes remain unchanged despite no longer being valid.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/development/adr/0016-do-not-support-attrs.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport xarray as xr\n\nda = xr.DataArray(np.arange(10), coords=(('x', np.arange(10)),))\nda.coords['x'].attrs['units'] = 'm'\nda.coords['x'].attrs['long_name'] = 'Distance'\nda.attrs['units'] = 'K'\nda.attrs['long_name'] = 'Temperature'\n\nnp.power(da, 2).plot()\n```\n\n----------------------------------------\n\nTITLE: Visualizing Coordinate Transformation Graph in Scipp\nDESCRIPTION: This snippet creates a transformation graph dictionary and visualizes it using Scipp's show_graph function.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/coordinate-transformations.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ngraph = {'x^2': x_square}\nsc.show_graph(graph)\n```\n\n----------------------------------------\n\nTITLE: Setting Explicit HugePages\nDESCRIPTION: Command to set the number of explicit HugePages. This example allocates 1024 pages of 2MB each, totaling 2GB of HugePages memory.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/tips-tricks-and-anti-patterns.ipynb#2025-04-21_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n# echo 1024 > /sys/kernel/mm/hugepages/hugepages-2048kB/nr_hugepages\n```\n\n----------------------------------------\n\nTITLE: Setting C++ Standard in CMake for Scipp Project\nDESCRIPTION: This snippet sets the C++ standard to 17 if not already defined, and ensures it is required and extensions are disabled.\nSOURCE: https://github.com/scipp/scipp/blob/main/lib/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT DEFINED CMAKE_CXX_STANDARD)\n  set(CMAKE_CXX_STANDARD 17)\nendif(NOT DEFINED CMAKE_CXX_STANDARD)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_CXX_EXTENSIONS OFF)\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Mask Conflicts in DataArray Assignment\nDESCRIPTION: Demonstrates how Scipp prevents inconsistent mask updates when trying to assign values to slices where the mask dimensions don't align with the slice dimensions.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/slicing.ipynb#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    a['y', 0] = val\nexcept sc.DimensionError as e:\n    print(e)\n```\n\n----------------------------------------\n\nTITLE: Running Undefined Behavior Sanitizer Tests in Scipp\nDESCRIPTION: Shell script that builds and runs all tests with Undefined-Behavior Sanitizer enabled to detect undefined behavior issues.\nSOURCE: https://github.com/scipp/scipp/blob/main/tools/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nrun_ubsan.sh\n```\n\n----------------------------------------\n\nTITLE: Enhanced hist Function Signature with Dimension Parameter in Python\nDESCRIPTION: The proposed updated function signature for the hist function that includes the new 'dim' parameter. This parameter allows explicit specification of which dimension(s) should be replaced by the operation, with a default behavior of using the dimensions of the coordinates.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/development/adr/0018-bin-hist-reduction-dims.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef hist(\n    x: Variable | DataArray,\n    arg_dict: dict[str, int | Variable] | None = None,\n    /,\n    *,\n    dim: tuple[str, ...] | str | None = None,\n    **kwargs: int | Variable,\n) -> DataArray: ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler and Build Settings for Scipp\nDESCRIPTION: Sets up compiler flags, optimization settings, and various build options for different platforms.\nSOURCE: https://github.com/scipp/scipp/blob/main/lib/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT WIN32)\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fno-omit-frame-pointer\")\n  add_compile_options(\n    -Wall\n    -Wextra\n    -Wpedantic\n    -Wunused\n    -Wshadow\n    -Winit-self\n    -Wpointer-arith\n    -Woverloaded-virtual\n    -Wold-style-cast\n    -Wcast-qual\n    -Wcast-align\n    -Wno-unknown-warning-option # Avoiding clang warnings about unknown warning\n    -Werror=attributes\n    -Werror=maybe-uninitialized\n    -Werror=uninitialized\n    -Werror=return-type\n  )\n  add_compile_options(\n    $<$<COMPILE_LANGUAGE:CXX>:-Woverloaded-virtual>\n    $<$<COMPILE_LANGUAGE:CXX>:-fno-operator-names>\n  )\nelse()\n  add_compile_options(\n    $<$<COMPILE_LANGUAGE:CXX>:/bigobj> /EHsc /constexpr:steps2000000\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Logging Info Message to Scipp Widget in Python\nDESCRIPTION: This snippet logs an info message that will appear in both the widget and error stream.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/logging.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nlogger.info('This shows up in the widget and error stream.')\n```\n\n----------------------------------------\n\nTITLE: Mathematical Formulas for Uncertainty Propagation\nDESCRIPTION: Table of mathematical formulas showing how variances propagate through different operations. Includes formulas for basic arithmetic operations, absolute value, square root, exponential, and logarithmic functions. All formulas assume uncorrelated data.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/error-propagation.rst#2025-04-21_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\n-a           → σ²_a\n|a|          → σ²_a\n√a           → (1/4)(σ²_a/a)\na + b        → σ²_a + σ²_b\na - b        → σ²_a + σ²_b\na * b        → σ²_a*b² + σ²_b*a²\na / b        → (σ²_a + σ²_b*(a²/b²))/b²\ne^a          → e^(2a)*σ²_a\nlog(a)       → σ²_a/a²\nlog_10(a)    → σ²_a*log²(10)/a²\n```\n\n----------------------------------------\n\nTITLE: Running Scipp Tests with CTest\nDESCRIPTION: Command to run all Scipp tests using CTest with the predefined test preset.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/development/getting-started.rst#2025-04-21_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nctest --preset test\n```\n\n----------------------------------------\n\nTITLE: Sphinx autosummary directive for Scipp Auxiliary Containers\nDESCRIPTION: Sphinx configuration that generates documentation for Scipp's auxiliary container classes such as Bins, Coords, and GroupBy containers using a custom class template.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/classes.rst#2025-04-21_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. autosummary::\n   :toctree: ../generated/classes\n   :template: scipp-class-template.rst\n   :recursive:\n\n   Bins\n   Coords\n   GroupByDataArray\n   GroupByDataset\n   Lookup\n   Masks\n```\n\n----------------------------------------\n\nTITLE: Logging Info Message with Scipp Logger in Python\nDESCRIPTION: This code logs an info message using the configured Scipp logger.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/logging.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nlogger.info('The stream handler simply prints messages')\n```\n\n----------------------------------------\n\nTITLE: Configuring Legacy Histogram Benchmark Executable in CMake with Exclusion\nDESCRIPTION: Sets up the legacy_histogram_benchmark executable with EXCLUDE_FROM_ALL flag, meaning it won't be built by default. The dependency to all-benchmarks is commented out. Links with scipp-core library.\nSOURCE: https://github.com/scipp/scipp/blob/main/lib/benchmark/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(\n  legacy_histogram_benchmark EXCLUDE_FROM_ALL legacy_histogram_benchmark.cpp\n)\n# add_dependencies(all-benchmarks legacy_histogram_benchmark)\ntarget_link_libraries(\n  legacy_histogram_benchmark LINK_PRIVATE scipp-core benchmark::benchmark_main\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Paths in CMake\nDESCRIPTION: Sets up installation paths for the project, with special handling for conda-build environments and scikit-build. Configures Python module directories and C++ library installation locations.\nSOURCE: https://github.com/scipp/scipp/blob/main/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(GNUInstallDirs)\nif(DEFINED ENV{SP_DIR}) # Defined by conda-build\n  file(TO_CMAKE_PATH $ENV{SP_DIR}/scipp PYTHONDIR)\n  file(TO_CMAKE_PATH $ENV{SP_DIR} ARCHIVEDIR)\nelse()\n  set(PYTHONDIR scipp)\n  set(ARCHIVEDIR .)\nendif()\nset(INCLUDEDIR ${CMAKE_INSTALL_INCLUDEDIR})\n\nif(SKBUILD)\n  set(PYTHONDIR .)\n  # scikit-build will not include files outside the directory of the Python\n  # module, ensure our shared objects are installed there.\n  set(RELATIVE_LIB \".\")\n  # Note that we do not install src/scipp when making a `pip` package. It will\n  # simply use the source directory directly. C++ libraries get installed into\n  # the source dir.\nelse()\n  install(DIRECTORY \"src/scipp/\" DESTINATION ${PYTHONDIR})\n  set(RELATIVE_LIB \"..\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Scipp Core Library in CMake\nDESCRIPTION: Creates and configures the scipp-core library target with source files, include paths, and dependencies. The build supports both static and dynamic linking options, with conditional TBB integration if available.\nSOURCE: https://github.com/scipp/scipp/blob/main/lib/core/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(TARGET_NAME \"scipp-core\")\nset(INC_FILES\n    include/scipp/core/aligned_allocator.h\n    include/scipp/core/dict.h\n    include/scipp/core/dimensions.h\n    include/scipp/core/dtype.h\n    include/scipp/core/element_array.h\n    include/scipp/core/element_array_view.h\n    include/scipp/core/histogram.h\n    include/scipp/core/memory_pool.h\n    include/scipp/core/multi_index.h\n    include/scipp/core/parallel-fallback.h\n    include/scipp/core/parallel-tbb.h\n    include/scipp/core/slice.h\n    include/scipp/core/spatial_transforms.h\n    include/scipp/core/tag_util.h\n    include/scipp/core/transform_common.h\n    include/scipp/core/value_and_variance.h\n    include/scipp/core/values_and_variances.h\n    include/scipp/core/view_index.h\n    include/scipp/core/element/arg_list.h\n    include/scipp/core/element/arithmetic.h\n    include/scipp/core/element/comparison.h\n    include/scipp/core/element/event_operations.h\n    include/scipp/core/element/geometric_operations.h\n    include/scipp/core/element/histogram.h\n    include/scipp/core/element/hyperbolic.h\n    include/scipp/core/element/logical.h\n    include/scipp/core/element/math.h\n    include/scipp/core/element/rebin.h\n    include/scipp/core/element/reduction.h\n    include/scipp/core/element/sort.h\n    include/scipp/core/element/special_values.h\n    include/scipp/core/element/trigonometry.h\n    include/scipp/core/element/util.h\n)\n\nset(SRC_FILES\n    dimensions.cpp\n    dict.cpp\n    dtype.cpp\n    element_array_view.cpp\n    except.cpp\n    multi_index.cpp\n    sizes.cpp\n    slice.cpp\n    strides.cpp\n    string.cpp\n    subbin_sizes.cpp\n    view_index.cpp\n)\n\nset(LINK_TYPE \"STATIC\")\nif(DYNAMIC_LIB)\n  set(LINK_TYPE \"SHARED\")\nendif(DYNAMIC_LIB)\n\nadd_library(${TARGET_NAME} ${LINK_TYPE} ${INC_FILES} ${SRC_FILES})\ngenerate_export_header(${TARGET_NAME})\ntarget_link_libraries(\n  ${TARGET_NAME} PUBLIC scipp-common scipp-units Boost::headers Eigen3::Eigen\n)\nif(TBB_FOUND)\n  target_link_libraries(${TARGET_NAME} PUBLIC TBB::tbb)\nendif()\n\n# Include tcb/span as system header to avoid compiler warnings.\ntarget_include_directories(\n  ${TARGET_NAME}\n  PUBLIC $<INSTALL_INTERFACE:include>\n         $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\n         $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/include>\n         $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>\n)\n\nset_target_properties(${TARGET_NAME} PROPERTIES POSITION_INDEPENDENT_CODE TRUE)\nset_target_properties(${TARGET_NAME} PROPERTIES EXPORT_NAME core)\n\nif(PRECOMPILED_HEADERS)\n  target_precompile_headers(\n    ${TARGET_NAME} PUBLIC include/scipp/core/element_array.h\n    include/scipp/core/element_array_view.h include/scipp/core/multi_index.h\n    ${CMAKE_CURRENT_BINARY_DIR}/include/scipp/core/parallel.h\n  )\nendif()\n\nadd_subdirectory(test)\n\nscipp_install_component(TARGET ${TARGET_NAME} INSTALL_GENERATED)\n\nif(COVERAGE)\n  append_coverage_compiler_flags()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Full Module Documentation Template in Jinja2/RST\nDESCRIPTION: Comprehensive documentation template that defines the structure for documenting Python modules using Sphinx and reStructuredText. Includes sections for module attributes, functions, classes, exceptions, and submodules with autosummary directives.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/_templates/scipp-module-template.rst#2025-04-21_snippet_0\n\nLANGUAGE: jinja2\nCODE:\n```\n{{ fullname | escape | underline}}\n\n.. automodule:: {{ fullname }}\n\n   {% block attributes %}\n   {% if attributes %}\n   .. rubric:: {{ _('Module Attributes') }}\n\n   .. autosummary::\n      :toctree:\n   {% for item in attributes %}\n      {{ item }}\n   {%- endfor %}\n   {% endif %}\n   {% endblock %}\n\n   {% block functions %}\n   {% if functions %}\n   .. rubric:: {{ _('Functions') }}\n\n   .. autosummary::\n      :toctree:\n   {% for item in functions %}\n      {{ item }}\n   {%- endfor %}\n   {% endif %}\n   {% endblock %}\n\n   {% block classes %}\n   {% if classes %}\n   .. rubric:: {{ _('Classes') }}\n\n   .. autosummary::\n      :toctree:\n      :template: scipp-class-template.rst\n   {% for item in classes %}\n      {{ item }}\n   {%- endfor %}\n   {% endif %}\n   {% endblock %}\n\n   {% block exceptions %}\n   {% if exceptions %}\n   .. rubric:: {{ _('Exceptions') }}\n\n   .. autosummary::\n      :toctree:\n   {% for item in exceptions %}\n      {{ item }}\n   {%- endfor %}\n   {% endif %}\n   {% endblock %}\n\n{% block modules %}\n{% if modules %}\n.. rubric:: Modules\n\n.. autosummary::\n   :toctree:\n   :template: scipp-module-template.rst\n   :recursive:\n{% for item in modules %}\n   {{ item }}\n{%- endfor %}\n{% endif %}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Setting Plot Axis Limits Using Scipp Slicing in Python\nDESCRIPTION: This code demonstrates how to set axis limits when plotting Scipp arrays using generic slicing functionality and label-based indexing.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/faq.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\narray.plot()  # plot with full x range\narray['x', 100:200].plot()  # plot 100 points starting at offset 100\nstart = 1.2 * sc.Unit('m')\nstop = 1.3 * sc.Unit('m')\narray['x', start:stop].plot()  # plot everything between 1.2 and 1.3 meters\n```\n\n----------------------------------------\n\nTITLE: Displaying Unit Representation\nDESCRIPTION: Shows the internal representation of the scaled unit using repr.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/units.ipynb#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nrepr(sc.Unit('dogyear'))\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Scipp After C++ Changes\nDESCRIPTION: Command to rebuild Scipp after making changes to C++ code when using an editable install.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/development/getting-started.rst#2025-04-21_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncmake --build --preset build\n```\n\n----------------------------------------\n\nTITLE: Configuring Scipp Variable Library Target in CMake\nDESCRIPTION: This CMake script sets up the scipp-variable library target. It defines source and header files, configures the library type (static or shared), sets include directories, and specifies link dependencies.\nSOURCE: https://github.com/scipp/scipp/blob/main/lib/variable/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(TARGET_NAME \"scipp-variable\")\nset(INC_FILES\n    ${variable_INC_FILES}\n    include/scipp/variable/astype.h\n    include/scipp/variable/arithmetic.h\n    # ... other include files ...\n    include/scipp/variable/visit.h\n)\n\nset(SRC_FILES\n    ${variable_SRC_FILES}\n    arithmetic.cpp\n    astype.cpp\n    # ... other source files ...\n    variable_instantiate_view_elements.cpp\n)\n\nset(LINK_TYPE \"STATIC\")\nif(DYNAMIC_LIB)\n  set(LINK_TYPE \"SHARED\")\nendif(DYNAMIC_LIB)\n\nadd_library(${TARGET_NAME} ${LINK_TYPE} ${INC_FILES} ${SRC_FILES})\ngenerate_export_header(${TARGET_NAME})\ntarget_compile_definitions(\n  ${TARGET_NAME} PRIVATE SCIPP_EXPORT=SCIPP_VARIABLE_EXPORT\n)\ntarget_link_libraries(${TARGET_NAME} PUBLIC scipp-core)\n\ntarget_include_directories(\n  ${TARGET_NAME}\n  PUBLIC $<INSTALL_INTERFACE:include>\n         $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\n         $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/include>\n         $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>\n)\n\nset_target_properties(${TARGET_NAME} PROPERTIES POSITION_INDEPENDENT_CODE TRUE)\nset_target_properties(${TARGET_NAME} PROPERTIES EXPORT_NAME variable)\n\nif(PRECOMPILED_HEADERS)\n  target_precompile_headers(\n    ${TARGET_NAME} PUBLIC include/scipp/variable/transform.h\n    include/scipp/variable/variable.h\n  )\nendif()\n\nadd_subdirectory(test)\n\nscipp_install_component(TARGET ${TARGET_NAME} INSTALL_GENERATED)\n\nif(COVERAGE)\n  append_coverage_compiler_flags()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Toctree for Scipp Tutorials in reStructuredText\nDESCRIPTION: This snippet defines a table of contents (toctree) for Scipp tutorials using reStructuredText. It sets the maximum depth to 2 and includes links to two tutorial pages: 'from-tabular-data-to-binned-data' and 'solar_flares'.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/tutorials/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   from-tabular-data-to-binned-data\n   solar_flares\n```\n\n----------------------------------------\n\nTITLE: Adding Scipp Datetime Variables (Invalid Operation)\nDESCRIPTION: Demonstrates an invalid operation of adding two Scipp datetime Variables, which is not supported.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/dtype.ipynb#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\na + b\n```\n\n----------------------------------------\n\nTITLE: Creating CSV Data for Scipp Example\nDESCRIPTION: Creates a string containing CSV-formatted data with units embedded in square brackets in the header, to demonstrate the CSV loading capabilities of Scipp.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/reading-and-writing-files.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncsv_content = '''a [m],b [s],c\n1,5,9\n2,6,10\n3,7,11\n4,8,12'''\n```\n\n----------------------------------------\n\nTITLE: Specifying Scipp Install Directory for CMake\nDESCRIPTION: Command to specify the Scipp installation directory when configuring a project that uses Scipp as a dependency.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/development/getting-started.rst#2025-04-21_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ncmake -DCMAKE_PREFIX_PATH=<your_scipp_install_dir>\n```\n\n----------------------------------------\n\nTITLE: Defining Sphinx AutoModule Template with Jinja2\nDESCRIPTION: A Jinja2 template for Sphinx's autodoc extension that creates documentation for Python modules. It generates a heading from the module name and includes an automodule directive to import documentation from the module's docstrings.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/_templates/scipp-sphinxext-template.rst#2025-04-21_snippet_0\n\nLANGUAGE: jinja2\nCODE:\n```\n{{ fullname | escape | underline}}\n\n.. automodule:: {{ fullname }}\n```\n\n----------------------------------------\n\nTITLE: Defining Element-wise Operations in Scipp Core Namespace\nDESCRIPTION: Example showing how to define a reusable element-wise operation in the scipp::core::element namespace. Uses arg_list to specify supported type combinations and transform_flags to disable variance on the first argument.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/development/internals/transform.rst#2025-04-21_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\n// In scipp/core/include/scipp/core/element/my_op.h:\nnamespace scipp::core::element {\nconstexpr auto my_op = overloaded{\n    arg_list<std::tuple<double, int64_t>, std::tuple<double, int32_t>>,\n    transform_flags::expect_no_variance_arg<0>,\n    [](const auto &a, const auto &b) { return a + b; }};\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Scipp with all optional dependencies using pip\nDESCRIPTION: This command installs Scipp from PyPI with all optional dependencies, including libraries for interactive plotting in Jupyter.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/installation.rst#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\npip install scipp[all]\n```\n\n----------------------------------------\n\nTITLE: Configuring Bin Benchmark Executable in CMake\nDESCRIPTION: Sets up the bin_benchmark executable, adds it as a dependency to all-benchmarks, and links it with the required libraries.\nSOURCE: https://github.com/scipp/scipp/blob/main/lib/benchmark/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(bin_benchmark bin_benchmark.cpp)\nadd_dependencies(all-benchmarks bin_benchmark)\ntarget_link_libraries(\n  bin_benchmark LINK_PRIVATE scipp-dataset benchmark::benchmark_main\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Python dependencies in pyproject.toml\nDESCRIPTION: The pyproject.toml file defines build requirements for Python Wheels, runtime requirements, and 'extras' for the pip package. It is a key file for managing Python dependencies in the project.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/development/dependencies.rst#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\npyproject.toml\n```\n\n----------------------------------------\n\nTITLE: Configuring Scipp Common Test Executable in CMake\nDESCRIPTION: This CMake snippet configures the 'scipp-common-test' executable. It sets up the target, specifies source files, links required libraries, and configures build properties such as interprocedural optimization and conditional exclusion from the build.\nSOURCE: https://github.com/scipp/scipp/blob/main/lib/common/test/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(TARGET_NAME \"scipp-common-test\")\nadd_dependencies(all-tests ${TARGET_NAME})\nadd_executable(\n  ${TARGET_NAME} index_test.cpp isarange_test.cpp islinspace_test.cpp\n                 numeric_test.cpp\n)\ntarget_link_libraries(\n  ${TARGET_NAME} LINK_PRIVATE scipp-common scipp_test_helpers GTest::gtest_main\n)\nset_property(\n  TARGET ${TARGET_NAME} PROPERTY INTERPROCEDURAL_OPTIMIZATION\n                                 ${INTERPROCEDURAL_OPTIMIZATION_TESTS}\n)\nset_property(\n  TARGET ${TARGET_NAME} PROPERTY EXCLUDE_FROM_ALL $<NOT:$<BOOL:${FULL_BUILD}>>\n)\nif(SANITIZERS)\n  add_sanitizers(${TARGET_NAME})\nendif()\nscipp_test(${TARGET_NAME} common)\n```\n\n----------------------------------------\n\nTITLE: Instantiating Custom Data Types in Scipp\nDESCRIPTION: To add a new dtype to Scipp, use the INSTANTIATE_VARIABLE macro in the scipp::variable namespace. The first argument is the display name used for Python bindings, and the second is the C++ type. This must be placed in an implementation file, not a header.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/development/internals/customizing.rst#2025-04-21_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nINSTANTIATE_VARIABLE(\"display_name\", CppType)\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries\nDESCRIPTION: Basic imports needed for working with Scipp data structures.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/data-structures/data-structures.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport scipp as sc\n```\n\n----------------------------------------\n\nTITLE: Configuring Groupby Benchmark Executable in CMake\nDESCRIPTION: Sets up the groupby_benchmark executable, adds it as a dependency to all-benchmarks, and links it with the required libraries.\nSOURCE: https://github.com/scipp/scipp/blob/main/lib/benchmark/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(groupby_benchmark groupby_benchmark.cpp)\nadd_dependencies(all-benchmarks groupby_benchmark)\ntarget_link_libraries(\n  groupby_benchmark LINK_PRIVATE scipp-dataset benchmark::benchmark_main\n)\n```\n\n----------------------------------------\n\nTITLE: Standard Setup Commands for Scipp Development\nDESCRIPTION: Basic commands for cloning the repository, setting up the development environment, running pre-commit hooks, building and testing the C++ components, and configuring an editable Python install.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/development/getting-started.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Get the code\ngit clone git@github.com:scipp/scipp.git && cd scipp\ngit submodule init\ngit submodule update\n\n# Setup dev env\nmamba env create -f docs/environments/developer.yml\nconda activate scipp-dev\npre-commit install\npre-commit run --all-files\n\n# Build, install, and run C++ tests\ncmake --preset base\ncmake --build --preset build\nctest --preset test\n\n# Setup editable install and run Python tests\ntox -e editable\nconda develop src\npython -m pytest\n```\n\n----------------------------------------\n\nTITLE: In-place Transformation with Custom Unit Handling in Scipp\nDESCRIPTION: Example of using transform_in_place to modify the first variable by applying a bitwise AND operation. Uses overloaded lambda to provide special unit handling that enforces matching units.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/development/internals/transform.rst#2025-04-21_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\ntransform_in_place<std::tuple<bool>>(\n    a, b,\n    overloaded{[](auto &a_, const auto &b_) { a &= b; },\n               [](const units::Unit &a, const units::Unit &b) {\n                 if (a != b)\n                   throw std::runtime_error(\"Unit must match\");\n               }});\n```\n\n----------------------------------------\n\nTITLE: Inefficient Loop Example\nDESCRIPTION: Demonstrates an inefficient way to process images using a loop.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/tips-tricks-and-anti-patterns.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfor i in range(len(images.values) - 1):\n    images['image', i] -= images['image', i + 1]\n```\n\n----------------------------------------\n\nTITLE: Configuring Scipp Dataset Library Build in CMake\nDESCRIPTION: This CMake script configures the build for the 'scipp-dataset' library. It sets up source files, include directories, and linking options. The script also handles installation, export settings, and conditional compilation for coverage analysis.\nSOURCE: https://github.com/scipp/scipp/blob/main/lib/dataset/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# ~~~\n# SPDX-License-Identifier: BSD-3-Clause\n# Copyright (c) 2023 Scipp contributors (https://github.com/scipp)\n# ~~~\nset(TARGET_NAME \"scipp-dataset\")\nset(INC_FILES\n    ${dataset_INC_FILES}\n    include/scipp/dataset/astype.h\n    include/scipp/dataset/bin.h\n    include/scipp/dataset/bins.h\n    include/scipp/dataset/counts.h\n    include/scipp/dataset/dataset.h\n    include/scipp/dataset/dataset_util.h\n    include/scipp/dataset/except.h\n    include/scipp/dataset/extract.h\n    include/scipp/dataset/groupby.h\n    include/scipp/dataset/histogram.h\n    include/scipp/dataset/hyperbolic.h\n    include/scipp/dataset/math.h\n    include/scipp/dataset/mean.h\n    include/scipp/dataset/nanmean.h\n    include/scipp/dataset/rebin.h\n    include/scipp/dataset/shape.h\n    include/scipp/dataset/special_values.h\n    include/scipp/dataset/sized_dict_forward.h\n    include/scipp/dataset/sized_dict.h\n    include/scipp/dataset/slice.h\n    include/scipp/dataset/sort.h\n    include/scipp/dataset/string.h\n    include/scipp/dataset/to_unit.h\n    include/scipp/dataset/util.h\n)\n\nset(SRC_FILES\n    arithmetic.cpp\n    astype.cpp\n    bin.cpp\n    bin_detail.cpp\n    bins.cpp\n    counts.cpp\n    data_array.cpp\n    dataset.cpp\n    except.cpp\n    extract.cpp\n    groupby.cpp\n    histogram.cpp\n    mean.cpp\n    nanmean.cpp\n    operations.cpp\n    rebin.cpp\n    shape.cpp\n    sized_dict.cpp\n    slice.cpp\n    sort.cpp\n    string.cpp\n    to_unit.cpp\n    util.cpp\n    variable_instantiate_bin_elements.cpp\n    variable_instantiate_dataset.cpp\n    variable_reduction.cpp\n    ${dataset_SRC_FILES}\n)\n\nset(LINK_TYPE \"STATIC\")\nif(DYNAMIC_LIB)\n  set(LINK_TYPE \"SHARED\")\nendif(DYNAMIC_LIB)\n\nadd_library(${TARGET_NAME} ${LINK_TYPE} ${INC_FILES} ${SRC_FILES})\ngenerate_export_header(${TARGET_NAME})\n# SCIPP_EXPORT is used in macros defined in variable/\ntarget_compile_definitions(\n  ${TARGET_NAME} PRIVATE SCIPP_EXPORT=SCIPP_DATASET_EXPORT\n)\ntarget_link_libraries(${TARGET_NAME} PUBLIC scipp-variable)\n\ntarget_include_directories(\n  ${TARGET_NAME}\n  PUBLIC $<INSTALL_INTERFACE:include>\n         $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\n         $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>\n         $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/include>\n         $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>\n)\n\nset_target_properties(${TARGET_NAME} PROPERTIES POSITION_INDEPENDENT_CODE TRUE)\nset_target_properties(${TARGET_NAME} PROPERTIES EXPORT_NAME dataset)\nadd_subdirectory(test)\n\nscipp_install_component(TARGET ${TARGET_NAME} INSTALL_GENERATED)\n\nif(COVERAGE)\n  append_coverage_compiler_flags()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Project Configuration with Platform-Specific Settings in CMake\nDESCRIPTION: Configures the Scipp project with version information and adds platform-specific settings. Includes special handling for AppleClang 15+ which requires a specific linker option.\nSOURCE: https://github.com/scipp/scipp/blob/main/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nproject(\n  scipp\n  VERSION ${SCIPP_VERSION_CMAKE}\n  LANGUAGES CXX\n)\nadd_definitions(-DSCIPP_VERSION=\"${SCIPP_VERSION_PEP440}\")\n\nif(SKBUILD)\n  # AppleClang 15 changed linking order\n  # https://developer.apple.com/documentation/xcode-release-notes/xcode-15-release-notes#Linking\n  if(APPLE AND CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 15.0)\n    message(STATUS \"Building on macOS with Clang 15 or newer\")\n    add_link_options(\"-ld_classic\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Variable Benchmark Executable in CMake\nDESCRIPTION: Sets up the variable_benchmark executable, adds it as a dependency to all-benchmarks, and links it with the scipp-variable library and benchmark framework.\nSOURCE: https://github.com/scipp/scipp/blob/main/lib/benchmark/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(variable_benchmark variable_benchmark.cpp)\nadd_dependencies(all-benchmarks variable_benchmark)\ntarget_link_libraries(\n  variable_benchmark LINK_PRIVATE scipp-variable benchmark::benchmark_main\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Events Histogram Op Benchmark Executable in CMake\nDESCRIPTION: Sets up the events_histogram_op_benchmark executable, adds it as a dependency to all-benchmarks, and links it with the required libraries including test helpers.\nSOURCE: https://github.com/scipp/scipp/blob/main/lib/benchmark/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(events_histogram_op_benchmark events_histogram_op_benchmark.cpp)\nadd_dependencies(all-benchmarks events_histogram_op_benchmark)\ntarget_link_libraries(\n  events_histogram_op_benchmark LINK_PRIVATE benchmark::benchmark_main\n  scipp-dataset scipp_test_helpers\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Editable Install for Scipp Development\nDESCRIPTION: Commands to configure an editable install of Scipp for Python development using CMake and tox.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/development/getting-started.rst#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncmake --preset base -DCONAN_TBB=ON\ncmake --build --preset build\ntox -e editable\nconda develop src\n```\n\n----------------------------------------\n\nTITLE: Python Package Dependencies Configuration with pip-compile-multi\nDESCRIPTION: Locked dependency specifications for Python development tools including pre-commit, virtualenv and related packages. Each package entry specifies the exact version and its parent dependency.\nSOURCE: https://github.com/scipp/scipp/blob/main/requirements/static.txt#2025-04-21_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\ncfgv==3.4.0\n    # via pre-commit\ndistlib==0.3.9\n    # via virtualenv\nfilelock==3.18.0\n    # via virtualenv\nidentify==2.6.9\n    # via pre-commit\nnodeenv==1.9.1\n    # via pre-commit\nplatformdirs==4.3.7\n    # via virtualenv\npre-commit==4.2.0\n    # via -r static.in\npyyaml==6.0.2\n    # via pre-commit\nvirtualenv==20.29.3\n    # via pre-commit\n```\n\n----------------------------------------\n\nTITLE: Configuring Transform Benchmark Executable in CMake\nDESCRIPTION: Sets up the transform_benchmark executable, adds it as a dependency to all-benchmarks, and links it with the scipp-variable library and benchmark framework.\nSOURCE: https://github.com/scipp/scipp/blob/main/lib/benchmark/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(transform_benchmark transform_benchmark.cpp)\nadd_dependencies(all-benchmarks transform_benchmark)\ntarget_link_libraries(\n  transform_benchmark LINK_PRIVATE scipp-variable benchmark::benchmark_main\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Dataset Operations Benchmark Executable in CMake\nDESCRIPTION: Sets up the dataset_operations_benchmark executable, adds it as a dependency to all-benchmarks, and links it with the scipp-dataset library and benchmark framework.\nSOURCE: https://github.com/scipp/scipp/blob/main/lib/benchmark/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(dataset_operations_benchmark dataset_operations_benchmark.cpp)\nadd_dependencies(all-benchmarks dataset_operations_benchmark)\ntarget_link_libraries(\n  dataset_operations_benchmark LINK_PRIVATE scipp-dataset\n  benchmark::benchmark_main\n)\n```\n\n----------------------------------------\n\nTITLE: Setting up Table of Contents for Migration Notes in RST\nDESCRIPTION: Configures a table of contents (toctree) directive in reStructuredText to include all files from the migration directory with a maximum depth of 1.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/about/migration-notes.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n   :glob:\n\n   migration/*\n```\n\n----------------------------------------\n\nTITLE: Defining Simple Python Function with Single-line Docstring\nDESCRIPTION: Shows how to write a concise single-line docstring for a simple Python function when a detailed explanation is not necessary.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/development/coding-conventions.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef ndim(self) -> int:\n    \"\"\"Returns the number of dimensions.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Cleaning Old Dev Packages from Anaconda Cloud\nDESCRIPTION: Shell script used in CI to automatically remove packages with 'dev' label that are older than 1 month from Anaconda Cloud.\nSOURCE: https://github.com/scipp/scipp/blob/main/tools/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nanaconda_remove_old_dev_packages.sh\n```\n\n----------------------------------------\n\nTITLE: Using arg_list for Type Combinations in Scipp Transforms\nDESCRIPTION: Demonstrates how to use arg_list to define supported type combinations for operators. Supports multiple type combinations like (double,bool), (float,int64_t), etc., and simplifies defining operations that handle the same type for all arguments.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/development/internals/transform.rst#2025-04-21_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\noverloaded{arg_list<std::tuple<double, bool>,\n                    std::tuple<float, int64_t>,\n                    std::tuple<int32_t, double>,\n                    double>\n                    [](auto &a, auto &b) { /* Get double/bool...etc. pairs here */ },\n                    [](const units::Unit &a, const units::Unit &b) { /* Unit handling */ }\n           };\n```\n\n----------------------------------------\n\nTITLE: Checking Transparent HugePages Status\nDESCRIPTION: Command to check the current status of transparent HugePages on the system.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/tips-tricks-and-anti-patterns.ipynb#2025-04-21_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n$ cat /sys/kernel/mm/transparent_hugepage/enabled\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi Index Benchmark Executable in CMake\nDESCRIPTION: Sets up the multi_index_benchmark executable and links it with the scipp-core library. Note that the dependency on all-benchmarks is commented out, so it won't be built when running the all-benchmarks target.\nSOURCE: https://github.com/scipp/scipp/blob/main/lib/benchmark/CMakeLists.txt#2025-04-21_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(multi_index_benchmark multi_index_benchmark.cpp)\n# add_dependencies(all-benchmarks multi_index_benchmark)\ntarget_link_libraries(\n  multi_index_benchmark LINK_PRIVATE scipp-core benchmark::benchmark_main\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Buckets Benchmark Executable in CMake\nDESCRIPTION: Sets up the buckets_benchmark executable, adds it as a dependency to all-benchmarks, and links it with the required libraries.\nSOURCE: https://github.com/scipp/scipp/blob/main/lib/benchmark/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(buckets_benchmark buckets_benchmark.cpp)\nadd_dependencies(all-benchmarks buckets_benchmark)\ntarget_link_libraries(\n  buckets_benchmark LINK_PRIVATE scipp-dataset benchmark::benchmark_main\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Pre-commit Hooks for Scipp\nDESCRIPTION: Commands to install and run pre-commit hooks for static analysis and code formatting in the Scipp project.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/development/getting-started.rst#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npre-commit install\npre-commit run --all-files\n```\n\n----------------------------------------\n\nTITLE: Setting Up Visual Studio Developer Command Prompt on Windows\nDESCRIPTION: Command to initialize a Visual Studio developer command prompt on Windows for building Scipp.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/development/getting-started.rst#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n\"C:\\Program Files\\Microsoft Visual Studio\\2022\\Professional\\VC\\Auxiliary\\Build\\vcvars64.bat\"\n```\n\n----------------------------------------\n\nTITLE: Installing Conda Build Dependencies\nDESCRIPTION: Command to install required Conda tools (conda-build and anaconda) in the root/base environment for package building and publishing.\nSOURCE: https://github.com/scipp/scipp/blob/main/conda/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nconda install conda-build anaconda\n```\n\n----------------------------------------\n\nTITLE: Configuring IPython Cache Size in Python\nDESCRIPTION: This code shows how to disable or reduce the IPython output cache size by editing the ipython_kernel_config.py file.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/faq.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nc.InteractiveShell.cache_size = 0\n```\n\n----------------------------------------\n\nTITLE: Configuring Jupyter Kernel with TBB Malloc Proxy\nDESCRIPTION: JSON configuration for a Jupyter kernel to use TBB malloc proxy. This sets up the kernel with a custom display name and preloads the TBB malloc proxy library.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/tips-tricks-and-anti-patterns.ipynb#2025-04-21_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n \"argv\": [\n  \"/home/<username>/mambaforge/envs/myenv/bin/python\",\n  \"-m\",\n  \"ipykernel_launcher\",\n  \"-f\",\n  \"{connection_file}\"\n ],\n \"display_name\": \"Python 3 (ipykernel) with tbbmalloc_proxy\",\n \"language\": \"python\",\n \"env\":{\n   \"LD_PRELOAD\":\"libtbbmalloc_proxy.so.2\"\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Scipp Project\nDESCRIPTION: Example directory structure for a typical Scipp development setup with source, build, and installation directories.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/development/getting-started.rst#2025-04-21_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n|-- /home/user/scipp (source code)\n|   |-- build (build directory)\n|   |-- install (Python library installation)\n|   |-- ...\n|-- ...\n```\n\n----------------------------------------\n\nTITLE: Configuring jupyterlab-code-formatter for Black in JSON\nDESCRIPTION: This snippet provides a configuration example for the jupyterlab-code-formatter extension, specifically for using the Black formatter with Python code in Jupyter notebooks. It sets the line length to 88 characters and disables string normalization.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/development/notebook-style-guide.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    {\n    \"black\": {\n        \"line_length\": 88,\n        \"string_normalization\": false\n    },\n    \"preferences\": {\n        \"default_formatter\": {\n            \"python\": [\"black\"],\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake to Use Scipp as a C++ Library\nDESCRIPTION: CMake configuration example for using Scipp as a C++ library in another project.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/development/getting-started.rst#2025-04-21_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\n# replace 23.01 with required version\nfind_package(scipp 23.01 REQUIRED COMPONENTS conan-config)\nfind_package(scipp 23.01 REQUIRED)\n\ntarget_link_libraries(mytarget PUBLIC scipp::dataset)\n```\n\n----------------------------------------\n\nTITLE: Configuring Conan C++ dependencies\nDESCRIPTION: C++ library dependencies are installed using Conan. Versions are pinned in the scipp-conan.cmake file within the conan_cmake_configure call. This ensures consistent C++ dependencies across builds.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/development/dependencies.rst#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nlib/cmake/scipp-conan.cmake\n```\n\n----------------------------------------\n\nTITLE: Building Scipp Documentation with Tox\nDESCRIPTION: Commands to build the HTML documentation for Scipp using tox.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/development/getting-started.rst#2025-04-21_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ntox -e lib  # omit if using cmake, or install is up-to-date\ntox -e docs\n```\n\n----------------------------------------\n\nTITLE: Python Package Dependencies List\nDESCRIPTION: Detailed requirements file listing Python packages and their specific versions required for development and scientific computing. Includes dependencies for packages like ipykernel, pandas, scipy, and xarray along with their transitive dependencies.\nSOURCE: https://github.com/scipp/scipp/blob/main/requirements/extra.txt#2025-04-21_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n-r base.txt\nasttokens==3.0.0\n    # via stack-data\ncertifi==2025.1.31\n    # via requests\ncharset-normalizer==3.4.1\n    # via requests\ncomm==0.2.2\n    # via ipykernel\ndebugpy==1.8.13\n    # via ipykernel\ndecorator==5.2.1\n    # via ipython\nexceptiongroup==1.2.2\n    # via ipython\nexecuting==2.2.0\n    # via stack-data\ngraphviz==0.20.3\n    # via -r extra.in\nh5py==3.13.0\n    # via -r extra.in\nidna==3.10\n    # via requests\nipykernel==6.29.5\n    # via -r extra.in\nipython==8.34.0\n    # via ipykernel\njedi==0.19.2\n    # via ipython\njupyter-client==8.6.3\n    # via ipykernel\njupyter-core==5.7.2\n    # via\n    #   ipykernel\n    #   jupyter-client\nllvmlite==0.44.0\n    # via numba\nmatplotlib-inline==0.1.7\n    # via\n    #   ipykernel\n    #   ipython\nnest-asyncio==1.6.0\n    # via ipykernel\nnumba==0.61.0\n    # via -r extra.in\npackaging==24.2\n    # via\n    #   ipykernel\n    #   pooch\n    #   xarray\npandas==2.2.3\n    # via\n    #   -r extra.in\n    #   xarray\nparso==0.8.4\n    # via jedi\npexpect==4.9.0\n    # via ipython\nplatformdirs==4.3.7\n    # via\n    #   jupyter-core\n    #   pooch\npooch==1.8.2\n    # via -r extra.in\nprompt-toolkit==3.0.50\n    # via ipython\nptyprocess==0.7.0\n    # via pexpect\npure-eval==0.2.3\n    # via stack-data\npygments==2.19.1\n    # via ipython\npython-dateutil==2.9.0.post0\n    # via\n    #   jupyter-client\n    #   pandas\npytz==2025.1\n    # via pandas\npyzmq==26.3.0\n    # via\n    #   ipykernel\n    #   jupyter-client\nrequests==2.32.3\n    # via pooch\nscipy==1.15.2\n    # via -r extra.in\nsix==1.17.0\n    # via python-dateutil\nstack-data==0.6.3\n    # via ipython\ntornado==6.4.2\n    # via\n    #   ipykernel\n    #   jupyter-client\ntraitlets==5.14.3\n    # via\n    #   comm\n    #   ipykernel\n    #   ipython\n    #   jupyter-client\n    #   jupyter-core\n    #   matplotlib-inline\ntyping-extensions==4.12.2\n    # via ipython\ntzdata==2025.1\n    # via pandas\nurllib3==2.3.0\n    # via requests\nwcwidth==0.2.13\n    # via prompt-toolkit\nxarray==2025.3.0\n    # via -r extra.in\n```\n\n----------------------------------------\n\nTITLE: Sphinx autosummary directive for Scipp Data Structures\nDESCRIPTION: Sphinx configuration that generates documentation for Scipp's core data structure classes including DataArray, Dataset, Variable, and others using a custom class template.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/classes.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autosummary::\n   :toctree: ../generated/classes\n   :template: scipp-class-template.rst\n   :recursive:\n\n   DataArray\n   DataGroup\n   Dataset\n   DType\n   Unit\n   Variable\n```\n\n----------------------------------------\n\nTITLE: Defining Conda package dependencies\nDESCRIPTION: The conda/meta.yaml file defines conda package build and runtime dependencies. Additional version specifications are set in files within the conda/variants/ directory. These files control the conda package build process.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/development/dependencies.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nconda/meta.yaml\n```\n\n----------------------------------------\n\nTITLE: Building Scipp Test Project with CMake\nDESCRIPTION: Commands for creating build directory, configuring CMake with Scipp installation path, building the project and running the test executable.\nSOURCE: https://github.com/scipp/scipp/blob/main/conda/cmake-package-test/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p build && cd build\ncmake -DCMAKE_PREFIX_PATH=\"$(scippinstall_dir)\" ..\ncmake --build ..\n./test\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Scipp Internals Documentation in reStructuredText\nDESCRIPTION: This snippet defines a table of contents for the Scipp internals documentation using reStructuredText directives. It sets the maximum depth to 2 and lists various topics covered in the documentation.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/development/internals/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   concepts\n   constructing_variables\n   customizing\n   multi_dimensional_indexing\n   transform\n   variable_implementation\n```\n\n----------------------------------------\n\nTITLE: Setting Version Information from Different Build Sources in CMake\nDESCRIPTION: Determines the Scipp version from either SKBUILD, conda-forge environment variables, or git tags. Formats version strings for both PEP440 compatibility (Python) and CMake versioning.\nSOURCE: https://github.com/scipp/scipp/blob/main/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(SKBUILD)\n  set(SCIPP_VERSION_PEP440 \"${SKBUILD_PROJECT_VERSION_FULL}\")\n  set(SCIPP_VERSION_CMAKE \"${SKBUILD_PROJECT_VERSION}\")\n  message(STATUS \"Got version from SKBUILD: ${SKBUILD_PROJECT_VERSION_FULL}\")\nelseif(CONDA_FORGE_BUILD)\n  set(SCIPP_VERSION_PEP440 \"$ENV{GIT_VERSION_INFO}\")\n  set(SCIPP_VERSION_CMAKE \"$ENV{GIT_VERSION_INFO}\")\n  message(\n    STATUS \"Got version from env var from conda-forge: ${SCIPP_VERSION_PEP440}\"\n  )\nelse()\n  execute_process(\n    COMMAND git describe --tags --exclude nightly\n    WORKING_DIRECTORY \"${CMAKE_SOURCE_DIR}\"\n    RESULT_VARIABLE HAVE_GIT_VERSION_INFO\n    OUTPUT_VARIABLE GIT_VERSION_INFO\n    OUTPUT_STRIP_TRAILING_WHITESPACE\n  )\n  if(NOT HAVE_GIT_VERSION_INFO EQUAL 0)\n    message(WARNING \"Failed to get package version\")\n  endif()\n  # We get something like 23.08.0-266-g068b161fe, remove the -g<hash> part\n  string(REGEX REPLACE \"-g[0-9a-f]+$\" \"\" GIT_VERSION_INFO ${GIT_VERSION_INFO})\n  # Replace '-' with '.dev' for PEP440 compatibility\n  string(REGEX REPLACE \"-\" \".dev\" SCIPP_VERSION_PEP440 ${GIT_VERSION_INFO})\n  # Cmake does not like letters, remove the dev, will act as \"tweak\" number\n  string(REGEX REPLACE \"-\" \"\" SCIPP_VERSION_CMAKE ${GIT_VERSION_INFO})\n  unset(HAVE_GIT_VERSION_INFO)\n  unset(GIT_VERSION_INFO)\n  message(STATUS \"Got version from git: ${SCIPP_VERSION_PEP440}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Reference to pythreejs\nDESCRIPTION: Code reference showing the pythreejs module syntax in ReStructuredText format.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/development/adr/0004-use-ipympl-backend-for-matplotlib.rst#2025-04-21_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n``pythreejs``\n```\n\n----------------------------------------\n\nTITLE: Defining Scipp API Documentation Structure with reStructuredText\nDESCRIPTION: This code snippet defines the structure of the Scipp API reference documentation using reStructuredText. It creates a table of contents with a maximum depth of 2 levels, listing all the main sections of the API documentation.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   classes\n   creation-functions\n   free-functions\n   modules\n   linear-algebra\n   dtype\n   units\n   error-propagation\n   ownership-mechanism-and-readonly-flags\n   logging\n   testing\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation Index with TOC Tree\nDESCRIPTION: Root documentation configuration using Sphinx's toctree directive to define the documentation structure. Specifies a maximum depth of 2 levels and includes links to main documentation sections.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/getting-started/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   overview\n   installation\n   quick-start\n   faq\n   tutorials/index\n```\n\n----------------------------------------\n\nTITLE: Defining ASV Dependencies Requirements\nDESCRIPTION: Specifies Python package dependencies and their versions required for running ASV benchmarking. Includes references to base.txt and extra.txt, along with explicit version requirements for packages like asv, build, virtualenv, and their dependencies.\nSOURCE: https://github.com/scipp/scipp/blob/main/requirements/asv.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-r base.txt\n-r extra.txt\nasv==0.6.4\n    # via -r asv.in\nasv-runner==0.2.1\n    # via asv\nbuild==1.2.2.post1\n    # via asv\ndistlib==0.3.9\n    # via virtualenv\nfilelock==3.18.0\n    # via virtualenv\nimportlib-metadata==8.6.1\n    # via asv-runner\njson5==0.10.0\n    # via asv\npympler==1.1\n    # via asv\npyproject-hooks==1.2.0\n    # via build\npyyaml==6.0.2\n    # via asv\ntabulate==0.9.0\n    # via asv\ntomli==2.2.1\n    # via\n    #   asv\n    #   build\nvirtualenv==20.29.3\n    # via asv\nzipp==3.21.0\n    # via importlib-metadata\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies\nDESCRIPTION: This snippet defines the required Python packages and their versions for the project. It includes numpy 2.0.2 and psutil 7.0.0 as base requirements.\nSOURCE: https://github.com/scipp/scipp/blob/main/requirements/base.txt#2025-04-21_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n# SHA1:0bc619b1257b8664bf5447ca8b9cc95742c1db60\n#\n# This file is autogenerated by pip-compile-multi\n# To update, run:\n#\n#    pip-compile-multi\n#\nnumpy==2.0.2\n    # via -r base.in\npsutil==7.0.0\n    # via -r base.in\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Module Path and Options for Scipp\nDESCRIPTION: Sets up the CMake module path, including sanitizers, and defines a benchmark option.\nSOURCE: https://github.com/scipp/scipp/blob/main/lib/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_MODULE_PATH\n    ${CMAKE_MODULE_PATH} \"${CMAKE_CURRENT_SOURCE_DIR}/cmake\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/cmake/sanitizers-cmake/cmake\"\n)\n\noption(BENCHMARK \"Enable benchmarks\" OFF)\n\ninclude(scipp-conan)\n```\n\n----------------------------------------\n\nTITLE: Importing Scipp and NumPy in Python\nDESCRIPTION: Imports the necessary libraries for working with Scipp objects and NumPy arrays.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/representations-and-tables.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport scipp as sc\n```\n\n----------------------------------------\n\nTITLE: Building Debug Version of Scipp\nDESCRIPTION: CMake commands to configure and build a debug version of Scipp with dynamic libraries and C++ unit tests and benchmarks.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/development/getting-started.rst#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncmake \\\n  -GNinja \\\n  -DCMAKE_BUILD_TYPE=Debug \\\n  -DPython_EXECUTABLE=$(command -v python3) \\\n  -DCMAKE_INSTALL_PREFIX=../install \\\n  -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=OFF \\\n  -DDYNAMIC_LIB=ON \\\n  ..\n\n# C++ unit tests\ncmake --build . --target all-tests\n\n# Benchmarks\ncmake --build . --target all-benchmarks\n\n# Install Python library\ncmake --build . --target install\n```\n\n----------------------------------------\n\nTITLE: Configuring Slice Benchmark Executable in CMake\nDESCRIPTION: Sets up the slice_benchmark executable, adds it as a dependency to all-benchmarks, and links it with the required libraries.\nSOURCE: https://github.com/scipp/scipp/blob/main/lib/benchmark/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(slice_benchmark slice_benchmark.cpp)\nadd_dependencies(all-benchmarks slice_benchmark)\ntarget_link_libraries(\n  slice_benchmark LINK_PRIVATE scipp-dataset benchmark::benchmark_main\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents Structure in reStructuredText for Scipp Documentation\nDESCRIPTION: This code defines a table of contents for the Scipp user guide using reStructuredText syntax. It sets the maximum depth to 2 levels and lists all the available documentation pages in a logical order from fundamental concepts to more advanced features.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   data-structures\n   slicing\n   computation\n   masking\n   binned-data\n   groupby\n   coordinate-transformations\n   reading-and-writing-files\n   tips-tricks-and-anti-patterns\n   representations-and-tables\n   plotting\n```\n\n----------------------------------------\n\nTITLE: Sphinx Class Documentation Template with Jinja2\nDESCRIPTION: Defines a reStructuredText template with Jinja2 templating for generating comprehensive class documentation in Sphinx. Includes sections for class members, special methods, initialization, methods listing, and attributes.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/_templates/scipp-class-template.rst#2025-04-21_snippet_0\n\nLANGUAGE: jinja2\nCODE:\n```\n{{ fullname | escape | underline }}\n\n.. currentmodule:: {{ module }}\n\n.. autoclass:: {{ objname }}\n   :members:\n   :special-members: __getitem__\n\n   {% block methods %}\n   .. automethod:: __init__\n\n   {% if methods %}\n   .. rubric:: {{ _('Methods') }}\n\n   .. autosummary::\n   {% for item in methods %}\n      ~{{ name }}.{{ item }}\n   {%- endfor %}\n   {% endif %}\n   {% endblock %}\n\n   {% block attributes %}\n   {% if attributes %}\n   .. rubric:: {{ _('Attributes') }}\n\n   .. autosummary::\n   {% for item in attributes %}\n      ~{{ name }}.{{ item }}\n   {%- endfor %}\n   {% endif %}\n   {% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Enabling Transparent HugePages\nDESCRIPTION: Command to enable transparent HugePages globally on the system. This sets the kernel parameter to 'always' use transparent HugePages.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/tips-tricks-and-anti-patterns.ipynb#2025-04-21_snippet_15\n\nLANGUAGE: console\nCODE:\n```\n# echo always > /sys/kernel/mm/transparent_hugepage/enabled\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build Settings for Scipp Package Test\nDESCRIPTION: Sets up a CMake project with C++17 standard, configures build type settings, finds and links the scipp package, and creates a test executable. Includes license header and basic project configuration.\nSOURCE: https://github.com/scipp/scipp/blob/main/conda/cmake-package-test/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# ~~~\n# SPDX-License-Identifier: BSD-3-Clause\n# Copyright (c) 2023 Scipp contributors (https://github.com/scipp)\n# ~~~\ncmake_minimum_required(VERSION 3.16)\nproject(cmake-package-test)\nif(NOT DEFINED CMAKE_CXX_STANDARD)\n  set(CMAKE_CXX_STANDARD 17)\nendif(NOT DEFINED CMAKE_CXX_STANDARD)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_CXX_EXTENSIONS OFF)\n\nif(NOT CMAKE_BUILD_TYPE)\n  set(CMAKE_BUILD_TYPE\n      \"Release\"\n      CACHE\n        STRING\n        \"Choose the type of build, options are: Debug Release RelWithDebInfo MinSizeRel.\"\n        FORCE\n  )\nendif()\n\nset(PKG_VERSION\n    \"undefined\"\n    CACHE STRING \"Package version to require.\"\n)\nfind_package(scipp ${PKG_VERSION} REQUIRED COMPONENTS conan-config)\nfind_package(scipp ${PKG_VERSION} REQUIRED)\n\nadd_executable(test main.cpp)\ntarget_link_libraries(test PUBLIC scipp::dataset)\n```\n\n----------------------------------------\n\nTITLE: Configuring Histogram Benchmark Executable in CMake\nDESCRIPTION: Sets up the histogram_benchmark executable, adds it as a dependency to all-benchmarks, and links it with the required libraries including the scipp_test_helpers.\nSOURCE: https://github.com/scipp/scipp/blob/main/lib/benchmark/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(histogram_benchmark histogram_benchmark.cpp)\nadd_dependencies(all-benchmarks histogram_benchmark)\ntarget_link_libraries(\n  histogram_benchmark LINK_PRIVATE benchmark::benchmark_main scipp-dataset\n  scipp_test_helpers\n)\n```\n\n----------------------------------------\n\nTITLE: Running Python Tests for Scipp\nDESCRIPTION: Command to run Python unit tests for Scipp using pytest.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/development/getting-started.rst#2025-04-21_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\npython -m pytest tests\n```\n\n----------------------------------------\n\nTITLE: Python Package Requirements Specification\nDESCRIPTION: Auto-generated pip requirements file that specifies exact versions of Python packages and their dependencies. Includes packages for Sphinx documentation, Jupyter notebooks, testing frameworks, and visualization libraries.\nSOURCE: https://github.com/scipp/scipp/blob/main/requirements/docs.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n-r base.txt\n-r extra.txt\naccessible-pygments==0.0.5\n    # via pydata-sphinx-theme\nalabaster==1.0.0\n    # via sphinx\nattrs==25.3.0\n    # via\n    #   hypothesis\n    #   jsonschema\n    #   referencing\nbabel==2.17.0\n    # via\n    #   pydata-sphinx-theme\n    #   sphinx\nbeautifulsoup4==4.13.3\n    # via\n    #   nbconvert\n    #   pydata-sphinx-theme\nbleach[css]==6.2.0\n    # via nbconvert\n```\n\n----------------------------------------\n\nTITLE: Sphinx autosummary directive for Scipp Exceptions\nDESCRIPTION: Sphinx configuration that generates documentation for Scipp's exception classes including various error types that can be raised during operations on Scipp objects.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/reference/classes.rst#2025-04-21_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. autosummary::\n   :toctree: ../generated/classes\n   :template: scipp-class-template.rst\n   :recursive:\n\n   BinEdgeError\n   BinnedDataError\n   CoordError\n   DataArrayError\n   DatasetError\n   DimensionError\n   DTypeError\n   UnitError\n   VariableError\n   VariancesError\n```\n\n----------------------------------------\n\nTITLE: Defining RST Table of Contents\nDESCRIPTION: ReStructuredText directive that defines a table of contents tree with references to data structures documentation pages. Sets maximum depth to 1 and includes two documentation pages.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/data-structures.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   data-structures/data-structures\n   data-structures/creating-arrays-and-datasets\n```\n\n----------------------------------------\n\nTITLE: Configuring Scipp Common Library Target in CMake\nDESCRIPTION: Sets up the scipp-common library target as an interface library, configures include directories, and handles installation. It also sets up test subdirectory and conditional coverage flags.\nSOURCE: https://github.com/scipp/scipp/blob/main/lib/common/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(TARGET_NAME \"scipp-common\")\nset(INC_FILES\n    include/scipp/common/index.h include/scipp/common/index_composition.h\n    include/scipp/common/overloaded.h include/scipp/common/reduction.h\n    include/scipp/common/initialization.h\n)\n\nadd_library(${TARGET_NAME} INTERFACE)\nset_target_properties(${TARGET_NAME} PROPERTIES EXPORT_NAME common)\n\ntarget_include_directories(\n  ${TARGET_NAME}\n  INTERFACE $<INSTALL_INTERFACE:include>\n            $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\n)\n\nadd_subdirectory(test)\n\nscipp_install_component(TARGET ${TARGET_NAME} NO_EXPORT_HEADER)\n\nif(COVERAGE)\n  append_coverage_compiler_flags()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Python Package Requirements List\nDESCRIPTION: A comprehensive list of Python package dependencies with pinned versions and their relationships. This requirements file is auto-generated and includes both direct and transitive dependencies needed for building and developing the scipp project.\nSOURCE: https://github.com/scipp/scipp/blob/main/requirements/build.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nbottle==0.12.25\n    # via conan\ncertifi==2025.1.31\n    # via requests\ncharset-normalizer==3.4.1\n    # via requests\ncmake==3.31.6\n    # via -r build.in\ncolorama==0.4.6\n    # via conan\nconan==1.64.1\n    # via -r build.in\ndistro==1.8.0\n    # via conan\nfasteners==0.19\n    # via conan\nidna==3.10\n    # via requests\njinja2==3.1.6\n    # via conan\nmarkupsafe==3.0.2\n    # via jinja2\nninja==1.11.1.3\n    # via -r build.in\nnode-semver==0.6.1\n    # via conan\npatch-ng==1.17.4\n    # via conan\npluginbase==1.0.1\n    # via conan\npygments==2.19.1\n    # via conan\npyjwt==2.10.1\n    # via conan\npython-dateutil==2.9.0.post0\n    # via conan\npyyaml==6.0.2\n    # via conan\nrequests==2.32.3\n    # via conan\nsix==1.16.0\n    # via\n    #   conan\n    #   python-dateutil\ntqdm==4.67.1\n    # via conan\nurllib3==1.26.20\n    # via\n    #   conan\n    #   requests\n```\n\n----------------------------------------\n\nTITLE: Building Documentation for Scipp\nDESCRIPTION: Command to build the Scipp documentation using tox.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/development/getting-started.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntox -e docs\n\n# To clean and build all docs\n\ntox -e docs-clean\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Target for All Benchmarks in CMake\nDESCRIPTION: Creates a custom target named 'all-benchmarks' that can be used to build all benchmark executables at once.\nSOURCE: https://github.com/scipp/scipp/blob/main/lib/benchmark/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_target(all-benchmarks)\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Analysis Suppressions for C++ Project\nDESCRIPTION: A list of suppressed static analysis warnings with explanations for why each check is disabled. These suppressions configure tools like clang-tidy and cppcheck to avoid false positives or warnings that conflict with the project's coding style.\nSOURCE: https://github.com/scipp/scipp/blob/main/cppcheck-suppressions.txt#2025-04-21_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nuseStlAlgorithm\n\n// clang-tidy's google-explicit-constructor matches our style better.\nnoExplicitConstructor\n\n// We often use `size`, `begin`, `end` as variable names which shadow free\n// functions. Functions are still accessible using `scipp::size`, etc.\n// Mix-ups are very unlikely because they mostly fail to compile.\n// Compiler warnings appear to match our usage better.\nshadowFunction\n\n// Iterators are meant to abstract away the underlying container.\n// This check warns, e.g., about using iterators of std::span and\n// std::array together. This should be perfectly fine.\nmismatchingContainerExpression\n\n// Flags use of `false` or `true` as template parameters (seems to be a\n// bug in cppcheck's parser). The warning would be nice to have but it\n// would need too many inline suppressions at this point.\ncomparisonOfBoolWithInvalidComparator\n\n// Does not work with references in structured bindings (2021-11-16):\n// https://trac.cppcheck.net/ticket/10368\n// Should be covered by gcc's maybe-uninitialized warning.\nunassignedVariable\n\n// Covered by gcc's unused-variable warning.\n// Flags unused parts of structured bindings as opposed to gcc.\nunusedVariable\n\n// More thoroughly covered by clang-tidy.\nuseInitializationList\n\n// Warns about the `State` parameter in benchmarks.\n// We have no control over constness in this case.\n// Generally, non-const callbacks should be fine.\nconstParameterCallback\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Reference to ipympl Backend\nDESCRIPTION: Code reference showing the ipympl backend syntax in ReStructuredText format.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/development/adr/0004-use-ipympl-backend-for-matplotlib.rst#2025-04-21_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n``ipympl``\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Autoclass Documentation Template\nDESCRIPTION: A Sphinx documentation template that sets up automatic documentation for a Python class. It includes the class name as a header, sets the current module context, and uses the autoclass directive to document all members of the specified class.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/_templates/scipp-type-template.rst#2025-04-21_snippet_0\n\nLANGUAGE: Sphinx\nCODE:\n```\n{{ fullname | escape | underline }}\n\n.. currentmodule:: {{ module }}\n\n.. autoclass:: {{ objname }}\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Scipp Dataset Test Target in CMake\nDESCRIPTION: This CMake snippet sets up the build configuration for the Scipp dataset test suite. It defines the target name, adds dependencies, specifies source files, and sets compilation options and linking libraries.\nSOURCE: https://github.com/scipp/scipp/blob/main/lib/dataset/test/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(TARGET_NAME \"scipp-dataset-test\")\nadd_dependencies(all-tests ${TARGET_NAME})\nadd_executable(\n  ${TARGET_NAME}\n  astype_test.cpp\n  binned_arithmetic_test.cpp\n  binned_creation_test.cpp\n  bins_test.cpp\n  bins_reduction_test.cpp\n  bins_view_test.cpp\n  bin_test.cpp\n  concat_test.cpp\n  coords_view_test.cpp\n  copy_test.cpp\n  counts_test.cpp\n  data_array_arithmetic_test.cpp\n  data_array_comparison_test.cpp\n  data_array_test.cpp\n  dataset_arithmetic_test.cpp\n  dataset_comparison_test.cpp\n  dataset_operations_test.cpp\n  dataset_test_common.cpp\n  dataset_test.cpp\n  dataset_view_test.cpp\n  data_view_test.cpp\n  equals_nan_test.cpp\n  event_data_operations_consistency_test.cpp\n  except_test.cpp\n  generated_test.cpp\n  groupby_test.cpp\n  histogram_test.cpp\n  logical_reduction_test.cpp\n  masks_test.cpp\n  mean_test.cpp\n  merge_test.cpp\n  minmax_test.cpp\n  rebin_test.cpp\n  self_assignment_test.cpp\n  set_slice_test.cpp\n  shape_test.cpp\n  size_of_test.cpp\n  slice_by_value_test.cpp\n  slice_test.cpp\n  sort_test.cpp\n  string_test.cpp\n  test_data_arrays.cpp\n  sum_test.cpp\n  to_unit_test.cpp\n)\ntarget_link_libraries(\n  ${TARGET_NAME} LINK_PRIVATE scipp-dataset scipp_test_helpers\n  GTest::gtest_main\n)\n\nif(WIN32)\n  target_compile_options(${TARGET_NAME} PRIVATE \"/bigobj\")\nendif()\n\nset_property(\n  TARGET ${TARGET_NAME} PROPERTY INTERPROCEDURAL_OPTIMIZATION\n                                 ${INTERPROCEDURAL_OPTIMIZATION_TESTS}\n)\nset_property(\n  TARGET ${TARGET_NAME} PROPERTY EXCLUDE_FROM_ALL $<NOT:$<BOOL:${FULL_BUILD}>>\n)\nif(SANITIZERS)\n  add_sanitizers(${TARGET_NAME})\nendif()\nscipp_test(${TARGET_NAME} dataset)\n```\n\n----------------------------------------\n\nTITLE: Creating Build and Install Directories for Scipp\nDESCRIPTION: Commands to create and navigate to build and installation directories for Scipp.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/development/getting-started.rst#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Create build and library install directories\nmkdir build\nmkdir install\ncd build\n```\n\n----------------------------------------\n\nTITLE: Configuring Documentation Targets in CMake\nDESCRIPTION: Adds documentation build targets using a custom docs module. Includes targets for HTML documentation, doctests, and link checking. Also includes a target to clean up unnecessary files from built documentation.\nSOURCE: https://github.com/scipp/scipp/blob/main/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n# Custom install target for docs to depend on.\nadd_custom_target(\n  install-scipp COMMAND cmake --build ${CMAKE_CURRENT_BINARY_DIR} --target\n                        install\n)\n\ninclude(docs)\nadd_docs_target(docs BUILDER html DEPENDS install-scipp)\nadd_docs_target(doctest BUILDER doctest DEPENDS docs)\nadd_docs_target(linkcheck BUILDER linkcheck DEPENDS docs)\nadd_custom_target(\n  cleanup_docs_html\n  COMMENT \"Remove unnecessary .ipynb files from built HTML documentation.\"\n  COMMAND find \"${CMAKE_BINARY_DIR}/html\" -type f -name \"*.ipynb\" -not -path\n          \"${CMAKE_BINARY_DIR}/html/_sources/*\" -delete\n  VERBATIM\n)\nadd_dependencies(cleanup_docs_html docs)\n```\n\n----------------------------------------\n\nTITLE: Preparing a Scipp Release\nDESCRIPTION: Command to prepare a new Scipp release with a specified version number.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/development/getting-started.rst#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntox -e prepare-release -- 23.01.0\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Reference to Matplotlib Backend\nDESCRIPTION: Code reference showing the Matplotlib notebook backend syntax in ReStructuredText format.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/development/adr/0004-use-ipympl-backend-for-matplotlib.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n``notebook``\n```\n\n----------------------------------------\n\nTITLE: Building Release Version of Scipp\nDESCRIPTION: CMake commands to configure and build an optimized release version of Scipp with C++ unit tests, benchmarks, and Python library installation.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/development/getting-started.rst#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncmake \\\n  -GNinja \\\n  -DPython_EXECUTABLE=$(command -v python3) \\\n  -DCMAKE_INSTALL_PREFIX=../install \\\n  -DCMAKE_BUILD_TYPE=Release \\\n  ..\n\ncmake --build . --target all-tests\ncmake --build . --target all-benchmarks\ncmake --build . --target install\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Toctree for About Section\nDESCRIPTION: Sets up a table of contents tree (toctree) in Sphinx documentation with a maximum depth of 2 levels. Links to important documentation pages including about, roadmap, contributing, and migration notes.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/about/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   about\n   roadmap\n   contributing\n   migration-notes\n```\n\n----------------------------------------\n\nTITLE: Monitoring HugePages Usage\nDESCRIPTION: Commands to check or continuously monitor the usage of HugePages on the system.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/tips-tricks-and-anti-patterns.ipynb#2025-04-21_snippet_16\n\nLANGUAGE: console\nCODE:\n```\n$ grep HugePages /proc/meminfo\n```\n\nLANGUAGE: console\nCODE:\n```\n$ watch grep HugePages /proc/meminfo\n```\n\n----------------------------------------\n\nTITLE: Finding and Configuring Dependencies for Scipp\nDESCRIPTION: Finds required packages such as Boost, Eigen3, GTest, Python, and pybind11. Also sets up sanitizer options.\nSOURCE: https://github.com/scipp/scipp/blob/main/lib/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(Python_FIND_IMPLEMENTATIONS CPython PyPy)\n\nfind_package(benchmark)\nfind_package(Boost 1.67 REQUIRED)\nfind_package(Eigen3 REQUIRED)\noption(SANITIZERS \"Enable sanitizers\" OFF)\nif(SANITIZERS)\n  find_package(Sanitizers REQUIRED)\nendif()\nfind_package(GTest CONFIG REQUIRED)\n# libpython is not available on `manylinux` images, use `Development.Module`\n# instead of `Development`\nfind_package(Python 3.8 REQUIRED COMPONENTS Interpreter Development.Module)\nfind_package(pybind11 CONFIG REQUIRED)\nfind_package(LLNL-Units REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Building Conda Package\nDESCRIPTION: Command to build Conda package from the repository root directory using the conda configuration in the ./conda directory.\nSOURCE: https://github.com/scipp/scipp/blob/main/conda/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nconda-build ./conda\n```\n\n----------------------------------------\n\nTITLE: Running C++ Unit Tests for Scipp Components\nDESCRIPTION: Commands to run Google Test-based unit tests for individual Scipp components directly using the test executables.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/development/getting-started.rst#2025-04-21_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n./build/bin/scipp-common-test\n./build/bin/scipp-core-test\n./build/bin/scipp-units-test\n./build/bin/scipp-variable-test\n./build/bin/scipp-dataset-test\n```\n\n----------------------------------------\n\nTITLE: Installing Scipp Nightly Releases with pip\nDESCRIPTION: Commands for installing pre-release (nightly) versions of Scipp using pip. The command configures custom PyPI indexes to access nightly builds while maintaining access to the standard PyPI repository.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/development/releasing-scipp.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install \\\n  --pre \\\n  --index-url https://pypi.anaconda.org/scipp-nightly-wheels/simple/ \\\n  --extra-index-url https://pypi.org/simple \\\n  scipp\n```\n\n----------------------------------------\n\nTITLE: Loading NeXus File into Scipp Data Array using Scippnexus in Python\nDESCRIPTION: This snippet shows how to use Scippnexus to load data from a NeXus file into a Scipp data array. It opens a NeXus file and loads the first detector bank ('bank0') into a data array.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/data-structures/creating-arrays-and-datasets.ipynb#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport scippnexus as snx\nwith snx.File(filename) as f:\n    da = f['entry/bank0'][...]\n```\n\n----------------------------------------\n\nTITLE: Checking Configured HugePages\nDESCRIPTION: Command to check the number of configured HugePages on the system.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/user-guide/tips-tricks-and-anti-patterns.ipynb#2025-04-21_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ cat /sys/kernel/mm/hugepages/hugepages-2048kB/nr_hugepages\n```\n\n----------------------------------------\n\nTITLE: Defining CI Dependencies with pip-compile-multi\nDESCRIPTION: This snippet contains the full list of pinned dependencies for the CI environment. It includes packages for testing (tox), version control integration (GitPython), and HTTP requests (requests), among others. Each package is listed with its exact version and the reason for its inclusion.\nSOURCE: https://github.com/scipp/scipp/blob/main/requirements/ci.txt#2025-04-21_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\ncachetools==5.5.2\n    # via tox\ncertifi==2025.1.31\n    # via requests\nchardet==5.2.0\n    # via tox\ncharset-normalizer==3.4.1\n    # via requests\ncolorama==0.4.6\n    # via tox\ndistlib==0.3.9\n    # via virtualenv\nfilelock==3.18.0\n    # via\n    #   tox\n    #   virtualenv\ngitdb==4.0.12\n    # via gitpython\ngitpython==3.1.44\n    # via -r ci.in\nidna==3.10\n    # via requests\npackaging==24.2\n    # via\n    #   -r ci.in\n    #   pyproject-api\n    #   tox\nplatformdirs==4.3.7\n    # via\n    #   tox\n    #   virtualenv\npluggy==1.5.0\n    # via tox\npyproject-api==1.9.0\n    # via tox\nrequests==2.32.3\n    # via -r ci.in\nsmmap==5.0.2\n    # via gitdb\ntomli==2.2.1\n    # via\n    #   pyproject-api\n    #   tox\ntox==4.24.2\n    # via -r ci.in\ntyping-extensions==4.12.2\n    # via tox\nurllib3==2.3.0\n    # via requests\nvirtualenv==20.29.3\n    # via tox\n```\n\n----------------------------------------\n\nTITLE: Creating Sample Data with Variances in Scipp\nDESCRIPTION: Sets up sample data structures for demonstrating the broadcasting issue: a 2D variable and a 1D variable with variances that would need broadcasting for operations.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/about/migration/23-01.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport scipp as sc\n\nvar = sc.ones(dims=['x', 'y'], shape=(4, 3))\nnorm = sc.array(\n    dims=['y'],\n    values=[0.1, 0.2, 0.3],\n    variances=[0.1, 0.2, 0.3],\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Python Testing Dependencies with pip-compile-multi\nDESCRIPTION: This snippet defines the Python package dependencies for testing, including their specific versions. It references base.txt and extra.txt files, and lists packages such as pytest, hypothesis, and beautifulsoup4 along with their versions.\nSOURCE: https://github.com/scipp/scipp/blob/main/requirements/test.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# SHA1:3aee726967b9135c2c45566b757cee9fa193f83a\n#\n# This file is autogenerated by pip-compile-multi\n# To update, run:\n#\n#    pip-compile-multi\n#\n-r base.txt\n-r extra.txt\nattrs==25.3.0\n    # via hypothesis\nbeautifulsoup4==4.13.3\n    # via\n    #   -r test.in\n    #   bs4\nbs4==0.0.2\n    # via -r test.in\nexecnet==2.1.1\n    # via pytest-xdist\nhypothesis==6.129.4\n    # via -r test.in\niniconfig==2.1.0\n    # via pytest\npluggy==1.5.0\n    # via pytest\npytest==8.3.5\n    # via\n    #   -r test.in\n    #   pytest-xdist\npytest-xdist==3.6.1\n    # via -r test.in\nsortedcontainers==2.4.0\n    # via hypothesis\nsoupsieve==2.6\n    # via beautifulsoup4\ntomli==2.2.1\n    # via pytest\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Module Build for Scipp in CMake\nDESCRIPTION: This CMake configuration sets up the build for the Scipp Python module. It specifies source files, includes directories, links libraries, and sets various compilation and installation properties. The configuration also handles optional features like precompiled headers, sanitizers, and code coverage.\nSOURCE: https://github.com/scipp/scipp/blob/main/lib/python/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# ~~~\n# SPDX-License-Identifier: BSD-3-Clause\n# Copyright (c) 2023 Scipp contributors (https://github.com/scipp)\n# ~~~\n\n# Use Python_add_library since pybind11_add_module causes linking to libpython,\n# which should be avoided on Linux and OSX.\npython_add_library(\n  _scipp\n  MODULE\n  bind_units.cpp\n  bins.cpp\n  comparison.cpp\n  counts.cpp\n  variable_creation.cpp\n  cumulative.cpp\n  dataset.cpp\n  docstring.cpp\n  dtype.cpp\n  except.cpp\n  geometry.cpp\n  groupby.cpp\n  histogram.cpp\n  numpy.cpp\n  operations.cpp\n  py_object.cpp\n  scipp.cpp\n  transform.cpp\n  trigonometry.cpp\n  unary.cpp\n  unit.cpp\n  variable.cpp\n  variable_init.cpp\n  variable_instantiate_py_object.cpp\n  element_array_view.cpp\n  shape.cpp\n  slice_utils.cpp\n  ${python_SRC_FILES}\n)\n\ntarget_include_directories(\n  _scipp PUBLIC ${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_BINARY_DIR}\n)\ntarget_link_libraries(_scipp LINK_PRIVATE scipp-dataset pybind11::headers)\n\n# SCIPP_EXPORT is used in macros defined in variable/\ntarget_compile_definitions(_scipp PRIVATE SCIPP_EXPORT=)\n\n# Set symbol visibility to hidden to reduce binary size, as recommended in\n# pybind11 FAQ.\nset_target_properties(_scipp PROPERTIES CXX_VISIBILITY_PRESET hidden)\nset_target_properties(\n  _scipp\n  PROPERTIES INSTALL_RPATH\n             \"${CMAKE_INSTALL_RPATH}/${RELATIVE_LIB}/${CMAKE_INSTALL_LIBDIR}\"\n)\n\nif(PRECOMPILED_HEADERS)\n  target_precompile_headers(_scipp PRIVATE pybind11.h)\nendif()\n\nif(SANITIZERS)\n  add_sanitizers(_scipp)\nendif()\n\ninstall(TARGETS _scipp DESTINATION ${PYTHONDIR})\n\nif(COVERAGE)\n  append_coverage_compiler_flags()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Scipp Nightly Releases with uv\nDESCRIPTION: Commands for installing pre-release (nightly) versions of Scipp using the uv package manager. This approach requires setting the extra-index-url in the configuration.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/development/releasing-scipp.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython -m uv pip install \\\n--pre \\\n--extra-index-url https://pypi.anaconda.org/scipp-nightly-wheels/simple/ \\\nscipp\n```\n\n----------------------------------------\n\nTITLE: Running Address Sanitizer Tests in Scipp\nDESCRIPTION: Shell script that builds and executes all tests with Address Sanitizer enabled to detect memory-related bugs.\nSOURCE: https://github.com/scipp/scipp/blob/main/tools/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nrun_asan.sh\n```\n\n----------------------------------------\n\nTITLE: Installing Mypy Dependencies with pip-compile-multi\nDESCRIPTION: Requirements file that specifies Mypy package versions and inherits from docs.txt and test.txt. Generated automatically by pip-compile-multi tool.\nSOURCE: https://github.com/scipp/scipp/blob/main/requirements/mypy.txt#2025-04-21_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n-r docs.txt\n-r test.txt\nmypy==1.15.0\n    # via -r mypy.in\nmypy-extensions==1.0.0\n    # via mypy\n```\n\n----------------------------------------\n\nTITLE: Demonstrating VariancesError on Division with Broadcasting\nDESCRIPTION: Shows the operation that will now raise a VariancesError because norm would need to be broadcast along the x dimension.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/about/migration/23-01.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nvar / norm\n```\n\n----------------------------------------\n\nTITLE: Updating Pip Requirements for Scipp\nDESCRIPTION: Command to update the pip requirements using pip-compile-multi via tox.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/development/getting-started.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntox -e deps\n```\n\n----------------------------------------\n\nTITLE: Configuring Architecture Decision Records Toctree in reStructuredText\nDESCRIPTION: This snippet configures a table of contents tree (toctree) in Sphinx documentation for Architecture Decision Records. It sets the maximum depth to 1 and uses the glob directive to automatically include all files in the adr/ directory.\nSOURCE: https://github.com/scipp/scipp/blob/main/docs/development/architecture-decision-records.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n   :glob:\n\n   adr/*\n```\n\n----------------------------------------\n\nTITLE: Configuring Scipp Core Test Executable in CMake\nDESCRIPTION: Sets up the Scipp core test executable target, including source files, dependencies, and compiler options. It also configures test properties and sanitizers if enabled.\nSOURCE: https://github.com/scipp/scipp/blob/main/lib/core/test/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(TARGET_NAME \"scipp-core-test\")\nadd_dependencies(all-tests ${TARGET_NAME})\nadd_executable(\n  ${TARGET_NAME}\n  array_to_string_test.cpp\n  dict_test.cpp\n  dimensions_test.cpp\n  dtype_test.cpp\n  eigen_test.cpp\n  element_array_test.cpp\n  element_array_view_test.cpp\n  element_arithmetic_test.cpp\n  element_bin_detail_test.cpp\n  element_comparison_test.cpp\n  element_event_operations_test.cpp\n  element_geometric_operations_test.cpp\n  element_histogram_test.cpp\n  element_hyperbolic_test.cpp\n  element_logical_test.cpp\n  element_map_to_bins_test.cpp\n  element_math_test.cpp\n  element_special_values_test.cpp\n  element_to_unit_test.cpp\n  element_trigonometry_test.cpp\n  element_util_test.cpp\n  multi_index_test.cpp\n  slice_test.cpp\n  sizes_test.cpp\n  spatial_transforms_test.cpp\n  strides_test.cpp\n  string_test.cpp\n  subbin_sizes_test.cpp\n  time_point_test.cpp\n  value_and_variance_test.cpp\n  view_index_test.cpp\n  transform_common_test.cpp\n)\ntarget_link_libraries(\n  ${TARGET_NAME} LINK_PRIVATE scipp-core scipp_test_helpers GTest::gtest_main\n)\n\nif(WIN32)\n  target_compile_options(${TARGET_NAME} PRIVATE \"/bigobj\")\nendif()\n\nset_property(\n  TARGET ${TARGET_NAME} PROPERTY INTERPROCEDURAL_OPTIMIZATION\n                                 ${INTERPROCEDURAL_OPTIMIZATION_TESTS}\n)\nset_property(\n  TARGET ${TARGET_NAME} PROPERTY EXCLUDE_FROM_ALL $<NOT:$<BOOL:${FULL_BUILD}>>\n)\nif(SANITIZERS)\n  add_sanitizers(${TARGET_NAME})\nendif()\nscipp_test(${TARGET_NAME} core)\n```\n\n----------------------------------------\n\nTITLE: Configuring Subdirectories and Installation for Scipp\nDESCRIPTION: Sets up subdirectories for different components of the project and configures installation settings.\nSOURCE: https://github.com/scipp/scipp/blob/main/lib/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(common)\nif(BENCHMARK)\n  if(FULL_BUILD)\n    add_subdirectory(benchmark)\n  else()\n    add_subdirectory(benchmark EXCLUDE_FROM_ALL)\n  endif()\nendif()\nadd_subdirectory(units)\nadd_subdirectory(core)\nadd_subdirectory(variable)\nadd_subdirectory(dataset)\nadd_subdirectory(test)\nadd_subdirectory(python)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Target for Scipp Units Tests\nDESCRIPTION: Sets up a CMake target for building the scipp-units test executable. It establishes dependencies, links required libraries, and configures build properties like interprocedural optimization and sanitizer options.\nSOURCE: https://github.com/scipp/scipp/blob/main/lib/units/test/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# ~~~\n# SPDX-License-Identifier: BSD-3-Clause\n# Copyright (c) 2023 Scipp contributors (https://github.com/scipp)\n# ~~~\nset(TARGET_NAME \"scipp-units-test\")\nadd_dependencies(all-tests ${TARGET_NAME})\nadd_executable(${TARGET_NAME} dim_test.cpp unit_test.cpp)\ntarget_link_libraries(\n  ${TARGET_NAME} LINK_PRIVATE scipp-units scipp_test_helpers GTest::gtest_main\n)\nset_property(\n  TARGET ${TARGET_NAME} PROPERTY INTERPROCEDURAL_OPTIMIZATION\n                                 ${INTERPROCEDURAL_OPTIMIZATION_TESTS}\n)\nset_property(\n  TARGET ${TARGET_NAME} PROPERTY EXCLUDE_FROM_ALL $<NOT:$<BOOL:${FULL_BUILD}>>\n)\nif(SANITIZERS)\n  add_sanitizers(${TARGET_NAME})\nendif()\nscipp_test(${TARGET_NAME} units)\n```\n\n----------------------------------------\n\nTITLE: Configuring Element Array View Benchmark Executable in CMake\nDESCRIPTION: Sets up the element_array_view_benchmark executable, adds it as a dependency to all-benchmarks, and links it with the scipp-core library and benchmark framework.\nSOURCE: https://github.com/scipp/scipp/blob/main/lib/benchmark/CMakeLists.txt#2025-04-21_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(element_array_view_benchmark element_array_view_benchmark.cpp)\nadd_dependencies(all-benchmarks element_array_view_benchmark)\ntarget_link_libraries(\n  element_array_view_benchmark LINK_PRIVATE scipp-core\n  benchmark::benchmark_main\n)\n```\n\n----------------------------------------\n\nTITLE: Helper Script for Sanitizer Operations\nDESCRIPTION: Internal helper script that supports sanitizer operations. Not intended for direct usage by developers.\nSOURCE: https://github.com/scipp/scipp/blob/main/tools/README.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nrun_sanitizer.sh\n```"
  }
]