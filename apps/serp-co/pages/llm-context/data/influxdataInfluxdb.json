[
  {
    "owner": "influxdata",
    "repo": "influxdb",
    "content": "TITLE: Running InfluxDB with Processing Engine on Linux\nDESCRIPTION: Commands demonstrating how to unpack and run InfluxDB on Linux with the processing engine enabled, including various options for virtual environment configuration and package installation for plugins.\nSOURCE: https://github.com/influxdata/influxdb/blob/main/README_processing_engine.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# unpack tarball to /here\n$ tar -C /here --strip-components=1 -zxvf /path/to/build/influxdb3-<VERSION>_linux_amd64.tar.gz\n\n# without processing engine\n$ /here/influxdb3 serve ...\n$ /here/influxdb3 query ...\n\n# with processing engine (/path/to/plugins/.venv created automatically)\n$ mkdir /path/to/plugins\n$ /here/influxdb3 serve --plugin-dir /path/to/plugins ...        # server\n$ /here/influxdb3 create database foo                            # client\n$ /here/influxdb3 test schedule_plugin -d foo testme.py          # client\n... <plugins can use whatever is in /path/to/plugins/.venv> ...\n$ /here/influxdb3 install package bar                            # client\n... <plugins can now 'import bar'> ...\n$ /here/influxdb3 test schedule_plugin -d foo testme.py          # client\n\n# with processsing engine and alternate venv (/path/to/other-venv created automatically)\n# start server to create/use other-venv\n$ /here/influxdb3 serve --plugin-dir /path/to/plugins --virtual-env-location /path/to/other-venv\n...\n$ /here/influxdb3 test schedule_plugin -d foo testme.py          # client\n... <plugins can use whatever is in /path/to/other-venv> ...\n$ /here/influxdb3 install package bar                            # client\n... <plugins can now 'import bar'> ...\n$ /here/influxdb3 test schedule_plugin -d foo testme.py          # client\n\n# with processsing engine and alternate pre-created venv\n$ /here/python/bin/python3 -m venv /path/to/another-venv         # create another-venv\n$ source /path/to/another-venv/bin/activate\n(venv)$ python3 -m pip install foo\n(venv)$ python3 -m pip freeze > /path/to/another-venv/requirements.txt\n...\n(venv)$ deactivate\n\n# start server to use another-venv\n$ /here/influxdb3 serve --plugin-dir /path/to/plugins --virtual-env-location /path/to/another-venv\n... <plugins can now use whatever is in /path/to/another-venv> ...\n\n$ /here/influxdb3 test schedule_plugin -d foo testme.py          # client\n$ /here/influxdb3 install package bar                            # client\n... <plugins can now 'import bar' in /path/to/another-venv> ...\n$ /here/influxdb3 test schedule_plugin -d foo testme.py          # client\n```\n\n----------------------------------------\n\nTITLE: Running InfluxDB 3 Core with Local File Storage\nDESCRIPTION: Commands to run InfluxDB 3 Core server using local file storage, create an admin token, and perform operations with the unhashed token.\nSOURCE: https://github.com/influxdata/influxdb/blob/main/influxdb3/src/help/serve.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ninfluxdb3 serve --node-id node1 --object-store file --data-dir ~/.influxdb_data\ninfluxdb3 create token --admin\n# Write and query with unhashed token\n```\n\n----------------------------------------\n\nTITLE: Running InfluxDB with Local Storage\nDESCRIPTION: Example commands to start InfluxDB 3 with local file storage and create an admin token\nSOURCE: https://github.com/influxdata/influxdb/blob/main/influxdb3/src/help/serve_all.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ninfluxdb3 serve --node-id node1 --object-store file --data-dir ~/.influxdb_data\ninfluxdb3 create token --admin\n```\n\n----------------------------------------\n\nTITLE: Running InfluxDB 3 Core Server in Bash\nDESCRIPTION: Example command to start the InfluxDB 3 Core server with custom node ID, object store, and data directory.\nSOURCE: https://github.com/influxdata/influxdb/blob/main/influxdb3/src/help/influxdb3_all.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ninfluxdb3 serve --node-id my_node_name --object-store file --data-dir ~/.influxdb3_data\n```\n\n----------------------------------------\n\nTITLE: Running InfluxDB 3 Core Server with File Storage\nDESCRIPTION: Example command to start the InfluxDB 3 Core server with a specified node ID, using file-based object storage and a custom data directory location.\nSOURCE: https://github.com/influxdata/influxdb/blob/main/influxdb3/src/help/influxdb3.txt#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ninfluxdb3 serve --node-id my_node_name --object-store file --data-dir ~/.influxdb3_data\n```\n\n----------------------------------------\n\nTITLE: Running InfluxDB with Python-Build-Standalone on Linux/macOS\nDESCRIPTION: Demonstrates how to run the InfluxDB binary with a specified plugin directory. This command assumes that the previous steps for building and patching have been completed successfully.\nSOURCE: https://github.com/influxdata/influxdb/blob/main/README_processing_engine.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p /path/to/plugin/dir\n\n./target/<profile>/influxdb3 ... --plugin-dir /path/to/plugin/dir\n```\n\n----------------------------------------\n\nTITLE: Building InfluxDB with Python-Build-Standalone Support\nDESCRIPTION: Demonstrates how to build InfluxDB using Cargo with the PYO3 configuration file and necessary features enabled. This command compiles InfluxDB with support for AWS, GCP, Azure, and jemalloc memory allocator.\nSOURCE: https://github.com/influxdata/influxdb/blob/main/README_processing_engine.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nPYO3_CONFIG_FILE=${PWD}/pyo3_config_file.txt cargo build --features \"aws,gcp,azure,jemalloc_replacing_malloc\"\n```\n\n----------------------------------------\n\nTITLE: Configuring PYO3 for Python-Build-Standalone in InfluxDB\nDESCRIPTION: Creates a configuration file for PYO3 to use the downloaded python-build-standalone. This file specifies the Python implementation, version, library paths, and other build settings.\nSOURCE: https://github.com/influxdata/influxdb/blob/main/README_processing_engine.md#2025-04-21_snippet_3\n\nLANGUAGE: txt\nCODE:\n```\nimplementation=CPython\nversion=3.11\nshared=true\nabi3=false\nlib_name=python3.11\nlib_dir=/tmp/python/lib\nexecutable=/tmp/python/bin/python3.11\npointer_width=64\nbuild_flags=\nsuppress_build_script_link_lines=false\n```\n\n----------------------------------------\n\nTITLE: Example PYO3 Configuration for Official InfluxDB Builds on Linux\nDESCRIPTION: Sample configuration file content for PYO3 build configuration that points to the unpacked python-build-standalone directory. This is used during the official build process to properly link InfluxDB with the standalone Python distribution.\nSOURCE: https://github.com/influxdata/influxdb/blob/main/README_processing_engine.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nimplementation=CPython\nversion=3.11\nshared=true\nabi3=false\nlib_name=python3.11\nlib_dir=/path/to/python-standalone/python/lib\nexecutable=/path/to/python-standalone/python/bin/python3.11\npointer_width=64\nbuild_flags=\nsuppress_build_script_link_lines=false\n```\n\n----------------------------------------\n\nTITLE: Installing InfluxDB Build and Runtime Dependencies on Debian/Ubuntu\nDESCRIPTION: Commands for installing the necessary build and runtime dependencies on Debian/Ubuntu systems to compile InfluxDB with Python support using the system's Python installation.\nSOURCE: https://github.com/influxdata/influxdb/blob/main/README_processing_engine.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# build dependencies\n$ sudo apt-get install build-essential pkg-config libssl-dev clang lld \\\n    git protobuf-compiler python3 python3-dev python3-pip\n\n# runtime dependencies\n$ sudo apt-get install python3 python3-pip python3-venv\n\n# build\n$ cargo build\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Library Paths for InfluxDB-Python Integration\nDESCRIPTION: Shell commands used to patch the runtime library search paths for InfluxDB to find the bundled Python libraries. This includes Linux-specific commands using patchelf and macOS-specific commands using install_name_tool.\nSOURCE: https://github.com/influxdata/influxdb/blob/main/README_processing_engine.md#2025-04-21_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\n# linux\n$ patchelf --set-rpath '$ORIGIN/python/lib:$ORIGIN/../lib/influxdb3/python/lib' target/.../influxdb3\n\n# osx\n$ install_name_tool -change '/install/lib/libpython3.NN.dylib' \\\n    '@executable_path/python/lib/libpythonNN.dylib' target/.../influxdb3\n$ rcodesign sign target/.../influxdb3  # only with osxcross' install_name_tool\n```\n\n----------------------------------------\n\nTITLE: Running InfluxDB 3 Core with AWS S3\nDESCRIPTION: Commands to run InfluxDB 3 Core server using AWS S3 for storage, create an admin token, and perform operations with the unhashed token. Requires AWS access key and secret.\nSOURCE: https://github.com/influxdata/influxdb/blob/main/influxdb3/src/help/serve.txt#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ninfluxdb3 serve --node-id node1 --object-store s3 --bucket influxdb-data \\\n  --aws-access-key-id KEY --aws-secret-access-key SECRET\ninfluxdb3 create token --admin\n# Write and query with unhashed token\n```\n\n----------------------------------------\n\nTITLE: Running InfluxDB with AWS S3\nDESCRIPTION: Example commands to start InfluxDB 3 with AWS S3 storage backend and create an admin token\nSOURCE: https://github.com/influxdata/influxdb/blob/main/influxdb3/src/help/serve_all.txt#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ninfluxdb3 serve --node-id node1 --object-store s3 --bucket influxdb-data \\\n  --aws-access-key-id KEY --aws-secret-access-key SECRET\ninfluxdb3 create token --admin\n```\n\n----------------------------------------\n\nTITLE: Patching InfluxDB Binary for libpython on Linux\nDESCRIPTION: Uses patchelf to modify the InfluxDB binary's runtime path (rpath) to locate the libpython library in a relative directory. This step is necessary for Linux builds to find the correct Python library at runtime.\nSOURCE: https://github.com/influxdata/influxdb/blob/main/README_processing_engine.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npatchelf --set-rpath '$ORIGIN/python/lib' ./target/<profile>/influxdb3\n```\n\n----------------------------------------\n\nTITLE: Patching InfluxDB Binary for libpython on macOS\nDESCRIPTION: Uses install_name_tool to change the expected path of the libpython library in the InfluxDB binary. This step is necessary for macOS builds to locate the correct Python library at runtime.\nSOURCE: https://github.com/influxdata/influxdb/blob/main/README_processing_engine.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ninstall_name_tool -change '/install/lib/libpython3.11.dylib' '@executable_path/python/lib/libpython3.11.dylib' ./target/<profile>/influxdb3\n```\n\n----------------------------------------\n\nTITLE: Linking Python Runtime for InfluxDB on Linux/macOS\nDESCRIPTION: Creates a symbolic link to the Python runtime directory in the InfluxDB target directory. This ensures that InfluxDB can find the necessary Python files and libraries when executed.\nSOURCE: https://github.com/influxdata/influxdb/blob/main/README_processing_engine.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ntest -e ./target/<profile>/python || ln -s /tmp/python ./target/<profile>/python\n```\n\n----------------------------------------\n\nTITLE: Running InfluxDB with Python-Build-Standalone on Windows\nDESCRIPTION: Shows the steps to run InfluxDB on Windows, which requires copying the binary to the Python standalone directory and executing it from there with the specified plugin directory.\nSOURCE: https://github.com/influxdata/influxdb/blob/main/README_processing_engine.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncp ./target/<profile>/influxdb3 \\path\\to\\python-standalone\\python\n\\path\\to\\python-standalone\\python\\influxdb3.exe ... --plugin-dir \\path\\to\\plugin\\dir\n```\n\n----------------------------------------\n\nTITLE: Running End-to-End Tests with Server Logs\nDESCRIPTION: Command for executing end-to-end tests in the influxdb3 package with server logs emitted to stdout for debugging.\nSOURCE: https://github.com/influxdata/influxdb/blob/main/CONTRIBUTING.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nTEST_LOG= cargo nextest run -p influxdb3 --nocapture\n```\n\n----------------------------------------\n\nTITLE: Enabling Basic Logging During Test Execution\nDESCRIPTION: Command for enabling INFO level logging when running tests, with full span events for better debugging visibility.\nSOURCE: https://github.com/influxdata/influxdb/blob/main/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nTEST_LOG= RUST_LOG=info RUST_LOG_SPAN_EVENTS=full cargo nextest run --workspace --nocapture\n```\n\n----------------------------------------\n\nTITLE: Customizing Log Levels for Different Modules During Testing\nDESCRIPTION: Command demonstrating how to set different log levels for specific modules while running tests, reducing noise from verbose components.\nSOURCE: https://github.com/influxdata/influxdb/blob/main/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nRUST_LOG=debug,hyper::proto::h1=info,h2=info RUST_LOG_SPAN_EVENTS=full cargo nextest run --workspace --nocapture\n```\n\n----------------------------------------\n\nTITLE: Running All Tests in the InfluxDB Workspace\nDESCRIPTION: Command to execute all tests across the entire InfluxDB workspace using cargo-nextest.\nSOURCE: https://github.com/influxdata/influxdb/blob/main/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo nextest run --workspace\n```\n\n----------------------------------------\n\nTITLE: Installing cargo-nextest for InfluxDB Testing\nDESCRIPTION: Command to install cargo-nextest, a required testing tool for InfluxDB3. This is a prerequisite for running the test suite.\nSOURCE: https://github.com/influxdata/influxdb/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo install cargo-nextest --locked\n```\n\n----------------------------------------\n\nTITLE: Building InfluxDB3 with a Specific Profile\nDESCRIPTION: Command to build the InfluxDB3 binary using cargo with a selected profile. This is the first step before profiling the application.\nSOURCE: https://github.com/influxdata/influxdb/blob/main/PROFILING.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo build -p influxdb3 --profile <profile>\n```\n\n----------------------------------------\n\nTITLE: Running InfluxDB3 Server for Profiling\nDESCRIPTION: Command to run the compiled InfluxDB3 server for profiling, using the full path to the binary in the target directory.\nSOURCE: https://github.com/influxdata/influxdb/blob/main/PROFILING.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n<path_to_working_directory>/target/<profile>/influxdb3 serve\n```\n\n----------------------------------------\n\nTITLE: Creating Entitlements Plist for InfluxDB3 Profiling\nDESCRIPTION: Command to create a temporary entitlements plist file needed for memory allocation profiling on macOS, especially on aarch64 systems.\nSOURCE: https://github.com/influxdata/influxdb/blob/main/PROFILING.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n/usr/libexec/PlistBuddy -c \"Add :com.apple.security.get-task-allow bool true\" tmp.entitlements\n```\n\n----------------------------------------\n\nTITLE: Code Signing InfluxDB3 Binary for Instruments Profiling\nDESCRIPTION: Command to code sign the InfluxDB3 binary with the necessary entitlements for Instruments' Allocations profiler on macOS.\nSOURCE: https://github.com/influxdata/influxdb/blob/main/PROFILING.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncodesign -s - --entitlements tmp.entitlements -f target/release/influxdb3\n```\n\n----------------------------------------\n\nTITLE: Verifying Code Signing of InfluxDB3 Binary\nDESCRIPTION: Command to verify that the InfluxDB3 binary has been properly code signed with the required entitlements for profiling.\nSOURCE: https://github.com/influxdata/influxdb/blob/main/PROFILING.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncodesign --display --entitlements - target/release/influxdb3\n```\n\n----------------------------------------\n\nTITLE: Checking Entitlements of Running InfluxDB3 Process\nDESCRIPTION: Command to verify the entitlements of a running InfluxDB3 process using its PID, useful for confirming proper setup for allocation profiling.\nSOURCE: https://github.com/influxdata/influxdb/blob/main/PROFILING.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncodesign --display --entitlements - +<PID>\n```\n\n----------------------------------------\n\nTITLE: Running the Load Generator Analysis Application\nDESCRIPTION: Command to start the Flask application with a specified results directory path argument. The app will be accessible through a local web browser.\nSOURCE: https://github.com/influxdata/influxdb/blob/main/influxdb3_load_generator/analysis/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython app.py <path to results directory>\n```\n\n----------------------------------------\n\nTITLE: Installing Flask Dependencies for Load Generator Analysis\nDESCRIPTION: Command to install the Flask framework via pip package manager, which is required to run the analysis application.\nSOURCE: https://github.com/influxdata/influxdb/blob/main/influxdb3_load_generator/analysis/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install flask\n```\n\n----------------------------------------\n\nTITLE: Installing clippy for Rust Linting\nDESCRIPTION: Command to add the clippy component using rustup, which is used for enforcing Rust best practices and catching common mistakes.\nSOURCE: https://github.com/influxdata/influxdb/blob/main/CONTRIBUTING.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nrustup component add clippy\n```\n\n----------------------------------------\n\nTITLE: Running clippy Linting Checks\nDESCRIPTION: Command to run clippy on all targets in the workspace, treating warnings as errors to maintain code quality standards.\nSOURCE: https://github.com/influxdata/influxdb/blob/main/CONTRIBUTING.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncargo clippy --all-targets --workspace -- -D warnings\n```\n\n----------------------------------------\n\nTITLE: Installing rustfmt for Code Formatting\nDESCRIPTION: Command to add the rustfmt component using rustup, which is required for formatting Rust code according to the project's style guidelines.\nSOURCE: https://github.com/influxdata/influxdb/blob/main/CONTRIBUTING.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nrustup component add rustfmt\n```\n\n----------------------------------------\n\nTITLE: Formatting Code with rustfmt\nDESCRIPTION: Command to automatically format all Rust code in the project according to the rustfmt style guidelines.\nSOURCE: https://github.com/influxdata/influxdb/blob/main/CONTRIBUTING.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncargo fmt --all\n```\n\n----------------------------------------\n\nTITLE: Creating Git Tag for InfluxDB Release in Bash\nDESCRIPTION: Commands to create an annotated git tag for various release types (beta, release candidate, or stable release). The tag format follows a specific pattern that is used by the CI/CD system to build and publish packages.\nSOURCE: https://github.com/influxdata/influxdb/blob/main/RELEASE.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit tag -a 'v3.0.0-0.beta.1' -m '3.0.0-beta.1 release'\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit tag -a 'v3.0.0-0.beta.2' -m '3.0.0-beta.2 release'\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit tag -a 'v3.0.0-0.rc.1' -m '3.0.0-rc.1 release'\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit tag -a 'v3.0.0' -m '3.0.0 release'\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit tag -a 'v3.0.1' -m '3.0.1 release'\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit tag -a 'v3.1.0' -m '3.1.0 release'\n```\n\n----------------------------------------\n\nTITLE: Testing InfluxDB Release Download in Bash\nDESCRIPTION: Command to verify a successful release by downloading the published package from the official download server. This serves as a quick test to ensure the release process completed successfully.\nSOURCE: https://github.com/influxdata/influxdb/blob/main/RELEASE.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -LO https://dl.influxdata.com/influxdb/releases/influxdb3-3.0.0-0.beta.1_linux_amd64.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Email Contact Information for Security Reporting\nDESCRIPTION: Email address for reporting security vulnerabilities to InfluxData security team.\nSOURCE: https://github.com/influxdata/influxdb/blob/main/SECURITY.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nsecurity@influxdata.com\n```\n\n----------------------------------------\n\nTITLE: Saved PropTest Failure Case for Average Calculation Test\nDESCRIPTION: A saved seed for a specific test failure case related to average calculation. The seed references a test case with parameters for minimum, maximum, current average, number of samples, and a new value, all set to particular values that previously caused a test failure.\nSOURCE: https://github.com/influxdata/influxdb/blob/main/influxdb3_telemetry/proptest-regressions/stats.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncc 4ce4c13bc33ca25f320b2bd5cda9aa233e8cc798e809301cccf38eddf22fa7c0 # shrinks to min = 0, max = 0, curr_avg = 4339, num_samples = 0, new_value = 0\n```"
  }
]