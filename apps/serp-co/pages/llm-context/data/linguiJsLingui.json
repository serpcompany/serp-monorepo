[
  {
    "owner": "lingui",
    "repo": "js-lingui",
    "content": "TITLE: Setting up Lingui I18nProvider in React\nDESCRIPTION: Configures the Lingui I18nProvider to wrap the main App component, enabling internationalization features throughout the application.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/tutorials/react.md#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\n\nimport { i18n } from \"@lingui/core\";\nimport { I18nProvider } from \"@lingui/react\";\nimport { messages } from \"./locales/en/messages\";\nimport Inbox from \"./Inbox\";\n\ni18n.load(\"en\", messages);\ni18n.activate(\"en\");\n\nconst App = () => (\n  <I18nProvider i18n={i18n}>\n    <Inbox />\n  </I18nProvider>\n);\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Internationalization with Lingui in React\nDESCRIPTION: This React component demonstrates how to use Lingui for internationalization. It shows various features including basic text translation with <Trans>, attribute translation with t macro, variables in translations, React elements within translations, and plural forms using the Plural component.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/introduction.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\";\nimport { Trans, Plural, useLingui } from \"@lingui/react/macro\";\n\nexport default function Lingui({ numUsers, name = \"You\" }) {\n  const { t } = useLingui();\n\n  return (\n    <div>\n      <h1>\n        {/* Localized messages are simply wrapped in <Trans> */}\n        <Trans>Internationalization in React</Trans>\n      </h1>\n\n      {/* Element attributes are translated using t macro */}\n      <img src=\"./logo.png\" alt={t`Logo of Lingui Project`} />\n\n      <p>\n        {/* Variables are passed to messages in the same way as in JSX */}\n        <Trans>Hello {name}, Lingui is a readable, automated, and optimized i18n for JavaScript.</Trans>\n      </p>\n\n      {/* React Elements inside messages works in the same way as in JSX */}\n      <p>\n        <Trans>\n          Read the <a href=\"https://lingui.dev\">documentation</a>\n          for more info.\n        </Trans>\n      </p>\n\n      {/*\n        Plurals are managed using ICU plural rules.\n        Nesting of i18n components is allowed.\n        Syntactically valid message in ICU MessageFormat is guaranteed.\n      */}\n      <Plural\n        value={numUsers}\n        one={\n          <span>\n            Only <strong>one</strong> user is using this library!\n          </span>\n        }\n        other={\n          <span>\n            <strong>{numUsers}</strong> users are using this library!\n          </span>\n        }\n      />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Compiled Messages and Activating Language\nDESCRIPTION: Shows how to import compiled message catalogs and activate a specific language in a React application using Lingui.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/tutorials/react.md#2025-04-17_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\n\nimport { i18n } from \"@lingui/core\";\nimport { I18nProvider } from \"@lingui/react\";\nimport { messages as enMessages } from \"./locales/en/messages\";\nimport { messages as csMessages } from \"./locales/cs/messages\";\nimport Inbox from \"./Inbox\";\n\ni18n.load({\n  en: enMessages,\n  cs: csMessages,\n});\ni18n.activate(\"cs\");\n\nconst App = () => (\n  <I18nProvider i18n={i18n}>\n    <Inbox />\n  </I18nProvider>\n);\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for Lingui\nDESCRIPTION: JSON configuration for adding the Lingui Babel plugin to the Babel configuration file.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/installation.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@lingui/babel-plugin-lingui-macro\"]\n}\n```\n\n----------------------------------------\n\nTITLE: React Integration with Dynamic Catalog Loading\nDESCRIPTION: Demonstrates how to integrate the dynamic catalog loading functionality within a React application using I18nProvider and useEffect hook.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/guides/dynamic-loading-catalogs.md#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useEffect } from \"react\";\nimport App from \"./App\";\n\nimport { I18nProvider } from \"@lingui/react\";\nimport { i18n } from \"@lingui/core\";\nimport { defaultLocale, dynamicActivate } from \"./i18n\";\n\nconst I18nApp = () => {\n  useEffect(() => {\n    // With this method we dynamically load the catalogs\n    dynamicActivate(defaultLocale);\n  }, []);\n\n  return (\n    <I18nProvider i18n={i18n}>\n      <App />\n    </I18nProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Inbox Component in React\nDESCRIPTION: Defines an Inbox component with static text, dynamic content, and event handling for a simple mailbox interface.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/tutorials/react.md#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\";\n\nexport default function Inbox() {\n  const messages = [{}, {}];\n  const messagesCount = messages.length;\n  const lastLogin = new Date();\n  const markAsRead = () => {\n    alert(\"Marked as read.\");\n  };\n\n  return (\n    <div>\n      <h1>Message Inbox</h1>\n\n      <p>\n        See all <a href=\"/unread\">unread messages</a>\n        {\" or \"}\n        <a onClick={markAsRead}>mark them</a> as read.\n      </p>\n\n      <p>\n        {messagesCount === 1\n          ? `There's ${messagesCount} message in your inbox.`\n          : `There are ${messagesCount} messages in your inbox.`}\n      </p>\n\n      <footer>Last login on {lastLogin.toLocaleDateString()}.</footer>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct Usage of Lingui t Macro in React\nDESCRIPTION: This snippet illustrates the correct way to use the Lingui 't' macro within a function, ensuring proper reactivity to locale changes. It also shows an incorrect usage at the module level.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/macro.mdx#2025-04-17_snippet_25\n\nLANGUAGE: jsx\nCODE:\n```\nimport { t } from \"@lingui/core/macro\";\n\n// ❌ Bad! This won't work because the `t` macro is used at the module level.\n// The `t` macro returns a string, and once this string is assigned, it won't react to locale changes.\nconst colors = [t`Red`, t`Orange`, t`Yellow`, t`Green`];\n\n// ✅ Good! Every time the function is executed, the `t` macro will be re-executed as well,\n// and the correctly translated color labels will be returned.\nfunction getColors() {\n  return [t`Red`, t`Orange`, t`Yellow`, t`Green`];\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Internationalized Inbox Component\nDESCRIPTION: A full example showing a React component with various internationalization features including plurals, dates, and translated strings.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/tutorials/react.md#2025-04-17_snippet_21\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\";\nimport { Trans, Plural, useLingui } from \"@lingui/react/macro\";\n\nexport default function Inbox() {\n  const { i18n, t } = useLingui();\n  const messages = [{}, {}];\n  const messagesCount = messages.length;\n  const lastLogin = new Date();\n  const markAsRead = () => {\n    alert(t`Marked as read.`);\n  };\n\n  return (\n    <div>\n      <h1>\n        <Trans>Message Inbox</Trans>\n      </h1>\n\n      <p>\n        <Trans>\n          See all <a href=\"/unread\">unread messages</a>\n          {\" or \"}\n          <a onClick={markAsRead}>mark them</a> as read.\n        </Trans>\n      </p>\n\n      <p>\n        <Plural\n          value={messagesCount}\n          one=\"There's # message in your inbox\"\n          other=\"There are # messages in your inbox\"\n        />\n      </p>\n\n      <footer>\n        <Trans>Last login on {i18n.date(lastLogin)}.</Trans>\n      </footer>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Lingui i18n in JavaScript\nDESCRIPTION: Initializes the Lingui i18n singleton by loading and activating a message catalog for English. This is the basic setup required before using any translation functionality.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/tutorials/javascript.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { i18n } from \"@lingui/core\";\nimport { messages } from \"path-to-locale/en/messages.js\";\n\ni18n.load(\"en\", messages);\ni18n.activate(\"en\");\n```\n\n----------------------------------------\n\nTITLE: Using Trans Macro for Static Messages in JSX\nDESCRIPTION: Demonstrates how to use the Trans macro for translating static messages in JSX. It shows the transformation of the macro into a Trans component with an auto-generated ID.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/macro.mdx#2025-04-17_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Trans } from \"@lingui/react/macro\";\n<Trans>Refresh inbox</Trans>;\n\n// ↓ ↓ ↓ ↓ ↓ ↓\n\nimport { Trans } from \"@lingui/react\";\n<Trans id=\"EsCV2T\" message=\"Refresh inbox\" />;\n```\n\n----------------------------------------\n\nTITLE: Using Trans Macro with Custom ID in JSX\nDESCRIPTION: Shows how to use the Trans macro with a custom ID for the message. This allows for explicit control over the message identifier in the catalog.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/macro.mdx#2025-04-17_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Trans } from \"@lingui/react/macro\";\n<Trans id=\"message.attachment_saved\">Attachment {name} saved.</Trans>;\n\n// ↓ ↓ ↓ ↓ ↓ ↓\n\nimport { Trans } from \"@lingui/react\";\n<Trans id=\"message.attachment_saved\" message=\"Attachment {name} saved.\" />;\n```\n\n----------------------------------------\n\nTITLE: Basic Plural Macro Usage\nDESCRIPTION: Demonstrates how to use the plural macro for handling different plural forms. The macro transforms the plural options into an ICU MessageFormat plural pattern.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/macro.mdx#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { plural } from \"@lingui/core/macro\";\nconst message = plural(count, {\n  one: \"# Book\",\n  other: \"# Books\",\n});\n\n// ↓ ↓ ↓ ↓ ↓ ↓\n\nimport { i18n } from \"@lingui/core\";\nconst message = i18n._(\n  /*i18n*/ {\n    id: \"V/M0Vc\",\n    message: \"{count, plural, one {# Book} other {# Books}}\",\n    values: { count },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Lingui Trans Component with Explicit ID in JSX\nDESCRIPTION: This snippet illustrates using the Lingui Trans component in JSX with an explicitly provided ID. It shows how the component transforms into a Trans element with the specified ID and message.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/macro.mdx#2025-04-17_snippet_37\n\nLANGUAGE: jsx\nCODE:\n```\n<Trans id=\"msg.refresh\">\n   Refresh inbox\n</Trans>\n\n// ↓ ↓ ↓ ↓ ↓ ↓\n\n<Trans\n   id=\"msg.refresh\"\n   message=\"Refresh inbox\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Catalog Loading with Lingui\nDESCRIPTION: Function to dynamically load and activate language catalogs using dynamic imports. Shows how to load locale-specific messages and activate them in the i18n instance.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/vite-plugin.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function dynamicActivate(locale: string) {\n  const { messages } = await import(`./locales/${locale}.po`);\n\n  i18n.load(locale, messages);\n  i18n.activate(locale);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Trans Macro with Inline Markup in JSX\nDESCRIPTION: Shows how to use the Trans macro with inline markup in JSX. It demonstrates how components and HTML tags are replaced by indexed tags in the transformed output.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/macro.mdx#2025-04-17_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Trans } from \"@lingui/react/macro\";\n\n<Trans>\n  Read the <a href=\"/docs\">docs</a>.\n</Trans>;\n\n// ↓ ↓ ↓ ↓ ↓ ↓\n\nimport { Trans } from \"@lingui/react\";\n<Trans id={\"mk8bSG\"} message=\"Read the <0>docs</0>.\" components={{ 0: <a href=\"/docs\" /> }} />;\n```\n\n----------------------------------------\n\nTITLE: Using defineMessage Macro with Comments in JavaScript\nDESCRIPTION: Demonstrates how to use the defineMessage macro with a comment for translators. The comment is extracted into the message catalog but removed from production code.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/macro.mdx#2025-04-17_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineMessage } from \"@lingui/core/macro\";\nconst message = defineMessage({\n  comment: \"Link in navigation pointing to About page\",\n  message: \"About us\",\n});\n\n// ↓ ↓ ↓ ↓ ↓ ↓\n\nconst message = /*i18n*/ {\n  id: \"+mNwru\",\n  comment: \"Link in navigation pointing to About page\",\n  message: \"About us\",\n};\n```\n\n----------------------------------------\n\nTITLE: Using Plural Forms with Lingui in JavaScript\nDESCRIPTION: This example demonstrates how to use the plural macro in Lingui to handle basic English pluralization with 'one' and 'other' forms. The snippet shows how the plural function accepts a numeric value and an object containing plural variants.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/guides/plurals.md#2025-04-17_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nplural(numBooks, {\n  one: \"# book\",\n  other: \"# books\",\n});\n```\n\n----------------------------------------\n\nTITLE: Internationalizing React Components with Lingui\nDESCRIPTION: This snippet demonstrates how to use the Trans component from @lingui/react/macro to internationalize a React component. It shows how to include a translatable message with a link, along with an optional message ID and translator comment.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/README.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Trans } from \"@lingui/react/macro\"\n\nfunction App() {\n  return (\n    <Trans\n      id=\"msg.docs\" // Optional message id\n      comment=\"Docs link on the website\" // Comment for translators, optional\n    >\n      Read the <a href=\"https://lingui.dev\">documentation</a>\n      for more info.\n    </Trans>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Root Layout with Lingui for Server Components\nDESCRIPTION: This code demonstrates how to set up the root layout for a Next.js app with Lingui support for server components. It initializes the i18n instance and makes it available for server-side rendering.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/tutorials/react-rsc.md#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { setI18n } from \"@lingui/react/server\";\nimport { getI18nInstance } from \"./appRouterI18n\";\nimport { LinguiClientProvider } from \"./LinguiClientProvider\";\n\ntype Props = {\n  params: {\n    lang: string;\n  };\n  children: React.ReactNode;\n};\n\nexport default function RootLayout({ params: { lang }, children }: Props) {\n  const i18n = getI18nInstance(lang); // get a ready-made i18n instance for the given locale\n  setI18n(i18n); // make it available server-side for the current request\n\n  return (\n    <html lang={lang}>\n      <body>\n        <LinguiClientProvider initialLocale={lang} initialMessages={i18n.messages}>\n          <YourApp />\n        </LinguiClientProvider>\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up I18nProvider with default component\nDESCRIPTION: Complete example of configuring I18nProvider at the application root, including loading messages, activating a locale, and setting a default rendering component.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/react.md#2025-04-17_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\";\nimport { I18nProvider } from \"@lingui/react\";\nimport { i18n } from \"@lingui/core\";\nimport { messages as messagesEn } from \"./locales/en/messages.js\";\n\ni18n.load({\n  en: messagesEn,\n});\ni18n.activate(\"en\");\n\nconst DefaultI18n = ({ children }) => <span>{children}</span>;\n\nconst App = () => {\n  return (\n    <I18nProvider i18n={i18n} defaultComponent={DefaultI18n}>\n      // rest of the app\n    </I18nProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Comparing Lingui Macro and Runtime Component\nDESCRIPTION: Illustrates the transformation of a Lingui macro to its equivalent runtime component, showing how macros simplify internationalization syntax.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/tutorials/react.md#2025-04-17_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Trans } from \"@lingui/react/macro\";\n\n<Trans>Hello {name}</Trans>;\n\n// ↓ ↓ ↓ ↓ ↓ ↓\n\nimport { Trans } from \"@lingui/react\";\n\n<Trans id=\"OVaF9k\" message=\"Hello {name}\" values={{ name }} />;\n```\n\n----------------------------------------\n\nTITLE: Using t Macro with Complex Expressions\nDESCRIPTION: Shows how expressions other than simple variables are handled in t macro. Complex expressions are referenced by numeric index in the transformed message.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/macro.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { t } from \"@lingui/core/macro\";\nconst message = t`Today is ${new Date()}`;\n\n// ↓ ↓ ↓ ↓ ↓ ↓\n\nimport { i18n } from \"@lingui/core\";\n\nconst message = i18n._(\n  /*i18n*/ {\n    id: \"2aJT27\",\n    message: \"Today is {0}\",\n    values: { 0: new Date() },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Using selectOrdinal Macro for Ordinal Numbers\nDESCRIPTION: Shows how to use the selectOrdinal macro to handle ordinal numbers like 1st, 2nd, 3rd. This macro transforms into an ICU MessageFormat selectOrdinal pattern.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/macro.mdx#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { selectOrdinal } from \"@lingui/core/macro\";\nconst message = selectOrdinal(count, {\n  one: \"#st\",\n  two: \"#nd\",\n  few: \"#rd\",\n  other: \"#th\",\n});\n\n// ↓ ↓ ↓ ↓ ↓ ↓\n\nimport { i18n } from \"@lingui/core\";\nconst message = i18n._(\n  /*i18n*/ {\n    id: \"V8xI3w\",\n    message: \"{count, selectOrdinal, one {#st} two {#nd} few {#rd} other {#th}}\",\n    values: { count },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Setting up I18nProvider with Trans Component for React Native\nDESCRIPTION: Code showing how to wrap a React Native app with I18nProvider and use the Trans macro to translate UI text elements.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/tutorials/react-native.md#2025-04-17_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { I18nProvider, TransRenderProps } from \"@lingui/react\";\nimport { Trans } from \"@lingui/react/macro\";\nimport { i18n } from \"@lingui/core\";\nimport { Text } from \"react-native\";\n\ni18n.loadAndActivate({ locale: \"en\", messages });\n\nconst DefaultComponent = (props: TransRenderProps) => {\n  return <Text>{props.children}</Text>;\n};\n\n<I18nProvider i18n={i18n} defaultComponent={DefaultComponent}>\n <AppRoot />\n</I18nProvider>\n\n// later in the React element tree:\n<Text style={styles.heading}><Trans>Message Inbox</Trans></Text>\n```\n\n----------------------------------------\n\nTITLE: Basic Text Translation with Lingui in JavaScript\nDESCRIPTION: Demonstrates simple text translation using Lingui's t macro. Shows both static text translation and interpolation with variables.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/tutorials/javascript.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { t } from \"@lingui/core/macro\";\n\nt`Hello World!`;\n// becomes \"Salut le monde!\"\n\nconst name = \"Fred\";\nt`My name is ${name}`;\n// becomes \"Je m'appelle Fred\"\n```\n\n----------------------------------------\n\nTITLE: Complex Nested Formatting with Lingui in JavaScript\nDESCRIPTION: Demonstrates advanced usage with nested message formats combining select and plural macros for complex localization scenarios with gender-based and count-based variations.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/tutorials/javascript.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { t, select, plural } from \"@lingui/core/macro\";\n\nselect(gender, {\n  offset: 1,\n  female: plural(numOfGuests, {\n    offset: 1,\n    0: t`${host} does not give a party.`,\n    1: t`${host} invites ${guest} to her party.`,\n    2: t`${host} invites ${guest} and one other person to her party.`,\n    other: t`${host} invites ${guest} and # other people to her party.`\n  }),\n  male: plural(value, {...}),\n  other: plural(value, {...}),\n});\n```\n\n----------------------------------------\n\nTITLE: Wrapping JSX Content with Trans Macro in React\nDESCRIPTION: Demonstrates how to use the Trans macro to wrap JSX content containing variables, HTML, and components for internationalization.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/tutorials/react.md#2025-04-17_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<p>\n  <Trans>\n    See all <a href=\"/unread\">unread messages</a>\n    {\" or \"}\n    <a onClick={markAsRead}>mark them</a> as read.\n  </Trans>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Complete I18nProvider and Translation Usage Example\nDESCRIPTION: A more complete example showing how to use I18nProvider with both Trans components and useLingui hooks in a React Native component.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/tutorials/react-native.md#2025-04-17_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { I18nProvider } from \"@lingui/react\";\nimport { Trans, useLingui } from \"@lingui/react/macro\";\nimport { i18n } from \"@lingui/core\";\n\n<I18nProvider i18n={i18n}>\n  <AppRoot />\n</I18nProvider>;\n//...\nconst Inbox = ({ markAsRead }) => {\n  const { t } = useLingui();\n  return (\n    <View>\n      <Text style={styles.heading}>\n        <Trans>Message Inbox</Trans>\n      </Text>\n      <Button onPress={markAsRead} title={t`Mark messages as read`} />\n    </View>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Lingui plural Macro Usage in JavaScript\nDESCRIPTION: This example shows how to use the Lingui 'plural' macro for handling pluralization. It demonstrates the transformation of the plural macro into an internationalization object with plural forms.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/macro.mdx#2025-04-17_snippet_30\n\nLANGUAGE: js\nCODE:\n```\nplural(count, {\n  one: \"# Message\",\n  other: \"# Messages\",\n});\n\n// ↓ ↓ ↓ ↓ ↓ ↓\n\ni18n._(\n  /*i18n*/ {\n    id: \"4w2nim\",\n    message: \"{count, plural, one {# Message} other {# Messages}}\",\n    values: { count },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Using Offset with Plural Forms in ICU MessageFormat\nDESCRIPTION: Demonstrates using the offset feature with plural forms to create more natural-sounding messages that account for the current user in the count.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/guides/message-format.md#2025-04-17_snippet_2\n\nLANGUAGE: icu-message-format\nCODE:\n```\n{count, plural, offset:1\n                =0 {Nobody read this message}\n                =1 {Only you read this message}\n                one {You and # friend read this message}\n                other {You and # friends read this message}\n```\n\n----------------------------------------\n\nTITLE: Basic Trans Component Usage in React with Lingui\nDESCRIPTION: Demonstrates different ways to use the Trans component for translations including simple messages, dynamic values, translator comments, and component formatting.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/react.md#2025-04-17_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\";\nimport { Trans } from \"@lingui/react\";\n\nconst MyComponent = () => {\n  return (\n    <div>\n      {/* Simple translation without dynamic values */}\n      <Trans id=\"my.message\" message=\"Hello World\" />\n\n      {/* Translation with dynamic values */}\n      <Trans id=\"greeting\" message=\"Hello {name}\" values={{ name: \"Arthur\" }} />\n\n      {/* Translation with a comment for translators */}\n      <Trans id=\"hello.world\" message=\"Hello world\" comment=\"A message that greets the user\" />\n\n      {/* Translation with a component for formatting */}\n      <Trans\n        id=\"link\"\n        message=\"Read <link>Description</link> below.\"\n        components={{ link: <a href=\"/docs\">Documentation</a> }}\n      />\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Loading and Activating Locales with i18n.loadAndActivate\nDESCRIPTION: Shows how to load compiled message catalogs and activate a specific locale.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/core.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { i18n } from \"@lingui/core\";\n\nconst { messages } = await import(`${locale}/messages.js`);\ni18n.loadAndActivate({ locale, messages });\n```\n\n----------------------------------------\n\nTITLE: Advanced Plural JSX Macro Usage with Offset and Exact Matches\nDESCRIPTION: Shows an advanced example of using the Plural JSX macro with offset and exact matches. This demonstrates how to handle complex pluralization scenarios in React components.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/macro.mdx#2025-04-17_snippet_21\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Plural } from \"@lingui/react/macro\";\n\n<Plural\n  value={count}\n  offset={1}\n  // when value == 0\n  _0=\"Nobody arrived\"\n  // when value == 1\n  _1=\"Only you arrived\"\n  // when value == 2\n  // value - offset = 1 -> `one` plural form\n  one=\"You and # other guest arrived\"\n  // when value >= 3\n  other=\"You and # other guests arrived\"\n/>;\n\n/*\n  This is transformed to Trans component with ID:\n  {count, plural, offset:1 _0    {Nobody arrived}\n                           _1    {Only you arrived}\n                           one   {You and # other guest arrived}\n                           other {You and # other guests arrived}}\n*/\n```\n\n----------------------------------------\n\nTITLE: Using useLingui with macro for simplified translations\nDESCRIPTION: Example of using the macro version of useLingui hook which supports all features of the t macro for simpler inline translations.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/react.md#2025-04-17_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useLingui } from \"@lingui/react/macro\";\n\nconst CurrentLocale = () => {\n  const { t } = useLingui();\n\n  const userName = \"Tim\";\n  return <span>{t`Hello ${userName}`}</span>;\n};\n```\n\n----------------------------------------\n\nTITLE: Lingui Plural Component Usage in JSX\nDESCRIPTION: This example shows how to use the Lingui Plural component in JSX. It demonstrates the transformation of the Plural component into a Trans element with plural forms.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/macro.mdx#2025-04-17_snippet_36\n\nLANGUAGE: jsx\nCODE:\n```\n<Plural\n   value={count}\n   one=\"# Message\"\n   other=\"# Messages\"\n/>\n\n// ↓ ↓ ↓ ↓ ↓ ↓\n\n<Trans\n   id={\"4w2nim\"}\n   message=\"{count, plural, one {# Message} other {# Messages}}\"\n   values={{ count }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Plural Forms in ICU MessageFormat\nDESCRIPTION: Demonstrates how to implement language-specific plural forms using 'one' and 'other' categories to handle singular and plural variations.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/guides/message-format.md#2025-04-17_snippet_0\n\nLANGUAGE: icu-message-format\nCODE:\n```\n{count, plural, one {Message} other {Messages}}\n```\n\n----------------------------------------\n\nTITLE: JSX to MessageFormat Transformation Examples\nDESCRIPTION: Illustrates various examples of how JSX content is transformed into MessageFormat, including variables, expressions, and components.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/tutorials/react.md#2025-04-17_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n<Trans>Hello {name}</Trans>\n// Hello {name}\n\n<Trans>Hello {user.name}</Trans>\n// Hello {0}\n\n<Trans>The random number is {Math.rand()}</Trans>\n// The random number is {0}\n\n<Trans>\n  Read <a href=\"/more\">more</a>.\n</Trans>\n// Read <0>more</0>.\n\n<Trans>\n  Dear Watson,\n  <br />\n  it's not exactly what I had in my mind.\n</Trans>\n// Dear Watson,<0/>it's not exactly what I had in my mind.\n```\n\n----------------------------------------\n\nTITLE: Activating Different Locales with i18n.activate\nDESCRIPTION: Demonstrates how to switch between different locales and get translated messages.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/core.md#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { i18n } from \"@lingui/core\";\n\ni18n.activate(\"en\");\ni18n._(\"Hello\"); // Return \"Hello\" in English\n\ni18n.activate(\"cs\");\ni18n._(\"Hello\"); // Return \"Hello\" in Czech\n```\n\n----------------------------------------\n\nTITLE: Using Exact Matches with Plural Forms in ICU MessageFormat\nDESCRIPTION: Shows how to implement exact count matches (=0) alongside regular plural forms to handle special cases like 'No messages' while maintaining proper pluralization.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/guides/message-format.md#2025-04-17_snippet_1\n\nLANGUAGE: icu-message-format\nCODE:\n```\n{count, plural, =0 {No messages}\n                one {# message}\n                other {# messages}}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Message Catalog Loader in TypeScript\nDESCRIPTION: Defines a helper function for dynamically loading and activating message catalogs based on selected locale. Includes locale configuration and type-safe activation function.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/guides/dynamic-loading-catalogs.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { i18n } from \"@lingui/core\";\n\nexport const locales = {\n  en: \"English\",\n  cs: \"Česky\",\n};\nexport const defaultLocale = \"en\";\n\n/**\n * We do a dynamic import of just the catalog that we need\n * @param locale any locale string\n */\nexport async function dynamicActivate(locale: string) {\n  const { messages } = await import(`./locales/${locale}/messages`);\n  i18n.load(locale, messages);\n  i18n.activate(locale);\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Dates with i18n.date\nDESCRIPTION: Demonstrates how to format dates appropriately for different locales with various formatting options.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/core.md#2025-04-17_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { i18n } from \"@lingui/core\";\n\nconst d = new Date(\"2021-07-23T16:23:00\");\n\ni18n.activate(\"en\");\ni18n.date(d);\n// Returns \"7/23/2021\"\n\ni18n.date(d, { timeStyle: \"medium\" });\n// Returns \"4:23:00 PM\"\n\ni18n.date(d, { dateStyle: \"medium\", timeStyle: \"medium\" });\n// Returns \"Jul 23, 2021, 4:23:00 PM\"\n\ni18n.activate(\"cs\");\ni18n.date(d);\n// Returns \"23. 7. 2021\"\n```\n\n----------------------------------------\n\nTITLE: Using t Macro with Variables\nDESCRIPTION: Demonstrates how to include variables in the t macro. Simple variables are referenced by name in the transformed message.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/macro.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { t } from \"@lingui/core/macro\";\nconst message = t`My name is ${name}`;\n\n// ↓ ↓ ↓ ↓ ↓ ↓\n\nimport { i18n } from \"@lingui/core\";\nconst message = i18n._(\n  /*i18n*/ {\n    id: \"mVmaLu\",\n    message: \"My name is {name}\",\n    values: { name },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Using Specific i18n Instance in React Components\nDESCRIPTION: This example demonstrates how to use a specific i18n instance instead of the global one, which is particularly useful for server-side rendering applications. It shows how to pass the i18n instance to a function and use it within a React component.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/macro.mdx#2025-04-17_snippet_26\n\nLANGUAGE: js\nCODE:\n```\nimport { msg } from \"@lingui/core/macro\";\nimport { useLingui } from \"@lingui/react/macro\";\n\nexport function showAlert(i18n) {\n  alert(i18n._(msg`...`));\n}\n\nfunction MyComponent() {\n  // Get i18n instance from React Context\n  const { i18n } = useLingui();\n\n  // Pass the instance from outside\n  showAlert(i18n);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Lazy Translation Usage with i18n._() Method\nDESCRIPTION: Demonstrates how to create message descriptors with the msg macro and later translate them using the i18n._() method. This approach allows defining translatable strings that can be stored in arrays and translated later when needed.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/guides/lazy-translations.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { msg } from \"@lingui/core/macro\";\nimport { i18n } from \"@lingui/core\";\n\nconst favoriteColors = [msg`Red`, msg`Orange`, msg`Yellow`, msg`Green`];\n\nexport function getTranslatedColorNames() {\n  return favoriteColors.map((color) => i18n._(color));\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Global i18n Instance\nDESCRIPTION: Demonstrates how to import and use the global i18n instance to load messages for a specific locale and translate text.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/core.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { i18n } from \"@lingui/core\";\n\n/**\n * Load messages for the requested locale and activate it.\n * This function isn't part of the Lingui because there are\n * many ways how to load messages — from REST API, from file, from cache, etc.\n */\nasync function activate(locale: string) {\n  const { messages } = await import(`${locale}/messages.js`);\n  i18n.loadAndActivate({ locale, messages });\n}\n\nactivate(\"cs\");\n\n// returns the Czech translation of \"Hello World\"\nconst translation = i18n._(\"Hello World\");\n```\n\n----------------------------------------\n\nTITLE: Translating Rich-Text Markup with Lingui in JSX\nDESCRIPTION: Demonstrates Lingui's approach to handling translations with HTML elements using the Trans component and its extended ICU MessageFormat with tags.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/misc/react-intl.md#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Trans id=\"msg.docs\" message=\"Read the <link>documentation</link>.\" components={{ link: <a href=\"/docs\" /> }} />\n```\n\n----------------------------------------\n\nTITLE: Using select Macro for Value-Based Selection\nDESCRIPTION: Demonstrates how to use the select macro to handle different forms of a message based on a value. This works like a switch statement, selecting from provided options.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/macro.mdx#2025-04-17_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { select } from \"@lingui/core/macro\";\nconst message = select(gender, {\n  male: \"he\",\n  female: \"she\",\n  other: \"they\",\n});\n\n// ↓ ↓ ↓ ↓ ↓ ↓\n\nimport { i18n } from \"@lingui/core\";\n\nconst message = i18n._(\n  /*i18n*/ {\n    id: \"VRptzI\",\n    message: \"{gender, select, male {he} female {she} other {they}}\",\n    values: { gender },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Using SelectOrdinal JSX Macro for Ordinal Numbers in React\nDESCRIPTION: Demonstrates the usage of the SelectOrdinal JSX macro from @lingui/react/macro to handle ordinal numbers in React components. It shows how to create different forms for various ordinal cases.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/macro.mdx#2025-04-17_snippet_22\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SelectOrdinal } from \"@lingui/react/macro\";\n\n// count == 1 -> 1st\n// count == 2 -> 2nd\n// count == 3 -> 3rd\n// count == 4 -> 4th\n<SelectOrdinal value={count} one=\"#st\" two=\"#nd\" few=\"#rd\" other=\"#th\" />;\n```\n\n----------------------------------------\n\nTITLE: Formatting Numbers with i18n.number\nDESCRIPTION: Shows how to format numbers appropriately for different locales with various formatting options, including currency formatting.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/core.md#2025-04-17_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { i18n } from \"@lingui/core\";\n\ni18n.activate(\"en\");\ni18n.number(12345.678);\n// Returns \"12,345.678\"\n\ni18n.number(12345.678, { style: \"currency\", currency: \"USD\" });\n// Returns \"$12,345.68\"\n\ni18n.activate(\"cs\");\ni18n.number(12345.678);\n// Returns \"12 345,678\"\n\ni18n.number(12345.678, { style: \"currency\", currency: \"CZK\" });\n// Returns \"12 345,68 Kč\"\n```\n\n----------------------------------------\n\nTITLE: Lingui Trans Component Usage in JSX\nDESCRIPTION: This snippet demonstrates the use of the Lingui Trans component in JSX. It shows how the component transforms into a Trans element with an internationalization object, including variable interpolation.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/macro.mdx#2025-04-17_snippet_35\n\nLANGUAGE: jsx\nCODE:\n```\n<Trans>Attachment {name} saved</Trans>\n\n// ↓ ↓ ↓ ↓ ↓ ↓\n\n<Trans\n   id={\"nwR43V\"}\n   message=\"Attachment {name} saved\"\n   values={{ name }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Loading Compiled Messages in Real Applications\nDESCRIPTION: Example of how to properly load precompiled message catalogs in production applications.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/core.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { i18n } from \"@lingui/core\";\n\n// File generated by `lingui compile`\nimport { messages as messagesEn } from \"./locale/en/messages.js\";\n\ni18n.load(\"en\", messagesEn);\n```\n\n----------------------------------------\n\nTITLE: Picking Messages Based on Variables with Lazy Translation\nDESCRIPTION: Demonstrates how to map status codes to message descriptors and translate them dynamically based on a variable. This pattern is useful when choosing different messages based on dynamic values.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/guides/lazy-translations.md#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { msg } from \"@lingui/core/macro\";\nimport { useLingui } from \"@lingui/react\";\n\nconst statusMessages = {\n  [\"STATUS_OPEN\"]: msg`Open`,\n  [\"STATUS_CLOSED\"]: msg`Closed`,\n  [\"STATUS_CANCELLED\"]: msg`Cancelled`,\n  [\"STATUS_COMPLETED\"]: msg`Completed`,\n};\n\nexport default function StatusDisplay({ statusCode }) {\n  const { _ } = useLingui();\n  return <div>{_(statusMessages[statusCode])}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Translating Messages with Variables and Formats\nDESCRIPTION: Examples of using i18n._ to translate messages with variables, custom message IDs, and date/time formatting.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/core.md#2025-04-17_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { i18n } from \"@lingui/core\";\n\n// Simple message\ni18n._(\"Hello\");\n\n// Message with variables\ni18n._(\"My name is {name}\", { name: \"Tom\" });\n\n// Message with custom messageId\ni18n._(\"msg.id\", { name: \"Tom\" }, { message: \"My name is {name}\" });\n\nconst date = new Date(\"2014-12-06\");\nconst time = new Date(\"2014-12-06T17:40:00Z\");\n\n// Short date format\ni18n._(\"It starts on {someDate, date, short}\", { someDate: date });\n\n// Short time format\ni18n._(\"It starts on {someTime, time, short}\", { someTime: time });\n\n// Date skeleton format\ni18n._(\"It starts on {someDate, date, ::GrMMMdd}\", { someDate: date });\n\n// Custom date format\ni18n._(\"It starts on {someDate, date, myStyle}\", { someDate: date }, { formats: { myStyle: { day: \"numeric\" } } });\n```\n\n----------------------------------------\n\nTITLE: Using Lingui Macros for Component-Based Message Syntax in JSX\nDESCRIPTION: Shows how to use Lingui's Trans macro to automatically generate message syntax from JSX, simplifying the internationalization process for existing projects.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/misc/react-intl.md#2025-04-17_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<p>\n  <Trans id=\"msg.docs\">Read the <a href=\"/docs\">documentation</a>.</Trans>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Nesting Macros within the t Macro\nDESCRIPTION: Shows how other macros like plural can be nested within the t macro when specifying a custom ID. The nested macro is transformed appropriately.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/macro.mdx#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { t } from \"@lingui/core/macro\";\nconst message = t({\n  id: \"msg.plural\",\n  message: plural(value, { one: \"...\", other: \"...\" }),\n});\n\n// ↓ ↓ ↓ ↓ ↓ ↓\n\nimport { i18n } from \"@lingui/core\";\nconst message = i18n._(\n  /*i18n*/ {\n    id: \"msg.plural\",\n    message: \"{value, plural, one {...} other {...}}\",\n    values: { value },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Lingui with Basic Settings\nDESCRIPTION: JavaScript configuration file for Lingui, specifying source locale, target locales, and catalog settings.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/installation.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from \"@lingui/cli\";\n\nexport default defineConfig({\n  sourceLocale: \"en\",\n  locales: [\"cs\", \"en\"],\n  catalogs: [\n    {\n      path: \"<rootDir>/src/locales/{locale}/messages\",\n      include: [\"src\"],\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Using Plural Forms with Czech as Source Language\nDESCRIPTION: This example demonstrates how to use the plural macro in Lingui when the source language is Czech instead of English. It shows the implementation with all four Czech plural forms: one, few, many, and other.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/guides/plurals.md#2025-04-17_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nplural(numBooks, {\n  one: \"# kniha\",\n  few: \"# knihy\",\n  many: \"# knihy\",\n  other: \"# knih\",\n});\n```\n\n----------------------------------------\n\nTITLE: Testing React Components with I18nProvider for Translations\nDESCRIPTION: Example showing how to test a React component that uses js-lingui translations. The code demonstrates creating a TestingProvider wrapper that provides the I18nProvider context, loading translation messages for multiple languages, and writing tests that switch between languages to verify correct translations.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/guides/testing.md#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { getByText, render, act } from \"@testing-library/react\";\nimport { i18n } from \"@lingui/core\";\nimport { I18nProvider } from \"@lingui/react\";\n\nimport { messages } from \"./locales/en/messages\";\nimport { messages as csMessages } from \"./locales/cs/messages\";\nimport App from \"./App\";\n\ni18n.load({\n  en: messages,\n  cs: csMessages,\n});\n\nconst TestingProvider = ({ children }: any) => <I18nProvider i18n={i18n}>{children}</I18nProvider>;\n\ntest(\"Content should be translated correctly in English\", () => {\n  act(() => {\n    i18n.activate(\"en\");\n  });\n  const { getByTestId, container } = render(<App />, { wrapper: TestingProvider });\n  expect(getByTestId(\"h3-title\")).toBeInTheDocument();\n  expect(getByText(container, \"Language switcher example:\")).toBeDefined();\n});\n\ntest(\"Content should be translated correctly in Czech\", () => {\n  act(() => {\n    i18n.activate(\"cs\");\n  });\n  const { getByTestId, container } = render(<App />, { wrapper: TestingProvider });\n  expect(getByTestId(\"h3-title\")).toBeInTheDocument();\n  expect(getByText(container, \"Příklad přepínače jazyků:\")).toBeDefined();\n});\n```\n\n----------------------------------------\n\nTITLE: Lazy Translation with Trans Component in React\nDESCRIPTION: Shows how to use message descriptors with React's Trans component by passing the message descriptor's id to the Trans component. This approach is useful for rendering lazy translations in React components.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/guides/lazy-translations.md#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { msg } from \"@lingui/core/macro\";\nimport { Trans } from \"@lingui/react\";\n\nconst favoriteColors = [msg`Red`, msg`Orange`, msg`Yellow`, msg`Green`];\n\nexport default function ColorList() {\n  return (\n    <ul>\n      {favoriteColors.map((color) => (\n        <li>\n          <Trans id={color.id} />\n        </li>\n      ))}\n    </ul>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Preconfigured i18n Instance with Initial Locale\nDESCRIPTION: Shows how to create a custom i18n instance with an initial locale already set.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/core.md#2025-04-17_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { setupI18n } from \"@lingui/core\";\n\nconst i18n = setupI18n({ locale: \"en\" });\n\n// This is a shortcut for:\n// const i18n = setupI18n()\n// i18n.activate(\"en\")\n```\n\n----------------------------------------\n\nTITLE: Handling Plurals with Lingui Macros in JSX\nDESCRIPTION: Demonstrates the use of Lingui's Trans, Plural components, and i18n.number macro to handle complex pluralization and number formatting in translations.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/misc/react-intl.md#2025-04-17_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Trans id=\"welcome\">\n  Hello <b>{name}</b>, you have {i18n.number(unreadCount)} <Plural one=\"message\" other=\"messages\" />\n</Trans>\n```\n\n----------------------------------------\n\nTITLE: Using Variables in Plural Forms\nDESCRIPTION: Shows how to include variables within plural forms using template literals. The variables are automatically extracted and included in the message values.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/macro.mdx#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { plural } from \"@lingui/core/macro\";\nconst message = plural(count, {\n  one: `${name} has # friend`,\n  other: `${name} has # friends`,\n});\n\n// ↓ ↓ ↓ ↓ ↓ ↓\n\nimport { i18n } from \"@lingui/core\";\nconst message = i18n._(\n  /*i18n*/ {\n    id: \"CvuUwE\",\n    message: \"{count, plural, one {{name} has # friend} other {{name} has # friends}}\",\n    values: { count, name },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Using Plural JSX Macro for Pluralization in React\nDESCRIPTION: Demonstrates how to use the Plural JSX macro from @lingui/react/macro to handle plural forms in React components. The macro is transformed into a Trans component with a plural message format.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/macro.mdx#2025-04-17_snippet_20\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Plural } from \"@lingui/react/macro\";\n<Plural value={numBooks} one=\"Book\" other=\"Books\" />;\n\n// ↓ ↓ ↓ ↓ ↓ ↓\n\nimport { Trans } from \"@lingui/react\";\n<Trans id={\"is7n96\"} message=\"{numBooks, plural, one {Book} other {Books}}\" values={{ numBooks }} />;\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite with Lingui and Babel\nDESCRIPTION: TypeScript configuration for Vite, setting up Lingui with the React plugin using Babel for transformation.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/installation.mdx#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport { lingui } from \"@lingui/vite-plugin\";\n\nexport default defineConfig({\n  plugins: [\n    react({\n      babel: {\n        plugins: [\"@lingui/babel-plugin-lingui-macro\"],\n      },\n    }),\n    lingui(),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom i18n Instance with setupI18n\nDESCRIPTION: Demonstrates how to create a custom i18n instance using setupI18n, which is useful when you need multiple independent i18n contexts.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/core.md#2025-04-17_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { setupI18n } from \"@lingui/core\";\n\nconst i18n = setupI18n();\n```\n\n----------------------------------------\n\nTITLE: Context-based Translation Example\nDESCRIPTION: Shows how to use context with Trans component to distinguish between different meanings of the same word.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/guides/explicit-vs-generated-ids.md#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Trans } from \"@lingui/react/macro\";\n<Trans context=\"direction\">right</Trans>;\n<Trans context=\"correctness\">right</Trans>;\n\n// ↓ ↓ ↓ ↓ ↓ ↓\n\nimport { Trans } from \"@lingui/react\";\n<Trans id={\"d1wX4r\"} message=\"right\" />;\n<Trans id={\"16eaSK\"} message=\"right\" />;\n```\n\n----------------------------------------\n\nTITLE: Using defineMessage Macro with MacroMessageDescriptor in JavaScript\nDESCRIPTION: Demonstrates how to use the defineMessage macro with a MacroMessageDescriptor object to provide additional information for the message such as a custom ID and comment.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/macro.mdx#2025-04-17_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineMessage } from \"@lingui/core/macro\";\nconst message = defineMessage({\n  id: \"Navigation / About\",\n  message: \"About us\",\n});\n\n// ↓ ↓ ↓ ↓ ↓ ↓\n\nconst message = /*i18n*/ {\n  id: \"Navigation / About\",\n  message: \"About us\",\n};\n```\n\n----------------------------------------\n\nTITLE: Using useLingui Hook for Localization in React Components\nDESCRIPTION: Demonstrates the usage of the useLingui React hook from @lingui/react/macro to access the t macro for localization within React components. Shows how it's transformed into the core Lingui implementation.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/macro.mdx#2025-04-17_snippet_24\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useLingui } from \"@lingui/react/macro\";\n\nfunction MyComponent() {\n  const { t } = useLingui();\n  const a = t`Text`;\n}\n\n// ↓ ↓ ↓ ↓ ↓ ↓\n\nimport { useLingui } from \"@lingui/react\";\n\nfunction MyComponent() {\n  const { _ } = useLingui();\n  const a = _(\n    /*i18n*/\n    {\n      id: \"xeiujy\",\n      message: \"Text\",\n    }\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Missing Translation Handling in Lingui\nDESCRIPTION: Demonstrates how to set up a custom message or function to handle missing translations in Lingui. This is useful for debugging and providing fallback behavior.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/core.md#2025-04-17_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { setupI18n } from \"@lingui/core\";\n\nconst i18n = setupI18n({ missing: \"🚨\" });\ni18n._(\"missing translation\") === \"🚨\"; // Returns the custom missing message\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { setupI18n } from \"@lingui/core\";\n\nfunction missing(locale, id) {\n  alert(`Translation in ${locale} for ${id} is missing!`);\n  return id;\n}\n\nconst i18n = setupI18n({ missing });\ni18n._(\"missing translation\"); // Triggers an alert\n```\n\n----------------------------------------\n\nTITLE: Formatting Messages with Lingui in JSX\nDESCRIPTION: Shows how to use the Trans component from Lingui to achieve similar internationalization functionality as react-intl, including pluralization and variable interpolation.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/misc/react-intl.md#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Trans\n  id=\"welcome\"\n  message={`Hello {name}, you have {unreadCount, number} {unreadCount, plural,\n     one {message}\n     other {messages}\n   }`}\n  values={{ name: <b>{name}</b>, unreadCount }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Lingui t Macro with Custom i18n and Variable Interpolation\nDESCRIPTION: This snippet demonstrates using the Lingui 't' macro with a custom i18n instance and variable interpolation. It shows how the macro transforms the string template into an internationalization object with a message and values.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/macro.mdx#2025-04-17_snippet_29\n\nLANGUAGE: js\nCODE:\n```\nt(customI18n)`Attachment ${name} saved`;\n\n// ↓ ↓ ↓ ↓ ↓ ↓\n\ncustomI18n._(\n  /*i18n*/ {\n    id: \"nwR43V\",\n    message: \"Attachment {name} saved\",\n    values: { name },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Extracting Messages with Non-Macro Usage in TypeScript\nDESCRIPTION: Shows how to use non-macro functions like i18n._ and i18n.t for message extraction. These functions can be called from various member expressions, though using macros is recommended.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/guides/message-extraction.md#2025-04-17_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\ni18n._(\"message.id\");\ni18n._({ id: \"message.id\" });\n\nctx.i18n._(\"message.id\");\nctx.i18n.t(\"message.id\");\n\nctx.request.i18n.t(\"message.id\");\n\n// and so on\n```\n\n----------------------------------------\n\nTITLE: Using t Macro with Custom ID and Comments\nDESCRIPTION: Demonstrates how to specify a custom ID and add a comment for translators when using the t macro. This approach allows more control over message identification.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/macro.mdx#2025-04-17_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { t } from \"@lingui/core/macro\";\nconst message = t({\n  id: \"msg.hello\",\n  comment: \"Greetings at the homepage\",\n  message: `Hello ${name}`,\n});\n\n// ↓ ↓ ↓ ↓ ↓ ↓\n\nimport { i18n } from \"@lingui/core\";\nconst message = i18n._(\n  /*i18n*/ {\n    id: \"msg.hello\",\n    comment: \"Greetings at the homepage\",\n    message: \"Hello {name}\",\n    values: { name },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Using Select for Gender-Based Messages in ICU MessageFormat\nDESCRIPTION: Shows how to use the select format to create gender-specific messages, providing different translations based on a gender variable.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/guides/message-format.md#2025-04-17_snippet_3\n\nLANGUAGE: icu-message-format\nCODE:\n```\n{gender, select, male {He replied to your message}\n                 female {She replied to your message}\n                 other {They replied to your message}}\n```\n\n----------------------------------------\n\nTITLE: Basic t Macro Usage for Simple Messages\nDESCRIPTION: Shows how to use the t macro for a simple message without variables. The macro transforms the string into a message descriptor with an automatically generated ID.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/macro.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { t } from \"@lingui/core/macro\";\nconst message = t`Hello World`;\n\n// ↓ ↓ ↓ ↓ ↓ ↓\n\nimport { i18n } from \"@lingui/core\";\nconst message = i18n._(\n  /*i18n*/ {\n    id: \"mY42CM\",\n    message: \"Hello World\",\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Vue.js Extractor in Lingui\nDESCRIPTION: Example configuration for lingui.config.js or lingui.config.ts that imports and sets up the Vue.js extractor. This configuration defines locales, source locale, catalogs path, and registers both the default babel extractor and the Vue.js extractor.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/extractor-vue.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from \"@lingui/cli\";\nimport { vueExtractor } from \"@lingui/extractor-vue\";\nimport babel from \"@lingui/cli/api/extractors/babel\";\n\nexport default defineConfig({\n  locales: [\"en\", \"nb\"],\n  sourceLocale: \"en\",\n  catalogs: [\n    {\n      path: \"<rootDir>/src/{locale}\",\n      include: [\"<rootDir>/src\"],\n    },\n  ],\n  extractors: [babel, vueExtractor],\n});\n```\n\n----------------------------------------\n\nTITLE: Using i18n.t as an Alias for i18n._\nDESCRIPTION: Shows how to use the i18n.t method, which is an alias for i18n._.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/core.md#2025-04-17_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { i18n } from \"@lingui/core\";\n\ni18n.t({ id: \"Hello\" });\n```\n\n----------------------------------------\n\nTITLE: Translating Text Attributes with Lingui in JSX\nDESCRIPTION: Shows how to use Lingui's core library and macros to translate text attributes in JSX elements, including support for pluralization and custom IDs.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/misc/react-intl.md#2025-04-17_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<a title={i18n._(t`The title of ${name}`)}>{name}</a>\n<img alt={i18n._(plural({ value: count, one: \"flag\", other: \"flags\" }))} src=\"...\" />\n```\n\n----------------------------------------\n\nTITLE: Using Message Descriptors with i18n._\nDESCRIPTION: Shows how to use message descriptors with i18n._ to define messages with IDs, variables, and comments.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/core.md#2025-04-17_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { i18n } from \"@lingui/core\";\n\n// Simple message\ni18n._({ id: \"Hello\" });\n\n// Simple message using custom ID\ni18n._({ id: \"msg.hello\", message: \"Hello\" });\n\n// Message with variable\ni18n._({ id: \"My name is {name}\", values: { name: \"Tom\" } });\n\n// Message with comment, custom ID and variable\ni18n._({\n  id: \"msg.name\",\n  message: \"My name is {name}\",\n  comment: \"Message showing the passed in name\",\n  values: { name: \"Tom\" },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Custom i18n Configuration\nDESCRIPTION: Example showing how to import a custom i18n object from a custom configuration module.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/conf.md#2025-04-17_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { i18n } from \"./custom-i18n-config\";\n```\n\n----------------------------------------\n\nTITLE: Compiling Message Catalogs with Lingui CLI\nDESCRIPTION: Demonstrates the process of compiling extracted messages into a format usable by the application using the Lingui compile command.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/tutorials/react.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n> lingui compile\n\nCompiling message catalogs…\nDone!\n```\n\n----------------------------------------\n\nTITLE: Basic Plural Component Usage\nDESCRIPTION: Shows basic implementation of the Plural component with simple one/other forms.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/tutorials/react.md#2025-04-17_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\n<p>\n  <Plural value={messagesCount} one=\"There's # message in your inbox\" other=\"There are # messages in your inbox\" />\n</p>\n```\n\n----------------------------------------\n\nTITLE: Non-JSX Macro Context Example\nDESCRIPTION: Demonstrates using context with the msg macro for different translations of the same word.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/guides/explicit-vs-generated-ids.md#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { msg } from \"@lingui/core/macro\";\n\nconst ex1 = msg({\n  message: `right`,\n  context: \"direction\",\n});\n\nconst ex2 = msg({\n  message: `right`,\n  context: \"correctness\",\n});\n\n// ↓ ↓ ↓ ↓ ↓ ↓\n\nconst ex1 = {\n  id: \"d1wX4r\",\n  message: `right`,\n};\nconst ex2 = {\n  id: \"16eaSK\",\n  message: `right`,\n};\n```\n\n----------------------------------------\n\nTITLE: Lingui t Macro Usage in JavaScript\nDESCRIPTION: This snippet shows how the Lingui 't' macro is used in JavaScript and how it gets transformed. It demonstrates the macro's output, including the generated message ID and the internationalization object structure.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/macro.mdx#2025-04-17_snippet_27\n\nLANGUAGE: js\nCODE:\n```\nt`Refresh inbox`;\n\n// ↓ ↓ ↓ ↓ ↓ ↓\n\ni18n._(\n  /*i18n*/ {\n    id: \"EsCV2T\",\n    message: \"Refresh inbox\",\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Using Trans Macro with Context in JSX\nDESCRIPTION: Demonstrates how to use the Trans macro with context to extract the same messages with different IDs. This is useful for distinguishing between identical messages used in different contexts.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/macro.mdx#2025-04-17_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Trans } from \"@lingui/react/macro\";\n<Trans context=\"direction\">right</Trans>;\n<Trans context=\"correctness\">right</Trans>;\n\n// ↓ ↓ ↓ ↓ ↓ ↓\n\nimport { Trans } from \"@lingui/react\";\n<Trans id={\"d1wX4r\"} message=\"right\" />;\n<Trans id={\"16eaSK\"} message=\"right\" />;\n```\n\n----------------------------------------\n\nTITLE: Defining Messages Type for Individual Locale in Lingui\nDESCRIPTION: Shows the structure of the Messages type in Lingui, which represents translations for a single locale. It maps message IDs to their translations or translation functions.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/core.md#2025-04-17_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\ntype Messages = { [messageId: string]: string | Function };\n\n// Example\nconst messagesEn: Messages = {\n  Hello: \"Hello\",\n  \"Good bye\": \"Good bye\",\n};\n```\n\n----------------------------------------\n\nTITLE: Pluralization with Lingui in JavaScript\nDESCRIPTION: Shows how to handle pluralization using Lingui's plural macro, which transforms content based on numeric values.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/tutorials/javascript.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { plural } from \"@lingui/core/macro\";\n\nconst count = 42;\n\nplural(count, {\n  one: \"# book\",\n  other: \"# books\",\n});\n// becomes \"42 livres\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Exact Forms with Plural Component in React\nDESCRIPTION: Shows how to use exact number matches with the Plural component for precise message customization. Uses _N syntax for exact matches since React props can't start with = or be numbers.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/tutorials/react.md#2025-04-17_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\n<p>\n  <Plural\n    value={messagesCount}\n    _0=\"There are no messages\"\n    one=\"There's # message in your inbox\"\n    other=\"There are # messages in your inbox\"\n  />\n</p>\n```\n\n----------------------------------------\n\nTITLE: Loading Message Catalogs with i18n.load\nDESCRIPTION: Demonstrates how to load message catalogs for multiple languages at once, which will be merged with existing messages if any.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/core.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { i18n } from \"@lingui/core\";\n\n/**\n * This is just an example of what the catalog looks like internally.\n * Formatting of string messages only works in development. See note below.\n */\nconst messagesEn = {\n  Hello: \"Hello\",\n  \"Good bye\": \"Good bye\",\n  \"My name is {name}\": \"My name is {name}\",\n};\n\nconst messagesCs = {\n  Hello: \"Ahoj\",\n  \"Good bye\": \"Nashledanou\",\n  \"My name is {name}\": \"Jmenuji se {name}\",\n};\n\n// highlight-start\ni18n.load({\n  en: messagesEn,\n  cs: messagesCs,\n});\n// highlight-end\n\n// This is the same as loading message catalogs separately per language:\n// i18n.load('en', messagesEn)\n// i18n.load('cs', messagesCs)\n```\n\n----------------------------------------\n\nTITLE: Lingui Style JSON Format Example\nDESCRIPTION: Shows the full Lingui JSON format that includes all metadata like translations, default messages, descriptions, and origin information for each message.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/catalog-formats.md#2025-04-17_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"messageId\": {\n    \"translation\": \"Translated message\",\n    \"message\": \"Default message\",\n    \"description\": \"Comment for translators\",\n    \"origin\": [[\"src/App.js\", 3]]\n  },\n  \"obsoleteId\": {\n    \"translation\": \"Obsolete message\",\n    \"origin\": [[\"src/App.js\", 3]],\n    \"obsolete\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Plural Component with Variables and Nested Components\nDESCRIPTION: Demonstrates using variables and nested components within Plural messages using Trans macro and template literals.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/tutorials/react.md#2025-04-17_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\n<p>\n  <Plural\n    value={messagesCount}\n    one={`There's # message in your inbox, ${name}`}\n    other={\n      <Trans>\n        There are <strong>#</strong> messages in your inbox, {name}\n      </Trans>\n    }\n  />\n</p>\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite with Lingui and SWC\nDESCRIPTION: TypeScript configuration for Vite, setting up Lingui with the React plugin using SWC for transformation.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/installation.mdx#2025-04-17_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react-swc\";\nimport { lingui } from \"@lingui/vite-plugin\";\n\nexport default defineConfig({\n  plugins: [\n    react({\n      plugins: [[\"@lingui/swc-plugin\", {}]],\n    }),\n    lingui(),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Nesting Plural Macros for Complex Messages\nDESCRIPTION: Demonstrates how to nest plural macros to create complex messages with multiple counters. This allows for handling scenarios with multiple pluralized elements.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/macro.mdx#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { plural } from \"@lingui/core/macro\";\nconst message = plural(numBooks, {\n  one: plural(numArticles, {\n    one: `1 book and 1 article`,\n    other: `1 book and ${numArticles} articles`,\n  }),\n  other: plural(numArticles, {\n    one: `${numBooks} books and 1 article`,\n    other: `${numBooks} books and ${numArticles} articles`,\n  }),\n});\n\n// ↓ ↓ ↓ ↓ ↓ ↓\n// Generated message was wrapped for better readability\n\nimport { i18n } from \"@lingui/core\";\nconst message = i18n._(\n  /*i18n*/ {\n    id: \"XnUh4j\",\n    message: `{numBooks, plural,\n         one {{numArticles, plural,\n            one {1 book and 1 article}\n            other {1 book and {numArticles} articles}\n         }}\n         other {{numArticles, plural,\n            one {{numBooks} books and 1 article}\n            other {{numBooks} books and {numArticles} articles}\n         }}\n      }`,\n    values: { numBooks, numArticles },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Installing ESLint and Lingui Plugin with npm\nDESCRIPTION: Commands to install ESLint and the Lingui ESLint plugin using npm. These are prerequisites for using the Lingui ESLint rules in a project.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/eslint-plugin.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev eslint\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev eslint-plugin-lingui\n```\n\n----------------------------------------\n\nTITLE: Configuring Lingui Vite Plugin\nDESCRIPTION: Configuration setup for integrating Lingui plugin in Vite config file. Demonstrates how to add the plugin to Vite's plugin array.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/vite-plugin.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserConfig } from \"vite\";\nimport { lingui } from \"@lingui/vite-plugin\";\n\nconst config: UserConfig = {\n  plugins: [lingui()],\n};\n```\n\n----------------------------------------\n\nTITLE: Using Select JSX Macro for Value-based Message Selection in React\nDESCRIPTION: Shows how to use the Select JSX macro from @lingui/react/macro to handle different forms of a message based on a value in React components. This example demonstrates selection based on gender.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/macro.mdx#2025-04-17_snippet_23\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Select } from \"@lingui/react/macro\";\n\n// gender == \"female\"      -> Her book\n// gender == \"male\"        -> His book\n// gender == \"non-binary\"  -> Their book\n<Select value={gender} _male=\"His book\" _female=\"Her book\" other=\"Their book\" />;\n```\n\n----------------------------------------\n\nTITLE: Lingui t Macro with Explicit ID in JavaScript\nDESCRIPTION: This snippet illustrates using the Lingui 't' macro with an explicitly provided ID. It shows how the macro transforms the input into an internationalization object with the specified ID.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/macro.mdx#2025-04-17_snippet_31\n\nLANGUAGE: js\nCODE:\n```\nt({\n  id: \"msg.refresh\",\n  message: \"Refresh inbox\",\n});\n\n// ↓ ↓ ↓ ↓ ↓ ↓\n\ni18n._(\n  /*i18n*/ {\n    id: \"msg.refresh\",\n    message: \"Refresh inbox\",\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Updating imports for split macros in Lingui 5.x\nDESCRIPTION: Shows how to update import statements from the old consolidated macro package to the new split packages for React and Core macros.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/releases/migration-5.md#2025-04-17_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- import { t, plural, select, selectOrdinal, defineMessage, msg } from \"@lingui/macro\";\n+ import { t, plural, select, selectOrdinal, defineMessage, msg } from \"@lingui/core/macro\";\n\n- import { Trans, Plural, Select, SelectOrdinal } from \"@lingui/macro\";\n+ import { Trans, Plural, Select, SelectOrdinal } from \"@lingui/react/macro\";\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Extractor for Non-JavaScript Files in Lingui\nDESCRIPTION: This snippet shows how to create a custom extractor for handling non-JavaScript files in Lingui. It transforms custom file formats to JavaScript with source maps and then uses the default extractor to process the transformed code.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/guides/custom-extractor.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { extractor as defaultExtractor } from \"@lingui/cli/api\";\n\nexport const extractor: ExtractorType = {\n  match(filename: string) {\n    return filename.endsWith(\".custom\");\n  },\n  extract(filename: string, code: string, onMessageExtracted, ctx: ExtractorCtx) {\n    // Transform the file to plain JS + Sourcemaps\n    const { code: transformedCode, sourcemaps } = transformMyCustomFileToJs(filename, code);\n\n    // Access Lingui config via `ctx.linguiConfig`\n    // Reuse the default CLI extractor\n    return defaultExtractor.extract(filename, transformedCode, onMessageExtracted, {\n      sourcemaps,\n      ...ctx,\n    });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Lingui defineMessage Macro Usage\nDESCRIPTION: This example demonstrates the use of the Lingui 'defineMessage' macro. It shows how the macro transforms a string template into an internationalization object with a generated ID.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/macro.mdx#2025-04-17_snippet_32\n\nLANGUAGE: js\nCODE:\n```\nconst msg = defineMessage`Refresh inbox`;\n\n// ↓ ↓ ↓ ↓ ↓ ↓\n\nconst msg = /*i18n*/ {\n  id: \"EsCV2T\",\n  message: \"Refresh inbox\",\n};\n```\n\n----------------------------------------\n\nTITLE: Migrating Trans Component with Named Components in React\nDESCRIPTION: Example showing how to use the new components object format in Trans component, which now accepts named component placeholders instead of an array.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/releases/migration-3.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Trans id=\"Read <a>the docs</a>!\" components={{ a: <a href=\"/docs\" /> }} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Experimental Dependency-Based Extractor in Lingui\nDESCRIPTION: Sets up the experimental extractor that uses dependency tree crawling instead of glob patterns. This approach creates optimized catalogs for multi-page applications by only including messages needed for each page.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/guides/message-extraction.md#2025-04-17_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\n/**\n *\n * @type {import('@lingui/conf').LinguiConfig}\n */\nmodule.exports = {\n  // remove everethying from `catalogs` property\n  catalogs: [],\n  // highlight-start\n  experimental: {\n    extractor: {\n      // glob pattern of entrypoints\n      // this will find all nextjs pages\n      entries: [\"<rootDir>/src/pages/**/*.tsx\"],\n      // output pattern, this instruct extractor where to store catalogs\n      // src/pages/faq.tsx -> src/pages/locales/faq/en.po\n      output: \"<rootDir>/{entryDir}/locales/{entryName}/{locale}\",\n    },\n  },\n  // highlight-end\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Plurals with Plural Component in React\nDESCRIPTION: Demonstrates the use of the Plural component to handle different plural forms based on a numeric value in React.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/tutorials/react.md#2025-04-17_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Plural } from \"@lingui/react/macro\";\n\n<p>\n  <Plural value={messagesCount} one=\"There's # message in your inbox\" other=\"There are # messages in your inbox\" />\n</p>;\n```\n\n----------------------------------------\n\nTITLE: Default Catalogs Configuration in JavaScript\nDESCRIPTION: Default configuration for message catalogs defining path and file inclusion/exclusion patterns.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/conf.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    path: \"<rootDir>/locale/{locale}/messages\",\n    include: [\"<rootDir>\"],\n    exclude: [\"**/node_modules/**\"],\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Using defineMessage Macro with Template Literals in JavaScript\nDESCRIPTION: Shows how to use the defineMessage macro with template literals and variables. It demonstrates how the macro transforms the message into a MessageDescriptor with values.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/macro.mdx#2025-04-17_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineMessage } from \"@lingui/core/macro\";\nconst name = \"Joe\";\nconst message = defineMessage({\n  message: `Welcome, ${name}!`,\n});\n\n// ↓ ↓ ↓ ↓ ↓ ↓\n\nconst message = /*i18n*/ {\n  id: \"dgJjNB\",\n  message: \"Welcome, {name}\",\n  values: {\n    name,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Lingui defineMessage Macro with Plural\nDESCRIPTION: This example illustrates using the Lingui 'defineMessage' macro with a plural form. It shows how the macro transforms the input, including the plural macro, into an internationalization object with plural forms.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/macro.mdx#2025-04-17_snippet_34\n\nLANGUAGE: js\nCODE:\n```\nconst msg = defineMessage({\n  id: \"msg.plural\",\n  message: plural(count, {\n    one: \"# Message\",\n    other: \"# Messages\",\n  }),\n});\n\n// ↓ ↓ ↓ ↓ ↓ ↓\n\nconst msg = /*i18n*/ {\n  id: \"msg.plural\",\n  message: \"{count, plural, one {# Message} other {# Messages}}\",\n  values: { count },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Messages Compiler for Runtime Compilation\nDESCRIPTION: Shows how to register a MessageCompiler to enable using uncompiled catalogs at runtime.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/core.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { compileMessage } from \"@lingui/message-utils/compileMessage\";\n\ni18n.setMessagesCompiler(compileMessage);\n```\n\n----------------------------------------\n\nTITLE: Extracted Plural Message Format\nDESCRIPTION: Shows the ICU MessageFormat for a plural message extracted from the Plural component.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/tutorials/react.md#2025-04-17_snippet_14\n\nLANGUAGE: icu-message-format\nCODE:\n```\n{messagesCount, plural,\n  one {There's # message in your inbox}\n  other {There are # messages in your inbox}\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Messages with Lingui Macros in TypeScript/React\nDESCRIPTION: Demonstrates how to use Lingui macros to define extractable messages in TypeScript and React. The macros transform JavaScript objects and JSX elements into ICU MessageFormat messages at compile time.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/guides/message-extraction.md#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { t } from \"@lingui/core/macro\";\nimport { Trans } from \"@lingui/react/macro\";\n\nt`Message`;\n\nt({\n  id: \"custom.id\",\n  message: \"Message with custom ID\",\n});\n\nconst jsx = <Trans>Hi, my name is {name}</Trans>;\n```\n\n----------------------------------------\n\nTITLE: Advanced Macro Runtime Configuration\nDESCRIPTION: JSON configuration for custom Trans and useLingui macro imports.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/conf.md#2025-04-17_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"runtimeConfigModule\": {\n    \"Trans\": [\"./custom-config\", \"Trans\"],\n    \"useLingui\": [\"./custom-config\", \"useLingui\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ICU Message Format for Czech Pluralization\nDESCRIPTION: This example shows the ICU Message Format syntax after translation to Czech, which has four plural forms (one, few, many, other) compared to English's two forms. This demonstrates how translations adapt to language-specific pluralization rules.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/guides/plurals.md#2025-04-17_snippet_3\n\nLANGUAGE: icu-message-format\nCODE:\n```\n{numBooks, plural, one {# kniha} few {# knihy} many {# knihy} other {# knih}}\n```\n\n----------------------------------------\n\nTITLE: Configuring PO with Gettext Plurals Format in Lingui\nDESCRIPTION: JavaScript configuration for using the PO with Gettext plurals format in Lingui, including importing the formatter and setting options.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/catalog-formats.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from \"@lingui/cli\";\nimport { formatter } from \"@lingui/format-po-gettext\";\n\nexport default defineConfig({\n  // [...]\n  format: formatter({ lineNumbers: false }),\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Extractor Configuration\nDESCRIPTION: JavaScript configuration for setting up custom message extractors.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/conf.md#2025-04-17_snippet_11\n\nLANGUAGE: js\nCODE:\n```\n{\n   \"extractors\": [\n      myCustomExtractor,\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Messages with defineMessage Macro in TypeScript\nDESCRIPTION: Demonstrates how to use the defineMessage macro to define a message for later use. It shows the transformation of the macro into a MessageDescriptor object.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/macro.mdx#2025-04-17_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { i18n } from \"@lingui/core\";\nimport { defineMessage } from \"@lingui/core/macro\";\n\n// define message\nconst message = defineMessage`Hello World`;\n\n// use it later\ni18n._(message);\n\n// ↓ ↓ ↓ ↓ ↓ ↓\n\nimport { i18n } from \"@lingui/core\";\n\nconst message = /*i18n*/ {\n  id: \"mY42CM\",\n  message: \"Hello World\",\n};\n\n// use it later\ni18n._(message);\n```\n\n----------------------------------------\n\nTITLE: Translation with Variables Outside JSX\nDESCRIPTION: Demonstrates using variables within translated strings outside of JSX components.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/tutorials/react.md#2025-04-17_snippet_20\n\nLANGUAGE: jsx\nCODE:\n```\nconst { t } = useLingui();\n\nconst markAsRead = () => {\n  const userName = \"User1234\";\n  alert(t`Hello ${userName}, your messages marked as read!`);\n};\n```\n\n----------------------------------------\n\nTITLE: Using Lingui msg Macro with Custom i18n Instance\nDESCRIPTION: This example illustrates how to use the Lingui 'msg' macro with a custom i18n instance. It shows the transformation of the macro call into an internationalization object with a generated ID.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/macro.mdx#2025-04-17_snippet_28\n\nLANGUAGE: js\nCODE:\n```\ncustomI18n._(msg(`Refresh inbox`));\n\n// ↓ ↓ ↓ ↓ ↓ ↓\n\ncustomI18n._(\n  /*i18n*/ {\n    id: \"EsCV2T\",\n    message: \"Refresh inbox\",\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring ICU Message Format Plurals in Lingui\nDESCRIPTION: Example of how plurals are defined using ICU MessageFormat syntax in Lingui. This format allows different messages for various plural forms based on a count variable.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/tools/translation-io.md#2025-04-17_snippet_0\n\nLANGUAGE: icu-message-format\nCODE:\n```\n{count, plural, =0 {No messages}\n                one {# message}\n                other {# messages}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Lingui with Multiple Locales in TypeScript\nDESCRIPTION: Demonstrates how to set up Lingui with a primary locale and alternative locales for number and date formatting. This is useful for countries that use multiple formats.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/core.md#2025-04-17_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { setupI18n } from \"@lingui/core\";\n\nconst i18n = setupI18n({\n  locale: \"ar\",\n  locales: [\"en-UK\", \"ar-AS\"],\n});\n\n// This is a shortcut for:\n// const i18n = setupI18n()\n// i18n.activate(\"ar\", [\"en-UK\", \"ar-AS\"])\n```\n\n----------------------------------------\n\nTITLE: Core Macro with Generated ID\nDESCRIPTION: Simple example of using the msg macro with automatic ID generation.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/guides/explicit-vs-generated-ids.md#2025-04-17_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { msg } from \"@lingui/core/macro\";\n\nmsg`Hello World`;\n```\n\n----------------------------------------\n\nTITLE: Implementing Explicit IDs in JSX\nDESCRIPTION: Example of using explicit IDs with the Trans component in JSX, showing how manual IDs are assigned and extracted.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/guides/explicit-vs-generated-ids.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Trans id=\"index.header.title\">LinguiJS example</Trans>\n\n// extracted as\n{\n  id: \"index.header.title\",\n  message: \"LinguiJS example\",\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Initial Messages in Lingui Setup\nDESCRIPTION: Shows how to load initial messages for multiple locales when setting up Lingui. This approach pre-loads translations for different languages.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/core.md#2025-04-17_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { setupI18n } from \"@lingui/core\";\n\nconst messages = {\n  en: require(\"./locale/en/messages\").messages, // your path to compiled messages here\n  cs: require(\"./locale/cs/messages\").messages, // your path to compiled messages here\n};\nconst i18n = setupI18n({ messages });\n\n// This is a shortcut for:\n// const i18n = setupI18n()\n// i18n.load(messages)\n```\n\n----------------------------------------\n\nTITLE: Configuring Recommended Lingui Rules in Flat Config (ESLint v8+)\nDESCRIPTION: JavaScript configuration for enabling all recommended Lingui ESLint rules using the new flat config format introduced in ESLint version 8. This setup imports the plugin and applies the recommended configuration.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/eslint-plugin.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport pluginLingui from \"eslint-plugin-lingui\";\n\nexport default [\n  pluginLingui.configs[\"flat/recommended\"],\n  // Any other config...\n];\n```\n\n----------------------------------------\n\nTITLE: Using useLingui hook for accessing translations\nDESCRIPTION: Example of using the useLingui hook to access the current locale and translations in a component.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/react.md#2025-04-17_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\";\nimport { msg } from \"@lingui/core/macro\";\nimport { useLingui } from \"@lingui/react\";\n\nconst CurrentLocale = () => {\n  const { _, i18n } = useLingui();\n\n  return (\n    <span>\n      {_(msg`Current locale`)}: {i18n.locale}\n    </span>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Replacing i18n Methods with Macros\nDESCRIPTION: Diff showing how to replace i18n.t method with the t macro that automatically binds messages to the default i18n object.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/releases/migration-3.md#2025-04-17_snippet_13\n\nLANGUAGE: diff\nCODE:\n```\n  import { i18n } from \"@lingui/core\"\n+ import { t } from \"@lingui/macro\"\n\n- i18n.t`Hello World`\n+ t`Hello World`\n```\n\n----------------------------------------\n\nTITLE: Updating Imports for Trans and Other Components\nDESCRIPTION: Diff showing how to update imports from @lingui/react to @lingui/macro for Trans, Plural, Select, and SelectOrdinal components.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/releases/migration-3.md#2025-04-17_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n- import { Trans } from \"@lingui/react\"\n+ import { Trans } from \"@lingui/macro\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Translation.io in Lingui Project\nDESCRIPTION: Configuration file (.linguirc) that connects a Lingui project to Translation.io service. It specifies the translation format and Authentication API key.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/tools/translation-io.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  [...]\n  \"format\": \"po\",\n  \"service\": {\n    \"name\": \"TranslationIO\",\n    \"apiKey\": \"abcdefghijklmnopqrstuvwxyz012345\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Lingui Plural Handling\nDESCRIPTION: Example of handling plural forms using Lingui's plural macro.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/misc/i18next.md#2025-04-17_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nplural(numBooks, {\n  one: \"# book\",\n  other: \"# books\",\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Pseudolocalization in Lingui\nDESCRIPTION: Configuration setup for enabling pseudolocalization in Lingui. Defines locales, pseudo-locale identifier, and fallback locale settings in the Lingui configuration file.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/guides/pseudolocalization.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from \"@lingui/cli\";\n\nexport default defineConfig({\n  locales: [\"en\", \"pseudo-LOCALE\"],\n  pseudoLocale: \"pseudo-LOCALE\",\n  fallbackLocales: {\n    \"pseudo-LOCALE\": \"en\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Detecting Locale Using Multiple Strategies in JavaScript\nDESCRIPTION: Example of using the detect function to determine user locale using multiple detection strategies, including URL parameters, local storage, and browser settings.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/locale-detector.md#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { detect, fromUrl, fromStorage, fromNavigator } from \"@lingui/detect-locale\";\n\n// can be a function with custom logic or just a string, `detect` method will handle it\nconst DEFAULT_FALLBACK = () => \"en\";\n\nconst result = detect(fromUrl(\"lang\"), fromStorage(\"lang\"), fromNavigator(), DEFAULT_FALLBACK);\n\nconsole.log(result); // \"en\"\n```\n\n----------------------------------------\n\nTITLE: Creating Crowdin Configuration File in YAML\nDESCRIPTION: Configure Crowdin integration by creating a crowdin.yml file that specifies project ID, API token, and file paths for source and translation files.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/tools/crowdin.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nproject_id: \"123456\" # Your Crowdin project ID\napi_token_env: CROWDIN_PERSONAL_TOKEN\n\npreserve_hierarchy: true\n\nfiles: # Paths to the source and translation files\n  - source: /**/locales/en/*\n    translation: /**/locales/%two_letters_code%/%original_file_name%\n```\n\n----------------------------------------\n\nTITLE: Dynamic Loading of PO Message Catalogs with Lingui\nDESCRIPTION: Example of dynamically loading and activating a locale using @lingui/loader to import .po files. Shows how to load messages and activate them in the i18n instance.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/loader.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function dynamicActivate(locale: string) {\n  const { messages } = await import(`@lingui/loader!./locales/${locale}/messages.po`);\n  i18n.load(locale, messages);\n  i18n.activate(locale);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Translation Outside JSX\nDESCRIPTION: Shows how to translate strings outside of JSX using the useLingui hook.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/tutorials/react.md#2025-04-17_snippet_19\n\nLANGUAGE: js\nCODE:\n```\nconst markAsRead = () => {\n  alert(\"Marked as read.\");\n};\n```\n\nLANGUAGE: js\nCODE:\n```\nimport { useLingui } from \"@lingui/react/macro\";\n\nconst { t } = useLingui();\n\nconst markAsRead = () => {\n  alert(t`Marked as read.`);\n};\n```\n\n----------------------------------------\n\nTITLE: Using msg Alias for defineMessage Macro in TypeScript\nDESCRIPTION: Shows how to use the shorter msg alias for the defineMessage macro to define a message. It demonstrates the transformation of the macro into a MessageDescriptor object.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/macro.mdx#2025-04-17_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { msg } from \"@lingui/core/macro\";\nconst message = msg`Hello World`;\n\n// ↓ ↓ ↓ ↓ ↓ ↓\n\nconst message = /*i18n*/ {\n  id: \"mY42CM\",\n  message: \"Hello World\",\n};\n```\n\n----------------------------------------\n\nTITLE: Detecting Multiple Locales Using Various Strategies in JavaScript\nDESCRIPTION: Demonstration of using the multipleDetect function to retrieve all detected locales from multiple sources, including URL parameters, local storage, and browser settings.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/locale-detector.md#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { multipleDetect, fromUrl, fromStorage, fromNavigator } from \"@lingui/detect-locale\";\n\n// can be a function with custom logic or just a string, `detect` method will handle it\nconst DEFAULT_FALLBACK = () => \"en\";\n\nconst result = multipleDetect(fromUrl(\"lang\"), fromStorage(\"lang\"), fromNavigator(), DEFAULT_FALLBACK);\n\nconsole.log(result); // [\"en\", \"es\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Metro Transformer for Expo\nDESCRIPTION: Configuration setup for metro.config.js in Expo projects to enable .po file transformation.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/metro-transformer.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Learn more https://docs.expo.io/guides/customizing-metro\nconst { getDefaultConfig } = require(\"expo/metro-config\");\n\nconst config = getDefaultConfig(__dirname);\nconst { transformer, resolver } = config;\n\nconfig.transformer = {\n  ...transformer,\n  babelTransformerPath: require.resolve(\"@lingui/metro-transformer/expo\"),\n};\nconfig.resolver = {\n  ...resolver,\n  sourceExts: [...resolver.sourceExts, \"po\", \"pot\"],\n};\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Defining Lingui Configuration with defineConfig Method\nDESCRIPTION: This snippet shows how to use the new defineConfig method to define configuration options for the Lingui CLI. It provides a more structured and type-safe way to set up Lingui, including source locale, target locales, and catalog paths.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/blog/2024-11-28-announcing-lingui-5.0/index.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from \"@lingui/cli\";\n\nexport default defineConfig({\n  sourceLocale: \"en\",\n  locales: [\"cs\", \"en\"],\n  catalogs: [\n    {\n      path: \"<rootDir>/src/locales/{locale}/messages\",\n      include: [\"src\"],\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Single Directory Catalog Configuration in JSON\nDESCRIPTION: Configuration example for storing all catalogs in a single directory.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/conf.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"catalogs\": [\n    {\n      \"path\": \"locales/{locale}\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PO Format in Lingui\nDESCRIPTION: JavaScript configuration for using the PO format in Lingui, including importing the formatter and setting options.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/catalog-formats.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from \"@lingui/cli\";\nimport { formatter } from \"@lingui/format-po\";\n\nexport default defineConfig({\n  // [...]\n  format: formatter({ lineNumbers: false }),\n});\n```\n\n----------------------------------------\n\nTITLE: Using useLingui Hook with t Macro for String Props\nDESCRIPTION: Example of using the useLingui hook to get the t macro for translating string properties in React Native components.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/tutorials/react-native.md#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLingui } from '@lingui/react/macro';\n\nconst { t } = useLingui();\n...\n<Button title={t`this will be translated and rerendered with locale changes`}/>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Loading of JSON Message Catalogs with Lingui\nDESCRIPTION: Example of dynamically loading JSON message catalogs with @lingui/loader, demonstrating the different import syntax required for .json files due to Webpack's handling of JSON modules.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/loader.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst { messages } = (await import(`@lingui/loader!./locales/${locale}/messages.json`)).default;\n```\n\n----------------------------------------\n\nTITLE: Nested Translation Components with Styling\nDESCRIPTION: Example of nested Text components with different styles within a Trans component, maintaining translation context while applying varied text formatting.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/tutorials/react-native.md#2025-04-17_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<Trans>\n  <Text style={{ fontSize: 20 }}>\n    <Text>Concert of </Text>\n    <Text style={{ color: \"green\" }}>Green Day</Text>\n    <Text style={{ fontWeight: \"bold\" }}> tonight!</Text>\n  </Text>\n</Trans>\n```\n\n----------------------------------------\n\nTITLE: Migrating from setupI18n to Default i18n Export\nDESCRIPTION: Diff showing how to switch from using setupI18n to the default i18n instance exported from @lingui/core.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/releases/migration-3.md#2025-04-17_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n+ import { i18n } from \"@lingui/core\"\n- import { setupI18n } from \"@lingui/core\"\n\n- const i18n = setupI18n()\n  i18n.activate('en')\n```\n\n----------------------------------------\n\nTITLE: ICU Message Format for English Pluralization\nDESCRIPTION: This example shows the ICU Message Format syntax that is extracted from the source code during the Lingui CLI extraction process. It represents the pluralization pattern for English with one and other forms.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/guides/plurals.md#2025-04-17_snippet_2\n\nLANGUAGE: icu-message-format\nCODE:\n```\n{numBooks, plural, one {# book} other {# books}}\n```\n\n----------------------------------------\n\nTITLE: Installing @lingui/detect-locale Package\nDESCRIPTION: Command to install the @lingui/detect-locale package using npm or yarn.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/locale-detector.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @lingui/detect-locale\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Formatter in Lingui\nDESCRIPTION: Configuration setup for using JSON formatter in Lingui. Imports the necessary dependencies and defines the formatter configuration with style option.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/catalog-formats.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from \"@lingui/cli\";\nimport { formatter } from \"@lingui/format-json\";\n\nexport default defineConfig({\n  // [...]\n  format: formatter({ style: \"lingui\" }),\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Remote Messages with Lingui\nDESCRIPTION: Demonstrates how to fetch remote message catalogs, compile them using remoteLoader, and activate them in the i18n instance. This pattern allows applications to load translation catalogs from a remote API endpoint instead of bundling them with the application.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/packages/remote-loader/README.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { i18n } from \"@lingui/core\"\nimport { remoteLoader } from \"@lingui/remote-loader\"\n\nexport async function remoteActive(locale: string) {\n  const remoteMessages = await fetch(`https://some-api/${locale}/messages`)\n  const compiledMessages = remoteLoader({ messages: remoteMessages })\n  i18n.load(locale, compiledMessages)\n  i18n.activate(locale)\n}\n```\n\n----------------------------------------\n\nTITLE: Using i18n.load in Lingui v2 and v3\nDESCRIPTION: Example showing how to use i18n.load to load catalogs in both Lingui v2 and v3, including the new v3-only single locale loading syntax.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/releases/migration-3.md#2025-04-17_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nimport { i18n } from \"@lingui/core\";\n\n// Lingui v2 and v3\ni18n.load({\n  en: require(\"./locale/en/messages\"),\n  cs: require(\"./locale/cs/messages\"),\n});\n\n// Lingui v3 only\ni18n.load(\"en\", require(\"./locale/en/messages\"));\ni18n.load(\"cs\", require(\"./locale/cs/messages\"));\n```\n\n----------------------------------------\n\nTITLE: Bundle Structure Example for Dynamic Loading\nDESCRIPTION: Shows the expected bundle structure when implementing dynamic catalog loading, demonstrating how language chunks are separated.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/guides/dynamic-loading-catalogs.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ni18n-0.c433b3bd.chunk.js\ni18n-1.f0cf2e3d.chunk.js\nmain.ab4626ef.js\n```\n\n----------------------------------------\n\nTITLE: Lingui defineMessage Macro with Explicit ID\nDESCRIPTION: This snippet shows how to use the Lingui 'defineMessage' macro with an explicitly provided ID. It demonstrates the transformation of the macro call into an internationalization object.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/macro.mdx#2025-04-17_snippet_33\n\nLANGUAGE: js\nCODE:\n```\nconst msg = defineMessage({\n  id: \"msg.refresh\",\n  message: \"Refresh inbox\",\n});\n\n// ↓ ↓ ↓ ↓ ↓ ↓\n\nconst msg = /*i18n*/ {\n  id: \"msg.refresh\",\n  message: \"Refresh inbox\",\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Translation Wrapping in React Native\nDESCRIPTION: Shows how to wrap translations with React Native Text component for basic rendering.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/tutorials/react-native.md#2025-04-17_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<Text>\n  <Trans>Message Inbox</Trans>\n</Text>\n```\n\n----------------------------------------\n\nTITLE: Loading Multiple Catalogs with i18n.load\nDESCRIPTION: Example showing how to load multiple locale catalogs at once using i18n.load in Lingui v3.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/releases/migration-3.md#2025-04-17_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n// i18n.js\nimport { i18n } from \"@lingui/core\";\nimport catalogEn from \"./locale/en/messages.js\";\nimport catalogFr from \"./locale/fr/messages.js\";\n\ni18n.load({\n  en: catalogEn.messages,\n  fr: catalogFr.messages,\n});\n```\n\n----------------------------------------\n\nTITLE: Updating plural, select, and selectOrdinal Macro Syntax\nDESCRIPTION: Diff showing the updated syntax for plural, select, and selectOrdinal macros, which now accept value as the first parameter.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/releases/migration-3.md#2025-04-17_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n- plural({ value, one: \"# book\", other: \"# books\" })\n+ plural(value, { one: \"# book\", other: \"# books\" })\n```\n\n----------------------------------------\n\nTITLE: Advanced Macro Import Configuration\nDESCRIPTION: Example of importing Trans and useLingui from a custom configuration.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/conf.md#2025-04-17_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Trans, useLingui } from \"./custom-config\";\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Extractor to Lingui Configuration\nDESCRIPTION: This snippet demonstrates how to import and add a custom extractor to the Lingui configuration file. It shows the proper way to include the extractor in the configuration object.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/guides/custom-extractor.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { extractor } from \"./my-custom-extractor.ts\";\nimport { defineConfig } from \"@lingui/cli\";\n\nexport default defineConfig({\n  // [...]\n  extractors: [extractor],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Lingui SWC Plugin in Next.js\nDESCRIPTION: Configuration for the next.config.js file to enable the Lingui SWC plugin in Next.js projects.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/swc-plugin.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  reactStrictMode: true,\n  experimental: {\n    swcPlugins: [\n      [\n        \"@lingui/swc-plugin\",\n        {\n          // Additional Configuration\n        },\n      ],\n    ],\n  },\n};\n\nmodule.exports = nextConfig;\n```\n\n----------------------------------------\n\nTITLE: Memoization Pitfalls with Lazy Translations in React\nDESCRIPTION: Illustrates common pitfalls when combining useMemo with translations and provides the correct approach. Shows why using the t function from useLingui is necessary to ensure translations update when the locale changes.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/guides/lazy-translations.md#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { i18n } from \"@lingui/core\";\nimport { msg } from \"@lingui/core/macro\";\nimport { useLingui } from \"@lingui/react/macro\";\n\nconst welcomeMessage = msg`Welcome!`;\n\n// ❌ Bad! This code won't work\nexport function Welcome() {\n  const buggyWelcome = useMemo(() => {\n    return i18n._(welcomeMessage);\n  }, []);\n\n  return <div>{buggyWelcome}</div>;\n}\n\n// ❌ Bad! This code won't work either because the reference to i18n does not change\nexport function Welcome() {\n  const { i18n } = useLingui();\n\n  const buggyWelcome = useMemo(() => {\n    return i18n._(welcomeMessage);\n  }, [i18n]);\n\n  return <div>{buggyWelcome}</div>;\n}\n\n// ✅ Good! `useMemo` consumes the `t` function from the `useLingui` macro\nexport function Welcome() {\n  const { t } = useLingui();\n\n  const welcome = useMemo(() => {\n    return t(welcomeMessage);\n  }, [t]);\n\n  return <div>{welcome}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Generated IDs with JSX Macro\nDESCRIPTION: Complete example of using generated IDs with the Trans component in a React component.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/guides/explicit-vs-generated-ids.md#2025-04-17_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Trans } from \"@lingui/react/macro\";\n\nfunction render() {\n  return (\n    <>\n      <h1>\n        <Trans>LinguiJS example</Trans>\n      </h1>\n      <p>\n        <Trans>\n          Hello <a href=\"/profile\">{name}</a>.\n        </Trans>\n      </p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Custom IDs with Core Macro\nDESCRIPTION: Examples of using custom IDs with msg and plural macros.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/guides/explicit-vs-generated-ids.md#2025-04-17_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { msg } from \"@lingui/core/macro\";\n\nmsg({ id: \"msg.greeting\", message: `Hello World` });\n```\n\n----------------------------------------\n\nTITLE: Using Trans Component with ID-only Examples\nDESCRIPTION: Example showing when to keep importing Trans from @lingui/react for ID-only use cases.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/releases/migration-3.md#2025-04-17_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Trans } from \"@lingui/react\";\n\nconst CustomID = () => <Trans id=\"msg.id\" />;\nconst DynamicID = () => <Trans id={msgId} />;\n```\n\n----------------------------------------\n\nTITLE: Replacing Babel Plugins/Presets with Macros\nDESCRIPTION: Bash and diff example showing how to replace Lingui babel plugins/presets with the new macro-based approach.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/releases/migration-3.md#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall @lingui/babel-preset-react\nnpm install --dev @lingui/macro babel-plugin-macros\n```\n\nLANGUAGE: diff\nCODE:\n```\n{\n   \"presets\": [\n-      \"@lingui/babel-preset-react\"\n   ],\n   \"plugins\": [\n+      \"macros\",\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Metro Transformer for Plain React Native\nDESCRIPTION: Configuration setup for metro.config.js in plain React Native projects to enable .po file transformation.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/metro-transformer.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getDefaultConfig, mergeConfig } = require(\"@react-native/metro-config\");\n\nconst defaultConfig = getDefaultConfig(__dirname);\nconst { assetExts, sourceExts } = defaultConfig.resolver;\n\n/**\n * Metro configuration\n * https://reactnative.dev/docs/metro\n *\n * @type {import('metro-config').MetroConfig}\n */\nconst config = {\n  transformer: {\n    babelTransformerPath: require.resolve(\"@lingui/metro-transformer/react-native\"),\n  },\n  resolver: {\n    sourceExts: [...sourceExts, \"po\", \"pot\"],\n  },\n};\n\nmodule.exports = mergeConfig(defaultConfig, config);\n```\n\n----------------------------------------\n\nTITLE: Ignoring Specific Messages During Extraction in TypeScript\nDESCRIPTION: Demonstrates how to exclude specific message expressions from extraction by adding a lingui-extract-ignore comment. This is useful for messages that should not be translated.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/guides/message-extraction.md#2025-04-17_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n/* lingui-extract-ignore */\nctx.i18n._(\"Message\");\n```\n\n----------------------------------------\n\nTITLE: Updating i18n._ Method Signature\nDESCRIPTION: Diff showing the updated signature of the i18n._ method, which now accepts the default message in 'message' prop instead of 'defaults'.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/releases/migration-3.md#2025-04-17_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n- i18n._('Welcome / Greetings', { name: 'Joe' }, { defaults: \"Hello {name}\" })\n+ i18n._('Welcome / Greetings', { name: 'Joe' }, { message: \"Hello {name}\" })\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom Formatter in Lingui Config File\nDESCRIPTION: This shows how to define a custom formatter in the Lingui configuration file. The formatter implements parse and serialize functions to handle reading from and writing to a custom catalog format.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/guides/custom-formatter.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from \"@lingui/cli\";\nimport { extractor } from \"./my-custom-extractor.ts\";\n\nexport default defineConfig({\n  // [...]\n  format: {\n    catalogExtension: \"json\",\n    parse: (content: string): CatalogType => JSON.parse(content),\n    serialize: (catalog: CatalogType): string => JSON.stringify(catalog),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Lingui Context Example\nDESCRIPTION: Demonstrating context-aware translations in Lingui using the msg macro.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/misc/i18next.md#2025-04-17_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { msg } from \"@lingui/core/macro\";\n\nmsg({\n  message: \"Right\",\n  context: \"direction\",\n});\n```\n\n----------------------------------------\n\nTITLE: Simplified Translation with DefaultComponent\nDESCRIPTION: Demonstrates simplified translation syntax when using defaultComponent prop in I18nProvider.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/tutorials/react-native.md#2025-04-17_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<Trans>Message Inbox</Trans>\n```\n\n----------------------------------------\n\nTITLE: Recommended Translation Pattern\nDESCRIPTION: Shows the recommended way of handling translations outside React components in v4.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/releases/migration-4.md#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { msg } from \"@lingui/macro\";\nimport { useLingui } from \"@lingui/react\";\n\nconst myMsg = msg`Hello world!`;\n\nexport function Greeting(props: {}) {\n  const { i18n } = useLingui();\n\n  return <h1>{i18n._(myMsg)}</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Nested JSX Macro ICU Message Changes\nDESCRIPTION: Shows the changes in ICU message generation for nested JSX macros.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/releases/migration-4.md#2025-04-17_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Plural id=\"message.id\" one={<Trans>One hello</Trans>} other={<Trans>Other hello</Trans>} value={count} />\n```\n\nLANGUAGE: diff\nCODE:\n```\n<Trans\n  id=\"message.id\"\n  message={\n-     \"{count, plural, one { One hello} other { Other hello}}\"\n+     \"{count, plural, one {One hello} other {Other hello}}\"\n  }\n  values={{\n    count: count\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Traditional approach with useLingui hook and macros\nDESCRIPTION: Shows the previous approach of combining the useLingui hook with t or msg macros in React components.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/releases/migration-5.md#2025-04-17_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { t, msg } from \"@lingui/macro\";\nimport { useLingui } from \"@lingui/react\";\n\nfunction MyComponent() {\n  const { i18n, _ } = useLingui();\n\n  const a = t(i18n)`Text`;\n  // or\n  const b = _(msg`Text`);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Lingui CLI\nDESCRIPTION: Command to install @lingui/cli as a development dependency using npm.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/cli.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @lingui/cli\n```\n\n----------------------------------------\n\nTITLE: Example usage of Lingui split macros\nDESCRIPTION: Demonstrates how to use the new split macros in a React component, importing React components from react/macro and core functions from core/macro.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/releases/migration-5.md#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Trans } from \"@lingui/react/macro\";\nimport { msg } from \"@lingui/core/macro\";\n\nconst colors = [msg`Red`, msg`Yellow`, msg`Green`];\n\nfunction MyComponent() {\n  <Trans>Hi, my name is {name}</Trans>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Ordinals in ICU MessageFormat\nDESCRIPTION: Demonstrates implementing ordinal numbers (1st, 2nd, 3rd) with the selectOrdinal format to properly display position-based text according to language rules.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/guides/message-format.md#2025-04-17_snippet_4\n\nLANGUAGE: icu-message-format\nCODE:\n```\n{count, selectOrdinal, one {#st message}\n                       two {#nd message}\n                       few {#rd message}\n                       other {#th message}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js for Lingui SWC Plugin\nDESCRIPTION: This snippet shows how to add the Lingui SWC plugin to the Next.js configuration file. It enables the use of Lingui macros in the project.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/tutorials/react-rsc.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('next').NextConfig} */\nmodule.exports = {\n  // to use Lingui macros\n  experimental: {\n    swcPlugins: [[\"@lingui/swc-plugin\", {}]],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing i18next Configuration\nDESCRIPTION: Basic setup and initialization of i18next with English locale and translation resources.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/misc/i18next.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport i18next from \"i18next\";\n\ni18next.init({\n  lng: \"en\",\n  resources: {\n    en: {\n      translation: {\n        key: \"Hello world\",\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: JSX Macro Package Configuration\nDESCRIPTION: Example of configuring custom JSX macro package and its usage.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/conf.md#2025-04-17_snippet_13\n\nLANGUAGE: js\nCODE:\n```\n{\n  macro: {\n    jsxPackage: [\"@lingui/myMacro\"];\n  }\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Trans } from \"@lingui/myMacro\";\n\n<Trans>Hello</Trans>; // <-- would be correctly picked up by macro\n```\n\n----------------------------------------\n\nTITLE: Placeholder values in template literals\nDESCRIPTION: Example of template literals with placeholders that will now have improved contextual information in PO files for translators.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/releases/migration-5.md#2025-04-17_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nt`Hello ${user.name} ${value}`;\n```\n\n----------------------------------------\n\nTITLE: Extended Exact Forms with Multiple Matches\nDESCRIPTION: Demonstrates multiple exact number matches in the Plural component with custom messages for 0, 1, and 2 messages, plus a default case.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/tutorials/react.md#2025-04-17_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\n<p>\n  <Plural\n    value={messagesCount}\n    _0=\"There are no messages\"\n    _1=\"There's one message in your inbox\"\n    _2=\"There are two messages in your inbox, that's not much!\"\n    other=\"There are # messages in your inbox\"\n  />\n</p>\n```\n\n----------------------------------------\n\nTITLE: Defining AllMessages Type for Lingui Message Loading\nDESCRIPTION: Illustrates the structure of the AllMessages type used in Lingui for loading messages. It shows how to organize translations for multiple locales.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/core.md#2025-04-17_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\ntype AllMessages = { [locale: string]: CompiledMessage };\n\n// Example\nconst messages: AllMessages = {\n  en: {\n    messages: {\n      Hello: \"Hello\",\n      \"Good bye\": \"Good bye\",\n    },\n  },\n  cs: {\n    messages: {\n      Hello: \"Ahoj\",\n      \"Good bye\": \"Nashledanou\",\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Compiled Message Output Format\nDESCRIPTION: Example of the compiled messages output format in TypeScript.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/cli.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport const messages = JSON.parse(`{\n// object with keys (translation ids) and values (translations)\n}`);\n```\n\n----------------------------------------\n\nTITLE: Using Lingui Trans Macro for Internationalization\nDESCRIPTION: Demonstrates how to use the Lingui Trans macro to make static text content translatable in a React component.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/tutorials/react.md#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Trans } from \"@lingui/react/macro\";\n\n<h1>\n  <Trans>Message Inbox</Trans>\n</h1>;\n```\n\n----------------------------------------\n\nTITLE: Configuring CSV Formatter in Lingui\nDESCRIPTION: Configuration setup for using CSV formatter in Lingui. Imports required dependencies and sets up the basic formatter configuration.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/catalog-formats.md#2025-04-17_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from \"@lingui/cli\";\nimport { formatter } from \"@lingui/format-csv\";\n\nexport default defineConfig({\n  // [...]\n  format: formatter(),\n});\n```\n\n----------------------------------------\n\nTITLE: i18next Interpolation Example\nDESCRIPTION: Demonstrating variable interpolation with i18next.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/misc/i18next.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport i18next from \"i18next\";\n\ni18next.t(\"My name is {name}\", { name: \"Tom\" });\ni18next.t(\"msg.name\", { name: \"Tom\" });\n```\n\n----------------------------------------\n\nTITLE: i18next React Integration\nDESCRIPTION: Example of using i18next with React components using the Trans component.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/misc/i18next.md#2025-04-17_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Trans } from \"react-i18next\";\n\nconst HelloWorld = () => {\n  return <Trans i18nKey=\"welcome\">Hello World!</Trans>;\n};\n```\n\n----------------------------------------\n\nTITLE: Git Hook Configuration for Message Extraction\nDESCRIPTION: Husky pre-commit hook configuration for extracting messages from staged files.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/cli.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"husky\": {\n    \"hooks\": {\n      \"pre-commit\": \"lingui extract $(git diff --name-only --staged)\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @lingui/react with npm or yarn\nDESCRIPTION: Command for installing the @lingui/react package using npm or yarn for React applications requiring internationalization support.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/react.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @lingui/react\n```\n\n----------------------------------------\n\nTITLE: Extracted Message Format for Translated JSX Content\nDESCRIPTION: Shows the extracted message format from the Trans macro, replacing components and HTML tags with indexed placeholders.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/tutorials/react.md#2025-04-17_snippet_10\n\nLANGUAGE: gettext\nCODE:\n```\n#: src/Inbox.js:20\nmsgid \"See all <0>unread messages</0> or <1>mark them</1> as read.\"\nmsgstr \"\"\n```\n\n----------------------------------------\n\nTITLE: Using Generated IDs in JSX\nDESCRIPTION: Demonstration of automatic ID generation in LinguiJS using the Trans component.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/guides/explicit-vs-generated-ids.md#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Trans>LinguiJS example</Trans>\n\n// extracted as\n{\n  id: \"uxV9Xq\",\n  message: \"LinguiJS example\",\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Lingui Client Provider for Next.js\nDESCRIPTION: This client component sets up the Lingui I18nProvider for client-side rendering. It initializes the i18n instance with the initial locale and messages passed from the server.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/tutorials/react-rsc.md#2025-04-17_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport { I18nProvider } from \"@lingui/react\";\nimport { type Messages, setupI18n } from \"@lingui/core\";\nimport { useState } from \"react\";\n\nexport function LinguiClientProvider({\n  children,\n  initialLocale,\n  initialMessages,\n}: {\n  children: React.ReactNode;\n  initialLocale: string;\n  initialMessages: Messages;\n}) {\n  const [i18n] = useState(() => {\n    return setupI18n({\n      locale: initialLocale,\n      messages: { [initialLocale]: initialMessages },\n    });\n  });\n  return <I18nProvider i18n={i18n}>{children}</I18nProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: CSV Format Example\nDESCRIPTION: Demonstrates the basic CSV format structure with message ID and message columns for translations.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/catalog-formats.md#2025-04-17_snippet_11\n\nLANGUAGE: csv\nCODE:\n```\nmessageId,Message\nmsg.common,String for translation\n```\n\n----------------------------------------\n\nTITLE: Using TransRenderProps type for custom render implementation\nDESCRIPTION: TypeScript interface definition for the TransRenderProps type which defines the properties passed to custom render functions for translations.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/react.md#2025-04-17_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\ntype TransRenderProps = {\n  id: string;\n  translation: React.ReactNode;\n  children: React.ReactNode;\n  message?: string | null;\n};\n```\n\n----------------------------------------\n\nTITLE: Lingui Configuration with Custom Formatter\nDESCRIPTION: Example showing how to configure a custom PO formatter with specific options.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/conf.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from \"@lingui/cli\";\nimport { formatter } from \"@lingui/format-po\";\n\nexport default defineConfig({\n  // [...]\n  format: formatter({ lineNumbers: false }),\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering translations with custom component\nDESCRIPTION: Example of using the Trans component with a custom component prop to render translations inside a specific component.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/react.md#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Text } from \"react-native\";\n\n<Trans component={Text}>Link to docs</Trans>;\n// renders as <Text>Link to docs</Text>\n```\n\n----------------------------------------\n\nTITLE: Extracting Messages with Lingui CLI\nDESCRIPTION: Shows the output of running the Lingui extract command to generate message catalogs from the source code.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/tutorials/react.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n> lingui extract\n\nCatalog statistics:\n┌──────────┬─────────────┬─────────┐\n│ Language │ Total count │ Missing │\n├──────────┼─────────────┼─────────┤\n│ cs       │      1      │    1    │\n│ en       │      1      │    1    │\n└──────────┴─────────────┴─────────┘\n```\n\n----------------------------------------\n\nTITLE: PO Format Example for Lingui\nDESCRIPTION: Example of a PO file format showing message ID, translation, and metadata.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/catalog-formats.md#2025-04-17_snippet_2\n\nLANGUAGE: po\nCODE:\n```\n#: src/App.js:3\n#. Comment for translators\nmsgid \"messageId\"\nmsgstr \"Translated Message\"\n\n#: src/App.js:3\n#, obsolete\nmsgid \"obsoleteId\"\nmsgstr \"Obsolete Message\"\n```\n\n----------------------------------------\n\nTITLE: Plural with Custom ID\nDESCRIPTION: Example of using plural macro with a custom ID for handling plural forms.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/guides/explicit-vs-generated-ids.md#2025-04-17_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { msg, plural } from \"@lingui/core/macro\";\n\nmsg({\n  id: \"msg.caption\",\n  message: plural(count, {\n    one: \"# image caption\",\n    other: \"# image captions\",\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Lingui-Compatible React Component\nDESCRIPTION: This example shows how to create a React component that can be rendered both with React Server Components and on the client. It demonstrates the use of Trans and useLingui for translations.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/tutorials/react-rsc.md#2025-04-17_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Trans, useLingui } from \"@lingui/react/macro\";\n\nexport function SomeComponent() {\n  const { t } = useLingui();\n  return (\n    <div>\n      <p>\n        <Trans>Some Item</Trans>\n      </p>\n      <p>{t`Other Item`}</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Field Stripping Behavior for Lingui SWC Plugin\nDESCRIPTION: Configuration example for the stripNonEssentialFields option to control whether non-essential fields are removed from builds.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/swc-plugin.md#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n[\n  \"@lingui/swc-plugin\",\n  {\n    \"stripNonEssentialFields\": false\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Using Lingui Translation Macro\nDESCRIPTION: Example of using Lingui's macro for direct translation in code.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/misc/i18next.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { t } from \"@lingui/core/macro\";\n\ndocument.getElementById(\"output\").innerHTML = t`Hello world`;\n```\n\n----------------------------------------\n\nTITLE: JSX Whitespace Handling Example\nDESCRIPTION: Example showing how whitespace around variables in JSX is handled in Lingui v3, where leading whitespace is removed.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/releases/migration-3.md#2025-04-17_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<Trans>\n  &quot;\n  {variable}\n  &quot;\n</Trans>\n\n// Becomes: &quot;{variable}&quot;\n```\n\n----------------------------------------\n\nTITLE: Updating Babel Configuration for Lingui Macro Plugin\nDESCRIPTION: Diff showing how to replace the babel-macro-plugin with the new standalone @lingui/babel-plugin-lingui-macro in the Babel configuration.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/blog/2024-11-28-announcing-lingui-5.0/index.md#2025-04-17_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n{\n  \"plugins\": [\n-    \"macros\"\n+    \"@lingui/babel-plugin-lingui-macro\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Lingui React Integration\nDESCRIPTION: Example of using Lingui with React components using the Trans macro.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/misc/i18next.md#2025-04-17_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Trans } from \"@lingui/react/macro\";\n\nconst HelloWorld = () => {\n  return <Trans>Hello World!</Trans>;\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Formatter Type Definition in TypeScript\nDESCRIPTION: This code snippet defines the TypeScript interface for a custom catalog formatter. It specifies the required properties and methods that a formatter must implement, including file extension handling and methods for parsing and serializing catalogs.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/guides/custom-formatter.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport type CatalogFormatter = {\n  catalogExtension: string;\n  /**\n   * Set extension used when extract to template\n   * Omit if the extension is the same as catalogExtension\n   */\n  templateExtension?: string;\n  parse(\n    content: string,\n    ctx: { locale: string | null; sourceLocale: string; filename: string }\n  ): Promise<CatalogType> | CatalogType;\n  serialize(\n    catalog: CatalogType,\n    ctx: { locale: string | null; sourceLocale: string; filename: string; existing: string | null }\n  ): Promise<string> | string;\n};\n```\n\n----------------------------------------\n\nTITLE: Using Message Descriptor with i18n._\nDESCRIPTION: Example of how to use the new message descriptor format with the i18n._ method.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/releases/migration-3.md#2025-04-17_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\ni18n._({  \n  id: string,\n  message?: string,\n  comment?: string\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Runtime Modules for Lingui SWC Plugin\nDESCRIPTION: Configuration example for the runtimeModules option that maps runtime module names to their corresponding module paths and export names.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/swc-plugin.md#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n[\n  \"@lingui/swc-plugin\",\n  {\n    \"runtimeModules\": {\n      \"i18n\": [\"@lingui/core\", \"i18n\"],\n      \"trans\": [\"@lingui/react\", \"Trans\"]\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Lingui Catalog Type Definition in TypeScript\nDESCRIPTION: This snippet defines the structure of the Lingui catalog type system using TypeScript. It specifies the shape of catalog objects containing message entries and their associated metadata such as origins, comments, and translation status.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/guides/custom-formatter.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport type CatalogType = {\n  [msgId: string]: MessageType;\n};\n\ntype CatalogExtra = Record<string, unknown>;\n\nexport type MessageType<Extra = CatalogExtra> = {\n  message?: string;\n  origin?: MessageOrigin[];\n  comments?: string[];\n  obsolete?: boolean;\n  context?: string;\n  translation?: string;\n\n  /**\n   * the generic field where\n   * formatters can store additional data\n   */\n  extra?: Extra;\n};\n```\n\n----------------------------------------\n\nTITLE: Preserving Newlines in JSX with Trans\nDESCRIPTION: Example showing how to force preserve newlines in JSX Trans components by explicitly adding them as string literals.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/releases/migration-3.md#2025-04-17_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<Trans>\n  1. Item{\"\\n\"}\n  2. Item\n</Trans>\n\n// Becomes: 1. Item\\n2. Item\n```\n\n----------------------------------------\n\nTITLE: Using Lingui Macros in React Components (Before)\nDESCRIPTION: Example of using Lingui macros in a React component before the introduction of the new useLingui macro.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/blog/2024-11-28-announcing-lingui-5.0/index.md#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { t, msg } from \"@lingui/macro\";\nimport { useLingui } from \"@lingui/react\";\n\nfunction MyComponent() {\n  const { i18n, _ } = useLingui();\n\n  const a = t(i18n)`Text`;\n  // or\n  const b = _(msg`Second Text`);\n}\n```\n\n----------------------------------------\n\nTITLE: Lingui Number Formatting\nDESCRIPTION: Examples of number formatting using Lingui with different locales and options.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/misc/i18next.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { i18n } from \"@lingui/core\";\n\ni18n.activate(\"en\");\ni18n.number(12345.678);\n// Returns \"12,345.678\"\n\ni18n.number(12345.678, { style: \"currency\", currency: \"USD\" });\n// Returns \"$12,345.68\"\n\ni18n.activate(\"cs\");\ni18n.number(12345.678);\n// Returns \"12 345,678\"\n\ni18n.number(12345.678, { style: \"currency\", currency: \"CZK\" });\n// Returns \"12 345,68 Kč\"\n```\n\n----------------------------------------\n\nTITLE: Pluralization with Lingui Trans Component\nDESCRIPTION: Shows how to handle plural forms using the Trans component with ICU MessageFormat syntax for counting items.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/react.md#2025-04-17_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\";\nimport { Trans } from \"@lingui/react\";\n\nconst CarCount = ({ cars }) => {\n  return (\n    <Trans\n      id=\"application.pages.carsList\"\n      message=\"{count, plural, =1 {# car} other {# cars}}\"\n      values={{ count: cars.length }}\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Message Extraction via Node API\nDESCRIPTION: JavaScript code showing how to use the message extraction plugin programmatically through the Babel Node API.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/packages/babel-plugin-extract-messages/README.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"@babel/core\").transform(\"code\", {\n  plugins: [\"@lingui/babel-plugin-extract-messages\"]\n})\n```\n\n----------------------------------------\n\nTITLE: Updating i18n.load for Single Locale Catalogs\nDESCRIPTION: Diff showing how to update i18n.load to use the new signature that loads a catalog for a single locale.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/releases/migration-3.md#2025-04-17_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n  import { i18n } from \"@lingui/core\"\n  import catalogEn from './locale/en/messages.js'\n\n- i18n.load({ en: catalogEn })\n+ i18n.load('en', catalogEn.messages)\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server\nDESCRIPTION: Command-line instructions for starting the Next.js development server using npm, yarn, or pnpm. This will launch the application with LinguiJS integration for internationalization.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/examples/nextjs-swc/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Custom Lingui Rule Configuration in Flat Config (ESLint v8+)\nDESCRIPTION: JavaScript configuration for manually setting up Lingui ESLint rules in the flat config format. This allows for more granular control over which rules are enabled and their severity levels.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/eslint-plugin.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport pluginLingui from \"eslint-plugin-lingui\";\n\nexport default [\n  {\n    plugins: {\n      lingui: pluginLingui,\n    },\n    rules: {\n      \"lingui/t-call-in-function\": \"error\",\n    },\n  },\n  // Any other config...\n];\n```\n\n----------------------------------------\n\nTITLE: Custom Named Export Runtime Configuration\nDESCRIPTION: JSON configuration for custom named export in runtime configuration.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/conf.md#2025-04-17_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"runtimeConfigModule\": [\"./custom-i18n-config\", \"myI18n\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Enhancing Comment Extraction for Translation IDs in JavaScript\nDESCRIPTION: A feature enhancement that allows extraction of multiple comments per translation ID. This improves the context information available for translators. Part of version 3.2.0.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/packages/babel-plugin-extract-messages/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- extract multiple comments per translation ID ([#854](https://github.com/lingui/js-lingui/issues/854)) ([c849c9c](https://github.com/lingui/js-lingui/commit/c849c9c024832aa7b07e5f837791e287c3aebe29))\n```\n\n----------------------------------------\n\nTITLE: Lingui Interpolation Example\nDESCRIPTION: Demonstrating variable interpolation with Lingui macros.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/misc/i18next.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { t } from \"@lingui/core/macro\";\n\nconst name = \"Tom\";\n\nt`My name is ${name}`;\nt({ id: \"msg.name\", message: `My name is ${name}` });\n```\n\n----------------------------------------\n\nTITLE: Using render prop for custom translation rendering\nDESCRIPTION: Example of using the Trans component with a render prop to implement custom rendering logic for translations.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/react.md#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Trans render={({ translation }) => <Icon label={translation} />}>Sign in</Trans>\n// renders as <Icon label=\"Sign in\" />\n```\n\n----------------------------------------\n\nTITLE: New useLingui macro approach\nDESCRIPTION: Demonstrates the simplified approach using the new useLingui macro which provides a more intuitive API for translations in React components.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/releases/migration-5.md#2025-04-17_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useLingui } from \"@lingui/react/macro\";\n\nfunction MyComponent() {\n  const { t } = useLingui();\n\n  const a = t`Text`;\n}\n```\n\n----------------------------------------\n\nTITLE: Extracted Message Format in PO File\nDESCRIPTION: This snippet shows the format of the extracted message from the previous React component in a PO file. It includes the message ID and the translated string with placeholders for dynamic content.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/README.md#2025-04-17_snippet_1\n\nLANGUAGE: po\nCODE:\n```\nmsgid \"msg.docs\"\nmsgstr \"Read the <0>documentation</0> for more info.\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel Parser Options for Experimental ECMAScript Syntax in Lingui\nDESCRIPTION: This snippet demonstrates how to override the default Lingui extractor to support experimental ECMAScript features. It configures babel parser options based on file extensions and adds support for features like import attributes and explicit resource management.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/guides/custom-extractor.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { extractFromFileWithBabel, defineConfig } from \"@lingui/cli/api\";\nimport type { ParserPlugin } from \"@babel/parser\";\n\nexport function getBabelParserOptions(filename: string) {\n  // https://babeljs.io/docs/en/babel-parser#latest-ecmascript-features\n  const parserPlugins: ParserPlugin[] = [\"importAttributes\", \"explicitResourceManagement\"];\n\n  if ([/\\.ts$/, /\\.mts$/, /\\.cts$/, /\\.tsx$/].some((r) => filename.match(r))) {\n    parserPlugins.push(\"typescript\");\n  }\n\n  if ([/\\.js$/, /\\.jsx$/, /\\.tsx$/].some((r) => filename.match(r))) {\n    parserPlugins.push(\"jsx\");\n  }\n\n  return parserPlugins;\n}\n\nexport default defineConfig({\n  // [...]\n  extractors: [\n    {\n      match(filename: string) {\n        return filename.match(/\\.[cm][tj]sx?$/);\n      },\n      async extract(filename, code, onMessageExtracted, ctx) {\n        return extractFromFileWithBabel(filename, code, onMessageExtracted, ctx, {\n          // https://babeljs.io/docs/babel-parser#plugins\n          plugins: getBabelParserOptions(filename),\n        });\n      },\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Listing Required Configuration Files for Lingui in Monorepo\nDESCRIPTION: This snippet lists the configuration files needed for setting up Lingui in a monorepo. It specifies the need for a single babel.config.js and lingui.config.js in the root, and multiple lingui.config.js files for each package.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/guides/monorepo.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- 1x `babel.config.js` within root\n- 1x `lingui.config.js` within root\n- And **n**-times `lingui.config.js` per package which extends/overrides from root\n```\n\n----------------------------------------\n\nTITLE: Fixing Template String IDs in Extract Function in JavaScript\nDESCRIPTION: A bug fix that enables the extract function to work properly with template string IDs. This change was part of version 3.8.3.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/packages/babel-plugin-extract-messages/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- extract works with template string id's ([#1027](https://github.com/lingui/js-lingui/issues/1027)) ([a17d629](https://github.com/lingui/js-lingui/commit/a17d629d82395cd86cc080648ef2ebe2a9653225))\n```\n\n----------------------------------------\n\nTITLE: New compiled messages format\nDESCRIPTION: Shows the new consistent structure of compiled messages where all compiled messages are arrays regardless of content complexity.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/releases/migration-5.md#2025-04-17_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"simpleMessage\": [\"Hello, world!\"],\n  \"messageWithICU\": [\"Hello\", \"name\", \"!\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Translating Rich-Text Markup with react-intl in JSX\nDESCRIPTION: Illustrates how to handle translations containing HTML elements using react-intl's FormattedMessage component with custom value rendering.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/misc/react-intl.md#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<FormattedMessage\n  id=\"msg.docs\"\n  defaultMessage=\"Read the <link>documentation</link>.\"\n  values={{\n    link: (...chunks) => <a href=\"/docs\">{chunks}</a>,\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Running Development Server Commands\nDESCRIPTION: Commands to start the development server using npm, yarn, or pnpm package managers.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/examples/vite-project-react-swc/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: New PO file format with placeholder comments\nDESCRIPTION: Shows the improved PO file format that includes comments with information about what each placeholder represents.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/releases/migration-5.md#2025-04-17_snippet_11\n\nLANGUAGE: po\nCODE:\n```\n#. placeholder {0}: user.name\nmsgid \"Hello {0} {value}\"\n```\n\n----------------------------------------\n\nTITLE: Updating Internationalization\nDESCRIPTION: Steps for extracting, translating, and compiling message catalogs for i18n.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/examples/rspack/README.md#2025-04-17_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run extract\nnpm run compile\n```\n\n----------------------------------------\n\nTITLE: Installing Lingui Vite Plugin and React Runtime\nDESCRIPTION: Commands to install @lingui/vite-plugin as a development dependency and @lingui/react as a runtime dependency using npm.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/installation.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @lingui/vite-plugin\nnpm install --save @lingui/react\n```\n\n----------------------------------------\n\nTITLE: Configuring Package.json Scripts\nDESCRIPTION: Basic script configuration in package.json for Lingui extract and compile commands.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/cli.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"extract\": \"lingui extract\",\n    \"compile\": \"lingui compile\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Tanstack Start + LinguiJS Dev Environment\nDESCRIPTION: Commands to install dependencies and start the development server with hot reload functionality\nSOURCE: https://github.com/lingui/js-lingui/blob/main/examples/tanstack-start/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn install\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Whitespace handling example in JS macros\nDESCRIPTION: Demonstrates how whitespace is handled in JavaScript template literal macros in Lingui 5.x.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/releases/migration-5.md#2025-04-17_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nt`Label: ` + value;\n```\n\n----------------------------------------\n\nTITLE: Custom IDs with JSX Macro\nDESCRIPTION: Example showing how to use custom IDs with the Trans component in React.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/guides/explicit-vs-generated-ids.md#2025-04-17_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Trans } from \"@lingui/react/macro\";\n\nfunction render() {\n  return (\n    <>\n      <h1>\n        <Trans id=\"msg.header\">LinguiJS example</Trans>\n      </h1>\n      <p>\n        <Trans id=\"msg.hello\">\n          Hello <a href=\"/profile\">{name}</a>.\n        </Trans>\n      </p>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Recommended approach with msg macro\nDESCRIPTION: Shows the recommended alternative approach using the msg macro with a custom i18n instance.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/releases/migration-5.md#2025-04-17_snippet_15\n\nLANGUAGE: js\nCODE:\n```\nimport { msg } from \"@lingui/macro\";\n\ni18n._(msg(`Hello!`));\n```\n\n----------------------------------------\n\nTITLE: Uploading Source Files to Crowdin\nDESCRIPTION: Push all source files from your LinguiJS project to Crowdin for translation using the configured sync script.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/tools/crowdin.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run sync:sources\n```\n\n----------------------------------------\n\nTITLE: Installing Lingui SWC Plugin with npm\nDESCRIPTION: Command to install the @lingui/swc-plugin package as a development dependency using npm.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/installation.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @lingui/swc-plugin\n```\n\n----------------------------------------\n\nTITLE: Separate Directory Catalog Configuration in JavaScript\nDESCRIPTION: Configuration for organizing catalogs in separate directories by locale.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/conf.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  catalogs: [\n    {\n      path: \"locales/{locale}/messages\",\n    },\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Running Individual Files with Babel Node\nDESCRIPTION: This command demonstrates how to run individual files using babel-node. It requires babel-cli to be installed globally and allows testing of specific files in isolation.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/examples/js/README.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nbabel-node src/messages.js\n```\n\n----------------------------------------\n\nTITLE: Lingui Configuration for Explicit IDs\nDESCRIPTION: Configuration example for using explicit IDs as default in PO formatter.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/releases/migration-4.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { formatter } from \"@lingui/format-po\";\nimport { LinguiConfig } from \"@lingui/config\";\n\nconst config: LinguiConfig = {\n  // ...\n  format: formatter({ explicitIdAsDefault: true }),\n};\n```\n\n----------------------------------------\n\nTITLE: Formatting Dates with i18n.date() in React\nDESCRIPTION: Shows how to use the i18n.date() function from the useLingui hook to format dates according to the active language in a React component.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/tutorials/react.md#2025-04-17_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useLingui, Trans } from \"@lingui/react/macro\";\n\nexport default function Inbox() {\n  const { i18n } = useLingui();\n\n  return (\n    <div>\n      <footer>\n        <Trans>Last login on {i18n.date(lastLogin)}.</Trans>\n      </footer>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Lingui Vite and SWC Plugins\nDESCRIPTION: Commands to install @lingui/vite-plugin and @lingui/swc-plugin as development dependencies, and @lingui/react as a runtime dependency using npm.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/installation.mdx#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @lingui/vite-plugin @lingui/swc-plugin\nnpm install --save @lingui/react\n```\n\n----------------------------------------\n\nTITLE: Configuring Lingui\nDESCRIPTION: Configuration setup for Lingui with multiple locales and catalog settings.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/misc/i18next.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from \"@lingui/cli\";\n\nexport default defineConfig({\n  sourceLocale: \"en\",\n  locales: [\"en\", \"cs\", \"fr\"],\n  catalogs: [\n    {\n      path: \"<rootDir>/src/locales/{locale}/messages\",\n      include: [\"src\"],\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Whitespace handling example in JSX\nDESCRIPTION: Shows an example of JSX code with whitespace that demonstrates the whitespace cleaning behavior in Lingui macros.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/releases/migration-5.md#2025-04-17_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// prettier-ignore\n<Trans>\n  Hello {\" \"}  world\n</Trans>\n```\n\n----------------------------------------\n\nTITLE: Setting SWC Version Overrides in package.json with npm\nDESCRIPTION: Configuration for the package.json file to ensure a compatible version of @swc/core is used with npm version 8.3 or higher.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/swc-plugin.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"overrides\": {\n  \"@swc/core\": \"1.3.56\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running codemod to update macro imports\nDESCRIPTION: Command to run the automatic codemod tool that converts old import statements to the new split imports format.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/releases/migration-5.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx @lingui/codemods split-macro-imports <path>\n```\n\n----------------------------------------\n\nTITLE: i18next Context Example\nDESCRIPTION: Demonstrating context-aware translations in i18next.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/misc/i18next.md#2025-04-17_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport i18next from \"i18next\";\n\ni18next.t(\"Right\", { context: \"direction\" });\n```\n\n----------------------------------------\n\nTITLE: Explicit ID Message Translation Example\nDESCRIPTION: Demonstrates translation using explicit message IDs with object syntax.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/releases/migration-4.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst message = t({ id: \"my.message\", message: `My Message` });\n```\n\n----------------------------------------\n\nTITLE: Translating Strings Outside of React Components\nDESCRIPTION: Example of using the msg macro to translate strings outside of React components, such as in Alert dialogs.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/tutorials/react-native.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { i18n } from \"@lingui/core\";\n\nconst deleteTitle = msg`Are you sure to delete this?`\n...\nconst showDeleteConfirmation = () => {\n  Alert.alert(i18n._(deleteTitle))\n}\n```\n\n----------------------------------------\n\nTITLE: Lingui DateTime Formatting\nDESCRIPTION: Examples of date and time formatting using Lingui with different styles.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/misc/i18next.md#2025-04-17_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { i18n } from \"@lingui/core\";\n\nconst d = new Date(\"2021-07-23T16:23:00\");\n\ni18n.activate(\"en\");\ni18n.date(d);\n// Returns \"7/23/2021\"\n\ni18n.date(d, { timeStyle: \"medium\" });\n// Returns \"4:23:00 PM\"\n\ni18n.date(d, { dateStyle: \"medium\", timeStyle: \"medium\" });\n// Returns \"Jul 23, 2021, 4:23:00 PM\"\n```\n\n----------------------------------------\n\nTITLE: Previous PO file format example\nDESCRIPTION: Shows how placeholder information was previously represented in PO files without contextual information.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/releases/migration-5.md#2025-04-17_snippet_10\n\nLANGUAGE: po\nCODE:\n```\nmsgid \"Hello {0} {value}\"\n```\n\n----------------------------------------\n\nTITLE: Installing standalone Lingui Babel plugin\nDESCRIPTION: Command to install the standalone Babel plugin for Lingui macros as an alternative to babel-plugin-macros.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/releases/migration-5.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @lingui/babel-plugin-lingui-macro\n```\n\n----------------------------------------\n\nTITLE: Deprecated custom i18n instance with t macro\nDESCRIPTION: Shows the deprecated pattern of passing a custom i18n instance to the t macro.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/releases/migration-5.md#2025-04-17_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nimport { t } from \"@lingui/macro\";\n\nt(i18n)`Hello!`;\n```\n\n----------------------------------------\n\nTITLE: Examining Extracted Messages in PO File\nDESCRIPTION: Displays the content of an extracted message catalog file (messages.po) containing a single message ready for translation.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/tutorials/react.md#2025-04-17_snippet_6\n\nLANGUAGE: gettext\nCODE:\n```\nmsgid \"\"\nmsgstr \"\"\n\"POT-Creation-Date: 2021-07-22 21:44+0900\\n\"\n\"MIME-Version: 1.0\\n\"\n\"Content-Type: text/plain; charset=utf-8\\n\"\n\"Content-Transfer-Encoding: 8bit\\n\"\n\"X-Generator: @lingui/cli\\n\"\n\"Language: cs\\n\"\n\n#: src/Inbox.js:12\nmsgid \"Message Inbox\"\nmsgstr \"\"\n```\n\n----------------------------------------\n\nTITLE: Natural Language Message Translation Example\nDESCRIPTION: Shows the basic usage of translation macro with natural language as message ID.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/releases/migration-4.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst message = t`My Message`;\n```\n\n----------------------------------------\n\nTITLE: Transforming t Macro to Message Descriptor in JavaScript\nDESCRIPTION: Example of how the t macro transforms a template literal into a message descriptor inside an i18n._ call. The macro automatically creates a short ID from the message.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/macro.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { t } from \"@lingui/core/macro\";\nt`Attachment ${name} saved`;\n\n// ↓ ↓ ↓ ↓ ↓ ↓\n\nimport { i18n } from \"@lingui/core\";\ni18n._(\n  /*i18n*/ {\n    id: \"nwR43V\",\n    message: \"Attachment {name} saved\",\n    values: { name },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Reverting ESM package size reduction in JavaScript\nDESCRIPTION: This code snippet reverts changes made to reduce the size of ESM packages. It references issue #1066.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/packages/react/CHANGELOG.md#2025-04-17_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nreverts reduce size of ESM packages (#1066)\n```\n\n----------------------------------------\n\nTITLE: Adding Crowdin Synchronization Scripts to package.json\nDESCRIPTION: Configure NPM scripts in package.json to simplify Crowdin commands for synchronizing source files and translations between your project and Crowdin.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/tools/crowdin.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"crowdin\": \"crowdin\",\n    \"sync\": \"crowdin push && crowdin pull\",\n    \"sync:sources\": \"crowdin push\",\n    \"sync:translations\": \"crowdin pull\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Babel configuration to standalone plugin\nDESCRIPTION: Demonstrates how to update the Babel configuration to use the standalone Lingui macro plugin instead of the generic macros plugin.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/releases/migration-5.md#2025-04-17_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n{\n  \"plugins\": [\n-    \"macros\"\n+    \"@lingui/babel-plugin-lingui-macro\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Lingui Core Package\nDESCRIPTION: Command to install the @lingui/core package using npm or yarn.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/core.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @lingui/core\n```\n\n----------------------------------------\n\nTITLE: PO File Format Example with Explicit ID\nDESCRIPTION: Shows the PO file format with explicit ID comment marker for Lingui v4.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/releases/migration-4.md#2025-04-17_snippet_3\n\nLANGUAGE: gettext\nCODE:\n```\n#. js-lingui-explicit-id\nmsgid \"custom.id\"\nmsgstr \"\"\n```\n\n----------------------------------------\n\nTITLE: React Macro Key Prop Fix\nDESCRIPTION: Fix for macro components to properly omit the key prop in React components.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/packages/macro/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Macro components should omit key prop\n// Issue #994\n```\n\n----------------------------------------\n\nTITLE: Converting from Declarative to Imperative I18nProvider API\nDESCRIPTION: Diff showing how to migrate from the declarative I18nProvider API to the imperative approach using the i18n manager instance.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/releases/migration-3.md#2025-04-17_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n  import { I18nProvider } from '@lingui/react'\n  import { i18n } from \"@lingui/core\"\n+ import { en } from 'make-plural/plurals'\n  import { messages } from './locale/en/messages.js'\n\n+ i18n.loadLocaleData('en', { plurals: en })\n+ i18n.load('en', messages)\n+ i18n.activate('en')\n\n  function App() {\n    return (\n-     <I18nProvider locale=\"en\" catalogs={{ en: catalogEn }}>\n+     <I18nProvider i18n={i18n}>\n         <App />\n      </I18nProvider>\n    )\n  }\n```\n\n----------------------------------------\n\nTITLE: Running Experimental Extractor via Command Line\nDESCRIPTION: Command to run the experimental dependency-based extractor after configuring it in the Lingui configuration file. This alternative extraction approach is especially useful for multi-page applications.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/guides/message-extraction.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nlingui extract-experimental\n```\n\n----------------------------------------\n\nTITLE: Testing Crowdin CLI Configuration\nDESCRIPTION: Verify the Crowdin CLI setup by checking the installed version with NPM or Yarn.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/tools/crowdin.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run crowdin --version\n```\n\n----------------------------------------\n\nTITLE: Removing extractBabelOptions Configuration\nDESCRIPTION: Demonstrates how to remove the now-obsolete extractBabelOptions from the Lingui configuration file.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/releases/migration-4.md#2025-04-17_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\nmodule.exports = {\n-  extractBabelOptions: { [...] }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing PO Format for Lingui\nDESCRIPTION: Command to install the PO format package for Lingui using npm or yarn.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/catalog-formats.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @lingui/format-po\n```\n\n----------------------------------------\n\nTITLE: Installing PO with Gettext Plurals Format for Lingui\nDESCRIPTION: Command to install the PO with Gettext plurals format package for Lingui using npm or yarn.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/catalog-formats.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @lingui/format-po-gettext\n```\n\n----------------------------------------\n\nTITLE: Commit URL in Changelog Entry\nDESCRIPTION: Git commit URL reference used within changelog entry\nSOURCE: https://github.com/lingui/js-lingui/blob/main/packages/conf/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n[263ee59](https://github.com/lingui/js-lingui/commit/263ee59163c94220f5ba3999aa60ca40dc352e0c)\n```\n\n----------------------------------------\n\nTITLE: Configuring Lingui SWC Plugin in .swcrc\nDESCRIPTION: Configuration for the .swcrc file to enable the Lingui SWC plugin in standard SWC projects.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/swc-plugin.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://json.schemastore.org/swcrc\",\n  \"jsc\": {\n    \"experimental\": {\n      \"plugins\": [\n        [\n          \"@lingui/swc-plugin\",\n          {\n            // Additional Configuration\n          }\n        ]\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic React Native Component with Text to be Translated\nDESCRIPTION: Example of a simple mailbox application with messages display, showing the initial code before internationalization is applied.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/tutorials/react-native.md#2025-04-17_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { StyleSheet, Text, View, Alert, SafeAreaView, Button } from \"react-native\";\n\nexport const AppRoot = () => {\n  const [messages, setMessages] = useState<string[]>([]);\n\n  const markAllAsRead = () => {\n    Alert.alert(\"\", \"Do you want to set all your messages as read?\", [\n      {\n        text: \"OK\",\n        onPress: () => {\n          setMessages([]);\n        },\n      },\n    ]);\n  };\n\n  return (\n    <Inbox\n      markAsRead={markAllAsRead}\n      messages={messages}\n      addMessage={() => {\n        setMessages((msgs) => msgs.concat([`message # ${msgs.length + 1}`]));\n      }}\n    />\n  );\n};\n\nconst Inbox = ({ messages, markAsRead }) => {\n  const messagesCount = messages.length;\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <View style={styles.container2}>\n        <Text style={styles.heading}>Message Inbox</Text>\n\n        <Button onPress={markAsRead} title=\"Mark all messages as read\" />\n\n        <Text>\n          {messagesCount === 1\n            ? `There's {messagesCount} message in your inbox.`\n            : `There are ${messagesCount} messages in your inbox.`}\n        </Text>\n        {/* additional code for adding messages, etc.*/}\n      </View>\n    </SafeAreaView>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Testing Lingui changes using Verdaccio\nDESCRIPTION: Instructions for testing local changes to Lingui packages using Verdaccio, a local NPM registry. Includes steps for running Verdaccio, publishing local builds, and updating packages in a project.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/CONTRIBUTING.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -d -it --rm --name verdaccio -p 4873:4873 verdaccio/verdaccio\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn verdaccio:release\n```\n\nLANGUAGE: sh\nCODE:\n```\n# Point to your local registry\nnpm config set registry http://0.0.0.0:4873/\n# Run update-by-scope will update all @lingui packages\nnpx update-by-scope @lingui\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn upgrade --scope @lingui --registry http://0.0.0.0:4873/ --latest\n```\n\nLANGUAGE: sh\nCODE:\n```\nYARN_NPM_REGISTRY_SERVER=http://0.0.0.0:4873/ yarn up \"@lingui/*\"\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpm config set registry https://registry.npmjs.org/\n```\n\n----------------------------------------\n\nTITLE: Executing Translation Sync and Purge Commands with npm/yarn\nDESCRIPTION: Command for syncing translations while removing unused strings from Translation.io. This permanently deletes strings not present in the current branch.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/tools/translation-io.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run sync_and_purge\n```\n\n----------------------------------------\n\nTITLE: Finalizing changes for Lingui contribution\nDESCRIPTION: Commands for running linters, tests, and release simulations before submitting a pull request to the Lingui project.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/CONTRIBUTING.md#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nyarn lint:all\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn test\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn release:test\n```\n\n----------------------------------------\n\nTITLE: Installing CSV Formatter\nDESCRIPTION: Command to install the CSV formatter package as a development dependency in the project.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/catalog-formats.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @lingui/format-csv\n```\n\n----------------------------------------\n\nTITLE: i18next Number Formatting\nDESCRIPTION: Examples of number formatting using i18next with various options.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/misc/i18next.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport i18next from \"i18next\";\n\ni18next.t(\"intlNumber\", { val: 1000 });\n// --> Some 1,000\n\ni18next.t(\"intlNumber\", { val: 1000.1, minimumFractionDigits: 3 });\n// --> Some 1,000.100\n\ni18next.t(\"intlNumber\", { val: 1000.1, formatParams: { val: { minimumFractionDigits: 3 } } });\n// --> Some 1,000.100\n\ni18next.t(\"intlNumberWithOptions\", { val: 2000 });\n// --> Some 2,000.00\n\ni18next.t(\"intlNumberWithOptions\", { val: 2000, minimumFractionDigits: 3 });\n// --> Some 2,000.000\n```\n\n----------------------------------------\n\nTITLE: Setting up local environment for Lingui code contribution\nDESCRIPTION: Steps to set up a local development environment for contributing code to the Lingui project. Includes cloning the repository, installing dependencies, and running tests.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/CONTRIBUTING.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/lingui/js-lingui.git\ncd js-lingui\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn\n```\n\nLANGUAGE: sh\nCODE:\n```\n# Watch mode\nyarn watch\n\n# Single run\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Installing Metro Transformer with NPM/Yarn\nDESCRIPTION: Command to install @lingui/metro-transformer as a development dependency.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/metro-transformer.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @lingui/metro-transformer\n```\n\n----------------------------------------\n\nTITLE: TypeScript Compilation Configuration\nDESCRIPTION: Package.json script configuration for TypeScript compilation in Lingui.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/cli.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"compile\": \"lingui compile --typescript\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Message Stripping in Babel for Lingui\nDESCRIPTION: This snippet demonstrates how to configure the stripMessageField option in the Babel configuration for Lingui. It allows control over whether messages and comments are stripped from production bundles.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/blog/2024-11-28-announcing-lingui-5.0/index.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    \"macros\",\n    {\n      lingui: {\n        stripMessageField: true,\n      },\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Using New useLingui Macro in React Components\nDESCRIPTION: Example of using the new useLingui macro in a React component, simplifying the code for internationalization.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/blog/2024-11-28-announcing-lingui-5.0/index.md#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useLingui } from \"@lingui/react/macro\";\n\nfunction MyComponent() {\n  const { t } = useLingui();\n\n  const a = t`Text`;\n  const b = t`Second Text`;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Translation.io Scripts to Package.json\nDESCRIPTION: Configuration for package.json that adds convenient scripts for syncing translations with Translation.io. Includes commands for standard sync and sync with purging of unused strings.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/tools/translation-io.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"scripts\": {\n    \"sync\": \"lingui extract --overwrite && lingui compile\",\n    \"sync_and_purge\": \"lingui extract --overwrite --clean && lingui compile\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: i18next DateTime Formatting\nDESCRIPTION: Examples of date and time formatting using i18next.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/misc/i18next.md#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport i18next from \"i18next\";\n\ni18next.t(\"intlDateTime\", { val: new Date(Date.UTC(2012, 11, 20, 3, 0, 0)) });\n// --> On the 12/20/2012\n\ni18next.t(\"intlDateTime\", {\n  val: new Date(Date.UTC(2012, 11, 20, 3, 0, 0)),\n  formatParams: {\n    val: { weekday: \"long\", year: \"numeric\", month: \"long\", day: \"numeric\" },\n  },\n});\n// --> On the Thursday, December 20, 2012\n```\n\n----------------------------------------\n\nTITLE: Core Macro Package Configuration\nDESCRIPTION: Example of configuring custom core macro package and its usage.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/conf.md#2025-04-17_snippet_12\n\nLANGUAGE: js\nCODE:\n```\n{\n  macro: {\n    corePackage: [\"@lingui/myMacro\"];\n  }\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { msg } from \"@lingui/myMacro\";\n\nmsg`Hello`; // <-- would be correctly picked up by macro\n```\n\n----------------------------------------\n\nTITLE: Lingui Explicit Message ID\nDESCRIPTION: Using explicit message IDs with Lingui for translations.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/misc/i18next.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { t } from \"@lingui/core/macro\";\n\ndocument.getElementById(\"output\").innerHTML = t({ id: \"msg.greeting\", message: `Hello World` });\n```\n\n----------------------------------------\n\nTITLE: Loading Remote Messages with Fallback in Lingui\nDESCRIPTION: Extends the basic remote loading pattern by adding fallback messages. If the remote messages are incomplete or unavailable, the system can fall back to local message definitions to ensure the application remains functional.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/packages/remote-loader/README.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { i18n } from \"@lingui/core\"\nimport { remoteLoader } from \"@lingui/remote-loader\"\nimport { messages: fallbackMessages } from \"./local-messages-to-fallbac/\"\n\nexport async function remoteActive(locale: string) {\n  const remoteMessages = await fetch(`https://some-api/${locale}/messages`)\n  const compiledMessages = remoteLoader({ messages: remoteMessages, fallbackMessages })\n  i18n.load(locale, compiledMessages)\n  i18n.activate(locale)\n}\n```\n\n----------------------------------------\n\nTITLE: Using i18next Translation\nDESCRIPTION: Example of applying an i18next translation to a DOM element.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/misc/i18next.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport i18next from \"i18next\";\n\ndocument.getElementById(\"output\").innerHTML = i18next.t(\"key\");\n```\n\n----------------------------------------\n\nTITLE: Executing Translation Sync Commands with npm/yarn\nDESCRIPTION: Command for initializing a project and uploading source text to Translation.io. This command extracts translatable strings and compiles catalogs.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/tools/translation-io.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run sync\n```\n\n----------------------------------------\n\nTITLE: Configuring Recommended Lingui Rules in Legacy ESLint Config\nDESCRIPTION: JSON configuration for enabling all recommended Lingui ESLint rules using the legacy .eslintrc format. This extends the plugin's recommended configuration set.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/eslint-plugin.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": [\"plugin:lingui/recommended\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Custom i18n Runtime Configuration\nDESCRIPTION: JSON configuration for specifying a custom i18n runtime module path and export name.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/conf.md#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"runtimeConfigModule\": [\"./custom-i18n-config\", \"i18n\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Component-based Catalog Configuration in JSON\nDESCRIPTION: Configuration for organizing catalogs by component with locale files inside component directories.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/conf.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"catalogs\": [\n    {\n      \"path\": \"components/{name}/locale/{locale}\",\n      \"include\": [\"components/{name}/\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: React Trans Component Comment Feature\nDESCRIPTION: A commit reference for allowing comment prop on React Trans component\nSOURCE: https://github.com/lingui/js-lingui/blob/main/packages/react/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n3477c321b05d164f86e00bbd5dfafe8cc48e0c6c\n```\n\n----------------------------------------\n\nTITLE: Installing Lingui Babel Plugin with npm\nDESCRIPTION: Command to install the @lingui/babel-plugin-lingui-macro package as a development dependency using npm.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/installation.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @lingui/babel-plugin-lingui-macro\n```\n\n----------------------------------------\n\nTITLE: Running Full Synchronization with Crowdin\nDESCRIPTION: Perform a complete synchronization by both uploading source files to Crowdin and downloading translations in a single command.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/tools/crowdin.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm run sync\n```\n\n----------------------------------------\n\nTITLE: Custom Lingui Rule Configuration in Legacy ESLint Config\nDESCRIPTION: JSON configuration for manually setting up Lingui ESLint rules in the legacy .eslintrc format. This shows how to add the plugin and configure individual rules with specific error levels.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/eslint-plugin.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"lingui\"],\n  \"rules\": {\n    \"lingui/no-unlocalized-strings\": 2,\n    \"lingui/t-call-in-function\": 2,\n    \"lingui/no-single-variables-to-translate\": 2,\n    \"lingui/no-expression-in-message\": 2,\n    \"lingui/no-single-tag-to-translate\": 2,\n    \"lingui/no-trans-inside-trans\": 2\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Supported and Unsupported Extraction Patterns in TypeScript\nDESCRIPTION: Illustrates which message patterns can be extracted by Lingui. Direct string literals in function calls are supported, while variables passed to functions cannot be extracted as the extractor operates statically.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/guides/message-extraction.md#2025-04-17_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\n// ❌ This message will not be extracted\nconst message = \"Message\";\ni18n._(message);\n\n// ✅ This message will be extracted\ni18n._(\"Message\");\n```\n\n----------------------------------------\n\nTITLE: Custom Named Export Configuration\nDESCRIPTION: Example of importing a custom named export for i18n configuration.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/conf.md#2025-04-17_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { myI18n } from \"./custom-i18n-config\";\n```\n\n----------------------------------------\n\nTITLE: Issue Reference in Changelog Entry\nDESCRIPTION: GitHub issue reference used within changelog entry\nSOURCE: https://github.com/lingui/js-lingui/blob/main/packages/conf/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n[#1065](https://github.com/lingui/js-lingui/issues/1065)\n```\n\n----------------------------------------\n\nTITLE: Using Message Extraction Plugin via Babel CLI\nDESCRIPTION: Command line usage of the message extraction plugin with the Babel CLI tool.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/packages/babel-plugin-extract-messages/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbabel --plugins @lingui/babel-plugin-extract-messages script.js\n```\n\n----------------------------------------\n\nTITLE: Downloading Translations from Crowdin\nDESCRIPTION: Pull all translated files from Crowdin to your LinguiJS project using the configured sync script.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/tools/crowdin.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run sync:translations\n```\n\n----------------------------------------\n\nTITLE: Installing Crowdin CLI via NPM/Yarn\nDESCRIPTION: Install the Crowdin CLI as a dev dependency to enable synchronization between your LinguiJS project and Crowdin platform.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/tools/crowdin.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @crowdin/cli\n```\n\n----------------------------------------\n\nTITLE: Explicitly Marking Messages for Extraction in TypeScript\nDESCRIPTION: Shows how to use the /*i18n*/ comment prefix to explicitly mark string literals and message descriptors for extraction, allowing for more control over what gets included in the message catalog.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/guides/message-extraction.md#2025-04-17_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nconst messageDescriptor: MessageDescriptor = /*i18n*/ { id: \"Description\", comment: \"description\" };\nconst stringLiteral = /*i18n*/ \"Message\";\n```\n\n----------------------------------------\n\nTITLE: Installing Lingui SWC Plugin with npm/yarn\nDESCRIPTION: Command to install the @lingui/swc-plugin as a development dependency using npm or yarn.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/swc-plugin.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @lingui/swc-plugin\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for v5.3.1\nDESCRIPTION: Version bump entry showing release 5.3.1 of @lingui/format-csv package with no functional changes.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/packages/format-csv/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [5.3.1](https://github.com/lingui/js-lingui/compare/v5.3.0...v5.3.1) (2025-04-14)\n\n**Note:** Version bump only for package @lingui/format-csv\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel with Lingui Plugin\nDESCRIPTION: Example .babelrc configuration that adds the Lingui macro Babel plugin to the project's Babel configuration.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/packages/babel-plugin-lingui-macro/README.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@lingui/babel-plugin-lingui-macro\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Feature Update - Vite 6 Support\nDESCRIPTION: Added support for Vite version 6 in the vite-plugin package\nSOURCE: https://github.com/lingui/js-lingui/blob/main/packages/vite-plugin/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- **vite-plugin:** add support for vite@6 ([#2108](https://github.com/lingui/js-lingui/issues/2108)) ([38a0c6f](https://github.com/lingui/js-lingui/commit/38a0c6f8b7f4d961f1580228310f4ebe959eb5a5))\n```\n\n----------------------------------------\n\nTITLE: Configuring LinguiJS SWC Plugin Dependency in package.json\nDESCRIPTION: Shows how to add the LinguiJS SWC plugin as a dev dependency in package.json. Note that you must use a strict version matching your Next.js version without a range specifier due to compatibility requirements.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/examples/nextjs-swc/README.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"devDependencies\": {\n    \"@lingui/swc-plugin\": \"see-below\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Missing Translation Event in Lingui\nDESCRIPTION: Demonstrates how to set up an event listener for missing translations in Lingui. This can be used for logging, debugging, or providing custom fallback behavior.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/core.md#2025-04-17_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\ni18n.on(\"missing\", (event) => {\n  alert(`Translation in ${event.locale} for ${event.id} is missing!`);\n});\n```\n\n----------------------------------------\n\nTITLE: Extracting Messages for Multiple Locales in Lingui CLI\nDESCRIPTION: This command demonstrates how to extract messages for multiple locales using the Lingui CLI. It allows for simultaneous extraction of messages for German and French locales.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/blog/2024-11-28-announcing-lingui-5.0/index.md#2025-04-17_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nlingui extract --locale de --locale fr\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for v5.3.0\nDESCRIPTION: Version bump entry showing release 5.3.0 of @lingui/format-csv package with no functional changes.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/packages/format-csv/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# [5.3.0](https://github.com/lingui/js-lingui/compare/v5.2.0...v5.3.0) (2025-03-21)\n\n**Note:** Version bump only for package @lingui/format-csv\n```\n\n----------------------------------------\n\nTITLE: Installing Lingui Vite Plugin\nDESCRIPTION: Command to install @lingui/vite-plugin as a development dependency using npm\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/vite-plugin.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @lingui/vite-plugin\n```\n\n----------------------------------------\n\nTITLE: Fixing side effects for bundle size reduction in JavaScript\nDESCRIPTION: This code snippet sets sideEffects to false in the package configuration to reduce bundle size. It addresses issue #1129.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/packages/react/CHANGELOG.md#2025-04-17_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nsideEffects: false\n```\n\n----------------------------------------\n\nTITLE: Extracting Messages with LinguiJS\nDESCRIPTION: Commands to extract translatable messages from source code using LinguiJS with different package managers.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/examples/vite-project-react-swc/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run lingui:extract\n# or\nyarn lingui:extract\n# or\npnpm lingui:extract\n```\n\n----------------------------------------\n\nTITLE: Minimal Style JSON Format Example\nDESCRIPTION: Demonstrates the minimal JSON format style where each key is a message ID mapped directly to its translation. This format is simpler but loses metadata information.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/catalog-formats.md#2025-04-17_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"messageId\": \"translation\"\n}\n```\n\n----------------------------------------\n\nTITLE: Non-Tree-Shakeable Message Definition Example in TypeScript\nDESCRIPTION: Demonstrates a case where messages might be included in more catalogs than expected due to tree-shaking limitations. The msg macro calls within the object may have side effects preventing the bundler from removing unused code.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/guides/message-extraction.md#2025-04-17_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport { msg } from \"@lingui/core/macro\";\n\nexport const species = {\n  Cardano: [\n    {\n      startsAt: 0,\n      name: msg`Ghost`,\n      icon: \"Ghost\",\n    },\n    {\n      startsAt: 0.000001,\n      name: msg`Plankton`,\n      icon: \"Plankton\",\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Template String ID Extraction Fix\nDESCRIPTION: Fix to ensure proper extraction works with template string IDs in translation functions.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/packages/macro/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Fix for extract functionality with template strings\n// Issue #1027\n```\n\n----------------------------------------\n\nTITLE: Configuring Metro Bundler for Local Lingui Package Development in React Native\nDESCRIPTION: This snippet configures Metro bundler to use local Lingui packages from the workspace rather than the demo app's node_modules. It sets up proper resolution paths, creates a blocklist for packages that should be resolved from the workspace, and defines watch folders for live reloading when package source files change.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/examples/react-native/README.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Learn more https://docs.expo.io/guides/customizing-metro\nconst { getDefaultConfig } = require(\"expo/metro-config\");\nconst exclusionList = require(\"metro-config/src/defaults/exclusionList\");\nconst escape = require(\"escape-string-regexp\");\n\nconst path = require(\"path\");\n\nconst projectRoot = __dirname;\nconst workspaceNodeModules = path.resolve(projectRoot, \"../../node_modules\");\n\nconst blockList = exclusionList([\n  // use these dependencies from workspaceNodeModules, not from the example's node_modules\n  new RegExp(`^${escape(path.join(projectRoot, \"node_modules\", \"react\"))}\\/.*$`),\n  new RegExp(`^${escape(path.join(projectRoot, \"node_modules\", \"@lingui/core\"))}\\/.*$`),\n]);\nconst linguiReactPackage = path.resolve(projectRoot, \"../../packages/react\");\nconst linguiCorePackage = path.resolve(projectRoot, \"../../packages/core\");\n\nmodule.exports = (() => {\n  const defaultConfig = getDefaultConfig(projectRoot);\n\n  const config = {\n    ...defaultConfig,\n    projectRoot,\n    watchFolders: [linguiReactPackage, linguiCorePackage, workspaceNodeModules],\n  };\n  config.resolver.nodeModulesPaths = [\n    path.resolve(projectRoot, \"node_modules\"),\n    workspaceNodeModules,\n  ];\n  config.resolver.blockList = blockList;\n  return config;\n})();\n\n```\n\n----------------------------------------\n\nTITLE: Installing Lingui Webpack Loader with NPM/Yarn\nDESCRIPTION: Command to install @lingui/loader as a development dependency using npm or yarn package managers.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/loader.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @lingui/loader\n```\n\n----------------------------------------\n\nTITLE: Formatting Messages with react-intl in JSX\nDESCRIPTION: Demonstrates how to use the FormattedMessage component from react-intl to handle internationalization with pluralization and variable interpolation.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/misc/react-intl.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<FormattedMessage\n  id=\"welcome\"\n  defaultMessage={`Hello {name}, you have {unreadCount, number} {unreadCount, plural,\n     one {message}\n     other {messages}\n   }`}\n  values={{ name: <b>{name}</b>, unreadCount }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing @lingui/extractor-vue Package\nDESCRIPTION: Command to install the @lingui/extractor-vue package as a development dependency. The npm2yarn comment allows automatic conversion to yarn syntax where needed.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/extractor-vue.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @lingui/extractor-vue\n```\n\n----------------------------------------\n\nTITLE: Feature Implementation - Configuring MacroPackages\nDESCRIPTION: Implementation allowing macro package configuration in babel-plugin-lingui-macro\nSOURCE: https://github.com/lingui/js-lingui/blob/main/packages/vite-plugin/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n* **babel-plugin-lingui-macro:** allow to configure macro packages ([#2196](https://github.com/lingui/js-lingui/issues/2196)) ([583dd05](https://github.com/lingui/js-lingui/commit/583dd05578b63f26576cf8ebdead83639afdb4b9))\n```\n\n----------------------------------------\n\nTITLE: Initializing React App with Root Component\nDESCRIPTION: Sets up the basic structure of a React application with a root App component rendering an Inbox component.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/tutorials/react.md#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport Inbox from \"./Inbox\";\n\nconst App = () => <Inbox />;\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Message Extraction Plugin via npm/yarn\nDESCRIPTION: Commands to install the @lingui/babel-plugin-extract-messages package as a development dependency using either npm or yarn package managers.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/packages/babel-plugin-extract-messages/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @lingui/babel-plugin-extract-messages\n# yarn add --dev @lingui/babel-plugin-extract-messages\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Placeholder Value Printing in PO Files\nDESCRIPTION: Example showing how placeholder values are now printed in PO file comments for better translation context.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/blog/2024-11-28-announcing-lingui-5.0/index.md#2025-04-17_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n+ #. placeholder {0}: user.name\nmsgid \"Hello {0} {value}\"\n```\n\n----------------------------------------\n\nTITLE: Previous compiled messages format\nDESCRIPTION: Shows the inconsistent structure of compiled messages in previous versions where simple messages were strings and ICU messages were arrays.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/releases/migration-5.md#2025-04-17_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"simpleMessage\": \"Hello, world!\",\n  \"messageWithICU\": [\"Hello \", \"name\", \"!\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Feature Addition - Error Handling for Missing Locale\nDESCRIPTION: Added functionality to provide meaningful error messages when locale is not set\nSOURCE: https://github.com/lingui/js-lingui/blob/main/packages/vite-plugin/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n* add meaningful error when locale is not set ([#2131](https://github.com/lingui/js-lingui/issues/2131)) ([5ae8363](https://github.com/lingui/js-lingui/commit/5ae83630c5afe866b23c5739286eb09fdfe39b95))\n```\n\n----------------------------------------\n\nTITLE: React Context Updates Revert Commit\nDESCRIPTION: A commit reference showing reversion of useSyncExternalStore implementation\nSOURCE: https://github.com/lingui/js-lingui/blob/main/packages/react/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n416489351bc7e9ce6d0712064528e44dbd512d06\n```\n\n----------------------------------------\n\nTITLE: Running Vite Dev Server for Remix.run Project\nDESCRIPTION: This command starts the Vite development server for the Remix.run project with LinguiJS integration.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/examples/remix-vite-babel/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shellscript\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: React 19 Support Commit\nDESCRIPTION: A commit reference showing addition of React 19 support\nSOURCE: https://github.com/lingui/js-lingui/blob/main/packages/react/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\ne93b73d075165d91fa598fa0c579a8ceb5c86845\n```\n\n----------------------------------------\n\nTITLE: Building Remix.run Project for Production\nDESCRIPTION: This command builds the Remix.run application for production deployment, including LinguiJS translations.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/examples/remix-vite-babel/README.md#2025-04-17_snippet_1\n\nLANGUAGE: shellscript\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Feature Addition - Explicit ID Handling for PO Format\nDESCRIPTION: Addition of explicitIdAsDefault option for po-format to facilitate easier migration in version 4.2.0\nSOURCE: https://github.com/lingui/js-lingui/blob/main/packages/format-po/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- **po-format:** add `explicitIdAsDefault` for po-format for easier migration ([#1672](https://github.com/lingui/js-lingui/issues/1672)) ([3303228](https://github.com/lingui/js-lingui/commit/3303228c16b490e55801bf182ca5898b84f651fd))\n```\n\n----------------------------------------\n\nTITLE: Running Remix.run Project in Production Mode\nDESCRIPTION: This command starts the Remix.run application in production mode after it has been built.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/examples/remix-vite-babel/README.md#2025-04-17_snippet_2\n\nLANGUAGE: shellscript\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: GitHub Commit Reference\nDESCRIPTION: A commit reference showing fixes for removing children property from runtime Trans\nSOURCE: https://github.com/lingui/js-lingui/blob/main/packages/react/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n7540adb0128f9acbff745251540e2d91f3cd683c\n```\n\n----------------------------------------\n\nTITLE: Configuring SWC Core Version in package.json\nDESCRIPTION: Specifies a specific version of @swc/core using the resolutions field in package.json, which is needed for Lingui SWC plugin compatibility and is supported by Yarn.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/examples/vite-project-react-swc/README.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"resolutions\": {\n  \"@swc/core\": \"1.3.56\"\n},\n```\n\n----------------------------------------\n\nTITLE: Running Full Test Suite with Yarn\nDESCRIPTION: This command executes the full test suite for the LinguiJS example using Yarn. It runs all tests in the project to ensure everything is working correctly.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/examples/js/README.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Bug Fix - ESM Import Issue\nDESCRIPTION: Fix for ESM import not being published correctly in the detect-locale package.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/packages/detect-locale/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\\n\\n- **detect-locale:** ESM import not published ([#926](https://github.com/lingui/js-lingui/issues/926)) ([4ad90d4](https://github.com/lingui/js-lingui/commit/4ad90d4c60b752e9f0d82f3dd71936711c51573d))\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running Scripts\nDESCRIPTION: Commands for setting up the project, running the development server, and building the application.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/examples/rspack/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install\nnpm run dev\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Unicode Character Extraction Fix\nDESCRIPTION: Fix for incorrect extraction of unicode characters from .po files that were being removed during extraction process.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/packages/macro/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Before fix: Unicode chars were removed during extraction\n// After fix: Unicode chars are preserved properly in .po files\n// Issue #1125\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Compiling Message Catalogs with Yarn\nDESCRIPTION: This snippet shows the commands to install project dependencies and compile message catalogs using Yarn. These steps are necessary to prepare the LinguiJS example for testing.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/examples/js/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn install\nyarn lingui compile\n```\n\n----------------------------------------\n\nTITLE: Extracting Translation Messages with LinguiJS\nDESCRIPTION: Commands for extracting internationalization messages from the source code using LinguiJS CLI. This process identifies all translatable content marked with LinguiJS macros in the application.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/examples/nextjs-swc/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run lingui:extract\n# or\nyarn lingui:extract\n# or\npnpm lingui:extract\n```\n\n----------------------------------------\n\nTITLE: Fixing t Macro Extraction in JavaScript\nDESCRIPTION: A bug fix addressing an issue where the t macro used as a function was not being properly extracted. Part of version 3.2.0.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/packages/babel-plugin-extract-messages/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- t macro as function not extracting ([#846](https://github.com/lingui/js-lingui/issues/846)) ([d819bfc](https://github.com/lingui/js-lingui/commit/d819bfc74707a8766bfe1b1a3d43edce97f8f265))\n```\n\n----------------------------------------\n\nTITLE: Setting up and running Lingui documentation locally\nDESCRIPTION: Instructions for setting up and running the Lingui documentation locally using Docusaurus. Includes steps for installation, building, and previewing the docs.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd website\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn install\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn start\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn build\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn lint\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn checkFormat\n```\n\n----------------------------------------\n\nTITLE: Package.json Exports Fix\nDESCRIPTION: Fix for exports attribute in package.json to improve Expo compatibility.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/packages/detect-locale/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\\n\\n- exports attribute on package.json, expo compat ([#997](https://github.com/lingui/js-lingui/issues/997)) ([79aa509](https://github.com/lingui/js-lingui/commit/79aa50998185847064d80f2a38be0ebcb64424f9))\n```\n\n----------------------------------------\n\nTITLE: Setting SWC Version Resolution in package.json with Yarn\nDESCRIPTION: Configuration for the package.json file to ensure a compatible version of @swc/core is used with Yarn package manager.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/swc-plugin.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"resolutions\": {\n  \"@swc/core\": \"1.3.56\"\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using either npm or yarn package managers. The server will run on localhost:3000 by default.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/examples/nextjs-babel/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: RegEx Pattern for Algolia Domain Matching\nDESCRIPTION: Regular expression pattern that matches any Algolia service domain using wildcard matching. Used for identifying Algolia API endpoints.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/linkcheck-ignore.txt#2025-04-17_snippet_1\n\nLANGUAGE: regex\nCODE:\n```\nhttps://.*.algolia.net\n```\n\n----------------------------------------\n\nTITLE: Reducing size of ESM packages in JavaScript\nDESCRIPTION: This code snippet implements changes to reduce the size of ESM packages. It addresses issue #1066.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/packages/react/CHANGELOG.md#2025-04-17_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nreduce size of ESM packages (#1066)\n```\n\n----------------------------------------\n\nTITLE: Version Comparison Link\nDESCRIPTION: GitHub comparison link between version tags\nSOURCE: https://github.com/lingui/js-lingui/blob/main/packages/conf/CHANGELOG.md#2025-04-17_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n[3.10.1](https://github.com/lingui/js-lingui/compare/v3.10.0...v3.10.1)\n```\n\n----------------------------------------\n\nTITLE: Running Custom Crowdin CLI Commands\nDESCRIPTION: Execute specific Crowdin CLI commands with custom options using the NPM script wrapper.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/tools/crowdin.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm run crowdin <command> <options>\n```\n\n----------------------------------------\n\nTITLE: Installing JSON Format for Lingui\nDESCRIPTION: Command to install the JSON format package for Lingui using npm or yarn.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/catalog-formats.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @lingui/format-json\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Example in Markdown\nDESCRIPTION: Example of how version changes are documented using markdown headers and conventional commit format\nSOURCE: https://github.com/lingui/js-lingui/blob/main/packages/conf/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [5.3.1](https://github.com/lingui/js-lingui/compare/v5.3.0...v5.3.1) (2025-04-14)\n\n**Note:** Version bump only for package @lingui/conf\n```\n\n----------------------------------------\n\nTITLE: Installing Lingui Babel Plugin\nDESCRIPTION: Commands to install the @lingui/babel-plugin-lingui-macro package using npm or yarn as a development dependency for a project.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/packages/babel-plugin-lingui-macro/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-dev @lingui/babel-plugin-lingui-macro\n# yarn add --dev @lingui/babel-plugin-lingui-macro\n```\n\n----------------------------------------\n\nTITLE: Viewing Crowdin CLI Help Documentation\nDESCRIPTION: Display the full list of available Crowdin CLI commands and options for reference.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/tools/crowdin.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm run crowdin -h\n```\n\n----------------------------------------\n\nTITLE: TypeScript Declaration for PO Files\nDESCRIPTION: Type declaration file to enable TypeScript support for .po file imports.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/ref/metro-transformer.mdx#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module \"*.po\" {\n  import type { Messages } from \"@lingui/core\";\n  export const messages: Messages;\n}\n```\n\n----------------------------------------\n\nTITLE: Feature Documentation in Markdown\nDESCRIPTION: Example of how new features are documented with issue references and commit hashes\nSOURCE: https://github.com/lingui/js-lingui/blob/main/packages/conf/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n* **babel-plugin-lingui-macro:** allow to configure macro packages ([#2196](https://github.com/lingui/js-lingui/issues/2196)) ([583dd05](https://github.com/lingui/js-lingui/commit/583dd05578b63f26576cf8ebdead83639afdb4b9))\n```\n\n----------------------------------------\n\nTITLE: Preventing Undefined Message IDs in JavaScript\nDESCRIPTION: A bug fix that prevents adding undefined message IDs to the messages collection. Part of version 3.4.0 release.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/packages/babel-plugin-extract-messages/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- prevent adding undefined msgid to messages ([#915](https://github.com/lingui/js-lingui/issues/915)) ([3afacec](https://github.com/lingui/js-lingui/commit/3afaceccb669b59ee2f5b42ee2e138646ccdb79d))\n```\n\n----------------------------------------\n\nTITLE: Adding Metro Transformer Feature\nDESCRIPTION: Implementation of metro transformer feature, referenced in pull request #1999.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/packages/metro-transformer/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- initial implementation of metro transformer [#1999](https://github.com/lingui/js-lingui/pull/1999)\n```\n\n----------------------------------------\n\nTITLE: Outdated Translation Pattern\nDESCRIPTION: Shows the deprecated way of handling translations outside React components in v3.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/releases/migration-4.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { t } from \"@lingui/macro\";\n\nconst myMsg = t`Hello world!`;\n\nexport function Greeting(props: {}) {\n  return <h1>{t(myMsg)}</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Configuration Features\nDESCRIPTION: Addition of failOnMissing and failOnCompileError features for loaders and compiler functionality.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/packages/metro-transformer/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n* `failOnMissing` & `failOnCompileError` for loaders + compiler ([#2198](https://github.com/lingui/js-lingui/issues/2198)) ([68c29ab](https://github.com/lingui/js-lingui/commit/68c29abf23974d8bffb6cadaacafc88e4760d3cb))\n```\n\n----------------------------------------\n\nTITLE: Low-level i18n._ Implementation in Production\nDESCRIPTION: This snippet shows how the plural macro is transformed into a low-level i18n._ call in a production environment. It includes the message ID and values while stripping the original message format in production builds.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/docs/guides/plurals.md#2025-04-17_snippet_1\n\nLANGUAGE: js\nCODE:\n```\ni18n._({ \n  id: \"d1wX4r\",\n  // stripped on production\n  // message: '{numBooks, plural, one {# book} other {# books}}',\n  values: { numBooks },\n});\n```\n\n----------------------------------------\n\nTITLE: Feature Addition - PO File Header Configuration\nDESCRIPTION: Addition of configurable header attributes feature in PO file formatter in version 4.11.0\nSOURCE: https://github.com/lingui/js-lingui/blob/main/packages/format-po/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- **format-po:** configure header attributes in PO file formatter ([#1934](https://github.com/lingui/js-lingui/issues/1934)) ([d90f778](https://github.com/lingui/js-lingui/commit/d90f77813381e8a74dc9e16662a3ce384c683493))\n```\n\n----------------------------------------\n\nTITLE: Visualizing Lingui Growth with Mermaid Chart\nDESCRIPTION: A Mermaid chart showing the growth of Lingui between April 2023 and October 2024, including GitHub stars and package download statistics.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/blog/2024-11-28-announcing-lingui-5.0/index.md#2025-04-17_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\n%%{init: {\"themeCSS\": \".node rect { rx: 5; ry: 5; }\"} }%%\n\ngraph LR\n    subgraph APR2023[\"<b>April 2023</b>\"]\n        stars1[\"GitHub Stars ⭐<br/>3.6K\"]\n\n        subgraph downloads1[\"Downloads 📥 / month\"]\n            A1[\"@lingui/core<br/>580k\"]\n            A2[\"@lingui/react<br/>385k\"]\n            A3[\"@lingui/swc-plugin<br/>37k\"]\n            A4[\"@lingui/vite-plugin<br/>6k\"]\n        end\n    end\n\n    subgraph OCT2024[\"<b>October 2024</b>\"]\n        stars2[\"GitHub Stars ⭐<br/>4.6K\"]\n\n        subgraph downloads2[\"Downloads 📥 / month\"]\n            B1[\"@lingui/core<br/>1.3M\"]\n            B2[\"@lingui/react<br/>770k\"]\n            B3[\"@lingui/swc-plugin<br/>186k\"]\n            B4[\"@lingui/vite-plugin<br/>147k\"]\n        end\n    end\n\n    stars1 -->|\"<b>ㅤ+28%ㅤ</b>\"| stars2\n    A1 -->|\"<b>ㅤ+124%ㅤ</b>\"| B1\n    A2 -->|\"<b>ㅤ+100%ㅤ</b>\"| B2\n    A3 -->|\"<b>ㅤ+402%ㅤ</b>\"| B3\n    A4 -->|\"<b>ㅤ+2350%ㅤ</b>\"| B4\n\nstyle stars1 stroke-width:2px,rx:20,ry:20\nstyle stars2 stroke-width:2px,rx:20,ry:20\n```\n\n----------------------------------------\n\nTITLE: RegEx Pattern for Localhost Port Matching\nDESCRIPTION: Regular expression pattern that matches localhost URLs followed by any 4-digit port number. Useful for development environment URL matching.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/website/linkcheck-ignore.txt#2025-04-17_snippet_0\n\nLANGUAGE: regex\nCODE:\n```\nhttp://localhost:\\d{4}\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel Plugin in .babelrc\nDESCRIPTION: JSON configuration for adding the message extraction plugin to Babel via .babelrc configuration file.\nSOURCE: https://github.com/lingui/js-lingui/blob/main/packages/babel-plugin-extract-messages/README.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@lingui/babel-plugin-extract-messages\"]\n}\n```"
  }
]