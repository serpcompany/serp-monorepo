[
  {
    "owner": "symfony",
    "repo": "symfony-docs",
    "content": "TITLE: Creating a Minimal Symfony Project with Composer (Terminal)\nDESCRIPTION: Uses Composer to create a new Symfony project based on the `symfony/skeleton` package for a specific version (`7.3.x-dev`). This sets up a minimal application suitable for microservices, console applications, or APIs. Requires Composer.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup.rst#2025-04-22_snippet_4\n\nLANGUAGE: terminal\nCODE:\n```\n# run this if you are building a microservice, console application or API\n$ composer create-project symfony/skeleton:\"7.3.x-dev\" my_project_directory\n```\n\n----------------------------------------\n\nTITLE: Checking Project Dependencies for Security Vulnerabilities (Terminal)\nDESCRIPTION: Executes the Symfony CLI command `check:security` to scan the project's dependencies (listed in `composer.lock`) against a database of known security vulnerabilities. It reports any found issues. Requires the Symfony CLI.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup.rst#2025-04-22_snippet_9\n\nLANGUAGE: terminal\nCODE:\n```\n$ symfony check:security\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom API Key Authenticator in PHP\nDESCRIPTION: Defines a custom authenticator class `ApiKeyAuthenticator` that extends `AbstractAuthenticator`. It checks for an 'auth-token' header in the `supports` method, extracts the token and creates a `SelfValidatingPassport` in the `authenticate` method, handles successful authentication by allowing the request to continue in `onAuthenticationSuccess`, and returns a JSON error response on failure in `onAuthenticationFailure`. This authenticator is designed for API key-based authentication.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/custom_authenticator.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Security/ApiKeyAuthenticator.php\nnamespace App\\Security;\n\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Security\\Core\\Authentication\\Token\\TokenInterface;\nuse Symfony\\Component\\Security\\Core\\Exception\\AuthenticationException;\nuse Symfony\\Component\\Security\\Core\\Exception\\CustomUserMessageAuthenticationException;\nuse Symfony\\Component\\Security\\Http\\Authenticator\\AbstractAuthenticator;\nuse Symfony\\Component\\Security\\Http\\Authenticator\\Passport\\Badge\\UserBadge;\nuse Symfony\\Component\\Security\\Http\\Authenticator\\Passport\\Passport;\nuse Symfony\\Component\\Security\\Http\\Authenticator\\Passport\\SelfValidatingPassport;\n\nclass ApiKeyAuthenticator extends AbstractAuthenticator\n{\n    /**\n     * Called on every request to decide if this authenticator should be\n     * used for the request. Returning `false` will cause this authenticator\n     * to be skipped.\n     */\n    public function supports(Request $request): ?bool\n    {\n        // \"auth-token\" is an example of a custom, non-standard HTTP header used in this application\n        return $request->headers->has('auth-token');\n    }\n\n    public function authenticate(Request $request): Passport\n    {\n        $apiToken = $request->headers->get('auth-token');\n        if (null === $apiToken) {\n            // The token header was empty, authentication fails with HTTP Status\n            // Code 401 \"Unauthorized\"\n            throw new CustomUserMessageAuthenticationException('No API token provided');\n        }\n\n        // implement your own logic to get the user identifier from `$apiToken`\n        // e.g. by looking up a user in the database using its API key\n        $userIdentifier = /** ... */;\n\n        return new SelfValidatingPassport(new UserBadge($userIdentifier));\n    }\n\n    public function onAuthenticationSuccess(Request $request, TokenInterface $token, string $firewallName): ?Response\n    {\n        // on success, let the request continue\n        return null;\n    }\n\n    public function onAuthenticationFailure(Request $request, AuthenticationException $exception): ?Response\n    {\n        $data = [\n            // you may want to customize or obfuscate the message first\n            'message' => strtr($exception->getMessageKey(), $exception->getMessageData())\n\n            // or to translate this message\n            // $this->translator->trans($exception->getMessageKey(), $exception->getMessageData())\n        ];\n\n        return new JsonResponse($data, Response::HTTP_UNAUTHORIZED);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring access_control Matching Rules in YAML\nDESCRIPTION: Defines security access control rules in `config/packages/security.yaml`. It demonstrates using various matching criteria like path regex, roles, specific IPs/ports/hosts/methods, environment variables for IPs (`%env(TRUSTED_IPS)%`), custom request matchers, and route attributes/names to restrict access to different parts of the application. The first rule that matches an incoming request is applied.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/access_control.rst#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\nparameters:\n    env(TRUSTED_IPS): '10.0.0.1, 10.0.0.2'\n\nsecurity:\n    # ...\n    access_control:\n        - { path: '^/admin', roles: ROLE_USER_PORT, ip: 127.0.0.1, port: 8080 }\n        - { path: '^/admin', roles: ROLE_USER_IP, ip: 127.0.0.1 }\n        - { path: '^/admin', roles: ROLE_USER_HOST, host: symfony\\.com$ }\n        - { path: '^/admin', roles: ROLE_USER_METHOD, methods: [POST, PUT] }\n\n        # ips can be comma-separated, which is especially useful when using env variables\n        - { path: '^/admin', roles: ROLE_USER_IP, ips: '%env(TRUSTED_IPS)%' }\n        - { path: '^/admin', roles: ROLE_USER_IP, ips: [127.0.0.1, ::1, '%env(TRUSTED_IPS)%'] }\n\n        # for custom matching needs, use a request matcher service\n        - { roles: ROLE_USER, request_matcher: App\\Security\\RequestMatcher\\MyRequestMatcher }\n\n        # require ROLE_ADMIN for 'admin' route. You can use the shortcut \"route: \"xxx\", instead of \"attributes\": [\"_route\": \"xxx\"]\n        - { attributes: {'_route': 'admin'}, roles: ROLE_ADMIN }\n        - { route: 'admin', roles: ROLE_ADMIN }\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony HttpKernel via Composer - Terminal\nDESCRIPTION: Installs the symfony/http-kernel package using Composer, which is the recommended PHP dependency manager for Symfony. This is the prerequisite for working with HttpKernel, ensuring all required PHP dependencies are fetched automatically. The command should be executed in the root directory of your PHP project and requires Composer to be installed globally.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/http_kernel.rst#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require symfony/http-kernel\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Symfony Controller\nDESCRIPTION: Demonstrates how to create a basic controller with a route that returns a simple response.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/quick_tour/the_big_picture.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/DefaultController.php\nnamespace App\\Controller;\n\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Attribute\\Route;\n\nclass DefaultController\n{\n    #[Route('/', name: 'index')]\n    public function index(): Response\n    {\n        return new Response('Hello!');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Doctrine ORM and MakerBundle in Symfony\nDESCRIPTION: Commands to install Doctrine ORM support and the MakerBundle for code generation in a Symfony project.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require symfony/orm-pack\n$ composer require --dev symfony/maker-bundle\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony Console Component via Composer\nDESCRIPTION: Command to install the Symfony Console component using Composer package manager.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require symfony/console\n```\n\n----------------------------------------\n\nTITLE: Creating a Symfony Web Application Project with Composer (Terminal)\nDESCRIPTION: Uses Composer to create a new Symfony project based on the `symfony/skeleton` package for a specific version (`7.3.x-dev`), changes into the new directory, and then requires the `webapp` pack to install dependencies for a traditional web application. Requires Composer.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup.rst#2025-04-22_snippet_3\n\nLANGUAGE: terminal\nCODE:\n```\n# run this if you are building a traditional web application\n$ composer create-project symfony/skeleton:\"7.3.x-dev\" my_project_directory\n$ cd my_project_directory\n$ composer require webapp\n```\n\n----------------------------------------\n\nTITLE: Performing Complex Type Checks with isSatisfiedBy()\nDESCRIPTION: Shows how to use the `isSatisfiedBy()` method with a custom callable function for complex type validation logic beyond simple type identification or value acceptance. The example resolves types for properties of a `Foo` class using `TypeResolver`. It then defines a callable (`$isNonNullableNumber`) that checks if a `Type` is not nullable and represents an `int` or `float`. Finally, it applies this callable to the resolved types using `isSatisfiedBy()`.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/type_info.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nclass Foo\n{\n    private int $integer;\n    private string $string;\n    private ?float $float;\n}\n\n$reflClass = new \\ReflectionClass(Foo::class);\n\n$resolver = TypeResolver::create();\n$integerType = $resolver->resolve($reflClass->getProperty('integer'));\n$stringType = $resolver->resolve($reflClass->getProperty('string'));\n$floatType = $resolver->resolve($reflClass->getProperty('float'));\n\n// define a callable to validate non-nullable number types\n$isNonNullableNumber = function (Type $type): bool {\n    if ($type->isNullable()) {\n        return false;\n    }\n\n    if ($type->isIdentifiedBy(TypeIdentifier::INT) || $type->isIdentifiedBy(TypeIdentifier::FLOAT)) {\n        return true;\n    }\n\n    return false;\n};\n\n$integerType->isSatisfiedBy($isNonNullableNumber); // true\n$stringType->isSatisfiedBy($isNonNullableNumber);  // false\n$floatType->isSatisfiedBy($isNonNullableNumber);   // false\n```\n\n----------------------------------------\n\nTITLE: Matching URLs with Symfony UrlMatcher in PHP\nDESCRIPTION: Sets up a UrlMatcher to match request paths against defined routes and return route attributes.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/create_framework/routing.rst#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Routing\\Matcher\\UrlMatcher;\nuse Symfony\\Component\\Routing\\RequestContext;\n\n$context = new RequestContext();\n$context->fromRequest($request);\n$matcher = new UrlMatcher($routes, $context);\n\n$attributes = $matcher->match($request->getPathInfo());\n```\n\n----------------------------------------\n\nTITLE: File Upload Validation with MapUploadedFile Attribute in Symfony Controller\nDESCRIPTION: Demonstrates using the MapUploadedFile attribute to handle and validate file uploads in a Symfony controller with constraints for file type and image dimensions.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/controller.rst#2025-04-22_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Controller;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\File\\UploadedFile;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Attribute\\MapUploadedFile;\nuse Symfony\\Component\\Routing\\Attribute\\Route;\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass UserController extends AbstractController\n{\n    #[Route('/user/picture', methods: ['PUT'])]\n    public function changePicture(\n        #[MapUploadedFile([\n            new Assert\\File(mimeTypes: ['image/png', 'image/jpeg']),\n            new Assert\\Image(maxWidth: 3840, maxHeight: 2160),\n        ])]\n        UploadedFile $picture,\n    ): Response {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Inline Form Event Listener in Symfony\nDESCRIPTION: Example of creating an inline form event listener that dynamically adds/removes an email field based on checkbox selection. Uses PRE_SUBMIT event to modify form structure.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/events.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Form\\Event\\PreSubmitEvent;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\CheckboxType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\EmailType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\TextType;\nuse Symfony\\Component\\Form\\FormEvents;\n\n$form = $formFactory->createBuilder()\n    ->add('username', TextType::class)\n    ->add('showEmail', CheckboxType::class)\n    ->addEventListener(FormEvents::PRE_SUBMIT, function (PreSubmitEvent $event): void {\n        $user = $event->getData();\n        $form = $event->getForm();\n\n        if (!$user) {\n            return;\n        }\n\n        if (isset($user['showEmail']) && $user['showEmail']) {\n            $form->add('email', EmailType::class);\n        } else {\n            unset($user['email']);\n            $event->setData($user);\n        }\n    })\n    ->getForm();\n```\n\n----------------------------------------\n\nTITLE: Configuring access_control Matching Rules in XML\nDESCRIPTION: Defines security access control rules in `config/packages/security.xml` using XML syntax. It showcases equivalent configurations to the YAML example, employing `<rule>` elements with attributes like `path`, `role`, `ip`, `port`, `host`, `methods`, environment variables (`%env(TRUSTED_IPS)%`), `<ip>` sub-elements for multiple IPs, `request-matcher` attribute for custom services, and `<attribute>` or `route` for route-based matching. Symfony applies the first rule that matches.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/access_control.rst#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/security.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<srv:container xmlns=\"http://symfony.com/schema/dic/security\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:srv=\"http://symfony.com/schema/dic/services\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/security\n        https://symfony.com/schema/dic/security/security-1.0.xsd\">\n\n    <srv:parameters>\n        <srv:parameter key=\"env(TRUSTED_IPS)\">10.0.0.1, 10.0.0.2</srv:parameter>\n    </srv:parameters>\n\n    <config>\n        <!-- ... -->\n        <rule path=\"^/admin\" role=\"ROLE_USER_PORT\" ip=\"127.0.0.1\" port=\"8080\"/>\n        <rule path=\"^/admin\" role=\"ROLE_USER_IP\" ip=\"127.0.0.1\"/>\n        <rule path=\"^/admin\" role=\"ROLE_USER_HOST\" host=\"symfony\\.com$\"/>\n        <rule path=\"^/admin\" role=\"ROLE_USER_METHOD\" methods=\"POST, PUT\"/>\n\n        <!-- ips can be comma-separated, which is especially useful when using env variables -->\n        <rule path=\"^/admin\" role=\"ROLE_USER_IP\" ip=\"%env(TRUSTED_IPS)%\"/>\n        <rule path=\"^/admin\" role=\"ROLE_USER_IP\">\n            <ip>127.0.0.1</ip>\n            <ip>::1</ip>\n            <ip>%env(TRUSTED_IPS)%</ip>\n        </rule>\n\n        <!-- for custom matching needs, use a request matcher service -->\n        <rule role=\"ROLE_USER\" request-matcher=\"App\\Security\\RequestMatcher\\MyRequestMatcher\"/>\n\n        <!-- require ROLE_ADMIN for 'admin' route. You can use the shortcut route=\"xxx\" -->\n        <rule role=\"ROLE_ADMIN\">\n            <attribute key=\"_route\">admin</attribute>\n        </rule>\n        <rule route=\"admin\" role=\"ROLE_ADMIN\"/>\n    </config>\n</srv:container>\n```\n\n----------------------------------------\n\nTITLE: Creating a Request Object using the Constructor with PHP Globals\nDESCRIPTION: Shows the more verbose but flexible way to create a `Request` object by manually passing PHP global arrays (`$_GET`, `$_POST`, `$_COOKIE`, `$_FILES`, `$_SERVER`) to the `Request` constructor.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$request = new Request(\n    $_GET,\n    $_POST,\n    [],\n    $_COOKIE,\n    $_FILES,\n    $_SERVER\n);\n```\n\n----------------------------------------\n\nTITLE: Mapping Request Payload to DTO in Symfony Controller\nDESCRIPTION: Demonstrates how to map the request payload to a Data Transfer Object (DTO) using the MapRequestPayload attribute in a Symfony controller.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/controller.rst#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Model\\UserDto;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Attribute\\MapRequestPayload;\n\n// ...\n\npublic function dashboard(\n    #[MapRequestPayload] UserDto $userDto\n): Response\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing PDO Cache Adapter in Symfony\nDESCRIPTION: Demonstrates how to initialize a PDO Cache Adapter with various configuration options including database connection, namespace, default lifetime, and additional options. The adapter can use either a PDO connection or DSN string for database connectivity.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/cache/adapters/pdo_adapter.rst#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Cache\\Adapter\\PdoAdapter;\n\n$cache = new PdoAdapter(\n\n    // a PDO connection or DSN for lazy connecting through PDO\n    $databaseConnectionOrDSN,\n\n    // the string prefixed to the keys of the items stored in this cache\n    $namespace = '',\n\n    // the default lifetime (in seconds) for cache items that do not define their\n    // own lifetime, with a value 0 causing items to be stored indefinitely (i.e.\n    // until the database table is truncated or its rows are otherwise deleted)\n    $defaultLifetime = 0,\n\n    // an array of options for configuring the database table and connection\n    $options = []\n);\n```\n\n----------------------------------------\n\nTITLE: Declaring Supported Types in Symfony Normalizer - PHP\nDESCRIPTION: This PHP snippet shows how to implement the getSupportedTypes() method in a custom Normalizer class to inform the Serializer about the types this normalizer can handle and the cacheability of their support. Example configuration handles 'object', '*', and specific class keys, with their cache settings. It is designed for NormalizerInterface implementers looking to optimize performance and must return an appropriately structured associative array.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer/custom_normalizer.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Serializer\\Normalizer\\NormalizerInterface;\n\nclass MyNormalizer implements NormalizerInterface\n{\n    // ...\n\n    public function getSupportedTypes(?string $format): array\n    {\n        return [\n            'object' => null,             // Doesn't support any classes or interfaces\n            '*' => false,                 // Supports any other types, but the result is not cacheable\n            MyCustomClass::class => true, // Supports MyCustomClass and result is cacheable\n        ];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Web Application with Symfony HttpKernel in PHP\nDESCRIPTION: This snippet demonstrates how to set up a basic web application using Symfony's HttpKernel component. It includes routing, request handling, and response generation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/http_kernel.rst#2025-04-22_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\EventDispatcher\\EventDispatcher;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\RequestStack;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver;\nuse Symfony\\Component\\HttpKernel\\Controller\\ControllerResolver;\nuse Symfony\\Component\\HttpKernel\\EventListener\\RouterListener;\nuse Symfony\\Component\\HttpKernel\\HttpKernel;\nuse Symfony\\Component\\Routing\\Matcher\\UrlMatcher;\nuse Symfony\\Component\\Routing\\RequestContext;\nuse Symfony\\Component\\Routing\\Route;\nuse Symfony\\Component\\Routing\\RouteCollection;\n\n$routes = new RouteCollection();\n$routes->add('hello', new Route('/hello/{name}', [\n    '_controller' => function (Request $request): Response {\n        return new Response(\n            sprintf(\"Hello %s\", $request->get('name'))\n        );\n    }]\n));\n\n$request = Request::createFromGlobals();\n\n$matcher = new UrlMatcher($routes, new RequestContext());\n\n$dispatcher = new EventDispatcher();\n$dispatcher->addSubscriber(new RouterListener($matcher, new RequestStack()));\n\n$controllerResolver = new ControllerResolver();\n$argumentResolver = new ArgumentResolver();\n\n$kernel = new HttpKernel($dispatcher, $controllerResolver, new RequestStack(), $argumentResolver);\n\n$response = $kernel->handle($request);\n$response->send();\n\n$kernel->terminate($request, $response);\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Information with Symfony Console (Terminal)\nDESCRIPTION: Runs the Symfony console command `about` within an existing project directory to display information about the application, such as the Symfony version, PHP version, configured bundles, and environment settings. Requires PHP and the project's dependencies to be installed.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup.rst#2025-04-22_snippet_6\n\nLANGUAGE: terminal\nCODE:\n```\n$ php bin/console about\n```\n\n----------------------------------------\n\nTITLE: Creating a Form Type Class in Symfony\nDESCRIPTION: This snippet demonstrates how to create a basic form type class in Symfony. It shows the structure of a form builder method, including adding form fields with different options.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/forms.rst#2025-04-22_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Form\\FormBuilderInterface;\n\nclass TaskType extends AbstractType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options): void\n    {\n        $builder\n            // if you don't define field options, you can omit the second argument\n            ->add('task')\n            // if you define field options, pass NULL as second argument\n            ->add('dueDate', null, ['required' => false])\n            ->add('save', SubmitType::class)\n        ;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HttpKernelInterface in PHP\nDESCRIPTION: Interface definition for HttpKernelInterface which enables framework interoperability and provides core request handling functionality.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/create_framework/http_kernel_httpkernelinterface.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace Symfony\\Component\\HttpKernel;\n\ninterface HttpKernelInterface\n{\n    /**\n     * @return Response A Response instance\n     */\n    public function handle(\n        Request $request,\n        int $type = self::MAIN_REQUEST,\n        bool $catch = true\n    ): Response;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Service with Constructor Injection in PHP\nDESCRIPTION: This snippet defines the `TwitterClient` service within the `App\\Service` namespace. It depends on `Rot13Transformer` which is injected via the constructor using PHP 8's constructor property promotion. The `tweet` method uses the injected transformer to modify the status before further processing.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/autowiring.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// src/Service/TwitterClient.php\nnamespace App\\Service;\n\nuse App\\Util\\Rot13Transformer;\n// ...\n\nclass TwitterClient\n{\n    public function __construct(\n        private Rot13Transformer $transformer,\n    ) {\n    }\n\n    public function tweet(User $user, string $key, string $status): void\n    {\n        $transformedStatus = $this->transformer->transform($status);\n\n        // ... connect to Twitter and send the encoded status\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection in Symfony .env File\nDESCRIPTION: Example configurations for setting up database connections for MySQL, MariaDB, SQLite, PostgreSQL, and Oracle in the Symfony .env file.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine.rst#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n# .env (or override DATABASE_URL in .env.local to avoid committing your changes)\n\n# customize this line!\nDATABASE_URL=\"mysql://db_user:db_password@127.0.0.1:3306/db_name?serverVersion=8.0.37\"\n\n# to use mariadb:\n# Before doctrine/dbal < 3.7\n# DATABASE_URL=\"mysql://db_user:db_password@127.0.0.1:3306/db_name?serverVersion=mariadb-10.5.8\"\n# Since doctrine/dbal 3.7\n# DATABASE_URL=\"mysql://db_user:db_password@127.0.0.1:3306/db_name?serverVersion=10.5.8-MariaDB\"\n\n# to use sqlite:\n# DATABASE_URL=\"sqlite:///%kernel.project_dir%/var/app.db\"\n\n# to use postgresql:\n# DATABASE_URL=\"postgresql://db_user:db_password@127.0.0.1:5432/db_name?serverVersion=12.19 (Debian 12.19-1.pgdg120+1)&charset=utf8\"\n\n# to use oracle:\n# DATABASE_URL=\"oci8://db_user:db_password@127.0.0.1:1521/db_name\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Symfony Serializer with PropertyInfo in PHP\nDESCRIPTION: This snippet demonstrates how to set up the Symfony Serializer with PropertyInfo extractor, ObjectNormalizer, ArrayDenormalizer, and JsonEncoder. It uses PhpDocExtractor and ReflectionExtractor for property info.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer.rst#2025-04-22_snippet_39\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\PropertyInfo\\Extractor\\PhpDocExtractor;\nuse Symfony\\Component\\PropertyInfo\\Extractor\\ReflectionExtractor;\nuse Symfony\\Component\\PropertyInfo\\PropertyInfoExtractor;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\Mapping\\Factory\\ClassMetadataFactory;\nuse Symfony\\Component\\Serializer\\Mapping\\Loader\\AttributeLoader;\nuse Symfony\\Component\\Serializer\\Normalizer\\ArrayDenormalizer;\nuse Symfony\\Component\\Serializer\\Normalizer\\ObjectNormalizer;\nuse Symfony\\Component\\Serializer\\Serializer;\n\n$propertyInfo = new PropertyInfoExtractor([], [new PhpDocExtractor(), new ReflectionExtractor()]);\n$normalizers = [new ObjectNormalizer(new ClassMetadataFactory(new AttributeLoader()), null, null, $propertyInfo), new ArrayDenormalizer()];\n\n$this->serializer = new Serializer($normalizers, [new JsonEncoder()]);\n```\n\n----------------------------------------\n\nTITLE: Creating JSON Response in PHP\nDESCRIPTION: This snippet shows two ways to create a JSON response in Symfony: using the Response class and using the JsonResponse class.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#2025-04-22_snippet_33\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\HttpFoundation\\Response;\n\n$response = new Response();\n$response->setContent(json_encode([\n    'data' => 123,\n]));\n$response->headers->set('Content-Type', 'application/json');\n```\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\n\n// if you know the data to send when creating the response\n$response = new JsonResponse(['data' => 123]);\n\n// if you don't know the data to send or if you want to customize the encoding options\n$response = new JsonResponse();\n// ...\n// configure any custom encoding options (if needed, it must be called before \"setData()\")\n//$response->setEncodingOptions(JsonResponse::DEFAULT_ENCODING_OPTIONS | \\JSON_PRESERVE_ZERO_FRACTION);\n$response->setData(['data' => 123]);\n\n// if the data to send is already encoded in JSON\n$response = JsonResponse::fromJsonString('{ \"data\": 123 }');\n```\n\n----------------------------------------\n\nTITLE: Validating Email Address in Symfony Controller\nDESCRIPTION: Shows how to validate an email address string using Symfony's ValidatorInterface and Email constraint. The code demonstrates constraint creation, validation, and error handling.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/validation/raw_values.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function addEmail(string $email, ValidatorInterface $validator): void\n{\n    $emailConstraint = new Assert\\Email();\n    // all constraint \"options\" can be set this way\n    $emailConstraint->message = 'Invalid email address';\n\n    // use the validator to validate the value\n    $errors = $validator->validate(\n        $email,\n        $emailConstraint\n    );\n\n    if (!$errors->count()) {\n        // ... this IS a valid email address, do something\n    } else {\n        // this is *not* a valid email address\n        $errorMessage = $errors[0]->getMessage();\n\n        // ... do something with the error\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Objects in Symfony Controller\nDESCRIPTION: Controller method that validates a Product entity using Symfony's ValidatorInterface. It demonstrates how to handle validation errors.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine.rst#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/ProductController.php\nnamespace App\\Controller;\n\nuse App\\Entity\\Product;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Attribute\\Route;\nuse Symfony\\Component\\Validator\\Validator\\ValidatorInterface;\n// ...\n\nclass ProductController extends AbstractController\n{\n    #[Route('/product', name: 'create_product')]\n    public function createProduct(ValidatorInterface $validator): Response\n    {\n        $product = new Product();\n\n        // ... update the product data somehow (e.g. with a form) ...\n\n        $errors = $validator->validate($product);\n        if (count($errors) > 0) {\n            return new Response((string) $errors, 400);\n        }\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Persisting Objects to Database in Symfony Controller\nDESCRIPTION: Controller method that creates a new Product entity, sets its properties, and persists it to the database using Doctrine's EntityManager.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/ProductController.php\nnamespace App\\Controller;\n\n// ...\nuse App\\Entity\\Product;\nuse Doctrine\\ORM\\EntityManagerInterface;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Attribute\\Route;\n\nclass ProductController extends AbstractController\n{\n    #[Route('/product', name: 'create_product')]\n    public function createProduct(EntityManagerInterface $entityManager): Response\n    {\n        $product = new Product();\n        $product->setName('Keyboard');\n        $product->setPrice(1999);\n        $product->setDescription('Ergonomic and stylish!');\n\n        // tell Doctrine you want to (eventually) save the Product (no queries yet)\n        $entityManager->persist($product);\n\n        // actually executes the queries (i.e. the INSERT query)\n        $entityManager->flush();\n\n        return new Response('Saved new product with id '.$product->getId());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Framework Implementation\nDESCRIPTION: Full implementation of the framework including routing, request handling, and template rendering with error handling.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/create_framework/templating.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once __DIR__.'/../vendor/autoload.php';\n\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing;\n\nfunction render_template(Request $request): Response\n{\n    extract($request->attributes->all(), EXTR_SKIP);\n    ob_start();\n    include sprintf(__DIR__.'/../src/pages/%s.php', $_route);\n\n    return new Response(ob_get_clean());\n}\n\n$request = Request::createFromGlobals();\n$routes = include __DIR__.'/../src/app.php';\n\n$context = new Routing\\RequestContext();\n$context->fromRequest($request);\n$matcher = new Routing\\Matcher\\UrlMatcher($routes, $context);\n\ntry {\n    $request->attributes->add($matcher->match($request->getPathInfo()));\n    $response = call_user_func($request->attributes->get('_controller'), $request);\n} catch (Routing\\Exception\\ResourceNotFoundException $exception) {\n    $response = new Response('Not Found', 404);\n} catch (Exception $exception) {\n    $response = new Response('An error occurred', 500);\n}\n\n$response->send();\n```\n\n----------------------------------------\n\nTITLE: Hashing Passwords with UserPasswordHasher (PHP Standalone)\nDESCRIPTION: This PHP snippet shows how to use the `UserPasswordHasher` in a standalone context (outside the main Symfony framework). It requires a pre-configured `PasswordHasherFactory` instance. It demonstrates creating a `UserPasswordHasher` and using its `hashPassword` method to hash a plaintext password for a given user object based on the factory's configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/passwords.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// ...\n$passwordHasher = new UserPasswordHasher($passwordHasherFactory);\n\n// Get the user password (e.g. from a registration form)\n$user = new User(...);\n$plaintextPassword = ...;\n\n// hash the password (based on the password hasher factory config for the $user class)\n$hashedPassword = $passwordHasher->hashPassword(\n    $user,\n    $plaintextPassword\n);\n$user->setPassword($hashedPassword);\n```\n\n----------------------------------------\n\nTITLE: Handling Sending Failures in Symfony Mailer\nDESCRIPTION: Demonstrates how to catch and handle exceptions when sending emails fails in Symfony Mailer.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_38\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Mailer\\Exception\\TransportExceptionInterface;\n\n$email = new Email();\n// ...\ntry {\n    $mailer->send($email);\n} catch (TransportExceptionInterface $e) {\n    // some error prevented the email sending; display an\n    // error message or try to resend the message\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Payload (POST or JSON) using getPayload() in PHP\nDESCRIPTION: Explains the use of the `getPayload()` method on the `Request` object. This method returns an `InputBag` containing the request data, intelligently handling whether the data came from standard `$_POST` parameters or a JSON request body.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$data = $request->getPayload();\n```\n\n----------------------------------------\n\nTITLE: Exporting and Serializing Variables with VarExporter - PHP\nDESCRIPTION: Serializes any PHP variable or object graph to a PSR-2 compliant PHP code representation using Symfony\\Component\\VarExporter\\VarExporter. Requires 'symfony/var-exporter' as a dependency. The exported PHP code is written to a file and can later be required, fully regenerating the original variable without constructor calls; references, semantics, and custom serialization methods are preserved. Input is a PHP variable; output is a code string and a PHP file; regenerating restores the original value/structure.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/var_exporter.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\VarExporter\\VarExporter;\n\n$exported = VarExporter::export($someVariable);\n// store the $exported data in some file or cache system for later reuse\n$data = file_put_contents('exported.php', '<?php return '.$exported.';');\n\n// later, regenerate the original variable when you need it\n$regeneratedVariable = require 'exported.php';\n```\n\n----------------------------------------\n\nTITLE: Loading Services in Symfony Bundle Class\nDESCRIPTION: This snippet demonstrates how to load service definitions from configuration files in a Symfony bundle by implementing the loadExtension() method. It shows importing XML files and setting parameters and services based on configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/bundles/extension.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// ...\nuse Symfony\\Component\\DependencyInjection\\ContainerBuilder;\nuse Symfony\\Component\\DependencyInjection\\Loader\\Configurator\\ContainerConfigurator;\nuse Symfony\\Component\\HttpKernel\\Bundle\\AbstractBundle;\n\nclass AcmeHelloBundle extends AbstractBundle\n{\n    public function loadExtension(array $config, ContainerConfigurator $container, ContainerBuilder $builder): void\n    {\n        // load an XML, PHP or YAML file\n        $container->import('../config/services.xml');\n\n        // you can also add or replace parameters and services\n        $container->parameters()\n            ->set('acme_hello.phrase', $config['phrase'])\n        ;\n\n        if ($config['scream']) {\n            $container->services()\n                ->get('acme_hello.printer')\n                    ->class(ScreamingPrinter::class)\n            ;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Form Submissions in Standalone PHP\nDESCRIPTION: Demonstrates handling form submissions in standalone PHP without a Symfony controller, showing the complete workflow from form creation to response handling.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/form.rst#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\DateType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\TextType;\nuse Symfony\\Component\\HttpFoundation\\RedirectResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\n\n// ...\n\n$form = $formFactory->createBuilder()\n    ->add('task', TextType::class)\n    ->add('dueDate', DateType::class)\n    ->getForm();\n\n$request = Request::createFromGlobals();\n\n$form->handleRequest($request);\n\nif ($form->isSubmitted() && $form->isValid()) {\n    $data = $form->getData();\n\n    // ... perform some action, such as saving the data to the database\n\n    $response = new RedirectResponse('/task/success');\n    $response->prepare($request);\n\n    return $response->send();\n}\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Stopping Event Propagation within a Listener in PHP\nDESCRIPTION: Shows how a listener method (`onPlacedOrder`) can stop the event propagation by calling the `stopPropagation()` method on the received event object (`OrderPlacedEvent`). This prevents any subsequent listeners registered for the same event (with lower priority or registered later) from being executed.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/event_dispatcher.rst#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Acme\\Store\\Event\\OrderPlacedEvent;\n\npublic function onPlacedOrder(OrderPlacedEvent $event): void\n{\n    // ...\n\n    $event->stopPropagation();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Message Bus with Handler - Symfony Messenger - PHP\nDESCRIPTION: Demonstrates setting up a message bus with middleware and message handler using the Messenger component in PHP. Requires symfony/messenger and the relevant App namespace classes. The example configures a MessageBus with HandleMessageMiddleware and registers a message handler, then dispatches a message for synchronous processing. Input is the message object; output is the invocation of the message handler.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/messenger.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Message\\MyMessage;\nuse App\\MessageHandler\\MyMessageHandler;\nuse Symfony\\Component\\Messenger\\Handler\\HandlersLocator;\nuse Symfony\\Component\\Messenger\\MessageBus;\nuse Symfony\\Component\\Messenger\\Middleware\\HandleMessageMiddleware;\n\n$handler = new MyMessageHandler();\n\n$bus = new MessageBus([\n    new HandleMessageMiddleware(new HandlersLocator([\n        MyMessage::class => [$handler],\n    ])),\n]);\n\n$bus->dispatch(new MyMessage(/* ... */));\n```\n\n----------------------------------------\n\nTITLE: Configuring Security Channel Handler in PHP\nDESCRIPTION: PHP configuration for routing security channel logs to a separate file in production environment\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/logging/channels_handlers.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/prod/monolog.php\nuse Symfony\\Component\\DependencyInjection\\Loader\\Configurator\\ContainerConfigurator;\nuse Symfony\\Config\\MonologConfig;\n\nreturn static function (MonologConfig $monolog, ContainerConfigurator $container) {\n    if ('prod' === $container->env()) {\n        $monolog->handler('security')\n            ->type('stream')\n            ->path(param('kernel.logs_dir') . \\DIRECTORY_SEPARATOR . 'security.log')\n            ->channels()->elements(['security']);\n\n        $monolog->handler('main')\n            ->channels()->elements(['!security']);\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Adding CallbackTransformer to Tags Field in PHP\nDESCRIPTION: Demonstrates how to add a CallbackTransformer to the 'tags' field in the TaskType form. This transformer converts between a string representation for display and an array for internal use.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/data_transformers.rst#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n// src/Form/Type/TaskType.php\nnamespace App\\Form\\Type;\n\nuse Symfony\\Component\\Form\\CallbackTransformer;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\TextType;\nuse Symfony\\Component\\Form\\FormBuilderInterface;\n// ...\n\nclass TaskType extends AbstractType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options): void\n    {\n        $builder->add('tags', TextType::class);\n\n        $builder->get('tags')\n            ->addModelTransformer(new CallbackTransformer(\n                function ($tagsAsArray): string {\n                    // transform the array to a string\n                    return implode(', ', $tagsAsArray);\n                },\n                function ($tagsAsString): array {\n                    // transform the string back to an array\n                    return explode(', ', $tagsAsString);\n                }\n            ))\n        ;\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Interface Proxifying with PHP\nDESCRIPTION: Illustrates how to configure a lazy service to implement specific interfaces using PHP configuration. This approach works with final classes by creating a proxy that only implements the specified interfaces.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/lazy_services.rst#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nuse App\\Twig\\AppExtension;\nuse Twig\\Extension\\ExtensionInterface;\n\nreturn function(ContainerConfigurator $container): void {\n    $services = $container->services();\n\n    $services->set(AppExtension::class)\n        ->lazy()\n        ->tag('proxy', ['interface' => ExtensionInterface::class])\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Form with FormFactory in Standalone PHP\nDESCRIPTION: Shows how to build a simple form using an explicitly created `$formFactory` instance in a standalone PHP context (outside the full Symfony Framework). It adds 'task' (TextType) and 'dueDate' (DateType) fields, gets the form object, creates its view, and renders it using a Twig template. Requires a pre-configured `$formFactory` and `$twig` instance.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/form.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\DateType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\TextType;\n\n// ...\n\n$form = $formFactory->createBuilder()\n    ->add('task', TextType::class)\n    ->add('dueDate', DateType::class)\n    ->getForm();\n\nvar_dump($twig->render('new.html.twig', [\n    'form' => $form->createView(),\n]));\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Transport Interface for Messenger in PHP\nDESCRIPTION: A sample implementation of TransportInterface that provides database-backed message transport functionality. It handles message serialization, storage, retrieval, acknowledgment, and rejection using a database table named 'my_queue'.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/messenger/custom-transport.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Messenger\\Envelope;\nuse Symfony\\Component\\Messenger\\Stamp\\TransportMessageIdStamp;\nuse Symfony\\Component\\Messenger\\Transport\\Serialization\\PhpSerializer;\nuse Symfony\\Component\\Messenger\\Transport\\Serialization\\SerializerInterface;\nuse Symfony\\Component\\Messenger\\Transport\\TransportInterface;\nuse Symfony\\Component\\Uid\\Uuid;\n\nclass YourTransport implements TransportInterface\n{\n    private SerializerInterface $serializer;\n\n    /**\n     * @param FakeDatabase $db is used for demo purposes. It is not a real class.\n     */\n    public function __construct(\n        private FakeDatabase $db,\n        ?SerializerInterface $serializer = null,\n    ) {\n        $this->serializer = $serializer ?? new PhpSerializer();\n    }\n\n    public function get(): iterable\n    {\n        // Get a message from \"my_queue\"\n        $row = $this->db->createQuery(\n                'SELECT *\n                FROM my_queue\n                WHERE (delivered_at IS NULL OR delivered_at < :redeliver_timeout)\n                AND handled = FALSE'\n            )\n            ->setParameter('redeliver_timeout', new DateTimeImmutable('-5 minutes'))\n            ->getOneOrNullResult();\n\n        if (null === $row) {\n            return [];\n        }\n\n        $envelope = $this->serializer->decode([\n            'body' => $row['envelope'],\n        ]);\n\n        return [$envelope->with(new TransportMessageIdStamp($row['id']))];\n    }\n\n    public function ack(Envelope $envelope): void\n    {\n        $stamp = $envelope->last(TransportMessageIdStamp::class);\n        if (!$stamp instanceof TransportMessageIdStamp) {\n            throw new \\LogicException('No TransportMessageIdStamp found on the Envelope.');\n        }\n\n        // Mark the message as \"handled\"\n        $this->db->createQuery('UPDATE my_queue SET handled = TRUE WHERE id = :id')\n            ->setParameter('id', $stamp->getId())\n            ->execute();\n    }\n\n    public function reject(Envelope $envelope): void\n    {\n        $stamp = $envelope->last(TransportMessageIdStamp::class);\n        if (!$stamp instanceof TransportMessageIdStamp) {\n            throw new \\LogicException('No TransportMessageIdStamp found on the Envelope.');\n        }\n\n        // Delete the message from the \"my_queue\" table\n        $this->db->createQuery('DELETE FROM my_queue WHERE id = :id')\n            ->setParameter('id', $stamp->getId())\n            ->execute();\n    }\n\n    public function send(Envelope $envelope): Envelope\n    {\n        $encodedMessage = $this->serializer->encode($envelope);\n        $uuid = (string) Uuid::v4();\n        // Add a message to the \"my_queue\" table\n        $this->db->createQuery(\n                'INSERT INTO my_queue (id, envelope, delivered_at, handled)\n                VALUES (:id, :envelope, NULL, FALSE)'\n            )\n            ->setParameters([\n                'id' => $uuid,\n                'envelope' => $encodedMessage['body'],\n            ])\n            ->execute();\n\n        return $envelope->with(new TransportMessageIdStamp($uuid));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Template Rendering in Symfony Services\nDESCRIPTION: Shows how to inject and use the Twig service in custom services for template rendering\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/templates.rst#2025-04-22_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Service;\n\nuse Twig\\Environment;\n\nclass SomeService\n{\n    public function __construct(\n        private Environment $twig,\n    ) {\n    }\n\n    public function someMethod(): void\n    {\n        $htmlContents = $this->twig->render('product/index.html.twig', [\n            'category' => '...',\n            'promotions' => ['...', '...'],\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Symfony Form in Controller\nDESCRIPTION: Demonstrates how to handle form submission and processing in a Symfony controller, including form creation, data handling, and redirection.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/forms.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/TaskController.php\n\n// ...\nuse Symfony\\Component\\HttpFoundation\\Request;\n\nclass TaskController extends AbstractController\n{\n    public function new(Request $request): Response\n    {\n        // just set up a fresh $task object (remove the example data)\n        $task = new Task();\n\n        $form = $this->createForm(TaskType::class, $task);\n\n        $form->handleRequest($request);\n        if ($form->isSubmitted() && $form->isValid()) {\n            // $form->getData() holds the submitted values\n            // but, the original `$task` variable has also been updated\n            $task = $form->getData();\n\n            // ... perform some action, such as saving the task to the database\n\n            return $this->redirectToRoute('task_success');\n        }\n\n        return $this->render('task/new.html.twig', [\n            'form' => $form,\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: String Manipulation Methods for Joining, Splitting and Truncating in Symfony\nDESCRIPTION: Demonstrates methods for joining arrays into strings, splitting strings into arrays, and various string truncation options with different modes.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/string.rst#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nu(', ')->join(['foo', 'bar']); // 'foo, bar'\n\nu('template_name.html.twig')->split('.');    // ['template_name', 'html', 'twig']\nu('template_name.html.twig')->split('.', 2); // ['template_name', 'html.twig']\n\nu('Symfony is great')->slice(0, 7);  // 'Symfony'\nu('Symfony is great')->slice(0, -6); // 'Symfony is'\nu('Symfony is great')->slice(11);    // 'great'\nu('Symfony is great')->slice(-5);    // 'great'\n\nu('Lorem Ipsum')->truncate(3);             // 'Lor'\nu('Lorem Ipsum')->truncate(80);            // 'Lorem Ipsum'\nu('Lorem Ipsum')->truncate(8, '…');        // 'Lorem I…'\n\nu('Lorem ipsum dolor sit amet')->truncate(8, cut: TruncateMode::Char);       // 'Lorem ip'\nu('Lorem ipsum dolor sit amet')->truncate(8, cut: TruncateMode::WordBefore); // 'Lorem'\nu('Lorem ipsum dolor sit amet')->truncate(8, cut: TruncateMode::WordAfter);   // 'Lorem ipsum'\n\nu('Lorem Ipsum')->wordwrap(4);                  // 'Lorem\\nIpsum'\nu('Lorem Ipsum')->wordwrap(4, \"\\n\", cut: true); // 'Lore\\nm\\nIpsu\\nm'\n\nu('0123456789')->splice('xxx');       // 'xxx'\nu('0123456789')->splice('xxx', 0, 2); // 'xxx23456789'\nu('0123456789')->splice('xxx', 0, 6); // 'xxx6789'\nu('0123456789')->splice('xxx', 6);    // '012345xxx'\n\nu('0123456789')->chunk(3);  // ['012', '345', '678', '9']\n```\n\n----------------------------------------\n\nTITLE: Initializing SemaphoreStore for Symfony Lock Component\nDESCRIPTION: Creates a SemaphoreStore instance using PHP's built-in semaphore functions to manage locks.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/lock.rst#2025-04-22_snippet_24\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Lock\\Store\\SemaphoreStore;\n\n$store = new SemaphoreStore();\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Symfony Controller in PHP\nDESCRIPTION: This snippet demonstrates how to create a basic Symfony controller class with a single action method. It includes namespace declaration, use statements, route annotation, and a simple response generation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/controller.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/LuckyController.php\nnamespace App\\Controller;\n\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Attribute\\Route;\n\nclass LuckyController\n{\n    #[Route('/lucky/number/{max}', name: 'app_lucky_number')]\n    public function number(int $max): Response\n    {\n        $number = random_int(0, $max);\n\n        return new Response(\n            '<html><body>Lucky number: '.$number.'</body></html>'\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking System Requirements with Symfony CLI (Terminal)\nDESCRIPTION: Executes the Symfony CLI command to verify if the local system meets all the technical requirements for running Symfony applications. This requires the Symfony CLI to be installed.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup.rst#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ symfony check:requirements\n```\n\n----------------------------------------\n\nTITLE: Testing Service-Dependent Form Types in PHP\nDESCRIPTION: Implementation for testing form types that are registered as services with dependencies. Shows how to mock dependencies and use PreloadedExtension for form registry.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/unit_testing.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Tests\\Form\\Type;\n\nuse App\\Form\\Type\\TestedType;\nuse Doctrine\\ORM\\EntityManager;\nuse Symfony\\Component\\Form\\PreloadedExtension;\nuse Symfony\\Component\\Form\\Test\\TypeTestCase;\n\nclass TestedTypeTest extends TypeTestCase\n{\n    private MockObject&EntityManager $entityManager;\n\n    protected function setUp(): void\n    {\n        $this->entityManager = $this->createMock(EntityManager::class);\n        parent::setUp();\n    }\n\n    protected function getExtensions(): array\n    {\n        $type = new TestedType($this->entityManager);\n        return [\n            new PreloadedExtension([$type], []),\n        ];\n    }\n\n    public function testSubmitValidData(): void\n    {\n        $form = $this->factory->create(TestedType::class, $formData);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Task Entity removeTag Method Implementation\nDESCRIPTION: PHP code showing the removeTag method implementation in the Task entity. This method removes a Tag object from the tags collection.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/form_collections.rst#2025-04-22_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Task.php\n\n// ...\nclass Task\n{\n    // ...\n\n    public function removeTag(Tag $tag): void\n    {\n        $this->tags->removeElement($tag);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Request Matching Using Matcher Classes (Symfony, PHP)\nDESCRIPTION: Shows how to leverage matcher classes (e.g., SchemeRequestMatcher, HostRequestMatcher, PathRequestMatcher, ChainRequestMatcher) to check whether HTTP requests satisfy certain criteria like scheme, host, or path. Requires corresponding matcher classes from Symfony. Inputs are typically a Request object; outputs are boolean indicators from the matches() method. Demonstrates combining multiple matchers via the chain pattern for complex request filtering.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#2025-04-22_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\HttpFoundation\\ChainRequestMatcher;\nuse Symfony\\Component\\HttpFoundation\\RequestMatcher\\HostRequestMatcher;\nuse Symfony\\Component\\HttpFoundation\\RequestMatcher\\PathRequestMatcher;\nuse Symfony\\Component\\HttpFoundation\\RequestMatcher\\SchemeRequestMatcher;\n\n// use only one criteria to match the request\n$schemeMatcher = new SchemeRequestMatcher('https');\nif ($schemeMatcher->matches($request)) {\n    // ...\n}\n\n// use a set of criteria to match the request\n$matcher = new ChainRequestMatcher([\n    new HostRequestMatcher('example.com'),\n    new PathRequestMatcher('/admin'),\n]);\n\nif ($matcher->matches($request)) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Type-Hinting an Interface for Dependency Injection in PHP\nDESCRIPTION: This snippet demonstrates updating the `TwitterClient` constructor to type-hint the `TransformerInterface` instead of the concrete `Rot13Transformer` class. This allows any service implementing the interface to be potentially injected, making the `TwitterClient` more flexible.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/autowiring.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nclass TwitterClient\n{\n    public function __construct(\n        private TransformerInterface $transformer,\n    ) {\n        // ...\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Templates in Symfony PHP Controller\nDESCRIPTION: This snippet shows how to use the render() method to render a Twig template and return it as a Response object in a Symfony controller.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/controller.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// renders templates/lucky/number.html.twig\nreturn $this->render('lucky/number.html.twig', ['number' => $number]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Symfony Routing in PHP Framework\nDESCRIPTION: Integrates Symfony Routing into a basic PHP framework, handling route matching, template inclusion, and error responses.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/create_framework/routing.rst#2025-04-22_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nrequire_once __DIR__.'/../vendor/autoload.php';\n\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing;\n\n$request = Request::createFromGlobals();\n$routes = include __DIR__.'/../src/app.php';\n\n$context = new Routing\\RequestContext();\n$context->fromRequest($request);\n$matcher = new Routing\\Matcher\\UrlMatcher($routes, $context);\n\ntry {\n    extract($matcher->match($request->getPathInfo()), EXTR_SKIP);\n    ob_start();\n    include sprintf(__DIR__.'/../src/pages/%s.php', $_route);\n\n    $response = new Response(ob_get_clean());\n} catch (Routing\\Exception\\ResourceNotFoundException $exception) {\n    $response = new Response('Not Found', 404);\n} catch (Exception $exception) {\n    $response = new Response('An error occurred', 500);\n}\n\n$response->send();\n```\n\n----------------------------------------\n\nTITLE: Combining and Parsing HTTP Headers with HeaderUtils (Symfony, PHP)\nDESCRIPTION: Demonstrates various static utility methods of the HeaderUtils class for manipulating arrays and strings representing HTTP headers. Dependencies: the HeaderUtils class from Symfony. Functions include combining key-value pairs, joining an associative array into a header string, quoting and unquoting strings, and parsing query strings while preserving dots. Inputs are typically arrays or strings representing HTTP headers or query parameters. Outputs include manipulated arrays or strings following HTTP standards.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nHeaderUtils::combine([['foo', 'abc'], ['bar']]);\n// => ['foo' => 'abc', 'bar' => true]\n\n// Joins an associative array into a string for use in an HTTP header\nHeaderUtils::toString(['foo' => 'abc', 'bar' => true, 'baz' => 'a b c'], ',');\n// => 'foo=abc, bar, baz=\"a b c\"'\n\n// Encodes a string as a quoted string, if necessary\nHeaderUtils::quote('foo \"bar\"');\n// => '\"foo \\\"bar\\\"\"'\n\n// Decodes a quoted string\nHeaderUtils::unquote('\"foo \\\"bar\\\"\"');\n// => 'foo \"bar\"'\n\n// Parses a query string but maintains dots (PHP parse_str() replaces '.' by '_')\nHeaderUtils::parseQuery('foo[bar.baz]=qux');\n// => ['foo' => ['bar.baz' => 'qux']]\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Extension Load Method in PHP\nDESCRIPTION: Shows a simple implementation of the `load()` method within a custom extension (`AcmeDemoExtension`). This method uses `XmlFileLoader` and `FileLocator` to load service definitions from an XML configuration file located relative to the extension class.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/dependency_injection/compilation.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Config\\FileLocator;\nuse Symfony\\Component\\DependencyInjection\\ContainerBuilder;\nuse Symfony\\Component\\DependencyInjection\\Extension\\ExtensionInterface;\nuse Symfony\\Component\\DependencyInjection\\Loader\\XmlFileLoader;\n\nclass AcmeDemoExtension implements ExtensionInterface\n{\n    public function load(array $configs, ContainerBuilder $container): void\n    {\n        $loader = new XmlFileLoader(\n            $container,\n            new FileLocator(__DIR__.'/../Resources/config')\n        );\n        $loader->load('services.xml');\n    }\n\n    // ...\n```\n\n----------------------------------------\n\nTITLE: Validating CSRF Token using the IsCsrfTokenValid Attribute in Symfony Controller\nDESCRIPTION: Illustrates an alternative, attribute-based method for CSRF token validation in a Symfony controller action, available in newer Symfony versions. The `IsCsrfTokenValid` PHP attribute placed before the controller action automatically performs the validation check. It uses the specified token ID ('delete-item') and optionally the request key ('tokenKey: 'token'') where the token is expected, throwing an AccessDeniedHttpException if validation fails before the action code is executed.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/csrf.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Security\\Http\\Attribute\\IsCsrfTokenValid;\n// ...\n\n#[IsCsrfTokenValid('delete-item', tokenKey: 'token')]\npublic function delete(): Response\n{\n    // ... do something, like deleting an object\n}\n```\n\n----------------------------------------\n\nTITLE: Automatic Entity Fetching with EntityValueResolver in Controller\nDESCRIPTION: Shows how to use the EntityValueResolver to automatically fetch a Product entity using the route parameter. This simplifies controllers by removing the need for explicit repository queries.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine.rst#2025-04-22_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/ProductController.php\nnamespace App\\Controller;\n\nuse App\\Entity\\Product;\nuse App\\Repository\\ProductRepository;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Attribute\\Route;\n// ...\n\nclass ProductController extends AbstractController\n{\n    #[Route('/product/{id}')]\n    public function show(Product $product): Response\n    {\n        // use the Product!\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Symfony Finder Component in PHP\nDESCRIPTION: Demonstrates the fundamental usage of the Finder component. It initializes a Finder instance, specifies searching for files within the current directory using `files()` and `in()`, checks if results exist using `hasResults()`, and iterates over the found files. Each file object is an instance of `Symfony\\Component\\Finder\\SplFileInfo`, allowing access to methods like `getRealPath()` and `getRelativePathname()`.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/finder.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Finder\\Finder;\n\n$finder = new Finder();\n// find all files in the current directory\n$finder->files()->in(__DIR__);\n\n// check if there are any search results\nif ($finder->hasResults()) {\n    // ...\n}\n\nforeach ($finder as $file) {\n    $absoluteFilePath = $file->getRealPath();\n    $fileNameWithExtension = $file->getRelativePathname();\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony HttpFoundation Component via Composer\nDESCRIPTION: Shows the command-line instruction using Composer to add the `symfony/http-foundation` package as a project dependency. This component provides an object-oriented layer for HTTP interactions in PHP.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require symfony/http-foundation\n```\n\n----------------------------------------\n\nTITLE: Default Symfony project directory structure\nDESCRIPTION: This snippet shows the recommended default directory structure for a Symfony project, including key directories and files.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/best_practices.rst#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nyour_project/\n├─ assets/\n├─ bin/\n│  └─ console\n├─ config/\n│  ├─ packages/\n│  ├─ routes/\n│  └─ services.yaml\n├─ migrations/\n├─ public/\n│  ├─ build/\n│  └─ index.php\n├─ src/\n│  ├─ Kernel.php\n│  ├─ Command/\n│  ├─ Controller/\n│  ├─ DataFixtures/\n│  ├─ Entity/\n│  ├─ EventSubscriber/\n│  ├─ Form/\n│  ├─ Repository/\n│  ├─ Security/\n│  └─ Twig/\n├─ templates/\n├─ tests/\n├─ translations/\n├─ var/\n│  ├─ cache/\n│  └─ log/\n└─ vendor/\n```\n\n----------------------------------------\n\nTITLE: Creating Symfony Demo Application Project\nDESCRIPTION: This command creates a new project based on the Symfony Demo application, which is a fully-functional application demonstrating recommended Symfony development practices.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup.rst#2025-04-22_snippet_12\n\nLANGUAGE: terminal\nCODE:\n```\n$ symfony new my_project_directory --demo\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx for Symfony with PHP-FPM - NGINX\nDESCRIPTION: This Nginx configuration example demonstrates setting up a virtual host for a Symfony application, defining the document root, handling static files and the front controller, configuring PHP-FPM integration via Unix socket, and denying unwanted PHP file access. It also highlights options for environment variables, proper SCRIPT_FILENAME paths, logging, and considerations when symlinks or external PHP-FPM hosts are involved. Requires nginx and PHP-FPM installed and running.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/web_server_configuration.rst#2025-04-22_snippet_1\n\nLANGUAGE: nginx\nCODE:\n```\n# /etc/nginx/conf.d/example.com.conf\nserver {\n    server_name example.com www.example.com;\n    root /var/www/project/public;\n\n    location / {\n        # try to serve file directly, fallback to index.php\n        try_files $uri /index.php$is_args$args;\n    }\n\n    # optionally disable falling back to PHP script for the asset directories;\n    # nginx will return a 404 error when files are not found instead of passing the\n    # request to Symfony (improves performance but Symfony's 404 page is not displayed)\n    # location /bundles {\n    #     try_files $uri =404;\n    # }\n\n    location ~ ^/index\\.php(/|$) {\n        # when using PHP-FPM as a unix socket\n        fastcgi_pass unix:/var/run/php/php8.3-fpm.sock;\n\n        # when PHP-FPM is configured to use TCP\n        # fastcgi_pass 127.0.0.1:9000;\n\n        fastcgi_split_path_info ^(.+\\.php)(/.*)$;\n        include fastcgi_params;\n\n        # optionally set the value of the environment variables used in the application\n        # fastcgi_param APP_ENV prod;\n        # fastcgi_param APP_SECRET <app-secret-id>;\n        # fastcgi_param DATABASE_URL \"mysql://db_user:db_pass@host:3306/db_name\";\n\n        # When you are using symlinks to link the document root to the\n        # current version of your application, you should pass the real\n        # application path instead of the path to the symlink to PHP\n        # FPM.\n        # Otherwise, PHP's OPcache may not properly detect changes to\n        # your PHP files (see https://github.com/zendtech/ZendOptimizerPlus/issues/126\n        # for more information).\n        # Caveat: When PHP-FPM is hosted on a different machine from nginx\n        #         $realpath_root may not resolve as you expect! In this case try using\n        #         $document_root instead.\n        fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;\n        fastcgi_param DOCUMENT_ROOT $realpath_root;\n        # Prevents URIs that include the front controller. This will 404:\n        # http://example.com/index.php/some-path\n        # Remove the internal directive to allow URIs like this\n        internal;\n    }\n\n    # return 404 for all other php files not matching the front controller\n    # this prevents access to other php files you don't want to be accessible.\n    location ~ \\.php$ {\n        return 404;\n    }\n\n    error_log /var/log/nginx/project_error.log;\n    access_log /var/log/nginx/project_access.log;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Injecting Services into Symfony Console Command\nDESCRIPTION: Demonstrates how to inject services into a Symfony console command using dependency injection. This example injects a UserManager service and uses it in the execute method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/console.rst#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n// ...\nuse App\\Service\\UserManager;\nuse Symfony\\Component\\Console\\Command\\Command;\n\nclass CreateUserCommand extends Command\n{\n    public function __construct(\n        private UserManager $userManager,\n    ){\n        parent::__construct();\n    }\n\n    // ...\n\n    protected function execute(InputInterface $input, OutputInterface $output): int\n    {\n        // ...\n\n        $this->userManager->create($input->getArgument('username'));\n\n        $output->writeln('User successfully generated!');\n\n        return Command::SUCCESS;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Relative to Absolute File Paths using Symfony Path (PHP)\nDESCRIPTION: These snippets utilize the Symfony Path::makeAbsolute method to convert relative paths into absolute paths using a given base directory, handling '..' segments and returning canonical paths. If the input path is already absolute, it remains unchanged. Requires Symfony\\Component\\Filesystem\\Path. Parameters: the subject path, and a base directory. Output: absolute, canonicalized path.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/filesystem.rst#2025-04-22_snippet_22\n\nLANGUAGE: php\nCODE:\n```\necho Path::makeAbsolute('config/config.yaml', '/var/www/project');\n// => /var/www/project/config/config.yaml\n```\n\nLANGUAGE: php\nCODE:\n```\necho Path::makeAbsolute('/usr/share/lib/config.ini', '/var/www/project');\n// => /usr/share/lib/config.ini\n```\n\nLANGUAGE: php\nCODE:\n```\necho Path::makeAbsolute('../config/config.yaml', '/var/www/project/uploads');\n// => /var/www/project/config/config.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Access Token Authenticator (YAML - Symfony)\nDESCRIPTION: Sets up the access token authenticator on the main firewall using the YAML format in Symfony configuration files. You must provide a service implementing AccessTokenHandlerInterface as the token_handler. The snippet should be placed in config/packages/security.yaml, and the token handler class should be defined elsewhere in your application. Expects the handler to validate tokens and return user identities.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/access_token.rst#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\\nsecurity:\\n    firewalls:\\n        main:\\n            access_token:\\n                token_handler: App\\Security\\AccessTokenHandler\n```\n\n----------------------------------------\n\nTITLE: Request Object Usage in Symfony Controller\nDESCRIPTION: Demonstrates accessing various properties and methods of the Request object in a Symfony controller, including query parameters, headers, and files.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/controller.rst#2025-04-22_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\npublic function index(Request $request): Response\n{\n    $request->isXmlHttpRequest(); // is it an Ajax request?\n\n    $request->getPreferredLanguage(['en', 'fr']);\n\n    // retrieves GET and POST variables respectively\n    $request->query->get('page');\n    $request->getPayload()->get('page');\n\n    // retrieves SERVER variables\n    $request->server->get('HTTP_HOST');\n\n    // retrieves an instance of UploadedFile identified by foo\n    $request->files->get('foo');\n\n    // retrieves a COOKIE value\n    $request->cookies->get('PHPSESSID');\n\n    // retrieves an HTTP request header, with normalized, lowercase keys\n    $request->headers->get('host');\n    $request->headers->get('content-type');\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing HttpKernelInterface in Framework Class\nDESCRIPTION: Example of implementing HttpKernelInterface in a Framework class to handle HTTP requests.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/create_framework/http_kernel_httpkernelinterface.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\HttpKernel\\HttpKernelInterface;\n\nclass Framework implements HttpKernelInterface\n{\n    // ...\n\n    public function handle(\n        Request $request,\n        int $type = HttpKernelInterface::MAIN_REQUEST,\n        bool $catch = true\n    ) {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking, Getting, and Setting Service Definitions in PHP\nDESCRIPTION: Demonstrates how to interact with service definitions within the Symfony container using PHP. It shows how to check if a definition exists (`hasDefinition`, `has`), retrieve a definition (`getDefinition`, `findDefinition`), add a new definition (`setDefinition`), and use a shortcut for adding definitions (`register`). These operations are typically performed on a container builder instance.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/definitions.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\DependencyInjection\\Definition;\n\n// finds out if there is an \"app.mailer\" definition\n$container->hasDefinition('app.mailer');\n// finds out if there is an \"app.mailer\" definition or alias\n$container->has('app.mailer');\n\n// gets the \"app.user_config_manager\" definition\n$definition = $container->getDefinition('app.user_config_manager');\n// gets the definition with the \"app.user_config_manager\" ID or alias\n$definition = $container->findDefinition('app.user_config_manager');\n\n// adds a new \"app.number_generator\" definition\n$definition = new Definition(\\App\\NumberGenerator::class);\n$container->setDefinition('app.number_generator', $definition);\n\n// shortcut for the previous method\n$container->register('app.number_generator', \\App\\NumberGenerator::class);\n```\n\n----------------------------------------\n\nTITLE: Using id Option in MapEntity\nDESCRIPTION: Demonstrates configuring the id option in MapEntity to specify which route parameter should be used as the entity's primary key for fetching.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine.rst#2025-04-22_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n#[Route('/product/{product_id}')]\npublic function show(\n    #[MapEntity(id: 'product_id')]\n    Product $product\n): Response\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Form Validation with Constraints in Standalone PHP\nDESCRIPTION: Demonstrates how to add validation constraints to form fields in standalone PHP code. Shows how to apply both single and multiple constraints to different fields.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/form.rst#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\DateType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\TextType;\nuse Symfony\\Component\\Validator\\Constraints\\NotBlank;\nuse Symfony\\Component\\Validator\\Constraints\\Type;\n\n$form = $formFactory->createBuilder()\n    ->add('task', TextType::class, [\n        'constraints' => new NotBlank(),\n    ])\n    ->add('dueDate', DateType::class, [\n        'constraints' => [\n            new NotBlank(),\n            new Type(\\DateTime::class),\n        ],\n    ])\n    ->getForm();\n```\n\n----------------------------------------\n\nTITLE: Defining Process Commands using Argument Arrays in PHP\nDESCRIPTION: Shows the recommended way to define commands by passing an array of arguments to the `Process` constructor. This method handles argument escaping automatically, prevents shell injection vulnerabilities, and allows seamless signal handling, improving portability and security. Depends on the Symfony Process component.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/process.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$process = new Process(['/path/command', '--option', 'argument', 'etc.']);\n$process = new Process(['/path/to/php', '--define', 'memory_limit=1024M', '/path/to/script.php']);\n```\n\n----------------------------------------\n\nTITLE: Defining an Interface for Abstraction in PHP\nDESCRIPTION: This snippet defines a PHP interface `TransformerInterface` within the `App\\Util` namespace. It declares a single method signature `transform(string $value): string`. Using interfaces for type-hinting promotes loose coupling and adherence to dependency inversion principles.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/autowiring.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// src/Util/TransformerInterface.php\nnamespace App\\Util;\n\ninterface TransformerInterface\n{\n    public function transform(string $value): string;\n}\n```\n\n----------------------------------------\n\nTITLE: File Upload Form Template\nDESCRIPTION: Twig template for rendering the file upload form with the brochure field.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/controller/upload_file.rst#2025-04-22_snippet_2\n\nLANGUAGE: html+twig\nCODE:\n```\n{# templates/product/new.html.twig #}\n<h1>Adding a new product</h1>\n\n{{ form_start(form) }}\n    {# ... #}\n\n    {{ form_row(form.brochure) }}\n{{ form_end(form) }}\n```\n\n----------------------------------------\n\nTITLE: Creating a Doctrine Entity Class in Symfony\nDESCRIPTION: PHP code for a Doctrine entity class representing a Product, with attributes for ORM mapping.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Product.php\nnamespace App\\Entity;\n\nuse App\\Repository\\ProductRepository;\nuse Doctrine\\ORM\\Mapping as ORM;\n\n#[ORM\\Entity(repositoryClass: ProductRepository::class)]\nclass Product\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private ?int $id = null;\n\n    #[ORM\\Column(length: 255)]\n    private ?string $name = null;\n\n    #[ORM\\Column]\n    private ?int $price = null;\n\n    public function getId(): ?int\n    {\n        return $this->id;\n    }\n\n    // ... getter and setter methods\n}\n```\n\n----------------------------------------\n\nTITLE: Indexing Service Collection with PHP Attributes\nDESCRIPTION: Shows how to index a service collection using PHP attributes in Symfony. It uses the AutowireLocator attribute with an indexAttribute option.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/service_subscribers_locators.rst#2025-04-22_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n// src/CommandBus.php\nnamespace App;\n\nuse Psr\\Container\\ContainerInterface;\nuse Symfony\\Component\\DependencyInjection\\Attribute\\AutowireLocator;\n\nclass CommandBus\n{\n    public function __construct(\n        #[AutowireLocator('app.handler', indexAttribute: 'key')]\n        private ContainerInterface $locator,\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding CSRF Protection to Symfony Authenticator\nDESCRIPTION: Example of a custom authenticator that adds CSRF token validation using CsrfTokenBadge with the Passport system.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/custom_authenticator.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// src/Service/LoginAuthenticator.php\nnamespace App\\Service;\n\n// ...\nuse Symfony\\Component\\Security\\Http\\Authenticator\\AbstractAuthenticator;\nuse Symfony\\Component\\Security\\Http\\Authenticator\\Passport\\Badge\\CsrfTokenBadge;\nuse Symfony\\Component\\Security\\Http\\Authenticator\\Passport\\Badge\\UserBadge;\nuse Symfony\\Component\\Security\\Http\\Authenticator\\Passport\\Passport;\n\nclass LoginAuthenticator extends AbstractAuthenticator\n{\n    public function authenticate(Request $request): Passport\n    {\n        $password = $request->getPayload()->get('password');\n        $username = $request->getPayload()->get('username');\n        $csrfToken = $request->getPayload()->get('csrf_token');\n\n        // ...\n\n        return new Passport(\n            new UserBadge($username),\n            new PasswordCredentials($password),\n            [new CsrfTokenBadge('login', $csrfToken)]\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Validation Metadata Loaders in Symfony Validator (PHP)\nDESCRIPTION: Demonstrates configuring the ValidatorBuilder to use several loaders at once: attribute mapping, static method, and XML file. Shows combined usage where constraints may be sourced from attributes, static methods, or external files, with the loader chain determining precedence. Requires symfony/validator (and symfony/yaml or symfony/xml as appropriate for file formats). This setup allows comprehensive and flexible metadata management for complex validation rules.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/validator/resources.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Validator\\Validation;\\n\\n$validator = Validation::createValidatorBuilder()\\n    ->enableAttributeMapping()\\n    ->addMethodMapping('loadValidatorMetadata')\\n    ->addXmlMapping('validator/validation.xml')\\n    ->getValidator();\n```\n\n----------------------------------------\n\nTITLE: CommandBus with AutowireIterator for Tagged Services\nDESCRIPTION: Implementation showing how to use AutowireIterator to collect and iterate over tagged command handlers.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/service_subscribers_locators.rst#2025-04-22_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nnamespace App;\n\nuse App\\CommandHandler\\BarHandler;\nuse App\\CommandHandler\\FooHandler;\nuse Psr\\Container\\ContainerInterface;\nuse Symfony\\Component\\DependencyInjection\\Attribute\\AutowireIterator;\n\nclass CommandBus\n{\n    public function __construct(\n        #[AutowireIterator('command_handler')]\n        private iterable $handlers,\n    ) {\n    }\n\n    public function handle(Command $command): mixed\n    {\n        foreach ($this->handlers as $handler) {\n            if ($handler->supports($command)) {\n                return $handler->handle($command);\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dumping Variables Using dump() in PHP\nDESCRIPTION: This PHP snippet shows how to use the dump() function provided by Symfony VarDumper to inspect variables during debugging. It requires autoloading via Composer and works for any PHP variable, displaying a colored and context-sensitive dump; the dump() function also returns the variable for further chaining. Prerequisites: symfony/var-dumper should be installed and autoloaded. The input is any PHP variable, and the output is an HTML or CLI-formatted structured dump.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/var_dumper.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nrequire __DIR__.'/vendor/autoload.php';\n\n// create a variable, which could be anything!\n$someVar = ...;\n\ndump($someVar);\n\n// dump() returns the passed value, so you can dump an object and keep using it\ndump($someObject)->someMethod();\n```\n\n----------------------------------------\n\nTITLE: Testing Symfony Console Commands\nDESCRIPTION: Shows how to test Symfony console commands using the CommandTester class. This example sets up a test case for a CreateUserCommand, executes it with test input, and asserts the expected output.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/console.rst#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n// tests/Command/CreateUserCommandTest.php\nnamespace App\\Tests\\Command;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Console\\Application;\nuse Symfony\\Bundle\\FrameworkBundle\\Test\\KernelTestCase;\nuse Symfony\\Component\\Console\\Tester\\CommandTester;\n\nclass CreateUserCommandTest extends KernelTestCase\n{\n    public function testExecute(): void\n    {\n        self::bootKernel();\n        $application = new Application(self::$kernel);\n\n        $command = $application->find('app:create-user');\n        $commandTester = new CommandTester($command);\n        $commandTester->execute([\n            // pass arguments to the helper\n            'username' => 'Wouter',\n\n            // prefix the key with two dashes when passing options,\n            // e.g: '--some-option' => 'option_value',\n            // use brackets for testing array value,\n            // e.g: '--some-option' => ['option_value'],\n        ]);\n\n        $commandTester->assertCommandIsSuccessful();\n\n        // the output of the command in the console\n        $output = $commandTester->getDisplay();\n        $this->assertStringContainsString('Username: Wouter', $output);\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Front Controller in Symfony\nDESCRIPTION: Shows how to create a simple front controller that handles all incoming requests, determines the appropriate response based on the requested path, and sends the response.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/introduction/http_fundamentals.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// index.php\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\n$request = Request::createFromGlobals();\n$path = $request->getPathInfo(); // the URI path being requested\n\nif (in_array($path, ['', '/'])) {\n    $response = new Response('Welcome to the homepage.');\n} elseif ('/contact' === $path) {\n    $response = new Response('Contact us');\n} else {\n    $response = new Response('Page not found.', Response::HTTP_NOT_FOUND);\n}\n$response->send();\n```\n\n----------------------------------------\n\nTITLE: Configuring Symfony Security using ConfigBuilder in PHP\nDESCRIPTION: Demonstrates how to use a ConfigBuilder object to configure Symfony security settings including firewall rules, role hierarchy, and access control. The ConfigBuilder provides a fluent interface with IDE autocompletion support.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration.rst#2025-04-22_snippet_41\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/security.php\nuse Symfony\\Config\\SecurityConfig;\n\nreturn static function (SecurityConfig $security): void {\n    $security->firewall('main')\n        ->pattern('^/*')\n        ->lazy(true)\n        ->security(false);\n\n    $security\n        ->roleHierarchy('ROLE_ADMIN', ['ROLE_USER'])\n        ->roleHierarchy('ROLE_SUPER_ADMIN', ['ROLE_ADMIN', 'ROLE_ALLOWED_TO_SWITCH'])\n        ->accessControl()\n            ->path('^/user')\n            ->roles('ROLE_USER');\n\n    $security->accessControl(['path' => '^/admin', 'roles' => 'ROLE_ADMIN']);\n};\n```\n\n----------------------------------------\n\nTITLE: Generating Database Migration in Symfony\nDESCRIPTION: Command to generate a migration file based on entity changes. The migration system compares entities with the current database state and generates the necessary SQL.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine.rst#2025-04-22_snippet_4\n\nLANGUAGE: terminal\nCODE:\n```\n$ php bin/console make:migration\n```\n\n----------------------------------------\n\nTITLE: Using HTML Sanitizer in Standalone PHP\nDESCRIPTION: Shows how to use the HTML Sanitizer in a standalone PHP application without the Symfony framework.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/html_sanitizer.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\HtmlSanitizer\\HtmlSanitizer;\nuse Symfony\\Component\\HtmlSanitizer\\HtmlSanitizerConfig;\n\n$htmlSanitizer = new HtmlSanitizer(\n    (new HtmlSanitizerConfig())->allowSafeElements()\n);\n\n$unsafePostContents = ...;\n\n$safePostContents = $htmlSanitizer->sanitize($unsafePostContents);\n// ... proceed using the safe HTML\n```\n\n----------------------------------------\n\nTITLE: Switching User Using URL Parameter (Text)\nDESCRIPTION: Demonstrates how to trigger user impersonation in Symfony by adding the _switch_user parameter to the query string of a URL, with the username as its value. Requires previously enabling switch_user in security configuration and ROLE_ALLOWED_TO_SWITCH. The input is the target user's identifier (username), and the output is an impersonated session.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/impersonating_user.rst#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nhttp://example.com/somewhere?_switch_user=thomas\n```\n\n----------------------------------------\n\nTITLE: Hydrating Existing Objects with Properties Using Hydrator - PHP\nDESCRIPTION: Populates existing PHP objects with properties (including those from parent classes or internal collections) using Symfony\\Component\\VarExporter\\Hydrator. It sets object properties post-instantiation, supporting special notations for parent/private members and built-in types. Inputs are an object instance, property map, and optional parent class property maps; output is the same object with all properties hydrated. Depends on symfony/var-exporter.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/var_exporter.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\VarExporter\\Hydrator;\n\n$object = new Foo();\nHydrator::hydrate($object, ['propertyName' => $propertyValue]);\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\VarExporter\\Hydrator;\n\n$object = new Foo();\nHydrator::hydrate($object, [], [\n    Bar::class => ['privateBarProperty' => $propertyValue],\n]);\n\n// alternatively, you can use the special \"\\0Bar\\0privateBarProperty\" syntax\nHydrator::hydrate($object, [\"\\0Bar\\0privateBarProperty\" => $propertyValue]);\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\VarExporter\\Hydrator;\n\n// creates an SplObjectHash where $info1 is associated with $object1, etc.\n$storage = new SplObjectStorage();\nHydrator::hydrate($storage, [\n    \"\\0\" => [$object1, $info1, $object2, $info2...],\n]);\n\n// creates an ArrayObject populated with $inputArray\n$arrayObject = new ArrayObject();\nHydrator::hydrate($arrayObject, [\n    \"\\0\" => [$inputArray],\n]);\n```\n\n----------------------------------------\n\nTITLE: Method Behavior Customization with Custom Events\nDESCRIPTION: Implementation of a method that dispatches custom events before and after its core functionality, allowing listeners to modify inputs and outputs without requiring inheritance.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/event_dispatcher.rst#2025-04-22_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nclass CustomMailer\n{\n    // ...\n\n    public function send(string $subject, string $message): mixed\n    {\n        // dispatch an event before the method\n        $event = new BeforeSendMailEvent($subject, $message);\n        $this->dispatcher->dispatch($event, 'mailer.pre_send');\n\n        // get $subject and $message from the event, they may have been modified\n        $subject = $event->getSubject();\n        $message = $event->getMessage();\n\n        // the real method implementation is here\n        $returnValue = ...;\n\n        // do something after the method\n        $event = new AfterSendMailEvent($returnValue);\n        $this->dispatcher->dispatch($event, 'mailer.post_send');\n\n        return $event->getReturnValue();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Additional Route Methods\nDESCRIPTION: Example of adding another route with specific HTTP method constraints.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/quick_tour/the_big_picture.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/DefaultController.php\nnamespace App\\Controller;\n\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Attribute\\Route;\n\nclass DefaultController\n{\n    // ...\n\n    #[Route('/simplicity', methods: ['GET'])]\n    public function simple(): Response\n    {\n        return new Response('Simple! Easy! Great!');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating and Converting ULIDs in Symfony\nDESCRIPTION: Shows how to generate ULIDs using various methods and convert them between different formats using Symfony's Ulid class.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/uid.rst#2025-04-22_snippet_18\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Uid\\Ulid;\n\n$ulid = new Ulid();  // e.g. 01AN4Z07BY79KA1307SR9X4MV3\n\n// all the following examples would generate the same Ulid object\n$ulid = Ulid::fromString('01E439TP9XJZ9RPFH3T1PYBCR8');\n$ulid = Ulid::fromBinary(\"\\x01\\x71\\x06\\x9d\\x59\\x3d\\x97\\xd3\\x8b\\x3e\\x23\\xd0\\x6d\\xe5\\xb3\\x08\");\n$ulid = Ulid::fromBase32('01E439TP9XJZ9RPFH3T1PYBCR8');\n$ulid = Ulid::fromBase58('1BKocMc5BnrVcuq2ti4Eqm');\n$ulid = Ulid::fromRfc4122('0171069d-593d-97d3-8b3e-23d06de5b308');\n\n$ulid = Ulid::fromString('01E439TP9XJZ9RPFH3T1PYBCR8');\n\n$ulid->toBinary();  // string(16) \"\\x01\\x71\\x06\\x9d\\x59\\x3d\\x97\\xd3\\x8b\\x3e\\x23\\xd0\\x6d\\xe5\\xb3\\x08\"\n$ulid->toBase32();  // string(26) \"01E439TP9XJZ9RPFH3T1PYBCR8\"\n$ulid->toBase58();  // string(22) \"1BKocMc5BnrVcuq2ti4Eqm\"\n$ulid->toRfc4122(); // string(36) \"0171069d-593d-97d3-8b3e-23d06de5b308\"\n$ulid->toHex();     // string(34) \"0x0171069d593d97d38b3e23d06de5b308\"\n```\n\n----------------------------------------\n\nTITLE: Defining the HttpKernelInterface Contract - PHP\nDESCRIPTION: Declares the HttpKernelInterface responsible for transforming an HTTP Request into a Response in event-driven applications. This interface forms the contract for any class that operates as an HTTP kernel, exposing a handle() method that accepts a Request, an optional type indicator, and a catch flag. The method's expected output is always a Response, with concrete implementations defining lifecycle steps, integrating with other framework services, and event dispatching.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/http_kernel.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace Symfony\\Component\\HttpKernel;\n\nuse Symfony\\Component\\HttpFoundation\\Request;\n\ninterface HttpKernelInterface\n{\n    // ...\n\n    /**\n     * @return Response A Response instance\n     */\n    public function handle(\n        Request $request,\n        int $type = self::MAIN_REQUEST,\n        bool $catch = true\n    ): Response;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Unmapped Form Fields in Symfony Controllers\nDESCRIPTION: This snippet demonstrates how to access and set data for unmapped form fields in a Symfony controller. It shows getting and setting data for an 'agreeTerms' field.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/forms.rst#2025-04-22_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n$form->get('agreeTerms')->getData();\n$form->get('agreeTerms')->setData(true);\n```\n\n----------------------------------------\n\nTITLE: Handling Arrays of Objects in Serialization and Deserialization\nDESCRIPTION: Demonstrates how to serialize and deserialize arrays of objects. This is useful when working with collections of data.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer.rst#2025-04-22_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Model\\Person;\n\n// ...\n$person1 = new Person('Jane Doe', 39, false);\n$person2 = new Person('John Smith', 52, true);\n\n$persons = [$person1, $person2];\n$JsonContent = $serializer->serialize($persons, 'json');\n\n// $jsonContent contains [{\"name\":\"Jane Doe\",\"age\":39,\"sportsman\":false},{\"name\":\"John Smith\",\"age\":52,\"sportsman\":true}]\n\n// ...\n\n$jsonData = ...; // the serialized JSON data from the previous example\n$persons = $serializer->deserialize($JsonData, Person::class.'[]', 'json');\n```\n\n----------------------------------------\n\nTITLE: Validating Console Question Answers with Custom Logic in Symfony - PHP\nDESCRIPTION: This snippet validates user input in Symfony Console questions using a custom validator closure, ensuring the bundle name ends with 'Bundle'. The validator throws an exception if the condition fails, and setMaxAttempts(2) limits retries to two. It requires symfony/console and proper setup of Question, InputInterface, and OutputInterface. The input is a string and validation errors are communicated via RuntimeException.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/helpers/questionhelper.rst#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Console\\Question\\Question;\n\n// ...\npublic function execute(InputInterface $input, OutputInterface $output): int\n{\n    // ...\n    $helper = $this->getHelper('question');\n\n    $question = new Question('Please enter the name of the bundle', 'AcmeDemoBundle');\n    $question->setValidator(function (string $answer): string {\n        if (!is_string($answer) || 'Bundle' !== substr($answer, -6)) {\n            throw new \\RuntimeException(\n                'The name of the bundle should be suffixed with \\'Bundle\\''\n            );\n        }\n\n        return $answer;\n    });\n    $question->setMaxAttempts(2);\n\n    $bundleName = $helper->ask($input, $output, $question);\n\n    // ... do something with the bundleName\n\n    return Command::SUCCESS;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Securing Controller Actions with Expression Language using denyAccessUnlessGranted\nDESCRIPTION: Shows how to use the `denyAccessUnlessGranted()` controller helper method with a Symfony `Expression` object to enforce complex access control rules within controller actions. This provides an alternative to attributes for defining security constraints. The examples check for multiple roles or combine role checks with custom user method calls. Requires Symfony's Security and ExpressionLanguage components.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/expressions.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/MyController.php\nnamespace App\\Controller;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\ExpressionLanguage\\Expression;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass MyController extends AbstractController\n{\n    public function show(): Response\n    {\n        $this->denyAccessUnlessGranted(new Expression(\n            'is_granted(\"ROLE_ADMIN\") or is_granted(\"ROLE_MANAGER\")'\n        ));\n\n        // ...\n    }\n\n    public function edit(): Response\n    {\n        $this->denyAccessUnlessGranted(new Expression(\n            '\"ROLE_ADMIN\" in role_names or (is_authenticated() and user.isSuperAdmin())'\n        ));\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Console Application in PHP\nDESCRIPTION: Demonstrates how to set up a basic console application using the Symfony Console component. It includes autoloading, creating an Application instance, and running the application.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n#!/usr/bin/env php\n<?php\n// application.php\n\nrequire __DIR__.'/vendor/autoload.php';\n\nuse Symfony\\Component\\Console\\Application;\n\n$application = new Application();\n\n// ... register commands\n\n$application->run();\n```\n\n----------------------------------------\n\nTITLE: Registering Commands in Symfony Console Application\nDESCRIPTION: Shows how to register commands in a Symfony Console application using the add() method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// ...\n$application->add(new GenerateAdminCommand());\n```\n\n----------------------------------------\n\nTITLE: Implementing a Session Request Processor in PHP for Monolog\nDESCRIPTION: A custom Monolog processor that adds a unique session/request token to each log record. This processor implements ProcessorInterface and extracts the session ID to create a unique token for tracking requests in logs.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/logging/processors.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Logger/SessionRequestProcessor.php\nnamespace App\\Logger;\n\nuse Monolog\\LogRecord;\nuse Monolog\\Processor\\ProcessorInterface;\nuse Symfony\\Component\\HttpFoundation\\Exception\\SessionNotFoundException;\nuse Symfony\\Component\\HttpFoundation\\RequestStack;\n\nclass SessionRequestProcessor implements ProcessorInterface\n{\n    public function __construct(\n        private RequestStack $requestStack\n    ) {\n    }\n\n    // method is called for each log record; optimize it to not hurt performance\n    public function __invoke(LogRecord $record): LogRecord\n    {\n        try {\n            $session = $this->requestStack->getSession();\n        } catch (SessionNotFoundException $e) {\n            return $record;\n        }\n        if (!$session->isStarted()) {\n            return $record;\n        }\n\n        $sessionId = substr($session->getId(), 0, 8) ?: '????????';\n\n        $record->extra['token'] = $sessionId.'-'.substr(uniqid('', true), -8);\n\n        return $record;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Request Object from PHP Globals using createFromGlobals()\nDESCRIPTION: Illustrates the common method `Request::createFromGlobals()` to instantiate a Symfony `Request` object based on the current PHP global variables like `$_GET`, `$_POST`, etc. This is a convenient way to capture the incoming HTTP request details.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\HttpFoundation\\Request;\n\n$request = Request::createFromGlobals();\n```\n\n----------------------------------------\n\nTITLE: Conditionally Outputting Messages Based on Verbosity Level in Symfony Commands (PHP)\nDESCRIPTION: Illustrates how to conditionally display messages within a Symfony command's `execute` method based on the active verbosity level. It uses the `OutputInterface` object (`$output`) to check the level with methods like `isVerbose()` (and others like `isSilent()`, `isQuiet()`, `isVeryVerbose()`, `isDebug()`). Alternatively, it shows passing a verbosity level constant (e.g., `OutputInterface::VERBOSITY_VERBOSE`) as the second argument to `writeln()`. Requires `InputInterface` and `OutputInterface` dependencies.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/console/verbosity.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// ...\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\nclass CreateUserCommand extends Command\n{\n    // ...\n\n    public function execute(InputInterface $input, OutputInterface $output): int\n    {\n        $user = new User(...);\n\n        $output->writeln([\n            'Username: '.$input->getArgument('username'),\n            'Password: '.$input->getArgument('password'),\n        ]);\n\n        // available methods: ->isSilent(), ->isQuiet(), ->isVerbose(), ->isVeryVerbose(), ->isDebug()\n        if ($output->isVerbose()) {\n            $output->writeln('User class: '.get_class($user));\n        }\n\n        // alternatively you can pass the verbosity level PHP constant to writeln()\n        $output->writeln(\n            'Will only be printed in verbose mode or higher',\n            OutputInterface::VERBOSITY_VERBOSE\n        );\n\n        return Command::SUCCESS;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Constraint Validator in PHP\nDESCRIPTION: This code demonstrates how to create a custom constraint validator class that extends ConstraintValidator. It includes error handling and the actual validation logic.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/validation/custom_constraint.rst#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n// src/Validator/ContainsAlphanumericValidator.php\nnamespace App\\Validator;\n\nuse Symfony\\Component\\Validator\\Constraint;\nuse Symfony\\Component\\Validator\\ConstraintValidator;\nuse Symfony\\Component\\Validator\\Exception\\UnexpectedTypeException;\nuse Symfony\\Component\\Validator\\Exception\\UnexpectedValueException;\n\nclass ContainsAlphanumericValidator extends ConstraintValidator\n{\n    public function validate(mixed $value, Constraint $constraint): void\n    {\n        if (!$constraint instanceof ContainsAlphanumeric) {\n            throw new UnexpectedTypeException($constraint, ContainsAlphanumeric::class);\n        }\n\n        if (null === $value || '' === $value) {\n            return;\n        }\n\n        if (!is_string($value)) {\n            throw new UnexpectedValueException($value, 'string');\n        }\n\n        if ('strict' === $constraint->mode) {\n            // ...\n        }\n\n        if (preg_match('/^[a-zA-Z0-9]+$/', $value, $matches)) {\n            return;\n        }\n\n        $this->context->buildViolation($constraint->message)\n            ->setParameter('{{ string }}', $value)\n            ->addViolation();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending AbstractController in Symfony PHP\nDESCRIPTION: This code snippet shows how to modify a controller class to extend Symfony's AbstractController, which provides access to helper methods like render() and generateUrl().\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/controller.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/LuckyController.php\nnamespace App\\Controller;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\n\nclass LuckyController extends AbstractController\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Differentiating isRequired and isMissing with OptionsResolver in PHP\nDESCRIPTION: This PHP code illustrates the distinction between `isRequired` and `isMissing`. `isRequired('host')` remains true even after setting a default, as it reflects the configuration requirement. `isMissing('host')` initially returns true but becomes false after `setDefault('host', ...)` is called, indicating the requirement is now satisfied by a default value.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/options_resolver.rst#2025-04-22_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n// ...\nclass Mailer\n{\n    // ...\n\n    public function configureOptions(OptionsResolver $resolver): void\n    {\n        // ...\n        $resolver->setRequired('host');\n    }\n}\n\n// ...\nclass GoogleMailer extends Mailer\n{\n    public function configureOptions(OptionsResolver $resolver): void\n    {\n        parent::configureOptions($resolver);\n\n        $resolver->isRequired('host');\n        // => true\n\n        $resolver->isMissing('host');\n        // => true\n\n        $resolver->setDefault('host', 'smtp.google.com');\n\n        $resolver->isRequired('host');\n        // => true\n\n        $resolver->isMissing('host');\n        // => false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Business Rules Using Expression Language Syntax\nDESCRIPTION: Demonstrates practical examples of expressions written using the ExpressionLanguage syntax. These examples show how to define conditions for dynamic configuration, such as granting special prices, promoting articles, or sending alerts based on object properties and methods. Assumes variables like `user`, `article`, and `product` are available in the evaluation context.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/expression_language.rst#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n# Get the special price if\nuser.getGroup() in ['good_customers', 'collaborator']\n\n# Promote article to the homepage when\narticle.commentCount > 100 and article.category not in [\"misc\"]\n\n# Send an alert when\nproduct.stock < 15\n```\n\n----------------------------------------\n\nTITLE: Configuring Exception Handling in Symfony Framework (PHP)\nDESCRIPTION: This PHP script maps BadRequestHttpException to a debug log level, status code 422, and a custom log channel by chaining the respective methods on the FrameworkConfig object. Allows handling of exception behavior programmatically. Dependencies include Symfony\\Config\\FrameworkConfig and the relevant exception class.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_35\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/exceptions.php\\nuse Symfony\\Component\\HttpKernel\\Exception\\BadRequestHttpException;\\nuse Symfony\\Config\\FrameworkConfig;\\n\\nreturn static function (FrameworkConfig $framework): void {\\n    $framework->exception(BadRequestHttpException::class)\\n        ->logLevel('debug')\\n        ->statusCode(422)\\n        ->logChannel('custom_channel')\\n    ;\\n};\n```\n\n----------------------------------------\n\nTITLE: Defining FileUploader Service in PHP\nDESCRIPTION: This PHP configuration defines a service for the FileUploader class, specifying the target directory as an argument using the ContainerConfigurator.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/controller/upload_file.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nuse App\\Service\\FileUploader;\n\nreturn static function (ContainerConfigurator $container): void {\n    $services = $container->services();\n\n    $services->set(FileUploader::class)\n        ->arg('$targetDirectory', '%brochures_directory%')\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Converting Non-Lazy to Lazy Classes with LazyGhostTrait - PHP\nDESCRIPTION: Extends a concrete class with LazyGhostTrait to add on-demand property initialization. Initialization logic is supplied via a closure and is triggered only when the object or its properties are accessed. Requires the base class to not be abstract or internal; depends on symfony/var-exporter. Input is instantiation via createLazyGhost; output is a fully functional lazy object.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/var_exporter.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Hash;\n\nuse Symfony\\Component\\VarExporter\\LazyGhostTrait;\n\nclass HashProcessor\n{\n    public readonly string $hash;\n\n    public function __construct(array $data)\n    {\n        $this->populateHash($data);\n    }\n\n    private function populateHash(array $data): void\n    {\n        // ...\n    }\n\n    public function validateHash(): bool\n    {\n        // ...\n    }\n}\n\nclass LazyHashProcessor extends HashProcessor\n{\n    use LazyGhostTrait;\n}\n\n$processor = LazyHashProcessor::createLazyGhost(initializer: function (HashProcessor $instance): void {\n    // Do any operation you need here: call setters, getters, methods to validate the hash, etc.\n    $data = /** Retrieve required data to compute the hash */;\n    $instance->__construct(...$data);\n    $instance->validateHash();\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Task Form with Prototype for Dynamic Tag Addition in Twig\nDESCRIPTION: Updates the Twig template to include the data-prototype attribute for dynamic tag addition and adds a button to trigger new tag creation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/form_collections.rst#2025-04-22_snippet_7\n\nLANGUAGE: Twig\nCODE:\n```\n{# templates/task/new.html.twig #}\n\n{# ... #}\n\n<ul class=\"tags\"\n    data-index=\"{{ form.tags|length > 0 ? form.tags|last.vars.name + 1 : 0 }}\"\n    data-prototype=\"{{ form_widget(form.tags.vars.prototype)|e('html_attr') }}\"\n></ul>\n\n<button type=\"button\" class=\"add_item_link\" data-collection-holder-class=\"tags\">Add a tag</button>\n\n{# ... #}\n```\n\n----------------------------------------\n\nTITLE: Setting Email Message Contents\nDESCRIPTION: Examples of setting the text and HTML contents of email messages using either string content or file streams for more complex or pre-rendered content.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n$email = (new Email())\n    // ...\n    // simple contents defined as a string\n    ->text('Lorem ipsum...')\n    ->html('<p>Lorem ipsum...</p>')\n\n    // attach a file stream\n    ->text(fopen('/path/to/emails/user_signup.txt', 'r'))\n    ->html(fopen('/path/to/emails/user_signup.html', 'r'))\n;\n```\n\n----------------------------------------\n\nTITLE: Defining Non-Shared Services using PHP Attributes in Symfony\nDESCRIPTION: Shows how to use the Autoconfigure attribute with shared=false to define a non-shared service. This approach uses PHP 8 attributes to configure the service behavior directly in the class definition.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/shared.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/SomeNonSharedService.php\nnamespace App;\n\nuse Symfony\\Component\\DependencyInjection\\Attribute\\Autoconfigure;\n\n#[Autoconfigure(shared: false)]\nclass SomeNonSharedService\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Product Controller with File Upload Handling\nDESCRIPTION: Controller implementation for processing file uploads, including file naming, validation, and storage.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/controller/upload_file.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Controller;\n\nuse App\\Entity\\Product;\nuse App\\Form\\ProductType;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;\nuse Symfony\\Component\\HttpFoundation\\File\\Exception\\FileException;\nuse Symfony\\Component\\HttpFoundation\\File\\UploadedFile;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Attribute\\Route;\nuse Symfony\\Component\\String\\Slugger\\SluggerInterface;\n\nclass ProductController extends AbstractController\n{\n    #[Route('/product/new', name: 'app_product_new')]\n    public function new(\n        Request $request,\n        SluggerInterface $slugger,\n        #[Autowire('%kernel.project_dir%/public/uploads/brochures')] string $brochuresDirectory\n    ): Response\n    {\n        $product = new Product();\n        $form = $this->createForm(ProductType::class, $product);\n        $form->handleRequest($request);\n\n        if ($form->isSubmitted() && $form->isValid()) {\n            /** @var UploadedFile $brochureFile */\n            $brochureFile = $form->get('brochure')->getData();\n\n            if ($brochureFile) {\n                $originalFilename = pathinfo($brochureFile->getClientOriginalName(), PATHINFO_FILENAME);\n                $safeFilename = $slugger->slug($originalFilename);\n                $newFilename = $safeFilename.'-'.uniqid().'.'.$brochureFile->guessExtension();\n\n                try {\n                    $brochureFile->move($brochuresDirectory, $newFilename);\n                } catch (FileException $e) {\n                    // ... handle exception if something happens during file upload\n                }\n\n                $product->setBrochureFilename($newFilename);\n            }\n\n            return $this->redirectToRoute('app_product_list');\n        }\n\n        return $this->render('product/new.html.twig', [\n            'form' => $form,\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Hashing and Verifying Passwords in a Symfony Controller (PHP)\nDESCRIPTION: This PHP code snippet demonstrates using the `UserPasswordHasherInterface` within a Symfony controller. It shows injecting the service and using its `hashPassword` method to hash a new user's password during registration and the `isPasswordValid` method to verify a user's password, for example, before confirming a deletion.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/passwords.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/RegistrationController.php\nnamespace App\\Controller;\n\n// ...\nuse Symfony\\Component\\HttpKernel\\Exception\\AccessDeniedHttpException;\nuse Symfony\\Component\\PasswordHasher\\Hasher\\UserPasswordHasherInterface;\n\nclass UserController extends AbstractController\n{\n    public function registration(UserPasswordHasherInterface $passwordHasher): Response\n    {\n        // ... e.g. get the user data from a registration form\n        $user = new User(...);\n        $plaintextPassword = ...;\n\n        // hash the password (based on the security.yaml config for the $user class)\n        $hashedPassword = $passwordHasher->hashPassword(\n            $user,\n            $plaintextPassword\n        );\n        $user->setPassword($hashedPassword);\n\n        // ...\n    }\n\n    public function delete(UserPasswordHasherInterface $passwordHasher, UserInterface $user): void\n    {\n        // ... e.g. get the password from a \"confirm deletion\" dialog\n        $plaintextPassword = ...;\n\n        if (!$passwordHasher->isPasswordValid($user, $plaintextPassword)) {\n            throw new AccessDeniedHttpException();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Query String to DTO in Symfony Controller\nDESCRIPTION: Shows how to map the entire query string to a Data Transfer Object (DTO) using the MapQueryString attribute in a Symfony controller.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/controller.rst#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Model\\UserDto;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Attribute\\MapQueryString;\n\n// ...\n\npublic function dashboard(\n    #[MapQueryString] UserDto $userDto\n): Response\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Template Rendering with Error Handling\nDESCRIPTION: Core template rendering implementation with error handling for 404 and 500 responses. Uses URL matching and template rendering through a callback function.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/create_framework/templating.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ntry {\n    $request->attributes->add($matcher->match($request->getPathInfo()));\n    $response = call_user_func('render_template', $request);\n} catch (Routing\\Exception\\ResourceNotFoundException $exception) {\n    $response = new Response('Not Found', 404);\n} catch (Exception $exception) {\n    $response = new Response('An error occurred', 500);\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Services in Symfony PHP Controller\nDESCRIPTION: This code demonstrates how to use dependency injection to fetch services in a Symfony controller by type-hinting arguments in the controller method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/controller.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Component\\HttpFoundation\\Response;\n// ...\n\n#[Route('/lucky/number/{max}')]\npublic function number(int $max, LoggerInterface $logger): Response\n{\n    $logger->info('We are logging!');\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using #[Required] for Setter Injection in PHP\nDESCRIPTION: Demonstrates how to use the #[Required] attribute to autowire dependencies through setter methods or public typed properties.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/autowiring.rst#2025-04-22_snippet_19\n\nLANGUAGE: PHP\nCODE:\n```\n// src/Util/Rot13Transformer.php\nnamespace App\\Util;\n\nuse Symfony\\Contracts\\Service\\Attribute\\Required;\n\nclass Rot13Transformer\n{\n    private LoggerInterface $logger;\n\n    #[Required]\n    public function setLogger(LoggerInterface $logger): void\n    {\n        $this->logger = $logger;\n    }\n\n    public function transform($value): string\n    {\n        $this->logger->info('Transforming '.$value);\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Event Listeners/Subscribers with Symfony DI Container\nDESCRIPTION: Demonstrates configuring the Symfony Dependency Injection Container to automatically register event listeners and subscribers. This requires adding the `RegisterListenersPass` compiler pass to the container builder and tagging service definitions with `kernel.event_listener` (specifying event and method) or `kernel.event_subscriber`.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/event_dispatcher.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\DependencyInjection\\ContainerBuilder;\\nuse Symfony\\Component\\DependencyInjection\\ParameterBag\\ParameterBag;\\nuse Symfony\\Component\\EventDispatcher\\DependencyInjection\\RegisterListenersPass;\\nuse Symfony\\Component\\EventDispatcher\\EventDispatcher;\\n\\n$container = new ContainerBuilder(new ParameterBag());\\n// register the compiler pass that handles the 'kernel.event_listener'\\n// and 'kernel.event_subscriber' service tags\\n$container->addCompilerPass(new RegisterListenersPass());\\n\\n$container->register('event_dispatcher', EventDispatcher::class);\\n\\n// registers an event listener\\n$container->register('listener_service_id', \\AcmeListener::class)\\n    ->addTag('kernel.event_listener', [\\n        'event' => 'acme.foo.action',\\n        'method' => 'onFooAction',\\n    ]);\\n\\n// registers an event subscriber\\n$container->register('subscriber_service_id', \\AcmeSubscriber::class)\\n    ->addTag('kernel.event_subscriber');\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Form in a Symfony Controller (PHP)\nDESCRIPTION: Demonstrates creating a simple task form within a Symfony controller action using the `createFormBuilder` shortcut method inherited from `AbstractController`. It adds 'task' (TextType) and 'dueDate' (DateType) fields and prepares the form view using `$form->createView()` for rendering in a Twig template. Requires the Symfony FrameworkBundle.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/form.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/TaskController.php\nnamespace App\\Controller;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\DateType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\TextType;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass TaskController extends AbstractController\n{\n    public function new(Request $request): Response\n    {\n        // createFormBuilder is a shortcut to get the \"form factory\"\n        // and then call \"createBuilder()\" on it\n\n        $form = $this->createFormBuilder()\n            ->add('task', TextType::class)\n            ->add('dueDate', DateType::class)\n            ->getForm();\n\n        return $this->render('task/new.html.twig', [\n            'form' => $form->createView(),\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating URLs in Symfony PHP Controller\nDESCRIPTION: This snippet demonstrates how to use the generateUrl() method from AbstractController to generate URLs for routes in a Symfony application.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/controller.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$url = $this->generateUrl('app_lucky_number', ['max' => 10]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Value Normalization in OptionsResolver\nDESCRIPTION: This example shows how to normalize option values before they are used. The normalizer ensures that the 'host' option always starts with 'http://' if it doesn't already.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/options_resolver.rst#2025-04-22_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\OptionsResolver\\Options;\n\n// ...\nclass Mailer\n{\n    // ...\n\n    public function configureOptions(OptionsResolver $resolver): void\n    {\n        // ...\n\n        $resolver->setNormalizer('host', function (Options $options, string $value): string {\n            if (!str_starts_with($value, 'http://')) {\n                $value = 'http://'.$value;\n            }\n\n            return $value;\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Database Migrations in Symfony\nDESCRIPTION: Command to execute pending database migrations. This applies the SQL changes to synchronize the database schema with entity definitions.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine.rst#2025-04-22_snippet_6\n\nLANGUAGE: terminal\nCODE:\n```\n$ php bin/console doctrine:migrations:migrate\n```\n\n----------------------------------------\n\nTITLE: Embedding Images in Emails using Symfony Mailer\nDESCRIPTION: Demonstrates how to embed images in emails using the addPart() method with DataPart objects. It covers embedding from both files and streams, and shows how to reference embedded images in HTML content.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_33\n\nLANGUAGE: PHP\nCODE:\n```\n$email = (new Email())\n    // ...\n    // get the image contents from a PHP resource\n    ->addPart((new DataPart(fopen('/path/to/images/logo.png', 'r'), 'logo', 'image/png'))->asInline())\n    // get the image contents from an existing file\n    ->addPart((new DataPart(new File('/path/to/images/signature.gif'), 'footer-signature', 'image/gif'))->asInline())\n;\n\n$email = (new Email())\n    // ...\n    ->addPart((new DataPart(fopen('/path/to/images/logo.png', 'r'), 'logo', 'image/png'))->asInline())\n    ->addPart((new DataPart(new File('/path/to/images/signature.gif'), 'footer-signature', 'image/gif'))->asInline())\n\n    // reference images using the syntax 'cid:' + \"image embed name\"\n    ->html('<img src=\"cid:logo\"> ... <img src=\"cid:footer-signature\"> ...')\n\n    // use the same syntax for images included as HTML background images\n    ->html('... <div background=\"cid:footer-signature\"> ... </div> ...')\n;\n```\n\n----------------------------------------\n\nTITLE: Defining Subscribed Events in Event Subscriber\nDESCRIPTION: Implementation of the getSubscribedEvents method that returns an array mapping KernelEvents::CONTROLLER to the onKernelController method, which will be called for each controller request.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/event_dispatcher.rst#2025-04-22_snippet_16\n\nLANGUAGE: php\nCODE:\n```\npublic static function getSubscribedEvents(): array\n{\n    return [\n        KernelEvents::CONTROLLER => 'onKernelController',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Running a Single-file Symfony Kernel with RoutingConfigurator - PHP\nDESCRIPTION: Implements a Symfony kernel in a single file using the MicroKernelTrait, configuring both the service container and routes with method overrides. The kernel manually configures a 'random_number' route mapped to a class method and returns a random value as a JSON response. Prerequisites: PHP 8+, symfony/framework-bundle, symfony/runtime, and routing dependencies. The runtime closure returns a kernel instance initialized with the environment and debug values.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/micro_kernel_trait.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// index.php\nuse Symfony\\Bundle\\FrameworkBundle\\Kernel\\MicroKernelTrait;\nuse Symfony\\Component\\DependencyInjection\\Loader\\Configurator\\ContainerConfigurator;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpKernel\\Kernel as BaseKernel;\nuse Symfony\\Component\\Routing\\Loader\\Configurator\\RoutingConfigurator;\n\nrequire_once dirname(__DIR__).'/vendor/autoload_runtime.php';\n\nclass Kernel extends BaseKernel\n{\n    use MicroKernelTrait;\n\n    protected function configureContainer(ContainerConfigurator $container): void\n    {\n        // PHP equivalent of config/packages/framework.yaml\n        $container->extension('framework', [\n            'secret' => 'S0ME_SECRET'\n        ]);\n    }\n\n    protected function configureRoutes(RoutingConfigurator $routes): void\n    {\n        $routes->add('random_number', '/random/{limit}')->controller([$this, 'randomNumber']);\n    }\n\n    public function randomNumber(int $limit): JsonResponse\n    {\n        return new JsonResponse([\n            'number' => random_int(0, $limit),\n        ]);\n    }\n}\n\nreturn static function (array $context) {\n    return new Kernel($context['APP_ENV'], (bool) $context['APP_DEBUG']);\n};\n```\n\n----------------------------------------\n\nTITLE: Generating Request Context Aware Asset URLs with Symfony UrlPackage (PHP)\nDESCRIPTION: This snippet illustrates how to make asset URL generation sensitive to the current request context, specifically the protocol (HTTP or HTTPS). It passes an instance of `RequestStackContext` to the `UrlPackage` constructor along with multiple base URLs (one HTTP, one HTTPS). The appropriate base URL is selected based on whether the current request is secure.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/asset.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Asset\\Context\\RequestStackContext;\nuse Symfony\\Component\\Asset\\UrlPackage;\n// ...\n\n$urlPackage = new UrlPackage(\n    ['http://example.com/', 'https://example.com/'],\n    new StaticVersionStrategy('v1'),\n    new RequestStackContext($requestStack)\n);\n\necho $urlPackage->getUrl('/logo.png');\n// assuming the RequestStackContext says that we are on a secure host\n// result: https://example.com/logo.png?v1\n```\n\n----------------------------------------\n\nTITLE: Configuring Form Options in Symfony Form Type\nDESCRIPTION: This snippet shows how to declare and configure the options a form type accepts using the configureOptions() method. It demonstrates setting default values and defining allowed types for options.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/forms.rst#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n// src/Form/Type/TaskType.php\nnamespace App\\Form\\Type;\n\nuse Symfony\\Component\\OptionsResolver\\OptionsResolver;\n// ...\n\nclass TaskType extends AbstractType\n{\n    // ...\n\n    public function configureOptions(OptionsResolver $resolver): void\n    {\n        $resolver->setDefaults([\n            // ...,\n            'require_due_date' => false,\n        ]);\n\n        // you can also define the allowed types, allowed values and\n        // any other feature supported by the OptionsResolver component\n        $resolver->setAllowedTypes('require_due_date', 'bool');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Validator Instance in PHP\nDESCRIPTION: Shows the recommended way to create an instance of the validator service using the `Validation::createValidator()` static factory method. This instance implements `ValidatorInterface` and can be used to validate simple types like strings, numbers, and arrays. Validating objects requires further configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/validator.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Validator\\Validation;\n\n$validator = Validation::createValidator();\n```\n\n----------------------------------------\n\nTITLE: Implementing UserPassword Constraint with PHP Attributes\nDESCRIPTION: Example showing how to apply the UserPassword constraint using PHP attributes in a ChangePassword model class. Validates that the oldPassword property matches the current user's password.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/UserPassword.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Form/Model/ChangePassword.php\nnamespace App\\Form\\Model;\n\nuse Symfony\\Component\\Security\\Core\\Validator\\Constraints as SecurityAssert;\n\nclass ChangePassword\n{\n    #[SecurityAssert\\UserPassword(\n        message: 'Wrong value for your current password',\n    )]\n    protected string $oldPassword;\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Form Generation for Sports Meetup in Symfony\nDESCRIPTION: This code defines a form type for sports meetups with dynamic fields. It uses form events to update the position field based on the selected sport, both for initial data and form submission.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/dynamic_form_modification.rst#2025-04-22_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace App\\Form\\Type;\n\nuse App\\Entity\\Position;\nuse App\\Entity\\Sport;\nuse Symfony\\Bridge\\Doctrine\\Form\\Type\\EntityType;\nuse Symfony\\Component\\Form\\AbstractType;\nuse Symfony\\Component\\Form\\FormBuilderInterface;\nuse Symfony\\Component\\Form\\FormEvent;\nuse Symfony\\Component\\Form\\FormEvents;\nuse Symfony\\Component\\Form\\FormInterface;\n\nclass SportMeetupType extends AbstractType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options): void\n    {\n        $builder\n            ->add('sport', EntityType::class, [\n                'class' => Sport::class,\n                'placeholder' => '',\n            ])\n        ;\n\n        $formModifier = function (FormInterface $form, ?Sport $sport = null): void {\n            $positions = null === $sport ? [] : $sport->getAvailablePositions();\n\n            $form->add('position', EntityType::class, [\n                'class' => Position::class,\n                'placeholder' => '',\n                'choices' => $positions,\n            ]);\n        };\n\n        $builder->addEventListener(\n            FormEvents::PRE_SET_DATA,\n            function (FormEvent $event) use ($formModifier): void {\n                $data = $event->getData();\n                $formModifier($event->getForm(), $data->getSport());\n            }\n        );\n\n        $builder->get('sport')->addEventListener(\n            FormEvents::POST_SUBMIT,\n            function (FormEvent $event) use ($formModifier): void {\n                $sport = $event->getForm()->getData();\n                $formModifier($event->getForm()->getParent(), $sport);\n            }\n        );\n\n        $builder->setAction($options['action']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Messages in Symfony Controller (PHP)\nDESCRIPTION: Example of injecting and using a PSR-3 compatible logger in a Symfony controller. Demonstrates logging at different levels and using placeholders for dynamic content.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/logging.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Log\\LoggerInterface;\n// ...\n\npublic function index(LoggerInterface $logger): Response\n{\n    $logger->info('I just got the logger');\n    $logger->error('An error occurred');\n\n    // log messages can also contain placeholders, which are variable names\n    // wrapped in braces whose values are passed as the second argument\n    $logger->debug('User {userId} has logged in', [\n        'userId' => $this->getUserId(),\n    ]);\n\n    $logger->critical('I left the oven on!', [\n        // include extra \"context\" info in your logs\n        'cause' => 'in_hurry',\n    ]);\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Cache Computation Service\nDESCRIPTION: PHP class implementation for computing cache values with expiration settings.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/cache.rst#2025-04-22_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Cache;\n\nuse Symfony\\Contracts\\Cache\\ItemInterface;\n\nclass CacheComputation\n{\n    public function compute(ItemInterface $item): string\n    {\n        $item->expiresAfter(5);\n\n        // this is just a random example; here you must do your own calculation\n        return sprintf('#%06X', mt_rand(0, 0xFFFFFF));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony ExpressionLanguage Component via Composer\nDESCRIPTION: This command uses Composer, the PHP dependency manager, to download and install the `symfony/expression-language` package into the current project. It adds the component as a project dependency.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/expression_language.rst#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require symfony/expression-language\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Event Class in PHP\nDESCRIPTION: Defines a custom event class `OrderPlacedEvent` extending `Symfony\\Contracts\\EventDispatcher\\Event`. It holds an `Order` object accessible via the `getOrder()` method, intended to be dispatched when an order is placed. This allows passing order-specific data to event listeners.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/event_dispatcher.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nnamespace Acme\\Store\\Event;\n\nuse Acme\\Store\\Order;\nuse Symfony\\Contracts\\EventDispatcher\\Event;\n\n/**\n * This event is dispatched each time an order\n * is placed in the system.\n */\nfinal class OrderPlacedEvent extends Event\n{\n    public function __construct(private Order $order) {}\n\n    public function getOrder(): Order\n    {\n        return $this->order;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Symfony Messenger Receiver for CSV Orders (PHP)\nDESCRIPTION: This PHP class `NewOrdersFromCsvFileReceiver` implements `ReceiverInterface` to create a custom Messenger receiver, intended for processing new orders from a source like a CSV file. It requires a `SerializerInterface` for decoding message data and a custom connection object (represented by a comment placeholder) to fetch the raw data. The `get()` method retrieves data via the connection, uses the serializer to decode it into an `Envelope` (expecting a `NewOrder` message), handles potential `MessageDecodingFailedException` by rejecting the message on the connection, and adds a `CustomStamp` before returning the envelope. Placeholder `ack()` and `reject()` methods are included to illustrate interaction with the custom connection for message lifecycle management.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/messenger.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MessageReceiver;\n\nuse App\\Message\\NewOrder;\nuse Symfony\\Component\\Messenger\\Envelope;\nuse Symfony\\Component\\Messenger\\Exception\\MessageDecodingFailedException;\nuse Symfony\\Component\\Messenger\\Transport\\Receiver\\ReceiverInterface;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\n\nclass NewOrdersFromCsvFileReceiver implements ReceiverInterface\n{\n    private $connection;\n\n    public function __construct(\n        private SerializerInterface $serializer,\n        private string $filePath,\n    ) {\n        // Available connection bundled with the Messenger component\n        // can be found in \"Symfony\\Component\\Messenger\\Bridge\\*\\Transport\\Connection\".\n        $this->connection = /* create your connection */;\n    }\n\n    public function get(): iterable\n    {\n        // Receive the envelope according to your transport ($yourEnvelope here),\n        // in most cases, using a connection is the easiest solution.\n        $yourEnvelope = $this->connection->get();\n        if (null === $yourEnvelope) {\n            return [];\n        }\n\n        try {\n            $envelope = $this->serializer->decode([\n                'body' => $yourEnvelope['body'],\n                'headers' => $yourEnvelope['headers'],\n            ]);\n        } catch (MessageDecodingFailedException $exception) {\n            $this->connection->reject($yourEnvelope['id']);\n            throw $exception;\n        }\n\n        return [$envelope->with(new CustomStamp($yourEnvelope['id']))];\n    }\n\n    public function ack(Envelope $envelope): void\n    {\n        // Add information about the handled message\n    }\n\n    public function reject(Envelope $envelope): void\n    {\n        // In the case of a custom connection\n        $id = /* get the message id thanks to information or stamps present in the envelope */;\n\n        $this->connection->reject($id);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Notification Channels Dynamically - PHP\nDESCRIPTION: This PHP code defines a custom Notification class that determines delivery channels based on runtime data. If the invoice price exceeds 10,000 and the recipient supports SMS, only the SMS channel is used; otherwise, it defaults to email. Requires Symfony Notifier and custom notification use-cases. Inputs: price and recipient specifics. Ensures the notification is appropriately routed based on content and recipient interface implementation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/notifier.rst#2025-04-22_snippet_31\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Notifier;\n\nuse Symfony\\Component\\Notifier\\Notification\\Notification;\nuse Symfony\\Component\\Notifier\\Recipient\\RecipientInterface;\nuse Symfony\\Component\\Notifier\\Recipient\\SmsRecipientInterface;\n\nclass InvoiceNotification extends Notification\n{\n    public function __construct(\n        private int $price,\n    ) {\n    }\n\n    public function getChannels(RecipientInterface $recipient): array\n    {\n        if (\n            $this->price > 10000\n            && $recipient instanceof SmsRecipientInterface\n        ) {\n            return ['sms'];\n        }\n\n        return ['email'];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Closure as an Event Listener in PHP\nDESCRIPTION: Illustrates registering a PHP Closure (anonymous function) as a listener for the `acme.foo.action` event using the `addListener()` method. The closure receives the `Event` object (or a subclass) as an argument when the event is dispatched.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/event_dispatcher.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Contracts\\EventDispatcher\\Event;\\n\\n$dispatcher->addListener('acme.foo.action', function (Event $event): void {\\n    // will be executed when the acme.foo.action event is dispatched\\n});\n```\n\n----------------------------------------\n\nTITLE: Renaming Files or Directories (PHP)\nDESCRIPTION: Uses the `Filesystem::rename` method to rename or move a file or directory. The third boolean argument allows overwriting the destination if it already exists.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/filesystem.rst#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n// renames a file\n$filesystem->rename('/tmp/processed_video.ogg', '/path/to/store/video_647.ogg');\n// renames a directory\n$filesystem->rename('/tmp/files', '/path/to/store/files');\n// if the target already exists, a third boolean argument is available to overwrite.\n$filesystem->rename('/tmp/processed_video2.ogg', '/path/to/store/video_647.ogg', true);\n```\n\n----------------------------------------\n\nTITLE: Implementing an Event Subscriber in PHP\nDESCRIPTION: Defines an `EventSubscriberInterface` implementation (`StoreSubscriber`). The static `getSubscribedEvents()` method returns an array mapping event names (like `KernelEvents::RESPONSE` and `OrderPlacedEvent::class`) to listener methods (`onKernelResponsePre`, `onKernelResponsePost`, `onPlacedOrder`) within the class. It also shows how to define multiple listeners for the same event with different priorities.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/event_dispatcher.rst#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nnamespace Acme\\Store\\Event;\n\nuse Acme\\Store\\Event\\OrderPlacedEvent;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\nuse Symfony\\Component\\HttpKernel\\Event\\ResponseEvent;\nuse Symfony\\Component\\HttpKernel\\KernelEvents;\n\nclass StoreSubscriber implements EventSubscriberInterface\n{\n    public static function getSubscribedEvents(): array\n    {\n        return [\n            KernelEvents::RESPONSE => [\n                ['onKernelResponsePre', 10],\n                ['onKernelResponsePost', -10],\n            ],\n            OrderPlacedEvent::class => 'onPlacedOrder',\n        ];\n    }\n\n    public function onKernelResponsePre(ResponseEvent $event): void\n    {\n        // ...\n    }\n\n    public function onKernelResponsePost(ResponseEvent $event): void\n    {\n        // ...\n    }\n\n    public function onPlacedOrder(OrderPlacedEvent $event): void\n    {\n        $order = $event->getOrder();\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Password Hashers in YAML\nDESCRIPTION: This YAML configuration snippet defines password hashing strategies within the `security.yaml` file. It sets the 'auto' algorithm for the `App\\Entity\\User` class using default options and configures the 'auto' algorithm with a higher cost factor (15) for all classes implementing `PasswordAuthenticatedUserInterface`.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/passwords.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\nsecurity:\n    # ...\n\n    password_hashers:\n        # auto hasher with default options for the User class (and children)\n        App\\Entity\\User: 'auto'\n\n        # auto hasher with custom options for all PasswordAuthenticatedUserInterface instances\n        Symfony\\Component\\Security\\Core\\User\\PasswordAuthenticatedUserInterface:\n            algorithm: 'auto'\n            cost:      15\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Recipients with Array Syntax\nDESCRIPTION: Example of passing multiple email addresses to the recipient methods by using the spread operator with arrays or by providing them as separate arguments.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n$toAddresses = ['foo@example.com', new Address('bar@example.com')];\n\n$email = (new Email())\n    ->to(...$toAddresses)\n    ->cc('cc1@example.com', 'cc2@example.com')\n\n    // ...\n;\n```\n\n----------------------------------------\n\nTITLE: Simplifying JSON Response Creation in Symfony Controllers\nDESCRIPTION: Illustrates using the `json()` helper method provided by Symfony's `AbstractController`. This method automatically uses the serializer service (if available) to convert the given `$person` object to a JSON response, simplifying the controller code.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nclass PersonController extends AbstractController\n{\n    public function index(): Response\n    {\n        $person = new Person('Jane Doe', 39, false);\n\n        // when the Serializer is not available, this will use json_encode()\n        return $this->json($person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Minimal Symfony Project with CLI (Terminal)\nDESCRIPTION: Uses the Symfony CLI to create a new project directory (`my_project_directory`) suitable for microservices, console applications, or APIs. It specifies the Symfony version (`7.3.x-dev`) and installs a minimal set of default packages. Requires Symfony CLI.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup.rst#2025-04-22_snippet_2\n\nLANGUAGE: terminal\nCODE:\n```\n# run this if you are building a microservice, console application or API\n$ symfony new my_project_directory --version=\"7.3.x-dev\"\n```\n\n----------------------------------------\n\nTITLE: Validating User Password in Symfony\nDESCRIPTION: Code snippet demonstrating how to verify a user's password using the passwordHasher service. This checks if a provided plaintext password matches the stored hashed password.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/passwords.rst#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n// In another action (e.g. to confirm deletion), you can verify the password\n$plaintextPassword = ...;\nif (!$passwordHasher->isPasswordValid($user, $plaintextPassword)) {\n    throw new \\Exception('Bad credentials, cannot delete this user.');\n}\n```\n\n----------------------------------------\n\nTITLE: Securing Controller Actions with Expression Language using PHP Attributes\nDESCRIPTION: Demonstrates how to use the `#[IsGranted]` attribute with a Symfony `Expression` object to define complex access control rules for controller actions. The examples show checking for multiple roles or combining role checks with custom user method calls (`user.isSuperAdmin()`). Requires Symfony's Security and ExpressionLanguage components.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/expressions.rst#2025-04-22_snippet_0\n\nLANGUAGE: php-attributes\nCODE:\n```\n// src/Controller/MyController.php\nnamespace App\\Controller;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\ExpressionLanguage\\Expression;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Security\\Http\\Attribute\\IsGranted;\n\nclass MyController extends AbstractController\n{\n    #[IsGranted(new Expression('is_granted(\"ROLE_ADMIN\") or is_granted(\"ROLE_MANAGER\")'))]\n    public function show(): Response\n    {\n        // ...\n    }\n\n    #[IsGranted(new Expression(\n        '\"ROLE_ADMIN\" in role_names or (is_authenticated() and user.isSuperAdmin())'\n    ))]\n    public function edit(): Response\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Dependencies in Custom Symfony Service\nDESCRIPTION: Shows how to inject dependencies (like LoggerInterface) into a custom service using constructor injection in Symfony.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/quick_tour/the_architecture.rst#2025-04-22_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n// src/GreetingGenerator.php\nuse Psr\\Log\\LoggerInterface;\n\nclass GreetingGenerator\n{\n    public function __construct(\n        private LoggerInterface $logger,\n    ) {\n    }\n\n    public function getRandomGreeting(): string\n    {\n        // ...\n\n        $this->logger->info('Using the greeting: '.$greeting);\n\n        return $greeting;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Robust Lock Handling in Symfony\nDESCRIPTION: Demonstrates a robust implementation of lock handling, including acquiring the lock, checking its expiration, and refreshing it during long-running tasks.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/lock.rst#2025-04-22_snippet_28\n\nLANGUAGE: PHP\nCODE:\n```\n// ...\n$lock = $factory->createLock('pdf-creation', 30);\n\nif (!$lock->acquire()) {\n    return;\n}\nwhile (!$finished) {\n    if ($lock->getRemainingLifetime() <= 5) {\n        if ($lock->isExpired()) {\n            // lock was lost, perform a rollback or send a notification\n            throw new \\RuntimeException('Lock lost during the overall process');\n        }\n\n        $lock->refresh();\n    }\n\n    // Perform the task whose duration MUST be less than 5 seconds\n}\n```\n\n----------------------------------------\n\nTITLE: Running a Process Asynchronously and Checking Status in PHP\nDESCRIPTION: Shows how to start a process asynchronously using `start()`, allowing the main script to continue execution. The script then periodically checks if the process is still running using `isRunning()` in a `while` loop. Once the loop finishes (meaning the process has completed), the full output can be retrieved using `getOutput()`. Depends on the Symfony Process component.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/process.rst#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$process = new Process(['ls', '-lsa']);\n$process->start();\n\nwhile ($process->isRunning()) {\n    // waiting for process to finish\n}\n\necho $process->getOutput();\n```\n\n----------------------------------------\n\nTITLE: Implementing Postal Address Form Type in PHP\nDESCRIPTION: Creates a custom PostalAddressType form field from scratch with multiple address input fields. Demonstrates building complex form types with multiple fields and configuration options.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/create_custom_field_type.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// src/Form/Type/PostalAddressType.php\nnamespace App\\Form\\Type;\n\nuse Symfony\\Component\\Form\\AbstractType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\TextType;\nuse Symfony\\Component\\Form\\FormBuilderInterface;\n\nclass PostalAddressType extends AbstractType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options): void\n    {\n        $builder\n            ->add('addressLine1', TextType::class, [\n                'help' => 'Street address, P.O. box, company name',\n            ])\n            ->add('addressLine2', TextType::class, [\n                'help' => 'Apartment, suite, unit, building, floor',\n            ])\n            ->add('city', TextType::class)\n            ->add('state', TextType::class, [\n                'label' => 'State',\n            ])\n            ->add('zipCode', TextType::class, [\n                'label' => 'ZIP Code',\n            ])\n        ;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding an Object Method as an Event Listener in PHP\nDESCRIPTION: Shows how to register a specific method of an object instance as a listener for a named event using the `addListener()` method. The listener (`$listener->onFooAction`) will be called when the `acme.foo.action` event is dispatched. An optional priority can be specified as the third argument.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/event_dispatcher.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$listener = new AcmeListener();\\n$dispatcher->addListener('acme.foo.action', [$listener, 'onFooAction']);\n```\n\n----------------------------------------\n\nTITLE: Secure PHP Request Handling with Input Escaping\nDESCRIPTION: PHP code that includes input escaping to prevent XSS attacks and sets the content type header.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/create_framework/http_foundation.rst#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$name = $_GET['name'] ?? 'World';\n\nheader('Content-Type: text/html; charset=utf-8');\n\nprintf('Hello %s', htmlspecialchars($name, ENT_QUOTES, 'UTF-8'));\n```\n\n----------------------------------------\n\nTITLE: Creating an External HTTP Browser with Symfony BrowserKit (PHP)\nDESCRIPTION: Demonstrates how to create an HttpBrowser instance for making external HTTP requests using Symfony's BrowserKit and HttpClient components. This allows making HTTP requests to external websites.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/browser_kit.rst#2025-04-22_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\BrowserKit\\HttpBrowser;\nuse Symfony\\Component\\HttpClient\\HttpClient;\n\n$browser = new HttpBrowser(HttpClient::create());\n```\n\n----------------------------------------\n\nTITLE: Creating a Templated Email with Twig in Symfony\nDESCRIPTION: Example of using the TemplatedEmail class to create and configure an email with Twig templates. Sets the from/to addresses, subject, HTML template path, locale, and context variables.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_40\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Bridge\\Twig\\Mime\\TemplatedEmail;\n\n$email = (new TemplatedEmail())\n    ->from('fabien@example.com')\n    ->to(new Address('ryan@example.com'))\n    ->subject('Thanks for signing up!')\n\n    // path of the Twig template to render\n    ->htmlTemplate('emails/signup.html.twig')\n\n    // change locale used in the template, e.g. to match user's locale\n    ->locale('de')\n\n    // pass variables (name => value) to the template\n    ->context([\n        'expiration_date' => new \\DateTime('+7 days'),\n        'username' => 'foo',\n    ])\n;\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack Encore with XML in Symfony\nDESCRIPTION: This XML snippet demonstrates how to configure Webpack Encore in a Symfony application, including setting the output path, strict mode, and caching options. It also shows how to apply different configurations based on the environment.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration.rst#2025-04-22_snippet_17\n\nLANGUAGE: xml\nCODE:\n```\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n            xmlns:webpack-encore=\"http://symfony.com/schema/dic/symfony\"\n            xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n                    https://symfony.com/schema/dic/services/services-1.0.xsd\n                    http://symfony.com/schema/dic/symfony\n                    https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n                <webpack-encore:config\n                    output-path=\"%kernel.project_dir%/public/build\"\n                    strict-mode=\"true\"\n                    cache=\"false\"\n                />\n\n                <!-- cache is enabled only in the \"test\" environment -->\n                <when env=\"prod\">\n                    <webpack-encore:config cache=\"true\"/>\n                </when>\n\n                <!-- disable strict mode only in the \"test\" environment -->\n                <when env=\"test\">\n                    <webpack-encore:config strict-mode=\"false\"/>\n                </when>\n            </container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Parent Services in XML\nDESCRIPTION: XML configuration for setting up a parent service with common dependencies and child services that inherit from it. The abstract parent service defines common arguments and method calls.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/parent_services.rst#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"App\\Repository\\BaseDoctrineRepository\" abstract=\"true\">\n            <argument type=\"service\" id=\"doctrine.orm.entity_manager\"/>\n\n            <call method=\"setLogger\">\n                <argument type=\"service\" id=\"logger\"/>\n            </call>\n        </service>\n\n        <!-- extends the App\\Repository\\BaseDoctrineRepository service -->\n        <service id=\"App\\Repository\\DoctrineUserRepository\"\n            parent=\"App\\Repository\\BaseDoctrineRepository\"\n        />\n\n        <service id=\"App\\Repository\\DoctrinePostRepository\"\n            parent=\"App\\Repository\\BaseDoctrineRepository\"\n        />\n\n        <!-- ... -->\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Accessing Event Name and Dispatcher in a Listener in PHP\nDESCRIPTION: Defines a listener method (`myEventListener`) that accepts not only the event object (`Event`) but also the event name (as a string `$eventName`) and the `EventDispatcherInterface` instance (`$dispatcher`) as arguments. This allows for advanced listener logic, such as introspection or dispatching further events.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/event_dispatcher.rst#2025-04-22_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Contracts\\EventDispatcher\\Event;\nuse Symfony\\Contracts\\EventDispatcher\\EventDispatcherInterface;\n\nclass MyListener\n{\n    public function myEventListener(Event $event, string $eventName, EventDispatcherInterface $dispatcher): void\n    {\n        // ... do something with the event name\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping and Executing a Symfony HttpKernel Workflow - PHP\nDESCRIPTION: Creates and configures objects required to initialize and run a Symfony HttpKernel instance for processing HTTP requests. Demonstrates instantiating the Request from globals, setting up event dispatching and controller/argument resolution, creating the HttpKernel, and invoking the handle() and terminate() lifecycle methods. Requires symfony/http-kernel, symfony/http-foundation, symfony/event-dispatcher, and their dependencies; input is the global HTTP request, and output is a sent HTTP response, with the expectation that event listeners and routing are properly configured beforehand.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/http_kernel.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\EventDispatcher\\EventDispatcher;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\RequestStack;\nuse Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver;\nuse Symfony\\Component\\HttpKernel\\Controller\\ControllerResolver;\nuse Symfony\\Component\\HttpKernel\\HttpKernel;\n\n// create the Request object\n$request = Request::createFromGlobals();\n\n$dispatcher = new EventDispatcher();\n// ... add some event listeners\n\n// create your controller and argument resolvers\n$controllerResolver = new ControllerResolver();\n$argumentResolver = new ArgumentResolver();\n\n// instantiate the kernel\n$kernel = new HttpKernel($dispatcher, $controllerResolver, new RequestStack(), $argumentResolver);\n\n// actually execute the kernel, which turns the request into a response\n// by dispatching events, calling a controller, and returning the response\n$response = $kernel->handle($request);\n\n// send the headers and echo the content\n$response->send();\n\n// trigger the kernel.terminate event\n$kernel->terminate($request, $response);\n\n```\n\n----------------------------------------\n\nTITLE: Excluding Dependencies from Webpack Bundles\nDESCRIPTION: Demonstrates how to use Encore's addExternals() method to prevent certain packages from being included in the final bundle. This is useful when dependencies should be loaded externally, such as from CDNs.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/advanced-config.rst#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// this won't include jQuery and React in the output bundles generated\n// by Webpack Encore. You'll need to load those dependencies yourself\n// (e.g with a `<script>` tag) to make the application or website work.\nEncore.addExternals({\n    jquery: 'jQuery',\n    react: 'react'\n})\n```\n\n----------------------------------------\n\nTITLE: Using the Configured UuidFactory in a Symfony Service (PHP)\nDESCRIPTION: Example of a service (`FooService`) that depends on the `Symfony\\Component\\Uid\\Factory\\UuidFactory`. It shows how to inject the factory via constructor dependency injection and use its methods (`create`, `nameBased`, `randomBased`, `timeBased`) to generate UUIDs based on the application's configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/uid.rst#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Service;\n\nuse Symfony\\Component\\Uid\\Factory\\UuidFactory;\n\nclass FooService\n{\n    public function __construct(\n        private UuidFactory $uuidFactory,\n    ) {\n    }\n\n    public function generate(): void\n    {\n        // This creates a UUID of the version given in the configuration file (v7 by default)\n        $uuid = $this->uuidFactory->create();\n\n        $nameBasedUuid = $this->uuidFactory->nameBased(/** ... */);\n        $randomBasedUuid = $this->uuidFactory->randomBased();\n        $timestampBased = $this->uuidFactory->timeBased();\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TaskController in PHP\nDESCRIPTION: Creates a controller action to handle the new Task form, including dummy code to add example tags.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/form_collections.rst#2025-04-22_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n// src/Controller/TaskController.php\nnamespace App\\Controller;\n\nuse App\\Entity\\Tag;\nuse App\\Entity\\Task;\nuse App\\Form\\TaskType;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass TaskController extends AbstractController\n{\n    public function new(Request $request): Response\n    {\n        $task = new Task();\n\n        // dummy code - add some example tags to the task\n        // (otherwise, the template will render an empty list of tags)\n        $tag1 = new Tag();\n        $tag1->setName('tag1');\n        $task->getTags()->add($tag1);\n        $tag2 = new Tag();\n        $tag2->setName('tag2');\n        $task->getTags()->add($tag2);\n        // end dummy code\n\n        $form = $this->createForm(TaskType::class, $task);\n\n        $form->handleRequest($request);\n\n        if ($form->isSubmitted() && $form->isValid()) {\n            // ... do your form processing, like saving the Task and Tag entities\n        }\n\n        return $this->render('task/new.html.twig', [\n            'form' => $form,\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Transport in Messenger PHP Configuration\nDESCRIPTION: PHP configuration for setting up a custom transport in the Messenger component. Uses the FrameworkConfig to register a transport named 'yours' with the custom DSN format.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/messenger/custom-transport.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/messenger.php\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework): void {\n    $framework->messenger()\n        ->transport('yours')\n            ->dsn('my-transport://...')\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Handling File Uploads with Exception Handling in PHP\nDESCRIPTION: This snippet shows how to move an uploaded file to a target directory and handle potential exceptions. It includes a method to get the target directory.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/controller/upload_file.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ntry {\n    $file->move($this->getTargetDirectory(), $fileName);\n} catch (FileException $e) {\n    // ... handle exception if something happens during file upload\n}\n\nreturn $fileName;\n}\n\npublic function getTargetDirectory(): string\n{\n    return $this->targetDirectory;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Symfony Projects with Different Versions using Symfony CLI\nDESCRIPTION: This snippet demonstrates how to create new Symfony projects using the Symfony CLI with different version options. It shows commands for using the latest LTS version, the next version in development, and specifying an exact version.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup.rst#2025-04-22_snippet_10\n\nLANGUAGE: terminal\nCODE:\n```\n# use the most recent LTS version\n$ symfony new my_project_directory --version=lts\n\n# use the 'next' Symfony version to be released (still in development)\n$ symfony new my_project_directory --version=next\n\n# you can also select an exact specific Symfony version\n$ symfony new my_project_directory --version=\"6.4.*\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Symfony Voter for Post Permissions (PHP)\nDESCRIPTION: Provides a complete example of a custom `PostVoter` extending Symfony's `Voter` class. It implements the `supports()` method to determine if it should vote on 'view' or 'edit' attributes for `Post` objects, and the `voteOnAttribute()` method containing the logic to grant or deny access based on user identity and post properties (e.g., ownership via `getOwner()`, privacy via `isPrivate()`). It requires `App\\Entity\\Post` and `App\\Entity\\User` entities.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/voters.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// src/Security/PostVoter.php\nnamespace App\\Security;\n\nuse App\\Entity\\Post;\nuse App\\Entity\\User;\nuse Symfony\\Component\\Security\\Core\\Authentication\\Token\\TokenInterface;\nuse Symfony\\Component\\Security\\Core\\Authorization\\Voter\\Voter;\n\nclass PostVoter extends Voter\n{\n    // these strings are just invented: you can use anything\n    const VIEW = 'view';\n    const EDIT = 'edit';\n\n    protected function supports(string $attribute, mixed $subject): bool\n    {\n        // if the attribute isn't one we support, return false\n        if (!in_array($attribute, [self::VIEW, self::EDIT])) {\n            return false;\n        }\n\n        // only vote on `Post` objects\n        if (!$subject instanceof Post) {\n            return false;\n        }\n\n        return true;\n    }\n\n    protected function voteOnAttribute(string $attribute, mixed $subject, TokenInterface $token): bool\n    {\n        $user = $token->getUser();\n\n        if (!$user instanceof User) {\n            // the user must be logged in; if not, deny access\n            return false;\n        }\n\n        // you know $subject is a Post object, thanks to `supports()`\n        /** @var Post $post */\n        $post = $subject;\n\n        return match($attribute) {\n            self::VIEW => $this->canView($post, $user),\n            self::EDIT => $this->canEdit($post, $user),\n            default => throw new \\LogicException('This code should not be reached!')\n        };\n    }\n\n    private function canView(Post $post, User $user): bool\n    {\n        // if they can edit, they can view\n        if ($this->canEdit($post, $user)) {\n            return true;\n        }\n\n        // the Post object could have, for example, a method `isPrivate()`\n        return !$post->isPrivate();\n    }\n\n    private function canEdit(Post $post, User $user): bool\n    {\n        // this assumes that the Post object has a `getOwner()` method\n        return $user === $post->getOwner();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: DKIM Email Signing with Symfony Mailer\nDESCRIPTION: Implementation of DKIM email signing using a private key and domain configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_56\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Mime\\Crypto\\DkimSigner;\nuse Symfony\\Component\\Mime\\Email;\n\n$email = (new Email())\n    ->from('hello@example.com')\n    // ...\n    ->html('...');\n\n$signer = new DkimSigner('file:///path/to/private-key.key', 'example.com', 'sf');\n// if the private key has a passphrase, pass it as the fifth argument\n// new DkimSigner('file:///path/to/private-key.key', 'example.com', 'sf', [], 'the-passphrase');\n\n$signedEmail = $signer->sign($email);\n\n// DKIM signer provides many config options and a helper object to configure them\nuse Symfony\\Component\\Mime\\Crypto\\DkimOptions;\n\n$signedEmail = $signer->sign($email, (new DkimOptions())\n    ->bodyCanon('relaxed')\n    ->headerCanon('relaxed')\n    ->headersToIgnore(['Message-ID'])\n    ->toArray()\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Trusted Proxies and Headers in YAML\nDESCRIPTION: This YAML configuration sets trusted proxy IP addresses and specifies which forwarded headers to trust. It demonstrates how to configure for both X-Forwarded-* headers and the Forwarded header.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/deployment/proxies.rst#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/framework.yaml\nframework:\n    # ...\n    # the IP address (or range) of your proxy\n    trusted_proxies: '192.0.0.1,10.0.0.0/8'\n    # shortcut for private IP address ranges of your proxy\n    trusted_proxies: 'private_ranges'\n    # trust *all* \"X-Forwarded-*\" headers\n    trusted_headers: ['x-forwarded-for', 'x-forwarded-host', 'x-forwarded-proto', 'x-forwarded-port', 'x-forwarded-prefix']\n    # or, if your proxy instead uses the \"Forwarded\" header\n    trusted_headers: ['forwarded']\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Real-time Process Output in PHP\nDESCRIPTION: Demonstrates using the `Process` object in a `foreach` loop to get output chunks (both standard output and standard error) as they become available. The process is started asynchronously using `start()`, and the loop iterates until the process finishes, differentiating between `OUT` and `ERR` streams. Depends on the Symfony Process component.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/process.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$process = new Process(['ls', '-lsa']);\n$process->start();\n\nforeach ($process as $type => $data) {\n    if ($process::OUT === $type) {\n        echo \"\\nRead from stdout: \".$data;\n    } else { // $process::ERR === $type\n        echo \"\\nRead from stderr: \".$data;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Symfony Finder Component in PHP after Composer Installation\nDESCRIPTION: This PHP snippet demonstrates how to use the Symfony Finder component after installing it with Composer. It first includes the Composer-generated autoloader (`vendor/autoload.php`), which handles loading all necessary classes. It then imports the `Finder` class using a `use` statement and creates a new `Finder` instance, configuring it to search within the `../data/` directory relative to the script's location. This requires the `symfony/finder` package to be previously installed via Composer.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/using_components.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Project structure example:\n// my_project/\n//     data/\n//         ...              # Some project data\n//     src/\n//         my_script.php    # Main entry point\n//     vendor/\n//         autoload.php     # Autoloader generated by Composer\n//         ...              # Packages downloaded by Composer\n\n// File example: src/my_script.php\n// Autoloader relative path to this PHP file\nrequire_once __DIR__.'/../vendor/autoload.php';\n\nuse Symfony\\Component\\Finder\\Finder;\n\n$finder = new Finder();\n$finder->in('../data/');\n\n// rest of your PHP code...\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Routing in PHP\nDESCRIPTION: Sets up a basic routing system using an array map and includes corresponding PHP files based on the requested path.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/create_framework/routing.rst#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nrequire_once __DIR__.'/../vendor/autoload.php';\n\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\n$request = Request::createFromGlobals();\n\n$map = [\n    '/hello' => 'hello',\n    '/bye'   => 'bye',\n];\n\n$path = $request->getPathInfo();\nif (isset($map[$path])) {\n    ob_start();\n    extract($request->query->all(), EXTR_SKIP);\n    include sprintf(__DIR__.'/../src/pages/%s.php', $map[$path]);\n    $response = new Response(ob_get_clean());\n} else {\n    $response = new Response('Not Found', 404);\n}\n\n$response->send();\n```\n\n----------------------------------------\n\nTITLE: Serialization Depth Example with Person Class\nDESCRIPTION: Example showing how to handle serialization depth for nested objects using the Person class in a family tree structure.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer.rst#2025-04-22_snippet_57\n\nLANGUAGE: php\nCODE:\n```\nclass Person\n{\n    public function __construct(\n        private string $name,\n        private ?self $mother\n    ) {\n    }\n\n    public function getName(): string\n    {\n        return $this->name;\n    }\n\n    public function getMother(): ?self\n    {\n        return $this->mother;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Query Parameters in Symfony Controller\nDESCRIPTION: Demonstrates how to automatically map query parameters to controller action arguments using the MapQueryParameter attribute in Symfony.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/controller.rst#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Attribute\\MapQueryParameter;\n\n// ...\n\npublic function dashboard(\n    #[MapQueryParameter] string $firstName,\n    #[MapQueryParameter] string $lastName,\n    #[MapQueryParameter] int $age,\n): Response\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Service in Symfony\nDESCRIPTION: Shows how to create a custom service class (GreetingGenerator) in Symfony for generating random greetings. This demonstrates how to organize code into reusable services.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/quick_tour/the_architecture.rst#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n// src/GreetingGenerator.php\nnamespace App;\n\nclass GreetingGenerator\n{\n    public function getRandomGreeting(): string\n    {\n        $greetings = ['Hey', 'Yo', 'Aloha'];\n        $greeting = $greetings[array_rand($greetings)];\n\n        return $greeting;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Framework Class in PHP\nDESCRIPTION: Creates a Framework class that handles HTTP requests and manages controller resolution. Contains core logic for routing and request handling with proper error management.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/create_framework/separation_of_concerns.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace Simplex;\n\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver;\nuse Symfony\\Component\\HttpKernel\\Controller\\ControllerResolver;\nuse Symfony\\Component\\Routing\\Exception\\ResourceNotFoundException;\nuse Symfony\\Component\\Routing\\Matcher\\UrlMatcher;\n\nclass Framework\n{\n    public function __construct(\n        private UrlMatcher $matcher,\n        private ControllerResolver $controllerResolver,\n        private ArgumentResolver $argumentResolver,\n    ) {\n    }\n\n    public function handle(Request $request): Response\n    {\n        $this->matcher->getContext()->fromRequest($request);\n\n        try {\n            $request->attributes->add($this->matcher->match($request->getPathInfo()));\n\n            $controller = $this->controllerResolver->getController($request);\n            $arguments = $this->argumentResolver->getArguments($request, $controller);\n\n            return call_user_func_array($controller, $arguments);\n        } catch (ResourceNotFoundException $exception) {\n            return new Response('Not Found', 404);\n        } catch (\\Exception $exception) {\n            return new Response('An error occurred', 500);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom User Provider in Symfony (PHP)\nDESCRIPTION: Provides a skeleton for a Symfony custom UserProvider class in PHP, typically generated by the Symfony 'make:user' command. The class implements UserProviderInterface and PasswordUpgraderInterface, with placeholder methods for loading, refreshing, and upgrading user entities. Designed for advanced scenarios where users are sourced from non-standard storage (API, legacy DB). Dependencies include Symfony Security and an application-specific User entity.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/user_providers.rst#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n// src/Security/UserProvider.php\\nnamespace App\\Security;\\n\\nuse Symfony\\Component\\Security\\Core\\Exception\\UnsupportedUserException;\\nuse Symfony\\Component\\Security\\Core\\Exception\\UserNotFoundException;\\nuse Symfony\\Component\\Security\\Core\\User\\PasswordAuthenticatedUserInterface;\\nuse Symfony\\Component\\Security\\Core\\User\\PasswordUpgraderInterface;\\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\\nuse Symfony\\Component\\Security\\Core\\User\\UserProviderInterface;\\n\\nclass UserProvider implements UserProviderInterface, PasswordUpgraderInterface\\n{\\n    /**\\n     * Symfony calls this method if you use features like switch_user\\n     * or remember_me. If you\\'re not using these features, you do not\\n     * need to implement this method.\\n     *\\n     * @throws UserNotFoundException if the user is not found\\n     */\\n    public function loadUserByIdentifier(string $identifier): UserInterface\\n    {\\n        // Load a User object from your data source or throw UserNotFoundException.\\n        // The $identifier argument is whatever value is being returned by the\\n        // getUserIdentifier() method in your User class.\\n        throw new \\Exception('TODO: fill in loadUserByIdentifier() inside '.__FILE__);\\n    }\\n\\n    /**\\n     * Refreshes the user after being reloaded from the session.\\n     *\\n     * When a user is logged in, at the beginning of each request, the\\n     * User object is loaded from the session and then this method is\\n     * called. Your job is to make sure the user\\'s data is still fresh by,\\n     * for example, re-querying for fresh User data.\\n     *\\n     * If your firewall is \\\"stateless: true\\\" (for a pure API), this\\n     * method is not called.\\n     */\\n    public function refreshUser(UserInterface $user): UserInterface\\n    {\\n        if (!$user instanceof User) {\\n            throw new UnsupportedUserException(sprintf('Invalid user class \\\"%s\\\".', get_class($user)));\\n        }\\n\\n        // Return a User object after making sure its data is \\\"fresh\\\".\\n        // Or throw a UserNotFoundException if the user no longer exists.\\n        throw new \\Exception('TODO: fill in refreshUser() inside '.__FILE__);\\n    }\\n\\n    /**\\n     * Tells Symfony to use this provider for this User class.\\n     */\\n    public function supportsClass(string $class): bool\\n    {\\n        return User::class === $class || is_subclass_of($class, User::class);\\n    }\\n\\n    /**\\n     * Upgrades the hashed password of a user, typically for using a better hash algorithm.\\n     */\\n    public function upgradePassword(PasswordAuthenticatedUserInterface $user, string $newHashedPassword): void\\n    {\\n        // TODO: when hashed passwords are in use, this method should:\\n        // 1. persist the new password in the user storage\\n        // 2. update the $user object with $user->setPassword($newHashedPassword);\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving JSON Request Body as an Array in PHP\nDESCRIPTION: Demonstrates using the `toArray()` method on the `Request` object to automatically decode a JSON request body into a PHP array. This simplifies handling JSON payloads commonly used in APIs.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$data = $request->toArray();\n```\n\n----------------------------------------\n\nTITLE: S/MIME Email Encryption with Symfony Mailer\nDESCRIPTION: Example of encrypting emails using S/MIME encryption with certificates for single and multiple recipients.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_60\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Mime\\Crypto\\SMimeEncrypter;\nuse Symfony\\Component\\Mime\\Email;\n\n$email = (new Email())\n    ->from('hello@example.com')\n    // ...\n    ->html('...');\n\n$encrypter = new SMimeEncrypter('/path/to/certificate.crt');\n$encryptedEmail = $encrypter->encrypt($email);\n\n$firstEmail = (new Email())\n    // ...\n    ->to('jane@example.com');\n\n$secondEmail = (new Email())\n    // ...\n    ->to('john@example.com');\n\n$encrypter = new SMimeEncrypter([\n    // key = email recipient; value = path to the certificate file\n    'jane@example.com' => '/path/to/first-certificate.crt',\n    'john@example.com' => '/path/to/second-certificate.crt',\n]);\n\n$firstEncryptedEmail = $encrypter->encrypt($firstEmail);\n$secondEncryptedEmail = $encrypter->encrypt($secondEmail);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom User Loader in Doctrine Repository (PHP)\nDESCRIPTION: This PHP code snippet shows how to customize user loading by implementing Symfony\\Bridge\\Doctrine\\Security\\User\\UserLoaderInterface in your repository. The loadUserByIdentifier method allows loading a user by either username or email, providing flexible authentication strategies. The implementation relies on Doctrine's entity manager and should be set up in your repository (e.g., UserRepository); when used, omit the property setting in your user provider configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/user_providers.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Repository/UserRepository.php\\nnamespace App\\Repository;\\n\\nuse App\\Entity\\User;\\nuse Doctrine\\Bundle\\DoctrineBundle\\Repository\\ServiceEntityRepository;\\nuse Symfony\\Bridge\\Doctrine\\Security\\User\\UserLoaderInterface;\\n\\nclass UserRepository extends ServiceEntityRepository implements UserLoaderInterface\\n{\\n    // ...\\n\\n    public function loadUserByIdentifier(string $usernameOrEmail): ?User\\n    {\\n        $entityManager = $this->getEntityManager();\\n\\n        return $entityManager->createQuery(\\n                'SELECT u\\n                FROM App\\\\Entity\\\\User u\\n                WHERE u.username = :query\\n                OR u.email = :query'\\n            )\\n            ->setParameter('query', $usernameOrEmail)\\n            ->getOneOrNullResult();\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: ContentLengthListener Implementation\nDESCRIPTION: Full implementation of ContentLengthListener class implementing EventSubscriberInterface with prioritized response event handling.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/create_framework/event_dispatcher.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// example.com/src/Simplex/ContentLengthListener.php\nnamespace Simplex;\n\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n\nclass ContentLengthListener implements EventSubscriberInterface\n{\n    // ...\n\n    public static function getSubscribedEvents(): array\n    {\n        return ['response' => ['onResponse', -255]];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Symfony HTTP Cache in PHP\nDESCRIPTION: Enables the built-in HTTP cache reverse proxy in Symfony's production environment through PHP configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/http_cache.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/framework.php\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework, string $env): void {\n    if ('prod' === $env) {\n        $framework->httpCache()->enabled(true);\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Products with Doctrine in Symfony Controller\nDESCRIPTION: Example of updating a product entity using Doctrine EntityManager. Shows how to fetch an entity, modify it, and persist changes using the flush() method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine.rst#2025-04-22_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nclass ProductController extends AbstractController\n{\n    #[Route('/product/edit/{id}', name: 'product_edit')]\n    public function update(EntityManagerInterface $entityManager, int $id): Response\n    {\n        $product = $entityManager->getRepository(Product::class)->find($id);\n\n        if (!$product) {\n            throw $this->createNotFoundException(\n                'No product found for id '.$id\n            );\n        }\n\n        $product->setName('New product name!');\n        $entityManager->flush();\n\n        return $this->redirectToRoute('product_show', [\n            'id' => $product->getId()\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Directory Tree Structure in Symfony Console (PHP)\nDESCRIPTION: Demonstrates how to render a simple flat directory hierarchy tree using Symfony's TreeHelper. The code defines the node structure from a basic array of directory names, which is then passed to TreeHelper::createTree along with SymfonyStyle IO helpers for rendering in the console. Requires the symfony/console package and appropriate use statements; expected input is an array of directory names, output is a console-rendered tree.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/helpers/tree.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Command;\n\nuse Symfony\\Component\\Console\\Attribute\\AsCommand;\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Helper\\TreeHelper;\nuse Symfony\\Component\\Console\\Helper\\TreeNode;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nuse Symfony\\Component\\Console\\Style\\SymfonyStyle;\n\n#[AsCommand(name: 'app:some-command', description: '...')]\nclass SomeCommand extends Command\n{\n    // ...\n\n    protected function execute(InputInterface $input, OutputInterface $output): int\n    {\n        $io = new SymfonyStyle($input, $output);\n\n        $node = TreeNode::fromValues([\n            'config/',\n            'public/',\n            'src/',\n            'templates/',\n            'tests/',\n        ]);\n\n        $tree = TreeHelper::createTree($io, $node);\n        $tree->render();\n\n        // ...\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Utilizing Getter Methods with PropertyAccessor (PHP)\nDESCRIPTION: Shows that `PropertyAccessor::getValue()` automatically finds and calls conventional getter methods (e.g., `getFirstName()`) when accessing a property (e.g., `first_name`). The component converts the property path to camelCase and prefixes it with `get`.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/property_access.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// ...\nclass Person\n{\n    private string $firstName = 'Wouter';\n\n    public function getFirstName(): string\n    {\n        return $this->firstName;\n    }\n}\n\n$person = new Person();\n\nvar_dump($propertyAccessor->getValue($person, 'first_name')); // 'Wouter'\n```\n\n----------------------------------------\n\nTITLE: Decrypting Secrets to .env.prod.local on Deployment (terminal)\nDESCRIPTION: Details the CLI command for decrypting all Symfony secrets to the .env.prod.local file during deployment. This can improve performance by not requiring runtime decryption and makes the decryption key unnecessary post-deployment.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/secrets.rst#2025-04-22_snippet_14\n\nLANGUAGE: terminal\nCODE:\n```\n$ APP_RUNTIME_ENV=prod php bin/console secrets:decrypt-to-local --force\n```\n\n----------------------------------------\n\nTITLE: Disabling EntityValueResolver with MapEntity Attribute\nDESCRIPTION: Demonstrates how to disable the automatic entity resolution for a specific controller argument using the MapEntity attribute with disabled option set to true.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine.rst#2025-04-22_snippet_16\n\nLANGUAGE: php\nCODE:\n```\npublic function show(\n    #[CurrentUser]\n    #[MapEntity(disabled: true)]\n    User $user\n): Response {\n    // User is not resolved by the EntityValueResolver\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Password Upgrader in Doctrine Repository\nDESCRIPTION: Implementation of the PasswordUpgraderInterface in a Doctrine UserRepository. This handles storing the newly hashed password when a user logs in with a password that needs rehashing.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/passwords.rst#2025-04-22_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n// src/Repository/UserRepository.php\nnamespace App\\Repository;\n\n// ...\nuse Symfony\\Component\\Security\\Core\\User\\PasswordAuthenticatedUserInterface;\nuse Symfony\\Component\\Security\\Core\\User\\PasswordUpgraderInterface;\n\nclass UserRepository extends EntityRepository implements PasswordUpgraderInterface\n{\n    // ...\n\n    public function upgradePassword(PasswordAuthenticatedUserInterface $user, string $newHashedPassword): void\n    {\n        // set the new hashed password on the User object\n        $user->setPassword($newHashedPassword);\n\n        // execute the queries on the database\n        $this->getEntityManager()->flush();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache with PHP-FPM for Symfony - Apache\nDESCRIPTION: This Apache configuration shows how to set up a virtual host for a Symfony application using PHP-FPM through mod_proxy_fcgi. It passes PHP files via Unix or TCP FastCGI handlers, sets the document root, directory access controls, FallbackResource for routing, asset directory optimizations, and logging. Dependencies include Apache 2.4+, mod_proxy, mod_proxy_fcgi, php-fpm, and directory/file permissions. Inputs are HTTP requests; outputs are correct routing of static and dynamic content, preventing direct access to non-Symfony PHP files.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/web_server_configuration.rst#2025-04-22_snippet_2\n\nLANGUAGE: apache\nCODE:\n```\n# /etc/apache2/conf.d/example.com.conf\n<VirtualHost *:80>\n    ServerName example.com\n    ServerAlias www.example.com\n\n    # Uncomment the following line to force Apache to pass the Authorization\n    # header to PHP: required for \"basic_auth\" under PHP-FPM and FastCGI\n    #\n    # SetEnvIfNoCase ^Authorization$ \"(.+)\" HTTP_AUTHORIZATION=$1\n\n    <FilesMatch \\.php$>\n        # when using PHP-FPM as a unix socket\n        SetHandler proxy:unix:/var/run/php/php8.3-fpm.sock|fcgi://dummy\n\n        # when PHP-FPM is configured to use TCP\n        # SetHandler proxy:fcgi://127.0.0.1:9000\n    </FilesMatch>\n\n    DocumentRoot /var/www/project/public\n    <Directory /var/www/project/public>\n        AllowOverride None\n        Require all granted\n        FallbackResource /index.php\n    </Directory>\n\n    # uncomment the following lines if you install assets as symlinks\n    # or run into problems when compiling LESS/Sass/CoffeeScript assets\n    # <Directory /var/www/project>\n    #     Options FollowSymlinks\n    # </Directory>\n\n    # optionally disable the fallback resource for the asset directories\n    # which will allow Apache to return a 404 error when files are\n    # not found instead of passing the request to Symfony\n    # <Directory /var/www/project/public/bundles>\n    #     DirectoryIndex disabled\n    #     FallbackResource disabled\n    # </Directory>\n\n    ErrorLog /var/log/apache2/project_error.log\n    CustomLog /var/log/apache2/project_access.log combined\n</VirtualHost>\n\n```\n\n----------------------------------------\n\nTITLE: Rendering Symfony Form in Twig Template\nDESCRIPTION: Demonstrates how to render a Symfony form in a Twig template using the form() function.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/forms.rst#2025-04-22_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{# templates/task/new.html.twig #}\n{{ form(form) }}\n```\n\n----------------------------------------\n\nTITLE: Creating Page-Specific JavaScript Entries\nDESCRIPTION: Shows how to create separate JavaScript files for specific pages like checkout and account. These files contain page-specific code that will only be loaded when needed.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/simple-example.rst#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// assets/checkout.js\n// custom code for your checkout page\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// assets/account.js\n// custom code for your account page\n```\n\n----------------------------------------\n\nTITLE: Using Autowire Attribute in Symfony PHP Controller\nDESCRIPTION: This snippet shows how to use the #[Autowire] attribute to inject specific services or parameter values into a Symfony controller method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/controller.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// ...\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass LuckyController extends AbstractController\n{\n    public function number(\n        int $max,\n\n        // inject a specific logger service\n        #[Autowire(service: 'monolog.logger.request')]\n        LoggerInterface $logger,\n\n        // or inject parameter values\n        #[Autowire('%kernel.project_dir%')]\n        string $projectDir\n    ): Response\n    {\n        $logger->info('We are logging!');\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Authentication Success Handler in PHP\nDESCRIPTION: PHP class implementing AuthenticationSuccessHandlerInterface to customize the authentication success behavior, such as returning an API token.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/login_link.rst#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n// src/Security/Authentication/AuthenticationSuccessHandler.php\nnamespace App\\Security\\Authentication;\n\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\Security\\Core\\Authentication\\Token\\TokenInterface;\nuse Symfony\\Component\\Security\\Http\\Authentication\\AuthenticationSuccessHandlerInterface;\n\nclass AuthenticationSuccessHandler implements AuthenticationSuccessHandlerInterface\n{\n    public function onAuthenticationSuccess(Request $request, TokenInterface $token): JsonResponse\n    {\n        $user = $token->getUser();\n        $userApiToken = $user->getApiToken();\n\n        return new JsonResponse(['apiToken' => $userApiToken]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting CSS Selector to XPath using CssSelectorConverter in PHP\nDESCRIPTION: Demonstrates how to instantiate the `CssSelectorConverter` class from the `Symfony\\Component\\CssSelector` namespace and use its `toXPath` method to convert a CSS selector string ('div.item > h4 > a') into its equivalent XPath expression. The result is then dumped using `var_dump`.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/css_selector.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\CssSelector\\CssSelectorConverter;\n\n$converter = new CssSelectorConverter();\nvar_dump($converter->toXPath('div.item > h4 > a'));\n```\n\n----------------------------------------\n\nTITLE: Processing Form Submission with submit() in Symfony Controller\nDESCRIPTION: This snippet demonstrates how to use the submit() method in a Symfony controller to process form submissions. It shows form creation, submission handling, and response rendering.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/direct_submit.rst#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n// ...\n\npublic function new(Request $request): Response\n{\n    $task = new Task();\n    $form = $this->createForm(TaskType::class, $task);\n\n    if ($request->isMethod('POST')) {\n        $form->submit($request->getPayload()->get($form->getName()));\n\n        if ($form->isSubmitted() && $form->isValid()) {\n            // perform some action...\n\n            return $this->redirectToRoute('task_success');\n        }\n    }\n\n    return $this->render('task/new.html.twig', [\n        'form' => $form,\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Controller Functions with Symfony Response\nDESCRIPTION: This snippet updates the controller functions to return Symfony Response objects. It also includes a helper function for rendering templates, similar to Symfony's templating engine.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/introduction/from_flat_php_to_symfony.rst#2025-04-22_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n// controllers.php\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nfunction list_action()\n{\n    $posts = get_all_posts();\n    $html = render_template('templates/list.php', ['posts' => $posts]);\n\n    return new Response($html);\n}\n\nfunction show_action($id)\n{\n    $post = get_post_by_id($id);\n    $html = render_template('templates/show.php', ['post' => $post]);\n\n    return new Response($html);\n}\n\n// helper function to render templates\nfunction render_template($path, array $args)\n{\n    extract($args);\n    ob_start();\n    require $path;\n    $html = ob_get_clean();\n\n    return $html;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Routes from a Custom Service Using PHP Configuration Loader in Symfony - PHP\nDESCRIPTION: This PHP snippet illustrates using a RoutingConfigurator to import routes from a custom Symfony service with type 'service'. The $routes->import('admin_route_loader::loadRoutes', 'service') call tells Symfony to execute the designated method on the registered service, which must output a RouteCollection. The service needs to be available under the specified ID and method. This approach allows complex, programmatic route configuration beyond basic file-based imports.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/routing/custom_route_loader.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// config/routes.php\\nuse Symfony\\\\Component\\\\Routing\\\\Loader\\\\Configurator\\\\RoutingConfigurator;\\n\\nreturn static function (RoutingConfigurator $routes): void {\\n    $routes->import('admin_route_loader::loadRoutes', 'service');\\n};\n```\n\n----------------------------------------\n\nTITLE: Optimizing OPcache Configuration for Symfony\nDESCRIPTION: Recommended PHP OPcache configuration settings for Symfony applications, configuring memory consumption and maximum accelerated files for better performance.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/performance.rst#2025-04-22_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n; php.ini\n; maximum memory that OPcache can use to store compiled PHP files\nopcache.memory_consumption=256\n\n; maximum number of files that can be stored in the cache\nopcache.max_accelerated_files=20000\n```\n\n----------------------------------------\n\nTITLE: Rendering a Twig Template in Symfony Controller\nDESCRIPTION: PHP code showing how to render a Twig template from a Symfony controller, passing variables to the template.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/templates.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/UserController.php\nnamespace App\\Controller;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass UserController extends AbstractController\n{\n    // ...\n\n    public function notifications(): Response\n    {\n        // get the user information and notifications somehow\n        $userFirstName = '...';\n        $userNotifications = ['...', '...'];\n\n        // the template path is the relative file path from `templates/`\n        return $this->render('user/notifications.html.twig', [\n            // this array defines the variables passed to the template,\n            // where the key is the variable name and the value is the variable value\n            // (Twig recommends using snake_case variable names: 'foo_bar' instead of 'fooBar')\n            'user_first_name' => $userFirstName,\n            'notifications' => $userNotifications,\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the Symfony Local Web Server (Terminal)\nDESCRIPTION: Navigates into the Symfony project directory and starts the local development web server provided by the Symfony CLI. This server makes the application accessible, typically at `http://localhost:8000/`. Requires Symfony CLI.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup.rst#2025-04-22_snippet_7\n\nLANGUAGE: terminal\nCODE:\n```\n$ cd my-project/\n$ symfony server:start\n```\n\n----------------------------------------\n\nTITLE: Evaluating Age Range Expression in PHP using Symfony's ExpressionLanguage\nDESCRIPTION: This snippet demonstrates how to use Symfony's ExpressionLanguage to evaluate a range expression. It creates a User object, sets its age, and then evaluates whether the age falls within a specified range.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/formats/expression_language.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n    $user = new User();\n    $user->age = 34;\n\n    $expressionLanguage->evaluate(\n        'user.age in 18..45',\n        [\n            'user' => $user,\n        ]\n    );\n```\n\n----------------------------------------\n\nTITLE: Finding Files by Name Pattern (Regex) with Symfony Finder in PHP\nDESCRIPTION: Shows how to use a regular expression to specify the file name pattern when using the `name()` method. The example finds files ending with `.php`.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/finder.rst#2025-04-22_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$finder->files()->name('/\\.php$/');\n```\n\n----------------------------------------\n\nTITLE: Validating Option Types with OptionsResolver in PHP\nDESCRIPTION: This PHP code demonstrates using `setAllowedTypes` within `configureOptions` to enforce specific data types for options. It shows validating a single type ('string' for 'host'), multiple allowed types ('null' or 'int' for 'port' using array or pipe syntax), and validating types of items within an array ('DateTime[]', 'int[]', '(int|string)[]').\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/options_resolver.rst#2025-04-22_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n// ...\nclass Mailer\n{\n    // ...\n\n    public function configureOptions(OptionsResolver $resolver): void\n    {\n        // ...\n\n        // specify one allowed type\n        $resolver->setAllowedTypes('host', 'string');\n\n        // specify multiple allowed types\n        $resolver->setAllowedTypes('port', ['null', 'int']);\n        // if you prefer, you can also use the following equivalent syntax\n        $resolver->setAllowedTypes('port', 'int|null');\n\n        // check all items in an array recursively for a type\n        $resolver->setAllowedTypes('dates', 'DateTime[]');\n        $resolver->setAllowedTypes('ports', 'int[]');\n        // the following syntax means \"an array of integers or an array of strings\"\n        $resolver->setAllowedTypes('endpoints', '(int|string)[]');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Getter Validator Method in Symfony Validator (PHP)\nDESCRIPTION: This snippet defines a custom public getter method, isPasswordSafe(), on the Author class to validate that the user's password does not match their first name. It requires the class to have $firstName and $password properties. The method returns a boolean, supporting Symfony's support for getter-based constraints. The input is the current object state; the output is true if the password is considered safe, otherwise false.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/validator/metadata.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function isPasswordSafe(): bool\n{\n    return $this->firstName !== $this->password;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Symfony Command as a Service with Dependency Injection (PHP)\nDESCRIPTION: Demonstrates a complete Symfony console command class (`SunshineCommand`) defined as a service. It utilizes the `AsCommand` attribute to set the command name (`app:sunshine`). Dependency Injection is used to inject `LoggerInterface` via the constructor, enabled by autowiring. The example shows the basic structure including the mandatory call to `parent::__construct()` when overriding the constructor, and the `configure` and `execute` methods.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/console/commands_as_services.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Command;\n\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Component\\Console\\Attribute\\AsCommand;\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n#[AsCommand(name: 'app:sunshine')]\nclass SunshineCommand extends Command\n{\n    public function __construct(\n        private LoggerInterface $logger,\n    ) {\n        // you *must* call the parent constructor\n        parent::__construct();\n    }\n\n    protected function configure(): void\n    {\n        $this\n            ->setDescription('Good morning!');\n    }\n\n    protected function execute(InputInterface $input, OutputInterface $output): int\n    {\n        $this->logger->info('Waking up the sun');\n        // ...\n\n        return Command::SUCCESS;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up DelegatingLoader with LoaderResolver in PHP\nDESCRIPTION: Shows how to configure and use LoaderResolver and DelegatingLoader to automatically select the appropriate loader for different resource types.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/config/resources.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Acme\\Config\\Loader\\YamlUserLoader;\nuse Symfony\\Component\\Config\\Loader\\DelegatingLoader;\nuse Symfony\\Component\\Config\\Loader\\LoaderResolver;\n\n$loaderResolver = new LoaderResolver([new YamlUserLoader($fileLocator)]);\n$delegatingLoader = new DelegatingLoader($loaderResolver);\n\n// YamlUserLoader is used to load this resource because it supports\n// files with the '.yaml' extension\n$delegatingLoader->load(__DIR__.'/users.yaml');\n```\n\n----------------------------------------\n\nTITLE: Retrieving Clicked Button Name in Symfony Form\nDESCRIPTION: This snippet shows how to get the name of the clicked button using the getClickedButton() method of the form. It also demonstrates how to handle cases with nested forms where buttons might have the same name.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/multiple_buttons.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nif ($form->getClickedButton() && 'saveAndAdd' === $form->getClickedButton()->getName()) {\n    // ...\n}\n\n// when using nested forms, two or more buttons can have the same name;\n// in those cases, compare the button objects instead of the button names\nif ($form->getClickedButton() === $form->get('saveAndAdd')){\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Required Options with OptionsResolver in PHP\nDESCRIPTION: This PHP snippet demonstrates how to mark an option as mandatory using the `setRequired` method within the `configureOptions` method. In this case, the 'host' option is now required and must be provided when creating an instance of `Mailer`.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/options_resolver.rst#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n// ...\nclass Mailer\n{\n    // ...\n\n    public function configureOptions(OptionsResolver $resolver): void\n    {\n        // ...\n        $resolver->setRequired('host');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Symfony HttpFoundation for Request Handling\nDESCRIPTION: PHP code demonstrating the use of Symfony's Request and Response classes for handling HTTP interactions.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/create_framework/http_foundation.rst#2025-04-22_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n// framework/index.php\nrequire_once __DIR__.'/vendor/autoload.php';\n\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\n$request = Request::createFromGlobals();\n\n$name = $request->query->get('name', 'World');\n\n$response = new Response(sprintf('Hello %s', htmlspecialchars($name, ENT_QUOTES, 'UTF-8')));\n\n$response->send();\n```\n\n----------------------------------------\n\nTITLE: Importing Configuration Files with Error Handling - Symfony Config - PHP\nDESCRIPTION: This PHP snippet provides the import functionality for loading other configuration files using the ContainerConfigurator in Symfony. It demonstrates importing PHP, YAML, and handling possible errors with the third parameter to the import function, including 'not_found' and 'true' for silent error suppression. Dependencies include the ContainerConfigurator class, and inputs are file paths, with outputs affecting the dependency injection container configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\\n\\nreturn static function (ContainerConfigurator $container): void {\\n    $container->import('legacy_config.php');\\n\\n    // glob expressions are also supported to load multiple files\\n    $container->import('/etc/myapp/*.yaml');\\n\\n    // the third optional argument of import() is 'ignore_errors'\\n    // 'ignore_errors' set to 'not_found' silently discards errors if the loaded file doesn't exist\\n    $container->import('my_config_file.yaml', null, 'not_found');\\n    // 'ignore_errors' set to true silently discards all errors (including invalid code and not found)\\n    $container->import('my_config_file.yaml', null, true);\\n};\\n\\n// ...\n```\n\n----------------------------------------\n\nTITLE: Serializing an Object to JSON in a Standalone PHP Application\nDESCRIPTION: Shows how to use the Symfony Serializer component outside the full framework. It involves manually instantiating the `Serializer` with the required encoders (`JsonEncoder`) and normalizers (`ObjectNormalizer`). The `serialize` method is then called on the created `Person` object.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Model\\Person;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\Normalizer\\ObjectNormalizer;\nuse Symfony\\Component\\Serializer\\Serializer;\n\n$encoders = [new JsonEncoder()];\n$normalizers = [new ObjectNormalizer()];\n$serializer = new Serializer($normalizers, $encoders);\n\n$person = new Person('Jane Done', 39, false);\n\n$jsonContent = $serializer->serialize($person, 'json');\n// $jsonContent contains {\"name\":\"Jane Doe\",\"age\":39,\"sportsperson\":false}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Kernel Service in YAML\nDESCRIPTION: YAML configuration for registering the CacheKernel as a service decorator with necessary dependencies.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/http_cache/cache_invalidation.rst#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nservices:\n    App\\CacheKernel:\n        decorates: http_cache\n        arguments:\n            - '@kernel'\n            - '@http_cache.store'\n            - '@?esi'\n```\n\n----------------------------------------\n\nTITLE: Customizing Tree Output Style with Built-in TreeStyle Classes (PHP)\nDESCRIPTION: Demonstrates how to use built-in TreeStyle constants with TreeHelper::createTree to apply different rendering styles, such as compact, box, doubleBox, minimal, etc. Adjusting the style affects line characters and resulting output format. Requires symfony/console and importing the TreeStyle class, with optional choice among several static style methods.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/helpers/tree.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Console\\Helper\\TreeStyle;\n// ...\n\n$tree = TreeHelper::createTree($io, $node, [], TreeStyle::compact());\n$tree->render();\n\n```\n\n----------------------------------------\n\nTITLE: Loading Url Validation using PHP Method in Symfony\nDESCRIPTION: Example of using a loadValidatorMetadata method to programmatically add URL validation to a property in a Symfony entity.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Url.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Author.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Author\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('bioUrl', new Assert\\Url());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Template in Symfony Controller\nDESCRIPTION: Shows how to render a template from a Symfony controller using the render() helper method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/templates.rst#2025-04-22_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/ProductController.php\nnamespace App\\Controller;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass ProductController extends AbstractController\n{\n    public function index(): Response\n```\n\n----------------------------------------\n\nTITLE: Extending AbstractBrowser to Create a Custom Client (Symfony, PHP)\nDESCRIPTION: Demonstrates how to implement a custom Client class by extending Symfony\\Component\\BrowserKit\\AbstractBrowser and implementing the doRequest method. Requires symfony/browser-kit to be installed. This class translates a request into a response object and can be further customized to interact with the desired HTTP backend. The doRequest method receives a request and should return a Symfony\\Component\\BrowserKit\\Response instance.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/browser_kit.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace Acme;\\n\\nuse Symfony\\Component\\BrowserKit\\AbstractBrowser;\\nuse Symfony\\Component\\BrowserKit\\Response;\\n\\nclass Client extends AbstractBrowser\\n{\\n    protected function doRequest($request): Response\\n    {\\n        // ... convert request into a response\\n\\n        return new Response($content, $status, $headers);\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Searching Multiple Locations with Symfony Finder in PHP\nDESCRIPTION: Illustrates how to search within multiple directories. This can be achieved either by passing an array of directory paths to the `in()` method or by chaining multiple `in()` calls.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/finder.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// search inside *both* directories\n$finder->in([__DIR__, '/elsewhere']);\n```\n\nLANGUAGE: php\nCODE:\n```\n// same as above\n$finder->in(__DIR__)->in('/elsewhere');\n```\n\n----------------------------------------\n\nTITLE: Retrieving Raw Request Body Content in PHP\nDESCRIPTION: Shows how to access the raw, unprocessed content of the HTTP request body using the `getContent()` method of the `Request` object. This is useful for handling non-standard request formats like XML or raw text sent via POST/PUT.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$content = $request->getContent();\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Access Denied Handler in Symfony PHP\nDESCRIPTION: This PHP class `AccessDeniedHandler` implements `AccessDeniedHandlerInterface` to customize the response when an authenticated user lacks the necessary permissions (resulting in a 403 Forbidden status). The `handle` method receives the Request and the `AccessDeniedException` and should return a custom `Response` object, like one with specific content and a 403 status code.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/access_denied_handler.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// src/Security/AccessDeniedHandler.php\nnamespace App\\Security;\n\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Security\\Core\\Exception\\AccessDeniedException;\nuse Symfony\\Component\\Security\\Http\\Authorization\\AccessDeniedHandlerInterface;\n\nclass AccessDeniedHandler implements AccessDeniedHandlerInterface\n{\n    public function handle(Request $request, AccessDeniedException $accessDeniedException): ?Response\n    {\n        // ...\n\n        return new Response($content, 403);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Friend Message Form Type with User-Based Dynamic Fields\nDESCRIPTION: Form type implementation that creates a message form with fields dynamically populated based on the current authenticated user's friends.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/dynamic_form_modification.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Form\\Type;\n\nuse App\\Entity\\User;\nuse Doctrine\\ORM\\EntityRepository;\nuse Symfony\\Bridge\\Doctrine\\Form\\Type\\EntityType;\nuse Symfony\\Bundle\\SecurityBundle\\Security;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\TextareaType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\TextType;\n\nclass FriendMessageFormType extends AbstractType\n{\n    public function __construct(\n        private Security $security,\n    ) {\n    }\n\n    public function buildForm(FormBuilderInterface $builder, array $options): void\n    {\n        $builder\n            ->add('subject', TextType::class)\n            ->add('body', TextareaType::class)\n        ;\n\n        $user = $this->security->getUser();\n        if (!$user) {\n            throw new \\LogicException(\n                'The FriendMessageFormType cannot be used without an authenticated user!'\n            );\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Form Action and Method in Twig Template\nDESCRIPTION: This Twig template demonstrates how to override the form action URL and HTTP method when rendering a form. This can be done by passing options to the form_start() function.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/forms.rst#2025-04-22_snippet_17\n\nLANGUAGE: twig\nCODE:\n```\n{# templates/task/new.html.twig #}\n{{ form_start(form, {'action': path('target_route'), 'method': 'GET'}) }}\n```\n\n----------------------------------------\n\nTITLE: Presenting Multiple Choice Questions in Symfony Console\nDESCRIPTION: Demonstrates the choice() method for asking questions with a predefined set of answers, including support for default values and multiple selections.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/console/style.rst#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$io->choice('Select the queue to analyze', ['queue1', 'queue2', 'queue3']);\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$io->choice('Select the queue to analyze', ['queue1', 'queue2', 'queue3'], 'queue1');\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$io->choice('Select the queue to analyze', ['queue1', 'queue2', 'queue3'], multiSelect: true);\n```\n\n----------------------------------------\n\nTITLE: Setting the Required Option for Form Fields\nDESCRIPTION: This snippet demonstrates how to set the 'required' option for a form field. By default, this option is set to true, but it can be set to false to make a field optional in both client-side and server-side validation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/forms.rst#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n->add('dueDate', DateType::class, [\n    'required' => false,\n])\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Symfony Messenger Sender for Emailing Actions (PHP)\nDESCRIPTION: This PHP class `ImportantActionToEmailSender` implements the `SenderInterface` from Symfony Messenger to create a custom sender. It depends on `MailerInterface` to send emails. When its `send` method receives an `Envelope` containing an `ImportantAction` message, it constructs and sends an HTML email to a pre-configured address, detailing the action performed using information from the message. It throws an `InvalidArgumentException` if the message type is not `ImportantAction`.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/messenger.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Mailer\\MailerInterface;\nuse Symfony\\Component\\Messenger\\Envelope;\nuse Symfony\\Component\\Messenger\\Transport\\Sender\\SenderInterface;\nuse Symfony\\Component\\Mime\\Email;\n\nclass ImportantActionToEmailSender implements SenderInterface\n{\n    public function __construct(\n        private MailerInterface $mailer,\n        private string $toEmail,\n    ) {\n    }\n\n    public function send(Envelope $envelope): Envelope\n    {\n        $message = $envelope->getMessage();\n\n        if (!$message instanceof ImportantAction) {\n            throw new \\InvalidArgumentException(sprintf('This transport only supports \"%s\" messages.', ImportantAction::class));\n        }\n\n        $this->mailer->send(\n            (new Email())\n                ->to($this->toEmail)\n                ->subject('Important action made')\n                ->html('<h1>Important action</h1><p>Made by '.$message->getUsername().'</p>')\n        );\n\n        return $envelope;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Initializing Symfony Serializer in PHP with Custom Context\nDESCRIPTION: This PHP snippet shows how to initialize a new Symfony Serializer instance manually, providing a custom context to the ObjectNormalizer that disallows extra attributes. It assumes that $encoders has been defined elsewhere and that relevant Symfony components (ObjectNormalizer, NameConverter, etc.) are available. This pattern is helpful for programmatically building serializers outside of configuration files.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer.rst#2025-04-22_snippet_11\n\nLANGUAGE: php-standalone\nCODE:\n```\nuse Symfony\\Component\\Serializer\\NameConverter\\CamelCaseToSnakeCaseNameConverter;\nuse Symfony\\Component\\Serializer\\Normalizer\\ObjectNormalizer;\n\n// ...\n$normalizers = [\n    new ObjectNormalizer(null, null, null, null, null, null, [\n        'allow_extra_attributes' => false,\n    ]),\n];\n$serializer = new Serializer($normalizers, $encoders);\n```\n\n----------------------------------------\n\nTITLE: File Uploader Service Implementation\nDESCRIPTION: Dedicated service class for handling file uploads, providing reusable file upload functionality.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/controller/upload_file.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Service;\n\nuse Symfony\\Component\\HttpFoundation\\File\\Exception\\FileException;\nuse Symfony\\Component\\HttpFoundation\\File\\UploadedFile;\nuse Symfony\\Component\\String\\Slugger\\SluggerInterface;\n\nclass FileUploader\n{\n    public function __construct(\n        private string $targetDirectory,\n        private SluggerInterface $slugger,\n    ) {\n    }\n\n    public function upload(UploadedFile $file): string\n    {\n        $originalFilename = pathinfo($file->getClientOriginalName(), PATHINFO_FILENAME);\n        $safeFilename = $this->slugger->slug($originalFilename);\n        $fileName = $safeFilename.'-'.uniqid().'.'.$file->guessExtension();\n    }\n```\n\n----------------------------------------\n\nTITLE: Basic Repository Query Methods in Doctrine ORM\nDESCRIPTION: Demonstrates common methods for retrieving entities from a repository, including find(), findOneBy(), findBy(), and findAll(). These methods allow for different query patterns when fetching Product entities.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine.rst#2025-04-22_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$repository = $entityManager->getRepository(Product::class);\n\n// look for a single Product by its primary key (usually \"id\")\n$product = $repository->find($id);\n\n// look for a single Product by name\n$product = $repository->findOneBy(['name' => 'Keyboard']);\n// or find by name and price\n$product = $repository->findOneBy([\n    'name' => 'Keyboard',\n    'price' => 1999,\n]);\n\n// look for multiple Product objects matching the name, ordered by price\n$products = $repository->findBy(\n    ['name' => 'Keyboard'],\n    ['price' => 'ASC']\n);\n\n// look for *all* Product objects\n$products = $repository->findAll();\n```\n\n----------------------------------------\n\nTITLE: Defining and Running a Single-file Symfony Kernel with Attribute Routing - PHP 8 Attributes\nDESCRIPTION: Defines a Symfony kernel in a single file using PHP attributes for routing, and leverages the MicroKernelTrait to configure the service container. Requires symfony/framework-bundle, symfony/runtime, and additional HTTP and Routing components. Defines a route with an attribute and a controller returning a random number as JSON. Takes the environment and debug context from runtime, producing a routable application with a single controller.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/micro_kernel_trait.rst#2025-04-22_snippet_1\n\nLANGUAGE: php-attributes\nCODE:\n```\n// index.php\nuse Symfony\\Bundle\\FrameworkBundle\\Kernel\\MicroKernelTrait;\nuse Symfony\\Component\\DependencyInjection\\Loader\\Configurator\\ContainerConfigurator;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpKernel\\Kernel as BaseKernel;\nuse Symfony\\Component\\Routing\\Attribute\\Route;\n\nrequire_once dirname(__DIR__).'/vendor/autoload_runtime.php';\n\nclass Kernel extends BaseKernel\n{\n    use MicroKernelTrait;\n\n    protected function configureContainer(ContainerConfigurator $container): void\n    {\n        // PHP equivalent of config/packages/framework.yaml\n        $container->extension('framework', [\n            'secret' => 'S0ME_SECRET'\n        ]);\n    }\n\n    #[Route('/random/{limit}', name: 'random_number')]\n    public function randomNumber(int $limit): JsonResponse\n    {\n        return new JsonResponse([\n            'number' => random_int(0, $limit),\n        ]);\n    }\n}\n\nreturn static function (array $context) {\n    return new Kernel($context['APP_ENV'], (bool) $context['APP_DEBUG']);\n};\n```\n\n----------------------------------------\n\nTITLE: Handling YAML Parsing Errors in PHP\nDESCRIPTION: Shows how to wrap the `Yaml::parse` call in a try-catch block to handle potential `ParseException` exceptions. If the input YAML string is invalid, a `ParseException` is thrown, and its message can be caught and displayed.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/yaml.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Yaml\\Exception\\ParseException;\n\ntry {\n    $value = Yaml::parse('...');\n} catch (ParseException $exception) {\n    printf('Unable to parse the YAML string: %s', $exception->getMessage());\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Sending Emails with Symfony Mailer\nDESCRIPTION: Example of creating a controller that uses MailerInterface to instantiate and send an Email object with various recipient options, subject, and content.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/MailerController.php\nnamespace App\\Controller;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Mailer\\MailerInterface;\nuse Symfony\\Component\\Mime\\Email;\nuse Symfony\\Component\\Routing\\Attribute\\Route;\n\nclass MailerController extends AbstractController\n{\n    #[Route('/email')]\n    public function sendEmail(MailerInterface $mailer): Response\n    {\n        $email = (new Email())\n            ->from('hello@example.com')\n            ->to('you@example.com')\n            //->cc('cc@example.com')\n            //->bcc('bcc@example.com')\n            //->replyTo('fabien@example.com')\n            //->priority(Email::PRIORITY_HIGH)\n            ->subject('Time for Symfony Mailer!')\n            ->text('Sending emails is fun again!')\n            ->html('<p>See Twig integration for better HTML integration!</p>');\n\n        $mailer->send($email);\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Secure Client IP Retrieval with Symfony HttpFoundation\nDESCRIPTION: Demonstration of securely retrieving client IP address using Symfony's Request class, including proxy handling.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/create_framework/http_foundation.rst#2025-04-22_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n$request = Request::createFromGlobals();\n\nif ($myIp === $request->getClientIp()) {\n    // the client is a known one, so give it some more privilege\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Standalone Form with Default Values using FormFactory (PHP)\nDESCRIPTION: Demonstrates setting default values for a form in a standalone PHP application using the `$formFactory`. The default data array (`$defaults`) is passed as the second argument to the `createBuilder` method, following the form type class (`FormType::class`). This is useful for pre-filling edit forms. Requires a pre-configured `$formFactory`.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/form.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\DateType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\FormType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\TextType;\n\n// ...\n\n$defaults = [\n    'dueDate' => new \\DateTime('tomorrow'),\n];\n\n$form = $formFactory->createBuilder(FormType::class, $defaults)\n    ->add('task', TextType::class)\n    ->add('dueDate', DateType::class)\n    ->getForm();\n```\n\n----------------------------------------\n\nTITLE: Basic Form Type Test Implementation in PHP\nDESCRIPTION: Basic implementation of TypeTestCase showing form data submission and view testing. Demonstrates validation of form compilation, data transformation, and custom view variables.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/unit_testing.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Tests\\Form\\Type;\n\nuse App\\Form\\Type\\TestedType;\nuse App\\Model\\TestObject;\nuse Symfony\\Component\\Form\\Test\\TypeTestCase;\n\nclass TestedTypeTest extends TypeTestCase\n{\n    public function testSubmitValidData(): void\n    {\n        $formData = [\n            'test' => 'test',\n            'test2' => 'test2',\n        ];\n\n        $model = new TestObject();\n        $form = $this->factory->create(TestedType::class, $model);\n\n        $expected = new TestObject();\n\n        $form->submit($formData);\n\n        $this->assertTrue($form->isSynchronized());\n        $this->assertEquals($expected, $model);\n    }\n\n    public function testCustomFormView(): void\n    {\n        $formData = new TestObject();\n\n        $view = $this->factory->create(TestedType::class, $formData)\n            ->createView();\n\n        $this->assertArrayHasKey('custom_var', $view->vars);\n        $this->assertSame('expected value', $view->vars['custom_var']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Batch LDAP Updates in PHP\nDESCRIPTION: Demonstrates how to perform multiple attribute modifications on an LDAP entry in a single operation using the `applyOperations` method of the `EntryManager`. This example adds two email addresses using `LDAP_MODIFY_BATCH_ADD` operations.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/ldap.rst#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Ldap\\Entry;\nuse Symfony\\Component\\Ldap\\Ldap;\n// ...\n\n$entry = new Entry('cn=Fabien Potencier,dc=symfony,dc=com', [\n    'sn' => ['fabpot'],\n    'objectClass' => ['inetOrgPerson'],\n]);\n\n$entryManager = $ldap->getEntryManager();\n\n// Adding multiple email addresses at once\n$entryManager->applyOperations($entry->getDn(), [\n    new UpdateOperation(LDAP_MODIFY_BATCH_ADD, 'mail', 'new1@example.com'),\n    new UpdateOperation(LDAP_MODIFY_BATCH_ADD, 'mail', 'new2@example.com'),\n]);\n```\n\n----------------------------------------\n\nTITLE: Registering a Dependency Injection Extension in PHP\nDESCRIPTION: Registers a custom extension class (which must implement `ExtensionInterface`) with the container builder. Extensions allow modular management of service configuration, processed during the container compilation phase.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/dependency_injection/compilation.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$container->registerExtension($extension);\n```\n\n----------------------------------------\n\nTITLE: Registering Type Guesser in PHP Configuration\nDESCRIPTION: PHP configuration for registering the custom type guesser service and using it standalone with FormFactoryBuilder\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/type_guesser.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Form\\TypeGuesser\\PhpDocTypeGuesser;\nuse Symfony\\Component\\Form\\Forms;\n\n$formFactory = Forms::createFormFactoryBuilder()\n    ->addTypeGuesser(new PhpDocTypeGuesser())\n    ->getFormFactory();\n```\n\n----------------------------------------\n\nTITLE: Setting Table Titles\nDESCRIPTION: Demonstrates how to add header and footer titles to a Symfony console table.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/helpers/table.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$table->setHeaderTitle('Books');\n$table->setFooterTitle('Page 1/2');\n$table->render();\n```\n\n----------------------------------------\n\nTITLE: Using Process Iterator to Get Real-time Output (Skipping Errors) in PHP\nDESCRIPTION: Shows how to obtain the underlying iterator using `getIterator()` and customize its behavior using flags like `ITER_SKIP_ERR` (to ignore standard error) and `ITER_KEEP_OUTPUT` (the default behavior for getting standard output). The process must be started asynchronously using `start()` before iterating. Depends on the Symfony Process component.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/process.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$process = new Process(['ls', '-lsa']);\n$process->start();\n$iterator = $process->getIterator($process::ITER_SKIP_ERR | $process::ITER_KEEP_OUTPUT);\nforeach ($iterator as $data) {\n    echo $data.\"\\n\";\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Currency Names and Symbols with Default Locale in PHP\nDESCRIPTION: Demonstrates retrieving a list of all currency names, the name for a specific currency code (e.g., 'INR'), and the symbol for a specific currency code using the `Symfony\\Component\\Intl\\Currencies` class. It relies on the default locale set via `\\Locale::setDefault('en')`.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/intl.rst#2025-04-22_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Intl\\Currencies;\n\n\\Locale::setDefault('en');\n\n$currencies = Currencies::getNames();\n// ('currencyCode' => 'currencyName')\n// => ['AFN' => 'Afghan Afghani', 'ALL' => 'Albanian Lek', ...]\n\n$currency = Currencies::getName('INR');\n// => 'Indian Rupee'\n\n$symbol = Currencies::getSymbol('INR');\n// => '₹'\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Providers in YAML\nDESCRIPTION: YAML configuration for setting up various cache providers including Doctrine DBAL, Redis, Memcached, and PDO in Symfony.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/cache.rst#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/cache.yaml\nframework:\n    cache:\n        directory: '%kernel.cache_dir%/pools' # Only used with cache.adapter.filesystem\n\n        default_doctrine_dbal_provider: 'doctrine.dbal.default_connection'\n        default_psr6_provider: 'app.my_psr6_service'\n        default_redis_provider: 'redis://localhost'\n        default_memcached_provider: 'memcached://localhost'\n        default_pdo_provider: 'pgsql:host=localhost'\n```\n\n----------------------------------------\n\nTITLE: Defining Separate Normalization and Denormalization Contexts with PHP Attributes in Symfony\nDESCRIPTION: This PHP attribute example sets distinct normalization and denormalization contexts for a property in a Symfony model using #[Context]. The normalization context uses 'Y-m-d' for serialization, while the denormalization context uses \\DateTime::RFC3339 for parsing input. This enables fine-grained control directly at the entity property level.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer.rst#2025-04-22_snippet_18\n\nLANGUAGE: php-attributes\nCODE:\n```\n// src/Model/Person.php\n\n// ...\nuse Symfony\\Component\\Serializer\\Attribute\\Context;\nuse Symfony\\Component\\Serializer\\Normalizer\\DateTimeNormalizer;\n\nclass Person\n{\n    #[Context(\n        normalizationContext: [DateTimeNormalizer::FORMAT_KEY => 'Y-m-d'],\n        denormalizationContext: [DateTimeNormalizer::FORMAT_KEY => \\DateTime::RFC3339],\n    )]\n    public \\DateTimeImmutable $createdAt;\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring proc_open Options for a Process in PHP\nDESCRIPTION: Demonstrates setting specific options for the underlying PHP `proc_open` call using the `setOptions()` method. The example shows setting `create_new_console` (primarily useful on Windows) to potentially allow the subprocess to persist after the parent script ends. Many options are OS-specific and may not work on all platforms. Depends on the Symfony Process component.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/process.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$process = new Process(['...', '...', '...']);\n// this option allows a subprocess to continue running after the main script exited\n$process->setOptions(['create_new_console' => true]);\n```\n\n----------------------------------------\n\nTITLE: Standalone PHP Serialization Example\nDESCRIPTION: Demonstrates how to use Symfony's serializer component in a standalone PHP context for converting between objects, arrays and JSON.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer.rst#2025-04-22_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Model\\Person;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\Normalizer\\ObjectNormalizer;\nuse Symfony\\Component\\Serializer\\Serializer;\n\n$encoders = [new JsonEncoder()];\n$normalizers = [new ObjectNormalizer()];\n$serializer = new Serializer($normalizers, $encoders);\n\n// use normalize() to convert a PHP object to an array\n$personArray = $serializer->normalize($person, 'json');\n\n// ...and denormalize() to convert an array back to a PHP object\n$personCopy = $serializer->denormalize($personArray, Person::class);\n\n$data = ['name' => 'Jane Doe'];\n\n// use encode() to transform PHP arrays into another format\n$json = $serializer->encode($data, 'json');\n\n// ...and decode() to transform any format to just PHP arrays (instead of objects)\n$data = $serializer->decode('{\"name\":\"Charlie Doe\"}', 'json');\n// $data contains ['name' => 'Charlie Doe']\n```\n\n----------------------------------------\n\nTITLE: Extracting HTML from Symfony DomCrawler Nodes in PHP\nDESCRIPTION: Illustrates different ways to retrieve HTML from a DomCrawler instance, including iterating over nodes using ownerDocument->saveHTML, and calling the html or outerHtml methods. The html method can accept a default value, and outerHtml provides the full node markup. Useful for serialization or debugging scraped data.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/dom_crawler.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$html = '';\n\nforeach ($crawler as $domElement) {\n    $html .= $domElement->ownerDocument->saveHTML($domElement);\n}\n\n```\n\nLANGUAGE: php\nCODE:\n```\n// if the node does not exist, calling to html() will result in an exception\n$html = $crawler->html();\n\n// avoid the exception passing an argument that html() returns when node does not exist\n$html = $crawler->html('Default <strong>HTML</strong> content');\n```\n\nLANGUAGE: php\nCODE:\n```\n$html = $crawler->outerHtml();\n```\n\n----------------------------------------\n\nTITLE: Reading File Contents as Environment Variables in PHP\nDESCRIPTION: Example of using the file processor to read the contents of a file and use it as an environment variable in PHP configuration. This reads authentication data from a JSON file.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/env_var_processors.rst#2025-04-22_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/framework.php\n$container->setParameter('env(AUTH_FILE)', '../config/auth.json');\n$container->loadFromExtension('google', [\n    'auth' => '%env(file:AUTH_FILE)%',\n]);\n```\n\n----------------------------------------\n\nTITLE: Limiting Email Sending Rate\nDESCRIPTION: Configuration example showing how to set a rate limit with the max_per_second option to control how many emails can be sent per second.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$dsn = 'smtps://smtp.example.com?max_per_second=2'\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Lucky Number Controller in PHP\nDESCRIPTION: Demonstrates creating a simple controller class that generates and returns a random number between 0-100 as an HTML response.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/page_creation.rst#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n// src/Controller/LuckyController.php\nnamespace App\\Controller;\n\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass LuckyController\n{\n    public function number(): Response\n    {\n        $number = random_int(0, 100);\n\n        return new Response(\n            '<html><body>Lucky number: '.$number.'</body></html>'\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Lock from Key and Dispatching for Cross-Process Locking in PHP\nDESCRIPTION: Illustrates how to use a `Symfony\\Component\\Lock\\Key` for cross-process locking scenarios. A `Key` is created for a specific resource. Then, `createLockFromKey` is used to instantiate a lock from this key, specifying a TTL (300 seconds) and disabling auto-release (`false`). The lock is acquired (blocking), and an object containing the `Key` and related data (`RefreshTaxonomy`) is dispatched, typically via a message bus (`$this->bus`), for processing by another worker.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/lock.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Lock\\RefreshTaxonomy;\nuse Symfony\\Component\\Lock\\Key;\n\n$key = new Key('article.'.$article->getId());\n$lock = $factory->createLockFromKey(\n    $key,\n    300,  // ttl\n    false // autoRelease\n);\n$lock->acquire(true);\n\n$this->bus->dispatch(new RefreshTaxonomy($article, $key));\n```\n\n----------------------------------------\n\nTITLE: Serializing an Object to JSON in a Symfony Controller\nDESCRIPTION: Demonstrates how to serialize a `Person` object into a JSON string within a Symfony controller action. It uses dependency injection to get the `SerializerInterface` service and calls its `serialize` method, specifying 'json' as the format. The resulting JSON string is then returned in a `JsonResponse`.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/PersonController.php\nnamespace App\\Controller;\n\nuse App\\Model\\Person;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\n\nclass PersonController extends AbstractController\n{\n    public function index(SerializerInterface $serializer): Response\n    {\n        $person = new Person('Jane Doe', 39, false);\n\n        $jsonContent = $serializer->serialize($person, 'json');\n        // $jsonContent contains {\"name\":\"Jane Doe\",\"age\":39,\"sportsperson\":false}\n\n        return JsonResponse::fromJsonString($jsonContent);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Objects with Doctrine Entity Manager\nDESCRIPTION: Shows how to remove an entity from the database using Doctrine's remove() and flush() methods.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine.rst#2025-04-22_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n$entityManager->remove($product);\n$entityManager->flush();\n```\n\n----------------------------------------\n\nTITLE: Deserializing into an Existing Object with Symfony Serializer\nDESCRIPTION: Shows how to update an existing object during deserialization instead of creating a new instance by using the OBJECT_TO_POPULATE option in the serializer context.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer.rst#2025-04-22_snippet_60\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Serializer\\Normalizer\\AbstractNormalizer;\n\n// ...\n$person = new Person('Jane Doe', 59);\n\n$serializer->deserialize($jsonData, Person::class, 'json', [\n    AbstractNormalizer::OBJECT_TO_POPULATE => $person,\n]);\n// instead of returning a new object, $person is updated instead\n```\n\n----------------------------------------\n\nTITLE: Navigating Browser History in Symfony BrowserKit (PHP)\nDESCRIPTION: Example showing how to navigate browser history with Symfony's BrowserKit component. The code demonstrates creating a client, making a GET request, clicking a link, and using back and forward navigation methods.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/browser_kit.rst#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Acme\\Client;\n\n$client = new Client();\n$client->request('GET', '/');\n\n// select and click on a link\n$link = $crawler->selectLink('Documentation')->link();\n$client->click($link);\n\n// go back to home page\n$crawler = $client->back();\n\n// go forward to documentation page\n$crawler = $client->forward();\n```\n\n----------------------------------------\n\nTITLE: Registering an Event Subscriber with the Dispatcher in PHP\nDESCRIPTION: Demonstrates how to register an event subscriber instance (`StoreSubscriber`) with the event dispatcher using the `addSubscriber()` method. The dispatcher automatically reads the subscriptions defined in the subscriber's `getSubscribedEvents()` method and registers the corresponding listeners.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/event_dispatcher.rst#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Acme\\Store\\Event\\StoreSubscriber;\n// ...\n\n$subscriber = new StoreSubscriber();\n$dispatcher->addSubscriber($subscriber);\n```\n\n----------------------------------------\n\nTITLE: Processing Extension Configuration with Config Component in PHP\nDESCRIPTION: Demonstrates the recommended way to handle configuration within an extension's `load()` method using Symfony's Config component. It uses a `Configuration` class (specific to the extension, not shown) and a `Processor` to merge and validate configuration values from the `$configs` array.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/dependency_injection/compilation.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Config\\Definition\\Processor;\n// ...\n\npublic function load(array $configs, ContainerBuilder $container): void\n{\n    $configuration = new Configuration();\n    $processor = new Processor();\n    $config = $processor->processConfiguration($configuration, $configs);\n\n    $foo = $config['foo']; //fooValue\n    $bar = $config['bar']; //barValue\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Querying with ULID in Doctrine Repository (PHP)\nDESCRIPTION: Shows how to use ULIDs in Doctrine queries, specifically when building custom queries. It demonstrates setting the ULID type for parameters in the query builder.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/uid.rst#2025-04-22_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n// src/Repository/ProductRepository.php\n\n// ...\nuse Symfony\\Bridge\\Doctrine\\Types\\UlidType;\n\nclass ProductRepository extends ServiceEntityRepository\n{\n    // ...\n\n    public function findUserProducts(User $user): array\n    {\n        $qb = $this->createQueryBuilder('p')\n            // ...\n            // add UlidType::NAME as the third argument to tell Doctrine that this is a ULID\n            ->setParameter('user', $user->getUlid(), UlidType::NAME)\n\n            // alternatively, you can convert it to a value compatible with\n            // the type inferred by Doctrine\n            ->setParameter('user', $user->getUlid()->toBinary())\n        ;\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Cache Contracts in Symfony PHP\nDESCRIPTION: Demonstrates how to use the Symfony\\Contracts\\Cache\\CacheInterface for fetching, storing, and deleting cache items with a FilesystemAdapter. Shows stampede protection and early expiration features.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/cache/cache_pools.rst#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Cache\\Adapter\\FilesystemAdapter;\nuse Symfony\\Contracts\\Cache\\ItemInterface;\n\n$cache = new FilesystemAdapter();\n\n// The callable will only be executed on a cache miss.\n$value = $cache->get('my_cache_key', function (ItemInterface $item): string {\n    $item->expiresAfter(3600);\n\n    // ... do some HTTP request or heavy computations\n    $computedValue = 'foobar';\n\n    return $computedValue;\n});\n\necho $value; // 'foobar'\n\n// ... and to remove the cache key\n$cache->delete('my_cache_key');\n```\n\n----------------------------------------\n\nTITLE: Saving Cache Items with PSR-6 in Symfony PHP\nDESCRIPTION: Demonstrates how to save cache items using PSR-6 methods in Symfony, including immediate saving with save() and deferred saving with saveDeferred() and commit().\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/cache/cache_pools.rst#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n// ...\n$userFriends = $cache->getItem('user_'.$userId.'_friends');\n$userFriends->set($user->getFriends());\n$isSaved = $cache->save($userFriends);\n\n// ...\n$isQueued = $cache->saveDeferred($userFriends);\n// ...\n$isQueued = $cache->saveDeferred($userPreferences);\n// ...\n$isQueued = $cache->saveDeferred($userRecentProducts);\n// ...\n$isSaved = $cache->commit();\n```\n\n----------------------------------------\n\nTITLE: Configuring Property Constraints with PHP Attributes in Symfony\nDESCRIPTION: Example of using PHP attributes to configure validation constraints on a class property in Symfony. It applies NotBlank and Length constraints to a firstName property.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/validation.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Author.php\n\n// ...\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Author\n{\n    #[Assert\\NotBlank]\n    #[Assert\\Length(min: 3)]\n    private string $firstName;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Template Rendering in Symfony Controller\nDESCRIPTION: Demonstrates using render() and renderView() methods in a Symfony controller to generate responses with template content\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/templates.rst#2025-04-22_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nreturn $this->render('product/index.html.twig', [\n    'category' => '...',\n    'promotions' => ['...', '...'],\n]);\n\n$contents = $this->renderView('product/index.html.twig', [\n    'category' => '...',\n    'promotions' => ['...', '...'],\n]);\n\nreturn new Response($contents);\n```\n\n----------------------------------------\n\nTITLE: Creating Output Sections in Symfony Console Command\nDESCRIPTION: Demonstrates how to create and manipulate output sections in a Symfony console command. This allows for more advanced output control like clearing and overwriting specific regions of the console output.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/console.rst#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Console\\Output\\ConsoleOutputInterface;\n\nclass MyCommand extends Command\n{\n    protected function execute(InputInterface $input, OutputInterface $output): int\n    {\n        if (!$output instanceof ConsoleOutputInterface) {\n            throw new \\LogicException('This command accepts only an instance of \"ConsoleOutputInterface\".');\n        }\n\n        $section1 = $output->section();\n        $section2 = $output->section();\n\n        $section1->writeln('Hello');\n        $section2->writeln('World!');\n        sleep(1);\n        // Output displays \"Hello\\nWorld!\\n\"\n\n        // overwrite() replaces all the existing section contents with the given content\n        $section1->overwrite('Goodbye');\n        sleep(1);\n        // Output now displays \"Goodbye\\nWorld!\\n\"\n\n        // clear() deletes all the section contents...\n        $section2->clear();\n        sleep(1);\n        // Output now displays \"Goodbye\\n\"\n\n        // ...but you can also delete a given number of lines\n        // (this example deletes the last two lines of the section)\n        $section1->clear(2);\n        sleep(1);\n        // Output is now completely empty!\n\n        // setting the max height of a section will make new lines replace the old ones\n        $section1->setMaxHeight(2);\n        $section1->writeln('Line1');\n        $section1->writeln('Line2');\n        $section1->writeln('Line3');\n\n        return Command::SUCCESS;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Route Attribute to Controller\nDESCRIPTION: Shows how to add routing configuration using PHP attributes to map the controller to a URL path /lucky/number.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/page_creation.rst#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Routing\\Attribute\\Route;\n\nclass LuckyController\n{\n    #[Route('/lucky/number')]\n    public function number(): Response\n    {\n        // this looks exactly the same\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Scheduler Message Handler in PHP\nDESCRIPTION: Defines a PHP class `SendDailySalesReportsHandler` responsible for processing `SendDailySalesReports` messages. It uses the `AsMessageHandler` attribute for autoconfiguration within the Symfony framework, linking it to the message type via its `__invoke` method signature.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/scheduler.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// src/Scheduler/Handler/SendDailySalesReportsHandler.php\nnamespace App\\Scheduler\\Handler;\n\nuse App\\Scheduler\\Message\\SendDailySalesReports;\nuse Symfony\\Component\\Messenger\\Attribute\\AsMessageHandler;\n\n#[AsMessageHandler]\nclass SendDailySalesReportsHandler\n{\n    public function __invoke(SendDailySalesReports $message)\n    {\n        // ... do some work to send the report to the customers\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing and Linting Expressions with ExpressionLanguage in PHP\nDESCRIPTION: Shows how to use the `parse()` method to get an Abstract Syntax Tree (AST) representation of an expression and the `lint()` method to check for syntax errors. `lint()` throws a `SyntaxError` if the expression is invalid or contains undefined variables/functions unless specific flags are used.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/expression_language.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\ExpressionLanguage\\ExpressionLanguage;\n\n$expressionLanguage = new ExpressionLanguage();\n\nvar_dump($expressionLanguage->parse('1 + 2', []));\n// displays the AST nodes of the expression which can be\n// inspected and manipulated\n\n$expressionLanguage->lint('1 + 2', []); // doesn't throw anything\n\n$expressionLanguage->lint('1 + a', []);\n// throws a SyntaxError exception:\n// \"Variable \\\"a\\\" is not valid around position 5 for expression `1 + a`.\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Fake Container for Testing Service Subscribers in PHP\nDESCRIPTION: Example showing how to create a fake container using ServiceLocatorTrait to unit test a service subscriber. This approach allows for creating mock services and injecting them into the service subscriber.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/service_subscribers_locators.rst#2025-04-22_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Contracts\\Service\\ServiceLocatorTrait;\nuse Symfony\\Contracts\\Service\\ServiceProviderInterface;\n\n// Create the fake services\n$foo = new stdClass();\n$bar = new stdClass();\n$bar->foo = $foo;\n\n// Create the fake container\n$container = new class([\n    'foo' => fn () => $foo,\n    'bar' => fn () => $bar,\n]) implements ServiceProviderInterface {\n    use ServiceLocatorTrait;\n};\n\n// Create the service subscriber\n$serviceSubscriber = new MyService($container);\n// ...\n```\n\n----------------------------------------\n\nTITLE: Creating Symfony Uuid Objects from Various Formats in PHP\nDESCRIPTION: Provides examples of constructing a `Symfony\\Component\\Uid\\Uuid` object from different representations: a standard string (`fromString`), binary data (`fromBinary`), Base32 (`fromBase32`), Base58 (`fromBase58`), and RFC 4122 format (`fromRfc4122`). All methods shown produce the same Uuid object for the given input value.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/uid.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// all the following examples would generate the same Uuid object\n$uuid = Uuid::fromString('d9e7a184-5d5b-11ea-a62a-3499710062d0');\n$uuid = Uuid::fromBinary(\"\\xd9\\xe7\\xa1\\x84\\x5d\\x5b\\x11\\xea\\xa6\\x2a\\x34\\x99\\x71\\x00\\x62\\xd0\");\n$uuid = Uuid::fromBase32('6SWYGR8QAV27NACAHMK5RG0RPG');\n$uuid = Uuid::fromBase58('TuetYWNHhmuSQ3xPoVLv9M');\n$uuid = Uuid::fromRfc4122('d9e7a184-5d5b-11ea-a62a-3499710062d0');\n```\n\n----------------------------------------\n\nTITLE: Configuring Named Autowiring Aliases in Symfony (YAML, XML, PHP)\nDESCRIPTION: Demonstrates configuring Symfony services with multiple implementations of an interface (`TransformerInterface`). It sets a default alias (`Rot13Transformer`) and a named alias (`UppercaseTransformer`) triggered when the type-hint `TransformerInterface` is combined with the specific argument name `$shoutyTransformer`. It also shows configuration for `TwitterClient` using the default alias and comments on how to manually wire a different service.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/autowiring.rst#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nservices:\n    # ...\n\n    App\\Util\\Rot13Transformer: ~\n    App\\Util\\UppercaseTransformer: ~\n\n    # the App\\Util\\UppercaseTransformer service will be\n    # injected when an App\\Util\\TransformerInterface\n    # type-hint for a $shoutyTransformer argument is detected\n    App\\Util\\TransformerInterface $shoutyTransformer: '@App\\Util\\UppercaseTransformer'\n\n    # If the argument used for injection does not match, but the\n    # type-hint still matches, the App\\Util\\Rot13Transformer\n    # service will be injected.\n    App\\Util\\TransformerInterface: '@App\\Util\\Rot13Transformer'\n\n    App\\Service\\TwitterClient:\n        # the Rot13Transformer will be passed as the $transformer argument\n        autowire: true\n\n        # If you wanted to choose the non-default service and do not\n        # want to use a named autowiring alias, wire it manually:\n        # arguments:\n        #     $transformer: '@App\\Util\\UppercaseTransformer'\n        # ...\n```\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <!-- ... -->\n        <service id=\"App\\Util\\Rot13Transformer\"/>\n        <service id=\"App\\Util\\UppercaseTransformer\"/>\n\n        <service id=\"App\\Util\\TransformerInterface\" alias=\"App\\Util\\Rot13Transformer\"/>\n        <service\n            id=\"App\\Util\\TransformerInterface $shoutyTransformer\"\n            alias=\"App\\Util\\UppercaseTransformer\"/>\n\n        <service id=\"App\\Service\\TwitterClient\" autowire=\"true\">\n            <!-- <argument key=\"$transformer\" type=\"service\" id=\"App\\Util\\UppercaseTransformer\"/> -->\n        </service>\n    </services>\n</container>\n```\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nuse App\\Service\\MastodonClient;\nuse App\\Service\\TwitterClient;\nuse App\\Util\\Rot13Transformer;\nuse App\\Util\\TransformerInterface;\nuse App\\Util\\UppercaseTransformer;\n\nreturn function(ContainerConfigurator $container): void {\n    // ...\n\n    $services->set(Rot13Transformer::class)->autowire();\n    $services->set(UppercaseTransformer::class)->autowire();\n\n    // the App\\Util\\UppercaseTransformer service will be\n    // injected when an App\\Util\\TransformerInterface\n    // type-hint for a $shoutyTransformer argument is detected\n    $services->alias(TransformerInterface::class.' $shoutyTransformer', UppercaseTransformer::class);\n\n    // If the argument used for injection does not match, but the\n    // type-hint still matches, the App\\Util\\Rot13Transformer\n    // service will be injected.\n    $services->alias(TransformerInterface::class, Rot13Transformer::class);\n\n    $services->set(TwitterClient::class)\n        // the Rot13Transformer will be passed as the $transformer argument\n        ->autowire()\n\n        // If you wanted to choose the non-default service and do not\n        // want to use a named autowiring alias, wire it manually:\n        //     ->arg('$transformer', service(UppercaseTransformer::class))\n        // ...\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Order Form Type with Postal Address in Symfony PHP\nDESCRIPTION: Example showing how to configure and build an order form type with a postal address component, including custom options and field configurations.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/create_custom_field_type.rst#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nclass OrderType extends AbstractType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options): void\n    {\n        $builder\n            ->add('address', PostalAddressType::class, [\n                'is_extended_address' => true,\n                'allowed_states' => ['CA', 'FL', 'TX'],\n            ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Including Twig Template Fragments\nDESCRIPTION: Demonstrates how to extract reusable Twig code into a template fragment and include it in other templates using the include() function. Shows passing variables to the included template.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/templates.rst#2025-04-22_snippet_34\n\nLANGUAGE: twig\nCODE:\n```\n{# templates/blog/index.html.twig #}\n\n{# ... #}\n{{ include('blog/_user_profile.html.twig') }}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{# templates/blog/index.html.twig #}\n\n{# ... #}\n{{ include('blog/_user_profile.html.twig', {user: blog_post.author}) }}\n```\n\n----------------------------------------\n\nTITLE: Fetching Objects with EntityManager in Symfony\nDESCRIPTION: Controller method that retrieves a Product entity by ID using Doctrine's EntityManager. Shows error handling for non-existent entities.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine.rst#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/ProductController.php\nnamespace App\\Controller;\n\nuse App\\Entity\\Product;\nuse Doctrine\\ORM\\EntityManagerInterface;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Attribute\\Route;\n// ...\n\nclass ProductController extends AbstractController\n{\n    #[Route('/product/{id}', name: 'product_show')]\n    public function show(EntityManagerInterface $entityManager, int $id): Response\n    {\n        $product = $entityManager->getRepository(Product::class)->find($id);\n\n        if (!$product) {\n            throw $this->createNotFoundException(\n                'No product found for id '.$id\n            );\n        }\n\n        return new Response('Check out this great product: '.$product->getName());\n\n        // or render a template\n        // in the template, print things with {{ product.name }}\n        // return $this->render('product/show.html.twig', ['product' => $product]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic CollectionType Email Form Configuration in PHP\nDESCRIPTION: Demonstrates how to configure a CollectionType field for managing an array of email addresses using EmailType as the entry type.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/collection.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\CollectionType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\EmailType;\n// ...\n\n$builder->add('emails', CollectionType::class, [\n    // each entry in the array will be an \"email\" field\n    'entry_type' => EmailType::class,\n    // these options are passed to each \"email\" type\n    'entry_options' => [\n        'attr' => ['class' => 'email-box'],\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Reading File Contents as Environment Variables in YAML\nDESCRIPTION: Example of using the file processor to read the contents of a file and use it as an environment variable in YAML configuration. This reads authentication data from a JSON file.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/env_var_processors.rst#2025-04-22_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/framework.yaml\nparameters:\n    env(AUTH_FILE): '%kernel.project_dir%/config/auth.json'\ngoogle:\n    auth: '%env(file:AUTH_FILE)%'\n```\n\n----------------------------------------\n\nTITLE: Configuring Enum Nodes with Backed Enum Class and Custom Value Sets in Symfony (PHP)\nDESCRIPTION: Shows advanced usage of enumNode: referencing all enum cases via Delivery::cases(), mixing explicit enum cases with scalars and using enumClass() to point to an enum's FQCN for automatic value derivation. Requires PHP 8.1+ enums and Symfony Config 7.3+ for enumClass. Inputs are configuration values; outputs are checked for membership in the enum's possible cases. Useful for flexible enum-based configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/config/definition.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$rootNode\n    ->children()\n        ->enumNode('delivery')\n            // You can provide all values of the enum...\n            ->values(Delivery::cases())\n            // ... or you can pass only some values next to other scalar values\n            ->values([Delivery::Priority, Delivery::Standard, 'other', false])\n        ->end()\n    ->end()\n;\n\n$rootNode\n    ->children()\n        ->enumNode('delivery')\n            ->enumClass(Delivery::class)\n        ->end()\n    ->end()\n;\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Symfony Bundle Class\nDESCRIPTION: Example of creating a minimal bundle class that extends AbstractBundle. Shows the basic structure required for a new Symfony bundle.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/bundles.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// src/AcmeBlogBundle.php\nnamespace Acme\\BlogBundle;\n\nuse Symfony\\Component\\HttpKernel\\Bundle\\AbstractBundle;\n\nclass AcmeBlogBundle extends AbstractBundle\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Localized Timezone Offsets with Symfony Intl\nDESCRIPTION: Example showing how to get timezone offset strings in different languages by passing a locale as the third parameter to getGmtOffset.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/intl.rst#2025-04-22_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n$offset = Timezones::getGmtOffset('Europe/Madrid', strtotime('October 28, 2019'), 'ar'); // $offset = 'غرينتش+01:00'\n$offset = Timezones::getGmtOffset('Europe/Madrid', strtotime('October 28, 2019'), 'dz'); // $offset = 'ཇི་ཨེམ་ཏི་+01:00'\n```\n\n----------------------------------------\n\nTITLE: Defining Event Names as Constants in PHP\nDESCRIPTION: Illustrates defining event names as constants within a dedicated class (`StoreEvents`). This approach promotes consistency and avoids string literals when dispatching events, especially useful when no custom data needs to be passed with the event, allowing the use of the generic `Symfony\\Contracts\\EventDispatcher\\Event` class. The `@Event` annotation suggests integration with tooling or documentation generation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/event_dispatcher.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Event;\n\nclass StoreEvents {\n\n    /**\n    * @Event(\"Symfony\\Contracts\\EventDispatcher\\Event\")\n    */\n    public const ORDER_PLACED = 'order.placed';\n}\n```\n\n----------------------------------------\n\nTITLE: Functional Testing of Doctrine Repository in Symfony with PHP\nDESCRIPTION: This snippet illustrates how to perform functional testing of a Doctrine repository in Symfony. It shows how to set up the test environment, retrieve the EntityManager from the service container, and execute actual database queries.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/testing/database.rst#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n// tests/Repository/ProductRepositoryTest.php\nnamespace App\\Tests\\Repository;\n\nuse App\\Entity\\Product;\nuse Doctrine\\ORM\\EntityManager;\nuse Symfony\\Bundle\\FrameworkBundle\\Test\\KernelTestCase;\n\nclass ProductRepositoryTest extends KernelTestCase\n{\n    private ?EntityManager $entityManager;\n\n    protected function setUp(): void\n    {\n        $kernel = self::bootKernel();\n\n        $this->entityManager = $kernel->getContainer()\n            ->get('doctrine')\n            ->getManager();\n    }\n\n    public function testSearchByName(): void\n    {\n        $product = $this->entityManager\n            ->getRepository(Product::class)\n            ->findOneBy(['name' => 'Priceless widget']);\n\n        $this->assertSame(14.50, $product->getPrice());\n    }\n\n    protected function tearDown(): void\n    {\n        parent::tearDown();\n\n        // doing this is recommended to avoid memory leaks\n        $this->entityManager->close();\n        $this->entityManager = null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using humanize Filter Examples in Twig\nDESCRIPTION: Provides multiple examples showing how the `humanize` filter transforms various input string formats (camelCase, PascalCase, kebab-case, snake_case, space-separated) into a readable string like 'Date of birth'.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#2025-04-22_snippet_37\n\nLANGUAGE: twig\nCODE:\n```\n{{ 'dateOfBirth'|humanize }}    {# renders: Date of birth #}\n{{ 'DateOfBirth'|humanize }}    {# renders: Date of birth #}\n{{ 'date-of-birth'|humanize }}  {# renders: Date-of-birth #}\n{{ 'date_of_birth'|humanize }}  {# renders: Date of birth #}\n{{ 'date of birth'|humanize }}  {# renders: Date of birth #}\n{{ 'Date Of Birth'|humanize }}  {# renders: Date of birth #}\n```\n\n----------------------------------------\n\nTITLE: Enhanced Controller with Template Rendering\nDESCRIPTION: Demonstrates how to modify the controller to use Twig templating, extending AbstractController and rendering a template file.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/page_creation.rst#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace App\\Controller;\n\nuse Symfony\\Component\\HttpFoundation\\Response;\n// ...\n\nclass LuckyController extends AbstractController\n{\n    #[Route('/lucky/number')]\n    public function number(): Response\n    {\n        $number = random_int(0, 100);\n\n        return $this->render('lucky/number.html.twig', [\n            'number' => $number,\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Target Redirect Route on switch_user (PHP)\nDESCRIPTION: Assigns a custom redirection route ('app_user_dashboard') after user switching in PHP configuration. Uses the ->targetRoute('app_user_dashboard') method of the firewall builder, applicable only for stateful firewalls. Located in config/packages/security.php.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/impersonating_user.rst#2025-04-22_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/security.php\\nuse Symfony\\Config\\SecurityConfig;\\n\\nreturn static function (SecurityConfig $security): void {\\n    // ...\\n    $security->firewall('main')\\n        // ...\\n        ->switchUser()\\n            ->targetRoute('app_user_dashboard')\\n    ;\\n};\n```\n\n----------------------------------------\n\nTITLE: Fetching Related Object in Symfony Controller\nDESCRIPTION: Controller method that demonstrates how to fetch a Product entity by ID and access its related Category. It shows how Doctrine handles lazy loading of related entities.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine/associations.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/ProductController.php\nnamespace App\\Controller;\n\nuse App\\Entity\\Product;\n// ...\n\nclass ProductController extends AbstractController\n{\n    public function show(ProductRepository $productRepository, int $id): Response\n    {\n        $product = $productRepository->find($id);\n        // ...\n\n        $categoryName = $product->getCategory()->getName();\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Form Event Listener for Dynamic Name Field\nDESCRIPTION: Implementation of a form event listener that conditionally adds a name field based on whether the product is new.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/dynamic_form_modification.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function buildForm(FormBuilderInterface $builder, array $options): void\n{\n    $builder->add('price');\n\n    $builder->addEventListener(FormEvents::PRE_SET_DATA, function (FormEvent $event): void {\n        $product = $event->getData();\n        $form = $event->getForm();\n\n        if (!$product || null === $product->getId()) {\n            $form->add('name', TextType::class);\n        }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Using Event Aliases with Symfony DI Compiler Passes in PHP\nDESCRIPTION: Shows how to define and use event aliases (mapping event class FQCNs to string names) within the Symfony Dependency Injection Container. It involves registering the `AddEventAliasesPass` to define the alias mapping and ensuring it runs before the `RegisterListenersPass`, which resolves these aliases when processing `kernel.event_listener` tags.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/event_dispatcher.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\DependencyInjection\\Compiler\\PassConfig;\\nuse Symfony\\Component\\DependencyInjection\\ContainerBuilder;\\nuse Symfony\\Component\\DependencyInjection\\ParameterBag\\ParameterBag;\\nuse Symfony\\Component\\EventDispatcher\\DependencyInjection\\AddEventAliasesPass;\\nuse Symfony\\Component\\EventDispatcher\\DependencyInjection\\RegisterListenersPass;\\nuse Symfony\\Component\\EventDispatcher\\EventDispatcher;\\n\\n$container = new ContainerBuilder(new ParameterBag());\\n$container->addCompilerPass(new AddEventAliasesPass([\\n    \\AcmeFooActionEvent::class => 'acme.foo.action',\\n]));\\n$container->addCompilerPass(new RegisterListenersPass(), PassConfig::TYPE_BEFORE_REMOVING);\\n\\n$container->register('event_dispatcher', EventDispatcher::class);\\n\\n// registers an event listener\\n$container->register('listener_service_id', \\AcmeListener::class)\\n    ->addTag('kernel.event_listener', [\\n        // will be translated to 'acme.foo.action' by RegisterListenersPass.\\n        'event' => \\AcmeFooActionEvent::class,\\n        'method' => 'onFooAction',\\n    ]);\n```\n\n----------------------------------------\n\nTITLE: Properly Using Imported Libraries Without Global Variables\nDESCRIPTION: JavaScript examples showing how to correctly use imported libraries like jQuery in a module environment without relying on global variables.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/asset_mapper.rst#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport $ from 'jquery';\n$('.something').hide();\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Object in Symfony Controller\nDESCRIPTION: Shows how to access the Request object in a Symfony controller by type-hinting it as an argument. This allows access to query parameters and other request data.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/controller.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n// ...\n\npublic function index(Request $request): Response\n{\n    $page = $request->query->get('page', 1);\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Form Submissions in Symfony Controller\nDESCRIPTION: Shows a complete form submission workflow in a Symfony controller, including form creation, request handling, validation checking, and redirecting on successful submission.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/form.rst#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/TaskController.php\nnamespace App\\Controller;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\DateType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\TextType;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass TaskController extends AbstractController\n{\n    public function new(Request $request): Response\n    {\n        $form = $this->createFormBuilder()\n            ->add('task', TextType::class)\n            ->add('dueDate', DateType::class)\n            ->getForm();\n\n        $form->handleRequest($request);\n\n        if ($form->isSubmitted() && $form->isValid()) {\n            $data = $form->getData();\n\n            // ... perform some action, such as saving the data to the database\n\n            return $this->redirectToRoute('task_success');\n        }\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing a Synchronous Process and Handling Errors in PHP\nDESCRIPTION: Shows the basic usage of the `Process` class to run a command (`ls -lsa`) synchronously. It creates a new `Process` instance with the command parts as an array, executes it using `run()`, checks for success with `isSuccessful()`, throws `ProcessFailedException` on failure, and retrieves the standard output using `getOutput()`. Depends on the Symfony Process component.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/process.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Process\\Exception\\ProcessFailedException;\nuse Symfony\\Component\\Process\\Process;\n\n$process = new Process(['ls', '-lsa']);\n$process->run();\n\n// executes after the command finishes\nif (!$process->isSuccessful()) {\n    throw new ProcessFailedException($process);\n}\n\necho $process->getOutput();\n```\n\n----------------------------------------\n\nTITLE: Creating Twig Template\nDESCRIPTION: Shows how to create a simple Twig template that displays the lucky number passed from the controller.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/page_creation.rst#2025-04-22_snippet_3\n\nLANGUAGE: Twig\nCODE:\n```\n{# templates/lucky/number.html.twig #}\n<h1>Your lucky number is {{ number }}</h1>\n```\n\n----------------------------------------\n\nTITLE: Creating Types Manually with Type Class Static Methods\nDESCRIPTION: Demonstrates manual creation of `Type` objects using static factory methods provided by the `Symfony\\Component\\TypeInfo\\Type` class and its `TypeFactoryTrait`. Examples include creating basic types (int, string), nullable types, generic types (like collections with specific key/value types), list types (arrays with sequential integer keys), and intersection types. This approach allows for explicit and precise type definition.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/type_info.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\TypeInfo\\Type;\n\nType::int();\nType::nullable(Type::string());\nType::generic(Type::object(Collection::class), Type::int());\nType::list(Type::bool());\nType::intersection(Type::object(\\Stringable::class), Type::object(\\Iterator::class));\n```\n\n----------------------------------------\n\nTITLE: Implementing Doctrine Lifecycle Callback in PHP Entity\nDESCRIPTION: Demonstrates how to define a lifecycle callback method in a PHP entity class using attributes. The example sets a createdAt date when the entity is first persisted.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine/events.rst#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n// src/Entity/Product.php\nnamespace App\\Entity;\n\nuse Doctrine\\ORM\\Mapping as ORM;\n\n#[ORM\\Entity]\n#[ORM\\HasLifecycleCallbacks]\nclass Product\n{\n    // ...\n\n    #[ORM\\PrePersist]\n    public function setCreatedAtValue(): void\n    {\n        $this->createdAt = new \\DateTimeImmutable();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Mailer in YAML\nDESCRIPTION: YAML configuration for Symfony Mailer that references the DSN from environment variables. This is typically placed in config/packages/mailer.yaml.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/mailer.yaml\nframework:\n    mailer:\n        dsn: '%env(MAILER_DSN)%'\n```\n\n----------------------------------------\n\nTITLE: Writing Unit Tests for Framework\nDESCRIPTION: This code defines unit tests for the Framework class, including tests for 404 errors, general exceptions, and successful responses. It uses test doubles to isolate the framework code from Symfony components.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/create_framework/unit_testing.rst#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace Simplex\\Tests;\n\nuse PHPUnit\\Framework\\TestCase;\nuse Simplex\\Framework;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolverInterface;\nuse Symfony\\Component\\HttpKernel\\Controller\\ControllerResolverInterface;\nuse Symfony\\Component\\Routing;\nuse Symfony\\Component\\Routing\\Exception\\ResourceNotFoundException;\n\nclass FrameworkTest extends TestCase\n{\n    public function testNotFoundHandling(): void\n    {\n        $framework = $this->getFrameworkForException(new ResourceNotFoundException());\n\n        $response = $framework->handle(new Request());\n\n        $this->assertEquals(404, $response->getStatusCode());\n    }\n\n    private function getFrameworkForException($exception): Framework\n    {\n        $matcher = $this->createMock(Routing\\Matcher\\UrlMatcherInterface::class);\n\n        $matcher\n            ->expects($this->once())\n            ->method('match')\n            ->will($this->throwException($exception))\n        ;\n        $matcher\n            ->expects($this->once())\n            ->method('getContext')\n            ->will($this->returnValue($this->createMock(Routing\\RequestContext::class)))\n        ;\n        $controllerResolver = $this->createMock(ControllerResolverInterface::class);\n        $argumentResolver = $this->createMock(ArgumentResolverInterface::class);\n\n        return new Framework($matcher, $controllerResolver, $argumentResolver);\n    }\n\n    public function testErrorHandling(): void\n    {\n        $framework = $this->getFrameworkForException(new \\RuntimeException());\n\n        $response = $framework->handle(new Request());\n\n        $this->assertEquals(500, $response->getStatusCode());\n    }\n\n    public function testControllerResponse(): void\n    {\n        $matcher = $this->createMock(Routing\\Matcher\\UrlMatcherInterface::class);\n\n        $matcher\n            ->expects($this->once())\n            ->method('match')\n            ->will($this->returnValue([\n                '_route' => 'is_leap_year/{year}',\n                'year' => '2000',\n                '_controller' => [new LeapYearController(), 'index'],\n            ]))\n        ;\n        $matcher\n            ->expects($this->once())\n            ->method('getContext')\n            ->will($this->returnValue($this->createMock(Routing\\RequestContext::class)))\n        ;\n        $controllerResolver = new ControllerResolver();\n        $argumentResolver = new ArgumentResolver();\n\n        $framework = new Framework($matcher, $controllerResolver, $argumentResolver);\n\n        $response = $framework->handle(new Request());\n\n        $this->assertEquals(200, $response->getStatusCode());\n        $this->assertStringContainsString('Yep, this is a leap year!', $response->getContent());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Raw SQL Query in Product Repository\nDESCRIPTION: Demonstrates how to execute raw SQL queries using Doctrine's connection object to fetch product data.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine.rst#2025-04-22_snippet_33\n\nLANGUAGE: php\nCODE:\n```\npublic function findAllGreaterThanPrice(int $price): array\n{\n    $conn = $this->getEntityManager()->getConnection();\n\n    $sql = '\n        SELECT * FROM product p\n        WHERE p.price > :price\n        ORDER BY p.price ASC\n        ';\n\n    $resultSet = $conn->executeQuery($sql, ['price' => $price]);\n\n    return $resultSet->fetchAllAssociative();\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Form Errors in Symfony\nDESCRIPTION: Demonstrates different ways to access form errors using the getErrors() method. Shows how to retrieve errors at the form level, field level, and with different structuring options.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/form.rst#2025-04-22_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$form = ...;\n\n// ...\n\n// a FormErrorIterator instance, but only errors attached to this\n// form level (e.g. global errors)\n$errors = $form->getErrors();\n\n// a FormErrorIterator instance, but only errors attached to the\n// \"firstName\" field\n$errors = $form['firstName']->getErrors();\n\n// a FormErrorIterator instance including child forms in a flattened structure\n// use getOrigin() to determine the form causing the error\n$errors = $form->getErrors(true);\n\n// a FormErrorIterator instance including child forms without flattening the output structure\n$errors = $form->getErrors(true, false);\n```\n\n----------------------------------------\n\nTITLE: Using Response Methods for Cache Control in Symfony\nDESCRIPTION: Demonstrates how to use Response methods to control HTTP caching in Symfony. Shows how to mark a response as stale with expire() and how to force a 304 Not Modified response with setNotModified().\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/http_cache.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// marks the Response stale\n$response->expire();\n\n// forces the response to return a proper 304 response with no content\n$response->setNotModified();\n```\n\n----------------------------------------\n\nTITLE: Dumping PHP Array with Inline Level 2 in PHP\nDESCRIPTION: Demonstrates setting the `inline` level to 2 in `Yaml::dump`. This means arrays nested up to level 2 will switch to inline representation. In this specific example, the output remains expanded as the deepest nesting is at level 2.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/yaml.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\necho Yaml::dump($array, 2);\n```\n\n----------------------------------------\n\nTITLE: Acquiring and Releasing a Basic Lock in PHP\nDESCRIPTION: Shows the standard workflow for locking a resource. It uses the `LockFactory` to create a lock instance for the resource identified by the string 'pdf-creation'. It then attempts to acquire the lock using `acquire()`. If successful, the code within the `if` block runs exclusively, and finally, the lock is explicitly released using `release()`.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/lock.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// ...\n$lock = $factory->createLock('pdf-creation');\n\nif ($lock->acquire()) {\n    // The resource \"pdf-creation\" is locked.\n    // You can compute and generate the invoice safely here.\n\n    $lock->release();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony Mailer Component\nDESCRIPTION: Command to install Symfony's Mailer component using Composer, which provides functionality for creating and sending emails with support for multipart messages, Twig integration, and more.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require symfony/mailer\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Symfony Normalizer - PHP\nDESCRIPTION: This PHP snippet demonstrates how to create a custom Normalizer class in Symfony by implementing the NormalizerInterface and injecting both the Object Normalizer and UrlGeneratorInterface. Its main method normalizes an entity and enhances the output array with a self href property generated dynamically. This requires the Serializer and Routing components to be available, and key parameters include the injected normalizer and router. The class will only support normalization for the App\\Entity\\Topic class, returning data as an array.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer/custom_normalizer.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Serializer/TopicNormalizer.php\nnamespace App\\Serializer;\n\nuse App\\Entity\\Topic;\nuse Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;\nuse Symfony\\Component\\Routing\\Generator\\UrlGeneratorInterface;\nuse Symfony\\Component\\Serializer\\Normalizer\\NormalizerInterface;\n\nclass TopicNormalizer implements NormalizerInterface\n{\n    public function __construct(\n        #[Autowire(service: 'serializer.normalizer.object')]\n        private readonly NormalizerInterface $normalizer,\n\n        private UrlGeneratorInterface $router,\n    ) {\n    }\n\n    public function normalize(mixed $object, ?string $format = null, array $context = []): array\n    {\n        $data = $this->normalizer->normalize($object, $format, $context);\n\n        // Here, add, edit, or delete some data:\n        $data['href']['self'] = $this->router->generate('topic_show', [\n            'id' => $object->getId(),\n        ], UrlGeneratorInterface::ABSOLUTE_URL);\n\n        return $data;\n    }\n\n    public function supportsNormalization($data, ?string $format = null, array $context = []): bool\n    {\n        return $data instanceof Topic;\n    }\n\n    public function getSupportedTypes(?string $format): array\n    {\n        return [\n            Topic::class => true,\n        ];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Generating CDN Asset URLs from Multiple Domains with Symfony UrlPackage (PHP)\nDESCRIPTION: This example demonstrates initializing `UrlPackage` with an array of base URLs, typically used for serving assets from multiple CDN domains to improve performance. The component deterministically selects one of the base URLs for each asset path, ensuring an asset is always served from the same domain for caching purposes. `StaticVersionStrategy` is used for versioning.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/asset.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Asset\\UrlPackage;\n// ...\n\n$urls = [\n    'https://static1.example.com/images/',\n    'https://static2.example.com/images/',\n];\n$urlPackage = new UrlPackage($urls, new StaticVersionStrategy('v1'));\n\necho $urlPackage->getUrl('/logo.png');\n// result: https://static1.example.com/images/logo.png?v1\necho $urlPackage->getUrl('/icon.png');\n// result: https://static2.example.com/images/icon.png?v1\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Event Subscriber in Symfony\nDESCRIPTION: Example of creating a form event subscriber class that handles multiple events (PRE_SET_DATA and PRE_SUBMIT) to manage email field visibility.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/events.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Form\\EventListener;\n\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\nuse Symfony\\Component\\Form\\Event\\PreSetDataEvent;\nuse Symfony\\Component\\Form\\Event\\PreSubmitEvent;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\EmailType;\nuse Symfony\\Component\\Form\\FormEvents;\n\nclass AddEmailFieldListener implements EventSubscriberInterface\n{\n    public static function getSubscribedEvents(): array\n    {\n        return [\n            FormEvents::PRE_SET_DATA => 'onPreSetData',\n            FormEvents::PRE_SUBMIT   => 'onPreSubmit',\n        ];\n    }\n\n    public function onPreSetData(PreSetDataEvent $event): void\n    {\n        $user = $event->getData();\n        $form = $event->getForm();\n\n        if (true === $user->isShowEmail()) {\n            $form->add('email', EmailType::class);\n        }\n    }\n\n    public function onPreSubmit(PreSubmitEvent $event): void\n    {\n        $user = $event->getData();\n        $form = $event->getForm();\n\n        if (!$user) {\n            return;\n        }\n\n        if (isset($user['showEmail']) && $user['showEmail']) {\n            $form->add('email', EmailType::class);\n        } else {\n            unset($user['email']);\n            $event->setData($user);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using AsPeriodicTask Attribute for Periodic Tasks in PHP\nDESCRIPTION: Shows how to use the AsPeriodicTask attribute to define a periodic task with frequency, from, and until parameters.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/scheduler.rst#2025-04-22_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n// src/Scheduler/Task/SendDailySalesReports.php\nnamespace App\\Scheduler\\Task;\n\nuse Symfony\\Component\\Scheduler\\Attribute\\AsPeriodicTask;\n\n#[AsPeriodicTask(frequency: '1 day', from: '2022-01-01', until: '2023-06-12')]\nclass SendDailySalesReports\n{\n    public function __invoke()\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using HTTP 103 Status Code in Symfony Controllers\nDESCRIPTION: The code snippet shows the status code 103 used for Early Hints HTTP responses. This informational response allows browsers to start downloading assets immediately before the full response is sent.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/controller.rst#2025-04-22_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n103\n```\n\n----------------------------------------\n\nTITLE: Fetching Localized Locale Names using Symfony Intl in PHP\nDESCRIPTION: Shows how to retrieve locale names translated into a specific locale (German, 'de') by passing the locale code as the last argument to the methods of the `Symfony\\Component\\Intl\\Locales` class. This overrides the default locale.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/intl.rst#2025-04-22_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$locales = Locales::getNames('de');\n// => ['af' => 'Afrikaans', 'af_NA' => 'Afrikaans (Namibia)', ...]\n\n$locale = Locales::getName('zh_Hans_MO', 'de');\n// => 'Chinesisch (Vereinfacht, Sonderverwaltungsregion Macau)'\n```\n\n----------------------------------------\n\nTITLE: Creating and Modifying HTTP Responses (Symfony, PHP)\nDESCRIPTION: Illustrates how to construct and change a Symfony HttpFoundation Response object, setting content, headers, status code, and charset. Requires the Response class from Symfony. Inputs are content strings, HTTP status codes, and associative arrays for headers; outputs are Response objects ready for client transmission. Also demonstrates use of a ResponseHeaderBag and best practices for charset management.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#2025-04-22_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\HttpFoundation\\Response;\n\n$response = new Response(\n    'Content',\n    Response::HTTP_OK,\n    ['content-type' => 'text/html']\n);\n\n$response->setContent('Hello World');\n\n// the headers public attribute is a ResponseHeaderBag\n$response->headers->set('Content-Type', 'text/plain');\n\n$response->setStatusCode(Response::HTTP_NOT_FOUND);\n\n$response->setCharset('ISO-8859-1');\n```\n\n----------------------------------------\n\nTITLE: Waiting for an Asynchronous Process to Complete in PHP\nDESCRIPTION: Illustrates starting a process asynchronously with `start()`, allowing the main script to perform other operations concurrently. Later, the script uses the blocking `wait()` method to pause its own execution until the background process finishes. Depends on the Symfony Process component.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/process.rst#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$process = new Process(['ls', '-lsa']);\n$process->start();\n\n// ... do other things\n\n$process->wait();\n\n// ... do things after the process has finished\n```\n\n----------------------------------------\n\nTITLE: Automatic Entity Fetching by Route Parameters\nDESCRIPTION: Shows how the EntityValueResolver automatically maps route parameters to entity properties. It demonstrates fetching by primary key and by slug property.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine.rst#2025-04-22_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Fetch via primary key because {id} is in the route.\n */\n#[Route('/product/{id}')]\npublic function showByPk(Product $product): Response\n{\n}\n\n/**\n * Perform a findOneBy() where the slug property matches {slug}.\n */\n#[Route('/product/{slug}')]\npublic function showBySlug(Product $product): Response\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Entity Value Resolver Example in PHP\nDESCRIPTION: Shows how to automatically query and inject entities as controller arguments.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/controller/value_resolver.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Controller;\n\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Attribute\\Route;\n\nclass DefaultController\n{\n    #[Route('/product/{id}')]\n    public function share(Product $product): Response\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering CustomNormalizer in Symfony PHP Configuration\nDESCRIPTION: This snippet shows how to register a CustomNormalizer as a service in Symfony's PHP configuration. It sets a high priority to ensure the normalizer is called earlier in the normalization process.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer.rst#2025-04-22_snippet_42\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nuse Symfony\\Component\\Serializer\\Normalizer\\CustomNormalizer;\n\nreturn function(ContainerConfigurator $container) {\n    // ...\n\n    // if you're using autoconfigure, the tag will be automatically applied\n    $services->set(CustomNormalizer::class)\n        // register the normalizer with a high priority (called earlier)\n        ->tag('serializer.normalizer', [\n            'priority' => 500,\n        ]);\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Test Environment Values in .env Files (bash)\nDESCRIPTION: Shows the syntax for defining a secret value for the Symfony test environment directly in the .env.test file. This technique avoids the need for a dedicated secrets vault in test and is valuable for CI.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/secrets.rst#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n# .env.test\nDATABASE_PASSWORD=\"testing\"\n```\n\n----------------------------------------\n\nTITLE: Using Symfony UnicodeString for String Manipulation (PHP)\nDESCRIPTION: This snippet shows various methods of using the UnicodeString class to manipulate Unicode strings in PHP. You must have the 'symfony/string' component installed and autoloaded. The example covers object instantiation, trimming, replace, append, and case-ignoring string testing. Inputs are standard PHP strings; outputs are string objects or boolean values as appropriate. Limitations include Unicode and locale support constraints.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/string.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\String\\UnicodeString;\n\n$text = (new UnicodeString('This is a déjà-vu situation.'))\n    ->trimEnd('.')\n    ->replace('déjà-vu', 'jamais-vu')\n    ->append('!');\n// $text = 'This is a jamais-vu situation!'\n\n$content = new UnicodeString('नमस्ते दुनिया');\nif ($content->ignoreCase()->startsWith('नमस्ते')) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Symfony Form with Multiple Submit Buttons\nDESCRIPTION: This snippet shows how to create a Symfony form with two submit buttons: 'Create Task' and 'Save and Add'. It uses the FormBuilder to add form fields and submit buttons.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/multiple_buttons.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$form = $this->createFormBuilder($task)\n    ->add('task', TextType::class)\n    ->add('dueDate', DateType::class)\n    ->add('save', SubmitType::class, ['label' => 'Create Task'])\n    ->add('saveAndAdd', SubmitType::class, ['label' => 'Save and Add'])\n    ->getForm();\n```\n\n----------------------------------------\n\nTITLE: Creating a new Symfony project using the Symfony binary\nDESCRIPTION: This command uses the Symfony binary to create a new Symfony application in the specified directory.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/best_practices.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ symfony new my_project_directory\n```\n\n----------------------------------------\n\nTITLE: Defining an Abstract and Derived Class for Serialization Example - PHP\nDESCRIPTION: Defines an abstract class with protected and private properties and a derived class that sets those properties in the constructor. Serves as the target for serialization with VarExporter, demonstrating how private and protected properties are captured and restored. Requires PHP 7.4+ for typed properties and supports complex object hierarchies. Input is object instantiation; output is a class instance with preset internal state.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/var_exporter.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nabstract class AbstractClass\n{\n    protected int $foo;\n    private int $bar;\n\n    protected function setBar($bar): void\n    {\n        $this->bar = $bar;\n    }\n}\n\nclass ConcreteClass extends AbstractClass\n{\n    public function __construct()\n    {\n        $this->foo = 123;\n        $this->setBar(234);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Locating Configuration Files with FileLocator in PHP\nDESCRIPTION: Demonstrates how to use Symfony's FileLocator to search for configuration files in specified directories. The locator can find single or multiple matching files based on the provided parameters.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/config/resources.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Config\\FileLocator;\n\n$configDirectories = [__DIR__.'/config'];\n\n$fileLocator = new FileLocator($configDirectories);\n$yamlUserFiles = $fileLocator->locate('users.yaml', null, false);\n```\n\n----------------------------------------\n\nTITLE: Defining a Message Handler Callable - Symfony Messenger - PHP\nDESCRIPTION: Defines a message handler class to process dispatched messages with Symfony Messenger. Depends on your App namespace and a MyMessage class. The __invoke method allows the handler instance to be used as a callable, receiving a MyMessage object as input. Intended for encapsulating business logic for messages; no return value is expected.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/messenger.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\MessageHandler;\n\nuse App\\Message\\MyMessage;\n\nclass MyMessageHandler\n{\n    public function __invoke(MyMessage $message): void\n    {\n        // Message processing...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Sub-Requests with Symfony HttpKernel in PHP\nDESCRIPTION: This snippet shows how to create and handle a sub-request using the Symfony HttpKernel component. It demonstrates creating a new Request object and processing it as a sub-request.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/http_kernel.rst#2025-04-22_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpKernel\\HttpKernelInterface;\n\n// ...\n\n// create some other request manually as needed\n$request = new Request();\n// for example, possibly set its _controller manually\n$request->attributes->set('_controller', '...');\n\n$response = $kernel->handle($request, HttpKernelInterface::SUB_REQUEST);\n// do something with this response\n```\n\n----------------------------------------\n\nTITLE: Normalizing Answers in Symfony Console Questions - PHP\nDESCRIPTION: This code assigns a normalizer callback to a Symfony Console Question, used to preprocess user input before validation. The normalizer trims whitespace from the answer, handling the case where input may be null. Requires symfony/console and is especially useful for sanitizing input before passing it to a validator. Inputs and outputs are both strings.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/helpers/questionhelper.rst#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Console\\Question\\Question;\n\n// ...\npublic function execute(InputInterface $input, OutputInterface $output): int\n{\n    // ...\n    $helper = $this->getHelper('question');\n\n    $question = new Question('Please enter the name of the bundle', 'AcmeDemoBundle');\n    $question->setNormalizer(function (string $value): string {\n        // $value can be null here\n        return $value ? trim($value) : '';\n    });\n\n    $bundleName = $helper->ask($input, $output, $question);\n\n    // ... do something with the bundleName\n\n    return Command::SUCCESS;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing APCu Cache Adapter in Symfony PHP\nDESCRIPTION: Demonstrates how to instantiate and configure an APCu Cache Adapter with optional parameters including namespace, default lifetime, and version string. The adapter requires the APCu PHP extension to be installed and active.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/cache/adapters/apcu_adapter.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Cache\\Adapter\\ApcuAdapter;\n\n$cache = new ApcuAdapter(\n\n    // a string prefixed to the keys of the items stored in this cache\n    $namespace = '',\n\n    // the default lifetime (in seconds) for cache items that do not define their\n    // own lifetime, with a value 0 causing items to be stored indefinitely (i.e.\n    // until the APCu memory is cleared)\n    $defaultLifetime = 0,\n\n    // when set, all keys prefixed by $namespace can be invalidated by changing\n    // this $version string\n    $version = null\n);\n```\n\n----------------------------------------\n\nTITLE: Executing and Handling Process Output in PHP with Symfony Process\nDESCRIPTION: This snippet demonstrates how to create and execute a process using Symfony's Process component. It shows how to start a process asynchronously and handle its output using a callback function.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/process.rst#2025-04-22_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\n$process = new Process(['ls', '-lsa']);\n$process->start();\n\n$process->wait(function ($type, $buffer): void {\n    if (Process::ERR === $type) {\n        echo 'ERR > '.$buffer;\n    } else {\n        echo 'OUT > '.$buffer;\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Firewalls for Separate Entry Points (YAML)\nDESCRIPTION: This YAML configuration demonstrates splitting security configuration into multiple firewalls (`api`, `main`) to handle different authentication needs and entry points for distinct parts of an application. The `api` firewall protects paths starting with `/api/` using a custom token authenticator, implicitly defining its entry point. The `main` firewall protects other paths using form login. `access_control` rules further define required roles for different path patterns, ensuring users are directed to the correct authentication flow based on the URL.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/entry_point.rst#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\nsecurity:\n    # ...\n    firewalls:\n        api:\n            pattern: ^/api/\n            custom_authenticators:\n                - App\\Security\\ApiTokenAuthenticator\n        main:\n            lazy: true\n            form_login: ~\n\n    access_control:\n        - { path: '^/login', roles: PUBLIC_ACCESS }\n        - { path: '^/api', roles: ROLE_API_USER }\n        - { path: '^/', roles: ROLE_USER }\n```\n\n----------------------------------------\n\nTITLE: Handling ConsoleEvents::COMMAND Event\nDESCRIPTION: Demonstrates how to listen for the COMMAND event which fires before command execution. Shows accessing input, output and command information.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/events.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Console\\ConsoleEvents;\nuse Symfony\\Component\\Console\\Event\\ConsoleCommandEvent;\n\n$dispatcher->addListener(ConsoleEvents::COMMAND, function (ConsoleCommandEvent $event): void {\n    // gets the input instance\n    $input = $event->getInput();\n\n    // gets the output instance\n    $output = $event->getOutput();\n\n    // gets the command to be executed\n    $command = $event->getCommand();\n\n    // writes something about the command\n    $output->writeln(sprintf('Before running command <info>%s</info>', $command->getName()));\n\n    // gets the application\n    $application = $command->getApplication();\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Rate Limiter Usage in a Symfony API Controller\nDESCRIPTION: This code demonstrates how to implement rate limiting in a Symfony controller using the RateLimiter component. It creates a limiter based on client IP address, consumes a token, and handles the case when the rate limit is exceeded by throwing a TooManyRequestsHttpException.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/rate_limiter.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\RateLimiter\\RateLimiterFactoryInterface;\n\nclass ApiController extends AbstractController\n{\n    // if you're using service autowiring, the variable name must be:\n    // \"rate limiter name\" (in camelCase) + \"Limiter\" suffix\n    public function index(Request $request, RateLimiterFactoryInterface $anonymousApiLimiter): Response\n    {\n        // create a limiter based on a unique identifier of the client\n        // (e.g. the client's IP address, a username/email, an API key, etc.)\n        $limiter = $anonymousApiLimiter->create($request->getClientIp());\n\n        // the argument of consume() is the number of tokens to consume\n        // and returns an object of type Limit\n        if (false === $limiter->consume(1)->isAccepted()) {\n            throw new TooManyRequestsHttpException();\n        }\n\n        // you can also use the ensureAccepted() method - which throws a\n        // RateLimitExceededException if the limit has been reached\n        // $limiter->consume(1)->ensureAccepted();\n\n        // to reset the counter\n        // $limiter->reset();\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Token Authentication Event Subscriber in Symfony\nDESCRIPTION: An event subscriber that handles token authentication for controllers marked with the TokenAuthenticatedController interface. It validates API tokens before controller execution.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/event_dispatcher.rst#2025-04-22_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n// src/EventSubscriber/TokenSubscriber.php\nnamespace App\\EventSubscriber;\n\nuse App\\Controller\\TokenAuthenticatedController;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\nuse Symfony\\Component\\HttpKernel\\Event\\ControllerEvent;\nuse Symfony\\Component\\HttpKernel\\Exception\\AccessDeniedHttpException;\nuse Symfony\\Component\\HttpKernel\\KernelEvents;\n\nclass TokenSubscriber implements EventSubscriberInterface\n{\n    public function __construct(\n        private array $tokens\n    ) {\n    }\n\n    public function onKernelController(ControllerEvent $event): void\n    {\n        $controller = $event->getController();\n\n        // when a controller class defines multiple action methods, the controller\n```\n\n----------------------------------------\n\nTITLE: Advanced MicroKernel with Custom Extension, Bundles, and Services - PHP\nDESCRIPTION: Defines an advanced Kernel class in src/Kernel.php, registering FrameworkBundle, TwigBundle, and optionally WebProfilerBundle based on environment. The kernel registers a custom extension, imports YAML configuration, and auto-wires all classes in src/ as services. This design is modular, scalable, and follows Symfony best practices, requiring appropriate bundle and extension dependencies and autoload setup.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/micro_kernel_trait.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// src/Kernel.php\nnamespace App;\n\nuse App\\DependencyInjection\\AppExtension;\nuse Symfony\\Bundle\\FrameworkBundle\\FrameworkBundle;\nuse Symfony\\Bundle\\FrameworkBundle\\Kernel\\MicroKernelTrait;\nuse Symfony\\Bundle\\TwigBundle\\TwigBundle;\nuse Symfony\\Bundle\\WebProfilerBundle\\WebProfilerBundle;\nuse Symfony\\Component\\DependencyInjection\\ContainerBuilder;\nuse Symfony\\Component\\DependencyInjection\\Loader\\Configurator\\ContainerConfigurator;\nuse Symfony\\Component\\HttpKernel\\Kernel as BaseKernel;\nuse Symfony\\Component\\Routing\\Loader\\Configurator\\RoutingConfigurator;\n\nclass Kernel extends BaseKernel\n{\n    use MicroKernelTrait;\n\n    public function registerBundles(): iterable\n    {\n        yield new FrameworkBundle();\n        yield new TwigBundle();\n\n        if ('dev' === $this->getEnvironment()) {\n            yield new WebProfilerBundle();\n        }\n    }\n\n    protected function build(ContainerBuilder $containerBuilder): void\n    {\n        $containerBuilder->registerExtension(new AppExtension());\n    }\n\n    protected function configureContainer(ContainerConfigurator $container): void\n    {\n        $container->import(__DIR__.'/../config/framework.yaml');\n\n        // register all classes in /src/ as service\n        $container->services()\n            ->load('App\\\\', __DIR__.'/*')\n            ->autowire()\n            ->autoconfigure()\n        ;\n\n```\n\n----------------------------------------\n\nTITLE: Rendering Remaining Form Fields with form_rest in Twig\nDESCRIPTION: Demonstrates how to render all unrendered form fields including hidden fields using the form_rest function, which is recommended to include in all forms.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/form_customization.rst#2025-04-22_snippet_9\n\nLANGUAGE: twig\nCODE:\n```\n{{ form_rest(form) }}\n```\n\n----------------------------------------\n\nTITLE: Sending High-Importance Notifications Using Channel Policy - PHP\nDESCRIPTION: This PHP snippet demonstrates sending a notification with 'high' importance so that channel policies apply, such as sending via Slack if it is set in configuration. It constructs a Notification, sets custom content and importance, and then sends via the Notifier to a specific recipient. Requires symfony/notifier, prior channel policy configuration, and a valid recipient address.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/notifier.rst#2025-04-22_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n// ...\nclass InvoiceController extends AbstractController\n{\n    #[Route('/invoice/create')]\n    public function invoice(NotifierInterface $notifier): Response\n    {\n        // ...\n\n        $notification = (new Notification('New Invoice'))\n            ->content('You got a new invoice for 15 EUR.')\n            ->importance(Notification::IMPORTANCE_HIGH);\n\n        $notifier->send($notification, new Recipient('wouter@example.com'));\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Flash Messages in Symfony Controller\nDESCRIPTION: Shows how to use flash messages in a Symfony controller for user notifications during form processing. Messages are stored in session and automatically removed after being retrieved.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/controller.rst#2025-04-22_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n// ...\n\npublic function update(Request $request): Response\n{\n    // ...\n\n    if ($form->isSubmitted() && $form->isValid()) {\n        // do some sort of processing\n\n        $this->addFlash(\n            'notice',\n            'Your changes were saved!'\n        );\n        // $this->addFlash() is equivalent to $request->getSession()->getFlashBag()->add()\n\n        return $this->redirectToRoute(/* ... */);\n    }\n\n    return $this->render(/* ... */);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating BinaryFileResponse in PHP\nDESCRIPTION: This code shows how to create a BinaryFileResponse for serving a static file in Symfony. It also demonstrates setting Content-Type and Content-Disposition headers.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#2025-04-22_snippet_30\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\HttpFoundation\\BinaryFileResponse;\n\n$file = 'path/to/file.txt';\n$response = new BinaryFileResponse($file);\n\n// ...\n$response->headers->set('Content-Type', 'text/plain');\n$response->setContentDisposition(\n    ResponseHeaderBag::DISPOSITION_ATTACHMENT,\n    'filename.txt'\n);\n```\n\n----------------------------------------\n\nTITLE: Executing Sub-Commands within a Symfony Command using PHP\nDESCRIPTION: This PHP snippet demonstrates how to execute another Symfony console command (e.g., 'demo:greet') from within the `execute` method of a different command ('CreateUserCommand'). It uses `ArrayInput` to configure the arguments and options for the sub-command, sets the input to non-interactive, and then calls `doRun()` on the application instance to execute the command, capturing its return code. Dependencies include various classes from the `Symfony\\Component\\Console` namespace. Using `doRun` is preferred over `run` to handle return codes correctly and ensure proper event dispatching.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/console/calling_commands.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// ...\nuse Symfony\\Component\\Console\\Command;\nuse Symfony\\Component\\Console\\Input\\ArrayInput;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\nclass CreateUserCommand extends Command\n{\n    // ...\n\n    protected function execute(InputInterface $input, OutputInterface $output): int\n    {\n        $greetInput = new ArrayInput([\n            // the command name is passed as first argument\n            'command' => 'demo:greet',\n            'name'    => 'Fabien',\n            '--yell'  => true,\n        ]);\n\n        // disable interactive behavior for the greet command\n        $greetInput->setInteractive(false);\n\n        $returnCode = $this->getApplication()->doRun($greetInput, $output);\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cache Stampede Prevention Example\nDESCRIPTION: Demonstration of using beta parameter for probabilistic early expiration to prevent cache stampede\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/cache.rst#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Contracts\\Cache\\ItemInterface;\n\n$beta = 1.0;\n$value = $cache->get('my_cache_key', function (ItemInterface $item): string {\n    $item->expiresAfter(3600);\n    $item->tag(['tag_0', 'tag_1']);\n\n    return '...';\n}, $beta);\n```\n\n----------------------------------------\n\nTITLE: Creating Event Subscriber for Workflow Logging\nDESCRIPTION: Illustrates how to create an event subscriber that logs workflow transitions. This example logs when a blog post leaves a place in the 'blog_publishing' workflow.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/workflow.rst#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n// src/App/EventSubscriber/WorkflowLoggerSubscriber.php\nnamespace App\\EventSubscriber;\n\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\nuse Symfony\\Component\\Workflow\\Event\\Event;\nuse Symfony\\Component\\Workflow\\Event\\LeaveEvent;\n\nclass WorkflowLoggerSubscriber implements EventSubscriberInterface\n{\n    public function __construct(\n        private LoggerInterface $logger,\n    ) {\n    }\n\n    public function onLeave(Event $event): void\n    {\n        $this->logger->alert(sprintf(\n            'Blog post (id: \"%s\") performed transition \"%s\" from \"%s\" to \"%s\"',\n            $event->getSubject()->getId(),\n            $event->getTransition()->getName(),\n            implode(', ', array_keys($event->getMarking()->getPlaces())),\n            implode(', ', $event->getTransition()->getTos())\n        ));\n    }\n\n    public static function getSubscribedEvents(): array\n    {\n        return [\n            LeaveEvent::getName('blog_publishing') => 'onLeave',\n            // if you prefer, you can write the event name manually like this:\n            // 'workflow.blog_publishing.leave' => 'onLeave',\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Extension Configuration and Compiling Container in PHP\nDESCRIPTION: Illustrates the process of initializing a `ContainerBuilder`, registering an extension (`AcmeDemoExtension`), loading a YAML configuration file (`config.yaml`) containing settings for that extension using `YamlFileLoader`, and finally compiling the container to process the extension and its configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/dependency_injection/compilation.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Config\\FileLocator;\nuse Symfony\\Component\\DependencyInjection\\ContainerBuilder;\nuse Symfony\\Component\\DependencyInjection\\Loader\\YamlFileLoader;\n\n$container = new ContainerBuilder();\n$container->registerExtension(new AcmeDemoExtension);\n\n$loader = new YamlFileLoader($container, new FileLocator(__DIR__));\n$loader->load('config.yaml');\n\n// ...\n$container->compile();\n```\n\n----------------------------------------\n\nTITLE: Instantiating Objects Without Constructors Using Instantiator - PHP\nDESCRIPTION: Creates PHP object instances without invoking their constructors using Symfony\\Component\\VarExporter\\Instantiator. Can set properties (including parent or private) by passing arrays mapping property names to values. Requires the symfony/var-exporter package. Inputs are the target class name and optional property maps; outputs are fully constructed objects with desired state pre-set. Special property name \"\\0\" allows setting internal values for certain built-in classes.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/var_exporter.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\VarExporter\\Instantiator;\n\n// creates an empty instance of Foo\n$fooObject = Instantiator::instantiate(Foo::class);\n\n// creates a Foo instance and sets one of its properties\n$fooObject = Instantiator::instantiate(Foo::class, ['propertyName' => $propertyValue]);\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\VarExporter\\Instantiator;\n\n// creates a Foo instance and sets a private property defined on its parent Bar class\n$fooObject = Instantiator::instantiate(Foo::class, [], [\n    Bar::class => ['privateBarProperty' => $propertyValue],\n]);\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\VarExporter\\Instantiator;\n\n// creates an SplObjectStorage where $info1 is associated with $object1, etc.\n$theObject = Instantiator::instantiate(SplObjectStorage::class, [\n    \"\\0\" => [$object1, $info1, $object2, $info2...],\n]);\n\n// creates an ArrayObject populated with $inputArray\n$theObject = Instantiator::instantiate(ArrayObject::class, [\n    \"\\0\" => [$inputArray],\n]);\n```\n\n----------------------------------------\n\nTITLE: Collecting Type Errors While Deserializing in Symfony Serializer\nDESCRIPTION: Shows how to collect all type error exceptions during deserialization instead of failing on the first error, using the COLLECT_DENORMALIZATION_ERRORS option and handling the PartialDenormalizationException.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer.rst#2025-04-22_snippet_59\n\nLANGUAGE: php\nCODE:\n```\ntry {\n    $person = $serializer->deserialize($jsonString, Person::class, 'json', [\n        DenormalizerInterface::COLLECT_DENORMALIZATION_ERRORS => true,\n    ]);\n} catch (PartialDenormalizationException $e) {\n    $violations = new ConstraintViolationList();\n\n    /** @var NotNormalizableValueException $exception */\n    foreach ($e->getErrors() as $exception) {\n        $message = sprintf('The type must be one of \"%s\" (\"%s\" given).', implode(', ', $exception->getExpectedTypes()), $exception->getCurrentType());\n        $parameters = [];\n        if ($exception->canUseMessageForUser()) {\n            $parameters['hint'] = $exception->getMessage();\n        }\n        $violations->add(new ConstraintViolation($message, '', $parameters, null, $exception->getPath(), null));\n    }\n\n    // ... return violation list to the user\n}\n```\n\n----------------------------------------\n\nTITLE: Removing a Product from a Category from the Inverse Side\nDESCRIPTION: Method in the Category entity that demonstrates how to properly remove a Product from a Category from the inverse side of the relationship. It ensures the owning side is updated by setting the category to null.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine/associations.rst#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Category.php\nnamespace App\\Entity;\n\n// ...\nclass Category\n{\n    // ...\n\n    public function removeProduct(Product $product): self\n    {\n        if ($this->products->contains($product)) {\n            $this->products->removeElement($product);\n            // set the owning side to null (unless already changed)\n            if ($product->getCategory() === $this) {\n                $product->setCategory(null);\n            }\n        }\n\n        return $this;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Mailer DSN in Environment Variables\nDESCRIPTION: Example of configuring SMTP transport in the .env file. This sets up the connection details for the mail server including optional user credentials, host and port.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_1\n\nLANGUAGE: env\nCODE:\n```\n# .env\nMAILER_DSN=smtp://user:pass@smtp.example.com:port\n```\n\n----------------------------------------\n\nTITLE: Event Listener with PHP Attributes\nDESCRIPTION: Implementation of event listeners using PHP attributes to configure event handling methods.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/event_dispatcher.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\EventListener;\n\nuse Symfony\\Component\\EventDispatcher\\Attribute\\AsEventListener;\n\n#[AsEventListener]\nfinal class MyListener\n{\n    public function __invoke(CustomEvent $event): void\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Access Token Handler for User Creation from Token\nDESCRIPTION: Implementation of an AccessTokenHandlerInterface that creates users directly from token data without requiring a user provider. This allows for stateless authentication by extracting user information from tokens like OIDC.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/access_token.rst#2025-04-22_snippet_37\n\nLANGUAGE: php\nCODE:\n```\n// src/Security/AccessTokenHandler.php\nnamespace App\\Security;\n\n// ...\nclass AccessTokenHandler implements AccessTokenHandlerInterface\n{\n    // ...\n\n    public function getUserBadgeFrom(string $accessToken): UserBadge\n    {\n        // get the data from the token\n        $payload = ...;\n\n        return new UserBadge(\n            $payload->getUserId(),\n            fn (string $userIdentifier) => new User($userIdentifier, $payload->getRoles())\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving Types using TypeResolver and Reflection\nDESCRIPTION: Illustrates resolving PHP types using the `TypeResolver`. It shows how to instantiate `TypeResolver`, resolve the type of a class property (`Dummy::$id`) using `ReflectionProperty`, and resolve a type from a simple string representation ('bool'). It also demonstrates creating complex types (list of nullable booleans) using static factories and using helper methods like `getCollectionKeyType()` and `getCollectionValueType()` to introspect collection types.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/type_info.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\TypeInfo\\Type;\nuse Symfony\\Component\\TypeInfo\\TypeResolver\\TypeResolver;\n\nclass Dummy\n{\n    public function __construct(\n        public int $id,\n    ) {\n    }\n}\n\n// Instantiate a new resolver\n$typeResolver = TypeResolver::create();\n\n// Then resolve types for any subject\n$typeResolver->resolve(new \\ReflectionProperty(Dummy::class, 'id')); // returns an \"int\" Type instance\n$typeResolver->resolve('bool'); // returns a \"bool\" Type instance\n\n// Types can be instantiated thanks to static factories\n$type = Type::list(Type::nullable(Type::bool()));\n\n// Type instances have several helper methods\n\n// for collections, it returns the type of the item used as the key;\n// in this example, the collection is a list, so it returns an \"int\" Type instance\n$keyType = $type->getCollectionKeyType();\n\n// you can chain the utility methods (e.g. to introspect the values of the collection)\n// the following code will return true\n$isValueNullable = $type->getCollectionValueType()->isNullable();\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Database Connections in YAML Format\nDESCRIPTION: YAML configuration for setting up multiple named database connections in Doctrine DBAL with different parameters for each connection.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/doctrine.rst#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndoctrine:\n    dbal:\n        default_connection:       default\n        connections:\n            default:\n                dbname:           Symfony\n                user:             root\n                password:         null\n                host:             localhost\n                server_version:   '8.0.37'\n            customer:\n                dbname:           customer\n                user:             root\n                password:         null\n                host:             localhost\n                server_version:   '8.2.0'\n```\n\n----------------------------------------\n\nTITLE: Resolving Multiple Arguments with MapEntity\nDESCRIPTION: Demonstrates how to resolve multiple entity arguments in a controller method using both automatic resolution and configured MapEntity attribute.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine.rst#2025-04-22_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n#[Route('/product/{id}/comments/{comment_id}')]\npublic function show(\n    Product $product,\n    #[MapEntity(expr: 'repository.find(comment_id)')]\n    Comment $comment\n): Response\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Explicitly Configuring Services for Autowiring (YAML, XML, PHP)\nDESCRIPTION: These configuration snippets demonstrate how to explicitly enable autowiring for the `TwitterClient` and `Rot13Transformer` services in YAML, XML, and PHP formats. They set the `autowire` flag to `true` for each service, although this might be redundant if default settings already enable autowiring globally. Defaults for `autowire` and `autoconfigure` are also shown.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/autowiring.rst#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nservices:\n    _defaults:\n        autowire: true\n        autoconfigure: true\n    # ...\n\n    App\\Service\\TwitterClient:\n        # redundant thanks to _defaults, but value is overridable on each service\n        autowire: true\n\n    App\\Util\\Rot13Transformer:\n        autowire: true\n```\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <defaults autowire=\"true\" autoconfigure=\"true\"/>\n        <!-- ... -->\n\n        <!-- autowire is redundant thanks to defaults, but value is overridable on each service -->\n        <service id=\"App\\Service\\TwitterClient\" autowire=\"true\"/>\n\n        <service id=\"App\\Util\\Rot13Transformer\" autowire=\"true\"/>\n    </services>\n</container>\n```\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\nreturn function(ContainerConfigurator $container): void {\n    $services = $container->services()\n        ->defaults()\n            ->autowire()\n            ->autoconfigure()\n    ;\n\n    $services->set(TwitterClient::class)\n        // redundant thanks to defaults, but value is overridable on each service\n        ->autowire();\n\n    $services->set(Rot13Transformer::class)\n        ->autowire();\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Constraint Unit Test\nDESCRIPTION: Unit test implementation for testing custom validation constraints using ConstraintValidatorTestCase.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/validation/custom_constraint.rst#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Tests\\Validator;\n\nuse App\\Validator\\ContainsAlphanumeric;\nuse App\\Validator\\ContainsAlphanumericValidator;\nuse Symfony\\Component\\Validator\\ConstraintValidatorInterface;\nuse Symfony\\Component\\Validator\\Test\\ConstraintValidatorTestCase;\n\nclass ContainsAlphanumericValidatorTest extends ConstraintValidatorTestCase\n{\n    protected function createValidator(): ConstraintValidatorInterface\n    {\n        return new ContainsAlphanumericValidator();\n    }\n\n    public function testNullIsValid(): void\n    {\n        $this->validator->validate(null, new ContainsAlphanumeric());\n\n        $this->assertNoViolation();\n    }\n\n    /**\n     * @dataProvider provideInvalidConstraints\n     */\n    public function testTrueIsInvalid(ContainsAlphanumeric $constraint): void\n    {\n        $this->validator->validate('...', $constraint);\n\n        $this->buildViolation('myMessage')\n            ->setParameter('{{ string }}', '...')\n            ->assertRaised();\n    }\n\n    public function provideInvalidConstraints(): \\Generator\n    {\n        yield [new ContainsAlphanumeric(message: 'myMessage')];\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AccessTokenHandlerInterface (PHP - Symfony)\nDESCRIPTION: Implements a handler for validating access tokens and extracting user identity by conforming to AccessTokenHandlerInterface. Expects an AccessTokenRepository for looking up tokens and returns a UserBadge carrying the user identifier. Throws BadCredentialsException on invalid tokens. Typically saved as src/Security/AccessTokenHandler.php. Dependencies: App\\Repository\\AccessTokenRepository, Symfony\\Component\\Security\\Core\\Exception\\BadCredentialsException, UserBadge.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/access_token.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Security/AccessTokenHandler.php\\nnamespace App\\Security;\\n\\nuse App\\Repository\\AccessTokenRepository;\\nuse Symfony\\Component\\Security\\Core\\Exception\\BadCredentialsException;\\nuse Symfony\\Component\\Security\\Http\\AccessToken\\AccessTokenHandlerInterface;\\nuse Symfony\\Component\\Security\\Http\\Authenticator\\Passport\\Badge\\UserBadge;\\n\\nclass AccessTokenHandler implements AccessTokenHandlerInterface\\n{\\n    public function __construct(\\n        private AccessTokenRepository $repository\\n    ) {\\n    }\\n\\n    public function getUserBadgeFrom(string $accessToken): UserBadge\\n    {\\n        // e.g. query the \\\"access token\\\" database to search for this token\\n        $accessToken = $this->repository->findOneByValue($accessToken);\\n        if (null === $accessToken || !$accessToken->isValid()) {\\n            throw new BadCredentialsException('Invalid credentials.');\\n        }\\n\\n        // and return a UserBadge object containing the user identifier from the found token\\n        // (this is the same identifier used in Security configuration; it can be an email,\\n        // a UUID, a username, a database ID, etc.)\\n        return new UserBadge($accessToken->getUserId());\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing ServerDumper for Dump Handling in Standalone PHP\nDESCRIPTION: This PHP example initializes a custom dump handler for use outside a Symfony app, leveraging VarDumper's ServerDumper to forward all dumps to a listening TCP server. It sets up context providers and chooses between CLI or HTML dumper for fallback, configuring VarDumper globally to handle all future dump calls. Prerequisites: composer autoloading, symfony/var-dumper installed, appropriate TCP server running. Useful for custom or legacy PHP apps needing advanced variable inspection.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/var_dumper.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nrequire __DIR__.'/vendor/autoload.php';\n\nuse Symfony\\Component\\VarDumper\\Cloner\\VarCloner;\nuse Symfony\\Component\\VarDumper\\Dumper\\CliDumper;\nuse Symfony\\Component\\VarDumper\\Dumper\\ContextProvider\\CliContextProvider;\nuse Symfony\\Component\\VarDumper\\Dumper\\ContextProvider\\SourceContextProvider;\nuse Symfony\\Component\\VarDumper\\Dumper\\HtmlDumper;\nuse Symfony\\Component\\VarDumper\\Dumper\\ServerDumper;\nuse Symfony\\Component\\VarDumper\\VarDumper;\n\n$cloner = new VarCloner();\n$fallbackDumper = \\in_array(\\PHP_SAPI, ['cli', 'phpdbg']) ? new CliDumper() : new HtmlDumper();\n$dumper = new ServerDumper('tcp://127.0.0.1:9912', $fallbackDumper, [\n    'cli' => new CliContextProvider(),\n    'source' => new SourceContextProvider(),\n]);\n\nVarDumper::setHandler(function (mixed $var) use ($cloner, $dumper): ?string {\n    return $dumper->dump($cloner->cloneVar($var));\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Access Token Authentication - Symfony Security - PHP\nDESCRIPTION: This PHP snippet configures the Symfony Security component to enable token authentication on the 'main' firewall, specifying a custom AccessTokenHandler and including multiple token extractors (header and a custom extractor class). It shows how to use the fluent interface to define firewall options programmatically in a PHP-based Symfony configuration file. Requires appropriate handler and extractor classes to be defined and autoloaded.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/access_token.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Config\\SecurityConfig;\n\nreturn static function (SecurityConfig $security): void {\n    $security->firewall('main')\n        ->accessToken()\n            ->tokenHandler(AccessTokenHandler::class)\n            ->tokenExtractors([\n                'header',\n                CustomTokenExtractor::class,\n            ])\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Removing a Secret in Symfony (terminal)\nDESCRIPTION: Demonstrates how to remove (delete) a secret from the Symfony secrets vault using the bin/console CLI. Useful for rotation or removing obsolete sensitive values.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/secrets.rst#2025-04-22_snippet_8\n\nLANGUAGE: terminal\nCODE:\n```\n$ php bin/console secrets:remove DATABASE_PASSWORD\n```\n\n----------------------------------------\n\nTITLE: Configuring Lazy Loading for a Symfony Command (PHP)\nDESCRIPTION: Provides the PHP configuration method (e.g., within `config/services.php`) for registering a Symfony command (`App\\Command\\SunshineCommand`) as a lazy-loaded service. It uses the container builder's `register()` method to define the service and `addTag()` to apply the `console.command` tag with the `command` attribute set to `app:sunshine`.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/console/commands_as_services.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\nuse App\\Command\\SunshineCommand;\n\n// ...\n$container->register(SunshineCommand::class)\n    ->addTag('console.command', ['command' => 'app:sunshine'])\n;\n```\n\n----------------------------------------\n\nTITLE: Configuring Bootstrap 4 Form Theme in Symfony (YAML)\nDESCRIPTION: This YAML configuration snippet sets up Symfony to use the Bootstrap 4 form theme globally for all forms in the application.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/bootstrap4.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/twig.yaml\ntwig:\n    form_themes: ['bootstrap_4_layout.html.twig']\n```\n\n----------------------------------------\n\nTITLE: Prepending Bundle Configuration with Conditional Logic\nDESCRIPTION: Implementation of the prepend method to conditionally configure multiple bundles based on the presence of other bundles and existing configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/bundles/prepend_extension.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function prepend(ContainerBuilder $container): void\n{\n    // get all bundles\n    $bundles = $container->getParameter('kernel.bundles');\n    // determine if AcmeGoodbyeBundle is registered\n    if (!isset($bundles['AcmeGoodbyeBundle'])) {\n        // disable AcmeGoodbyeBundle in bundles\n        $config = ['use_acme_goodbye' => false];\n        foreach ($container->getExtensions() as $name => $extension) {\n            match ($name) {\n                'acme_something', 'acme_other' => $container->prependExtensionConfig($name, $config),\n                default => null\n            };\n        }\n    }\n\n    // get the configuration of AcmeHelloExtension\n    $configs = $container->getExtensionConfig($this->getAlias());\n\n    foreach (array_reverse($configs) as $config) {\n        if (isset($config['entity_manager_name'])) {\n            $container->prependExtensionConfig('acme_something', [\n                'entity_manager_name' => $config['entity_manager_name'],\n            ]);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating CSRF Attack Vector with HTML Form\nDESCRIPTION: Demonstrates a basic CSRF attack using a hidden HTML form that automatically submits data (e.g., changing a user's email) to a target URL (`https://example.com/settings/update-email`) when a logged-in user visits the malicious page. This highlights the vulnerability that CSRF protection aims to prevent.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/csrf.rst#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<html>\n    <body>\n        <form action=\"https://example.com/settings/update-email\" method=\"POST\">\n            <input type=\"hidden\" name=\"email\" value=\"malicious-actor-address@some-domain.com\"/>\n        </form>\n        <script>\n            document.forms[0].submit();\n        </script>\n\n        <!-- some content here to distract the user -->\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Mirroring Directory Contents (PHP)\nDESCRIPTION: Uses the `Filesystem::mirror` method to recursively copy the entire contents of a source directory to a target directory. This is suitable for copying directories, unlike `copy` which is for single files.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/filesystem.rst#2025-04-22_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$filesystem->mirror('/path/to/source', '/path/to/target');\n```\n\n----------------------------------------\n\nTITLE: Resetting Browser Client State in Symfony BrowserKit (PHP)\nDESCRIPTION: Shows how to reset a BrowserKit client's state using the restart() method. This clears both the browsing history and cookies, effectively starting a fresh session.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/browser_kit.rst#2025-04-22_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Acme\\Client;\n\n$client = new Client();\n$client->request('GET', '/');\n\n// reset the client (history and cookies are cleared too)\n$client->restart();\n```\n\n----------------------------------------\n\nTITLE: Enabling Asset Versioning in Webpack Encore Configuration\nDESCRIPTION: This snippet shows how to enable asset versioning in the Webpack Encore configuration file. It adds the enableVersioning() method to the Encore object.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/versioning.rst#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// webpack.config.js\n\n// ...\nEncore\n    .setOutputPath('public/build/')\n    // ...\n    .enableVersioning()\n```\n\n----------------------------------------\n\nTITLE: Using Custom Validation Closure with OptionsResolver\nDESCRIPTION: This example demonstrates how to use a custom validation closure for more complex validation logic. The closure should return true for valid values and false for invalid ones.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/options_resolver.rst#2025-04-22_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n// ...\n$resolver->setAllowedValues('transport', function (string $value): bool {\n    // return true or false\n});\n```\n\n----------------------------------------\n\nTITLE: Creating API Resource with Mercure Integration\nDESCRIPTION: Example of an API Platform entity with Mercure updates enabled for automatic broadcasting of changes.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mercure.rst#2025-04-22_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Book.php\nnamespace App\\Entity;\n\nuse ApiPlatform\\Core\\Annotation\\ApiResource;\nuse Doctrine\\ORM\\Mapping as ORM;\n\n#[ApiResource(mercure: true)]\n#[ORM\\Entity]\nclass Book\n{\n    #[ORM\\Id]\n    #[ORM\\Column]\n    public string $name = '';\n\n    #[ORM\\Column]\n    public string $status = '';\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Form Themes in Symfony YAML\nDESCRIPTION: YAML configuration for adding custom form theme templates to the Symfony application.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/create_custom_field_type.rst#2025-04-22_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\ntwig:\n    form_themes:\n        - '...'\n        - 'form/custom_types.html.twig'\n```\n\n----------------------------------------\n\nTITLE: Restricting Directory Depth in Symfony Finder\nDESCRIPTION: Shows how to limit the directory traversal depth when using Symfony's Finder component. Examples include exact depth matching, depth ranges, and multiple depth constraints.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/finder.rst#2025-04-22_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n// this will only consider files/directories which are direct children\n$finder->depth('== 0');\n$finder->depth('< 3');\n```\n\n----------------------------------------\n\nTITLE: Generating a Version 8 Custom UUID in PHP\nDESCRIPTION: Illustrates creating a UUIDv8 using `Uuid::v8()`. This version provides an RFC-compatible format for experimental or vendor-specific use cases, requiring only the variant and version bits to be set correctly. The result is an instance of `Symfony\\Component\\Uid\\UuidV8`.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/uid.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Uid\\Uuid;\n\n// $uuid is an instance of Symfony\\Component\\Uid\\UuidV8\n$uuid = Uuid::v8();\n```\n\n----------------------------------------\n\nTITLE: Running PHPUnit Tests to Detect Deprecations\nDESCRIPTION: Executes the PHPUnit test suite using the `phpunit` binary located in the `bin` directory. After installing the `symfony/phpunit-bridge`, this command displays a summary of remaining deprecation notices upon completion, helping developers identify code that needs updating before a major version upgrade.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/upgrade_major.rst#2025-04-22_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\n# this command is available after running \"composer require --dev symfony/phpunit-bridge\"\n$ ./bin/phpunit\n...\n\nOK (10 tests, 20 assertions)\n\nRemaining deprecation notices (6)\n\nThe \"request\" service is deprecated and will be removed in 3.0. Add a type-hint for\nSymfony\\Component\\HttpFoundation\\Request to your controller parameters to retrieve the\nrequest instead: 6x\n    3x in PageAdminTest::testPageShow from Symfony\\Cmf\\SimpleCmsBundle\\Tests\\WebTest\\Admin\n    2x in PageAdminTest::testPageList from Symfony\\Cmf\\SimpleCmsBundle\\Tests\\WebTest\\Admin\n    1x in PageAdminTest::testPageEdit from Symfony\\Cmf\\SimpleCmsBundle\\Tests\\WebTest\\Admin\n```\n\n----------------------------------------\n\nTITLE: Injecting and Using an Autowired Service in a Symfony Controller (PHP)\nDESCRIPTION: This snippet shows a Symfony controller (`DefaultController`) action method (`tweet`) that receives an instance of `TwitterClient` via method argument type-hinting. Due to autowiring, the Symfony container automatically instantiates and injects the configured `TwitterClient` service, which can then be used within the action.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/autowiring.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/DefaultController.php\nnamespace App\\Controller;\n\nuse App\\Service\\TwitterClient;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Attribute\\Route;\n\nclass DefaultController extends AbstractController\n{\n    #[Route('/tweet')]\n    public function tweet(TwitterClient $twitterClient, Request $request): Response\n    {\n        // fetch $user, $key, $status from the POST'ed data\n\n        $twitterClient->tweet($user, $key, $status);\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Writing to Error Output in Symfony Console\nDESCRIPTION: Shows how to use the getErrorStyle() method to write to the error output stream for debugging and error messages.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/console/style.rst#2025-04-22_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n$io = new SymfonyStyle($input, $output);\n\n// Write to the standard output\n$io->write('Reusable information');\n\n// Write to the error output\n$io->getErrorStyle()->warning('Debugging information or errors');\n```\n\n----------------------------------------\n\nTITLE: Configuring Console Front Controller with Application ID in Symfony\nDESCRIPTION: Code for the bin/console front controller that accepts an application ID parameter through command line options. This allows running console commands for specific applications within a multi-application Symfony project.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/multiple_kernels.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// bin/console\nuse Shared\\Kernel;\nuse Symfony\\Bundle\\FrameworkBundle\\Console\\Application;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Input\\InputOption;\n\nreturn function (InputInterface $input, array $context): Application {\n    $kernel = new Kernel($context['APP_ENV'], (bool) $context['APP_DEBUG'], $input->getParameterOption(['--id', '-i'], $context['APP_ID']));\n\n    $application = new Application($kernel);\n    $application->getDefinition()\n        ->addOption(new InputOption('--id', '-i', InputOption::VALUE_REQUIRED, 'The App ID'))\n    ;\n\n    return $application;\n};\n```\n\n----------------------------------------\n\nTITLE: HTML Email Template in Twig\nDESCRIPTION: Example Twig template for HTML emails that uses variables passed from the context and accesses the special 'email' variable to retrieve recipient information.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_41\n\nLANGUAGE: html+twig\nCODE:\n```\n{# templates/emails/signup.html.twig #}\n<h1>Welcome {{ email.toName }}!</h1>\n\n<p>\n    You signed up as {{ username }} the following email:\n</p>\n<p><code>{{ email.to[0].address }}</code></p>\n\n<p>\n    <a href=\"#\">Activate your account</a>\n    (this link is valid until {{ expiration_date|date('F jS') }})\n</p>\n```\n\n----------------------------------------\n\nTITLE: Checking Lock Ownership in Symfony\nDESCRIPTION: Example showing how to verify if the current Lock instance still owns a lock. This is particularly useful for checking lock status during long-running processes that might exceed the lock's TTL (Time To Live).\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/lock.rst#2025-04-22_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nif ($lock->isAcquired()) {\n    // We (still) own the lock\n}\n```\n\n----------------------------------------\n\nTITLE: Restricting CSRF Validation to Specific HTTP Methods in Symfony\nDESCRIPTION: This example shows how to restrict CSRF token validation to specific HTTP methods using the 'methods' parameter of the IsCsrfTokenValid attribute. In this case, validation only occurs for DELETE requests.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/csrf.rst#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n#[IsCsrfTokenValid('delete-item', tokenKey: 'token', methods: ['DELETE'])]\npublic function delete(Post $post): Response\n{\n    // ... delete the object\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a JOIN Query in Doctrine Repository\nDESCRIPTION: Custom repository method that optimizes fetching a Product with its related Category using a JOIN query. This eliminates the need for a separate query to load the related Category entity.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine/associations.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// src/Repository/ProductRepository.php\n\n// ...\nclass ProductRepository extends ServiceEntityRepository\n{\n    public function findOneByIdJoinedToCategory(int $productId): ?Product\n    {\n        $entityManager = $this->getEntityManager();\n\n        $query = $entityManager->createQuery(\n            'SELECT p, c\n            FROM App\\\\Entity\\\\Product p\n            INNER JOIN p.category c\n            WHERE p.id = :id'\n        )->setParameter('id', $productId);\n\n        return $query->getOneOrNullResult();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enhanced Entity Method for Doctrine Relationships in Symfony\nDESCRIPTION: PHP code demonstrating how to properly handle owning side relationships in Doctrine. The addTag method sets the relationship from both sides to ensure proper database persistence.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/form_collections.rst#2025-04-22_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Task.php\n\n// ...\npublic function addTag(Tag $tag): void\n{\n    // for a many-to-many association:\n    $tag->addTask($this);\n\n    // for a many-to-one association:\n    $tag->setTask($this);\n\n    $this->tags->add($tag);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Sending Notifications with Symfony Notifier - PHP\nDESCRIPTION: This PHP snippet shows how to create and send a notification using Symfony's Notifier component in a controller action. It constructs a Notification instance specifying channels (e.g., 'email'), sets content, creates a recipient using email and phone number, and sends the notification. Requires symfony/notifier and user entity with appropriate methods. Inputs include the NotifierInterface, Notification subject, channels, and recipient contact details. Outputs depend on the configuration of available transports.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/notifier.rst#2025-04-22_snippet_26\n\nLANGUAGE: php\nCODE:\n```\npublic function create(NotifierInterface $notifier): Response\n{\n    // ...\n\n    // Create a Notification that has to be sent\n    // using the \"email\" channel\n    $notification = (new Notification('New Invoice', ['email']))\n        ->content('You got a new invoice for 15 EUR.');\n\n    // The receiver of the Notification\n    $recipient = new Recipient(\n        $user->getEmail(),\n        $user->getPhonenumber()\n    );\n\n    // Send the notification to the recipient\n    $notifier->send($notification, $recipient);\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Working with Email Addresses\nDESCRIPTION: Examples of different ways to specify email addresses in Symfony Mailer, including simple strings, Address objects with display names, and handling non-ASCII characters.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n// ...\nuse Symfony\\Component\\Mime\\Address;\n\n$email = (new Email())\n    // email address as a simple string\n    ->from('fabien@example.com')\n\n    // non-ASCII characters are supported both in the local part and the domain;\n    // if the SMTP server doesn't support this feature, you'll see an exception\n    ->from('jânë.dœ@ëxãmplę.com')\n\n    // email address as an object\n    ->from(new Address('fabien@example.com'))\n\n    // defining the email address and name as an object\n    // (email clients will display the name)\n    ->from(new Address('fabien@example.com', 'Fabien'))\n\n    // defining the email address and name as a string\n    // (the format must match: 'Name <email@example.com>')\n    ->from(Address::create('Fabien Potencier <fabien@example.com>'))\n\n    // ...\n;\n```\n\n----------------------------------------\n\nTITLE: Creating Dependent Default Values in OptionsResolver\nDESCRIPTION: This example shows how to set default values that depend on other options. The 'port' option defaults to 465 for SSL encryption and 25 otherwise, using a closure to compute the default value.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/options_resolver.rst#2025-04-22_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\OptionsResolver\\Options;\n\n// ...\nclass Mailer\n{\n    // ...\n    public function configureOptions(OptionsResolver $resolver): void\n    {\n        // ...\n        $resolver->setDefault('encryption', null);\n\n        $resolver->setDefault('port', function (Options $options): int {\n            if ('ssl' === $options['encryption']) {\n                return 465;\n            }\n\n            return 25;\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring the Serializer with ClassDiscriminator for Interfaces in Symfony\nDESCRIPTION: Shows how to manually configure the Symfony Serializer with ClassDiscriminatorFromClassMetadata to handle interfaces and abstract classes when using the standalone implementation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer.rst#2025-04-22_snippet_64\n\nLANGUAGE: php\nCODE:\n```\n// ...\nuse Symfony\\Component\\Serializer\\Mapping\\ClassDiscriminatorFromClassMetadata;\nuse Symfony\\Component\\Serializer\\Mapping\\Factory\\ClassMetadataFactory;\nuse Symfony\\Component\\Serializer\\Mapping\\Loader\\AttributeLoader;\nuse Symfony\\Component\\Serializer\\Normalizer\\ObjectNormalizer;\nuse Symfony\\Component\\Serializer\\Serializer;\n\nclass InvoiceLine\n{\n    public function __construct(\n        private InvoiceItemInterface $invoiceItem\n    ) {\n        $this->invoiceItem = $invoiceItem;\n    }\n\n    public function getInvoiceItem(): InvoiceItemInterface\n    {\n        return $this->invoiceItem;\n    }\n\n    // ...\n}\n\n// ...\n\n// Configure a loader to retrieve mapping information like DiscriminatorMap.\n// E.g. when using PHP attributes:\n$classMetadataFactory = new ClassMetadataFactory(new AttributeLoader());\n$discriminator = new ClassDiscriminatorFromClassMetadata($classMetadataFactory);\n$normalizers = [\n    new ObjectNormalizer($classMetadataFactory, null, null, null, $discriminator),\n];\n\n$serializer = new Serializer($normalizers, $encoders);\n\n$invoiceLine = new InvoiceLine(new Product());\n\n$jsonString = $serializer->serialize($invoiceLine, 'json');\n// $jsonString contains {\"type\":\"product\",...}\n\n$invoiceLine = $serializer->deserialize($jsonString, InvoiceLine::class, 'json');\n// $invoiceLine contains new InvoiceLine(new Product(...))\n```\n\n----------------------------------------\n\nTITLE: Defining Cache Pools in Symfony using PHP Configuration\nDESCRIPTION: This PHP configuration snippet demonstrates defining Symfony cache pools using the `FrameworkConfig` object. It sets a default Memcached provider, creates pools like 'custom_thing.cache' (using 'cache.app' adapter), 'my_cache_pool' (using filesystem adapter), 'acme.cache' (using the default Memcached provider), 'foobar.cache' (with a specific Memcached provider URL), and 'short_cache' (using 'foobar.cache' as an adapter with a custom lifetime). These pools become autowirable services.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/cache.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/cache.php\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework): void {\n    $cache = $framework->cache();\n    $cache->defaultMemcachedProvider('memcached://localhost');\n\n    // creates a \"custom_thing.cache\" service\n    // autowireable via \"CacheInterface $customThingCache\"\n    // uses the \"app\" cache configuration\n    $cache->pool('custom_thing.cache')\n        ->adapters(['cache.app']);\n\n    // creates a \"my_cache_pool\" service\n    // autowireable via \"CacheInterface $myCachePool\"\n    $cache->pool('my_cache_pool')\n        ->adapters(['cache.adapter.filesystem']);\n\n    // uses the default_memcached_provider from above\n    $cache->pool('acme.cache')\n        ->adapters(['cache.adapter.memcached']);\n\n     // control adapter's configuration\n    $cache->pool('foobar.cache')\n        ->adapters(['cache.adapter.memcached'])\n        ->provider('memcached://user:password@example.com');\n\n    $cache->pool('short_cache')\n        ->adapters(['foobar.cache'])\n        ->defaultLifetime(60);\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing a Scoped HttpClient for a Base URI (PHP)\nDESCRIPTION: Demonstrates how to initialize a Symfony HttpClient instance for a specific base URI with bearer token authentication. Dependencies: requires 'symfony/http-client'. Uses 'createForBaseUri' with a base URL and options array for auth and other settings. Inputs include the base URI string and an associative array of options; outputs a customized client bound to the given API. Useful in custom PHP scripts needing special clients.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_47\n\nLANGUAGE: php\nCODE:\n```\n$client = HttpClient::createForBaseUri('https://...', [\\n    'auth_bearer' => 'secret_bearer_token',\\n    // ...\\n]);\\n\n```\n\n----------------------------------------\n\nTITLE: Waiting for Available Tokens in Symfony Rate Limiter\nDESCRIPTION: This code shows how to implement a waiting mechanism for rate limiting in Symfony, where instead of rejecting requests, the application waits until a token becomes available. It uses the reserve() method to block execution until the rate limit allows processing.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/rate_limiter.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/ApiController.php\nnamespace App\\Controller;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\RateLimiter\\RateLimiterFactoryInterface;\n\nclass ApiController extends AbstractController\n{\n    public function registerUser(Request $request, RateLimiterFactoryInterface $authenticatedApiLimiter): Response\n    {\n        $apiKey = $request->headers->get('apikey');\n        $limiter = $authenticatedApiLimiter->create($apiKey);\n\n        // this blocks the application until the given number of tokens can be consumed\n        $limiter->reserve(1)->wait();\n\n        // optional, pass a maximum wait time (in seconds), a MaxWaitDurationExceededException\n        // is thrown if the process has to wait longer. E.g. to wait at most 20 seconds:\n        //$limiter->reserve(1, 20)->wait();\n\n        // ...\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: PSR-6 Basic Cache Operations\nDESCRIPTION: Example showing basic PSR-6 cache operations including creating, retrieving, updating and deleting cache items\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/cache.rst#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Cache\\Adapter\\FilesystemAdapter;\n\n$cache = new FilesystemAdapter();\n\n// create a new item by trying to get it from the cache\n$productsCount = $cache->getItem('stats.products_count');\n\n// assign a value to the item and save it\n$productsCount->set(4711);\n$cache->save($productsCount);\n\n// retrieve the cache item\n$productsCount = $cache->getItem('stats.products_count');\nif (!$productsCount->isHit()) {\n    // ... item does not exist in the cache\n}\n// retrieve the value stored by the item\n$total = $productsCount->get();\n\n// remove the cache item\n$cache->deleteItem('stats.products_count');\n```\n\n----------------------------------------\n\nTITLE: Documenting getter and setter Options in RST\nDESCRIPTION: This snippet shows how to document callable options (getter and setter) used for custom data mapping in Symfony forms.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/form.rst#2025-04-22_snippet_4\n\nLANGUAGE: rst\nCODE:\n```\n``getter``\n~~~~~~~~\n\n**type**: ``callable`` **default**: ``null``\n\nWhen provided, this callable will be invoked to read the value from\nthe underlying object that will be used to populate the form field.\n\nMore details are available in the section on :doc:`/form/data_mappers`.\n\n``setter``\n~~~~~~~~\n\n**type**: ``callable`` **default**: ``null``\n\nWhen provided, this callable will be invoked to map the form value\nback to the underlying object.\n\nMore details are available in the section on :doc:`/form/data_mappers`.\n```\n\n----------------------------------------\n\nTITLE: Forcing SMTP Protocol with SendGrid\nDESCRIPTION: Example of configuring SendGrid to use SMTP protocol instead of the default HTTP protocol. This demonstrates how to customize the transport protocol for third-party providers.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_6\n\nLANGUAGE: env\nCODE:\n```\n# .env\n# force to use SMTP instead of HTTP (which is the default)\nMAILER_DSN=sendgrid+smtp://$SENDGRID_KEY@default\n```\n\n----------------------------------------\n\nTITLE: Creating Strings from Random Characters and Code Points (PHP)\nDESCRIPTION: This snippet shows ways to construct ByteString objects with randomly generated contents and UnicodeString objects from specific Unicode code points. You must use the corresponding factory methods from ByteString or UnicodeString. Inputs include optional length and character set for random strings, or a list of code points for Unicode strings. The output is a new String object.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/string.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// ByteString can create a random string of the given length\n$foo = ByteString::fromRandom(12);\n// by default, random strings use A-Za-z0-9 characters; you can restrict\n// the characters to use with the second optional argument\n$foo = ByteString::fromRandom(6, 'AEIOU0123456789');\n$foo = ByteString::fromRandom(10, 'qwertyuiop');\n\n// CodePointString and UnicodeString can create a string from code points\n$foo = UnicodeString::fromCodePoints(0x928, 0x92E, 0x938, 0x94D, 0x924, 0x947);\n// equivalent to: $foo = new UnicodeString('नमस्ते');\n```\n\n----------------------------------------\n\nTITLE: Updated Category Entity with OneToMany Relationship\nDESCRIPTION: Shows the changes made to the Category entity to include the OneToMany relationship with Product, including ORM annotations, collection initialization, and getter/setter methods.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine/associations.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Category.php\nnamespace App\\Entity;\n\n// ...\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\Collections\\Collection;\n\nclass Category\n{\n    // ...\n\n    #[ORM\\OneToMany(targetEntity: Product::class, mappedBy: 'category')]\n    private Collection $products;\n\n    public function __construct()\n    {\n        $this->products = new ArrayCollection();\n    }\n\n    /**\n     * @return Collection<int, Product>\n     */\n    public function getProducts(): Collection\n    {\n        return $this->products;\n    }\n\n    // addProduct() and removeProduct() were also added\n}\n```\n\n----------------------------------------\n\nTITLE: Serializing an Object in a Twig Template\nDESCRIPTION: Demonstrates how to serialize a PHP object (`person`) directly within a Twig template using the `serialize` filter. The desired output format ('json') is passed as an argument to the filter.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer.rst#2025-04-22_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{{ person|serialize(format = 'json') }}\n```\n\n----------------------------------------\n\nTITLE: Creating Types Automatically with Type::fromValue()\nDESCRIPTION: Shows how to automatically detect and create a `Type` object based on a given PHP value using the static `Type::fromValue()` method. This method simplifies type creation by inferring the type from the input value (e.g., 1.1 becomes `Type::float()`, '...' becomes `Type::string()`). This method was introduced in Symfony 7.3.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/type_info.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nType::fromValue(1.1);   // same as Type::float()\nType::fromValue('...'); // same as Type::string()\nType::fromValue(false); // same as Type::false()\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Subscriber with Class-Based Event References\nDESCRIPTION: A Symfony event subscriber that uses fully qualified class names (FQCN) as event references instead of string names. This approach provides better IDE support and type safety.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/event_dispatcher.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// src/EventSubscriber/RequestSubscriber.php\nnamespace App\\EventSubscriber;\n\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\nuse Symfony\\Component\\HttpKernel\\Event\\RequestEvent;\n\nclass RequestSubscriber implements EventSubscriberInterface\n{\n    public static function getSubscribedEvents(): array\n    {\n        return [\n            RequestEvent::class => 'onKernelRequest',\n        ];\n    }\n\n    public function onKernelRequest(RequestEvent $event): void\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Form Type Class with Event Listener in Symfony\nDESCRIPTION: Example of implementing a form event listener as a method within a form type class. Demonstrates using PRE_SET_DATA event.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/events.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Form;\n\nuse Symfony\\Component\\Form\\Event\\PreSetDataEvent;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\CheckboxType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\TextType;\nuse Symfony\\Component\\Form\\FormEvents;\n\nclass SubscriptionType extends AbstractType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options): void\n    {\n        $builder\n            ->add('username', TextType::class)\n            ->add('showEmail', CheckboxType::class)\n            ->addEventListener(\n                FormEvents::PRE_SET_DATA,\n                [$this, 'onPreSetData']\n            )\n        ;\n    }\n\n    public function onPreSetData(PreSetDataEvent $event): void\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Stopwatch Usage in Symfony Service\nDESCRIPTION: Example of injecting and using the Stopwatch component in a Symfony service to measure performance of an export operation. Shows how to start and stop timing, and access the resulting event data.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/performance.rst#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Stopwatch\\Stopwatch;\n\nclass DataExporter\n{\n    public function __construct(\n        private Stopwatch $stopwatch,\n    ) {\n    }\n\n    public function export(): void\n    {\n        // the argument is the name of the \"profiling event\"\n        $this->stopwatch->start('export-data');\n\n        // ...do things to export data...\n\n        // reset the stopwatch to delete all the data measured so far\n        // $this->stopwatch->reset();\n\n        $this->stopwatch->stop('export-data');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Evaluating XPath Expressions with Symfony DomCrawler in PHP\nDESCRIPTION: Demonstrates the Crawler's evaluate and filterXPath features to run XPath expressions and compute results like attribute substrings or counts. Examples include extracting IDs, counting elements, and returning new Crawler instances based on XPath queries. The behavior varies depending on the XPath return type.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/dom_crawler.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\DomCrawler\\Crawler;\n\n$html = '<html>\n<body>\n    <span id=\"article-100\" class=\"article\">Article 1</span>\n    <span id=\"article-101\" class=\"article\">Article 2</span>\n    <span id=\"article-102\" class=\"article\">Article 3</span>\n</body>\n</html>';\n\n$crawler = new Crawler();\n$crawler->addHtmlContent($html);\n\n$crawler->filterXPath('//span[contains(@id, \"article-\")]')->evaluate('substring-after(@id, \"-\")');\n/* Result:\n[\n    0 => '100',\n    1 => '101',\n    2 => '102',\n];\n*/\n\n$crawler->evaluate('substring-after(//span[contains(@id, \"article-\")]/@id, \"-\")');\n/* Result:\n[\n    0 => '100',\n]\n*/\n\n$crawler->filterXPath('//span[@class=\"article\"]')->evaluate('count(@id)');\n/* Result:\n[\n    0 => 1.0,\n    1 => 1.0,\n    2 => 1.0,\n]\n*/\n\n$crawler->evaluate('count(//span[@class=\"article\"])');\n/* Result:\n[\n    0 => 3.0,\n]\n*/\n\n$crawler->evaluate('//span[1]');\n// A Symfony\\Component\\DomCrawler\\Crawler instance\n```\n\n----------------------------------------\n\nTITLE: Overriding PHP Globals from a Simulated Request Object in PHP\nDESCRIPTION: Demonstrates calling the `overrideGlobals()` method on a manually created `Request` object. This method updates the actual PHP global variables (`$_GET`, `$_POST`, `$_SERVER`, etc.) to match the state of the `Request` object, which can be useful in testing environments.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$request->overrideGlobals();\n```\n\n----------------------------------------\n\nTITLE: Securing Routes with Expressions in Symfony Security\nDESCRIPTION: Configuration examples showing how to use expressions with 'allow_if' to implement complex access logic. This example grants access to a secured internal path based on client IP, request headers, or admin role.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/access_control.rst#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\nsecurity:\n    # ...\n    access_control:\n        -\n            path: ^/_internal/secure\n            # the 'roles' and 'allow_if' options work like an OR expression, so\n            # access is granted if the expression is TRUE or the user has ROLE_ADMIN\n            roles: 'ROLE_ADMIN'\n            allow_if: \"'127.0.0.1' == request.getClientIp() or request.headers.has('X-Secure-Access')\"\n```\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/security.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<srv:container xmlns=\"http://symfony.com/schema/dic/security\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:srv=\"http://symfony.com/schema/dic/services\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/security\n        https://symfony.com/schema/dic/security/security-1.0.xsd\">\n\n    <config>\n        <!-- ... -->\n        <!-- the 'role' and 'allow-if' options work like an OR expression, so\n             access is granted if the expression is TRUE or the user has ROLE_ADMIN -->\n        <rule path=\"^/_internal/secure\"\n            role=\"ROLE_ADMIN\"\n            allow-if=\"'127.0.0.1' == request.getClientIp() or request.headers.has('X-Secure-Access')\"/>\n    </config>\n</srv:container>\n```\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/security.php\nuse Symfony\\Config\\SecurityConfig;\n\nreturn static function (SecurityConfig $security): void {\n    // ...\n\n    $security->accessControl()\n        ->path('^/_internal/secure')\n        // the 'role' and 'allow-if' options work like an OR expression, so\n        // access is granted if the expression is TRUE or the user has ROLE_ADMIN\n        ->roles(['ROLE_ADMIN'])\n        ->allowIf('\"127.0.0.1\" == request.getClientIp() or request.headers.has(\"X-Secure-Access\")')\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Default Values for Environment Variables\nDESCRIPTION: Shows how to define default values for environment variables in .env files using the ${VAR:-default} syntax, which provides a fallback when variables are not set.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration.rst#2025-04-22_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nDB_USER=\nDB_PASS=${DB_USER:-root}pass # results in DB_PASS=rootpass\n```\n\n----------------------------------------\n\nTITLE: Using Cache Pool in PHP\nDESCRIPTION: Example of using a cache pool to store and retrieve a value, with expiration set to 1 hour. The callable is only executed on a cache miss.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/cache.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Contracts\\Cache\\ItemInterface;\n\n// The callable will only be executed on a cache miss.\n$value = $pool->get('my_cache_key', function (ItemInterface $item): string {\n    $item->expiresAfter(3600);\n\n    // ... do some HTTP request or heavy computations\n    $computedValue = 'foobar';\n\n    return $computedValue;\n});\n\necho $value; // 'foobar'\n\n// ... and to remove the cache key\n$pool->delete('my_cache_key');\n```\n\n----------------------------------------\n\nTITLE: Managing an Expiring Lock with TTL in PHP\nDESCRIPTION: Demonstrates creating an expiring lock with a specific Time-To-Live (TTL). The `createLock()` method is called with the resource name and a `ttl` named argument set to 30 seconds. The code attempts to acquire the lock, and the critical section is wrapped in a `try...finally` block to ensure `release()` is always called, even if exceptions occur within the `try` block.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/lock.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// ...\n// create an expiring lock that lasts 30 seconds (default is 300.0)\n$lock = $factory->createLock('pdf-creation', ttl: 30);\n\nif (!$lock->acquire()) {\n    return;\n}\ntry {\n    // perform a job during less than 30 seconds\n} finally {\n    $lock->release();\n}\n```\n\n----------------------------------------\n\nTITLE: Entity Methods for Collection Management in Symfony\nDESCRIPTION: PHP code for the Task entity class showing the methods required to handle collection operations. The addTag and removeTag methods facilitate proper collection management when form data is submitted.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/form_collections.rst#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Task.php\nnamespace App\\Entity;\n\n// ...\nclass Task\n{\n    // ...\n\n    public function addTag(Tag $tag): void\n    {\n        $this->tags->add($tag);\n    }\n\n    public function removeTag(Tag $tag): void\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Acquiring a Blocking Lock with FlockStore in PHP\nDESCRIPTION: Shows how to create and acquire a blocking lock using `FlockStore`. A `FlockStore` instance is created, configured to store lock files in '/var/stores'. A `LockFactory` uses this store. `createLock` gets a lock instance for 'pdf-creation', and `acquire(true)` is called, which causes the script execution to pause (block) until the lock can be successfully acquired.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/lock.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Lock\\LockFactory;\nuse Symfony\\Component\\Lock\\Store\\FlockStore;\n\n$store = new FlockStore('/var/stores');\n$factory = new LockFactory($store);\n\n$lock = $factory->createLock('pdf-creation');\n$lock->acquire(true);\n```\n\n----------------------------------------\n\nTITLE: Configuring Services with ContainerConfigurator in Symfony (PHP)\nDESCRIPTION: This PHP snippet demonstrates defining parameters and configuring services using Symfony's ContainerConfigurator. It sets a parameter 'mailer.transport', registers the 'mailer' service with this parameter, and injects the 'mailer' into the 'newsletter_manager' service via method call. This example requires the appropriate Symfony DependencyInjection component and conforms to best practices for service registration and dependency resolution.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/dependency_injection.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nnamespace Symfony\\\\Component\\\\DependencyInjection\\\\Loader\\\\Configurator;\\n\\nreturn static function (ContainerConfigurator $container): void {\\n    $container->parameters()\\n        // ...\\n        ->set('mailer.transport', 'sendmail')\\n    ;\\n\\n    $services = $container->services();\\n    $services->set('mailer', 'Mailer')\\n        ->args(['%mailer.transport%'])\\n    ;\\n\\n    $services->set('mailer', 'Mailer')\\n        ->args([param('mailer.transport')])\\n    ;\\n\\n    $services->set('newsletter_manager', 'NewsletterManager')\\n        ->call('setMailer', [service('mailer')])\\n    ;\\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Form Validation with Constraints in Symfony Controller\nDESCRIPTION: Shows how to add validation constraints to form fields in a Symfony controller. Demonstrates both single and multiple constraints on different form fields.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/form.rst#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/DefaultController.php\nnamespace App\\Controller;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\DateType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\TextType;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Validator\\Constraints\\NotBlank;\nuse Symfony\\Component\\Validator\\Constraints\\Type;\n\nclass DefaultController extends AbstractController\n{\n    public function new(Request $request): Response\n    {\n        $form = $this->createFormBuilder()\n            ->add('task', TextType::class, [\n                'constraints' => new NotBlank(),\n            ])\n            ->add('dueDate', DateType::class, [\n                'constraints' => [\n                    new NotBlank(),\n                    new Type(\\DateTime::class),\n                ],\n            ])\n            ->getForm();\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Bundle Environment Settings in Symfony\nDESCRIPTION: Example of how to enable/disable bundles per environment in the bundles.php configuration file. Shows enabling bundles for all environments, dev only, and dev/test environments.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/bundles.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// config/bundles.php\nreturn [\n    // 'all' means that the bundle is enabled for any Symfony environment\n    Symfony\\Bundle\\FrameworkBundle\\FrameworkBundle::class => ['all' => true],\n    // ...\n\n    // this bundle is enabled only in 'dev'\n    Symfony\\Bundle\\DebugBundle\\DebugBundle::class => ['dev' => true],\n    // ...\n\n    // this bundle is enabled only in 'dev' and 'test', so you can't use it in 'prod'\n    Symfony\\Bundle\\WebProfilerBundle\\WebProfilerBundle::class => ['dev' => true, 'test' => true],\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Generating Webpack Config Without CLI in JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to generate a Webpack configuration object using Encore without using the command-line interface.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/advanced-config.rst#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst Encore = require('@symfony/webpack-encore');\n\n// Set the runtime environment\nEncore.configureRuntimeEnvironment('dev');\n\n// Retrieve the Webpack configuration object\nconst webpackConfig = require('./webpack.config');\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom HTML Sanitizer in Standalone PHP\nDESCRIPTION: Shows how to configure a custom HTML sanitizer in standalone PHP without the Symfony framework.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/html_sanitizer.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\HtmlSanitizer\\HtmlSanitizer;\nuse Symfony\\Component\\HtmlSanitizer\\HtmlSanitizerConfig;\n\n$postSanitizer = new HtmlSanitizer(\n    (new HtmlSanitizerConfig())\n        ->blockElement('h1')\n);\n```\n\n----------------------------------------\n\nTITLE: Executing PHP Code in Isolation with Symfony PhpProcess\nDESCRIPTION: This example demonstrates how to execute PHP code in isolation using the PhpProcess class from Symfony's Process component.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/process.rst#2025-04-22_snippet_19\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Process\\PhpProcess;\n\n$process = new PhpProcess(<<<EOF\n    <?= 'Hello World' ?>\nEOF\n);\n$process->run();\n```\n\n----------------------------------------\n\nTITLE: Streaming Input to a Process in PHP with Symfony Process\nDESCRIPTION: This snippet demonstrates how to stream input to a running process using Symfony's InputStream class. It allows writing to the process's standard input while it's running.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/process.rst#2025-04-22_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\n$input = new InputStream();\n$input->write('foo');\n\n$process = new Process(['cat']);\n$process->setInput($input);\n$process->start();\n\n// ... read process output or do other things\n\n$input->write('bar');\n$input->close();\n\n$process->wait();\n\n// will echo: foobar\necho $process->getOutput();\n```\n\n----------------------------------------\n\nTITLE: Converting PSR-7 ServerRequestInterface to Symfony HttpFoundation Request - PHP\nDESCRIPTION: Illustrates conversion from a PSR-7 ServerRequestInterface instance to a Symfony HttpFoundation Request using HttpFoundationFactory. Depends on symfony/psr-http-message-bridge. The input $psrRequest must implement Psr\\Http\\Message\\ServerRequestInterface; output is a Symfony Request. No special settings are required beyond proper factory instantiation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/psr7.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Bridge\\PsrHttpMessage\\Factory\\HttpFoundationFactory;\n\n// $psrRequest is an instance of Psr\\Http\\Message\\ServerRequestInterface\n\n$httpFoundationFactory = new HttpFoundationFactory();\n$symfonyRequest = $httpFoundationFactory->createRequest($psrRequest);\n```\n\n----------------------------------------\n\nTITLE: Front Controller Implementation\nDESCRIPTION: Implementation of a front controller pattern that routes all requests through a single entry point\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/create_framework/front_controller.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nrequire_once __DIR__.'/../vendor/autoload.php';\n\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\n$request = Request::createFromGlobals();\n$response = new Response();\n\n$map = [\n    '/hello' => __DIR__.'/../src/pages/hello.php',\n    '/bye'   => __DIR__.'/../src/pages/bye.php',\n];\n\n$path = $request->getPathInfo();\nif (isset($map[$path])) {\n    ob_start();\n    include $map[$path];\n    $response->setContent(ob_get_clean());\n} else {\n    $response->setStatusCode(404);\n    $response->setContent('Not Found');\n}\n\n$response->send();\n```\n\n----------------------------------------\n\nTITLE: Asking User for Input in Symfony Console\nDESCRIPTION: Demonstrates how to use the ask() method of SymfonyStyle to prompt the user for input, with optional default values and validation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/console/style.rst#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$io->ask('What is your name?');\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$io->ask('Where are you from?', 'United States');\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$io->ask('Number of workers to start', '1', function (string $number): int {\n    if (!is_numeric($number)) {\n        throw new \\RuntimeException('You must type a number.');\n    }\n\n    return (int) $number;\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing EventSubscriber for Symfony Debug Toolbar in PHP\nDESCRIPTION: This snippet shows how to create an event subscriber that modifies the response headers for the Symfony Debug Toolbar. It uses the #[When] attribute to only run in the 'dev' environment.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/profiler.rst#2025-04-22_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\HttpKernel\\Event\\ResponseEvent;\nuse Symfony\\Component\\HttpKernel\\KernelInterface;\n\n// ...\n\n#[When(env: 'dev')]\nclass MySubscriber implements EventSubscriberInterface\n{\n    // ...\n\n    public function onKernelResponse(ResponseEvent $event): void\n    {\n        // Your custom logic here\n\n        $response = $event->getResponse();\n        $response->headers->set('Symfony-Debug-Toolbar-Replace', '1');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PHP OPcache Preloading\nDESCRIPTION: PHP INI configuration for enabling OPcache class preloading, which compiles and loads classes at startup for improved performance. This setting points to Symfony's preload file.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/performance.rst#2025-04-22_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n; php.ini\nopcache.preload=/path/to/project/config/preload.php\n\n; required for opcache.preload:\nopcache.preload_user=www-data\n```\n\n----------------------------------------\n\nTITLE: IP Address and Subnet Checking with IpUtils (Symfony, PHP)\nDESCRIPTION: Demonstrates checking whether an IP address belongs to a given CIDR subnet or to a private subnet, using static methods checkIp() and isPrivateIp() from Symfony's IpUtils class. Inputs are IP address strings and (for CIDR checking) subnet strings. Outputs are boolean values indicating inclusion in the specified range. Useful for network security and access control.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#2025-04-22_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\HttpFoundation\\IpUtils;\n\n$ipv4 = '192.168.1.56';\n$CIDRv4 = '192.168.1.0/16';\n$isIpInCIDRv4 = IpUtils::checkIp($ipv4, $CIDRv4);\n// $isIpInCIDRv4 = true\n\n$ipv6 = '2001:db8:abcd:1234::1';\n$CIDRv6 = '2001:db8:abcd::/48';\n$isIpInCIDRv6 = IpUtils::checkIp($ipv6, $CIDRv6);\n// $isIpInCIDRv6 = true\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\HttpFoundation\\IpUtils;\n\n$ipv4 = '192.168.1.1';\n$isPrivate = IpUtils::isPrivateIp($ipv4);\n// $isPrivate = true\n\n$ipv6 = '2a01:198:603:10:396e:4789:8e99:890f';\n$isPrivate = IpUtils::isPrivateIp($ipv6);\n// $isPrivate = false\n```\n\n----------------------------------------\n\nTITLE: Checking Which Submit Button Was Clicked in Symfony Controller\nDESCRIPTION: This snippet demonstrates how to check which submit button was clicked in a Symfony controller. It uses the isClicked() method to determine if the 'Save and Add' button was clicked and sets the next action accordingly.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/multiple_buttons.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nif ($form->isSubmitted() && $form->isValid()) {\n    // ... perform some action, such as saving the task to the database\n\n    $nextAction = $form->get('saveAndAdd')->isClicked()\n        ? 'task_new'\n        : 'task_success';\n\n    return $this->redirectToRoute($nextAction);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ServiceSubscriberInterface with ServiceMethodsSubscriberTrait in PHP\nDESCRIPTION: Example showing how to use the ServiceMethodsSubscriberTrait with SubscribedService attributes to add type-hinted dependencies to a service class. The service can access a router and logger through private helper methods.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/service_subscribers_locators.rst#2025-04-22_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n// src/Service/MyService.php\nnamespace App\\Service;\n\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Component\\Routing\\RouterInterface;\nuse Symfony\\Contracts\\Service\\Attribute\\SubscribedService;\nuse Symfony\\Contracts\\Service\\ServiceMethodsSubscriberTrait;\nuse Symfony\\Contracts\\Service\\ServiceSubscriberInterface;\n\nclass MyService implements ServiceSubscriberInterface\n{\n    use ServiceMethodsSubscriberTrait;\n\n    public function doSomething(): void\n    {\n        // $this->router() ...\n        // $this->logger() ...\n    }\n\n    #[SubscribedService]\n    private function router(): RouterInterface\n    {\n        return $this->container->get(__METHOD__);\n    }\n\n    #[SubscribedService]\n    private function logger(): LoggerInterface\n    {\n        return $this->container->get(__METHOD__);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using PasswordCredentials with Passport in Symfony Security\nDESCRIPTION: Example showing how to use PasswordCredentials with a Passport for password validation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/custom_authenticator.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Security\\Http\\Authenticator\\Passport\\Credentials\\PasswordCredentials;\n\n// ...\nreturn new Passport(new UserBadge($email), new PasswordCredentials($plaintextPassword));\n```\n\n----------------------------------------\n\nTITLE: Validating UUIDs with Specific Formats in Symfony\nDESCRIPTION: Demonstrates how to validate UUIDs with specific formats using the isValid method and format constants in Symfony's Uuid class.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/uid.rst#2025-04-22_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Uid\\Uuid;\n\n$isValid = Uuid::isValid('90067ce4-f083-47d2-a0f4-c47359de0f97', Uuid::FORMAT_RFC_4122); // accept only RFC 4122 UUIDs\n$isValid = Uuid::isValid('3aJ7CNpDMfXPZrCsn4Cgey', Uuid::FORMAT_BASE_32 | Uuid::FORMAT_BASE_58); // accept multiple formats\n```\n\n----------------------------------------\n\nTITLE: Following Symbolic Links with Symfony Finder in PHP\nDESCRIPTION: Demonstrates how to instruct the Finder to follow symbolic links during the search process by calling the `followLinks()` method. This allows the Finder to traverse into directories pointed to by links.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/finder.rst#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$finder->files()->followLinks();\n```\n\n----------------------------------------\n\nTITLE: Accessing Choice Data Variables in Symfony Twig Templates\nDESCRIPTION: This Twig snippet demonstrates how to retrieve information about individual choices within a Symfony `ChoiceType` form field. It shows accessing the selection state (`form.vars.data`), the choice value (`form.vars.value`), and the map of all `ChoiceView` objects (`form.parent.vars.choices`) from the parent form. This is useful for custom rendering logic in Twig templates.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/choice.rst#2025-04-22_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{# `true` or `false`, whether the current choice is selected as radio or checkbox #}\n{{ form.vars.data }}\n\n{# the current choice value (i.e a category name when `'choice_value' => 'name'` #}\n{{ form.vars.value }}\n\n{# a map of `ChoiceView` or `ChoiceGroupView` instances indexed by choice values or group names #}\n{{ form.parent.vars.choices }}\n```\n\n----------------------------------------\n\nTITLE: Adding File Attachments to Emails in Symfony Mailer\nDESCRIPTION: Demonstrates how to add file attachments to an email using the addPart() method with DataPart and File objects. It shows options for specifying custom file names and MIME types.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_31\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Mime\\Part\\DataPart;\nuse Symfony\\Component\\Mime\\Part\\File;\n// ...\n\n$email = (new Email())\n    // ...\n    ->addPart(new DataPart(new File('/path/to/documents/terms-of-use.pdf')))\n    // optionally you can tell email clients to display a custom name for the file\n    ->addPart(new DataPart(new File('/path/to/documents/privacy.pdf'), 'Privacy Policy'))\n    // optionally you can provide an explicit MIME type (otherwise it's guessed)\n    ->addPart(new DataPart(new File('/path/to/documents/contract.doc'), 'Contract', 'application/msword'))\n;\n```\n\n----------------------------------------\n\nTITLE: Generating a CSRF Token in a Twig Template for Manual Forms\nDESCRIPTION: Shows how to manually generate a CSRF token within an HTML form (not managed by Symfony Forms) using the `csrf_token()` Twig function. The function requires an arbitrary but unique identifier ('delete-item' in this example) to generate the token. The generated token is then included as the value of a hidden input field (named 'token' here) within the form.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/csrf.rst#2025-04-22_snippet_5\n\nLANGUAGE: html+twig\nCODE:\n```\n<form action=\"{{ url('admin_post_delete', { id: post.id }) }}\" method=\"post\">\n    {# the argument of csrf_token() is an arbitrary string used to generate the token #}\n    <input type=\"hidden\" name=\"token\" value=\"{{ csrf_token('delete-item') }}\">\n\n    <button type=\"submit\">Delete item</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Binding SMTP Transport to IPv4\nDESCRIPTION: Configuration example for binding the SMTP transport to IPv4 using the source_ip option, which was introduced in Symfony 7.3.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$dsn = 'smtp://smtp.example.com?source_ip=0.0.0.0';\n```\n\n----------------------------------------\n\nTITLE: Making an Ajax Request with xmlHttpRequest (Symfony BrowserKit, PHP)\nDESCRIPTION: Uses xmlHttpRequest to set the HTTP_X_REQUESTED_WITH header automatically, simulating an AJAX request. Requires Acme\\Client and symfony/browser-kit. The response is wrapped in a DomCrawler\\Crawler for subsequent manipulation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/browser_kit.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Acme\\Client;\\n\\n$client = new Client();\\n// the required HTTP_X_REQUESTED_WITH header is added automatically\\n$crawler = $client->xmlHttpRequest('GET', '/');\n```\n\n----------------------------------------\n\nTITLE: Defining an Event Listener Method in a PHP Class\nDESCRIPTION: Provides an example structure for a class (`AcmeListener`) containing a method (`onFooAction`) intended to act as an event listener. This method accepts an `Event` object (or a specific subclass thereof, depending on the event) passed by the dispatcher, allowing the listener to access event data or interact with related objects.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/event_dispatcher.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Contracts\\EventDispatcher\\Event;\\n\\nclass AcmeListener\\n{\\n    // ...\\n\\n    public function onFooAction(Event $event): void\\n    {\\n        // ... do something\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Tag-Task Relationships in Symfony Controller\nDESCRIPTION: This PHP code snippet demonstrates how to properly handle the removal of tags from a task in a Symfony controller. It uses Doctrine's ArrayCollection to track changes and updates the relationships accordingly, ensuring database consistency.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/form_collections.rst#2025-04-22_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/TaskController.php\n\n// ...\nuse App\\Entity\\Task;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\n\nclass TaskController extends AbstractController\n{\n    public function edit(Task $task, Request $request, EntityManagerInterface $entityManager): Response\n    {\n        $originalTags = new ArrayCollection();\n\n        // Create an ArrayCollection of the current Tag objects in the database\n        foreach ($task->getTags() as $tag) {\n            $originalTags->add($tag);\n        }\n\n        $editForm = $this->createForm(TaskType::class, $task);\n\n        $editForm->handleRequest($request);\n\n        if ($editForm->isSubmitted() && $editForm->isValid()) {\n            // remove the relationship between the tag and the Task\n            foreach ($originalTags as $tag) {\n                if (false === $task->getTags()->contains($tag)) {\n                    // remove the Task from the Tag\n                    $tag->getTasks()->removeElement($task);\n\n                    // if it was a many-to-one relationship, remove the relationship like this\n                    // $tag->setTask(null);\n\n                    $entityManager->persist($tag);\n\n                    // if you wanted to delete the Tag entirely, you can also do that\n                    // $entityManager->remove($tag);\n                }\n            }\n\n            $entityManager->persist($task);\n            $entityManager->flush();\n\n            // redirect back to some edit page\n            return $this->redirectToRoute('task_edit', ['id' => $id]);\n        }\n\n        // ... render some form template\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Processing JSON API Responses with Symfony HttpBrowser (PHP)\nDESCRIPTION: Example of handling JSON responses from API calls using HttpBrowser. The code demonstrates how to convert JSON responses directly to PHP arrays using the toArray() method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/browser_kit.rst#2025-04-22_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$browser = new HttpBrowser(HttpClient::create());\n\n$browser->request('GET', 'https://api.foo.com');\n$response = $browser->getResponse()->toArray();\n// $response is a PHP array of the decoded JSON contents\n```\n\n----------------------------------------\n\nTITLE: Shuffling Array Environment Variables in PHP\nDESCRIPTION: Example of using the shuffle processor to randomly order array elements in an environment variable using PHP configuration. This randomizes the order of Redis nodes for a RedisCluster.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/env_var_processors.rst#2025-04-22_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\nuse Symfony\\Component\\DependencyInjection\\Loader\\Configurator\\ContainerConfigurator;\n\nreturn static function (ContainerConfigurator $containerConfigurator): void {\n    $container = $containerConfigurator->services()\n        ->set(\\RedisCluster::class, \\RedisCluster::class)->args([null, '%env(shuffle:csv:REDIS_NODES)%']);\n};\n```\n\n----------------------------------------\n\nTITLE: Using Custom Compound Constraint in Entity Class with PHP Attributes\nDESCRIPTION: Demonstrates how to apply the custom PasswordRequirements constraint to a property in an entity class using PHP attributes.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Compound.rst#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n// src/Entity/User.php\nnamespace App\\Entity\\User;\n\nuse App\\Validator\\Constraints as Assert;\n\nclass User\n{\n    #[Assert\\PasswordRequirements]\n    public string $plainPassword;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Evaluation and Compilation with ExpressionLanguage in PHP\nDESCRIPTION: Initializes the `ExpressionLanguage` class and demonstrates its core functionality. The `evaluate()` method executes the expression '1 + 2' immediately, returning the result (3). The `compile()` method converts the expression into its PHP equivalent `(1 + 2)` for potential caching and later evaluation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/expression_language.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\ExpressionLanguage\\ExpressionLanguage;\n\n$expressionLanguage = new ExpressionLanguage();\n\nvar_dump($expressionLanguage->evaluate('1 + 2')); // displays 3\n\nvar_dump($expressionLanguage->compile('1 + 2')); // displays (1 + 2)\n```\n\n----------------------------------------\n\nTITLE: Implementing Resource-based Configuration Cache in Symfony PHP\nDESCRIPTION: Demonstrates how to use Symfony's ConfigCache class to cache generated configuration code based on loaded resources. The code shows handling cache freshness checks, loading YAML user files as resources, and writing cached code with associated meta files for debug mode.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/config/caching.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Config\\ConfigCache;\nuse Symfony\\Component\\Config\\Resource\\FileResource;\n\n$cachePath = __DIR__.'/cache/appUserMatcher.php';\n\n// the second argument indicates whether or not you want to use debug mode\n$userMatcherCache = new ConfigCache($cachePath, true);\n\nif (!$userMatcherCache->isFresh()) {\n    // fill this with an array of 'users.yaml' file paths\n    $yamlUserFiles = ...;\n\n    $resources = [];\n\n    foreach ($yamlUserFiles as $yamlUserFile) {\n        // see the article \"Loading resources\" to\n        // know where $delegatingLoader comes from\n        $delegatingLoader->load($yamlUserFile);\n        $resources[] = new FileResource($yamlUserFile);\n    }\n\n    // the code for the UserMatcher is generated elsewhere\n    $code = ...;\n\n    $userMatcherCache->write($code, $resources);\n}\n\n// you may want to require the cached code:\nrequire $cachePath;\n```\n\n----------------------------------------\n\nTITLE: Injecting RequestStack to Access Current Request in Symfony Service\nDESCRIPTION: This code snippet demonstrates how to inject the RequestStack service into a Symfony service class and use it to retrieve the current request. The class constructor accepts the RequestStack which is then used in the anyMethod() function to get the current request object through the getCurrentRequest() method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/request.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Newsletter/NewsletterManager.php\nnamespace App\\Newsletter;\n\nuse Symfony\\Component\\HttpFoundation\\RequestStack;\n\nclass NewsletterManager\n{\n    public function __construct(\n        protected RequestStack $requestStack,\n    ) {\n    }\n\n    public function anyMethod(): void\n    {\n        $request = $this->requestStack->getCurrentRequest();\n        // ... do something with the request\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Form with Custom Name in Symfony\nDESCRIPTION: This example shows how to create a form with a custom name using the createNamed() method from FormFactoryInterface. By default, form names are generated from the type class name.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/forms.rst#2025-04-22_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/TaskController.php\nnamespace App\\Controller;\n\nuse App\\Form\\TaskType;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\Form\\FormFactoryInterface;\n// ...\n\nclass TaskController extends AbstractController\n{\n    public function new(FormFactoryInterface $formFactory): Response\n    {\n        $task = ...;\n        $form = $formFactory->createNamed('my_name', TaskType::class, $task);\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Access Control Based on Remember Me Authentication\nDESCRIPTION: PHP code showing how to enforce different levels of authentication for user actions. Demonstrates how to require full authentication for sensitive operations versus allowing remember-me authenticated users for standard operations.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/remember_me.rst#2025-04-22_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/AccountController.php\n// ...\n\npublic function accountInfo(): Response\n{\n    // allow any authenticated user - we don't care if they just\n    // logged in, or are logged in via a remember me cookie\n    $this->denyAccessUnlessGranted('IS_AUTHENTICATED_REMEMBERED');\n\n    // ...\n}\n\npublic function resetPassword(): Response\n{\n    // require the user to log in during *this* session\n    // if they were only logged in via a remember me cookie, they\n    // will be redirected to the login page\n\n```\n\n----------------------------------------\n\nTITLE: Implementing ETag Cache Validation in Symfony Controller\nDESCRIPTION: Example of generating and using ETags for cache validation in a Symfony controller. The ETag is created by using md5 hash of the response content and compared with the If-None-Match header to determine if a 304 response should be returned.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/http_cache/validation.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Controller;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass DefaultController extends AbstractController\n{\n    public function homepage(Request $request): Response\n    {\n        $response = $this->render('static/homepage.html.twig');\n        $response->setEtag(md5($response->getContent()));\n        $response->setPublic(); // make sure the response is public/cacheable\n        $response->isNotModified($request);\n\n        return $response;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dumping PHP Objects as YAML Maps in PHP\nDESCRIPTION: Illustrates dumping a PHP object as a standard YAML map (key-value pairs) instead of a serialized string, using the `Yaml::DUMP_OBJECT_AS_MAP` flag. This relies on PHP's `(array)` casting.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/yaml.rst#2025-04-22_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$object = new \\stdClass();\n$object->foo = 'bar';\n\n$dumped = Yaml::dump(['data' => $object], 2, 4, Yaml::DUMP_OBJECT_AS_MAP);\n// $dumped = \"data:\\n    foo: bar\"\n```\n\n----------------------------------------\n\nTITLE: Defining Static Factory on the Service Class - PHP\nDESCRIPTION: Defines a static factory method 'create' directly on the NewsletterManager service class, which accepts configuration parameters (e.g., sender) and returns an instance of itself. This pattern allows the factory method to be attached to the service class, avoiding the need for a separate factory class. Requires PHP 7.4+ for typed properties and proper namespacing.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/factories.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// src/Email/NewsletterManager.php\nnamespace App\\Email;\n\n// ...\n\nclass NewsletterManager\n{\n    private string $sender;\n\n    public static function create(string $sender): self\n    {\n        $newsletterManager = new self();\n        $newsletterManager->sender = $sender;\n        // ...\n\n        return $newsletterManager;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Password Hashers with Migration in Standalone PHP\nDESCRIPTION: Standalone PHP configuration for creating a PasswordHasherFactory with migration support. This allows upgrading password hashes outside of a Symfony application context.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/passwords.rst#2025-04-22_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n// ...\n$passwordHasherFactory = new PasswordHasherFactory([\n    'legacy' => [\n        'algorithm' => 'sha256',\n        'encode_as_base64' => true,\n        'iterations' => 1,\n    ],\n\n    User::class => [\n        // the new hasher, along with its options\n        'algorithm' => 'sodium',\n        'migrate_from' => [\n            'bcrypt', // uses the \"bcrypt\" hasher with the default options\n            'legacy', // uses the \"legacy\" hasher configured above\n        ],\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Submitting a Request with Bearer Token - Terminal\nDESCRIPTION: This terminal command demonstrates how to authenticate to a Symfony API endpoint using a bearer token in the HTTP Authorization header. It utilizes curl to send a request with an API token configured through Symfony's access token authentication setup. You must replace 'an-accepted-token-value' and the endpoint URL (/api/some-route) according to your deployment.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/access_token.rst#2025-04-22_snippet_10\n\nLANGUAGE: terminal\nCODE:\n```\n$ curl -H 'Authorization: Bearer an-accepted-token-value' \\\n    https://localhost:8000/api/some-route\n```\n\n----------------------------------------\n\nTITLE: Submitting Forms with HttpBrowser and DomCrawler in PHP\nDESCRIPTION: Demonstrates how to use Symfony's HttpBrowser to make real requests to external sites and submit forms using the DomCrawler component.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/dom_crawler.rst#2025-04-22_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\BrowserKit\\HttpBrowser;\nuse Symfony\\Component\\HttpClient\\HttpClient;\n\n// makes a real request to an external site\n$browser = new HttpBrowser(HttpClient::create());\n$crawler = $browser->request('GET', 'https://github.com/login');\n\n// select the form and fill in some values\n$form = $crawler->selectButton('Sign in')->form();\n$form['login'] = 'symfonyfan';\n$form['password'] = 'anypass';\n\n// submits the given form\n$crawler = $browser->submit($form);\n```\n\n----------------------------------------\n\nTITLE: Handling Partial Form Submissions with PATCH in Symfony\nDESCRIPTION: This code snippet shows how to handle partial form submissions using the PATCH method. It demonstrates setting the $clearMissing parameter to false and manually adding required fields for validation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/direct_submit.rst#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n// 'email' and 'username' are added manually to force their validation\n$form->submit(array_merge(['email' => null, 'username' => null], $request->getPayload()->all()), false);\n```\n\n----------------------------------------\n\nTITLE: Using Expressions in Service Factory Definitions - Symfony PHP Configurator - php\nDESCRIPTION: Presents a PHP configuration for expression-based factories in Symfony, utilizing the expr() helper to set up conditional service instantiation and argument passing. The first service uses a debug parameter to decide which newsletter service to use; the second uses arg(0) to invoke a creation method, with a default fallback. Requires the interface, the factory class, and supporting services/parameters.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/factories.rst#2025-04-22_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nuse App\\Email\\NewsletterManagerFactory;\nuse App\\Email\\NewsletterManagerInterface;\n\nreturn function(ContainerConfigurator $containerConfigurator) {\n    $services = $containerConfigurator->services();\n\n    $services->set(NewsletterManagerInterface::class)\n        // use the \"tracable_newsletter\" service when debug is enabled, \"newsletter\" otherwise.\n        ->factory(expr(\"parameter('kernel.debug') ? service('tracable_newsletter') : service('newsletter')\"))\n    ;\n\n    // you can use the arg() function to retrieve an argument from the definition\n    $services->set(NewsletterManagerInterface::class)\n        ->factory(expr(\"arg(0).createNewsletterManager() ?: service('default_newsletter_manager')\"))\n        ->args([\n            service(NewsletterManagerFactory::class),\n        ])\n    ;\n};\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Locale in Symfony (PHP)\nDESCRIPTION: Sets the default locale to 'en' in the Symfony framework configuration using PHP.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/translation.rst#2025-04-22_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/translation.php\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework): void {\n    $framework->defaultLocale('en');\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Pass Priority in Symfony\nDESCRIPTION: Shows how to control the execution order of compiler passes within the same compilation phase by setting their priority, with higher values being executed earlier.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/dependency_injection/compilation.rst#2025-04-22_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n// ...\n// FirstPass is executed after SecondPass because its priority is lower\n$container->addCompilerPass(\n    new FirstPass(), PassConfig::TYPE_AFTER_REMOVING, 10\n);\n$container->addCompilerPass(\n    new SecondPass(), PassConfig::TYPE_AFTER_REMOVING, 30\n);\n```\n\n----------------------------------------\n\nTITLE: Building Symfony Serializer Context with Context Builders in PHP\nDESCRIPTION: This snippet uses a context builder object (DateTimeNormalizerContextBuilder) to fluently build a (de)serialization context, specifying a custom format for date-time normalization. The toArray() method converts the context builder to an array for use in the serializer. This approach enhances IDE autocompletion and reduces errors via type safety.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer.rst#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Serializer\\Context\\Normalizer\\DateTimeNormalizerContextBuilder;\n\n$contextBuilder = (new DateTimeNormalizerContextBuilder())\n    ->withFormat('Y-m-d H:i:s');\n$serializer->serialize($something, 'json', $contextBuilder->toArray());\n```\n\n----------------------------------------\n\nTITLE: Setting data-* attributes in Twig for JavaScript consumption\nDESCRIPTION: This snippet shows how to set data-* attributes in a Twig template, including user authentication status and serialized user data. It demonstrates using Twig's conditional operators and filters to prepare data for JavaScript use.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/server-data.rst#2025-04-22_snippet_0\n\nLANGUAGE: html+twig\nCODE:\n```\n<div class=\"js-user-rating\"\n    data-is-authenticated=\"{{ app.user ? 'true' : 'false' }}\"\n    data-user=\"{{ app.user|serialize(format = 'json') }}\"\n>\n    <!-- ... -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Optimizing Environment Variables in Production\nDESCRIPTION: Command to dump parsed environment variables into a PHP file for improved performance in production environments, eliminating the need to parse .env files on each request.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration.rst#2025-04-22_snippet_31\n\nLANGUAGE: terminal\nCODE:\n```\n# parses ALL .env files and dumps their final values to .env.local.php\n$ composer dump-env prod\n```\n\n----------------------------------------\n\nTITLE: Creating an Email with Low-Level Symfony Mime Message Class (PHP)\nDESCRIPTION: Shows how to use the `Symfony\\Component\\Mime\\Message` class for fine-grained control over email structure. It involves creating `Headers` manually and constructing the body using `TextPart` and `AlternativePart` objects to define different content types.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/mime.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Mime\\Header\\Headers;\nuse Symfony\\Component\\Mime\\Message;\nuse Symfony\\Component\\Mime\\Part\\Multipart\\AlternativePart;\nuse Symfony\\Component\\Mime\\Part\\TextPart;\n\n$headers = (new Headers())\n    ->addMailboxListHeader('From', ['fabien@symfony.com'])\n    ->addMailboxListHeader('To', ['foo@example.com'])\n    ->addTextHeader('Subject', 'Important Notification')\n;\n\n$textContent = new TextPart('Lorem ipsum...');\n$htmlContent = new TextPart('<h1>Lorem ipsum</h1> <p>...</p>', null, 'html');\n$body = new AlternativePart($textContent, $htmlContent);\n\n$email = new Message($headers, $body);\n```\n\n----------------------------------------\n\nTITLE: Adding a RepeatedType Field in Symfony PHP\nDESCRIPTION: Demonstrates how to add a `RepeatedType` field named 'password' to a Symfony form builder. It specifies `PasswordType` for the underlying fields, sets a custom validation error message for non-matching values, applies CSS class attributes via the `options` array, marks the field as required, and provides distinct labels for the first ('Password') and second ('Repeat Password') input fields using `first_options` and `second_options`.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/repeated.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\PasswordType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\RepeatedType;\n// ...\n\n$builder->add('password', RepeatedType::class, [\n    'type' => PasswordType::class,\n    'invalid_message' => 'The password fields must match.',\n    'options' => ['attr' => ['class' => 'password-field']],\n    'required' => true,\n    'first_options'  => ['label' => 'Password'],\n    'second_options' => ['label' => 'Repeat Password'],\n]);\n```\n\n----------------------------------------\n\nTITLE: Using Custom Service in Symfony Controller\nDESCRIPTION: Demonstrates how to use the custom GreetingGenerator service in a Symfony controller. The service is automatically injected through Symfony's autowiring.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/quick_tour/the_architecture.rst#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n// src/Controller/DefaultController.php\nnamespace App\\Controller;\n\nuse App\\GreetingGenerator;\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Attribute\\Route;\n\nclass DefaultController extends AbstractController\n{\n    #[Route('/hello/{name}', methods: ['GET'])]\n    public function index(string $name, LoggerInterface $logger, GreetingGenerator $generator): Response\n    {\n        $greeting = $generator->getRandomGreeting();\n\n        $logger->info(\"Saying $greeting to $name!\");\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Storing UUIDs in Doctrine Entities with Symfony\nDESCRIPTION: Shows how to use the UuidType in Doctrine entities and how to auto-generate UUID values for entity primary keys in Symfony applications.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/uid.rst#2025-04-22_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\n// src/Entity/Product.php\nnamespace App\\Entity;\n\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Symfony\\Bridge\\Doctrine\\Types\\UuidType;\nuse Symfony\\Component\\Uid\\Uuid;\n\n#[ORM\\Entity(repositoryClass: ProductRepository::class)]\nclass Product\n{\n    #[ORM\\Column(type: UuidType::NAME)]\n    private Uuid $someProperty;\n\n    // ...\n}\n```\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace App\\Entity;\n\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Symfony\\Bridge\\Doctrine\\Types\\UuidType;\nuse Symfony\\Component\\Uid\\Uuid;\n\nclass User implements UserInterface\n{\n    #[ORM\\Id]\n    #[ORM\\Column(type: UuidType::NAME, unique: true)]\n    #[ORM\\GeneratedValue(strategy: 'CUSTOM')]\n    #[ORM\\CustomIdGenerator(class: 'doctrine.uuid_generator')]\n    private ?Uuid $id;\n\n    public function getId(): ?Uuid\n    {\n        return $this->id;\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Options with setAllowedValues in Symfony OptionsResolver\nDESCRIPTION: This code demonstrates how to restrict an option to specific allowed values using the setAllowedValues method of OptionsResolver. The example restricts the 'transport' option to only accept 'sendmail', 'mail', or 'smtp'.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/options_resolver.rst#2025-04-22_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n// ...\nclass Mailer\n{\n    // ...\n\n    public function configureOptions(OptionsResolver $resolver): void\n    {\n        // ...\n        $resolver->setDefault('transport', 'sendmail');\n        $resolver->setAllowedValues('transport', ['sendmail', 'mail', 'smtp']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Bootstrap 5 Form Theme in XML\nDESCRIPTION: Demonstrates setting up the Bootstrap 5 form theme in the Twig configuration using XML.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/forms.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/twig.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:twig=\"http://symfony.com/schema/dic/twig\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/twig\n        https://symfony.com/schema/dic/twig/twig-1.0.xsd\">\n\n    <twig:config>\n        <twig:form-theme>bootstrap_5_layout.html.twig</twig:form-theme>\n        <!-- ... -->\n    </twig:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Property Validation Rules with Symfony Validator Metadata (PHP)\nDESCRIPTION: This snippet configures validation for the \\\"firstName\\\" property of the Author class using Symfony's Validator component. It requires the Symfony\\Component\\Validator\\Constraints and Symfony\\Component\\Validator\\Mapping\\ClassMetadata namespaces. The loadValidatorMetadata static method adds a NotBlank constraint and enforces a minimum length of 3. Inputs include an instance of ClassMetadata; outputs are constraints applied to the class. All validation rules are set at the property level.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/validator/metadata.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// ...\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Author\n{\n    private string $firstName;\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('firstName', new Assert\\NotBlank());\n        $metadata->addPropertyConstraint(\n            'firstName',\n            new Assert\\Length(min: 3)\n        );\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Looking for Cache Items with PSR-6 in Symfony PHP\nDESCRIPTION: Shows how to use PSR-6 methods to look for cache items in Symfony, including getItem(), getItems(), and hasItem() methods with a FilesystemAdapter.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/cache/cache_pools.rst#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Cache\\Adapter\\FilesystemAdapter;\n\n$cache = new FilesystemAdapter('app.cache');\n$latestNews = $cache->getItem('latest_news');\n\n// ...\n$stocks = $cache->getItems(['AAPL', 'FB', 'GOOGL', 'MSFT']);\n\n// ...\n$hasBadges = $cache->hasItem('user_'.$userId.'_badges');\n```\n\n----------------------------------------\n\nTITLE: Creating String Objects with ByteString, CodePointString, and UnicodeString (PHP)\nDESCRIPTION: This snippet illustrates how to create different string object types using the ByteString, CodePointString, and UnicodeString classes. Required dependency is 'symfony/string', and the correct namespaces must be imported. Each instantiation specifies how the string is internally represented (bytes, code points, or graphemes). The input is a PHP string and the output is a specific String object.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/string.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\String\\ByteString;\nuse Symfony\\Component\\String\\CodePointString;\nuse Symfony\\Component\\String\\UnicodeString;\n\n$foo = new ByteString('hello');\n$bar = new CodePointString('hello');\n// UnicodeString is the most commonly used class\n$baz = new UnicodeString('hello');\n```\n\n----------------------------------------\n\nTITLE: Generating a Version 7 UNIX Timestamp UUID in PHP\nDESCRIPTION: Shows how to create a UUIDv7 using `Uuid::v7()`. This version is based on a high-resolution Unix Epoch timestamp, offering better entropy and stricter chronological ordering than UUIDv1/v6. The result is an instance of `Symfony\\Component\\Uid\\UuidV7`.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/uid.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Uid\\Uuid;\n\n// $uuid is an instance of Symfony\\Component\\Uid\\UuidV7\n$uuid = Uuid::v7();\n```\n\n----------------------------------------\n\nTITLE: Getting Real-time Process Output via Callback with run() in PHP\nDESCRIPTION: Demonstrates passing a callback function as the first argument to the synchronous `run()` method. This callback receives output chunks (`$buffer`) and their type (`$type`, either `Process::ERR` or `Process::OUT`) in real-time as the process executes, allowing immediate feedback or processing. Be mindful of potential issues with PHP output buffering settings on the server. Depends on the Symfony Process component.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/process.rst#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Process\\Process;\n\n$process = new Process(['ls', '-lsa']);\n$process->run(function ($type, $buffer): void {\n    if (Process::ERR === $type) {\n        echo 'ERR > '.$buffer;\n    } else {\n        echo 'OUT > '.$buffer;\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Structure of the Configuration Array Passed to Load Method (PHP)\nDESCRIPTION: Illustrates the structure of the `$configs` array passed to the extension's `load` method. It's an array where each element corresponds to the configuration provided for the extension in a separate loaded file.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/dependency_injection/compilation.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n[\n    [\n        'foo' => 'fooValue',\n        'bar' => 'barValue',\n    ],\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Property-Level Serialization Context with PHP Attributes in Symfony\nDESCRIPTION: This PHP attribute example applies a context directly to an object property using #[Context], specifically altering the DateTime normalization format to 'Y-m-d'. It demonstrates per-property configuration using PHP attributes, which combine nicely with modern PHP and the Symfony Serialization component. The dependency is Symfony's Attribute and Normalizer classes.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer.rst#2025-04-22_snippet_15\n\nLANGUAGE: php-attributes\nCODE:\n```\n// src/Model/Person.php\n\n// ...\nuse Symfony\\Component\\Serializer\\Attribute\\Context;\nuse Symfony\\Component\\Serializer\\Normalizer\\DateTimeNormalizer;\n\nclass Person\n{\n    #[Context([DateTimeNormalizer::FORMAT_KEY => 'Y-m-d'])]\n    public \\DateTimeImmutable $createdAt;\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Email Functional Tests with Symfony\nDESCRIPTION: Example PHP test class demonstrating how to write functional tests for email sending using Symfony's built-in mailer assertions to verify email count and content.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_75\n\nLANGUAGE: php\nCODE:\n```\n// tests/Controller/MailControllerTest.php\nnamespace App\\Tests\\Controller;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Test\\WebTestCase;\n\nclass MailControllerTest extends WebTestCase\n{\n    public function testMailIsSentAndContentIsOk(): void\n    {\n        $client = static::createClient();\n        $client->request('GET', '/mail/send');\n        $this->assertResponseIsSuccessful();\n\n        $this->assertEmailCount(1); // use assertQueuedEmailCount() when using Messenger\n\n        $email = $this->getMailerMessage();\n\n        $this->assertEmailHtmlBodyContains($email, 'Welcome');\n        $this->assertEmailTextBodyContains($email, 'Welcome');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Pull Request Message Format\nDESCRIPTION: Example format for pull request messages showing modified components\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/contributing/code/pull_requests.rst#2025-04-22_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n[Yaml] fixed something\n[Form] [Validator] [FrameworkBundle] added something\n```\n\n----------------------------------------\n\nTITLE: Clearing Symfony Cache for Production\nDESCRIPTION: Command to clear and warm-up the Symfony cache in production environment with debugging disabled.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/deployment.rst#2025-04-22_snippet_4\n\nLANGUAGE: terminal\nCODE:\n```\n$ APP_ENV=prod APP_DEBUG=0 php bin/console cache:clear\n```\n\n----------------------------------------\n\nTITLE: Registering Static Factory Service - YAML Configuration\nDESCRIPTION: Demonstrates registering NewsletterManager as a service in Symfony using a static factory method via YAML configuration. The 'factory' key specifies the fully qualified class name and the method name as an array, and the service will be created using this static factory. This snippet assumes the NewsletterManagerStaticFactory class and method exist, and requires placement in 'config/services.yaml'.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/factories.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nservices:\n    # ...\n\n    App\\Email\\NewsletterManager:\n        # the first argument is the class and the second argument is the static method\n        factory: ['App\\\\Email\\\\NewsletterManagerStaticFactory', 'createNewsletterManager']\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Symfony Web Application Project with CLI (Terminal)\nDESCRIPTION: Uses the Symfony CLI to create a new project directory (`my_project_directory`) pre-configured for a traditional web application. It specifies the Symfony version (`7.3.x-dev`) and includes extra packages suitable for web development via the `--webapp` flag. Requires Symfony CLI.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup.rst#2025-04-22_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\n# run this if you are building a traditional web application\n$ symfony new my_project_directory --version=\"7.3.x-dev\" --webapp\n```\n\n----------------------------------------\n\nTITLE: Configuring Pull Request State Machine in PHP\nDESCRIPTION: This PHP configuration defines the pull request state machine using the Symfony Config component. It sets up the same workflow structure as the YAML and XML examples.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/workflow/workflow-and-state-machine.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/workflow.php\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework): void {\n    $pullRequest = $framework->workflows()->workflows('pull_request');\n\n    $pullRequest\n        ->type('state_machine')\n        ->supports(['App\\Entity\\PullRequest'])\n        ->initialMarking(['start']);\n\n    $pullRequest->markingStore()\n        ->type('method')\n        ->property('currentPlace');\n\n    $pullRequest->place()->name('start');\n    $pullRequest->place()->name('coding');\n    $pullRequest->place()->name('test');\n    $pullRequest->place()->name('review');\n    $pullRequest->place()->name('merged');\n    $pullRequest->place()->name('closed');\n\n    $pullRequest->transition()\n        ->name('submit')\n            ->from(['start'])\n            ->to(['test']);\n\n    $pullRequest->transition()\n        ->name('update')\n            ->from(['coding', 'test', 'review'])\n            ->to(['test']);\n\n    $pullRequest->transition()\n        ->name('wait_for_review')\n            ->from(['test'])\n            ->to(['review']);\n\n    $pullRequest->transition()\n        ->name('request_change')\n            ->from(['review'])\n            ->to(['coding']);\n\n    $pullRequest->transition()\n        ->name('accept')\n            ->from(['review'])\n            ->to(['merged']);\n\n    $pullRequest->transition()\n        ->name('reject')\n            ->from(['review'])\n            ->to(['closed']);\n\n    $pullRequest->transition()\n        ->name('reopen')\n            ->from(['closed'])\n            ->to(['review']);\n};\n```\n\n----------------------------------------\n\nTITLE: Minimal Symfony Web Front Controller using Runtime\nDESCRIPTION: This PHP snippet shows a simplified `public/index.php` file for a Symfony application using the Runtime component. It includes the generated `autoload_runtime.php` and returns a closure that instantiates the application Kernel, passing environment variables context. The Runtime component handles the request lifecycle.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/runtime.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// public/index.php\nuse App\\Kernel;\n\nrequire_once dirname(__DIR__).'/vendor/autoload_runtime.php';\n\nreturn function (array $context): Kernel {\n    return new Kernel($context['APP_ENV'], (bool) $context['APP_DEBUG']);\n};\n```\n\n----------------------------------------\n\nTITLE: Progress Bar with Iterable Data\nDESCRIPTION: Shows how to use the iterate method to automatically handle progress bar advancement when working with arrays or generators.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/helpers/progressbar.rst#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Console\\Helper\\ProgressBar;\n\n$progressBar = new ProgressBar($output);\n\n// $iterable can be array\n$iterable = [1, 2];\nforeach ($progressBar->iterate($iterable) as $value) {\n    // ... do some work\n}\n\n// or a generator\nfunction iterable() { yield 1; yield 2; ... };\nforeach ($progressBar->iterate(iterable()) as $value) {\n    // ... do some work\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript build configuration in package.json\nDESCRIPTION: Configuration for using TypeScript in a Symfony UX bundle. This setup defines build scripts and development dependencies needed to transpile TypeScript code into JavaScript for Stimulus controllers.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/create_ux_bundle.rst#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"scripts\": {\n        \"build\": \"babel src --extensions .ts -d dist\"\n    },\n    \"devDependencies\": {\n        \"@babel/cli\": \"^7.20.7\",\n        \"@babel/core\": \"^7.20.12\",\n        \"@babel/plugin-proposal-class-properties\": \"^7.18.6\",\n        \"@babel/preset-env\": \"^7.20.2\",\n        \"@babel/preset-typescript\": \"^7.18.6\",\n        \"@hotwired/stimulus\": \"^3.2.1\",\n        \"typescript\": \"^4.9.5\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Standalone String Hashing Example\nDESCRIPTION: Example of using PasswordHasherFactory to hash and verify strings independently of users.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/passwords.rst#2025-04-22_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\PasswordHasher\\Hasher\\PasswordHasherFactory;\n\n// configure different hashers via the factory\n$factory = new PasswordHasherFactory([\n    'common' => ['algorithm' => 'bcrypt'],\n    'sodium' => ['algorithm' => 'sodium'],\n]);\n\n// retrieve the hasher using bcrypt\n$hasher = $factory->getPasswordHasher('common');\n$hash = $hasher->hash('plain');\n\n// verify that a given string matches the hash calculated above\n$hasher->verify($hash, 'invalid'); // false\n$hasher->verify($hash, 'plain'); // true\n```\n\n----------------------------------------\n\nTITLE: Importing Service Configuration in YAML\nDESCRIPTION: Shows how to import external configuration files using the 'imports' directive in YAML. This example demonstrates importing a single file and a whole directory while maintaining default service configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/import.rst#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nimports:\n    - { resource: services/mailer.yaml }\n    # If you want to import a whole directory:\n    - { resource: services/ }\nservices:\n    _defaults:\n        autowire: true\n        autoconfigure: true\n\n    App\\:\n        resource: '../src/*'\n\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Initializing OptionsResolver for Default Values in PHP\nDESCRIPTION: This PHP code demonstrates the basic usage of `Symfony\\Component\\OptionsResolver\\OptionsResolver` in the `Mailer` class constructor. An `OptionsResolver` instance is created, default values are defined using `setDefaults`, and the input `$options` array is processed using `resolve` to validate and merge options.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/options_resolver.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\OptionsResolver\\OptionsResolver;\n\nclass Mailer\n{\n    // ...\n\n    public function __construct(array $options = [])\n    {\n        $resolver = new OptionsResolver();\n        $resolver->setDefaults([\n            'host'     => 'smtp.example.org',\n            'username' => 'user',\n            'password' => 'pa$$word',\n            'port'     => 25,\n        ]);\n\n        $this->options = $resolver->resolve($options);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Form Themes to Specific Forms in Twig\nDESCRIPTION: Example of applying a form theme to a specific form instance using the form_theme Twig tag. This allows for selective theming of forms without affecting the global configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/form_themes.rst#2025-04-22_snippet_17\n\nLANGUAGE: twig\nCODE:\n```\n{% form_theme form 'form/my_theme.html.twig' %}\n\n{{ form_start(form) }}\n    {# ... #}\n{{ form_end(form) }}\n```\n\n----------------------------------------\n\nTITLE: Enabling Tag Deletion in Form Type for Symfony Forms\nDESCRIPTION: PHP code showing how to enable deletion of collection items in a Symfony form. The allow_delete option enables the removal of items from the collection when they are not included in the submitted data.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/form_collections.rst#2025-04-22_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n// src/Form/TaskType.php\n\n// ...\npublic function buildForm(FormBuilderInterface $builder, array $options): void\n{\n    // ...\n\n    $builder->add('tags', CollectionType::class, [\n        // ...\n        'allow_delete' => true,\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Metadata from Annotations using PhpStanExtractor (Symfony PHP)\nDESCRIPTION: This snippet demonstrates using Symfony\\Component\\PropertyInfo\\Extractor\\PhpStanExtractor to extract type and description information from PHP annotations such as @var, @param, and @return. It includes a class example with a constructor parameter and usage of the PhpStanExtractor for type and documentation retrieval. Dependencies include the phpstan/phpdoc-parser and phpdocumentor/reflection-docblock packages, and the extractor is available starting with Symfony 7.3.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/property_info.rst#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n// src/Domain/Foo.php\\nclass Foo\\n{\\n    /**\\n     * @param string $bar\\n     */\\n    public function __construct(\\n        private string $bar,\\n    ) {\\n    }\\n}\\n\\n// Extraction.php\\nuse Symfony\\Component\\PropertyInfo\\Extractor\\PhpStanExtractor;\\nuse App\\Domain\\Foo;\\n\\n$phpStanExtractor = new PhpStanExtractor();\\n\\n// Type information.\\n$phpStanExtractor->getTypesFromConstructor(Foo::class, 'bar');\\n// Description information.\\n$phpStanExtractor->getShortDescription($class, 'bar');\\n$phpStanExtractor->getLongDescription($class, 'bar');\\n\n```\n\n----------------------------------------\n\nTITLE: Sanitizing HTML for Specific Contexts\nDESCRIPTION: Demonstrates how to sanitize HTML for specific contexts like <head>, <title>, or <body> using the sanitizeFor method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/html_sanitizer.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// tags not allowed in <head> will be removed\n$safeInput = $htmlSanitizer->sanitizeFor('head', $userInput);\n\n// encodes the returned HTML using HTML entities\n$safeInput = $htmlSanitizer->sanitizeFor('title', $userInput);\n$safeInput = $htmlSanitizer->sanitizeFor('textarea', $userInput);\n\n// uses the <body> context, removing tags only allowed in <head>\n$safeInput = $htmlSanitizer->sanitizeFor('body', $userInput);\n$safeInput = $htmlSanitizer->sanitizeFor('section', $userInput);\n```\n\n----------------------------------------\n\nTITLE: Defining a Symfony Console Command with Multiple Options\nDESCRIPTION: This code snippet demonstrates how to create a Symfony Console command with three different types of options: a flag option (foo), a required value option (bar), and an optional value option (cat). It shows the proper use of InputDefinition and InputOption classes to configure the command.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/console_arguments.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace Acme\\Console\\Command;\n\nuse Symfony\\Component\\Console\\Attribute\\AsCommand;\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\nuse Symfony\\Component\\Console\\Input\\InputDefinition;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Input\\InputOption;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n#[AsCommand(name: 'demo:args', description: 'Describe args behaviors')]\nclass DemoArgsCommand extends Command\n{\n    protected function configure(): void\n    {\n        $this\n            ->setDefinition(\n                new InputDefinition([\n                    new InputOption('foo', 'f'),\n                    new InputOption('bar', 'b', InputOption::VALUE_REQUIRED),\n                    new InputOption('cat', 'c', InputOption::VALUE_OPTIONAL),\n                ])\n            );\n    }\n\n    protected function execute(InputInterface $input, OutputInterface $output): int\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling MessageEvent in Symfony Mailer\nDESCRIPTION: Event listener implementation for handling MessageEvent to modify or reject messages before sending\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_68\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\nuse Symfony\\Component\\Mailer\\Event\\MessageEvent;\nuse Symfony\\Component\\Mime\\Email;\n\npublic function onMessage(MessageEvent $event): void\n{\n    $message = $event->getMessage();\n    if (!$message instanceof Email) {\n        return;\n    }\n    // do something with the message (logging, ...)\n\n    // and/or add some Messenger stamps\n    $event->addStamp(new SomeMessengerStamp());\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Entity Managers in YAML\nDESCRIPTION: YAML configuration for setting up two Doctrine entity managers with separate database connections and entity mappings.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine/multiple_entity_managers.rst#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndoctrine:\n    dbal:\n        connections:\n            default:\n                url: '%env(resolve:DATABASE_URL)%'\n            customer:\n                url: '%env(resolve:CUSTOMER_DATABASE_URL)%'\n        default_connection: default\n    orm:\n        default_entity_manager: default\n        entity_managers:\n            default:\n                connection: default\n                mappings:\n                    Main:\n                        is_bundle: false\n                        dir: '%kernel.project_dir%/src/Entity/Main'\n                        prefix: 'App\\Entity\\Main'\n                        alias: Main\n            customer:\n                connection: customer\n                mappings:\n                    Customer:\n                        is_bundle: false\n                        dir: '%kernel.project_dir%/src/Entity/Customer'\n                        prefix: 'App\\Entity\\Customer'\n                        alias: Customer\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading CSS with Dynamic Imports\nDESCRIPTION: Example of dynamically importing a CSS file to load it asynchronously, useful for optimizing page load performance.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/asset_mapper.rst#2025-04-22_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\n// assets/any-file.js\nimport('./lazy.css');\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: API Controller Example\nDESCRIPTION: Controller demonstrating how to return JSON responses for API endpoints.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/quick_tour/flex_recipes.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Controller;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\Routing\\Attribute\\Route;\n\nclass DefaultController extends AbstractController\n{\n    #[Route('/api/hello/{name}', methods: ['GET'])]\n    public function apiHello(string $name): JsonResponse\n    {\n        return $this->json([\n            'name' => $name,\n            'symfony' => 'rocks',\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Product Form Type with File Upload\nDESCRIPTION: Configures a form type for handling file uploads with validation constraints for PDF files. Includes file size and MIME type restrictions.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/controller/upload_file.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Form;\n\nuse App\\Entity\\Product;\nuse Symfony\\Component\\Form\\AbstractType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\FileType;\nuse Symfony\\Component\\Form\\FormBuilderInterface;\nuse Symfony\\Component\\OptionsResolver\\OptionsResolver;\nuse Symfony\\Component\\Validator\\Constraints\\File;\n\nclass ProductType extends AbstractType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options): void\n    {\n        $builder\n            ->add('brochure', FileType::class, [\n                'label' => 'Brochure (PDF file)',\n                'mapped' => false,\n                'required' => false,\n                'constraints' => [\n                    new File(\n                        maxSize: '1024k',\n                        mimeTypes: [\n                            'application/pdf',\n                            'application/x-pdf',\n                        ],\n                        mimeTypesMessage: 'Please upload a valid PDF document',\n                    )\n                ],\n            ]);\n    }\n\n    public function configureOptions(OptionsResolver $resolver): void\n    {\n        $resolver->setDefaults([\n            'data_class' => Product::class,\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Scraping External Website Content with Symfony HttpBrowser (PHP)\nDESCRIPTION: Example of using HttpBrowser to navigate and interact with external websites. The code shows making requests, clicking links, submitting forms, and extracting content from pages without needing a dedicated scraper.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/browser_kit.rst#2025-04-22_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$browser = new HttpBrowser(HttpClient::create());\n\n$browser->request('GET', 'https://github.com');\n$browser->clickLink('Sign in');\n$browser->submitForm('Sign in', ['login' => '...', 'password' => '...']);\n$openPullRequests = trim($browser->clickLink('Pull requests')->filter(\n    '.table-list-header-toggle a:nth-child(1)'\n)->text());\n```\n\n----------------------------------------\n\nTITLE: Implementing Validation Groups with PHP Attributes\nDESCRIPTION: Example of using PHP attributes to define validation constraints with groups in a User entity class. Shows how to apply different validation rules for registration versus general validation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/validation/groups.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/User.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass User implements UserInterface\n{\n    #[Assert\\Email(groups: ['registration'])]\n    private string $email;\n\n    #[Assert\\NotBlank(groups: ['registration'])]\n    #[Assert\\Length(min: 7, groups: ['registration'])]\n    private string $password;\n\n    #[Assert\\Length(min: 2)]\n    private string $city;\n}\n```\n\n----------------------------------------\n\nTITLE: Listing All Symfony Service Container Services via Console - Bash\nDESCRIPTION: This command lists all registered services (public and private) in the Symfony service container and their PHP classes. Requires a working Symfony application and execution from the project root. Outputs a table to the terminal enumerating all container services. Adding the \\\"--show-hidden\\\" option will also display hidden services (those prefixed with a dot).\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/debug.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ php bin/console debug:container\n\n# add this option to display \"hidden services\" too (those whose ID starts with a dot)\n$ php bin/console debug:container --show-hidden\n```\n\n----------------------------------------\n\nTITLE: Fetching Objects with Repository in Symfony\nDESCRIPTION: Alternative controller method using dependency injection to autowire the ProductRepository for retrieving a Product entity by ID.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine.rst#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/ProductController.php\nnamespace App\\Controller;\n\nuse App\\Entity\\Product;\nuse App\\Repository\\ProductRepository;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Attribute\\Route;\n// ...\n\nclass ProductController extends AbstractController\n{\n    #[Route('/product/{id}', name: 'product_show')]\n    public function show(ProductRepository $productRepository, int $id): Response\n    {\n        $product = $productRepository\n            ->find($id);\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Defined Options in Subclasses with OptionsResolver\nDESCRIPTION: This example shows how to check which options are defined in parent classes using isDefined and getDefinedOptions methods when extending functionality.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/options_resolver.rst#2025-04-22_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n// ...\nclass GoogleMailer extends Mailer\n{\n    // ...\n\n    public function configureOptions(OptionsResolver $resolver): void\n    {\n        parent::configureOptions($resolver);\n\n        if ($resolver->isDefined('host')) {\n            // One of the following was called:\n\n            // $resolver->setDefault('host', ...);\n            // $resolver->setRequired('host');\n            // $resolver->setDefined('host');\n        }\n\n        $definedOptions = $resolver->getDefinedOptions();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Remember Me with Symfony Security (PHP Configurator)\nDESCRIPTION: This PHP snippet uses the Symfony PHP config closure pattern to define 'rememberMe' settings for the main firewall. It specifies the secret, cookie lifetime, and the optional 'alwaysRememberMe' flag. Place in config/packages/security.php, ensuring proper use of the Symfony\\Config\\SecurityConfig namespace. Dependencies include Symfony's PHP-based configuration, ensuring symbolic parameter values (like '%kernel.secret%') resolve accurately. Key parameters control whether all users get persistent login cookies or only on opt-in.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/remember_me.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/security.php\nuse Symfony\\Config\\SecurityConfig;\n\nreturn static function (SecurityConfig $security): void {\n    // ...\n    $security->firewall('main')\n        // ...\n        ->rememberMe()\n            ->secret('%kernel.secret%')\n            ->lifetime(604800) // 1 week in seconds\n\n            // by default, the feature is enabled by checking a\n            // checkbox in the login form (see below), uncomment\n            // the following line to always enable it.\n            // ->alwaysRememberMe(true)\n    ;\n};\n```\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/security.php\nuse Symfony\\Config\\SecurityConfig;\n\nreturn static function (SecurityConfig $security): void {\n    // ...\n    $security->firewall('main')\n        // ...\n        ->rememberMe()\n            // ...\n            ->alwaysRememberMe(true)\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Password Hashers in PHP\nDESCRIPTION: This PHP configuration snippet, used in `config/packages/security.php`, defines password hashing strategies using the PHP configuration format. It achieves the same outcome as the YAML and XML examples: setting the 'auto' algorithm for `App\\Entity\\User` and 'auto' with a cost of 15 for `PasswordAuthenticatedUserInterface` implementations.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/passwords.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/security.php\nuse App\\Entity\\User;\nuse Symfony\\Component\\Security\\Core\\User\\PasswordAuthenticatedUserInterface;\nuse Symfony\\Config\\SecurityConfig;\n\nreturn static function (SecurityConfig $security): void {\n    // ...\n\n    // auto hasher with default options for the User class (and children)\n    $security->passwordHasher(User::class)\n        ->algorithm('auto');\n\n    // auto hasher with custom options for all PasswordAuthenticatedUserInterface instances\n    $security->passwordHasher(PasswordAuthenticatedUserInterface::class)\n        ->algorithm('auto')\n        ->cost(15);\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering a Tree from a Multi-Dimensional Array with TreeHelper (PHP)\nDESCRIPTION: Illustrates how to render a nested tree in the Symfony console by passing a multi-dimensional array directly to TreeHelper::createTree. This enables representation of hierarchical structures, such as directories and files, with nested arrays indicating child nodes. It relies on the symfony/console package and assumes a valid instance of SymfonyStyle. Input is a multi-dimensional associative array, output is a rendered tree in the console.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/helpers/tree.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$tree = TreeHelper::createTree($io, null, [\n    'src' =>  [\n        'Command',\n        'Controller' => [\n            'DefaultController.php',\n        ],\n        'Kernel.php',\n    ],\n    'templates' => [\n        'base.html.twig',\n    ],\n]);\n\n$tree->render();\n\n```\n\n----------------------------------------\n\nTITLE: Framework Class Implementation with Event Dispatcher\nDESCRIPTION: Core Framework class implementation that handles HTTP requests and dispatches response events. Includes dependency injection and exception handling.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/create_framework/event_dispatcher.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace Simplex;\n\nuse Symfony\\Component\\EventDispatcher\\EventDispatcher;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolverInterface;\nuse Symfony\\Component\\HttpKernel\\Controller\\ControllerResolverInterface;\nuse Symfony\\Component\\Routing\\Exception\\ResourceNotFoundException;\nuse Symfony\\Component\\Routing\\Matcher\\UrlMatcherInterface;\n\nclass Framework\n{\n    public function __construct(\n        private EventDispatcher $dispatcher,\n        private UrlMatcherInterface $matcher,\n        private ControllerResolverInterface $controllerResolver,\n        private ArgumentResolverInterface $argumentResolver,\n    ) {\n    }\n\n    public function handle(Request $request): Response\n    {\n        $this->matcher->getContext()->fromRequest($request);\n\n        try {\n            $request->attributes->add($this->matcher->match($request->getPathInfo()));\n\n            $controller = $this->controllerResolver->getController($request);\n            $arguments = $this->argumentResolver->getArguments($request, $controller);\n\n            $response = call_user_func_array($controller, $arguments);\n        } catch (ResourceNotFoundException $exception) {\n            $response = new Response('Not Found', 404);\n        } catch (\\Exception $exception) {\n            $response = new Response('An error occurred', 500);\n        }\n\n        // dispatch a response event\n        $this->dispatcher->dispatch(new ResponseEvent($response, $request), 'response');\n\n        return $response;\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple JavaScript Entries in Webpack\nDESCRIPTION: Shows how to configure webpack.config.js to include multiple entry points for different pages. Each entry will produce its own JavaScript and CSS files.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/simple-example.rst#2025-04-22_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n  // webpack.config.js\n  Encore\n      // ...\n      .addEntry('app', './assets/app.js')\n+     .addEntry('checkout', './assets/checkout.js')\n+     .addEntry('account', './assets/account.js')\n      // ...\n```\n\n----------------------------------------\n\nTITLE: Basic Cache Usage with FilesystemAdapter\nDESCRIPTION: Example showing how to instantiate and use the FilesystemAdapter for basic caching operations including setting and retrieving cached values using Cache Contracts\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/cache.rst#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Cache\\Adapter\\FilesystemAdapter;\n\n$cache = new FilesystemAdapter();\n\nuse Symfony\\Contracts\\Cache\\ItemInterface;\n\n// The callable will only be executed on a cache miss.\n$value = $cache->get('my_cache_key', function (ItemInterface $item): string {\n    $item->expiresAfter(3600);\n\n    // ... do some HTTP request or heavy computations\n    $computedValue = 'foobar';\n\n    return $computedValue;\n});\n\necho $value; // 'foobar'\n\n// ... and to remove the cache key\n$cache->delete('my_cache_key');\n```\n\n----------------------------------------\n\nTITLE: Changing File/Directory Permissions (PHP)\nDESCRIPTION: Uses the `Filesystem::chmod` method to change the mode (permissions) of a file or directory. The second argument is the mode (octal value), the third is the umask (usually 0000), and the fourth enables recursive application for directories.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/filesystem.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// sets the mode of the video to 0600\n$filesystem->chmod('video.ogg', 0600);\n// changes the mode of the src directory recursively\n$filesystem->chmod('src', 0700, 0000, true);\n```\n\n----------------------------------------\n\nTITLE: Creating Service Locators in Compiler Passes\nDESCRIPTION: Demonstrates how to create service locators in compiler passes using the ServiceLocatorTagPass::register method. This approach saves boilerplate and shares identical locators.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/service_subscribers_locators.rst#2025-04-22_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\DependencyInjection\\Compiler\\ServiceLocatorTagPass;\nuse Symfony\\Component\\DependencyInjection\\ContainerBuilder;\nuse Symfony\\Component\\DependencyInjection\\Reference;\n\npublic function process(ContainerBuilder $container): void\n{\n    // ...\n\n    $locateableServices = [\n        // ...\n        'logger' => new Reference('logger'),\n    ];\n\n    $myService = $container->findDefinition(MyService::class);\n\n    $myService->addArgument(ServiceLocatorTagPass::register($container, $locateableServices));\n}\n```\n\n----------------------------------------\n\nTITLE: Exposing Rate Limiter Status via HTTP Headers in Symfony\nDESCRIPTION: This code demonstrates how to expose rate limiting information to API clients through HTTP headers. It includes remaining tokens, retry time, and limit values in the response headers, providing transparency about the rate limiting status.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/rate_limiter.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/ApiController.php\nnamespace App\\Controller;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\RateLimiter\\RateLimiterFactoryInterface;\n\nclass ApiController extends AbstractController\n{\n    public function index(Request $request, RateLimiterFactoryInterface $anonymousApiLimiter): Response\n    {\n        $limiter = $anonymousApiLimiter->create($request->getClientIp());\n        $limit = $limiter->consume();\n        $headers = [\n            'X-RateLimit-Remaining' => $limit->getRemainingTokens(),\n            'X-RateLimit-Retry-After' => $limit->getRetryAfter()->getTimestamp() - time(),\n            'X-RateLimit-Limit' => $limit->getLimit(),\n        ];\n\n        if (false === $limit->isAccepted()) {\n            return new Response(null, Response::HTTP_TOO_MANY_REQUESTS, $headers);\n        }\n\n        // ...\n\n        $response = new Response('...');\n        $response->headers->add($headers);\n\n        return $response;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Entity User Provider without Property (YAML)\nDESCRIPTION: This YAML snippet configures a Symfony entity user provider that does not specify the 'property' key, thereby delegating user lookup to a custom repository method (such as loadUserByIdentifier). The entity class is specified (App\\Entity\\User) and Doctrine must be properly set up. Place this configuration in config/packages/security.yaml for use with custom user lookup logic.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/user_providers.rst#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\\nsecurity:\\n    providers:\\n        users:\\n            entity:\\n                class: App\\Entity\\User\\n\\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Stimulus Controller for Form Collections in Symfony\nDESCRIPTION: JavaScript Stimulus controller that handles the dynamic addition of form collection elements. It defines targets for the collection container and values for the index and prototype, with a method to add new elements.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/form_collections.rst#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// assets/controllers/form-collection_controller.js\n\nimport { Controller } from '@hotwired/stimulus';\n\nexport default class extends Controller {\n    static targets = [\"collectionContainer\"]\n\n    static values = {\n        index    : Number,\n        prototype: String,\n    }\n\n    addCollectionElement(event)\n    {\n        const item = document.createElement('li');\n        item.innerHTML = this.prototypeValue.replace(/__name__/g, this.indexValue);\n        this.collectionContainerTarget.appendChild(item);\n        this.indexValue++;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Service Global Variable in Twig Template\nDESCRIPTION: Demonstrates how to use a service defined as a global variable in a Twig template.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/templates.rst#2025-04-22_snippet_23\n\nLANGUAGE: twig\nCODE:\n```\nUUID: {{ uuid.generate }}\n```\n\n----------------------------------------\n\nTITLE: Event Subscriber Implementation in PHP\nDESCRIPTION: Implementation of an event subscriber class that handles multiple event methods with different priorities.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/event_dispatcher.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// src/EventSubscriber/ExceptionSubscriber.php\nnamespace App\\EventSubscriber;\n\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\nuse Symfony\\Component\\HttpKernel\\Event\\ExceptionEvent;\n\nclass ExceptionSubscriber implements EventSubscriberInterface\n{\n    public static function getSubscribedEvents(): array\n    {\n        return [\n            ExceptionEvent::class => [\n                ['processException', 10],\n                ['logException', 0],\n            ]\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Portable Shell Commands with Variable Substitution in PHP\nDESCRIPTION: Shows how to use the `fromShellCommandline()` factory with a component-specific syntax (`\"${:VARNAME}\"`) for environment variable substitution. This syntax ensures the variable `MESSAGE` is correctly escaped and works consistently across different operating systems (Windows, Linux, macOS). The variable must be provided when running the process. Depends on the Symfony Process component.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/process.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// works the same on Windows , Linux and macOS\n$process = Process::fromShellCommandline('echo \"${:MESSAGE}\"');\n```\n\n----------------------------------------\n\nTITLE: Implementing CustomCredentials with Passport in Symfony Security\nDESCRIPTION: Example demonstrating how to use CustomCredentials with a custom validation function for API token authentication.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/custom_authenticator.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\nuse Symfony\\Component\\Security\\Http\\Authenticator\\Passport\\Credentials\\CustomCredentials;\n\n// ...\nreturn new Passport(new UserBadge($email), new CustomCredentials(\n    // If this function returns anything else than `true`, the credentials\n    // are marked as invalid.\n    // The $credentials parameter is equal to the next argument of this class\n    function (string $credentials, UserInterface $user): bool {\n        return $user->getApiToken() === $credentials;\n    },\n\n    // The custom credentials\n    $apiToken\n));\n```\n\n----------------------------------------\n\nTITLE: Registering a Monolog Processor for a Specific Channel in PHP\nDESCRIPTION: PHP container configuration for `Monolog\\Processor\\IntrospectionProcessor`, adding the `monolog.processor` tag with the `channel` option specified as `security`. This targets the processor exclusively to modify log records within the 'security' Monolog channel.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/dic_tags.rst#2025-04-22_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nuse Monolog\\Processor\\IntrospectionProcessor;\n\n$container\n    ->register(IntrospectionProcessor::class)\n    ->addTag('monolog.processor', ['channel' => 'security'])\n;\n```\n\n----------------------------------------\n\nTITLE: Initializing CouchbaseBucketAdapter in PHP\nDESCRIPTION: Creates a new CouchbaseBucketAdapter instance with client configuration, bucket name, namespace, and default lifetime settings.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/cache/adapters/couchbasebucket_adapter.rst#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Cache\\Adapter\\CouchbaseBucketAdapter;\n\n$cache = new CouchbaseBucketAdapter(\n    // the client object that sets options and adds the server instance(s)\n    $client,\n\n    // the name of bucket\n    $bucket,\n\n    // a string prefixed to the keys of the items stored in this cache\n    $namespace,\n\n    // the default lifetime (in seconds) for cache items that do not define their\n    // own lifetime, with a value 0 causing items to be stored indefinitely\n    $defaultLifetime\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Cache Headers with Attributes\nDESCRIPTION: Implements HTTP cache control headers using PHP attributes to cache responses for 3600 seconds with public access and must-revalidate directive.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/http_cache.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/BlogController.php\nuse Symfony\\Component\\HttpKernel\\Attribute\\Cache;\n// ...\n\n#[Cache(public: true, maxage: 3600, mustRevalidate: true)]\npublic function index(): Response\n{\n    return $this->render('blog/index.html.twig', []);\n}\n```\n\n----------------------------------------\n\nTITLE: Using path() Function in Twig Templates\nDESCRIPTION: Example of using the path() Twig function to generate URLs based on route names and parameters.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/templates.rst#2025-04-22_snippet_10\n\nLANGUAGE: html+twig\nCODE:\n```\n<a href=\"{{ path('blog_index') }}\">Homepage</a>\n\n{# ... #}\n\n{% for post in blog_posts %}\n    <h1>\n        <a href=\"{{ path('blog_post', {slug: post.slug}) }}\">{{ post.title }}</a>\n    </h1>\n```\n\n----------------------------------------\n\nTITLE: Using Symfony Translator in Controller\nDESCRIPTION: Example of using the Symfony Translator service in a controller to translate a message.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/translation.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// ...\nuse Symfony\\Contracts\\Translation\\TranslatorInterface;\n\npublic function index(TranslatorInterface $translator): Response\n{\n    $translated = $translator->trans('Symfony is great');\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Enhanced Token Authentication with Request Attribute Storage\nDESCRIPTION: Modified onKernelController method that validates a token and stores it in the request attributes for later use in response processing. This enables tracking which requests have passed token authentication.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/event_dispatcher.rst#2025-04-22_snippet_17\n\nLANGUAGE: php\nCODE:\n```\npublic function onKernelController(ControllerEvent $event): void\n{\n    // ...\n\n    if ($controller instanceof TokenAuthenticatedController) {\n        $token = $event->getRequest()->query->get('token');\n        if (!in_array($token, $this->tokens)) {\n            throw new AccessDeniedHttpException('This action needs a valid token!');\n        }\n\n        // mark the request as having passed token authentication\n        $event->getRequest()->attributes->set('auth_token', $token);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Symfony Translation in PHP\nDESCRIPTION: PHP configuration for setting the default locale and translation file directory in Symfony.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/translation.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/translation.php\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework): void {\n    // ...\n    $framework\n        ->defaultLocale('en')\n        ->translator()\n            ->defaultPath('%kernel.project_dir%/translations')\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Passing Command Line Options to webpack-dev-server\nDESCRIPTION: Example of passing command line options to the webpack-dev-server, in this case setting a custom port number.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/dev-server.rst#2025-04-22_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\n$ npm run dev-server -- --port 9000\n```\n\n----------------------------------------\n\nTITLE: Basic Clock Component Usage in PHP\nDESCRIPTION: Demonstrates how to use the Clock component to get current time and modify clock implementations\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/clock.rst#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Clock\\Clock;\nuse Symfony\\Component\\Clock\\MockClock;\n\n// by default, Clock uses the NativeClock implementation, but you can change\n// this by setting any other implementation\nClock::set(new MockClock());\n\n// Then, you can get the clock instance\n$clock = Clock::get();\n\n// Additionally, you can set a timezone\n$clock->withTimeZone('Europe/Paris');\n\n// From here, you can get the current time\n$now = $clock->now();\n\n// And sleep for any number of seconds\n$clock->sleep(2.5);\n```\n\n----------------------------------------\n\nTITLE: Dumping a Simple PHP Array with VarDumper (PHP)\nDESCRIPTION: Demonstrates dumping a simple PHP associative array containing various scalar types (string, float, integer, boolean) and an empty array using the `dump()` function. The output (shown in the accompanying image) displays the array structure, keys, values, and types.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/var_dumper.rst#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$var = [\n    'a simple string' => \"in an array of 5 elements\",\n    'a float' => 1.0,\n    'an integer' => 1,\n    'a boolean' => true,\n    'an empty array' => [],\n];\ndump($var);\n```\n\n----------------------------------------\n\nTITLE: Implementing PSR-6 Cache Interface Example\nDESCRIPTION: Example class showing a constructor that requires a PSR-6 cache implementation via CacheItemPoolInterface.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/cache/psr6_psr16_adapters.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Cache\\CacheItemPoolInterface;\n\n// just a made-up class for the example\nclass GitHubApiClient\n{\n    // ...\n\n    // this requires a PSR-6 cache object\n    public function __construct(CacheItemPoolInterface $cachePool)\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring IsNull Constraint with PHP in Symfony\nDESCRIPTION: This snippet shows how to apply the IsNull constraint to a property using PHP configuration in a Symfony Entity class. It uses the loadValidatorMetadata method to ensure that the firstName property is exactly equal to null.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/IsNull.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Author.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Author\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('firstName', Assert\\IsNull());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Default Translation Domain Setting\nDESCRIPTION: Sets the default translation domain for the current template\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#2025-04-22_snippet_66\n\nLANGUAGE: twig\nCODE:\n```\n{% trans_default_domain domain %}\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Required Options with OptionsResolver in PHP\nDESCRIPTION: This PHP code shows how to use the `setRequired` method with an array of option names to designate multiple options ('host', 'username', 'password') as mandatory within the `configureOptions` method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/options_resolver.rst#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n// ...\nclass Mailer\n{\n    // ...\n\n    public function configureOptions(OptionsResolver $resolver): void\n    {\n        // ...\n        $resolver->setRequired(['host', 'username', 'password']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Form Action and Method as Form Options\nDESCRIPTION: This code shows how to set the form action URL and HTTP method when creating a form from a form type class. The action and method are passed as options to the createForm() method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/forms.rst#2025-04-22_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/TaskController.php\nnamespace App\\Controller;\n\nuse App\\Form\\TaskType;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\n// ...\n\nclass TaskController extends AbstractController\n{\n    public function new(): Response\n    {\n        // ...\n\n        $form = $this->createForm(TaskType::class, $task, [\n            'action' => $this->generateUrl('target_route'),\n            'method' => 'GET',\n        ]);\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Answers Using Symfony Validator Component in Console Questions - PHP\nDESCRIPTION: This snippet shows how to use the Symfony Validator component to create a validator callable for a Console Question, using a Regex constraint. It employs Validation::createCallable and Regex to enforce that the bundle name ends with 'Bundle'. Requires symfony/validator and symfony/console, and the Question instance to use setValidator. Inputs are strings; validation error messages are determined by the constraint.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/helpers/questionhelper.rst#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Validator\\Constraints\\Regex;\nuse Symfony\\Component\\Validator\\Validation;\n\n$question = new Question('Please enter the name of the bundle', 'AcmeDemoBundle');\n$validation = Validation::createCallable(new Regex(\n    pattern: '/^[a-zA-Z]+Bundle$/',\n    message: 'The name of the bundle should be suffixed with \\'Bundle\\'',\n));\n$question->setValidator($validation);\n\n```\n\n----------------------------------------\n\nTITLE: Generating Dynamic CSRF Tokens per Item in a Twig Template\nDESCRIPTION: Shows how to generate a unique CSRF token for each item in a list within an HTML form using the `csrf_token()` Twig function. The token identifier is made dynamic by concatenating a base string ('delete-item-') with the item's unique ID (`post.id`). This approach ensures that each delete action has its own distinct token, enhancing security when dealing with multiple similar actions on different resources.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/csrf.rst#2025-04-22_snippet_8\n\nLANGUAGE: html+twig\nCODE:\n```\n<form action=\"{{ url('admin_post_delete', { id: post.id }) }}\" method=\"post\">\n    {# the argument of csrf_token() is a dynamic id string used to generate the token #}\n    <input type=\"hidden\" name=\"token\" value=\"{{ csrf_token('delete-item-' ~ post.id) }}\">\n\n    <button type=\"submit\">Delete item</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Using Rate Limiters in a Symfony Controller\nDESCRIPTION: Example of implementing rate limiting in a Symfony controller. Shows how to inject a rate limiter factory and use it to rate limit API requests based on the client IP address.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/rate_limiter.rst#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/ContactController.php\nnamespace App\\Controller;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\RateLimiter\\RateLimiterFactory;\n\nclass ContactController extends AbstractController\n{\n    public function registerUser(Request $request, RateLimiterFactoryInterface $contactFormLimiter): Response\n    {\n        $limiter = $contactFormLimiter->create($request->getClientIp());\n\n        if (false === $limiter->consume(1)->isAccepted()) {\n            // either of the two limiters has been reached\n        }\n\n        // ...\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving Types with PHPDoc Parsing using TypeResolver\nDESCRIPTION: Shows how to use `TypeResolver` to parse PHPDoc annotations for more precise type information, especially for properties lacking native type hints or those with complex types like arrays of specific types (`string[]`). Requires installing the `phpstan/phpdoc-parser` package via Composer. The example resolves types for a native-typed property (`$id`) and a property (`$tags`) whose type is specified via a `@var` PHPDoc annotation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/type_info.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\TypeInfo\\TypeResolver\\TypeResolver;\n\nclass Dummy\n{\n    public function __construct(\n        public int $id,\n        /** @var string[] $tags */\n        public array $tags,\n    ) {\n    }\n}\n\n$typeResolver = TypeResolver::create();\n$typeResolver->resolve(new \\ReflectionProperty(Dummy::class, 'id')); // returns an \"int\" Type\n$typeResolver->resolve(new \\ReflectionProperty(Dummy::class, 'tags')); // returns a collection with \"int\" as key and \"string\" as values Type\n```\n\n----------------------------------------\n\nTITLE: Defining FileUploader Service in YAML\nDESCRIPTION: This YAML configuration defines a service for the FileUploader class, specifying the target directory as an argument.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/controller/upload_file.rst#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nservices:\n    # ...\n\n    App\\Service\\FileUploader:\n        arguments:\n            $targetDirectory: '%brochures_directory%'\n```\n\n----------------------------------------\n\nTITLE: Accessing data-* attributes using JavaScript's dataset property\nDESCRIPTION: This snippet shows an alternative way to access data-* attributes in JavaScript using the dataset property. It demonstrates how dash-style attribute names are converted to camelCase in the dataset object.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/server-data.rst#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\nconst isAuthenticated = userRating.dataset.isAuthenticated;\nconst user = JSON.parse(userRating.dataset.user);\n```\n\n----------------------------------------\n\nTITLE: Integrating Symfony Validator with OptionsResolver\nDESCRIPTION: This snippet shows how to use the Symfony Validator component with OptionsResolver to validate option values using validation constraints like Length.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/options_resolver.rst#2025-04-22_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\OptionsResolver\\OptionsResolver;\nuse Symfony\\Component\\Validator\\Constraints\\Length;\nuse Symfony\\Component\\Validator\\Validation;\n\n// ...\n$resolver->setAllowedValues('transport', Validation::createIsValidCallable(\n    new Length(min: 10)\n));\n```\n\n----------------------------------------\n\nTITLE: Custom DQL Query in Product Repository\nDESCRIPTION: Implements a custom query method using Doctrine Query Language (DQL) to find products above a certain price.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine.rst#2025-04-22_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @return Product[]\n */\npublic function findAllGreaterThanPrice(int $price): array\n{\n    $entityManager = $this->getEntityManager();\n\n    $query = $entityManager->createQuery(\n        'SELECT p\n        FROM App\\Entity\\Product p\n        WHERE p.price > :price\n        ORDER BY p.price ASC'\n    )->setParameter('price', 'price');\n\n    // returns an array of Product objects\n    return $query->getResult();\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Permissions in Symfony Controller using denyAccessUnlessGranted (PHP)\nDESCRIPTION: Shows the alternative way to check permissions within a Symfony controller action using the `$this->denyAccessUnlessGranted()` method. This method also invokes the Voter system to check 'view' and 'edit' permissions on a `Post` object, throwing an exception if access is denied. Constants (`PostVoter::VIEW`, `PostVoter::EDIT`) from the custom `PostVoter` class are used for the permission attributes.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/voters.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/PostController.php\n\n// ...\nuse App\\Security\\PostVoter;\n\nclass PostController extends AbstractController\n{\n    #[Route('/posts/{id}', name: 'post_show')]\n    public function show(Post $post): Response\n    {\n        // check for \"view\" access: calls all voters\n        $this->denyAccessUnlessGranted(PostVoter::VIEW, $post);\n\n        // ...\n    }\n\n    #[Route('/posts/{id}/edit', name: 'post_edit')]\n    public function edit(Post $post): Response\n    {\n        // check for \"edit\" access: calls all voters\n        $this->denyAccessUnlessGranted(PostVoter::EDIT, $post);\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Inline Commands in Symfony Console Application\nDESCRIPTION: Demonstrates how to create and register inline commands using the register() method and setCode() to define command behavior. It includes adding arguments and setting the command logic.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// ...\n$application->register('generate-admin')\n    ->addArgument('username', InputArgument::REQUIRED)\n    ->setCode(function (InputInterface $input, OutputInterface $output): int {\n        // ...\n\n        return Command::SUCCESS;\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring Firewall Path Restriction - Symfony XML\nDESCRIPTION: Configures a Symfony firewall in XML to protect only paths matching the \"/admin\" prefix using the \"pattern\" attribute. Place this within \"config/packages/security.xml\". Ensure proper namespaces for Symfony security and services schemas.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/firewall_restriction.rst#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/security.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<srv:container xmlns=\"http://symfony.com/schema/dic/security\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:srv=\"http://symfony.com/schema/dic/services\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/security\n        https://symfony.com/schema/dic/security/security-1.0.xsd\">\n\n    <config>\n        <!-- ... -->\n        <firewall name=\"secured_area\" pattern=\"^/admin\">\n            <!-- ... -->\n        </firewall>\n    </config>\n</srv:container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Cache Settings\nDESCRIPTION: Example of using setCache() method to configure multiple cache control options in a single call.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/create_framework/http_kernel_httpkernelinterface.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$response->setCache([\n    'must_revalidate'  => false,\n    'no_cache'         => false,\n    'no_store'         => false,\n    'no_transform'     => false,\n    'public'           => true,\n    'private'          => false,\n    'proxy_revalidate' => false,\n    'max_age'          => 600,\n    's_maxage'         => 600,\n    'immutable'        => true,\n    'last_modified'    => new \\DateTime(),\n    'etag'             => 'abcdef'\n]);\n```\n\n----------------------------------------\n\nTITLE: Debugging Event Listeners in Symfony Console\nDESCRIPTION: Terminal commands for debugging event listeners in a Symfony application. These commands allow listing all events and their listeners or filtering by specific event names.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/event_dispatcher.rst#2025-04-22_snippet_10\n\nLANGUAGE: terminal\nCODE:\n```\n$ php bin/console debug:event-dispatcher\n```\n\nLANGUAGE: terminal\nCODE:\n```\n$ php bin/console debug:event-dispatcher kernel.exception\n```\n\nLANGUAGE: terminal\nCODE:\n```\n$ php bin/console debug:event-dispatcher kernel // matches \"kernel.exception\", \"kernel.response\" etc.\n$ php bin/console debug:event-dispatcher Security // matches \"Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent\"\n```\n\nLANGUAGE: terminal\nCODE:\n```\n$ php bin/console debug:event-dispatcher --dispatcher=security.event_dispatcher.main\n```\n\n----------------------------------------\n\nTITLE: Fetching All LDAP Query Results Eagerly in PHP\nDESCRIPTION: Executes an LDAP query and immediately fetches all matching entries into an array using the `toArray()` method on the result collection. This is useful when you need the complete result set upfront.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/ldap.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Ldap\\Ldap;\n// ...\n\n$query = $ldap->query('dc=symfony,dc=com', '(&(objectclass=person)(ou=Maintainers))');\n$results = $query->execute()->toArray();\n\n// Do something with the results array\n```\n\n----------------------------------------\n\nTITLE: Initializing Framework Class with Hardcoded Dependencies in PHP\nDESCRIPTION: This snippet shows an initial implementation of the Framework class with hardcoded dependencies. It demonstrates how the class constructor sets up various services like routing, event dispatching, and error handling.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/create_framework/dependency_injection.rst#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n// example.com/src/Simplex/Framework.php\nnamespace Simplex;\n\nuse Symfony\\Component\\EventDispatcher\\EventDispatcher;\nuse Symfony\\Component\\HttpFoundation;\nuse Symfony\\Component\\HttpFoundation\\RequestStack;\nuse Symfony\\Component\\HttpKernel;\nuse Symfony\\Component\\Routing;\n\nclass Framework extends HttpKernel\\HttpKernel\n{\n    public function __construct($routes)\n    {\n        $context = new Routing\\RequestContext();\n        $matcher = new Routing\\Matcher\\UrlMatcher($routes, $context);\n        $requestStack = new RequestStack();\n\n        $controllerResolver = new HttpKernel\\Controller\\ControllerResolver();\n        $argumentResolver = new HttpKernel\\Controller\\ArgumentResolver();\n\n        $dispatcher = new EventDispatcher();\n        $dispatcher->addSubscriber(new HttpKernel\\EventListener\\ErrorListener(\n            'Calendar\\Controller\\ErrorController::exception'\n        ));\n        $dispatcher->addSubscriber(new HttpKernel\\EventListener\\RouterListener($matcher, $requestStack));\n        $dispatcher->addSubscriber(new HttpKernel\\EventListener\\ResponseListener('UTF-8'));\n        $dispatcher->addSubscriber(new StringResponseListener());\n\n        parent::__construct($dispatcher, $controllerResolver, $requestStack, $argumentResolver);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Redirecting in Symfony PHP Controller\nDESCRIPTION: This code shows various ways to perform redirects in a Symfony controller, including redirecting to routes, external URLs, and maintaining query parameters.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/controller.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\HttpFoundation\\RedirectResponse;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\n// ...\npublic function index(): RedirectResponse\n{\n    // redirects to the \"homepage\" route\n    return $this->redirectToRoute('homepage');\n\n    // redirectToRoute is a shortcut for:\n    // return new RedirectResponse($this->generateUrl('homepage'));\n\n    // does a permanent HTTP 301 redirect\n    return $this->redirectToRoute('homepage', [], 301);\n    // if you prefer, you can use PHP constants instead of hardcoded numbers\n    return $this->redirectToRoute('homepage', [], Response::HTTP_MOVED_PERMANENTLY);\n\n    // redirect to a route with parameters\n    return $this->redirectToRoute('app_lucky_number', ['max' => 10]);\n\n    // redirects to a route and maintains the original query string parameters\n    return $this->redirectToRoute('blog_show', $request->query->all());\n\n    // redirects to the current route (e.g. for Post/Redirect/Get pattern):\n    return $this->redirectToRoute($request->attributes->get('_route'));\n\n    // redirects externally\n    return $this->redirect('http://symfony.com/doc');\n}\n```\n\n----------------------------------------\n\nTITLE: Applying trans Filter for Translation in Twig\nDESCRIPTION: Uses the `trans` filter to translate the given `message` (string key or `Translatable` object) using Symfony's Translation component. Optional arguments include `arguments` (array for placeholders), `domain` (string, translation file group), and `locale` (string, target language).\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#2025-04-22_snippet_38\n\nLANGUAGE: twig\nCODE:\n```\n{{ message|trans(arguments = [], domain = null, locale = null) }}\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Object Properties with PropertyAccessor in PHP\nDESCRIPTION: Demonstrates basic usage of PropertyAccessor to set and get properties on a Person class using direct property access, setter/getter methods, and magic __set method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/property_access.rst#2025-04-22_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nclass Person\n{\n    private string $lastName;\n    private array $children = [];\n\n    public function setLastName($name): void\n    {\n        $this->lastName = $name;\n    }\n\n    public function getLastName(): string\n    {\n        return $this->lastName;\n    }\n\n    public function getChildren(): array\n    {\n        return $this->children;\n    }\n\n    public function __set($property, $value): void\n    {\n        $this->$property = $value;\n    }\n}\n\n$person = new Person();\n\n$propertyAccessor->setValue($person, 'firstName', 'Wouter');\n$propertyAccessor->setValue($person, 'lastName', 'de Jong'); // setLastName is called\n$propertyAccessor->setValue($person, 'children', [new Person()]); // __set is called\n\nvar_dump($person->firstName); // 'Wouter'\nvar_dump($person->getLastName()); // 'de Jong'\nvar_dump($person->getChildren()); // [Person()];\n```\n\n----------------------------------------\n\nTITLE: Configuring Property Constraints with YAML in Symfony\nDESCRIPTION: Demonstrates how to configure validation constraints for a property using YAML format in Symfony. It applies NotBlank and Length constraints to a firstName property.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/validation.rst#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Author:\n    properties:\n        firstName:\n            - NotBlank: ~\n            - Length:\n                min: 3\n```\n\n----------------------------------------\n\nTITLE: Using LockableTrait to Prevent Concurrent Command Execution in PHP\nDESCRIPTION: This snippet demonstrates how to use the `LockableTrait` within a Symfony Console command to prevent multiple instances from running concurrently. It utilizes the `lock()` method to attempt acquiring a lock and `release()` to explicitly release it, although release is automatic upon command completion. The example shows checking the lock status and exiting if the command is already running.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/console/lockable_trait.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// ...\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Command\\LockableTrait;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\nclass UpdateContentsCommand extends Command\n{\n    use LockableTrait;\n\n    // ...\n\n    protected function execute(InputInterface $input, OutputInterface $output): int\n    {\n        if (!$this->lock()) {\n            $output->writeln('The command is already running in another process.');\n\n            return Command::SUCCESS;\n        }\n\n        // If you prefer to wait until the lock is released, use this:\n        // $this->lock(null, true);\n\n        // ...\n\n        // if not released explicitly, Symfony releases the lock\n        // automatically when the execution of the command ends\n        $this->release();\n\n        return Command::SUCCESS;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Unreadable Directories with Symfony Finder in PHP\nDESCRIPTION: Illustrates how to prevent the Finder from throwing errors when encountering directories it doesn't have permission to read. The `ignoreUnreadableDirs()` method tells the Finder to silently skip such directories.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/finder.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$finder->ignoreUnreadableDirs()->in(__DIR__);\n```\n\n----------------------------------------\n\nTITLE: Defining the Abstract Symfony Voter Class Structure (PHP)\nDESCRIPTION: Shows the structure of the abstract `Symfony\\Component\\Security\\Core\\Authorization\\Voter\\Voter` class, which custom voters typically extend. It defines the required abstract `supports()` and `voteOnAttribute()` methods that concrete voters must implement to determine applicability and make the access decision, respectively.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/voters.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Security\\Core\\Authentication\\Token\\TokenInterface;\nuse Symfony\\Component\\Security\\Core\\Authorization\\Voter\\VoterInterface;\n\nabstract class Voter implements VoterInterface\n{\n    abstract protected function supports(string $attribute, mixed $subject): bool;\n    abstract protected function voteOnAttribute(string $attribute, mixed $subject, TokenInterface $token): bool;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Command Bus with Eager Loading in PHP\nDESCRIPTION: Example of a CommandBus class that loads all command handlers at instantiation time, demonstrating the problem that Service Subscribers aim to solve.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/service_subscribers_locators.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/CommandBus.php\nnamespace App;\n\n// ...\nclass CommandBus\n{\n    /**\n     * @param CommandHandler[] $handlerMap\n     */\n    public function __construct(\n        private array $handlerMap,\n    ) {\n    }\n\n    public function handle(Command $command): mixed\n    {\n        $commandClass = get_class($command);\n\n        if (!$handler = $this->handlerMap[$commandClass] ?? null) {\n            return;\n        }\n\n        return $handler->handle($command);\n    }\n}\n\n// ...\n$commandBus->handle(new FooCommand());\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Constructor Arguments in PHP\nDESCRIPTION: Shows how to pass constructor arguments when creating a `Definition`. It demonstrates using `Symfony\\Component\\DependencyInjection\\Reference` to inject other services and using parameter placeholders (`%parameter_name%`). Methods for getting all arguments (`getArguments`), a specific argument by index (`getArgument`), adding named arguments (`setArgument`), adding arguments sequentially (`addArgument`), replacing an argument by index (`replaceArgument`), and replacing all arguments (`setArguments`) are also shown. It's crucial to use `Reference` instead of `$container->get()` for service dependencies.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/definitions.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Config\\DoctrineConfigManager;\nuse Symfony\\Component\\DependencyInjection\\Definition;\nuse Symfony\\Component\\DependencyInjection\\Reference;\n\n$definition = new Definition(DoctrineConfigManager::class, [\n    new Reference('doctrine'), // a reference to another service\n    '%app.config_table_name%',  // will be resolved to the value of a container parameter\n]);\n\n// gets all arguments configured for this definition\n$constructorArguments = $definition->getArguments();\n\n// gets a specific argument\n$firstArgument = $definition->getArgument(0);\n\n// adds a new named argument\n// '$argumentName' = the name of the argument in the constructor, including the '$' symbol\n$definition = $definition->setArgument('$argumentName', $argumentValue);\n\n// adds a new argument\n$definition->addArgument($argumentValue);\n\n// replaces argument on a specific index (0 = first argument)\n$definition->replaceArgument($index, $argument);\n\n// replaces all previously configured arguments with the passed array\n$definition->setArguments($arguments);\n```\n\n----------------------------------------\n\nTITLE: Checking TTY Support in Process Component\nDESCRIPTION: Shows how to check for TTY support on the current operating system and set it for a Process instance.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/process.rst#2025-04-22_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Process\\Process;\n\n$process = (new Process())->setTty(Process::isTtySupported());\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Password Hasher in PHP for Symfony\nDESCRIPTION: This snippet shows the implementation of a custom password hasher class in PHP for Symfony. It includes methods for hashing, verifying, and checking if a password needs rehashing, with a focus on security measures like password length validation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/passwords.rst#2025-04-22_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n// src/Security/Hasher/CustomVerySecureHasher.php\nnamespace App\\Security\\Hasher;\n\nuse Symfony\\Component\\PasswordHasher\\Exception\\InvalidPasswordException;\nuse Symfony\\Component\\PasswordHasher\\Hasher\\CheckPasswordLengthTrait;\nuse Symfony\\Component\\PasswordHasher\\PasswordHasherInterface;\n\nclass CustomVerySecureHasher implements PasswordHasherInterface\n{\n    use CheckPasswordLengthTrait;\n\n    public function hash(string $plainPassword): string\n    {\n        if ($this->isPasswordTooLong($plainPassword)) {\n            throw new InvalidPasswordException();\n        }\n\n        // ... hash the plain password in a secure way\n\n        return $hashedPassword;\n    }\n\n    public function verify(string $hashedPassword, string $plainPassword): bool\n    {\n        if ('' === $plainPassword || $this->isPasswordTooLong($plainPassword)) {\n            return false;\n        }\n\n        // ... validate if the password equals the user's password in a secure way\n\n        return $passwordIsValid;\n    }\n\n    public function needsRehash(string $hashedPassword): bool\n    {\n        // Check if a password hash would benefit from rehashing\n        return $needsRehash;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Controller Functions in PHP\nDESCRIPTION: This snippet defines two controller functions, list_action() and show_action(), which handle the blog post list and individual post display respectively. These functions are called by the front controller.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/introduction/from_flat_php_to_symfony.rst#2025-04-22_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n// controllers.php\nfunction list_action()\n{\n    $posts = get_all_posts();\n    require 'templates/list.php';\n}\n\nfunction show_action($id)\n{\n    $post = get_post_by_id($id);\n    require 'templates/show.php';\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Service Providing Configuration Data (EmailFormatterManager) in PHP\nDESCRIPTION: This PHP snippet defines the `EmailFormatterManager` class. Its purpose is to determine and provide the list of currently enabled email formatters via the `getEnabledFormatters` method. This service encapsulates the logic for loading and managing the formatter settings.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/configurators.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// src/Mail/EmailFormatterManager.php\nnamespace App\\Mail;\n\nclass EmailFormatterManager\n{\n    // ...\n\n    public function getEnabledFormatters(): array\n    {\n        // code to configure which formatters to use\n        $enabledFormatters = [...];\n\n        // ...\n\n        return $enabledFormatters;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Choice Labels in EntityType for Symfony Forms\nDESCRIPTION: Shows different ways to customize the choice labels in an EntityType field, including using a property path or a callback function.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/entity.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Entity\\Category;\nuse Symfony\\Bridge\\Doctrine\\Form\\Type\\EntityType;\n// ...\n\n$builder->add('category', EntityType::class, [\n    'class' => Category::class,\n    'choice_label' => 'displayName',\n]);\n\n// Using a callback function\n$builder->add('category', EntityType::class, [\n    'class' => Category::class,\n    'choice_label' => function (Category $category): string {\n        return $category->getDisplayName();\n    }\n]);\n```\n\n----------------------------------------\n\nTITLE: Managing Named Asset Packages with Symfony Packages (PHP)\nDESCRIPTION: This example demonstrates using the `Symfony\\Component\\Asset\\Packages` class to manage multiple, named asset packages with different configurations (base paths/URLs, potentially different versioning strategies). It defines a default package (`Package`) and named packages ('img' using `UrlPackage`, 'doc' using `PathPackage`). The `getUrl()` method of the `Packages` class requires an optional second argument specifying the package name.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/asset.rst#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Asset\\Package;\nuse Symfony\\Component\\Asset\\Packages;\nuse Symfony\\Component\\Asset\\PathPackage;\nuse Symfony\\Component\\Asset\\UrlPackage;\n// ...\n\n$versionStrategy = new StaticVersionStrategy('v1');\n\n$defaultPackage = new Package($versionStrategy);\n\n$namedPackages = [\n    'img' => new UrlPackage('https://img.example.com/', $versionStrategy),\n    'doc' => new PathPackage('/somewhere/deep/for/documents', $versionStrategy),\n];\n\n$packages = new Packages($defaultPackage, $namedPackages);\n\necho $packages->getUrl('/main.css');\n// result: /main.css?v1\n\necho $packages->getUrl('/logo.png', 'img');\n// result: https://img.example.com/logo.png?v1\n\necho $packages->getUrl('resume.pdf', 'doc');\n// result: /somewhere/deep/for/documents/resume.pdf?v1\n```\n\n----------------------------------------\n\nTITLE: Adding Links in Symfony Controllers\nDESCRIPTION: PHP code demonstrating how to add links to the HTTP response directly from Symfony controllers using the WebLink component.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/web_link.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/BlogController.php\nnamespace App\\Controller;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\WebLink\\GenericLinkProvider;\nuse Symfony\\Component\\WebLink\\Link;\n\nclass BlogController extends AbstractController\n{\n    public function index(Request $request): Response\n    {\n        // using the addLink() shortcut provided by AbstractController\n        $this->addLink($request, (new Link('preload', '/app.css'))->withAttribute('as', 'style'));\n\n        // alternative if you don't want to use the addLink() shortcut\n        $linkProvider = $request->attributes->get('_links', new GenericLinkProvider());\n        $request->attributes->set('_links', $linkProvider->withLink(\n            (new Link('preload', '/app.css'))->withAttribute('as', 'style')\n        ));\n\n        return $this->render('...');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Acquiring a Blocking Shared (Read) Lock in PHP\nDESCRIPTION: Shows how to acquire a shared (read) lock in blocking mode. A lock is created for the resource 'user-'.$user->id. Passing `true` as the argument to `acquireRead()` causes the script execution to pause (block) until the read lock can be acquired. This is useful when read access is required before proceeding.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/lock.rst#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$lock = $factory->createLock('user-'.$user->id);\n$lock->acquireRead(true);\n```\n\n----------------------------------------\n\nTITLE: Creating a Recurring Message with Cron Expression in PHP\nDESCRIPTION: Demonstrates how to create a recurring message using the cron trigger syntax in Symfony.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/scheduler.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nRecurringMessage::cron('#midnight', new Message());\n```\n\n----------------------------------------\n\nTITLE: Defining EqualTo Constraints with PHP Attributes\nDESCRIPTION: Example of using PHP attributes to define EqualTo constraints on a Person class. It demonstrates setting constraints for firstName and age properties.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/EqualTo.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Person.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Person\n{\n    #[Assert\\EqualTo('Mary')]\n    protected string $firstName;\n\n    #[Assert\\EqualTo(\n        value: 20,\n    )]\n    protected int $age;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Redirect Response\nDESCRIPTION: Demonstrates creating a redirect response to another URL.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#2025-04-22_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\HttpFoundation\\RedirectResponse;\n\n$response = new RedirectResponse('http://example.com/');\n```\n\n----------------------------------------\n\nTITLE: Installing Local Certificate Authority for TLS\nDESCRIPTION: Command to create and install a local certificate authority for enabling HTTPS on local development sites.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/symfony_server.rst#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ symfony server:ca:install\n```\n\n----------------------------------------\n\nTITLE: Initializing Redis Cache Adapter in PHP\nDESCRIPTION: Creates a new RedisAdapter instance with a Redis connection, namespace, default lifetime, and optional marshaller. This is the basic setup for using Redis as a cache backend.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/cache/adapters/redis_adapter.rst#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Cache\\Adapter\\RedisAdapter;\n\n$cache = new RedisAdapter(\n\n    // the object that stores a valid connection to your Redis system\n    \\Redis $redisConnection,\n\n    // the string prefixed to the keys of the items stored in this cache\n    $namespace = '',\n\n    // the default lifetime (in seconds) for cache items that do not define their\n    // own lifetime, with a value 0 causing items to be stored indefinitely (i.e.\n    // until RedisAdapter::clear() is invoked or the server(s) are purged)\n    $defaultLifetime = 0,\n\n    // $marshaller (optional) An instance of MarshallerInterface to control the serialization\n    // and deserialization of cache items. By default, native PHP serialization is used.\n    // This can be useful for compressing data, applying custom serialization logic, or\n    // optimizing the size and performance of cached items\n    ?MarshallerInterface $marshaller = null\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing ISBN Validation with PHP Attributes\nDESCRIPTION: Example of applying ISBN validation using PHP attributes in a Book entity class. Shows how to validate an ISBN-10 with a custom error message.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Isbn.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Book.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Book\n{\n    #[Assert\\Isbn(\n        type: Assert\\Isbn::ISBN_10,\n        message: 'This value is not valid.',\n    )]\n    protected string $isbn;\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Form Validation in Symfony DomCrawler in PHP\nDESCRIPTION: Shows how to disable validation for specific form fields or the entire form when selecting invalid choice values in Symfony's DomCrawler.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/dom_crawler.rst#2025-04-22_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n// disables validation for a specific field\n$form['country']->disableValidation()->select('Invalid value');\n\n// disables validation for the whole form\n$form->disableValidation();\n$form['country']->select('Invalid value');\n```\n\n----------------------------------------\n\nTITLE: Injecting Multiple Serializer Instances Using Named Aliases in PHP\nDESCRIPTION: Demonstrates how to inject different serializer instances in a controller using named aliases and the Target attribute in Symfony.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer.rst#2025-04-22_snippet_45\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Controller;\n\n// ...\nuse Symfony\\Component\\DependencyInjection\\Attribute\\Target;\n\nclass PersonController extends AbstractController\n{\n    public function index(\n        SerializerInterface $serializer,           // default serializer\n        SerializerInterface $apiClient1Serializer, // api_client1 serializer\n        #[Target('apiClient2.serializer')]         // api_client2 serializer\n        SerializerInterface $customName,\n    ) {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Lazy Loading for a Symfony Command via PHP Attribute\nDESCRIPTION: Illustrates how to make a Symfony console command lazy-loaded by specifying its name directly within the `AsCommand` PHP attribute. This is the recommended approach and ensures the command class is only instantiated when the `app:sunshine` command is actually executed, improving performance.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/console/commands_as_services.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Console\\Attribute\\AsCommand;\n// ...\n\n#[AsCommand(name: 'app:sunshine')]\nclass SunshineCommand extends Command\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Service Decoration in YAML Configuration\nDESCRIPTION: Example of implementing the Decorator pattern in YAML configuration. The 'decorates' option is used to override a service while keeping the original service available as '.inner'.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/service_decoration.rst#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nservices:\n    App\\Mailer: ~\n\n    App\\DecoratingMailer:\n        # overrides the App\\Mailer service\n        # but that service is still available as \".inner\"\n        decorates: App\\Mailer\n```\n\n----------------------------------------\n\nTITLE: Handling SentMessageEvent in Symfony Mailer\nDESCRIPTION: Event listener for processing sent messages and accessing debugging information\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_69\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\nuse Symfony\\Component\\Mailer\\Event\\SentMessageEvent;\n\npublic function onMessage(SentMessageEvent $event): void\n{\n    $message = $event->getMessage();\n\n    // do something with the message (e.g. get its id)\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Signals to a Process in Symfony\nDESCRIPTION: This snippet shows how to send POSIX signals to a running process using the signal method. It also demonstrates how to make a process ignore specific signals.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/process.rst#2025-04-22_snippet_22\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Process\\Process;\n\n$process = new Process(['find', '/', '-name', 'rabbit']);\n$process->start();\n\n// will send a SIGKILL to the process\n$process->signal(SIGKILL);\n\n$process = new Process(['find', '/', '-name', 'rabbit']);\n$process->setIgnoredSignals([SIGKILL, SIGUSR1]);\n```\n\n----------------------------------------\n\nTITLE: Configuring User Providers in Symfony Security (PHP)\nDESCRIPTION: Defines user providers in Symfony using PHP configuration. Registers LDAP, legacy entity, and standard entity providers, and creates a chain provider that includes them. Requires the Symfony\\Config\\SecurityConfig class and custom user entity implementation. Each provider is set up using fluent builder methods on the SecurityConfig object.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/user_providers.rst#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/security.php\\nuse App\\Entity\\User;\\nuse Symfony\\Config\\SecurityConfig;\\n\\nreturn static function (SecurityConfig $security): void {\\n    // ...\\n\\n    $security->provider('backend_users')\\n        ->ldap()\\n        // ...\\n    ;\\n\\n    $security->provider('legacy_users')\\n        ->entity()\\n        // ...\\n    ;\\n\\n    $security->provider('users')\\n        ->entity()\\n        // ...\\n    ;\\n\\n    $security->provider('all_users')->chain()\\n        ->providers(['backend_users', 'legacy_users', 'users'])\\n    ;\\n};\n```\n\n----------------------------------------\n\nTITLE: Generating CSRF Tokens in Twig\nDESCRIPTION: The `csrf_token` function generates a Cross-Site Request Forgery (CSRF) token associated with a specific `intention` (an arbitrary string identifier). This token should be included in custom HTML forms (not managed by Symfony Forms) to protect against CSRF attacks. The generated token depends on the user's session.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#2025-04-22_snippet_9\n\nLANGUAGE: twig\nCODE:\n```\n{{ csrf_token(intention) }}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Repository Class in Symfony\nDESCRIPTION: Demonstrates the structure of a custom repository class extending ServiceEntityRepository with constructor initialization.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine.rst#2025-04-22_snippet_30\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Repository;\n\nuse App\\Entity\\Product;\nuse Doctrine\\Bundle\\DoctrineBundle\\Repository\\ServiceEntityRepository;\nuse Doctrine\\Persistence\\ManagerRegistry;\n\nclass ProductRepository extends ServiceEntityRepository\n{\n    public function __construct(ManagerRegistry $registry)\n    {\n        parent::__construct($registry, Product::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Autowiring and Using Symfony Workflow in a Service Class (PHP)\nDESCRIPTION: Demonstrates how to inject and use a Symfony workflow or state machine in a service class using autowiring. The example shows how to apply a transition to a PullRequest entity using the injected state machine.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/workflow/workflow-and-state-machine.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// ...\nuse App\\Entity\\PullRequest;\nuse Symfony\\Component\\Workflow\\WorkflowInterface;\n\nclass SomeService\n{\n    public function __construct(\n        // Symfony will inject the 'pull_request' state machine configured before\n        private WorkflowInterface $pullRequestStateMachine,\n    ) {\n    }\n\n    public function someMethod(PullRequest $pullRequest): void\n    {\n        $this->pullRequestStateMachine->apply($pullRequest, 'wait_for_review', [\n            'log_comment' => 'My logging comment for the wait for review transition.',\n        ]);\n        // ...\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Lock Usage in PHP\nDESCRIPTION: Demonstrates the basic pattern of acquiring and releasing a lock to protect a critical section of code\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/lock.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$lock = $lockFactory->createLock('pdf-creation');\nif (!$lock->acquire()) {\n    return;\n}\n\n// critical section of code\n$service->method();\n\n$lock->release();\n```\n\n----------------------------------------\n\nTITLE: Submitting Forms via submitForm and Customizing Form Parameters (Symfony BrowserKit, PHP)\nDESCRIPTION: Shows multiple ways to submit forms with submitForm, including overriding field values, setting HTTP method, and passing server parameters (e.g., headers). File uploads are possible by supplying file paths. Requires Acme\\Client and symfony/browser-kit. Inputs include button text and optional associative arrays for values and options.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/browser_kit.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Acme\\Client;\\n\\n$client = new Client();\\n$crawler = $client->request('GET', 'https://github.com/login');\\n\\n// find the form with the 'Log in' button and submit it\\n// 'Log in' can be the text content, id, value or name of a <button> or <input type=\"submit\">\\n$client->submitForm('Log in');\\n\\n// the second optional argument lets you override the default form field values\\n$client->submitForm('Log in', [\\n    'login' => 'my_user',\\n    'password' => 'my_pass',\\n    // to upload a file, the value must be the absolute file path\\n    'file' => __FILE__,\\n]);\\n\\n// you can override other form options too\\n$client->submitForm(\\n    'Log in',\\n    ['login' => 'my_user', 'password' => 'my_pass'],\\n    // override the default form HTTP method\\n    'PUT',\\n    // override some $_SERVER parameters (e.g. HTTP headers)\\n    ['HTTP_ACCEPT_LANGUAGE' => 'es']\\n);\n```\n\n----------------------------------------\n\nTITLE: Acquiring a Shared (Read) Lock in PHP\nDESCRIPTION: Demonstrates how to acquire a shared lock (also known as a read lock or readers lock) for a resource identified dynamically ('user-'.$user->id). The `acquireRead()` method is used. Multiple processes or threads can successfully call `acquireRead()` concurrently for the same resource, allowing parallel read access.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/lock.rst#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$lock = $factory->createLock('user-'.$user->id);\nif (!$lock->acquireRead()) {\n    return;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony String Component using Composer (Terminal)\nDESCRIPTION: This snippet demonstrates how to install the Symfony String component in a PHP project using Composer. Composer is required as a dependency for dependency management. Executing this command will add the 'symfony/string' package to your project's dependencies, allowing you to use the API as documented.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/string.rst#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require symfony/string\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Redis Provider Options (YAML)\nDESCRIPTION: This YAML configuration demonstrates setting up a custom Redis provider (`app.my_custom_redis_provider`) with specific connection options (retry_interval, timeout). The cache pool `cache.my_redis` is configured to use this custom provider instead of a default DSN string. The provider service itself is defined using the `RedisAdapter::createConnection` factory method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/cache.rst#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/cache.yaml\nframework:\n    cache:\n        pools:\n            cache.my_redis:\n                adapter: cache.adapter.redis\n                provider: app.my_custom_redis_provider\n\nservices:\n    app.my_custom_redis_provider:\n        class: \\Redis\n        factory: ['Symfony\\Component\\Cache\\Adapter\\RedisAdapter', 'createConnection']\n        arguments:\n            - 'redis://localhost'\n            - { retry_interval: 2, timeout: 10 }\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Information with Symfony HttpFoundation\nDESCRIPTION: Examples of accessing various request information using Symfony's Request class.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/create_framework/http_foundation.rst#2025-04-22_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n// the URI being requested (e.g. /about) minus any query parameters\n$request->getPathInfo();\n\n// retrieves GET and POST variables respectively\n$request->query->get('foo');\n$request->getPayload()->get('bar', 'default value if bar does not exist');\n\n// retrieves SERVER variables\n$request->server->get('HTTP_HOST');\n\n// retrieves an instance of UploadedFile identified by foo\n$request->files->get('foo');\n\n// retrieves a COOKIE value\n$request->cookies->get('PHPSESSID');\n\n// retrieves a HTTP request header, with normalized, lowercase keys\n$request->headers->get('host');\n$request->headers->get('content-type');\n\n$request->getMethod();    // GET, POST, PUT, DELETE, HEAD\n$request->getLanguages(); // an array of languages the client accepts\n```\n\n----------------------------------------\n\nTITLE: Deserializing JSON Data to an Object in a Symfony Controller\nDESCRIPTION: Shows how to deserialize incoming JSON request data into a `Person` object within a Symfony controller. It retrieves the raw request content, checks the content type, and uses the injected `SerializerInterface`'s `deserialize` method, specifying the target class (`Person::class`) and the input format ('json').\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/PersonController.php\nnamespace App\\Controller;\n\n// ...\nuse Symfony\\Component\\HttpFoundation\\Exception\\BadRequestException;\nuse Symfony\\Component\\HttpFoundation\\Request;\n\nclass PersonController extends AbstractController\n{\n    // ...\n\n    public function create(Request $request, SerializerInterface $serializer): Response\n    {\n        if ('json' !== $request->getContentTypeFormat()) {\n            throw new BadRequestException('Unsupported content format');\n        }\n\n        $jsonData = $request->getContent();\n        $person = $serializer->deserialize($jsonData, Person::class, 'json');\n\n        // ... do something with $person and return a response\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Firewall Path Restriction - Symfony YAML\nDESCRIPTION: Configures a Symfony firewall in YAML to activate only for paths matching the \"/admin\" prefix using the \"pattern\" key. Requires the Symfony Security bundle and placement in \"config/packages/security.yaml\". The \"pattern\" is a regular expression; other firewalls are checked if the pattern does not match.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/firewall_restriction.rst#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\n\n# ...\nsecurity:\n    firewalls:\n        secured_area:\n            pattern: ^/admin\n            # ...\n```\n\n----------------------------------------\n\nTITLE: Importing Service Configuration in PHP\nDESCRIPTION: Illustrates how to import external configuration files in PHP using the ContainerConfigurator. This example shows importing a single file and a whole directory while setting up default service configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/import.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nreturn function(ContainerConfigurator $container): void {\n    $container->import('services/mailer.php');\n    // If you want to import a whole directory:\n    $container->import('services/');\n\n    $services = $container->services()\n        ->defaults()\n            ->autowire()\n            ->autoconfigure()\n    ;\n\n    $services->load('App\\\\', '../src/*');\n};\n```\n\n----------------------------------------\n\nTITLE: Token Authentication Controller Check in Event Subscriber\nDESCRIPTION: Code that checks if a controller implements TokenAuthenticatedController and validates a token from the request query parameters. If the token is invalid, it throws an AccessDeniedHttpException.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/event_dispatcher.rst#2025-04-22_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n// is returned as [$controllerInstance, 'methodName']\nif (is_array($controller)) {\n    $controller = $controller[0];\n}\n\nif ($controller instanceof TokenAuthenticatedController) {\n    $token = $event->getRequest()->query->get('token');\n    if (!in_array($token, $this->tokens)) {\n        throw new AccessDeniedHttpException('This action needs a valid token!');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Files by Date Range with Symfony Finder in PHP\nDESCRIPTION: Demonstrates two ways to specify a date range for file searching based on last modified time: either by chaining multiple calls to the `date()` method with different comparison operators or by passing an array of date constraints to a single `date()` call.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/finder.rst#2025-04-22_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n$finder->date('>= 2018-01-01')->date('<= 2018-12-31');\n```\n\nLANGUAGE: php\nCODE:\n```\n// same as above\n$finder->date(['>= 2018-01-01', '<= 2018-12-31']);\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP Client Service - Symfony - PHP\nDESCRIPTION: This PHP snippet uses Symfony's dependency injection container API to register LDAP client and ExtLdap adapter services. It assigns parameters for host, port, encryption, and connection options required by the LDAP service. Dependencies include the symfony/ldap component and ExtLdap adapter, as well as a properly initialized service container. Input consists of LDAP connection settings; output is a registered, tagged service for LDAP operations.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/ldap.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\\nuse Symfony\\Component\\Ldap\\Adapter\\ExtLdap\\Adapter;\\nuse Symfony\\Component\\Ldap\\Ldap;\\n\\n$container->register(Ldap::class)\\n    ->addArgument(new Reference(Adapter::class))\\n    ->tag('ldap');\\n\\n$container\\n    ->register(Adapter::class)\\n    ->setArguments([\\n        'host' => 'my-server',\\n        'port' => 389,\\n        'encryption' => 'tls',\\n        'options' => [\\n            'protocol_version' => 3,\\n            'referrals' => false\\n        ],\\n    ]);\\n\n```\n\n----------------------------------------\n\nTITLE: Validating Hidden Responses in Symfony Console - PHP\nDESCRIPTION: This example demonstrates a Symfony Console question for hidden user input, such as passwords, which also normalizes and validates the value. The normalizer defaults null input to '' and the validator ensures the input is not blank, throwing an Exception with a custom error message if validation fails. It also sets a high max attempt limit. Requires symfony/console.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/helpers/questionhelper.rst#2025-04-22_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Console\\Question\\Question;\n\n// ...\npublic function execute(InputInterface $input, OutputInterface $output): int\n{\n    // ...\n    $helper = $this->getHelper('question');\n\n    $question = new Question('Please enter your password');\n    $question->setNormalizer(function (?string $value): string {\n        return $value ?? '';\n    });\n    $question->setValidator(function (string $value): string {\n        if ('' === trim($value)) {\n            throw new \\Exception('The password cannot be empty');\n        }\n\n        return $value;\n    });\n    $question->setHidden(true);\n    $question->setMaxAttempts(20);\n\n    $password = $helper->ask($input, $output, $question);\n\n    // ... do something with the password\n\n    return Command::SUCCESS;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Applying sanitize_html Filter in Twig\nDESCRIPTION: Uses the `sanitize_html` Twig filter to clean potentially unsafe HTML content in the `body` string. It utilizes a configured HTML sanitizer service, specified by the optional `sanitizer` argument (string, defaults to 'default'). Depends on the Symfony HTML Sanitizer component.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#2025-04-22_snippet_43\n\nLANGUAGE: twig\nCODE:\n```\n{{ body|sanitize_html(sanitizer = \"default\") }}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Compound Constraint in PHP\nDESCRIPTION: Creates a custom PasswordRequirements constraint that combines multiple other constraints. This constraint can be reused across the application for consistent password validation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Compound.rst#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n// src/Validator/Constraints/PasswordRequirements.php\nnamespace App\\Validator\\Constraints;\n\nuse Symfony\\Component\\Validator\\Constraints\\Compound;\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\n#[\\Attribute]\nclass PasswordRequirements extends Compound\n{\n    protected function getConstraints(array $options): array\n    {\n        return [\n            new Assert\\NotBlank(),\n            new Assert\\Type('string'),\n            new Assert\\Length(min: 12),\n            new Assert\\NotCompromisedPassword(),\n            new Assert\\PasswordStrength(minScore: 4),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending FileType with Image Functionality in PHP\nDESCRIPTION: This code extends the FileType to add an image_property option and pass the image URL to the view. It overrides configureOptions() and buildView() methods to implement the new functionality.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/create_form_type_extension.rst#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n// src/Form/Extension/ImageTypeExtension.php\nnamespace App\\Form\\Extension;\n\nuse Symfony\\Component\\Form\\AbstractTypeExtension;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\FileType;\nuse Symfony\\Component\\Form\\FormInterface;\nuse Symfony\\Component\\Form\\FormView;\nuse Symfony\\Component\\OptionsResolver\\OptionsResolver;\nuse Symfony\\Component\\PropertyAccess\\PropertyAccess;\n\nclass ImageTypeExtension extends AbstractTypeExtension\n{\n    public static function getExtendedTypes(): iterable\n    {\n        // return [FormType::class] to modify (nearly) every field in the system\n        return [FileType::class];\n    }\n\n    public function configureOptions(OptionsResolver $resolver): void\n    {\n        // makes it legal for FileType fields to have an image_property option\n        $resolver->setDefined(['image_property']);\n    }\n\n    public function buildView(FormView $view, FormInterface $form, array $options): void\n    {\n        if (isset($options['image_property'])) {\n            // this will be whatever class/entity is bound to your form (e.g. Media)\n            $parentData = $form->getParent()->getData();\n\n            $imageUrl = null;\n            if (null !== $parentData) {\n                $accessor = PropertyAccess::createPropertyAccessor();\n                $imageUrl = $accessor->getValue($parentData, $options['image_property']);\n            }\n\n            // sets an \"image_url\" variable that will be available when rendering this field\n            $view->vars['image_url'] = $imageUrl;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Exception Event Listener in PHP\nDESCRIPTION: Implementation of an event listener class that handles kernel exceptions by creating a custom response. Includes error message formatting and status code handling.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/event_dispatcher.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/EventListener/ExceptionListener.php\nnamespace App\\EventListener;\n\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Event\\ExceptionEvent;\nuse Symfony\\Component\\HttpKernel\\Exception\\HttpExceptionInterface;\n\nclass ExceptionListener\n{\n    public function __invoke(ExceptionEvent $event): void\n    {\n        $exception = $event->getThrowable();\n        $message = sprintf(\n            'My Error says: %s with code: %s',\n            $exception->getMessage(),\n            $exception->getCode()\n        );\n\n        $response = new Response();\n        $response->setContent($message);\n        $response->headers->set('Content-Type', 'text/plain; charset=utf-8');\n\n        if ($exception instanceof HttpExceptionInterface) {\n            $response->setStatusCode($exception->getStatusCode());\n            $response->headers->replace($exception->getHeaders());\n        } else {\n            $response->setStatusCode(Response::HTTP_INTERNAL_SERVER_ERROR);\n        }\n\n        $event->setResponse($response);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using VarCloner to Create Data Objects for VarDumper (PHP)\nDESCRIPTION: Shows the basic usage of `VarCloner` to create an intermediate, serializable representation (`Data` object) of a PHP variable. This `Data` object encapsulates the structure and type information of the variable, applying any configured limits (like max items/depth), and is typically passed to a `Dumper` instance for rendering.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/var_dumper.rst#2025-04-22_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\VarDumper\\Cloner\\VarCloner;\n\n$cloner = new VarCloner();\n$data = $cloner->cloneVar($myVar);\n// this is commonly then passed to the dumper\n// see the example at the top of this page\n// $dumper->dump($data);\n```\n\n----------------------------------------\n\nTITLE: Implementing WordCount Constraint with PHP Attributes\nDESCRIPTION: Example showing how to use WordCount constraint with PHP attributes to validate that a content property contains between 100 and 200 words.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/WordCount.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/BlogPostDTO.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass BlogPostDTO\n{\n    #[Assert\\WordCount(min: 100, max: 200)]\n    protected string $content;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Request Path Information in PHP\nDESCRIPTION: Shows how to obtain the path info part of the request URI (the part after the base script name and before the query string) using the `getPathInfo()` method on the `Request` object. This is commonly used for routing requests.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// for a request to http://example.com/blog/index.php/post/hello-world\n// the path info is \"/post/hello-world\"\n$request->getPathInfo();\n```\n\n----------------------------------------\n\nTITLE: Accessing Workflow Metadata in a Controller\nDESCRIPTION: This PHP snippet demonstrates how to access workflow, place, and transition metadata in a Symfony controller using the WorkflowInterface.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/workflow.rst#2025-04-22_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Entity\\BlogPost;\nuse Symfony\\Component\\Workflow\\WorkflowInterface;\n// ...\n\npublic function myAction(WorkflowInterface $blogPublishingWorkflow, BlogPost $post): Response\n{\n    $title = $blogPublishingWorkflow\n        ->getMetadataStore()\n        ->getWorkflowMetadata()['title'] ?? 'Default title'\n    ;\n\n    $maxNumOfWords = $blogPublishingWorkflow\n        ->getMetadataStore()\n        ->getPlaceMetadata('draft')['max_num_of_words'] ?? 500\n    ;\n\n    $aTransition = $blogPublishingWorkflow->getDefinition()->getTransitions()[0];\n    $priority = $blogPublishingWorkflow\n        ->getMetadataStore()\n        ->getTransitionMetadata($aTransition)['priority'] ?? 0\n    ;\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Validating a String with Length and NotBlank Constraints in PHP\nDESCRIPTION: Demonstrates basic usage of the Validator component. It creates a validator instance, defines an array of constraints (`Length` and `NotBlank`), validates a sample string ('Bernhard') against these constraints, and iterates through any violations to display their messages. Dependencies include the `Validation`, `Length`, and `NotBlank` classes from the `symfony/validator` component.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/validator.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Validator\\Constraints\\Length;\nuse Symfony\\Component\\Validator\\Constraints\\NotBlank;\nuse Symfony\\Component\\Validator\\Validation;\n\n$validator = Validation::createValidator();\n$violations = $validator->validate('Bernhard', [\n    new Length(min: 10),\n    new NotBlank(),\n]);\n\nif (0 !== count($violations)) {\n    // there are errors, now you can show them\n    foreach ($violations as $violation) {\n        echo $violation->getMessage().'<br>';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Static Factory Method for NewsletterManager - PHP\nDESCRIPTION: Defines a static factory class in PHP, 'NewsletterManagerStaticFactory', with a static method 'createNewsletterManager' that instantiates and configures a new NewsletterManager object. This pattern is used to encapsulate the creation logic for objects requiring complex setup within the Symfony ecosystem. The factory can then be referenced in configuration files to create services, and assumes existence of the NewsletterManager class.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/factories.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Email/NewsletterManagerStaticFactory.php\nnamespace App\\Email;\n\n// ...\n\nclass NewsletterManagerStaticFactory\n{\n    public static function createNewsletterManager(): NewsletterManager\n    {\n        $newsletterManager = new NewsletterManager();\n\n        // ...\n\n        return $newsletterManager;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using Import Statements with AssetMapper in JavaScript\nDESCRIPTION: Shows supported and unsupported ways to import JavaScript modules when using AssetMapper. Static imports work in all browsers but dynamic imports require special handling in older browsers.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/asset_mapper.rst#2025-04-22_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\n// this works\nimport { add } from './math.js';\n\n// this will not work in the oldest browsers\nimport('./math.js').then(({ add }) => {\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Defining UUID Constraint using PHP Attributes\nDESCRIPTION: Example of how to apply the UUID constraint to a property using PHP attributes in a Symfony entity class.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Uuid.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/File.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass File\n{\n    #[Assert\\Uuid]\n    protected string $identifier;\n}\n```\n\n----------------------------------------\n\nTITLE: Debugging Translations with debug:translation Command in Symfony\nDESCRIPTION: Shows how to use the debug:translation command to inspect translations in the French locale. The output displays the translation state, message ID, translation in French, and fallback in English.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/translation.rst#2025-04-22_snippet_44\n\nLANGUAGE: terminal\nCODE:\n```\n$ php bin/console debug:translation fr\n\n---------  ------------------  ----------------------  -------------------------------\n State      Id                  Message Preview (fr)    Fallback Message Preview (en)\n---------  ------------------  ----------------------  -------------------------------\n unused     Symfony is great    Symfony est génial      Symfony is great\n---------  ------------------  ----------------------  -------------------------------\n```\n\n----------------------------------------\n\nTITLE: Stopping a Process in Symfony\nDESCRIPTION: This snippet shows how to stop an asynchronous process using the stop method. It demonstrates specifying a timeout and a signal to send to the process.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/process.rst#2025-04-22_snippet_18\n\nLANGUAGE: PHP\nCODE:\n```\n$process = new Process(['ls', '-lsa']);\n$process->start();\n\n// ... do other things\n\n$process->stop(3, SIGINT);\n```\n\n----------------------------------------\n\nTITLE: Refreshing an Expiring Lock for Long-Running Tasks in PHP\nDESCRIPTION: Illustrates handling long-running tasks with expiring locks. A lock with a 30-second TTL is created. Inside a `while` loop that processes the task in chunks, `lock->refresh()` is called periodically to reset the lock's TTL back to 30 seconds, preventing it from expiring prematurely. A `try...finally` block ensures the lock is released upon completion or error.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/lock.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// ...\n$lock = $factory->createLock('pdf-creation', ttl: 30);\n\nif (!$lock->acquire()) {\n    return;\n}\ntry {\n    while (!$finished) {\n        // perform a small part of the job.\n\n        // renew the lock for 30 more seconds.\n        $lock->refresh();\n    }\n} finally {\n    $lock->release();\n}\n```\n\n----------------------------------------\n\nTITLE: PHP Service Consuming an Interface with Potential Autowiring Ambiguity\nDESCRIPTION: The `MastodonClient` class requires a `TransformerInterface` implementation in its constructor. The argument is named `$shoutyTransformer`, which can be used in conjunction with named autowiring aliases to inject a specific implementation (`UppercaseTransformer`) different from the default.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/autowiring.rst#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n// src/Service/MastodonClient.php\nnamespace App\\Service;\n\nuse App\\Util\\TransformerInterface;\n\nclass MastodonClient\n{\n    public function __construct(\n        private TransformerInterface $shoutyTransformer,\n    ) {\n    }\n\n    public function toot(User $user, string $key, string $status): void\n    {\n        $transformedStatus = $this->transformer->transform($status);\n\n        // ... connect to Mastodon and send the transformed status\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Email Settings in Symfony XML\nDESCRIPTION: Shows how to configure global email settings such as sender, recipients, and headers using XML configuration in Symfony.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_36\n\nLANGUAGE: XML\nCODE:\n```\n<!-- config/packages/mailer.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <!-- ... -->\n    <framework:config>\n        <framework:mailer>\n            <framework:envelope>\n                <framework:sender>fabien@example.com</framework:sender>\n                <framework:recipients>foo@example.com</framework:recipients>\n                <framework:recipients>bar@example.com</framework:recipients>\n            </framework:envelope>\n            <framework:header name=\"From\">Fabien &lt;fabien@example.com&gt;</framework:header>\n            <framework:header name=\"Bcc\">baz@example.com</framework:header>\n            <framework:header name=\"X-Custom-Header\">foobar</framework:header>\n        </framework:mailer>\n    </framework:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Identifying Pull Request Merge Commits in Git\nDESCRIPTION: Illustrates the standard format for commit messages when a pull request is merged into the Symfony repository. This pattern includes the merging branch details (user and branch name) and the corresponding pull request number (PR #), allowing easy identification and reference back to the original PR on GitHub.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/contributing/code/git.rst#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmerged branch USER_NAME/BRANCH_NAME (PR #1111)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Symfony Mime Type Guesser (PHP)\nDESCRIPTION: Provides a basic structure for creating a custom MIME type guesser by implementing the `Symfony\\Component\\Mime\\MimeTypeGuesserInterface`. The `isGuesserSupported` method should return true if the guesser can operate in the current environment, and the `guessMimeType` method (not shown fully) would contain the custom guessing logic.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/mime.rst#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nnamespace App;\n\nuse Symfony\\Component\\Mime\\MimeTypeGuesserInterface;\n\nclass SomeMimeTypeGuesser implements MimeTypeGuesserInterface\n{\n    public function isGuesserSupported(): bool\n    {\n        // return true when the guesser is supported (might depend on the OS for instance)\n    }\n\n    // ... requires implementing guessMimeType(string $path): ?string method\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing IssueToNumberTransformer in PHP\nDESCRIPTION: Defines a custom data transformer class IssueToNumberTransformer that converts between Issue objects and their ID numbers. It uses Doctrine's EntityManager to fetch Issue entities.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/data_transformers.rst#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n// src/Form/DataTransformer/IssueToNumberTransformer.php\nnamespace App\\Form\\DataTransformer;\n\nuse App\\Entity\\Issue;\nuse Doctrine\\ORM\\EntityManagerInterface;\nuse Symfony\\Component\\Form\\DataTransformerInterface;\nuse Symfony\\Component\\Form\\Exception\\TransformationFailedException;\n\nclass IssueToNumberTransformer implements DataTransformerInterface\n{\n    public function __construct(\n        private EntityManagerInterface $entityManager,\n    ) {\n    }\n\n    /**\n     * Transforms an object (issue) to a string (number).\n     *\n     * @param  Issue|null $issue\n     */\n    public function transform($issue): string\n    {\n        if (null === $issue) {\n            return '';\n        }\n\n        return $issue->getId();\n    }\n\n    /**\n     * Transforms a string (number) to an object (issue).\n     *\n     * @param  string $issueNumber\n     * @throws TransformationFailedException if object (issue) is not found.\n     */\n    public function reverseTransform($issueNumber): ?Issue\n    {\n        // no issue number? It's optional, so that's ok\n        if (!$issueNumber) {\n            return null;\n        }\n\n        $issue = $this->entityManager\n            ->getRepository(Issue::class)\n            // query for the issue with this id\n            ->find($issueNumber)\n        ;\n\n        if (null === $issue) {\n            // causes a validation error\n            // this message is not shown to the user\n            // see the invalid_message option\n            throw new TransformationFailedException(sprintf(\n                'An issue with number \"%s\" does not exist!',\n                $issueNumber\n            ));\n        }\n\n        return $issue;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Query Builder Example in Product Repository\nDESCRIPTION: Shows how to use Doctrine's QueryBuilder to create dynamic queries with conditional clauses.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine.rst#2025-04-22_snippet_32\n\nLANGUAGE: php\nCODE:\n```\npublic function findAllGreaterThanPrice(int $price, bool $includeUnavailableProducts = false): array\n{\n    $qb = $this->createQueryBuilder('p')\n        ->where('p.price > :price')\n        ->setParameter('price', $price)\n        ->orderBy('p.price', 'ASC');\n\n    if (!$includeUnavailableProducts) {\n        $qb->andWhere('p.available = TRUE');\n    }\n\n    $query = $qb->getQuery();\n\n    return $query->execute();\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Twig Filter Extension Class\nDESCRIPTION: Creates a custom Twig extension class that defines a price formatting filter. Shows implementation of AbstractExtension with a custom filter method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/templates.rst#2025-04-22_snippet_49\n\nLANGUAGE: php\nCODE:\n```\n// src/Twig/AppExtension.php\nnamespace App\\Twig;\n\nuse Twig\\Extension\\AbstractExtension;\nuse Twig\\TwigFilter;\n\nclass AppExtension extends AbstractExtension\n{\n    public function getFilters(): array\n    {\n        return [\n            new TwigFilter('price', [$this, 'formatPrice']),\n        ];\n    }\n\n    public function formatPrice(float $number, int $decimals = 0, string $decPoint = '.', string $thousandsSep = ','): string\n    {\n        $price = number_format($number, $decimals, $decPoint, $thousandsSep);\n        $price = '$'.$price;\n\n        return $price;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Collections in YAML\nDESCRIPTION: Shows how to create nested collections using proper indentation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/formats/yaml.rst#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n'symfony 1.0':\n  PHP:    5.0\n  Propel: 1.2\n'symfony 1.2':\n  PHP:    5.2\n  Propel: 1.3\n```\n\n----------------------------------------\n\nTITLE: Using LessThan Constraint with Fixed Timezone in YAML\nDESCRIPTION: Example of defining the LessThan constraint with a fixed timezone in YAML configuration to validate date properties.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/LessThan.rst#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Person:\n    properties:\n        dateOfBirth:\n            - LessThan: today UTC\n```\n\n----------------------------------------\n\nTITLE: Adding SerializerStamp Metadata to a Message Envelope - Symfony Messenger - PHP\nDESCRIPTION: Illustrates wrapping a message with an Envelope and attaching a SerializerStamp in Symfony Messenger. Requires Symfony Messenger and a valid $bus and $message instance. This enables configuration of serialization groups for the message as it travels through the transport, affecting how data is serialized. The envelope with its stamps is dispatched on the message bus.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/messenger.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Messenger\\Envelope;\nuse Symfony\\Component\\Messenger\\Stamp\\SerializerStamp;\n\n$bus->dispatch(\n    (new Envelope($message))->with(new SerializerStamp([\n        // groups are applied to the whole message, so make sure\n        // to define the group for every embedded object\n        'groups' => ['my_serialization_groups'],\n    ]))\n);\n```\n\n----------------------------------------\n\nTITLE: Using FileUploader Service in Controller\nDESCRIPTION: This PHP code demonstrates how to use the FileUploader service in a controller to handle file uploads within a form submission process.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/controller/upload_file.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/ProductController.php\nnamespace App\\Controller;\n\nuse App\\Service\\FileUploader;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\n// ...\npublic function new(Request $request, FileUploader $fileUploader): Response\n{\n    // ...\n\n    if ($form->isSubmitted() && $form->isValid()) {\n        /** @var UploadedFile $brochureFile */\n        $brochureFile = $form->get('brochure')->getData();\n        if ($brochureFile) {\n            $brochureFileName = $fileUploader->upload($brochureFile);\n            $product->setBrochureFilename($brochureFileName);\n        }\n\n        // ...\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Choice Constraint in XML for Symfony\nDESCRIPTION: Example of configuring a Choice constraint for a property using XML format in Symfony. It defines valid choices for a 'genre' property and sets a custom error message.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/validation.rst#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<constraint name=\"Choice\">\n    <option name=\"choices\">\n        <value>fiction</value>\n        <value>non-fiction</value>\n    </option>\n    <option name=\"message\">Choose a valid genre.</option>\n</constraint>\n```\n\n----------------------------------------\n\nTITLE: String Search and Replace Methods in Symfony\nDESCRIPTION: Examples of methods for searching within strings and performing replacements, including regular expression support and pattern matching.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/string.rst#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nu('https://symfony.com')->startsWith('https'); // true\nu('report-1234.pdf')->endsWith('.pdf');        // true\n\nu('foo')->equalsTo('foo'); // true\n\nu('avatar-73647.png')->match('/avatar-(\\d+)\\.png/');\n\nu('206-555-0100 and 800-555-1212')->match('/\\d{3}-\\d{3}-\\d{4}/', \\PREG_PATTERN_ORDER);\n\nu('aeiou')->containsAny('a');                 // true\nu('aeiou')->containsAny(['ab', 'efg']);       // false\nu('aeiou')->containsAny(['eio', 'foo', 'z']); // true\n\nu('abcdeabcde')->indexOf('c');     // 2\nu('abcdeabcde')->indexOf('c', 2);  // 2\nu('abcdeabcde')->indexOf('c', -4); // 7\nu('abcdeabcde')->indexOf('eab');   // 4\nu('abcdeabcde')->indexOf('k');     // null\n\nu('abcdeabcde')->indexOfLast('c');     // 7\nu('abcdeabcde')->indexOfLast('c', 2);  // 7\nu('abcdeabcde')->indexOfLast('c', -4); // 2\nu('abcdeabcde')->indexOfLast('eab');   // 4\nu('abcdeabcde')->indexOfLast('k');     // null\n\nu('http://symfony.com')->replace('http://', 'https://'); // 'https://symfony.com'\nu('(+1) 206-555-0100')->replaceMatches('/[^A-Za-z0-9]++/', ''); // '12065550100'\n\nu('123')->replaceMatches('/\\d/', function (string $match): string {\n    return '['.$match[0].']';\n}); // result = '[1][2][3]'\n```\n\n----------------------------------------\n\nTITLE: Generating Optimized Environment Configuration\nDESCRIPTION: Commands for generating an optimized .env.local.php file for production environment with and without values.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/deployment.rst#2025-04-22_snippet_2\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer dump-env prod\n```\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer dump-env prod --empty\n```\n\n----------------------------------------\n\nTITLE: Safely Accessing Nullable Object Paths with Nullsafe Operator (PHP)\nDESCRIPTION: Illustrates the use of the nullsafe operator (`?`) in a property path (e.g., `person?.firstname`). If a property marked with `?` (like `person` in this case) is `null`, the expression short-circuits and returns `null` immediately, preventing an `UnexpectedTypeException` that would occur without the operator when trying to access `firstname` on `null`.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/property_access.rst#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nclass Person\n{\n}\n\nclass Comment\n{\n    public ?Person $person = null;\n    public string $message;\n}\n\n$comment = new Comment();\n$comment->message = 'test';\n\n// This code throws an exception of type\n// Symfony\\Component\\PropertyAccess\\Exception\\UnexpectedTypeException\nvar_dump($propertyAccessor->getValue($comment, 'person.firstname'));\n\n// If a property marked with the nullsafe operator is null, the expression is\n// no longer evaluated and null is returned immediately without throwing an exception\nvar_dump($propertyAccessor->getValue($comment, 'person?.firstname')); // null\n```\n\n----------------------------------------\n\nTITLE: Configuring Doctrine Event Listeners in PHP\nDESCRIPTION: This code shows how to register a Doctrine event listener using PHP configuration in services.php. It demonstrates tagging a service with doctrine.event_listener and configuring event name, priority, and connection options.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine/events.rst#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nuse App\\EventListener\\SearchIndexer;\n\nreturn static function (ContainerConfigurator $container): void {\n    $services = $container->services();\n\n    // listeners are applied by default to all Doctrine connections\n    $services->set(SearchIndexer::class)\n        ->tag('doctrine.event_listener', [\n            // this is the only required option for the lifecycle listener tag\n            'event' => 'postPersist',\n\n            // listeners can define their priority in case multiple listeners are associated\n            // to the same event (default priority = 0; higher numbers = listener is run earlier)\n            'priority' => 500,\n\n            # you can also restrict listeners to a specific Doctrine connection\n            'connection' => 'default',\n        ])\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Validator Class Implementation\nDESCRIPTION: Demonstrates a custom validator class extending ConstraintValidator with option access.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/validation/custom_constraint.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nclass FooValidator extends ConstraintValidator\n{\n    public function validate($value, Constraint $constraint)\n    {\n        // access any option of the constraint\n        if ($constraint->optionalBarOption) {\n            // ...\n        }\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a Version 4 Random UUID in PHP\nDESCRIPTION: Illustrates creating a UUIDv4, which is randomly generated, using the `Uuid::v4()` static method. This version ensures uniqueness across distributed systems without needing central coordination. The result is an instance of `Symfony\\Component\\Uid\\UuidV4`.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/uid.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Uid\\Uuid;\n\n// $uuid is an instance of Symfony\\Component\\Uid\\UuidV4\n$uuid = Uuid::v4();\n```\n\n----------------------------------------\n\nTITLE: Event Listener Service Configuration in YAML\nDESCRIPTION: YAML configuration for registering an event listener service with the kernel.event_listener tag.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/event_dispatcher.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nservices:\n    App\\EventListener\\ExceptionListener:\n        tags: [kernel.event_listener]\n```\n\n----------------------------------------\n\nTITLE: Accessing Public Object Properties with PropertyAccessor (PHP)\nDESCRIPTION: Illustrates reading the value of a public property directly using dot notation (`object.propertyName`). It also shows accessing properties through nested objects and arrays within the path string (`object.arrayProperty[index].propertyName`). Accessing public properties is attempted after trying getters, issers, and hassers.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/property_access.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// ...\n$person = new Person();\n$person->firstName = 'Wouter';\n\nvar_dump($propertyAccessor->getValue($person, 'firstName')); // 'Wouter'\n\n$child = new Person();\n$child->firstName = 'Bar';\n$person->children = [$child];\n\nvar_dump($propertyAccessor->getValue($person, 'children[0].firstName')); // 'Bar'\n```\n\n----------------------------------------\n\nTITLE: Converting Symfony HttpFoundation Request to PSR-7 ServerRequest - PHP\nDESCRIPTION: Demonstrates converting a Symfony HttpFoundation Request to a PSR-7 ServerRequest using the PsrHttpFactory. Requires nyholm/psr7 (for Psr17Factory), symfony/psr-http-message-bridge (for factory class), and symfony/http-foundation. The input is a Symfony Request object (with a required HTTP_HOST entry); output is a Nyholm PSR-7 ServerRequest implementing ServerRequestInterface. Limitations: PSR-7 factory implementations must be installed and configured correctly.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/psr7.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Nyholm\\Psr7\\Factory\\Psr17Factory;\nuse Symfony\\Bridge\\PsrHttpMessage\\Factory\\PsrHttpFactory;\nuse Symfony\\Component\\HttpFoundation\\Request;\n\n$symfonyRequest = new Request([], [], [], [], [], ['HTTP_HOST' => 'dunglas.fr'], 'Content');\n// The HTTP_HOST server key must be set to avoid an unexpected error\n\n$psr17Factory = new Psr17Factory();\n$psrHttpFactory = new PsrHttpFactory($psr17Factory, $psr17Factory, $psr17Factory, $psr17Factory);\n$psrRequest = $psrHttpFactory->createRequest($symfonyRequest);\n```\n\n----------------------------------------\n\nTITLE: Generating Absolute URLs in PHP\nDESCRIPTION: This snippet demonstrates how to use the UrlHelper service in Symfony to generate absolute URLs in a normalizer class.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#2025-04-22_snippet_35\n\nLANGUAGE: PHP\nCODE:\n```\n// src/Normalizer/UserApiNormalizer.php\nnamespace App\\Normalizer;\n\nuse Symfony\\Component\\HttpFoundation\\UrlHelper;\n\nclass UserApiNormalizer\n{\n    public function __construct(\n        private UrlHelper $urlHelper,\n    ) {\n    }\n\n    public function normalize($user): array\n    {\n        return [\n            'avatar' => $this->urlHelper->getAbsoluteUrl($user->avatar()->path()),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Doctrine ORM Cache Drivers with Symfony Cache Pools\nDESCRIPTION: YAML configuration for using Symfony Cache pools as Doctrine ORM cache drivers for metadata, query, and result caching in production environment.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/doctrine.rst#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/prod/doctrine.yaml\nframework:\n    cache:\n        pools:\n            doctrine.result_cache_pool:\n                adapter: cache.app\n            doctrine.system_cache_pool:\n                adapter: cache.system\n\ndoctrine:\n    orm:\n        # ...\n        metadata_cache_driver:\n            type: pool\n            pool: doctrine.system_cache_pool\n        query_cache_driver:\n            type: pool\n            pool: doctrine.system_cache_pool\n        result_cache_driver:\n            type: pool\n            pool: doctrine.result_cache_pool\n\n        # in addition to Symfony Cache pools, you can also use the\n        # 'type: service' option to use any service as the cache\n        query_cache_driver:\n            type: service\n            id: App\\ORM\\MyCacheService\n```\n\n----------------------------------------\n\nTITLE: Enabling Twig CssInlinerExtension for Symfony Mime (PHP)\nDESCRIPTION: Illustrates adding the `Twig\\Extra\\CssInliner\\CssInlinerExtension` to a manually configured Twig `Environment` instance. This enables the use of the `inline_css` filter within Twig templates rendered by the `BodyRenderer` for email generation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/mime.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// ...\nuse Twig\\Extra\\CssInliner\\CssInlinerExtension;\n\n$loader = new FilesystemLoader(__DIR__.'/templates');\n$twig = new Environment($loader);\n$twig->addExtension(new CssInlinerExtension());\n```\n\n----------------------------------------\n\nTITLE: Parsing a YAML String to a PHP Array\nDESCRIPTION: Demonstrates the basic usage of the `Yaml::parse` static method to convert a simple YAML string containing a key-value pair into an associative PHP array. Requires the Symfony Yaml component and its autoloader.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/yaml.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Yaml\\Yaml;\n\n$value = Yaml::parse(\"foo: bar\");\n// $value = ['foo' => 'bar']\n```\n\n----------------------------------------\n\nTITLE: Adding XML and HTML Content to Symfony DomCrawler in PHP\nDESCRIPTION: Shows how to initialize the Symfony DomCrawler with XML or HTML content using addXmlContent, addContent, and add. The addContent method supports an optional MIME type argument to distinguish between HTML and XML content. These methods allow flexible population of the Crawler object for DOM parsing.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/dom_crawler.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$crawler->addXmlContent('<root><node/></root>');\n\n$crawler->addContent('<html><body/></html>');\n$crawler->addContent('<root><node/></root>', 'text/xml');\n\n$crawler->add('<html><body/></html>');\n$crawler->add('<root><node/></root>');\n```\n\n----------------------------------------\n\nTITLE: Filtering Validation Violations by Error Code in PHP\nDESCRIPTION: Illustrates how to filter a `ConstraintViolationListInterface` object (returned by `validate()`) to find violations associated with a specific error code. This example uses `findByCodes()` to check for the `UniqueEntity::NOT_UNIQUE_ERROR`, which is useful for handling specific validation failures differently. Requires the `symfony/validator` component and potentially bridge components like `symfony/doctrine-bridge` if using constraints like `UniqueEntity`.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/validator.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Bridge\\Doctrine\\Validator\\Constraints\\UniqueEntity;\n\n$violations = $validator->validate(/* ... */);\nif (0 !== count($violations->findByCodes(UniqueEntity::NOT_UNIQUE_ERROR))) {\n    // handle this specific error (display some message, send an email, etc.)\n}\n```\n\n----------------------------------------\n\nTITLE: Requiring Files Before Service Loading in PHP\nDESCRIPTION: Shows how to use the `setFile()` method on a `Definition` object to specify a PHP file that should be included using `require_once` just before the service is instantiated by the container. This ensures the file is loaded exactly once per request when needed by the service.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/definitions.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$definition->setFile('/src/path/to/file/foo.php');\n```\n\n----------------------------------------\n\nTITLE: Collection with Different Prototype Options\nDESCRIPTION: Shows how to configure different options for existing entries and new prototype entries in a collection.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/collection.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\CollectionType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\TextType;\n// ...\n\n$builder->add('names', CollectionType::class, [\n    'entry_type' => TextType::class,\n    'entry_options' => [\n        'help' => 'You can edit this name here.',\n    ],\n    'prototype_options'  => [\n        'help' => 'You can enter a new name here.',\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Using Data Transformer in a Controller\nDESCRIPTION: Example of using a form type with a data transformer in a controller. This creates a form that will transform between issue numbers and Issue objects.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/data_transformers.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// e.g. somewhere in a controller\n$form = $this->createForm(TaskType::class, $task);\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Configuring CollectionType with Prototype Data - Symfony Forms - PHP\nDESCRIPTION: This PHP code snippet illustrates configuring a Symfony form with a collection field, enabling prototype functionality and setting a custom prototype data value. It uses the Symfony form builder, includes necessary dependencies from Symfony\\Component\\Form, and targets cases where users may dynamically add tags to a form. Key parameters include 'entry_type' for specifying the input field type, 'allow_add' and 'prototype' for enabling dynamic fields, and 'prototype_data' for setting the initial value of new fields. The resulting form will use 'New Tag Placeholder' as the default content for each new tag field added by the user.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/collection.rst#2025-04-22_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\CollectionType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\TextType;\n// ...\n\n$builder->add('tags', CollectionType::class, [\n    'entry_type' => TextType::class,\n    'allow_add' => true,\n    'prototype' => true,\n    'prototype_data' => 'New Tag Placeholder',\n]);\n```\n\n----------------------------------------\n\nTITLE: Rendering Blog Post Excerpts with Twig\nDESCRIPTION: Demonstrates how to iterate over blog posts and display their excerpts using Twig syntax.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/templates.rst#2025-04-22_snippet_11\n\nLANGUAGE: twig\nCODE:\n```\n<p>{{ post.excerpt }}</p>\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Dispatching a Custom Event Instance in PHP\nDESCRIPTION: Demonstrates how to instantiate a custom event object (`OrderPlacedEvent`) with necessary data (an `Order` object) and dispatch it using the `dispatch()` method of an event dispatcher instance (`$dispatcher`). This triggers all registered listeners for the `OrderPlacedEvent`.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/event_dispatcher.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Acme\\Store\\Event\\OrderPlacedEvent;\nuse Acme\\Store\\Order;\n\n// the order is somehow created or retrieved\n$order = new Order();\n// ...\n\n// creates the OrderPlacedEvent and dispatches it\n$event = new OrderPlacedEvent($order);\n$dispatcher->dispatch($event);\n```\n\n----------------------------------------\n\nTITLE: Inlining CSS Styles in Email Templates\nDESCRIPTION: Example of using the inline_css Twig filter to automatically convert style tags into inline style attributes, which is necessary for many email clients like Gmail.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_47\n\nLANGUAGE: html+twig\nCODE:\n```\n{% apply inline_css %}\n    <style>\n        {# here, define your CSS styles as usual #}\n        h1 {\n            color: #333;\n        }\n    </style>\n\n    <h1>Welcome {{ email.toName }}!</h1>\n    {# ... #}\n{% endapply %}\n```\n\n----------------------------------------\n\nTITLE: Rendering Controllers or URIs with Twig\nDESCRIPTION: The `render` function executes a sub-request to a given internal URI or controller reference and returns the response content. It accepts the `uri` (string or ControllerReference) and an optional `options` array, which can specify the rendering `strategy` (e.g., 'inline', 'esi'). This is commonly used for embedding controller output within templates.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#2025-04-22_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ render(uri, options = []) }}\n```\n\n----------------------------------------\n\nTITLE: Checking if Submit Button Was Clicked in Symfony Form\nDESCRIPTION: Demonstrates how to check if a specific submit button was used to submit the form using the isClicked() method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/submit.rst#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nif ($form->get('save')->isClicked()) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Running AssetMapper Cache Clear Command\nDESCRIPTION: Shows the command to clear the AssetMapper cache, forcing a recalculation of all file contents. This is useful when changes are not being detected automatically.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/asset_mapper.rst#2025-04-22_snippet_49\n\nLANGUAGE: terminal\nCODE:\n```\n$ php bin/console cache:clear\n```\n\n----------------------------------------\n\nTITLE: Creating Product Entity with File Upload Support\nDESCRIPTION: Defines a Product entity class with a property to store the filename of an uploaded brochure. Uses Doctrine ORM annotations for database mapping.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/controller/upload_file.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Entity;\n\nuse Doctrine\\ORM\\Mapping as ORM;\n\nclass Product\n{\n    // ...\n\n    #[ORM\\Column(type: 'string')]\n    private string $brochureFilename;\n\n    public function getBrochureFilename(): string\n    {\n        return $this->brochureFilename;\n    }\n\n    public function setBrochureFilename(string $brochureFilename): self\n    {\n        $this->brochureFilename = $brochureFilename;\n\n        return $this;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Progress Bar Placeholders in PHP/Symfony\nDESCRIPTION: Shows how to define custom placeholders for progress bars, both globally and per instance.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/helpers/progressbar.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nProgressBar::setPlaceholderFormatterDefinition(\n    'remaining_steps',\n    function (ProgressBar $progressBar, OutputInterface $output): int {\n        return $progressBar->getMaxSteps() - $progressBar->getProgress();\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Getting MIME Types from File Extension with Symfony Mime MimeTypes (PHP)\nDESCRIPTION: Shows how to use the `Symfony\\Component\\Mime\\MimeTypes` class's `getMimeTypes()` method to get an array of possible MIME types associated with a given file extension (e.g., 'js', 'apk'). The first MIME type in the returned array is the preferred one.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/mime.rst#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$types = $mimeTypes->getMimeTypes('js');\n// $types = ['application/javascript', 'application/x-javascript', 'text/javascript']\n$types = $mimeTypes->getMimeTypes('apk');\n// $types = ['application/vnd.android.package-archive']\n```\n\n----------------------------------------\n\nTITLE: Using render_esi in Twig Templates\nDESCRIPTION: Twig template example showing how to embed content via ESI tags using the render_esi() function. This can include content either via a controller reference or a URL.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/http_cache/esi.rst#2025-04-22_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{# templates/static/about.html.twig #}\n\n{# you can use a controller reference #}\n{{ render_esi(controller('App\\\\Controller\\\\NewsController::latest', { 'maxPerPage': 5 })) }}\n\n{# ... or a URL #}\n{{ render_esi(url('latest_news', { 'maxPerPage': 5 })) }}\n```\n\n----------------------------------------\n\nTITLE: Using GreaterThanOrEqual with DateTime (PHP Attributes)\nDESCRIPTION: Example showing how to use the GreaterThanOrEqual constraint with DateTime objects to ensure a delivery date is at least the current day using PHP attributes.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/GreaterThanOrEqual.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Order.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Order\n{\n    #[Assert\\GreaterThanOrEqual('today')]\n    protected \\DateTimeInterface $deliveryDate;\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of url() Function in Twig\nDESCRIPTION: This example shows generating URLs for the 'app_blog' route. It demonstrates creating a full absolute URL ('http://example.org/blog/3') and a scheme-relative URL ('//example.org/blog/3') by setting the `schemeRelative` flag.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#2025-04-22_snippet_22\n\nLANGUAGE: twig\nCODE:\n```\n{# consider that the app defines an 'app_blog' route with the path '/blog/{page}' #}\n\n{{ url(name = 'app_blog', parameters = {page: 3}, schemeRelative = false) }}\n{# output: http://example.org/blog/3 #}\n\n{{ url(name = 'app_blog', parameters = {page: 3}, schemeRelative = true) }}\n{# output: //example.org/blog/3 #}\n```\n\n----------------------------------------\n\nTITLE: Extending a Class and Overriding Options Configuration in PHP\nDESCRIPTION: This PHP code defines a `GoogleMailer` class that extends `Mailer`. It overrides the `configureOptions` method to first call the parent's configuration (`parent::configureOptions`) and then uses `setDefaults` again to override specific options ('host', 'encryption') with Google-specific values.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/options_resolver.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// ...\nclass GoogleMailer extends Mailer\n{\n    public function configureOptions(OptionsResolver $resolver): void\n    {\n        parent::configureOptions($resolver);\n\n        $resolver->setDefaults([\n            'host' => 'smtp.google.com',\n            'encryption' => 'ssl',\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Preferred User Language in Symfony Controller\nDESCRIPTION: Uses the Request object to determine the user's preferred language based on supported locales.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/translation.rst#2025-04-22_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n// get the Request object somehow (e.g. as a controller argument)\n$request = ...\n// pass an array of the locales (their script and region parts are optional) supported\n// by your application and the method returns the best locale for the current user\n$locale = $request->getPreferredLanguage(['pt', 'fr_Latn_CH', 'en_US'] );\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Data Collector in Symfony PHP\nDESCRIPTION: This example demonstrates how to create a custom data collector for the Symfony Profiler. It extends AbstractDataCollector and collects information about the HTTP request method and acceptable content types.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/profiler.rst#2025-04-22_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\n// src/DataCollector/RequestCollector.php\nnamespace App\\DataCollector;\n\nuse Symfony\\Bundle\\FrameworkBundle\\DataCollector\\AbstractDataCollector;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass RequestCollector extends AbstractDataCollector\n{\n    public function collect(Request $request, Response $response, ?\\Throwable $exception = null): void\n    {\n        $this->data = [\n            'method' => $request->getMethod(),\n            'acceptable_content_types' => $request->getAcceptableContentTypes(),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Highlighting Constructor Type-Hint for Autowiring Logic in PHP\nDESCRIPTION: This snippet isolates the constructor of the `TwitterClient` class to emphasize the `Rot13Transformer` type-hint. Symfony's autowiring system inspects this type-hint and looks for a service definition whose ID matches the fully qualified class name (`App\\Util\\Rot13Transformer`) to inject the correct dependency.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/autowiring.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// src/Service/TwitterClient.php\nnamespace App\\Service;\n\n// ...\nuse App\\Util\\Rot13Transformer;\n\nclass TwitterClient\n{\n    // ...\n\n    public function __construct(\n        private Rot13Transformer $transformer,\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching Stream Contents to Emails in Symfony Mailer\nDESCRIPTION: Shows how to attach contents from a stream directly to an email using the DataPart constructor.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_32\n\nLANGUAGE: PHP\nCODE:\n```\n$email = (new Email())\n    // ...\n    ->addPart(new DataPart(fopen('/path/to/documents/contract.doc', 'r')))\n;\n```\n\n----------------------------------------\n\nTITLE: Parsing Property Types and Descriptions with PhpDocExtractor (Symfony PHP)\nDESCRIPTION: This PHP snippet exemplifies the instantiation and usage of Symfony\\Component\\PropertyInfo\\Extractor\\PhpDocExtractor, which extracts detailed type and description metadata from doc comments using phpDocumentor. The example shows how to retrieve types, as well as short and long descriptions, and access the original docblock. The phpdocumentor/reflection-docblock library must be installed for this extractor to function.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/property_info.rst#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\PropertyInfo\\Extractor\\PhpDocExtractor;\\n\\n$phpDocExtractor = new PhpDocExtractor();\\n\\n// Type information.\\n$phpDocExtractor->getTypes($class, $property);\\n// Description information.\\n$phpDocExtractor->getShortDescription($class, $property);\\n$phpDocExtractor->getLongDescription($class, $property);\\n$phpDocExtractor->getDocBlock($class, $property);\\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Individual Query Parameters using get() in PHP\nDESCRIPTION: Explains how to retrieve specific query string parameters from the `Request` object using the `get()` method on the `query` property (an `InputBag` instance). It also shows how to provide a default value if the parameter doesn't exist.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// the query string is '?foo=bar'\n\n$request->query->get('foo');\n// returns 'bar'\n\n$request->query->get('bar');\n// returns null\n\n$request->query->get('bar', 'baz');\n// returns 'baz'\n```\n\n----------------------------------------\n\nTITLE: Debugging Emails in Symfony Mailer\nDESCRIPTION: Shows how to access debug information for sent emails by using TransportInterface instead of MailerInterface.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_39\n\nLANGUAGE: PHP\nCODE:\n```\n-use Symfony\\Component\\Mailer\\MailerInterface;\n+use Symfony\\Component\\Mailer\\Transport\\TransportInterface;\n // ...\n\n class MailerController extends AbstractController\n {\n     #[Route('/email')]\n-    public function sendEmail(MailerInterface $mailer): Response\n+    public function sendEmail(TransportInterface $mailer): Response\n     {\n         $email = (new Email())\n             // ...\n\n         $sentEmail = $mailer->send($email);\n\n         // ...\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Configuration Class with TreeBuilder in Symfony (PHP)\nDESCRIPTION: Defines a PHP class implementing ConfigurationInterface to construct and return a TreeBuilder for validating hierarchical configuration. Depends on Symfony\\Component\\Config\\Definition\\Builder\\TreeBuilder and ConfigurationInterface. The method getConfigTreeBuilder should instantiate the TreeBuilder, optionally add child nodes or constraints, and return it for usage during configuration processing. Inputs are configuration arrays; output is a validated configuration tree.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/config/definition.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace Acme\\DatabaseConfiguration;\n\nuse Symfony\\Component\\Config\\Definition\\Builder\\TreeBuilder;\nuse Symfony\\Component\\Config\\Definition\\ConfigurationInterface;\n\nclass DatabaseConfiguration implements ConfigurationInterface\n{\n    public function getConfigTreeBuilder(): TreeBuilder\n    {\n        $treeBuilder = new TreeBuilder('database');\n\n        // ... add node definitions to the root of the tree\n        // $treeBuilder->getRootNode()->...\n\n        return $treeBuilder;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Enforcing HTTPS via access_control in YAML\nDESCRIPTION: This YAML configuration snippet demonstrates how to enforce the HTTPS protocol for specific URL paths within a Symfony application using the `access_control` section of the security configuration. It sets `requires_channel` to `https` for paths starting with `/secure` (requiring `ROLE_ADMIN`), `/login` (public access), and all other paths (`^/`).\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/force_https.rst#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\nsecurity:\n    # ...\n\n    access_control:\n        - { path: '^/secure', roles: ROLE_ADMIN, requires_channel: https }\n        - { path: '^/login', roles: PUBLIC_ACCESS, requires_channel: https }\n        # catch all other URLs\n        - { path: '^/', roles: PUBLIC_ACCESS, requires_channel: https }\n```\n\n----------------------------------------\n\nTITLE: Handling MessageEvent in Symfony Notifier\nDESCRIPTION: PHP code demonstrating how to set up an event listener for MessageEvent to execute code before a notification message is sent.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/notifier.rst#2025-04-22_snippet_37\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Notifier\\Event\\MessageEvent;\n\n$dispatcher->addListener(MessageEvent::class, function (MessageEvent $event): void {\n    // gets the message instance\n    $message = $event->getMessage();\n\n    // log something\n    $this->logger(sprintf('Message with subject: %s will be send to %s', $message->getSubject(), $message->getRecipientId()));\n});\n```\n\n----------------------------------------\n\nTITLE: Evaluating Pre-Parsed Expressions in PHP\nDESCRIPTION: Shows that the `evaluate()` method can accept a `ParsedExpression` object directly, which is obtained from the `parse()` method. This avoids reparsing the expression string, potentially improving performance if the same expression is evaluated multiple times.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/expression_language.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// ...\n\n// the parse() method returns a ParsedExpression\n$expression = $expressionLanguage->parse('1 + 4', []);\n\nvar_dump($expressionLanguage->evaluate($expression)); // prints 5\n```\n\n----------------------------------------\n\nTITLE: Creating Form without Data Class in Symfony Controller\nDESCRIPTION: Demonstrates how to create and handle a basic contact form that returns array data instead of mapping to an object. Shows form creation, handling, and data retrieval.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/without_class.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function contact(Request $request): Response\n{\n    $defaultData = ['message' => 'Type your message here'];\n    $form = $this->createFormBuilder($defaultData)\n        ->add('name', TextType::class)\n        ->add('email', EmailType::class)\n        ->add('message', TextareaType::class)\n        ->add('send', SubmitType::class)\n        ->getForm();\n\n    $form->handleRequest($request);\n\n    if ($form->isSubmitted() && $form->isValid()) {\n        // data is an array with \"name\", \"email\", and \"message\" keys\n        $data = $form->getData();\n    }\n\n    // ... render the form\n}\n```\n\n----------------------------------------\n\nTITLE: Dumping PHP Array with Inline Level 1 in PHP\nDESCRIPTION: Shows how to use the second argument (`inline`) of `Yaml::dump` to control the output format. Setting `inline` to 1 causes arrays nested deeper than level 1 to be rendered inline.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/yaml.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\necho Yaml::dump($array, 1);\n```\n\n----------------------------------------\n\nTITLE: Configuring Symfony Routes in Separate PHP File\nDESCRIPTION: Defines routes in a separate configuration file, allowing for better separation of concerns.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/create_framework/routing.rst#2025-04-22_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Routing;\n\n$routes = new Routing\\RouteCollection();\n$routes->add('hello', new Routing\\Route('/hello/{name}', ['name' => 'World']));\n$routes->add('bye', new Routing\\Route('/bye'));\n\nreturn $routes;\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Cookies and Retrieving Raw/Values (Symfony BrowserKit, PHP)\nDESCRIPTION: Shows multiple ways to iterate over all cookies using CookieJar, retrieving all cookie objects, their values, and raw values scoped to a given URL. Requires Acme\\Client and symfony/browser-kit. Utilizes foreach loops for collection processing.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/browser_kit.rst#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Acme\\Client;\\n\\n// Make a request\\n$client = new Client();\\n$crawler = $client->request('GET', '/');\\n\\n// Get the cookie Jar\\n$cookieJar = $client->getCookieJar();\\n\\n// Get array with all cookies\\n$cookies = $cookieJar->all();\\nforeach ($cookies as $cookie) {\\n    // ...\\n}\\n\\n// Get all values\\n$values = $cookieJar->allValues('http://symfony.com');\\nforeach ($values as $value) {\\n    // ...\\n}\\n\\n// Get all raw values\\n$rawValues = $cookieJar->allRawValues('http://symfony.com');\\nforeach ($rawValues as $rawValue) {\\n    // ...\\n}\n```\n\n----------------------------------------\n\nTITLE: Sodium Marshaller for Encrypted Caching\nDESCRIPTION: Implementation of SodiumMarshaller for encrypting cached data using Sodium cryptography.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/cache/adapters/redis_adapter.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$encryptionKeys = [sodium_crypto_box_keypair()];\n$marshaller = new SodiumMarshaller($encryptionKeys);\n\n$cache = new RedisAdapter($redis, 'secure_namespace', 3600, $marshaller);\n\n$item = $cache->getItem('secure_key');\n$item->set('confidential_data');\n$cache->save($item);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Trigger Class in PHP\nDESCRIPTION: Shows how to create a custom trigger by implementing TriggerInterface to schedule tasks with special rules, such as excluding holidays.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/scheduler.rst#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n// src/Scheduler/Trigger/NewUserWelcomeEmailHandler.php\nnamespace App\\Scheduler\\Trigger;\n\nclass ExcludeHolidaysTrigger implements TriggerInterface\n{\n    public function __construct(private TriggerInterface $inner)\n    {\n    }\n\n    // use this method to give a nice displayable name to\n    // identify your trigger (it eases debugging)\n    public function __toString(): string\n    {\n        return $this->inner.' (except holidays)';\n    }\n\n    public function getNextRunDate(\\DateTimeImmutable $run): ?\\DateTimeImmutable\n    {\n        if (!$nextRun = $this->inner->getNextRunDate($run)) {\n            return null;\n        }\n\n        // loop until you get the next run date that is not a holiday\n        while ($this->isHoliday($nextRun)) {\n            $nextRun = $this->inner->getNextRunDate($nextRun);\n        }\n\n        return $nextRun;\n    }\n\n    private function isHoliday(\\DateTimeImmutable $timestamp): bool\n    {\n        // add some logic to determine if the given $timestamp is a holiday\n        // return true if holiday, false otherwise\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Email Transports in PHP\nDESCRIPTION: PHP configuration for setting up multiple mailer transports with environment variables.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_64\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/mailer.php\nuse function Symfony\\Component\\DependencyInjection\\Loader\\Configurator\\env;\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework): void {\n    $framework->mailer()\n        ->transport('main', env('MAILER_DSN'))\n        ->transport('alternative', env('MAILER_DSN_IMPORTANT'))\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Workflow in a Class Using Dependency Injection\nDESCRIPTION: Demonstrates how to inject and use a workflow within a class using Symfony's dependency injection and service autowiring. It shows both standard injection and injection using the Target attribute.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/workflow.rst#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Entity\\BlogPost;\nuse Symfony\\Component\\Workflow\\WorkflowInterface;\n\nclass MyClass\n{\n    public function __construct(\n        // Symfony will inject the 'blog_publishing' workflow configured before\n        private WorkflowInterface $blogPublishingWorkflow,\n    ) {\n    }\n\n    public function toReview(BlogPost $post): void\n    {\n        // Update the currentState on the post\n        try {\n            $this->blogPublishingWorkflow->apply($post, 'to_review');\n        } catch (LogicException $exception) {\n            // ...\n        }\n        // ...\n    }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Entity\\BlogPost;\nuse Symfony\\Component\\DependencyInjection\\Attribute\\Target;\nuse Symfony\\Component\\Workflow\\WorkflowInterface;\n\nclass MyClass\n{\n    public function __construct(\n        #[Target('blog_publishing')]\n        private WorkflowInterface $workflow\n    ) {\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Executing a Process with Automatic Exception on Failure in PHP\nDESCRIPTION: Illustrates the use of the `mustRun()` method, which executes the process synchronously like `run()` but automatically throws a `ProcessFailedException` if the command exits with a non-zero status code. This simplifies error handling for commands expected to succeed. Depends on the Symfony Process component.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/process.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Process\\Exception\\ProcessFailedException;\nuse Symfony\\Component\\Process\\Process;\n\n$process = new Process(['ls', '-lsa']);\n\ntry {\n    $process->mustRun();\n\n    echo $process->getOutput();\n} catch (ProcessFailedException $exception) {\n    echo $exception->getMessage();\n}\n```\n\n----------------------------------------\n\nTITLE: Using Wildcards in Search Paths with Symfony Finder in PHP\nDESCRIPTION: Shows how to use the `*` wildcard character within the `in()` method to specify directory patterns. The Finder will search within all directories that match the given pattern.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/finder.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$finder->in('src/Symfony/*/*/Resources');\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom Authenticator in XML\nDESCRIPTION: Shows how to enable the custom `ApiKeyAuthenticator` within the `main` firewall in a Symfony application using XML configuration. The authenticator class is specified within a `<custom-authenticator>` tag inside the `<firewall>` element.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/custom_authenticator.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/security.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<srv:container xmlns=\"http://symfony.com/schema/dic/security\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:srv=\"http://symfony.com/schema/dic/services\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/security\n        https://symfony.com/schema/dic/security/security-1.0.xsd\">\n\n    <config>\n        <!-- ... -->\n\n        <firewall name=\"main\">\n            <custom-authenticator>App\\Security\\ApiKeyAuthenticator</custom-authenticator>\n        </firewall>\n    </config>\n</srv:container>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cache Item Properties\nDESCRIPTION: Example showing how to retrieve the key and value of a cache item using getter methods.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/cache/cache_items.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$cacheItem = $cache->getItem('exchange_rate');\n// ...\n$key = $cacheItem->getKey();\n$value = $cacheItem->get();\n```\n\n----------------------------------------\n\nTITLE: Handling Kernel Events with EventSubscriberInterface - PHP\nDESCRIPTION: Shows how the Kernel class can implement EventSubscriberInterface to handle events like KernelEvents::EXCEPTION directly. The kernel uses MicroKernelTrait and defines event handling logic inside an onKernelException method. Requires symfony/event-dispatcher, appropriate event and response classes, and the custom App\\Exception\\Danger exception. This approach automatically registers the kernel as an event subscriber when MicroKernelTrait is used.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/micro_kernel_trait.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// ...\nuse App\\Exception\\Danger;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\nuse Symfony\\Component\\HttpKernel\\Event\\ExceptionEvent;\nuse Symfony\\Component\\HttpKernel\\KernelEvents;\n\nclass Kernel extends BaseKernel implements EventSubscriberInterface\n{\n    use MicroKernelTrait;\n\n    // ...\n\n    public function onKernelException(ExceptionEvent $event): void\n    {\n        if ($event->getThrowable() instanceof Danger) {\n            $event->setResponse(new Response('It\\'s dangerous to go alone. Take this ⚔'));\n        }\n    }\n\n    public static function getSubscribedEvents(): array\n    {\n        return [\n            KernelEvents::EXCEPTION => 'onKernelException',\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Searching FTP Locations with Symfony Finder in PHP\nDESCRIPTION: Shows how to use the Finder component to search within remote locations accessible via PHP's URL-style protocol wrappers, such as FTP (`ftp://`). A trailing slash is required when specifying the FTP root directory.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/finder.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// always add a trailing slash when looking for in the FTP root dir\n$finder->in('ftp://example.com/');\n```\n\nLANGUAGE: php\nCODE:\n```\n// you can also look for in a FTP directory\n$finder->in('ftp://example.com/pub/');\n```\n\n----------------------------------------\n\nTITLE: Debugging Event Listeners for kernel.exception in Symfony Console\nDESCRIPTION: This command uses the Symfony console to debug event listeners registered for the kernel.exception event. It displays the listeners and their priorities, helping developers understand the order of execution and attached listeners for exception handling.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/events.rst#2025-04-22_snippet_7\n\nLANGUAGE: terminal\nCODE:\n```\n$ php bin/console debug:event-dispatcher kernel.exception\n```\n\n----------------------------------------\n\nTITLE: Configuring Blog Publishing Workflow in YAML\nDESCRIPTION: YAML configuration for a blog publishing workflow with places, transitions, and marking store settings.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/workflow.rst#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/workflow.yaml\nframework:\n    workflows:\n        blog_publishing:\n            type: 'workflow' # or 'state_machine'\n            audit_trail:\n                enabled: true\n            marking_store:\n                type: 'method'\n                property: 'currentPlace'\n            supports:\n                - App\\Entity\\BlogPost\n            initial_marking: draft\n            places:          # defining places manually is optional\n                - draft\n                - reviewed\n                - rejected\n                - published\n            transitions:\n                to_review:\n                    from: draft\n                    to:   reviewed\n                publish:\n                    from: reviewed\n                    to:   published\n                reject:\n                    from: reviewed\n                    to:   rejected\n```\n\n----------------------------------------\n\nTITLE: Adding Field-Level Constraints in Symfony Form\nDESCRIPTION: Shows how to add validation constraints directly to individual form fields using the constraints option. Includes examples of Length and NotBlank constraints.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/without_class.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function buildForm(FormBuilderInterface $builder, array $options): void\n{\n    $builder\n        ->add('firstName', TextType::class, [\n            'constraints' => new Length(min: 3),\n        ])\n        ->add('lastName', TextType::class, [\n            'constraints' => [\n                new NotBlank(),\n                new Length(min: 3),\n            ],\n        ])\n    ;\n```\n\n----------------------------------------\n\nTITLE: Overriding Service Definitions in XML\nDESCRIPTION: Example showing how service definitions are replaced when overriding in XML configuration. When the same service ID is defined twice, the original definition is lost and completely replaced.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/service_decoration.rst#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsd=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsd:schemaLocation=\"http://symfony.com/schema/dic/services https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"App\\Mailer\"/>\n\n        <!-- this replaces the old App\\Mailer definition with the new\n             one, the old definition is lost -->\n        <service id=\"App\\Mailer\" class=\"App\\NewMailer\"/>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Form Type Guessing in Symfony Forms\nDESCRIPTION: This code illustrates how Symfony can guess form field types based on validation constraints by omitting the field type or passing null as the second argument to add(). This example shows the necessary imports for form types that might be used.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/forms.rst#2025-04-22_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n// src/Form/Type/TaskType.php\nnamespace App\\Form\\Type;\n\nuse Symfony\\Component\\Form\\AbstractType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\DateType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\SubmitType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\TextType;\n```\n\n----------------------------------------\n\nTITLE: Custom Event Class for Pre-Method Execution\nDESCRIPTION: Definition of a BeforeSendMailEvent class that holds subject and message properties with getters and setters, allowing event listeners to access and modify the data before the actual method executes.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/event_dispatcher.rst#2025-04-22_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n// src/Event/BeforeSendMailEvent.php\nnamespace App\\Event;\n\nuse Symfony\\Contracts\\EventDispatcher\\Event;\n\nclass BeforeSendMailEvent extends Event\n{\n    public function __construct(\n        private string $subject,\n        private string $message,\n    ) {\n    }\n\n    public function getSubject(): string\n    {\n        return $this->subject;\n    }\n\n    public function setSubject(string $subject): string\n    {\n        $this->subject = $subject;\n    }\n\n    public function getMessage(): string\n    {\n        return $this->message;\n    }\n\n    public function setMessage(string $message): void\n    {\n        $this->message = $message;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Doctrine Entity Listener in XML\nDESCRIPTION: Shows how to configure a Doctrine entity listener using XML. This example sets up a service for the UserChangedNotifier and tags it as an entity listener.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine/events.rst#2025-04-22_snippet_6\n\nLANGUAGE: XML\nCODE:\n```\n<!-- config/services.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:doctrine=\"http://symfony.com/schema/dic/doctrine\">\n    <services>\n        <!-- ... -->\n\n        <service id=\"App\\EventListener\\UserChangedNotifier\">\n            <tag name=\"doctrine.orm.entity_listener\"\n                event=\"postUpdate\"\n                entity=\"App\\Entity\\User\"\n                lazy=\"true\"\n                entity_manager=\"custom\"\n                method=\"checkUserChanges\"/>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Constraint Class in PHP\nDESCRIPTION: This snippet shows how to create a custom constraint class by extending Symfony's base Constraint class. It includes options for the constraint and demonstrates how to use PHP attributes.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/validation/custom_constraint.rst#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n// src/Validator/ContainsAlphanumeric.php\nnamespace App\\Validator;\n\nuse Symfony\\Component\\Validator\\Constraint;\n\n#[\\Attribute]\nclass ContainsAlphanumeric extends Constraint\n{\n    public string $message = 'The string \"{{ string }}\" contains an illegal character: it can only contain letters or numbers.';\n    public string $mode = 'strict';\n\n    // all configurable options must be passed to the constructor\n    public function __construct(?string $mode = null, ?string $message = null, ?array $groups = null, $payload = null)\n    {\n        parent::__construct([], $groups, $payload);\n\n        $this->mode = $mode ?? $this->mode;\n        $this->message = $message ?? $this->message;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony Webhook Component via Composer\nDESCRIPTION: Command to install the Symfony Webhook component using Composer package manager.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/webhook.rst#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ composer require symfony/webhook\n```\n\n----------------------------------------\n\nTITLE: Adding Logger Service to Service Subscriber\nDESCRIPTION: Example showing how to include an additional service (LoggerInterface) in a Service Subscriber implementation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/service_subscribers_locators.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Log\\LoggerInterface;\n\npublic static function getSubscribedServices(): array\n{\n    return [\n        // ...\n        LoggerInterface::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Including VCS Files in Search with Symfony Finder in PHP\nDESCRIPTION: Explains how to override the default behavior of ignoring Version Control System (VCS) metadata files (like those used by Git or Mercurial). Calling `ignoreVCS(false)` includes these files in the search results.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/finder.rst#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$finder->ignoreVCS(false);\n```\n\n----------------------------------------\n\nTITLE: Creating a Default PropertyAccessor Instance (PHP)\nDESCRIPTION: Demonstrates how to instantiate the `PropertyAccessor` using the static factory method `PropertyAccess::createPropertyAccessor()`. This provides the entry point for using the component's features.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/property_access.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\PropertyAccess\\PropertyAccess;\n\n$propertyAccessor = PropertyAccess::createPropertyAccessor();\n```\n\n----------------------------------------\n\nTITLE: Parsing and Querying Accept Headers with AcceptHeader (Symfony, PHP)\nDESCRIPTION: Shows how to use Symfony's AcceptHeader utility class to parse and query details from Accept and related Accept-* headers in HTTP requests. Requires the AcceptHeader class from Symfony and typically a Request object providing header values. Typical operations include determining which content types, languages, charsets or encodings are accepted, checking for specific items, retrieving attributes (like charset), and reading quality preferences. Inputs are Accept* header strings, outputs are ordered lists or AcceptHeaderItem objects.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\HttpFoundation\\AcceptHeader;\n\n$acceptHeader = AcceptHeader::fromString($request->headers->get('Accept'));\nif ($acceptHeader->has('text/html')) {\n    $item = $acceptHeader->get('text/html');\n    $charset = $item->getAttribute('charset', 'utf-8');\n    $quality = $item->getQuality();\n}\n\n// Accept header items are sorted by descending quality\n$acceptHeaders = AcceptHeader::fromString($request->headers->get('Accept'))\n    ->all();\n```\n\nLANGUAGE: php\nCODE:\n```\n$acceptHeader = 'text/plain;q=0.5, text/html, text/*;q=0.8, */*;q=0.3';\n$accept = AcceptHeader::fromString($acceptHeader);\n\n$quality = $accept->get('text/xml')->getQuality(); // $quality = 0.8\n$quality = $accept->get('application/xml')->getQuality(); // $quality = 0.3\n```\n\n----------------------------------------\n\nTITLE: Configuring CamelCase to snake_case Name Converter in PHP\nDESCRIPTION: PHP configuration for setting up the CamelCase to snake_case name converter in the Symfony Serializer.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer.rst#2025-04-22_snippet_33\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/serializer.php\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework): void {\n    $framework->serializer()\n        ->nameConverter('serializer.name_converter.camel_case_to_snake_case')\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Removing Cache Items with PSR-6 in Symfony PHP\nDESCRIPTION: Shows how to remove cache items using PSR-6 methods in Symfony, including deleteItem(), deleteItems(), and clear() methods.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/cache/cache_pools.rst#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n// ...\n$isDeleted = $cache->deleteItem('user_'.$userId);\n\n// ...\n$areDeleted = $cache->deleteItems(['category1', 'category2']);\n\n// ...\n$cacheIsEmpty = $cache->clear();\n```\n\n----------------------------------------\n\nTITLE: Configuring Length Constraint with PHP Attributes\nDESCRIPTION: Demonstrates how to use the Length constraint on a property using PHP attributes in a Symfony entity class. It sets minimum and maximum length requirements with custom error messages.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Length.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Participant.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Participant\n{\n    #[Assert\\Length(\n        min: 2,\n        max: 50,\n        minMessage: 'Your first name must be at least {{ limit }} characters long',\n        maxMessage: 'Your first name cannot be longer than {{ limit }} characters',\n    )]\n    protected string $firstName;\n}\n```\n\n----------------------------------------\n\nTITLE: Alternative Prepending Using Extension Method\nDESCRIPTION: Example showing how to prepend configuration using the extension method with the prepend parameter.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/bundles/prepend_extension.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\DependencyInjection\\ContainerBuilder;\nuse Symfony\\Component\\DependencyInjection\\Loader\\Configurator\\ContainerConfigurator;\nuse Symfony\\Component\\HttpKernel\\Bundle\\AbstractBundle;\n\nclass FooBundle extends AbstractBundle\n{\n    public function prependExtension(ContainerConfigurator $containerConfigurator, ContainerBuilder $containerBuilder): void\n    {\n        // ...\n\n        $containerConfigurator->extension('framework', [\n            'cache' => ['prefix_seed' => 'foo/bar'],\n        ], prepend: true);\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Debugging Asset Mappings\nDESCRIPTION: Terminal command to view all mapped assets in the application, showing paths and filesystem locations.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/asset_mapper.rst#2025-04-22_snippet_4\n\nLANGUAGE: terminal\nCODE:\n```\n$ php bin/console debug:asset-map\n```\n\n----------------------------------------\n\nTITLE: Triggering the Symfony kernel.terminate Event in PHP\nDESCRIPTION: This PHP snippet illustrates the sequence for triggering the `kernel.terminate` event in Symfony. After the `Response` object (`$response`) has been sent to the client via `$response->send()`, the `$kernel->terminate()` method is invoked with the original `Request` and final `Response`. This mechanism enables performing tasks like sending emails or logging after the client has received the response, provided the underlying server environment (e.g., PHP-FPM, FrankenPHP) supports background processing post-response and the kernel implements `TerminableInterface`.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/http_kernel.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// sends the headers and echoes the content\n$response->send();\n\n// triggers the kernel.terminate event\n$kernel->terminate($request, $response);\n```\n\n----------------------------------------\n\nTITLE: Implementing IBAN Validation with PHP Code\nDESCRIPTION: Example showing how to programmatically add IBAN validation using PHP code in the Transaction entity class through the loadValidatorMetadata method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Iban.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Transaction.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Transaction\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('bankAccountNumber', new Assert\\Iban(\n            message: 'This is not a valid International Bank Account Number (IBAN).',\n        ));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading the Entire Contents of a File using Symfony Filesystem (PHP)\nDESCRIPTION: This example shows how to use the readFile() method from Symfony 7.1's Filesystem component to read the full contents of a file into a string. Unlike PHP's native file_get_contents, this method throws exceptions if the file is not readable or if a directory path is given by mistake. Prerequisites: Symfony\\Component\\Filesystem\\Filesystem, version 7.1 or later. Parameters: a readable file path. Returns: file contents as a string; exception on error.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/filesystem.rst#2025-04-22_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$contents = $filesystem->readFile('/some/path/to/file.txt');\n```\n\n----------------------------------------\n\nTITLE: Validating Collection Elements with PHP loadValidatorMetadata\nDESCRIPTION: Using the loadValidatorMetadata method to apply the Collection constraint to an array property, allowing for programmatic configuration of validation rules.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Collection.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Author.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Author\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('profileData', new Assert\\Collection(\n            fields: [\n                'personal_email' => new Assert\\Email(),\n                'short_bio' => [\n                    new Assert\\NotBlank(),\n                    new Assert\\Length([\n                        'max' => 100,\n                        'maxMessage' => 'Your short bio is too long!',\n                    ]),\n                ],\n            ],\n            allowMissingFields: true,\n        ));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Filtering with Closure in Symfony Finder\nDESCRIPTION: Shows how to implement custom filtering logic using a closure function that receives each file as an SplFileInfo object and returns false to exclude it from results.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/finder.rst#2025-04-22_snippet_33\n\nLANGUAGE: php\nCODE:\n```\n$filter = function (\\SplFileInfo $file)\n{\n    if (strlen($file) > 10) {\n        return false;\n    }\n};\n\n$finder->files()->filter($filter);\n```\n\n----------------------------------------\n\nTITLE: Loading Validator Metadata in PHP\nDESCRIPTION: This PHP snippet demonstrates how to load validator metadata for a User class using the loadValidatorMetadata method. It includes property constraints, a getter constraint, and group sequence definition.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/validation/sequence_provider.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/User.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass User\n{\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('username', new Assert\\NotBlank());\n        $metadata->addPropertyConstraint('password', new Assert\\NotBlank());\n\n        $metadata->addGetterConstraint('passwordSafe', new Assert\\IsTrue(\n            message: 'The password cannot match your first name',\n            groups: ['Strict'],\n        ));\n\n        $metadata->setGroupSequence(['User', 'Strict']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting a Cache Pool into a Symfony Service Constructor\nDESCRIPTION: This PHP code shows injecting a custom cache pool ('custom_thing.cache') into a service's constructor using autowiring in Symfony. Type-hinting the constructor argument `$customThingCache` with `CacheInterface` allows Symfony's dependency injection container to provide the corresponding cache pool service.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/cache.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// in a service\npublic function __construct(private CacheInterface $customThingCache)\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Applying IsFalse Constraint Using PHP Attributes\nDESCRIPTION: Example of using PHP attributes to apply the IsFalse constraint to a method that checks for invalid states, with a custom error message.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/IsFalse.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Author.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Author\n{\n    #[Assert\\IsFalse(\n        message: \"You've entered an invalid state.\"\n    )]\n    public function isStateInvalid(): bool\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling a Doctrine Listener with PHP Attributes\nDESCRIPTION: This code demonstrates how to enable a Doctrine listener using the #[AsDoctrineListener] PHP attribute. The attribute specifies the event type, priority, and connection name to be used by the listener.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine/events.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// src/EventListener/SearchIndexer.php\nnamespace App\\EventListener;\n\nuse Doctrine\\Bundle\\DoctrineBundle\\Attribute\\AsDoctrineListener;\nuse Doctrine\\ORM\\Events;\n\n#[AsDoctrineListener(event: Events::postPersist, priority: 500, connection: 'default')]\nclass SearchIndexer\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Country Code Existence using Symfony Intl in PHP\nDESCRIPTION: Illustrates how to check if a given ISO 3166-1 alpha-2 or alpha-3 country code is valid using the `Countries::exists()` and `Countries::alpha3CodeExists()` static methods. These methods return a boolean value and help prevent `MissingResourceException`.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/intl.rst#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$isValidCountry = Countries::exists($alpha2Code);\n```\n\nLANGUAGE: php\nCODE:\n```\n$isValidCountry = Countries::alpha3CodeExists($alpha3Code);\n```\n\n----------------------------------------\n\nTITLE: Adding Unmapped Fields to Symfony Forms\nDESCRIPTION: This example illustrates how to add unmapped fields to a Symfony form. It shows the addition of a checkbox field that is not mapped to the underlying object.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/forms.rst#2025-04-22_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n// ...\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\CheckboxType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\SubmitType;\nuse Symfony\\Component\\Form\\FormBuilderInterface;\n\nclass TaskType extends AbstractType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options): void\n    {\n        $builder\n            ->add('task')\n            ->add('dueDate')\n            ->add('agreeTerms', CheckboxType::class, ['mapped' => false])\n            ->add('save', SubmitType::class)\n        ;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dumping a PHP Array to a YAML File\nDESCRIPTION: Demonstrates converting a PHP array into its YAML string representation using `Yaml::dump`. The resulting YAML string is then written to a file using `file_put_contents`. The `Yaml::dump` method throws a `DumpException` on error.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/yaml.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Yaml\\Yaml;\n\n$array = [\n    'foo' => 'bar',\n    'bar' => ['foo' => 'bar', 'bar' => 'baz'],\n];\n\n$yaml = Yaml::dump($array);\n\nfile_put_contents('/path/to/file.yaml', $yaml);\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom Authenticator in PHP\nDESCRIPTION: Illustrates how to enable the custom `ApiKeyAuthenticator` within the `main` firewall in a Symfony application using PHP configuration. It uses the `SecurityConfig` object to define the firewall and adds the authenticator class to the `customAuthenticators` array.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/custom_authenticator.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/security.php\nuse App\\Security\\ApiKeyAuthenticator;\nuse Symfony\\Config\\SecurityConfig;\n\nreturn static function (SecurityConfig $security): void {\n    $security->enableAuthenticatorManager(true);\n    // ....\n\n    $security->firewall('main')\n        ->customAuthenticators([ApiKeyAuthenticator::class])\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Showing Default Symfony 4 Project Directory Structure (text)\nDESCRIPTION: Displays the recommended application directory structure for Symfony Flex projects, used in Symfony 4 and later. No dependencies required; this serves as reference for how to organize files and folders when upgrading and refactoring a project for Flex compatibility.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/flex.rst#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nyour-project/\\n├── assets/\\n├── bin/\\n│   └── console\\n├── config/\\n│   ├── bundles.php\\n│   ├── packages/\\n│   ├── routes.yaml\\n│   └── services.yaml\\n├── public/\\n│   └── index.php\\n├── src/\\n│   ├── ...\\n│   └── Kernel.php\\n├── templates/\\n├── tests/\\n├── translations/\\n├── var/\\n└── vendor/\n```\n\n----------------------------------------\n\nTITLE: Starting Symfony Local Web Server\nDESCRIPTION: Terminal command to start the Symfony Local Web Server for testing the PHP application.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/create_framework/introduction.rst#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ symfony server:start\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Monolog Email Error Handlers in YAML\nDESCRIPTION: Basic Monolog configuration in YAML format that sets up error email notifications using fingers_crossed, deduplication, and symfony_mailer handlers.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/logging/monolog_email.rst#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/prod/monolog.yaml\nmonolog:\n    handlers:\n        main:\n            type:         fingers_crossed\n            action_level: critical\n            handler:      deduplicated\n        deduplicated:\n            type:    deduplication\n            handler: symfony_mailer\n        symfony_mailer:\n            type:       symfony_mailer\n            from_email: 'error@example.com'\n            to_email:   'error@example.com'\n            subject:    'An Error Occurred! %%message%%'\n            level:      debug\n            formatter:  monolog.formatter.html\n            content_type: text/html\n```\n\n----------------------------------------\n\nTITLE: Handling File Upload in Symfony Controller\nDESCRIPTION: Shows how to process an uploaded file in a Symfony controller, including moving the file to a permanent location.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/file.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\HttpFoundation\\File\\UploadedFile;\n\npublic function upload(): Response\n{\n    // ...\n\n    if ($form->isSubmitted() && $form->isValid()) {\n        $someNewFilename = ...\n\n        $file = $form['attachment']->getData();\n        $file->move($directory, $someNewFilename);\n\n        // ...\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Serialization Context Inline to Symfony Serializer in PHP\nDESCRIPTION: This snippet demonstrates passing a custom context array directly to the serialize() call on a Symfony Serializer instance to, for example, skip null values during serialization for that specific call. This usage is transient: subsequent serialize() calls are not affected. It relies on the AbstractObjectNormalizer constant SKIP_NULL_VALUES.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer.rst#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Serializer\\Normalizer\\AbstractObjectNormalizer;\n\n// ...\n$serializer->serialize($person, 'json', [\n    AbstractObjectNormalizer::SKIP_NULL_VALUES => true\n]);\n\n// next calls to serialize() will NOT skip null values\n```\n\n----------------------------------------\n\nTITLE: Testing URL Availability in Symfony\nDESCRIPTION: A PHPUnit test class that performs smoke testing on application URLs. Uses data providers to test multiple endpoints and ensures they return successful responses.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/best_practices.rst#2025-04-22_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n// tests/ApplicationAvailabilityFunctionalTest.php\nnamespace App\\Tests;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Test\\WebTestCase;\n\nclass ApplicationAvailabilityFunctionalTest extends WebTestCase\n{\n    /**\n     * @dataProvider urlProvider\n     */\n    public function testPageIsSuccessful($url): void\n    {\n        $client = self::createClient();\n        $client->request('GET', $url);\n\n        $this->assertResponseIsSuccessful();\n    }\n\n    public function urlProvider(): \\Generator\n    {\n        yield ['/'];\n        yield ['/posts'];\n        yield ['/post/fixture-post-1'];\n        yield ['/blog/category/fixture-category'];\n        yield ['/archives'];\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Acquiring and Releasing a Semaphore - Symfony PHP\nDESCRIPTION: Shows acquiring a semaphore for a resource and releasing it after exclusive operations using SemaphoreFactory in PHP. Requires an initialized SemaphoreFactory as context. The 'createSemaphore' method creates a semaphore with a given name and process limit. The 'acquire' method attempts to lock the resource, returning true on success. After the protected operation, 'release' frees the semaphore. Input: Resource name, max processes. Output: None; controls access to a shared resource. Limit: Only up to the specified number of concurrent processes allowed.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/semaphore.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// ...\n$semaphore = $factory->createSemaphore('pdf-invoice-generation', 2);\n\nif ($semaphore->acquire()) {\n    // The resource \"pdf-invoice-generation\" is locked.\n    // Here you can safely compute and generate the invoice.\n\n    $semaphore->release();\n}\n```\n\n----------------------------------------\n\nTITLE: Using #[Required] Attribute for Autowiring Wither Methods in PHP\nDESCRIPTION: This PHP snippet shows how to use the `#[Required]` attribute on a wither method (`withLogger`) when autowiring is enabled. Symfony automatically detects the `static` (or `self`) return type and treats it as a wither method (returns clone), eliminating the need for manual configuration. A `@return $this` annotation can override this behavior.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/calls.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n#[Required]\npublic function withLogger(LoggerInterface $logger): static\n{\n    $new = clone $this;\n    $new->logger = $logger;\n\n    return $new;\n}\n```\n\n----------------------------------------\n\nTITLE: Slugger Implementation\nDESCRIPTION: Demonstrates the AsciiSlugger class for creating URL-safe slugs with custom character substitutions and locale support.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/string.rst#2025-04-22_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\String\\Slugger\\AsciiSlugger;\n\n$slugger = new AsciiSlugger();\n$slug = $slugger->slug('Wôrķšƥáçè ~~sèťtïñğš~~');\n// $slug = 'Workspace-settings'\n```\n\n----------------------------------------\n\nTITLE: Using Shortcut Functions for String Creation (PHP)\nDESCRIPTION: This snippet introduces specialized shortcut functions (b, u, s) provided by the Symfony String component to simplify the instantiation of different string types. By importing these functions, code readability and conciseness are improved. Depending on the input, b() and u() generate ByteString and UnicodeString respectively, while s() chooses between them based on contents.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/string.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// the b() function creates byte strings\nuse function Symfony\\Component\\String\\b;\n\n// both lines are equivalent\n$foo = new ByteString('hello');\n$foo = b('hello');\n\n// the u() function creates Unicode strings\nuse function Symfony\\Component\\String\\u;\n\n// both lines are equivalent\n$foo = new UnicodeString('hello');\n$foo = u('hello');\n\n// the s() function creates a byte string or Unicode string\n// depending on the given contents\nuse function Symfony\\Component\\String\\s;\n\n// creates a ByteString object\n$foo = s(\"\\xfe\\xff\");\n// creates a UnicodeString object\n$foo = s('अनुच्छेद');\n```\n\n----------------------------------------\n\nTITLE: Response Modification with kernel.response Event\nDESCRIPTION: Event handler that runs after a controller returns a response. It checks if the request has the auth_token attribute and if so, adds a custom X-CONTENT-HASH header to the response based on the content and token.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/event_dispatcher.rst#2025-04-22_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n// add the new use statement at the top of your file\nuse Symfony\\Component\\HttpKernel\\Event\\ResponseEvent;\n\npublic function onKernelResponse(ResponseEvent $event): void\n{\n    // check to see if onKernelController marked this as a token \"auth'ed\" request\n    if (!$token = $event->getRequest()->attributes->get('auth_token')) {\n        return;\n    }\n\n    $response = $event->getResponse();\n\n    // create a hash and set it as a response header\n    $hash = sha1($response->getContent().$token);\n    $response->headers->set('X-CONTENT-HASH', $hash);\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Uploaded File in Symfony Controller\nDESCRIPTION: Shows how to map an uploaded file to a controller argument using the MapUploadedFile attribute in a Symfony controller.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/controller.rst#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Controller;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\File\\UploadedFile;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Attribute\\MapUploadedFile;\nuse Symfony\\Component\\Routing\\Attribute\\Route;\n\nclass UserController extends AbstractController\n{\n    #[Route('/user/picture', methods: ['PUT'])]\n    public function changePicture(\n        #[MapUploadedFile] UploadedFile $picture,\n    ): Response {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling HTML5 Parsing with Symfony DomCrawler in PHP\nDESCRIPTION: Shows how to configure Symfony's DomCrawler to use an HTML5 parser provided by the masterminds/html5 library for parsing documents.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/dom_crawler.rst#2025-04-22_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\DomCrawler\\Crawler;\n\n$crawler = new Crawler(null, $uri, useHtml5Parser: true);\n```\n\n----------------------------------------\n\nTITLE: Validating Non-Empty Parameters in PHP\nDESCRIPTION: Demonstrates how to ensure essential parameters are not empty by using the parameterCannotBeEmpty method, which will throw an exception if the parameter is null, an empty string, or an empty array.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration.rst#2025-04-22_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n/** @var ContainerBuilder $container */\n$container->parameterCannotBeEmpty('app.private_key', 'Did you forget to set a value for the \"app.private_key\" parameter?');\n```\n\n----------------------------------------\n\nTITLE: Submitting Individual Form Fields in Symfony\nDESCRIPTION: This snippet demonstrates how to submit individual fields of a form by calling the submit() method directly on the field. This is useful for forms with nested fields.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/direct_submit.rst#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$form->get('firstName')->submit('Fabien');\n```\n\n----------------------------------------\n\nTITLE: Creating TaskType Form Class with CollectionType in PHP\nDESCRIPTION: Defines a form type for the Task entity, including a CollectionType field for tags using the TagType form.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/form_collections.rst#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n// src/Form/TaskType.php\nnamespace App\\Form;\n\nuse App\\Entity\\Task;\nuse Symfony\\Component\\Form\\AbstractType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\CollectionType;\nuse Symfony\\Component\\Form\\FormBuilderInterface;\nuse Symfony\\Component\\OptionsResolver\\OptionsResolver;\n\nclass TaskType extends AbstractType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options): void\n    {\n        $builder->add('description');\n\n        $builder->add('tags', CollectionType::class, [\n            'entry_type' => TagType::class,\n            'entry_options' => ['label' => false],\n        ]);\n    }\n\n    public function configureOptions(OptionsResolver $resolver): void\n    {\n        $resolver->setDefaults([\n            'data_class' => Task::class,\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: External JavaScript Mercure URL Configuration\nDESCRIPTION: Demonstrates how to expose Mercure URL for external JavaScript files using dedicated HTML elements and Stimulus integration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mercure.rst#2025-04-22_snippet_8\n\nLANGUAGE: html+twig\nCODE:\n```\n<script type=\"application/json\" id=\"mercure-url\">\n{{ mercure('https://example.com/books/1')|json_encode(constant('JSON_UNESCAPED_SLASHES') b-or constant('JSON_HEX_TAG'))|raw }}\n</script>\n\n<!-- with Stimulus -->\n<div {{ stimulus_controller('my-controller', {\n    mercureUrl: mercure('https://example.com/books/1'),\n}) }}>\n```\n\n----------------------------------------\n\nTITLE: Custom Validation with TranslatableMessage\nDESCRIPTION: Example of using TranslatableMessage in a custom validation callback.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/validation/translations.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Translation\\TranslatableMessage;\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Context\\ExecutionContextInterface;\n\n#[Assert\\Callback]\npublic function validate(ExecutionContextInterface $context, mixed $payload): void\n{\n    // somehow you have an array of \"fake names\"\n    $fakeNames = [/* ... */];\n\n    // check if the name is actually a fake name\n    if (in_array($this->getFirstName(), $fakeNames, true)) {\n        $context->buildViolation(new TranslatableMessage('author.name.fake', [], 'validators'))\n            ->atPath('firstName')\n            ->addViolation()\n        ;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP Client Service - Symfony - YAML\nDESCRIPTION: This YAML snippet defines service registrations for LDAP integration within a Symfony application using the ExtLdap Adapter. The configuration specifies connection parameters such as host, port, encryption, and LDAP-specific options (e.g., protocol version and referrals), mapping them to the Ldap and Adapter service definitions. Dependencies include having the symfony/ldap component installed and the PHP LDAP extension available. Inputs are host details and LDAP options; output is registered Symfony dependency injection services.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/ldap.rst#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\\nservices:\\n    Symfony\\Component\\Ldap\\Ldap:\\n        arguments: ['@Symfony\\Component\\Ldap\\Adapter\\ExtLdap\\Adapter']\\n        tags:\\n            - ldap\\n    Symfony\\Component\\Ldap\\Adapter\\ExtLdap\\Adapter:\\n        arguments:\\n            -   host: my-server\\n                port: 389\\n                encryption: tls\\n                options:\\n                    protocol_version: 3\\n                    referrals: false\\n\n```\n\n----------------------------------------\n\nTITLE: Creating Symfony Console Command with ConsoleLogger in PHP\nDESCRIPTION: This snippet shows how to create a Symfony Console command that uses the ConsoleLogger. It initializes the logger, creates a dependency that requires a PSR-3 logger, and executes the dependency's method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/logger.rst#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace Acme\\Console\\Command;\n\nuse Acme\\MyDependency;\nuse Symfony\\Component\\Console\\Attribute\\AsCommand;\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Logger\\ConsoleLogger;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n#[AsCommand(\n    name: 'my:command',\n    description: 'Use an external dependency requiring a PSR-3 logger'\n)]\nclass MyCommand extends Command\n{\n    protected function execute(InputInterface $input, OutputInterface $output): int\n    {\n        $logger = new ConsoleLogger($output);\n\n        $myDependency = new MyDependency($logger);\n        $myDependency->doStuff();\n\n        return Command::SUCCESS;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Files Based on .gitignore with Symfony Finder in PHP\nDESCRIPTION: Demonstrates how to make the Finder respect the rules defined in `.gitignore` files found within the search directory and its subdirectories. Calling `ignoreVCSIgnored(true)` excludes files and directories matching these Git ignore patterns.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/finder.rst#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n// excludes files/directories matching the .gitignore patterns\n$finder->ignoreVCSIgnored(true);\n```\n\n----------------------------------------\n\nTITLE: Configuring PropertyInfo Feature in Symfony Framework (YAML)\nDESCRIPTION: This code snippet shows how to enable the PropertyInfo feature in Symfony by updating the framework configuration in a YAML file. By setting the 'property_info' key to enabled, Symfony auto-registers the necessary extractors for entity metadata and property type extraction. This configuration is required for most automatic metadata extraction features in the PropertyInfo component.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/property_info.rst#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/framework.yaml\\nframework:\\n    property_info:\\n        enabled: true\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Constructor Injection in PHP Class\nDESCRIPTION: Example of constructor injection in a PHP class where a mailer service is injected through the constructor with type hinting for better safety.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/injection_types.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Mail/NewsletterManager.php\nnamespace App\\Mail;\n\n// ...\nclass NewsletterManager\n{\n    public function __construct(\n        private MailerInterface $mailer,\n    ) {\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ManyToOne Relationship with make:entity Command\nDESCRIPTION: Shows how to use the make:entity command to add a ManyToOne relationship between Product and Category entities.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine/associations.rst#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ php bin/console make:entity\n\nClass name of the entity to create or update (e.g. BraveChef):\n> Product\n\nNew property name (press <return> to stop adding fields):\n> category\n\nField type (enter ? to see all types) [string]:\n> relation\n\nWhat class should this entity be related to?:\n> Category\n\nRelation type? [ManyToOne, OneToMany, ManyToMany, OneToOne]:\n> ManyToOne\n\nIs the Product.category property allowed to be null (nullable)? (yes/no) [yes]:\n> no\n\nDo you want to add a new property to Category so that you can access/update\nProduct objects from it - e.g. $category->getProducts()? (yes/no) [yes]:\n> yes\n\nNew field name inside Category [products]:\n> products\n\nDo you want to automatically delete orphaned App\\Entity\\Product objects\n(orphanRemoval)? (yes/no) [no]:\n> no\n\nNew property name (press <return> to stop adding fields):\n>\n(press enter again to finish)\n```\n\n----------------------------------------\n\nTITLE: Configuring Front Controller with HttpKernel\nDESCRIPTION: Sets up the front controller with necessary components including routing, request handling, and event dispatching.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/create_framework/http_kernel_httpkernel_class.rst#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nrequire_once __DIR__.'/../vendor/autoload.php';\n\nuse Symfony\\Component\\EventDispatcher\\EventDispatcher;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\RequestStack;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel;\nuse Symfony\\Component\\Routing;\n\n$request = Request::createFromGlobals();\n$requestStack = new RequestStack();\n$routes = include __DIR__.'/../src/app.php';\n\n$context = new Routing\\RequestContext();\n$matcher = new Routing\\Matcher\\UrlMatcher($routes, $context);\n\n$controllerResolver = new HttpKernel\\Controller\\ControllerResolver();\n$argumentResolver = new HttpKernel\\Controller\\ArgumentResolver();\n\n$dispatcher = new EventDispatcher();\n$dispatcher->addSubscriber(new HttpKernel\\EventListener\\RouterListener($matcher, $requestStack));\n\n$framework = new Simplex\\Framework($dispatcher, $controllerResolver, $requestStack, $argumentResolver);\n\n$response = $framework->handle($request);\n$response->send();\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Trigger with RecurringMessage in PHP\nDESCRIPTION: Shows how to use a custom trigger with RecurringMessage to create scheduled tasks with custom logic.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/scheduler.rst#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nRecurringMessage::trigger(\n    new ExcludeHolidaysTrigger(\n        CronExpressionTrigger::fromSpec('@daily'),\n    ),\n    new SendDailySalesReports('...'),\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Mercure Hub in YAML\nDESCRIPTION: YAML configuration for setting up Mercure hub with environment variables and JWT options in Symfony.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mercure.rst#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/mercure.yaml\nmercure:\n    hubs:\n        default:\n            url: '%env(string:MERCURE_URL)%'\n            public_url: '%env(string:MERCURE_PUBLIC_URL)%'\n            jwt:\n                secret: '%env(string:MERCURE_JWT_SECRET)%'\n                publish: ['https://example.com/foo1', 'https://example.com/foo2']\n                subscribe: ['https://example.com/bar1', 'https://example.com/bar2']\n                algorithm: 'hmac.sha256'\n                provider: 'My\\Provider'\n                factory: 'My\\Factory'\n                value: 'my.jwt'\n```\n\n----------------------------------------\n\nTITLE: Changing Table Styles\nDESCRIPTION: Shows how to apply different built-in styles to the table, including default, markdown, compact, borderless, and box styles.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/helpers/table.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$table->setStyle('default');\n// or\n$table->setStyle('markdown');\n// or\n$table->setStyle('compact');\n// or\n$table->setStyle('borderless');\n// or\n$table->setStyle('box');\n$table->render();\n```\n\n----------------------------------------\n\nTITLE: Creating a Cache Chain in Symfony (YAML)\nDESCRIPTION: This YAML configuration demonstrates how to create a cache chain for the `my_cache_pool`. It lists multiple adapters (`cache.adapter.array`, `cache.adapter.apcu`, `cache.adapter.redis`) in order of preference (fastest to slowest). When storing, the item goes to all; when retrieving, it checks them sequentially. A default lifetime and Redis provider details are also specified.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/cache.rst#2025-04-22_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/cache.yaml\nframework:\n    cache:\n        pools:\n            my_cache_pool:\n                default_lifetime: 31536000  # One year\n                adapters:\n                  - cache.adapter.array\n                  - cache.adapter.apcu\n                  - {name: cache.adapter.redis, provider: 'redis://user:password@example.com'}\n```\n\n----------------------------------------\n\nTITLE: Using Expressions for Subject in #[IsGranted] Attribute (PHP)\nDESCRIPTION: Demonstrates using a Symfony `Expression` object for the `subject` argument within the `#[IsGranted]` attribute. This allows dynamically determining the object the permission check applies to. The example fetches a Post's author using an expression (`args[\"post\"].getAuthor()`) and compares it to the current user in the `attribute` expression (`user === subject`). Requires a `Post` entity, Symfony Security, ExpressionLanguage, and HTTP Foundation components.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/expressions.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/MyController.php\nnamespace App\\Controller;\n\nuse App\\Entity\\Post;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\ExpressionLanguage\\Expression;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Security\\Http\\Attribute\\IsGranted;\n\nclass MyController extends AbstractController\n{\n    #[IsGranted(\n        attribute: new Expression('user === subject'),\n        subject: new Expression('args[\"post\"].getAuthor()'),\n    )]\n    public function index(Post $post): Response\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Environment Variable Processor in PHP\nDESCRIPTION: Demonstrates how to create a custom environment variable processor in PHP. This example creates a 'lowercase' processor that converts the value to lowercase.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/env_var_processors.rst#2025-04-22_snippet_47\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\DependencyInjection\\EnvVarProcessorInterface;\n\nclass LowercasingEnvVarProcessor implements EnvVarProcessorInterface\n{\n    public function getEnv(string $prefix, string $name, \\Closure $getEnv): string\n    {\n        $env = $getEnv($name);\n\n        return strtolower($env);\n    }\n\n    public static function getProvidedTypes(): array\n    {\n        return [\n            'lowercase' => 'string',\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Working with Forms Using Symfony DomCrawler in PHP\nDESCRIPTION: Demonstrates how to select forms and buttons using selectButton and filter, and how to fill forms with data using associative arrays. The Form object exposes methods for extracting form metadata and generating correct submission URIs and HTTP methods, supporting button-specific attributes like formaction and formmethod.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/dom_crawler.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// button example: <button id=\"my-super-button\" type=\"submit\">My super button</button>\n\n// you can get button by its label\n$form = $crawler->selectButton('My super button')->form();\n\n// or by button id (#my-super-button) if the button doesn't have a label\n$form = $crawler->selectButton('my-super-button')->form();\n\n// or you can filter the whole form, for example a form has a class attribute: <form class=\"form-vertical\" method=\"POST\">\n$crawler->filter('.form-vertical')->form();\n\n// or \"fill\" the form fields with data\n$form = $crawler->selectButton('my-super-button')->form([\n    'name' => 'Ryan',\n]);\n```\n\nLANGUAGE: php\nCODE:\n```\n$uri = $form->getUri();\n$method = $form->getMethod();\n$name = $form->getName();\n```\n\n----------------------------------------\n\nTITLE: Initializing CombinedStore with UnanimousStrategy for Symfony Lock Component\nDESCRIPTION: Creates a CombinedStore instance with multiple stores and a UnanimousStrategy. This configuration requires the lock to be acquired in all stores.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/lock.rst#2025-04-22_snippet_26\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Lock\\Store\\CombinedStore;\nuse Symfony\\Component\\Lock\\Strategy\\UnanimousStrategy;\n\n$store = new CombinedStore($stores, new UnanimousStrategy());\n```\n\n----------------------------------------\n\nTITLE: Early Hints Implementation in Symfony Controller\nDESCRIPTION: Shows how to implement early hints in a Symfony controller to improve perceived performance by prefetching resources like CSS and JavaScript files.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/controller.rst#2025-04-22_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Controller;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Attribute\\Route;\nuse Symfony\\Component\\WebLink\\Link;\n\nclass HomepageController extends AbstractController\n{\n    #[Route(\"/\", name: \"homepage\")]\n    public function index(): Response\n    {\n        $response = $this->sendEarlyHints([\n            new Link(rel: 'preconnect', href: 'https://fonts.google.com'),\n            (new Link(href: '/style.css'))->withAttribute('as', 'style'),\n            (new Link(href: '/script.js'))->withAttribute('as', 'script'),\n        ]);\n\n        return $this->render('homepage/index.html.twig', response: $response);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Relative Path Between Two Absolute Paths (PHP)\nDESCRIPTION: Uses the `Filesystem::makePathRelative` method to calculate the relative path required to navigate from the second absolute path argument to the first absolute path argument.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/filesystem.rst#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n// returns '../'\n$filesystem->makePathRelative(\n    '/var/lib/symfony/src/Symfony/',\n    '/var/lib/symfony/src/Symfony/Component'\n);\n// returns 'videos/'\n$filesystem->makePathRelative('/tmp/videos', '/tmp');\n```\n\n----------------------------------------\n\nTITLE: Creating Custom YAML Configuration Loader in PHP\nDESCRIPTION: Example of implementing a custom YAML file loader by extending Symfony's FileLoader class. The loader can parse YAML files and supports recursive importing of additional resources.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/config/resources.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace Acme\\Config\\Loader;\n\nuse Symfony\\Component\\Config\\Loader\\FileLoader;\nuse Symfony\\Component\\Yaml\\Yaml;\n\nclass YamlUserLoader extends FileLoader\n{\n    public function load($resource, $type = null): void\n    {\n        $configValues = Yaml::parse(file_get_contents($resource));\n\n        // ... handle the config values\n\n        // maybe import some other resource:\n\n        // $this->import('extra_users.yaml');\n    }\n\n    public function supports($resource, $type = null): bool\n    {\n        return is_string($resource) && 'yaml' === pathinfo(\n            $resource,\n            PATHINFO_EXTENSION\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Serializing Objects with Groups in PHP\nDESCRIPTION: Demonstrates how to serialize objects using specific groups or all groups. This allows flexible control over which properties are included in the serialized output.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer.rst#2025-04-22_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n$json = $serializer->serialize(\n    $person,\n    'json',\n    ['groups' => 'public-view']\n);\n// $json contains {\"name\":\"Jane Doe\",\"sportsperson\":false}\n\n// you can also pass an array of groups\n$json = $serializer->serialize(\n    $person,\n    'json',\n    ['groups' => ['public-view', 'admin-view']]\n);\n// $json contains {\"name\":\"Jane Doe\",\"age\":32,\"sportsperson\":false}\n\n// or use the special \"*\" value to select all groups\n$json = $serializer->serialize(\n    $person,\n    'json',\n    ['groups' => '*']\n);\n// $json contains {\"name\":\"Jane Doe\",\"age\":32,\"sportsperson\":false}\n```\n\n----------------------------------------\n\nTITLE: Using #[Required] for Property Injection in PHP\nDESCRIPTION: Shows how to use the #[Required] attribute to autowire dependencies through public typed properties.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/autowiring.rst#2025-04-22_snippet_20\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace App\\Util;\n\nuse Symfony\\Contracts\\Service\\Attribute\\Required;\n\nclass Rot13Transformer\n{\n    #[Required]\n    public LoggerInterface $logger;\n\n    public function transform($value): void\n    {\n        $this->logger->info('Transforming '.$value);\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ChainAdapter with ApcuAdapter and FilesystemAdapter in PHP\nDESCRIPTION: Demonstrates how to create a chain adapter instance using ApcuAdapter (fastest) and FilesystemAdapter (slowest) storage engines. This combination provides a layered cache with different performance characteristics.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/cache/adapters/chain_adapter.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Cache\\Adapter\\ApcuAdapter;\nuse Symfony\\Component\\Cache\\Adapter\\ChainAdapter;\nuse Symfony\\Component\\Cache\\Adapter\\FilesystemAdapter;\n\n$cache = new ChainAdapter([\n    new ApcuAdapter(),\n    new FilesystemAdapter(),\n]);\n```\n\n----------------------------------------\n\nTITLE: Checking Locale Code Existence using Symfony Intl in PHP\nDESCRIPTION: Illustrates how to check if a given locale code is valid using the `Locales::exists()` static method. This returns a boolean and helps prevent `MissingResourceException` when requesting locale names.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/intl.rst#2025-04-22_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$isValidLocale = Locales::exists($localeCode);\n```\n\n----------------------------------------\n\nTITLE: Using SerializedName for Property Name Conversion in PHP\nDESCRIPTION: Demonstrates how to use the SerializedName attribute to change the name of serialized properties. This is useful for mapping between different naming conventions.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer.rst#2025-04-22_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n// src/Model/Person.php\nnamespace App\\Model;\n\nuse Symfony\\Component\\Serializer\\Attribute\\SerializedName;\n\nclass Person\n{\n    #[SerializedName('customer_name')]\n    private string $name;\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Filesystem and Creating a Directory (PHP)\nDESCRIPTION: Demonstrates basic usage of the Filesystem component. It imports necessary classes (`IOExceptionInterface`, `Filesystem`, `Path`), creates a `Filesystem` object, and uses `mkdir` to create a directory inside the system's temporary directory. The path is normalized using `Path::normalize`, and potential exceptions during directory creation are caught.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/filesystem.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Filesystem\\Exception\\IOExceptionInterface;\nuse Symfony\\Component\\Filesystem\\Filesystem;\nuse Symfony\\Component\\Filesystem\\Path;\n\n$filesystem = new Filesystem();\n\ntry {\n    $filesystem->mkdir(\n        Path::normalize(sys_get_temp_dir().'/'.random_int(0, 1000)),\n    );\n} catch (IOExceptionInterface $exception) {\n    echo \"An error occurred while creating your directory at \".$exception->getPath();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Twig Template Paths in YAML\nDESCRIPTION: Configures Twig template directories using YAML format. Demonstrates setting up template paths relative to project root with optional namespaces.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/templates.rst#2025-04-22_snippet_47\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/twig.yaml\ntwig:\n    # ...\n    paths:\n        'email/default/templates': ~\n        'backend/templates': ~\n```\n\n----------------------------------------\n\nTITLE: Getting File Extensions from MIME Type with Symfony Mime MimeTypes (PHP)\nDESCRIPTION: Shows how to use the `Symfony\\Component\\Mime\\MimeTypes` class's `getExtensions()` method to retrieve an array of possible file extensions associated with a given MIME type (e.g., 'application/javascript', 'image/jpeg'). The first extension in the returned array is the preferred one.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/mime.rst#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Mime\\MimeTypes;\n\n$mimeTypes = new MimeTypes();\n$exts = $mimeTypes->getExtensions('application/javascript');\n// $exts = ['js', 'jsm', 'mjs']\n$exts = $mimeTypes->getExtensions('image/jpeg');\n// $exts = ['jpeg', 'jpg', 'jpe']\n```\n\n----------------------------------------\n\nTITLE: Finding by Multiple Path Patterns with Symfony Finder in PHP\nDESCRIPTION: Demonstrates two ways to specify multiple path patterns for the search: either by chaining multiple calls to the `path()` method or by passing an array of patterns (strings or regexes) to a single `path()` call.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/finder.rst#2025-04-22_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n$finder->path('data')->path('foo/bar');\n```\n\nLANGUAGE: php\nCODE:\n```\n// same as above\n$finder->path(['data', 'foo/bar']);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Marking Store in PHP\nDESCRIPTION: This PHP class implements a custom marking store for a Symfony workflow. It demonstrates how to create a marking store that interacts with a BlogPost object to get and set the current place in the workflow.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/workflow.rst#2025-04-22_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Workflow\\MarkingStore;\n\nuse Symfony\\Component\\Workflow\\Marking;\nuse Symfony\\Component\\Workflow\\MarkingStore\\MarkingStoreInterface;\n\nfinal class BlogPostMarkingStore implements MarkingStoreInterface\n{\n    /**\n     * @param BlogPost $subject\n     */\n    public function getMarking(object $subject): Marking\n    {\n        return new Marking([$subject->getCurrentPlace() => 1]);\n    }\n\n    /**\n     * @param BlogPost $subject\n     */\n    public function setMarking(object $subject, Marking $marking, array $context = []): void\n    {\n        $marking = key($marking->getPlaces());\n        $subject->setCurrentPlace($marking);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fine-grained Form Field Rendering with Twig Functions\nDESCRIPTION: This snippet illustrates how to use form_label(), form_widget(), form_help(), and form_errors() Twig functions to fully customize the rendering of individual form fields.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/form_customization.rst#2025-04-22_snippet_2\n\nLANGUAGE: html+twig\nCODE:\n```\n<div class=\"form-control\">\n    <i class=\"fa fa-calendar\"></i> {{ form_label(form.dueDate) }}\n    {{ form_widget(form.dueDate) }}\n\n    <small>{{ form_help(form.dueDate) }}</small>\n\n    <div class=\"form-error\">\n        {{ form_errors(form.dueDate) }}\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack and Encore in webpack.config.js\nDESCRIPTION: Main configuration file for Webpack and Encore, setting up output paths, entry points, and various build features.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/installation.rst#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst Encore = require('@symfony/webpack-encore');\n\n// Manually configure the runtime environment if not already configured yet by the \"encore\" command.\n// It's useful when you use tools that rely on webpack.config.js file.\nif (!Encore.isRuntimeEnvironmentConfigured()) {\n    Encore.configureRuntimeEnvironment(process.env.NODE_ENV || 'dev');\n}\n\nEncore\n    // directory where compiled assets will be stored\n    .setOutputPath('public/build/')\n    // public path used by the web server to access the output path\n    .setPublicPath('/build')\n    // only needed for CDN's or sub-directory deploy\n    //.setManifestKeyPrefix('build/')\n\n    /*\n     * ENTRY CONFIG\n     *\n     * Each entry will result in one JavaScript file (e.g. app.js)\n     * and one CSS file (e.g. app.css) if your JavaScript imports CSS.\n     */\n    .addEntry('app', './assets/app.js')\n\n    // enables the Symfony UX Stimulus bridge (used in assets/bootstrap.js)\n    .enableStimulusBridge('./assets/controllers.json')\n\n    // When enabled, Webpack \"splits\" your files into smaller pieces for greater optimization.\n    .splitEntryChunks()\n\n    // will require an extra script tag for runtime.js\n    // but, you probably want this, unless you're building a single-page app\n    .enableSingleRuntimeChunk()\n\n    /*\n     * FEATURE CONFIG\n     *\n     * Enable & configure other features below. For a full\n     * list of features, see:\n     * https://symfony.com/doc/current/frontend.html#adding-more-features\n     */\n    .cleanupOutputBeforeBuild()\n    .enableBuildNotifications()\n    .enableSourceMaps(!Encore.isProduction())\n    // enables hashed filenames (e.g. app.abc123.css)\n    .enableVersioning(Encore.isProduction())\n\n    .configureBabel((config) => {\n        config.plugins.push('@babel/plugin-transform-class-properties');\n    })\n\n    // enables @babel/preset-env polyfills\n    .configureBabelPresetEnv((config) => {\n        config.useBuiltIns = 'usage';\n        config.corejs = 3;\n    })\n\n    // enables Sass/SCSS support\n    //.enableSassLoader()\n\n    // uncomment if you use TypeScript\n    //.enableTypeScriptLoader()\n\n    // uncomment if you use React\n    //.enableReactPreset()\n\n    // uncomment to get integrity=\"...\" attributes on your script & link tags\n    // requires WebpackEncoreBundle 1.4 or higher\n    //.enableIntegrityHashes(Encore.isProduction())\n\n    // uncomment if you're having problems with a jQuery plugin\n    //.autoProvidejQuery()\n;\n\nmodule.exports = Encore.getWebpackConfig();\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Recipients to Emails\nDESCRIPTION: Examples of adding multiple recipients to an email using addTo(), addCc(), or addBcc() methods, or by passing multiple addresses to each method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n$email = (new Email())\n    ->to('foo@example.com')\n    ->addTo('bar@example.com')\n    ->cc('cc@example.com')\n    ->addCc('cc2@example.com')\n\n    // ...\n;\n```\n\n----------------------------------------\n\nTITLE: Defining Configuration Parameters - Symfony Service Container - YAML\nDESCRIPTION: This YAML snippet defines custom parameters for reuse in Symfony configuration files through the 'parameters' key. Supported value types include strings, booleans, arrays, binary values (base64-encoded), PHP constants, and enum cases. The intended use is to centralize and standardize repeated configuration values, while dependencies are Symfony's service container configuration capabilities.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration.rst#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\\nparameters:\\n    # the parameter name is an arbitrary string (the 'app.' prefix is recommended\\n    # to better differentiate your parameters from Symfony parameters).\\n    app.admin_email: 'something@example.com'\\n\\n    # boolean parameters\\n    app.enable_v2_protocol: true\\n\\n    # array/collection parameters\\n    app.supported_locales: ['en', 'es', 'fr']\\n\\n    # binary content parameters (encode the contents with base64_encode())\\n    app.some_parameter: !!binary VGhpcyBpcyBhIEJlbGwgY2hhciAH\\n\\n    # PHP constants as parameter values\\n    app.some_constant: !php/const GLOBAL_CONSTANT\\n    app.another_constant: !php/const App\\Entity\\BlogPost::MAX_ITEMS\\n\\n    # Enum case as parameter values\\n    app.some_enum: !php/enum App\\Enum\\PostState::Published\\n\\n# ...\n```\n\n----------------------------------------\n\nTITLE: Implementing an Interface in a Service Class (PHP)\nDESCRIPTION: This snippet shows the `Rot13Transformer` class being modified to implement the previously defined `TransformerInterface`. The class signature is updated using the `implements` keyword.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/autowiring.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// ...\nclass Rot13Transformer implements TransformerInterface\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Files by Content (Regex) with Symfony Finder in PHP\nDESCRIPTION: Shows how to find files whose content matches a given regular expression using the `contains()` method. The example uses a case-insensitive regex.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/finder.rst#2025-04-22_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$finder->files()->contains('/lorem\\s+ipsum$/i');\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Mechanisms in Symfony\nDESCRIPTION: Sample configuration showing various authentication mechanisms available in Symfony's security system, such as x509, form_login, and http_basic options.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/security.rst#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\nsecurity:\n    # ...\n    firewalls:\n        main:\n            # ...\n                x509:\n                    # ...\n                remote_user:\n                    # ...\n                guard:\n                    # ...\n                form_login:\n                    # ...\n                form_login_ldap:\n                    # ...\n                json_login:\n                    # ...\n                http_basic:\n                    # ...\n                http_basic_ldap:\n                    # ...\n                http_digest:\n                    # ...\n```\n\n----------------------------------------\n\nTITLE: Dumping an Object with Circular References using VarDumper (PHP)\nDESCRIPTION: Illustrates how VarDumper handles circular references within objects. A property (`aCircularReference`) is set to reference the object itself. In the dump output, such references are represented using `#number` (the object's internal handle) to avoid infinite recursion.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/var_dumper.rst#2025-04-22_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nclass ReferenceExample\n{\n    public string $info = \"Circular and sibling references are displayed as `#number`.\\nHovering them highlights all instances in the same dump.\\n\";\n}\n$var = new ReferenceExample();\n$var->aCircularReference = $var;\ndump($var);\n```\n\n----------------------------------------\n\nTITLE: Testing with Symfony Profiler\nDESCRIPTION: Example functional test using the Symfony Profiler to monitor database queries and framework performance metrics.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/testing/profiling.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// tests/Controller/LuckyControllerTest.php\nnamespace App\\Tests\\Controller;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Test\\WebTestCase;\n\nclass LuckyControllerTest extends WebTestCase\n{\n    public function testRandomNumber(): void\n    {\n        $client = static::createClient();\n\n        // enable the profiler only for the next request (if you make\n        // new requests, you must call this method again)\n        // (it does nothing if the profiler is not available)\n        $client->enableProfiler();\n\n        $crawler = $client->request('GET', '/lucky/number');\n\n        // ... write some assertions about the Response\n\n        // check that the profiler is enabled\n        if ($profile = $client->getProfile()) {\n            // check the number of requests\n            $this->assertLessThan(\n                10,\n                $profile->getCollector('db')->getQueryCount()\n            );\n\n            // check the time spent in the framework\n            $this->assertLessThan(\n                500,\n                $profile->getCollector('time')->getDuration()\n            );\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Adding Text Template to Templated Email\nDESCRIPTION: Example of modifying a TemplatedEmail to include a text version template in addition to the HTML template for email clients that prefer plain text.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_42\n\nLANGUAGE: php\nCODE:\n```\n+use Symfony\\Bridge\\Twig\\Mime\\TemplatedEmail;\n\n $email = (new TemplatedEmail())\n     // ...\n\n     ->htmlTemplate('emails/signup.html.twig')\n+     ->textTemplate('emails/signup.txt.twig')\n     // ...\n ;\n```\n\n----------------------------------------\n\nTITLE: Checking User Permissions with is_granted() in Twig\nDESCRIPTION: The `is_granted` function checks if the currently authenticated user has the specified security `role` or attribute. An optional `object` can be passed as context, which will be provided to any relevant security voters for more complex authorization decisions. It returns `true` if access is granted, `false` otherwise.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#2025-04-22_snippet_11\n\nLANGUAGE: twig\nCODE:\n```\n{{ is_granted(role, object = null) }}\n```\n\n----------------------------------------\n\nTITLE: Defining another Service Requiring Configuration (GreetingCardManager) in PHP\nDESCRIPTION: This PHP snippet defines the `GreetingCardManager` class, similar to `NewsletterManager`. It also implements `EmailFormatterAwareInterface` and needs its enabled formatters set via the `setEnabledFormatters` method. It demonstrates having multiple services that require similar configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/configurators.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// src/Mail/GreetingCardManager.php\nnamespace App\\Mail;\n\nclass GreetingCardManager implements EmailFormatterAwareInterface\n{\n    private array $enabledFormatters;\n\n    public function setEnabledFormatters(array $enabledFormatters): void\n    {\n        $this->enabledFormatters = $enabledFormatters;\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Transport Factory\nDESCRIPTION: Example implementation of a custom transport factory for supporting custom DSNs by extending AbstractTransportFactory and implementing required methods.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n// src/Mailer/AcmeTransportFactory.php\nfinal class AcmeTransportFactory extends AbstractTransportFactory\n{\n    public function create(Dsn $dsn): TransportInterface\n    {\n        // parse the given DSN, extract data/credentials from it\n        // and then, create and return the transport\n    }\n\n    protected function getSupportedSchemes(): array\n    {\n        // this supports DSN starting with `acme://`\n        return ['acme'];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom Handler for VarDumper (PHP)\nDESCRIPTION: Provides an example of advanced VarDumper usage by setting a custom handler using `VarDumper::setHandler`. This allows intercepting calls to the global `dump()` function. The handler function receives the variable to be dumped, creates a `VarCloner`, chooses a `Dumper` (either `CliDumper` or `HtmlDumper` based on the SAPI), and then uses the dumper to output the cloned variable representation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/var_dumper.rst#2025-04-22_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\VarDumper\\Cloner\\VarCloner;\nuse Symfony\\Component\\VarDumper\\Dumper\\CliDumper;\nuse Symfony\\Component\\VarDumper\\Dumper\\HtmlDumper;\nuse Symfony\\Component\\VarDumper\\VarDumper;\n\nVarDumper::setHandler(function (mixed $var): ?string {\n    $cloner = new VarCloner();\n    $dumper = 'cli' === PHP_SAPI ? new CliDumper() : new HtmlDumper();\n\n    return $dumper->dump($cloner->cloneVar($var));\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring UniqueEntity Constraint with PHP Attributes in Symfony\nDESCRIPTION: Example of applying the UniqueEntity constraint to a User entity using PHP attributes to ensure a unique email field. It demonstrates how to set up the constraint at the class level and associate it with a specific field.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/UniqueEntity.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/User.php\nnamespace App\\Entity;\n\nuse Doctrine\\ORM\\Mapping as ORM;\n\n// DON'T forget the following use statement!!!\nuse Symfony\\Bridge\\Doctrine\\Validator\\Constraints\\UniqueEntity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\n#[ORM\\Entity]\n#[UniqueEntity('email')]\nclass User\n{\n    #[ORM\\Column(name: 'email', type: 'string', length: 255, unique: true)]\n    #[Assert\\Email]\n    protected string $email;\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Mercure Updates with EventSource in Twig\nDESCRIPTION: Example of subscribing to Mercure updates using EventSource in a Twig template. Shows basic event handling and data parsing.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mercure.rst#2025-04-22_snippet_7\n\nLANGUAGE: html+twig\nCODE:\n```\n<script>\nconst eventSource = new EventSource(\"{{ mercure('https://example.com/books/1')|escape('js') }}\");\neventSource.onmessage = event => {\n    // Will be called every time an update is published by the server\n    console.log(JSON.parse(event.data));\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Cache Control for Session Requests in Symfony\nDESCRIPTION: Demonstrates how to disable Symfony's default behavior that makes session requests uncacheable. Sets an internal header that instructs Symfony not to modify the cache control headers of the response.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/http_cache.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\HttpKernel\\EventListener\\AbstractSessionListener;\n\n$response->headers->set(AbstractSessionListener::NO_AUTO_CACHE_CONTROL_HEADER, 'true');\n```\n\n----------------------------------------\n\nTITLE: Implementing Redis Tag-Aware Cache Adapter\nDESCRIPTION: Setup of RedisTagAwareAdapter for efficient tag-based cache invalidation using Redis as the backend storage.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/cache/adapters/redis_adapter.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Cache\\Adapter\\RedisAdapter;\nuse Symfony\\Component\\Cache\\Adapter\\RedisTagAwareAdapter;\n\n$client = RedisAdapter::createConnection('redis://localhost');\n$cache = new RedisTagAwareAdapter($client);\n```\n\n----------------------------------------\n\nTITLE: Obtaining and Dumping Expression AST in PHP\nDESCRIPTION: Shows how to retrieve the Abstract Syntax Tree (AST) of a parsed expression using the `getNodes()` method on the result of `parse()`. The AST provides a structured representation of the expression, which can be inspected (e.g., using `var_dump()`) or converted to a string representation using its `dump()` method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/expression_language.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\ExpressionLanguage\\ExpressionLanguage;\n\n$ast = (new ExpressionLanguage())\n    ->parse('1 + 2', [])\n    ->getNodes()\n;\n\n// dump the AST nodes for inspection\nvar_dump($ast);\n\n// dump the AST nodes as a string representation\n$astAsString = $ast->dump();\n```\n\n----------------------------------------\n\nTITLE: Custom Query Builder for EntityType in Symfony Forms\nDESCRIPTION: Shows how to use a custom query builder with the EntityType to filter and order the entities displayed in the form field.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/entity.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Entity\\User;\nuse Doctrine\\ORM\\EntityRepository;\nuse Doctrine\\ORM\\QueryBuilder;\nuse Symfony\\Bridge\\Doctrine\\Form\\Type\\EntityType;\n// ...\n\n$builder->add('users', EntityType::class, [\n    'class' => User::class,\n    'query_builder' => function (EntityRepository $er): QueryBuilder {\n        return $er->createQueryBuilder('u')\n            ->orderBy('u.username', 'ASC');\n    },\n    'choice_label' => 'username',\n]);\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Processes in PHP\nDESCRIPTION: Illustrates multiple ways to pass environment variables to a subprocess: via the `Process` constructor's third argument, the `fromShellCommandline()` factory's third argument, or the `run()`/`start()`/`mustRun()` methods' second argument. These variables are set specifically for the child process's environment. Depends on the Symfony Process component.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/process.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$process = new Process(['...'], null, ['ENV_VAR_NAME' => 'value']);\n$process = Process::fromShellCommandline('...', null, ['ENV_VAR_NAME' => 'value']);\n$process->run(null, ['ENV_VAR_NAME' => 'value']);\n```\n\n----------------------------------------\n\nTITLE: Configuring Blog Publishing Workflow in PHP\nDESCRIPTION: PHP configuration for a blog publishing workflow with places, transitions, and marking store settings.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/workflow.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/workflow.php\nuse App\\Entity\\BlogPost;\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework): void {\n    $blogPublishing = $framework->workflows()->workflows('blog_publishing');\n    $blogPublishing\n        ->type('workflow') // or 'state_machine'\n        ->supports([BlogPost::class])\n        ->initialMarking(['draft']);\n\n    $blogPublishing->auditTrail()->enabled(true);\n    $blogPublishing->markingStore()\n        ->type('method')\n        ->property('currentPlace');\n\n    // defining places manually is optional\n    $blogPublishing->place()->name('draft');\n    $blogPublishing->place()->name('reviewed');\n    $blogPublishing->place()->name('rejected');\n    $blogPublishing->place()->name('published');\n\n    $blogPublishing->transition()\n        ->name('to_review')\n            ->from(['draft'])\n            ->to(['reviewed']);\n\n    $blogPublishing->transition()\n        ->name('publish')\n            ->from(['reviewed'])\n            ->to(['published']);\n\n    $blogPublishing->transition()\n        ->name('reject')\n            ->from(['reviewed'])\n            ->to(['rejected']);\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring PHPUnit Time-Sensitive Tests in XML\nDESCRIPTION: XML configuration for PHPUnit test listener setup with time-sensitive test handling. Specifies namespace configuration for time-sensitive components.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/phpunit_bridge.rst#2025-04-22_snippet_27\n\nLANGUAGE: xml\nCODE:\n```\n<!-- https://phpunit.de/manual/4.1/en/appendixes.configuration.html -->\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/4.1/phpunit.xsd\"\n>\n    <!-- ... -->\n    <listeners>\n        <listener class=\"Symfony\\Bridge\\PhpUnit\\SymfonyTestsListener\">\n            <arguments>\n                <array>\n                    <element key=\"time-sensitive\"><string>Symfony\\Component\\HttpFoundation</string></element>\n                </array>\n            </arguments>\n        </listener>\n    </listeners>\n</phpunit>\n```\n\n----------------------------------------\n\nTITLE: Checking for Required Options with OptionsResolver in PHP\nDESCRIPTION: This PHP snippet demonstrates using `OptionsResolver` methods within a subclass (`GoogleMailer`). `isRequired('host')` checks if the 'host' option is marked as required (inherited from the parent), and `getRequiredOptions()` retrieves an array containing the names of all required options.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/options_resolver.rst#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n// ...\nclass GoogleMailer extends Mailer\n{\n    public function configureOptions(OptionsResolver $resolver): void\n    {\n        parent::configureOptions($resolver);\n\n        if ($resolver->isRequired('host')) {\n            // ...\n        }\n\n        $requiredOptions = $resolver->getRequiredOptions();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Scheduling Recurring Messages with Cron Expressions in PHP\nDESCRIPTION: Demonstrates how to create a `RecurringMessage` using a standard cron expression via the `RecurringMessage::cron()` static method in PHP. The first argument is the cron expression string, and the second is the message object to be scheduled. Optionally, a `DateTimeZone` object can be provided as the third argument.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/scheduler.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nRecurringMessage::cron('* * * * *', new Message());\n\n// optionally you can define the timezone used by the cron expression\nRecurringMessage::cron('* * * * *', new Message(), new \\DateTimeZone('Africa/Malabo'));\n```\n\n----------------------------------------\n\nTITLE: Setting up Twig BodyRenderer for Symfony Mime outside Framework (PHP)\nDESCRIPTION: Demonstrates configuring a Twig environment with a `FilesystemLoader` and using `Symfony\\Bridge\\Twig\\Mime\\BodyRenderer` to render Twig templates into an `Email` object. This setup is necessary when not using the full Symfony framework where Twig might be pre-configured, allowing email content generation from templates.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/mime.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// ...\nuse Symfony\\Bridge\\Twig\\Mime\\BodyRenderer;\nuse Twig\\Environment;\nuse Twig\\Loader\\FilesystemLoader;\n\n// when using the Mime component inside a full-stack Symfony application, you\n// don't need to do this Twig setup. You only have to inject the 'twig' service\n$loader = new FilesystemLoader(__DIR__.'/templates');\n$twig = new Environment($loader);\n\n$renderer = new BodyRenderer($twig);\n// this updates the $email object contents with the result of rendering\n// the template defined earlier with the given context\n$renderer->render($email);\n```\n\n----------------------------------------\n\nTITLE: Sanitizing HTML in Twig Templates\nDESCRIPTION: Demonstrates how to use the sanitize_html Twig filter to sanitize HTML output in templates.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/html_sanitizer.rst#2025-04-22_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{{ post.body|sanitize_html }}\n\n{# you can also use a custom sanitizer (see below) #}\n{{ post.body|sanitize_html('app.post_sanitizer') }}\n```\n\n----------------------------------------\n\nTITLE: Applying Bootstrap 4 Form Theme to Specific Form in Twig\nDESCRIPTION: This Twig snippet demonstrates how to apply the Bootstrap 4 form theme to a specific form within a template, rather than globally.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/bootstrap4.rst#2025-04-22_snippet_4\n\nLANGUAGE: html+twig\nCODE:\n```\n{# ... #}\n{# this tag only applies to the forms defined in this template #}\n{% form_theme form 'bootstrap_4_layout.html.twig' %}\n\n{% block body %}\n    <h1>User Sign Up:</h1>\n    {{ form(form) }}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Creating and Injecting Cookies with CookieJar and Client (Symfony BrowserKit, PHP)\nDESCRIPTION: Describes how to manually instantiate Cookie objects, add them to a CookieJar, and inject the jar into the Client for subsequent requests. Requires symfony/browser-kit and Acme\\Client. Cookies are set with name, value, and expiration time.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/browser_kit.rst#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Acme\\Client;\\n\\n// create cookies and add to cookie jar\\n$cookie = new Cookie('flavor', 'chocolate', strtotime('+1 day'));\\n$cookieJar = new CookieJar();\\n$cookieJar->set($cookie);\\n\\n// create a client and set the cookies\\n$client = new Client([], null, $cookieJar);\\n// ...\n```\n\n----------------------------------------\n\nTITLE: Value Resolver Service Configuration in PHP\nDESCRIPTION: PHP configuration for registering the custom value resolver as a service\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/controller/value_resolver.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nuse App\\ValueResolver\\BookingIdValueResolver;\n\nreturn static function (ContainerConfigurator $containerConfigurator): void {\n    $services = $containerConfigurator->services();\n\n    $services->set(BookingIdValueResolver::class)\n        ->tag('controller.argument_value_resolver', ['name' => 'booking_id', 'priority' => 150])\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Using AsMonologProcessor Attribute for Monolog Processors in PHP\nDESCRIPTION: A simplified way to register Monolog processors using the #[AsMonologProcessor] attribute instead of service configuration. This attribute auto-registers the class as a processor, with optional channel, handler, and method parameters.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/logging/processors.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// src/Logger/SessionRequestProcessor.php\nnamespace App\\Logger;\n\nuse Monolog\\Attribute\\AsMonologProcessor;\n\n#[AsMonologProcessor]\nclass SessionRequestProcessor\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecating Configuration Options in Symfony\nDESCRIPTION: PHP code example showing how to mark configuration options as deprecated with custom messages.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/config/definition.rst#2025-04-22_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$rootNode\n    ->children()\n        ->integerNode('old_option')\n            // this outputs the following generic deprecation message:\n            // Since acme/package 1.2: The child node \"old_option\" at path \"...\" is deprecated.\n            ->setDeprecated('acme/package', '1.2')\n\n            // you can also pass a custom deprecation message (%node% and %path% placeholders are available):\n            ->setDeprecated(\n                'acme/package',\n                '1.2',\n                'The \"%node%\" option is deprecated. Use \"new_config_option\" instead.'\n            )\n        ->end()\n    ->end()\n;\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Firewalls for Separate Entry Points (XML)\nDESCRIPTION: This XML configuration illustrates how to define multiple firewalls to manage separate authentication mechanisms and entry points. The `api` firewall, matched by the `pattern=\"^/api/\"`, uses a `custom-authenticator` for API requests. The `main` firewall handles other requests using `form-login`. By using distinct firewalls based on URL patterns, Symfony directs users to the appropriate authentication method (e.g., API token challenge or login form redirect) without needing an explicit `entry-point` setting on each, as each firewall handles a specific authentication type. Access control rules map paths to required roles.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/entry_point.rst#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/security.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<srv:container xmlns=\"http://symfony.com/schema/dic/security\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:srv=\"http://symfony.com/schema/dic/services\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/security\n        https://symfony.com/schema/dic/security/security-1.0.xsd\">\n\n    <config>\n        <!-- ... -->\n        <firewall name=\"api\" pattern=\"^/api/\">\n            <custom-authenticator>App\\Security\\ApiTokenAuthenticator</custom-authenticator>\n        </firewall>\n\n        <firewall name=\"main\" anonymous=\"true\" lazy=\"true\">\n            <form-login/>\n        </firewall>\n\n        <rule path=\"^/login\" role=\"PUBLIC_ACCESS\"/>\n        <rule path=\"^/api\" role=\"ROLE_API_USER\"/>\n        <rule path=\"^/\" role=\"ROLE_USER\"/>\n    </config>\n</srv:container>\n```\n\n----------------------------------------\n\nTITLE: Invokable Controller Implementation\nDESCRIPTION: Example of an invokable controller using the __invoke() method following the ADR pattern.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/controller/service.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/Hello.php\nnamespace App\\Controller;\n\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Attribute\\Route;\n\n#[Route('/hello/{name}', name: 'hello')]\nclass Hello\n{\n    public function __invoke(string $name = 'World'): Response\n    {\n        return new Response(sprintf('Hello %s!', $name));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Cookies with ServerParameters During Requests (Symfony BrowserKit, PHP)\nDESCRIPTION: Explains how to directly inject cookies into HTTP requests using the serverParameters argument to the request method, either as Cookie objects or strings. Headers must be in FastCGI format (HTTP_COOKIE). Requires symfony/browser-kit and Acme\\Client.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/browser_kit.rst#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$client->request('GET', '/', [], [], [\\n    'HTTP_COOKIE' => new Cookie('flavor', 'chocolate', strtotime('+1 day')),\\n\\n    // you can also pass the cookie contents as a string\\n    'HTTP_COOKIE' => 'flavor=chocolate; expires=Sat, 11 Feb 2023 12:18:13 GMT; Max-Age=86400; path=/'\\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Symfony Service with Property Injection (YAML)\nDESCRIPTION: This YAML configuration defines a service named `app.newsletter_manager` for the class `App\\Mail\\NewsletterManager`. It uses the `properties` key to inject the service identified by `@mailer` into the public `mailer` property of the `app.newsletter_manager` service instance.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/injection_types.rst#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nservices:\n    # ...\n\n    app.newsletter_manager:\n        class: App\\Mail\\NewsletterManager\n        properties:\n            mailer: '@mailer'\n```\n\n----------------------------------------\n\nTITLE: Configuring Twig Template Paths in XML\nDESCRIPTION: XML configuration for defining additional template directories in Twig. Demonstrates setting up email and backend template paths with namespace support.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/twig.rst#2025-04-22_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/twig.xml -->\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:twig=\"http://symfony.com/schema/dic/twig\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/twig https://symfony.com/schema/dic/twig/twig-1.0.xsd\">\n\n    <twig:config>\n        <!-- ... -->\n        <twig:path>email/default/templates</twig:path>\n        <twig:path namespace=\"admin\">backend/templates</twig:path>\n    </twig:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Generating a Version 6 Reordered Time-Based UUID in PHP\nDESCRIPTION: Demonstrates creating a UUIDv6 using `Uuid::v6()`. This version rearranges UUIDv1 fields to be lexicographically sortable, which can improve database indexing efficiency compared to UUIDv1. The result is an instance of `Symfony\\Component\\Uid\\UuidV6`.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/uid.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Uid\\Uuid;\n\n// $uuid is an instance of Symfony\\Component\\Uid\\UuidV6\n$uuid = Uuid::v6();\n```\n\n----------------------------------------\n\nTITLE: Restricting Symfony Serialization Context by Groups with PHP Attributes\nDESCRIPTION: This set of PHP attributes configures the groups and context for serialization of the createdAt property in the Person model. It shows both a default context and a group-specific override using RFC3339 extended format. This is useful for controlling how an attribute is serialized based on the active serialization group, using Symfony's Groups and Context attributes.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer.rst#2025-04-22_snippet_21\n\nLANGUAGE: php-attributes\nCODE:\n```\n// src/Model/Person.php\n\n// ...\nuse Symfony\\Component\\Serializer\\Attribute\\Context;\nuse Symfony\\Component\\Serializer\\Attribute\\Groups;\nuse Symfony\\Component\\Serializer\\Normalizer\\DateTimeNormalizer;\n\nclass Person\n{\n    #[Groups(['extended'])]\n    #[Context([DateTimeNormalizer::FORMAT_KEY => \\DateTime::RFC3339])]\n    #[Context(\n        context: [DateTimeNormalizer::FORMAT_KEY => \\DateTime::RFC3339_EXTENDED],\n        groups: ['extended'],\n    )]\n    public \\DateTimeImmutable $createdAt;\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Access Denied Messages and Status Codes in Symfony\nDESCRIPTION: Example showing how to customize the access denied message and status code when using the IsGranted attribute in a controller. This changes the default 403 response to a custom message and status code.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/voters.rst#2025-04-22_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/PostController.php\n\n// ...\nuse Symfony\\Component\\Security\\Http\\Attribute\\IsGranted;\n\nclass PostController extends AbstractController\n{\n    #[Route('/posts/{id}', name: 'post_show')]\n    #[IsGranted('show', 'post', 'Post not found', 404)]\n    public function show(Post $post): Response\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Cache Item Expiration\nDESCRIPTION: Examples demonstrating how to set cache item expiration using both time intervals and specific dates.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/cache/cache_items.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$latestNews->expiresAfter(60);  // 60 seconds = 1 minute\n\n// this method also accepts \\DateInterval instances\n$latestNews->expiresAfter(DateInterval::createFromDateString('1 hour'));\n\n$mostPopularNews->expiresAt(new \\DateTime('tomorrow'));\n```\n\n----------------------------------------\n\nTITLE: Preparing Form Data for HTTP Requests with Symfony DomCrawler in PHP\nDESCRIPTION: Extracts necessary information from a form to prepare an HTTP POST request using Symfony's DomCrawler component.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/dom_crawler.rst#2025-04-22_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$uri = $form->getUri();\n$method = $form->getMethod();\n$values = $form->getValues();\n$files = $form->getFiles();\n\n// now use some HTTP client and post using this information\n```\n\n----------------------------------------\n\nTITLE: Dumping Multi-line Strings as Literal Blocks in PHP\nDESCRIPTION: Illustrates using the `Yaml::DUMP_MULTI_LINE_LITERAL_BLOCK` flag with `Yaml::dump`. This causes multi-line strings to be formatted using YAML's literal block style (`|`), preserving newlines and improving readability.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/yaml.rst#2025-04-22_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$string = [\"string\" => \"Multiple\\nLine\\nString\"];\n$yaml = Yaml::dump($string, 2, 4, Yaml::DUMP_MULTI_LINE_LITERAL_BLOCK);\necho $yaml;\n//  string: |\n//       Multiple\n//       Line\n//       String\n```\n\n----------------------------------------\n\nTITLE: Configuring Mailer Envelope with Allowed Recipients in PHP\nDESCRIPTION: PHP configuration for the mailer envelope that allows specifying both recipient redirection and exceptions through the allowedRecipients method, including regular expression patterns.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_74\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/mailer.php\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework): void {\n    // ...\n    $framework->mailer()\n        ->envelope()\n            ->recipients(['youremail@example.com'])\n            ->allowedRecipients([\n                'internal@example.com',\n                // you can also use regular expression to define allowed recipients\n                'internal-.*@example.(com|fr)',\n            ])\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing LockFactory with SemaphoreStore in PHP\nDESCRIPTION: Demonstrates the basic setup for using the Lock Component. It initializes a `SemaphoreStore`, which uses system semaphores for storing locks locally, and then creates a `LockFactory` instance configured to use this store. The factory is the main entry point for creating locks.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/lock.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Lock\\LockFactory;\nuse Symfony\\Component\\Lock\\Store\\SemaphoreStore;\n\n$store = new SemaphoreStore();\n$factory = new LockFactory($store);\n```\n\n----------------------------------------\n\nTITLE: Converting Relative Paths to Absolute URLs in Twig\nDESCRIPTION: The `absolute_url` function takes a relative `path` (which could be a simple string or the result of another function like `asset()`) and converts it into a full absolute URL, including the current request's scheme and host. It's useful for ensuring assets or links use absolute URLs when needed.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#2025-04-22_snippet_23\n\nLANGUAGE: twig\nCODE:\n```\n{{ absolute_url(path) }}\n```\n\n----------------------------------------\n\nTITLE: Defining Validation Metadata with Static Method (PHP)\nDESCRIPTION: Shows a User class implementing a static loadValidatorMetadata method to specify property-level validation rules. The method adds NotBlank and Length constraints to the 'name' property via the ClassMetadata API. Dependencies are symfony/validator and its Constraints sub-namespaces. The class expects Symfony to discover and invoke this static method to set up validation constraints as configured.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/validator/resources.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Validator\\Constraints as Assert;\\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\\n\\nclass User\\n{\\n    protected string $name;\\n\\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\\n    {\\n        $metadata->addPropertyConstraint('name', new Assert\\NotBlank());\\n        $metadata->addPropertyConstraint('name', new Assert\\Length(\\n            min: 5,\\n            max: 20,\\n        ));\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Adding FileType to Symfony Form Builder\nDESCRIPTION: Demonstrates how to add a file upload field to a Symfony form using the FileType class.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/file.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\FileType;\n// ...\n\n$builder->add('attachment', FileType::class);\n```\n\n----------------------------------------\n\nTITLE: Returning a Symfony Kernel Application from Runtime Closure (PHP)\nDESCRIPTION: This PHP snippet shows the standard approach where the closure in `public/index.php` returns an instance of `App\\Kernel`. The `SymfonyRuntime` recognizes this `HttpKernelInterface` and runs it as a typical Symfony web application.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/runtime.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// public/index.php\nuse App\\Kernel;\n\nrequire_once dirname(__DIR__).'/vendor/autoload_runtime.php';\n\nreturn static function (): Kernel {\n    return new Kernel('prod', false);\n};\n```\n\n----------------------------------------\n\nTITLE: Requiring All Properties When Deserializing in PHP with Symfony Serializer\nDESCRIPTION: Demonstrates how to use the REQUIRE_ALL_PROPERTIES option when deserializing JSON data to ensure all constructor arguments are provided, otherwise an exception is thrown.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer.rst#2025-04-22_snippet_58\n\nLANGUAGE: php\nCODE:\n```\n$data = ['firstName' => 'John'];\n$person = $serializer->deserialize($data, Person::class, 'json', [\n    AbstractNormalizer::REQUIRE_ALL_PROPERTIES => true,\n]);\n// throws Symfony\\Component\\Serializer\\Exception\\MissingConstructorArgumentException\n```\n\n----------------------------------------\n\nTITLE: Default YAML Date String Parsing (to Timestamp) in PHP\nDESCRIPTION: Shows the default behavior of `Yaml::parse` when encountering unquoted strings resembling ISO-8601 dates or date-times. They are automatically converted into Unix timestamps (integers).\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/yaml.rst#2025-04-22_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nYaml::parse('2016-05-27'); // 1464307200\n```\n\n----------------------------------------\n\nTITLE: Interfacing Symfony DomCrawler with PHP DOM Objects in PHP\nDESCRIPTION: Demonstrates how to use Symfony DomCrawler with native PHP DOM objects such as DOMDocument, DOMNodeList, and DOMNode. Methods like addDocument, addNodeList, addNodes, addNode, and add support direct manipulation and integration with standard PHP DOM classes for advanced DOM crawling.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/dom_crawler.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$domDocument = new \\DOMDocument();\n$domDocument->loadXml('<root><node/><node/></root>');\n$nodeList = $domDocument->getElementsByTagName('node');\n$node = $domDocument->getElementsByTagName('node')->item(0);\n\n$crawler->addDocument($domDocument);\n$crawler->addNodeList($nodeList);\n$crawler->addNodes([$node]);\n$crawler->addNode($node);\n$crawler->add($domDocument);\n```\n\n----------------------------------------\n\nTITLE: Configuring snake_case to CamelCase Name Converter in PHP\nDESCRIPTION: PHP configuration for setting up the snake_case to CamelCase name converter in the Symfony Serializer.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer.rst#2025-04-22_snippet_37\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/serializer.php\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework): void {\n    $framework->serializer()\n        ->nameConverter('serializer.name_converter.snake_case_to_camel_case')\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: PDF Controller with Lock Implementation\nDESCRIPTION: Example of implementing a lock in a Symfony controller to protect PDF generation\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/lock.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Controller;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Lock\\LockFactory;\n\nclass PdfController extends AbstractController\n{\n    #[Route('/download/terms-of-use.pdf')]\n    public function downloadPdf(LockFactory $factory, MyPdfGeneratorService $pdf): Response\n    {\n        $lock = $factory->createLock('pdf-creation');\n        $lock->acquire(true);\n\n        // heavy computation\n        $myPdf = $pdf->getOrCreatePdf();\n\n        $lock->release();\n\n        // ...\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating and Sending an HTTP Response in PHP with Symfony HttpFoundation\nDESCRIPTION: Demonstrates how to set content, status code, and headers for an HTTP response, and then send it to the client using Symfony's Response class.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/introduction/http_fundamentals.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$response->setContent('<html><body><h1>Hello world!</h1></body></html>');\n$response->setStatusCode(Response::HTTP_OK);\n\n// sets a HTTP response header\n$response->headers->set('Content-Type', 'text/html');\n\n// prints the HTTP headers followed by the content\n$response->send();\n```\n\n----------------------------------------\n\nTITLE: Named Connections in XML with useAttributeAsKey\nDESCRIPTION: XML configuration showing how to define named connections when useAttributeAsKey is implemented.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/config/definition.rst#2025-04-22_snippet_17\n\nLANGUAGE: xml\nCODE:\n```\n<connection name=\"sf_connection\"\n    table=\"symfony\" user=\"root\" password=\"null\"/>\n<connection name=\"default\"\n    table=\"foo\" user=\"root\" password=\"pa$$\"/>\n```\n\n----------------------------------------\n\nTITLE: Installing PHPUnit as a Development Dependency\nDESCRIPTION: This command installs PHPUnit version 9.6 or higher as a development dependency using Composer.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/create_framework/unit_testing.rst#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require --dev phpunit/phpunit:^9.6\n```\n\n----------------------------------------\n\nTITLE: Validating Collection Elements with PHP Attributes\nDESCRIPTION: Using PHP attributes to apply the Collection constraint to an array property, validating email format and text length on specific elements.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Collection.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Author.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Author\n{\n    #[Assert\\Collection(\n        fields: [\n            'personal_email' => new Assert\\Email,\n            'short_bio' => [\n                new Assert\\NotBlank,\n                new Assert\\Length(\n                    max: 100,\n                    maxMessage: 'Your short bio is too long!'\n                )\n            ]\n        ],\n        allowMissingFields: true,\n    )]\n    protected array $profileData = [\n        'personal_email' => '...',\n        'short_bio' => '...',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Symfony MoneyType with Divisor Option in PHP\nDESCRIPTION: Demonstrates how to configure a Symfony form field using MoneyType with a custom 'divisor' option. The snippet highlights the use of the MoneyType PHP class and how to adjust values (e.g., storing cents as integers and displaying as decimals). Requires the Symfony Form component, with dependencies on PHP and the MoneyType. The key parameter is 'divisor', which divides the stored value before rendering (and multiplies it on submit); for example, a price value stored as 9900 will be displayed as 99 when using a divisor of 100. Input is an integer value (e.g., price in cents), and output to the user is a decimal string or float.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/money.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\MoneyType;\n// ...\n\n$builder->add('price', MoneyType::class, [\n    'divisor' => 100,\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating a Legacy Bridge for Symfony Integration\nDESCRIPTION: An implementation of a Legacy Bridge class that maps requests to specific legacy script files and handles environment setup for running legacy code in the context of a Symfony application.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/migration.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/LegacyBridge.php\nnamespace App;\n\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass LegacyBridge\n{\n\n    /**\n     * Map the incoming request to the right file. This is the\n     * key function of the LegacyBridge.\n     *\n     * Sample code only. Your implementation will vary, depending on the\n     * architecture of the legacy code and how it's executed.\n     *\n     * If your mapping is complicated, you may want to write unit tests\n     * to verify your logic, hence this is public static.\n     */\n    public static function getLegacyScript(Request $request): string\n    {\n        $requestPathInfo = $request->getPathInfo();\n        $legacyRoot = __DIR__ . '/../';\n\n        // Map a route to a legacy script:\n        if ($requestPathInfo == '/customer/') {\n            return \"{$legacyRoot}src/customers/list.php\";\n        }\n\n        // Map a direct file call, e.g. an ajax call:\n        if ($requestPathInfo == 'inc/ajax_cust_details.php') {\n            return \"{$legacyRoot}inc/ajax_cust_details.php\";\n        }\n\n        // ... etc.\n\n        throw new \\Exception(\"Unhandled legacy mapping for $requestPathInfo\");\n    }\n\n    public static function handleRequest(Request $request, Response $response, string $publicDirectory): void\n    {\n        $legacyScriptFilename = LegacyBridge::getLegacyScript($request);\n\n        // Possibly (re-)set some env vars (e.g. to handle forms\n        // posting to PHP_SELF):\n        $p = $request->getPathInfo();\n        $_SERVER['PHP_SELF'] = $p;\n        $_SERVER['SCRIPT_NAME'] = $p;\n        $_SERVER['SCRIPT_FILENAME'] = $legacyScriptFilename;\n\n        require $legacyScriptFilename;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Service Configurator Class (EmailConfigurator) in PHP\nDESCRIPTION: This PHP snippet defines the `EmailConfigurator` class, which acts as the service configurator. It depends on `EmailFormatterManager` to retrieve the enabled formatters. Its `configure` method accepts any service implementing `EmailFormatterAwareInterface` and injects the formatters by calling the service's `setEnabledFormatters` method. This decouples the email managers from the source of the formatter configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/configurators.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Mail/EmailConfigurator.php\nnamespace App\\Mail;\n\nclass EmailConfigurator\n{\n    public function __construct(\n        private EmailFormatterManager $formatterManager,\n    ) {\n    }\n\n    public function configure(EmailFormatterAwareInterface $emailManager): void\n    {\n        $emailManager->setEnabledFormatters(\n            $this->formatterManager->getEnabledFormatters()\n        );\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Dumping Null Values in YAML with PHP\nDESCRIPTION: Shows different ways to represent null values when dumping YAML using the Symfony YAML component. Demonstrates using null, tilde (~), and empty string representations.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/yaml.rst#2025-04-22_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n$dumped = Yaml::dump(['foo' => null]);\n// foo: null\n\n$dumped = Yaml::dump(['foo' => null], 2, 4, Yaml::DUMP_NULL_AS_TILDE);\n// foo: ~\n\n$dumped = Yaml::dump(['foo' => null], 2, 4, Yaml::DUMP_NULL_AS_EMPTY);\n// foo:\n```\n\n----------------------------------------\n\nTITLE: Configuring Notification Channel Policy - YAML\nDESCRIPTION: This YAML configuration snippet sets channel policies for different importance levels in Symfony's Notifier component. It specifies which transports (SMS, Slack, email, browser) to use for 'urgent', 'high', 'medium', and 'low' importance notifications. Requires a Symfony application with the Notifier component enabled and proper package setup. Inputs are the assigned channels per importance level; outputs affect how notifications are routed automatically.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/notifier.rst#2025-04-22_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/notifier.yaml\nframework:\n    notifier:\n        # ...\n        channel_policy:\n            # Use SMS, Slack and email for urgent notifications\n            urgent: ['sms', 'chat/slack', 'email']\n\n            # Use Slack for highly important notifications\n            high: ['chat/slack']\n\n            # Use browser for medium and low notifications\n            medium: ['browser']\n            low: ['browser']\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Form Theme in YAML\nDESCRIPTION: YAML configuration to set a global form theme for all forms in a Symfony application using the twig.form_themes option.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/form_themes.rst#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/twig.yaml\ntwig:\n    form_themes: ['bootstrap_5_horizontal_layout.html.twig']\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Email with Symfony Mime Email Class (PHP)\nDESCRIPTION: Shows how to instantiate the `Symfony\\Component\\Mime\\Email` class and use its chainable methods to set common email headers (from, to, cc, bcc, replyTo, priority, subject) and content (text, html). This provides a high-level API for common email creation tasks.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/mime.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Mime\\Email;\n\n$email = (new Email())\n    ->from('fabien@symfony.com')\n    ->to('foo@example.com')\n    ->cc('bar@example.com')\n    ->bcc('baz@example.com')\n    ->replyTo('fabien@symfony.com')\n    ->priority(Email::PRIORITY_HIGH)\n    ->subject('Important Notification')\n    ->text('Lorem ipsum...')\n    ->html('<h1>Lorem ipsum</h1> <p>...</p>')\n;\n```\n\n----------------------------------------\n\nTITLE: Configuring Entry Points in importmap.php\nDESCRIPTION: Configuration example showing how to define an entrypoint in importmap.php, which specifies the main JavaScript file that the browser should load.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/asset_mapper.rst#2025-04-22_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n// importmap.php\nreturn [\n    'app' => [\n        'path' => './assets/app.js',\n        'entrypoint' => true,\n    ],\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Displaying Warning Messages in Symfony Console\nDESCRIPTION: Illustrates the usage of the warning() method to display warning messages with red background and [WARNING] label.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/console/style.rst#2025-04-22_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n$io->warning('Lorem ipsum dolor sit amet');\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$io->warning([\n    'Lorem ipsum dolor sit amet',\n    'Consectetur adipiscing elit',\n]);\n```\n\n----------------------------------------\n\nTITLE: Using the Form Type Extension in a MediaType Form\nDESCRIPTION: This code demonstrates how to use the new image_property option in a MediaType form class when adding a FileType field.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/create_form_type_extension.rst#2025-04-22_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n// src/Form/Type/MediaType.php\nnamespace App\\Form\\Type;\n\nuse Symfony\\Component\\Form\\AbstractType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\FileType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\TextType;\nuse Symfony\\Component\\Form\\FormBuilderInterface;\n\nclass MediaType extends AbstractType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options): void\n    {\n        $builder\n            ->add('name', TextType::class)\n            ->add('file', FileType::class, ['image_property' => 'webPath']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Rendering a Tree by Adding Nodes with TreeHelper (PHP)\nDESCRIPTION: Shows how to manually construct a tree structure by instantiating a root TreeNode and using addChild to append additional nodes, demonstrating a mix of immediate and nested children. After assembling the tree, it is rendered to the console with TreeHelper::createTree and the render method. Depends on symfony/console and requires the user to build the hierarchy programmatically.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/helpers/tree.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Console\\Helper\\TreeHelper;\nuse Symfony\\Component\\Console\\Helper\\TreeNode;\n\n$node = TreeNode::fromValues([\n    'Command',\n    'Controller' => [\n        'DefaultController.php',\n    ],\n    'Kernel.php',\n]);\n$node->addChild('templates');\n$node->addChild('tests');\n\n$tree = TreeHelper::createTree($io, $node);\n$tree->render();\n\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Autowiring with Complex PHP Types\nDESCRIPTION: A PHP class `DataFormatter` demonstrating that Symfony's autowiring system can resolve dependencies even when complex type-hints like union (`|`) and intersection (`&`) types are used in constructor arguments.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/autowiring.rst#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Serializer\\Normalizer\\DenormalizerInterface;\nuse Symfony\\Component\\Serializer\\Normalizer\\NormalizerInterface;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\n\nclass DataFormatter\n{\n    public function __construct(\n        private (NormalizerInterface&DenormalizerInterface)|SerializerInterface $transformer,\n    ) {\n        // ...\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping ChoiceType Options in PHP\nDESCRIPTION: This snippet illustrates how to group options in a ChoiceType field using a multi-dimensional array. It creates two groups: 'Main Statuses' and 'Out of Stock Statuses', each containing relevant options.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/choice.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\ChoiceType;\n// ...\n\n$builder->add('stockStatus', ChoiceType::class, [\n    'choices' => [\n        'Main Statuses' => [\n            'Yes' => 'stock_yes',\n            'No' => 'stock_no',\n        ],\n        'Out of Stock Statuses' => [\n            'Backordered' => 'stock_backordered',\n            'Discontinued' => 'stock_discontinued',\n        ],\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Password Hashers with PasswordHasherFactory (PHP Standalone)\nDESCRIPTION: This PHP snippet demonstrates configuring password hashers outside the main Symfony configuration system, typically for standalone usage. It initializes a `PasswordHasherFactory` with an array defining the hashing algorithms ('auto') and options (cost: 15 for `PasswordAuthenticatedUserInterface`) for specific user classes.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/passwords.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Entity\\User;\nuse Symfony\\Component\\PasswordHasher\\Hasher\\PasswordHasherFactory;\nuse Symfony\\Component\\Security\\Core\\User\\PasswordAuthenticatedUserInterface;\n\n$passwordHasherFactory = new PasswordHasherFactory([\n    // auto hasher with default options for the User class (and children)\n    User::class => ['algorithm' => 'auto'],\n\n    // auto hasher with custom options for all PasswordAuthenticatedUserInterface instances\n    PasswordAuthenticatedUserInterface::class => [\n        'algorithm' => 'auto',\n        'cost' => 15,\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Class-Level Form Constraints in Symfony\nDESCRIPTION: Demonstrates how to configure form-wide constraints using the configureOptions method, including collection validation rules for multiple fields.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/without_class.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function configureOptions(OptionsResolver $resolver): void\n{\n    $resolver->setDefaults([\n        'data_class' => null,\n        'constraints' => new Collection([\n            'firstName' => new Length(min: 3),\n            'lastName' => [\n                new NotBlank(),\n                new Length(min: 3),\n            ],\n        ]),\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Making a Service Public using the Autoconfigure Attribute in PHP\nDESCRIPTION: Demonstrates using the `#[Autoconfigure]` PHP attribute directly on a service class (`App\\Service\\Foo`) to mark it as public. This allows the service to be fetched directly from the container via `$container->get()`.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/alias_private.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// src/Service/Foo.php\nnamespace App\\Service;\n\nuse Symfony\\Component\\DependencyInjection\\Attribute\\Autoconfigure;\n\n#[Autoconfigure(public: true)]\nclass Foo\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Options using array_replace in PHP\nDESCRIPTION: This PHP code demonstrates using the built-in `array_replace` function within the `Mailer` constructor. It merges the provided `$options` array with a predefined array of default values, ensuring all expected options have a value. However, this method doesn't validate against unknown or misspelled options.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/options_resolver.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass Mailer\n{\n    // ...\n\n    public function __construct(array $options = [])\n    {\n        $this->options = array_replace([\n            'host'     => 'smtp.example.org',\n            'username' => 'user',\n            'password' => 'pa$$word',\n            'port'     => 25,\n        ], $options);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony Project via Composer\nDESCRIPTION: Command to create a new Symfony skeleton project using Composer package manager.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/quick_tour/the_big_picture.rst#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer create-project symfony/skeleton quick_tour\n```\n\n----------------------------------------\n\nTITLE: Configuring IP-Based Access Control in Symfony\nDESCRIPTION: Configuration examples for securing internal routes by IP address in Symfony. The example restricts access to paths starting with '/internal' to only allow specific IP addresses (local and subnet), while denying access to all other users.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/access_control.rst#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\nsecurity:\n    # ...\n    access_control:\n        #\n        # the 'ips' option supports IP addresses and subnet masks\n        - { path: '^/internal', roles: PUBLIC_ACCESS, ips: [127.0.0.1, ::1, 192.168.0.1/24] }\n        - { path: '^/internal', roles: ROLE_NO_ACCESS }\n```\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/security.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<srv:container xmlns=\"http://symfony.com/schema/dic/security\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:srv=\"http://symfony.com/schema/dic/services\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/security\n        https://symfony.com/schema/dic/security/security-1.0.xsd\">\n\n    <config>\n        <!-- ... -->\n\n        <!-- the 'ips' option supports IP addresses and subnet masks -->\n        <rule path=\"^/internal\" role=\"PUBLIC_ACCESS\">\n            <ip>127.0.0.1</ip>\n            <ip>::1</ip>\n        </rule>\n\n        <rule path=\"^/internal\" role=\"ROLE_NO_ACCESS\"/>\n    </config>\n</srv:container>\n```\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/security.php\nuse Symfony\\Config\\SecurityConfig;\n\nreturn static function (SecurityConfig $security): void {\n    // ...\n\n    $security->accessControl()\n        ->path('^/internal')\n        ->roles(['PUBLIC_ACCESS'])\n        // the 'ips' option supports IP addresses and subnet masks\n        ->ips(['127.0.0.1', '::1'])\n    ;\n\n    $security->accessControl()\n        ->path('^/internal')\n        ->roles(['ROLE_NO_ACCESS'])\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Nested Options with Parent Dependencies in PHP\nDESCRIPTION: Demonstrates configuring nested options with dependencies on parent options using closures in Symfony's OptionsResolver\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/options_resolver.rst#2025-04-22_snippet_29\n\nLANGUAGE: php\nCODE:\n```\nclass Mailer\n{\n    // ...\n\n    public function configureOptions(OptionsResolver $resolver): void\n    {\n        $resolver->setDefault('sandbox', false);\n        $resolver->setOptions('spool', function (OptionsResolver $spoolResolver, Options $parent): void {\n            $spoolResolver->setDefaults([\n                'type' => $parent['sandbox'] ? 'memory' : 'file',\n                // ...\n            ]);\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Tags to Cache Items in Symfony\nDESCRIPTION: Demonstrates how to attach tags to cached items using ItemInterface::tag method. Tags can be added individually or as an array.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/cache/cache_invalidation.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$item = $cache->get('cache_key', function (ItemInterface $item): string {\n    // [...]\n    // add one or more tags\n    $item->tag('tag_1');\n    $item->tag(['tag_2', 'tag_3']);\n\n    return $cachedValue;\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing DataTransformerInterface in Symfony Forms\nDESCRIPTION: A data transformer class that converts between Issue objects and issue numbers. It demonstrates how to use setInvalidMessage() to set public error messages when transformation fails.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/data_transformers.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// src/Form/DataTransformer/IssueToNumberTransformer.php\nnamespace App\\Form\\DataTransformer;\n\nuse Symfony\\Component\\Form\\DataTransformerInterface;\nuse Symfony\\Component\\Form\\Exception\\TransformationFailedException;\n\nclass IssueToNumberTransformer implements DataTransformerInterface\n{\n    // ...\n\n    public function reverseTransform($issueNumber): ?Issue\n    {\n        // ...\n\n        if (null === $issue) {\n            $privateErrorMessage = sprintf('An issue with number \"%s\" does not exist!', $issueNumber);\n            $publicErrorMessage = 'The given \"{{ value }}\" value is not a valid issue number.';\n\n            $failure = new TransformationFailedException($privateErrorMessage);\n            $failure->setInvalidMessage($publicErrorMessage, [\n                '{{ value }}' => $issueNumber,\n            ]);\n\n            throw $failure;\n        }\n\n        return $issue;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Cache Pools in YAML\nDESCRIPTION: YAML configuration for creating custom cache pools with different adapters and configurations in Symfony.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/cache.rst#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/cache.yaml\nframework:\n    cache:\n        default_memcached_provider: 'memcached://localhost'\n\n        pools:\n            # creates a \"custom_thing.cache\" service\n            # autowireable via \"CacheInterface $customThingCache\"\n            # uses the \"app\" cache configuration\n            custom_thing.cache:\n                adapter: cache.app\n\n            # creates a \"my_cache_pool\" service\n            # autowireable via \"CacheInterface $myCachePool\"\n            my_cache_pool:\n                adapter: cache.adapter.filesystem\n\n            # uses the default_memcached_provider from above\n            acme.cache:\n                adapter: cache.adapter.memcached\n\n            # control adapter's configuration\n            foobar.cache:\n                adapter: cache.adapter.memcached\n                provider: 'memcached://user:password@example.com'\n\n            # uses the \"foobar.cache\" pool as its backend but controls\n            # the lifetime and (like all pools) has a separate cache namespace\n            short_cache:\n                adapter: foobar.cache\n                default_lifetime: 60\n```\n\n----------------------------------------\n\nTITLE: Implementing Postal Address Form Type in Symfony PHP\nDESCRIPTION: Implementation of a postal address form type that handles extended address options and state selection based on configuration options.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/create_custom_field_type.rst#2025-04-22_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nclass PostalAddressType extends AbstractType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options): void\n    {\n        if (true === $options['is_extended_address']) {\n            $builder->add('addressLine3', TextType::class, [\n                'help' => 'Extended address info',\n            ]);\n        }\n\n        if (null !== $options['allowed_states']) {\n            $builder->add('state', ChoiceType::class, [\n                'choices' => $options['allowed_states'],\n            ]);\n        } else {\n            $builder->add('state', TextType::class, [\n                'label' => 'State/Province/Region',\n            ]);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony CSRF Protection Component via Composer\nDESCRIPTION: Shows the Composer command required to install the `symfony/security-csrf` package. This package provides the necessary components and services for generating and validating CSRF tokens within a Symfony application.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/csrf.rst#2025-04-22_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require symfony/security-csrf\n```\n\n----------------------------------------\n\nTITLE: Initializing DoctrineDbalAdapter in Symfony\nDESCRIPTION: Example showing how to initialize a DoctrineDbalAdapter with a database connection, namespace, default lifetime, and configuration options. The adapter requires either a Doctrine DBAL Connection object or DBAL URL as its primary parameter.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/cache/adapters/doctrine_dbal_adapter.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Cache\\Adapter\\DoctrineDbalAdapter;\n\n$cache = new DoctrineDbalAdapter(\n\n    // a Doctrine DBAL connection or DBAL URL\n    $databaseConnectionOrURL,\n\n    // the string prefixed to the keys of the items stored in this cache\n    $namespace = '',\n\n    // the default lifetime (in seconds) for cache items that do not define their\n    // own lifetime, with a value 0 causing items to be stored indefinitely (i.e.\n    // until the database table is truncated or its rows are otherwise deleted)\n    $defaultLifetime = 0,\n\n    // an array of options for configuring the database table and connection\n    $options = []\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Translator and Adding TranslationExtension to Twig in PHP\nDESCRIPTION: Demonstrates the setup process for the Symfony Translator component, including instantiation with a default locale, adding a loader (XliffFileLoader), specifying a translation resource file, and registering the `TranslationExtension` with a Twig environment instance. This enables the `trans` filter for translations within Twig templates. Requires `Translator` and `Twig\\Environment` instances.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/form.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Bridge\\Twig\\Extension\\TranslationExtension;\nuse Symfony\\Component\\Form\\Forms;\nuse Symfony\\Component\\Translation\\Loader\\XliffFileLoader;\nuse Symfony\\Component\\Translation\\Translator;\n\n// creates the Translator\n$translator = new Translator('en');\n// somehow load some translations into it\n$translator->addLoader('xlf', new XliffFileLoader());\n$translator->addResource(\n    'xlf',\n    __DIR__.'/path/to/translations/messages.en.xlf',\n    'en'\n);\n\n// adds the TranslationExtension (it gives us trans filter)\n$twig->addExtension(new TranslationExtension($translator));\n\n$formFactory = Forms::createFormFactoryBuilder()\n    // ...\n    ->getFormFactory();\n```\n\n----------------------------------------\n\nTITLE: Defining a Class with Constructor Property Promotion in PHP\nDESCRIPTION: Shows how to define a class using PHP 8's constructor property promotion feature, which is relevant for the ConstructorExtractor.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/property_info.rst#2025-04-22_snippet_17\n\nLANGUAGE: PHP\nCODE:\n```\n// src/Domain/Foo.php\nclass Foo\n{\n    public function __construct(\n        private string $bar,\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony Config Component via Composer\nDESCRIPTION: Command to install the Symfony Config component using Composer package manager.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/config.rst#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require symfony/config\n```\n\n----------------------------------------\n\nTITLE: Sending HTTP Response\nDESCRIPTION: Shows basic usage of sending a response with optional flush control for debugging purposes.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#2025-04-22_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$response->send();\n```\n\n----------------------------------------\n\nTITLE: Enabling CSS Preprocessors in Webpack Encore Configuration\nDESCRIPTION: This snippet demonstrates how to enable different CSS preprocessors (Sass, LESS, Stylus) in a Webpack Encore configuration file. It shows the specific methods to call for each preprocessor type, which will process files with the corresponding extensions.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/css-preprocessors.rst#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// webpack.config.js\n// ...\n\nEncore\n    // ...\n\n    // enable just the one you want\n\n    // processes files ending in .scss or .sass\n    .enableSassLoader()\n\n    // processes files ending in .less\n    .enableLessLoader()\n\n    // processes files ending in .styl\n    .enableStylusLoader()\n;\n```\n\n----------------------------------------\n\nTITLE: Pruning Cache Items in Symfony PHP\nDESCRIPTION: Demonstrates how to prune expired cache items using the PruneableInterface in Symfony, with examples for FilesystemAdapter and ChainAdapter.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/cache/cache_pools.rst#2025-04-22_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Cache\\Adapter\\FilesystemAdapter;\n\n$cache = new FilesystemAdapter('app.cache');\n// ... do some set and get operations\n$cache->prune();\n```\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Cache\\Adapter\\ApcuAdapter;\nuse Symfony\\Component\\Cache\\Adapter\\ChainAdapter;\nuse Symfony\\Component\\Cache\\Adapter\\FilesystemAdapter;\nuse Symfony\\Component\\Cache\\Adapter\\PdoAdapter;\nuse Symfony\\Component\\Cache\\Adapter\\PhpFilesAdapter;\n\n$cache = new ChainAdapter([\n    new ApcuAdapter(),       // does NOT implement PruneableInterface\n    new FilesystemAdapter(), // DOES implement PruneableInterface\n    new PdoAdapter(),        // DOES implement PruneableInterface\n    new PhpFilesAdapter(),   // DOES implement PruneableInterface\n    // ...\n]);\n\n// prune will proxy the call to PdoAdapter, FilesystemAdapter and PhpFilesAdapter,\n// while silently skipping ApcuAdapter\n$cache->prune();\n```\n\n----------------------------------------\n\nTITLE: Finding System Executable Path with ExecutableFinder\nDESCRIPTION: Demonstrates how to use ExecutableFinder to locate the absolute path of a system executable. The example shows finding the chromedriver executable path.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/process.rst#2025-04-22_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Process\\ExecutableFinder;\n\n$executableFinder = new ExecutableFinder();\n$chromedriverPath = $executableFinder->find('chromedriver');\n// $chromedriverPath = '/usr/local/bin/chromedriver' (the result will be different on your computer)\n```\n\n----------------------------------------\n\nTITLE: Date Range Validation with DateTime Objects\nDESCRIPTION: Examples showing how to validate DateTime objects against date ranges using various configuration formats.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Range.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Event.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Event\n{\n    #[Assert\\Range(\n        min: 'first day of January',\n        max: 'first day of January next year',\n    )]\n    protected \\DateTimeInterface $startDate;\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Function for Implementing Delete Functionality\nDESCRIPTION: JavaScript function that creates and attaches a delete button to a form collection item. When clicked, it removes the item from the DOM, which will cause it to be removed from the collection when the form is submitted.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/form_collections.rst#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nfunction addTagFormDeleteLink(item) {\n    const removeFormButton = document.createElement('button');\n    removeFormButton.innerText = 'Delete this tag';\n\n    item.append(removeFormButton);\n\n    removeFormButton.addEventListener('click', (e) => {\n        e.preventDefault();\n        // remove the li for the tag form\n        item.remove();\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Event Listener Service Configuration in PHP\nDESCRIPTION: PHP configuration for registering an event listener service with the kernel.event_listener tag.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/event_dispatcher.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nuse App\\EventListener\\ExceptionListener;\n\nreturn function(ContainerConfigurator $container): void {\n    $services = $container->services();\n\n    $services->set(ExceptionListener::class)\n        ->tag('kernel.event_listener')\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Minimal Symfony Console Entry Point using Runtime\nDESCRIPTION: This PHP snippet demonstrates a simplified `bin/console` file using the Runtime component. It includes `autoload_runtime.php` and returns a closure that creates the Kernel and wraps it in a FrameworkBundle Console Application. The Runtime component automatically detects and runs it as a console application.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/runtime.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n#!/usr/bin/env php\n<?php\n// bin/console\n\nuse App\\Kernel;\nuse Symfony\\Bundle\\FrameworkBundle\\Console\\Application;\n\nrequire_once dirname(__DIR__).'/vendor/autoload_runtime.php';\n\nreturn function (array $context): Application {\n    $kernel = new Kernel($context['APP_ENV'], (bool) $context['APP_DEBUG']);\n\n    // returning an \"Application\" makes the Runtime run a Console\n    // application instead of the HTTP Kernel\n    return new Application($kernel);\n};\n```\n\n----------------------------------------\n\nTITLE: Atomically Writing Content to a File (PHP)\nDESCRIPTION: Demonstrates the `Filesystem::dumpFile` method, which writes content to a specified file. It ensures atomicity by writing to a temporary file first and then moving it, preventing partially written files.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/filesystem.rst#2025-04-22_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$filesystem->dumpFile('file.txt', 'Hello World');\n```\n\n----------------------------------------\n\nTITLE: Configuring empty_data with Closure in Symfony Form Type\nDESCRIPTION: Demonstrates how to use a closure to set up empty_data in a Symfony form type, which is the preferred method as it only creates the object when needed.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/use_empty_data.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Form\\FormInterface;\nuse Symfony\\Component\\OptionsResolver\\OptionsResolver;\n// ...\n\npublic function configureOptions(OptionsResolver $resolver): void\n{\n    $resolver->setDefaults([\n        'empty_data' => function (FormInterface $form): Blog {\n            return new Blog($form->get('title')->getData());\n        },\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Cache Controller Implementation\nDESCRIPTION: Example controller showing how to use async cache with the CacheComputation service.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/cache.rst#2025-04-22_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Controller;\n\nuse App\\Cache\\CacheComputation;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\Routing\\Attribute\\Route;\nuse Symfony\\Contracts\\Cache\\CacheInterface;\nuse Symfony\\Contracts\\Cache\\ItemInterface;\n\nclass CacheController extends AbstractController\n{\n    #[Route('/cache', name: 'cache')]\n    public function index(CacheInterface $asyncCache): Response\n    {\n        // pass to the cache the service method that refreshes the item\n        $cachedValue = $asyncCache->get('my_value', [CacheComputation::class, 'compute'])\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Executable with Custom Path and Directories\nDESCRIPTION: Shows how to use ExecutableFinder with additional parameters to specify a default value and extra directories for executable search.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/process.rst#2025-04-22_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Process\\ExecutableFinder;\n\n$executableFinder = new ExecutableFinder();\n$chromedriverPath = $executableFinder->find('chromedriver', '/path/to/chromedriver', ['local-bin/']);\n```\n\n----------------------------------------\n\nTITLE: Preparing and Sending HTTP Responses (Symfony, PHP)\nDESCRIPTION: Shows how to prepare a Response object for sending (ensuring HTTP compliance) and how to dispatch it to the client with the send() method. Requires a Response object and typically the related Request. Inputs are Response (and optionally Request) objects; the output is sent HTTP content. The prepare() method adjusts headers like Content-Type if needed before transmission.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#2025-04-22_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$response->prepare($request);\n\n$response->send();\n```\n\n----------------------------------------\n\nTITLE: Defining Hidden Console Commands with Symfony Attributes in PHP\nDESCRIPTION: This snippet shows how to define a Symfony console command as hidden by setting the 'hidden' property to true in the AsCommand PHP attribute. It uses class-level attributes and extends the Symfony Command class. The command will not appear in the output of the default command list, although it remains accessible when executed directly or using other descriptors. Dependencies include the symfony/console component and PHP 8+ for attribute support. The 'name' parameter specifies the command, and 'hidden' controls its visibility in listings; expected usage is for internal or scheduled commands.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/console/hide_commands.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Command/LegacyCommand.php\nnamespace App\\Command;\n\nuse Symfony\\Component\\Console\\Attribute\\AsCommand;\nuse Symfony\\Component\\Console\\Command\\Command;\n\n#[AsCommand(name: 'app:legacy', hidden: true)]\nclass LegacyCommand extends Command\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Dumping Variables with CliDumper in PHP\nDESCRIPTION: Demonstrates how to use VarCloner and CliDumper to dump a variable to the command line output. This snippet shows the basic setup for cloning and dumping variables.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/var_dumper.rst#2025-04-22_snippet_22\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\VarDumper\\Cloner\\VarCloner;\nuse Symfony\\Component\\VarDumper\\Dumper\\CliDumper;\n\n$cloner = new VarCloner();\n$dumper = new CliDumper();\n\n$dumper->dump($cloner->cloneVar($variable));\n```\n\n----------------------------------------\n\nTITLE: Configuring Workflow Metadata in PHP\nDESCRIPTION: This PHP configuration demonstrates how to set metadata for a workflow, its places, and transitions using the Symfony Config component.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/workflow.rst#2025-04-22_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework): void {\n    $blogPublishing = $framework->workflows()->workflows('blog_publishing');\n    // ... previous configuration\n\n    $blogPublishing->metadata([\n        'title' => 'Blog Publishing Workflow'\n    ]);\n\n    // ...\n\n    $blogPublishing->place()\n        ->name('draft')\n        ->metadata([\n            'max_num_of_words' => 500,\n        ]);\n\n    // ...\n\n    $blogPublishing->transition()\n        ->name('to_review')\n            ->from(['draft'])\n            ->to(['reviewed'])\n            ->metadata([\n                'priority' => 0.5,\n            ]);\n\n    $blogPublishing->transition()\n        ->name('publish')\n            ->from(['reviewed'])\n            ->to(['published'])\n            ->metadata([\n                'hour_limit' => 20,\n                'explanation' => 'You can not publish after 8 PM.',\n            ]);\n};\n```\n\n----------------------------------------\n\nTITLE: Defining SalaryCalculator Class with Doctrine EntityManager in PHP\nDESCRIPTION: This snippet shows the implementation of a SalaryCalculator class that uses Doctrine's EntityManager to retrieve an Employee entity and calculate the total salary.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/testing/database.rst#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n// src/Salary/SalaryCalculator.php\nnamespace App\\Salary;\n\nuse App\\Entity\\Employee;\nuse Doctrine\\ORM\\EntityManager;\n\nclass SalaryCalculator\n{\n    public function __construct(\n        private EntityManager $entityManager,\n    ) {\n    }\n\n    public function calculateTotalSalary(int $id): int\n    {\n        $employeeRepository = $this->entityManager\n            ->getRepository(Employee::class);\n        $employee = $employeeRepository->find($id);\n\n        return $employee->getSalary() + $employee->getBonus();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Event Listener for FormEvents::PRE_SUBMIT in Symfony\nDESCRIPTION: This snippet demonstrates how to register an event listener for the PRE_SUBMIT form event using Symfony's Form component. It shows the basic structure of creating a form builder and adding an event listener.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/events.rst#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Form\\FormEvent;\nuse Symfony\\Component\\Form\\FormEvents;\n\n$listener = function (FormEvent $event): void {\n    // ...\n};\n\n$form = $formFactory->createBuilder()\n    // ... add form fields\n    ->addEventListener(FormEvents::PRE_SUBMIT, $listener);\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Injecting Dependencies into a Custom Authenticator in PHP\nDESCRIPTION: Shows how to inject a dependency, specifically a `UserRepository`, into a custom authenticator using constructor injection. This pattern allows the authenticator to access services like repositories, often needed for loading user data based on credentials or tokens. PHP 8 constructor property promotion is used for brevity.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/custom_authenticator.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// src/Security/CustomAuthenticator.php\nnamespace App\\Security;\n\nuse App\\Repository\\UserRepository;\n// ...\n\nclass CustomAuthenticator extends AbstractAuthenticator\n{\n    public function __construct(\n        private UserRepository $userRepository,\n    ) {\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Finding the Longest Common Base Path using Symfony Path (PHP)\nDESCRIPTION: These snippets show how to use Path::getLongestCommonBasePath to find the shared root directory among a set of file paths. The resulting base path can then be reused for storage efficiency. Prerequisite: Symfony\\Component\\Filesystem\\Path. Parameters: a list of absolute, canonical paths. Output: the common canonical base path as a string.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/filesystem.rst#2025-04-22_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    '/var/www/vhosts/project/httpdocs/config/config.yaml',\n    '/var/www/vhosts/project/httpdocs/config/routing.yaml',\n    '/var/www/vhosts/project/httpdocs/config/services.yaml',\n    '/var/www/vhosts/project/httpdocs/images/banana.gif',\n    '/var/www/vhosts/project/httpdocs/uploads/images/nicer-banana.gif',\n];\n```\n\nLANGUAGE: php\nCODE:\n```\n$basePath = Path::getLongestCommonBasePath(\n    '/var/www/vhosts/project/httpdocs/config/config.yaml',\n    '/var/www/vhosts/project/httpdocs/config/routing.yaml',\n    '/var/www/vhosts/project/httpdocs/config/services.yaml',\n    '/var/www/vhosts/project/httpdocs/images/banana.gif',\n    '/var/www/vhosts/project/httpdocs/uploads/images/nicer-banana.gif'\n);\n// => /var/www/vhosts/project/httpdocs\n```\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    $basePath.'/config/config.yaml',\n    $basePath.'/config/routing.yaml',\n    $basePath.'/config/services.yaml',\n    $basePath.'/images/banana.gif',\n    $basePath.'/uploads/images/nicer-banana.gif',\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Entity User Provider without Property (XML)\nDESCRIPTION: This XML snippet demonstrates how to configure an entity user provider in Symfony without specifying a property attribute, thus relying on custom repository logic. The configuration references the App\\Entity\\User entity. Use this in config/packages/security.xml when implementing custom user loading in your repository.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/user_providers.rst#2025-04-22_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/security.xml -->\\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\\n<srv:container xmlns=\\\"http://symfony.com/schema/dic/security\\\"\\n    xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n    xmlns:srv=\\\"http://symfony.com/schema/dic/services\\\"\\n    xsi:schemaLocation=\\\"http://symfony.com/schema/dic/services\\n        https://symfony.com/schema/dic/services/services-1.0.xsd\\n        http://symfony.com/schema/dic/security\\n        https://symfony.com/schema/dic/security/security-1.0.xsd\\\">\\n\\n    <config>\\n        <provider name=\\\"users\\\">\\n            <entity class=\\\"App\\Entity\\User\\\"/>\\n        </provider>\\n\\n        <!-- ... -->\\n    </config>\\n</srv:container>\n```\n\n----------------------------------------\n\nTITLE: Configuring PHP Error Logging in Symfony PHP\nDESCRIPTION: This PHP configuration snippet demonstrates how to set up PHP error logging in Symfony's framework.php file. It uses the FrameworkConfig object to map PHP error constants to specific log levels.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_62\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Log\\LogLevel;\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework): void {\n    $framework->phpErrors()->log(\\E_DEPRECATED, LogLevel::ERROR);\n    $framework->phpErrors()->log(\\E_USER_DEPRECATED, LogLevel::ERROR);\n    // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Fetching Products From a Category in Symfony Controller\nDESCRIPTION: Controller method that shows how to fetch a Category entity and access its related Products collection. This demonstrates the inverse side of the relationship and lazy loading behavior.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine/associations.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/ProductController.php\n\n// ...\nclass ProductController extends AbstractController\n{\n    public function showProducts(CategoryRepository $categoryRepository, int $id): Response\n    {\n        $category = $categoryRepository->find($id);\n\n        $products = $category->getProducts();\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting AccessDecisionManager into a Symfony Voter (PHP)\nDESCRIPTION: Demonstrates how to inject the `AccessDecisionManagerInterface` into a custom Voter via constructor injection using PHP 8 constructor property promotion. This allows the Voter to perform further permission checks internally, such as recursively calling `isGranted()` or checking if the current user (obtained from the `$token` in `voteOnAttribute`) has a specific role like `ROLE_SUPER_ADMIN` before applying other logic.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/voters.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// src/Security/PostVoter.php\n\n// ...\nuse Symfony\\Component\\Security\\Core\\Authorization\\AccessDecisionManagerInterface;\n\nclass PostVoter extends Voter\n{\n    // ...\n\n    public function __construct(\n        private AccessDecisionManagerInterface $accessDecisionManager,\n    ) {\n    }\n\n    protected function voteOnAttribute($attribute, mixed $subject, TokenInterface $token): bool\n    {\n        // ...\n\n        // ROLE_SUPER_ADMIN can do anything! The power!\n\n```\n\n----------------------------------------\n\nTITLE: Using Magic __call Method with PropertyAccessor in PHP\nDESCRIPTION: Shows how to enable and use magic __call method with PropertyAccessor to dynamically get and set properties on a Person class.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/property_access.rst#2025-04-22_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nclass Person\n{\n    private array $children = [];\n\n    public function __call($name, $args): mixed\n    {\n        $property = lcfirst(substr($name, 3));\n        if ('get' === substr($name, 0, 3)) {\n            return $this->children[$property] ?? null;\n        } elseif ('set' === substr($name, 0, 3)) {\n            $value = 1 == count($args) ? $args[0] : null;\n            $this->children[$property] = $value;\n        }\n    }\n\n}\n\n$person = new Person();\n\n// Enable magic __call\n$propertyAccessor = PropertyAccess::createPropertyAccessorBuilder()\n    ->enableMagicCall()\n    ->getPropertyAccessor();\n\n$propertyAccessor->setValue($person, 'wouter', [...]);\n\nvar_dump($person->getWouter()); // [...]\n```\n\n----------------------------------------\n\nTITLE: Importing Routes with PHP Configuration Loader in Symfony - PHP\nDESCRIPTION: This PHP snippet defines route imports in Symfony by returning a closure that receives a RoutingConfigurator. Each $routes->import() call specifies a different source: from bundles, directories, controller attributes, or specific classes, and may use the 'attribute' or 'directory' type as needed. Requires 'Symfony\\Component\\Routing\\Loader\\Configurator\\RoutingConfigurator' and should be placed in config/routes.php. Inputs are resource paths or arrays specifying 'path' and 'namespace'; outputs are registered route collections in the Symfony router.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/routing/custom_route_loader.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// config/routes.php\\nuse Symfony\\\\Component\\\\Routing\\\\Loader\\\\Configurator\\\\RoutingConfigurator;\\n\\nreturn static function (RoutingConfigurator $routes): void {\\n    // loads routes from the given routing file stored in some bundle\\n    $routes->import('@AcmeBundle/Resources/config/routing.yaml');\\n\\n    // loads routes from the PHP attributes (#[Route(...)])\\n    // of the controllers found in the given PSR-4 namespace root\\n    $routes->import(\\n        ['path' => '../src/Controller/', 'namespace' => 'App\\\\Controller'],\\n        'attribute',\\n    );\\n\\n    // loads routes from the PHP attributes (#[Route(...)])\\n    // of the controllers found in that directory\\n    $routes->import('../src/Controller/', 'attribute');\\n\\n    // loads routes from the PHP attributes (#[Route(...)]) of the given class\\n    $routes->import('App\\\\Controller\\\\MyController', 'attribute');\\n\\n    // loads routes from the YAML or XML files found in that directory\\n    $routes->import('../legacy/routing/', 'directory');\\n\\n    // loads routes from the YAML or XML files found in some bundle directory\\n    $routes->import('@AcmeOtherBundle/Resources/config/routing/', 'directory');\\n};\n```\n\n----------------------------------------\n\nTITLE: Manually Updating Symfony Dependencies in composer.json\nDESCRIPTION: Shows a diff illustrating how to manually update the version constraints for core `symfony/*` packages (like `symfony/config` and `symfony/console`) in the `require` section of `composer.json`. This involves changing the version constraint from the current major version (e.g., `6.4.*`) to the new target major version (e.g., `7.0.*`). Note that some Symfony packages (like polyfills or UX components) might follow independent versioning and may not need updating.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/upgrade_major.rst#2025-04-22_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n  {\n      \"...\": \"...\",\n\n      \"require\": {\n-         \"symfony/config\": \"6.4.*\",\n+         \"symfony/config\": \"7.0.*\",\n-         \"symfony/console\": \"6.4.*\",\n+         \"symfony/console\": \"7.0.*\",\n          \"...\": \"...\",\n\n          \"...\": \"A few libraries starting with symfony/ follow their own\n                  versioning scheme (e.g. symfony/polyfill-[...],\n                  symfony/ux-[...], symfony/[...]-bundle).\n                  You do not need to update these versions: you can\n                  upgrade them independently whenever you want\",\n          \"symfony/monolog-bundle\": \"^3.10\",\n      },\n      \"...\": \"...\",\n  }\n```\n\n----------------------------------------\n\nTITLE: Pulling Translations from Provider in Symfony Console\nDESCRIPTION: Example console commands for pulling translations from a translation provider like Loco. Shows options for pulling all translations, new translations only, and writing YAML messages as a tree structure.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/translation.rst#2025-04-22_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\n# pull all provider's translations to local files for the locales and domains\n# configured in config/packages/translation.yaml file.\n# it will overwrite completely your local files.\n$ php bin/console translation:pull loco --force\n\n# pull new translations from the Loco provider to local files for the French\n# locale and the validators domain.\n# it will **not** overwrite your local files, only add new translations.\n$ php bin/console translation:pull loco --locales fr --domains validators\n\n# check out the command help to see its options (format, domains, locales, intl-icu, etc.)\n$ php bin/console translation:pull --help\n\n# the \"--as-tree\" option will write YAML messages as a tree-like structure instead\n# of flat keys\n$ php bin/console translation:pull loco --force --as-tree\n```\n\n----------------------------------------\n\nTITLE: Setting a Container Parameter within an Extension Load Method (PHP)\nDESCRIPTION: Shows setting a container parameter ('acme_demo.database_user') based on a configuration value ('db_user') processed within the extension's `load` method. The surrounding text explains that this mechanism can be used in conjunction with `ContainerBuilder::deprecateParameter()` (not shown in this snippet) to provide deprecation warnings for parameters.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/dependency_injection/compilation.rst#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\npublic function load(array $configs, ContainerBuilder $containerBuilder)\n{\n    // ...\n\n    $containerBuilder->setParameter('acme_demo.database_user', $configs['db_user']);\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing Inheritance of Specific Environment Variables in PHP\nDESCRIPTION: Shows how to prevent a subprocess from inheriting specific environment variables (e.g., `APP_ENV`, `SYMFONY_DOTENV_VARS`) from the parent PHP environment. This is done by setting their values to `false` in the environment variables array passed when creating or running the `Process`. Depends on the Symfony Process component.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/process.rst#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$process = new Process(['...'], null, [\n    'APP_ENV' => false,\n    'SYMFONY_DOTENV_VARS' => false,\n]);\n```\n\n----------------------------------------\n\nTITLE: Initializing SemaphoreFactory with RedisStore - Symfony PHP\nDESCRIPTION: Demonstrates how to instantiate a SemaphoreFactory using a RedisStore in a PHP environment. It requires the symfony/semaphore package and Redis PHP extension. The Redis connection is established to the specified host, and used to instantiate a RedisStore, which is then passed to SemaphoreFactory. Inputs: Redis host. Outputs: Initialized SemaphoreFactory instance ready for creating semaphores. Redis must be running and accessible.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/semaphore.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Semaphore\\SemaphoreFactory;\nuse Symfony\\Component\\Semaphore\\Store\\RedisStore;\n\n$redis = new Redis();\n$redis->connect('172.17.0.2');\n\n$store = new RedisStore($redis);\n$factory = new SemaphoreFactory($store);\n```\n\n----------------------------------------\n\nTITLE: Applying Json Constraint in PHP for Symfony Validation\nDESCRIPTION: This PHP code demonstrates how to apply the Json constraint to a property using Symfony's ClassMetadata in a loadValidatorMetadata method. It includes a custom error message for invalid JSON.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Json.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Book.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Book\n{\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('chapters', new Assert\\Json(\n            message: 'You\\'ve entered an invalid Json.',\n        ));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ByteString UTF-8 Validation\nDESCRIPTION: Shows how to check if string contents are valid UTF-8 using the ByteString class's isUtf8() method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/string.rst#2025-04-22_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nb('Lorem Ipsum')->isUtf8(); // true\nb(\"\\xc3\\x28\")->isUtf8();    // false\n```\n\n----------------------------------------\n\nTITLE: Registering Compiler Passes with Container Builder\nDESCRIPTION: Shows how to register a compiler pass with the container builder, which is required to execute the compiler pass during container compilation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/dependency_injection/compilation.rst#2025-04-22_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\DependencyInjection\\ContainerBuilder;\n\n$container = new ContainerBuilder();\n$container->addCompilerPass(new CustomPass());\n```\n\n----------------------------------------\n\nTITLE: Customizing Form Rendering with Individual Twig Functions\nDESCRIPTION: This example shows how to use form_start(), form_end(), form_errors(), and form_row() Twig functions to render different parts of a form with custom HTML structure and attributes.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/form_customization.rst#2025-04-22_snippet_1\n\nLANGUAGE: html+twig\nCODE:\n```\n{{ form_start(form) }}\n    <div class=\"my-custom-class-for-errors\">\n        {{ form_errors(form) }}\n    </div>\n\n    <div class=\"row\">\n        <div class=\"col\">\n            {{ form_row(form.task) }}\n        </div>\n        <div class=\"col\" id=\"some-custom-id\">\n            {{ form_row(form.dueDate) }}\n        </div>\n    </div>\n{{ form_end(form) }}\n```\n\n----------------------------------------\n\nTITLE: Integrating Symfony Validator with Form Component in PHP\nDESCRIPTION: Illustrates initializing the Symfony Validator, adding translation resources for core form and validator error messages using the previously configured Translator, and integrating it with the Form component by adding the `ValidatorExtension` to the `FormFactoryBuilder`. This enables automatic validation of form data upon submission. Requires pre-configured `Validator` and `Translator` instances.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/form.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Form\\Extension\\Validator\\ValidatorExtension;\nuse Symfony\\Component\\Form\\Forms;\nuse Symfony\\Component\\Validator\\Validation;\n\n$vendorDirectory = realpath(__DIR__.'/../vendor');\n$vendorFormDirectory = $vendorDirectory.'/symfony/form';\n$vendorValidatorDirectory = $vendorDirectory.'/symfony/validator';\n\n// creates the validator - details will vary\n$validator = Validation::createValidator();\n\n// there are built-in translations for the core error messages\n$translator->addResource(\n    'xlf',\n    $vendorFormDirectory.'/Resources/translations/validators.en.xlf',\n    'en',\n    'validators'\n);\n$translator->addResource(\n    'xlf',\n    $vendorValidatorDirectory.'/Resources/translations/validators.en.xlf',\n    'en',\n    'validators'\n);\n\n$formFactory = Forms::createFormFactoryBuilder()\n    // ...\n    ->addExtension(new ValidatorExtension($validator))\n    ->getFormFactory();\n```\n\n----------------------------------------\n\nTITLE: Accessing App Variable in Twig Templates\nDESCRIPTION: Demonstrates how to use the app global variable to access application information in Twig templates.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/templates.rst#2025-04-22_snippet_15\n\nLANGUAGE: html+twig\nCODE:\n```\n<p>Username: {{ app.user.username ?? 'Anonymous user' }}</p>\n{% if app.debug %}\n    <p>Request method: {{ app.request.method }}</p>\n    <p>Application Environment: {{ app.environment }}</p>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Adding a DateIntervalType Field with Selected Components - Symfony Forms - PHP\nDESCRIPTION: Demonstrates how to add a DateIntervalType form field to a Symfony form builder in PHP. It shows how to render the field as integer widgets for each interval component, configures it to show only days and hours, and (optionally) to use an ISO 8601 string as input. Requires the Symfony Form component with DateIntervalType available. The field's configuration controls which duration parts are visible and how user input is structured.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/dateinterval.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$builder->add('remindEvery', DateIntervalType::class, [\n    'widget'      => 'integer', // render a text field for each part\n    // 'input'    => 'string',  // if you want the field to return a ISO 8601 string back to you\n\n    // customize which text boxes are shown\n    'with_years'  => false,\n    'with_months' => false,\n    'with_days'   => true,\n    'with_hours'  => true,\n]);\n```\n\n----------------------------------------\n\nTITLE: Validating Programmatically Defined State Machines in Symfony (PHP)\nDESCRIPTION: Shows how to manually validate a programmatically defined state machine using the StateMachineValidator class. This is useful when workflows or state machines are not defined in configuration files.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/workflow/workflow-and-state-machine.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// ...\nuse Symfony\\Component\\Workflow\\Definition;\nuse Symfony\\Component\\Workflow\\StateMachine;\nuse Symfony\\Component\\Workflow\\Validator\\StateMachineValidator;\n\n$states = ['created', 'activated', 'deleted'];\n$stateTransitions = [\n    new Transition('activate', 'created', 'activated'),\n    // This duplicate event \"from\" the \"created\" state is invalid\n    new Transition('activate', 'created', 'deleted'),\n    new Transition('delete', 'activated', 'deleted'),\n];\n\n// No validation is done upon initialization\n$definition = new Definition($states, $stateTransitions);\n\n$validator = new StateMachineValidator();\n// Throws InvalidDefinitionException in case of an invalid definition\n$validator->validate($definition, 'My First StateMachine');\n```\n\n----------------------------------------\n\nTITLE: Configuring Symfony Service with Property Injection (PHP)\nDESCRIPTION: This PHP configuration defines a service named `app.newsletter_manager` for the `App\\Mail\\NewsletterManager` class. It uses the `property()` method on the service definition to inject the service referenced by `service('mailer')` into the public `mailer` property of the `app.newsletter_manager` instance.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/injection_types.rst#2025-04-22_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nuse App\\Mail\\NewsletterManager;\n\nreturn function(ContainerConfigurator $container): void {\n    $services = $container->services();\n\n    $services->set('app.newsletter_manager', NewsletterManager::class)\n        ->property('mailer', service('mailer'));\n};\n```\n\n----------------------------------------\n\nTITLE: Class Constraint Implementation\nDESCRIPTION: Shows implementation of a class-level constraint for validating payment receipts.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/validation/custom_constraint.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Validator;\n\nuse Symfony\\Component\\Validator\\Constraint;\n\n#[\\Attribute]\nclass ConfirmedPaymentReceipt extends Constraint\n{\n    public string $userDoesNotMatchMessage = 'User\\'s e-mail address does not match that of the receipt';\n\n    public function getTargets(): string\n    {\n        return self::CLASS_CONSTRAINT;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NotIdenticalTo Constraint with PHP\nDESCRIPTION: Demonstrates how to configure the NotIdenticalTo constraint using PHP in the loadValidatorMetadata method. It applies the constraint to the firstName and age properties of the Person class.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/NotIdenticalTo.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Person.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Person\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('age', new Assert\\NotIdenticalTo('Mary'));\n\n        $metadata->addPropertyConstraint('age', new Assert\\NotIdenticalTo(\n            value: 15,\n        ));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony Translation Component\nDESCRIPTION: Command to install the Symfony translation component using Composer.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/validation/translations.rst#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require symfony/translation\n```\n\n----------------------------------------\n\nTITLE: Setting and Updating Secrets in Symfony (terminal)\nDESCRIPTION: Illustrates multiple techniques for creating or updating secret values with the Symfony CLI. Secrets can be added interactively, from a file, piped from STDIN, or randomly generated. The secrets are stored separately for each environment and are used for configuring environment-specific sensitive settings.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/secrets.rst#2025-04-22_snippet_2\n\nLANGUAGE: terminal\nCODE:\n```\n$ php bin/console secrets:set DATABASE_PASSWORD\n```\n\nLANGUAGE: terminal\nCODE:\n```\n$ APP_RUNTIME_ENV=prod php bin/console secrets:set DATABASE_PASSWORD\n```\n\nLANGUAGE: terminal\nCODE:\n```\n$ php bin/console secrets:set DATABASE_PASSWORD ~/Download/password.json\n```\n\nLANGUAGE: terminal\nCODE:\n```\n$ echo -n \"$DB_PASS\" | php bin/console secrets:set DATABASE_PASSWORD -\n```\n\nLANGUAGE: terminal\nCODE:\n```\n$ php bin/console secrets:set REMEMBER_ME --random\n```\n\n----------------------------------------\n\nTITLE: Retrieving Full Property DocBlock (Symfony, PHP)\nDESCRIPTION: Explains how to get the complete DocBlock (documentation comment) for a class property as a string using getDocBlock. Available with symfony/property-info >= 7.1 and the relevant DocBlock extractor. The result contains the raw property DocComment, often multiline.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/property_info.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$docBlock = $propertyInfo->getDocBlock($class, $property);\n/*\n    Example Result\n    --------------\n    string(79):\n        This is the subsequent paragraph in the DocComment.\n        It can span multiple lines.\n*/\n```\n\n----------------------------------------\n\nTITLE: Injecting Decorated Service in PHP Configuration\nDESCRIPTION: Example showing how to manually inject the decorated service in PHP configuration. The '.inner' reference is passed as an argument to the decorating service using the service() function.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/service_decoration.rst#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nuse App\\DecoratingMailer;\nuse App\\Mailer;\n\nreturn function(ContainerConfigurator $container): void {\n    $services = $container->services();\n\n    $services->set(Mailer::class);\n\n    $services->set(DecoratingMailer::class)\n        ->decorate(Mailer::class)\n        // pass the old service as an argument\n        ->args([service('.inner')]);\n};\n```\n\n----------------------------------------\n\nTITLE: Checking Request Type in Symfony Event Listener\nDESCRIPTION: An event listener that checks if the current request is a main request or a sub-request before executing further logic. This is useful when dealing with embedded controllers in templates.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/event_dispatcher.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// src/EventListener/RequestListener.php\nnamespace App\\EventListener;\n\nuse Symfony\\Component\\HttpKernel\\Event\\RequestEvent;\n\nclass RequestListener\n{\n    public function onKernelRequest(RequestEvent $event): void\n    {\n        if (!$event->isMainRequest()) {\n            // don't do anything if it's not the main request\n            return;\n        }\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Response in kernel.response Event Listener\nDESCRIPTION: PHP code snippet showing how to modify the Response object in a kernel.response event listener.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/events.rst#2025-04-22_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\HttpKernel\\Event\\ResponseEvent;\n\npublic function onKernelResponse(ResponseEvent $event): void\n{\n    $response = $event->getResponse();\n\n    // ... modify the response object\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Legacy Route Loader for Symfony Integration\nDESCRIPTION: A custom route loader that integrates legacy PHP scripts into Symfony's routing system by scanning for PHP files and creating routes that map to a controller that can execute the legacy scripts.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/migration.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// src/Legacy/LegacyRouteLoader.php\nnamespace App\\Legacy;\n\nuse Symfony\\Component\\Config\\Loader\\Loader;\nuse Symfony\\Component\\Routing\\Route;\nuse Symfony\\Component\\Routing\\RouteCollection;\n\nclass LegacyRouteLoader extends Loader\n{\n    // ...\n\n    public function load($resource, $type = null): RouteCollection\n    {\n        $collection = new RouteCollection();\n        $finder = new Finder();\n        $finder->files()->name('*.php');\n\n        /** @var SplFileInfo $legacyScriptFile */\n        foreach ($finder->in($this->webDir) as $legacyScriptFile) {\n            // This assumes all legacy files use \".php\" as extension\n            $filename = basename($legacyScriptFile->getRelativePathname(), '.php');\n            $routeName = sprintf('app.legacy.%s', str_replace('/', '__', $filename));\n\n            $collection->add($routeName, new Route($legacyScriptFile->getRelativePathname(), [\n                '_controller' => 'App\\\\Controller\\\\LegacyController::loadLegacyScript',\n                'requestPath' => '/' . $legacyScriptFile->getRelativePathname(),\n                'legacyScript' => $legacyScriptFile->getPathname(),\n            ]));\n        }\n\n        return $collection;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Secrets in Doctrine PHP Configuration (php)\nDESCRIPTION: Commands how to access a secret environment variable in a Doctrine DBAL connection inside a PHP config. The env('DATABASE_PASSWORD') helper provides the secret at runtime, making this suitable for advanced Symfony project configurations. Requires the relevant Symfony Config classes.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/secrets.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/doctrine.php\nuse Symfony\\Config\\DoctrineConfig;\n\nreturn static function (DoctrineConfig $doctrine): void {\n    $doctrine->dbal()\n        ->connection('default')\n            ->password(env('DATABASE_PASSWORD'))\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Doctrine Event Listener Class in PHP\nDESCRIPTION: This snippet shows how to create a basic Doctrine event listener that responds to the postPersist event. It includes logic to filter for specific entity types and access both the entity object and entity manager.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine/events.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// src/EventListener/SearchIndexer.php\nnamespace App\\EventListener;\n\nuse App\\Entity\\Product;\nuse Doctrine\\ORM\\Event\\PostPersistEventArgs;\n\nclass SearchIndexer\n{\n    // the listener methods receive an argument which gives you access to\n    // both the entity object of the event and the entity manager itself\n    public function postPersist(PostPersistEventArgs $args): void\n    {\n        $entity = $args->getObject();\n\n        // if this listener only applies to certain entity types,\n        // add some code to check the entity type as early as possible\n        if (!$entity instanceof Product) {\n            return;\n        }\n\n        $entityManager = $args->getObjectManager();\n        // ... do something with the Product entity\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing NoSuspiciousCharacters Constraint with PHP Metadata\nDESCRIPTION: Example of applying the NoSuspiciousCharacters constraint to a username property using PHP metadata configuration in a User entity class.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/NoSuspiciousCharacters.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/User.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass User\n{\n    public static function loadValidatorMetadata(ClassMetadata $metadata)\n    {\n        $metadata->addPropertyConstraint('username', new Assert\\NoSuspiciousCharacters());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Annotated Classes to Compile in Symfony Extension\nDESCRIPTION: This snippet demonstrates how to hint Symfony about which classes contain annotations for compilation to improve performance. It uses the addAnnotatedClassesToCompile() method to specify classes or patterns for compilation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/bundles/extension.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function load(array $configs, ContainerBuilder $container): void\n{\n    // ...\n\n    $this->addAnnotatedClassesToCompile([\n        // you can define the fully qualified class names...\n        'Acme\\\\BlogBundle\\\\Controller\\\\AuthorController',\n        // ... but glob patterns are also supported:\n        'Acme\\\\BlogBundle\\\\Form\\\\**',\n\n        // ...\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Streaming Response with Callback\nDESCRIPTION: Demonstrates streaming response content using a PHP callback function.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#2025-04-22_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\HttpFoundation\\StreamedResponse;\n\n$response = new StreamedResponse();\n$response->setCallback(function (): void {\n    var_dump('Hello World');\n    flush();\n    sleep(2);\n    var_dump('Hello World');\n    flush();\n});\n$response->send();\n```\n\n----------------------------------------\n\nTITLE: Using an Invokable Kernel Controller with Attribute Routing - PHP 8 Attributes\nDESCRIPTION: Shows how to define the Kernel class as a single invokable controller method using PHP 8 attributes for routing. This is suitable when only one controller is needed. The class uses MicroKernelTrait, and the method __invoke handles incoming requests, such as returning a random number as JSON. All dependencies for attributes and HTTP Foundation must be installed.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/micro_kernel_trait.rst#2025-04-22_snippet_3\n\nLANGUAGE: php-attributes\nCODE:\n```\nclass Kernel extends BaseKernel\n{\n    use MicroKernelTrait;\n\n    // ...\n\n    #[Route('/random/{limit}', name: 'random_number')]\n    public function __invoke(int $limit): JsonResponse\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using waitUntil Method in Symfony Process\nDESCRIPTION: This example shows how to use the waitUntil method to wait for a specific condition in the process output before proceeding. It's useful for long-running processes that need initialization.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/process.rst#2025-04-22_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\n$process = new Process(['/usr/bin/php', 'slow-starting-server.php']);\n$process->start();\n\n// ... do other things\n\n// waits until the given anonymous function returns true\n$process->waitUntil(function ($type, $output): bool {\n    return $output === 'Ready. Waiting for commands...';\n});\n\n// ... do things after the process is ready\n```\n\n----------------------------------------\n\nTITLE: Registering Monolog Processor with XML Configuration in Symfony\nDESCRIPTION: XML configuration that registers a custom SessionRequestProcessor class as a Monolog processor and assigns it to the 'app' channel. This configuration should be placed in config/services.xml.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/logging/processors.rst#2025-04-22_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:monolog=\"http://symfony.com/schema/dic/monolog\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/monolog\n        https://symfony.com/schema/dic/monolog/monolog-1.0.xsd\">\n\n    <services>\n        <service id=\"App\\Logger\\SessionRequestProcessor\">\n            <tag name=\"monolog.processor\" channel=\"app\"/>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Monolog HTTP Code Exclusion in YAML\nDESCRIPTION: YAML configuration for excluding specific HTTP codes (403, 404) and path patterns from Monolog logging using the fingers_crossed handler\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/logging/monolog_exclude_http_codes.rst#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/prod/monolog.yaml\nmonolog:\n    handlers:\n        main:\n            # ...\n            type: fingers_crossed\n            handler: ...\n            excluded_http_codes: [403, 404, { 400: ['^/foo', '^/bar'] }]\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom Entry Point in Symfony Security YAML\nDESCRIPTION: This YAML configuration snippet shows how to register the custom `AuthenticationEntryPoint` class as the entry point for the `main` firewall within the `security.yaml` file. This ensures that the custom logic is triggered for unauthenticated access attempts.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/access_denied_handler.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\nfirewalls:\n    # ...\n\n    main:\n        # ...\n        entry_point: App\\Security\\AuthenticationEntryPoint\n```\n\n----------------------------------------\n\nTITLE: Configuring Link URL Handling in PHP for Symfony HTML Sanitizer\nDESCRIPTION: This snippet demonstrates how to configure link URL handling for the HTML Sanitizer in Symfony using PHP. It includes options for forcing HTTPS, specifying allowed URL schemes and hosts, and controlling relative links.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/html_sanitizer.rst#2025-04-22_snippet_30\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\HtmlSanitizer\\HtmlSanitizer;\nuse Symfony\\Component\\HtmlSanitizer\\HtmlSanitizerConfig;\n\n$postSanitizer = new HtmlSanitizer(\n    (new HtmlSanitizerConfig())\n        // if `true`, all URLs using the `http://` scheme will be converted to\n        // use the `https://` scheme instead. `http` still needs to be\n        // allowed in `allowedLinkSchemes`\n        ->forceHttpsUrls()\n\n        // specifies the allowed URL schemes. If the URL has a different scheme, the\n        // attribute will be dropped\n        ->allowedLinkSchemes(['http', 'https', 'mailto'])\n\n        // specifies the allowed hosts, the attribute will be dropped if the\n        // URL contains a different host which is not a subdomain of the allowed host\n        ->allowedLinkHosts(['symfony.com']) // Also allows any subdomain (i.e. www.symfony.com)\n\n        // whether to allow relative links (i.e. URLs without scheme and host)\n        ->allowRelativeLinks()\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing Form Error Display in Twig Based on Error Severity\nDESCRIPTION: This Twig template snippet shows how to customize the display of form errors by adding the error severity as an additional HTML class. It accesses the constraint's payload to determine the severity for each error.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/validation/severity.rst#2025-04-22_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{%- block form_errors -%}\n    {%- if errors|length > 0 -%}\n    <ul>\n        {%- for error in errors -%}\n            <li class=\"{{ error.cause.constraint.payload.severity ?? '' }}\">{{ error.message }}</li>\n        {%- endfor -%}\n    </ul>\n    {%- endif -%}\n{%- endblock form_errors -%}\n```\n\n----------------------------------------\n\nTITLE: Generating Fragment URIs in Twig\nDESCRIPTION: The `fragment_uri` function generates the URI for a controller fragment, typically used for asynchronous loading or ESI. It requires a `controller` reference and accepts optional boolean flags: `absolute` (generate absolute URL), `strict` (throw exception on error), and `sign` (sign the URI for security).\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#2025-04-22_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{{ fragment_uri(controller, absolute = false, strict = true, sign = true) }}\n```\n\n----------------------------------------\n\nTITLE: Generating a Version 1 Time-Based UUID in PHP\nDESCRIPTION: Demonstrates creating a UUIDv1 using the `Uuid::v1()` static method from the Symfony UID component. This UUID is generated based on the current timestamp and the device's MAC address. The result is an instance of `Symfony\\Component\\Uid\\UuidV1`.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/uid.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Uid\\Uuid;\n\n// $uuid is an instance of Symfony\\Component\\Uid\\UuidV1\n$uuid = Uuid::v1();\n```\n\n----------------------------------------\n\nTITLE: Dynamic Resource Locking Controller\nDESCRIPTION: Shows how to implement version-specific locking for PDF generation\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/lock.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Controller;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Lock\\LockFactory;\n\nclass PdfController extends AbstractController\n{\n    #[Route('/download/{version}/terms-of-use.pdf')]\n    public function downloadPdf($version, LockFactory $lockFactory, MyPdfGeneratorService $pdf): Response\n    {\n        $lock = $lockFactory->createLock('pdf-creation-'.$version);\n        $lock->acquire(true);\n\n        // heavy computation\n        $myPdf = $pdf->getOrCreatePdf($version);\n\n        $lock->release();\n\n        // ...\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Security Channel Handler in YAML\nDESCRIPTION: YAML configuration for routing security channel logs to a separate file in production environment\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/logging/channels_handlers.rst#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/monolog.yaml\nwhen@prod:\n    monolog:\n        handlers:\n            security:\n                level:    debug\n                type:     stream\n                path:     '%kernel.logs_dir%/security.log'\n                channels: [security]\n            main:\n                # channels: ['!security']\n```\n\n----------------------------------------\n\nTITLE: Configuring Parent Services in PHP\nDESCRIPTION: PHP configuration for setting up a parent service with common dependencies and child services that inherit from it. The abstract parent service defines common arguments and method calls.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/parent_services.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nuse App\\Repository\\BaseDoctrineRepository;\nuse App\\Repository\\DoctrinePostRepository;\nuse App\\Repository\\DoctrineUserRepository;\n\nreturn function(ContainerConfigurator $container): void {\n    $services = $container->services();\n\n    $services->set(BaseDoctrineRepository::class)\n        ->abstract()\n        ->args([service('doctrine.orm.entity_manager')])\n        ->call('setLogger', [service('logger')])\n    ;\n\n    $services->set(DoctrineUserRepository::class)\n        // extend the App\\Repository\\BaseDoctrineRepository service\n        ->parent(BaseDoctrineRepository::class)\n    ;\n\n    $services->set(DoctrinePostRepository::class)\n        ->parent(BaseDoctrineRepository::class)\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Delete Empty Collection Items Configuration\nDESCRIPTION: Shows how to configure the delete_empty option with a callable to remove empty items from a collection.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/collection.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\CollectionType;\n// ...\n\n$builder->add('users', CollectionType::class, [\n    // ...\n    'delete_empty' => function (?User $user = null): bool {\n        return null === $user || empty($user->getFirstName());\n    },\n]);\n```\n\n----------------------------------------\n\nTITLE: Simulating an HTTP Request using Request::create() in PHP\nDESCRIPTION: Illustrates how to create a new `Request` object programmatically using the static `Request::create()` method, specifying the URI, HTTP method, and parameters (GET or POST depending on the method). This is useful for testing or internal requests.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$request = Request::create(\n    '/hello-world',\n    'GET',\n    ['name' => 'Fabien']\n);\n```\n\n----------------------------------------\n\nTITLE: Dispatching a Generic Event Using a Constant Name in PHP\nDESCRIPTION: Shows how to dispatch a standard `Symfony\\Contracts\\EventDispatcher\\Event` instance using an event name defined as a constant (`StoreEvents::ORDER_PLACED`). This method is suitable when no custom event data is required for the listeners.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/event_dispatcher.rst#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Contracts\\EventDispatcher\\Event;\n\n$this->eventDispatcher->dispatch(new Event(), StoreEvents::ORDER_PLACED);\n```\n\n----------------------------------------\n\nTITLE: Running Symfony Scheduler Worker in Terminal\nDESCRIPTION: Commands to run a Symfony Scheduler worker using the messenger:consume command. This is the recommended method for consuming scheduled messages in a full-stack Symfony application.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/scheduler.rst#2025-04-22_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\n$ php bin/console messenger:consume scheduler_nameofyourschedule\n\n# use -vv if you need details about what's happening\n$ php bin/console messenger:consume scheduler_nameofyourschedule -vv\n```\n\n----------------------------------------\n\nTITLE: Basic Symfony Product Form Type Definition\nDESCRIPTION: Basic implementation of a ProductType form class extending AbstractType with name and price fields.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/dynamic_form_modification.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Form\\Type;\n\nuse App\\Entity\\Product;\nuse Symfony\\Component\\Form\\AbstractType;\nuse Symfony\\Component\\Form\\FormBuilderInterface;\nuse Symfony\\Component\\OptionsResolver\\OptionsResolver;\n\nclass ProductType extends AbstractType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options): void\n    {\n        $builder->add('name');\n        $builder->add('price');\n    }\n\n    public function configureOptions(OptionsResolver $resolver): void\n    {\n        $resolver->setDefaults([\n            'data_class' => Product::class,\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Numeric Country Codes using Symfony Intl in PHP\nDESCRIPTION: Shows how to work with ISO 3166-1 numeric country codes using the `Symfony\\Component\\Intl\\Countries` class. Examples include getting a map of alpha-2 to numeric codes, retrieving a specific numeric code from an alpha-2 code, getting the alpha-2 code from a numeric code, and checking if a numeric code exists.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/intl.rst#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Intl\\Countries;\n\n\\Locale::setDefault('en');\n\n$numericCodes = Countries::getNumericCodes();\n// ('alpha2Code' => 'numericCode')\n// => ['AA' => '958', 'AD' => '020', ...]\n\n$numericCode = Countries::getNumericCode('FR');\n// => '250'\n\n$alpha2 = Countries::getAlpha2FromNumeric('250');\n// => 'FR'\n\n$exists = Countries::numericCodeExists('250');\n// => true\n```\n\n----------------------------------------\n\nTITLE: Checking File or Directory Existence (PHP)\nDESCRIPTION: Demonstrates the `Filesystem::exists` method. It checks if a single absolute path (`/tmp/photos`) exists. It also shows checking multiple relative paths; it returns `false` if any item in the provided array does not exist.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/filesystem.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// if this absolute directory exists, returns true\n$filesystem->exists('/tmp/photos');\n\n// if rabbit.jpg exists and bottle.png does not exist, returns false\n// non-absolute paths are relative to the directory where the running PHP script is stored\n$filesystem->exists(['rabbit.jpg', 'bottle.png']);\n```\n\n----------------------------------------\n\nTITLE: Configuring RangeType Field in Symfony Form Builder\nDESCRIPTION: Demonstrates how to add a range type field to a Symfony form with min and max attribute constraints. The field will render as an HTML5 range slider input element.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/range.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\RangeType;\n// ...\n\n$builder->add('name', RangeType::class, [\n    'attr' => [\n        'min' => 5,\n        'max' => 50\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Using Logger in Symfony Controller\nDESCRIPTION: Demonstrates how to use the logger in a Symfony controller by type-hinting with LoggerInterface. The logger is automatically injected through Symfony's autowiring feature.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/quick_tour/the_architecture.rst#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n// src/Controller/DefaultController.php\nnamespace App\\Controller;\n\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Attribute\\Route;\n\nclass DefaultController extends AbstractController\n{\n    #[Route('/hello/{name}', methods: ['GET'])]\n    public function index(string $name, LoggerInterface $logger): Response\n    {\n        $logger->info(\"Saying hello to $name!\");\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Files by Content with Symfony Finder in PHP\nDESCRIPTION: Demonstrates how to exclude files from the search results if their content matches a given pattern (string or regex) using the `notContains()` method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/finder.rst#2025-04-22_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$finder->files()->notContains('dolor sit amet');\n```\n\n----------------------------------------\n\nTITLE: Defining ULID as Primary Key in Doctrine ORM Entity (PHP)\nDESCRIPTION: Demonstrates how to use a ULID as a primary key in a Doctrine ORM entity class. It shows the property definition with a custom ID generator and a getter method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/uid.rst#2025-04-22_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n#[ORM\\CustomIdGenerator(class: 'doctrine.ulid_generator')]\nprivate ?Ulid $id;\n\npublic function getId(): ?Ulid\n{\n    return $this->id;\n}\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Using a Defined Workflow in PHP\nDESCRIPTION: This example shows how to use the previously defined workflow instance (`$workflow`) with a `BlogPost` object. It demonstrates checking if a transition is allowed (`can`), applying a transition to change the object's state (`apply`), and retrieving all currently possible transitions (`getEnabledTransitions`).\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/workflow.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// ...\n// Consider that $blogPost is in place \"draft\" by default\n$blogPost = new BlogPost();\n\n$workflow->can($blogPost, 'publish'); // False\n$workflow->can($blogPost, 'to_review'); // True\n\n$workflow->apply($blogPost, 'to_review'); // $blogPost is now in place \"reviewed\"\n\n$workflow->can($blogPost, 'publish'); // True\n$workflow->getEnabledTransitions($blogPost); // $blogPost can perform transition \"publish\" or \"reject\"\n```\n\n----------------------------------------\n\nTITLE: Parsing a YAML File into a PHP Value\nDESCRIPTION: Illustrates how to use the `Yaml::parseFile` method to read and parse the content of a YAML file specified by its path. The method returns the corresponding PHP value (e.g., an array). It throws a `ParseException` on error.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/yaml.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Yaml\\Yaml;\n\n$value = Yaml::parseFile('/path/to/file.yaml');\n```\n\n----------------------------------------\n\nTITLE: Using snake_case to CamelCase Name Converter Standalone\nDESCRIPTION: Standalone PHP code for using the snake_case to CamelCase name converter with the Symfony Serializer.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer.rst#2025-04-22_snippet_38\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Serializer\\NameConverter\\SnakeCaseToCamelCaseNameConverter;\nuse Symfony\\Component\\Serializer\\Normalizer\\ObjectNormalizer;\n\n// ...\n$normalizers = [\n    new ObjectNormalizer(null, new SnakeCaseToCamelCaseNameConverter()),\n];\n$serializer = new Serializer($normalizers, $encoders);\n```\n\n----------------------------------------\n\nTITLE: Handling 404 Errors in Symfony PHP Controller\nDESCRIPTION: This code demonstrates how to handle 404 errors by throwing a NotFoundHttpException or using the createNotFoundException() shortcut method in a Symfony controller.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/controller.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException;\n\n// ...\npublic function index(): Response\n{\n    // retrieve the object from database\n    $product = ...;\n    if (!$product) {\n        throw $this->createNotFoundException('The product does not exist');\n\n        // the above is just a shortcut for:\n        // throw new NotFoundHttpException('The product does not exist');\n    }\n\n    return $this->render(/* ... */);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Friendly Configuration in AbstractBundle Class\nDESCRIPTION: This snippet shows how to implement friendly configuration in a bundle class extending AbstractBundle. It demonstrates configuring options and loading the extension based on user-provided configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/bundles/configuration.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// src/AcmeSocialBundle.php\nnamespace Acme\\SocialBundle;\n\nuse Symfony\\Component\\Config\\Definition\\Configurator\\DefinitionConfigurator;\nuse Symfony\\Component\\DependencyInjection\\ContainerBuilder;\nuse Symfony\\Component\\DependencyInjection\\Loader\\Configurator\\ContainerConfigurator;\nuse Symfony\\Component\\HttpKernel\\Bundle\\AbstractBundle;\n\nclass AcmeSocialBundle extends AbstractBundle\n{\n    public function configure(DefinitionConfigurator $definition): void\n    {\n        $definition->rootNode()\n            ->children()\n                ->arrayNode('twitter')\n                    ->children()\n                        ->integerNode('client_id')->end()\n                        ->scalarNode('client_secret')->end()\n                    ->end()\n                ->end() // twitter\n            ->end()\n        ;\n    }\n\n    public function loadExtension(array $config, ContainerConfigurator $container, ContainerBuilder $builder): void\n    {\n        $container->services()\n            ->get('acme_social.twitter_client')\n            ->arg(0, $config['twitter']['client_id'])\n            ->arg(1, $config['twitter']['client_secret'])\n        ;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Method Metadata Loader in Symfony Validator (PHP)\nDESCRIPTION: Demonstrates how to configure the Symfony Validator to use a static method for loading class metadata. Appears in the context of setting up the StaticMethodLoader via the addMethodMapping method on the ValidatorBuilder. Requires the symfony/validator component and the specified static method in the target class. Accepts the method name and returns a Validator instance capable of class-based validation using metadata provided by the static method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/validator/resources.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Validator\\Validation;\\n\\n$validator = Validation::createValidatorBuilder()\\n    ->addMethodMapping('loadValidatorMetadata')\\n    ->getValidator();\n```\n\n----------------------------------------\n\nTITLE: Basic Twig Template Structure\nDESCRIPTION: Example of a basic Twig template showing syntax for variables, control structures, and comments.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/templates.rst#2025-04-22_snippet_1\n\nLANGUAGE: html+twig\nCODE:\n```\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>Welcome to Symfony!</title>\n    </head>\n    <body>\n        <h1>{{ page_title }}</h1>\n\n        {% if user.isLoggedIn %}\n            Hello {{ user.name }}!\n        {% endif %}\n\n        {# ... #}\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Implementing Property Injection in PHP Class\nDESCRIPTION: Example of property injection where dependencies are injected directly into public properties of the class.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/injection_types.rst#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n// ...\nclass NewsletterManager\n{\n    public MailerInterface $mailer;\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Blog Post List with Twig Template in Symfony\nDESCRIPTION: This Twig template extends a base layout and renders a list of blog posts. It uses the 'path' function for generating URLs and loops through the 'posts' variable to display each post's title as a link.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/introduction/from_flat_php_to_symfony.rst#2025-04-22_snippet_11\n\nLANGUAGE: twig\nCODE:\n```\n{# templates/blog/list.html.twig #}\n{% extends 'base.html.twig' %}\n\n{% block title %}List of Posts{% endblock %}\n\n{% block body %}\n<h1>List of Posts</h1>\n<ul>\n    {% for post in posts %}\n    <li>\n        <a href=\"{{ path('blog_show', { id: post.id }) }}\">\n            {{ post.title }}\n        </a>\n    </li>\n    {% endfor %}\n</ul>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Workflow Event Listener with Attributes\nDESCRIPTION: Demonstrates how to create a workflow event listener using PHP attributes.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/workflow.rst#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nclass ArticleWorkflowEventListener\n{\n    #[AsTransitionListener(workflow: 'my-workflow', transition: 'published')]\n    public function onPublishedTransition(TransitionEvent $event): void\n    {\n        // ...\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Unit Testing SalaryCalculator with Mocked Doctrine Repository in PHP\nDESCRIPTION: This snippet demonstrates how to unit test the SalaryCalculator class by mocking the Doctrine EntityManager and Repository. It shows the process of creating mock objects and setting up expectations.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/testing/database.rst#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n// tests/Salary/SalaryCalculatorTest.php\nnamespace App\\Tests\\Salary;\n\nuse App\\Entity\\Employee;\nuse App\\Salary\\SalaryCalculator;\nuse Doctrine\\ORM\\EntityManager;\nuse Doctrine\\ORM\\EntityRepository;\nuse PHPUnit\\Framework\\TestCase;\n\nclass SalaryCalculatorTest extends TestCase\n{\n    public function testCalculateTotalSalary(): void\n    {\n        $employee = new Employee();\n        $employee->setSalary(1000);\n        $employee->setBonus(1100);\n\n        // Now, mock the repository so it returns the mock of the employee\n        $employeeRepository = $this->createMock(EntityRepository::class);\n        $employeeRepository->expects($this->any())\n            ->method('find')\n            ->willReturn($employee);\n\n        // Last, mock the EntityManager to return the mock of the repository\n        // (this is not needed if the class being tested injects the\n        // repository it uses instead of the entire entity manager)\n        $entityManager = $this->createMock(EntityManager::class);\n        $entityManager->expects($this->any())\n            ->method('getRepository')\n            ->willReturn($employeeRepository);\n\n        $salaryCalculator = new SalaryCalculator($entityManager);\n        $this->assertEquals(2100, $salaryCalculator->calculateTotalSalary(1));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Debugging Serializer Normalizers via Console\nDESCRIPTION: A terminal command to list all services tagged with `serializer.normalizer` within the Symfony container. This helps in debugging and checking the priorities of registered normalizers.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/dic_tags.rst#2025-04-22_snippet_30\n\nLANGUAGE: terminal\nCODE:\n```\n.. code-block:: terminal\n\n    $ php bin/console debug:container --tag serializer.normalizer\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Name Converter (PHP)\nDESCRIPTION: This PHP class implements Symfony's NameConverterInterface to add and remove a specific prefix ('org_') to object properties during serialization ('normalize') and deserialization ('denormalize'). Dependencies include the Symfony\\Component\\Serializer\\NameConverter\\NameConverterInterface interface. The key parameters are the property name, and optionally class, format, and context, with the converter handling both directions of conversion for field names. Available since Symfony 7.1 for advanced context features.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer/custom_name_converter.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Serializer;\n\nuse Symfony\\Component\\Serializer\\NameConverter\\NameConverterInterface;\n\nclass OrgPrefixNameConverter implements NameConverterInterface\n{\n    public function normalize(string $propertyName, ?string $class = null, ?string $format = null, array $context = []): string\n    {\n        // during normalization, add the prefix\n        return 'org_'.$propertyName;\n    }\n\n    public function denormalize(string $propertyName, ?string $class = null, ?string $format = null, array $context = []): string\n    {\n        // remove the 'org_' prefix on denormalizing\n        return str_starts_with($propertyName, 'org_') ? substr($propertyName, 4) : $propertyName;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Symfony Uuid Objects to Different Representations (PHP)\nDESCRIPTION: Demonstrates converting a `Symfony\\Component\\Uid\\Uuid` object into various formats using its instance methods. It shows outputs for binary (`toBinary`), Base32 (`toBase32`), Base58 (`toBase58`), standard RFC 4122 string (`toRfc4122`), hexadecimal (`toHex`), and the default string representation (`toString`).\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/uid.rst#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$uuid = Uuid::fromString('d9e7a184-5d5b-11ea-a62a-3499710062d0');\n\n$uuid->toBinary();  // string(16) \"\\xd9\\xe7\\xa1\\x84\\x5d\\x5b\\x11\\xea\\xa6\\x2a\\x34\\x99\\x71\\x00\\x62\\xd0\"\n$uuid->toBase32();  // string(26) \"6SWYGR8QAV27NACAHMK5RG0RPG\"\n$uuid->toBase58();  // string(22) \"TuetYWNHhmuSQ3xPoVLv9M\"\n$uuid->toRfc4122(); // string(36) \"d9e7a184-5d5b-11ea-a62a-3499710062d0\"\n$uuid->toHex();     // string(34) \"0xd9e7a1845d5b11eaa62a3499710062d0\"\n$uuid->toString();  // string(36) \"d9e7a184-5d5b-11ea-a62a-3499710062d0\"\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Content-ID for Embedded Images in Symfony Mailer\nDESCRIPTION: Shows how to set a custom Content-ID for embedded images using the setContentId() method and reference it in HTML content.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_34\n\nLANGUAGE: PHP\nCODE:\n```\n$part = new DataPart(new File('/path/to/images/signature.gif'));\n// according to the spec, the Content-ID value must include at least one '@' character\n$part->setContentId('footer-signature@my-app');\n\n$email = (new Email())\n    // ...\n    ->addPart($part->asInline())\n    ->html('... <img src=\"cid:footer-signature@my-app\"> ...')\n;\n```\n\n----------------------------------------\n\nTITLE: Configuring Symfony HTTP Cache in YAML\nDESCRIPTION: Enables the built-in HTTP cache reverse proxy in Symfony's production environment through YAML configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/http_cache.rst#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/framework.yaml\nwhen@prod:\n    framework:\n        http_cache: true\n```\n\n----------------------------------------\n\nTITLE: Using PHP Streams as Process Input in Symfony\nDESCRIPTION: This example shows how to use PHP streams as the standard input for a process. It demonstrates creating a temporary stream, writing to it, and using it as process input.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/process.rst#2025-04-22_snippet_17\n\nLANGUAGE: PHP\nCODE:\n```\n$stream = fopen('php://temporary', 'w+');\n\n$process = new Process(['cat']);\n$process->setInput($stream);\n$process->start();\n\nfwrite($stream, 'foo');\n\n// ... read process output or do other things\n\nfwrite($stream, 'bar');\nfclose($stream);\n\n$process->wait();\n\n// will echo: 'foobar'\necho $process->getOutput();\n```\n\n----------------------------------------\n\nTITLE: Creating Symbolic Links (PHP)\nDESCRIPTION: Uses the `Filesystem::symlink` method to create a symbolic link from a target path to a destination path. The third boolean argument provides a fallback mechanism to copy the source directory if symlinks are not supported by the filesystem.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/filesystem.rst#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n// creates a symbolic link\n$filesystem->symlink('/path/to/source', '/path/to/destination');\n// duplicates the source directory if the filesystem\n// does not support symbolic links\n$filesystem->symlink('/path/to/source', '/path/to/destination', true);\n```\n\n----------------------------------------\n\nTITLE: Dumping an Object with Uninitialized Properties using VarDumper (PHP)\nDESCRIPTION: Demonstrates how VarDumper represents uninitialized typed properties (introduced in PHP 7.4). An uninitialized property (`$foo`) is distinct from `null` and is shown in the dump with a question mark (`?`) followed by its type definition (`int|float`). Nullable properties assigned `null` (`$baz`) are shown normally.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/var_dumper.rst#2025-04-22_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nclass Foo\n{\n    // $foo is uninitialized, which is different from being null\n    private int|float $foo;\n    public ?string $baz = null;\n}\n\n$var = new Foo();\ndump($var);\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Choice Question in Symfony Command\nDESCRIPTION: Example of creating a multiple choice question that allows selecting multiple options\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/helpers/questionhelper.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Console\\Question\\ChoiceQuestion;\n\npublic function execute(InputInterface $input, OutputInterface $output): int\n{\n    $helper = $this->getHelper('question');\n    $question = new ChoiceQuestion(\n        'Please select your favorite colors (defaults to red and blue)',\n        ['red', 'blue', 'yellow'],\n        '0,1'\n    );\n    $question->setMultiselect(true);\n\n    $colors = $helper->ask($input, $output, $question);\n    $output->writeln('You have just selected: ' . implode(', ', $colors));\n\n    return Command::SUCCESS;\n}\n```\n\n----------------------------------------\n\nTITLE: Translating Messages in Twig Templates\nDESCRIPTION: Shows various ways to translate messages in Twig templates using filters and tags. Includes examples of passing parameters and specifying translation domains.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/translation.rst#2025-04-22_snippet_11\n\nLANGUAGE: Twig\nCODE:\n```\n{{ message|trans }}\n\n{{ message|trans({'%name%': 'Fabien'}, 'app') }}\n\n{% trans %}Hello %name%{% endtrans %}\n\n{% trans with {'%name%': 'Fabien'} from 'app' %}Hello %name%{% endtrans %}\n\n{% trans with {'%name%': 'Fabien'} from 'app' into 'fr' %}Hello %name%{% endtrans %}\n```\n\n----------------------------------------\n\nTITLE: Measuring Length and Whitespace Handling of Strings (PHP)\nDESCRIPTION: This snippet covers obtaining the length (bytes, code points, or graphemes), measuring display width, checking emptiness, and collapsing whitespace in strings using different String objects. Methods are demonstrated for ByteString, CodePointString, and UnicodeString. These utilities assist in text normalization and validation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/string.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// returns the number of graphemes, code points or bytes of the given string\n$word = 'नमस्ते';\n(new ByteString($word))->length();      // 18 (bytes)\n(new CodePointString($word))->length(); // 6 (code points)\n(new UnicodeString($word))->length();   // 4 (graphemes)\n\n// some symbols require double the width of others to represent them when using\n// a monospaced font (e.g. in a console). This method returns the total width\n// needed to represent the entire word\n$word = 'नमस्ते';\n(new ByteString($word))->width();      // 18\n(new CodePointString($word))->width(); // 4\n(new UnicodeString($word))->width();   // 4\n// if the text contains multiple lines, it returns the max width of all lines\n$text = \"<<<END\nThis is a\nmultiline text\nEND\";\nu($text)->width(); // 14\n\n// only returns TRUE if the string is exactly an empty string (not even whitespace)\nu('hello world')->isEmpty();  // false\nu('     ')->isEmpty();        // false\nu('')->isEmpty();             // true\n\n// removes all whitespace (' \\n\\r\\t\\x0C') from the start and end of the string and\n// replaces two or more consecutive whitespace characters with a single space (' ') character\nu(\"  \\n\\n   hello \\t   \\n\\r   world \\n    \\n\")->collapseWhitespace(); // 'hello world'\n```\n\n----------------------------------------\n\nTITLE: S/MIME Email Signing with Symfony Mailer\nDESCRIPTION: Example of signing an email using S/MIME protocol with certificate and private key authentication.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_55\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Mime\\Crypto\\SMimeSigner;\nuse Symfony\\Component\\Mime\\Email;\n\n$email = (new Email())\n    ->from('hello@example.com')\n    // ...\n    ->html('...');\n\n$signer = new SMimeSigner('/path/to/certificate.crt', '/path/to/certificate-private-key.key');\n// if the private key has a passphrase, pass it as the third argument\n// new SMimeSigner('/path/to/certificate.crt', '/path/to/certificate-private-key.key', 'the-passphrase');\n\n$signedEmail = $signer->sign($email);\n```\n\n----------------------------------------\n\nTITLE: Finding Profiles Based on Criteria in PHP\nDESCRIPTION: PHP code examples demonstrating how to find profiles using various criteria such as URL patterns, request methods, and time ranges.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/profiler.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// gets the latest 10 tokens\n$tokens = $profiler->find('', '', 10, '', '', '');\n\n// gets the latest 10 tokens for all URLs containing /admin/\n$tokens = $profiler->find('', '/admin/', 10, '', '', '');\n\n// gets the latest 10 tokens for all URLs not containing /api/\n$tokens = $profiler->find('', '!/api/', 10, '', '', '');\n\n// gets the latest 10 tokens for local POST requests\n$tokens = $profiler->find('127.0.0.1', '', 10, 'POST', '', '');\n\n// gets the latest 10 tokens for requests that happened between 2 and 4 days ago\n$tokens = $profiler->find('', '', 10, '', '4 days ago', '2 days ago');\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication with UserBadge in Symfony Security\nDESCRIPTION: Example of an authenticate method that returns a Passport with UserBadge and custom user lookup function.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/custom_authenticator.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\npublic function authenticate(Request $request): Passport\n{\n    // ...\n\n    return new Passport(\n        new UserBadge($email, function (string $userIdentifier): ?UserInterface {\n            return $this->userRepository->findOneBy(['email' => $userIdentifier]);\n        }),\n        $credentials\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Composer for Symfony Integration\nDESCRIPTION: This JSON snippet shows the Composer configuration for integrating Symfony components into the project. It specifies the required Symfony HTTP Foundation package and sets up autoloading for custom PHP files.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/introduction/from_flat_php_to_symfony.rst#2025-04-22_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"require\": {\n        \"symfony/http-foundation\": \"^4.0\"\n    },\n    \"autoload\": {\n        \"files\": [\"model.php\",\"controllers.php\"]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Impersonation Exit Link in Twig Template (HTML+TWIG)\nDESCRIPTION: HTML+Twig snippet to display an 'Exit impersonation' link when the current session is being impersonated (IS_IMPERSONATOR). Utilizes the is_granted function to check for impersonation and renders a safe path to exit via impersonation_exit_path(). This integrates with the Symfony Twig bridge.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/impersonating_user.rst#2025-04-22_snippet_8\n\nLANGUAGE: html+twig\nCODE:\n```\n{% if is_granted('IS_IMPERSONATOR') %}\\n    <a href=\\\"{{ impersonation_exit_path(path('homepage')) }}\\\">Exit impersonation</a>\\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Cache Parameters with setCache() Method in Symfony\nDESCRIPTION: Shows how to use the setCache() method to configure multiple cache settings with a single call. The example demonstrates all available cache parameters including max_age, etag, last_modified, and various cache control directives.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/http_cache.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// use this method to set several cache settings in one call\n// (this example lists all the available cache settings)\n$response->setCache([\n    'must_revalidate'  => false,\n    'no_cache'         => false,\n    'no_store'         => false,\n    'no_transform'     => false,\n    'public'           => true,\n    'private'          => false,\n    'proxy_revalidate' => false,\n    'max_age'          => 600,\n    's_maxage'         => 600,\n    'immutable'        => true,\n    'last_modified'    => new \\DateTime(),\n    'etag'             => 'abcdef'\n]);\n```\n\n----------------------------------------\n\nTITLE: Finding Files by Date with Symfony Finder in PHP\nDESCRIPTION: Shows how to find files based on their last modified date using the `date()` method. It accepts comparison operators (>, >=, <, <=, ==) or aliases (`since`, `after`, `until`, `before`) and a date string parsable by PHP's `strtotime()`.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/finder.rst#2025-04-22_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n$finder->date('since yesterday');\n```\n\n----------------------------------------\n\nTITLE: Using #[Autowire] Attribute for Non-Autowireable Arguments in PHP\nDESCRIPTION: Shows how to use the #[Autowire] attribute to provide values for scalar arguments, parameters, expressions, and environment variables that cannot be automatically autowired.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/autowiring.rst#2025-04-22_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\n// src/Service/MessageGenerator.php\nnamespace App\\Service;\n\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;\n\nclass MessageGenerator\n{\n    public function __construct(\n        #[Autowire(service: 'monolog.logger.request')]\n        private LoggerInterface $logger,\n        #[Autowire('%kernel.project_dir%/data')]\n        string $dataDir,\n        #[Autowire(param: 'kernel.debug')]\n        bool $debugMode,\n        #[Autowire(expression: 'service(\"App\\\\Mail\\\\MailerConfiguration\").getMailerMethod()')]\n        string $mailerMethod,\n        #[Autowire(env: 'SOME_ENV_VAR')]\n        string $senderName,\n        #[Autowire(env: 'bool:SOME_BOOL_ENV_VAR')]\n        bool $allowAttachments,\n    ) {\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Event-Based Schedule Management\nDESCRIPTION: Demonstrates schedule management using event listeners with pre-run, post-run and failure event handling\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/scheduler.rst#2025-04-22_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\nuse Symfony\\Component\\Scheduler\\Event\\PreRunEvent;\n\npublic function onMessage(PreRunEvent $event): void\n{\n    $schedule = $event->getSchedule();\n    $context = $event->getMessageContext();\n    $message = $event->getMessage();\n\n    // do something with the schedule, context or message\n\n    // and/or cancel message\n    $event->shouldCancel(true);\n}\n```\n\n----------------------------------------\n\nTITLE: Babel configuration for TypeScript in UX bundle\nDESCRIPTION: Babel configuration for transpiling TypeScript to JavaScript in a Symfony UX bundle. This setup uses the recommended presets for TypeScript and modern JavaScript features.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/create_ux_bundle.rst#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n    presets: [\n        ['@babel/preset-env', {\n            \"loose\": true,\n            \"modules\": false\n        }],\n        ['@babel/preset-typescript', { allowDeclareFields: true }]\n    ],\n    assumptions: {\n        superIsCallableConstructor: false,\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Using Autowired Lock Factory in Symfony Controller\nDESCRIPTION: This example demonstrates how to inject and use a named lock factory in a Symfony controller. The lock factory is autowired based on the camel-cased name of the lock suffixed with 'LockFactory'.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/lock.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/PdfController.php\nnamespace App\\Controller;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Lock\\LockFactory;\n\nclass PdfController extends AbstractController\n{\n    #[Route('/download/terms-of-use.pdf')]\n    public function downloadPdf(LockFactory $invoiceLockFactory, MyPdfGeneratorService $pdf): Response\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding JavaScript for Dynamic Tag Creation\nDESCRIPTION: Implements JavaScript functionality to dynamically add new tag forms when the user clicks the 'Add a tag' button.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/form_collections.rst#2025-04-22_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\ndocument\n  .querySelectorAll('.add_item_link')\n  .forEach(btn => {\n      btn.addEventListener(\"click\", addFormToCollection)\n  });\n```\n\n----------------------------------------\n\nTITLE: Sending SMS Messages with Symfony Notifier\nDESCRIPTION: Example of sending an SMS message using Symfony's TexterInterface. This code shows how to create an SMS message with recipient, content, sender, and options for priority, then sending it and getting the sent message response.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/notifier.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/SecurityController.php\nnamespace App\\Controller;\n\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Notifier\\Message\\SmsMessage;\nuse Symfony\\Component\\Notifier\\TexterInterface;\nuse Symfony\\Component\\Routing\\Attribute\\Route;\n\nclass SecurityController\n{\n    #[Route('/login/success')]\n    public function loginSuccess(TexterInterface $texter): Response\n    {\n        $options = (new ProviderOptions())\n            ->setPriority('high')\n        ;\n\n        $sms = new SmsMessage(\n            // the phone number to send the SMS message to\n            '+1411111111',\n            // the message\n            'A new login was detected!',\n            // optionally, you can override default \"from\" defined in transports\n            '+1422222222',\n            // you can also add options object implementing MessageOptionsInterface\n            $options\n        );\n\n        $sentMessage = $texter->send($sms);\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Callback Validation Logic\nDESCRIPTION: Example of implementing validation logic within a callback method to check for fake names and add violations to specific fields.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Callback.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Validator\\Context\\ExecutionContextInterface;\n\nclass Author\n{\n    // ...\n    private string $firstName;\n\n    public function validate(ExecutionContextInterface $context, mixed $payload): void\n    {\n        // somehow you have an array of \"fake names\"\n        $fakeNames = [/* ... */];\n\n        // check if the name is actually a fake name\n        if (in_array($this->getFirstName(), $fakeNames)) {\n            $context->buildViolation('This name sounds totally fake!')\n                ->atPath('firstName')\n                ->addViolation();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Static Callback from Different Class (PHP)\nDESCRIPTION: Example of using a static callback method from a different class for the Choice constraint using PHP code.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Choice.rst#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Author.php\nnamespace App\\Entity;\n\nuse App\\Entity\\Genre;\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Author\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('genre', new Assert\\Choice(\n            callback: [Genre::class, 'getGenres'],\n        ));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Sub-field Labels in RepeatedType PHP\nDESCRIPTION: Provides a PHP example demonstrating how to use the `first_options` and `second_options` within the `RepeatedType` configuration to set distinct labels for the two underlying fields. This is useful for clarifying the purpose of each field, such as 'Password' and 'Repeat Password'.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/repeated.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\RepeatedType;\n// ...\n\n$builder->add('password', RepeatedType::class, [\n    'first_options'  => ['label' => 'Password'],\n    'second_options' => ['label' => 'Repeat Password'],\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring ChoiceType Field with Advanced Options in PHP\nDESCRIPTION: This example shows how to configure a ChoiceType field with advanced options including custom choice values, labels, attributes, grouping, and preferred choices. It uses Category objects as choices and demonstrates various callback functions for customization.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/choice.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Entity\\Category;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\ChoiceType;\n// ...\n\n$builder->add('category', ChoiceType::class, [\n    'choices' => [\n        new Category('Cat1'),\n        new Category('Cat2'),\n        new Category('Cat3'),\n        new Category('Cat4'),\n    ],\n    'choice_value' => 'name',\n    'choice_label' => function (?Category $category): string {\n        return $category ? strtoupper($category->getName()) : '';\n    },\n    'choice_attr' => function (?Category $category): array {\n        return $category ? ['class' => 'category_'.strtolower($category->getName())] : [];\n    },\n    'group_by' => function (): string {\n        return rand(0, 1) === 1 ? 'Group A' : 'Group B';\n    },\n    'preferred_choices' => function (?Category $category): bool {\n        return $category && 100 < $category->getArticleCounts();\n    },\n]);\n```\n\n----------------------------------------\n\nTITLE: Accessing Cookies Via CookieJar and Cookie Objects (Symfony BrowserKit, PHP)\nDESCRIPTION: Demonstrates retrieving and inspecting cookies from the Client's CookieJar by making a request, then accessing individual cookies and their properties such as name, value, secure flag, domain, and expiration. Requires Acme\\Client and symfony/browser-kit; only non-expired cookies are returned.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/browser_kit.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Acme\\Client;\\n\\n// Make a request\\n$client = new Client();\\n$crawler = $client->request('GET', '/');\\n\\n// Get the cookie Jar\\n$cookieJar = $client->getCookieJar();\\n\\n// Get a cookie by name\\n$cookie = $cookieJar->get('name_of_the_cookie');\\n\\n// Get cookie data\\n$name       = $cookie->getName();\\n$value      = $cookie->getValue();\\n$rawValue   = $cookie->getRawValue();\\n$isSecure   = $cookie->isSecure();\\n$isHttpOnly = $cookie->isHttpOnly();\\n$isExpired  = $cookie->isExpired();\\n$expires    = $cookie->getExpiresTime();\\n$path       = $cookie->getPath();\\n$domain     = $cookie->getDomain();\\n$sameSite   = $cookie->getSameSite();\n```\n\n----------------------------------------\n\nTITLE: Evaluating Serialized Parsed Expressions in PHP\nDESCRIPTION: Demonstrates using a `SerializedParsedExpression` object with the `evaluate()` method. This involves parsing the expression, getting its nodes, serializing them, and then creating the `SerializedParsedExpression` object. This allows for storing the parsed representation externally (e.g., in cache) and evaluating it later without reparsing.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/expression_language.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\ExpressionLanguage\\SerializedParsedExpression;\n// ...\n\n$expression = new SerializedParsedExpression(\n    '1 + 4',\n    serialize($expressionLanguage->parse('1 + 4', [])->getNodes())\n);\n\nvar_dump($expressionLanguage->evaluate($expression)); // prints 5\n```\n\n----------------------------------------\n\nTITLE: Using Workflow Functions in Twig Templates\nDESCRIPTION: This Twig template demonstrates how to use various Symfony workflow functions in templates. It shows checking for possible transitions, looping through enabled transitions, and checking the current state of an object in the workflow.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/workflow.rst#2025-04-22_snippet_21\n\nLANGUAGE: twig\nCODE:\n```\n<h3>Actions on Blog Post</h3>\n{% if workflow_can(post, 'publish') %}\n    <a href=\"...\">Publish</a>\n{% endif %}\n{% if workflow_can(post, 'to_review') %}\n    <a href=\"...\">Submit to review</a>\n{% endif %}\n{% if workflow_can(post, 'reject') %}\n    <a href=\"...\">Reject</a>\n{% endif %}\n\n{# Or loop through the enabled transitions #}\n{% for transition in workflow_transitions(post) %}\n    <a href=\"...\">{{ transition.name }}</a>\n{% else %}\n    No actions available.\n{% endfor %}\n\n{# Check if the object is in some specific place #}\n{% if workflow_has_marked_place(post, 'reviewed') %}\n    <p>This post is ready for review.</p>\n{% endif %}\n\n{# Check if some place has been marked on the object #}\n{% if 'reviewed' in workflow_marked_places(post) %}\n    <span class=\"label\">Reviewed</span>\n{% endif %}\n\n{# Loop through the transition blockers #}\n```\n\n----------------------------------------\n\nTITLE: Using IsCsrfTokenValid with Expression in Symfony\nDESCRIPTION: This snippet demonstrates using the IsCsrfTokenValid attribute with an Expression object to dynamically generate the CSRF token ID based on the post object's ID. The token is retrieved from the 'token' request parameter.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/csrf.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Security\\Http\\Attribute\\IsCsrfTokenValid;\n// ...\n\n#[IsCsrfTokenValid(new Expression('\"delete-item-\" ~ args[\"post\"].getId()'), tokenKey: 'token')]\npublic function delete(Post $post): Response\n{\n    // ... do something, like deleting an object\n}\n```\n\n----------------------------------------\n\nTITLE: Role Checking Within Voters in Symfony\nDESCRIPTION: Example showing how to check for a role within a voter using AccessDecisionManager, with a warning about not using the Security::isGranted() method inside a voter.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/voters.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nif ($this->accessDecisionManager->decide($token, ['ROLE_SUPER_ADMIN'])) {\n    return true;\n}\n\n// ... all the normal voter logic\n```\n\nLANGUAGE: php\nCODE:\n```\n// DON'T DO THIS\nuse Symfony\\Component\\Security\\Core\\Security;\n// ...\n\nif ($this->security->isGranted('ROLE_SUPER_ADMIN')) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Generating HTML Abbreviation Element with Symfony\nDESCRIPTION: Demonstrates generating an HTML abbreviation element from a class path\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#2025-04-22_snippet_52\n\nLANGUAGE: html\nCODE:\n```\n<abbr title=\"App\\Entity\\Product\">Product</abbr>\n```\n\n----------------------------------------\n\nTITLE: Using Count Validator with YAML Configuration in Symfony\nDESCRIPTION: Example of implementing the Count validator using YAML configuration to ensure an emails property contains between 1 and 5 elements, with custom validation messages.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Count.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Participant:\n    properties:\n        emails:\n            - Count:\n                min: 1\n                max: 5\n                minMessage: 'You must specify at least one email'\n                maxMessage: 'You cannot specify more than {{ limit }} emails'\n```\n\n----------------------------------------\n\nTITLE: YAML Validation Configuration\nDESCRIPTION: Implementation of IsTrue constraint using YAML configuration format.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/IsTrue.rst#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Author:\n    getters:\n        tokenValid:\n            - 'IsTrue':\n                message: The token is invalid.\n```\n\n----------------------------------------\n\nTITLE: Configuring Monolog Handlers (PHP)\nDESCRIPTION: PHP configuration for setting up Monolog handlers in Symfony, equivalent to the YAML and XML examples. Defines handlers for file and syslog logging.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/logging.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/prod/monolog.php\nuse Psr\\Log\\LogLevel;\nuse Symfony\\Config\\MonologConfig;\n\nreturn static function (MonologConfig $monolog): void {\n    // this \"file_log\" key could be anything\n    $monolog->handler('file_log')\n        ->type('stream')\n        // log to var/logs/(environment).log\n        ->path('%kernel.logs_dir%/%kernel.environment%.log')\n        // log *all* messages (LogLevel::DEBUG is lowest level)\n        ->level(LogLevel::DEBUG);\n\n    $monolog->handler('syslog_handler')\n        ->type('syslog')\n        // log error-level messages and higher\n        ->level(LogLevel::ERROR);\n};\n```\n\n----------------------------------------\n\nTITLE: Fetching Localized Language Names using Symfony Intl in PHP\nDESCRIPTION: Shows how to retrieve language names translated into a specific locale (German, 'de') by passing the locale code as the last argument to the methods of the `Symfony\\Component\\Intl\\Languages` class. This overrides the system's default locale for the specific call. Requires the `symfony/intl` component and the PHP Intl extension.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/intl.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$languages = Languages::getNames('de');\n// => ['ab' => 'Abchasisch', 'ace' => 'Aceh', ...]\n\n$languages = Languages::getAlpha3Names('de');\n// => ['abk' => 'Abchasisch', 'ace' => 'Aceh', ...]\n\n$language = Languages::getName('fr', 'de');\n// => 'Französisch'\n\n$language = Languages::getAlpha3Name('fra', 'de');\n// => 'Französisch'\n```\n\n----------------------------------------\n\nTITLE: Last-Modified Cache Validation in Symfony Controller\nDESCRIPTION: Implementation of Last-Modified header based cache validation using the latest update timestamp from related entities.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/http_cache/validation.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Controller;\n\nuse App\\Entity\\Article;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass ArticleController extends AbstractController\n{\n    public function show(Article $article, Request $request): Response\n    {\n        $author = $article->getAuthor();\n\n        $articleDate = new \\DateTime($article->getUpdatedAt());\n        $authorDate = new \\DateTime($author->getUpdatedAt());\n\n        $date = $authorDate > $articleDate ? $authorDate : $articleDate;\n\n        $response = new Response();\n        $response->setLastModified($date);\n        $response->setPublic();\n\n        if ($response->isNotModified($request)) {\n            return $response;\n        }\n\n        return $response;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Permissions in Symfony Controller using IsGranted Attribute (PHP Attributes)\nDESCRIPTION: Illustrates how to use the `#[IsGranted]` PHP attribute on controller actions to check user permissions via the Symfony Voter system. It shows checking for 'view' and 'edit' permissions on a `Post` object (passed as route parameter and identified by the 'post' argument) before executing the action methods.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/voters.rst#2025-04-22_snippet_2\n\nLANGUAGE: php-attributes\nCODE:\n```\n// src/Controller/PostController.php\n\n// ...\nuse Symfony\\Component\\Security\\Http\\Attribute\\IsGranted;\n\nclass PostController extends AbstractController\n{\n    #[Route('/posts/{id}', name: 'post_show')]\n    // check for \"view\" access: calls all voters\n    #[IsGranted('view', 'post')]\n    public function show(Post $post): Response\n    {\n        // ...\n    }\n\n    #[Route('/posts/{id}/edit', name: 'post_edit')]\n    // check for \"edit\" access: calls all voters\n    #[IsGranted('edit', 'post')]\n    public function edit(Post $post): Response\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Language Code Existence using Symfony Intl in PHP\nDESCRIPTION: Illustrates how to check if a given ISO 639-1 alpha-2 or ISO 639-2 alpha-3 language code is valid using the `Languages::exists()` and `Languages::alpha3CodeExists()` static methods, respectively. These methods return a boolean value and can be used to prevent `MissingResourceException` errors.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/intl.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$isValidLanguage = Languages::exists($languageCode);\n```\n\nLANGUAGE: php\nCODE:\n```\n$isValidLanguage = Languages::alpha3CodeExists($alpha3Code);\n```\n\n----------------------------------------\n\nTITLE: Capturing Dump Output Using Memory Stream in PHP\nDESCRIPTION: Demonstrates an alternative method to capture dump output as a string using a memory stream. This approach uses PHP's stream functions to store and retrieve the dump output.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/var_dumper.rst#2025-04-22_snippet_24\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\VarDumper\\Cloner\\VarCloner;\nuse Symfony\\Component\\VarDumper\\Dumper\\CliDumper;\n\n$cloner = new VarCloner();\n$dumper = new CliDumper();\n$output = fopen('php://memory', 'r+b');\n\n$dumper->dump($cloner->cloneVar($variable), $output);\n$output = stream_get_contents($output, -1, 0);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Cache Warmer in PHP\nDESCRIPTION: Example implementation of a custom cache warmer service class that implements CacheWarmerInterface.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/dic_tags.rst#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n// src/Cache/MyCustomWarmer.php\nnamespace App\\Cache;\n\nuse App\\Foo\\Bar;\nuse Symfony\\Component\\HttpKernel\\CacheWarmer\\CacheWarmerInterface;\n\nclass MyCustomWarmer implements CacheWarmerInterface\n{\n    public function warmUp(string $cacheDir, ?string $buildDir = null): array\n    {\n        // ... do some sort of operations to \"warm\" your cache\n\n        $filesAndClassesToPreload = [];\n        $filesAndClassesToPreload[] = Bar::class;\n\n        foreach (scandir($someCacheDir) as $file) {\n            if (!is_dir($file = $someCacheDir.'/'.$file)) {\n                $filesAndClassesToPreload[] = $file;\n            }\n        }\n\n        return $filesAndClassesToPreload;\n    }\n\n    public function isOptional(): bool\n    {\n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Order Form Type in PHP\nDESCRIPTION: Creates an OrderType form that uses the custom ShippingType field. Demonstrates how to integrate custom form types into larger forms.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/create_custom_field_type.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// src/Form/Type/OrderType.php\nnamespace App\\Form\\Type;\n\nuse App\\Form\\Type\\ShippingType;\nuse Symfony\\Component\\Form\\AbstractType;\nuse Symfony\\Component\\Form\\FormBuilderInterface;\n\nclass OrderType extends AbstractType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options): void\n    {\n        $builder\n            // ...\n            ->add('shipping', ShippingType::class)\n        ;\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Base Path Relationships using Symfony Path (PHP)\nDESCRIPTION: This snippet utilizes Symfony\\Component\\Filesystem\\Path::isBasePath to determine if one path is the base path (prefix) of another, even after resolving '..' segments. Input: two string paths. Output: boolean. Useful for verifying directory hierarchies. Requires Symfony\\Component\\Filesystem\\Path.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/filesystem.rst#2025-04-22_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nPath::isBasePath(\"/var/www\", \"/var/www/project\");\n// => true\n```\n\nLANGUAGE: php\nCODE:\n```\nPath::isBasePath(\"/var/www\", \"/var/www/project/..\");\n// => true\n```\n\nLANGUAGE: php\nCODE:\n```\nPath::isBasePath(\"/var/www\", \"/var/www/project/../..\");\n// => false\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Twig Template\nDESCRIPTION: Example of a simple Twig template file showing variable usage and basic structure.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/templates.rst#2025-04-22_snippet_3\n\nLANGUAGE: html+twig\nCODE:\n```\n{# templates/user/notifications.html.twig #}\n<h1>Hello {{ user_first_name }}!</h1>\n<p>You have {{ notifications|length }} new notifications.</p>\n```\n\n----------------------------------------\n\nTITLE: Configuring Validation Metadata Cache in Symfony Validator (PHP)\nDESCRIPTION: Illustrates how to set a custom PSR-6 cache for storing validation metadata loaded from various sources. Uses setMappingCache with an instance implementing Psr\\Cache\\CacheItemPoolInterface to optimize repeated metadata lookups. Requires symfony/validator and a compatible PSR-6 cache implementation. This improves performance by caching combined class metadata between requests.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/validator/resources.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Validator\\Validation;\\n\\n$validator = Validation::createValidatorBuilder()\\n    // ... add loaders\\n    ->setMappingCache(new SomePsr6Cache())\\n    ->getValidator();\n```\n\n----------------------------------------\n\nTITLE: Initializing CombinedStore with ConsensusStrategy for Symfony Lock Component\nDESCRIPTION: Creates a CombinedStore instance with multiple Redis stores and a ConsensusStrategy. This setup is designed for high availability, requiring a majority of stores to acquire the lock.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/lock.rst#2025-04-22_snippet_25\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Lock\\Store\\CombinedStore;\nuse Symfony\\Component\\Lock\\Store\\RedisStore;\nuse Symfony\\Component\\Lock\\Strategy\\ConsensusStrategy;\n\n$stores = [];\nforeach (['server1', 'server2', 'server3'] as $server) {\n    $redis = new \\Redis();\n    $redis->connect($server);\n\n    $stores[] = new RedisStore($redis);\n}\n\n$store = new CombinedStore($stores, new ConsensusStrategy());\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony Dependencies (Terminal)\nDESCRIPTION: This command installs the required Symfony packages for the application, including yaml, twig-bundle, and web-profiler-bundle.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/micro_kernel_trait.rst#2025-04-22_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\n$ composer require symfony/yaml symfony/twig-bundle symfony/web-profiler-bundle\n```\n\n----------------------------------------\n\nTITLE: Enabling Optional Configuration Sections in Symfony\nDESCRIPTION: PHP code example showing how to use the canBeEnabled shortcut method for optional configuration sections.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/config/definition.rst#2025-04-22_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n$arrayNode\n    ->canBeEnabled()\n;\n\n// is equivalent to\n\n$arrayNode\n    ->treatFalseLike(['enabled' => false])\n    ->treatTrueLike(['enabled' => true])\n    ->treatNullLike(['enabled' => true])\n    ->children()\n        ->booleanNode('enabled')\n            ->defaultFalse()\n;\n```\n\n----------------------------------------\n\nTITLE: Handling Circular References in PHP Classes\nDESCRIPTION: Example demonstrating circular reference handling between Organization and Member classes using custom handlers.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer.rst#2025-04-22_snippet_56\n\nLANGUAGE: php\nCODE:\n```\nclass Organization\n{\n    public function __construct(\n        private string $name,\n        private array $members = []\n    ) {\n    }\n\n    public function getName(): string\n    {\n        return $this->name;\n    }\n\n    public function addMember(Member $member): void\n    {\n        $this->members[] = $member;\n    }\n\n    public function getMembers(): array\n    {\n        return $this->members;\n    }\n}\n\nclass Member\n{\n    private Organization $organization;\n\n    public function __construct(\n        private string $name\n    ) {\n    }\n\n    public function getName(): string\n    {\n        return $this->name;\n    }\n\n    public function setOrganization(Organization $organization): void\n    {\n        $this->organization = $organization;\n    }\n\n    public function getOrganization(): Organization\n    {\n        return $this->organization;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Filesystem Tag-Aware Cache Adapter in PHP\nDESCRIPTION: Creates a FilesystemTagAwareAdapter instance for tag-based cache invalidation with improved read performance when using tags.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/cache/adapters/filesystem_adapter.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Cache\\Adapter\\FilesystemTagAwareAdapter;\n\n$cache = new FilesystemTagAwareAdapter();\n```\n\n----------------------------------------\n\nTITLE: Enforcing Square Images with PHP Attributes\nDESCRIPTION: Using the Image constraint with PHP attributes to enforce that an image must be square by disabling both landscape and portrait orientations.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Image.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Author.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\HttpFoundation\\File\\File;\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Author\n{\n    #[Assert\\Image(\n        allowLandscape: false,\n        allowPortrait: false,\n    )]\n    protected File $headshot;\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Directories from Search with Symfony Finder in PHP\nDESCRIPTION: Demonstrates how to exclude specific directories from the search results using the `exclude()` method. The paths provided to `exclude()` must be relative to the directories specified using `in()`.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/finder.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// directories passed as argument must be relative to the ones defined with the in() method\n$finder->in(__DIR__)->exclude('ruby');\n```\n\n----------------------------------------\n\nTITLE: Parsing Serialized PHP Objects from YAML in PHP\nDESCRIPTION: Shows how to parse a YAML string containing a serialized PHP object (marked with `!php/object`) back into a PHP object using the `Yaml::PARSE_OBJECT` flag. This uses PHP's `unserialize()` internally.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/yaml.rst#2025-04-22_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$parsed = Yaml::parse($dumped, Yaml::PARSE_OBJECT);\nvar_dump(is_object($parsed)); // true\necho $parsed->foo; // bar\n```\n\n----------------------------------------\n\nTITLE: Accessing Root Section Events in Symfony Stopwatch\nDESCRIPTION: Shows how to access all events from the root section, which contains events that don't belong to any named section. This is useful for retrieving all stopwatch events without knowing their names.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/performance.rst#2025-04-22_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Stopwatch\\Stopwatch;\n\nforeach($this->stopwatch->getSectionEvents(Stopwatch::ROOT) as $event) {\n    echo (string) $event;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Private Bundle Registration in Symfony Flex Recipe (JSON)\nDESCRIPTION: Illustrates a Symfony Flex recipe specifically for a private bundle (`acme/private-bundle`). It shows how to use the `bundles` key within the `manifest` to register the bundle's fully qualified class name (`Acme\\\\PrivateBundle\\\\AcmePrivateBundle`) in the project's `bundles.php` file, specifying the environments it should be active in (e.g., `[\"all\"]`). The `ref` key is a required random hash to track recipe modifications.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/flex_private_recipes.rst#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"manifests\": {\n        \"acme/private-bundle\": {\n            \"manifest\": {\n                \"bundles\": {\n                    \"Acme\\\\PrivateBundle\\\\AcmePrivateBundle\": [\n                        \"all\"\n                    ]\n                }\n            },\n            \"ref\": \"7405f3af1312d1f9121afed4dddef636c6c7ff00\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Complex Database Configuration Tree in Symfony\nDESCRIPTION: PHP code example showing how to build a complex configuration tree for database connections with various validation constraints.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/config/definition.rst#2025-04-22_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Config\\Definition\\Builder\\NodeDefinition;\n\npublic function getConfigTreeBuilder(): TreeBuilder\n{\n    $treeBuilder = new TreeBuilder('database');\n\n    $treeBuilder->getRootNode()\n        ->children()\n            ->arrayNode('connection')\n                ->children()\n                    ->scalarNode('driver')\n                        ->isRequired()\n                        ->cannotBeEmpty()\n                    ->end()\n                    ->scalarNode('host')\n                        ->defaultValue('localhost')\n                    ->end()\n                    ->scalarNode('username')->end()\n                    ->scalarNode('password')->end()\n                    ->booleanNode('memory')\n                        ->defaultFalse()\n                    ->end()\n                ->end()\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Symfony Console Command (PHP)\nDESCRIPTION: This snippet defines a basic Symfony Console command named 'hello:world' using the `AsCommand` attribute. The `HelloWorldCommand` extends the base `Command` class, sets a description in `configure()`, and outputs 'Hello World' in the `execute()` method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/changing_default_command.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace Acme\\Console\\Command;\n\nuse Symfony\\Component\\Console\\Attribute\\AsCommand;\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n#[AsCommand(name: 'hello:world')]\nclass HelloWorldCommand extends Command\n{\n    protected function configure(): void\n    {\n        $this->setDescription('Outputs \"Hello World\"');\n    }\n\n    protected function execute(InputInterface $input, OutputInterface $output): int\n    {\n        $output->writeln('Hello World');\n\n        return Command::SUCCESS;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dumping an Array with Hard References using VarDumper (PHP)\nDESCRIPTION: Demonstrates how VarDumper displays hard references (using PHP's `&` reference assignment) within arrays. Elements `1` and `0` reference the same integer, and elements `3` and `2` reference the same array. These hard references are indicated in the dump output with `&number` prefixes.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/var_dumper.rst#2025-04-22_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$var = [];\n$var[0] = 1;\n$var[1] =& $var[0];\n$var[1] += 1;\n$var[2] = [\"Hard references (circular or sibling)\"];\n$var[3] =& $var[2];\n$var[3][] = \"are dumped using `&number` prefixes.\";\ndump($var);\n```\n\n----------------------------------------\n\nTITLE: Converting Between Alpha-2 and Alpha-3 Language Codes in PHP\nDESCRIPTION: Demonstrates converting between two-letter ISO 639-1 alpha-2 language codes and three-letter ISO 639-2 alpha-3 language codes using the `Languages::getAlpha3Code()` and `Languages::getAlpha2Code()` static methods from the Symfony Intl component.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/intl.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$alpha3Code = Languages::getAlpha3Code($alpha2Code);\n```\n\nLANGUAGE: php\nCODE:\n```\n$alpha2Code = Languages::getAlpha2Code($alpha3Code);\n```\n\n----------------------------------------\n\nTITLE: Applying Currency Constraint using PHP in Symfony Entity\nDESCRIPTION: This PHP code shows how to apply the Currency constraint to a property using the loadValidatorMetadata method in a Symfony entity class. It's useful when you want to define validation rules programmatically.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Currency.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Order.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Order\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('currency', new Assert\\Currency());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Security Passport with UserBadge in PHP\nDESCRIPTION: Demonstrates how to instantiate a Symfony Security `Passport` object. It specifically shows using a `UserBadge`, which encapsulates the user identifier (like an email address) used to look up the user via a configured user provider, along with provided credentials.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/custom_authenticator.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Security\\Http\\Authenticator\\Passport\\Badge\\UserBadge;\n\n// ...\n$passport = new Passport(new UserBadge($email), $credentials);\n```\n\n----------------------------------------\n\nTITLE: Defining a Scheduler Message Class in PHP\nDESCRIPTION: Defines a simple PHP class `SendDailySalesReports` representing a message or task to be handled by the scheduler. This class encapsulates data needed for the task, such as an ID passed via the constructor.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/scheduler.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// src/Scheduler/Message/SendDailySalesReports.php\nnamespace App\\Scheduler\\Message;\n\nclass SendDailySalesReports\n{\n    public function __construct(private int $id) {}\n\n    public function getId(): int\n    {\n        return $this->id;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Validation Method for Class-Level Constraints in Symfony Validator (PHP)\nDESCRIPTION: This snippet defines a custom validate() method for applying class-level validation logic via the Callback constraint in Symfony's Validator. The method uses the ExecutionContextInterface for registering violations or advanced validation logic. The input is the current object instance and an execution context argument; the output is determined by how violations are added to the context. This enables flexible, arbitrary class-level validation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/validator/metadata.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// ...\nuse Symfony\\Component\\Validator\\Context\\ExecutionContextInterface;\n\npublic function validate(ExecutionContextInterface $context): void\n{\n    // ...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Trusted Proxies for Symfony HttpFoundation\nDESCRIPTION: Example of configuring trusted proxies for secure client IP retrieval in Symfony HttpFoundation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/create_framework/http_foundation.rst#2025-04-22_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nRequest::setTrustedProxies(['10.0.0.1'], Request::HEADER_X_FORWARDED_FOR);\n\nif ($myIp === $request->getClientIp()) {\n```\n\n----------------------------------------\n\nTITLE: Configuring PdoStore for SQL Database-based Locks in Symfony\nDESCRIPTION: Code demonstrating how to set up a PdoStore that uses a PDO connection or DSN for SQL database-based lock persistence. This store doesn't support blocking and requires a TTL to avoid stalled locks.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/lock.rst#2025-04-22_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Lock\\Store\\PdoStore;\n\n// a PDO instance or DSN for lazy connecting through PDO\n$databaseConnectionOrDSN = 'mysql:host=127.0.0.1;dbname=app';\n$store = new PdoStore($databaseConnectionOrDSN, ['db_username' => 'myuser', 'db_password' => 'mypassword']);\n```\n\n----------------------------------------\n\nTITLE: Configuring Validation Groups in Form Class\nDESCRIPTION: Demonstrates how to set validation groups within a form class by implementing the configureOptions method. This method uses OptionsResolver to define default form options including validation groups.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/validation_groups.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\OptionsResolver\\OptionsResolver;\n\npublic function configureOptions(OptionsResolver $resolver): void\n{\n    $resolver->setDefaults([\n        // ...\n        'validation_groups' => ['registration'],\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Entity Managers in PHP\nDESCRIPTION: PHP configuration for setting up two Doctrine entity managers with separate database connections and entity mappings.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine/multiple_entity_managers.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Config\\DoctrineConfig;\n\nreturn static function (DoctrineConfig $doctrine): void {\n    // Connections:\n    $doctrine->dbal()\n        ->connection('default')\n        ->url(env('DATABASE_URL')->resolve());\n    $doctrine->dbal()\n        ->connection('customer')\n        ->url(env('CUSTOMER_DATABASE_URL')->resolve());\n    $doctrine->dbal()->defaultConnection('default');\n\n    // Entity Managers:\n    $doctrine->orm()->defaultEntityManager('default');\n    $defaultEntityManager = $doctrine->orm()->entityManager('default');\n    $defaultEntityManager->connection('default');\n    $defaultEntityManager->mapping('Main')\n        ->isBundle(false)\n        ->dir('%kernel.project_dir%/src/Entity/Main')\n        ->prefix('App\\Entity\\Main')\n        ->alias('Main');\n    $customerEntityManager = $doctrine->orm()->entityManager('customer');\n    $customerEntityManager->connection('customer');\n    $customerEntityManager->mapping('Customer')\n        ->isBundle(false)\n        ->dir('%kernel.project_dir%/src/Entity/Customer')\n        ->prefix('App\\Entity\\Customer')\n        ->alias('Customer')\n    ;\n```\n\n----------------------------------------\n\nTITLE: Implementing JWT Token Provider in PHP\nDESCRIPTION: Creates a custom token provider class that implements TokenProviderInterface to generate JWT tokens for Mercure hub authentication.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mercure.rst#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n// src/Mercure/MyTokenProvider.php\nnamespace App\\Mercure;\n\nuse Symfony\\Component\\Mercure\\Jwt\\TokenProviderInterface;\n\nfinal class MyTokenProvider implements TokenProviderInterface\n{\n    public function getJwt(): string\n    {\n        return 'the-JWT';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Access Token Extractors (XML - Symfony)\nDESCRIPTION: Shows how to set up several token extractors for the authenticator using XML. Each <token-extractor> specifies either a built-in or custom extractor. Add these elements in the order of evaluation under <access-token>. Used in config/packages/security.xml for firewall configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/access_token.rst#2025-04-22_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/security.xml -->\\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<srv:container xmlns=\\\"http://symfony.com/schema/dic/security\\\"\\n    xmlns:srv=\\\"http://symfony.com/schema/dic/services\\\"\\n    xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n    xsi:schemaLocation=\\\"http://symfony.com/schema/dic/services\\n        https://symfony.com/schema/dic/services/services-1.0.xsd\\n        http://symfony.com/schema/dic/security\\n        https://symfony.com/schema/dic/security/security-1.0.xsd\\\">\\n\\n    <config>\\n        <firewall name=\\\"main\\\">\\n            <access-token token-handler=\\\"App\\\\Security\\\\AccessTokenHandler\\\">\\n                <token-extractor>header</token-extractor>\\n                <token-extractor>App\\Security\\CustomTokenExtractor</token-extractor>\\n            </access-token>\\n        </firewall>\\n    </config>\\n</srv:container>\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables from JSON File in Symfony\nDESCRIPTION: Implementation of a custom environment variable loader that reads variables from a JSON file by implementing the EnvVarLoaderInterface.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration.rst#2025-04-22_snippet_37\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"vars\": {\n        \"APP_ENV\": \"prod\",\n        \"APP_DEBUG\": false\n    }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\DependencyInjection;\n\nuse Symfony\\Component\\DependencyInjection\\EnvVarLoaderInterface;\n\nfinal class JsonEnvVarLoader implements EnvVarLoaderInterface\n{\n    private const ENV_VARS_FILE = 'env.json';\n\n    public function loadEnvVars(): array\n    {\n        $fileName = __DIR__.\\DIRECTORY_SEPARATOR.self::ENV_VARS_FILE;\n        if (!is_file($fileName)) {\n            // throw an exception or just ignore this loader, depending on your needs\n        }\n\n        $content = json_decode(file_get_contents($fileName), true);\n\n        return $content['vars'];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Recurring Messages with From and Until Time Constraints in PHP\nDESCRIPTION: Demonstrates how to set start and end times for recurring messages using from and until parameters.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/scheduler.rst#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n// create a message every day at 13:00\n$from = new \\DateTimeImmutable('13:00', new \\DateTimeZone('Europe/Paris'));\nRecurringMessage::every('1 day', new Message(), $from);\n\n// create a message every day until a specific date\n$until = '2023-06-12';\nRecurringMessage::every('1 day', new Message(), null, $until);\n\n// combine from and until for more precise control\n$from = new \\DateTimeImmutable('2023-01-01 13:47', new \\DateTimeZone('Europe/Paris'));\n$until = '2023-06-12';\nRecurringMessage::every('first Monday of next month', new Message(), $from, $until);\n```\n\n----------------------------------------\n\nTITLE: Finding Files by Name Pattern (Glob) with Symfony Finder in PHP\nDESCRIPTION: Illustrates how to find files matching a specific name pattern using globs (e.g., `*.php`) with the `name()` method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/finder.rst#2025-04-22_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$finder->files()->name('*.php');\n```\n\n----------------------------------------\n\nTITLE: Using Array with Expressions for Subject in #[IsGranted] Attribute (PHP)\nDESCRIPTION: Shows how to provide an array as the `subject` argument in the `#[IsGranted]` attribute, where array values can be strings (referencing controller arguments) or `Expression` objects. Keys in the array act as aliases accessible within the `attribute` expression (e.g., `subject[\"author\"]`). This facilitates complex checks involving multiple related objects or properties. Requires a `Post` entity, Symfony Security, ExpressionLanguage, and HTTP Foundation components.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/expressions.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n#[IsGranted(\n    attribute: new Expression('user === subject[\"author\"] and subject[\"post\"].isPublished()'),\n    subject: [\n        'author' => new Expression('args[\"post\"].getAuthor()'),\n        'post',\n    ],\n)]\npublic function index(Post $post): Response\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Encore dependencies via Composer and npm for Symfony\nDESCRIPTION: Commands to install Webpack Encore dependencies using Composer for PHP and npm for JavaScript in a Symfony application.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/installation.rst#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ composer require symfony/webpack-encore-bundle\n$ npm install\n```\n\n----------------------------------------\n\nTITLE: Storing ULIDs in Doctrine Entities with Symfony\nDESCRIPTION: Shows how to use the UlidType in Doctrine entities and how to auto-generate ULID values for entity primary keys in Symfony applications.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/uid.rst#2025-04-22_snippet_20\n\nLANGUAGE: PHP\nCODE:\n```\n// src/Entity/Product.php\nnamespace App\\Entity;\n\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Symfony\\Bridge\\Doctrine\\Types\\UlidType;\nuse Symfony\\Component\\Uid\\Ulid;\n\n#[ORM\\Entity(repositoryClass: ProductRepository::class)]\nclass Product\n{\n    #[ORM\\Column(type: UlidType::NAME)]\n    private Ulid $someProperty;\n\n    // ...\n}\n```\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace App\\Entity;\n\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Symfony\\Bridge\\Doctrine\\Types\\UlidType;\nuse Symfony\\Component\\Uid\\Ulid;\n\nclass Product\n{\n    #[ORM\\Id]\n    #[ORM\\Column(type: UlidType::NAME, unique: true)]\n    #[ORM\\GeneratedValue(strategy: 'CUSTOM')]\n```\n\n----------------------------------------\n\nTITLE: Selecting Forms and Direct Submission Using Form Object (Symfony BrowserKit, PHP)\nDESCRIPTION: Illustrates how to access and manipulate the DomCrawler\\Form object directly for fine-grained control of form fields, before submitting via the submit method. Requires a crawler instance and Acme\\Client. Enables programmatic setting of field values including authentication credentials.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/browser_kit.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// ...\\n\\n// select the form and fill in some values\\n$form = $crawler->selectButton('Log in')->form();\\n$form['login'] = 'symfonyfan';\\n$form['password'] = 'anypass';\\n\\n// submit that form\\n$crawler = $client->submit($form);\n```\n\n----------------------------------------\n\nTITLE: Updating Symfony Packages via Composer\nDESCRIPTION: Runs the Composer command `composer update \"symfony/*\"` to download and install the updated versions of all Symfony packages (those matching the `symfony/*` pattern) according to the version constraints defined in the `composer.json` file. This command should be executed after modifying `composer.json` for the major version upgrade.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/upgrade_major.rst#2025-04-22_snippet_6\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer update \"symfony/*\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Dump Destination in Symfony using XML\nDESCRIPTION: This XML snippet sets up the debug bundle's dump destination in a Symfony project via an XML service configuration file. It specifies the TCP endpoint using the VAR_DUMPER_SERVER environment variable. The XML namespaces must match those used by Symfony, and this is placed under config/packages/debug.xml. Dependencies include having the debug bundle installed and environment configured.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/var_dumper.rst#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/debug.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:debug=\"http://symfony.com/schema/dic/debug\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/debug\n        https://symfony.com/schema/dic/debug/debug-1.0.xsd\"\n>\n    <debug:config dump-destination=\"tcp://%env(VAR_DUMPER_SERVER)%\"/>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Newsletter Manager Class with Constructor Injection\nDESCRIPTION: Newsletter manager class implementation demonstrating constructor-based dependency injection.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/dependency_injection.rst#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nclass NewsletterManager\n{\n    public function __construct(\n        private \\Mailer $mailer,\n    ) {\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling the Service Container in PHP\nDESCRIPTION: Triggers the compilation process for the Symfony service container. This process involves executing compiler passes to check for issues like circular references, resolve parameters, remove unused services, and optimize the container configuration before caching.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/dependency_injection/compilation.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$container->compile();\n```\n\n----------------------------------------\n\nTITLE: Generating URLs with Symfony UrlGenerator in PHP\nDESCRIPTION: Demonstrates how to use UrlGenerator to create URLs based on route definitions, including absolute URL generation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/create_framework/routing.rst#2025-04-22_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Routing;\nuse Symfony\\Component\\Routing\\Generator\\UrlGeneratorInterface;\n\n$generator = new Routing\\Generator\\UrlGenerator($routes, $context);\n\necho $generator->generate('hello', ['name' => 'Fabien']);\n// outputs /hello/Fabien\n\necho $generator->generate(\n    'hello',\n    ['name' => 'Fabien'],\n    UrlGeneratorInterface::ABSOLUTE_URL\n);\n// outputs something like http://example.com/somewhere/hello/Fabien\n```\n\n----------------------------------------\n\nTITLE: Generating Cryptographic Keys with Symfony CLI (terminal)\nDESCRIPTION: Demonstrates how to generate a pair of cryptographic keys for the Symfony secrets vault using the CLI. The keys are created for the current environment or for production by prepending APP_RUNTIME_ENV. The generated keys allow encryption (public) and decryption (private) of secrets. The Sodium PHP extension is required.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/secrets.rst#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ php bin/console secrets:generate-keys\n```\n\nLANGUAGE: terminal\nCODE:\n```\n$ APP_RUNTIME_ENV=prod php bin/console secrets:generate-keys\n```\n\n----------------------------------------\n\nTITLE: Dependency Injection Controller Example\nDESCRIPTION: Controller implementation using dependency injection for Twig service instead of extending AbstractController.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/controller/service.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/HelloController.php\nnamespace App\\Controller;\n\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Twig\\Environment;\n\nclass HelloController\n{\n    public function __construct(\n        private Environment $twig,\n    ) {\n    }\n\n    public function index(string $name): Response\n    {\n        $content = $this->twig->render(\n            'hello/index.html.twig',\n            ['name' => $name]\n        );\n\n        return new Response($content);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Options Without Default Values using setDefined\nDESCRIPTION: This example shows how to define options without setting default values using the setDefined method. This allows detecting whether the option was explicitly provided or not.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/options_resolver.rst#2025-04-22_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n// ...\nclass Mailer\n{\n    // ...\n\n    public function configureOptions(OptionsResolver $resolver): void\n    {\n        // ...\n        $resolver->setDefined('port');\n    }\n\n    // ...\n    public function sendMail(string $from, string $to): void\n    {\n        if (array_key_exists('port', $this->options)) {\n            echo 'Set!';\n        } else {\n            echo 'Not Set!';\n        }\n    }\n}\n\n$mailer = new Mailer();\n$mailer->sendMail($from, $to);\n// => Not Set!\n\n$mailer = new Mailer([\n    'port' => 25,\n]);\n$mailer->sendMail($from, $to);\n// => Set!\n```\n\n----------------------------------------\n\nTITLE: Defining Periodic Tasks with PHP Attributes\nDESCRIPTION: Shows how to define periodic tasks using the AsPeriodicTask attribute with frequency and arguments configuration\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/scheduler.rst#2025-04-22_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n#[AsPeriodicTask(frequency: '1 day', method: 'sendEmail', arguments: ['email' => 'admin@symfony.com'])]\nclass SendDailySalesReports\n{\n    public function sendEmail(string $email): void\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Service Method Result via Expression (Symfony PHP)\nDESCRIPTION: Configures the `App\\Mailer` service using PHP configuration and injects the return value of `getMailerMethod()` from `App\\Mail\\MailerConfiguration`. The `expr()` function is used to define the expression string. Note that backslashes within the expression string require quadruple escaping due to PHP's string parsing.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/expression_language.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nuse App\\Mail\\MailerConfiguration;\nuse App\\Mailer;\n\nreturn function(ContainerConfigurator $container): void {\n    // ...\n\n    $services->set(MailerConfiguration::class);\n\n    $services->set(Mailer::class)\n        // because of the escaping applied by PHP, you must add 4 backslashes for each original backslash\n        ->args([expr(\"service('App\\\\\\\\Mail\\\\\\\\MailerConfiguration').getMailerMethod()\")]);\n};\n```\n\n----------------------------------------\n\nTITLE: UUID Controller Example in PHP\nDESCRIPTION: Demonstrates how to use UUID objects as controller arguments with route parameters.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/controller/value_resolver.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Controller;\n\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Attribute\\Route;\nuse Symfony\\Component\\Uid\\UuidV4;\n\nclass DefaultController\n{\n    #[Route('/share/{token}')]\n    public function share(UuidV4 $token): Response\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Route Imports Using YAML in Symfony - YAML\nDESCRIPTION: This snippet demonstrates how to define multiple route imports in a Symfony application's main routing configuration using the YAML format. Each import (e.g., app_file, app_psr4) specifies a resource, and optionally a 'type', indicating how and from where to load route definitions (such as bundles, controller attributes, directories, or specific classes). Dependencies include the correct Symfony routing component in the project and relevant directory structure or bundles referenced. Each entry maps a resource to a collection key; input must be a valid YAML file, and each collection must have a unique key per file.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/routing/custom_route_loader.rst#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# config/routes.yaml\napp_file:\n    # loads routes from the given routing file stored in some bundle\n    resource: '@AcmeBundle/Resources/config/routing.yaml'\n\napp_psr4:\n    # loads routes from the PHP attributes of the controllers found in the given PSR-4 namespace root\n    resource:\n        path: '../src/Controller/'\n        namespace: App\\Controller\n    type: attribute\n\napp_attributes:\n    # loads routes from the PHP attributes of the controllers found in that directory\n    resource: '../src/Controller/'\n    type:     attribute\n\napp_class_attributes:\n    # loads routes from the PHP attributes of the given class\n    resource: App\\Controller\\MyController\n    type:     attribute\n\napp_directory:\n    # loads routes from the YAML, XML or PHP files found in that directory\n    resource: '../legacy/routing/'\n    type:     directory\n\napp_bundle:\n    # loads routes from the YAML, XML or PHP files found in some bundle directory\n    resource: '@AcmeOtherBundle/Resources/config/routing/'\n    type:     directory\n```\n\n----------------------------------------\n\nTITLE: Registering Type Guesser in XML Configuration\nDESCRIPTION: XML configuration for registering the custom type guesser service with the form.type_guesser tag\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/type_guesser.rst#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"App\\Form\\TypeGuesser\\PhpDocTypeGuesser\">\n            <tag name=\"form.type_guesser\"/>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Profiling Symfony Console Command\nDESCRIPTION: Demonstrates how to enable profiling for a Symfony console command using the --profile option. This allows collecting execution data for debugging and performance analysis.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/console.rst#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ php bin/console --profile app:my-command\n```\n\n----------------------------------------\n\nTITLE: Configuring Cascade Constraint with PHP Attributes\nDESCRIPTION: Demonstrates how to apply the Cascade constraint to a BookCollection class using PHP attributes. This allows validation of all properties, including nested BookMetadata and Author objects.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Cascade.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Model/BookCollection.php\nnamespace App\\Model;\n\nuse App\\Model\\Author;\nuse App\\Model\\BookMetadata;\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\n#[Assert\\Cascade]\nclass BookCollection\n{\n    #[Assert\\NotBlank]\n    protected string $name = '';\n\n    public BookMetadata $metadata;\n\n    public Author $author;\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Table Creation in Symfony Console\nDESCRIPTION: Shows how to create a basic table in a Symfony console command using the Table helper class. Demonstrates setting headers and rows with book data.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/helpers/table.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Helper\\Table;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n// ...\n\nclass SomeCommand extends Command\n{\n    public function execute(InputInterface $input, OutputInterface $output): int\n    {\n        $table = new Table($output);\n        $table\n            ->setHeaders(['ISBN', 'Title', 'Author'])\n            ->setRows([\n                ['99921-58-10-7', 'Divine Comedy', 'Dante Alighieri'],\n                ['9971-5-0210-0', 'A Tale of Two Cities', 'Charles Dickens'],\n                ['960-425-059-0', 'The Lord of the Rings', 'J. R. R. Tolkien'],\n                ['80-902734-1-6', 'And Then There Were None', 'Agatha Christie'],\n            ])\n        ;\n        $table->render();\n\n        return Command::SUCCESS;\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Entity User Provider with Doctrine in Symfony (PHP)\nDESCRIPTION: This PHP snippet demonstrates configuring an entity user provider via config/packages/security.php using Symfony's fluent interface, pointing to the User entity and specifying the email property for user lookup. Ensure the App\\Entity\\User entity and Symfony\\Config\\SecurityConfig namespaces are imported. No explicit manager is specified unless using the optional managerName method for multiple entity managers.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/user_providers.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/security.php\\nuse App\\Entity\\User;\\nuse Symfony\\Config\\SecurityConfig;\\n\\nreturn static function (SecurityConfig $security): void {\\n    // ...\\n\\n    $security->provider('app_user_provider')\\n        ->entity()\\n            ->class(User::class)\\n            ->property('email')\\n    ;\\n};\n```\n\n----------------------------------------\n\nTITLE: GoogleListener Class Implementation\nDESCRIPTION: Event listener class that adds Google Analytics code to HTML responses.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/create_framework/event_dispatcher.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace Simplex;\n\nclass GoogleListener\n{\n    public function onResponse(ResponseEvent $event): void\n    {\n        $response = $event->getResponse();\n\n        if ($response->isRedirection()\n            || ($response->headers->has('Content-Type') && false === strpos($response->headers->get('Content-Type'), 'html'))\n            || 'html' !== $event->getRequest()->getRequestFormat()\n        ) {\n            return;\n        }\n\n        $response->setContent($response->getContent().'GA CODE');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Directory and Root from File Path using Symfony Path (PHP)\nDESCRIPTION: This set of snippets showcase how to retrieve the parent directory or the root component of a file path using Path::getDirectory and Path::getRoot, improving upon PHP's built-in dirname by handling platform differences and canonicalizing results. Inputs are string paths and outputs are strings representing the directory or root. Requires Symfony\\Component\\Filesystem\\Path.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/filesystem.rst#2025-04-22_snippet_27\n\nLANGUAGE: php\nCODE:\n```\necho Path::getDirectory(\"C:\\\\Programs\");\n// => C:/\n```\n\nLANGUAGE: php\nCODE:\n```\necho Path::getRoot(\"/etc/apache2/sites-available\");\n// => /\n```\n\nLANGUAGE: php\nCODE:\n```\necho Path::getRoot(\"C:\\\\Programs\\\\Apache\\\\Config\");\n// => C:/\n```\n\n----------------------------------------\n\nTITLE: Range Validation Configuration in YAML\nDESCRIPTION: YAML configuration for range validation of a height property with custom error message.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Range.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Participant:\n    properties:\n        height:\n            - Range:\n                min: 120\n                max: 180\n                notInRangeMessage: You must be between {{ min }}cm and {{ max }}cm tall to enter\n```\n\n----------------------------------------\n\nTITLE: Using DBAL Connection in Symfony Controller\nDESCRIPTION: Example of using Doctrine DBAL Connection in a Symfony controller to execute SQL queries\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine/dbal.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/UserController.php\nnamespace App\\Controller;\n\nuse Doctrine\\DBAL\\Connection;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass UserController extends AbstractController\n{\n    public function index(Connection $connection): Response\n    {\n        $users = $connection->fetchAllAssociative('SELECT * FROM users');\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Doctrine Entity Properties with Custom DatePointType in PHP\nDESCRIPTION: Demonstrates defining Doctrine entity properties (`createdAt`, `updatedAt`) using the custom `DatePoint` type. It shows using the `#[ORM\\Column]` attribute, letting Doctrine infer the type or explicitly setting it to `'date_point'` via the `type` option. Requires the `DatePointType` introduced in Symfony 7.3.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/clock.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n        #[ORM\\Column]\n        private DatePoint $createdAt;\n\n        // if you prefer to define the Doctrine type explicitly:\n        #[ORM\\Column(type: 'date_point')]\n        private DatePoint $updatedAt;\n\n        // ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Collections with Stimulus in Symfony\nDESCRIPTION: HTML structure for a form collection using Stimulus controllers. It sets up the data attributes needed for dynamic form manipulation including the collection index and prototype values.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/form_collections.rst#2025-04-22_snippet_10\n\nLANGUAGE: html+twig\nCODE:\n```\n<div {{ stimulus_controller('form-collection') }}\n    data-form-collection-index-value=\"{{ form.tags|length > 0 ? form.tags|last.vars.name + 1 : 0 }}\"\n    data-form-collection-prototype-value=\"{{ form_widget(form.tags.vars.prototype)|e('html_attr') }}\"\n>\n    <ul {{ stimulus_target('form-collection', 'collectionContainer') }}></ul>\n    <button type=\"button\" {{ stimulus_action('form-collection', 'addCollectionElement') }}>Add a tag</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Workflow in PHP\nDESCRIPTION: This snippet demonstrates creating a workflow definition for a blog post using `DefinitionBuilder`. It defines places ('draft', 'reviewed', 'rejected', 'published') and transitions ('to_review', 'publish', 'reject') between these places. It also configures a `MethodMarkingStore` to store the workflow state in the 'currentState' property of the subject object, assuming only a single state is allowed at a time.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/workflow.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Workflow\\DefinitionBuilder;\nuse Symfony\\Component\\Workflow\\MarkingStore\\MethodMarkingStore;\nuse Symfony\\Component\\Workflow\\Transition;\nuse Symfony\\Component\\Workflow\\Workflow;\n\n$definitionBuilder = new DefinitionBuilder();\n$definition = $definitionBuilder->addPlaces(['draft', 'reviewed', 'rejected', 'published'])\n    // Transitions are defined with a unique name, an origin place and a destination place\n    ->addTransition(new Transition('to_review', 'draft', 'reviewed'))\n    ->addTransition(new Transition('publish', 'reviewed', 'published'))\n    ->addTransition(new Transition('reject', 'reviewed', 'rejected'))\n    ->build()\n;\n\n$singleState = true; // true if the subject can be in only one state at a given time\n$property = 'currentState'; // subject property name where the state is stored\n$marking = new MethodMarkingStore($singleState, $property);\n$workflow = new Workflow($definition, $marking);\n```\n\n----------------------------------------\n\nTITLE: Performing Simple Access Check in Symfony Controller (PHP)\nDESCRIPTION: Demonstrates a basic inline permission check within a Symfony controller action by comparing the post owner with the currently logged-in user. Throws an `AccessDeniedException` if the user is not the owner. This is presented as an alternative to using Voters for simple cases.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/voters.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/PostController.php\n// ...\n\n// inside your controller action\nif ($post->getOwner() !== $this->getUser()) {\n    throw $this->createAccessDeniedException();\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Casters in PHP\nDESCRIPTION: Demonstrates how to register custom casters for specific classes or resource types. This allows for customized array representations of objects and resources in the dump output.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/var_dumper.rst#2025-04-22_snippet_28\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\VarDumper\\Cloner\\VarCloner;\n\n$myCasters = [\n    'FooClass' => $myFooClassCallableCaster,\n    ':bar resource' => $myBarResourceCallableCaster,\n];\n$cloner = new VarCloner($myCasters);\n\n// or\n\n$cloner->addCasters($myCasters);\n```\n\n----------------------------------------\n\nTITLE: Fetching Language Names with Default Locale using Symfony Intl in PHP\nDESCRIPTION: Demonstrates retrieving lists of language names (ISO 639-1 alpha-2 and ISO 639-2 alpha-3) and individual language names using the `Symfony\\Component\\Intl\\Languages` class. It relies on the default locale set via `\\Locale::setDefault('en')`. Requires the `symfony/intl` component and the PHP Intl extension.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/intl.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Intl\\Languages;\n\n\\Locale::setDefault('en');\n\n$languages = Languages::getNames();\n// ('languageCode' => 'languageName')\n// => ['ab' => 'Abkhazian', 'ace' => 'Achinese', ...]\n\n$languages = Languages::getAlpha3Names();\n// ('languageCode' => 'languageName')\n// => ['abk' => 'Abkhazian', 'ace' => 'Achinese', ...]\n\n$language = Languages::getName('fr');\n// => 'French'\n\n$language = Languages::getAlpha3Name('fra');\n// => 'French'\n```\n\n----------------------------------------\n\nTITLE: Inverting Debug Mode Using \"not\" Environment Processor with XML Configuration in Symfony\nDESCRIPTION: Illustrates the use of the 'not' processor to invert the APP_DEBUG environment variable in a Symfony XML services configuration. The processed value is assigned to the 'safe_for_production' parameter. Suitable for toggling production-safe features.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/env_var_processors.rst#2025-04-22_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\\n<container xmlns=\\\"http://symfony.com/schema/dic/services\\\"\\n    xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n    xmlns:framework=\\\"http://symfony.com/schema/dic/symfony\\\"\\n    xsi:schemaLocation=\\\"http://symfony.com/schema/dic/services\\n        https://symfony.com/schema/dic/services/services-1.0.xsd\\n        http://symfony.com/schema/dic/symfony\\n        https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\\\">\\n\\n    <parameters>\\n        <parameter key=\\\"safe_for_production\\\">%env(not:APP_DEBUG)%</parameter>\\n    </parameters>\\n\\n</container>\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Pull Request State Machine in YAML\nDESCRIPTION: This YAML configuration defines a state machine for a pull request process in Symfony. It specifies the places (states), transitions, and marking store for the workflow.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/workflow/workflow-and-state-machine.rst#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/workflow.yaml\nframework:\n    workflows:\n        pull_request:\n            type: 'state_machine'\n            marking_store:\n                 type: 'method'\n                 property: 'currentPlace'\n            supports:\n                - App\\Entity\\PullRequest\n            initial_marking: start\n            places:\n                - start\n                - coding\n                - test\n                - review\n                - merged\n                - closed\n            transitions:\n                submit:\n                    from: start\n                    to: test\n                update:\n                    from: [coding, test, review]\n                    to: test\n                wait_for_review:\n                    from: test\n                    to: review\n                request_change:\n                    from: review\n                    to: coding\n                accept:\n                    from: review\n                    to: merged\n                reject:\n                    from: review\n                    to: closed\n                reopen:\n                    from: closed\n                    to: review\n```\n\n----------------------------------------\n\nTITLE: Appending Data to a File with Locking using Symfony Filesystem (PHP)\nDESCRIPTION: This code snippet demonstrates how to use the Symfony Filesystem component's appendToFile method to append a string to a file and optionally lock it during the write operation. If the specified file or its directory does not exist, they are created automatically. Required dependency: Symfony\\Component\\Filesystem\\Filesystem. Key parameters: the file path ('logs.txt'), the string to append, and a boolean for file locking. Outputs: appends the text to 'logs.txt'; throws an exception on error.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/filesystem.rst#2025-04-22_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n// the third argument tells whether the file should be locked when writing to it\n$filesystem->appendToFile('logs.txt', 'Email sent to user@example.com', true);\n```\n\n----------------------------------------\n\nTITLE: JSON Login Payload with Remember Me Option\nDESCRIPTION: This JSON snippet shows the structure of a login POST request body to an API endpoint that supports remember me logic. The '_remember_me' key should be included and set to true to request a persistent login session. Used with Symfony's JSON Login method, this is typically part of an AJAX or fetch request and requires the API firewall to have appropriate settings. The keys 'username' and 'password' are the basics for authentication; '_remember_me' triggers the backend persistent login flow.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/remember_me.rst#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"username\": \"dunglas@example.com\",\n    \"password\": \"MyPassword\",\n    \"_remember_me\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Performance Optimization for OptionsResolver in PHP\nDESCRIPTION: Demonstrates a performance optimization technique for OptionsResolver by caching resolver instances per class\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/options_resolver.rst#2025-04-22_snippet_31\n\nLANGUAGE: php\nCODE:\n```\nclass Mailer\n{\n    private static array $resolversByClass = [];\n\n    protected array $options;\n\n    public function __construct(array $options = [])\n    {\n        // What type of Mailer is this, a Mailer, a GoogleMailer, ... ?\n        $class = get_class($this);\n\n        // Was configureOptions() executed before for this class?\n        if (!isset(self::$resolversByClass[$class])) {\n            self::$resolversByClass[$class] = new OptionsResolver();\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Globally Registering a Monolog Processor in YAML\nDESCRIPTION: YAML configuration for registering the built-in `Monolog\\Processor\\IntrospectionProcessor` service and tagging it globally with `monolog.processor`. When tagged without specific `handler` or `channel` attributes, the processor is applied to all configured Monolog handlers across all channels, adding introspection data (file, line, class, method) to log records.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/dic_tags.rst#2025-04-22_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n    Monolog\\Processor\\IntrospectionProcessor:\n        tags: [monolog.processor]\n```\n\n----------------------------------------\n\nTITLE: Comparing Dates with LessThan Constraint in XML\nDESCRIPTION: Example of using the LessThan constraint in XML configuration to validate that a date is in the past.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/LessThan.rst#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\Person\">\n        <property name=\"dateOfBirth\">\n            <constraint name=\"LessThan\">today</constraint>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Version for Cache Busting in XML\nDESCRIPTION: XML configuration that adds a global version parameter to all assets. This appends a query string parameter to asset URLs for cache invalidation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_15\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/framework.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <framework:config>\n        <framework:assets version=\"v2\"/>\n    </framework:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Implementing Choice Question in Symfony Command\nDESCRIPTION: Example of creating a choice question with predefined options and error handling\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/helpers/questionhelper.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Console\\Question\\ChoiceQuestion;\n\npublic function execute(InputInterface $input, OutputInterface $output): int\n{\n    $helper = $this->getHelper('question');\n    $question = new ChoiceQuestion(\n        'Please select your favorite color (defaults to red)',\n        ['red', 'blue', 'yellow'],\n        0\n    );\n    $question->setErrorMessage('Color %s is invalid.');\n\n    $color = $helper->ask($input, $output, $question);\n    $output->writeln('You have just selected: '.$color);\n\n    return Command::SUCCESS;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Linting Behavior with Flags in PHP\nDESCRIPTION: Demonstrates using flags like `Parser::IGNORE_UNKNOWN_VARIABLES` and `Parser::IGNORE_UNKNOWN_FUNCTIONS` with the `lint()` method. This allows linting expressions even if they contain variables or functions that are not defined in the provided context, preventing `SyntaxError` exceptions for those specific cases. This feature was introduced in Symfony 7.1.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/expression_language.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\ExpressionLanguage\\ExpressionLanguage;\nuse Symfony\\Component\\ExpressionLanguage\\Parser;\n\n$expressionLanguage = new ExpressionLanguage();\n\n// does not throw a SyntaxError because the unknown variables and functions are ignored\n$expressionLanguage->lint('unknown_var + unknown_function()', [], Parser::IGNORE_UNKNOWN_VARIABLES | Parser::IGNORE_UNKNOWN_FUNCTIONS);\n```\n\n----------------------------------------\n\nTITLE: Initializing RedisStore for Symfony Lock Component\nDESCRIPTION: Creates a RedisStore instance using a Redis connection. This store requires a TTL to avoid stalled locks and does not support blocking.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/lock.rst#2025-04-22_snippet_23\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Lock\\Store\\RedisStore;\n\n$redis = new \\Redis();\n$redis->connect('localhost');\n\n$store = new RedisStore($redis);\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Password Strength Estimator\nDESCRIPTION: Shows how to create a custom password strength estimation algorithm using a dedicated callable class.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/PasswordStrength.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Validator;\n\nclass CustomPasswordStrengthEstimator\n{\n    /**\n     * @return PasswordStrength::STRENGTH_*\n     */\n    public function __invoke(string $password): int\n    {\n        // Your custom password strength estimation algorithm\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Nullable Decorated Services in PHP\nDESCRIPTION: Shows how to implement a decorator that handles nullable decorated services. The DecoratorService class checks if the decorated service exists before using it.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/service_decoration.rst#2025-04-22_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n// src/Service/DecoratorService.php\nnamespace App\\Service;\n\nuse Acme\\OptionalBundle\\Service\\OptionalService;\n\nclass DecoratorService\n{\n    public function __construct(\n        private ?OptionalService $decorated,\n    ) {\n    }\n\n    public function tellInterestingStuff(): string\n    {\n        if (!$this->decorated) {\n            return 'Just one interesting thing';\n        }\n\n        return $this->decorated->tellInterestingStuff().' + one more interesting thing';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Named Serializers in Symfony YAML\nDESCRIPTION: This snippet demonstrates how to configure multiple named serializer instances in Symfony's YAML configuration. It shows two different configurations for api_client1 and api_client2 with different settings.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer.rst#2025-04-22_snippet_43\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/serializer.yaml\nframework:\n    serializer:\n        named_serializers:\n            api_client1:\n                name_converter: 'serializer.name_converter.camel_case_to_snake_case'\n                default_context:\n                    enable_max_depth: true\n            api_client2:\n                default_context:\n                    enable_max_depth: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Serializer Normalizers in YAML\nDESCRIPTION: Shows how to configure custom normalizers for specific named serializers in YAML, including options to add normalizers to specific serializers or all serializers.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer.rst#2025-04-22_snippet_46\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nservices:\n    # ...\n\n    Symfony\\Component\\Serializer\\Normalizer\\CustomNormalizer:\n        # prevent this normalizer from being automatically added to the default serializer\n        autoconfigure: false\n        tags:\n            # add this normalizer only to a specific named serializer\n            - serializer.normalizer: { serializer: 'api_client1' }\n            # add this normalizer to several named serializers\n            - serializer.normalizer: { serializer: [ 'api_client1', 'api_client2' ] }\n            # add this normalizer to all serializers, including the default one\n            - serializer.normalizer: { serializer: '*' }\n```\n\n----------------------------------------\n\nTITLE: Enforcing Square Images with XML Configuration\nDESCRIPTION: XML configuration that enforces square images by setting both allowLandscape and allowPortrait options to false on the Image constraint.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Image.rst#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<class name=\"App\\Entity\\Author\">\n    <property name=\"headshot\">\n        <constraint name=\"Image\">\n            <option name=\"allowLandscape\">false</option>\n            <option name=\"allowPortrait\">false</option>\n        </constraint>\n    </property>\n</class>\n```\n\n----------------------------------------\n\nTITLE: Creating a Form Theme in the Same Template in Twig\nDESCRIPTION: Example of defining a form theme in the same template where the form is rendered using the 'form_theme form _self' syntax. Demonstrates overriding field types and specific fields.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/form_themes.rst#2025-04-22_snippet_12\n\nLANGUAGE: twig\nCODE:\n```\n{% extends 'base.html.twig' %}\n\n{% form_theme form _self %}\n\n{# this overrides the widget of any field of type integer, but only in the\n   forms rendered inside this template #}\n{% block integer_widget %}\n    <div class=\"...\">\n        {# ... render the HTML element to display this field ... #}\n    </div>\n{% endblock %}\n\n{# this overrides the entire row of the field whose \"id\" = \"product_stock\" (and whose\n   \"name\" = \"product[stock]\") but only in the forms rendered inside this template #}\n{% block _product_stock_row %}\n    <div class=\"...\" id=\"...\">\n        {# ... render the entire field contents, including its errors ... #}\n    </div>\n{% endblock %}\n\n{# ... render the form ... #}\n```\n\n----------------------------------------\n\nTITLE: Creating Memcached Connections with DSN\nDESCRIPTION: Demonstrates different ways to create Memcached connections using DSN strings, including single server, multiple servers, and socket configurations.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/cache/adapters/memcached_adapter.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Cache\\Adapter\\MemcachedAdapter;\n\n// pass a single DSN string to register a single server with the client\n$client = MemcachedAdapter::createConnection(\n    'memcached://localhost'\n    // the DSN can include config options (pass them as a query string):\n    // 'memcached://localhost:11222?retry_timeout=10'\n    // 'memcached://localhost:11222?socket_recv_size=1&socket_send_size=2'\n);\n\n// pass an array of DSN strings to register multiple servers with the client\n$client = MemcachedAdapter::createConnection([\n    'memcached://10.0.0.100',\n    'memcached://10.0.0.101',\n    'memcached://10.0.0.102',\n    // etc...\n]);\n\n// a single DSN can define multiple servers using the following syntax:\n// host[hostname-or-IP:port] (where port is optional). Sockets must include a trailing ':'\n$client = MemcachedAdapter::createConnection(\n    'memcached:?host[localhost]&host[localhost:12345]&host[/some/memcached.sock:]=3'\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing an Interface for Symfony Autowiring Example (PHP)\nDESCRIPTION: Defines the `UppercaseTransformer` class which implements the `TransformerInterface`. This serves as a second implementation alongside `Rot13Transformer`, creating a scenario where autowiring requires explicit configuration (like an alias) to resolve the dependency.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/autowiring.rst#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n// src/Util/UppercaseTransformer.php\nnamespace App\\Util;\n\nclass UppercaseTransformer implements TransformerInterface\n{\n    public function transform(string $value): string\n    {\n        return strtoupper($value);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Twig CSS Path in XML\nDESCRIPTION: XML configuration to set up a Twig namespace for CSS files, making it easier to reference external stylesheets in email templates.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_50\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/twig.xml -->\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:twig=\"http://symfony.com/schema/dic/twig\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/twig https://symfony.com/schema/dic/twig/twig-1.0.xsd\">\n\n    <twig:config>\n        <!-- ... -->\n\n        <!-- point this wherever your css files live -->\n        <twig:path namespace=\"styles\">%kernel.project_dir%/assets/styles</twig:path>\n    </twig:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Extended Twig Template with Base Layout\nDESCRIPTION: Twig template demonstrating template inheritance by extending the base template.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/quick_tour/flex_recipes.rst#2025-04-22_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{# templates/default/index.html.twig #}\n{% extends 'base.html.twig' %}\n\n{% block body %}\n    <h1>Hello {{ name }}</h1>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Clicking Links Using clickLink and click with Server Parameters (Symfony BrowserKit, PHP)\nDESCRIPTION: Demonstrates clicking links by text using clickLink, and by Link object using click. Shows how to pass custom server parameters (e.g., HTTP headers) during the interaction. Requires Acme\\Client and symfony/browser-kit. Useful for testing navigation and header manipulation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/browser_kit.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Acme\\Client;\\n\\n$client = new Client();\\n$client->request('GET', '/product/123');\\n\\n$crawler = $client->clickLink('Go elsewhere...');\n```\n\nLANGUAGE: php\nCODE:\n```\n// ...\\n$crawler = $client->request('GET', '/product/123');\\n$link = $crawler->selectLink('Go elsewhere...')->link();\\n$client->click($link);\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Acme\\Client;\\n\\n$client = new Client();\\n$client->request('GET', '/product/123');\\n\\n// works both with `click()`...\\n$link = $crawler->selectLink('Go elsewhere...')->link();\\n$client->click($link, ['X-Custom-Header' => 'Some data']);\\n\\n// ... and `clickLink()`\\n$crawler = $client->clickLink('Go elsewhere...', ['X-Custom-Header' => 'Some data']);\n```\n\n----------------------------------------\n\nTITLE: Reading data-* attributes in JavaScript from Twig-generated HTML\nDESCRIPTION: This JavaScript code demonstrates how to read the data-* attributes set by Twig. It uses querySelector to find the element, then getAttribute to read the attribute values. The user data is parsed from JSON format.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/server-data.rst#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.addEventListener('DOMContentLoaded', function() {\n    const userRating = document.querySelector('.js-user-rating');\n    const isAuthenticated = userRating.getAttribute('data-is-authenticated');\n    const user = JSON.parse(userRating.getAttribute('data-user'));\n});\n```\n\n----------------------------------------\n\nTITLE: Guessing File MIME Type with Symfony Mime MimeTypes (PHP)\nDESCRIPTION: Illustrates using the `guessMimeType()` method of the `Symfony\\Component\\Mime\\MimeTypes` class to determine the MIME type of a file based on its content, not just its extension. Recommends installing the PHP `fileinfo` extension for improved performance and accuracy.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/mime.rst#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Mime\\MimeTypes;\n\n$mimeTypes = new MimeTypes();\n$mimeType = $mimeTypes->guessMimeType('/some/path/to/image.gif');\n// Guessing is not based on the file name, so $mimeType will be 'image/gif'\n// only if the given file is truly a GIF image\n```\n\n----------------------------------------\n\nTITLE: Configuring UniqueEntity Constraint with PHP Validator API in Symfony\nDESCRIPTION: Example of applying the UniqueEntity constraint using PHP Validator API to ensure a unique email field on a User entity. Demonstrates both entity and form type implementations.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/UniqueEntity.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/User.php\nnamespace App\\Entity;\n\n// DON'T forget the following use statement!!!\nuse Symfony\\Bridge\\Doctrine\\Validator\\Constraints\\UniqueEntity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass User\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addConstraint(new UniqueEntity(\n            fields: 'email',\n        ));\n\n        $metadata->addPropertyConstraint('email', new Assert\\Email());\n    }\n}\n\n// src/Form/Type/UserType.php\nnamespace App\\Form\\Type;\n\n// ...\n// DON'T forget the following use statement!!!\nuse Symfony\\Bridge\\Doctrine\\Validator\\Constraints\\UniqueEntity;\n\nclass UserType extends AbstractType\n{\n    // ...\n\n    public function configureOptions(OptionsResolver $resolver): void\n    {\n        $resolver->setDefaults([\n            // ...\n            'data_class' => User::class,\n            'constraints' => [\n                new UniqueEntity(fields: ['email']),\n            ],\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Programmatic Symfony Scheduler Consumer in PHP\nDESCRIPTION: Code snippet demonstrating how to create and run a Symfony Scheduler programmatically. This approach is suitable when using the Scheduler component as a standalone component.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/scheduler.rst#2025-04-22_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Scheduler\\Scheduler;\n\n$schedule = (new Schedule())\n    ->with(\n        RecurringMessage::trigger(\n            new ExcludeHolidaysTrigger(\n                CronExpressionTrigger::fromSpec('@daily'),\n            ),\n            new SendDailySalesReports()\n        ),\n    );\n\n$scheduler = new Scheduler(handlers: [\n    SendDailySalesReports::class => new SendDailySalesReportsHandler(),\n    // add more handlers if you have more message types\n], schedules: [\n    $schedule,\n    // the scheduler can take as many schedules as you need\n]);\n\n// finally, run the scheduler once it's ready\n$scheduler->run();\n```\n\n----------------------------------------\n\nTITLE: Enabling Vue.js JSX Support\nDESCRIPTION: Configuration to enable JSX support in Vue.js components using webpack.config.js\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/vuejs.rst#2025-04-22_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n      // webpack.config.js\n      // ...\n\n      Encore\n          // ...\n          .addEntry('main', './assets/main.js')\n\n    -     .enableVueLoader()\n    +     .enableVueLoader(() => {}, {\n    +         useJsx: true\n    +     })\n      ;\n```\n\n----------------------------------------\n\nTITLE: Refactoring OptionsResolver Configuration into a Separate Method in PHP\nDESCRIPTION: This PHP code refactors the `Mailer` class by moving the `OptionsResolver` configuration logic from the constructor into a dedicated `configureOptions` method. This improves code organization and makes it easier for subclasses to modify the option configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/options_resolver.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// ...\nclass Mailer\n{\n    // ...\n\n    public function __construct(array $options = [])\n    {\n        $resolver = new OptionsResolver();\n        $this->configureOptions($resolver);\n\n        $this->options = $resolver->resolve($options);\n    }\n\n    public function configureOptions(OptionsResolver $resolver): void\n    {\n        $resolver->setDefaults([\n            'host'       => 'smtp.example.org',\n            'username'   => 'user',\n            'password'   => 'pa$$word',\n            'port'       => 25,\n            'encryption' => null,\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Blog Post Detail Implementation\nDESCRIPTION: Shows the implementation of a single blog post view with model function, controller, and template.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/introduction/from_flat_php_to_symfony.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// model.php\nfunction get_post_by_id($id)\n{\n    $connection = open_database_connection();\n\n    $query = 'SELECT created_at, title, body FROM post WHERE id=:id';\n    $statement = $connection->prepare($query);\n    $statement->bindValue(':id', $id, PDO::PARAM_INT);\n    $statement->execute();\n\n    $row = $statement->fetch(PDO::FETCH_ASSOC);\n\n    close_database_connection($connection);\n\n    return $row;\n}\n```\n\nLANGUAGE: html+php\nCODE:\n```\n<!-- templates/show.php -->\n<?php $title = $post['title'] ?>\n\n<?php ob_start() ?>\n    <h1><?= $post['title'] ?></h1>\n\n    <div class=\"date\"><?= $post['created_at'] ?></div>\n    <div class=\"body\">\n        <?= $post['body'] ?>\n    </div>\n<?php $content = ob_get_clean() ?>\n\n<?php include 'layout.php' ?>\n```\n\n----------------------------------------\n\nTITLE: Changing Form Action and Method in FormBuilder\nDESCRIPTION: This example demonstrates how to change the action URL and HTTP method of a form when building it with FormBuilder. By default, forms use POST method and submit to the current URL.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/forms.rst#2025-04-22_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/TaskController.php\nnamespace App\\Controller;\n\n// ...\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\DateType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\SubmitType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\TextType;\n\nclass TaskController extends AbstractController\n{\n    public function new(): Response\n    {\n        // ...\n\n        $form = $this->createFormBuilder($task)\n            ->setAction($this->generateUrl('target_route'))\n            ->setMethod('GET')\n            // ...\n            ->getForm();\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Field Type in Form Building\nDESCRIPTION: An example of using the custom IssueSelectorType in a form type. The custom field type automatically handles the data transformation between issue numbers and Issue objects.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/data_transformers.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// src/Form/Type/TaskType.php\nnamespace App\\Form\\Type;\n\nuse App\\Form\\DataTransformer\\IssueToNumberTransformer;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\TextareaType;\n// ...\n\nclass TaskType extends AbstractType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options): void\n    {\n        $builder\n            ->add('description', TextareaType::class)\n            ->add('issue', IssueSelectorType::class)\n        ;\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Translation Debug Command Exit Codes in Symfony\nDESCRIPTION: Example of accessing and using the exit codes from the debug:translation command to check for specific translation issues in PHP code.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/translation.rst#2025-04-22_snippet_50\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Bundle\\FrameworkBundle\\Command\\TranslationDebugCommand;\n\n// generic failure (e.g. there are no translations)\nTranslationDebugCommand::EXIT_CODE_GENERAL_ERROR;\n\n// there are missing translations\nTranslationDebugCommand::EXIT_CODE_MISSING;\n\n// there are unused translations\nTranslationDebugCommand::EXIT_CODE_UNUSED;\n\n// some translations are using the fallback translation\nTranslationDebugCommand::EXIT_CODE_FALLBACK;\n```\n\n----------------------------------------\n\nTITLE: Initializing Workflow State on an Object in PHP\nDESCRIPTION: This snippet shows how to initialize the state of a new `BlogPost` object according to the workflow's initial marking configuration. Calling `$workflow->getMarking($blogPost)` sets the object's state property if it's currently null.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/workflow.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// ...\n$blogPost = new BlogPost();\n\n// initiate workflow\n$workflow->getMarking($blogPost);\n```\n\n----------------------------------------\n\nTITLE: Adding Valid Constraint with PHP Attributes\nDESCRIPTION: Adding the Valid constraint to the Author entity using PHP attributes to validate the embedded Address object.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Valid.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Author.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Author\n{\n    #[Assert\\Valid]\n    protected Address $address;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Required and Optional Field Constraints with loadValidatorMetadata\nDESCRIPTION: Demonstrates how to use the loadValidatorMetadata method to set up Required and Optional constraints on collection fields programmatically.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Collection.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Author.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Author\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n\n\n```\n\n----------------------------------------\n\nTITLE: Customizing Form Field Labels in Symfony\nDESCRIPTION: This code shows how to customize form field labels using the 'label' option. By default, labels are the humanized version of property names, but they can be explicitly set or disabled by setting the option to false.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/forms.rst#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n->add('dueDate', DateType::class, [\n    // set it to FALSE to not display the label for this field\n    'label' => 'To Be Completed Before',\n])\n```\n\n----------------------------------------\n\nTITLE: Defining Timezone Validation in XML\nDESCRIPTION: XML configuration for implementing timezone validation on a UserSettings entity property using Symfony's constraint mapping schema.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Timezone.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\UserSettings\">\n        <property name=\"timezone\">\n            <constraint name=\"Timezone\"/>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Configuring Loco Translation Provider in Symfony YAML\nDESCRIPTION: Demonstrates how to configure the Loco translation provider in the Symfony YAML configuration, including setting the DSN, domains, and locales.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/translation.rst#2025-04-22_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/translation.yaml\nframework:\n    translator:\n        providers:\n            loco:\n                dsn: '%env(LOCO_DSN)%'\n                domains: ['messages']\n                locales: ['en', 'fr']\n```\n\n----------------------------------------\n\nTITLE: Implementing Setter Injection in PHP Class\nDESCRIPTION: Example of setter injection where a service dependency is injected through a setter method marked with the Required attribute.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/injection_types.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// src/Mail/NewsletterManager.php\nnamespace App\\Mail;\n\nuse Symfony\\Contracts\\Service\\Attribute\\Required;\n\n// ...\nclass NewsletterManager\n{\n    private MailerInterface $mailer;\n\n    #[Required]\n    public function setMailer(MailerInterface $mailer): void\n    {\n        $this->mailer = $mailer;\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Type Validation Using PHP Method in Symfony\nDESCRIPTION: Example of configuring Type validation constraints using PHP's loadValidatorMetadata method in a Symfony entity. Demonstrates validation for various data types including objects, strings, and integers.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Type.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Author.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Mime\\Address;\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Author\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('emailAddress', new Assert\\Type(Address::class));\n\n        $metadata->addPropertyConstraint('firstName', new Assert\\Type('string'));\n\n        $metadata->addPropertyConstraint('age', new Assert\\Type(\n            type: 'integer',\n            message: 'The value {{ value }} is not a valid {{ type }}.',\n        ));\n\n        $metadata->addPropertyConstraint('accessCode', new Assert\\Type(\n            type: ['alpha', 'digit'],\n        ));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Specific User Permissions in Twig (Symfony >= 7.3)\nDESCRIPTION: Introduced in Symfony 7.3, the `is_granted_for_user` function checks if a specific `user` object is authorized for a given `attribute` (permission/role). Optionally, a `subject` object can be provided for context, which is passed to security voters. This allows checking permissions for users other than the currently logged-in one.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#2025-04-22_snippet_12\n\nLANGUAGE: twig\nCODE:\n```\n{{ is_granted_for_user(user, attribute, subject = null) }}\n```\n\n----------------------------------------\n\nTITLE: Creating a Directory with Specific Permissions (PHP)\nDESCRIPTION: Uses the `Filesystem::mkdir` method to create a directory (`/tmp/photos`) recursively. The second argument `0700` sets specific permissions for the created directory. Note that the final permissions are affected by the system's `umask`.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/filesystem.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$filesystem->mkdir('/tmp/photos', 0700);\n```\n\n----------------------------------------\n\nTITLE: Unicode String Normalization\nDESCRIPTION: Demonstrates different Unicode normalization forms using the normalize() method with various flags.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/string.rst#2025-04-22_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nu('å')->normalize(UnicodeString::NFC);\nu('å')->normalize(UnicodeString::NFKC);\nu('å')->normalize(UnicodeString::NFD);\nu('å')->normalize(UnicodeString::NFKD);\n```\n\n----------------------------------------\n\nTITLE: Creating and Setting Cache Items with PSR-6\nDESCRIPTION: Examples showing how to create cache items using PSR-6 interface, set values (both simple and complex), and save them to cache.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/cache/cache_items.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// $cache pool object was created before\n$productsCount = $cache->getItem('stats.products_count');\n\n// storing a simple integer\n$productsCount->set(4711);\n$cache->save($productsCount);\n\n// storing an array\n$productsCount->set([\n    'category1' => 4711,\n    'category2' => 2387,\n]);\n$cache->save($productsCount);\n```\n\n----------------------------------------\n\nTITLE: Defining Shell Commands and Passing Environment Variables (OS-Specific) in PHP\nDESCRIPTION: Demonstrates creating a `Process` instance from a raw shell command string using the static factory `fromShellCommandline()`. This allows using shell features like redirection but requires manual escaping and OS-specific handling. Environment variables are passed as an array to `run()`, and their referencing syntax (`$VAR` on Unix-like, `!VAR!` on Windows) differs. Depends on the Symfony Process component.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/process.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// On Unix-like OSes (Linux, macOS)\n$process = Process::fromShellCommandline('echo \"$MESSAGE\"');\n\n// On Windows\n$process = Process::fromShellCommandline('echo \"!MESSAGE!\"');\n\n// On both Unix-like and Windows\n$process->run(null, ['MESSAGE' => 'Something to output']);\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Builds in Twig Templates\nDESCRIPTION: This Twig snippet demonstrates how to use Encore functions to include assets from different Webpack builds in a template.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/advanced-config.rst#2025-04-22_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{# Using the entrypoints.json file located in ./public/first_build #}\n{{ encore_entry_script_tags('app', null, 'firstConfig') }}\n{{ encore_entry_link_tags('global', null, 'firstConfig') }}\n\n{# Using the entrypoints.json file located in ./public/second_build #}\n{{ encore_entry_script_tags('mobile', null, 'secondConfig') }}\n{{ encore_entry_link_tags('mobile', null, 'secondConfig') }}\n```\n\n----------------------------------------\n\nTITLE: Passing Variables to Expressions in PHP\nDESCRIPTION: Illustrates how to pass external data, including objects, into an expression during evaluation. The second argument to `evaluate()` is an associative array where keys are variable names used in the expression (e.g., 'fruit') and values are their corresponding PHP values (e.g., the `$apple` object). The expression can then access properties and methods of these passed variables.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/expression_language.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\ExpressionLanguage\\ExpressionLanguage;\n\n$expressionLanguage = new ExpressionLanguage();\n\nclass Apple\n{\n    public string $variety;\n}\n\n$apple = new Apple();\n$apple->variety = 'Honeycrisp';\n\nvar_dump($expressionLanguage->evaluate(\n    'fruit.variety',\n    [\n        'fruit' => $apple,\n    ]\n)); // displays \"Honeycrisp\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Class-Level Callback Constraint with Symfony Validator Metadata (PHP)\nDESCRIPTION: This snippet adds a Callback constraint using Symfony's Validator metadata API, associating it with the validate() method on the Author class. Requires the Assert\\Callback class and loadValidatorMetadata static method. This allows custom validation logic to execute on the entire object, using the specified method. It applies at the class level, not just properties or getters.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/validator/metadata.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// ...\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Author\n{\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addConstraint(new Assert\\Callback('validate'));\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Referencing Secrets in Doctrine YAML Configuration (yaml)\nDESCRIPTION: Demonstrates referencing a secret value in a Doctrine database password using a YAML configuration file. The password is resolved at runtime via the env() processor and supports environment-specific and secret overrides. No dependencies beyond Symfony configuration are required.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/secrets.rst#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/doctrine.yaml\ndoctrine:\n    dbal:\n        password: '%env(DATABASE_PASSWORD)%'\n        # ...\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Validation Groups in YAML\nDESCRIPTION: YAML configuration example for defining validation constraints with groups. Demonstrates how to specify validation rules for different properties with their respective groups.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/validation/groups.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\User:\n    properties:\n        email:\n            - Email: { groups: [registration] }\n        password:\n            - NotBlank: { groups: [registration] }\n            - Length: { min: 7, groups: [registration] }\n        city:\n            - Length:\n                min: 2\n```\n\n----------------------------------------\n\nTITLE: Implementing ISBN Validation with PHP\nDESCRIPTION: Example of applying ISBN validation using PHP code in a Book entity class using loadValidatorMetadata method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Isbn.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Book.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Book\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('isbn', new Assert\\Isbn(\n            type: Assert\\Isbn::ISBN_10,\n            message: 'This value is not valid.',\n        ));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Closure for Dynamic Validation Group Selection in Symfony Forms\nDESCRIPTION: This example demonstrates how to use a Closure to dynamically determine validation groups based on the submitted form data. It checks the type of client and returns different validation groups accordingly.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/data_based_validation.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Entity\\Client;\nuse Symfony\\Component\\Form\\FormInterface;\nuse Symfony\\Component\\OptionsResolver\\OptionsResolver;\n\n// ...\npublic function configureOptions(OptionsResolver $resolver): void\n{\n    $resolver->setDefaults([\n        'validation_groups' => function (FormInterface $form): array {\n            $data = $form->getData();\n\n            if (Client::TYPE_PERSON == $data->getType()) {\n                return ['person'];\n            }\n\n            return ['company'];\n        },\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Compound Rate Limiters in YAML\nDESCRIPTION: Configuration for creating compound rate limiters in YAML format. Defines two individual limiters (two_per_minute and five_per_hour) and combines them into a compound limiter for a contact form.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/rate_limiter.rst#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/rate_limiter.yaml\nframework:\n    rate_limiter:\n        two_per_minute:\n            policy: 'fixed_window'\n            limit: 2\n            interval: '1 minute'\n        five_per_hour:\n            policy: 'fixed_window'\n            limit: 5\n            interval: '1 hour'\n        contact_form:\n            policy: 'compound'\n            limiters: [two_per_minute, five_per_hour]\n```\n\n----------------------------------------\n\nTITLE: Escaping Special Characters in Array Keys for PropertyAccessor (PHP)\nDESCRIPTION: Explains that special characters like dots (`.`) or left square brackets (`[`) within array keys need to be escaped with a backslash (`\\`) when constructing the property path for `PropertyAccessor::getValue()`. Right square brackets do not require escaping.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/property_access.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nvar_dump($propertyAccessor->getValue($persons, '[0][first\\.name]')); // 'Wouter'\nvar_dump($propertyAccessor->getValue($persons, '[1][first\\.name]')); // 'Ryan'\n```\n\n----------------------------------------\n\nTITLE: Configuring Symfony Login Link Maximum Uses (YAML, XML, PHP)\nDESCRIPTION: Explains how to limit the number of times a Symfony login link can be used by setting the `max_uses` option in the security firewall configuration. This feature relies on storing used links in a cache pool (configurable via `used_link_cache`). Once a link reaches its maximum uses, it becomes invalid. Examples are provided for YAML, XML, and PHP configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/login_link.rst#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\nsecurity:\n    firewalls:\n        main:\n            login_link:\n                check_route: login_check\n                # only allow the link to be used 3 times\n                max_uses: 3\n\n                # optionally, configure the cache pool\n                #used_link_cache: 'cache.redis'\n```\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/security.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<srv:container xmlns=\"http://symfony.com/schema/dic/security\"\n    xmlns:srv=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/security\n        https://symfony.com/schema/dic/security/security-1.0.xsd\">\n\n    <config>\n        <firewall name=\"main\">\n            <!-- max-uses: only allow the link to be used 3 times\n                 used-link-cache: optionally, configure the cache pool -->\n            <login-link check-route=\"login_check\"\n                max-uses=\"3\"\n                used-link-cache=\"cache.redis\"\n            />\n        </firewall>\n    </config>\n</srv:container>\n```\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/security.php\nuse Symfony\\Config\\SecurityConfig;\n\nreturn static function (SecurityConfig $security): void {\n    $security->firewall('main')\n        ->loginLink()\n            ->checkRoute('login_check')\n\n            // only allow the link to be used 3 times\n            ->maxUses(3)\n\n            // optionally, configure the cache pool\n            //->usedLinkCache('cache.redis')\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Writing Values to an Array using PropertyAccessor::setValue (PHP)\nDESCRIPTION: Illustrates using `PropertyAccessor::setValue()` to add or modify elements in a PHP array using the same bracket notation (`[key]`) used for reading. This method allows dynamic modification of array contents.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/property_access.rst#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n// ...\n$person = [];\n\n$propertyAccessor->setValue($person, '[first_name]', 'Wouter');\n\nvar_dump($propertyAccessor->getValue($person, '[first_name]')); // 'Wouter'\n// or\n// var_dump($person['first_name']); // 'Wouter'\n```\n\n----------------------------------------\n\nTITLE: Implementing Lazy Initialization with LazyGhostTrait - PHP\nDESCRIPTION: Implements lazy-loading for a class property using Symfony\\Component\\VarExporter\\LazyGhostTrait. Properties are set via a delayed initialization function, which is only executed upon property or method usage, thus deferring heavy computations. Requires symfony/var-exporter and PHP 8.1+ for readonly properties. Input is class instantiation with initialization function; the property computation happens on-demand.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/var_exporter.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Hash;\n\nuse Symfony\\Component\\VarExporter\\LazyGhostTrait;\n\nclass HashProcessor\n{\n    use LazyGhostTrait;\n\n    // This property may require a heavy computation to have its value\n    public readonly string $hash;\n\n    public function __construct()\n    {\n        self::createLazyGhost(initializer: $this->populateHash(...), instance: $this);\n    }\n\n    private function populateHash(array $data): void\n    {\n        // Compute $this->hash value with the passed data\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Doctrine Entity Listener with PHP Attributes\nDESCRIPTION: Shows how to configure a Doctrine entity listener using PHP attributes. This example sets up a listener for the postUpdate event on the User entity.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine/events.rst#2025-04-22_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n// src/EventListener/UserChangedNotifier.php\nnamespace App\\EventListener;\n\n// ...\nuse App\\Entity\\User;\nuse Doctrine\\Bundle\\DoctrineBundle\\Attribute\\AsEntityListener;\nuse Doctrine\\ORM\\Events;\n\n#[AsEntityListener(event: Events::postUpdate, method: 'postUpdate', entity: User::class)]\nclass UserChangedNotifier\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Validator in Entity Class with PHP Attributes\nDESCRIPTION: This example shows how to apply the custom validator to a property in an entity class using PHP attributes.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/validation/custom_constraint.rst#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n// src/Entity/AcmeEntity.php\nnamespace App\\Entity;\n\nuse App\\Validator as AcmeAssert;\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass AcmeEntity\n{\n    // ...\n\n    #[Assert\\NotBlank]\n    #[AcmeAssert\\ContainsAlphanumeric(mode: 'loose')]\n    protected string $name;\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Casting Non-Array Values to Arrays for Improved Symfony Configuration Flexibility (PHP)\nDESCRIPTION: Shows use of the castToArray() helper in Symfony config to automatically convert scalar or list values to arrays for fields that expect arrays. Ensures configuration remains user-friendly and consistent, even if the user provides only a string or number. Should be used in combination with arrayNode definitions. Inputs can be string or numeric; output is always an array for reliable downstream processing.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/config/definition.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n->arrayNode('hosts')\n    ->beforeNormalization()->castToArray()->end()\n    // ...\n->end()\n```\n\n----------------------------------------\n\nTITLE: Returning a Multi-Command Application from Runtime Closure (PHP)\nDESCRIPTION: This PHP snippet demonstrates returning a `Symfony\\Component\\Console\\Application` instance from the runtime closure, suitable for applications with multiple commands. The closure configures the Application instance (adds commands, sets default) and returns it. `SymfonyRuntime` uses `ConsoleApplicationRunner`.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/runtime.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Console\\Application;\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\nrequire_once dirname(__DIR__).'/vendor/autoload_runtime.php';\n\nreturn static function (array $context): Application {\n    $command = new Command('hello');\n    $command->setCode(static function (InputInterface $input, OutputInterface $output): void {\n        $output->write('Hello World');\n    });\n\n    $app = new Application();\n    $app->add($command);\n    $app->setDefaultCommand('hello', true);\n\n    return $app;\n};\n```\n\n----------------------------------------\n\nTITLE: Getting Timezone Offsets for Specific Timestamps with Symfony Intl\nDESCRIPTION: Example showing how to get timezone offsets at specific points in time, accounting for daylight saving time changes. The second parameter allows specifying the timestamp to check.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/intl.rst#2025-04-22_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n// In 2019, the DST period in Madrid (Spain) went from March 31 to October 27\n$offset = Timezones::getRawOffset('Europe/Madrid', strtotime('March 31, 2019'));   // $offset = 3600\n$offset = Timezones::getRawOffset('Europe/Madrid', strtotime('April 1, 2019'));    // $offset = 7200\n$offset = Timezones::getGmtOffset('Europe/Madrid', strtotime('October 27, 2019')); // $offset = 'GMT+02:00'\n$offset = Timezones::getGmtOffset('Europe/Madrid', strtotime('October 28, 2019')); // $offset = 'GMT+01:00'\n```\n\n----------------------------------------\n\nTITLE: Configuring Monolog Handlers in PHP\nDESCRIPTION: This PHP code configures multiple Monolog handlers including a fingers_crossed handler, a stream handler, and a syslog handler. It demonstrates how to set up conditional logging based on error levels.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/logging.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/prod/monolog.php\nuse Psr\\Log\\LogLevel;\nuse Symfony\\Config\\MonologConfig;\n\nreturn static function (MonologConfig $monolog): void {\n    $monolog->handler('filter_for_errors')\n        ->type('fingers_crossed')\n        // if *one* log is error or higher, pass *all* to file_log\n        ->actionLevel(LogLevel::ERROR)\n        ->handler('file_log')\n    ;\n\n    // now passed *all* logs, but only if one log is error or higher\n    $monolog->handler('file_log')\n        ->type('stream')\n        ->path('%kernel.logs_dir%/%kernel.environment%.log')\n        ->level(LogLevel::DEBUG)\n    ;\n\n    // still passed *all* logs, and still only logs error or higher\n    $monolog->handler('syslog_handler')\n        ->type('syslog')\n        ->level(LogLevel::ERROR)\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Updated Front Controller Using Dependency Injection Container in PHP\nDESCRIPTION: This snippet shows an updated front controller that uses the dependency injection container. It demonstrates how to include routes and the container, and how to get the framework instance from the container.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/create_framework/dependency_injection.rst#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n// example.com/web/front.php\nrequire_once __DIR__.'/../vendor/autoload.php';\n\nuse Symfony\\Component\\HttpFoundation\\Request;\n\n$routes = include __DIR__.'/../src/app.php';\n$container = include __DIR__.'/../src/container.php';\n\n$request = Request::createFromGlobals();\n\n$response = $container->get('framework')->handle($request);\n\n$response->send();\n```\n\n----------------------------------------\n\nTITLE: Changing Case and Casing Styles of Strings (PHP)\nDESCRIPTION: This snippet illustrates the use of UnicodeString's methods for altering letter case: lower(), localeLower(), upper(), localeUpper(), title(), localeTitle(), folded(), as well as converting to camelCase and snake_case. Different locales can affect the string transformation output. This is critical for correct internationalized text processing.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/string.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// changes all graphemes/code points to lower case\nu('FOO Bar Brİan')->lower();  // 'foo bar bri̇an'\n// changes all graphemes/code points to lower case according to locale-specific case mappings\nu('FOO Bar Brİan')->localeLower('en');  // 'foo bar bri̇an'\nu('FOO Bar Brİan')->localeLower('lt');  // 'foo bar bri̇̇an'\n\n// when dealing with different languages, uppercase/lowercase is not enough\n// there are three cases (lower, upper, title), some characters have no case,\n// case is context-sensitive and locale-sensitive, etc.\n// this method returns a string that you can use in case-insensitive comparisons\nu('FOO Bar')->folded();             // 'foo bar'\nu('Die O\\'Brian Straße')->folded(); // \"die o'brian strasse\"\n\n// changes all graphemes/code points to upper case\nu('foo BAR bάz')->upper(); // 'FOO BAR BΆZ'\n// changes all graphemes/code points to upper case according to locale-specific case mappings\nu('foo BAR bάz')->localeUpper('en'); // 'FOO BAR BΆZ'\nu('foo BAR bάz')->localeUpper('el'); // 'FOO BAR BAZ'\n\n// changes all graphemes/code points to \"title case\"\nu('foo ijssel')->title();               // 'Foo ijssel'\nu('foo ijssel')->title(allWords: true); // 'Foo Ijssel'\n// changes all graphemes/code points to \"title case\" according to locale-specific case mappings\nu('foo ijssel')->localeTitle('en'); // 'Foo ijssel'\nu('foo ijssel')->localeTitle('nl'); // 'Foo IJssel'\n\n// changes all graphemes/code points to camelCase\nu('Foo: Bar-baz.')->camel(); // 'fooBarBaz'\n// changes all graphemes/code points to snake_case\nu('Foo: Bar-baz.')->snake(); // 'foo_bar_baz'\n```\n\n----------------------------------------\n\nTITLE: Bad and Good Usage: Passing Class Names to Extractor Methods (Symfony, PHP)\nDESCRIPTION: Clarifies that extractor methods should be given class names as strings, not object instances. Passing an object can lead to inconsistent results with some extractors. Requires symfony/property-info.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/property_info.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// bad! It may work, but not with all extractors\n$propertyInfo->getProperties($awesomeObject);\n\n// Good!\n$propertyInfo->getProperties(get_class($awesomeObject));\n$propertyInfo->getProperties('Example\\Namespace\\YourAwesomeClass');\n$propertyInfo->getProperties(YourAwesomeClass::class);\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Validation with When Constraint in PHP\nDESCRIPTION: This snippet demonstrates how to use the When constraint in a Symfony entity class to apply conditional validation. It shows the setup of validator metadata and a complex validation method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/When.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Discount\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('type', new Assert\\When(\n            expression: 'value == \"percent\"',\n            constraints: [\n                new Assert\\Callback('doComplexValidation'),\n            ],\n        ));\n    }\n\n    public function doComplexValidation(ExecutionContextInterface $context, $payload): void\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Property List via SerializerExtractor and Serializer Groups (Symfony PHP)\nDESCRIPTION: Illustrates construction and usage of Symfony\\Component\\PropertyInfo\\Extractor\\SerializerExtractor to retrieve property lists relying on serializer metadata and groups. Requires instantiating a metadata factory using AttributeLoader, and calling getProperties with the 'serializer_groups' option. This extractor is not automatically registered; the symfony/serializer library must be available.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/property_info.rst#2025-04-22_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\PropertyInfo\\Extractor\\SerializerExtractor;\\nuse Symfony\\Component\\Serializer\\Mapping\\Factory\\ClassMetadataFactory;\\nuse Symfony\\Component\\Serializer\\Mapping\\Loader\\AttributeLoader;\\n\\n$serializerClassMetadataFactory = new ClassMetadataFactory(new AttributeLoader());\\n$serializerExtractor = new SerializerExtractor($serializerClassMetadataFactory);\\n\\n// the `serializer_groups` option must be configured (may be set to null)\\n$serializerExtractor->getProperties($class, ['serializer_groups' => ['mygroup']]);\\n\n```\n\n----------------------------------------\n\nTITLE: Customizing Notification Message for Chat Channels - PHP\nDESCRIPTION: This PHP code customizes the chat message sent by a notification, specifically for Slack. When the transport is Slack, it sets a custom subject and emoji before returning a ChatMessage. If not Slack, it lets the Notifier generate the default message. Requires Symfony's Notifier and Notification components, plus implementation of ChatNotificationInterface. Inputs are recipient and transport; output is a specialized ChatMessage or null.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/notifier.rst#2025-04-22_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n// src/Notifier/InvoiceNotification.php\nnamespace App\\Notifier;\n\nuse Symfony\\Component\\Notifier\\Message\\ChatMessage;\nuse Symfony\\Component\\Notifier\\Notification\\ChatNotificationInterface;\nuse Symfony\\Component\\Notifier\\Notification\\Notification;\nuse Symfony\\Component\\Notifier\\Recipient\\RecipientInterface;\n\nclass InvoiceNotification extends Notification implements ChatNotificationInterface\n{\n    public function __construct(\n        private int $price,\n    ) {\n    }\n\n    public function asChatMessage(RecipientInterface $recipient, ?string $transport = null): ?ChatMessage\n    {\n        // Add a custom subject and emoji if the message is sent to Slack\n        if ('slack' === $transport) {\n            $this->subject('You\\'re invoiced '.strval($this->price).' EUR.');\n            $this->emoji(\"money\");\n            return ChatMessage::fromNotification($this);\n        }\n\n        // If you return null, the Notifier will create the ChatMessage\n        // based on this notification as it would without this method.\n        return null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Authentication Status in Symfony Controller\nDESCRIPTION: This snippet demonstrates how to check if a user is fully authenticated in a Symfony controller. It uses the denyAccessUnlessGranted() method to ensure the user has the 'IS_AUTHENTICATED_FULLY' attribute.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/remember_me.rst#2025-04-22_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$this->denyAccessUnlessGranted('IS_AUTHENTICATED_FULLY');\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Finding Files by Multiple Name Patterns with Symfony Finder in PHP\nDESCRIPTION: Demonstrates two ways to specify multiple name patterns for the search: either by chaining multiple calls to the `name()` method or by passing an array of patterns (globs, strings, or regexes) to a single `name()` call.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/finder.rst#2025-04-22_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$finder->files()->name('*.php')->name('*.twig');\n```\n\nLANGUAGE: php\nCODE:\n```\n// same as above\n$finder->files()->name(['*.php', '*.twig']);\n```\n\n----------------------------------------\n\nTITLE: MonthSensitive Service with ClockAwareTrait\nDESCRIPTION: Example service class using ClockAwareTrait to make time-sensitive decisions\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/clock.rst#2025-04-22_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace App\\TimeUtils;\n\nuse Symfony\\Component\\Clock\\ClockAwareTrait;\n\nclass MonthSensitive\n{\n    use ClockAwareTrait;\n\n    public function isWinterMonth(): bool\n    {\n        $now = $this->now();\n\n        return match ($now->format('F')) {\n            'December', 'January', 'February', 'March' => true,\n            default => false,\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Translations in Twig Templates\nDESCRIPTION: Shows how to use the trans filter and tag for translations in Twig templates.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/translation.rst#2025-04-22_snippet_37\n\nLANGUAGE: twig\nCODE:\n```\n{# messages can be found when using the trans filter and tag #}\n{% trans %}Symfony is great{% endtrans %}\n\n{{ 'Symfony is great'|trans }}\n```\n\n----------------------------------------\n\nTITLE: Using Predefined Style Tags in Symfony Console Output (PHP)\nDESCRIPTION: Demonstrates applying built-in styles (info, comment, question, error) to console output using tags within the string passed to the `writeln` method of the OutputInterface object. These tags provide standard visual cues for different types of messages.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/console/coloring.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// green text\n$output->writeln('<info>foo</info>');\n\n// yellow text\n$output->writeln('<comment>foo</comment>');\n\n// black text on a cyan background\n$output->writeln('<question>foo</question>');\n\n// white text on a red background\n$output->writeln('<error>foo</error>');\n```\n\n----------------------------------------\n\nTITLE: Service Decoration Using PHP Attributes\nDESCRIPTION: Example of implementing the Decorator pattern using PHP attributes. The AsDecorator attribute is used to replace a service while keeping the original service available for reference.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/service_decoration.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/DecoratingMailer.php\nnamespace App;\n\n// ...\nuse Symfony\\Component\\DependencyInjection\\Attribute\\AsDecorator;\n\n#[AsDecorator(decorates: Mailer::class)]\nclass DecoratingMailer\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Configuration Files in Symfony Extension\nDESCRIPTION: This code shows how to load service definitions from a configuration file (e.g., XML) in the load() method of a Symfony extension class. It uses XmlFileLoader to load the services.xml file from the config directory.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/bundles/extension.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Config\\FileLocator;\nuse Symfony\\Component\\DependencyInjection\\Loader\\XmlFileLoader;\n\n// ...\npublic function load(array $configs, ContainerBuilder $container): void\n{\n    $loader = new XmlFileLoader(\n        $container,\n        new FileLocator(__DIR__.'/../../config')\n    );\n    $loader->load('services.xml');\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Environment Variables in PHP\nDESCRIPTION: Example of setting and accessing JSON-encoded environment variables in Symfony PHP configuration. This defines ALLOWED_LANGUAGES as a JSON array and accesses it via the json processor.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/env_var_processors.rst#2025-04-22_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/framework.php\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nuse Symfony\\Component\\DependencyInjection\\ContainerBuilder;\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (ContainerBuilder $container): void {\n    $container->setParameter('env(ALLOWED_LANGUAGES)', '[\"en\",\"de\",\"es\"]');\n    $container->setParameter('app_allowed_languages', '%env(json:ALLOWED_LANGUAGES)%');\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Validation Constraints in XML\nDESCRIPTION: Shows how to add validation constraints to entity properties using XML configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/forms.rst#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping\n        https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\Task\">\n        <property name=\"task\">\n            <constraint name=\"NotBlank\"/>\n        </property>\n        <property name=\"dueDate\">\n            <constraint name=\"NotBlank\"/>\n            <constraint name=\"Type\">\\DateTimeInterface</constraint>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Adding Form Elements Dynamically with JavaScript in Symfony\nDESCRIPTION: Function to dynamically add new form elements to a collection when a user clicks an 'Add' button. It replaces the '__name__' placeholder with a unique index to create properly named form fields.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/form_collections.rst#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction addFormToCollection(e) {\n  const collectionHolder = document.querySelector('.' + e.currentTarget.dataset.collectionHolderClass);\n\n  const item = document.createElement('li');\n\n  item.innerHTML = collectionHolder\n    .dataset\n    .prototype\n    .replace(\n      /__name__/g,\n      collectionHolder.dataset.index\n    );\n\n  collectionHolder.appendChild(item);\n\n  collectionHolder.dataset.index++;\n};\n```\n\n----------------------------------------\n\nTITLE: Instantiating and Modifying Service Definition Class in PHP\nDESCRIPTION: Illustrates how to create a new `Definition` object, specifying the service's class name. It also shows how to override the initially set class using `setClass()` and retrieve the configured class name using `getClass()`. This is fundamental for programmatically defining services.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/definitions.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Config\\CustomConfigManager;\nuse App\\Config\\UserConfigManager;\nuse Symfony\\Component\\DependencyInjection\\Definition;\n\n$definition = new Definition(UserConfigManager::class);\n\n// override the class\n$definition->setClass(CustomConfigManager::class);\n\n// get the class configured for this definition\n$class = $definition->getClass();\n```\n\n----------------------------------------\n\nTITLE: Implementing Password Upgrader in Custom User Provider\nDESCRIPTION: Implementation of the PasswordUpgraderInterface in a custom user provider. This allows password hash upgrades when using a non-Doctrine user storage system.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/passwords.rst#2025-04-22_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n// src/Security/UserProvider.php\nnamespace App\\Security;\n\n// ...\nuse Symfony\\Component\\Security\\Core\\User\\PasswordUpgraderInterface;\n\nclass UserProvider implements UserProviderInterface, PasswordUpgraderInterface\n{\n    // ...\n\n    public function upgradePassword(UserInterface $user, string $newHashedPassword): void\n    {\n        // set the new hashed password on the User object\n        $user->setPassword($newHashedPassword);\n\n        // ... store the new password\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Type Validation Constraints with PHP Attributes in Symfony\nDESCRIPTION: Example of using Type constraint with PHP attributes in a Symfony entity to validate different property types including object instances, strings, integers, and specialized character types.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Type.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Author.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Mime\\Address;\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Author\n{\n    #[Assert\\Type(Address::class)]\n    protected $emailAddress;\n\n    #[Assert\\Type('string')]\n    protected $firstName;\n\n    #[Assert\\Type(\n        type: 'integer',\n        message: 'The value {{ value }} is not a valid {{ type }}.',\n    )]\n    protected $age;\n\n    #[Assert\\Type(type: ['alpha', 'digit'])]\n    protected $accessCode;\n}\n```\n\n----------------------------------------\n\nTITLE: Inverse Emoji Transliteration in Twig\nDESCRIPTION: Twig code examples showing how to use the 'emojify' filter to convert short codes back to emojis, with options for different services.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/emoji.rst#2025-04-22_snippet_11\n\nLANGUAGE: Twig\nCODE:\n```\n{{ 'I like :kiwi-fruit:'|emojify }} {# renders: I like 🥝 #}\n{{ 'I like :kiwi:'|emojify }}       {# renders: I like 🥝 #}\n{{ 'I like :kiwifruit:'|emojify }}  {# renders: I like 🥝 #}\n\n{{ 'I :green-heart: this'|emojify }}                  {# renders: I 💚 this #}\n{{ ':green_salad: is nice'|emojify('slack') }}        {# renders: 🥗 is nice #}\n{{ 'My :turtle: has no name yet'|emojify('github') }} {# renders: My 🐢 has no name yet #}\n{{ ':kiwi: is a great fruit'|emojify('gitlab') }}     {# renders: 🥝 is a great fruit #}\n```\n\n----------------------------------------\n\nTITLE: Basic PHP Request and Response Handling\nDESCRIPTION: Demonstrates how PHP handles HTTP requests and responses using superglobal variables and header functions.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/introduction/http_fundamentals.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$uri = $_SERVER['REQUEST_URI'];\n$foo = $_GET['foo'];\n\nheader('Content-Type: text/html');\necho 'The URI requested is: '.$uri;\necho 'The value of the \"foo\" parameter is: '.$foo;\n```\n\n----------------------------------------\n\nTITLE: Dynamic Module Import with Webpack\nDESCRIPTION: Improved implementation using dynamic imports to load the VideoPlayer module asynchronously when needed, reducing initial bundle size and improving performance.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/code-splitting.rst#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// assets/app.js\n\nimport $ from 'jquery';\n\n$('.js-open-video').on('click', function() {\n    // you could start a loading animation here\n\n    // use import() as a function - it returns a Promise\n    import('./components/VideoPlayer').then(({ default: VideoPlayer }) => {\n        // you could stop a loading animation here\n\n        // use the larger VideoPlayer module\n        const player = new VideoPlayer('some-element');\n\n    }).catch(error => 'An error occurred while loading the component');\n});\n```\n\n----------------------------------------\n\nTITLE: Using the Request Object as Subject in #[IsGranted] Attribute (PHP)\nDESCRIPTION: Demonstrates specifying the current HTTP Request object as the `subject` for the `#[IsGranted]` attribute's permission check by using `new Expression('request')`. This allows the `attribute` expression to access request properties or headers for authorization decisions. Requires Symfony Security, ExpressionLanguage, and HTTP Foundation components.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/expressions.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n#[IsGranted(\n    attribute: '...',\n    subject: new Expression('request'),\n)]\npublic function index(): Response\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Long Processes with Lock Verification in Symfony\nDESCRIPTION: Example showing a transaction pattern with lock verification. It demonstrates acquiring a lock, starting a transaction, performing a long operation, and then verifying the lock is still held before committing, with rollback handling if the lock was lost.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/lock.rst#2025-04-22_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n// If we cannot acquire ourselves, it means some other process is already working on it\nif (!$lock->acquire()) {\n    return;\n}\n\n$this->beginTransaction();\n\n// Perform a very long process that might exceed TTL of the lock\n\nif ($lock->isAcquired()) {\n    // Still all good, no other instance has acquired the lock in the meantime, we're safe\n    $this->commit();\n} else {\n    // Bummer! Our lock has apparently exceeded TTL and another process has started in\n    // the meantime so it's not safe for us to commit.\n    $this->rollback();\n    throw new \\Exception('Process failed');\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Lock to Symfony Scheduler for Multiple Workers\nDESCRIPTION: Code snippet demonstrating how to add a lock to a Symfony Scheduler when using multiple workers. This prevents the same task from being executed more than once simultaneously.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/scheduler.rst#2025-04-22_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n// src/Scheduler/SaleTaskProvider.php\nnamespace App\\Scheduler;\n\n#[AsSchedule('uptoyou')]\nclass SaleTaskProvider implements ScheduleProviderInterface\n{\n    public function getSchedule(): Schedule\n    {\n        $this->removeOldReports = RecurringMessage::cron('3 8 * * 1', new CleanUpOldSalesReport());\n\n        return $this->schedule ??= (new Schedule())\n            ->with(\n                // ...\n            )\n            ->lock($this->lockFactory->createLock('my-lock'));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Globally Registering a Monolog Processor in PHP\nDESCRIPTION: PHP container configuration example registering `Monolog\\Processor\\IntrospectionProcessor` and adding the `monolog.processor` tag globally using the container builder. This makes the processor active for all logging activities handled by Monolog within the application.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/dic_tags.rst#2025-04-22_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse Monolog\\Processor\\IntrospectionProcessor;\n\n$container\n    ->register(IntrospectionProcessor::class)\n    ->addTag('monolog.processor')\n;\n```\n\n----------------------------------------\n\nTITLE: Monolog PHP Configuration\nDESCRIPTION: PHP configuration for Monolog console handler with channel exclusions using the Config builder.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/logging/monolog_console.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/dev/monolog.php\nuse Symfony\\Config\\MonologConfig;\n\nreturn static function (MonologConfig $monolog): void {\n    $monolog->handler('console')\n        ->type('console')\n        ->processPsr3Messages(false)\n        ->channels()->elements(['!event', '!doctrine', '!console'])\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving Currency Information with Symfony Intl\nDESCRIPTION: Example of retrieving currency cash rounding increment using the Currencies class. The method returns the smallest cash amount possible for the specified currency.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/intl.rst#2025-04-22_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$cashRoundingIncrement = Currencies::getCashRoundingIncrement('CAD'); // returns: 5\n```\n\n----------------------------------------\n\nTITLE: Binding (Authenticating) to an LDAP Server in PHP\nDESCRIPTION: Authenticates against the configured LDAP server using a user's distinguished name (DN) and password. This uses the simple bind mechanism.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/ldap.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Ldap\\Ldap;\n// ...\n\n$ldap->bind($dn, $password);\n```\n\n----------------------------------------\n\nTITLE: Accessing Multi-dimensional Arrays with PropertyAccessor (PHP)\nDESCRIPTION: Demonstrates accessing elements within nested arrays (multi-dimensional arrays) using chained bracket notation in the property path string passed to `PropertyAccessor::getValue()`.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/property_access.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// ...\n$persons = [\n    [\n        'first_name' => 'Wouter',\n    ],\n    [\n        'first_name' => 'Ryan',\n    ],\n];\n\nvar_dump($propertyAccessor->getValue($persons, '[0][first_name]')); // 'Wouter'\nvar_dump($propertyAccessor->getValue($persons, '[1][first_name]')); // 'Ryan'\n```\n\n----------------------------------------\n\nTITLE: Registering Transport Factory in YAML Configuration\nDESCRIPTION: Configures the service container to register the custom transport factory with the 'messenger.transport_factory' tag, making it available for the Messenger component to use.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/messenger/custom-transport.rst#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nservices:\n    Your\\Transport\\YourTransportFactory:\n        tags: [messenger.transport_factory]\n```\n\n----------------------------------------\n\nTITLE: Getting Localized Currency Names with Symfony Intl\nDESCRIPTION: Example showing how to get currency names in different languages using the Currencies class. The first example gets all currency names in German, while the second gets a specific currency name.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/intl.rst#2025-04-22_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$currencies = Currencies::getNames('de');\n// => ['AFN' => 'Afghanischer Afghani', 'EGP' => 'Ägyptisches Pfund', ...]\n\n$currency = Currencies::getName('INR', 'de');\n// => 'Indische Rupie'\n```\n\n----------------------------------------\n\nTITLE: Using DoctrineExtractor in PHP\nDESCRIPTION: Demonstrates how to use DoctrineExtractor to extract property and type information from Doctrine entities.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/property_info.rst#2025-04-22_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\n$doctrineExtractor = new DoctrineExtractor($entityManager);\n\n// List information.\n$doctrineExtractor->getProperties($class);\n// Type information.\n$doctrineExtractor->getTypes($class, $property);\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Locator in PHP\nDESCRIPTION: Demonstrates how to configure a service locator using PHP in Symfony. It sets up a ServiceLocator with command handlers and tags it for container use.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/service_subscribers_locators.rst#2025-04-22_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nuse Symfony\\Component\\DependencyInjection\\ServiceLocator;\n\nreturn function(ContainerConfigurator $container): void {\n    $services = $container->services();\n\n    $services->set('app.command_handler_locator', ServiceLocator::class)\n        ->args([[\n            'App\\FooCommand' => service('app.command_handler.foo'),\n            'App\\BarCommand' => service('app.command_handler.bar'),\n        ]])\n        // if you are not using the default service autoconfiguration,\n        // add the following tag to the service definition:\n        // ->tag('container.service_locator')\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Container Inline Factories in YAML\nDESCRIPTION: Configuration for dumping the service container into a single file using YAML format. This improves performance when using PHP class preloading in PHP 7.4 or newer versions.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/performance.rst#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nparameters:\n    # ...\n    .container.dumper.inline_factories: true\n```\n\n----------------------------------------\n\nTITLE: Embedding Images and Attaching Files with Symfony Mime Message Class (PHP)\nDESCRIPTION: Extends the low-level `Message` class usage by demonstrating how to embed images using `DataPart` and `RelatedPart`, attach files using `DataPart` and `MixedPart`, and link embedded images in the HTML content using `cid:`. This provides full control over complex email structures.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/mime.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// ...\nuse Symfony\\Component\\Mime\\Part\\DataPart;\nuse Symfony\\Component\\Mime\\Part\\Multipart\\MixedPart;\nuse Symfony\\Component\\Mime\\Part\\Multipart\\RelatedPart;\n\n// ...\n$embeddedImage = new DataPart(fopen('/path/to/images/logo.png', 'r'), null, 'image/png');\n$imageCid = $embeddedImage->getContentId();\n\n$attachedFile = new DataPart(fopen('/path/to/documents/terms-of-use.pdf', 'r'), null, 'application/pdf');\n\n$textContent = new TextPart('Lorem ipsum...');\n$htmlContent = new TextPart(sprintf(\n    '<img src=\"cid:%s\"/> <h1>Lorem ipsum</h1> <p>...</p>', $imageCid\n), null, 'html');\n$bodyContent = new AlternativePart($textContent, $htmlContent);\n$body = new RelatedPart($bodyContent, $embeddedImage);\n\n$messageParts = new MixedPart($body, $attachedFile);\n\n$email = new Message($headers, $messageParts);\n```\n\n----------------------------------------\n\nTITLE: Assigning Error Levels to Validation Constraints in PHP Attributes\nDESCRIPTION: This snippet demonstrates how to use PHP attributes to assign different error levels (severity) to validation constraints on a User entity class. It uses the 'payload' option to set the severity for each constraint.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/validation/severity.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/User.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass User\n{\n    #[Assert\\NotBlank(payload: ['severity' => 'error'])]\n    protected string $username;\n\n    #[Assert\\NotBlank(payload: ['severity' => 'error'])]\n    protected string $password;\n\n    #[Assert\\Iban(payload: ['severity' => 'warning'])]\n    protected string $bankAccountNumber;\n}\n```\n\n----------------------------------------\n\nTITLE: Using PHP Attributes for Doctrine Event Listeners\nDESCRIPTION: This example shows how to use the AsDoctrineListener attribute with a simplified syntax, where the first parameter is the event name. The priority and connection parameters are optional and shown as commented code.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine/events.rst#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n// src/EventListener/SearchIndexer.php\nnamespace App\\EventListener;\n\nuse Doctrine\\Bundle\\DoctrineBundle\\Attribute\\AsDoctrineListener;\nuse Doctrine\\ORM\\Event\\PostPersistEventArgs;\n\n#[AsDoctrineListener('postPersist'/*, 500, 'default'*/)]\nclass SearchIndexer\n{\n    public function postPersist(PostPersistEventArgs $event): void\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Working with ULIDs in Symfony\nDESCRIPTION: Demonstrates various operations on ULID objects in Symfony, including validity checking, datetime retrieval, and comparison.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/uid.rst#2025-04-22_snippet_19\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Uid\\Ulid;\n\n$ulid1 = new Ulid();\n$ulid2 = new Ulid();\n\n// checking if a given value is valid as ULID\n$isValid = Ulid::isValid($ulidValue); // true or false\n\n// getting the ULID datetime\n$ulid1->getDateTime(); // returns a \\DateTimeImmutable instance\n\n// comparing ULIDs and checking for equality\n$ulid1->equals($ulid2); // false\n// this method returns $ulid1 <=> $ulid2\n$ulid1->compare($ulid2); // e.g. int(-1)\n```\n\n----------------------------------------\n\nTITLE: Triggering Deprecation Notices Using trigger_deprecation in PHP\nDESCRIPTION: This PHP snippet demonstrates the usage of the trigger_deprecation() function from the symfony/deprecation-contracts package. It requires symfony/deprecation-contracts to be installed and is used to programmatically notify about deprecated code, specifying the vendor, package, version, and a message. The function supports printf-like placeholders for dynamic messages, and should be used in PHP source files where deprecations need explicit marking.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/phpunit_bridge.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// indicates something is deprecated since version 1.3 of vendor-name/packagename\ntrigger_deprecation('vendor-name/package-name', '1.3', 'Your deprecation message');\n\n// you can also use printf format (all arguments after the message will be used)\ntrigger_deprecation('...', '1.3', 'Value \"%s\" is deprecated, use ...  instead.', $value);\n```\n\n----------------------------------------\n\nTITLE: Disabling XML Container Dump in PHP\nDESCRIPTION: Configuration to disable dumping the service container as XML in debug mode using PHP format, which can improve performance with large containers.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/performance.rst#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\n\n// ...\n$container->parameters()->set('debug.container.dump', false);\n```\n\n----------------------------------------\n\nTITLE: Detecting Safe Content Preference in PHP\nDESCRIPTION: This code shows how to detect if the user agent prefers 'safe' content and how to respond accordingly using Symfony's Request and Response objects.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#2025-04-22_snippet_34\n\nLANGUAGE: PHP\nCODE:\n```\nif ($request->preferSafeContent()) {\n    $response = new Response($alternativeContent);\n    // this informs the user we respected their preferences\n    $response->setContentSafe();\n\n    return $response;\n```\n\n----------------------------------------\n\nTITLE: Handling FailedMessageEvent in Symfony Mailer\nDESCRIPTION: Event listener for handling failed message events and accessing error details\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_70\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\nuse Symfony\\Component\\Mailer\\Event\\FailedMessageEvent;\nuse Symfony\\Component\\Mailer\\Exception\\TransportExceptionInterface;\n\npublic function onMessage(FailedMessageEvent $event): void\n{\n    // e.g you can get more information on this error when sending an email\n    $error = $event->getError();\n    if ($error instanceof TransportExceptionInterface) {\n        $error->getDebug();\n    }\n\n    // do something with the message\n}\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Form Values in Symfony DomCrawler in PHP\nDESCRIPTION: Covers form value population and retrieval, including multi-dimensional fields. Uses setValues to supply data as flat or nested arrays, and getValues/getPhpValues to retrieve user input, supporting advanced scenarios for testing or automation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/dom_crawler.rst#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n// sets values on the form internally\n$form->setValues([\n    'registration[username]' => 'symfonyfan',\n    'registration[terms]'    => 1,\n]);\n\n// gets back an array of values - in the \"flat\" array like above\n$values = $form->getValues();\n\n// returns the values like PHP would see them,\n// where \"registration\" is its own array\n$values = $form->getPhpValues();\n```\n\nLANGUAGE: php\nCODE:\n```\n// sets a single field\n$form->setValues(['multi' => ['value']]);\n\n// sets multiple fields at once\n$form->setValues(['multi' => [\n    1             => 'value',\n    'dimensional' => 'an other value',\n]]);\n\n// tick multiple checkboxes at once\n$form->setValues(['multi' => [\n    'dimensional' => [1, 3] // it uses the input value to determine which checkbox to tick\n]]);\n```\n\n----------------------------------------\n\nTITLE: SASL Binding to an LDAP Server in PHP\nDESCRIPTION: Authenticates against the configured LDAP server using SASL (Simple Authentication and Security Layer) with the provided DN and password. Optional parameters like mechanism (`$mech`) can also be passed.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/ldap.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// this method defines other optional arguments like $mech, $realm, $authcId, etc.\n$ldap->saslBind($dn, $password);\n```\n\n----------------------------------------\n\nTITLE: Using PositiveOrZero Constraint with PHP Attributes in Symfony\nDESCRIPTION: Example of applying the PositiveOrZero constraint to a property using PHP attributes in a Person entity class. This ensures the siblings property is either positive or zero.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/PositiveOrZero.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Person.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Person\n{\n    #[Assert\\PositiveOrZero]\n    protected int $siblings;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Adapters in PHP\nDESCRIPTION: PHP configuration for setting up cache adapters for app and system caches in Symfony.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/cache.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/cache.php\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework): void {\n    $framework->cache()\n        ->app('cache.adapter.filesystem')\n        ->system('cache.adapter.system')\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Using VarDumperTestTrait in PHPUnit Tests (PHP)\nDESCRIPTION: Demonstrates how to use the `VarDumperTestTrait` within a PHPUnit `TestCase` to leverage custom dump assertions. The `setUp` method configures custom casters (e.g., for `DateTimeInterface` to format dates) and dumper flags (`CliDumper::DUMP_LIGHT_ARRAY`, `CliDumper::DUMP_COMMA_SEPARATOR`) using `setUpVarDumper`. The `testWithDumpEquals` method shows how to use `assertDumpEquals` to compare a variable's dump output against an expected string or against the dump of another variable, considering the custom configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/var_dumper.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse PHPUnit\\Framework\\TestCase;\nuse Symfony\\Component\\VarDumper\\Test\\VarDumperTestTrait;\n\nclass ExampleTest extends TestCase\n{\n    use VarDumperTestTrait;\n\n    protected function setUp(): void\n    {\n        $casters = [\n            \\DateTimeInterface::class => static function (\\DateTimeInterface $date, array $a, Stub $stub): array {\n                $stub->class = 'DateTime';\n                return ['date' => $date->format('d/m/Y')];\n            },\n        ];\n\n        $flags = CliDumper::DUMP_LIGHT_ARRAY | CliDumper::DUMP_COMMA_SEPARATOR;\n\n        // this configures the casters & flags to use for all the tests in this class.\n        // If you need custom configurations per test rather than for the whole class,\n        // call this setUpVarDumper() method from those tests instead.\n        $this->setUpVarDumper($casters, $flags);\n    }\n\n    public function testWithDumpEquals(): void\n    {\n        $testedVar = [123, 'foo'];\n\n        // the expected dump contents don't have the default VarDumper structure\n        // because of the custom casters and flags used in the test\n        $expectedDump = <<<EOTXT\n[ \\\n  123, \\\n  \"foo\", \\\n]\nEOTXT;\n\n        // if the first argument is a string, it must be the whole expected dump\n        $this->assertDumpEquals($expectedDump, $testedVar);\n\n        // if the first argument is not a string, assertDumpEquals() dumps it\n        // and compares it with the dump of the second argument\n        $this->assertDumpEquals($testedVar, $testedVar);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Lazy Stimulus Controller in JavaScript\nDESCRIPTION: Demonstrates how to create a lazy-loaded Stimulus controller by adding the stimulusFetch: 'lazy' annotation. This causes the controller's code to be split into separate files and only downloaded when needed.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/simple-example.rst#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// assets/controllers/lazy-example-controller.js\nimport { Controller } from '@hotwired/stimulus';\n\n/* stimulusFetch: 'lazy' */\nexport default class extends Controller {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Symfony Routes in PHP\nDESCRIPTION: Demonstrates how to create a RouteCollection and add Route objects with patterns and default values.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/create_framework/routing.rst#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Routing\\RouteCollection;\nuse Symfony\\Component\\Routing\\Route;\n\n$routes = new RouteCollection();\n\n$routes->add('hello', new Route('/hello/{name}', ['name' => 'World']));\n$routes->add('bye', new Route('/bye'));\n```\n\n----------------------------------------\n\nTITLE: Creating a Controller for Embedding in Twig Templates\nDESCRIPTION: Shows how to create a controller that renders a template fragment with dynamic data, which can be embedded in other templates using the render() or controller() Twig functions.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/templates.rst#2025-04-22_snippet_35\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/BlogController.php\nnamespace App\\Controller;\n\nuse Symfony\\Component\\HttpFoundation\\Response;\n// ...\n\nclass BlogController extends AbstractController\n{\n    public function recentArticles(int $max = 3): Response\n    {\n        // get the recent articles somehow (e.g. making a database query)\n        $articles = ['...', '...', '...'];\n\n        return $this->render('blog/_recent_articles.html.twig', [\n            'articles' => $articles\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Service Method Result via Expression (Symfony XML)\nDESCRIPTION: Defines the `App\\Mailer` service in XML configuration and injects the return value of the `getMailerMethod()` from the `App\\Mail\\MailerConfiguration` service using an expression. The expression is placed within an `<argument>` tag with `type=\"expression\"`.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/expression_language.rst#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <!-- ... -->\n\n        <service id=\"App\\Mail\\MailerConfiguration\"></service>\n\n        <service id=\"App\\Mailer\">\n            <argument type=\"expression\">service('App\\\\Mail\\\\MailerConfiguration').getMailerMethod()</argument>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Parsing YAML with Enum Support in PHP\nDESCRIPTION: Demonstrates parsing YAML content containing enum values using the Symfony YAML component. Shows how to use the !php/enum syntax to properly parse enum cases.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/yaml.rst#2025-04-22_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n$yaml = '{ foo: FooEnum::Foo, bar: !php/enum FooEnum::Foo->value }';\n$parameters = Yaml::parse($yaml, Yaml::PARSE_CONSTANT);\n// the value of the 'foo' key is a string because it missed the `!php/enum` syntax\n// $parameters = ['foo' => 'FooEnum::Foo', 'bar' => 'foo'];\n```\n\nLANGUAGE: php\nCODE:\n```\nenum FooEnum: string\n{\n    case Foo = 'foo';\n    case Bar = 'bar';\n}\n\n// ...\n\n$yaml = '{ bar: !php/enum FooEnum }';\n$parameters = Yaml::parse($yaml, Yaml::PARSE_CONSTANT);\n// $parameters = ['bar' => ['foo', 'bar']];\n```\n\n----------------------------------------\n\nTITLE: Configuring PropertyAccessor Features in PHP\nDESCRIPTION: Shows how to enable or disable additional features in PropertyAccessor like magic method support using PropertyAccessorBuilder.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/property_access.rst#2025-04-22_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$propertyAccessorBuilder = PropertyAccess::createPropertyAccessorBuilder();\n\n$propertyAccessorBuilder->enableMagicCall(); // enables magic __call\n$propertyAccessorBuilder->enableMagicGet(); // enables magic __get\n$propertyAccessorBuilder->enableMagicSet(); // enables magic __set\n$propertyAccessorBuilder->enableMagicMethods(); // enables magic __get, __set and __call\n\n$propertyAccessorBuilder->disableMagicCall(); // disables magic __call\n$propertyAccessorBuilder->disableMagicGet(); // disables magic __get\n$propertyAccessorBuilder->disableMagicSet(); // disables magic __set\n$propertyAccessorBuilder->disableMagicMethods(); // disables magic __get, __set and __call\n\n// checks if magic __call, __get or __set handling are enabled\n$propertyAccessorBuilder->isMagicCallEnabled(); // true or false\n$propertyAccessorBuilder->isMagicGetEnabled(); // true or false\n$propertyAccessorBuilder->isMagicSetEnabled(); // true or false\n\n// At the end get the configured property accessor\n$propertyAccessor = $propertyAccessorBuilder->getPropertyAccessor();\n\n// Or all in one\n$propertyAccessor = PropertyAccess::createPropertyAccessorBuilder()\n    ->enableMagicCall()\n    ->getPropertyAccessor();\n```\n\n----------------------------------------\n\nTITLE: Using Autoconfigure for Interface Proxifying\nDESCRIPTION: Shows how to use the Autoconfigure attribute to specify which interface a lazy proxy should implement. This is useful for final classes that cannot be extended.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/lazy_services.rst#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Twig;\n\nuse Symfony\\Component\\DependencyInjection\\Attribute\\Autoconfigure;\nuse Twig\\Extension\\ExtensionInterface;\n\n#[Autoconfigure(lazy: ExtensionInterface::class)]\nclass AppExtension implements ExtensionInterface\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony Workflow Component using Composer\nDESCRIPTION: This command uses Composer, the PHP dependency manager, to add the `symfony/workflow` package to your project.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/workflow.rst#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require symfony/workflow\n```\n\n----------------------------------------\n\nTITLE: Implementing When Constraint with PHP Attributes\nDESCRIPTION: Example showing how to use the When constraint with PHP attributes to validate discount values based on type.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/When.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// src/Model/Discount.php\nnamespace App\\Model;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Discount\n{\n    #[Assert\\GreaterThan(0)]\n    #[Assert\\When(\n        expression: 'this.getType() == \"percent\"',\n        constraints: [\n            new Assert\\LessThanOrEqual(100, message: 'The value should be between 1 and 100!')\n        ],\n        otherwise: [\n            new Assert\\LessThan(9999, message: 'The value should be less than 9999!')\n        ],\n    )]\n    private ?int $value;\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Manipulating Response with Symfony HttpFoundation\nDESCRIPTION: Examples of manipulating the HTTP response using Symfony's Response class.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/create_framework/http_foundation.rst#2025-04-22_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n$response = new Response();\n\n$response->setContent('Hello world!');\n$response->setStatusCode(200);\n$response->headers->set('Content-Type', 'text/html');\n\n// configure the HTTP cache headers\n$response->setMaxAge(10);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Switch User Voter in Symfony - PHP\nDESCRIPTION: Defines a custom voter class ('SwitchToCustomerVoter') that determines authorization for the 'CAN_SWITCH_USER' role. Leverages Symfony's security components and access decision manager, analyzes both user and subject, and can incorporate additional custom user logic. Requires implementation in 'src/Security/Voter/SwitchToCustomerVoter.php', dependency injection of 'AccessDecisionManagerInterface', and extends Symfony's Voter class. Inputs include token, user, subject, and output is a boolean indicating permission.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/impersonating_user.rst#2025-04-22_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n// src/Security/Voter/SwitchToCustomerVoter.php\\nnamespace App\\Security\\Voter;\\n\\nuse Symfony\\Bundle\\SecurityBundle\\Security;\\nuse Symfony\\Component\\Security\\Core\\Authentication\\Token\\TokenInterface;\\nuse Symfony\\Component\\Security\\Core\\Authorization\\AccessDecisionManagerInterface;\\nuse Symfony\\Component\\Security\\Core\\Authorization\\Voter\\Voter;\\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\\n\\nclass SwitchToCustomerVoter extends Voter\\n{\\n    public function __construct(\\n        private AccessDecisionManagerInterface $accessDecisionManager,\\n    ) {\\n    }\\n\\n    protected function supports($attribute, $subject): bool\\n    {\\n        return in_array($attribute, ['CAN_SWITCH_USER'])\\n            && $subject instanceof UserInterface;\\n    }\\n\\n    protected function voteOnAttribute($attribute, $subject, TokenInterface $token): bool\\n    {\\n        $user = $token->getUser();\\n        // if the user is anonymous or if the subject is not a user, do not grant access\\n        if (!$user instanceof UserInterface || !$subject instanceof UserInterface) {\\n            return false;\\n        }\\n\\n        // you can still check for ROLE_ALLOWED_TO_SWITCH\\n        if ($this->accessDecisionManager->decide($token, ['ROLE_ALLOWED_TO_SWITCH'])) {\\n            return true;\\n        }\\n\\n        // check for any roles you want\\n        if ($this->accessDecisionManager->decide($token, ['ROLE_TECH_SUPPORT'])) {\\n            return true;\\n        }\\n\\n        /*\\n         * or use some custom data from your User object\\n        if ($user->isAllowedToSwitch()) {\\n            return true;\\n        }\\n        */\\n\\n        return false;\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Importing JavaScript Files with Relative Paths\nDESCRIPTION: Example of importing a JavaScript file using a relative path, which could cause a 404 error if the path is incorrect.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/asset_mapper.rst#2025-04-22_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\n// assets/controllers/farm-controller.js\nimport '../farm/chicken.js';\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Closures in XML\nDESCRIPTION: XML configuration for injecting service closures. Demonstrates how to define a service with a service_closure argument type and handle optional dependencies using on-invalid attribute.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/service_closures.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"App\\Service\\MyService\">\n            <argument type=\"service_closure\" id=\"mailer\"/>\n\n            <!--\n            In case the dependency is optional\n            <argument type=\"service_closure\" id=\"mailer\" on-invalid=\"ignore\"/>\n            -->\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Sending Chat Messages in Controller\nDESCRIPTION: Example controller code showing how to send chat messages using ChatterInterface\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/notifier.rst#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/CheckoutController.php\nnamespace App\\Controller;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Notifier\\ChatterInterface;\nuse Symfony\\Component\\Notifier\\Message\\ChatMessage;\nuse Symfony\\Component\\Routing\\Attribute\\Route;\n\nclass CheckoutController extends AbstractController\n{\n    #[Route('/checkout/thankyou')]\n    public function thankyou(ChatterInterface $chatter): Response\n    {\n        $message = (new ChatMessage('You got a new invoice for 15 EUR.'))\n            ->transport('slack');\n\n        $sentMessage = $chatter->send($message);\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Translation Extractor Service\nDESCRIPTION: Demonstrates how to register a custom translation extractor service (`App\\Translation\\CustomExtractor`) in Symfony using YAML, XML, and PHP configuration. The service must be tagged with `translation.extractor` and requires an `alias` option (e.g., 'foo') to identify the extractor.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/dic_tags.rst#2025-04-22_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\n.. code-block:: yaml\n\n    services:\n        App\\Translation\\CustomExtractor:\n            tags:\n                - { name: translation.extractor, alias: foo }\n```\n\nLANGUAGE: xml\nCODE:\n```\n.. code-block:: xml\n\n    <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n    <container xmlns=\"http://symfony.com/schema/dic/services\"\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n            https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n        <services>\n            <service id=\"App\\Translation\\CustomExtractor\">\n                <tag name=\"translation.extractor\" alias=\"foo\"/>\n            </service>\n        </services>\n    </container>\n```\n\nLANGUAGE: php\nCODE:\n```\n.. code-block:: php\n\n    use App\\Translation\\CustomExtractor;\n\n    $container->register(CustomExtractor::class)\n        ->addTag('translation.extractor', ['alias' => 'foo']);\n```\n\n----------------------------------------\n\nTITLE: Fetching Locale Names with Default Locale using Symfony Intl in PHP\nDESCRIPTION: Demonstrates retrieving a list of all locale names and the name for a specific locale code (e.g., 'zh_Hans_MO') using the `Symfony\\Component\\Intl\\Locales` class. It uses the default locale set via `\\Locale::setDefault('en')`.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/intl.rst#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Intl\\Locales;\n\n\\Locale::setDefault('en');\n\n$locales = Locales::getNames();\n// ('localeCode' => 'localeName')\n// => ['af' => 'Afrikaans', 'af_NA' => 'Afrikaans (Namibia)', ...]\n\n$locale = Locales::getName('zh_Hans_MO');\n// => 'Chinese (Simplified, Macau SAR China)'\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom Default Command in Symfony Console Application (PHP)\nDESCRIPTION: This snippet shows how to instantiate a Symfony Console `Application`, add a custom command (`HelloWorldCommand`), and set that command as the default using `setDefaultCommand()` with the command's name. This replaces the default `ListCommand`.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/changing_default_command.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// application.php\nuse Acme\\Console\\Command\\HelloWorldCommand;\nuse Symfony\\Component\\Console\\Application;\n\n$command = new HelloWorldCommand();\n$application = new Application();\n$application->add($command);\n$application->setDefaultCommand($command->getName());\n$application->run();\n```\n\n----------------------------------------\n\nTITLE: Preserving Array Keys with useAttributeAsKey Method\nDESCRIPTION: PHP code example showing how to use the useAttributeAsKey method to preserve array keys in the configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/config/definition.rst#2025-04-22_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$node\n    ->fixXmlConfig('connection')\n    ->children()\n        ->arrayNode('connections')\n            ->useAttributeAsKey('name')\n            ->arrayPrototype()\n                ->children()\n                    ->scalarNode('table')->end()\n                    ->scalarNode('user')->end()\n                    ->scalarNode('password')->end()\n                ->end()\n            ->end()\n        ->end()\n    ->end()\n;\n```\n\n----------------------------------------\n\nTITLE: Applying IsFalse Constraint Using XML Configuration\nDESCRIPTION: Example of using XML configuration to apply the IsFalse constraint to a getter method that checks for invalid states.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/IsFalse.rst#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\Author\">\n        <getter property=\"stateInvalid\">\n            <constraint name=\"IsFalse\">\n                <option name=\"message\">You've entered an invalid state.</option>\n            </constraint>\n        </getter>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Implementing PSR-3 Logger Dependency in PHP Class\nDESCRIPTION: This snippet demonstrates how to create a class that depends on a PSR-3 compliant logger interface. The class constructor accepts a LoggerInterface and uses it to log an informational message.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/logger.rst#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace Acme;\n\nuse Psr\\Log\\LoggerInterface;\n\nclass MyDependency\n{\n    public function __construct(\n        private LoggerInterface $logger,\n    ) {\n    }\n\n    public function doStuff(): void\n    {\n        $this->logger->info('I love Tony Vairelles\\' hairdresser.');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using #[AutowireServiceClosure] for Lazy-Loading Services in PHP\nDESCRIPTION: Demonstrates how to use the #[AutowireServiceClosure] attribute to create a closure that instantiates a service, useful for lazy-loading and non-shared service dependencies.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/autowiring.rst#2025-04-22_snippet_17\n\nLANGUAGE: PHP\nCODE:\n```\n// src/Service/MessageGenerator.php\nnamespace App\\Service;\n\nuse App\\Service\\Remote\\MessageFormatter;\nuse Symfony\\Component\\DependencyInjection\\Attribute\\AutowireServiceClosure;\n\nclass MessageGenerator\n{\n    public function __construct(\n        #[AutowireServiceClosure('third_party.remote_message_formatter')]\n        private \\Closure $messageFormatterResolver,\n    ) {\n    }\n\n    public function generate(string $message): void\n    {\n        $formattedMessage = ($this->messageFormatterResolver)()->format($message);\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using CheckboxType in Symfony Form Builder\nDESCRIPTION: Demonstrates how to add a CheckboxType field to a Symfony form builder. The example shows setting a label and making the field optional.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/checkbox.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\CheckboxType;\n// ...\n\n$builder->add('public', CheckboxType::class, [\n    'label'    => 'Show this entry publicly?',\n    'required' => false,\n]);\n```\n\n----------------------------------------\n\nTITLE: Stacking Decorators in PHP Configuration\nDESCRIPTION: This PHP configuration demonstrates how to create a stack of ordered services, each decorating the next, in Symfony.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/service_decoration.rst#2025-04-22_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nreturn function(ContainerConfigurator $container): void {\n    $container->services()\n        ->stack('decorated_foo_stack', [\n            inline_service(\\Baz::class)->args([service('.inner')]),\n            inline_service(\\Bar::class)->args([service('.inner')]),\n            inline_service(\\Foo::class),\n        ])\n\n        // can be simplified when autowiring is enabled:\n        ->stack('decorated_foo_stack', [\n            inline_service(\\Baz::class),\n            inline_service(\\Bar::class),\n            inline_service(\\Foo::class),\n        ])\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Triggering MissingOptionsException with OptionsResolver in PHP\nDESCRIPTION: This PHP code shows that attempting to instantiate the `Mailer` class without providing a value for the required 'host' option results in a `MissingOptionsException` being thrown by the `OptionsResolver` during the `resolve` call.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/options_resolver.rst#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$mailer = new Mailer();\n\n// MissingOptionsException: The required option \"host\" is missing.\n```\n\n----------------------------------------\n\nTITLE: Target Controller Method for Forwarded Request in Symfony\nDESCRIPTION: Implementation of the target controller method that receives the forwarded request. The method parameters are matched by name with the array passed in the forward() call.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/controller/forwarding.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function fancy(string $name, string $color): Response\n{\n    // ... create and return a Response object\n}\n```\n\n----------------------------------------\n\nTITLE: Running Composer Update for All Symfony Packages - Terminal Command\nDESCRIPTION: Shows the CLI command required to update all installed Symfony packages after modifying composer.json constraints. This should be executed in the project root directory. Prerequisites: composer must be installed and accessible in the shell. Running this command will fetch and install all Symfony package updates matching the new constraints, and may prompt for additional actions depending on dependency changes.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/upgrade_minor.rst#2025-04-22_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer update \"symfony/*\"\n```\n\n----------------------------------------\n\nTITLE: Password Type with Hash Property Path Configuration\nDESCRIPTION: Example showing how to configure a PasswordType field with password hashing enabled. The plain password is stored in a separate property while the hashed version is saved to the specified hash_property_path.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/password.rst#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$builder->add('plainPassword', PasswordType::class, [\n    'hash_property_path' => 'password',\n    'mapped' => false,\n]);\n```\n\n----------------------------------------\n\nTITLE: Defining a Scoped HTTP Client Service in Symfony (YAML)\nDESCRIPTION: Shows how to define a client-scoped HTTP client service with a specific auth_bearer in YAML. Depends on the Symfony HttpClient component and the framework bundle config. The key 'scoped_clients' lists named clients such as 'my_api.client', with options like 'auth_bearer' set for each. Place configuration under framework.http_client.scoped_clients in config/packages/framework.yaml. The credentials set here will be used for matching request URLs.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_44\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/framework.yaml\\nframework:\\n    # ...\\n    http_client:\\n        scoped_clients:\\n            my_api.client:\\n                auth_bearer: secret_bearer_token\\n                # ...\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring SMTP Transport with TLS Options\nDESCRIPTION: Example of configuring an SMTP transport with the auto_tls option disabled, which can be useful in secure internal networks where encryption is not needed.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$dsn = 'smtp://user:pass@10.0.0.25?auto_tls=false';\n```\n\n----------------------------------------\n\nTITLE: Using LocaleSwitcher in Symfony Service\nDESCRIPTION: Demonstrates how to use the LocaleSwitcher service to change the application locale programmatically.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/translation.rst#2025-04-22_snippet_36\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Translation\\LocaleSwitcher;\n\nclass SomeService\n{\n    public function __construct(\n        private LocaleSwitcher $localeSwitcher,\n    ) {\n    }\n\n    public function someMethod(): void\n    {\n        // you can get the current application locale like this:\n        $currentLocale = $this->localeSwitcher->getLocale();\n\n        // you can set the locale for the entire application like this:\n        // (from now on, the application will use 'fr' (French) as the\n        // locale; including the default locale used to translate Twig templates)\n        $this->localeSwitcher->setLocale('fr');\n\n        // reset the current locale of your application to the configured default locale\n        // in config/packages/translation.yaml, by option 'default_locale'\n        $this->localeSwitcher->reset();\n\n        // you can also run some code with a certain locale, without\n        // changing the locale for the rest of the application\n        $this->localeSwitcher->runWithLocale('es', function() {\n\n            // e.g. render here some Twig templates using 'es' (Spanish) locale\n\n        });\n\n        // you can optionally declare an argument in your callback to receive the\n        // injected locale\n        $this->localeSwitcher->runWithLocale('es', function(string $locale) {\n\n            // here, the $locale argument will be set to 'es'\n\n        });\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Chaining Depth Constraints in Symfony Finder\nDESCRIPTION: Demonstrates how to specify multiple depth constraints by either chaining method calls or passing an array of constraints to the depth method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/finder.rst#2025-04-22_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n$finder->depth('> 2')->depth('< 5');\n\n// same as above\n$finder->depth(['> 2', '< 5']);\n```\n\n----------------------------------------\n\nTITLE: Managing LDAP Entries (Create, Update, Delete) in PHP\nDESCRIPTION: Illustrates how to use the `EntryManager` to perform CRUD operations on LDAP entries. It covers creating a new entry, finding an existing entry, checking/getting/setting attributes (case-sensitive and insensitive), adding/removing attribute values efficiently, and removing an entry.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/ldap.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Ldap\\Entry;\nuse Symfony\\Component\\Ldap\\Ldap;\n// ...\n\n$entry = new Entry('cn=Fabien Potencier,dc=symfony,dc=com', [\n    'sn' => ['fabpot'],\n    'objectClass' => ['inetOrgPerson'],\n]);\n\n$entryManager = $ldap->getEntryManager();\n\n// Creating a new entry\n$entryManager->add($entry);\n\n// Finding and updating an existing entry\n$query = $ldap->query('dc=symfony,dc=com', '(&(objectclass=person)(ou=Maintainers))');\n$result = $query->execute();\n$entry = $result[0];\n\n$phoneNumber = $entry->getAttribute('phoneNumber');\n$isContractor = $entry->hasAttribute('contractorCompany');\n// attribute names in getAttribute() and hasAttribute() methods are case-sensitive\n// pass FALSE as the second method argument to make them case-insensitive\n$isContractor = $entry->hasAttribute('contractorCompany', false);\n\n$entry->setAttribute('email', ['fabpot@symfony.com']);\n$entryManager->update($entry);\n\n// Adding or removing values to a multi-valued attribute is more efficient than using update()\n$entryManager->addAttributeValues($entry, 'telephoneNumber', ['+1.111.222.3333', '+1.222.333.4444']);\n$entryManager->removeAttributeValues($entry, 'telephoneNumber', ['+1.111.222.3333', '+1.222.333.4444']);\n\n// Removing an existing entry\n$entryManager->remove(new Entry('cn=Test User,dc=symfony,dc=com'));\n```\n\n----------------------------------------\n\nTITLE: Using RedispatchMessage in Symfony Scheduler for Better Scaling\nDESCRIPTION: Example of using RedispatchMessage in Symfony Scheduler to improve scaling. This allows specifying a transport for message redispatch before handling.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/scheduler.rst#2025-04-22_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n// src/Scheduler/SaleTaskProvider.php\nnamespace App\\Scheduler;\n\n#[AsSchedule('uptoyou')]\nclass SaleTaskProvider implements ScheduleProviderInterface\n{\n    public function getSchedule(): Schedule\n    {\n        return $this->schedule ??= (new Schedule())\n            ->with(\n                RecurringMessage::every('5 seconds', new RedispatchMessage(new Message(), 'async'))\n            );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Updates with Mercure in Symfony Controller\nDESCRIPTION: PHP code demonstrating how to inject the Publisher service and dispatch updates to the Mercure hub from a Symfony controller.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mercure.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/PublishController.php\nnamespace App\\Controller;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Mercure\\HubInterface;\nuse Symfony\\Component\\Mercure\\Update;\n\nclass PublishController extends AbstractController\n{\n    public function publish(HubInterface $hub): Response\n    {\n        $update = new Update(\n            'https://example.com/books/1',\n            json_encode(['status' => 'OutOfStock'])\n        );\n\n        $hub->publish($update);\n\n        return new Response('published!');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Finding by Path Pattern with Symfony Finder in PHP\nDESCRIPTION: Shows how to filter search results based on their path using the `path()` method. It accepts strings or regular expressions and matches against the relative path. The example finds items whose path contains 'data', optionally further filtered by name.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/finder.rst#2025-04-22_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n// matches files that contain \"data\" anywhere in their paths (files or directories)\n$finder->path('data');\n```\n\nLANGUAGE: php\nCODE:\n```\n// for example this will match data/*.xml and data.xml if they exist\n$finder->path('data')->name('*.xml');\n```\n\n----------------------------------------\n\nTITLE: Generating Asset Paths in Twig\nDESCRIPTION: The `asset` function generates the public URL path for a given asset (like CSS, JS, or images). It takes the asset's relative `path` and an optional `packageName` to use configured asset packages. The function automatically handles the application's base path and integrates with Symfony's asset versioning/cache-busting strategies.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#2025-04-22_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{{ asset(path, packageName = null) }}\n```\n\n----------------------------------------\n\nTITLE: Checking Property Paths with PropertyAccessor in PHP\nDESCRIPTION: Shows how to check if properties are readable or writable before attempting to access them using isReadable() and isWritable() methods.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/property_access.rst#2025-04-22_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$person = new Person();\n\nif ($propertyAccessor->isReadable($person, 'firstName')) {\n    // ...\n}\n\n$person = new Person();\n\nif ($propertyAccessor->isWritable($person, 'firstName')) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Predefined Choices with EntityType in Symfony Forms\nDESCRIPTION: Demonstrates how to use the 'choices' option to provide a predefined collection of entities for the EntityType field.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/entity.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Entity\\User;\nuse Symfony\\Bridge\\Doctrine\\Form\\Type\\EntityType;\n// ...\n\n$builder->add('users', EntityType::class, [\n    'class' => User::class,\n    'choices' => $group->getUsers(),\n]);\n```\n\n----------------------------------------\n\nTITLE: Initializing Stimulus in assets/bootstrap.js\nDESCRIPTION: JavaScript file that initializes the Stimulus application and registers controllers.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/installation.rst#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// assets/bootstrap.js\nimport { startStimulusApp } from '@symfony/stimulus-bridge';\n\n// Registers Stimulus controllers from controllers.json and in the controllers/ directory\nexport const app = startStimulusApp(require.context(\n    '@symfony/stimulus-bridge/lazy-controller-loader!./controllers',\n    true,\n    /\\.(j|t)sx?$/\n));\n\n// register any custom, 3rd party controllers here\n// app.register('some_controller_name', SomeImportedController);\n```\n\n----------------------------------------\n\nTITLE: Implementing Discriminator Maps for Interfaces with PHP Attributes in Symfony\nDESCRIPTION: Shows how to implement a discriminator map using PHP attributes to handle deserialization of interfaces and abstract classes, specifying the concrete implementation to use based on a type property.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer.rst#2025-04-22_snippet_61\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse Symfony\\Component\\Serializer\\Attribute\\DiscriminatorMap;\n\n#[DiscriminatorMap(\n    typeProperty: 'type',\n    mapping: [\n        'product' => Product::class,\n        'shipping' => Shipping::class,\n    ]\n)]\ninterface InvoiceItemInterface\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Local File and FTP URLs with Symfony UrlPackage (PHP)\nDESCRIPTION: This snippet shows that `UrlPackage` can handle protocols other than HTTP/HTTPS, such as `file://` for local file paths and `ftp://` for FTP resources. It uses `EmptyVersionStrategy` as versioning is typically not needed or applicable for these protocols.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/asset.rst#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Asset\\UrlPackage;\n// ...\n\n$localPackage = new UrlPackage(\n    'file:///path/to/images/',\n    new EmptyVersionStrategy()\n);\n\n$ftpPackage = new UrlPackage(\n    'ftp://example.com/images/',\n    new EmptyVersionStrategy()\n);\n\necho $localPackage->getUrl('/logo.png');\n// result: file:///path/to/images/logo.png\n\necho $ftpPackage->getUrl('/logo.png');\n// result: ftp://example.com/images/logo.png\n```\n\n----------------------------------------\n\nTITLE: Locating Resources in Symfony Bundles using HttpKernel\nDESCRIPTION: This snippet shows how to use the Symfony HttpKernel's locateResource method to transform logical paths into physical paths for bundle resources.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/http_kernel.rst#2025-04-22_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n$path = $kernel->locateResource('@FooBundle/Resources/config/services.xml');\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Monolog Email Error Handlers in PHP\nDESCRIPTION: Basic Monolog configuration in PHP format that configures handlers for error email notifications using the Symfony Config system.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/logging/monolog_email.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Config\\MonologConfig;\n\nreturn static function (MonologConfig $monolog): void {\n    $mainHandler = $monolog->handler('main')\n        ->type('fingers_crossed')\n        ->actionLevel('critical')\n        ->handler('deduplicated');\n\n    $monolog->handler('deduplicated')\n        ->type('deduplication')\n        ->handler('symfony_mailer');\n\n    $monolog->handler('symfony_mailer')\n        ->type('symfony_mailer')\n        ->fromEmail('error@example.com')\n        ->toEmail(['error@example.com'])\n        ->subject('An Error Occurred! %%message%%')\n        ->level('debug')\n        ->formatter('monolog.formatter.html')\n        ->contentType('text/html');\n};\n```\n\n----------------------------------------\n\nTITLE: ExpirationChecker Service Implementation\nDESCRIPTION: Example service class that uses ClockInterface to check if a date is expired\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/clock.rst#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Clock\\ClockInterface;\n\nclass ExpirationChecker\n{\n    public function __construct(\n        private ClockInterface $clock\n    ) {}\n\n    public function isExpired(DateTimeInterface $validUntil): bool\n    {\n        return $this->clock->now() > $validUntil;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Constraint Constructor in PHP\nDESCRIPTION: Shows the constructor implementation for a custom constraint class with named arguments and option handling.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/validation/custom_constraint.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\npublic $message = 'This value is invalid';\npublic $optionalBarOption = false;\n\n#[HasNamedArguments]\npublic function __construct(\n    $mandatoryFooOption,\n    ?string $message = null,\n    ?bool $optionalBarOption = null,\n    ?array $groups = null,\n    $payload = null,\n    array $options = []\n) {\n    if (\\is_array($mandatoryFooOption)) {\n        $options = array_merge($mandatoryFooOption, $options);\n    } elseif (null !== $mandatoryFooOption) {\n        $options['value'] = $mandatoryFooOption;\n    }\n\n    parent::__construct($options, $groups, $payload);\n\n    $this->message = $message ?? $this->message;\n    $this->optionalBarOption = $optionalBarOption ?? $this->optionalBarOption;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack Encore with PHP in Symfony\nDESCRIPTION: This PHP snippet shows how to configure Webpack Encore in a Symfony application using the Config component. It sets the output path, strict mode, and caching options, with different configurations applied based on the environment.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration.rst#2025-04-22_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/framework.php\nuse Symfony\\Component\\DependencyInjection\\Loader\\Configurator\\ContainerConfigurator;\nuse Symfony\\Config\\WebpackEncoreConfig;\n\nreturn static function (WebpackEncoreConfig $webpackEncore, ContainerConfigurator $container): void {\n    $webpackEncore\n        ->outputPath('%kernel.project_dir%/public/build')\n        ->strictMode(true)\n        ->cache(false)\n    ;\n\n    // cache is enabled only in the \"prod\" environment\n    if ('prod' === $container->env()) {\n        $webpackEncore->cache(true);\n    }\n\n    // disable strict mode only in the \"test\" environment\n    if ('test' === $container->env()) {\n        $webpackEncore->strictMode(false);\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Passing JSON Encode Options via Context in PHP\nDESCRIPTION: This snippet shows how to customize the JSON encoding process by passing options like `JSON_PRESERVE_ZERO_FRACTION` through the `json_encode_options` key within the serialization context array when calling the `serialize` method. This affects the output generated by the underlying PHP `json_encode` function.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer/encoders.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$this->serializer->serialize($data, 'json', [\n    'json_encode_options' => \\JSON_PRESERVE_ZERO_FRACTION,\n]);\n```\n\n----------------------------------------\n\nTITLE: Loading Profile From Response in PHP\nDESCRIPTION: PHP code to access profiling information programmatically from a response object using the profiler service.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/profiler.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// ... $profiler is the 'profiler' service\n$profile = $profiler->loadProfileFromResponse($response);\n```\n\n----------------------------------------\n\nTITLE: Advanced Node Selection with Chained Methods\nDESCRIPTION: Shows how to chain multiple filtering methods to narrow down node selection. This example filters h1 elements, reduces the selection based on a class attribute condition, and selects the first matching element.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/testing/dom_crawler.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$crawler\n    ->filter('h1')\n    ->reduce(function ($node, int $i): bool {\n        if (!$node->attr('class')) {\n            return false;\n        }\n\n        return true;\n    })\n    ->first();\n```\n\n----------------------------------------\n\nTITLE: Configuring Symfony Router for Production Environment\nDESCRIPTION: Demonstrates how to configure the Symfony router specifically for the production environment using YAML. This showcases Symfony's environment-specific configuration capabilities.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/quick_tour/the_architecture.rst#2025-04-22_snippet_7\n\nLANGUAGE: YAML\nCODE:\n```\n# config/packages/routing.yaml\nframework:\n    router:\n        utf8: true\n\nwhen@prod:\n    framework:\n        router:\n            strict_requirements: null\n```\n\n----------------------------------------\n\nTITLE: Installing Nyholm PSR-7 Implementation via Composer - Terminal\nDESCRIPTION: Installs nyholm/psr7 via Composer, providing an efficient PSR-7 HTTP message implementation required for the bridge. Ensure Composer is installed and run this from your project root. This dependency is necessary for object conversion in PSR-7/Symfony bridge scenarios.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/psr7.rst#2025-04-22_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require nyholm/psr7\n```\n\n----------------------------------------\n\nTITLE: Forcing Double Quotes on Values in YAML Dumping with PHP\nDESCRIPTION: Shows how to force all string values to be enclosed in double quotes when dumping YAML using the Symfony YAML component. Uses the DUMP_FORCE_DOUBLE_QUOTES_ON_VALUES flag.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/yaml.rst#2025-04-22_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n$dumped = Yaml::dump([\n    'foo' => 'bar', 'some foo' => 'some bar', 'x' => 3.14, 'y' => true, 'z' => null,\n]);\n// foo: bar, 'some foo': 'some bar', x: 3.14, 'y': true, z: null\n\n$dumped = Yaml::dump([\n    'foo' => 'bar', 'some foo' => 'some bar', 'x' => 3.14, 'y' => true, 'z' => null,\n], 2, 4, Yaml::DUMP_FORCE_DOUBLE_QUOTES_ON_VALUES);\n// \"foo\": \"bar\", \"some foo\": \"some bar\", \"x\": 3.14, \"y\": true, \"z\": null\n```\n\n----------------------------------------\n\nTITLE: Creating Cache Items with Cache Contracts\nDESCRIPTION: Example showing how to create and use cache items using Symfony's Cache Contracts interface. The code demonstrates using the get() method with a callback function.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/cache/cache_items.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// $cache pool object was created before\n$productsCount = $cache->get('stats.products_count', function (ItemInterface $item): string {\n    // [...]\n});\n```\n\n----------------------------------------\n\nTITLE: Preloading Assets with Twig in Symfony\nDESCRIPTION: Twig template code demonstrating how to preload a CSS file using the preload() function provided by WebLink.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/web_link.rst#2025-04-22_snippet_2\n\nLANGUAGE: html+twig\nCODE:\n```\n<head>\n    <!-- ... -->\n    <link rel=\"preload\" href=\"{{ preload('/app.css', {as: 'style'}) }}\" as=\"style\">\n    <link rel=\"stylesheet\" href=\"/app.css\">\n</head>\n```\n\n----------------------------------------\n\nTITLE: Overriding Parent Dependencies in YAML\nDESCRIPTION: YAML configuration showing how to override specific settings from the parent service for individual child services. This includes changing visibility settings and overriding or appending arguments.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/parent_services.rst#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nservices:\n    # ...\n\n    App\\Repository\\DoctrineUserRepository:\n        parent: App\\Repository\\BaseDoctrineRepository\n\n        # overrides the private setting of the parent service\n        public: true\n\n        # appends the '@app.username_checker' argument to the parent\n        # argument list\n        arguments: ['@app.username_checker']\n\n    App\\Repository\\DoctrinePostRepository:\n        parent: App\\Repository\\BaseDoctrineRepository\n\n        # overrides the first argument (using the special index_N key)\n        arguments:\n            index_0: '@doctrine.custom_entity_manager'\n```\n\n----------------------------------------\n\nTITLE: Adding Validation Constraints in PHP\nDESCRIPTION: Demonstrates how to add validation constraints to entity properties using PHP code.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/forms.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Task.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints\\NotBlank;\nuse Symfony\\Component\\Validator\\Constraints\\Type;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Task\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('task', new NotBlank());\n\n        $metadata->addPropertyConstraint('dueDate', new NotBlank());\n        $metadata->addPropertyConstraint(\n            'dueDate',\n\n```\n\n----------------------------------------\n\nTITLE: Triggering Deprecation Warning for Future Required Argument in PHP\nDESCRIPTION: This code demonstrates how to trigger a deprecation warning when a new argument will become required in the next major version. It's used when adding a new argument to a public method in a backward-compatible way.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/contributing/code/bc.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nif (\\func_num_args() < 2) {\n    trigger_deprecation('symfony/COMPONENT', 'X.Y', 'The \"%s()\" method will have a new \"bool $stripWhitespace\" argument in version Z.0, not defining it is deprecated.', __METHOD__);\n\n    $stripWhitespace = false;\n} else {\n    $stripWhitespace = func_get_arg(1);\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Expression AST to Array in PHP\nDESCRIPTION: Illustrates how to convert the Abstract Syntax Tree (AST) of a parsed expression into a PHP array using the `toArray()` method. This array representation allows for easier manipulation and analysis of the expression's structure programmatically.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/expression_language.rst#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n// ...\n\n$astAsArray = (new ExpressionLanguage())\n    ->parse('1 + 2', [])\n    ->getNodes()\n    ->toArray()\n;\n```\n\n----------------------------------------\n\nTITLE: Configuring Pull Request Workflow in Symfony\nDESCRIPTION: This code snippet sets up a state machine workflow for processing pull requests. It defines various states (places) such as 'start', 'coding', 'test', 'review', 'merged', and 'closed'. It also configures transitions between these states with associated metadata for visualization.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/workflow/dumping-workflows.rst#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$pullRequest = $framework->workflows()->workflows('pull_request');\n\n$pullRequest\n    ->type('state_machine')\n    ->supports(['App\\Entity\\PullRequest'])\n    ->initialMarking(['start']);\n\n$pullRequest->markingStore()\n    ->type('method')\n    ->property('currentPlace');\n\n$pullRequest->place()->name('start');\n$pullRequest->place()->name('coding');\n$pullRequest->place()->name('test');\n$pullRequest->place()\n    ->name('review')\n    ->metadata(['description' => 'Human review']);\n$pullRequest->place()->name('merged');\n$pullRequest->place()\n    ->name('closed')\n    ->metadata(['bg_color' => 'DeepSkyBlue',]);\n\n$pullRequest->transition()\n    ->name('submit')\n        ->from(['start'])\n        ->to(['test']);\n\n$pullRequest->transition()\n    ->name('update')\n        ->from(['coding', 'test', 'review'])\n        ->to(['test'])\n        ->metadata(['arrow_color' => 'Turquoise']);\n\n$pullRequest->transition()\n    ->name('wait_for_review')\n        ->from(['test'])\n        ->to(['review'])\n        ->metadata(['color' => 'Orange']);\n\n$pullRequest->transition()\n    ->name('request_change')\n        ->from(['review'])\n        ->to(['coding']);\n\n$pullRequest->transition()\n    ->name('accept')\n        ->from(['review'])\n        ->to(['merged'])\n        ->metadata(['label' => 'Accept PR']);\n\n$pullRequest->transition()\n    ->name('reject')\n        ->from(['review'])\n        ->to(['closed']);\n\n$pullRequest->transition()\n    ->name('accept')\n        ->from(['closed'])\n        ->to(['review']);\n```\n\n----------------------------------------\n\nTITLE: Working with UUIDs in Symfony\nDESCRIPTION: Shows various operations on UUID objects in Symfony, including null checking, type checking, datetime retrieval, validity checking, and comparison.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/uid.rst#2025-04-22_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Uid\\NilUuid;\nuse Symfony\\Component\\Uid\\Uuid;\n\n// checking if the UUID is null (note that the class is called\n// NilUuid instead of NullUuid to follow the UUID standard notation)\n$uuid = Uuid::v4();\n$uuid instanceof NilUuid; // false\n\n// checking the type of UUID\nuse Symfony\\Component\\Uid\\UuidV4;\n$uuid = Uuid::v4();\n$uuid instanceof UuidV4; // true\n\n// getting the UUID datetime (it's only available in certain UUID types)\n$uuid = Uuid::v1();\n$uuid->getDateTime(); // returns a \\DateTimeImmutable instance\n\n// checking if a given value is valid as UUID\n$isValid = Uuid::isValid($uuid); // true or false\n\n// comparing UUIDs and checking for equality\n$uuid1 = Uuid::v1();\n$uuid4 = Uuid::v4();\n$uuid1->equals($uuid4); // false\n\n// this method returns:\n//   * int(0) if $uuid1 and $uuid4 are equal\n//   * int > 0 if $uuid1 is greater than $uuid4\n//   * int < 0 if $uuid1 is less than $uuid4\n$uuid1->compare($uuid4); // e.g. int(4)\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Redis Provider Options (PHP)\nDESCRIPTION: This PHP configuration defines a cache pool `cache.my_redis` using a Redis adapter linked to a custom provider service `app.my_custom_redis_provider`. The provider service is registered using the container builder, setting `\\Redis` as the class, specifying `RedisAdapter::createConnection` as the factory, and providing the Redis DSN and connection options (retry_interval, timeout) as arguments.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/cache.rst#2025-04-22_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/cache.php\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nuse Symfony\\Component\\Cache\\Adapter\\RedisAdapter;\nuse Symfony\\Component\\DependencyInjection\\ContainerBuilder;\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (ContainerBuilder $container, FrameworkConfig $framework): void {\n    $framework->cache()\n        ->pool('cache.my_redis')\n            ->adapters(['cache.adapter.redis'])\n            ->provider('app.my_custom_redis_provider');\n\n    $container->register('app.my_custom_redis_provider', \\Redis::class)\n        ->setFactory([RedisAdapter::class, 'createConnection'])\n        ->addArgument('redis://localhost')\n        ->addArgument([\n            'retry_interval' => 2,\n            'timeout' => 10\n        ])\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Base HTML Layout Template with Twig in Symfony\nDESCRIPTION: This Twig template serves as the base layout for the application. It defines the basic HTML structure and includes blocks for title, stylesheets, javascripts, and body content that can be overridden by child templates.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/introduction/from_flat_php_to_symfony.rst#2025-04-22_snippet_12\n\nLANGUAGE: twig\nCODE:\n```\n<!-- templates/base.html.twig -->\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>{% block title %}Welcome!{% endblock %}</title>\n        {% block stylesheets %}{% endblock %}\n        {% block javascripts %}{% endblock %}\n    </head>\n    <body>\n        {% block body %}{% endblock %}\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Handling Exceptions in kernel.exception Event Listener\nDESCRIPTION: PHP code snippet showing how to handle exceptions and modify the response in a kernel.exception event listener.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/events.rst#2025-04-22_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Event\\ExceptionEvent;\n\npublic function onKernelException(ExceptionEvent $event): void\n{\n    $exception = $event->getThrowable();\n    $response = new Response();\n    // setup the Response object based on the caught exception\n    $event->setResponse($response);\n\n    // you can alternatively set a new Exception\n    // $exception = new \\Exception('Some special exception');\n    // $event->setThrowable($exception);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Clickable Links in Symfony Console Output (PHP)\nDESCRIPTION: Demonstrates how to create clickable hyperlinks in the console output using the special `<href>` tag. The URL is specified in the tag's attribute, and the enclosed text becomes the clickable link text, provided the terminal emulator supports this feature.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/console/coloring.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$output->writeln('<href=https://symfony.com>Symfony Homepage</>');\n```\n\n----------------------------------------\n\nTITLE: Instantiating Lazy Commands with LazyCommand - Symfony Console - PHP\nDESCRIPTION: This code demonstrates creating a LazyCommand, which defers the execution of the underlying command factory until the command is executed or introspected for its input definition. Requires App\\Command\\HeavyCommand and Symfony\\Component\\Console\\Application. The LazyCommand constructor takes the name, aliases, description, hidden flag, and a closure returning a Command instance. Adding such a command with $application->add() keeps resource usage minimal until the command is used. Inputs include command registration arguments; outputs include a properly lazily-instantiated command.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/console/lazy_commands.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Command\\HeavyCommand;\nuse Symfony\\Component\\Console\\Application;\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\CommandLoader\\FactoryCommandLoader;\n\n// In this case although the command is instantiated, the underlying command factory\n// will not be executed unless the command is actually executed or one tries to access\n// its input definition to know its argument or option inputs.\n$lazyCommand = new LazyCommand(\n    'app:heavy',\n    [],\n    'This is another more complete form of lazy command.',\n    false,\n    static fn (): Command => new HeavyCommand(),\n);\n\n$application = new Application();\n$application->add($lazyCommand);\n$application->run();\n```\n\n----------------------------------------\n\nTITLE: Accessing Configuration Parameters in Symfony Controller\nDESCRIPTION: Example showing how to access configuration parameters in a Symfony controller using the AbstractController base class.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration.rst#2025-04-22_snippet_38\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Controller;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass UserController extends AbstractController\n{\n    public function index(): Response\n    {\n        $projectDir = $this->getParameter('kernel.project_dir');\n        $adminEmail = $this->getParameter('app.admin_email');\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Option Normalization with Dependencies on Other Options\nDESCRIPTION: This code demonstrates how to normalize an option based on the value of another option. It sets different URL protocols (http:// or https://) based on the 'encryption' option value.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/options_resolver.rst#2025-04-22_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n// ...\nclass Mailer\n{\n    // ...\n    public function configureOptions(OptionsResolver $resolver): void\n    {\n        // ...\n        $resolver->setNormalizer('host', function (Options $options, string $value): string {\n            if (!str_starts_with($value, 'http://') && !str_starts_with($value, 'https://')) {\n                if ('ssl' === $options['encryption']) {\n                    $value = 'https://'.$value;\n                } else {\n                    $value = 'http://'.$value;\n                }\n            }\n\n            return $value;\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Schedule Provider Class in PHP\nDESCRIPTION: Demonstrates how to create a schedule provider that combines multiple recurring messages into a schedule using the AsSchedule attribute.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/scheduler.rst#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n// src/Scheduler/SaleTaskProvider.php\nnamespace App\\Scheduler;\n\n#[AsSchedule('uptoyou')]\nclass SaleTaskProvider implements ScheduleProviderInterface\n{\n    public function getSchedule(): Schedule\n    {\n        return $this->schedule ??= (new Schedule())\n            ->with(\n                RecurringMessage::trigger(\n                    new ExcludeHolidaysTrigger(\n                        CronExpressionTrigger::fromSpec('@daily'),\n                    ),\n                    new SendDailySalesReports()\n                ),\n                RecurringMessage::cron('3 8 * * 1', new CleanUpOldSalesReport())\n            );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Twig Runtime Extensions\nDESCRIPTION: Configuration examples for registering lazy-loaded Twig runtime extensions using the twig.runtime tag.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/dic_tags.rst#2025-04-22_snippet_39\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n    App\\Twig\\AppExtension:\n        tags: [twig.runtime]\n```\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"App\\Twig\\AppExtension\">\n            <tag name=\"twig.runtime\"/>\n        </service>\n    </services>\n</container>\n```\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Twig\\AppExtension;\n\n$container\n    ->register(AppExtension::class)\n    ->addTag('twig.runtime')\n;\n```\n\n----------------------------------------\n\nTITLE: Accessing Underlying Choice Entity Data in Symfony Twig Block\nDESCRIPTION: This HTML+Twig snippet shows how to access the underlying data object (like a Doctrine entity) associated with a choice within a custom Twig form theme block (`_form_categories_entry_widget`) for a Symfony `ChoiceType`. It retrieves the entity by using the choice's value (`form.vars.value`) to look up the corresponding `ChoiceView` in the parent form's `choices` variable (`form.parent.vars.choices[form.vars.value].data`). This allows rendering properties of the associated entity alongside the form input.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/choice.rst#2025-04-22_snippet_4\n\nLANGUAGE: html+twig\nCODE:\n```\n{% block _form_categories_entry_widget %}\n    {% set entity = form.parent.vars.choices[form.vars.value].data %}\n\n    <tr>\n        <td>{{ form_widget(form) }}</td>\n        <td>{{ form.vars.label }}</td>\n        <td>\n            {{ entity.name }} | {{ entity.group }}\n        </td>\n    </tr>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Semaphore in Symfony Framework\nDESCRIPTION: Configuration examples for setting up semaphore resources in Symfony framework using different formats (YAML, XML, PHP). Shows how to configure the semaphore DSN.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_66\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/semaphore.yaml\nframework:\n    semaphore: '%env(SEMAPHORE_DSN)%'\n```\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/semaphore.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <framework:config>\n        <framework:semaphore>\n            <framework:resource name=\"default\">%env(SEMAPHORE_DSN)%</framework:resource>\n        </framework:semaphore>\n    </framework:config>\n</container>\n```\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/semaphore.php\nuse function Symfony\\Component\\DependencyInjection\\Loader\\Configurator\\env;\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework): void {\n    $framework->semaphore()\n        ->resource('default', [env('SEMAPHORE_DSN')]);\n};\n```\n\n----------------------------------------\n\nTITLE: Modifying Rendered Tables\nDESCRIPTION: Shows how to dynamically modify tables after initial rendering using output sections\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/helpers/table.rst#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Console\\Helper\\Table;\n\nclass SomeCommand extends Command\n{\n    public function execute(InputInterface $input, OutputInterface $output): int\n    {\n        $section = $output->section();\n        $table = new Table($section);\n\n        $table->addRow(['Love']);\n        $table->render();\n\n        $table->appendRow(['Symfony']);\n\n        return Command::SUCCESS;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying LDAP Query Scope in PHP\nDESCRIPTION: Demonstrates how to specify the scope for an LDAP query using the `scope` option. This example uses `QueryInterface::SCOPE_ONE` (equivalent to `LDAP_SCOPE_ONELEVEL`), limiting the search to one level below the base DN.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/ldap.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Ldap\\Adapter\\QueryInterface;\n\n$query = $ldap->query('dc=symfony,dc=com', '...', ['scope' => QueryInterface::SCOPE_ONE]);\n```\n\n----------------------------------------\n\nTITLE: Recommended Approach for Version Compatibility with Feature Detection\nDESCRIPTION: The recommended approach to support both Symfony 2.x and 3.x by checking for the existence of specific methods or classes rather than relying on Kernel version.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/bundles.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\OptionsResolver\\OptionsResolver;\n\nif (!method_exists(OptionsResolver::class, 'setDefined')) {\n    // code for the old OptionsResolver API\n} else {\n    // code for the new OptionsResolver API\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Sass Support in Webpack Encore\nDESCRIPTION: Demonstrates how to enable Sass preprocessing in the Webpack Encore configuration. Requires installing the sass-loader and sass packages.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/simple-example.rst#2025-04-22_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n  // webpack.config.js\n  Encore\n      // ...\n\n+    .enableSassLoader()\n  ;\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML Sanitizer in PHP with attribute settings\nDESCRIPTION: Initial code snippet showing how to configure HtmlSanitizerConfig to allow specific attributes on elements. It demonstrates allowing 'src' on iframe elements and 'data-attr' on all allowed elements.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/html_sanitizer.rst#2025-04-22_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n(new HtmlSanitizerConfig())\n    // allow \"src' on <iframe> elements\n    ->allowAttribute('src', ['iframe'])\n\n    // allow \"data-attr\" on all elements currently allowed\n    ->allowAttribute('data-attr', '*')\n);\n```\n\n----------------------------------------\n\nTITLE: Error Handling with Default Marshaller\nDESCRIPTION: Implementation of DefaultMarshaller with exception handling for serialization failures.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/cache/adapters/redis_adapter.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$marshaller = new DefaultMarshaller(false, true);\n\n$cache = new RedisAdapter($redis, 'error_namespace', 3600, $marshaller);\n\ntry {\n    $item = $cache->getItem('error_key');\n    $item->set('data');\n    $cache->save($item);\n} catch (\\ValueError $e) {\n    echo 'Serialization failed: '.$e->getMessage();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PHP Error Logging in Symfony\nDESCRIPTION: This snippet demonstrates how to configure PHP error logging in Symfony's framework.yaml file. It maps different PHP error constants to specific log levels using the Psr\\Log\\LogLevel constants.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_60\n\nLANGUAGE: yaml\nCODE:\n```\nframework:\n    php_errors:\n        log:\n            !php/const \\E_DEPRECATED: !php/const Psr\\Log\\LogLevel::ERROR\n            !php/const \\E_USER_DEPRECATED: !php/const Psr\\Log\\LogLevel::ERROR\n            !php/const \\E_NOTICE: !php/const Psr\\Log\\LogLevel::ERROR\n            !php/const \\E_USER_NOTICE: !php/const Psr\\Log\\LogLevel::ERROR\n            !php/const \\E_STRICT: !php/const Psr\\Log\\LogLevel::ERROR\n            !php/const \\E_WARNING: !php/const Psr\\Log\\LogLevel::ERROR\n            !php/const \\E_USER_WARNING: !php/const Psr\\Log\\LogLevel::ERROR\n            !php/const \\E_COMPILE_WARNING: !php/const Psr\\Log\\LogLevel::ERROR\n            !php/const \\E_CORE_WARNING: !php/const Psr\\Log\\LogLevel::ERROR\n            !php/const \\E_USER_ERROR: !php/const Psr\\Log\\LogLevel::CRITICAL\n            !php/const \\E_RECOVERABLE_ERROR: !php/const Psr\\Log\\LogLevel::CRITICAL\n            !php/const \\E_COMPILE_ERROR: !php/const Psr\\Log\\LogLevel::CRITICAL\n            !php/const \\E_PARSE: !php/const Psr\\Log\\LogLevel::CRITICAL\n            !php/const \\E_ERROR: !php/const Psr\\Log\\LogLevel::CRITICAL\n            !php/const \\E_CORE_ERROR: !php/const Psr\\Log\\LogLevel::CRITICAL\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony Process Component using Composer\nDESCRIPTION: Installs the Symfony Process component as a project dependency using the Composer package manager. Requires Composer to be installed on the system.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/process.rst#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require symfony/process\n```\n\n----------------------------------------\n\nTITLE: Processing CSV Environment Variables in YAML\nDESCRIPTION: Example of using the csv processor to decode CSV-formatted environment variables in YAML configuration. This transforms a comma-separated list of languages into an array.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/env_var_processors.rst#2025-04-22_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/framework.yaml\nparameters:\n    env(ALLOWED_LANGUAGES): \"en,de,es\"\n    app_allowed_languages: '%env(csv:ALLOWED_LANGUAGES)%'\n```\n\n----------------------------------------\n\nTITLE: Excluding Files by Multiple Name Patterns with Symfony Finder in PHP\nDESCRIPTION: Demonstrates two ways to exclude files based on multiple name patterns: either by chaining multiple calls to the `notName()` method or by passing an array of patterns to a single `notName()` call.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/finder.rst#2025-04-22_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$finder->files()->notName('*.rb')->notName('*.py');\n```\n\nLANGUAGE: php\nCODE:\n```\n// same as above\n$finder->files()->notName(['*.rb', '*.py']);\n```\n\n----------------------------------------\n\nTITLE: Configuring Firewall with Custom Request Matcher - Symfony XML\nDESCRIPTION: Demonstrates configuring a firewall in XML to use a custom request matcher by referencing the service class in the \"request-matcher\" attribute. The specified service must implement RequestMatcherInterface. Configuration is to be added in \"config/packages/security.xml\".\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/firewall_restriction.rst#2025-04-22_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/security.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<srv:container xmlns=\"http://symfony.com/schema/dic/security\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:srv=\"http://symfony.com/schema/dic/services\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/security\n        https://symfony.com/schema/dic/security/security-1.0.xsd\">\n\n    <config>\n        <!-- ... -->\n        <firewall name=\"secured_area\" request-matcher=\"App\\Security\\CustomRequestMatcher\">\n            <!-- ... -->\n        </firewall>\n    </config>\n</srv:container>\n```\n\n----------------------------------------\n\nTITLE: Configuring copyFiles in Webpack Encore\nDESCRIPTION: Shows how to configure webpack.config.js to copy image files from assets directory to the public build directory. This enables referencing images from templates using the asset() function.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/copy-files.rst#2025-04-22_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n  // webpack.config.js\n\n  Encore\n      // ...\n      .setOutputPath('public/build/')\n\n+     .copyFiles({\n+         from: './assets/images',\n+\n+         // optional target path, relative to the output dir\n+         to: 'images/[path][name].[ext]',\n+\n+         // if versioning is enabled, add the file hash too\n+         //to: 'images/[path][name].[hash:8].[ext]',\n+\n+         // only copy files matching this pattern\n+         //pattern: /\\.(png|jpg|jpeg)$/\n+     })\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Question Input in Symfony Command\nDESCRIPTION: Example of asking for bundle name input with a default value\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/helpers/questionhelper.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Console\\Question\\Question;\n\npublic function execute(InputInterface $input, OutputInterface $output): int\n{\n    $question = new Question('Please enter the name of the bundle', 'AcmeDemoBundle');\n\n    $bundleName = $helper->ask($input, $output, $question);\n\n    return Command::SUCCESS;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling CSRF Protection in Symfony (PHP)\nDESCRIPTION: Enables CSRF protection for all forms using PHP configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/framework.php\nuse Symfony\\Config\\FrameworkConfig;\nreturn static function (FrameworkConfig $framework): void {\n    $framework->csrfProtection()\n        ->enabled(true)\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Using #[Target] Attribute for Dependency Injection in PHP\nDESCRIPTION: Demonstrates how to use the #[Target] attribute to specify which argument should be autowired when injecting a service with multiple implementations of an interface.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/autowiring.rst#2025-04-22_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\n// src/Service/MastodonClient.php\nnamespace App\\Service;\n\nuse App\\Util\\TransformerInterface;\nuse Symfony\\Component\\DependencyInjection\\Attribute\\Target;\n\nclass MastodonClient\n{\n    public function __construct(\n        #[Target('shoutyTransformer')]\n        private TransformerInterface $transformer,\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Entity Managers in Controllers\nDESCRIPTION: Example of how to use different entity managers in a Symfony controller to manage different sets of entities.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine/multiple_entity_managers.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Controller;\n\nuse Doctrine\\ORM\\EntityManagerInterface;\nuse Doctrine\\Persistence\\ManagerRegistry;\n\nclass UserController extends AbstractController\n{\n    public function index(ManagerRegistry $doctrine): Response\n    {\n        // Both methods return the default entity manager\n        $entityManager = $doctrine->getManager();\n        $entityManager = $doctrine->getManager('default');\n\n        // This method returns instead the \"customer\" entity manager\n        $customerEntityManager = $doctrine->getManager('customer');\n\n        // ...\n    }\n```\n\n----------------------------------------\n\nTITLE: Using Enum Nodes to Restrict Values in Symfony Configuration (PHP)\nDESCRIPTION: Demonstrates how to use enumNode to restrict configuration fields to a known set of allowed values by specifying a values() list. Inputs are string values in configuration; outputs are validated to ensure only accepted enum values are set. Depends on Symfony's Config component and applies to configuration fields where only a finite set of options are valid.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/config/definition.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$rootNode\n    ->children()\n        ->enumNode('delivery')\n            ->values(['standard', 'expedited', 'priority'])\n        ->end()\n    ->end()\n;\n```\n\n----------------------------------------\n\nTITLE: Using Custom Validator in PHP Entity Configuration\nDESCRIPTION: This code shows how to apply the custom validator to an entity property using PHP configuration in the entity class.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/validation/custom_constraint.rst#2025-04-22_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n// src/Entity/User.php\nnamespace App\\Entity;\n\nuse App\\Validator\\ContainsAlphanumeric;\nuse Symfony\\Component\\Validator\\Constraints\\NotBlank;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass User\n{\n    protected string $name = '';\n\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('name', new NotBlank());\n        $metadata->addPropertyConstraint('name', new ContainsAlphanumeric(mode: 'loose'));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Remember Me with Symfony Security (XML)\nDESCRIPTION: This XML snippet configures the Symfony Security component to support Remember Me in the firewall definition. Attributes like 'secret' and 'lifetime' are set for the remember-me node; 'always-remember-me' can be enabled to bypass the opt-in checkbox mechanism. This must be placed into config/packages/security.xml using correct schema definitions. Requires that Symfony is set up to accept XML configuration and that the required parameters (e.g., %kernel.secret%) are valid.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/remember_me.rst#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/security.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<srv:container xmlns=\"http://symfony.com/schema/dic/security\"\n    xmlns:srv=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/security\n        https://symfony.com/schema/dic/security/security-1.0.xsd\">\n\n    <config>\n        <!-- ... -->\n\n        <firewall name=\"main\">\n            <!-- ... -->\n\n            <!-- secret: default to \"%kernel.secret%\"\n                 lifetime: 604800 is 1 week in seconds -->\n            <remember-me\n                secret=\"%kernel.secret%\"\n                lifetime=\"604800\"\n            />\n            <!-- by default, the feature is enabled by checking a checkbox\n                 in the login form (see below), add always-remember-me=\"true\"\n                 to always enable it. -->\n        </firewall>\n    </config>\n</srv:container>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/security.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<srv:container xmlns=\"http://symfony.com/schema/dic/security\"\n    xmlns:srv=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/security\n        https://symfony.com/schema/dic/security/security-1.0.xsd\">\n\n    <config>\n        <!-- ... -->\n\n        <firewall name=\"main\">\n            <!-- ... -->\n\n            <remember-me\n                always-remember-me=\"true\"\n            />\n        </firewall>\n    </config>\n</srv:container>\n```\n\n----------------------------------------\n\nTITLE: Injecting Decorated Service with PHP Attributes\nDESCRIPTION: Example showing how to inject the decorated service using PHP attributes. The AutowireDecorated attribute is used to inject the inner service when multiple constructor parameters are present.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/service_decoration.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// src/DecoratingMailer.php\nnamespace App;\n\n// ...\nuse Symfony\\Component\\DependencyInjection\\Attribute\\AsDecorator;\nuse Symfony\\Component\\DependencyInjection\\Attribute\\AutowireDecorated;\n\n#[AsDecorator(decorates: Mailer::class)]\nclass DecoratingMailer\n{\n    public function __construct(\n        #[AutowireDecorated]\n        private object $inner,\n    ) {\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Form with Multiple Submit Buttons in Symfony\nDESCRIPTION: Shows how to add multiple submit buttons to a Symfony form using FormBuilder. Creates a form with 'nextStep' and 'previousStep' buttons for form navigation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/button_based_validation.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$form = $this->createFormBuilder($task)\n    // ...\n    ->add('nextStep', SubmitType::class)\n    ->add('previousStep', SubmitType::class)\n    ->getForm();\n```\n\n----------------------------------------\n\nTITLE: Handling ConsoleEvents::SIGNAL Event\nDESCRIPTION: Shows how to handle system signals (like CTRL+C) in console commands using the SIGNAL event.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/events.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Console\\ConsoleEvents;\nuse Symfony\\Component\\Console\\Event\\ConsoleSignalEvent;\n\n$dispatcher->addListener(ConsoleEvents::SIGNAL, function (ConsoleSignalEvent $event): void {\n\n    // gets the signal number\n    $signal = $event->getHandlingSignal();\n\n    // sets the exit code\n    $event->setExitCode(0);\n\n    if (\\SIGINT === $signal) {\n        echo \"bye bye!\";\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Form Widgets with Parent Function\nDESCRIPTION: Demonstrates how to make minor changes to a form field widget by using the Twig parent() function to reuse the original content while adding custom HTML.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/form_themes.rst#2025-04-22_snippet_19\n\nLANGUAGE: html+twig\nCODE:\n```\n{# templates/form/my_theme.html.twig #}\n{% use 'form_div_layout.html.twig' %}\n\n{% block integer_widget %}\n    <div class=\"some-custom-class\">\n        {{ parent() }}\n    </div>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Creating a Legacy Controller in Symfony\nDESCRIPTION: Demonstrates how to create a controller in Symfony that handles legacy routes. It sets up server variables and includes the legacy script, allowing it to run within the Symfony application scope.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/migration.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/LegacyController.php\nnamespace App\\Controller;\n\nuse Symfony\\Component\\HttpFoundation\\StreamedResponse;\n\nclass LegacyController\n{\n    public function loadLegacyScript(string $requestPath, string $legacyScript): StreamedResponse\n    {\n        return new StreamedResponse(\n            function () use ($requestPath, $legacyScript): void {\n                $_SERVER['PHP_SELF'] = $requestPath;\n                $_SERVER['SCRIPT_NAME'] = $requestPath;\n                $_SERVER['SCRIPT_FILENAME'] = $legacyScript;\n\n                chdir(dirname($legacyScript));\n\n                require $legacyScript;\n            }\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx for SSL Termination Behind a Proxy\nDESCRIPTION: This Nginx configuration overrides server parameters to simulate HTTPS for Symfony applications running behind SSL-terminating proxies. It sets SERVER_PORT to '443' and HTTPS to 'on' so Symfony generates correct HTTPS URLs even when the proxy doesn't set proper X-Forwarded headers.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/deployment/proxies.rst#2025-04-22_snippet_7\n\nLANGUAGE: nginx\nCODE:\n```\nlocation ~ ^/index\\.php$ {\n    fastcgi_pass 127.0.0.1:9000;\n    include fastcgi.conf;\n    # Lie to Symfony about the protocol and port so that it generates the correct HTTPS URLs\n    fastcgi_param SERVER_PORT \"443\";\n    fastcgi_param HTTPS \"on\";\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling HTML5 Client-Side Validation in Twig Forms\nDESCRIPTION: This Twig template shows how to disable HTML5 client-side validation by adding the 'novalidate' attribute to the form. This is useful for testing server-side validation constraints without browser interference.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/forms.rst#2025-04-22_snippet_19\n\nLANGUAGE: twig\nCODE:\n```\n{# templates/task/new.html.twig #}\n{{ form_start(form, {'attr': {'novalidate': 'novalidate'}}) }}\n    {{ form_widget(form) }}\n{{ form_end(form) }}\n```\n\n----------------------------------------\n\nTITLE: Defining PasswordStrength Constraint using PHP\nDESCRIPTION: Demonstrates how to apply the PasswordStrength constraint to a property using PHP in a User entity class with loadValidatorMetadata method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/PasswordStrength.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/User.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass User\n{\n    public static function loadValidatorMetadata(ClassMetadata $metadata)\n    {\n        $metadata->addPropertyConstraint('rawPassword', new Assert\\PasswordStrength());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Transport Factory for Custom Messenger Transport in PHP\nDESCRIPTION: Creates a TransportFactoryInterface implementation that supports a custom DSN format and instantiates custom transport objects. The factory validates if it can handle a DSN by checking if it starts with 'my-transport://'.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/messenger/custom-transport.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Messenger\\Transport\\Receiver\\ReceiverInterface;\nuse Symfony\\Component\\Messenger\\Transport\\Sender\\SenderInterface;\nuse Symfony\\Component\\Messenger\\Transport\\Serialization\\SerializerInterface;\nuse Symfony\\Component\\Messenger\\Transport\\TransportFactoryInterface;\nuse Symfony\\Component\\Messenger\\Transport\\TransportInterface;\n\nclass YourTransportFactory implements TransportFactoryInterface\n{\n    public function createTransport(string $dsn, array $options, SerializerInterface $serializer): TransportInterface\n    {\n        return new YourTransport(/* ... */);\n    }\n\n    public function supports(string $dsn, array $options): bool\n    {\n        return 0 === strpos($dsn, 'my-transport://');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Container Parameters from Processed Configuration in PHP\nDESCRIPTION: Demonstrates how to use the processed configuration values (obtained using the Config component) within the extension's `load()` method to set parameters in the service container using `$container->setParameter()`. This makes the configuration values accessible elsewhere via parameter injection.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/dependency_injection/compilation.rst#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\npublic function load(array $configs, ContainerBuilder $container): void\n{\n    $configuration = new Configuration();\n    $processor = new Processor();\n    $config = $processor->processConfiguration($configuration, $configs);\n\n    $container->setParameter('acme_demo.FOO', $config['foo']);\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Constructor Injection in Service Container (PHP)\nDESCRIPTION: PHP configuration for injecting a mailer service into the NewsletterManager using constructor injection.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/injection_types.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nuse App\\Mail\\NewsletterManager;\n\nreturn function(ContainerConfigurator $container): void {\n    $services = $container->services();\n\n    $services->set(NewsletterManager::class)\n        ->args(service('mailer'));\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Global CSRF Protection in Symfony Framework Configuration\nDESCRIPTION: Provides configuration examples in YAML, XML, and PHP to enable CSRF protection globally within the Symfony framework configuration. Setting `csrf_protection: ~` (YAML) or `enabled=\"true\"` (XML/PHP) in `config/packages/framework.yaml`, `.xml`, or `.php` activates the feature application-wide. This typically requires a session to be active.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/csrf.rst#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/framework.yaml\nframework:\n    # ...\n    csrf_protection: ~\n```\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/framework.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony\n        https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <framework:config>\n        <framework:csrf-protection enabled=\"true\"/>\n    </framework:config>\n</container>\n```\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/framework.php\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework): void {\n    $framework->csrfProtection()\n        ->enabled(true)\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Mailer Envelope with Allowed Recipients in YAML\nDESCRIPTION: YAML configuration for the mailer envelope that redirects all emails to a specific address except for those matching the allowed_recipients patterns, including regular expressions.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_72\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/mailer.yaml\nwhen@dev:\n    framework:\n        mailer:\n            envelope:\n                recipients: ['youremail@example.com']\n                allowed_recipients:\n                    - 'internal@example.com'\n                    # you can also use regular expression to define allowed recipients\n                    - 'internal-.*@example.(com|fr)'\n```\n\n----------------------------------------\n\nTITLE: Configuring DateType Field for Custom JavaScript Date Picker in PHP\nDESCRIPTION: Example of configuring a DateType field for use with a custom JavaScript date picker library. This disables the HTML5 date input and adds a custom CSS class for JavaScript targeting.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/date.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\DateType;\n// ...\n\n$builder->add('publishedAt', DateType::class, [\n    'widget' => 'single_text',\n\n    // prevents rendering it as type=\"date\", to avoid HTML5 date pickers\n    'html5' => false,\n\n    // adds a class that can be selected in JavaScript\n    'attr' => ['class' => 'js-datepicker'],\n]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Asset Mapper support in Symfony bundle class\nDESCRIPTION: PHP code to make a UX bundle work with Symfony's Asset Mapper. This implementation prepends configuration to map asset paths and includes a helper method to check if Asset Mapper is available in the current Symfony environment.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/create_ux_bundle.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nnamespace Acme\\FeatureBundle;\n\nuse Symfony\\Component\\AssetMapper\\AssetMapperInterface;\nuse Symfony\\Component\\DependencyInjection\\ContainerBuilder;\nuse Symfony\\Component\\DependencyInjection\\Loader\\Configurator\\ContainerConfigurator;\nuse Symfony\\Component\\HttpKernel\\Bundle\\AbstractBundle;\n\nclass AcmeFeatureBundle extends AbstractBundle\n{\n    public function prependExtension(ContainerConfigurator $configurator, ContainerBuilder $container): void\n    {\n        if (!$this->isAssetMapperAvailable($container)) {\n            return;\n        }\n\n        $container->prependExtensionConfig('framework', [\n            'asset_mapper' => [\n                'paths' => [\n                    __DIR__ . '/../assets/dist' => '@acme/feature-bundle',\n                ],\n            ],\n        ]);\n    }\n\n    private function isAssetMapperAvailable(ContainerBuilder $container): bool\n    {\n        if (!interface_exists(AssetMapperInterface::class)) {\n            return false;\n        }\n\n        // check that FrameworkBundle 6.3 or higher is installed\n        $bundlesMetadata = $container->getParameter('kernel.bundles_metadata');\n        if (!isset($bundlesMetadata['FrameworkBundle'])) {\n            return false;\n        }\n\n        return is_file($bundlesMetadata['FrameworkBundle']['path'] . '/Resources/config/asset_mapper.php');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Serialization Context for Attribute Selection in PHP\nDESCRIPTION: Shows how to use the 'attributes' context option to select specific properties for serialization at runtime. This provides fine-grained control over the serialized output.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer.rst#2025-04-22_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Serializer\\Normalizer\\AbstractNormalizer;\n// ...\n\n$json = $serializer->serialize($person, 'json', [\n    AbstractNormalizer::ATTRIBUTES => ['name', 'company' => ['name']]\n]);\n// $json contains {\"name\":\"Dunglas\",\"company\":{\"name\":\"Les-Tilleuls.coop\"}}\n```\n\n----------------------------------------\n\nTITLE: Implementing AtLeastOneOf Constraint with PHP Metadata\nDESCRIPTION: Shows how to configure AtLeastOneOf validation using PHP metadata loading approach for the Student entity properties.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/AtLeastOneOf.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Student.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Student\n{\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('password', new Assert\\AtLeastOneOf(\n            constraints: [\n                new Assert\\Regex(pattern: '/#/'),\n                new Assert\\Length(min: 10),\n            ],\n        ));\n\n        $metadata->addPropertyConstraint('grades', new Assert\\AtLeastOneOf(\n            constraints: [\n                new Assert\\Count(min: 3),\n                new Assert\\All(\n                    constraints: [\n                        new Assert\\GreaterThanOrEqual(5),\n                    ],\n                ),\n            ],\n        ));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Skipping null Values in PHP Serialization\nDESCRIPTION: Demonstrates how to configure the serializer to skip null values during serialization using context options.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer.rst#2025-04-22_snippet_54\n\nLANGUAGE: php\nCODE:\n```\nclass Person\n{\n    public string $name = 'Jane Doe';\n    public ?string $gender = null;\n}\n\n$jsonContent = $serializer->serialize(new Person(), 'json', [\n    AbstractObjectNormalizer::SKIP_NULL_VALUES => true,\n]);\n// $jsonContent contains {\"name\":\"Jane Doe\"}\n```\n\n----------------------------------------\n\nTITLE: Initializing PropertyInfoExtractor with Extractors (Symfony, PHP)\nDESCRIPTION: Shows how to instantiate the PropertyInfoExtractor in PHP by providing arrays of extractor objects for different metadata categories (list, type, description, access, initialization). This setup enables querying class properties for metadata such as names and types. Requires the symfony/property-info package and optionally other extractors (e.g., PhpDocExtractor, ReflectionExtractor).\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/property_info.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Example\\Namespace\\YourAwesomeCoolClass;\nuse Symfony\\Component\\PropertyInfo\\Extractor\\PhpDocExtractor;\nuse Symfony\\Component\\PropertyInfo\\Extractor\\ReflectionExtractor;\nuse Symfony\\Component\\PropertyInfo\\PropertyInfoExtractor;\n\n// a full list of extractors is shown further below\n$phpDocExtractor = new PhpDocExtractor();\n$reflectionExtractor = new ReflectionExtractor();\n\n// list of PropertyListExtractorInterface (any iterable)\n$listExtractors = [$reflectionExtractor];\n\n// list of PropertyTypeExtractorInterface (any iterable)\n$typeExtractors = [$phpDocExtractor, $reflectionExtractor];\n\n// list of PropertyDescriptionExtractorInterface (any iterable)\n$descriptionExtractors = [$phpDocExtractor];\n\n// list of PropertyAccessExtractorInterface (any iterable)\n$accessExtractors = [$reflectionExtractor];\n\n// list of PropertyInitializableExtractorInterface (any iterable)\n$propertyInitializableExtractors = [$reflectionExtractor];\n\n$propertyInfo = new PropertyInfoExtractor(\n    $listExtractors,\n    $typeExtractors,\n    $descriptionExtractors,\n    $accessExtractors,\n    $propertyInitializableExtractors\n);\n\n// see below for more examples\n$class = YourAwesomeCoolClass::class;\n$properties = $propertyInfo->getProperties($class);\n```\n\n----------------------------------------\n\nTITLE: Filtering Data with GenericEvent\nDESCRIPTION: Demonstrates how to use GenericEvent for data filtering operations, showing how to modify event data within a listener.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/event_dispatcher/generic_event.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\EventDispatcher\\GenericEvent;\n\n$event = new GenericEvent($subject, ['data' => 'Foo']);\n$dispatcher->dispatch($event, 'foo');\n\nclass FooListener\n{\n    public function filter(GenericEvent $event): void\n    {\n        $event['data'] = strtolower($event['data']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Length Constraint with XML\nDESCRIPTION: Illustrates how to set up the Length constraint using XML in a Symfony validation configuration file. It defines minimum and maximum length requirements with custom error messages.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Length.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\Participant\">\n        <property name=\"firstName\">\n            <constraint name=\"Length\">\n                <option name=\"min\">2</option>\n                <option name=\"max\">50</option>\n                <option name=\"minMessage\">\n                    Your first name must be at least {{ limit }} characters long\n                </option>\n                <option name=\"maxMessage\">\n                    Your first name cannot be longer than {{ limit }} characters\n                </option>\n            </constraint>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Getting Timezone Offsets with Symfony Intl\nDESCRIPTION: Example showing how to retrieve timezone offsets using both getRawOffset (returns seconds) and getGmtOffset (returns formatted string) methods for different timezones.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/intl.rst#2025-04-22_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n$offset = Timezones::getRawOffset('Etc/UTC');              // $offset = 0\n$offset = Timezones::getRawOffset('America/Buenos_Aires'); // $offset = -10800\n$offset = Timezones::getRawOffset('Asia/Katmandu');        // $offset = 20700\n\n$offset = Timezones::getGmtOffset('Etc/UTC');              // $offset = 'GMT+00:00'\n$offset = Timezones::getGmtOffset('America/Buenos_Aires'); // $offset = 'GMT-03:00'\n$offset = Timezones::getGmtOffset('Asia/Katmandu');        // $offset = 'GMT+05:45'\n```\n\n----------------------------------------\n\nTITLE: Configuring CIDR Validation Programmatically in PHP\nDESCRIPTION: Example of using PHP code to programmatically apply CIDR validation to a property. This shows how to implement the loadValidatorMetadata method in a Symfony entity to define constraints.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Cidr.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/NetworkSettings.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass NetworkSettings\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('cidrNotation', new Assert\\Cidr());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using CamelCase to snake_case Name Converter Standalone\nDESCRIPTION: Standalone PHP code for using the CamelCase to snake_case name converter with the Symfony Serializer.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer.rst#2025-04-22_snippet_34\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Serializer\\NameConverter\\CamelCaseToSnakeCaseNameConverter;\nuse Symfony\\Component\\Serializer\\Normalizer\\ObjectNormalizer;\n\n// ...\n$normalizers = [\n    new ObjectNormalizer(null, new CamelCaseToSnakeCaseNameConverter()),\n];\n$serializer = new Serializer($normalizers, $encoders);\n```\n\n----------------------------------------\n\nTITLE: Resolving Environment Variables with Parameters in PHP\nDESCRIPTION: Example of using the resolve processor to replace container parameters within environment variables in PHP configuration. This sets up a Sentry DSN that includes a dynamically defined host parameter.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/env_var_processors.rst#2025-04-22_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/sentry.php\n$container->setParameter('sentry_host', '10.0.0.1');\n$container->setParameter('env(SENTRY_DSN)', 'http://%sentry_host%/project');\n$container->loadFromExtension('sentry', [\n    'dsn' => '%env(resolve:SENTRY_DSN)%',\n]);\n```\n\n----------------------------------------\n\nTITLE: Defining FileUploader Service in XML\nDESCRIPTION: This XML configuration defines a service for the FileUploader class, specifying the target directory as an argument.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/controller/upload_file.rst#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\">\n    <!-- ... -->\n\n    <service id=\"App\\Service\\FileUploader\">\n        <argument>%brochures_directory%</argument>\n    </service>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Converting PSR-6 to PSR-16 Cache Using Psr16Cache\nDESCRIPTION: Shows how to adapt a PSR-6 cache object to be used as a PSR-16 cache using Symfony's Psr16Cache class and FilesystemAdapter.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/cache/psr6_psr16_adapters.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Cache\\Adapter\\FilesystemAdapter;\nuse Symfony\\Component\\Cache\\Psr16Cache;\n\n// the PSR-6 cache object that you want to use\n$psr6Cache = new FilesystemAdapter();\n\n// a PSR-16 cache that uses your cache internally!\n$psr16Cache = new Psr16Cache($psr6Cache);\n\n// now use this wherever you want\n$githubApiClient = new GitHubApiClient($psr16Cache);\n```\n\n----------------------------------------\n\nTITLE: Excluding by Multiple Path Patterns with Symfony Finder in PHP\nDESCRIPTION: Demonstrates two ways to specify multiple path patterns for exclusion: either by chaining multiple calls to the `notPath()` method or by passing an array of patterns to a single `notPath()` call.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/finder.rst#2025-04-22_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n$finder->notPath('first/dir')->notPath('other/dir');\n```\n\nLANGUAGE: php\nCODE:\n```\n// same as above\n$finder->notPath(['first/dir', 'other/dir']);\n```\n\n----------------------------------------\n\nTITLE: Registering Service Using Non-Static Factory - XML Configuration\nDESCRIPTION: Demonstrates registering both a factory and product service in XML, where NewsletterManagerFactory is first registered, and then NewsletterManager is created using the factory service's method. The 'factory' element references the service id and method name. Configuration goes in 'config/services.xml' and assumes the factory class exists and is autoloaded.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/factories.rst#2025-04-22_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <!-- first, create a service for the factory -->\n        <service id=\"App\\Email\\NewsletterManagerFactory\"/>\n\n        <!-- second, use the factory service as the first argument of the 'factory'\n             option and the factory method as the second argument -->\n        <service id=\"App\\Email\\NewsletterManager\">\n            <factory service=\"App\\Email\\NewsletterManagerFactory\"\n                method=\"createNewsletterManager\"\n            />\n        </service>\n    </services>\n</container>\n\n```\n\n----------------------------------------\n\nTITLE: Defining Default and Required Values in Symfony Config\nDESCRIPTION: PHP code example showing configuration with default, required, and cannot be empty validations for connection settings.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/config/definition.rst#2025-04-22_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$rootNode\n    ->children()\n        ->arrayNode('connection')\n            ->children()\n                ->scalarNode('driver')\n                    ->isRequired()\n                    ->cannotBeEmpty()\n                ->end()\n                ->scalarNode('host')\n                    ->defaultValue('localhost')\n                ->end()\n                ->scalarNode('username')->end()\n                ->scalarNode('password')->end()\n                ->booleanNode('memory')\n                    ->defaultFalse()\n                ->end()\n            ->end()\n        ->end()\n        ->arrayNode('settings')\n            ->addDefaultsIfNotSet()\n            ->children()\n                ->scalarNode('name')\n                    ->isRequired()\n                    ->cannotBeEmpty()\n                    ->defaultValue('value')\n                ->end()\n            ->end()\n        ->end()\n    ->end()\n;\n```\n\n----------------------------------------\n\nTITLE: Appending Content to a File (PHP)\nDESCRIPTION: Uses the `Filesystem::appendToFile` method to add content to the end of an existing file. If the file doesn't exist, it will be created.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/filesystem.rst#2025-04-22_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$filesystem->appendToFile('logs.txt', 'Email sent to user@example.com');\n```\n\n----------------------------------------\n\nTITLE: Selecting and Acting on Links with Symfony DomCrawler in PHP\nDESCRIPTION: Explains how to use filter, selectLink, and link methods to select links by ID, class, or text content, and obtain a Link object. The Link object provides methods like getUri to retrieve fully resolved URLs. These examples are crucial for simulating navigation or link extraction during web crawling.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/dom_crawler.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// first, select the link by id, class or content...\n$linkCrawler = $crawler->filter('#sign-up');\n$linkCrawler = $crawler->filter('.user-profile');\n$linkCrawler = $crawler->selectLink('Log in');\n\n// ...then, get the Link object:\n$link = $linkCrawler->link();\n\n// or do all this at once:\n$link = $crawler->filter('#sign-up')->link();\n$link = $crawler->filter('.user-profile')->link();\n$link = $crawler->selectLink('Log in')->link();\n```\n\nLANGUAGE: php\nCODE:\n```\n// returns the proper URI that can be used to make another request\n$uri = $link->getUri();\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony Intl Component via Composer\nDESCRIPTION: This command installs the Symfony Intl component using Composer, making its features available in the project. It requires Composer to be installed and accessible in the terminal environment.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/intl.rst#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require symfony/intl\n```\n\n----------------------------------------\n\nTITLE: File Naming Strategies in Symfony\nDESCRIPTION: Demonstrates different methods for naming uploaded files, including using the original filename, handling directory uploads, and generating random names with extensions.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/file.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// use the original file name\n$file->move($directory, $file->getClientOriginalName());\n\n// when \"webkitdirectory\" upload was used\n// otherwise the value will be the same as getClientOriginalName\n// $file->move($directory, $file->getClientOriginalPath());\n\n// compute a random name and try to guess the extension (more secure)\n$extension = $file->guessExtension();\nif (!$extension) {\n    // extension cannot be guessed\n    $extension = 'bin';\n}\n$file->move($directory, rand(1, 99999).'.'.$extension);\n```\n\n----------------------------------------\n\nTITLE: Filtering Translation Debug by Status in Symfony\nDESCRIPTION: Shows how to filter debug results to show only unused or only missing translations using the --only-unused and --only-missing options.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/translation.rst#2025-04-22_snippet_49\n\nLANGUAGE: terminal\nCODE:\n```\n$ php bin/console debug:translation en --only-unused\n$ php bin/console debug:translation en --only-missing\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Field Type with Data Transformer\nDESCRIPTION: A custom form field type that automatically applies the IssueToNumberTransformer. This makes reuse of the transformer easier and provides default configuration options.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/data_transformers.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// src/Form/IssueSelectorType.php\nnamespace App\\Form;\n\nuse App\\Form\\DataTransformer\\IssueToNumberTransformer;\nuse Symfony\\Component\\Form\\AbstractType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\TextType;\nuse Symfony\\Component\\Form\\FormBuilderInterface;\nuse Symfony\\Component\\OptionsResolver\\OptionsResolver;\n\nclass IssueSelectorType extends AbstractType\n{\n    public function __construct(\n        private IssueToNumberTransformer $transformer,\n    ) {\n    }\n\n    public function buildForm(FormBuilderInterface $builder, array $options): void\n    {\n        $builder->addModelTransformer($this->transformer);\n    }\n\n    public function configureOptions(OptionsResolver $resolver): void\n    {\n        $resolver->setDefaults([\n            'invalid_message' => 'The selected issue does not exist',\n        ]);\n    }\n\n    public function getParent(): string\n    {\n        return TextType::class;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Previous Default Values in Subclasses with OptionsResolver\nDESCRIPTION: This code demonstrates how to extend a parent class and access the previously set default values. The GoogleMailer subclass modifies the 'host' default while preserving the original default for non-SSL connections.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/options_resolver.rst#2025-04-22_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n// ...\nclass Mailer\n{\n    // ...\n    public function configureOptions(OptionsResolver $resolver): void\n    {\n        // ...\n        $resolver->setDefaults([\n            'encryption' => null,\n            'host' => 'example.org',\n        ]);\n    }\n}\n\nclass GoogleMailer extends Mailer\n{\n    public function configureOptions(OptionsResolver $resolver): void\n    {\n        parent::configureOptions($resolver);\n\n        $resolver->setDefault('host', function (Options $options, string $previousValue): string {\n            if ('ssl' === $options['encryption']) {\n                return 'secure.example.org';\n            }\n\n            // Take default value configured in the base class\n            return $previousValue;\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Service Using Non-Static Factory - PHP Configuration\nDESCRIPTION: Uses PHP configuration to register a NewsletterManagerFactory as a service and then create the NewsletterManager by referencing a method of that factory service. This leverages the 'factory' method to inject an instance created by another service, rather than using a static method. Intended for advanced PHP service configuration in 'config/services.php'.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/factories.rst#2025-04-22_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nuse App\\Email\\NewsletterManager;\nuse App\\Email\\NewsletterManagerFactory;\n\nreturn function(ContainerConfigurator $container): void {\n    $services = $container->services();\n\n    // first, create a service for the factory\n    $services->set(NewsletterManagerFactory::class);\n\n    // second, use the factory service as the first argument of the 'factory'\n    // method and the factory method as the second argument\n    $services->set(NewsletterManager::class)\n        ->factory([service(NewsletterManagerFactory::class), 'createNewsletterManager']);\n};\n\n```\n\n----------------------------------------\n\nTITLE: API Platform Entity Configuration\nDESCRIPTION: Example of configuring an entity for API Platform with Doctrine ORM mapping and API Resource annotation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/quick_tour/flex_recipes.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Entity;\n\nuse ApiPlatform\\Core\\Annotation\\ApiResource;\nuse Doctrine\\ORM\\Mapping as ORM;\n\n#[ORM\\Entity]\n#[ApiResource]\nclass Product\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue(strategy: 'AUTO')]\n    #[ORM\\Column(type: 'integer')]\n    private int $id;\n\n    #[ORM\\Column(type: 'string')]\n    private string $name;\n\n    #[ORM\\Column(type: 'integer')]\n    private int $price;\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Symfony Framework (XML)\nDESCRIPTION: This XML configuration file sets up basic Symfony framework settings, including the secret key and profiler configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/micro_kernel_trait.rst#2025-04-22_snippet_12\n\nLANGUAGE: XML\nCODE:\n```\n<!-- config/framework.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <framework:config secret=\"S0ME_SECRET\">\n        <framework:profiler only-exceptions=\"false\"/>\n    </framework:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Defining Sequentially Validation with PHP Attributes\nDESCRIPTION: Example of using the Sequentially constraint with PHP attributes to validate a Place object's address property step-by-step, ensuring it's a non-null string of minimum length, matching a regex pattern, and is geolocalizable.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Sequentially.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Localization/Place.php\nnamespace App\\Localization;\n\nuse App\\Validator\\Constraints as AcmeAssert;\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Place\n{\n    #[Assert\\Sequentially([\n        new Assert\\NotNull,\n        new Assert\\Type('string'),\n        new Assert\\Length(min: 10),\n        new Assert\\Regex(Place::ADDRESS_REGEX),\n        new AcmeAssert\\Geolocalizable,\n    ])]\n    public string $address;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Exception Event Methods in a Symfony Event Subscriber\nDESCRIPTION: A snippet showing the implementation of methods within an event subscriber that handle exception events in Symfony. The methods shown are called at different stages of exception processing.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/event_dispatcher.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\npublic function processException(ExceptionEvent $event): void\n{\n    // ...\n}\n\npublic function logException(ExceptionEvent $event): void\n{\n    // ...\n}\n\npublic function notifyException(ExceptionEvent $event): void\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using GreaterThan Constraint with Dates in PHP Attributes\nDESCRIPTION: Shows how to use the GreaterThan constraint to compare DateTime objects against date strings in PHP attributes.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/GreaterThan.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Order.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Order\n{\n    #[Assert\\GreaterThan('today')]\n    protected \\DateTimeInterface $deliveryDate;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Monolog with ElasticsearchLogstashHandler in PHP\nDESCRIPTION: Example of configuring Monolog to use the ElasticsearchLogstashHandler in a production environment using PHP. Shows both basic configuration and recommended setup with FingersCrossedHandler for buffering.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/logging/handlers.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/prod/monolog.php\nuse Symfony\\Bridge\\Monolog\\Handler\\ElasticsearchLogstashHandler;\nuse Symfony\\Config\\MonologConfig;\n\nreturn static function (MonologConfig $monolog): void {\n    $monolog->handler('es')\n        ->type('service')\n        ->id(ElasticsearchLogstashHandler::class)\n    ;\n};\n```\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/prod/monolog.php\nuse Symfony\\Bridge\\Monolog\\Handler\\ElasticsearchLogstashHandler;\nuse Symfony\\Config\\MonologConfig;\n\nreturn static function (MonologConfig $monolog): void {\n    $monolog->handler('main')\n        ->type('fingers_crossed')\n        ->handler('es')\n    ;\n    $monolog->handler('es')\n        ->type('service')\n        ->id(ElasticsearchLogstashHandler::class)\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Compound Password Validator in PHP with Symfony\nDESCRIPTION: Defines a custom PasswordRequirements class that extends Symfony's Compound constraint to validate passwords. It combines multiple constraints including NotBlank, Length, NotCompromisedPassword, Type, and Regex for uppercase letters.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/validation/custom_constraint.rst#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n// src/Validator/PasswordRequirements.php\nnamespace App\\Validator;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\n#[\\Attribute]\nclass PasswordRequirements extends Assert\\Compound\n{\n    protected function getConstraints(array $options): array\n    {\n        return [\n            new Assert\\NotBlank(allowNull: false),\n            new Assert\\Length(min: 8, max: 255),\n            new Assert\\NotCompromisedPassword(),\n            new Assert\\Type('string'),\n            new Assert\\Regex('/[A-Z]+/'),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Symfony Console Commands with Simulated CLI Input - PHP\nDESCRIPTION: This code demonstrates unit testing of Symfony Console commands that expect user input by setting inputs with CommandTester::setInputs. It simulates different user interactions, including singular and multiple answers, as well as confirmation questions. Requires symfony/console and use of CommandTester. Inputs are supplied as an array of strings, matching the questions the command will ask.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/helpers/questionhelper.rst#2025-04-22_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Console\\Tester\\CommandTester;\n\n// ...\npublic function testExecute(): void\n{\n    // ...\n    $commandTester = new CommandTester($command);\n\n    // Equals to a user inputting \"Test\" and hitting ENTER\n    $commandTester->setInputs(['Test']);\n\n    // Equals to a user inputting \"This\", \"That\" and hitting ENTER\n    // This can be used for answering two separated questions for instance\n    $commandTester->setInputs(['This', 'That']);\n\n    // For simulating a positive answer to a confirmation question, adding an\n    // additional input saying \"yes\" will work\n    $commandTester->setInputs(['yes']);\n\n    $commandTester->execute(['command' => $command->getName()]);\n\n    // $this->assertRegExp('/.../', $commandTester->getDisplay());\n}\n\n```\n\n----------------------------------------\n\nTITLE: Reading File Contents in Symfony Finder\nDESCRIPTION: Demonstrates how to read the contents of files returned by Symfony's Finder component using the getContents() method on each SplFileInfo object.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/finder.rst#2025-04-22_snippet_38\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Finder\\Finder;\n\n$finder = new Finder();\n$finder->files()->in(__DIR__);\n\nforeach ($finder as $file) {\n    $contents = $file->getContents();\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Invoice Entity with Interface Relationship\nDESCRIPTION: Defines an Invoice entity with a ManyToOne relationship to InvoiceSubjectInterface. Uses Doctrine ORM annotations for entity and relationship mapping.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine/resolve_target_entity.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Invoice.php\nnamespace App\\Entity;\n\nuse App\\Model\\InvoiceSubjectInterface;\nuse Doctrine\\ORM\\Mapping as ORM;\n\n/**\n * Represents an Invoice.\n */\n#[ORM\\Entity]\n#[ORM\\Table(name: 'invoice')]\nclass Invoice\n{\n    #[ORM\\ManyToOne(targetEntity: InvoiceSubjectInterface::class)]\n    protected InvoiceSubjectInterface $subject;\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Gitlab Short Codes to Emojis in PHP\nDESCRIPTION: PHP code demonstrating how to use EmojiTransliterator to convert Gitlab short codes back to emojis.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/emoji.rst#2025-04-22_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n$transliterator = EmojiTransliterator::create('gitlab-emoji');\n$transliterator->transliterate('Breakfast with :kiwi: or :milk:');\n// => 'Breakfast with 🥝 or 🥛'\n```\n\n----------------------------------------\n\nTITLE: Using Autoconfigure Attribute for Lazy Services\nDESCRIPTION: Demonstrates how to use the Autoconfigure attribute to mark a service as lazy directly in the class definition. This approach avoids the need for separate configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/lazy_services.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Twig;\n\nuse Symfony\\Component\\DependencyInjection\\Attribute\\Autoconfigure;\nuse Twig\\Extension\\ExtensionInterface;\n\n#[Autoconfigure(lazy: true)]\nclass AppExtension implements ExtensionInterface\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Only Files with Symfony Finder in PHP\nDESCRIPTION: Shows how to configure the Finder to return only files and ignore directories in the search results by calling the `files()` method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/finder.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// look for files only; ignore directories\n$finder->files();\n```\n\n----------------------------------------\n\nTITLE: Configuring NotCompromisedPassword Validation with PHP Code\nDESCRIPTION: This example shows how to programmatically apply the NotCompromisedPassword constraint using Symfony's validation metadata in a User entity class. The constraint checks if the rawPassword property contains a compromised password.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/NotCompromisedPassword.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/User.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass User\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('rawPassword', new Assert\\NotCompromisedPassword());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Identifying Types using isIdentifiedBy()\nDESCRIPTION: Demonstrates using the `isIdentifiedBy()` method on a `Type` object to check if it matches a specific `TypeIdentifier` constant (e.g., `TypeIdentifier::INT`, `TypeIdentifier::STRING`, `TypeIdentifier::OBJECT`) or a specific class/interface name. Covers checks for simple types, union types (checking if any part of the union matches), and object types (checking class name, parent class, and implemented interfaces).\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/type_info.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// define a simple integer type\n$type = Type::int();\n// check if the type matches a specific identifier\n$type->isIdentifiedBy(TypeIdentifier::INT);    // true\n$type->isIdentifiedBy(TypeIdentifier::STRING); // false\n\n// define a union type (equivalent to PHP's int|string)\n$type = Type::union(Type::string(), Type::int());\n// now the second check is true because the union type contains the string type\n$type->isIdentifiedBy(TypeIdentifier::INT);    // true\n$type->isIdentifiedBy(TypeIdentifier::STRING); // true\n\nclass DummyParent {}\nclass Dummy extends DummyParent implements DummyInterface {}\n\n// define an object type\n$type = Type::object(Dummy::class);\n\n// check if the type is an object or matches a specific class\n$type->isIdentifiedBy(TypeIdentifier::OBJECT); // true\n$type->isIdentifiedBy(Dummy::class);           // true\n// check if it inherits/implements something\n$type->isIdentifiedBy(DummyParent::class);     // true\n$type->isIdentifiedBy(DummyInterface::class);  // true\n```\n\n----------------------------------------\n\nTITLE: ProfileController with Cache Attributes in PHP\nDESCRIPTION: Example controller showing how to implement SSI with caching. The main page remains private while the GDPR content block has a shared max age of 600 seconds (10 minutes) for caching.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/http_cache/ssi.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/ProfileController.php\nnamespace App\\Controller;\n\nuse Symfony\\Component\\HttpKernel\\Attribute\\Cache;\n// ...\n\nclass ProfileController extends AbstractController\n{\n    public function index(): Response\n    {\n        // by default, responses are private\n        return $this->render('profile/index.html.twig');\n    }\n\n    #[Cache(smaxage: 600)]\n    public function gdpr(): Response\n    {\n        return $this->render('profile/gdpr.html.twig');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Check Controller in PHP\nDESCRIPTION: PHP controller implementation for handling login check requests, including rendering a template with login link parameters.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/login_link.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/SecurityController.php\nnamespace App\\Controller;\n\n// ...\nuse Symfony\\Component\\Routing\\Generator\\UrlGeneratorInterface;\n\nclass SecurityController extends AbstractController\n{\n    #[Route('/login_check', name: 'login_check')]\n    public function check(Request $request): Response\n    {\n        // get the login link query parameters\n        $expires = $request->query->get('expires');\n        $username = $request->query->get('user');\n        $hash = $request->query->get('hash');\n\n        // and render a template with the button\n        return $this->render('security/process_login_link.html.twig', [\n            'expires' => $expires,\n            'user' => $username,\n            'hash' => $hash,\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Module Aliases in Webpack Encore\nDESCRIPTION: Demonstrates how to use Encore's addAliases() method to create shortcuts for importing modules. This configures Webpack's resolve.alias option to simplify import paths by creating aliases to commonly used folders.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/advanced-config.rst#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nEncore.addAliases({\n    Utilities: path.resolve(__dirname, 'src/utilities/'),\n    Templates: path.resolve(__dirname, 'src/templates/')\n})\n```\n\n----------------------------------------\n\nTITLE: JavaScript Module with Import Statement\nDESCRIPTION: Example of a modern JavaScript file that imports another module using ES6 import syntax.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/asset_mapper.rst#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// assets/app.js\nimport Duck from './duck.js';\n\nconst duck = new Duck('Waddles');\nduck.quack();\n```\n\n----------------------------------------\n\nTITLE: Parsing YAML Date Strings as DateTime Objects in PHP\nDESCRIPTION: Demonstrates using the `Yaml::PARSE_DATETIME` flag with `Yaml::parse`. This flag instructs the parser to convert valid date/date-time strings into PHP `DateTime` objects instead of Unix timestamps.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/yaml.rst#2025-04-22_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$date = Yaml::parse('2016-05-27', Yaml::PARSE_DATETIME);\nvar_dump(get_class($date)); // DateTime\n```\n\n----------------------------------------\n\nTITLE: Configuring Lazy Loading for a Symfony Command (XML)\nDESCRIPTION: Demonstrates the XML configuration equivalent in `services.xml` for making a Symfony command (`App\\Command\\SunshineCommand`) lazy-loaded. It defines the service and uses the `<tag>` element with `name=\"console.command\"` and the `command=\"app:sunshine\"` attribute to specify the command name and enable lazy loading.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/console/commands_as_services.rst#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <!-- ... -->\n\n        <service id=\"App\\Command\\SunshineCommand\">\n            <tag name=\"console.command\" command=\"app:sunshine\"/>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Using Symfony Request Object\nDESCRIPTION: Shows how to use Symfony's Request class to access HTTP request information in an object-oriented way.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/introduction/http_fundamentals.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\HttpFoundation\\Request;\n\n$request = Request::createFromGlobals();\n\n// the URI being requested (e.g. /about) minus any query parameters\n$request->getPathInfo();\n\n// retrieves $_GET and $_POST variables respectively\n$request->query->get('id');\n$request->getPayload()->get('category', 'default category');\n\n// retrieves $_SERVER variables\n$request->server->get('HTTP_HOST');\n\n// retrieves an instance of UploadedFile identified by \"attachment\"\n$request->files->get('attachment');\n\n// retrieves a $_COOKIE value\n$request->cookies->get('PHPSESSID');\n\n// retrieves an HTTP request header, with normalized, lowercase keys\n$request->headers->get('host');\n$request->headers->get('content-type');\n\n$request->getMethod();    // e.g. GET, POST, PUT, DELETE or HEAD\n$request->getLanguages(); // an array of languages the client accepts\n```\n\n----------------------------------------\n\nTITLE: Using #[AutowireCallable] for Service Method Closures in PHP\nDESCRIPTION: Shows how to use the #[AutowireCallable] attribute to create a closure that calls a specific method on a service, with options for lazy instantiation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/autowiring.rst#2025-04-22_snippet_18\n\nLANGUAGE: PHP\nCODE:\n```\n// src/Service/MessageGenerator.php\nnamespace App\\Service;\n\nuse Symfony\\Component\\DependencyInjection\\Attribute\\AutowireCallable;\n\nclass MessageGenerator\n{\n    public function __construct(\n        #[AutowireCallable(service: 'third_party.remote_message_formatter', method: 'format')]\n        private \\Closure $formatCallable,\n    ) {\n    }\n\n    public function generate(string $message): void\n    {\n        $formattedMessage = ($this->formatCallable)($message);\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony EventDispatcher via Composer\nDESCRIPTION: This command uses Composer, the PHP dependency manager, to download and install the `symfony/event-dispatcher` package into your project. This makes the component's classes available for use.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/event_dispatcher.rst#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require symfony/event-dispatcher\n```\n\n----------------------------------------\n\nTITLE: Using a Custom JOIN Query in Symfony Controller\nDESCRIPTION: Controller method that uses a custom repository method with a JOIN query to efficiently fetch a Product with its related Category in a single database query.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine/associations.rst#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/ProductController.php\n\n// ...\nclass ProductController extends AbstractController\n{\n    public function show(ProductRepository $productRepository, int $id): Response\n    {\n        $product = $productRepository->findOneByIdJoinedToCategory($id);\n\n        $category = $product->getCategory();\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Public Service Alias using the AsAlias Attribute in PHP\nDESCRIPTION: Shows how to use the `#[AsAlias]` PHP attribute on a class (`App\\Mail\\PhpMailer`) to create a public alias (`app.mailer`) for it. This allows accessing the service instance using the alias identifier via the container, even if the original service definition might be private.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/alias_private.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// src/Mail/PhpMailer.php\nnamespace App\\Mail;\n\n// ...\nuse Symfony\\Component\\DependencyInjection\\Attribute\\AsAlias;\n\n#[AsAlias(id: 'app.mailer', public: true)]\nclass PhpMailer\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Max Input Length in YAML for Symfony HTML Sanitizer\nDESCRIPTION: This snippet demonstrates how to set the maximum input length for the HTML Sanitizer in Symfony using YAML configuration. It helps prevent DoS attacks by limiting the input length, with contents exceeding the limit being truncated.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/html_sanitizer.rst#2025-04-22_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/html_sanitizer.yaml\nframework:\n    html_sanitizer:\n        sanitizers:\n            app.post_sanitizer:\n                # ...\n\n                # inputs longer (in characters) than this value will be truncated\n                max_input_length: 30000 # default: 20000\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Serialization Context with YAML in Symfony\nDESCRIPTION: This YAML snippet sets the default context for the Symfony Serializer in the global framework configuration, specifically disallowing extra attributes during deserialization. This should be placed at config/packages/serializer.yaml. Its primary parameter is allow_extra_attributes (set to false), which prevents acceptance of unexpected fields when denormalizing data. No additional dependencies are needed as this works with Symfony configuration conventions.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer.rst#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/serializer.yaml\nframework:\n    serializer:\n        default_context:\n            allow_extra_attributes: false\n```\n\n----------------------------------------\n\nTITLE: Creating a Symfony Form with Default Values in a Controller (PHP)\nDESCRIPTION: Illustrates how to set default values for form fields when creating a form within a Symfony controller. An array containing default data (`$defaults`) is passed as the first argument to the `createFormBuilder` shortcut method. This pre-populates the form fields when rendered. Requires the Symfony FrameworkBundle.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/form.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/DefaultController.php\nnamespace App\\Controller;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\DateType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\TextType;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpFoundation\\Request; // Assuming Request is needed, added for context\n\nclass DefaultController extends AbstractController\n{\n    public function new(Request $request): Response\n    {\n        $defaults = [\n            'dueDate' => new \\DateTime('tomorrow'),\n        ];\n\n        $form = $this->createFormBuilder($defaults)\n            ->add('task', TextType::class)\n            ->add('dueDate', DateType::class)\n            ->getForm();\n\n        // ... likely render the form view\n        // return $this->render('template.html.twig', ['form' => $form->createView()]); \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP Form Login with Query String in YAML\nDESCRIPTION: Example of configuring advanced LDAP form login with query_string in YAML format. Uses a query string to search for users within the specified DN structure and adds authentication credentials for the search operation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/ldap.rst#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\nsecurity:\n    # ...\n\n    firewalls:\n        main:\n            # ...\n            form_login_ldap:\n                service: Symfony\\Component\\Ldap\\Ldap\n                dn_string: 'dc=example,dc=com'\n                query_string: '(&(uid={user_identifier})(memberOf=cn=users,ou=Services,dc=example,dc=com))'\n                search_dn: '...'\n                search_password: 'the-raw-password'\n```\n\n----------------------------------------\n\nTITLE: Encoding XML Attributes and Comments with XmlEncoder in PHP\nDESCRIPTION: This PHP snippet initializes an `XmlEncoder` and uses it to encode an array. The array structure specifies an element 'foo' with an attribute 'bar' and an element 'qux' containing an XML comment using the special '#comment' key.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer/encoders.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$encoder = new XmlEncoder();\n$xml = $encoder->encode([\n    'foo' => ['@bar' => 'value'],\n    'qux' => ['#comment' => 'A comment'],\n], 'xml');\n```\n\n----------------------------------------\n\nTITLE: Custom Middleware to Add Envelope Stamps Conditionally - Symfony Messenger - PHP\nDESCRIPTION: Implements a custom middleware that inspects envelope stamps and conditionally adds a new stamp if the message was received. Relies on Messenger interfaces, App stamp class, and correct service registration. The middleware checks for ReceivedStamp instances in the envelope, adds AnotherStamp if present, and passes the envelope to the next middleware. Used for cross-cutting concerns such as auditing or custom metadata injection.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/messenger.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Message\\Stamp\\AnotherStamp;\nuse Symfony\\Component\\Messenger\\Envelope;\nuse Symfony\\Component\\Messenger\\Middleware\\MiddlewareInterface;\nuse Symfony\\Component\\Messenger\\Middleware\\StackInterface;\nuse Symfony\\Component\\Messenger\\Stamp\\ReceivedStamp;\n\nclass MyOwnMiddleware implements MiddlewareInterface\n{\n    public function handle(Envelope $envelope, StackInterface $stack): Envelope\n    {\n        if (null !== $envelope->last(ReceivedStamp::class)) {\n            // Message just has been received...\n\n            // You could for example add another stamp.\n            $envelope = $envelope->with(new AnotherStamp(/* ... */));\n        } else {\n            // Message was just originally dispatched\n        }\n\n        return $stack->next()->handle($envelope, $stack);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP User Provider - Symfony - XML\nDESCRIPTION: This XML declaration configures an LDAP-based user provider for Symfony's security system. It sets the LDAP service, DN, authentication data, default role, and the UID field in a <provider> section. Dependencies include appropriate XML schemas for Symfony security and services, as well as Ldap service definitions. The input parameters define search context and user mapping; output is the ability to fetch users from LDAP for authentication.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/ldap.rst#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\\n<srv:container xmlns=\\\"http://symfony.com/schema/dic/security\\\"\\n    xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n    xmlns:srv=\\\"http://symfony.com/schema/dic/services\\\"\\n    xsi:schemaLocation=\\\"http://symfony.com/schema/dic/services\\n        https://symfony.com/schema/dic/services/services-1.0.xsd\\n        http://symfony.com/schema/dic/security\\n        https://symfony.com/schema/dic/security/security-1.0.xsd\\\">\\n\\n    <config>\\n        <provider name=\\\"my_ldap\\\">\\n            <ldap service=\\\"Symfony\\Component\\Ldap\\Ldap\\\"\\n                base-dn=\\\"dc=example,dc=com\\\"\\n                search-dn=\\\"cn=read-only-admin,dc=example,dc=com\\\"\\n                search-password=\\\"password\\\"\\n                default-roles=\\\"ROLE_USER\\\"\\n                uid-key=\\\"uid\\\"/>\\n        </provider>\\n    </config>\\n</srv:container>\\n\n```\n\n----------------------------------------\n\nTITLE: Triggering UndefinedOptionsException with OptionsResolver in PHP\nDESCRIPTION: This PHP example shows that instantiating the `Mailer` class (now using `OptionsResolver`) with an undefined option ('usernme') throws an `UndefinedOptionsException`. This immediately highlights typos or incorrect option names.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/options_resolver.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$mailer = new Mailer([\n    'usernme' => 'johndoe',\n]);\n\n// UndefinedOptionsException: The option \"usernme\" does not exist.\n// Defined options are: \"host\", \"password\", \"port\", \"username\"\n```\n\n----------------------------------------\n\nTITLE: Static Callback Validation Implementation\nDESCRIPTION: Shows how to implement a static callback validation method that receives the object instance as the first parameter.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Callback.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic static function validate(mixed $value, ExecutionContextInterface $context, mixed $payload): void\n{\n    // somehow you have an array of \"fake names\"\n    $fakeNames = [/* ... */];\n\n    // check if the name is actually a fake name\n    if (in_array($value->getFirstName(), $fakeNames)) {\n        $context->buildViolation('This name sounds totally fake!')\n            ->atPath('firstName')\n            ->addViolation()\n        ;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Long-Running Commands with Symfony Server\nDESCRIPTION: Examples of running background tasks and monitoring their status using Symfony server commands\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/symfony_server.rst#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ symfony run -d npx encore dev --watch\n\n$ symfony server:log\n\n$ symfony server:status\n\n$ symfony server:stop\n```\n\n----------------------------------------\n\nTITLE: Enabling CSRF Protection in Symfony (XML)\nDESCRIPTION: Enables CSRF protection for all forms using XML configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_25\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/framework.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony\n        https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n    <framework:config>\n        <framework:csrf-protection enabled=\"true\"/>\n    </framework:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Injecting a Custom LockFactory for LockableTrait in PHP\nDESCRIPTION: This snippet shows how to customize the locking mechanism used by `LockableTrait` by injecting a `LockFactory` instance via the constructor. Setting the `$lockFactory` property overrides the default behavior (which tries `SemaphoreStore` then `FlockStore`), allowing the use of different lock stores like databases or Redis. This feature was introduced in Symfony 7.1.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/console/lockable_trait.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// ...\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Command\\LockableTrait;\nuse Symfony\\Component\\Lock\\LockFactory;\n\nclass UpdateContentsCommand extends Command\n{\n    use LockableTrait;\n\n    public function __construct(private LockFactory $lockFactory)\n    {\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Image Validation Constraints in Symfony RST Documentation\nDESCRIPTION: This snippet defines various options for image validation constraints in Symfony, including maximum height, width, pixels, and aspect ratio. It also includes customizable error messages and their parameters.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Image.rst#2025-04-22_snippet_9\n\nLANGUAGE: rst\nCODE:\n```\n**type**: ``integer``\n\nIf set, the height of the image file must be less than or equal to this\nvalue in pixels.\n\n``maxHeightMessage``\n~~~~~~~~~~~~~~~~~~~~\n\n**type**: ``string`` **default**: ``The image height is too big ({{ height }}px).\nAllowed maximum height is {{ max_height }}px.``\n\nThe error message if the height of the image exceeds `maxHeight`_.\n\nYou can use the following parameters in this message:\n\n====================  =========================================================\nParameter             Description\n====================  =========================================================\n``{{ height }}``      The current (invalid) height\n``{{ max_height }}``  The maximum allowed height\n====================  =========================================================\n\n``maxPixels``\n~~~~~~~~~~~~~\n\n**type**: ``integer``\n\nIf set, the amount of pixels of the image file must be less than or equal to this\nvalue.\n\n``maxPixelsMessage``\n~~~~~~~~~~~~~~~~~~~~\n\n**type**: ``string`` **default**: ``The image has too many pixels ({{ pixels }} pixels).\nMaximum amount expected is {{ max_pixels }} pixels.``\n\nThe error message if the amount of pixels of the image exceeds `maxPixels`_.\n\nYou can use the following parameters in this message:\n\n====================  =========================================================\nParameter             Description\n====================  =========================================================\n``{{ height }}``      The current image height\n``{{ max_pixels }}``  The maximum allowed amount of pixels\n``{{ pixels }}``      The current amount of pixels\n``{{ width }}``       The current image width\n====================  =========================================================\n```\n\n----------------------------------------\n\nTITLE: Using Expressions in Service Factory Definitions - Symfony YAML - yaml\nDESCRIPTION: Illustrates defining factories using expression language in Symfony YAML configuration, allowing conditional logic or argument retrieval for service instantiation. Requires Symfony's expression language support and proper parameter/service definitions. Demonstrates conditional selection of tracer or default newsletter service and use of the arg() function.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/factories.rst#2025-04-22_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nservices:\n    App\\Email\\NewsletterManagerInterface:\n        # use the \"tracable_newsletter\" service when debug is enabled, \"newsletter\" otherwise.\n        # \"@=\" indicates that this is an expression\n        factory: '@=parameter(\"kernel.debug\") ? service(\"tracable_newsletter\") : service(\"newsletter\")'\n\n    # you can use the arg() function to retrieve an argument from the definition\n    App\\Email\\NewsletterManagerInterface:\n        factory: \"@=arg(0).createNewsletterManager() ?: service(\\\"default_newsletter_manager\\\")\"\n        arguments:\n            - '@App\\Email\\NewsletterManagerFactory'\n\n```\n\n----------------------------------------\n\nTITLE: Manually Validating a CSRF Token in a Symfony Controller\nDESCRIPTION: Provides a PHP controller action example demonstrating how to manually validate a submitted CSRF token when not using Symfony Forms. It retrieves the token value submitted via the request payload (using `request->getPayload()->get('token')`) and then uses the `isCsrfTokenValid()` helper method (available in controllers extending `AbstractController`). This method checks if the submitted token is valid against the same identifier ('delete-item') used during generation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/csrf.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n// ...\n\npublic function delete(Request $request): Response\n{\n    $submittedToken = $request->getPayload()->get('token');\n\n    // 'delete-item' is the same value used in the template to generate the token\n    if ($this->isCsrfTokenValid('delete-item', $submittedToken)) {\n        // ... do something, like deleting an object\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deserializing and Recreating an Email using Symfony Mime RawMessage (PHP)\nDESCRIPTION: Illustrates how to take a serialized email string, use PHP's `unserialize()` to get the raw data, and then wrap it in a `Symfony\\Component\\Mime\\RawMessage` object. This allows the Mailer component or other systems to handle and send the reconstructed message.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/mime.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Mime\\RawMessage;\n\n// ...\n$serializedEmail = serialize($email);\n\n// later, recreate the original message to actually send it\n$message = new RawMessage(unserialize($serializedEmail));\n```\n\n----------------------------------------\n\nTITLE: Registering Class Self-Factory Service (Static Method) - PHP Configuration\nDESCRIPTION: Demonstrates using the ContainerConfigurator API to register a class that uses its own static factory method in PHP. By passing '[null, \\u0027create\\u0027]' to 'factory', the container calls the static 'create' method of the service's class for instantiation. The method can also accept constructor arguments. This approach is for use in 'config/services.php'.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/factories.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nuse App\\Email\\NewsletterManager;\n\nreturn function(ContainerConfigurator $container): void {\n    $services = $container->services();\n\n    // Note that we are not using service()\n    $services->set(NewsletterManager::class)\n        ->factory([null, 'create']);\n};\n\n```\n\n----------------------------------------\n\nTITLE: Checking if a Path is Absolute (PHP)\nDESCRIPTION: Demonstrates the `Filesystem::isAbsolutePath` method, which returns `true` if the provided path string is an absolute path (e.g., starts with `/` on Unix or `C:\\` on Windows) and `false` otherwise.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/filesystem.rst#2025-04-22_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n// returns true\n$filesystem->isAbsolutePath('/tmp');\n// returns true\n$filesystem->isAbsolutePath('c:\\\\Windows');\n// returns false\n$filesystem->isAbsolutePath('tmp');\n// returns false\n$filesystem->isAbsolutePath('../dir');\n```\n\n----------------------------------------\n\nTITLE: Message Handler for Cleanup Tasks\nDESCRIPTION: Shows implementation of a message handler for cleaning up old sales reports with conditional task removal\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/scheduler.rst#2025-04-22_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n// src/Scheduler/Handler/CleanUpOldSalesReportHandler.php\nnamespace App\\Scheduler\\Handler;\n\n#[AsMessageHandler]\nclass CleanUpOldSalesReportHandler\n{\n    public function __invoke(CleanUpOldSalesReport $cleanUpOldSalesReport): void\n    {\n        // do some work here...\n\n        if ($isFinished) {\n            $this->mySchedule->removeCleanUpMessage();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating BinaryFileResponse with SplTempFileObject in PHP\nDESCRIPTION: This code demonstrates how to create a BinaryFileResponse using an SplTempFileObject for serving a file created in memory.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#2025-04-22_snippet_32\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\HttpFoundation\\BinaryFileResponse;\n\n$file = new \\SplTempFileObject();\n$file->fwrite('Hello World');\n$file->rewind();\n\n$response = new BinaryFileResponse($file);\n```\n\n----------------------------------------\n\nTITLE: Reverse Sorting in Symfony Finder\nDESCRIPTION: Shows how to reverse the sorting order of finder results using the reverseSorting() method, which can be chained after any sorting method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/finder.rst#2025-04-22_snippet_37\n\nLANGUAGE: php\nCODE:\n```\n// results will be sorted \"Z to A\" instead of the default \"A to Z\"\n$finder->sortByName()->reverseSorting();\n```\n\n----------------------------------------\n\nTITLE: Defining Non-Shared Services using PHP Configuration in Symfony\nDESCRIPTION: Demonstrates how to configure a non-shared service using PHP configuration. The share(false) method instructs the container to create a new instance each time the service is requested.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/shared.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nuse App\\SomeNonSharedService;\n\nreturn function(ContainerConfigurator $container): void {\n    $services = $container->services();\n\n    $services->set(SomeNonSharedService::class)\n        ->share(false);\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Form Type Extension Class in PHP\nDESCRIPTION: This code snippet shows how to create a form type extension class that extends the FileType. It implements the required getExtendedTypes() method to specify which field type to modify.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/create_form_type_extension.rst#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n// src/Form/Extension/ImageTypeExtension.php\nnamespace App\\Form\\Extension;\n\nuse Symfony\\Component\\Form\\AbstractTypeExtension;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\FileType;\n\nclass ImageTypeExtension extends AbstractTypeExtension\n{\n    /**\n     * Returns an array of extended types.\n     */\n    public static function getExtendedTypes(): iterable\n    {\n        // return [FormType::class] to modify (nearly) every field in the system\n        return [FileType::class];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Locator Injection in XML\nDESCRIPTION: Shows how to configure service locator injection using XML in Symfony. It defines the CommandBus service with the locator as an argument.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/service_subscribers_locators.rst#2025-04-22_snippet_18\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n\n        <service id=\"App\\CommandBus\">\n            <argument type=\"service\" id=\"app.command_handler_locator\"/>\n        </service>\n\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Adding Remember Me Checkbox in Symfony Form (HTML+Twig)\nDESCRIPTION: This HTML+Twig snippet demonstrates how to add a 'Remember Me' checkbox on a login form so that users may opt in for persistent authentication. It must be named '_remember_me' to be recognized by Symfony's security system (unless configured otherwise), and the 'checked' attribute can set it selected by default. Used in templates/security/login.html.twig, this field allows toggling persistent login by user action, interacting directly with the back-end remember_me configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/remember_me.rst#2025-04-22_snippet_3\n\nLANGUAGE: html+twig\nCODE:\n```\n{# templates/security/login.html.twig #}\n<form method=\"post\">\n    {# ... your form fields #}\n\n    <label>\n        <input type=\"checkbox\" name=\"_remember_me\" checked>\n        Keep me logged in\n    </label>\n\n    {# ... #}\n</form>\n```\n\n----------------------------------------\n\nTITLE: Symfony Project Directory Structure\nDESCRIPTION: Shows the basic directory structure created for a new Symfony project.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/quick_tour/the_big_picture.rst#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nquick_tour/\n├─ .env\n├─ bin/console\n├─ composer.json\n├─ composer.lock\n├─ config/\n├─ public/index.php\n├─ src/\n├─ symfony.lock\n├─ var/\n└─ vendor/\n```\n\n----------------------------------------\n\nTITLE: News Controller with Independent Cache Configuration (Using Attributes)\nDESCRIPTION: A controller for news content with its own caching strategy using PHP attributes. This fragment will be cached independently from the main page.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/http_cache/esi.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/NewsController.php\nnamespace App\\Controller;\n\nuse Symfony\\Component\\HttpKernel\\Attribute\\Cache;\n// ...\n\nclass NewsController extends AbstractController\n{\n    #[Cache(smaxage: 60)]\n    public function latest(int $maxPerPage): Response\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Password Type with RepeatedType Configuration\nDESCRIPTION: Example demonstrating how to use PasswordType within a RepeatedType for password confirmation fields, including hash property path configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/password.rst#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$builder->add('plainPassword', RepeatedType::class, [\n    'type' => PasswordType::class,\n    'first_options'  => ['label' => 'Password', 'hash_property_path' => 'password'],\n    'second_options' => ['label' => 'Repeat Password'],\n    'mapped' => false,\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Page-Specific Entrypoints in ImportMap\nDESCRIPTION: Demonstrates how to configure additional entrypoints in the importmap.php file to enable page-specific JavaScript and CSS.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/asset_mapper.rst#2025-04-22_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\n// importmap.php\nreturn [\n    // the 'app' entrypoint ...\n\n    'checkout' => [\n        'path' => './assets/checkout.js',\n        'entrypoint' => true,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Embedding Images in Twig Email Templates\nDESCRIPTION: Example of using the email.image() Twig helper to embed images inside email content, which automatically handles the CID embedding process.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_46\n\nLANGUAGE: html+twig\nCODE:\n```\n{# '@images/' refers to the Twig namespace defined earlier #}\n<img src=\"{{ email.image('@images/logo.png') }}\" alt=\"Logo\">\n\n<h1>Welcome {{ email.toName }}!</h1>\n{# ... #}\n```\n\n----------------------------------------\n\nTITLE: Date Range Validation with Timezone\nDESCRIPTION: Example of date range validation with explicit timezone specification using UTC.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Range.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Event.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Event\n{\n    #[Assert\\Range(\n        min: 'first day of January UTC',\n        max: 'first day of January next year UTC',\n    )]\n    protected \\DateTimeInterface $startDate;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Field-Specific Mapping with Callbacks\nDESCRIPTION: Example of using getter and setter callbacks for custom mapping of individual form fields.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/data_mappers.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function buildForm(FormBuilderInterface $builder, array $options): void\n{\n    $builder->add('state', ChoiceType::class, [\n        'choices' => [\n            'active' => true,\n            'paused' => false,\n        ],\n        'getter' => function (Task $task, FormInterface $form): bool {\n            return !$task->isCancelled() && !$task->isPaused();\n        },\n        'setter' => function (Task &$task, bool $state, FormInterface $form): void {\n            if ($state) {\n                $task->activate();\n            } else {\n                $task->pause();\n            }\n        },\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Rate Limiters in PHP\nDESCRIPTION: PHP configuration for setting up two rate limiters: 'anonymous_api' using fixed window policy and 'authenticated_api' using token bucket policy.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/rate_limiter.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/rate_limiter.php\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework): void {\n    $framework->rateLimiter()\n        ->limiter('anonymous_api')\n            // use 'sliding_window' if you prefer that policy\n            ->policy('fixed_window')\n            ->limit(100)\n            ->interval('60 minutes')\n        ;\n\n    $framework->rateLimiter()\n        ->limiter('authenticated_api')\n            ->policy('token_bucket')\n            ->limit(5000)\n            ->rate()\n                ->interval('15 minutes')\n                ->amount(500)\n        ;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Form Integration in Symfony Framework Bundle\nDESCRIPTION: This snippet demonstrates how to enable form integration in the Symfony FrameworkBundle using YAML, XML, and PHP configuration formats. It shows the high-level configuration that triggers complex service definitions and component integrations.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/bundles/configuration.rst#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/framework.yaml\nframework:\n    form: true\n```\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/framework.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony\n        https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\"\n>\n    <framework:config>\n        <framework:form/>\n    </framework:config>\n</container>\n```\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/framework.php\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework): void {\n    $framework->form()->enabled(true);\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Genres Method for Choice Callback\nDESCRIPTION: Example of defining a method to provide choices for the Choice constraint callback option.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Choice.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Author.php\nnamespace App\\Entity;\n\nclass Author\n{\n    public static function getGenres(): array\n    {\n        return ['fiction', 'non-fiction'];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Mailer Envelope in PHP\nDESCRIPTION: PHP configuration for setting up the mailer envelope with recipient email addresses. This setup directs all emails to the specified recipient.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_71\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/mailer.php\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework): void {\n    // ...\n    $framework->mailer()\n        ->envelope()\n            ->recipients(['youremail@example.com'])\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Testing Insulated Client Interaction in Symfony\nDESCRIPTION: This snippet shows how to use insulated clients to avoid issues with global state. Each client runs in a separate PHP process, ensuring clean test environments. It's useful when working with code that maintains global state or depends on third-party libraries with global state.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/testing/insulating_clients.rst#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n// ...\nuse Symfony\\Component\\HttpFoundation\\Response;\n\n$harry = static::createClient();\n$sally = static::createClient();\n\n$harry->insulate();\n$sally->insulate();\n\n$harry->request('POST', '/say/sally/Hello');\n$sally->request('GET', '/messages');\n\n$this->assertEquals(Response::HTTP_CREATED, $harry->getResponse()->getStatusCode());\n$this->assertRegExp('/Hello/', $sally->getResponse()->getContent());\n```\n\n----------------------------------------\n\nTITLE: Implementing Immutable-setter Injection in PHP Class\nDESCRIPTION: Implementation of immutable-setter injection where a method returns a cloned instance with the dependency set, preserving immutability.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/injection_types.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// src/Mail/NewsletterManager.php\nnamespace App\\Mail;\n\n// ...\nuse Symfony\\Component\\Mailer\\MailerInterface;\nuse Symfony\\Contracts\\Service\\Attribute\\Required;\n\nclass NewsletterManager\n{\n    private MailerInterface $mailer;\n\n    /**\n     * @return static\n     */\n    #[Required]\n    public function withMailer(MailerInterface $mailer): self\n    {\n        $new = clone $this;\n        $new->mailer = $mailer;\n\n        return $new;\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OIDC User Info Claim and Base URI - Symfony Security - PHP\nDESCRIPTION: This PHP snippet programmatically configures a custom claim ('email') and base URI for the OIDC user info handler within the Symfony Security configuration. It demonstrates method chaining for fine-tuned control of OIDC authentication behaviour, targeting developers who manage security via PHP config files.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/access_token.rst#2025-04-22_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/security.php\nuse Symfony\\Config\\SecurityConfig;\n\nreturn static function (SecurityConfig $security) {\n    $security->firewall('main')\n        ->accessToken()\n            ->tokenHandler()\n                ->oidcUserInfo()\n                    ->claim('email')\n                    ->baseUri('https://www.example.com/realms/demo/protocol/openid-connect/userinfo')\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing IBAN Validation with PHP Attributes\nDESCRIPTION: Example showing how to validate an IBAN using PHP attributes in a Transaction entity class. Uses Symfony's Assert\\Iban constraint to validate the bankAccountNumber property.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Iban.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Transaction.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Transaction\n{\n    #[Assert\\Iban(\n        message: 'This is not a valid International Bank Account Number (IBAN).',\n    )]\n    protected string $bankAccountNumber;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Login Parameters in Symfony Security Firewall (YAML)\nDESCRIPTION: This YAML configuration sets up a firewall in Symfony where the login form's redirect and failure parameters are customized using 'target_path_parameter' and 'failure_path_parameter'. Required in a Symfony project (5.x+), these options change the expected parameter names in authentication URLs and forms. Inputs: custom parameter names; Outputs: modified authentication behavior. Requires the 'security' package and is limited to YAML-based config.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/form_login.rst#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\nsecurity:\n    # ...\n\n    firewalls:\n        main:\n            # ...\n            form_login:\n                target_path_parameter: go_to\n                failure_path_parameter: back_to\n```\n\n----------------------------------------\n\nTITLE: Leap Year Application Implementation\nDESCRIPTION: Example application that determines if a given year is a leap year, demonstrating practical usage of the framework with custom logic.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/create_framework/templating.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing;\n\nfunction is_leap_year(?int $year = null): bool\n{\n    if (null === $year) {\n        $year = (int)date('Y');\n    }\n\n    return 0 === $year % 400 || (0 === $year % 4 && 0 !== $year % 100);\n}\n\n$routes = new Routing\\RouteCollection();\n$routes->add('leap_year', new Routing\\Route('/is_leap_year/{year}', [\n    'year' => null,\n    '_controller' => function (Request $request): Response {\n        if (is_leap_year($request->attributes->get('year'))) {\n            return new Response('Yep, this is a leap year!');\n        }\n\n        return new Response('Nope, this is not a leap year.');\n    }\n]));\n\nreturn $routes;\n```\n\n----------------------------------------\n\nTITLE: Refreshing an Expiring Lock with Custom TTL in PHP\nDESCRIPTION: Shows how to refresh an expiring lock with a custom TTL value, overriding the original TTL for that specific refresh operation. A lock is created with a default TTL of 30s. Calling `refresh()` resets the TTL to 30s. Calling `refresh(600)` extends the lock's lifetime by 600 seconds for this instance. Subsequent calls to `refresh()` without arguments will again use the original 30s TTL.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/lock.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$lock = $factory->createLock('pdf-creation', ttl: 30);\n// ...\n// refresh the lock for 30 seconds\n$lock->refresh();\n// ...\n// refresh the lock for 600 seconds (next refresh() call will be 30 seconds again)\n$lock->refresh(600);\n```\n\n----------------------------------------\n\nTITLE: Deserializing Nested Structures using SerializedPath in PHP\nDESCRIPTION: Shows how to use the SerializedPath attribute to map nested JSON structures to flat PHP objects. This is useful for simplifying complex data structures.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer.rst#2025-04-22_snippet_29\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse Symfony\\Component\\Serializer\\Attribute\\SerializedPath;\n\nclass Person\n{\n    private int $id;\n\n    #[SerializedPath('[profile][username]')]\n    private string $username;\n\n    #[SerializedPath('[profile][personal_information][full_name]')]\n    private string $fullName;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Generic Form Type Extension in PHP\nDESCRIPTION: This code shows how to create a form type extension that applies to multiple form types by specifying multiple classes in the getExtendedTypes() method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/create_form_type_extension.rst#2025-04-22_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n// src/Form/Extension/DateTimeExtension.php\nnamespace App\\Form\\Extension;\n// ...\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\DateTimeType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\DateType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\TimeType;\n\nclass DateTimeExtension extends AbstractTypeExtension\n{\n    // ...\n\n    public static function getExtendedTypes(): iterable\n    {\n        return [DateTimeType::class, DateType::class, TimeType::class];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony Framework Components via Composer - Terminal\nDESCRIPTION: Demonstrates how to install Symfony\\framework-bundle and symfony\\runtime using Composer. These dependencies are prerequisites for setting up a minimal Symfony application with MicroKernelTrait. The command should be run in the project root directory, and Composer must be installed beforehand.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/micro_kernel_trait.rst#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require symfony/framework-bundle symfony/runtime\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Automatic Lock Release with pcntl_fork in PHP\nDESCRIPTION: Illustrates the default behavior where locks are automatically released when their corresponding Lock object is destroyed. This example requires the `PCNTL` PHP extension. It acquires a lock and then uses `pcntl_fork()` to create a child process. When the child process exits (`exit(0)`), its copy of the `$lock` object is destroyed, triggering the automatic release of the lock, even though the parent process is still running (`sleep(30)`).\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/lock.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// ...\n$lock = $factory->createLock('pdf-creation');\nif (!$lock->acquire()) {\n    return;\n}\n\n$pid = pcntl_fork();\nif (-1 === $pid) {\n    // Could not fork\n    exit(1);\n} elseif ($pid) {\n    // Parent process\n    sleep(30);\n} else {\n    // Child process\n    echo 'The lock will be released now.';\n    exit(0);\n}\n// ...\n```\n\n----------------------------------------\n\nTITLE: Setting User Locale in Symfony Event Listener\nDESCRIPTION: Example of setting the user's locale in a custom event listener before it's needed by other parts of the system.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/translation.rst#2025-04-22_snippet_27\n\nLANGUAGE: php\nCODE:\n```\npublic function onKernelRequest(RequestEvent $event): void\n{\n    $request = $event->getRequest();\n\n    // some logic to determine the $locale\n    $request->setLocale($locale);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Advanced Routing Loader in Symfony PHP\nDESCRIPTION: Implements an AdvancedLoader class that extends Symfony's Loader to load secondary routing resources. This loader demonstrates how to import other routing configurations (e.g., YAML files) from bundles.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/routing/custom_route_loader.rst#2025-04-22_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n// src/Routing/AdvancedLoader.php\nnamespace App\\Routing;\n\nuse Symfony\\Component\\Config\\Loader\\Loader;\nuse Symfony\\Component\\Routing\\RouteCollection;\n\nclass AdvancedLoader extends Loader\n{\n    public function load($resource, ?string $type = null): RouteCollection\n    {\n        $routes = new RouteCollection();\n\n        $resource = '@ThirdPartyBundle/Resources/config/routes.yaml';\n        $type = 'yaml';\n\n        $importedRoutes = $this->import($resource, $type);\n\n        $routes->addCollection($importedRoutes);\n\n        return $routes;\n    }\n\n    public function supports($resource, ?string $type = null): bool\n    {\n        return 'advanced_extra' === $type;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditionally Loading Service Files in Extension Load Method (PHP)\nDESCRIPTION: Illustrates advanced logic within an extension's `load()` method. After processing configuration and loading a primary service file (`services.xml`), it conditionally loads an additional file (`advanced.xml`) based on a boolean configuration flag (`$config['advanced']`).\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/dependency_injection/compilation.rst#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\npublic function load(array $configs, ContainerBuilder $container): void\n{\n    $configuration = new Configuration();\n    $processor = new Processor();\n    $config = $processor->processConfiguration($configuration, $configs);\n\n    $loader = new XmlFileLoader(\n        $container,\n        new FileLocator(__DIR__.'/../Resources/config')\n    );\n    $loader->load('services.xml');\n\n    if ($config['advanced']) {\n        $loader->load('advanced.xml');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Category Entity with make:entity Command\nDESCRIPTION: Demonstrates how to use the Symfony make:entity command to create a new Category entity with a name field.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine/associations.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ php bin/console make:entity Category\n\nNew property name (press <return> to stop adding fields):\n> name\n\nField type (enter ? to see all types) [string]:\n> string\n\nField length [255]:\n> 255\n\nCan this field be null in the database (nullable) (yes/no) [no]:\n> no\n\nNew property name (press <return> to stop adding fields):\n>\n(press enter again to finish)\n```\n\n----------------------------------------\n\nTITLE: Initializing ZookeeperStore for Symfony Lock Component\nDESCRIPTION: Creates a ZookeeperStore instance using a ZooKeeper connection. This store does not support blocking or expiration, but automatically releases locks when the PHP process terminates.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/lock.rst#2025-04-22_snippet_27\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Lock\\Store\\ZookeeperStore;\n\n$zookeeper = new \\Zookeeper('localhost:2181');\n// use the following to define a high-availability cluster:\n// $zookeeper = new \\Zookeeper('localhost1:2181,localhost2:2181,localhost3:2181');\n\n$store = new ZookeeperStore($zookeeper);\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Cache Pool in Symfony (YAML)\nDESCRIPTION: Configures a Redis cache pool named 'cache.mycache' with a default lifetime of 1 hour using YAML configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/framework.yaml\nframework:\n    cache:\n        pools:\n            cache.mycache:\n                adapter: cache.adapter.redis\n                default_lifetime: 3600\n```\n\n----------------------------------------\n\nTITLE: Creating String Response Listener\nDESCRIPTION: Implements an event subscriber that converts string responses from controllers into proper Response objects.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/create_framework/http_kernel_httpkernel_class.rst#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace Simplex;\n\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Event\\ViewEvent;\n\nclass StringResponseListener implements EventSubscriberInterface\n{\n    public function onView(ViewEvent $event): void\n    {\n        $response = $event->getControllerResult();\n\n        if (is_string($response)) {\n            $event->setResponse(new Response($response));\n        }\n    }\n\n    public static function getSubscribedEvents(): array\n    {\n        return ['kernel.view' => 'onView'];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Console Application with EventDispatcher\nDESCRIPTION: Sets up a basic Symfony Console application with EventDispatcher integration to enable event handling.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/events.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Console\\Application;\nuse Symfony\\Component\\Console\\EventDispatcher\\EventDispatcher;\n\n$dispatcher = new EventDispatcher();\n\n$application = new Application();\n$application->setDispatcher($dispatcher);\n$application->run();\n```\n\n----------------------------------------\n\nTITLE: Configuring PHP-FPM Pool for Symfony - INI\nDESCRIPTION: This snippet provides a sample PHP-FPM pool configuration file for Symfony applications. It demonstrates how to set up user/group ownership, choose between Unix domain sockets or TCP for FastCGI connections, and explains basic directives. Dependencies include the php-fpm package and correct permissions for www-data. Changing listen addresses or file paths may be required in different hosting setups.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/web_server_configuration.rst#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n; /etc/php/8.3/fpm/pool.d/www.conf\n\n; a pool called www\n[www]\nuser = www-data\ngroup = www-data\n\n; use a unix domain socket\nlisten = /var/run/php/php8.3-fpm.sock\n\n; or listen on a TCP connection\n; listen = 127.0.0.1:9000\n\n```\n\n----------------------------------------\n\nTITLE: Creating and Sending Notifications in Symfony\nDESCRIPTION: Example of creating and sending notifications using the Notifier component in a controller.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/notifier.rst#2025-04-22_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/InvoiceController.php\nnamespace App\\Controller;\n\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Notifier\\Notification\\Notification;\nuse Symfony\\Component\\Notifier\\NotifierInterface;\nuse Symfony\\Component\\Notifier\\Recipient\\Recipient;\n\nclass InvoiceController extends AbstractController\n{\n    #[Route('/invoice/create')]\n```\n\n----------------------------------------\n\nTITLE: Defining Scalar, Boolean, and String Node Defaults in Symfony TreeBuilder (PHP)\nDESCRIPTION: Shows how to add child nodes of various types (boolean, scalar, string) to the configuration tree, specifying default values and type constraints. Uses the fluent API for chaining node definitions, requiring Symfony's Config component. This snippet demonstrates input parameterization with default settings; the end() calls maintain correct tree hierarchy. Applies to configuration arrays, with validation ensuring type and default enforcement.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/config/definition.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$rootNode\n    ->children()\n        ->booleanNode('auto_connect')\n            ->defaultTrue()\n        ->end()\n        ->scalarNode('default_connection')\n            ->defaultValue('mysql')\n        ->end()\n        ->stringNode('username')\n            ->defaultValue('root')\n        ->end()\n        ->stringNode('password')\n            ->defaultValue('root')\n        ->end()\n    ->end()\n;\n```\n\n----------------------------------------\n\nTITLE: Writing to Array Properties with Adder/Remover Methods in PHP\nDESCRIPTION: Demonstrates how PropertyAccessor updates array properties by automatically using adder and remover methods, which are detected by the singular form of the property name.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/property_access.rst#2025-04-22_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nclass Person\n{\n    /**\n     * @var string[]\n     */\n    private array $children = [];\n\n    public function getChildren(): array\n    {\n        return $this->children;\n    }\n\n    public function addChild(string $name): void\n    {\n        $this->children[$name] = $name;\n    }\n\n    public function removeChild(string $name): void\n    {\n        unset($this->children[$name]);\n    }\n}\n\n$person = new Person();\n$propertyAccessor->setValue($person, 'children', ['kevin', 'wouter']);\n\nvar_dump($person->getChildren()); // ['kevin', 'wouter']\n```\n\n----------------------------------------\n\nTITLE: Customizing Target Redirect Route on switch_user (YAML)\nDESCRIPTION: Sets a specific redirection target (app_user_dashboard) to be used after switching user, in stateful firewalls. Configured in YAML (config/packages/security.yaml) under switch_user with the target_route option. This controls user experience post-impersonation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/impersonating_user.rst#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\\nsecurity:\\n    # ...\\n\\n    firewalls:\\n        main:\\n            # ...\\n            switch_user: { target_route: app_user_dashboard }\n```\n\n----------------------------------------\n\nTITLE: Custom Progress Bar Format Definition\nDESCRIPTION: Example of creating and using custom progress bar formats, including global format definitions.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/helpers/progressbar.rst#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nProgressBar::setFormatDefinition('minimal', 'Progress: %percent%%');\n\n$progressBar = new ProgressBar($output, 3);\n$progressBar->setFormat('minimal');\n```\n\n----------------------------------------\n\nTITLE: Modifying Bootstrap File for Cache Clearing in Symfony Tests\nDESCRIPTION: This code snippet shows how to modify the tests/bootstrap.php file to clear the cache before running tests. It adds a passthru function that executes the 'php bin/console cache:clear' command.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/testing/bootstrap.rst#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n  // tests/bootstrap.php\n  use Symfony\\Component\\Dotenv\\Dotenv;\n\n  require dirname(__DIR__).'/vendor/autoload.php';\n\n  if (file_exists(dirname(__DIR__).'/config/bootstrap.php')) {\n      require dirname(__DIR__).'/config/bootstrap.php';\n  } elseif (method_exists(Dotenv::class, 'bootEnv')) {\n      (new Dotenv())->bootEnv(dirname(__DIR__).'/.env');\n  }\n\n+ // executes the \"php bin/console cache:clear\" command\n+ passthru(sprintf(\n+   'APP_ENV=%s php \"%s/../bin/console\" cache:clear --no-warmup',\n+   $_ENV['APP_ENV'],\n+   __DIR__\n+ ));\n```\n\n----------------------------------------\n\nTITLE: Retrieving Doctrine Entity Metadata with DoctrineExtractor (Symfony PHP)\nDESCRIPTION: This snippet shows how to configure Doctrine ORM and instantiate Symfony\\Bridge\\Doctrine\\PropertyInfo\\DoctrineExtractor to fetch property lists and type information from Doctrine-mapped entities. It uses the EntityManager and Setup::createAnnotationMetadataConfiguration to build the Doctrine context. The symfony/doctrine-bridge and doctrine/orm packages are required, and this extractor is not auto-registered with Symfony PropertyInfo.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/property_info.rst#2025-04-22_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Doctrine\\ORM\\EntityManager;\\nuse Doctrine\\ORM\\Tools\\Setup;\\nuse Symfony\\Bridge\\Doctrine\\PropertyInfo\\DoctrineExtractor;\\n\\n$config = Setup::createAnnotationMetadataConfiguration([__DIR__], true);\\n$entityManager = EntityManager::create([\\n    'driver' => 'pdo_sqlite',\\n    // ...\\n\n```\n\n----------------------------------------\n\nTITLE: Writing Time-Sensitive PHPUnit Tests with Symfony ClockSensitiveTrait\nDESCRIPTION: Illustrates how to write reliable time-sensitive tests using PHPUnit and Symfony's `ClockSensitiveTrait`. The trait's `mockTime()` method is used to freeze the clock at specific points (`2022-03-02` and `2023-06-02`) to test the behavior of a `MonthSensitive` class under controlled time conditions. Depends on PHPUnit, Symfony Clock component, and the class under test (`App\\TimeUtils\\MonthSensitive`).\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/clock.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n    namespace App\\Tests\\TimeUtils;\n\n    use App\\TimeUtils\\MonthSensitive;\n    use PHPUnit\\Framework\\TestCase;\n    use Symfony\\Component\\Clock\\Test\\ClockSensitiveTrait;\n\n    class MonthSensitiveTest extends TestCase\n    {\n        use ClockSensitiveTrait;\n\n        public function testIsWinterMonth(): void\n        {\n            $clock = static::mockTime(new \\DateTimeImmutable('2022-03-02'));\n\n            $monthSensitive = new MonthSensitive();\n            $monthSensitive->setClock($clock);\n\n            $this->assertTrue($monthSensitive->isWinterMonth());\n        }\n\n        public function testIsNotWinterMonth(): void\n        {\n            $clock = static::mockTime(new \\DateTimeImmutable('2023-06-02'));\n\n            $monthSensitive = new MonthSensitive();\n            $monthSensitive->setClock($clock);\n\n            $this->assertFalse($monthSensitive->isWinterMonth());\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Checking Script Code Existence using Symfony Intl in PHP\nDESCRIPTION: Illustrates how to check if a given Unicode ISO 15924 script code is valid using the `Scripts::exists()` static method. This returns a boolean and helps avoid `MissingResourceException` when retrieving script names.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/intl.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$isValidScript = Scripts::exists($scriptCode);\n```\n\n----------------------------------------\n\nTITLE: Configuring CardScheme Validation in YAML\nDESCRIPTION: YAML configuration example for applying the CardScheme constraint to validate VISA card numbers in a Transaction entity.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/CardScheme.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Transaction:\n    properties:\n        cardNumber:\n            - CardScheme:\n                schemes: [VISA]\n                message: Your credit card number is invalid.\n```\n\n----------------------------------------\n\nTITLE: Injecting Decorated Service in XML Configuration\nDESCRIPTION: Example showing how to manually inject the decorated service in XML configuration. The '.inner' reference is passed as an argument to the decorating service.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/service_decoration.rst#2025-04-22_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsd=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsd:schemaLocation=\"http://symfony.com/schema/dic/services https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"App\\Mailer\"/>\n\n        <service id=\"App\\DecoratingMailer\"\n            decorates=\"App\\Mailer\"\n        >\n            <!-- pass the old service as an argument -->\n            <argument type=\"service\" id=\".inner\"/>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Configuring UniqueEntity with PHP Attributes\nDESCRIPTION: Demonstrates how to configure unique entity validation using PHP attributes on an entity class. Configures unique validation for email and phoneNumber fields with null handling for phoneNumber.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/UniqueEntity.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\n#[ORM\\Entity]\n#[UniqueEntity(fields: ['email', 'phoneNumber'], ignoreNull: 'phoneNumber')]\nclass User\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Doctrine Entity Listener in PHP\nDESCRIPTION: Demonstrates how to configure a Doctrine entity listener using PHP. This example sets up a service for the UserChangedNotifier and tags it as an entity listener.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine/events.rst#2025-04-22_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n// config/services.php\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nuse App\\Entity\\User;\nuse App\\EventListener\\UserChangedNotifier;\n\nreturn static function (ContainerConfigurator $container): void {\n    $services = $container->services();\n\n    $services->set(UserChangedNotifier::class)\n        ->tag('doctrine.orm.entity_listener', [\n            'event' => 'postUpdate',\n            'entity' => User::class,\n            // 'lazy' => true,\n            // 'entity_manager' => 'custom',\n            // 'method' => 'checkUserChanges',\n        ]);\n};\n```\n\n----------------------------------------\n\nTITLE: Overriding getHeaders to Customize HTTP Header Output (Symfony BrowserKit, PHP)\nDESCRIPTION: Defines a getHeaders method that customizes how HTTP headers are constructed from the Request object, e.g., propagating an api_key to the outgoing request. Requires overriding in a Client subclass. Expects a Request object and returns an array suitable for header injection.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/browser_kit.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nprotected function getHeaders(Request $request): array\\n{\\n    $headers = parent::getHeaders($request);\\n    if (isset($request->getServer()['api_key'])) {\\n        $headers['api_key'] = $request->getServer()['api_key'];\\n    }\\n\\n    return $headers;\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Symfony UuidFactory with PHP\nDESCRIPTION: Shows how to configure the UuidFactory using PHP in a `config/packages/uid.php` file. It uses the `ContainerConfigurator` to set framework extension options for `uid`, defining default versions, namespaces, and nodes for UUID generation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/uid.rst#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/uid.php\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nreturn static function (ContainerConfigurator $container): void {\n    $services = $container->services()\n        ->defaults()\n        ->autowire()\n        ->autoconfigure();\n\n    $container->extension('framework', [\n        'uid' => [\n            'default_uuid_version' => 7,\n            'name_based_uuid_version' => 5,\n            'name_based_uuid_namespace' => '6ba7b810-9dad-11d1-80b4-00c04fd430c8',\n            'time_based_uuid_version' => 7,\n            'time_based_uuid_node' => 121212121212,\n        ],\n    ]);\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Object Properties via Magic __get() Method (PHP)\nDESCRIPTION: Demonstrates that `PropertyAccessor::getValue()` can utilize PHP's magic `__get()` method to retrieve property values if other methods (getters, issers, public properties) are not available. Implementing `__isset()` alongside `__get()` is required for this to work correctly.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/property_access.rst#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n// ...\nclass Person\n{\n    private array $children = [\n        'Wouter' => [...],\n    ];\n\n    public function __get($id): mixed\n    {\n        return $this->children[$id];\n    }\n\n    public function __isset($id): bool\n    {\n        return isset($this->children[$id]);\n    }\n}\n\n$person = new Person();\n\nvar_dump($propertyAccessor->getValue($person, 'Wouter')); // [...]\n```\n\n----------------------------------------\n\nTITLE: Configuring Workflow Metadata in XML\nDESCRIPTION: This XML configuration shows how to set metadata for a workflow, its places, and transitions. It includes examples of simple and complex metadata.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/workflow.rst#2025-04-22_snippet_24\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\"\n>\n    <framework:config>\n        <framework:workflow name=\"blog_publishing\">\n            <framework:metadata>\n                <framework:title>Blog Publishing Workflow</framework:title>\n            </framework:metadata>\n            <!-- ... -->\n            <framework:place name=\"draft\">\n                <framework:metadata>\n                    <framework:max-num-of-words>500</framework:max-num-of-words>\n                </framework:metadata>\n            </framework:place>\n            <!-- ... -->\n            <framework:transition name=\"to_review\">\n                <framework:from>draft</framework:from>\n                <framework:to>review</framework:to>\n                <framework:metadata>\n                    <framework:priority>0.5</framework:priority>\n                </framework:metadata>\n            </framework:transition>\n            <framework:transition name=\"publish\">\n                <framework:from>reviewed</framework:from>\n                <framework:to>published</framework:to>\n                <framework:metadata>\n                    <framework:hour_limit>20</framework:hour_limit>\n                    <framework:explanation>You can not publish after 8 PM.</framework:explanation>\n                </framework:metadata>\n            </framework:transition>\n        </framework:workflow>\n    </framework:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Getting the Original Impersonator User (PHP Service)\nDESCRIPTION: Demonstrates retrieving the original user (impersonator) from SwitchUserToken within a service class. The snippet checks if the current token is a SwitchUserToken and then gets the original user from it. Dependencies: Symfony Security and Token Storage. Intended for use within application services for advanced introspection.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/impersonating_user.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// src/Service/SomeService.php\\nnamespace App\\Service;\\n\\nuse Symfony\\Bundle\\SecurityBundle\\Security;\\nuse Symfony\\Component\\Security\\Core\\Authentication\\Token\\SwitchUserToken;\\n// ...\\n\\nclass SomeService\\n{\\n    public function __construct(\\n        private Security $security,\\n    ) {\\n    }\\n\\n    public function someMethod(): void\\n    {\\n        // ...\\n\\n        $token = $this->security->getToken();\\n\\n        if ($token instanceof SwitchUserToken) {\\n            $impersonatorUser = $token->getOriginalToken()->getUser();\\n        }\\n\\n        // ...\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to Factory Methods - Symfony PHP Configurator - php\nDESCRIPTION: Shows how to pass arguments to a factory method using Symfony's PHP service configuration. The factory is defined as an array of [service, method], and args() is used to inject required services (e.g., templating). Assumes relevant classes and services are present and autowiring is enabled if required.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/factories.rst#2025-04-22_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nuse App\\Email\\NewsletterManager;\nuse App\\Email\\NewsletterManagerFactory;\n\nreturn function(ContainerConfigurator $container): void {\n    $services = $container->services();\n\n    $services->set(NewsletterManager::class)\n        ->factory([service(NewsletterManagerFactory::class), 'createNewsletterManager'])\n        ->args([service('templating')])\n    ;\n};\n\n```\n\n----------------------------------------\n\nTITLE: Using Special Cron Aliases (@daily) for Scheduling in PHP\nDESCRIPTION: Shows how to use special predefined aliases like '@daily' instead of the full cron expression string when creating a `RecurringMessage` with `RecurringMessage::cron()` in PHP. These aliases represent common scheduling frequencies.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/scheduler.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nRecurringMessage::cron('@daily', new Message());\n```\n\n----------------------------------------\n\nTITLE: Setting Column Widths\nDESCRIPTION: Shows different methods to set column widths in a Symfony console table, including setting all widths at once or individual column widths.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/helpers/table.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$table->setColumnWidths([10, 0, 30]);\n$table->render();\n\n// Or set individual column widths\n$table->setColumnWidth(0, 10);\n$table->setColumnWidth(2, 30);\n$table->render();\n```\n\n----------------------------------------\n\nTITLE: Dumping an Object with Dynamic Properties using VarDumper (PHP)\nDESCRIPTION: Demonstrates how VarDumper displays dynamically added properties (properties not declared in the class definition). These properties are shown with their names enclosed in double quotes (`\"undeclaredProperty\"`). An instance of `DynamicPropertyExample` is created, a dynamic property is added, and then the object is dumped.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/var_dumper.rst#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nclass DynamicPropertyExample\n{\n    public string $declaredProperty = 'This property is declared in the class definition';\n}\n\n$var = new DynamicPropertyExample();\n$var->undeclaredProperty = 'Runtime added dynamic properties have `\"` around their name.';\ndump($var);\n```\n\n----------------------------------------\n\nTITLE: Configuring PasswordStrength Constraint with Custom Options\nDESCRIPTION: Shows how to set custom options for the PasswordStrength constraint, including minScore and custom message.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/PasswordStrength.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/User.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass User\n{\n    #[Assert\\PasswordStrength(\n        minScore: PasswordStrength::STRENGTH_VERY_STRONG, // Very strong password required\n        message: 'Your password is too easy to guess. Company\\'s security policy requires to use a stronger password.'\n    )]\n    protected $rawPassword;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AtLeastOneOf Constraint with PHP Attributes\nDESCRIPTION: Demonstrates using PHP attributes to apply AtLeastOneOf validation on password and grades properties of a Student entity. The password must contain '#' or be 10 characters long, while grades must have 3 elements or all be >= 5.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/AtLeastOneOf.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Student.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Student\n{\n    #[Assert\\AtLeastOneOf([\n        new Assert\\Regex('/#/'),\n        new Assert\\Length(min: 10),\n    ])]\n    protected string $plainPassword;\n\n    #[Assert\\AtLeastOneOf([\n        new Assert\\Count(min: 3),\n        new Assert\\All(\n            new Assert\\GreaterThanOrEqual(5)\n        ),\n    ])]\n    protected array $grades;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CommandBus with AutowireLocator\nDESCRIPTION: Example of using AutowireLocator attribute to inject command handlers into a CommandBus class.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/service_subscribers_locators.rst#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nnamespace App;\n\nuse App\\CommandHandler\\BarHandler;\nuse App\\CommandHandler\\FooHandler;\nuse Psr\\Container\\ContainerInterface;\nuse Symfony\\Component\\DependencyInjection\\Attribute\\AutowireLocator;\n\nclass CommandBus\n{\n    public function __construct(\n        #[AutowireLocator([\n            FooHandler::class,\n            BarHandler::class,\n        ])]\n        private ContainerInterface $handlers,\n    ) {\n    }\n\n    public function handle(Command $command): mixed\n    {\n        $commandClass = get_class($command);\n\n        if ($this->handlers->has($commandClass)) {\n            $handler = $this->handlers->get($commandClass);\n\n            return $handler->handle($command);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Guard Event Subscriber Implementation\nDESCRIPTION: Shows how to implement a guard event subscriber to control workflow transitions based on conditions.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/workflow.rst#2025-04-22_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\EventSubscriber;\n\nuse App\\Entity\\BlogPost;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\nuse Symfony\\Component\\Workflow\\Event\\GuardEvent;\n\nclass BlogPostReviewSubscriber implements EventSubscriberInterface\n{\n    public function guardReview(GuardEvent $event): void\n    {\n        /** @var BlogPost $post */\n        $post = $event->getSubject();\n        $title = $post->title;\n\n        if (empty($title)) {\n            $event->setBlocked(true, 'This blog post cannot be marked as reviewed because it has no title.');\n        }\n    }\n\n    public static function getSubscribedEvents(): array\n    {\n        return [\n            'workflow.blog_publishing.guard.to_review' => ['guardReview'],\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Serialized Output Example Using VarExporter - PHP\nDESCRIPTION: Represents the kind of PSR-2 compliant code that VarExporter produces during the export process of a complex object, showing how protected and private properties from a class hierarchy are hydrated. Depends on internal VarExporter classes for registry and hydration. Takes serialized class definitions and returns a reconstructed object structure with property maps, handling references and protected/private members.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/var_exporter.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn \\Symfony\\Component\\VarExporter\\Internal\\Hydrator::hydrate(\n    $o = [\n        clone (\\Symfony\\Component\\VarExporter\\Internal\\Registry::$prototypes['Symfony\\\\Component\\\\VarExporter\\\\Tests\\\\ConcreteClass'] ?? \\Symfony\\Component\\VarExporter\\Internal\\Registry::p('Symfony\\\\Component\\\\VarExporter\\\\Tests\\\\ConcreteClass')),\n    ],\n    null,\n    [\n        'Symfony\\\\Component\\\\VarExporter\\\\Tests\\\\AbstractClass' => [\n            'foo' => [\n                123,\n            ],\n            'bar' => [\n                234,\n            ],\n        ],\n    ],\n    $o[0],\n    []\n);\n```\n\n----------------------------------------\n\nTITLE: Optimized Cache Validation in Symfony Controller\nDESCRIPTION: Optimized implementation combining ETag and Last-Modified validation with early response for unmodified content.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/http_cache/validation.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Controller;\n\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass ArticleController extends AbstractController\n{\n    public function show(string $articleSlug, Request $request): Response\n    {\n        $article = ...;\n\n        $response = new Response();\n        $response->setEtag($article->computeETag());\n        $response->setLastModified($article->getPublishedAt());\n        $response->setPublic();\n\n        if ($response->isNotModified($request)) {\n            return $response;\n        }\n\n        $comments = ...;\n\n        return $this->render('article/show.html.twig', [\n            'article' => $article,\n            'comments' => $comments,\n        ], $response);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming Controller Result to Response in kernel.view Event Listener\nDESCRIPTION: PHP code snippet demonstrating how to transform a controller's return value into a Response object in a kernel.view event listener.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/events.rst#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Event\\ViewEvent;\n\npublic function onKernelView(ViewEvent $event): void\n{\n    $value = $event->getControllerResult();\n    $response = new Response();\n\n    // ... somehow customize the Response from the return value\n\n    $event->setResponse($response);\n}\n```\n\n----------------------------------------\n\nTITLE: Pruning ChainAdapter with Compatible and Incompatible Adapters in PHP\nDESCRIPTION: Shows how to create a ChainAdapter with both prunable and non-prunable adapters, and how to call the prune method. The prune call is delegated to all compatible cache adapters, while incompatible adapters are silently ignored.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/cache/adapters/chain_adapter.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Cache\\Adapter\\ApcuAdapter;\nuse Symfony\\Component\\Cache\\Adapter\\ChainAdapter;\nuse Symfony\\Component\\Cache\\Adapter\\FilesystemAdapter;\n\n$cache = new ChainAdapter([\n    new ApcuAdapter(),        // does NOT implement PruneableInterface\n    new FilesystemAdapter(),  // DOES implement PruneableInterface\n]);\n\n// prune will proxy the call to FilesystemAdapter while silently skip ApcuAdapter\n$cache->prune();\n```\n\n----------------------------------------\n\nTITLE: Configuring Setter Injection via Method Call in PHP\nDESCRIPTION: This PHP configuration snippet shows how to define a method call for setter injection using the PHP configuration format. It retrieves the service definition for `MessageGenerator` and uses the `call()` method to configure an invocation of `setLogger`, injecting the `logger` service.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/calls.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nuse App\\Service\\MessageGenerator;\n\nreturn function(ContainerConfigurator $container): void {\n    // ...\n\n    $services->set(MessageGenerator::class)\n        ->call('setLogger', [service('logger')]);\n};\n```\n\n----------------------------------------\n\nTITLE: Dumping Numeric Keys as Strings in YAML with PHP\nDESCRIPTION: Demonstrates how to force numeric keys to be dumped as strings in YAML using the Symfony YAML component. Uses the DUMP_NUMERIC_KEY_AS_STRING flag.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/yaml.rst#2025-04-22_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n$dumped = Yaml::dump([200 => 'foo']);\n// 200: foo\n\n$dumped = Yaml::dump([200 => 'foo'], 2, 4, Yaml::DUMP_NUMERIC_KEY_AS_STRING);\n// '200': foo\n```\n\n----------------------------------------\n\nTITLE: Handling HTTP Responses with Symfony HttpBrowser (PHP)\nDESCRIPTION: Shows how to handle HTTP responses when using the BrowserKit component. The example demonstrates accessing the last response from the browser and retrieving its contents.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/browser_kit.rst#2025-04-22_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$browser = new HttpBrowser(HttpClient::create());\n\n$browser->request('GET', 'https://foo.com');\n$response = $browser->getResponse();\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Client Retry Options in YAML\nDESCRIPTION: This snippet demonstrates how to configure retry options for failed HTTP requests in the Symfony framework configuration. It includes settings for retry delay, HTTP codes to retry, jitter, and maximum retries.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_48\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/framework.yaml\nframework:\n    # ...\n    http_client:\n        # ...\n        default_options:\n            retry_failed:\n                # retry_strategy: app.custom_strategy\n                http_codes:\n                    0: ['GET', 'HEAD']   # retry network errors if request method is GET or HEAD\n                    429: true            # retry all responses with 429 status code\n                    500: ['GET', 'HEAD']\n                max_retries: 2\n                delay: 1000\n                multiplier: 3\n                max_delay: 5000\n                jitter: 0.3\n\n        scoped_clients:\n            my_api.client:\n                # ...\n                retry_failed:\n                    max_retries: 4\n```\n\n----------------------------------------\n\nTITLE: Defining an Invokable Factory - PHP - PHP\nDESCRIPTION: Defines an invokable factory class in PHP for Symfony, implementing the __invoke() method to return a NewsletterManager. This class enables its usage as a callable in the Symfony service container. Requires the NewsletterManager class and can be registered as a service for factory purposes.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/factories.rst#2025-04-22_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n// src/Email/InvokableNewsletterManagerFactory.php\nnamespace App\\Email;\n\n// ...\nclass InvokableNewsletterManagerFactory\n{\n    public function __invoke(): NewsletterManager\n    {\n        $newsletterManager = new NewsletterManager();\n\n        // ...\n\n        return $newsletterManager;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Compact Dumping of Nested Mappings in YAML with PHP\nDESCRIPTION: Demonstrates how to produce a more compact output for collections of maps in YAML using the Symfony YAML component. Uses the DUMP_COMPACT_NESTED_MAPPING flag.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/yaml.rst#2025-04-22_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\nplanets:\n  -\n    name: Mercury\n    distance: 57910000\n  -\n    name: Jupiter\n    distance: 778500000\n```\n\nLANGUAGE: yaml\nCODE:\n```\nplanets:\n  - name: Mercury\n    distance: 57910000\n  - name: Jupiter\n    distance: 778500000\n```\n\n----------------------------------------\n\nTITLE: Defining an Anonymous Service Factory in YAML for Symfony\nDESCRIPTION: Configures a service App\\Foo in YAML to use a factory method where the factory itself is an anonymous service (App\\FooFactory) and the method is 'constructFoo'. Dependencies: Symfony DependencyInjection, YAML configuration. The 'factory' key takes an array with a !service inline factory and method name string. Limitation: anonymous factory services need explicit autowiring if required.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/alias_private.rst#2025-04-22_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\\nservices:\\n    App\\\\Foo:\\n        factory: [ !service { class: App\\\\FooFactory }, 'constructFoo' ]\n```\n\n----------------------------------------\n\nTITLE: Debugging Serialization Metadata with Command Line\nDESCRIPTION: Shows how to use the debug:serializer command to inspect serialization metadata for a class.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer.rst#2025-04-22_snippet_53\n\nLANGUAGE: bash\nCODE:\n```\n$ php bin/console debug:serializer 'App\\Entity\\Book'\n```\n\n----------------------------------------\n\nTITLE: Setting up MongoDbStore for MongoDB-based Locks in Symfony\nDESCRIPTION: Example showing how to configure a MongoDbStore for MongoDB-based lock persistence. The code includes connection options and TTL index configuration. This store doesn't support blocking and requires a TTL to avoid stalled locks.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/lock.rst#2025-04-22_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Lock\\Store\\MongoDbStore;\n\n$mongo = 'mongodb://localhost/database?collection=lock';\n$options = [\n    'gcProbability' => 0.001,\n    'database' => 'myapp',\n    'collection' => 'lock',\n    'uriOptions' => [],\n    'driverOptions' => [],\n];\n$store = new MongoDbStore($mongo, $options);\n```\n\n----------------------------------------\n\nTITLE: Enabling and Using Magic __call() Method with PropertyAccessor (PHP)\nDESCRIPTION: Shows how to enable the use of the magic `__call()` method via `PropertyAccessorBuilder::enableMagicCall()`. `PropertyAccessor::getValue()` can then invoke `__call()` to simulate getter methods (e.g., calling `getWouter()` when accessing the `wouter` path). This feature is disabled by default.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/property_access.rst#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n// ...\nclass Person\n{\n    private array $children = [\n        'wouter' => [...],\n    ];\n\n    public function __call($name, $args): mixed\n    {\n        $property = lcfirst(substr($name, 3));\n        if ('get' === substr($name, 0, 3)) {\n            return $this->children[$property] ?? null;\n        } elseif ('set' === substr($name, 0, 3)) {\n            $value = 1 == count($args) ? $args[0] : null;\n            $this->children[$property] = $value;\n        }\n    }\n}\n\n$person = new Person();\n\n// enables PHP __call() magic method\n$propertyAccessor = PropertyAccess::createPropertyAccessorBuilder()\n    ->enableMagicCall()\n    ->getPropertyAccessor();\n\nvar_dump($propertyAccessor->getValue($person, 'wouter')); // [...]\n```\n\n----------------------------------------\n\nTITLE: ContentLengthListener Class Implementation\nDESCRIPTION: Event listener class that sets the Content-Length header for responses that don't already have it.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/create_framework/event_dispatcher.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nnamespace Simplex;\n\nclass ContentLengthListener\n{\n    public function onResponse(ResponseEvent $event): void\n    {\n        $response = $event->getResponse();\n        $headers = $response->headers;\n\n        if (!$headers->has('Content-Length') && !$headers->has('Transfer-Encoding')) {\n            $headers->set('Content-Length', strlen($response->getContent()));\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Forcing Dependency Reinstallation and Flex Config Generation (terminal)\nDESCRIPTION: Removes all vendor packages and reinstalls dependencies, ensuring Flex generates configuration files (within config/) as required. Use with caution, as it will delete the vendor/ directory; suitable when composer.json already uses component packages. Prerequisite: Existing Symfony project adopting Flex.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/flex.rst#2025-04-22_snippet_5\n\nLANGUAGE: terminal\nCODE:\n```\n$ rm -rf vendor/*\n$ composer install\n```\n\n----------------------------------------\n\nTITLE: Configuring Git to Fetch GitHub Pull Request Notes\nDESCRIPTION: Shows the configuration setting to add to the local `.git/config` file. This line instructs Git to fetch all references under `refs/notes/*` (where GitHub comments are stored for Symfony PRs merged after March 22, 2013) and map them to the local `refs/notes/*` namespace, making the PR discussion accessible locally.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/contributing/code/git.rst#2025-04-22_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nfetch = +refs/notes/*:refs/notes/*\n```\n\n----------------------------------------\n\nTITLE: Ordinal Translations in Symfony with YAML\nDESCRIPTION: Shows how to use the selectordinal function in YAML format for Symfony translations. The example formats a place number as an ordinal.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/formats/message_format.rst#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n# translations/messages+intl-icu.en.yaml\\nfinish_place: >-\\n    You finished {place, selectordinal,\\n        one   {#st}\\n        two   {#nd}\\n        few   {#rd}\\n        other {#th}\\n    }!\\n\\n# when only formatting the number as ordinal (like above), you can also\\n# use the `ordinal` function:\\nfinish_place: You finished {place, ordinal}!\n```\n\n----------------------------------------\n\nTITLE: Configuring Database URL in Symfony\nDESCRIPTION: Environment variable configuration for database connection in .env file\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine/dbal.rst#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n# .env (or override DATABASE_URL in .env.local to avoid committing your changes)\n\n# customize this line!\nDATABASE_URL=\"mysql://db_user:db_password@127.0.0.1:3306/db_name?serverVersion=8.0.37\"\n```\n\n----------------------------------------\n\nTITLE: Implementing NEON Encoder Class in PHP\nDESCRIPTION: Class implementing both EncoderInterface and DecoderInterface to handle NEON format serialization and deserialization. Provides methods for encoding/decoding data and checking format support.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer/encoders.rst#2025-04-22_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nclass NeonEncoder implements EncoderInterface, DecoderInterface\n{\n    public function encode($data, string $format, array $context = [])\n    {\n        return Neon::encode($data);\n    }\n\n    public function supportsEncoding(string $format)\n    {\n        return 'neon' === $format;\n    }\n\n    public function decode(string $data, string $format, array $context = [])\n    {\n        return Neon::decode($data);\n    }\n\n    public function supportsDecoding(string $format)\n    {\n        return 'neon' === $format;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using LessThan Constraint with Relative Dates in PHP Code\nDESCRIPTION: Example of using the LessThan constraint with relative dates in PHP code to validate that a person is at least 18 years old.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/LessThan.rst#2025-04-22_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Person.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Person\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('dateOfBirth', new Assert\\LessThan('-18 years'));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing OidcUserProvider in PHP\nDESCRIPTION: This snippet shows how to implement the AttributesBasedUserProviderInterface for OIDC user authentication. The loadUserByIdentifier method needs to be implemented with custom logic to load and return the user object.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/access_token.rst#2025-04-22_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n// src/Security/Core/User/OidcUserProvider.php\nuse Symfony\\Component\\Security\\Core\\User\\AttributesBasedUserProviderInterface;\n\nclass OidcUserProvider implements AttributesBasedUserProviderInterface\n{\n    public function loadUserByIdentifier(string $identifier, array $attributes = []): UserInterface\n    {\n        // implement your own logic to load and return the user object\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of csrf_token() in Twig\nDESCRIPTION: This snippet shows a practical example of calling the `csrf_token` function with the intention 'my_form'. The output is a unique, pseudo-random string which serves as the CSRF token for forms associated with this intention.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#2025-04-22_snippet_10\n\nLANGUAGE: twig\nCODE:\n```\n{{ csrf_token('my_form') }}\n{# output: a random alphanumeric string like:\n   a.YOosAd0fhT7BEuUCFbROzrvgkW8kpEmBDQ_DKRMUi2o.Va8ZQKt5_2qoa7dLW-02_PLYwDBx9nnWOluUHUFCwC5Zo0VuuVfQCqtngg #}\n```\n\n----------------------------------------\n\nTITLE: Converting Stopwatch Event to String\nDESCRIPTION: Shows how to get an event from the Stopwatch and convert it to a string for a quick summary of memory usage and execution time.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/performance.rst#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n// ...\ndump((string) $this->stopwatch->getEvent('export-data')); // dumps e.g. '4.50 MiB - 26 ms'\n```\n\n----------------------------------------\n\nTITLE: String Padding and Trimming Methods in Symfony\nDESCRIPTION: Shows various methods for padding strings to a specific length and trimming characters from strings, including specific prefix and suffix removal.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/string.rst#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nu(' Lorem Ipsum ')->padBoth(20, '-'); // '--- Lorem Ipsum ----'\nu(' Lorem Ipsum')->padStart(20, '-'); // '-------- Lorem Ipsum'\nu('Lorem Ipsum ')->padEnd(20, '-');   // 'Lorem Ipsum --------'\n\nu('_.')->repeat(10); // '_._._._._._._._._._.' \n\nu('   Lorem Ipsum   ')->trim(); // 'Lorem Ipsum'\nu('Lorem Ipsum   ')->trim('m'); // 'Lorem Ipsum   '\nu('Lorem Ipsum')->trim('m');    // 'Lorem Ipsu'\n\nu('   Lorem Ipsum   ')->trimStart(); // 'Lorem Ipsum   '\nu('   Lorem Ipsum   ')->trimEnd();   // '   Lorem Ipsum'\n\nu('file-image-0001.png')->trimPrefix('file-');           // 'image-0001.png'\nu('file-image-0001.png')->trimPrefix('image-');          // 'file-image-0001.png'\nu('file-image-0001.png')->trimPrefix('file-image-');     // '0001.png'\nu('template.html.twig')->trimSuffix('.html');            // 'template.html.twig'\nu('template.html.twig')->trimSuffix('.twig');            // 'template.html'\nu('template.html.twig')->trimSuffix('.html.twig');       // 'template'\n\nu('file-image-0001.png')->trimPrefix(['file-', 'image-']); // 'image-0001.png'\nu('template.html.twig')->trimSuffix(['.twig', '.html']);   // 'template.html'\n```\n\n----------------------------------------\n\nTITLE: Tagging a Locale Aware Service with kernel.locale_aware in XML\nDESCRIPTION: Shows the XML equivalent for registering the `App\\Locale\\MyCustomLocaleHandler` service and applying the `kernel.locale_aware` tag within the service container configuration. This informs the Symfony kernel that this service needs its locale managed.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/dic_tags.rst#2025-04-22_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"App\\Locale\\MyCustomLocaleHandler\">\n            <tag name=\"kernel.locale_aware\"/>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Using logout_path() for Specific Firewalls in Twig\nDESCRIPTION: These examples demonstrate calling `logout_path` with the `key` parameter to target specific firewalls ('main' and 'othername') defined in the security configuration. The output shows the corresponding relative logout paths ('/logout' and '/other/logout').\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#2025-04-22_snippet_15\n\nLANGUAGE: twig\nCODE:\n```\n{{ logout_path(key = 'main') }}\n{# output: /logout #}\n\n{{ logout_path(key = 'othername') }}\n{# output: /other/logout #}\n```\n\n----------------------------------------\n\nTITLE: Converting Absolute to Relative File Paths using Symfony Path (PHP)\nDESCRIPTION: This usage of Path::makeRelative demonstrates computing the relative path from one base directory to a target file, with logic to prepend '..' segments when necessary. Both base and target paths are canonicalized. Prerequisite: Symfony\\Component\\Filesystem\\Path. Parameters: absolute target path, base path. Output: relative canonical path.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/filesystem.rst#2025-04-22_snippet_23\n\nLANGUAGE: php\nCODE:\n```\necho Path::makeRelative('/var/www/project/config/config.yaml', '/var/www/project');\n// => config/config.yaml\n```\n\nLANGUAGE: php\nCODE:\n```\necho Path::makeRelative('/var/www/project/config/config.yaml', '/var/www/project/uploads');\n// => ../config/config.yaml\n```\n\n----------------------------------------\n\nTITLE: Validating Currency Codes with Symfony Intl\nDESCRIPTION: Example showing how to check if a currency code is valid using the Currencies::exists method as an alternative to catching MissingResourceException.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/intl.rst#2025-04-22_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$isValidCurrency = Currencies::exists($currencyCode);\n```\n\n----------------------------------------\n\nTITLE: Chaining Multiple Symfony Context Builders for Complex Contexts in PHP\nDESCRIPTION: This PHP example demonstrates how to chain multiple context builders (ObjectNormalizerContextBuilder and CsvEncoderContextBuilder) to create a complex serialization context. It starts with a custom array, adds group-based settings, and specifies a delimiter for CSV output. This is useful for advanced serialization scenarios requiring layered configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer.rst#2025-04-22_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Serializer\\Context\\Encoder\\CsvEncoderContextBuilder;\nuse Symfony\\Component\\Serializer\\Context\\Normalizer\\ObjectNormalizerContextBuilder;\n\n$initialContext = [\n    'custom_key' => 'custom_value',\n];\n\n$contextBuilder = (new ObjectNormalizerContextBuilder())\n    ->withContext($initialContext)\n    ->withGroups(['group1', 'group2']);\n\n$contextBuilder = (new CsvEncoderContextBuilder())\n    ->withContext($contextBuilder)\n    ->withDelimiter(';');\n\n$serializer->serialize($something, 'csv', $contextBuilder->toArray());\n```\n\n----------------------------------------\n\nTITLE: Configuring Type Validation Using YAML in Symfony\nDESCRIPTION: YAML configuration example for the Type constraint in Symfony's validator component. Demonstrates how to validate properties for different types including object instances, strings, and integers.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Type.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Author:\n    properties:\n        emailAddress:\n            - Type: Symfony\\Component\\Mime\\Address\n\n        firstName:\n            - Type: string\n\n        age:\n            - Type:\n                type: integer\n                message: The value {{ value }} is not a valid {{ type }}.\n\n        accessCode:\n            - Type:\n                type: [alpha, digit]\n```\n\n----------------------------------------\n\nTITLE: Deprecating Container Parameters in Symfony\nDESCRIPTION: Shows how to deprecate a parameter in Symfony's dependency injection container with the deprecateParameter method, which requires setting the parameter before deprecating it.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/dependency_injection/compilation.rst#2025-04-22_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$containerBuilder->deprecateParameter(\n    'acme_demo.database_user',\n    'acme/database-package',\n    '1.3',\n    // optionally you can set a custom deprecation message\n    '\"acme_demo.database_user\" is deprecated, you should configure database credentials with the \"acme_demo.database_dsn\" parameter instead.'\n);\n```\n\n----------------------------------------\n\nTITLE: Sending Desktop Notifications in Symfony\nDESCRIPTION: Example of a service class that sends desktop notifications using Symfony's Notifier component.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/notifier.rst#2025-04-22_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n// src/Notifier/SomeService.php\nuse Symfony\\Component\\Notifier\\Message\\DesktopMessage;\nuse Symfony\\Component\\Notifier\\TexterInterface;\n// ...\n\nclass SomeService\n{\n    public function __construct(\n        private TexterInterface $texter,\n    ) {\n    }\n\n    public function notifyNewSubscriber(User $user): void\n    {\n        $message = new DesktopMessage(\n            'New subscription! 🎉',\n            sprintf('%s is a new subscriber', $user->getFullName())\n        );\n\n        $this->texter->send($message);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Transport in Messenger XML Configuration\nDESCRIPTION: XML configuration for defining a custom transport in the Messenger component. This registers the transport with the name 'yours' and the custom DSN format.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/messenger/custom-transport.rst#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/messenger.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony\n        https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <framework:config>\n        <framework:messenger>\n            <framework:transport name=\"yours\" dsn=\"my-transport://...\"/>\n        </framework:messenger>\n    </framework:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Setting Validation Groups in Controller Form Creation\nDESCRIPTION: Shows how to specify validation groups when creating a form builder in a controller. This approach allows you to define which validation constraints should be applied during form validation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/validation_groups.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$form = $this->createFormBuilder($user, [\n    'validation_groups' => ['registration'],\n])->add(/* ... */);\n```\n\n----------------------------------------\n\nTITLE: Configuring Relative Dates with YAML\nDESCRIPTION: Example showing how to use YAML to configure the GreaterThanOrEqual constraint with a relative time expression to validate that a DateTime property is at least 5 hours in the future.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/GreaterThanOrEqual.rst#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Order:\n    properties:\n        deliveryDate:\n            - GreaterThanOrEqual: +5 hours\n```\n\n----------------------------------------\n\nTITLE: Adding Dynamic Route Parameters\nDESCRIPTION: Shows how to create a route with a dynamic parameter and use it in the controller.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/quick_tour/the_big_picture.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/DefaultController.php\nnamespace App\\Controller;\n\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Attribute\\Route;\n\nclass DefaultController\n{\n    #[Route('/hello/{name}', name: 'index')]\n    public function index(string $name): Response\n    {\n        return new Response(\"Hello $name!\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Adapters in YAML\nDESCRIPTION: YAML configuration for setting up cache adapters for app and system caches in Symfony.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/cache.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/cache.yaml\nframework:\n    cache:\n        app: cache.adapter.filesystem\n        system: cache.adapter.system\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Cache Invalidation Kernel in PHP\nDESCRIPTION: Custom CacheKernel class that extends Symfony's HttpCache to handle PURGE requests for cache invalidation. It validates requests from localhost and manages cache purging responses.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/http_cache/cache_invalidation.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/CacheKernel.php\nnamespace App;\n\nuse Symfony\\Bundle\\FrameworkBundle\\HttpCache\\HttpCache;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n// ...\n\nclass CacheKernel extends HttpCache\n{\n    protected function invalidate(Request $request, bool $catch = false): Response\n    {\n        if ('PURGE' !== $request->getMethod()) {\n            return parent::invalidate($request, $catch);\n        }\n\n        if ('127.0.0.1' !== $request->getClientIp()) {\n            return new Response(\n                'Invalid HTTP method',\n                Response::HTTP_BAD_REQUEST\n            );\n        }\n\n        $response = new Response();\n        if ($this->getStore()->purge($request->getUri())) {\n            $response->setStatusCode(Response::HTTP_OK, 'Purged');\n        } else {\n            $response->setStatusCode(Response::HTTP_NOT_FOUND, 'Not found');\n        }\n\n        return $response;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony Mime Component using Composer\nDESCRIPTION: Command to install the Symfony Mime component via Composer. This adds the necessary dependency to the project.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/mime.rst#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require symfony/mime\n```\n\n----------------------------------------\n\nTITLE: Rendering a RepeatedType Field in Twig\nDESCRIPTION: Shows how to render the entire `RepeatedType` field (both sub-fields) at once using the `form_row` Twig function in a Symfony template. This assumes `form.password` represents the `RepeatedType` field object passed to the template.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/repeated.rst#2025-04-22_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ form_row(form.password) }}\n```\n\n----------------------------------------\n\nTITLE: Including Default Entity Constraints with Custom Validation Groups in Symfony Forms\nDESCRIPTION: This snippet shows how to include the default entity constraints along with custom validation groups. It uses a Closure to determine the groups based on the client type and adds the 'Default' group to ensure default constraints are validated.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/data_based_validation.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Entity\\Client;\nuse Symfony\\Component\\Form\\FormInterface;\nuse Symfony\\Component\\OptionsResolver\\OptionsResolver;\n\n// ...\npublic function configureOptions(OptionsResolver $resolver): void\n{\n    $resolver->setDefaults([\n        'validation_groups' => function (FormInterface $form): array {\n            $data = $form->getData();\n\n            if (Client::TYPE_PERSON == $data->getType()) {\n                return ['Default', 'person'];\n            }\n\n            return ['Default', 'company'];\n        },\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Loco Translation Provider in Symfony XML\nDESCRIPTION: Shows how to configure the Loco translation provider in the Symfony XML configuration, including setting the DSN, domains, and locales.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/translation.rst#2025-04-22_snippet_22\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/translation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony\n        https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <framework:config>\n        <framework:translator>\n            <framework:provider name=\"loco\" dsn=\"%env(LOCO_DSN)%\">\n                <framework:domain>messages</framework:domain>\n                <!-- ... -->\n                <framework:locale>en</framework:locale>\n                <framework:locale>fr</framework:locale>\n                <!-- ... -->\n            </framework:provider>\n        </framework:translator>\n    </framework:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Adding Remember Me Support to Custom Symfony Authenticator (PHP)\nDESCRIPTION: This PHP code demonstrates how to add a RememberMeBadge in a custom Symfony authenticator by returning it in the array of badges on the Passport object. It shows the implementation within a custom class, ensuring that the custom authentication flow issues the badge needed for 'remember me' to work. Dependencies include proper use of Symfony components, especially Passport, RememberMeBadge, UserBadge, PasswordCredentials, and correct placement of this logic in a custom service. This is essential when building your own authenticators instead of using the built-in ones.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/remember_me.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// src/Service/LoginAuthenticator.php\nnamespace App\\Service;\n\n// ...\nuse Symfony\\Component\\Security\\Http\\Authenticator\\Passport\\Badge\\RememberMeBadge;\nuse Symfony\\Component\\Security\\Http\\Authenticator\\Passport\\Badge\\UserBadge;\nuse Symfony\\Component\\Security\\Http\\Authenticator\\Passport\\Passport;\n\nclass LoginAuthenticator extends AbstractAuthenticator\n{\n    public function authenticate(Request $request): Passport\n    {\n        // ...\n\n        return new Passport(\n            new UserBadge(...),\n            new PasswordCredentials(...),\n            [\n                new RememberMeBadge(),\n            ]\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Image Constraint with PHP Code\nDESCRIPTION: Manually configuring the Image validation constraint using PHP code by implementing the loadValidatorMetadata method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Image.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Author.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Author\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('headshot', new Assert\\Image(\n            minWidth: 200,\n            maxWidth: 400,\n            minHeight: 200,\n            maxHeight: 400,\n        ));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Currency Fraction Digits using Symfony Intl in PHP\nDESCRIPTION: Shows how to get the standard number of fraction digits and the number of fraction digits used for cash transactions for specific currencies (INR, SEK) using `Currencies::getFractionDigits()` and `Currencies::getCashFractionDigits()`. This demonstrates that these values can differ between currencies and transaction types.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/intl.rst#2025-04-22_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n// Indian rupee defines the same value for both\n$fractionDigits = Currencies::getFractionDigits('INR');         // returns: 2\n$cashFractionDigits = Currencies::getCashFractionDigits('INR'); // returns: 2\n\n// Swedish krona defines different values\n$fractionDigits = Currencies::getFractionDigits('SEK');         // returns: 2\n$cashFractionDigits = Currencies::getCashFractionDigits('SEK'); // returns: 0\n```\n\n----------------------------------------\n\nTITLE: Accessing Array Query Parameters using all() in PHP\nDESCRIPTION: Demonstrates how to access query parameters that are structured as arrays (e.g., `foo[bar]=baz`). The `all('key')` method is used to retrieve the entire array associated with the base key, or `all()` without arguments to get all parameters, followed by array access. The `get()` method does not handle nested array parameters directly.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// the query string is '?foo[bar]=baz'\n\n// don't use $request->query->get('foo'); use the following instead:\n$request->query->all('foo');\n// returns ['bar' => 'baz']\n\n// if the requested parameter does not exist, an empty array is returned:\n$request->query->all('qux');\n// returns []\n\n$request->query->get('foo[bar]');\n// returns null\n\n$request->query->all()['foo']['bar'];\n// returns 'baz'\n```\n\n----------------------------------------\n\nTITLE: Rendering Controllers/URIs with ESI using Twig\nDESCRIPTION: Similar to the `render` function, `render_esi` executes a sub-request but specifically generates an ESI (Edge Side Includes) tag if ESI support is enabled in the Symfony application configuration. If ESI is not enabled, it falls back to the default behavior of the `render` function. It accepts the same `uri` and `options` arguments. It is a shortcut function that automatically sets the strategy.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#2025-04-22_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ render_esi(uri, options = []) }}\n```\n\n----------------------------------------\n\nTITLE: Overriding a Secret Locally in Symfony (terminal)\nDESCRIPTION: Shows the command to override a secret's value for local development using the --local option. The value is stored in a .env.{env}.local file as an environment variable and will override the vault value at runtime.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/secrets.rst#2025-04-22_snippet_9\n\nLANGUAGE: terminal\nCODE:\n```\n$ php bin/console secrets:set DATABASE_PASSWORD --local\n```\n\n----------------------------------------\n\nTITLE: Using Variable References in .env Files\nDESCRIPTION: Demonstrates how to reference other environment variables within .env file values by prefixing variable names with $. This allows for more dynamic configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration.rst#2025-04-22_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nDB_USER=root\nDB_PASS=${DB_USER}pass # include the user as a password prefix\n```\n\n----------------------------------------\n\nTITLE: Defining Ip Constraint with PHP Attributes\nDESCRIPTION: Example of using the Ip constraint with PHP attributes in a Symfony entity class. This snippet shows how to apply the Ip validation to an 'ipAddress' property.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Ip.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Author.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Author\n{\n    #[Assert\\Ip]\n    protected string $ipAddress;\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding PHP Configuration Options\nDESCRIPTION: Example of creating a project-specific php.ini file to override default PHP configuration settings.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/symfony_server.rst#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ cd my-project/\n\n# this project only overrides the default PHP timezone\n$ cat php.ini\n[Date]\ndate.timezone = Asia/Tokyo\n```\n\n----------------------------------------\n\nTITLE: Configuring Getter Constraints with YAML in Symfony\nDESCRIPTION: Shows how to configure a validation constraint for a getter method using YAML format in Symfony. It applies an IsTrue constraint to ensure password safety.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/validation.rst#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Author:\n    getters:\n        passwordSafe:\n            - 'IsTrue': { message: 'The password cannot match your first name' }\n```\n\n----------------------------------------\n\nTITLE: Triggering Potential Error with array_replace Approach in PHP\nDESCRIPTION: This PHP code snippet shows how instantiating the `Mailer` class (which uses `array_replace` for defaults) with a misspelled option key ('usernme' instead of 'username') does not produce an error. The misspelled option is simply ignored, potentially leading to bugs.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/options_resolver.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$mailer = new Mailer([\n    'usernme' => 'johndoe',  // 'username' is wrongly spelled as 'usernme'\n]);\n```\n\n----------------------------------------\n\nTITLE: Handling Uninitialized Properties in PHP\nDESCRIPTION: Example showing how to handle uninitialized typed properties during serialization using ObjectNormalizer with SKIP_UNINITIALIZED_VALUES context option.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer.rst#2025-04-22_snippet_55\n\nLANGUAGE: php\nCODE:\n```\nclass Person {\n    public string $name = 'Jane Doe';\n    public string $phoneNumber; // uninitialized\n}\n\n$jsonContent = $normalizer->serialize(new Dummy(), 'json', [\n    AbstractObjectNormalizer::SKIP_UNINITIALIZED_VALUES => false,\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Invokable Factory Service - Symfony XML - xml\nDESCRIPTION: Sets up a service definition for a NewsletterManager in XML, configuring it to use an invokable factory by specifying the factory service and omitting the method. The XML adheres to Symfony's DI schema, and the factory service must be available in the container.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/factories.rst#2025-04-22_snippet_17\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <!-- ... -->\n\n        <service id=\"App\\Email\\NewsletterManager\"\n                 class=\"App\\Email\\NewsletterManager\">\n            <factory service=\"App\\Email\\InvokableNewsletterManagerFactory\"/>\n        </service>\n    </services>\n</container>\n\n```\n\n----------------------------------------\n\nTITLE: Customizing PostCSS Loader Options in Webpack Encore\nDESCRIPTION: This code snippet demonstrates how to pass custom options to the postcss-loader in the webpack.config.js file, including specifying a custom configuration file location.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/postcss.rst#2025-04-22_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n  // webpack.config.js\n+ const path = require('path');\n\n  Encore\n      // ...\n+     .enablePostCssLoader((options) => {\n+         options.postcssOptions = {\n+             // the directory where the postcss.config.js file is stored\n+             config: path.resolve(__dirname, 'sub-dir', 'custom.config.js'),\n+         };\n+     })\n  ;\n```\n\n----------------------------------------\n\nTITLE: Initializing Subscribed Services with Autowiring\nDESCRIPTION: Example of defining subscribed services using different autowiring attributes including Target, AutowireIterator, and AutowireLocator.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/service_subscribers_locators.rst#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nnew SubscribedService('env', 'string', attributes: new Autowire('%kernel.environment%')),\n\n// Target\nnew SubscribedService('event.logger', LoggerInterface::class, attributes: new Target('eventLogger')),\n\n// AutowireIterator\nnew SubscribedService('loggers', 'iterable', attributes: new AutowireIterator('logger.tag')),\n\n// AutowireLocator\nnew SubscribedService('handlers', ContainerInterface::class, attributes: new AutowireLocator('handler.tag')),\n```\n\n----------------------------------------\n\nTITLE: Defining a PHP Enum for Use in Symfony Enum Node Constraints\nDESCRIPTION: Defines a PHP backed enum called Delivery with string values to serve as possible options for Symfony enum nodes. Requires PHP 8.1+ and native enum features. Intended as a type-safe holder of allowed values, so they can be referenced directly when defining allowed enum values for configuration validation. Inputs: none; output: enum type usable in configuration constraints.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/config/definition.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nenum Delivery: string\n{\n    case Standard = 'standard';\n    case Expedited = 'expedited';\n    case Priority = 'priority';\n}\n\n```\n\n----------------------------------------\n\nTITLE: Registering Static Factory Service - XML Configuration\nDESCRIPTION: Shows how to register the NewsletterManager service using a static factory method via XML configuration in Symfony. The 'factory' element specifies both the class and method to use, matching the definition in the PHP factory. This configuration should be included in 'config/services.xml' and requires the NewsletterManagerStaticFactory class.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/factories.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"App\\Email\\NewsletterManager\">\n            <!-- the first argument is the class and the second argument is the static method -->\n            <factory class=\"App\\Email\\NewsletterManagerStaticFactory\" method=\"createNewsletterManager\"/>\n        </service>\n    </services>\n</container>\n\n```\n\n----------------------------------------\n\nTITLE: Throwing Exceptions on Invalid Type Parsing in PHP\nDESCRIPTION: Shows how to use the `Yaml::PARSE_EXCEPTION_ON_INVALID_TYPE` flag during parsing. Instead of converting invalid YAML types (like unrecognized tags) to `null`, this flag causes the parser to throw a `ParseException`.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/yaml.rst#2025-04-22_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$yaml = '!php/object \\'O:8:\"stdClass\":1:{s:5:\"foo\";s:7:\"bar\";}\\'';\nYaml::parse($yaml, Yaml::PARSE_EXCEPTION_ON_INVALID_TYPE); // throws an exception\n```\n\n----------------------------------------\n\nTITLE: DNS-Sensitive Test Example\nDESCRIPTION: Example of using DnsMock to test DNS-dependent code without making actual network connections.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/phpunit_bridge.rst#2025-04-22_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Validator\\DomainValidator;\nuse PHPUnit\\Framework\\TestCase;\nuse Symfony\\Bridge\\PhpUnit\\DnsMock;\n\n/**\n * @group dns-sensitive\n */\nclass DomainValidatorTest extends TestCase\n{\n    public function testEmails(): void\n    {\n        DnsMock::withMockedHosts([\n            'example.com' => [['type' => 'A', 'ip' => '1.2.3.4']],\n        ]);\n\n        $validator = new DomainValidator(['checkDnsRecord' => true]);\n        $isValid = $validator->validate('example.com');\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: PHPUnit Test for Simple PHP Application\nDESCRIPTION: A basic PHPUnit test case for the simple PHP application, demonstrating difficulties in testing such code.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/create_framework/http_foundation.rst#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n// framework/test.php\nuse PHPUnit\\Framework\\TestCase;\n\nclass IndexTest extends TestCase\n{\n    public function testHello(): void\n    {\n        $_GET['name'] = 'Fabien';\n\n        ob_start();\n        include 'index.php';\n        $content = ob_get_clean();\n\n        $this->assertEquals('Hello Fabien', $content);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Files by Size with Symfony Finder in PHP\nDESCRIPTION: Illustrates how to filter files based on their size using the `size()` method. It accepts comparison operators (>, >=, <, <=, ==, !=) and a target value with optional magnitude units (k, ki, m, mi, g, gi).\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/finder.rst#2025-04-22_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n$finder->files()->size('< 1.5K');\n```\n\n----------------------------------------\n\nTITLE: Configuring AcmeSocialBundle in YAML, XML, and PHP\nDESCRIPTION: This snippet demonstrates how to configure the AcmeSocialBundle using YAML, XML, and PHP formats. It shows the user-friendly configuration structure for setting Twitter client credentials.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/bundles/configuration.rst#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/acme_social.yaml\nacme_social:\n    twitter:\n        client_id: 123\n        client_secret: your_secret\n```\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/acme_social.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:acme-social=\"http://example.org/schema/dic/acme_social\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\"\n>\n    <acme-social:config>\n        <acme-social:twitter client-id=\"123\"\n            client-secret=\"your_secret\"\n        />\n    </acme-social:config>\n</container>\n```\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/acme_social.php\nuse Symfony\\Config\\AcmeSocialConfig;\n\nreturn static function (AcmeSocialConfig $acmeSocial): void {\n    $acmeSocial->twitter()\n        ->clientId(123)\n        ->clientSecret('your_secret');\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Monolog Handlers (YAML)\nDESCRIPTION: Example YAML configuration for setting up Monolog handlers in Symfony. Defines a stream handler for file logging and a syslog handler for system logging.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/logging.rst#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/prod/monolog.yaml\nmonolog:\n    handlers:\n        # this \"file_log\" key could be anything\n        file_log:\n            type: stream\n            # log to var/log/(environment).log\n            path: \"%kernel.logs_dir%/%kernel.environment%.log\"\n            # log *all* messages (debug is lowest level)\n            level: debug\n\n        syslog_handler:\n            type: syslog\n            # log error-level messages and higher\n            level: error\n```\n\n----------------------------------------\n\nTITLE: Customizing URL Validation Error Message with PHP Attributes in Symfony\nDESCRIPTION: Example of customizing the error message for URL validation using PHP attributes. This shows how to reference the invalid value in the message.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Url.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Author.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Author\n{\n    #[Assert\\Url(\n        message: 'The url {{ value }} is not a valid url',\n    )]\n    protected string $bioUrl;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Dependencies with NPM\nDESCRIPTION: Command to install essential React dependencies including react, react-dom, and prop-types using npm package manager.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/reactjs.rst#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ npm install react react-dom prop-types --save\n```\n\n----------------------------------------\n\nTITLE: Implementing MacAddress Constraint with PHP Metadata\nDESCRIPTION: Example demonstrating how to apply the MacAddress constraint using PHP metadata in a Device entity class.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/MacAddress.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Device.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Device\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('mac', new Assert\\MacAddress());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running PHPUnit Tests Using the Simple-PHPUnit Script in Terminal (Bash)\nDESCRIPTION: This snippet shows how to invoke the simple-phpunit wrapper script created by the Symfony PHPUnit Bridge. This script provides advanced features (such as accurate deprecation notices and polyfills) while running tests. Execute the command from the root of your project where the vendor/ directory is located. The script wraps the original PHPUnit and includes all bridge capabilities.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/phpunit_bridge.rst#2025-04-22_snippet_2\n\nLANGUAGE: terminal\nCODE:\n```\n$ cd my-project/\n$ ./vendor/bin/simple-phpunit\n```\n\n----------------------------------------\n\nTITLE: Configuring Webhook Routing for Mailer (PHP)\nDESCRIPTION: PHP configuration for setting up webhook routing for the Mailer component, using Mailgun as an example provider.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/webhook.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Webhook\\MailerWebhookParser;\nuse Symfony\\Config\\FrameworkConfig;\nreturn static function (FrameworkConfig $frameworkConfig): void {\n    $webhookConfig = $frameworkConfig->webhook();\n    $webhookConfig\n        ->routing('mailer_mailgun')\n        ->service('mailer.webhook.request_parser.mailgun')\n        ->secret('%env(MAILER_MAILGUN_SECRET)%')\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Advanced Composition of Stacked Decorators in YAML\nDESCRIPTION: This YAML configuration shows an advanced example of composing stacked decorators in Symfony, including embedded stacks and aliasing.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/service_decoration.rst#2025-04-22_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nservices:\n    some_decorator:\n        class: App\\Decorator\n\n    embedded_stack:\n        stack:\n            - alias: some_decorator\n            - App\\Decorated: ~\n\n    decorated_foo_stack:\n        stack:\n            - parent: embedded_stack\n            - Baz: ~\n            - Bar: ~\n            - Foo: ~\n```\n\n----------------------------------------\n\nTITLE: Anonymizing IP Addresses with IpUtils (Symfony, PHP)\nDESCRIPTION: Illustrates using the IpUtils::anonymize() method to mask parts of IPv4 and IPv6 addresses, supporting customization of the number of anonymized bytes. Requires the IpUtils class from Symfony. Inputs are IP address strings (IPv4 or IPv6) and optional byte counts. Outputs are anonymized IP address strings with sensitive bits zeroed. Available since Symfony 7.2 for adjustable anonymization levels via parameters.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#2025-04-22_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\HttpFoundation\\IpUtils;\n\n$ipv4 = '123.234.235.236';\n$anonymousIpv4 = IpUtils::anonymize($ipv4);\n// $anonymousIpv4 = '123.234.235.0'\n\n$ipv6 = '2a01:198:603:10:396e:4789:8e99:890f';\n$anonymousIpv6 = IpUtils::anonymize($ipv6);\n// $anonymousIpv6 = '2a01:198:603:10::'\n```\n\nLANGUAGE: php\nCODE:\n```\n$ipv4 = '123.234.235.236';\n$anonymousIpv4 = IpUtils::anonymize($ipv4, 3);\n// $anonymousIpv4 = '123.0.0.0'\n\n$ipv6 = '2a01:198:603:10:396e:4789:8e99:890f';\n// (you must define the second argument (bytes to anonymize in IPv4 addresses)\n// even when you are only anonymizing IPv6 addresses)\n$anonymousIpv6 = IpUtils::anonymize($ipv6, 3, 10);\n// $anonymousIpv6 = '2a01:198:603::'\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom Monolog Logger Channel in PHP\nDESCRIPTION: PHP code snippet showing how to register the `App\\Log\\CustomLogger` service using the container builder. It adds the default `logger` service as an argument via `Symfony\\Component\\DependencyInjection\\Reference` and applies the `monolog.logger` tag with the `channel` option set to `app`. This configures the dependency injection for the custom logger service.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/dic_tags.rst#2025-04-22_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Log\\CustomLogger;\nuse Symfony\\Component\\DependencyInjection\\Reference;\n\n$container->register(CustomLogger::class)\n    ->addArgument(new Reference('logger'))\n    ->addTag('monolog.logger', ['channel' => 'app']);\n```\n\n----------------------------------------\n\nTITLE: Dumping an Object with Limited Output using VarDumper (PHP)\nDESCRIPTION: Shows an example where the dump output is limited (e.g., due to exceeding maximum items or depth). Children of a structure might be replaced by an ellipsis (`…`), potentially followed by a number indicating how many items were omitted (like `9` in the described scenario). The specific `AcmeController` class is not defined here, but the `dump()` call illustrates the concept.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/var_dumper.rst#2025-04-22_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$var = new AcmeController(\n    \"When a dump goes over its maximum items limit,\\n\"\n    .\",or when some special objects are encountered,\\n\"\n    .\",children can be replaced by an ellipsis and\\n\"\n    .\",optionally followed by a number that says how\\n\"\n    .\",many have been removed; `9` in this case.\\n\"\n);\ndump($var);\n```\n\n----------------------------------------\n\nTITLE: Defining PasswordStrength Constraint using YAML\nDESCRIPTION: Shows how to apply the PasswordStrength constraint to a property using YAML configuration in a validation file.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/PasswordStrength.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\User:\n    properties:\n        rawPassword:\n            - PasswordStrength\n```\n\n----------------------------------------\n\nTITLE: Implementing Service Decoration Using Attributes in PHP\nDESCRIPTION: Shows how to decorate a service using the AsDecorator attribute and AutowireDecorated attribute for the inner service. The example demonstrates ignoring missing services with ContainerInterface::IGNORE_ON_INVALID_REFERENCE.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/service_decoration.rst#2025-04-22_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\DependencyInjection\\Attribute\\AutowireDecorated;\nuse Symfony\\Component\\DependencyInjection\\ContainerInterface;\n\n#[AsDecorator(decorates: Mailer::class, onInvalid: ContainerInterface::IGNORE_ON_INVALID_REFERENCE)]\nclass Bar\n{\n    public function __construct(\n        #[AutowireDecorated] private $inner,\n    ) {\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Mixing Objects and Arrays with PropertyAccessor in PHP\nDESCRIPTION: Demonstrates how to use PropertyAccessor to access nested properties that mix objects and arrays, using a path-like syntax.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/property_access.rst#2025-04-22_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nclass Person\n{\n    public string $firstName;\n    private array $children = [];\n\n    public function setChildren($children): void\n    {\n        $this->children = $children;\n    }\n\n    public function getChildren(): array\n    {\n        return $this->children;\n    }\n}\n\n$person = new Person();\n\n$propertyAccessor->setValue($person, 'children[0]', new Person);\n// equal to $person->getChildren()[0] = new Person()\n\n$propertyAccessor->setValue($person, 'children[0].firstName', 'Wouter');\n// equal to $person->getChildren()[0]->firstName = 'Wouter'\n\nvar_dump('Hello '.$propertyAccessor->getValue($person, 'children[0].firstName')); // 'Wouter'\n// equal to $person->getChildren()[0]->firstName\n```\n\n----------------------------------------\n\nTITLE: Initializing Memcached Adapter in PHP\nDESCRIPTION: Creates a new MemcachedAdapter instance with a Memcached client, optional namespace, and default lifetime settings.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/cache/adapters/memcached_adapter.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Cache\\Adapter\\MemcachedAdapter;\n\n$cache = new MemcachedAdapter(\n    // the client object that sets options and adds the server instance(s)\n    \\Memcached $client,\n\n    // a string prefixed to the keys of the items stored in this cache\n    $namespace = '',\n\n    // the default lifetime (in seconds) for cache items that do not define their\n    // own lifetime, with a value 0 causing items to be stored indefinitely\n    $defaultLifetime = 0\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP User Provider - Symfony - PHP\nDESCRIPTION: This PHP snippet programmatically configures a security provider that authenticates users via LDAP inside a Symfony app. Using the SecurityConfig object, it sets the provider to use the LDAP service, maps user attributes, roles, and lookup parameters. Prerequisites: symfony/config, symfony/ldap, symfony/security-bundle. Inputs include connection/credential parameters for retrieving users from LDAP; output is direct integration of LDAP sourced users for security authentication.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/ldap.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/security.php\\nuse Symfony\\Component\\Ldap\\Ldap;\\nuse Symfony\\Config\\SecurityConfig;\\n\\nreturn static function (SecurityConfig $security): void {\\n    $security->provider('ldap_users')\\n        ->ldap()\\n            ->service(Ldap::class)\\n            ->baseDn('dc=example,dc=com')\\n            ->searchDn('cn=read-only-admin,dc=example,dc=com')\\n            ->searchPassword('password')\\n            ->defaultRoles(['ROLE_USER'])\\n            ->uidKey('uid')\\n            ->extraFields(['email'])\\n    ;\\n};\\n\n```\n\n----------------------------------------\n\nTITLE: Initializing ChainAdapter in PHP\nDESCRIPTION: Creates a new ChainAdapter instance with an array of adapters and an optional default lifetime. This adapter fetches items from the first adapter containing them and saves items to all given adapters.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/cache/adapters/chain_adapter.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Cache\\Adapter\\ChainAdapter;\n\n$cache = new ChainAdapter(\n    // The ordered list of adapters used to fetch cached items\n    array $adapters,\n\n    // The default lifetime of items propagated from lower adapters to upper ones\n    $defaultLifetime = 0\n);\n```\n\n----------------------------------------\n\nTITLE: Modifying TaskType to Allow Adding New Tags in PHP\nDESCRIPTION: Updates the TaskType form class to allow adding new tags dynamically using the allow_add option.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/form_collections.rst#2025-04-22_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n// src/Form/TaskType.php\n\n// ...\n\npublic function buildForm(FormBuilderInterface $builder, array $options): void\n{\n    // ...\n\n    $builder->add('tags', CollectionType::class, [\n        'entry_type' => TagType::class,\n        'entry_options' => ['label' => false],\n        'allow_add' => true,\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Password Hasher with Migration Support\nDESCRIPTION: Skeleton of a custom password hasher with the needsRehash method implemented. This triggers password migration by returning true when a password should be rehashed with a newer algorithm.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/passwords.rst#2025-04-22_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n// src/Security/CustomPasswordHasher.php\nnamespace App\\Security;\n\n// ...\nuse Symfony\\Component\\PasswordHasher\\PasswordHasherInterface;\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom TreeStyle and Rendering Custom-Styled Trees (PHP)\nDESCRIPTION: Shows how to construct a tree with a fully user-defined visualization style by specifying custom line and branching symbols via the TreeStyle constructor. The example creates a custom TreeStyle using emoji icons and passes it to TreeHelper::createTree. Input is a hierarchical array and custom style object; output is a tree displayed in the console with user-supplied characters.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/helpers/tree.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Console\\Helper\\TreeHelper;\nuse Symfony\\Component\\Console\\Helper\\TreeStyle;\n\n$customStyle = new TreeStyle('🟣 ', '🟠 ', '🔵 ', '🟢 ', '🔴 ', '🟡 ');\n\n// Pass the custom style to the createTree method\n\n$tree = TreeHelper::createTree($io, null, [\n    'src' =>  [\n        'Command',\n        'Controller' => [\n            'DefaultController.php',\n        ],\n        'Kernel.php',\n    ],\n    'templates' => [\n        'base.html.twig',\n    ],\n], $customStyle);\n\n$tree->render();\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Doctrine Event Listeners in YAML\nDESCRIPTION: This snippet shows how to register a Doctrine event listener using YAML configuration in services.yaml. It demonstrates how to tag the service with doctrine.event_listener and specify the event name, priority, and connection.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine/events.rst#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nservices:\n    # ...\n\n    App\\EventListener\\SearchIndexer:\n        tags:\n            -\n                name: 'doctrine.event_listener'\n                # this is the only required option for the lifecycle listener tag\n                event: 'postPersist'\n\n                # listeners can define their priority in case listeners are associated\n                # to the same event (default priority = 0; higher numbers = listener is run earlier)\n                priority: 500\n\n                # you can also restrict listeners to a specific Doctrine connection\n                connection: 'default'\n```\n\n----------------------------------------\n\nTITLE: Configuring Workflow Events in YAML\nDESCRIPTION: Configuration example showing how to specify which workflow events to dispatch.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/workflow.rst#2025-04-22_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nframework:\n    workflows:\n        blog_publishing:\n            # you can pass one or more event names\n            events_to_dispatch: ['workflow.leave', 'workflow.completed']\n\n            # pass an empty array to not dispatch any event\n            events_to_dispatch: []\n```\n\n----------------------------------------\n\nTITLE: Configuring Trusted Hosts in PHP Format for Symfony Framework\nDESCRIPTION: PHP configuration that sets trusted hosts for a Symfony application. This configuration allows requests only from example.com and example.org domains.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_82\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/framework.php\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework): void {\n    $framework->trustedHosts(['^example\\.com$', '^example\\.org$']);\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Packages with Composer and Symfony Flex (Terminal)\nDESCRIPTION: Uses Composer to require a package (using `logger` as an example alias). If Symfony Flex is installed, it resolves the alias (e.g., to `symfony/monolog-bundle`), installs the package(s), and automatically runs any associated recipes to configure the package within the Symfony application. Requires Composer and Symfony Flex.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup.rst#2025-04-22_snippet_8\n\nLANGUAGE: terminal\nCODE:\n```\n$ cd my-project/\n$ composer require logger\n```\n\n----------------------------------------\n\nTITLE: Fetching Script Names with Default Locale using Symfony Intl in PHP\nDESCRIPTION: Demonstrates retrieving a list of all script names and the name for a specific script code (e.g., 'Hans') using the `Symfony\\Component\\Intl\\Scripts` class. It uses the default locale set via `\\Locale::setDefault('en')`. Script codes are based on Unicode ISO 15924.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/intl.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Intl\\Scripts;\n\n\\Locale::setDefault('en');\n\n$scripts = Scripts::getNames();\n// ('scriptCode' => 'scriptName')\n// => ['Adlm' => 'Adlam', 'Afak' => 'Afaka', ...]\n\n$script = Scripts::getName('Hans');\n// => 'Simplified'\n```\n\n----------------------------------------\n\nTITLE: Configuring Dump Output Format with Flags in PHP\nDESCRIPTION: Shows how to use flags to customize the output format of dumpers. This example demonstrates using DUMP_STRING_LENGTH and DUMP_LIGHT_ARRAY flags to modify the dump output.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/var_dumper.rst#2025-04-22_snippet_27\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\VarDumper\\Cloner\\VarCloner;\nuse Symfony\\Component\\VarDumper\\Dumper\\AbstractDumper;\nuse Symfony\\Component\\VarDumper\\Dumper\\CliDumper;\n\n$varCloner = new VarCloner();\n$var = ['test'];\n\n$dumper = new CliDumper(null, null, AbstractDumper::DUMP_STRING_LENGTH | AbstractDumper::DUMP_LIGHT_ARRAY);\necho $dumper->dump($varCloner->cloneVar($var), true);\n```\n\n----------------------------------------\n\nTITLE: Configuring Rotating File Handler in XML\nDESCRIPTION: This XML configuration sets up a rotating file handler for Monolog, creating a new log file daily and limiting the number of log files kept.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/logging.rst#2025-04-22_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/prod/monolog.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:monolog=\"http://symfony.com/schema/dic/monolog\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/monolog\n        https://symfony.com/schema/dic/monolog/monolog-1.0.xsd\">\n\n    <monolog:config>\n        <!-- \"max-files\": max number of log files to keep\n             defaults to zero, which means infinite files -->\n        <monolog:handler name=\"main\"\n            type=\"rotating_file\"\n            path=\"%kernel.logs_dir%/%kernel.environment%.log\"\n            level=\"debug\"\n            max-files=\"10\"\n        />\n    </monolog:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Setting Local Secret Overrides in .env Files (bash)\nDESCRIPTION: Illustrates how a locally overridden secret appears in a .env.dev.local file using bash syntax. This configuration will take precedence over the value set in the Symfony secrets vault.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/secrets.rst#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_PASSWORD=root\n```\n\n----------------------------------------\n\nTITLE: Using GreaterThanOrEqual with DateTime and Timezone (PHP Attributes)\nDESCRIPTION: Example showing how to use the GreaterThanOrEqual constraint with DateTime objects and a fixed timezone (UTC) to ensure consistent validation regardless of server timezone.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/GreaterThanOrEqual.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Order.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Order\n{\n    #[Assert\\GreaterThanOrEqual('today UTC')]\n    protected \\DateTimeInterface $deliveryDate;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering DQL Functions using YAML Configuration\nDESCRIPTION: Demonstrates how to register custom string, numeric, and datetime DQL functions using YAML configuration in Symfony. Shows the configuration structure under doctrine.orm.dql namespace.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine/custom_dql_functions.rst#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/doctrine.yaml\ndoctrine:\n    orm:\n        # ...\n        dql:\n            string_functions:\n                test_string: App\\DQL\\StringFunction\n                second_string: App\\DQL\\SecondStringFunction\n            numeric_functions:\n                test_numeric: App\\DQL\\NumericFunction\n            datetime_functions:\n                test_datetime: App\\DQL\\DatetimeFunction\n```\n\n----------------------------------------\n\nTITLE: Defining Validation Groups in Nested Constraints with Collection in PHP\nDESCRIPTION: This example shows how to define validation groups in nested constraints within a Collection. It demonstrates that groups defined in nested constraints are automatically added to the Collection constraint itself.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Collection.rst#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\n$constraint = new Assert\\Collection(\n    fields: [\n        'name' => new Assert\\NotBlank(['groups' => 'basic']),\n        'email' => new Assert\\NotBlank(['groups' => 'contact']),\n    ],\n);\n```\n\n----------------------------------------\n\nTITLE: Tag-Aware Marshaller Implementation\nDESCRIPTION: Example of using TagAwareMarshaller for managing tagged cache items with metadata.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/cache/adapters/redis_adapter.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$marshaller = new TagAwareMarshaller();\n\n$cache = new RedisAdapter($redis, 'tagged_namespace', 3600, $marshaller);\n\n$item = $cache->getItem('tagged_key');\n$item->set(['value' => 'some_data', 'tags' => ['tag1', 'tag2']]);\n$cache->save($item);\n```\n\n----------------------------------------\n\nTITLE: Overriding Parent Dependencies in XML\nDESCRIPTION: XML configuration showing how to override specific settings from the parent service for individual child services. This includes changing visibility settings and overriding or appending arguments.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/parent_services.rst#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <!-- ... -->\n\n        <!-- overrides the private setting of the parent service -->\n        <service id=\"App\\Repository\\DoctrineUserRepository\"\n            parent=\"App\\Repository\\BaseDoctrineRepository\"\n            public=\"true\"\n        >\n            <!-- appends the '@app.username_checker' argument to the parent\n                 argument list -->\n            <argument type=\"service\" id=\"app.username_checker\"/>\n        </service>\n\n        <service id=\"App\\Repository\\DoctrinePostRepository\"\n            parent=\"App\\Repository\\BaseDoctrineRepository\"\n        >\n            <!-- overrides the first argument (using the index attribute) -->\n            <argument index=\"0\" type=\"service\" id=\"doctrine.custom_entity_manager\"/>\n        </service>\n\n        <!-- ... -->\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Setter Injection in Service Container (XML)\nDESCRIPTION: XML configuration for setter injection defining the method call to set the mailer dependency.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/injection_types.rst#2025-04-22_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <!-- ... -->\n\n        <service id=\"app.newsletter_manager\" class=\"App\\Mail\\NewsletterManager\">\n            <call method=\"setMailer\">\n                <argument type=\"service\" id=\"mailer\"/>\n            </call>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Implementing Negative Validation with PHP Attributes\nDESCRIPTION: Example showing how to implement the Negative constraint using PHP attributes in a TransferItem entity class. Validates that the withdraw property is a negative number.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Negative.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/TransferItem.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass TransferItem\n{\n    #[Assert\\Negative]\n    protected int $withdraw;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Third-Party CSS Files with importmap\nDESCRIPTION: Terminal command showing how to add a third-party CSS file to your importmap configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/asset_mapper.rst#2025-04-22_snippet_24\n\nLANGUAGE: terminal\nCODE:\n```\n$ php bin/console importmap:require bootstrap/dist/css/bootstrap.min.css\n```\n\n----------------------------------------\n\nTITLE: Defining Service as Global Variable in Twig YAML\nDESCRIPTION: Shows how to define a service as a global Twig variable in the YAML configuration file.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/templates.rst#2025-04-22_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/twig.yaml\ntwig:\n    # ...\n    globals:\n        # the value is the service's id\n        uuid: '@App\\Generator\\UuidGenerator'\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML File Loader in Symfony Validator (PHP)\nDESCRIPTION: Illustrates configuring the Symfony Validator to load validation metadata from an external YAML file using addYamlMapping. Requires both symfony/validator and symfony/yaml components, with the latter needed for YAML parsing. Passes the YAML file path to addYamlMapping, returning a validator utilizing constraints defined in the specified YAML file.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/validator/resources.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Validator\\Validation;\\n\\n$validator = Validation::createValidatorBuilder()\\n    ->addYamlMapping('validator/validation.yaml')\\n    ->getValidator();\n```\n\n----------------------------------------\n\nTITLE: Service Decoration in XML Configuration\nDESCRIPTION: Example of implementing the Decorator pattern in XML configuration. The 'decorates' attribute is used to override a service while keeping the original service available as '.inner'.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/service_decoration.rst#2025-04-22_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsd=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsd:schemaLocation=\"http://symfony.com/schema/dic/services https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"App\\Mailer\"/>\n\n        <!-- overrides the App\\Mailer service\n             but that service is still available as \".inner\" -->\n        <service id=\"App\\DecoratingMailer\"\n            decorates=\"App\\Mailer\"\n        />\n\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Configuring UniqueEntity Constraint with YAML in Symfony\nDESCRIPTION: Example of applying the UniqueEntity constraint using YAML configuration to ensure a unique email field on a User entity. This approach uses external validation configuration files.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/UniqueEntity.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\User:\n    constraints:\n        - Symfony\\Bridge\\Doctrine\\Validator\\Constraints\\UniqueEntity: email\n    properties:\n        email:\n            - Email: ~\n```\n\n----------------------------------------\n\nTITLE: Configuring Fallback Translations in Symfony (XML)\nDESCRIPTION: Sets 'en' as the fallback locale for translations when the primary translation is not found using XML configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/translation.rst#2025-04-22_snippet_34\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/translation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony\n        https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <framework:config>\n        <framework:translator>\n            <framework:fallback>en</framework:fallback>\n            <!-- ... -->\n        </framework:translator>\n    </framework:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Configuring PHPUnit XML for Custom Bootstrap in Symfony\nDESCRIPTION: This XML snippet shows how to configure the phpunit.xml.dist file to use a custom bootstrap file. It sets the 'bootstrap' attribute to point to the tests/bootstrap.php file.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/testing/bootstrap.rst#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- phpunit.xml.dist -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<phpunit\n    bootstrap=\"tests/bootstrap.php\"\n>\n    <!-- ... -->\n</phpunit>\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom User Provider in Symfony Security (XML)\nDESCRIPTION: Defines a custom user provider service in XML for Symfony security configuration. The 'your_custom_user_provider' is registered with a service ID referencing the custom provider class. Suitable for applications needing advanced or external user loading mechanisms. Relies on correct XML namespaces and integration with the Symfony dependency injection container.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/user_providers.rst#2025-04-22_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/security.xml -->\\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\\n<srv:container xmlns=\\\"http://symfony.com/schema/dic/security\\\"\\n               xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n               xmlns:srv=\\\"http://symfony.com/schema/dic/services\\\"\\n               xsi:schemaLocation=\\\"http://symfony.com/schema/dic/services\\n        https://symfony.com/schema/dic/services/services-1.0.xsd\\n        http://symfony.com/schema/dic/security\\n        https://symfony.com/schema/dic/security/security-1.0.xsd\\\">\\n\\n    <config>\\n        <!-- ... -->\\n\\n        <provider name=\\\"your_custom_user_provider\\\" id=\\\"App\\Security\\UserProvider\\\">\\n            <!-- ... -->\\n        </provider>\\n    </config>\\n</srv:container>\n```\n\n----------------------------------------\n\nTITLE: Getting Localized Timezone Names with Symfony Intl\nDESCRIPTION: Example demonstrating how to get timezone names in different languages. The method accepts a locale parameter to retrieve the translated timezone names.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/intl.rst#2025-04-22_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$timezones = Timezones::getNames('de');\n// => ['America/Eirunepe' => 'Acre-Zeit (Eirunepe)', 'America/Rio_Branco' => 'Acre-Zeit (Rio Branco)', ...]\n\n$timezone = Timezones::getName('Africa/Nairobi', 'de');\n// => 'Ostafrikanische Zeit (Nairobi)'\n```\n\n----------------------------------------\n\nTITLE: Adding Getter Methods to Custom Data Collector in Symfony PHP\nDESCRIPTION: This snippet shows how to add getter methods to a custom data collector class. These methods provide access to the collected data and are used in the Twig template for displaying information.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/profiler.rst#2025-04-22_snippet_17\n\nLANGUAGE: PHP\nCODE:\n```\n// src/DataCollector/RequestCollector.php\nnamespace App\\DataCollector;\n\nuse Symfony\\Bundle\\FrameworkBundle\\DataCollector\\AbstractDataCollector;\nuse Symfony\\Component\\VarDumper\\Cloner\\Data;\n\nclass RequestCollector extends AbstractDataCollector\n{\n    // ...\n\n    public static function getTemplate(): ?string\n    {\n        return 'data_collector/template.html.twig';\n    }\n\n    public function getMethod(): string\n    {\n        return $this->data['method'];\n    }\n\n    public function getAcceptableContentTypes(): array\n    {\n        return $this->data['acceptable_content_types'];\n    }\n\n    public function getSomeObject(): Data\n    {\n        // use the cloneVar() method to dump collected data in the profiler\n        return $this->cloneVar($this->data['method']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DateType Field as Single Text Box in PHP\nDESCRIPTION: Example of adding a DateType field rendered as a single text box. This uses the HTML5 date input type, which provides a date picker in supported browsers.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/date.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\DateType;\n// ...\n\n$builder->add('publishedAt', DateType::class, [\n    // renders it as a single text box\n    'widget' => 'single_text',\n]);\n```\n\n----------------------------------------\n\nTITLE: Registering Lazy-Loaded Console Commands with FactoryCommandLoader - Symfony Console - PHP\nDESCRIPTION: This snippet registers commands for lazy loading by creating a FactoryCommandLoader with an associative array mapping command names to their respective factory callbacks. Dependencies include the App\\Command\\HeavyCommand class and Symfony\\Component\\Console\\Application. The approach enables actual Command instantiation to be deferred until the command is invoked, minimizing resource usage unless commands like 'list' or 'help' require initialization for metadata inspection. Inputs are command name strings, and outputs are Command instances returned to the application as needed.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/console/lazy_commands.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Command\\HeavyCommand;\nuse Symfony\\Component\\Console\\Application;\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\CommandLoader\\FactoryCommandLoader;\n\n$commandLoader = new FactoryCommandLoader([\n    // Note that the `list` command will still instantiate that command\n    // in this example.\n    'app:heavy' => static fn(): Command => new HeavyCommand(),\n]);\n\n$application = new Application();\n$application->setCommandLoader($commandLoader);\n$application->run();\n```\n\n----------------------------------------\n\nTITLE: Configuring Notification Channel Policy - PHP\nDESCRIPTION: This PHP snippet configures notification channel policies using Symfony's PHP config format. It uses the FrameworkConfig object to assign channels for various importance levels, such as 'urgent', 'high', 'medium', and 'low'. Inputs are importance keywords with associated arrays of channels; output ensures the Notifier component uses the correct channel per notification importance. Requires use of symfony/config and symfony/notifier.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/notifier.rst#2025-04-22_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/notifier.php\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework): void {\n    // ...\n    $framework->notifier()\n        // Use SMS, Slack and email for urgent notifications\n        ->channelPolicy('urgent', ['sms', 'chat/slack', 'email'])\n        // Use Slack for highly important notifications\n        ->channelPolicy('high', ['chat/slack'])\n        // Use browser for medium and low notifications\n        ->channelPolicy('medium', ['browser'])\n        ->channelPolicy('low', ['browser'])\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring JsonFormatter for Monolog in YAML\nDESCRIPTION: This YAML configuration snippet shows how to set up a stream handler for Monolog using the JsonFormatter in a Symfony project. It specifies the handler type, logging level, and formatter.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/logging/formatter.rst#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/prod/monolog.yaml (and/or config/packages/dev/monolog.yaml)\nmonolog:\n    handlers:\n        file:\n            type: stream\n            level: debug\n            formatter: 'monolog.formatter.json'\n```\n\n----------------------------------------\n\nTITLE: Customizing Form Collection Entry Templates in Twig\nDESCRIPTION: Twig blocks for customizing individual entries within form collections. These blocks allow for detailed customization of how each item in a collection is displayed.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/form_themes.rst#2025-04-22_snippet_9\n\nLANGUAGE: twig\nCODE:\n```\n{% block collection_entry_row %} ... {% endblock %}\n{% block collection_entry_label %} ... {% endblock %}\n{% block collection_entry_widget %} ... {% endblock %}\n{% block collection_entry_help %} ... {% endblock %}\n{% block collection_entry_errors %} ... {% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Multiple Topics Subscription in Mercure\nDESCRIPTION: Shows how to subscribe to multiple topics and use URI templates for pattern matching in Mercure subscriptions.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mercure.rst#2025-04-22_snippet_9\n\nLANGUAGE: html+twig\nCODE:\n```\n<script>\n{# Subscribe to updates of several Book resources and to all Review resources matching the given pattern #}\nconst eventSource = new EventSource(\"{{ mercure([\n    'https://example.com/books/1',\n    'https://example.com/books/2',\n    'https://example.com/reviews/{id}'\n])|escape('js') }}\");\n\neventSource.onmessage = event => {\n    console.log(JSON.parse(event.data));\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: ResponseEvent Class Implementation\nDESCRIPTION: Event class that encapsulates the HTTP Response and Request objects for event handling.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/create_framework/event_dispatcher.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace Simplex;\n\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Contracts\\EventDispatcher\\Event;\n\nclass ResponseEvent extends Event\n{\n    public function __construct(\n        private Response $response,\n        private Request $request,\n    ) {\n    }\n\n    public function getResponse(): Response\n    {\n        return $this->response;\n    }\n\n    public function getRequest(): Request\n    {\n        return $this->request;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Symfony Extension (PHP)\nDESCRIPTION: This snippet defines a custom Symfony Extension class that configures the application and conditionally registers a service based on a configuration value.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/micro_kernel_trait.rst#2025-04-22_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n// src/DependencyInjection/AppExtension.php\nnamespace App\\DependencyInjection;\n\nuse Symfony\\Component\\Config\\Definition\\Configurator\\DefinitionConfigurator;\nuse Symfony\\Component\\DependencyInjection\\ContainerBuilder;\nuse Symfony\\Component\\DependencyInjection\\Extension\\AbstractExtension;\nuse Symfony\\Component\\DependencyInjection\\Loader\\Configurator\\ContainerConfigurator;\n\nclass AppExtension extends AbstractExtension\n{\n    public function configure(DefinitionConfigurator $definition): void\n    {\n        $definition->rootNode()\n            ->children()\n                ->booleanNode('foo')->defaultTrue()->end()\n            ->end();\n    }\n\n    public function loadExtension(array $config, ContainerConfigurator $containerConfigurator, ContainerBuilder $containerBuilder): void\n    {\n        if ($config['foo']) {\n            $containerBuilder->register('foo_service', \\stdClass::class);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring File Constraint in XML\nDESCRIPTION: Shows how to configure File validation constraints using XML, specifying maximum file size, allowed extensions, and a custom error message.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/File.rst#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\Author\">\n        <property name=\"bioFile\">\n            <constraint name=\"File\">\n                <option name=\"maxSize\">1024k</option>\n                <option name=\"extensions\">\n                    <value>pdf</value>\n                </option>\n                <option name=\"extensionsMessage\">Please upload a valid PDF</option>\n            </constraint>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Using Rate Limiter in Symfony Controller\nDESCRIPTION: Example of injecting and using a rate limiter in a Symfony controller to control API request frequency.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/rate_limiter.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/ApiController.php\nnamespace App\\Controller;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Exception\\TooManyRequestsHttpException;\n```\n\n----------------------------------------\n\nTITLE: Applying BIC Validation Using PHP Attributes in Symfony\nDESCRIPTION: This code shows how to apply the BIC validator to a property in a PHP class using PHP attributes. The validator ensures that the businessIdentifierCode property contains a valid Business Identifier Code.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Bic.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Transaction.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Transaction\n{\n    #[Assert\\Bic]\n    protected string $businessIdentifierCode;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Monolog Processor Per Handler in PHP\nDESCRIPTION: PHP configuration for registering a processor for a specific handler. This limits the processor to only be applied to log records processed by the 'main' handler rather than all handlers.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/logging/processors.rst#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\n\n// ...\n$container\n    ->register(SessionRequestProcessor::class)\n    ->addTag('monolog.processor', ['handler' => 'main']);\n```\n\n----------------------------------------\n\nTITLE: Using Resource Hints in Twig Templates\nDESCRIPTION: Twig code showing how to use various resource hints functions provided by the WebLink component.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/web_link.rst#2025-04-22_snippet_5\n\nLANGUAGE: html+twig\nCODE:\n```\n<head>\n    <!-- ... -->\n    <link rel=\"alternate\" href=\"{{ link('/index.jsonld', 'alternate') }}\">\n    <link rel=\"preload\" href=\"{{ preload('/app.css', {as: 'style', nopush: true}) }}\" as=\"style\">\n    <!-- ... -->\n</head>\n```\n\n----------------------------------------\n\nTITLE: Configuring Regex Constraint with HTML Pattern\nDESCRIPTION: Example of using the Regex constraint with PHP attributes to specify a custom HTML pattern for client-side validation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Regex.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Author.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Author\n{\n    #[Assert\\Regex(\n        pattern: '/^[a-z]+$/i',\n        htmlPattern: '^[a-zA-Z]+$'\n    )]\n    protected string $name;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Progress Bar Implementation in PHP\nDESCRIPTION: Creates and advances a progress bar with 50 units, showing basic usage of the ProgressBar class including start, advance, and finish methods.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/helpers/progressbar.rst#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Console\\Helper\\ProgressBar;\n\n// creates a new progress bar (50 units)\n$progressBar = new ProgressBar($output, 50);\n\n// starts and displays the progress bar\n$progressBar->start();\n\n$i = 0;\nwhile ($i++ < 50) {\n    // ... do some work\n\n    // advances the progress bar 1 unit\n    $progressBar->advance();\n\n    // you can also advance the progress bar by more than 1 unit\n    // $progressBar->advance(3);\n}\n\n// ensures that the progress bar is at 100%\n$progressBar->finish();\n```\n\n----------------------------------------\n\nTITLE: Implementing User Confirmation in Symfony Command\nDESCRIPTION: Example of creating a confirmation question in a command execution method using ConfirmationQuestion\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/helpers/questionhelper.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nuse Symfony\\Component\\Console\\Question\\ConfirmationQuestion;\n\nclass YourCommand extends Command\n{\n    public function execute(InputInterface $input, OutputInterface $output): int\n    {\n        $helper = $this->getHelper('question');\n        $question = new ConfirmationQuestion('Continue with this action?', false);\n\n        if (!$helper->ask($input, $output, $question)) {\n            return Command::SUCCESS;\n        }\n\n        // ... do something here\n\n        return Command::SUCCESS;\n    }\n```\n\n----------------------------------------\n\nTITLE: Conditionally Injecting Parameter via Expression (Symfony PHP)\nDESCRIPTION: Sets up the `App\\Mailer` service using PHP configuration and injects a value based on a condition using the `expr()` function. The expression uses the ternary operator to check if 'some_param' exists via `container.hasParameter` and injects either the parameter value or a default string.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/expression_language.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nuse App\\Mailer;\n\nreturn function(ContainerConfigurator $container): void {\n    $services = $container->services();\n\n    $services->set(Mailer::class)\n        ->args([expr(\"container.hasParameter('some_param') ? parameter('some_param') : 'default_value'\")]);\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Slug Validation in YAML\nDESCRIPTION: Example showing how to configure the Slug constraint using YAML configuration in Symfony.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Slug.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Author:\n    properties:\n        slug:\n            - Slug: ~\n```\n\n----------------------------------------\n\nTITLE: Configuring Form Type with Custom Validation Group Resolver in Symfony\nDESCRIPTION: Demonstrates how to inject and configure the validation group resolver in a Symfony form type class. Sets the resolver as the validation_groups option in the form configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/validation_group_service_resolver.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// src/Form/MyClassType.php;\nnamespace App\\Form;\n\nuse App\\Validation\\ValidationGroupResolver;\nuse Symfony\\Component\\Form\\AbstractType;\nuse Symfony\\Component\\OptionsResolver\\OptionsResolver;\n\nclass MyClassType extends AbstractType\n{\n    public function __construct(\n        private ValidationGroupResolver $groupResolver,\n    ) {\n    }\n\n    // ...\n    public function configureOptions(OptionsResolver $resolver): void\n    {\n        $resolver->setDefaults([\n            'validation_groups' => $this->groupResolver,\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating TraceableEventDispatcher in PHP\nDESCRIPTION: This snippet demonstrates how to create an instance of `TraceableEventDispatcher`. It requires an existing event dispatcher instance (`$dispatcher`) and a `Stopwatch` instance, both of which need to be properly initialized beforehand. The `TraceableEventDispatcher` wraps the original dispatcher to enable listener tracking for debugging purposes.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/event_dispatcher/traceable_dispatcher.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\EventDispatcher\\Debug\\TraceableEventDispatcher;\nuse Symfony\\Component\\Stopwatch\\Stopwatch;\n\n// the event dispatcher to debug\n$dispatcher = ...;\n\n$traceableEventDispatcher = new TraceableEventDispatcher(\n    $dispatcher,\n    new Stopwatch()\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Symfony Controller with Route (PHP)\nDESCRIPTION: This snippet defines a Symfony controller with a route that generates a random number and renders it using a Twig template.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/micro_kernel_trait.rst#2025-04-22_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\n// src/Controller/MicroController.php\nnamespace App\\Controller;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Attribute\\Route;\n\nclass MicroController extends AbstractController\n{\n    #[Route('/random/{limit}')]\n    public function randomNumber(int $limit): Response\n    {\n        $number = random_int(0, $limit);\n\n        return $this->render('micro/random.html.twig', [\n            'number' => $number,\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Promoting a Read-Only Lock to a Write Lock in Symfony\nDESCRIPTION: Example demonstrating how to acquire a read-only lock and then promote it to a write lock when an update is needed. The code first creates a lock for a specific user, acquires a read lock, checks if an update is needed, and then promotes to a write lock if necessary.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/lock.rst#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$lock = $factory->createLock('user-'.$userId);\n$lock->acquireRead(true);\n\nif (!$this->shouldUpdate($userId)) {\n    return;\n}\n\n$lock->acquire(true); // Promote the lock to a write lock\n$this->update($userId);\n```\n\n----------------------------------------\n\nTITLE: Applying Ip Constraint with PHP\nDESCRIPTION: Example of using the Ip constraint in PHP code for a Symfony entity. This snippet demonstrates how to programmatically add the Ip validation to the 'ipAddress' property using the loadValidatorMetadata method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Ip.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Author.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Author\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('ipAddress', new Assert\\Ip());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Notifier Texter Transports in XML\nDESCRIPTION: Configuration example for setting up notifier texter transports in Symfony using XML format.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/notifier.rst#2025-04-22_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/notifier.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony\n        https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <framework:config>\n        <framework:notifier>\n            <framework:texter-transport name=\"expo\">\n                %env(EXPO_DSN)%\n            </framework:texter-transport>\n        </framework:notifier>\n    </framework:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Implementing LeapYear Controller in PHP\nDESCRIPTION: Controller class for handling leap year calculations, demonstrating proper separation of controller logic from model functionality.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/create_framework/separation_of_concerns.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace Calendar\\Controller;\n\nuse Calendar\\Model\\LeapYear;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass LeapYearController\n{\n    public function index(Request $request, int $year): Response\n    {\n        $leapYear = new LeapYear();\n        if ($leapYear->isLeapYear($year)) {\n            return new Response('Yep, this is a leap year!');\n        }\n\n        return new Response('Nope, this is not a leap year.');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring empty_data with Class Instantiation in Symfony Form Type\nDESCRIPTION: Shows how to set up empty_data in a Symfony form type by instantiating a new class with dependencies.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/use_empty_data.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// src/Form/Type/BlogType.php\nnamespace App\\Form\\Type;\n\n// ...\nuse App\\Entity\\Blog;\nuse Symfony\\Component\\Form\\AbstractType;\nuse Symfony\\Component\\OptionsResolver\\OptionsResolver;\n\nclass BlogType extends AbstractType\n{\n    public function __construct(\n        private object $someDependency,\n    ) {\n    }\n    // ...\n\n    public function configureOptions(OptionsResolver $resolver): void\n    {\n        $resolver->setDefaults([\n            'empty_data' => new Blog($this->someDependency),\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using asset() with Packages in Twig\nDESCRIPTION: This Twig example demonstrates using the `asset()` function with the `packageName` argument set to 'foo_package'. Assuming the configuration defines 'foo_package' with a base path of '/avatars', this call generates the public path '/avatars/avatar.png' for the asset 'avatar.png'.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#2025-04-22_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n{# the image lives at \"public/avatars/avatar.png\" #}\n{{ asset(path = 'avatar.png', packageName = 'foo_package') }}\n{# output: /avatars/avatar.png #}\n```\n\n----------------------------------------\n\nTITLE: Implementing NoSuspiciousCharacters Constraint in XML\nDESCRIPTION: Example of applying the NoSuspiciousCharacters constraint to a username property using XML configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/NoSuspiciousCharacters.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\User\">\n        <property name=\"username\">\n            <constraint name=\"NoSuspiciousCharacters\"/>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Registering Listeners and Dispatching Events with TraceableEventDispatcher in PHP\nDESCRIPTION: This code shows how to use the `TraceableEventDispatcher` like a standard event dispatcher. It registers an event listener (`$eventListener`) for a specific event name ('event.the_name') with a given priority using `addListener`. It then dispatches an event object (`$event`) associated with the same event name using the `dispatch` method. The traceable dispatcher forwards these calls to the wrapped dispatcher while recording the listener calls.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/event_dispatcher/traceable_dispatcher.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// ...\n\n// registers an event listener\n$eventListener = ...;\n$priority = ...;\n$traceableEventDispatcher->addListener(\n    'event.the_name',\n    $eventListener,\n    $priority\n);\n\n// dispatches an event\n$event = ...;\n$traceableEventDispatcher->dispatch($event, 'event.the_name');\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony Contract Packages via Composer\nDESCRIPTION: Commands for installing various Symfony contract packages using Composer. These commands allow developers to selectively install only the contract packages needed for their project.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/contracts.rst#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require symfony/cache-contracts\n$ composer require symfony/event-dispatcher-contracts\n$ composer require symfony/deprecation-contracts\n$ composer require symfony/http-client-contracts\n$ composer require symfony/service-contracts\n$ composer require symfony/translation-contracts\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Attributes to Submit Button in Symfony Form\nDESCRIPTION: Shows how to add extra attributes, such as a custom class, to the HTML representation of the submit button using the attr option.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/submit.rst#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\SubmitType;\n// ...\n\n$builder->add('save', SubmitType::class, [\n    'attr' => ['class' => 'save'],\n]);\n```\n\n----------------------------------------\n\nTITLE: Using Resolvable Console Arguments in Runtime Closure (PHP)\nDESCRIPTION: This PHP snippet illustrates how the closure returned by the front controller can accept resolvable arguments like `InputInterface` and `OutputInterface`. The Runtime component automatically injects these dependencies when running the console application.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/runtime.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// public/index.php\nuse Symfony\\Bundle\\FrameworkBundle\\Console\\Application;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\nrequire_once dirname(__DIR__).'/vendor/autoload_runtime.php';\n\nreturn function (InputInterface $input, OutputInterface $output): Application {\n    // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring UniqueEntity with YAML\nDESCRIPTION: Shows YAML configuration for unique entity validation constraints. Defines unique validation rules for email and phoneNumber fields in a separate validation configuration file.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/UniqueEntity.rst#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\User:\n    constraints:\n        - Symfony\\Bridge\\Doctrine\\Validator\\Constraints\\UniqueEntity:\n              fields: ['email', 'phoneNumber']\n              ignoreNull: 'phoneNumber'\n    properties:\n        # ...\n```\n\n----------------------------------------\n\nTITLE: Importing Configuration Files with Error Handling - Symfony Config - XML\nDESCRIPTION: This XML snippet shows the equivalent import functionality for Symfony configuration using XML files. Using the <imports> and <import> tags, you can specify files to be brought in, support for wildcards, and set ignore-errors attributes ('not_found' or 'true') for robust error tolerance. The code expects placement inside a Symfony config XML root and requires the correct schema declarations.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration.rst#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\\n<container xmlns=\\\"http://symfony.com/schema/dic/services\\\"\\n    xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n    xsi:schemaLocation=\\\"http://symfony.com/schema/dic/services\\n        https://symfony.com/schema/dic/services/services-1.0.xsd\\n        http://symfony.com/schema/dic/symfony\\n        https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\\\">\\n\\n    <imports>\\n        <import resource=\\\"legacy_config.php\\\"/>\\n        <!-- glob expressions are also supported to load multiple files -->\\n        <import resource=\\\"/etc/myapp/*.yaml\\\"/>\\n\\n        <!-- ignore-errors=\\\"not_found\\\" silently discards errors if the loaded file doesn't exist -->\\n        <import resource=\\\"my_config_file.yaml\\\" ignore-errors=\\\"not_found\\\"/>\\n        <!-- ignore-errors=\\\"true\\\" silently discards all errors (including invalid code and not found) -->\\n        <import resource=\\\"my_other_config_file.yaml\\\" ignore-errors=\\\"true\\\"/>\\n    </imports>\\n\\n    <!-- ... -->\\n</container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Profiler in XML\nDESCRIPTION: XML configuration to enable the Symfony Profiler while setting collect to false for performance optimization in test environment.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/testing/profiling.rst#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/test/web_profiler.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services https://symfony.com/schema/dic/services/services-1.0.xsd\n                http://symfony.com/schema/dic/symfony https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <!-- ... -->\n\n    <framework:config>\n        <framework:profiler enabled=\"true\" collect=\"false\"/>\n    </framework:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Implementing LeapYear Model in PHP\nDESCRIPTION: Model class containing business logic for determining if a given year is a leap year, demonstrating separation of business logic from controllers.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/create_framework/separation_of_concerns.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace Calendar\\Model;\n\nclass LeapYear\n{\n    public function isLeapYear(?int $year = null): bool\n    {\n        if (null === $year) {\n            $year = date('Y');\n        }\n\n        return 0 == $year % 400 || (0 == $year % 4 && 0 != $year % 100);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript for Adding Delete Buttons to Collection Items\nDESCRIPTION: JavaScript code that adds delete buttons to existing tag elements and initializes the delete functionality for new tags. It selects all tag elements and adds a delete link to each one.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/form_collections.rst#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\ndocument\n    .querySelectorAll('ul.tags li')\n    .forEach((tag) => {\n        addTagFormDeleteLink(tag)\n    })\n\n// ... the rest of the block from above\n\nfunction addFormToCollection(e) {\n    // ...\n\n    // add a delete link to the new form\n    addTagFormDeleteLink(item);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Access Token Authenticator (PHP - Symfony)\nDESCRIPTION: Programmatically sets up the access token authenticator for the main firewall using the PHP configuration approach. Returns a closure that expects a SecurityConfig argument. You need to use the AccessTokenHandler fully qualified class name and ensure this handler implements AccessTokenHandlerInterface. This snippet targets config/packages/security.php and integrates into the Symfony DI system.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/access_token.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/security.php\\nuse App\\Security\\AccessTokenHandler;\\nuse Symfony\\Config\\SecurityConfig;\\n\\nreturn static function (SecurityConfig $security): void {\\n    $security->firewall('main')\\n        ->accessToken()\\n            ->tokenHandler(AccessTokenHandler::class)\\n    ;\\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Logout Cookie Deletion in Symfony Security\nDESCRIPTION: This snippet demonstrates how to configure the deletion of specific cookies upon user logout in Symfony's security configuration. It shows the setup for deleting multiple cookies with optional path and domain settings.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/security.rst#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\nsecurity:\n    # ...\n\n    firewalls:\n        main:\n            # ...\n            logout:\n                delete_cookies:\n                    cookie1-name: null\n                    cookie2-name:\n                        path: '/'\n                    cookie3-name:\n                        path: null\n                        domain: example.com\n```\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/security.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<srv:container xmlns=\"http://symfony.com/schema/dic/security\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:srv=\"http://symfony.com/schema/dic/services\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <config>\n        <!-- ... -->\n\n        <firewall name=\"main\">\n            <!-- ... -->\n            <logout path=\"...\">\n                <delete-cookie name=\"cookie1-name\"/>\n                <delete-cookie name=\"cookie2-name\" path=\"/\"/>\n                <delete-cookie name=\"cookie3-name\" domain=\"example.com\"/>\n            </logout>\n        </firewall>\n    </config>\n</srv:container>\n```\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/security.php\n\n// ...\n\nreturn static function (SecurityConfig $securityConfig): void {\n    // ...\n\n    $securityConfig->firewall('main')\n        ->logout()\n            ->deleteCookie('cookie1-name')\n            ->deleteCookie('cookie2-name')\n                ->path('/')\n            ->deleteCookie('cookie3-name')\n                ->path(null)\n                ->domain('example.com');\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Validation with PHP Attributes\nDESCRIPTION: Implementing validation constraints using PHP attributes for Address and Author entities.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Valid.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Address.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Address\n{\n    #[Assert\\NotBlank]\n    protected string $street;\n\n    #[Assert\\NotBlank]\n    #[Assert\\Length(max: 5)]\n    protected string $zipCode;\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Author.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Author\n{\n    #[Assert\\NotBlank]\n    #[Assert\\Length(min: 4)]\n    protected string $firstName;\n\n    #[Assert\\NotBlank]\n    protected string $lastName;\n\n    protected Address $address;\n}\n```\n\n----------------------------------------\n\nTITLE: Invalidating Tagged Cache Items in Symfony\nDESCRIPTION: Shows how to invalidate cached items using their associated tags through TagAwareCacheInterface::invalidateTags method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/cache/cache_invalidation.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// invalidate all items related to `tag_1` or `tag_3`\n$cache->invalidateTags(['tag_1', 'tag_3']);\n\n// if you know the cache key, you can also delete the item directly\n$cache->delete('cache_key');\n```\n\n----------------------------------------\n\nTITLE: Handling Cache Hits and Misses\nDESCRIPTION: Example showing how to check for cache hits and misses using isHit() method and handle both scenarios appropriately.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/cache/cache_items.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$latestNews = $cache->getItem('latest_news');\n\nif (!$latestNews->isHit()) {\n    // do some heavy computation\n    $news = ...;\n    $cache->save($latestNews->set($news));\n} else {\n    $news = $latestNews->get();\n}\n```\n\n----------------------------------------\n\nTITLE: Event Subscriber for Post-Method Processing\nDESCRIPTION: Implementation of an event subscriber that listens to the mailer.post_send event and modifies the return value of the method. It demonstrates how to intercept and modify method outputs without changing the original class.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/event_dispatcher.rst#2025-04-22_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n// src/EventSubscriber/MailPostSendSubscriber.php\nnamespace App\\EventSubscriber;\n\nuse App\\Event\\AfterSendMailEvent;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n\nclass MailPostSendSubscriber implements EventSubscriberInterface\n{\n    public function onMailerPostSend(AfterSendMailEvent $event): void\n    {\n        $returnValue = $event->getReturnValue();\n        // modify the original $returnValue value\n\n        $event->setReturnValue($returnValue);\n    }\n\n    public static function getSubscribedEvents(): array\n    {\n        return [\n            'mailer.post_send' => 'onMailerPostSend',\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Symfony Console Cursor\nDESCRIPTION: Example showing how to create a console command that uses the Cursor helper to position and write text at specific coordinates. This demonstrates basic cursor movement and text output functionality.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/helpers/cursor.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Command/MyCommand.php\nnamespace App\\Command;\n\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Cursor;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\nclass MyCommand extends Command\n{\n    // ...\n\n    public function execute(InputInterface $input, OutputInterface $output): int\n    {\n        // ...\n\n        $cursor = new Cursor($output);\n\n        // moves the cursor to a specific column (1st argument) and\n        // row (2nd argument) position\n        $cursor->moveToPosition(7, 11);\n\n        // and write text on this position using the output\n        $output->write('My text');\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting Results in Symfony Finder\nDESCRIPTION: Shows various methods for sorting finder results by name, extension, size, type, and access/modification times.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/finder.rst#2025-04-22_snippet_34\n\nLANGUAGE: php\nCODE:\n```\n$finder->sortByName();\n$finder->sortByCaseInsensitiveName();\n$finder->sortByExtension();\n$finder->sortBySize();\n$finder->sortByType();\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Validation in YAML Format for Symfony\nDESCRIPTION: Example of validating an email property using YAML configuration in Symfony. This demonstrates how to define the validation constraint with a custom error message in a separate validation file.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Email.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Author:\n    properties:\n        email:\n            - Email:\n                message: The email \"{{ value }}\" is not a valid email.\n```\n\n----------------------------------------\n\nTITLE: Installing Vendor Dependencies for Production\nDESCRIPTION: Command to install production dependencies with optimized autoloader configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/deployment.rst#2025-04-22_snippet_3\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer install --no-dev --optimize-autoloader\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Password Strength Estimator in PHP\nDESCRIPTION: Illustrates how to configure the PasswordStrengthValidator service to use a custom estimator using PHP.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/PasswordStrength.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nuse Symfony\\Component\\Validator\\Constraints\\PasswordStrengthValidator;\n\nreturn function (ContainerConfigurator $container): void {\n    $services = $container->services();\n\n    $services->set('custom_password_strength_estimator', CustomPasswordStrengthEstimator::class);\n\n    $services->set(PasswordStrengthValidator::class)\n        ->args([closure('custom_password_strength_estimator')]);\n};\n```\n\n----------------------------------------\n\nTITLE: JSON Manifest Asset Configuration\nDESCRIPTION: Example of asset manifest configuration in JSON format for use with Webpack or similar tools\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/asset.rst#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"css/app.css\": \"build/css/app.b916426ea1d10021f3f17ce8031f93c2.css\",\n    \"js/app.js\": \"build/js/app.13630905267b809161e71d0f8a0c017b.js\",\n    \"...\": \"...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Unique Constraint on Entity Property in PHP\nDESCRIPTION: Example of applying the Unique constraint to a property of type array in a PHP entity class using attributes.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Unique.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Person.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Person\n{\n    #[Assert\\Unique]\n    protected array $contactEmails;\n}\n```\n\n----------------------------------------\n\nTITLE: Forcing Attribute Values with Framework Config in PHP\nDESCRIPTION: PHP configuration using FrameworkConfig to force specific attribute values on elements. This example demonstrates setting 'rel=\"noopener noreferrer\"' on all anchor elements in the HTML sanitizer.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/html_sanitizer.rst#2025-04-22_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/framework.php\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework): void {\n    $framework->htmlSanitizer()\n        ->sanitizer('app.post_sanitizer')\n            ->forceAttribute('a', ['rel' => 'noopener noreferrer'])\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Converting Emojis to Slack Short Codes in PHP\nDESCRIPTION: PHP code showing how to use EmojiTransliterator to convert emojis to Slack short codes.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/emoji.rst#2025-04-22_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n$transliterator = EmojiTransliterator::create('emoji-slack');\n$transliterator->transliterate('Menus with 🥗 or 🧆');\n// => 'Menus with :green_salad: or :falafel:'\n```\n\n----------------------------------------\n\nTITLE: Registering Twig Extensions\nDESCRIPTION: Examples of registering Twig extensions with optional priority settings using the twig.extension tag.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/dic_tags.rst#2025-04-22_snippet_37\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n    App\\Twig\\AppExtension:\n        tags: [twig.extension]\n\n    App\\Twig\\AnotherExtension:\n        tags: [{ name: twig.extension, priority: -100 }]\n```\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"App\\Twig\\AppExtension\">\n            <tag name=\"twig.extension\"/>\n        </service>\n\n        <service id=\"App\\Twig\\AnotherExtension\">\n            <tag name=\"twig.extension\" priority=\"-100\"/>\n        </service>\n    </services>\n</container>\n```\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Twig\\AnotherExtension;\nuse App\\Twig\\AppExtension;\n\n$container\n    ->register(AppExtension::class)\n    ->addTag('twig.extension')\n;\n$container\n    ->register(AnotherExtension::class)\n    ->addTag('twig.extension', ['priority' => -100])\n;\n```\n\n----------------------------------------\n\nTITLE: Creating Twig Extension in Symfony\nDESCRIPTION: Demonstrates how to create a custom Twig extension in Symfony to add a new 'greet' filter. This showcases Symfony's autoconfiguration feature for Twig extensions.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/quick_tour/the_architecture.rst#2025-04-22_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n// src/Twig/GreetExtension.php\nnamespace App\\Twig;\n\nuse App\\GreetingGenerator;\nuse Twig\\Extension\\AbstractExtension;\nuse Twig\\TwigFilter;\n\nclass GreetExtension extends AbstractExtension\n{\n    public function __construct(\n        private GreetingGenerator $greetingGenerator,\n    ) {\n    }\n\n    public function getFilters(): array\n    {\n        return [\n            new TwigFilter('greet', [$this, 'greetUser']),\n        ];\n    }\n\n    public function greetUser(string $name): string\n    {\n        $greeting =  $this->greetingGenerator->getRandomGreeting();\n\n        return \"$greeting $name!\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Symfony VarDumper Caster\nDESCRIPTION: A basic caster function implementation that accepts an object, array, Stub object, nesting flag, and filter constant. This caster template allows for customizing the array representation of objects during var dumping.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/var_dumper.rst#2025-04-22_snippet_29\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\VarDumper\\Cloner\\Stub;\n\nfunction myCaster(mixed $object, array $array, Stub $stub, bool $isNested, int $filter): array\n{\n    // ... populate/alter $array to your needs\n\n    return $array;\n}\n```\n\n----------------------------------------\n\nTITLE: Form Type Configuration for Collections in Symfony\nDESCRIPTION: PHP code showing how to configure a CollectionType field in a Symfony form. The by_reference option is set to false to ensure the addTag method is called for each item in the collection.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/form_collections.rst#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n// src/Form/TaskType.php\n\n// ...\npublic function buildForm(FormBuilderInterface $builder, array $options): void\n{\n    // ...\n\n    $builder->add('tags', CollectionType::class, [\n        // ...\n        'by_reference' => false,\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom Monolog Logger Channel in XML\nDESCRIPTION: XML service configuration demonstrating how to register the `App\\Log\\CustomLogger` service, inject the `logger` service as an argument (referencing the default logger service), and apply the `monolog.logger` tag. The `channel` attribute is set to `app`, associating this service with the 'app' Monolog channel.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/dic_tags.rst#2025-04-22_snippet_16\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"App\\Log\\CustomLogger\">\n            <argument type=\"service\" id=\"logger\"/>\n            <tag name=\"monolog.logger\" channel=\"app\"/>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Querying Property List from Class Definition (Symfony, PHP)\nDESCRIPTION: Demonstrates retrieving an array of property names from a class using getProperties. This requires the class name and a configured PropertyInfoExtractor. Returns a string array representing property names.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/property_info.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$properties = $propertyInfo->getProperties($class);\n/*\n    Example Result\n    --------------\n    array(3) {\n        [0] => string(8) \"username\"\n        [1] => string(8) \"password\"\n        [2] => string(6) \"active\"\n    }\n*/\n```\n\n----------------------------------------\n\nTITLE: Defining DateTime Constraint using PHP\nDESCRIPTION: Example of using the DateTime constraint with PHP in a Symfony entity class. It demonstrates how to add the constraint using the loadValidatorMetadata method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/DateTime.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Author.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Author\n{\n   /**\n    * @var string A \"Y-m-d H:i:s\" formatted value\n    */\n    protected string $createdAt;\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('createdAt', new Assert\\DateTime());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Inky Email Framework in Twig Templates\nDESCRIPTION: Example of using the inky_to_html Twig filter to create responsive email layouts with the Inky email framework, which provides a simpler syntax for complex email structures.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_53\n\nLANGUAGE: html+twig\nCODE:\n```\n{% apply inky_to_html %}\n    <container>\n        <row class=\"header\">\n            <columns>\n                <spacer size=\"16\"></spacer>\n                <h1 class=\"text-center\">Welcome {{ email.toName }}!</h1>\n            </columns>\n\n            {# ... #}\n        </row>\n    </container>\n{% endapply %}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Symfony Service Alias for Autowiring (YAML, XML, PHP)\nDESCRIPTION: Defines a service alias in Symfony's dependency injection configuration. This ensures that when `App\\Util\\TransformerInterface` is type-hinted, the specific service `App\\Util\\Rot13Transformer` is injected, resolving potential autowiring ambiguity if other services also implement this interface.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/autowiring.rst#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nservices:\n    # ...\n\n    App\\Util\\Rot13Transformer: ~\n\n    # the App\\Util\\Rot13Transformer service will be injected when\n    # an App\\Util\\TransformerInterface type-hint is detected\n    App\\Util\\TransformerInterface: '@App\\Util\\Rot13Transformer'\n```\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <!-- ... -->\n        <service id=\"App\\Util\\Rot13Transformer\"/>\n\n        <service id=\"App\\Util\\TransformerInterface\" alias=\"App\\Util\\Rot13Transformer\"/>\n    </services>\n</container>\n```\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nuse App\\Util\\Rot13Transformer;\nuse App\\Util\\TransformerInterface;\n\nreturn function(ContainerConfigurator $container): void {\n    // ...\n\n    $services->set(Rot13Transformer::class);\n\n    // the App\\Util\\Rot13Transformer service will be injected when\n    // an App\\Util\\TransformerInterface type-hint is detected\n    $services->alias(TransformerInterface::class, Rot13Transformer::class);\n};\n```\n\n----------------------------------------\n\nTITLE: Handling DateInvalidTimeZoneException with Symfony Clock in PHP\nDESCRIPTION: Demonstrates exception handling for invalid timezones when using the Symfony Clock component. It shows catching the `\\DateInvalidTimeZoneException` (available natively in PHP 8.3 or via `symfony/polyfill-php83`) that can be thrown when attempting to set an invalid timezone string using `Clock::get()->withTimeZone()`. Requires the Symfony Clock component and either PHP 8.3+ or the `symfony/polyfill-php83` package.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/clock.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n    $userInput = 'invalid timezone';\n\n    try {\n        $clock = Clock::get()->withTimeZone($userInput);\n    } catch (\\DateInvalidTimeZoneException $exception) {\n        // ...\n    }\n```\n\n----------------------------------------\n\nTITLE: Adapting Symfony Kernel for Multi-Application Support in PHP\nDESCRIPTION: Modifies the main Kernel class (`src/Kernel.php`, potentially namespaced as `Shared`) to handle multiple applications. It introduces an `$id` property to identify the current application, adjusts methods like `getCacheDir()` and `getLogDir()` for separation, and updates `registerBundles()`, `configureContainer()`, and `configureRoutes()` to load both shared resources and application-specific resources based on the provided `$id`.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/multiple_kernels.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// src/Kernel.php\nnamespace Shared;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Kernel\\MicroKernelTrait;\nuse Symfony\\Component\\DependencyInjection\\Loader\\Configurator\\ContainerConfigurator;\nuse Symfony\\Component\\HttpKernel\\Kernel as BaseKernel;\nuse Symfony\\Component\\Routing\\Loader\\Configurator\\RoutingConfigurator;\n\nclass Kernel extends BaseKernel\n{\n    use MicroKernelTrait;\n\n    public function __construct(string $environment, bool $debug, private string $id)\n    {\n        parent::__construct($environment, $debug);\n    }\n\n    public function getSharedConfigDir(): string\n    {\n        return $this->getProjectDir().'/config';\n    }\n\n    public function getAppConfigDir(): string\n    {\n        return $this->getProjectDir().'/apps/'.$this->id.'/config';\n    }\n\n    public function registerBundles(): iterable\n    {\n        $sharedBundles = require $this->getSharedConfigDir().'/bundles.php';\n        $appBundles = require $this->getAppConfigDir().'/bundles.php';\n\n        // load common bundles, such as the FrameworkBundle, as well as\n        // specific bundles required exclusively for the app itself\n        foreach (array_merge($sharedBundles, $appBundles) as $class => $envs) {\n            if ($envs[$this->environment] ?? $envs['all'] ?? false) {\n                yield new $class();\n            }\n        }\n    }\n\n    public function getCacheDir(): string\n    {\n        // divide cache for each application\n        return ($_SERVER['APP_CACHE_DIR'] ?? $this->getProjectDir().'/var/cache').'/'.$this->id.'/'.$this->environment;\n    }\n\n    public function getLogDir(): string\n    {\n        // divide logs for each application\n        return ($_SERVER['APP_LOG_DIR'] ?? $this->getProjectDir().'/var/log').'/'.$this->id;\n    }\n\n    protected function configureContainer(ContainerConfigurator $container): void\n    {\n        // load common config files, such as the framework.yaml, as well as\n        // specific configs required exclusively for the app itself\n        $this->doConfigureContainer($container, $this->getSharedConfigDir());\n        $this->doConfigureContainer($container, $this->getAppConfigDir());\n    }\n\n    protected function configureRoutes(RoutingConfigurator $routes): void\n    {\n        // load common routes files, such as the routes/framework.yaml, as well as\n        // specific routes required exclusively for the app itself\n        $this->doConfigureRoutes($routes, $this->getSharedConfigDir());\n        $this->doConfigureRoutes($routes, $this->getAppConfigDir());\n    }\n\n    private function doConfigureContainer(ContainerConfigurator $container, string $configDir): void\n    {\n        $container->import($configDir.'/{packages}/*.{php,yaml}');\n        $container->import($configDir.'/{packages}/'.$this->environment.'/*.{php,yaml}');\n\n        if (is_file($configDir.'/services.yaml')) {\n            $container->import($configDir.'/services.yaml');\n            $container->import($configDir.'/{services}_'.$this->environment.'.yaml');\n        } else {\n            $container->import($configDir.'/{services}.php');\n        }\n    }\n\n    private function doConfigureRoutes(RoutingConfigurator $routes, string $configDir): void\n    {\n        $routes->import($configDir.'/{routes}/'.$this->environment.'/*.{php,yaml}');\n        $routes->import($configDir.'/{routes}/*.{php,yaml}');\n\n        if (is_file($configDir.'/routes.yaml')) {\n            $routes->import($configDir.'/routes.yaml');\n        } else {\n            $routes->import($configDir.'/{routes}.php');\n        }\n\n        if (false !== ($fileName = (new \\ReflectionObject($this))->getFileName())) {\n            $routes->import($fileName, 'attribute');\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Form Collection Type Structure in PHP\nDESCRIPTION: Example of nested form collections with TaskManagerType containing TaskListType which contains TaskType. Shows how to create hierarchical form structures and set custom block names for collections.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/form_themes.rst#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nclass TaskManagerType extends AbstractType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options = []): void\n    {\n        // ...\n        $builder->add('taskLists', CollectionType::class, [\n            'entry_type' => TaskListType::class,\n            'block_name' => 'task_lists',\n        ]);\n    }\n}\n\nclass TaskListType extends AbstractType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options = []): void\n    {\n        // ...\n        $builder->add('tasks', CollectionType::class, [\n            'entry_type' => TaskType::class,\n        ]);\n    }\n}\n\nclass TaskType extends AbstractType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options = []): void\n    {\n        $builder->add('name');\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Environment Variables with debug:dotenv Command\nDESCRIPTION: Command to display information about how Symfony parses different .env files and which environment variables are set from each file.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration.rst#2025-04-22_snippet_36\n\nLANGUAGE: terminal\nCODE:\n```\n$ php bin/console debug:dotenv\n\nDotenv Variables & Files\n========================\n\nScanned Files (in descending priority)\n--------------------------------------\n\n* ⨯ .env.local.php\n* ⨯ .env.dev.local\n* ✓ .env.dev\n* ⨯ .env.local\n* ✓ .env\n\nVariables\n---------\n\n---------- ------- ---------- ------\n Variable   Value   .env.dev   .env\n---------- ------- ---------- ------\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Doctrine Entity for Multiple State Marking Store\nDESCRIPTION: Shows how to configure a Doctrine entity to use a JSON column for storing multiple workflow states simultaneously, which is necessary for workflows as opposed to state machines.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/workflow.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/BlogPost.php\nnamespace App\\Entity;\n\nuse Doctrine\\DBAL\\Types\\Types;\nuse Doctrine\\ORM\\Mapping as ORM;\n\n#[ORM\\Entity]\nclass BlogPost\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private int $id;\n\n    #[ORM\\Column(type: Types::JSON)]\n    private array $currentPlaces;\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Twig Function Extension Class\nDESCRIPTION: Creates a custom Twig extension class that defines an area calculation function. Demonstrates implementing a custom Twig function.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/templates.rst#2025-04-22_snippet_50\n\nLANGUAGE: php\nCODE:\n```\n// src/Twig/AppExtension.php\nnamespace App\\Twig;\n\nuse Twig\\Extension\\AbstractExtension;\nuse Twig\\TwigFunction;\n\nclass AppExtension extends AbstractExtension\n{\n    public function getFunctions(): array\n    {\n        return [\n            new TwigFunction('area', [$this, 'calculateArea']),\n        ];\n    }\n\n    public function calculateArea(int $width, int $length): int\n    {\n        return $width * $length;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Closures for Attribute and Subject in #[IsGranted] (PHP)\nDESCRIPTION: Introduced in Symfony 7.3 (requires PHP 8.5), this example shows using PHP closures for both the `attribute` (the authorization logic) and the `subject` (data preparation) arguments of the `#[IsGranted]` attribute. The `subject` closure receives controller arguments (`$args`) and returns data needed by the `attribute` closure. The `attribute` closure receives an `IsGrantedContext` object (providing access to `user`, `token`, etc.) and the result of the `subject` closure. This offers maximum flexibility for complex, dynamic authorization.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/expressions.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/MyController.php\nnamespace App\\Controller;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Security\\Http\\Attribute\\IsGranted;\nuse Symfony\\Component\\Security\\Http\\Attribute\\IsGrantedContext;\n\nclass MyController extends AbstractController\n{\n    #[IsGranted(static function (IsGrantedContext $context, mixed $subject) {\n        return $context->user === $subject['post']->getAuthor();\n    }, subject: static function (array $args) {\n        return [\n            'post' => $args['post'],\n        ];\n    })]\n    public function index($post): Response\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing PHP Constants from YAML in PHP\nDESCRIPTION: Demonstrates parsing YAML containing PHP constants. The `Yaml::PARSE_CONSTANT` flag must be used, and constants within the YAML must be tagged with `!php/const` to be resolved to their actual PHP values during parsing. Untagged constant names are treated as strings.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/yaml.rst#2025-04-22_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$yaml = '{ foo: PHP_INT_SIZE, bar: !php/const PHP_INT_SIZE }';\n$parameters = Yaml::parse($yaml, Yaml::PARSE_CONSTANT);\n// $parameters = ['foo' => 'PHP_INT_SIZE', 'bar' => 8];\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Handler with DSN in PHP\nDESCRIPTION: Example of configuring session handlers using DSN strings in PHP. Shows how to use environment variables and direct values to set the session handler.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_75\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/framework.php\nuse function Symfony\\Component\\DependencyInjection\\Loader\\Configurator\\env;\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework): void {\n    // ...\n\n    $framework->session()\n        // a few possible examples\n        ->handlerId('redis://localhost')\n        ->handlerId(env('REDIS_URL'))\n        ->handlerId(env('DATABASE_URL'))\n```\n\n----------------------------------------\n\nTITLE: Preparing for Virtual Proxies with ProxyHelper - PHP\nDESCRIPTION: Introduces usage of Symfony\\Component\\VarExporter\\ProxyHelper to generate virtual proxy class code, enabling lazy initialization through interface substitution. Proxy classes allow on-demand loading and can be substituted wherever the interface is used, leveraging the Liskov Substitution Principle. Requires symfony/var-exporter; full example to be defined elsewhere.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/var_exporter.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Hash;\n\nuse Symfony\\Component\\VarExporter\\ProxyHelper;\n```\n\n----------------------------------------\n\nTITLE: Creating a Form Theme in a Separate Template in Twig\nDESCRIPTION: Example of defining a form theme in a dedicated template file. Shows how to create a reusable theme that can be applied globally or to specific forms.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/form_themes.rst#2025-04-22_snippet_13\n\nLANGUAGE: twig\nCODE:\n```\n{# templates/form/my_theme.html.twig #}\n{% block integer_widget %}\n\n    {# ... add all the HTML, CSS and JavaScript needed to render this field #}\n\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Using Symfony Workflow for Blog Publishing\nDESCRIPTION: Demonstrates how to use Symfony Workflow to manage state transitions for a blog post entity. It shows checking allowed actions, applying transitions, and handling exceptions.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/workflow.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Entity\\BlogPost;\nuse Symfony\\Component\\Workflow\\Exception\\LogicException;\n\n$post = new BlogPost();\n// you don't need to set the initial marking with code; this is configured\n// in the workflow with the 'initial_marking' option\n\n$workflow = $this->container->get('workflow.blog_publishing');\n$workflow->can($post, 'publish'); // False\n$workflow->can($post, 'to_review'); // True\n\n// Update the currentState on the post\ntry {\n    $workflow->apply($post, 'to_review');\n} catch (LogicException $exception) {\n    // ...\n}\n\n// See all the available transitions for the post in the current state\n$transitions = $workflow->getEnabledTransitions($post);\n// See a specific available transition for the post in the current state\n$transition = $workflow->getEnabledTransition($post, 'publish');\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Object Property Access in Symfony Expression Language\nDESCRIPTION: Shows how to access public properties of objects using dot notation in expressions\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/formats/expression_language.rst#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nclass Apple {\n    public string $variety;\n}\n\n$apple = new Apple();\n$apple->variety = 'Honeycrisp';\n\nvar_dump($expressionLanguage->evaluate(\n    'fruit.variety',\n    [\n        'fruit' => $apple,\n    ]\n));\n```\n\n----------------------------------------\n\nTITLE: Configuring Symfony Framework with Environment Variables in YAML\nDESCRIPTION: This YAML snippet demonstrates how to use environment variables in Symfony configuration, specifically setting the application secret using the APP_SECRET environment variable.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration.rst#2025-04-22_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/framework.yaml\nframework:\n    # by convention the env var names are always uppercase\n    secret: '%env(APP_SECRET)%'\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Applying NotBlank Constraint using PHP Attributes in Symfony\nDESCRIPTION: This snippet demonstrates how to apply the NotBlank constraint to the firstName property of an Author class using PHP attributes. It ensures that the firstName is not blank.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/NotBlank.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Author.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Author\n{\n    #[Assert\\NotBlank]\n    protected string $firstName;\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Timezone IDs with Symfony Intl\nDESCRIPTION: Example showing how to check if a timezone ID is valid using the Timezones::exists method as an alternative to catching MissingResourceException.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/intl.rst#2025-04-22_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n$isValidTimezone = Timezones::exists($timezoneId);\n```\n\n----------------------------------------\n\nTITLE: Creating an Environment-Specific Alias using AsAlias Attribute (Single Env)\nDESCRIPTION: Demonstrates using the `when` argument within the `#[AsAlias]` attribute to make the alias (`app.mailer`) available only in a specific configuration environment ('dev'). This feature requires Symfony 7.3 or later.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/alias_private.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// src/Mail/PhpMailer.php\nnamespace App\\Mail;\n\n// ...\nuse Symfony\\Component\\DependencyInjection\\Attribute\\AsAlias;\n\n#[AsAlias(id: 'app.mailer', when: 'dev')]\nclass PhpMailer\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Service Using Non-Static Factory - YAML Configuration\nDESCRIPTION: This YAML snippet creates a NewsletterManager using a non-static factory service. First, NewsletterManagerFactory is registered as a service, then that service's method 'createNewsletterManager' is used as a factory by referencing its service id in the factory array. Designed for 'config/services.yaml' and requires the factory class to exist.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/factories.rst#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nservices:\n    # ...\n\n    # first, create a service for the factory\n    App\\Email\\NewsletterManagerFactory: ~\n\n    # second, use the factory service as the first argument of the 'factory'\n    # option and the factory method as the second argument\n    App\\Email\\NewsletterManager:\n        factory: ['@App\\Email\\NewsletterManagerFactory', 'createNewsletterManager']\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Mailer Envelope with Allowed Recipients in XML\nDESCRIPTION: XML configuration for the mailer envelope that redirects emails to a specific address with exceptions for allowed recipients, including support for regular expressions.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_73\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/mailer.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <!-- ... -->\n    <framework:config>\n        <framework:mailer>\n            <framework:envelope>\n                <framework:recipient>youremail@example.com</framework:recipient>\n                <framework:allowed-recipient>internal@example.com</framework:allowed-recipient>\n                <!-- you can also use regular expression to define allowed recipients -->\n                <framework:allowed-recipient>internal-.*@example.(com|fr)</framework:allowed-recipient>\n            </framework:envelope>\n        </framework:mailer>\n    </framework:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Url Constraint with TLD Requirement using YAML\nDESCRIPTION: Configures validation for the `App\\Entity\\Website` entity using YAML. Applies the `Url` constraint to the `homepageUrl` property, setting `requireTld` to true and providing a custom `tldMessage` ('Add at least one TLD to the {{ value }} URL.'). This configuration is typically placed in `config/validator/validation.yaml`.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Url.rst#2025-04-22_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Website:\n    properties:\n        homepageUrl:\n            - Url:\n                requireTld: true\n                tldMessage: Add at least one TLD to the {{ value }} URL.\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Form Extensions for Testing in PHP\nDESCRIPTION: Example showing how to add custom form extensions for testing, specifically demonstrating the ValidatorExtension integration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/unit_testing.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Tests\\Form\\Type;\n\nuse Symfony\\Component\\Form\\Extension\\Validator\\ValidatorExtension;\nuse Symfony\\Component\\Validator\\Validation;\n\nclass TestedTypeTest extends TypeTestCase\n{\n    protected function getExtensions(): array\n    {\n        $validator = Validation::createValidator();\n\n        // or if you also need to read constraints from attributes\n        $validator = Validation::createValidatorBuilder()\n            ->enableAttributeMapping()\n            ->getValidator();\n\n        return [\n            new ValidatorExtension($validator),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Global Variables in Twig Templates\nDESCRIPTION: Demonstrates how to use globally defined variables in Twig templates.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/templates.rst#2025-04-22_snippet_19\n\nLANGUAGE: html+twig\nCODE:\n```\n<p>The Google tracking code is: {{ ga_tracking }}</p>\n```\n\n----------------------------------------\n\nTITLE: Configuring Monolog HTTP Code Exclusion in PHP\nDESCRIPTION: PHP configuration for excluding HTTP codes 403 and 404 from Monolog logging using the Symfony Config system\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/logging/monolog_exclude_http_codes.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/prod/monolog.php\nuse Symfony\\Config\\MonologConfig;\n\nreturn static function (MonologConfig $monolog): void {\n    $mainHandler = $monolog->handler('main')\n        // ...\n        ->type('fingers_crossed')\n        ->handler('...')\n    ;\n\n    $mainHandler->excludedHttpCode()->code(403);\n    $mainHandler->excludedHttpCode()->code(404);\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML Sanitizer Baselines in YAML\nDESCRIPTION: Demonstrates how to configure HTML sanitizer baselines for safe or static elements in YAML.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/html_sanitizer.rst#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/html_sanitizer.yaml\nframework:\n    html_sanitizer:\n        sanitizers:\n            app.post_sanitizer:\n                # enable either of these\n                allow_safe_elements: true\n                allow_static_elements: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Bootstrap 4 Form Theme in Symfony (PHP)\nDESCRIPTION: This PHP configuration snippet sets up Symfony to use the Bootstrap 4 form theme globally for all forms in the application.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/bootstrap4.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/twig.php\nuse Symfony\\Config\\TwigConfig;\n\nreturn static function (TwigConfig $twig): void {\n    $twig->formThemes(['bootstrap_4_layout.html.twig']);\n\n    // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Overriding File Widget Template in Twig\nDESCRIPTION: This Twig template extends the base form layout and overrides the file_widget block to display an image next to the file input if an image URL is provided.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/create_form_type_extension.rst#2025-04-22_snippet_3\n\nLANGUAGE: Twig\nCODE:\n```\n{# templates/form/fields.html.twig #}\n{% extends 'form_div_layout.html.twig' %}\n\n{% block file_widget %}\n    {{ block('form_widget') }}\n    {% if image_url is defined and image_url is not null %}\n        <img src=\"{{ asset(image_url) }}\"/>\n    {% endif %}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Getting Timezones by Country with Symfony Intl\nDESCRIPTION: Example showing how to retrieve timezones for a specific country using the forCountryCode method, which returns an array of timezone IDs for the given country code.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/intl.rst#2025-04-22_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n// unlike language codes, country codes are always uppercase (CL = Chile)\n$timezones = Timezones::forCountryCode('CL');\n// => ['America/Punta_Arenas', 'America/Santiago', 'Pacific/Easter']\n```\n\n----------------------------------------\n\nTITLE: Service Configuration in XML\nDESCRIPTION: Example of configuring services using XML format with parameters definition.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/dependency_injection.rst#2025-04-22_snippet_6\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\"\n>\n    <parameters>\n        <!-- ... -->\n        <parameter key=\"mailer.transport\">sendmail</parameter>\n    </parameters>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Using Versioned Assets in Twig Templates\nDESCRIPTION: This Twig snippet demonstrates how to use the asset() function to reference versioned assets in Symfony Twig templates.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/versioning.rst#2025-04-22_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n<img src=\"{{ asset('build/images/logo.png') }}\" alt=\"ACME logo\">\n```\n\n----------------------------------------\n\nTITLE: Defining Translations in PHP Files in Symfony\nDESCRIPTION: Example of defining translations in a PHP file for the 'messages.en.php' translation catalog. This shows how to create a simple translation mapping between a message ID and its translation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/translation.rst#2025-04-22_snippet_43\n\nLANGUAGE: php\nCODE:\n```\n// translations/messages.en.php\nreturn [\n    'Symfony is great' => 'Symfony is great',\n];\n```\n\n----------------------------------------\n\nTITLE: Dumping a Multi-line String with VarDumper (PHP)\nDESCRIPTION: Illustrates dumping a multi-line string containing special characters, including a non-UTF-8 character (`\\xE9`). The `dump()` output (shown in the accompanying image) represents the multi-line string clearly and indicates non-UTF-8 strings with a `b` prefix. Hovering over the string in the output would typically show its length.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/var_dumper.rst#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$var = \"This is a multi-line string.\\n\";\n$var .= \"Hovering a string shows its length.\\n\";\n$var .= \"The length of UTF-8 strings is counted in terms of UTF-8 characters.\\n\";\n$var .= \"Non-UTF-8 strings length are counted in octet size.\\n\";\n$var .= \"Because of this `\\xE9` octet (\\\\xE9),\\n\";\n$var .= \"this string is not UTF-8 valid, thus the `b` prefix.\\n\";\ndump($var);\n```\n\n----------------------------------------\n\nTITLE: Optimizing PHP Realpath Cache Configuration\nDESCRIPTION: PHP configuration for optimizing the realpath cache, which improves performance for applications that open many PHP files like Symfony projects.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/performance.rst#2025-04-22_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\n; php.ini\n; maximum memory allocated to store the results\nrealpath_cache_size=4096K\n\n; save the results for 10 minutes (600 seconds)\nrealpath_cache_ttl=600\n```\n\n----------------------------------------\n\nTITLE: Using Autowire Attribute with Interface Proxying\nDESCRIPTION: Demonstrates using the Autowire attribute to define specific interfaces to proxy when using lazy services, supporting union types.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/lazy_services.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\npublic function __construct(\n    #[Autowire(service: 'foo', lazy: FooInterface::class)]\n    FooInterface|BarInterface $foo,\n) {\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Lazy User Loading in Symfony Firewall (PHP)\nDESCRIPTION: This PHP configuration enables lazy user loading in a Symfony firewall. The lazy method is called on the firewall configuration object with a true argument, which means the user will only be loaded and the session started when the User object is actually accessed.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/security.rst#2025-04-22_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/security.php\nuse Symfony\\Config\\SecurityConfig;\n\nreturn static function (SecurityConfig $security): void {\n    $security->firewall('main')\n        ->lazy(true);\n    // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Global Email Signing Configuration in YAML\nDESCRIPTION: YAML configuration for global DKIM and S/MIME signing settings in Symfony.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_57\n\nLANGUAGE: yaml\nCODE:\n```\nframework:\n    mailer:\n        dkim_signer:\n            key: 'file://%kernel.project_dir%/var/certificates/dkim.pem'\n            domain: 'symfony.com'\n            select: 's1'\n        smime_signer:\n            key: '%kernel.project_dir%/var/certificates/smime.key'\n            certificate: '%kernel.project_dir%/var/certificates/smime.crt'\n            passphrase: ''\n```\n\n----------------------------------------\n\nTITLE: Fetching Lists of Entities with MapEntity Expression\nDESCRIPTION: Shows how to use the expr option to return a list of entities instead of a single entity. The controller argument type is changed to iterable to handle multiple entities.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine.rst#2025-04-22_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n#[Route('/posts_by/{author_id}')]\npublic function authorPosts(\n    #[MapEntity(class: Post::class, expr: 'repository.findBy({\"author\": author_id}, {}, 10)')]\n    iterable $posts\n): Response\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Metadata Headers in Symfony Mailer\nDESCRIPTION: Demonstrates how to add metadata and tag headers to emails using Symfony Mailer component\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_66\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Mailer\\Header\\MetadataHeader;\nuse Symfony\\Component\\Mailer\\Header\\TagHeader;\n\n$email->getHeaders()->add(new TagHeader('password-reset'));\n$email->getHeaders()->add(new MetadataHeader('Color', 'blue'));\n$email->getHeaders()->add(new MetadataHeader('Client-ID', '12345'));\n```\n\n----------------------------------------\n\nTITLE: Setting Test Locale with Environment Variable - Bash - bash\nDESCRIPTION: This snippet shows how to set the test locale for the PHPUnit Bridge using the SYMFONY_PHPUNIT_LOCALE environment variable in a .env.test file. Setting the variable ensures locale-sensitive PHP functions behave consistently during tests. The value should be a valid locale string (e.g., 'fr_FR').\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/phpunit_bridge.rst#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nSYMFONY_PHPUNIT_LOCALE=\\\"fr_FR\\\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Desktop Notifications with Options\nDESCRIPTION: Example of customizing desktop notifications with options like icons, sounds, and URLs.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/notifier.rst#2025-04-22_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Notifier\\Bridge\\JoliNotif\\JoliNotifOptions;\n// ...\n\n$options = (new JoliNotifOptions())\n    ->setIconPath('/path/to/icons/error.png')\n    ->setExtraOption('sound', 'sosumi')\n    ->setExtraOption('url', 'https://example.com');\n\n$message = new DesktopMessage('Production is down', <<<CONTENT\n    ❌ Server prod-1 down\n    ❌ Server prod-2 down\n    ✅ Network is up\n    CONTENT, $options);\n\n$texter->send($message);\n```\n\n----------------------------------------\n\nTITLE: Debugging Missing Translations in Symfony\nDESCRIPTION: Shows the debug:translation command output when a message is used in templates but not translated in the French locale. The 'missing' state indicates a translation is needed.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/translation.rst#2025-04-22_snippet_46\n\nLANGUAGE: terminal\nCODE:\n```\n$ php bin/console debug:translation fr\n\n---------  ------------------  ----------------------  -------------------------------\n State      Id                  Message Preview (fr)    Fallback Message Preview (en)\n---------  ------------------  ----------------------  -------------------------------\n missing    Symfony is great    Symfony is great        Symfony is great\n---------  ------------------  ----------------------  -------------------------------\n```\n\n----------------------------------------\n\nTITLE: Overriding Cache Pool Namespace in Symfony (PHP)\nDESCRIPTION: This PHP configuration snippet defines a service `app.cache.adapter.redis` that extends `cache.adapter.redis`. It uses the `tag` method to apply the `cache.pool` tag, providing an array with the `namespace` key set to `my_custom_namespace` to override the automatically generated cache namespace.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/cache.rst#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nreturn function(ContainerConfigurator $container): void {\n    $container->services()\n        // ...\n\n        ->set('app.cache.adapter.redis')\n            ->parent('cache.adapter.redis')\n            ->tag('cache.pool', ['namespace' => 'my_custom_namespace'])\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Url Constraint with TLD Requirement using PHP Code\nDESCRIPTION: Dynamically adds validation constraints to the `Website` entity using the static `loadValidatorMetadata` method. It adds an `Assert\\Url` constraint to the `homepageUrl` property, enabling `requireTld` by setting it to true and defining a specific `tldMessage` ('Add at least one TLD to the {{ value }} URL.'). This method provides programmatic control over validation rules within the entity class itself.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Url.rst#2025-04-22_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Website.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Website\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('homepageUrl', new Assert\\Url(\n            requireTld: true,\n            tldMessage: 'Add at least one TLD to the {{ value }} URL.',\n        ));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Separate Normalization and Denormalization Contexts with YAML in Symfony\nDESCRIPTION: This YAML code specifies separate normalization and denormalization contexts for the createdAt attribute of App\\Model\\Person. The normalization context formats date-time as 'Y-m-d', while the denormalization context uses the PHP constant \\DateTime::RFC3339. Structure and key names must align with Symfony's configuration format.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer.rst#2025-04-22_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\n# config/serializer/person.yaml\nApp\\Model\\Person:\n    attributes:\n        createdAt:\n            contexts:\n                - normalizationContext: { datetime_format: 'Y-m-d' }\n                  denormalizationContext: { datetime_format: !php/const \\DateTime::RFC3339 }\n```\n\n----------------------------------------\n\nTITLE: Applying Form Theme to Single Template\nDESCRIPTION: Twig template code showing how to apply a specific form theme to a single form instance using the form_theme tag.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/form_themes.rst#2025-04-22_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{# this form theme will be applied only to the form of this template #}\n{% form_theme form 'foundation_5_layout.html.twig' %}\n\n{{ form_start(form) }}\n    {# ... #}\n{{ form_end(form) }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Luhn Validation with XML in Symfony\nDESCRIPTION: Example of applying the Luhn validation constraint to a credit card number property using XML configuration. This setup ensures the card number complies with the Luhn algorithm.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Luhn.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\Transaction\">\n        <property name=\"cardNumber\">\n            <constraint name=\"Luhn\">\n                <option name=\"message\">Please check your credit card number.</option>\n            </constraint>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Referencing Images in Twig Templates\nDESCRIPTION: Shows how to reference copied image files in Twig templates using the asset() function. This works after configuring copyFiles in webpack.config.js and ensures proper path resolution.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/copy-files.rst#2025-04-22_snippet_2\n\nLANGUAGE: html+twig\nCODE:\n```\n{# assets/images/logo.png was copied to public/build/images/logo.png #}\n<img src=\"{{ asset('build/images/logo.png') }}\" alt=\"ACME logo\">\n\n{# assets/images/subdir/logo.png was copied to public/build/images/subdir/logo.png #}\n<img src=\"{{ asset('build/images/subdir/logo.png') }}\" alt=\"ACME logo\">\n```\n\n----------------------------------------\n\nTITLE: Configuring Loaders in Webpack Encore\nDESCRIPTION: Shows two equivalent approaches to customize Webpack loaders, specifically extending the eslint-loader to handle Vue files. The first approach directly modifies the webpack configuration object, while the second uses Encore's configureLoaderRule() method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/advanced-config.rst#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Manually\nconst webpackConfig = Encore.getWebpackConfig();\n\nconst eslintLoader = webpackConfig.module.rules.find(rule => rule.loader === 'eslint-loader');\neslintLoader.test = /\\.(jsx?|vue)$/;\n\nreturn webpackConfig;\n\n// Using Encore.configureLoaderRule()\nEncore.configureLoaderRule('eslint', loaderRule => {\n    loaderRule.test = /\\.(jsx?|vue)$/\n});\n\nreturn Encore.getWebpackConfig();\n```\n\n----------------------------------------\n\nTITLE: Configuring CSS Loader in JavaScript\nDESCRIPTION: This JavaScript code configures the CSS loader in Webpack Encore to ignore certain URLs when processing CSS files.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/advanced-config.rst#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Configuring the CSS Loader in Webpack Encore\n// Prevent Webpack from resolving certain URLs in CSS files\nEncore.configureCssLoader((options) => {\n    options.url = {\n        filter: (url) => {\n            // Ignore URLs beginning with /uploads/\n            if (url.startsWith('/uploads/')) {\n                return false;\n            }\n\n            return true; // Process other URLs as usual\n        },\n    };\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Optional Service to Service Subscriber\nDESCRIPTION: Example showing how to include an optional service in a Service Subscriber implementation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/service_subscribers_locators.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Log\\LoggerInterface;\n\npublic static function getSubscribedServices(): array\n{\n    return [\n        // ...\n        '?'.LoggerInterface::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Debug Mode in .env File (Bash)\nDESCRIPTION: Shows how to configure the Symfony application's debug mode using the `APP_DEBUG` environment variable within the `.env` file. Setting it to `0` disables debug mode.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/front_controllers_and_kernel.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# .env\n# set it to 1 to enable the debug mode\nAPP_DEBUG=0\n```\n\n----------------------------------------\n\nTITLE: Configuring Pull Request State Machine in XML\nDESCRIPTION: This XML configuration defines the same pull request state machine as the YAML example. It includes the workflow type, marking store, places, and transitions.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/workflow/workflow-and-state-machine.rst#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/workflow.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\"\n>\n\n    <framework:config>\n        <framework:workflow name=\"pull_request\" type=\"state_machine\">\n            <framework:initial-marking>start</framework:initial-marking>\n\n            <framework:marking-store type=\"method\" property=\"currentPlace\"/>\n\n            <framework:support>App\\Entity\\PullRequest</framework:support>\n\n            <framework:place>start</framework:place>\n            <framework:place>coding</framework:place>\n            <framework:place>test</framework:place>\n            <framework:place>review</framework:place>\n            <framework:place>merged</framework:place>\n            <framework:place>closed</framework:place>\n\n            <framework:transition name=\"submit\">\n                <framework:from>start</framework:from>\n\n                <framework:to>test</framework:to>\n            </framework:transition>\n\n            <framework:transition name=\"update\">\n                <framework:from>coding</framework:from>\n                <framework:from>test</framework:from>\n                <framework:from>review</framework:from>\n\n                <framework:to>test</framework:to>\n            </framework:transition>\n\n            <framework:transition name=\"wait_for_review\">\n                <framework:from>test</framework:from>\n\n                <framework:to>review</framework:to>\n            </framework:transition>\n\n            <framework:transition name=\"request_change\">\n                <framework:from>review</framework:from>\n\n                <framework:to>coding</framework:to>\n            </framework:transition>\n\n            <framework:transition name=\"accept\">\n                <framework:from>review</framework:from>\n\n                <framework:to>merged</framework:to>\n            </framework:transition>\n\n            <framework:transition name=\"reject\">\n                <framework:from>review</framework:from>\n\n                <framework:to>closed</framework:to>\n            </framework:transition>\n\n            <framework:transition name=\"reopen\">\n                <framework:from>closed</framework:from>\n\n                <framework:to>review</framework:to>\n            </framework:transition>\n\n        </framework:workflow>\n\n    </framework:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Collector in YAML for Symfony\nDESCRIPTION: This snippet shows how to configure a data collector service using YAML in Symfony. It demonstrates setting the service class, tagging it as a data collector, specifying an ID, optional template, and priority.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/profiler.rst#2025-04-22_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nservices:\n    App\\DataCollector\\RequestCollector:\n        tags:\n            -\n                name: data_collector\n                # must match the value returned by the getName() method\n                id: 'App\\DataCollector\\RequestCollector'\n                # optional template (it has more priority than the value returned by getTemplate())\n                template: 'data_collector/template.html.twig'\n                # optional priority (positive or negative integer; default = 0)\n                # priority: 300\n```\n\n----------------------------------------\n\nTITLE: Dumping an ErrorException with Constants using VarDumper (PHP)\nDESCRIPTION: Shows how VarDumper can display the names of constants (like `E_WARNING`) instead of their raw values when dumping objects like `ErrorException`. Hovering over the constant name in the output would typically reveal its actual value (e.g., `2`).\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/var_dumper.rst#2025-04-22_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$var = new \\ErrorException(\n    \"For some objects, properties have special values\\n\"\n    .\",that are best represented as constants, like\\n\"\n    .\"`severity` below. Hovering displays the value (`2`).\\n\",\n    0,\n    E_WARNING\n);\ndump($var);\n```\n\n----------------------------------------\n\nTITLE: Configuring Yaml Constraint with Parser Flags\nDESCRIPTION: Example of applying the Yaml constraint with additional parser flags to enable optional features of the YAML parser when validating contents.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Yaml.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Report.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Yaml\\Yaml;\n\nclass Report\n{\n    #[Assert\\Yaml(\n        message: \"Your configuration doesn't have valid YAML syntax.\",\n        flags: Yaml::PARSE_CONSTANT | Yaml::PARSE_CUSTOM_TAGS | Yaml::PARSE_DATETIME,\n    )]\n    private string $customConfiguration;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Doctrine Token Provider in PHP\nDESCRIPTION: Enables database storage for remember me tokens using Doctrine in PHP configuration. This sets up persistent remember me tokens that are stored in a database table.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/remember_me.rst#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/security.php\nuse Symfony\\Config\\SecurityConfig;\n\nreturn static function (SecurityConfig $security): void {\n    // ...\n    $security->firewall('main')\n        // ...\n        ->rememberMe()\n            // ...\n            ->tokenProvider([\n                'doctrine' => true,\n            ])\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony Messenger Component using Composer - Terminal\nDESCRIPTION: Installs the Symfony Messenger component by requiring it via Composer in a terminal. Composer must be installed as a prerequisite. The command ensures symfony/messenger is added as a dependency to your PHP application and the autoloader is updated. No input parameters are required; the output is dependency installation progress.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/messenger.rst#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require symfony/messenger\n```\n\n----------------------------------------\n\nTITLE: Defining Task Form Type with Tags Field in PHP\nDESCRIPTION: Creates a TaskType form class with a 'tags' field of TextType. This serves as the base for adding a data transformer.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/data_transformers.rst#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n// src/Form/Type/TaskType.php\nnamespace App\\Form\\Type;\n\nuse App\\Entity\\Task;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\TextType;\nuse Symfony\\Component\\Form\\FormBuilderInterface;\nuse Symfony\\Component\\OptionsResolver\\OptionsResolver;\n\n// ...\nclass TaskType extends AbstractType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options): void\n    {\n        $builder->add('tags', TextType::class);\n    }\n\n    public function configureOptions(OptionsResolver $resolver): void\n    {\n        $resolver->setDefaults([\n            'data_class' => Task::class,\n        ]);\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using empty_data in Symfony Controller\nDESCRIPTION: Demonstrates how to create forms with and without data in a Symfony controller, showcasing when empty_data is used.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/use_empty_data.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function index(): Response\n{\n    $blog = ...;\n\n    // $blog is passed in as the data, so the empty_data\n    // option is not needed\n    $form = $this->createForm(BlogType::class, $blog);\n\n    // no data is passed in, so empty_data is\n    // used to get the \"starting data\"\n    $form = $this->createForm(BlogType::class);\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing HtmlDumper Output Limits in PHP\nDESCRIPTION: Demonstrates how to override the default limits for string length and nesting depth in HtmlDumper output. This allows for more control over the amount of information displayed.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/var_dumper.rst#2025-04-22_snippet_26\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\VarDumper\\Dumper\\HtmlDumper;\n\n$output = fopen('php://memory', 'r+b');\n\n$dumper = new HtmlDumper();\n$dumper->dump($var, $output, [\n    // 1 and 160 are the default values for these options\n    'maxDepth' => 1,\n    'maxStringLength' => 160,\n]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Validation Group Resolver Service in PHP\nDESCRIPTION: Creates a service class that implements __invoke() to dynamically determine form validation groups. The service accepts a FormInterface parameter and returns an array of validation groups.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/validation_group_service_resolver.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Validation/ValidationGroupResolver.php\nnamespace App\\Validation;\n\nuse Symfony\\Component\\Form\\FormInterface;\n\nclass ValidationGroupResolver\n{\n    public function __construct(\n        private object $service1,\n        private object $service2,\n    ) {\n    }\n\n    public function __invoke(FormInterface $form): array\n    {\n        $groups = [];\n\n        // ... determine which groups to apply and return an array\n\n        return $groups;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing AsPeriodicTask Attribute in PHP\nDESCRIPTION: Shows examples of customizing the AsPeriodicTask attribute with different frequency formats and additional parameters.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/scheduler.rst#2025-04-22_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n// the frequency can be defined as an integer representing the number of seconds\n#[AsPeriodicTask(frequency: 86400)]\n\n// adds randomly up to 6 seconds to the trigger time to avoid load spikes\n#[AsPeriodicTask(frequency: '1 day', jitter: 6)]\n\n// defines the method name to call instead as well as the arguments to pass to it\n```\n\n----------------------------------------\n\nTITLE: Defining Immutable Color Class in PHP\nDESCRIPTION: Implementation of an immutable Color class with RGB values as constructor parameters and getter methods.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/data_mappers.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Painting;\n\nfinal class Color\n{\n    public function __construct(\n        private int $red,\n        private int $green,\n        private int $blue,\n    ) {\n    }\n\n    public function getRed(): int\n    {\n        return $this->red;\n    }\n\n    public function getGreen(): int\n    {\n        return $this->green;\n    }\n\n    public function getBlue(): int\n    {\n        return $this->blue;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CssColor Validation with PHP Attributes\nDESCRIPTION: Example of using the CssColor constraint with PHP attributes to validate different CSS color formats in a Bulb entity class.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/CssColor.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Bulb.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Bulb\n{\n    #[Assert\\CssColor]\n    protected string $defaultColor;\n\n    #[Assert\\CssColor(\n        formats: Assert\\CssColor::HEX_LONG,\n        message: 'The accent color must be a 6-character hexadecimal color.',\n    )]\n    protected string $accentColor;\n\n    #[Assert\\CssColor(\n        formats: [Assert\\CssColor::BASIC_NAMED_COLORS, Assert\\CssColor::EXTENDED_NAMED_COLORS],\n        message: 'The color '{{ value }}' is not a valid CSS color name.',\n    )]\n    protected string $currentColor;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Controller for Custom Routes in Symfony PHP\nDESCRIPTION: Implements the ExtraController that handles requests from the custom route defined in the ExtraLoader. The controller extends AbstractController and provides an extra method that returns the parameter value as a Response.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/routing/custom_route_loader.rst#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/ExtraController.php\nnamespace App\\Controller;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass ExtraController extends AbstractController\n{\n    public function extra(mixed $parameter): Response\n    {\n        return new Response($parameter);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Relative Path in Twig\nDESCRIPTION: Uses the `relative_path` Twig function to compute the relative path from the current page's absolute URL to the passed absolute URL `path`. The `path` argument must be a string representing an absolute URL.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#2025-04-22_snippet_24\n\nLANGUAGE: twig\nCODE:\n```\n{{ relative_path(path) }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Lazy Services in PHP\nDESCRIPTION: Illustrates how to mark a service as lazy in Symfony using PHP configuration. This setting defers service instantiation until the service is actually used.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/lazy_services.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nuse App\\Twig\\AppExtension;\n\nreturn function(ContainerConfigurator $container): void {\n    $services = $container->services();\n\n    $services->set(AppExtension::class)->lazy();\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Monolog with ElasticsearchLogstashHandler in YAML\nDESCRIPTION: Example of configuring Monolog to use the ElasticsearchLogstashHandler in a production environment using YAML. Shows both basic configuration and recommended setup with FingersCrossedHandler for buffering.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/logging/handlers.rst#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/prod/monolog.yaml\nmonolog:\n    handlers:\n        es:\n            type: service\n            id: Symfony\\Bridge\\Monolog\\Handler\\ElasticsearchLogstashHandler\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/prod/monolog.yaml\nmonolog:\n    handlers:\n        main:\n            type: fingers_crossed\n            handler: es\n\n        es:\n            type: service\n            id: Symfony\\Bridge\\Monolog\\Handler\\ElasticsearchLogstashHandler\n```\n\n----------------------------------------\n\nTITLE: Validating Positive Numbers with PHP Attributes in Symfony\nDESCRIPTION: Example of using the Positive constraint with PHP attributes to ensure an Employee's income is a positive number.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Positive.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Employee.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Employee\n{\n    #[Assert\\Positive]\n    protected int $income;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Expression Constraint in PHP\nDESCRIPTION: PHP configuration for applying the Expression constraint to the BlogPost class using loadValidatorMetadata method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Expression.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Model/BlogPost.php\nnamespace App\\Model;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass BlogPost\n{\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addConstraint(new Assert\\Expression(\n            expression: 'this.getCategory() in [\"php\", \"symfony\"] or !this.isTechnicalPost()',\n            message: 'If this is a tech post, the category should be either php or symfony!',\n        ));\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Watch Options for File Polling in Webpack with Encore\nDESCRIPTION: Enables polling for file watching when using Encore in a virtual machine with NFS shared directories. This configuration checks for file changes every 250 milliseconds to address file watching issues in virtual environments.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/virtual-machine.rst#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// webpack.config.js\n\n// ...\n\n// will be applied for `encore dev --watch` and `encore dev-server` commands\nEncore.configureWatchOptions(watchOptions => {\n    watchOptions.poll = 250; // check for changes every 250 milliseconds\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring IsNull Constraint with PHP Attributes in Symfony\nDESCRIPTION: This snippet demonstrates how to apply the IsNull constraint to a property using PHP attributes in a Symfony Entity class. It ensures that the firstName property is exactly equal to null.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/IsNull.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Author.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Author\n{\n    #[Assert\\IsNull]\n    protected ?string $firstName = null;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Workflow Metadata in YAML\nDESCRIPTION: This YAML configuration demonstrates how to set metadata for a workflow, its places, and transitions. It includes examples of simple and complex metadata.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/workflow.rst#2025-04-22_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nframework:\n    workflows:\n        blog_publishing:\n            metadata:\n                title: 'Blog Publishing Workflow'\n            # ...\n            places:\n                draft:\n                    metadata:\n                        max_num_of_words: 500\n                # ...\n            transitions:\n                to_review:\n                    from: draft\n                    to:   review\n                    metadata:\n                        priority: 0.5\n                publish:\n                    from: reviewed\n                    to:   published\n                    metadata:\n                        hour_limit: 20\n                        explanation: 'You can not publish after 8 PM.'\n```\n\n----------------------------------------\n\nTITLE: Implementing PhpArrayAdapter Cache in Symfony\nDESCRIPTION: Example showing how to initialize, warm up, and use the PhpArrayAdapter cache. The adapter stores static values in a single cache file and uses FilesystemAdapter as a backup. Requires opcache.enable to be enabled in php.ini.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/cache/adapters/php_array_cache_adapter.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Cache\\Adapter\\FilesystemAdapter;\nuse Symfony\\Component\\Cache\\Adapter\\PhpArrayAdapter;\n\n// somehow, decide it's time to warm up the cache!\nif ($needsWarmup) {\n    // some static values\n    $values = [\n        'stats.products_count' => 4711,\n        'stats.users_count' => 1356,\n    ];\n\n    $cache = new PhpArrayAdapter(\n        // single file where values are cached\n        __DIR__ . '/somefile.cache',\n        // a backup adapter, if you set values after warm-up\n        new FilesystemAdapter()\n    );\n    $cache->warmUp($values);\n}\n\n// ... then, use the cache!\n$cacheItem = $cache->getItem('stats.users_count');\necho $cacheItem->get();\n```\n\n----------------------------------------\n\nTITLE: Configuring TagAwareAdapter with Multiple Cache Backends\nDESCRIPTION: Example of setting up TagAwareAdapter with separate storage adapters for cache items and tags, using filesystem for items and Redis for tags.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/cache/cache_invalidation.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Cache\\Adapter\\FilesystemAdapter;\nuse Symfony\\Component\\Cache\\Adapter\\RedisAdapter;\nuse Symfony\\Component\\Cache\\Adapter\\TagAwareAdapter;\n\n$cache = new TagAwareAdapter(\n    // Adapter for cached items\n    new FilesystemAdapter(),\n    // Adapter for tags\n    new RedisAdapter('redis://localhost')\n);\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Route Loader in PHP\nDESCRIPTION: Registers a custom routing loader service (`App\\Routing\\CustomLoader`) within the Symfony Dependency Injection container using PHP configuration. The service is tagged with `routing.loader` to make it discoverable by the routing component.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/dic_tags.rst#2025-04-22_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n.. code-block:: php\n\n    use App\\Routing\\CustomLoader;\n\n    $container\n        ->register(CustomLoader::class)\n        ->addTag('routing.loader')\n    ;\n```\n\n----------------------------------------\n\nTITLE: Customizing Tailwind CSS Classes for Form Elements in Twig\nDESCRIPTION: This snippet shows how to customize CSS classes for individual form fields using the form_row function in Twig. It allows setting custom classes for various parts of the form element.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/tailwindcss.rst#2025-04-22_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ form_row(form.title, {\n    row_class: 'my row classes',\n    label_class: 'my label classes',\n    error_item_class: 'my error item classes',\n    widget_class: 'my widget classes',\n    widget_disabled_class: 'my disabled widget classes',\n    widget_errors_class: 'my widget with error classes',\n}) }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Selectable Seconds Values for DateIntervalType - Symfony Forms - PHP\nDESCRIPTION: Illustrates how to define which seconds can be selected when using the DateIntervalType field with a choice widget in Symfony forms. Includes PHP examples for using both range and associative array patterns to tightly control user input options.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/dateinterval.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// values displayed to users range from 0 to 59 (both inclusive)\n'seconds' => range(1, 60),\n```\n\nLANGUAGE: php\nCODE:\n```\n// values displayed to users range from 1 to 60 (both inclusive)\n'seconds' => array_combine(range(1, 60), range(1, 60)),\n```\n\n----------------------------------------\n\nTITLE: Advanced Monolog Configuration with Multiple Handlers in YAML\nDESCRIPTION: Extended Monolog configuration in YAML that combines email notifications with file logging using grouped handlers.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/logging/monolog_email.rst#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nmonolog:\n    handlers:\n        main:\n            type:         fingers_crossed\n            action_level: critical\n            handler:      grouped\n        grouped:\n            type:    group\n            members: [streamed, deduplicated]\n        streamed:\n            type:  stream\n            path:  '%kernel.logs_dir%/%kernel.environment%.log'\n            level: debug\n        deduplicated:\n            type:    deduplication\n            handler: symfony_mailer\n        symfony_mailer:\n            type:         symfony_mailer\n            from_email:   'error@example.com'\n            to_email:     'error@example.com'\n            subject:      'An Error Occurred! %%message%%'\n            level:        debug\n            formatter:    monolog.formatter.html\n            content_type: text/html\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Array Nodes for Single and Multiple Connections in Symfony (PHP)\nDESCRIPTION: Explains how to use arrayNode and arrayPrototype to define nested array structures for complex hierarchical configuration. Demonstrates two patterns: defining fixed fields for an array, and using prototypes for repeating sub-structures (as with multiple connections). Depends on Symfony's Config builder API. Inputs are arrays or arrays-of-arrays; outputs are validated and normalized arrays suitable for further processing or use in the app.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/config/definition.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$rootNode\n    ->children()\n        ->arrayNode('connection')\n            ->children()\n                ->scalarNode('driver')->end()\n                ->scalarNode('host')->end()\n                ->scalarNode('username')->end()\n                ->scalarNode('password')->end()\n            ->end()\n        ->end()\n    ->end()\n;\n```\n\nLANGUAGE: php\nCODE:\n```\n$rootNode\n    ->children()\n        ->arrayNode('connections')\n            ->arrayPrototype()\n                ->children()\n                    ->scalarNode('driver')->end()\n                    ->scalarNode('host')->end()\n                    ->scalarNode('username')->end()\n                    ->scalarNode('password')->end()\n                ->end()\n            ->end()\n        ->end()\n    ->end()\n;\n```\n\n----------------------------------------\n\nTITLE: Registering Form Event Subscriber in Symfony\nDESCRIPTION: Example of registering a form event subscriber to a form builder. Shows how to integrate the AddEmailFieldListener with form creation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/events.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Form\\EventListener\\AddEmailFieldListener;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\CheckboxType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\TextType;\n\n$form = $formFactory->createBuilder()\n    ->add('username', TextType::class)\n    ->add('showEmail', CheckboxType::class)\n    ->addEventSubscriber(new AddEmailFieldListener())\n    ->getForm();\n```\n\n----------------------------------------\n\nTITLE: Static Version Strategy Implementation\nDESCRIPTION: Demonstrates using StaticVersionStrategy for asset versioning with different format options\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/asset.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Asset\\Package;\nuse Symfony\\Component\\Asset\\VersionStrategy\\StaticVersionStrategy;\n\n$package = new Package(new StaticVersionStrategy('v1'));\n\n// Absolute path\necho $package->getUrl('/image.png');\n// result: /image.png?v1\n\n// Relative path\necho $package->getUrl('image.png');\n// result: image.png?v1\n```\n\n----------------------------------------\n\nTITLE: Implementing Password Hasher Aware User Entity\nDESCRIPTION: Example of a User entity implementing PasswordHasherAwareInterface to use named hashers.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/passwords.rst#2025-04-22_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/User.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\PasswordHasher\\Hasher\\PasswordHasherAwareInterface;\nuse Symfony\\Component\\Security\\Core\\User\\PasswordAuthenticatedUserInterface;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\n\nclass User implements\n    UserInterface,\n    PasswordAuthenticatedUserInterface,\n    PasswordHasherAwareInterface\n{\n    // ...\n\n    public function getPasswordHasherName(): ?string\n    {\n        if ($this->isAdmin()) {\n            return 'harsh';\n        }\n\n        return null; // use the default hasher\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Email Settings in Symfony YAML\nDESCRIPTION: Demonstrates how to configure global email settings such as sender, recipients, and headers using YAML configuration in Symfony.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_35\n\nLANGUAGE: YAML\nCODE:\n```\n# config/packages/mailer.yaml\nframework:\n    mailer:\n        envelope:\n            sender: 'fabien@example.com'\n            recipients: ['foo@example.com', 'bar@example.com']\n        headers:\n            From: 'Fabien <fabien@example.com>'\n            Bcc: 'baz@example.com'\n            X-Custom-Header: 'foobar'\n```\n\n----------------------------------------\n\nTITLE: Generating Absolute Asset URLs with Symfony UrlPackage (PHP)\nDESCRIPTION: This snippet demonstrates how to instantiate the `Symfony\\Component\\Asset\\UrlPackage` class to generate absolute URLs for assets hosted on an external domain (like a CDN). It uses a single base URL and applies versioning using `StaticVersionStrategy`. The `getUrl()` method combines the base URL, the asset path, and the version string.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/asset.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Asset\\UrlPackage;\n// ...\n\n$urlPackage = new UrlPackage(\n    'https://static.example.com/images/',\n    new StaticVersionStrategy('v1')\n);\n\necho $urlPackage->getUrl('/logo.png');\n// result: https://static.example.com/images/logo.png?v1\n```\n\n----------------------------------------\n\nTITLE: Configuring Hostname Validation with PHP Attributes\nDESCRIPTION: Example showing how to apply the Hostname constraint using PHP attributes in a Symfony entity class. The constraint validates that the name property contains a valid hostname.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Hostname.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/ServerSettings.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass ServerSettings\n{\n    #[Assert\\Hostname(message: 'The server name must be a valid hostname.')]\n    protected string $name;\n}\n```\n\n----------------------------------------\n\nTITLE: Throwing Exceptions on Invalid Type Dumping in PHP\nDESCRIPTION: Illustrates using the `Yaml::DUMP_EXCEPTION_ON_INVALID_TYPE` flag during dumping. If the PHP data contains a type that cannot be represented in YAML by default (like an object without specific object dumping flags), this flag causes `Yaml::dump` to throw a `DumpException` instead of producing potentially invalid output.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/yaml.rst#2025-04-22_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$data = new \\stdClass(); // by default objects are invalid.\nYaml::dump($data, 2, 4, Yaml::DUMP_EXCEPTION_ON_INVALID_TYPE); // throws an exception\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Password Hasher Interface in PHP\nDESCRIPTION: Example of implementing the PasswordHasherInterface with a needsRehash method to check if passwords need updating.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/passwords.rst#2025-04-22_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nclass CustomPasswordHasher implements PasswordHasherInterface\n{\n    // ...\n\n    public function needsRehash(string $hashedPassword): bool\n    {\n        // check whether the current password is hashed using an outdated hasher\n        $hashIsOutdated = ...;\n\n        return $hashIsOutdated;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting File Access and Modification Times (PHP)\nDESCRIPTION: Demonstrates the `Filesystem::touch` method. It can set the modification time to the current time (default), a specific future time, or set both modification and access times to different values.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/filesystem.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// sets modification time to the current timestamp\n$filesystem->touch('file.txt');\n// sets modification time 10 seconds in the future\n$filesystem->touch('file.txt', time() + 10);\n// sets access time 10 seconds in the past\n$filesystem->touch('file.txt', time(), time() - 10);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Authentication Entry Point in Symfony PHP\nDESCRIPTION: This PHP class `AuthenticationEntryPoint` implements `AuthenticationEntryPointInterface` to customize the response when an unauthenticated user tries to access a protected resource. It adds a flash message to the session and redirects the user to the login page. It requires the `UrlGeneratorInterface` for generating the login route URL.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/access_denied_handler.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Security/AuthenticationEntryPoint.php\nnamespace App\\Security;\n\nuse Symfony\\Component\\HttpFoundation\\RedirectResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\Routing\\Generator\\UrlGeneratorInterface;\nuse Symfony\\Component\\Security\\Core\\Exception\\AuthenticationException;\nuse Symfony\\Component\\Security\\Http\\EntryPoint\\AuthenticationEntryPointInterface;\n\nclass AuthenticationEntryPoint implements AuthenticationEntryPointInterface\n{\n    public function __construct(\n        private UrlGeneratorInterface $urlGenerator,\n    ) {\n    }\n\n    public function start(Request $request, ?AuthenticationException $authException = null): RedirectResponse\n    {\n        // add a custom flash message and redirect to the login page\n        $request->getSession()->getFlashBag()->add('note', 'You have to login in order to access this page.');\n\n        return new RedirectResponse($this->urlGenerator->generate('security_login'));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Mapping with Multiple Entities in MapEntity\nDESCRIPTION: Shows how to configure multiple entities with complex mapping configurations in a single controller method using the mapping option of MapEntity.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine.rst#2025-04-22_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n#[Route('/product/{category}/{slug}/comments/{comment_slug}')]\npublic function show(\n    #[MapEntity(mapping: ['category' => 'category', 'slug' => 'slug'])]\n    Product $product,\n    #[MapEntity(mapping: ['comment_slug' => 'slug'])]\n    Comment $comment\n): Response\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Array Membership Testing in Symfony Expression Language\nDESCRIPTION: Demonstrates how to use the 'in' operator to test array membership\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/formats/expression_language.rst#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nclass User {\n    public string $group;\n}\n\n$user = new User();\n$user->group = 'human_resources';\n\n$inGroup = $expressionLanguage->evaluate(\n    'user.group in [\"human_resources\", \"marketing\"]',\n    [\n        'user' => $user,\n    ]\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Trusted Proxies and Headers in PHP\nDESCRIPTION: This PHP configuration sets trusted proxy IP addresses and specifies which forwarded headers to trust. It demonstrates how to configure for both X-Forwarded-* headers and the Forwarded header using PHP syntax.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/deployment/proxies.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/framework.php\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework): void {\n    $framework\n        // the IP address (or range) of your proxy\n        ->trustedProxies('192.0.0.1,10.0.0.0/8')\n        // shortcut for private IP address ranges of your proxy\n        ->trustedProxies('private_ranges')\n        // trust *all* \"X-Forwarded-*\" headers (the ! prefix means to not trust those headers)\n        ->trustedHeaders(['x-forwarded-for', 'x-forwarded-host', 'x-forwarded-proto', 'x-forwarded-port', 'x-forwarded-prefix'])\n        // or, if your proxy instead uses the \"Forwarded\" header\n        ->trustedHeaders(['forwarded'])\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Private Updates Publishing in Mercure\nDESCRIPTION: Example of publishing private updates using Mercure hub with authorization requirements.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mercure.rst#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Controller;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Mercure\\Update;\n\nclass PublishController extends AbstractController\n{\n    public function publish(HubInterface $hub): Response\n    {\n        $update = new Update(\n            'https://example.com/books/1',\n            json_encode(['status' => 'OutOfStock']),\n            true // private\n        );\n\n        $hub->publish($update);\n\n        return new Response('private update published!');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Values from an Array using PropertyAccessor (PHP)\nDESCRIPTION: Illustrates using `PropertyAccessor::getValue()` to retrieve elements from a PHP array using bracket notation (e.g., `[key]`). By default, accessing a non-existent index returns `null`.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/property_access.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// ...\n$person = [\n    'first_name' => 'Wouter',\n];\n\nvar_dump($propertyAccessor->getValue($person, '[first_name]')); // 'Wouter'\nvar_dump($propertyAccessor->getValue($person, '[age]')); // null\n```\n\n----------------------------------------\n\nTITLE: Configuring Bundle Parameters (PHP)\nDESCRIPTION: Example of configuring bundle parameters using PHP format in Symfony services configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/bundles/best_practices.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nreturn static function (ContainerConfigurator $container): void {\n    $container->parameters()\n        ->set('acme_blog.author.email', 'fabien@example.com')\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Referencing Trusted Proxies Environment Variable in YAML\nDESCRIPTION: This YAML configuration shows how to reference the TRUSTED_PROXIES environment variable set in the .env file to configure trusted proxies in Symfony.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/deployment/proxies.rst#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/framework.yaml\nframework:\n    # ...\n    trusted_proxies: '%env(TRUSTED_PROXIES)%'\n```\n\n----------------------------------------\n\nTITLE: PHP Array Serialization in Symfony Controller\nDESCRIPTION: Example showing how to use Symfony's serializer component to convert between PHP objects and arrays in a controller context.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer.rst#2025-04-22_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Serializer\\Encoder\\DecoderInterface;\nuse Symfony\\Component\\Serializer\\Encoder\\EncoderInterface;\nuse Symfony\\Component\\Serializer\\Normalizer\\DenormalizerInterface;\nuse Symfony\\Component\\Serializer\\Normalizer\\NormalizerInterface;\n// ...\n\nclass PersonController extends AbstractController\n{\n    public function index(DenormalizerInterface&NormalizerInterface $serializer): Response\n    {\n        $person = new Person('Jane Doe', 39, false);\n\n        // use normalize() to convert a PHP object to an array\n        $personArray = $serializer->normalize($person, 'json');\n\n        // ...and denormalize() to convert an array back to a PHP object\n        $personCopy = $serializer->denormalize($personArray, Person::class);\n\n        // ...\n    }\n\n    public function json(DecoderInterface&EncoderInterface $serializer): Response\n    {\n        $data = ['name' => 'Jane Doe'];\n\n        // use encode() to transform PHP arrays into another format\n        $json = $serializer->encode($data, 'json');\n\n        // ...and decode() to transform any format to just PHP arrays (instead of objects)\n        $data = $serializer->decode('{\"name\":\"Charlie Doe\"}', 'json');\n        // $data contains ['name' => 'Charlie Doe']\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Remember Me Signature Properties in YAML\nDESCRIPTION: Sets up the signature properties for remember me tokens using YAML configuration. This example includes the password and updatedAt properties in the token signature for the main firewall.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/remember_me.rst#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\nsecurity:\n    # ...\n\n    firewalls:\n        main:\n            # ...\n            remember_me:\n                # ...\n                signature_properties: ['password', 'updatedAt']\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Packages in Symfony YAML\nDESCRIPTION: This YAML configuration snippet shows how to define named asset packages under the `framework.assets.packages` key in a Symfony configuration file (e.g., `config/packages/framework.yaml`). Each package can specify options like a `base_path`, allowing assets within that package to be referenced relative to this path using the `asset()` Twig function.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/framework.yaml\nframework:\n    # ...\n    assets:\n        packages:\n            foo_package:\n                base_path: /avatars\n```\n\n----------------------------------------\n\nTITLE: Initializing Symfony Array Cache Adapter in PHP\nDESCRIPTION: This PHP snippet demonstrates initializing the ArrayAdapter from the Symfony\\Component\\Cache\\Adapter namespace. The constructor supports parameters for default item lifetimes, serialization, maximum cache lifetime or size, and an optional custom PSR ClockInterface implementation (added in Symfony 7.2). You must have the symfony/cache component installed. Expected input parameters include those for tuning memory usage and item persistence within the PHP process; all data is lost at the end of the process. The cache is non-persistent and best used in unit testing or cache warm-up scenarios.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/cache/adapters/array_cache_adapter.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Cache\\Adapter\\ArrayAdapter;\n\n$cache = new ArrayAdapter(\n\n    // the default lifetime (in seconds) for cache items that do not define their\n    // own lifetime, with a value 0 causing items to be stored indefinitely (i.e.\n    // until the current PHP process finishes)\n    $defaultLifetime = 0,\n\n    // if true, the values saved in the cache are serialized before storing them\n    $storeSerialized = true,\n\n    // the maximum lifetime (in seconds) of the entire cache (after this time, the\n    // entire cache is deleted to avoid stale data from consuming memory)\n    $maxLifetime = 0,\n\n    // the maximum number of items that can be stored in the cache. When the limit\n    // is reached, cache follows the LRU model (least recently used items are deleted)\n    $maxItems = 0,\n\n    // optional implementation of the Psr\\Clock\\ClockInterface that will be used\n    // to calculate the lifetime of cache items (for example to get predictable\n    // lifetimes in tests)\n    $clock = null,\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Monolog Handler with Custom Formatter in YAML\nDESCRIPTION: YAML configuration for a Monolog handler that uses the custom formatter. This configures the 'main' stream handler to use the session request formatter, enabling the token to be included in log messages.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/logging/processors.rst#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/prod/monolog.yaml\nmonolog:\n    handlers:\n        main:\n            type: stream\n            path: '%kernel.logs_dir%/%kernel.environment%.log'\n            level: debug\n            formatter: monolog.formatter.session_request\n```\n\n----------------------------------------\n\nTITLE: Initializing Standalone Symfony HttpClient with Custom Options (PHP)\nDESCRIPTION: Demonstrates creating a new instance of Symfony's HttpClient class directly in PHP with custom options. Requires the 'symfony/http-client' package. Main options include 'headers', 'max_redirects', and an integer for concurrent host connections. Inputs are passed as arrays and integers; the created client can be used to send HTTP requests with the defined settings. Use this in programmatic scripts where DI is not used.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_43\n\nLANGUAGE: php\nCODE:\n```\n$client = HttpClient::create([\\n    'headers' => [\\n        'X-Powered-By' => 'ACME App',\\n    ],\\n    'max_redirects' => 7,\\n], 10);\\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Form Data from Symfony DomCrawler in PHP\nDESCRIPTION: Shows how to extract form data as PHP values and files from a form object in the Symfony DomCrawler component.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/dom_crawler.rst#2025-04-22_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$values = $form->getPhpValues();\n$files = $form->getPhpFiles();\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Public Directory in Composer (Symfony, JSON)\nDESCRIPTION: This JSON code sets the 'public-dir' Composer extra option to a custom value, informing Composer of a renamed public directory. After updating, Composer expects web front controller (index.php) and related resources in the specified directory. This is typically required when moving or renaming the public folder for hosting or deployment reasons.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/override_dir_structure.rst#2025-04-22_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \"...\": \"...\",\\n    \"extra\": {\\n        \"...\": \"...\",\\n        \"public-dir\": \"my_new_public_dir\"\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Country Names with Default Locale using Symfony Intl in PHP\nDESCRIPTION: Demonstrates retrieving lists of country names (ISO 3166-1 alpha-2 and alpha-3) and individual country names using the `Symfony\\Component\\Intl\\Countries` class. It uses the default locale set via `\\Locale::setDefault('en')`.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/intl.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Intl\\Countries;\n\n\\Locale::setDefault('en');\n\n$countries = Countries::getNames();\n// ('alpha2Code' => 'countryName')\n// => ['AF' => 'Afghanistan', 'AX' => 'Åland Islands', ...]\n\n$countries = Countries::getAlpha3Names();\n// ('alpha3Code' => 'countryName')\n// => ['AFG' => 'Afghanistan', 'ALA' => 'Åland Islands', ...]\n\n$country = Countries::getName('GB');\n// => 'United Kingdom'\n\n$country = Countries::getAlpha3Name('NOR');\n// => 'Norway'\n```\n\n----------------------------------------\n\nTITLE: Configuring Lock Resources using PHP in Symfony\nDESCRIPTION: This PHP configuration sets up lock resources for 'invoice' and 'report'. It shows how to configure multiple resources for a single lock name using an array.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/lock.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/lock.php\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework): void {\n    $framework->lock()\n        ->resource('invoice', ['semaphore', 'redis://r2.docker'])\n        ->resource('report', ['semaphore']);\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Traverse Constraint with PHP Attributes\nDESCRIPTION: Example showing how to implement a BookCollection class with Traverse constraint using PHP attributes. Includes ORM mapping and validation constraints.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Traverse.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/BookCollection.php\nnamespace App\\Entity;\n\nuse App\\Entity\\Book;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\Collections\\Collection;\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\n#[ORM\\Entity]\n#[Assert\\Traverse]\nclass BookCollection implements \\IteratorAggregate\n{\n    /**\n     * @var string\n     */\n    #[ORM\\Column]\n    #[Assert\\NotBlank]\n    protected string $name = '';\n\n    /**\n     * @var Collection|Book[]\n     */\n    #[ORM\\ManyToMany(targetEntity: Book::class)]\n    protected ArrayCollection $books;\n\n    public function __construct()\n    {\n        $this->books = new ArrayCollection();\n    }\n\n    public function getName(): string\n    {\n        return $this->name;\n    }\n\n    /**\n     * @return \\Generator|Book[] The books for a given author\n     */\n    public function getBooksForAuthor(Author $author): iterable\n    {\n        foreach ($this->books as $book) {\n            if ($book->isAuthoredBy($author)) {\n                yield $book;\n            }\n        }\n    }\n\n    public function getIterator(): \\Iterator\n    {\n        return $this->books->getIterator();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Filesystem Cache Adapter in PHP\nDESCRIPTION: Creates a new FilesystemAdapter instance with optional configuration for namespace, default lifetime, and cache directory. The adapter stores cache items as files in the specified directory.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/cache/adapters/filesystem_adapter.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Cache\\Adapter\\FilesystemAdapter;\n\n$cache = new FilesystemAdapter(\n\n    // a string used as the subdirectory of the root cache directory, where cache\n    // items will be stored\n    $namespace = '',\n\n    // the default lifetime (in seconds) for cache items that do not define their\n    // own lifetime, with a value 0 causing items to be stored indefinitely (i.e.\n    // until the files are deleted)\n    $defaultLifetime = 0,\n\n    // the main cache directory (the application needs read-write permissions on it)\n    // if none is specified, a directory is created inside the system temporary directory\n    $directory = null\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Getter Constraints with PHP Attributes in Symfony\nDESCRIPTION: Example of using PHP attributes to configure a validation constraint on a getter method in Symfony. It applies an IsTrue constraint to ensure password safety.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/validation.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Author.php\nnamespace App\\Entity;\n\n// ...\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Author\n{\n    #[Assert\\IsTrue(message: 'The password cannot match your first name')]\n    public function isPasswordSafe(): bool\n    {\n        // ... return true or false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EqualTo Constraints with PHP\nDESCRIPTION: Example of using PHP to define EqualTo constraints for a Person class. It shows how to set constraints for firstName and age properties using the loadValidatorMetadata method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/EqualTo.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Person.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Person\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('firstName', new Assert\\EqualTo('Mary'));\n\n        $metadata->addPropertyConstraint('age', new Assert\\EqualTo(\n            value: 20,\n        ));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Newsletter Manager with Setter Injection\nDESCRIPTION: Alternative implementation of NewsletterManager using setter injection for optional dependencies.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/dependency_injection.rst#2025-04-22_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nclass NewsletterManager\n{\n    private \\Mailer $mailer;\n\n    public function setMailer(\\Mailer $mailer): void\n    {\n        $this->mailer = $mailer;\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Routes in Symfony using YAML\nDESCRIPTION: This YAML configuration defines routes for the blog application. It maps URL paths to specific controller actions, allowing Symfony to handle incoming requests and direct them to the appropriate controllers.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/introduction/from_flat_php_to_symfony.rst#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n# config/routes.yaml\nblog_list:\n    path:     /blog\n    controller: App\\Controller\\BlogController::list\n\nblog_show:\n    path:     /blog/show/{id}\n    controller: App\\Controller\\BlogController::show\n```\n\n----------------------------------------\n\nTITLE: Implementing LocaleAwareInterface for a Custom Service in PHP\nDESCRIPTION: Defines a PHP class `MyCustomLocaleHandler` that implements `Symfony\\Contracts\\Translation\\LocaleAwareInterface`. This interface requires implementing `setLocale` and `getLocale` methods, allowing instances of this class to manage locale information. Services implementing this interface and tagged with `kernel.locale_aware` can participate in Symfony's locale management system.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/dic_tags.rst#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n// src/Locale/MyCustomLocaleHandler.php\nnamespace App\\Locale;\n\nuse Symfony\\Contracts\\Translation\\LocaleAwareInterface;\n\nclass MyCustomLocaleHandler implements LocaleAwareInterface\n{\n    public function setLocale(string $locale): void\n    {\n        $this->locale = $locale;\n    }\n\n    public function getLocale(): string\n    {\n        return $this->locale;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Access Token Extractors (YAML - Symfony)\nDESCRIPTION: Configures an ordered list of multiple token extractors, including both built-in and custom extractors, using YAML. The token_extractors field accepts an array; order determines priority. Every extractor must implement AccessTokenExtractorInterface or be a recognized built-in type. Intended for inclusion in config/packages/security.yaml.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/access_token.rst#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\\nsecurity:\\n    firewalls:\\n        main:\\n            access_token:\\n                token_handler: App\\Security\\AccessTokenHandler\\n                token_extractors:\\n                    - 'header'\\n                    - 'App\\\\Security\\\\CustomTokenExtractor'\n```\n\n----------------------------------------\n\nTITLE: Generating a Version 3 Name-Based UUID (MD5) in PHP\nDESCRIPTION: Shows how to generate a deterministic UUIDv3 using a namespace (predefined like `Uuid::NAMESPACE_OID` or a custom one) and an arbitrary name string. The `Uuid::v3()` method hashes the concatenation of the namespace and name using MD5. The result is an instance of `Symfony\\Component\\Uid\\UuidV3`.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/uid.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Uid\\Uuid;\n\n// you can use any of the predefined namespaces...\n$namespace = Uuid::fromString(Uuid::NAMESPACE_OID);\n// ...or use a random namespace:\n// $namespace = Uuid::v4();\n\n// $name can be any arbitrary string\n// $uuid is an instance of Symfony\\Component\\Uid\\UuidV3\n$uuid = Uuid::v3($namespace, $name);\n```\n\n----------------------------------------\n\nTITLE: Configuring Doctrine Lifecycle Callback in YAML\nDESCRIPTION: Shows how to configure a lifecycle callback for a Doctrine entity using YAML. This example sets up a prePersist callback.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine/events.rst#2025-04-22_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\n# config/doctrine/Product.orm.yml\nApp\\Entity\\Product:\n    type: entity\n    # ...\n    lifecycleCallbacks:\n        prePersist: ['setCreatedAtValue']\n```\n\n----------------------------------------\n\nTITLE: Including Third-Party CSS with Asset Function in Twig\nDESCRIPTION: Shows how to include CSS from third-party bundles using the asset() function, which will automatically version the files when AssetMapper is enabled.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/asset_mapper.rst#2025-04-22_snippet_47\n\nLANGUAGE: twig\nCODE:\n```\n<link rel=\"stylesheet\" href=\"{{ asset('bundles/babdevpagerfanta/css/pagerfanta.css') }}\">\n```\n\n----------------------------------------\n\nTITLE: Processing CSV Environment Variables in XML\nDESCRIPTION: Example of using the csv processor to decode CSV-formatted environment variables in XML configuration. This transforms a comma-separated list of languages into an array.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/env_var_processors.rst#2025-04-22_snippet_22\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/framework.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony\n        https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <parameters>\n        <parameter key=\"env(ALLOWED_LANGUAGES)\">en,de,es</parameter>\n        <parameter key=\"app_allowed_languages\">%env(csv:ALLOWED_LANGUAGES)%</parameter>\n    </parameters>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Synthetic Service in XML Format\nDESCRIPTION: XML configuration for defining a synthetic service in Symfony. This demonstrates how to set the synthetic attribute to true for a service definition.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/synthetic_services.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n\n        <!-- synthetic services don't specify a class -->\n        <service id=\"app.synthetic_service\" synthetic=\"true\"/>\n\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Enabling Vue Loader in Webpack Config\nDESCRIPTION: Basic configuration to enable Vue.js support in webpack.config.js using enableVueLoader()\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/vuejs.rst#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n      // webpack.config.js\n      // ...\n\n      Encore\n          // ...\n          .addEntry('main', './assets/main.js')\n\n    +     .enableVueLoader()\n      ;\n```\n\n----------------------------------------\n\nTITLE: Using Scheduler Trigger Decorators (ExcludeTimeTrigger, JitterTrigger) in PHP\nDESCRIPTION: Illustrates how Scheduler triggers can be decorated in PHP. This example wraps a `CronExpressionTrigger` with `JitterTrigger` and then `ExcludeTimeTrigger` to modify its scheduling behavior. It also shows how to retrieve the innermost trigger and the list of applied decorators using the `inner()` and `decorators()` methods.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/scheduler.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$trigger = new ExcludeTimeTrigger(new JitterTrigger(CronExpressionTrigger::fromSpec('#midnight', new MyMessage()));\n\n$trigger->inner(); // CronExpressionTrigger\n$trigger->decorators(); // [ExcludeTimeTrigger, JitterTrigger]\n```\n\n----------------------------------------\n\nTITLE: Overriding Third-Party Assets with CSS Imports\nDESCRIPTION: Demonstrates how to import CSS files from outside the assets directory, showing the syntax for reaching above the assets directory to vendor files.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/asset_mapper.rst#2025-04-22_snippet_36\n\nLANGUAGE: css\nCODE:\n```\n/* assets/styles/app.css */\n\n/* you can reach above assets/ */\n@import url('../../vendor/babdev/pagerfanta-bundle/Resources/public/css/pagerfanta.css');\n```\n\n----------------------------------------\n\nTITLE: Wrapping and Unwrapping Multiple String Objects (PHP)\nDESCRIPTION: This snippet demonstrates how to create arrays of string objects using the static wrap method for ByteString and UnicodeString, and how to revert back to primitive PHP strings using unwrap. These operations support batch conversion between arrays of strings and arrays of String instances. Input is an array of PHP strings or objects; output is the corresponding array of String objects or PHP strings.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/string.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$contents = ByteString::wrap(['hello', 'world']);        // $contents = ByteString[]\n$contents = UnicodeString::wrap(['I', '❤️', 'Symfony']); // $contents = UnicodeString[]\n\n// use the unwrap method to make the inverse conversion\n$contents = UnicodeString::unwrap([\n    new UnicodeString('hello'), new UnicodeString('world'),\n]); // $contents = ['hello', 'world']\n```\n\n----------------------------------------\n\nTITLE: Memory Formatting Examples in Symfony Console\nDESCRIPTION: Demonstrates formatting memory sizes from bytes to human-readable format.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/helpers/formatterhelper.rst#2025-04-22_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nHelper::formatMemory(512);                // 512 B\nHelper::formatMemory(1024);               // 1 KiB\nHelper::formatMemory(1024 * 1024);        // 1.0 MiB\nHelper::formatMemory(1024 * 1024 * 1024); // 1 GiB\n```\n\n----------------------------------------\n\nTITLE: Starting the Symfony Local Proxy\nDESCRIPTION: Command to start the local proxy service needed for custom local domain names.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/symfony_server.rst#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ symfony proxy:start\n```\n\n----------------------------------------\n\nTITLE: Configuring Services with an Invokable Configurator in YAML\nDESCRIPTION: This YAML snippet shows how to configure services using an invokable configurator (a class with an `__invoke` method). Instead of providing an array with the service and method name, the `configurator` option is set directly to the service ID string `'@App\\Mail\\EmailConfigurator'`. Symfony will automatically call the `__invoke` method on the configurator service.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/configurators.rst#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nservices:\n    # ...\n\n    # registers all classes as services, including App\\Mail\\EmailConfigurator\n    App\\:\n        resource: '../src/*'\n        # ...\n\n    # override the services to set the configurator\n    App\\Mail\\NewsletterManager:\n        configurator: '@App\\Mail\\EmailConfigurator'\n\n    App\\Mail\\GreetingCardManager:\n        configurator: '@App\\Mail\\EmailConfigurator'\n```\n\n----------------------------------------\n\nTITLE: Shortened Doctrine ORM Configuration Syntax in YAML Format\nDESCRIPTION: Simplified YAML configuration syntax for Doctrine ORM when using only one entity manager, showing all possible configuration options at the doctrine.orm level.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/doctrine.rst#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ndoctrine:\n    orm:\n        # ...\n        query_cache_driver:\n            # ...\n        metadata_cache_driver:\n            # ...\n        result_cache_driver:\n            # ...\n        connection: ~\n        class_metadata_factory_name:  Doctrine\\ORM\\Mapping\\ClassMetadataFactory\n        default_repository_class:  Doctrine\\ORM\\EntityRepository\n        auto_mapping: false\n        naming_strategy: doctrine.orm.naming_strategy.default\n        hydrators:\n            # ...\n        mappings:\n            # ...\n        dql:\n            # ...\n        filters:\n            # ...\n```\n\n----------------------------------------\n\nTITLE: Enabling ESI in Symfony PHP Configuration\nDESCRIPTION: PHP configuration to enable ESI in a Symfony application, using the FrameworkConfig object.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/http_cache/esi.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/framework.php\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework): void {\n    $framework->esi()\n        ->enabled(true)\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Processing CSV Environment Variables in PHP\nDESCRIPTION: Example of using the csv processor to decode CSV-formatted environment variables in PHP configuration. This transforms a comma-separated list of languages into an array.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/env_var_processors.rst#2025-04-22_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/framework.php\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nuse Symfony\\Component\\DependencyInjection\\ContainerBuilder;\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (ContainerBuilder $container): void {\n    $container->setParameter('env(ALLOWED_LANGUAGES)', 'en,de,es');\n    $container->setParameter('app_allowed_languages', '%env(csv:ALLOWED_LANGUAGES)%');\n};\n```\n\n----------------------------------------\n\nTITLE: Applying Blank Constraint with PHP Validator Metadata in Symfony\nDESCRIPTION: Shows how to apply the Blank validation constraint using PHP code with the ClassMetadata approach in Symfony.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Blank.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Author.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Author\n{\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('firstName', new Assert\\Blank());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Notifier with YAML Configuration\nDESCRIPTION: YAML configuration for setting up Twilio as a texter transport in Symfony's Notifier component. This references the environment variable defined in the .env file.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/notifier.rst#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/notifier.yaml\nframework:\n    notifier:\n        texter_transports:\n            twilio: '%env(TWILIO_DSN)%'\n```\n\n----------------------------------------\n\nTITLE: Overriding Template Blocks in Twig\nDESCRIPTION: Shows how to override specific blocks in a bundle template using the special '!' prefix to avoid infinite loop errors when extending from the original template.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/bundles/override.rst#2025-04-22_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{# templates/bundles/AcmeUserBundle/registration/confirmed.html.twig #}\n{# the special '!' prefix avoids errors when extending from an overridden template #}\n{% extends \"@!AcmeUser/registration/confirmed.html.twig\" %}\n\n{% block some_block %}\n    ...\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML Sanitizer Baselines in PHP\nDESCRIPTION: Demonstrates how to configure HTML sanitizer baselines for safe or static elements in PHP.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/html_sanitizer.rst#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/framework.php\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework): void {\n    $framework->htmlSanitizer()\n        ->sanitizer('app.post_sanitizer')\n            // enable either of these\n            ->allowSafeElements(true)\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Collector in XML for Symfony\nDESCRIPTION: This snippet demonstrates how to configure a data collector service using XML in Symfony. It shows the XML structure for defining the service, tagging it as a data collector, and setting optional attributes like template and priority.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/profiler.rst#2025-04-22_snippet_21\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"App\\DataCollector\\RequestCollector\">\n            <!-- the 'template' attribute has more priority than the value returned by getTemplate() -->\n            <tag name=\"data_collector\"\n                id=\"App\\DataCollector\\RequestCollector\"\n                template=\"data_collector/template.html.twig\"\n            />\n            <!-- optional 'priority' attribute (positive or negative integer; default = 0) -->\n            <!-- priority=\"300\" -->\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Group Sequence Provider in PHP\nDESCRIPTION: This snippet illustrates how to configure a User class as a group sequence provider using PHP code in Symfony, without attributes.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/validation/sequence_provider.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/User.php\nnamespace App\\Entity;\n\n// ...\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass User implements GroupSequenceProviderInterface\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->setGroupSequenceProvider(true);\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Translation Files Path (Symfony, YAML)\nDESCRIPTION: This YAML configuration sets a custom default_path for the translator in config/packages/translation.yaml. It tells Symfony to load translations from %kernel.project_dir%/i18n rather than the standard translations directory. Place this under the translator section of the framework configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/override_dir_structure.rst#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/translation.yaml\\nframework:\\n    translator:\\n        # ...\\n        default_path: \"%kernel.project_dir%/i18n\"\n```\n\n----------------------------------------\n\nTITLE: Console Cursor Movement Examples\nDESCRIPTION: Demonstration of various cursor movement methods including moving up, down, left, right, and to specific positions. Also shows how to retrieve the current cursor position.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/helpers/cursor.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// moves the cursor 1 line up from its current position\n$cursor->moveUp();\n\n// moves the cursor 3 lines up from its current position\n$cursor->moveUp(3);\n\n// same for down\n$cursor->moveDown();\n\n// moves the cursor 1 column right from its current position\n$cursor->moveRight();\n\n// moves the cursor 3 columns right from its current position\n$cursor->moveRight(3);\n\n// same for left\n$cursor->moveLeft();\n\n// move the cursor to a specific (column, row) position from the\n// top-left position of the terminal\n$cursor->moveToPosition(7, 11);\n\n$position = $cursor->getCurrentPosition();\n// $position[0] // columns (aka x coordinate)\n// $position[1] // rows (aka y coordinate)\n```\n\n----------------------------------------\n\nTITLE: Applying Twig Constraint Using PHP Metadata\nDESCRIPTION: This PHP code demonstrates how to apply the Twig constraint using the loadValidatorMetadata method. It adds the constraint to the 'templateCode' property of the Page class.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Twig.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Page.php\nnamespace App\\Entity;\n\nuse Symfony\\Bridge\\Twig\\Validator\\Constraints\\Twig;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Page\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('templateCode', new Twig());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GreaterThan Constraint with Dates in YAML\nDESCRIPTION: Demonstrates how to set up the GreaterThan constraint for date comparisons using YAML configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/GreaterThan.rst#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Order:\n    properties:\n        deliveryDate:\n            - GreaterThan: today\n```\n\n----------------------------------------\n\nTITLE: Configuring Monolog Processor and Formatter in YAML\nDESCRIPTION: YAML configuration for registering a custom Monolog processor and formatter. The formatter includes the session token in the log output format, and the processor is registered as a service with the monolog.processor tag.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/logging/processors.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nservices:\n    monolog.formatter.session_request:\n        class: Monolog\\Formatter\\LineFormatter\n        arguments:\n            - \"[%%datetime%%] [%%extra.token%%] %%channel%%.%%level_name%%: %%message%% %%context%% %%extra%%\\n\"\n\n    App\\Logger\\SessionRequestProcessor:\n        tags:\n            - { name: monolog.processor }\n```\n\n----------------------------------------\n\nTITLE: Configuring Media URL Handling in YAML for Symfony HTML Sanitizer\nDESCRIPTION: This snippet shows how to configure media URL handling for the HTML Sanitizer in Symfony using YAML. It covers options for forcing HTTPS, specifying allowed URL schemes and hosts, and controlling relative media URLs.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/html_sanitizer.rst#2025-04-22_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/html_sanitizer.yaml\nframework:\n    html_sanitizer:\n        sanitizers:\n            app.post_sanitizer:\n                # ...\n\n                # if `true`, all URLs using the `http://` scheme will be converted to\n                # use the `https://` scheme instead. `http` still needs to be allowed\n                # in `allowed_media_schemes`\n                force_https_urls: true\n\n                # specifies the allowed URL schemes. If the URL has a different scheme, the\n                # attribute will be dropped\n                allowed_media_schemes: ['http', 'https', 'mailto']\n\n                # specifies the allowed hosts, the attribute will be dropped if the URL\n                # contains a different host which is not a subdomain of the allowed host\n                allowed_media_hosts: ['symfony.com'] # Also allows any subdomain (i.e. www.symfony.com)\n\n                # whether to allow relative URLs (i.e. URLs without scheme and host)\n                allow_relative_medias: true\n```\n\n----------------------------------------\n\nTITLE: Requiring PHP Files as Environment Variables in YAML\nDESCRIPTION: Example of using the require processor to execute a PHP file and use its return value as an environment variable in YAML configuration. This allows for runtime-evaluated configuration values.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/env_var_processors.rst#2025-04-22_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/framework.yaml\nparameters:\n    env(PHP_FILE): '%kernel.project_dir%/config/.runtime-evaluated.php'\napp:\n    auth: '%env(require:PHP_FILE)%'\n```\n\n----------------------------------------\n\nTITLE: News Controller with Independent Cache Configuration (Using Response)\nDESCRIPTION: A controller for news content that sets its own cache headers directly on the response object, allowing for different caching strategies than the main page.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/http_cache/esi.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/NewsController.php\nnamespace App\\Controller;\n\n// ...\nclass NewsController extends AbstractController\n{\n    public function latest(int $maxPerPage): Response\n    {\n        // ...\n\n        // sets to public and adds some expiration\n        $response->setSharedMaxAge(60);\n\n        return $response;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Bootstrap 5 Form Theme in XML\nDESCRIPTION: XML configuration to apply Bootstrap 5 form theme globally in a Symfony application\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/bootstrap5.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/twig.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:twig=\"http://symfony.com/schema/dic/twig\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/twig\n        https://symfony.com/schema/dic/twig/twig-1.0.xsd\">\n\n    <twig:config>\n        <twig:form-theme>bootstrap_5_layout.html.twig</twig:form-theme>\n        <!-- ... -->\n    </twig:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Switch User Firewall in Symfony Security (PHP) - PHP\nDESCRIPTION: Demonstrates how to configure the 'switch_user' feature in a Symfony firewall using PHP code, leveraging the 'SecurityConfig' class. The snippet initializes configuration that assigns the 'CAN_SWITCH_USER' role for the user switch operation. Found in 'config/packages/security.php'; it requires Symfony 5+ and the configuration class autoloaded.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/impersonating_user.rst#2025-04-22_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/security.php\\nuse Symfony\\Config\\SecurityConfig;\\n\\nreturn static function (SecurityConfig $security): void {\\n    // ...\\n    $security->firewall('main')\\n        // ...\\n        ->switchUser()\\n            ->role('CAN_SWITCH_USER')\\n    ;\\n};\n```\n\n----------------------------------------\n\nTITLE: Sorting by Time Attributes in Symfony Finder\nDESCRIPTION: Shows how to sort finder results based on file time attributes such as accessed time, changed time, and modified time.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/finder.rst#2025-04-22_snippet_35\n\nLANGUAGE: php\nCODE:\n```\n$finder->sortByAccessedTime();\n\n$finder->sortByChangedTime();\n\n$finder->sortByModifiedTime();\n```\n\n----------------------------------------\n\nTITLE: Configuring OIDC User Info Token Handler (Base URI) - Symfony Security - YAML\nDESCRIPTION: This YAML snippet configures access token authentication to use OIDC user info for token handling via the specified base_uri. The handler fetches user information from the given endpoint URL. Place this configuration in config/packages/security.yaml, with the endpoint URL replaced appropriately according to your OIDC provider.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/access_token.rst#2025-04-22_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\nsecurity:\n    firewalls:\n        main:\n            access_token:\n                token_handler:\n                    oidc_user_info: https://www.example.com/realms/demo/protocol/openid-connect/userinfo\n```\n\n----------------------------------------\n\nTITLE: Configuring Collection Constraint with Required and Optional Fields in PHP\nDESCRIPTION: This snippet demonstrates how to configure a Collection constraint with both required and optional fields. It shows the use of Assert\\Required and Assert\\Optional constraints for different fields within the collection.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Collection.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$metadata->addPropertyConstraint('profileData', new Assert\\Collection(\n    fields: [\n        'personal_email'  => new Assert\\Required([\n            new Assert\\NotBlank(),\n            new Assert\\Email(),\n        ]),\n        'alternate_email' => new Assert\\Optional(new Assert\\Email()),\n    ],\n));\n```\n\n----------------------------------------\n\nTITLE: Generating Workflow Diagrams using CLI Commands\nDESCRIPTION: Terminal commands for generating workflow diagrams using different visualization tools like Graphviz, PlantUML, and Mermaid CLI. Supports output in SVG and PNG formats with optional place highlighting.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/workflow/dumping-workflows.rst#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n# using Graphviz's 'dot' and SVG images\nphp bin/console workflow:dump workflow-name | dot -Tsvg -o graph.svg\n\n# using Graphviz's 'dot' and PNG images\nphp bin/console workflow:dump workflow-name | dot -Tpng -o graph.png\n\n# using PlantUML's 'plantuml.jar'\nphp bin/console workflow:dump workflow_name --dump-format=puml | java -jar plantuml.jar -p  > graph.png\n\n# highlight 'place1' and 'place2' in the dumped workflow\nphp bin/console workflow:dump workflow-name place1 place2 | dot -Tsvg -o graph.svg\n\n# using Mermaid.js CLI\nphp bin/console workflow:dump workflow_name --dump-format=mermaid | mmdc -o graph.svg\n```\n\n----------------------------------------\n\nTITLE: Configuring Country Validation with PHP\nDESCRIPTION: Example of configuring the Country validation constraint using PHP code in a User entity class. Shows how to add the constraint using the loadValidationMetadata method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Country.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/User.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass User\n{\n    // ...\n\n    public static function loadValidationMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('country', new Assert\\Country());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Hostname Validation with PHP\nDESCRIPTION: Example showing how to configure the Hostname constraint using PHP code with ClassMetadata. Demonstrates programmatic configuration of validation rules.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Hostname.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/ServerSettings.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass ServerSettings\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('name', new Assert\\Hostname(\n            message: 'The server name must be a valid hostname.',\n        ));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enforcing HTTPS via access_control in PHP\nDESCRIPTION: This PHP configuration snippet illustrates how to enforce the HTTPS protocol for specific URL paths using Symfony's PHP configuration format. It uses the `SecurityConfig` object and its fluent interface (`->path()->roles()->requiresChannel()`) to define access control rules that enforce `https` for paths starting with `/secure` (requiring `ROLE_ADMIN`), `/login` (public access), and all other paths (`^/`).\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/force_https.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/security.php\nuse Symfony\\Config\\SecurityConfig;\n\nreturn static function (SecurityConfig $security): void {\n    // ....\n\n    $security->accessControl()\n        ->path('^/secure')\n        ->roles(['ROLE_ADMIN'])\n        ->requiresChannel('https')\n    ;\n\n    $security->accessControl()\n        ->path('^/login')\n        ->roles(['PUBLIC_ACCESS'])\n        ->requiresChannel('https')\n    ;\n\n    $security->accessControl()\n        ->path('^/')\n        ->roles(['PUBLIC_ACCESS'])\n        ->requiresChannel('https')\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Parameter Access via ContainerBagInterface in Symfony Service\nDESCRIPTION: Example of accessing multiple container parameters in a service using ContainerBagInterface injection.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration.rst#2025-04-22_snippet_40\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Service;\n\nuse Symfony\\Component\\DependencyInjection\\ParameterBag\\ContainerBagInterface;\n\nclass MessageGenerator\n{\n    public function __construct(\n        private ContainerBagInterface $params,\n    ) {\n    }\n\n    public function someMethod(): void\n    {\n        // get any container parameter from $this->params, which stores all of them\n        $sender = $this->params->get('mailer_sender');\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DateTime Constraint using PHP Attributes\nDESCRIPTION: Example of using the DateTime constraint with PHP attributes in a Symfony entity class. It validates that the createdAt property is a valid datetime string.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/DateTime.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Author.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Author\n{\n    /**\n     * @var string A \"Y-m-d H:i:s\" formatted value\n     */\n    #[Assert\\DateTime]\n    protected string $createdAt;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Range Validation Using PHP Attributes\nDESCRIPTION: Example showing how to validate a height property between 120 and 180 using PHP attributes in a Participant entity class.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Range.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Participant.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Participant\n{\n    #[Assert\\Range(\n        min: 120,\n        max: 180,\n        notInRangeMessage: 'You must be between {{ min }}cm and {{ max }}cm tall to enter',\n    )]\n    protected int $height;\n}\n```\n\n----------------------------------------\n\nTITLE: Using LessThan Constraint with PHP Code Configuration\nDESCRIPTION: Example of applying the LessThan constraint using PHP code via loadValidatorMetadata to validate that siblings count is less than 5 and age is less than 80.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/LessThan.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Person.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Person\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('siblings', new Assert\\LessThan(5));\n\n        $metadata->addPropertyConstraint('age', new Assert\\LessThan(\n            value: 80,\n        ));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring WebProfilerBundle in Symfony Kernel (PHP)\nDESCRIPTION: This snippet shows how to conditionally configure the WebProfilerBundle in a Symfony Kernel class. It sets up the web profiler toolbar and configures routes for the Web Debug Toolbar and Profiler.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/micro_kernel_trait.rst#2025-04-22_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n// configure WebProfilerBundle only if the bundle is enabled\nif (isset($this->bundles['WebProfilerBundle'])) {\n    $container->extension('web_profiler', [\n        'toolbar' => true,\n        'intercept_redirects' => false,\n    ]);\n}\n\nprotected function configureRoutes(RoutingConfigurator $routes): void\n{\n    // import the WebProfilerRoutes, only if the bundle is enabled\n    if (isset($this->bundles['WebProfilerBundle'])) {\n        $routes->import('@WebProfilerBundle/Resources/config/routing/wdt.xml')->prefix('/_wdt');\n        $routes->import('@WebProfilerBundle/Resources/config/routing/profiler.xml')->prefix('/_profiler');\n    }\n\n    // load the routes defined as PHP attributes\n    // (use 'annotation' as the second argument if you define routes as annotations)\n    $routes->import(__DIR__.'/Controller/', 'attribute');\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Validation Groups Using Array Callback in Symfony Forms\nDESCRIPTION: This snippet shows how to configure the validation_groups option in a Symfony form using an array callback. It calls a static method on the Client class to determine the validation groups after form submission but before validation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/data_based_validation.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Entity\\Client;\nuse Symfony\\Component\\OptionsResolver\\OptionsResolver;\n\n// ...\npublic function configureOptions(OptionsResolver $resolver): void\n{\n    $resolver->setDefaults([\n        'validation_groups' => [\n            Client::class,\n            'determineValidationGroups',\n        ],\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default HTTP Client Options in Symfony (PHP)\nDESCRIPTION: Illustrates configuring Symfony's HTTP client defaults programmatically using PHP configuration. Dependencies include access to the service container in FrameworkBundle configuration. Parameters include 'max_host_connections', 'default_options', 'headers', and 'max_redirects', mirroring the YAML and XML examples. Place this code in config/packages/framework.php for registering settings at boot time.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_42\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/framework.php\\n$container->loadFromExtension('framework', [\\n    'http_client' => [\\n        'max_host_connections' => 10,\\n        'default_options' => [\\n            'headers' => [\\n                'X-Powered-By' => 'ACME App',\\n            ],\\n            'max_redirects' => 7,\\n        ],\\n    ],\\n]);\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Email Settings in Symfony PHP\nDESCRIPTION: Illustrates how to configure global email settings such as sender, recipients, and headers using PHP configuration in Symfony.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_37\n\nLANGUAGE: PHP\nCODE:\n```\n// config/packages/mailer.php\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework): void {\n    $mailer = $framework->mailer();\n    $mailer\n        ->envelope()\n            ->sender('fabien@example.com')\n            ->recipients(['foo@example.com', 'bar@example.com'])\n    ;\n\n    $mailer->header('From')->value('Fabien <fabien@example.com>');\n    $mailer->header('Bcc')->value('baz@example.com');\n    $mailer->header('X-Custom-Header')->value('foobar');\n};\n```\n\n----------------------------------------\n\nTITLE: Resetting Application State in kernel.finish_request Event Listener\nDESCRIPTION: PHP code snippet demonstrating how to reset the application state in a kernel.finish_request event listener.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/events.rst#2025-04-22_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\HttpKernel\\Event\\FinishRequestEvent;\n\npublic function onKernelFinishRequest(FinishRequestEvent $event): void\n{\n    if (null === $parentRequest = $this->requestStack->getParentRequest()) {\n        return;\n    }\n\n    // reset the locale of the subrequest to the locale of the parent request\n    $this->setLocale($parentRequest);\n}\n```\n\n----------------------------------------\n\nTITLE: Converting PSR-7 ResponseInterface to Symfony HttpFoundation Response - PHP\nDESCRIPTION: Converts a PSR-7 ResponseInterface to a Symfony HttpFoundation Response with HttpFoundationFactory. Requires symfony/psr-http-message-bridge. The required input ($psrResponse) must be an instance implementing Psr\\Http\\Message\\ResponseInterface. The output matches a standard Symfony Response object.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/psr7.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Bridge\\PsrHttpMessage\\Factory\\HttpFoundationFactory;\n\n// $psrResponse is an instance of Psr\\Http\\Message\\ResponseInterface\n\n$httpFoundationFactory = new HttpFoundationFactory();\n$symfonyResponse = $httpFoundationFactory->createResponse($psrResponse);\n```\n\n----------------------------------------\n\nTITLE: Importing Controller Routes Using XML Configuration in Symfony - XML\nDESCRIPTION: This XML snippet shows how to import controller route definitions using the 'attribute' loader type. The <import> element points to a directory containing controller classes annotated with route attributes. Inputs are relative paths to top-level controller directories; output is a set of imported routes registered with Symfony's router. This snippet should reside in config/routes.xml, conforming to the declared XML schema for Symfony routing.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/routing/custom_route_loader.rst#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\\n<routes xmlns=\\\"http://symfony.com/schema/routing\\\"\\n    xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n    xsi:schemaLocation=\\\"http://symfony.com/schema/routing\\n        https://symfony.com/schema/routing/routing-1.0.xsd\\\">\\n\\n    <import resource=\\\"../src/Controller\\\" type=\\\"attribute\\\"/>\\n</routes>\n```\n\n----------------------------------------\n\nTITLE: Defining Hierarchical Database Configuration Values in YAML\nDESCRIPTION: Demonstrates how to structure configuration for database connections in YAML, including nested arrays for multiple named connections, type-specific fields, and simple boolean flags. No special dependencies are required to consume this YAML, but it is intended to be loaded and validated by Symfony's Config component as per custom PHP configuration classes. Inputs include connection names and associated fields; output is structured configuration data, with constraints handled later in PHP. Values such as 'auto_connect' are validated in PHP, not YAML.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/config/definition.rst#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndatabase:\n    auto_connect: true\n    default_connection: mysql\n    connections:\n        mysql:\n            host:     localhost\n            driver:   mysql\n            username: user\n            password: pass\n        sqlite:\n            host:     localhost\n            driver:   sqlite\n            memory:   true\n            username: user\n            password: pass\n\n```\n\n----------------------------------------\n\nTITLE: Git Commands for Resolving Rebase Conflicts\nDESCRIPTION: Terminal commands for resolving merge conflicts during git rebase and continuing the rebase process\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/contributing/code/pull_requests.rst#2025-04-22_snippet_6\n\nLANGUAGE: terminal\nCODE:\n```\n$ git add ... # add resolved files\n$ git rebase --continue\n```\n\n----------------------------------------\n\nTITLE: Defining a Service with Setter Injection Method in PHP\nDESCRIPTION: This PHP code defines a `MessageGenerator` service class with a `setLogger` method. This method allows injecting a `LoggerInterface` dependency after the object has been constructed, demonstrating the setter injection pattern. The logger dependency is optional in the sense that it's not injected via the constructor.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/calls.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Service/MessageGenerator.php\nnamespace App\\Service;\n\nuse Psr\\Log\\LoggerInterface;\n\nclass MessageGenerator\n{\n    private LoggerInterface $logger;\n\n    public function setLogger(LoggerInterface $logger): void\n    {\n        $this->logger = $logger;\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Setter Injection via Method Call in YAML\nDESCRIPTION: This YAML configuration snippet demonstrates how to instruct the Symfony DI container to call the `setLogger` method on the `App\\Service\\MessageGenerator` service after it's instantiated. It uses the `calls` key to specify the method name and passes the `@logger` service reference as an argument.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/calls.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nservices:\n    App\\Service\\MessageGenerator:\n        # ...\n        calls:\n            - setLogger: ['@logger']\n```\n\n----------------------------------------\n\nTITLE: Dumping PHP Objects using Serialization Flag in PHP\nDESCRIPTION: Demonstrates dumping a PHP object (here, `stdClass`) into a YAML string using the `Yaml::DUMP_OBJECT` flag. The object is serialized using PHP's `serialize()` function and embedded with a `!php/object` tag.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/yaml.rst#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$object = new \\stdClass();\n$object->foo = 'bar';\n\n$dumped = Yaml::dump($object, 2, 4, Yaml::DUMP_OBJECT);\n// !php/object 'O:8:\"stdClass\":1:{s:5:\"foo\";s:7:\"bar\";}'\n```\n\n----------------------------------------\n\nTITLE: Starting VarDumper Server for Debug Output Collection in Terminal\nDESCRIPTION: These terminal commands demonstrate launching the Symfony VarDumper server using bin/console. The dump server collects dumped data and can present output in the console or write it in HTML format to a file, which is useful for separating debug output from application output. The project must be a Symfony application with var-dumper installed; the --format option specifies output formatting. The server listens on TCP and outputs to either the console or a specified HTML file.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/var_dumper.rst#2025-04-22_snippet_2\n\nLANGUAGE: terminal\nCODE:\n```\n# displays the dumped data in the console:\n$ php bin/console server:dump\n  [OK] Server listening on tcp://0.0.0.0:9912\n\n# stores the dumped data in a file using the HTML format:\n$ php bin/console server:dump --format=html > dump.html\n```\n\n----------------------------------------\n\nTITLE: Configuring Memory User Provider in Symfony (YAML)\nDESCRIPTION: This YAML snippet sets up a Symfony memory user provider in config/packages/security.yaml, allowing the definition of users and their hashed passwords directly in configuration. It's suitable only for prototypes or simple scenarios where no user database is needed. Be sure to use securely hashed passwords; roles are specified per user.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/user_providers.rst#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\\nsecurity:\\n    providers:\\n        backend_users:\\n            memory:\\n                users:\\n                    john_admin: { password: '$2y$13$jxGxc ... IuqDju', roles: ['ROLE_ADMIN'] }\\n                    jane_admin: { password: '$2y$13$PFi1I ... rGwXCZ', roles: ['ROLE_ADMIN', 'ROLE_SUPER_ADMIN'] }\\n\\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Making a Basic HTTP Request Using Custom BrowserKit Client (Symfony, PHP)\nDESCRIPTION: Shows how to instantiate a custom Client (extending AbstractBrowser) and use the request method to perform HTTP GET to a given URL. Returns a DomCrawler\\Crawler object for parsing the response. Requires the Acme\\Client class and the symfony/browser-kit and symfony/dom-crawler packages.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/browser_kit.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Acme\\Client;\\n\\n$client = new Client();\\n$crawler = $client->request('GET', '/');\n```\n\n----------------------------------------\n\nTITLE: Defining Controller Resolver Interface in PHP\nDESCRIPTION: Defines the `ControllerResolverInterface` within the `Symfony\\Component\\HttpKernel\\Controller` namespace. This interface specifies the contract for classes responsible for determining and returning a PHP callable (the controller) based on the incoming `Request` object. It depends on `Symfony\\Component\\HttpFoundation\\Request`. The core method is `getController`, which takes a `Request` object as input and must return either a `callable` representing the controller or `false` if unable to resolve one.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/http_kernel.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace Symfony\\Component\\HttpKernel\\Controller;\n\nuse Symfony\\Component\\HttpFoundation\\Request;\n\ninterface ControllerResolverInterface\n{\n    public function getController(Request $request): callable|false;\n}\n```\n\n----------------------------------------\n\nTITLE: Dumping an Object with Visibility Prefixes using VarDumper (PHP)\nDESCRIPTION: Shows how VarDumper represents object properties with different visibilities. Public properties are prefixed with `+`, protected with `#`, and private with `-`. An instance of `PropertyExample` is created and dumped.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/var_dumper.rst#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nclass PropertyExample\n{\n    public string $publicProperty = 'The `+` prefix denotes public properties,';\n    protected string $protectedProperty = '`#` protected ones and `-` private ones.';\n    private string $privateProperty = 'Hovering a property shows a reminder.';\n}\n\n$var = new PropertyExample();\ndump($var);\n```\n\n----------------------------------------\n\nTITLE: Removing Files, Directories, and Symlinks (PHP)\nDESCRIPTION: Demonstrates the `Filesystem::remove` method. It takes a single path or an array (or Traversable) of paths to delete files, directories (recursively), or symbolic links.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/filesystem.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$filesystem->remove(['symlink', '/path/to/directory', 'activity.log']);\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Switch User Event for Locale Update in Symfony - PHP\nDESCRIPTION: Implements an event subscriber class ('SwitchUserSubscriber') that listens to the 'security.switch_user' event in Symfony. On user switch, it updates the session '_locale' according to the impersonated user's preferred locale, relying on a 'getLocale()' method. Must be placed in 'src/EventListener/SwitchUserSubscriber.php', requires Symfony EventDispatcher and correct service autowiring. Inputs include the SwitchUserEvent object; output is session update for locale stickiness.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/impersonating_user.rst#2025-04-22_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n// src/EventListener/SwitchUserSubscriber.php\\nnamespace App\\EventListener;\\n\\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\\nuse Symfony\\Component\\Security\\Http\\Event\\SwitchUserEvent;\\nuse Symfony\\Component\\Security\\Http\\SecurityEvents;\\n\\nclass SwitchUserSubscriber implements EventSubscriberInterface\\n{\\n    public function onSwitchUser(SwitchUserEvent $event): void\\n    {\\n        $request = $event->getRequest();\\n\\n        if ($request->hasSession() && ($session = $request->getSession())) {\\n            $session->set(\\n                '_locale',\\n                // assuming your User has some getLocale() method\\n                $event->getTargetUser()->getLocale()\\n            );\\n        }\\n    }\\n\\n    public static function getSubscribedEvents(): array\\n    {\\n        return [\\n            // constant for security.switch_user\\n            SecurityEvents::SWITCH_USER => 'onSwitchUser',\\n        ];\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Password Hashers with Migration in PHP\nDESCRIPTION: PHP configuration for password hashers with migration support. This defines legacy hashers and configures automatic migration to stronger hashing algorithms during authentication.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/passwords.rst#2025-04-22_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/security.php\nuse Symfony\\Config\\SecurityConfig;\n\nreturn static function (SecurityConfig $security): void {\n    // ...\n    $security->passwordHasher('legacy')\n        ->algorithm('sha256')\n        ->encodeAsBase64(true)\n        ->iterations(1)\n    ;\n\n    $security->passwordHasher('App\\Entity\\User')\n        // the new hasher, along with its options\n        ->algorithm('sodium')\n        ->migrateFrom([\n            'bcrypt', // uses the \"bcrypt\" hasher with the default options\n            'legacy', // uses the \"legacy\" hasher configured above\n        ])\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Using PositiveOrZero Constraint with YAML Configuration in Symfony\nDESCRIPTION: Example of applying the PositiveOrZero constraint using YAML configuration file. This configuration ensures the siblings property of the Person entity is either positive or zero.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/PositiveOrZero.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Person:\n    properties:\n        siblings:\n            - PositiveOrZero: ~\n```\n\n----------------------------------------\n\nTITLE: Flow Style Collections in YAML\nDESCRIPTION: Demonstrates compact flow style notation for sequences and mappings.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/formats/yaml.rst#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n[PHP, Perl, Python]\n```\n\nLANGUAGE: yaml\nCODE:\n```\n{ PHP: 5.2, MySQL: 5.1, Apache: 2.2.20 }\n```\n\n----------------------------------------\n\nTITLE: Implementing Media Entity Class in PHP\nDESCRIPTION: This code defines a Media entity class with a path property for storing image paths in the database. It includes a getWebPath() method to return the full image URL for use in templates.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/create_form_type_extension.rst#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n// src/Entity/Media.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Media\n{\n    // ...\n\n    /**\n     * @var string The path - typically stored in the database\n     */\n    private string $path;\n\n    // ...\n\n    public function getWebPath(): string\n    {\n        // ... $webPath being the full image URL, to be used in templates\n\n        return $webPath;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing URL Matching with CompiledUrlMatcher in PHP\nDESCRIPTION: Shows how to create a performance-optimized URL matcher using CompiledUrlMatcher and CompiledUrlMatcherDumper.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/create_framework/routing.rst#2025-04-22_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Routing\\Matcher\\CompiledUrlMatcher;\nuse Symfony\\Component\\Routing\\Matcher\\Dumper\\CompiledUrlMatcherDumper;\n\n$compiledRoutes = (new CompiledUrlMatcherDumper($routes))->getCompiledRoutes();\n\n$matcher = new CompiledUrlMatcher($compiledRoutes, $context);\n```\n\n----------------------------------------\n\nTITLE: Programmatically Adding Week Constraint in Symfony with PHP\nDESCRIPTION: Example of using the loadValidatorMetadata method to programmatically add a Week constraint to the 'startWeek' property of an OnlineCourse entity, with min and max week boundaries.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Week.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/OnlineCourse.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass OnlineCourse\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('startWeek', new Assert\\Week(\n            min: '2022-W01',\n            max: '2022-W20',\n        ));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Returning a Custom RunnerInterface from Runtime Closure (PHP)\nDESCRIPTION: This PHP snippet illustrates returning an object implementing `Symfony\\Component\\Runtime\\RunnerInterface` from the closure. This allows defining custom application execution logic within the `run()` method, providing flexibility beyond standard application types.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/runtime.rst#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n// public/index.php\nuse Symfony\\Component\\Runtime\\RunnerInterface;\n\nrequire_once dirname(__DIR__).'/vendor/autoload_runtime.php';\n\nreturn static function (): RunnerInterface {\n    return new class implements RunnerInterface {\n        public function run(): int\n        {\n            echo 'Hello World';\n\n            return 0;\n        }\n    };\n};\n```\n\n----------------------------------------\n\nTITLE: Ignoring Missing Dependencies in YAML\nDESCRIPTION: YAML configuration example showing how to handle optional dependencies using the '@?' syntax, which will skip a method call if the dependency doesn't exist.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/optional_dependencies.rst#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nservices:\n    App\\Newsletter\\NewsletterManager:\n        calls:\n            - setLogger: ['@?logger']\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Version Strategy in Symfony Framework (XML)\nDESCRIPTION: XML configuration to enable the custom asset version strategy for all application assets in the Symfony framework.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/custom_version_strategy.rst#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/framework.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <framework:config>\n        <framework:assets version-strategy=\"App\\Asset\\VersionStrategy\\GulpBusterVersionStrategy\"/>\n    </framework:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Failover and Round-Robin Transports in PHP\nDESCRIPTION: Example of setting up failover and round-robin transport configurations for the Notifier component using PHP.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/notifier.rst#2025-04-22_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/notifier.php\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework): void {\n    $framework->notifier()\n        // Send notifications to Slack and use Telegram if\n        // Slack errored\n        ->chatterTransport('main', env('SLACK_DSN').' || '.env('TELEGRAM_DSN'))\n\n        // Send notifications to the next scheduled transport calculated by round robin\n        ->chatterTransport('roundrobin', env('SLACK_DSN').' && '.env('TELEGRAM_DSN'))\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating MongoDB TTL Index for Lock Collection\nDESCRIPTION: Creates a TTL (Time To Live) index on the expires_at field in MongoDB lock collection to automatically clean up expired locks. The expireAfterSeconds parameter determines when documents should be removed after their expiration timestamp.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/lock.rst#2025-04-22_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\ndb.lock.createIndex(\n    { \"expires_at\": 1 },\n    { \"expireAfterSeconds\": 0 }\n)\n```\n\n----------------------------------------\n\nTITLE: Using absolute_url() Function in Twig Templates\nDESCRIPTION: Shows how to use the absolute_url() Twig function to generate absolute URLs for assets.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/templates.rst#2025-04-22_snippet_14\n\nLANGUAGE: html+twig\nCODE:\n```\n<img src=\"{{ absolute_url(asset('images/logo.png')) }}\" alt=\"Symfony!\"/>\n\n<link rel=\"shortcut icon\" href=\"{{ absolute_url('favicon.png') }}\">\n```\n\n----------------------------------------\n\nTITLE: Configuring Blog Publishing Workflow in XML\nDESCRIPTION: XML configuration for a blog publishing workflow with places, transitions, and marking store settings.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/workflow.rst#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/workflow.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n    https://symfony.com/schema/dic/services/services-1.0.xsd\n    http://symfony.com/schema/dic/symfony\n    https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <framework:config>\n        <!-- or type=\"state_machine\" -->\n        <framework:workflow name=\"blog_publishing\" type=\"workflow\">\n            <framework:audit-trail enabled=\"true\"/>\n            <framework:marking-store type=\"single_state\">\n                <framework:argument>currentPlace</framework:argument>\n            </framework:marking-store>\n            <framework:support>App\\Entity\\BlogPost</framework:support>\n            <framework:initial-marking>draft</framework:initial-marking>\n\n            <!-- defining places manually is optional -->\n            <framework:place>draft</framework:place>\n            <framework:place>reviewed</framework:place>\n            <framework:place>rejected</framework:place>\n            <framework:place>published</framework:place>\n\n            <framework:transition name=\"to_review\">\n                <framework:from>draft</framework:from>\n                <framework:to>reviewed</framework:to>\n            </framework:transition>\n            <framework:transition name=\"publish\">\n                <framework:from>reviewed</framework:from>\n                <framework:to>published</framework:to>\n            </framework:transition>\n            <framework:transition name=\"reject\">\n                <framework:from>reviewed</framework:from>\n                <framework:to>rejected</framework:to>\n            </framework:transition>\n        </framework:workflow>\n    </framework:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Mercure Hub in XML\nDESCRIPTION: XML configuration for setting up Mercure hub with custom token provider in Symfony application.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mercure.rst#2025-04-22_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/mercure.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<config>\n    <hub\n        name=\"default\"\n        url=\"https://mercure-hub.example.com/.well-known/mercure\"\n    >\n        <jwt provider=\"App\\Mercure\\MyTokenProvider\"/>\n    </hub>\n</config>\n```\n\n----------------------------------------\n\nTITLE: Implementing Service Subscriber for Command Bus in PHP\nDESCRIPTION: Implementation of the ServiceSubscriberInterface for a CommandBus class that lazy-loads command handlers through a service locator.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/service_subscribers_locators.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// src/CommandBus.php\nnamespace App;\n\nuse App\\CommandHandler\\BarHandler;\nuse App\\CommandHandler\\FooHandler;\nuse Psr\\Container\\ContainerInterface;\nuse Symfony\\Contracts\\Service\\ServiceSubscriberInterface;\n\nclass CommandBus implements ServiceSubscriberInterface\n{\n    public function __construct(\n        private ContainerInterface $locator,\n    ) {\n    }\n\n    public static function getSubscribedServices(): array\n    {\n        return [\n            'App\\FooCommand' => FooHandler::class,\n            'App\\BarCommand' => BarHandler::class,\n        ];\n    }\n\n    public function handle(Command $command): mixed\n    {\n        $commandClass = get_class($command);\n\n        if ($this->locator->has($commandClass)) {\n            $handler = $this->locator->get($commandClass);\n\n            return $handler->handle($command);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Resolved Options within a Method in PHP\nDESCRIPTION: This PHP snippet shows the `sendMail` method accessing options from `$this->options`. Since `OptionsResolver` guarantees that all defined options (with defaults) are present and validated in the constructor, the code can safely access them directly without needing null checks or default value logic.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/options_resolver.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// ...\nclass Mailer\n{\n    // ...\n\n    public function sendMail($from, $to): void\n    {\n        $mail = ...;\n        $mail->setHost($this->options['host']);\n        $mail->setUsername($this->options['username']);\n        $mail->setPassword($this->options['password']);\n        $mail->setPort($this->options['port']);\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying an LDAP Server and Iterating Results in PHP\nDESCRIPTION: Executes an LDAP query against a specific base DN ('dc=symfony,dc=com') with a filter ('(&(objectclass=person)(ou=Maintainers))'). The results are lazy-loaded and iterated using a foreach loop.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/ldap.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Ldap\\Ldap;\n// ...\n\n$query = $ldap->query('dc=symfony,dc=com', '(&(objectclass=person)(ou=Maintainers))');\n$results = $query->execute();\n\nforeach ($results as $entry) {\n    // Do something with the results\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Expression Constraints with PHP ClassMetadata in Symfony\nDESCRIPTION: Demonstrates how to programmatically add an Expression constraint using the loadValidatorMetadata method and ClassMetadata API. This approach provides the same validation as the other methods but configured through PHP code.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Expression.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// src/Model/Analysis.php\nnamespace App\\Model;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Analysis\n{\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('metric', new Assert\\Expression(\n            expression: 'value + error_margin < threshold',\n            values: ['error_margin' => 0.25, 'threshold' => 1.5],\n        ));\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Serialization Context with XML in Symfony\nDESCRIPTION: This XML configuration defines the default context for the Symfony Serializer within the Symfony framework's configuration files, placed at config/packages/serializer.xml. It ensures that extra attributes are not allowed during deserialization via <framework:allow-extra-attributes>false</framework:allow-extra-attributes>. Proper XML structure and namespace declarations are required by Symfony.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer.rst#2025-04-22_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/serializer.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <framework:config>\n        <framework:serializer>\n            <framework:default-context>\n                <framework:allow-extra-attributes>false</framework:allow-extra-attributes>\n            </framework:default-context>\n        </framework:serializer>\n    </framework:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Creating a Listener for Main Requests in Symfony HttpKernel\nDESCRIPTION: This snippet demonstrates how to create an event listener that only acts on the main request in a Symfony application using the HttpKernel component.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/http_kernel.rst#2025-04-22_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\HttpKernel\\Event\\RequestEvent;\n// ...\n\npublic function onKernelRequest(RequestEvent $event): void\n{\n    if (!$event->isMainRequest()) {\n        return;\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Inline JavaScript Modules in HTML\nDESCRIPTION: Example of importing a library directly in an inline script tag with the type=\"module\" attribute.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/asset_mapper.rst#2025-04-22_snippet_22\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n    import $ from 'jquery';\n    $('.something').hide();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Deprecating a Service Alias via Configuration Files\nDESCRIPTION: Shows how to mark a service alias (`app.mailer`) as deprecated in YAML, XML, and PHP configuration files. This triggers a deprecation warning when the alias is used. A package name, version, and an optional custom message (using the `%alias_id%` placeholder) can be specified.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/alias_private.rst#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\napp.mailer:\n    alias: 'App\\Mail\\PhpMailer'\n\n    # this outputs the following generic deprecation message:\n    # Since acme/package 1.2: The \"app.mailer\" service alias is deprecated. You should stop using it, as it will be removed in the future\n    deprecated:\n        package: 'acme/package'\n        version: '1.2'\n\n    # you can also define a custom deprecation message (%alias_id% placeholder is available)\n    deprecated:\n        package: 'acme/package'\n        version: '1.2'\n        message: 'The \"%alias_id%\" alias is deprecated. Do not use it anymore.'\n```\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"app.mailer\" alias=\"App\\Mail\\PhpMailer\">\n            <!-- this outputs the following generic deprecation message:\n                 Since acme/package 1.2: The \"app.mailer\" service alias is deprecated. You should stop using it, as it will be removed in the future -->\n            <deprecated package=\"acme/package\" version=\"1.2\"/>\n\n            <!-- you can also define a custom deprecation message (%alias_id% placeholder is available) -->\n            <deprecated package=\"acme/package\" version=\"1.2\">\n                The \"%alias_id%\" service alias is deprecated. Don't use it anymore.\n            </deprecated>\n        </service>\n    </services>\n</container>\n```\n\nLANGUAGE: php\nCODE:\n```\n$container\n    ->setAlias('app.mailer', 'App\\Mail\\PhpMailer')\n\n    // this outputs the following generic deprecation message:\n    // Since acme/package 1.2: The \"app.mailer\" service alias is deprecated. You should stop using it, as it will be removed in the future\n    ->setDeprecated('acme/package', '1.2')\n\n    // you can also define a custom deprecation message (%alias_id% placeholder is available)\n    ->setDeprecated(\n        'acme/package',\n        '1.2',\n        'The \"%alias_id%\" service alias is deprecated. Don\\'t use it anymore.'\n    )\n;\n```\n\n----------------------------------------\n\nTITLE: Creating Custom TestCase for Application-Specific Tests in Symfony\nDESCRIPTION: PHP class that extends WebTestCase to create a custom test case for application-specific tests. This implementation overrides the createKernel method to include the application ID when creating the kernel for tests.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/multiple_kernels.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// apps/api/tests/ApiTestCase.php\nnamespace Api\\Tests;\n\nuse Shared\\Kernel;\nuse Symfony\\Bundle\\FrameworkBundle\\Test\\WebTestCase;\nuse Symfony\\Component\\HttpKernel\\KernelInterface;\n\nclass ApiTestCase extends WebTestCase\n{\n    protected static function createKernel(array $options = []): KernelInterface\n    {\n        $env = $options['environment'] ?? $_ENV['APP_ENV'] ?? $_SERVER['APP_ENV'] ?? 'test';\n        $debug = $options['debug'] ?? (bool) ($_ENV['APP_DEBUG'] ?? $_SERVER['APP_DEBUG'] ?? true);\n\n        return new Kernel($env, $debug, 'api');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Case Conversion Methods in Symfony PHP\nDESCRIPTION: Examples of string case conversion methods including kebab-case, PascalCase, and chained case transformations. Also shows case-insensitive operations using ignoreCase().\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/string.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nu('Foo: Bar-baz.')->kebab(); // 'foo-bar-baz'\nu('Foo: Bar-baz.')->pascal(); // 'FooBarBaz'\nu('Foo: Bar-baz.')->camel()->upper(); // 'FOOBARBAZ'\n\nu('abc')->indexOf('B');               // null\nu('abc')->ignoreCase()->indexOf('B'); // 1\n```\n\n----------------------------------------\n\nTITLE: Creating a Page-Specific JavaScript Entrypoint\nDESCRIPTION: Shows how to create a separate JavaScript entrypoint that can include both JavaScript and CSS for specific pages only.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/asset_mapper.rst#2025-04-22_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\n// assets/checkout.js\nimport './checkout.css';\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Defining Service as Global Variable in Twig XML\nDESCRIPTION: Demonstrates how to define a service as a global Twig variable in the XML configuration file.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/templates.rst#2025-04-22_snippet_21\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/twig.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:twig=\"http://symfony.com/schema/dic/twig\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/twig\n        https://symfony.com/schema/dic/twig/twig-1.0.xsd\">\n\n    <twig:config>\n        <!-- ... -->\n        <twig:global key=\"uuid\" id=\"App\\Generator\\UuidGenerator\" type=\"service\"/>\n    </twig:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom HTML Sanitizer in PHP\nDESCRIPTION: Shows how to configure a custom HTML sanitizer in PHP configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/html_sanitizer.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/framework.php\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework): void {\n    $framework->htmlSanitizer()\n        ->sanitizer('app.post_sanitizer')\n            ->blockElement('h1')\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Managing Schedule Provider Tasks\nDESCRIPTION: Demonstrates how to implement a ScheduleProviderInterface to manage recurring tasks including adding and removing scheduled reports\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/scheduler.rst#2025-04-22_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n// src/Scheduler/SaleTaskProvider.php\nnamespace App\\Scheduler;\n\n#[AsSchedule('uptoyou')]\nclass SaleTaskProvider implements ScheduleProviderInterface\n{\n    public function getSchedule(): Schedule\n    {\n        $this->removeOldReports = RecurringMessage::cron('3 8 * * 1', new CleanUpOldSalesReport());\n\n        return $this->schedule ??= (new Schedule())\n            ->with(\n                // ...\n                $this->removeOldReports;\n            );\n    }\n\n    // ...\n\n    public function removeCleanUpMessage()\n    {\n        $this->getSchedule()->getSchedule()->remove($this->removeOldReports);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using yaml_encode Filter with inline Parameter in Twig\nDESCRIPTION: Shows the effect of the `inline` parameter on the `yaml_encode` filter. With `inline = 0`, the nested array is represented compactly. With `inline = 1`, the first level keys (`a`, `b`) are put on separate lines, while their values remain inline.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#2025-04-22_snippet_45\n\nLANGUAGE: twig\nCODE:\n```\n{% set array = {\n    'a': {\n        'c': 'e'\n    },\n    'b': {\n        'd': 'f'\n    }\n} %}\n\n{{ array|yaml_encode(inline = 0) }}\n{# output:\n   { a: { c: e }, b: { d: f } } #}\n\n{{ array|yaml_encode(inline = 1) }}\n{# output:\n   a: { c: e }\n   b: { d: f } #}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Email Headers\nDESCRIPTION: Examples of adding custom headers to email messages, including text headers and ID headers with multiple values for reference chains.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n$email = (new Email())\n    ->getHeaders()\n        // this non-standard header tells compliant autoresponders (\"email holiday mode\")\n        // to not reply to this message because it's an automated email\n        ->addTextHeader('X-Auto-Response-Suppress', 'OOF, DR, RN, NRN, AutoReply')\n\n        // use an array if you want to add a header with multiple values\n        // (for example in the \"References\" or \"In-Reply-To\" header)\n        ->addIdHeader('References', ['123@example.com', '456@example.com'])\n\n        // ...\n;\n```\n\n----------------------------------------\n\nTITLE: Configuring Group Sequence Provider in XML\nDESCRIPTION: This code shows how to set up a User class as a group sequence provider using XML configuration in Symfony.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/validation/sequence_provider.rst#2025-04-22_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping\n        https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\User\">\n        <group-sequence-provider/>\n        <!-- ... -->\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Customizing Access Token Success Handler - Symfony Security - PHP\nDESCRIPTION: This PHP configuration snippet shows how to specify both a custom access token handler and an authentication success handler in Symfony. By chaining tokenHandler() and successHandler() calls, it configures the firewall for programmatic PHP setups. Both referenced handler classes must be fully implemented and registered as Symfony services.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/access_token.rst#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/security.php\nuse App\\Security\\AccessTokenHandler;\nuse App\\Security\\Authentication\\AuthenticationSuccessHandler;\nuse Symfony\\Config\\SecurityConfig;\n\nreturn static function (SecurityConfig $security): void {\n    $security->firewall('main')\n        ->accessToken()\n            ->tokenHandler(AccessTokenHandler::class)\n            ->successHandler(AuthenticationSuccessHandler::class)\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Legacy Bundle Structure\nDESCRIPTION: Example of how to override the getPath() method to support legacy bundle directory structure when using AbstractBundle.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/bundles.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass AcmeBlogBundle extends AbstractBundle\n{\n    public function getPath(): string\n    {\n        return __DIR__;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Changing File/Directory Owner (PHP)\nDESCRIPTION: Uses the `Filesystem::chown` method to change the owner of a file or directory. The second argument specifies the new owner (user). Setting the third argument to `true` applies the change recursively to directory contents.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/filesystem.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// sets the owner of the lolcat video to www-data\n$filesystem->chown('lolcat.mp4', 'www-data');\n// changes the owner of the video directory recursively\n$filesystem->chown('/video', 'www-data', true);\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Entity Mappings in PHP\nDESCRIPTION: PHP configuration for customizing Doctrine entity mappings in a Symfony bundle, specifically changing the directory for XML configurations in AppBundle.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/doctrine.rst#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Config\\DoctrineConfig;\n\nreturn static function (DoctrineConfig $doctrine): void {\n    $emDefault = $doctrine->orm()->entityManager('default');\n\n    $emDefault->autoMapping(true);\n    $emDefault->mapping('AppBundle')\n        ->type('xml')\n        ->dir('SomeResources/config/doctrine')\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Using Custom Compound Constraint with Groups and Payload\nDESCRIPTION: Demonstrates how to apply the custom PasswordRequirements constraint with validation groups and payload using PHP attributes.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Compound.rst#2025-04-22_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n// src/Entity/User.php\nnamespace App\\Entity\\User;\n\nuse App\\Validator\\Constraints as Assert;\n\nclass User\n{\n    #[Assert\\PasswordRequirements(\n        groups: ['registration'],\n        payload: ['severity' => 'error'],\n    )]\n    public string $plainPassword;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GreaterThan Constraint with Dates in PHP\nDESCRIPTION: Shows how to set up the GreaterThan constraint for date comparisons using PHP code.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/GreaterThan.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Order.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Order\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('deliveryDate', new Assert\\GreaterThan('today'));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Access Decision Manager in PHP\nDESCRIPTION: Configuration for using a custom access decision manager service in PHP format. The custom service must implement AccessDecisionManagerInterface.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/voters.rst#2025-04-22_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/security.php\nuse App\\Security\\MyCustomAccessDecisionManager;\nuse Symfony\\Config\\SecurityConfig;\n\nreturn static function (SecurityConfig $security): void {\n    $security->accessDecisionManager()\n        ->service(MyCustomAccessDecisionManager::class)\n        // ...\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Using Non-standard Adder/Remover Methods with PropertyAccessor in PHP\nDESCRIPTION: Shows how to configure PropertyAccessor to work with non-standard adder/remover methods (like 'join' and 'leave' instead of 'add' and 'remove') using ReflectionExtractor.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/property_access.rst#2025-04-22_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nclass Team\n{\n    // ...\n\n    public function joinTeam(string $person): void\n    {\n        $this->team[] = $person;\n    }\n\n    public function leaveTeam(string $person): void\n    {\n        foreach ($this->team as $id => $item) {\n            if ($person === $item) {\n                unset($this->team[$id]);\n\n                break;\n            }\n        }\n    }\n}\n\nuse Symfony\\Component\\PropertyInfo\\Extractor\\ReflectionExtractor;\nuse Symfony\\Component\\PropertyAccess\\PropertyAccessor;\n\n$list = new Team();\n$reflectionExtractor = new ReflectionExtractor(null, null, ['join', 'leave']);\n$propertyAccessor = new PropertyAccessor(PropertyAccessor::DISALLOW_MAGIC_METHODS, PropertyAccessor::THROW_ON_INVALID_PROPERTY_PATH, null, $reflectionExtractor, $reflectionExtractor);\n$propertyAccessor->setValue($person, 'team', ['kevin', 'wouter']);\n\nvar_dump($person->getTeam()); // ['kevin', 'wouter']\n```\n\n----------------------------------------\n\nTITLE: Using Required and Optional Field Constraints with PHP Attributes\nDESCRIPTION: Demonstrates how to use Required and Optional constraint wrappers to control whether validation rules always apply or only when a field is present in the collection.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Collection.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Author.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Author\n{\n    #[Assert\\Collection(\n        fields: [\n            'personal_email' => new Assert\\Required([\n                new Assert\\NotBlank,\n                new Assert\\Email,\n            ]),\n            'alternate_email' => new Assert\\Optional(\n                new Assert\\Email\n            ),\n        ],\n    )]\n    protected array $profileData = ['personal_email' => 'email@example.com'];\n}\n```\n\n----------------------------------------\n\nTITLE: Checking and Setting Git Line Ending Behavior - Terminal\nDESCRIPTION: These terminal commands check and ensure that Git is configured to use \"input\" for the core.autocrlf setting, which avoids unwanted line ending conversions (CRLF/LF), especially on Windows. Required dependency: Git installed. The first command displays current value; the second sets it globally to 'input'. This is important to maintain consistency for cross-platform development and prevent unnecessary file changes.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/contributing/code/pull_requests.rst#2025-04-22_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\n$ git config core.autocrlf\n$ git config --global core.autocrlf input\n```\n\n----------------------------------------\n\nTITLE: Applying abbr_class Filter in Twig\nDESCRIPTION: Uses the `abbr_class` Twig filter to generate an HTML `<abbr>` tag from a fully qualified PHP class name string (`class`). The tag displays the short class name, and the full class name appears as a tooltip on hover.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#2025-04-22_snippet_50\n\nLANGUAGE: twig\nCODE:\n```\n{{ class|abbr_class }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Toolbar AJAX Refresh in PHP\nDESCRIPTION: PHP configuration to enable automatic refresh of the web debug toolbar after AJAX requests in single-page applications.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/profiler.rst#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/web_profiler.php\nuse Symfony\\Config\\WebProfilerConfig;\n\nreturn static function (WebProfilerConfig $profiler): void {\n    $profiler->toolbar()\n        ->ajaxReplace(true);\n};\n```\n\n----------------------------------------\n\nTITLE: Console Cursor Output Clearing\nDESCRIPTION: Examples of methods to clear console output in different ways, including clearing the current line, clearing after the cursor, and clearing the entire screen.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/helpers/cursor.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// clears all the output from the current line\n$cursor->clearLine();\n\n// clears all the output from the current line after the current position\n$cursor->clearLineAfter();\n\n// clears all the output from the cursors' current position to the end of the screen\n$cursor->clearOutput();\n\n// clears the entire screen\n$cursor->clearScreen();\n```\n\n----------------------------------------\n\nTITLE: Using PositiveOrZero Constraint with XML Configuration in Symfony\nDESCRIPTION: Example of applying the PositiveOrZero constraint using XML configuration. This ensures the siblings property of the Person entity is either positive or zero.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/PositiveOrZero.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\Person\">\n        <property name=\"siblings\">\n            <constraint name=\"PositiveOrZero\"></constraint>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Decorators in PHP\nDESCRIPTION: This PHP configuration shows how to set up service decorators with priorities in Symfony's services.php file.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/service_decoration.rst#2025-04-22_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nreturn function(ContainerConfigurator $container): void {\n    $services = $container->services();\n\n    $services->set(\\Foo::class);\n\n    $services->set(\\Bar::class)\n        ->decorate(\\Foo::class, null, 5)\n        ->args([service('.inner')]);\n\n    $services->set(\\Baz::class)\n        ->decorate(\\Foo::class, null, 1)\n        ->args([service('.inner')]);\n};\n```\n\n----------------------------------------\n\nTITLE: JavaScript ES6 Class Module\nDESCRIPTION: Example of a JavaScript module that defines and exports an ES6 class with methods.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/asset_mapper.rst#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// assets/duck.js\nexport default class {\n    constructor(name) {\n        this.name = name;\n    }\n    quack() {\n        console.log(`${this.name} says: Quack!`);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Recommended Symfony Components via Composer (terminal)\nDESCRIPTION: Adds commonly used Symfony components as project dependencies, followed by development dependencies for modern Symfony Flex applications. Intended for CLI use within a project directory. Prerequisites: Composer dependency manager, Symfony Flex workflow.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/flex.rst#2025-04-22_snippet_4\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require annotations asset orm twig \\\n  logger mailer form security translation validator\n$ composer require --dev dotenv maker-bundle orm-fixtures profiler\n```\n\n----------------------------------------\n\nTITLE: Universal Emoji Short Codes Transliteration in PHP\nDESCRIPTION: PHP code showing how to use EmojiTransliterator with 'text-emoji' locale to convert various service short codes to emojis.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/emoji.rst#2025-04-22_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n$transliterator = EmojiTransliterator::create('text-emoji');\n\n// Github short codes\n$transliterator->transliterate('Breakfast with :kiwi-fruit: or :milk-glass:');\n// Gitlab short codes\n$transliterator->transliterate('Breakfast with :kiwi: or :milk:');\n// Slack short codes\n$transliterator->transliterate('Breakfast with :kiwifruit: or :glass-of-milk:');\n\n// all the above examples produce the same result:\n// => 'Breakfast with 🥝 or 🥛'\n```\n\n----------------------------------------\n\nTITLE: Importing Bootstrap Styles in SCSS\nDESCRIPTION: Demonstrates how to import Bootstrap styles in a SCSS file while customizing Bootstrap variables. Uses the tilde (~) syntax to reference files in the node_modules directory.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/bootstrap.rst#2025-04-22_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n// assets/styles/global.scss\n\n// customize some Bootstrap variables\n$primary: darken(#428bca, 20%);\n\n// the ~ allows you to reference things in node_modules\n@import \"~bootstrap/scss/bootstrap\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Workflow Transitions with Guards in XML\nDESCRIPTION: This XML configuration defines a Symfony workflow named 'blog_publishing' with multiple transitions and guards. It demonstrates how to set up transitions with specific guards using roles and custom conditions.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/workflow.rst#2025-04-22_snippet_18\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/workflow.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n    https://symfony.com/schema/dic/services/services-1.0.xsd\n    http://symfony.com/schema/dic/symfony\n    https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <framework:config>\n        <framework:workflow name=\"blog_publishing\" type=\"workflow\">\n\n            <!-- ... previous configuration -->\n\n            <framework:transition name=\"to_review\">\n                <!-- the transition is allowed only if the current user has the ROLE_REVIEWER role. -->\n                <framework:guard>is_granted(\"ROLE_REVIEWER\")</framework:guard>\n                <framework:from>draft</framework:from>\n                <framework:to>reviewed</framework:to>\n            </framework:transition>\n\n            <framework:transition name=\"publish\">\n                <!-- or \"is_anonymous\", \"is_remember_me\", \"is_fully_authenticated\", \"is_granted\" -->\n                <framework:guard>is_authenticated</framework:guard>\n                <framework:from>reviewed</framework:from>\n                <framework:to>published</framework:to>\n            </framework:transition>\n\n            <framework:transition name=\"reject\">\n                <!-- or any valid expression language with \"subject\" referring to the post -->\n                <framework:guard>is_granted(\"ROLE_ADMIN\") and subject.isStatusReviewed()</framework:guard>\n                <framework:from>reviewed</framework:from>\n                <framework:to>rejected</framework:to>\n            </framework:transition>\n\n        </framework:workflow>\n\n    </framework:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Monolog Processor and Formatter in PHP\nDESCRIPTION: PHP configuration for registering a custom Monolog processor and formatter. The formatter includes the session token in the log output format, and the processor is registered as a service with the monolog.processor tag.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/logging/processors.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\nuse App\\Logger\\SessionRequestProcessor;\nuse Monolog\\Formatter\\LineFormatter;\n\n$container\n    ->register('monolog.formatter.session_request', LineFormatter::class)\n    ->addArgument('[%%datetime%%] [%%extra.token%%] %%channel%%.%%level_name%%: %%message%% %%context%% %%extra%%\\n');\n\n$container\n    ->register(SessionRequestProcessor::class)\n    ->addTag('monolog.processor');\n```\n\n----------------------------------------\n\nTITLE: Configuring CAS Token Handler with Custom Prefix in YAML\nDESCRIPTION: YAML configuration for setting up a CAS token handler with a custom XML response prefix in Symfony security.yaml file. The prefix is used when reading the validation URL XML response.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/access_token.rst#2025-04-22_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\nsecurity:\n    firewalls:\n        main:\n            access_token:\n                token_handler:\n                    cas:\n                        validation_url: https://www.example.com/cas/validate\n                        prefix: cas-example\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Locator Injection in YAML\nDESCRIPTION: Demonstrates how to configure service locator injection using YAML in Symfony. It sets up the CommandBus service with the locator as an argument.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/service_subscribers_locators.rst#2025-04-22_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nservices:\n    App\\CommandBus:\n        arguments: ['@app.command_handler_locator']\n```\n\n----------------------------------------\n\nTITLE: Converting UUID Versions in Symfony\nDESCRIPTION: Demonstrates how to convert UUID version 1 to versions 6 and 7, and version 6 to version 7 using Symfony's Uuid class.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/uid.rst#2025-04-22_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\n// convert V1 to V6 or V7\n$uuid = Uuid::v1();\n\n$uuid->toV6(); // returns a Symfony\\Component\\Uid\\UuidV6 instance\n$uuid->toV7(); // returns a Symfony\\Component\\Uid\\UuidV7 instance\n\n// convert V6 to V7\n$uuid = Uuid::v6();\n\n$uuid->toV7(); // returns a Symfony\\Component\\Uid\\UuidV7 instance\n```\n\n----------------------------------------\n\nTITLE: Cloning and Building Symfony Documentation Locally\nDESCRIPTION: This snippet shows how to clone the Symfony documentation repository, install dependencies, and build the documentation locally. It requires Git, Composer, and PHP to be installed on the system.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone git@github.com:symfony/symfony-docs.git\n\n$ cd symfony-docs/\n$ cd _build/\n\n$ composer install\n\n$ php build.php\n```\n\n----------------------------------------\n\nTITLE: Configuring Rate Limiters in YAML\nDESCRIPTION: YAML configuration for setting up two rate limiters: 'anonymous_api' using fixed window policy and 'authenticated_api' using token bucket policy.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/rate_limiter.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/rate_limiter.yaml\nframework:\n    rate_limiter:\n        anonymous_api:\n            # use 'sliding_window' if you prefer that policy\n            policy: 'fixed_window'\n            limit: 100\n            interval: '60 minutes'\n        authenticated_api:\n            policy: 'token_bucket'\n            limit: 5000\n            rate: { interval: '15 minutes', amount: 500 }\n```\n\n----------------------------------------\n\nTITLE: Defining BlogPost Entity with Marking Store Property\nDESCRIPTION: PHP class definition for a BlogPost entity with a marking store property and getter/setter methods.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/workflow.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/BlogPost.php\nnamespace App\\Entity;\n\nclass BlogPost\n{\n    // the configured marking store property must be declared\n    private string $currentPlace;\n    private string $title;\n    private string $content;\n\n    // getter/setter methods must exist for property access by the marking store\n    public function getCurrentPlace(): string\n    {\n        return $this->currentPlace;\n    }\n\n    public function setCurrentPlace(string $currentPlace, array $context = []): void\n    {\n        $this->currentPlace = $currentPlace;\n    }\n\n    // you don't need to set the initial marking in the constructor or any other method;\n    // this is configured in the workflow with the 'initial_marking' option\n}\n```\n\n----------------------------------------\n\nTITLE: Preloading Assets with Priority Hints in Twig\nDESCRIPTION: Twig code showing how to preload an asset with a specified importance using the Priority Hints specification.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/web_link.rst#2025-04-22_snippet_3\n\nLANGUAGE: html+twig\nCODE:\n```\n<head>\n    <!-- ... -->\n    <link rel=\"preload\" href=\"{{ preload('/app.css', {as: 'style', importance: 'low'}) }}\" as=\"style\">\n    <!-- ... -->\n</head>\n```\n\n----------------------------------------\n\nTITLE: Validating Positive Numbers with PHP Code in Symfony\nDESCRIPTION: Example of using the Positive constraint in PHP code via the loadValidatorMetadata method to ensure an Employee's income is a positive number.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Positive.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Employee.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Employee\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('income', new Assert\\Positive());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Validation Using PHP Metadata in Symfony\nDESCRIPTION: Example of validating an email property using PHP metadata configuration in Symfony. This approach uses the loadValidatorMetadata method to programmatically add the email constraint to the entity property.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Email.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Author.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Author\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('email', new Assert\\Email(\n            message: 'The email \"{{ value }}\" is not a valid email.',\n        ));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Improved Console Command with Monolog Integration\nDESCRIPTION: Enhanced version using MonologBridge's ConsoleHandler for simplified logging with automatic verbosity handling.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/logging/monolog_console.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// src/Command/YourCommand.php\nnamespace App\\Command;\n\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\nclass YourCommand extends Command\n{\n    public function __construct(\n        private LoggerInterface $logger,\n    ) {\n        parent::__construct();\n    }\n\n    protected function execute(InputInterface $input, OutputInterface $output): int\n    {\n        $this->logger->debug('Some info');\n        $this->logger->notice('Some more info');\n\n        return Command::SUCCESS;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: String Inflector Usage\nDESCRIPTION: Shows how to use various inflector classes to handle singular/plural word forms in different languages.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/string.rst#2025-04-22_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\String\\Inflector\\EnglishInflector;\n\n$inflector = new EnglishInflector();\n\n$result = $inflector->singularize('teeth');   // ['tooth']\n$result = $inflector->pluralize('bacterium'); // ['bacteria']\n```\n\n----------------------------------------\n\nTITLE: Passing Custom Options to Form Classes in Symfony Controller\nDESCRIPTION: This code demonstrates how to pass custom options to a form class when creating it in a Symfony controller. The example shows passing a 'require_due_date' option which can be used to dynamically configure form fields.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/forms.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/TaskController.php\nnamespace App\\Controller;\n\nuse App\\Form\\Type\\TaskType;\n// ...\n\nclass TaskController extends AbstractController\n{\n    public function new(): Response\n    {\n        $task = new Task();\n        // use some PHP logic to decide if this form field is required or not\n        $dueDateIsRequired = ...;\n\n        $form = $this->createForm(TaskType::class, $task, [\n            'require_due_date' => $dueDateIsRequired,\n        ]);\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Workflow Guards in YAML\nDESCRIPTION: Shows how to configure guards for workflow transitions using expressions.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/workflow.rst#2025-04-22_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nframework:\n    workflows:\n        blog_publishing:\n            transitions:\n                to_review:\n                    guard: \"is_granted('ROLE_REVIEWER')\"\n                    from: draft\n                    to:   reviewed\n                publish:\n                    guard: \"is_authenticated\"\n                    from: reviewed\n                    to:   published\n                reject:\n```\n\n----------------------------------------\n\nTITLE: Using trans Filter with Parameters in Twig\nDESCRIPTION: Demonstrates applying the `trans` filter directly to the 'message' string key. It provides the `arguments` parameter {'%name%': 'John'}, specifies the 'messages' domain, and sets the 'en' locale, resulting in the output 'Hello John'.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#2025-04-22_snippet_42\n\nLANGUAGE: twig\nCODE:\n```\n{{ 'message'|trans(arguments = {'%name%': 'John'}, domain = 'messages', locale = 'en') }}\n{# output: Hello John #}\n```\n\n----------------------------------------\n\nTITLE: Overriding the Request Object Factory (Symfony, PHP)\nDESCRIPTION: Shows how to override the factory used to instantiate the Request object for customizing behavior or compatibility with legacy systems. Requires a custom Request class and the standard Symfony Request class. Inputs are arrays representing request components and optional content. Outputs are instances of the custom request class. The setFactory() pattern replaces the default instantiation mechanism, allowing use of createFromGlobals() to create the new object.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#2025-04-22_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Http\\SpecialRequest;\nuse Symfony\\Component\\HttpFoundation\\Request;\n\nRequest::setFactory(function (\n    array $query = [],\n    array $request = [],\n    array $attributes = [],\n    array $cookies = [],\n    array $files = [],\n    array $server = [],\n    $content = null\n) {\n    return new SpecialRequest(\n        $query,\n        $request,\n        $attributes,\n        $cookies,\n        $files,\n        $server,\n        $content\n    );\n});\n\n$request = Request::createFromGlobals();\n```\n\n----------------------------------------\n\nTITLE: Configuring Compound Rate Limiters in PHP\nDESCRIPTION: PHP configuration for creating compound rate limiters. Defines two individual fixed window limiters and combines them into a compound limiter for a contact form.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/rate_limiter.rst#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/rate_limiter.php\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework): void {\n    $framework->rateLimiter()\n        ->limiter('two_per_minute')\n            ->policy('fixed_window')\n            ->limit(2)\n            ->interval('1 minute')\n        ;\n\n    $framework->rateLimiter()\n        ->limiter('two_per_minute')\n            ->policy('fixed_window')\n            ->limit(5)\n            ->interval('1 hour')\n        ;\n\n    $framework->rateLimiter()\n        ->limiter('contact_form')\n            ->policy('compound')\n            ->limiters(['two_per_minute', 'five_per_hour'])\n        ;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Cache Pools in Symfony using XML\nDESCRIPTION: This XML configuration snippet demonstrates how to define multiple cache pools within the Symfony framework configuration. It shows setting a specific adapter (`cache.adapter.memcached`) for the 'acme.cache' pool, configuring both adapter and provider for 'foobar.cache', and using an existing pool ('foobar.cache') as an adapter for another pool ('short_cache') while specifying a custom default lifetime.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/cache.rst#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n                    <framework:pool name=\"acme.cache\" adapter=\"cache.adapter.memcached\"/>\n\n                    <!-- control adapter's configuration -->\n                    <framework:pool name=\"foobar.cache\" adapter=\"cache.adapter.memcached\"\n                        provider=\"memcached://user:password@example.com\"\n                    />\n\n                    <!-- uses the \"foobar.cache\" pool as its backend but controls\n                         the lifetime and (like all pools) has a separate cache namespace -->\n                    <framework:pool name=\"short_cache\" adapter=\"foobar.cache\" default-lifetime=\"60\"/>\n                </framework:cache>\n            </framework:config>\n        </container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Connection Options in PHP\nDESCRIPTION: Shows how to create a Redis connection with advanced options using an associative array. This allows fine-grained control over connection parameters such as timeout, persistence, and SSL settings.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/cache/adapters/redis_adapter.rst#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Cache\\Adapter\\RedisAdapter;\n\n$client = RedisAdapter::createConnection(\n\n    // provide a string dsn\n    'redis://localhost:6379',\n\n    // associative array of configuration options\n    [\n        'class' => null,\n        'persistent' => 0,\n        'persistent_id' => null,\n        'timeout' => 30,\n        'read_timeout' => 0,\n        'retry_interval' => 0,\n        'tcp_keepalive' => 0,\n        'lazy' => null,\n        'redis_cluster' => false,\n        'redis_sentinel' => null,\n        'dbindex' => 0,\n        'failover' => 'none',\n        'ssl' => null,\n    ]\n\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Length Constraint with YAML\nDESCRIPTION: Shows how to configure the Length constraint using YAML in a Symfony validation configuration file. It sets minimum and maximum length requirements with custom error messages.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Length.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Participant:\n    properties:\n        firstName:\n            - Length:\n                min: 2\n                max: 50\n                minMessage: 'Your first name must be at least {{ limit }} characters long'\n                maxMessage: 'Your first name cannot be longer than {{ limit }} characters'\n```\n\n----------------------------------------\n\nTITLE: Defining a Scoped HTTP Client Service in Symfony (XML)\nDESCRIPTION: Demonstrates configuring a named scoped HTTP client service with bearer token authentication in XML. Assumes XML namespaces for dependency injection and FrameworkBundle configuration. Uses the 'scoped-client' tag with name and 'auth-bearer' attributes under 'framework:http-client'. Place in config/packages/framework.xml for service registration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_45\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/framework.xml -->\\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\\n<container xmlns=\\\"http://symfony.com/schema/dic/services\\\"\\n    xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n    xmlns:framework=\\\"http://symfony.com/schema/dic/symfony\\\"\\n    xsi:schemaLocation=\\\"http://symfony.com/schema/dic/services\\n        https://symfony.com/schema/dic/services/services-1.0.xsd\\n        http://symfony.com/schema/dic/symfony https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\\\">\\n\\n    <framework:config>\\n        <framework:http-client>\\n            <framework:scoped-client name=\\\"my_api.client\\\" auth-bearer=\\\"secret_bearer_token\\\"/>\\n        </framework:http-client>\\n    </framework:config>\\n</container>\\n\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Attributes to Form Widget\nDESCRIPTION: This example demonstrates how to add custom HTML attributes to a form widget using the attr option in the form_widget() function.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/form_customization.rst#2025-04-22_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{{ form_widget(form.task, {'attr': {'class': 'task_field'}}) }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Remember Me with Symfony Security (YAML)\nDESCRIPTION: This YAML snippet configures the Symfony security system to enable \"Remember Me\" functionality for the app, specifying the secret, cookie lifetime, and optionally always enabling the feature. Dependencies include the Symfony Security Bundle and that the referenced \"%kernel.secret%\" parameter or ENV variable is set. Key parameters are 'secret' for signing, 'lifetime' for cookie validity (in seconds), and the optional 'always_remember_me' boolean. The configuration must be placed in config/packages/security.yaml and enables persistent logins beyond session duration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/remember_me.rst#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\nsecurity:\n    # ...\n\n    firewalls:\n        main:\n            # ...\n            remember_me:\n                secret: '%kernel.secret%'\n                lifetime: 604800 # 1 week in seconds\n                # by default, the feature is enabled by checking a\n                # checkbox in the login form (see below), uncomment the\n                # following line to always enable it.\n                #always_remember_me: true\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\nsecurity:\n    # ...\n\n    firewalls:\n        main:\n            # ...\n            remember_me:\n                # ...\n                always_remember_me: true\n```\n\n----------------------------------------\n\nTITLE: Registering Symfony PHPUnit Bridge Listener for Deprecation Reporting in XML\nDESCRIPTION: This XML snippet shows how to register the SymfonyTestsListener as a PHPUnit listener to get deprecation reports. It should be included in your phpunit.xml.dist configuration file, especially if not using the simple-phpunit wrapper. This configuration activates reporting of deprecations via Symfony's PHP error handler within a PHPUnit test suite. No additional dependencies are required beyond the PHPUnit Bridge.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/phpunit_bridge.rst#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<!-- phpunit.xml.dist -->\n<!-- ... -->\n<listeners>\n    <listener class=\"Symfony\\Bridge\\PhpUnit\\SymfonyTestsListener\"/>\n</listeners>\n```\n\n----------------------------------------\n\nTITLE: Setting Progress Bar Format Definition in PHP/Symfony\nDESCRIPTION: Demonstrates how to define a custom format for the progress bar with ANSI colors and Symfony-specific color syntax.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/helpers/progressbar.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nProgressBar::setFormatDefinition(\n    'minimal',\n    '<info>%percent%</info>\\033[32m%\\033[0m <fg=white;bg=blue>%remaining%</>'\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Form in Symfony Controller\nDESCRIPTION: This snippet shows how to create a form in a Symfony controller using the createForm method. It demonstrates basic form creation and handling.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/dynamic_form_modification.rst#2025-04-22_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass FriendMessageController extends AbstractController\n{\n    public function new(Request $request): Response\n    {\n        $form = $this->createForm(FriendMessageFormType::class);\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Attempting to Retrieve a Private Service from the Container (Error)\nDESCRIPTION: Illustrates that attempting to retrieve a private service (`App\\Service\\Foo`) directly from the container using `$container->get()` will result in an error. Private services should typically be accessed only via dependency injection.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/alias_private.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Service\\Foo;\n\n$container->get(Foo::class);\n```\n\n----------------------------------------\n\nTITLE: Implementing Choice Constraint in PHP for Symfony Entity\nDESCRIPTION: Demonstrates how to add a Choice constraint to a property in a Symfony entity class using PHP. It uses the ClassMetadata to add the constraint programmatically.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/validation.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Author.php\nnamespace App\\Entity;\n\n// ...\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Author\n{\n    private string $genre;\n\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        // ...\n\n        $metadata->addPropertyConstraint('genre', new Assert\\Choice(\n            choices: ['fiction', 'non-fiction'],\n            message: 'Choose a valid genre.',\n        ));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using yaml_dump Filter with dumpObjects Parameter in Twig\nDESCRIPTION: Illustrates the `dumpObjects` parameter for the `yaml_dump` filter. The output includes the `%object%` type hint. When `dumpObjects` is `false`, the value is `null`; when `true`, it includes the PHP serialized object.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#2025-04-22_snippet_49\n\nLANGUAGE: twig\nCODE:\n```\n{{ object|yaml_dump(dumpObjects = false) }}\n{# output: %object% null #}\n\n{{ object|yaml_dump(dumpObjects = true) }}\n{# output: %object% !php/object 'O:8:\"stdClass\":1:{s:3:\"foo\";s:3:\"bar\";}' #}\n```\n\n----------------------------------------\n\nTITLE: Basic Message Placeholder Translation in YAML\nDESCRIPTION: Demonstrates basic ICU MessageFormat placeholder usage in YAML translation files with the +intl-icu suffix.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/formats/message_format.rst#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# translations/messages+intl-icu.en.yaml\nsay_hello: 'Hello {name}!'\n```\n\n----------------------------------------\n\nTITLE: Implementing Autocomplete in Symfony Question\nDESCRIPTION: Examples of implementing autocomplete functionality with static values and dynamic callback\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/helpers/questionhelper.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Console\\Question\\Question;\n\npublic function execute(InputInterface $input, OutputInterface $output): int\n{\n    $helper = $this->getHelper('question');\n\n    $bundles = ['AcmeDemoBundle', 'AcmeBlogBundle', 'AcmeStoreBundle'];\n    $question = new Question('Please enter the name of a bundle', 'FooBundle');\n    $question->setAutocompleterValues($bundles);\n\n    $bundleName = $helper->ask($input, $output, $question);\n\n    return Command::SUCCESS;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Access Decision Manager in YAML\nDESCRIPTION: Configuration for using a custom access decision manager service in YAML format. The custom service must implement AccessDecisionManagerInterface.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/voters.rst#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\nsecurity:\n    access_decision_manager:\n        service: App\\Security\\MyCustomAccessDecisionManager\n        # ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Notifier Service in PHP\nDESCRIPTION: Example of registering the notifier.flash_message_importance_mapper service with the BootstrapFlashMessageImportanceMapper implementation in a PHP configuration file.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/notifier.rst#2025-04-22_snippet_35\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Notifier\\FlashMessage\\BootstrapFlashMessageImportanceMapper;\n\nreturn function(ContainerConfigurator $containerConfigurator) {\n    $containerConfigurator->services()\n        ->set('notifier.flash_message_importance_mapper', BootstrapFlashMessageImportanceMapper::class)\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Workflows in XML Format\nDESCRIPTION: XML configuration for defining workflows in Symfony. Used to create state machines and workflows for application processes.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_91\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/workflow.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <framework:config>\n        <framework:workflows>\n            <framework:workflow\n                name=\"my_workflow\"/>\n        </framework:workflows>\n        <!-- ... -->\n```\n\n----------------------------------------\n\nTITLE: Finding and Listing Services by Tag in Symfony - Bash\nDESCRIPTION: These commands filter and list services tagged with a specific tag, such as kernel.event_listener, or via a partial search. They require Symfony's DI system and bin/console utility, enabling developers to locate and inspect tagged services for event dispatching or other tag-driven behaviors. The output helps in understanding tagged service usage and service discovery.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/debug.rst#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ php bin/console debug:container --tag=kernel.event_listener\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ php bin/console debug:container --tag=kernel\n\nSelect one of the following tags to display its information:\n [0] kernel.event_listener\n [1] kernel.event_subscriber\n [2] kernel.reset\n [3] kernel.cache_warmer\n [4] kernel.locale_aware\n [5] kernel.fragment_renderer\n [6] kernel.cache_clearer\n```\n\n----------------------------------------\n\nTITLE: Converting PSR-16 to PSR-6 Cache Using Psr16Adapter\nDESCRIPTION: Demonstrates how to adapt a PSR-16 cache object to be used as a PSR-6 cache using Symfony's Psr16Adapter class.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/cache/psr6_psr16_adapters.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Cache\\Adapter\\Psr16Adapter;\n\n// $psr16Cache is the PSR-16 object that you want to use as a PSR-6 one\n\n// a PSR-6 cache that uses your cache internally!\n$psr6Cache = new Psr16Adapter($psr16Cache);\n\n// now use this wherever you want\n$githubApiClient = new GitHubApiClient($psr6Cache);\n```\n\n----------------------------------------\n\nTITLE: Escaping Percent Signs in XML Parameters\nDESCRIPTION: Shows how to escape percent signs in parameter values in XML configuration to prevent them from being interpreted as parameter references.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration.rst#2025-04-22_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services.xml -->\n<parameters>\n    <parameter key=\"url_pattern\">http://symfony.com/?foo=%%s&amp;bar=%%d</parameter>\n</parameters>\n```\n\n----------------------------------------\n\nTITLE: Forcing Attribute Values in XML Configuration\nDESCRIPTION: XML configuration showing how to force specific attribute values on elements. This example demonstrates setting 'rel=\"noopener noreferrer\"' on all anchor elements in the HTML sanitizer.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/html_sanitizer.rst#2025-04-22_snippet_24\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/html_sanitizer.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <framework:config>\n        <framework:html-sanitizer>\n            <framework:force-attribute name=\"a\">\n                <framework:attribute name=\"rel\">noopener noreferrer</framework:attribute>\n            </framework:force-attribute>\n        </framework:html-sanitizer>\n    </framework:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Access Decision Manager in XML\nDESCRIPTION: Configuration for using a custom access decision manager service in XML format. The custom service must implement AccessDecisionManagerInterface.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/voters.rst#2025-04-22_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/security.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<srv:container xmlns=\"http://symfony.com/schema/dic/security\"\n    xmlns:srv=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\"\n>\n\n    <config>\n        <access-decision-manager\n            service=\"App\\Security\\MyCustomAccessDecisionManager\"/>\n    </config>\n</srv:container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Profiler in YAML\nDESCRIPTION: YAML configuration to enable the Symfony Profiler while setting collect to false for performance optimization in test environment.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/testing/profiling.rst#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/test/web_profiler.yaml\n\n# ...\nframework:\n    profiler: { enabled: true, collect: false }\n```\n\n----------------------------------------\n\nTITLE: Mapping Log Level to a Custom Exception using Attributes (PHP)\nDESCRIPTION: This PHP snippet uses the #[WithLogLevel] attribute to set a warning log level for CustomException. The class must extend \\Exception and use Psr\\Log\\LogLevel with the Symfony HttpKernel component. Supported in Symfony 7.1+ and can be used on interfaces directly for broader mapping.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_38\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Exception;\\n\\nuse Psr\\Log\\LogLevel;\\nuse Symfony\\Component\\HttpKernel\\Attribute\\WithLogLevel;\\n\\n#[WithLogLevel(LogLevel::WARNING)]\\nclass CustomException extends \\Exception\\n{\\n}\n```\n\n----------------------------------------\n\nTITLE: Adding WeekType Field with Placeholder in Symfony Form\nDESCRIPTION: Demonstrates how to add a WeekType field to a Symfony form builder with a placeholder option. The placeholder can be a string for all select boxes or an array for year and week fields separately.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/week.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\WeekType;\n\n$builder->add('startWeek', WeekType::class, [\n    'placeholder' => 'Select a value',\n]);\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\WeekType;\n\n$builder->add('startDateTime', WeekType::class, [\n    'placeholder' => [\n        'year' => 'Year',\n        'week' => 'Week',\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Adding autoProvidejQuery to Webpack Configuration\nDESCRIPTION: Shows how to modify webpack.config.js to automatically provide jQuery as a global variable using Encore's autoProvidejQuery() method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/legacy-applications.rst#2025-04-22_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n  // webpack.config.js\n  Encore\n      // ...\n+     .autoProvidejQuery()\n  ;\n```\n\n----------------------------------------\n\nTITLE: Modifying Controller in kernel.controller Event Listener\nDESCRIPTION: PHP code snippet demonstrating how to change the controller in a kernel.controller event listener.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/events.rst#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\HttpKernel\\Event\\ControllerEvent;\n\npublic function onKernelController(ControllerEvent $event): void\n{\n    // ...\n\n    // the controller can be changed to any PHP callable\n    $event->setController($myCustomController);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP Connection using Connection String in PHP\nDESCRIPTION: Shows an alternative way to configure the LDAP connection using a connection string via the `connection_string` option. This example connects to an LDAPS server on port 636.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/ldap.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Ldap\\Ldap;\n\n$ldap = Ldap::create('ext_ldap', ['connection_string' => 'ldaps://my-server:636']);\n```\n\n----------------------------------------\n\nTITLE: Process Instance Execution in PHP\nDESCRIPTION: Shows how to execute a process by creating and passing a Process instance to the helper.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/helpers/processhelper.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Process\\Process;\n\n$process = new Process(['figlet', 'Symfony']);\n\n$helper->run($output, $process);\n```\n\n----------------------------------------\n\nTITLE: Checking Modified Response\nDESCRIPTION: Shows how to check if a response needs to be sent based on validation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#2025-04-22_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nif ($response->isNotModified($request)) {\n    $response->send();\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing PostgreSqlStore for Symfony Lock Component\nDESCRIPTION: Creates a PostgreSqlStore instance using a PDO connection or DSN. This store uses PostgreSQL's Advisory Locks and supports native blocking and shared locks.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/lock.rst#2025-04-22_snippet_21\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Lock\\Store\\PostgreSqlStore;\n\n// a PDO instance or DSN for lazy connecting through PDO\n$databaseConnectionOrDSN = 'pgsql:host=localhost;port=5634;dbname=app';\n$store = new PostgreSqlStore($databaseConnectionOrDSN, ['db_username' => 'myuser', 'db_password' => 'mypassword']);\n```\n\n----------------------------------------\n\nTITLE: Choice Constraint Option Type Definitions\nDESCRIPTION: RST documentation defining the type and default values for Choice constraint configuration options including type, message, min, multiple, and related message customization options.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Choice.rst#2025-04-22_snippet_13\n\nLANGUAGE: rst\nCODE:\n```\n**type**: ``boolean`` **default**: ``true``\n\n**type**: ``string`` **default**: ``The value you selected is not a valid choice.``\n\n**type**: ``integer``\n\n**type**: ``string`` **default**: ``You must select at least {{ limit }} choices.``\n\n**type**: ``boolean`` **default**: ``false``\n\n**type**: ``string`` **default**: ``One or more of the given values is invalid.``\n```\n\n----------------------------------------\n\nTITLE: Finding PHP Binary Path with PhpExecutableFinder\nDESCRIPTION: Demonstrates using PhpExecutableFinder to locate the absolute path of the PHP binary executable on the server.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/process.rst#2025-04-22_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Process\\PhpExecutableFinder;\n\n$phpBinaryFinder = new PhpExecutableFinder();\n$phpBinaryPath = $phpBinaryFinder->find();\n// $phpBinaryPath = '/usr/local/bin/php' (the result will be different on your computer)\n```\n\n----------------------------------------\n\nTITLE: Defining NotEqualTo Constraints with PHP Attributes\nDESCRIPTION: This snippet demonstrates how to use PHP attributes to apply NotEqualTo constraints to properties of a Person class. It ensures that the firstName is not 'Mary' and the age is not 15.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/NotEqualTo.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Person.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Person\n{\n    #[Assert\\NotEqualTo('Mary')]\n    protected string $firstName;\n\n    #[Assert\\NotEqualTo(\n        value: 15,\n    )]\n    protected int $age;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Asset Version Strategy as Symfony Service in PHP\nDESCRIPTION: PHP configuration to register the custom GulpBusterVersionStrategy as a Symfony service, specifying the manifest file path and version format.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/custom_version_strategy.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nuse App\\Asset\\VersionStrategy\\GulpBusterVersionStrategy;\n\nreturn function(ContainerConfigurator $container): void {\n    $services = $container->services();\n\n    $services->set(GulpBusterVersionStrategy::class)\n        ->args(\n            [\n                '%kernel.project_dir%/busters.json',\n                '%%s?version=%%s',\n            ]\n        );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Cache Headers Manually\nDESCRIPTION: Manually sets HTTP cache control headers to cache responses for 3600 seconds with public access and must-revalidate directive.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/http_cache.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/BlogController.php\nuse Symfony\\Component\\HttpFoundation\\Response;\n\npublic function index(): Response\n{\n    // somehow create a Response object, like by rendering a template\n    $response = $this->render('blog/index.html.twig', []);\n\n    // cache publicly for 3600 seconds\n    $response->setPublic();\n    $response->setMaxAge(3600);\n\n    // (optional) set a custom Cache-Control directive\n    $response->headers->addCacheControlDirective('must-revalidate', true);\n\n    return $response;\n}\n```\n\n----------------------------------------\n\nTITLE: Named Password Hasher Configuration in YAML\nDESCRIPTION: YAML configuration for setting up a named password hasher with auto algorithm and custom cost.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/passwords.rst#2025-04-22_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\nsecurity:\n    # ...\n    password_hashers:\n        harsh:\n            algorithm: auto\n            cost: 15\n```\n\n----------------------------------------\n\nTITLE: Implementing Static Caching for OptionsResolver in PHP\nDESCRIPTION: This snippet demonstrates how to implement static caching for OptionsResolver instances to improve performance. It includes a method to clear the cache to prevent memory leaks in long-running applications.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/options_resolver.rst#2025-04-22_snippet_32\n\nLANGUAGE: php\nCODE:\n```\nclass Mailer\n{\n    private static array $resolversByClass = [];\n\n    public static function clearOptionsConfig(): void\n    {\n        self::$resolversByClass = [];\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Expression Object in Twig\nDESCRIPTION: Uses the `expression` Twig function to create an `Symfony\\Component\\ExpressionLanguage\\Expression` object based on the provided expression string. This leverages the Symfony ExpressionLanguage component for dynamic evaluations within templates. The example shows evaluating `1 + 2`.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#2025-04-22_snippet_26\n\nLANGUAGE: twig\nCODE:\n```\n{{ expression(1 + 2) }}\n{# output: 3 #}\n```\n\n----------------------------------------\n\nTITLE: Registering NEON Encoder Service in XML\nDESCRIPTION: XML configuration for registering the NeonEncoder as a service with the serializer.encoder tag in Symfony's service container.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer/encoders.rst#2025-04-22_snippet_17\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <!-- ... -->\n\n        <service id=\"App\\Serializer\\NeonEncoder\">\n            <tag name=\"serializer.encoder\"/>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Manifest File in Symfony\nDESCRIPTION: This YAML configuration snippet shows how to set up the json_manifest_file versioning strategy in Symfony's assets configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/versioning.rst#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/assets.yaml\nframework:\n    assets:\n        json_manifest_path: '%kernel.project_dir%/public/build/manifest.json'\n```\n\n----------------------------------------\n\nTITLE: Configuring MemcachedStore for Distributed Locks in Symfony\nDESCRIPTION: Code showing how to set up a MemcachedStore that uses Memcached for lock persistence. This store requires a Memcached connection and doesn't support blocking.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/lock.rst#2025-04-22_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Lock\\Store\\MemcachedStore;\n\n$memcached = new \\Memcached();\n$memcached->addServer('localhost', 11211);\n\n$store = new MemcachedStore($memcached);\n```\n\n----------------------------------------\n\nTITLE: Generating Route Paths (Relative URLs) in Twig\nDESCRIPTION: The `path` function generates a URL path (relative to the domain) for a given Symfony route `name`. It accepts an array of `parameters` for the route and an optional boolean `relative` flag. If `relative` is true, the path is generated relative to the current page's path.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#2025-04-22_snippet_19\n\nLANGUAGE: twig\nCODE:\n```\n{{ path(route_name, route_parameters = [], relative = false) }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pseudo-localization in Symfony with PHP\nDESCRIPTION: This PHP configuration sets up the pseudo-localization feature in Symfony's Translation component. It enables character accents, brackets wrapping, text expansion, HTML tag preservation, and specifies which HTML attributes should be localized.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/translation.rst#2025-04-22_snippet_59\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/translation.php\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework) {\n    // ...\n    $framework\n        ->translator()\n            ->pseudoLocalization()\n                // replace characters by their accented version\n                ->accents(true)\n                // wrap strings with brackets\n                ->brackets(true)\n                // controls how many extra characters are added to make text longer\n                ->expansionFactor(1.4)\n                // maintain the original HTML tags of the translated contents\n                ->parseHtml(true)\n                // also translate the contents of these HTML attributes\n                ->localizableHtmlAttributes(['title'])\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Entity Fetching with Expression in MapEntity\nDESCRIPTION: Demonstrates using the expr option in MapEntity to fetch entities with custom expressions. This approach provides more flexibility for complex queries using the ExpressionLanguage component.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine.rst#2025-04-22_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n#[Route('/product/{product_id}')]\npublic function show(\n    #[MapEntity(expr: 'repository.find(product_id)')]\n    Product $product\n): Response\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NoSuspiciousCharacters Constraint in YAML\nDESCRIPTION: Example of applying the NoSuspiciousCharacters constraint to a username property using YAML configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/NoSuspiciousCharacters.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\User:\n    properties:\n        username:\n            - NoSuspiciousCharacters: ~\n```\n\n----------------------------------------\n\nTITLE: Registering Container Preload Tags in PHP\nDESCRIPTION: Example of registering service container preload tags using PHP configuration for preloading specific classes.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/dic_tags.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Some\\OtherClass;\nuse App\\SomeClass;\nuse App\\SomeNamespace\\SomeService;\n\n$container\n    ->register(SomeService::class)\n    ->addTag('container.preload', ['class' => SomeClass::class])\n    ->addTag('container.preload', ['class' => OtherClass::class])\n    // ...\n;\n```\n\n----------------------------------------\n\nTITLE: Block and Drop Elements Configuration - PHP Standalone\nDESCRIPTION: Shows how to configure HTML sanitizer to block or drop specific elements using standalone PHP.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/html_sanitizer.rst#2025-04-22_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\HtmlSanitizer\\HtmlSanitizer;\nuse Symfony\\Component\\HtmlSanitizer\\HtmlSanitizerConfig;\n\n$postSanitizer = new HtmlSanitizer(\n    (new HtmlSanitizerConfig())\n        // remove <div>, but process the children\n        ->blockElement('div')\n        // remove <figure> and its children\n        ->dropElement('figure')\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Parent Services in YAML\nDESCRIPTION: YAML configuration for setting up a parent service with common dependencies and child services that inherit from it. The abstract parent service defines common arguments and method calls.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/parent_services.rst#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nservices:\n    App\\Repository\\BaseDoctrineRepository:\n        abstract:  true\n        arguments: ['@doctrine.orm.entity_manager']\n        calls:\n            - setLogger: ['@logger']\n\n    App\\Repository\\DoctrineUserRepository:\n        # extend the App\\Repository\\BaseDoctrineRepository service\n        parent: App\\Repository\\BaseDoctrineRepository\n\n    App\\Repository\\DoctrinePostRepository:\n        parent: App\\Repository\\BaseDoctrineRepository\n\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Configuring SendGrid Transport in Environment Variables\nDESCRIPTION: Example of setting up a SendGrid transport DSN in the .env file after installing the symfony/sendgrid-mailer package. This shows the format used for third-party providers.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_5\n\nLANGUAGE: env\nCODE:\n```\n# .env\nMAILER_DSN=sendgrid://KEY@default\n```\n\n----------------------------------------\n\nTITLE: Setting up NotCompromisedPassword Validation with XML\nDESCRIPTION: This code shows how to configure the NotCompromisedPassword constraint in XML format. The constraint is applied to the rawPassword property of the User entity to prevent using passwords that have been leaked in data breaches.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/NotCompromisedPassword.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\User\">\n        <property name=\"rawPassword\">\n            <constraint name=\"NotCompromisedPassword\"></constraint>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Displaying Section Format Example\nDESCRIPTION: Shows the text output format for section messages in the console.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/helpers/formatterhelper.rst#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n[SomeSection] Here is some message related to that section\n```\n\n----------------------------------------\n\nTITLE: Using NotNull Constraint with PHP Attributes in Symfony\nDESCRIPTION: Example of applying the NotNull constraint to the firstName property of an Author class using PHP attributes.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/NotNull.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Author.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Author\n{\n    #[Assert\\NotNull]\n    protected string $firstName;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Form Action and Method in Standalone PHP\nDESCRIPTION: Demonstrates how to create a form with custom action and method options using the FormFactory in standalone PHP without a Symfony controller.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/form.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\FormType;\n\n// ...\n\n$formBuilder = $formFactory->createBuilder(FormType::class, null, [\n    'action' => '/search',\n    'method' => 'GET',\n]);\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Watch Options in JavaScript\nDESCRIPTION: This code shows how to configure watching options for Encore when running in watch mode or with dev-server, enabling polling for changes.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/advanced-config.rst#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nEncore.configureWatchOptions(function(watchOptions) {\n    // enable polling and check for changes every 250ms\n    // polling is useful when running Encore inside a Virtual Machine\n    watchOptions.poll = 250;\n});\n```\n\n----------------------------------------\n\nTITLE: Debug Asset Map Command Output Example\nDESCRIPTION: Example output of the debug:asset-map command showing mapped paths and assets in the application.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/asset_mapper.rst#2025-04-22_snippet_14\n\nLANGUAGE: text\nCODE:\n```\nAssetMapper Paths\n------------------\n\n--------- ------------------\n Path      Namespace prefix\n--------- ------------------\nassets\n\nMapped Assets\n-------------\n\n------------------ ----------------------------------------------------\n Logical Path       Filesystem Path\n------------------ ----------------------------------------------------\n app.js             assets/app.js\n styles/app.css     assets/styles/app.css\n images/duck.png    assets/images/duck.png\n```\n\n----------------------------------------\n\nTITLE: Service Configuration in YAML\nDESCRIPTION: Example of configuring services using YAML format with parameters and service definitions.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/dependency_injection.rst#2025-04-22_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\nparameters:\n    # ...\n    mailer.transport: sendmail\n\nservices:\n    mailer:\n        class:     Mailer\n        arguments: ['%mailer.transport%']\n    newsletter_manager:\n        class:     NewsletterManager\n        calls:\n            - [setMailer, ['@mailer']]\n```\n\n----------------------------------------\n\nTITLE: Defining Language Validation Constraint in YAML Format\nDESCRIPTION: Configuration example for the Language constraint using YAML format. This validates the preferredLanguage property in the User entity.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Language.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\User:\n    properties:\n        preferredLanguage:\n            - Language: ~\n```\n\n----------------------------------------\n\nTITLE: Creating Twig Template for Random Number (Twig)\nDESCRIPTION: This Twig template renders the random number generated by the controller.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/micro_kernel_trait.rst#2025-04-22_snippet_15\n\nLANGUAGE: HTML+Twig\nCODE:\n```\n<!-- templates/micro/random.html.twig -->\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>Random action</title>\n    </head>\n    <body>\n        <p>{{ number }}</p>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Debugging Event Dispatcher for Scheduler Events in PHP\nDESCRIPTION: Command to debug event dispatchers for the FailureEvent in the Symfony Scheduler component. This helps identify registered listeners and their priorities.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/scheduler.rst#2025-04-22_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\n$ php bin/console debug:event-dispatcher \"Symfony\\Component\\Scheduler\\Event\\FailureEvent\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Password Strength Estimator in YAML\nDESCRIPTION: Demonstrates how to configure the PasswordStrengthValidator service to use a custom estimator using YAML.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/PasswordStrength.rst#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nservices:\n    custom_password_strength_estimator:\n        class: App\\Validator\\CustomPasswordStrengthEstimator\n\n    Symfony\\Component\\Validator\\Constraints\\PasswordStrengthValidator:\n        arguments: [!closure '@custom_password_strength_estimator']\n```\n\n----------------------------------------\n\nTITLE: Overriding Cache Pool Namespace in Symfony (YAML)\nDESCRIPTION: This YAML configuration defines a service `app.cache.adapter.redis` that inherits from the default `cache.adapter.redis`. It overrides the default namespace generation by adding a `cache.pool` tag with a specified `namespace` attribute, ensuring interoperability if needed.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/cache.rst#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nservices:\n    # ...\n\n    app.cache.adapter.redis:\n        parent: 'cache.adapter.redis'\n        tags:\n            - { name: 'cache.pool', namespace: 'my_custom_namespace' }\n```\n\n----------------------------------------\n\nTITLE: Configuring Symfony Secrets in XML\nDESCRIPTION: XML configuration for Symfony's secrets management system. This example explicitly sets the vault directory, local dotenv file, and decryption environment variable within the framework configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/secrets.rst#2025-04-22_snippet_16\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/framework.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:framework=\"http://symfony.com/schema/dic/framework\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/framework https://symfony.com/schema/dic/framework/framework-1.0.xsd\"\n>\n    <framework:config secret=\"%env(APP_SECRET)%\">\n        <framework:secrets\n            vault_directory=\"%kernel.project_dir%/config/secrets/%kernel.environment%\"\n            local_dotenv_file=\"%kernel.project_dir%/.env.%kernel.environment%.local\"\n            decryption_env_var=\"base64:default::SYMFONY_DECRYPTION_SECRET\"\n        />\n    </framework:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Memory User Provider in Symfony (PHP)\nDESCRIPTION: This PHP snippet illustrates the setup for a memory-based user provider using Symfony\\Config\\SecurityConfig's fluent API. Users and their roles are added programmatically, and passwords must be stored securely in their hashed forms. This is best for limited use cases or for development environments.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/user_providers.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/security.php\\nuse App\\Entity\\User;\\nuse Symfony\\Config\\SecurityConfig;\\n\\nreturn static function (SecurityConfig $security): void {\\n    // ...\\n\\n    $memoryProvider = $security->provider('app_user_provider')->memory();\\n    $memoryProvider\\n        ->user('john_admin')\\n            ->password('$2y$13$jxGxc ... IuqDju')\\n            ->roles(['ROLE_ADMIN'])\\n    ;\\n\\n    $memoryProvider\\n        ->user('jane_admin')\\n        ->password('$2y$13$PFi1I ... rGwXCZ')\\n        ->roles(['ROLE_ADMIN', 'ROLE_SUPER_ADMIN'])\\n    ;\\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Twig Template for Symfony Web Profiler Toolbar\nDESCRIPTION: This Twig template defines the content displayed in the Symfony web debug toolbar for a custom data collector. It includes an icon and text for the toolbar panel.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/profiler.rst#2025-04-22_snippet_18\n\nLANGUAGE: Twig\nCODE:\n```\n{# templates/data_collector/template.html.twig #}\n{% extends '@WebProfiler/Profiler/layout.html.twig' %}\n\n{% block toolbar %}\n    {% set icon %}\n        {# this is the content displayed as a panel in the toolbar #}\n        <svg xmlns=\"http://www.w3.org/2000/svg\"> ... </svg>\n        <span class=\"sf-toolbar-value\">Request</span>\n    {% endset %}\n\n    {% set text %}\n        {# this is the content displayed when hovering the mouse over\n           the toolbar panel #}\n        <div class=\"sf-toolbar-info-piece\">\n            <b>Method</b>\n            <span>{{ collector.method }}</span>\n        </div>\n\n        <div class=\"sf-toolbar-info-piece\">\n            <b>Accepted content type</b>\n            <span>{{ collector.acceptableContentTypes|join(', ') }}</span>\n        </div>\n    {% endset %}\n\n    {# the 'link' value set to 'false' means that this panel doesn't\n       show a section in the web profiler #}\n    {{ include('@WebProfiler/Profiler/toolbar_item.html.twig', { link: false }) }}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Customizing Login Link Generation in PHP\nDESCRIPTION: PHP code demonstrating how to customize login link generation, including setting the locale and custom lifetime.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/login_link.rst#2025-04-22_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/SecurityController.php\nnamespace App\\Controller;\n\n// ...\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\Security\\Http\\LoginLink\\LoginLinkHandlerInterface;\n\nclass SecurityController extends AbstractController\n{\n    #[Route('/login', name: 'login')]\n    public function requestLoginLink(LoginLinkHandlerInterface $loginLinkHandler, Request $request): Response\n    {\n        // check if login form is submitted\n        if ($request->isMethod('POST')) {\n            // ... load the user in some way\n\n            // clone and customize Request\n            $userRequest = clone $request;\n            $userRequest->setLocale($user->getLocale() ?? $request->getDefaultLocale());\n\n            // create a login link for $user (this returns an instance of LoginLinkDetails)\n            $loginLinkDetails = $loginLinkHandler->createLoginLink($user, $userRequest);\n            $loginLink = $loginLinkDetails->getUrl();\n\n            // ...\n        }\n\n        return $this->render('security/request_login_link.html.twig');\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Rotating File Handler in PHP\nDESCRIPTION: This PHP configuration sets up a rotating file handler for Monolog, creating a new log file daily and limiting the number of log files kept.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/logging.rst#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/prod/monolog.php\nuse Psr\\Log\\LogLevel;\nuse Symfony\\Config\\MonologConfig;\n\nreturn static function (MonologConfig $monolog): void {\n    $monolog->handler('main')\n        ->type('rotating_file')\n        ->path('%kernel.logs_dir%/%kernel.environment%.log')\n        ->level(LogLevel::DEBUG)\n        // max number of log files to keep\n        // defaults to zero, which means infinite files\n        ->maxFiles(10);\n};\n```\n\n----------------------------------------\n\nTITLE: Prototyped Drivers Array in XML Syntax for Symfony Configuration\nDESCRIPTION: Demonstrates how to define driver entries using XML syntax for Symfony configuration with prototyped array normalization. Each <driver> element is treated as a single item in the resulting PHP array, matching the YAML example. No dependencies beyond XML parsing; must align with PHP configuration definitions for consistency.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/config/definition.rst#2025-04-22_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<driver>mysql</driver>\n<driver>sqlite</driver>\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Luhn Validation with PHP Attributes in Symfony\nDESCRIPTION: Example of applying the Luhn validation constraint to a credit card number property using PHP attributes. This constraint ensures that the credit card number passes the Luhn algorithm check.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Luhn.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Transaction.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Transaction\n{\n    #[Assert\\Luhn(message: 'Please check your credit card number.')]\n    protected string $cardNumber;\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering LDAP Query Attributes in PHP\nDESCRIPTION: Shows how to retrieve only specific attributes ('cn' and 'mail') from the LDAP entries matched by the query using the `filter` option.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/ldap.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$query = $ldap->query('dc=symfony,dc=com', '...', ['filter' => ['cn', 'mail']);\n```\n\n----------------------------------------\n\nTITLE: Serialized Output with org_ Prefix (JSON)\nDESCRIPTION: This example shows the expected JSON output after serializing a Company object with the custom name converter enabled. All property names are prefixed by 'org_' as per the custom conversion logic. Inputs should follow the Company model; the output demonstrates successful transformation of field names for external systems.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer/custom_name_converter.rst#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"org_name\": \"Acme Inc.\", \"org_address\": \"123 Main Street, Big City\"}\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony OptionsResolver Component via Composer\nDESCRIPTION: This command uses Composer, the PHP dependency manager, to download and install the `symfony/options-resolver` package into the current project. This step is necessary to make the OptionsResolver component available for use.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/options_resolver.rst#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require symfony/options-resolver\n```\n\n----------------------------------------\n\nTITLE: Adding Validation Constraints with PHP Attributes\nDESCRIPTION: Shows how to add validation constraints to entity properties using PHP attributes.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/forms.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Task.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Task\n{\n    #[Assert\\NotBlank]\n    public string $task;\n\n    #[Assert\\NotBlank]\n    #[Assert\\Type(\\DateTimeInterface::class)]\n    protected \\DateTimeInterface $dueDate;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Routing Loader as Service in PHP\nDESCRIPTION: PHP configuration for registering the ExtraLoader as a service with the 'routing.loader' tag using Symfony's ContainerConfigurator.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/routing/custom_route_loader.rst#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nuse App\\Routing\\ExtraLoader;\n\nreturn static function (ContainerConfigurator $container): void {\n    $services = $container->services();\n\n    $services->set(ExtraLoader::class)\n        ->tag('routing.loader')\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Async Message Handling in PHP\nDESCRIPTION: PHP configuration for setting up asynchronous email sending using Symfony Messenger.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_65\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/messenger.php\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework): void {\n    $framework->messenger()\n        ->transport('async')->dsn(env('MESSENGER_TRANSPORT_DSN'));\n\n    $framework->messenger()\n        ->routing('Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage')\n        ->senders(['async']);\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Cas2Handler in XML\nDESCRIPTION: This XML configuration sets up the Cas2Handler for CAS 2.0 authentication in the security.xml file. It specifies the validation URL for the CAS server.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/access_token.rst#2025-04-22_snippet_29\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/security.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<srv:container xmlns=\"http://symfony.com/schema/dic/security\"\n    xmlns:srv=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/security\n        https://symfony.com/schema/dic/security/security-1.0.xsd\">\n\n    <config>\n        <firewall name=\"main\">\n            <access-token>\n                <token-handler>\n                    <cas validation-url=\"https://www.example.com/cas/validate\"/>\n                </token-handler>\n            </access-token>\n        </firewall>\n    </config>\n</srv:container>\n```\n\n----------------------------------------\n\nTITLE: Configuring File Constraint using PHP with loadValidatorMetadata\nDESCRIPTION: Demonstrates adding File constraints using the loadValidatorMetadata method to programmatically configure validation rules in PHP.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/File.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Author.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Author\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('bioFile', new Assert\\File(\n            maxSize: '1024k',\n            extensions: [\n                'pdf',\n            ],\n            extensionsMessage: 'Please upload a valid PDF',\n        ));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enforcing Square Images with PHP Code\nDESCRIPTION: Configuring the Image constraint with PHP code to enforce square images by setting orientation restrictions in the loadValidatorMetadata method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Image.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Author.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Author\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('headshot', new Assert\\Image(\n            allowLandscape: false,\n            allowPortrait: false,\n        ));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Entity User Provider without Property (PHP)\nDESCRIPTION: This PHP-based configuration uses Symfony's SecurityConfig and specifies an entity user provider with only the class set to User, leaving out the property for user lookup. Symfony will defer to repository-level custom logic (loadUserByIdentifier) for user retrieval. Requires importing the relevant namespaces and updating config/packages/security.php.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/user_providers.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/security.php\\nuse App\\Entity\\User;\\nuse Symfony\\Config\\SecurityConfig;\\n\\nreturn static function (SecurityConfig $security): void {\\n    // ...\\n\\n    $security->provider('app_user_provider')\\n        ->entity()\\n            ->class(User::class)\\n    ;\\n};\n```\n\n----------------------------------------\n\nTITLE: YAML Collections - Sequences and Mappings\nDESCRIPTION: Demonstrates YAML collection types including sequences (arrays) and mappings (associative arrays).\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/formats/yaml.rst#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n- PHP\n- Perl\n- Python\n```\n\nLANGUAGE: yaml\nCODE:\n```\nPHP: 5.2\nMySQL: 5.1\nApache: 2.2.20\n```\n\n----------------------------------------\n\nTITLE: Using Twig Filters\nDESCRIPTION: Demonstration of using Twig filters, specifically the 'upper' filter to uppercase content.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/templates.rst#2025-04-22_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{{ title|upper }}\n```\n\n----------------------------------------\n\nTITLE: Configuring User Providers in Symfony Security (XML)\nDESCRIPTION: Defines multiple user providers in a Symfony XML configuration, including LDAP, entity-based, and a chained provider aggregating several sources. Requires Symfony's service container and proper schema references. Providers (backend_users, legacy_users, users) are combined into a chained provider (all_users) to support flexible authentication strategies.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/user_providers.rst#2025-04-22_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/security.xml -->\\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\\n<srv:container xmlns=\\\"http://symfony.com/schema/dic/security\\\"\\n               xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n               xmlns:srv=\\\"http://symfony.com/schema/dic/services\\\"\\n               xsi:schemaLocation=\\\"http://symfony.com/schema/dic/services\\n        https://symfony.com/schema/dic/services/services-1.0.xsd\\n        http://symfony.com/schema/dic/security\\n        https://symfony.com/schema/dic/security/security-1.0.xsd\\\">\\n\\n    <config>\\n        <!-- ... -->\\n\\n        <provider name=\\\"backend_users\\\">\\n            <ldap service=\\\"...\\\" base-dn=\\\"...\\\"/>\\n        </provider>\\n\\n        <provider name=\\\"legacy_users\\\">\\n            <entity>\\n                <!-- ... -->\\n            </entity>\\n        </provider>\\n\\n        <provider name=\\\"users\\\">\\n            <entity>\\n                <!-- ... -->\\n            </entity>\\n        </provider>\\n\\n        <provider name=\\\"all_users\\\">\\n            <chain>\\n                <provider>backend_users</provider>\\n                <provider>legacy_users</provider>\\n                <provider>users</provider>\\n            </chain>\\n        </provider>\\n    </config>\\n</srv:container>\n```\n\n----------------------------------------\n\nTITLE: Interface Proxifying with XML\nDESCRIPTION: Shows how to configure a lazy service to implement specific interfaces in XML. This technique allows proxying of final classes by implementing their interfaces.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/lazy_services.rst#2025-04-22_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"App\\Twig\\AppExtension\" lazy=\"Twig\\Extension\\ExtensionInterface\"/>\n        <!-- or a complete definition: -->\n        <service id=\"App\\Twig\\AppExtension\" lazy=\"true\">\n            <tag name=\"proxy\" interface=\"Twig\\Extension\\ExtensionInterface\"/>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Setter Injection via Method Call in XML\nDESCRIPTION: This XML configuration snippet configures a method call for setter injection. It defines the `App\\Service\\MessageGenerator` service and uses the `<call>` tag to specify that the `setLogger` method should be invoked, passing the service with the ID `logger` as an argument.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/calls.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"App\\Service\\MessageGenerator\">\n            <!-- ... -->\n            <call method=\"setLogger\">\n                <argument type=\"service\" id=\"logger\"/>\n            </call>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Applying Yaml Constraint with Parser Flags in PHP\nDESCRIPTION: Example of applying the Yaml constraint with additional parser flags using PHP code in a loadValidatorMetadata method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Yaml.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Report.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\nuse Symfony\\Component\\Yaml\\Yaml;\n\nclass Report\n{\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('customConfiguration', new Assert\\Yaml(\n            message: 'Your configuration doesn\\'t have valid YAML syntax.',\n            flags: Yaml::PARSE_CONSTANT | Yaml::PARSE_CUSTOM_TAGS | Yaml::PARSE_DATETIME,\n        ));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Console Output Styles in Symfony (PHP)\nDESCRIPTION: Illustrates creating and applying a custom console output style named 'fire'. It uses `OutputFormatterStyle` to define foreground/background colors (hex or named) and options (bold, blink), registers the style with the output formatter using `setStyle()`, and then applies it using a custom tag `<fire>`.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/console/coloring.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle;\n\n// ...\n$outputStyle = new OutputFormatterStyle('red', '#ff0', ['bold', 'blink']);\n$output->getFormatter()->setStyle('fire', $outputStyle);\n\n$output->writeln('<fire>foo</>');\n```\n\n----------------------------------------\n\nTITLE: Configuring Workflow Transitions with Guards in PHP\nDESCRIPTION: This PHP configuration demonstrates how to set up a Symfony workflow named 'blog_publishing' with multiple transitions and guards. It shows how to define transitions, their guards, and the states they move between.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/workflow.rst#2025-04-22_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/workflow.php\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework): void {\n    $blogPublishing = $framework->workflows()->workflows('blog_publishing');\n    // ... previous configuration\n\n    $blogPublishing->transition()\n        ->name('to_review')\n            // the transition is allowed only if the current user has the ROLE_REVIEWER role.\n            ->guard('is_granted(\"ROLE_REVIEWER\")')\n            ->from(['draft'])\n            ->to(['reviewed']);\n\n    $blogPublishing->transition()\n        ->name('publish')\n            // or \"is_anonymous\", \"is_remember_me\", \"is_fully_authenticated\", \"is_granted\"\n            ->guard('is_authenticated')\n            ->from(['reviewed'])\n            ->to(['published']);\n\n    $blogPublishing->transition()\n        ->name('reject')\n            // or any valid expression language with \"subject\" referring to the post\n            ->guard('is_granted(\"ROLE_ADMIN\") and subject.isStatusReviewed()')\n            ->from(['reviewed'])\n            ->to(['rejected']);\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Form Action and Method in Symfony Controller\nDESCRIPTION: Shows how to create a form in a Symfony controller with custom action and method options. This example creates a GET search form with a specific action URL.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/form.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/DefaultController.php\nnamespace App\\Controller;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\FormType;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass DefaultController extends AbstractController\n{\n    public function search(): Response\n    {\n        $formBuilder = $this->createFormBuilder(null, [\n            'action' => '/search',\n            'method' => 'GET',\n        ]);\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Default Doctrine ORM Configuration in YAML Format\nDESCRIPTION: YAML configuration showing all the default values for Doctrine ORM configuration including proxy class generation, caching, and naming strategy.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/doctrine.rst#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndoctrine:\n    orm:\n        auto_mapping: true\n        # the standard distribution overrides this to be true in debug, false otherwise\n        auto_generate_proxy_classes: false\n        proxy_namespace: Proxies\n        proxy_dir: '%kernel.cache_dir%/doctrine/orm/Proxies'\n        default_entity_manager: default\n        metadata_cache_driver: array\n        query_cache_driver: array\n        result_cache_driver: array\n        naming_strategy: doctrine.orm.naming_strategy.default\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Login Authentication in Symfony Security\nDESCRIPTION: This snippet demonstrates how to set up JSON login authentication in Symfony's security configuration. It includes customizing the username and password paths in the JSON payload for non-standard JSON structures.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/security.rst#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\nsecurity:\n    # ...\n\n    firewalls:\n        main:\n            lazy: true\n            json_login:\n                check_path:    login\n                username_path: security.credentials.login\n                password_path: security.credentials.password\n```\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/security.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<srv:container xmlns=\"http://symfony.com/schema/dic/security\"\n    xmlns:srv=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/security\n        https://symfony.com/schema/dic/security/security-1.0.xsd\">\n\n    <config>\n        <firewall name=\"main\" lazy=\"true\">\n            <json-login check-path=\"login\"\n                username-path=\"security.credentials.login\"\n                password-path=\"security.credentials.password\"/>\n        </firewall>\n    </config>\n</srv:container>\n```\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/security.php\nuse Symfony\\Config\\SecurityConfig;\n\nreturn static function (SecurityConfig $security): void {\n    $mainFirewall = $security->firewall('main');\n    $mainFirewall->lazy(true);\n    $mainFirewall->jsonLogin()\n        ->checkPath('/login')\n        ->usernamePath('security.credentials.login')\n        ->passwordPath('security.credentials.password');\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Form Theme in PHP\nDESCRIPTION: PHP configuration to set a global form theme for all forms in a Symfony application using the TwigConfig class.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/form_themes.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/twig.php\nuse Symfony\\Config\\TwigConfig;\n\nreturn static function (TwigConfig $twig): void {\n    $twig->formThemes([\n        'bootstrap_5_horizontal_layout.html.twig',\n    ]);\n\n    // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring CAS Token Handler with Custom HTTP Client in YAML\nDESCRIPTION: YAML configuration for setting up a CAS token handler with a custom HTTP client in Symfony security.yaml file. This configuration specifies the validation URL and a custom HTTP client service.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/access_token.rst#2025-04-22_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\nsecurity:\n    firewalls:\n        main:\n            access_token:\n                token_handler:\n                    cas:\n                        validation_url: https://www.example.com/cas/validate\n                        http_client: cas.client\n```\n\n----------------------------------------\n\nTITLE: Implementing Command Argument Completion in Symfony Console\nDESCRIPTION: Shows how to add value completion for command arguments using the CompletionInput and CompletionSuggestions classes. Enables auto-completion of argument values like usernames from a database.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/console/input.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass GreetCommand extends Command\n{\n    // ...\n    protected function configure(): void\n    {\n        $this\n            ->addArgument(\n                'names',\n                InputArgument::IS_ARRAY,\n                'Who do you want to greet (separate multiple names with a space)?',\n                null,\n                function (CompletionInput $input): array {\n                    // the value the user already typed, e.g. when typing \"app:greet Fa\" before\n                    // pressing Tab, this will contain \"Fa\"\n                    $currentValue = $input->getCompletionValue();\n\n                    // get the list of username names from somewhere (e.g. the database)\n                    // you may use $currentValue to filter down the names\n                    $availableUsernames = ...;\n\n                    // then suggested the usernames as values\n                    return $availableUsernames;\n                }\n            )\n        ;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Cache Marshaller Configuration\nDESCRIPTION: Example showing how to configure custom marshaller for cache serialization with optional Igbinary support\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/cache.rst#2025-04-22_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Cache\\Adapter\\RedisAdapter;\nuse Symfony\\Component\\Cache\\Marshaller\\DefaultMarshaller;\nuse Symfony\\Component\\Cache\\Marshaller\\DeflateMarshaller;\n\n$marshaller = new DeflateMarshaller(new DefaultMarshaller());\n// you can optionally use the Igbinary extension if you have it installed\n// $marshaller = new DeflateMarshaller(new DefaultMarshaller(useIgbinarySerialize: true));\n\n$cache = new RedisAdapter(new \\Redis(), 'namespace', 0, $marshaller);\n```\n\n----------------------------------------\n\nTITLE: Forcing Attribute Values with Standalone PHP\nDESCRIPTION: Standalone PHP configuration to force specific attribute values on elements. This example creates a new HtmlSanitizer instance that forces 'rel=\"noopener noreferrer\"' on all anchor elements.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/html_sanitizer.rst#2025-04-22_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\HtmlSanitizer\\HtmlSanitizer;\nuse Symfony\\Component\\HtmlSanitizer\\HtmlSanitizerConfig;\n\n$postSanitizer = new HtmlSanitizer(\n    (new HtmlSanitizerConfig())\n        ->forceAttribute('a', 'rel', 'noopener noreferrer')\n);\n```\n\n----------------------------------------\n\nTITLE: Interface Proxifying with YAML\nDESCRIPTION: Demonstrates how to configure a lazy service to implement specific interfaces in YAML. This approach helps with final classes that cannot be extended by the generated proxy.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/lazy_services.rst#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nservices:\n    App\\Twig\\AppExtension:\n        lazy: 'Twig\\Extension\\ExtensionInterface'\n        # or a complete definition:\n        lazy: true\n        tags:\n            - { name: 'proxy', interface: 'Twig\\Extension\\ExtensionInterface' }\n```\n\n----------------------------------------\n\nTITLE: Saving Related Entities in Symfony Controller\nDESCRIPTION: Controller action that demonstrates how to create and persist related Product and Category entities. It shows how to establish a relationship between entities and save them to the database using Doctrine EntityManager.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine/associations.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/ProductController.php\nnamespace App\\Controller;\n\n// ...\nuse App\\Entity\\Category;\nuse App\\Entity\\Product;\nuse Doctrine\\ORM\\EntityManagerInterface;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Attribute\\Route;\n\nclass ProductController extends AbstractController\n{\n    #[Route('/product', name: 'product')]\n    public function index(EntityManagerInterface $entityManager): Response\n    {\n        $category = new Category();\n        $category->setName('Computer Peripherals');\n\n        $product = new Product();\n        $product->setName('Keyboard');\n        $product->setPrice(19.99);\n        $product->setDescription('Ergonomic and stylish!');\n\n        // relates this product to the category\n        $product->setCategory($category);\n\n        $entityManager->persist($category);\n        $entityManager->persist($product);\n        $entityManager->flush();\n\n        return new Response(\n            'Saved new product with id: '.$product->getId()\n            .' and new category with id: '.$category->getId()\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing CSRF Protection Options within a Symfony Form Type\nDESCRIPTION: Demonstrates how to configure CSRF protection settings specifically for an individual form within its Form Type class (`TaskType`). The `configureOptions` method allows overriding global defaults by setting options like `csrf_protection` (to enable/disable), `csrf_field_name` (the hidden field's name, defaults to `_token`), and `csrf_token_id` (a unique string used to generate the token, enhancing security per form).\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/csrf.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// src/Form/TaskType.php\nnamespace App\\Form;\n\n// ...\nuse App\\Entity\\Task;\nuse Symfony\\Component\\OptionsResolver\\OptionsResolver;\n\nclass TaskType extends AbstractType\n{\n    // ...\n\n    public function configureOptions(OptionsResolver $resolver): void\n    {\n        $resolver->setDefaults([\n            'data_class'      => Task::class,\n            // enable/disable CSRF protection for this form\n            'csrf_protection' => true,\n            // the name of the hidden HTML field that stores the token\n            'csrf_field_name' => '_token',\n            // an arbitrary string used to generate the value of the token\n            // using a different string for each form improves its security\n            'csrf_token_id'   => 'task_item',\n        ]);\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Rate Limiter Lock Factory in PHP\nDESCRIPTION: Example of configuring a rate limiter's lock factory in PHP. Shows how to set a specific lock factory or disable locking entirely for a rate limiter named 'anonymous_api'.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/rate_limiter.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/rate_limiter.php\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework): void {\n    $framework->rateLimiter()\n        ->limiter('anonymous_api')\n            // ...\n\n            // use the \"lock.rate_limiter.factory\" for this limiter\n            ->lockFactory('lock.rate_limiter.factory')\n\n            // or don't use any lock mechanism\n            ->lockFactory(null)\n        ;\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Configuration Files with Error Handling - Symfony Config - YAML\nDESCRIPTION: This YAML snippet demonstrates how to import configuration files with a variety of options in Symfony. Features include support for PHP, YAML, and XML formats, glob wildcards to import multiple files, and ignore_errors flags ('not_found' or true) to control error handling if files are missing or invalid. The input is an 'imports' list used in the configuration root, output is merged/imported configuration, and prerequisites include Symfony's config component.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration.rst#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\\nimports:\\n    - { resource: 'legacy_config.php' }\\n\\n    # glob expressions are also supported to load multiple files\\n    - { resource: '/etc/myapp/*.yaml' }\\n\\n    # ignore_errors: not_found silently discards errors if the loaded file doesn't exist\\n    - { resource: 'my_config_file.xml', ignore_errors: not_found }\\n    # ignore_errors: true silently discards all errors (including invalid code and not found)\\n    - { resource: 'my_other_config_file.xml', ignore_errors: true }\\n\\n# ...\n```\n\n----------------------------------------\n\nTITLE: XML Output with Attribute and Node Value from XmlEncoder\nDESCRIPTION: This is the XML output generated by the `XmlEncoder` when encoding the PHP array `['foo' => ['@bar' => 'value', '#' => 'baz']]`. It shows the 'foo' tag with a 'bar' attribute set to 'value' and the text content 'baz'.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer/encoders.rst#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n   <?xml version=\"1.0\"?>\n   <response>\n       <foo bar=\"value\">\n          baz\n       </foo>\n   </response>\n```\n\n----------------------------------------\n\nTITLE: Conditional Message Selection in YAML\nDESCRIPTION: Example of using ICU MessageFormat select function for gender-based message selection in YAML format.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/formats/message_format.rst#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ninvitation_title: >\n    {organizer_gender, select,\n        female   {{organizer_name} has invited you to her party!}\n        male     {{organizer_name} has invited you to his party!}\n        multiple {{organizer_name} have invited you to their party!}\n        other    {{organizer_name} has invited you to their party!}\n    }\n```\n\n----------------------------------------\n\nTITLE: Event Listener Service Configuration in XML\nDESCRIPTION: XML configuration for registering an event listener service with the kernel.event_listener tag.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/event_dispatcher.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"App\\EventListener\\ExceptionListener\">\n            <tag name=\"kernel.event_listener\"/>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony HttpFoundation Component\nDESCRIPTION: Command to install the Symfony HttpFoundation component using Composer.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/create_framework/http_foundation.rst#2025-04-22_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n$ composer require symfony/http-foundation\n```\n\n----------------------------------------\n\nTITLE: Applying Twig Constraint to a Property in PHP\nDESCRIPTION: This snippet demonstrates how to apply the Twig constraint to a property in a PHP class using attributes. It validates that the 'templateCode' property contains valid Twig syntax.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Twig.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Bridge\\Twig\\Validator\\Constraints\\Twig;\n\nclass Template\n{\n    #[Twig]\n    private string $templateCode;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Profiling Sections in Symfony Stopwatch\nDESCRIPTION: Demonstrates how to use sections to organize profiling data into logical groups. Sections allow splitting the profile timeline for better organization of performance measurements.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/performance.rst#2025-04-22_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$this->stopwatch->openSection();\n$this->stopwatch->start('validating-file', 'validation');\n$this->stopwatch->stopSection('parsing');\n\n$events = $this->stopwatch->getSectionEvents('parsing');\n\n// later you can reopen a section passing its name to the openSection() method\n$this->stopwatch->openSection('parsing');\n$this->stopwatch->start('processing-file');\n$this->stopwatch->stopSection('parsing');\n```\n\n----------------------------------------\n\nTITLE: Generated Category Entity Class\nDESCRIPTION: Shows the resulting Category entity class generated by the make:entity command, including ORM annotations for the id and name properties.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine/associations.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Category.php\nnamespace App\\Entity;\n\n// ...\n\n#[ORM\\Entity(repositoryClass: CategoryRepository::class)]\nclass Category\n{\n    #[ORM\\Id]\n    #[ORM\\GeneratedValue]\n    #[ORM\\Column]\n    private $id;\n\n    #[ORM\\Column]\n    private string $name;\n\n    // ... getters and setters\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Lock Resources in Symfony (YAML)\nDESCRIPTION: Sets up lock resources using environment variables in the Symfony framework configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_54\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/lock.yaml\nframework:\n    lock: '%env(LOCK_DSN)%'\n```\n\n----------------------------------------\n\nTITLE: Extracting Translations without Filling Placeholders in Symfony\nDESCRIPTION: Demonstrates using the translation:extract command with the --no-fill option to extract translations without filling placeholders. This is useful when using external translation tools.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/translation.rst#2025-04-22_snippet_15\n\nLANGUAGE: terminal\nCODE:\n```\n# when using the --no-fill option, the --prefix option is ignored\n$ php bin/console translation:extract --force --no-fill fr\n```\n\n----------------------------------------\n\nTITLE: Configuring Traverse Constraint with PHP\nDESCRIPTION: Example of configuring the Traverse constraint using PHP code in a class's validation metadata loader method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Traverse.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/BookCollection.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass BookCollection\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addConstraint(new Assert\\Traverse());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying GitHub Pull Request Notes with Git Show\nDESCRIPTION: Demonstrates the command used to view the fetched GitHub pull request discussion associated with a specific commit. The `git show` command, combined with the `--show-notes=github-comments` option, displays the notes (containing the PR discussion) alongside the standard commit information. This requires the Git configuration to fetch notes (shown in the previous snippet) to be set up.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/contributing/code/git.rst#2025-04-22_snippet_2\n\nLANGUAGE: terminal\nCODE:\n```\n$ git show HEAD --show-notes=github-comments\n```\n\n----------------------------------------\n\nTITLE: Configuring CAS Token Handler with Custom HTTP Client in XML\nDESCRIPTION: XML configuration for setting up a CAS token handler with a custom HTTP client in Symfony security.xml file. This includes the complete XML structure with necessary namespaces and schema locations.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/access_token.rst#2025-04-22_snippet_32\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/security.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<srv:container xmlns=\"http://symfony.com/schema/dic/security\"\n    xmlns:srv=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/security\n        https://symfony.com/schema/dic/security/security-1.0.xsd\">\n\n    <config>\n        <firewall name=\"main\">\n            <access-token>\n                <token-handler>\n                    <cas validation-url=\"https://www.example.com/cas/validate\" http-client=\"cas.client\"/>\n                </token-handler>\n            </access-token>\n        </firewall>\n    </config>\n</srv:container>\n```\n\n----------------------------------------\n\nTITLE: Rendering Form Widget with Custom Attributes in Twig\nDESCRIPTION: Demonstrates how to render a form widget with additional HTML attributes, specifically adding a 'foo' CSS class to the rendered form element.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/form_customization.rst#2025-04-22_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n{# render a widget, but add a \"foo\" class to it #}\n{{ form_widget(form.name, {'attr': {'class': 'foo'}}) }}\n```\n\n----------------------------------------\n\nTITLE: Authenticating Composer for Private GitHub Repositories via Terminal\nDESCRIPTION: Provides the Composer command (`composer config --global --auth github-oauth.github.com [token]`) to store a GitHub Personal Access Token globally. This configuration allows Composer to authenticate with GitHub and access private repositories, including private Flex recipe repositories hosted on GitHub. The placeholder `[token]` must be replaced with the actual generated token.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/flex_private_recipes.rst#2025-04-22_snippet_6\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer config --global --auth github-oauth.github.com [token]\n```\n\n----------------------------------------\n\nTITLE: Testing Mercure Updates with MockHub\nDESCRIPTION: Unit testing example using MockHub to simulate Mercure update publishing without actual server communication.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mercure.rst#2025-04-22_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n// tests/FunctionalTest.php\nnamespace App\\Tests\\Unit\\Controller;\n\nuse App\\Controller\\MessageController;\nuse Symfony\\Component\\Mercure\\HubInterface;\nuse Symfony\\Component\\Mercure\\JWT\\StaticTokenProvider;\nuse Symfony\\Component\\Mercure\\MockHub;\nuse Symfony\\Component\\Mercure\\Update;\n\nclass MessageControllerTest extends TestCase\n{\n    public function testPublishing(): void\n    {\n        $hub = new MockHub('https://internal/.well-known/mercure', new StaticTokenProvider('foo'), function(Update $update): string {\n            // $this->assertTrue($update->isPrivate());\n\n            return 'id';\n        });\n\n        $controller = new MessageController($hub);\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Relative Date Range Validation\nDESCRIPTION: Example showing how to use relative date ranges for validation using 'now' and time intervals.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Range.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Order.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Order\n{\n    #[Assert\\Range(\n        min: 'now',\n        max: '+5 hours',\n    )]\n    protected \\DateTimeInterface $deliveryDate;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Expression Constraints with XML in Symfony\nDESCRIPTION: Illustrates how to define an Expression constraint using XML configuration. The XML format requires special handling of comparison operators (using HTML entities) but provides the same validation logic.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Expression.rst#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Model\\Analysis\">\n        <property name=\"metric\">\n            <constraint name=\"Expression\">\n                <option name=\"expression\">\n                    value + error_margin &lt; threshold\n                </option>\n                <option name=\"values\">\n                    <value key=\"error_margin\">0.25</value>\n                    <value key=\"threshold\">1.5</value>\n                </option>\n            </constraint>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Determining Web Server User and Setting ACLs - Shell\nDESCRIPTION: This snippet uses shell commands to detect the appropriate web server user for a variety of common daemons (apache, nginx, www-data, etc) and sets access control lists (ACL) so the web server and current terminal user have read, write, and execute permissions on the var/ directory and its descendants. Required: setfacl binary with ACL-supporting filesystem. Inputs: current shell environment and user context. Output: changed permission attributes. Limitation: setfacl does not work on NFS mounts.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/file_permissions.rst#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ HTTPDUSER=$(ps axo user,comm | grep -E '[a]pache|[h]ttpd|[_]www|[w]ww-data|[n]ginx' | grep -v root | head -1 | cut -d\\  -f1)\n\n# if the following commands don\\'t work, try adding `-n` option to `setfacl`\n\n# set permissions for future files and folders\n$ sudo setfacl -dR -m u:\"$HTTPDUSER\":rwX -m u:$(whoami):rwX var\n# set permissions on the existing files and folders\n$ sudo setfacl -R -m u:\"$HTTPDUSER\":rwX -m u:$(whoami):rwX var\n```\n\n----------------------------------------\n\nTITLE: Custom Service with Monolog Channel Attribute\nDESCRIPTION: PHP class demonstrating the use of WithMonologChannel attribute for channel configuration\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/logging/channels_handlers.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// src/Service/MyFixtureService.php\nnamespace App\\Service;\n\nuse Monolog\\Attribute\\WithMonologChannel;\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Bridge\\Monolog\\Logger;\n\n#[WithMonologChannel('fixtures')]\nclass MyFixtureService\n{\n    public function __construct(LoggerInterface $logger)\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using LessThan Constraint with Relative Dates in PHP Attributes\nDESCRIPTION: Example of using the LessThan constraint with relative dates using PHP attributes to validate that a person is at least 18 years old.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/LessThan.rst#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Person.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Person\n{\n    #[Assert\\LessThan('-18 years')]\n    protected \\DateTimeInterface $dateOfBirth;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Routing Loader in PHP Routes Configuration\nDESCRIPTION: PHP configuration to import routes using the custom 'extra' routing loader through Symfony's RoutingConfigurator.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/routing/custom_route_loader.rst#2025-04-22_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n// config/routes.php\nuse Symfony\\Component\\Routing\\Loader\\Configurator\\RoutingConfigurator;\n\nreturn static function (RoutingConfigurator $routes): void {\n    $routes->import('.', 'extra');\n};\n```\n\n----------------------------------------\n\nTITLE: Binding SMTP Transport to IPv6\nDESCRIPTION: Configuration example for binding the SMTP transport to IPv6 using the source_ip option with RFC2732 syntax (IPv6 addresses enclosed in square brackets).\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$dsn = 'smtp://smtp.example.com?source_ip=[::]';\n```\n\n----------------------------------------\n\nTITLE: Configuring Fingers Crossed Handler (YAML)\nDESCRIPTION: YAML configuration for setting up a fingers_crossed handler in Monolog. This handler stores all logs but only passes them to other handlers if a certain action level is reached.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/logging.rst#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/prod/monolog.yaml\nmonolog:\n    handlers:\n        filter_for_errors:\n            type: fingers_crossed\n            # if *one* log is error or higher, pass *all* to file_log\n            action_level: error\n            handler: file_log\n\n        # now passed *all* logs, but only if one log is error or higher\n        file_log:\n            type: stream\n            path: \"%kernel.logs_dir%/%kernel.environment%.log\"\n\n        # still passed *all* logs, and still only logs error or higher\n        syslog_handler:\n            type: syslog\n            level: error\n```\n\n----------------------------------------\n\nTITLE: Running Doctrine Migrations in Symfony\nDESCRIPTION: Command to execute Doctrine migrations in a Symfony application to update the database schema.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine/associations.rst#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/console doctrine:migrations:migrate\n```\n\n----------------------------------------\n\nTITLE: Configuring Ip Constraint in YAML\nDESCRIPTION: Example of defining the Ip constraint using YAML configuration in Symfony. This snippet demonstrates how to apply IP address validation to the 'ipAddress' property of an Author entity.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Ip.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Author:\n    properties:\n        ipAddress:\n            - Ip: ~\n```\n\n----------------------------------------\n\nTITLE: Profiling with Categories in Symfony Stopwatch\nDESCRIPTION: Example of using categories in Stopwatch to organize events by type. This helps with filtering and grouping related profiling data.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/performance.rst#2025-04-22_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$this->stopwatch->start('export-data', 'export');\n```\n\n----------------------------------------\n\nTITLE: Using GreaterThanOrEqual with Relative Dates (PHP Attributes)\nDESCRIPTION: Example showing how to use the GreaterThanOrEqual constraint with relative date/time expressions to ensure a delivery date is at least 5 hours in the future.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/GreaterThanOrEqual.rst#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Order.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Order\n{\n    #[Assert\\GreaterThanOrEqual('+5 hours')]\n    protected \\DateTimeInterface $deliveryDate;\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring XLIFF 2.0 Document with Notes and Segments in XML\nDESCRIPTION: This XML snippet demonstrates how to structure an XLIFF 2.0 document for Symfony translations. It includes notes for providing context to translators and a segment with source and target content. The example also shows the usage of attributes in the <segment> element, which was introduced in Symfony 7.2.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/formats/xliff.rst#2025-04-22_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<xliff xmlns=\"urn:oasis:names:tc:xliff:document:2.1\" version=\"2.1\"\n    srcLang=\"fr-FR\" trgLang=\"en-US\">\n    <file id=\"messages.en_US\">\n        <unit id=\"LCa0a2j\" name=\"original-content\">\n            <notes>\n                <note category=\"state\">new</note>\n                <note category=\"approved\">true</note>\n                <note category=\"section\" priority=\"1\">user login</note>\n            </notes>\n            <segment state=\"translated\" subState=\"Some custom value\">\n                <source>original-content</source>\n                <target>translated-content</target>\n            </segment>\n        </unit>\n    </file>\n</xliff>\n```\n\n----------------------------------------\n\nTITLE: Extending Event Aliases in Symfony Kernel\nDESCRIPTION: A modification to the Symfony Kernel class that registers custom event aliases by adding the AddEventAliasesPass compiler pass. This allows using class names as event references for custom events.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/event_dispatcher.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// src/Kernel.php\nnamespace App;\n\nuse App\\Event\\MyCustomEvent;\nuse Symfony\\Component\\DependencyInjection\\ContainerBuilder;\nuse Symfony\\Component\\EventDispatcher\\DependencyInjection\\AddEventAliasesPass;\nuse Symfony\\Component\\HttpKernel\\Kernel as BaseKernel;\n\nclass Kernel extends BaseKernel\n{\n    protected function build(ContainerBuilder $container): void\n    {\n        $container->addCompilerPass(new AddEventAliasesPass([\n            MyCustomEvent::class => 'my_custom_event',\n        ]));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: PHP Code Validation Configuration\nDESCRIPTION: Implementation of IsTrue constraint using PHP code configuration with ClassMetadata.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/IsTrue.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Author.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints\\IsTrue;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Author\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addGetterConstraint('tokenValid', new IsTrue(\n            message: 'The token is invalid.',\n        ));\n    }\n\n    public function isTokenValid(): bool\n    {\n        return $this->token === $this->generateToken();\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JSONP Format in Symfony Framework YAML\nDESCRIPTION: Configuration for adding JSONP format support in Symfony framework using YAML format. Sets the MIME type for JSONP responses to application/javascript.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_63\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/framework.yaml\nframework:\n    request:\n        formats:\n            jsonp: 'application/javascript'\n```\n\n----------------------------------------\n\nTITLE: Tag Entity Method for Bidirectional Relationships in Symfony\nDESCRIPTION: PHP code showing the Tag entity's addTask method which completes the bidirectional relationship setup. It includes a check to prevent duplicate entries in the collection.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/form_collections.rst#2025-04-22_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Tag.php\n\n// ...\npublic function addTask(Task $task): void\n{\n    if (!$this->tasks->contains($task)) {\n        $this->tasks->add($task);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Inline Console Styles in Symfony Output (PHP)\nDESCRIPTION: Shows how to apply formatting directly within console output tags using attributes like `fg` (foreground color), `bg` (background color), and `options` (e.g., bold, underscore). This allows for ad-hoc styling without predefining styles. Both named and hexadecimal colors are supported.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/console/coloring.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// using named colors\n$output->writeln('<fg=green>foo</>');\n\n// using hexadecimal colors\n$output->writeln('<fg=#c0392b>foo</>');\n\n// black text on a cyan background\n$output->writeln('<fg=black;bg=cyan>foo</>');\n\n// bold text on a yellow background\n$output->writeln('<bg=yellow;options=bold>foo</>');\n\n// bold text with underscore\n$output->writeln('<options=bold,underscore>foo</>');\n```\n\n----------------------------------------\n\nTITLE: Extended Controller Service Configuration\nDESCRIPTION: Extended YAML configuration for controllers when not using autowiring/autoconfiguration, including service locator setup and container injection.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/controller/service.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\n\nabstract_controller.locator:\n    class: Symfony\\Component\\DependencyInjection\\ServiceLocator\n    arguments:\n        -\n            router: '@router'\n            request_stack: '@request_stack'\n            http_kernel: '@http_kernel'\n            session: '@session'\n            parameter_bag: '@parameter_bag'\n\nApp\\Controller\\:\n    resource: '../src/Controller/'\n    tags: ['controller.service_arguments']\n    calls:\n        - [setContainer, ['@abstract_controller.locator']]\n```\n\n----------------------------------------\n\nTITLE: Enabling Relative Protocol URLs with PHP Method in Symfony\nDESCRIPTION: Example of using loadValidatorMetadata to allow protocol-relative URLs (//example.com) in Symfony's URL validation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Url.rst#2025-04-22_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Author.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Author\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('bioUrl', new Assert\\Url(\n            relativeProtocol: true,\n        ));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Timezone Validation with PHP Attributes\nDESCRIPTION: Example of using PHP attributes to add timezone validation to a UserSettings entity class property. Uses the Symfony Validator component's Timezone constraint.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Timezone.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/UserSettings.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass UserSettings\n{\n    #[Assert\\Timezone]\n    protected string $timezone;\n}\n```\n\n----------------------------------------\n\nTITLE: Using GreaterThanOrEqual Constraint with PHP Attributes\nDESCRIPTION: Example showing how to apply the GreaterThanOrEqual constraint to properties in a Person class using PHP attributes. Ensures the siblings property is at least 5 and age is at least 18.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/GreaterThanOrEqual.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Person.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Person\n{\n    #[Assert\\GreaterThanOrEqual(5)]\n    protected int $siblings;\n\n    #[Assert\\GreaterThanOrEqual(\n        value: 18,\n    )]\n    protected int $age;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling SentMessageEvent in Symfony Notifier\nDESCRIPTION: PHP code demonstrating an event listener for SentMessageEvent to perform actions after a notification has been successfully sent.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/notifier.rst#2025-04-22_snippet_39\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Notifier\\Event\\SentMessageEvent;\n\n$dispatcher->addListener(SentMessageEvent::class, function (SentMessageEvent $event): void {\n    // gets the message instance\n    $message = $event->getMessage();\n\n    // log something\n    $this->logger(sprintf('The message has been successfully sent and has id: %s', $message->getMessageId()));\n});\n```\n\n----------------------------------------\n\nTITLE: Direct PropertyAccessor Configuration in PHP\nDESCRIPTION: Shows how to directly configure PropertyAccessor through its constructor with feature flags (not the recommended approach).\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/property_access.rst#2025-04-22_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n// enable handling of magic __call, __set but not __get:\n$propertyAccessor = new PropertyAccessor(PropertyAccessor::MAGIC_CALL | PropertyAccessor::MAGIC_SET);\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Controller\nDESCRIPTION: Defines an error controller class to handle exceptions with custom error messages and status codes.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/create_framework/http_kernel_httpkernel_class.rst#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace Calendar\\Controller;\n\nuse Symfony\\Component\\ErrorHandler\\Exception\\FlattenException;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass ErrorController\n{\n    public function exception(FlattenException $exception): Response\n    {\n        $msg = 'Something went wrong! ('.$exception->getMessage().')';\n\n        return new Response($msg, $exception->getStatusCode());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Utility Class in PHP\nDESCRIPTION: This snippet defines the `Rot13Transformer` class within the `App\\Util` namespace. It contains a single public method `transform` that takes a string and returns its ROT13 encoded version using PHP's built-in `str_rot13` function. This class serves as a dependency in subsequent examples.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/autowiring.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Util/Rot13Transformer.php\nnamespace App\\Util;\n\nclass Rot13Transformer\n{\n    public function transform(string $value): string\n    {\n        return str_rot13($value);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NotIdenticalTo Constraint with YAML\nDESCRIPTION: Shows how to configure the NotIdenticalTo constraint using YAML format. It applies the constraint to the firstName and age properties of the Person class.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/NotIdenticalTo.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Person:\n    properties:\n        firstName:\n            - NotIdenticalTo: Mary\n        age:\n            - NotIdenticalTo:\n                value: 15\n```\n\n----------------------------------------\n\nTITLE: Checking Value Acceptance with accepts()\nDESCRIPTION: Illustrates using the `accepts()` method on a `Type` object to determine if a given value conforms to the defined type. This method provides a way to validate values against a type definition. Examples show checking simple integer types and union types (int|string). This method was introduced in Symfony 7.3.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/type_info.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$type = Type::int();\n// check if the type accepts a given value\n$type->accepts(123); // true\n$type->accepts('z'); // false\n\n$type = Type::union(Type::string(), Type::int());\n// now the second check is true because the union type accepts either an int or a string value\n$type->accepts(123); // true\n$type->accepts('z'); // true\n```\n\n----------------------------------------\n\nTITLE: Validating Positive Numbers with XML in Symfony\nDESCRIPTION: Example of using the Positive constraint in an XML configuration file to ensure an Employee's income is a positive number.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Positive.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\Employee\">\n        <property name=\"income\">\n            <constraint name=\"Positive\"></constraint>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Configuring Mercure Hub in YAML\nDESCRIPTION: YAML configuration for setting up Mercure hub with custom token provider in Symfony application.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mercure.rst#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/mercure.yaml\nmercure:\n    hubs:\n        default:\n            url: https://mercure-hub.example.com/.well-known/mercure\n            jwt:\n                provider: App\\Mercure\\MyTokenProvider\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of LessThan Constraint with PHP Attributes\nDESCRIPTION: Example of applying the LessThan constraint to class properties using PHP attributes to validate that siblings count is less than 5 and age is less than 80.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/LessThan.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Person.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Person\n{\n    #[Assert\\LessThan(5)]\n    protected int $siblings;\n\n    #[Assert\\LessThan(\n        value: 80,\n    )]\n    protected int $age;\n}\n```\n\n----------------------------------------\n\nTITLE: Symfony Controller for Sports Meetup Creation\nDESCRIPTION: This controller handles the creation of a sports meetup. It creates and processes the form, and renders the template for creating a new meetup.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/dynamic_form_modification.rst#2025-04-22_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace App\\Controller;\n\nuse App\\Entity\\SportMeetup;\nuse App\\Form\\Type\\SportMeetupType;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass MeetupController extends AbstractController\n{\n    #[Route('/create', name: 'app_meetup_create', methods: ['GET', 'POST'])]\n    public function create(Request $request): Response\n    {\n        $meetup = new SportMeetup();\n        $form = $this->createForm(SportMeetupType::class, $meetup, ['action' => $this->generateUrl('app_meetup_create')]);\n        $form->handleRequest($request);\n        if ($form->isSubmitted() && $form->isValid()) {\n            // ... save the meetup, redirect etc.\n        }\n\n        return $this->render('meetup/create.html.twig', [\n            'form' => $form,\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Lazy Attribute with Interface Specification\nDESCRIPTION: Shows how to use the Lazy attribute with specified interfaces for proxy generation, supporting union types in parameters that should be lazy-loaded.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/lazy_services.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\npublic function __construct(\n    #[Lazy(FooInterface::class)]\n    FooInterface|BarInterface $foo,\n) {\n}\n```\n\n----------------------------------------\n\nTITLE: Block Rendering in Symfony Controller\nDESCRIPTION: Demonstrates using renderBlock() and renderBlockView() methods to render specific template blocks\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/templates.rst#2025-04-22_snippet_27\n\nLANGUAGE: php\nCODE:\n```\npublic function price(): Response\n{\n    return $this->renderBlock('product/index.html.twig', 'price_block', [\n        // ...\n    ]);\n\n    $contents = $this->renderBlockView('product/index.html.twig', 'price_block', [\n        // ...\n    ]);\n\n    return new Response($contents);\n}\n```\n\n----------------------------------------\n\nTITLE: Handling FailedMessageEvent in Symfony Notifier\nDESCRIPTION: PHP code showing how to create an event listener for FailedMessageEvent to handle cases when notification delivery fails.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/notifier.rst#2025-04-22_snippet_38\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Notifier\\Event\\FailedMessageEvent;\n\n$dispatcher->addListener(FailedMessageEvent::class, function (FailedMessageEvent $event): void {\n    // gets the message instance\n    $message = $event->getMessage();\n\n    // gets the error instance\n    $error = $event->getError();\n\n    // log something\n    $this->logger(sprintf('The message with subject: %s has not been sent successfully. The error is: %s', $message->getSubject(), $error->getMessage()));\n});\n```\n\n----------------------------------------\n\nTITLE: Injecting Decorated Service in YAML Configuration\nDESCRIPTION: Example showing how to manually inject the decorated service in YAML configuration. The '.inner' reference is passed as an argument to the decorating service.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/service_decoration.rst#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nservices:\n    App\\Mailer: ~\n\n    App\\DecoratingMailer:\n        decorates: App\\Mailer\n        # pass the old service as an argument\n        arguments: ['@.inner']\n```\n\n----------------------------------------\n\nTITLE: Configuring Memory User Provider in Symfony (XML)\nDESCRIPTION: This XML snippet defines a memory-based user provider for Symfony, specifying users and their roles and passwords inline under a <memory> node. Store securely hashed passwords. Roles can be comma-separated. Use this configuration in config/packages/security.xml for small or test projects.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/user_providers.rst#2025-04-22_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/security.xml -->\\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\\n<srv:container xmlns=\\\"http://symfony.com/schema/dic/security\\\"\\n               xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n               xmlns:srv=\\\"http://symfony.com/schema/dic/services\\\"\\n               xsi:schemaLocation=\\\"http://symfony.com/schema/dic/services\\n        https://symfony.com/schema/dic/services/services-1.0.xsd\\n        http://symfony.com/schema/dic/security\\n        https://symfony.com/schema/dic/security/security-1.0.xsd\\\">\\n\\n    <config>\\n        <!-- ... -->\\n\\n        <provider name=\\\"app_user_provider2\\\">\\n            <memory>\\n                <user identifier=\\\"john_admin\\\" password=\\\"$2y$13$jxGxc ... IuqDju\\\" roles=\\\"ROLE_ADMIN\\\"/>\\n                <user identifier=\\\"jane_admin\\\" password=\\\"$2y$13$PFi1I ... rGwXCZ\\\" roles=\\\"ROLE_ADMIN, ROLE_SUPER_ADMIN\\\"/>\\n            </memory>\\n        </provider>\\n    </config>\\n</srv:container>\n```\n\n----------------------------------------\n\nTITLE: Integrating LocationType in CompanyType Form in Symfony\nDESCRIPTION: This snippet shows how to embed the LocationType form into the CompanyType form, specifying the data_class as Company.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/inherit_data_option.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// src/Form/Type/CompanyType.php\nnamespace App\\Form\\Type;\n\nuse App\\Entity\\Company;\nuse Symfony\\Component\\Form\\AbstractType;\n\n// ...\n\nclass CompanyType extends AbstractType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options): void\n    {\n        // ...\n\n        $builder->add('foo', LocationType::class, [\n            'data_class' => Company::class,\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Lazy String Implementation\nDESCRIPTION: Shows how to create lazy-loaded strings using callbacks and Stringable objects for performance optimization.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/string.rst#2025-04-22_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\String\\LazyString;\n\n$lazyString = LazyString::fromCallable(function (): string {\n    // Compute the string value...\n    $value = ...;\n\n    // Then return the final value\n    return $value;\n});\n```\n\n----------------------------------------\n\nTITLE: Using Custom Routing Loader in XML Routes Configuration\nDESCRIPTION: XML configuration to import routes using the custom 'extra' routing loader in Symfony's routing system.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/routing/custom_route_loader.rst#2025-04-22_snippet_15\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/routes.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<routes xmlns=\"http://symfony.com/schema/routing\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/routing\n        https://symfony.com/schema/routing/routing-1.0.xsd\">\n\n    <import resource=\".\" type=\"extra\"/>\n</routes>\n```\n\n----------------------------------------\n\nTITLE: Configuring ElasticsearchLogstashHandler as a Service in PHP\nDESCRIPTION: Example of declaring the ElasticsearchLogstashHandler as a service using PHP configuration. Shows both basic registration and detailed configuration with constructor arguments.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/logging/handlers.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\nuse Monolog\\Level;\nuse Symfony\\Bridge\\Monolog\\Handler\\ElasticsearchLogstashHandler;\n\n$container->register(ElasticsearchLogstashHandler::class);\n\n// optionally, configure the handler using the constructor arguments (shown values are default)\n$container->register(ElasticsearchLogstashHandler::class)\n    ->setArguments([\n        '$endpoint' => \"http://127.0.0.1:9200\",\n        '$index' => \"monolog\",\n        '$client' => null,\n        '$level' => Level::Debug,\n        '$bubble' => true,\n        '$elasticsearchVersion' => '1.0.0',\n    ])\n;\n```\n\n----------------------------------------\n\nTITLE: Configuring Unique Constraint in YAML\nDESCRIPTION: YAML configuration for applying the Unique constraint to an entity property.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Unique.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Person:\n    properties:\n        contactEmails:\n            - Unique: ~\n```\n\n----------------------------------------\n\nTITLE: Validating Collection Elements with XML Configuration\nDESCRIPTION: XML configuration for applying the Collection constraint to validate specific fields of an array with different validation rules.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Collection.rst#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\Author\">\n        <property name=\"profileData\">\n            <constraint name=\"Collection\">\n                <option name=\"fields\">\n                    <value key=\"personal_email\">\n                        <constraint name=\"Email\"/>\n                    </value>\n                    <value key=\"short_bio\">\n                        <constraint name=\"NotBlank\"/>\n                        <constraint name=\"Length\">\n                            <option name=\"max\">100</option>\n                            <option name=\"maxMessage\">Your short bio is too long!</option>\n                        </constraint>\n                    </value>\n                </option>\n                <option name=\"allowMissingFields\">true</option>\n            </constraint>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Access Decision Strategy in YAML\nDESCRIPTION: Configuration for using a custom access decision strategy service in YAML format. The custom service must implement AccessDecisionStrategyInterface.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/voters.rst#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\nsecurity:\n    access_decision_manager:\n        strategy_service: App\\Security\\MyCustomAccessDecisionStrategy\n        # ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Setter Injection in Service Container (PHP)\nDESCRIPTION: PHP configuration for setter injection specifying the method call to inject the mailer service.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/injection_types.rst#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nuse App\\Mail\\NewsletterManager;\n\nreturn function(ContainerConfigurator $container): void {\n    $services = $container->services();\n\n    $services->set(NewsletterManager::class)\n        ->call('setMailer', [service('mailer')]);\n};\n```\n\n----------------------------------------\n\nTITLE: Calling Object Methods in Symfony Expression Language\nDESCRIPTION: Demonstrates how to call methods on objects using dot notation in expressions\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/formats/expression_language.rst#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nclass Robot {\n    public function sayHi(int $times): string {\n        $greetings = [];\n        for ($i = 0; $i < $times; $i++) {\n            $greetings[] = 'Hi';\n        }\n\n        return implode(' ', $greetings).'!';\n    }\n}\n\n$robot = new Robot();\n\nvar_dump($expressionLanguage->evaluate(\n    'robot.sayHi(3)',\n    [\n        'robot' => $robot,\n    ]\n));\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto Mapping for Validation in PHP Format\nDESCRIPTION: PHP configuration for setting up automatic validation constraints for Doctrine entities. Defines which entity namespaces should have automatic validation applied.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_86\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/framework.php\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework): void {\n    $framework->validation()\n        ->autoMapping()\n            ->paths([\n                'App\\\\Entity\\\\' => [],\n                'Foo\\\\' => ['Foo\\\\Some\\\\Entity', 'Foo\\\\Another\\\\Entity'],\n            ]);\n};\n```\n\n----------------------------------------\n\nTITLE: Using Schema-Agnostic URLs with Symfony UrlPackage (PHP)\nDESCRIPTION: This snippet shows how to configure `UrlPackage` with a schema-agnostic base URL (starting with '//'). This allows the browser to request the asset using the same protocol (HTTP or HTTPS) as the current page. It also uses `StaticVersionStrategy` for versioning.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/asset.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Asset\\UrlPackage;\n// ...\n\n$urlPackage = new UrlPackage(\n    '//static.example.com/images/',\n    new StaticVersionStrategy('v1')\n);\n\necho $urlPackage->getUrl('/logo.png');\n// result: //static.example.com/images/logo.png?v1\n```\n\n----------------------------------------\n\nTITLE: Using External CSS Files for Email Templates\nDESCRIPTION: Example of loading external CSS files and applying them to email content using the inline_css filter, which helps maintain separation of styles and content.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_48\n\nLANGUAGE: html+twig\nCODE:\n```\n{% apply inline_css(source('@styles/email.css')) %}\n    <h1>Welcome {{ username }}!</h1>\n    {# ... #}\n{% endapply %}\n```\n\n----------------------------------------\n\nTITLE: Defining BlogPost Entity with Setter for Context Support\nDESCRIPTION: PHP class definition for a BlogPost entity with a setter method to support context in the marking store.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/workflow.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/BlogPost.php\nnamespace App\\Entity;\n\nclass BlogPost\n{\n    public string $currentPlace;\n    // ...\n\n    public function setCurrentPlace(string $currentPlace, array $context = []): void\n    {\n        // assign the property and do something with the context\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Prioritizing Extractor Order for Property Metadata (Symfony, PHP)\nDESCRIPTION: Illustrates the impact of extractor order in the PropertyInfoExtractor constructor. By ordering ReflectionExtractor and DoctrineExtractor, developers control whether reflection or Doctrine metadata prevails when listing or typing properties. Requires the symfony/property-info and symfony/doctrine-bridge (for DoctrineExtractor).\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/property_info.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Bridge\\Doctrine\\PropertyInfo\\DoctrineExtractor;\nuse Symfony\\Component\\PropertyInfo\\Extractor\\ReflectionExtractor;\nuse Symfony\\Component\\PropertyInfo\\PropertyInfoExtractor;\n\n$reflectionExtractor = new ReflectionExtractor();\n$doctrineExtractor = new DoctrineExtractor(/* ... */);\n\n$propertyInfo = new PropertyInfoExtractor(\n    // List extractors\n    [\n        $reflectionExtractor,\n        $doctrineExtractor\n    ],\n    // Type extractors\n    [\n        $doctrineExtractor,\n        $reflectionExtractor\n    ]\n);\n```\n\n----------------------------------------\n\nTITLE: Using Static Callback from Different Class (PHP Attributes)\nDESCRIPTION: Example of using a static callback method from a different class for the Choice constraint using PHP attributes.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Choice.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Author.php\nnamespace App\\Entity;\n\nuse App\\Entity\\Genre;\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Author\n{\n    #[Assert\\Choice(callback: [Genre::class, 'getGenres'])]\n    protected string $genre;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Impersonation Exit URL in Twig\nDESCRIPTION: Uses the `impersonation_exit_url` function to generate an absolute URL to exit user impersonation mode. Similar to `impersonation_exit_path`, it accepts an optional `exitTo` string argument for redirection and returns an absolute URL. Returns an empty string if no user is currently being impersonated.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#2025-04-22_snippet_30\n\nLANGUAGE: twig\nCODE:\n```\n{{ impersonation_exit_url(exitTo = null) }}\n```\n\n----------------------------------------\n\nTITLE: Mapping Entities Outside Bundle in YAML\nDESCRIPTION: YAML configuration for mapping Doctrine entities that are located outside of a bundle structure, specifying the entity directory, namespace prefix, and alias.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/doctrine.rst#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ndoctrine:\n        # ...\n        orm:\n            # ...\n            mappings:\n                # ...\n                SomeEntityNamespace:\n                    type: attribute\n                    dir: '%kernel.project_dir%/src/Entity'\n                    is_bundle: false\n                    prefix: App\\Entity\n                    alias: App\n```\n\n----------------------------------------\n\nTITLE: Applying Inky Template with CSS in Twig\nDESCRIPTION: Demonstrates how to apply Inky email template processing and inline CSS styling using a Foundation email stylesheet.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_54\n\nLANGUAGE: twig\nCODE:\n```\n{% apply inky_to_html|inline_css(source('@styles/foundation-emails.css')) %}\n    {# ... #}\n{% endapply %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Symfony Scheduler to Process Only Last Missed Run\nDESCRIPTION: Example of configuring a Symfony Scheduler to process only the last missed run when using the stateful option. This is useful when you need to handle a message only once after a worker restart.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/scheduler.rst#2025-04-22_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n// src/Scheduler/SaleTaskProvider.php\nnamespace App\\Scheduler;\n\n#[AsSchedule('uptoyou')]\nclass SaleTaskProvider implements ScheduleProviderInterface\n{\n    public function getSchedule(): Schedule\n    {\n        $this->removeOldReports = RecurringMessage::cron('3 8 * * 1', new CleanUpOldSalesReport());\n\n        return $this->schedule ??= (new Schedule())\n            ->with(\n                // ...\n            )\n            ->stateful($this->cache)\n            ->processOnlyLastMissedRun(true)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Translation Keys in PHP\nDESCRIPTION: Example of using nested translation keys in a PHP translation resource file.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/translation.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n[\n    'symfony' => [\n        'is' => [\n            // id is symfony.is.great\n            'great'   => 'Symfony is great',\n            // id is symfony.is.amazing\n            'amazing' => 'Symfony is amazing',\n        ],\n        'has' => [\n            // id is symfony.has.bundles\n            'bundles' => 'Symfony has bundles',\n        ],\n    ],\n    'user' => [\n        // id is user.login\n        'login' => 'Login',\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Starting Standalone VarDumper Server in Terminal\nDESCRIPTION: This terminal command launches the standalone var-dump-server binary from the project's vendor/bin directory. The server listens for VarDumper output on TCP port 9912, which is useful for aggregating debug data separately from normal output, especially in non-Symfony PHP projects. Prerequisites are that symfony/var-dumper is installed via Composer and the binary is accessible via vendor/bin.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/var_dumper.rst#2025-04-22_snippet_7\n\nLANGUAGE: terminal\nCODE:\n```\n$ ./vendor/bin/var-dump-server\n  [OK] Server listening on tcp://127.0.0.1:9912\n```\n\n----------------------------------------\n\nTITLE: Explicit Entity Mapping with MapEntity Attribute\nDESCRIPTION: Shows how to explicitly configure entity mapping using the MapEntity attribute with the mapping option. This is useful when auto_mapping is disabled or when custom mapping is needed.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine.rst#2025-04-22_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/ProductController.php\nnamespace App\\Controller;\n\nuse App\\Entity\\Product;\nuse Symfony\\Bridge\\Doctrine\\Attribute\\MapEntity;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Attribute\\Route;\n// ...\n\nclass ProductController extends AbstractController\n{\n    #[Route('/product/{slug}')]\n    public function show(\n        #[MapEntity(mapping: ['slug' => 'slug'])]\n        Product $product\n    ): Response\n    {\n        // use the Product!\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Live Reload for PHP and Twig Files with webpack-dev-server\nDESCRIPTION: Configuration to enable live reloading when PHP or Twig files change, working alongside HMR for front-end assets.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/dev-server.rst#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// webpack.config.js\n// ...\n\nEncore\n    // ...\n\n    .configureDevServerOptions(options => {\n        options.liveReload = true;\n        options.static = {\n            watch: false\n        };\n        options.watchFiles = {\n            paths: ['src/**/*.php', 'templates/**/*'],\n        };\n    })\n```\n\n----------------------------------------\n\nTITLE: Default Dumping of Multi-line Strings (Inline) in PHP\nDESCRIPTION: Shows the default behavior of `Yaml::dump` for strings containing newline characters (`\\n`). They are represented as standard YAML double-quoted strings with escaped newlines.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/yaml.rst#2025-04-22_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$string = [\"string\" => \"Multiple\\nLine\\nString\"];\n$yaml = Yaml::dump($string);\necho $yaml; // string: \"Multiple\\nLine\\nString\"\n```\n\n----------------------------------------\n\nTITLE: Text-based File Formatting\nDESCRIPTION: Shows how to format file information from text\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#2025-04-22_snippet_59\n\nLANGUAGE: twig\nCODE:\n```\n{{ text|format_file_from_text }}\n```\n\n----------------------------------------\n\nTITLE: Using Service Aliases for Autowiring (YAML, XML, PHP)\nDESCRIPTION: These configuration examples demonstrate how to use service aliases to facilitate autowiring when a service's ID does not match its class name. An alias is created with the ID matching the class name (`App\\Util\\Rot13Transformer`) and points to the actual service ID (`app.rot13.transformer`). This allows autowiring based on the class type-hint to resolve correctly.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/autowiring.rst#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nservices:\n    # ...\n\n    # the id is not a class, so it won't be used for autowiring\n    app.rot13.transformer:\n        class: App\\Util\\Rot13Transformer\n        # ...\n\n    # but this fixes it!\n    # the \"app.rot13.transformer\" service will be injected when\n    # an App\\Util\\Rot13Transformer type-hint is detected\n    App\\Util\\Rot13Transformer: '@app.rot13.transformer'\n```\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <!-- ... -->\n\n        <service id=\"app.rot13.transformer\" class=\"App\\Util\\Rot13Transformer\" autowire=\"true\"/>\n        <service id=\"App\\Util\\Rot13Transformer\" alias=\"app.rot13.transformer\"/>\n    </services>\n</container>\n```\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nuse App\\Util\\Rot13Transformer;\n\nreturn function(ContainerConfigurator $container): void {\n    // ...\n\n    // the id is not a class, so it won't be used for autowiring\n    $services->set('app.rot13.transformer', Rot13Transformer::class)\n        ->autowire();\n\n    // but this fixes it!\n    // the \"app.rot13.transformer\" service will be injected when\n    // an App\\Util\\Rot13Transformer type-hint is detected\n    $services->alias(Rot13Transformer::class, 'app.rot13.transformer');\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Doctrine Token Provider in YAML\nDESCRIPTION: Enables database storage for remember me tokens using Doctrine in YAML configuration. This implementation uses a token provider to store and retrieve tokens from the database.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/remember_me.rst#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\nsecurity:\n    # ...\n\n    firewalls:\n        main:\n            # ...\n            remember_me:\n                # ...\n                token_provider:\n                    doctrine: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Fragment URL in Symfony (PHP)\nDESCRIPTION: Shows how to configure the special URL for serving template fragments using PHP configuration in Symfony. This is used when embedding controllers with the controller() function in Twig templates.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/templates.rst#2025-04-22_snippet_39\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/framework.php\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework): void {\n    // ...\n    $framework->fragments()->path('/_fragment');\n};\n```\n\n----------------------------------------\n\nTITLE: Pluralization Rules in YAML\nDESCRIPTION: Demonstrates ICU MessageFormat pluralization function usage in YAML for handling different quantity cases.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/formats/message_format.rst#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nnum_of_apples: >\n    {apples, plural,\n        =0    {There are no apples}\n        =1    {There is one apple...}\n        other {There are # apples!}\n    }\n```\n\n----------------------------------------\n\nTITLE: Using GitHub Format for Translation Linting in Symfony\nDESCRIPTION: Shows how to output translation linting results in GitHub Actions compatible format using the --format option.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/translation.rst#2025-04-22_snippet_54\n\nLANGUAGE: terminal\nCODE:\n```\n$ php bin/console lint:yaml translations/ --format=github\n$ php bin/console lint:xliff translations/ --format=github\n```\n\n----------------------------------------\n\nTITLE: Initializing FlockStore for File-based Locks in Symfony\nDESCRIPTION: Code example showing how to create a FlockStore which uses the file system for lock persistence. FlockStore doesn't support expiration but automatically releases locks when they go out of scope.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/lock.rst#2025-04-22_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Lock\\Store\\FlockStore;\n\n// the argument is the path of the directory where the locks are created\n// if none is given, sys_get_temp_dir() is used internally.\n$store = new FlockStore('/var/stores');\n```\n\n----------------------------------------\n\nTITLE: Configuring Twig Constraint in YAML\nDESCRIPTION: This YAML configuration applies the Twig constraint to the 'templateCode' property of the App\\Entity\\Page class. It demonstrates how to set up validation using YAML format.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Twig.rst#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Page:\n    properties:\n        templateCode:\n            - Symfony\\Bridge\\Twig\\Validator\\Constraints\\Twig: ~\n```\n\n----------------------------------------\n\nTITLE: Initializing EventDispatcher with Listener in PHP\nDESCRIPTION: Creates a new EventDispatcher instance and registers a listener for the 'foo.action' event. Shows basic setup before creating an immutable version.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/event_dispatcher/immutable_dispatcher.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\EventDispatcher\\EventDispatcher;\nuse Symfony\\Contracts\\EventDispatcher\\Event;\n\n$dispatcher = new EventDispatcher();\n$dispatcher->addListener('foo.action', function (Event $event): void {\n    // ...\n});\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for Required Form Labels\nDESCRIPTION: This CSS snippet shows how to add an asterisk before required form field labels. Symfony adds a 'required' class to labels of required fields by default, which can be styled with CSS.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/forms.rst#2025-04-22_snippet_14\n\nLANGUAGE: css\nCODE:\n```\nlabel.required:before {\n    content: \"*\";\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Monolog Handler with Custom Formatter in PHP\nDESCRIPTION: PHP configuration for a Monolog handler that uses the custom formatter. This configures the 'main' stream handler to use the session request formatter, enabling the token to be included in log messages.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/logging/processors.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/prod/monolog.php\nuse Symfony\\Config\\MonologConfig;\n\nreturn static function (MonologConfig $monolog): void {\n    $monolog->handler('main')\n        ->type('stream')\n        ->path('%kernel.logs_dir%/%kernel.environment%.log')\n        ->level('debug')\n        ->formatter('monolog.formatter.session_request')\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling CSRF Protection in Symfony (YAML)\nDESCRIPTION: Enables CSRF protection for all forms using YAML configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/framework.yaml\nframework:\n    # ...\n    csrf_protection: true\n```\n\n----------------------------------------\n\nTITLE: Configuring a Single Entry Point in Symfony (XML)\nDESCRIPTION: This XML configuration snippet shows how to set an explicit authentication entry point within a Symfony firewall definition. The `entry-point=\"form_login\"` attribute on the `<firewall>` tag for the 'main' firewall specifies that the form login system should be used to initiate authentication for unauthenticated users. This configuration is used when multiple authenticators (like `<form-login/>` and `<custom-authenticator>`) are configured for the same firewall.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/entry_point.rst#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/security.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<srv:container xmlns=\"http://symfony.com/schema/dic/security\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:srv=\"http://symfony.com/schema/dic/services\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/security\n        https://symfony.com/schema/dic/security/security-1.0.xsd\">\n\n    <config>\n        <!-- ... -->\n\n        <!-- entry-point: configure the form authentication as the entry\n                          point for unauthenticated users -->\n        <firewall name=\"main\"\n            entry-point=\"form_login\"\n        >\n            <!-- allow authentication using a form or a custom authenticator -->\n            <form-login/>\n            <custom-authenticator>App\\Security\\SocialConnectAuthenticator</custom-authenticator>\n        </firewall>\n    </config>\n</srv:container>\n```\n\n----------------------------------------\n\nTITLE: French Translation File Example (YAML)\nDESCRIPTION: Example of a French translation file using YAML format for Symfony translations.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/translation.rst#2025-04-22_snippet_39\n\nLANGUAGE: yaml\nCODE:\n```\n# translations/messages.fr.yaml\nSymfony is great: Symfony est génial\n```\n\n----------------------------------------\n\nTITLE: Defining a BlogPost Class with Expression Constraint in PHP\nDESCRIPTION: Example of a BlogPost class with category and isTechnicalPost properties, using the Expression constraint for validation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Expression.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Model/BlogPost.php\nnamespace App\\Model;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\n#[Assert\\Expression(\n    \"this.getCategory() in ['php', 'symfony'] or !this.isTechnicalPost()\",\n    message: 'If this is a tech post, the category should be either php or symfony!',\n)]\nclass BlogPost\n{\n    private string $category;\n\n    private bool $isTechnicalPost;\n\n    // ...\n\n    public function getCategory(): string\n    {\n        return $this->category;\n    }\n\n    public function setIsTechnicalPost(bool $isTechnicalPost): void\n    {\n        $this->isTechnicalPost = $isTechnicalPost;\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring UserPassword Constraint in YAML\nDESCRIPTION: Example of configuring the UserPassword constraint using YAML configuration format. Defines validation rules for the oldPassword property.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/UserPassword.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Form\\Model\\ChangePassword:\n    properties:\n        oldPassword:\n            - Symfony\\Component\\Security\\Core\\Validator\\Constraints\\UserPassword:\n                message: 'Wrong value for your current password'\n```\n\n----------------------------------------\n\nTITLE: Creating Database Schema for Remember Me Tokens with Migrations\nDESCRIPTION: Terminal commands to create and apply database migrations for remember me tokens when using Doctrine migrations. Creates the necessary table structure for storing tokens.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/remember_me.rst#2025-04-22_snippet_12\n\nLANGUAGE: terminal\nCODE:\n```\n$ php bin/console doctrine:migrations:diff\n\n# and optionally run the migrations locally\n$ php bin/console doctrine:migrations:migrate\n```\n\n----------------------------------------\n\nTITLE: Using ReflectionExtractor to Access Property Metadata (Symfony PHP)\nDESCRIPTION: This PHP snippet demonstrates how to instantiate and use Symfony\\Component\\PropertyInfo\\Extractor\\ReflectionExtractor for extracting property list, types, and access information from a PHP class. The extractor uses PHP's native reflection capabilities and provides methods to check if a property is readable, writable, and initializable. It requires the symfony/property-info package and works out of the box when PropertyInfo is enabled in Symfony.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/property_info.rst#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\PropertyInfo\\Extractor\\ReflectionExtractor;\\n\\n$reflectionExtractor = new ReflectionExtractor();\\n\\n// List information.\\n$reflectionExtractor->getProperties($class);\\n\\n// Type information.\\n$reflectionExtractor->getTypes($class, $property);\\n\\n// Access information.\\n$reflectionExtractor->isReadable($class, $property);\\n$reflectionExtractor->isWritable($class, $property);\\n\\n// Initializable information\\n$reflectionExtractor->isInitializable($class, $property);\\n\n```\n\n----------------------------------------\n\nTITLE: Fetching Localized Country Names using Symfony Intl in PHP\nDESCRIPTION: Shows how to retrieve country names translated into a specific locale (German, 'de') by passing the locale code as the last argument to the methods of the `Symfony\\Component\\Intl\\Countries` class. This overrides the default locale for the specific call.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/intl.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$countries = Countries::getNames('de');\n// => ['AF' => 'Afghanistan', 'EG' => 'Ägypten', ...]\n\n$countries = Countries::getAlpha3Names('de');\n// => ['AFG' => 'Afghanistan', 'EGY' => 'Ägypten', ...]\n\n$country = Countries::getName('GB', 'de');\n// => 'Vereinigtes Königreich'\n\n$country = Countries::getAlpha3Name('GBR', 'de');\n// => 'Vereinigtes Königreich'\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom HTML Sanitizer in YAML\nDESCRIPTION: Shows how to configure a custom HTML sanitizer in YAML configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/html_sanitizer.rst#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/html_sanitizer.yaml\nframework:\n    html_sanitizer:\n        sanitizers:\n            app.post_sanitizer:\n                block_elements:\n                    - h1\n```\n\n----------------------------------------\n\nTITLE: Using IdenticalTo Validator with PHP Code in Symfony\nDESCRIPTION: Example demonstrating how to programmatically add IdenticalTo constraints to entity properties using PHP code and the loadValidatorMetadata method. This applies strict identity validation to the firstName and age properties.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/IdenticalTo.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Person.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Person\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('firstName', new Assert\\IdenticalTo('Mary'));\n\n        $metadata->addPropertyConstraint('age', new Assert\\IdenticalTo(\n            value: 20,\n        ));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using yaml_dump Filter with inline Parameter in Twig\nDESCRIPTION: Demonstrates the `inline` parameter with the `yaml_dump` filter. The output includes the type (`%array%`) and follows the specified inline formatting level for the nested array.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#2025-04-22_snippet_48\n\nLANGUAGE: twig\nCODE:\n```\n{% set array = {\n    'a': {\n        'c': 'e'\n    },\n    'b': {\n        'd': 'f'\n    }\n} %}\n\n{{ array|yaml_dump(inline = 0) }}\n{# output:\n   %array% { a: { c: e }, b: { d: f } } #}\n\n{{ array|yaml_dump(inline = 1) }}\n{# output:\n   %array% a: { c: e }\n   b: { d: f } #}\n```\n\n----------------------------------------\n\nTITLE: Configuring GreaterThanOrEqual Constraint with YAML\nDESCRIPTION: Example showing how to configure the GreaterThanOrEqual constraint in a YAML validation file. Validates that a Person entity has at least 5 siblings and is at least 18 years old.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/GreaterThanOrEqual.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Person:\n    properties:\n        siblings:\n            - GreaterThanOrEqual: 5\n        age:\n            - GreaterThanOrEqual:\n                value: 18\n```\n\n----------------------------------------\n\nTITLE: Combining Translation Debug Exit Codes in Symfony\nDESCRIPTION: Shows how to combine the bit mask exit codes to check for multiple translation issues at once in PHP code.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/translation.rst#2025-04-22_snippet_51\n\nLANGUAGE: php\nCODE:\n```\nif (TranslationDebugCommand::EXIT_CODE_MISSING | TranslationDebugCommand::EXIT_CODE_UNUSED) {\n    // ... there are missing and/or unused translations\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing and Dumping Binary Data in YAML with PHP\nDESCRIPTION: Shows how to handle binary data in YAML using the Symfony YAML component. Demonstrates dumping binary data as base64 encoded strings and parsing it back.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/yaml.rst#2025-04-22_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n$imageContents = file_get_contents(__DIR__.'/images/logo.png');\n\n$dumped = Yaml::dump(['logo' => $imageContents]);\n// logo: !!binary iVBORw0KGgoAAAANSUhEUgAAA6oAAADqCAY...\n\n$dumped = 'logo: !!binary iVBORw0KGgoAAAANSUhEUgAAA6oAAADqCAY...';\n$parsed = Yaml::parse($dumped);\n$imageContents = $parsed['logo'];\n```\n\n----------------------------------------\n\nTITLE: Defining Author Class with Headshot Property in PHP\nDESCRIPTION: A PHP class representing an Author with a headshot property that will be used for image uploads, including getters and setters for the File object.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Image.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Author.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\HttpFoundation\\File\\File;\n\nclass Author\n{\n    protected File $headshot;\n\n    public function setHeadshot(?File $file = null): void\n    {\n        $this->headshot = $file;\n    }\n\n    public function getHeadshot(): File\n    {\n        return $this->headshot;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Environment Configuration in Symfony\nDESCRIPTION: Demonstrates how to change the application environment from development to production by modifying the APP_ENV variable in the .env file.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/quick_tour/the_architecture.rst#2025-04-22_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n  # .env\n- APP_ENV=dev\n+ APP_ENV=prod\n```\n\n----------------------------------------\n\nTITLE: Parsing YAML Maps into PHP Objects\nDESCRIPTION: Demonstrates parsing a YAML structure where maps are intended to represent objects, using the `Yaml::PARSE_OBJECT_FOR_MAP` flag. Each map encountered during parsing is converted into a `stdClass` object.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/yaml.rst#2025-04-22_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$parsed = Yaml::parse($dumped, Yaml::PARSE_OBJECT_FOR_MAP);\nvar_dump(is_object($parsed)); // true\nvar_dump(is_object($parsed->data)); // true\necho $parsed->data->foo; // bar\n```\n\n----------------------------------------\n\nTITLE: Applying Image Constraint with PHP Attributes\nDESCRIPTION: Applying the Image validation constraint to the headshot property using PHP attributes, setting dimension constraints for width and height.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Image.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Author.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\HttpFoundation\\File\\File;\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Author\n{\n    #[Assert\\Image(\n        minWidth: 200,\n        maxWidth: 400,\n        minHeight: 200,\n        maxHeight: 400,\n    )]\n    protected File $headshot;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Twig Bundle in Symfony\nDESCRIPTION: Command to install Twig language support and its integration with Symfony applications using Composer.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/templates.rst#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ composer require symfony/twig-bundle\n```\n\n----------------------------------------\n\nTITLE: Documented Configuration in YAML Format\nDESCRIPTION: Example YAML configuration showing how documentation appears as comments in the configuration file.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/config/definition.rst#2025-04-22_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\n# This value is only used for the search results page.\nentries_per_page: 25\n```\n\n----------------------------------------\n\nTITLE: Defining CssColor Validation in XML\nDESCRIPTION: Example of configuring CssColor validation constraints in XML format with different format options and customized validation messages.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/CssColor.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\Bulb\">\n        <property name=\"defaultColor\">\n            <constraint name=\"CssColor\"/>\n        </property>\n        <property name=\"accentColor\">\n            <constraint name=\"CssColor\">\n                <option name=\"formats\">hex_long</option>\n                <option name=\"message\">The accent color must be a 6-character hexadecimal color.</option>\n            </constraint>\n        </property>\n        <property name=\"currentColor\">\n            <constraint name=\"CssColor\">\n                <option name=\"formats\">\n                    <value>basic_named_colors</value>\n                    <value>extended_named_colors</value>\n                </option>\n                <option name=\"message\">The color \"{{ value }}\" is not a valid CSS color name.</option>\n            </constraint>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Configuring DateTime GreaterThanOrEqual with PHP Code\nDESCRIPTION: Example showing how to use PHP code to configure the GreaterThanOrEqual constraint to validate that a delivery date is at least the current day.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/GreaterThanOrEqual.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Order.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Order\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('deliveryDate', new Assert\\GreaterThanOrEqual('today'));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Currency Rounding Increments using Symfony Intl in PHP\nDESCRIPTION: Illustrates retrieving the standard rounding increment and the cash rounding increment for specific currencies (INR, CAD) using `Currencies::getRoundingIncrement()` and `Currencies::getCashRoundingIncrement()`. This highlights how cash transactions might require rounding to specific increments (like 5 cents for CAD) due to the elimination of smaller coin denominations.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/intl.rst#2025-04-22_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n// Indian rupee defines the same value for both\n$roundingIncrement = Currencies::getRoundingIncrement('INR');         // returns: 0\n$cashRoundingIncrement = Currencies::getCashRoundingIncrement('INR'); // returns: 0\n\n// Canadian dollar defines different values because they have eliminated\n// the smaller coins (1-cent and 2-cent) and prices in cash must be rounded to\n// 5 cents (e.g. if price is 7.42 you pay 7.40; if price is 7.48 you pay 7.50)\n$roundingIncrement = Currencies::getRoundingIncrement('CAD');         // returns: 0\n$cashRoundingIncrement = Currencies::getCashRoundingIncrement('CAD'); // returns: 5\n```\n\n----------------------------------------\n\nTITLE: Improved PHP Request Handling with Default Value\nDESCRIPTION: Updated PHP code that provides a default value for the name parameter to avoid warnings.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/create_framework/http_foundation.rst#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n// framework/index.php\n$name = $_GET['name'] ?? 'World';\n\nprintf('Hello %s', $name);\n```\n\n----------------------------------------\n\nTITLE: Creating Symfony Projects with Specific Version using Composer\nDESCRIPTION: This snippet shows how to create a new Symfony project using Composer, specifying an exact Symfony version. This method is used when the Symfony CLI is not available.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup.rst#2025-04-22_snippet_11\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer create-project symfony/skeleton:\"6.4.*\" my_project_directory\n```\n\n----------------------------------------\n\nTITLE: Defining a Base Repository Class with Common Dependencies in PHP\nDESCRIPTION: A PHP abstract class that serves as a base repository with common dependencies like EntityManager and LoggerInterface. Child repository classes will inherit these dependencies.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/parent_services.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Repository/BaseDoctrineRepository.php\nnamespace App\\Repository;\n\nuse Doctrine\\ORM\\EntityManager;\nuse Psr\\Log\\LoggerInterface;\n\n// ...\nabstract class BaseDoctrineRepository\n{\n    protected LoggerInterface $logger;\n\n    public function __construct(\n        protected EntityManager $entityManager,\n    ) {\n    }\n\n    public function setLogger(LoggerInterface $logger): void\n    {\n        $this->logger = $logger;\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring composer.json for Symfony UX bundle\nDESCRIPTION: The composer.json file for a Symfony UX bundle must include the 'symfony-ux' keyword to be recognized by the framework as a UX bundle.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/create_ux_bundle.rst#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"keywords\": [\"symfony-ux\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Mailer Envelope Recipients in Symfony (PHP)\nDESCRIPTION: Sets up envelope recipients for the Symfony mailer, overriding any other recipients set in the code.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_59\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/mailer.php\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nreturn static function (ContainerConfigurator $container): void {\n    $container->extension('framework', [\n        'mailer' => [\n            'dsn' => 'smtp://localhost:25',\n            'envelope' => [\n                'recipients' => [\n                    'admin@symfony.com',\n                    'lead@symfony.com',\n                ],\n            ],\n        ],\n    ]);\n};\n```\n\n----------------------------------------\n\nTITLE: Defining ISIN Constraint Using PHP Attributes in Symfony\nDESCRIPTION: This snippet demonstrates how to apply the ISIN constraint to a property in a PHP class using attributes. It requires the Symfony Validator component.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Isin.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/UnitAccount.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass UnitAccount\n{\n    #[Assert\\Isin]\n    protected string $isin;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering PHPUnit Event Listener for Deprecation Tracking in XML Configuration\nDESCRIPTION: This XML snippet demonstrates how to register the SymfonyTestsListener event listener in a PHPUnit configuration file. This setup enables deprecation notices and legacy test features provided by the Symfony PHPUnit Bridge. The XML must be placed within your project's phpunit.xml or phpunit.xml.dist file, ensuring the proper handling and reporting of deprecation errors during the test run.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/phpunit_bridge.rst#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/6.0/phpunit.xsd\"\n>\n\n    <!-- ... -->\n\n    <listeners>\n        <listener class=\"Symfony\\Bridge\\PhpUnit\\SymfonyTestsListener\"/>\n    </listeners>\n</phpunit>\n```\n\n----------------------------------------\n\nTITLE: Using XML Connection Configuration in Symfony\nDESCRIPTION: Example XML configuration for defining multiple connections with table, user, and password attributes.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/config/definition.rst#2025-04-22_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<connection table=\"symfony\" user=\"root\" password=\"null\"/>\n<connection table=\"foo\" user=\"root\" password=\"pa$$\"/>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Validation Constraints with Error Levels Using PHP\nDESCRIPTION: This PHP code shows how to programmatically set up validation constraints with different error levels for a User entity. It uses the ClassMetadata API to add property constraints with payload options for severity.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/validation/severity.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/User.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass User\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('username', new Assert\\NotBlank(\n            payload: ['severity' => 'error'],\n        ));\n        $metadata->addPropertyConstraint('password', new Assert\\NotBlank(\n            payload: ['severity' => 'error'],\n        ));\n        $metadata->addPropertyConstraint('bankAccountNumber', new Assert\\Iban(\n            payload: ['severity' => 'warning'],\n        ));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Monolog Processor for a Specific Handler in YAML\nDESCRIPTION: YAML configuration demonstrating how to register `Monolog\\Processor\\IntrospectionProcessor` and tag it with `monolog.processor`, specifying the `handler` attribute as `firephp`. This limits the processor's application, ensuring it only processes log records destined for the Monolog handler named 'firephp'.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/dic_tags.rst#2025-04-22_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n    Monolog\\Processor\\IntrospectionProcessor:\n        tags:\n            - { name: monolog.processor, handler: firephp }\n```\n\n----------------------------------------\n\nTITLE: Configuring Notifier Texter Transports in YAML\nDESCRIPTION: Configuration example for setting up notifier texter transports in Symfony using YAML format.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/notifier.rst#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/notifier.yaml\nframework:\n    notifier:\n        texter_transports:\n            expo: '%env(EXPO_DSN)%'\n```\n\n----------------------------------------\n\nTITLE: Defining Tag Entity Class in PHP\nDESCRIPTION: Creates a Tag entity class with a name field and getter/setter methods.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/form_collections.rst#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n// src/Entity/Tag.php\nnamespace App\\Entity;\n\nclass Tag\n{\n    private string $name;\n\n    public function getName(): string\n    {\n        return $this->name;\n    }\n\n    public function setName(string $name): void\n    {\n        $this->name = $name;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DateTime with Timezone using XML\nDESCRIPTION: Example showing how to use XML to configure the GreaterThanOrEqual constraint with a fixed timezone (UTC) for DateTime validation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/GreaterThanOrEqual.rst#2025-04-22_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\Order\">\n        <property name=\"deliveryDate\">\n            <constraint name=\"GreaterThanOrEqual\">today UTC</constraint>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Configuring API Platform Bundle Mapping - Symfony - YAML\nDESCRIPTION: This YAML snippet configures the mapping setting for the API Platform bundle in Symfony. It sets the mapping path to the 'Entity' directory within the application via a parameter reference. The dependency is the API Platform package, and the key parameter 'paths' specifies where resource entities are located for this bundle.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/api_platform.yaml\\napi_platform:\\n    mapping:\\n        paths: ['%kernel.project_dir%/src/Entity']\n```\n\n----------------------------------------\n\nTITLE: Configuring ElasticsearchLogstashHandler as a Service in XML\nDESCRIPTION: Example of declaring the ElasticsearchLogstashHandler as a service using XML configuration. Shows both basic registration and detailed configuration with constructor arguments.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/logging/handlers.rst#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:monolog=\"http://symfony.com/schema/dic/monolog\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/monolog\n        https://symfony.com/schema/dic/monolog/monolog-1.0.xsd\">\n\n    <services>\n        <service id=\"Symfony\\Bridge\\Monolog\\Handler\\ElasticsearchLogstashHandler\"/>\n\n        <!-- optionally, configure the handler using the constructor arguments (shown values are default) -->\n        <service id=\"Symfony\\Bridge\\Monolog\\Handler\\ElasticsearchLogstashHandler\">\n            <argument key=\"endpoint\">http://127.0.0.1:9200</argument>\n            <argument key=\"index\">monolog</argument>\n            <argument key=\"client\"/>\n            <argument key=\"level\" type=\"enum\">Monolog\\Level::Debug</argument>\n            <argument key=\"bubble\">true</argument>\n            <argument key=\"elasticsearchVersion\">1.0.0</argument>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Defining Translations in PHP for trans Filter\nDESCRIPTION: Example PHP array configuration (`translations/messages.en.php`) for the `trans` filter. Returns an array mapping the `message` key to its translation 'Hello %name%', usable by the `trans` filter.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#2025-04-22_snippet_41\n\nLANGUAGE: php\nCODE:\n```\n// translations/messages.en.php\nreturn [\n    'message' => \"Hello %name%\",\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring OidcTokenHandler in PHP\nDESCRIPTION: This PHP configuration sets up the OidcTokenHandler in the security.php file. It specifies the algorithms used for JWS signing, the JSON Web Key (JWK), audience, and issuers for token validation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/access_token.rst#2025-04-22_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/security.php\nuse Symfony\\Config\\SecurityConfig;\n\nreturn static function (SecurityConfig $security) {\n    $security->firewall('main')\n        ->accessToken()\n            ->tokenHandler()\n                ->oidc()\n                    // Algorithm used to sign the JWS\n                    ->algorithms(['ES256', 'RS256'])\n                    // A JSON-encoded JWK\n                    ->keyset('{\"keys\":[{\"kty\":\"...\",\"k\":\"...\"}]}')\n                    // Audience (`aud` claim): required for validation purpose\n                    ->audience('api-example')\n                    // Issuers (`iss` claim): required for validation purpose\n                    ->issuers(['https://oidc.example.com'])\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Regex Constraint with PHP\nDESCRIPTION: Example of using the Regex constraint with PHP code to validate a description field starts with a word character.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Regex.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Author.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Author\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('description', new Assert\\Regex(\n            pattern: '/^\\w+/',\n        ));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Invalid Option Values in Symfony OptionsResolver\nDESCRIPTION: This code shows what happens when an invalid value is passed to an option that has validation constraints. It demonstrates that an InvalidOptionsException is thrown with a descriptive error message.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/options_resolver.rst#2025-04-22_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$mailer = new Mailer([\n    'transport' => 'send-mail',\n]);\n\n// InvalidOptionsException: The option \"transport\" with value \"send-mail\"\n// is invalid. Accepted values are: \"sendmail\", \"mail\", \"smtp\"\n```\n\n----------------------------------------\n\nTITLE: Static Page Controller with Caching for ESI\nDESCRIPTION: A controller example that returns a response with caching headers, making the content cacheable for 10 minutes. This will be the main page that contains ESI tags.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/http_cache/esi.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/DefaultController.php\nnamespace App\\Controller;\n\n// ...\nclass DefaultController extends AbstractController\n{\n    public function about(): Response\n    {\n        $response = $this->render('static/about.html.twig');\n        $response->setPublic();\n        $response->setMaxAge(600);\n\n        return $response;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Indexing Service Collection with Default Index Method\nDESCRIPTION: Demonstrates how to index a service collection using a default index method in Symfony. It uses the AutowireLocator attribute with a defaultIndexMethod option.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/service_subscribers_locators.rst#2025-04-22_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n// src/CommandBus.php\nnamespace App;\n\nuse Psr\\Container\\ContainerInterface;\nuse Symfony\\Component\\DependencyInjection\\Attribute\\AutowireLocator;\n\nclass CommandBus\n{\n    public function __construct(\n        #[AutowireLocator('app.handler', defaultIndexMethod: 'getLocatorKey')]\n        private ContainerInterface $locator,\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Private GitHub Recipe Endpoint in composer.json (JSON)\nDESCRIPTION: Illustrates how to modify a project's `composer.json` file to use a private Symfony Flex recipe repository hosted on GitHub. Add the URL pointing to the private repository's `index.json` via the GitHub API (e.g., `https://api.github.com/repos/your-github-account-name/your-recipes-repository/contents/index.json`) to the `extra.symfony.endpoint` array. Ensure the `flex://defaults` entry is also present to continue using official recipes. Replace placeholders with your actual GitHub details.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/flex_private_recipes.rst#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"extra\": {\n        \"symfony\": {\n            \"endpoint\": [\n                \"https://api.github.com/repos/your-github-account-name/your-recipes-repository/contents/index.json\",\n                \"flex://defaults\"\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache Rewrite Rules for Symfony Applications\nDESCRIPTION: Apache configuration that sets up rewrite rules to ensure PHP files are ignored and requests are directed to index.php, making the Symfony application handle all requests.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/migration.rst#2025-04-22_snippet_1\n\nLANGUAGE: apache\nCODE:\n```\nRewriteEngine On\n\nRewriteCond %{REQUEST_URI}::$1 ^(/.+)/(.*)::\\2$\nRewriteRule ^(.*) - [E=BASE:%1]\n\nRewriteCond %{ENV:REDIRECT_STATUS} ^$\nRewriteRule ^index\\.php(?:/(.*)|$) %{ENV:BASE}/$1 [R=301,L]\n\nRewriteRule ^index\\.php - [L]\n\nRewriteCond %{REQUEST_FILENAME} -f\nRewriteCond %{REQUEST_FILENAME} !^.+\\.php$\nRewriteRule ^ - [L]\n\nRewriteRule ^ %{ENV:BASE}/index.php [L]\n```\n\n----------------------------------------\n\nTITLE: Formatting Section Messages in Symfony Console\nDESCRIPTION: Demonstrates how to format and output a section message using the FormatterHelper.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/helpers/formatterhelper.rst#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$formattedLine = $formatter->formatSection(\n    'SomeSection',\n    'Here is some message related to that section'\n);\n$output->writeln($formattedLine);\n```\n\n----------------------------------------\n\nTITLE: Validating Translation Contents in Symfony\nDESCRIPTION: Shows how to check the content validity of translation files using the lint:translations command, either for all locales or for specific ones.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/translation.rst#2025-04-22_snippet_56\n\nLANGUAGE: terminal\nCODE:\n```\n# checks the contents of all the translation catalogues in all locales\n$ php bin/console lint:translations\n\n# checks the contents of the translation catalogues for Italian (it) and Japanese (ja) locales\n$ php bin/console lint:translations --locale=it --locale=ja\n```\n\n----------------------------------------\n\nTITLE: Configuring Login Link Security Options in XML\nDESCRIPTION: XML configuration for setting check route, check_post_only, and max uses options on the login-link security firewall.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/login_link.rst#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/security.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<srv:container xmlns=\"http://symfony.com/schema/dic/security\"\n    xmlns:srv=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/security\n        https://symfony.com/schema/dic/security/security-1.0.xsd\">\n\n    <config>\n        <firewall name=\"main\">\n            <login-link check-route=\"login_check\"\n                check-post-only=\"true\"\n                max-uses=\"1\"\n            />\n        </firewall>\n    </config>\n</srv:container>\n```\n\n----------------------------------------\n\nTITLE: Accessing Form Variables in Twig Templates\nDESCRIPTION: Shows how to access form variables from the FormView object to customize form rendering, specifically accessing the id and required status to build a custom label.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/form_customization.rst#2025-04-22_snippet_12\n\nLANGUAGE: html+twig\nCODE:\n```\n<label for=\"{{ form.name.vars.id }}\"\n    class=\"{{ form.name.vars.required ? 'required' }}\">\n    {{ form.name.vars.label }}\n</label>\n```\n\n----------------------------------------\n\nTITLE: Configuring Hostname Validation with XML\nDESCRIPTION: Example showing how to configure the Hostname constraint using XML configuration in Symfony. Defines validation schema for the ServerSettings entity.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Hostname.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\ServerSettings\">\n        <property name=\"name\">\n            <constraint name=\"Hostname\">\n                <option name=\"message\">The server name must be a valid hostname.</option>\n            </constraint>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Applying Yaml Constraint with PHP Attributes\nDESCRIPTION: Example of applying the Yaml constraint to a property using PHP attributes. It demonstrates how to set a custom error message for invalid YAML syntax.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Yaml.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Report.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Report\n{\n    #[Assert\\Yaml(\n        message: \"Your configuration doesn't have valid YAML syntax.\"\n    )]\n    private string $customConfiguration;\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating Multi-App Directory Structure in Symfony\nDESCRIPTION: Defines the proposed directory structure for a Symfony project supporting multiple applications under a shared kernel. Each application resides in its own subdirectory within `apps/`, containing its specific configuration and source code, while common elements remain at the project root.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/multiple_kernels.rst#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nyour-project/\n├─ apps/\n│  └─ api/\n│     ├─ config/\n│     │  ├─ bundles.php\n│     │  ├─ routes.yaml\n│     │  └─ services.yaml\n│     └─ src/\n├─ bin/\n│  └─ console\n├─ config/\n├─ public/\n│  └─ index.php\n├─ src/\n│  └─ Kernel.php\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic HTML Sanitizer - PHP Standalone\nDESCRIPTION: Shows how to create a basic HTML sanitizer instance with safe or static elements enabled.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/html_sanitizer.rst#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\HtmlSanitizer\\HtmlSanitizer;\nuse Symfony\\Component\\HtmlSanitizer\\HtmlSanitizerConfig;\n\n$postSanitizer = new HtmlSanitizer(\n    (new HtmlSanitizerConfig())\n        // enable either of these\n        ->allowSafeElements()\n        ->allowStaticElements()\n);\n```\n\n----------------------------------------\n\nTITLE: Converting Slack Short Codes to Emojis in PHP\nDESCRIPTION: PHP code demonstrating how to use EmojiTransliterator to convert Slack short codes back to emojis.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/emoji.rst#2025-04-22_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n$transliterator = EmojiTransliterator::create('slack-emoji');\n$transliterator->transliterate('Menus with :green_salad: or :falafel:');\n// => 'Menus with 🥗 or 🧆'\n```\n\n----------------------------------------\n\nTITLE: Setting Composer Root Version for Dependency Updates\nDESCRIPTION: Command to specify the Symfony version when updating dependencies with Composer using the COMPOSER_ROOT_VERSION environment variable. This helps resolve dependency conflicts.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/contributing/code/tests.rst#2025-04-22_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\n$ COMPOSER_ROOT_VERSION=7.2.x-dev composer update\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Closures in YAML\nDESCRIPTION: YAML configuration for injecting service closures. Shows how to use the !service_closure tag and the @> shortcut syntax introduced in Symfony 7.3, including handling optional dependencies.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/service_closures.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nservices:\n    App\\Service\\MyService:\n        arguments: [!service_closure '@mailer']\n\n        # In case the dependency is optional\n        # arguments: [!service_closure '@?mailer']\n\n    # you can also use the special '@>' syntax as a shortcut of '!service_closure'\n    App\\Service\\AnotherService:\n        arguments: ['@>mailer']\n\n        # the shortcut also works for optional dependencies\n        # arguments: ['@>?mailer']\n```\n\n----------------------------------------\n\nTITLE: Configuring Expression Constraint in YAML\nDESCRIPTION: YAML configuration for applying the Expression constraint to the BlogPost class.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Expression.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Model\\BlogPost:\n    constraints:\n        - Expression:\n            expression: \"this.getCategory() in ['php', 'symfony'] or !this.isTechnicalPost()\"\n            message: \"If this is a tech post, the category should be either php or symfony!\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Notifier with XML Configuration\nDESCRIPTION: XML configuration for setting up Twilio as a texter transport in Symfony's Notifier component. This references the environment variable defined in the .env file.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/notifier.rst#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/notifier.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony\n        https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <framework:config>\n        <framework:notifier>\n            <framework:texter-transport name=\"twilio\">\n                %env(TWILIO_DSN)%\n            </framework:texter-transport>\n        </framework:notifier>\n    </framework:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Twig Template Asset Integration\nDESCRIPTION: Shows how to include compiled JavaScript and CSS assets in a Twig template using Encore helpers.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/simple-example.rst#2025-04-22_snippet_2\n\nLANGUAGE: html+twig\nCODE:\n```\n{# templates/base.html.twig #}\n<!DOCTYPE html>\n<html>\n    <head>\n        <!-- ... -->\n\n        {% block stylesheets %}\n            {{ encore_entry_link_tags('app') }}\n        {% endblock %}\n\n        {% block javascripts %}\n            {{ encore_entry_script_tags('app') }}\n        {% endblock %}\n    </head>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Array Operations in Symfony Expression Language\nDESCRIPTION: Shows how to perform operations with arrays and access array elements in expressions\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/formats/expression_language.rst#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$data = ['life' => 10, 'universe' => 10, 'everything' => 22];\n\nvar_dump($expressionLanguage->evaluate(\n    'data[\"life\"] + data[\"universe\"] + data[\"everything\"]',\n    [\n        'data' => $data,\n    ]\n));\n```\n\n----------------------------------------\n\nTITLE: Loading Console Commands from a PSR-11 Container with ContainerCommandLoader - Symfony Console - PHP\nDESCRIPTION: This example demonstrates integrating a PSR-11 container (like Symfony DI ContainerBuilder) with ContainerCommandLoader to map command names to service identifiers. Prerequisites include having command classes registered as services in the container and Symfony\\Component\\Console\\CommandLoader\\ContainerCommandLoader. Upon execution, commands like 'app:foo' are loaded via the container, ensuring services are instantiated only when requested, leveraging service configuration for effective lazy-loading.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/console/lazy_commands.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Console\\CommandLoader\\ContainerCommandLoader;\nuse Symfony\\Component\\DependencyInjection\\ContainerBuilder;\n\n$container = new ContainerBuilder();\n$container->register(FooCommand::class, FooCommand::class);\n$container->compile();\n\n$commandLoader = new ContainerCommandLoader($container, [\n    'app:foo' => FooCommand::class,\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML Sanitizer in PHP using Framework Config\nDESCRIPTION: PHP configuration for HTML sanitizer using the FrameworkConfig to allow and drop attributes. Demonstrates allowing 'data-attr' on all elements, dropping it from 'section' elements, and dropping 'style' from all elements.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/html_sanitizer.rst#2025-04-22_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/framework.php\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework): void {\n    $framework->htmlSanitizer()\n        ->sanitizer('app.post_sanitizer')\n            // allow the \"data-attr\" on all safe elements...\n            ->allowAttribute('data-attr', '*')\n\n            // ...except for the <section> element\n            ->dropAttribute('data-attr', ['section'])\n\n            // disallows \"style' on any allowed element\n            ->dropAttribute('style', '*')\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining basic CSS styles in assets/styles/app.css\nDESCRIPTION: Initial CSS file with a basic style rule for the body element.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/installation.rst#2025-04-22_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n/* assets/styles/app.css */\nbody {\n    background-color: lightgray;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Expression Constraint in XML\nDESCRIPTION: XML configuration for applying the Expression constraint to the BlogPost class.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Expression.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n    <class name=\"App\\Model\\BlogPost\">\n        <constraint name=\"Expression\">\n            <option name=\"expression\">\n                this.getCategory() in ['php', 'symfony'] or !this.isTechnicalPost()\n            </option>\n            <option name=\"message\">\n                If this is a tech post, the category should be either php or symfony!\n            </option>\n        </constraint>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: CurrencyType Field Default Configuration\nDESCRIPTION: Default configuration for CurrencyType field showing its inheritance from ChoiceType and its default options including the currency choices sourced from Symfony's Currencies::getNames()\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/currency.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n**default**: ``Symfony\\Component\\Intl\\Currencies::getNames()``\n```\n\n----------------------------------------\n\nTITLE: Parsing PHP Enumerations from YAML in PHP\nDESCRIPTION: Shows how to parse PHP enumerations from YAML using the `!php/enum` tag and the `Yaml::PARSE_CONSTANT` flag. The tagged enum case string (e.g., `!php/enum FooEnum::Foo`) is resolved to the actual PHP enum case during parsing.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/yaml.rst#2025-04-22_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n// ...\n\n$yaml = '{ foo: FooEnum::Foo, bar: !php/enum FooEnum::Foo }';\n\n// Assuming the previous enum definition and Yaml class are available\n// $parameters = Yaml::parse($yaml, Yaml::PARSE_CONSTANT);\n// Resulting $parameters would be similar to:\n// ['foo' => 'FooEnum::Foo', 'bar' => FooEnum::Foo]\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Group Sequence Provider in PHP with Attributes\nDESCRIPTION: This code demonstrates how to set up an advanced group sequence provider using a separate class in Symfony, using PHP attributes.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/validation/sequence_provider.rst#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/User.php\nnamespace App\\Entity;\n\n// ...\nuse App\\Validator\\UserGroupProvider;\n\n#[Assert\\GroupSequenceProvider(provider: UserGroupProvider::class)]\nclass User\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Generating User Impersonation URL in Twig\nDESCRIPTION: Uses the `impersonation_url` function to generate an absolute URL for initiating user impersonation. It takes the user `identifier` (string) as an argument. Similar to `impersonation_path` but produces an absolute URL.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#2025-04-22_snippet_28\n\nLANGUAGE: twig\nCODE:\n```\n{{ impersonation_url(identifier) }}\n```\n\n----------------------------------------\n\nTITLE: Defining Validation Constraints in XML\nDESCRIPTION: This XML configuration snippet shows how to define validation constraints and group sequences for a User entity in Symfony. It includes property constraints and a getter constraint.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/validation/sequence_provider.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\User\">\n        <property name=\"username\">\n            <constraint name=\"NotBlank\"/>\n        </property>\n\n        <property name=\"password\">\n            <constraint name=\"NotBlank\"/>\n        </property>\n\n        <getter property=\"passwordSafe\">\n            <constraint name=\"IsTrue\">\n                <option name=\"message\">The password cannot match your username</option>\n                <option name=\"groups\">\n                    <value>Strict</value>\n                </option>\n            </constraint>\n        </getter>\n\n        <group-sequence>\n            <value>User</value>\n            <value>Strict</value>\n        </group-sequence>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Firewalls for Separate Entry Points (PHP)\nDESCRIPTION: This PHP configuration shows how to set up multiple firewalls for different application sections. An `api` firewall is configured with a specific `pattern('^/api')` and a `customAuthenticators` for API requests. A separate `main` firewall handles other requests using `formLogin()`. This separation allows distinct authentication entry points for the API (likely a 401 response or token challenge managed by the authenticator) and the main website (redirect to login form). `accessControl` rules are defined to enforce authorization based on URL paths.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/entry_point.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/security.php\nuse App\\Security\\ApiTokenAuthenticator;\nuse App\\Security\\LoginFormAuthenticator;\nuse Symfony\\Config\\SecurityConfig;\n\nreturn static function (SecurityConfig $security): void {\n    $apiFirewall = $security->firewall('api');\n    $apiFirewall\n        ->pattern('^/api')\n        ->customAuthenticators([ApiTokenAuthenticator::class])\n    ;\n\n    $mainFirewall = $security->firewall('main');\n    $mainFirewall\n        ->lazy(true)\n        ->formLogin();\n\n    $accessControl = $security->accessControl();\n    $accessControl->path('^/login')->roles(['PUBLIC_ACCESS']);\n    $accessControl->path('^/api')->roles(['ROLE_API_USER']);\n    $accessControl->path('^/')->roles(['ROLE_USER']);\n};\n```\n\n----------------------------------------\n\nTITLE: Running Console Commands with Application ID in Symfony\nDESCRIPTION: Examples of how to execute Symfony console commands for specific applications using the --id option or environment variables. This allows targeting commands to specific applications in a multi-application setup.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/multiple_kernels.rst#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/console cache:clear --id=api\n// or\nphp bin/console cache:clear -iapi\n\n// alternatively\nexport APP_ID=api\nphp bin/console cache:clear\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP HTTP Basic Authentication in XML\nDESCRIPTION: Example of configuring HTTP Basic LDAP authentication in a Symfony application using XML format. Sets up a stateless firewall with LDAP-based HTTP Basic authentication.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/ldap.rst#2025-04-22_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/security.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<srv:container xmlns=\"http://symfony.com/schema/dic/security\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:srv=\"http://symfony.com/schema/dic/services\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/security\n        https://symfony.com/schema/dic/security/security-1.0.xsd\">\n\n    <config>\n        <!-- ... -->\n\n        <firewall name=\"main\" stateless=\"true\">\n            <http-basic-ldap service=\"Symfony\\Component\\Ldap\\Ldap\"\n                dn-string=\"uid={user_identifier},dc=example,dc=com\"/>\n        </firewall>\n    </config>\n</srv:container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Symfony Login Link Lifetime (YAML, XML, PHP)\nDESCRIPTION: Shows how to configure the `lifetime` of a Symfony login link within the security firewall settings. This option, specified in seconds, determines how long a generated link remains valid before expiring. The default lifetime is 600 seconds (10 minutes). Examples are provided for YAML, XML, and PHP configuration formats.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/login_link.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\nsecurity:\n    firewalls:\n        main:\n            login_link:\n                check_route: login_check\n                # lifetime in seconds\n                lifetime: 300\n```\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/security.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<srv:container xmlns=\"http://symfony.com/schema/dic/security\"\n    xmlns:srv=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/security\n        https://symfony.com/schema/dic/security/security-1.0.xsd\">\n\n    <config>\n        <firewall name=\"main\">\n            <!-- lifetime: lifetime in seconds -->\n            <login-link check-route=\"login_check\"\n                lifetime=\"300\"\n            />\n        </firewall>\n    </config>\n</srv:container>\n```\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/security.php\nuse Symfony\\Config\\SecurityConfig;\n\nreturn static function (SecurityConfig $security): void {\n    $security->firewall('main')\n        ->loginLink()\n            ->checkRoute('login_check')\n            // lifetime in seconds\n            ->lifetime(300)\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Link URL Restrictions in PHP\nDESCRIPTION: PHP configuration for controlling URLs in anchor elements. Uses FrameworkConfig to set options for forcing HTTPS, allowed URL schemes, allowed hosts, and whether to permit relative links (partial implementation shown).\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/html_sanitizer.rst#2025-04-22_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/framework.php\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework): void {\n    $framework->htmlSanitizer()\n        ->sanitizer('app.post_sanitizer')\n            // if `true`, all URLs using the `http://` scheme will be converted to\n```\n\n----------------------------------------\n\nTITLE: Triggering Deprecation Warnings in PHP\nDESCRIPTION: This PHP snippet programmatically issues a deprecation warning, aiding users in migrating away from deprecated features. It requires the \\\"symfony/deprecation-contracts\\\" package and typically uses variables for the deprecated and replacement classes. Key parameters include the package name, deprecation version, a formatted message, and dynamic class names; this function should be used where runtime alerts are helpful for consumers.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/contributing/code/conventions.rst#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\ntrigger_deprecation('symfony/package-name', '5.1', 'The \"%s\" class is deprecated, use \"%s\" instead.', Deprecated::class, Replacement::class);\n```\n\n----------------------------------------\n\nTITLE: Configuring OIDC User Info Claim and Base URI - Symfony Security - YAML\nDESCRIPTION: This YAML example demonstrates how to configure the OIDC user info token handler to use a custom claim (such as 'email') as the unique user identifier. It also sets the user info endpoint (base_uri). Place this code in config/packages/security.yaml and adjust the claim and endpoint URL based on your OIDC provider's requirements.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/access_token.rst#2025-04-22_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\nsecurity:\n    firewalls:\n        main:\n            access_token:\n                token_handler:\n                    oidc_user_info:\n                        claim: email\n                        base_uri: https://www.example.com/realms/demo/protocol/openid-connect/userinfo\n```\n\n----------------------------------------\n\nTITLE: Optimizing Password Hasher Configuration for Tests (XML)\nDESCRIPTION: This XML configuration snippet for `config/packages/test/security.xml` provides test-specific password hasher settings. It shows how to configure the hasher for `App\\Entity\\User` to use 'plaintext' (no hashing) or the 'auto' algorithm with minimal cost parameters (`cost`, `time_cost`, `memory_cost`) to speed up test execution.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/passwords.rst#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/test/security.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<srv:container xmlns=\"http://symfony.com/schema/dic/security\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:srv=\"http://symfony.com/schema/dic/services\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <config>\n        <!-- class: Use your user class name here -->\n        <!-- algorithm: disable hashing (only do this in tests!) -->\n        <security:password-hasher\n            class=\"App\\Entity\\User\"\n            algorithm=\"plaintext\"\n        />\n\n        <!-- or use the lowest possible values -->\n        <!-- algorithm: This should be the same value as in config/packages/security.yaml -->\n        <!-- cost: Lowest possible value for bcrypt -->\n        <!-- time_cost: Lowest possible value for argon -->\n        <!-- memory_cost: Lowest possible value for argon -->\n        <security:password-hasher\n            class=\"App\\Entity\\User\"\n            algorithm=\"auto\"\n            cost=\"4\"\n            time_cost=\"3\"\n            memory_cost=\"10\"\n        />\n    </config>\n</srv:container>\n```\n\n----------------------------------------\n\nTITLE: Adding IgnorePlugin for Moment.js Locale Optimization\nDESCRIPTION: Demonstrates how to use the addPlugin method to add webpack's IgnorePlugin to exclude unnecessary locale files from Moment.js, reducing bundle size.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/custom-loaders-plugins.rst#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// webpack.config.js\n+ var webpack = require('webpack');\n\nEncore\n    // ...\n\n+     .addPlugin(new webpack.IgnorePlugin({\n+         resourceRegExp: /^\\.\\/locale$/,\n+         contextRegExp: /moment$/,\n+     }))\n;\n```\n\n----------------------------------------\n\nTITLE: Registering DQL Functions using PHP Configuration\nDESCRIPTION: Illustrates how to register custom DQL functions using PHP configuration in Symfony. Uses the DoctrineConfig class to define functions programmatically.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine/custom_dql_functions.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/doctrine.php\nuse App\\DQL\\DatetimeFunction;\nuse App\\DQL\\NumericFunction;\nuse App\\DQL\\SecondStringFunction;\nuse App\\DQL\\StringFunction;\nuse Symfony\\Config\\DoctrineConfig;\n\nreturn static function (DoctrineConfig $doctrine): void {\n    $defaultDql = $doctrine->orm()\n        ->entityManager('default')\n            // ...\n            ->dql();\n\n    $defaultDql->stringFunction('test_string', StringFunction::class);\n    $defaultDql->stringFunction('second_string', SecondStringFunction::class);\n    $defaultDql->numericFunction('test_numeric', NumericFunction::class);\n    $defaultDql->datetimeFunction('test_datetime', DatetimeFunction::class);\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Class Self-Factory Service (Static Method) - YAML Configuration\nDESCRIPTION: Registers a service using a static 'create' method defined on the NewsletterManager class itself via YAML. The factory array uses null for the class, indicating the method exists on the service class. Arguments for the factory method are also defined, in this case a sender email. This is for 'config/services.yaml' and expects the static method to exist.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/factories.rst#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nservices:\n    # ...\n\n    App\\Email\\NewsletterManager:\n        factory: [null, 'create']\n        arguments:\n            $sender: 'fabien@symfony.com'\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Translation Paths in Symfony XML\nDESCRIPTION: Shows how to add custom translation directories using the paths option in the XML configuration for Symfony's translator component.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/translation.rst#2025-04-22_snippet_18\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/translation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-Instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony\n        https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <framework:config>\n        <framework:translator>\n            <framework:path>%kernel.project_dir%/custom/path/to/translations</framework:path>\n        </framework:translator>\n    </framework:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Using String and Regex Path Patterns with Symfony Finder in PHP\nDESCRIPTION: Illustrates using both simple strings and regular expressions as arguments to the `path()` method for filtering based on file or directory paths. Forward slashes should be used as directory separators.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/finder.rst#2025-04-22_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$finder->path('foo/bar');\n```\n\nLANGUAGE: php\nCODE:\n```\n$finder->path('/^foo\\/bar/');\n```\n\n----------------------------------------\n\nTITLE: Initializing ProxyAdapter with PSR-6 Cache Pool in PHP\nDESCRIPTION: Demonstrates how to create and configure a ProxyAdapter instance that wraps a PSR-6 compliant cache pool. The adapter allows for optional namespace prefixing and default cache lifetime configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/cache/adapters/proxy_adapter.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Cache\\CacheItemPoolInterface;\nuse Symfony\\Component\\Cache\\Adapter\\ProxyAdapter;\n\n// create your own cache pool instance that implements\n// the PSR-6 CacheItemPoolInterface\n$psr6CachePool = ...\n\n$cache = new ProxyAdapter(\n\n    // a cache pool instance\n    CacheItemPoolInterface $psr6CachePool,\n\n    // a string prefixed to the keys of the items stored in this cache\n    $namespace = '',\n\n    // the default lifetime (in seconds) for cache items that do not define their\n    // own lifetime, with a value 0 causing items to be stored indefinitely (i.e.\n    // until the cache is cleared)\n    $defaultLifetime = 0\n);\n```\n\n----------------------------------------\n\nTITLE: Using abbr_class Filter Example in Twig\nDESCRIPTION: Shows an example application of the `abbr_class` filter to 'App\\\\Entity\\\\Product'. This generates an `<abbr>` tag displaying 'Product', with 'App\\\\Entity\\\\Product' available as title attribute for tooltips.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#2025-04-22_snippet_51\n\nLANGUAGE: twig\nCODE:\n```\n{{ 'App\\\\Entity\\\\Product'|abbr_class }}\n```\n\n----------------------------------------\n\nTITLE: Installing Twig CSS Inliner Extra for Symfony Mime (Composer)\nDESCRIPTION: Command to install the `twig/cssinliner-extra` package using Composer. This package provides the `inline_css` filter, enabling CSS styles to be inlined directly into HTML email elements for better compatibility across email clients.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/mime.rst#2025-04-22_snippet_3\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require twig/cssinliner-extra\n```\n\n----------------------------------------\n\nTITLE: Programmatically Enabling/Disabling Profiler in Controller\nDESCRIPTION: PHP code for a controller method that demonstrates how to programmatically disable the profiler for specific actions.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/profiler.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\HttpKernel\\Profiler\\Profiler;\n// ...\n\nclass DefaultController\n{\n    // ...\n\n    public function someMethod(?Profiler $profiler): Response\n    {\n        // $profiler won't be set if your environment doesn't have the profiler (like prod, by default)\n        if (null !== $profiler) {\n            // if it exists, disable the profiler for this particular controller action\n            $profiler->disable();\n        }\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying yaml_dump Filter in Twig\nDESCRIPTION: Uses the `yaml_dump` Twig filter to convert a PHP variable (`value`, mixed type) into YAML, including type information (like `%array%` or `%object%`) in the output. Accepts `inline` and `dumpObjects` parameters similar to `yaml_encode`.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#2025-04-22_snippet_47\n\nLANGUAGE: twig\nCODE:\n```\n{{ value|yaml_dump(inline = 0, dumpObjects = false) }}\n```\n\n----------------------------------------\n\nTITLE: Debugging Symfony Routes with Console Command\nDESCRIPTION: Shows how to use the debug:router command in Symfony to view all routes, including legacy routes.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/migration.rst#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ php bin/console debug:router\n```\n\n----------------------------------------\n\nTITLE: Configuring PHPUnit in XML\nDESCRIPTION: This XML configuration file sets up PHPUnit with sensible defaults, defines the autoloader for bootstrapping tests, and specifies the test directory.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/create_framework/unit_testing.rst#2025-04-22_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/9.6/phpunit.xsd\"\n    backupGlobals=\"false\"\n    colors=\"true\"\n    bootstrap=\"vendor/autoload.php\"\n>\n    <coverage processUncoveredFiles=\"true\">\n        <include>\n            <directory suffix=\".php\">./src</directory>\n        </include>\n    </coverage>\n\n    <testsuites>\n        <testsuite name=\"Test Suite\">\n            <directory>./tests</directory>\n        </testsuite>\n    </testsuites>\n</phpunit>\n```\n\n----------------------------------------\n\nTITLE: Configuring Twig Image Path in PHP\nDESCRIPTION: PHP configuration to set up a Twig namespace for image paths, making it easier to reference images in email templates.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_45\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/twig.php\nuse Symfony\\Config\\TwigConfig;\n\nreturn static function (TwigConfig $twig): void {\n    // ...\n\n    // point this wherever your images live\n    $twig->path('%kernel.project_dir%/assets/images', 'images');\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Container Build Time in XML\nDESCRIPTION: Example of how to set a fixed container build time for reproducible builds using an XML configuration file.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/kernel.rst#2025-04-22_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<!-- config/services.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <parameters>\n        <!-- ... -->\n        <parameter key=\"kernel.container_build_time\">1234567890</parameter>\n    </parameters>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Password Hashers in XML\nDESCRIPTION: This XML configuration snippet, typically found in `config/packages/security.xml`, defines password hashing strategies. It mirrors the YAML example, setting the 'auto' algorithm for `App\\Entity\\User` and configuring 'auto' with a cost of 15 for `PasswordAuthenticatedUserInterface` implementations.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/passwords.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/security.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<srv:container xmlns=\"http://symfony.com/schema/dic/security\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:srv=\"http://symfony.com/schema/dic/services\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/security\n        https://symfony.com/schema/dic/security/security-1.0.xsd\">\n\n    <config>\n        <!-- ... -->\n        <!-- auto hasher with default options for the User class (and children) -->\n        <security:password-hasher\n            class=\"App\\Entity\\User\"\n            algorithm=\"auto\"\n        />\n\n        <!-- auto hasher with custom options for all PasswordAuthenticatedUserInterface instances -->\n        <security:password-hasher\n            class=\"Symfony\\Component\\Security\\Core\\User\\PasswordAuthenticatedUserInterface\"\n            algorithm=\"auto\"\n            cost=\"15\"\n        />\n    </config>\n</srv:container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Access Token Extractor (YAML - Symfony)\nDESCRIPTION: Shows how to use a custom or alternate built-in token extractor in YAML configuration. You can specify 'request_body' for built-in, or a fully qualified class name for a custom extractor implementing AccessTokenExtractorInterface. List in config/packages/security.yaml under token_extractors. Determines from where in the request the access token will be retrieved for authentication.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/access_token.rst#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\\nsecurity:\\n    firewalls:\\n        main:\\n            access_token:\\n                token_handler: App\\Security\\AccessTokenHandler\\n\\n                # use a different built-in extractor\\n                token_extractors: request_body\\n\\n                # or provide the service ID of a custom extractor\\n                token_extractors: 'App\\\\Security\\\\CustomTokenExtractor'\n```\n\n----------------------------------------\n\nTITLE: Configuring Remember Me Signature Properties in XML\nDESCRIPTION: Configures the signature properties for remember me tokens using XML. This example adds the password and updatedAt properties to the token signature in the main firewall.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/remember_me.rst#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/security.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<srv:container xmlns=\"http://symfony.com/schema/dic/security\"\n    xmlns:srv=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/security\n        https://symfony.com/schema/dic/security/security-1.0.xsd\">\n\n    <config>\n        <!-- ... -->\n\n        <firewall name=\"main\">\n            <!-- ... -->\n\n            <remember-me>\n                <signature-property>password</signature-property>\n                <signature-property>updatedAt</signature-property>\n            </remember-me>\n        </firewall>\n    </config>\n</srv:container>\n```\n\n----------------------------------------\n\nTITLE: Validating Locales using PHP Class Metadata in Symfony\nDESCRIPTION: Example of configuring locale validation using PHP class metadata. Shows how to add the Locale constraint through the loadValidatorMetadata method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Locale.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/User.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass User\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('locale', new Assert\\Locale(\n            canonicalize: true,\n        ));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PasswordStrength Constraint using XML\nDESCRIPTION: Illustrates how to apply the PasswordStrength constraint to a property using XML configuration in a validation file.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/PasswordStrength.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\User\">\n        <property name=\"rawPassword\">\n            <constraint name=\"PasswordStrength\"></constraint>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Generating Impersonation Exit Path in Twig\nDESCRIPTION: Uses the `impersonation_exit_path` function to generate a relative URL to exit user impersonation mode. An optional `exitTo` string argument can specify a redirection target URL after exiting; otherwise, it redirects to the current URI. Returns an empty string if no user is currently being impersonated.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#2025-04-22_snippet_29\n\nLANGUAGE: twig\nCODE:\n```\n{{ impersonation_exit_path(exitTo = null) }}\n```\n\n----------------------------------------\n\nTITLE: Using CallbackMessageProvider for Dynamic Message Generation in PHP\nDESCRIPTION: Shows how to dynamically generate messages at runtime using CallbackMessageProvider instead of creating static messages.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/scheduler.rst#2025-04-22_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n// src/Scheduler/SaleTaskProvider.php\nnamespace App\\Scheduler;\n\n#[AsSchedule('uptoyou')]\nclass SaleTaskProvider implements ScheduleProviderInterface\n{\n    public function getSchedule(): Schedule\n    {\n        return $this->schedule ??= (new Schedule())\n            ->with(\n                RecurringMessage::trigger(\n                    new ExcludeHolidaysTrigger(\n                        CronExpressionTrigger::fromSpec('@daily'),\n                    ),\n                    // instead of being static as in the previous example\n                    new CallbackMessageProvider([$this, 'generateReports'], 'foo')\n                ),\n                RecurringMessage::cron('3 8 * * 1', new CleanUpOldSalesReport())\n            );\n    }\n\n    public function generateReports(MessageContext $context)\n    {\n        // ...\n        yield new SendDailySalesReports();\n        yield new ReportSomethingReportSomethingElse();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Date and Time Formatting in Symfony Translations\nDESCRIPTION: Demonstrates how to format dates and times in Symfony translations using the ICU MessageFormat. The example shows formatting a publication date and time.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/formats/message_format.rst#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n# translations/messages+intl-icu.en.yaml\\npublished_at: 'Published at {publication_date, date} - {publication_date, time, short}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Lazy Services in XML\nDESCRIPTION: Shows how to mark a service as lazy in Symfony using XML configuration, which creates a proxy that only instantiates the actual service when needed.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/lazy_services.rst#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"App\\Twig\\AppExtension\" lazy=\"true\"/>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Using Required and Optional Field Constraints with XML\nDESCRIPTION: XML configuration that demonstrates how to use Required and Optional constraint wrappers to control validation behavior for specific collection fields.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Collection.rst#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\Author\">\n        <property name=\"profile_data\">\n            <constraint name=\"Collection\">\n                <option name=\"fields\">\n                    <value key=\"personal_email\">\n                        <constraint name=\"Required\">\n                            <constraint name=\"NotBlank\"/>\n                            <constraint name=\"Email\"/>\n                        </constraint>\n                    </value>\n                    <value key=\"alternate_email\">\n                        <constraint name=\"Optional\">\n                            <constraint name=\"Email\"/>\n                        </constraint>\n                    </value>\n                </option>\n            </constraint>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Registering a Monolog Processor for a Specific Handler in XML\nDESCRIPTION: XML service definition for `Monolog\\Processor\\IntrospectionProcessor` tagged with `monolog.processor`. The `handler` attribute is explicitly set to `firephp`, which configures the processor to be applied solely to the Monolog handler identified by the name 'firephp'.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/dic_tags.rst#2025-04-22_snippet_22\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"Monolog\\Processor\\IntrospectionProcessor\">\n            <tag name=\"monolog.processor\" handler=\"firephp\"/>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Creating and Checking Out a Branch for Development - Terminal\nDESCRIPTION: These commands create and switch to a new local branch, either from an existing branch or from a remote-tracked branch (e.g. for bug fixes). The first variant creates a new branch from a specified base (e.g. 6.1). The next set of commands demonstrates tracking a remote branch (e.g. origin/5.4) and then branching off for local development. This is standard Git workflow for contributions. Git must be initialized and set up with the target repository.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/contributing/code/pull_requests.rst#2025-04-22_snippet_3\n\nLANGUAGE: terminal\nCODE:\n```\n$ git checkout -b BRANCH_NAME 6.1\n```\n\nLANGUAGE: terminal\nCODE:\n```\n$ git checkout --track origin/5.4\n```\n\nLANGUAGE: terminal\nCODE:\n```\n$ git checkout -b BRANCH_NAME 5.4\n```\n\n----------------------------------------\n\nTITLE: Enforcing Square Images with YAML Configuration\nDESCRIPTION: YAML configuration for forcing square images by disabling both landscape and portrait orientations through the Image constraint.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Image.rst#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Author:\n    properties:\n        headshot:\n            - Image:\n                allowLandscape: false\n                allowPortrait: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Default HTTP Client Options in Symfony (YAML)\nDESCRIPTION: Shows how to configure global settings for Symfony's HTTP client in a YAML configuration file. Dependencies include the Symfony HttpClient component and use of the framework bundle config. Main parameters are 'max_host_connections' for limiting per-host concurrency and 'default_options' with 'headers' and 'max_redirects' for customizing requests. The configuration is placed under the framework.http_client key in config/packages/framework.yaml.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_40\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/framework.yaml\\nframework:\\n    # ...\\n    http_client:\\n        max_host_connections: 10\\n        default_options:\\n            headers: { 'X-Powered-By': 'ACME App' }\\n            max_redirects: 7\\n\n```\n\n----------------------------------------\n\nTITLE: Defining DivisibleBy Constraint Using PHP Attributes\nDESCRIPTION: This snippet demonstrates how to apply the DivisibleBy constraint to properties of an Item class using PHP attributes. It ensures the weight is divisible by 0.25 and the quantity is divisible by 5.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/DivisibleBy.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Item.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Item\n{\n    #[Assert\\DivisibleBy(0.25)]\n    protected float $weight;\n\n    #[Assert\\DivisibleBy(\n        value: 5,\n    )]\n    protected int $quantity;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Attributes to the Root XML Node using XmlEncoder in PHP\nDESCRIPTION: This PHP code illustrates how to define attributes directly on the root XML element ('response' by default) when using `XmlEncoder`. Keys prefixed with '@' at the top level of the array become root attributes. The '#' key holds the actual nested content for the root element.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer/encoders.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$encoder = new XmlEncoder();\n$encoder->encode([\n    '@attribute1' => 'foo',\n    '@attribute2' => 'bar',\n    '#' => ['foo' => ['@bar' => 'value', '#' => 'baz']]\n], 'xml');\n```\n\n----------------------------------------\n\nTITLE: Making a JSON Request via jsonRequest (Symfony BrowserKit, PHP)\nDESCRIPTION: Uses the jsonRequest method to send parameters as JSON with appropriate headers (CONTENT_TYPE and HTTP_ACCEPT) via the custom Client. Expects a path and associative array of data. Requires Acme\\Client and symfony/browser-kit. The $crawler object allows HTML traversing on the response.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/browser_kit.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Acme\\Client;\\n\\n$client = new Client();\\n// this encodes parameters as JSON and sets the required CONTENT_TYPE and HTTP_ACCEPT headers\\n$crawler = $client->jsonRequest('GET', '/', ['some_parameter' => 'some_value']);\n```\n\n----------------------------------------\n\nTITLE: Defining a Scoped HTTP Client Service in Symfony (PHP)\nDESCRIPTION: Shows how to configure named scoped HTTP client services with authentication using PHP configuration. Requires use of the FrameworkBundle service container. 'scoped_clients' contains definitions, with each key as a service name and each value being an array of options including 'auth_bearer'. Place in config/packages/framework.php to have the client registered at boot.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_46\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/framework.php\\n$container->loadFromExtension('framework', [\\n    'http_client' => [\\n        'scoped_clients' => [\\n            'my_api.client' => [\\n                'auth_bearer' => 'secret_bearer_token',\\n                // ...\\n            ],\\n        ],\\n    ],\\n]);\\n\n```\n\n----------------------------------------\n\nTITLE: Creating Service Configuration in XML\nDESCRIPTION: Shows how to create a separate service configuration file in XML format. The example contains the proper XML structure needed for Symfony service definitions including parameters and services.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/import.rst#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services/mailer.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <parameters>\n        <!-- ... some parameters -->\n    </parameters>\n\n    <services>\n        <!-- ... some services -->\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Profiling Periods with Lap Method in Symfony Stopwatch\nDESCRIPTION: Example of using the lap() method to measure partial execution times within a loop. This is useful for identifying bottlenecks in iterative operations.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/performance.rst#2025-04-22_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$this->stopwatch->start('process-data-records', 'export');\n\nforeach ($records as $record) {\n    // ... some code goes here\n    $this->stopwatch->lap('process-data-records');\n}\n\n$event = $this->stopwatch->stop('process-data-records');\n// $event->getDuration(), $event->getMemory(), etc.\n\n// Lap information is stored as \"periods\" within the event:\n// $event->getPeriods();\n\n// Gets the last event period:\n// $event->getLastPeriod();\n```\n\n----------------------------------------\n\nTITLE: Implementing SMS Webhook Listener in PHP\nDESCRIPTION: PHP class implementing a webhook listener for SMS events using the Notifier component.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/webhook.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\RemoteEvent\\Attribute\\AsRemoteEventConsumer;\nuse Symfony\\Component\\RemoteEvent\\Consumer\\ConsumerInterface;\nuse Symfony\\Component\\RemoteEvent\\Event\\Sms\\SmsEvent;\nuse Symfony\\Component\\RemoteEvent\\RemoteEvent;\n\n#[AsRemoteEventConsumer('notifier_twilio')]\nclass WebhookListener implements ConsumerInterface\n{\n    public function consume(RemoteEvent $event): void\n    {\n        if ($event instanceof SmsEvent) {\n            $this->handleSmsEvent($event);\n        } else {\n            // This is not an SMS event\n            return;\n        }\n    }\n\n    private function handleSmsEvent(SmsEvent $event): void\n    {\n        // Handle the SMS event\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony PropertyInfo Component (Terminal)\nDESCRIPTION: Demonstrates the command to install the symfony/property-info component using Composer. This is a prerequisite for using the PropertyInfoExtractor and associated extractors in PHP applications.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/property_info.rst#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require symfony/property-info\n```\n\n----------------------------------------\n\nTITLE: Customizing Progress Bar Characters in PHP/Symfony\nDESCRIPTION: Shows how to customize the appearance of the progress bar by setting different characters for finished, unfinished, and progress indicators.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/helpers/progressbar.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// the finished part of the bar\n$progressBar->setBarCharacter('<comment>=</comment>');\n\n// the unfinished part of the bar\n$progressBar->setEmptyBarCharacter(' ');\n\n// the progress character\n$progressBar->setProgressCharacter('|');\n\n// the bar width\n$progressBar->setBarWidth(50);\n```\n\n----------------------------------------\n\nTITLE: Loading Composer Autoloader in PHP\nDESCRIPTION: Example of replacing custom autoloading logic with Composer's autoloader by requiring the autoload.php file.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/migration.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nrequire __DIR__.'/vendor/autoload.php';\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Cache Clearer in PHP\nDESCRIPTION: Example implementation of a custom cache clearer service class that implements CacheClearerInterface.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/dic_tags.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// src/Cache/MyClearer.php\nnamespace App\\Cache;\n\nuse Symfony\\Component\\HttpKernel\\CacheClearer\\CacheClearerInterface;\n\nclass MyClearer implements CacheClearerInterface\n{\n    public function clear(string $cacheDirectory): void\n    {\n        // clear your cache\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Serializable Class for Lock State in PHP\nDESCRIPTION: Defines a PHP class `RefreshTaxonomy` designed to be serialized and potentially passed between processes (e.g., via a message queue). It encapsulates an `article` object and a `Symfony\\Component\\Lock\\Key` object, which holds the state of an acquired lock, allowing another process to resume work with the same lock.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/lock.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Lock/RefreshTaxonomy.php\nnamespace App\\Lock;\n\nuse Symfony\\Component\\Lock\\Key;\n\nclass RefreshTaxonomy\n{\n    public function __construct(\n        private object $article,\n        private Key $key,\n    ) {\n    }\n\n    public function getArticle(): object\n    {\n        return $this->article;\n    }\n\n    public function getKey(): Key\n    {\n        return $this->key;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating TagType Form Class in PHP\nDESCRIPTION: Defines a form type for the Tag entity, adding a 'name' field to the form builder.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/form_collections.rst#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n// src/Form/TagType.php\nnamespace App\\Form;\n\nuse App\\Entity\\Tag;\nuse Symfony\\Component\\Form\\AbstractType;\nuse Symfony\\Component\\Form\\FormBuilderInterface;\nuse Symfony\\Component\\OptionsResolver\\OptionsResolver;\n\nclass TagType extends AbstractType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options): void\n    {\n        $builder->add('name');\n    }\n\n    public function configureOptions(OptionsResolver $resolver): void\n    {\n        $resolver->setDefaults([\n            'data_class' => Tag::class,\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Bundle Parameters (XML)\nDESCRIPTION: Example of configuring bundle parameters using XML format in Symfony services configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/bundles/best_practices.rst#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\"\n>\n    <parameters>\n        <parameter key=\"acme_blog.author.email\">fabien@example.com</parameter>\n    </parameters>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Configurable Mailer Service Implementation\nDESCRIPTION: Improved Mailer class implementation with constructor injection for transport configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/dependency_injection.rst#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nclass Mailer\n{\n    public function __construct(\n        private string $transport,\n    ) {\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Custom switch_user Parameter: Using X-Switch-User Header (XML)\nDESCRIPTION: Enables user impersonation for Symfony firewalls using the X-Switch-User HTTP header, set in the XML configuration. <switch-user parameter=\\\"X-Switch-User\\\"/> defines which header parameter to listen for. This should be added to config/packages/security.xml.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/impersonating_user.rst#2025-04-22_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/security.xml -->\\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\\n<srv:container xmlns=\\\"http://symfony.com/schema/dic/security\\\"\\n    xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n    xmlns:srv=\\\"http://symfony.com/schema/dic/services\\\"\\n    xsi:schemaLocation=\\\"http://symfony.com/schema/dic/services\\n        https://symfony.com/schema/dic/services/services-1.0.xsd\\n        http://symfony.com/schema/dic/security\\n        https://symfony.com/schema/dic/security/security-1.0.xsd\\\">\\n    <config>\\n        <!-- ... -->\\n        <firewall name=\\\"main\\\">\\n            <!-- ... -->\\n            <switch-user parameter=\\\"X-Switch-User\\\"/>\\n        </firewall>\\n    </config>\\n</srv:container>\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS Channel Requirement in XML\nDESCRIPTION: Sets up access control rule with HTTPS channel requirement using XML configuration format.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/access_control.rst#2025-04-22_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/security.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<srv:container xmlns=\"http://symfony.com/schema/dic/security\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:srv=\"http://symfony.com/schema/dic/services\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/security\n        https://symfony.com/schema/dic/security/security-1.0.xsd\">\n\n    <config>\n        <!-- ... -->\n        <rule path=\"^/cart/checkout\"\n            role=\"PUBLIC_ACCESS\"\n            requires-channel=\"https\"\n        />\n    </config>\n</srv:container>\n```\n\n----------------------------------------\n\nTITLE: Accessing Constraint Payload in PHP for Error Handling\nDESCRIPTION: This PHP snippet demonstrates how to retrieve the constraint that caused a validation failure and access its payload to determine the severity of the error. This can be used for custom error handling logic.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/validation/severity.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// a constraint validation failure, instance of\n// Symfony\\Component\\Validator\\ConstraintViolation\n$constraintViolation = ...;\n$constraint = $constraintViolation->getConstraint();\n$severity = $constraint->payload['severity'] ?? null;\n```\n\n----------------------------------------\n\nTITLE: Configuring ExpressionSyntax Constraint with PHP Attributes\nDESCRIPTION: Example showing how to use the ExpressionSyntax constraint with PHP attributes in an Order entity class to validate that expressions are syntactically valid.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/ExpressionSyntax.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Order.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Order\n{\n    #[Assert\\ExpressionSyntax]\n    protected string $promotion;\n\n    #[Assert\\ExpressionSyntax(\n        allowedVariables: ['user', 'shipping_centers'],\n    )]\n    protected string $shippingOptions;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Choice Constraint with PHP\nDESCRIPTION: Example of using the Choice constraint with PHP code to validate city and genre properties.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Choice.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/EntityAuthor.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Author\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint(\n            'city',\n            new Assert\\Choice(['New York', 'Berlin', 'Tokyo'])\n        );\n\n        $metadata->addPropertyConstraint('genre', new Assert\\Choice(\n            choices: ['fiction', 'non-fiction'],\n            message: 'Choose a valid genre.',\n        ));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a MIME Type Guesser Method in PHP for Symfony\nDESCRIPTION: This code snippet demonstrates the implementation of a guessMimeType method within a MIME type guesser class. The method takes a file path as input and is supposed to return a valid MIME type string or null if the type cannot be determined.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/mime.rst#2025-04-22_snippet_14\n\nLANGUAGE: php\nCODE:\n```\npublic function guessMimeType(string $path): ?string\n{\n    // inspect the contents of the file stored in $path to guess its\n    // type and return a valid MIME type ... or null if unknown\n\n    return '...';\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Method Calls (Setter Injection) in PHP\nDESCRIPTION: Demonstrates how to configure method calls on a service definition, typically used for setter injection. It shows how to retrieve existing calls (`getMethodCalls`), add a new call (`addMethodCall`), specify arguments (like service references), configure immutable setters (where the method returns a new instance), and replace all existing calls (`setMethodCalls`).\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/definitions.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// gets all configured method calls\n$methodCalls = $definition->getMethodCalls();\n\n// configures a new method call\n$definition->addMethodCall('setLogger', [new Reference('logger')]);\n\n// configures an immutable-setter\n$definition->addMethodCall('withLogger', [new Reference('logger')], true);\n\n// replaces all previously configured method calls with the passed array\n$definition->setMethodCalls($methodCalls);\n```\n\n----------------------------------------\n\nTITLE: Starting Progress Bar at Specific Point\nDESCRIPTION: Demonstrates how to initialize a progress bar at a specific completion point, useful for resuming long-standing tasks.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/helpers/progressbar.rst#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Console\\Helper\\ProgressBar;\n\n// creates a new progress bar (100 units)\n$progressBar = new ProgressBar($output, 100);\n\n// displays the progress bar starting at 25 completed units\n$progressBar->start(null, 25);\n```\n\n----------------------------------------\n\nTITLE: Setting Trusted Hosts in Symfony Front Controller\nDESCRIPTION: PHP code snippet that sets trusted hosts directly in the front controller (index.php). This approach allows requests from any subdomain of example.com and example.org.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_83\n\nLANGUAGE: php\nCODE:\n```\n// public/index.php\nRequest::setTrustedHosts(['^(.+\\.)?example\\.com$', '^(.+\\.)?example\\.org$']);\n```\n\n----------------------------------------\n\nTITLE: Custom Event Class for Post-Method Execution\nDESCRIPTION: Definition of an AfterSendMailEvent class that holds the return value of a method, allowing event listeners to access and modify the return value after the method has executed.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/event_dispatcher.rst#2025-04-22_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n// src/Event/AfterSendMailEvent.php\nnamespace App\\Event;\n\nuse Symfony\\Contracts\\EventDispatcher\\Event;\n\nclass AfterSendMailEvent extends Event\n{\n    public function __construct(\n        private mixed $returnValue,\n    ) {\n    }\n\n    public function getReturnValue(): mixed\n    {\n        return $this->returnValue;\n    }\n\n    public function setReturnValue(mixed $returnValue): void\n    {\n        $this->returnValue = $returnValue;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Length Constraint with PHP\nDESCRIPTION: Demonstrates how to configure the Length constraint using PHP in a Symfony entity class. It uses the loadValidatorMetadata method to set minimum and maximum length requirements with custom error messages.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Length.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Participant.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Participant\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('firstName', new Assert\\Length(\n            min: 2,\n            max: 50,\n            minMessage: 'Your first name must be at least {{ limit }} characters long',\n            maxMessage: 'Your first name cannot be longer than {{ limit }} characters',\n        ));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Basic Table Style\nDESCRIPTION: Sets box-double style for console table output\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/helpers/table.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$table->setStyle('box-double');\n$table->render();\n```\n\n----------------------------------------\n\nTITLE: Configuring Firewall Logout Paths in Symfony YAML\nDESCRIPTION: This YAML snippet from `config/packages/security.yaml` shows how to configure the `logout` path for different security firewalls ('main' and 'othername'). The `path` specified here is used by the `logout_path` and `logout_url` Twig functions to generate the correct logout URLs.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\nsecurity:\n    # ...\n\n    firewalls:\n        main:\n            # ...\n            logout:\n                path: '/logout'\n        othername:\n            # ...\n            logout:\n                path: '/other/logout'\n```\n\n----------------------------------------\n\nTITLE: Parsing and Dumping Custom Tags in YAML with PHP\nDESCRIPTION: Demonstrates how to work with custom YAML tags using the Symfony YAML component. Shows parsing custom tags with the PARSE_CUSTOM_TAGS flag and dumping TaggedValue objects.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/yaml.rst#2025-04-22_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n$data = \"!my_tag { foo: bar }\";\n$parsed = Yaml::parse($data, Yaml::PARSE_CUSTOM_TAGS);\n// $parsed = Symfony\\Component\\Yaml\\Tag\\TaggedValue('my_tag', ['foo' => 'bar']);\n$tagName = $parsed->getTag();    // $tagName = 'my_tag'\n$tagValue = $parsed->getValue(); // $tagValue = ['foo' => 'bar']\n\nuse Symfony\\Component\\Yaml\\Tag\\TaggedValue;\n\n$data = new TaggedValue('my_tag', ['foo' => 'bar']);\n$dumped = Yaml::dump($data);\n// $dumped = '!my_tag { foo: bar }'\n```\n\n----------------------------------------\n\nTITLE: Configuring default_protocol Option for UrlType in Symfony\nDESCRIPTION: This snippet demonstrates how to set the default_protocol option for the UrlType field. Setting it to null renders an input type=\"url\", while other values use input type=\"text\" and prepend the protocol if missing.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/url.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndefault_protocol: null\n```\n\n----------------------------------------\n\nTITLE: Resulting Configuration of Collection Constraint with Nested Groups in PHP\nDESCRIPTION: This snippet shows the resulting configuration when using nested constraints with validation groups in a Collection constraint. It illustrates how the groups are propagated to the Required constraints and the Collection itself.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Collection.rst#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$constraint = new Assert\\Collection(\n    fields: [\n        'name' => new Assert\\Required(\n            constraints: new Assert\\NotBlank(groups: ['basic']),\n            groups: ['basic', 'strict'],\n        ),\n        'email' => new Assert\\Required(\n            constraints: new Assert\\NotBlank(groups: ['contact']),\n            groups: ['basic', 'strict'],\n        ),\n    ],\n    groups: ['basic', 'strict'],\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom IDE Integration in Symfony (YAML)\nDESCRIPTION: Sets up a custom IDE integration by specifying a URL template for opening files. The template uses %f for file path and %l for line number placeholders.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_50\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/framework.yaml\nframework:\n    ide: 'myide://open?url=file://%%f&line=%%l'\n```\n\n----------------------------------------\n\nTITLE: Accessing Process PID in Symfony\nDESCRIPTION: This example demonstrates how to access the PID (Process ID) of a running process using the getPid method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/process.rst#2025-04-22_snippet_23\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Process\\Process;\n\n$process = new Process(['/usr/bin/php', 'worker.php']);\n$process->start();\n\n$pid = $process->getPid();\n```\n\n----------------------------------------\n\nTITLE: Configuring Remember Me Signature Properties in PHP\nDESCRIPTION: Sets up the signature properties for remember me tokens using PHP configuration. This example configures the main firewall to include password and updatedAt properties in the token signature.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/remember_me.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/security.php\nuse Symfony\\Config\\SecurityConfig;\n\nreturn static function (SecurityConfig $security): void {\n    // ...\n    $security->firewall('main')\n        // ...\n        ->rememberMe()\n            // ...\n            ->signatureProperties(['password', 'updatedAt'])\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Using Request in MapEntity Expression\nDESCRIPTION: Shows how to access the request object within a MapEntity expression to incorporate query parameters in the database query.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine.rst#2025-04-22_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n#[Route('/product/{id}/comments')]\npublic function show(\n    Product $product,\n    #[MapEntity(expr: 'repository.findOneBy({\"product\": id}, {\"createdAt\": request.query.get(\"sort\", \"DESC\")})')]\n    Comment $comment\n): Response\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Customer Entity Class in PHP\nDESCRIPTION: This snippet demonstrates the structure of a Customer entity class with properties for personal and location information.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/inherit_data_option.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Customer.php\nnamespace App\\Entity;\n\nclass Customer\n{\n    private string $firstName;\n    private string $lastName;\n\n    private string  $address;\n    private string $zipcode;\n    private string $city;\n    private string $country;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack Dev Server to Allow All Hosts in Encore\nDESCRIPTION: Sets the allowedHosts option to 'all' in the Encore dev server configuration to fix the 'Invalid Host header' issue when accessing the dev server from a virtual machine.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/virtual-machine.rst#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// webpack.config.js\n// ...\n\nEncore\n    // ...\n\n    .configureDevServerOptions(options => {\n        options.allowedHosts = 'all';\n    })\n```\n\n----------------------------------------\n\nTITLE: Implementing Callback Validation with PHP Attributes\nDESCRIPTION: Shows how to define a callback validator using PHP attributes in a Symfony entity class. The callback method receives an ExecutionContext for adding validation violations.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Callback.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Author.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Context\\ExecutionContextInterface;\n\nclass Author\n{\n    #[Assert\\Callback]\n    public function validate(ExecutionContextInterface $context, mixed $payload): void\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using controller() with render() in Twig\nDESCRIPTION: This example demonstrates creating a `ControllerReference` using the `controller()` function for 'App\\\\Controller\\\\BlogController:latest' with a `max` attribute set to 3, and then immediately passing this reference to the `render()` function to embed the controller's output.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#2025-04-22_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{{ render(controller('App\\\\Controller\\\\BlogController:latest', {max: 3})) }}\n{# output: the content returned by the controller method; e.g. a rendered Twig template #}\n```\n\n----------------------------------------\n\nTITLE: Accessing Default Country Choices in PHP\nDESCRIPTION: This snippet shows how to access the default list of countries used by the CountryType field. It uses the Symfony\\Component\\Intl\\Countries::getNames() method to retrieve the country names.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/country.rst#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nSymfony\\Component\\Intl\\Countries::getNames()\n```\n\n----------------------------------------\n\nTITLE: Enabling Auto Mapping with PHP Attributes in Symfony\nDESCRIPTION: Example of using the EnableAutoMapping constraint with PHP attributes to enable Doctrine's auto mapping for validation. This code shows a BookCollection class with properties that will be validated according to Doctrine's metadata.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/EnableAutoMapping.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Model/BookCollection.php\nnamespace App\\Model;\n\nuse App\\Model\\Author;\nuse App\\Model\\BookMetadata;\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\n#[Assert\\EnableAutoMapping]\nclass BookCollection\n{\n    #[ORM\\Column(nullable: false)]\n    protected string $name = '';\n\n    #[ORM\\ManyToOne(targetEntity: Author::class)]\n    public Author $author;\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Property Constructor Initializability (Symfony, PHP)\nDESCRIPTION: Explains how to check whether a property can be set through the class constructor using isInitializable. Returns boolean true if a constructor argument corresponds to the property name. Available if the extractor supports initializability extraction.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/property_info.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$propertyInfo->isInitializable($class, $property);\n// Example Result: bool(true)\n```\n\n----------------------------------------\n\nTITLE: Implementing GroupSequenceProviderInterface in User Entity\nDESCRIPTION: This PHP snippet demonstrates how to implement the GroupSequenceProviderInterface in a User entity to dynamically determine validation groups. It includes examples of returning simple and nested arrays of groups.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/validation/sequence_provider.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/User.php\nnamespace App\\Entity;\n\n// ...\nuse Symfony\\Component\\Validator\\GroupSequenceProviderInterface;\n\nclass User implements GroupSequenceProviderInterface\n{\n    // ...\n\n    public function getGroupSequence(): array|GroupSequence\n    {\n        // when returning a simple array, if there's a violation in any group\n        // the rest of the groups are not validated. E.g. if 'User' fails,\n        // 'Premium' and 'Api' are not validated:\n        return ['User', 'Premium', 'Api'];\n\n        // when returning a nested array, all the groups included in each array\n        // are validated. E.g. if 'User' fails, 'Premium' is also validated\n        // (and you'll get its violations too) but 'Api' won't be validated:\n        return [['User', 'Premium'], 'Api'];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Bootstrap with Turbo Drive\nDESCRIPTION: Code example showing how to initialize Bootstrap components when using Turbo Drive, by wrapping initialization code in a turbo:load event listener to ensure JavaScript functionality works after page changes.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/bootstrap.rst#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// app.js\n\n// this waits for Turbo Drive to load\ndocument.addEventListener('turbo:load', function (e) {\n    // this enables bootstrap tooltips globally\n    let tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"tooltip\"]'))\n    let tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {\n        return new Tooltip(tooltipTriggerEl)\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to Factory Methods - Symfony YAML - yaml\nDESCRIPTION: Demonstrates how to configure a service in YAML to pass arguments to a specified factory method. The factory option is defined as an array, specifying both the factory service and the method, with dependencies (e.g., 'templating') listed in arguments. This requires the referenced factory and arguments to be defined.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/factories.rst#2025-04-22_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nservices:\n    # ...\n\n    App\\Email\\NewsletterManager:\n        factory:   ['@App\\Email\\NewsletterManagerFactory', createNewsletterManager]\n        arguments: ['@templating']\n\n```\n\n----------------------------------------\n\nTITLE: Customizing getProjectDir() Method in Symfony Kernel\nDESCRIPTION: Example of overriding the getProjectDir() method in a Symfony Kernel class to customize the project directory path. The method returns the parent directory of the current file using PHP's dirname() function.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/kernel.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// src/Kernel.php\nnamespace App;\n\nuse Symfony\\Component\\HttpKernel\\Kernel as BaseKernel;\n// ...\n\nclass Kernel extends BaseKernel\n{\n    // ...\n\n    public function getProjectDir(): string\n    {\n        // when defining a hardcoded string, don't add the trailing slash to the path\n        // e.g. '/home/user/my_project', '/app', '/var/www/example.com'\n        return \\dirname(__DIR__);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Block Name for Form Fields in PHP\nDESCRIPTION: Example of setting a custom block_name option when adding a field to a Symfony form. This option changes the fragment name used when rendering the field in Twig templates.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/form_themes.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\TextType;\nuse Symfony\\Component\\Form\\FormBuilderInterface;\n\npublic function buildForm(FormBuilderInterface $builder, array $options): void\n{\n    // ...\n\n    $builder->add('name', TextType::class, [\n        'block_name' => 'custom_name',\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Blog Layout Template with Twig Inheritance\nDESCRIPTION: Example of a section-specific layout template that extends the base template\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/templates.rst#2025-04-22_snippet_45\n\nLANGUAGE: html+twig\nCODE:\n```\n{# templates/blog/layout.html.twig #}\n{% extends 'base.html.twig' %}\n\n{% block content %}\n    <h1>Blog</h1>\n\n    {% block page_contents %}{% endblock %}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Setting Content-Disposition Header in PHP\nDESCRIPTION: This snippet demonstrates how to set the Content-Disposition header for a file download response in Symfony.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#2025-04-22_snippet_29\n\nLANGUAGE: PHP\nCODE:\n```\n$response->headers->set('Content-Disposition', $disposition);\n```\n\n----------------------------------------\n\nTITLE: Configuring Relative Dates with PHP Code\nDESCRIPTION: Example showing how to use PHP code to configure the GreaterThanOrEqual constraint with a relative time expression to validate that a DateTime property is at least 5 hours in the future.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/GreaterThanOrEqual.rst#2025-04-22_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Order.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Order\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('deliveryDate', new Assert\\GreaterThanOrEqual('+5 hours'));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: String Append and Prepend Methods in Symfony\nDESCRIPTION: Demonstrates methods for adding content to the beginning or end of strings, including prepend(), append(), and ensure methods for consistent string prefixes and suffixes.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/string.rst#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nu('world')->prepend('hello');      // 'helloworld'\nu('world')->prepend('hello', ' '); // 'hello world'\n\nu('hello')->append('world');      // 'helloworld'\nu('hello')->append(' ', 'world'); // 'hello world'\n\nu('Name')->ensureStart('get');       // 'getName'\nu('getName')->ensureStart('get');    // 'getName'\nu('getgetName')->ensureStart('get'); // 'getName'\n\nu('User')->ensureEnd('Controller');           // 'UserController'\nu('UserController')->ensureEnd('Controller'); // 'UserController'\nu('UserControllerController')->ensureEnd('Controller'); // 'UserController'\n\nu('hello world')->before('world');                  // 'hello '\nu('hello world')->before('o');                      // 'hell'\nu('hello world')->before('o', includeNeedle: true); // 'hello'\n\nu('hello world')->after('hello');                  // ' world'\nu('hello world')->after('o');                      // ' world'\nu('hello world')->after('o', includeNeedle: true); // 'o world'\n\nu('hello world')->beforeLast('o');                      // 'hello w'\nu('hello world')->beforeLast('o', includeNeedle: true); // 'hello wo'\n\nu('hello world')->afterLast('o');                      // 'rld'\nu('hello world')->afterLast('o', includeNeedle: true); // 'orld'\n```\n\n----------------------------------------\n\nTITLE: Using getMetadata() Method for Workflow Metadata\nDESCRIPTION: This PHP snippet shows how to use the getMetadata() method to retrieve workflow, place, and transition metadata in a more concise way.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/workflow.rst#2025-04-22_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n// get \"workflow metadata\" passing the metadata key as argument\n$title = $workflow->getMetadataStore()->getMetadata('title');\n\n// get \"place metadata\" passing the metadata key as the first argument and the place name as the second argument\n$maxNumOfWords = $workflow->getMetadataStore()->getMetadata('max_num_of_words', 'draft');\n\n// get \"transition metadata\" passing the metadata key as the first argument and a Transition object as the second argument\n$priority = $workflow->getMetadataStore()->getMetadata('priority', $aTransition);\n```\n\n----------------------------------------\n\nTITLE: Setting Cache-Control Header with Cache Attribute in PHP\nDESCRIPTION: Demonstrates how to use the Cache attribute to set the Cache-Control header for public caching with a max age of 600 seconds.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/http_cache/expiration.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\HttpKernel\\Attribute\\Cache;\n// ...\n\n#[Cache(public: true, maxage: 600)]\npublic function index(): Response\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables in PHPUnit XML for Deprecation Helper\nDESCRIPTION: This XML snippet shows how to configure environment variables within a PHPUnit xml file to customize the Symfony DeprecationErrorHandler. By setting the SYMFONY_DEPRECATIONS_HELPER variable (as well as others), tests can be made to fail based on matching deprecation messages or exceedance of deprecation thresholds. The <server> and <env> settings should be placed inside the <php> section of your phpunit.xml or phpunit.xml.dist files. This requires Symfony PHPUnit Bridge to be installed.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/phpunit_bridge.rst#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/6.0/phpunit.xsd\"\n>\n\n    <!-- ... -->\n\n    <php>\n        <server name=\"KERNEL_CLASS\" value=\"App\\Kernel\"/>\n        <env name=\"SYMFONY_DEPRECATIONS_HELPER\" value=\"/foobar/\"/>\n    </php>\n</phpunit>\n```\n\n----------------------------------------\n\nTITLE: Using LessThan Constraint with Fixed Timezone in PHP Attributes\nDESCRIPTION: Example of applying the LessThan constraint with a fixed timezone using PHP attributes to validate date properties.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/LessThan.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Person.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Person\n{\n    #[Assert\\LessThan('today UTC')]\n    protected \\DateTimeInterface $dateOfBirth;\n}\n```\n\n----------------------------------------\n\nTITLE: String Reversal Operations in PHP\nDESCRIPTION: Demonstrates string reversal functionality supporting both ASCII and Unicode characters using the u() helper function.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/string.rst#2025-04-22_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nu('foo bar')->reverse();  // 'rab oof'\nu('さよなら')->reverse(); // 'らなよさ'\n```\n\n----------------------------------------\n\nTITLE: Defining Task Entity Class in PHP\nDESCRIPTION: Creates a Task entity class with a description field and a collection of Tags. Includes getter and setter methods for the properties.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/form_collections.rst#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n// src/Entity/Task.php\nnamespace App\\Entity;\n\nuse Doctrine\\Common\\Collections\\Collection;\n\nclass Task\n{\n    protected string $description;\n    protected Collection $tags;\n\n    public function __construct()\n    {\n        $this->tags = new ArrayCollection();\n    }\n\n    public function getDescription(): string\n    {\n        return $this->description;\n    }\n\n    public function setDescription(string $description): void\n    {\n        $this->description = $description;\n    }\n\n    public function getTags(): Collection\n    {\n        return $this->tags;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Custom Bundle in Symfony\nDESCRIPTION: Configuration code showing how to enable a custom bundle in the bundles.php file for all environments.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/bundles.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// config/bundles.php\nreturn [\n    // ...\n    Acme\\BlogBundle\\AcmeBlogBundle::class => ['all' => true],\n];\n```\n\n----------------------------------------\n\nTITLE: Initializing PHP Files Cache Adapter\nDESCRIPTION: Shows how to instantiate and configure the PhpFilesAdapter with optional parameters for namespace, default lifetime, and cache directory path.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/cache/adapters/php_files_adapter.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Cache\\Adapter\\PhpFilesAdapter;\n\n$cache = new PhpFilesAdapter(\n\n    // a string used as the subdirectory of the root cache directory, where cache\n    // items will be stored\n    $namespace = '',\n\n    // the default lifetime (in seconds) for cache items that do not define their\n    // own lifetime, with a value 0 causing items to be stored indefinitely (i.e.\n    // until the files are deleted)\n    $defaultLifetime = 0,\n\n    // the main cache directory (the application needs read-write permissions on it)\n    // if none is specified, a directory is created inside the system temporary directory\n    $directory = null\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring container.no_preload Tag in YAML\nDESCRIPTION: YAML configuration example for using the container.no_preload tag to exclude a service class from PHP preloading.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/dic_tags.rst#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n    App\\SomeNamespace\\SomeService:\n        tags: ['container.no_preload']\n```\n\n----------------------------------------\n\nTITLE: Example Git Commands for Specific Pull Request\nDESCRIPTION: Concrete example of Git commands to fetch and checkout pull request #15723 for local testing.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/contributing/community/reviews.rst#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ git fetch origin pull/15723/head:pr15723\n$ git checkout pr15723\n```\n\n----------------------------------------\n\nTITLE: Defining Json Constraint in XML for Symfony Validation\nDESCRIPTION: This XML configuration applies the Json constraint to the 'chapters' property of the Book entity in Symfony. It includes a custom error message for invalid JSON data.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Json.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\Book\">\n        <property name=\"chapters\">\n            <constraint name=\"Json\">\n                <option name=\"message\">You've entered an invalid Json.</option>\n            </constraint>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Default Expanded YAML Array Representation\nDESCRIPTION: Example of the default YAML output generated by `Yaml::dump`. Nested arrays are represented in an expanded, multi-line format with indentation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/yaml.rst#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nfoo: bar\nbar:\n    foo: bar\n    bar: baz\n```\n\n----------------------------------------\n\nTITLE: Configuring Enabled Locales in Symfony Framework (XML)\nDESCRIPTION: This XML snippet configures enabled locales (English and Spanish) in Symfony by defining '<enabled-locale>' elements within the framework configuration. Each enabled locale tag represents a supported localization for the application. The configuration must be placed within a valid Symfony DI container XML structure and requires the Symfony framework bundle.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_28\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/translation.xml -->\\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\\n<container xmlns=\\\"http://symfony.com/schema/dic/services\\\"\\n    xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n    xmlns:framework=\\\"http://symfony.com/schema/dic/symfony\\\"\\n    xsi:schemaLocation=\\\"http://symfony.com/schema/dic/services\\n        https://symfony.com/schema/dic/services/services-1.0.xsd\\n        http://symfony.com/schema/dic/symfony https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\\\">\\n\\n    <framework:config>\\n        <enabled-locale>en</enabled-locale>\\n        <enabled-locale>es</enabled-locale>\\n    </framework:config>\\n</container>\n```\n\n----------------------------------------\n\nTITLE: Implementing NoSuspiciousCharacters Constraint with PHP Attributes\nDESCRIPTION: Example of applying the NoSuspiciousCharacters constraint to a username property using PHP attributes in a User entity class.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/NoSuspiciousCharacters.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/User.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass User\n{\n    #[Assert\\NoSuspiciousCharacters]\n    private string $username;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating CompanyType Form Class in Symfony\nDESCRIPTION: This code defines a CompanyType form class that adds fields for the Company entity's name and website.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/inherit_data_option.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// src/Form/Type/CompanyType.php\nnamespace App\\Form\\Type;\n\nuse Symfony\\Component\\Form\\AbstractType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\TextType;\nuse Symfony\\Component\\Form\\FormBuilderInterface;\n\nclass CompanyType extends AbstractType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options): void\n    {\n        $builder\n            ->add('name', TextType::class)\n            ->add('website', TextType::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sendmail Command Transport Option\nDESCRIPTION: Example of specifying the command option for the sendmail transport, which allows customizing the command executed by the sendmail binary.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$dsn = 'sendmail://default?command=/usr/sbin/sendmail%20-oi%20-t'\n```\n\n----------------------------------------\n\nTITLE: Configuring Valid URL Protocols with YAML in Symfony\nDESCRIPTION: Example of specifying custom valid URL protocols using YAML configuration, adding FTP to the list of acceptable protocols.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Url.rst#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Author:\n    properties:\n        bioUrl:\n            - Url: { protocols: [http, https, ftp] }\n```\n\n----------------------------------------\n\nTITLE: Configuring Validation Mapping Paths in YAML Format\nDESCRIPTION: YAML configuration for defining validation mapping paths. Specifies directories where Symfony will look for additional validation configuration files.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_87\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/framework.yaml\nframework:\n    validation:\n        mapping:\n            paths:\n                - \"%kernel.project_dir%/config/validation/\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Round-Robin Transport with Retry Period in ENV File\nDESCRIPTION: Example of setting up a round-robin transport with a custom retry period of 15 seconds instead of the default 60 seconds.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_12\n\nLANGUAGE: env\nCODE:\n```\nMAILER_DSN=\"roundrobin(postmark+api://ID@default sendgrid+smtp://KEY@default)?retry_period=15\"\n```\n\n----------------------------------------\n\nTITLE: Checking if Event Propagation Was Stopped in PHP\nDESCRIPTION: Illustrates how to check if an event's propagation has been stopped after dispatching it, using the `isPropagationStopped()` method on the event object. This allows conditional logic based on whether a listener invoked `stopPropagation()` during the event dispatch process.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/event_dispatcher.rst#2025-04-22_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n// ...\n$dispatcher->dispatch($event, 'foo.event');\nif ($event->isPropagationStopped()) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony Finder Component via Composer\nDESCRIPTION: Installs the Symfony Finder component using the Composer dependency manager. This command should be run in the terminal within a PHP project.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/finder.rst#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require symfony/finder\n```\n\n----------------------------------------\n\nTITLE: Basic ESI Tag Syntax in HTML\nDESCRIPTION: Example of an ESI include tag embedded in an HTML document. This shows the fundamental syntax for including external content via ESI, requiring a fully-qualified URL in the src attribute.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/http_cache/esi.rst#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n    <body>\n        <!-- ... some content -->\n\n        <!-- Embed the content of another page here -->\n        <esi:include src=\"http://...\"/>\n\n        <!-- ... more content -->\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Basic HTML DOM Traversal with DomCrawler\nDESCRIPTION: Demonstrates creating a Crawler instance and iterating through DOM elements.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/dom_crawler.rst#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\DomCrawler\\Crawler;\n\n$html = <<<'HTML'\n<!DOCTYPE html>\n<html>\n    <body>\n        <p class=\"message\">Hello World!</p>\n        <p>Hello Crawler!</p>\n    </body>\n</html>\nHTML;\n\n$crawler = new Crawler($html);\n\nforeach ($crawler as $domElement) {\n    var_dump($domElement->nodeName);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Symfony Service Container with Custom Bundle (XML)\nDESCRIPTION: This XML snippet defines the structure for configuring services within the Symfony framework, specifically integrating a custom bundle named 'acme_hello'. It requires the Symfony Dependency Injection Container and the custom acme_hello bundle, specifying their respective XML namespaces and schema locations. The main elements include the <container> as the root, with <acme-hello:config> for bundle-specific settings. Inputs are XML configuration files, and outputs impact Symfony's runtime service configuration. Ensure that referenced XSD files are accessible and the namespace prefixes match registered bundles.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/bundles/configuration.rst#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/acme_hello.xml -->\\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\\n<container xmlns=\\\"http://symfony.com/schema/dic/services\\\"\\n    xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n    xmlns:acme-hello=\\\"http://acme_company.com/schema/dic/hello\\\"\\n    xsi:schemaLocation=\\\"http://symfony.com/schema/dic/services\\n        https://symfony.com/schema/dic/services/services-1.0.xsd\\n        http://acme_company.com/schema/dic/hello\\n        https://acme_company.com/schema/dic/hello/hello-1.0.xsd\\\"\\n>\\n    <acme-hello:config>\\n        <!-- ... -->\\n    </acme-hello:config>\\n\\n    <!-- ... -->\\n</container>\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Wither Method Call (Returns Clone) in PHP\nDESCRIPTION: This PHP configuration snippet demonstrates configuring a call to a wither method. It uses `addMethodCall()` on the service definition, passing the method name (`withLogger`), arguments (a reference to the `logger` service), and `true` as the third parameter to indicate that the method returns a new instance.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/calls.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\nuse App\\Service\\MessageGenerator;\nuse Symfony\\Component\\DependencyInjection\\Reference;\n\n$container->register(MessageGenerator::class)\n    ->addMethodCall('withLogger', [new Reference('logger')], true);\n```\n\n----------------------------------------\n\nTITLE: Initial Goodbye Page Implementation\nDESCRIPTION: Basic PHP script implementing a 'Goodbye' page using Symfony's HttpFoundation components\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/create_framework/front_controller.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nrequire_once __DIR__.'/vendor/autoload.php';\n\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\n$request = Request::createFromGlobals();\n\n$response = new Response('Goodbye!');\n$response->send();\n```\n\n----------------------------------------\n\nTITLE: Configuring NotEqualTo Constraints in YAML\nDESCRIPTION: This snippet shows how to configure NotEqualTo constraints using YAML. It applies the constraints to the firstName and age properties of the Person entity.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/NotEqualTo.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Person:\n    properties:\n        firstName:\n            - NotEqualTo: Mary\n        age:\n            - NotEqualTo:\n                value: 15\n```\n\n----------------------------------------\n\nTITLE: Service Decoration in PHP Configuration\nDESCRIPTION: Example of implementing the Decorator pattern in PHP configuration. The 'decorate()' method is used to override a service while keeping the original service available as '.inner'.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/service_decoration.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nuse App\\DecoratingMailer;\nuse App\\Mailer;\n\nreturn function(ContainerConfigurator $container): void {\n    $services = $container->services();\n\n    $services->set(Mailer::class);\n\n    $services->set(DecoratingMailer::class)\n        // overrides the App\\Mailer service\n        // but that service is still available as \".inner\"\n        ->decorate(Mailer::class);\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring AtLeastOneOf Constraint in YAML\nDESCRIPTION: Shows how to configure the AtLeastOneOf validation constraints in YAML format for password and grades properties with the same validation rules.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/AtLeastOneOf.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Student:\n    properties:\n        password:\n            - AtLeastOneOf:\n                - Regex: '/#/'\n                - Length:\n                    min: 10\n        grades:\n            - AtLeastOneOf:\n                - Count:\n                    min: 3\n                - All:\n                    - GreaterThanOrEqual: 5\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Password Strength Estimator in XML\nDESCRIPTION: Shows how to configure the PasswordStrengthValidator service to use a custom estimator using XML.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/PasswordStrength.rst#2025-04-22_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"custom_password_strength_estimator\" class=\"App\\Validator\\CustomPasswordStrengthEstimator\"/>\n\n        <service id=\"Symfony\\Component\\Validator\\Constraints\\PasswordStrengthValidator\">\n            <argument type=\"closure\" id=\"custom_password_strength_estimator\"/>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Compiling Assets with AssetMapper in Symfony\nDESCRIPTION: This terminal command compiles and versions assets using AssetMapper, preparing them for deployment in a Symfony application.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/asset_mapper.rst#2025-04-22_snippet_33\n\nLANGUAGE: terminal\nCODE:\n```\n$ php bin/console asset-map:compile\n```\n\n----------------------------------------\n\nTITLE: Defining a PHP Enumeration for YAML Parsing\nDESCRIPTION: Defines a sample PHP backed enum (`FooEnum`) which is used in the subsequent example demonstrating how to parse enums from YAML.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/yaml.rst#2025-04-22_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nenum FooEnum: string\n{\n    case Foo = 'foo';\n    case Bar = 'bar';\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Twig Debug Mode Based on Kernel Debug (XML)\nDESCRIPTION: This XML configuration snippet shows the equivalent of the YAML example for setting Twig's debug mode. It links the `debug` attribute within the `twig:config` element to the value of the `kernel.debug` container parameter.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/front_controllers_and_kernel.rst#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:twig=\"http://symfony.com/schema/dic/twig\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/twig\n        https://symfony.com/schema/dic/twig/twig-1.0.xsd\">\n\n    <twig:config debug=\"%kernel.debug%\"/>\n\n</container>\n```\n\n----------------------------------------\n\nTITLE: Configuring a Single Entry Point in Symfony (YAML)\nDESCRIPTION: This YAML configuration snippet demonstrates how to define an explicit authentication entry point for a Symfony firewall named 'main'. When multiple authentication methods (`form_login`, `custom_authenticators`) are available, the `entry_point: form_login` setting specifies that unauthenticated users trying to access resources protected by this firewall should be directed to the form login mechanism to start authentication. This is necessary when Symfony cannot automatically determine the correct entry point.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/entry_point.rst#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\nsecurity:\n\n    # ...\n    firewalls:\n        main:\n            # allow authentication using a form or a custom authenticator\n            form_login: ~\n            custom_authenticators:\n                - App\\Security\\SocialConnectAuthenticator\n\n            # configure the form authentication as the entry point for unauthenticated users\n            entry_point: form_login\n```\n\n----------------------------------------\n\nTITLE: Custom Error Handling in Process Helper\nDESCRIPTION: Demonstrates how to use custom error messages and callback functions for process execution monitoring.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/helpers/processhelper.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Process\\Process;\n\n$helper->run($output, $process, 'The process failed :(', function (string $type, string $data): void {\n    if (Process::ERR === $type) {\n        // ... do something with the stderr output\n    } else {\n        // ... do something with the stdout\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Controller Services in YAML\nDESCRIPTION: Basic YAML configuration for registering controllers as services in Symfony with controller.service_arguments tag.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/controller/service.rst#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\n\n# controllers are imported separately to make sure services can be injected\n# as action arguments even if you don't extend any base controller class\nApp\\Controller\\:\n   resource: '../src/Controller/'\n   tags: ['controller.service_arguments']\n```\n\n----------------------------------------\n\nTITLE: Importmap PHP Configuration\nDESCRIPTION: Example of the importmap.php configuration file that defines JavaScript entry points and dependencies.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/asset_mapper.rst#2025-04-22_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n// importmap.php\nreturn [\n    'app' => [\n        'path' => './assets/app.js',\n        'entrypoint' => true,\n    ],\n    'bootstrap' => [\n        'version' => '5.3.0',\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Setting up NotCompromisedPassword Validation with PHP Attributes\nDESCRIPTION: This example shows how to apply the NotCompromisedPassword constraint to a property using PHP attributes in a User entity class. The constraint ensures that the rawPassword property does not contain a compromised password from public data breaches.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/NotCompromisedPassword.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/User.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass User\n{\n    #[Assert\\NotCompromisedPassword]\n    protected string $rawPassword;\n}\n```\n\n----------------------------------------\n\nTITLE: Manipulating Form Field States in Symfony DomCrawler in PHP\nDESCRIPTION: Shows how to interact with form fields like text, checkboxes, and selects using subscript access. The Form object allows setting values, ticking checkboxes, and selecting options, mimicking browser-like interaction for comprehensive web form testing.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/dom_crawler.rst#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$form['registration[username]']->setValue('symfonyfan');\n\n// checks or unchecks a checkbox\n$form['registration[terms]']->tick();\n$form['registration[terms]']->untick();\n\n// selects an option\n$form['registration[birthday][year]']->select(1984);\n\n// selects many options from a \"multiple\" select\n```\n\n----------------------------------------\n\nTITLE: Registering Transport Factory in PHP Configuration\nDESCRIPTION: PHP configuration for registering the custom transport factory in the service container with the required 'messenger.transport_factory' tag to enable its discovery.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/messenger/custom-transport.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\nuse Your\\Transport\\YourTransportFactory;\n\n$container->register(YourTransportFactory::class)\n    ->setTags(['messenger.transport_factory']);\n```\n\n----------------------------------------\n\nTITLE: Configuring Output Paths in YAML\nDESCRIPTION: This YAML configuration defines the output paths for multiple Webpack builds in Symfony.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/advanced-config.rst#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/webpack_encore.yaml\nwebpack_encore:\n    output_path: '%kernel.project_dir%/public/default_build'\n    builds:\n        firstConfig: '%kernel.project_dir%/public/first_build'\n        secondConfig: '%kernel.project_dir%/public/second_build'\n```\n\n----------------------------------------\n\nTITLE: Compiling Assets for Production with Encore\nDESCRIPTION: Command to optimize and minify assets for production environment using Webpack Encore.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/faq.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ./node_modules/.bin/encore production\n```\n\n----------------------------------------\n\nTITLE: Switching Back to Original User with _exit (Text)\nDESCRIPTION: Shows how to end impersonation by supplying _switch_user=_exit as the query parameter in the route, restoring the original authenticated user. This is useful for reverting identity after debugging or assisting a user. Requires impersonation to be active.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/impersonating_user.rst#2025-04-22_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nhttp://example.com/somewhere?_switch_user=_exit\n```\n\n----------------------------------------\n\nTITLE: Implementing Bundle Class for Custom Path in PHP\nDESCRIPTION: Demonstrates how to override the getPath() method in a bundle class that extends Symfony\\Component\\HttpKernel\\Bundle\\Bundle to specify a custom path for the bundle.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/bundles/best_practices.rst#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\HttpKernel\\Bundle\\Bundle;\n\nclass AcmeBlogBundle extends Bundle\n{\n    public function getPath(): string\n    {\n        return \\dirname(__DIR__);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Slug Validation with PHP Class Metadata\nDESCRIPTION: Example showing how to apply the Slug constraint using PHP class metadata in a Symfony entity class.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Slug.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Author.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Author\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('slug', new Assert\\Slug());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Assets Base URLs (YAML)\nDESCRIPTION: Example of configuring base URLs for assets in the FrameworkBundle using YAML configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/framework.yaml\nframework:\n    # ...\n    assets:\n        base_urls:\n            - 'http://cdn.example.com/'\n```\n\n----------------------------------------\n\nTITLE: Configuring CssColor Validation with PHP Code\nDESCRIPTION: Example of programmatically defining CssColor validation constraints using PHP code with Symfony's ClassMetadata API.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/CssColor.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Bulb.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Bulb\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('defaultColor', new Assert\\CssColor());\n\n        $metadata->addPropertyConstraint('accentColor', new Assert\\CssColor(\n            formats: Assert\\CssColor::HEX_LONG,\n            message: 'The accent color must be a 6-character hexadecimal color.',\n        ));\n\n        $metadata->addPropertyConstraint('currentColor', new Assert\\CssColor(\n            formats: [Assert\\CssColor::BASIC_NAMED_COLORS, Assert\\CssColor::EXTENDED_NAMED_COLORS],\n            message: 'The color \"{{ value }}\" is not a valid CSS color name.',\n        ));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Form Fields and Uploading Files with Symfony DomCrawler in PHP\nDESCRIPTION: Demonstrates how to select multiple options in a form select field and simulate file uploads using Symfony's DomCrawler component.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/dom_crawler.rst#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$form['registration[interests]']->select(['symfony', 'cookies']);\n\n// fakes a file upload\n$form['registration[photo]']->upload('/path/to/lucas.jpg');\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Vendor Directory in Composer (Symfony, JSON)\nDESCRIPTION: This composer.json snippet demonstrates how to move the vendor directory using the 'vendor-dir' setting under the 'config' section. After updating, Composer will install dependencies at the specified vendor-dir path, which is useful for compatibility with virtualized environments.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/override_dir_structure.rst#2025-04-22_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \"config\": {\\n        \"bin-dir\": \"bin\",\\n        \"vendor-dir\": \"/some/dir/vendor\"\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Specific Files from Third-Party Packages in JavaScript\nDESCRIPTION: Example of importing specific modules from a package (highlight.js) and initializing the library with a specific language.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/asset_mapper.rst#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport hljs from 'highlight.js/lib/core';\nimport javascript from 'highlight.js/lib/languages/javascript';\n\nhljs.registerLanguage('javascript', javascript);\nhljs.highlightAll();\n```\n\n----------------------------------------\n\nTITLE: Configuring Loco Translation Provider DSN in Symfony\nDESCRIPTION: Shows how to set up the DSN (Data Source Name) for the Loco translation provider in the Symfony .env file.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/translation.rst#2025-04-22_snippet_20\n\nLANGUAGE: env\nCODE:\n```\n# .env\nLOCO_DSN=loco://API_KEY@default\n```\n\n----------------------------------------\n\nTITLE: Defining UUID Constraint in XML\nDESCRIPTION: Example of how to configure the UUID constraint for a property using XML in Symfony.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Uuid.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\File\">\n        <property name=\"identifier\">\n            <constraint name=\"Uuid\"/>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Triggering InvalidOptionsException with OptionsResolver in PHP\nDESCRIPTION: This PHP example shows that providing an incorrect type for an option (passing an integer `25` for the 'host' option, which expects a 'string') causes the `OptionsResolver` to throw an `InvalidOptionsException` during the `resolve` process, indicating the type mismatch.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/options_resolver.rst#2025-04-22_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$mailer = new Mailer([\n    'host' => 25,\n]);\n\n// InvalidOptionsException: The option \"host\" with value \"25\" is\n// expected to be of type \"string\", but is of type \"int\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a Service Using Closures in PHP\nDESCRIPTION: A PHP class that demonstrates how to inject and use a service closure. The service is lazy-loaded through a closure only when needed and accessed via a private getter method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/service_closures.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Service/MyService.php\nnamespace App\\Service;\n\nuse Symfony\\Component\\Mailer\\MailerInterface;\n\nclass MyService\n{\n    /**\n     * @param callable(): MailerInterface\n     */\n    public function __construct(\n        private \\Closure $mailer,\n    ) {\n    }\n\n    public function doSomething(): void\n    {\n        // ...\n\n        $this->getMailer()->send($email);\n    }\n\n    private function getMailer(): MailerInterface\n    {\n        return ($this->mailer)();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Date Comparison with LessThanOrEqual in XML\nDESCRIPTION: XML configuration for applying the LessThanOrEqual constraint to validate that a date of birth is not in the future.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/LessThanOrEqual.rst#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\Person\">\n        <property name=\"dateOfBirth\">\n            <constraint name=\"LessThanOrEqual\">today</constraint>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Customizing Allowed Role and Parameter for switch_user (PHP)\nDESCRIPTION: Adjusts the allowed role to 'ROLE_ADMIN' and the parameter for triggering impersonation to '_want_to_be_this_user' by chaining ->role() and ->parameter() methods in PHP config. This restricts impersonation to admins and changes the query/header parameter name.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/impersonating_user.rst#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/security.php\\nuse Symfony\\Config\\SecurityConfig;\\n\\nreturn static function (SecurityConfig $security): void {\\n    // ...\\n    $security->firewall('main')\\n        // ...\\n        ->switchUser()\\n            ->role('ROLE_ADMIN')\\n            ->parameter('_want_to_be_this_user')\\n    ;\\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Collector in PHP for Symfony\nDESCRIPTION: This snippet illustrates how to configure a data collector service using PHP in Symfony. It shows the use of the ContainerConfigurator to set up the service, tag it as a data collector, and specify optional parameters like template and priority.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/profiler.rst#2025-04-22_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nuse App\\DataCollector\\RequestCollector;\n\nreturn function(ContainerConfigurator $container): void {\n    $services = $container->services();\n\n    $services->set(RequestCollector::class)\n        ->tag('data_collector', [\n            'id' => RequestCollector::class,\n            // optional template (it has more priority than the value returned by getTemplate())\n            'template' => 'data_collector/template.html.twig',\n            // optional priority (positive or negative integer; default = 0)\n            // 'priority' => 300,\n        ]);\n};\n```\n\n----------------------------------------\n\nTITLE: Time-Sensitive Test with ClockMock\nDESCRIPTION: Example of a time-sensitive test using the ClockMock annotation to handle time-based assertions reliably.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/phpunit_bridge.rst#2025-04-22_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nuse PHPUnit\\Framework\\TestCase;\nuse Symfony\\Component\\Stopwatch\\Stopwatch;\n\n/**\n * @group time-sensitive\n */\nclass MyTest extends TestCase\n{\n    public function testSomething(): void\n    {\n        $stopwatch = new Stopwatch();\n\n        $stopwatch->start('event_name');\n        sleep(10);\n        $duration = $stopwatch->stop('event_name')->getDuration();\n\n        $this->assertEquals(10000, $duration);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example XPath Output from CssSelectorConverter\nDESCRIPTION: Displays the resulting XPath expression generated by the `CssSelectorConverter` for the input CSS selector 'div.item > h4 > a'. This XPath expression can be used with PHP tools like `DOMXPath` or `SimpleXMLElement` to find elements within an HTML or XML document.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/css_selector.rst#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ndescendant-or-self::div[@class and contains(concat(' ',normalize-space(@class), ' '), ' item ')]/h4/a\n```\n\n----------------------------------------\n\nTITLE: Template Attribute Controller in Symfony\nDESCRIPTION: Shows how to use the #[Template] attribute to specify template rendering in a controller method\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/templates.rst#2025-04-22_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Bridge\\Twig\\Attribute\\Template;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass ProductController extends AbstractController\n{\n    #[Template('product/index.html.twig')]\n    public function index(): array\n    {\n        return [\n            'category' => '...',\n            'promotions' => ['...', '...'],\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Placeholder for DateTimeType Field\nDESCRIPTION: Demonstrates how to set a placeholder for all select boxes or individual placeholders for year, month, day, hour, minute, and second fields.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/datetime.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\DateTimeType;\n\n$builder->add('startDateTime', DateTimeType::class, [\n    'placeholder' => 'Select a value',\n]);\n\n// Alternative: individual placeholders\n$builder->add('startDateTime', DateTimeType::class, [\n    'placeholder' => [\n        'year' => 'Year', 'month' => 'Month', 'day' => 'Day',\n        'hour' => 'Hour', 'minute' => 'Minute', 'second' => 'Second',\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Required Badges in Symfony Firewall (YAML)\nDESCRIPTION: This YAML configuration sets up required badges for a Symfony firewall. The required_badges option is used to specify a list of badge classes that must be present on the authenticated passport.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/security.rst#2025-04-22_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\nsecurity:\n    # ...\n\n    firewalls:\n        main:\n            # ...\n            required_badges: ['CsrfTokenBadge', 'My\\Badge']\n```\n\n----------------------------------------\n\nTITLE: Defining Ignored Deprecations for PHPUnit Bridge - Terminal - terminal\nDESCRIPTION: This snippet is a sample configuration file listing deprecation message patterns (as regular expressions) that should be ignored by the Symfony PHPUnit Bridge during testing. Lines beginning with a hash (#) are treated as comments. This file must be referenced using the 'ignoreFile' option in the SYMFONY_DEPRECATIONS_HELPER environment variable during test execution. Inputs are regular expression lines, and the output is filtered deprecation results.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/phpunit_bridge.rst#2025-04-22_snippet_8\n\nLANGUAGE: terminal\nCODE:\n```\n# This file contains patterns to be ignored while testing for use of\\n# deprecated code.\\n\\n%The \\\"Symfony\\\\Component\\\\Validator\\\\Context\\\\ExecutionContextInterface::.*\\(\\)\\\" method is considered internal Used by the validator engine\\\\. (Should not be called by user\\\\W+code\\\\. )?It may change without further notice\\\\. You should not extend it from \\\"[^\\\"]+\\\"\\\\.%\\n%The \\\"PHPUnit\\\\Framework\\\\TestCase::addWarning\\(\\)\\\" method is considered internal%\n```\n\n----------------------------------------\n\nTITLE: Configuring Notification Channel Policy - XML\nDESCRIPTION: This XML configuration snippet sets up the Notifier's channel policy in Symfony applications. It maps notification importance levels ('urgent', 'high', 'medium', 'low') to different delivery channels like SMS, Slack, email, and browser. Requires an XML-based configuration setup and symfony/notifier. Key parameters are the importance tags with channel values.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/notifier.rst#2025-04-22_snippet_28\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\n<container xmlns=\\\"http://symfony.com/schema/dic/services\\\"\n    xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\n    xmlns:framework=\\\"http://symfony.com/schema/dic/symfony\\\"\n    xsi:schemaLocation=\\\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony\n        https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\\\">\n\n    <framework:config>\n        <framework:notifier>\n            <!-- ... -->\n\n            <framework:channel-policy>\n                <!-- Use SMS, Slack and Email for urgent notifications -->\n                <framework:urgent>sms</framework:urgent>\n                <framework:urgent>chat/slack</framework:urgent>\n                <framework:urgent>email</framework:urgent>\n\n                <!-- Use Slack for highly important notifications -->\n                <framework:high>chat/slack</framework:high>\n\n                <!-- Use browser for medium and low notifications -->\n                <framework:medium>browser</framework:medium>\n                <framework:low>browser</framework:low>\n            </framework:channel-policy>\n        </framework:notifier>\n    </framework:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: File Formatting with Line Numbers\nDESCRIPTION: Demonstrates formatting file paths with line numbers and optional text\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#2025-04-22_snippet_58\n\nLANGUAGE: twig\nCODE:\n```\n{{ file|format_file(line, text = null) }}\n```\n\n----------------------------------------\n\nTITLE: Traversing DOM Elements with Symfony Crawler\nDESCRIPTION: Demonstrates how to traverse DOM elements by chaining multiple selector methods to find specific elements. This example finds the last input[type=submit] element and selects its immediate parent.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/testing/dom_crawler.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$newCrawler = $crawler->filter('input[type=submit]')\n    ->last()\n    ->parents()\n    ->first();\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony PSR-7 Bridge via Composer - Terminal\nDESCRIPTION: Installs the symfony/psr-http-message-bridge package using Composer to enable PSR-7 interoperability in Symfony applications. Requires Composer installed globally. Run this command from your project root to fetch and register the bridge component. No parameters or special configuration required.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/psr7.rst#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require symfony/psr-http-message-bridge\n```\n\n----------------------------------------\n\nTITLE: Working with Repositories Across Multiple Entity Managers\nDESCRIPTION: Example showing how to work with repositories from different entity managers in a Symfony controller.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine/multiple_entity_managers.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Controller;\n\nuse AcmeStoreBundle\\Entity\\Customer;\nuse AcmeStoreBundle\\Entity\\Product;\nuse Doctrine\\Persistence\\ManagerRegistry;\n\nclass UserController extends AbstractController\n{\n    public function index(ManagerRegistry $doctrine): Response\n    {\n        // Retrieves a repository managed by the \"default\" entity manager\n        $products = $doctrine->getRepository(Product::class)->findAll();\n\n        // Explicit way to deal with the \"default\" entity manager\n        $products = $doctrine->getRepository(Product::class, 'default')->findAll();\n\n        // Retrieves a repository managed by the \"customer\" entity manager\n        $customers = $doctrine->getRepository(Customer::class, 'customer')->findAll();\n\n        // ...\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Runtime Class in composer.json\nDESCRIPTION: This JSON snippet shows how to specify a custom runtime class (e.g., `GenericRuntime`) within the `extra.runtime` section of the project's `composer.json` file. This overrides the default `SymfonyRuntime`.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/runtime.rst#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"require\": {\n        \"...\": \"...\"\n    },\n    \"extra\": {\n        \"runtime\": {\n            \"class\": \"Symfony\\\\Component\\\\Runtime\\\\GenericRuntime\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Firewall Method Restriction - Symfony XML\nDESCRIPTION: Defines a firewall in XML to activate only for specific HTTP methods (GET, POST) via the \"methods\" attribute, using a comma-separated string. To be used with \"config/packages/security.xml\", requiring appropriate XML namespaces and access to Symfony security schemas.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/firewall_restriction.rst#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/security.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<srv:container xmlns=\"http://symfony.com/schema/dic/security\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:srv=\"http://symfony.com/schema/dic/services\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/security\n        https://symfony.com/schema/dic/security/security-1.0.xsd\">\n\n    <config>\n        <!-- ... -->\n        <firewall name=\"secured_area\" methods=\"GET,POST\">\n            <!-- ... -->\n        </firewall>\n    </config>\n</srv:container>\n```\n\n----------------------------------------\n\nTITLE: Configuring UniqueEntity with XML\nDESCRIPTION: Demonstrates XML configuration for unique entity validation constraints. Sets up unique validation for email and phoneNumber fields using XML schema definition.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/UniqueEntity.rst#2025-04-22_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\User\">\n        <constraint name=\"Symfony\\Bridge\\Doctrine\\Validator\\Constraints\\UniqueEntity\">\n            <option name=\"fields\">email</option>\n            <option name=\"fields\">phoneNumber</option>\n            <option name=\"ignore-null\">phoneNumber</option>\n        </constraint>\n        <!-- ... -->\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Returning Void from Runtime Closure (PHP)\nDESCRIPTION: This PHP snippet demonstrates a closure with a `void` return type. If the closure returns nothing (or explicitly `null`), the `SymfonyRuntime` assumes successful execution (exit code 0) without needing a specific application object.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/runtime.rst#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nrequire_once dirname(__DIR__).'/vendor/autoload_runtime.php';\n\nreturn function (): void {\n    echo 'Hello world';\n};\n```\n\n----------------------------------------\n\nTITLE: Using Underscores in YAML Numeric Literals\nDESCRIPTION: Shows how YAML allows underscores within numeric literals (integers, floats, hex) to improve readability. These underscores are ignored during parsing by the Symfony Yaml component.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/yaml.rst#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n    credit_card_number: 1234_5678_9012_3456\n    long_number: 10_000_000_000\n    pi: 3.14159_26535_89793\n    hex_words: 0x_CAFE_F00D\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Cache Pool in Symfony (PHP)\nDESCRIPTION: Configures a Redis cache pool named 'cache.mycache' with a default lifetime of 1 hour using PHP configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/framework.php\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework): void {\n    $framework->cache()\n        ->pool('cache.mycache')\n            ->adapters(['cache.adapter.redis'])\n            ->defaultLifetime(3600);\n};\n```\n\n----------------------------------------\n\nTITLE: Global Email Signing Configuration in PHP\nDESCRIPTION: PHP configuration for global DKIM and S/MIME signing settings in Symfony.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_59\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework): void {\n    $mailer = $framework->mailer();\n    $mailer->dsn('%env(MAILER_DSN)%');\n    $mailer->dkimSigner()\n            ->key('file://%kernel.project_dir%/var/certificates/dkim.pem')\n            ->domain('symfony.com')\n            ->select('s1');\n\n    $mailer->smimeSigner()\n            ->key('%kernel.project_dir%/var/certificates/smime.key')\n            ->certificate('%kernel.project_dir%/var/certificates/smime.crt')\n            ->passphrase('')\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Login Link Form in Twig\nDESCRIPTION: Twig template for rendering a form with hidden fields to process the login link parameters.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/login_link.rst#2025-04-22_snippet_9\n\nLANGUAGE: html+twig\nCODE:\n```\n{# templates/security/process_login_link.html.twig #}\n{% extends 'base.html.twig' %}\n\n{% block body %}\n    <h2>Hi! You are about to login to ...</h2>\n\n    <!-- for instance, use a form with hidden fields to\n         create the POST request -->\n    <form action=\"{{ path('login_check') }}\" method=\"POST\">\n        <input type=\"hidden\" name=\"expires\" value=\"{{ expires }}\">\n        <input type=\"hidden\" name=\"user\" value=\"{{ user }}\">\n        <input type=\"hidden\" name=\"hash\" value=\"{{ hash }}\">\n\n        <button type=\"submit\">Continue</button>\n    </form>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom Access Denied Handler in Symfony Security YAML\nDESCRIPTION: This YAML configuration snippet shows how to register the custom `AccessDeniedHandler` class within the `main` firewall configuration in `security.yaml`. This directs Symfony to use the custom handler when an authenticated user is denied access.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/access_denied_handler.rst#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\nfirewalls:\n    # ...\n\n    main:\n        # ...\n        access_denied_handler: App\\Security\\AccessDeniedHandler\n```\n\n----------------------------------------\n\nTITLE: Configuring Named Serializers in Symfony XML\nDESCRIPTION: This snippet shows how to configure multiple named serializer instances in Symfony's XML configuration. It demonstrates two different configurations for api_client1 and api_client2 with different settings.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer.rst#2025-04-22_snippet_44\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/serializer.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <framework:config>\n        <framework:serializer>\n\n            <framework:named-serializer\n                name=\"api_client1\"\n                name-converter=\"serializer.name_converter.camel_case_to_snake_case\"\n            >\n                <framework:default-context>\n                    <framework:enable_max_depth>true</framework:enable_max_depth>\n                </framework:default-context>\n            </framework:named-serializer>\n\n            <framework:named-serializer name=\"api_client2\">\n                <framework:default-context>\n                    <framework:enable_max_depth>false</framework:enable_max_depth>\n                </framework:default-context>\n            </framework:named-serializer>\n\n        </framework:serializer>\n    </framework:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Configuring ConsoleLogger Color Formatting in PHP\nDESCRIPTION: This snippet shows how to customize the color formatting for different log levels in the ConsoleLogger. It maps log levels to predefined format levels.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/logger.rst#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n// ...\n$formatLevelMap = [\n    LogLevel::CRITICAL => ConsoleLogger::ERROR,\n    LogLevel::DEBUG    => ConsoleLogger::INFO,\n];\n\n$logger = new ConsoleLogger($output, [], $formatLevelMap);\n```\n\n----------------------------------------\n\nTITLE: Casting Health Check Method Environment Variable using Constant Processor in Symfony with PHP Configuration\nDESCRIPTION: Uses the 'const' processor to resolve the value of a PHP constant named in HEALTH_CHECK_METHOD and use it as the allowed HTTP method for a security access control rule in Symfony's PHP config format. Dependencies are ContainerBuilder and SecurityConfig. Input is a parameter, and output configures security rules.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/env_var_processors.rst#2025-04-22_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/security.php\\nuse Symfony\\\\Component\\\\DependencyInjection\\\\ContainerBuilder;\\nuse Symfony\\\\Config\\\\SecurityConfig;\\n\\nreturn static function (ContainerBuilder $container, SecurityConfig $security): void {\\n    $container->setParameter('env(HEALTH_CHECK_METHOD)', 'Symfony\\\\Component\\\\HttpFoundation\\\\Request::METHOD_HEAD');\\n    $security->accessControl()\\n        ->path('^/health-check$')\\n        ->methods([env('HEALTH_CHECK_METHOD')->const()]);\\n};\\n\n```\n\n----------------------------------------\n\nTITLE: Using Attributes for Service Subscriber Configuration\nDESCRIPTION: Example showing how to use dependency injection attributes with SubscribedService in a Service Subscriber implementation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/service_subscribers_locators.rst#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Container\\ContainerInterface;\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;\nuse Symfony\\Component\\DependencyInjection\\Attribute\\AutowireIterator;\nuse Symfony\\Component\\DependencyInjection\\Attribute\\AutowireLocator;\nuse Symfony\\Component\\DependencyInjection\\Attribute\\Target;\nuse Symfony\\Contracts\\Service\\Attribute\\SubscribedService;\n\npublic static function getSubscribedServices(): array\n{\n    return [\n        // ...\n        new SubscribedService('logger', LoggerInterface::class, attributes: new Autowire(service: 'monolog.logger.event')),\n\n        // can event use parameters\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JSONP Format in Symfony Framework PHP\nDESCRIPTION: PHP configuration for adding JSONP format support in Symfony framework. Uses the FrameworkConfig class to set the MIME type for JSONP format.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_65\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/framework.php\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework): void {\n    $framework->request()\n        ->format('jsonp', 'application/javascript');\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Customized Login Form with Hidden Fields (HTML+Twig)\nDESCRIPTION: This Twig template renders a Symfony login form containing hidden fields for the custom 'go_to' and 'back_to' parameters, in line with the firewall configuration. Dependencies: Symfony Twig templates and routing. Inputs: route paths for 'dashboard' and 'forgot_password'; Outputs: POST form ready for submission with required parameters. Intended for use in templates/security/login.html.twig.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/form_login.rst#2025-04-22_snippet_4\n\nLANGUAGE: html+twig\nCODE:\n```\n{# templates/security/login.html.twig #}\n<form action=\"{{ path('login') }}\" method=\"post\">\n    {# ... #}\n\n    <input type=\"hidden\" name=\"go_to\" value=\"{{ path('dashboard') }}\">\n    <input type=\"hidden\" name=\"back_to\" value=\"{{ path('forgot_password') }}\">\n    <input type=\"submit\" name=\"login\">\n</form>\n```\n\n----------------------------------------\n\nTITLE: Importing Controller Routes Using YAML Configuration in Symfony - YAML\nDESCRIPTION: This YAML code snippet demonstrates how to import controller routes using the 'attribute' type, instructing Symfony to scan a specified directory for PHP controller files annotated with route attributes. The 'controllers' key assigns a unique collection name, while 'resource' specifies the target directory and 'type: attribute' enables attribute scanning. Inputs are relative paths to controller directories; the output is a collection containing all discovered routes. Requires properly structured controller classes and access to Symfony routing component.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/routing/custom_route_loader.rst#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# config/routes.yaml\ncontrollers:\n    resource: ../src/Controller/\n    type: attribute\n```\n\n----------------------------------------\n\nTITLE: Configuring Workflows in YAML Format\nDESCRIPTION: YAML configuration for defining workflows in Symfony. Used to create state machines and workflows for application processes.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_90\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/workflow.yaml\nframework:\n    workflows:\n        my_workflow:\n            # ...\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony VarDumper via Composer in Terminal\nDESCRIPTION: This Terminal command installs the symfony/var-dumper package for development purposes using Composer. The --dev flag ensures the dependency is only required for development and not for production usage. Composer must be available and initialized in your PHP project; the command should be run from the project root.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/var_dumper.rst#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require --dev symfony/var-dumper\n```\n\n----------------------------------------\n\nTITLE: Configuring Charset Constraint with PHP Attributes in Symfony\nDESCRIPTION: Defines a FileDTO class with a content property that is validated to ensure it uses UTF-8 encoding using the Charset constraint with PHP attributes.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Charset.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/FileDTO.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass FileDTO\n{\n    #[Assert\\Charset('UTF-8')]\n    protected string $content;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Email Validation Using PHP Attributes in Symfony\nDESCRIPTION: Example of validating an email property in a Symfony entity using PHP attributes. The constraint includes a custom error message that will display when validation fails.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Email.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Author.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Author\n{\n    #[Assert\\Email(\n        message: 'The email {{ value }} is not a valid email.',\n    )]\n    protected string $email;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Class with an Options Array in PHP\nDESCRIPTION: This PHP code defines a simple `Mailer` class. It has a constructor that accepts an optional array of `$options` and stores this array in a protected property `$options`. This represents a common pattern for passing configuration to a class.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/options_resolver.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass Mailer\n{\n    protected array $options;\n\n    public function __construct(array $options = [])\n    {\n        $this->options = $options;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Host for Email Provider in ENV File\nDESCRIPTION: Example of configuring a custom host in the Mailgun provider DSN to debug issues using an external service like requestbin.com.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_7\n\nLANGUAGE: env\nCODE:\n```\n# .env\nMAILER_DSN=mailgun+https://KEY:DOMAIN@requestbin.com\n```\n\n----------------------------------------\n\nTITLE: Configuring Default HTTP Client Options in Symfony (XML)\nDESCRIPTION: Demonstrates configuring Symfony's HTTP client in XML for use with the Dependency Injection Container. The code defines 'max-host-connections' and 'default-options' (including a custom header and max_redirects) for the client. Prerequisites include declaring XML namespaces as shown; settings are placed in config/packages/framework.xml. Outputs a properly configured FrameworkBundle HTTP client service.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_41\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/framework.xml -->\\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\\n<container xmlns=\\\"http://symfony.com/schema/dic/services\\\"\\n    xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n    xmlns:framework=\\\"http://symfony.com/schema/dic/symfony\\\"\\n    xsi:schemaLocation=\\\"http://symfony.com/schema/dic/services\\n        https://symfony.com/schema/dic/services/services-1.0.xsd\\n        http://symfony.com/schema/dic/symfony https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\\\">\\n\\n    <framework:config>\\n        <framework:http-client max-host-connections=\\\"10\\\">\\n            <framework:default-options max-redirects=\\\"7\\\">\\n                <framework:header name=\\\"X-Powered-By\\\">ACME App</framework:header>\\n            </framework:default-options>\\n        </framework:http-client>\\n    </framework:config>\\n</container>\\n\n```\n\n----------------------------------------\n\nTITLE: Compressing Symfony Emoji Data Files\nDESCRIPTION: Command to compress internal Symfony emoji data files using the PHP zlib extension to save disk space.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/emoji.rst#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ php ./vendor/symfony/emoji/Resources/bin/compress\n```\n\n----------------------------------------\n\nTITLE: Configuring Default hinclude Template in XML\nDESCRIPTION: XML configuration for setting the default template used by hinclude fragments\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/templates.rst#2025-04-22_snippet_42\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/framework.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <!-- ... -->\n    <framework:config>\n        <framework:fragments hinclude-default-template=\"hinclude.html.twig\"/>\n    </framework:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Services with an Invokable Configurator in XML\nDESCRIPTION: This XML snippet demonstrates configuring services with an invokable configurator. The `<configurator>` tag is used, but only the `service` attribute pointing to the configurator service (`App\\Mail\\EmailConfigurator`) is provided. The `method` attribute is omitted, indicating that the configurator service's `__invoke` method should be called.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/configurators.rst#2025-04-22_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <prototype namespace=\"App\\\" resource=\"../src/*\"/>\n\n        <service id=\"App\\Mail\\NewsletterManager\">\n            <configurator service=\"App\\Mail\\EmailConfigurator\"/>\n        </service>\n\n        <service id=\"App\\Mail\\GreetingCardManager\">\n            <configurator service=\"App\\Mail\\EmailConfigurator\"/>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Example of manifest.json File Structure\nDESCRIPTION: This snippet demonstrates the structure of the manifest.json file generated by Webpack Encore. It maps original asset paths to their versioned counterparts.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/versioning.rst#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"build/app.js\": \"/build/app.123abc.js\",\n    \"build/dashboard.css\": \"/build/dashboard.a4bf2d.css\",\n    \"build/images/logo.png\": \"/build/images/logo.3eed42.png\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Front Controller in PHP\nDESCRIPTION: This snippet shows how to create a front controller in PHP that routes requests to appropriate actions based on the URI. It centralizes request handling and includes necessary files.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/introduction/from_flat_php_to_symfony.rst#2025-04-22_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n// index.php\n\n// load and initialize any global libraries\nrequire_once 'model.php';\nrequire_once 'controllers.php';\n\n// route the request internally\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\nif ('/index.php' === $uri) {\n    list_action();\n} elseif ('/index.php/show' === $uri && isset($_GET['id'])) {\n    show_action($_GET['id']);\n} else {\n    header('HTTP/1.1 404 Not Found');\n    echo '<html><body><h1>Page Not Found</h1></body></html>';\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding System Environment Variables in PHP\nDESCRIPTION: Code snippet showing how to override existing system environment variables using the Symfony Dotenv component with the overrideExistingVars parameter.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration.rst#2025-04-22_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\nuse Symfony\\Component\\Dotenv\\Dotenv;\n\n$dotenv = new Dotenv();\n$dotenv->loadEnv(__DIR__.'/.env', overrideExistingVars: true);\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Valid URL Protocols with PHP Attributes in Symfony\nDESCRIPTION: Example of customizing which protocols are considered valid for URL validation using PHP attributes. This example adds FTP support.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Url.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Author.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Author\n{\n    #[Assert\\Url(\n        protocols: ['http', 'https', 'ftp'],\n    )]\n    protected string $bioUrl;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Date Comparison with LessThanOrEqual in YAML\nDESCRIPTION: YAML configuration for using LessThanOrEqual to ensure a date of birth is not in the future.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/LessThanOrEqual.rst#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Person:\n    properties:\n        dateOfBirth:\n            - LessThanOrEqual: today\n```\n\n----------------------------------------\n\nTITLE: Configuring Notifier Texter Transports in PHP\nDESCRIPTION: Configuration example for setting up notifier texter transports in Symfony using PHP format.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/notifier.rst#2025-04-22_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/notifier.php\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework): void {\n    $framework->notifier()\n        ->texterTransport('expo', env('EXPO_DSN'))\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Handler with DSN in YAML\nDESCRIPTION: Examples of configuring session handlers using DSN strings in YAML. Shows how to store sessions in Redis, using environment variables, or in files.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_73\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/framework.yaml\nframework:\n    session:\n        # a few possible examples\n        handler_id: 'redis://localhost'\n        handler_id: '%env(REDIS_URL)%'\n        handler_id: '%env(DATABASE_URL)%'\n        handler_id: 'file://%kernel.project_dir%/var/sessions'\n```\n\n----------------------------------------\n\nTITLE: Applying ISIN Constraint Using PHP in Symfony Validator\nDESCRIPTION: This PHP code demonstrates how to programmatically apply the ISIN constraint to a property using Symfony's ClassMetadata. It's typically used in entity classes for custom validation setup.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Isin.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/UnitAccount.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass UnitAccount\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('isin', new Assert\\Isin());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Error Path with UniqueEntity Constraint using YAML in Symfony\nDESCRIPTION: Example of setting the errorPath option with the UniqueEntity constraint using YAML configuration to control where validation error messages appear when validating uniqueness across multiple fields.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/UniqueEntity.rst#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Service:\n    constraints:\n        - Symfony\\Bridge\\Doctrine\\Validator\\Constraints\\UniqueEntity:\n            fields: [host, port]\n            message: 'This port is already in use on that host.'\n            errorPath: port\n```\n\n----------------------------------------\n\nTITLE: Defining Non-Shared Services using YAML in Symfony\nDESCRIPTION: Demonstrates how to configure a non-shared service using YAML configuration. The shared: false parameter instructs the container to create a new instance each time the service is requested.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/shared.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nservices:\n    App\\SomeNonSharedService:\n        shared: false\n        # ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Twig Templates Path (Symfony, XML)\nDESCRIPTION: This XML configuration sets a custom templates directory for Twig using <twig:default-path> in config/packages/twig.xml. The directory is specified by the %kernel.project_dir%/resources/views parameter. The file must include the appropriate XML namespaces for Symfony and Twig configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/override_dir_structure.rst#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/twig.xml -->\\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\\n<container xmlns=\\\"http://symfony.com/schema/dic/services\\\"\\n    xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n    xmlns:twig=\\\"http://symfony.com/schema/dic/twig\\\"\\n    xsi:schemaLocation=\\\"http://symfony.com/schema/dic/services\\n        https://symfony.com/schema/dic/services/services-1.0.xsd\\n        http://symfony.com/schema/dic/twig\\n        https://symfony.com/schema/dic/twig/twig-1.0.xsd\\\">\\n\\n    <twig:config>\\n        <twig:default-path>%kernel.project_dir%/resources/views</twig:default-path>\\n    </twig:config>\\n\\n</container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dump Destination in Symfony using PHP\nDESCRIPTION: The PHP snippet returns a closure that configures the debug extension's dump_destination setting in a Symfony application's config/packages/debug.php file. It uses the ContainerConfigurator API and references an environment variable to set the destination. Prerequisites: Symfony 4+ with PHP container-based configuration; requires the debug bundle and environment variables set up. This code routes dumped data to a TCP server.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/var_dumper.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/debug.php\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nreturn static function (ContainerConfigurator $container): void {\n    $container->extension('debug', [\n        'dump_destination' => 'tcp://%env(VAR_DUMPER_SERVER)%',\n    ]);\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Unique Constraint with Fields Option in XML\nDESCRIPTION: XML configuration for using the 'fields' option with the Unique constraint.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Unique.rst#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\PointOfInterest\">\n        <property name=\"coordinates\">\n            <constraint name=\"Unique\">\n                <option name=\"fields\">\n                    <value>latitude</value>\n                    <value>longitude</value>\n                </option>\n            </constraint>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Setting Decoration Priority with PHP Attributes\nDESCRIPTION: Example showing how to set decoration priority using PHP attributes. The priority parameter in the AsDecorator attribute controls the order in which multiple decorators are applied, with higher values being applied earlier.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/service_decoration.rst#2025-04-22_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n// ...\nuse Symfony\\Component\\DependencyInjection\\Attribute\\AsDecorator;\nuse Symfony\\Component\\DependencyInjection\\Attribute\\AutowireDecorated;\n\n#[AsDecorator(decorates: Foo::class, priority: 5)]\nclass Bar\n{\n```\n\n----------------------------------------\n\nTITLE: Applying ISSN Constraint using PHP Attributes in Symfony\nDESCRIPTION: Demonstrates how to apply the ISSN validation constraint to a property using PHP attributes in a Symfony entity class.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Issn.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Journal.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Journal\n{\n    #[Assert\\Issn]\n    protected string $issn;\n}\n```\n\n----------------------------------------\n\nTITLE: Cleaning Cookie Headers in Varnish for Symfony Caching\nDESCRIPTION: This configuration removes all cookies except essential ones (PHPSESSID and REMEMBERME) to improve caching effectiveness in Varnish for Symfony applications.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/http_cache/varnish.rst#2025-04-22_snippet_1\n\nLANGUAGE: varnish4\nCODE:\n```\nsub vcl_recv {\n    // Remove all cookies except for essential ones.\n    if (req.http.Cookie) {\n        set req.http.Cookie = \";\" + req.http.Cookie;\n        set req.http.Cookie = regsuball(req.http.Cookie, \"; +\", \";\");\n        set req.http.Cookie = regsuball(req.http.Cookie, \";(PHPSESSID|REMEMBERME)=\", \"; \\1=\");\n        set req.http.Cookie = regsuball(req.http.Cookie, \";[^ ][^;]*\", \"\");\n        set req.http.Cookie = regsuball(req.http.Cookie, \"^[; ]+|[; ]+$\", \"\");\n\n        if (req.http.Cookie == \"\") {\n            // If there are no more cookies, remove the header to get the page cached.\n            unset req.http.Cookie;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Getter Constraints with XML in Symfony\nDESCRIPTION: Demonstrates how to configure a validation constraint for a getter method using XML format in Symfony. It applies an IsTrue constraint to ensure password safety.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/validation.rst#2025-04-22_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping\n        https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\Author\">\n        <getter property=\"passwordSafe\">\n            <constraint name=\"IsTrue\">\n                <option name=\"message\">The password cannot match your first name</option>\n            </constraint>\n        </getter>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: ExpirationChecker Test Implementation\nDESCRIPTION: PHPUnit test class demonstrating how to test time-sensitive code using MockClock\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/clock.rst#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse PHPUnit\\Framework\\TestCase;\nuse Symfony\\Component\\Clock\\MockClock;\n\nclass ExpirationCheckerTest extends TestCase\n{\n    public function testIsExpired(): void\n    {\n        $clock = new MockClock('2022-11-16 15:20:00');\n        $expirationChecker = new ExpirationChecker($clock);\n        $validUntil = new DateTimeImmutable('2022-11-16 15:25:00');\n\n        // $validUntil is in the future, so it is not expired\n        $this->assertFalse($expirationChecker->isExpired($validUntil));\n\n        // Clock sleeps for 10 minutes, so now is '2022-11-16 15:30:00'\n        $clock->sleep(600); // Instantly changes time as if we waited for 10 minutes (600 seconds)\n\n        // modify the clock, accepts all formats supported by DateTimeImmutable::modify()\n        $this->assertTrue($expirationChecker->isExpired($validUntil));\n\n        $clock->modify('2022-11-16 15:00:00');\n\n        // $validUntil is in the future again, so it is no longer expired\n        $this->assertFalse($expirationChecker->isExpired($validUntil));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP Form Login Authentication in XML\nDESCRIPTION: Example of configuring form-based LDAP authentication in a Symfony application using XML format. Defines the LDAP service and DN string pattern for user authentication.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/ldap.rst#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/security.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<srv:container xmlns=\"http://symfony.com/schema/dic/security\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:srv=\"http://symfony.com/schema/dic/services\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/security\n        https://symfony.com/schema/dic/security/security-1.0.xsd\">\n\n    <config>\n        <firewall name=\"main\">\n            <form-login-ldap service=\"Symfony\\Component\\Ldap\\Ldap\"\n                dn-string=\"uid={user_identifier},dc=example,dc=com\"/>\n        </firewall>\n    </config>\n</srv:container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Country Validation with YAML\nDESCRIPTION: Example of configuring the Country validation constraint using YAML configuration. Specifies validation rules for the country property in the User entity.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Country.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\User:\n    properties:\n        country:\n            - Country: ~\n```\n\n----------------------------------------\n\nTITLE: Defining User Class with GroupSequence in PHP\nDESCRIPTION: This snippet shows how to define a User class with a group sequence using PHP attributes. It demonstrates the use of Assert\\GroupSequence and various validation constraints.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/validation/sequence_provider.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/User.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\n#[Assert\\GroupSequence(['User', 'Strict'])]\nclass User implements UserInterface\n{\n    #[Assert\\NotBlank]\n    private string $username;\n\n    #[Assert\\NotBlank]\n    private string $password;\n\n    #[Assert\\IsTrue(\n        message: 'The password cannot match your username',\n        groups: ['Strict'],\n    )]\n    public function isPasswordSafe(): bool\n    {\n        return ($this->username !== $this->password);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PHPDoc Type Guesser Class in PHP\nDESCRIPTION: Base implementation of a custom type guesser class that implements FormTypeGuesserInterface with required method stubs.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/type_guesser.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Form\\TypeGuesser;\n\nuse Symfony\\Component\\Form\\FormTypeGuesserInterface;\nuse Symfony\\Component\\Form\\Guess\\TypeGuess;\nuse Symfony\\Component\\Form\\Guess\\ValueGuess;\n\nclass PhpDocTypeGuesser implements FormTypeGuesserInterface\n{\n    public function guessType(string $class, string $property): ?TypeGuess\n    {\n    }\n\n    public function guessRequired(string $class, string $property): ?ValueGuess\n    {\n    }\n\n    public function guessMaxLength(string $class, string $property): ?ValueGuess\n    {\n    }\n\n    public function guessPattern(string $class, string $property): ?ValueGuess\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Vue.js Runtime Template Examples\nDESCRIPTION: Examples of Vue.js runtime template compilation using both inline template and DOM element mounting\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/vuejs.rst#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nnew Vue({\n    template: '<div>{{ hi }}</div>'\n})\n\nnew Vue({\n    el: '#app', // where <div id=\"app\"> in your DOM contains the Vue template\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Lazy User Loading in Symfony Firewall (YAML)\nDESCRIPTION: This YAML configuration enables lazy user loading in a Symfony firewall. The lazy option is set to true, which means the user will only be loaded and the session started when the User object is actually accessed.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/security.rst#2025-04-22_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\nsecurity:\n    # ...\n\n    firewalls:\n        main:\n            # ...\n            lazy: true\n```\n\n----------------------------------------\n\nTITLE: Customizing Form Collection Templates in Twig\nDESCRIPTION: Twig blocks for customizing the rendering of form collections, including the entire collection and individual collection entries. These blocks can be used to override the default form rendering.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/form_themes.rst#2025-04-22_snippet_8\n\nLANGUAGE: twig\nCODE:\n```\n{% block collection_row %} ... {% endblock %}\n{% block collection_label %} ... {% endblock %}\n{% block collection_widget %} ... {% endblock %}\n{% block collection_help %} ... {% endblock %}\n{% block collection_errors %} ... {% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Passing Variables to Form Template in Symfony PHP\nDESCRIPTION: Example of passing custom variables from the form type class to the Twig template using buildView method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/create_custom_field_type.rst#2025-04-22_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nclass PostalAddressType extends AbstractType\n{\n    public function __construct(\n        private EntityManagerInterface $entityManager,\n    ) {\n    }\n\n    public function buildView(FormView $view, FormInterface $form, array $options): void\n    {\n        $view->vars['isExtendedAddress'] = $options['is_extended_address'];\n        $view->vars['notification'] = $this->entityManager->find('...');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Asset Mappings with gulp-buster in JSON\nDESCRIPTION: Example of a busters.json file generated by gulp-buster, mapping asset files to their content hashes. This file is used by the custom version strategy to determine asset versions.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/custom_version_strategy.rst#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"js/script.js\": \"f9c7afd05729f10f55b689f36bb20172\",\n    \"css/style.css\": \"91cd067f79a5839536b46c494c4272d8\"\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Validation Configuration in YAML\nDESCRIPTION: Demonstrates how to define custom validation constraints for a User entity using validation groups in YAML format.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/bundles/override.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nFOS\\UserBundle\\Model\\User:\n    properties:\n        plainPassword:\n            - NotBlank:\n                groups: [AcmeValidation]\n            - Length:\n                min: 6\n                minMessage: fos_user.password.short\n                groups: [AcmeValidation]\n```\n\n----------------------------------------\n\nTITLE: Creating Symfony Project for Bug Reproduction\nDESCRIPTION: Terminal command to create a new Symfony project using Composer, which serves as the starting point for reproducing framework-related bugs. This uses the minimal 'skeleton' template to keep the project as simple as possible.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/contributing/code/reproducer.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ composer create-project symfony/skeleton bug_app\n```\n\n----------------------------------------\n\nTITLE: Defining CIDR Validation with PHP Attributes\nDESCRIPTION: Example of using PHP attributes to apply CIDR validation to a property in a Symfony entity class. This shows how to annotate a property with the Assert\\Cidr constraint.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Cidr.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/NetworkSettings.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass NetworkSettings\n{\n    #[Assert\\Cidr]\n    protected string $cidrNotation;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Auto Mapping with PHP Code in Symfony\nDESCRIPTION: Example of using the EnableAutoMapping constraint with PHP code in the loadValidatorMetadata method to enable Doctrine's auto mapping for validation on the BookCollection entity.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/EnableAutoMapping.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/BookCollection.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass BookCollection\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addConstraint(new Assert\\EnableAutoMapping());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using LessThan Constraint with Relative Dates in YAML\nDESCRIPTION: Example of using the LessThan constraint with relative dates in YAML configuration to validate that a person is at least 18 years old.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/LessThan.rst#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Person:\n    properties:\n        dateOfBirth:\n            - LessThan: -18 years\n```\n\n----------------------------------------\n\nTITLE: Running PHP Commands with Project-Specific PHP Version\nDESCRIPTION: Examples showing how to run PHP commands with the PHP version selected for a specific project.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/symfony_server.rst#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# runs the command with the default PHP version\n$ php -r \"...\"\n\n# runs the command with the PHP version selected by the project\n# (or the default PHP version if the project didn't select one)\n$ symfony php -r \"...\"\n```\n\n----------------------------------------\n\nTITLE: Dumping Compiled Container for Performance in Symfony\nDESCRIPTION: Demonstrates how to dump and cache a compiled container configuration to improve performance by avoiding parsing configuration files on each request.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/dependency_injection/compilation.rst#2025-04-22_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\DependencyInjection\\ContainerBuilder;\nuse Symfony\\Component\\DependencyInjection\\Dumper\\PhpDumper;\n\n$file = __DIR__ .'/cache/container.php';\n\nif (file_exists($file)) {\n    require_once $file;\n    $container = new ProjectServiceContainer();\n} else {\n    $container = new ContainerBuilder();\n    // ...\n    $container->compile();\n\n    $dumper = new PhpDumper($container);\n    file_put_contents($file, $dumper->dump());\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Symfony Development Server\nDESCRIPTION: Command to start the local Symfony development server.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/quick_tour/the_big_picture.rst#2025-04-22_snippet_2\n\nLANGUAGE: terminal\nCODE:\n```\n$ symfony server:start\n```\n\n----------------------------------------\n\nTITLE: Setting Preferred Choices in EntityType for Symfony Forms\nDESCRIPTION: Demonstrates how to set preferred choices in an EntityType field to prioritize certain options in the selection list.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/entity.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Entity\\User;\nuse Symfony\\Bridge\\Doctrine\\Form\\Type\\EntityType;\n// ...\n\n$builder->add('users', EntityType::class, [\n    'class' => User::class,\n    // this method must return an array of User entities\n    'preferred_choices' => $group->getPreferredUsers(),\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring GreaterThan Constraint in PHP\nDESCRIPTION: Demonstrates how to set up the GreaterThan constraint using PHP code for validating a Person's siblings count and age.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/GreaterThan.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Person.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Person\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('siblings', new Assert\\GreaterThan(5));\n\n        $metadata->addPropertyConstraint('age', new Assert\\GreaterThan(\n            value: 18,\n        ));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Symfony Translation in YAML\nDESCRIPTION: YAML configuration for setting the default locale and translation file directory in Symfony.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/translation.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/translation.yaml\nframework:\n    default_locale: 'en'\n    translator:\n        default_path: '%kernel.project_dir%/translations'\n```\n\n----------------------------------------\n\nTITLE: Applying Language Constraint with PHP Attributes in Symfony\nDESCRIPTION: Example of using the Language constraint with PHP attributes in a Symfony entity class. This validates that the preferredLanguage property contains a valid language Unicode identifier.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Language.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/User.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass User\n{\n    #[Assert\\Language]\n    protected string $preferredLanguage;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring BirthdayType with String Placeholder\nDESCRIPTION: Example of adding a BirthdayType field to a form builder with a single placeholder string that applies to all select boxes.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/birthday.rst#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$builder->add('birthdate', BirthdayType::class, [\n    'placeholder' => 'Select a value',\n]);\n```\n\n----------------------------------------\n\nTITLE: Disabling Process Output in Symfony\nDESCRIPTION: This snippet shows how to disable output for a process to save memory. It demonstrates the use of disableOutput and enableOutput methods.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/process.rst#2025-04-22_snippet_24\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Process\\Process;\n\n$process = new Process(['/usr/bin/php', 'worker.php']);\n$process->disableOutput();\n$process->run();\n```\n\n----------------------------------------\n\nTITLE: Using FactoryCommandLoader with Multiple Command Factories - Symfony Console - PHP\nDESCRIPTION: This snippet highlights usage of FactoryCommandLoader for mapping multiple commands to factories, supporting both closures and static callables. Dependencies include Symfony\\Component\\Console\\Command and FactoryCommandLoader. Each array entry maps a command name to a callable (closure or class method array) that returns a Command instance when invoked. This modular approach enables multiple lazy commands to be handled efficiently by Symfony Console.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/console/lazy_commands.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\CommandLoader\\FactoryCommandLoader;\n\n$commandLoader = new FactoryCommandLoader([\n    'app:foo' => function (): Command { return new FooCommand(); },\n    'app:bar' => [BarCommand::class, 'create'],\n]);\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Routing Loader as Service in XML\nDESCRIPTION: XML configuration for registering the ExtraLoader class as a service with the 'routing.loader' tag in Symfony's dependency injection container.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/routing/custom_route_loader.rst#2025-04-22_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <!-- ... -->\n\n        <service id=\"App\\Routing\\ExtraLoader\">\n            <tag name=\"routing.loader\"/>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Installing PropertyAccess Component via Composer (Terminal)\nDESCRIPTION: Shows the command to install the Symfony PropertyAccess component using Composer, the standard package manager for PHP.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/property_access.rst#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require symfony/property-access\n```\n\n----------------------------------------\n\nTITLE: Disabling stty Command for Input Hiding in Symfony Console - PHP\nDESCRIPTION: This snippet disables the stty command in Symfony's QuestionHelper, preventing issues on Windows platforms where stty may corrupt input or output when hiding user input. It should be called before asking questions that require hidden input. Requires symfony/console and QuestionHelper. Only affects behavior on platforms using stty for input manipulation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/helpers/questionhelper.rst#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Console\\Helper\\QuestionHelper;\nuse Symfony\\Component\\Console\\Question\\ChoiceQuestion;\n\n// ...\npublic function execute(InputInterface $input, OutputInterface $output): int\n{\n    // ...\n    $helper = $this->getHelper('question');\n    QuestionHelper::disableStty();\n\n    // ...\n\n    return Command::SUCCESS;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Mapping Types in XML\nDESCRIPTION: XML configuration for registering custom Doctrine mapping types\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine/dbal.rst#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/doctrine.xml -->\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:doctrine=\"http://symfony.com/schema/dic/doctrine\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/doctrine\n        https://symfony.com/schema/dic/doctrine/doctrine-1.0.xsd\">\n\n    <doctrine:config>\n        <doctrine:dbal>\n            <doctrine:type name=\"custom_first\" class=\"App\\Type\\CustomFirst\"/>\n            <doctrine:type name=\"custom_second\" class=\"App\\Type\\CustomSecond\"/>\n        </doctrine:dbal>\n    </doctrine:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Using LessThan Constraint with Relative Dates in XML\nDESCRIPTION: Example of using the LessThan constraint with relative dates in XML configuration to validate that a person is at least 18 years old.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/LessThan.rst#2025-04-22_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\Person\">\n        <property name=\"dateOfBirth\">\n            <constraint name=\"LessThan\">-18 years</constraint>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Authenticating Composer for Private GitLab Repositories via Terminal\nDESCRIPTION: Provides the Composer command (`composer config --global --auth gitlab-token.gitlab.com [token]`) to store a GitLab Personal Access Token globally. This configuration enables Composer to authenticate with GitLab using the provided token (requiring `read_api` and `read_repository` scopes) to access private repositories, such as those containing private Flex recipes. Replace `[token]` with the actual generated token.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/flex_private_recipes.rst#2025-04-22_snippet_7\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer config --global --auth gitlab-token.gitlab.com [token]\n```\n\n----------------------------------------\n\nTITLE: Adding Handlebars Loader with Advanced Configuration Options\nDESCRIPTION: Shows a more complex configuration for handlebars-loader that specifies helper directories and partial directories for template processing.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/custom-loaders-plugins.rst#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nEncore\n    // ...\n    .addLoader({\n        test: /\\.handlebars$/,\n        loader: 'handlebars-loader',\n        options: {\n            helperDirs: [\n                __dirname + '/helpers1',\n                __dirname + '/helpers2',\n            ],\n            partialDirs: [\n                path.join(__dirname, 'templates', 'partials')\n            ]\n        }\n    })\n;\n```\n\n----------------------------------------\n\nTITLE: Updated Product Entity with ManyToOne Relationship\nDESCRIPTION: Demonstrates the changes made to the Product entity to include the ManyToOne relationship with Category, including ORM annotations and getter/setter methods.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine/associations.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Product.php\nnamespace App\\Entity;\n\n// ...\nclass Product\n{\n    // ...\n\n    #[ORM\\ManyToOne(targetEntity: Category::class, inversedBy: 'products')]\n    private Category $category;\n\n    public function getCategory(): ?Category\n    {\n        return $this->category;\n    }\n\n    public function setCategory(?Category $category): self\n    {\n        $this->category = $category;\n\n        return $this;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Lazy Services in YAML\nDESCRIPTION: Demonstrates how to mark a service as lazy in Symfony using YAML configuration. This allows the service to be instantiated only when it's actually used.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/lazy_services.rst#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nservices:\n    App\\Twig\\AppExtension:\n        lazy: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Extra Runtime Options in Composer with JSON\nDESCRIPTION: This JSON snippet configures the extra.runtime section in composer.json to specify the project_dir option for Symfony Runtime. It sets the root directory for the runtime; after modification, you must update generated PHP files using commands like composer dump-autoload. Expected input is a valid JSON object and the only output is altered Composer behavior and a regenerated autoload_runtime.php on the next composer install or update.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/runtime.rst#2025-04-22_snippet_15\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"require\": {\n        \"...\": \"...\"\n    },\n    \"extra\": {\n        \"runtime\": {\n            \"project_dir\": \"/var/task\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using ConstructorExtractor in PHP\nDESCRIPTION: Demonstrates how to use ConstructorExtractor to extract type information from constructor arguments using ReflectionExtractor.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/property_info.rst#2025-04-22_snippet_18\n\nLANGUAGE: PHP\nCODE:\n```\n// Extraction.php\nuse App\\Domain\\Foo;\nuse Symfony\\Component\\PropertyInfo\\Extractor\\ConstructorExtractor;\n\n$constructorExtractor = new ConstructorExtractor([new ReflectionExtractor()]);\n$constructorExtractor->getTypes(Foo::class, 'bar')[0]->getBuiltinType(); // returns 'string'\n```\n\n----------------------------------------\n\nTITLE: Applying Currency Constraint using PHP Attributes in Symfony\nDESCRIPTION: This snippet demonstrates how to apply the Currency constraint to a property using PHP attributes in a Symfony entity class. It ensures that the 'currency' property of an Order class is a valid currency.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Currency.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Order.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Order\n{\n    #[Assert\\Currency]\n    protected string $currency;\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Missing Dependencies in PHP\nDESCRIPTION: PHP configuration example showing how to ignore missing dependencies using the 'ignoreOnInvalid()' method within a method call.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/optional_dependencies.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nuse App\\Newsletter\\NewsletterManager;\n\nreturn function(ContainerConfigurator $container): void {\n    $services = $container->services();\n\n    $services->set(NewsletterManager::class)\n        ->call('setLogger', [service('logger')->ignoreOnInvalid()])\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: YAML Output with Inline Level 1\nDESCRIPTION: Example YAML output when `Yaml::dump` is called with the `inline` parameter set to 1. The nested 'bar' array is now represented inline using curly braces `{}`.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/yaml.rst#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nfoo: bar\nbar: { foo: bar, bar: baz }\n```\n\n----------------------------------------\n\nTITLE: Setting Optional Service Dependencies to null in PHP\nDESCRIPTION: PHP configuration example showing how to set a service argument to null if the service doesn't exist using the 'nullOnInvalid()' method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/optional_dependencies.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nuse App\\Newsletter\\NewsletterManager;\n\nreturn function(ContainerConfigurator $container): void {\n    $services = $container->services();\n\n    $services->set(NewsletterManager::class)\n        ->args([service('logger')->nullOnInvalid()]);\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Loco Translation Provider in Symfony PHP\nDESCRIPTION: Illustrates how to configure the Loco translation provider in the Symfony PHP configuration, including setting the DSN, domains, and locales.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/translation.rst#2025-04-22_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n# config/packages/translation.php\n$container->loadFromExtension('framework', [\n    'translator' => [\n        'providers' => [\n            'loco' => [\n                'dsn' => env('LOCO_DSN'),\n                'domains' => ['messages'],\n                'locales' => ['en', 'fr'],\n            ],\n\n```\n\n----------------------------------------\n\nTITLE: Configuring OIDC User Info with Custom HTTP Client - Symfony Security - XML\nDESCRIPTION: This XML snippet configures the OIDC user info handler to use a custom HTTP client service (oidc.client). The client is assigned as an attribute on the <oidc-user-info> element. Place this XML in config/packages/security.xml, ensuring the oidc.client service is defined elsewhere in your Symfony configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/access_token.rst#2025-04-22_snippet_22\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/security.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<srv:container xmlns=\"http://symfony.com/schema/dic/security\"\n    xmlns:srv=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/security\n        https://symfony.com/schema/dic/security/security-1.0.xsd\">\n\n    <config>\n        <firewall name=\"main\">\n            <access-token>\n                <token-handler>\n                    <oidc-user-info client=\"oidc.client\"/>\n                </token-handler>\n            </access-token>\n        </firewall>\n    </config>\n</srv:container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Input Arguments in Symfony Console Command\nDESCRIPTION: Shows how to configure and use input arguments in a Symfony console command. This example adds a required 'username' argument and retrieves its value in the execute method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/console.rst#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Console\\Input\\InputArgument;\n\n// ...\nprotected function configure(): void\n{\n    $this\n        // configure an argument\n        ->addArgument('username', InputArgument::REQUIRED, 'The username of the user.')\n        // ...\n    ;\n}\n\n// ...\npublic function execute(InputInterface $input, OutputInterface $output): int\n{\n    $output->writeln([\n        'User Creator',\n        '============',\n        '',\n    ]);\n\n    // retrieve the argument value using getArgument()\n    $output->writeln('Username: '.$input->getArgument('username'));\n\n    return Command::SUCCESS;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Monolog Processor and Formatter in XML\nDESCRIPTION: XML configuration for registering a custom Monolog processor and formatter. The formatter includes the session token in the log output format, and the processor is registered as a service with the monolog.processor tag.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/logging/processors.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:monolog=\"http://symfony.com/schema/dic/monolog\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/monolog\n        https://symfony.com/schema/dic/monolog/monolog-1.0.xsd\">\n\n    <services>\n        <service id=\"monolog.formatter.session_request\"\n            class=\"Monolog\\Formatter\\LineFormatter\">\n\n            <argument>[%%datetime%%] [%%extra.token%%] %%channel%%.%%level_name%%: %%message%% %%context%% %%extra%%&#xA;</argument>\n        </service>\n\n        <service id=\"App\\Logger\\SessionRequestProcessor\">\n            <tag name=\"monolog.processor\"/>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Structure for Asset Preloading\nDESCRIPTION: Example HTML structure showing a basic web page with a linked stylesheet.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/web_link.rst#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>My Application</title>\n    <link rel=\"stylesheet\" href=\"/app.css\">\n</head>\n<body>\n    <main role=\"main\" class=\"container\">\n        <!-- ... -->\n    </main>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Subscriber Aliases in XML\nDESCRIPTION: XML configuration for aliasing services in a Service Subscriber using container.service_subscriber tag.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/service_subscribers_locators.rst#2025-04-22_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n\n        <service id=\"App\\CommandBus\">\n            <tag name=\"container.service_subscriber\" key=\"logger\" id=\"monolog.logger.event\"/>\n        </service>\n\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Defining Url Validation using XML in Symfony\nDESCRIPTION: XML configuration example for URL validation in Symfony. This adds the Url constraint to the bioUrl property in the Author entity.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Url.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\Author\">\n        <property name=\"bioUrl\">\n            <constraint name=\"Url\"/>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Options at Once in OptionsResolver\nDESCRIPTION: This code demonstrates how to define multiple options at once by passing an array of option names to the setDefined method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/options_resolver.rst#2025-04-22_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n// ...\nclass Mailer\n{\n    // ...\n    public function configureOptions(OptionsResolver $resolver): void\n    {\n        // ...\n        $resolver->setDefined(['port', 'encryption']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying All Constraint with PHP Attributes in Symfony Validator\nDESCRIPTION: Example of using the All constraint with PHP attributes to validate each entry in an array. This applies NotBlank and Length constraints to each element in the favoriteColors array.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/All.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/User.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass User\n{\n    #[Assert\\All([\n        new Assert\\NotBlank,\n        new Assert\\Length(min: 5),\n    ])]\n    protected array $favoriteColors = [];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Method for IsFalse Validation in PHP\nDESCRIPTION: Example of a PHP class with state property and a method that checks if the state is invalid. This method will later be used with the IsFalse constraint.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/IsFalse.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nprotected string $state;\n\nprotected array $invalidStates = [];\n\npublic function isStateInvalid(): bool\n{\n    return in_array($this->state, $this->invalidStates);\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Output with Inline Level 2\nDESCRIPTION: Example YAML output when `Yaml::dump` is called with the `inline` parameter set to 2. For this input array, the output is the same as the default expanded representation because the nesting level matches the inline threshold.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/yaml.rst#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nfoo: bar\nbar:\n    foo: bar\n    bar: baz\n```\n\n----------------------------------------\n\nTITLE: Output CSS with Versioned URLs\nDESCRIPTION: Example of the transformed CSS with automatically versioned asset URLs that AssetMapper generates.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/asset_mapper.rst#2025-04-22_snippet_27\n\nLANGUAGE: css\nCODE:\n```\n/* public/assets/styles/app-3c16d92m.css */\n.quack {\n    background-image: url('../images/duck-3c16d92m.png');\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Event Dispatcher Debug Command for kernel.request\nDESCRIPTION: Command to list listeners registered for the kernel.request event and their priorities.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/events.rst#2025-04-22_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n$ php bin/console debug:event-dispatcher kernel.request\n```\n\n----------------------------------------\n\nTITLE: Filtering Translation Debug by Domain in Symfony\nDESCRIPTION: Shows how to debug translations for a specific domain using the --domain option with the debug:translation command.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/translation.rst#2025-04-22_snippet_48\n\nLANGUAGE: terminal\nCODE:\n```\n$ php bin/console debug:translation en --domain=messages\n```\n\n----------------------------------------\n\nTITLE: Configuring JoliNotif Desktop Notifications in PHP\nDESCRIPTION: Configuration example for setting up desktop notifications using JoliNotif in PHP format.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/notifier.rst#2025-04-22_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/notifier.php\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework): void {\n    $framework->notifier()\n        ->texterTransport('jolinotif', env('JOLINOTIF'))\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple PHP Template\nDESCRIPTION: A basic PHP template that displays a greeting, using htmlspecialchars for XSS protection.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/create_framework/routing.rst#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<!-- example.com/src/pages/hello.php -->\nHello <?= htmlspecialchars($name ?? 'World', ENT_QUOTES, 'UTF-8') ?>\n```\n\n----------------------------------------\n\nTITLE: Configuring Symfony Secrets in PHP\nDESCRIPTION: PHP configuration for Symfony's secrets management system. This example shows how to use the FrameworkConfig class with commented options for the vault directory, local dotenv file, and decryption environment variable.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/secrets.rst#2025-04-22_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/framework.php\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework): void {\n    $framework->secrets()\n        // ->vaultDirectory('%kernel.project_dir%/config/secrets/%kernel.environment%')\n        // ->localDotenvFile('%kernel.project_dir%/.env.%kernel.environment%.local')\n        // ->decryptionEnvVar('base64:default::SYMFONY_DECRYPTION_SECRET')\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Exporting Translation Linting Results to JSON in Symfony\nDESCRIPTION: Shows how to output translation linting results in JSON format using the --format option with lint:yaml and lint:xliff commands.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/translation.rst#2025-04-22_snippet_53\n\nLANGUAGE: terminal\nCODE:\n```\n$ php bin/console lint:yaml translations/ --format=json\n$ php bin/console lint:xliff translations/ --format=json\n```\n\n----------------------------------------\n\nTITLE: Configuring Twig Debug Mode Based on Kernel Debug (PHP)\nDESCRIPTION: This PHP configuration snippet provides the PHP equivalent for setting Twig's debug mode based on the `kernel.debug` parameter. It utilizes the `symfony/config` component and type-hinting for configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/front_controllers_and_kernel.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/twig.php\nuse Symfony\\Config\\TwigConfig;\n\nreturn static function (TwigConfig $twig): void {\n    // ...\n    $twig->debug('%kernel.debug%');\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling Verbose Output for Deprecations - Terminal - terminal\nDESCRIPTION: This command disables detailed deprecation output during PHPUnit runs by setting the 'verbose' flag to 0 in SYMFONY_DEPRECATIONS_HELPER. It is useful when deprecation details are too verbose and a summary is preferred. The output will be less detailed while test results and exit codes remain unaffected.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/phpunit_bridge.rst#2025-04-22_snippet_12\n\nLANGUAGE: terminal\nCODE:\n```\n$ SYMFONY_DEPRECATIONS_HELPER=verbose=0 ./vendor/bin/simple-phpunit\n```\n\n----------------------------------------\n\nTITLE: Debugging Twig Information using Symfony Console Command\nDESCRIPTION: Demonstrates the use of the debug:twig command to list information about Twig functions, filters, and global variables. Useful for checking custom Twig extensions and features added by packages.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/templates.rst#2025-04-22_snippet_32\n\nLANGUAGE: shell\nCODE:\n```\n# list general information\n$ php bin/console debug:twig\n\n# filter output by any keyword\n$ php bin/console debug:twig --filter=date\n\n# pass a template path to show the physical file which will be loaded\n$ php bin/console debug:twig @Twig/Exception/error.html.twig\n```\n\n----------------------------------------\n\nTITLE: Generating HTML Import Map in Twig\nDESCRIPTION: Example of an import map generated by the importmap() Twig function, which maps JavaScript module names to their versioned file paths.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/asset_mapper.rst#2025-04-22_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"importmap\">{\n    \"imports\": {\n        \"app\": \"/assets/app-4e986c1a.js\",\n        \"/assets/duck.js\": \"/assets/duck-1b7a64b3.js\",\n        \"bootstrap\": \"/assets/vendor/bootstrap/bootstrap.index-f093544d.js\"\n    }\n}</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Mailer in PHP\nDESCRIPTION: PHP configuration for Symfony Mailer that references the DSN from environment variables. This uses the PHP configuration API introduced in newer Symfony versions.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/mailer.php\nuse function Symfony\\Component\\DependencyInjection\\Loader\\Configurator\\env;\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework): void {\n    $framework->mailer()->dsn(env('MAILER_DSN'));\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring EqualTo Constraints in YAML\nDESCRIPTION: Example of defining EqualTo constraints using YAML configuration. It shows how to set constraints for firstName and age properties of a Person entity.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/EqualTo.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Person:\n    properties:\n        firstName:\n            - EqualTo: Mary\n        age:\n            - EqualTo:\n                value: 20\n```\n\n----------------------------------------\n\nTITLE: Configuring Fallback Translations in Symfony (PHP)\nDESCRIPTION: Sets 'en' as the fallback locale for translations when the primary translation is not found using PHP configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/translation.rst#2025-04-22_snippet_35\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/translation.php\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework): void {\n    // ...\n    $framework->translator()\n        ->fallbacks(['en'])\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring DivisibleBy Constraint in YAML\nDESCRIPTION: This YAML configuration applies the DivisibleBy constraint to the weight and quantity properties of the Item entity, ensuring they are divisible by 0.25 and 5 respectively.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/DivisibleBy.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Item:\n    properties:\n        weight:\n            - DivisibleBy: 0.25\n        quantity:\n            - DivisibleBy:\n                value: 5\n```\n\n----------------------------------------\n\nTITLE: Requiring Autoload Runtime in Symfony with PHP\nDESCRIPTION: This PHP snippet demonstrates including the Symfony autoload_runtime.php file to bootstrap application runtime. This is typically placed at the entry point of a Symfony-based application to load necessary Composer and Symfony dependencies prior to further initialization. No parameters are required; ensure that Composer has been set up and that autoload_runtime.php exists in the vendor directory.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/runtime.rst#2025-04-22_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\nrequire_once dirname(__DIR__).'/vendor/autoload_runtime.php';\n```\n\n----------------------------------------\n\nTITLE: Configuring BIC Validation with YAML in Symfony\nDESCRIPTION: This snippet demonstrates how to configure BIC validation using YAML configuration. It applies the BIC constraint to the businessIdentifierCode property of the Transaction entity.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Bic.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Transaction:\n    properties:\n        businessIdentifierCode:\n            - Bic: ~\n```\n\n----------------------------------------\n\nTITLE: Loading Profile Using Token in PHP\nDESCRIPTION: PHP code that retrieves a profile using the debug token from a previous response's HTTP headers.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/profiler.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$token = $response->headers->get('X-Debug-Token');\n$profile = $profiler->loadProfile($token);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom ReactPHPRunner for Symfony Runtime in PHP\nDESCRIPTION: This PHP class implements a custom RunnerInterface for integrating ReactPHP applications with the Symfony Runtime component. It takes a PSR-15 request handler implementation and a port number as dependencies, creates the ReactPHP HTTP server, and runs it on the specified port and event loop. Input dependencies include implementations for PSR-15, ReactPHP event loop, and HTTP server classes, while output is the server running until stopped and an exit status code returned. Ensure all listed dependencies are installed in your environment.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/runtime.rst#2025-04-22_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Psr\\Http\\Server\\RequestHandlerInterface;\nuse React\\EventLoop\\Factory as ReactFactory;\nuse React\\Http\\Server as ReactHttpServer;\nuse React\\Socket\\Server as ReactSocketServer;\nuse Symfony\\Component\\Runtime\\RunnerInterface;\n\nclass ReactPHPRunner implements RunnerInterface\n{\n    public function __construct(\n        private RequestHandlerInterface $application,\n        private int $port,\n    ) {\n    }\n\n    public function run(): int\n    {\n        $application = $this->application;\n        $loop = ReactFactory::create();\n\n        // configure ReactPHP to correctly handle the PSR-15 application\n        $server = new ReactHttpServer(\n            $loop,\n            function (ServerRequestInterface $request) use ($application): ResponseInterface {\n                return $application->handle($request);\n            }\n        );\n\n        // start the ReactPHP server\n        $socket = new ReactSocketServer($this->port, $loop);\n        $server->listen($socket);\n\n        $loop->run();\n\n        return 0;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Root Node and Ignoring Declaration with XmlEncoder in PHP\nDESCRIPTION: This PHP code shows how to combine several `XmlEncoder` context options: `xml_format_output` enables pretty-printing, `xml_root_node_name` changes the default 'response' root tag to 'track', and `encoder_ignored_node_types` with `\\XML_PI_NODE` prevents the initial `<?xml ... ?>` declaration from being included in the output.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer/encoders.rst#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$xmlEncoder->encode($data, 'xml', [\n    'xml_format_output' => true,\n    'xml_root_node_name' => 'track',\n    'encoder_ignored_node_types' => [\n        \\XML_PI_NODE, // removes XML declaration (the leading xml tag)\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Importing CSS from JavaScript in AssetMapper\nDESCRIPTION: Example of importing CSS files from JavaScript, which AssetMapper will transform into link tags in the rendered HTML.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/asset_mapper.rst#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n// assets/app.js\nimport '../styles/app.css';\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Symfony Framework (YAML)\nDESCRIPTION: This YAML configuration file sets up basic Symfony framework settings, including the secret key and profiler configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/micro_kernel_trait.rst#2025-04-22_snippet_11\n\nLANGUAGE: YAML\nCODE:\n```\n# config/framework.yaml\nframework:\n    secret: S0ME_SECRET\n    profiler: { only_exceptions: false }\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Group Sequence Provider in PHP\nDESCRIPTION: This snippet demonstrates how to configure an advanced group sequence provider using a separate class in Symfony, using PHP code without attributes.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/validation/sequence_provider.rst#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/User.php\nnamespace App\\Entity;\n\n// ...\nuse App\\Validator\\UserGroupProvider;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass User\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->setGroupProvider(UserGroupProvider::class);\n        $metadata->setGroupSequenceProvider(true);\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Service Closures in Compiler Passes\nDESCRIPTION: PHP code showing how to create a service closure within a compiler pass by using ServiceClosureArgument to wrap a service reference.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/service_closures.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\DependencyInjection\\Argument\\ServiceClosureArgument;\nuse Symfony\\Component\\DependencyInjection\\ContainerBuilder;\nuse Symfony\\Component\\DependencyInjection\\Reference;\n\npublic function process(ContainerBuilder $container): void\n{\n    // ...\n\n    $myService->addArgument(new ServiceClosureArgument(new Reference('mailer')));\n}\n```\n\n----------------------------------------\n\nTITLE: Using rootform Test to Check for Parent Form in Twig\nDESCRIPTION: Demonstrates the proper way to check if a form is the root form (has no parent) using the rootform test, which is more reliable than checking if form.parent is null.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/form_customization.rst#2025-04-22_snippet_11\n\nLANGUAGE: twig\nCODE:\n```\n{# DON'T DO THIS: this simple check can't differentiate between a form having\n   a parent form view and a form defining a nested form field called 'parent' #}\n\n{% if form.parent is null %}\n    {{ form_errors(form) }}\n{% endif %}\n\n{# DO THIS: this check is always reliable, even if the form defines a field called 'parent' #}\n\n{% if form is rootform %}\n    {{ form_errors(form) }}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Translation Paths in Symfony YAML\nDESCRIPTION: Demonstrates how to add custom translation directories using the paths option in the YAML configuration for Symfony's translator component.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/translation.rst#2025-04-22_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/translation.yaml\nframework:\n    translator:\n        paths:\n            - '%kernel.project_dir%/custom/path/to/translations'\n```\n\n----------------------------------------\n\nTITLE: Copying a Single File (PHP)\nDESCRIPTION: Uses the `Filesystem::copy` method to copy a file. By default, the file is copied only if the source modification time is newer than the target. Passing `true` as the third argument forces the copy operation, overwriting the target if it exists.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/filesystem.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// works only if image-ICC has been modified after image.jpg\n$filesystem->copy('image-ICC.jpg', 'image.jpg');\n\n// image.jpg will be overridden\n$filesystem->copy('image-ICC.jpg', 'image.jpg', true);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Schedule Provider with AsSchedule Attribute in PHP\nDESCRIPTION: Shows a PHP class `SaleTaskProvider` implementing `ScheduleProviderInterface`. The `AsSchedule` attribute registers this provider for the default schedule ('default'). The `getSchedule` method is where recurring messages and their frequencies are defined and returned within a `Schedule` object.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/scheduler.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Scheduler/SaleTaskProvider.php\nnamespace App\\Scheduler;\n\nuse Symfony\\Component\\Scheduler\\Attribute\\AsSchedule;\nuse Symfony\\Component\\Scheduler\\Schedule;\nuse Symfony\\Component\\Scheduler\\ScheduleProviderInterface;\n\n#[AsSchedule]\nclass SaleTaskProvider implements ScheduleProviderInterface\n{\n    public function getSchedule(): Schedule\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Question Helper in Symfony Command\nDESCRIPTION: Basic example of getting the QuestionHelper instance from a Symfony Command\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/helpers/questionhelper.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$helper = $this->getHelper('question');\n```\n\n----------------------------------------\n\nTITLE: Defining PasswordStrength Constraint using PHP Attributes\nDESCRIPTION: Demonstrates how to apply the PasswordStrength constraint to a property using PHP attributes in a User entity class.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/PasswordStrength.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/User.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass User\n{\n    #[Assert\\PasswordStrength]\n    protected $rawPassword;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving New Argument Using func_num_args and func_get_arg in PHP\nDESCRIPTION: This code demonstrates how to retrieve a newly added argument using func_num_args and func_get_arg functions. It's used to maintain backward compatibility when adding a new argument to a public method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/contributing/code/bc.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$stripWhitespace = 2 <= \\func_num_args() ? func_get_arg(1) : false;\n```\n\n----------------------------------------\n\nTITLE: Enabling Relative Protocol URLs with YAML in Symfony\nDESCRIPTION: Example of configuring URL validation to accept protocol-relative URLs using YAML configuration in Symfony.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Url.rst#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Author:\n    properties:\n        bioUrl:\n            - Url: { relativeProtocol: true }\n```\n\n----------------------------------------\n\nTITLE: Initializing Bootstrap Datepicker in JavaScript\nDESCRIPTION: JavaScript code to initialize the Bootstrap Datepicker library on form fields with the 'js-datepicker' class. This sets up a custom date picker for better cross-browser compatibility.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/date.rst#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script>\n    $(document).ready(function() {\n        // you may need to change this code if you are not using Bootstrap Datepicker\n        $('.js-datepicker').datepicker({\n            format: 'yyyy-mm-dd'\n        });\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Webpack Configurations in JavaScript\nDESCRIPTION: This snippet demonstrates how to define and export multiple Webpack configurations using Encore, including resetting Encore between configurations.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/advanced-config.rst#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// define the first configuration\nEncore\n    .setOutputPath('public/build/first_build/')\n    .setPublicPath('/build/first_build')\n    .addEntry('app', './assets/app.js')\n    .addStyleEntry('global', './assets/styles/global.scss')\n    .enableSassLoader()\n    .autoProvidejQuery()\n    .enableSourceMaps(!Encore.isProduction())\n;\n\n// build the first configuration\nconst firstConfig = Encore.getWebpackConfig();\n\n// Set a unique name for the config (needed later!)\nfirstConfig.name = 'firstConfig';\n\n// reset Encore to build the second config\nEncore.reset();\n\n// define the second configuration\nEncore\n    .setOutputPath('public/build/second_build/')\n    .setPublicPath('/build/second_build')\n    .addEntry('mobile', './assets/mobile.js')\n    .addStyleEntry('mobile', './assets/styles/mobile.less')\n    .enableLessLoader()\n    .enableSourceMaps(!Encore.isProduction())\n;\n\n// build the second configuration\nconst secondConfig = Encore.getWebpackConfig();\n\n// Set a unique name for the config (needed later!)\nsecondConfig.name = 'secondConfig';\n\n// export the final configuration as an array of multiple configurations\nmodule.exports = [firstConfig, secondConfig];\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Pre-compression in Symfony AssetMapper\nDESCRIPTION: This YAML configuration snippet shows how to set up asset pre-compression in AssetMapper, specifying the compression format and file extensions to compress.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/asset_mapper.rst#2025-04-22_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\nframework:\n    asset_mapper:\n        # ...\n\n        precompress:\n            format: 'zstandard'\n            # if you don't define the following option, AssetMapper will compress all\n            # the extensions considered safe (css, js, json, svg, xml, ttf, otf, wasm, etc.)\n            extensions: ['css', 'js', 'json', 'svg', 'xml']\n```\n\n----------------------------------------\n\nTITLE: Configuring Doctrine Token Provider in XML\nDESCRIPTION: Enables database storage for remember me tokens using Doctrine in XML configuration. This configuration instructs Doctrine to create a table for the remember me tokens.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/remember_me.rst#2025-04-22_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/security.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<srv:container xmlns=\"http://symfony.com/schema/dic/security\"\n    xmlns:srv=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/security\n        https://symfony.com/schema/dic/security/security-1.0.xsd\">\n\n    <config>\n        <!-- ... -->\n\n        <firewall name=\"main\">\n            <!-- ... -->\n\n            <remember-me>\n                <token-provider doctrine=\"true\"/>\n            </remember-me>\n        </firewall>\n    </config>\n</srv:container>\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony Flex using Composer (terminal)\nDESCRIPTION: Installs the symfony/flex Composer package, enabling Symfony Flex features and automation in a PHP application. This Composer command must be run from the project directory. Prerequisite: Composer is installed, and you are inside a valid PHP/Symfony project.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/flex.rst#2025-04-22_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require symfony/flex\n```\n\n----------------------------------------\n\nTITLE: Git Push Force Command\nDESCRIPTION: Terminal command for force pushing changes to a remote branch after rebasing\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/contributing/code/pull_requests.rst#2025-04-22_snippet_7\n\nLANGUAGE: terminal\nCODE:\n```\n$ git push --force origin BRANCH_NAME\n```\n\n----------------------------------------\n\nTITLE: Running the Full Symfony Test Suite\nDESCRIPTION: Command to run the complete Symfony test suite from the root directory using PHPUnit. This validates that all components are working correctly.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/contributing/code/tests.rst#2025-04-22_snippet_2\n\nLANGUAGE: terminal\nCODE:\n```\n$ php ./phpunit symfony\n```\n\n----------------------------------------\n\nTITLE: Applying Json Constraint with PHP Attributes in Symfony\nDESCRIPTION: This snippet demonstrates how to apply the Json constraint to a property using PHP attributes in a Symfony entity class. It includes a custom error message for invalid JSON.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Json.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Book.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Book\n{\n    #[Assert\\Json(\n        message: \"You've entered an invalid Json.\"\n    )]\n    private string $chapters;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying File Constraint using PHP Attributes\nDESCRIPTION: Shows how to apply the File constraint to the bioFile property using PHP 8 attributes, with maxSize, extensions, and a custom message.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/File.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Author.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Author\n{\n    #[Assert\\File(\n        maxSize: '1024k',\n        extensions: ['pdf'],\n        extensionsMessage: 'Please upload a valid PDF',\n    )]\n    protected File $bioFile;\n}\n```\n\n----------------------------------------\n\nTITLE: Class Constraint Validator Implementation\nDESCRIPTION: Implementation of the validator for the ConfirmedPaymentReceipt class constraint.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/validation/custom_constraint.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Validator;\n\nuse Symfony\\Component\\Validator\\Constraint;\nuse Symfony\\Component\\Validator\\ConstraintValidator;\nuse Symfony\\Component\\Validator\\Exception\\UnexpectedValueException;\n\nclass ConfirmedPaymentReceiptValidator extends ConstraintValidator\n{\n    /**\n     * @param PaymentReceipt $receipt\n     */\n    public function validate($receipt, Constraint $constraint): void\n    {\n        if (!$receipt instanceof PaymentReceipt) {\n            throw new UnexpectedValueException($receipt, PaymentReceipt::class);\n        }\n\n        if (!$constraint instanceof ConfirmedPaymentReceipt) {\n            throw new UnexpectedValueException($constraint, ConfirmedPaymentReceipt::class);\n        }\n\n        $receiptEmail = $receipt->getPayload()['email'] ?? null;\n        $userEmail = $receipt->getUser()->getEmail();\n\n        if ($userEmail !== $receiptEmail) {\n            $this->context\n                ->buildViolation($constraint->userDoesNotMatchMessage)\n                ->atPath('user.email')\n                ->addViolation();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Additional Image Validation Constraints in Symfony RST Documentation\nDESCRIPTION: This snippet continues the definition of image validation constraints, including maximum and minimum aspect ratio, width, and MIME types. It also includes customizable error messages and their parameters.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Image.rst#2025-04-22_snippet_10\n\nLANGUAGE: rst\nCODE:\n```\n``maxRatio``\n~~~~~~~~~~~~\n\n**type**: ``float``\n\nIf set, the aspect ratio (``width / height``) of the image file must be less\nthan or equal to this value.\n\n.. versionadded:: 7.3\n\n    The ``maxRatio`` option support for SVG files was introduced in Symfony 7.3.\n\n``maxRatioMessage``\n~~~~~~~~~~~~~~~~~~~\n\n**type**: ``string`` **default**: ``The image ratio is too big ({{ ratio }}).\nAllowed maximum ratio is {{ max_ratio }}``\n\nThe error message if the aspect ratio of the image exceeds `maxRatio`_.\n\nYou can use the following parameters in this message:\n\n===================  ==========================================================\nParameter            Description\n===================  ==========================================================\n``{{ max_ratio }}``  The maximum required ratio\n``{{ ratio }}``      The current (invalid) ratio\n===================  ==========================================================\n\n``maxWidth``\n~~~~~~~~~~~~\n\n**type**: ``integer``\n\nIf set, the width of the image file must be less than or equal to this\nvalue in pixels.\n\n``maxWidthMessage``\n~~~~~~~~~~~~~~~~~~~\n\n**type**: ``string`` **default**: ``The image width is too big ({{ width }}px).\nAllowed maximum width is {{ max_width }}px.``\n\nThe error message if the width of the image exceeds `maxWidth`_.\n\nYou can use the following parameters in this message:\n\n===================  ==========================================================\nParameter            Description\n===================  ==========================================================\n``{{ max_width }}``  The maximum allowed width\n``{{ width }}``      The current (invalid) width\n===================  ==========================================================\n\n``mimeTypes``\n~~~~~~~~~~~~~\n\n**type**: ``array`` or ``string`` **default**: ``image/*``\n\nYou can find a list of existing image mime types on the `IANA website`_.\n\n``mimeTypesMessage``\n~~~~~~~~~~~~~~~~~~~~\n\n**type**: ``string`` **default**: ``This file is not a valid image.``\n\nIf all the values of the `mimeTypes`_ option are a subset of ``image/*``, the\nerror message will be instead: ``The mime type of the file is invalid ({{ type }}). Allowed mime types are {{ types }}.``\n\n.. include:: /reference/constraints/_parameters-mime-types-message-option.rst.inc\n```\n\n----------------------------------------\n\nTITLE: Using the Lazy Attribute\nDESCRIPTION: Illustrates the use of the Lazy attribute to mark a class or parameter for lazy loading. This attribute simplifies the configuration of lazy services directly in the code.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/lazy_services.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Twig;\n\nuse Symfony\\Component\\DependencyInjection\\Attribute\\Lazy;\nuse Twig\\Extension\\ExtensionInterface;\n\n#[Lazy]\nclass AppExtension implements ExtensionInterface\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecating a Service in YAML for Symfony\nDESCRIPTION: Marks the App\\Service\\OldService as deprecated in a YAML service configuration block with custom message, package, and version for clarity. Dependencies: Symfony YAML services configuration, Symfony >=4.2. 'deprecated' keyword with a package name, version, and message (must include %service_id%). Input: service class id. Output: triggers deprecation warning on service use.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/alias_private.rst#2025-04-22_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\\nApp\\\\Service\\\\OldService:\\n    deprecated:\\n        package: 'vendor-name/package-name'\\n        version: '2.8'\\n        message: The \\\"%service_id%\\\" service is deprecated since vendor-name/package-name 2.8 and will be removed in 3.0.\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Attributes - PHP Standalone\nDESCRIPTION: Demonstrates how to configure allowed attributes for specific elements using standalone PHP.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/html_sanitizer.rst#2025-04-22_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\HtmlSanitizer\\HtmlSanitizer;\nuse Symfony\\Component\\HtmlSanitizer\\HtmlSanitizerConfig;\n\n$postSanitizer = new HtmlSanitizer(\n```\n\n----------------------------------------\n\nTITLE: Configuring Unique Constraint Using PHP Metadata\nDESCRIPTION: Example of applying the Unique constraint to a property using PHP metadata in an entity class.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Unique.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Person.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Person\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('contactEmails', new Assert\\Unique());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ISSN Constraint in YAML for Symfony Validation\nDESCRIPTION: Shows how to configure the ISSN validation constraint using YAML in Symfony's validation configuration file.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Issn.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Journal:\n    properties:\n        issn:\n            - Issn: ~\n```\n\n----------------------------------------\n\nTITLE: Using LessThan Constraint with Fixed Timezone in PHP Code\nDESCRIPTION: Example of applying the LessThan constraint with a fixed timezone using PHP code to validate date properties.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/LessThan.rst#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Person.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Person\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('age', new Assert\\LessThan('today UTC'));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Translation Parameters in PHP\nDESCRIPTION: Illustrates how to configure global translation parameters in the PHP configuration file. These parameters can be used across multiple translation messages without repetition.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/translation.rst#2025-04-22_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\n// config/packages/translator.php\nuse Symfony\\Config\\TwigConfig;\n\nreturn static function (TwigConfig $translator): void {\n    // ...\n    // when using the '%' wrapping characters, you must escape them\n    $translator->globals('%%app_name%%')->value('My application');\n    $translator->globals('{app_version}')->value('1.2.3');\n    $translator->globals('{url}')->value(['message' => 'url', 'parameters' => ['scheme' => 'https://']]);\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Success Handler in XML\nDESCRIPTION: XML configuration for setting a custom success handler for the login-link security firewall.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/login_link.rst#2025-04-22_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/security.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<srv:container xmlns=\"http://symfony.com/schema/dic/security\"\n    xmlns:srv=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/security\n        https://symfony.com/schema/dic/security/security-1.0.xsd\">\n\n    <config>\n        <firewall name=\"main\">\n            <login-link check-route=\"login_check\"\n                check-post-only=\"true\"\n                max-uses=\"1\"\n                lifetime=\"600\"\n                success-handler=\"App\\Security\\Authentication\\AuthenticationSuccessHandler\"\n            />\n        </firewall>\n    </config>\n</srv:container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom IDE Integration in Symfony (PHP)\nDESCRIPTION: Sets up a custom IDE integration by specifying a URL template for opening files. The template uses %f for file path and %l for line number placeholders.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_52\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/framework.php\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework): void {\n    $framework->ide('myide://open?url=file://%%f&line=%%l');\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Unique Constraint with Fields Option in PHP\nDESCRIPTION: Example of using the 'fields' option with the Unique constraint to check uniqueness of specific fields in a collection.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Unique.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/PointOfInterest.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass PointOfInterest\n{\n    #[Assert\\Unique(fields: ['latitude', 'longitude'])]\n    protected array $coordinates;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring BirthdayType with Array Placeholders\nDESCRIPTION: Example of adding a BirthdayType field with separate placeholder values for year, month, and day select boxes.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/birthday.rst#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$builder->add('birthdate', BirthdayType::class, [\n    'placeholder' => [\n        'year' => 'Year', 'month' => 'Month', 'day' => 'Day',\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Enabling SSI in Symfony PHP Configuration\nDESCRIPTION: Shows how to enable Server Side Includes in a Symfony application using PHP configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/http_cache/ssi.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/framework.php\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework): void {\n    $framework->ssi()\n        ->enabled(true)\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Abbreviating Controller Method Path\nDESCRIPTION: Example of using abbr_method filter with a controller method path\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#2025-04-22_snippet_54\n\nLANGUAGE: twig\nCODE:\n```\n{{ 'App\\\\Controller\\\\ProductController::list'|abbr_method }}\n```\n\n----------------------------------------\n\nTITLE: Customizing Confirmation Regex in Symfony Question\nDESCRIPTION: Example of customizing the regex pattern for confirmation answers\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/helpers/questionhelper.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$question = new ConfirmationQuestion(\n    'Continue with this action?',\n    false,\n    '/^(y|j)/i'\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring ENUM Mapping Type in YAML\nDESCRIPTION: YAML configuration for mapping ENUM database type to string in Doctrine\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine/dbal.rst#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/doctrine.yaml\ndoctrine:\n    dbal:\n        mapping_types:\n            enum: string\n```\n\n----------------------------------------\n\nTITLE: Configuring NotNull Constraint in YAML Format\nDESCRIPTION: Example of configuring the NotNull constraint for the firstName property in a YAML validation configuration file.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/NotNull.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Author:\n    properties:\n        firstName:\n            - NotNull: ~\n```\n\n----------------------------------------\n\nTITLE: Enabling Relative Protocol URLs with XML in Symfony\nDESCRIPTION: XML configuration example for allowing protocol-relative URLs in Symfony's URL validation constraint.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Url.rst#2025-04-22_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\Author\">\n        <property name=\"bioUrl\">\n            <constraint name=\"Url\">\n                <option name=\"relativeProtocol\">true</option>\n            </constraint>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Number Formatting in Symfony Translations\nDESCRIPTION: Shows how to format numbers, including percentages and currency, in Symfony translations using the ICU MessageFormat.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/formats/message_format.rst#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n# translations/messages+intl-icu.en.yaml\\nprogress: '{progress, number, percent} of the work is done'\\nvalue_of_object: 'This artifact is worth {value, number, currency}'\n```\n\n----------------------------------------\n\nTITLE: Adding Named Service to Service Subscriber\nDESCRIPTION: Example showing how to include a service with a custom internal name in a Service Subscriber implementation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/service_subscribers_locators.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Log\\LoggerInterface;\n\npublic static function getSubscribedServices(): array\n{\n    return [\n        // ...\n        'logger' => LoggerInterface::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Token Authentication Interface in Symfony\nDESCRIPTION: An interface used to mark controllers that require token authentication. This empty interface is used for tagging controllers that need special authentication handling.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/event_dispatcher.rst#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Controller;\n\ninterface TokenAuthenticatedController\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Lazy User Loading in Symfony Firewall (XML)\nDESCRIPTION: This XML configuration enables lazy user loading in a Symfony firewall. The lazy attribute is set to true on the firewall element, which means the user will only be loaded and the session started when the User object is actually accessed.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/security.rst#2025-04-22_snippet_16\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/security.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<srv:container xmlns=\"http://symfony.com/schema/dic/security\"\n    xmlns:srv=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/security\n        https://symfony.com/schema/dic/security/security-1.0.xsd\">\n\n    <config>\n        <firewall name=\"main\" lazy=\"true\">\n            <!-- ... -->\n        </firewall>\n    </config>\n</srv:container>\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Peer Fingerprint Verification in PHP\nDESCRIPTION: Example of enforcing certificate fingerprint verification when using self-signed certificates by specifying the SHA1 or MD5 hash of the expected certificate.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$dsn = 'smtp://user:pass@smtp.example.com?peer_fingerprint=6A1CF3B08D175A284C30BC10DE19162307C7286E';\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS for webpack-dev-server in webpack.config.js\nDESCRIPTION: JavaScript configuration to enable HTTPS for webpack-dev-server by specifying key and certificate files.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/dev-server.rst#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// webpack.config.js\n// ...\n\nEncore\n    // ...\n\n    .configureDevServerOptions(options => {\n        options.server = {\n            type: 'https',\n            options: {\n                key: '/path/to/server.key',\n                cert: '/path/to/server.crt',\n            }\n        }\n    })\n;\n```\n\n----------------------------------------\n\nTITLE: Configuring Country Validation with XML\nDESCRIPTION: Example of configuring the Country validation constraint using XML configuration. Defines validation rules for the country property using XML syntax.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Country.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\User\">\n        <property name=\"country\">\n            <constraint name=\"Country\"/>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Configuring ULID Validation with PHP Code in Symfony\nDESCRIPTION: Example of configuring the ULID validation constraint using PHP code with the loadValidatorMetadata method. This validates that the identifier property in the File entity contains a valid ULID.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Ulid.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/File.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass File\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('identifier', new Assert\\Ulid());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring One-To-Many Relationship with Orphan Removal in Symfony Entity\nDESCRIPTION: Defines a one-to-many relationship in a Category entity with orphanRemoval set to true. When orphanRemoval is enabled, if a Product is removed from the Category, it will be completely deleted from the database rather than just having its category_id set to null.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine/associations.rst#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Category.php\n\n// ...\n\n#[ORM\\OneToMany(targetEntity: Product::class, mappedBy: 'category', orphanRemoval: true)]\nprivate array $products;\n```\n\n----------------------------------------\n\nTITLE: Configuring Firewalls in XML\nDESCRIPTION: Example of configuring a firewall in Symfony's security.xml file. Shows how to define a firewall that matches URLs starting with /admin using XML configuration format.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/security.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/security.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<srv:container xmlns=\"http://symfony.com/schema/dic/security\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:srv=\"http://symfony.com/schema/dic/services\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/security\n        https://symfony.com/schema/dic/security/security-1.0.xsd\">\n\n    <config>\n        <!-- ... -->\n\n        <!-- 'pattern' is a regular expression matched against the incoming\n             request URL. If there's a match, authentication is triggered -->\n        <firewall name=\"main\" pattern=\"^/admin\">\n            <!-- the rest of options depend on the authentication mechanism -->\n            <!-- ... -->\n        </firewall>\n    </config>\n</srv:container>\n```\n\n----------------------------------------\n\nTITLE: Configuring API Tokens in Symfony Services\nDESCRIPTION: Configuration examples for defining API tokens in a Symfony application using YAML, XML, and PHP formats. These tokens can be used for API authentication in controllers.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/event_dispatcher.rst#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nparameters:\n    tokens:\n        client1: pass1\n        client2: pass2\n```\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <parameters>\n        <parameter key=\"tokens\" type=\"collection\">\n            <parameter key=\"client1\">pass1</parameter>\n            <parameter key=\"client2\">pass2</parameter>\n        </parameter>\n    </parameters>\n</container>\n```\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\n$container->setParameter('tokens', [\n    'client1' => 'pass1',\n    'client2' => 'pass2',\n]);\n```\n\n----------------------------------------\n\nTITLE: Applying Multiple Themes to Single Form\nDESCRIPTION: Twig template code demonstrating how to apply multiple form themes to a single form using an array syntax.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/form_themes.rst#2025-04-22_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{# apply multiple form themes but only to the form of this template #}\n{% form_theme form with [\n    'foundation_5_layout.html.twig',\n    'form/my_custom_theme.html.twig'\n] %}\n\n{# ... #}\n```\n\n----------------------------------------\n\nTITLE: Deprecating Code with Replacement Explanation in PHP\nDESCRIPTION: This PHPDoc example marks a feature as deprecated beginning with a specified version and advises the replacement to use instead. By indicating an alternative, developers are guided toward updated APIs or classes. This comment is intended for use with classes, methods, or properties; it requires no runtime dependencies unless extracted by static analysis tools.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/contributing/code/conventions.rst#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n/**\\n * @deprecated since Symfony 5.1, use Replacement instead.\\n */\n```\n\n----------------------------------------\n\nTITLE: Configuring Group Sequence Provider in PHP with Attributes\nDESCRIPTION: This snippet shows how to use PHP attributes to configure a User class as a group sequence provider for validation in Symfony.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/validation/sequence_provider.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/User.php\nnamespace App\\Entity;\n\n// ...\n\n#[Assert\\GroupSequenceProvider]\nclass User implements GroupSequenceProviderInterface\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Tailwind CSS Form Theme in Twig\nDESCRIPTION: This snippet demonstrates how to create a custom form theme based on the Tailwind CSS theme. It extends the base theme and overrides specific blocks to set default classes for various form elements.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/tailwindcss.rst#2025-04-22_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% use 'tailwind_2_layout.html.twig' %}\n\n{%- block form_row -%}\n    {%- set row_class = row_class|default('my row classes') -%}\n    {{- parent() -}}\n{%- endblock form_row -%}\n\n{%- block widget_attributes -%}\n    {%- set widget_class = widget_class|default('my widget classes') -%}\n    {%- set widget_disabled_class = widget_disabled_class|default('my disabled widget classes') -%}\n    {%- set widget_errors_class = widget_errors_class|default('my widget with error classes') -%}\n    {{- parent() -}}\n{%- endblock widget_attributes -%}\n\n{%- block form_label -%}\n    {%- set label_class = label_class|default('my label classes') -%}\n    {{- parent() -}}\n{%- endblock form_label -%}\n\n{%- block form_help -%}\n    {%- set help_class = help_class|default('my label classes') -%}\n    {{- parent() -}}\n{%- endblock form_help -%}\n\n{%- block form_errors -%}\n    {%- set error_item_class = error_item_class|default('my error item classes') -%}\n    {{- parent() -}}\n{%- endblock form_errors -%}\n```\n\n----------------------------------------\n\nTITLE: Creating Standalone Compiler Passes in Symfony\nDESCRIPTION: Demonstrates how to create and register separate compiler pass classes in Symfony, which can be used to modify the container during compilation without requiring an extension.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/dependency_injection/compilation.rst#2025-04-22_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\DependencyInjection\\Compiler\\CompilerPassInterface;\nuse Symfony\\Component\\DependencyInjection\\ContainerBuilder;\n\nclass CustomPass implements CompilerPassInterface\n{\n    public function process(ContainerBuilder $container): void\n    {\n        // ... do something during the compilation\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Returning a Response Object from Runtime Closure (PHP)\nDESCRIPTION: This PHP snippet demonstrates returning a `Symfony\\Component\\HttpFoundation\\Response` object directly from the runtime closure. The `SymfonyRuntime` uses `ResponseRunner` to send this response immediately, bypassing the full kernel handling.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/runtime.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// public/index.php\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nrequire_once dirname(__DIR__).'/vendor/autoload_runtime.php';\n\nreturn static function (): Response {\n    return new Response('Hello world');\n};\n```\n\n----------------------------------------\n\nTITLE: Overriding Kernel Charset in PHP\nDESCRIPTION: Example of how to override the default charset used by the Symfony kernel by extending the getCharset() method in the Kernel class.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/kernel.rst#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n// src/Kernel.php\nnamespace App;\n\nuse Symfony\\Component\\HttpKernel\\Kernel as BaseKernel;\n// ...\n\nclass Kernel extends BaseKernel\n{\n    public function getCharset(): string\n    {\n        return 'ISO-8859-1';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Property-Level Serialization Context with YAML in Symfony\nDESCRIPTION: This YAML snippet assigns a context to an object's property for serialization purposes. In this case, the datetime_format is set to 'Y-m-d' for the createdAt attribute of App\\Model\\Person. This configuration is part of config/serializer/person.yaml and integrates with Symfony's metadata-driven serialization.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer.rst#2025-04-22_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\n# config/serializer/person.yaml\nApp\\Model\\Person:\n    attributes:\n        createdAt:\n            contexts:\n                - context: { datetime_format: 'Y-m-d' }\n```\n\n----------------------------------------\n\nTITLE: Implementing Language Constraint with PHP Code in Symfony\nDESCRIPTION: Example of applying the Language constraint programmatically using PHP with the loadValidatorMetadata method. This validates that the preferredLanguage property contains a valid language code.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Language.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/User.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass User\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('preferredLanguage', new Assert\\Language());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Group Sequence Provider in YAML\nDESCRIPTION: This snippet demonstrates how to configure a User class as a group sequence provider using YAML format in Symfony.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/validation/sequence_provider.rst#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\User:\n    group_sequence_provider: true\n```\n\n----------------------------------------\n\nTITLE: YAML Output with Custom Indentation (8 Spaces)\nDESCRIPTION: Example YAML output generated by `Yaml::dump` when the indentation level is set to 8 spaces. Notice the increased spacing before nested elements.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/yaml.rst#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nfoo: bar\nbar:\n        foo: bar\n        bar: baz\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Asset Version Strategy in PHP\nDESCRIPTION: PHP class implementing VersionStrategyInterface to create a custom asset version strategy compatible with gulp-buster. It reads the manifest file and applies versioning to asset paths.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/custom_version_strategy.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// src/Asset/VersionStrategy/GulpBusterVersionStrategy.php\nnamespace App\\Asset\\VersionStrategy;\n\nuse Symfony\\Component\\Asset\\VersionStrategy\\VersionStrategyInterface;\n\nclass GulpBusterVersionStrategy implements VersionStrategyInterface\n{\n    private string $format;\n\n    /**\n     * @var string[]\n     */\n    private array $hashes;\n\n    public function __construct(\n        private string $manifestPath,\n        ?string $format = null,\n    ) {\n        $this->format = $format ?: '%s?%s';\n    }\n\n    public function getVersion(string $path): string\n    {\n        if (!is_array($this->hashes)) {\n            $this->hashes = $this->loadManifest();\n        }\n\n        return $this->hashes[$path] ?? '';\n    }\n\n    public function applyVersion(string $path): string\n    {\n        $version = $this->getVersion($path);\n\n        if ('' === $version) {\n            return $path;\n        }\n\n        return sprintf($this->format, $path, $version);\n    }\n\n    private function loadManifest(): array\n    {\n        return json_decode(file_get_contents($this->manifestPath), true);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Forcing Attribute Values in YAML Configuration\nDESCRIPTION: YAML configuration showing how to force specific attribute values on elements. This example demonstrates setting 'rel=\"noopener noreferrer\"' on all anchor elements in the HTML sanitizer.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/html_sanitizer.rst#2025-04-22_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/html_sanitizer.yaml\nframework:\n    html_sanitizer:\n        sanitizers:\n            app.post_sanitizer:\n                # ...\n                force_attributes:\n                    a:\n                        rel: noopener noreferrer\n```\n\n----------------------------------------\n\nTITLE: Configuring Assets Base Path (XML)\nDESCRIPTION: Example of configuring the base path for assets in the FrameworkBundle using XML configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/framework.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <framework:config>\n        <framework:assets base-path=\"/images\"/>\n    </framework:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Variables in Twig YAML\nDESCRIPTION: Shows how to define global variables for Twig templates in the YAML configuration file.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/templates.rst#2025-04-22_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/twig.yaml\ntwig:\n    # ...\n    globals:\n        ga_tracking: 'UA-xxxxx-x'\n```\n\n----------------------------------------\n\nTITLE: Splitting HTTP Header Values using HeaderUtils::split() in PHP\nDESCRIPTION: Shows how to use the static `HeaderUtils::split()` method to parse a complex HTTP header string (like `Accept-Language`) into a structured array based on specified separators (e.g., ',' and ';'). This helps in processing headers with multiple values and parameters.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\HttpFoundation\\HeaderUtils;\n\n// Splits an HTTP header by one or more separators\nHeaderUtils::split('da, en-gb;q=0.8', ',;');\n// => [['da'], ['en-gb','q=0.8']]\n```\n\n----------------------------------------\n\nTITLE: Configuring Cas2Handler in YAML\nDESCRIPTION: This YAML configuration sets up the Cas2Handler for CAS 2.0 authentication in the security.yaml file. It specifies the validation URL for the CAS server.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/access_token.rst#2025-04-22_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\nsecurity:\n    firewalls:\n        main:\n            access_token:\n                token_handler:\n                    cas:\n                        validation_url: https://www.example.com/cas/validate\n```\n\n----------------------------------------\n\nTITLE: Configuring Entity User Provider with Doctrine in Symfony (XML)\nDESCRIPTION: This XML snippet sets up an entity user provider in Symfony, using Doctrine to load users based on a specified entity class and property such as email. You must reference the App\\Entity\\User class and the property for lookup. The optional manager-name attribute supports multiple Doctrine entity managers. Place this configuration within config/packages/security.xml.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/user_providers.rst#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/security.xml -->\\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\\n<srv:container xmlns=\\\"http://symfony.com/schema/dic/security\\\"\\n    xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n    xmlns:srv=\\\"http://symfony.com/schema/dic/services\\\"\\n    xsi:schemaLocation=\\\"http://symfony.com/schema/dic/services\\n        https://symfony.com/schema/dic/services/services-1.0.xsd\\\">\\n\\n    <config>\\n        <provider name=\\\"users\\\">\\n            <!-- class:    the class of the entity that represents users\\n                 property: the property to query by - e.g. email, username, etc-->\\n            <entity class=\\\"App\\Entity\\User\\\" property=\\\"email\\\"/>\\n\\n            <!-- optional, if you're using multiple Doctrine entity\\n                 managers, \\\"manager-name\\\" defines which one to use -->\\n            <!-- <entity class=\\\"App\\Entity\\User\\\" property=\\\"email\\\"\\n                         manager-name=\\\"customer\\\"/> -->\\n        </provider>\\n\\n        <!-- ... -->\\n    </config>\\n</srv:container>\n```\n\n----------------------------------------\n\nTITLE: Implementing Slug Validation with PHP Attributes\nDESCRIPTION: Example showing how to apply the Slug constraint to a property using PHP attributes in a Symfony entity class.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Slug.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Author.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Author\n{\n    #[Assert\\Slug]\n    protected string $slug;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining minPropertyPath Option for Range Constraint in RST\nDESCRIPTION: Specifies the object property to be used as the min option. It includes information about the option type and provides an example of its usage.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Range.rst#2025-04-22_snippet_13\n\nLANGUAGE: rst\nCODE:\n```\n``minPropertyPath``\n~~~~~~~~~~~~~~~~~~~\n\n**type**: ``string``\n\nIt defines the object property whose value is used as ``min`` option.\n\nFor example, if you want to compare the ``$endDate`` property of some object\nwith regard to the ``$startDate`` property of the same object, use\n``minPropertyPath=\"startDate\"`` in the range constraint of ``$endDate``.\n\n.. tip::\n\n    When using this option, its value is available in error messages as the\n    ``{{ min_limit_path }}`` placeholder. Although it's not intended to\n    include it in the error messages displayed to end users, it's useful when\n    using APIs for doing any mapping logic on client-side.\n```\n\n----------------------------------------\n\nTITLE: Configuring Link URL Restrictions in YAML\nDESCRIPTION: YAML configuration for controlling URLs in anchor elements. Sets options for forcing HTTPS, allowed URL schemes, allowed hosts, and whether to permit relative links in the HTML sanitizer.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/html_sanitizer.rst#2025-04-22_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/html_sanitizer.yaml\nframework:\n    html_sanitizer:\n        sanitizers:\n            app.post_sanitizer:\n                # ...\n\n                # if `true`, all URLs using the `http://` scheme will be converted to\n                # use the `https://` scheme instead. `http` still needs to be allowed\n                # in `allowed_link_schemes`\n                force_https_urls: true\n\n                # specifies the allowed URL schemes. If the URL has a different scheme, the\n                # attribute will be dropped\n                allowed_link_schemes: ['http', 'https', 'mailto']\n\n                # specifies the allowed hosts, the attribute will be dropped if the\n                # URL contains a different host. Subdomains are allowed: e.g. the following\n                # config would also allow 'www.symfony.com', 'live.symfony.com', etc.\n                allowed_link_hosts: ['symfony.com']\n\n                # whether to allow relative links (i.e. URLs without scheme and host)\n                allow_relative_links: true\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP Form Login Authentication in YAML\nDESCRIPTION: Example of configuring form-based LDAP authentication in a Symfony application using YAML format. Defines the LDAP service and DN string pattern for user authentication.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/ldap.rst#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\nsecurity:\n    # ...\n\n    firewalls:\n        main:\n            # ...\n            form_login_ldap:\n                # ...\n                service: Symfony\\Component\\Ldap\\Ldap\n                dn_string: 'uid={user_identifier},dc=example,dc=com'\n```\n\n----------------------------------------\n\nTITLE: Configuring DateTime GreaterThanOrEqual with YAML\nDESCRIPTION: Example showing how to use the GreaterThanOrEqual constraint to validate that a DateTime property is at least the current day using YAML configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/GreaterThanOrEqual.rst#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Order:\n    properties:\n        deliveryDate:\n            - GreaterThanOrEqual: today\n```\n\n----------------------------------------\n\nTITLE: PHP Attributes Validation Configuration\nDESCRIPTION: Implementation of IsTrue constraint using PHP attributes syntax to validate the token.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/IsTrue.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Author.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Author\n{\n    protected string $token;\n\n    #[Assert\\IsTrue(message: 'The token is invalid.')]\n    public function isTokenValid(): bool\n    {\n        return $this->token === $this->generateToken();\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecating a Service in XML for Symfony\nDESCRIPTION: Declares App\\Service\\OldService as deprecated via XML with a package, version, and message (containing %service_id%). Dependencies: Symfony XML DI configuration. Uses <deprecated> child with required attributes and a custom message for guidance. Ensures backward compatibility warning emission. Limitation: XML syntax nuances for attribute case and schema validation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/alias_private.rst#2025-04-22_snippet_19\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services.xml -->\\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\\n<container xmlns=\\\"http://symfony.com/schema/dic/services\\\"\\n    xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-Instance\\\"\\n    xsi:schemaLocation=\\\"http://symfony.com/schema/dic/services https://symfony.com/schema/dic/services/services-1.0.xsd\\\">\\n\\n    <services>\\n        <service id=\\\"App\\\\Service\\\\OldService\\\">\\n            <deprecated package=\\\"vendor-name/package-name\\\" version=\\\"2.8\\\">The \\\"%service_id%\\\" service is deprecated since vendor-name/package-name 2.8 and will be removed in 3.0.</deprecated>\\n        </service>\\n    </services>\\n</container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Asset Versioning Strategies in PHP\nDESCRIPTION: PHP configuration for setting up complex asset versioning with custom strategies. Shows global strategy configuration and package-specific overrides.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/framework.php\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework): void {\n    // ...\n    $framework->assets()\n        ->versionStrategy('app.asset.my_versioning_strategy');\n\n    $framework->assets()->package('foo_package')\n        // this package removes any versioning (its assets won't be versioned)\n        ->version(null);\n\n    $framework->assets()->package('bar_package')\n        // this package uses its own strategy (the default strategy is ignored)\n        ->versionStrategy('app.asset.another_version_strategy');\n\n    $framework->assets()->package('baz_package')\n        // this package inherits the default strategy\n};\n```\n\n----------------------------------------\n\nTITLE: Restricting Routes by Port in Symfony Security\nDESCRIPTION: Configuration example showing how to restrict access to specific routes based on port number. This can be useful for local development environments or when certain features should only be accessible through specific ports.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/access_control.rst#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\nsecurity:\n    # ...\n    access_control:\n        - { path: ^/cart/checkout, roles: PUBLIC_ACCESS, port: 8080 }\n```\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/security.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<srv:container xmlns=\"http://symfony.com/schema/dic/security\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:srv=\"http://symfony.com/schema/dic/services\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/security\n        https://symfony.com/schema/dic/security/security-1.0.xsd\">\n\n    <config>\n        <!-- ... -->\n        <rule path=\"^/cart/checkout\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Group Sequence Provider in YAML\nDESCRIPTION: This snippet shows how to configure an advanced group sequence provider using a separate class in Symfony, using YAML format.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/validation/sequence_provider.rst#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\User:\n    group_sequence_provider: App\\Validator\\UserGroupProvider\n```\n\n----------------------------------------\n\nTITLE: Creating an Environment-Specific Alias using AsAlias Attribute (Multiple Env)\nDESCRIPTION: Shows how to use the `when` argument with an array in the `#[AsAlias]` attribute to make the alias (`app.mailer`) available in multiple specific configuration environments ('dev', 'test'). This feature requires Symfony 7.3 or later.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/alias_private.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// pass an array to apply it in multiple config environments\n#[AsAlias(id: 'app.mailer', when: ['dev', 'test'])]\nclass PhpMailer\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Access Decision Strategy in PHP\nDESCRIPTION: Configuration for setting the security access decision strategy to unanimous in PHP format, with options to control behavior when all voters abstain.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/voters.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/security.php\nuse Symfony\\Config\\SecurityConfig;\n\nreturn static function (SecurityConfig $security): void {\n    $security->accessDecisionManager()\n        ->strategy('unanimous')\n        ->allowIfAllAbstain(false)\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Asset Manifests in YAML\nDESCRIPTION: This YAML configuration defines the asset manifests for multiple Webpack builds in Symfony.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/advanced-config.rst#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/assets.yaml\nframework:\n    assets:\n        packages:\n            first_build:\n                json_manifest_path: '%kernel.project_dir%/public/first_build/manifest.json'\n            second_build:\n                json_manifest_path: '%kernel.project_dir%/public/second_build/manifest.json'\n```\n\n----------------------------------------\n\nTITLE: Defining Service as Global Variable in Twig PHP\nDESCRIPTION: Shows how to define a service as a global Twig variable in the PHP configuration file.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/templates.rst#2025-04-22_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/twig.php\nuse function Symfony\\Component\\DependencyInjection\\Loader\\Configurator\\service;\nuse Symfony\\Config\\TwigConfig;\n\nreturn static function (TwigConfig $twig): void {\n    // ...\n\n    $twig->global('uuid')->value(service('App\\Generator\\UuidGenerator'));\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring IsNull Constraint with XML in Symfony\nDESCRIPTION: This snippet illustrates how to apply the IsNull constraint to a property using XML configuration in Symfony. It ensures that the firstName property of the Author entity is exactly equal to null.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/IsNull.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\Author\">\n        <property name=\"firstName\">\n            <constraint name=\"IsNull\"/>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Defining NotNull Constraint in XML Configuration\nDESCRIPTION: Example of configuring the NotNull constraint for the firstName property using XML validation configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/NotNull.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\Author\">\n        <property name=\"firstName\">\n            <constraint name=\"NotNull\"/>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Applying UUID Constraint using PHP\nDESCRIPTION: Example of how to programmatically add the UUID constraint to a property in a Symfony entity class using PHP.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Uuid.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/File.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass File\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('identifier', new Assert\\Uuid());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting CSS to Sass in JavaScript Import\nDESCRIPTION: Shows how to modify JavaScript imports to use Sass (.scss) files instead of CSS files. This enables the use of Sass features like variables, nesting, and mixins.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/simple-example.rst#2025-04-22_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n  // assets/app.js\n- import './styles/app.css';\n+ import './styles/app.scss';\n```\n\n----------------------------------------\n\nTITLE: Configuring Negative Validation in YAML\nDESCRIPTION: YAML configuration example for implementing the Negative constraint on the withdraw property of a TransferItem entity.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Negative.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\TransferItem:\n    properties:\n        withdraw:\n            - Negative: ~\n```\n\n----------------------------------------\n\nTITLE: Registering Asset Version Strategy as Symfony Service in XML\nDESCRIPTION: XML configuration to register the custom GulpBusterVersionStrategy as a Symfony service, specifying the manifest file path and version format.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/custom_version_strategy.rst#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\"\n>\n    <services>\n        <service id=\"App\\Asset\\VersionStrategy\\GulpBusterVersionStrategy\">\n            <argument>%kernel.project_dir%/busters.json</argument>\n            <argument>%%s?version=%%s</argument>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Using OptionsResolverIntrospector for Option Inspection in PHP\nDESCRIPTION: This snippet shows how to use OptionsResolverIntrospector to inspect option definitions inside an OptionsResolver instance. It demonstrates setting default options and retrieving them using the introspector.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/options_resolver.rst#2025-04-22_snippet_33\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\OptionsResolver\\Debug\\OptionsResolverIntrospector;\nuse Symfony\\Component\\OptionsResolver\\OptionsResolver;\n\n$resolver = new OptionsResolver();\n$resolver->setDefaults([\n    'host' => 'smtp.example.org',\n    'port' => 25,\n]);\n\n$introspector = new OptionsResolverIntrospector($resolver);\n$introspector->getDefault('host'); // Retrieves \"smtp.example.org\"\n```\n\n----------------------------------------\n\nTITLE: Monolog XML Configuration\nDESCRIPTION: XML configuration for Monolog console handler with channel exclusions.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/logging/monolog_console.rst#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/dev/monolog.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:monolog=\"http://symfony.com/schema/dic/monolog\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <monolog:config>\n        <!-- ... -->\n\n        <monolog:handler name=\"console\" type=\"console\" process-psr-3-messages=\"false\">\n            <monolog:channels>\n                <monolog:channel>!event</monolog:channel>\n                <monolog:channel>!doctrine</monolog:channel>\n                <monolog:channel>!console</monolog:channel>\n            </monolog:channels>\n        </monolog:handler>\n    </monolog:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Creating Product Caster with LinkStub\nDESCRIPTION: Implementation of a Product-specific caster that wraps the brochure property in a LinkStub to make it clickable in HTML output. Shows how to enhance var dumper output with semantic metadata.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/var_dumper.rst#2025-04-22_snippet_30\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\VarDumper\\Caster\\LinkStub;\nuse Symfony\\Component\\VarDumper\\Cloner\\Stub;\n\nfunction ProductCaster(Product $object, array $array, Stub $stub, bool $isNested, int $filter = 0): array\n{\n    $array['brochure'] = new LinkStub($array['brochure']);\n\n    return $array;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Third-Party Package Paths with importmap\nDESCRIPTION: Command line example showing how to add specific file paths from a package to your importmap, useful when you need only certain files from a package.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/asset_mapper.rst#2025-04-22_snippet_19\n\nLANGUAGE: terminal\nCODE:\n```\n$ php bin/console importmap:require highlight.js/lib/core highlight.js/lib/languages/javascript\n```\n\n----------------------------------------\n\nTITLE: Implementing NotNull Constraint Using PHP Validator Metadata\nDESCRIPTION: Example of applying the NotNull constraint to the firstName property by defining validator metadata in PHP.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/NotNull.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Author.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Author\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('firstName', new Assert\\NotNull());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Selectable Hours Values for DateIntervalType - Symfony Forms - PHP\nDESCRIPTION: Shows how to define which hour values can be chosen in the form select when the 'choice' widget is enabled for DateIntervalType. Two PHP array patterns are demonstrated, allowing full control over the set of hour values exposed to the user.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/dateinterval.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// values displayed to users range from 0 to 23 (both inclusive)\n'hours' => range(1, 24),\n```\n\nLANGUAGE: php\nCODE:\n```\n// values displayed to users range from 1 to 24 (both inclusive)\n'hours' => array_combine(range(1, 24), range(1, 24)),\n```\n\n----------------------------------------\n\nTITLE: Configuring PHPUnit for Multiple Test Suites in Symfony\nDESCRIPTION: XML configuration for PHPUnit that sets up different test suites for shared tests and application-specific tests. This allows running tests for different parts of the application separately.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/multiple_kernels.rst#2025-04-22_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<testsuites>\n    <testsuite name=\"shared\">\n        <directory>tests</directory>\n    </testsuite>\n    <testsuite name=\"api\">\n        <directory>apps/api/tests</directory>\n    </testsuite>\n</testsuites>\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom Authenticator in YAML\nDESCRIPTION: Demonstrates how to enable the custom `ApiKeyAuthenticator` within the `main` firewall in a Symfony application using YAML configuration. The authenticator class is listed under the `custom_authenticators` key.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/custom_authenticator.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\nsecurity:\n\n    # ...\n    firewalls:\n        main:\n            custom_authenticators:\n                - App\\Security\\ApiKeyAuthenticator\n```\n\n----------------------------------------\n\nTITLE: Implementing Validation Constraints with PHP Attributes\nDESCRIPTION: Adding validation constraints using PHP attributes with translatable message.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/validation/translations.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Author.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Author\n{\n    #[Assert\\NotBlank(message: 'author.name.not_blank')]\n    public string $name;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Bootstrap JavaScript Dependencies\nDESCRIPTION: Command to install jQuery and Popper.js, which are required dependencies for Bootstrap JavaScript functionality (jQuery is only needed for Bootstrap versions prior to 5).\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/bootstrap.rst#2025-04-22_snippet_2\n\nLANGUAGE: terminal\nCODE:\n```\n# (jQuery is only required in versions prior to Bootstrap 5)\n$ npm install jquery @popperjs/core --save-dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Cache Pool in Symfony (XML)\nDESCRIPTION: Configures a Redis cache pool named 'cache.mycache' with a default lifetime of 1 hour using XML configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_22\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/framework.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <framework:config>\n        <framework:cache>\n            <framework:pool\n                name=\"cache.mycache\"\n                adapter=\"cache.adapter.redis\"\n                default-lifetime=\"3600\"\n            />\n        </framework:cache>\n        <!-- ... -->\n    </framework:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Applying NotBlank Constraint using PHP in Symfony Validation\nDESCRIPTION: This PHP code demonstrates how to apply the NotBlank constraint to the firstName property of an Author class using Symfony's validation system and the loadValidatorMetadata method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/NotBlank.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Author.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Author\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('firstName', new Assert\\NotBlank());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling User Locale in Symfony Controller\nDESCRIPTION: Example of accessing the user's locale from the Request object in a Symfony controller.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/translation.rst#2025-04-22_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\HttpFoundation\\Request;\n\npublic function index(Request $request): void\n{\n    $locale = $request->getLocale();\n}\n```\n\n----------------------------------------\n\nTITLE: Rotating Cryptographic Keys with Symfony CLI (terminal)\nDESCRIPTION: Shows how to rotate cryptographic keys in the Symfony secrets system. The command decrypts existing secrets with the old key, generates new keys, and re-encrypts all secrets. Developers will need the decryption key to decrypt previous versions.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/secrets.rst#2025-04-22_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\n$ php bin/console secrets:generate-keys --rotate\n```\n\n----------------------------------------\n\nTITLE: Creating Child Repository Classes in PHP\nDESCRIPTION: Example PHP classes that extend the base repository class to inherit its dependencies. These classes will be configured as services that extend a parent service.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/parent_services.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// src/Repository/DoctrineUserRepository.php\nnamespace App\\Repository;\n\nuse App\\Repository\\BaseDoctrineRepository;\n\n// ...\nclass DoctrineUserRepository extends BaseDoctrineRepository\n{\n    // ...\n}\n\n// src/Repository/DoctrinePostRepository.php\nnamespace App\\Repository;\n\nuse App\\Repository\\BaseDoctrineRepository;\n\n// ...\nclass DoctrinePostRepository extends BaseDoctrineRepository\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NotIdenticalTo Constraint with XML\nDESCRIPTION: Illustrates the configuration of the NotIdenticalTo constraint using XML format. It applies the constraint to the firstName and age properties of the Person class.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/NotIdenticalTo.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\Person\">\n    <property name=\"firstName\">\n            <constraint name=\"NotIdenticalTo\">\n                Mary\n            </constraint>\n        </property>\n        <property name=\"age\">\n            <constraint name=\"NotIdenticalTo\">\n                <option name=\"value\">15</option>\n            </constraint>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Configuring Toolbar AJAX Refresh in YAML\nDESCRIPTION: YAML configuration to enable automatic refresh of the web debug toolbar after AJAX requests in single-page applications.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/profiler.rst#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/web_profiler.yaml\nweb_profiler:\n    toolbar:\n        ajax_replace: true\n```\n\n----------------------------------------\n\nTITLE: Translating Button Labels with Placeholders in Symfony Forms\nDESCRIPTION: This example shows how to use translation placeholders for button labels in Symfony forms. It defines a translation message in YAML and then uses it in a form builder with a placeholder value.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/button.rst#2025-04-22_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\n# translations/messages.en.yaml\nform.order.submit_to_company: 'Send an order to %company%'\n```\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\ButtonType;\n// ...\n\n$builder->add('send', ButtonType::class, [\n    'label' => 'form.order.submit_to_company',\n    'label_translation_parameters' => [\n        '%company%' => 'ACME Inc.',\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Illustrating Parameter Evaluation in Bundle Configuration (YAML, XML, PHP)\nDESCRIPTION: Provides examples in YAML, XML, and PHP formats showing how the `logging` configuration option behaves when explicitly set to `true`, set to the `'%kernel.debug%'` parameter, or left to its default value (initially defined as the literal string '%kernel.debug%'). It highlights that the parameter is evaluated correctly by the container when explicitly provided in the configuration file but is treated as a literal string (evaluating to true because non-empty strings are truthy) when used as the default value directly in the Configuration class without proper injection.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/using_parameters_in_dic.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmy_bundle:\n    logging: true\n    # true, as expected\n\nmy_bundle:\n    logging: '%kernel.debug%'\n    # true/false (depends on 2nd argument of the Kernel class),\n    # as expected, because %kernel.debug% inside configuration\n    # gets evaluated before being passed to the extension\n\nmy_bundle: ~\n# passes the string \"%kernel.debug%\".\n# Which is always considered as true.\n# The Configurator does not know anything about\n# \"%kernel.debug%\" being a parameter.\n```\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:my-bundle=\"http://example.org/schema/dic/my_bundle\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://example.org/schema/dic/my_bundle\n        https://example.org/schema/dic/my_bundle/my_bundle-1.0.xsd\">\n\n    <my-bundle:config logging=\"true\"/>\n    <!-- true, as expected -->\n\n    <my-bundle:config logging=\"%kernel.debug%\"/>\n    <!-- true/false (depends on 2nd parameter of Kernel),\n         as expected, because %kernel.debug% inside configuration\n         gets evaluated before being passed to the extension -->\n\n    <my-bundle:config/>\n    <!-- passes the string \"%kernel.debug%\".\n         Which is always considered as true.\n         The Configurator does not know anything about\n         \"%kernel.debug%\" being a parameter. -->\n</container>\n```\n\nLANGUAGE: php\nCODE:\n```\n$container->loadFromExtension('my_bundle', [\n        'logging' => true,\n        // true, as expected\n    ]\n);\n\n$container->loadFromExtension('my_bundle', [\n        'logging' => \"%kernel.debug%\",\n        // true/false (depends on 2nd parameter of Kernel),\n        // as expected, because %kernel.debug% inside configuration\n        // gets evaluated before being passed to the extension\n    ]\n);\n\n$container->loadFromExtension('my_bundle');\n// passes the string \"%kernel.debug%\".\n// Which is always considered as true.\n// The Configurator does not know anything about\n// \"%kernel.debug%\" being a parameter.\n```\n\n----------------------------------------\n\nTITLE: Using NegativeOrZero Constraint with YAML Configuration in Symfony\nDESCRIPTION: Example of applying the NegativeOrZero constraint using YAML configuration in Symfony. This configuration ensures the 'level' property of the UnderGroundGarage entity must be a negative number or zero.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/NegativeOrZero.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\UnderGroundGarage:\n    properties:\n        level:\n            - NegativeOrZero: ~\n```\n\n----------------------------------------\n\nTITLE: Configuring ExpressionSyntax Constraint with YAML\nDESCRIPTION: Example showing how to configure the ExpressionSyntax constraint using YAML validation configuration for an Order entity.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/ExpressionSyntax.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Order:\n    properties:\n        promotion:\n            - ExpressionSyntax: ~\n        shippingOptions:\n            - ExpressionSyntax:\n                allowedVariables: ['user', 'shipping_centers']\n```\n\n----------------------------------------\n\nTITLE: Creating CustomerType Form Class in Symfony\nDESCRIPTION: This snippet shows the CustomerType form class that adds fields for the Customer entity's first name and last name.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/inherit_data_option.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Form/Type/CustomerType.php\nnamespace App\\Form\\Type;\n\nuse Symfony\\Component\\Form\\AbstractType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\TextType;\nuse Symfony\\Component\\Form\\FormBuilderInterface;\n\nclass CustomerType extends AbstractType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options): void\n    {\n        $builder\n            ->add('firstName', TextType::class)\n            ->add('lastName', TextType::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Compound Rate Limiters in XML\nDESCRIPTION: XML configuration for creating compound rate limiters. Defines two individual fixed window limiters and combines them into a compound limiter for a contact form.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/rate_limiter.rst#2025-04-22_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/rate_limiter.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony\n        https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <framework:config>\n        <framework:rate-limiter>\n            <framework:limiter name=\"two_per_minute\"\n                policy=\"fixed_window\"\n                limit=\"2\"\n                interval=\"1 minute\"\n            />\n\n            <framework:limiter name=\"five_per_hour\"\n                policy=\"fixed_window\"\n                limit=\"5\"\n                interval=\"1 hour\"\n            />\n\n            <framework:limiter name=\"contact_form\"\n                policy=\"compound\"\n            >\n                <limiter>two_per_minute</limiter>\n                <limiter>five_per_hour</limiter>\n            </framework:limiter>\n        </framework:rate-limiter>\n    </framework:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Defining Negative Validation in XML\nDESCRIPTION: XML configuration example showing how to apply the Negative constraint to the withdraw property of a TransferItem entity.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Negative.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\TransferItem\">\n        <property name=\"withdraw\">\n            <constraint name=\"Negative\"></constraint>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Configuring SMTP Transport with Custom Port in ENV File\nDESCRIPTION: Example of using the generic SMTP transport instead of provider-specific transport when a custom port needs to be specified.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_8\n\nLANGUAGE: env\nCODE:\n```\n# .env\nMAILER_DSN=smtp://KEY:DOMAIN@smtp.eu.mailgun.org.com:25\n```\n\n----------------------------------------\n\nTITLE: Configuring Country Validation with PHP Attributes\nDESCRIPTION: Example of configuring the Country validation constraint using PHP attributes in a User entity class. Validates that the country property contains a valid ISO 3166-1 alpha-2 country code.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Country.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/User.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass User\n{\n    #[Assert\\Country]\n    protected string $country;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Asset Example\nDESCRIPTION: Example showing traditional hardcoded asset URLs in HTML, which is no longer recommended for complex applications.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/asset.rst#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/css/main.css\">\n\n<!-- ... -->\n\n<a href=\"/\"><img src=\"/images/logo.png\" alt=\"logo\"></a>\n```\n\n----------------------------------------\n\nTITLE: Configuring Link URL Restrictions in XML\nDESCRIPTION: XML configuration for controlling URLs in anchor elements. Sets options for forcing HTTPS, allowed URL schemes, allowed hosts, and whether to permit relative links in the HTML sanitizer.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/html_sanitizer.rst#2025-04-22_snippet_28\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/html_sanitizer.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <framework:config>\n        <!-- force-https-urls: if `true`, all URLs using the `http://` scheme will be\n                               converted to use the `https://` scheme instead.\n                               `http` still needs to be allowed in `allowed-link-scheme` -->\n        <!-- allow-relative-links: whether to allow relative links (i.e. URLs without\n                                   scheme and host) -->\n        <framework:html-sanitizer\n            force-https-urls=\"true\"\n            allow-relative-links=\"true\"\n        >\n            <!-- specifies the allowed URL schemes. If the URL has a different scheme,\n                 the attribute will be dropped -->\n            <allowed-link-scheme>http</allowed-link-scheme>\n            <allowed-link-scheme>https</allowed-link-scheme>\n            <allowed-link-scheme>mailto</allowed-link-scheme>\n\n            <!-- specifies the allowed hosts, the attribute will be dropped if the\n                 URL contains a different host. Subdomains are allowed: e.g. the following\n                 config would also allow 'www.symfony.com', 'live.symfony.com', etc. -->\n            <allowed-link-host>symfony.com</allowed-link-host>\n        </framework:html-sanitizer>\n    </framework:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Running Dump Output with Custom Format Using Environment Variable in Terminal\nDESCRIPTION: This command sets the VAR_DUMPER_FORMAT environment variable to 'server' (or to a TCP endpoint) to direct dump output to a VarDumper server rather than the default output. It is useful for temporarily rerouting debug dumps without changing application configuration. Prerequisite: a dump server must be running and accessible; the given CLI command should support environment variables.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/var_dumper.rst#2025-04-22_snippet_8\n\nLANGUAGE: terminal\nCODE:\n```\n$ VAR_DUMPER_FORMAT=server [your-cli-command]\n```\n\n----------------------------------------\n\nTITLE: Activating switch_user in Symfony Security Firewall (PHP)\nDESCRIPTION: Enables the switchUser feature in a Symfony security firewall using PHP configuration. Typically located in config/packages/security.php. It uses Symfony's config builder, calling ->switchUser() on the firewall. The relevant role and parameter defaults apply.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/impersonating_user.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/security.php\\nuse Symfony\\Config\\SecurityConfig;\\n\\nreturn static function (SecurityConfig $security): void {\\n    // ...\\n    $security->firewall('main')\\n        // ...\\n        ->switchUser()\\n    ;\\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Packages in PHP\nDESCRIPTION: PHP configuration for Symfony asset packages that defines a custom package named 'avatars' with a specific CDN base URL for serving avatar images.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/framework.php\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework): void {\n    // ...\n    $framework->assets()\n        ->package('avatars')\n            ->baseUrls(['http://static_cdn.example.com/avatars']);\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring PHPUnit Deprecation Helper in phpunit.xml.dist\nDESCRIPTION: Configures the `SYMFONY_DEPRECATIONS_HELPER` environment variable within the `phpunit.xml.dist` file using the `<php>` and `<env>` tags. Setting `value=\"max[total]=999999\"` effectively allows a very high number of deprecations, useful when needing to temporarily suppress warnings during upgrades or when immediate fixes aren't feasible.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/upgrade_major.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- phpunit.xml.dist -->\n<phpunit>\n    <!-- ... -->\n\n    <php>\n        <env name=\"SYMFONY_DEPRECATIONS_HELPER\" value=\"max[total]=999999\"/>\n    </php>\n</phpunit>\n```\n\n----------------------------------------\n\nTITLE: Optimizing Password Hasher Configuration for Tests (PHP)\nDESCRIPTION: This PHP configuration snippet for `config/packages/test/security.php` optimizes password hashing for tests. It demonstrates configuring the `App\\Entity\\User` hasher to either use 'plaintext' (disabling hashing) or the 'auto' algorithm with minimum cost values (`cost`, `timeCost`, `memoryCost`) for faster test runs.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/passwords.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/test/security.php\nuse App\\Entity\\User;\nuse Symfony\\Config\\SecurityConfig;\n\nreturn static function (SecurityConfig $security): void {\n    // ...\n\n    // Use your user class name here\n    $security->passwordHasher(User::class)\n        ->algorithm('plaintext'); // disable hashing (only do this in tests!)\n\n    // or use the lowest possible values\n    $security->passwordHasher(User::class)\n        ->algorithm('auto') // This should be the same value as in config/packages/security.yaml\n        ->cost(4) // Lowest possible value for bcrypt\n        ->timeCost(2) // Lowest possible value for argon\n        ->memoryCost(10) // Lowest possible value for argon\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Session Value Resolver Example in PHP\nDESCRIPTION: Demonstrates how to target specific value resolvers using attributes.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/controller/value_resolver.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Controller;\n\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpFoundation\\Session\\SessionInterface;\nuse Symfony\\Component\\HttpKernel\\Attribute\\ValueResolver;\nuse Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\SessionValueResolver;\nuse Symfony\\Component\\Routing\\Attribute\\Route;\n\nclass SessionController\n{\n    #[Route('/')]\n    public function __invoke(\n        #[ValueResolver(SessionValueResolver::class)]\n        SessionInterface $session = null\n    ): Response\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CompilerPassInterface in an Extension\nDESCRIPTION: Shows how to execute custom code during container compilation by implementing CompilerPassInterface in an extension class, allowing for service definition manipulation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/dependency_injection/compilation.rst#2025-04-22_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n// ...\nuse Symfony\\Component\\DependencyInjection\\Compiler\\CompilerPassInterface;\n\nclass AcmeDemoExtension implements ExtensionInterface, CompilerPassInterface\n{\n    public function process(ContainerBuilder $container): void\n    {\n        // ... do something during the compilation\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Shuffling Array Environment Variables in XML\nDESCRIPTION: Example of using the shuffle processor to randomly order array elements in an environment variable using XML configuration. This randomizes the order of Redis nodes for a RedisCluster.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/env_var_processors.rst#2025-04-22_snippet_25\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/framework.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony\n        https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <parameters>\n        <parameter key=\"env(REDIS_NODES)\">redis://127.0.0.1:6380,redis://127.0.0.1:6381</parameter>\n    </parameters>\n\n    <services>\n        <service id=\"RedisCluster\" class=\"RedisCluster\">\n            <argument>null</argument>\n            <argument>%env(shuffle:csv:REDIS_NODES)%</argument>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Relative File Path Generation\nDESCRIPTION: Converts absolute file paths to paths relative to project root\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#2025-04-22_snippet_61\n\nLANGUAGE: twig\nCODE:\n```\n{{ file|file_relative }}\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables from Custom Path\nDESCRIPTION: PHP code snippet showing how to manually load environment variables from a custom .env file path using the Symfony Dotenv component.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration.rst#2025-04-22_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\nuse Symfony\\Component\\Dotenv\\Dotenv;\n\n(new Dotenv())->bootEnv(dirname(__DIR__).'my/custom/path/to/.env');\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for Symfony UX bundle\nDESCRIPTION: The package.json file must define Stimulus controllers under the 'symfony' configuration, including controller settings, imports, and peer dependencies. This configuration is essential for the bundle to work with Symfony's Stimulus integration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/create_ux_bundle.rst#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"@acme/feature\",\n    \"version\": \"1.0.0\",\n    \"symfony\": {\n        \"controllers\": {\n            \"slug\": {\n                \"main\": \"dist/controller.js\",\n                \"fetch\": \"eager\",\n                \"enabled\": true,\n                \"autoimport\": {\n                    \"@acme/feature/dist/bootstrap4-theme.css\": false,\n                    \"@acme/feature/dist/bootstrap5-theme.css\": true\n                }\n            }\n        },\n        \"importmap\": {\n            \"@hotwired/stimulus\": \"^3.0.0\",\n            \"slugify\": \"^1.6.5\"\n        }\n    },\n    \"peerDependencies\": {\n        \"@hotwired/stimulus\": \"^3.0.0\",\n        \"slugify\": \"^1.6.5\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Relative Dates with XML\nDESCRIPTION: Example showing how to use XML to configure the GreaterThanOrEqual constraint with a relative time expression to validate that a DateTime property is at least 5 hours in the future.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/GreaterThanOrEqual.rst#2025-04-22_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\Order\">\n        <property name=\"deliveryDate\">\n            <constraint name=\"GreaterThanOrEqual\">+5 hours</constraint>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Configuring Password Hashers with Migration in XML\nDESCRIPTION: XML configuration for password hashers with migration support. This configuration enables automatic upgrading of password hashing algorithms when users authenticate.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/passwords.rst#2025-04-22_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/security.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:security=\"http://symfony.com/schema/dic/security\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/security\n        https://symfony.com/schema/dic/security/security-1.0.xsd\n        http://symfony.com/schema/dic/security\n        https://symfony.com/schema/dic/security/security-1.0.xsd\">\n\n    <security:config>\n        <!-- ... -->\n\n        <security:password-hasher class=\"legacy\"\n            algorithm=\"sha256\"\n            encode-as-base64=\"false\"\n            iterations=\"1\"\n        />\n\n        <!-- algorithm: the new hasher, along with its options -->\n        <security:password-hasher class=\"App\\Entity\\User\"\n            algorithm=\"sodium\"\n        >\n            <!-- uses the bcrypt hasher with the default options -->\n            <security:migrate-from>bcrypt</security:migrate-from>\n\n            <!-- uses the legacy hasher configured above -->\n            <security:migrate-from>legacy</security:migrate-from>\n        </security:password-hasher>\n    </security:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Instantiating the EventDispatcher in PHP\nDESCRIPTION: Demonstrates how to create a new instance of the `EventDispatcher` class from the `Symfony\\Component\\EventDispatcher` namespace. This dispatcher object is the central hub for managing event listeners and dispatching events.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/event_dispatcher.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\EventDispatcher\\EventDispatcher;\\n\\n$dispatcher = new EventDispatcher();\n```\n\n----------------------------------------\n\nTITLE: Spanning Multiple Columns\nDESCRIPTION: Shows how to create table cells that span multiple columns using TableCell\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/helpers/table.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Console\\Helper\\Table;\nuse Symfony\\Component\\Console\\Helper\\TableCell;\nuse Symfony\\Component\\Console\\Helper\\TableSeparator;\n\n$table = new Table($output);\n$table\n    ->setHeaders(['ISBN', 'Title', 'Author'])\n    ->setRows([\n        ['99921-58-10-7', 'Divine Comedy', 'Dante Alighieri'],\n        new TableSeparator(),\n        [new TableCell('This value spans 3 columns.', ['colspan' => 3])],\n    ])\n;\n$table->render();\n```\n\n----------------------------------------\n\nTITLE: Adding a Placeholder for Select Boxes in DateIntervalType - Symfony Forms - PHP\nDESCRIPTION: Demonstrates configuring the 'placeholder' option in a DateIntervalType field rendered as select boxes (widget set to 'choice'). Allows either an empty placeholder for all components, or specifying custom placeholder strings for each interval part. This affects user interface clarity and accessibility, and uses PHP associative arrays.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/dateinterval.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$builder->add('remindEvery', DateIntervalType::class, [\n    'placeholder' => '',\n]);\n```\n\nLANGUAGE: php\nCODE:\n```\n$builder->add('remindEvery', DateIntervalType::class, [\n    'placeholder' => ['years' => 'Years', 'months' => 'Months', 'days' => 'Days'],\n]);\n```\n\n----------------------------------------\n\nTITLE: Setting up Slack DSN Environment Variable\nDESCRIPTION: Environment variable configuration for Slack chatter transport\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/notifier.rst#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# .env\nSLACK_DSN=slack://TOKEN@default?channel=CHANNEL\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony Workflow Component\nDESCRIPTION: Command to install the Symfony Workflow component using Composer in a Symfony Flex application.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/workflow.rst#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ composer require symfony/workflow\n```\n\n----------------------------------------\n\nTITLE: Enabling ESI in Symfony XML Configuration\nDESCRIPTION: XML configuration to enable ESI in a Symfony application, showing the structure needed for framework configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/http_cache/esi.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/framework.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony\n        https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <framework:config>\n        <!-- ... -->\n        <framework:esi enabled=\"true\"/>\n    </framework:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Enabling ESI in Symfony YAML Configuration\nDESCRIPTION: YAML configuration to enable ESI in a Symfony application. This must be added to the framework configuration to activate ESI functionality.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/http_cache/esi.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/framework.yaml\nframework:\n    # ...\n    esi: true\n```\n\n----------------------------------------\n\nTITLE: Defining UserPassword Constraint in XML\nDESCRIPTION: Example showing how to configure the UserPassword constraint using XML format. Sets up validation rules for the oldPassword property in a constraint mapping.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/UserPassword.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Form\\Model\\ChangePassword\">\n        <property name=\"oldPassword\">\n            <constraint\n                name=\"Symfony\\Component\\Security\\Core\\Validator\\Constraints\\UserPassword\"\n            >\n                <option name=\"message\">Wrong value for your current password</option>\n            </constraint>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Framework with HttpKernel\nDESCRIPTION: Shows the basic framework class extending HttpKernel to inherit core functionality.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/create_framework/http_kernel_httpkernel_class.rst#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace Simplex;\n\nuse Symfony\\Component\\HttpKernel\\HttpKernel;\n\nclass Framework extends HttpKernel\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Twig Form Themes in YAML\nDESCRIPTION: Shows how to set form themes for all forms in the application using YAML configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/twig.rst#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/twig.yaml\ntwig:\n    form_themes: ['bootstrap_5_layout.html.twig', 'form/my_theme.html.twig']\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Defining AtLeastOneOf Constraint in XML\nDESCRIPTION: Example of configuring AtLeastOneOf validation constraints using XML format, showing the same validation rules for Student entity properties.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/AtLeastOneOf.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\Student\">\n        <property name=\"password\">\n            <constraint name=\"AtLeastOneOf\">\n                <option name=\"constraints\">\n                    <constraint name=\"Regex\">\n                        <option name=\"pattern\">/#/</option>\n                    </constraint>\n                    <constraint name=\"Length\">\n                        <option name=\"min\">10</option>\n                    </constraint>\n                </option>\n            </constraint>\n        </property>\n        <property name=\"grades\">\n            <constraint name=\"AtLeastOneOf\">\n                <option name=\"constraints\">\n                    <constraint name=\"Count\">\n                        <option name=\"min\">3</option>\n                    </constraint>\n                    <constraint name=\"All\">\n                        <option name=\"constraints\">\n                            <constraint name=\"GreaterThanOrEqual\">\n                                5\n                            </constraint>\n                        </option>\n                    </constraint>\n                </option>\n            </constraint>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Configuring DateTime GreaterThanOrEqual with XML\nDESCRIPTION: Example showing how to use XML configuration to validate that a DateTime property is at least the current day using the GreaterThanOrEqual constraint.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/GreaterThanOrEqual.rst#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\Order\">\n        <property name=\"deliveryDate\">\n            <constraint name=\"GreaterThanOrEqual\">today</constraint>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Validating Positive Numbers with YAML in Symfony\nDESCRIPTION: Example of using the Positive constraint in a YAML configuration file to ensure an Employee's income is a positive number.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Positive.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Employee:\n    properties:\n        income:\n            - Positive: ~\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Manifest Path for Assets (YAML)\nDESCRIPTION: Example of configuring the JSON manifest path for assets in the FrameworkBundle using YAML configuration. Includes global and package-specific settings.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/framework.yaml\nframework:\n    assets:\n        # this manifest is applied to every asset (including packages)\n        json_manifest_path: \"%kernel.project_dir%/public/build/manifest.json\"\n        # you can use absolute URLs too and Symfony will download them automatically\n        # json_manifest_path: 'https://cdn.example.com/manifest.json'\n        packages:\n            foo_package:\n                # this package uses its own manifest (the default file is ignored)\n                json_manifest_path: \"%kernel.project_dir%/public/build/a_different_manifest.json\"\n                # Throws an exception when an asset is not found in the manifest\n                strict_mode: %kernel.debug%\n            bar_package:\n                # this package uses the global manifest (the default file is used)\n                base_path: '/images'\n```\n\n----------------------------------------\n\nTITLE: Discriminator Map with Default Type in Symfony Serializer\nDESCRIPTION: Demonstrates configuring a discriminator map with a default type, allowing deserialization without explicitly specifying the type property in the input data.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer.rst#2025-04-22_snippet_62\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nuse Symfony\\Component\\Serializer\\Attribute\\DiscriminatorMap;\n\n#[DiscriminatorMap(\n    typeProperty: 'type',\n    mapping: [\n        'product' => Product::class,\n        'shipping' => Shipping::class,\n    ],\n    defaultType: 'product',\n)]\ninterface InvoiceItemInterface\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Packages in XML\nDESCRIPTION: XML configuration for defining asset packages in Symfony with custom base URLs. This creates an 'avatars' package pointing to a CDN location.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/framework.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <framework:config>\n        <framework:assets>\n            <framework:package\n                name=\"avatars\"\n                base-url=\"http://static_cdn.example.com/avatars\"/>\n        </framework:assets>\n    </framework:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Creating Symfony Extension Class\nDESCRIPTION: This code snippet shows how to create a dependency injection extension class for a Symfony bundle. It defines the basic structure of the extension class including the load() method where service definitions are typically loaded.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/bundles/extension.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// src/DependencyInjection/AcmeHelloExtension.php\nnamespace Acme\\HelloBundle\\DependencyInjection;\n\nuse Symfony\\Component\\DependencyInjection\\ContainerBuilder;\nuse Symfony\\Component\\DependencyInjection\\Extension\\Extension;\n\nclass AcmeHelloExtension extends Extension\n{\n    public function load(array $configs, ContainerBuilder $container): void\n    {\n        // ... you'll load the files here later\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Updates with Messenger\nDESCRIPTION: Example of dispatching Mercure updates asynchronously using Symfony's Messenger component.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mercure.rst#2025-04-22_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/PublishController.php\nnamespace App\\Controller;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Mercure\\Update;\nuse Symfony\\Component\\Messenger\\MessageBusInterface;\n\nclass PublishController extends AbstractController\n{\n    public function publish(MessageBusInterface $bus): Response\n    {\n        $update = new Update(\n            'https://example.com/books/1',\n            json_encode(['status' => 'OutOfStock'])\n        );\n\n        // Sync, or async (Doctrine, RabbitMQ, Kafka...)\n        $bus->dispatch($update);\n\n        return new Response('published!');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Selectable Minutes Values for DateIntervalType - Symfony Forms - PHP\nDESCRIPTION: Shows PHP patterns to define which minute values are selectable in a DateIntervalType rendered with the 'choice' widget. Uses either sequential or associative arrays to precisely specify the selectable range. Useful for limiting or localizing form input.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/dateinterval.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// values displayed to users range from 0 to 59 (both inclusive)\n'minutes' => range(1, 60),\n```\n\nLANGUAGE: php\nCODE:\n```\n// values displayed to users range from 1 to 60 (both inclusive)\n'minutes' => array_combine(range(1, 60), range(1, 60)),\n```\n\n----------------------------------------\n\nTITLE: Configuring ElasticsearchLogstashHandler as a Service in YAML\nDESCRIPTION: Example of declaring the ElasticsearchLogstashHandler as a service using YAML configuration. Shows both basic registration and detailed configuration with constructor arguments.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/logging/handlers.rst#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nservices:\n    Symfony\\Bridge\\Monolog\\Handler\\ElasticsearchLogstashHandler: ~\n\n    # optionally, configure the handler using the constructor arguments (shown values are default)\n    Symfony\\Bridge\\Monolog\\Handler\\ElasticsearchLogstashHandler:\n        arguments:\n            $endpoint: \"http://127.0.0.1:9200\"\n            $index: \"monolog\"\n            $client: null\n            $level: !php/enum Monolog\\Level::Debug\n            $bubble: true\n            $elasticsearchVersion: '1.0.0'\n```\n\n----------------------------------------\n\nTITLE: Configuring Monolog Handlers in XML Format for Symfony\nDESCRIPTION: XML configuration for setting up Monolog handlers in Symfony, specifically configuring the deduplicated handler that uses symfony_mailer for sending error notifications via email. Includes options for customizing email recipients, subject, and formatting.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/logging/monolog_email.rst#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<monolog:handler\n    name=\"deduplicated\"\n    type=\"deduplication\"\n    handler=\"symfony_mailer\"\n/>\n<monolog:handler\n    name=\"symfony_mailer\"\n    type=\"symfony_mailer\"\n    from-email=\"error@example.com\"\n    subject=\"An Error Occurred! %%message%%\"\n    level=\"debug\"\n    formatter=\"monolog.formatter.html\"\n    content-type=\"text/html\">\n\n    <monolog:to-email>error@example.com</monolog:to-email>\n\n    <!-- or list of recipients -->\n    <!--\n    <monolog:to-email>dev1@example.com</monolog:to-email>\n    <monolog:to-email>dev2@example.com</monolog:to-email>\n    ...\n    -->\n</monolog:handler>\n</monolog:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony PHPUnit Bridge Using Composer in Terminal (Bash)\nDESCRIPTION: This snippet shows the command to install the Symfony PHPUnit Bridge as a development dependency using Composer. The package provides tools for advanced PHPUnit testing and deprecation management. 'composer' must be installed, and the command should be run in your PHP project's root directory. This will add the bridge to your composer.json file and make its features available.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/phpunit_bridge.rst#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require --dev symfony/phpunit-bridge\n```\n\n----------------------------------------\n\nTITLE: Displaying Tagged Services in Symfony Console\nDESCRIPTION: Command to list all tagged services in a Symfony application using the console debug container command.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/dic_tags.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ php bin/console debug:container --tags\n```\n\n----------------------------------------\n\nTITLE: Modifying Webpack Config in JavaScript\nDESCRIPTION: This snippet demonstrates how to fetch the Webpack config from Encore and modify it by adding a new file extension to resolve.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/advanced-config.rst#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// webpack.config.js\n\nconst Encore = require('@symfony/webpack-encore');\n\n// ... all Encore config here\n\n// fetch the config, then modify it!\nconst config = Encore.getWebpackConfig();\n\n// add an extension\nconfig.resolve.extensions.push('json');\n\n// export the final config\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Channels in PHP\nDESCRIPTION: PHP configuration for adding custom logging channels without tagged services\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/logging/channels_handlers.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/monolog.php\nuse Symfony\\Config\\MonologConfig;\n\nreturn static function (MonologConfig $monolog): void {\n    $monolog->channels(['foo', 'bar', 'foo_bar']);\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Choice Constraint with PHP Attributes\nDESCRIPTION: Example of using the Choice constraint with PHP attributes to validate city and genre properties.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Choice.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Author.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Author\n{\n    public const GENRES = ['fiction', 'non-fiction'];\n\n    #[Assert\\Choice(['New York', 'Berlin', 'Tokyo'])]\n    protected string $city;\n\n    #[Assert\\Choice(choices: Author::GENRES, message: 'Choose a valid genre.')]\n    protected string $genre;\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving Environment Variables with Parameters in XML\nDESCRIPTION: Example of using the resolve processor to replace container parameters within environment variables in XML configuration. This sets up a Sentry DSN that includes a dynamically defined host parameter.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/env_var_processors.rst#2025-04-22_snippet_19\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/sentry.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <parameters>\n        <parameter key=\"sentry_host\">10.0.0.1</parameter>\n        <parameter key=\"env(SENTRY_DSN)\">http://%sentry_host%/project</parameter>\n    </parameters>\n\n    <sentry:config dsn=\"%env(resolve:SENTRY_DSN)%\"/>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Defining IBAN Validation using XML\nDESCRIPTION: XML configuration for implementing IBAN validation on the Transaction entity's bankAccountNumber property using Symfony's constraint mapping.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Iban.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\Transaction\">\n        <property name=\"bankAccountNumber\">\n            <constraint name=\"Iban\">\n                <option name=\"message\">\n                    This is not a valid International Bank Account Number (IBAN).\n                </option>\n            </constraint>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML Sanitizer in Standalone PHP\nDESCRIPTION: Standalone PHP configuration for HTML sanitizer to allow and drop attributes. Creates a new HtmlSanitizer instance that allows 'data-attr' on all elements, drops it from 'section' elements, and drops 'style' from all elements.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/html_sanitizer.rst#2025-04-22_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\HtmlSanitizer\\HtmlSanitizer;\nuse Symfony\\Component\\HtmlSanitizer\\HtmlSanitizerConfig;\n\n$postSanitizer = new HtmlSanitizer(\n    (new HtmlSanitizerConfig())\n        // allow the \"data-attr\" on all safe elements...\n        ->allowAttribute('data-attr', '*')\n\n        // ...except for the <section> element\n        ->dropAttribute('data-attr', ['section'])\n\n        // disallows \"style' on any allowed element\n        ->dropAttribute('style', '*')\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Constructor Injection in Service Container (XML)\nDESCRIPTION: XML configuration for injecting a mailer service into the NewsletterManager using constructor injection.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/injection_types.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <!-- ... -->\n\n        <service id=\"App\\Mail\\NewsletterManager\">\n            <argument type=\"service\" id=\"mailer\"/>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Referencing Parameters in XML Configuration\nDESCRIPTION: Shows how to reference a previously defined parameter in an XML configuration file using the %parameter_name% syntax.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration.rst#2025-04-22_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/some_package.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony\n        https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <!-- any string surrounded by two % is replaced by that parameter value -->\n    <some-package:config email-address=\"%app.admin_email%\">\n        <!-- ... -->\n    </some-package:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Docker Containers - Docker Compose - Terminal\nDESCRIPTION: Demonstrates the command to rebuild and start Docker services after making configuration changes or installing new Symfony recipes that affect Docker setup. Requires docker-compose to be installed and relevant docker-compose files present in the project. The command rebuilds service images and starts all defined containers, ensuring updated configuration is applied.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/docker.rst#2025-04-22_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\n$ docker-compose up --build\n```\n\n----------------------------------------\n\nTITLE: Using expectDeprecation in PHPUnit Tests with Symfony Bridge - PHP - php\nDESCRIPTION: This code demonstrates how to use the ExpectDeprecationTrait in SymfonyBridge-enabled PHPUnit tests. The trait provides the expectDeprecation() method, which asserts that a specific deprecation message is triggered during the test. Each call expects a message matching the format given, and multiple assertions can be made within a single test method. This requires the PHPUnit Bridge and is intended for verifying that legacy code correctly triggers deprecations.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/phpunit_bridge.rst#2025-04-22_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse PHPUnit\\Framework\\TestCase;\\nuse Symfony\\Bridge\\PhpUnit\\ExpectDeprecationTrait;\\n\\nclass MyTest extends TestCase\\n{\\n    use ExpectDeprecationTrait;\\n\\n    /**\\n     * @group legacy\\n     */\\n    public function testDeprecatedCode(): void\\n    {\\n        // test some code that triggers the following deprecation:\\n        // trigger_deprecation('vendor-name/package-name', '5.1', 'This \\\"Foo\\\" method is deprecated.');\\n        $this->expectDeprecation('Since vendor-name/package-name 5.1: This \\\"%s\\\" method is deprecated');\\n\\n        // ...\\n\\n        // test some code that triggers the following deprecation:\\n        // trigger_deprecation('vendor-name/package-name', '4.4', 'The second argument of the \\\"Bar\\\" method is deprecated.');\\n        $this->expectDeprecation('Since vendor-name/package-name 4.4: The second argument of the \\\"%s\\\" method is deprecated.');\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Type Guesser in YAML Configuration\nDESCRIPTION: YAML configuration for registering the custom type guesser service with the form.type_guesser tag\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/type_guesser.rst#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n    App\\Form\\TypeGuesser\\PhpDocTypeGuesser:\n        tags: [form.type_guesser]\n```\n\n----------------------------------------\n\nTITLE: Defining Separate Normalization and Denormalization Contexts with XML in Symfony\nDESCRIPTION: This XML defines distinct normalization and denormalization contexts for the createdAt property of the App\\Model\\Person class. The normalization-context uses format 'Y-m-d'; the denormalization-context specifies 'Y-m-d\\TH:i:sP'. The structure follows Symfony's serializer-mapping XML schema for precise metadata mapping.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer.rst#2025-04-22_snippet_20\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/serializer/person.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<serializer xmlns=\"http://symfony.com/schema/dic/serializer-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/serializer-mapping\n        https://symfony.com/schema/dic/serializer-mapping/serializer-mapping-1.0.xsd\"\n>\n    <class name=\"App\\Model\\Person\">\n        <attribute name=\"createdAt\">\n            <normalization-context>\n                <entry name=\"datetime_format\">Y-m-d</entry>\n            </normalization-context>\n\n            <denormalization-context>\n                <entry name=\"datetime_format\">Y-m-d\\TH:i:sP</entry>\n            </denormalization-context>\n        </attribute>\n    </class>\n</serializer>\n```\n\n----------------------------------------\n\nTITLE: Importing npm Packages with Importmap\nDESCRIPTION: Example of importing an npm package using a clean import statement after it's been added to the importmap.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/asset_mapper.rst#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Alert } from 'bootstrap';\n// ...\n```\n\n----------------------------------------\n\nTITLE: Defining Week Constraint with PHP Attributes in Symfony\nDESCRIPTION: Example of using the Week constraint with PHP attributes to validate that a 'startWeek' property contains a week number between the first and twentieth week of 2022.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Week.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/OnlineCourse.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass OnlineCourse\n{\n    #[Assert\\Week(min: '2022-W01', max: '2022-W20')]\n    protected string $startWeek;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Translation Parameters for Submit Button Label in Symfony Form\nDESCRIPTION: Demonstrates how to set translation parameters for the submit button label, allowing for dynamic content in translated labels.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/submit.rst#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\SubmitType;\n// ...\n\n$builder->add('send', SubmitType::class, [\n    'label' => 'form.order.submit_to_company',\n    'label_translation_parameters' => [\n        '%company%' => 'ACME Inc.',\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Referencing Bundle Resources using Physical Paths in PHP/Symfony\nDESCRIPTION: Demonstrates the recommended practice of using physical paths to reference bundle resources like service configuration files within a Symfony bundle. `__DIR__` is a PHP magic constant representing the directory of the current file, ensuring the path is relative to the file's location.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/bundles/best_practices.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n__DIR__/config/services.xml\n```\n\n----------------------------------------\n\nTITLE: Using Callback with Choice Constraint (XML)\nDESCRIPTION: Example of using a callback method to provide choices for the Choice constraint in XML configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Choice.rst#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\Author\">\n        <property name=\"genre\">\n            <constraint name=\"Choice\">\n                <option name=\"callback\">getGenres</option>\n            </constraint>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Routing Loader Service in YAML\nDESCRIPTION: YAML service configuration demonstrating how to define a custom routing loader service, `App\\Routing\\CustomLoader`, and tag it with `routing.loader`. This tag registers the service with Symfony's routing component, allowing it to be used for loading route definitions from custom sources or formats.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/dic_tags.rst#2025-04-22_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n    App\\Routing\\CustomLoader:\n        tags: [routing.loader]\n```\n\n----------------------------------------\n\nTITLE: Configuring Monolog Handler with Custom Formatter in XML\nDESCRIPTION: XML configuration for a Monolog handler that uses the custom formatter. This configures the 'main' stream handler to use the session request formatter, enabling the token to be included in log messages.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/logging/processors.rst#2025-04-22_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/prod/monolog.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:monolog=\"http://symfony.com/schema/dic/monolog\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/monolog\n        https://symfony.com/schema/dic/monolog/monolog-1.0.xsd\">\n\n    <monolog:config>\n        <monolog:handler\n            name=\"main\"\n            type=\"stream\"\n            path=\"%kernel.logs_dir%/%kernel.environment%.log\"\n            level=\"debug\"\n            formatter=\"monolog.formatter.session_request\"\n        />\n    </monolog:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Vue.js JSX with CSS Modules\nDESCRIPTION: Implementation of scoped styles in Vue.js JSX components using CSS Modules\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/vuejs.rst#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n// Component.jsx\nimport styles from './Component.css?module' // suffix with \"?module\"\n\nexport default {\n    name: 'Component',\n    render() {\n        return (\n            <div>\n                <h1 class={styles.title}>\n                    Hello World\n                </h1>\n            </div>\n        )\n    }\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n/* Component.css */\n\n.title {\n    color: red\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Comments to .env Files in Symfony\nDESCRIPTION: Example of how to add comments to Symfony .env files by prefixing lines with the # character. Comments help document the purpose of environment variables.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration.rst#2025-04-22_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\n# database credentials\nDB_USER=root\nDB_PASS=pass # this is the secret password\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML5 Tel Input Field\nDESCRIPTION: Example of the basic HTML output generated by the TelType field. The field renders as an HTML5 input with type=\"tel\", allowing for telephone number input without enforcing specific validation patterns.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/tel.rst#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"tel\">\n```\n\n----------------------------------------\n\nTITLE: Using NegativeOrZero Constraint with PHP Attributes in Symfony\nDESCRIPTION: Example of applying the NegativeOrZero constraint to a property using PHP attributes in Symfony. This ensures the 'level' property of the UnderGroundGarage entity must be a negative number or zero.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/NegativeOrZero.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/TransferItem.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass UnderGroundGarage\n{\n    #[Assert\\NegativeOrZero]\n    protected int $level;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Symfony Workers\nDESCRIPTION: YAML configuration for automatically starting processes alongside the Symfony webserver\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/symfony_server.rst#2025-04-22_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nworkers:\n    npm_encore_watch: ~\n    messenger_consume_async: ~\n    build_spa:\n        cmd: ['npm', '--cwd', './spa/', 'dev']\n    docker_compose: ~\n```\n\n----------------------------------------\n\nTITLE: Implementing PrependExtensionInterface in Symfony Extension\nDESCRIPTION: Basic implementation of PrependExtensionInterface in a Symfony bundle extension class to enable configuration prepending.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/bundles/prepend_extension.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Acme/HelloBundle/DependencyInjection/AcmeHelloExtension.php\nnamespace Acme\\HelloBundle\\DependencyInjection;\n\nuse Symfony\\Component\\DependencyInjection\\ContainerBuilder;\nuse Symfony\\Component\\DependencyInjection\\Extension\\PrependExtensionInterface;\nuse Symfony\\Component\\HttpKernel\\DependencyInjection\\Extension;\n\nclass AcmeHelloExtension extends Extension implements PrependExtensionInterface\n{\n    // ...\n\n    public function prepend(ContainerBuilder $container): void\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling OPcache Timestamp Validation\nDESCRIPTION: PHP configuration to disable OPcache timestamp validation, which improves performance by preventing unnecessary file timestamp checks in production environments.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/performance.rst#2025-04-22_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n; php.ini\nopcache.validate_timestamps=0\n```\n\n----------------------------------------\n\nTITLE: Defining Service Decorators with PHP Attributes\nDESCRIPTION: This snippet demonstrates how to use PHP attributes to define service decorators with priorities in Symfony.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/service_decoration.rst#2025-04-22_snippet_15\n\nLANGUAGE: php\nCODE:\n```\npublic function __construct(\n    #[AutowireDecorated]\n    private $inner,\n) {\n}\n// ...\n}\n\n#[AsDecorator(decorates: Foo::class, priority: 1)]\nclass Baz\n{\n    public function __construct(\n        #[AutowireDecorated]\n        private $inner,\n    ) {\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Stopwatch in Twig Templates\nDESCRIPTION: Example of using the stopwatch Twig tag to profile template rendering performance. This can be used to measure the execution time of specific template blocks.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/performance.rst#2025-04-22_snippet_13\n\nLANGUAGE: twig\nCODE:\n```\n{% stopwatch 'render-blog-posts' %}\n    {% for post in blog_posts %}\n        {# ... #}\n    {% endfor %}\n{% endstopwatch %}\n```\n\n----------------------------------------\n\nTITLE: Configuring NotCompromisedPassword Validation using YAML\nDESCRIPTION: This example demonstrates how to define NotCompromisedPassword validation using YAML configuration. The constraint is applied to the rawPassword property of the User entity to prevent using compromised passwords.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/NotCompromisedPassword.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\User:\n    properties:\n        rawPassword:\n            - NotCompromisedPassword\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Password Hasher in Symfony YAML\nDESCRIPTION: This YAML configuration snippet shows how to define a password hasher using the 'id' setting in Symfony's security.yaml file. It references the custom password hasher class.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/passwords.rst#2025-04-22_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\nsecurity:\n    # ...\n    password_hashers:\n        app_hasher:\n            # the service ID of your custom hasher (the FQCN using the default services.yaml)\n            id: 'App\\Security\\Hasher\\MyCustomPasswordHasher'\n```\n\n----------------------------------------\n\nTITLE: Custom Not Found Message with MapEntity\nDESCRIPTION: Demonstrates how to set a custom message for the NotFoundHttpException when an entity is not found using the message option in MapEntity.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine.rst#2025-04-22_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n#[Route('/product/{product_id}')]\npublic function show(\n    #[MapEntity(id: 'product_id', message: 'The product does not exist')]\n    Product $product\n): Response\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Using Static Callback from Different Class (YAML)\nDESCRIPTION: Example of using a static callback method from a different class for the Choice constraint in YAML configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Choice.rst#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Author:\n    properties:\n        genre:\n            - Choice: { callback: [App\\Entity\\Genre, getGenres] }\n```\n\n----------------------------------------\n\nTITLE: Applying Tailwind CSS Form Theme in Twig Template\nDESCRIPTION: This snippet demonstrates how to apply the Tailwind CSS form theme to a specific form in a Twig template. It uses the form_theme tag to set the theme and then renders the form.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/tailwindcss.rst#2025-04-22_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{# ... #}\n{# this tag only applies to the forms defined in this template #}\n{% form_theme form 'tailwind_2_layout.html.twig' %}\n\n{% block body %}\n    <h1>User Sign Up:</h1>\n    {{ form(form) }}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Decoding Allowed Languages from JSON Environment Variable in Symfony with YAML Configuration\nDESCRIPTION: Shows how to decode a JSON-encoded string from the ALLOWED_LANGUAGES env var and assign it to a parameter in YAML configuration for Symfony. Relies on the 'json' environment processor, returning either an array or null, useful for configuring dynamic lists. Input is a JSON string environment variable.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/env_var_processors.rst#2025-04-22_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/framework.yaml\\nparameters:\\n    env(ALLOWED_LANGUAGES): '[\\\"en\\\",\\\"de\\\",\\\"es\\\"]'\\n    app_allowed_languages: '%env(json:ALLOWED_LANGUAGES)%'\\n\n```\n\n----------------------------------------\n\nTITLE: Using Callback with Choice Constraint (PHP Attributes)\nDESCRIPTION: Example of using a callback method to provide choices for the Choice constraint using PHP attributes.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Choice.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Author.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Author\n{\n    #[Assert\\Choice(callback: 'getGenres')]\n    protected string $genre;\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Assets in Twig Templates\nDESCRIPTION: Shows how to reference mapped assets in Twig templates using the asset() function, which adds version hashes automatically.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/asset_mapper.rst#2025-04-22_snippet_2\n\nLANGUAGE: html+twig\nCODE:\n```\n<img src=\"{{ asset('images/duck.png') }}\">\n```\n\n----------------------------------------\n\nTITLE: Modifying Controller Arguments in kernel.controller_arguments Event Listener\nDESCRIPTION: PHP code snippet showing how to modify controller arguments in a kernel.controller_arguments event listener.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/events.rst#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\HttpKernel\\Event\\ControllerArgumentsEvent;\n\npublic function onKernelControllerArguments(ControllerArgumentsEvent $event): void\n{\n    // ...\n\n    // get controller and request arguments\n    $namedArguments = $event->getRequest()->attributes->all();\n    $controllerArguments = $event->getArguments();\n\n    // set the controller arguments to modify the original arguments or add new ones\n    $event->setArguments($newArguments);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Twig Loader\nDESCRIPTION: Configuration for registering a custom Twig template loader service with priority setting using the twig.loader tag.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/dic_tags.rst#2025-04-22_snippet_38\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n    App\\Twig\\CustomLoader:\n        tags:\n            - { name: twig.loader, priority: 0 }\n```\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"App\\Twig\\CustomLoader\">\n            <tag name=\"twig.loader\" priority=\"0\"/>\n        </service>\n    </services>\n</container>\n```\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Twig\\CustomLoader;\n\n$container\n    ->register(CustomLoader::class)\n    ->addTag('twig.loader', ['priority' => 0])\n;\n```\n\n----------------------------------------\n\nTITLE: Setting Process Idle Timeout in Symfony\nDESCRIPTION: This example demonstrates how to set both a total timeout and an idle timeout for a process. The process is considered timed out if either the total runtime exceeds the timeout or if no output is produced for the idle timeout duration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/process.rst#2025-04-22_snippet_21\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Process\\Process;\n\n$process = new Process(['something-with-variable-runtime']);\n$process->setTimeout(3600);\n$process->setIdleTimeout(60);\n$process->run();\n```\n\n----------------------------------------\n\nTITLE: Registering Test Namespaces in PHPUnit Config\nDESCRIPTION: XML configuration example showing how to register time-sensitive test namespaces in phpunit.xml.dist file.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/phpunit_bridge.rst#2025-04-22_snippet_28\n\nLANGUAGE: xml\nCODE:\n```\n<!-- phpunit.xml.dist -->\n<!-- ... -->\n<listeners>\n    <listener class=\"Symfony\\Bridge\\PhpUnit\\SymfonyTestsListener\">\n            <arguments>\n                <array>\n                    <element key=\"time-sensitive\"><string>Acme\\MyClassTest</string></element>\n                </array>\n            </arguments>\n        </listener>\n</listeners>\n```\n\n----------------------------------------\n\nTITLE: Configuring NotBlank Constraint in YAML for Symfony Validation\nDESCRIPTION: This YAML configuration applies the NotBlank constraint to the firstName property of the App\\Entity\\Author class in Symfony's validation system.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/NotBlank.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Author:\n    properties:\n        firstName:\n            - NotBlank: ~\n```\n\n----------------------------------------\n\nTITLE: Importing Images in JavaScript with Webpack Encore\nDESCRIPTION: Demonstrates how to import image files in JavaScript to get their public paths. When an image is imported, Webpack copies it to the output directory and returns its public path.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/copy-files.rst#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// assets/app.js\n\n// returns the final, public path to this file\n// path is relative to this file - e.g. assets/images/logo.png\nimport logoPath from '../images/logo.png';\n\nlet html = `<img src=\"${logoPath}\" alt=\"ACME logo\">`;\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Manifest Path for Assets (XML)\nDESCRIPTION: Example of configuring the JSON manifest path for assets in the FrameworkBundle using XML configuration. Includes global and package-specific settings.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/framework.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <framework:config>\n        <!-- this manifest is applied to every asset (including packages) -->\n        <framework:assets json-manifest-path=\"%kernel.project_dir%/public/build/manifest.json\">\n        <!-- you can use absolute URLs too and Symfony will download them automatically -->\n        <!-- <framework:assets json-manifest-path=\"https://cdn.example.com/manifest.json\"> -->\n            <!-- this package uses its own manifest (the default file is ignored) -->\n            <!-- Throws an exception when an asset is not found in the manifest -->\n            <framework:package\n                name=\"foo_package\"\n                json-manifest-path=\"%kernel.project_dir%/public/build/a_different_manifest.json\" strict-mode=\"%kernel.debug%\"/>\n            <!-- this package uses the global manifest (the default file is used) -->\n            <framework:package\n                name=\"bar_package\"\n                base-path=\"/images\"/>\n        </framework:assets>\n    </framework:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Validation Mapping Paths in XML Format\nDESCRIPTION: XML configuration for defining validation mapping paths. Specifies directories where Symfony will look for additional validation configuration files.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_88\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/framework.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <framework:config>\n        <framework:validation>\n            <framework:mapping>\n                <framework:path>%kernel.project_dir%/config/validation/</framework:path>\n            </framework:mapping>\n        </framework:validation>\n    </framework:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Password Hasher in Symfony PHP\nDESCRIPTION: This PHP configuration snippet illustrates how to define a password hasher using the 'id' method in Symfony's security.php file. It references the custom password hasher class using its fully qualified class name.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/passwords.rst#2025-04-22_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/security.php\nuse App\\Security\\Hasher\\CustomVerySecureHasher;\nuse Symfony\\Config\\SecurityConfig;\n\nreturn static function (SecurityConfig $security): void {\n    // ...\n    $security->passwordHasher('app_hasher')\n        // the service ID of your custom hasher (the FQCN using the default services.yaml)\n        ->id(CustomVerySecureHasher::class)\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Confirming User Action in Symfony Console\nDESCRIPTION: Illustrates the usage of the confirm() method to ask a Yes/No question to the user, with an optional default value.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/console/style.rst#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$io->confirm('Restart the web server?');\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$io->confirm('Restart the web server?', true);\n```\n\n----------------------------------------\n\nTITLE: Advanced Composition of Stacked Decorators in PHP\nDESCRIPTION: This PHP configuration shows an advanced example of composing stacked decorators in Symfony, including embedded stacks and aliasing.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/service_decoration.rst#2025-04-22_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nuse App\\Decorated;\nuse App\\Decorator;\n\nreturn function(ContainerConfigurator $container): void {\n    $container->services()\n        ->set('some_decorator', Decorator::class)\n\n        ->stack('embedded_stack', [\n            service('some_decorator'),\n            inline_service(Decorated::class),\n        ])\n\n        ->stack('decorated_foo_stack', [\n            inline_service()->parent('embedded_stack'),\n            inline_service(\\Baz::class),\n            inline_service(\\Bar::class),\n            inline_service(\\Foo::class),\n        ])\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Testing Compound Password Validation in Symfony using CompoundConstraintTestCase\nDESCRIPTION: Implements a test case for the custom PasswordRequirements validator using Symfony's CompoundConstraintTestCase. It tests both invalid and valid password scenarios, verifying which specific constraints fail for invalid passwords.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/validation/custom_constraint.rst#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n// tests/Validator/PasswordRequirementsTest.php\nnamespace App\\Tests\\Validator;\n\nuse App\\Validator\\PasswordRequirements;\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Test\\CompoundConstraintTestCase;\n\n/**\n * @extends CompoundConstraintTestCase<PasswordRequirements>\n */\nclass PasswordRequirementsTest extends CompoundConstraintTestCase\n{\n    public function createCompound(): Assert\\Compound\n    {\n        return new PasswordRequirements();\n    }\n\n    public function testInvalidPassword(): void\n    {\n        $this->validateValue('azerty123');\n\n        // check all constraints pass except for the\n        // password leak and the uppercase letter checks\n        $this->assertViolationsRaisedByCompound([\n            new Assert\\NotCompromisedPassword(),\n            new Assert\\Regex('/[A-Z]+/'),\n        ]);\n    }\n\n    public function testValid(): void\n    {\n        $this->validateValue('VERYSTR0NGP4$$WORD#%!');\n\n        $this->assertNoViolation();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Simplified Framework Class Using Dependency Injection in PHP\nDESCRIPTION: This snippet shows the simplified Framework class after moving dependencies to the container. It now only extends HttpKernel without any additional logic.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/create_framework/dependency_injection.rst#2025-04-22_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n// example.com/src/Simplex/Framework.php\nnamespace Simplex;\n\nuse Symfony\\Component\\HttpKernel\\HttpKernel;\n\nclass Framework extends HttpKernel\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Access Token Success Handler - Symfony Security - YAML\nDESCRIPTION: This YAML snippet configures a Symfony firewall to use custom service classes for both the access token handler and the authentication success handler. It sets 'token_handler' to a service ID for token validation and 'success_handler' to a service that customizes post-authentication logic. Used in config/packages/security.yaml, requiring the referenced services to be declared and available.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/access_token.rst#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\nsecurity:\n    firewalls:\n        main:\n            access_token:\n                token_handler: App\\Security\\AccessTokenHandler\n                success_handler: App\\Security\\Authentication\\AuthenticationSuccessHandler\n```\n\n----------------------------------------\n\nTITLE: Including Additional Bootstrap and jQuery Plugins\nDESCRIPTION: Example of how to include additional Bootstrap/jQuery plugins in a Symfony application with Webpack Encore, showing how to require both JavaScript and CSS files for a bootstrap-star-rating plugin.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/bootstrap.rst#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\n\n// require the JavaScript\nrequire('bootstrap-star-rating');\n// require 2 CSS files needed\nrequire('bootstrap-star-rating/css/star-rating.css');\nrequire('bootstrap-star-rating/themes/krajee-svg/theme.css');\n```\n\n----------------------------------------\n\nTITLE: Configuring Symfony Login Link Signature Properties (YAML, XML, PHP)\nDESCRIPTION: Illustrates how to define `signature_properties` for Symfony login links in the security configuration. These properties (e.g., 'id', 'email') are fetched from the User object using the PropertyAccess component and included in the link's hash calculation. Changing any of these properties on the user object automatically invalidates previously generated login links. Configuration examples are shown in YAML, XML, and PHP.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/login_link.rst#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\nsecurity:\n    firewalls:\n        main:\n            login_link:\n                check_route: login_check\n                signature_properties: [id, email]\n```\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/security.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<srv:container xmlns=\"http://symfony.com/schema/dic/security\"\n    xmlns:srv=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/security\n        https://symfony.com/schema/dic/security/security-1.0.xsd\">\n\n    <config>\n        <firewall name=\"main\">\n            <login-link check-route=\"login_check\">\n                <signature-property>id</signature-property>\n                <signature-property>email</signature-property>\n            </login-link>\n        </firewall>\n    </config>\n</srv:container>\n```\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/security.php\nuse Symfony\\Config\\SecurityConfig;\n\nreturn static function (SecurityConfig $security): void {\n    $security->firewall('main')\n        ->loginLink()\n            ->checkRoute('login_check')\n            ->signatureProperties(['id', 'email'])\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Trusted Proxies Environment Variable\nDESCRIPTION: This Bash snippet demonstrates how to set the TRUSTED_PROXIES environment variable to configure proxies on a per-environment basis. It's used in conjunction with the YAML configuration that references this environment variable.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/deployment/proxies.rst#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# .env\nTRUSTED_PROXIES=127.0.0.1,10.0.0.0/8\n```\n\n----------------------------------------\n\nTITLE: Defining Translations in YAML for trans Filter\nDESCRIPTION: Example YAML configuration (`translations/messages.en.yaml`) for the `trans` filter. Defines the `message` key with the translation 'Hello %name%', used when the `trans` filter is called with this key in the default 'messages' domain.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#2025-04-22_snippet_39\n\nLANGUAGE: yaml\nCODE:\n```\n# translations/messages.en.yaml\nmessage: Hello %name%\n```\n\n----------------------------------------\n\nTITLE: Defining WordCount Constraint in XML\nDESCRIPTION: XML configuration example for implementing WordCount validation constraint.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/WordCount.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\BlogPostDTO\">\n        <property name=\"content\">\n            <constraint name=\"WordCount\">\n                <option name=\"min\">100</option>\n                <option name=\"max\">200</option>\n            </constraint>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Token Provider in PHP\nDESCRIPTION: Sets up a custom remember me token provider using PHP configuration. This specifies a custom class that implements the TokenProviderInterface.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/remember_me.rst#2025-04-22_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/security.php\nuse App\\Security\\RememberMe\\CustomTokenProvider;\nuse Symfony\\Config\\SecurityConfig;\n\nreturn static function (SecurityConfig $security): void {\n    // ...\n    $security->firewall('main')\n        // ...\n        ->rememberMe()\n            // ...\n            ->tokenProvider([\n                'service' => CustomTokenProvider::class,\n            ])\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Dumped Container Class Name in Symfony\nDESCRIPTION: Shows how to customize the name of the dumped container class by using the 'class' option when dumping the container configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/dependency_injection/compilation.rst#2025-04-22_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n// ...\n$file = __DIR__ .'/cache/container.php';\n\nif (file_exists($file)) {\n    require_once $file;\n    $container = new MyCachedContainer();\n} else {\n    $container = new ContainerBuilder();\n    // ...\n    $container->compile();\n\n    $dumper = new PhpDumper($container);\n    file_put_contents(\n        $file,\n        $dumper->dump(['class' => 'MyCachedContainer'])\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LessThanOrEqual Constraint in XML\nDESCRIPTION: XML configuration for applying the LessThanOrEqual constraint to 'siblings' and 'age' properties of a Person entity.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/LessThanOrEqual.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\Person\">\n        <property name=\"siblings\">\n            <constraint name=\"LessThanOrEqual\">\n                5\n            </constraint>\n        </property>\n        <property name=\"age\">\n            <constraint name=\"LessThanOrEqual\">\n                <option name=\"value\">80</option>\n            </constraint>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Using NegativeOrZero Constraint with XML Configuration in Symfony\nDESCRIPTION: Example of applying the NegativeOrZero constraint using XML configuration in Symfony. This configuration ensures the 'level' property of the UnderGroundGarage entity must be a negative number or zero.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/NegativeOrZero.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\UnderGroundGarage\">\n        <property name=\"level\">\n            <constraint name=\"NegativeOrZero\"></constraint>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Importing CSS in JavaScript Entry Point\nDESCRIPTION: Shows how to import CSS files into the main JavaScript entry point using Webpack import statements.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/simple-example.rst#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// assets/app.js\n// ...\n\nimport './styles/app.css';\n```\n\n----------------------------------------\n\nTITLE: Configuring DateType Field with Custom Input Format in PHP\nDESCRIPTION: Example of adding a DateType field with a custom input format. This is useful when the underlying date is not a DateTime object, such as a Unix timestamp or DateTimeImmutable object.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/date.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$builder->add('publishedAt', DateType::class, [\n    'widget' => 'choice',\n    'input'  => 'datetime_immutable'\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Lock Resources in Symfony (XML)\nDESCRIPTION: Sets up lock resources using environment variables in the Symfony framework configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_55\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/lock.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <framework:config>\n        <framework:lock>\n            <framework:resource name=\"default\">%env(LOCK_DSN)%</framework:resource>\n        </framework:lock>\n    </framework:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Defining DateTime Constraint in YAML\nDESCRIPTION: Example of using the DateTime constraint in a YAML validation configuration file for Symfony. It applies the constraint to the createdAt property of the Author entity.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/DateTime.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Author:\n    properties:\n        createdAt:\n            - DateTime: ~\n```\n\n----------------------------------------\n\nTITLE: Using NegativeOrZero Constraint with PHP Code Configuration in Symfony\nDESCRIPTION: Example of applying the NegativeOrZero constraint using PHP code in the loadValidatorMetadata method. This configuration ensures the 'level' property of the UnderGroundGarage entity must be a negative number or zero.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/NegativeOrZero.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/UnderGroundGarage.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass UnderGroundGarage\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('level', new Assert\\NegativeOrZero());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using PositiveOrZero Constraint with PHP Configuration in Symfony\nDESCRIPTION: Example of applying the PositiveOrZero constraint using PHP configuration through the loadValidatorMetadata method. This ensures the siblings property is either positive or zero.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/PositiveOrZero.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Person.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Person\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('siblings', new Assert\\PositiveOrZero());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: RadioType Class Reference\nDESCRIPTION: Defines the fully qualified class name for the Symfony RadioType form field component.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/radio.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nSymfony\\Component\\Form\\Extension\\Core\\Type\\RadioType\n```\n\n----------------------------------------\n\nTITLE: Service Parameter Injection Configuration in Symfony\nDESCRIPTION: Configuration examples in YAML, XML, and PHP showing how to inject parameters into services.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration.rst#2025-04-22_snippet_39\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n    app.contents_dir: '...'\n\nservices:\n    App\\Service\\MessageGenerator:\n        arguments:\n            $contentsDir: '%app.contents_dir%'\n```\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <parameters>\n        <parameter key=\"app.contents_dir\">...</parameter>\n    </parameters>\n\n    <services>\n        <service id=\"App\\Service\\MessageGenerator\">\n            <argument key=\"$contentsDir\">%app.contents_dir%</argument>\n        </service>\n    </services>\n</container>\n```\n\nLANGUAGE: php\nCODE:\n```\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nuse App\\Service\\MessageGenerator;\n\nreturn static function (ContainerConfigurator $container): void {\n    $container->parameters()\n        ->set('app.contents_dir', '...');\n\n    $container->services()\n        ->get(MessageGenerator::class)\n            ->arg('$contentsDir', '%app.contents_dir%');\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring JSONP Format in Symfony Framework XML\nDESCRIPTION: XML configuration for adding JSONP format support in Symfony framework. Defines the MIME type mapping for JSONP format requests.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_64\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/framework.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony\n        https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <framework:config>\n        <framework:request>\n            <framework:format name=\"jsonp\">\n                <framework:mime-type>application/javascript</framework:mime-type>\n            </framework:format>\n        </framework:request>\n    </framework:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Symfony Secrets in YAML\nDESCRIPTION: YAML configuration for Symfony's secrets management system. This example includes commented options for setting the vault directory, local dotenv file, and decryption environment variable.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/secrets.rst#2025-04-22_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/framework.yaml\nframework:\n    secrets:\n        #vault_directory: '%kernel.project_dir%/config/secrets/%kernel.environment%'\n        #local_dotenv_file: '%kernel.project_dir%/.env.%kernel.environment%.local'\n        #decryption_env_var: 'base64:default::SYMFONY_DECRYPTION_SECRET'\n```\n\n----------------------------------------\n\nTITLE: Registering Static Factory Service - PHP Configuration\nDESCRIPTION: Illustrates how to register the NewsletterManager service through code in 'config/services.php', using Symfony's ContainerConfigurator API. The 'factory' method sets the static factory class and method for service creation. Requires corresponding PHP classes to be present, and is suitable for advanced configuration scenarios.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/factories.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nuse App\\Email\\NewsletterManager;\nuse App\\Email\\NewsletterManagerStaticFactory;\n\nreturn function(ContainerConfigurator $container): void {\n    $services = $container->services();\n\n    $services->set(NewsletterManager::class)\n        // the first argument is the class and the second argument is the static method\n        ->factory([NewsletterManagerStaticFactory::class, 'createNewsletterManager']);\n};\n\n```\n\n----------------------------------------\n\nTITLE: Defining NotBlank Constraint in XML for Symfony Validation\nDESCRIPTION: This XML configuration defines the NotBlank constraint for the firstName property of the App\\Entity\\Author class in Symfony's validation system.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/NotBlank.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\Author\">\n        <property name=\"firstName\">\n            <constraint name=\"NotBlank\"/>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Listing Existing Secrets and Revealing Values (terminal)\nDESCRIPTION: Explains how to list all secret names and, when provided the decryption key, how to reveal their values using the Symfony CLI. The --reveal flag outputs the secret values in a table, useful for auditing and debugging.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/secrets.rst#2025-04-22_snippet_6\n\nLANGUAGE: terminal\nCODE:\n```\n$ php bin/console secrets:list --reveal\n```\n\n----------------------------------------\n\nTITLE: Displaying Success Messages in Symfony Console\nDESCRIPTION: Demonstrates the usage of the success() method to display successful messages with green background and [OK] label.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/console/style.rst#2025-04-22_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n$io->success('Lorem ipsum dolor sit amet');\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$io->success([\n    'Lorem ipsum dolor sit amet',\n    'Consectetur adipiscing elit',\n]);\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Translation Loader Service\nDESCRIPTION: Demonstrates how to register a custom translation loader service (`App\\Translation\\MyCustomLoader`) in Symfony using YAML, XML, and PHP configuration. The service must be tagged with `translation.loader` and requires an `alias` option, which defines the file suffix (e.g., 'bin') for translation files this loader handles.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/dic_tags.rst#2025-04-22_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\n.. code-block:: yaml\n\n    services:\n        App\\Translation\\MyCustomLoader:\n            tags:\n                - { name: translation.loader, alias: bin }\n```\n\nLANGUAGE: xml\nCODE:\n```\n.. code-block:: xml\n\n    <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n    <container xmlns=\"http://symfony.com/schema/dic/services\"\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n            https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n        <services>\n            <service id=\"App\\Translation\\MyCustomLoader\">\n                <tag name=\"translation.loader\" alias=\"bin\"/>\n            </service>\n        </services>\n    </container>\n```\n\nLANGUAGE: php\nCODE:\n```\n.. code-block:: php\n\n    use App\\Translation\\MyCustomLoader;\n\n    $container\n        ->register(MyCustomLoader::class)\n        ->addTag('translation.loader', ['alias' => 'bin'])\n    ;\n```\n\n----------------------------------------\n\nTITLE: Starting the Symfony Local Web Server\nDESCRIPTION: Command to start the Symfony web server in the foreground, displaying logs directly in the console.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/symfony_server.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd my-project/\n$ symfony server:start\n\n  [OK] Web server listening on http://127.0.0.1:....\n  ...\n\n# Now, browse the given URL, or run this command:\n$ symfony open:local\n```\n\n----------------------------------------\n\nTITLE: Configuring Twig Constraint in XML\nDESCRIPTION: This XML configuration applies the Twig constraint to the 'templateCode' property of the App\\Entity\\Page class. It shows how to set up validation using XML format.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Twig.rst#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\Page\">\n        <property name=\"templateCode\">\n            <constraint name=\"Symfony\\Bridge\\Twig\\Validator\\Constraints\\Twig\"/>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Compound Constraint with Metadata in PHP\nDESCRIPTION: Shows how to apply the custom PasswordRequirements constraint to a property using the loadValidatorMetadata method in PHP.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Compound.rst#2025-04-22_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n// src/Entity/User.php\nnamespace App\\Entity\\User;\n\nuse App\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass User\n{\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('plainPassword', new Assert\\PasswordRequirements());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Twig Template for Sports Meetup Form\nDESCRIPTION: This Twig template renders the sports meetup form. It includes the form start tag with an ID for JavaScript manipulation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/dynamic_form_modification.rst#2025-04-22_snippet_8\n\nLANGUAGE: Twig\nCODE:\n```\n{{ form_start(form, { attr: { id: 'sport_meetup_form' } }) }}\n```\n\n----------------------------------------\n\nTITLE: Configuring DateTime with Timezone using PHP Code\nDESCRIPTION: Example showing how to use PHP code to configure the GreaterThanOrEqual constraint with a fixed timezone (UTC) for DateTime validation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/GreaterThanOrEqual.rst#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Order.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Order\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('deliveryDate', new Assert\\GreaterThanOrEqual('today UTC'));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Synthetic Service at Runtime in Symfony\nDESCRIPTION: Example showing how to inject an instance into the container as a synthetic service at runtime using the Container::set() method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/synthetic_services.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// instantiate the synthetic service\n$theService = ...;\n$container->set('app.synthetic_service', $theService);\n```\n\n----------------------------------------\n\nTITLE: Defining Backed Enum Controller Example in PHP\nDESCRIPTION: Shows how to use backed enums as controller arguments with route parameters and enum requirements.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/controller/value_resolver.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nenum Suit: string\n{\n    case Hearts = 'H';\n    case Diamonds = 'D';\n    case Clubs = 'C';\n    case Spades = 'S';\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nclass CardController\n{\n    #[Route('/cards/{suit}')]\n    public function list(Suit $suit): Response\n    {\n        // ...\n    }\n\n    // ...\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Routing\\Requirement\\EnumRequirement;\n\nclass CardController\n{\n    #[Route('/cards/{suit}', requirements: [\n        'suit' => new EnumRequirement([Suit::Diamonds, Suit::Spades]),\n    ])]\n    public function list(Suit $suit): Response\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Vue.js JSX Component with Styles\nDESCRIPTION: Example of importing CSS styles in a Vue.js JSX component\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/vuejs.rst#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// App.jsx\nimport './App.css'\n\nexport default {\n    name: 'App',\n    render() {\n        return (\n            <div>\n                ...\n            </div>\n        )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Symfony Local Server Configuration\nDESCRIPTION: YAML configuration options for Symfony local server including proxy domains, HTTP settings, and TLS configuration\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/symfony_server.rst#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nproxy:\n    domains:\n        - domain1\n        - domain2\n\nhttp:\n    document_root: public/\n    passthru: index.php\n    port: 8000\n    preferred_port: 8001\n    p12: path/to/p12_cert\n    allow_http: true\n    no_tls: true\n    daemon: true\n    use_gzip: true\n    no_workers: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Stateless Authentication in Symfony Firewall (YAML)\nDESCRIPTION: This snippet demonstrates how to configure a stateless firewall in Symfony using YAML. The stateless option is set to true, indicating that the session should not be used for authentication.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/security.rst#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\nsecurity:\n    # ...\n\n    firewalls:\n        main:\n            # ...\n            stateless: true\n```\n\n----------------------------------------\n\nTITLE: YAML Syntax Validation in PHP using Symfony Console\nDESCRIPTION: Shows how to create a console application for validating YAML syntax using the Symfony YAML and Console components. Demonstrates various usage examples for the lint:yaml command.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/yaml.rst#2025-04-22_snippet_33\n\nLANGUAGE: php\nCODE:\n```\n// lint.php\nuse Symfony\\Component\\Console\\Application;\nuse Symfony\\Component\\Yaml\\Command\\LintCommand;\n\n(new Application('yaml/lint'))\n    ->add(new LintCommand())\n    ->getApplication()\n    ->setDefaultCommand('lint:yaml', true)\n    ->run();\n```\n\n----------------------------------------\n\nTITLE: Casting HTTP Method Override Environment Variable to Boolean in Symfony with PHP Configuration\nDESCRIPTION: Casts the HTTP_METHOD_OVERRIDE environment variable to boolean in PHP configuration, setting the correct container parameter and using the chained bool() processor. Depends on ContainerBuilder and FrameworkConfig. The output controls HTTP method override setting.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/env_var_processors.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/framework.php\\nnamespace Symfony\\\\Component\\\\DependencyInjection\\\\Loader\\\\Configurator;\\n\\nuse Symfony\\\\Component\\\\DependencyInjection\\\\ContainerBuilder;\\nuse Symfony\\\\Config\\\\FrameworkConfig;\\n\\nreturn static function (ContainerBuilder $container, FrameworkConfig $framework): void {\\n    $container->setParameter('env(HTTP_METHOD_OVERRIDE)', 'true');\\n    $framework->httpMethodOverride(env('HTTP_METHOD_OVERRIDE')->bool());\\n};\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring ESI Support in HttpCache\nDESCRIPTION: Configuration of ESI support in HttpCache with debug mode enabled.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/create_framework/http_kernel_httpkernelinterface.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$framework = new HttpKernel\\HttpCache\\HttpCache(\n    $framework,\n    new HttpKernel\\HttpCache\\Store(__DIR__.'/../cache'),\n    new HttpKernel\\HttpCache\\Esi(),\n    ['debug' => true]\n);\n```\n\n----------------------------------------\n\nTITLE: Enabling Relative Protocol URLs with PHP Attributes in Symfony\nDESCRIPTION: Example of allowing relative protocol URLs (e.g., //example.com) using PHP attributes for URL validation constraints.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Url.rst#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Author.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Author\n{\n    #[Assert\\Url(\n        relativeProtocol: true,\n    )]\n    protected string $bioUrl;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic SearchType Input Element Example\nDESCRIPTION: Example showing the HTML input element rendered by SearchType with type=\"search\" attribute.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/search.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n<input type=\"search\">\n```\n\n----------------------------------------\n\nTITLE: Configuring Cascade Constraint with XML\nDESCRIPTION: Illustrates how to apply the Cascade constraint to a BookCollection entity using XML configuration in the validation.xml file.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Cascade.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\BookCollection\">\n        <constraint name=\"Cascade\"/>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Using Asset Packages in Twig Templates\nDESCRIPTION: Example of using a configured asset package in a Twig template. The 'avatars' package is specified as the second parameter to the asset() function.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_13\n\nLANGUAGE: html+twig\nCODE:\n```\n<img src=\"{{ asset('...', 'avatars') }}\">\n```\n\n----------------------------------------\n\nTITLE: Registering Monolog Processor Per Handler in XML\nDESCRIPTION: XML configuration for registering a processor for a specific handler. This limits the processor to only be applied to log records processed by the 'main' handler rather than all handlers.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/logging/processors.rst#2025-04-22_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:monolog=\"http://symfony.com/schema/dic/monolog\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/monolog\n        https://symfony.com/schema/dic/monolog/monolog-1.0.xsd\">\n\n    <services>\n        <service id=\"App\\Logger\\SessionRequestProcessor\">\n            <tag name=\"monolog.processor\" handler=\"main\"/>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Serialization Context with PHP Config in Symfony\nDESCRIPTION: This PHP configuration closure sets the default serializer context, specifying that extra attributes should not be allowed during deserialization. It is used within config/packages/serializer.php, leveraging the Symfony\\Config\\FrameworkConfig class. The configuration relies on Symfony's configuration API and works only within the Symfony application configuration environment.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer.rst#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/serializer.php\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework): void {\n    $framework->serializer()\n        ->defaultContext([\n            'allow_extra_attributes' => false,\n        ])\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Nested Collection Customization Blocks in Twig\nDESCRIPTION: Examples of Twig block names that can be used to customize different parts of a nested form collection structure. Shows the naming pattern for targeting specific levels in the hierarchy.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/form_themes.rst#2025-04-22_snippet_11\n\nLANGUAGE: twig\nCODE:\n```\n{% block _task_manager_task_lists_* %}\n    {# the collection field of TaskManager #}\n{% endblock %}\n\n{% block _task_manager_task_lists_entry_* %}\n    {# the inner TaskListType #}\n{% endblock %}\n\n{% block _task_manager_task_lists_entry_tasks_* %}\n    {# the collection field of TaskListType #}\n{% endblock %}\n\n{% block _task_manager_task_lists_entry_tasks_entry_* %}\n    {# the inner TaskType #}\n{% endblock %}\n\n{% block _task_manager_task_lists_entry_tasks_entry_name_* %}\n    {# the field of TaskType #}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Applying IsFalse Constraint Using PHP Configuration\nDESCRIPTION: Example of using PHP code to load validator metadata and apply the IsFalse constraint to a getter method that checks for invalid states.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/IsFalse.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Author.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Author\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addGetterConstraint('stateInvalid', new Assert\\IsFalse(\n            message: \"You've entered an invalid state.\",\n        ));\n    }\n\n    public function isStateInvalid(): bool\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Workflow Configuration in YAML Format\nDESCRIPTION: YAML configuration example for a pull request workflow with styled states and transitions including metadata for colors and descriptions.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/workflow/dumping-workflows.rst#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/workflow.yaml\nframework:\n    workflows:\n        pull_request:\n            type: 'state_machine'\n            marking_store:\n                type: 'method'\n                property: 'currentPlace'\n            supports:\n                - App\\Entity\\PullRequest\n            initial_marking: start\n            places:\n                start: ~\n                coding: ~\n                test: ~\n                review:\n                    metadata:\n                        description: Human review\n                merged: ~\n                closed:\n                    metadata:\n                        bg_color: DeepSkyBlue\n            transitions:\n                submit:\n                    from: start\n                    to: test\n                update:\n                    from: [coding, test, review]\n                    to: test\n                    metadata:\n                        arrow_color: Turquoise\n                wait_for_review:\n                    from: test\n                    to: review\n                    metadata:\n                        color: Orange\n                request_change:\n                    from: review\n                    to: coding\n                accept:\n                    from: review\n                    to: merged\n                    metadata:\n                        label: Accept PR\n                reject:\n                    from: review\n                    to: closed\n                reopen:\n                    from: closed\n                    to: review\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Password Hasher in Symfony XML\nDESCRIPTION: This XML configuration snippet demonstrates how to define a password hasher using the 'id' attribute in Symfony's security.xml file. It references the custom password hasher class.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/passwords.rst#2025-04-22_snippet_29\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/security.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<srv:container xmlns=\"http://symfony.com/schema/dic/security\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:srv=\"http://symfony.com/schema/dic/services\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/security\n        https://symfony.com/schema/dic/security/security-1.0.xsd\"\n>\n\n    <config>\n        <!-- ... -->\n        <!-- id: the service ID of your custom hasher (the FQCN using the default services.yaml) -->\n        <security:password_hasher class=\"app_hasher\"\n            id=\"App\\Security\\Hasher\\CustomVerySecureHasher\"/>\n    </config>\n</srv:container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Rotating File Handler in YAML\nDESCRIPTION: This YAML configuration sets up a rotating file handler for Monolog, which creates a new log file daily and limits the number of log files kept.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/logging.rst#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/prod/monolog.yaml\nmonolog:\n    handlers:\n        main:\n            type:  rotating_file\n            path:  '%kernel.logs_dir%/%kernel.environment%.log'\n            level: debug\n            # max number of log files to keep\n            # defaults to zero, which means infinite files\n            max_files: 10\n```\n\n----------------------------------------\n\nTITLE: Configuring Json Constraint in YAML for Symfony Validation\nDESCRIPTION: This YAML configuration applies the Json constraint to the 'chapters' property of the Book entity in Symfony. It specifies a custom error message for invalid JSON input.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Json.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Book:\n    properties:\n        chapters:\n            - Json:\n                message: You've entered an invalid Json.\n```\n\n----------------------------------------\n\nTITLE: Route-based Template Rendering Configuration\nDESCRIPTION: Configuration examples for rendering templates directly from routes using TemplateController\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/templates.rst#2025-04-22_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\nacme_privacy:\n    path: /privacy\n    controller: Symfony\\Bundle\\FrameworkBundle\\Controller\\TemplateController\n    defaults:\n        template: 'static/privacy.html.twig'\n        statusCode: 200\n        maxAge: 86400\n        sharedAge: 86400\n        private: true\n        context:\n            site_name: 'ACME'\n            theme: 'dark'\n        headers:\n            Content-Type: 'text/html'\n            foo: 'bar'\n```\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<routes xmlns=\"http://symfony.com/schema/routing\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/routing https://symfony.com/schema/routing/routing-1.0.xsd\">\n    <route id=\"acme_privacy\"\n        path=\"/privacy\"\n        controller=\"Symfony\\Bundle\\FrameworkBundle\\Controller\\TemplateController\">\n        <default key=\"template\">static/privacy.html.twig</default>\n        <default key=\"statusCode\">200</default>\n        <default key=\"maxAge\">86400</default>\n        <default key=\"sharedAge\">86400</default>\n        <default key=\"private\">true</default>\n        <default key=\"context\">\n            <default key=\"site_name\">ACME</default>\n            <default key=\"theme\">dark</default>\n        </default>\n        <default key=\"headers\">\n            <default key=\"Content-Type\">text/html</default>\n        </default>\n    </route>\n</routes>\n```\n\n----------------------------------------\n\nTITLE: Disabling Deprecation Helper Completely - Terminal - terminal\nDESCRIPTION: Setting 'disabled=1' within SYMFONY_DEPRECATIONS_HELPER disables the Symfony deprecation helper entirely for PHPUnit runs. This prevents deprecation messages or errors from interfering with other test executions. It is useful for making use of the rest of the PHPUnit Bridge features without being notified about deprecations.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/phpunit_bridge.rst#2025-04-22_snippet_13\n\nLANGUAGE: terminal\nCODE:\n```\n$ SYMFONY_DEPRECATIONS_HELPER=disabled=1 ./vendor/bin/simple-phpunit\n```\n\n----------------------------------------\n\nTITLE: Enabling Session Support in XML\nDESCRIPTION: Example of enabling session support in the Symfony framework using XML configuration. Shows the proper XML structure for framework configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_71\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/framework.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <framework:config>\n        <framework:session enabled=\"true\"/>\n    </framework:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom IDE Integration in Symfony (XML)\nDESCRIPTION: Sets up a custom IDE integration by specifying a URL template for opening files. The template uses %f for file path and %l for line number placeholders.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_51\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/framework.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <framework:config ide=\"myide://open?url=file://%%f&line=%%l\"/>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Implementing When Constraint with XML\nDESCRIPTION: XML configuration showing how to define When constraint validation rules.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/When.rst#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n    <class name=\"App\\Model\\Discount\">\n        <property name=\"value\">\n            <constraint name=\"GreaterThan\">0</constraint>\n            <constraint name=\"When\">\n                <option name=\"expression\">\n                    this.getType() == 'percent'\n                </option>\n                <option name=\"constraints\">\n                    <constraint name=\"LessThanOrEqual\">\n                        <option name=\"value\">100</option>\n                        <option name=\"message\">The value should be between 1 and 100!</option>\n                    </constraint>\n                </option>\n                <option name=\"otherwise\">\n                    <constraint name=\"LessThan\">\n                        <option name=\"value\">9999</option>\n                        <option name=\"message\">The value should be less than 9999!</option>\n                    </constraint>\n                </option>\n            </constraint>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Implementing Date Validation Using PHP Attributes\nDESCRIPTION: Example showing how to apply the Date constraint using PHP attributes in a Symfony entity class. Validates that the birthday property contains a valid date string.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Date.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Author.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Author\n{\n    #[Assert\\Date]\n    protected string $birthday;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up ISBN Validation in XML\nDESCRIPTION: XML configuration example for ISBN validation constraint with ISBN-10 validation and custom error message.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Isbn.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\Book\">\n        <property name=\"isbn\">\n            <constraint name=\"Isbn\">\n                <option name=\"type\">isbn10</option>\n                <option name=\"message\">This value is not valid.</option>\n            </constraint>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Configuring UniqueEntity with PHP Code\nDESCRIPTION: Shows how to configure unique entity validation using PHP code in the entity class. Uses loadValidatorMetadata method to add unique constraints programmatically.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/UniqueEntity.rst#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/User.php\nnamespace App\\Entity;\n\nuse Symfony\\Bridge\\Doctrine\\Validator\\Constraints\\UniqueEntity;\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass User\n{\n    public static function loadValidatorMetadata(ClassMetadata $metadata)\n    {\n        $metadata->addConstraint(new UniqueEntity(\n            fields: ['email', 'phoneNumber'],\n            ignoreNull: 'phoneNumber',\n        ));\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Translation Paths in Symfony PHP\nDESCRIPTION: Illustrates how to add custom translation directories using the paths option in the PHP configuration for Symfony's translator component.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/translation.rst#2025-04-22_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/translation.php\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework): void {\n    $framework->translator()\n        ->paths(['%kernel.project_dir%/custom/path/to/translations'])\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Installing PHP Parser for Translation Extraction\nDESCRIPTION: A terminal command using Composer to install the `nikic/php-parser` package. This dependency is required to enable the extraction of translation keys from PHP files using Symfony's `translation:extract` command.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/dic_tags.rst#2025-04-22_snippet_32\n\nLANGUAGE: terminal\nCODE:\n```\n.. code-block:: terminal\n\n    $ composer require nikic/php-parser\n```\n\n----------------------------------------\n\nTITLE: Using PHPUnit to Mock a Container for Testing Service Subscribers in PHP\nDESCRIPTION: Example demonstrating how to use PHPUnit to mock a PSR-11 container for testing service subscribers. The mock container is configured to return stub services for specific service IDs.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/service_subscribers_locators.rst#2025-04-22_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Container\\ContainerInterface;\n\n$container = $this->createMock(ContainerInterface::class);\n$container->expects(self::any())\n    ->method('get')\n    ->willReturnMap([\n        ['foo', $this->createStub(Foo::class)],\n        ['bar', $this->createStub(Bar::class)],\n    ])\n;\n\n$serviceSubscriber = new MyService($container);\n// ...\n```\n\n----------------------------------------\n\nTITLE: Using Required and Optional Field Constraints with YAML\nDESCRIPTION: YAML configuration that demonstrates how to use Required and Optional constraint wrappers to control validation behavior for specific collection fields.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Collection.rst#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Author:\n    properties:\n        profile_data:\n            - Collection:\n                fields:\n                    personal_email:\n                        - Required:\n                            - NotBlank: ~\n                            - Email: ~\n                    alternate_email:\n                        - Optional:\n                            - Email: ~\n```\n\n----------------------------------------\n\nTITLE: Defining minMessage Option for Range Constraint in RST\nDESCRIPTION: Specifies the message displayed when the value is less than the min limit. It includes information about the option type, default value, and available message parameters.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Range.rst#2025-04-22_snippet_12\n\nLANGUAGE: rst\nCODE:\n```\n``minMessage``\n~~~~~~~~~~~~~~\n\n**type**: ``string`` **default**: ``This value should be {{ limit }} or more.``\n\nThe message that will be shown if the underlying value is less than the\n`min`_ option, and no `max`_ option has been defined (if both are defined, use\n`notInRangeMessage`_).\n\nYou can use the following parameters in this message:\n\n===============  ==============================================================\nParameter        Description\n===============  ==============================================================\n``{{ limit }}``  The lower limit\n``{{ value }}``  The current (invalid) value\n===============  ==============================================================\n```\n\n----------------------------------------\n\nTITLE: Configuring Switch User Firewall in Symfony Security (YAML) - YAML\nDESCRIPTION: Defines a firewall named 'main' in Symfony's security configuration using YAML syntax, enabling the 'switch_user' option and specifying 'CAN_SWITCH_USER' as the controlling role. Requires Symfony's security bundle and correct YAML formatting. The configuration is placed under 'config/packages/security.yaml' and expects subsequent implementation of a voter for 'CAN_SWITCH_USER'.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/impersonating_user.rst#2025-04-22_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\\nsecurity:\\n    # ...\\n\\n    firewalls:\\n        main:\\n            # ...\\n            switch_user: { role: CAN_SWITCH_USER }\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to Factory Methods - Symfony XML - xml\nDESCRIPTION: Defines in XML how to pass arguments to a method-based factory. Both the factory service and the method name are specified; an argument element injects the 'templating' service. This configuration uses standard Symfony XML DI schema and assumes the relevant services are available.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/factories.rst#2025-04-22_snippet_23\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <!-- ... -->\n\n        <service id=\"App\\Email\\NewsletterManager\">\n            <factory service=\"App\\Email\\NewsletterManagerFactory\" method=\"createNewsletterManager\"/>\n            <argument type=\"service\" id=\"templating\"/>\n        </service>\n    </services>\n</container>\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Firewall with Custom Request Matcher - Symfony PHP\nDESCRIPTION: Demonstrates enabling a custom firewall matcher in a Symfony PHP config file, by passing the class name implementing RequestMatcherInterface to the \"requestMatcher\" method. The class (e.g. App\\Security\\CustomRequestMatcher) must be correctly registered as a service. Include this code in \"config/packages/security.php\".\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/firewall_restriction.rst#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/security.php\nuse App\\Security\\CustomRequestMatcher;\nuse Symfony\\Config\\SecurityConfig;\n\nreturn static function (SecurityConfig $security): void {\n    // ....\n\n    $security->firewall('secured_area')\n        ->requestMatcher(CustomRequestMatcher::class)\n        // ...\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Synthetic Service in YAML Format\nDESCRIPTION: YAML configuration for defining a synthetic service in Symfony. Synthetic services don't specify a class as they are instantiated outside the container and injected at runtime.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/synthetic_services.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nservices:\n    # synthetic services don't specify a class\n    app.synthetic_service:\n        synthetic: true\n```\n\n----------------------------------------\n\nTITLE: Setting Expires Header with Cache Attribute in PHP\nDESCRIPTION: Demonstrates how to use the Cache attribute to set the Expires header for caching with an expiration of 600 seconds in the future.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/http_cache/expiration.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\HttpKernel\\Attribute\\Cache;\n// ...\n\n#[Cache(expires: '+600 seconds')]\npublic function index(): Response\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GreaterThanOrEqual Constraint with XML\nDESCRIPTION: Example of configuring the GreaterThanOrEqual validation constraint using XML. Validates that a Person entity has at least 5 siblings and is at least 18 years old.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/GreaterThanOrEqual.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\Person\">\n        <property name=\"siblings\">\n            <constraint name=\"GreaterThanOrEqual\">\n                5\n            </constraint>\n        </property>\n        <property name=\"age\">\n            <constraint name=\"GreaterThanOrEqual\">\n                <option name=\"value\">18</option>\n            </constraint>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Comparing Dates with LessThan Constraint Using PHP Code\nDESCRIPTION: Example of using the LessThan constraint with PHP code to validate that a date is in the past.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/LessThan.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Person.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Person\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('dateOfBirth', new Assert\\LessThan('today'));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Raw Command Input Tokens in Symfony Console\nDESCRIPTION: Demonstrates how to access raw input tokens passed to a Symfony console command using getRawTokens(). Useful for parsing input manually or passing to other commands. Shows usage with Process component.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/console/input.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nprotected function execute(InputInterface $input, OutputInterface $output): int\n{\n    // if this command was run as:\n    // php bin/console app:my-command foo --bar --baz=3 --qux=value1 --qux=value2\n\n    $tokens = $input->getRawTokens();\n    // $tokens = ['app:my-command', 'foo', '--bar', '--baz=3', '--qux=value1', '--qux=value2'];\n\n    // pass true as argument to not include the original command name\n    $tokens = $input->getRawTokens(true);\n    // $tokens = ['foo', '--bar', '--baz=3', '--qux=value1', '--qux=value2'];\n\n    // pass the raw input to any other command (from Symfony or the operating system)\n    $process = new Process(['app:other-command', ...$input->getRawTokens(true)]);\n    $process->setTty(true);\n    $process->mustRun();\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Controller References in Twig\nDESCRIPTION: The `controller` function creates a `ControllerReference` object, which encapsulates the information needed to reference a controller action (including its name/class::method and any route attributes or query parameters). This reference is primarily intended to be passed to functions like `render()` or `render_esi()` for executing sub-requests.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#2025-04-22_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{{ controller(controller, attributes = [], query = []) }}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating PHP Code Formatting in Symfony Docs\nDESCRIPTION: This snippet illustrates the proper way to format PHP code examples in Symfony documentation, including namespace declarations, use statements, and code folding techniques.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/contributing/documentation/standards.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// src/Foo/Bar.php\nnamespace Foo;\n\nuse Acme\\Demo\\Cat;\n// ...\n\nclass Bar\n{\n    // ...\n\n    public function foo($bar): mixed\n    {\n        // set foo with a value of bar\n        $foo = ...;\n\n        $cat = new Cat($foo);\n\n        // ... check if $bar has the correct value\n\n        return $cat->baz($bar, ...);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing App Entrypoint with Module Preloading\nDESCRIPTION: HTML output from importmap('app') function showing the script tag that imports the main application JavaScript module and the module preload links for performance optimization.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/asset_mapper.rst#2025-04-22_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">import 'app';</script>\n```\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"modulepreload\" href=\"/assets/app-4e986c1a.js\">\n<link rel=\"modulepreload\" href=\"/assets/duck-1b7a64b3.js\">\n```\n\n----------------------------------------\n\nTITLE: Running Test Suites in Parallel Using Simple-PHPUnit Script in Terminal\nDESCRIPTION: This snippet demonstrates how to launch tests in parallel by providing a directory of test suites to the simple-phpunit script. The directory should contain multiple subdirectories, each with its own phpunit.xml.dist file. The script automatically discovers, executes, and aggregates the results of the tests suites found up to a configurable depth (via the SYMFONY_PHPUNIT_MAX_DEPTH environment variable).\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/phpunit_bridge.rst#2025-04-22_snippet_5\n\nLANGUAGE: terminal\nCODE:\n```\n$ ./vendor/bin/simple-phpunit tests/\n```\n\n----------------------------------------\n\nTITLE: Configuring Encore Runtime Environment for IDE Integration\nDESCRIPTION: Configuration to make Encore work with IDE integrations by properly setting up the runtime environment when not executed directly through the encore executable.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/faq.rst#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// webpack.config.js\nconst Encore = require('@symfony/webpack-encore')\n\nif (!Encore.isRuntimeEnvironmentConfigured()) {\n    Encore.configureRuntimeEnvironment(process.env.NODE_ENV || 'dev');\n}\n\n// ... the rest of the Encore configuration\n```\n\n----------------------------------------\n\nTITLE: Configuring Twig CSS Path in YAML\nDESCRIPTION: YAML configuration to set up a Twig namespace for CSS files, making it easier to reference external stylesheets in email templates.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_49\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/twig.yaml\ntwig:\n    # ...\n\n    paths:\n        # point this wherever your css files live\n        '%kernel.project_dir%/assets/styles': styles\n```\n\n----------------------------------------\n\nTITLE: Defining Ip Constraint in XML\nDESCRIPTION: Example of configuring the Ip constraint using XML in Symfony. This snippet shows how to apply IP address validation to the 'ipAddress' property of an Author entity using XML configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Ip.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\Author\">\n        <property name=\"ipAddress\">\n            <constraint name=\"Ip\"/>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Customizing Error Path with UniqueEntity Constraint using PHP API in Symfony\nDESCRIPTION: Example of setting the errorPath option with the UniqueEntity constraint using PHP Validator API to control where validation error messages appear when validating uniqueness across multiple fields.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/UniqueEntity.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Service.php\nnamespace App\\Entity;\n\nuse App\\Entity\\Host;\nuse Symfony\\Bridge\\Doctrine\\Validator\\Constraints\\UniqueEntity;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Service\n{\n    public Host $host;\n    public int $port;\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addConstraint(new UniqueEntity([\n            'fields' => ['host', 'port'],\n            'message' => 'This port is already in use on that host.',\n            'errorPath' => 'port',\n        ]));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Negative Validation with PHP Metadata\nDESCRIPTION: Example demonstrating how to configure the Negative constraint using PHP metadata in a TransferItem entity class.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Negative.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/TransferItem.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass TransferItem\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('withdraw', new Assert\\Negative());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing symfony/phpunit-bridge for Deprecation Detection\nDESCRIPTION: Command to install the Symfony PHPUnit Bridge package as a development dependency. This package helps identify deprecated Symfony features used in the code.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/bundles.rst#2025-04-22_snippet_2\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require --dev symfony/phpunit-bridge\n```\n\n----------------------------------------\n\nTITLE: Setting Custom src Directory for Flex in composer.json (json)\nDESCRIPTION: Shows how to configure the src-dir parameter under the extra section in composer.json, instructing Flex to place new PHP classes in src/App instead of the default src. No external dependencies beyond typical Composer usage; parameters can be updated to suit project organization requirements.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/flex.rst#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"...\": \"...\",\n\n    \"extra\": {\n        \"src-dir\": \"src/App\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Debug Mode for Console Commands (Terminal)\nDESCRIPTION: Illustrates how to run Symfony console commands. The first command uses the `APP_DEBUG` value defined in the `.env` file, while the second command overrides it, enabling debug mode specifically for that execution.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/front_controllers_and_kernel.rst#2025-04-22_snippet_2\n\nLANGUAGE: terminal\nCODE:\n```\n# Use the debug mode defined in the .env file\n$ php bin/console command_name\n\n# Ignore the .env file and enable the debug mode for this command\n$ APP_DEBUG=1 php bin/console command_name\n```\n\n----------------------------------------\n\nTITLE: Generating PHPUnit Test Coverage Report\nDESCRIPTION: These commands generate HTML and console-based test coverage reports using PHPUnit.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/create_framework/unit_testing.rst#2025-04-22_snippet_5\n\nLANGUAGE: terminal\nCODE:\n```\n$ ./vendor/bin/phpunit --coverage-html=cov/\n```\n\nLANGUAGE: terminal\nCODE:\n```\n$ ./vendor/bin/phpunit --coverage-text\n```\n\n----------------------------------------\n\nTITLE: Referencing Symfony CommandTester Class in RestructuredText\nDESCRIPTION: Shows how to reference the CommandTester class from the Symfony Console component in RestructuredText documentation. This class automatically simulates a user hitting ENTER after each input.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/helpers/questionhelper.rst#2025-04-22_snippet_16\n\nLANGUAGE: restructuredtext\nCODE:\n```\n:class:`Symfony\\\\Component\\\\Console\\\\Tester\\\\CommandTester`\n```\n\n----------------------------------------\n\nTITLE: Configuring LessThan Constraint in YAML\nDESCRIPTION: Example of defining the LessThan constraint in YAML configuration to validate that siblings count is less than 5 and age is less than 80.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/LessThan.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Person:\n    properties:\n        siblings:\n            - LessThan: 5\n        age:\n            - LessThan:\n                value: 80\n```\n\n----------------------------------------\n\nTITLE: Configuring Travis CI for Symfony Bundle Testing\nDESCRIPTION: Travis CI configuration for testing a bundle against multiple PHP versions and Symfony versions, including Symfony 2.7, 2.8, 3.0 and development versions.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/bundles.rst#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nlanguage: php\nphp:\n    - 5.3\n    - 5.6\n    - 7.0\n\nmatrix:\n    include:\n        - php: 5.3.3\n          env: COMPOSER_FLAGS='--prefer-lowest --prefer-stable' SYMFONY_DEPRECATIONS_HELPER=max[total]=999999\n        - php: 5.6\n          env: SYMFONY_VERSION='2.7.*'\n        - php: 5.6\n          env: SYMFONY_VERSION='2.8.*'\n        - php: 5.6\n          env: SYMFONY_VERSION='3.0.*'\n        - php: 5.6\n          env: SYMFONY_VERSION='3.1.*'\n        - php: 5.6\n          env: DEPENDENCIES='dev' SYMFONY_VERSION='3.2.*@dev'\n\nbefore_install:\n    - composer self-update\n    - if [ \"$DEPENDENCIES\" == \"dev\" ]; then perl -pi -e 's/^}$/,\"minimum-stability\":\"dev\"}/' composer.json; fi;\n    - if [ \"$SYMFONY_VERSION\" != \"\" ]; then composer --no-update require symfony/symfony:${SYMFONY_VERSION}; fi;\n\ninstall: composer update $COMPOSER_FLAGS\n\nscript: phpunit\n```\n\n----------------------------------------\n\nTITLE: Configuring Date Validation in YAML\nDESCRIPTION: YAML configuration example for applying the Date constraint to an entity property in Symfony.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Date.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Author:\n    properties:\n        birthday:\n            - Date: ~\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP User Provider - Symfony - YAML\nDESCRIPTION: This YAML configuration sets up a Symfony security provider that uses the LDAP user provider mechanism. It specifies the LDAP service, base DN, and search credentials, as well as roles and the user ID field. Prerequisites include symfony/security-bundle, symfony/ldap, and proper service configuration. Key parameters configure connection, authentication, and fetched user attributes; expected output is a working provider able to retrieve user data from LDAP.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/ldap.rst#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\\nsecurity:\\n    # ...\\n\\n    providers:\\n        my_ldap:\\n            ldap:\\n                service: Symfony\\Component\\Ldap\\Ldap\\n                base_dn: dc=example,dc=com\\n                search_dn: \\\"cn=read-only-admin,dc=example,dc=com\\\"\\n                search_password: password\\n                default_roles: ROLE_USER\\n                uid_key: uid\\n                extra_fields: ['email']\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Selectable Months Values for DateIntervalType - Symfony Forms - PHP\nDESCRIPTION: Shows PHP array construction techniques for specifying which month values are available in the DateIntervalType when using the 'choice' widget. Both a numeric range and an explicit value-label associative array are shown, allowing for flexible UX patterns.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/dateinterval.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// values displayed to users range from 0 to 11 (both inclusive)\n'months' => range(1, 12),\n```\n\nLANGUAGE: php\nCODE:\n```\n// values displayed to users range from 1 to 12 (both inclusive)\n'months' => array_combine(range(1, 12), range(1, 12)),\n```\n\n----------------------------------------\n\nTITLE: Defining Translations in PHP Array for Symfony\nDESCRIPTION: Example of a PHP translation file (`translations/blog.en.php`) returning an array where keys are message identifiers and values are the translations. Shows the `message` key translated to 'Hello %name%'.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#2025-04-22_snippet_34\n\nLANGUAGE: php\nCODE:\n```\n// translations/blog.en.php\nreturn [\n    'message' => \"Hello %name%\",\n];\n```\n\n----------------------------------------\n\nTITLE: Structuring Symfony Configuration Directory - Text Structure - text\nDESCRIPTION: This snippet presents a typical directory structure for Symfony's config directory. It helps developers understand where standard configuration files and subdirectories, such as packages and core YAML definitions, are located. Inputs include your base project folder, and outputs are the expected folder/file hierarchy.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration.rst#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nyour-project/\\n├─ config/\\n│  ├─ packages/\\n│  ├─ bundles.php\\n│  ├─ routes.yaml\\n│  └─ services.yaml\n```\n\n----------------------------------------\n\nTITLE: Excluding Files by Name Pattern with Symfony Finder in PHP\nDESCRIPTION: Shows how to exclude files from the search results based on a name pattern using the `notName()` method. The example excludes Ruby files (`*.rb`).\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/finder.rst#2025-04-22_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$finder->files()->notName('*.rb');\n```\n\n----------------------------------------\n\nTITLE: Configuring Mercure Hub in PHP\nDESCRIPTION: PHP configuration for setting up Mercure hub with environment variables and JWT options in Symfony.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mercure.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/mercure.php\n$container->loadFromExtension('mercure', [\n    'hubs' => [\n        'default' => [\n            'url' => '%env(string:MERCURE_URL)%',\n            'public_url' => '%env(string:MERCURE_PUBLIC_URL)%',\n            'jwt' => [\n                'secret' => '%env(string:MERCURE_JWT_SECRET)%',\n                'publish' => ['https://example.com/foo1', 'https://example.com/foo2'],\n                'subscribe' => ['https://example.com/bar1', 'https://example.com/bar2'],\n                'algorithm' => 'hmac.sha256',\n                'provider' => 'My\\Provider',\n                'factory' => 'My\\Factory',\n                'value' => 'my.jwt',\n            ],\n        ],\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring ExpressionSyntax Constraint with XML\nDESCRIPTION: Example showing how to configure the ExpressionSyntax constraint using XML validation configuration for an Order entity.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/ExpressionSyntax.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\Order\">\n        <property name=\"promotion\">\n            <constraint name=\"ExpressionSyntax\"/>\n        </property>\n        <property name=\"shippingOptions\">\n            <constraint name=\"ExpressionSyntax\">\n                <option name=\"allowedVariables\">\n                    <value>user</value>\n                    <value>shipping_centers</value>\n                </option>\n            </constraint>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Inverting Debug Mode Using \"not\" Environment Processor with PHP Configuration in Symfony\nDESCRIPTION: Assigns the inversed value of APP_DEBUG to 'safe_for_production' parameter inline in a PHP configuration file using the 'not' environment variable processor. Can be used in any PHP file where parameters are set. Ensures correct toggling of critical application behaviors.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/env_var_processors.rst#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\\n$container->setParameter('safe_for_production', '%env(not:APP_DEBUG)%');\\n\n```\n\n----------------------------------------\n\nTITLE: Using Standalone YAML Linting in Symfony\nDESCRIPTION: Shows how to use the standalone yaml-lint binary provided by the Yaml component to validate YAML translation files without a console application.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/translation.rst#2025-04-22_snippet_55\n\nLANGUAGE: terminal\nCODE:\n```\n$ php vendor/bin/yaml-lint translations/\n```\n\n----------------------------------------\n\nTITLE: Registering a Monolog Processor for a Specific Channel in YAML\nDESCRIPTION: YAML configuration registering `Monolog\\Processor\\IntrospectionProcessor` and applying the `monolog.processor` tag with the `channel` attribute set to `security`. This configuration ensures the processor only modifies log records associated with the 'security' logging channel, commonly used by Symfony's Security component.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/dic_tags.rst#2025-04-22_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n    Monolog\\Processor\\IntrospectionProcessor:\n        tags:\n            - { name: monolog.processor, channel: security }\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Form Template in Twig\nDESCRIPTION: Twig template implementation for custom postal address form rendering with Bootstrap-style form groups.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/create_custom_field_type.rst#2025-04-22_snippet_6\n\nLANGUAGE: Twig\nCODE:\n```\n{% block postal_address_row %}\n    {% for child in form.children|filter(child => not child.rendered) %}\n        <div class=\"form-group\">\n            {{ form_label(child) }}\n            {{ form_widget(child) }}\n            {{ form_help(child) }}\n            {{ form_errors(child) }}\n        </div>\n    {% endfor %}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Using LessThanOrEqual for Date Comparison with PHP Attributes\nDESCRIPTION: Example of using the LessThanOrEqual constraint to validate that a date of birth is not in the future.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/LessThanOrEqual.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Person.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Person\n{\n    #[Assert\\LessThanOrEqual('today')]\n    protected \\DateTimeInterface $dateOfBirth;\n}\n```\n\n----------------------------------------\n\nTITLE: Requiring Symfony HTTP Client for OIDC User Info - Terminal\nDESCRIPTION: This terminal command installs the symfony/http-client Composer package, a prerequisite for using the OidcUserInfoTokenHandler in Symfony access token authentication. This package is required to make HTTP calls to the OpenID Connect server for retrieving user information during authentication.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/access_token.rst#2025-04-22_snippet_14\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require symfony/http-client\n```\n\n----------------------------------------\n\nTITLE: Custom Value Resolver Implementation\nDESCRIPTION: Implementation of a custom value resolver that handles ID value objects implementing IdentifierInterface\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/controller/value_resolver.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\ValueResolver;\n\nuse App\\IdentifierInterface;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpKernel\\Controller\\ValueResolverInterface;\nuse Symfony\\Component\\HttpKernel\\ControllerMetadata\\ArgumentMetadata;\n\nclass BookingIdValueResolver implements ValueResolverInterface\n{\n    public function resolve(Request $request, ArgumentMetadata $argument): iterable\n    {\n        // get the argument type (e.g. BookingId)\n        $argumentType = $argument->getType();\n        if (\n            !$argumentType\n            || !is_subclass_of($argumentType, IdentifierInterface::class, true)\n        ) {\n            return [];\n        }\n\n        // get the value from the request, based on the argument name\n        $value = $request->attributes->get($argument->getName());\n        if (!is_string($value)) {\n            return [];\n        }\n\n        // create and return the value object\n        return [$argumentType::fromString($value)];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Assets Base Path (YAML)\nDESCRIPTION: Example of configuring the base path for assets in the FrameworkBundle using YAML configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/framework.yaml\nframework:\n    # ...\n    assets:\n        base_path: '/images'\n```\n\n----------------------------------------\n\nTITLE: Configuring Bootstrap 5 Form Theme in PHP\nDESCRIPTION: PHP configuration to apply Bootstrap 5 form theme globally in a Symfony application\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/bootstrap5.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/twig.php\nuse Symfony\\Config\\TwigConfig;\n\nreturn static function(TwigConfig $twig): void {\n    $twig->formThemes(['bootstrap_5_layout.html.twig']);\n\n    // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Closures in PHP\nDESCRIPTION: PHP configuration for injecting service closures. Shows how to use the service_closure() helper function in a PHP configuration file and handle optional dependencies with ignoreOnInvalid().\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/service_closures.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nuse App\\Service\\MyService;\n\nreturn function (ContainerConfigurator $container): void {\n    $services = $container->services();\n\n    $services->set(MyService::class)\n        ->args([service_closure('mailer')]);\n\n    // In case the dependency is optional\n    // $services->set(MyService::class)\n    //     ->args([service_closure('mailer')->ignoreOnInvalid()]);\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling Commands in Event Listeners\nDESCRIPTION: Shows how to disable command execution from within an event listener using the disableCommand() method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/events.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Console\\ConsoleEvents;\nuse Symfony\\Component\\Console\\Event\\ConsoleCommandEvent;\n\n$dispatcher->addListener(ConsoleEvents::COMMAND, function (ConsoleCommandEvent $event): void {\n    // gets the command to be executed\n    $command = $event->getCommand();\n\n    // ... check if the command can be executed\n\n    // disables the command, this will result in the command being skipped\n    // and code 113 being returned from the Application\n    $event->disableCommand();\n\n    // it is possible to enable the command in a later listener\n    if (!$event->commandShouldRun()) {\n        $event->enableCommand();\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Service Configuration\nDESCRIPTION: Docker Compose configuration example showing service setup with Symfony integration labels\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/symfony_server.rst#2025-04-22_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n    db:\n        ports: [3306]\n        labels:\n            com.symfony.server.service-prefix: 'DATABASE'\n```\n\n----------------------------------------\n\nTITLE: Configuring Mercure Hub in XML\nDESCRIPTION: XML configuration for setting up Mercure hub with environment variables and JWT options in Symfony.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mercure.rst#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/mercure.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<config>\n    <hub\n        name=\"default\"\n        url=\"%env(string:MERCURE_URL)%\"\n        public_url=\"%env(string:MERCURE_PUBLIC_URL)%\"\n    > <!-- public_url defaults to url -->\n        <jwt\n            secret=\"%env(string:MERCURE_JWT_SECRET)%\"\n            algorithm=\"hmac.sha256\"\n            provider=\"My\\Provider\"\n            factory=\"My\\Factory\"\n            value=\"my.jwt\"\n        >\n            <publish>https://example.com/foo1</publish>\n            <publish>https://example.com/foo2</publish>\n            <subscribe>https://example.com/bar1</subscribe>\n            <subscribe>https://example.com/bar2</subscribe>\n        </jwt>\n    </hub>\n</config>\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP HTTP Basic Authentication in PHP\nDESCRIPTION: Example of configuring HTTP Basic LDAP authentication in a Symfony application using PHP format. Uses the SecurityConfig object to define a stateless firewall with LDAP authentication.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/ldap.rst#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/security.php\nuse Symfony\\Component\\Ldap\\Ldap;\nuse Symfony\\Config\\SecurityConfig;\n\nreturn static function (SecurityConfig $security): void {\n    $security->firewall('main')\n        ->stateless(true)\n        ->formLoginLdap()\n            ->service(Ldap::class)\n            ->dnString('uid={user_identifier},dc=example,dc=com')\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Database Connection in a Symfony Controller\nDESCRIPTION: PHP code example showing how to access a named database connection in a Symfony controller using the Doctrine ManagerRegistry service.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/doctrine.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/SomeController.php\nuse Doctrine\\Persistence\\ManagerRegistry;\n\nclass SomeController\n{\n    public function someMethod(ManagerRegistry $doctrine): void\n    {\n        $connection = $doctrine->getConnection('customer');\n        $result = $connection->fetchAllAssociative('SELECT name FROM customer');\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Desktop Notification Environment Variables\nDESCRIPTION: Example of setting up environment variables for the JoliNotif desktop notification service.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/notifier.rst#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n# .env\nJOLINOTIF=jolinotif://default\n```\n\n----------------------------------------\n\nTITLE: Customizing URL Validation Error Message with YAML in Symfony\nDESCRIPTION: Example of setting a custom error message for URL validation using YAML configuration, including the invalid value in the message.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Url.rst#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Author:\n    properties:\n        bioUrl:\n            - Url:\n                message: The url \"{{ value }}\" is not a valid url.\n```\n\n----------------------------------------\n\nTITLE: Configuring Firewall Logout Paths for Absolute URLs (Symfony YAML)\nDESCRIPTION: This YAML snippet shows the necessary `security.yaml` configuration context for the `logout_url` function. The specified `logout.path` under each firewall is used to construct the absolute logout URL.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#2025-04-22_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\nsecurity:\n    # ...\n\n    firewalls:\n        main:\n            # ...\n            logout:\n                path: '/logout'\n        othername:\n            # ...\n            logout:\n                path: '/other/logout'\n```\n\n----------------------------------------\n\nTITLE: Updating Symfony Front Controller for Multi-App Kernel Instantiation\nDESCRIPTION: Shows the initial part of updating the main front controller (`public/index.php`). The modification involves ensuring the `APP_ID` environment variable (or value from `$context`) is retrieved and passed as the third argument to the `Shared\\Kernel` constructor when it's instantiated.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/multiple_kernels.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// public/index.php\nuse Shared\\Kernel;\n// ...\n\nreturn function (array $context): Kernel {\n```\n\n----------------------------------------\n\nTITLE: Adding New Feature Entries to a Changelog in Markdown\nDESCRIPTION: This Markdown snippet provides a template for documenting new feature additions in a component's CHANGELOG.md file. The required format includes the main title (CHANGELOG), a minor version subsection, and a bulleted feature entry. It assumes release versioning and encourages adding new entries at the top; the message should be imperative, short, and not end with a period.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/contributing/code/conventions.rst#2025-04-22_snippet_5\n\nLANGUAGE: Markdown\nCODE:\n```\nCHANGELOG\\n=========\\n\\n5.3\\n---\\n\\n * Add `MagicConfig` that allows configuring things\n```\n\n----------------------------------------\n\nTITLE: Trusting All Proxies in YAML Configuration\nDESCRIPTION: This YAML configuration demonstrates how to trust all incoming requests by using 'REMOTE_ADDR' as a placeholder. This is useful when the IP of the reverse proxy changes constantly, but should be used with caution.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/deployment/proxies.rst#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/framework.yaml\nframework:\n    # ...\n    # trust *all* requests (the 'REMOTE_ADDR' string is replaced at\n    # runtime by $_SERVER['REMOTE_ADDR'])\n    trusted_proxies: '127.0.0.1,REMOTE_ADDR'\n\n    # you can also use the 'PRIVATE_SUBNETS' string, which is replaced at\n    # runtime by the IpUtils::PRIVATE_SUBNETS constant\n    # trusted_proxies: '127.0.0.1,PRIVATE_SUBNETS'\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Mapping Types in YAML\nDESCRIPTION: YAML configuration for registering custom Doctrine mapping types\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine/dbal.rst#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/doctrine.yaml\ndoctrine:\n    dbal:\n        types:\n            custom_first:  App\\Type\\CustomFirst\n            custom_second: App\\Type\\CustomSecond\n```\n\n----------------------------------------\n\nTITLE: Configuring Serializer XML Mapping for DateTime Format\nDESCRIPTION: XML configuration example showing how to set up serializer mapping for a Person class with datetime format contexts and groups.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer.rst#2025-04-22_snippet_22\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/serializer/person.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<serializer xmlns=\"http://symfony.com/schema/dic/serializer-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/serializer-mapping\n        https://symfony.com/schema/dic/serializer-mapping/serializer-mapping-1.0.xsd\"\n>\n    <class name=\"App\\Model\\Person\">\n        <attribute name=\"createdAt\">\n            <group>extended</group>\n\n            <context>\n                <entry name=\"datetime_format\">Y-m-d\\TH:i:sP</entry>\n            </context>\n            <context>\n                <entry name=\"datetime_format\">Y-m-d\\TH:i:s.vP</entry>\n                <group>extended</group>\n            </context>\n        </attribute>\n    </class>\n</serializer>\n```\n\n----------------------------------------\n\nTITLE: Date Validation Configuration in XML\nDESCRIPTION: XML configuration for applying the Date constraint to an entity property in Symfony, using constraint mapping schema.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Date.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\Author\">\n        <property name=\"birthday\">\n            <constraint name=\"Date\"/>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Attaching a Custom Domain to a Symfony Project\nDESCRIPTION: Commands to create a custom .wip domain for a local Symfony project.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/symfony_server.rst#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ cd my-project/\n$ symfony proxy:domain:attach my-domain\n```\n\n----------------------------------------\n\nTITLE: Overriding Service Definitions in YAML\nDESCRIPTION: Example showing how service definitions are replaced when overriding in YAML configuration. When the same service ID is defined twice, the original definition is lost and completely replaced.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/service_decoration.rst#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nservices:\n    App\\Mailer: ~\n\n    # this replaces the old App\\Mailer definition with the new one, the\n    # old definition is lost\n    App\\Mailer:\n        class: App\\NewMailer\n```\n\n----------------------------------------\n\nTITLE: Configuring Encrypted Cache with SodiumMarshaller in XML\nDESCRIPTION: XML configuration for setting up encrypted cache using SodiumMarshaller service with support for key rotation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/cache.rst#2025-04-22_snippet_18\n\nLANGUAGE: xml\nCODE:\n```\n<services>\n    <service id=\"Symfony\\Component\\Cache\\Marshaller\\SodiumMarshaller\" decorates=\"cache.default_marshaller\">\n        <argument type=\"collection\">\n            <argument>env(base64:CACHE_DECRYPTION_KEY)</argument>\n            <!-- use multiple keys in order to rotate them -->\n            <!-- <argument>env(base64:OLD_CACHE_DECRYPTION_KEY)</argument> -->\n        </argument>\n        <argument type=\"service\" id=\".inner\"/>\n    </service>\n</services>\n```\n\n----------------------------------------\n\nTITLE: Configuring WordCount Constraint in YAML\nDESCRIPTION: YAML configuration example for WordCount constraint to validate content property word count.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/WordCount.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\BlogPostDTO:\n    properties:\n        content:\n            - WordCount:\n                min: 100\n                max: 200\n```\n\n----------------------------------------\n\nTITLE: Registering Multiple Event Handlers in a Subscriber\nDESCRIPTION: Implementation of getSubscribedEvents that registers handlers for both CONTROLLER and RESPONSE kernel events, enabling both pre-execution and post-execution processing for controllers.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/event_dispatcher.rst#2025-04-22_snippet_19\n\nLANGUAGE: php\nCODE:\n```\npublic static function getSubscribedEvents(): array\n{\n    return [\n        KernelEvents::CONTROLLER => 'onKernelController',\n        KernelEvents::RESPONSE => 'onKernelResponse',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Composer Autoloading with PSR-4 for src/ Directory - JSON\nDESCRIPTION: Defines a basic composer.json configuration that sets up PSR-4 autoloading for a src/ directory, allowing PHP classes in App\\\\ namespace to be auto-loaded. Prerequisite for moving classes out of index.php as the project grows. Requires Composer, and after editing this file, composer dump-autoload must be executed to regenerate autoload files.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/micro_kernel_trait.rst#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"require\": {\n        \"...\": \"...\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"App\\\\\": \"src/\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Symfony Version Upmerge\nDESCRIPTION: Complete sequence of Git commands to perform upmerge across multiple Symfony versions (6.4, 7.2, 7.3). Includes fetching updates, resetting branches, merging changes, and pushing results.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/contributing/core_team.rst#2025-04-22_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\n# 'origin' is refered to as the main upstream project\n$ git fetch origin\n\n# update the local branches\n$ git checkout 6.4\n$ git reset --hard origin/6.4\n$ git checkout 7.2\n$ git reset --hard origin/7.2\n$ git checkout 7.3\n$ git reset --hard origin/7.3\n\n# upmerge 6.4 into 7.2\n$ git checkout 7.2\n$ git merge --no-ff 6.4\n# ... resolve conflicts\n$ git commit\n\n# upmerge 7.2 into 7.3\n$ git checkout 7.3\n$ git merge --no-ff 7.2\n# ... resolve conflicts\n$ git commit\n\n$ git push origin 7.3 7.2 6.4\n```\n\n----------------------------------------\n\nTITLE: Base Author Class Implementation with Token Validation\nDESCRIPTION: Basic implementation of an Author class with a token validation method that will be constrained.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/IsTrue.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Author.php\nnamespace App\\Entity;\n\nclass Author\n{\n    protected string $token;\n\n    public function isTokenValid(): bool\n    {\n        return $this->token === $this->generateToken();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Mailer Envelope Recipients in Symfony (XML)\nDESCRIPTION: Sets up envelope recipients for the Symfony mailer, overriding any other recipients set in the code.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_58\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/mailer.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n    <framework:config>\n        <framework:mailer dsn=\"smtp://localhost:25\">\n            <framework:envelope>\n                <framework:recipient>admin@symfony.com</framework:recipient>\n                <framework:recipient>lead@symfony.com</framework:recipient>\n            </framework:envelope>\n        </framework:mailer>\n    </framework:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Locale-Aware Route in Symfony\nDESCRIPTION: Examples of configuring a route with a locale parameter in different Symfony routing formats (PHP attributes, YAML, XML, and PHP array).\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/translation.rst#2025-04-22_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/ContactController.php\nnamespace App\\Controller;\n\n// ...\nclass ContactController extends AbstractController\n{\n    #[Route(\n        path: '/{_locale}/contact',\n        name: 'contact',\n        requirements: [\n            '_locale' => 'en|fr|de',\n        ],\n    )]\n    public function contact(): Response\n    {\n        // ...\n    }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# config/routes.yaml\ncontact:\n    path:       /{_locale}/contact\n    controller: App\\Controller\\ContactController::index\n    requirements:\n        _locale: en|fr|de\n```\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/routes.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<routes xmlns=\"http://symfony.com/schema/routing\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/routing\n        https://symfony.com/schema/routing/routing-1.0.xsd\">\n\n    <route id=\"contact\" path=\"/{_locale}/contact\">\n        controller=\"App\\Controller\\ContactController::index\">\n        <requirement key=\"_locale\">en|fr|de</requirement>\n    </route>\n</routes>\n```\n\nLANGUAGE: php\nCODE:\n```\n// config/routes.php\nuse App\\Controller\\ContactController;\nuse Symfony\\Component\\Routing\\Loader\\Configurator\\RoutingConfigurator;\n\nreturn function (RoutingConfigurator $routes): void {\n    $routes->add('contact', '/{_locale}/contact')\n        ->controller([ContactController::class, 'index'])\n        ->requirements([\n            '_locale' => 'en|fr|de',\n        ])\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for React\nDESCRIPTION: Modification to webpack.config.js file to enable React preset in Webpack Encore configuration. This enables babel-preset-react for processing .js and .jsx files.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/reactjs.rst#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n  // webpack.config.js\n  // ...\n\n  Encore\n      // ...\n     .enableReactPreset()\n  ;\n```\n\n----------------------------------------\n\nTITLE: Transliterating Emojis to Text in PHP\nDESCRIPTION: PHP code demonstrating how to use EmojiTransliterator to convert emojis to their textual representation in different languages.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/emoji.rst#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Emoji\\EmojiTransliterator;\n\n// Describe emojis in English\n$transliterator = EmojiTransliterator::create('en');\n$transliterator->transliterate('Menus with 🍕 or 🍝');\n// => 'Menus with pizza or spaghetti'\n\n// Describe emojis in Ukrainian\n$transliterator = EmojiTransliterator::create('uk');\n$transliterator->transliterate('Menus with 🍕 or 🍝');\n// => 'Menus with піца or спагеті'\n```\n\n----------------------------------------\n\nTITLE: Defining All Constraint in XML for Symfony Validator\nDESCRIPTION: XML configuration example for the All constraint. This applies NotBlank and Length constraints to each element in the favoriteColors array property.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/All.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\User\">\n        <property name=\"favoriteColors\">\n            <constraint name=\"All\">\n                <option name=\"constraints\">\n                    <constraint name=\"NotBlank\"/>\n                    <constraint name=\"Length\">\n                        <option name=\"min\">5</option>\n                    </constraint>\n                </option>\n            </constraint>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Querying Database with DBAL in Symfony\nDESCRIPTION: Command to execute direct SQL queries using Doctrine DBAL. Useful for debugging and verifying database state.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine.rst#2025-04-22_snippet_10\n\nLANGUAGE: terminal\nCODE:\n```\n$ php bin/console dbal:run-sql 'SELECT * FROM product'\n```\n\n----------------------------------------\n\nTITLE: Registering Monolog Processor Per Channel in YAML\nDESCRIPTION: YAML configuration for registering a processor for a specific logging channel. This limits the processor to only be applied to log records for the 'app' channel instead of all channels.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/logging/processors.rst#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nservices:\n    App\\Logger\\SessionRequestProcessor:\n        tags:\n            - { name: monolog.processor, channel: 'app' }\n```\n\n----------------------------------------\n\nTITLE: Configuring ConsoleLogger Verbosity Levels in PHP\nDESCRIPTION: This snippet demonstrates how to configure custom verbosity levels for the ConsoleLogger. It maps specific log levels to output verbosity levels.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/logger.rst#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Psr\\Log\\LogLevel;\n// ...\n\n$verbosityLevelMap = [\n    LogLevel::NOTICE => OutputInterface::VERBOSITY_NORMAL,\n    LogLevel::INFO   => OutputInterface::VERBOSITY_NORMAL,\n];\n\n$logger = new ConsoleLogger($output, $verbosityLevelMap);\n```\n\n----------------------------------------\n\nTITLE: Resolving CORS Issues with webpack-dev-server\nDESCRIPTION: Configuration to resolve Cross-Origin Resource Sharing (CORS) issues when using webpack-dev-server by allowing all hosts.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/dev-server.rst#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// webpack.config.js\n// ...\n\nEncore\n    // ...\n\n    .configureDevServerOptions(options => {\n        options.allowedHosts = 'all';\n        // in older Webpack Dev Server versions, use this option instead:\n        // options.firewall = false;\n    })\n```\n\n----------------------------------------\n\nTITLE: Mapping Entities Outside Bundle in PHP\nDESCRIPTION: PHP configuration for mapping Doctrine entities that are located outside of a bundle structure, specifying the entity directory, namespace prefix, and alias.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/doctrine.rst#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Config\\DoctrineConfig;\n\nreturn static function (DoctrineConfig $doctrine): void {\n    $emDefault = $doctrine->orm()->entityManager('default');\n\n    $emDefault->autoMapping(true);\n    $emDefault->mapping('SomeEntityNamespace')\n        ->type('attribute')\n        ->dir('%kernel.project_dir%/src/Entity')\n        ->isBundle(false)\n        ->prefix('App\\Entity')\n        ->alias('App')\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining BlogPost Entity with Public Properties\nDESCRIPTION: PHP class definition for a BlogPost entity using public properties for the marking store.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/workflow.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/BlogPost.php\nnamespace App\\Entity;\n\nclass BlogPost\n{\n    // the configured marking store property must be declared\n    public string $currentPlace;\n    public string $title;\n    public string $content;\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing Symfony Cache on Linux/macOS Post-Upgrade\nDESCRIPTION: Removes the entire contents of the `var/cache/` directory recursively and forcefully using the `rm -rf` command on Linux and macOS systems. This is a crucial step after a major Symfony version upgrade to prevent issues caused by stale cache files from the previous version.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/upgrade_major.rst#2025-04-22_snippet_7\n\nLANGUAGE: terminal\nCODE:\n```\n# run this command on Linux and macOS\n$ rm -rf var/cache/*\n```\n\n----------------------------------------\n\nTITLE: Configuring Firewall Path Restriction - Symfony PHP\nDESCRIPTION: Demonstrates configuring a firewall in a Symfony PHP config file to restrict access to paths starting with \"/admin\" by calling the \"pattern\" method. Requires the use of SecurityConfig and registration in \"config/packages/security.php\". Accepts a regular expression string for matching.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/firewall_restriction.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/security.php\nuse Symfony\\Config\\SecurityConfig;\n\nreturn static function (SecurityConfig $security): void {\n    // ....\n\n    $security->firewall('secured_area')\n        ->pattern('^/admin')\n        // ...\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Searching Custom Streams (S3) with Symfony Finder in PHP\nDESCRIPTION: Provides an example of using the Finder component with a custom PHP stream wrapper, specifically demonstrating searching files within an AWS S3 bucket. It requires registering the `s3://` stream wrapper (e.g., using the official AWS SDK) before using it with the `in()` method. Other criteria like `name()`, `size()`, and `date()` can be combined.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/finder.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Finder\\Finder;\n\n// register a 's3://' wrapper with the official AWS SDK\n$s3Client = new Aws\\S3\\S3Client([/* config options */]);\n$s3Client->registerStreamWrapper();\n\n$finder = new Finder();\n$finder->name('photos*')->size('< 100K')->date('since 1 hour ago');\nforeach ($finder->in('s3://bucket-name') as $file) {\n    // ... do something with the file\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring dump_destination in YAML\nDESCRIPTION: YAML configuration for setting the dump_destination parameter in the DebugBundle. This example redirects the output of var dumps to php://stderr instead of showing them in the WebDebugToolbar.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/debug.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/debug.yaml\ndebug:\n    dump_destination: php://stderr\n```\n\n----------------------------------------\n\nTITLE: Activating switch_user in Symfony Security Firewall (XML)\nDESCRIPTION: Activates the switch_user feature in the Symfony firewall configuration using XML syntax. Intended for use in config/packages/security.xml within projects leveraging XML service definitions. The <switch-user/> element enables user impersonation. Only users with ROLE_ALLOWED_TO_SWITCH can impersonate others.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/impersonating_user.rst#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/security.xml -->\\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\\n<srv:container xmlns=\\\"http://symfony.com/schema/dic/security\\\"\\n    xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n    xmlns:srv=\\\"http://symfony.com/schema/dic/services\\\"\\n    xsi:schemaLocation=\\\"http://symfony.com/schema/dic/services\\n        https://symfony.com/schema/dic/services/services-1.0.xsd\\n        http://symfony.com/schema/dic/security\\n        https://symfony.com/schema/dic/security/security-1.0.xsd\\\">\\n\\n    <config>\\n        <!-- ... -->\\n\\n        <firewall name=\\\"main\\\">\\n            <!-- ... -->\\n            <switch-user/>\\n        </firewall>\\n    </config>\\n</srv:container>\n```\n\n----------------------------------------\n\nTITLE: Importing Routes from a Custom Service Using YAML in Symfony - YAML\nDESCRIPTION: This YAML snippet demonstrates how to import application routes via a custom Symfony service. The resource key specifies the service and method to call (admin_route_loader::loadRoutes), and type is set to 'service' to enable this loader. The referenced service method must return a RouteCollection; no Symfony interface is required unless autoconfiguration is used. The input must be a valid YAML configuration, and outputs are whatever the custom service returns as routes.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/routing/custom_route_loader.rst#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# config/routes.yaml\nadmin_routes:\n    resource: 'admin_route_loader::loadRoutes'\n    type: service\n```\n\n----------------------------------------\n\nTITLE: Retrieving Short and Long Property Descriptions (Symfony, PHP)\nDESCRIPTION: Shows how to retrieve short and long descriptions (from property DocBlocks/annotations) using getShortDescription and getLongDescription. Returns summary and detailed descriptions as strings if available. Requires a properly configured PropertyInfoExtractor and relevant extractors (e.g., PhpDocExtractor).\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/property_info.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$title = $propertyInfo->getShortDescription($class, $property);\n/*\n    Example Result\n    --------------\n    string(41) \"This is the first line of the DocComment.\"\n*/\n\n$paragraph = $propertyInfo->getLongDescription($class, $property);\n/*\n    Example Result\n    --------------\n    string(79):\n        This is the subsequent paragraph in the DocComment.\n        It can span multiple lines.\n*/\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Imports for Page-Specific JavaScript\nDESCRIPTION: Demonstrates how to conditionally load JavaScript files only on certain pages using dynamic imports, which may require special handling for older browsers.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/asset_mapper.rst#2025-04-22_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nconst someCondition = '...';\nif (someCondition) {\n    import('./some-file.js');\n\n    // or use async/await\n    // const something = await import('./some-file.js');\n}\n```\n\n----------------------------------------\n\nTITLE: Validating ULID with PHP Attributes in Symfony\nDESCRIPTION: Example of using PHP attributes to apply the ULID validation constraint to a property in a Symfony entity class. This ensures that the identifier property contains a valid ULID.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Ulid.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/File.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass File\n{\n    #[Assert\\Ulid]\n    protected string $identifier;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fragment URL in Symfony (XML)\nDESCRIPTION: Demonstrates the XML configuration for setting up the special URL used for serving template fragments when using the controller() function in Twig templates.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/templates.rst#2025-04-22_snippet_38\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/framework.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <!-- ... -->\n    <framework:config>\n        <framework:fragment path=\"/_fragment\"/>\n    </framework:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Converting Emojis to Universal Short Codes in PHP\nDESCRIPTION: PHP code demonstrating how to use EmojiTransliterator with 'emoji-text' locale to convert emojis to universal short codes.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/emoji.rst#2025-04-22_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n$transliterator = EmojiTransliterator::create('emoji-text');\n$transliterator->transliterate('Breakfast with 🥝 or 🥛');\n// => 'Breakfast with :kiwifruit: or :milk-glass:\n```\n\n----------------------------------------\n\nTITLE: Configuring Blank Constraint in YAML for Symfony Validation\nDESCRIPTION: Shows how to apply the Blank validation constraint using YAML configuration in Symfony.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Blank.rst#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Author:\n    properties:\n        firstName:\n            - Blank: ~\n```\n\n----------------------------------------\n\nTITLE: Setting Expires Header with Response Method in PHP\nDESCRIPTION: Shows how to set the Expires header using the Response object's setExpires method for caching with an expiration of 600 seconds in the future.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/http_cache/expiration.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$date = new DateTime();\n$date->modify('+600 seconds');\n\n$response->setExpires($date);\n```\n\n----------------------------------------\n\nTITLE: Defining Author Entity with ProfileData Collection in PHP\nDESCRIPTION: Example class that defines an Author entity with a profileData array property that will be validated with the Collection constraint.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Collection.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Author.php\nnamespace App\\Entity;\n\nclass Author\n{\n    protected array $profileData = [\n        'personal_email' => '...',\n        'short_bio' => '...',\n    ];\n\n    public function setProfileData($key, $value): void\n    {\n        $this->profileData[$key] = $value;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring webpack-dev-server to Use Symfony Web Server SSL Certificate\nDESCRIPTION: Diff showing how to modify webpack.config.js to reuse the Symfony web server SSL certificate for webpack-dev-server HTTPS support.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/dev-server.rst#2025-04-22_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n  // webpack.config.js\n  // ...\n+ const path = require('path');\n\n  Encore\n      // ...\n\n+     .configureDevServerOptions(options => {\n+         options.server = {\n+             type: 'https',\n+             options: {\n+                 pfx: path.join(process.env.HOME, '.symfony5/certs/default.p12'),\n+             }\n+         }\n+     })\n```\n\n----------------------------------------\n\nTITLE: Modifying Framework Class to Use Interfaces\nDESCRIPTION: This code updates the Framework class to use interfaces for URL matcher, controller resolver, and argument resolver, improving testability.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/create_framework/unit_testing.rst#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace Simplex;\n\n// ...\n\nuse Calendar\\Controller\\LeapYearController;\nuse Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolverInterface;\nuse Symfony\\Component\\HttpKernel\\Controller\\ControllerResolverInterface;\nuse Symfony\\Component\\Routing\\Matcher\\UrlMatcherInterface;\n\nclass Framework\n{\n    public function __construct(\n        private UrlMatcherInterface $matcher,\n        private ControllerResolverInterface $resolver,\n        private ArgumentResolverInterface $argumentResolver,\n    ) {\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Progress Indicator in PHP\nDESCRIPTION: Demonstrates how to create and use a basic progress indicator in a Symfony console command. Shows initialization, progress advancement, and completion.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/helpers/progressindicator.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Console\\Helper\\ProgressIndicator;\n\n// creates a new progress indicator\n$progressIndicator = new ProgressIndicator($output);\n\n// starts and displays the progress indicator with a custom message\n$progressIndicator->start('Processing...');\n\n$i = 0;\nwhile ($i++ < 50) {\n    // ... do some work\n\n    // advances the progress indicator\n    $progressIndicator->advance();\n}\n\n// ensures that the progress indicator shows a final message\n$progressIndicator->finish('Finished');\n```\n\n----------------------------------------\n\nTITLE: Configuring Setter Injection in Service Container (YAML)\nDESCRIPTION: YAML configuration for setter injection specifying the method call to inject the mailer service.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/injection_types.rst#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nservices:\n    # ...\n\n    app.newsletter_manager:\n        class: App\\Mail\\NewsletterManager\n        calls:\n            - setMailer: ['@mailer']\n```\n\n----------------------------------------\n\nTITLE: Configuring Twig Templates for Specific Symfony Applications\nDESCRIPTION: YAML configuration for setting up application-specific Twig templates. This example shows how to configure the Admin application to use templates from a specific directory with a custom namespace.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/multiple_kernels.rst#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n# apps/admin/config/packages/twig.yaml\ntwig:\n    paths:\n        '%kernel.project_dir%/apps/admin/templates': Admin\n```\n\n----------------------------------------\n\nTITLE: Listing Available PHP Versions\nDESCRIPTION: Command to list all PHP versions installed on the system that can be used with Symfony server.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/symfony_server.rst#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ symfony local:php:list\n\n  # You'll see all supported SAPIs (CGI, FastCGI, etc.) for each version.\n  # FastCGI (php-fpm) is used when possible; then CGI (which acts as a FastCGI\n  # server as well), and finally, the server falls back to plain CGI.\n```\n\n----------------------------------------\n\nTITLE: Registering Clock Mock in Bootstrap PHP\nDESCRIPTION: PHP code example showing how to register ClockMock for time-sensitive tests in the bootstrap file.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/phpunit_bridge.rst#2025-04-22_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n// config/bootstrap.php\nuse Symfony\\Bridge\\PhpUnit\\ClockMock;\n\n// ...\nif ('test' === $_SERVER['APP_ENV']) {\n    ClockMock::register('Acme\\\\MyClassTest\\\\');\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Bootstrap Package with npm\nDESCRIPTION: Command to install Bootstrap as a dev dependency in a Symfony project using npm.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/bootstrap.rst#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ npm install bootstrap --save-dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Stateless Authentication in Symfony Firewall (PHP)\nDESCRIPTION: This PHP configuration sets up a stateless firewall in Symfony. The stateless method is called on the firewall configuration object with a true argument, indicating that the session should not be used for authentication.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/security.rst#2025-04-22_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/security.php\nuse Symfony\\Config\\SecurityConfig;\n\nreturn static function (SecurityConfig $security): void {\n    $mainFirewall = $security->firewall('main');\n    $mainFirewall->stateless(true);\n    // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Week Constraint in XML for Symfony Validation\nDESCRIPTION: XML configuration for the Week constraint that validates the 'startWeek' property of an OnlineCourse entity, ensuring it falls between weeks 1 and 20 of 2022.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Week.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\OnlineCourse\">\n        <property name=\"startWeek\">\n            <constraint name=\"Week\">\n                <option name=\"min\">2022-W01</option>\n                <option name=\"max\">2022-W20</option>\n            </constraint>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Translation Dumper Service\nDESCRIPTION: Demonstrates how to register a custom translation dumper service (`App\\Translation\\JsonFileDumper`) in Symfony using YAML, XML, and PHP configuration. The service must be tagged with `translation.dumper` and requires an `alias` option (e.g., 'json') which specifies the format name used when dumping translations.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/dic_tags.rst#2025-04-22_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\n.. code-block:: yaml\n\n    services:\n        App\\Translation\\JsonFileDumper:\n            tags:\n                - { name: translation.dumper, alias: json }\n```\n\nLANGUAGE: xml\nCODE:\n```\n.. code-block:: xml\n\n    <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n    <container xmlns=\"http://symfony.com/schema/dic/services\"\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n            https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n        <services>\n            <service id=\"App\\Translation\\JsonFileDumper\">\n                <tag name=\"translation.dumper\" alias=\"json\"/>\n            </service>\n        </services>\n    </container>\n```\n\nLANGUAGE: php\nCODE:\n```\n.. code-block:: php\n\n    use App\\Translation\\JsonFileDumper;\n\n    $container->register(JsonFileDumper::class)\n        ->addTag('translation.dumper', ['alias' => 'json']);\n```\n\n----------------------------------------\n\nTITLE: Accessing Raw Configuration Values in Extension Load Method (PHP)\nDESCRIPTION: Shows how configuration values defined under the extension's alias in loaded files are passed as an array (`$configs`) to the `load()` method. This example demonstrates directly accessing these values by index.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/dependency_injection/compilation.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\npublic function load(array $configs, ContainerBuilder $container): void\n{\n    $foo = $configs[0]['foo']; //fooValue\n    $bar = $configs[0]['bar']; //barValue\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Translations in XLIFF for trans Filter\nDESCRIPTION: Example XLIFF (XML) configuration (`translations/messages.en.xlf`) for the `trans` filter. Defines the `message` translation unit with source and target text 'Hello %name%', suitable for use with the `trans` filter.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#2025-04-22_snippet_40\n\nLANGUAGE: xml\nCODE:\n```\n<!-- translations/messages.en.xlf -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<xliff version=\"1.2\" xmlns=\"urn:oasis:names:tc:xliff:document:1.2\">\n    <file source-language=\"en\" datatype=\"plaintext\" original=\"file.ext\">\n        <body>\n            <trans-unit id=\"message\">\n                <source>message</source>\n                <target>Hello %name%</target>\n            </trans-unit>\n        </body>\n    </file>\n</xliff>\n```\n\n----------------------------------------\n\nTITLE: Installing Cron Expression Dependency via Composer (Terminal)\nDESCRIPTION: Installs the `dragonmantank/cron-expression` package using Composer. This library is required by the Symfony Scheduler component to parse and handle cron expression triggers.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/scheduler.rst#2025-04-22_snippet_5\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require dragonmantank/cron-expression\n```\n\n----------------------------------------\n\nTITLE: Making jQuery Globally Available Outside of Webpack\nDESCRIPTION: Demonstrates how to manually expose jQuery as a global variable for JavaScript code outside of Webpack, such as code in templates.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/legacy-applications.rst#2025-04-22_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n  // app.js\n\n  // require jQuery normally\n  const $ = require('jquery');\n\n+ // create global $ and jQuery variables\n+ global.$ = global.jQuery = $;\n```\n\n----------------------------------------\n\nTITLE: Configuring Composer Scripts for Requirements Checker\nDESCRIPTION: JSON configuration to include the requirements checker in Composer's auto-scripts section.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/deployment.rst#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"...\": \"...\",\n\n    \"scripts\": {\n        \"auto-scripts\": {\n            \"vendor/bin/requirements-checker\": \"php-script\",\n            \"...\": \"...\"\n        },\n\n        \"...\": \"...\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Object Manager in MapEntity\nDESCRIPTION: Shows how to configure a specific object manager to be used for entity resolution instead of the default one using the objectManager option.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine.rst#2025-04-22_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n#[Route('/product/{id}')]\npublic function show(\n    #[MapEntity(objectManager: 'foo')]\n    Product $product\n): Response\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Base Template Structure with Twig Inheritance\nDESCRIPTION: Example of a base template defining common layout elements with blocks that can be overridden by child templates\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/templates.rst#2025-04-22_snippet_44\n\nLANGUAGE: html+twig\nCODE:\n```\n{# templates/base.html.twig #}\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>{% block title %}My Application{% endblock %}</title>\n        {% block stylesheets %}\n            <link rel=\"stylesheet\" type=\"text/css\" href=\"/css/base.css\"/>\n        {% endblock %}\n    </head>\n    <body>\n        {% block body %}\n            <div id=\"sidebar\">\n                {% block sidebar %}\n                    <ul>\n                        <li><a href=\"{{ path('homepage') }}\">Home</a></li>\n                        <li><a href=\"{{ path('blog_index') }}\">Blog</a></li>\n                    </ul>\n                {% endblock %}\n            </div>\n\n            <div id=\"content\">\n                {% block content %}{% endblock %}\n            </div>\n        {% endblock %}\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: XML Output with Custom Root Node and No Declaration\nDESCRIPTION: This XML is the result of encoding the sample data using the context options specified previously. Note the custom root node name 'track' and the absence of the `<?xml version=\"1.0\"?>` declaration, along with the formatted indentation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer/encoders.rst#2025-04-22_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<track>\n  <id>IDHNQIItNyQ</id>\n  <date>2019-10-24</date>\n</track>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Transport in Messenger YAML Configuration\nDESCRIPTION: Adds the custom transport to the Messenger configuration using the custom DSN format. This enables sending messages through the transport and accessing its sender and receiver services.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/messenger/custom-transport.rst#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/messenger.yaml\nframework:\n    messenger:\n        transports:\n            yours: 'my-transport://...'\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Name Converter in Symfony using PHP Config (PHP)\nDESCRIPTION: This PHP snippet configures Symfony's Serializer via a PHP configuration file to use the custom name converter. Dependencies include the converter class and Symfony's FrameworkConfig. The function configures the framework's serializer by calling nameConverter() with the converter class; intended for config/packages/serializer.php.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer/custom_name_converter.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/serializer.php\nuse App\\Serializer\\OrgPrefixNameConverter;\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework) {\n    $framework->serializer()\n        // pass the service ID of your name converter\n        ->nameConverter(OrgPrefixNameConverter::class)\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Using Count Validator with PHP Attributes in Symfony\nDESCRIPTION: Example of implementing the Count validator using PHP attributes to ensure an emails array contains between 1 and 5 elements, with custom validation messages for both minimum and maximum limits.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Count.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Participant.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Participant\n{\n    #[Assert\\Count(\n        min: 1,\n        max: 5,\n        minMessage: 'You must specify at least one email',\n        maxMessage: 'You cannot specify more than {{ limit }} emails',\n    )]\n    protected array $emails = [];\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Subject to GenericEvent in Symfony\nDESCRIPTION: Demonstrates how to create and dispatch a GenericEvent with a subject, and how to handle it in a listener class.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/event_dispatcher/generic_event.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\EventDispatcher\\GenericEvent;\n\n$event = new GenericEvent($subject);\n$dispatcher->dispatch($event, 'foo');\n\nclass FooListener\n{\n    public function handler(GenericEvent $event): void\n    {\n        if ($event->getSubject() instanceof Foo) {\n            // ...\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Inverting Debug Mode Using \"not\" Environment Processor with YAML Configuration in Symfony\nDESCRIPTION: Demonstrates inverting the boolean value of APP_DEBUG environment variable with the 'not' processor in YAML services configuration. No special dependencies. The result is stored in the 'safe_for_production' parameter, useful for toggling configuration based on debug mode.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/env_var_processors.rst#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\\nparameters:\\n    safe_for_production: '%env(not:APP_DEBUG)%'\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Chatter Transport in XML\nDESCRIPTION: XML configuration for setting up Slack chatter transport\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/notifier.rst#2025-04-22_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/notifier.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony\n        https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <framework:config>\n        <framework:notifier>\n            <framework:chatter-transport name=\"slack\">\n                %env(SLACK_DSN)%\n            </framework:chatter-transport>\n        </framework:notifier>\n    </framework:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Basic Process Helper Usage in PHP\nDESCRIPTION: Shows basic setup and execution of a process using Symfony's ProcessHelper to run the 'figlet' command with 'Symfony' as argument.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/helpers/processhelper.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Process\\Process;\n\n$helper = $this->getHelper('process');\n$process = new Process(['figlet', 'Symfony']);\n\n$helper->run($output, $process);\n```\n\n----------------------------------------\n\nTITLE: Configuring Url Validation using YAML in Symfony\nDESCRIPTION: Example of defining URL validation constraints using YAML configuration. This validates the bioUrl property of the Author entity.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Url.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Author:\n    properties:\n        bioUrl:\n            - Url: ~\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Hosts File for Symfony Domain Resolution - Plain Text\nDESCRIPTION: This text code snippet demonstrates how to update either the '/etc/hosts' file on Unix or the 'C:\\\\Windows\\\\System32\\\\drivers\\\\etc\\\\hosts' file on Windows. The added line maps the IP address used by Homestead to the desired local development domain ('symfony-demo.test'). No dependencies are required aside from administrator privileges to modify the hosts file. The main constraint is system-specific file access permissions. Input is the IP-domain mapping line, output is successful local resolution of the domain in a browser.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/homestead.rst#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n# /etc/hosts (unix) or C:\\\\Windows\\\\System32\\\\drivers\\\\etc\\\\hosts (Windows)\\n192.168.10.10 symfony-demo.test\n```\n\n----------------------------------------\n\nTITLE: Applying Image Constraint with YAML Configuration\nDESCRIPTION: Configuring the Image validation constraint using YAML format to validate image dimensions for the Author's headshot property.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Image.rst#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Author:\n    properties:\n        headshot:\n            - Image:\n                minWidth: 200\n                maxWidth: 400\n                minHeight: 200\n                maxHeight: 400\n```\n\n----------------------------------------\n\nTITLE: Registering a Monolog Processor for a Specific Channel in XML\nDESCRIPTION: XML service definition for `Monolog\\Processor\\IntrospectionProcessor`, tagged with `monolog.processor`. The `channel` attribute is set to `security`, restricting the processor's activation exclusively to log records belonging to the 'security' Monolog channel.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/dic_tags.rst#2025-04-22_snippet_25\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"Monolog\\Processor\\IntrospectionProcessor\">\n            <tag name=\"monolog.processor\" channel=\"security\"/>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Registering Class Self-Factory Service (Static Method) - XML Configuration\nDESCRIPTION: Uses XML to register the NewsletterManager service with a static 'create' factory method defined on the class. The 'factory' element omits a class but specifies the method. Arguments can be set elsewhere or injected. Intended for 'config/services.xml', requires the service class's static method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/factories.rst#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"App\\Email\\NewsletterManager\">\n            <factory method=\"create\"/>\n        </service>\n    </services>\n</container>\n\n```\n\n----------------------------------------\n\nTITLE: Disabling XML Container Dump in XML\nDESCRIPTION: Configuration to disable dumping the service container as XML in debug mode using XML format, which can improve performance with large containers.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/performance.rst#2025-04-22_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <parameters>\n        <!-- ... -->\n        <parameter key=\"debug.container.dump\">false</parameter>\n    </parameters>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Defining EqualTo Constraints in XML\nDESCRIPTION: Example of using XML to configure EqualTo constraints for a Person entity. It demonstrates setting constraints for firstName and age properties.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/EqualTo.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\Person\">\n        <property name=\"firstName\">\n            <constraint name=\"EqualTo\">\n                Mary\n            </constraint>\n        </property>\n        <property name=\"age\">\n            <constraint name=\"EqualTo\">\n                <option name=\"value\">20</option>\n            </constraint>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Importing Third-Party CSS in JavaScript\nDESCRIPTION: Example of importing a third-party CSS file from a JavaScript file, which will cause AssetMapper to include it on the page.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/asset_mapper.rst#2025-04-22_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n// assets/app.js\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Updating Issue Status in GitHub Comment\nDESCRIPTION: Example of how to include a status update in a GitHub comment for a reproducible bug report. This triggers the Carson Bot to update the issue's status label.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/contributing/community/reviews.rst#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nThank you @weaverryan for creating this bug report! This indeed looks\nlike a bug. I reproduced the bug in the \"kernel-bug\" branch of\nhttps://github.com/webmozart/some-project.\n\nStatus: Reviewed\n```\n\n----------------------------------------\n\nTITLE: Creating a Service Alias using YAML Shortcut\nDESCRIPTION: Illustrates a shortcut syntax in YAML configuration for defining a service alias. The alias `app.mailer` is created by prefixing the target service ID (`App\\Mail\\PhpMailer`) with `@`.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/alias_private.rst#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nservices:\n    # ...\n    app.mailer: '@App\\Mail\\PhpMailer'\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack Encore for Image and Font Inlining in JavaScript\nDESCRIPTION: This snippet shows how to configure Webpack Encore to consider inlining images and fonts as base64 encoded URLs in CSS. It uses the Asset Modules feature of Webpack, allowing customization of the maximum file size for inlining.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/url-loader.rst#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// webpack.config.js\n// ...\n\nEncore\n    // ...\n    .configureImageRule({\n        // tell Webpack it should consider inlining\n        type: 'asset',\n        //maxSize: 4 * 1024, // 4 kb - the default is 8kb\n    })\n\n    .configureFontRule({\n        type: 'asset',\n        //maxSize: 4 * 1024\n    })\n;\n```\n\n----------------------------------------\n\nTITLE: Configuring Stimulus controllers in assets/controllers.json\nDESCRIPTION: JSON configuration file for Stimulus controllers and entrypoints.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/installation.rst#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"controllers\": [],\n    \"entrypoints\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Sourcing .env Files in Shell Scripts\nDESCRIPTION: Command showing how to source a .env file in a shell script, which loads all the defined environment variables into the current shell session.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration.rst#2025-04-22_snippet_28\n\nLANGUAGE: terminal\nCODE:\n```\n$ source .env\n```\n\n----------------------------------------\n\nTITLE: Configuring Sequentially Validation in XML\nDESCRIPTION: Example of configuring the Sequentially constraint in XML format to validate a Place object's address property with multiple constraints that will be validated in order.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Sequentially.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Localization\\Place\">\n        <property name=\"address\">\n            <constraint name=\"Sequentially\">\n                    <constraint name=\"NotNull\"/>\n                    <constraint name=\"Type\">string</constraint>\n                    <constraint name=\"Length\">\n                        <option name=\"min\">10</option>\n                    </constraint>\n                    <constraint name=\"Regex\">\n                        <option name=\"pattern\">/address-regex/</option>\n                    </constraint>\n                    <constraint name=\"App\\Validator\\Constraints\\Geolocalizable\"/>\n            </constraint>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Running PHPUnit with Deprecation Detection\nDESCRIPTION: Command to run PHPUnit tests that will detect and report usage of deprecated Symfony features. The output shows examples of deprecation notices that need to be fixed.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/bundles.rst#2025-04-22_snippet_3\n\nLANGUAGE: terminal\nCODE:\n```\n$ ./bin/phpunit\n\n# ... PHPUnit output\n\nRemaining deprecation notices (3)\n\nThe \"pattern\" option in file ... is deprecated since version 2.2 and will be\nremoved in 3.0. Use the \"path\" option in the route definition instead ...\n\nTwig Function \"form_enctype\" is deprecated. Use \"form_start\" instead in ...\n\nThe Symfony\\Bundle\\SecurityBundle\\SecurityContext class is deprecated since\nversion 2.6 and will be removed in 3.0. Use ...\n```\n\n----------------------------------------\n\nTITLE: Merging Branches with Deleted File Conflicts\nDESCRIPTION: Example of Git merge commands that result in conflicts due to files being deleted in newer branches while modified in older ones\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/_build/maintainer_guide.rst#2025-04-22_snippet_5\n\nLANGUAGE: terminal\nCODE:\n```\n$ git checkout 5.0\n$ git merge upstream/5.0\n$ git merge --log 4.4\n```\n\n----------------------------------------\n\nTITLE: Configuring Translation Provider Factory\nDESCRIPTION: Configuration examples for registering a custom translation provider factory service using the translation.provider_factory tag.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/dic_tags.rst#2025-04-22_snippet_36\n\nLANGUAGE: yaml\nCODE:\n```\nApp\\Translation\\CustomProviderFactory:\n    tags:\n        - { name: translation.provider_factory }\n```\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"App\\Translation\\CustomProviderFactory\">\n            <tag name=\"translation.provider_factory\"/>\n        </service>\n    </services>\n</container>\n```\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Translation\\CustomProviderFactory;\n\n$container\n    ->register(CustomProviderFactory::class)\n    ->addTag('translation.provider_factory')\n;\n```\n\n----------------------------------------\n\nTITLE: Setting DotEnv Path for Console Script (Symfony, PHP)\nDESCRIPTION: This PHP code (for bin/console) shows how to specify a custom dotenv path for CLI operations by setting $_SERVER['APP_RUNTIME_OPTIONS']['dotenv_path']. It sets the .env file location for console commands before including autoloader runtime. The key dependency is the presence of vendor/autoload_runtime.php.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/override_dir_structure.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// bin/console\\n\\n// ...\\n$_SERVER['APP_RUNTIME_OPTIONS']['dotenv_path'] = 'some/custom/path/to/.env';\\n\\nrequire_once dirname(__DIR__).'/vendor/autoload_runtime.php';\\n// ...\n```\n\n----------------------------------------\n\nTITLE: Handling Cache-Control Headers in Varnish 3 for Symfony\nDESCRIPTION: This Varnish 3 configuration ensures consistent caching behavior by respecting Cache-Control headers that were ignored by default in Varnish 3.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/http_cache/varnish.rst#2025-04-22_snippet_2\n\nLANGUAGE: varnish3\nCODE:\n```\nsub vcl_fetch {\n    // By default, Varnish3 ignores Cache-Control: no-cache and private\n    // https://www.varnish-cache.org/docs/3.0/tutorial/increasing_your_hitrate.html#cache-control\n    if (beresp.http.Cache-Control ~ \"private\" ||\n        beresp.http.Cache-Control ~ \"no-cache\" ||\n        beresp.http.Cache-Control ~ \"no-store\"\n    ) {\n        return (hit_for_pass);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing AssetMapper Component with Composer\nDESCRIPTION: Terminal command to install the AssetMapper component along with the Asset Component and Twig pack using Composer.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/asset_mapper.rst#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require symfony/asset-mapper symfony/asset symfony/twig-pack\n```\n\n----------------------------------------\n\nTITLE: Configuring Services with an Invokable Configurator in PHP\nDESCRIPTION: This PHP snippet shows the configuration for an invokable configurator in `config/services.php`. When calling the `configurator()` method on the service definitions for `NewsletterManager` and `GreetingCardManager`, only the service reference to the invokable `EmailConfigurator` (obtained via `service(EmailConfigurator::class)`) is passed. Symfony infers that the `__invoke` method should be called.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/configurators.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nuse App\\Mail\\GreetingCardManager;\nuse App\\Mail\\NewsletterManager;\n\nreturn function(ContainerConfigurator $container): void {\n    $services = $container->services();\n\n    // Registers all 4 classes as services, including App\\Mail\\EmailConfigurator\n    $services->load('App\\\\', '../src/*');\n\n    // override the services to set the configurator\n    $services->set(NewsletterManager::class)\n        ->configurator(service(EmailConfigurator::class));\n\n    $services->set(GreetingCardManager::class)\n        ->configurator(service(EmailConfigurator::class));\n};\n```\n\n----------------------------------------\n\nTITLE: Generating Absolute URLs for Routes in Twig\nDESCRIPTION: The `url` function generates a full absolute URL (including scheme and host) for a given Symfony route `name`. It accepts route `parameters` and an optional boolean `schemeRelative` flag. If `schemeRelative` is true, it generates a scheme-relative URL (e.g., '//example.org/blog/3').\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#2025-04-22_snippet_21\n\nLANGUAGE: twig\nCODE:\n```\n{{ url(route_name, route_parameters = [], schemeRelative = false) }}\n```\n\n----------------------------------------\n\nTITLE: Example DSN Configurations\nDESCRIPTION: Shows various examples of valid Memcached DSN configurations including hostname, port, SASL authentication, and socket connections.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/cache/adapters/memcached_adapter.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Cache\\Adapter\\MemcachedAdapter;\n\n$client = MemcachedAdapter::createConnection([\n    // hostname + port\n    'memcached://my.server.com:11211'\n\n    // hostname without port + SASL username and password\n    'memcached://rmf:abcdef@localhost'\n\n    // IP address instead of hostname + weight\n    'memcached://127.0.0.1?weight=50'\n\n    // socket instead of hostname/IP + SASL username and password\n    'memcached://janesmith:mypassword@/var/run/memcached.sock'\n\n    // socket instead of hostname/IP + weight\n    'memcached:///var/run/memcached.sock?weight=20'\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating Translation Resource in PHP\nDESCRIPTION: Example of a PHP translation resource file for French translations.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/translation.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// translations/messages.fr.php\nreturn [\n    'Symfony is great' => 'Symfony est génial',\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring GreaterThanOrEqual Constraint with PHP Code\nDESCRIPTION: Example showing how to configure the GreaterThanOrEqual constraint using PHP code and the loadValidatorMetadata method. Validates a Person's siblings and age properties.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/GreaterThanOrEqual.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Person.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Person\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('siblings', new Assert\\GreaterThanOrEqual(5));\n\n        $metadata->addPropertyConstraint('age', new Assert\\GreaterThanOrEqual(\n            value: 18,\n        ));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Form Updating with JavaScript and AJAX\nDESCRIPTION: This JavaScript code handles the dynamic updating of the 'position' field based on changes to the 'sport' field. It uses fetch for AJAX requests and updates the DOM with the server response.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/dynamic_form_modification.rst#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = document.getElementById('sport_meetup_form');\nconst form_select_sport = document.getElementById('meetup_sport');\nconst form_select_position = document.getElementById('meetup_position');\n\nconst updateForm = async (data, url, method) => {\n  const req = await fetch(url, {\n    method: method,\n    body: data,\n    headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'charset': 'utf-8'\n    }\n  });\n\n  const text = await req.text();\n\n  return text;\n};\n\nconst parseTextToHtml = (text) => {\n  const parser = new DOMParser();\n  const html = parser.parseFromString(text, 'text/html');\n\n  return html;\n};\n\nconst changeOptions = async (e) => {\n  const requestBody = e.target.getAttribute('name') + '=' + e.target.value;\n  const updateFormResponse = await updateForm(requestBody, form.getAttribute('action'), form.getAttribute('method'));\n  const html = parseTextToHtml(updateFormResponse);\n\n  const new_form_select_position = html.getElementById('meetup_position');\n  form_select_position.innerHTML = new_form_select_position.innerHTML;\n};\n\nform_select_sport.addEventListener('change', (e) => changeOptions(e));\n```\n\n----------------------------------------\n\nTITLE: Customizing AsCronTask Attribute with Additional Parameters in PHP\nDESCRIPTION: Shows examples of using AsCronTask attribute with additional parameters like jitter, method, arguments, and timezone.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/scheduler.rst#2025-04-22_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n// adds randomly up to 6 seconds to the trigger time to avoid load spikes\n#[AsCronTask('0 0 * * *', jitter: 6)]\n\n// defines the method name to call instead as well as the arguments to pass to it\n#[AsCronTask('0 0 * * *', method: 'sendEmail', arguments: ['email' => 'admin@example.com'])]\n\n// defines the timezone to use\n#[AsCronTask('0 0 * * *', timezone: 'Africa/Malabo')]\n\n// when applying this attribute to a Symfony console command, you can pass\n// arguments and options to the command using the 'arguments' option:\n#[AsCronTask('0 0 * * *', arguments: 'some_argument --some-option --another-option=some_value')]\nclass MyCommand extends Command\n```\n\n----------------------------------------\n\nTITLE: Installing Autoprefixer with npm\nDESCRIPTION: This command installs the autoprefixer package as a development dependency using npm.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/postcss.rst#2025-04-22_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\n$ npm install autoprefixer --save-dev\n```\n\n----------------------------------------\n\nTITLE: Casting HTTP Method Override Environment Variable to Boolean in Symfony with YAML Configuration\nDESCRIPTION: Casts the HTTP_METHOD_OVERRIDE environment variable to a boolean in YAML configuration for Symfony. Demonstrates setting an environment variable parameter and using the bool processor. Input is env(HTTP_METHOD_OVERRIDE), which controls HTTP method override functionality.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/env_var_processors.rst#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/framework.yaml\\nparameters:\\n    env(HTTP_METHOD_OVERRIDE): 'true'\\nframework:\\n    http_method_override: '%env(bool:HTTP_METHOD_OVERRIDE)%'\\n\n```\n\n----------------------------------------\n\nTITLE: Setting Logger Method for Optional Dependencies\nDESCRIPTION: PHP method implementation required for the NewsletterManager class to support optional logger dependency injection via setter method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/optional_dependencies.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function setLogger(LoggerInterface $logger): void\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Module Export Example\nDESCRIPTION: Demonstrates how to create and export a JavaScript module function.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/simple-example.rst#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// assets/greet.js\nexport default function(name) {\n    return `Yo yo ${name} - welcome to Encore!`;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Symfony Router for Production Environment (XML)\nDESCRIPTION: Shows how to configure the Symfony router for the production environment using XML. This is an alternative to the YAML configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/quick_tour/the_architecture.rst#2025-04-22_snippet_8\n\nLANGUAGE: XML\nCODE:\n```\n<!-- config/packages/framework.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony\n        https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <framework:config>\n        <framework:router utf8=\"true\"/>\n    </framework:config>\n\n    <when env=\"prod\">\n        <framework:config>\n            <framework:router strict-requirements=\"null\"/>\n        </framework:config>\n    </when>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Customizing Error Path with UniqueEntity Constraint using XML in Symfony\nDESCRIPTION: Example of setting the errorPath option with the UniqueEntity constraint using XML configuration to control where validation error messages appear when validating uniqueness across multiple fields.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/UniqueEntity.rst#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\Service\">\n        <constraint name=\"Symfony\\Bridge\\Doctrine\\Validator\\Constraints\\UniqueEntity\">\n            <option name=\"fields\">\n                <value>host</value>\n                <value>port</value>\n            </option>\n            <option name=\"message\">This port is already in use on that host.</option>\n            <option name=\"errorPath\">port</option>\n        </constraint>\n    </class>\n\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Excluding Default Normalizers in XML Configuration\nDESCRIPTION: Demonstrates how to exclude default normalizers and encoders from a named serializer in XML configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer.rst#2025-04-22_snippet_51\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/serializer.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <framework:config>\n        <framework:serializer>\n\n            <framework:named-serializer\n                name=\"api_client1\"\n                include-built-in-normalizers=\"false\"\n                include-built-in-encoders=\"true\"\n            />\n\n        </framework:serializer>\n    </framework:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Setting Optional Service Dependencies to null in XML\nDESCRIPTION: XML configuration example showing how to set a service argument to null if the service doesn't exist using the 'on-invalid=\"null\"' attribute.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/optional_dependencies.rst#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <!-- ... -->\n\n        <service id=\"App\\Newsletter\\NewsletterManager\">\n            <argument type=\"service\" id=\"logger\" on-invalid=\"null\"/>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Workflow Context via Marking\nDESCRIPTION: Shows how to retrieve updated context from a workflow after applying a transition.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/workflow.rst#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$marking = $workflow->apply($post, 'to_review');\n\n// contains the new value\n$marking->getContext();\n```\n\n----------------------------------------\n\nTITLE: Defining Slug Validation in XML\nDESCRIPTION: Example showing how to configure the Slug constraint using XML configuration in Symfony.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Slug.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\Author\">\n        <property name=\"slug\">\n            <constraint name=\"Slug\"/>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: CommandBus Implementation with Advanced Service Configuration\nDESCRIPTION: Extended CommandBus example showing usage of SubscribedService with optional services and parameter injection.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/service_subscribers_locators.rst#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nnamespace App;\n\nuse App\\CommandHandler\\BarHandler;\nuse App\\CommandHandler\\BazHandler;\nuse App\\CommandHandler\\FooHandler;\nuse Psr\\Container\\ContainerInterface;\nuse Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;\nuse Symfony\\Component\\DependencyInjection\\Attribute\\AutowireLocator;\nuse Symfony\\Contracts\\Service\\Attribute\\SubscribedService;\n\nclass CommandBus\n{\n    public function __construct(\n        #[AutowireLocator([\n            'foo' => FooHandler::class,\n            'bar' => new SubscribedService(type: 'string', attributes: new Autowire('%some.parameter%')),\n            'optionalBaz' => '?'.BazHandler::class,\n        ])]\n        private ContainerInterface $handlers,\n    ) {\n    }\n\n    public function handle(Command $command): mixed\n    {\n        $fooHandler = $this->handlers->get('foo');\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Casting Secret Environment Variable to String in Symfony with YAML Configuration\nDESCRIPTION: Demonstrates casting an environment variable to string within a Symfony YAML configuration file using the 'string' env var processor. The parameter env(SECRET) is set and then used in the framework's secret configuration. Input is an env var; output is a string used as the application's secret.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/env_var_processors.rst#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/framework.yaml\\nparameters:\\n    env(SECRET): 'some_secret'\\nframework:\\n    secret: '%env(string:SECRET)%'\\n\n```\n\n----------------------------------------\n\nTITLE: Changing File/Directory Group (PHP)\nDESCRIPTION: Uses the `Filesystem::chgrp` method to change the group ownership of a file or directory. The second argument specifies the new group. Setting the third argument to `true` applies the change recursively to directory contents.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/filesystem.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// sets the group of the lolcat video to nginx\n$filesystem->chgrp('lolcat.mp4', 'nginx');\n// changes the group of the video directory recursively\n$filesystem->chgrp('/video', 'nginx', true);\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Access Decision Strategy in PHP\nDESCRIPTION: Configuration for using a custom access decision strategy service in PHP format. The custom service must implement AccessDecisionStrategyInterface.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/voters.rst#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/security.php\nuse App\\Security\\MyCustomAccessDecisionStrategy;\nuse Symfony\\Config\\SecurityConfig;\n\nreturn static function (SecurityConfig $security): void {\n    $security->accessDecisionManager()\n        ->strategyService(MyCustomAccessDecisionStrategy::class)\n        // ...\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Mailer Envelope Recipients in Symfony (YAML)\nDESCRIPTION: Sets up envelope recipients for the Symfony mailer, overriding any other recipients set in the code.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_57\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/mailer.yaml\nframework:\n    mailer:\n        dsn: 'smtp://localhost:25'\n        envelope:\n            recipients: ['admin@symfony.com', 'lead@symfony.com']\n```\n\n----------------------------------------\n\nTITLE: Setting Clear-Site-Data Header in Symfony Logout Configuration\nDESCRIPTION: This snippet shows how to configure the Clear-Site-Data HTTP header in Symfony's security logout settings. It allows specifying which types of site data should be cleared upon logout, such as cookies and storage.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/security.rst#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\nsecurity:\n    # ...\n\n    firewalls:\n        main:\n            # ...\n            logout:\n                clear_site_data:\n                    - cookies\n                    - storage\n```\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/security.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<srv:container xmlns=\"http://symfony.com/schema/dic/security\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:srv=\"http://symfony.com/schema/dic/services\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <config>\n        <!-- ... -->\n\n        <firewall name=\"main\">\n            <!-- ... -->\n            <logout>\n                <clear-site-data>cookies</clear-site-data>\n                <clear-site-data>storage</clear-site-data>\n            </logout>\n        </firewall>\n    </config>\n</srv:container>\n```\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/security.php\n\n// ...\n\nreturn static function (SecurityConfig $securityConfig): void {\n    // ...\n\n    $securityConfig->firewall('main')\n        ->logout()\n            ->clearSiteData(['cookies', 'storage']);\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom DotEnv File Path in Composer (Symfony, JSON)\nDESCRIPTION: This JSON snippet demonstrates how to override the default location of the .env environment file by setting the \"runtime.dotenv_path\" option in composer.json. Requires editing composer.json and regenerating Composer's autoload files. The \"dotenv_path\" should point to the new .env location; Composer must be reloaded for changes to apply.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/override_dir_structure.rst#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \"...\": \"...\",\\n    \"extra\": {\\n        \"...\": \"...\",\\n        \"runtime\": {\\n            \"dotenv_path\": \"my/custom/path/to/.env\"\\n        }\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Block Prefix for Form Fields in PHP\nDESCRIPTION: Example of using the block_prefix option to define custom fragment names for form fields without creating a custom form type. This allows for targeted customization of specific field instances.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/form_themes.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\TextType;\nuse Symfony\\Component\\Form\\FormBuilderInterface;\n\npublic function buildForm(FormBuilderInterface $builder, array $options): void\n{\n    $builder->add('name', TextType::class, [\n        'block_prefix' => 'wrapped_text',\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Test Locale in PHPUnit XML Configuration - XML - xml\nDESCRIPTION: This snippet demonstrates configuring the test locale for PHPUnit by specifying the SYMFONY_PHPUNIT_LOCALE environment variable in the php section of a phpunit.xml configuration file. Setting this variable ensures that PHP runs with the expected locale during test execution. The value is a string such as 'fr_FR'.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/phpunit_bridge.rst#2025-04-22_snippet_18\n\nLANGUAGE: xml\nCODE:\n```\n<phpunit xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n    xsi:noNamespaceSchemaLocation=\\\"https://schema.phpunit.de/6.0/phpunit.xsd\\\"\\n>\\n\\n    <!-- ... -->\\n\\n    <php>\\n        <!-- ... -->\\n        <env name=\\\"SYMFONY_PHPUNIT_LOCALE\\\" value=\\\"fr_FR\\\"/>\\n    </php>\\n</phpunit>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Token Provider in YAML\nDESCRIPTION: Sets up a custom remember me token provider using YAML configuration. This example configures a service ID for a custom token provider implementation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/remember_me.rst#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\nsecurity:\n    # ...\n\n    firewalls:\n        main:\n            # ...\n            remember_me:\n                # ...\n                token_provider:\n                    service: App\\Security\\RememberMe\\CustomTokenProvider\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Entity Classes in PHP\nDESCRIPTION: Basic structure of Address and Author entity classes without validation constraints.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Valid.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Address.php\nnamespace App\\Entity;\n\nclass Address\n{\n    protected string $street;\n\n    protected string $zipCode;\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Author.php\nnamespace App\\Entity;\n\nclass Author\n{\n    protected string $firstName;\n\n    protected string $lastName;\n\n    protected Address $address;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Asciinema Recording to GIF\nDESCRIPTION: Command using agg utility with ascii-render.sh script to convert Asciinema recording to GIF format with specified dimensions.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/_images/sources/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nAGG_PATH=/path/to/agg ./_images/sources/ascii-render.sh recording.cast --cols 45 --rows 20\n```\n\n----------------------------------------\n\nTITLE: Sample PHPUnit Test Run Output with Deprecation Notices in Terminal\nDESCRIPTION: This terminal output illustrates a typical result from executing tests using the simple-phpunit script. The output provides test summaries, the number of tests and assertions, and a detailed report on remaining deprecation notices, including where they were triggered. This helps developers identify and address deprecated code usages during testing. No dependencies are required for this output; it is generated during test execution.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/phpunit_bridge.rst#2025-04-22_snippet_3\n\nLANGUAGE: terminal\nCODE:\n```\n$ ./vendor/bin/simple-phpunit\n  PHPUnit by Sebastian Bergmann.\n\n  Configuration read from <your-project>/phpunit.xml.dist\n  ..................\n\n  Time: 1.77 seconds, Memory: 5.75Mb\n\n  OK (17 tests, 21 assertions)\n\n  Remaining deprecation notices (2)\n\n  getEntityManager is deprecated since Symfony 2.1. Use getManager instead: 2x\n    1x in DefaultControllerTest::testPublicUrls from App\\Tests\\Controller\n    1x in BlogControllerTest::testIndex from App\\Tests\\Controller\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote User Authentication in Symfony\nDESCRIPTION: Configuration examples for setting up remote user authentication in Symfony security system, showing how to use the REMOTE_USER server variable for authentication.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/security.rst#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\nsecurity:\n    firewalls:\n        main:\n            # ...\n            remote_user:\n                provider: your_user_provider\n                user:     REMOTE_USER\n```\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/security.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<srv:container xmlns=\"http://symfony.com/schema/dic/security\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:srv=\"http://symfony.com/schema/dic/services\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/security\n        https://symfony.com/schema/dic/security/security-1.0.xsd\">\n\n    <config>\n        <firewall name=\"main\">\n            <remote-user provider=\"your_user_provider\"\n                user=\"REMOTE_USER\"/>\n        </firewall>\n    </config>\n</srv:container>\n```\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/security.php\nuse Symfony\\Config\\SecurityConfig;\n\nreturn static function (SecurityConfig $security): void {\n    $mainFirewall = $security->firewall('main');\n    $mainFirewall->remoteUser()\n        ->provider('your_user_provider')\n        ->user('REMOTE_USER')\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: HTTP DELETE Request Format in Plain Text\nDESCRIPTION: Demonstrates the format of an HTTP DELETE request targeting a specific blog post resource.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/introduction/http_fundamentals.rst#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nDELETE /blog/15 HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Configuring Regex Constraint in XML\nDESCRIPTION: Example of using the Regex constraint in XML configuration to validate a description field starts with a word character.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Regex.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\Author\">\n        <property name=\"description\">\n            <constraint name=\"Regex\">\n                <option name=\"pattern\">/^\\w+/</option>\n            </constraint>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Decorators in YAML\nDESCRIPTION: This YAML configuration shows how to set up service decorators with priorities in Symfony's services.yaml file.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/service_decoration.rst#2025-04-22_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nservices:\n    Foo: ~\n\n    Bar:\n        decorates: Foo\n        decoration_priority: 5\n        arguments: ['@.inner']\n\n    Baz:\n        decorates: Foo\n        decoration_priority: 1\n        arguments: ['@.inner']\n```\n\n----------------------------------------\n\nTITLE: Time Function Mocking Example\nDESCRIPTION: Example showing how to mock time functions in a specific class using ClockMock registration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/phpunit_bridge.rst#2025-04-22_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nnamespace App;\n\nclass MyClass\n{\n    public function getTimeInHours(): void\n    {\n        return time() / 3600;\n    }\n}\n\nnamespace App\\Tests;\n\nuse App\\MyClass;\nuse PHPUnit\\Framework\\TestCase;\nuse Symfony\\Bridge\\PhpUnit\\ClockMock;\n\n/**\n * @group time-sensitive\n */\nclass MyTest extends TestCase\n{\n    public function testGetTimeInHours(): void\n    {\n        ClockMock::register(MyClass::class);\n\n        $my = new MyClass();\n        $result = $my->getTimeInHours();\n\n        $this->assertEquals(time() / 3600, $result);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring File-based Authentication in Symfony\nDESCRIPTION: Shows how to configure authentication file paths and parameters in different configuration formats.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/env_var_processors.rst#2025-04-22_snippet_33\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony\n        https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <parameters>\n        <parameter key=\"env(AUTH_FILE)\">../config/auth.json</parameter>\n    </parameters>\n\n    <google auth=\"%env(trim:file:AUTH_FILE)%\"/>\n</container>\n```\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/framework.php\n$container->setParameter('env(AUTH_FILE)', '../config/auth.json');\n$container->loadFromExtension('google', [\n    'auth' => '%env(trim:file:AUTH_FILE)%',\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Chatter Transport in PHP\nDESCRIPTION: PHP configuration for setting up Slack chatter transport using environment variable\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/notifier.rst#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/notifier.php\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework): void {\n    $framework->notifier()\n        ->chatterTransport('slack', env('SLACK_DSN'))\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Fetching Localized Script Names using Symfony Intl in PHP\nDESCRIPTION: Shows how to retrieve script names translated into a specific locale (German, 'de') by passing the locale code as the last argument to the methods of the `Symfony\\Component\\Intl\\Scripts` class. This overrides the default locale for the call.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/intl.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$scripts = Scripts::getNames('de');\n// => ['Adlm' => 'Adlam', 'Afak' => 'Afaka', ...]\n\n$script = Scripts::getName('Hans', 'de');\n// => 'Vereinfacht'\n```\n\n----------------------------------------\n\nTITLE: Configuring Regex Constraint in YAML\nDESCRIPTION: Example of using the Regex constraint in YAML configuration to validate a description field starts with a word character.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Regex.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Author:\n    properties:\n        description:\n            - Regex: '/^\\w+/'\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Subscriber Aliases in YAML\nDESCRIPTION: YAML configuration for aliasing services in a Service Subscriber using container.service_subscriber tag.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/service_subscribers_locators.rst#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nservices:\n    App\\CommandBus:\n        tags:\n            - { name: 'container.service_subscriber', key: 'logger', id: 'monolog.logger.event' }\n```\n\n----------------------------------------\n\nTITLE: Debugging Fallback Translations in Symfony\nDESCRIPTION: Shows the debug:translation command output when a translation is identical to the fallback locale. The 'fallback' state indicates the message may need proper translation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/translation.rst#2025-04-22_snippet_47\n\nLANGUAGE: terminal\nCODE:\n```\n$ php bin/console debug:translation fr\n\n----------  ------------------  ----------------------  -------------------------------\n State       Id                  Message Preview (fr)    Fallback Message Preview (en)\n----------  ------------------  ----------------------  -------------------------------\n fallback    Symfony is great    Symfony is great        Symfony is great\n----------  ------------------  ----------------------  -------------------------------\n```\n\n----------------------------------------\n\nTITLE: Customizing Form Label with form_label() Function\nDESCRIPTION: This snippet shows how to use the form_label() function to override the default label of a form field.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/form_customization.rst#2025-04-22_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{{ form_label(form.task, 'My Custom Task Label') }}\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple PHP Model for Serialization (PHP)\nDESCRIPTION: This snippet defines a basic PHP class representing a Company model with two public string properties, 'name' and 'address'. It is intended to be serialized/deserialized using Symfony's Serializer and forms the basis for demonstrating custom name conversion. No external dependencies are required beyond standard PHP; the properties should match the expected structure in the serialization process.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer/custom_name_converter.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model;\n\nclass Company\n{\n    public string $name;\n    public string $address;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Routes with PHP in Symfony\nDESCRIPTION: Example of defining routes using PHP configuration in Symfony.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/templates.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// config/routes.php\nuse App\\Controller\\BlogController;\nuse Symfony\\Component\\Routing\\Loader\\Configurator\\RoutingConfigurator;\n\nreturn function (RoutingConfigurator $routes): void {\n    $routes->add('blog_index', '/')\n        ->controller([BlogController::class, 'index'])\n    ;\n\n    $routes->add('blog_post', '/articles/{slug}')\n        ->controller([BlogController::class, 'show'])\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Service Alias via Configuration Files\nDESCRIPTION: Demonstrates how to define a service alias (`app.mailer`) that points to another service definition (`App\\Mail\\PhpMailer`) using YAML, XML, or PHP configuration. This allows accessing the original service (which is marked private in this example) using the alias. The alias itself can be marked public.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/alias_private.rst#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nservices:\n    # ...\n    App\\Mail\\PhpMailer:\n        public: false\n\n    app.mailer:\n        alias: App\\Mail\\PhpMailer\n        public: true\n```\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"App\\Mail\\PhpMailer\" public=\"false\"/>\n\n        <service id=\"app.mailer\" alias=\"App\\Mail\\PhpMailer\"/>\n    </services>\n</container>\n```\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nuse App\\Mail\\PhpMailer;\n\nreturn function(ContainerConfigurator $container): void {\n    $services = $container->services();\n\n    $services->set(PhpMailer::class)\n        ->private();\n\n    $services->alias('app.mailer', PhpMailer::class);\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Downloadable Draft Emails in Symfony\nDESCRIPTION: Controller implementation for creating downloadable draft emails in .eml format with proper headers\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_67\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Controller;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpFoundation\\ResponseHeaderBag;\nuse Symfony\\Component\\Mime\\DraftEmail;\nuse Symfony\\Component\\Routing\\Attribute\\Route;\n\nclass DownloadEmailController extends AbstractController\n{\n    #[Route('/download-email')]\n    public function __invoke(): Response\n    {\n        $message = (new DraftEmail())\n            ->html($this->renderView(/* ... */))\n            ->addPart(/* ... */)\n        ;\n\n        $response = new Response($message->toString());\n        $contentDisposition = $response->headers->makeDisposition(\n            ResponseHeaderBag::DISPOSITION_ATTACHMENT,\n            'download.eml'\n        );\n        $response->headers->set('Content-Type', 'message/rfc822');\n        $response->headers->set('Content-Disposition', $contentDisposition);\n\n        return $response;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Country Code from Timezone with Symfony Intl\nDESCRIPTION: Example showing how to get the country code for a given timezone using the getCountryCode method. This performs a reverse lookup from timezone to country.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/intl.rst#2025-04-22_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n$countryCode = Timezones::getCountryCode('America/Vancouver');\n// => $countryCode = 'CA' (CA = Canada)\n```\n\n----------------------------------------\n\nTITLE: Configuring Twig Template Paths in PHP\nDESCRIPTION: PHP configuration for defining additional template directories in Twig using the TwigConfig class. Shows how to set template paths with and without namespaces.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/twig.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/twig.php\nuse Symfony\\Config\\TwigConfig;\n\nreturn static function (TwigConfig $twig): void {\n    // ...\n\n    $twig->path('email/default/templates', null);\n    $twig->path('backend/templates', 'admin');\n};\n```\n\n----------------------------------------\n\nTITLE: Registering a Symfony Normalizer Service with Priority - XML\nDESCRIPTION: This XML snippet shows how to register the custom TopicNormalizer normalizer as a tagged Symfony service using an XML configuration file. It demonstrates the addition of the serializer.normalizer tag with a specified priority to guarantee the normalizer is called early. Designed for inclusion in config/services.xml, this snippet requires knowledge of Symfony's XML service declaration syntax and does not rely on autoconfigure.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer/custom_normalizer.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\n<container xmlns=\\\"http://symfony.com/schema/dic/services\\\"\n    xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\n    xsi:schemaLocation=\\\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\\\">\n\n    <services>\n        <!-- ... -->\n\n        <service id=\\\"App\\\\Serializer\\\\TopicNormalizer\\\">\n            <!-- register the normalizer with a high priority (called earlier) -->\n            <tag name=\\\"serializer.normalizer\\\"\n                priority=\\\"500\\\"\n            />\n        </service>\n    </services>\n</container>\n\n```\n\n----------------------------------------\n\nTITLE: Conditionally Enabling Profiler in YAML Configuration\nDESCRIPTION: YAML configuration to conditionally enable the profiler based on a query parameter, improving application performance by default.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/profiler.rst#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/dev/web_profiler.yaml\n    framework:\n        profiler:\n            collect: false\n            collect_parameter: 'profile'\n```\n\n----------------------------------------\n\nTITLE: Deploying Decryption Key as an Environment Variable (terminal)\nDESCRIPTION: Outlines the command to base64-encode the production decryption key for assignment as the SYMFONY_DECRYPTION_SECRET environment variable. This technique enables secure deployment without storing private keys on disk.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/secrets.rst#2025-04-22_snippet_13\n\nLANGUAGE: terminal\nCODE:\n```\n$ php -r 'echo base64_encode(require \"config/secrets/prod/prod.decrypt.private.php\");'\n```\n\n----------------------------------------\n\nTITLE: Bundle Composer Autoload Configuration\nDESCRIPTION: Example of configuring PSR-4 autoloading in composer.json for a Symfony bundle.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/bundles/best_practices.rst#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"autoload\": {\n        \"psr-4\": {\n            \"Acme\\\\BlogBundle\\\\\": \"src/\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Acme\\\\BlogBundle\\\\Tests\\\\\": \"tests/\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Image Constraint with XML Configuration\nDESCRIPTION: XML configuration for applying the Image validation constraint to the headshot property with specific dimension requirements.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Image.rst#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\Author\">\n        <property name=\"headshot\">\n            <constraint name=\"Image\">\n                <option name=\"minWidth\">200</option>\n                <option name=\"maxWidth\">400</option>\n                <option name=\"minHeight\">200</option>\n                <option name=\"maxHeight\">400</option>\n            </constraint>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Accepting Multiline Answers in Symfony Console - PHP\nDESCRIPTION: This snippet shows how to allow multiline answers in a Symfony Console question by enabling the setMultiline(true) option on the Question object. It depends on symfony/console and typical Symfony command execution context. The answer variable will contain the full multiline input, ending on Ctrl-D (Unix) or Ctrl-Z (Windows); input stops only when end-of-transmission is received.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/helpers/questionhelper.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Console\\Question\\Question;\n\n// ...\npublic function execute(InputInterface $input, OutputInterface $output): int\n{\n    // ...\n    $helper = $this->getHelper('question');\n\n    $question = new Question('How do you solve world peace?');\n    $question->setMultiline(true);\n\n    $answer = $helper->ask($input, $output, $question);\n\n    // ... do something with the answer\n\n    return Command::SUCCESS;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring an Extension via YAML\nDESCRIPTION: Demonstrates how to provide configuration values (`foo`, `bar`) to the `AcmeDemoExtension` using its alias (`acme_demo`) as a top-level key in a YAML configuration file. These values are passed to the extension's `load()` method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/dependency_injection/compilation.rst#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# ...\nacme_demo:\n    foo: fooValue\n    bar: barValue\n```\n\n----------------------------------------\n\nTITLE: Using dotenv:dump Command Without Composer\nDESCRIPTION: Terminal command to parse and dump environment variables when Composer is not available, typically used in production deployment scenarios.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration.rst#2025-04-22_snippet_33\n\nLANGUAGE: terminal\nCODE:\n```\n# parses ALL .env files and dumps their final values to .env.local.php\n$ APP_ENV=prod APP_DEBUG=0 php bin/console dotenv:dump\n```\n\n----------------------------------------\n\nTITLE: Applying Time Constraint Using PHP Attributes in Symfony\nDESCRIPTION: An example of using the Time constraint with PHP attributes in a Symfony Entity class. The constraint validates that the startsAt property follows a valid H:i:s time format.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Time.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Event.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Event\n{\n    /**\n     * @var string A \"H:i:s\" formatted value\n     */\n    #[Assert\\Time]\n    protected string $startsAt;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Importmap with CSP Nonce in Twig\nDESCRIPTION: Demonstrates how to use the importmap() Twig function with a Content Security Policy nonce. This allows inline scripts to run without violating CSP rules.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/asset_mapper.rst#2025-04-22_snippet_48\n\nLANGUAGE: twig\nCODE:\n```\n{# the csp_nonce() function is defined by the NelmioSecurityBundle #}\n{{ importmap('app', {'nonce': csp_nonce('script')}) }}\n```\n\n----------------------------------------\n\nTITLE: Configuring SMIME Encryption in XML\nDESCRIPTION: XML configuration for setting up SMIME encryption certificate path in Symfony Mailer config.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_61\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n    <!-- ... -->\n    <framework:config>\n        <framework:mailer>\n            <framework:smime-encrypter>\n                <framework:certificate>%kernel.project_dir%/var/certificates/smime.crt</framework:certificate>\n            </framework:smime-encrypter>\n        </framework:mailer>\n    </framework:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Storing complex data in Twig data-* attributes with proper escaping\nDESCRIPTION: This example shows how to store more complex data (like an array) in a data-* attribute using Twig. It demonstrates the use of json_encode and the html_attr escaping strategy to safely embed the data in an HTML attribute.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/server-data.rst#2025-04-22_snippet_3\n\nLANGUAGE: html+twig\nCODE:\n```\n<div data-user-profile=\"{{ app.user ? app.user.profileData|json_encode|e('html_attr') }}\">\n    <!-- ... -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Basic SSI Implementation in HTML\nDESCRIPTION: Demonstrates how to use SSI directives within HTML comments to include content from other pages. The virtual directive is used to specify the path to the content that should be included.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/http_cache/ssi.rst#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n    <body>\n        <!-- ... some content -->\n\n        <!-- Embed the content of another page here -->\n        <!--#include virtual=\"/...\" -->\n\n        <!-- ... more content -->\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Entity Mappings in XML\nDESCRIPTION: XML configuration for customizing Doctrine entity mappings in a Symfony bundle, changing the directory for XML configurations.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/doctrine.rst#2025-04-22_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:doctrine=\"http://symfony.com/schema/dic/doctrine\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <doctrine:config>\n        <doctrine:orm auto-mapping=\"true\">\n            <mapping name=\"AppBundle\" dir=\"SomeResources/config/doctrine\" type=\"xml\"/>\n        </doctrine:orm>\n    </doctrine:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Environment Variable Processors in YAML\nDESCRIPTION: Demonstrates how to combine multiple environment variable processors in a YAML configuration file to process a complex value.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/env_var_processors.rst#2025-04-22_snippet_44\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/framework.yaml\nparameters:\n    env(AUTH_FILE): \"%kernel.project_dir%/config/auth.json\"\ngoogle:\n    auth: '%env(json:file:resolve:AUTH_FILE)%'\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Packages in YAML\nDESCRIPTION: Configures asset packages with custom base URLs in Symfony using YAML configuration. This allows grouping assets and specifying different CDN or static resource locations.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/framework.yaml\nframework:\n    # ...\n    assets:\n        packages:\n            avatars:\n                base_urls: 'http://static_cdn.example.com/avatars'\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Author Entity\nDESCRIPTION: Basic PHP class definition for an Author entity with a name property.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/validation/translations.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Author.php\nnamespace App\\Entity;\n\nclass Author\n{\n    public string $name;\n}\n```\n\n----------------------------------------\n\nTITLE: Extending GenericRuntime for ReactPHP Integration in Symfony Runtime with PHP\nDESCRIPTION: This PHP class ReactPHPRuntime extends Symfony's GenericRuntime to conditionally return a custom ReactPHPRunner if the application satisfies PSR-15's RequestHandlerInterface; otherwise, it falls back to default runtime behavior. It accepts configuration options (notably a 'port' parameter), stores the port, and ensures custom runner logic is applied to appropriate application types. Inputs are an options array and an application object; output is a RunnerInterface instance. Requires Symfony\\Component\\Runtime, a compatible PSR-15 app, and optional port setting.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/runtime.rst#2025-04-22_snippet_17\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Runtime\\GenericRuntime;\nuse Symfony\\Component\\Runtime\\RunnerInterface;\n\nclass ReactPHPRuntime extends GenericRuntime\n{\n    private int $port;\n\n    public function __construct(array $options)\n    {\n        $this->port = $options['port'] ?? 8080;\n        parent::__construct($options);\n    }\n\n    public function getRunner(?object $application): RunnerInterface\n    {\n        if ($application instanceof RequestHandlerInterface) {\n            return new ReactPHPRunner($application, $this->port);\n        }\n\n        // if it's not a PSR-15 application, use the GenericRuntime to\n        // run the application (see \"Resolvable Applications\" above)\n        return parent::getRunner($application);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving Deleted File Conflicts\nDESCRIPTION: Commands to resolve conflicts by removing the conflicting files and committing the changes\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/_build/maintainer_guide.rst#2025-04-22_snippet_6\n\nLANGUAGE: terminal\nCODE:\n```\n$ git rm service_container/scopes.rst\n$ git commit -a\n$ git push origin\n$ git push upstream\n```\n\n----------------------------------------\n\nTITLE: Configuring Monolog Handlers in XML\nDESCRIPTION: This snippet shows how to configure a syslog handler for Monolog using XML configuration in Symfony.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/logging.rst#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<monolog:handler name=\"syslog_handler\"\n    type=\"syslog\"\n    level=\"error\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Services with an Explicit Configurator Method in XML\nDESCRIPTION: This XML snippet shows the equivalent configuration in `config/services.xml`. It defines services for `NewsletterManager` and `GreetingCardManager` and uses the `<configurator>` tag within each service definition. The `service` attribute points to the configurator service (`App\\Mail\\EmailConfigurator`), and the `method` attribute specifies the method to call (`configure`).\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/configurators.rst#2025-04-22_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <prototype namespace=\"App\\\" resource=\"../src/*\"/>\n\n        <service id=\"App\\Mail\\NewsletterManager\">\n            <configurator service=\"App\\Mail\\EmailConfigurator\" method=\"configure\"/>\n        </service>\n\n        <service id=\"App\\Mail\\GreetingCardManager\">\n            <configurator service=\"App\\Mail\\EmailConfigurator\" method=\"configure\"/>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Defining invalidDateTimeMessage Option for Range Constraint in RST\nDESCRIPTION: Specifies the message displayed when min and max values are PHP datetimes but the given value is invalid. It includes information about the option type, default value, and available message parameters.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Range.rst#2025-04-22_snippet_6\n\nLANGUAGE: rst\nCODE:\n```\n``invalidDateTimeMessage``\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n**type**: ``string`` **default**: ``This value should be a valid number.``\n\nThe message displayed when the ``min`` and ``max`` values are PHP datetimes but\nthe given value is not.\n\nYou can use the following parameters in this message:\n\n===============  ==============================================================\nParameter        Description\n===============  ==============================================================\n``{{ value }}``  The current (invalid) value\n===============  ==============================================================\n```\n\n----------------------------------------\n\nTITLE: Using Locale::getDefault() in PHP\nDESCRIPTION: This code reference demonstrates how the user's locale is determined for displaying country names. It uses the PHP Locale::getDefault() method to guess the user's locale.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/country.rst#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nLocale::getDefault()\n```\n\n----------------------------------------\n\nTITLE: Configuring NotIdenticalTo Constraint with PHP Attributes\nDESCRIPTION: Demonstrates how to use the NotIdenticalTo constraint with PHP attributes in a Person class. It ensures that firstName is not identical to 'Mary' and age is not identical to 15.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/NotIdenticalTo.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Person.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Person\n{\n    #[Assert\\NotIdenticalTo('Mary')]\n    protected string $firstName;\n\n    #[Assert\\NotIdenticalTo(\n        value: 15,\n    )]\n    protected int $age;\n}\n```\n\n----------------------------------------\n\nTITLE: Class Existence Based Test Example\nDESCRIPTION: Example of using ClassExistsMock to test code that depends on the existence of certain classes.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/phpunit_bridge.rst#2025-04-22_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nuse MyClass;\nuse PHPUnit\\Framework\\TestCase;\nuse Vendor\\DependencyClass;\n\nclass MyClassTest extends TestCase\n{\n    public function testHelloDefault(): void\n    {\n        ClassExistsMock::register(MyClass::class);\n        ClassExistsMock::withMockedClasses([DependencyClass::class => false]);\n\n        $class = new MyClass();\n        $result = $class->hello(); // \"The default behavior.\"\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Meta File Path in Symfony Cache\nDESCRIPTION: Shows how to explicitly define an absolute path for the cache meta file when using Symfony's ConfigCache. This feature was introduced in Symfony 7.1.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/config/caching.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Config\\ConfigCache;\nuse Symfony\\Component\\Config\\Resource\\FileResource;\n\n$cachePath = __DIR__.'/cache/appUserMatcher.php';\n\n// the third optional argument indicates the absolute path to the meta file\n$userMatcherCache = new ConfigCache($cachePath, true, '/my/absolute/path/to/cache.meta');\n```\n\n----------------------------------------\n\nTITLE: Monolog YAML Configuration\nDESCRIPTION: YAML configuration for Monolog console handler setup with channel exclusions and verbosity settings.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/logging/monolog_console.rst#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/dev/monolog.yaml\nmonolog:\n    handlers:\n        # ...\n        console:\n            type:   console\n            process_psr_3_messages: false\n            channels: ['!event', '!doctrine', '!console']\n\n            # optionally configure the mapping between verbosity levels and log levels\n            # verbosity_levels:\n            #     VERBOSITY_NORMAL: NOTICE\n```\n\n----------------------------------------\n\nTITLE: Applying Twig Constraint to a Property in PHP with Namespace\nDESCRIPTION: This snippet shows how to apply the Twig constraint to a property in a PHP class within a namespace. It uses PHP attributes to validate the 'templateCode' property.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Twig.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Page.php\nnamespace App\\Entity;\n\nuse Symfony\\Bridge\\Twig\\Validator\\Constraints\\Twig;\n\nclass Page\n{\n    #[Twig]\n    private string $templateCode;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ISSN Constraint using PHP in Symfony Entity\nDESCRIPTION: Demonstrates how to programmatically add the ISSN validation constraint to a Symfony entity class using PHP.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Issn.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Journal.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Journal\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('issn', new Assert\\Issn());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Translatable Objects in PHP\nDESCRIPTION: Demonstrates how to create translatable message objects using the TranslatableMessage class. These objects store the original message, translation parameters, and domain for later translation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/translation.rst#2025-04-22_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Translation\\TranslatableMessage;\n\n// the first argument is required and it's the original message\n$message = new TranslatableMessage('Symfony is great!');\n// the optional second argument defines the translation parameters and\n// the optional third argument is the translation domain\n$status = new TranslatableMessage('order.status', ['%status%' => $order->getStatus()], 'store');\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Code Block in reStructuredText\nDESCRIPTION: Example showing how to specify YAML syntax highlighting in a code block using the code-block directive.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/contributing/documentation/format.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. code-block:: yaml\n\n    { foo: bar, bar: { foo: bar, bar: baz } }\n```\n\n----------------------------------------\n\nTITLE: Configuring Cascade Constraint with PHP\nDESCRIPTION: Shows how to apply the Cascade constraint to a BookCollection entity using PHP by implementing the loadValidatorMetadata method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Cascade.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/BookCollection.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass BookCollection\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addConstraint(new Assert\\Cascade());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Emojis to Gitlab Short Codes in PHP\nDESCRIPTION: PHP code showing how to use EmojiTransliterator to convert emojis to Gitlab short codes.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/emoji.rst#2025-04-22_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n$transliterator = EmojiTransliterator::create('emoji-gitlab');\n$transliterator->transliterate('Breakfast with 🥝 or 🥛');\n// => 'Breakfast with :kiwi: or :milk:'\n```\n\n----------------------------------------\n\nTITLE: Apache Configuration for ETag Preservation\nDESCRIPTION: Apache configuration to preserve both original and compressed ETags when using mod_deflate or mod_brotli compression.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/http_cache/validation.rst#2025-04-22_snippet_1\n\nLANGUAGE: apache\nCODE:\n```\nRequestHeader edit \"If-None-Match\" '^\"((.*)-(gzip|br))\"$' '\"$1\", \"$2\"'\n```\n\n----------------------------------------\n\nTITLE: Emoji Text Conversion\nDESCRIPTION: Converts textual emoji representations to actual emoji characters\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#2025-04-22_snippet_63\n\nLANGUAGE: twig\nCODE:\n```\n{{ text|emojify(catalog = null) }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default hinclude Template in YAML\nDESCRIPTION: YAML configuration for setting the default template used by hinclude fragments\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/templates.rst#2025-04-22_snippet_41\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/framework.yaml\nframework:\n    # ...\n    fragments:\n        hinclude_default_template: hinclude.html.twig\n```\n\n----------------------------------------\n\nTITLE: Overriding Cache Pool Namespace in Symfony (XML)\nDESCRIPTION: This XML configuration defines a service `app.cache.adapter.redis` inheriting from `cache.adapter.redis`. It uses a `<tag>` element with the name `cache.pool` and a `namespace` attribute set to `my_custom_namespace` to customize the cache key namespace for this specific pool.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/cache.rst#2025-04-22_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\"\n>\n    <services>\n        <!-- ... -->\n\n        <service id=\"app.cache.adapter.redis\" parent=\"cache.adapter.redis\">\n            <tag name=\"cache.pool\" namespace=\"my_custom_namespace\"/>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Enum Environment Variable in PHP\nDESCRIPTION: Shows how to configure an enum environment variable in a Symfony PHP configuration file. It uses the 'enum' processor to convert a string value to an enum.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/env_var_processors.rst#2025-04-22_snippet_37\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\n$container->setParameter('suit', '%env(enum:App\\Enum\\Suit:CARD_SUIT)%');\n```\n\n----------------------------------------\n\nTITLE: Shuffling Array Environment Variables in YAML\nDESCRIPTION: Example of using the shuffle processor to randomly order array elements in an environment variable using YAML configuration. This randomizes the order of Redis nodes for a RedisCluster.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/env_var_processors.rst#2025-04-22_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/framework.yaml\nparameters:\n    env(REDIS_NODES): \"127.0.0.1:6380,127.0.0.1:6381\"\nservices:\n    RedisCluster:\n        class: RedisCluster\n        arguments: [null, \"%env(shuffle:csv:REDIS_NODES)%\"]\n```\n\n----------------------------------------\n\nTITLE: Named Password Hasher Configuration in XML\nDESCRIPTION: XML configuration for setting up a named password hasher with auto algorithm and custom cost.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/passwords.rst#2025-04-22_snippet_22\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/security.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<srv:container xmlns=\"http://symfony.com/schema/dic/security\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:srv=\"http://symfony.com/schema/dic/services\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/security\n        https://symfony.com/schema/dic/security/security-1.0.xsd\">\n\n    <config>\n        <!-- ... -->\n        <security:password-hasher class=\"harsh\"\n            algorithm=\"auto\"\n            cost=\"15\"/>\n    </config>\n</srv:container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Failover Transport in ENV File\nDESCRIPTION: Example of setting up a high availability failover configuration with multiple transports to ensure email delivery in case one provider fails.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_9\n\nLANGUAGE: env\nCODE:\n```\nMAILER_DSN=\"failover(postmark+api://ID@default sendgrid+smtp://KEY@default)\"\n```\n\n----------------------------------------\n\nTITLE: Globally Registering a Monolog Processor in XML\nDESCRIPTION: XML service definition for `Monolog\\Processor\\IntrospectionProcessor`, applying the `monolog.processor` tag without any attributes. This registers the processor globally, causing it to be added to all Monolog handlers for all channels within the application.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/dic_tags.rst#2025-04-22_snippet_19\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"Monolog\\Processor\\IntrospectionProcessor\">\n            <tag name=\"monolog.processor\"/>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Implementing MacAddress Constraint with PHP Attributes\nDESCRIPTION: Example showing how to apply the MacAddress constraint using PHP attributes in a Device entity class.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/MacAddress.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Device.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Device\n{\n    #[Assert\\MacAddress]\n    protected string $mac;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Profiler Service Alias in YAML\nDESCRIPTION: YAML configuration to create an alias for the profiler service, making it available for dependency injection in controllers.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/profiler.rst#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services_dev.yaml\nservices:\n    Symfony\\Component\\HttpKernel\\Profiler\\Profiler: '@profiler'\n```\n\n----------------------------------------\n\nTITLE: Returning a Single Command Application from Runtime Closure (PHP)\nDESCRIPTION: This PHP snippet shows how to create a single-command console application by returning a `Symfony\\Component\\Console\\Command\\Command` instance from the runtime closure. The closure can receive the Command instance as an argument, set its code, and return it. `SymfonyRuntime` uses `ConsoleApplicationRunner` to execute it.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/runtime.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\nrequire_once dirname(__DIR__).'/vendor/autoload_runtime.php';\n\nreturn static function (Command $command): Command {\n    $command->setCode(static function (InputInterface $input, OutputInterface $output): void {\n        $output->write('Hello World');\n    });\n\n    return $command;\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Form Validation Error Messages\nDESCRIPTION: Shows how to customize the display of form validation errors by differentiating between global form errors and field-specific errors using the 'compound' variable.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/form_themes.rst#2025-04-22_snippet_21\n\nLANGUAGE: html+twig\nCODE:\n```\n{# templates/form/my_theme.html.twig #}\n{% block form_errors %}\n    {% if errors|length > 0 %}\n        {% if compound %}\n            {# ... display the global form errors #}\n            <ul>\n                {% for error in errors %}\n                    <li>{{ error.message }}</li>\n                {% endfor %}\n            </ul>\n        {% else %}\n            {# ... display the errors for a single field #}\n        {% endif %}\n    {% endif %}\n{% endblock form_errors %}\n```\n\n----------------------------------------\n\nTITLE: Displaying Monolog Configuration Commands in Symfony Console\nDESCRIPTION: Shows the Symfony console commands for displaying the default config values and the actual config values used in the application for Monolog. These commands help developers understand and debug Monolog configurations.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/monolog.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# displays the default config values defined by Symfony\n$ php bin/console config:dump-reference monolog\n\n# displays the actual config values used by your application\n$ php bin/console debug:config monolog\n```\n\n----------------------------------------\n\nTITLE: Customizing Labels for DateIntervalType Components - Symfony Forms - PHP\nDESCRIPTION: Illustrates how to override label text for each subfield of a DateIntervalType in a Symfony form, using PHP associative arrays. If a label is set to null, the default humanized label is used. By assigning custom strings or nulls, the UI can be adapted for localization or specific user guidance.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/dateinterval.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n'labels' => [\n    'invert' => null,\n    'years' => null,\n    'months' => null,\n    'weeks' => null,\n    'days' => null,\n    'hours' => null,\n    'minutes' => null,\n    'seconds' => null,\n]\n```\n\n----------------------------------------\n\nTITLE: Enabling Edge Side Includes (ESI) in Symfony Framework (XML)\nDESCRIPTION: The XML snippet shows how to enable ESI support in Symfony by including a '<framework:esi/>' tag within the framework configuration. This allows HTTP caching strategies that leverage ESI for partial content rendering. The configuration must be part of a valid Symfony DI XML structure and requires a compatible proxy server.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_31\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/framework.xml -->\\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\\n<container xmlns=\\\"http://symfony.com/schema/dic/services\\\"\\n    xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n    xmlns:framework=\\\"http://symfony.com/schema/dic/symfony\\\"\\n    xsi:schemaLocation=\\\"http://symfony.com/schema/dic/services\\n        https://symfony.com/schema/dic/services/services-1.0.xsd\\n        http://symfony.com/schema/dic/symfony https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\\\">\\n\\n    <framework:config>\\n        <framework:esi/>\\n    </framework:config>\\n</container>\n```\n\n----------------------------------------\n\nTITLE: Rendering Collection Prototype Widget - Twig Template\nDESCRIPTION: This Twig snippet demonstrates how to render the prototype form row for a collection field, necessary when implementing dynamic addition of form elements on the frontend. The snippet relies on Symfony's form rendering system and requires the collection's 'prototype' option to be enabled in the form definition. It expects a form view variable (e.g., form.emails.vars.prototype) to be present and outputs the HTML for the prototype row, which can then be manipulated via JavaScript for user-driven additions.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/collection.rst#2025-04-22_snippet_6\n\nLANGUAGE: Twig\nCODE:\n```\n{{ form_row(form.emails.vars.prototype) }}\n```\n\n----------------------------------------\n\nTITLE: Running PHPUnit Tests\nDESCRIPTION: This command runs the PHPUnit tests in the example.com directory.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/create_framework/unit_testing.rst#2025-04-22_snippet_4\n\nLANGUAGE: terminal\nCODE:\n```\n$ ./vendor/bin/phpunit\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Elements - YAML\nDESCRIPTION: YAML configuration for allowing specific HTML elements with their attributes.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/html_sanitizer.rst#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nframework:\n    html_sanitizer:\n        sanitizers:\n            app.post_sanitizer:\n                # ...\n                allow_elements:\n                    article: ['class', 'data-attr']\n                    img: 'src'\n                    h1: '*'\n```\n\n----------------------------------------\n\nTITLE: Nested Translation Keys in YAML\nDESCRIPTION: Example of using nested translation keys in a YAML translation resource file.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/translation.rst#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nsymfony:\n    is:\n        # id is symfony.is.great\n        great: Symfony is great\n        # id is symfony.is.amazing\n        amazing: Symfony is amazing\n    has:\n        # id is symfony.has.bundles\n        bundles: Symfony has bundles\nuser:\n    # id is user.login\n    login: Login\n```\n\n----------------------------------------\n\nTITLE: Displaying Doctrine Configuration Values using Symfony Console\nDESCRIPTION: Commands to display default configuration values and actual config values used by your application for the Doctrine bundle.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/doctrine.rst#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n# displays the default config values defined by Symfony\n$ php bin/console config:dump-reference doctrine\n\n# displays the actual config values used by your application\n$ php bin/console debug:config doctrine\n```\n\n----------------------------------------\n\nTITLE: Standalone Password Hasher Factory Configuration\nDESCRIPTION: PHP example showing how to configure password hashers directly using PasswordHasherFactory.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/passwords.rst#2025-04-22_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\PasswordHasher\\Hasher\\PasswordHasherFactory;\n\n$passwordHasherFactory = new PasswordHasherFactory([\n    // ...\n    'harsh' => [\n        'algorithm' => 'auto',\n        'cost' => 15\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Traverse Constraint in YAML\nDESCRIPTION: Example of configuring the Traverse constraint using YAML format in Symfony validation configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Traverse.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\BookCollection:\n    constraints:\n        - Traverse: ~\n```\n\n----------------------------------------\n\nTITLE: Configuring Bootstrap 4 Form Theme in Symfony (XML)\nDESCRIPTION: This XML configuration snippet sets up Symfony to use the Bootstrap 4 form theme globally for all forms in the application.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/bootstrap4.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/twig.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:twig=\"http://symfony.com/schema/dic/twig\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/twig\n        https://symfony.com/schema/dic/twig/twig-1.0.xsd\">\n\n    <twig:config>\n        <twig:form-theme>bootstrap_4_layout.html.twig</twig:form-theme>\n        <!-- ... -->\n    </twig:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Customizing Finished Indicator in PHP\nDESCRIPTION: Shows how to customize the finished indicator symbol and handle different completion states.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/helpers/progressindicator.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$progressIndicator = new ProgressIndicator($output, finishedIndicatorValue: '🎉');\n\ntry {\n    /* do something */\n    $progressIndicator->finish('Finished');\n} catch (\\Exception) {\n    $progressIndicator->finish('Failed', '🚨');\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ISIN Constraint in YAML for Symfony Validator\nDESCRIPTION: This YAML configuration applies the ISIN constraint to the 'isin' property of the UnitAccount entity. It's typically used in Symfony's validation configuration files.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Isin.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\UnitAccount:\n    properties:\n        isin:\n            - Isin: ~\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Name Converter in Symfony using YAML (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to configure Symfony's Serializer in a YAML configuration file to use a custom name converter by specifying its service ID. The target file is config/packages/serializer.yaml. The 'name_converter' key links to the class implementing NameConverterInterface, enabling custom property name prefixing.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer/custom_name_converter.rst#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/serializer.yaml\nframework:\n    serializer:\n        # pass the service ID of your name converter\n        name_converter: 'App\\Serializer\\OrgPrefixNameConverter'\n```\n\n----------------------------------------\n\nTITLE: Validating Locales using YAML in Symfony\nDESCRIPTION: Configuration for locale validation using YAML format. Defines validation rules for the locale property of a User entity.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Locale.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\User:\n    properties:\n        locale:\n            - Locale:\n                canonicalize: true\n```\n\n----------------------------------------\n\nTITLE: Symfony Coding Standards Example Class\nDESCRIPTION: Comprehensive example PHP class demonstrating Symfony's coding standards, including namespace usage, class structure, method declaration, parameter typing, and documentation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/contributing/code/standards.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Acme;\n\nuse Other\\Qux;\n\n/**\n * Coding standards demonstration.\n */\nclass FooBar\n{\n    public const SOME_CONST = 42;\n\n    private string $fooBar;\n\n    /**\n     * @param $dummy some argument description\n     */\n    public function __construct(\n        string $dummy,\n        private Qux $qux,\n    ) {\n        $this->fooBar = $this->transformText($dummy);\n    }\n\n    /**\n     * @deprecated\n     */\n    public function someDeprecatedMethod(): string\n    {\n        trigger_deprecation('symfony/package-name', '5.1', 'The %s() method is deprecated, use Acme\\Baz::someMethod() instead.', __METHOD__);\n\n        return Baz::someMethod();\n    }\n\n    /**\n     * Transforms the input given as the first argument.\n     *\n     * @param $options an options collection to be used within the transformation\n     *\n     * @throws \\RuntimeException when an invalid option is provided\n     */\n    private function transformText(bool|string $dummy, array $options = []): ?string\n    {\n        $defaultOptions = [\n            'some_default' => 'values',\n            'another_default' => 'more values',\n        ];\n\n        foreach ($options as $name => $value) {\n            if (!array_key_exists($name, $defaultOptions)) {\n                throw new \\RuntimeException(sprintf('Unrecognized option \"%s\"', $name));\n            }\n        }\n\n        $mergedOptions = array_merge($defaultOptions, $options);\n\n        if (true === $dummy) {\n            return 'something';\n        }\n\n        if (\\is_string($dummy)) {\n            if ('values' === $mergedOptions['some_default']) {\n                return substr($dummy, 0, 5);\n            }\n\n            return ucwords($dummy);\n        }\n\n        return null;\n    }\n\n    /**\n     * Performs some basic operations for a given value.\n     */\n    private function performOperations(mixed $value = null, bool $theSwitch = false): void\n    {\n        if (!$theSwitch) {\n            return;\n        }\n\n        $this->qux->doFoo($value);\n        $this->qux->doBar($value);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Doctrine Entity Listener Class in PHP\nDESCRIPTION: Demonstrates how to create a Doctrine entity listener class in PHP. This example listens for the postUpdate event on a User entity.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine/events.rst#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n// src/EventListener/UserChangedNotifier.php\nnamespace App\\EventListener;\n\nuse App\\Entity\\User;\nuse Doctrine\\ORM\\Event\\PostUpdateEventArgs;\n\nclass UserChangedNotifier\n{\n    public function postUpdate(User $user, PostUpdateEventArgs $event): void\n    {\n        // ... do something to notify the changes\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Symfony-Specific YAML Features\nDESCRIPTION: Demonstrates Symfony's custom YAML features including PHP constants, objects, and enums.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/formats/yaml.rst#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ndata:\n    page_limit: !php/const App\\Pagination\\Paginator::PAGE_LIMIT\n```\n\nLANGUAGE: yaml\nCODE:\n```\ndata:\n    my_object: !php/object 'O:8:\"stdClass\":1:{s:3:\"bar\";i:2;}'\n```\n\nLANGUAGE: yaml\nCODE:\n```\ndata:\n    operator_type: !php/enum App\\Operator\\Enum\\Type::Or\n```\n\n----------------------------------------\n\nTITLE: Example URL Showing Front Controller\nDESCRIPTION: Demonstrates a URL explicitly including the front controller script (`index.php`). While functional, this is typically avoided in production by configuring the web server for cleaner URLs.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/front_controllers_and_kernel.rst#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n http://localhost/index.php/some/path/...\n```\n\n----------------------------------------\n\nTITLE: Documenting Removals in CHANGELOG.md in Markdown\nDESCRIPTION: This Markdown example demonstrates the appropriate format for documenting the removal of deprecated features in a component's CHANGELOG.md for a major release. It includes a major version heading and a concise removal message. Such documentation is a required step when breaking changes are introduced.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/contributing/code/conventions.rst#2025-04-22_snippet_9\n\nLANGUAGE: Markdown\nCODE:\n```\n5.0\\n---\\n\\n * Remove the `Deprecated` class, use `Replacement` instead\n```\n\n----------------------------------------\n\nTITLE: Applying Form Themes Globally in YAML Configuration\nDESCRIPTION: Configuration for applying form themes globally to all forms in the application using YAML format. Defines the twig.form_themes configuration option.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/form_themes.rst#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/twig.yaml\ntwig:\n    form_themes: ['form/my_theme.html.twig']\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Configuring JsonFormatter for Monolog in XML\nDESCRIPTION: This XML configuration snippet demonstrates how to configure a stream handler for Monolog using the JsonFormatter in a Symfony project. It defines the handler name, type, logging level, and formatter.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/logging/formatter.rst#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/prod/monolog.xml (and/or config/packages/dev/monolog.xml) -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:monolog=\"http://symfony.com/schema/dic/monolog\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/monolog\n        https://symfony.com/schema/dic/monolog/monolog-1.0.xsd\">\n\n    <monolog:config>\n        <monolog:handler\n            name=\"file\"\n            type=\"stream\"\n            level=\"debug\"\n            formatter=\"monolog.formatter.json\"\n        />\n    </monolog:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Configuring OidcTokenHandler in YAML\nDESCRIPTION: This YAML configuration sets up the OidcTokenHandler in the security.yaml file. It specifies the algorithms used for JWS signing, the JSON Web Key (JWK), audience, and issuers for token validation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/access_token.rst#2025-04-22_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\nsecurity:\n    firewalls:\n        main:\n            access_token:\n                token_handler:\n                    oidc:\n                        # Algorithms used to sign the JWS\n                        algorithms: ['ES256', 'RS256']\n                        # A JSON-encoded JWK\n                        keyset: '{\"keys\":[{\"kty\":\"...\",\"k\":\"...\"}]}'\n                        # Audience (`aud` claim): required for validation purpose\n                        audience: 'api-example'\n                        # Issuers (`iss` claim): required for validation purpose\n                        issuers: ['https://oidc.example.com']\n```\n\n----------------------------------------\n\nTITLE: Mercure Discovery Implementation in Controller\nDESCRIPTION: PHP controller implementation for Mercure discovery mechanism using Link headers.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mercure.rst#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Controller;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\Mercure\\Discovery;\n\nclass DiscoverController extends AbstractController\n{\n    public function discover(Request $request, Discovery $discovery): JsonResponse\n    {\n        // Link: <https://hub.example.com/.well-known/mercure>; rel=\"mercure\"\n        $discovery->addLink($request);\n\n        return $this->json([\n            '@id' => '/books/1',\n            'availability' => 'https://schema.org/InStock',\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Defined Environment Variable in XML\nDESCRIPTION: Shows how to use the 'defined' processor in an XML configuration file to check if an environment variable exists and is not empty.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/env_var_processors.rst#2025-04-22_snippet_39\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony\n        https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <parameters>\n        <parameter key=\"typed_env\"'%env(defined:FOO)%</parameter>\n    </parameters>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony DependencyInjection Component via Composer\nDESCRIPTION: Command to install the Symfony DependencyInjection component using Composer package manager.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/dependency_injection.rst#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require symfony/dependency-injection\n```\n\n----------------------------------------\n\nTITLE: Configuring Firewalls in YAML\nDESCRIPTION: Example of configuring a firewall in Symfony's security.yaml file. The example shows how to define a firewall named 'main' that matches URLs starting with /admin.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/security.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\nsecurity:\n    # ...\n    firewalls:\n        # 'main' is the name of the firewall (can be chosen freely)\n        main:\n            # 'pattern' is a regular expression matched against the incoming\n            # request URL. If there's a match, authentication is triggered\n            pattern: ^/admin\n            # the rest of options depend on the authentication mechanism\n            # ...\n```\n\n----------------------------------------\n\nTITLE: Installing Asset Package with Composer\nDESCRIPTION: Shows the command to install the Symfony asset package using Composer.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/templates.rst#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n$ composer require symfony/asset\n```\n\n----------------------------------------\n\nTITLE: Configuring ISBN Validation in YAML\nDESCRIPTION: YAML configuration for ISBN validation showing how to validate ISBN-10 with a custom error message.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Isbn.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Book:\n    properties:\n        isbn:\n            - Isbn:\n                type: isbn10\n                message: This value is not valid.\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Locator Injection in PHP\nDESCRIPTION: Illustrates how to configure service locator injection using PHP in Symfony. It sets up the CommandBus service with the locator as an argument.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/service_subscribers_locators.rst#2025-04-22_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nuse App\\CommandBus;\n\nreturn function(ContainerConfigurator $container): void {\n    $services = $container->services();\n\n    $services->set(CommandBus::class)\n        ->args([service('app.command_handler_locator')]);\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Symfony Front Controller (PHP)\nDESCRIPTION: This front controller initializes and runs the Symfony application, handling the request and sending the response.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/micro_kernel_trait.rst#2025-04-22_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\n// public/index.php\nuse App\\Kernel;\nuse Symfony\\Component\\HttpFoundation\\Request;\n\nrequire __DIR__.'/../vendor/autoload.php';\n\n$kernel = new Kernel('dev', true);\n$request = Request::createFromGlobals();\n$response = $kernel->handle($request);\n$response->send();\n$kernel->terminate($request, $response);\n```\n\n----------------------------------------\n\nTITLE: Basic Mailer Service Class Implementation\nDESCRIPTION: Simple PHP class implementation of a Mailer service with a hardcoded transport value.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/dependency_injection.rst#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nclass Mailer\n{\n    private string $transport;\n\n    public function __construct()\n    {\n        $this->transport = 'sendmail';\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Yaml Constraint in YAML Format\nDESCRIPTION: Example of configuring the Yaml constraint for a property using YAML format in a validation configuration file.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Yaml.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Report:\n    properties:\n        customConfiguration:\n            - Yaml:\n                message: Your configuration doesn't have valid YAML syntax.\n```\n\n----------------------------------------\n\nTITLE: Configuring Enabled Locales in Symfony Framework (PHP)\nDESCRIPTION: This PHP configuration script uses Symfony's Config API to set the enabled locales to English and Spanish. The 'enabledLocales' method requires an array of locale codes and restricts the locales available to the framework. The function must return a closure that modifies a FrameworkConfig instance, and requires the Symfony framework bundle with config support.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/translation.php\\nuse Symfony\\Config\\FrameworkConfig;\\n\\nreturn static function (FrameworkConfig $framework): void {\\n    $framework->enabledLocales(['en', 'es']);\\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony Runtime Component via Composer\nDESCRIPTION: This command uses Composer, the PHP dependency manager, to add the `symfony/runtime` package to your project's dependencies. This is the standard way to install the component.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/runtime.rst#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require symfony/runtime\n```\n\n----------------------------------------\n\nTITLE: Estimating Password Strength using PasswordStrengthValidator\nDESCRIPTION: Demonstrates how to use the static estimateStrength method of PasswordStrengthValidator to calculate password strength.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/PasswordStrength.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Validator\\Constraints\\PasswordStrengthValidator;\n\n$passwordEstimatedStrength = PasswordStrengthValidator::estimateStrength($password);\n```\n\n----------------------------------------\n\nTITLE: Configuring Date Comparison with LessThanOrEqual in PHP\nDESCRIPTION: PHP code for setting up the LessThanOrEqual constraint to validate that a date of birth is not in the future.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/LessThanOrEqual.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Person.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Person\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('dateOfBirth', new Assert\\LessThanOrEqual('today'));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dumping an ArrayObject with Virtual Properties using VarDumper (PHP)\nDESCRIPTION: Illustrates that VarDumper can display 'virtual' properties for certain objects like `ArrayObject`. These virtual properties represent the internal state of the object rather than actual class properties.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/var_dumper.rst#2025-04-22_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$var = new \\ArrayObject();\n$var[] = \"Some resources and special objects like the current\";\n$var[] = \"one are sometimes best represented using virtual\";\n$var[] = \"properties that describe their internal state.\";\ndump($var);\n```\n\n----------------------------------------\n\nTITLE: Configuring Twig Form Themes in XML\nDESCRIPTION: Demonstrates how to set form themes for all forms in the application using XML configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/twig.rst#2025-04-22_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/twig.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:twig=\"http://symfony.com/schema/dic/twig\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/twig https://symfony.com/schema/dic/twig/twig-1.0.xsd\">\n\n    <twig:config>\n        <twig:form-theme>bootstrap_5_layout.html.twig</twig:form-theme>\n        <twig:form-theme>form/my_theme.html.twig</twig:form-theme>\n        <!-- ... -->\n    </twig:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Tagging a Locale Aware Service with kernel.locale_aware in PHP\nDESCRIPTION: Illustrates how to programmatically register the `App\\Locale\\MyCustomLocaleHandler` service (referenced as `LocaleHandler` in the original example, but likely meant to be the defined class) and add the `kernel.locale_aware` tag using PHP container configuration. This is typically done in a dependency injection extension or compiler pass.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/dic_tags.rst#2025-04-22_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Locale\\MyCustomLocaleHandler;\n\n$container\n    ->register(LocaleHandler::class) // Note: Likely should be MyCustomLocaleHandler::class\n    ->addTag('kernel.locale_aware')\n;\n```\n\n----------------------------------------\n\nTITLE: Value Resolver Service Configuration in YAML\nDESCRIPTION: YAML configuration for registering the custom value resolver as a service\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/controller/value_resolver.rst#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n    _defaults:\n        autowire: true\n    App\\ValueResolver\\BookingIdValueResolver:\n        tags:\n            - controller.argument_value_resolver:\n                name: booking_id\n                priority: 150\n```\n\n----------------------------------------\n\nTITLE: Configuring Validation Groups in YAML\nDESCRIPTION: This snippet demonstrates how to configure validation groups and constraints using YAML format in Symfony. It includes group sequence definition and property constraints.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/validation/sequence_provider.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\User:\n    group_sequence:\n        - User\n        - Strict\n    getters:\n        passwordSafe:\n            - 'IsTrue':\n                message: 'The password cannot match your username'\n                groups: [Strict]\n    properties:\n        username:\n            - NotBlank: ~\n        password:\n            - NotBlank: ~\n```\n\n----------------------------------------\n\nTITLE: Defining a Sample PHP Data Object for Serialization\nDESCRIPTION: Defines a simple `Person` PHP class with private properties (age, name, sportsperson) accessed via public getter methods. This class is used as the example object for serialization and deserialization throughout the documentation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// src/Model/Person.php\nnamespace App\\Model;\n\nclass Person\n{\n    public function __construct(\n        private int $age,\n        private string $name,\n        private bool $sportsperson\n    ) {\n    }\n\n    public function getAge(): int\n    {\n        return $this->age;\n    }\n\n    public function getName(): string\n    {\n        return $this->name;\n    }\n\n    public function isSportsperson(): bool\n    {\n        return $this->sportsperson;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Choice Constraint Message Parameters\nDESCRIPTION: Table definitions showing available parameters that can be used in Choice constraint validation messages, including choices and value placeholders.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Choice.rst#2025-04-22_snippet_14\n\nLANGUAGE: rst\nCODE:\n```\n=================  ============================================================\nParameter          Description\n=================  ============================================================\n``{{ choices }}``  A comma-separated list of available choices\n``{{ value }}``    The current (invalid) value\n=================  ============================================================\n\n===============  ==============================================================\nParameter        Description\n===============  ==============================================================\n``{{ value }}``  The current (invalid) value\n``{{ label }}``  Corresponding form field label\n===============  =============================================================\n```\n\n----------------------------------------\n\nTITLE: Using IdenticalTo Validator with PHP Attributes in Symfony Entity\nDESCRIPTION: Example showing how to apply the IdenticalTo constraint to entity properties using PHP attributes. The constraint validates that firstName is identical to 'Mary' and age is identical to 20.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/IdenticalTo.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Person.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Person\n{\n    #[Assert\\IdenticalTo('Mary')]\n    protected string $firstName;\n\n    #[Assert\\IdenticalTo(\n        value: 20,\n    )]\n    protected int $age;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Serializer Groups in XML\nDESCRIPTION: Defines serialization groups for a Person class using XML configuration. This allows selective serialization of properties based on group names.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer.rst#2025-04-22_snippet_25\n\nLANGUAGE: xml\nCODE:\n```\n<serializer xmlns=\"http://symfony.com/schema/dic/serializer-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/serializer-mapping\n        https://symfony.com/schema/dic/serializer-mapping/serializer-mapping-1.0.xsd\"\n>\n    <class name=\"App\\Model\\Person\">\n        <attribute name=\"age\">\n            <group>admin-view</group>\n        </attribute>\n        <attribute name=\"name\">\n            <group>public-view</group>\n        </attribute>\n        <attribute name=\"sportsperson\">\n            <group>public-view</group>\n        </attribute>\n    </class>\n</serializer>\n```\n\n----------------------------------------\n\nTITLE: Registering NEON Encoder Service in YAML\nDESCRIPTION: YAML configuration for registering the NeonEncoder as a service with the serializer.encoder tag in Symfony's service container.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer/encoders.rst#2025-04-22_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nservices:\n    # ...\n\n    App\\Serializer\\NeonEncoder:\n        tags: ['serializer.encoder']\n```\n\n----------------------------------------\n\nTITLE: Defining maxMessage Option for Range Constraint in RST\nDESCRIPTION: Specifies the message displayed when the value exceeds the max limit. It includes information about the option type, default value, and available message parameters.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Range.rst#2025-04-22_snippet_9\n\nLANGUAGE: rst\nCODE:\n```\n``maxMessage``\n~~~~~~~~~~~~~~\n\n**type**: ``string`` **default**: ``This value should be {{ limit }} or less.``\n\nThe message that will be shown if the underlying value is more than the\n`max`_ option, and no `min`_ option has been defined (if both are defined, use\n`notInRangeMessage`_).\n\nYou can use the following parameters in this message:\n\n===============  ==============================================================\nParameter        Description\n===============  ==============================================================\n``{{ limit }}``  The upper limit\n``{{ value }}``  The current (invalid) value\n===============  ==============================================================\n```\n\n----------------------------------------\n\nTITLE: Vue.js Integration with Twig Templates\nDESCRIPTION: Example of using Vue.js variables alongside Twig variables with custom delimiters\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/vuejs.rst#2025-04-22_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n{{ twig_variable }}   {# renders a Twig variable #}\n${ vuejs_variable }$  {# renders a Vue.js variable #}\n```\n\n----------------------------------------\n\nTITLE: Configuring Security Channel Handler in XML\nDESCRIPTION: XML configuration for routing security channel logs to a separate file in production environment\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/logging/channels_handlers.rst#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/prod/monolog.xml-->\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:monolog=\"http://symfony.com/schema/dic/monolog\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/monolog\n        https://symfony.com/schema/dic/monolog/monolog-1.0.xsd\">\n    <when env=\"prod\">\n        <monolog:config>\n            <monolog:handler name=\"security\" type=\"stream\" path=\"%kernel.logs_dir%/security.log\">\n                <monolog:channels>\n                    <monolog:channel>security</monolog:channel>\n                </monolog:channels>\n            </monolog:handler>\n        </monolog:config>\n    </when>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Setting the Active Environment in Symfony's .env File\nDESCRIPTION: This bash snippet demonstrates how to set the active environment for a Symfony application by modifying the APP_ENV variable in the .env or .env.local file.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration.rst#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n# .env (or .env.local)\nAPP_ENV=prod\n```\n\n----------------------------------------\n\nTITLE: Using IdenticalTo Validator with XML Configuration in Symfony\nDESCRIPTION: Example showing how to configure the IdenticalTo constraint using XML validation configuration. This applies identity validation to the firstName and age properties of a Person entity.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/IdenticalTo.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\Person\">\n        <property name=\"firstName\">\n            <constraint name=\"IdenticalTo\">\n                Mary\n            </constraint>\n        </property>\n        <property name=\"age\">\n            <constraint name=\"IdenticalTo\">\n                <option name=\"value\">20</option>\n            </constraint>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Creating ImmutableEventDispatcher in PHP\nDESCRIPTION: Demonstrates how to create an ImmutableEventDispatcher by wrapping a regular EventDispatcher. The resulting dispatcher prevents any modifications to registered listeners.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/event_dispatcher/immutable_dispatcher.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\EventDispatcher\\ImmutableEventDispatcher;\n// ...\n\n$immutableDispatcher = new ImmutableEventDispatcher($dispatcher);\n```\n\n----------------------------------------\n\nTITLE: Defining Company Entity Class in PHP\nDESCRIPTION: This snippet shows the structure of a Company entity class with properties for name, website, and location details.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/inherit_data_option.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Company.php\nnamespace App\\Entity;\n\nclass Company\n{\n    private string $name;\n    private string $website;\n\n    private string $address;\n    private string $zipcode;\n    private string $city;\n    private string $country;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony Emoji Component\nDESCRIPTION: Command to install the Symfony Emoji component using Composer.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/emoji.rst#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ composer require symfony/emoji\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Subscriber Aliases in PHP\nDESCRIPTION: PHP configuration for aliasing services in a Service Subscriber using container.service_subscriber tag.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/service_subscribers_locators.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nuse App\\CommandBus;\n\nreturn function(ContainerConfigurator $container): void {\n    $services = $container->services();\n\n    $services->set(CommandBus::class)\n        ->tag('container.service_subscriber', ['key' => 'logger', 'id' => 'monolog.logger.event']);\n};\n```\n\n----------------------------------------\n\nTITLE: Defining DateTime Constraint in XML\nDESCRIPTION: Example of using the DateTime constraint in an XML validation configuration file for Symfony. It applies the constraint to the createdAt property of the Author entity.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/DateTime.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\Author\">\n        <property name=\"createdAt\">\n            <constraint name=\"DateTime\"/>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Configuring Week Constraint in YAML for Symfony Validation\nDESCRIPTION: YAML configuration example for the Week constraint that validates the 'startWeek' property of an OnlineCourse entity, ensuring it falls between weeks 1 and 20 of 2022.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Week.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\OnlineCourse:\n    properties:\n        startWeek:\n            - Week:\n                min: '2022-W01'\n                max: '2022-W20'\n```\n\n----------------------------------------\n\nTITLE: Configuring Url Constraint with TLD Requirement using PHP Attributes\nDESCRIPTION: Defines a `Website` entity with a `homepageUrl` property. Uses the `Assert\\Url` PHP attribute to validate the URL, requiring a Top-Level Domain (TLD) via `requireTld: true` and setting a custom error message `tldMessage` ('Add at least one TLD to the {{ value }} URL.') if the TLD is missing. Depends on the Symfony Validator component.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Url.rst#2025-04-22_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Website.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Website\n{\n    #[Assert\\Url(\n        requireTld: true,\n        tldMessage: 'Add at least one TLD to the {{ value }} URL.',\n    )]\n    protected string $homepageUrl;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Validation Mapping Paths in PHP Format\nDESCRIPTION: PHP configuration for defining validation mapping paths. Specifies directories where Symfony will look for additional validation configuration files.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_89\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/framework.php\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework): void {\n    $framework->validation()\n        ->mapping()\n            ->paths(['%kernel.project_dir%/config/validation/']);\n};\n```\n\n----------------------------------------\n\nTITLE: Using URL Encode Environment Variable Processor in PHP\nDESCRIPTION: Illustrates how to use the 'urlencode' processor in a PHP configuration file to encode the value of an environment variable.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/env_var_processors.rst#2025-04-22_snippet_43\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/framework.php\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nuse Symfony\\Component\\DependencyInjection\\ContainerBuilder;\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (ContainerBuilder $container): void {\n    $container->setParameter('env(DATABASE_URL)', 'mysql://db_user:foo@b$r@127.0.0.1:3306/db_name');\n    $container->setParameter('encoded_database_url', '%env(urlencode:DATABASE_URL)%');\n};\n```\n\n----------------------------------------\n\nTITLE: Example Form Widget HTML Output\nDESCRIPTION: Sample HTML output generated by Symfony's form system for an integer input field.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/form_themes.rst#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"number\" id=\"form_age\" name=\"form[age]\" required=\"required\" value=\"33\">\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom Access Denied Handler in Symfony Security XML\nDESCRIPTION: This XML configuration snippet demonstrates setting the custom `AccessDeniedHandler` class for the `main` firewall using XML configuration (`security.xml`). It configures the `access-denied-handler` attribute of the firewall.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/access_denied_handler.rst#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/security.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<srv:container xmlns=\"http://symfony.com/schema/dic/security\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:srv=\"http://symfony.com/schema/dic/services\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <config>\n        <firewall name=\"main\"\n            access-denied-handler=\"App\\Security\\AccessDeniedHandler\"\n        >\n            <!-- ... -->\n        </firewall>\n    </config>\n</srv:container>\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony Profiler Package via Composer\nDESCRIPTION: Terminal command to install the Symfony profiler package in development environment using Composer.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/profiler.rst#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require --dev symfony/profiler-pack\n```\n\n----------------------------------------\n\nTITLE: Customizing Progress Indicator Format in PHP\nDESCRIPTION: Shows how to specify a custom format for the progress indicator by passing the format name to the constructor.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/helpers/progressindicator.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$progressIndicator = new ProgressIndicator($output, 'verbose');\n```\n\n----------------------------------------\n\nTITLE: Using SubscribedService with Dependency Injection Attributes in PHP\nDESCRIPTION: Example showing how to use the 'attributes' argument of SubscribedService to add custom dependency injection attributes like Autowire and Target. This enables fine-grained control over how services are injected.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/service_subscribers_locators.rst#2025-04-22_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n// src/Service/MyService.php\nnamespace App\\Service;\n\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;\nuse Symfony\\Component\\DependencyInjection\\Attribute\\Target;\nuse Symfony\\Component\\Routing\\RouterInterface;\nuse Symfony\\Contracts\\Service\\Attribute\\SubscribedService;\nuse Symfony\\Contracts\\Service\\ServiceMethodsSubscriberTrait;\nuse Symfony\\Contracts\\Service\\ServiceSubscriberInterface;\n\nclass MyService implements ServiceSubscriberInterface\n{\n    use ServiceMethodsSubscriberTrait;\n\n    public function doSomething(): void\n    {\n        // $this->environment() ...\n        // $this->router() ...\n        // $this->logger() ...\n    }\n\n    #[SubscribedService(attributes: new Autowire('%kernel.environment%'))]\n    private function environment(): string\n    {\n        return $this->container->get(__METHOD__);\n    }\n\n    #[SubscribedService(attributes: new Autowire(service: 'router'))]\n    private function router(): RouterInterface\n    {\n        return $this->container->get(__METHOD__);\n    }\n\n    #[SubscribedService(attributes: new Target('requestLogger'))]\n    private function logger(): LoggerInterface\n    {\n        return $this->container->get(__METHOD__);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Casting HTTP Port Environment Variable in Symfony with PHP Configuration\nDESCRIPTION: Illustrates two methods for casting the HTTP_PORT environment variable to integer in PHP-based Symfony configuration: using the env() syntax or method chaining. Requires Symfony's DependencyInjection\\Loader\\Configurator API and the FrameworkConfig object. Environment variable 'HTTP_PORT' must be set, result is assigned to the router's HTTP port.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/env_var_processors.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/framework.php\\nnamespace Symfony\\\\Component\\\\DependencyInjection\\\\Loader\\\\Configurator;\\n\\nuse Symfony\\\\Config\\\\FrameworkConfig;\\n\\nreturn static function (FrameworkConfig $framework): void {\\n    $framework->router()\\n        ->httpPort('%env(int:HTTP_PORT)%')\\n        // or\\n        ->httpPort(env('HTTP_PORT')->int())\\n    ;\\n};\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Validation Groups in Form Type\nDESCRIPTION: This PHP snippet shows how to configure validation groups in a Symfony form type using GroupSequence. It demonstrates setting the validation_groups option in the configureOptions method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/validation/sequence_provider.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// src/Form/MyType.php\nnamespace App\\Form;\n\nuse Symfony\\Component\\Form\\AbstractType;\nuse Symfony\\Component\\OptionsResolver\\OptionsResolver;\nuse Symfony\\Component\\Validator\\Constraints\\GroupSequence;\n// ...\n\nclass MyType extends AbstractType\n{\n    // ...\n    public function configureOptions(OptionsResolver $resolver): void\n    {\n        $resolver->setDefaults([\n            'validation_groups' => new GroupSequence(['First', 'Second']),\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Firewall with Custom Request Matcher - Symfony YAML\nDESCRIPTION: Configures a Symfony firewall using a custom request matcher service class in YAML, by specifying the fully-qualified class name under the \"request_matcher\" key. The custom class must implement Symfony\\Component\\HttpFoundation\\RequestMatcherInterface, and be registered as a service. Place this block in \"config/packages/security.yaml\".\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/firewall_restriction.rst#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\n\n# ...\nsecurity:\n    firewalls:\n        secured_area:\n            request_matcher: App\\Security\\CustomRequestMatcher\n            # ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Runtime Compiler Build\nDESCRIPTION: Configuration for disabling runtime compiler build to create a smaller Vue.js build\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/vuejs.rst#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// webpack.config.js\n// ...\n\nEncore\n    // ...\n\n    .enableVueLoader(() => {}, { runtimeCompilerBuild: false })\n;\n```\n\n----------------------------------------\n\nTITLE: Configuring Contract Implementation in composer.json\nDESCRIPTION: Example of how to declare a package as implementing a specific Symfony contract in the composer.json file. This configuration uses the 'provide' section to specify that the package implements the symfony/cache-implementation contract.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/contracts.rst#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"...\": \"...\",\n    \"provide\": {\n        \"symfony/cache-implementation\": \"3.0\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example English Translation XLIFF File\nDESCRIPTION: Demonstrates the English XLIFF file with additional untranslated messages that need to be added to other language files, including validation messages for passwords and numeric ranges.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/contributing/translations/index.rst#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- src/Symfony/Component/Validator/Resources/translations/validators.en.xlf -->\n\n<!-- ... -->\n<trans-unit id=\"91\">\n    <source>This value should be either negative or zero.</source>\n    <target>This value should be either negative or zero.</target>\n</trans-unit>\n<trans-unit id=\"92\">\n    <source>This value is not a valid timezone.</source>\n    <target>This value is not a valid timezone.</target>\n</trans-unit>\n<trans-unit id=\"93\">\n    <source>This password has been leaked in a data breach, it must not be used. Please use another password.</source>\n    <target>This password has been leaked in a data breach, it must not be used. Please use another password.</target>\n</trans-unit>\n<trans-unit id=\"94\">\n    <source>This value should be between {{ min }} and {{ max }}.</source>\n    <target>This value should be between {{ min }} and {{ max }}.</target>\n</trans-unit>\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Kernel Service with PHP Attributes\nDESCRIPTION: PHP attributes configuration for registering the CacheKernel as a service decorator for http_cache with ESI support.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/http_cache/cache_invalidation.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// src/CacheKernel.php\nnamespace App;\n\n// ...\nuse Symfony\\Component\\DependencyInjection\\Attribute\\AsDecorator;\nuse Symfony\\Component\\DependencyInjection\\Attribute\\Autoconfigure;\n\n#[Autoconfigure(bind: ['$surrogate' => '@?esi'])]\n#[AsDecorator(decorates: 'http_cache')]\nclass CacheKernel extends HttpCache\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Parent Dependencies in PHP\nDESCRIPTION: PHP configuration showing how to override specific settings from the parent service for individual child services. This includes changing visibility settings and overriding or appending arguments.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/parent_services.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nuse App\\Repository\\BaseDoctrineRepository;\nuse App\\Repository\\DoctrinePostRepository;\nuse App\\Repository\\DoctrineUserRepository;\n// ...\n\nreturn function(ContainerConfigurator $container): void {\n    $services = $container->services();\n\n    $services->set(BaseDoctrineRepository::class)\n        // ...\n    ;\n\n    $services->set(DoctrineUserRepository::class)\n        ->parent(BaseDoctrineRepository::class)\n\n        // overrides the private setting of the parent service\n        ->public()\n\n        // appends the '@app.username_checker' argument to the parent\n        // argument list\n        ->args([service('app.username_checker')])\n    ;\n\n    $services->set(DoctrinePostRepository::class)\n        ->parent(BaseDoctrineRepository::class)\n\n        # overrides the first argument\n        ->arg(0, service('doctrine.custom_entity_manager'))\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Services for Mercure\nDESCRIPTION: YAML configuration for replacing the default Mercure hub with a stub implementation in test environment.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mercure.rst#2025-04-22_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services_test.yaml\nservices:\n    mercure.hub.default:\n        class: App\\Tests\\Functional\\Stub\\HubStub\n```\n\n----------------------------------------\n\nTITLE: Registering a Symfony Normalizer Service with Priority - PHP\nDESCRIPTION: This PHP snippet demonstrates how to programmatically register a custom normalizer with the dependency injection container using the PHP configurator API. It defines the TopicNormalizer service and tags it with serializer.normalizer with a priority, ensuring the normalizer is prioritized during serialization. This snippet should be placed in config/services.php and requires the Symfony DependencyInjection component.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer/custom_normalizer.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nuse App\\Serializer\\TopicNormalizer;\n\nreturn function(ContainerConfigurator $container) {\n    // ...\n\n    // if you're using autoconfigure, the tag will be automatically applied\n    $services->set(TopicNormalizer::class)\n        // register the normalizer with a high priority (called earlier)\n        ->tag('serializer.normalizer', [\n            'priority' => 500,\n        ])\n    ;\n};\n\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable LocationType Form with inherit_data in Symfony\nDESCRIPTION: This code defines a LocationType form class that includes common address fields and uses the inherit_data option for reusability across different entity forms.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/inherit_data_option.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// src/Form/Type/LocationType.php\nnamespace App\\Form\\Type;\n\nuse Symfony\\Component\\Form\\AbstractType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\TextareaType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\TextType;\nuse Symfony\\Component\\Form\\FormBuilderInterface;\nuse Symfony\\Component\\OptionsResolver\\OptionsResolver;\n\nclass LocationType extends AbstractType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options): void\n    {\n        $builder\n            ->add('address', TextareaType::class)\n            ->add('zipcode', TextType::class)\n            ->add('city', TextType::class)\n            ->add('country', TextType::class);\n    }\n\n    public function configureOptions(OptionsResolver $resolver): void\n    {\n        $resolver->setDefaults([\n            'inherit_data' => true,\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Doctrine Event Listeners in XML\nDESCRIPTION: This example demonstrates how to register a Doctrine event listener using XML configuration in services.xml. It shows the syntax for tagging a service with doctrine.event_listener and setting event, priority, and connection options.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine/events.rst#2025-04-22_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:doctrine=\"http://symfony.com/schema/dic/doctrine\">\n    <services>\n        <!-- ... -->\n\n        <!--\n            * 'event' is the only required option that defines the lifecycle listener\n            * 'priority': used when multiple listeners are associated to the same event\n            *             (default priority = 0; higher numbers = listener is run earlier)\n            * 'connection': restricts the listener to a specific Doctrine connection\n        -->\n        <service id=\"App\\EventListener\\SearchIndexer\">\n            <tag name=\"doctrine.event_listener\"\n                event=\"postPersist\"\n                priority=\"500\"\n                connection=\"default\"/>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Customizing Twig Constraint Message in PHP\nDESCRIPTION: This snippet shows how to customize the error message for the Twig constraint. It sets a custom message to be displayed when the Twig syntax is invalid.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Twig.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// ...\n\nclass Page\n{\n    #[Twig(message: 'Check this Twig code; it contains errors.')]\n    private string $templateCode;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Kernel Service in XML\nDESCRIPTION: XML configuration for registering the CacheKernel as a service decorator with necessary dependencies.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/http_cache/cache_invalidation.rst#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\"\n>\n    <services>\n        <service id=\"App\\CacheKernel\" decorates=\"http_cache\">\n            <argument type=\"service\" id=\"kernel\"/>\n            <argument type=\"service\" id=\"http_cache.store\"/>\n            <argument type=\"service\" id=\"esi\" on-invalid=\"null\"/>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Version for Cache Busting in YAML\nDESCRIPTION: YAML configuration for setting a global version parameter on assets. This adds a query parameter to all asset URLs for cache busting.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/framework.yaml\nframework:\n    # ...\n    assets:\n        version: 'v2'\n```\n\n----------------------------------------\n\nTITLE: Disabling Strict Mode for Testing with Webpack Encore\nDESCRIPTION: YAML configuration to prevent errors in tests when the entrypoints.json file doesn't exist by disabling strict mode in the test environment.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/faq.rst#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/test/webpack_encore.yaml\nwebpack_encore:\n    strict_mode: false\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Fetching and Checking Out Pull Request in Git\nDESCRIPTION: Git commands to fetch a specific pull request and check it out locally for testing. Replace <ID> with the actual pull request number.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/contributing/community/reviews.rst#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ cd vendor/symfony/symfony\n$ git fetch origin pull/<ID>/head:pr<ID>\n$ git checkout pr<ID>\n```\n\n----------------------------------------\n\nTITLE: Setting Up CardScheme Validation Using PHP Code\nDESCRIPTION: Example demonstrating how to configure the CardScheme constraint programmatically using PHP code in a Transaction entity.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/CardScheme.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Transaction.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Transaction\n{\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('cardNumber', new Assert\\CardScheme(\n            schemes: [\n                Assert\\CardScheme::VISA,\n            ],\n            message: 'Your credit card number is invalid.',\n        ));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Table Separators\nDESCRIPTION: Shows how to add separators between rows in a Symfony console table using TableSeparator class.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/helpers/table.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Console\\Helper\\TableSeparator;\n\n$table->setRows([\n    ['99921-58-10-7', 'Divine Comedy', 'Dante Alighieri'],\n    ['9971-5-0210-0', 'A Tale of Two Cities', 'Charles Dickens'],\n    new TableSeparator(),\n    ['960-425-059-0', 'The Lord of the Rings', 'J. R. R. Tolkien'],\n    ['80-902734-1-6', 'And Then There Were None', 'Agatha Christie'],\n]);\n```\n\n----------------------------------------\n\nTITLE: Adding an Optional Argument to a Symfony Console Command\nDESCRIPTION: This snippet shows how to add an optional argument to a Symfony Console command's InputDefinition. It demonstrates the use of InputArgument class to define an optional argument named 'arg'.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/console_arguments.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// ...\n\nnew InputDefinition([\n    // ...\n    new InputArgument('arg', InputArgument::OPTIONAL),\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Twig Constraint to Check Deprecations\nDESCRIPTION: This code demonstrates how to configure the Twig constraint to check for deprecations. By setting skipDeprecations to false, it triggers validation errors for deprecated Twig code.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Twig.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// ...\n\nclass Page\n{\n    #[Twig(skipDeprecations: false)]\n    private string $templateCode;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom Monolog Logger Channel in YAML\nDESCRIPTION: YAML configuration example for defining a service `App\\Log\\CustomLogger`. It injects the default `@logger` service (which is an instance of `Psr\\Log\\LoggerInterface` for the default channel) and tags the service with `monolog.logger`, specifying the `app` channel. This indicates the service intends to use the Monolog configuration associated with the 'app' channel.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/dic_tags.rst#2025-04-22_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n    App\\Log\\CustomLogger:\n        arguments: ['@logger']\n        tags:\n            - { name: monolog.logger, channel: app }\n```\n\n----------------------------------------\n\nTITLE: Including Vendor Autoload in index.php (Symfony, PHP)\nDESCRIPTION: This code demonstrates how to include Composer's runtime autoload file from a custom location in index.php, using require_once __DIR__.'/../path/to/vendor/autoload_runtime.php'. It is essential when moving or renaming the public directory to ensure correct path resolution.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/override_dir_structure.rst#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nrequire_once __DIR__.'/../path/to/vendor/autoload_runtime.php';\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Version Strategy in Symfony Framework (YAML)\nDESCRIPTION: YAML configuration to enable the custom asset version strategy for all application assets in the Symfony framework.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/custom_version_strategy.rst#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/framework.yaml\nframework:\n    # ...\n    assets:\n        version_strategy: 'App\\Asset\\VersionStrategy\\GulpBusterVersionStrategy'\n```\n\n----------------------------------------\n\nTITLE: Configuring Sequentially Validation in YAML\nDESCRIPTION: Example of configuring the Sequentially constraint in YAML format to validate a Place object's address property with multiple constraints applied in sequence.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Sequentially.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Localization\\Place:\n    properties:\n        address:\n            - Sequentially:\n                - NotNull: ~\n                - Type: string\n                - Length: { min: 10 }\n                - Regex: !php/const App\\Localization\\Place::ADDRESS_REGEX\n                - App\\Validator\\Constraints\\Geolocalizable: ~\n```\n\n----------------------------------------\n\nTITLE: Lock Configuration in YAML\nDESCRIPTION: Shows various lock configuration options in YAML format including different storage backends like Redis, Memcached, and databases\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/lock.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nframework:\n    lock: ~\n    lock: 'flock'\n    lock: 'flock:///path/to/file'\n    lock: 'semaphore'\n    lock: 'memcached://m1.docker'\n    lock: ['memcached://m1.docker', 'memcached://m2.docker']\n    lock: 'redis://r1.docker'\n    lock: ['redis://r1.docker', 'redis://r2.docker']\n    lock: 'rediss://r1.docker?ssl[verify_peer]=1&ssl[cafile]=...'\n    lock: 'zookeeper://z1.docker'\n    lock: 'zookeeper://z1.docker,z2.docker'\n    lock: 'zookeeper://localhost01,localhost02:2181'\n    lock: 'sqlite:///%kernel.project_dir%/var/lock.db'\n    lock: 'mysql:host=127.0.0.1;dbname=app'\n    lock: 'pgsql:host=127.0.0.1;dbname=app'\n    lock: 'pgsql+advisory:host=127.0.0.1;dbname=app'\n    lock: 'sqlsrv:server=127.0.0.1;Database=app'\n    lock: 'oci:host=127.0.0.1;dbname=app'\n    lock: 'mongodb://127.0.0.1/app?collection=lock'\n    lock: '%env(LOCK_DSN)%'\n```\n\n----------------------------------------\n\nTITLE: Basic Blank Constraint Validation Logic in PHP\nDESCRIPTION: Shows the core logic used by the Blank constraint to validate if a value is blank, meaning it must be either an empty string or null.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Blank.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nif ('' !== $value && null !== $value) {\n    // validation will fail\n}\n```\n\n----------------------------------------\n\nTITLE: Checking if a Service is Lazy in PHP\nDESCRIPTION: Code snippet showing how to verify if a service is properly configured as lazy by checking its implemented interfaces.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/lazy_services.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndump(class_implements($service));\n// the output should include \"Symfony\\Component\\VarExporter\\LazyObjectInterface\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Entire Form with form() Function in Twig\nDESCRIPTION: This snippet demonstrates how to render an entire form using the form() Twig function. The form variable is passed from the controller.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/form_customization.rst#2025-04-22_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ form(form) }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Validation with XML\nDESCRIPTION: Implementing validation constraints using XML configuration for Address and Author entities.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Valid.rst#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\Address\">\n        <property name=\"street\">\n            <constraint name=\"NotBlank\"/>\n        </property>\n        <property name=\"zipCode\">\n            <constraint name=\"NotBlank\"/>\n            <constraint name=\"Length\">\n                <option name=\"max\">5</option>\n            </constraint>\n        </property>\n    </class>\n\n    <class name=\"App\\Entity\\Author\">\n        <property name=\"firstName\">\n            <constraint name=\"NotBlank\"/>\n            <constraint name=\"Length\">\n                <option name=\"min\">4</option>\n            </constraint>\n        </property>\n        <property name=\"lastName\">\n            <constraint name=\"NotBlank\"/>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Bootstrap 4 Classes to Form Elements in Twig\nDESCRIPTION: This Twig snippet shows how to add custom Bootstrap 4 classes to radio buttons, checkboxes, and switches when rendering form rows.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/bootstrap4.rst#2025-04-22_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{{ form_row(form.myRadio, {label_attr: {class: 'radio-custom'} }) }}\n{{ form_row(form.myCheckbox, {label_attr: {class: 'checkbox-custom'} }) }}\n{{ form_row(form.myCheckbox, {label_attr: {class: 'switch-custom'} }) }}\n```\n\n----------------------------------------\n\nTITLE: Installing WebLink Component in Symfony\nDESCRIPTION: Command to install the WebLink component in a Symfony Flex application using Composer.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/web_link.rst#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require symfony/web-link\n```\n\n----------------------------------------\n\nTITLE: Defining ISIN Constraint in XML for Symfony Validator\nDESCRIPTION: This XML configuration applies the ISIN constraint to the 'isin' property of the UnitAccount entity. It's an alternative to YAML for configuring Symfony's validator.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Isin.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\UnitAccount\">\n        <property name=\"isin\">\n            <constraint name=\"Isin\"/>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Version Strategy in Symfony Framework (PHP)\nDESCRIPTION: PHP configuration to enable the custom asset version strategy for all application assets in the Symfony framework.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/custom_version_strategy.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/framework.php\nuse App\\Asset\\VersionStrategy\\GulpBusterVersionStrategy;\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework): void {\n    // ...\n    $framework->assets()\n        ->versionStrategy(GulpBusterVersionStrategy::class)\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Defined Environment Variable in PHP\nDESCRIPTION: Illustrates how to use the 'defined' processor in a PHP configuration file to check if an environment variable exists and is not empty.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/env_var_processors.rst#2025-04-22_snippet_40\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\n$container->setParameter('typed_env', '%env(defined:FOO)%');\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony Lock Component via Composer\nDESCRIPTION: Installs the `symfony/lock` package using Composer, the standard dependency manager for PHP. This command downloads the component and its dependencies, making it available for use in the project.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/lock.rst#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require symfony/lock\n```\n\n----------------------------------------\n\nTITLE: Running webpack-dev-server in Symfony Projects\nDESCRIPTION: Command to start the webpack-dev-server instead of using the watch option, serving front-end assets from localhost:8080 by default.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/dev-server.rst#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ npm run dev-server\n```\n\n----------------------------------------\n\nTITLE: Configuring Composer Autoloading\nDESCRIPTION: JSON configuration for PSR-4 autoloading of classes in the src directory, enabling automatic class loading for Simplex and Calendar namespaces.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/create_framework/separation_of_concerns.rst#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"...\": \"...\",\n    \"autoload\": {\n        \"psr-4\": { \"\": \"src/\" }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony BrowserKit via Composer (Terminal)\nDESCRIPTION: Installs the symfony/browser-kit package via Composer command line. Requires Composer to be installed on your system. This command pulls the package and its dependencies from Packagist for use in your PHP project.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/browser_kit.rst#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require symfony/browser-kit\n```\n\n----------------------------------------\n\nTITLE: Configuring Selectable Weeks Values for DateIntervalType - Symfony Forms - PHP\nDESCRIPTION: Provides PHP snippets for setting which week values are available in a DateIntervalType select box. The associative array approach permits setting custom value-label pairs, useful for advanced or localized form implementations.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/dateinterval.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// values displayed to users range from 0 to 51 (both inclusive)\n'weeks' => range(1, 52),\n```\n\nLANGUAGE: php\nCODE:\n```\n// values displayed to users range from 1 to 52 (both inclusive)\n'weeks' => array_combine(range(1, 52), range(1, 52)),\n```\n\n----------------------------------------\n\nTITLE: Serializing and Deserializing with Custom Name Converter (PHP)\nDESCRIPTION: This PHP snippet shows the practical use of Symfony's serializer with the custom name converter. It instantiates a Company object, serializes it to JSON with prefixed property names, and deserializes the JSON back to a Company instance. Dependencies include a configured serializer instance and the defined Company class. Inputs are Company data; outputs are JSON and an equivalent Company object.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer/custom_name_converter.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// ...\n$company = new Company('Acme Inc.', '123 Main Street, Big City');\n\n$json = $serializer->serialize($company, 'json');\n// {\"org_name\": \"Acme Inc.\", \"org_address\": \"123 Main Street, Big City\"}\n$companyCopy = $serializer->deserialize($json, Company::class, 'json');\n// Same data as $company\n```\n\n----------------------------------------\n\nTITLE: Defining Validation Groups in XML\nDESCRIPTION: XML configuration example showing how to define validation constraints with groups. Provides detailed XML structure for validation rules on different properties.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/validation/groups.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"\n        http://symfony.com/schema/dic/constraint-mapping\n        https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\"\n>\n    <class name=\"App\\Entity\\User\">\n        <property name=\"email\">\n            <constraint name=\"Email\">\n                <option name=\"groups\">\n                    <value>registration</value>\n                </option>\n            </constraint>\n        </property>\n\n        <property name=\"password\">\n            <constraint name=\"NotBlank\">\n                <option name=\"groups\">\n                    <value>registration</value>\n                </option>\n            </constraint>\n            <constraint name=\"Length\">\n                <option name=\"min\">7</option>\n                <option name=\"groups\">\n                    <value>registration</value>\n                </option>\n            </constraint>\n        </property>\n\n        <property name=\"city\">\n            <constraint name=\"Length\">\n                <option name=\"min\">2</option>\n            </constraint>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Configuring Twig File Name Pattern in YAML\nDESCRIPTION: Demonstrates how to set the file_name_pattern option in YAML to specify which files should be treated as Twig templates.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/twig.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/twig.yaml\ntwig:\n    file_name_pattern: ['*.twig', 'specific_file.html']\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Defining Non-Shared Services using XML in Symfony\nDESCRIPTION: Shows how to configure a non-shared service using XML configuration. The shared=\"false\" attribute on the service element creates a new instance each time the service is requested.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/shared.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services.xml -->\n<services>\n    <service id=\"App\\SomeNonSharedService\" shared=\"false\"/>\n</services>\n```\n\n----------------------------------------\n\nTITLE: Injecting Service Method Result via Expression (Symfony YAML)\nDESCRIPTION: Defines the `App\\Mailer` service and injects the return value of the `getMailerMethod()` from the `App\\Mail\\MailerConfiguration` service into its constructor using an expression. The '@=' prefix is mandatory for expressions in YAML arguments. Note the different escaping required for single-quoted vs double-quoted strings.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/expression_language.rst#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nservices:\n    # ...\n\n    App\\Mail\\MailerConfiguration: ~\n\n    App\\Mailer:\n        # the '@=' prefix is required when using expressions for arguments in YAML files\n        arguments: ['@=service(\"App\\\\Mail\\\\MailerConfiguration\").getMailerMethod()']\n        # when using double-quoted strings, the backslash needs to be escaped twice (see https://yaml.org/spec/1.2/spec.html#id2787109)\n        # arguments: [\"@=service('App\\\\\\\\Mail\\\\\\\\MailerConfiguration').getMailerMethod()\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Selectable Years Values for DateIntervalType - Symfony Forms - PHP\nDESCRIPTION: Demonstrates defining selectable range for the years field within the DateIntervalType, using PHP's range or array_combine for full control of the select options shown to users. Appropriate when fine-tuning the range of acceptable intervals.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/dateinterval.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// values displayed to users range from 0 to 99 (both inclusive)\n'years' => range(1, 100),\n```\n\nLANGUAGE: php\nCODE:\n```\n// values displayed to users range from 1 to 100 (both inclusive)\n'years' => array_combine(range(1, 100), range(1, 100)),\n```\n\n----------------------------------------\n\nTITLE: Configuring Twig CSS Path in PHP\nDESCRIPTION: PHP configuration to set up a Twig namespace for CSS files, making it easier to reference external stylesheets in email templates.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_51\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/twig.php\nuse Symfony\\Config\\TwigConfig;\n\nreturn static function (TwigConfig $twig): void {\n    // ...\n\n    // point this wherever your css files live\n    $twig->path('%kernel.project_dir%/assets/styles', 'styles');\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring All Constraint in YAML for Symfony Validator\nDESCRIPTION: YAML configuration example for the All constraint. This applies NotBlank and Length constraints to each element in the favoriteColors array property.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/All.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\User:\n    properties:\n        favoriteColors:\n            - All:\n                - NotBlank:  ~\n                - Length:\n                    min: 5\n```\n\n----------------------------------------\n\nTITLE: Defining NotEqualTo Constraints in XML\nDESCRIPTION: This snippet illustrates how to define NotEqualTo constraints using XML configuration. It applies the constraints to the firstName and age properties of the Person class.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/NotEqualTo.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\Person\">\n        <property name=\"firstName\">\n            <constraint name=\"NotEqualTo\">\n                Mary\n            </constraint>\n        </property>\n        <property name=\"age\">\n            <constraint name=\"NotEqualTo\">\n                <option name=\"value\">15</option>\n            </constraint>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Model Layer Implementation\nDESCRIPTION: Shows the separation of database logic into a model layer with functions for database operations and data retrieval.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/introduction/from_flat_php_to_symfony.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// model.php\nfunction open_database_connection()\n{\n    $connection = new PDO(\"mysql:host=localhost;dbname=blog_db\", 'myuser', 'mypassword');\n\n    return $connection;\n}\n\nfunction close_database_connection(&$connection)\n{\n    $connection = null;\n}\n\nfunction get_all_posts()\n{\n    $connection = open_database_connection();\n\n    $result = $connection->query('SELECT id, title FROM post');\n\n    $posts = [];\n    while ($row = $result->fetch(PDO::FETCH_ASSOC)) {\n        $posts[] = $row;\n    }\n    close_database_connection($connection);\n\n    return $posts;\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Command Output in .env Values\nDESCRIPTION: Example of embedding shell command output in environment variable values using the $() syntax. This approach is not supported on Windows systems.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration.rst#2025-04-22_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\nSTART_TIME=$(date)\n```\n\n----------------------------------------\n\nTITLE: Defining the Application Identifier Environment Variable\nDESCRIPTION: Sets the `APP_ID` environment variable, typically within the `.env` file for local development or default value. This variable's value must correspond to the application's directory name inside `apps/` (e.g., 'api') and is used by the modified Kernel to load the correct application context.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/multiple_kernels.rst#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# .env\nAPP_ID=api\n```\n\n----------------------------------------\n\nTITLE: Simple Time-Sensitive Test Example in PHP\nDESCRIPTION: Example of a time-sensitive test using Symfony's Stopwatch component that could fail due to system timing variations.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/phpunit_bridge.rst#2025-04-22_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse PHPUnit\\Framework\\TestCase;\nuse Symfony\\Component\\Stopwatch\\Stopwatch;\n\nclass MyTest extends TestCase\n{\n    public function testSomething(): void\n    {\n        $stopwatch = new Stopwatch();\n\n        $stopwatch->start('event_name');\n        sleep(10);\n        $duration = $stopwatch->stop('event_name')->getDuration();\n\n        $this->assertEquals(10000, $duration);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Requiring PHP Files as Environment Variables in XML\nDESCRIPTION: Example of using the require processor to execute a PHP file and use its return value as an environment variable in XML configuration. This allows for runtime-evaluated configuration values.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/env_var_processors.rst#2025-04-22_snippet_31\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/framework.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony\n        https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <parameters>\n        <parameter key=\"env(PHP_FILE)\">../config/.runtime-evaluated.php</parameter>\n    </parameters>\n\n    <app auth=\"%env(require:PHP_FILE)%\"/>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Configuring LessThan Constraint in XML\nDESCRIPTION: Example of defining the LessThan constraint in XML configuration to validate that siblings count is less than 5 and age is less than 80.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/LessThan.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\Person\">\n        <property name=\"siblings\">\n            <constraint name=\"LessThan\">\n                5\n            </constraint>\n        </property>\n        <property name=\"age\">\n            <constraint name=\"LessThan\">\n                <option name=\"value\">80</option>\n            </constraint>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Validating Locales using PHP Attributes in Symfony\nDESCRIPTION: Example of using PHP attributes to validate a locale property in a User entity class. Uses the Assert\\Locale constraint with canonicalization enabled.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Locale.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/User.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass User\n{\n    #[Assert\\Locale(\n        canonicalize: true,\n    )]\n    protected string $locale;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Front Controller with Legacy Bridge in Symfony\nDESCRIPTION: A modified Symfony front controller (index.php) that makes the kernel globally available and adds a fallback mechanism to the legacy application when Symfony cannot handle a request.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/migration.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// public/index.php\nuse App\\Kernel;\nuse App\\LegacyBridge;\nuse Symfony\\Component\\Dotenv\\Dotenv;\nuse Symfony\\Component\\ErrorHandler\\Debug;\nuse Symfony\\Component\\HttpFoundation\\Request;\n\nrequire dirname(__DIR__).'/vendor/autoload.php';\n\n(new Dotenv())->bootEnv(dirname(__DIR__).'/.env');\n\n/*\n * The kernel will always be available globally, allowing you to\n * access it from your existing application and through it the\n * service container. This allows for introducing new features in\n * the existing application.\n */\nglobal $kernel;\n\nif ($_SERVER['APP_DEBUG']) {\n    umask(0000);\n\n    Debug::enable();\n}\n\nif ($trustedProxies = $_SERVER['TRUSTED_PROXIES'] ?? $_ENV['TRUSTED_PROXIES'] ?? false) {\n    Request::setTrustedProxies(\n      explode(',', $trustedProxies),\n      Request::HEADER_X_FORWARDED_FOR | Request::HEADER_X_FORWARDED_PORT | Request::HEADER_X_FORWARDED_PROTO\n    );\n}\n\nif ($trustedHosts = $_SERVER['TRUSTED_HOSTS'] ?? $_ENV['TRUSTED_HOSTS'] ?? false) {\n    Request::setTrustedHosts([$trustedHosts]);\n}\n\n$kernel = new Kernel($_SERVER['APP_ENV'], (bool) $_SERVER['APP_DEBUG']);\n$request = Request::createFromGlobals();\n$response = $kernel->handle($request);\n\nif (false === $response->isNotFound()) {\n    // Symfony successfully handled the route.\n    $response->send();\n} else {\n    LegacyBridge::handleRequest($request, $response, __DIR__);\n}\n\n$kernel->terminate($request, $response);\n```\n\n----------------------------------------\n\nTITLE: Enabling Session Support in PHP\nDESCRIPTION: Example of enabling session support in the Symfony framework using PHP configuration. Uses the FrameworkConfig class to configure session options.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_72\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/framework.php\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework): void {\n    $framework->session()\n        ->enabled(true);\n};\n```\n\n----------------------------------------\n\nTITLE: Tagging a Locale Aware Service with kernel.locale_aware in YAML\nDESCRIPTION: Demonstrates how to register the `App\\Locale\\MyCustomLocaleHandler` service and tag it with `kernel.locale_aware` using YAML service configuration. This tag marks the service as locale-aware, allowing Symfony to automatically set its locale based on the current request or configuration. This is often automatically handled with default `services.yaml` configuration but can be done manually.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/dic_tags.rst#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n    App\\Locale\\MyCustomLocaleHandler:\n        tags: [kernel.locale_aware]\n```\n\n----------------------------------------\n\nTITLE: Defining notInRangeMessage Option for Range Constraint in RST\nDESCRIPTION: Specifies the message displayed when the value is outside the defined range. It includes information about the option type, default value, and available message parameters.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Range.rst#2025-04-22_snippet_14\n\nLANGUAGE: rst\nCODE:\n```\n``notInRangeMessage``\n~~~~~~~~~~~~~~~~~~~~~\n\n**type**: ``string`` **default**: ``This value should be between {{ min }} and {{ max }}.``\n\nThe message that will be shown if the underlying value is less than the\n`min`_ option or greater than the `max`_ option.\n\nYou can use the following parameters in this message:\n\n===============  ==============================================================\nParameter        Description\n===============  ==============================================================\n``{{ max }}``    The upper limit\n``{{ min }}``    The lower limit\n``{{ value }}``  The current (invalid) value\n===============  ==============================================================\n```\n\n----------------------------------------\n\nTITLE: Creating Service Configuration in YAML\nDESCRIPTION: Demonstrates how to create a separate service configuration file in YAML format. This example shows parameter and service definitions in a mailer configuration file.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/import.rst#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services/mailer.yaml\nparameters:\n    # ... some parameters\n\nservices:\n    # ... some services\n```\n\n----------------------------------------\n\nTITLE: Customizing Access Token Success Handler - Symfony Security - XML\nDESCRIPTION: This XML snippet provides equivalent configuration for defining custom token and success handler services in the Symfony Security component. Used in config/packages/security.xml, it defines the handlers as attributes within the <access-token> element nested under a <firewall> configuration. Required namespaces and schema locations are included for integration with Symfony's DI container.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/access_token.rst#2025-04-22_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/security.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<srv:container xmlns=\"http://symfony.com/schema/dic/security\"\n    xmlns:srv=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/security\n        https://symfony.com/schema/dic/security/security-1.0.xsd\">\n\n    <config>\n        <firewall name=\"main\">\n            <access-token token-handler=\"App\\Security\\AccessTokenHandler\"\n                success-handler=\"App\\Security\\Authentication\\AuthenticationSuccessHandler\"\n            />\n        </firewall>\n    </config>\n</srv:container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Assets Base URLs (PHP)\nDESCRIPTION: Example of configuring base URLs for assets in the FrameworkBundle using PHP configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/framework.php\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework): void {\n    // ...\n    $framework->assets()\n        ->baseUrls(['http://cdn.example.com/']);\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Trusted Hosts in YAML Format for Symfony Framework\nDESCRIPTION: YAML configuration that sets trusted hosts for a Symfony application. This configuration allows requests only from example.com and example.org domains.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_80\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/framework.yaml\nframework:\n    trusted_hosts:  ['^example\\.com$', '^example\\.org$']\n```\n\n----------------------------------------\n\nTITLE: Overriding Container Class in PHP\nDESCRIPTION: Example of how to override the default container class name generation in the Symfony kernel by extending the getContainerClass() method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/kernel.rst#2025-04-22_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n// src/Kernel.php\nnamespace App;\n\nuse Symfony\\Component\\HttpKernel\\Kernel as BaseKernel;\n// ...\n\nclass Kernel extends BaseKernel\n{\n    public function getContainerClass(): string\n    {\n        return sprintf('AcmeKernel%s', random_int(10_000, 99_999));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Individual Table Cells\nDESCRIPTION: Demonstrates how to apply custom styles to individual table cells using TableCellStyle\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/helpers/table.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Console\\Helper\\Table;\nuse Symfony\\Component\\Console\\Helper\\TableCellStyle;\n\n$table = new Table($output);\n\n$table->setRows([\n    [\n        '978-0804169127',\n        new TableCell(\n            'Divine Comedy',\n            [\n                'style' => new TableCellStyle([\n                    'align' => 'center',\n                    'fg' => 'red',\n                    'bg' => 'green',\n                    'cellFormat' => '<info>%s</info>',\n                ])\n            ]\n        )\n    ],\n]);\n\n$table->render();\n```\n\n----------------------------------------\n\nTITLE: Configuring Firewall Context in Symfony\nDESCRIPTION: Configuration examples for setting up shared firewall contexts in Symfony security system, allowing authentication state to be shared between multiple firewalls.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/security.rst#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\nsecurity:\n    # ...\n\n    firewalls:\n        somename:\n            # ...\n            context: my_context\n        othername:\n            # ...\n            context: my_context\n```\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/security.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<srv:container xmlns=\"http://symfony.com/schema/dic/security\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:srv=\"http://symfony.com/schema/dic/services\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/security\n        https://symfony.com/schema/dic/security/security-1.0.xsd\">\n\n    <config>\n        <firewall name=\"somename\" context=\"my_context\">\n            <!-- ... -->\n        </firewall>\n        <firewall name=\"othername\" context=\"my_context\">\n            <!-- ... -->\n        </firewall>\n    </config>\n</srv:container>\n```\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/security.php\nuse Symfony\\Config\\SecurityConfig;\n\nreturn static function (SecurityConfig $security): void {\n    $security->firewall('somename')\n        // ...\n        ->context('my_context')\n    ;\n\n    $security->firewall('othername')\n        // ...\n        ->context('my_context')\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: File Excerpt Generation\nDESCRIPTION: Shows how to generate a code excerpt from a file with line numbers\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#2025-04-22_snippet_57\n\nLANGUAGE: twig\nCODE:\n```\n{{ file|file_excerpt(line, srcContext = 3) }}\n```\n\n----------------------------------------\n\nTITLE: Debugging Symfony Scheduler using Console Commands\nDESCRIPTION: Various console commands to debug Symfony Scheduler, including listing schedules, filtering by specific schedule, and specifying dates for next run calculations.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/scheduler.rst#2025-04-22_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\n$ php bin/console debug:scheduler\n\n# you can also specify a date to use for the next run date:\n$ php bin/console debug:scheduler --date=2025-10-18\n\n# you can also specify a date to use for the next run date for a schedule:\n$ php bin/console debug:scheduler name_of_schedule --date=2025-10-18\n\n# use the --all option to also display the terminated recurring messages\n$ php bin/console debug:scheduler --all\n```\n\n----------------------------------------\n\nTITLE: Converting GitHub Short Codes to Emojis in PHP\nDESCRIPTION: PHP code demonstrating how to use EmojiTransliterator to convert GitHub short codes back to emojis.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/emoji.rst#2025-04-22_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n$transliterator = EmojiTransliterator::create('github-emoji');\n$transliterator->transliterate('Teenage :turtle: really love :pizza:');\n// => 'Teenage 🐢 really love 🍕'\n```\n\n----------------------------------------\n\nTITLE: Referencing Parameters in PHP Configuration\nDESCRIPTION: Shows how to reference a previously defined parameter in a PHP configuration file using both the param() function and the %parameter_name% syntax.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration.rst#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/some_package.php\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\nuse function Symfony\\Component\\DependencyInjection\\Loader\\Configurator\\param;\n\nreturn static function (ContainerConfigurator $container): void {\n    $container->extension('some_package', [\n        // when using the param() function, you only have to pass the parameter name...\n        'email_address' => param('app.admin_email'),\n\n        // ... but if you prefer it, you can also pass the name as a string\n        // surrounded by two % (same as in YAML and XML formats) and Symfony will\n        // replace it by that parameter value\n        'email_address' => '%app.admin_email%',\n    ]);\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP Form Login Authentication in PHP\nDESCRIPTION: Example of configuring form-based LDAP authentication in a Symfony application using PHP format. Uses the SecurityConfig object to define the LDAP service and DN string pattern.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/ldap.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/security.php\nuse Symfony\\Component\\Ldap\\Ldap;\nuse Symfony\\Config\\SecurityConfig;\n\nreturn static function (SecurityConfig $security): void {\n    $security->firewall('main')\n        ->formLoginLdap()\n            ->service(Ldap::class)\n            ->dnString('uid={user_identifier},dc=example,dc=com')\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Requiring PHP Files as Environment Variables in PHP\nDESCRIPTION: Example of using the require processor to execute a PHP file and use its return value as an environment variable in PHP configuration. This allows for runtime-evaluated configuration values.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/env_var_processors.rst#2025-04-22_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/framework.php\n$container->setParameter('env(PHP_FILE)', '../config/.runtime-evaluated.php');\n$container->loadFromExtension('app', [\n    'auth' => '%env(require:PHP_FILE)%',\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Failover Transport with Retry Period in ENV File\nDESCRIPTION: Example of setting up a failover transport with a custom retry period of 15 seconds instead of the default 60 seconds.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_10\n\nLANGUAGE: env\nCODE:\n```\nMAILER_DSN=\"failover(postmark+api://ID@default sendgrid+smtp://KEY@default)?retry_period=15\"\n```\n\n----------------------------------------\n\nTITLE: Documenting is_empty_callback Option in RST\nDESCRIPTION: This snippet demonstrates how to document a callable option (is_empty_callback) in RST format, including its type and purpose.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/form.rst#2025-04-22_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n``is_empty_callback``\n~~~~~~~~~~~~~~~~~~~~~\n\n**type**: ``callable`` **default**: ``null``\n\nThis callable takes form data and returns whether value is considered empty.\n```\n\n----------------------------------------\n\nTITLE: Documenting Configuration Options in Symfony\nDESCRIPTION: PHP code example showing how to add documentation to configuration options using the info method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/config/definition.rst#2025-04-22_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$rootNode\n    ->children()\n        ->integerNode('entries_per_page')\n            ->info('This value is only used for the search results page.')\n            ->defaultValue(25)\n        ->end()\n    ->end()\n;\n```\n\n----------------------------------------\n\nTITLE: Environment Variables for Debug Configuration Example\nDESCRIPTION: Shows the environment variables used to control Symfony's debug mode, which when enabled could expose security issues that are not considered vulnerabilities.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/contributing/code/security.rst#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nAPP_DEBUG is set to true or APP_ENV set to anything but prod\n```\n\n----------------------------------------\n\nTITLE: Custom Table Style Definition\nDESCRIPTION: Creates and applies custom table style with colored borders and custom crossing characters\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/helpers/table.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Console\\Helper\\TableStyle;\n\n$tableStyle = new TableStyle();\n\n$tableStyle\n    ->setHorizontalBorderChars('<fg=magenta>|</>')\n    ->setVerticalBorderChars('<fg=magenta>-</>')\n    ->setDefaultCrossingChar(' ')\n;\n```\n\n----------------------------------------\n\nTITLE: Configuring auto_alias Tag in YAML\nDESCRIPTION: YAML configuration example for using the auto_alias tag to create a dynamic service alias based on a container parameter.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/dic_tags.rst#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n    app.mysql_lock:\n        # ...\n    app.postgresql_lock:\n        # ...\n    app.sqlite_lock:\n        # ...\n    app.lock:\n        tags:\n            - { name: auto_alias, format: \"app.%database_type%_lock\" }\n```\n\n----------------------------------------\n\nTITLE: Configuring ENUM Mapping Type in PHP\nDESCRIPTION: PHP configuration for mapping ENUM database type to string in Doctrine\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine/dbal.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/doctrine.php\nuse Symfony\\Config\\DoctrineConfig;\n\nreturn static function (DoctrineConfig $doctrine): void {\n    $dbalDefault = $doctrine->dbal()\n        ->connection('default');\n    $dbalDefault->mappingType('enum', 'string');\n};\n```\n\n----------------------------------------\n\nTITLE: Casting Health Check Method Environment Variable using Constant Processor in Symfony with YAML Configuration\nDESCRIPTION: Uses the 'const' processor to extract a constant value from an environment variable for access control configuration in Symfony's YAML format. Expects the HEALTH_CHECK_METHOD to be set as a FQCN::CONST string. This enables referencing PHP constants in config files.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/env_var_processors.rst#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\\nparameters:\\n    env(HEALTH_CHECK_METHOD): 'Symfony\\\\Component\\\\HttpFoundation\\\\Request::METHOD_HEAD'\\nsecurity:\\n    access_control:\\n        - { path: '^/health-check$', methods: '%env(const:HEALTH_CHECK_METHOD)%' }\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Progress Bar Redraw Frequency in PHP/Symfony\nDESCRIPTION: Example of setting up progress bar redraw frequency with minimum and maximum time limits between redraws.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/helpers/progressbar.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$progressBar = new ProgressBar($output, 50000);\n$progressBar->start();\n\n// this redraws the screen every 100 iterations, but sets additional limits:\n// don't redraw slower than 200ms (0.2) or faster than 100ms (0.1)\n$progressBar->setRedrawFrequency(100);\n$progressBar->maxSecondsBetweenRedraws(0.2);\n$progressBar->minSecondsBetweenRedraws(0.1);\n\n$i = 0;\nwhile ($i++ < 50000) {\n    // ... do some work\n\n    $progressBar->advance();\n}\n```\n\n----------------------------------------\n\nTITLE: Named Connections in YAML Configuration\nDESCRIPTION: Example YAML configuration for named connections with table, user, and password properties.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/config/definition.rst#2025-04-22_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nconnections:\n    sf_connection:\n        table: symfony\n        user: root\n        password: ~\n    default:\n        table: foo\n        user: root\n        password: pa$$\n```\n\n----------------------------------------\n\nTITLE: Configuring Symfony Translation in XML\nDESCRIPTION: XML configuration for setting the default locale and translation file directory in Symfony.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/translation.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/translation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony\n        https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <framework:config default-locale=\"en\">\n        <framework:translator\n            default-path=\"%kernel.project_dir%/translations\"\n        />\n    </framework:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Xdebug File Link Format for IDE Integration (INI)\nDESCRIPTION: Sets the xdebug.file_link_format option in php.ini to enable IDE integration for various editors like PhpStorm, Sublime Text, etc.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_53\n\nLANGUAGE: ini\nCODE:\n```\n// example for PhpStorm\nxdebug.file_link_format=\"phpstorm://open?file=%f&line=%l\"\n\n// example for PhpStorm with Jetbrains Toolbox\nxdebug.file_link_format=\"jetbrains://phpstorm/navigate/reference?project=example&path=%f:%l\"\n\n// example for Sublime Text\nxdebug.file_link_format=\"subl://open?url=file://%f&line=%l\"\n```\n\n----------------------------------------\n\nTITLE: Configuring X.509 Authentication in Symfony\nDESCRIPTION: Configuration examples for setting up X.509 certificate authentication in Symfony security system. Shows configuration in multiple formats including YAML, XML, and PHP.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/security.rst#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\nsecurity:\n    # ...\n\n    firewalls:\n        main:\n            # ...\n            x509:\n                provider:        your_user_provider\n                user:            SSL_CLIENT_S_DN_Email\n                credentials:     SSL_CLIENT_S_DN\n                user_identifier: emailAddress\n```\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/security.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<srv:container xmlns=\"http://symfony.com/schema/dic/security\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:srv=\"http://symfony.com/schema/dic/services\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/security\n        https://symfony.com/schema/dic/security/security-1.0.xsd\">\n\n    <config>\n        <!-- ... -->\n\n        <firewall name=\"main\">\n            <!-- ... -->\n            <x509 provider=\"your_user_provider\"\n                user=\"SSL_CLIENT_S_DN_Email\"\n                credentials=\"SSL_CLIENT_S_DN\"\n                user_identifier=\"emailAddress\"\n            />\n        </firewall>\n    </config>\n</srv:container>\n```\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/security.php\nuse Symfony\\Config\\SecurityConfig;\n\nreturn static function (SecurityConfig $security): void {\n    $mainFirewall = $security->firewall('main');\n    $mainFirewall->x509()\n        ->provider('your_user_provider')\n        ->user('SSL_CLIENT_S_DN_Email')\n        ->credentials('SSL_CLIENT_S_DN')\n        ->userIdentifier('emailAddress')\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Constructor with Factory via PHP Attributes - PHP\nDESCRIPTION: Illustrates defining a factory-based constructor for NewsletterManager using PHP 8 attributes for autoconfiguration. The Autoconfigure attribute binds the 'create' static method as the constructor and maps argument values. This approach integrates directly with Symfony's DI container and is ideal for modern, type-safe service wiring.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/factories.rst#2025-04-22_snippet_8\n\nLANGUAGE: php-attributes\nCODE:\n```\n// src/Email/NewsletterManager.php\nnamespace App\\Email;\n\nuse Symfony\\Component\\DependencyInjection\\Attribute\\Autoconfigure;\n\n#[Autoconfigure(bind: ['$sender' => 'fabien@symfony.com'], constructor: 'create')]\nclass NewsletterManager\n{\n    private string $sender;\n\n    public static function create(string $sender): self\n    {\n        $newsletterManager = new self();\n        $newsletterManager->sender = $sender;\n        // ...\n\n        return $newsletterManager;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Basic Environment Variable Definition in .env File\nDESCRIPTION: Example of defining a database connection URL as an environment variable in a .env file. This is the standard way to configure environment-specific settings in Symfony applications.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration.rst#2025-04-22_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\n# .env\nDATABASE_URL=\"mysql://db_user:db_password@127.0.0.1:3306/db_name\"\n```\n\n----------------------------------------\n\nTITLE: Linking Symfony Source into an Existing Project - PHP/Terminal\nDESCRIPTION: The 'php link' command is used to replace Symfony dependencies in a project's vendor/ directory with symbolic links to the contributor's local Symfony source repository. This enables live development and debugging against local changes. It requires PHP and all project dependencies (via composer install) pre-installed. Inputs: path to the project. Outputs: symbolic links created. Limitation: some environments may not resolve symlinks, in which case '--copy' or '--rollback' options are suggested.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/contributing/code/pull_requests.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$ php link /path/to/your/project\n```\n\n----------------------------------------\n\nTITLE: Controller with Targeted Value Resolver\nDESCRIPTION: Example of a controller using a targeted value resolver through attributes\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/controller/value_resolver.rst#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Controller;\n\nuse App\\Reservation\\BookingId;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Attribute\\ValueResolver;\n\nclass BookingController\n{\n    public function index(#[ValueResolver('booking_id')] BookingId $id): Response\n    {\n        // ... do something with $id\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Blog Index Template with Multi-level Inheritance\nDESCRIPTION: Example of a page template that extends the blog layout and overrides multiple blocks\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/templates.rst#2025-04-22_snippet_46\n\nLANGUAGE: html+twig\nCODE:\n```\n{# templates/blog/index.html.twig #}\n{% extends 'blog/layout.html.twig' %}\n\n{% block title %}Blog Index{% endblock %}\n\n{% block page_contents %}\n    {% for article in articles %}\n        <h2>{{ article.title }}</h2>\n        <p>{{ article.body }}</p>\n    {% endfor %}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Registering CustomNormalizer in Symfony XML Configuration\nDESCRIPTION: This snippet demonstrates how to register a CustomNormalizer as a service in Symfony's XML configuration. It sets a high priority to ensure the normalizer is called earlier in the normalization process.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer.rst#2025-04-22_snippet_41\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <!-- ... -->\n\n        <!-- if you're using autoconfigure, the tag will be automatically applied -->\n        <service id=\"Symfony\\Component\\Serializer\\Normalizer\\CustomNormalizer\">\n            <!-- register the normalizer with a high priority (called earlier) -->\n            <tag name=\"serializer.normalizer\"\n                priority=\"500\"\n            />\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Rendering Symfony Form Fields in Twig\nDESCRIPTION: This snippet shows how to render individual form fields in a Symfony Twig template. It includes the 'sport' and 'position' fields, which are likely <select> elements.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/dynamic_form_modification.rst#2025-04-22_snippet_9\n\nLANGUAGE: twig\nCODE:\n```\n{{ form_row(form.sport) }}    {# <select id=\"meetup_sport\" ... #}\n{{ form_row(form.position) }} {# <select id=\"meetup_position\" ... #}\n{# ... #}\n{{ form_end(form) }}\n```\n\n----------------------------------------\n\nTITLE: Sodium Marshaller with Key Rotation\nDESCRIPTION: Configuration of SodiumMarshaller with multiple encryption keys for key rotation support.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/cache/adapters/redis_adapter.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$keys = [sodium_crypto_box_keypair(), sodium_crypto_box_keypair()];\n$marshaller = new SodiumMarshaller($keys);\n\n$cache = new RedisAdapter($redis, 'rotated_namespace', 3600, $marshaller);\n\n$item = $cache->getItem('rotated_key');\n$item->set('data_to_encrypt');\n$cache->save($item);\n```\n\n----------------------------------------\n\nTITLE: Adding Documentation URL to Symfony Configuration\nDESCRIPTION: PHP code example showing how to provide a URL to full documentation for a configuration section.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/config/definition.rst#2025-04-22_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$rootNode\n    ->docUrl('Full documentation is available at https://example.com/docs/{version:major}.{version:minor}/reference.html')\n    ->children()\n        ->integerNode('entries_per_page')\n            ->defaultValue(25)\n        ->end()\n    ->end()\n;\n```\n\n----------------------------------------\n\nTITLE: Configuring Lazy Loading for a Symfony Command (YAML)\nDESCRIPTION: Shows how to configure a Symfony command (`App\\Command\\SunshineCommand`) for lazy loading in `services.yaml` by manually tagging the service. It uses the `console.command` tag and explicitly sets the `command` attribute to the command's name (`app:sunshine`). This method achieves lazy loading without using the PHP attribute.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/console/commands_as_services.rst#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nservices:\n    # ...\n\n    App\\Command\\SunshineCommand:\n        tags:\n            - { name: 'console.command', command: 'app:sunshine' }\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony Semaphore Component - Terminal\nDESCRIPTION: Installs the Symfony Semaphore Component via Composer. This command fetches symfony/semaphore from Packagist and updates the project dependencies. Composer must be installed and initialized prior to running this command.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/semaphore.rst#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require symfony/semaphore\n```\n\n----------------------------------------\n\nTITLE: Configuring CIDR Validation with YAML\nDESCRIPTION: Example of using YAML configuration to apply CIDR validation to a property in a Symfony entity. This shows how to define validation rules in a separate validation.yaml file.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Cidr.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\NetworkSettings:\n    properties:\n        cidrNotation:\n            - Cidr: ~\n```\n\n----------------------------------------\n\nTITLE: Configuring Toolbar AJAX Refresh in XML\nDESCRIPTION: XML configuration to enable automatic refresh of the web debug toolbar after AJAX requests in single-page applications.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/profiler.rst#2025-04-22_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/web_profiler.xml -->\n<?xml version=\"1.0\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xmlns:web-profiler=\"http://symfony.com/schema/dic/webprofiler\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n        <web-profiler:config>\n            <web-profiler:toolbar ajax-replace=\"true\"/>\n        </web-profiler:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Separated Template Implementation\nDESCRIPTION: Demonstrates template separation by moving HTML code into a separate template file while keeping database logic in the controller.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/introduction/from_flat_php_to_symfony.rst#2025-04-22_snippet_1\n\nLANGUAGE: html+php\nCODE:\n```\n<!-- templates/list.php -->\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>List of Posts</title>\n    </head>\n    <body>\n        <h1>List of Posts</h1>\n        <ul>\n            <?php foreach ($posts as $post): ?>\n            <li>\n                <a href=\"/show.php?id=<?= $post['id'] ?>\">\n                    <?= $post['title'] ?>\n                </a>\n            </li>\n            <?php endforeach ?>\n        </ul>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Installing DomCrawler Package\nDESCRIPTION: Command to install the Symfony DomCrawler component via Composer.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/dom_crawler.rst#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require symfony/dom-crawler\n```\n\n----------------------------------------\n\nTITLE: Using Ranges in Symfony Translations with PHP\nDESCRIPTION: Demonstrates how to handle custom ranges in translations using PHP code instead of the legacy Symfony syntax. The example shows different messages based on a balance amount.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/formats/message_format.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nif ($balance < 0) {\\n    $message = $translator->trans('no_money_message');\\n} elseif ($balance < 1000) {\\n    $message = $translator->trans('some_money_message');\\n} else {\\n    $message = $translator->trans('lots_of_money_message');\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML Sanitizer Attributes in YAML\nDESCRIPTION: YAML configuration for HTML sanitizer showing how to allow attributes and then drop specific ones. It demonstrates allowing 'data-attr' on all elements while removing it from 'section' elements and removing 'style' from all elements.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/html_sanitizer.rst#2025-04-22_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/html_sanitizer.yaml\nframework:\n    html_sanitizer:\n        sanitizers:\n            app.post_sanitizer:\n                # ...\n                allow_attributes:\n                    # allow the \"data-attr\" on all safe elements...\n                    data-attr: '*'\n\n                drop_attributes:\n                    # ...except for the <section> element\n                    data-attr: ['section']\n                    # disallows \"style' on any allowed element\n                    style: '*'\n```\n\n----------------------------------------\n\nTITLE: Enabling SSI in Symfony YAML Configuration\nDESCRIPTION: Shows how to enable Server Side Includes in a Symfony application using YAML configuration. This is the first required step to use SSI functionality.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/http_cache/ssi.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/framework.yaml\nframework:\n    ssi: { enabled: true }\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Discount Class with PHP\nDESCRIPTION: Basic PHP class implementation showing the Discount model with type and value properties.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/When.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Model/Discount.php\nnamespace App\\Model;\n\nclass Discount\n{\n    private ?string $type;\n\n    private ?int $value;\n\n    // ...\n\n    public function getType(): ?string\n    {\n        return $this->type;\n    }\n\n    public function getValue(): ?int\n    {\n        return $this->value;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving Environment Variables with Parameters in YAML\nDESCRIPTION: Example of using the resolve processor to replace container parameters within environment variables in YAML configuration. This sets up a Sentry DSN that includes a dynamically defined host parameter.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/env_var_processors.rst#2025-04-22_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/sentry.yaml\nparameters:\n    sentry_host: '10.0.0.1'\n    env(SENTRY_DSN): 'http://%sentry_host%/project'\nsentry:\n    dsn: '%env(resolve:SENTRY_DSN)%'\n```\n\n----------------------------------------\n\nTITLE: Controlling Decorator Inner Name in XML\nDESCRIPTION: Example showing how to customize the inner service name in XML configuration using the 'decoration-inner-name' attribute, which allows explicit control over the reference name of the decorated service.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/service_decoration.rst#2025-04-22_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsd=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsd:schemaLocation=\"http://symfony.com/schema/dic/services https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <!-- ... -->\n\n        <service\n            id=\"App\\DecoratingMailer\"\n            decorates=\"App\\Mailer\"\n            decoration-inner-name=\"App\\DecoratingMailer.wooz\"\n            public=\"false\"\n        >\n            <argument type=\"service\" id=\"App\\DecoratingMailer.wooz\"/>\n        </service>\n\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Container Inline Factories in XML\nDESCRIPTION: Configuration for dumping the service container into a single file using XML format. This improves performance when using PHP class preloading in PHP 7.4 or newer versions.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/performance.rst#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <parameters>\n        <!-- ... -->\n        <parameter key=\".container.dumper.inline_factories\">true</parameter>\n    </parameters>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Routing Loader in Symfony PHP\nDESCRIPTION: Creates a custom ExtraLoader class that extends Symfony's Loader to handle routing resources of type 'extra'. The loader creates a route with parameters and requirements, and ensures it's only loaded once.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/routing/custom_route_loader.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// src/Routing/ExtraLoader.php\nnamespace App\\Routing;\n\nuse Symfony\\Component\\Config\\Loader\\Loader;\nuse Symfony\\Component\\Routing\\Route;\nuse Symfony\\Component\\Routing\\RouteCollection;\n\nclass ExtraLoader extends Loader\n{\n    private bool $isLoaded = false;\n\n    public function load($resource, ?string $type = null): RouteCollection\n    {\n        if (true === $this->isLoaded) {\n            throw new \\RuntimeException('Do not add the \"extra\" loader twice');\n        }\n\n        $routes = new RouteCollection();\n\n        // prepare a new route\n        $path = '/extra/{parameter}';\n        $defaults = [\n            '_controller' => 'App\\\\Controller\\\\ExtraController::extra',\n        ];\n        $requirements = [\n            'parameter' => '\\\\d+',\n        ];\n        $route = new Route($path, $defaults, $requirements);\n\n        // add the new route to the route collection\n        $routeName = 'extraRoute';\n        $routes->add($routeName, $route);\n\n        $this->isLoaded = true;\n\n        return $routes;\n    }\n\n    public function supports($resource, ?string $type = null): bool\n    {\n        return 'extra' === $type;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring snake_case to CamelCase Name Converter in XML\nDESCRIPTION: XML configuration for setting up the snake_case to CamelCase name converter in the Symfony Serializer.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer.rst#2025-04-22_snippet_36\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/serializer.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <framework:config>\n        <framework:serializer\n            name-converter=\"serializer.name_converter.snake_case_to_camel_case\"\n        />\n    </framework:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Installing Mercure Bundle in Symfony\nDESCRIPTION: Command to install the Mercure bundle in a Symfony application using Composer.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mercure.rst#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require mercure\n```\n\n----------------------------------------\n\nTITLE: Using Autowire Attribute for Lazy Service Injection\nDESCRIPTION: Shows how to configure service laziness at the injection point using the Autowire attribute. This provides fine-grained control over which dependencies should be lazy-loaded.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/lazy_services.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Service;\n\nuse App\\Twig\\AppExtension;\nuse Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;\n\nclass MessageGenerator\n{\n    public function __construct(\n        #[Autowire(service: 'app.twig.app_extension', lazy: true)] ExtensionInterface $extension\n    ) {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling SSI in Symfony XML Configuration\nDESCRIPTION: Shows how to enable Server Side Includes in a Symfony application using XML configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/http_cache/ssi.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/framework.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/symfony\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony\n        https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <framework:config>\n        <framework:ssi enabled=\"true\"/>\n    </framework:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Database Configuration Example in YAML\nDESCRIPTION: Shows a YAML configuration structure for database connection settings including driver, host, credentials and parameters.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/config/definition.rst#2025-04-22_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\ndatabase:\n    connection:\n        driver:               ~ # Required\n        host:                 localhost\n        username:             ~\n        password:             ~\n        memory:               false\n        parameters:           # Required\n\n            # Prototype\n            name:\n                value:                ~ # Required\n```\n\n----------------------------------------\n\nTITLE: Basic Twig Template\nDESCRIPTION: Simple Twig template showing variable output syntax.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/quick_tour/flex_recipes.rst#2025-04-22_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{# templates/default/index.html.twig #}\n<h1>Hello {{ name }}</h1>\n```\n\n----------------------------------------\n\nTITLE: Displaying Informational Messages in Symfony Console\nDESCRIPTION: Shows how to use the info() method to display informational messages with green background without the [OK] label.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/console/style.rst#2025-04-22_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n$io->info('Lorem ipsum dolor sit amet');\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$io->info([\n    'Lorem ipsum dolor sit amet',\n    'Consectetur adipiscing elit',\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring OIDC User Info Claim and Base URI - Symfony Security - XML\nDESCRIPTION: This XML snippet configures the OIDC user info handler to use a specific claim (e.g., 'email') and base URI for user info retrieval. Included as part of the main firewall's access-token handler, it should be used in config/packages/security.xml with correct namespaces and schema locations.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/access_token.rst#2025-04-22_snippet_19\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/security.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<srv:container xmlns=\"http://symfony.com/schema/dic/security\"\n    xmlns:srv=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/security\n        https://symfony.com/schema/dic/security/security-1.0.xsd\">\n\n    <config>\n        <firewall name=\"main\">\n            <access-token>\n                <token-handler>\n                    <oidc-user-info claim=\"email\" base-uri=\"https://www.example.com/realms/demo/protocol/openid-connect/userinfo\"/>\n                </token-handler>\n            </access-token>\n        </firewall>\n    </config>\n</srv:container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Fragment URL in Symfony (YAML)\nDESCRIPTION: Shows how to configure the special URL used for serving template fragments when using the controller() function in Twig templates. This configuration is done in the framework.yaml file.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/templates.rst#2025-04-22_snippet_37\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/framework.yaml\nframework:\n    # ...\n    fragments: { path: /_fragment }\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Kernel Service in PHP\nDESCRIPTION: PHP configuration for registering the CacheKernel as a service decorator with necessary dependencies.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/http_cache/cache_invalidation.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nuse App\\CacheKernel;\n\nreturn function (ContainerConfigurator $container): void {\n    $services = $container->services();\n\n    $services->set(CacheKernel::class)\n        ->decorate('http_cache')\n        ->args([\n            service('kernel'),\n            service('http_cache.store'),\n            service('esi')->nullOnInvalid(),\n        ])\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Deprecating Code with PHPDoc in PHP\nDESCRIPTION: This PHPDoc block marks a class, method, or property as deprecated, specifying the Symfony version since when it became deprecated. The annotation helps developers identify features subject to removal, supporting maintainability and migration efforts. No external dependencies are required for the annotation itself, but integrating this comment with tooling may require additional packages.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/contributing/code/conventions.rst#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n/**\\n * @deprecated since Symfony 5.1.\\n */\n```\n\n----------------------------------------\n\nTITLE: Configuring Language Constraint with XML in Symfony\nDESCRIPTION: XML configuration for applying the Language constraint to validate the preferredLanguage property in a User entity class.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Language.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\User\">\n        <property name=\"preferredLanguage\">\n            <constraint name=\"Language\"/>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Signing the Symfony Binary on macOS\nDESCRIPTION: Command to sign the Symfony binary on macOS to avoid firewall warnings when starting the server.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/symfony_server.rst#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo codesign --force --deep --sign - $(whereis -q symfony)\n```\n\n----------------------------------------\n\nTITLE: Generated SSI HTML Comment\nDESCRIPTION: Shows the HTML comment that the render_ssi Twig helper generates. This is what the web server will process to include the fragment.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/http_cache/ssi.rst#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<!--#include virtual=\"/_fragment?_hash=abcdef1234&_path=_controller=App\\Controller\\ProfileController::gdpr\" -->\n```\n\n----------------------------------------\n\nTITLE: Executing Validator Debug Command in Symfony\nDESCRIPTION: This command validates all classes stored in a specified directory using Symfony's validator component. It's useful for bulk validation of entity classes.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/validation.rst#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ php bin/console debug:validator src/Entity\n```\n\n----------------------------------------\n\nTITLE: Configuring Password Hashers with Migration in YAML\nDESCRIPTION: YAML configuration for password hashers with migration support. This setup enables automatic upgrading from legacy hashing algorithms to stronger ones when users log in.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/passwords.rst#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\nsecurity:\n    # ...\n\n    password_hashers:\n        # a hasher used in the past for some users\n        legacy:\n            algorithm: sha256\n            encode_as_base64: false\n            iterations: 1\n\n        App\\Entity\\User:\n            # the new hasher, along with its options\n            algorithm: sodium\n            migrate_from:\n                - bcrypt # uses the \"bcrypt\" hasher with the default options\n                - legacy # uses the \"legacy\" hasher configured above\n```\n\n----------------------------------------\n\nTITLE: Including Page-Specific Assets in Twig Templates\nDESCRIPTION: Demonstrates how to include page-specific JavaScript and CSS files in Twig templates using the encore_entry_link_tags and encore_entry_script_tags functions.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/simple-example.rst#2025-04-22_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n  {# templates/.../checkout.html.twig #}\n  {% extends 'base.html.twig' %}\n\n+ {% block stylesheets %}\n+     {{ parent() }}\n+     {{ encore_entry_link_tags('checkout') }}\n+ {% endblock %}\n\n+ {% block javascripts %}\n+     {{ parent() }}\n+     {{ encore_entry_script_tags('checkout') }}\n+ {% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Exception Handling in Symfony Framework (XML)\nDESCRIPTION: This XML snippet assigns custom log level, status code, and log channel to the BadRequestHttpException in the Symfony framework. The exception configuration is nested inside the framework configuration of the service container, ensuring consistent error handling for the specified exception. Place inside config/packages with appropriate Symfony DI configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_34\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/exceptions.xml -->\\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\\n<container xmlns=\\\"http://symfony.com/schema/dic/services\\\"\\n    xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n    xmlns:framework=\\\"http://symfony.com/schema/dic/symfony\\\"\\n    xsi:schemaLocation=\\\"http://symfony.com/schema/dic/services\\n        https://symfony.com/schema/dic/services/services-1.0.xsd\\n        http://symfony.com/schema/dic/symfony https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\\\">\\n\\n    <framework:config>\\n        <framework:exception\\n            class=\\\"Symfony\\Component\\HttpKernel\\Exception\\BadRequestHttpException\\\"\\n            log-level=\\\"debug\\\"\\n            status-code=\\\"422\\\"\\n            log-channel=\\\"custom_channel\\\"\\n        />\\n        <!-- ... -->\\n    </framework:config>\\n</container>\n```\n\n----------------------------------------\n\nTITLE: Applying Form Themes Globally in PHP Configuration\nDESCRIPTION: Configuration for applying form themes globally to all forms in the application using PHP format. Uses the formThemes method on the TwigConfig object.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/form_themes.rst#2025-04-22_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/twig.php\nuse Symfony\\Config\\TwigConfig;\n\nreturn static function (TwigConfig $twig): void {\n    $twig->formThemes([\n        'form/my_theme.html.twig',\n    ]);\n\n    // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Chatter Transport in YAML\nDESCRIPTION: YAML configuration for setting up Slack chatter transport using environment variable\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/notifier.rst#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/notifier.yaml\nframework:\n    notifier:\n        chatter_transports:\n            slack: '%env(SLACK_DSN)%'\n```\n\n----------------------------------------\n\nTITLE: Advanced Composition of Stacked Decorators in XML\nDESCRIPTION: This XML configuration demonstrates an advanced example of composing stacked decorators in Symfony, including embedded stacks and aliasing.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/service_decoration.rst#2025-04-22_snippet_23\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\"\n>\n    <services>\n        <service id=\"some_decorator\" class=\"App\\Decorator\"/>\n\n        <stack id=\"embedded_stack\">\n            <service alias=\"some_decorator\"/>\n            <service class=\"App\\Decorated\"/>\n        </stack>\n\n        <stack id=\"decorated_foo_stack\">\n            <service parent=\"embedded_stack\"/>\n            <service class=\"Baz\"/>\n            <service class=\"Bar\"/>\n            <service class=\"Foo\"/>\n        </stack>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Defining XML Attributes and Node Value in PHP Array for XmlEncoder\nDESCRIPTION: This PHP array demonstrates how to structure data for the `XmlEncoder` to create an XML node ('foo') with an attribute ('bar' having 'value') and text content ('baz'). The '@' prefix indicates an attribute, and the '#' key represents the node's value.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer/encoders.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n['foo' => ['@bar' => 'value', '#' => 'baz']];\n```\n\n----------------------------------------\n\nTITLE: Defining Time Constraint in XML for Symfony Validation\nDESCRIPTION: An XML configuration example for applying the Time constraint to a property in Symfony. This defines validation rules that ensure the startsAt property contains a valid time format.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Time.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\Event\">\n        <property name=\"startsAt\">\n            <constraint name=\"Time\"/>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Using AsCronTask Attribute for Defining Cron Tasks in PHP\nDESCRIPTION: Shows how to use the AsCronTask attribute to define a recurring task with cron syntax directly on a class.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/scheduler.rst#2025-04-22_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n// src/Scheduler/Task/SendDailySalesReports.php\nnamespace App\\Scheduler\\Task;\n\nuse Symfony\\Component\\Scheduler\\Attribute\\AsCronTask;\n\n#[AsCronTask('0 0 * * *')]\nclass SendDailySalesReports\n{\n    public function __invoke()\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Success Handler in YAML\nDESCRIPTION: YAML configuration for setting a custom success handler for the login_link security firewall.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/login_link.rst#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\nsecurity:\n    firewalls:\n        main:\n            login_link:\n                check_route: login_check\n                lifetime: 600\n                max_uses: 1\n                success_handler: App\\Security\\Authentication\\AuthenticationSuccessHandler\n```\n\n----------------------------------------\n\nTITLE: Custom Validation Configuration in XML\nDESCRIPTION: Shows how to define custom validation constraints for a User entity using validation groups in XML format.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/bundles/override.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping\n        https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\"\n>\n    <class name=\"FOS\\UserBundle\\Model\\User\">\n        <property name=\"plainPassword\">\n            <constraint name=\"NotBlank\">\n                <option name=\"groups\">\n                    <value>AcmeValidation</value>\n                </option>\n            </constraint>\n\n            <constraint name=\"Length\">\n                <option name=\"min\">6</option>\n                <option name=\"minMessage\">fos_user.password.short</option>\n                <option name=\"groups\">\n                    <value>AcmeValidation</value>\n                </option>\n            </constraint>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Version for Cache Busting in PHP\nDESCRIPTION: PHP configuration for enabling cache busting through versioned asset URLs. This adds a version parameter to all asset paths generated by the asset() function.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/framework.php\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework): void {\n    // ...\n    $framework->assets()\n        ->version('v2');\n};\n```\n\n----------------------------------------\n\nTITLE: Hidden Form Field Properties\nDESCRIPTION: Core properties and configuration options for the Symfony HiddenType form field. This field renders as a hidden input element and inherits from FormType with specific overrides for error handling and validation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/hidden.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n+---------------------------+----------------------------------------------------------------------+\n| Rendered as               | ``input`` ``hidden`` field                                           |\n+---------------------------+----------------------------------------------------------------------+\n| Default invalid message   | The hidden field is invalid.                                         |\n+---------------------------+----------------------------------------------------------------------+\n| Parent type               | :doc:`FormType </reference/forms/types/form>`                        |\n+---------------------------+----------------------------------------------------------------------+\n| Class                     | :class:`Symfony\\Component\\Form\\Extension\\Core\\Type\\HiddenType` |\n+---------------------------+----------------------------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Registering a Monolog Processor for a Specific Handler in PHP\nDESCRIPTION: PHP container configuration showing the registration of `Monolog\\Processor\\IntrospectionProcessor`. The `monolog.processor` tag is added with the `handler` option set to `firephp`, restricting its use to that specific Monolog handler.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/dic_tags.rst#2025-04-22_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nuse Monolog\\Processor\\IntrospectionProcessor;\n\n$container\n    ->register(IntrospectionProcessor::class)\n    ->addTag('monolog.processor', ['handler' => 'firephp'])\n;\n```\n\n----------------------------------------\n\nTITLE: AsController Attribute Example\nDESCRIPTION: PHP controller class using the AsController attribute to automatically apply controller.service_arguments tag.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/controller/service.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/HelloController.php\nnamespace App\\Controller;\n\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Attribute\\AsController;\nuse Symfony\\Component\\Routing\\Attribute\\Route;\n\n#[AsController]\nclass HelloController\n{\n    #[Route('/hello', name: 'hello', methods: ['GET'])]\n    public function index(): Response\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring IsNull Constraint with YAML in Symfony\nDESCRIPTION: This snippet shows how to apply the IsNull constraint to a property using YAML configuration in Symfony. It ensures that the firstName property of the Author entity is exactly equal to null.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/IsNull.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Author:\n    properties:\n        firstName:\n            - 'IsNull': ~\n```\n\n----------------------------------------\n\nTITLE: Configuring Login Link Security Options in PHP\nDESCRIPTION: PHP configuration for setting check route, check_post_only, and max uses options on the login_link security firewall.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/login_link.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/security.php\nuse Symfony\\Config\\SecurityConfig;\n\nreturn static function (SecurityConfig $security): void {\n    $security->firewall('main')\n        ->loginLink()\n            ->checkRoute('login_check')\n            ->checkPostOnly(true)\n            ->maxUses(1)\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Symfony Runtime Entry Point with Custom PSR-15 Application in PHP\nDESCRIPTION: This PHP snippet shows how to define a front controller for a Symfony Runtime-enabled project, requiring the autoload_runtime.php and returning a callable that constructs and returns a custom PSR-15 application. The callable receives a context array and is the entry point executed by the runtime component. There's no input/output on its own, but it must yield an application compatible with the custom runtime and runners created above. The required dependency is the existence of SomeCustomPsr15Application and proper autoloading.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/runtime.rst#2025-04-22_snippet_18\n\nLANGUAGE: PHP\nCODE:\n```\nrequire_once dirname(__DIR__).'/vendor/autoload_runtime.php';\n\nreturn function (array $context): SomeCustomPsr15Application {\n    return new SomeCustomPsr15Application();\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring JoliNotif Desktop Notifications in YAML\nDESCRIPTION: Configuration example for setting up desktop notifications using JoliNotif in YAML format.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/notifier.rst#2025-04-22_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/notifier.yaml\nframework:\n    notifier:\n        texter_transports:\n            jolinotif: '%env(JOLINOTIF)%'\n```\n\n----------------------------------------\n\nTITLE: Defining invalidMessage Option for Range Constraint in RST\nDESCRIPTION: Specifies the message displayed when min and max values are numeric but the given value is invalid. It includes information about the option type, default value, and available message parameters.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Range.rst#2025-04-22_snippet_7\n\nLANGUAGE: rst\nCODE:\n```\n``invalidMessage``\n~~~~~~~~~~~~~~~~~~\n\n**type**: ``string`` **default**: ``This value should be a valid number.``\n\nThe message displayed when the ``min`` and ``max`` values are numeric (per\nthe :phpfunction:`is_numeric` PHP function) but the given value is not.\n\nYou can use the following parameters in this message:\n\n===============  ==============================================================\nParameter        Description\n===============  ==============================================================\n``{{ value }}``  The current (invalid) value\n``{{ label }}``  Corresponding form field label\n===============  ==============================================================\n```\n\n----------------------------------------\n\nTITLE: Setting Up Timezone Validation with PHP Class Metadata\nDESCRIPTION: Implementation of timezone validation using PHP class metadata through the loadValidatorMetadata method in a UserSettings entity.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Timezone.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/UserSettings.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass UserSettings\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('timezone', new Assert\\Timezone());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Styles in Symfony Console\nDESCRIPTION: Demonstrates how to create and use a custom style class that implements StyleInterface for customized console output.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/console/style.rst#2025-04-22_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace App\\Console;\n\nuse Symfony\\Component\\Console\\Style\\StyleInterface;\n\nclass CustomStyle implements StyleInterface\n{\n    // ...implement the methods of the interface\n}\n```\n\nLANGUAGE: PHP\nCODE:\n```\n// src/Command/GreetCommand.php\nnamespace App\\Console;\n\nuse App\\Console\\CustomStyle;\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\nclass GreetCommand extends Command\n{\n    // ...\n\n    protected function execute(InputInterface $input, OutputInterface $output): int\n    {\n        // Before\n        $io = new SymfonyStyle($input, $output);\n\n        // After\n        $io = new CustomStyle($input, $output);\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Valid URL Protocols with PHP Method in Symfony\nDESCRIPTION: Example of using PHP to programmatically define allowed URL protocols for validation, including HTTP, HTTPS, and FTP.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Url.rst#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Author.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Author\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('bioUrl', new Assert\\Url(\n            protocols: ['http', 'https', 'ftp'],\n        ));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Available Autowiring Types in Symfony - Bash\nDESCRIPTION: This command shows all types that can be automatically injected (autowired) into Symfony services. Requires Symfony's dependency injection component and a properly configured application. Quickly reveals the set of autowirable classes and interfaces for improved autowiring configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/debug.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ php bin/console debug:autowiring\n```\n\n----------------------------------------\n\nTITLE: Referencing Parameters in YAML Configuration\nDESCRIPTION: Shows how to reference a previously defined parameter in a YAML configuration file using the %parameter_name% syntax.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration.rst#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/some_package.yaml\nsome_package:\n    # any string surrounded by two % is replaced by that parameter value\n    email_address: '%app.admin_email%'\n```\n\n----------------------------------------\n\nTITLE: Configuring Namespaced Asset Paths in YAML\nDESCRIPTION: Demonstrates how to configure asset paths with custom namespaces to organize files from different sources with prefixed logical paths.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/asset_mapper.rst#2025-04-22_snippet_38\n\nLANGUAGE: yaml\nCODE:\n```\nframework:\n    asset_mapper:\n        paths:\n            assets/: ''\n            vendor/some/package/assets/: 'some-package'\n```\n\n----------------------------------------\n\nTITLE: Including Page-Specific JavaScript in Twig Templates\nDESCRIPTION: Shows how to include page-specific JavaScript entrypoints in Twig templates by overriding the importmap block and specifying multiple entrypoints.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/asset_mapper.rst#2025-04-22_snippet_46\n\nLANGUAGE: twig\nCODE:\n```\n{# templates/products/checkout.html.twig #}\n{#\n    Override an \"importmap\" block from base.html.twig.\n    If you don't have that block, add it around the {{ importmap('app') }} call.\n#}\n{% block importmap %}\n    {# do NOT call parent() #}\n\n    {{ importmap(['app', 'checkout']) }}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Enabling Auto Mapping with YAML Configuration in Symfony\nDESCRIPTION: Example of using the EnableAutoMapping constraint in a YAML configuration file to enable Doctrine's auto mapping for validation on the BookCollection entity.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/EnableAutoMapping.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\BookCollection:\n    constraints:\n        - EnableAutoMapping: ~\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP HTTP Basic Authentication in YAML\nDESCRIPTION: Example of configuring HTTP Basic LDAP authentication in a Symfony application using YAML format. Sets up a stateless firewall with LDAP-based HTTP Basic authentication.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/ldap.rst#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\nsecurity:\n    # ...\n\n    firewalls:\n        main:\n            stateless: true\n            http_basic_ldap:\n                service: Symfony\\Component\\Ldap\\Ldap\n                dn_string: 'uid={user_identifier},dc=example,dc=com'\n```\n\n----------------------------------------\n\nTITLE: Enabling Edge Side Includes (ESI) in Symfony Framework (PHP)\nDESCRIPTION: This PHP configuration script enables ESI by invoking the 'esi()->enabled(true)' method on the FrameworkConfig object. It is used to activate ESI support for HTTP fragment caching and requires the framework bundle with ESI dependence. Place this file within the config/packages directory for effect.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/framework.php\\nuse Symfony\\Config\\FrameworkConfig;\\n\\nreturn static function (FrameworkConfig $framework): void {\\n    $framework->esi()->enabled(true);\\n};\n```\n\n----------------------------------------\n\nTITLE: Referencing Text and Choice Field Types in Symfony Forms\nDESCRIPTION: This snippet demonstrates how to reference two common field types used in Symfony forms: TextType and ChoiceType. These are examples of the field types that can be used to compose forms in Symfony applications.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n``TextType``, ``ChoiceType``\n```\n\n----------------------------------------\n\nTITLE: Deprecating a Class with Namespace Context and Runtime Warning in PHP\nDESCRIPTION: This PHP code demonstrates how to flag an entire class as deprecated, combining namespace declaration, imports, a trigger_deprecation() call, and a PHPDoc @deprecated annotation. The sequence provides both static and runtime notification, aiding automated tools and developers. It requires the \\\"symfony/deprecation-contracts\\\" package and should be modified to match the actual class and replacement names when used in different contexts.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/contributing/code/conventions.rst#2025-04-22_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace Symfony\\\\Component\\\\Routing\\\\Loader\\\\DependencyInjection;\\n\\nuse Symfony\\\\Component\\\\Routing\\\\Loader\\\\ContainerLoader;\\n\\ntrigger_deprecation('symfony/routing', '4.4', 'The \"%s\" class is deprecated, use \"%s\" instead.', ServiceRouterLoader::class, ContainerLoader::class);\\n\\n/**\\n * @deprecated since Symfony 4.4, use Symfony\\\\Component\\\\Routing\\\\Loader\\\\ContainerLoader instead.\\n */\\nclass ServiceRouterLoader extends ObjectRouteLoader\n```\n\n----------------------------------------\n\nTITLE: Formatting Block Messages in Symfony Console\nDESCRIPTION: Shows how to format and output a block of error messages with background color.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/helpers/formatterhelper.rst#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$errorMessages = ['Error!', 'Something went wrong'];\n$formattedBlock = $formatter->formatBlock($errorMessages, 'error');\n$output->writeln($formattedBlock);\n```\n\n----------------------------------------\n\nTITLE: Complex Plural and Select Translation in ICU MessageFormat\nDESCRIPTION: Shows a complex example combining select and plural functions in ICU MessageFormat. The translation handles different genders and numbers of guests for a party invitation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/formats/message_format.rst#2025-04-22_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n{gender_of_host, select,\\n    female {{num_guests, plural, offset:1\\n        =0    {{host} does not give a party.}\\n        =1    {{host} invites {guest} to her party.}\\n        =2    {{host} invites {guest} and one other person to her party.}\\n        other {{host} invites {guest} and # other people to her party.}\\n    }}\\n    male {{num_guests, plural, offset:1\\n        =0    {{host} does not give a party.}\\n        =1    {{host} invites {guest} to his party.}\\n        =2    {{host} invites {guest} and one other person to his party.}\\n        other {{host} invites {guest} and # other people to his party.}\\n    }}\\n    other {{num_guests, plural, offset:1\\n        =0    {{host} does not give a party.}\\n        =1    {{host} invites {guest} to their party.}\\n        =2    {{host} invites {guest} and one other person to their party.}\\n        other {{host} invites {guest} and # other people to their party.}\\n    }}\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ResolveTargetEntityListener in PHP\nDESCRIPTION: PHP configuration for Doctrine ORM to resolve the interface to concrete implementation using ResolveTargetEntityListener.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine/resolve_target_entity.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/doctrine.php\nuse App\\Entity\\Customer;\nuse App\\Model\\InvoiceSubjectInterface;\nuse Symfony\\Config\\DoctrineConfig;\n\nreturn static function (DoctrineConfig $doctrine): void {\n    $orm = $doctrine->orm();\n    // ...\n    $orm->resolveTargetEntity(InvoiceSubjectInterface::class, Customer::class);\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Hostname Validation with YAML\nDESCRIPTION: Example showing how to configure the Hostname constraint using YAML configuration in Symfony. Defines validation rules for the name property.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Hostname.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\ServerSettings:\n    properties:\n        name:\n            - Hostname:\n                message: The server name must be a valid hostname.\n```\n\n----------------------------------------\n\nTITLE: Optimizing Composer Autoloader Command\nDESCRIPTION: Terminal command to generate an optimized class map for Composer's autoloader, which improves performance by eliminating runtime class file lookups.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/performance.rst#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ composer dump-autoload --no-dev --classmap-authoritative\n```\n\n----------------------------------------\n\nTITLE: Defining GreaterThan Constraint with Dates in XML\nDESCRIPTION: Illustrates how to configure the GreaterThan constraint for date comparisons using XML.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/GreaterThan.rst#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\Order\">\n        <property name=\"deliveryDate\">\n            <constraint name=\"GreaterThan\">today</constraint>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Configuring Services with an Explicit Configurator Method in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure services in `config/services.yaml`. It assumes services are autoconfigured via the `App\\:` resource definition. It then explicitly overrides the definitions for `NewsletterManager` and `GreetingCardManager` to use `EmailConfigurator`'s `configure` method as their configurator, specified as an array `['@App\\Mail\\EmailConfigurator', 'configure']`.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/configurators.rst#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nservices:\n    # ...\n\n    # Registers all 4 classes as services, including App\\Mail\\EmailConfigurator\n    App\\:\n        resource: '../src/*'\n        # ...\n\n    # override the services to set the configurator\n    App\\Mail\\NewsletterManager:\n        configurator: ['@App\\Mail\\EmailConfigurator', 'configure']\n\n    App\\Mail\\GreetingCardManager:\n        configurator: ['@App\\Mail\\EmailConfigurator', 'configure']\n```\n\n----------------------------------------\n\nTITLE: Configuring Invokable Factory Service - Symfony YAML - yaml\nDESCRIPTION: Configures a Symfony service in YAML, assigning a class and setting its factory to the invokable factory service by omitting a method name. This configuration works with Symfony's dependency injection system and requires the referenced factory service to be appropriately defined.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/factories.rst#2025-04-22_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nservices:\n    # ...\n\n    App\\Email\\NewsletterManager:\n        class:   App\\Email\\NewsletterManager\n        factory: '@App\\Email\\InvokableNewsletterManagerFactory'\n\n```\n\n----------------------------------------\n\nTITLE: Documentation Structure in reStructuredText\nDESCRIPTION: Table of contents structure in reStructuredText format defining the chapters for creating a custom PHP framework guide.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/create_framework/index.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n\n    introduction\n    http_foundation\n    front_controller\n    routing\n    templating\n    http_kernel_controller_resolver\n    separation_of_concerns\n    unit_testing\n    event_dispatcher\n    http_kernel_httpkernelinterface\n    http_kernel_httpkernel_class\n    dependency_injection\n```\n\n----------------------------------------\n\nTITLE: Collection of Choice Fields Configuration\nDESCRIPTION: Demonstrates how to create a collection of choice fields with predefined options.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/collection.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\ChoiceType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\CollectionType;\n// ...\n\n$builder->add('favoriteCities', CollectionType::class, [\n    'entry_type'   => ChoiceType::class,\n    'entry_options'  => [\n        'choices'  => [\n            'Nashville' => 'nashville',\n            'Paris'     => 'paris',\n            'Berlin'    => 'berlin',\n            'London'    => 'london',\n        ],\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Trusted Proxies and Headers in XML\nDESCRIPTION: This XML configuration sets trusted proxy IP addresses and specifies which forwarded headers to trust. It shows how to configure for both X-Forwarded-* headers and the Forwarded header in XML format.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/deployment/proxies.rst#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/framework.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony\n        https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <framework:config>\n        <!-- the IP address (or range) of your proxy -->\n        <framework:trusted-proxies>192.0.0.1,10.0.0.0/8</framework:trusted-proxies>\n        <!-- shortcut for private IP address ranges of your proxy -->\n        <framework:trusted-proxies>private_ranges</framework:trusted-proxies>\n\n        <!-- trust *all* \"X-Forwarded-*\" headers -->\n        <framework:trusted-header>x-forwarded-for</framework:trusted-header>\n        <framework:trusted-header>x-forwarded-host</framework:trusted-header>\n        <framework:trusted-header>x-forwarded-proto</framework:trusted-header>\n        <framework:trusted-header>x-forwarded-port</framework:trusted-header>\n        <framework:trusted-header>x-forwarded-prefix</framework:trusted-header>\n\n        <!-- or, if your proxy instead uses the \"Forwarded\" header -->\n        <framework:trusted-header>forwarded</framework:trusted-header>\n    </framework:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Filtering Asset Mapping Debug Results\nDESCRIPTION: Examples of how to filter the debug:asset-map command results by name, directory, extension, or vendor status.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/asset_mapper.rst#2025-04-22_snippet_5\n\nLANGUAGE: terminal\nCODE:\n```\n# provide an asset name or dir to only show results that match it\n$ php bin/console debug:asset-map bootstrap.js\n$ php bin/console debug:asset-map style/\n\n# provide an extension to only show that file type\n$ php bin/console debug:asset-map --ext=css\n\n# you can also only show assets in vendor/ dir or exclude any results from it\n$ php bin/console debug:asset-map --vendor\n$ php bin/console debug:asset-map --no-vendor\n\n# you can also combine all filters (e.g. find bold web fonts in your own asset dirs)\n$ php bin/console debug:asset-map bold --no-vendor --ext=woff2\n```\n\n----------------------------------------\n\nTITLE: Example XML Output from XmlEncoder in XML\nDESCRIPTION: This XML structure represents the default output generated by the Symfony `XmlEncoder` when serializing a PHP array like `['foo' => [1, 2], 'bar' => true]`. Note how the array key 'foo' becomes the tag name for repeated elements and 'bar' becomes a tag with its boolean value converted to '1'. The root element defaults to 'response'.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer/encoders.rst#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<response>\n    <foo>1</foo>\n    <foo>2</foo>\n    <bar>1</bar>\n</response>\n```\n\n----------------------------------------\n\nTITLE: Code Coverage Example Classes\nDESCRIPTION: Example PHP classes demonstrating code coverage concepts with a Bar class, Foo class, and corresponding test case.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/phpunit_bridge.rst#2025-04-22_snippet_30\n\nLANGUAGE: php\nCODE:\n```\nclass Bar\n{\n    public function barMethod(): string\n    {\n        return 'bar';\n    }\n}\n\nclass Foo\n{\n    public function __construct(\n        private Bar $bar,\n    ) {\n    }\n\n    public function fooMethod(): string\n    {\n        $this->bar->barMethod();\n\n        return 'bar';\n    }\n}\n\nclass FooTest extends PHPUnit\\Framework\\TestCase\n{\n    public function test(): void\n    {\n        $bar = new Bar();\n        $foo = new Foo($bar);\n\n        $this->assertSame('bar', $foo->fooMethod());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Anonymous Service Factory in XML for Symfony\nDESCRIPTION: Defines the service Foo with a factory that is an anonymous FooFactory service in XML format, calling the 'constructFoo' method. Dependencies: Symfony DependencyInjection, XML schema. Uses a <factory> element inside a service, whose child is a <service> definition (factory) and includes the factory method as an attribute. Limitation: explicit wiring if required.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/alias_private.rst#2025-04-22_snippet_16\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services.xml -->\\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\\n<container xmlns=\\\"http://symfony.com/schema/dic/services\\\"\\n    xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n    xsi:schemaLocation=\\\"http://symfony.com/schema/dic/services\\n        https://symfony.com/schema/dic/services/services-1.0.xsd\\\">\\n\\n    <services>\\n        <service id=\\\"foo\\\" class=\\\"App\\\\Foo\\\">\\n            <factory method=\\\"constructFoo\\\">\\n                <service class=\\\"App\\\\FooFactory\\\"/>\\n            </factory>\\n        </service>\\n    </services>\\n</container>\n```\n\n----------------------------------------\n\nTITLE: Configuring CAS Token Handler with Custom HTTP Client in PHP\nDESCRIPTION: PHP configuration for setting up a CAS token handler with a custom HTTP client using the Symfony Config system. This defines the validation URL and HTTP client within a security firewall.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/access_token.rst#2025-04-22_snippet_33\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/security.php\nuse Symfony\\Config\\SecurityConfig;\n\nreturn static function (SecurityConfig $security) {\n    $security->firewall('main')\n        ->accessToken()\n            ->tokenHandler()\n                ->cas()\n                    ->validationUrl('https://www.example.com/cas/validate')\n                    ->httpClient('cas.client')\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Round-Robin Transport in ENV File\nDESCRIPTION: Example of setting up load balancing with a round-robin configuration to distribute email sending across multiple transport providers.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_11\n\nLANGUAGE: env\nCODE:\n```\nMAILER_DSN=\"roundrobin(postmark+api://ID@default sendgrid+smtp://KEY@default)\"\n```\n\n----------------------------------------\n\nTITLE: Reproducing Validator Component Bug in PHP Script\nDESCRIPTION: A standalone PHP script that demonstrates a bug in Symfony's Validator component where a URL validator doesn't properly handle malicious URLs. The example shows how the validator returns null instead of an error when validating an invalid URL with an XSS payload.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/contributing/code/reproducer.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// First, run \"composer require symfony/validator\"\n// Then, execute this file:\n<?php\nrequire_once __DIR__.'/vendor/autoload.php';\nuse Symfony\\Component\\Validator\\Constraints;\n\n$wrongUrl = 'http://example.com/exploit.html?<script>alert(1);</script>';\n$urlValidator = new Constraints\\UrlValidator();\n$urlConstraint = new Constraints\\Url();\n\n// The URL is wrong, so var_dump() should display an error, but it displays\n// \"null\" instead because there is no context to build a validator violation\nvar_dump($urlValidator->validate($wrongUrl, $urlConstraint));\n```\n\n----------------------------------------\n\nTITLE: Shared Initialization Code\nDESCRIPTION: Common initialization code extracted into a separate file for reuse across pages\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/create_framework/front_controller.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nrequire_once __DIR__.'/vendor/autoload.php';\n\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\n$request = Request::createFromGlobals();\n$response = new Response();\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Decoration in XML\nDESCRIPTION: Shows how to configure service decoration in XML format. The Bar service decorates Foo with the decoration-on-invalid attribute set to ignore.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/service_decoration.rst#2025-04-22_snippet_27\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"Foo\"/>\n\n        <service id=\"Bar\" decorates=\"Foo\" decoration-on-invalid=\"ignore\">\n            <argument type=\"service\" id=\".inner\"/>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Webhook Routing for Mailer (XML)\nDESCRIPTION: XML configuration for setting up webhook routing for the Mailer component, using Mailgun as an example provider.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/webhook.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n           xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n           xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n                https://symfony.com/schema/dic/services/services-1.0.xsd\n                http://symfony.com/schema/dic/symfony https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n    <framework:config>\n        <framework:webhook enabled=\"true\">\n            <framework:routing type=\"mailer_mailgun\">\n                <framework:service>mailer.webhook.request_parser.mailgun</framework:service>\n                <framework:secret>%env(MAILER_MAILGUN_SECRET)%</framework:secret>\n            </framework:routing>\n        </framework:webhook>\n    </framework:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Implementing Blank Constraint with PHP Attributes in Symfony\nDESCRIPTION: Example of applying the Blank validation constraint to a property using PHP attributes in a Symfony entity class.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Blank.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Author.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Author\n{\n    #[Assert\\Blank]\n    protected string $firstName;\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching a Wildcard Domain to a Symfony Project\nDESCRIPTION: Command to create a wildcard domain that matches multiple subdomains for a local Symfony project.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/symfony_server.rst#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ symfony proxy:domain:attach \"*.my-domain\"\n```\n\n----------------------------------------\n\nTITLE: Defining Routes with PHP Attributes in Symfony\nDESCRIPTION: Example of defining routes using PHP attributes in a Symfony controller.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/templates.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/BlogController.php\nnamespace App\\Controller;\n\n// ...\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Attribute\\Route;\n\nclass BlogController extends AbstractController\n{\n    #[Route('/', name: 'blog_index')]\n    public function index(): Response\n    {\n        // ...\n    }\n\n    #[Route('/article/{slug}', name: 'blog_post')]\n    public function show(string $slug): Response\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Repository by Extending EntityRepository in Symfony Doctrine\nDESCRIPTION: This snippet demonstrates how to properly create a custom repository by extending EntityRepository instead of ServiceEntityRepository when an entity is managed by multiple entity managers. This approach avoids unexpected behavior and requires explicitly fetching the repository using ManagerRegistry::getRepository().\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine/multiple_entity_managers.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// src/Repository/CustomerRepository.php\nnamespace App\\Repository;\n\nuse Doctrine\\ORM\\EntityRepository;\n\nclass CustomerRepository extends EntityRepository\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fallback Translations in Symfony (YAML)\nDESCRIPTION: Sets 'en' as the fallback locale for translations when the primary translation is not found.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/translation.rst#2025-04-22_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/translation.yaml\nframework:\n    translator:\n        fallbacks: ['en']\n        # ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Twig Debug Mode Based on Kernel Debug (YAML)\nDESCRIPTION: This YAML configuration snippet demonstrates how to set the Twig template engine's debug mode based on the application's kernel debug status. It uses the `kernel.debug` container parameter, which is controlled by the `APP_DEBUG` environment variable.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/front_controllers_and_kernel.rst#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/twig.yaml\ntwig:\n    debug: '%kernel.debug%'\n```\n\n----------------------------------------\n\nTITLE: Configuring Access Decision Strategy in XML\nDESCRIPTION: Configuration for setting the security access decision strategy to unanimous in XML format, with options to control behavior when all voters abstain.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/voters.rst#2025-04-22_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/security.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<srv:container xmlns=\"http://symfony.com/schema/dic/security\"\n    xmlns:srv=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/security\n        https://symfony.com/schema/dic/security/security-1.0.xsd\"\n>\n\n    <config>\n        <access-decision-manager strategy=\"unanimous\" allow-if-all-abstain=\"false\"/>\n    </config>\n</srv:container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Timezone Validation in YAML\nDESCRIPTION: YAML configuration for applying timezone validation to a UserSettings entity property using Symfony's validation configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Timezone.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\UserSettings:\n    properties:\n        timezone:\n            - Timezone: ~\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Environment Variable Processors in XML\nDESCRIPTION: Shows how to combine multiple environment variable processors in an XML configuration file to process a complex value.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/env_var_processors.rst#2025-04-22_snippet_45\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/framework.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony\n        https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <parameters>\n        <parameter key=\"env(AUTH_FILE)\">%kernel.project_dir%/config/auth.json</parameter>\n    </parameters>\n\n    <google auth=\"%env(json:file:resolve:AUTH_FILE)%\"/>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Generating User Impersonation Path in Twig\nDESCRIPTION: Uses the `impersonation_path` function to generate a relative URL that initiates user impersonation for the user identified by the string `identifier`. This function is part of Symfony's security features.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#2025-04-22_snippet_27\n\nLANGUAGE: twig\nCODE:\n```\n{{ impersonation_path(identifier) }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Doctrine DBAL in XML Format\nDESCRIPTION: XML configuration for Doctrine DBAL showing the equivalent options to the YAML configuration, including database connection parameters and custom types.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/doctrine.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:doctrine=\"http://symfony.com/schema/dic/doctrine\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/doctrine\n        https://symfony.com/schema/dic/doctrine/doctrine-1.0.xsd\">\n\n    <doctrine:config>\n        <doctrine:dbal\n            name=\"default\"\n            dbname=\"database\"\n            host=\"localhost\"\n            port=\"1234\"\n            user=\"user\"\n            password=\"secret\"\n            driver=\"pdo_mysql\"\n            driver-class=\"App\\DBAL\\MyDatabaseDriver\"\n            path=\"%kernel.project_dir%/var/data/data.sqlite\"\n            memory=\"true\"\n            unix-socket=\"/tmp/mysql.sock\"\n            wrapper-class=\"App\\DBAL\\MyConnectionWrapper\"\n            charset=\"utf8mb4\"\n            logging=\"%kernel.debug%\"\n            platform-service=\"App\\DBAL\\MyDatabasePlatformService\"\n            server-version=\"8.0.37\">\n\n            <doctrine:option key=\"foo\">bar</doctrine:option>\n            <doctrine:mapping-type name=\"enum\">string</doctrine:mapping-type>\n            <doctrine:type name=\"custom\">App\\DBAL\\MyCustomType</doctrine:type>\n        </doctrine:dbal>\n    </doctrine:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Translation Parameters in YAML\nDESCRIPTION: Demonstrates how to configure global translation parameters in the YAML configuration file. These parameters can be used across multiple translation messages without repetition.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/translation.rst#2025-04-22_snippet_12\n\nLANGUAGE: YAML\nCODE:\n```\n# config/packages/translator.yaml\ntranslator:\n    # ...\n    globals:\n        # when using the '%' wrapping characters, you must escape them\n        '%%app_name%%': 'My application'\n        '{app_version}': '1.2.3'\n        '{url}': { message: 'url', parameters: { scheme: 'https://' }, domain: 'global' }\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML Sanitizer for Form Input\nDESCRIPTION: Shows how to enable HTML sanitization for form input in Symfony forms.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/html_sanitizer.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// src/Form/BlogPostType.php\nnamespace App\\Form;\n\n// ...\nclass BlogPostType extends AbstractType\n{\n    // ...\n\n    public function configureOptions(OptionsResolver $resolver): void\n    {\n        $resolver->setDefaults([\n            'sanitize_html' => true,\n            // use the \"sanitizer\" option to use a custom sanitizer (see below)\n            //'sanitizer' => 'app.post_sanitizer',\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Async Content with render_hinclude in Twig\nDESCRIPTION: Examples of using render_hinclude to asynchronously embed content from controllers or URLs using hinclude.js\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/templates.rst#2025-04-22_snippet_40\n\nLANGUAGE: twig\nCODE:\n```\n{{ render_hinclude(controller('...')) }}\n{{ render_hinclude(url('...')) }}\n```\n\n----------------------------------------\n\nTITLE: LocaleType Default Configuration in Symfony\nDESCRIPTION: Default configuration for the choices option in LocaleType, which uses Symfony's Locales component to provide a list of all available locales.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/locale.rst#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n\"choices\" => Symfony\\Component\\Intl\\Locales::getNames()\n```\n\n----------------------------------------\n\nTITLE: Streaming Response with Chunks\nDESCRIPTION: Shows how to stream response content using string chunks.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#2025-04-22_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\HttpFoundation\\StreamedResponse;\n\n$chunks = ['Hello', ' World'];\n\n$response = new StreamedResponse();\n$response->setChunks($chunks);\n$response->send();\n```\n\n----------------------------------------\n\nTITLE: Extracting Information from DOM Nodes\nDESCRIPTION: Demonstrates various methods for extracting information from DOM nodes, including getting attribute values, text content, and executing custom extraction logic using callbacks.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/testing/dom_crawler.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// returns the attribute value for the first node\n$crawler->attr('class');\n\n// returns the node value for the first node\n$crawler->text();\n\n// returns the default text if the node does not exist\n$crawler->text('Default text content');\n\n// pass TRUE as the second argument of text() to remove all extra white spaces, including\n// the internal ones (e.g. \"  foo\\n  bar    baz \\n \" is returned as \"foo bar baz\")\n$crawler->text(null, true);\n\n// extracts an array of attributes for all nodes\n// (_text returns the node value)\n// returns an array for each element in crawler,\n// each with the value and href\n$info = $crawler->extract(['_text', 'href']);\n\n// executes a lambda for each node and return an array of results\n$data = $crawler->each(function ($node, int $i): string {\n    return $node->attr('href');\n});\n```\n\n----------------------------------------\n\nTITLE: Excluding by Path Pattern with Symfony Finder in PHP\nDESCRIPTION: Shows how to exclude files or directories from the search results based on their path using the `notPath()` method. It accepts strings or regular expressions.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/finder.rst#2025-04-22_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n$finder->notPath('other/dir');\n```\n\n----------------------------------------\n\nTITLE: Configuring Stateless Authentication in Symfony Firewall (XML)\nDESCRIPTION: This XML configuration sets up a stateless firewall in Symfony. The stateless attribute is set to true on the firewall element, indicating that the session should not be used for authentication.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/security.rst#2025-04-22_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/security.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<srv:container xmlns=\"http://symfony.com/schema/dic/security\"\n    xmlns:srv=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/security\n        https://symfony.com/schema/dic/security/security-1.0.xsd\">\n\n    <config>\n        <firewall name=\"main\" stateless=\"true\">\n            <!-- ... -->\n        </firewall>\n    </config>\n</srv:container>\n```\n\n----------------------------------------\n\nTITLE: Initializing Formatter Helper in Symfony Console\nDESCRIPTION: Shows how to get the Formatter helper instance from the default helper set in a Symfony Console command.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/helpers/formatterhelper.rst#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$formatter = $this->getHelper('formatter');\n```\n\n----------------------------------------\n\nTITLE: Controlling Decorator Inner Name in PHP\nDESCRIPTION: Example showing how to customize the inner service name in PHP configuration using the second argument to the decorate() method, which allows explicit control over the reference name of the decorated service.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/service_decoration.rst#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nuse App\\DecoratingMailer;\nuse App\\Mailer;\n\nreturn function(ContainerConfigurator $container): void {\n    $services = $container->services();\n\n    $services->set(Mailer::class);\n\n    $services->set(DecoratingMailer::class)\n        ->decorate(Mailer::class, DecoratingMailer::class.'.wooz')\n        ->args([service(DecoratingMailer::class.'.wooz')]);\n};\n```\n\n----------------------------------------\n\nTITLE: Using logout_url() for Specific Firewalls in Twig\nDESCRIPTION: These examples show how to use `logout_url` with the `key` parameter to generate absolute logout URLs for the 'main' and 'othername' firewalls, resulting in URLs like 'http://example.org/logout' and 'http://example.org/other/logout'.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#2025-04-22_snippet_18\n\nLANGUAGE: twig\nCODE:\n```\n{{ logout_url(key = 'main') }}\n{# output: http://example.org/logout #}\n\n{{ logout_url(key = 'othername') }}\n{# output: http://example.org/other/logout #}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Mapping Types in PHP\nDESCRIPTION: PHP configuration for registering custom Doctrine mapping types\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine/dbal.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/doctrine.php\nuse App\\Type\\CustomFirst;\nuse App\\Type\\CustomSecond;\nuse Symfony\\Config\\DoctrineConfig;\n\nreturn static function (DoctrineConfig $doctrine): void {\n    $dbal = $doctrine->dbal();\n    $dbal->type('custom_first')->class(CustomFirst::class);\n    $dbal->type('custom_second')->class(CustomSecond::class);\n};\n```\n\n----------------------------------------\n\nTITLE: Targeted Value Resolver Implementation\nDESCRIPTION: Example of a value resolver that can be explicitly targeted using attributes\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/controller/value_resolver.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\ValueResolver;\n\nuse Symfony\\Component\\HttpKernel\\Attribute\\AsTargetedValueResolver;\nuse Symfony\\Component\\HttpKernel\\Controller\\ValueResolverInterface;\n\n#[AsTargetedValueResolver('booking_id')]\nclass BookingIdValueResolver implements ValueResolverInterface\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP Form Login with Query String in XML\nDESCRIPTION: Example of configuring advanced LDAP form login with query_string in XML format. Uses a query string to search for users within the specified DN structure and adds authentication credentials for the search operation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/ldap.rst#2025-04-22_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/security.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<srv:container xmlns=\"http://symfony.com/schema/dic/security\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:srv=\"http://symfony.com/schema/dic/services\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/security\n        https://symfony.com/schema/dic/security/security-1.0.xsd\">\n\n    <config>\n        <firewall name=\"main\">\n            <!-- ... -->\n            <form-login-ldap service=\"Symfony\\Component\\Ldap\\Ldap\"\n                dn-string=\"dc=example,dc=com\"\n                query-string=\"(&amp;(uid={user_identifier})(memberOf=cn=users,ou=Services,dc=example,dc=com))\"\n                search-dn=\"...\"\n                search-password=\"the-raw-password\"/>\n        </firewall>\n    </config>\n</srv:container>\n```\n\n----------------------------------------\n\nTITLE: Opening Windows Explorer to Certificate Location in WSL\nDESCRIPTION: Command to open Windows Explorer to the location of the certificate files when using Windows Subsystem for Linux.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/symfony_server.rst#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ explorer.exe `wslpath -w $HOME/.symfony5/certs`\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Lock Release in PHP\nDESCRIPTION: Shows how to prevent a lock from being automatically released when its associated `Lock` object is destroyed (e.g., at the end of script execution or when the variable goes out of scope). This is done by setting the third argument (`autoRelease`) of the `createLock()` method to `false`. The lock will then persist for its specified TTL (3600 seconds in this example) or until `release()` is explicitly called.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/lock.rst#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$lock = $factory->createLock(\n    'pdf-creation',\n    3600, // ttl\n    false // autoRelease\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom HTML Sanitizer in XML\nDESCRIPTION: Shows how to configure a custom HTML sanitizer in XML configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/html_sanitizer.rst#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/html_sanitizer.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <framework:config>\n        <framework:html-sanitizer>\n            <framework:sanitizer name=\"app.post_sanitizer\">\n                <framework:block-element name=\"h1\"/>\n            </framework:sanitizer>\n        </framework:html-sanitizer>\n    </framework:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Mercure Hub in PHP\nDESCRIPTION: PHP configuration for setting up Mercure hub with custom token provider in Symfony application.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mercure.rst#2025-04-22_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/mercure.php\nuse App\\Mercure\\MyJwtProvider;\n\n$container->loadFromExtension('mercure', [\n    'hubs' => [\n        'default' => [\n            'url' => 'https://mercure-hub.example.com/.well-known/mercure',\n            'jwt' => [\n                'provider' => MyJwtProvider::class,\n            ],\n        ],\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Custom Date Version Strategy Implementation\nDESCRIPTION: Example of implementing a custom version strategy that uses the current date for cache busting\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/asset.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Asset\\VersionStrategy\\VersionStrategyInterface;\n\nclass DateVersionStrategy implements VersionStrategyInterface\n{\n    private string $version;\n\n    public function __construct()\n    {\n        $this->version = date('Ymd');\n    }\n\n    public function getVersion(string $path): string\n    {\n        return $this->version;\n    }\n\n    public function applyVersion(string $path): string\n    {\n        return sprintf('%s?v=%s', $path, $this->getVersion($path));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Property Readability and Writability (Symfony, PHP)\nDESCRIPTION: Demonstrates how to check if a class property is readable or writable using isReadable and isWritable. Uses the extractor's rules (public property or getter/setter methods). Each call returns a boolean. Requires symfony/property-info.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/property_info.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$propertyInfo->isReadable($class, $property);\n// Example Result: bool(true)\n\n$propertyInfo->isWritable($class, $property);\n// Example Result: bool(false)\n```\n\n----------------------------------------\n\nTITLE: Configuring HtmlDumper Theme in PHP\nDESCRIPTION: Shows how to change the theme of HtmlDumper from the default dark theme to a light theme. This affects the visual styling of the HTML output.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/var_dumper.rst#2025-04-22_snippet_25\n\nLANGUAGE: PHP\nCODE:\n```\n$htmlDumper->setTheme('light');\n```\n\n----------------------------------------\n\nTITLE: Returning a Callable Application from Runtime Closure (PHP)\nDESCRIPTION: This PHP snippet shows that the main closure can return another `callable` which acts as the application itself. The Runtime component will execute this inner callable. The return value (e.g., exit code) is handled by the runtime.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/runtime.rst#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n// public/index.php\nrequire_once dirname(__DIR__).'/vendor/autoload_runtime.php';\n\nreturn static function (): callable {\n    $app = static function(): int {\n        echo 'Hello World';\n\n        return 0;\n    };\n\n    return $app;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Restart Threshold and Sleep Time\nDESCRIPTION: Configuration example showing how to set restart_threshold and restart_threshold_sleep options to control how many messages are sent before restarting the transport.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$dsn = 'smtps://smtp.example.com?restart_threshold=10&restart_threshold_sleep=1'\n```\n\n----------------------------------------\n\nTITLE: Configuring Composer Autoload for Multiple Test Namespaces\nDESCRIPTION: JSON configuration for Composer autoload-dev section that maps test namespaces to their respective directories. This setup enables proper autoloading for both shared tests and application-specific tests.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/multiple_kernels.rst#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"Shared\\\\Tests\\\\\": \"tests/\",\n            \"Api\\\\Tests\\\\\": \"apps/api/tests/\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Database Configuration Example in XML\nDESCRIPTION: Shows an XML configuration structure for database connection settings with equivalent settings to the YAML version.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/config/definition.rst#2025-04-22_snippet_28\n\nLANGUAGE: xml\nCODE:\n```\n<database>\n    <!-- driver: Required -->\n    <connection\n        driver=\"\"\n        host=\"localhost\"\n        username=\"\"\n        password=\"\"\n        memory=\"false\"\n    >\n\n        <!-- prototype -->\n        <!-- value: Required -->\n        <parameters\n            name=\"parameters name\"\n            value=\"\"\n        />\n\n    </connection>\n</database>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Compound Constraint in YAML\nDESCRIPTION: Shows how to apply the custom PasswordRequirements constraint to an entity property using YAML configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Compound.rst#2025-04-22_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\User:\n    properties:\n        plainPassword:\n            - App\\Validator\\Constraints\\PasswordRequirements: ~\n```\n\n----------------------------------------\n\nTITLE: Configuring ColorType Form with DataMapper\nDESCRIPTION: Form type configuration that adds form fields and sets up the custom data mapper with appropriate options.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/data_mappers.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Form\\Type;\n\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\IntegerType;\nuse Symfony\\Component\\Form\\FormBuilderInterface;\nuse Symfony\\Component\\OptionsResolver\\OptionsResolver;\n\nfinal class ColorType extends AbstractType implements DataMapperInterface\n{\n    public function buildForm(FormBuilderInterface $builder, array $options): void\n    {\n        $builder\n            ->add('red', IntegerType::class, [\n                'empty_data' => '0',\n            ])\n            ->add('green', IntegerType::class, [\n                'empty_data' => '0',\n            ])\n            ->add('blue', IntegerType::class, [\n                'empty_data' => '0',\n            ])\n            ->setDataMapper($this)\n        ;\n    }\n\n    public function configureOptions(OptionsResolver $resolver): void\n    {\n        $resolver->setDefault('empty_data', null);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Log Directory in Kernel (Symfony, PHP)\nDESCRIPTION: This example demonstrates how to override the log directory in Kernel (src/Kernel.php) by implementing getLogDir(). The per-environment log path is set as var/{environment}/log. Requires inheritance from BaseKernel and is important for isolating logs across environments.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/override_dir_structure.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// src/Kernel.php\\n\\n// ...\\nclass Kernel extends BaseKernel\\n{\\n    // ...\\n\\n    public function getLogDir(): string\\n    {\\n        return dirname(__DIR__).'/var/'.$this->environment.'/log';\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Symbolic Link Targets (PHP)\nDESCRIPTION: Demonstrates the `Filesystem::readlink` method, which reads the target of a symbolic link in a platform-independent way. With the second argument `false` (default), it returns the direct target. With `true`, it returns the absolute, fully resolved final target, resolving nested links.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/filesystem.rst#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n// returns the next direct target of the link without considering the existence of the target\n$filesystem->readlink('/path/to/link');\n\n// returns its absolute fully resolved final version of the target (if there are nested links, they are resolved)\n$filesystem->readlink('/path/to/link', true);\n```\n\n----------------------------------------\n\nTITLE: Handling Form Submission with Merged Payload in Symfony\nDESCRIPTION: This code snippet shows how to handle form submissions by merging JSON payload data (e.g., from React/Angular/Vue) with the request payload. This ensures all form fields are submitted correctly.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/direct_submit.rst#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\npublic function new(Request $request): Response\n{\n    // ...\n\n    if ($request->isMethod('POST')) {\n        // '$json' represents payload data sent by React/Angular/Vue\n        // the merge of parameters is needed to submit all form fields\n        $form->submit(array_merge($json, $request->getPayload()->all()));\n\n        // ...\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Date Label in DateTimeType Field\nDESCRIPTION: Example of setting a custom label for the date widget in a DateTimeType field.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/datetime.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\DateTimeType;\n\n$builder->add('startDateTime', DateTimeType::class, [\n    'date_label' => 'Starts On',\n]);\n```\n\n----------------------------------------\n\nTITLE: Setting Response Cookies\nDESCRIPTION: Demonstrates setting cookies using the HttpFoundation Cookie class.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#2025-04-22_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\HttpFoundation\\Cookie;\n\n$response->headers->setCookie(Cookie::create('foo', 'bar'));\n```\n\n----------------------------------------\n\nTITLE: Utilizing Isser/Hasser Methods with PropertyAccessor (PHP)\nDESCRIPTION: Explains that if a getter isn't found, `PropertyAccessor::getValue()` looks for isser (e.g., `isAuthor()`) or hasser (e.g., `hasChildren()`) methods based on the property path (`author`, `children`). These methods are typically used for boolean properties or checking existence.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/property_access.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// ...\nclass Person\n{\n    private bool $author = true;\n    private array $children = [];\n\n    public function isAuthor(): bool\n    {\n        return $this->author;\n    }\n\n    public function hasChildren(): bool\n    {\n        return 0 !== count($this->children);\n    }\n}\n\n$person = new Person();\n\nif ($propertyAccessor->getValue($person, 'author')) {\n    var_dump('This person is an author');\n}\nif ($propertyAccessor->getValue($person, 'children')) {\n    var_dump('This person has children');\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GreaterThan Constraint in YAML\nDESCRIPTION: Shows how to define the GreaterThan constraint using YAML configuration for validating a Person's siblings count and age.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/GreaterThan.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Person:\n    properties:\n        siblings:\n            - GreaterThan: 5\n        age:\n            - GreaterThan:\n                value: 18\n```\n\n----------------------------------------\n\nTITLE: Configuring Services with an Explicit Configurator Method in PHP\nDESCRIPTION: This PHP snippet demonstrates the configuration in `config/services.php`. It uses the `ContainerConfigurator` to define services. After loading services from `src/`, it explicitly defines `NewsletterManager` and `GreetingCardManager` services and calls the `configurator()` method on each. An array containing a service reference to `EmailConfigurator` (using the `service()` helper) and the method name 'configure' is passed to `configurator()`.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/configurators.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nuse App\\Mail\\EmailConfigurator;\nuse App\\Mail\\GreetingCardManager;\nuse App\\Mail\\NewsletterManager;\n\nreturn function(ContainerConfigurator $container): void {\n    $services = $container->services();\n\n    // Registers all 4 classes as services, including App\\Mail\\EmailConfigurator\n    $services->load('App\\\\', '../src/*');\n\n    // override the services to set the configurator\n    $services->set(NewsletterManager::class)\n        ->configurator([service(EmailConfigurator::class), 'configure']);\n\n    $services->set(GreetingCardManager::class)\n        ->configurator([service(EmailConfigurator::class), 'configure']);\n};\n```\n\n----------------------------------------\n\nTITLE: Using LessThan Constraint with Fixed Timezone in XML\nDESCRIPTION: Example of defining the LessThan constraint with a fixed timezone in XML configuration to validate date properties.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/LessThan.rst#2025-04-22_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\Person\">\n        <property name=\"dateOfBirth\">\n            <constraint name=\"LessThan\">today UTC</constraint>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Documenting empty_data Option in RST\nDESCRIPTION: This snippet shows how to document the empty_data option, including its default value behavior based on other field options.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/form.rst#2025-04-22_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\nThe actual default value of this option depends on other field options:\n\n* If ``data_class`` is set and ``required`` is ``true``, then ``new $data_class()``;\n* If ``data_class`` is set and ``required`` is ``false``, then ``null``;\n* If ``data_class`` is not set and ``compound`` is ``true``, then ``[]``\n  (empty array);\n* If ``data_class`` is not set and ``compound`` is ``false``, then ``''``\n  (empty string).\n```\n\n----------------------------------------\n\nTITLE: Configuring Notifier with PHP Configuration\nDESCRIPTION: PHP configuration for setting up Twilio as a texter transport in Symfony's Notifier component. This uses the environment variable defined in the .env file.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/notifier.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/notifier.php\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework): void {\n    $framework->notifier()\n        ->texterTransport('twilio', env('TWILIO_DSN'))\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Casting Secret Environment Variable to String in Symfony with XML Configuration\nDESCRIPTION: Shows how to explicitly set a secret environment variable and cast it to a string in the XML configuration for Symfony. Requires correct XML namespaces, a parameter env(SECRET), and XML schema adherence. The secret parameter is injected into the framework configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/env_var_processors.rst#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\\n<container xmlns=\\\"http://symfony.com/schema/dic/services\\\"\\n    xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n    xmlns:framework=\\\"http://symfony.com/schema/dic/symfony\\\"\\n    xsi:schemaLocation=\\\"http://symfony.com/schema/dic/services\\n        https://symfony.com/schema/dic/services/services-1.0.xsd\\n        http://symfony.com/schema/dic/symfony\\n        https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\\\">\\n\\n    <parameters>\\n        <parameter key=\\\"env(SECRET)\\\">some_secret</parameter>\\n    </parameters>\\n\\n    <framework:config secret=\\\"%env(string:SECRET)%\\\"/>\\n</container>\\n\n```\n\n----------------------------------------\n\nTITLE: Using selectedchoice Test with Form Options in Twig\nDESCRIPTION: Shows how to conditionally add the 'selected' attribute to an option element by checking if the current choice matches a selected value using the selectedchoice test.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/form_customization.rst#2025-04-22_snippet_10\n\nLANGUAGE: html+twig\nCODE:\n```\n<option {% if choice is selectedchoice(value) %}selected=\"selected\"{% endif %}>\n```\n\n----------------------------------------\n\nTITLE: Using Relative Paths in CSS Files\nDESCRIPTION: Example of using relative paths in CSS to reference other assets like images, which AssetMapper will automatically version.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/asset_mapper.rst#2025-04-22_snippet_26\n\nLANGUAGE: css\nCODE:\n```\n/* assets/styles/app.css */\n.quack {\n    /* file lives at assets/images/duck.png */\n    background-image: url('../images/duck.png');\n}\n```\n\n----------------------------------------\n\nTITLE: Type Patching for Open Source Libraries - Step 1\nDESCRIPTION: Commands for the first phase of adding type declarations to open source packages, focusing on safe additions and PHPDoc annotations.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/upgrade_major.rst#2025-04-22_snippet_10\n\nLANGUAGE: terminal\nCODE:\n```\n# Add type declarations to all internal, final, tests and private methods.\n# Update the \"php\" parameter to match your minimum required PHP version\n$ SYMFONY_PATCH_TYPE_DECLARATIONS=\"force=1&php=7.4\" ./vendor/bin/patch-type-declarations\n\n# Add PHPDoc to the leftover public and protected methods\n$ SYMFONY_PATCH_TYPE_DECLARATIONS=\"force=phpdoc&php=7.4\" ./vendor/bin/patch-type-declarations\n```\n\n----------------------------------------\n\nTITLE: Parameter Trimming Configuration in XML\nDESCRIPTION: Shows how to configure parameter values with and without trimming leading/trailing whitespace in XML configuration format.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration.rst#2025-04-22_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<parameter key=\"app.admin_email\">\n    something@example.com\n</parameter>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<parameter key=\"app.admin_email\" trim=\"true\">\n    something@example.com\n</parameter>\n```\n\n----------------------------------------\n\nTITLE: Configuring UniqueEntity Constraint with XML in Symfony\nDESCRIPTION: Example of applying the UniqueEntity constraint using XML configuration to ensure a unique email field on a User entity. This approach uses external validation configuration files.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/UniqueEntity.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\User\">\n        <constraint name=\"Symfony\\Bridge\\Doctrine\\Validator\\Constraints\\UniqueEntity\">\n            <option name=\"fields\">email</option>\n        </constraint>\n        <property name=\"email\">\n            <constraint name=\"Email\"/>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: English Translation File Example (YAML)\nDESCRIPTION: Example of an empty English translation file using YAML format for Symfony translations.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/translation.rst#2025-04-22_snippet_42\n\nLANGUAGE: yaml\nCODE:\n```\n# translations/messages.en.yaml\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Twig File Name Pattern in PHP\nDESCRIPTION: Illustrates how to set the file_name_pattern option in PHP to specify which files should be treated as Twig templates.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/twig.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/twig.php\nuse Symfony\\Config\\TwigConfig;\n\nreturn static function (TwigConfig $twig): void {\n    $twig->fileNamePattern([\n        '*.twig',\n        'specific_file.html',\n    ]);\n\n    // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Example Symfony Generated Login Link URL Structure\nDESCRIPTION: Provides an example of a generated Symfony login link URL. It highlights the key query parameters: `user` (the user identifier), `expires` (a UNIX timestamp indicating expiration), and `hash` (a security hash calculated from expires, user identifier, and configured signature properties).\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/login_link.rst#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nhttp://example.com/login_check?user=user@example.com&expires=1675707377&hash=f0Jbda56Y...A5sUCI~TQF701fwJ...7m2n4A~\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Access Decision Strategy in XML\nDESCRIPTION: Configuration for using a custom access decision strategy service in XML format. The custom service must implement AccessDecisionStrategyInterface.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/voters.rst#2025-04-22_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/security.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<srv:container xmlns=\"http://symfony.com/schema/dic/security\"\n    xmlns:srv=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\"\n>\n\n    <config>\n        <access-decision-manager\n            strategy-service=\"App\\Security\\MyCustomAccessDecisionStrategy\"/>\n    </config>\n</srv:container>\n```\n\n----------------------------------------\n\nTITLE: Implementing Date Validation Using PHP Code\nDESCRIPTION: Example showing how to configure Date validation using PHP code with ClassMetadata in a Symfony entity.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Date.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Author.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Author\n{\n   /**\n    * @var string A \"Y-m-d\" formatted value\n    */\n    protected string $birthday;\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('birthday', new Assert\\Date());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: PHPUnit Configuration with SymfonyTestsListener\nDESCRIPTION: XML configuration for PHPUnit to enable the Symfony tests listener for time-sensitive tests.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/phpunit_bridge.rst#2025-04-22_snippet_22\n\nLANGUAGE: xml\nCODE:\n```\n<!-- phpunit.xml.dist -->\n<!-- ... -->\n<listeners>\n    <listener class=\"\\Symfony\\Bridge\\PhpUnit\\SymfonyTestsListener\"/>\n</listeners>\n```\n\n----------------------------------------\n\nTITLE: Clearing Cache and Debugging AssetMap in Symfony\nDESCRIPTION: This snippet shows terminal commands to clear the Symfony cache and debug the asset map, which can help identify invalid asset imports.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/asset_mapper.rst#2025-04-22_snippet_31\n\nLANGUAGE: terminal\nCODE:\n```\n$ php bin/console cache:clear\n$ php bin/console debug:asset-map\n```\n\n----------------------------------------\n\nTITLE: Configuring access_control Matching Rules in PHP\nDESCRIPTION: Defines security access control rules programmatically in `config/packages/security.php` using the `SecurityConfig` object. This example mirrors the YAML and XML configurations, utilizing fluent methods like `path()`, `roles()`, `ips()`, `port()`, `host()`, `methods()`, `env()` for environment variables, `requestMatcher()`, `attributes()`, and `route()` to set up matching criteria. The configuration follows the 'first match wins' principle.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/access_control.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/security.php\nuse Symfony\\Component\\DependencyInjection\\ContainerBuilder;\nuse Symfony\\Config\\SecurityConfig;\n\nreturn static function (ContainerBuilder $container, SecurityConfig $security): void {\n    $container->setParameter('env(TRUSTED_IPS)', '10.0.0.1, 10.0.0.2');\n    // ...\n\n    $security->accessControl()\n        ->path('^/admin')\n        ->roles(['ROLE_USER_PORT'])\n        ->ips(['127.0.0.1'])\n        ->port(8080)\n    ;\n    $security->accessControl()\n        ->path('^/admin')\n        ->roles(['ROLE_USER_IP'])\n        ->ips(['127.0.0.1'])\n    ;\n    $security->accessControl()\n        ->path('^/admin')\n        ->roles(['ROLE_USER_HOST'])\n        ->host('symfony\\.com$')\n    ;\n    $security->accessControl()\n        ->path('^/admin')\n        ->roles(['ROLE_USER_METHOD'])\n        ->methods(['POST', 'PUT'])\n    ;\n    // ips can be comma-separated, which is especially useful when using env variables\n    $security->accessControl()\n        ->path('^/admin')\n        ->roles(['ROLE_USER_IP'])\n        ->ips([env('TRUSTED_IPS')])\n    ;\n    $security->accessControl()\n        ->path('^/admin')\n        ->roles(['ROLE_USER_IP'])\n        ->ips(['127.0.0.1', '::1', env('TRUSTED_IPS')])\n    ;\n\n    // for custom matching needs, use a request matcher service\n    $security->accessControl()\n        ->roles(['ROLE_USER'])\n        ->requestMatcher('App\\Security\\RequestMatcher\\MyRequestMatcher')\n    ;\n\n    // require ROLE_ADMIN for 'admin' route. You can use the shortcut route('xxx') method,\n    // instead of attributes(['_route' => 'xxx']) method\n    $security->accessControl()\n        ->roles(['ROLE_ADMIN'])\n        ->attributes(['_route' => 'admin'])\n    ;\n    $security->accessControl()\n        ->roles(['ROLE_ADMIN'])\n        ->route('admin')\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Routes with XML in Symfony\nDESCRIPTION: Example of defining routes using XML configuration in Symfony.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/templates.rst#2025-04-22_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/routes.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<routes xmlns=\"http://symfony.com/schema/routing\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/routing\n        https://symfony.com/schema/routing/routing-1.0.xsd\">\n\n    <route id=\"blog_index\"\n        path=\"/\"\n        controller=\"App\\Controller\\BlogController::index\"/>\n\n    <route id=\"blog_post\"\n        path=\"/article/{slug}\"\n        controller=\"App\\Controller\\BlogController::show\"/>\n</routes>\n```\n\n----------------------------------------\n\nTITLE: Disabling TLS Peer Verification in PHP\nDESCRIPTION: Example of disabling TLS peer verification for SMTP transport by setting the verify_peer option to 0. This might be needed during development or when using self-signed certificates.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$dsn = 'smtp://user:pass@smtp.example.com?verify_peer=0';\n```\n\n----------------------------------------\n\nTITLE: Setting Default Locale in Symfony Configuration\nDESCRIPTION: Examples of setting the default locale in Symfony configuration using YAML and XML formats.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/translation.rst#2025-04-22_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/translation.yaml\nframework:\n    default_locale: en\n```\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/translation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n\n```\n\n----------------------------------------\n\nTITLE: Creating a New Symfony Project with Unreleased Version Using Composer (Terminal Commands)\nDESCRIPTION: This terminal command initializes a new Symfony project with the latest, possibly unstable, version by using the Composer package manager with the '-s dev' option. Requires Composer to be installed; expects the user to run the command from a terminal prompt with write permissions. The 'my_project' argument specifies the target directory for the new Symfony skeleton project. On completion, the project will reside in 'my_project/'.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/unstable_versions.rst#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n# Download the absolute latest commit\\n$ composer create-project symfony/skeleton my_project -s dev\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Public Service from the Container in PHP\nDESCRIPTION: Demonstrates how to retrieve a public service (e.g., 'doctrine') directly from the Symfony Dependency Injection container using the `get()` method. This direct access is only possible for services explicitly marked as public.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/alias_private.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// only public services can be accessed in this way\n$doctrine = $container->get('doctrine');\n```\n\n----------------------------------------\n\nTITLE: Named Password Hasher Configuration in PHP\nDESCRIPTION: PHP configuration for setting up a named password hasher with auto algorithm and custom cost.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/passwords.rst#2025-04-22_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/security.php\nuse Symfony\\Config\\SecurityConfig;\n\nreturn static function (SecurityConfig $security): void {\n    // ...\n    $security->passwordHasher('harsh')\n        ->algorithm('auto')\n        ->cost(15)\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Overriding Service Definitions in PHP\nDESCRIPTION: Example showing how service definitions are replaced when overriding in PHP configuration. When the same service ID is defined twice, the original definition is lost and completely replaced.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/service_decoration.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nuse App\\Mailer;\nuse App\\NewMailer;\n\nreturn function(ContainerConfigurator $container): void {\n    $services = $container->services();\n\n    $services->set(Mailer::class);\n\n    // this replaces the old App\\Mailer definition with the new one, the\n    // old definition is lost\n    $services->set(Mailer::class, NewMailer::class);\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Serializer Normalizers in XML\nDESCRIPTION: Demonstrates how to configure custom normalizers for specific named serializers in XML, with various options for targeting specific or all serializers.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer.rst#2025-04-22_snippet_47\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <!-- ... -->\n\n        <!-- prevent this normalizer from being automatically added to the default serializer -->\n        <service\n            id=\"Symfony\\Component\\Serializer\\Normalizer\\CustomNormalizer\"\n            autoconfigure=\"false\"\n        >\n            <!-- add this normalizer only to a specific named serializer -->\n            <tag name=\"serializer.normalizer\" serializer=\"api_client1\"/>\n\n            <!-- add this normalizer to several named serializers -->\n            <tag name=\"serializer.normalizer\" serializer=\"api_client1\"/>\n            <tag name=\"serializer.normalizer\" serializer=\"api_client2\"/>\n\n            <!-- add this normalizer to all serializers, including the default one -->\n            <tag name=\"serializer.normalizer\" serializer=\"*\"/>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Defining Unique Constraint in XML Configuration\nDESCRIPTION: XML configuration for applying the Unique constraint to an entity property.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Unique.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\Person\">\n        <property name=\"contactEmails\">\n            <constraint name=\"Unique\"/>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Configuring Failover and Round-Robin Transports in YAML\nDESCRIPTION: Example of setting up failover and round-robin transport configurations for the Notifier component using YAML.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/notifier.rst#2025-04-22_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/notifier.yaml\nframework:\n    notifier:\n        chatter_transports:\n            # Send notifications to Slack and use Telegram if\n            # Slack errored\n            main: '%env(SLACK_DSN)% || %env(TELEGRAM_DSN)%'\n\n            # Send notifications to the next scheduled transport calculated by round robin\n            roundrobin: '%env(SLACK_DSN)% && %env(TELEGRAM_DSN)%'\n```\n\n----------------------------------------\n\nTITLE: Using asset() Function in Twig Templates\nDESCRIPTION: Demonstrates how to use the asset() Twig function to link to static assets like images, CSS, and JavaScript files.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/templates.rst#2025-04-22_snippet_13\n\nLANGUAGE: html+twig\nCODE:\n```\n{# the image lives at \"public/images/logo.png\" #}\n<img src=\"{{ asset('images/logo.png') }}\" alt=\"Symfony!\"/>\n\n{# the CSS file lives at \"public/css/blog.css\" #}\n<link href=\"{{ asset('css/blog.css') }}\" rel=\"stylesheet\"/>\n\n{# the JS file lives at \"public/bundles/acme/js/loader.js\" #}\n<script src=\"{{ asset('bundles/acme/js/loader.js') }}\"></script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Fragment Listener in XML\nDESCRIPTION: XML configuration to enable the fragment listener required for handling ESI controller references.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/http_cache/esi.rst#2025-04-22_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/framework.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony\n        https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <!-- ... -->\n    <framework:config>\n        <framework:fragment path=\"/_fragment\"/>\n    </framework:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Setting Local Domain for HELO Command\nDESCRIPTION: Configuration example for setting the local_domain option, which defines the domain name to use in the SMTP HELO command.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$dsn = 'smtps://smtp.example.com?local_domain=example.org'\n```\n\n----------------------------------------\n\nTITLE: Configuring Valid URL Protocols with XML in Symfony\nDESCRIPTION: XML configuration example for specifying custom protocols in URL validation, allowing HTTP, HTTPS, and FTP protocols.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Url.rst#2025-04-22_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\Author\">\n        <property name=\"bioUrl\">\n            <constraint name=\"Url\">\n                <option name=\"protocols\">\n                    <value>http</value>\n                    <value>https</value>\n                    <value>ftp</value>\n                </option>\n            </constraint>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Counting and Iterating Service Locator with ServiceCollectionInterface\nDESCRIPTION: Example showing how to use ServiceCollectionInterface to count and iterate through services in a service locator.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/service_subscribers_locators.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// ...\n$numberOfHandlers = count($this->locator);\n$nameOfHandlers = array_keys($this->locator->getProvidedServices());\n\n// you can iterate through all services of the locator\nforeach ($this->locator as $serviceId => $service) {\n    // do something with the service, the service id or both\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Environment Variable Processors in PHP\nDESCRIPTION: Illustrates how to combine multiple environment variable processors in a PHP configuration file to process a complex value.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/env_var_processors.rst#2025-04-22_snippet_46\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/framework.php\n$container->setParameter('env(AUTH_FILE)', '%kernel.project_dir%/config/auth.json');\n$container->loadFromExtension('google', [\n    'auth' => '%env(json:file:resolve:AUTH_FILE)%',\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Enabled Locales in Symfony Framework (YAML)\nDESCRIPTION: This YAML snippet sets the available locales (here, English and Spanish) for a Symfony application. The 'enabled_locales' option restricts which locale values are permitted in the '_locale' routing parameter, helping to guarantee consistent localization support and preventing unsupported locales from being used. Requires Symfony's framework bundle to be installed and expects an array of locale string identifiers.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/translation.yaml\\nframework:\\n    enabled_locales: ['en', 'es']\n```\n\n----------------------------------------\n\nTITLE: Extending Parent Service Subscriber in Controller\nDESCRIPTION: Example showing how to extend AbstractController and add additional subscribed services.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/service_subscribers_locators.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\n\nclass MyController extends AbstractController\n{\n    public static function getSubscribedServices(): array\n    {\n        return array_merge(parent::getSubscribedServices(), [\n            // ...\n            'logger' => LoggerInterface::class,\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Composer Dependencies to Unreleased Symfony Versions (JSON Diff Configuration)\nDESCRIPTION: This snippet shows the modifications needed in the 'composer.json' file to require Symfony 6.0 (unreleased) and allow beta packages via 'minimum-stability'. It updates 'symfony/framework-bundle' and 'symfony/finder' requirements and sets 'minimum-stability' to 'beta'. This configuration enables the installation of Symfony pre-releases and must be followed by running 'composer update' to sync dependencies.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/unstable_versions.rst#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\n    \\\"require\\\": {\\n+         \\\"symfony/framework-bundle\\\": \\\"^6.0\\\",\\n+         \\\"symfony/finder\\\": \\\"^6.0\\\",\\n          \\\"...\\\": \\\"...\\\"\\n      },\\n+     \\\"minimum-stability\\\": \\\"beta\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Entity User Provider with Doctrine in Symfony (YAML)\nDESCRIPTION: This YAML snippet defines a Symfony entity user provider that loads user data from a Doctrine-managed database entity, typically using the email field for user identification. It requires the App\\Entity\\User entity class and may optionally specify a Doctrine entity manager using manager_name. To use this configuration, place it under config/packages/security.yaml and ensure Doctrine is set up; the provider will use the specified property to look up users.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/user_providers.rst#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\\nsecurity:\\n    providers:\\n        users:\\n            entity:\\n                # the class of the entity that represents users\\n                class: 'App\\Entity\\User'\\n                # the property to query by - e.g. email, username, etc\\n                property: 'email'\\n\\n                # optional: if you're using multiple Doctrine entity\\n                # managers, this option defines which one to use\\n                #manager_name: 'customer'\\n\\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Custom switch_user Parameter: Using X-Switch-User Header (YAML)\nDESCRIPTION: Configures the firewall to use a custom HTTP header (X-Switch-User) instead of the default _switch_user URL parameter for impersonation. Adjusted via the YAML configuration with the 'parameter' setting under switch_user. Dependencies: Symfony security bundle, server must pass custom headers. The impersonation request should carry the X-Switch-User header.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/impersonating_user.rst#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\\nsecurity:\\n    # ...\\n    firewalls:\\n        main:\\n            # ...\\n            switch_user: { parameter: X-Switch-User }\n```\n\n----------------------------------------\n\nTITLE: Range Validation Configuration in XML\nDESCRIPTION: XML configuration for range validation defining minimum and maximum values with custom error message.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Range.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\Participant\">\n        <property name=\"height\">\n            <constraint name=\"Range\">\n                <option name=\"min\">120</option>\n                <option name=\"max\">180</option>\n                <option name=\"notInRangeMessage\">You must be between {{ min }}cm and {{ max }}cm tall to enter</option>\n            </constraint>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP Form Login with Query String in PHP\nDESCRIPTION: Example of configuring advanced LDAP form login with query_string in PHP format. Uses a query string to search for users within the specified DN structure and adds authentication credentials for the search operation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/ldap.rst#2025-04-22_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/security.php\nuse Symfony\\Component\\Ldap\\Ldap;\nuse Symfony\\Config\\SecurityConfig;\n\nreturn static function (SecurityConfig $security): void {\n    $security->firewall('main')\n        ->stateless(true)\n        ->formLoginLdap()\n            ->service(Ldap::class)\n            ->dnString('dc=example,dc=com')\n            ->queryString('(&(uid={user_identifier})(memberOf=cn=users,ou=Services,dc=example,dc=com))')\n            ->searchDn('...')\n            ->searchPassword('the-raw-password')\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Validation Groups with PHP Methods\nDESCRIPTION: PHP implementation showing how to define validation constraints using the loadValidatorMetadata method. Demonstrates programmatic configuration of validation rules with groups.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/validation/groups.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/User.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass User\n{\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('email', new Assert\\Email(\n            groups: ['registration'],\n        ));\n\n        $metadata->addPropertyConstraint('password', new Assert\\NotBlank(\n            groups: ['registration'],\n        ));\n        $metadata->addPropertyConstraint('password', new Assert\\Length(\n            min: 7,\n            groups: ['registration'],\n        ));\n\n        $metadata->addPropertyConstraint('city', new Assert\\Length(\n            min: 2,\n        ));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Importmap Package Updates\nDESCRIPTION: Terminal commands to check for outdated packages and update them to their latest versions.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/asset_mapper.rst#2025-04-22_snippet_13\n\nLANGUAGE: terminal\nCODE:\n```\n# lists outdated packages and shows their latest versions\n$ php bin/console importmap:outdated\n# updates all the outdated packages\n$ php bin/console importmap:update\n\n# you can also run the commands only for the given list of packages\n$ php bin/console importmap:update bootstrap lodash\n$ php bin/console importmap:outdated bootstrap lodash\n```\n\n----------------------------------------\n\nTITLE: Resolving URIs with Symfony DomCrawler's UriResolver in PHP\nDESCRIPTION: Demonstrates how to use the UriResolver class to convert relative, absolute, or fragment URIs into absolute URIs against a base URI.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/dom_crawler.rst#2025-04-22_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\DomCrawler\\UriResolver;\n\nUriResolver::resolve('/foo', 'http://localhost/bar/foo/'); // http://localhost/foo\nUriResolver::resolve('?a=b', 'http://localhost/bar#foo'); // http://localhost/bar?a=b\nUriResolver::resolve('../../', 'http://localhost/'); // http://localhost/\n```\n\n----------------------------------------\n\nTITLE: Installing Packages and Associated Recipes with Composer Update\nDESCRIPTION: Shows the standard `composer update` command. When executed after configuring a private recipe endpoint and adding corresponding private packages to `composer.json`, this command resolves dependencies, installs or updates packages, and automatically applies any available recipes (both public and private) associated with those packages.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/flex_private_recipes.rst#2025-04-22_snippet_10\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer update\n```\n\n----------------------------------------\n\nTITLE: Configuring Script Attributes for ImportMap in YAML\nDESCRIPTION: Shows how to configure attributes that will be added to script tags rendered by the importmap() Twig function.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/asset_mapper.rst#2025-04-22_snippet_42\n\nLANGUAGE: yaml\nCODE:\n```\nframework:\n    asset_mapper:\n        importmap_script_attributes:\n            crossorigin: 'anonymous'\n```\n\n----------------------------------------\n\nTITLE: Using Expressions in Service Factory Definitions - Symfony XML - xml\nDESCRIPTION: Demonstrates using expression-based factories in Symfony XML configuration to conditionally instantiate services and retrieve arguments. Requires the appropriate parameter and service definitions, as well as the expression evaluation feature enabled in Symfony. Includes comments explaining the logic.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/factories.rst#2025-04-22_snippet_20\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"App\\Email\\NewsletterManagerInterface\">\n            <!-- use the \"tracable_newsletter\" service when debug is enabled, \"newsletter\" otherwise -->\n            <factory expression=\"parameter('kernel.debug') ? service('tracable_newsletter') : service('newsletter')\"/>\n        </service>\n\n        <!-- you can use the arg() function to retrieve an argument from the definition -->\n        <service id=\"App\\Email\\NewsletterManagerInterface\">\n            <factory expression=\"arg(0).createNewsletterManager() ?: service(\\\"default_newsletter_manager\\\")\"/>\n            <argument type=\"service\" id=\"App\\Email\\NewsletterManagerFactory\"/>\n        </service>\n    </services>\n</container>\n\n```\n\n----------------------------------------\n\nTITLE: Resulting Expires Header Format\nDESCRIPTION: Displays the format of the resulting Expires header after setting it to expire 600 seconds in the future.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/http_cache/expiration.rst#2025-04-22_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nExpires: Thu, 01 Mar 2011 16:00:00 GMT\n```\n\n----------------------------------------\n\nTITLE: Creating PostCSS Configuration File\nDESCRIPTION: This JavaScript code creates a postcss.config.js file at the project root, configuring PostCSS plugins like autoprefixer.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/postcss.rst#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n    plugins: {\n        // include whatever plugins you want\n        // but make sure you install these via npm!\n\n        // add browserslist config to package.json (see below)\n        autoprefixer: {}\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Property-Level Serialization Context with XML in Symfony\nDESCRIPTION: This XML snippet configures the context for the createdAt property of the App\\Model\\Person class, setting the datetime_format to 'Y-m-d'. Used in config/serializer/person.xml, this leverages Symfony's serializer-mapping XML schema and must adhere to the specified schema URLs.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer.rst#2025-04-22_snippet_17\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/serializer/person.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<serializer xmlns=\"http://symfony.com/schema/dic/serializer-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/serializer-mapping\n        https://symfony.com/schema/dic/serializer-mapping/serializer-mapping-1.0.xsd\"\n>\n    <class name=\"App\\Model\\Person\">\n        <attribute name=\"createdAt\">\n            <context>\n                <entry name=\"datetime_format\">Y-m-d</entry>\n            </context>\n        </attribute>\n    </class>\n</serializer>\n```\n\n----------------------------------------\n\nTITLE: Configuring Immutable-setter Injection in Service Container (XML)\nDESCRIPTION: XML configuration for immutable-setter injection with returns-clone attribute to handle the cloned instance.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/injection_types.rst#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"https://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <!-- ... -->\n\n        <service id=\"app.newsletter_manager\" class=\"App\\Mail\\NewsletterManager\">\n            <call method=\"withMailer\" returns-clone=\"true\">\n                <argument type=\"service\" id=\"mailer\"/>\n            </call>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony Yaml Component via Composer\nDESCRIPTION: This command uses Composer, the PHP dependency manager, to download and install the Symfony Yaml component into your project. This is the standard way to add the component as a project dependency.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/yaml.rst#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require symfony/yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Elements - XML\nDESCRIPTION: XML configuration for allowing specific HTML elements with their attributes.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/html_sanitizer.rst#2025-04-22_snippet_15\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n    <framework:config>\n        <framework:html-sanitizer>\n            <framework:sanitizer name=\"app.post_sanitizer\">\n                <framework:allow-element name=\"article\">\n                    <framework:attribute>class</framework:attribute>\n                    <framework:attribute>data-attr</framework:attribute>\n                </framework:allow-element>\n                <framework:allow-element name=\"img\">\n                    <framework:attribute>src</framework:attribute>\n                </framework:allow-element>\n                <framework:allow-element name=\"img\">\n                    <framework:attribute>*</framework:attribute>\n                </framework:allow-element>\n            </framework:sanitizer>\n        </framework:html-sanitizer>\n    </framework:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Bootstrap 5 Form Theme in YAML\nDESCRIPTION: YAML configuration to apply Bootstrap 5 form theme globally in a Symfony application\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/bootstrap5.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/twig.yaml\ntwig:\n    form_themes: ['bootstrap_5_layout.html.twig']\n```\n\n----------------------------------------\n\nTITLE: Configuring Lock Resources using XML in Symfony\nDESCRIPTION: This XML configuration defines lock resources for 'invoice' and 'report' using semaphore and Redis. It demonstrates how to set up multiple resources for a single lock name.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/lock.rst#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/lock.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <framework:config>\n        <framework:lock>\n            <framework:resource name=\"invoice\">semaphore</framework:resource>\n            <framework:resource name=\"invoice\">redis://r2.docker</framework:resource>\n            <framework:resource name=\"report\">semaphore</framework:resource>\n        </framework:lock>\n    </framework:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS Channel Requirement in YAML\nDESCRIPTION: Defines access control rule requiring HTTPS channel for cart checkout using YAML configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/access_control.rst#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\nsecurity:\n    # ...\n    access_control:\n        - { path: ^/cart/checkout, roles: PUBLIC_ACCESS, requires_channel: https }\n```\n\n----------------------------------------\n\nTITLE: Finding Files by Size Range with Symfony Finder in PHP\nDESCRIPTION: Demonstrates two ways to specify a size range for file searching: either by chaining multiple calls to the `size()` method with different comparison operators or by passing an array of size constraints to a single `size()` call.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/finder.rst#2025-04-22_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n$finder->files()->size('>= 1K')->size('<= 2K');\n```\n\nLANGUAGE: php\nCODE:\n```\n// same as above\n$finder->files()->size(['>= 1K', '<= 2K']);\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Compound Constraint in XML\nDESCRIPTION: Illustrates how to apply the custom PasswordRequirements constraint to an entity property using XML configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Compound.rst#2025-04-22_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\User\">\n        <property name=\"plainPassword\">\n            <constraint name=\"App\\Validator\\Constraints\\PasswordRequirements\"/>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Installing Importmap Dependencies\nDESCRIPTION: Terminal command to download and install all packages defined in the importmap configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/asset_mapper.rst#2025-04-22_snippet_12\n\nLANGUAGE: terminal\nCODE:\n```\n$ php bin/console importmap:install\n```\n\n----------------------------------------\n\nTITLE: Configuring Twig Form Themes in PHP\nDESCRIPTION: Shows how to set form themes for all forms in the application using PHP configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/twig.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/twig.php\nuse Symfony\\Config\\TwigConfig;\n\nreturn static function (TwigConfig $twig): void {\n    $twig->formThemes([\n        'bootstrap_5_layout.html.twig',\n        'form/my_theme.html.twig',\n    ]);\n\n    // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Getting Timezone Information with Symfony Intl\nDESCRIPTION: Example showing how to get timezone names using the Timezones class. It demonstrates retrieving all timezone names in the default locale (English) and getting a specific timezone name.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/intl.rst#2025-04-22_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Intl\\Timezones;\n\n\\Locale::setDefault('en');\n\n$timezones = Timezones::getNames();\n// ('timezoneID' => 'timezoneValue')\n// => ['America/Eirunepe' => 'Acre Time (Eirunepe)', 'America/Rio_Branco' => 'Acre Time (Rio Branco)', ...]\n\n$timezone = Timezones::getName('Africa/Nairobi');\n// => 'East Africa Time (Nairobi)'\n```\n\n----------------------------------------\n\nTITLE: Cloning Symfony Fork and Adding Upstream Remote - Terminal\nDESCRIPTION: This set of terminal commands clones a user's fork of the Symfony repository and configures the official Symfony repository as the 'upstream' remote. Dependencies: a GitHub account, fork of Symfony, and Git installed. The 'git clone' command downloads the repository, and 'git remote add' sets up the upstream reference for future synchronization. Replace USERNAME with the actual GitHub username.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/contributing/code/pull_requests.rst#2025-04-22_snippet_2\n\nLANGUAGE: terminal\nCODE:\n```\n$ git clone git@github.com:USERNAME/symfony.git\n$ cd symfony\n$ git remote add upstream https://github.com/symfony/symfony.git\n```\n\n----------------------------------------\n\nTITLE: Configuring Immutable-setter Injection in Service Container (YAML)\nDESCRIPTION: YAML configuration for immutable-setter injection using the returns_clone feature to preserve immutability.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/injection_types.rst#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nservices:\n    # ...\n\n    app.newsletter_manager:\n        class: App\\Mail\\NewsletterManager\n        calls:\n            - withMailer: !returns_clone ['@mailer']\n```\n\n----------------------------------------\n\nTITLE: Enabling Auto Mapping with XML Configuration in Symfony\nDESCRIPTION: Example of using the EnableAutoMapping constraint in an XML configuration file to enable Doctrine's auto mapping for validation on the BookCollection entity.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/EnableAutoMapping.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\BookCollection\">\n        <constraint name=\"EnableAutoMapping\"/>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Documenting allow_extra_fields Option in RST\nDESCRIPTION: This snippet demonstrates how to document a specific form option (allow_extra_fields) in RST format, including its type, default value, and description.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/form.rst#2025-04-22_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n``allow_extra_fields``\n~~~~~~~~~~~~~~~~~~~~~~\n\n**type**: ``boolean`` **default**: ``false``\n\nUsually, if you submit extra fields that aren't configured in your form,\nyou'll get a \"This form should not contain extra fields.\" validation error.\n\nYou can silence this validation error by enabling the ``allow_extra_fields``\noption on the form.\n```\n\n----------------------------------------\n\nTITLE: Configuring Symfony Service with Property Injection (XML)\nDESCRIPTION: This XML configuration defines a service with the ID `app.newsletter_manager` for the class `App\\Mail\\NewsletterManager`. It uses the `<property>` tag to inject the service with the ID `mailer` into the public property named `mailer` of the `app.newsletter_manager` service instance.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/injection_types.rst#2025-04-22_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <!-- ... -->\n\n        <service id=\"app.newsletter_manager\" class=\"App\\Mail\\NewsletterManager\">\n            <property name=\"mailer\" type=\"service\" id=\"mailer\"/>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Login Parameters in Symfony Security Firewall (PHP)\nDESCRIPTION: This PHP configuration, suitable for Symfony 5.1+ with PHP config support, customizes login and failure parameters in a firewall using method calls on a SecurityConfig object. The chained 'targetPathParameter' and 'failurePathParameter' methods define the expected parameter names. Requires Symfony's PHP config loader and proper use statements. Inputs: parameter names; Outputs: altered login behavior.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/form_login.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/security.php\nuse Symfony\\Config\\SecurityConfig;\n\nreturn static function (SecurityConfig $security): void {\n    // ...\n\n    $security->firewall('main')\n        // ...\n        ->formLogin()\n            // ...\n            ->targetPathParameter('go_to')\n            ->failurePathParameter('back_to')\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: SSL Connection with MySQL in XML\nDESCRIPTION: XML configuration for setting up a secure SSL connection to MySQL with Doctrine, using environment variables for SSL certificate paths.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/doctrine.rst#2025-04-22_snippet_15\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:doctrine=\"http://symfony.com/schema/dic/doctrine\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/doctrine\n        https://symfony.com/schema/dic/doctrine/doctrine-1.0.xsd\">\n\n    <doctrine:config>\n        <doctrine:dbal\n            url=\"%env(DATABASE_URL)%\"\n            server-version=\"8.0.31\"\n            driver=\"pdo_mysql\">\n\n            <doctrine:option key-type=\"constant\" key=\"PDO::MYSQL_ATTR_SSL_KEY\">%env(MYSQL_SSL_KEY)%</doctrine:option>\n            <doctrine:option key-type=\"constant\" key=\"PDO::MYSQL_ATTR_SSL_CERT\">%env(MYSQL_SSL_CERT)%</doctrine:option>\n            <doctrine:option key-type=\"constant\" key=\"PDO::MYSQL_ATTR_SSL_CA\">%env(MYSQL_SSL_CA)%</doctrine:option>\n        </doctrine:dbal>\n    </doctrine:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Configuring IBAN Validation in YAML\nDESCRIPTION: YAML configuration for IBAN validation constraint on the Transaction entity's bankAccountNumber property.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Iban.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Transaction:\n    properties:\n        bankAccountNumber:\n            - Iban:\n                message: This is not a valid International Bank Account Number (IBAN).\n```\n\n----------------------------------------\n\nTITLE: Running Type Declaration Patch Script in Symfony\nDESCRIPTION: Commands to prepare and execute the type declaration patching process. Includes dumping composer's autoloader and running the patch script.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/upgrade_major.rst#2025-04-22_snippet_9\n\nLANGUAGE: terminal\nCODE:\n```\n# Make sure \"exclude-from-classmap\" is not filled in your \"composer.json\". Then dump the autoloader:\n\n# \"-o\" is important! This forces Composer to find all classes\n$ composer dump-autoload -o\n\n# patch all incompatible method declarations\n$ ./vendor/bin/patch-type-declarations\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Save Path to Null in YAML\nDESCRIPTION: Example configuration that sets the session save path to null in a Symfony YAML configuration file, which causes the application to rely on the php.ini session.save_path directive.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_76\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/framework.yaml\nframework:\n    session:\n        save_path: ~\n```\n\n----------------------------------------\n\nTITLE: Defining DivisibleBy Constraint in XML\nDESCRIPTION: This XML configuration applies the DivisibleBy constraint to the weight and quantity properties of the Item entity, ensuring they are divisible by 0.25 and 5 respectively.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/DivisibleBy.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\Item\">\n        <property name=\"weight\">\n            <constraint name=\"DivisibleBy\">\n                <value>0.25</value>\n            </constraint>\n        </property>\n        <property name=\"quantity\">\n            <constraint name=\"DivisibleBy\">\n                <option name=\"value\">5</option>\n            </constraint>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Initializing Couchbase Collection Cache Adapter in PHP\nDESCRIPTION: This snippet demonstrates how to create a new instance of the CouchbaseCollectionAdapter. It requires a Couchbase Collection instance and optionally accepts a namespace and default cache lifetime.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/cache/adapters/couchbasecollection_adapter.rst#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Cache\\Adapter\\CouchbaseCollectionAdapter;\n\n$cache = new CouchbaseCollectionAdapter(\n    // the client object that sets options and adds the server instance(s)\n    $client,\n\n    // a string prefixed to the keys of the items stored in this cache\n    $namespace,\n\n    // the default lifetime (in seconds) for cache items that do not define their\n    // own lifetime, with a value 0 causing items to be stored indefinitely\n    $defaultLifetime\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring CDN Settings in Webpack Encore\nDESCRIPTION: Configuration snippet showing how to set up CDN integration in webpack.config.js. Demonstrates setting different public paths for development and production environments, including CDN URL configuration and manifest key prefix settings.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/cdn.rst#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n      // webpack.config.js\n      // ...\n\n      Encore\n          .setOutputPath('public/build/')\n          // in dev mode, don't use the CDN\n          .setPublicPath('/build');\n          // ...\n      ;\n\n    + if (Encore.isProduction()) {\n    +     Encore.setPublicPath('https://my-cool-app.com.global.prod.fastly.net');\n    +\n    +     // guarantee that the keys in manifest.json are *still*\n    +     // prefixed with build/\n    +     // (e.g. \"build/dashboard.js\": \"https://my-cool-app.com.global.prod.fastly.net/dashboard.js\")\n    +     Encore.setManifestKeyPrefix('build/');\n    + }\n```\n\n----------------------------------------\n\nTITLE: Adding a New Field to Doctrine Entity in Symfony\nDESCRIPTION: Diff showing how to add a new 'description' field to an existing Product entity class.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine.rst#2025-04-22_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n  // src/Entity/Product.php\n  // ...\n+  use Doctrine\\DBAL\\Types\\Types;\n\n  class Product\n  {\n      // ...\n\n+     #[ORM\\Column(type: Types::TEXT)]\n```\n\n----------------------------------------\n\nTITLE: XML Output with Attribute and Comment from XmlEncoder\nDESCRIPTION: This XML shows the result of encoding the PHP array from the previous example using `XmlEncoder`. It includes the 'foo' element with its 'bar' attribute and the 'qux' element containing the specified XML comment. Note the potential typo in the original documentation source (`--!><qux>`).\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer/encoders.rst#2025-04-22_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n   <?xml version=\"1.0\"?>\n   <response>\n       <foo bar=\"value\"/>\n       <qux><!-- A comment --!><qux>\n   </response>\n```\n\n----------------------------------------\n\nTITLE: Installing Reset Password Bundle in Symfony\nDESCRIPTION: Terminal command to install the SymfonyCastsResetPasswordBundle via Composer. This bundle provides tools for implementing password reset functionality.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/passwords.rst#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require symfonycasts/reset-password-bundle\n```\n\n----------------------------------------\n\nTITLE: Using URL Encode Environment Variable Processor in XML\nDESCRIPTION: Shows how to use the 'urlencode' processor in an XML configuration file to encode the value of an environment variable.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/env_var_processors.rst#2025-04-22_snippet_42\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/framework.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony\n        https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <parameters>\n        <parameter key=\"env(DATABASE_URL)\">mysql://db_user:foo@b$r@127.0.0.1:3306/db_name</parameter>\n        <parameter key=\"encoded_database_url\">%env(urlencode:DATABASE_URL)%</parameter>\n    </parameters>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS Channel Requirement in PHP\nDESCRIPTION: Implements access control rule with HTTPS channel requirement using PHP configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/access_control.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/security.php\nuse Symfony\\Config\\SecurityConfig;\n\nreturn static function (SecurityConfig $security): void {\n    // ...\n\n    $security->accessControl()\n        ->path('^/cart/checkout')\n        ->roles(['PUBLIC_ACCESS'])\n        ->requiresChannel('https')\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Pushing Translations to Provider in Symfony Console\nDESCRIPTION: Example console commands for pushing translations to a translation provider like Loco. Shows options for pushing all translations, new translations only, and deleting missing translations.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/translation.rst#2025-04-22_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\n# push all local translations to the Loco provider for the locales and domains\n# configured in config/packages/translation.yaml file.\n# it will update existing translations already on the provider.\n$ php bin/console translation:push loco --force\n\n# push new local translations to the Loco provider for the French locale\n# and the validators domain.\n# it will **not** update existing translations already on the provider.\n$ php bin/console translation:push loco --locales fr --domains validators\n\n# push new local translations and delete provider's translations that not\n# exists anymore in local files for the French locale and the validators domain.\n# it will **not** update existing translations already on the provider.\n$ php bin/console translation:push loco --delete-missing --locales fr --domains validators\n\n# check out the command help to see its options (format, domains, locales, etc.)\n$ php bin/console translation:push --help\n```\n\n----------------------------------------\n\nTITLE: Configuring Twig Template Paths in XML\nDESCRIPTION: Configures Twig template directories using XML format. Shows how to define template paths with XML schema configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/templates.rst#2025-04-22_snippet_48\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/twig.xml -->\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:twig=\"http://symfony.com/schema/dic/twig\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/twig https://symfony.com/schema/dic/twig/twig-1.0.xsd\">\n\n    <twig:config>\n        <!-- ... -->\n        <twig:path>email/default/templates</twig:path>\n        <twig:path>backend/templates</twig:path>\n    </twig:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Value Resolver Service Configuration in XML\nDESCRIPTION: XML configuration for registering the custom value resolver as a service\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/controller/value_resolver.rst#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-Instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <defaults autowire=\"true\"/>\n        <service id=\"App\\ValueResolver\\BookingIdValueResolver\">\n            <tag name=\"booking_id\" priority=\"150\">controller.argument_value_resolver</tag>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Translation Tag Usage\nDESCRIPTION: Renders translated content with optional variables and domain\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#2025-04-22_snippet_65\n\nLANGUAGE: twig\nCODE:\n```\n{% trans with vars from domain into locale %}{% endtrans %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Required Badges in Symfony Firewall (XML)\nDESCRIPTION: This XML configuration sets up required badges for a Symfony firewall. The required_badge elements are used to specify badge classes that must be present on the authenticated passport.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/security.rst#2025-04-22_snippet_19\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/security.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<srv:container xmlns=\"http://symfony.com/schema/dic/security\"\n    xmlns:srv=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/security\n        https://symfony.com/schema/dic/security/security-1.0.xsd\">\n\n    <config>\n        <firewall name=\"main\">\n            <!-- ... -->\n            <required_badge>CsrfTokenBadge</required_badge>\n            <required_badge>My\\Badge</required_badge>\n        </firewall>\n    </config>\n</srv:container>\n```\n\n----------------------------------------\n\nTITLE: Including Bootstrap 4 CSS and JavaScript in Twig Template\nDESCRIPTION: This snippet shows how to include Bootstrap 4 CSS and JavaScript in a Symfony Twig template. It uses block elements to define where the Bootstrap resources should be placed in the base template.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/bootstrap4.rst#2025-04-22_snippet_0\n\nLANGUAGE: html+twig\nCODE:\n```\n{# templates/base.html.twig #}\n\n{# beware that the blocks in your template may be named different #}\n{% block head_css %}\n    <!-- Copy CSS from https://getbootstrap.com/docs/4.4/getting-started/introduction/#css -->\n{% endblock %}\n{% block head_js %}\n    <!-- Copy JavaScript from https://getbootstrap.com/docs/4.4/getting-started/introduction/#js -->\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Validator in YAML Configuration\nDESCRIPTION: This snippet demonstrates how to apply the custom validator to an entity property using YAML configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/validation/custom_constraint.rst#2025-04-22_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\User:\n    properties:\n        name:\n            - NotBlank: ~\n            - App\\Validator\\ContainsAlphanumeric:\n                mode: 'loose'\n```\n\n----------------------------------------\n\nTITLE: Explicit Type Casting in YAML\nDESCRIPTION: Examples of explicit type casting using YAML tags.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/formats/yaml.rst#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ndata:\n    start_date: !!str 2002-12-14\n    price: !!float 3\n    picture: !!binary |\n        R0lGODlhDAAMAIQAAP//9/X\n        17unp5WZmZgAAAOfn515eXv\n        Pz7Y6OjuDg4J+fn5OTk6enp\n        56enmleECcgggoBADs=\n```\n\n----------------------------------------\n\nTITLE: Excluding Default Normalizers in YAML Configuration\nDESCRIPTION: Shows how to exclude default normalizers and encoders from a named serializer in YAML configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer.rst#2025-04-22_snippet_50\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/serializer.yaml\nframework:\n    serializer:\n        named_serializers:\n            api_client1:\n                include_built_in_normalizers: false\n                include_built_in_encoders: true\n```\n\n----------------------------------------\n\nTITLE: Validating Locales using XML in Symfony\nDESCRIPTION: XML configuration for locale validation in Symfony. Defines constraint mapping for the User entity's locale property.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Locale.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\User\">\n        <property name=\"locale\">\n            <constraint name=\"Locale\">\n                <option name=\"canonicalize\">true</option>\n            </constraint>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Configuring ResetType with Label Translation Parameters in PHP\nDESCRIPTION: This PHP code demonstrates how to add a ResetType button with a translated label and custom translation parameters. It uses the 'label' and 'label_translation_parameters' options.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/reset.rst#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\ResetType;\n// ...\n\n$builder->add('send', ResetType::class, [\n    'label' => 'form.order.reset',\n    'label_translation_parameters' => [\n        '%company%' => 'ACME Inc.',\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Setting Cache-Control Header with Response Methods in PHP\nDESCRIPTION: Shows how to set the Cache-Control header using the Response object's methods for public caching with a max age of 600 seconds.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/http_cache/expiration.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// sets the number of seconds after which the response\n// should no longer be considered fresh by shared caches\n$response->setPublic();\n$response->setMaxAge(600);\n```\n\n----------------------------------------\n\nTITLE: Requiring Specific Files from NPM Packages\nDESCRIPTION: Example of directly requiring a specific file from an NPM package when the package doesn't properly define its main entry point.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/faq.rst#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// require a non-minified file whenever possible\nrequire('respond.js/dest/respond.src.js');\n```\n\n----------------------------------------\n\nTITLE: Installing Filesystem Component via Composer (Terminal)\nDESCRIPTION: Installs the Symfony Filesystem component using the Composer package manager. This command downloads and adds the component as a project dependency.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/filesystem.rst#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require symfony/filesystem\n```\n\n----------------------------------------\n\nTITLE: Documenting Deprecations in a Changelog in Markdown\nDESCRIPTION: This Markdown snippet is a standard example for logging a code deprecation in the CHANGELOG.md file for a component. It lists the affected version and provides an imperative-style message advising the replacement for the deprecated class. Intended to support release management and user documentation, it helps communicate breaking changes to downstream developers.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/contributing/code/conventions.rst#2025-04-22_snippet_6\n\nLANGUAGE: Markdown\nCODE:\n```\n4.4\\n---\\n\\n* Deprecate the `Deprecated` class, use `Replacement` instead\n```\n\n----------------------------------------\n\nTITLE: Using HTML Sanitizer in a Symfony Controller\nDESCRIPTION: Demonstrates how to use the HTML Sanitizer in a Symfony controller by type-hinting the HtmlSanitizerInterface.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/html_sanitizer.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/BlogPostController.php\nnamespace App\\Controller;\n\n// ...\nuse Symfony\\Component\\HtmlSanitizer\\HtmlSanitizerInterface;\n\nclass BlogPostController extends AbstractController\n{\n    public function createAction(HtmlSanitizerInterface $htmlSanitizer, Request $request): Response\n    {\n        $unsafeContents = $request->getPayload()->get('post_contents');\n\n        $safeContents = $htmlSanitizer->sanitize($unsafeContents);\n        // ... proceed using the safe HTML\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nested Options with OptionsResolver in PHP\nDESCRIPTION: Shows how to configure nested spool options with validation and type checking using Symfony's OptionsResolver component in a Mailer class\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/options_resolver.rst#2025-04-22_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nclass Mailer\n{\n    // ...\n\n    public function configureOptions(OptionsResolver $resolver): void\n    {\n        $resolver->setOptions('spool', function (OptionsResolver $spoolResolver): void {\n            $spoolResolver->setDefaults([\n                'type' => 'file',\n                'path' => '/path/to/spool',\n            ]);\n            $spoolResolver->setAllowedValues('type', ['file', 'memory']);\n            $spoolResolver->setAllowedTypes('path', 'string');\n        });\n    }\n\n    public function sendMail(string $from, string $to): void\n    {\n        if ('memory' === $this->options['spool']['type']) {\n            // ...\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ProfileController with Manual Cache Configuration in PHP\nDESCRIPTION: Alternative implementation of the ProfileController that manually sets the shared max age on the Response object instead of using attributes.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/http_cache/ssi.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/ProfileController.php\nnamespace App\\Controller;\n\n// ...\nclass ProfileController extends AbstractController\n{\n    public function index(): Response\n    {\n        // by default, responses are private\n        return $this->render('profile/index.html.twig');\n    }\n\n    public function gdpr(): Response\n    {\n        $response = $this->render('profile/gdpr.html.twig');\n\n        // sets to public and adds some expiration\n        $response->setSharedMaxAge(600);\n\n        return $response;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Getter-Based Constraint with Symfony Validator Metadata (PHP)\nDESCRIPTION: This snippet demonstrates adding an IsTrue constraint to the result of a getter method (passwordSafe) using Symfony Validator metadata. It requires the use of Assert\\IsTrue and the loadValidatorMetadata method in the Author class. The code expects the getter (isPasswordSafe) to exist, and configures a custom validation message. The ClassMetadata will use this logic to validate the object at runtime.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/validator/metadata.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// ...\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Author\n{\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addGetterConstraint('passwordSafe', new Assert\\IsTrue(\n            message: 'The password cannot match your first name',\n        ));\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Decoration in YAML\nDESCRIPTION: Demonstrates how to configure service decoration in YAML format. The Bar service decorates Foo with the decoration_on_invalid option set to ignore missing services.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/service_decoration.rst#2025-04-22_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nFoo: ~\n\nBar:\n    decorates: Foo\n    decoration_on_invalid: ignore\n    arguments: ['@.inner']\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom User Provider in Symfony Security (YAML)\nDESCRIPTION: Shows how to register a custom user provider by ID in a Symfony YAML configuration file. The provider ('your_custom_user_provider') points to an application-defined service class. Intended for use when a custom provider implementation (such as one loading users from an API) is required. No further parameters are specified in this stub.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/user_providers.rst#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\\nsecurity:\\n    providers:\\n        # the name of your user provider can be anything\\n        your_custom_user_provider:\\n            id: App\\Security\\UserProvider\n```\n\n----------------------------------------\n\nTITLE: Configuring DateTime with Timezone using YAML\nDESCRIPTION: Example showing how to use YAML to configure the GreaterThanOrEqual constraint with a fixed timezone (UTC) for DateTime validation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/GreaterThanOrEqual.rst#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Order:\n    properties:\n        deliveryDate:\n            - GreaterThanOrEqual: today UTC\n```\n\n----------------------------------------\n\nTITLE: Configuring Firewalls in PHP\nDESCRIPTION: Example of configuring a firewall in Symfony's security.php file using the PHP configuration format. Shows how to define a firewall that matches URLs starting with /admin.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/security.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/security.php\nuse Symfony\\Config\\SecurityConfig;\n\nreturn static function (SecurityConfig $security): void {\n    // ...\n\n    // 'main' is the name of the firewall (can be chosen freely)\n    $security->firewall('main')\n        // 'pattern' is a regular expression matched against the incoming\n        // request URL. If there's a match, authentication is triggered\n        ->pattern('^/admin')\n        // the rest of options depend on the authentication mechanism\n        // ...\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring ENUM Mapping Type in XML\nDESCRIPTION: XML configuration for mapping ENUM database type to string in Doctrine\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine/dbal.rst#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/doctrine.xml -->\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:doctrine=\"http://symfony.com/schema/dic/doctrine\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/doctrine\n        https://symfony.com/schema/dic/doctrine/doctrine-1.0.xsd\">\n\n    <doctrine:config>\n        <doctrine:dbal>\n            <doctrine:mapping-type name=\"enum\">string</doctrine:mapping-type>\n        </doctrine:dbal>\n    </doctrine:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dotfile Exclusion in YAML\nDESCRIPTION: Demonstrates how to configure the AssetMapper to exclude dotfiles like .env or .gitignore from being published.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/asset_mapper.rst#2025-04-22_snippet_40\n\nLANGUAGE: yaml\nCODE:\n```\nframework:\n    asset_mapper:\n        exclude_dotfiles: true\n```\n\n----------------------------------------\n\nTITLE: Initializing DoctrineDbalStore for Doctrine-based Locks in Symfony\nDESCRIPTION: Example showing how to configure a DoctrineDbalStore that uses a Doctrine DBAL Connection or URL for database lock persistence. Similar to PdoStore but specifically for Doctrine DBAL integrations.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/lock.rst#2025-04-22_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Lock\\Store\\DoctrineDbalStore;\n\n// a Doctrine DBAL connection or DSN\n$connectionOrURL = 'mysql://myuser:mypassword@127.0.0.1/app';\n$store = new DoctrineDbalStore($connectionOrURL);\n```\n\n----------------------------------------\n\nTITLE: Testing Command Completion in Symfony Console\nDESCRIPTION: Demonstrates how to test command completion logic using the CommandCompletionTester class. Shows testing completion suggestions with and without existing input.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/console/input.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass GreetCommandTest extends TestCase\n{\n    public function testComplete(): void\n    {\n        $application = new Application();\n        $application->add(new GreetCommand());\n\n        // create a new tester with the greet command\n        $tester = new CommandCompletionTester($application->get('app:greet'));\n\n        // complete the input without any existing input (the empty string represents\n        // the position of the cursor)\n        $suggestions = $tester->complete(['']);\n        $this->assertSame(['Fabien', 'Fabrice', 'Wouter'], $suggestions);\n\n        // If you filter the values inside your own code (not recommended, unless you\n        // need to improve performance of e.g. a database query), you can test this\n        // by passing the user input\n        $suggestions = $tester->complete(['Fa']);\n        $this->assertSame(['Fabien', 'Fabrice'], $suggestions);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring BIC Validation with XML in Symfony\nDESCRIPTION: This XML configuration applies the BIC validation constraint to the businessIdentifierCode property in the Transaction entity. It ensures the property contains a valid Business Identifier Code.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Bic.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\Transaction\">\n        <property name=\"businessIdentifierCode\">\n            <constraint name=\"Bic\"/>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Rebasing a Feature Branch with Upstream - Terminal\nDESCRIPTION: These terminal commands fetch updates from the upstream repository, merge new changes into the local base branch (e.g. 6.x), and rebase the feature branch atop the updated base. This workflow synchronizes the contributor's work with the latest upstream changes. Dependencies: upstream remote must be configured. Inputs: branch names (e.g. 6.x, BRANCH_NAME). Outputs: updated and rebased feature branch. Potential limitations: merge conflicts may occur during rebase.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/contributing/code/pull_requests.rst#2025-04-22_snippet_5\n\nLANGUAGE: terminal\nCODE:\n```\n$ git checkout 6.x\n$ git fetch upstream\n$ git merge upstream/6.x\n$ git checkout BRANCH_NAME\n$ git rebase 6.x\n```\n\n----------------------------------------\n\nTITLE: Defining Symfony Site in Homestead using YAML\nDESCRIPTION: This YAML snippet showcases the 'sites' configuration within Homestead, mapping the custom domain 'symfony-demo.test' to the 'public' directory of the Symfony application. The 'type: symfony4' entry tells Homestead to use the correct nginx configuration for Symfony 4 or later. This pattern requires the mapped folders to exist and Symfony installed in the target location. Inputs are site mapping parameters, and the processed output is a served local domain in the VM.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/homestead.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# ...\\nsites:\\n    - map: symfony-demo.test\\n      to: /home/vagrant/projects/symfony_demo/public\\n      type: symfony4\n```\n\n----------------------------------------\n\nTITLE: Configuring ExpressionSyntax Constraint with PHP\nDESCRIPTION: Example showing how to configure the ExpressionSyntax constraint using PHP validator metadata for an Order entity.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/ExpressionSyntax.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Student.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Order\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('promotion', new Assert\\ExpressionSyntax());\n\n        $metadata->addPropertyConstraint('shippingOptions', new Assert\\ExpressionSyntax(\n            allowedVariables: ['user', 'shipping_centers'],\n        ));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Configuration Files in Symfony Flex Recipe (JSON)\nDESCRIPTION: Demonstrates an enhanced Symfony Flex recipe for a private bundle (`acme/private-bundle`). It adds the `copy-from-recipe` key to instruct Flex to copy files from the recipe's `config/` directory into the project's configuration directory (`%CONFIG_DIR%`). Additionally, the `files` key explicitly defines the content and properties (like `executable`) of specific configuration files (e.g., `config/packages/acme_private.yaml`) that should be created by the recipe.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/flex_private_recipes.rst#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"manifests\": {\n        \"acme/private-bundle\": {\n            \"manifest\": {\n                \"bundles\": {\n                    \"Acme\\\\PrivateBundle\\\\AcmePrivateBundle\": [\n                        \"all\"\n                    ]\n                },\n                \"copy-from-recipe\": {\n                    \"config/\": \"%CONFIG_DIR%\"\n                }\n            },\n            \"files\": {\n                \"config/packages/acme_private.yaml\": {\n                    \"contents\": [\n                        \"acme_private:\",\n                        \"    encode: true\",\n                        \"\"\n                    ],\n                    \"executable\": false\n                }\n            },\n            \"ref\": \"7405f3af1312d1f9121afed4dddef636c6c7ff00\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JWT Structure for Mercure Publishing\nDESCRIPTION: Required JSON Web Token structure to allow clients to publish updates to the Mercure hub.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mercure.rst#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"mercure\": {\n        \"publish\": [\"*\"]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML Sanitizer Attributes in XML\nDESCRIPTION: XML configuration for HTML sanitizer showing how to allow attributes on elements and then drop specific ones. Demonstrates allowing 'data-attr' on all elements while removing it from 'section' elements and removing 'style' from all elements.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/html_sanitizer.rst#2025-04-22_snippet_20\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/html_sanitizer.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <framework:config>\n        <framework:html-sanitizer>\n            <!-- allow the \"data-attr\" on all safe elements... -->\n            <framework:allow-attribute name=\"data-attr\">\n                <framework:element>*</framework:element>\n            </framework:allow-attribute>\n\n            <!-- ...except for the <section> element -->\n            <framework:drop-attribute name=\"data-attr\">\n                <framework:element>section</framework:element>\n            </framework:drop-attribute>\n\n            <!-- disallows \"style' on any allowed element -->\n            <framework:drop-attribute name=\"style\">\n                <framework:element>*</framework:element>\n            </framework:drop-attribute>\n        </framework:html-sanitizer>\n    </framework:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Validation Groups for Submit Button in Symfony\nDESCRIPTION: Demonstrates how to configure a submit button to skip validation by setting its validation_groups option to false. This maintains basic integrity constraints while bypassing custom validation rules.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/button_based_validation.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$form = $this->createFormBuilder($task)\n    // ...\n    ->add('previousStep', SubmitType::class, [\n        'validation_groups' => false,\n    ])\n    ->getForm();\n```\n\n----------------------------------------\n\nTITLE: Configuring Encrypted Cache with SodiumMarshaller in PHP\nDESCRIPTION: PHP configuration for setting up encrypted cache using SodiumMarshaller with support for key rotation using dependency injection.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/cache.rst#2025-04-22_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Cache\\Marshaller\\SodiumMarshaller;\nuse Symfony\\Component\\DependencyInjection\\ChildDefinition;\nuse Symfony\\Component\\DependencyInjection\\Reference;\n\n$container->setDefinition(SodiumMarshaller::class, new ChildDefinition('cache.default_marshaller'))\n    ->addArgument(['env(base64:CACHE_DECRYPTION_KEY)'])\n    // use multiple keys in order to rotate them\n    //->addArgument(['env(base64:CACHE_DECRYPTION_KEY)', 'env(base64:OLD_CACHE_DECRYPTION_KEY)'])\n    ->addArgument(new Reference('.inner'));\n```\n\n----------------------------------------\n\nTITLE: Excluding Default Normalizers in PHP Configuration\nDESCRIPTION: Shows how to exclude default normalizers and encoders from a named serializer in PHP configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer.rst#2025-04-22_snippet_52\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/serializer.php\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework): void {\n    $framework->serializer()\n        ->namedSerializer('api_client1')\n            ->includeBuiltInNormalizers(false)\n            ->includeBuiltInEncoders(true)\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Constructor Injection in Service Container (YAML)\nDESCRIPTION: YAML configuration for injecting a mailer service into the NewsletterManager using constructor injection.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/injection_types.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nservices:\n    # ...\n\n    App\\Mail\\NewsletterManager:\n        arguments: ['@mailer']\n```\n\n----------------------------------------\n\nTITLE: Custom Sorting Algorithm in Symfony Finder\nDESCRIPTION: Demonstrates how to implement a custom sorting algorithm using the sort() method with a closure function that compares two SplFileInfo objects.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/finder.rst#2025-04-22_snippet_36\n\nLANGUAGE: php\nCODE:\n```\n$finder->sort(function (\\SplFileInfo $a, \\SplFileInfo $b): int {\n    return strcmp($a->getRealPath(), $b->getRealPath());\n});\n```\n\n----------------------------------------\n\nTITLE: Illustrating Directory Structure in Symfony Docs\nDESCRIPTION: This snippet demonstrates how to represent a Symfony project's directory structure in documentation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/contributing/documentation/standards.rst#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nyour-project/\n├─ app/\n├─ src/\n├─ vendor/\n└─ ...\n```\n\n----------------------------------------\n\nTITLE: Configuring UUID/ULID Console Commands in PHP (PHP)\nDESCRIPTION: Configuration in PHP format to enable console commands for generating and inspecting UUIDs and ULIDs in a Symfony application.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/uid.rst#2025-04-22_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nuse Symfony\\Component\\Uid\\Command\\GenerateUlidCommand;\nuse Symfony\\Component\\Uid\\Command\\GenerateUuidCommand;\nuse Symfony\\Component\\Uid\\Command\\InspectUlidCommand;\nuse Symfony\\Component\\Uid\\Command\\InspectUuidCommand;\n\nreturn static function (ContainerConfigurator $container): void {\n    // ...\n\n    $services\n        ->set(GenerateUlidCommand::class)\n        ->set(GenerateUuidCommand::class)\n        ->set(InspectUlidCommand::class)\n        ->set(InspectUuidCommand::class);\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Access Control with Port in PHP\nDESCRIPTION: Sets up an access control rule for cart checkout with port restriction using PHP configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/access_control.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/security.php\nuse Symfony\\Config\\SecurityConfig;\n\nreturn static function (SecurityConfig $security): void {\n    // ...\n\n    $security->accessControl()\n        ->path('^/cart/checkout')\n        ->roles(['PUBLIC_ACCESS'])\n        ->port(8080)\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Updating base.html.twig for importmap Support\nDESCRIPTION: Shows how Symfony Flex updates the base template file to include importmap functionality for JavaScript assets.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/asset_mapper.rst#2025-04-22_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n{% block javascripts %}\n+    {% block importmap %}{{ importmap('app') }}{% endblock %}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Single Entry Point in Symfony (PHP)\nDESCRIPTION: This PHP configuration snippet illustrates how to define the authentication entry point for a Symfony firewall using PHP configuration. After defining the 'main' firewall and enabling `formLogin()` and `customAuthenticators()`, the `->entryPoint('form_login')` method call explicitly sets the form login mechanism as the designated entry point for unauthenticated users accessing protected resources under this firewall.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/entry_point.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/security.php\nuse App\\Security\\SocialConnectAuthenticator;\nuse Symfony\\Config\\SecurityConfig;\n\nreturn static function (SecurityConfig $security): void {\n    $security->enableAuthenticatorManager(true);\n    // ....\n\n    // allow authentication using a form or HTTP basic\n    $mainFirewall = $security->firewall('main');\n    $mainFirewall\n        ->formLogin()\n        ->customAuthenticators([SocialConnectAuthenticator::class])\n\n        // configure the form authentication as the entry point for unauthenticated users\n        ->entryPoint('form_login');\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Traverse Constraint in XML\nDESCRIPTION: Example of configuring the Traverse constraint using XML format in Symfony validation configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Traverse.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\BookCollection\">\n        <constraint name=\"Traverse\"/>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Stub for Creating a Custom Serializer Encoder in PHP\nDESCRIPTION: This code snippet shows the initial structure for a custom serializer encoder class, likely intended for the NEON format as mentioned in the surrounding text. It defines the namespace and imports necessary dependencies like the `Nette\\Neon\\Neon` library and Symfony's `EncoderInterface` and `DecoderInterface`. Note: The filename comment `// src/Serializer/YamlEncoder.php` might be inaccurate based on the NEON context.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer/encoders.rst#2025-04-22_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n// src/Serializer/YamlEncoder.php\nnamespace App\\Serializer;\n\nuse Nette\\Neon\\Neon;\nuse Symfony\\Component\\Serializer\\Encoder\\DecoderInterface;\nuse Symfony\\Component\\Serializer\\Encoder\\EncoderInterface;\n```\n\n----------------------------------------\n\nTITLE: Configuring Expression Constraints with YAML in Symfony\nDESCRIPTION: Shows how to define the same Expression constraint using YAML configuration. The validation rule is applied to the 'metric' property and evaluates whether value plus error margin is less than threshold.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Expression.rst#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Model\\Analysis:\n    properties:\n        metric:\n            - Expression:\n                expression: \"value + error_margin < threshold\"\n                values:     { error_margin: 0.25, threshold: 1.5 }\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Access Token Extractor (XML - Symfony)\nDESCRIPTION: Configures the use of a different built-in or custom access token extractor using XML. Add <token-extractor> elements within <access-token>; each element can be a built-in option (like request_body) or a custom service implementing AccessTokenExtractorInterface. Place this in config/packages/security.xml. The order of <token-extractor> elements is meaningful for extractor precedence.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/access_token.rst#2025-04-22_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/security.xml -->\\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<srv:container xmlns=\\\"http://symfony.com/schema/dic/security\\\"\\n    xmlns:srv=\\\"http://symfony.com/schema/dic/services\\\"\\n    xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n    xsi:schemaLocation=\\\"http://symfony.com/schema/dic/services\\n        https://symfony.com/schema/dic/services/services-1.0.xsd\\n        http://symfony.com/schema/dic/security\\n        https://symfony.com/schema/dic/security/security-1.0.xsd\\\">\\n\\n    <config>\\n        <firewall name=\\\"main\\\">\\n            <access-token token-handler=\\\"App\\\\Security\\\\AccessTokenHandler\\\">\\n                <!-- use a different built-in extractor -->\\n                <token-extractor>request_body</token-extractor>\\n\\n                <!-- or provide the service ID of a custom extractor -->\\n                <token-extractor>App\\Security\\CustomTokenExtractor</token-extractor>\\n            </access-token>\\n        </firewall>\\n    </config>\\n</srv:container>\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP Connection with SSL Encryption in PHP\nDESCRIPTION: Demonstrates creating an LDAP connection instance using the `Ldap::create` factory method with the `ext_ldap` adapter. Specifies the host and enables SSL encryption for the connection.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/ldap.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Ldap\\Ldap;\n\n$ldap = Ldap::create('ext_ldap', [\n    'host' => 'my-server',\n    'encryption' => 'ssl',\n]);\n```\n\n----------------------------------------\n\nTITLE: Applying humanize Filter in Twig\nDESCRIPTION: Uses the `humanize` Twig filter to convert a potentially non-human-readable string (`text`) into a more user-friendly format. It replaces underscores with spaces and capitalizes appropriately.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#2025-04-22_snippet_36\n\nLANGUAGE: twig\nCODE:\n```\n{{ text|humanize }}\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony PHPUnit Bridge via Composer\nDESCRIPTION: Installs the `symfony/phpunit-bridge` package as a development dependency using Composer. This bridge helps identify deprecation notices when running PHPUnit tests as part of the major version upgrade preparation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/upgrade_major.rst#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require --dev symfony/phpunit-bridge\n```\n\n----------------------------------------\n\nTITLE: Configuring Private GitLab Recipe Endpoint in composer.json (JSON)\nDESCRIPTION: Illustrates how to modify a project's `composer.json` file to use a private Symfony Flex recipe repository hosted on GitLab. Add the URL pointing to the raw `index.json` file in the private repository via the GitLab API (e.g., `https://gitlab.com/api/v4/projects/your-gitlab-project-id/repository/files/index.json/raw?ref=main`) to the `extra.symfony.endpoint` array. Include `flex://defaults` to retain access to official recipes. Replace the placeholder `your-gitlab-project-id` with your actual GitLab project ID.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/flex_private_recipes.rst#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"extra\": {\n        \"symfony\": {\n            \"endpoint\": [\n                \"https://gitlab.com/api/v4/projects/your-gitlab-project-id/repository/files/index.json/raw?ref=main\",\n                \"flex://defaults\"\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Time Constraint in YAML for Symfony Validation\nDESCRIPTION: A YAML configuration example for applying the Time constraint to an entity property in Symfony. This configuration validates that the startsAt property contains a valid time.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Time.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Event:\n    properties:\n        startsAt:\n            - Time: ~\n```\n\n----------------------------------------\n\nTITLE: Escaping Percent Signs in PHP Parameters\nDESCRIPTION: Shows how to escape percent signs in parameter values in PHP configuration to prevent them from being interpreted as parameter references.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration.rst#2025-04-22_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nreturn static function (ContainerConfigurator $container): void {\n    $container->parameters()\n        ->set('url_pattern', 'http://symfony.com/?foo=%%s&amp;bar=%%d');\n};\n```\n\n----------------------------------------\n\nTITLE: Simplifying Imports with Module Aliases\nDESCRIPTION: Shows how module aliases can be used to simplify import statements in JavaScript files. The example demonstrates the difference between a standard relative import and an import using a configured alias.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/advanced-config.rst#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n-import Utility from '../../utilities/utility';\n+import Utility from 'Utilities/utility';\n```\n\n----------------------------------------\n\nTITLE: Using Form Field Helpers for Manual HTML Rendering\nDESCRIPTION: This example demonstrates the use of field_name(), field_id(), field_value(), field_label(), and field_choices() helpers to manually render form fields with full HTML control.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/form_customization.rst#2025-04-22_snippet_3\n\nLANGUAGE: html+twig\nCODE:\n```\n<input\n    name=\"{{ field_name(form.username) }}\"\n    id=\"{{ field_id(form.username) }}\"\n    value=\"{{ field_value(form.username) }}\"\n    placeholder=\"{{ field_label(form.username) }}\"\n    class=\"form-control\"\n>\n\n<select name=\"{{ field_name(form.country) }}\" class=\"form-control\">\n    <option value=\"\">{{ field_label(form.country) }}</option>\n\n    {% for label, value in field_choices(form.country) %}\n        <option value=\"{{ value }}\">{{ label }}</option>\n    {% endfor %}\n</select>\n```\n\n----------------------------------------\n\nTITLE: Switching from AssetMapper to Webpack Encore in Symfony\nDESCRIPTION: Commands for removing AssetMapper and installing Webpack Encore in a Symfony project, including reinstalling UX components and building assets with npm.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Remove AssetMapper & Turbo/Stimulus temporarily\n$ composer remove symfony/ux-turbo symfony/asset-mapper symfony/stimulus-bundle\n\n# Add Webpack Encore & Turbo/Stimulus back\n$ composer require symfony/webpack-encore-bundle symfony/ux-turbo symfony/stimulus-bundle\n\n# Install & Build Assets\n$ npm install\n$ npm run dev\n```\n\n----------------------------------------\n\nTITLE: Complex Array Validation with Collection Constraint\nDESCRIPTION: Demonstrates validation of a complex nested array structure using Symfony's Collection constraint. Includes validation rules for multiple data types, nested collections, and custom validation groups.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/validation/raw_values.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Validation;\n\n$validator = Validation::createValidator();\n\n$input = [\n    'name' => [\n        'first_name' => 'Fabien',\n        'last_name' => 'Potencier',\n    ],\n    'email' => 'test@email.tld',\n    'simple' => 'hello',\n    'eye_color' => 3,\n    'file' => null,\n    'password' => 'test',\n    'tags' => [\n        [\n            'slug' => 'symfony_doc',\n            'label' => 'symfony doc',\n        ],\n    ],\n];\n\n$groups = new Assert\\GroupSequence(['Default', 'custom']);\n\n$constraint = new Assert\\Collection([\n    // the keys correspond to the keys in the input array\n    'name' => new Assert\\Collection([\n        'first_name' => new Assert\\Length(['min' => 101]),\n        'last_name' => new Assert\\Length(['min' => 1]),\n    ]),\n    'email' => new Assert\\Email(),\n    'simple' => new Assert\\Length(['min' => 102]),\n    'eye_color' => new Assert\\Choice([3, 4]),\n    'file' => new Assert\\File(),\n    'password' => new Assert\\Length(['min' => 60]),\n    'tags' => new Assert\\Optional([\n        new Assert\\Type('array'),\n        new Assert\\Count(['min' => 1]),\n        new Assert\\All([\n            new Assert\\Collection([\n                'slug' => [\n                    new Assert\\NotBlank(),\n                    new Assert\\Type(['type' => 'string']),\n                ],\n                'label' => [\n                    new Assert\\NotBlank(),\n                ],\n            ]),\n            new CustomUniqueTagValidator(['groups' => 'custom']),\n        ]),\n    ]),\n]);\n\n$violations = $validator->validate($input, $constraint, $groups);\n```\n\n----------------------------------------\n\nTITLE: Configuring Symfony HTTP Cache in XML\nDESCRIPTION: Enables the built-in HTTP cache reverse proxy in Symfony's production environment through XML configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/http_cache.rst#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/framework.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony\n        https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <when env=\"prod\">\n      <framework:config>\n          <!-- ... -->\n          <framework:http-cache enabled=\"true\"/>\n      </framework:config>\n    </when>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Converting Between Alpha-2 and Alpha-3 Country Codes in PHP\nDESCRIPTION: Demonstrates converting between two-letter ISO 3166-1 alpha-2 country codes and three-letter ISO 3166-1 alpha-3 country codes using the `Countries::getAlpha3Code()` and `Countries::getAlpha2Code()` static methods.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/intl.rst#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$alpha3Code = Countries::getAlpha3Code($alpha2Code);\n```\n\nLANGUAGE: php\nCODE:\n```\n$alpha2Code = Countries::getAlpha2Code($alpha3Code);\n```\n\n----------------------------------------\n\nTITLE: Initializing Symfony Response Object\nDESCRIPTION: Demonstrates how to create a Response object in Symfony to construct HTTP responses.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/introduction/http_fundamentals.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\HttpFoundation\\Response;\n\n$response = new Response();\n```\n\n----------------------------------------\n\nTITLE: Configuring Property Constraints with XML in Symfony\nDESCRIPTION: Shows how to configure validation constraints for a property using XML format in Symfony. It applies NotBlank and Length constraints to a firstName property.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/validation.rst#2025-04-22_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping\n        https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\Author\">\n        <property name=\"firstName\">\n            <constraint name=\"NotBlank\"/>\n            <constraint name=\"Length\">\n                <option name=\"min\">3</option>\n            </constraint>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Clearing Symfony Cache on Windows Post-Upgrade\nDESCRIPTION: Removes the entire contents of the `var\\cache\\` directory recursively and quietly using the `rmdir /s /q` command on Windows systems. This is the Windows equivalent for clearing the Symfony cache after a major version upgrade, ensuring a clean state.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/upgrade_major.rst#2025-04-22_snippet_8\n\nLANGUAGE: terminal\nCODE:\n```\n# run this command on Windows\nC:\\> rmdir /s /q var\\cache\\*\n```\n\n----------------------------------------\n\nTITLE: Configuring Symfony parameters in YAML\nDESCRIPTION: This YAML snippet demonstrates how to define and name parameters in Symfony's configuration file, using short and prefixed names.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/best_practices.rst#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nparameters:\n    # don't do this: 'dir' is too generic, and it doesn't convey any meaning\n    app.dir: '...'\n    # do this: short but easy to understand names\n    app.contents_dir: '...'\n    # it's OK to use dots, underscores, dashes or nothing, but always\n    # be consistent and use the same format for all the parameters\n    app.dir.contents: '...'\n    app.contents-dir: '...'\n```\n\n----------------------------------------\n\nTITLE: Expected Normalized PHP Array Output for Prototyped Drivers in Symfony\nDESCRIPTION: Shows what the PHP array looks like after processing YAML or XML prototyped array configuration for 'drivers'. For documentation purposes only; helps clarify normalization process from raw config to final array. Input: YAML or XML prototyped array. Output: indexed PHP array of driver names.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/config/definition.rst#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nArray(\n    [0] => 'mysql'\n    [1] => 'sqlite'\n)\n```\n\n----------------------------------------\n\nTITLE: Stimulus Controller Implementation\nDESCRIPTION: Example of a Stimulus controller implementation with targets and actions.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/simple-example.rst#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// assets/controllers/say-hello-controller.js\nimport { Controller } from '@hotwired/stimulus';\n\nexport default class extends Controller {\n    static targets = ['name', 'output']\n\n    greet() {\n      this.outputTarget.textContent = `Hello, ${this.nameTarget.value}!`\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Encore via npm for non-Symfony applications\nDESCRIPTION: Command to install Webpack Encore using npm in a non-Symfony application.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/installation.rst#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install @symfony/webpack-encore --save-dev\n```\n\n----------------------------------------\n\nTITLE: Linting YAML and XLIFF Translation Files in Symfony\nDESCRIPTION: Shows how to validate the syntax of translation files using the lint:yaml and lint:xliff commands for single files or directories.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/translation.rst#2025-04-22_snippet_52\n\nLANGUAGE: terminal\nCODE:\n```\n# lint a single file\n$ php bin/console lint:yaml translations/messages.en.yaml\n$ php bin/console lint:xliff translations/messages.en.xlf\n\n# lint a whole directory\n$ php bin/console lint:yaml translations\n$ php bin/console lint:xliff translations\n\n# lint multiple files or directories\n$ php bin/console lint:yaml translations path/to/trans\n$ php bin/console lint:xliff translations/messages.en.xlf translations/messages.es.xlf\n```\n\n----------------------------------------\n\nTITLE: Initial Blog Implementation in Flat PHP\nDESCRIPTION: Basic implementation of a blog listing page using raw PHP and MySQL. Shows direct database connection, query execution, and HTML output in a single file.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/introduction/from_flat_php_to_symfony.rst#2025-04-22_snippet_0\n\nLANGUAGE: html+php\nCODE:\n```\n<?php\n// index.php\n$connection = new PDO(\"mysql:host=localhost;dbname=blog_db\", 'myuser', 'mypassword');\n\n$result = $connection->query('SELECT id, title FROM post');\n?>\n\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>List of Posts</title>\n    </head>\n    <body>\n        <h1>List of Posts</h1>\n        <ul>\n            <?php while ($row = $result->fetch(PDO::FETCH_ASSOC)): ?>\n            <li>\n                <a href=\"/show.php?id=<?= $row['id'] ?>\">\n                    <?= $row['title'] ?>\n                </a>\n            </li>\n            <?php endwhile ?>\n        </ul>\n    </body>\n</html>\n\n<?php\n$connection = null;\n?>\n```\n\n----------------------------------------\n\nTITLE: Installing Doctrine ORM with Composer\nDESCRIPTION: Command to install the Doctrine ORM package using Composer, which will trigger Symfony Flex to update configuration files.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/quick_tour/the_architecture.rst#2025-04-22_snippet_12\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require doctrine\n```\n\n----------------------------------------\n\nTITLE: Setting PHP Version for a Symfony Project\nDESCRIPTION: Commands to specify a particular PHP version for a project by creating a .php-version file.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/symfony_server.rst#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ cd my-project/\n\n# use a specific PHP version\n$ echo 7.4 > .php-version\n\n# use any PHP 8.x version available\n$ echo 8 > .php-version\n```\n\n----------------------------------------\n\nTITLE: Hiding User Responses in Symfony Console Questions - PHP\nDESCRIPTION: This code demonstrates how to create a hidden Console question in Symfony, used for sensitive input such as passwords. The setHidden(true) method hides user input, and setHiddenFallback(false) enforces hiding, throwing an exception if not possible rather than falling back to visible input. Requires symfony/console and proper use of Question/QuestionHelper. Returns the password variable with input hidden. Exception is raised if input cannot be hidden.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/helpers/questionhelper.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Console\\Question\\Question;\n\n// ...\npublic function execute(InputInterface $input, OutputInterface $output): int\n{\n    // ...\n    $helper = $this->getHelper('question');\n\n    $question = new Question('What is the database password?');\n    $question->setHidden(true);\n    $question->setHiddenFallback(false);\n\n    $password = $helper->ask($input, $output, $question);\n\n    // ... do something with the password\n\n    return Command::SUCCESS;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring MacAddress Constraint in YAML\nDESCRIPTION: Example of configuring the MacAddress constraint using YAML validation configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/MacAddress.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Device:\n    properties:\n        mac:\n            - MacAddress: ~\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Wrapping in Symfony Console Output\nDESCRIPTION: Shows how to configure the SymfonyStyle to wrap URLs in the output, which can be useful for formatting long URLs.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/console/style.rst#2025-04-22_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n$io->getOutputWrapper()->setAllowCutUrls(true);\n```\n\n----------------------------------------\n\nTITLE: Installing CssSelector Component using Composer\nDESCRIPTION: Shows the Composer command required to install the Symfony CssSelector component as a project dependency.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/css_selector.rst#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require symfony/css-selector\n```\n\n----------------------------------------\n\nTITLE: Setting Ping Threshold for SMTP Server\nDESCRIPTION: Example of configuring the ping_threshold option, which defines the minimum time between messages before pinging the SMTP server.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$dsn = 'smtps://smtp.example.com?ping_threshold=200'\n```\n\n----------------------------------------\n\nTITLE: Excluding Properties in MapEntity Query\nDESCRIPTION: Demonstrates using the exclude option in MapEntity to exclude specific route parameters from being used in the entity query.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine.rst#2025-04-22_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n#[Route('/product/{slug}/{date}')]\npublic function show(\n    #[MapEntity(exclude: ['date'])]\n    Product $product,\n    \\DateTime $date\n): Response\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Symfony Local Web Server for Mercure\nDESCRIPTION: Command to start the Symfony Local Web Server without TLS for Mercure hub compatibility.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mercure.rst#2025-04-22_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\n$ symfony server:start --no-tls -d\n```\n\n----------------------------------------\n\nTITLE: Stacking Decorators in YAML Configuration\nDESCRIPTION: This YAML configuration demonstrates how to create a stack of ordered services, each decorating the next, in Symfony.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/service_decoration.rst#2025-04-22_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nservices:\n    decorated_foo_stack:\n        stack:\n            - class: Baz\n              arguments: ['@.inner']\n            - class: Bar\n              arguments: ['@.inner']\n            - class: Foo\n\n    # using the short syntax:\n    decorated_foo_stack:\n        stack:\n            - Baz: ['@.inner']\n            - Bar: ['@.inner']\n            - Foo: ~\n\n    # can be simplified when autowiring is enabled:\n    decorated_foo_stack:\n        stack:\n            - Baz: ~\n            - Bar: ~\n            - Foo: ~\n```\n\n----------------------------------------\n\nTITLE: Configuring TimeType Field with DateTime Input in Symfony\nDESCRIPTION: This snippet demonstrates how to configure a TimeType field for a 'startTime' property that uses a DateTime object as its underlying data. It sets up the field to be rendered as two choice fields.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/time.rst#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\TimeType;\n// ...\n\n$builder->add('startTime', TimeType::class, [\n    'input'  => 'datetime',\n    'widget' => 'choice',\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Script Defer Attribute in webpack_encore.yaml\nDESCRIPTION: Shows how to configure the webpack_encore.yaml file to disable the defer attribute on script tags, which is important for proper jQuery initialization order.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/legacy-applications.rst#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/webpack_encore.yaml\nwebpack_encore:\n    # ...\n    script_attributes:\n        defer: false\n```\n\n----------------------------------------\n\nTITLE: Implementing Time Constraint Using PHP Method in Symfony\nDESCRIPTION: A PHP implementation example showing how to apply the Time constraint through the loadValidatorMetadata method. This configures validation to ensure the startsAt property contains a valid time string.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Time.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Event.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Event\n{\n   /**\n    * @var string A \"H:i:s\" formatted value\n    */\n    protected string $startsAt;\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('startsAt', new Assert\\Time());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Symfony UuidFactory with YAML\nDESCRIPTION: Defines configuration options for the UuidFactory service under the `framework.uid` key in a `config/packages/uid.yaml` file. Options include setting the default UUID version, versions for name-based and time-based generation, the namespace for name-based UUIDs, and the node for time-based UUIDs.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/uid.rst#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/uid.yaml\nframework:\n    uid:\n        default_uuid_version: 7\n        name_based_uuid_version: 5\n        name_based_uuid_namespace: 6ba7b810-9dad-11d1-80b4-00c04fd430c8\n        time_based_uuid_version: 7\n        time_based_uuid_node: 121212121212\n```\n\n----------------------------------------\n\nTITLE: Configuring Caddy Server for Symfony with PHP-FPM - NGINX (Caddyfile Syntax)\nDESCRIPTION: This Caddy server configuration demonstrates serving a Symfony application with direct static asset support, PHP-FPM integration, and access restrictions for non-front PHP files. It uses file_server for static content, php_fastcgi for application handling, allows custom environment variables, and includes logic to 404 all PHP files except index.php. Requires Caddy 2.x and PHP-FPM. Root path and FastCGI address may need to be adjusted for different deployments.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/web_server_configuration.rst#2025-04-22_snippet_3\n\nLANGUAGE: nginx\nCODE:\n```\n# /etc/caddy/Caddyfile\nexample.com, www.example.com {\n    root * /var/www/project/public\n\n    # serve files directly if they can be found (e.g. CSS or JS files in public/)\n    encode zstd gzip\n    file_server\n\n    # otherwise, use PHP-FPM (replace \"unix//var/...\" with \"127.0.0.1:9000\" when using TCP)\n    php_fastcgi unix//var/run/php/php8.3-fpm.sock {\n        # only fall back to root index.php aka front controller.\n        try_files {path} index.php\n\n        # optionally set the value of the environment variables used in the application\n        # env APP_ENV \"prod\"\n        # env APP_SECRET \"<app-secret-id>\"\n        # env DATABASE_URL \"mysql://db_user:db_pass@host:3306/db_name\"\n\n        # Configure the FastCGI to resolve any symlinks in the root path.\n        # This ensures that OpCache is using the destination filenames,\n        # instead of the symlinks, to cache opcodes and php files see\n        # https://caddy.community/t/root-symlink-folder-updates-and-caddy-reload-not-working/10557\n        resolve_root_symlink\n    }\n\n    # return 404 for all other php files not matching the front controller\n    # this prevents access to other php files you don't want to be accessible.\n    @phpFile {\n        path *.php*\n    }\n    error @phpFile \"Not found\" 404\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using Count Validator with PHP Code Configuration in Symfony\nDESCRIPTION: Example of implementing the Count validator using PHP code configuration by loading validator metadata to ensure an emails property contains between 1 and 5 elements.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Count.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Participant.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Participant\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('emails', new Assert\\Count(\n            min: 1,\n            max: 5,\n            minMessage: 'You must specify at least one email',\n            maxMessage: 'You cannot specify more than {{ limit }} emails',\n        ));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Debugging Used Translations in Symfony\nDESCRIPTION: Shows the debug:translation command output when a message is properly translated in French and used in templates. The empty state indicates the message is properly translated and used.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/translation.rst#2025-04-22_snippet_45\n\nLANGUAGE: terminal\nCODE:\n```\n$ php bin/console debug:translation fr\n\n---------  ------------------  ----------------------  -------------------------------\n State      Id                  Message Preview (fr)    Fallback Message Preview (en)\n---------  ------------------  ----------------------  -------------------------------\n            Symfony is great    Symfony est génial      Symfony is great\n---------  ------------------  ----------------------  -------------------------------\n```\n\n----------------------------------------\n\nTITLE: Configuring Doctrine DBAL in YAML Format\nDESCRIPTION: YAML configuration for Doctrine DBAL showing all possible options including database connection parameters, driver options, and custom types.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/doctrine.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndoctrine:\n    dbal:\n        dbname:               database\n        host:                 localhost\n        port:                 1234\n        user:                 user\n        password:             secret\n        driver:               pdo_mysql\n        # if the url option is specified, it will override the above config\n        url:                  mysql://db_user:db_password@127.0.0.1:3306/db_name\n        # the DBAL driverClass option\n        driver_class:         App\\DBAL\\MyDatabaseDriver\n        # the DBAL driverOptions option\n        options:\n            foo: bar\n        path:                 '%kernel.project_dir%/var/data/data.sqlite'\n        memory:               true\n        unix_socket:          /tmp/mysql.sock\n        # the DBAL wrapperClass option\n        wrapper_class:        App\\DBAL\\MyConnectionWrapper\n        charset:              utf8mb4\n        logging:              '%kernel.debug%'\n        platform_service:     App\\DBAL\\MyDatabasePlatformService\n        server_version:       '8.0.37'\n        mapping_types:\n            enum: string\n        types:\n            custom: App\\DBAL\\MyCustomType\n```\n\n----------------------------------------\n\nTITLE: Creating Symbolic Link for Local Bundle Testing\nDESCRIPTION: Command to create a symbolic link from the vendor directory to a local bundle for testing in a Symfony 3 application without installing it through Composer.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/bundles.rst#2025-04-22_snippet_4\n\nLANGUAGE: terminal\nCODE:\n```\n$ ln -s /path/to/your/local/bundle/ vendor/you-vendor-name/your-bundle-name\n```\n\n----------------------------------------\n\nTITLE: Using Static Callback from Different Class (XML)\nDESCRIPTION: Example of using a static callback method from a different class for the Choice constraint in XML configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Choice.rst#2025-04-22_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\Author\">\n        <property name=\"genre\">\n            <constraint name=\"Choice\">\n                <option name=\"callback\">\n                    <value>App\\Entity\\Genre</value>\n                    <value>getGenres</value>\n                </option>\n            </constraint>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Configuring Required Badges in Symfony Firewall (PHP)\nDESCRIPTION: This PHP configuration sets up required badges for a Symfony firewall. The requiredBadges method is called on the firewall configuration object with an array of badge classes that must be present on the authenticated passport.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/security.rst#2025-04-22_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/security.php\nuse Symfony\\Config\\SecurityConfig;\n\nreturn static function (SecurityConfig $security): void {\n    $mainFirewall = $security->firewall('main');\n    $mainFirewall->requiredBadges(['CsrfTokenBadge', 'My\\Badge']);\n    // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Invokable Factory Service - Symfony PHP Configurator - php\nDESCRIPTION: Demonstrates how to configure a service in PHP using Symfony's ContainerConfigurator, linking a service to its invokable factory. Dependencies (NewsletterManager, InvokableNewsletterManagerFactory) must be available. Returns a closure to set up the DI container, registering the factory for NewsletterManager.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/factories.rst#2025-04-22_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nuse App\\Email\\NewsletterManager;\nuse App\\Email\\NewsletterManagerFactory;\n\nreturn function(ContainerConfigurator $container): void {\n    $services = $container->services();\n\n    $services->set(NewsletterManager::class)\n        ->factory(service(InvokableNewsletterManagerFactory::class));\n};\n\n```\n\n----------------------------------------\n\nTITLE: Using Callback with Choice Constraint (YAML)\nDESCRIPTION: Example of using a callback method to provide choices for the Choice constraint in YAML configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Choice.rst#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Author:\n    properties:\n        genre:\n            - Choice: { callback: getGenres }\n```\n\n----------------------------------------\n\nTITLE: Creating Profiler Service Alias in XML\nDESCRIPTION: XML configuration to create an alias for the profiler service, making it available for dependency injection in controllers.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/profiler.rst#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services_dev.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"Symfony\\Component\\HttpKernel\\Profiler\\Profiler\" alias=\"profiler\"/>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Defining Email Validation Using XML in Symfony\nDESCRIPTION: Example of validating an email property using XML configuration in Symfony. This demonstrates how to define the constraint with custom error message in a separate validation XML file.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Email.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\Author\">\n        <property name=\"email\">\n            <constraint name=\"Email\">\n                <option name=\"message\">The email \"{{ value }}\" is not a valid email.</option>\n            </constraint>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Converting Between String Object Types and Byte Extraction (PHP)\nDESCRIPTION: This snippet demonstrates conversions between ByteString, CodePointString, and UnicodeString via instance methods. It also shows how to specify target or source encodings, and how to extract raw bytes at specific string positions. These methods are helpful for byte-level or Unicode handling. Inputs are String objects and optional encoding parameters; outputs are converted String objects or arrays of bytes.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/string.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$foo = ByteString::fromRandom(12)->toCodePointString();\n$foo = (new CodePointString('hello'))->toUnicodeString();\n$foo = UnicodeString::fromCodePoints(0x68, 0x65, 0x6C, 0x6C, 0x6F)->toByteString();\n\n// the optional $toEncoding argument defines the encoding of the target string\n$foo = (new CodePointString('hello'))->toByteString('Windows-1252');\n// the optional $fromEncoding argument defines the encoding of the original string\n$foo = (new ByteString('さよなら'))->toCodePointString('ISO-2022-JP');\n\n// ('नमस्ते' bytes = [224, 164, 168, 224, 164, 174, 224, 164, 184,\n//                  224, 165, 141, 224, 164, 164, 224, 165, 135])\nb('नमस्ते')->bytesAt(0);   // [224]\nu('नमस्ते')->bytesAt(0);   // [224, 164, 168]\n\nb('नमस्ते')->bytesAt(1);   // [164]\nu('नमस्ते')->bytesAt(1);   // [224, 164, 174];\n```\n\n----------------------------------------\n\nTITLE: Preloading Assets with Nopush Option in Twig\nDESCRIPTION: Twig code demonstrating how to preload an asset without pushing it, using the nopush option.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/web_link.rst#2025-04-22_snippet_4\n\nLANGUAGE: html+twig\nCODE:\n```\n<head>\n    <!-- ... -->\n    <link rel=\"preload\" href=\"{{ preload('/app.css', {as: 'style', nopush: true}) }}\" as=\"style\">\n    <!-- ... -->\n</head>\n```\n\n----------------------------------------\n\nTITLE: Setting Placeholder for TimeType Field in Symfony\nDESCRIPTION: This snippet demonstrates how to set a placeholder for a TimeType field. When the widget option is set to 'choice', this placeholder will be used as the blank value for all select boxes.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/time.rst#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$builder->add('startTime', TimeType::class, [\n    'placeholder' => 'Select a value',\n]);\n```\n\n----------------------------------------\n\nTITLE: Enabling ESI Support in Varnish for Symfony\nDESCRIPTION: These configurations enable Edge Side Includes (ESI) support in Varnish for Symfony applications by adding necessary headers and parsing responses.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/http_cache/varnish.rst#2025-04-22_snippet_3\n\nLANGUAGE: varnish4\nCODE:\n```\nsub vcl_recv {\n    // Add a Surrogate-Capability header to announce ESI support.\n    set req.http.Surrogate-Capability = \"abc=ESI/1.0\";\n}\n```\n\nLANGUAGE: varnish4\nCODE:\n```\nsub vcl_backend_response {\n    // Check for ESI acknowledgement and remove Surrogate-Control header\n    if (beresp.http.Surrogate-Control ~ \"ESI/1.0\") {\n        unset beresp.http.Surrogate-Control;\n        set beresp.do_esi = true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a Deprecation Baseline File - Terminal - terminal\nDESCRIPTION: This command generates a baseline file containing currently triggered deprecations, to be ignored in future test runs. By setting SYMFONY_DEPRECATIONS_HELPER with 'generateBaseline=true' and specifying a 'baselineFile', it collects all deprecations encountered during the PHPUnit run and saves them in JSON format at the provided path. Input is the test run; output is a JSON file listing baseline deprecations.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/phpunit_bridge.rst#2025-04-22_snippet_10\n\nLANGUAGE: terminal\nCODE:\n```\n$ SYMFONY_DEPRECATIONS_HELPER='generateBaseline=true&baselineFile=./tests/allowed.json' ./vendor/bin/simple-phpunit\n```\n\n----------------------------------------\n\nTITLE: Making a Service Public via Configuration Files\nDESCRIPTION: Shows how to explicitly mark a service (`App\\Service\\Foo`) as public within Symfony service configuration files (YAML, XML, PHP). Public services can be retrieved directly from the container using `$container->get()`. By default, services are private.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/alias_private.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nservices:\n    # ...\n\n    App\\Service\\Foo:\n        public: true\n```\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"App\\Service\\Foo\" public=\"true\"/>\n    </services>\n</container>\n```\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nuse App\\Service\\Foo;\n\nreturn function(ContainerConfigurator $container): void {\n    $services = $container->services();\n\n    $services->set(Foo::class)\n        ->public();\n};\n```\n\n----------------------------------------\n\nTITLE: Linting Twig Templates using Symfony Console Command\nDESCRIPTION: Shows how to use the lint:twig command to check Twig templates for syntax errors. Includes options for checking specific directories, individual templates, and showing deprecations.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/templates.rst#2025-04-22_snippet_31\n\nLANGUAGE: shell\nCODE:\n```\n# check all the application templates\n$ php bin/console lint:twig\n\n# you can also check directories and individual templates\n$ php bin/console lint:twig templates/email/\n$ php bin/console lint:twig templates/article/recent_list.html.twig\n\n# you can also show the deprecated features used in your templates\n$ php bin/console lint:twig --show-deprecations templates/email/\n\n# you can also excludes directories\n$ php bin/console lint:twig templates/ --excludes=data_collector --excludes=dev_tool\n```\n\n----------------------------------------\n\nTITLE: Compiling Assets for Production\nDESCRIPTION: Terminal command to compile assets for production environment, which copies files from mapped directories to public/assets/ for direct web server access.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/asset_mapper.rst#2025-04-22_snippet_3\n\nLANGUAGE: terminal\nCODE:\n```\n$ php bin/console asset-map:compile\n```\n\n----------------------------------------\n\nTITLE: Creating Periodical Triggers with Various Time Formats in PHP\nDESCRIPTION: Shows how to create recurring messages with different time intervals using string, integer or DateInterval formats.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/scheduler.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nRecurringMessage::every('10 seconds', new Message());\nRecurringMessage::every('3 weeks', new Message());\nRecurringMessage::every('first Monday of next month', new Message());\n```\n\n----------------------------------------\n\nTITLE: Defining toctree Structure in Sphinx Documentation for Symfony\nDESCRIPTION: This snippet defines a table of contents tree (toctree) in reStructuredText format for Sphinx documentation. It includes links to fundamental Symfony documentation pages with a maximum depth of 1 for the hierarchical structure.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/getting_started/index.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :maxdepth: 1\n\n    /setup\n    /page_creation\n    /routing\n    /controller\n    /templates\n    /configuration\n```\n\n----------------------------------------\n\nTITLE: Converting Symfony HttpFoundation Response to PSR-7 Response - PHP\nDESCRIPTION: Shows how to convert a Symfony HttpFoundation Response to a PSR-7 Response using the PsrHttpFactory. Requires nyholm/psr7, symfony/psr-http-message-bridge, and symfony/http-foundation. Takes a Symfony Response as input and returns a PSR-7 Response implementing ResponseInterface. The appropriate PSR-17 factory instance must be passed to the PsrHttpFactory.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/psr7.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Nyholm\\Psr7\\Factory\\Psr17Factory;\nuse Symfony\\Bridge\\PsrHttpMessage\\Factory\\PsrHttpFactory;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\n$symfonyResponse = new Response('Content');\n\n$psr17Factory = new Psr17Factory();\n$psrHttpFactory = new PsrHttpFactory($psr17Factory, $psr17Factory, $psr17Factory, $psr17Factory);\n$psrResponse = $psrHttpFactory->createResponse($symfonyResponse);\n```\n\n----------------------------------------\n\nTITLE: Configuring Firewall Method Restriction - Symfony YAML\nDESCRIPTION: Illustrates restricting firewall activation to only certain HTTP methods (GET and POST) in Symfony using YAML configuration with the \"methods\" key. Applicable within \"config/packages/security.yaml\". Accepts an array of allowed HTTP methods as strings; request methods are case sensitive.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/firewall_restriction.rst#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\n\n# ...\nsecurity:\n    firewalls:\n        secured_area:\n            methods: [GET, POST]\n            # ...\n```\n\n----------------------------------------\n\nTITLE: Compiling Standalone CSS Files with addStyleEntry\nDESCRIPTION: Shows how to compile a standalone CSS file without associated JavaScript using the addStyleEntry method in Webpack Encore configuration. This is an alternative approach though not recommended.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/simple-example.rst#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// webpack.config.js\nEncore\n    // ...\n\n    .addStyleEntry('some_page', './assets/styles/some_page.css')\n;\n```\n\n----------------------------------------\n\nTITLE: Registering NEON Encoder Service in PHP\nDESCRIPTION: PHP configuration for registering the NeonEncoder as a service with the serializer.encoder tag using Symfony's container configurator.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer/encoders.rst#2025-04-22_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nuse App\\Serializer\\NeonEncoder;\n\nreturn function(ContainerConfigurator $container) {\n    // ...\n\n    $services->set(NeonEncoder::class)\n        ->tag('serializer.encoder')\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Validation Constraints in YAML\nDESCRIPTION: Demonstrates how to add validation constraints to entity properties using YAML configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/forms.rst#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Task:\n    properties:\n        task:\n            - NotBlank: ~\n        dueDate:\n            - NotBlank: ~\n            - Type: \\DateTimeInterface\n```\n\n----------------------------------------\n\nTITLE: Customizing Allowed Role and Parameter for switch_user (YAML)\nDESCRIPTION: Changes the required role to ROLE_ADMIN and the switch-user query parameter to _want_to_be_this_user using YAML configuration. Should be placed in config/packages/security.yaml. Only users with ROLE_ADMIN can now impersonate, and the trigger parameter in requests must match the new name.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/impersonating_user.rst#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\\nsecurity:\\n    # ...\\n\\n    firewalls:\\n        main:\\n            # ...\\n            switch_user: { role: ROLE_ADMIN, parameter: _want_to_be_this_user }\n```\n\n----------------------------------------\n\nTITLE: Configuring JsonFormatter for Monolog in PHP\nDESCRIPTION: This PHP configuration snippet illustrates how to set up a stream handler for Monolog using the JsonFormatter in a Symfony project. It uses the MonologConfig class to define the handler type, logging level, and formatter.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/logging/formatter.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/prod/monolog.php (and/or config/packages/dev/monolog.php)\nuse Symfony\\Config\\MonologConfig;\n\nreturn static function (MonologConfig $monolog): void {\n    $monolog->handler('file')\n        ->type('stream')\n        ->level('debug')\n        ->formatter('monolog.formatter.json')\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Using t Function and trans Filter in Twig\nDESCRIPTION: Demonstrates using the `t` function to create a `Translatable` object for the 'message' key within the 'blog' domain, providing the '%name%' parameter. The result is then passed to the `trans` filter, which renders the final output 'Hello John'.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#2025-04-22_snippet_35\n\nLANGUAGE: twig\nCODE:\n```\n{{ t(message = 'message', parameters = {'%name%': 'John'}, domain = 'blog')|trans }}\n{# output: Hello John #}\n```\n\n----------------------------------------\n\nTITLE: Serving Symfony Documentation Locally with PHP\nDESCRIPTION: This snippet demonstrates how to serve the locally built Symfony documentation using PHP's built-in web server. It assumes the documentation has already been built using the previous steps.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ php -S localhost:8000 -t output/\n```\n\n----------------------------------------\n\nTITLE: Importing Service Configuration in XML\nDESCRIPTION: Demonstrates how to import external configuration files using the 'imports' directive in XML. The example shows importing a single file and a whole directory while maintaining default service configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/import.rst#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <imports>\n        <import resource=\"services/mailer.xml\"/>\n        <!-- If you want to import a whole directory: -->\n        <import resource=\"services/\"/>\n    </imports>\n\n    <services>\n        <defaults autowire=\"true\" autoconfigure=\"true\"/>\n\n        <prototype namespace=\"App\\\" resource=\"../src/*\"/>\n\n        <!-- ... -->\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Defining Choice Constraint in XML\nDESCRIPTION: Example of using the Choice constraint in XML configuration to validate city and genre properties.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Choice.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\Author\">\n        <property name=\"city\">\n            <constraint name=\"Choice\">\n                <value>New York</value>\n                <value>Berlin</value>\n                <value>Tokyo</value>\n            </constraint>\n        </property>\n        <property name=\"genre\">\n            <constraint name=\"Choice\">\n                <option name=\"choices\">\n                    <value>fiction</value>\n                    <value>non-fiction</value>\n                </option>\n                <option name=\"message\">Choose a valid genre.</option>\n            </constraint>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Loading Extensions in Symfony Container Builder\nDESCRIPTION: Demonstrates how to register and load a container extension in Symfony. This process ensures the extension is included when the container is compiled.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/dependency_injection/compilation.rst#2025-04-22_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\DependencyInjection\\ContainerBuilder;\n\n$container = new ContainerBuilder();\n$extension = new AcmeDemoExtension();\n$container->registerExtension($extension);\n$container->loadFromExtension($extension->getAlias());\n$container->compile();\n```\n\n----------------------------------------\n\nTITLE: Configuring Encore for Subdirectory Deployment\nDESCRIPTION: Webpack configuration modifications needed when the application is deployed under a subdirectory rather than at the web server root.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/faq.rst#2025-04-22_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n  // webpack.config.js\n  Encore\n      // ...\n\n      .setOutputPath('public/build/')\n\n-     .setPublicPath('/build')\n+     // this is your *true* public path\n+     .setPublicPath('/myAppSubdir/build')\n\n+     // this is now needed so that your manifest.json keys are still `build/foo.js`\n+     // (which is a file that's used by Symfony's `asset()` function)\n+     .setManifestKeyPrefix('build')\n  ;\n```\n\n----------------------------------------\n\nTITLE: Traditional Module Import in JavaScript\nDESCRIPTION: Example showing the standard way of importing a VideoPlayer module, where the module is included in the main bundle regardless of usage.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/code-splitting.rst#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// assets/app.js\n\nimport $ from 'jquery';\n// a fictional \"large\" module (e.g. it imports video.js internally)\nimport VideoPlayer from './components/VideoPlayer';\n\n$('.js-open-video').on('click', function() {\n    // use the larger VideoPlayer module\n    const player = new VideoPlayer('some-element');\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing DoctrineDbalPostgreSqlStore for Symfony Lock Component\nDESCRIPTION: Creates a DoctrineDbalPostgreSqlStore instance using a Doctrine DBAL Connection or URL. This store uses PostgreSQL's Advisory Locks and supports native blocking and shared locks.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/lock.rst#2025-04-22_snippet_22\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Lock\\Store\\DoctrineDbalPostgreSqlStore;\n\n// a Doctrine Connection or DSN\n$databaseConnectionOrDSN = 'postgresql+advisory://myuser:mypassword@127.0.0.1:5634/lock';\n$store = new DoctrineDbalPostgreSqlStore($databaseConnectionOrDSN);\n```\n\n----------------------------------------\n\nTITLE: Configuring Enum Environment Variable in XML\nDESCRIPTION: Demonstrates how to configure an enum environment variable in a Symfony XML configuration file. It uses the 'enum' processor to convert a string value to an enum.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/env_var_processors.rst#2025-04-22_snippet_36\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony\n        https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <parameters>\n        <parameter key=\"suit\">%env(enum:App\\Enum\\Suit:CARD_SUIT)%</parameter>\n    </parameters>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Variables in Twig XML\nDESCRIPTION: Demonstrates how to define global variables for Twig templates in the XML configuration file.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/templates.rst#2025-04-22_snippet_17\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/twig.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:twig=\"http://symfony.com/schema/dic/twig\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/twig\n        https://symfony.com/schema/dic/twig/twig-1.0.xsd\">\n\n    <twig:config>\n        <!-- ... -->\n        <twig:global key=\"ga_tracking\">UA-xxxxx-x</twig:global>\n    </twig:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dump Destination in Symfony using YAML\nDESCRIPTION: This YAML code configures the debug bundle in a Symfony application to define the dump_destination for dumped data via the debug service. The endpoint is set using a TCP URL referencing an environment variable (VAR_DUMPER_SERVER). Prerequisites: the file config/packages/debug.yaml exists, the debug bundle is installed, and the environment variable is set. This option determines where dump output is sent.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/var_dumper.rst#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/debug.yaml\ndebug:\n   dump_destination: \"tcp://%env(VAR_DUMPER_SERVER)%\"\n```\n\n----------------------------------------\n\nTITLE: Using ESI Tags in HTML Template\nDESCRIPTION: Example of using Edge Side Includes (ESI) tags for partial page caching.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/create_framework/http_kernel_httpkernelinterface.rst#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\nThis is the content of your page\n\nIs 2012 a leap year? <esi:include src=\"/leapyear/2012\"/>\n\nSome other content\n```\n\n----------------------------------------\n\nTITLE: Injecting Anonymous Services in Symfony via PHP Configurator\nDESCRIPTION: Uses the PHP ContainerConfigurator to define a Foo service that receives an inline AnonymousBar instance as an argument. Dependencies: Symfony DependencyInjection PHP config, ContainerConfigurator. The inline_service() helper is used in the PHP DSL to create an anonymous service. Limitation: explicit autowiring/autoconfiguration must be called per service if needed.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/alias_private.rst#2025-04-22_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\\nnamespace Symfony\\\\Component\\\\DependencyInjection\\\\Loader\\\\Configurator;\\n\\nuse App\\\\AnonymousBar;\\nuse App\\\\Foo;\\n\\nreturn function(ContainerConfigurator $container): void {\\n    $services = $container->services();\\n\\n    $services->set(Foo::class)\\n        ->args([inline_service(AnonymousBar::class)]);\\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Assets Base Path (PHP)\nDESCRIPTION: Example of configuring the base path for assets in the FrameworkBundle using PHP configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/framework.php\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework): void {\n    // ...\n    $framework->assets()\n        ->basePath('/images');\n};\n```\n\n----------------------------------------\n\nTITLE: Various Number Formats in YAML\nDESCRIPTION: Demonstrates different number formats including integers, octals, hexadecimals, floats, and exponential numbers.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/formats/yaml.rst#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# an integer\n12\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# an octal\n0o14\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# an hexadecimal\n0xC\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# a float\n13.4\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# an exponential number\n1.2e+34\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# infinity\n.inf\n```\n\n----------------------------------------\n\nTITLE: Defining Translations in XLIFF for Symfony\nDESCRIPTION: Example of an XLIFF (XML) translation file (`translations/blog.en.xlf`) defining a translation unit for `message` with source text and the target translation 'Hello %name%'. This is an alternative format for Symfony translations.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#2025-04-22_snippet_33\n\nLANGUAGE: xml\nCODE:\n```\n<!-- translations/blog.en.xlf -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<xliff version=\"1.2\" xmlns=\"urn:oasis:names:tc:xliff:document:1.2\">\n    <file source-language=\"en\" datatype=\"plaintext\" original=\"file.ext\">\n        <body>\n            <trans-unit id=\"message\">\n                <source>message</source>\n                <target>Hello %name%</target>\n            </trans-unit>\n        </body>\n    </file>\n</xliff>\n```\n\n----------------------------------------\n\nTITLE: Dumping YAML with Custom Indentation in PHP\nDESCRIPTION: Illustrates using the third argument (`indent`) of `Yaml::dump` to specify the number of spaces used for indentation. Here, indentation is set to 8 spaces instead of the default 4.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/yaml.rst#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n// uses 8 spaces for indentation\necho Yaml::dump($array, 2, 8);\n```\n\n----------------------------------------\n\nTITLE: Implementing UserPassword Constraint with PHP Code\nDESCRIPTION: Example demonstrating how to set up the UserPassword constraint programmatically using PHP code in a model class. Uses ClassMetadata to add the constraint to the oldPassword property.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/UserPassword.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Form/Model/ChangePassword.php\nnamespace App\\Form\\Model;\n\nuse Symfony\\Component\\Security\\Core\\Validator\\Constraints as SecurityAssert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass ChangePassword\n{\n    // ...\n\n    public static function loadValidatorData(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint(\n            'oldPassword',\n            new SecurityAssert\\UserPassword([\n                'message' => 'Wrong value for your current password',\n            ])\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Image Inclusion in Symfony Docs\nDESCRIPTION: This snippet shows how to include images and diagrams in Symfony documentation using ReStructuredText, including proper alt text usage.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/contributing/documentation/standards.rst#2025-04-22_snippet_3\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. image:: /_images/example-screenshot.png\n    :alt: Some concise description of the screenshot.\n\n.. raw:: html\n\n    <object data=\"_images/example-diagram.svg\" type=\"image/svg+xml\"\n        alt=\"Some concise description.\"\n    ></object>\n```\n\n----------------------------------------\n\nTITLE: Injecting Anonymous Services in Symfony via XML Configuration\nDESCRIPTION: Configures a service Foo with an anonymous service App\\AnonymousBar as its argument in XML format. Dependencies: Symfony Dependency Injection, XML service schema. The argument is defined as a 'service' child within the main service's arguments. Ensures Foo receives an inline-created AnonymousBar. Limitation: anonymous services in XML also require explicit autowiring/autoconfiguration if desired.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/alias_private.rst#2025-04-22_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services.xml -->\\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\\n<container xmlns=\\\"http://symfony.com/schema/dic/services\\\"\\n    xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n    xsi:schemaLocation=\\\"http://symfony.com/schema/dic/services\\n        https://symfony.com/schema/dic/services/services-1.0.xsd\\\">\\n\\n    <services>\\n        <service id=\\\"foo\\\" class=\\\"App\\\\Foo\\\">\\n            <argument type=\\\"service\\\">\\n                <service class=\\\"App\\\\AnonymousBar\\\"/>\\n            </argument>\\n        </service>\\n    </services>\\n</container>\n```\n\n----------------------------------------\n\nTITLE: Defining MacAddress Constraint in XML\nDESCRIPTION: Example showing how to configure the MacAddress constraint using XML validation configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/MacAddress.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\Device\">\n        <property name=\"max\">\n            <constraint name=\"MacAddress\"/>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Casting HTTP Port Environment Variable in Symfony with XML Configuration\nDESCRIPTION: Demonstrates using the int processor to convert HTTP_PORT from an environment variable to an integer in a Symfony XML configuration file. This requires the correct Symfony XML namespaces and the HTTP_PORT environment variable present. The processed value sets the router's http-port property.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/env_var_processors.rst#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\\n<container xmlns=\\\"http://symfony.com/schema/dic/services\\\"\\n    xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n    xmlns:framework=\\\"http://symfony.com/schema/dic/symfony\\\"\\n    xsi:schemaLocation=\\\"http://symfony.com/schema/dic/services\\n        https://symfony.com/schema/dic/services/services-1.0.xsd\\n        http://symfony.com/schema/dic/symfony\\n        https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\\\">\\n\\n    <framework:config>\\n        <framework:router http-port=\\\"%env(int:HTTP_PORT)%\\\"/>\\n    </framework:config>\\n</container>\\n\n```\n\n----------------------------------------\n\nTITLE: Setting PHPUnit Deprecation Helper via Environment Variable\nDESCRIPTION: Runs PHPUnit tests while setting the `SYMFONY_DEPRECATIONS_HELPER` environment variable directly in the command line before executing the `php ./bin/phpunit` command. This temporarily adjusts the threshold for allowed deprecation notices to a high limit (`max[total]=999999`), overriding any configuration in `phpunit.xml.dist` for this specific run.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/upgrade_major.rst#2025-04-22_snippet_3\n\nLANGUAGE: terminal\nCODE:\n```\n$ SYMFONY_DEPRECATIONS_HELPER=max[total]=999999 php ./bin/phpunit\n```\n\n----------------------------------------\n\nTITLE: Configuring ResolveTargetEntityListener in YAML\nDESCRIPTION: YAML configuration for Doctrine ORM to resolve the interface to concrete implementation using ResolveTargetEntityListener.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine/resolve_target_entity.rst#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/doctrine.yaml\ndoctrine:\n    # ...\n    orm:\n        # ...\n        resolve_target_entities:\n            App\\Model\\InvoiceSubjectInterface: App\\Entity\\Customer\n```\n\n----------------------------------------\n\nTITLE: Configuring Callback Validation in YAML\nDESCRIPTION: Demonstrates how to configure a callback validator using YAML format in Symfony's validation configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Callback.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Author:\n    constraints:\n        - Callback: validate\n```\n\n----------------------------------------\n\nTITLE: Symfony Asset Package Installation\nDESCRIPTION: Command to install the Symfony Asset component via Composer\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/asset.rst#2025-04-22_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require symfony/asset\n```\n\n----------------------------------------\n\nTITLE: Integrating Symfony Request and Response in PHP\nDESCRIPTION: This snippet demonstrates how to use Symfony's Request and Response classes in the front controller. It shows how to create a Request object, handle routing, and return a Response object.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/introduction/from_flat_php_to_symfony.rst#2025-04-22_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n// index.php\nrequire_once 'vendor/autoload.php';\n\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\n$request = Request::createFromGlobals();\n\n$uri = $request->getPathInfo();\nif ('/' === $uri) {\n    $response = list_action();\n} elseif ('/show' === $uri && $request->query->has('id')) {\n    $response = show_action($request->query->get('id'));\n} else {\n    $html = '<html><body><h1>Page Not Found</h1></body></html>';\n    $response = new Response($html, Response::HTTP_NOT_FOUND);\n}\n\n// echo the headers and send the response\n$response->send();\n```\n\n----------------------------------------\n\nTITLE: Canonicalizing a File Path using Symfony Path (PHP)\nDESCRIPTION: This snippet demonstrates the use of Symfony\\Component\\Filesystem\\Path::canonicalize to simplify and standardize file paths according to multiple rules (such as resolving '.' and '..', converting backslashes, and properly handling root paths). It works for both absolute and relative paths and returns malformed paths unchanged. Prerequisite: Symfony\\Component\\Filesystem\\Path. Parameter: a string path. Output: canonicalized path string.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/filesystem.rst#2025-04-22_snippet_21\n\nLANGUAGE: php\nCODE:\n```\necho Path::canonicalize('/var/www/vhost/webmozart/../config.ini');\n// => /var/www/vhost/config.ini\n```\n\nLANGUAGE: php\nCODE:\n```\necho Path::canonicalize('../uploads/../config/config.yaml');\n// => ../config/config.yaml\n```\n\nLANGUAGE: php\nCODE:\n```\necho Path::canonicalize('C:Programs/PHP/php.ini');\n// => C:Programs/PHP/php.ini\n```\n\n----------------------------------------\n\nTITLE: Registering Service with Constructor Option - XML Configuration\nDESCRIPTION: Shows how to configure the construct method used for service instantiation in XML by setting the 'constructor' attribute on the NewsletterManager service. This will direct Symfony's container to use the specified static method as a factory. Should go into 'config/services.xml'.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/factories.rst#2025-04-22_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"App\\Email\\NewsletterManager\" constructor=\"create\">\n        </service>\n    </services>\n</container>\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Composer Scripts for Multiple Symfony Applications\nDESCRIPTION: JSON configuration for Composer auto-scripts section that runs commands for multiple applications simultaneously. This example shows cache:clear and assets:install for both api and admin applications.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/multiple_kernels.rst#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"scripts\": {\n        \"auto-scripts\": {\n            \"cache:clear -iapi\": \"symfony-cmd\",\n            \"cache:clear -iadmin\": \"symfony-cmd\",\n            \"assets:install %PUBLIC_DIR% -iapi\": \"symfony-cmd\",\n            \"assets:install %PUBLIC_DIR% -iadmin --no-cleanup\": \"symfony-cmd\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Controller Routes with PHP Configuration Loader in Symfony - PHP\nDESCRIPTION: This PHP example shows how to import controller routes using a RoutingConfigurator closure in config/routes.php. The $routes->import('../src/Controller', 'attribute') statement tells Symfony to scan the given directory for PHP controllers with route attributes and import their definitions. This method requires the specified directory to contain valid PHP controller classes; upon execution, resulting routes are registered in the route collection. Dependencies include Symfony components and relevant controller files.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/routing/custom_route_loader.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// config/routes.php\\nuse Symfony\\\\Component\\\\Routing\\\\Loader\\\\Configurator\\\\RoutingConfigurator;\\n\\nreturn static function (RoutingConfigurator $routes): void {\\n    $routes->import('../src/Controller', 'attribute');\\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Form Event Listener in Symfony PHP\nDESCRIPTION: This snippet demonstrates adding a form event listener to dynamically modify form fields based on pre-set data. It checks if a friend is already set and adds a friend field if not.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/dynamic_form_modification.rst#2025-04-22_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n$builder->addEventListener(FormEvents::PRE_SET_DATA, function (FormEvent $event) use ($user): void {\n    if (null !== $event->getData()->getFriend()) {\n        // we don't need to add the friend field because\n        // the message will be addressed to a fixed friend\n        return;\n    }\n\n    $form = $event->getForm();\n\n    $formOptions = [\n        'class' => User::class,\n        'choice_label' => 'fullName',\n        'query_builder' => function (UserRepository $userRepository) use ($user): void {\n            // call a method on your repository that returns the query builder\n            // return $userRepository->createFriendsQueryBuilder($user);\n        },\n    ];\n\n    // create the field, this is similar the $builder->add()\n    // field name, field type, field options\n    $form->add('friend', EntityType::class, $formOptions);\n});\n```\n\n----------------------------------------\n\nTITLE: Loading jQuery Module in Webpack Without Global Variable\nDESCRIPTION: Demonstrates how jQuery is loaded as a module in Webpack without setting global variables, which can cause compatibility issues with plugins expecting global jQuery.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/legacy-applications.rst#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// this loads jquery, but does *not* set a global $ or jQuery variable\nconst $ = require('jquery');\n```\n\n----------------------------------------\n\nTITLE: Implementing Luhn Validation with PHP Method in Symfony\nDESCRIPTION: Example of applying the Luhn validation constraint to a credit card number property using PHP method for metadata loading. This approach validates that card numbers comply with the Luhn algorithm.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Luhn.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Transaction.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Transaction\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('cardNumber', new Assert\\Luhn(\n            message: 'Please check your credit card number',\n        ));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Monolog Handlers (XML)\nDESCRIPTION: XML configuration equivalent to the YAML example, showing how to set up Monolog handlers for stream and syslog logging in Symfony.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/logging.rst#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/prod/monolog.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:monolog=\"http://symfony.com/schema/dic/monolog\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/monolog\n        https://symfony.com/schema/dic/monolog/monolog-1.0.xsd\">\n\n    <monolog:config>\n        <!-- this \"file_log\" key could be anything -->\n        <monolog:handler name=\"file_log\"\n            type=\"stream\"\n            path=\"%kernel.logs_dir%/%kernel.environment%.log\"\n            level=\"debug\"/><!-- log *all* messages (debug is lowest level) -->\n\n        <monolog:handler name=\"syslog_handler\"\n            type=\"syslog\"\n            level=\"error\"/><!-- log error-level messages and higher -->\n    </monolog:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Dotenv Path in composer.json\nDESCRIPTION: JSON configuration to specify a custom path for .env files in the Runtime component settings of composer.json.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration.rst#2025-04-22_snippet_34\n\nLANGUAGE: json\nCODE:\n```\n  {\n      // ...\n      \"extra\": {\n          // ...\n          \"runtime\": {\n              \"dotenv_path\": \"my/custom/path/to/.env\"\n          }\n      }\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating Translation Resource in YAML\nDESCRIPTION: Example of a YAML translation resource file for French translations.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/translation.rst#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# translations/messages.fr.yaml\nSymfony is great: Symfony est génial\n```\n\n----------------------------------------\n\nTITLE: Configuring Bootstrap 5 Form Theme in YAML\nDESCRIPTION: Shows how to set up the Bootstrap 5 form theme in the Twig configuration using YAML.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/forms.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/twig.yaml\ntwig:\n    form_themes: ['bootstrap_5_layout.html.twig']\n```\n\n----------------------------------------\n\nTITLE: Configuring CamelCase to snake_case Name Converter in YAML\nDESCRIPTION: YAML configuration for setting up the CamelCase to snake_case name converter in the Symfony Serializer.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer.rst#2025-04-22_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/serializer.yaml\nframework:\n    serializer:\n        name_converter: 'serializer.name_converter.camel_case_to_snake_case'\n```\n\n----------------------------------------\n\nTITLE: Configuring ULID Validation with YAML in Symfony\nDESCRIPTION: Example of configuring the ULID validation constraint using YAML configuration. This validates that the identifier property in the File entity contains a valid ULID.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Ulid.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\File:\n    properties:\n        identifier:\n            - Ulid: ~\n```\n\n----------------------------------------\n\nTITLE: Configuring Validation Constraints with Error Levels in YAML\nDESCRIPTION: This YAML configuration snippet shows how to define validation constraints with different error levels for a User entity. It uses the 'payload' option to set the severity for each constraint.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/validation/severity.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\User:\n    properties:\n        username:\n            - NotBlank:\n                payload:\n                    severity: error\n        password:\n            - NotBlank:\n                payload:\n                    severity: error\n        bankAccountNumber:\n            - Iban:\n                payload:\n                    severity: warning\n```\n\n----------------------------------------\n\nTITLE: Using Passport Attributes in Symfony Authenticator\nDESCRIPTION: Example showing how to store and retrieve custom attributes in a Passport for use across authenticator methods.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/custom_authenticator.rst#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n// ...\nuse Symfony\\Component\\Security\\Http\\Authenticator\\Passport\\Badge\\UserBadge;\n\nclass LoginAuthenticator extends AbstractAuthenticator\n{\n    // ...\n\n    public function authenticate(Request $request): Passport\n    {\n        // ... process the request\n\n        $passport = new SelfValidatingPassport(new UserBadge($username), []);\n\n        // set a custom attribute (e.g. scope)\n        $passport->setAttribute('scope', $oauthScope);\n\n        return $passport;\n    }\n\n    public function createToken(Passport $passport, string $firewallName): TokenInterface\n    {\n        // read the attribute value\n        return new CustomOauthToken($passport->getUser(), $passport->getAttribute('scope'));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Collection Elements with YAML Configuration\nDESCRIPTION: YAML configuration for applying the Collection constraint to validate specific fields of an array with different validation rules.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Collection.rst#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Author:\n    properties:\n        profileData:\n            - Collection:\n                fields:\n                    personal_email:\n                        - Email: ~\n                    short_bio:\n                        - NotBlank: ~\n                        - Length:\n                            max:   100\n                            maxMessage: Your short bio is too long!\n                allowMissingFields: true\n```\n\n----------------------------------------\n\nTITLE: SSL Connection with MySQL in YAML\nDESCRIPTION: YAML configuration for setting up a secure SSL connection to MySQL with Doctrine, using environment variables for SSL certificate paths.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/doctrine.rst#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\ndoctrine:\n    dbal:\n        url: '%env(DATABASE_URL)%'\n        server_version: '8.0.31'\n        driver: 'pdo_mysql'\n        options:\n            # SSL private key\n            !php/const 'PDO::MYSQL_ATTR_SSL_KEY': '%env(MYSQL_SSL_KEY)%'\n            # SSL certificate\n            !php/const 'PDO::MYSQL_ATTR_SSL_CERT': '%env(MYSQL_SSL_CERT)%'\n            # SSL CA authority\n            !php/const 'PDO::MYSQL_ATTR_SSL_CA': '%env(MYSQL_SSL_CA)%'\n```\n\n----------------------------------------\n\nTITLE: Configuring File Constraint in YAML\nDESCRIPTION: Demonstrates how to configure File validation constraints in YAML format, specifying maxSize, allowed extensions, and custom error messages.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/File.rst#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Author:\n    properties:\n        bioFile:\n            - File:\n                maxSize: 1024k\n                extensions: [pdf]\n                extensionsMessage: Please upload a valid PDF\n```\n\n----------------------------------------\n\nTITLE: Configuring Flash Message Importance Mapper for Notifications - XML\nDESCRIPTION: This XML snippet configures the notifier.flash_message_importance_mapper service to use a Bootstrap-style importance mapping for browser notifications. Set in the services section, it attaches the BootstrapFlashMessageImportanceMapper to the relevant service ID. Requires symfony/notifier and proper XML configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/notifier.rst#2025-04-22_snippet_34\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\n<container xmlns=\\\"http://symfony.com/schema/dic/services\\\"\n    xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\n    xsi:schemaLocation=\\\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\\\">\n\n    <services>\n        <service id=\\\"notifier.flash_message_importance_mapper\\\" class=\\\"Symfony\\Component\\Notifier\\FlashMessage\\BootstrapFlashMessageImportanceMapper\\\"/>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Using Versioned Assets in Twig Templates\nDESCRIPTION: Demonstrates how assets are rendered in Twig templates when version parameters are enabled. The asset() function will automatically append version information.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_17\n\nLANGUAGE: html+twig\nCODE:\n```\n<img src=\"{{ asset('images/logo.png') }}\" alt=\"Symfony!\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Symfony Workflow in PHP\nDESCRIPTION: Example configuration for setting up a workflow in Symfony using PHP configuration. Shows how to define a workflow named 'my_workflow' using the FrameworkConfig object.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_92\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/workflow.php\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework): void {\n    $framework->workflows()\n        ->workflows('my_workflow')\n            // ...\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Flexible Collection Rendering in Twig\nDESCRIPTION: Demonstrates a more flexible approach to rendering collection fields with custom HTML structure.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/collection.rst#2025-04-22_snippet_2\n\nLANGUAGE: html+twig\nCODE:\n```\n{{ form_label(form.emails) }}\n{{ form_errors(form.emails) }}\n\n<ul>\n{% for emailField in form.emails %}\n    <li>\n        {{ form_errors(emailField) }}\n        {{ form_widget(emailField) }}\n    </li>\n{% endfor %}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Using Formatted Numbers in Symfony Translations with PHP\nDESCRIPTION: Demonstrates how to use the formatted numbers in PHP code with Symfony translations. The example shows formatting progress percentages and currency values.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/formats/message_format.rst#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n// prints \"82% of the work is done\"\\necho $translator->trans('progress', ['progress' => 0.82]);\\n// prints \"100% of the work is done\"\\necho $translator->trans('progress', ['progress' => 1]);\\n\\n// prints \"This artifact is worth $9,988,776.65\"\\n// if we would translate this to i.e. French, the value would be shown as\\n// \"9 988 776,65 €\"\\necho $translator->trans('value_of_object', ['value' => 9988776.65]);\n```\n\n----------------------------------------\n\nTITLE: Stacking Decorators in XML Configuration\nDESCRIPTION: This XML configuration shows how to create a stack of ordered services, each decorating the next, in Symfony.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/service_decoration.rst#2025-04-22_snippet_20\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\"\n>\n    <services>\n        <stack id=\"decorated_foo_stack\">\n            <service class=\"Baz\">\n                <argument type=\"service\" id=\".inner\"/>\n            </service>\n            <service class=\"Bar\">\n                <argument type=\"service\" id=\".inner\"/>\n            </service>\n            <service class=\"Foo\"/>\n        </stack>\n\n        <!-- can be simplified when autowiring is enabled: -->\n        <stack id=\"decorated_foo_stack\">\n            <service class=\"Baz\"/>\n            <service class=\"Bar\"/>\n            <service class=\"Foo\"/>\n        </stack>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Setting Debug Toolbar Replace Header in PHP\nDESCRIPTION: PHP code to manually set the Symfony-Debug-Toolbar-Replace header to trigger toolbar refresh after AJAX requests.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/profiler.rst#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$response->headers->set('Symfony-Debug-Toolbar-Replace', '1');\n```\n\n----------------------------------------\n\nTITLE: Unicode String Transliteration\nDESCRIPTION: Demonstrates ASCII transliteration of various non-Latin scripts using the ascii() method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/string.rst#2025-04-22_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nu('नमस्ते')->ascii();    // 'namaste'\nu('さよなら')->ascii(); // 'sayonara'\nu('спасибо')->ascii(); // 'spasibo'\n```\n\n----------------------------------------\n\nTITLE: Debugging Serializer Tags from Command Line\nDESCRIPTION: Command to inspect the priorities of normalizers or encoders used in a named serializer in Symfony.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer.rst#2025-04-22_snippet_49\n\nLANGUAGE: bash\nCODE:\n```\n$ php bin/console debug:container --tag serializer.<normalizer|encoder>.<name>\n```\n\n----------------------------------------\n\nTITLE: Checking Path Absoluteness using Symfony Path (PHP)\nDESCRIPTION: This snippet uses Symfony's Path::isAbsolute to determine if a path string represents an absolute path, taking into account platform conventions (Windows and UNIX). The input is a string path, and the output is a boolean. Prerequisite: Symfony\\Component\\Filesystem\\Path.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/filesystem.rst#2025-04-22_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nPath::isAbsolute('C:\\\\Programs\\\\PHP\\\\php.ini')\n// => true\n```\n\n----------------------------------------\n\nTITLE: Configuring Access Decision Strategy in YAML\nDESCRIPTION: Configuration for setting the security access decision strategy to unanimous in YAML format, with options to control behavior when all voters abstain.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/voters.rst#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\nsecurity:\n    access_decision_manager:\n        strategy: unanimous\n        allow_if_all_abstain: false\n```\n\n----------------------------------------\n\nTITLE: XML Output with Root Node Attributes from XmlEncoder\nDESCRIPTION: This XML structure is the result of encoding the PHP array shown previously. It demonstrates how attributes ('attribute1', 'attribute2') can be added directly to the root 'response' element, alongside the nested 'foo' element.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer/encoders.rst#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\"?>\n<response attribute1=\"foo\" attribute2=\"bar\">\n<foo bar=\"value\">baz</foo>\n</response>\n```\n\n----------------------------------------\n\nTITLE: Enabling HTTP Method Override in Symfony (PHP)\nDESCRIPTION: Enables the _method request parameter to override the HTTP method on POST requests by calling Request::enableHttpMethodParameterOverride() before creating the Request object.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_49\n\nLANGUAGE: php\nCODE:\n```\n// public/index.php\n\n// ...\n$kernel = new CacheKernel($kernel);\n\nRequest::enableHttpMethodParameterOverride(); // <-- add this line\n$request = Request::createFromGlobals();\n// ...\n```\n\n----------------------------------------\n\nTITLE: Template Rendering Function Implementation\nDESCRIPTION: Function that handles template rendering by extracting request attributes and including the appropriate template file based on the route.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/create_framework/templating.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction render_template(Request $request): Response\n{\n    extract($request->attributes->all(), EXTR_SKIP);\n    ob_start();\n    include sprintf(__DIR__.'/../src/pages/%s.php', $_route);\n\n    return new Response(ob_get_clean());\n}\n```\n\n----------------------------------------\n\nTITLE: XML Validation Configuration\nDESCRIPTION: Implementation of IsTrue constraint using XML configuration format.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/IsTrue.rst#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\Author\">\n        <getter property=\"tokenValid\">\n            <constraint name=\"IsTrue\">\n                <option name=\"message\">The token is invalid.</option>\n            </constraint>\n        </getter>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Translation Files Path (Symfony, PHP)\nDESCRIPTION: This PHP function configures the framework's translator default_path to a custom location in config/packages/translation.php. It uses Symfony\\Config\\FrameworkConfig's translator() to set the new path, such as %kernel.project_dir%/i18n. Typically placed in the project's PHP configuration files.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/override_dir_structure.rst#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/translation.php\\nuse Symfony\\Config\\FrameworkConfig;\\n\\nreturn static function (FrameworkConfig $framework): void {\\n    $framework->translator()\\n        ->defaultPath('%kernel.project_dir%/i18n')\\n    ;\\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Complex Variables in Twig\nDESCRIPTION: Example of accessing complex variables (objects or arrays) in a Twig template.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/templates.rst#2025-04-22_snippet_5\n\nLANGUAGE: html+twig\nCODE:\n```\n<p>{{ user.name }} added this comment on {{ comment.publishedAt|date }}</p>\n```\n\n----------------------------------------\n\nTITLE: Mapping Local Project Folders in Homestead using YAML\nDESCRIPTION: This YAML snippet configures the 'folders' section in the Homestead configuration file to map the '~/projects' directory from the local machine to '/home/vagrant/projects' inside the virtual machine. This setup ensures that files created or modified on the host are synchronized with the VM. No external dependencies are required, but Homestead and Vagrant should be installed beforehand. Inputs are the folder paths, and the output is synchronized directories between host and VM.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/homestead.rst#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# ...\\nfolders:\\n    - map: ~/projects\\n      to: /home/vagrant/projects\n```\n\n----------------------------------------\n\nTITLE: Running HTTP Requests with Symfony Proxy\nDESCRIPTION: Examples of using the Symfony proxy with various HTTP clients including curl, Blackfire, and Cypress\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/symfony_server.rst#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ https_proxy=$(symfony proxy:url) curl https://my-domain.wip\n\n$ https_proxy=$(symfony proxy:url) blackfire curl https://my-domain.wip\n\n$ https_proxy=$(symfony proxy:url) ./node_modules/bin/cypress open\n```\n\n----------------------------------------\n\nTITLE: Registering Asset Version Strategy as Symfony Service in YAML\nDESCRIPTION: YAML configuration to register the custom GulpBusterVersionStrategy as a Symfony service, specifying the manifest file path and version format.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/custom_version_strategy.rst#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nservices:\n    App\\Asset\\VersionStrategy\\GulpBusterVersionStrategy:\n        arguments:\n            - \"%kernel.project_dir%/busters.json\"\n            - \"%%s?version=%%s\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Bundle Parameters (YAML)\nDESCRIPTION: Example of configuring bundle parameters using YAML format in Symfony services configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/bundles/best_practices.rst#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nparameters:\n    acme_blog.author.email: 'fabien@example.com'\n```\n\n----------------------------------------\n\nTITLE: Configuring OIDC User Info Token Handler (Base URI) - Symfony Security - XML\nDESCRIPTION: This XML configuration activates the OIDC user info token handler for access token authentication, specifying the user info endpoint using the oidc-user-info attribute. Used in config/packages/security.xml, it includes schema and namespace declarations as required by Symfony configuration conventions.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/access_token.rst#2025-04-22_snippet_16\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/security.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<srv:container xmlns=\"http://symfony.com/schema/dic/security\"\n    xmlns:srv=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/security\n        https://symfony.com/schema/dic/security/security-1.0.xsd\">\n\n    <config>\n        <firewall name=\"main\">\n            <access-token>\n                <token-handler oidc-user-info=\"https://www.example.com/realms/demo/protocol/openid-connect/userinfo\"/>\n            </access-token>\n        </firewall>\n    </config>\n</srv:container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Symfony UuidFactory with XML\nDESCRIPTION: Demonstrates configuring the UuidFactory using XML within a `config/packages/uid.xml` file. It sets options like default version, name/time-based versions, namespace, and node using the `<framework:uid>` tag within the Symfony container configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/uid.rst#2025-04-22_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/uid.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n           xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n           xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n                https://symfony.com/schema/dic/services/services-1.0.xsd\n                http://symfony.com/schema/dic/symfony https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <framework:config>\n        <framework:uid\n            default_uuid_version=\"7\"\n            name_based_uuid_version=\"5\"\n            name_based_uuid_namespace=\"6ba7b810-9dad-11d1-80b4-00c04fd430c8\"\n            time_based_uuid_version=\"7\"\n            time_based_uuid_node=\"121212121212\"\n        />\n    </framework:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Object Serialization Filter\nDESCRIPTION: Serializes objects using the Symfony Serializer component\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#2025-04-22_snippet_62\n\nLANGUAGE: twig\nCODE:\n```\n{{ object|serialize(format = 'json', context = []) }}\n```\n\n----------------------------------------\n\nTITLE: Removing symfony/symfony Standard Edition using Composer (terminal)\nDESCRIPTION: Removes the deprecated symfony/symfony metapackage from your project, preparing the application to use individual Symfony components and Flex. Execute this command within the project's root directory. Prerequisite: Composer installed and composer.json present.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/flex.rst#2025-04-22_snippet_2\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer remove symfony/symfony\n```\n\n----------------------------------------\n\nTITLE: English Translation File Example (XML)\nDESCRIPTION: Example of an English translation file using XML format for Symfony translations.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/translation.rst#2025-04-22_snippet_41\n\nLANGUAGE: xml\nCODE:\n```\n<!-- translations/messages.en.xlf -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<xliff version=\"1.2\" xmlns=\"urn:oasis:names:tc:xliff:document:1.2\">\n    <file source-language=\"en\" datatype=\"plaintext\" original=\"file.ext\">\n        <body>\n            <trans-unit id=\"1\">\n                <source>Symfony is great</source>\n                <target>Symfony is great</target>\n            </trans-unit>\n        </body>\n    </file>\n</xliff>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Validator in XML Configuration\nDESCRIPTION: This example shows how to apply the custom validator to an entity property using XML configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/validation/custom_constraint.rst#2025-04-22_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\User\">\n        <property name=\"name\">\n            <constraint name=\"NotBlank\"/>\n            <constraint name=\"App\\Validator\\ContainsAlphanumeric\">\n                <option name=\"mode\">loose</option>\n            </constraint>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Displaying Debug Configuration in Symfony Console\nDESCRIPTION: Terminal commands to display debug configuration values in a Symfony application. The commands show default values, actual values, and resolved environment variable values.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/debug.rst#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n# displays the default config values defined by Symfony\n$ php bin/console config:dump-reference debug\n\n# displays the actual config values used by your application\n$ php bin/console debug:config debug\n\n# displays the config values used by your application and replaces the\n# environment variables with their actual values\n$ php bin/console debug:config --resolve-env debug\n```\n\n----------------------------------------\n\nTITLE: Applying NotEqualTo Constraints using PHP\nDESCRIPTION: This snippet demonstrates how to apply NotEqualTo constraints using PHP code in a loadValidatorMetadata method. It adds constraints to the firstName and age properties of the Person class.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/NotEqualTo.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Person.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Person\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('firstName', new Assert\\NotEqualTo('Mary'));\n\n        $metadata->addPropertyConstraint('age', new Assert\\NotEqualTo(\n            value: 15,\n        ));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Workflow Metadata in Twig Templates\nDESCRIPTION: This Twig snippet shows how to access and display workflow, place, and transition metadata in a Symfony Twig template using the workflow_metadata() function.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/workflow.rst#2025-04-22_snippet_29\n\nLANGUAGE: twig\nCODE:\n```\n<h2>Metadata of Blog Post</h2>\n<p>\n    <strong>Workflow</strong>:<br>\n    <code>{{ workflow_metadata(blog_post, 'title') }}</code>\n</p>\n<p>\n    <strong>Current place(s)</strong>\n    <ul>\n        {% for place in workflow_marked_places(blog_post) %}\n            <li>\n                {{ place }}:\n                <code>{{ workflow_metadata(blog_post, 'max_num_of_words', place) ?: 'Unlimited'}}</code>\n            </li>\n        {% endfor %}\n    </ul>\n</p>\n<p>\n    <strong>Enabled transition(s)</strong>\n    <ul>\n        {% for transition in workflow_transitions(blog_post) %}\n            <li>\n                {{ transition.name }}:\n                <code>{{ workflow_metadata(blog_post, 'priority', transition) ?: 0 }}</code>\n            </li>\n        {% endfor %}\n    </ul>\n</p>\n<p>\n    <strong>to_review Priority</strong>\n    <ul>\n        <li>\n            to_review:\n            <code>{{ workflow_metadata(blog_post, 'priority', workflow_transition(blog_post, 'to_review')) }}</code>\n        </li>\n    </ul>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Creating a Controller in Symfony\nDESCRIPTION: Command to generate a new controller class. This creates a skeleton controller that can be customized for specific functionality.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine.rst#2025-04-22_snippet_8\n\nLANGUAGE: terminal\nCODE:\n```\n$ php bin/console make:controller ProductController\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony VarExporter via Composer - Terminal\nDESCRIPTION: Installs the Symfony VarExporter component as a development dependency using Composer. Composer must be installed and initialized in the project. No additional parameters are required. The command updates your composer.json with the symfony/var-exporter package for use in local development and testing.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/var_exporter.rst#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require --dev symfony/var-exporter\n```\n\n----------------------------------------\n\nTITLE: Mapping Entities Outside Bundle in XML\nDESCRIPTION: XML configuration for mapping Doctrine entities that are located outside of a bundle structure, specifying the entity directory, namespace prefix, and alias.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/doctrine.rst#2025-04-22_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:doctrine=\"http://symfony.com/schema/dic/doctrine\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <doctrine:config>\n        <doctrine:orm>\n            <mapping name=\"SomeEntityNamespace\"\n                type=\"attribute\"\n                dir=\"%kernel.project_dir%/src/Entity\"\n                is-bundle=\"false\"\n                prefix=\"App\\Entity\"\n                alias=\"App\"\n            />\n        </doctrine:orm>\n    </doctrine:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Defining Default Boolean Configuration with a Parameter String (PHP)\nDESCRIPTION: Shows how to define a boolean configuration node (`logging`) in a Symfony bundle's `Configuration` class, setting its default value to the string `'%kernel.debug%'`. It also includes dumping the processed configuration value in the `Extension` class to illustrate how the parameter string might be interpreted without proper handling.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/using_parameters_in_dic.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// inside Configuration class\n$rootNode\n    ->children()\n        ->booleanNode('logging')->defaultValue('%kernel.debug%')->end()\n        // ...\n    ->end()\n;\n\n// inside the Extension class\n$config = $this->processConfiguration($configuration, $configs);\nvar_dump($config['logging']);\n```\n\n----------------------------------------\n\nTITLE: Reading File Contents as Environment Variables in XML\nDESCRIPTION: Example of using the file processor to read the contents of a file and use it as an environment variable in XML configuration. This reads authentication data from a JSON file.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/env_var_processors.rst#2025-04-22_snippet_28\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/framework.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony\n        https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <parameters>\n        <parameter key=\"env(AUTH_FILE)\">../config/auth.json</parameter>\n    </parameters>\n\n    <google auth=\"%env(file:AUTH_FILE)%\"/>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Defining Translations in YAML for Symfony\nDESCRIPTION: Example of a YAML translation file (`translations/blog.en.yaml`) defining a message key `message` with a placeholder `%name%`. This format is used by Symfony's Translation component.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#2025-04-22_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\n# translations/blog.en.yaml\nmessage: Hello %name%\n```\n\n----------------------------------------\n\nTITLE: Configuring X-Forwarded Headers in Varnish for Symfony Routing\nDESCRIPTION: This snippet sets the X-Forwarded-Port header based on the X-Forwarded-Proto to ensure correct port usage in Symfony's routing when behind Varnish.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/http_cache/varnish.rst#2025-04-22_snippet_0\n\nLANGUAGE: varnish4\nCODE:\n```\nsub vcl_recv {\n    if (req.http.X-Forwarded-Proto == \"https\" ) {\n        set req.http.X-Forwarded-Port = \"443\";\n    } else {\n        set req.http.X-Forwarded-Port = \"80\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Memcached Options\nDESCRIPTION: Shows how to configure Memcached options when creating a connection using an associative array of settings.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/cache/adapters/memcached_adapter.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Cache\\Adapter\\MemcachedAdapter;\n\n$client = MemcachedAdapter::createConnection(\n    // a DSN string or an array of DSN strings\n    [],\n\n    // associative array of configuration options\n    [\n        'libketama_compatible' => true,\n        'serializer' => 'igbinary',\n    ]\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Lock Resources in Symfony (PHP)\nDESCRIPTION: Sets up lock resources using environment variables in the Symfony framework configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_56\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/lock.php\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework): void {\n    $framework->lock()\n        ->resource('default', [env('LOCK_DSN')]);\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring UUID/ULID Console Commands in XML (XML)\nDESCRIPTION: Configuration in XML format to enable console commands for generating and inspecting UUIDs and ULIDs in a Symfony application.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/uid.rst#2025-04-22_snippet_24\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <!-- ... -->\n\n        <service id=\"Symfony\\Component\\Uid\\Command\\GenerateUlidCommand\"/>\n        <service id=\"Symfony\\Component\\Uid\\Command\\GenerateUuidCommand\"/>\n        <service id=\"Symfony\\Component\\Uid\\Command\\InspectUlidCommand\"/>\n        <service id=\"Symfony\\Component\\Uid\\Command\\InspectUuidCommand\"/>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Displaying Security Configuration in Symfony Console\nDESCRIPTION: Commands to display the default security configuration values and the actual configuration used by your application using the Symfony console.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/security.rst#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n# displays the default config values defined by Symfony\n$ php bin/console config:dump-reference security\n\n# displays the actual config values used by your application\n$ php bin/console debug:config security\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony Finder Component using Composer (Terminal)\nDESCRIPTION: This command uses Composer to download and add the `symfony/finder` component as a dependency to the current project. It requires Composer to be installed and executable in the terminal environment. Running this command updates the `composer.json` and `composer.lock` files and installs the package into the `vendor` directory.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/using_components.rst#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require symfony/finder\n```\n\n----------------------------------------\n\nTITLE: Customizing Symfony Login Link Email Template in PHP\nDESCRIPTION: Demonstrates how to create a custom notification class by extending `Symfony\\Component\\Security\\Http\\LoginLink\\LoginLinkNotification`. This allows overriding the `asEmailMessage` method to specify a custom Twig template (`emails/custom_login_link_email.html.twig`) for the login link email. This custom class should then be used in the controller responsible for sending the login link.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/login_link.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Notifier/CustomLoginLinkNotification\nnamespace App\\Notifier;\n\nuse Symfony\\Component\\Notifier\\Message\\EmailMessage;\nuse Symfony\\Component\\Notifier\\Recipient\\EmailRecipientInterface;\nuse Symfony\\Component\\Security\\Http\\LoginLink\\LoginLinkNotification;\n\nclass CustomLoginLinkNotification extends LoginLinkNotification\n{\n    public function asEmailMessage(EmailRecipientInterface $recipient, ?string $transport = null): ?EmailMessage\n    {\n        $emailMessage = parent::asEmailMessage($recipient, $transport);\n\n        // get the NotificationEmail object and override the template\n        $email = $emailMessage->getMessage();\n        $email->htmlTemplate('emails/custom_login_link_email.html.twig');\n\n        return $emailMessage;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Class to a Button in Symfony Forms\nDESCRIPTION: This snippet demonstrates how to add a custom CSS class to a button using the 'attr' option in Symfony forms. It creates a 'save' button with an additional 'save' class.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/button.rst#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\ButtonType;\n// ...\n\n$builder->add('save', ButtonType::class, [\n    'attr' => ['class' => 'save'],\n]);\n```\n\n----------------------------------------\n\nTITLE: Adding symfony/symfony to composer.json conflict section (diff)\nDESCRIPTION: Modifies composer.json to add a conflict against symfony/symfony, preventing its accidental reinstallation in a Symfony Flex-based project. The diff format highlights inserted lines and the required structure. Applies to composer.json files; prerequisites: basic understanding of Composer and JSON syntax.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/flex.rst#2025-04-22_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n  {\n      \"require\": {\n          \"symfony/flex\": \"^1.0\",\n+   },\n+   \"conflict\": {\n+       \"symfony/symfony\": \"*\"\n      }\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring OIDC User Info Token Handler (Base URI) - Symfony Security - PHP\nDESCRIPTION: This PHP configuration snippet sets up OIDC user info as the token handler for the 'main' firewall, explicitly specifying the user info endpoint. It demonstrates the programmatic approach to configuring OIDC support in Symfony Security, requiring the 'symfony/http-client' component and network access to the configured endpoint.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/access_token.rst#2025-04-22_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/security.php\nuse Symfony\\Config\\SecurityConfig;\n\nreturn static function (SecurityConfig $security) {\n    $security->firewall('main')\n        ->accessToken()\n            ->tokenHandler()\n                ->oidcUserInfo('https://www.example.com/realms/demo/protocol/openid-connect/userinfo')\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Firewall Method Restriction - Symfony PHP\nDESCRIPTION: Shows how to restrict firewall activation by HTTP methods using the \"methods\" method in a PHP Symfony config file. Only GET and POST requests activate the configured firewall. Place in \"config/packages/security.php\" and ensure SecurityConfig is imported.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/firewall_restriction.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/security.php\nuse Symfony\\Config\\SecurityConfig;\n\nreturn static function (SecurityConfig $security): void {\n    // ....\n\n    $security->firewall('secured_area')\n        ->methods(['GET', 'POST'])\n        // ...\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Routing Loader as Service in YAML\nDESCRIPTION: Configures the custom ExtraLoader class as a service with the 'routing.loader' tag so Symfony recognizes it as a potential route loader.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/routing/custom_route_loader.rst#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nservices:\n    # ...\n\n    App\\Routing\\ExtraLoader:\n        tags: [routing.loader]\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom Access Denied Handler in Symfony Security PHP\nDESCRIPTION: This PHP configuration snippet illustrates defining the custom `AccessDeniedHandler` class for the `main` firewall using PHP configuration (`security.php`). It uses the `accessDeniedHandler` method on the firewall configuration object.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/access_denied_handler.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/security.php\nuse App\\Security\\AccessDeniedHandler;\nuse Symfony\\Config\\SecurityConfig;\n\nreturn static function (SecurityConfig $security): void {\n    $security->firewall('main')\n        // ....\n        ->accessDeniedHandler(AccessDeniedHandler::class)\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing When Constraint with PHP Metadata\nDESCRIPTION: PHP implementation using ClassMetadata to define When constraint validation rules.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/When.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// src/Model/Discount.php\nnamespace App\\Model;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Discount\n{\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('value', new Assert\\GreaterThan(0));\n        $metadata->addPropertyConstraint('value', new Assert\\When(\n            expression: 'this.getType() == \"percent\"',\n            constraints: [\n                new Assert\\LessThanOrEqual(\n                    value: 100,\n                    message: 'The value should be between 1 and 100!',\n                ),\n            ],\n            otherwise: [\n                new Assert\\LessThan(\n                    value: 9999,\n                    message: 'The value should be less than 9999!',\n                ),\n            ],\n        ));\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Optional Argument to Public Method in PHP\nDESCRIPTION: This snippet demonstrates how to add a new optional argument to a public method in a backward-compatible way. It shows the initial step of adding the argument as a comment in the method signature.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/contributing/code/bc.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// the new argument can be optional\npublic function say(string $text, /* bool $stripWhitespace = true */): void\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Kernel Instance into Container in Symfony\nDESCRIPTION: Example of how the Kernel class injects itself into the container as a service. This is done in the initializeContainer method using the container's set method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/synthetic_services.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// ...\nuse Symfony\\Component\\HttpKernel\\KernelInterface;\nuse Symfony\\Component\\HttpKernel\\TerminableInterface;\n\nabstract class Kernel implements KernelInterface, TerminableInterface\n{\n    // ...\n\n    protected function initializeContainer(): void\n    {\n        // ...\n        $this->container->set('kernel', $this);\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Form Theme in XML\nDESCRIPTION: XML configuration to set a global form theme for all forms in a Symfony application.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/form_themes.rst#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/twig.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:twig=\"http://symfony.com/schema/dic/twig\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/twig https://symfony.com/schema/dic/twig/twig-1.0.xsd\">\n\n    <twig:config>\n        <twig:form-theme>bootstrap_5_horizontal_layout.html.twig</twig:form-theme>\n        <!-- ... -->\n    </twig:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Regenerating Entity Getters and Setters in Symfony\nDESCRIPTION: Command to regenerate getter and setter methods for entity properties. Useful when manually adding properties to entities.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine.rst#2025-04-22_snippet_7\n\nLANGUAGE: terminal\nCODE:\n```\n$ php bin/console make:entity --regenerate\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Manifest Path for Assets (PHP)\nDESCRIPTION: Example of configuring the JSON manifest path for assets in the FrameworkBundle using PHP configuration. Includes global and package-specific settings.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/framework.php\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework): void {\n    // ...\n    $framework->assets()\n        // this manifest is applied to every asset (including packages)\n        ->jsonManifestPath('%kernel.project_dir%/public/build/manifest.json');\n\n    // you can use absolute URLs too and Symfony will download them automatically\n    // 'json_manifest_path' => 'https://cdn.example.com/manifest.json',\n    $framework->assets()->package('foo_package')\n        // this package uses its own manifest (the default file is ignored)\n        ->jsonManifestPath('%kernel.project_dir%/public/build/a_different_manifest.json')\n        // Throws an exception when an asset is not found in the manifest\n        ->setStrictMode('%kernel.debug%');\n\n    $framework->assets()->package('bar_package')\n        // this package uses the global manifest (the default file is used)\n        ->basePath('/images');\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Firewall Host Restriction - Symfony PHP\nDESCRIPTION: Demonstrates setting up host-based firewall restriction in Symfony using PHP configuration and the \"host\" method, such that only requests to \"admin.example.com\" activate this firewall. This requires the SecurityConfig class and is to be set in \"config/packages/security.php\".\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/firewall_restriction.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/security.php\nuse Symfony\\Config\\SecurityConfig;\n\nreturn static function (SecurityConfig $security): void {\n    // ....\n\n    $security->firewall('secured_area')\n        ->host('^admin\\.example\\.com$')\n        // ...\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Using relative_path Function Examples in Twig\nDESCRIPTION: Demonstrates the `relative_path` function. Assuming the current page is `http://example.com/products/hover-board`, it shows how to generate relative paths to other resources like `../human.txt` and `products_icon.png`.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#2025-04-22_snippet_25\n\nLANGUAGE: twig\nCODE:\n```\n{{ relative_path('http://example.com/human.txt') }}\n{# ../human.txt #}\n\n{{ relative_path('http://example.com/products/products_icon.png') }}\n{# products_icon.png #}\n```\n\n----------------------------------------\n\nTITLE: Triggering Deprecation Warning for Default Value Change in PHP\nDESCRIPTION: This snippet shows how to trigger a deprecation warning when the default value of a new argument will change the current behavior. It's part of the process of adding a new argument to a public method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/contributing/code/bc.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ntrigger_deprecation('symfony/COMPONENT', 'X.Y', 'Not passing the \"bool $stripWhitespace\" argument explicitly is deprecated, its default value will change to X in Z.0.');\n```\n\n----------------------------------------\n\nTITLE: Overriding Default SMTP Authenticators\nDESCRIPTION: Example demonstrating how to customize SMTP authentication methods by either passing authenticators to the EsmtpTransport constructor or using the setAuthenticators() method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Mailer\\Transport\\Smtp\\Auth\\XOAuth2Authenticator;\nuse Symfony\\Component\\Mailer\\Transport\\Smtp\\EsmtpTransport;\n\n// Choose one of these two options:\n\n// Option 1: pass the authenticators to the constructor\n$transport = new EsmtpTransport(\n    host: 'oauth-smtp.domain.tld',\n    authenticators: [new XOAuth2Authenticator()]\n);\n\n// Option 2: call a method to redefine the authenticators\n$transport->setAuthenticators([new XOAuth2Authenticator()]);\n```\n\n----------------------------------------\n\nTITLE: Listing Data Collectors with Console Command\nDESCRIPTION: Terminal command to list all data collectors currently enabled in a Symfony application.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/profiler.rst#2025-04-22_snippet_4\n\nLANGUAGE: terminal\nCODE:\n```\n$ php bin/console debug:container --tag=data_collector\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Redis Provider Options (XML)\nDESCRIPTION: This XML configuration sets up a Symfony cache pool `cache.my_redis` using a Redis adapter and a custom provider service `app.my_custom_redis_provider`. The provider service is defined separately, specifying `\\Redis` as the class and using the `RedisAdapter::createConnection` static method as a factory. It passes the Redis DSN and an array of options (retry_interval, timeout) as arguments.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/cache.rst#2025-04-22_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/cache.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony\n        https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\"\n>\n    <framework:config>\n        <framework:cache>\n            <framework:pool name=\"cache.my_redis\"\n                adapter=\"cache.adapter.redis\"\n                provider=\"app.my_custom_redis_provider\"\n            />\n        </framework:cache>\n    </framework:config>\n\n    <services>\n        <service id=\"app.my_custom_redis_provider\" class=\"\\Redis\">\n            <factory class=\"Symfony\\Component\\Cache\\Adapter\\RedisAdapter\" method=\"createConnection\"/>\n            <argument>redis://localhost</argument>\n            <argument type=\"collection\">\n                <argument key=\"retry_interval\">2</argument>\n                <argument key=\"timeout\">10</argument>\n            </argument>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Flash Message Importance Mapper for Notifications - YAML\nDESCRIPTION: This YAML snippet configures the Symfony service 'notifier.flash_message_importance_mapper' to use the BootstrapFlashMessageImportanceMapper class. This changes how notification importance levels map to browser flash message types, integrating with CSS frameworks like Bootstrap. Requires symfony/notifier and the target class being available. Input is service definition, output is how browser notification styling is managed.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/notifier.rst#2025-04-22_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nservices:\n    notifier.flash_message_importance_mapper:\n        class: Symfony\\Component\\Notifier\\FlashMessage\\BootstrapFlashMessageImportanceMapper\n```\n\n----------------------------------------\n\nTITLE: Configuring ImportMap Polyfill in YAML\nDESCRIPTION: Shows how to configure the polyfill for older browsers, including disabling it or using a custom polyfill from importmap.php.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/asset_mapper.rst#2025-04-22_snippet_41\n\nLANGUAGE: yaml\nCODE:\n```\nframework:\n    asset_mapper:\n        # set this option to false to disable the shim entirely\n        # (your website/web app won't work in old browsers)\n        importmap_polyfill: false\n\n        # you can also use a custom polyfill by adding it to your importmap.php file\n        # and setting this option to the key of that file in the importmap.php file\n        # importmap_polyfill: 'custom_polyfill'\n```\n\n----------------------------------------\n\nTITLE: Type Patching for Open Source Libraries - Step 2\nDESCRIPTION: Command for the second phase of adding type declarations to open source packages, adding types to all methods for a major release.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/upgrade_major.rst#2025-04-22_snippet_11\n\nLANGUAGE: terminal\nCODE:\n```\n# Update the \"php\" parameter to match your minimum required PHP version\n$ SYMFONY_PATCH_TYPE_DECLARATIONS=\"force=2&php=7.4\" ./vendor/bin/patch-type-declarations\n```\n\n----------------------------------------\n\nTITLE: Generating Reset Password Files with Maker Bundle\nDESCRIPTION: Command to generate all necessary files for reset password functionality using Symfony's maker bundle. This creates controllers, entities, and templates needed for password reset.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/passwords.rst#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ php bin/console make:reset-password\n```\n\n----------------------------------------\n\nTITLE: Defining an Anonymous Service Factory in PHP for Symfony\nDESCRIPTION: Leverages the PHP configurator to create a Foo service whose factory consists of an inline AnonymousBar service and the 'constructFoo' method. Dependencies: Symfony DependencyInjection, PHP DSL API. Demonstrates how to combine inline_service() with ->factory() for advanced instantiation strategies. Limitation: manual explicit configuration needed for additional options.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/alias_private.rst#2025-04-22_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\\nnamespace Symfony\\\\Component\\\\DependencyInjection\\\\Loader\\\\Configurator;\\n\\nuse App\\\\AnonymousBar;\\nuse App\\\\Foo;\\n\\nreturn function(ContainerConfigurator $container): void {\\n    $services = $container->services();\\n\\n    $services->set(Foo::class)\\n        ->factory([inline_service(AnonymousBar::class), 'constructFoo']);\\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Currency Constraint in XML for Symfony Validation\nDESCRIPTION: This XML configuration demonstrates how to apply the Currency constraint to the 'currency' property of an Order entity in Symfony. It provides another method for setting up validation rules separate from the entity class.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Currency.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\Order\">\n        <property name=\"currency\">\n            <constraint name=\"Currency\"/>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Basic Asset Package Usage\nDESCRIPTION: Example of creating and using a basic Asset Package without versioning strategy\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/asset.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Asset\\Package;\nuse Symfony\\Component\\Asset\\VersionStrategy\\EmptyVersionStrategy;\n\n$package = new Package(new EmptyVersionStrategy());\n\n// Absolute path\necho $package->getUrl('/image.png');\n// result: /image.png\n\n// Relative path\necho $package->getUrl('image.png');\n// result: image.png\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Entity Managers in XML\nDESCRIPTION: XML configuration for setting up two Doctrine entity managers with separate database connections and entity mappings.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine/multiple_entity_managers.rst#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:doctrine=\"http://symfony.com/schema/dic/doctrine\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/doctrine\n        https://symfony.com/schema/dic/doctrine/doctrine-1.0.xsd\">\n\n    <doctrine:config>\n        <doctrine:dbal default-connection=\"default\">\n            <doctrine:connection name=\"default\"\n                url=\"%env(resolve:DATABASE_URL)%\"\n            />\n\n            <doctrine:connection name=\"customer\"\n                url=\"%env(resolve:CUSTOMER_DATABASE_URL)%\"\n            />\n        </doctrine:dbal>\n\n        <doctrine:orm default-entity-manager=\"default\">\n            <doctrine:entity-manager name=\"default\" connection=\"default\">\n                <doctrine:mapping\n                    name=\"Main\"\n                    is_bundle=\"false\"\n                    dir=\"%kernel.project_dir%/src/Entity/Main\"\n                    prefix=\"App\\Entity\\Main\"\n                    alias=\"Main\"\n                />\n            </doctrine:entity-manager>\n\n            <doctrine:entity-manager name=\"customer\" connection=\"customer\">\n                <doctrine:mapping\n                    name=\"Customer\"\n                    is_bundle=\"false\"\n                    dir=\"%kernel.project_dir%/src/Entity/Customer\"\n                    prefix=\"App\\Entity\\Customer\"\n                    alias=\"Customer\"\n                />\n            </doctrine:entity-manager>\n        </doctrine:orm>\n    </doctrine:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony Password Hasher Component (Terminal)\nDESCRIPTION: This command uses Composer, the PHP dependency manager, to require and install the `symfony/password-hasher` package into the project. This package provides utilities for securely hashing and verifying passwords.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/passwords.rst#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require symfony/password-hasher\n```\n\n----------------------------------------\n\nTITLE: Creating Translation Resource in XML\nDESCRIPTION: Example of an XML translation resource file for French translations.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/translation.rst#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<!-- translations/messages.fr.xlf -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<xliff version=\"1.2\" xmlns=\"urn:oasis:names:tc:xliff:document:1.2\">\n    <file source-language=\"en\" datatype=\"plaintext\" original=\"file.ext\">\n        <body>\n            <trans-unit id=\"symfony_is_great\">\n                <source>Symfony is great</source>\n                <target>Symfony est génial</target>\n            </trans-unit>\n        </body>\n    </file>\n</xliff>\n```\n\n----------------------------------------\n\nTITLE: Activating switch_user in Symfony Security Firewall (YAML)\nDESCRIPTION: Enables the switch_user feature in a Symfony application's main firewall using YAML configuration. Requires the Symfony security bundle, typically set in config/packages/security.yaml. The 'switch_user: true' key makes user impersonation available. The relevant parameter is '_switch_user' by default; only users with ROLE_ALLOWED_TO_SWITCH can use this feature.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/impersonating_user.rst#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\\nsecurity:\\n    # ...\\n\\n    firewalls:\\n        main:\\n            # ...\\n            switch_user: true\n```\n\n----------------------------------------\n\nTITLE: Preparing Sample Data for XmlEncoder Context Examples in PHP\nDESCRIPTION: This code prepares a sample PHP associative array `$data` containing 'id' and 'date' keys. It also includes the necessary `use` statement for `XmlEncoder`. This data is used in the following examples to demonstrate various `XmlEncoder` context options.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer/encoders.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Serializer\\Encoder\\XmlEncoder;\n\n$data = [\n    'id' => 'IDHNQIItNyQ',\n    'date' => '2019-10-24',\n];\n```\n\n----------------------------------------\n\nTITLE: Altering Umask for Group or World Writable Cache/Log - PHP\nDESCRIPTION: This code snippet, to be placed at the top of bin/console or public/index.php, sets the process umask to 0002 or 0000, making automatically created files and directories group-writable (0775) or world-writable (0777). Prerequisite: standard PHP interpreter. It affects only the current process and newly created files/directories, not existing filesystem objects. Limitation: not thread-safe, not recommended in production if thread safety is a concern.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/file_permissions.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\numask(0002); // This will let the permissions be 0775\n\n// or\n\numask(0000); // This will let the permissions be 0777\n```\n\n----------------------------------------\n\nTITLE: Simple PHP Web Application\nDESCRIPTION: A basic PHP script that demonstrates a simple web application. It retrieves a 'name' parameter from the query string and prints a greeting.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/create_framework/introduction.rst#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n// framework/index.php\n$name = $_GET['name'];\n\nprintf('Hello %s', $name);\n```\n\n----------------------------------------\n\nTITLE: Using a Custom MetadataFactory in Symfony Validator (PHP)\nDESCRIPTION: Shows how to replace the default LazyLoadingMetadataFactory in Symfony Validator with a custom implementation by providing an instance that adheres to MetadataFactoryInterface. setMetadataFactory is used to inject the factory, after which add*Mapping methods cannot be used and all loader/cache configuration must be handled inside the custom factory. This advanced pattern allows completely custom metadata handling strategies.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/validator/resources.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Acme\\Validation\\CustomMetadataFactory;\\nuse Symfony\\Component\\Validator\\Validation;\\n\\n$validator = Validation::createValidatorBuilder()\\n    ->setMetadataFactory(new CustomMetadataFactory(...))\\n    ->getValidator();\n```\n\n----------------------------------------\n\nTITLE: Creating Hub Interface Stub for Testing\nDESCRIPTION: Implementation of a stub class for the HubInterface to use in functional testing without actual Mercure communication.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mercure.rst#2025-04-22_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n// tests/Functional/Stub/HubStub.php\nnamespace App\\Tests\\Functional\\Stub;\n\nuse Symfony\\Component\\Mercure\\HubInterface;\nuse Symfony\\Component\\Mercure\\Update;\n\nclass HubStub implements HubInterface\n{\n    public function publish(Update $update): string\n    {\n        return 'id';\n    }\n\n    // implement rest of HubInterface methods here\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Service Requiring Configuration (NewsletterManager) in PHP\nDESCRIPTION: This PHP snippet defines the `NewsletterManager` class within the `App\\Mail` namespace. It implements `EmailFormatterAwareInterface` and requires configuration for enabled email formatters, which are set via the `setEnabledFormatters` method. This class represents a service that will be configured using a service configurator.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/configurators.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Mail/NewsletterManager.php\nnamespace App\\Mail;\n\nclass NewsletterManager implements EmailFormatterAwareInterface\n{\n    private array $enabledFormatters;\n\n    public function setEnabledFormatters(array $enabledFormatters): void\n    {\n        $this->enabledFormatters = $enabledFormatters;\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Pull Request Review Comment Example\nDESCRIPTION: Sample comment for a pull request that needs additional work, including thanking the contributor and updating the status for the Carson Bot.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/contributing/community/reviews.rst#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nThank you @weaverryan for working on this! It seems that your test\ncases don't cover the cases when the counter is zero or smaller.\nCould you please add some tests for that?\n\nStatus: Needs Work\n```\n\n----------------------------------------\n\nTITLE: Logging Deprecations to a File Instead of Verbose Output - Terminal - terminal\nDESCRIPTION: This command disables verbose output and writes deprecation notices to a specified log file by setting 'logFile' in SYMFONY_DEPRECATIONS_HELPER. The file path must be writable, and the test run output will be redirected to this log file instead of the console.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/phpunit_bridge.rst#2025-04-22_snippet_16\n\nLANGUAGE: terminal\nCODE:\n```\n$ SYMFONY_DEPRECATIONS_HELPER='logFile=/path/deprecations.log' ./vendor/bin/simple-phpunit\n```\n\n----------------------------------------\n\nTITLE: Configuring an Extension via XML\nDESCRIPTION: Provides an example of an XML configuration file for the service container. It defines the extension's namespace (`acme-demo`) and uses it to provide configuration values (`foo`, `bar`) within a `<acme-demo:config>` block, which will be processed by the corresponding extension.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/dependency_injection/compilation.rst#2025-04-22_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:acme-demo=\"http://www.example.com/schema/dic/acme_demo\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://www.example.com/schema/dic/acme_demo\n        https://www.example.com/schema/dic/acme_demo/acme_demo-1.0.xsd\"\n>\n    <acme-demo:config>\n        <acme_demo:foo>fooValue</acme_demo:foo>\n        <acme_demo:bar>barValue</acme_demo:bar>\n    </acme-demo:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Enforcing HTTPS via access_control in XML\nDESCRIPTION: This XML configuration snippet shows how to enforce the HTTPS protocol for specific URL paths in a Symfony application using the security configuration. It defines `<rule>` elements with the `requires-channel=\"https\"` attribute for paths starting with `/secure` (requiring `ROLE_ADMIN`), `/login` (public access), and all other paths (`^/`).\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/force_https.rst#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/security.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<srv:container xmlns=\"http://symfony.com/schema/dic/security\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:srv=\"http://symfony.com/schema/dic/services\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/security\n        https://symfony.com/schema/dic/security/security-1.0.xsd\">\n\n    <config>\n        <!-- ... -->\n\n        <rule path=\"^/secure\" role=\"ROLE_ADMIN\" requires-channel=\"https\"/>\n        <rule path=\"^/login\" role=\"PUBLIC_ACCESS\" requires-channel=\"https\"/>\n        <rule path=\"^/\" role=\"PUBLIC_ACCESS\" requires-channel=\"https\"/>\n    </config>\n</srv:container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto Mapping for Validation in YAML Format\nDESCRIPTION: YAML configuration for setting up automatic validation constraints for Doctrine entities. Defines which entity namespaces should have automatic validation applied.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_84\n\nLANGUAGE: yaml\nCODE:\n```\nframework:\n    validation:\n        auto_mapping:\n            # an empty array means that all entities that belong to that\n            # namespace will add automatic validation\n            'App\\Entity\\': []\n            'Foo\\': ['Foo\\Some\\Entity', 'Foo\\Another\\Entity']\n```\n\n----------------------------------------\n\nTITLE: Defining Reset Button Label Translation in YAML\nDESCRIPTION: This YAML snippet shows how to define a translation message for a reset button label. It includes a placeholder for dynamic content.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/reset.rst#2025-04-22_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\n# translations/messages.en.yaml\nform.order.reset: 'Reset an order to %company%'\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Service via its Alias in PHP\nDESCRIPTION: Shows how to retrieve a service instance from the container using its defined alias (`app.mailer`). This returns the instance of the service the alias points to (e.g., `PhpMailer`).\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/alias_private.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$container->get('app.mailer'); // Would return a PhpMailer instance\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Cache Limiter in YAML\nDESCRIPTION: Example of setting the session cache limiter parameter in YAML configuration. This parameter controls the cache-related HTTP headers sent with the session.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_67\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nparameters:\n    session.storage.options:\n        cache_limiter: 0\n```\n\n----------------------------------------\n\nTITLE: Defining GreaterThan Constraint in XML\nDESCRIPTION: Illustrates how to set up the GreaterThan constraint using XML configuration for validating a Person's siblings count and age.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/GreaterThan.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\Person\">\n        <property name=\"siblings\">\n            <constraint name=\"GreaterThan\">\n                5\n            </constraint>\n        </property>\n        <property name=\"age\">\n            <constraint name=\"GreaterThan\">\n                <option name=\"value\">18</option>\n            </constraint>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Using yaml_encode Filter with dumpObjects Parameter in Twig\nDESCRIPTION: Illustrates the `dumpObjects` parameter for the `yaml_encode` filter. When `false` (default), a PHP object is output as `null`. When `true`, the object is serialized into YAML using PHP's object serialization format.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#2025-04-22_snippet_46\n\nLANGUAGE: twig\nCODE:\n```\n{{ object|yaml_encode(dumpObjects = false) }}\n{# output: null #}\n\n{{ object|yaml_encode(dumpObjects = true) }}\n{# output: !php/object 'O:8:\"stdClass\":1:{s:5:\"foo\";s:7:\"bar\";}' #}\n```\n\n----------------------------------------\n\nTITLE: Basic Message Placeholder Translation in XML\nDESCRIPTION: Shows how to implement ICU MessageFormat placeholders in XML translation files.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/formats/message_format.rst#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<xliff version=\"1.2\" xmlns=\"urn:oasis:names:tc:xliff:document:1.2\">\n    <file source-language=\"en\" datatype=\"plaintext\" original=\"file.ext\">\n        <body>\n            <trans-unit id=\"say_hello\">\n                <source>say_hello</source>\n                <target>Hello {name}!</target>\n            </trans-unit>\n        </body>\n    </file>\n</xliff>\n```\n\n----------------------------------------\n\nTITLE: Implementing Type Guessing Logic in PHP\nDESCRIPTION: Implementation of the guessType method that reads PHPDoc annotations and returns appropriate form type guesses based on the variable type.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/type_guesser.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Form\\TypeGuesser;\n\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\CheckboxType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\IntegerType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\NumberType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\TextType;\nuse Symfony\\Component\\Form\\Guess\\Guess;\nuse Symfony\\Component\\Form\\Guess\\TypeGuess;\n\nclass PhpDocTypeGuesser implements FormTypeGuesserInterface\n{\n    public function guessType(string $class, string $property): ?TypeGuess\n    {\n        $annotations = $this->readPhpDocAnnotations($class, $property);\n\n        if (!isset($annotations['var'])) {\n            return null;\n        }\n\n        return match($annotations['var']) {\n            'string' => new TypeGuess(TextType::class, [], Guess::HIGH_CONFIDENCE),\n            'int', 'integer' => new TypeGuess(IntegerType::class, [], Guess::MEDIUM_CONFIDENCE),\n            'float', 'double', 'real' => new TypeGuess(NumberType::class, [], Guess::MEDIUM_CONFIDENCE),\n            'boolean', 'bool' => new TypeGuess(CheckboxType::class, [], Guess::HIGH_CONFIDENCE),\n            default => new TypeGuess(TextType::class, [], Guess::LOW_CONFIDENCE)\n        };\n    }\n\n    protected function readPhpDocAnnotations(string $class, string $property): array\n    {\n        $reflectionProperty = new \\ReflectionProperty($class, $property);\n        $phpdoc = $reflectionProperty->getDocComment();\n        $phpdocTags = ...;\n        return $phpdocTags;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Yaml Constraint in XML Format\nDESCRIPTION: Example of defining the Yaml constraint for a property using XML format in a validation configuration file.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Yaml.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\Report\">\n        <property name=\"customConfiguration\">\n            <constraint name=\"Yaml\">\n                <option name=\"message\">Your configuration doesn't have valid YAML syntax.</option>\n            </constraint>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Validation Configuration in YAML\nDESCRIPTION: Defining validation constraints using YAML configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/validation/translations.rst#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Author:\n    properties:\n        name:\n            - NotBlank: { message: 'author.name.not_blank' }\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Request Format in Plain Text\nDESCRIPTION: Shows the format of a basic HTTP GET request to xkcd.com, including request method, URI, and common headers.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/introduction/http_fundamentals.rst#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nGET / HTTP/1.1\nHost: xkcd.com\nAccept: text/html\nUser-Agent: Mozilla/5.0 (Macintosh)\n```\n\n----------------------------------------\n\nTITLE: Configuring Firewall Host Restriction - Symfony XML\nDESCRIPTION: Uses XML configuration to restrict a Symfony firewall to a specific hostname, via the \"host\" attribute, only activating where the request host exactly matches \"admin.example.com\". Namespace declarations and placement in \"config/packages/security.xml\" are required.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/firewall_restriction.rst#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/security.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<srv:container xmlns=\"http://symfony.com/schema/dic/security\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:srv=\"http://symfony.com/schema/dic/services\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/security\n        https://symfony.com/schema/dic/security/security-1.0.xsd\">\n\n    <config>\n        <!-- ... -->\n        <firewall name=\"secured_area\" host=\"^admin\\.example\\.com$\">\n            <!-- ... -->\n        </firewall>\n    </config>\n</srv:container>\n```\n\n----------------------------------------\n\nTITLE: French Translation File Example (PHP)\nDESCRIPTION: Example of a French translation file using PHP format for Symfony translations.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/translation.rst#2025-04-22_snippet_40\n\nLANGUAGE: php\nCODE:\n```\n// translations/messages.fr.php\nreturn [\n    'Symfony is great' => 'Symfony est génial',\n];\n```\n\n----------------------------------------\n\nTITLE: Revealing a Single Secret Value (terminal)\nDESCRIPTION: Displays the command for revealing the value of a named secret using the decryption key. This command, available since Symfony 7.1, is for inspecting the value of a specific secret without listing all.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/secrets.rst#2025-04-22_snippet_7\n\nLANGUAGE: terminal\nCODE:\n```\n$ php bin/console secrets:reveal DATABASE_PASSWORD\n```\n\n----------------------------------------\n\nTITLE: Adding Basic Handlebars Loader to Webpack Encore\nDESCRIPTION: Demonstrates how to add the handlebars-loader to Webpack Encore for processing .handlebars files with a simple configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/custom-loaders-plugins.rst#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nEncore\n    // ...\n    .addLoader({ test: /\\.handlebars$/, loader: 'handlebars-loader' })\n;\n```\n\n----------------------------------------\n\nTITLE: Format Arguments Filter Usage\nDESCRIPTION: Shows how to format method arguments using the format_args filter\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#2025-04-22_snippet_55\n\nLANGUAGE: twig\nCODE:\n```\n{{ args|format_args }}\n```\n\n----------------------------------------\n\nTITLE: PHP Cache File Structure Example\nDESCRIPTION: Example of how the PHP Files Cache Adapter stores cached data as native PHP code. Shows the structure of a cached array with expiration time.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/cache/adapters/php_files_adapter.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php return [\n\n    // the cache item expiration\n    0 => 9223372036854775807,\n\n    // the cache item contents\n    1 => [\n        0 => 'my',\n        1 => 'cached',\n        2 => 'array',\n    ],\n\n];\n```\n\n----------------------------------------\n\nTITLE: MongoDB URL Configuration in Symfony\nDESCRIPTION: Shows how to parse and use MongoDB connection URL components in configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/env_var_processors.rst#2025-04-22_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/mongodb.yaml\nmongo_db_bundle:\n    clients:\n        default:\n            hosts:\n                - { host: '%env(string:key:host:url:MONGODB_URL)%', port: '%env(int:key:port:url:MONGODB_URL)%' }\n            username: '%env(string:key:user:url:MONGODB_URL)%'\n            password: '%env(string:key:pass:url:MONGODB_URL)%'\n    connections:\n        default:\n            database_name: '%env(key:path:url:MONGODB_URL)%'\n```\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/mongodb.php\n$container->loadFromExtension('mongodb', [\n    'clients' => [\n        'default' => [\n            'hosts' => [\n                [\n                    'host' => '%env(string:key:host:url:MONGODB_URL)%',\n                    'port' => '%env(int:key:port:url:MONGODB_URL)%',\n                ],\n            ],\n            'username' => '%env(string:key:user:url:MONGODB_URL)%',\n            'password' => '%env(string:key:pass:url:MONGODB_URL)%',\n        ],\n    ],\n    'connections' => [\n        'default' => [\n            'database_name' => '%env(key:path:url:MONGODB_URL)%',\n        ],\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Registering Monolog Processor with PHP Configuration in Symfony\nDESCRIPTION: PHP configuration that registers a SessionRequestProcessor class as a Monolog processor and assigns it to the 'app' channel. This configuration should be placed in config/services.php.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/logging/processors.rst#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\n\n// ...\n$container\n    ->register(SessionRequestProcessor::class)\n    ->addTag('monolog.processor', ['channel' => 'app']);\n```\n\n----------------------------------------\n\nTITLE: Configuring Unique Constraint with Fields Option Using PHP Metadata\nDESCRIPTION: Example of using the 'fields' option with the Unique constraint in PHP metadata configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Unique.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/PointOfInterest.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass PointOfInterest\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('coordinates', new Assert\\Unique(\n            fields: ['latitude', 'longitude'],\n        ));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: French Translation File Example (XML)\nDESCRIPTION: Example of a French translation file using XML format for Symfony translations.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/translation.rst#2025-04-22_snippet_38\n\nLANGUAGE: xml\nCODE:\n```\n<!-- translations/messages.fr.xlf -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<xliff version=\"1.2\" xmlns=\"urn:oasis:names:tc:xliff:document:1.2\">\n    <file source-language=\"en\" datatype=\"plaintext\" original=\"file.ext\">\n        <body>\n            <trans-unit id=\"1\">\n                <source>Symfony is great</source>\n                <target>Symfony est génial</target>\n            </trans-unit>\n        </body>\n    </file>\n</xliff>\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony Validator Component via Composer\nDESCRIPTION: Provides the Composer command required to install the Symfony Validator component package. This component is necessary for integrating validation capabilities with the Symfony Form component. Execute this command in your project's root directory using a terminal.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/form.rst#2025-04-22_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require symfony/validator\n```\n\n----------------------------------------\n\nTITLE: Defining Routes with YAML in Symfony\nDESCRIPTION: Example of defining routes using YAML configuration in Symfony.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/templates.rst#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n# config/routes.yaml\nblog_index:\n    path:       /\n    controller: App\\Controller\\BlogController::index\n\nblog_post:\n    path:       /article/{slug}\n    controller: App\\Controller\\BlogController::show\n```\n\n----------------------------------------\n\nTITLE: Registering Multiple Bundles in a MicroKernel - PHP\nDESCRIPTION: Demonstrates how to override the registerBundles() method in the kernel to register additional Symfony bundles, such as TwigBundle, in addition to the default FrameworkBundle. This snippet should be added to a class that uses MicroKernelTrait. Yield each bundle as needed; all referenced bundles must be installed via Composer.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/micro_kernel_trait.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Bundle\\FrameworkBundle\\FrameworkBundle;\nuse Symfony\\Bundle\\TwigBundle\\TwigBundle;\n// ...\n\nclass Kernel extends BaseKernel\n{\n    use MicroKernelTrait;\n\n    // ...\n\n    public function registerBundles(): array\n    {\n        yield new FrameworkBundle();\n        yield new TwigBundle();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Class for Object Writing Examples (PHP)\nDESCRIPTION: Provides the definition of a simple `Person` class with a public property `firstName`. This class serves as the basis for examples demonstrating how `PropertyAccessor::setValue()` interacts with objects, utilizing setters, magic `__set()`, or direct public property access to modify object state.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/property_access.rst#2025-04-22_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n// ...\nclass Person\n{\n    public string $firstName;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining InvoiceSubjectInterface\nDESCRIPTION: Creates an interface that defines the contract for invoice subjects, specifying required methods that implementing classes must provide.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine/resolve_target_entity.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// src/Model/InvoiceSubjectInterface.php\nnamespace App\\Model;\n\n/**\n * An interface that the invoice Subject object should implement.\n * In most circumstances, only a single object should implement\n * this interface as the ResolveTargetEntityListener can only\n * change the target to a single object.\n */\ninterface InvoiceSubjectInterface\n{\n    // List any additional methods that your InvoiceBundle\n    // will need to access on the subject so that you can\n    // be sure that you have access to those methods.\n\n    public function getName(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Capturing Dump Output as String in PHP\nDESCRIPTION: Shows how to capture the dump output as a string using a closure. This method allows for custom formatting of the dump output, such as adding indentation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/var_dumper.rst#2025-04-22_snippet_23\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\VarDumper\\Cloner\\VarCloner;\nuse Symfony\\Component\\VarDumper\\Dumper\\CliDumper;\n\n$cloner = new VarCloner();\n$dumper = new CliDumper();\n$output = '';\n\n$dumper->dump(\n    $cloner->cloneVar($variable),\n    function (string $line, int $depth) use (&$output): void {\n        // A negative depth means \"end of dump\"\n        if ($depth >= 0) {\n            // Adds a two spaces indentation to the line\n            $output .= str_repeat('  ', $depth).$line.\"\\n\";\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Validation Groups for Multiple Submit Buttons in Symfony Form\nDESCRIPTION: Shows how to set different validation groups for multiple submit buttons in a form, allowing for conditional validation based on which button was clicked.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/submit.rst#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\SubmitType;\n// ...\n\n$form = $this->createFormBuilder($user)\n    ->add('previousStep', SubmitType::class, [\n        'validation_groups' => false,\n    ])\n    ->add('nextStep', SubmitType::class, [\n        'validation_groups' => ['Registration'],\n    ])\n    ->getForm();\n```\n\n----------------------------------------\n\nTITLE: Describing Default Symfony Directory Structure (Symfony, text)\nDESCRIPTION: This snippet illustrates the default directory structure of a Symfony application. It helps users understand where various types of files and resources reside within the project. The structure includes directories for assets, source code, configuration, templates, translations, logs, cache, and third-party dependencies.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/override_dir_structure.rst#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nyour-project/\\n├─ assets/\\n├─ bin/\\n│  └─ console\\n├─ config/\\n├─ public/\\n│  └─ index.php\\n├─ src/\\n│  └─ ...\\n├─ templates/\\n├─ tests/\\n├─ translations/\\n├─ var/\\n│  ├─ cache/\\n│  ├─ log/\\n│  └─ ...\\n├─ vendor/\\n└─ .env\n```\n\n----------------------------------------\n\nTITLE: Configuring Unique Constraint with Fields Option in YAML\nDESCRIPTION: YAML configuration for using the 'fields' option with the Unique constraint.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Unique.rst#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\PointOfInterest:\n    properties:\n        coordinates:\n            - Unique:\n                  fields: [latitude, longitude]\n```\n\n----------------------------------------\n\nTITLE: Vue.js JSX Image Usage\nDESCRIPTION: Example of importing and using images in Vue.js JSX components\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/vuejs.rst#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nexport default {\n    name: 'Component',\n    render() {\n        return (\n            <div>\n                <img src={require(\"./image.png\")}/>\n            </div>\n        )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Symfony Front Controller Implementation in PHP\nDESCRIPTION: This PHP script serves as the front controller for a Symfony application. It bootstraps the Symfony kernel, creates a Request object from global variables, and handles the request to generate a response.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/introduction/from_flat_php_to_symfony.rst#2025-04-22_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n// public/index.php\nrequire_once __DIR__.'/../app/bootstrap.php';\nrequire_once __DIR__.'/../src/Kernel.php';\n\nuse Symfony\\Component\\HttpFoundation\\Request;\n\n$kernel = new Kernel('prod', false);\n$kernel->handle(Request::createFromGlobals())->send();\n```\n\n----------------------------------------\n\nTITLE: Defining Bundle Directory Structure in Markdown\nDESCRIPTION: Illustrates the recommended directory structure for a Symfony bundle using a text-based tree representation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/bundles/best_practices.rst#2025-04-22_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n<your-bundle>/\n├── assets/\n├── config/\n├── docs/\n│   └─ index.md\n├── public/\n├── src/\n│   ├── Controller/\n│   ├── DependencyInjection/\n│   └── AcmeBlogBundle.php\n├── templates/\n├── tests/\n├── translations/\n├── LICENSE\n└── README.md\n```\n\n----------------------------------------\n\nTITLE: Extending Built-in Form Theme with Twig Use Tag\nDESCRIPTION: Shows how to create a custom form theme by inheriting all blocks from the built-in form_div_layout.html.twig theme using the Twig 'use' tag instead of 'extends'.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/form_themes.rst#2025-04-22_snippet_18\n\nLANGUAGE: twig\nCODE:\n```\n{# templates/form/my_theme.html.twig #}\n{% use 'form_div_layout.html.twig' %}\n\n{# ... override only the blocks you are interested in #}\n```\n\n----------------------------------------\n\nTITLE: Building Configuration Tree with Parameters Node in PHP\nDESCRIPTION: Demonstrates how to create a configuration tree builder with parameters node definitions and validation rules using Symfony's Configuration component.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/config/definition.rst#2025-04-22_snippet_26\n\nLANGUAGE: php\nCODE:\n```\npublic function addParametersNode(): NodeDefinition\n{\n    $treeBuilder = new TreeBuilder('parameters');\n\n    $node = $treeBuilder->getRootNode()\n        ->isRequired()\n        ->requiresAtLeastOneElement()\n        ->useAttributeAsKey('name')\n        ->arrayPrototype()\n            ->children()\n                ->scalarNode('value')->isRequired()->end()\n            ->end()\n        ->end()\n    ;\n\n    return $node;\n}\n```\n\n----------------------------------------\n\nTITLE: Layout Template Implementation\nDESCRIPTION: Shows the implementation of a reusable layout template that other templates can extend.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/introduction/from_flat_php_to_symfony.rst#2025-04-22_snippet_3\n\nLANGUAGE: html+php\nCODE:\n```\n<!-- templates/layout.php -->\n<!DOCTYPE html>\n<html>\n    <head>\n        <title><?= $title ?></title>\n    </head>\n    <body>\n        <?= $content ?>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring Couchbase Connection Options\nDESCRIPTION: Example of setting up Couchbase connection with custom configuration options including username, password, and timeouts.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/cache/adapters/couchbasebucket_adapter.rst#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Cache\\Adapter\\CouchbaseBucketAdapter;\n\n$client = CouchbaseBucketAdapter::createConnection(\n    // a DSN string or an array of DSN strings\n    [],\n\n    // associative array of configuration options\n    [\n        'username' => 'xxxxxx',\n        'password' => 'yyyyyy',\n        'configTimeout' => '100',\n    ]\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Immutable-setter Injection in Service Container (PHP)\nDESCRIPTION: PHP configuration for immutable-setter injection that sets the returns-clone flag to true to maintain immutability.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/injection_types.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\nuse App\\Mail\\NewsletterManager;\nuse Symfony\\Component\\DependencyInjection\\Reference;\n\n// ...\n$container->register('app.newsletter_manager', NewsletterManager::class)\n    ->addMethodCall('withMailer', [new Reference('mailer')], true);\n```\n\n----------------------------------------\n\nTITLE: Overriding Cache Directory in Kernel (Symfony, PHP)\nDESCRIPTION: This snippet overrides the getCacheDir() method in Kernel (src/Kernel.php) to customize the cache directory per environment. It typically uses $this->environment (e.g., 'dev', 'prod') to segregate caches. The key dependency is extending BaseKernel, and the custom path is calcualted with dirname(__DIR__).\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/override_dir_structure.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// src/Kernel.php\\n\\n// ...\\nclass Kernel extends BaseKernel\\n{\\n    // ...\\n\\n    public function getCacheDir(): string\\n    {\\n        return dirname(__DIR__).'/var/'.$this->environment.'/cache';\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Event Subscriber for Debug Toolbar Header\nDESCRIPTION: PHP code skeleton for an event subscriber that can be used to set the debug toolbar header only in development environments.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/profiler.rst#2025-04-22_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\DependencyInjection\\Attribute\\When;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Handler with DSN in XML\nDESCRIPTION: Examples of configuring session handlers using DSN strings in XML. Demonstrates multiple ways to specify the handler including Redis, environment variables, and file storage.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_74\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/framework.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n    <framework:config>\n        <!-- a few possible examples -->\n        <framework:session enabled=\"true\"\n            handler-id=\"redis://localhost\"\n            handler-id=\"%env(REDIS_URL)%\"\n            handler-id=\"%env(DATABASE_URL)%\"\n            handler-id=\"file://%kernel.project_dir%/var/sessions\"/>\n    </framework:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Notifier with Twilio in .env File\nDESCRIPTION: Example of configuring a Twilio DSN in the .env file for the Symfony Notifier component. This sets up the environment variable that will be used in the notifier configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/notifier.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# .env\nTWILIO_DSN=twilio://SID:TOKEN@default?from=FROM\n```\n\n----------------------------------------\n\nTITLE: Truncating Messages in Symfony Console\nDESCRIPTION: Demonstrates message truncation with custom length and suffix.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/helpers/formatterhelper.rst#2025-04-22_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n$message = \"This is a very long message, which should be truncated\";\n$truncatedMessage = $formatter->truncate($message, 7);\n$output->writeln($truncatedMessage);\n```\n\n----------------------------------------\n\nTITLE: Configuring Composer Autoloading for Multiple Symfony Apps\nDESCRIPTION: Updates the `composer.json` file to configure PSR-4 autoloading for both the shared codebase (potentially renamed to `Shared\\`) located in the root `src/` directory and the new API-specific application code located in `apps/api/src/`. Remember to run `composer dump-autoload` after applying these changes.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/multiple_kernels.rst#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"autoload\": {\n        \"psr-4\": {\n            \"Shared\\\\\": \"src/\",\n            \"Api\\\\\": \"apps/api/src/\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Logging Package with Composer in Symfony\nDESCRIPTION: Shows how to install the logging package using Composer in a Symfony project. This adds the Monolog library for logging functionality.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/quick_tour/the_architecture.rst#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ composer require logger\n```\n\n----------------------------------------\n\nTITLE: Injecting a Cache Pool into a Symfony Controller\nDESCRIPTION: This PHP code demonstrates how to inject a custom cache pool service ('custom_thing.cache') into a Symfony controller method using autowiring. By type-hinting the argument `$customThingCache` with `CacheInterface` and using the camel case version of the service ID, Symfony automatically injects the correct cache pool instance.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/cache.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Contracts\\Cache\\CacheInterface;\n// ...\n\n// from a controller method\npublic function listProducts(CacheInterface $customThingCache): Response\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Blank Constraint in XML for Symfony Validation\nDESCRIPTION: Example of how to configure the Blank validation constraint using XML in a Symfony application.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Blank.rst#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\Author\">\n        <property name=\"firstName\">\n            <constraint name=\"Blank\"/>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Upgrading Project Dependencies with Composer (Terminal Command)\nDESCRIPTION: This terminal command updates the project's dependencies to the latest allowed versions specified in composer.json, including newly set pre-release Symfony packages. Needs to be run from project root after editing composer.json. Outputs logs of dependency resolution and installation process.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/unstable_versions.rst#2025-04-22_snippet_2\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer update\n```\n\n----------------------------------------\n\nTITLE: Configuring OidcTokenHandler in XML\nDESCRIPTION: This XML configuration sets up the OidcTokenHandler in the security.xml file. It specifies the algorithms used for JWS signing, the JSON Web Key (JWK), audience, and issuers for token validation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/access_token.rst#2025-04-22_snippet_26\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/security.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<srv:container xmlns=\"http://symfony.com/schema/dic/security\"\n    xmlns:srv=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/security\n        https://symfony.com/schema/dic/security/security-1.0.xsd\">\n\n    <config>\n        <firewall name=\"main\">\n            <access-token>\n                <token-handler>\n                    <!-- Algorithm used to sign the JWS -->\n                    <!-- A JSON-encoded JWK -->\n                    <!-- Audience (`aud` claim): required for validation purpose -->\n                    <oidc keyset=\"{'keys':[{'kty':'...','k':'...'}]}\" audience=\"api-example\">\n                        <!-- Issuers (`iss` claim): required for validation purpose -->\n                        <algorithm>ES256</algorithm>\n                        <algorithm>RS256</algorithm>\n                        <issuer>https://oidc.example.com</issuer>\n                    </oidc>\n                </token-handler>\n            </access-token>\n        </firewall>\n    </config>\n</srv:container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Trusted Hosts in XML Format for Symfony Framework\nDESCRIPTION: XML configuration that sets trusted hosts for a Symfony application. This configuration allows requests only from example.com and example.org domains.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_81\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/framework.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <framework:config>\n        <framework:trusted-host>^example\\.com$</framework:trusted-host>\n        <framework:trusted-host>^example\\.org$</framework:trusted-host>\n        <!-- ... -->\n    </framework:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Creating Configured Cookie Objects\nDESCRIPTION: Shows how to create and configure Cookie objects using fluent interface.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#2025-04-22_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$cookie = Cookie::create('foo')\n    ->withValue('bar')\n    ->withExpires(strtotime('Fri, 20-May-2011 15:25:52 GMT'))\n    ->withDomain('.example.com')\n    ->withSecure(true);\n```\n\n----------------------------------------\n\nTITLE: Configuring Fragment Listener in PHP\nDESCRIPTION: PHP configuration to enable the fragment listener required for ESI controller references, specifying the path prefix for fragment URLs.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/http_cache/esi.rst#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/framework.php\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework): void {\n    // ...\n    $framework->fragments()\n        ->path('/_fragment')\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Example Structure of a Multipart MIME Email Message (Text)\nDESCRIPTION: Shows a common tree structure for a complex email message containing text and HTML alternatives, an embedded image, and an attachment, using `multipart/mixed`, `multipart/related`, and `multipart/alternative` MIME parts. This helps understand the low-level concepts used by the `Message` class for manual message construction.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/mime.rst#2025-04-22_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nmultipart/mixed\n├── multipart/related\n│   ├── multipart/alternative\n│   │   ├── text/plain\n│   │   └── text/html\n│   └── image/png\n└── application/pdf\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Symfony Flex Recipe Structure in JSON\nDESCRIPTION: Explains the fundamental JSON structure for a Symfony Flex recipe file. It contains the top-level `manifests` key, where package-specific configurations are defined under the package name (e.g., `acme/package-name`). Each package entry includes a `manifest` object (initially empty in this basic example) and a `ref` string, which is a hash used by Composer to detect changes.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/flex_private_recipes.rst#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"manifests\": {\n        \"acme/package-name\": {\n            \"manifest\": {\n            },\n            \"ref\": \"7405f3af1312d1f9121afed4dddef636c6c7ff00\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Casting HTTP Method Override Environment Variable to Boolean in Symfony with XML Configuration\nDESCRIPTION: Converts HTTP_METHOD_OVERRIDE to a boolean in Symfony XML configuration using the bool processor. Requires setting the appropriate parameter and using it in the framework:config's http-method-override attribute. Inputs and outputs follow Symfony's XML configuration conventions.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/env_var_processors.rst#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\\n<container xmlns=\\\"http://symfony.com/schema/dic/services\\\"\\n    xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n    xmlns:framework=\\\"http://symfony.com/schema/dic/symfony\\\"\\n    xsi:schemaLocation=\\\"http://symfony.com/schema/dic/services\\n        https://symfony.com/schema/dic/services/services-1.0.xsd\\n        http://symfony.com/schema/dic/symfony\\n        https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\\\">\\n\\n    <parameters>\\n        <parameter key=\\\"env(HTTP_METHOD_OVERRIDE)\\\">true</parameter>\\n    </parameters>\\n\\n    <framework:config http-method-override=\\\"%env(bool:HTTP_METHOD_OVERRIDE)%\\\"/>\\n</container>\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Profiler in PHP\nDESCRIPTION: PHP configuration to enable the Symfony Profiler while setting collect to false for performance optimization in test environment.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/testing/profiling.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/test/web_profiler.php\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework): void {\n    // ...\n    $framework->profiler()\n        ->enabled(true)\n        ->collect(false)\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Running Tests for a Single Symfony Component\nDESCRIPTION: Command to run tests for a specific Symfony component instead of the entire test suite. This example shows testing just the Finder component, which is faster than running all tests.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/contributing/code/tests.rst#2025-04-22_snippet_3\n\nLANGUAGE: terminal\nCODE:\n```\n$ php ./phpunit src/Symfony/Component/Finder/\n```\n\n----------------------------------------\n\nTITLE: Casting HTTP Port Environment Variable in Symfony with YAML Configuration\nDESCRIPTION: Shows how to convert the value of the HTTP_PORT environment variable to an integer using the \"int\" env var processor in a Symfony YAML configuration file. Requires Symfony framework configured for YAML and expects HTTP_PORT as an environment variable. Input is an environment variable, output is the casted value assigned to the router's HTTP port setting.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/env_var_processors.rst#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/framework.yaml\\nframework:\\n    router:\\n        http_port: '%env(int:HTTP_PORT)%'\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Save Path to Null in XML\nDESCRIPTION: Example configuration that sets the session save path to null in a Symfony XML configuration file, which causes the application to rely on the php.ini session.save_path directive.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_77\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/framework.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <framework:config>\n        <framework:session save-path=\"null\"/>\n    </framework:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Configuring AssetMapper Paths in YAML\nDESCRIPTION: Shows how to configure asset paths in the asset_mapper.yaml file, including simple lists and namespaced paths for organizing assets from different sources.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/asset_mapper.rst#2025-04-22_snippet_37\n\nLANGUAGE: yaml\nCODE:\n```\nframework:\n    asset_mapper:\n        paths:\n            - assets/\n            - vendor/some/package/assets\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Token Provider in XML\nDESCRIPTION: Sets up a custom remember me token provider using XML configuration. This defines a custom service to handle token storage and retrieval.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/remember_me.rst#2025-04-22_snippet_15\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/security.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<srv:container xmlns=\"http://symfony.com/schema/dic/security\"\n    xmlns:srv=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/security\n        https://symfony.com/schema/dic/security/security-1.0.xsd\">\n\n    <config>\n        <!-- ... -->\n\n        <firewall name=\"main\">\n            <!-- ... -->\n\n            <remember-me>\n                <token-provider service=\"App\\Security\\RememberMe\\CustomTokenProvider\"/>\n            </remember-me>\n        </firewall>\n    </config>\n</srv:container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Access Token Extractor (PHP - Symfony)\nDESCRIPTION: Demonstrates setting a different built-in or custom token extractor using PHP configuration. Call tokenExtractors with either built-in extractor names (as strings) or custom extractor classes implementing AccessTokenExtractorInterface. Use in config/packages/security.php alongside access token authenticator setup.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/access_token.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/security.php\\nuse App\\Security\\AccessTokenHandler;\\nuse App\\Security\\CustomTokenExtractor;\\nuse Symfony\\Config\\SecurityConfig;\\n\\nreturn static function (SecurityConfig $security): void {\\n    $security->firewall('main')\\n        ->accessToken()\\n            ->tokenHandler(AccessTokenHandler::class)\\n\\n            // use a different built-in extractor\\n            ->tokenExtractors('request_body')\\n\\n            # or provide the service ID of a custom extractor\\n            ->tokenExtractors(CustomTokenExtractor::class)\\n    ;\\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Wither Method Call (Returns Clone) in YAML\nDESCRIPTION: This YAML configuration snippet configures a call to the `withLogger` wither method on the `App\\Service\\MessageGenerator`. The `!returns_clone` tag indicates that the method returns a new instance, and the container should use this returned instance as the service definition going forward.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/calls.rst#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nservices:\n    App\\Service\\MessageGenerator:\n        # ...\n        calls:\n            - withLogger: !returns_clone ['@logger']\n```\n\n----------------------------------------\n\nTITLE: Setting Default Values for Environment Variables in YAML\nDESCRIPTION: This YAML snippet shows how to set a default value for an environment variable in Symfony configuration, which is used when the environment variable is not defined elsewhere.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration.rst#2025-04-22_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/framework.yaml\nparameters:\n    # if the SECRET env var value is not defined anywhere, Symfony uses this value\n    env(SECRET): 'some_secret'\n\n# ...\n```\n\n----------------------------------------\n\nTITLE: Setting Time Label in DateTimeType Field\nDESCRIPTION: Shows how to set a custom label for the time widget in a DateTimeType field.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/datetime.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\DateTimeType;\n\n$builder->add('startDateTime', DateTimeType::class, [\n    'time_label' => 'Starts On',\n]);\n```\n\n----------------------------------------\n\nTITLE: Defining min Option for Range Constraint in RST\nDESCRIPTION: Specifies the minimum value for the Range constraint. It includes information about the option type and its purpose.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Range.rst#2025-04-22_snippet_11\n\nLANGUAGE: rst\nCODE:\n```\n``min``\n~~~~~~~\n\n**type**: ``number`` or ``string`` (date format)\n\nThis required option is the \"min\" value. Validation will fail if the given\nvalue is **less** than this min value.\n```\n\n----------------------------------------\n\nTITLE: Date Formats in YAML\nDESCRIPTION: Examples of ISO-8601 date formats in YAML.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/formats/yaml.rst#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n2001-12-14T21:59:43.10-05:00\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# simple date\n2002-12-14\n```\n\n----------------------------------------\n\nTITLE: Configuring Firewall Host Restriction - Symfony YAML\nDESCRIPTION: Restricts a Symfony firewall in YAML to requests whose host matches a specific pattern, here \"admin.example.com\", using the \"host\" key with a regular expression. Place within \"config/packages/security.yaml\". Requires valid host pattern and Security bundle active.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/firewall_restriction.rst#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\n\n# ...\nsecurity:\n    firewalls:\n        secured_area:\n            host: ^admin\\.example\\.com$\n            # ...\n```\n\n----------------------------------------\n\nTITLE: Configuring snake_case to CamelCase Name Converter in YAML\nDESCRIPTION: YAML configuration for setting up the snake_case to CamelCase name converter in the Symfony Serializer.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer.rst#2025-04-22_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/serializer.yaml\nframework:\n    serializer:\n        name_converter: 'serializer.name_converter.snake_case_to_camel_case'\n```\n\n----------------------------------------\n\nTITLE: Basic Controller Example with Custom Value Resolver\nDESCRIPTION: Example controller class showing usage of a custom BookingId value object as a controller argument\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/controller/value_resolver.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Controller;\n\nuse App\\Reservation\\BookingId;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass BookingController\n{\n    public function index(BookingId $id): Response\n    {\n        // ... do something with $id\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Prototyped Array Nodes with fixXmlConfig Compatibility in Symfony (PHP)\nDESCRIPTION: Illustrates how to create a prototyped array node compatible with both YAML and XML by using fixXmlConfig and a scalarPrototype. Ensures that both single values and arrays (from XML or YAML) are correctly normalized. Required dependencies: Symfony Config builder. Inputs: lists or repeated XML tags. Outputs: flat array of scalars, with keys handled as per useAttributeAsKey or normalization settings.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/config/definition.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$node\n    ->fixXmlConfig('driver')\n    ->children()\n        ->arrayNode('drivers')\n            ->scalarPrototype()->end()\n        ->end()\n    ->end()\n;\n```\n\n----------------------------------------\n\nTITLE: Example Swedish Translation XLIFF File\nDESCRIPTION: Shows an example of existing Swedish translations in the validators.sv.xlf file, demonstrating the XLIFF format structure and translated content for validation messages.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/contributing/translations/index.rst#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<!-- src/Symfony/Component/Validator/Resources/translations/validators.sv.xlf -->\n\n<!-- ... -->\n<trans-unit id=\"91\">\n    <source>This value should be either negative or zero.</source>\n    <target>Detta värde bör vara antingen negativt eller noll.</target>\n</trans-unit>\n<trans-unit id=\"92\">\n    <source>This value is not a valid timezone.</source>\n    <target>Detta värde är inte en giltig tidszon.</target>\n</trans-unit>\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Code of Conduct in reStructuredText\nDESCRIPTION: This snippet creates a table of contents for the Code of Conduct section using reStructuredText directives. It sets the maximum depth to 2 and lists the relevant pages to be included.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/contributing/code_of_conduct/index.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :maxdepth: 2\n\n    code_of_conduct\n    reporting_guidelines\n    care_team\n    concrete_example_document\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Runtime Autoload Template in composer.json\nDESCRIPTION: This JSON snippet demonstrates configuring a custom template file for the generated `autoload_runtime.php` within the `extra.runtime` section of `composer.json`. This allows for advanced customization of the bootstrapping logic.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/runtime.rst#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"require\": {\n        \"...\": \"...\"\n    },\n    \"extra\": {\n        \"runtime\": {\n            \"autoload_template\": \"resources/runtime/autoload_runtime.template\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic String Formatting in YAML\nDESCRIPTION: Demonstrates different ways to format strings in YAML, including unquoted, single-quoted, and double-quoted strings.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/formats/yaml.rst#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nA string in YAML\n\n'A single-quoted string in YAML'\n\n\"A double-quoted string in YAML\"\n```\n\n----------------------------------------\n\nTITLE: Spanning Multiple Rows\nDESCRIPTION: Demonstrates creating table cells that span multiple rows\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/helpers/table.rst#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Console\\Helper\\Table;\nuse Symfony\\Component\\Console\\Helper\\TableCell;\n\n$table = new Table($output);\n$table\n    ->setHeaders(['ISBN', 'Title', 'Author'])\n    ->setRows([\n        [\n            '978-0521567817',\n            'De Monarchia',\n            new TableCell(\"Dante Alighieri\\nspans multiple rows\", ['rowspan' => 2]),\n        ],\n        ['978-0804169127', 'Divine Comedy'],\n    ])\n;\n$table->render();\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Preload Tags in XML\nDESCRIPTION: Example of configuring service container preload tags using XML configuration for preloading specific classes.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/dic_tags.rst#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"App\\SomeNamespace\\SomeService\">\n            <tag name=\"container.preload\" class=\"App\\SomeClass\"/>\n            <tag name=\"container.preload\" class=\"App\\Some\\OtherClass\"/>\n            <!-- ... -->\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Installing HTML Sanitizer Component via Composer\nDESCRIPTION: Shows how to install the HTML Sanitizer component using Composer.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/html_sanitizer.rst#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ composer require symfony/html-sanitizer\n```\n\n----------------------------------------\n\nTITLE: TelType Class Reference\nDESCRIPTION: PHP class reference for the TelType form field implementation in Symfony's form component. Extends the TextType field with telephone-specific functionality.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/tel.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nSymfony\\Component\\Form\\Extension\\Core\\Type\\TelType\n```\n\n----------------------------------------\n\nTITLE: Configuring Couchbase Connection with Single DSN\nDESCRIPTION: Demonstrates creating a Couchbase connection using a single DSN string with the createConnection helper method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/cache/adapters/couchbasebucket_adapter.rst#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Cache\\Adapter\\CouchbaseBucketAdapter;\n\n// pass a single DSN string to register a single server with the client\n$client = CouchbaseBucketAdapter::createConnection(\n    'couchbase://localhost'\n    // the DSN can include config options (pass them as a query string):\n    // 'couchbase://localhost:11210?operationTimeout=10'\n    // 'couchbase://localhost:11210?operationTimeout=10&configTimeout=20'\n);\n```\n\n----------------------------------------\n\nTITLE: Generating Absolute Logout URLs in Twig\nDESCRIPTION: Similar to `logout_path`, the `logout_url` function generates a logout URL based on firewall configuration, but it produces an absolute URL (including scheme and host) instead of a relative one. It accepts an optional firewall `key`. If no key is provided, it uses the current firewall.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#2025-04-22_snippet_16\n\nLANGUAGE: twig\nCODE:\n```\n{{ logout_url(key = null) }}\n```\n\n----------------------------------------\n\nTITLE: Simple Collection Rendering in Twig\nDESCRIPTION: Shows the simplest way to render a collection field in a Twig template.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/collection.rst#2025-04-22_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ form_row(form.emails) }}\n```\n\n----------------------------------------\n\nTITLE: Defining HTML5 Color Format Validation in Symfony ColorType\nDESCRIPTION: This code snippet shows the regular expression pattern used to validate HTML5 color format in the ColorType field. It ensures the value matches a 7-character string specifying an RGB color in lower case hexadecimal notation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/color.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n``/^#[0-9a-f]{6}$/i``\n```\n\n----------------------------------------\n\nTITLE: Documenting New Argument with PHPDoc in PHP\nDESCRIPTION: This snippet shows how to document a new argument using PHPDoc. It's part of the process of adding a new argument to a public method in a backward-compatible way.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/contributing/code/bc.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @param bool $stripWhitespace\n */\n```\n\n----------------------------------------\n\nTITLE: Serving Files Headers Setup\nDESCRIPTION: Shows how to set up headers for serving files using HeaderUtils.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#2025-04-22_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\HttpFoundation\\HeaderUtils;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpFoundation\\ResponseHeaderBag;\n\n$fileContent = ...; // the generated file content\n$response = new Response($fileContent);\n\n$disposition = HeaderUtils::makeDisposition\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Save Path to Null in PHP\nDESCRIPTION: Example configuration that sets the session save path to null in a Symfony PHP configuration file, which causes the application to rely on the php.ini session.save_path directive.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_78\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/framework.php\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework): void {\n    $framework->session()\n        ->savePath(null);\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Task Form with Embedded Tag Collection in Twig\nDESCRIPTION: Twig template to render the Task form, including iteration over the embedded Tag forms.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/form_collections.rst#2025-04-22_snippet_5\n\nLANGUAGE: Twig\nCODE:\n```\n{# templates/task/new.html.twig #}\n\n{# ... #}\n\n{{ form_start(form) }}\n    {{ form_row(form.description) }}\n\n    <h3>Tags</h3>\n    <ul class=\"tags\">\n        {% for tag in form.tags %}\n            <li>{{ form_row(tag.name) }}</li>\n        {% endfor %}\n    </ul>\n{{ form_end(form) }}\n\n{# ... #}\n```\n\n----------------------------------------\n\nTITLE: Initializing ChoiceType Field with Basic Options in PHP\nDESCRIPTION: This snippet demonstrates how to add a ChoiceType field to a Symfony form builder with basic options. It creates a select dropdown with 'Maybe', 'Yes', and 'No' choices.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/choice.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\ChoiceType;\n// ...\n\n$builder->add('isAttending', ChoiceType::class, [\n    'choices'  => [\n        'Maybe' => null,\n        'Yes' => true,\n        'No' => false,\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Rendering Form Row with Custom Label in Twig\nDESCRIPTION: Shows how to render a complete form row (label, widget, errors, and help) with a custom label text 'foo' instead of the default label.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/form_customization.rst#2025-04-22_snippet_8\n\nLANGUAGE: twig\nCODE:\n```\n{# render a field row, but display a label with text \"foo\" #}\n{{ form_row(form.name, {'label': 'foo'}) }}\n```\n\n----------------------------------------\n\nTITLE: Passing Resolved Parameter to Configuration from Extension (PHP)\nDESCRIPTION: Shows how to modify the bundle's `Extension` class (`AppExtension`). In the `getConfiguration` method, it retrieves the actual boolean value of the `kernel.debug` container parameter using `$container->getParameter('kernel.debug')` and passes it to the `Configuration` class constructor when instantiating it. This links the resolved parameter value to the configuration definition.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/using_parameters_in_dic.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\DependencyInjection;\n\nuse Symfony\\Component\\DependencyInjection\\ContainerBuilder;\nuse Symfony\\Component\\HttpKernel\\DependencyInjection\\Extension;\n\nclass AppExtension extends Extension\n{\n    // ...\n\n    public function getConfiguration(array $config, ContainerBuilder $container): Configuration\n    {\n        return new Configuration($container->getParameter('kernel.debug'));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring LessThanOrEqual Constraint in PHP\nDESCRIPTION: PHP code for setting up the LessThanOrEqual constraint on 'siblings' and 'age' properties using the loadValidatorMetadata method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/LessThanOrEqual.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Person.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Person\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('siblings', new Assert\\LessThanOrEqual(5));\n\n        $metadata->addPropertyConstraint('age', new Assert\\LessThanOrEqual(\n            value: 80,\n        ));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Twig Image Path in XML\nDESCRIPTION: XML configuration to set up a Twig namespace for image paths, making it easier to reference images in email templates.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_44\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/twig.xml -->\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:twig=\"http://symfony.com/schema/dic/twig\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/twig https://symfony.com/schema/dic/twig/twig-1.0.xsd\">\n\n    <twig:config>\n        <!-- ... -->\n\n        <!-- point this wherever your images live -->\n        <twig:path namespace=\"images\">%kernel.project_dir%/assets/images</twig:path>\n    </twig:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Searching for Specific Tag in Symfony Console\nDESCRIPTION: Command to search for services with a specific tag (e.g. form.type) using the console debug container command.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/dic_tags.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ php bin/console debug:container --tag=form.type\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Twig Templates Path (Symfony, YAML)\nDESCRIPTION: This YAML configuration sets a non-default templates directory for Twig in config/packages/twig.yaml. The default_path key is set to a custom directory, often %kernel.project_dir%/resources/views. This must be present in the twig configuration block for custom templates location.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/override_dir_structure.rst#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/twig.yaml\\ntwig:\\n    # ...\\n    default_path: \"%kernel.project_dir%/resources/views\"\n```\n\n----------------------------------------\n\nTITLE: Comparing Dates with LessThan Constraint Using PHP Attributes\nDESCRIPTION: Example of using the LessThan constraint with DateTime objects to validate that a date is in the past using PHP attributes.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/LessThan.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Person.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Person\n{\n    #[Assert\\LessThan('today')]\n    protected \\DateTimeInterface $dateOfBirth;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ResolveTargetEntityListener in XML\nDESCRIPTION: XML configuration for Doctrine ORM to resolve the interface to concrete implementation using ResolveTargetEntityListener.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine/resolve_target_entity.rst#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/doctrine.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:doctrine=\"http://symfony.com/schema/dic/doctrine\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/doctrine\n        https://symfony.com/schema/dic/doctrine/doctrine-1.0.xsd\">\n\n    <doctrine:config>\n        <doctrine:orm>\n            <!-- ... -->\n            <doctrine:resolve-target-entity interface=\"App\\Model\\InvoiceSubjectInterface\">App\\Entity\\Customer</doctrine:resolve-target-entity>\n        </doctrine:orm>\n    </doctrine:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Mailer in XML\nDESCRIPTION: XML configuration for Symfony Mailer that references the DSN from environment variables. This provides the same functionality as the YAML configuration but in XML format.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/mailer.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <framework:config>\n        <framework:mailer dsn=\"%env(MAILER_DSN)%\"/>\n    </framework:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Registering CustomNormalizer in Symfony YAML Configuration\nDESCRIPTION: This snippet shows how to register a CustomNormalizer as a service in Symfony's YAML configuration. It sets a high priority to ensure the normalizer is called earlier in the normalization process.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer.rst#2025-04-22_snippet_40\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nservices:\n    # ...\n\n    # if you're using autoconfigure, the tag will be automatically applied\n    Symfony\\Component\\Serializer\\Normalizer\\CustomNormalizer:\n        tags:\n            # register the normalizer with a high priority (called earlier)\n            - { name: 'serializer.normalizer', priority: 500 }\n```\n\n----------------------------------------\n\nTITLE: Listing Deprecations Generated at Compile-Time with debug:container - Terminal - terminal\nDESCRIPTION: This command lists all deprecations triggered during compiling and warming up the Symfony service container. It is executed from the terminal using the Symfony CLI, specifically calling 'debug:container' with the '--deprecations' flag. The output is a detailed list of compile-time deprecations.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/phpunit_bridge.rst#2025-04-22_snippet_15\n\nLANGUAGE: terminal\nCODE:\n```\n$ php bin/console debug:container --deprecations\n```\n\n----------------------------------------\n\nTITLE: Configuring Selectable Days Values for DateIntervalType - Symfony Forms - PHP\nDESCRIPTION: Shows how to set available choices for the 'days' component when rendering a DateIntervalType field with the 'choice' widget. Options include passing a sequential range or an associative array mapping values to display labels. Proper PHP array usage is required; can influence which day values the user can select in the form.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/dateinterval.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// values displayed to users range from 0 to 30 (both inclusive)\n'days' => range(1, 31),\n```\n\nLANGUAGE: php\nCODE:\n```\n// values displayed to users range from 1 to 31 (both inclusive)\n'days' => array_combine(range(1, 31), range(1, 31)),\n```\n\n----------------------------------------\n\nTITLE: Updating Composer Version Constraints for Symfony Packages - Diff Format\nDESCRIPTION: Demonstrates the necessary changes in the composer.json file to update Symfony package requirements from one minor version (e.g., 6.3.*) to another (e.g., 6.4.*). This diff-format snippet is intended to be applied to the require list and extra block of composer.json. Prerequisites include access and write permissions for composer.json; editors should ensure only symfony package versions are changed, as described, to avoid disrupting other dependencies.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/upgrade_minor.rst#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n      {\n          \"...\": \"...\",\n\n          \"require\": {\n-         \"symfony/config\": \"6.3.*\",\n+         \"symfony/config\": \"6.4.*\",\n-         \"symfony/console\": \"6.3.*\",\n+         \"symfony/console\": \"6.4.*\",\n              \"...\": \"...\",\n\n              \"...\": \"A few libraries starting with\n                      symfony/ follow their own versioning scheme. You\n                      do not need to update these versions: you can\n                      upgrade them independently whenever you want\",\n              \"symfony/monolog-bundle\": \"^3.10\",\n          },\n          \"...\": \"...\",\n      }\n```\n\nLANGUAGE: diff\nCODE:\n```\n      \"extra\": {\n          \"symfony\": {\n              \"...\": \"...\",\n-         \"require\": \"6.3.*\"\n+         \"require\": \"6.4.*\"\n          }\n      }\n```\n\n----------------------------------------\n\nTITLE: Deserializing JSON Data to an Object in a Standalone PHP Application\nDESCRIPTION: Illustrates deserializing JSON data into a `Person` object outside the Symfony framework. It assumes a `$serializer` instance has been created (as shown in the standalone serialization example) and calls its `deserialize` method with the JSON data, target class name, and format.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Model\\Person;\nuse Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\nuse Symfony\\Component\\Serializer\\Normalizer\\ObjectNormalizer;\nuse Symfony\\Component\\Serializer\\Serializer;\n\n// ...\n$jsonData = ...; // fetch JSON from the request\n$person = $serializer->deserialize($jsonData, Person::class, 'json');\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Notifier in Symfony\nDESCRIPTION: Example of setting up environment variables in .env file for configuring the Expo notification service.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/notifier.rst#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n# .env\nEXPO_DSN=expo://TOKEN@default\n```\n\n----------------------------------------\n\nTITLE: Configuring CAS Token Handler with Custom Prefix in PHP\nDESCRIPTION: PHP configuration for setting up a CAS token handler with a custom XML response prefix using the Symfony Config system. This defines the validation URL and prefix within a security firewall.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/access_token.rst#2025-04-22_snippet_36\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/security.php\nuse Symfony\\Config\\SecurityConfig;\n\nreturn static function (SecurityConfig $security) {\n    $security->firewall('main')\n        ->accessToken()\n            ->tokenHandler()\n                ->cas()\n                    ->validationUrl('https://www.example.com/cas/validate')\n                    ->prefix('cas-example')\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Installing the Symfony Ldap Component via Composer\nDESCRIPTION: Installs the Symfony Ldap component using Composer. This command downloads and adds the component to your project's dependencies.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/ldap.rst#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require symfony/ldap\n```\n\n----------------------------------------\n\nTITLE: Initializing main JavaScript file in assets/app.js\nDESCRIPTION: Main JavaScript entry point that imports CSS and initializes Stimulus application.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/installation.rst#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// assets/app.js\n/*\n * Welcome to your app's main JavaScript file!\n *\n * We recommend including the built version of this JavaScript file\n * (and its CSS file) in your base layout (base.html.twig).\n */\n\n// any CSS you import will output into a single css file (app.css in this case)\nimport './styles/app.css';\n\n// start the Stimulus application\nimport './bootstrap';\n```\n\n----------------------------------------\n\nTITLE: Disabling XML Container Dump in YAML\nDESCRIPTION: Configuration to disable dumping the service container as XML in debug mode using YAML format, which can improve performance with large containers.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/performance.rst#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nparameters:\n    # ...\n    debug.container.dump: false\n```\n\n----------------------------------------\n\nTITLE: AssetMapper Warning Messages for Missing Assets\nDESCRIPTION: This snippet displays example warning messages that AssetMapper generates when it cannot find referenced assets in CSS or JavaScript files.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/asset_mapper.rst#2025-04-22_snippet_32\n\nLANGUAGE: text\nCODE:\n```\nWARNING   [asset_mapper] Unable to find asset \"../images/ducks.png\" referenced in \"assets/styles/app.css\".\nWARNING   [asset_mapper] Unable to find asset \"./ducks.js\" imported from \"assets/app.js\".\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony Rate Limiter Component\nDESCRIPTION: Command to install the Symfony Rate Limiter component using Composer.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/rate_limiter.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require symfony/rate-limiter\n```\n\n----------------------------------------\n\nTITLE: Defining max Option for Range Constraint in RST\nDESCRIPTION: Specifies the maximum value for the Range constraint. It includes information about the option type and its purpose.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Range.rst#2025-04-22_snippet_8\n\nLANGUAGE: rst\nCODE:\n```\n``max``\n~~~~~~~\n\n**type**: ``number`` or ``string`` (date format)\n\nThis required option is the \"max\" value. Validation will fail if the given\nvalue is **greater** than this max value.\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony Clock Component via Composer\nDESCRIPTION: Command to install the Symfony Clock component using Composer package manager\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/clock.rst#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require symfony/clock\n```\n\n----------------------------------------\n\nTITLE: Casting Secret Environment Variable to String in Symfony with PHP Configuration\nDESCRIPTION: Casts the SECRET environment variable to a string using the PHP configuration approach for Symfony. It sets the container parameter for env(SECRET) and assigns the processed value to framework->secret(). Dependencies include ContainerBuilder and FrameworkConfig. Input is the SECRET env var; output is its string value used as secret.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/env_var_processors.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/framework.php\\nnamespace Symfony\\\\Component\\\\DependencyInjection\\\\Loader\\\\Configurator;\\n\\nuse Symfony\\\\Component\\\\DependencyInjection\\\\ContainerBuilder;\\nuse Symfony\\\\Config\\\\FrameworkConfig;\\n\\nreturn static function (ContainerBuilder $container, FrameworkConfig $framework): void {\\n    $container->setParameter('env(SECRET)', 'some_secret');\\n    $framework->secret(env('SECRET')->string());\\n};\\n\n```\n\n----------------------------------------\n\nTITLE: Example of HTML Form Supporting Multi-dimensional Fields\nDESCRIPTION: Provides example HTML markup for a form with multi-valued and multi-dimensional fields, which can be tested and filled via Symfony DomCrawler's setValues method. Useful for replicating real-world form structures in scraper or test scenarios.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/dom_crawler.rst#2025-04-22_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<form>\n    <input name=\"multi[]\">\n    <input name=\"multi[]\">\n    <input name=\"multi[dimensional]\">\n    <input name=\"multi[dimensional][]\" value=\"1\">\n    <input name=\"multi[dimensional][]\" value=\"2\">\n    <input name=\"multi[dimensional][]\" value=\"3\">\n</form>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Compound Constraint with Groups and Payload in PHP\nDESCRIPTION: Shows how to apply the custom PasswordRequirements constraint with validation groups and payload using the loadValidatorMetadata method in PHP.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Compound.rst#2025-04-22_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n// src/Entity/User.php\nnamespace App\\Entity\\User;\n\nuse App\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass User\n{\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('plainPassword', new Assert\\PasswordRequirements(\n            groups: ['registration'],\n            payload: ['severity' => 'error'],\n        ));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Indicator Values in PHP\nDESCRIPTION: Demonstrates how to set custom indicator symbols for the progress animation using Unicode characters.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/helpers/progressindicator.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$progressIndicator = new ProgressIndicator($output, 'verbose', 100, ['⠏', '⠛', '⠹', '⢸', '⣰', '⣤', '⣆', '⡇']);\n```\n\n----------------------------------------\n\nTITLE: XML Namespace Example\nDESCRIPTION: Sample XML document with multiple namespaces for demonstration purposes.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/dom_crawler.rst#2025-04-22_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<entry\n    xmlns=\"http://www.w3.org/2005/Atom\"\n    xmlns:media=\"http://search.yahoo.com/mrss/\"\n    xmlns:yt=\"http://gdata.youtube.com/schemas/2007\"\n>\n    <id>tag:youtube.com,2008:video:kgZRZmEc9j4</id>\n    <yt:accessControl action=\"comment\" permission=\"allowed\"/>\n    <yt:accessControl action=\"videoRespond\" permission=\"moderated\"/>\n    <media:group>\n        <media:title type=\"plain\">Chordates - CrashCourse Biology #24</media:title>\n        <yt:aspectRatio>widescreen</yt:aspectRatio>\n    </media:group>\n</entry>\n```\n\n----------------------------------------\n\nTITLE: Configuring Pseudolocalization in Symfony\nDESCRIPTION: YAML configuration example for enabling pseudolocalization in Symfony's translator component. This helps debug internationalization issues by transforming text with accented characters and brackets.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/translation.rst#2025-04-22_snippet_57\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/translation.yaml\nframework:\n    translator:\n        pseudo_localization:\n            # replace characters by their accented version\n            accents: true\n            # wrap strings with brackets\n            brackets: true\n```\n\n----------------------------------------\n\nTITLE: Configuring PHP Error Logging in Symfony XML\nDESCRIPTION: This XML configuration snippet shows how to set up PHP error logging in Symfony's framework.xml file. It demonstrates mapping error types to log levels, though it's noted that XML format is less readable for this purpose.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_61\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <framework:config>\n        <!-- in XML configuration you cannot use PHP constants as the value of\n             the 'type' attribute, which makes this format way less readable.\n             Consider using YAML or PHP for this configuration -->\n        <framework:log type=\"8\" logLevel=\"error\"/>\n        <framework:log type=\"2\" logLevel=\"error\"/>\n        <!-- ... -->\n    </framework:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Defined Environment Variable in YAML\nDESCRIPTION: Demonstrates how to use the 'defined' processor in a YAML configuration file to check if an environment variable exists and is not empty.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/env_var_processors.rst#2025-04-22_snippet_38\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nparameters:\n    typed_env: '%env(defined:FOO)%'\n```\n\n----------------------------------------\n\nTITLE: Global Email Signing Configuration in XML\nDESCRIPTION: XML configuration for global DKIM and S/MIME signing settings in Symfony.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_58\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <framework:config>\n        <framework:mailer>\n            <framework:dkim-signer>\n                <framework:key>file://%kernel.project_dir%/var/certificates/dkim.pem</framework:key>\n                <framework:domain>symfony.com</framework:domain>\n                <framework:select>s1</framework:select>\n            </framework:dkim-signer>\n            <framework:smime-signer>\n                <framework:key>%kernel.project_dir%/var/certificates/smime.pem</framework:key>\n                <framework:certificate>%kernel.project_dir%/var/certificates/smime.crt</framework:certificate>\n                <framework:passphrase></framework:passphrase>\n            </framework:smime-signer>\n        </framework:mailer>\n    </framework:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Registering a Symfony Normalizer Service with Priority - YAML\nDESCRIPTION: This YAML snippet shows how to register a custom normalizer as a Symfony service and tag it with serializer.normalizer with a high priority. This configuration must be placed in config/services.yaml and will ensure the custom TopicNormalizer is called early in the normalization process. It does not require autoconfigure, but will work with or without it, and additional services can be defined similarly.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer/custom_normalizer.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nservices:\n    # ...\n\n    App\\Serializer\\TopicNormalizer:\n        tags:\n            # register the normalizer with a high priority (called earlier)\n            - { name: 'serializer.normalizer', priority: 500 }\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Coverage Listener in PHPUnit\nDESCRIPTION: XML configuration for setting up the PHPUnit coverage listener with basic configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/phpunit_bridge.rst#2025-04-22_snippet_31\n\nLANGUAGE: xml\nCODE:\n```\n<!-- https://phpunit.de/manual/6.0/en/appendixes.configuration.html -->\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/6.0/phpunit.xsd\"\n>\n    <!-- ... -->\n    <listeners>\n        <listener class=\"Symfony\\Bridge\\PhpUnit\\CoverageListener\"/>\n    </listeners>\n</phpunit>\n```\n\n----------------------------------------\n\nTITLE: Configuring Default hinclude Template in PHP\nDESCRIPTION: PHP configuration for setting the default template used by hinclude fragments\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/templates.rst#2025-04-22_snippet_43\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/framework.php\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework): void {\n    // ...\n    $framework->fragments()\n        ->hincludeDefaultTemplate('hinclude.html.twig')\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Link Definitions\nDESCRIPTION: RST syntax for defining external hyperlinks used in the documentation for blog post and Google Translate references.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/contributing/documentation/translations.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _`this blog post`: https://symfony.com/blog/discontinuing-the-symfony-community-translations\n.. _`Google Translate`: https://translate.google.com\n```\n\n----------------------------------------\n\nTITLE: Displaying Voting Requirements Table in reStructuredText\nDESCRIPTION: A reStructuredText table showing the voting combinations that result in an actionable item passing within the Symfony Diversity Initiative governance. This table illustrates the required 'For', 'Against', and 'Abstain' vote distributions needed for approval.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/contributing/diversity/governance.rst#2025-04-22_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n+-----+---------+---------+\n| For | Against | Abstain |\n+=====+=========+=========+\n| 5   | 0       | 0       |\n+-----+---------+---------+\n| 4   | 1       | 0       |\n+-----+---------+---------+\n| 3   | 2       | 0       |\n+-----+---------+---------+\n| 4   | 0       | 1       |\n+-----+---------+---------+\n| 3   | 1       | 1       |\n+-----+---------+---------+\n```\n\n----------------------------------------\n\nTITLE: Template-based Hello Page\nDESCRIPTION: Example of a template-style page implementation using PHP with HTML\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/create_framework/front_controller.rst#2025-04-22_snippet_3\n\nLANGUAGE: html+php\nCODE:\n```\n<?php $name = $request->query->get('name', 'World') ?>\n\nHello <?= htmlspecialchars($name, ENT_QUOTES, 'UTF-8') ?>\n```\n\n----------------------------------------\n\nTITLE: Configuring Wither Method Call (Returns Clone) in XML\nDESCRIPTION: This XML configuration snippet defines a call to the `withLogger` wither method. The `returns-clone=\"true\"` attribute on the `<call>` tag signals to the container that the method returns a cloned instance, which should replace the original service instance in the container.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/calls.rst#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"https://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"App\\Service\\MessageGenerator\">\n            <!-- ... -->\n            <call method=\"withLogger\" returns-clone=\"true\">\n                <argument type=\"service\" id=\"logger\"/>\n            </call>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Adding ResetType with Custom Class in PHP\nDESCRIPTION: This snippet demonstrates how to add a ResetType button to a form builder with a custom CSS class. It uses the 'attr' option to set the class attribute.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/reset.rst#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\ResetType;\n// ...\n\n$builder->add('save', ResetType::class, [\n    'attr' => ['class' => 'save'],\n]);\n```\n\n----------------------------------------\n\nTITLE: Applying yaml_encode Filter in Twig\nDESCRIPTION: Uses the `yaml_encode` Twig filter to convert a PHP variable (`input`, mixed type) into its YAML representation. Optional arguments `inline` (integer, default 0) controls the level for inline formatting, and `dumpObjects` (boolean, default false) controls if PHP objects should be dumped.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#2025-04-22_snippet_44\n\nLANGUAGE: twig\nCODE:\n```\n{{ input|yaml_encode(inline = 0, dumpObjects = false) }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Translation Parameters in XML\nDESCRIPTION: Shows how to configure global translation parameters in the XML configuration file. These parameters can be used across multiple translation messages without repetition.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/translation.rst#2025-04-22_snippet_13\n\nLANGUAGE: XML\nCODE:\n```\n<!-- config/packages/translation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony\n        https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <framework:config>\n        <framework:translator>\n            <!-- ... -->\n             <!-- when using the '%' wrapping characters, you must escape them -->\n            <framework:global name=\"%%app_name%%\">My application</framework:global>\n            <framework:global name=\"{app_version}\" value=\"1.2.3\"/>\n            <framework:global name=\"{url}\" message=\"url\" domain=\"global\">\n                 <framework:parameter name=\"scheme\">https://</framework:parameter>\n             </framework:global>\n        </framework:translator>\n    </framework:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Defining FormType Options in RST\nDESCRIPTION: This snippet shows the structure and formatting for documenting FormType options in reStructuredText (RST) format. It includes table formatting for default settings and option descriptions.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/form.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nFormType Field\n==============\n\nThe ``FormType`` predefines a couple of options that are then available\non all types for which ``FormType`` is the parent.\n\n+---------------------------+--------------------------------------------------------------------+\n| Default invalid message   | This value is not valid.                                           |\n+---------------------------+--------------------------------------------------------------------+\n| Parent                    | none                                                               |\n+---------------------------+--------------------------------------------------------------------+\n| Class                     | :class:`Symfony\\Component\\Form\\Extension\\Core\\Type\\FormType` |\n+---------------------------+--------------------------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Displaying Full Stack Trace for Deprecations by Matching with Regex - Terminal - terminal\nDESCRIPTION: This command causes the PHPUnit Bridge to show the full stack trace for deprecations by passing a regular expression to SYMFONY_DEPRECATIONS_HELPER. Any deprecation message matching the regex will result in full stack trace output during the test run. Useful for debugging the origin of particular deprecations.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/phpunit_bridge.rst#2025-04-22_snippet_20\n\nLANGUAGE: terminal\nCODE:\n```\n$ SYMFONY_DEPRECATIONS_HELPER='/Doctrine\\\\Common\\\\ClassLoader is deprecated\\./' ./vendor/bin/simple-phpunit\n```\n\n----------------------------------------\n\nTITLE: Displaying Twig Configuration in Symfony CLI\nDESCRIPTION: Shows how to use Symfony console commands to display default and actual Twig configuration values.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/twig.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# displays the default config values defined by Symfony\n$ php bin/console config:dump-reference twig\n\n# displays the actual config values used by your application\n$ php bin/console debug:config twig\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom Entry Point in Symfony Security PHP\nDESCRIPTION: This PHP configuration snippet illustrates how to define the custom `AuthenticationEntryPoint` class as the entry point for the `main` firewall using PHP configuration (`security.php`). It utilizes the `SecurityConfig` object to configure the firewall settings.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/access_denied_handler.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/security.php\nuse App\\Security\\AuthenticationEntryPoint;\nuse Symfony\\Config\\SecurityConfig;\n\nreturn static function (SecurityConfig $security): void {\n    $security->firewall('main')\n        // ....\n        ->entryPoint(AuthenticationEntryPoint::class)\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Bundle Documentation Structure with reStructuredText\nDESCRIPTION: Sets up a table of contents tree for Symfony bundle documentation using reStructuredText directives. The toctree has a maximum depth of 2 levels and includes key bundle-related documentation sections.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/bundles/index.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :maxdepth: 2\n\n    override\n    best_practices\n    configuration\n    extension\n    prepend_extension\n```\n\n----------------------------------------\n\nTITLE: Prepending Extension in Bundle Class\nDESCRIPTION: Example of prepending configuration directly in a bundle class using AbstractBundle and prependExtension method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/bundles/prepend_extension.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\DependencyInjection\\ContainerBuilder;\nuse Symfony\\Component\\DependencyInjection\\Loader\\Configurator\\ContainerConfigurator;\nuse Symfony\\Component\\HttpKernel\\Bundle\\AbstractBundle;\n\nclass FooBundle extends AbstractBundle\n{\n    public function prependExtension(ContainerConfigurator $containerConfigurator, ContainerBuilder $containerBuilder): void\n    {\n        // prepend\n        $containerBuilder->prependExtensionConfig('framework', [\n            'cache' => ['prefix_seed' => 'foo/bar'],\n        ]);\n\n        // prepend config from a file\n        $containerConfigurator->import('../config/packages/cache.php');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Container Build Time in YAML\nDESCRIPTION: Example of how to set a fixed container build time for reproducible builds using a YAML configuration file.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/kernel.rst#2025-04-22_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\n# config/services.yaml\nparameters:\n    # ...\n    kernel.container_build_time: '1234567890'\n```\n\n----------------------------------------\n\nTITLE: Including RST Map File\nDESCRIPTION: RST directive to include the contents of the contribution documentation map file located at /contributing/map.rst.inc\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/contributing/index.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: /contributing/map.rst.inc\n```\n\n----------------------------------------\n\nTITLE: Implementing CardScheme Validation Using PHP Attributes\nDESCRIPTION: Example showing how to apply the CardScheme constraint using PHP attributes in a Transaction entity class. This validates that a cardNumber property contains a valid VISA credit card number.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/CardScheme.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Transaction.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Transaction\n{\n    #[Assert\\CardScheme(\n        schemes: [Assert\\CardScheme::VISA],\n        message: 'Your credit card number is invalid.',\n    )]\n    protected string $cardNumber;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing TypeInfo Component via Composer\nDESCRIPTION: Installs the Symfony TypeInfo component using the Composer package manager. This command adds the component as a project dependency, making its classes available for use.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/type_info.rst#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require symfony/type-info\n```\n\n----------------------------------------\n\nTITLE: Configuring Twig Image Path in YAML\nDESCRIPTION: YAML configuration to set up a Twig namespace for image paths, making it easier to reference images in email templates.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_43\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/twig.yaml\ntwig:\n    # ...\n\n    paths:\n        # point this wherever your images live\n        '%kernel.project_dir%/assets/images': images\n```\n\n----------------------------------------\n\nTITLE: Debugging Firewalls with Symfony Console\nDESCRIPTION: Commands to debug and inspect firewall configurations in a Symfony application using the console command line tool.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/security.rst#2025-04-22_snippet_5\n\nLANGUAGE: terminal\nCODE:\n```\n# displays a list of firewalls currently configured for your application\n$ php bin/console debug:firewall\n\n# displays the details of a specific firewall\n$ php bin/console debug:firewall main\n\n# displays the details of a specific firewall, including detailed information\n# about the event listeners for the firewall\n$ php bin/console debug:firewall main --events\n```\n\n----------------------------------------\n\nTITLE: Git Configuration for Ignoring Encore Build Files\nDESCRIPTION: Example .gitignore configuration for a Symfony project using Encore, excluding node_modules and built asset files.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/faq.rst#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n/node_modules/\n# whatever path you're passing to Encore.setOutputPath()\n/public/build\n```\n\n----------------------------------------\n\nTITLE: Adding Constraints in Symfony Form Builder\nDESCRIPTION: Shows how to add constraints directly in a Symfony form builder. This example adds a Length constraint to a text field.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/validation.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function buildForm(FormBuilderInterface $builder, array $options): void\n{\n    $builder\n        ->add('myField', TextType::class, [\n            'required' => true,\n            'constraints' => [new Length(['min' => 3])],\n        ])\n    ;\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Default and Current FrameworkBundle Config (Terminal)\nDESCRIPTION: Commands to display the default config values defined by Symfony and the actual config values used by your application for the FrameworkBundle.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n# displays the default config values defined by Symfony\n$ php bin/console config:dump-reference framework\n\n# displays the actual config values used by your application\n$ php bin/console debug:config framework\n```\n\n----------------------------------------\n\nTITLE: Creating Service Configuration in PHP\nDESCRIPTION: Illustrates how to create a separate service configuration file in PHP format. This example shows where parameters and services would be defined in a PHP configuration file.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/import.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// config/services/mailer.php\n\n// ... some parameters\n// ... some services\n```\n\n----------------------------------------\n\nTITLE: SQL ALTER TABLE Statement for Adding Column\nDESCRIPTION: SQL generated by Doctrine migrations to add a new 'description' column to the 'product' table. This demonstrates how Doctrine tracks schema changes.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine.rst#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE product ADD description LONGTEXT NOT NULL\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable Service Subscriber Traits in PHP\nDESCRIPTION: Example demonstrating how to create and use helper traits (LoggerAware and RouterAware) that can be composed into service classes. These traits encapsulate common dependencies and make services more maintainable.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/service_subscribers_locators.rst#2025-04-22_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n// src/Service/LoggerAware.php\nnamespace App\\Service;\n\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Contracts\\Service\\Attribute\\SubscribedService;\n\ntrait LoggerAware\n{\n    #[SubscribedService]\n    private function logger(): LoggerInterface\n    {\n        return $this->container->get(__CLASS__.'::'.__FUNCTION__);\n    }\n}\n\n// src/Service/RouterAware.php\nnamespace App\\Service;\n\nuse Symfony\\Component\\Routing\\RouterInterface;\nuse Symfony\\Contracts\\Service\\Attribute\\SubscribedService;\n\ntrait RouterAware\n{\n    #[SubscribedService]\n    private function router(): RouterInterface\n    {\n        return $this->container->get(__CLASS__.'::'.__FUNCTION__);\n    }\n}\n\n// src/Service/MyService.php\nnamespace App\\Service;\n\nuse Symfony\\Contracts\\Service\\ServiceMethodsSubscriberTrait;\nuse Symfony\\Contracts\\Service\\ServiceSubscriberInterface;\n\nclass MyService implements ServiceSubscriberInterface\n{\n    use ServiceMethodsSubscriberTrait, LoggerAware, RouterAware;\n\n    public function doSomething(): void\n    {\n        // $this->router() ...\n        // $this->logger() ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Routes from a Custom Service Using XML in Symfony - XML\nDESCRIPTION: This XML sample shows the configuration for importing routes from a custom Symfony service via the <import> element. The resource references a service and a specific method (admin_route_loader::loadRoutes) to call using the type=\"service\" loader. The specified method should return a Symfony RouteCollection. This requires both a functioning XML routing configuration and the custom service to be defined and tagged in the project.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/routing/custom_route_loader.rst#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\\n<routes xmlns=\\\"http://symfony.com/schema/routing\\\"\\n    xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n    xsi:schemaLocation=\\\"http://symfony.com/schema/routing\\n        https://symfony.com/schema/routing/routing-1.0.xsd\\\">\\n\\n    <import resource=\\\"admin_route_loader::loadRoutes\\\" type=\\\"service\\\"/>\\n</routes>\n```\n\n----------------------------------------\n\nTITLE: Setting MySQL SSL Certificate Paths via Environment Variables in Bash/Shell\nDESCRIPTION: This snippet demonstrates how to set environment variables for MySQL SSL configuration in a `.env` file format (like `.env.local` in Symfony). It specifies the paths to the client SSL key (`MYSQL_SSL_KEY`), client certificate (`MYSQL_SSL_CERT`), and Certificate Authority certificate (`MYSQL_SSL_CA`) needed to establish a secure database connection. These variables are typically read by Symfony's configuration system (using the `dotenv` component) and used by Doctrine DBAL.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/doctrine.rst#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nMYSQL_SSL_KEY=/path/to/your/server-key.pem\nMYSQL_SSL_CERT=/path/to/your/server-cert.pem\nMYSQL_SSL_CA=/path/to/your/ca-cert.pem\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Composer for Symfony Tests\nDESCRIPTION: Command to update the project dependencies required to run Symfony tests using Composer. This installs external components like Doctrine, Twig, and Monolog.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/contributing/code/tests.rst#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer update\n```\n\n----------------------------------------\n\nTITLE: Configuring Excluded File Patterns in YAML\nDESCRIPTION: Shows how to configure glob patterns to exclude specific file types from being processed by the AssetMapper component.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/asset_mapper.rst#2025-04-22_snippet_39\n\nLANGUAGE: yaml\nCODE:\n```\nframework:\n    asset_mapper:\n        excluded_patterns:\n            - '*/*.scss'\n```\n\n----------------------------------------\n\nTITLE: Registering Service with Constructor Option - YAML Configuration\nDESCRIPTION: Provides a YAML configuration for the NewsletterManager service using the 'constructor' key to specify a static factory method to be used for instantiation. The 'arguments' map the required parameters to values. This should be placed in 'config/services.yaml' and expects the class to define the specified static method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/factories.rst#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nservices:\n    # ...\n\n    App\\Email\\NewsletterManager:\n        constructor: 'create'\n        arguments:\n            $sender: 'fabien@symfony.com'\n\n```\n\n----------------------------------------\n\nTITLE: Defining Validation Constraints with Error Levels in XML\nDESCRIPTION: This XML configuration demonstrates how to set up validation constraints with different error levels for a User entity. It uses the 'payload' option within each constraint to define the severity.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/validation/severity.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\User\">\n        <property name=\"username\">\n            <constraint name=\"NotBlank\">\n                <option name=\"payload\">\n                    <value key=\"severity\">error</value>\n                </option>\n            </constraint>\n        </property>\n        <property name=\"password\">\n            <constraint name=\"NotBlank\">\n                <option name=\"payload\">\n                    <value key=\"severity\">error</value>\n                </option>\n            </constraint>\n        </property>\n        <property name=\"bankAccountNumber\">\n            <constraint name=\"Iban\">\n                <option name=\"payload\">\n                    <value key=\"severity\">warning</value>\n                </option>\n            </constraint>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Placeholders for TimeType Field in Symfony\nDESCRIPTION: This example shows how to set different placeholders for the hour, minute, and second fields of a TimeType field when it's rendered as select boxes.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/time.rst#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$builder->add('startTime', TimeType::class, [\n    'placeholder' => [\n        'hour' => 'Hour', 'minute' => 'Minute', 'second' => 'Second',\n    ],\n]);\n```\n\n----------------------------------------\n\nTITLE: Defining Doctrine Lifecycle Callback in XML\nDESCRIPTION: Illustrates how to define a lifecycle callback for a Doctrine entity using XML configuration. This example sets up a prePersist callback.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine/events.rst#2025-04-22_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<!-- config/doctrine/Product.orm.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<doctrine-mapping xmlns=\"http://doctrine-project.org/schemas/orm/doctrine-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://doctrine-project.org/schemas/orm/doctrine-mapping\n        https://doctrine-project.org/schemas/orm/doctrine-mapping.xsd\">\n\n    <entity name=\"App\\Entity\\Product\">\n        <!-- ... -->\n        <lifecycle-callbacks>\n            <lifecycle-callback type=\"prePersist\" method=\"setCreatedAtValue\"/>\n        </lifecycle-callbacks>\n    </entity>\n</doctrine-mapping>\n```\n\n----------------------------------------\n\nTITLE: Creating External Link References in reStructuredText\nDESCRIPTION: A set of reStructuredText link references that define URLs for resources mentioned in the document. These references allow for cleaner inline linking throughout the document.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/contributing/community/speaker-mentoring.rst#2025-04-22_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _`#speaker-mentoring`: https://symfony-devs.slack.com/messages/speaker-mentoring\n.. _`Symfony Slack`: https://symfony.com/slack-invite\n.. _`public speaking`: https://github.com/vmbrasseur/Public_Speaking\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP Client Service - Symfony - XML\nDESCRIPTION: This XML file defines Symfony services for the main LDAP client and its ExtLdap adapter. The configuration provides connection attributes such as host, port, encryption, and options inside a container element. It is used by Symfony's Dependency Injection component. Prerequisites include the XML Service configuration schema and symfony/ldap package. Parameters specify key connection/configuration values; on load, services become available for Symfony's security providers.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/ldap.rst#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\\n<container xmlns=\\\"http://symfony.com/schema/dic/services\\\"\\n    xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n    xsi:schemaLocation=\\\"http://symfony.com/schema/dic/services https://symfony.com/schema/dic/services/services-1.0.xsd\\\">\\n\\n    <services>\\n        <service id=\\\"Symfony\\Component\\Ldap\\Ldap\\\">\\n            <argument type=\\\"service\\\" id=\\\"Symfony\\Component\\Ldap\\Adapter\\ExtLdap\\Adapter\\\"/>\\n            <tag name=\\\"ldap\\\"/>\\n        </service>\\n        <service id=\\\"Symfony\\Component\\Ldap\\Adapter\\ExtLdap\\Adapter\\\">\\n            <argument type=\\\"collection\\\">\\n                <argument key=\\\"host\\\">my-server</argument>\\n                <argument key=\\\"port\\\">389</argument>\\n                <argument key=\\\"encryption\\\">tls</argument>\\n                <argument key=\\\"options\\\" type=\\\"collection\\\">\\n                    <argument key=\\\"protocol_version\\\">3</argument>\\n                    <argument key=\\\"referrals\\\">false</argument>\\n                </argument>\\n            </argument>\\n        </service>\\n    </services>\\n</container>\\n\n```\n\n----------------------------------------\n\nTITLE: Route Configuration with Controller\nDESCRIPTION: Example of route configuration using the Routing component with a controller specified in the route attributes.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/create_framework/templating.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$routes->add('hello', new Routing\\Route('/hello/{name}', [\n    'name' => 'World',\n    '_controller' => 'render_template',\n]));\n```\n\n----------------------------------------\n\nTITLE: Configuring Notifier Message Bus in YAML\nDESCRIPTION: YAML configuration to disable message bus for direct transport notification sending\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/notifier.rst#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/notifier.yaml\nframework:\n    notifier:\n        message_bus: false\n```\n\n----------------------------------------\n\nTITLE: Integrating LocationType in CustomerType Form in Symfony\nDESCRIPTION: This code demonstrates how to embed the LocationType form into the CustomerType form, specifying the data_class as Customer.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/inherit_data_option.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// src/Form/Type/CustomerType.php\nnamespace App\\Form\\Type;\n\nuse App\\Entity\\Customer;\nuse Symfony\\Component\\Form\\AbstractType;\n\nclass CustomerType extends AbstractType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options): void\n    {\n        // ...\n\n        $builder->add('bar', LocationType::class, [\n            'data_class' => Customer::class,\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling ConsoleEvents::ERROR Event\nDESCRIPTION: Shows how to handle exceptions thrown during command execution using the ERROR event.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/events.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Console\\ConsoleEvents;\nuse Symfony\\Component\\Console\\Event\\ConsoleErrorEvent;\n\n$dispatcher->addListener(ConsoleEvents::ERROR, function (ConsoleErrorEvent $event): void {\n    $output = $event->getOutput();\n\n    $command = $event->getCommand();\n\n    $output->writeln(sprintf('Oops, exception thrown while running command <info>%s</info>', $command->getName()));\n\n    // gets the current exit code (the exception code)\n    $exitCode = $event->getExitCode();\n\n    // changes the exception to another one\n    $event->setError(new \\LogicException('Caught exception', $exitCode, $event->getError()));\n});\n```\n\n----------------------------------------\n\nTITLE: Overriding Environment Variables in .env.local\nDESCRIPTION: Example of overriding default environment values for local development using a .env.local file, which should not be committed to version control.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration.rst#2025-04-22_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\n# .env.local\nDATABASE_URL=\"mysql://root:@127.0.0.1:3306/my_database_name\"\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Forwarded Header in PHP\nDESCRIPTION: This PHP snippet shows how to set a custom forwarded header (X-Forwarded-Proto) based on a different header (Custom-Forwarded-Proto) early in the application lifecycle, before handling the request.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/deployment/proxies.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// public/index.php\n\n// ...\n$_SERVER['HTTP_X_FORWARDED_PROTO'] = $_SERVER['HTTP_CUSTOM_FORWARDED_PROTO'];\n// ...\n$response = $kernel->handle($request);\n```\n\n----------------------------------------\n\nTITLE: Installing the Symfony Serializer Pack via Composer\nDESCRIPTION: This command uses Composer to install the `symfony/serializer-pack`, which includes the Serializer component along with common optional dependencies needed for typical Symfony applications.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer.rst#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require symfony/serializer-pack\n```\n\n----------------------------------------\n\nTITLE: Converting Emojis to GitHub Short Codes in PHP\nDESCRIPTION: PHP code showing how to use EmojiTransliterator to convert emojis to GitHub short codes.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/emoji.rst#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$transliterator = EmojiTransliterator::create('emoji-github');\n$transliterator->transliterate('Teenage 🐢 really love 🍕');\n// => 'Teenage :turtle: really love :pizza:'\n```\n\n----------------------------------------\n\nTITLE: Handling AccessDeniedException with a Kernel Exception Listener in Symfony PHP\nDESCRIPTION: This PHP class `AccessDeniedListener` implements `EventSubscriberInterface` to listen for the `KernelEvents::EXCEPTION`. It specifically checks if the thrown exception is an `AccessDeniedException`. If so, it allows performing custom actions (like logging), optionally setting a custom response on the event, or stopping further event propagation. The listener priority is set higher than the default Security ExceptionListener to ensure it runs first.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/access_denied_handler.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// src/EventListener/AccessDeniedListener.php\nnamespace App\\EventListener;\n\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Event\\ExceptionEvent;\nuse Symfony\\Component\\HttpKernel\\KernelEvents;\nuse Symfony\\Component\\Security\\Core\\Exception\\AccessDeniedException;\n\nclass AccessDeniedListener implements EventSubscriberInterface\n{\n    public static function getSubscribedEvents(): array\n    {\n        return [\n            // the priority must be greater than the Security HTTP\n            // ExceptionListener, to make sure it's called before\n            // the default exception listener\n            KernelEvents::EXCEPTION => ['onKernelException', 2],\n        ];\n    }\n\n    public function onKernelException(ExceptionEvent $event): void\n    {\n        $exception = $event->getThrowable();\n        if (!$exception instanceof AccessDeniedException) {\n            return;\n        }\n\n        // ... perform some action (e.g. logging)\n\n        // optionally set the custom response\n        $event->setResponse(new Response(null, 403));\n\n        // or stop propagation (prevents the next exception listeners from being called)\n        //$event->stopPropagation();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering TextareaType Field in Symfony Forms\nDESCRIPTION: This RST code snippet shows the properties of the TextareaType field, including how it's rendered, its parent type, and the associated Symfony class.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/textarea.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n+-------------+------------------------------------------------------------------------+\n| Rendered as | ``textarea`` tag                                                       |\n+-------------+------------------------------------------------------------------------+\n| Parent type | :doc:`TextType </reference/forms/types/text>`                          |\n+-------------+------------------------------------------------------------------------+\n| Class       | :class:`Symfony\\Component\\Form\\Extension\\Core\\Type\\TextareaType` |\n+-------------+------------------------------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Including SVG Diagrams in Symfony Documentation\nDESCRIPTION: RST syntax for embedding SVG diagrams in Symfony documentation with proper HTML object tag configuration. Specifies the data source and type attributes for SVG rendering.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/_images/sources/README.md#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. raw:: html\n\n    <object data=\"_images/<folder-name>/<diagram-file-name>.svg\" type=\"image/svg+xml\"\n        alt=\"<alt description>\"\n    ></object>\n```\n\n----------------------------------------\n\nTITLE: Configuring When Constraint in YAML\nDESCRIPTION: YAML configuration example for the When constraint validation rules.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/When.rst#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Model\\Discount:\n    properties:\n        value:\n            - GreaterThan: 0\n            - When:\n                expression: \"this.getType() == 'percent'\"\n                constraints:\n                    - LessThanOrEqual:\n                        value: 100\n                        message: \"The value should be between 1 and 100!\"\n                otherwise:\n                    - LessThan:\n                        value: 9999\n                        message: \"The value should be less than 9999!\"\n```\n\n----------------------------------------\n\nTITLE: Defining Choice Constraint in YAML\nDESCRIPTION: Example of using the Choice constraint in YAML configuration to validate city and genre properties.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Choice.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Author:\n    properties:\n        city:\n            - Choice: [New York, Berlin, Tokyo]\n        genre:\n            - Choice:\n                choices:  [fiction, non-fiction]\n                message:  Choose a valid genre.\n```\n\n----------------------------------------\n\nTITLE: Using Custom Asset Package in Twig Template\nDESCRIPTION: Example of using a custom asset package ('avatars') in a Twig template.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/dic_tags.rst#2025-04-22_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n<img src=\"{{ asset('...', 'avatars') }}\">\n```\n\n----------------------------------------\n\nTITLE: XML Array Configuration Example\nDESCRIPTION: Shows the XML equivalent of the YAML array configuration for Twig extensions.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/config/definition.rst#2025-04-22_snippet_30\n\nLANGUAGE: xml\nCODE:\n```\n<twig:config>\n    <twig:extension>twig.extension.foo</twig:extension>\n    <twig:extension>twig.extension.bar</twig:extension>\n</twig:config>\n```\n\n----------------------------------------\n\nTITLE: Documenting Deprecations in UPGRADE.md in Markdown\nDESCRIPTION: This Markdown entry is meant for the UPGRADE.md file, providing precise, sectioned guidance on deprecations introduced in a specific version. The section title relates to the affected component, and the item lists the deprecated feature and recommended replacement. Essential for migration guides, these entries help teams track required code changes across Symfony upgrades.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/contributing/code/conventions.rst#2025-04-22_snippet_7\n\nLANGUAGE: Markdown\nCODE:\n```\nDependencyInjection\\n-------------------\\n\\n * Deprecate the `Deprecated` class, use `Replacement` instead\n```\n\n----------------------------------------\n\nTITLE: Controlling Decorator Inner Name in YAML\nDESCRIPTION: Example showing how to customize the inner service name in YAML configuration using the 'decoration_inner_name' option, which allows explicit control over the reference name of the decorated service.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/service_decoration.rst#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nservices:\n    App\\DecoratingMailer:\n        # ...\n        decoration_inner_name: App\\DecoratingMailer.wooz\n        arguments: ['@App\\DecoratingMailer.wooz']\n```\n\n----------------------------------------\n\nTITLE: Configuring Assets Base URLs (XML)\nDESCRIPTION: Example of configuring base URLs for assets in the FrameworkBundle using XML configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/framework.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <framework:config>\n        <framework:assets base-url=\"http://cdn.example.com/\"/>\n    </framework:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Defining maxPropertyPath Option for Range Constraint in RST\nDESCRIPTION: Specifies the object property to be used as the max option. It includes information about the option type and provides an example of its usage.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Range.rst#2025-04-22_snippet_10\n\nLANGUAGE: rst\nCODE:\n```\n``maxPropertyPath``\n~~~~~~~~~~~~~~~~~~~\n\n**type**: ``string``\n\nIt defines the object property whose value is used as ``max`` option.\n\nFor example, if you want to compare the ``$submittedDate`` property of some object\nwith regard to the ``$deadline`` property of the same object, use\n``maxPropertyPath=\"deadline\"`` in the range constraint of ``$submittedDate``.\n\n.. tip::\n\n    When using this option, its value is available in error messages as the\n    ``{{ max_limit_path }}`` placeholder. Although it's not intended to\n    include it in the error messages displayed to end users, it's useful when\n    using APIs for doing any mapping logic on client-side.\n```\n\n----------------------------------------\n\nTITLE: Clearing Symfony Cache for New Translation Catalogs\nDESCRIPTION: Shows how to clear the Symfony cache after creating a new message catalog or installing a bundle that includes translations, ensuring Symfony discovers new translation resources.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/translation.rst#2025-04-22_snippet_16\n\nLANGUAGE: terminal\nCODE:\n```\n$ php bin/console cache:clear\n```\n\n----------------------------------------\n\nTITLE: Configuring X-Sendfile in Apache\nDESCRIPTION: This Apache configuration snippet shows how to enable and configure X-Sendfile for use with BinaryFileResponse in Symfony.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#2025-04-22_snippet_31\n\nLANGUAGE: Apache\nCODE:\n```\n<IfModule mod_xsendfile.c>\n  # This is already present somewhere...\n  XSendFile on\n  XSendFilePath ...some path...\n\n  # This needs to be added:\n  <IfModule mod_headers.c>\n    RequestHeader set X-Sendfile-Type X-Sendfile\n  </IfModule>\n</IfModule>\n```\n\n----------------------------------------\n\nTITLE: Configuring Synthetic Service in PHP Format\nDESCRIPTION: PHP configuration for defining a synthetic service in Symfony. This shows how to use the ContainerConfigurator to mark a service as synthetic using the synthetic() method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/synthetic_services.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nreturn function(ContainerConfigurator $container): void {\n    $services = $container->services();\n\n    // synthetic services don't specify a class\n    $services->set('app.synthetic_service')\n        ->synthetic();\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Pseudo-localization in Symfony with XML\nDESCRIPTION: This XML configuration sets up the pseudo-localization feature in Symfony's Translation component. It enables character accents, brackets wrapping, text expansion, HTML tag preservation, and specifies which HTML attributes should be localized.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/translation.rst#2025-04-22_snippet_58\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/translation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony\n        https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <framework:config>\n        <framework:translator>\n            <!-- accents: replace characters by their accented version -->\n            <!-- brackets: wrap strings with brackets -->\n            <!-- expansion_factor: controls how many extra characters are added to make text longer -->\n            <!-- parse_html: maintain the original HTML tags of the translated contents -->\n            <framework:pseudo-localization\n                accents=\"true\"\n                brackets=\"true\"\n                expansion_factor=\"1.4\"\n                parse_html=\"true\"\n            >\n                <!-- also translate the contents of these HTML attributes -->\n                <framework:localizable-html-attribute>title</framework:localizable-html-attribute>\n            </framework:pseudo-localization>\n        </framework:translator>\n    </framework:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Handling ConsoleEvents::TERMINATE Event\nDESCRIPTION: Demonstrates handling the TERMINATE event which fires after command execution for cleanup tasks.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/events.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Console\\ConsoleEvents;\nuse Symfony\\Component\\Console\\Event\\ConsoleTerminateEvent;\n\n$dispatcher->addListener(ConsoleEvents::TERMINATE, function (ConsoleTerminateEvent $event): void {\n    // gets the output\n    $output = $event->getOutput();\n\n    // gets the command that has been executed\n    $command = $event->getCommand();\n\n    // displays the given content\n    $output->writeln(sprintf('After running command <info>%s</info>', $command->getName()));\n\n    // changes the exit code\n    $event->setExitCode(128);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring CamelCase to snake_case Name Converter in XML\nDESCRIPTION: XML configuration for setting up the CamelCase to snake_case name converter in the Symfony Serializer.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer.rst#2025-04-22_snippet_32\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/serializer.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <framework:config>\n        <framework:serializer\n            name-converter=\"serializer.name_converter.camel_case_to_snake_case\"\n        />\n    </framework:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies for Symfony 3 Compatibility in composer.json\nDESCRIPTION: Updated Composer dependency constraints that allow the bundle to work with both Symfony 2 and Symfony 3 components. This uses the OR operator (|) to specify compatibility with multiple major versions.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/bundles.rst#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"require\": {\n        \"symfony/framework-bundle\": \"~2.7|~3.0\",\n        \"symfony/finder\": \"~2.7|~3.0\",\n        \"symfony/validator\": \"~2.7|~3.0\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring LessThanOrEqual Constraint in YAML\nDESCRIPTION: YAML configuration for the LessThanOrEqual constraint to validate 'siblings' and 'age' properties of a Person entity.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/LessThanOrEqual.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Person:\n    properties:\n        siblings:\n            - LessThanOrEqual: 5\n        age:\n            - LessThanOrEqual:\n                value: 80\n```\n\n----------------------------------------\n\nTITLE: Applying New Recipes to Existing Packages with Composer Recipes\nDESCRIPTION: Demonstrates the `composer recipes` command. This command specifically targets recipe installation. It's useful for applying new or updated private recipes to packages that are already installed in the project without modifying the installed package versions or other dependencies. It effectively synchronizes the project state with the available recipes.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/flex_private_recipes.rst#2025-04-22_snippet_11\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer recipes\n```\n\n----------------------------------------\n\nTITLE: Text Format Arguments Filter\nDESCRIPTION: Demonstrates formatting arguments as plain text without HTML\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#2025-04-22_snippet_56\n\nLANGUAGE: twig\nCODE:\n```\n{{ args|format_args_as_text }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Charset Constraint with PHP Method in Symfony\nDESCRIPTION: Demonstrates how to configure the Charset constraint programmatically using PHP method and the ClassMetadata loader to validate UTF-8 encoding of the content property.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Charset.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/FileDTO.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass FileDTO\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('content', new Assert\\Charset('UTF-8'));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using UUIDs in Doctrine Queries with Symfony\nDESCRIPTION: Demonstrates how to properly set UUID parameters in Doctrine queries when using DQL or custom query builders in Symfony applications.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/uid.rst#2025-04-22_snippet_17\n\nLANGUAGE: PHP\nCODE:\n```\n// src/Repository/ProductRepository.php\n\n// ...\nuse Doctrine\\DBAL\\ParameterType;\nuse Symfony\\Bridge\\Doctrine\\Types\\UuidType;\n\nclass ProductRepository extends ServiceEntityRepository\n{\n    // ...\n\n    public function findUserProducts(User $user): array\n    {\n        $qb = $this->createQueryBuilder('p')\n            // ...\n            // add UuidType::NAME as the third argument to tell Doctrine that this is a UUID\n            ->setParameter('user', $user->getUuid(), UuidType::NAME)\n\n            // alternatively, you can convert it to a value compatible with\n            // the type inferred by Doctrine\n            ->setParameter('user', $user->getUuid()->toBinary(), ParameterType::BINARY)\n        ;\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto Mapping for Validation in XML Format\nDESCRIPTION: XML configuration for setting up automatic validation constraints for Doctrine entities. Defines which entity namespaces should have automatic validation applied.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_85\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/framework.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <framework:config>\n        <framework:validation>\n            <framework:auto-mapping>\n                <framework:service namespace=\"App\\Entity\\\"/>\n\n                <framework:service namespace=\"Foo\\\">Foo\\Some\\Entity</framework:service>\n                <framework:service namespace=\"Foo\\\">Foo\\Another\\Entity</framework:service>\n            </framework:auto-mapping>\n        </framework:validation>\n    </framework:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Creating External Links in reStructuredText\nDESCRIPTION: This snippet shows how to define and use external links in reStructuredText. It creates references to the Symfony Slack invite page and the #mentoring Slack channel.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/contributing/community/mentoring.rst#2025-04-22_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _`Symfony Slack`: https://symfony.com/slack-invite\n.. _`#mentoring`: https://symfony-devs.slack.com/messages/mentoring\n```\n\n----------------------------------------\n\nTITLE: Importing npm Packages with CDN URL\nDESCRIPTION: Example of importing an npm package directly from a CDN using its full URL.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/asset_mapper.rst#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Alert } from 'https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/+esm';\n```\n\n----------------------------------------\n\nTITLE: Starting Symfony Local Web Server (Terminal)\nDESCRIPTION: This command starts the Symfony Local Web Server for development.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/micro_kernel_trait.rst#2025-04-22_snippet_18\n\nLANGUAGE: Shell\nCODE:\n```\n$ symfony server:start\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony Cache Component via Composer\nDESCRIPTION: Command to install the Symfony Cache component using Composer package manager\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/cache.rst#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require symfony/cache\n```\n\n----------------------------------------\n\nTITLE: Work in Progress Todo List\nDESCRIPTION: Example todo list for work-in-progress pull requests seeking early feedback\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/contributing/code/pull_requests.rst#2025-04-22_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n- [ ] finish the code\n- [ ] gather feedback for my changes\n```\n\n----------------------------------------\n\nTITLE: Deprecating Code with Fully Qualified Replacement in PHP\nDESCRIPTION: This PHPDoc block indicates that a class or feature is deprecated as of a given Symfony version, and recommends a replacement using its fully qualified class name (FQCN). This is especially useful when the replacement is in a different namespace, providing precise migration guidance. No runtime dependencies are required unless documentation tooling is applied.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/contributing/code/conventions.rst#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n/**\\n * @deprecated since Symfony 5.1, use A\\\\B\\\\Replacement instead.\\n */\n```\n\n----------------------------------------\n\nTITLE: Restructured Text Section Formatting\nDESCRIPTION: Shows the section header formatting using equals signs for underlining in reStructuredText format\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/contributing/documentation/index.rst#2025-04-22_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\nContributing Documentation\n==========================\n```\n\n----------------------------------------\n\nTITLE: Demonstrating ReStructuredText Formatting for Symfony Docs\nDESCRIPTION: This snippet shows how to structure a ReStructuredText document for Symfony documentation, including headings, code blocks, and link references.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/contributing/documentation/standards.rst#2025-04-22_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\nExample\n=======\n\nWhen you are working on the docs, you should follow the\n`Symfony Documentation`_ standards.\n\nLevel 2\n-------\n\nA PHP example would be::\n\n    echo 'Hello World';\n\nLevel 3\n~~~~~~~\n\n.. code-block:: php\n\n    echo 'You cannot use the :: shortcut here';\n\n.. _`Symfony Documentation`: https://symfony.com/doc\n```\n\n----------------------------------------\n\nTITLE: Creating Documentation Tabs\nDESCRIPTION: Shows how to create tabbed content sections in the documentation for different implementation options.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/contributing/documentation/format.rst#2025-04-22_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. tabs:: UX Installation\n\n    .. tab:: Webpack Encore\n\n        Introduction to Webpack\n\n        .. code-block:: yaml\n\n            webpack:\n                # ...\n\n    .. tab:: AssetMapper\n\n        Introduction to AssetMapper\n\n        Something else about AssetMapper\n```\n\n----------------------------------------\n\nTITLE: Example of Incorrectly Adding a Transformer\nDESCRIPTION: This code demonstrates the incorrect way to add a transformer, as it would apply to the entire form instead of just a specific field.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/data_transformers.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// THIS IS WRONG - TRANSFORMER WILL BE APPLIED TO THE ENTIRE FORM\n// see above example for correct code\n$builder->add('issue', TextType::class)\n    ->addModelTransformer($transformer);\n```\n\n----------------------------------------\n\nTITLE: HTTP Response Format in Plain Text\nDESCRIPTION: Shows the structure of an HTTP response from a server, including status code, headers, and HTML content.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/introduction/http_fundamentals.rst#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nHTTP/1.1 200 OK\nDate: Sat, 02 Apr 2011 21:05:05 GMT\nServer: lighttpd/1.4.19\nContent-Type: text/html\n\n<html>\n    <!-- ... HTML for the xkcd comic -->\n</html>\n```\n\n----------------------------------------\n\nTITLE: Resulting Cache-Control Header Format\nDESCRIPTION: Displays the format of the resulting Cache-Control header after setting public caching with a max age of 600 seconds.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/http_cache/expiration.rst#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nCache-Control: public, max-age=600\n```\n\n----------------------------------------\n\nTITLE: Referencing Secrets in Doctrine XML Configuration (xml)\nDESCRIPTION: Shows how to reference a secret value as the database password within the Doctrine configuration section of a Symfony XML config file. The env() syntax references the runtime-resolved secret or env variable. This is useful for CI/CD and multi-environment setups.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/secrets.rst#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/doctrine.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:doctrine=\"http://symfony.com/schema/dic/doctrine\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/doctrine\n        https://symfony.com/schema/dic/doctrine/doctrine-1.0.xsd\">\n\n    <doctrine:config>\n        <doctrine:dbal\n            password=\"%env(DATABASE_PASSWORD)%\"\n        />\n    </doctrine:config>\n\n</container>\n```\n\n----------------------------------------\n\nTITLE: Using YAML Connection Configuration in Symfony\nDESCRIPTION: Example YAML configuration for defining multiple connections with table, user, and password properties.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/config/definition.rst#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nconnections:\n    - { table: symfony, user: root, password: ~ }\n    - { table: foo, user: root, password: pa$$ }\n```\n\n----------------------------------------\n\nTITLE: Checking Twig Template Existence in PHP\nDESCRIPTION: Demonstrates how to check if a Twig template exists using the loader's exists() method. This is useful for conditionally loading templates based on their availability.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/templates.rst#2025-04-22_snippet_30\n\nLANGUAGE: php\nCODE:\n```\nif ($loader->exists('theme/layout_responsive.html.twig')) {\n    // the template exists, do something\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Implicit Alias based on Interface using AsAlias Attribute\nDESCRIPTION: Illustrates how the `id` argument can be omitted in the `#[AsAlias]` attribute if the class implements exactly one interface (`MailerInterface`). In this case, the fully qualified interface name automatically becomes the alias for the `PhpMailer` class.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/alias_private.rst#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n// src/Mail/PhpMailer.php\nnamespace App\\Mail;\n\n// ...\nuse Symfony\\Component\\DependencyInjection\\Attribute\\AsAlias;\nuse Symfony\\Component\\Mailer\\MailerInterface;\n\n#[AsAlias]\nclass PhpMailer implements MailerInterface\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Container Build Time in PHP\nDESCRIPTION: Example of how to set a fixed container build time for reproducible builds using a PHP configuration file.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/kernel.rst#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n// config/services.php\n\n// ...\n$container->setParameter('kernel.container_build_time', '1234567890');\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Asset Versioning Strategies in YAML\nDESCRIPTION: YAML configuration for setting custom version strategies for assets. This example shows global strategy configuration and package-specific strategies.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/framework.yaml\nframework:\n    assets:\n        # this strategy is applied to every asset (including packages)\n        version_strategy: 'app.asset.my_versioning_strategy'\n        packages:\n            foo_package:\n                # this package removes any versioning (its assets won't be versioned)\n                version: ~\n            bar_package:\n                # this package uses its own strategy (the default strategy is ignored)\n                version_strategy: 'app.asset.another_version_strategy'\n            baz_package:\n                # this package inherits the default strategy\n                base_path: '/images'\n```\n\n----------------------------------------\n\nTITLE: Using Dump Function in Twig Templates\nDESCRIPTION: Shows how to use the dump() function and {% dump %} tag in Twig templates for debugging. This functionality is provided by the VarDumper component and is only available in dev and test environments.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/templates.rst#2025-04-22_snippet_33\n\nLANGUAGE: twig\nCODE:\n```\n{# templates/article/recent_list.html.twig #}\n{# the contents of this variable are sent to the Web Debug Toolbar\n   instead of dumping them inside the page contents #}\n{% dump articles %}\n\n{% for article in articles %}\n    {# the contents of this variable are dumped inside the page contents\n       and they are visible on the web page #}\n    {{ dump(article) }}\n\n    {# optionally, use named arguments to display them as labels next to\n       the dumped contents #}\n    {{ dump(blog_posts: articles, user: app.user) }}\n\n    <a href=\"/article/{{ article.slug }}\">\n        {{ article.title }}\n    </a>\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Array Arguments Process Execution in PHP\nDESCRIPTION: Demonstrates how to run a process using an array of arguments directly, which are automatically escaped by the helper.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/helpers/processhelper.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$helper->run($output, ['figlet', 'Symfony']);\n```\n\n----------------------------------------\n\nTITLE: Configuring Rate Limiters in XML\nDESCRIPTION: XML configuration for setting up two rate limiters: 'anonymous_api' using fixed window policy and 'authenticated_api' using token bucket policy.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/rate_limiter.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/rate_limiter.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony\n        https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <framework:config>\n        <framework:rate-limiter>\n            <!-- policy: use 'sliding_window' if you prefer that policy -->\n            <framework:limiter name=\"anonymous_api\"\n                policy=\"fixed_window\"\n                limit=\"100\"\n                interval=\"60 minutes\"\n            />\n\n            <framework:limiter name=\"authenticated_api\"\n                policy=\"token_bucket\"\n                limit=\"5000\"\n            >\n                <framework:rate interval=\"15 minutes\"\n                    amount=\"500\"\n                />\n            </framework:limiter>\n        </framework:rate-limiter>\n    </framework:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Including Console Helpers Map in RST Documentation\nDESCRIPTION: RST directive to include a map file containing Console helper documentation structure.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/helpers/index.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: map.rst.inc\n```\n\n----------------------------------------\n\nTITLE: Formatted XML Output Example from XmlEncoder\nDESCRIPTION: This XML block shows the output generated when the `xml_format_output` context option is set to `true`. The XML is indented and includes line breaks for better readability, representing the encoded `$data` array from the previous example.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer/encoders.rst#2025-04-22_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\"?>\n<response>\n  <id>IDHNQIItNyQ</id>\n  <date>2019-10-24</date>\n</response>\n```\n\n----------------------------------------\n\nTITLE: Custom Bash Prompt for Asciinema Recording\nDESCRIPTION: Bash configuration to customize the prompt to '$ ' during Asciinema recordings. Modifies PS1 environment variable when ASCIINEMA_REC is set.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/_images/sources/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nif [ \"$ASCIINEMA_REC\" = \"1\" ]; then\n    PS1=\"\\e[37m$ \\e[0m\"\nfi\n```\n\n----------------------------------------\n\nTITLE: Injecting Service Locator with PHP Attributes\nDESCRIPTION: Shows how to inject a service locator into a CommandBus class using PHP attributes in Symfony. It uses the Autowire attribute to specify the service.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/service_subscribers_locators.rst#2025-04-22_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n// src/CommandBus.php\nnamespace App;\n\nuse Psr\\Container\\ContainerInterface;\nuse Symfony\\Component\\DependencyInjection\\Attribute\\Autowire;\n\nclass CommandBus\n{\n    public function __construct(\n        #[Autowire(service: 'app.command_handler_locator')]\n        private ContainerInterface $locator,\n    ) {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-line Literal String in YAML\nDESCRIPTION: Shows how to use the literal style (|) for multi-line strings where newlines are preserved.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/formats/yaml.rst#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n|\n  \\/ /| |\\/| |\n  / / | |  | |__\n```\n\n----------------------------------------\n\nTITLE: Ignoring Missing Dependencies in XML\nDESCRIPTION: XML configuration example showing how to ignore missing dependencies using the 'on-invalid=\"ignore\"' attribute within a method call.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/optional_dependencies.rst#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"App\\Newsletter\\NewsletterManager\">\n            <call method=\"setLogger\">\n                <argument type=\"service\" id=\"logger\" on-invalid=\"ignore\"/>\n            </call>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Configuring TimeType Field with Timestamp Input in Symfony\nDESCRIPTION: This example shows how to set up a TimeType field for a 'startTime' property that uses a unix timestamp as its underlying data. The field is configured to be rendered as choice fields.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/time.rst#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\TimeType;\n// ...\n\n$builder->add('startTime', TimeType::class, [\n    'input'  => 'timestamp',\n    'widget' => 'choice',\n]);\n```\n\n----------------------------------------\n\nTITLE: Handling Concurrent Merge Conflicts\nDESCRIPTION: Commands to resolve conflicts when the target branch has been updated by another merge while attempting your own merge\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/_build/maintainer_guide.rst#2025-04-22_snippet_8\n\nLANGUAGE: terminal\nCODE:\n```\n$ git fetch upstream\n$ git checkout 5.x\n$ git reset --hard upstream/5.x\n```\n\n----------------------------------------\n\nTITLE: Async Cache Configuration in YAML\nDESCRIPTION: YAML configuration for setting up async cache pool with Messenger integration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/cache.rst#2025-04-22_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nframework:\n    cache:\n        pools:\n            async.cache:\n                early_expiration_message_bus: messenger.default_bus\n\n    messenger:\n        transports:\n            async_bus: '%env(MESSENGER_TRANSPORT_DSN)%'\n        routing:\n            'Symfony\\Component\\Cache\\Messenger\\EarlyExpirationMessage': async_bus\n```\n\n----------------------------------------\n\nTITLE: Displaying Detailed Information for a Symfony Service - Bash\nDESCRIPTION: This command retrieves in-depth information about a specific service by its fully qualified service identifier (e.g., App\\Service\\Mailer). It shows arguments, configuration, class, and visibility, aiding debugging or documentation. As of Symfony 7.3, argument display is included by default; in previous versions, \\\"--show-arguments\\\" is required. The command must be run within a Symfony project context.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/debug.rst#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ php bin/console debug:container App\\Service\\Mailer\n```\n\n----------------------------------------\n\nTITLE: Retrieving Property Type Metadata from Class (Symfony, PHP)\nDESCRIPTION: Shows how to obtain an array of Symfony PropertyInfo Type objects describing the data type of a specific property. The getTypes method requires the class name and property name. The result array contains rich type metadata (builtinType, nullable, etc.), depending on available extractors. Requires symfony/property-info.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/property_info.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$types = $propertyInfo->getTypes($class, $property);\n/*\n    Example Result\n    --------------\n    array(1) {\n        [0] =>\n            class Symfony\\Component\\PropertyInfo\\Type (6) {\n            private $builtinType          => string(6) \"string\"\n            private $nullable             => bool(false)\n            private $class                => NULL\n            private $collection           => bool(false)\n            private $collectionKeyType    => NULL\n            private $collectionValueType  => NULL\n        }\n    }\n*/\n```\n\n----------------------------------------\n\nTITLE: Customizing Error Path with UniqueEntity Constraint in Symfony\nDESCRIPTION: Example of using the errorPath option with the UniqueEntity constraint to specify which field should display the validation error message when using combined field uniqueness validation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/UniqueEntity.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Service.php\nnamespace App\\Entity;\n\nuse App\\Entity\\Host;\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Symfony\\Bridge\\Doctrine\\Validator\\Constraints\\UniqueEntity;\n\n#[ORM\\Entity]\n#[UniqueEntity(\n    fields: ['host', 'port'],\n    message: 'This port is already in use on that host.',\n    errorPath: 'port',\n)]\nclass Service\n{\n    #[ORM\\ManyToOne(targetEntity: Host::class)]\n    public Host $host;\n\n    #[ORM\\Column(type: 'integer')]\n    public int $port;\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Removals in Next Major UPGRADE.md in Markdown\nDESCRIPTION: This Markdown snippet records removal of deprecated code in the UPGRADE.md file for the subsequent major version. The section labels the relevant component, and the item instructs on a breaking removal and points to the new class. This guides teams on what must be updated after a major version bump.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/contributing/code/conventions.rst#2025-04-22_snippet_8\n\nLANGUAGE: Markdown\nCODE:\n```\nDependencyInjection\\n-------------------\\n\\n * Remove the `Deprecated` class, use `Replacement` instead\n```\n\n----------------------------------------\n\nTITLE: Adding Missing importmap Entries\nDESCRIPTION: Terminal command example showing how to resolve a \"Failed to resolve module specifier\" error by adding the required package to importmap.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/asset_mapper.rst#2025-04-22_snippet_29\n\nLANGUAGE: terminal\nCODE:\n```\n$ php bin/console importmap:require bootstrap\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony Translation Component\nDESCRIPTION: Command to install the Symfony translation component via Composer.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/translation.rst#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ composer require symfony/translation\n```\n\n----------------------------------------\n\nTITLE: Configuring Bootstrap 5 Form Theme in PHP\nDESCRIPTION: Shows how to set up the Bootstrap 5 form theme in the Twig configuration using PHP.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/forms.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/twig.php\nuse Symfony\\Config\\TwigConfig;\n\nreturn static function (TwigConfig $twig): void {\n    $twig->formThemes(['bootstrap_5_layout.html.twig']);\n\n    // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML Sanitizer Baselines in XML\nDESCRIPTION: Demonstrates how to configure HTML sanitizer baselines for safe or static elements in XML.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/html_sanitizer.rst#2025-04-22_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/html_sanitizer.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <framework:config>\n        <framework:html-sanitizer>\n            <!-- allow-safe-elements/allow-static-elements:\n                 enable either of these -->\n            <framework:sanitizer\n                name=\"app.post_sanitizer\"\n                allow-safe-elements=\"true\"\n                allow-static-elements=\"true\"\n            />\n        </framework:html-sanitizer>\n    </framework:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Disabling DebugClassLoader Integration in PHPUnit XML - XML - xml\nDESCRIPTION: This XML snippet disables the DebugClassLoader integration for PHPUnit tests by setting the 'debug-class-loader' option to 0 as an argument to the SymfonyTestsListener. This is included within the listeners section of a phpunit.xml.dist configuration file. It is required when class loader deprecation notices during autoloading should be suppressed.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/phpunit_bridge.rst#2025-04-22_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<listeners>\\n    <listener class=\\\"Symfony\\\\Bridge\\\\PhpUnit\\\\SymfonyTestsListener\\\">\\n        <arguments>\\n            <array>\\n                <!-- set this option to 0 to disable the DebugClassLoader integration -->\\n                <element key=\\\"debug-class-loader\\\"><integer>0</integer></element>\\n            </array>\\n        </arguments>\\n    </listener>\\n</listeners>\n```\n\n----------------------------------------\n\nTITLE: Configuring Git User Information - Terminal\nDESCRIPTION: This sequence of terminal commands sets the global Git configuration for the user's name and email, required for proper authorship attribution in commits. Users should substitute their actual name and email. Dependencies: Git must be installed. Expected input: the user and email. Output: updates ~/.gitconfig with the provided information. There are no explicit error messages unless inputs are malformed.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/contributing/code/pull_requests.rst#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ git config --global user.name \"Your Name\"\n$ git config --global user.email you@example.com\n```\n\n----------------------------------------\n\nTITLE: Testing Basic Client Interaction in Symfony\nDESCRIPTION: This snippet demonstrates how to create multiple test clients, simulate interactions between them, and assert the expected responses. It uses the Symfony HTTP Foundation Response class for status code checking.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/testing/insulating_clients.rst#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n// ...\nuse Symfony\\Component\\HttpFoundation\\Response;\n\n$harry = static::createClient();\n$sally = static::createClient();\n\n$harry->request('POST', '/say/sally/Hello');\n$sally->request('GET', '/messages');\n\n$this->assertEquals(Response::HTTP_CREATED, $harry->getResponse()->getStatusCode());\n$this->assertRegExp('/Hello/', $sally->getResponse()->getContent());\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Cache with HttpCache\nDESCRIPTION: Implementation of HTTP caching using HttpCache class as a reverse proxy wrapper around the framework.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/create_framework/http_kernel_httpkernelinterface.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\HttpKernel;\n\n$framework = new Simplex\\Framework($dispatcher, $matcher, $controllerResolver, $argumentResolver);\n$framework = new HttpKernel\\HttpCache\\HttpCache(\n    $framework,\n    new HttpKernel\\HttpCache\\Store(__DIR__.'/../cache')\n);\n\n$response = $framework->handle($request);\n$response->send();\n```\n\n----------------------------------------\n\nTITLE: Configuring Doctrine Entity Listener in YAML\nDESCRIPTION: Illustrates how to configure a Doctrine entity listener using YAML. This example sets up a service for the UserChangedNotifier and tags it as an entity listener.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine/events.rst#2025-04-22_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\n# config/services.yaml\nservices:\n    # ...\n\n    App\\EventListener\\UserChangedNotifier:\n        tags:\n            -\n                name: 'doctrine.orm.entity_listener'\n                event: 'postUpdate'\n                entity: 'App\\Entity\\User'\n                # lazy: true\n                # entity_manager: 'custom'\n                # method: 'checkUserChanges'\n```\n\n----------------------------------------\n\nTITLE: Updated Environment File After Doctrine Installation\nDESCRIPTION: Shows how Symfony Flex automatically updates the .env file to include database configuration when Doctrine is installed.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/quick_tour/the_architecture.rst#2025-04-22_snippet_13\n\nLANGUAGE: diff\nCODE:\n```\n  ###> symfony/framework-bundle ###\n  APP_ENV=dev\n  APP_SECRET=cc86c7ca937636d5ddf1b754beb22a10\n  ###< symfony/framework-bundle ###\n\n+ ###> doctrine/doctrine-bundle ###\n+ # ...\n+ DATABASE_URL=mysql://db_user:db_password@127.0.0.1:3306/db_name\n+ ###< doctrine/doctrine-bundle ###\n```\n\n----------------------------------------\n\nTITLE: Casting Health Check Method Environment Variable using Constant Processor in Symfony with XML Configuration\nDESCRIPTION: Shows how to use the 'const' environment variable processor to fetch a constant value for access control in the XML configuration format for Symfony. Expects the HEALTH_CHECK_METHOD environment parameter to reference a valid PHP constant string. Useful for configuring dynamic or static constants.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/env_var_processors.rst#2025-04-22_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\\n<container xmlns=\\\"http://symfony.com/schema/dic/services\\\"\\n    xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n    xmlns:security=\\\"http://symfony.com/schema/dic/security\\\"\\n    xsi:schemaLocation=\\\"http://symfony.com/schema/dic/services\\n        https://symfony.com/schema/dic/services/services-1.0.xsd\\n        http://symfony.com/schema/dic/security\\n        https://symfony.com/schema/dic/security/security-1.0.xsd\\\">\\n\\n    <parameters>\\n        <parameter key=\\\"env(HEALTH_CHECK_METHOD)\\\">Symfony\\\\Component\\\\HttpFoundation\\\\Request::METHOD_HEAD</parameter>\\n    </parameters>\\n\\n    <security:config>\\n        <rule path=\\\"^/health-check$\\\" methods=\\\"%env(const:HEALTH_CHECK_METHOD)%\\\"/>\\n    </security:config>\\n</container>\\n\n```\n\n----------------------------------------\n\nTITLE: Mapping HTTP Status to a Custom Exception using Attributes (PHP)\nDESCRIPTION: This PHP snippet uses the #[WithHttpStatus] attribute to map HTTP status 422 and custom headers to CustomException, which extends \\Exception. Symfony 7.1+ supports mapping attributes on interfaces as well. Dependencies include the Symfony HttpKernel component and the exception class must be namespaced properly.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_37\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Exception;\\n\\nuse Symfony\\Component\\HttpKernel\\Attribute\\WithHttpStatus;\\n\\n#[WithHttpStatus(422, [\\n   'Retry-After' => 10,\\n   'X-Custom-Header' => 'header-value',\\n])]\\nclass CustomException extends \\Exception\\n{\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Validation with YAML\nDESCRIPTION: Implementing validation constraints using YAML configuration for Address and Author entities.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Valid.rst#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Address:\n    properties:\n        street:\n            - NotBlank: ~\n        zipCode:\n            - NotBlank: ~\n            - Length:\n                max: 5\n\nApp\\Entity\\Author:\n    properties:\n        firstName:\n            - NotBlank: ~\n            - Length:\n                min: 4\n        lastName:\n            - NotBlank: ~\n```\n\n----------------------------------------\n\nTITLE: SSL Connection with MySQL in PHP\nDESCRIPTION: PHP configuration for setting up a secure SSL connection to MySQL with Doctrine, using environment variables for SSL certificate paths.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/doctrine.rst#2025-04-22_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/doctrine.php\nuse Symfony\\Config\\DoctrineConfig;\n\nreturn static function (DoctrineConfig $doctrine): void {\n    $doctrine->dbal()\n        ->connection('default')\n        ->url(env('DATABASE_URL')->resolve())\n        ->serverVersion('8.0.31')\n        ->driver('pdo_mysql');\n\n    $doctrine->dbal()->defaultConnection('default');\n\n    $doctrine->dbal()->option(\\PDO::MYSQL_ATTR_SSL_KEY, '%env(MYSQL_SSL_KEY)%');\n    $doctrine->dbal()->option(\\PDO::MYSQL_SSL_CERT, '%env(MYSQL_ATTR_SSL_CERT)%');\n    $doctrine->dbal()->option(\\PDO::MYSQL_SSL_CA, '%env(MYSQL_ATTR_SSL_CA)%');\n};\n```\n\n----------------------------------------\n\nTITLE: Dumping Workflow Configuration Reference\nDESCRIPTION: Command to view all configuration options for workflows in a Symfony project.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/workflow.rst#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ php bin/console config:dump-reference framework workflows\n```\n\n----------------------------------------\n\nTITLE: Setting Process Timeout in Symfony\nDESCRIPTION: This snippet shows how to set a custom timeout for a process. If the timeout is reached, a ProcessTimedOutException is thrown.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/process.rst#2025-04-22_snippet_20\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Process\\Process;\n\n$process = new Process(['ls', '-lsa']);\n$process->setTimeout(3600);\n$process->run();\n```\n\n----------------------------------------\n\nTITLE: jQuery Reference Error Examples\nDESCRIPTION: Examples of common error messages that occur when jQuery is not available as a global variable in the browser context.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/legacy-applications.rst#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nUncaught ReferenceError: $ is not defined at [...]\nUncaught ReferenceError: jQuery is not defined at [...]\n```\n\n----------------------------------------\n\nTITLE: Adding npm Packages to Importmap\nDESCRIPTION: Terminal command to add an npm package to the application's importmap configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/asset_mapper.rst#2025-04-22_snippet_9\n\nLANGUAGE: terminal\nCODE:\n```\n$ php bin/console importmap:require bootstrap\n```\n\n----------------------------------------\n\nTITLE: Using Discriminator Maps with Symfony Serializer in a Class Example\nDESCRIPTION: Illustrates how to use discriminator maps in practice with an InvoiceLine class that references an interface, showing both serialization and deserialization processes.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer.rst#2025-04-22_snippet_63\n\nLANGUAGE: php\nCODE:\n```\nclass InvoiceLine\n{\n    public function __construct(\n        private InvoiceItemInterface $invoiceItem\n    ) {\n        $this->invoiceItem = $invoiceItem;\n    }\n\n    public function getInvoiceItem(): InvoiceItemInterface\n    {\n        return $this->invoiceItem;\n    }\n\n    // ...\n}\n\n// ...\n$invoiceLine = new InvoiceLine(new Product());\n\n$jsonString = $serializer->serialize($invoiceLine, 'json');\n// $jsonString contains {\"type\":\"product\",...}\n\n$invoiceLine = $serializer->deserialize($jsonString, InvoiceLine::class, 'json');\n// $invoiceLine contains new InvoiceLine(new Product(...))\n```\n\n----------------------------------------\n\nTITLE: Using Custom Twig Filter in Symfony Template\nDESCRIPTION: Shows how to use the custom 'greet' Twig filter in a Symfony template. This filter was defined in the GreetExtension class.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/quick_tour/the_architecture.rst#2025-04-22_snippet_6\n\nLANGUAGE: Twig\nCODE:\n```\n{# templates/default/index.html.twig #}\n{# Will print something like \"Hey Symfony!\" #}\n<h1>{{ name|greet }}</h1>\n```\n\n----------------------------------------\n\nTITLE: Configuring Login Parameters in Symfony Security Firewall (XML)\nDESCRIPTION: This XML configuration achieves the same customization of login redirect and failure parameters in a Symfony firewall as the YAML example. The '<form-login>' tags include 'target-path-parameter' and 'failure-path-parameter', changing which query string keys are used during authentication. Inputs: custom XML attributes; Outputs: adapted authentication flows. Requires Symfony DI XML config with security extensions.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/form_login.rst#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/security.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<srv:container xmlns=\"http://symfony.com/schema/dic/security\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:srv=\"http://symfony.com/schema/dic/services\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/security\n        https://symfony.com/schema/dic/security/security-1.0.xsd\">\n\n    <config>\n        <!-- ... -->\n\n        <firewall name=\"main\">\n            <!-- ... -->\n            <form-login target-path-parameter=\"go_to\"/>\n            <form-login failure-path-parameter=\"back_to\"/>\n        </firewall>\n    </config>\n</srv:container>\n```\n\n----------------------------------------\n\nTITLE: Using abbr_method Twig Filter\nDESCRIPTION: Shows how to use the abbr_method filter to generate abbreviations for method names\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#2025-04-22_snippet_53\n\nLANGUAGE: twig\nCODE:\n```\n{{ method|abbr_method }}\n```\n\n----------------------------------------\n\nTITLE: Customizing Target Redirect Route on switch_user (XML)\nDESCRIPTION: Configures the firewalls in XML to redirect to 'app_user_dashboard' upon successful user impersonation using the target-route attribute of the <switch-user> tag. Only supported in stateful firewalls.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/impersonating_user.rst#2025-04-22_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/security.xml -->\\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\\n<srv:container xmlns=\\\"http://symfony.com/schema/dic/security\\\"\\n    xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n    xmlns:srv=\\\"http://symfony.com/schema/dic/services\\\"\\n    xsi:schemaLocation=\\\"http://symfony.com/schema/dic/services\\n        https://symfony.com/schema/dic/services/services-1.0.xsd\\n        http://symfony.com/schema/dic/security\\n        https://symfony.com/schema/dic/security/security-1.0.xsd\\\">\\n    <config>\\n        <!-- ... -->\\n\\n        <firewall name=\\\"main\\\">\\n            <!-- ... -->\\n            <switch-user target-route=\\\"app_user_dashboard\\\"/>\\n        </firewall>\\n    </config>\\n</srv:container>\n```\n\n----------------------------------------\n\nTITLE: Installing Bundle with Composer (Markdown)\nDESCRIPTION: Standard installation instructions for Symfony bundles using Composer, including both Flex and non-Flex applications.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/bundles/best_practices.rst#2025-04-22_snippet_2\n\nLANGUAGE: console\nCODE:\n```\ncomposer require <package-name>\n```\n\nLANGUAGE: php\nCODE:\n```\n// config/bundles.php\n\nreturn [\n    // ...\n    <vendor>\\<bundle-name>\\<bundle-long-name>::class => ['all' => true],\n];\n```\n\n----------------------------------------\n\nTITLE: Illustrative Cache Directory Structure by Environment\nDESCRIPTION: Shows the typical structure of the Symfony cache directory (`var/cache/`). It highlights that cache files are segregated into subdirectories based on the environment (e.g., `dev`, `prod`), ensuring environment-specific caching.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/front_controllers_and_kernel.rst#2025-04-22_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nyour-project/\n├─ var/\n│  ├─ cache/\n│  │  ├─ dev/   # cache directory for the *dev* environment\n│  │  └─ prod/  # cache directory for the *prod* environment\n│  ├─ ...\n```\n\n----------------------------------------\n\nTITLE: Configuring CAS Token Handler with Custom Prefix in XML\nDESCRIPTION: XML configuration for setting up a CAS token handler with a custom XML response prefix in Symfony security.xml file. This includes the complete XML structure with necessary namespaces and schema locations.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/access_token.rst#2025-04-22_snippet_35\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/security.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<srv:container xmlns=\"http://symfony.com/schema/dic/security\"\n    xmlns:srv=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/security\n        https://symfony.com/schema/dic/security/security-1.0.xsd\">\n\n    <config>\n        <firewall name=\"main\">\n            <access-token>\n                <token-handler>\n                    <cas validation-url=\"https://www.example.com/cas/validate\" prefix=\"cas-example\"/>\n                </token-handler>\n            </access-token>\n        </firewall>\n    </config>\n</srv:container>\n```\n\n----------------------------------------\n\nTITLE: Setting Form Constraints in Symfony Controller\nDESCRIPTION: Shows how to apply form constraints directly in the controller when using createFormBuilder, useful for quick form setups without separate form classes.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/without_class.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$form = $this->createFormBuilder($defaultData, [\n        'constraints' => [\n            'firstName' => new Length(['min' => 3]),\n            'lastName' => [\n                new NotBlank(),\n                new Length(['min' => 3]),\n            ],\n        ],\n    ])\n    ->add('firstName', TextType::class)\n    ->add('lastName', TextType::class)\n    ->getForm();\n```\n\n----------------------------------------\n\nTITLE: Setting Runtime Options via $_SERVER Variable (PHP)\nDESCRIPTION: This PHP snippet shows how to configure runtime options by setting the `APP_RUNTIME_OPTIONS` key within the `$_SERVER` superglobal array. This example sets the `project_dir` option, often necessary in environments like serverless functions.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/runtime.rst#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$_SERVER['APP_RUNTIME_OPTIONS'] = [\n    'project_dir' => '/var/task',\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Twig Templates Path (Symfony, PHP)\nDESCRIPTION: This PHP function configures Twig to use a custom templates directory in config/packages/twig.php. It uses Symfony\\Config\\TwigConfig to set the default path dynamically, usually using %kernel.project_dir%. Best used in projects with PHP-based config files.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/override_dir_structure.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/twig.php\\nuse Symfony\\Config\\TwigConfig;\\n\\nreturn static function (TwigConfig $twig): void {\\n    $twig->defaultPath('%kernel.project_dir%/resources/views');\\n};\n```\n\n----------------------------------------\n\nTITLE: Setting up an Existing Symfony Project from Git (Terminal)\nDESCRIPTION: Clones an existing Symfony project from a Git repository, navigates into the project directory, and uses Composer to install all the necessary dependencies defined in the project's `composer.json` and `composer.lock` files. Requires Git and Composer.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup.rst#2025-04-22_snippet_5\n\nLANGUAGE: terminal\nCODE:\n```\n# clone the project to download its contents\n$ cd projects/\n$ git clone ...\n\n# make Composer install the project's dependencies into vendor/\n$ cd my-project/\n$ composer install\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Name Converter in Symfony using XML (XML)\nDESCRIPTION: This XML configuration snippet sets a custom name converter for Symfony's Serializer. Place in config/packages/serializer.xml. The 'name-converter' attribute is set to reference the implemented converter class; standard XML namespaces and schema references are provided for Symfony configuration files.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer/custom_name_converter.rst#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\n<container xmlns=\\\"http://symfony.com/schema/dic/services\\\"\n    xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\n    xmlns:framework=\\\"http://symfony.com/schema/dic/symfony\\\"\n    xsi:schemaLocation=\\\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\\\">\n\n    <framework:config>\n        <!-- pass the service ID of your name converter -->\n        <framework:serializer\n            name-converter=\\\"App\\Serializer\\OrgPrefixNameConverter\\\"\n        />\n    </framework:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Configuring assets.package Tag in YAML\nDESCRIPTION: YAML configuration example for adding an asset package using the assets.package service tag.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/dic_tags.rst#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n    App\\Assets\\AvatarPackage:\n        tags:\n            - { name: assets.package, package: avatars }\n```\n\n----------------------------------------\n\nTITLE: Defining GreaterThan Constraint in PHP Attributes\nDESCRIPTION: Demonstrates how to use the GreaterThan constraint with PHP attributes to validate that a Person's siblings count is greater than 5 and age is greater than 18.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/GreaterThan.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Person.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Person\n{\n    #[Assert\\GreaterThan(5)]\n    protected int $siblings;\n\n    #[Assert\\GreaterThan(\n        value: 18,\n    )]\n    protected int $age;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Markdown in Email Templates\nDESCRIPTION: Example of using the markdown_to_html Twig filter to write email content in Markdown syntax, which is then converted to HTML for the final email.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_52\n\nLANGUAGE: html+twig\nCODE:\n```\n{% apply markdown_to_html %}\n    Welcome {{ email.toName }}!\n    ===========================\n\n    You signed up to our site using the following email:\n    `{{ email.to[0].address }}`\n\n    [Activate your account]({{ url('...') }})\n{% endapply %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Monolog with ElasticsearchLogstashHandler in XML\nDESCRIPTION: Example of configuring Monolog to use the ElasticsearchLogstashHandler in a production environment using XML. Shows both basic configuration and recommended setup with FingersCrossedHandler for buffering.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/logging/handlers.rst#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/prod/monolog.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:monolog=\"http://symfony.com/schema/dic/monolog\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/monolog\n        https://symfony.com/schema/dic/monolog/monolog-1.0.xsd\">\n\n    <monolog:config>\n        <monolog:handler\n            name=\"es\"\n            type=\"service\"\n            id=\"Symfony\\Bridge\\Monolog\\Handler\\ElasticsearchLogstashHandler\"\n        />\n    </monolog:config>\n</container>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/prod/monolog.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:monolog=\"http://symfony.com/schema/dic/monolog\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/monolog\n        https://symfony.com/schema/dic/monolog/monolog-1.0.xsd\">\n\n    <monolog:config>\n        <monolog:handler\n            name=\"main\"\n            type=\"fingers_crossed\"\n            handler=\"es\"\n        />\n        <monolog:handler\n            name=\"es\"\n            type=\"service\"\n            id=\"Symfony\\Bridge\\Monolog\\Handler\\ElasticsearchLogstashHandler\"\n        />\n    </monolog:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Enabling Session Support in YAML\nDESCRIPTION: Example of enabling session support in the Symfony framework using YAML configuration. This sets the enabled flag to true in the session configuration section.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_70\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/framework.yaml\nframework:\n    session:\n        enabled: true\n```\n\n----------------------------------------\n\nTITLE: Adding a Product to a Category from the Inverse Side\nDESCRIPTION: Method in the Category entity that shows how to properly add a Product to a Category from the inverse side of the relationship. It ensures the owning side is also updated.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine/associations.rst#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Category.php\n\n// ...\nclass Category\n{\n    // ...\n\n    public function addProduct(Product $product): self\n    {\n        if (!$this->products->contains($product)) {\n            $this->products[] = $product;\n            $product->setCategory($this);\n        }\n\n        return $this;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RST Table of Contents for Symfony Quick Tour\nDESCRIPTION: ReStructuredText directive for creating a table of contents with maxdepth of 1, linking to three main documentation sections: the big picture, flex recipes, and architecture.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/quick_tour/index.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   the_big_picture\n   flex_recipes\n   the_architecture\n```\n\n----------------------------------------\n\nTITLE: YAML Comments\nDESCRIPTION: Shows how to add comments in YAML files.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/formats/yaml.rst#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n# Comment on a line\n\"symfony 1.0\": { PHP: 5.0, Propel: 1.2 } # Comment at the end of a line\n\"symfony 1.2\": { PHP: 5.2, Propel: 1.3 }\n```\n\n----------------------------------------\n\nTITLE: Default and Inheritance Rules for Exception Mapping (YAML)\nDESCRIPTION: This YAML snippet demonstrates ordering and inheritance for exception-to-status-code mappings in Symfony. The base 'Exception' is mapped to log level 'debug' and status code 404. More specific exceptions such as 'RuntimeException' that inherit from 'Exception' are ignored if declared after their parent, so only the first applicable rule applies. This highlights the importance of rule order when configuring exception mappings.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_36\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/exceptions.yaml\\nframework:\\n    exceptions:\\n        Exception:\\n            log_level: 'debug'\\n            status_code: 404\\n        # The following configuration will never be used because \\RuntimeException extends \\Exception\\n        RuntimeException:\\n            log_level: 'debug'\\n            status_code: 422\n```\n\n----------------------------------------\n\nTITLE: Configuring Access Token Authenticator (XML - Symfony)\nDESCRIPTION: Declares the access token authenticator within the XML configuration for Symfony's security firewalls. The XML must be integrated in config/packages/security.xml and references a service implementing AccessTokenHandlerInterface. The <access-token> element configures token-based authentication with a specified handler.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/access_token.rst#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/security.xml -->\\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<srv:container xmlns=\\\"http://symfony.com/schema/dic/security\\\"\\n    xmlns:srv=\\\"http://symfony.com/schema/dic/services\\\"\\n    xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n    xsi:schemaLocation=\\\"http://symfony.com/schema/dic/services\\n        https://symfony.com/schema/dic/services/services-1.0.xsd\\n        http://symfony.com/schema/dic/security\\n        https://symfony.com/schema/dic/security/security-1.0.xsd\\\">\\n\\n    <config>\\n        <firewall name=\\\"main\\\">\\n            <access-token token-handler=\\\"App\\\\Security\\\\AccessTokenHandler\\\"/>\\n        </firewall>\\n    </config>\\n</srv:container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Merge Statistics\nDESCRIPTION: Command to configure Git to provide merge statistics during the upmerge process. Must be run in the symfony repository before starting the upmerge.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/contributing/core_team.rst#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n# Run command in the \"symfony\" repository\n$ git config merge.stat true\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Translation Files Path (Symfony, XML)\nDESCRIPTION: This XML code in config/packages/translation.xml sets a custom directory for translation files using <framework:default-path>. The directory is specified as %kernel.project_dir%/i18n. The file must reference correct XML namespaces and be part of Symfony's DI configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/override_dir_structure.rst#2025-04-22_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/translation.xml -->\\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\\n<container xmlns=\\\"http://symfony.com/schema/dic/services\\\"\\n    xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n    xmlns:twig=\\\"http://symfony.com/schema/dic/twig\\\"\\n    xsi:schemaLocation=\\\"http://symfony.com/schema/dic/services\\n        https://symfony.com/schema/dic/services/services-1.0.xsd\\n        http://symfony.com/schema/dic/twig\\n        https://symfony.com/schema/dic/twig/twig-1.0.xsd\\\">\\n\\n    <framework:config>\\n        <framework:translator>\\n            <framework:default-path>%kernel.project_dir%/i18n</framework:default-path>\\n        </framework:translator>\\n    </framework:config>\\n\\n</container>\n```\n\n----------------------------------------\n\nTITLE: Throwing an Exception for Stack Trace in PHP\nDESCRIPTION: Demonstrates how to throw an exception to get a stack trace when using Symfony. This is useful when you need a stack trace but don't want the program to continue execution.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/contributing/code/stack_trace.rst#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nthrow new \\Exception();\n```\n\n----------------------------------------\n\nTITLE: Creating Global Variables from Imported Modules\nDESCRIPTION: Example of how to manually expose an imported library as a global variable by assigning it to the window object.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/asset_mapper.rst#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport $ from 'jquery';\n// things on \"window\" become global variables\nwindow.$ = $;\n```\n\n----------------------------------------\n\nTITLE: Configuring Fingers Crossed Handler (XML)\nDESCRIPTION: XML configuration for setting up a fingers_crossed handler in Monolog, equivalent to the YAML example. This handler filters logs based on a specified action level.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/logging.rst#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/prod/monolog.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:monolog=\"http://symfony.com/schema/dic/monolog\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/monolog\n        https://symfony.com/schema/dic/monolog/monolog-1.0.xsd\">\n\n    <monolog:config>\n        <!-- if *one* log is error or higher, pass *all* to file_log -->\n        <monolog:handler name=\"filter_for_errors\"\n            type=\"fingers_crossed\"\n            action-level=\"error\"\n            handler=\"file_log\"\n        />\n\n        <!-- now passed *all* logs, but only if one log is error or higher -->\n        <monolog:handler name=\"file_log\"\n            type=\"stream\"\n            path=\"%kernel.logs_dir%/%kernel.environment%.log\"\n            level=\"debug\"\n        />\n\n        <!-- still passed *all* logs, and still only logs error or higher -->\n    </monolog:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Creating Database Schema for Remember Me Tokens with Schema Update\nDESCRIPTION: Terminal commands to update the database schema for remember me tokens using Doctrine schema update. An alternative to migrations for creating the token storage table.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/remember_me.rst#2025-04-22_snippet_13\n\nLANGUAGE: terminal\nCODE:\n```\n# get the required SQL code\n$ php bin/console doctrine:schema:update --dump-sql\n\n# run the SQL in your DB client, or let the command run it for you\n$ php bin/console doctrine:schema:update --force\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Cache Limiter in PHP\nDESCRIPTION: Example of setting the session cache limiter parameter in PHP configuration. This demonstrates how to use the container's setParameter method to configure session options.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_69\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\n$container->setParameter('session.storage.options', [\n    'cache_limiter' => 0,\n]);\n```\n\n----------------------------------------\n\nTITLE: Including Constraints Map in RST Documentation\nDESCRIPTION: A reStructuredText include directive that imports the constraints map content from an external file.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: /reference/constraints/map.rst.inc\n```\n\n----------------------------------------\n\nTITLE: Defining a Service with an Immutable Setter (Wither Method) in PHP\nDESCRIPTION: This PHP code defines a `MessageGenerator` service class with a `withLogger` method. This method follows the wither pattern for immutable objects: it clones the current instance, sets the logger on the clone, and returns the new instance instead of modifying the original object.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/calls.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// src/Service/MessageGenerator.php\nnamespace App\\Service;\n\nuse Psr\\Log\\LoggerInterface;\n\nclass MessageGenerator\n{\n    private LoggerInterface $logger;\n\n    public function withLogger(LoggerInterface $logger): self\n    {\n        $new = clone $this;\n        $new->logger = $logger;\n\n        return $new;\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Charset Constraint with XML in Symfony\nDESCRIPTION: XML configuration for applying the Charset constraint to the content property of the FileDTO class to ensure it uses UTF-8 encoding.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Charset.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\FileDTO\">\n        <property name=\"content\">\n            <constraint name=\"Charset\">\n                <option name=\"charset\">UTF-8</option>\n            </constraint>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Configuring CssColor Validation in YAML\nDESCRIPTION: Example of defining CssColor validation constraints in YAML configuration with different format requirements and custom error messages.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/CssColor.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Bulb:\n    properties:\n        defaultColor:\n            - CssColor: ~\n        accentColor:\n            - CssColor:\n                formats: !php/const Symfony\\Component\\Validator\\Constraints\\CssColor::HEX_LONG\n                message: The accent color must be a 6-character hexadecimal color.\n        currentColor:\n            - CssColor:\n                formats:\n                    - !php/const Symfony\\Component\\Validator\\Constraints\\CssColor::BASIC_NAMED_COLORS\n                    - !php/const Symfony\\Component\\Validator\\Constraints\\CssColor::EXTENDED_NAMED_COLORS\n                message: The color \"{{ value }}\" is not a valid CSS color name.\n```\n\n----------------------------------------\n\nTITLE: Documented Configuration in XML Format\nDESCRIPTION: Example XML configuration showing how documentation appears as comments in the configuration file.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/config/definition.rst#2025-04-22_snippet_22\n\nLANGUAGE: xml\nCODE:\n```\n<!-- entries-per-page: This value is only used for the search results page. -->\n<config entries-per-page=\"25\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring JoliNotif Desktop Notifications in XML\nDESCRIPTION: Configuration example for setting up desktop notifications using JoliNotif in XML format.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/notifier.rst#2025-04-22_snippet_18\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/notifier.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony\n        https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <framework:config>\n        <framework:notifier>\n            <framework:texter-transport name=\"jolinotif\">\n                %env(JOLINOTIF)%\n            </framework:texter-transport>\n        </framework:notifier>\n    </framework:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Creating Unique Temporary Files (PHP)\nDESCRIPTION: Uses the `Filesystem::tempnam` method to create a temporary file with a unique name in a specified directory (`/tmp`). It accepts an optional prefix and suffix for the filename.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/filesystem.rst#2025-04-22_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n// returns a path like : /tmp/prefix_wyjgtF\n$filesystem->tempnam('/tmp', 'prefix_');\n// returns a path like : /tmp/prefix_wyjgtF.png\n$filesystem->tempnam('/tmp', 'prefix_', '.png');\n```\n\n----------------------------------------\n\nTITLE: Creating Redis Connection with DSN in PHP\nDESCRIPTION: Demonstrates how to create a Redis connection using a Data Source Name (DSN) string. This method supports various connection parameters including host, port, password, and database index.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/cache/adapters/redis_adapter.rst#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Cache\\Adapter\\RedisAdapter;\n\n// pass a single DSN string to register a single server with the client\n$client = RedisAdapter::createConnection(\n    'redis://localhost'\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Symfony Project Structure (Text)\nDESCRIPTION: This text block shows the final structure of the Symfony project, including directories and key files.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/micro_kernel_trait.rst#2025-04-22_snippet_17\n\nLANGUAGE: Text\nCODE:\n```\nyour-project/\n├─ config/\n│  └─ framework.yaml\n├─ public/\n|  └─ index.php\n├─ src/\n|  ├─ Controller\n|  |  └─ MicroController.php\n|  └─ Kernel.php\n├─ templates/\n|  └─ micro/\n|     └─ random.html.twig\n├─ var/\n|  ├─ cache/\n│  └─ log/\n├─ vendor/\n│  └─ ...\n├─ composer.json\n└─ composer.lock\n```\n\n----------------------------------------\n\nTITLE: Registering DQL Functions using XML Configuration\nDESCRIPTION: Shows how to register custom DQL functions using XML configuration in Symfony. Includes proper namespace declarations and function type definitions.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine/custom_dql_functions.rst#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/doctrine.xml -->\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:doctrine=\"http://symfony.com/schema/dic/doctrine\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/doctrine\n        https://symfony.com/schema/dic/doctrine/doctrine-1.0.xsd\">\n\n    <doctrine:config>\n        <doctrine:orm>\n            <!-- ... -->\n            <doctrine:dql>\n                <doctrine:string-function name=\"test_string\">App\\DQL\\StringFunction</doctrine:string-function>\n                <doctrine:string-function name=\"second_string\">App\\DQL\\SecondStringFunction</doctrine:string-function>\n                <doctrine:numeric-function name=\"test_numeric\">App\\DQL\\NumericFunction</doctrine:numeric-function>\n                <doctrine:datetime-function name=\"test_datetime\">App\\DQL\\DatetimeFunction</doctrine:datetime-function>\n            </doctrine:dql>\n        </doctrine:orm>\n    </doctrine:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Implementing Customer Entity with Interface\nDESCRIPTION: Defines a Customer entity that implements InvoiceSubjectInterface and extends BaseCustomer. Uses Doctrine ORM annotations for entity mapping.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine/resolve_target_entity.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Customer.php\nnamespace App\\Entity;\n\nuse App\\Entity\\CustomerInterface as BaseCustomer;\nuse App\\Model\\InvoiceSubjectInterface;\nuse Doctrine\\ORM\\Mapping as ORM;\n\n#[ORM\\Entity]\n#[ORM\\Table(name: 'customer')]\nclass Customer extends BaseCustomer implements InvoiceSubjectInterface\n{\n    // In this example, any methods defined in the InvoiceSubjectInterface\n    // are already implemented in the BaseCustomer\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Configuration Parameters in PHP\nDESCRIPTION: Sets various types of configuration parameters including strings, booleans, arrays, binary content, constants, and enum values using the ContainerConfigurator in PHP format.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Entity\\BlogPost;\nuse App\\Enum\\PostState;\n\nreturn static function (ContainerConfigurator $container): void {\n    $container->parameters()\n        // the parameter name is an arbitrary string (the 'app.' prefix is recommended\n        // to better differentiate your parameters from Symfony parameters).\n        ->set('app.admin_email', 'something@example.com')\n\n        // boolean parameters\n        ->set('app.enable_v2_protocol', true)\n\n        // array/collection parameters\n        ->set('app.supported_locales', ['en', 'es', 'fr'])\n\n        // binary content parameters (use the PHP escape sequences)\n        ->set('app.some_parameter', 'This is a Bell char: \\x07')\n\n        // PHP constants as parameter values\n        ->set('app.some_constant', GLOBAL_CONSTANT)\n        ->set('app.another_constant', BlogPost::MAX_ITEMS)\n\n        // Enum case as parameter values\n        ->set('app.some_enum', PostState::Published);\n};\n```\n\n----------------------------------------\n\nTITLE: Debugging Symfony Autowiring Configuration via Console (Terminal)\nDESCRIPTION: Shows the Symfony console command `debug:autowiring` used to inspect the autowiring configuration for a specific service type or interface (`LoggerInterface` in this example). This helps identify available services and configured aliases, including named aliases.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/autowiring.rst#2025-04-22_snippet_14\n\nLANGUAGE: terminal\nCODE:\n```\n$ php bin/console debug:autowiring LoggerInterface\n```\n\n----------------------------------------\n\nTITLE: Managing Git Branches for Safe Symfony Testing (Terminal Commands)\nDESCRIPTION: These terminal commands illustrate branch management with Git for safely testing Symfony upgrades in an isolated branch. You first create and switch to a test branch, update dependencies, and after testing, switch back to master and delete the temporary branch. Requires Git to be initialized in the project and assumes standard Git workflow.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/unstable_versions.rst#2025-04-22_snippet_3\n\nLANGUAGE: terminal\nCODE:\n```\n$ cd projects/my_project/\\n$ git checkout -b testing_new_symfony\\n# ... update composer.json configuration\\n$ composer update \\\"symfony/*\\\"\\n\\n# ... after testing the new Symfony version\\n$ git checkout master\\n$ git branch -D testing_new_symfony\n```\n\n----------------------------------------\n\nTITLE: Handling Non-Existent Object Properties without Exceptions (PHP)\nDESCRIPTION: Demonstrates using `PropertyAccessorBuilder::disableExceptionOnInvalidPropertyPath()` to configure the accessor. When this is disabled, accessing a non-existent property path on an object returns `null` instead of throwing a `NoSuchPropertyException`.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/property_access.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// ...\nclass Person\n{\n    public string $name;\n}\n\n$person = new Person();\n\n$propertyAccessor = PropertyAccess::createPropertyAccessorBuilder()\n    ->disableExceptionOnInvalidPropertyPath()\n    ->getPropertyAccessor();\n\n// instead of throwing an exception the following code returns null\n$value = $propertyAccessor->getValue($person, 'birthday');\n```\n\n----------------------------------------\n\nTITLE: Unicode Code Points Extraction\nDESCRIPTION: Shows how to extract Unicode code points from string positions using the codePointsAt() method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/string.rst#2025-04-22_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nu('नमस्ते')->codePointsAt(0); // [2344]\nu('नमस्ते')->codePointsAt(2); // [2360]\n```\n\n----------------------------------------\n\nTITLE: Configuring Currency Constraint in YAML for Symfony Validation\nDESCRIPTION: This YAML configuration applies the Currency constraint to the 'currency' property of an Order entity in Symfony. It's an alternative way to set up validation rules outside the entity class.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Currency.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Order:\n    properties:\n        currency:\n            - Currency: ~\n```\n\n----------------------------------------\n\nTITLE: Basic Git Conflict Check\nDESCRIPTION: Command to search for unresolved merge conflicts using Git grep across cached files\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/_build/maintainer_guide.rst#2025-04-22_snippet_4\n\nLANGUAGE: terminal\nCODE:\n```\ngit grep --cached \"<<<<<\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Workflow Transition Blockers in Twig\nDESCRIPTION: This Twig snippet iterates over workflow transition blockers for a 'publish' action on a 'post' object and displays error messages.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/workflow.rst#2025-04-22_snippet_22\n\nLANGUAGE: twig\nCODE:\n```\n{% for blocker in workflow_transition_blockers(post, 'publish') %}\n    <span class=\"error\">{{ blocker.message }}</span>\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Basic Response Event Subscriber\nDESCRIPTION: Simple event subscriber implementation returning response event configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/create_framework/event_dispatcher.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nreturn ['response' => 'onResponse'];\n```\n\n----------------------------------------\n\nTITLE: Controlling Symfony Console Verbosity via Command Line Options (Terminal)\nDESCRIPTION: Demonstrates various command-line flags (`--silent`, `-q`, `--quiet`, `-v`, `-vv`, `-vvv`) used with `php bin/console` to adjust the output level of Symfony commands, ranging from completely silent to full debug output. The `--silent` option was added in Symfony 7.2.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/console/verbosity.rst#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n# suppress all output, including errors\n$ php bin/console some-command --silent\n\n# suppress all output (even the command result messages) but display errors\n$ php bin/console some-command -q\n$ php bin/console some-command --quiet\n\n# normal behavior, no option required (display only the useful messages)\n$ php bin/console some-command\n\n# increase verbosity of messages\n$ php bin/console some-command -v\n\n# display also the informative non essential messages\n$ php bin/console some-command -vv\n\n# display all messages (useful to debug errors)\n$ php bin/console some-command -vvv\n```\n\n----------------------------------------\n\nTITLE: Configuring Monolog Handlers in PHP Format for Symfony\nDESCRIPTION: PHP configuration for setting up Monolog handlers in Symfony, demonstrating how to configure multiple connected handlers: fingers_crossed, grouped, streamed, deduplicated, and symfony_mailer. This setup logs errors to both files and sends email notifications.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/logging/monolog_email.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/prod/monolog.php\nuse Symfony\\Config\\MonologConfig;\n\nreturn static function (MonologConfig $monolog): void {\n    $monolog->handler('main')\n        ->type('fingers_crossed')\n        ->actionLevel('critical')\n        ->handler('grouped')\n    ;\n\n    $monolog->handler('grouped')\n        ->type('group')\n        ->members(['streamed', 'deduplicated'])\n    ;\n\n    $monolog->handler('streamed')\n        ->type('stream')\n        ->path('%kernel.logs_dir%/%kernel.environment%.log')\n        ->level('debug')\n    ;\n\n    $monolog->handler('deduplicated')\n        ->type('deduplicated')\n        ->handler('symfony_mailer')\n    ;\n\n    // still passed *all* logs, and still only logs error or higher\n    $monolog->handler('symfony_mailer')\n        ->type('symfony_mailer')\n        ->fromEmail('error@example.com')\n        ->toEmail(['error@example.com'])\n        // or a list of recipients\n        // ->toEmail(['dev1@example.com', 'dev2@example.com', ...])\n        ->subject('An Error Occurred! %%message%%')\n        ->level('debug')\n        ->formatter('monolog.formatter.html')\n        ->contentType('text/html')\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Listing Available Session Storage Factories Using Console\nDESCRIPTION: Command to list all available session storage factories in a Symfony application, which is useful for selecting a custom storage_factory_id for session configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_79\n\nLANGUAGE: bash\nCODE:\n```\n$ php bin/console debug:container session.storage.factory.\n```\n\n----------------------------------------\n\nTITLE: Defining External Links in reStructuredText for Symfony Documentation\nDESCRIPTION: This snippet defines external links using reStructuredText syntax. It includes links to Platform.sh, Symfony CLI download page, and the symfony/apache-pack package on Packagist.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/deployment.rst#2025-04-22_snippet_5\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _`Platform.sh`: https://symfony.com/cloud\n.. _`Symfony CLI`: https://symfony.com/download\n.. _`symfony/apache-pack`: https://packagist.org/packages/symfony/apache-pack\n```\n\n----------------------------------------\n\nTITLE: Configuring PropertyAccessor for Invalid Array Index Exceptions (PHP)\nDESCRIPTION: Shows how to use `PropertyAccessorBuilder` to configure the accessor to throw a `NoSuchIndexException` when an invalid array index is accessed, instead of returning null. It also introduces the nullsafe operator `?` within the path (`[age?]`) to prevent the exception and return `null`.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/property_access.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// ...\n$propertyAccessor = PropertyAccess::createPropertyAccessorBuilder()\n    ->enableExceptionOnInvalidIndex()\n    ->getPropertyAccessor();\n\n$person = [\n    'first_name' => 'Wouter',\n];\n\n// instead of returning null, the code now throws an exception of type\n// Symfony\\Component\\PropertyAccess\\Exception\\NoSuchIndexException\n$value = $propertyAccessor->getValue($person, '[age]');\n\n// You can avoid the exception by adding the nullsafe operator\n$value = $propertyAccessor->getValue($person, '[age?]');\n```\n\n----------------------------------------\n\nTITLE: Custom PHP Workflow Dumper Implementation\nDESCRIPTION: PHP code example showing how to implement custom workflow dumping using GraphvizDumper or PlantUmlDumper classes outside of a Symfony application.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/workflow/dumping-workflows.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Add this code to a PHP script; for example: dump-graph.php\n$dumper = new GraphvizDumper();\necho $dumper->dump($definition);\n\n# if you prefer PlantUML, use this code:\n# $dumper = new PlantUmlDumper();\n# echo $dumper->dump($definition);\n```\n\n----------------------------------------\n\nTITLE: Registering the dotenv:dump Command in services.yaml\nDESCRIPTION: YAML configuration to register the DotenvDumpCommand as a service when Composer is not available in production environments.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration.rst#2025-04-22_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\n# config/services.yaml\nservices:\n    Symfony\\Component\\Dotenv\\Command\\DotenvDumpCommand: ~\n```\n\n----------------------------------------\n\nTITLE: Using a Deprecation Baseline File When Running Tests - Terminal - terminal\nDESCRIPTION: This command runs PHPUnit tests using an existing baseline file to ignore deprecations listed in it. The SYMFONY_DEPRECATIONS_HELPER environment variable is set to reference 'baselineFile', which should point to a previously generated JSON file. Deprecations in the baseline are ignored; only new deprecations are reported.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/phpunit_bridge.rst#2025-04-22_snippet_11\n\nLANGUAGE: terminal\nCODE:\n```\n$ SYMFONY_DEPRECATIONS_HELPER='baselineFile=./tests/allowed.json' ./vendor/bin/simple-phpunit\n```\n\n----------------------------------------\n\nTITLE: Configuring dump_destination in XML\nDESCRIPTION: XML configuration for setting the dump_destination parameter in the DebugBundle. The example includes the proper namespace declarations and schema locations required for XML configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/debug.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/debug.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/debug\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:debug=\"http://symfony.com/schema/dic/debug\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/debug https://symfony.com/schema/dic/debug/debug-1.0.xsd\">\n\n    <debug:config dump-destination=\"php://stderr\"/>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Handling Default Options using Null Coalescing in PHP\nDESCRIPTION: This PHP snippet shows the `sendMail` method within the `Mailer` class accessing options. It uses the null coalescing operator (`??`) to provide default values ('smtp.example.org', 'user', etc.) directly in the business logic if the corresponding key is not present in the `$this->options` array.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/options_resolver.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass Mailer\n{\n    // ...\n    public function sendMail($from, $to): void\n    {\n        $mail = ...;\n\n        $mail->setHost($this->options['host'] ?? 'smtp.example.org');\n        $mail->setUsername($this->options['username'] ?? 'user');\n        $mail->setPassword($this->options['password'] ?? 'pa$$word');\n        $mail->setPort($this->options['port'] ?? 25);\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Internal Documentation Links\nDESCRIPTION: Examples of creating internal links to other documentation pages and sections.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/contributing/documentation/format.rst#2025-04-22_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n:doc:`/controller`\n\n:doc:`/components/event_dispatcher`\n\n:doc:`/configuration/environments`\n\n:doc:`Doctrine Associations </doctrine/associations>`\n```\n\n----------------------------------------\n\nTITLE: Basic Console Output Verbosity Check Example\nDESCRIPTION: Example showing traditional way of checking console output verbosity levels using conditional statements.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/logging/monolog_console.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\nprotected function execute(InputInterface $input, OutputInterface $output): int\n{\n    if ($output->isDebug()) {\n        $output->writeln('Some info');\n    }\n\n    if ($output->isVerbose()) {\n        $output->writeln('Some more info');\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Full Twig Template for Symfony Web Profiler\nDESCRIPTION: This Twig template provides a complete implementation for a custom data collector in the Symfony web profiler. It includes blocks for the toolbar, menu, and detailed panel view.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/profiler.rst#2025-04-22_snippet_19\n\nLANGUAGE: Twig\nCODE:\n```\n{# templates/data_collector/template.html.twig #}\n{% extends '@WebProfiler/Profiler/layout.html.twig' %}\n\n{% block toolbar %}\n    {% set icon %}\n        {# ... #}\n    {% endset %}\n\n    {% set text %}\n        <div class=\"sf-toolbar-info-piece\">\n            {# ... #}\n        </div>\n    {% endset %}\n\n    {{ include('@WebProfiler/Profiler/toolbar_item.html.twig', { 'link': true }) }}\n{% endblock %}\n\n{% block head %}\n    {# Optional. Here you can link to or define your own CSS and JS contents. #}\n    {# Use {{ parent() }} to extend the default styles instead of overriding them. #}\n{% endblock %}\n\n{% block menu %}\n    {# This left-hand menu appears when using the full-screen profiler. #}\n    <span class=\"label\">\n        <span class=\"icon\"><img src=\"...\" alt=\"\"/></span>\n        <strong>Request</strong>\n    </span>\n{% endblock %}\n\n{% block panel %}\n    {# Optional, for showing the most details. #}\n    <h2>Acceptable Content Types</h2>\n    <table>\n        <tr>\n            <th>Content Type</th>\n        </tr>\n\n        {% for type in collector.acceptableContentTypes %}\n        <tr>\n            <td>{{ type }}</td>\n        </tr>\n        {% endfor %}\n\n        {# use the profiler_dump() function to render the contents of dumped objects #}\n        <tr>\n            {{ profiler_dump(collector.someObject) }}\n        </tr>\n    </table>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Environment Variables in XML\nDESCRIPTION: Example of setting and accessing JSON-encoded environment variables in Symfony XML configuration. This defines ALLOWED_LANGUAGES as a JSON array and accesses it via the json processor.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/env_var_processors.rst#2025-04-22_snippet_16\n\nLANGUAGE: xml\nCODE:\n```\n<parameters>\n    <parameter key=\"env(ALLOWED_LANGUAGES)\">[\"en\",\"de\",\"es\"]</parameter>\n    <parameter key=\"app_allowed_languages\">%env(json:ALLOWED_LANGUAGES)%</parameter>\n</parameters>\n```\n\n----------------------------------------\n\nTITLE: Using Count Validator with XML Configuration in Symfony\nDESCRIPTION: Example of implementing the Count validator using XML configuration to ensure an emails property contains between 1 and 5 elements, with custom validation messages.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Count.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\Participant\">\n        <property name=\"emails\">\n            <constraint name=\"Count\">\n                <option name=\"min\">1</option>\n                <option name=\"max\">5</option>\n                <option name=\"minMessage\">You must specify at least one email</option>\n                <option name=\"maxMessage\">You cannot specify more than {{ limit }} emails</option>\n            </constraint>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Installing Monolog Bundle (Terminal)\nDESCRIPTION: Command to install the Symfony Monolog Bundle using Composer, which integrates Monolog logging library with Symfony.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/logging.rst#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ composer require symfony/monolog-bundle\n```\n\n----------------------------------------\n\nTITLE: Defining constants in PHP for configuration options\nDESCRIPTION: This PHP code shows how to define constants in a class for configuration options that rarely change, such as the number of items to display in a listing.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/best_practices.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Post.php\nnamespace App\\Entity;\n\nclass Post\n{\n    public const NUMBER_OF_ITEMS = 10;\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony Scheduler via Composer (Terminal)\nDESCRIPTION: Installs the Symfony Scheduler component into a project using Composer. This command is typically run in the project's root directory within a terminal.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/scheduler.rst#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require symfony/scheduler\n```\n\n----------------------------------------\n\nTITLE: Implementing All Constraint with PHP in Symfony Validator\nDESCRIPTION: PHP code example showing how to apply the All constraint using the loadValidatorMetadata method. This applies NotBlank and Length constraints to each element in the favoriteColors array.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/All.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/User.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass User\n{\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('favoriteColors', new Assert\\All(\n            constraints: [\n                new Assert\\NotBlank(),\n                new Assert\\Length(min: 5),\n            ],\n        ));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Symfony Console Command with Verbosity\nDESCRIPTION: Shows how to run a Symfony console command with increased verbosity to obtain a stack trace. The --verbose flag is used to get more detailed output, including the stack trace.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/contributing/code/stack_trace.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ php bin/console --verbose debug:exception\n```\n\n----------------------------------------\n\nTITLE: Initial Repository Setup for Docs Maintainers\nDESCRIPTION: Shows how to set up the local documentation repository with proper remotes and configuration for the gh tool\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/_build/maintainer_guide.rst#2025-04-22_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\n# Clone your fork\n$ git clone https://github.com/<YOUR-NAME>/symfony-docs.git\n\n$ cd symfony-docs/\n\n# Add the original repo as 'upstream' remote\n$ git remote add upstream https://github.com/symfony/symfony-docs\n\n# Add the original repo as 'gh' remote (needed for the 'gh' tool)\n$ git remote add gh https://github.com/symfony/symfony-docs\n\n# Configure 'gh' in Git as the remote used by the 'gh' tool\n$ git config gh.remote gh\n```\n\n----------------------------------------\n\nTITLE: Enforcing Minimum and Maximum Constraints on Integer and Float Nodes in Symfony TreeBuilder (PHP)\nDESCRIPTION: Adds validation constraints (min and max) to integer and float configuration nodes within the Symfony TreeBuilder. This restricts values for numeric fields, ensuring they fall within specified ranges. Requires Symfony Config definitions; inputs are numeric configuration values, which are rejected if outside set bounds. Used in settings where certain configuration fields must stay under or above specified limits.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/config/definition.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$rootNode\n    ->children()\n        ->integerNode('positive_value')\n            ->min(0)\n        ->end()\n        ->floatNode('big_value')\n            ->max(5E45)\n        ->end()\n        ->integerNode('value_inside_a_range')\n            ->min(-50)->max(50)\n        ->end()\n    ->end()\n;\n```\n\n----------------------------------------\n\nTITLE: Configuring Regex Constraint with Inverse Matching\nDESCRIPTION: Example of using the Regex constraint with PHP attributes to validate that a firstName field does not contain numbers.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Regex.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Author.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Author\n{\n    #[Assert\\Regex(\n        pattern: '/\\d/',\n        match: false,\n        message: 'Your name cannot contain a number',\n    )]\n    protected string $firstName;\n}\n```\n\n----------------------------------------\n\nTITLE: Using URL Encode Environment Variable Processor in YAML\nDESCRIPTION: Demonstrates how to use the 'urlencode' processor in a YAML configuration file to encode the value of an environment variable.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/env_var_processors.rst#2025-04-22_snippet_41\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/framework.yaml\nparameters:\n    env(DATABASE_URL): 'mysql://db_user:foo@b$r@127.0.0.1:3306/db_name'\n    encoded_database_url: '%env(urlencode:DATABASE_URL)%'\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Group Sequence Provider in XML\nDESCRIPTION: This code illustrates how to set up an advanced group sequence provider using a separate class in Symfony, using XML configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/validation/sequence_provider.rst#2025-04-22_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping\n        https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\User\">\n        <group-sequence-provider>\n            <value>App\\Validator\\UserGroupProvider</value>\n        </group-sequence-provider>\n        <!-- ... -->\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Defining TaskType with Issue Field in PHP\nDESCRIPTION: Creates a TaskType form class with 'description' and 'issue' fields. The 'issue' field is set up as a TextType, preparing for a custom transformer.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/data_transformers.rst#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n// src/Form/Type/TaskType.php\nnamespace App\\Form\\Type;\n\nuse App\\Entity\\Task;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\TextareaType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\TextType;\n\n// ...\nclass TaskType extends AbstractType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options): void\n    {\n        $builder\n            ->add('description', TextareaType::class)\n            ->add('issue', TextType::class)\n        ;\n    }\n\n    public function configureOptions(OptionsResolver $resolver): void\n    {\n        $resolver->setDefaults([\n            'data_class' => Task::class,\n        ]);\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing EventDispatcher Component with Composer\nDESCRIPTION: Command to install the Symfony EventDispatcher component via Composer package manager.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/create_framework/event_dispatcher.rst#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require symfony/event-dispatcher\n```\n\n----------------------------------------\n\nTITLE: Disabling Notifier Delivery in Development Environment\nDESCRIPTION: YAML configuration for disabling notification delivery in development environment by forcing the NullTransport for all texter and chatter transports.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/notifier.rst#2025-04-22_snippet_36\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/dev/notifier.yaml\nframework:\n    notifier:\n        texter_transports:\n            twilio: 'null://null'\n        chatter_transports:\n            slack: 'null://null'\n```\n\n----------------------------------------\n\nTITLE: Formatting Currency Price in PHP\nDESCRIPTION: A utility method that formats a numeric value as a USD price string with configurable decimal places and separators. The function takes a float input and returns a formatted string prefixed with a dollar sign.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/templates.rst#2025-04-22_snippet_51\n\nLANGUAGE: php\nCODE:\n```\npublic function formatPrice(float $number, int $decimals = 0, string $decPoint = '.', string $thousandsSep = ','): string\n{\n    $price = number_format($number, $decimals, $decPoint, $thousandsSep);\n    $price = '$'.$price;\n\n    return $price;\n}\n```\n\n----------------------------------------\n\nTITLE: Conditionally Injecting Parameter via Expression (Symfony XML)\nDESCRIPTION: Configures the `App\\Mailer` service in XML, using an expression within an `<argument type=\"expression\">` tag. The expression checks for the existence of 'some_param' using `container.hasParameter` and injects either the parameter's value via `parameter()` or a default string.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/expression_language.rst#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"App\\Mailer\">\n            <argument type=\"expression\">container.hasParameter('some_param') ? parameter('some_param') : 'default_value'</argument>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Multi-Branch Merge Process\nDESCRIPTION: Shows the complete process of merging changes across multiple maintained Symfony branches\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/_build/maintainer_guide.rst#2025-04-22_snippet_3\n\nLANGUAGE: terminal\nCODE:\n```\n$ git fetch upstream\n\n$ git checkout 4.4\n$ git merge upstream/4.4\n\n$ gh merge 11159\n$ git push origin\n$ git push upstream\n\n$ git checkout 5.0\n$ git merge upstream/5.0\n$ git merge --log 4.4\n# here you can face several errors explained later\n$ git push origin\n$ git push upstream\n\n$ git checkout master\n$ git merge upstream/master\n$ git merge --log 5.0\n$ git push origin\n$ git push upstream\n```\n\n----------------------------------------\n\nTITLE: Configuring UUID/ULID Console Commands in YAML (YAML)\nDESCRIPTION: Configuration in YAML format to enable console commands for generating and inspecting UUIDs and ULIDs in a Symfony application.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/uid.rst#2025-04-22_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nservices:\n    Symfony\\Component\\Uid\\Command\\GenerateUlidCommand: ~\n    Symfony\\Component\\Uid\\Command\\GenerateUuidCommand: ~\n    Symfony\\Component\\Uid\\Command\\InspectUlidCommand: ~\n    Symfony\\Component\\Uid\\Command\\InspectUuidCommand: ~\n```\n\n----------------------------------------\n\nTITLE: Fixing Wrong Branch Merge\nDESCRIPTION: Sequence of Git commands to correct a merge that was done in the wrong branch using cherry-pick and revert operations\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/_build/maintainer_guide.rst#2025-04-22_snippet_7\n\nLANGUAGE: terminal\nCODE:\n```\n$ git checkout 5.1\n$ git cherry-pick <SHA OF YOUR MERGE COMMIT> -m 1\n$ git checkout 5.x\n$ git revert <SHA OF YOUR MERGE COMMIT> -m 1\n$ git checkout 5.2\n$ git merge 5.1\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Format Configuration Blocks\nDESCRIPTION: Demonstrates how to create configuration blocks that show examples in multiple formats (YAML, XML, PHP).\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/contributing/documentation/format.rst#2025-04-22_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. configuration-block::\n\n    .. code-block:: yaml\n\n        # Configuration in YAML\n\n    .. code-block:: xml\n\n        <!-- Configuration in XML -->\n\n    .. code-block:: php\n\n        // Configuration in PHP\n```\n\n----------------------------------------\n\nTITLE: Prototyped Drivers Array in YAML and XML Syntax for Symfony Configuration\nDESCRIPTION: Provides examples of defining drivers as prototyped arrays in YAML and XML, corresponding to prior PHP node definitions. Does not require code dependencies, but should match the normalization rules of the associated PHP configuration. Inputs: named array in YAML, repeated tag in XML. Outputs after normalization: flat PHP array with driver names. This configuration is intended to demonstrate syntax equivalence between YAML, XML, and resulting PHP arrays.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/config/definition.rst#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ndrivers: ['mysql', 'sqlite']\n\n```\n\n----------------------------------------\n\nTITLE: File Link Generation\nDESCRIPTION: Creates file links with line numbers using a preconfigured scheme\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#2025-04-22_snippet_60\n\nLANGUAGE: twig\nCODE:\n```\n{{ file|file_link(line) }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Cache Limiter in XML\nDESCRIPTION: Example of setting the session cache limiter parameter in XML configuration. Shows how to properly structure XML parameters for session storage options.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_68\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <parameters>\n        <parameter key=\"session.storage.options\" type=\"collection\">\n            <parameter key=\"cache_limiter\">0</parameter>\n        </parameter>\n    </parameters>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Example File Structure for Symbolic Link Demonstration\nDESCRIPTION: Provides a text representation of a sample directory structure containing files, a symbolic link to a file, and a symbolic link to a directory. This structure is used to illustrate the behavior of the `followLinks()` method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/finder.rst#2025-04-22_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n├── folder1/\n│   ├──file1.txt\n│   ├── file2link (symbolic link to folder2/file2.txt file)\n│   └── folder3link (symbolic link to folder3/ directory)\n├── folder2/\n│   └── file2.txt\n└── folder3/\n    └── file3.txt\n```\n\n----------------------------------------\n\nTITLE: Escaped Single Quotes in YAML Strings\nDESCRIPTION: Shows how to escape single quotes within single-quoted strings by doubling them.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/formats/yaml.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n'A single quote '' inside a single-quoted string'\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Monolog Email Error Handlers in XML\nDESCRIPTION: Basic Monolog configuration in XML format that sets up error email notifications with handlers for filtering and sending emails.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/logging/monolog_email.rst#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:monolog=\"http://symfony.com/schema/dic/monolog\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/monolog https://symfony.com/schema/dic/monolog/monolog-1.0.xsd\">\n    <monolog:config>\n        <monolog:handler\n            name=\"main\"\n            type=\"fingers_crossed\"\n            action-level=\"critical\"\n            handler=\"deduplicated\"\n        />\n        <monolog:handler\n            name=\"deduplicated\"\n            type=\"deduplication\"\n            handler=\"symfony_mailer\"\n        />\n        <monolog:handler\n            name=\"symfony_mailer\"\n            type=\"symfony_mailer\"\n            from-email=\"error@example.com\"\n            subject=\"An Error Occurred! %%message%%\"\n            level=\"debug\"\n            formatter=\"monolog.formatter.html\"\n            content-type=\"text/html\">\n            <monolog:to-email>error@example.com</monolog:to-email>\n        </monolog:handler>\n    </monolog:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Running PHP CS Fixer to Fix Code Style Issues\nDESCRIPTION: Command to install and run PHP CS Fixer tool to automatically fix code that doesn't match Symfony's coding standards.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/contributing/code/standards.rst#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ cd your-project/\n$ php php-cs-fixer.phar fix -v\n```\n\n----------------------------------------\n\nTITLE: Configuring Switch User Firewall in Symfony Security (XML) - XML\nDESCRIPTION: Creates a Symfony DI configuration for the security firewall in XML format, under 'config/packages/security.xml'. The firewall named 'main' includes a 'switch-user' element with 'role' set to 'CAN_SWITCH_USER'. Designed to work with Symfony Dependency Injection configuration, requires XML schema compliance and correct namespace declarations.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/impersonating_user.rst#2025-04-22_snippet_17\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/security.xml -->\\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\\n<srv:container xmlns=\\\"http://symfony.com/schema/dic/security\\\"\\n    xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n    xmlns:srv=\\\"http://symfony.com/schema/dic/services\\\"\\n    xsi:schemaLocation=\\\"http://symfony.com/schema/dic/services\\n        https://symfony.com/schema/dic/services/services-1.0.xsd\\n        http://symfony.com/schema/dic/security\\n        https://symfony.com/schema/dic/security/security-1.0.xsd\\\">\\n    <config>\\n        <!-- ... -->\\n\\n        <firewall name=\\\"main\\\">\\n            <!-- ... -->\\n            <switch-user role=\\\"CAN_SWITCH_USER\\\"/>\\n        </firewall>\\n    </config>\\n</srv:container>\n```\n\n----------------------------------------\n\nTITLE: Defining Configuration Parameters - Symfony Service Container - XML\nDESCRIPTION: This XML snippet shows how to define reusable service container parameters for a Symfony application. Supported parameter types include strings, booleans (with optional string representation), collections (arrays), binary content, PHP constants, and enum cases. Be sure to specify the correct parameter types and use the 'app.' prefix to distinguish custom parameters from framework defaults.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration.rst#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\\n<container xmlns=\\\"http://symfony.com/schema/dic/services\\\"\\n    xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n    xmlns:framework=\\\"http://symfony.com/schema/dic/symfony\\\"\\n    xsi:schemaLocation=\\\"http://symfony.com/schema/dic/services\\n        https://symfony.com/schema/dic/services/services-1.0.xsd\\n        http://symfony.com/schema/dic/symfony\\n        https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\\\">\\n\\n    <parameters>\\n        <!-- the parameter name is an arbitrary string (the 'app.' prefix is recommended\\n             to better differentiate your parameters from Symfony parameters). -->\\n        <parameter key=\\\"app.admin_email\\\">something@example.com</parameter>\\n\\n        <!-- boolean parameters -->\\n        <parameter key=\\\"app.enable_v2_protocol\\\">true</parameter>\\n        <!-- if you prefer to store the boolean value as a string in the parameter -->\\n        <parameter key=\\\"app.enable_v2_protocol\\\" type=\\\"string\\\">true</parameter>\\n\\n        <!-- array/collection parameters -->\\n        <parameter key=\\\"app.supported_locales\\\" type=\\\"collection\\\">\\n            <parameter>en</parameter>\\n            <parameter>es</parameter>\\n            <parameter>fr</parameter>\\n        </parameter>\\n\\n        <!-- binary content parameters (encode the contents with base64_encode()) -->\\n        <parameter key=\\\"app.some_parameter\\\" type=\\\"binary\\\">VGhpcyBpcyBhIEJlbGwgY2hhciAH</parameter>\\n\\n        <!-- PHP constants as parameter values -->\\n        <parameter key=\\\"app.some_constant\\\" type=\\\"constant\\\">GLOBAL_CONSTANT</parameter>\\n        <parameter key=\\\"app.another_constant\\\" type=\\\"constant\\\">App\\Entity\\BlogPost::MAX_ITEMS</parameter>\\n\\n        <!-- Enum case as parameter values -->\\n        <parameter key=\\\"app.some_enum\\\" type=\\\"constant\\\">App\\Enum\\PostState::Published</parameter>\\n    </parameters>\\n\\n    <!-- ... -->\\n</container>\n```\n\n----------------------------------------\n\nTITLE: Setting Cache Control Headers in Controller\nDESCRIPTION: Example of setting TTL and cache control headers in a controller response.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/create_framework/http_kernel_httpkernelinterface.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function index(Request $request, int $year): Response\n{\n    $leapYear = new LeapYear();\n    if ($leapYear->isLeapYear($year)) {\n        $response = new Response('Yep, this is a leap year!');\n    } else {\n        $response = new Response('Nope, this is not a leap year.');\n    }\n\n    $response->setTtl(10);\n\n    return $response;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Directory for Symfony-based Framework in PHP\nDESCRIPTION: Terminal commands to create a new directory for the framework project and navigate into it.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/create_framework/introduction.rst#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ mkdir framework\n$ cd framework\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony Requirements Checker\nDESCRIPTION: Command to install the requirements checker package for verifying system compatibility in production environments.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/deployment.rst#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require symfony/requirements-checker\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Entity Mappings in YAML\nDESCRIPTION: YAML configuration for customizing Doctrine entity mappings in a Symfony bundle, specifically changing the directory for XML configurations in AppBundle.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/doctrine.rst#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ndoctrine:\n    # ...\n    orm:\n        # ...\n        auto_mapping: true\n        mappings:\n            # ...\n            AppBundle:\n                type: xml\n                dir: SomeResources/config/doctrine\n```\n\n----------------------------------------\n\nTITLE: Comparing Dates with LessThan Constraint in YAML\nDESCRIPTION: Example of using the LessThan constraint in YAML configuration to validate that a date is in the past.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/LessThan.rst#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Person:\n    properties:\n        dateOfBirth:\n            - LessThan: today\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Adapters in XML\nDESCRIPTION: XML configuration for setting up cache adapters for app and system caches in Symfony.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/cache.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/cache.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony\n        https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\"\n>\n    <framework:config>\n        <framework:cache\n            app=\"cache.adapter.filesystem\"\n            system=\"cache.adapter.system\"\n        />\n    </framework:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Couchbase Connection with Multiple DSNs\nDESCRIPTION: Shows how to create a Couchbase connection using multiple DSN strings for server configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/cache/adapters/couchbasebucket_adapter.rst#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Cache\\Adapter\\CouchbaseBucketAdapter;\n\n// pass an array of DSN strings to register multiple servers with the client\n$client = CouchbaseBucketAdapter::createConnection([\n    'couchbase://10.0.0.100',\n    'couchbase://10.0.0.101',\n    'couchbase://10.0.0.102',\n    // etc...\n]);\n\n// a single DSN can define multiple servers using the following syntax:\n// host[hostname-or-IP:port] (where port is optional). Sockets must include a trailing ':'\n$client = CouchbaseBucketAdapter::createConnection(\n    'couchbase:?host[localhost]&host[localhost:12345]'\n);\n```\n\n----------------------------------------\n\nTITLE: Referencing External Documentation in reStructuredText\nDESCRIPTION: This snippet demonstrates how to create a reference to external documentation using reStructuredText syntax. It links to the 'contributing' document within the Symfony documentation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/contributing/community/mentoring.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n:doc:`contributing </contributing/index>`\n```\n\n----------------------------------------\n\nTITLE: Defining Url Validation Constraint using PHP Attributes in Symfony\nDESCRIPTION: Example of using PHP attributes to add a URL validation constraint to a property in an entity class. This ensures the bioUrl property contains a valid URL.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Url.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Author.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Author\n{\n    #[Assert\\Url]\n    protected string $bioUrl;\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Bundle Resources using Logical Paths in Symfony (Deprecated)\nDESCRIPTION: Shows the older, deprecated method of referencing bundle resources using logical paths in Symfony. This format, using `@BundleName/path/to/resource`, required resolution via Symfony's kernel resource locator but is no longer the recommended practice.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/bundles/best_practices.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n@AcmeBlogBundle/config/services.xml\n```\n\n----------------------------------------\n\nTITLE: Adding Required Argument to Public Method in PHP\nDESCRIPTION: This snippet shows how to add a new required argument to a public method in a backward-compatible way. It demonstrates the initial step of adding the argument as a comment in the method signature.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/contributing/code/bc.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// or required\npublic function say(string $text, /* bool $stripWhitespace */): void\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Throwing Exception in PHP\nDESCRIPTION: Demonstrates how to throw a generic Exception in PHP with a custom error message.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/controller.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nthrow new \\Exception('Something went wrong!');\n```\n\n----------------------------------------\n\nTITLE: Customizing URL Validation Error Message with PHP Method in Symfony\nDESCRIPTION: Example of setting a custom error message for URL validation using PHP methods to load validator metadata.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Url.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Author.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Author\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('bioUrl', new Assert\\Url(\n            message: 'The url \"{{ value }}\" is not a valid url.',\n        ));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Monolog Processor Per Handler in YAML\nDESCRIPTION: YAML configuration for registering a processor for a specific handler. This limits the processor to only be applied to log records processed by the 'main' handler rather than all handlers.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/logging/processors.rst#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nservices:\n    App\\Logger\\SessionRequestProcessor:\n        tags:\n            - { name: monolog.processor, handler: main }\n```\n\n----------------------------------------\n\nTITLE: Restructured Text Document References\nDESCRIPTION: Demonstrates the syntax for creating document references and descriptions in reStructuredText format\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/contributing/documentation/index.rst#2025-04-22_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n:doc:`The Contribution Process </contributing/documentation/overview>`\n    Explains the steps to follow to contribute fixes and new contents. It's the\n    same contribution process followed by most open source projects, so you may\n    already know everything that is needed.\n```\n\n----------------------------------------\n\nTITLE: Applying DivisibleBy Constraint in PHP\nDESCRIPTION: This PHP code demonstrates how to programmatically apply the DivisibleBy constraint to properties of an Item class using Symfony's ClassMetadata. It ensures the weight is divisible by 0.25 and the quantity is divisible by 5.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/DivisibleBy.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Item.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Item\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('weight', new Assert\\DivisibleBy(0.25));\n\n        $metadata->addPropertyConstraint('quantity', new Assert\\DivisibleBy(\n            value: 5,\n        ));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying IsFalse Constraint Using YAML Configuration\nDESCRIPTION: Example of using YAML configuration to apply the IsFalse constraint to a getter method that checks for invalid states.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/IsFalse.rst#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Author:\n    getters:\n        stateInvalid:\n            - 'IsFalse':\n                message: You've entered an invalid state.\n```\n\n----------------------------------------\n\nTITLE: Including Symfony Form Types Map in RST Documentation\nDESCRIPTION: This RST directive includes a map of all available form types from an external file. This is used to dynamically generate a comprehensive list of supported field types in the Symfony documentation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types.rst#2025-04-22_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: /reference/forms/types/map.rst.inc\n```\n\n----------------------------------------\n\nTITLE: Rendering SSI Fragments in Twig Template\nDESCRIPTION: Shows how to include SSI fragments in a Twig template using the render_ssi helper. This demonstrates both controller reference and path methods for inclusion.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/http_cache/ssi.rst#2025-04-22_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n{# templates/profile/index.html.twig #}\n\n{# you can use a controller reference #}\n{{ render_ssi(controller('App\\\\Controller\\\\ProfileController::gdpr')) }}\n\n{# ... or a path (in server's SSI configuration is common to use relative paths instead of absolute URLs) #}\n{{ render_ssi(path('profile_gdpr')) }}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Progress Bars in PHP/Symfony\nDESCRIPTION: Demonstrates how to display and update multiple progress bars simultaneously using console output sections.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/helpers/progressbar.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$section1 = $output->section();\n$section2 = $output->section();\n\n$progress1 = new ProgressBar($section1);\n$progress2 = new ProgressBar($section2);\n\n$progress1->start(100);\n$progress2->start(100);\n\n$i = 0;\nwhile (++$i < 100) {\n    $progress1->advance();\n\n    if ($i % 2 === 0) {\n        $progress2->advance(4);\n    }\n\n    usleep(50000);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing the Symfony UID Component via Composer\nDESCRIPTION: This command uses Composer, the PHP dependency manager, to add the `symfony/uid` package to your project. This makes the UID utilities available for use within the application.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/uid.rst#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require symfony/uid\n```\n\n----------------------------------------\n\nTITLE: Applying BIC Validation with PHP Validator Metadata in Symfony\nDESCRIPTION: This code demonstrates how to apply the BIC constraint using PHP validator metadata. It adds the BIC constraint to the businessIdentifierCode property through the loadValidatorMetadata method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Bic.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Transaction.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Transaction\n{\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('businessIdentifierCode', new Assert\\Bic());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring dump_destination in PHP\nDESCRIPTION: PHP configuration for setting the dump_destination parameter in the DebugBundle. This example uses the ContainerConfigurator API to define the extension configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/debug.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/debug.php\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nreturn static function (ContainerConfigurator $container): void {\n    $container->extension('debug', [\n        'dump_destination' => 'php://stderr',\n    ]);\n};\n```\n\n----------------------------------------\n\nTITLE: IP Address Client Check Example\nDESCRIPTION: A partial code snippet showing a comment about client IP validation logic, indicating privileged access for known clients.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/create_framework/http_foundation.rst#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n// the client is a known one, so give it some more privilege\n```\n\n----------------------------------------\n\nTITLE: Field Variables Table for Time Interval Form Type in RST\nDESCRIPTION: A table documenting the variables available in time interval form types, including their types and usage. These variables correspond to configuration options and control which time units are displayed in the form widget.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/dateinterval.rst#2025-04-22_snippet_10\n\nLANGUAGE: rst\nCODE:\n```\n================  ===========  ========================================\nVariable          Type         Usage\n================  ===========  ========================================\n``widget``        ``mixed``    The value of the `widget`_ option.\n``with_days``     ``Boolean``  The value of the `with_days`_ option.\n``with_invert``   ``Boolean``  The value of the `with_invert`_ option.\n``with_hours``    ``Boolean``  The value of the `with_hours`_ option.\n``with_minutes``  ``Boolean``  The value of the `with_minutes`_ option.\n``with_months``   ``Boolean``  The value of the `with_months`_ option.\n``with_seconds``  ``Boolean``  The value of the `with_seconds`_ option.\n``with_weeks``    ``Boolean``  The value of the `with_weeks`_ option.\n``with_years``    ``Boolean``  The value of the `with_years`_ option.\n================  ===========  ========================================\n```\n\n----------------------------------------\n\nTITLE: Applying Yaml Constraint in PHP\nDESCRIPTION: Example of applying the Yaml constraint to a property using PHP code in a loadValidatorMetadata method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Yaml.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Report.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Report\n{\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('customConfiguration', new Assert\\Yaml(\n            message: 'Your configuration doesn\\'t have valid YAML syntax.',\n        ));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecating a Service in PHP for Symfony\nDESCRIPTION: Uses the PHP ContainerConfigurator to deprecate the OldService with a custom vendor package, version, and message template (including %service_id%). Dependencies: Symfony DependencyInjection (PHP config API), ContainerConfigurator. Ensures that usage of OldService causes a deprecation warning with detailed information, supporting complex configuration workflows.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/alias_private.rst#2025-04-22_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\\nnamespace Symfony\\\\Component\\\\DependencyInjection\\\\Loader\\\\Configurator;\\n\\nuse App\\\\Service\\\\OldService;\\n\\nreturn function(ContainerConfigurator $container): void {\\n    $services = $container->services();\\n\\n    $services->set(OldService::class)\\n        ->deprecate(\\n            'vendor-name/package-name',\\n            '2.8',\\n            'The \\\"%service_id%\\\" service is deprecated since vendor-name/package-name 2.8 and will be removed in 3.0.'\\n        );\\n};\n```\n\n----------------------------------------\n\nTITLE: Initial Composer Dependencies Configuration\nDESCRIPTION: The base composer.json dependencies for a minimal Symfony application showing core required packages.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/quick_tour/flex_recipes.rst#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"require\": {\n    \"...\",\n    \"symfony/console\": \"^6.1\",\n    \"symfony/flex\": \"^2.0\",\n    \"symfony/framework-bundle\": \"^6.1\",\n    \"symfony/yaml\": \"^6.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Monolog HTTP Code Exclusion in XML\nDESCRIPTION: XML configuration for excluding HTTP codes 403 and 404 from Monolog logging, including specific URL patterns for code 403\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/logging/monolog_exclude_http_codes.rst#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/prod/monolog.xml -->\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:monolog=\"http://symfony.com/schema/dic/monolog\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/monolog\n        https://symfony.com/schema/dic/monolog/monolog-1.0.xsd\">\n\n    <monolog:config>\n        <monolog:handler type=\"fingers_crossed\" name=\"main\" handler=\"...\">\n            <!-- ... -->\n            <monolog:excluded-http-code code=\"403\">\n                <monolog:url>^/foo</monolog:url>\n                <monolog:url>^/bar</monolog:url>\n            </monolog:excluded-http-code>\n            <monolog:excluded-http-code code=\"404\"/>\n        </monolog:handler>\n    </monolog:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: YAML Array Configuration Example\nDESCRIPTION: Demonstrates how to configure arrays of values in YAML format for Twig extensions.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/config/definition.rst#2025-04-22_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\ntwig:\n    extensions: ['twig.extension.foo', 'twig.extension.bar']\n```\n\n----------------------------------------\n\nTITLE: Finding Only Directories with Symfony Finder in PHP\nDESCRIPTION: Shows how to configure the Finder to return only directories and ignore files in the search results by calling the `directories()` method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/finder.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// look for directories only; ignore files\n$finder->directories();\n```\n\n----------------------------------------\n\nTITLE: Defining an Author Class with File Property in PHP\nDESCRIPTION: Defines an Author class with a bioFile property of type File, including getter and setter methods.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/File.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Author.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\HttpFoundation\\File\\File;\n\nclass Author\n{\n    protected File $bioFile;\n\n    public function setBioFile(?File $file = null): void\n    {\n        $this->bioFile = $file;\n    }\n\n    public function getBioFile(): File\n    {\n        return $this->bioFile;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Validation Messages Translation Example\nDESCRIPTION: Translation file examples in different formats (XML, YAML, PHP) for validation messages.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/validation/translations.rst#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<!-- translations/validators/validators.en.xlf -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<xliff version=\"1.2\" xmlns=\"urn:oasis:names:tc:xliff:document:1.2\">\n    <file source-language=\"en\" datatype=\"plaintext\" original=\"file.ext\">\n        <body>\n            <trans-unit id=\"author.name.not_blank\">\n                <source>author.name.not_blank</source>\n                <target>Please enter an author name.</target>\n            </trans-unit>\n        </body>\n    </file>\n</xliff>\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# translations/validators/validators.en.yaml\nauthor.name.not_blank: Please enter an author name.\n```\n\nLANGUAGE: php\nCODE:\n```\n// translations/validators/validators.en.php\nreturn [\n    'author.name.not_blank' => 'Please enter an author name.',\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Decoration in PHP\nDESCRIPTION: Demonstrates how to configure service decoration using PHP configuration. The Bar service decorates Foo and uses ContainerInterface::IGNORE_ON_INVALID_REFERENCE to handle missing services.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/service_decoration.rst#2025-04-22_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nuse Symfony\\Component\\DependencyInjection\\ContainerInterface;\n\nreturn function(ContainerConfigurator $container): void {\n    $services = $container->services();\n\n    $services->set(Foo::class);\n\n    $services->set(Bar::class)\n        ->decorate(Foo::class, null, 0, ContainerInterface::IGNORE_ON_INVALID_REFERENCE)\n        ->args([service('.inner')])\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Simplified Front Controller Using Framework Class in PHP\nDESCRIPTION: This snippet shows a simplified front controller that uses the Framework class. It demonstrates how to create a request, include routes, instantiate the framework, and handle the request.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/create_framework/dependency_injection.rst#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n// example.com/web/front.php\nrequire_once __DIR__.'/../vendor/autoload.php';\n\nuse Symfony\\Component\\HttpFoundation\\Request;\n\n$request = Request::createFromGlobals();\n$routes = include __DIR__.'/../src/app.php';\n\n$framework = new Simplex\\Framework($routes);\n\n$framework->handle($request)->send();\n```\n\n----------------------------------------\n\nTITLE: Configuring Sequentially Validation in PHP\nDESCRIPTION: Example of configuring the Sequentially constraint using PHP to programmatically add validation rules to a Place object's address property via the loadValidatorMetadata method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Sequentially.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Localization/Place.php\nnamespace App\\Localization;\n\nuse App\\Validator\\Constraints as AcmeAssert;\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Place\n{\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('address', new Assert\\Sequentially([\n            new Assert\\NotNull(),\n            new Assert\\Type('string'),\n            new Assert\\Length(min: 10),\n            new Assert\\Regex(self::ADDRESS_REGEX),\n            new AcmeAssert\\Geolocalizable(),\n        ]));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using IdenticalTo Validator with YAML Configuration in Symfony\nDESCRIPTION: Example showing how to configure the IdenticalTo constraint using YAML validation configuration files. This validates that a Person entity's firstName is identical to 'Mary' and age is identical to 20.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/IdenticalTo.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Person:\n    properties:\n        firstName:\n            - IdenticalTo: Mary\n        age:\n            - IdenticalTo:\n                value: 20\n```\n\n----------------------------------------\n\nTITLE: Defining Property Constraints Using PHP Attributes (PHP)\nDESCRIPTION: Defines a User class with property-level constraints specified as PHP attributes, showcasing an alternative to configuration files or static methods. This approach uses PHP 8+ attributes with Validator constraints like NotBlank. The Validator must be configured to enable attribute mapping for these annotations to be loaded. No file or method mapping is required; the presence of constraints as attributes suffices.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/validator/resources.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Validator\\Constraints as Assert;\\n// ...\\n\\nclass User\\n{\\n    #[Assert\\NotBlank]\\n    protected string $name;\\n}\n```\n\n----------------------------------------\n\nTITLE: Running PHPUnit with an Ignore File for Deprecations - Terminal - terminal\nDESCRIPTION: This snippet demonstrates how to execute PHPUnit tests with ignored deprecation notices as specified in a file. The SYMFONY_DEPRECATIONS_HELPER environment variable is set to use the 'ignoreFile' option, pointing to the file containing regex patterns for ignored deprecations. This command runs the simple-phpunit test runner while ignoring configured deprecations.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/phpunit_bridge.rst#2025-04-22_snippet_9\n\nLANGUAGE: terminal\nCODE:\n```\n$ SYMFONY_DEPRECATIONS_HELPER='ignoreFile=./tests/baseline-ignore' ./vendor/bin/simple-phpunit\n```\n\n----------------------------------------\n\nTITLE: Merging Pull Requests with gh CLI Tool\nDESCRIPTION: Demonstrates how to merge a pull request using the proprietary gh CLI tool, including making minor fixes before pushing\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/_build/maintainer_guide.rst#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ gh merge 11059\n\n  Working on symfony/symfony-docs (branch 6.2)\n  Merging Pull Request 11059: dmaicher/patch-3\n\n  ...\n\n  # This is important!! Say NO to push the changes now\n  Push the changes now? (Y/n) n\n  Now, push with: git push gh \"6.2\" refs/notes/github-comments\n\n  # Now, open your editor and make the needed changes ...\n\n  $ git commit -a\n  # Use \"Minor reword\", \"Minor tweak\", etc. as the commit message\n\n  # now run the 'push' command shown above by 'gh' (it's different each time)\n  $ git push gh \"6.2\" refs/notes/github-comments\n```\n\n----------------------------------------\n\nTITLE: Ignoring Comment Encoding with XmlEncoder Context Options in PHP\nDESCRIPTION: This PHP snippet demonstrates how to configure the `XmlEncoder` to ignore the special `#comment` key during encoding. By passing `XmlEncoder::ENCODER_IGNORED_NODE_TYPES` with `\\XML_COMMENT_NODE` in the context array, any data under `#comment` keys in the input `$array` will not be rendered as XML comments in the output.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer/encoders.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$xmlEncoder->encode($array, 'xml', [XmlEncoder::ENCODER_IGNORED_NODE_TYPES => [\\XML_COMMENT_NODE]]);\n```\n\n----------------------------------------\n\nTITLE: Defining Service Decorators in XML\nDESCRIPTION: This XML configuration demonstrates how to set up service decorators with priorities in Symfony's services.xml file.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/service_decoration.rst#2025-04-22_snippet_17\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"Foo\"/>\n\n        <service id=\"Bar\" decorates=\"Foo\" decoration-priority=\"5\">\n            <argument type=\"service\" id=\".inner\"/>\n        </service>\n\n        <service id=\"Baz\" decorates=\"Foo\" decoration-priority=\"1\">\n            <argument type=\"service\" id=\".inner\"/>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Optimizing Password Hasher Configuration for Tests (YAML)\nDESCRIPTION: This YAML configuration snippet, intended for `config/packages/test/security.yaml`, overrides the main password hasher settings for the test environment. It demonstrates two options for faster tests: using 'plaintext' to disable hashing entirely or using the 'auto' algorithm (matching production) but with the lowest possible cost values for bcrypt and argon2 algorithms.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/passwords.rst#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/test/security.yaml\nsecurity:\n    # ...\n\n    password_hashers:\n        # Use your user class name here\n        App\\Entity\\User:\n            algorithm: plaintext # disable hashing (only do this in tests!)\n\n        # or use the lowest possible values\n        App\\Entity\\User:\n            algorithm: auto # This should be the same value as in config/packages/security.yaml\n            cost: 4 # Lowest possible value for bcrypt\n            time_cost: 3 # Lowest possible value for argon\n            memory_cost: 10 # Lowest possible value for argon\n```\n\n----------------------------------------\n\nTITLE: Basic PHP Request Handling\nDESCRIPTION: Simple PHP code to handle a request parameter, demonstrating lack of input validation and security issues.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/create_framework/http_foundation.rst#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n// framework/index.php\n$name = $_GET['name'];\n\nprintf('Hello %s', $name);\n```\n\n----------------------------------------\n\nTITLE: Implementing Type Validation with XML Configuration in Symfony\nDESCRIPTION: XML configuration example for the Type constraint in Symfony. Shows how to validate properties against specific types including class instances, primitive types, and character type validation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Type.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\Author\">\n        <property name=\"emailAddress\">\n            <constraint name=\"Type\">\n                <option name=\"type\">Symfony\\Component\\Mime\\Address</option>\n            </constraint>\n        </property>\n        <property name=\"firstName\">\n            <constraint name=\"Type\">\n                <option name=\"type\">string</option>\n            </constraint>\n        </property>\n        <property name=\"age\">\n            <constraint name=\"Type\">\n                <option name=\"type\">integer</option>\n                <option name=\"message\">The value {{ value }} is not a valid {{ type }}.</option>\n            </constraint>\n        </property>\n        <property name=\"accessCode\">\n            <constraint name=\"Type\">\n                <option name=\"type\">\n                    <value>alpha</value>\n                    <value>digit</value>\n                </option>\n            </constraint>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Applying Form Themes Globally in XML Configuration\nDESCRIPTION: Configuration for applying form themes globally to all forms in the application using XML format. Sets the twig:form-theme configuration element.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/form_themes.rst#2025-04-22_snippet_15\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/twig.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:twig=\"http://symfony.com/schema/dic/twig\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/twig https://symfony.com/schema/dic/twig/twig-1.0.xsd\">\n\n    <twig:config>\n        <twig:form-theme>form/my_theme.html.twig</twig:form-theme>\n        <!-- ... -->\n    </twig:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Basic Symfony Environment Configuration\nDESCRIPTION: Shows the default structure of a Symfony .env file containing the application environment and secret key.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/quick_tour/the_architecture.rst#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n# .env\n###> symfony/framework-bundle ###\nAPP_ENV=dev\nAPP_SECRET=cc86c7ca937636d5ddf1b754beb22a10\n###< symfony/framework-bundle ###\n```\n\n----------------------------------------\n\nTITLE: Configuring Url Constraint with TLD Requirement using XML\nDESCRIPTION: Configures validation for the `App\\Entity\\Website` entity using XML. Defines a constraint mapping where the `homepageUrl` property has an `Url` constraint applied. The `requireTld` option is set to `true` and a custom `tldMessage` ('Add at least one TLD to the {{ value }} URL.') is specified using the `<option>` tag. This configuration is usually located in `config/validator/validation.xml`.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Url.rst#2025-04-22_snippet_18\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\Website\">\n        <property name=\"homepageUrl\">\n            <constraint name=\"Url\">\n                <option name=\"requireTld\">true</option>\n                <option name=\"tldMessage\">Add at least one TLD to the {{ value }} URL.</option>\n            </constraint>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Disabling Specific Workflow Events\nDESCRIPTION: Example of how to disable specific workflow events when applying a transition.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/workflow.rst#2025-04-22_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Entity\\BlogPost;\nuse Symfony\\Component\\Workflow\\Exception\\LogicException;\n\n$post = new BlogPost();\n\n$workflow = $this->container->get('workflow.blog_publishing');\n\ntry {\n    $workflow->apply($post, 'to_review', [\n        Workflow::DISABLE_ANNOUNCE_EVENT => true,\n        Workflow::DISABLE_LEAVE_EVENT => true,\n    ]);\n} catch (LogicException $exception) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Attributes to Interfaces and Implementations (PHP)\nDESCRIPTION: This example demonstrates how to apply the #[WithHttpStatus] attribute directly to an interface, then have a class implement it for status code mapping. Supported in Symfony 7.1+; helps establish shared exception handling policies across multiple custom exception classes.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_39\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Exception;\\n\\nuse Symfony\\Component\\HttpKernel\\Attribute\\WithHttpStatus;\\n\\n#[WithHttpStatus(422)]\\ninterface CustomExceptionInterface\\n{\\n}\\n\\nclass CustomException extends \\Exception implements CustomExceptionInterface\\n{\\n}\n```\n\n----------------------------------------\n\nTITLE: Marking Dockerfile Recipe Insertion - Dockerfile - Text\nDESCRIPTION: Indicates recipe-managed sections in the Dockerfile for automated configuration updates by Symfony Flex recipes. The template comments are required in the Dockerfile root for recipes to inject necessary configuration changes. No dependencies are required other than using Symfony Flex with Docker integrations. This does not execute code but demarcates regions for automated merging of Docker-related configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/docker.rst#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n###> recipes ###\\n###< recipes ###\n```\n\n----------------------------------------\n\nTITLE: Retrieving Called and Not Called Listeners with TraceableEventDispatcher in PHP\nDESCRIPTION: This snippet illustrates how to inspect the results of event dispatching after the application logic involving the `traceableEventDispatcher` has executed. The `getCalledListeners` method returns an array detailing the event listeners that were actually invoked. Conversely, the `getNotCalledListeners` method returns an array of registered listeners that were not triggered during the dispatch process.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/event_dispatcher/traceable_dispatcher.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// ...\n\n$calledListeners = $traceableEventDispatcher->getCalledListeners();\n$notCalledListeners = $traceableEventDispatcher->getNotCalledListeners();\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom Entry Point in Symfony Security XML\nDESCRIPTION: This XML configuration snippet demonstrates how to set the custom `AuthenticationEntryPoint` class as the entry point for the `main` firewall using XML configuration (`security.xml`). It achieves the same result as the YAML configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/access_denied_handler.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/security.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<srv:container xmlns=\"http://symfony.com/schema/dic/security\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:srv=\"http://symfony.com/schema/dic/services\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <config>\n        <firewall name=\"main\"\n            entry-point=\"App\\Security\\AuthenticationEntryPoint\"\n        >\n            <!-- ... -->\n        </firewall>\n    </config>\n</srv:container>\n```\n\n----------------------------------------\n\nTITLE: Custom switch_user Parameter: Using X-Switch-User Header (PHP)\nDESCRIPTION: Defines the switchUser firewall configuration to use the 'X-Switch-User' parameter by chaining the ->parameter('X-Switch-User') method in a PHP config file. This sample is for config/packages/security.php and makes the firewall respond to requests containing this header.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/impersonating_user.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/security.php\\nuse Symfony\\Config\\SecurityConfig;\\nreturn static function (SecurityConfig $security): void {\\n    // ...\\n    $security->firewall('main')\\n        // ...\\n        ->switchUser()\\n            ->parameter('X-Switch-User')\\n    ;\\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Translation Extractor Class in PHP\nDESCRIPTION: Example PHP code defining a custom translation extractor class `FooExtractor`. This class implements `Symfony\\Component\\Translation\\Extractor\\ExtractorInterface` and provides methods to extract messages from a directory and set a prefix for new messages.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/dic_tags.rst#2025-04-22_snippet_33\n\nLANGUAGE: php\nCODE:\n```\n// src/Acme/DemoBundle/Translation/FooExtractor.php\nnamespace Acme\\DemoBundle\\Translation;\n\nuse Symfony\\Component\\Translation\\Extractor\\ExtractorInterface;\nuse Symfony\\Component\\Translation\\MessageCatalogue;\n\nclass FooExtractor implements ExtractorInterface\n{\n    protected string $prefix;\n\n    /**\n     * Extracts translation messages from a template directory to the catalog.\n     */\n    public function extract(string $directory, MessageCatalogue $catalog): void\n    {\n        // ...\n    }\n\n    /**\n     * Sets the prefix that should be used for new found messages.\n     */\n    public function setPrefix(string $prefix): void\n    {\n        $this->prefix = $prefix;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Login Redirect and Failure Query Parameters (Text Example)\nDESCRIPTION: This text snippet demonstrates a URL with custom 'go_to' and 'back_to' query parameters, reflecting the earlier configuration for target and failure paths in Symfony firewall login forms. Shows how parameter customization appears in a real authentication request. No dependencies; for documentation/context only.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/form_login.rst#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nhttp://example.com/some/path?go_to=/dashboard&back_to=/forgot-password\n```\n\n----------------------------------------\n\nTITLE: Time Formatting Examples in Symfony Console\nDESCRIPTION: Shows various examples of formatting time durations from seconds to human-readable format.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/helpers/formatterhelper.rst#2025-04-22_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nHelper::formatTime(0.001);         // 1 ms\nHelper::formatTime(42);            // 42 s\nHelper::formatTime(125);           // 2 min\nHelper::formatTime(125, 2);        // 2 min, 5 s\nHelper::formatTime(172799, 4);     // 1 d, 23 h, 59 min, 59 s\nHelper::formatTime(172799.056, 5); // 1 d, 23 h, 59 min, 59 s, 56 ms\n```\n\n----------------------------------------\n\nTITLE: Using Plural Forms in Symfony Translations with PHP\nDESCRIPTION: Demonstrates how to use the plural forms in Symfony translations using PHP. The example shows translating a message about the number of apples.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/formats/message_format.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// prints \"There is one apple...\"\\necho $translator->trans('num_of_apples', ['apples' => 1]);\\n\\n// prints \"There are 23 apples!\"\\necho $translator->trans('num_of_apples', ['apples' => 23]);\n```\n\n----------------------------------------\n\nTITLE: Accessing Workflow Metadata in a Flash Message\nDESCRIPTION: This PHP snippet demonstrates how to access transition metadata and use it in a flash message within a Symfony controller.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/workflow.rst#2025-04-22_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n// $transition = ...; (an instance of Transition)\n\n// $workflow is an injected Workflow instance\n$title = $workflow->getMetadataStore()->getMetadata('title', $transition);\n$this->addFlash('info', \"You have successfully applied the transition with title: '$title'\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Couchbase Connection with Single DSN in PHP\nDESCRIPTION: This snippet shows how to create and configure a Couchbase Collection instance using a single Data Source Name (DSN) string. It demonstrates the use of the createConnection helper method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/cache/adapters/couchbasecollection_adapter.rst#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Cache\\Adapter\\CouchbaseCollectionAdapter;\n\n// pass a single DSN string to register a single server with the client\n$client = CouchbaseCollectionAdapter::createConnection(\n    'couchbase://localhost'\n    // the DSN can include config options (pass them as a query string):\n    // 'couchbase://localhost:11210?operationTimeout=10'\n    // 'couchbase://localhost:11210?operationTimeout=10&configTimout=20'\n);\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Routing Loader Service in XML\nDESCRIPTION: XML configuration snippet showing the registration of the `App\\Routing\\CustomLoader` service and applying the `routing.loader` tag. This integrates the custom loader into the Symfony routing system, enabling the application to load routes using the logic defined in `App\\Routing\\CustomLoader`.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/dic_tags.rst#2025-04-22_snippet_28\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"App\\Routing\\CustomLoader\">\n            <tag name=\"routing.loader\"/>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Twig File Name Pattern in XML\nDESCRIPTION: Shows how to set the file_name_pattern option in XML to specify which files should be treated as Twig templates.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/twig.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/twig.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:twig=\"http://symfony.com/schema/dic/twig\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/twig https://symfony.com/schema/dic/twig/twig-1.0.xsd\">\n\n    <twig:config>\n        <twig:file-name-pattern>*.twig</twig:file-name-pattern>\n        <twig:file-name-pattern>specific_file.html</twig:file-name-pattern>\n        <!-- ... -->\n    </twig:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Manually Registering Symfony Extension Class\nDESCRIPTION: This snippet demonstrates how to manually register an extension class in a Symfony bundle when not following naming conventions. It overrides the getContainerExtension() method to return an instance of the custom extension class.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/bundles/extension.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// ...\nuse Acme\\HelloBundle\\DependencyInjection\\UnconventionalExtensionClass;\nuse Symfony\\Component\\DependencyInjection\\Extension\\ExtensionInterface;\n\nclass AcmeHelloBundle extends Bundle\n{\n    public function getContainerExtension(): ?ExtensionInterface\n    {\n        return new UnconventionalExtensionClass();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Remember Me Cookie Options in Symfony\nDESCRIPTION: This YAML configuration snippet shows the available options for customizing the 'Remember Me' cookie in Symfony. It includes settings for cookie name, lifetime, path, domain, security flags, and SameSite attribute.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/remember_me.rst#2025-04-22_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nremember_me:\n    name: REMEMBERME\n    lifetime: 31536000\n    path: /\n    domain: null\n    secure: false\n    httponly: true\n    samesite: null\n```\n\n----------------------------------------\n\nTITLE: Implementing XML Namespace and Validation Methods in Extension (PHP)\nDESCRIPTION: Shows the implementation of `getNamespace()` and `getXsdValidationBasePath()` methods required by `ExtensionInterface`. These methods define the XML namespace for the extension's configuration elements and the path to the XSD schema for validation, respectively.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/dependency_injection/compilation.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\npublic function getXsdValidationBasePath(): string\n{\n    return __DIR__.'/../Resources/config/';\n}\n\npublic function getNamespace(): string\n{\n    return 'http://www.example.com/symfony/schema/';\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Tip Block in reStructuredText for Speaker Advice\nDESCRIPTION: A reStructuredText tip block that suggests starting with local user group talks before moving to conference presentations in one's native language. This formatting creates a visually distinct advice section in the rendered documentation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/contributing/community/speaker-mentoring.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. tip::\n\n    A good first step might be to give a talk at a local user group to a\n    smaller crowd that one knows more intimately. A next step could be to\n    give a talk at a conference in your first language.\n```\n\n----------------------------------------\n\nTITLE: Generating Random Reference Hash for Symfony Flex Recipes using PHP\nDESCRIPTION: Provides a simple PHP command-line script using `bin2hex(random_bytes(20))` to generate a cryptographically secure 40-character hexadecimal string. This string is intended to be used as the value for the `ref` key in Symfony Flex recipe files, ensuring uniqueness and indicating changes to Composer.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/flex_private_recipes.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\necho bin2hex(random_bytes(20));\n```\n\n----------------------------------------\n\nTITLE: Adding npm scripts to package.json for Encore commands\nDESCRIPTION: NPM scripts for running Encore development server, watching for changes, and building for production.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/installation.rst#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n    \"dev-server\": \"encore dev-server\",\n    \"dev\": \"encore dev\",\n    \"watch\": \"encore dev --watch\",\n    \"build\": \"encore production --progress\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Form Theme in Same Template\nDESCRIPTION: Illustrates how to define a form theme directly in the same template that renders the form, importing and renaming blocks from built-in themes to avoid naming conflicts.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/form_themes.rst#2025-04-22_snippet_20\n\nLANGUAGE: html+twig\nCODE:\n```\n{% form_theme form _self %}\n\n{# import a block from the built-in theme and rename it so it doesn't\n   conflict with the same block defined in this template #}\n{% use 'form_div_layout.html.twig' with integer_widget as base_integer_widget %}\n\n{% block integer_widget %}\n    <div class=\"some-custom-class\">\n        {{ block('base_integer_widget') }}\n    </div>\n{% endblock %}\n\n{# ... render the form ... #}\n```\n\n----------------------------------------\n\nTITLE: Controlling Compiler Pass Execution Phase in Symfony\nDESCRIPTION: Demonstrates how to control when a compiler pass is executed during compilation by specifying the pass type when registering it with the container builder.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/dependency_injection/compilation.rst#2025-04-22_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n// ...\n$container->addCompilerPass(\n    new CustomPass(),\n    PassConfig::TYPE_AFTER_REMOVING\n);\n```\n\n----------------------------------------\n\nTITLE: Defining CardScheme Validation in XML\nDESCRIPTION: XML configuration for implementing the CardScheme constraint to validate VISA card numbers in a Transaction entity.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/CardScheme.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\Transaction\">\n        <property name=\"cardNumber\">\n            <constraint name=\"CardScheme\">\n                <option name=\"schemes\">\n                    <value>VISA</value>\n                </option>\n                <option name=\"message\">Your credit card number is invalid.</option>\n            </constraint>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Asset Package Versions in Twig\nDESCRIPTION: The `asset_version` function returns the configured version string for a given asset path, potentially scoped to a specific asset package. This is used internally by the `asset` function or can be called directly if only the version string is needed, typically for cache-busting strategies.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#2025-04-22_snippet_8\n\nLANGUAGE: twig\nCODE:\n```\n{{ asset_version(path, packageName = null) }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Couchbase Connection with Multiple DSNs in PHP\nDESCRIPTION: This snippet demonstrates how to create and configure a Couchbase Collection instance using an array of Data Source Name (DSN) strings to register multiple servers.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/cache/adapters/couchbasecollection_adapter.rst#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Cache\\Adapter\\CouchbaseCollectionAdapter;\n\n// pass an array of DSN strings to register multiple servers with the client\n$client = CouchbaseCollectionAdapter::createConnection([\n    'couchbase://10.0.0.100',\n    'couchbase://10.0.0.101',\n    'couchbase://10.0.0.102',\n    // etc...\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Container Inline Factories in PHP\nDESCRIPTION: Configuration for dumping the service container into a single file using PHP format. This improves performance when using PHP class preloading in PHP 7.4 or newer versions.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/performance.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nreturn function(ContainerConfigurator $container): void {\n    $container->parameters()->set('.container.dumper.inline_factories', true);\n};\n```\n\n----------------------------------------\n\nTITLE: Using autoProvideVariables Method for jQuery\nDESCRIPTION: Alternative approach to autoProvidejQuery() showing how to manually configure autoProvideVariables() to make jQuery globally available.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/legacy-applications.rst#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nEncore\n    // you can use this method to provide other common global variables,\n    // such as '_' for the 'underscore' library\n    .autoProvideVariables({\n        $: 'jquery',\n        jQuery: 'jquery',\n        'window.jQuery': 'jquery',\n    })\n    // ...\n;\n```\n\n----------------------------------------\n\nTITLE: Importing Bootstrap JavaScript in a Symfony Application\nDESCRIPTION: Shows how to require Bootstrap JavaScript in a JavaScript file, including jQuery dependency. Demonstrates both importing the entire Bootstrap library and selective component importing.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/bootstrap.rst#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// app.js\n\nconst $ = require('jquery');\n// this \"modifies\" the jquery module: adding behavior to it\n// the bootstrap module doesn't export/return anything\nrequire('bootstrap');\n\n// or you can include specific pieces\n// require('bootstrap/js/dist/tooltip');\n// require('bootstrap/js/dist/popover');\n\n$(document).ready(function() {\n    $('[data-toggle=\"popover\"]').popover();\n});\n```\n\n----------------------------------------\n\nTITLE: Defining an Extension Alias in PHP\nDESCRIPTION: Implements the `getAlias()` method in an extension class. This alias (`acme_demo` in this case) is used to identify configuration sections in files (like YAML or XML) that should be processed by this specific extension.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/dependency_injection/compilation.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// ...\n\nclass AcmeDemoExtension implements ExtensionInterface\n{\n    // ...\n\n    public function getAlias(): string\n    {\n        return 'acme_demo';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Couchbase Connection with Multiple Servers in Single DSN in PHP\nDESCRIPTION: This snippet shows how to create and configure a Couchbase Collection instance using a single DSN string that defines multiple servers using a specific syntax.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/cache/adapters/couchbasecollection_adapter.rst#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Cache\\Adapter\\CouchbaseCollectionAdapter;\n\n// a single DSN can define multiple servers using the following syntax:\n// host[hostname-or-IP:port] (where port is optional). Sockets must include a trailing ':'\n$client = CouchbaseCollectionAdapter::createConnection(\n    'couchbase:?host[localhost]&host[localhost:12345]'\n);\n```\n\n----------------------------------------\n\nTITLE: Using ArrayAccess API with GenericEvent Arguments\nDESCRIPTION: Shows how to pass and process arguments using the ArrayAccess API interface with GenericEvent, including argument initialization and manipulation in a listener.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/event_dispatcher/generic_event.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\EventDispatcher\\GenericEvent;\n\n$event = new GenericEvent(\n    $subject,\n    ['type' => 'foo', 'counter' => 0]\n);\n$dispatcher->dispatch($event, 'foo');\n\nclass FooListener\n{\n    public function handler(GenericEvent $event): void\n    {\n        if (isset($event['type']) && 'foo' === $event['type']) {\n            // ... do something\n        }\n\n        $event['counter']++;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ULID Validation with XML in Symfony\nDESCRIPTION: Example of configuring the ULID validation constraint using XML configuration. This validates that the identifier property in the File entity contains a valid ULID.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Ulid.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\File\">\n        <property name=\"identifier\">\n            <constraint name=\"Ulid\"/>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Configuring Trimmable Answers in Symfony Console - PHP\nDESCRIPTION: This PHP snippet disables automatic trimming of user input when prompting a Console question using Symfony's Question helper. Requires symfony/console, and InputInterface/OutputInterface dependencies. The key parameter is setTrimmable(false); if the user inputs extra spaces, those spaces are preserved in the value variable.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/helpers/questionhelper.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Console\\Question\\Question;\n\n// ...\npublic function execute(InputInterface $input, OutputInterface $output): int\n{\n    // ...\n    $helper = $this->getHelper('question');\n\n    $question = new Question('What is the name of the child?');\n    $question->setTrimmable(false);\n    // if the users inputs 'elsa ' it will not be trimmed and you will get 'elsa ' as value\n    $name = $helper->ask($input, $output, $question);\n\n    // ... do something with the name\n\n    return Command::SUCCESS;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Couchbase Connection Options in PHP\nDESCRIPTION: This snippet demonstrates how to create and configure a Couchbase Collection instance with additional options using an associative array of key-value pairs.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/cache/adapters/couchbasecollection_adapter.rst#2025-04-22_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Cache\\Adapter\\CouchbaseCollectionAdapter;\n\n$client = CouchbaseCollectionAdapter::createConnection(\n    // a DSN string or an array of DSN strings\n    [],\n\n    // associative array of configuration options\n    [\n        'username' => 'xxxxxx',\n        'password' => 'yyyyyy',\n        'configTimeout' => '100',\n    ]\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Asset Versioning Strategies in XML\nDESCRIPTION: XML configuration for complex asset versioning scenarios with multiple packages. Shows how to set default strategy and override it for specific packages.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_19\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/framework.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <framework:config>\n        <framework:assets version-strategy=\"app.asset.my_versioning_strategy\">\n            <!-- this package removes any versioning (its assets won't be versioned) -->\n            <framework:package\n                name=\"foo_package\"\n                version=\"null\"/>\n            <!-- this package uses its own strategy (the default strategy is ignored) -->\n            <framework:package\n                name=\"bar_package\"\n                version-strategy=\"app.asset.another_version_strategy\"/>\n            <!-- this package inherits the default strategy -->\n            <framework:package\n                name=\"baz_package\"\n                base_path=\"/images\"/>\n        </framework:assets>\n    </framework:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Customizing URL Validation Error Message with XML in Symfony\nDESCRIPTION: XML configuration example for customizing the error message of a URL validation constraint in Symfony.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Url.rst#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\Author\">\n        <property name=\"bioUrl\">\n            <constraint name=\"Url\">\n                <option name=\"message\">The url \"{{ value }}\" is not a valid url.</option>\n            </constraint>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Executing a Symfony Console Application with a Custom Default Command (Terminal)\nDESCRIPTION: This terminal command executes the PHP application script. Because a default command (`HelloWorldCommand`) was set in the script, running `php application.php` without arguments invokes that specific command.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/changing_default_command.rst#2025-04-22_snippet_2\n\nLANGUAGE: terminal\nCODE:\n```\n$ php application.php\n```\n\n----------------------------------------\n\nTITLE: Defining Symfony 2 Dependencies in composer.json\nDESCRIPTION: An example of Composer dependency constraints that limit a bundle to Symfony 2 components. These constraints prevent the bundle from being used with Symfony 3 applications.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/bundles.rst#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"require\": {\n        \"symfony/framework-bundle\": \"~2.7\",\n        \"symfony/finder\": \"~2.7\",\n        \"symfony/validator\": \"~2.7\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents in reStructuredText for Symfony Community Documentation\nDESCRIPTION: This snippet defines a table of contents using reStructuredText syntax. It includes sections for releases, review comments, reviews, mentoring, and speaker mentoring, with a maximum depth of 2 levels.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/contributing/community/index.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :maxdepth: 2\n\n    releases\n    review-comments\n    reviews\n    mentoring\n    speaker-mentoring\n```\n\n----------------------------------------\n\nTITLE: Serializing a Symfony Mime Email Object (PHP)\nDESCRIPTION: Demonstrates using PHP's `serialize()` function to convert a `Symfony\\Component\\Mime\\Email` object into a string representation. This is useful for storing the email state or passing it through systems like message queues before sending.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/mime.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$email = (new Email())\n    ->from('fabien@symfony.com')\n    // ...\n;\n\n$serializedEmail = serialize($email);\n```\n\n----------------------------------------\n\nTITLE: Adding Browserslist Configuration to package.json\nDESCRIPTION: This JSON snippet shows how to add a browserslist configuration to the package.json file, which is used by tools like autoprefixer to determine which browser versions to support.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/postcss.rst#2025-04-22_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n  {\n+  \"browserslist\": [\n+    \"defaults\"\n+  ]\n  }\n```\n\nLANGUAGE: diff\nCODE:\n```\n  {\n+  \"browserslist\": [\n+    \"> 0.5%\",\n+    \"last 2 versions\",\n+    \"Firefox ESR\",\n+    \"not dead\"\n+  ]\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring container.preload Tag in YAML\nDESCRIPTION: YAML configuration example for using the container.preload tag to specify classes for PHP preloading.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/dic_tags.rst#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n    App\\SomeNamespace\\SomeService:\n        tags:\n            - { name: 'container.preload', class: 'App\\SomeClass' }\n            - { name: 'container.preload', class: 'App\\Some\\OtherClass' }\n            # ...\n```\n\n----------------------------------------\n\nTITLE: JavaScript Module Import Example\nDESCRIPTION: Shows how to import jQuery and a custom module into the main application file.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/simple-example.rst#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// assets/app.js\n// ...\n\n// loads the jquery package from node_modules\nimport $ from 'jquery';\n\n// import the function from greet.js (the .js extension is optional)\n// ./ (or ../) means to look for a local file\nimport greet from './greet';\n\n$(document).ready(function() {\n    $('body').prepend('<h1>'+greet('jill')+'</h1>');\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Form Options to Disable Validation in Symfony PHP\nDESCRIPTION: This code snippet demonstrates how to configure a Symfony form to disable validation by setting the 'validation_groups' option to false. It uses the OptionsResolver to set default options for the form.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/disabling_validation.rst#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\OptionsResolver\\OptionsResolver;\n\npublic function configureOptions(OptionsResolver $resolver): void\n{\n    $resolver->setDefaults([\n        'validation_groups' => false,\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Approach for Version Compatibility with Kernel Version\nDESCRIPTION: An example of the incorrect approach to support both Symfony 2.x and 3.x by checking the Kernel version. This approach is not recommended.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/bundles.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nif (Kernel::VERSION_ID < 20800) {\n    // code for Symfony 2.x\n} else {\n    // code for Symfony 3.x\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Edge Side Includes (ESI) in Symfony Framework (YAML)\nDESCRIPTION: This YAML snippet enables Edge Side Includes (ESI) functionality in the Symfony framework, which allows partial page caching on reverse proxies. The 'esi: true' setting activates the ESI listener for the application. Requires the framework bundle and a reverse proxy that supports ESI (e.g., Varnish or Symfony's HttpCache component).\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/framework.yaml\\nframework:\\n    esi: true\n```\n\n----------------------------------------\n\nTITLE: Implementing a Token-Authenticated Controller in Symfony\nDESCRIPTION: A controller that implements the TokenAuthenticatedController interface, marking it as requiring token authentication. The implementation signals to event subscribers that this controller needs authentication.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/event_dispatcher.rst#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Controller;\n\nuse App\\Controller\\TokenAuthenticatedController;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass FooController extends AbstractController implements TokenAuthenticatedController\n{\n    // An action that needs authentication\n    public function bar(): Response\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ISSN Constraint in XML for Symfony Validation\nDESCRIPTION: Illustrates the XML configuration for applying the ISSN validation constraint in Symfony's validation schema.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Issn.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\Journal\">\n        <property name=\"issn\">\n            <constraint name=\"Issn\"/>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Escaping Percent Signs in YAML Parameters\nDESCRIPTION: Shows how to escape percent signs in parameter values in YAML configuration to prevent them from being interpreted as parameter references.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration.rst#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nparameters:\n    # Parsed as 'https://symfony.com/?foo=%s&amp;bar=%d'\n    url_pattern: 'https://symfony.com/?foo=%%s&amp;bar=%%d'\n```\n\n----------------------------------------\n\nTITLE: Expected Output of Custom Default Command (Text)\nDESCRIPTION: This shows the plain text output expected when running the Symfony Console application after setting the `HelloWorldCommand` as the default command. The output comes directly from the `execute` method of the custom command.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/changing_default_command.rst#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nHello World\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents for Diversity Initiative in reStructuredText\nDESCRIPTION: This code snippet creates a table of contents for the Diversity Initiative documentation using reStructuredText syntax. It sets the maximum depth to 2 and includes links to governance and further reading sections.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/contributing/diversity/index.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :maxdepth: 2\n\n    governance\n    further_reading\n```\n\n----------------------------------------\n\nTITLE: Configuring DateType Field with Choice Widget in PHP\nDESCRIPTION: Example of adding a DateType field to a Symfony form builder with a 'choice' widget. This renders the date as three separate dropdown fields for year, month, and day.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/date.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\DateType;\n// ...\n\n$builder->add('publishedAt', DateType::class, [\n    'widget' => 'choice',\n]);\n```\n\n----------------------------------------\n\nTITLE: Recording Console Sessions with Asciinema\nDESCRIPTION: Command to record a console session using Asciinema with bash as the shell. Creates a recording.cast file.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/_images/sources/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ asciinema rec -c bash recording.cast\n```\n\n----------------------------------------\n\nTITLE: Curl Command to Retrieve API Headers\nDESCRIPTION: Demonstrates how to use curl to get the headers of an API response, which includes the X-Debug-Token-Link for accessing the Symfony profiler and obtaining a stack trace.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/contributing/code/stack_trace.rst#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ curl --head http://localhost:8000/api/posts/1\n```\n\n----------------------------------------\n\nTITLE: Including Bootstrap 5 Assets in Twig Template\nDESCRIPTION: Basic template setup for including Bootstrap 5 CSS and JavaScript files in a Symfony Twig template.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/bootstrap5.rst#2025-04-22_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{# templates/base.html.twig #}\n\n{# beware that the blocks in your template may be named different #}\n{% block stylesheets %}\n    <!-- Copy CSS from https://getbootstrap.com/docs/5.0/getting-started/introduction/#css -->\n{% endblock %}\n{% block javascripts %}\n    <!-- Copy JavaScript from https://getbootstrap.com/docs/5.0/getting-started/introduction/#js -->\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Symfony Framework (PHP)\nDESCRIPTION: This PHP configuration file sets up basic Symfony framework settings, including the secret key and profiler configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/micro_kernel_trait.rst#2025-04-22_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\n// config/framework.php\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework): void {\n    $framework\n        ->secret('SOME_SECRET')\n        ->profiler()\n            ->onlyExceptions(false)\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Removing Emojis from Text in PHP\nDESCRIPTION: PHP code demonstrating how to use EmojiTransliterator with the 'strip' locale to remove all emojis from a string.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/emoji.rst#2025-04-22_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\nuse Symfony\\Component\\Emoji\\EmojiTransliterator;\n\n$transliterator = EmojiTransliterator::create('strip');\n$transliterator->transliterate('🎉Hey!🥳 🎁Happy Birthday!🎁');\n// => 'Hey! Happy Birthday!'\n```\n\n----------------------------------------\n\nTITLE: Enabling PostCSS Loader in Webpack Encore Configuration\nDESCRIPTION: This snippet shows how to enable the PostCSS loader in the webpack.config.js file using Encore's enablePostCssLoader() method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/postcss.rst#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n  // webpack.config.js\n\n  Encore\n      // ...\n+     .enablePostCssLoader()\n  ;\n```\n\n----------------------------------------\n\nTITLE: Configuring Twig Template Paths in YAML\nDESCRIPTION: Configuration for defining additional template directories in Twig using YAML format. Specifies paths for email templates and backend templates with optional namespaces.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/twig.rst#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/twig.yaml\ntwig:\n    # ...\n    paths:\n        'email/default/templates': ~\n        'backend/templates': 'admin'\n```\n\n----------------------------------------\n\nTITLE: Asking for Hidden Input in Symfony Console\nDESCRIPTION: Shows how to use the askHidden() method to prompt for sensitive information without displaying the input, with optional validation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/console/style.rst#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$io->askHidden('What is your password?');\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$io->askHidden('What is your password?', function (string $password): string {\n    if (empty($password)) {\n        throw new \\RuntimeException('Password cannot be empty.');\n    }\n\n    return $password;\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Regex Constraint with PHP Attributes\nDESCRIPTION: Example of using the Regex constraint with PHP attributes to validate a description field starts with a word character.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Regex.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Author.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Author\n{\n    #[Assert\\Regex('/^\\w+/')]\n    protected string $description;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PSR-16 Cache Interface Example\nDESCRIPTION: Example class showing a constructor that requires a PSR-16 cache implementation via CacheInterface.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/cache/psr6_psr16_adapters.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\SimpleCache\\CacheInterface;\n\n// just a made-up class for the example\nclass GitHubApiClient\n{\n    // ...\n\n    // this requires a PSR-16 cache object\n    public function __construct(CacheInterface $cache)\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Pull Request Todo List Template\nDESCRIPTION: Example todo list format for incomplete pull requests\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/contributing/code/pull_requests.rst#2025-04-22_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n- [ ] fix the tests as they have not been updated yet\n- [ ] submit changes to the documentation\n- [ ] document the BC breaks\n```\n\n----------------------------------------\n\nTITLE: Using Callback with Choice Constraint (PHP)\nDESCRIPTION: Example of using a callback method to provide choices for the Choice constraint using PHP code.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Choice.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// src/EntityAuthor.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass Author\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('genre', new Assert\\Choice(\n            callback: 'getGenres',\n        ));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced PR Merging with Branch Switching\nDESCRIPTION: Example of merging a PR into a different branch than originally targeted using the gh tool's -s option\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/_build/maintainer_guide.rst#2025-04-22_snippet_2\n\nLANGUAGE: terminal\nCODE:\n```\n# e.g. this PR was sent against 'master', but it's merged in '4.4'\n$ gh merge 11160 -s 4.4\n```\n\n----------------------------------------\n\nTITLE: Configuring Fragment Listener in YAML\nDESCRIPTION: YAML configuration to enable the fragment listener required for handling ESI controller references, specifying the path where fragment URLs will be routed.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/http_cache/esi.rst#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/framework.yaml\nframework:\n    # ...\n    fragments: { path: /_fragment }\n```\n\n----------------------------------------\n\nTITLE: Implementing WordCount Using PHP ClassMetadata\nDESCRIPTION: Example showing how to configure WordCount constraint using PHP ClassMetadata approach.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/WordCount.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/BlogPostDTO.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass BlogPostDTO\n{\n    // ...\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata): void\n    {\n        $metadata->addPropertyConstraint('content', new Assert\\WordCount(\n            min: 100,\n            max: 200,\n        ));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependency Injection Container for Symfony Framework in PHP\nDESCRIPTION: This snippet demonstrates how to set up a dependency injection container for the framework. It shows registration of various services like routing, event dispatching, and the framework itself.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/create_framework/dependency_injection.rst#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n// example.com/src/container.php\nuse Simplex\\Framework;\nuse Symfony\\Component\\DependencyInjection;\nuse Symfony\\Component\\DependencyInjection\\Reference;\nuse Symfony\\Component\\EventDispatcher;\nuse Symfony\\Component\\HttpFoundation;\nuse Symfony\\Component\\HttpKernel;\nuse Symfony\\Component\\Routing;\n\n$container = new DependencyInjection\\ContainerBuilder();\n$container->register('context', Routing\\RequestContext::class);\n$container->register('matcher', Routing\\Matcher\\UrlMatcher::class)\n    ->setArguments([$routes, new Reference('context')])\n;\n$container->register('request_stack', HttpFoundation\\RequestStack::class);\n$container->register('controller_resolver', HttpKernel\\Controller\\ControllerResolver::class);\n$container->register('argument_resolver', HttpKernel\\Controller\\ArgumentResolver::class);\n\n$container->register('listener.router', HttpKernel\\EventListener\\RouterListener::class)\n    ->setArguments([new Reference('matcher'), new Reference('request_stack')])\n;\n$container->register('listener.response', HttpKernel\\EventListener\\ResponseListener::class)\n    ->setArguments(['UTF-8'])\n;\n$container->register('listener.exception', HttpKernel\\EventListener\\ErrorListener::class)\n    ->setArguments(['Calendar\\Controller\\ErrorController::exception'])\n;\n$container->register('dispatcher', EventDispatcher\\EventDispatcher::class)\n    ->addMethodCall('addSubscriber', [new Reference('listener.router')])\n    ->addMethodCall('addSubscriber', [new Reference('listener.response')])\n    ->addMethodCall('addSubscriber', [new Reference('listener.exception')])\n;\n$container->register('framework', Framework::class)\n    ->setArguments([\n        new Reference('dispatcher'),\n        new Reference('controller_resolver'),\n        new Reference('request_stack'),\n        new Reference('argument_resolver'),\n    ])\n;\n\nreturn $container;\n```\n\n----------------------------------------\n\nTITLE: Defining Route Imports Using XML in Symfony - XML\nDESCRIPTION: This XML snippet shows multiple ways to import routing resources in a Symfony configuration file. Imports may specify resources from bundles, controller attribute scanning, directories, or specific classes. Each <import> element includes attributes such as 'resource' and optionally 'type' or child elements for 'path' and 'namespace'. The XML file must conform to the Symfony Routing schema as declared at the beginning; all imports should correspond to valid files or directories. This approach requires Symfony's routing component and a working XML schema setup.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/routing/custom_route_loader.rst#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\\n<routes xmlns=\\\"http://symfony.com/schema/routing\\\"\\n    xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n    xsi:schemaLocation=\\\"http://symfony.com/schema/routing\\n        https://symfony.com/schema/routing/routing-1.0.xsd\\\">\\n\\n    <!-- loads routes from the given routing file stored in some bundle -->\\n    <import resource=\\\"@AcmeBundle/Resources/config/routing.yaml\\\"/>\\n\\n    <!-- loads routes from the PHP attributes of the controllers found in the given PSR-4 namespace root -->\\n    <import type=\\\"attribute\\\">\\n        <resource path=\\\"../src/Controller/\\\" namespace=\\\"App\\\\Controller\\\"/>\\n    </import>\\n\\n    <!-- loads routes from the PHP attributes of the controllers found in that directory -->\\n    <import resource=\\\"../src/Controller/\\\" type=\\\"attribute\\\"/>\\n\\n    <!-- loads routes from the PHP attributes of the given class -->\\n    <import resource=\\\"App\\\\Controller\\\\MyController\\\" type=\\\"attribute\\\"/>\\n\\n    <!-- loads routes from the YAML or XML files found in that directory -->\\n    <import resource=\\\"../legacy/routing/\\\" type=\\\"directory\\\"/>\\n\\n    <!-- loads routes from the YAML or XML files found in some bundle directory -->\\n    <import resource=\\\"@AcmeOtherBundle/Resources/config/routing/\\\" type=\\\"directory\\\"/>\\n</routes>\n```\n\n----------------------------------------\n\nTITLE: Channel Configuration Examples in YAML\nDESCRIPTION: YAML examples showing different ways to specify channel configurations\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/logging/channels_handlers.rst#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nchannels: ~    # Include all the channels\n\nchannels: foo  # Include only channel 'foo'\nchannels: '!foo' # Include all channels, except 'foo'\n\nchannels: [foo, bar]   # Include only channels 'foo' and 'bar'\nchannels: ['!foo', '!bar'] # Include all channels, except 'foo' and 'bar'\n```\n\n----------------------------------------\n\nTITLE: Default Marshaller with igbinary\nDESCRIPTION: Configuration of DefaultMarshaller using igbinary serialization for improved performance.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/cache/adapters/redis_adapter.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$marshaller = new DefaultMarshaller(true);\n\n$cache = new RedisAdapter($redis, 'optimized_namespace', 3600, $marshaller);\n\n$item = $cache->getItem('optimized_key');\n$item->set(['data' => 'optimized_data']);\n$cache->save($item);\n```\n\n----------------------------------------\n\nTITLE: DSN Format Specification\nDESCRIPTION: Defines the required format for Memcached Data Source Name (DSN) strings.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/cache/adapters/memcached_adapter.rst#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nmemcached://[user:pass@][ip|host|socket[:port]][?weight=int]\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Email Transports in XML\nDESCRIPTION: XML configuration for setting up multiple mailer transports with environment variables.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_63\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n    <!-- ... -->\n    <framework:config>\n        <framework:mailer>\n            <framework:transport name=\"main\">%env(MAILER_DSN)%</framework:transport>\n            <framework:transport name=\"alternative\">%env(MAILER_DSN_IMPORTANT)%</framework:transport>\n        </framework:mailer>\n    </framework:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Memory Settings\nDESCRIPTION: Redis memory configuration settings that specify the maximum memory limit and the eviction policy for handling memory constraints.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/cache/adapters/redis_adapter.rst#2025-04-22_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\nmaxmemory 100mb\nmaxmemory-policy allkeys-lru\n```\n\n----------------------------------------\n\nTITLE: Setting Column Max Width\nDESCRIPTION: Demonstrates how to set maximum column widths to wrap long content across multiple rows.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/helpers/table.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$table->setColumnMaxWidth(0, 5);\n$table->setColumnMaxWidth(1, 10);\n$table->render();\n```\n\n----------------------------------------\n\nTITLE: Using Custom Routing Loader in YAML Routes Configuration\nDESCRIPTION: YAML configuration to use the custom 'extra' route loader. The resource value is a dot, as it's not significant for this loader, while the type matches what the ExtraLoader supports.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/routing/custom_route_loader.rst#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n# config/routes.yaml\napp_extra:\n    resource: .\n    type: extra\n```\n\n----------------------------------------\n\nTITLE: Configuring Cascade Constraint with YAML\nDESCRIPTION: Shows how to apply the Cascade constraint to a BookCollection entity using YAML configuration in the validation.yaml file.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Cascade.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\BookCollection:\n    constraints:\n        - Cascade: ~\n```\n\n----------------------------------------\n\nTITLE: Applying Bootstrap 5 Theme to Individual Form in Twig\nDESCRIPTION: Example of applying Bootstrap 5 form theme to a specific form in a Twig template\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/bootstrap5.rst#2025-04-22_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{# ... #}\n{# this tag only applies to the forms defined in this template #}\n{% form_theme form 'bootstrap_5_layout.html.twig' %}\n\n{% block body %}\n    <h1>User Sign Up:</h1>\n    {{ form(form) }}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Configuring CIDR Validation with XML\nDESCRIPTION: Example of using XML configuration to apply CIDR validation to a property in a Symfony entity. This demonstrates how to define validation constraints in an XML format.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Cidr.rst#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/validator/validation.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<constraint-mapping xmlns=\"http://symfony.com/schema/dic/constraint-mapping\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/constraint-mapping https://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd\">\n\n    <class name=\"App\\Entity\\NetworkSettings\">\n        <property name=\"cidrNotation\">\n            <constraint name=\"Cidr\"/>\n        </property>\n    </class>\n</constraint-mapping>\n```\n\n----------------------------------------\n\nTITLE: Including Reference Document Map in RST\nDESCRIPTION: This directive includes the content of the '/reference/map.rst.inc' file, which likely contains a structured list or table of contents for Symfony reference documents.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/index.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: /reference/map.rst.inc\n```\n\n----------------------------------------\n\nTITLE: Stopwatch Performance Measurement\nDESCRIPTION: Measures execution time and memory usage of template code\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#2025-04-22_snippet_67\n\nLANGUAGE: twig\nCODE:\n```\n{% stopwatch 'event_name' %}...{% endstopwatch %}\n```\n\n----------------------------------------\n\nTITLE: Comparing Expression Functions with IS_AUTHENTICATED_* Roles in PHP\nDESCRIPTION: Illustrates the difference between using `IS_AUTHENTICATED_REMEMBERED` / `IS_AUTHENTICATED_FULLY` roles directly with `isGranted()` and using the `is_remember_me()` / `is_fully_authenticated()` functions within a security expression. While `isGranted('IS_AUTHENTICATED_REMEMBERED')` is true for both remember-me and fully authenticated users, the expression `is_remember_me() or is_fully_authenticated()` achieves the same overall result but with distinct functions for each state. Requires Symfony's Security and ExpressionLanguage components.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/expressions.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\ExpressionLanguage\\Expression;\nuse Symfony\\Component\\Security\\Core\\Authorization\\AuthorizationCheckerInterface;\n// ...\n\npublic function index(AuthorizationCheckerInterface $authorizationChecker): Response\n{\n    $access1 = $authorizationChecker->isGranted('IS_AUTHENTICATED_REMEMBERED');\n\n    $access2 = $authorizationChecker->isGranted(new Expression(\n        'is_remember_me() or is_fully_authenticated()'\n    ));\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Doctrine ORM Pack in Symfony\nDESCRIPTION: Command to install Doctrine ORM package using Composer in a Symfony project\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/doctrine/dbal.rst#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require symfony/orm-pack\n```\n\n----------------------------------------\n\nTITLE: Custom Placeholder Formatting in PHP\nDESCRIPTION: Demonstrates how to customize placeholder formatting for progress indicator output.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/helpers/progressindicator.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nProgressIndicator::setPlaceholderFormatterDefinition(\n    'message',\n    static function (ProgressIndicator $progressIndicator): string {\n        // Return any arbitrary string\n        return 'My custom message';\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Escaped Characters in Double-Quoted YAML Strings\nDESCRIPTION: Example of using double quotes with escaped newline character.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/formats/yaml.rst#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n\"A double-quoted string in YAML\\n\"\n```\n\n----------------------------------------\n\nTITLE: HTML Rendering Reference\nDESCRIPTION: Shows the HTML element type used to render the radio field.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/radio.rst#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\ninput radio\n```\n\n----------------------------------------\n\nTITLE: Configuring Prototype Options in PHP\nDESCRIPTION: Shows how to define prototype options for handling multiple database connections with common configuration using OptionsResolver\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/options_resolver.rst#2025-04-22_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n$resolver->setOptions('connections', function (OptionsResolver $connResolver): void {\n    $connResolver\n        ->setPrototype(true)\n        ->setRequired(['host', 'database'])\n        ->setDefaults(['user' => 'root', 'password' => null]);\n});\n```\n\n----------------------------------------\n\nTITLE: Controller Update for Twig Template Rendering\nDESCRIPTION: Shows how to modify a controller to use Twig templating by extending AbstractController and using the render() method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/quick_tour/flex_recipes.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// src/Controller/DefaultController.php\nnamespace App\\Controller;\n\nuse Symfony\\Component\\Routing\\Attribute\\Route;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\n\nclass DefaultController extends AbstractController\n{\n     #[Route('/hello/{name}', methods: ['GET'])]\n     public function index(string $name): Response\n     {\n        return $this->render('default/index.html.twig', [\n            'name' => $name,\n        ]);\n     }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Failover and Round-Robin Transports in XML\nDESCRIPTION: Example of setting up failover and round-robin transport configurations for the Notifier component using XML.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/notifier.rst#2025-04-22_snippet_23\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/notifier.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony\n        https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <framework:config>\n        <framework:notifier>\n            <!-- Send notifications to Slack and use Telegram if\n                 Slack errored -->\n            <framework:chatter-transport name=\"slack\">\n                %env(SLACK_DSN)% || %env(TELEGRAM_DSN)%\n            </framework:chatter-transport>\n\n            <!-- Send notifications to the next scheduled transport\n                 calculated by round robin -->\n            <framework:chatter-transport name=\"slack\"><![CDATA[\n                %env(SLACK_DSN)% && %env(TELEGRAM_DSN)%\n            ]]></framework:chatter-transport>\n        </framework:notifier>\n    </framework:config>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack with Encore\nDESCRIPTION: Basic Webpack configuration using Symfony Encore, including output path settings and entry point definition.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/simple-example.rst#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// webpack.config.js\nconst Encore = require('@symfony/webpack-encore');\n\nEncore\n    // directory where compiled assets will be stored\n    .setOutputPath('public/build/')\n    // public path used by the web server to access the output path\n    .setPublicPath('/build')\n\n    .addEntry('app', './assets/app.js')\n\n    // uncomment this if you want use jQuery in the following example\n    .autoProvidejQuery()\n;\n```\n\n----------------------------------------\n\nTITLE: Updating Symfony Dependencies using extra.symfony.require\nDESCRIPTION: Shows a diff illustrating the recommended method for managing Symfony dependency versions in projects using Symfony Flex. It involves setting the version constraint for individual `symfony/*` packages to `*` in the `require` section and defining the target Symfony version (e.g., `7.0.*`) centrally under the `extra.symfony.require` key in `composer.json`. This simplifies version management and updates.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/upgrade_major.rst#2025-04-22_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n  {\n      \"...\": \"...\",\n\n      \"require\": {\n-         \"symfony/cache\": \"7.0.*\",\n+         \"symfony/cache\": \"*\",\n-         \"symfony/config\": \"7.0.*\",\n+         \"symfony/config\": \"*\",\n-         \"symfony/console\": \"7.0.*\",\n+         \"symfony/console\": \"*\",\n          \"...\": \"...\",\n      },\n      \"...\": \"...\",\n\n+     \"extra\": {\n+         \"symfony\": {\n+             \"require\": \"7.0.*\"\n+         }\n+     }\n  }\n```\n\n----------------------------------------\n\nTITLE: Form Theme Configuration\nDESCRIPTION: Sets custom form themes for form rendering\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#2025-04-22_snippet_64\n\nLANGUAGE: twig\nCODE:\n```\n{% form_theme form resources %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Login Link Security Options in YAML\nDESCRIPTION: YAML configuration for setting max uses and check_post_only options on the login_link security firewall.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/login_link.rst#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\nsecurity:\n    firewalls:\n        main:\n            login_link:\n                check_route: login_check\n                check_post_only: true\n                max_uses: 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Serializer Normalizers in PHP\nDESCRIPTION: Shows how to configure custom normalizers for specific named serializers using PHP configuration, with various targeting options.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer.rst#2025-04-22_snippet_48\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nuse Symfony\\Component\\Serializer\\Normalizer\\CustomNormalizer;\n\nreturn function(ContainerConfigurator $container) {\n    // ...\n\n    $services->set(CustomNormalizer::class)\n        // prevent this normalizer from being automatically added to the default serializer\n        ->autoconfigure(false)\n\n        // add this normalizer only to a specific named serializer\n        ->tag('serializer.normalizer', ['serializer' => 'api_client1'])\n        // add this normalizer to several named serializers\n        ->tag('serializer.normalizer', ['serializer' => ['api_client1', 'api_client2']])\n        // add this normalizer to all serializers, including the default one\n        ->tag('serializer.normalizer', ['serializer' => '*'])\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Symfony Flex Recipe Index for GitHub Repositories (JSON)\nDESCRIPTION: Specifies the structure of the `index.json` file required for a GitHub-based private Symfony Flex recipe repository. It includes the `recipes` object listing available packages (e.g., `acme/private-bundle`) and their versions (e.g., `[\"1.0\"]`), the repository `branch`, `is_contrib` flag, and `_links` containing templates for repository discovery and recipe retrieval via the GitHub API. Placeholders like `your-github-account-name` and `your-recipes-repository` need to be replaced.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/flex_private_recipes.rst#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"recipes\": {\n        \"acme/private-bundle\": [\n            \"1.0\"\n        ]\n    },\n    \"branch\": \"main\",\n    \"is_contrib\": true,\n    \"_links\": {\n        \"repository\": \"github.com/your-github-account-name/your-recipes-repository\",\n        \"origin_template\": \"{package}:{version}@github.com/your-github-account-name/your-recipes-repository:main\",\n        \"recipe_template\": \"https://api.github.com/repos/your-github-account-name/your-recipes-repository/contents/{package_dotted}.{version}.json\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Success Handler in PHP\nDESCRIPTION: PHP configuration for setting a custom success handler for the login_link security firewall.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/login_link.rst#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/security.php\nuse App\\Security\\Authentication\\AuthenticationSuccessHandler;\nuse Symfony\\Config\\SecurityConfig;\n\nreturn static function (SecurityConfig $security): void {\n    $security->firewall('main')\n        ->loginLink()\n            ->checkRoute('login_check')\n            ->lifetime(600)\n            ->maxUses(1)\n            ->successHandler(AuthenticationSuccessHandler::class)\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Running Symfony Console Commands with Specific Environment\nDESCRIPTION: These bash commands show how to run Symfony console commands using the environment defined in the .env file or overriding it with a specific environment.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration.rst#2025-04-22_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n# Use the environment defined in the .env file\n$ php bin/console command_name\n\n# Ignore the .env file and run this command in production\n$ APP_ENV=prod php bin/console command_name\n```\n\n----------------------------------------\n\nTITLE: Defining Symfony Flex Recipe Index for GitLab Repositories (JSON)\nDESCRIPTION: Specifies the structure of the `index.json` file required for a GitLab-based private Symfony Flex recipe repository. It includes the `recipes` object listing available packages and versions, the repository `branch`, `is_contrib` flag, and `_links` containing templates for repository discovery and recipe retrieval via the GitLab API. Placeholders like `your-gitlab-account-name`, `your-recipes-repository`, and `your-gitlab-project-id` must be replaced with actual values.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/flex_private_recipes.rst#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"recipes\": {\n        \"acme/private-bundle\": [\n            \"1.0\"\n        ]\n    },\n    \"branch\": \"main\",\n    \"is_contrib\": true,\n    \"_links\": {\n        \"repository\": \"gitlab.com/your-gitlab-account-name/your-recipes-repository\",\n        \"origin_template\": \"{package}:{version}@gitlab.com/your-gitlab-account-name/your-recipes-repository:main\",\n        \"recipe_template\": \"https://gitlab.com/api/v4/projects/your-gitlab-project-id/repository/files/{package_dotted}.{version}.json/raw?ref=main\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Controller Results in Twig Templates\nDESCRIPTION: Demonstrates how to embed the results of a controller execution in a Twig template using the render() and controller() functions. This allows for more dynamic content inclusion.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/templates.rst#2025-04-22_snippet_36\n\nLANGUAGE: twig\nCODE:\n```\n{# templates/base.html.twig #}\n\n{# ... #}\n<div id=\"sidebar\">\n    {# if the controller is associated with a route, use the path() or url() functions #}\n    {{ render(path('latest_articles', {max: 3})) }}\n    {{ render(url('latest_articles', {max: 3})) }}\n\n    {# if you don't want to expose the controller with a public URL,\n       use the controller() function to define the controller to execute #}\n    {{ render(controller(\n        'App\\\\Controller\\\\BlogController::recentArticles', {max: 3}\n    )) }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Secret Parameters in Symfony\nDESCRIPTION: Demonstrates setting up secret parameters using JSON files and environment variables.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/env_var_processors.rst#2025-04-22_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nparameters:\n    env(SECRETS_FILE): '/opt/application/.secrets.json'\n    database_password: '%env(key:database_password:json:file:SECRETS_FILE)%'\n```\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\n$container->setParameter('env(SECRETS_FILE)', '/opt/application/.secrets.json');\n$container->setParameter('database_password', '%env(key:database_password:json:file:SECRETS_FILE)%');\n```\n\n----------------------------------------\n\nTITLE: Displaying Error Messages in Symfony Console\nDESCRIPTION: Shows how to use the error() method to display error messages with red background and [ERROR] label.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/console/style.rst#2025-04-22_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n$io->error('Lorem ipsum dolor sit amet');\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$io->error([\n    'Lorem ipsum dolor sit amet',\n    'Consectetur adipiscing elit',\n]);\n```\n\n----------------------------------------\n\nTITLE: LocaleType Usage Example Formats\nDESCRIPTION: Example formats for locale values used in the LocaleType field, showing both language-only and language-country combinations.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/locale.rst#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n\"fr\"      // language only\n\"fr_FR\"   // language_country\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom User Provider in Symfony Security (PHP)\nDESCRIPTION: Configures a custom user provider using Symfony's PHP configuration format. The provider is registered by setting its ID to point to a UserProvider class. Intended to work in conjunction with a custom implementation of UserProvider. Depends on the Symfony\\Config\\SecurityConfig class and the custom provider class.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/user_providers.rst#2025-04-22_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/security.php\\nuse App\\Security\\UserProvider;\\nuse Symfony\\Config\\SecurityConfig;\\n\\nreturn static function (SecurityConfig $security): void {\\n    // ...\\n\\n     $customProvider = $security->provider('your_custom_user_provider')\\n        ->id(UserProvider::class)\\n        // ...\\n    ;\\n};\n```\n\n----------------------------------------\n\nTITLE: Listing Secrets Showing Local Overrides (terminal)\nDESCRIPTION: Displays an example of listing secrets when a local override is in place. The Local Value column shows the override, indicating its precedence over the secret vault value.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/secrets.rst#2025-04-22_snippet_11\n\nLANGUAGE: terminal\nCODE:\n```\n$ php bin/console secrets:list --reveal\n ------------------- ------------- -------------\n  Name                Value         Local Value\n ------------------- ------------- -------------\n  DATABASE_PASSWORD   \"dev value\"   \"root\"\n ------------------- ------------- -------------\n```\n\n----------------------------------------\n\nTITLE: Integrating IssueToNumberTransformer in TaskType Form in PHP\nDESCRIPTION: Updates the TaskType form class to use the custom IssueToNumberTransformer for the 'issue' field. It adds the transformer to the field and sets an invalid_message for validation errors.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/data_transformers.rst#2025-04-22_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n// src/Form/Type/TaskType.php\nnamespace App\\Form\\Type;\n\nuse App\\Form\\DataTransformer\\IssueToNumberTransformer;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\TextareaType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\TextType;\n\n// ...\nclass TaskType extends AbstractType\n{\n    public function __construct(\n        private IssueToNumberTransformer $transformer,\n    ) {\n    }\n\n    public function buildForm(FormBuilderInterface $builder, array $options): void\n    {\n        $builder\n            ->add('description', TextareaType::class)\n            ->add('issue', TextType::class, [\n                // validation message if the data transformer fails\n                'invalid_message' => 'That is not a valid issue number',\n            ]);\n\n        // ...\n\n        $builder->get('issue')\n            ->addModelTransformer($this->transformer);\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Initiating Cache Chain Configuration in Symfony (XML)\nDESCRIPTION: This partial XML configuration snippet shows the beginning of defining cache pools within the Symfony framework configuration, likely intended for setting up a cache chain similar to the YAML example. It includes the necessary XML namespaces and schema locations for Symfony services and framework configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/cache.rst#2025-04-22_snippet_17\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/cache.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n```\n\n----------------------------------------\n\nTITLE: Configuring OIDC User Info with Custom HTTP Client - Symfony Security - PHP\nDESCRIPTION: This PHP snippet demonstrates assigning a custom HTTP client ('oidc.client') to the OIDC user info handler in Symfony Security's firewall configuration. The client must be a valid Symfony service. Use this method-chained setup within config/packages/security.php when custom client features are required.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/access_token.rst#2025-04-22_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/security.php\nuse Symfony\\Config\\SecurityConfig;\n\nreturn static function (SecurityConfig $security) {\n    $security->firewall('main')\n        ->accessToken()\n            ->tokenHandler()\n                ->oidcUserInfo()\n                    ->client('oidc.client')\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Injecting Parameter Value into Configuration Class (PHP)\nDESCRIPTION: Demonstrates modifying the bundle's `Configuration` class to accept a boolean `$debug` value via its constructor. This injected value, representing the resolved state of `kernel.debug`, is then used as the default for the `logging` configuration node, ensuring the actual parameter value (true/false) is used instead of the literal string '%kernel.debug%'.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/using_parameters_in_dic.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\DependencyInjection;\n\nuse Symfony\\Component\\Config\\Definition\\Builder\\TreeBuilder;\nuse Symfony\\Component\\Config\\Definition\\ConfigurationInterface;\n\nclass Configuration implements ConfigurationInterface\n{\n    private bool $debug;\n\n    public function __construct(private bool $debug)\n    {\n    }\n\n    public function getConfigTreeBuilder(): TreeBuilder\n    {\n        $treeBuilder = new TreeBuilder('my_bundle');\n\n        $treeBuilder->getRootNode()\n            ->children()\n                // ...\n                ->booleanNode('logging')->defaultValue($this->debug)->end()\n                // ...\n            ->end()\n        ;\n\n        return $treeBuilder;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Webhook Routing for Mailer (YAML)\nDESCRIPTION: YAML configuration for setting up webhook routing for the Mailer component, using Mailgun as an example provider.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/webhook.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nframework:\n    webhook:\n        routing:\n            mailer_mailgun:\n                service: 'mailer.webhook.request_parser.mailgun'\n                secret: '%env(MAILER_MAILGUN_SECRET)%'\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony Validator Component via Composer\nDESCRIPTION: This command uses Composer, the PHP dependency manager, to require and install the `symfony/validator` package into your project. This makes the Validator component's classes and functionalities available for use.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/validator.rst#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require symfony/validator\n```\n\n----------------------------------------\n\nTITLE: Finding Files by Content (String) with Symfony Finder in PHP\nDESCRIPTION: Illustrates how to find files containing a specific string literal using the `contains()` method. This method searches the content of files.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/finder.rst#2025-04-22_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$finder->files()->contains('lorem ipsum');\n```\n\n----------------------------------------\n\nTITLE: RST Reference Links Definition\nDESCRIPTION: Sphinx/RST format reference link definitions for proxy configuration documentation and Docker compose environment variables.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/symfony_server.rst#2025-04-22_snippet_17\n\nLANGUAGE: rst\nCODE:\n```\n.. _`Proxy settings in Windows`: https://www.dummies.com/computers/operating-systems/windows-10/how-to-set-up-a-proxy-in-windows-10/\n.. _`Proxy settings in macOS`: https://support.apple.com/guide/mac-help/enter-proxy-server-settings-on-mac-mchlp2591/mac\n.. _`Proxy settings in Ubuntu`: https://help.ubuntu.com/stable/ubuntu-help/net-proxy.html.en\n.. _`is treated differently`: https://superuser.com/a/1799209\n.. _`Docker compose CLI env var reference`: https://docs.docker.com/compose/reference/envvars/\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Variables in Twig PHP\nDESCRIPTION: Shows how to define global variables for Twig templates in the PHP configuration file.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/templates.rst#2025-04-22_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/twig.php\nuse Symfony\\Config\\TwigConfig;\n\nreturn static function (TwigConfig $twig): void {\n    // ...\n\n    $twig->global('ga_tracking')->value('UA-xxxxx-x');\n};\n```\n\n----------------------------------------\n\nTITLE: Formatting XML Output with XmlEncoder Context Option in PHP\nDESCRIPTION: This snippet demonstrates using the `XmlEncoder::encode` method with the `xml_format_output` context option set to `true`. This instructs the encoder to produce human-readable, indented XML output instead of a single line.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/serializer/encoders.rst#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$xmlEncoder->encode($data, 'xml', ['xml_format_output' => true]);\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony Notifier Component\nDESCRIPTION: Command to install the Symfony Notifier component via Composer. This component provides an abstraction layer for sending notifications through multiple channels.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/notifier.rst#2025-04-22_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require symfony/notifier\n```\n\n----------------------------------------\n\nTITLE: Configuring Luhn Validation with YAML in Symfony\nDESCRIPTION: Example of applying the Luhn validation constraint to a credit card number property using YAML configuration. This setup validates that the card number passes the Luhn algorithm check.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Luhn.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\Transaction:\n    properties:\n        cardNumber:\n            - Luhn:\n                message: Please check your credit card number.\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of EntityType in Symfony Forms\nDESCRIPTION: Demonstrates how to add an EntityType field to a Symfony form builder, specifying the entity class, choice label, and optional multiple/expanded settings.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/entity.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Entity\\User;\nuse Symfony\\Bridge\\Doctrine\\Form\\Type\\EntityType;\n// ...\n\n$builder->add('users', EntityType::class, [\n    // looks for choices from this entity\n    'class' => User::class,\n\n    // uses the User.username property as the visible option string\n    'choice_label' => 'username',\n\n    // used to render a select box, check boxes or radios\n    // 'multiple' => true,\n    // 'expanded' => true,\n]);\n```\n\n----------------------------------------\n\nTITLE: Injecting Anonymous Services in Symfony via YAML Configuration\nDESCRIPTION: Defines a service (App\\Foo) and injects an anonymous inline service (App\\AnonymousBar) using YAML. Dependencies: Symfony Dependency Injection, YAML services configuration. The argument for Foo is specified as a !service inline definition. The service will be available to App\\Foo as a constructed instance of App\\AnonymousBar. Limitation: the anonymous service does not inherit defaults/autowiring unless explicitly specified.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/alias_private.rst#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\\nservices:\\n    App\\\\Foo:\\n        arguments:\\n            - !service\\n                class: App\\\\AnonymousBar\n```\n\n----------------------------------------\n\nTITLE: Form Event Subscriber for Name Field\nDESCRIPTION: Separate event subscriber class that handles the conditional addition of the name field, providing better reusability.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/dynamic_form_modification.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Form\\EventSubscriber;\n\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\TextType;\nuse Symfony\\Component\\Form\\FormEvent;\nuse Symfony\\Component\\Form\\FormEvents;\n\nclass AddNameFieldSubscriber implements EventSubscriberInterface\n{\n    public static function getSubscribedEvents(): array\n    {\n        return [FormEvents::PRE_SET_DATA => 'preSetData'];\n    }\n\n    public function preSetData(FormEvent $event): void\n    {\n        $product = $event->getData();\n        $form = $event->getForm();\n\n        if (!$product || null === $product->getId()) {\n            $form->add('name', TextType::class);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring UUID Constraint in YAML\nDESCRIPTION: Example of how to define the UUID constraint for a property using YAML configuration in Symfony.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Uuid.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\File:\n    properties:\n        identifier:\n            - Uuid: ~\n```\n\n----------------------------------------\n\nTITLE: Implementing Stateful Symfony Scheduler in PHP\nDESCRIPTION: Code snippet showing how to implement a stateful Symfony Scheduler using the Cache component. This allows the system to remember the last execution date of a message, ensuring proper resumption after worker restarts.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/scheduler.rst#2025-04-22_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n// src/Scheduler/SaleTaskProvider.php\nnamespace App\\Scheduler;\n\n#[AsSchedule('uptoyou')]\nclass SaleTaskProvider implements ScheduleProviderInterface\n{\n    public function getSchedule(): Schedule\n    {\n        $this->removeOldReports = RecurringMessage::cron('3 8 * * 1', new CleanUpOldSalesReport());\n\n        return $this->schedule ??= (new Schedule())\n            ->with(\n                // ...\n            )\n            ->stateful($this->cache)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of path() Function in Twig\nDESCRIPTION: This example demonstrates generating URLs for a route named 'app_blog' (defined with path '/blog/{page}'). It shows generating a standard relative path ('/blog/3') and a path relative to the current page ('blog/3') by setting the `relative` flag.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#2025-04-22_snippet_20\n\nLANGUAGE: twig\nCODE:\n```\n{# consider that the app defines an 'app_blog' route with the path '/blog/{page}' #}\n\n{{ path(name = 'app_blog', parameters = {page: 3}, relative = false) }}\n{# output: /blog/3 #}\n\n{{ path(name = 'app_blog', parameters = {page: 3}, relative = true) }}\n{# output: blog/3 #}\n```\n\n----------------------------------------\n\nTITLE: Configuring Symfony Router for Production Environment (PHP)\nDESCRIPTION: Demonstrates how to configure the Symfony router for the production environment using PHP. This is another alternative to YAML and XML configurations.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/quick_tour/the_architecture.rst#2025-04-22_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n// config/packages/framework.php\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework, ContainerConfigurator $container): void {\n    $framework->router()\n        ->utf8(true)\n    ;\n\n    if ('prod' === $container->env()) {\n        $framework->router()\n            ->strictRequirements(null)\n        ;\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering a Complete Symfony Form in Twig\nDESCRIPTION: Provides the essential Twig template code to render a form created with the Symfony Form component. It uses the `form_start`, `form_widget` (which renders all fields including labels and errors by default), and `form_end` helper functions, along with a standard HTML submit button. Requires a form view object (e.g., `form`) passed to the template.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/form.rst#2025-04-22_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n{% verbatim %}{{ form_start(form) }}\n    {{ form_widget(form) }}\n\n    <input type=\"submit\">\n{{ form_end(form) }}{% endverbatim %}\n```\n\n----------------------------------------\n\nTITLE: Creating Translatable Object in Twig\nDESCRIPTION: Uses the `t` function to create a `Translatable` object, which encapsulates translation details. It takes the translation `message` key (string), optional `parameters` (array), and an optional `domain` (string, default 'messages'). This object is designed to be passed to the `trans` filter for actual translation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#2025-04-22_snippet_31\n\nLANGUAGE: twig\nCODE:\n```\n{{ t(message, parameters = [], domain = 'messages')|trans }}\n```\n\n----------------------------------------\n\nTITLE: Overriding Guessed Form Field Options in Symfony\nDESCRIPTION: This snippet shows how to override a guessed form field option in Symfony. It demonstrates setting a custom 'maxlength' attribute for a form field.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/forms.rst#2025-04-22_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n->add('task', null, ['attr' => ['maxlength' => 4]])\n```\n\n----------------------------------------\n\nTITLE: Configuring Exception Handling in Symfony Framework (YAML)\nDESCRIPTION: This YAML snippet maps a specific exception (BadRequestHttpException) to a debug log level, status code 422, and a custom log channel. It enables fine-grained control over how exceptions are handled and logged by the framework. Place this file in config/packages and ensure your Symfony version supports the listed options.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#2025-04-22_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/exceptions.yaml\\nframework:\\n    exceptions:\\n        Symfony\\Component\\HttpKernel\\Exception\\BadRequestHttpException:\\n            log_level: 'debug'\\n            status_code: 422\\n            log_channel: 'custom_channel'\n```\n\n----------------------------------------\n\nTITLE: Defining Services with XML in Symfony (XML)\nDESCRIPTION: This snippet shows how to define services and inject dependencies in a Symfony project using XML. The 'mailer' service is configured with a transport parameter, and the 'newsletter_manager' service has the 'mailer' injected via a method call. It relies on correct parameter and service ID resolution and assumes classes 'Mailer' and 'NewsletterManager' are autoloaded and available.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/dependency_injection.rst#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<services>\\n    <service id=\\\"mailer\\\" class=\\\"Mailer\\\">\\n        <argument>%mailer.transport%</argument>\\n    </service>\\n\\n    <service id=\\\"newsletter_manager\\\" class=\\\"NewsletterManager\\\">\\n        <call method=\\\"setMailer\\\">\\n            <argument type=\\\"service\\\" id=\\\"mailer\\\"/>\\n        </call>\\n    </service>\\n</services>\n```\n\n----------------------------------------\n\nTITLE: Setting DotEnv Path for Web Front Controller (Symfony, PHP)\nDESCRIPTION: This PHP code (public/index.php) sets a custom .env file location for web requests by changing $_SERVER['APP_RUNTIME_OPTIONS']['dotenv_path'] before loading the runtime autoloader. It’s required when the .env file is not in the project root and must match your deployment configuration.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration/override_dir_structure.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// public/index.php\\n\\n// ...\\n$_SERVER['APP_RUNTIME_OPTIONS']['dotenv_path'] = 'another/custom/path/to/.env';\\n\\nrequire_once dirname(__DIR__).'/vendor/autoload_runtime.php';\\n// ...\n```\n\n----------------------------------------\n\nTITLE: Injecting a Custom Cache Adapter into ExpressionLanguage in PHP\nDESCRIPTION: Demonstrates how to configure the `ExpressionLanguage` component to use a specific PSR-6 cache implementation (like `RedisAdapter`) instead of the default `ArrayAdapter`. This is done by passing the cache pool instance to the `ExpressionLanguage` constructor, enabling more robust caching strategies.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/expression_language.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Cache\\Adapter\\RedisAdapter;\nuse Symfony\\Component\\ExpressionLanguage\\ExpressionLanguage;\n\n$cache = new RedisAdapter(...);\n$expressionLanguage = new ExpressionLanguage($cache);\n```\n\n----------------------------------------\n\nTITLE: Setting Cache Headers\nDESCRIPTION: Demonstrates setting common cache headers in a single method call.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#2025-04-22_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$response->setCache([\n    'must_revalidate'  => false,\n    'no_cache'         => false,\n    'no_store'         => false,\n    'no_transform'     => false,\n    'public'           => true,\n    'private'          => false,\n    'proxy_revalidate' => false,\n    'max_age'          => 600,\n    's_maxage'         => 600,\n    'stale_if_error'   => 86400,\n    'stale_while_revalidate' => 60,\n    'immutable'        => true,\n    'last_modified'    => new \\DateTime(),\n    'etag'             => 'abcdef',\n]);\n```\n\n----------------------------------------\n\nTITLE: Forwarding Request to Another Controller in Symfony\nDESCRIPTION: Example of using forward() method to make an internal sub-request to another controller. The method accepts the target controller reference and an array of parameters that will be passed to the target controller method.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/controller/forwarding.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function index(string $name): Response\n{\n    $response = $this->forward('App\\Controller\\OtherController::fancy', [\n        'name'  => $name,\n        'color' => 'green',\n    ]);\n\n    // ... further modify the response or return it directly\n\n    return $response;\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Allowed Role and Parameter for switch_user (XML)\nDESCRIPTION: Configures firewall in XML to use a custom required role (ROLE_ADMIN) and query parameter (_want_to_be_this_user) for impersonation. The <switch-user> tag is adjusted accordingly. This restricts impersonation to admins and uses the new parameter.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/impersonating_user.rst#2025-04-22_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/security.xml -->\\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\\n<srv:container xmlns=\\\"http://symfony.com/schema/dic/security\\\"\\n    xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n    xmlns:srv=\\\"http://symfony.com/schema/dic/services\\\"\\n    xsi:schemaLocation=\\\"http://symfony.com/schema/dic/services\\n        https://symfony.com/schema/dic/services/services-1.0.xsd\\n        http://symfony.com/schema/dic/security\\n        https://symfony.com/schema/dic/security/security-1.0.xsd\\\">\\n    <config>\\n        <!-- ... -->\\n\\n        <firewall name=\\\"main\\\">\\n            <!-- ... -->\\n            <switch-user role=\\\"ROLE_ADMIN\\\" parameter=\\\"_want_to_be_this_user\\\"/>\\n        </firewall>\\n    </config>\\n</srv:container>\n```\n\n----------------------------------------\n\nTITLE: Defining LessThanOrEqual Constraint with PHP Attributes\nDESCRIPTION: Example of using the LessThanOrEqual constraint with PHP attributes to validate that 'siblings' is less than or equal to 5 and 'age' is less than or equal to 80.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/LessThanOrEqual.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Person.php\nnamespace App\\Entity;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Person\n{\n    #[Assert\\LessThanOrEqual(5)]\n    protected int $siblings;\n\n    #[Assert\\LessThanOrEqual(\n        value: 80,\n    )]\n    protected int $age;\n}\n```\n\n----------------------------------------\n\nTITLE: Environment-Specific Configuration in YAML\nDESCRIPTION: Shows how to define configuration options for different environments in a single YAML file using the when@environment_name syntax and YAML anchors for reuse.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/configuration.rst#2025-04-22_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/webpack_encore.yaml\nwebpack_encore:\n    # ...\n    output_path: '%kernel.project_dir%/public/build'\n    strict_mode: true\n    cache: false\n\n# cache is enabled only in the \"prod\" environment\nwhen@prod:\n    webpack_encore:\n        cache: true\n\n# disable strict mode only in the \"test\" environment\nwhen@test:\n    webpack_encore:\n        strict_mode: false\n\n# YAML syntax allows to reuse contents using \"anchors\" (&some_name) and \"aliases\" (*some_name).\n# In this example, 'test' configuration uses the exact same configuration as in 'prod'\nwhen@prod: &webpack_prod\n    webpack_encore:\n        # ...\nwhen@test: *webpack_prod\n```\n\n----------------------------------------\n\nTITLE: Running the Symfony Server in Background Mode\nDESCRIPTION: Commands to start the Symfony web server in the background and view logs separately.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/setup/symfony_server.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cd my-project/\n\n# start the server in the background\n$ symfony server:start -d\n\n# continue working and running other commands...\n\n# show the latest log messages\n$ symfony server:log\n```\n\n----------------------------------------\n\nTITLE: Implementing SignalableCommandInterface\nDESCRIPTION: Shows how to make a command handle signals directly by implementing SignalableCommandInterface.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/console/events.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// src/Command/SomeCommand.php\nnamespace App\\Command;\n\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Command\\SignalableCommandInterface;\n\nclass SomeCommand extends Command implements SignalableCommandInterface\n{\n    // ...\n\n    public function getSubscribedSignals(): array\n    {\n        // return here any of the constants defined by PCNTL extension\n        return [\\SIGINT, \\SIGTERM];\n    }\n\n    public function handleSignal(int $signal): int|false\n    {\n        if (\\SIGINT === $signal) {\n            // ...\n        }\n\n        // ...\n\n        // return an integer to set the exit code, or\n        // false to continue normal execution\n        return 0;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PrependExtensionInterface in Symfony\nDESCRIPTION: Shows how to implement the PrependExtensionInterface to prepend configuration of any Bundle before the load() method is called, allowing for configuration manipulation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/dependency_injection/compilation.rst#2025-04-22_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\DependencyInjection\\Extension\\PrependExtensionInterface;\n// ...\n\nclass AcmeDemoExtension implements ExtensionInterface, PrependExtensionInterface\n{\n    // ...\n\n    public function prepend(ContainerBuilder $container): void\n    {\n        // ...\n\n        $container->prependExtensionConfig($name, $config);\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Individual Sub-fields of RepeatedType in Twig\nDESCRIPTION: Illustrates how to render the first and second sub-fields of a `RepeatedType` field individually using the `form_row` Twig function. It accesses the sub-fields using the default names `.first` and `.second`. These names can be customized using the `first_name` and `second_name` options when defining the field in PHP.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/forms/types/repeated.rst#2025-04-22_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{# .first and .second may vary in your use - see the note below #}\n{{ form_row(form.password.first) }}\n{{ form_row(form.password.second) }}\n```\n\n----------------------------------------\n\nTITLE: Implementing Mailer Webhook Listener in PHP\nDESCRIPTION: PHP class implementing a webhook listener for Mailer events, handling both delivery and engagement events.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/webhook.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\RemoteEvent\\Attribute\\AsRemoteEventConsumer;\nuse Symfony\\Component\\RemoteEvent\\Consumer\\ConsumerInterface;\nuse Symfony\\Component\\RemoteEvent\\Event\\Mailer\\MailerDeliveryEvent;\nuse Symfony\\Component\\RemoteEvent\\Event\\Mailer\\MailerEngagementEvent;\nuse Symfony\\Component\\RemoteEvent\\RemoteEvent;\n\n#[AsRemoteEventConsumer('mailer_mailgun')]\nclass WebhookListener implements ConsumerInterface\n{\n    public function consume(RemoteEvent $event): void\n    {\n        if ($event instanceof MailerDeliveryEvent) {\n            $this->handleMailDelivery($event);\n        } elseif ($event instanceof MailerEngagementEvent) {\n            $this->handleMailEngagement($event);\n        } else {\n            // This is not an email event\n            return;\n        }\n    }\n\n    private function handleMailDelivery(MailerDeliveryEvent $event): void\n    {\n        // Handle the mail delivery event\n    }\n\n    private function handleMailEngagement(MailerEngagementEvent $event): void\n    {\n        // Handle the mail engagement event\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Charset Constraint with YAML in Symfony\nDESCRIPTION: YAML configuration example for applying the Charset constraint to validate that the content property of the FileDTO class uses UTF-8 encoding.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Charset.rst#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/validator/validation.yaml\nApp\\Entity\\FileDTO:\n    properties:\n        content:\n            - Charset: 'UTF-8'\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Locale in Symfony (YAML)\nDESCRIPTION: Sets the default locale to 'en' in the Symfony framework configuration using YAML.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/translation.rst#2025-04-22_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\n<framework:config default-locale=\"en\"/>\n```\n\n----------------------------------------\n\nTITLE: Implementing DataMapper Interface in ColorType Form\nDESCRIPTION: Custom data mapper implementation that handles mapping between Color object and form fields, including data validation and type checking.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/data_mappers.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Form;\n\nuse App\\Painting\\Color;\nuse Symfony\\Component\\Form\\AbstractType;\nuse Symfony\\Component\\Form\\DataMapperInterface;\nuse Symfony\\Component\\Form\\Exception\\UnexpectedTypeException;\nuse Symfony\\Component\\Form\\FormInterface;\n\nfinal class ColorType extends AbstractType implements DataMapperInterface\n{\n    public function mapDataToForms($viewData, \\Traversable $forms): void\n    {\n        if (null === $viewData) {\n            return;\n        }\n\n        if (!$viewData instanceof Color) {\n            throw new UnexpectedTypeException($viewData, Color::class);\n        }\n\n        /** @var FormInterface[] $forms */\n        $forms = iterator_to_array($forms);\n\n        $forms['red']->setData($viewData->getRed());\n        $forms['green']->setData($viewData->getGreen());\n        $forms['blue']->setData($viewData->getBlue());\n    }\n\n    public function mapFormsToData(\\Traversable $forms, &$viewData): void\n    {\n        /** @var FormInterface[] $forms */\n        $forms = iterator_to_array($forms);\n\n        $viewData = new Color(\n            $forms['red']->getData(),\n            $forms['green']->getData(),\n            $forms['blue']->getData()\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SMIME Encryption in PHP\nDESCRIPTION: PHP configuration for setting up SMIME encryption certificate path in Symfony Mailer config.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#2025-04-22_snippet_62\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/mailer.php\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework): void {\n    $mailer = $framework->mailer();\n    $mailer->smimeEncrypter()\n            ->certificate('%kernel.project_dir%/var/certificates/smime.crt')\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Executing AssetMapper Security Audit\nDESCRIPTION: Demonstrates the command to run a security audit on the dependencies managed by AssetMapper. This checks for known vulnerabilities in the project's dependencies.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/asset_mapper.rst#2025-04-22_snippet_50\n\nLANGUAGE: terminal\nCODE:\n```\n$ php bin/console importmap:audit\n```\n\n----------------------------------------\n\nTITLE: Implementing Blog Controller in Symfony Framework\nDESCRIPTION: This snippet shows how to implement the blog controller using the full Symfony framework. It includes methods for listing all posts and showing individual posts, using Doctrine ORM for database operations.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/introduction/from_flat_php_to_symfony.rst#2025-04-22_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n// src/Controller/BlogController.php\nnamespace App\\Controller;\n\nuse App\\Entity\\Post;\nuse Doctrine\\Persistence\\ManagerRegistry;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\n\nclass BlogController extends AbstractController\n{\n    public function list(ManagerRegistry $doctrine)\n    {\n        $posts = $doctrine->getRepository(Post::class)->findAll();\n\n        return $this->render('blog/list.html.twig', ['posts' => $posts]);\n    }\n\n    public function show(ManagerRegistry $doctrine, $id)\n    {\n        $post = $doctrine->getRepository(Post::class)->find($id);\n\n        if (!$post) {\n            // cause the 404 page not found to be displayed\n            throw $this->createNotFoundException();\n        }\n\n        return $this->render('blog/show.html.twig', ['post' => $post]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Profiler Service Alias in PHP\nDESCRIPTION: PHP configuration to create an alias for the profiler service, making it available for dependency injection in controllers.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/profiler.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// config/services_dev.php\nuse Symfony\\Component\\HttpKernel\\Profiler\\Profiler;\n\n$container->setAlias(Profiler::class, 'profiler');\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Maps in Webpack Encore Configuration\nDESCRIPTION: Configuration snippet showing how to conditionally enable source maps in webpack.config.js based on the environment. Source maps are enabled in development but disabled in production environments.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/sourcemaps.rst#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// webpack.config.js\n// ...\n\nEncore\n    // ...\n\n    .enableSourceMaps(!Encore.isProduction())\n;\n```\n\n----------------------------------------\n\nTITLE: Registering Transport Factory in XML Configuration\nDESCRIPTION: XML configuration for registering a custom transport factory with the service container, tagging it with 'messenger.transport_factory' to make it discoverable by the Messenger component.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/messenger/custom-transport.rst#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/services.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <services>\n        <service id=\"Your\\Transport\\YourTransportFactory\">\n           <tag name=\"messenger.transport_factory\"/>\n        </service>\n    </services>\n</container>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Shipping Form Type in PHP\nDESCRIPTION: Creates a custom ShippingType form field based on ChoiceType to handle shipping options selection. Extends AbstractType and configures predefined shipping choices.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/create_custom_field_type.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Form/Type/ShippingType.php\nnamespace App\\Form\\Type;\n\nuse Symfony\\Component\\Form\\AbstractType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\ChoiceType;\nuse Symfony\\Component\\Form\\OptionsResolver\\OptionsResolver;\n\nclass ShippingType extends AbstractType\n{\n    public function configureOptions(OptionsResolver $resolver): void\n    {\n        $resolver->setDefaults([\n            'choices' => [\n                'Standard Shipping' => 'standard',\n                'Expedited Shipping' => 'expedited',\n                'Priority Shipping' => 'priority',\n            ],\n        ]);\n    }\n\n    public function getParent(): string\n    {\n        return ChoiceType::class;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global CSRF Field Name in Symfony Form Settings\nDESCRIPTION: Shows how to globally customize the name of the hidden HTML field used for the CSRF token for all Symfony forms. Configuration examples are provided for YAML, XML, and PHP under the `framework.form.csrf_protection` key in `config/packages/framework.yaml`, `.xml`, or `.php`. This changes the default `_token` field name to `custom_token_name`.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/csrf.rst#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/framework.yaml\nframework:\n    # ...\n    form:\n        csrf_protection:\n            enabled: true\n            field_name: 'custom_token_name'\n```\n\nLANGUAGE: xml\nCODE:\n```\n<!-- config/packages/framework.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:framework=\"http://symfony.com/schema/dic/symfony\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services\n        https://symfony.com/schema/dic/services/services-1.0.xsd\n        http://symfony.com/schema/dic/symfony\n        https://symfony.com/schema/dic/symfony/symfony-1.0.xsd\">\n\n    <framework:config>\n        <framework:form>\n            <framework:csrf-protection enabled=\"true\" field-name=\"custom_token_name\"/>\n        </framework:form>\n    </framework:config>\n</container>\n```\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/framework.php\nuse Symfony\\Config\\FrameworkConfig;\n\nreturn static function (FrameworkConfig $framework) {\n    $framework->form()->csrfProtection()\n        ->enabled(true)\n        ->fieldName('custom_token_name')\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Generating Relative Logout Paths in Twig\nDESCRIPTION: The `logout_path` function generates the relative URL path for logging out, based on the configuration of a specific firewall. It accepts an optional `key` parameter identifying the firewall (from `security.yaml`). If `key` is omitted, it generates the path for the firewall governing the current request.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/twig_reference.rst#2025-04-22_snippet_13\n\nLANGUAGE: twig\nCODE:\n```\n{{ logout_path(key = null) }}\n```\n\n----------------------------------------\n\nTITLE: Accessing Individual Form Field Values\nDESCRIPTION: This snippet shows how to access individual values for form fields, such as the id, using the vars property.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/form/form_customization.rst#2025-04-22_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n{{ form.task.vars.id }}\n```\n\n----------------------------------------\n\nTITLE: Conditionally Injecting Parameter via Expression (Symfony YAML)\nDESCRIPTION: Defines the `App\\Mailer` service and uses a YAML expression with the '@=' prefix to conditionally inject a parameter value. If the 'some_param' parameter exists (checked using `container.hasParameter`), its value is injected; otherwise, a 'default_value' string is used.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/expression_language.rst#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nservices:\n    App\\Mailer:\n        # the '@=' prefix is required when using expressions for arguments in YAML files\n        arguments: [\"@=container.hasParameter('some_param') ? parameter('some_param') : 'default_value'\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring OIDC User Info with Custom HTTP Client - Symfony Security - YAML\nDESCRIPTION: This YAML snippet specifies a custom service ('oidc.client') as the HTTP client used by the OIDC user info token handler in Symfony Security. This allows for advanced client configuration, such as custom middleware or authentication. Reference the custom client service in config/packages/security.yaml under the relevant firewall.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/access_token.rst#2025-04-22_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/security.yaml\nsecurity:\n    firewalls:\n        main:\n            access_token:\n                token_handler:\n                    oidc_user_info:\n                        client: oidc.client\n```\n\n----------------------------------------\n\nTITLE: Registering Service with Constructor Option - PHP Configuration\nDESCRIPTION: Demonstrates how to instruct Symfony's DI container in PHP code to use a custom static constructor when creating a service by calling 'constructor' with the method name. Used in 'config/services.php', it configures NewsletterManager to use its 'create' method for service instantiation.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/service_container/factories.rst#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n// config/services.php\nnamespace Symfony\\Component\\DependencyInjection\\Loader\\Configurator;\n\nuse App\\Email\\NewsletterManager;\n\nreturn function(ContainerConfigurator $containerConfigurator) {\n    $services = $containerConfigurator->services();\n\n    $services->set(NewsletterManager::class)\n        ->constructor('create');\n};\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Cas2Handler in PHP\nDESCRIPTION: This PHP configuration sets up the Cas2Handler for CAS 2.0 authentication in the security.php file. It specifies the validation URL for the CAS server.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/security/access_token.rst#2025-04-22_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n// config/packages/security.php\nuse Symfony\\Config\\SecurityConfig;\n\nreturn static function (SecurityConfig $security) {\n    $security->firewall('main')\n        ->accessToken()\n            ->tokenHandler()\n                ->cas()\n                    ->validationUrl('https://www.example.com/cas/validate')\n    ;\n};\n```\n\n----------------------------------------\n\nTITLE: Using Custom Options in Form Builder\nDESCRIPTION: This code shows how to use custom options passed to a form type within the buildForm() method. The example demonstrates using the 'require_due_date' option to dynamically set the 'required' attribute of a date field.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/forms.rst#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n// src/Form/Type/TaskType.php\nnamespace App\\Form\\Type;\n\nuse Symfony\\Component\\Form\\AbstractType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\DateType;\nuse Symfony\\Component\\Form\\FormBuilderInterface;\n\nclass TaskType extends AbstractType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options): void\n    {\n        $builder\n            // ...\n            ->add('dueDate', DateType::class, [\n                'required' => $options['require_due_date'],\n            ])\n        ;\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Expression Constraints with PHP Attributes in Symfony\nDESCRIPTION: Demonstrates how to use PHP attributes to define an Expression constraint on a class property. The constraint ensures that the 'metric' value plus an error margin is less than a threshold value.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/reference/constraints/Expression.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// src/Model/Analysis.php\nnamespace App\\Model;\n\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\nclass Analysis\n{\n    #[Assert\\Expression(\n        'value + error_margin < threshold',\n        values: ['error_margin' => 0.25, 'threshold' => 1.5],\n    )]\n    private float $metric;\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Images by Alt Text in Symfony DomCrawler in PHP\nDESCRIPTION: Describes selecting images by their alt attribute using selectImage, and obtaining an Image object via image(). The Image object, like Link, provides getUri for resolving the image location, which is useful for image validation or scraping.\nSOURCE: https://github.com/symfony/symfony-docs/blob/7.3/components/dom_crawler.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$imagesCrawler = $crawler->selectImage('Kitten');\n$image = $imagesCrawler->image();\n\n// or do this all at once\n$image = $crawler->selectImage('Kitten')->image();\n```"
  }
]