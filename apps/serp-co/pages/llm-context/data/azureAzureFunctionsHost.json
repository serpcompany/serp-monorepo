[
  {
    "owner": "azure",
    "repo": "azure-functions-host",
    "content": "TITLE: Initializing Azure Functions Project with Core Tools CLI\nDESCRIPTION: Creates a new Azure Functions project with a JavaScript HTTP-triggered function using the Azure Functions Core Tools CLI.\nSOURCE: https://github.com/azure/azure-functions-host/blob/dev/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfunc init\nfunc new -l javascript -t httptrigger -n hello\necho $PWD\n```\n\n----------------------------------------\n\nTITLE: Implementing Azure Functions HTTP Trigger in Java\nDESCRIPTION: This code demonstrates a Java implementation of an HTTP trigger for Azure Functions. It handles HTTP GET and POST requests, processes query parameters and request body, checks environment variables, and returns appropriate HTTP responses. The function requires Azure Functions Java SDK and uses annotation-based configuration.\nSOURCE: https://github.com/azure/azure-functions-host/blob/dev/sample/Java/HttpTrigger/Function.java.txt#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage Microsoft.Azure.WebJobs.Script.Tests.EndToEnd;\n\nimport java.util.*;\nimport com.microsoft.azure.functions.annotation.*;\nimport com.microsoft.azure.functions.*;\n\n/**\n * Azure Functions with HTTP Trigger.\n * Create jar file for this function following instructions at:\n * https://docs.microsoft.com/en-us/azure/azure-functions/functions-create-first-java-maven\n * groupId: Microsoft.Azure.WebJobs.Script.Tests.EndToEnd\n * artifactId: HttpTrigger\n * Accept defaults for rest of the identifiers\n * Run mvn clean package\n */\npublic class Function {\n    @FunctionName(\"HttpTrigger\")\n    public HttpResponseMessage run(\n            @HttpTrigger(name = \"req\", methods = {HttpMethod.GET, HttpMethod.POST}, authLevel = AuthorizationLevel.FUNCTION) HttpRequestMessage<Optional<String>> request,\n            final ExecutionContext context) {\n        context.getLogger().info(\"Java HTTP trigger processed a request.\");\n\n        // Parse query parameter\n        String query = request.getQueryParameters().get(\"name\");\n        String name = request.getBody().orElse(query);\n        String readEnv = System.getenv(\"AzureWebJobsStorage\");\n\n        if (name == null) {\n            return request.createResponseBuilder(HttpStatus.BAD_REQUEST).body(\"Please pass a name on the query string or in the request body\").build();\n        }\n        if (readEnv == null ) {\n            return request.createResponseBuilder(HttpStatus.INTERNAL_SERVER_ERROR).body(\"AzureWebJobsStorage is empty\").build();\n        }\n        return request.createResponseBuilder(HttpStatus.OK).body(\"Hello, \" + name).build();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming FunctionRPC.proto in C#\nDESCRIPTION: PowerShell commands to generate C# files from the FunctionRPC.proto definition using gRPC tools. The script sets up paths to necessary tools, creates output directories, and runs the protoc compiler to generate C# classes for the protocol.\nSOURCE: https://github.com/azure/azure-functions-host/blob/dev/src/WebJobs.Script.Grpc/azure-functions-language-worker-protobuf/README.md#2025-04-23_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nset NUGET_PATH=\"%UserProfile%\\.nuget\\packages\"\nset GRPC_TOOLS_PATH=%NUGET_PATH%\\grpc.tools\\<versionNumber>\\tools\\windows_x86\nset PROTO_PATH=.\\azure-functions-language-worker-protobuf\\src\\proto\nset PROTO=.\\azure-functions-language-worker-protobuf\\src\\proto\\FunctionRpc.proto\nset PROTOBUF_TOOLS=%NUGET_PATH%\\google.protobuf.tools\\<versionNumber>\\tools\nset MSGDIR=.\\Messages\n\nif exist %MSGDIR% rmdir /s /q %MSGDIR%\nmkdir %MSGDIR%\n\nset OUTDIR=%MSGDIR%\\DotNet\nmkdir %OUTDIR%\n%GRPC_TOOLS_PATH%\\protoc.exe %PROTO% --csharp_out %OUTDIR% --grpc_out=%OUTDIR% --plugin=protoc-gen-grpc=%GRPC_TOOLS_PATH%\\grpc_csharp_plugin.exe --proto_path=%PROTO_PATH% --proto_path=%PROTOBUF_TOOLS%\n```\n\n----------------------------------------\n\nTITLE: Consuming FunctionRPC.proto in JavaScript\nDESCRIPTION: NPM commands for generating JavaScript and TypeScript files from the FunctionRPC.proto definition using the protobufjs package. The commands create JSON modules with CommonJS format and static modules with TypeScript definitions.\nSOURCE: https://github.com/azure/azure-functions-host/blob/dev/src/WebJobs.Script.Grpc/azure-functions-language-worker-protobuf/README.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\npbjs -t json-module -w commonjs -o azure-functions-language-worker-protobuf/src/rpc.js azure-functions-language-worker-protobuf/src/proto/FunctionRpc.proto\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\npbjs -t static-module azure-functions-language-worker-protobuf/src/proto/FunctionRpc.proto -o azure-functions-language-worker-protobuf/src/rpc_static.js && pbts -o azure-functions-language-worker-protobuf/src/rpc.d.ts azure-functions-language-worker-protobuf/src/rpc_static.js\n```\n\n----------------------------------------\n\nTITLE: Consuming FunctionRPC.proto in Python\nDESCRIPTION: Python commands for installing development dependencies and building the project. These commands install the package in development mode with the dev extras and then build the package using setup.py.\nSOURCE: https://github.com/azure/azure-functions-host/blob/dev/src/WebJobs.Script.Grpc/azure-functions-language-worker-protobuf/README.md#2025-04-23_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\npython -m pip install -e .[dev] -U\npython setup.py build\n```\n\n----------------------------------------\n\nTITLE: Displaying Azure Functions JSON Schemas Information in Markdown\nDESCRIPTION: This Markdown snippet provides important information about Azure Functions JSON schemas, including their purpose, location, and update process. It emphasizes the need to keep schemas in sync with the JSON Schema Store.\nSOURCE: https://github.com/azure/azure-functions-host/blob/dev/schemas/json/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Azure Functions JSON Schemas\n\n## IMPORTANT:\nThe schemas contained here are a copy of the schemas we publish to [**JSON Schema Store**](http://schemastore.org/json/), which is what the Azure Functions tooling (e.g. Visual Studio) uses.\n\nBefore making changes to any schema, please ensure you have the latest changes from the [Schema Store Repository](https://github.com/schemastore/schemastore/).\n\n**Note:** The host.json schema is now maintained in the [Azure/Azure-Functions](https://github.com/Azure/azure-functions) repo.\n\n**IF YOU MAKE CHANGES TO SCHEMAS** you must open a PR against the Schema Store repository with those changes.\n```\n\n----------------------------------------\n\nTITLE: Building and Publishing Site Extension with MSBuild\nDESCRIPTION: Commands for building and publishing the site extension project using dotnet CLI. Shows both the combined approach and the step-by-step process with restore, build, and publish commands.\nSOURCE: https://github.com/azure/azure-functions-host/blob/dev/src/WebJobs.Script.SiteExtension/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Together\ndotnet publish -c {config}\n\n# Separately\ndotnet restore -p:PublishReadyToRun=true # needs to be set to true (fixed in .net9 SDK)\ndotnet build -c {config} --no-restore\ndotnet publish -c {config} --no-build\n```\n\n----------------------------------------\n\nTITLE: Memory Allocation Optimization in RpcWorkerConfigFactory.AddProviders\nDESCRIPTION: Performance enhancement that optimizes memory allocation in the RpcWorkerConfigFactory.AddProviders method, referenced in PR #10959.\nSOURCE: https://github.com/azure/azure-functions-host/blob/dev/release_notes.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Memory allocation optimizations in `RpcWorkerConfigFactory.AddProviders` (#10959)\n```\n\n----------------------------------------\n\nTITLE: Fixing GrpcWorkerChannel Concurrency Bug\nDESCRIPTION: Bug fix addressing concurrency issues in the GrpcWorkerChannel component, as documented in PR #10998.\nSOURCE: https://github.com/azure/azure-functions-host/blob/dev/release_notes.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- Fixing GrpcWorkerChannel concurrency bug (#10998)\n```\n\n----------------------------------------\n\nTITLE: Running Benchmarks in PowerShell for Azure Functions Host\nDESCRIPTION: Command to run all benchmarks in the project from the solution root. This executes the benchmarks in Release configuration targeting .NET 6.0.\nSOURCE: https://github.com/azure/azure-functions-host/blob/dev/benchmarks/README.md#2025-04-23_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\ndotnet run -c Release -f net6.0 --project .\\benchmarks\\WebJobs.Script.Benchmarks\\\n```\n\n----------------------------------------\n\nTITLE: Running Filtered Benchmarks in PowerShell for Azure Functions Host\nDESCRIPTION: Command to run a specific set of benchmarks by using the filter parameter. This example demonstrates how to run only benchmarks containing 'Grpc' in their name.\nSOURCE: https://github.com/azure/azure-functions-host/blob/dev/benchmarks/README.md#2025-04-23_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\ndotnet run -c Release -f net6.0 --project .\\benchmarks\\WebJobs.Script.Benchmarks\\ --filter *Grpc*\n```\n\n----------------------------------------\n\nTITLE: Creating Private Site Extension with PowerShell\nDESCRIPTION: PowerShell commands to generate a private site extension using the New-PrivateSiteExtension.ps1 script. Shows options for different processor architectures and skipping the zip step.\nSOURCE: https://github.com/azure/azure-functions-host/blob/dev/src/WebJobs.Script.SiteExtension/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n# Generates a zipped x64 PSE by default\n./New-PrivateSiteExtension.ps1\n\n# To generate x86 / 32bit:\n./New-PrivateSiteExtension.ps1 -Bitness x86\n\n\n# Can skip zipping the extension:\n./New-PrivateSiteExtension.ps1 -NoZip\n```\n\n----------------------------------------\n\nTITLE: Compressing Site Extension with PowerShell\nDESCRIPTION: PowerShell commands to compress the site extension using the Compress-SiteExtension.ps1 script. Shows the default operation and how to insert JIT trace files during compression.\nSOURCE: https://github.com/azure/azure-functions-host/blob/dev/src/WebJobs.Script.SiteExtension/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n# Produces the .zip site extension by default\n./Compress-SiteExtension.ps1\n\n# Produce the zip, inserting JIT trace files beforehand.\n./Compress-SiteExtension.ps1 -JitTrace \"path/to/file.jittrace\", \"path/to/file2.jittrace\"\n```\n\n----------------------------------------\n\nTITLE: Benchmark Selection Interface Output\nDESCRIPTION: Example output showing the benchmark selection interface that appears when running benchmarks without filters. Lists available benchmarks and provides instructions for selection.\nSOURCE: https://github.com/azure/azure-functions-host/blob/dev/benchmarks/README.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nAvailable Benchmarks:\n  #0 AuthUtilityBenchmarks\n  #1 CSharpCompilationBenchmarks\n  #2 ScriptLoggingBuilderExtensionsBenchmarks\n\nYou should select the target benchmark(s). Please, print a number of a benchmark (e.g. `0`) or a contained benchmark caption (e.g. `AuthUtilityBenchmarks`).\nIf you want to select few, please separate them with space ` ` (e.g. `1 2 3`).\nYou can also provide the class name in console arguments by using --filter. (e.g. `--filter *AuthUtilityBenchmarks*`).\n```"
  }
]