[
  {
    "owner": "kubernetes-sigs",
    "repo": "gateway-api",
    "content": "TITLE: Defining HTTPRoutes for Site Services\nDESCRIPTION: This YAML snippet creates two HTTPRoutes in the 'site-ns' namespace: one for the 'home' service (default route) and another for the 'login' service with traffic splitting. Both routes attach to the shared gateway in the 'infra-ns' namespace.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/guides/multiple-ns.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n{% include 'standard/cross-namespace-routing/site-route.yaml' %}\n```\n\n----------------------------------------\n\nTITLE: Attaching HTTPRoute to Gateway in Different Namespace\nDESCRIPTION: This YAML snippet demonstrates how to configure an HTTPRoute to attach to a specific Gateway in a different namespace. It includes parentRef configuration to specify the target Gateway.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/concepts/api-overview.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n{% include 'standard/http-route-attachment/httproute.yaml' %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gateway for gRPC Traffic\nDESCRIPTION: Defines a Gateway resource to handle gRPC traffic on port 80 for specific hostnames.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/guides/grpc-routing.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n{% include 'standard/grpc-routing/gateway.yaml' %}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPRoute for foo.example.com Path-Based Routing\nDESCRIPTION: HTTPRoute configuration that matches traffic for foo.example.com/login and forwards it to foo-svc backend service.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/guides/http-routing.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n{% include 'standard/http-routing/foo-httproute.yaml' %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Canary Traffic Rollout with HTTPRoute\nDESCRIPTION: This YAML configures an HTTPRoute for canary testing. It routes test traffic (identified by a header) to foo-v2 while keeping production traffic on foo-v1.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/guides/traffic-splitting.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n{% include 'standard/traffic-splitting/traffic-split-1.yaml' %}\n```\n\n----------------------------------------\n\nTITLE: Defining Ingress Resource in YAML\nDESCRIPTION: This YAML snippet defines an Ingress resource with TLS termination, routing rules for multiple hostnames, and a TLS redirect annotation. It demonstrates the configuration of paths, backends, and TLS settings in the Ingress API.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/guides/migrating-from-ingress.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: example-ingress\n  annotations:\n    some-ingress-controller.example.org/tls-redirect: \"True\"\nspec:\n  ingressClassName: prod\n  tls:\n  - hosts:\n    - foo.example.com\n    - bar.example.com\n    secretName: example-com\n  rules:\n  - host: foo.example.com\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: foo-app\n            port:\n              number: 80\n      - path: /orders\n        pathType: Prefix\n        backend:\n          service:\n            name: foo-orders-app\n            port:\n              number: 80\n  - host: bar.example.com\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: bar-app\n            port:\n              number: 80\n```\n\n----------------------------------------\n\nTITLE: Installing Standard Channel Gateway API\nDESCRIPTION: Command to install the standard release channel of Gateway API which includes GA and beta resources like GatewayClass, Gateway, HTTPRoute, and ReferenceGrant.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/guides/index.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f https://github.com/kubernetes-sigs/gateway-api/releases/download/v1.2.0/standard-install.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining a Gateway Resource in Kubernetes YAML\nDESCRIPTION: This YAML snippet defines a Gateway resource that listens for HTTP traffic on port 80. It uses a placeholder 'example' GatewayClass and allows routes from the same namespace.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/guides/simple-gateway.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n{% include 'standard/simple-gateway/gateway.yaml' %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Gateway for HTTP Traffic\nDESCRIPTION: Example Gateway configuration that listens on port 80 for HTTP traffic and allows attaching routes via labels and group selectors.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/guides/http-routing.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n{% include 'standard/http-routing/gateway.yaml' %}\n```\n\n----------------------------------------\n\nTITLE: Defining GRPCRouteRule Struct in Go for Kubernetes Gateway API\nDESCRIPTION: Defines the GRPCRouteRule struct which specifies matching conditions, filters, and backend references for gRPC routing.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1016/index.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// GRPCRouteRule defines semantics for matching an gRPC request based on\n// conditions (matches), processing it (filters), and forwarding the request to\n// an API object (backendRefs).\ntype GRPCRouteRule struct {\n\t// Matches define conditions used for matching the rule against incoming\n\t// gRPC requests. Each match is independent, i.e. this rule will be matched\n\t// if **any** one of the matches is satisfied.\n\t//\n\t// For example, take the following matches configuration:\n\t//\n\t// ```\n\t// matches:\n\t// - method:\n\t//     service: foo.bar\n\t//   headers:\n\t//     values:\n\t//       version: 2\n\t// - method:\n\t//     service: foo.bar.v2\n\t// ```\n\t//\n\t// For a request to match against this rule, a request should satisfy\n\t// EITHER of the two conditions:\n\t//\n\t// - service of foo.bar AND contains the header `version: 2`\n\t// - service of foo.bar.v2\n\t//\n\t// See the documentation for GRPCRouteMatch on how to specify multiple\n\t// match conditions that should be ANDed together.\n\t//\n\t// If no matches are specified, the implementation must match every gRPC request.\n\t//\n\t// Proxy or Load Balancer routing configuration generated from GRPCRoutes\n\t// MUST prioritize rules based on the following criteria, continuing on\n\t// ties. Merging must not be done between GRPCRoutes and HTTPRoutes.\n\t// Precedence must be given to the rule with the largest number of:\n\t//\n\t// * Characters in a matching non-wildcard hostname.\n\t// * Characters in a matching hostname.\n        // * Characters in a matching service.\n        // * Characters in a matching method.\n\t// * Header matches.\n\t//\n\t// If ties still exist across multiple Routes, matching precedence MUST be\n\t// determined in order of the following criteria, continuing on ties:\n\t//\n\t// * The oldest Route based on creation timestamp.\n\t// * The Route appearing first in alphabetical order by\n\t//   \"{namespace}/{name}\".\n\t//\n\t// If ties still exist within the Route that has been given precedence,\n\t// matching precedence MUST be granted to the first matching rule meeting\n\t// the above criteria.\n\t//\n\t// +optional\n\t// +kubebuilder:validation:MaxItems=8\n\t// +kubebuilder:default={{method: {type: \"Exact\"}}}\n\tMatches []GRPCRouteMatch `json:\"matches,omitempty\"`\n\n\t// Filters define the filters that are applied to requests that match\n\t// this rule.\n\t//\n\t// The effects of ordering of multiple behaviors are currently unspecified.\n\t// This can change in the future based on feedback during the alpha stage.\n\t//\n\t// Conformance-levels at this level are defined based on the type of filter:\n\t//\n\t// - ALL core filters MUST be supported by all implementations.\n\t// - Implementers are encouraged to support extended filters.\n\t// - Implementation-specific custom filters have no API guarantees across\n\t//   implementations.\n\t//\n\t// Specifying a core filter multiple times has unspecified or \n\t// implementation-specific conformance.\n\t// Support: Core\n\t//\n\t// +optional\n\t// +kubebuilder:validation:MaxItems=16\n\tFilters []GRPCRouteFilter `json:\"filters,omitempty\"`\n\n\t// BackendRefs defines the backend(s) where matching requests should be\n\t// sent.\n\n\t// If unspecified or invalid (refers to a nonexistent resource or a Service\n\t// with no endpoints), the rule performs no forwarding. If there are also no\n\t// filters specified that would result in a response being sent, a gRPC `UNAVAILABLE`\n\t// status is returned. `UNAVAILABLE` responses must be sent so that the overall\n\t// weight is respected; if an invalid backend is requested to have 80% of\n\t// requests, then 80% of requests must get a `UNAVAILABLE` instead.\n\t// Support: Core for Kubernetes Service\n\t// Support: Implementation-specific for any other resource\n\t//\n\t// Support for weight: Core\n\t//\n\t// +optional\n\t// +kubebuilder:validation:MaxItems=16\n\tBackendRefs []GRPCBackendRef `json:\"backendRefs,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPRoute for bar.example.com Header-Based Routing\nDESCRIPTION: HTTPRoute configuration that matches traffic for bar.example.com and routes based on the presence of env:canary header, directing to either bar-svc-canary or bar-svc.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/guides/http-routing.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n{% include 'standard/http-routing/bar-httproute.yaml' %}\n```\n\n----------------------------------------\n\nTITLE: Defining a Shared Gateway in Kubernetes\nDESCRIPTION: This YAML snippet defines a shared Gateway resource in the 'infra-ns' namespace. It sets up HTTPS listener for 'foo.example.com' domain and configures namespace-based access control for route attachment.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/guides/multiple-ns.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: gateway.networking.k8s.io/v1beta1\nkind: Gateway\nspec:\n  listeners:\n  - allowedRoutes:\n      namespaces:\n        from: Selector\n        selector:\n          matchLabels:\n            shared-gateway-access: \"true\"\n...\n```\n\n----------------------------------------\n\nTITLE: Defining Simple Traffic Split in HTTPRoute for Kubernetes Gateway API\nDESCRIPTION: This YAML snippet demonstrates how to split traffic between two versions of a service using HTTPRoute. It directs 90% of traffic to foo-v1 and 10% to foo-v2.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/guides/traffic-splitting.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n{% include 'standard/traffic-splitting/simple-split.yaml' %}\n```\n\n----------------------------------------\n\nTITLE: Defining GRPCRouteMatch Struct in Go for Kubernetes Gateway API\nDESCRIPTION: Defines the GRPCRouteMatch struct which specifies predicates for matching gRPC requests, including method and header matching.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1016/index.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// GRPCRouteMatch defines the predicate used to match requests to a given\n// action. Multiple match types are ANDed together, i.e. the match will\n// evaluate to true only if all conditions are satisfied.\n//\n// For example, the match below will match a gRPC request only if its service\n// is `foo` AND it contains the `version: v1` header:\n//\n// ```\n// match:\n//   method:\n//     type: Exact\n//     service: \"foo\"\n//   headers:\n//   - name: \"version\"\n//     value \"v1\"\n// ```\ntype GRPCRouteMatch struct {\n\t// Path specifies a gRPC request service/method matcher. If this field is not\n\t// specified, all services and methods will match.\n\t//\n\t// +optional\n\t// +kubebuilder:default={type: \"Exact\"}\n\tMethod *GRPCMethodMatch `json:\"path,omitempty\"`\n\n\t// Headers specifies gRPC request header matchers. Multiple match values are\n\t// ANDed together, meaning, a request must match all the specified headers\n\t// to select the route.\n\t//\n\t// +listType=map\n\t// +listMapKey=name\n\t// +optional\n\t// +kubebuilder:validation:MaxItems=16\n\tHeaders []GRPCHeaderMatch `json:\"headers,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Example GRPCRoute Resource Definition in YAML\nDESCRIPTION: A complete example of a GRPCRoute resource that demonstrates routing gRPC traffic based on service and method matching, with header matching, filters for request modification and traffic mirroring, and weighted backend routing between two services.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1016/index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkind: GRPCRoute\napiVersion: gateway.networking.k8s.io/v1alpha2\nmetadata:\n  name: foo-grpcroute\nspec:\n  parentRefs:\n  - name: my-gateway\n  hostnames:\n  - foo.com\n  - bar.com\n  rules:\n  - matches:\n      method:\n        service: helloworld.Greeter\n        method:  SayHello\n      headers:\n      - type: Exact\n        name: magic\n        value: foo\n\n    filters:\n    - type: RequestHeaderModifierFilter\n      add:\n        - name: my-header\n          value: foo\n\n    - type: RequestMirrorPolicyFilter\n      destination:\n        backendRef:\n          name: mirror-svc\n\n    backendRefs:\n    - name: foo-v1\n      weight: 90\n    - name: foo-v2\n      weight: 10\n```\n\n----------------------------------------\n\nTITLE: Configuring Complex CORS in HTTPRoute YAML\nDESCRIPTION: Demonstrates a complex CORS configuration in an HTTPRoute resource. It specifies allowed origins, credentials, methods, headers, exposed headers, and max age for preflight requests. This configuration supports more advanced cross-origin scenarios.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1767/index.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: gateway.networking.k8s.io/v1\nkind: HTTPRoute\nmetadata:\n  name: http-route-cors\nspec:\n  hostnames:\n  - http.route.cors.com\n  parentRefs:\n  - group: gateway.networking.k8s.io\n    kind: Gateway\n    name: http-gateway\n  rules:\n  - backendRefs:\n    - kind: Service\n      name: http-route-cors\n      port: 80\n    matches:\n    - path:\n        type: PathPrefix\n        value: /resource/foo\n    filters:\n    - cors:\n      - allowOrigins:\n        - https://foo.example\n        - http://foo.example\n        allowCredentials: \"true\"\n        allowMethods: \n        - GET\n        - PUT\n        - POST\n        - DELETE\n        - PATCH\n        - OPTIONS\n        allowHeaders: \n        - DNT\n        - X-CustomHeader\n        - Keep-Alive\n        - User-Agent\n        - X-Requested-With\n        - If-Modified-Since\n        - Cache-Control\n        - Content-Type\n        - Authorization\n        exposeHeaders: \n        - Content-Security-Policy\n        maxAge: 1728000\n      type: CORS\n```\n\n----------------------------------------\n\nTITLE: Basic HTTPRoute Gateway Attachment\nDESCRIPTION: Example of attaching an HTTPRoute to a Gateway named 'acme-lb'\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/api-types/httproute.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: gateway.networking.k8s.io/v1\nkind: HTTPRoute\nmetadata:\n  name: httproute-example\nspec:\n  parentRefs:\n  - name: acme-lb\n```\n\n----------------------------------------\n\nTITLE: Basic Gateway Configuration in Kubernetes\nDESCRIPTION: Example of a simple automated Gateway deployment configuration that implementations must support. Defines a basic HTTP listener on port 80.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1762/index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: gateway.networking.k8s.io/v1beta1\nkind: Gateway\nmetadata:\n  name: my-gateway\nspec:\n  gatewayClassName: example\n  listeners:\n  - name: default\n    port: 80\n    protocol: HTTP\n```\n\n----------------------------------------\n\nTITLE: Configuring an HTTPRoute Resource in Kubernetes YAML\nDESCRIPTION: This YAML snippet defines an HTTPRoute resource that routes all HTTP traffic from the Gateway to a single backend service named 'foo-svc'. It demonstrates the simplest possible routing configuration.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/guides/simple-gateway.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n{% include 'standard/simple-gateway/httproute.yaml' %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gateway with Strict Route Attachment Rules\nDESCRIPTION: This YAML snippet shows a Gateway configuration that allows specific HTTPRoute attachment. It demonstrates how to set up listeners and define allowed routes based on namespaces and kinds.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/concepts/api-overview.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n{% include 'standard/http-route-attachment/gateway-strict.yaml' %}\n```\n\n----------------------------------------\n\nTITLE: Full Path Rewrite HTTPRoute\nDESCRIPTION: HTTPRoute configuration for complete path rewriting before proxying to upstream services.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/guides/http-redirect-rewrite.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n{% include 'standard/http-redirect-rewrite/httproute-rewrite-full-path.yaml' %}\n```\n\n----------------------------------------\n\nTITLE: Defining GRPCRouteSpec Struct in Go for Kubernetes Gateway API\nDESCRIPTION: Defines the GRPCRouteSpec struct which specifies the desired state of a GRPCRoute, including hostnames and routing rules.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1016/index.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// GRPCRouteSpec defines the desired state of GRPCRoute\ntype GRPCRouteSpec struct {\n\tCommonRouteSpec `json:\",inline\"`\n\n\t// Hostnames defines a set of hostname that should match against the GRPC\n\t// Host header to select a GRPCRoute to process the request. This matches\n\t// the RFC 1123 definition of a hostname with 2 notable exceptions:\n\t//\n\t// 1. IPs are not allowed.\n\t// 2. A hostname may be prefixed with a wildcard label (`*.`). The wildcard\n\t//    label must appear by itself as the first label.\n\t//\n\t// If a hostname is specified by both the Listener and GRPCRoute, there\n\t// must be at least one intersecting hostname for the GRPCRoute to be\n\t// attached to the Listener. For example:\n\t//\n\t// * A Listener with `test.example.com` as the hostname matches GRPCRoutes\n\t//   that have either not specified any hostnames, or have specified at\n\t//   least one of `test.example.com` or `*.example.com`.\n\t// * A Listener with `*.example.com` as the hostname matches GRPCRoutes\n\t//   that have either not specified any hostnames or have specified at least\n\t//   one hostname that matches the Listener hostname. For example,\n\t//   `test.example.com` and `*.example.com` would both match. On the other\n\t//   hand, `example.com` and `test.example.net` would not match.\n\t//\n\t// If both the Listener and GRPCRoute have specified hostnames, any\n\t// GRPCRoute hostnames that do not match the Listener hostname MUST be\n\t// ignored. For example, if a Listener specified `*.example.com`, and the\n\t// GRPCRoute specified `test.example.com` and `test.example.net`,\n\t// `test.example.net` must not be considered for a match.\n\t//\n\t// If both the Listener and GRPCRoute have specified hostnames, and none\n\t// match with the criteria above, then the GRPCRoute is not accepted. The\n\t// implementation must raise an 'Accepted' Condition with a status of\n\t// `False` in the corresponding RouteParentStatus.\n\t//\n\t// If a Route (A) of type HTTPRoute or GRPCRoute is attached to a\n\t// Listener and that listener already has another Route (B) of the other\n\t// type attached and the intersection of the hostnames of A and B is\n\t// non-empty, then the implementation must reject Route A. That is, the\n\t// implementation must raise an 'Accepted' condition with a status of\n\t// 'False' in the corresponding RouteParentStatus.\n\t//\n\t// Support: Core\n\t//\n\t// +optional\n\t// +kubebuilder:validation:MaxItems=16\n\tHostnames []Hostname `json:\"hostnames,omitempty\"`\n\n\t// Rules are a list of GRPC matchers, filters and actions.\n        // \n\t// +optional\n\t// +kubebuilder:validation:MaxItems=16\n\t// +kubebuilder:default={{matches: {{method: {type: \"Exact\"}}}}}\n\tRules []GRPCRouteRule `json:\"rules,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPRoute for Service Mesh in YAML\nDESCRIPTION: This snippet demonstrates how to configure an HTTPRoute resource to attach directly to a Service for service mesh routing. It specifies the parentRef as a Service instead of a Gateway.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/mesh/index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkind: HTTPRoute\nmetadata:\n  name: smiley-route\n  namespace: faces\nspec:\n  parentRefs:\n    - name: smiley\n      kind: Service\n      group: core\n      port: 80\n  rules:\n    ...\n```\n\n----------------------------------------\n\nTITLE: HTTPRoute with Hostname Configuration\nDESCRIPTION: Example of configuring an HTTPRoute with a specific hostname 'my.example.com'\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/api-types/httproute.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: gateway.networking.k8s.io/v1\nkind: HTTPRoute\nmetadata:\n  name: httproute-example\nspec:\n  hostnames:\n  - my.example.com\n```\n\n----------------------------------------\n\nTITLE: Defining HTTPRoute for Store Service\nDESCRIPTION: This YAML snippet creates an HTTPRoute for the 'store' service in the 'store-ns' namespace. It routes '/store' traffic to the 'store' service and attaches to the shared gateway in the 'infra-ns' namespace.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/guides/multiple-ns.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n{% include 'standard/cross-namespace-routing/store-route.yaml' %}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic GatewayClass in YAML\nDESCRIPTION: This snippet shows the basic structure of a GatewayClass resource. It includes the kind, metadata, and spec fields, with the controllerName specified in the spec.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/api-types/gatewayclass.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkind: GatewayClass\nmetadata:\n  name: cluster-gateway\nspec:\n  controllerName: \"example.net/gateway-controller\"\n```\n\n----------------------------------------\n\nTITLE: Hostname Rewrite HTTPRoute\nDESCRIPTION: HTTPRoute configuration for rewriting request hostnames before proxying to upstream services.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/guides/http-redirect-rewrite.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n{% include 'standard/http-redirect-rewrite/httproute-rewrite.yaml' %}\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Rewrites in Kubernetes Gateway API YAML\nDESCRIPTION: Example YAML configuration for an HTTPRoute with a URLRewrite filter. This example shows how to rewrite requests from 'example.com/foo/abc' to 'example.net/bar/abc'.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-726/index.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nkind: HTTPRoute\napiVersion: gateway.networking.k8s.io/v1alpha2\nmetadata:\n  name: http-filter-1\nspec:\n  hostnames:\n  - example.com\n  rules:\n    - matches:\n      - path:\n          type: Prefix\n          value: /foo\n      filters:\n      - type: URLRewrite\n        requestRewrite:\n          hostname: example.net\n          path:\n            type: ReplacePrefixMatch\n            substitution: /bar\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Domain Certificates in Kubernetes Gateway API\nDESCRIPTION: This YAML example shows how to configure a Gateway with different certificates for multiple domains (foo.example.com and bar.example.com). It demonstrates the use of multiple listeners with domain-specific TLS settings.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/guides/tls.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n{% include 'standard/tls-basic.yaml' %}\n```\n\n----------------------------------------\n\nTITLE: HTTPRoute with Timeouts Configuration\nDESCRIPTION: Example of configuring request and backend request timeouts in an HTTPRoute\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/api-types/httproute.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n{% include 'experimental/http-route-timeouts/timeout-example.yaml' %}\n```\n\n----------------------------------------\n\nTITLE: Defining TCP Listeners in Gateway Configuration\nDESCRIPTION: This YAML snippet demonstrates how to define multiple TCP listeners in a Gateway configuration, specifying different ports for each listener.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/guides/tcp.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n  listeners:\n  - name: foo\n    protocol: TCP\n    port: 8080\n  - name: bar\n    protocol: TCP\n    port: 8090\n```\n\n----------------------------------------\n\nTITLE: Adding HTTP Request Header in Kubernetes Gateway API\nDESCRIPTION: This YAML snippet demonstrates how to add a custom header to an HTTP request using a RequestHeaderModifier filter in a Kubernetes Gateway API HTTPRoute resource.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/guides/http-header-modifier.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n{% include 'standard/http-request-header-add.yaml' %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cross-Namespace Certificate References in Kubernetes Gateway API\nDESCRIPTION: This YAML example demonstrates how to configure a Gateway to reference a certificate in a different namespace. It includes the necessary ReferenceGrant to allow the cross-namespace reference, which would otherwise be invalid.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/guides/tls.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n{% include 'standard/tls-cert-cross-namespace.yaml' %}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS Listener with TLS Termination in Kubernetes Gateway API\nDESCRIPTION: This YAML snippet demonstrates how to configure an HTTPS listener with TLS termination in a Kubernetes Gateway. It specifies the protocol, port, TLS mode, and references a certificate stored in a Secret resource.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/guides/tls.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlisteners:\n- protocol: HTTPS # Other possible value is `TLS`\n  port: 443\n  tls:\n    mode: Terminate # If protocol is `TLS`, `Passthrough` is a possible mode\n    certificateRefs:\n    - kind: Secret\n      group: \"\"\n      name: default-cert\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Redirect with HTTPRoute in YAML\nDESCRIPTION: This YAML snippet defines an HTTPRoute resource that configures a TLS redirect for HTTP requests to foo.example.com and bar.example.com. It attaches to the HTTP listener of the Gateway and implements the TLS redirect functionality that was previously configured via an Ingress annotation.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/guides/migrating-from-ingress.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n{% include 'standard/simple-http-https/tls-redirect-route.yaml' %}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP/2 Protocol for Kubernetes Service\nDESCRIPTION: Example of configuring a Kubernetes Service to use HTTP/2 Prior Knowledge protocol on port 8080. The configuration uses the appProtocol field to specify h2c protocol support for the service named 'store'.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/guides/backend-protocol.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: store\nspec:\n  selector:\n    app: store\n  ports:\n  - protocol: TCP\n    appProtocol: kubernetes.io/h2c\n    port: 8080\n    targetPort: 8080\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Request Mirroring in Kubernetes Gateway API\nDESCRIPTION: This YAML snippet demonstrates how to set up HTTP request mirroring using the HTTPRoute resource. It forwards all requests to two services, 'foo-v1' and 'foo-v2', but only generates responses from 'foo-v1'.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/guides/http-request-mirroring.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n{% include 'standard/http-request-mirroring/httproute-mirroring.yaml' %}\n```\n\n----------------------------------------\n\nTITLE: Path-Based Routing to Specific Clusters\nDESCRIPTION: An HTTPRoute configuration that routes requests to different clusters based on URL path prefixes, sending \"/west\" to store-west ServiceImport and \"/east\" to store-east ServiceImport.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1748/index.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n{% include 'standard/multicluster/httproute-location.yaml' %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gateway and HTTPRoute for Direct Reference Binding in Kubernetes\nDESCRIPTION: This example demonstrates the proposed changes for Route-Gateway binding. The Gateway specifies trusted namespaces for Routes, and the HTTPRoute directly references the Gateway it wants to attach to.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-724/index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Gateway\nmetadata:\n  name: lb\n  namespace: infra\nspec:\n  listeners:\n  - name: foo\n    hostname: foo.com\n    port: 80\n    routes:\n      namespaces:\n        from: Selector\n        selector:\n          kubernetes.io/metadata.name: foo\n---\nkind: HTTPRoute\nmetadata:\n  name: foo\n  namespace: foo\nspec:\n  attachTo:\n  - kind: Gateway\n    namespace: infra\n    name: lb\n    sectionName: foo\n  rules:\n  - name: abc\n    matches:\n    - path: /bar\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Request Header in Kubernetes Gateway API\nDESCRIPTION: This YAML snippet shows how to set or modify an existing HTTP request header using a RequestHeaderModifier filter in a Kubernetes Gateway API HTTPRoute resource.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/guides/http-header-modifier.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n    filters:\n    - type: RequestHeaderModifier\n      requestHeaderModifier:\n        set:\n          - name: my-header-name\n            value: my-new-header-value\n```\n\n----------------------------------------\n\nTITLE: Configuring BackendTLSPolicy with Explicit CA Certificates in Kubernetes Gateway API\nDESCRIPTION: This YAML example demonstrates the configuration of a BackendTLSPolicy using explicitly defined CA certificates from a ConfigMap. It specifies the target service and the expected hostname for the backend pods' certificates.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/guides/tls.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n{% include 'experimental/v1alpha3/backendtlspolicy-ca-certs.yaml' %}\n```\n\n----------------------------------------\n\nTITLE: Specifying ParentRefs in TCPRoute for Gateway Attachment\nDESCRIPTION: This YAML snippet shows how to use the 'sectionName' field in the 'parentRefs' of a TCPRoute to attach it to a specific listener on the Gateway.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/guides/tcp.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  parentRefs:\n  - name: my-tcp-gateway\n    sectionName: foo\n```\n\n----------------------------------------\n\nTITLE: Configuring Gateway TLS Client Validation in YAML\nDESCRIPTION: Example YAML configuration showing how to set up TLS client certificate validation on a Gateway listener using CA certificates from a ConfigMap.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-91/index.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: gateway.networking.k8s.io/v1beta1\nkind: Gateway\nmetadata:\n  name: client-validation-basic\nspec:\n  gatewayClassName: acme-lb\n  listeners:\n  - name: foo-https\n    protocol: HTTPS\n    port: 443\n    hostname: foo.example.com\n    tls:\n      certificateRefs:\n      - kind: Secret\n        group: \"\"\n        name: foo-example-com-cert\n      frontendValidation:\n        caCertificateRefs:\n        - kind: ConfigMap\n          group: \"\"\n          name: foo-example-com-ca-cert\n```\n\n----------------------------------------\n\nTITLE: Backend Version Header Example in YAML\nDESCRIPTION: Example of using ResponseHeaderModifier to add version information headers for different backend services in a Gateway API HTTPRoute configuration.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1323/index.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: gateway.networking.k8s.io/v1beta1\nkind: HTTPRoute\nmetadata:\n  name: http-response-header\nspec:\n  hostnames:\n    - response.header.example\n  rules:\n    - backendRefs:\n      - name: example-svc-beta\n        weight: 50\n        port: 80\n        filters:\n           - type: ResponseHeaderModifier\n             responseHeaderModifier:\n              add:\n                name: build\n                value: beta\n      - name: example-svc-stable\n        weight: 50\n        port: 80\n```\n\n----------------------------------------\n\nTITLE: Defining Gateway and HTTPRoute for Mesh Integration in YAML\nDESCRIPTION: This snippet demonstrates how to use a Gateway resource with 'class: mesh' and an associated HTTPRoute to support arbitrary DNS names in a mesh context. It shows the configuration for delegating management of HTTPRoutes to namespaces and defining hostnames for routing.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1294/index.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Gateway\nspec:\n  class: mesh\n  listeners:\n  - name: example\n    hostname: \"example.com\"\n---\nkind: HTTPRoute\nspec:\n  parentRefs:\n    name: foo_gateway\n    sectionName: example\n  hostnames: [\"example.com\", \"foo.svc.cluster.local\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Gateway Resource in YAML\nDESCRIPTION: This YAML snippet defines a Gateway resource that corresponds to the Ingress resource. It configures HTTP and HTTPS listeners, specifies TLS termination, and sets up hostname restrictions for attached HTTPRoutes.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/guides/migrating-from-ingress.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n{% include 'standard/simple-http-https/gateway.yaml' %}\n```\n\n----------------------------------------\n\nTITLE: Path Prefix Rewrite HTTPRoute\nDESCRIPTION: HTTPRoute configuration for path prefix rewriting before proxying to upstream services.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/guides/http-redirect-rewrite.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n{% include 'standard/http-redirect-rewrite/httproute-rewrite-prefix-path.yaml' %}\n```\n\n----------------------------------------\n\nTITLE: HTTPRoute Path and Header Matching\nDESCRIPTION: Example showing path and header matching conditions in HTTPRoute rules\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/api-types/httproute.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: gateway.networking.k8s.io/v1\nkind: HTTPRoute\n...\nspec:\n  rules:\n  - matches:\n    - path:\n        value: \"/foo\"\n      headers:\n      - name: \"version\"\n        value: \"2\"\n    - path:\n        value: \"/v2/foo\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Blue-Green Traffic Rollout with HTTPRoute\nDESCRIPTION: This YAML updates the HTTPRoute to split traffic between foo-v1 (90%) and foo-v2 (10%) for gradual testing in a blue-green deployment scenario.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/guides/traffic-splitting.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n{% include 'standard/traffic-splitting/traffic-split-2.yaml' %}\n```\n\n----------------------------------------\n\nTITLE: Cookie Injection Example in YAML\nDESCRIPTION: Example configuration showing how to use ResponseHeaderModifier to set cookies in responses and create routing rules based on those cookies.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1323/index.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: gateway.networking.k8s.io/v1beta1\nkind: HTTPRoute\nmetadata:\n  name: http-response-header\nspec:\n  hostnames:\n    - response.header.example\n  rules:\n    - matches:\n      - headers:\n        type: Exact\n        name: Cookie\n        value: user=insider\n      backendRefs:\n      - name: foo-svc\n        port: 8080\n\n    - filters:\n      - type: ResponseHeaderModifier\n        responseHeaderModifier:\n          set:\n            name: Set-Cookie\n            value: user=insider\n      backendRefs:\n      - name: example-svc\n        weight: 1\n        port: 80\n```\n\n----------------------------------------\n\nTITLE: GRPCRoute Configuration for foo.example.com\nDESCRIPTION: Configures routing rules for foo.example.com to match the com.example.User.Login method and forward traffic to foo-svc backend.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/guides/grpc-routing.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n{% include 'standard/grpc-routing/foo-grpcroute.yaml' %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Simple CORS in HTTPRoute YAML\nDESCRIPTION: Demonstrates a simple CORS configuration in an HTTPRoute resource. It allows all origins, specific HTTP methods, and headers for cross-origin requests to a specific path.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1767/index.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: gateway.networking.k8s.io/v1\nkind: HTTPRoute\nmetadata:\n  name: http-route-cors\nspec:\n  hostnames:\n  - http.route.cors.com\n  parentRefs:\n  - group: gateway.networking.k8s.io\n    kind: Gateway\n    name: http-gateway\n  rules:\n  - backendRefs:\n    - kind: Service\n      name: http-route-cors\n      port: 80\n    matches:\n    - path:\n        type: PathPrefix\n        value: /resource/foo\n    filters:\n    - cors:\n      - allowOrigins:\n        - *\n        allowMethods: \n        - GET\n        - HEAD\n        - POST\n        allowHeaders: \n        - Accept\n        - Accept-Language\n        - Content-Language\n        - Content-Type\n        - Range\n      type: CORS\n```\n\n----------------------------------------\n\nTITLE: Defining Gateway, HTTPRoute, and ReferenceGrant for Route Binding in Kubernetes YAML\nDESCRIPTION: This YAML snippet demonstrates how to use ReferenceGrant with Gateways selecting Routes. It includes definitions for a Gateway, an HTTPRoute, and a ReferenceGrant to allow the Gateway to select the Route across namespaces.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-724/index.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Gateway\nmetadata:\n  name: xlb\n  namespace: infra\nspec:\n  listeners:\n  - name: foo\n    hostname: foo.com\n    port: 80\n    routes:\n      kind: HTTPRoute\n      selector:\n        gateway: xlb\n      namespaces:\n        from: Selector\n        selector:\n          kubernetes.io/metadata.name: foo\n---\nkind: HTTPRoute\nmetadata:\n  name: foo\n  namespace: foo\n  labels:\n    gateway: xlb\nspec:\n  rules:\n  - name: abc\n    matches:\n    - path: /bar\n---\nkind: ReferenceGrant\nmetadata:\n  name: infra-gateways\n  namespace: foo\nspec:\n  from:\n  - group: gateway.networking.k8s.io\n    kind: Gateway\n    namespace: infra\n  to:\n  - group: gateway.networking.k8s.io\n    kind: HTTPRoute\n```\n\n----------------------------------------\n\nTITLE: Configuring Cross-Namespace Reference with HTTPRoute and ReferenceGrant in Kubernetes\nDESCRIPTION: Example showing how to configure a HTTPRoute in namespace 'foo' to reference a Service in namespace 'bar' using ReferenceGrant. The ReferenceGrant explicitly allows references to Services from HTTPRoutes across namespaces.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/api-types/referencegrant.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: gateway.networking.k8s.io/v1\nkind: HTTPRoute\nmetadata:\n  name: foo\n  namespace: foo\nspec:\n  rules:\n  - matches:\n    - path: /bar\n    backendRefs:\n      - name: bar\n        namespace: bar\n---\napiVersion: gateway.networking.k8s.io/v1beta1\nkind: ReferenceGrant\nmetadata:\n  name: bar\n  namespace: bar\nspec:\n  from:\n  - group: gateway.networking.k8s.io\n    kind: HTTPRoute\n    namespace: foo\n  to:\n  - group: \"\"\n    kind: Service\n```\n\n----------------------------------------\n\nTITLE: Configuring Gateway and TCPRoutes for TCP Traffic Management in Kubernetes\nDESCRIPTION: This YAML configuration defines a Gateway with two TCP listeners and two TCPRoute resources. It demonstrates how to route TCP traffic from specific Gateway ports to different backend services.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/guides/tcp.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n{% include 'experimental/basic-tcp.yaml' %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Private VPC Routable Gateway Address in YAML\nDESCRIPTION: This YAML snippet shows how to request a GatewayAddress that is routable within a cloud provider's VPC. It uses the 'infrastructure.routability' field set to 'Private' to specify the desired private routability.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1651/index.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: gateway.networking.k8s.io/v1beta1\nkind: Gateway\nmetadata:\n  name: prod-web\nspec:\n  gatewayClassName: example\n  infrastructure:\n    routability: Private\n  listeners:\n  - protocol: HTTP\n    port: 80\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple HTTP Response Headers in Kubernetes Gateway API\nDESCRIPTION: This YAML snippet demonstrates how to add multiple custom headers to an HTTP response using a ResponseHeaderModifier filter in a Kubernetes Gateway API HTTPRoute resource.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/guides/http-header-modifier.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n    filters:\n    - type: ResponseHeaderModifier\n      responseHeaderModifier:\n        add:\n        - name: X-Header-Add-1\n          value: header-add-1\n        - name: X-Header-Add-2\n          value: header-add-2\n        - name: X-Header-Add-3\n          value: header-add-3\n```\n\n----------------------------------------\n\nTITLE: Removing HTTP Request Header in Kubernetes Gateway API\nDESCRIPTION: This YAML snippet illustrates how to remove an HTTP request header using a RequestHeaderModifier filter in a Kubernetes Gateway API HTTPRoute resource.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/guides/http-header-modifier.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n    filters:\n    - type: RequestHeaderModifier\n      requestHeaderModifier:\n        remove: [\"x-request-id\"]\n```\n\n----------------------------------------\n\nTITLE: Traffic Splitting Between Service and ServiceImport\nDESCRIPTION: An HTTPRoute that splits traffic between a cluster-local Service (90%) and a Multi-Cluster ServiceImport (10%), enabling hybrid deployment scenarios.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1748/index.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n{% include 'standard/multicluster/httproute-hybrid.yaml' %}\n```\n\n----------------------------------------\n\nTITLE: Attaching GRPCRoute to Gateway\nDESCRIPTION: Example showing how to attach a GRPCRoute to an 'acme-lb' Gateway using parentRefs configuration.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/api-types/grpcroute.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: gateway.networking.k8s.io/v1\nkind: GRPCRoute\nmetadata:\n  name: grpcroute-example\nspec:\n  parentRefs:\n  - name: acme-lb\n```\n\n----------------------------------------\n\nTITLE: Implementing Cross-Namespace References with HTTPRoute and ReferenceGrant\nDESCRIPTION: Example showing how to configure cross-namespace reference from an HTTPRoute in 'foo' namespace to a Service in 'bar' namespace using ReferenceGrant resource.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-709/index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkind: HTTPRoute\nmetadata:\n  name: foo\n  namespace: foo\nspec:\n  rules:\n  - matches:\n    - path: /bar\n    forwardTo:\n      backend:\n      - name: bar\n        namespace: bar\n---\nkind: ReferenceGrant\nmetadata:\n  name: bar\n  namespace: bar\nspec:\n  from:\n  - group: networking.gateway.k8s.io\n    kind: HTTPRoute\n    namespace: foo\n  to:\n  - group: core\n    kind: Service\n```\n\n----------------------------------------\n\nTITLE: Configuring BackendTLSPolicy with System Certificates in Kubernetes Gateway API\nDESCRIPTION: This YAML snippet shows how to configure a BackendTLSPolicy to use system certificates for TLS-encrypted upstream connections. It specifies the target service and the expected hostname for the backend pods' certificates.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/guides/tls.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n{% include 'experimental/v1alpha3/backendtlspolicy-system-certs.yaml' %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Routes for Gateway Listener in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure allowedRoutes within a Gateway listener to permit routes from specific namespaces ('foo' and 'bar') to attach to the Gateway.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/concepts/security-model.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nnamespaces:\n  from: Selector\n  selector:\n    matchExpressions:\n    - key: kubernetes.io/metadata.name\n      operator: In\n      values:\n      - foo\n      - bar\n```\n\n----------------------------------------\n\nTITLE: GRPCRoute Configuration for gRPC Reflection\nDESCRIPTION: Configures routing for gRPC reflection service to enable interactive clients like grpcurl.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/guides/grpc-routing.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n{% include 'standard/grpc-routing/reflection-grpcroute.yaml' %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Fraction-based Request Mirroring in HTTPRoute for North/South Traffic\nDESCRIPTION: Example YAML configuration for an HTTPRoute that demonstrates fraction-based request mirroring. This configuration uses a fraction of 5/1000, resulting in 0.5% of requests going to 'foo-v1' being mirrored to 'foo-v2'.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-3171/index.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: gateway.networking.k8s.io/v1\nkind: HTTPRoute\nmetadata:\n  name: http-filter-mirror\n  labels:\n    gateway: mirror-gateway\nspec:\n  parentRefs:\n  - name: mirror-gateway\n  hostnames:\n  - mirror.example\n  rules:\n  - backendRefs:\n    - name: foo-v1\n      port: 8080\n    filters:\n    - type: RequestMirror\n      requestMirror:\n        backendRef:\n          name: foo-v2\n          port: 8080\n        fraction:\n          numerator: 5\n          denominator: 1000\n```\n\n----------------------------------------\n\nTITLE: Configuring GatewayClass Parameters with Custom Resource in YAML\nDESCRIPTION: This snippet shows how to use the parametersRef field in GatewayClass to reference a custom resource for additional configuration. It includes both the GatewayClass and the referenced Config custom resource.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/api-types/gatewayclass.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# GatewayClass for Gateways that define Internet-facing applications.\nkind: GatewayClass\nmetadata:\n  name: internet\nspec:\n  controllerName: \"example.net/gateway-controller\"\n  parametersRef:\n    group: example.net\n    kind: Config\n    name: internet-gateway-config\n---\napiVersion: example.net/v1alpha1\nkind: Config\nmetadata:\n  name: internet-gateway-config\nspec:\n  ip-address-pool: internet-vips\n  ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Public Internet Routable Gateway Address in YAML\nDESCRIPTION: This YAML snippet demonstrates how to request a GatewayAddress that is routable on the public internet. It uses the 'infrastructure.routability' field set to 'Public' to specify the desired public routability.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1651/index.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: gateway.networking.k8s.io/v1beta1\nkind: Gateway\nmetadata:\n  name: prod-web\nspec:\n  gatewayClassName: example\n  infrastructure:\n    routability: Public\n  listeners:\n  - protocol: HTTP\n    port: 80\n```\n\n----------------------------------------\n\nTITLE: Configuring Method Matches in GRPCRoute\nDESCRIPTION: Example showing how to configure method matching rules for gRPC requests including service and method matching with headers.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/api-types/grpcroute.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: gateway.networking.k8s.io/v1\nkind: GRPCRoute\n...\nmatches:\n  - method:\n      service: com.example.User\n      method: Login\n    headers:\n    - name: version\n      value: \"2\"\n  - method:\n      service: com.example.v2.User\n      method: Login\n```\n\n----------------------------------------\n\nTITLE: Setting HTTPRoute Status with Gateway Parent Reference\nDESCRIPTION: Example showing how to configure the status section of an HTTPRoute to indicate acceptance by a Gateway parent. Demonstrates the status.parents structure with conditions indicating acceptance status.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/api-types/httproute.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: gateway.networking.k8s.io/v1\nkind: HTTPRoute\nmetadata:\n  name: http-example\n...\nstatus:\n  parents:\n  - parentRefs:\n      name: gw-example\n      namespace: gw-example-ns\n    conditions:\n    - type: Accepted\n      status: \"True\"\n```\n\n----------------------------------------\n\nTITLE: Gateway Resource Attachment Configuration\nDESCRIPTION: Complex example demonstrating how to attach HorizontalPodAutoscaler and PodDisruptionBudget to Gateway-generated resources using standardized labels and naming conventions.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1762/index.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: gateway.networking.k8s.io/v1beta1\nkind: Gateway\nmetadata:\n  name: gateway\nspec:\n  gatewayClassName: example\n  listeners:\n  - name: default\n    hostname: \"example.com\"\n    port: 80\n    protocol: HTTP\n---\napiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: gateway\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: gateway-example\n  minReplicas: 2\n  maxReplicas: 5\n  metrics:\n  - type: Resource\n    resource:\n      name: cpu\n      target:\n        type: Utilization\n        averageUtilization: 50\n---\napiVersion: policy/v1\nkind: PodDisruptionBudget\nmetadata:\n  name: gateway\nspec:\n  minAvailable: 1\n  selector:\n    matchLabels:\n      gateway.networking.k8s.io/gateway-name: gateway\n```\n\n----------------------------------------\n\nTITLE: Configuring Namespace Labels for Gateway Access\nDESCRIPTION: This YAML snippet demonstrates how to label namespaces to control access to the shared gateway. Only namespaces with the label 'shared-gateway-access: true' can attach routes to the gateway.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/guides/multiple-ns.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n{% include 'standard/cross-namespace-routing/0-namespaces.yaml' %}\n```\n\n----------------------------------------\n\nTITLE: Example TLSMinimumVersionPolicy Implementation in YAML\nDESCRIPTION: Example of a direct attached policy that sets minimum TLS version requirements on a Gateway Listener. Demonstrates practical usage of policy targeting and labeling.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-2648/index.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.example.io/v1alpha1\nkind: TLSMinimumVersionPolicy\nmetadata:\n  name: minimum12\n  namespace: appns\n  labels:\n    \"gateway.networking.k8s.io/policy\": \"direct\"\nspec:\n  minimumTLSVersion: 1.2\n  targetRef:\n    name: internet\n    group: gateway.networking.k8s.io\n    kind: Gateway\n```\n\n----------------------------------------\n\nTITLE: HTTPS Traffic Forwarding HTTPRoute\nDESCRIPTION: HTTPRoute configuration for handling HTTPS traffic and forwarding it to backend applications.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/guides/http-redirect-rewrite.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n{% include 'standard/http-redirect-rewrite/httproute-redirect-https.yaml' %}\n```\n\n----------------------------------------\n\nTITLE: CORS Filter Function Signature in Rust\nDESCRIPTION: This Rust code snippet defines a function signature for a CORS filter. It demonstrates how a CORS filter could be implemented as a function that takes an HTTP request and returns either a modified request or a response.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1767/index.md#2025-04-22_snippet_19\n\nLANGUAGE: rust\nCODE:\n```\nfn run_filter(req: HTTPRequest) -> FilterResponse;\nenum FilterResponse {\n  Request(HTTPRequest),\n  Response(HTTPResponse)\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Backend References for Kubernetes Services in YAML\nDESCRIPTION: This snippet demonstrates how to configure backend references for Kubernetes Services using the 'backendRefs' field. It shows weight distribution between two services.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-718/index.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n...\nbackendRefs:\n- name: foo-service-v1\n  port: 80\n  weight: 80\n- name: foo-service-canary\n  port: 80\n  weight: 20\n...\n```\n\n----------------------------------------\n\nTITLE: Example TCPRoute with Address Matching in YAML\nDESCRIPTION: Demonstrates practical usage of address matching in a TCPRoute resource, including IPv4, IPv6, and named address examples.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-735/index.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: gateway.networking.k8s.io/v1alpha2\nkind: TCPRoute\nmetadata:\n  name: matching\nspec:\n  rules:\n  - matches:\n    - sourceAddresses:\n      - value: \"192.168.1.1\"\n      - value: \"FE80::0202:B3FF:FE1E:8329\"\n      - type: NamedAddress\n        value: \"my-custom-name\"\n      destinationAddresses:\n      - value: \"10.96.0.1\"\n    backendRefs:\n    - name: my-service\n      port: 8080\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Route Retry in YAML for Gateway API\nDESCRIPTION: This YAML example demonstrates how to configure retry policies for an HTTPRoute in Kubernetes Gateway API. It specifies retry attempts, status codes to retry on, and backoff duration.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1731/index.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: gateway.networking.k8s.io/v1\nkind: HTTPRoute\nmetadata:\n  name: retry-example\nspec:\n  ...\n  rules:\n  - backendRefs:\n    - name: some-service\n      port: 8080\n    retry:\n      codes:\n      - 500\n      - 502\n      - 503\n      - 504\n      attempts: 2\n      backoff: 100ms\n```\n\n----------------------------------------\n\nTITLE: Configuring Consumer HTTPRoute with Timeout in YAML\nDESCRIPTION: This snippet shows how to create a consumer HTTPRoute in a different namespace than the target Service. It sets a custom timeout for clients in the 'fast-clients' namespace when accessing the 'smiley' service.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/mesh/index.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nkind: HTTPRoute\nmetadata:\n  name: smiley-route\n  namespace: fast-clients\nspec:\n  parentRefs:\n  - name: smiley\n    namespace: faces\n    kind: Service\n    group: core\n    port: 80\n  rules:\n    ...\n    timeouts:\n      request: 100ms\n```\n\n----------------------------------------\n\nTITLE: Defining GRPCRoute Struct in Go for Kubernetes Gateway API\nDESCRIPTION: Defines the main GRPCRoute struct with TypeMeta, ObjectMeta, Spec, and Status fields. Includes kubebuilder annotations for Kubernetes API functionality.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1016/index.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// +genclient\n// +kubebuilder:object:root=true\n// +kubebuilder:resource:categories=gateway-api\n// +kubebuilder:subresource:status\n// +kubebuilder:storageversion\n// +kubebuilder:printcolumn:name=\"Hostnames\",type=string,JSONPath=`.spec.hostnames`\n// +kubebuilder:printcolumn:name=\"Age\",type=date,JSONPath=`.metadata.creationTimestamp`\n\n// GRPCRoute provides a way to route gRPC requests. This includes the capability\n// to match requests by hostname, gRPC service, gRPC method, or HTTP/2 header. Filters can be\n// used to specify additional processing steps. Backends specify where matching\n// requests should be routed.\n//\n// Implementations supporting `GRPCRoute` with the `HTTPS` `ProtocolType` must\n// accept HTTP/2 connections without an initial upgrade from HTTP/1.1. If the\n// implementation does not support this, then it should raise a \"Detached\"\n// condition for the affected listener with a reason of \"UnsupportedProtocol\"\n//\n// Implementations supporting `GRPCRoute` with the `HTTP` `ProtocolType` must\n// support cleartext HTTP/2 without an initial upgrade from HTTP/1.1. If the\n// implementation does not support this, then it should raise a \"Detached\"\n// condition for the affected listener with a reason of \"UnsupportedProtocol\"\n//\n// Support: Extended\ntype GRPCRoute struct {\n\tmetav1.TypeMeta   `json:\",inline\"`\n\tmetav1.ObjectMeta `json:\"metadata,omitempty\"`\n\n\t// Spec defines the desired state of GRPCRoute.\n\tSpec GRPCRouteSpec `json:\"spec,omitempty\"`\n\n\t// Status defines the current state of GRPCRoute.\n\tStatus GRPCRouteStatus `json:\"status,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Gateway Status Configuration\nDESCRIPTION: YAML configuration example for Gateway status with listener specifications\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-724/index.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nstatus:\n  listeners:\n  - name: foo\n    supportedKinds:\n    - group: gateway.networking.k8s.io\n      kind: HTTPRoute\n    attachedRoutes: 1\n    conditions:\n    - ...\n```\n\n----------------------------------------\n\nTITLE: Implementing CORS Middleware in Traefik using YAML\nDESCRIPTION: This YAML example demonstrates how to implement CORS middleware in Traefik. It sets up rules for allowed methods, headers, origins, and other CORS-related configurations.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1767/index.md#2025-04-22_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: traefik.io/v1alpha1\nkind: Middleware\nmetadata:\n  name: cors-header\nspec:\n  headers:\n    accessControlAllowMethods:\n      - \"GET\"\n      - \"OPTIONS\"\n      - \"PUT\"\n    accessControlAllowHeaders:\n      - \"*\"\n    accessControlAllowOriginList:\n      - \"https://foo.example\"\n      - \"http://foo.example\"\n     accessControlAllowCredentials: true\n    accessControlMaxAge: 100\n    addVaryHeader: true\n```\n\n----------------------------------------\n\nTITLE: Defining ServiceBinding with HTTPRoute in YAML\nDESCRIPTION: Example showing a ServiceBinding resource pattern with corresponding HTTPRoute configuration for mesh service routing with traffic splitting.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1294/index.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nkind: ServiceBinding\nmetadata:\n  name: foo_binding\nspec:\n  parentRefs:\n  - kind: Service\n    name: foo\n---\nspec:\n  parentRefs:\n  - kind: ServiceBinding\n    name: foo_binding\n  rules:\n    backendRefs:\n    - kind: Service\n      name: foo\n      weight: 90\n    - kind: Service\n      name: foo_v2\n      weight: 10\n```\n\n----------------------------------------\n\nTITLE: Gateway IP Address Configuration\nDESCRIPTION: Example showing how to configure a specific IP address for a Gateway using the spec.addresses field. This affects the Gateway's reachable address and Service configuration.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1762/index.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: gateway.networking.k8s.io/v1beta1\nkind: Gateway\nmetadata:\n  name: my-gateway\nspec:\n  addresses:\n  - type: IPAddress\n    value: 1.1.1.1\n  gatewayClassName: example\n  listeners:\n  - name: default\n    port: 80\n    protocol: HTTP\n```\n\n----------------------------------------\n\nTITLE: Configuring Gateway with Namespace-based Route Attachment\nDESCRIPTION: This YAML snippet illustrates a more permissive Gateway configuration that allows HTTPRoute resources to attach from namespaces with a specific label. It uses the allowedRoutes field to define attachment rules.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/concepts/api-overview.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n{% include 'standard/http-route-attachment/gateway-namespaces.yaml' %}\n```\n\n----------------------------------------\n\nTITLE: Defining Gateway Spec Fields in Markdown\nDESCRIPTION: Lists the main fields of the Gateway spec, including GatewayClassName, Listeners, and Addresses. These fields define the configuration for the Gateway resource.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/api-types/gateway.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n*   `GatewayClassName`- Defines the name of a `GatewayClass` object used by\n    this Gateway.\n*   `Listeners`-  Define the hostnames, ports, protocol, termination, TLS\n    settings and which routes can be attached to a listener.\n*   `Addresses`- Define the network addresses requested for this gateway.\n```\n\n----------------------------------------\n\nTITLE: Deploying Simple Gateway in Kubernetes\nDESCRIPTION: This YAML defines a basic Gateway resource for the traffic splitting example. It sets up a gateway listening on port 80 for HTTP traffic.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/guides/traffic-splitting.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n{% include 'standard/simple-gateway/gateway.yaml' %}\n```\n\n----------------------------------------\n\nTITLE: Setting Namespace-wide Retry Policy Defaults\nDESCRIPTION: Shows how to configure default retry policies that affect all Gateways within a namespace.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-2649/index.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.example.io/v1alpha1\nkind: RetryOnPolicy\nmetadata:\n  name: retryon5xx\n  namespace: appns\nspec:\n  defaults:\n    retryOn:\n      - \"501\"\n      - \"502\"\n      - \"503\"\n  targetRef:\n    kind: Namespace\n    group: \"\"\n    name: appns\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTPRoute with Section-Based RetryPolicy in Kubernetes Gateway API\nDESCRIPTION: Example showing how to apply a RetryPolicy to a specific section of an HTTPRoute using the sectionName field. The policy targets a specific rule named 'bar' within the HTTPRoute.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-2648/index.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: gateway.networking.k8s.io/v1alpha2\nkind: HTTPRoute\nmetadata:\n  name: http-app-1\n  labels:\n    app: foo\nspec:\n  hostnames:\n  - \"foo.com\"\n  rules:\n  - name: bar\n    matches:\n    - path:\n        type: Prefix\n        value: /bar\n    backendRefs:\n    - name: my-service1\n      port: 8080\n---\napiVersion: networking.acme.io/v1alpha2\nkind: RetryPolicy\nmetadata:\n  name: foo\nspec:\n  maxRetries: 5\n  targetRef:\n    name: http-app-1\n    group: gateway.networking.k8s.io\n    kind: HTTPRoute\n    sectionName: bar\n```\n\n----------------------------------------\n\nTITLE: Configuring Virtual Type Targeting with RetryPolicy in YAML\nDESCRIPTION: Example of applying policies to external services using virtual resource types. Shows how to configure a RetryPolicy targeting an ExternalService with retry settings.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-713/index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.acme.io/v1alpha1\nkind: RetryPolicy\nmetadata:\n  name: foo\nspec:\n  default:\n    maxRetries: 5\n  targetRef:\n    group: networking.acme.io\n    kind: ExternalService\n    name: foo.com\n```\n\n----------------------------------------\n\nTITLE: Defining GRPCRouteFilter Struct in Go for Kubernetes Gateway API\nDESCRIPTION: This snippet defines the GRPCRouteFilter struct, which specifies processing steps for gRPC requests or responses. It includes fields for filter type and various filter implementations.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1016/index.md#2025-04-22_snippet_10\n\nLANGUAGE: Go\nCODE:\n```\n// GRPCRouteFilter defines processing steps that must be completed during the\n// request or response lifecycle. GRPCRouteFilters are meant as an extension\n// point to express processing that may be done in Gateway implementations. Some\n// examples include request or response modification, implementing\n// authentication strategies, rate-limiting, and traffic shaping. API\n// guarantee/conformance is defined based on the type of the filter.\ntype GRPCRouteFilter struct {\n\t// Type identifies the type of filter to apply. As with other API fields,\n\t// types are classified into three conformance levels:\n\t//\n\t// - Core: Filter types and their corresponding configuration defined by\n\t//   \"Support: Core\" in this package, e.g. \"RequestHeaderModifier\". All\n\t//   implementations must support core filters.\n\t//\n\t// - Extended: Filter types and their corresponding configuration defined by\n\t//   \"Support: Extended\" in this package, e.g. \"RequestMirror\". Implementers\n\t//   are encouraged to support extended filters.\n\t//\n\t// - Custom: Filters that are defined and supported by specific vendors.\n\t//   In the future, filters showing convergence in behavior across multiple\n\t//   implementations will be considered for inclusion in extended or core\n\t//   conformance levels. Filter-specific configuration for such filters\n\t//   is specified using the ExtensionRef field. `Type` should be set to\n\t//   \"ExtensionRef\" for custom filters.\n\t//\n\t// Implementers are encouraged to define custom implementation types to\n\t// extend the core API with implementation-specific behavior.\n\t//\n\t// If a reference to a custom filter type cannot be resolved, the filter\n\t// MUST NOT be skipped. Instead, requests that would have been processed by\n\t// that filter MUST receive a HTTP error response.\n\t//\n\t// +unionDiscriminator\n\t// +kubebuilder:validation:Enum=RequestHeaderModifier;RequestMirror;ExtensionRef\n\t// <gateway:experimental:validation:Enum=RequestHeaderModifier;RequestMirror;ExtensionRef>\n\tType GRPCRouteFilterType `json:\"type\"`\n\n\t// RequestHeaderModifier defines a schema for a filter that modifies request\n\t// headers.\n\t//\n\t// Support: Core\n\t//\n\t// Support: Core\n\t//\n\t// +optional\n\tRequestHeaderModifier *HTTPRequestHeaderFilter `json:\"requestHeaderModifier,omitempty\"`\n\n\t// RequestMirror defines a schema for a filter that mirrors requests.\n\t// Requests are sent to the specified destination, but responses from\n\t// that destination are ignored.\n\t//\n\t// Support: Extended\n\t//\n\t// +optional\n\tRequestMirror *HTTPRequestMirrorFilter `json:\"requestMirror,omitempty\"`\n\n\t// ExtensionRef is an optional, implementation-specific extension to the\n\t// \"filter\" behavior.  For example, resource \"myroutefilter\" in group\n\t// \"networking.example.net\"). ExtensionRef MUST NOT be used for core and\n\t// extended filters.\n\t//\n\t// Support: Implementation-specific\n\t// Support: Implementation-specific\n\t//\n\t// +optional\n\tExtensionRef *LocalObjectReference `json:\"extensionRef,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Route Parent Reference Implementation\nDESCRIPTION: Definition of ParentRef struct for Route specifications with validation rules and support levels\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-724/index.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ntype ParentRef struct {\n  // Group is the group of the referent.\n  //\n  // Support: Core\n  //\n  // +kubebuilder:validation:MinLength=1\n  // +kubebuilder:validation:MaxLength=253\n  // +kubebuilder:default=gateway.networking.k8s.io\n  Group string `json:\"group\"`\n\n  // Kind is kind of the referent.\n  //\n  // Support: Core (Gateway)\n  // Support: Extended (Other Resources)\n  //\n  // +kubebuilder:validation:MinLength=1\n  // +kubebuilder:validation:MaxLength=253\n  // +kubebuilder:default=Gateway\n  // +optional\n  Kind *string `json:\"kind,omitempty\"`\n\n  // Namespace is the namespace of the referent. When unspecified (empty\n  // string), this will either be:\n  //\n  // * local namespace of the target is a namespace scoped resource\n  // * no namespace (not applicable) if the target is cluster-scoped.\n  //\n  // Support: Extended\n  //\n  // +kubebuilder:validation:MinLength=1\n  // +kubebuilder:validation:MaxLength=253\n  // +optional\n  Namespace *string `json:\"namespace,omitempty\"`\n\n  // Scope represents if this refers to a cluster or namespace scoped resource.\n  // This may be set to \"Cluster\" or \"Namespace\".\n  //\n  // Support: Core (Namespace)\n  // Support: Extended (Cluster)\n  //\n  // +kubebuilder:validation:Enum=Cluster;Namespace\n  // +kubebuilder:default=Namespace\n  // +optional\n  Scope *string `json:\"scope,omitempty\"`\n\n  // Name is the name of the referent.\n  //\n  // Support: Core\n  //\n  // +kubebuilder:validation:MinLength=1\n  // +kubebuilder:validation:MaxLength=253\n  Name string `json:\"name\"`\n\n  // SectionName is the name of a section within the target resource.\n  //\n  // Support: Core\n  //\n  // +kubebuilder:validation:MinLength=1\n  // +kubebuilder:validation:MaxLength=253\n  // +optional\n  SectionName *string `json:\"sectionName,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Complete HTTPRoute Configuration Example in YAML\nDESCRIPTION: This snippet provides a complete example of an HTTPRoute configuration, including hostname, rules, matches, and backend references. It demonstrates how to set up routing based on header matching and weight distribution.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-718/index.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: gateway.networking.k8s.io/v1alpha2\nkind: HTTPRoute\nmetadata:\n  name: bar-route\n  labels:\n    gateway: prod-web-gw\nspec:\n  hostnames:\n  - \"bar.example.com\"\n  rules:\n  - matches:\n    - headers:\n        type: Exact\n        values:\n          env: canary\n    backendRefs:\n    - name: foo-service-v1\n      port: 80\n      weight: 80\n    - name: foo-service-canary\n      port: 80\n      weight: 20\n```\n\n----------------------------------------\n\nTITLE: ParentReference with Nested Services and Hostnames\nDESCRIPTION: Extended ParentReference configuration demonstrating service and hostname definitions for different Gateway and Mesh implementations.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1294/index.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nparentRefs:\n- kind: Mesh\n  name: coolmesh\n  services:\n  - name: foo\n    kind: Service\n- kind: Gateway\n  name: staging\n  hostnames: [staging.example.com]\n- kind: Gateway\n  name: prod\n  hostnames: [prod.example.com]\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Persistence via BackendLBPolicy for Routes\nDESCRIPTION: YAML configuration showing two route paths pointing to a service that has session persistence enabled via BackendLBPolicy. This demonstrates how different route rules should maintain separate session persistence even when targeting the same service.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1619/index.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nkind: HTTPRoute\nmetadata:\n  name: routeX\nspec:\n  rules:\n  - matches:\n    - path:\n      value: /a\n    backendRefs:\n    - name: servicev1\n  - matches:\n    - path:\n      value: /b\n    backendRefs:\n    - name: servicev1\n---\nkind: BackendLBPolicy\nmetadata:\n  name: lbp\nspec:\n  targetRef:\n    kind: Service\n    Name: servicev1\n  sessionPersistence:\n    sessionName: service-cookie\n    type: Cookie\n```\n\n----------------------------------------\n\nTITLE: HTTP to HTTPS Redirect HTTPRoute Configuration\nDESCRIPTION: HTTPRoute configuration that redirects HTTP traffic to HTTPS by attaching to the HTTP listener.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/guides/http-redirect-rewrite.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n{% include 'standard/http-redirect-rewrite/httproute-redirect-http.yaml' %}\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP Route Retry Structures in Go for Gateway API\nDESCRIPTION: This Go code defines structures for HTTP route retry configuration, including HTTPRouteRule, HTTPRouteRetry, HTTPRouteRetryStatusCode, and Duration. It specifies fields for retry attempts, backoff, and status codes to retry on.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1731/index.md#2025-04-22_snippet_2\n\nLANGUAGE: golang\nCODE:\n```\ntype HTTPRouteRule struct {\n    // Retry defines the configuration for when to retry an HTTP request.\n    //\n    // Support: Extended\n    //\n    // +optional\n    // <gateway:experimental>\n    Retry *HTTPRouteRetry `json:\"retry,omitempty\"`\n\n    // ...\n}\n\n// HTTPRouteRetry defines retry configuration for an HTTPRoute.\n//\n// Implementations SHOULD retry on connection errors (disconnect, reset, timeout,\n// TCP failure) if a retry stanza is configured.\n//\ntype HTTPRouteRetry struct {\n    // Codes defines the HTTP response status codes for which a backend request\n    // should be retried.\n    //\n    // Support: Extended\n    //\n    // +optional\n    // <gateway:experimental>\n    Codes []HTTPRouteRetryStatusCode `json:\"codes,omitempty\"`\n\n    // Attempts specifies the maximum number of times an individual request\n    // from the gateway to a backend should be retried.\n    //\n    // If the maximum number of retries has been attempted without a successful\n    // response from the backend, the Gateway MUST return an error.\n    //\n    // When this field is unspecified, the number of times to attempt to retry\n    // a backend request is implementation-specific.\n    //\n    // Support: Extended\n    //\n    // +optional\n    Attempts *Int `json:\"attempts,omitempty\"`\n\n    // Backoff specifies the minimum duration a Gateway should wait between\n    // retry attempts and is represented in Gateway API Duration formatting.\n    //\n    // For example, setting the `rules[].retry.backoff` field to the value\n    // `100ms` will cause a backend request to first be retried approximately\n    // 100 milliseconds after timing out or receiving a response code configured\n    // to be retryable.\n    //\n    // An implementation MAY use an exponential or alternative backoff strategy\n    // for subsequent retry attempts, MAY cap the maximum backoff duration to\n    // some amount greater than the specified minimum, and MAY add arbitrary\n    // jitter to stagger requests, as long as unsuccessful backend requests are\n    // not retried before the configured minimum duration.\n    //\n    // If a Request timeout (`rules[].timeouts.request`) is configured on the\n    // route, the entire duration of the initial request and any retry attempts\n    // MUST not exceed the Request timeout duration. If any retry attempts are\n    // still in progress when the Request timeout duration has been reached,\n    // these SHOULD be canceled if possible and the Gateway MUST immediately\n    // return a timeout error.\n    //\n    // If a BackendRequest timeout (`rules[].timeouts.backendRequest`) is\n    // configured on the route, any retry attempts which reach the configured\n    // BackendRequest timeout duration without a response SHOULD be canceled if\n    // possible and the Gateway should wait for at least the specified backoff\n    // duration before attempting to retry the backend request again.\n    //\n    // If a BackendRequest timeout is _not_ configured on the route, retry\n    // attempts MAY time out after an implementation default duration, or MAY\n    // remain pending until a configured Request timeout or implementation\n    // default duration for total request time is reached.\n    //\n    // When this field is unspecified, the time to wait between retry attempts\n    // is implementation-specific.\n    //\n    // Support: Extended\n    //\n    // +optional\n    Backoff *Duration `json:\"backoff,omitempty\"`\n}\n\n// HTTPRouteRetryStatusCode defines an HTTP response status code for\n// which a backend request should be retried.\n//\n// Implementations MUST support the following status codes as retryable:\n//\n// * 500\n// * 502\n// * 503\n// * 504\n//\n// Implementations MAY support specifying additional discrete values in the\n// 500-599 range.\n//\n// Implementations SHOULD NOT support retrying status codes in the 100-399\n// range, as these responses are generally not appropriate to retry.\n//\n// Implementations MAY support specifying discrete values in the 400-499 range,\n// which are often inadvisable to retry.\n//\n// Implementations MAY support discrete values in the 600-999 (inclusive)\n// range, which are not valid for HTTP clients, but are sometimes used for\n// communicating application-specific errors.\n//\n// +kubebuilder:validation:Minimum:=100\n// +kubebuilder:validation:Maximum:=999\ntype HTTPRouteRetryStatusCode int\n\n// Duration is a string value representing a duration in time. The format is\n// as specified in GEP-2257, a strict subset of the syntax parsed by Golang\n// time.ParseDuration.\n//\n// +kubebuilder:validation:Pattern=`^([0-9]{1,5}(h|m|s|ms)){1,4}$`\ntype Duration string\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS in Istio using VirtualService CRD\nDESCRIPTION: This YAML snippet illustrates how to configure CORS in Istio using the VirtualService Custom Resource Definition. It sets various CORS policies including allowed origins, methods, headers, and caching duration for preflight requests.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1767/index.md#2025-04-22_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.istio.io/v1\nkind: VirtualService\nmetadata:\n  name: http-route-cors\nspec:\n  hosts:\n  - http.route.cors.com\n  http:\n  - route:\n    - destination:\n        host: cors.svc.cluster.local\n        subset: v1\n    corsPolicy:\n      allowOrigins:\n      - exact: https://foo.example\n      - exact: http://foo.example\n      allowMethods:\n      - GET\n      - HEAD\n      - POST\n      allowCredentials: false\n      allowHeaders:\n      - X-Foo-Example\n      maxAge: \"24h\"\n```\n\n----------------------------------------\n\nTITLE: Extending the HTTPRequestRedirect struct in Go for Gateway API\nDESCRIPTION: Augmentation of the existing HTTPRequestRedirect filter to support path redirection. This adds a Path field of type HTTPPathModifier to enable path-based redirects alongside host redirects.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-726/index.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// HTTPRequestRedirect defines a filter that redirects a request. At most one of\n// these filters may be used on a Route rule. This may not be used on the same\n// Route rule as a HTTPRequestRewrite filter.\n//\n// Support: Extended\ntype HTTPRequestRedirect struct {\n  // Path defines a path redirect.\n  //\n  // Support: Extended\n  //\n  // +optional\n  Path *HTTPPathModifier `json:\"path,omitempty\"`\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Introducing GRPCRoute Resource\nDESCRIPTION: YAML snippet showing the introduction of the GRPCRoute resource for simplifying routing of GRPC requests.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/CHANGELOG/0.x-CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n- Introduce GRPCRoute resource. (#1115, @gnossen)\n```\n\n----------------------------------------\n\nTITLE: Defining GRPCMethodMatch Struct in Go for Kubernetes Gateway API\nDESCRIPTION: This snippet defines the GRPCMethodMatch struct, which specifies how to match gRPC methods. It includes fields for Service and Method, both of which are optional strings with validation rules.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1016/index.md#2025-04-22_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\n// At least one of Service and Method must be a non-empty string.\n// +optional\n// +kubebuilder:default=\"\"\n// +kubebuilder:validation:MaxLength=1024\nService *string `json:\"value,omitempty\"`\n\n// Value of the method to match against. If left empty or omitted, will\n// match all services.\n//\n// At least one of Service and Method must be a non-empty string.\n// +optional\n// +kubebuilder:default=\"\"\n// +kubebuilder:validation:MaxLength=1024\nMethod *string `json:\"value,omitempty\"`\n```\n\n----------------------------------------\n\nTITLE: Defining HTTPHeaderModifier Structure in Go\nDESCRIPTION: Golang struct definition for HTTPHeaderModifier type that enables modification of HTTP headers in requests and responses. Includes fields for setting, adding, and removing headers with validation constraints.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1323/index.md#2025-04-22_snippet_0\n\nLANGUAGE: golang\nCODE:\n```\ntype HTTPHeaderModifier struct {\n    // Set overwrites the request with the given header (name, value)\n    // before the action.\n    // +optional\n    // +listType=map\n    // +listMapKey=name\n    // +kubebuilder:validation:MaxItems=16\n    Set []HTTPHeader `json:\"set,omitempty\"`\n\n    // Add adds the given header(s) (name, value) to the request\n    // before the action. It appends to any existing values associated\n    // with the header name.\n\n    // +optional\n    // +listType=map\n    // +listMapKey=name\n    // +kubebuilder:validation:MaxItems=16\n    Add []HTTPHeader `json:\"add,omitempty\"`\n\n    // Remove the given header(s) from the HTTP request before the action. The\n    // value of Remove is a list of HTTP header names. Note that the header\n    // names are case-insensitive (see\n    // https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).\n    // +optional\n    // +kubebuilder:validation:MaxItems=16\n    Remove []string `json:\"remove,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HTTPRoute for bar.example.com in YAML\nDESCRIPTION: This YAML snippet defines an HTTPRoute resource for the bar.example.com hostname. It attaches to the HTTPS listener of the Gateway and defines routing rules corresponding to the Ingress rules for this hostname.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/guides/migrating-from-ingress.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n{% include 'standard/simple-http-https/bar-route.yaml' %}\n```\n\n----------------------------------------\n\nTITLE: Configuring GatewayClass Resource\nDESCRIPTION: Creates a GatewayClass resource for Envoy Gateway controller configuration\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/hack/implementations/envoy-gateway/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncat <<EOF | kubectl apply -f -\nkind: GatewayClass\napiVersion: gateway.networking.k8s.io/v1\nmetadata:\n  name: envoy-gateway\nspec:\n  controllerName: gateway.envoyproxy.io/gatewayclass-controller\nEOF\n```\n\n----------------------------------------\n\nTITLE: Adding BackendTLS Field to Gateway Specification in Go\nDESCRIPTION: Defines a new BackendTLS field at the top level of Gateways to configure TLS settings when connecting to backends, including ClientCertificateRef for client certificates and private keys.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-3155/index.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype GatewaySpec struct {\n  // BackendTLS configures TLS settings for when this Gateway is connecting to\n  // backends with TLS.\n  BackendTLS GatewayBackendTLS `json:\"backendTLS,omitempty\"`\n}\ntype GatewayBackendTLS struct {\n  // ClientCertificateRef is a reference to an object that contains a Client\n  // Certificate and the associated private key.\n  //\n  // References to a resource in different namespace are invalid UNLESS there\n  // is a ReferenceGrant in the target namespace that allows the certificate\n  // to be attached. If a ReferenceGrant does not allow this reference, the\n  // \"ResolvedRefs\" condition MUST be set to False for this listener with the\n  // \"RefNotPermitted\" reason.\n  //\n  // ClientCertificateRef can reference to standard Kubernetes resources, i.e.\n  // Secret, or implementation-specific custom resources.\n  //\n  // This setting can be overridden on the service level by use of BackendTLSPolicy.\n  ClientCertificateRef SecretObjectReference `json:\"clientCertificateRef,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Wildcard TLS Listeners in Kubernetes Gateway API\nDESCRIPTION: This YAML snippet illustrates the configuration of a Gateway with a wildcard certificate for *.example.com and a specific certificate for foo.example.com. It shows how specific matches take priority over wildcard matches in TLS configuration.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/guides/tls.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n{% include 'standard/wildcard-tls-gateway.yaml' %}\n```\n\n----------------------------------------\n\nTITLE: Envoy Retry Policy Configuration\nDESCRIPTION: Comprehensive documentation of Envoy's retry policy configuration options including retry conditions, backoff algorithms, timeouts, and circuit breaker settings. Describes the default exponential backoff behavior and various retry conditions supported by Envoy.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1731/index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* retry_on: Specifies retry conditions\\n* num_retries: Allowed number of retries (default: 1)\\n* per_try_timeout: Timeout per retry attempt\\n* per_try_idle_timeout: Ensures incremental progress\\n* retriable_status_codes: Specific response codes for retry\\n* retry_back_off: Base and max interval configuration\\n* rate_limited_retry_back_off: Advanced timing configuration\\n* retriable_headers: Response headers triggering retries\\n* retriable_request_headers: Required request headers for retries\n```\n\n----------------------------------------\n\nTITLE: Running Gateway API Conformance Tests\nDESCRIPTION: Commands to set up the environment variables and execute Gateway API conformance tests using make targets. This configures the Contour image to use and enables generation of a conformance report.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v0.8.1/projectcontour-contour/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport CONTOUR_E2E_IMAGE=\"ghcr.io/projectcontour/contour:$VERSION\"\nexport GENERATE_GATEWAY_CONFORMANCE_REPORT=\"true\"\nmake setup-kind-cluster run-gateway-conformance cleanup-kind\n```\n\n----------------------------------------\n\nTITLE: HTTP CORS Filter Configuration Structure\nDESCRIPTION: Comprehensive definition of the HTTPCORSFilter type with detailed configuration options for CORS handling, including origin allowlisting, credentials management, and method permissions.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1767/index.md#2025-04-22_snippet_7\n\nLANGUAGE: golang\nCODE:\n```\ntype HTTPCORSFilter struct {\n    AllowOrigins []string `json:\"allowOrigins,omitempty\"`\n    AllowCredentials AllowCredentialsType `json:\"allowCredentials,omitempty\"`\n    AllowMethods []HTTPMethod `json:\"allowMethods,omitempty\"`\n    AllowHeaders []HTTPMethod `json:\"allowHeaders,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP Route Filter Structure Definition\nDESCRIPTION: Defines the HTTPRouteFilter struct with optional CORS configuration field. This structure allows for CORS filter integration into the HTTP routing system.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1767/index.md#2025-04-22_snippet_6\n\nLANGUAGE: golang\nCODE:\n```\ntype HTTPRouteFilter struct {\n    CORS *HTTPCORSFilter `json:\"cors,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HTTPURLRewrite struct in Go for Gateway API\nDESCRIPTION: Definition of a new HTTPURLRewrite filter type that enables request modification during forwarding. It supports both hostname rewrites and path rewrites using the HTTPPathModifier type.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-726/index.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// HTTPURLRewrite defines a filter that modifies a request during forwarding.\n// At most one of these filters may be used on a Route rule. This may not be\n// used on the same Route rule as a HTTPRequestRedirect filter.\n//\n// Support: Extended\ntype HTTPURLRewrite struct {\n  // Hostname is the value to be used to replace the Host header value during\n  // forwarding.\n  //\n  // Support: Extended\n  //\n  // +optional\n  // +kubebuilder:validation:MaxLength=255\n  Hostname *string `json:\"hostname,omitempty\"`\n\n  // Path defines a path rewrite.\n  //\n  // Support: Extended\n  //\n  // +optional\n  Path *HTTPPathModifier `json:\"path,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Percentage-based Request Mirroring in HTTPRoute for North/South Traffic\nDESCRIPTION: Example YAML configuration for an HTTPRoute that demonstrates percentage-based request mirroring using the 'percent' field. In this example, 42% of requests going to 'foo-v1' are mirrored to 'foo-v2'.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-3171/index.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: gateway.networking.k8s.io/v1\nkind: HTTPRoute\nmetadata:\n  name: http-filter-mirror\n  labels:\n    gateway: mirror-gateway\nspec:\n  parentRefs:\n  - name: mirror-gateway\n  hostnames:\n  - mirror.example\n  rules:\n  - backendRefs:\n    - name: foo-v1\n      port: 8080\n    filters:\n    - type: RequestMirror\n      requestMirror:\n        backendRef:\n          name: foo-v2\n          port: 8080\n        percent: 42\n```\n\n----------------------------------------\n\nTITLE: Traffic Splitting with Inline SessionPersistence Configuration\nDESCRIPTION: YAML configuration for route-level session persistence with traffic splitting between two services. This setup maintains persistence for both services in the split, preserving the backend selection across requests when a cookie is present.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1619/index.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nkind: HTTPRoute\nmetadata:\n  name: split-route\nspec:\n  rules:\n  - backendRefs:\n    - name: servicev1\n      weight: 50\n    - name: servicev2\n      weight: 50\n    sessionPersistence:\n      sessionName: split-route-cookie\n      type: Cookie\n```\n\n----------------------------------------\n\nTITLE: TCPRoute Service Mesh Port Matching Example\nDESCRIPTION: YAML example showing how to configure a TCPRoute with port matching in a service mesh context, demonstrating traffic routing from port 8000 to port 8080.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-957/index.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nkind: TCPRoute\nmetadata:\n  name: example\n  namespace: example\nspec:\n  parentRef:\n  - name: my-mesh\n    group: example.io\n    kind: Mesh\n    port: 8000\n  rules:\n  - backendRefs\n    - name: foo\n      port: 8080\n```\n\n----------------------------------------\n\nTITLE: Defining AllowHeaders Field for CORS in Go\nDESCRIPTION: Defines the AllowHeaders field for CORS configuration in Gateway API. This field specifies which HTTP headers can be used during the actual request. It supports using a wildcard '*' and has special behavior when combined with AllowCredentials.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1767/index.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n// +listType=set\n// +kubebuilder:validation:MaxItems=64\nAllowHeaders []string `json:\"allowHeaders,omitempty\"`\n```\n\n----------------------------------------\n\nTITLE: Configuring Specific Routability and Address for Gateway in YAML\nDESCRIPTION: This YAML snippet shows how to request a GatewayAddress with a specific routability (Cluster) and a specific address value. It uses both the 'infrastructure.routability' and 'addresses' fields to define the desired configuration.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1651/index.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: gateway.networking.k8s.io/v1beta1\nkind: Gateway\nmetadata:\n  name: prod-web\nspec:\n  gatewayClassName: example\n  infrastructure:\n    routability: Cluster\n  listeners:\n  - protocol: HTTP\n    port: 80\n  addresses:\n  - value: 10.0.0.8\n```\n\n----------------------------------------\n\nTITLE: Configuring Hostnames in GRPCRoute\nDESCRIPTION: Example demonstrating how to configure hostname matching for a GRPCRoute using the hostnames field.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/api-types/grpcroute.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: gateway.networking.k8s.io/v1\nkind: GRPCRoute\nmetadata:\n  name: grpcroute-example\nspec:\n  hostnames:\n  - my.example.com\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Timeouts in YAML for Gateway API\nDESCRIPTION: YAML example demonstrating how to configure request and backend request timeouts in an HTTPRoute resource using the Gateway API.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1742/index.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: gateway.networking.k8s.io/v1beta1\nkind: HTTPRoute\nmetadata:\n  name: timeout-example\nspec:\n  ...\n  rules:\n  - backendRefs:\n    - name: some-service\n      port: 8080\n    timeouts:\n      request: 10s\n      backendRequest: 2s\n```\n\n----------------------------------------\n\nTITLE: Mesh Configuration with ServiceImport as Parent\nDESCRIPTION: A GAMMA-related configuration that uses ServiceImport as a parent reference for mesh-based interception, redirecting traffic from one Multi-Cluster Service to another based on path matching.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1748/index.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n{% include 'standard/multicluster/httproute-gamma.yaml' %}\n```\n\n----------------------------------------\n\nTITLE: Defining BackendLBPolicy Struct in Go for Kubernetes Gateway API\nDESCRIPTION: This snippet defines the BackendLBPolicy struct and its associated types for configuring load balancing and session persistence for backends in Kubernetes Gateway API. It includes fields for targeting backends, specifying session persistence type, and configuring cookie-based persistence.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1619/index.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// BackendLBPolicy provides a way to define load balancing rules\n// for a backend.\ntype BackendLBPolicy struct {\n    metav1.TypeMeta   `json:\",inline\"`\n    metav1.ObjectMeta `json:\"metadata,omitempty\"`\n\n    // Spec defines the desired state of BackendLBPolicy.\n    Spec BackendLBPolicySpec `json:\"spec\"`\n\n    // Status defines the current state of BackendLBPolicy.\n    Status PolicyStatus `json:\"status,omitempty\"`\n}\n\n// BackendLBPolicySpec defines the desired state of\n// BackendLBPolicy.\n// Note: there is no Override or Default policy configuration.\ntype BackendLBPolicySpec struct {\n    // TargetRef identifies an API object to apply policy to.\n    // Currently, Backends (i.e. Service, ServiceImport, or any\n    // implementation-specific backendRef) are the only valid API\n    // target references.\n    // +listType=map\n    // +listMapKey=group\n    // +listMapKey=kind\n    // +listMapKey=name\n    // +kubebuilder:validation:MinItems=1\n    // +kubebuilder:validation:MaxItems=16\n    TargetRefs []LocalPolicyTargetReference `json:\"targetRefs\"`\n\n    // SessionPersistence defines and configures session persistence\n    // for the backend.\n    //\n    // Support: Extended\n    //\n    // +optional\n    SessionPersistence *SessionPersistence `json:\"sessionPersistence\"`\n}\n\n// SessionPersistence defines the desired state of\n// SessionPersistence.\n// +kubebuilder:validation:XValidation:message=\"AbsoluteTimeout must be specified when cookie lifetimeType is Permanent\",rule=\"!has(self.cookieConfig) || !has(self.cookieConfig.lifetimeType) || self.cookieConfig.lifetimeType != 'Permanent' || has(self.absoluteTimeout)\"\ntype SessionPersistence struct {\n    // SessionName defines the name of the persistent session token\n    // which may be reflected in the cookie or the header. Users\n    // should avoid reusing session names to prevent unintended\n    // consequences, such as rejection or unpredictable behavior.\n    //\n    // Support: Implementation-specific\n    //\n    // +optional\n    // +kubebuilder:validation:MaxLength=128\n    SessionName *string `json:\"sessionName,omitempty\"`\n\n    // AbsoluteTimeout defines the absolute timeout of the persistent\n    // session. Once the AbsoluteTimeout duration has elapsed, the\n    // session becomes invalid.\n    //\n    // Support: Extended\n    //\n    // +optional\n    AbsoluteTimeout *Duration `json:\"absoluteTimeout,omitempty\"`\n\n    // IdleTimeout defines the idle timeout of the persistent session.\n    // Once the session has been idle for more than the specified\n    // IdleTimeout duration, the session becomes invalid.\n    //\n    // Support: Extended\n    //\n    // +optional\n    IdleTimeout *Duration `json:\"idleTimeout,omitempty\"`\n\n    // Type defines the type of session persistence such as through\n    // the use a header or cookie. Defaults to cookie based session\n    // persistence.\n    //\n    // Support: Core for \"Cookie\" type\n    //\n    // Support: Extended for \"Header\" type\n    //\n    // +optional\n    // +kubebuilder:default=Cookie\n    Type *SessionPersistenceType `json:\"type,omitempty\"`\n\n    // CookieConfig provides configuration settings that are specific\n    // to cookie-based session persistence.\n    //\n    // Support: Core\n    //\n    // +optional\n    CookieConfig *CookieConfig `json:\"cookieConfig,omitempty\"`\n}\n\n// Duration is a string value representing a duration in time. The format is as specified\n// in GEP-2257, a strict subset of the syntax parsed by Golang time.ParseDuration.\n//\n// +kubebuilder:validation:Pattern=`^([0-9]{1,5}(h|m|s|ms)){1,4}$`\ntype Duration string\n\n// +kubebuilder:validation:Enum=Cookie;Header\ntype SessionPersistenceType string\n\nconst (\n    // CookieBasedSessionPersistence specifies cookie-based session\n    // persistence.\n    //\n    // Support: Core\n    CookieBasedSessionPersistence   SessionPersistenceType = \"Cookie\"\n\n    // HeaderBasedSessionPersistence specifies header-based session\n    // persistence.\n    //\n    // Support: Extended\n    HeaderBasedSessionPersistence   SessionPersistenceType = \"Header\"\n)\n\n// CookieConfig defines the configuration for cookie-based session persistence.\ntype CookieConfig struct {\n    // LifetimeType specifies whether the cookie has a permanent or\n    // session-based lifetime. A permanent cookie persists until its\n    // specified expiry time, defined by the Expires or Max-Age cookie\n    // attributes, while a session cookie is deleted when the current\n    // session ends.\n    //\n    // When set to \"Permanent\", AbsoluteTimeout indicates the\n    // cookie's lifetime via the Expires or Max-Age cookie attributes\n    // and is required.\n    //\n    // When set to \"Session\", AbsoluteTimeout indicates the\n    // absolute lifetime of the cookie tracked by the gateway and\n    // is optional.\n    //\n    // Support: Core for \"Session\" type\n    //\n    // Support: Extended for \"Permanent\" type\n    //\n    // +optional\n    // +kubebuilder:default=Session\n    LifetimeType *CookieLifetimeType `json:\"lifetimeType,omitempty\"`\n}\n\n// +kubebuilder:validation:Enum=Permanent;Session\ntype CookieLifetimeType string\n\nconst (\n    // SessionCookieLifetimeType specifies the type for a session\n    // cookie.\n    //\n    // Support: Core\n    SessionCookieLifetimeType   CookieLifetimeType = \"Session\"\n\n    // PermanentCookieLifetimeType specifies the type for a permanent\n    // cookie.\n    //\n    // Support: Extended\n    PermanentCookieLifetimeType  CookieLifetimeType = \"Permanent\"\n)\n```\n\n----------------------------------------\n\nTITLE: CORS Filter Type Definitions in Golang\nDESCRIPTION: Defines the core types and constants for CORS filtering in Gateway API, including AllowCredentialsType and HTTPRouteFilterType. Establishes the base structure for CORS configuration.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1767/index.md#2025-04-22_snippet_5\n\nLANGUAGE: golang\nCODE:\n```\ntype AllowCredentialsType string\n\nconst (\n    AllowCredentials AllowCredentialsType = \"true\"\n)\n\nconst (\n    HTTPRouteFilterCORS HTTPRouteFilterType = \"CORS\"\n)\n```\n\n----------------------------------------\n\nTITLE: Adding SessionPersistence to HTTPRouteRule and GRPCRouteRule in Go\nDESCRIPTION: This snippet adds the SessionPersistence field to the HTTPRouteRule and GRPCRouteRule structs, enabling route-level configuration of session persistence in the Kubernetes Gateway API.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1619/index.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype HTTPRouteRule struct {\n    [...]\n\n    // SessionPersistence defines and configures session persistence\n    // for the route rule.\n    //\n    // Support: Extended\n    //\n    // +optional\n    SessionPersistence *SessionPersistence `json:\"sessionPersistence\"`\n}\n\ntype GRPCRouteRule struct {\n    [...]\n\n    // SessionPersistence defines and configures session persistence\n    // for the route rule.\n    //\n    // Support: Extended\n    //\n    // +optional\n    SessionPersistence *SessionPersistence `json:\"sessionPersistence\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Percentage-based Request Mirroring for East/West Traffic in Service Mesh\nDESCRIPTION: Example YAML configuration for an HTTPRoute in a service mesh context, demonstrating percentage-based request mirroring for east/west traffic. This configuration mirrors 42% of requests from a service to a specific backend.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-3171/index.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: gateway.networking.k8s.io/v1\nkind: HTTPRoute\nmetadata:\n  name: http-filter-mirror\n  labels:\n    service: mirror-service\nspec:\n  parentRefs:\n  - group: \"\"\n    kind: Service\n    name: mirror-service\n  rules:\n  - backendRefs:\n    - name: foo-v1\n      port: 8080\n    filters:\n    - type: RequestMirror\n      requestMirror:\n        backendRef:\n          name: foo-v2\n          port: 8080\n        percent: 42\n```\n\n----------------------------------------\n\nTITLE: Implementing ParentRef Port Field in Go\nDESCRIPTION: Defines the Go struct for ParentRef with a new Port field to support port matching in routes. The Port field can be interpreted differently based on the parent resource type and includes detailed documentation about its usage and support level.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-957/index.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype ParentRef struct {\n  ...\n  // Port is the network port this Route targets. It can be interpreted\n  // differently based on the type of parent resource:\n  //\n  // Gateway: All listeners listening on the specified port that also support\n  // this kind of Route(and select this Route). It's not recommended to set\n  // `Port` unless the networking behaviors specified in a Route must\n  // apply to a specific port as opposed to a listener(s) whose port(s) may\n  // be changed.\n  // When both Port and SectionName are specified, the name and port of the\n  // selected listener must match both specified values.\n  //\n  // Implementations MAY choose to support other parent resources.\n  // Implementations supporting other types of parent resources MUST clearly\n  // document how/if Port is interpreted.\n  //\n  // For the purpose of status, an attachment is considered successful as\n  // long as the parent resource accepts it partially. For example, Gateway\n  // listeners can restrict which Routes can attach to them by Route kind,\n  // namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from\n  // the referencing Route, the Route MUST be considered successfully\n  // attached. If no Gateway listeners accept attachment from this Route, the\n  // Route MUST be considered detached from the Gateway.\n  //\n  // Support: Core\n  //\n  // +optional\n  Port *PortNumber `json:\"port,omitempty\"`\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Envoy Timeouts Configuration Flow Diagram\nDESCRIPTION: A sequence diagram illustrating the various timeout configurations available in Envoy proxy at different levels (HTTP Connection Manager, Route, and Cluster). Shows where each timeout is applied in the request/response cycle.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1742/index.md#2025-04-22_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant C as Client\n    participant P as Envoy\n    participant U as Upstream\n    C->>P: Connection Started\n    activate P\n    Note left of P: transport_socket_connect_timeout for TLS\n    deactivate P\n    C->>P: Starts sending Request\n    activate C\n    activate P\n    activate P\n    C->>P: Finishes Headers\n    note left of P: CM request_headers_timeout\n\t\tC->>P: Finishes request\n    deactivate P\n    activate U\n    note left of U: Cluster connect_timeout\n    deactivate U\n    P->>U: Connection Started\n\t\tactivate U\n    note right of U: CM idle_timeout<br />CM max_connection_duration\n    P->>U: Starts sending Request\n    P->>U: Finishes Headers\n    note left of P: CM request_timeout\n\t\tP->>U: Finishes request\n    deactivate P\n    activate U\n    U->>P: Starts Response\n    U->>P: Finishes Headers\n\t\tnote right of U: R timeout<br/>R per_try_timeout<br/>R per_try_idle_timeout\n    U->>P: Finishes Response\n    deactivate U\n    P->>C: Starts Response\n    P->>C: Finishes Headers\n    P->>C: Finishes Response\n    Note left of C: CM stream_idle_timeout<br />R idle_timeout<br />CM,R max_stream_duration<br/>TCP proxy idle_timeout<br />TCP protocol idle_timeout\n    deactivate C\n    Note right of P: Repeat if connection sharing\n    U->>C: Connection ended\n    deactivate U\n```\n\n----------------------------------------\n\nTITLE: ListenerSet Specification Types in Go\nDESCRIPTION: Defines the specification types for ListenerSet including ListenerSetSpec and ListenerEntry. These types handle the configuration of listeners, including protocols, ports, TLS settings, and route policies.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1713/index.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype ListenerSetSpec struct {\n\t// ParentRef references the Gateway that the listeners are attached to.\n\tParentRef ParentGatewayReference `json:\"parentRef\"`\n\n\t// Listeners associated with this ListenerSet. Listeners define\n\t// logical endpoints that are bound on this referenced parent Gateway's addresses.\n\t//\n\t// Listeners in a `Gateway` and their attached `ListenerSets` are concatenated\n\t// as a list when programming the underlying infrastructure.\n\t//\n\t// Listeners should be merged using the following precedence:\n\t//\n\t// 1. \"parent\" Gateway\n\t// 2. ListenerSet ordered by creation time (oldest first)\n\t// 3. ListenerSet ordered alphabetically by \"{namespace}/{name}\".\n\t//\n\t// +listType=map\n\t// +listMapKey=name\n\t// +kubebuilder:validation:MinItems=1\n\t// +kubebuilder:validation:MaxItems=64\n\tListeners []ListenerEntry `json:\"listeners\"`\n}\n\ntype ListenerEntry struct {\n\tName SectionName `json:\"name\"`\n\tHostname *Hostname `json:\"hostname,omitempty\"`\n\tPort *PortNumber `json:\"port,omitempty\"`\n\tProtocol ProtocolType `json:\"protocol\"`\n\tTLS *GatewayTLSConfig `json:\"tls,omitempty\"`\n\tAllowedRoutes *AllowedRoutes `json:\"allowedRoutes,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring A/B Testing with HTTPRoute in Kubernetes Service Mesh\nDESCRIPTION: YAML configuration example showing how to set up A/B testing in a service mesh using HTTPRoute. The configuration routes traffic to different backend services based on header values, demonstrating mesh-based traffic splitting.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/blog/2023/0829-mesh-support.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: gateway.networking.k8s.io/v1beta1\nkind: HTTPRoute\nmetadata:\n  name: bar-route\nspec:\n  parentRefs:\n  - group: \"\"\n    kind: Service\n    name: demo-app\n    port: 5000\n  rules:\n  - matches:\n    - headers:\n      - type: Exact\n        name: env\n        value: v1\n    backendRefs:\n    - name: demo-app-v1\n      port: 5000\n  - backendRefs:\n    - name: demo-app-v2\n      port: 5000\n```\n\n----------------------------------------\n\nTITLE: Enhancing HTTPRequestMirrorFilter with Percentage Capabilities in Go\nDESCRIPTION: Updated HTTPRequestMirrorFilter struct that includes both a 'Percent' field for simple percentage specification and a 'Fraction' field for more granular control. If both fields are specified, Fraction takes priority. Default behavior mirrors 100% of requests if neither field is specified.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-3171/index.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// HTTPRequestMirrorFilter defines configuration for the RequestMirror filter.\ntype HTTPRequestMirrorFilter struct {\n        // BackendRef references a resource where mirrored requests are sent.\n        //\n        // Mirrored requests must be sent only to a single destination endpoint\n        // within this BackendRef, irrespective of how many endpoints are present\n        // within this BackendRef.\n        //\n        // If the referent cannot be found, this BackendRef is invalid and must be\n        // dropped from the Gateway. The controller must ensure the \"ResolvedRefs\"\n        // condition on the Route status is set to `status: False` and not configure\n        // this backend in the underlying implementation.\n        //\n        // If there is a cross-namespace reference to an *existing* object\n        // that is not allowed by a ReferenceGrant, the controller must ensure the\n        // \"ResolvedRefs\"  condition on the Route is set to `status: False`,\n        // with the \"RefNotPermitted\" reason and not configure this backend in the\n        // underlying implementation.\n        //\n        // In either error case, the Message of the `ResolvedRefs` Condition\n        // should be used to provide more detail about the problem.\n        //\n        // Support: Extended for Kubernetes Service\n        //\n        // Support: Implementation-specific for any other resource\n        BackendRef BackendObjectReference `json:\"backendRef\"`\n\n        // Percent represents the percentage of requests that should be\n        // mirrored to BackendRef. Its minimum value is 0 (indicating 0% of\n        // requests) and its maximum value is 100 (indicating 100% of requests).\n        //\n        // If both Percent and Fraction are specified, Fraction will take\n        // priority. If Percent is unspecified, it will have a default value of\n        // 100. If Fraction is unspecified, it will have a default value of\n        // 100/100. This means that if neither field is specified, 100% of\n        // requests will be mirrored.\n        //\n        // +optional\n        // +kubebuilder:default=100\n        // +kubebuilder:validation:Minimum=0\n        // +kubebuilder:validation:Maximum=100\n        Percent int32 `json:\"percent,omitempty\"`\n\n        // Fraction represents the fraction of requests that should be\n        // mirrored to BackendRef.\n        //\n        // If both Percent and Fraction are specified, Fraction will take\n        // priority. If Percent is unspecified, it will have a default value of\n        // 100. If Fraction is unspecified, it will have a default value of\n        // 100/100. This means that if neither field is specified, 100% of\n        // requests will be mirrored.\n        //\n        // +optional\n        Fraction Fraction `json:\"fraction,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ReferenceGrant for Cross-Namespace Access in YAML\nDESCRIPTION: This YAML snippet shows how to create a ReferenceGrant resource that allows HTTPRoutes in the 'prod' namespace to reference Services in the same namespace as the ReferenceGrant.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/concepts/security-model.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n{% include 'standard/reference-grant.yaml' %}\n```\n\n----------------------------------------\n\nTITLE: Using Port for Gateway Listener Attachment in TCPRoute\nDESCRIPTION: This YAML snippet shows an alternative way to attach a TCPRoute to a Gateway listener using the 'port' field instead of 'sectionName' in the parentRefs.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/guides/tcp.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  parentRefs:\n  - name: my-tcp-gateway\n    port: 8080\n```\n\n----------------------------------------\n\nTITLE: Defining BackendRef Struct in Go\nDESCRIPTION: Defines the new BackendRef struct that replaces RouteForwardTo, specifying how requests should be forwarded from the Gateway. Includes fields for group, kind, name, port, and weight configurations.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-718/index.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// BackendRef defines how and where a request should be forwarded from the Gateway.\ntype BackendRef struct {\n\t// Group is the group of the backend resource.\n\t//\n\t// +kubebuilder:validation:MinLength=1\n\t// +kubebuilder:validation:MaxLength=253\n\tGroup string `json:\"group\"`\n\n\t// Kind is kind of the backend resource.\n\t//\n\t// Support: Core (Kubernetes Service)\n\t// Support: Implementation-specific (any other resource)\n\t//\n\t// +optional\n\t// +kubebuilder:validation:MinLength=1\n\t// +kubebuilder:validation:MaxLength=253\n\t// +kubebuilder:default=\"service\"\n\tKind *string `json:\"kind\"`\n\n\t// Name is the name of the backend resource to forward matched requests to.\n\t//\n\t// If the referent cannot be found, the rule is not included in the route.\n\t// The controller should raise the \"ResolvedRefs\" condition on the Gateway\n\t// with the \"DegradedRoutes\" reason. The gateway status for this route should\n\t// be updated with a condition that describes the error more specifically.\n\t//\n\t// +kubebuilder:validation:MinLength=1\n\t// +kubebuilder:validation:MaxLength=253\n\tName string `json:\"name\"`\n\n\t// Port specifies the destination port number to use for the\n\t// backend resource.\n\t// This field is required when the backend is a Kubernetes Service.\n\t//\n\t// Support: Core\n\t//\n\t// +optional\n\tPort *PortNumber `json:\"port,omitempty\"`\n\n\t// Weight specifies the proportion of HTTP requests forwarded to the backend\n\t// This is computed as weight/(sum of all weights in this Backends list).\n\t// For non-zero values, there may be some epsilon from the exact proportion\n\t// defined here depending on the precision an implementation supports. Weight\n\t// is not a percentage and the sum of weights does not need to equal 100.\n\t//\n\t// If only one backend is specified and it has a weight greater than 0, 100%\n\t// of the traffic is forwarded to that backend. If weight is set to 0, no\n\t// traffic should be forwarded for this entry. If unspecified, weight\n\t// defaults to 1.\n\t//\n\t// Support: Extended\n\t//\n\t// +optional\n\t// +kubebuilder:default=1\n\t// +kubebuilder:validation:Minimum=0\n\t// +kubebuilder:validation:Maximum=1000000\n\tWeight *int32 `json:\"weight,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Two Route Rules with Different Session Persistence to the Same Service\nDESCRIPTION: YAML configuration demonstrating two route rules pointing to the same service but with different session persistence configurations. Each route rule has unique session persistence settings that are not shared between paths.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1619/index.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nkind: HTTPRoute\nmetadata:\n  name: routeX\nspec:\n  rules:\n  - matches:\n    - path:\n      value: /a\n    backendRefs:\n    - name: servicev1\n    sessionPersistence:\n      name: session-a\n  - matches:\n    - path:\n      value: /b\n    backendRefs:\n    - name: servicev1\n      weight: 0\n    - name: servicev2\n      weight: 100\n    sessionPersistence:\n      name: session-b\n```\n\n----------------------------------------\n\nTITLE: ReferenceGrant API Structure Definition\nDESCRIPTION: Go struct definitions for the ReferenceGrant API, including ReferenceGrant, ReferenceGrantSpec, ReferenceGrantFrom, and ReferenceGrantTo types.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-709/index.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype ReferenceGrant struct {\n    metav1.TypeMeta   `json:\",inline\"`\n    metav1.ObjectMeta `json:\"metadata,omitempty\"`\n\n    // Spec defines the desired state of ReferenceGrant.\n    Spec ReferenceGrantSpec `json:\"spec,omitempty\"`\n}\n\ntype ReferenceGrantSpec struct {\n    From []ReferenceGrantFrom `json:\"from\"`\n    To []ReferenceGrantTo `json:\"to\"`\n}\n\ntype ReferenceGrantFrom struct {\n    Group string `json:\"group\"`\n    Kind string `json:\"kind\"`\n    Namespace string `json:\"namespace,omitempty\"`\n}\n\ntype ReferenceGrantTo struct {\n    Group string `json:\"group\"`\n    Kind string `json:\"kind\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing TLS Configuration Segments with Mermaid Diagram\nDESCRIPTION: This mermaid diagram illustrates the four different segments relevant to TLS configuration in Gateway API: client certificate from frontend to gateway, server certificate from gateway to frontend, client certificate from gateway to backend, and server certificate from backend to gateway.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-2907/index.md#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    Frontend -.->|1. Client Cert| Gateway\n    Gateway -.->|2. Server Cert| Frontend\n    Gateway -.->|3. Client Cert| Backend\n    Backend -.->|4. Server Cert| Gateway\n```\n\n----------------------------------------\n\nTITLE: NGINX Retry Configuration Options\nDESCRIPTION: Documentation of NGINX's proxy_next_upstream directive and related configuration options for controlling retry behavior, including error conditions, timeout settings, and upstream server management.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1731/index.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* proxy_next_upstream: Controls retry conditions\\n* proxy_next_upstream_timeout: Time limit for retries\\n* proxy_next_upstream_tries: Maximum retry attempts\\n* max_fails: Unsuccessful attempts threshold\\n* fail_timeout: Time window for failure tracking\n```\n\n----------------------------------------\n\nTITLE: Envoy RetryBudget Configuration Parameters\nDESCRIPTION: Core configuration parameters for Envoy's RetryBudget CircuitBreaker threshold implementation. Includes budget_percent for limiting concurrent retries as a percentage of active requests, and min_retry_concurrency for specifying minimum retry concurrency allowed.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-3388/index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbudget_percent: 25 # Default 20%\nmin_retry_concurrency: 3 # Default 3\n```\n\n----------------------------------------\n\nTITLE: GRPCRoute Configuration for bar.example.com\nDESCRIPTION: Sets up routing rules for bar.example.com with header-based traffic splitting between bar-svc and bar-svc-canary backends.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/guides/grpc-routing.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n{% include 'standard/grpc-routing/bar-grpcroute.yaml' %}\n```\n\n----------------------------------------\n\nTITLE: Defining Gateway Routability Types and API Changes in Go\nDESCRIPTION: This Go code defines the Gateway Routability type and related constants with three predefined values: Public, Private, and Cluster. It extends the GatewaySpec, GatewayStatus, and GatewayClassStatus structures to support the routability feature with appropriate validation rules and documentation.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1651/index.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// GatewayRoutability represents the routability of a Gateway\n//\n// The pre-defined values listed in this package can be compared semantically.\n// `Public` has a larger scope than `Private`, while `Private` has a larger scope than\n// `Cluster`.\n//\n// Implementations can define custom routability values by specifying a vendor\n// prefix followed by a slash '/' and a custom name ie. `dev.example.com/my-routability`.\n//\n// +kubebuilder:validation:MinLength=1\n// +kubebuilder:validation:MaxLength=253\n// +kubebuilder:validation:Pattern=`^Public|Private|Cluster|[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.\\[a-z0-9]([-a-z0-9]*[a-z0-9])?)*\\/[A-Za-z0-9\\/\\-_]+$`\ntype GatewayRoutability string\n\nconst (\n  // GatewayRoutabilityPublic means the Gateway's address MUST\n  // be routable on the public internet\n  //\n  // Implementations MAY support this routability\n  GatewayRoutabilityPublic  GatewayRoutability  = \"Public\"\n\n  // GatewayRoutabilityPrivate means the Gateway's address MUST\n  // only be routable inside a private network larger than a single\n  // cluster (ie. VPC) and MAY include the RFC1918 address space\n  //\n  // Implementations MAY support this routability\n  GatewayRoutabilityPrivate GatewayRoutability  = \"Private\"\n\n  // GatewayRoutabilityCluster means the Gateway's address MUST\n  // only be routable inside the [cluster's network]\n  //\n  // Implementations MAY support this routability\n  //\n  // [cluster's network](https://kubernetes.io/docs/concepts/cluster-administration/networking/#how-to-implement-the-kubernetes-network-model)\n  GatewayRoutabilityCluster GatewayRoutability  = \"Cluster\"\n)\n\ntype GatewaySpec struct {\n  // Infrastructure defines infrastructure level attributes about this Gateway instance.\n  Infrastructure GatewayInfrastructure `json:\"infrastructure\"`\n  // ...\n}\ntype GatewayInfrastructure struct {\n  // Routability allows the Gateway to specify the accessibility of its addresses. Setting\n  // this property will override the default value defined by the GatewayClass.\n  //\n  // If the desired Gateway routability is incompatible with the GatewayClass implementations\n  // MUST set the condition `Accepted` to `False` with `Reason` set to `UnsupportedRoutability`.\n\n  // The default value of routability is implementation specific and  MUST remains consistent for\n  // Gateways with the same gatewayClassName\n  //\n  // Implementations MAY prevent end-users from updating the routability value of a Gateway.\n  // If updates are allowed the semantics and behaviour will depend on the underlying implementation.\n  // If a Gateway is mutated but does not support the desired routability it MUST set `Accepted` \n  // and  `Programmed` conditions to `False` with `Reason` set to `UnsupportedRoutability`.\n  //\n  // It is RECOMMENDED that in-cluster gateways SHOULD NOT support 'Private' routability.\n  // Kubernetes doesn't have a concept of 'Private' routability for Services. In the future this may\n  // change upstream.\n  //\n  // +optional\n  Routability *GatewayRoutability `json:\"routability,omitempty\"`\n}\n\ntype GatewayStatus struct {\n  // Addresses lists the IP addresses that have actually been\n  // bound to the Gateway. These addresses may differ from the\n  // addresses in the Spec, e.g. if the Gateway automatically\n  // assigns an address from a reserved pool.\n  //\n  // Implementations that support Gateway routability MUST include an address\n  // that has the same routable semantics as defined in the Gateway spec.\n  //\n  // Implementations MAY add additional addresses in status, but they MUST be\n  // semantically less than the scope of the requested scope. For example if a\n  // user requests a `Private` routable Gateway then an additional address MAY\n  // have a routability of `Cluster` but MUST NOT include `Public`.\n  //\n  // +optional\n  // +kubebuilder:validation:MaxItems=16\n  Addresses []GatewayStatusAddress `json:\"addresses,omitempty\"`\n  // ...\n}\n\ntype GatewayStatusAddress struct {\n  // Routability specifies the routable bounds of this address\n  // Predefined values are: 'Private', 'Public', Cluster\n  // Other values MUST have a vendor prefix.\n  //\n  // Implementations that support Routability MUST populate this\n  // field\n  //\n  // +optional\n  Routability *GatewayRoutability `json:\"routability,omitempty\"`\n\n  // ...\n}\n\ntype GatewayClassStatus struct {\n  // Routabilities specifies a list of supported routabilities offered by\n  // the GatewayClass. The first entry in this list will be the default\n  // routability used when Gateways of this class are created.\n  //\n  // Implementations MAY provide a pre-defined set of GatewayClasses that\n  // limit the routability choices of a Gateway.\n  //\n  // Implementations that support routability MUST populate this list with\n  // a subset of the pre-defined GatewayRoutability values or vendored\n  // prefix values.\n  //\n  // +optional\n  // +kubebuilder:validation:MaxItems=8\n  // <gateway:experimental>\n  Routabilities []GatewayRoutability `json:\"routabilities\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gateway with Infrastructure Labels and Annotations in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure a Gateway resource with infrastructure labels and annotations. It shows how to enable both Linkerd and Istio injection for the generated infrastructure resources.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/guides/infrastructure.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: gateway.networking.k8s.io/v1\nkind: Gateway\nmetadata:\n  name: meshed-gateway\n  namespace: incoming\nspec:\n  gatewayClassName: meshed-gateway-class\n  listeners:\n  - name: http-listener\n    protocol: HTTP\n    port: 80\n  infrastructure:\n    labels:\n      istio-injection: enabled\n    annotations:\n      linkerd.io/inject: enabled\n```\n\n----------------------------------------\n\nTITLE: Running Specific Conformance Test\nDESCRIPTION: Executes a specific TLS route conformance test with defined parameters and gateway class\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/hack/implementations/envoy-gateway/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngo test -v ./conformance \\\n--run TestConformance/TLSRouteSimpleSameNamespace \\\n--gateway-class=envoy-gateway --supported-features=Gateway,TLSRoute \\\n--allow-crds-mismatch\n```\n\n----------------------------------------\n\nTITLE: ListenerSet Status Types in Go\nDESCRIPTION: Defines the status types for ListenerSet including ListenerSetStatus and ListenerEntryStatus. These types handle the operational status of listeners and their conditions.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1713/index.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype ListenerSetStatus struct {\n\t// Listeners provide status for each unique listener port defined in the Spec.\n\t//\n\t// +optional\n\t// +listType=map\n\t// +listMapKey=name\n\t// +kubebuilder:validation:MaxItems=64\n\tListeners []ListenerEntryStatus `json:\"listeners,omitempty\"`\n\n\t// Conditions describe the current conditions of the ListenerSet.\n\t//\n\t// +optional\n\t// +listType=map\n\t// +listMapKey=type\n\t// +kubebuilder:validation:MaxItems=8\n\tConditions []metav1.Condition `json:\"conditions,omitempty\"`\n}\n\ntype ListenerEntryStatus struct {\n\tName SectionName `json:\"name\"`\n\tPort PortNumber `json:\"port\"`\n\tSupportedKinds []RouteGroupKind `json:\"supportedKinds\"`\n\tAttachedRoutes int32 `json:\"attachedRoutes\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CDN Caching Policy with Override and Default Values\nDESCRIPTION: Example showing how to configure CDN caching policies at Gateway and HTTPRoute levels, demonstrating override and default value inheritance.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-2649/index.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nkind: CDNCachingPolicy # Example of implementation specific policy name\nspec:\n  override:\n    cdn:\n      enabled: true\n  default:\n    cdn:\n      cachePolicy:\n        includeHost: true\n        includeProtocol: true\n        includeQueryString: true\n  targetRef:\n    kind: Gateway\n    name: example\n---\nkind: CDNCachingPolicy\nspec:\n  default:\n    cdn:\n      cachePolicy:\n        includeQueryString: false\n  targetRef:\n    kind: HTTPRoute\n    name: example\n```\n\n----------------------------------------\n\nTITLE: Defining ServiceProjection and HTTPRoute for Mesh Integration in YAML\nDESCRIPTION: This snippet illustrates the ServiceProjection resource concept, which encapsulates both 'frontend' and 'backend' roles of a Service resource. It shows how to define a ServiceProjection with various configurations and an associated HTTPRoute that references the ServiceProjection for both parentRefs and backendRefs.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1294/index.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nkind: ServiceProjection\nmetadata:\n    name: foo\n    namespace: store\nspec:\n    serviceRef:\n        name: foo\n        kind: Service|ServiceImport\n    roles:\n        frontend:\n       backend:\n            loadbalancerConfig:\n                strategy: RoundRobin\n             clientTLS:\n                secretRef:\n                    ...\n---\nkind: HTTPRoute\nmetadata:\n  name: foo_route\n  namespace: store\nspec:\n  parentRefs:\n  - kind: ServiceProjection\n    name: foo\n    role: frontend\n  rules:\n    backendRefs:\n    - kind: ServiceProjection\n      name: foo\n      role: backend\n      weight: 90\n    - kind: ServiceProjection\n      role: backend\n      name: foo_v2\n      weight: 10\n```\n\n----------------------------------------\n\nTITLE: Configuring Mesh ParentRef in HTTPRoute\nDESCRIPTION: Example of directly binding an HTTPRoute to a cluster-scoped Mesh object using parentRefs.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1294/index.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  parentRefs:\n  - kind: Mesh\n    name: cool-mesh\n```\n\n----------------------------------------\n\nTITLE: CORS Preflight Request Example\nDESCRIPTION: Example of a CORS preflight OPTIONS request and corresponding server responses for both allowed and denied scenarios.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1767/index.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nOPTIONS /resource/foo HTTP/1.1\nHost: http.route.cors.com\nOrigin: https://foo.example\nAccess-Control-Request-Method: PUT\n```\n\nLANGUAGE: text\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: text/plain charset=UTF-8\nContent-Length: 0\n```\n\nLANGUAGE: text\nCODE:\n```\nHTTP/1.1 204 No Content\nAccess-Control-Allow-Origin: https://foo.example\nAccess-Control-Allow-Credentials: true\nAccess-Control-Allow-Methods: GET, PUT, POST, DELETE, PATCH, OPTIONS\nAccess-Control-Allow-Headers: DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization\nAccess-Control-Expose-Headers: Content-Security-Policy\nAccess-Control-Max-Age: 1728000\nContent-Type: text/plain charset=UTF-8\nContent-Length: 0\n```\n\n----------------------------------------\n\nTITLE: Adding CORS Field to HTTPRouteRule in Gateway API (Golang)\nDESCRIPTION: This Golang struct definition proposes adding a CORS field to the HTTPRouteRule in Gateway API. It includes existing fields and introduces a new CORS field for handling cross-origin requests.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1767/index.md#2025-04-22_snippet_18\n\nLANGUAGE: golang\nCODE:\n```\ntype HTTPRouteRule struct {\n  Name *SectionName `json:\"name,omitempty\"`\n\n  Matches []HTTPRouteMatch `json:\"matches,omitempty\"`\n\n  Filters []HTTPRouteFilter `json:\"filters,omitempty\"`\n\n  BackendRefs []HTTPBackendRef `json:\"backendRefs,omitempty\"`\n\n  Timeouts *HTTPRouteTimeouts `json:\"timeouts,omitempty\"`\n\n  Retry *HTTPRouteRetry `json:\"retry,omitempty\"`\n\n  SessionPersistence *SessionPersistence `json:\"sessionPersistence,omitempty\"`\n\n  // CORS defines the CORS rules that respond to the \n  // cross-origin request based on HTTP response header.\n  //\n  // Support: Extended\n  //\n  // +optional\n  CORS *HTTPCORS `json:\"cors,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple GatewayClasses in YAML\nDESCRIPTION: This example demonstrates creating two GatewayClasses named 'internet' and 'private' to reflect Gateways for Internet-facing and private internal applications respectively.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/api-types/gatewayclass.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nkind: GatewayClass\nmetadata:\n  name: internet\n  ...\n---\nkind: GatewayClass\nmetadata:\n  name: private\n  ...\n```\n\n----------------------------------------\n\nTITLE: Defining PolicyAncestorStatus Struct in Go\nDESCRIPTION: Core Go structs for implementing policy status reporting in Gateway API. Includes PolicyAncestorStatus for tracking policy status relative to ancestor resources and PolicyStatus for common policy status attributes.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-2648/index.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype PolicyAncestorStatus struct {\n\tAncestorRef ParentReference `json:\"ancestorRef\"`\n\tControllerName GatewayController `json:\"controllerName\"`\n\tConditions []metav1.Condition `json:\"conditions,omitempty\"`\n}\n\ntype PolicyStatus struct {\n\tAncestors []PolicyAncestorStatus `json:\"ancestors\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Wildcard TLS Gateway in Kubernetes Gateway API\nDESCRIPTION: This YAML snippet demonstrates a Gateway configuration with multiple HTTPS listeners, including a wildcard listener. It illustrates the potential issues with overlapping TLS certificates and hostname matching.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-3567/index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: gateway.networking.k8s.io/v1\nkind: Gateway\nmetadata:\n  name: wildcard-tls-gateway\nspec:\n  gatewayClassName: example\n  listeners:\n  - name: foo-https\n    protocol: HTTPS\n    port: 443\n    hostname: foo.example.com\n    tls:\n      certificateRefs:\n      - kind: Secret\n        group: \"\"\n        name: foo-example-com-cert  # SAN: foo.example.com\n  - name: wildcard-https\n    protocol: HTTPS\n    port: 443\n    hostname: \"*.example.com\"\n    tls:\n      certificateRefs:\n      - kind: Secret\n        group: \"\"\n        name: wildcard-example-com-cert  # SAN: *.example.com\n```\n\n----------------------------------------\n\nTITLE: Running Gateway API Conformance Tests for Traefik\nDESCRIPTION: Command to execute the Gateway API conformance test suite for Traefik using Make. This generates a conformance report in the integration/conformance-reports directory.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.2.1/traefik-traefik/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmake test-gateway-api-conformance\n```\n\n----------------------------------------\n\nTITLE: Defining Sample Policy API Structure in Go\nDESCRIPTION: This Go code defines a sample policy API structure, including ACMEServicePolicy, ACMEServicePolicySpec, ACMEPolicyConfig, and ACMEServicePolicyStatus. It demonstrates how to use the PolicyTargetReference in a policy resource.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-2649/index.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// ACMEServicePolicy provides a way to apply Service policy configuration with\n// the ACME implementation of the Gateway API.\ntype ACMEServicePolicy struct {\n    metav1.TypeMeta   `json:\",inline\"`\n    metav1.ObjectMeta `json:\"metadata,omitempty\"`\n\n    // Spec defines the desired state of ACMEServicePolicy.\n    Spec ACMEServicePolicySpec `json:\"spec\"`\n\n    // Status defines the current state of ACMEServicePolicy.\n    Status ACMEServicePolicyStatus `json:\"status,omitempty\"`\n}\n\n// ACMEServicePolicySpec defines the desired state of ACMEServicePolicy.\ntype ACMEServicePolicySpec struct {\n    // TargetRef identifies an API object to apply policy to.\n    TargetRef gatewayv1a2.PolicyTargetReference `json:\"targetRef\"`\n\n    // Override defines policy configuration that should override policy\n    // configuration attached below the targeted resource in the hierarchy.\n    // +optional\n    Override *ACMEPolicyConfig `json:\"override,omitempty\"`\n\n    // Default defines default policy configuration for the targeted resource.\n    // +optional\n    Default *ACMEPolicyConfig `json:\"default,omitempty\"`\n}\n\n// ACMEPolicyConfig contains ACME policy configuration.\ntype ACMEPolicyConfig struct {\n    // Add configurable policy here\n}\n\n// ACMEServicePolicyStatus defines the observed state of ACMEServicePolicy.\ntype ACMEServicePolicyStatus struct {\n    // Conditions describe the current conditions of the ACMEServicePolicy.\n    //\n    // +optional\n    // +listType=map\n    // +listMapKey=type\n    // +kubebuilder:validation:MaxItems=8\n    Conditions []metav1.Condition `json:\"conditions,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Example Gateway Resource with Routability Configuration in YAML\nDESCRIPTION: This YAML example demonstrates how to configure a Gateway resource with a 'Public' routability setting. It shows a production web Gateway using a specific gateway class and HTTP protocol on port 80.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1651/index.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: gateway.networking.k8s.io/v1beta1\nkind: Gateway\nmetadata:\n  name: prod-web\nspec:\n  gatewayClassName: example\n  infrastructure:\n    routability: Public\n  listeners:\n  - protocol: HTTP\n    port: 80\n```\n\n----------------------------------------\n\nTITLE: Defining BackendTrafficPolicySpec in YAML\nDESCRIPTION: Specifies the structure of BackendTrafficPolicySpec, which defines the desired state of BackendTrafficPolicy. It includes fields for targetRefs, retryConstraint, and sessionPersistence.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/reference/specx.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntargetRefs:\n  - # Array of LocalPolicyTargetReference\nretryConstraint:\n  # RetryConstraint configuration\nsessionPersistence:\n  # SessionPersistence configuration\n```\n\n----------------------------------------\n\nTITLE: Defining GRPCBackendRef Struct in Go for Kubernetes Gateway API\nDESCRIPTION: This snippet defines the GRPCBackendRef struct, which specifies how a GRPCRoute should forward a gRPC request. It includes a reference to a backend and optional filters.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1016/index.md#2025-04-22_snippet_9\n\nLANGUAGE: Go\nCODE:\n```\n// GRPCBackendRef defines how a GRPCRoute should forward a gRPC request.\ntype GRPCBackendRef struct {\n\t// BackendRef is a reference to a backend to forward matched requests to.\n\t//\n\t// If the referent cannot be found, this GRPCBackendRef is invalid and must\n\t// be dropped from the Gateway. The controller must ensure the\n\t// \"ResolvedRefs\" condition on the Route is set to `status: False` and not\n\t// configure this backend in the underlying implementation.\n\t//\n\t// If there is a cross-namespace reference to an *existing* object\n\t// that is not covered by a ReferenceGrant, the controller must ensure the\n\t// \"ResolvedRefs\"  condition on the Route is set to `status: False`,\n\t// with the \"RefNotPermitted\" reason and not configure this backend in the\n\t// underlying implementation.\n\t//\n\t// In either error case, the Message of the `ResolvedRefs` Condition\n\t// should be used to provide more detail about the problem.\n\t//\n\t// Support: Implementation-specific\n\t//\n\t// +optional\n\tBackendRef `json:\",inline\"`\n\n\t// Filters defined at this level should be executed if and only if the\n\t// request is being forwarded to the backend defined here.\n\t//\n\t// Support: Implementation-specific (For broader support of filters, use the Filters field\n\t// in GRPCRouteRule.)\n\t//\n\t// +optional\n\t// +kubebuilder:validation:MaxItems=16\n\tFilters []GRPCRouteFilter `json:\"filters,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AppProtocol Values for Gateway API\nDESCRIPTION: Lists the new GA values for the AppProtocol field on Service Ports, used to describe the protocol for connections to Kubernetes Services.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/CHANGELOG/1.2-CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n* `kubernetes.io/h2c` - HTTP/2 over cleartext as described in\n  [RFC7540](https://www.rfc-editor.org/rfc/rfc7540)\n* `kubernetes.io/ws` - WebSocket over cleartext as described in\n  [RFC6445](https://www.rfc-editor.org/rfc/rfc6455)\n* `kubernetes.io/wss` - WebSocket over TLS as described in\n  [RFC6455](https://www.rfc-editor.org/rfc/rfc6455)\n```\n\n----------------------------------------\n\nTITLE: Defining ExposeHeaders Field for CORS in Go\nDESCRIPTION: Defines the ExposeHeaders field for CORS configuration in Gateway API. This field indicates which HTTP response headers can be exposed to client-side scripts in response to a cross-origin request. It supports using a wildcard '*' when AllowCredentials is not specified.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1767/index.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n// +optional\n// +listType=set\n// +kubebuilder:validation:MaxItems=64\nExposeHeaders []string `json:\"exposeHeaders,omitempty\"`\n```\n\n----------------------------------------\n\nTITLE: Configuring Gateway and ListenerSets in YAML\nDESCRIPTION: Demonstrates the configuration of a Gateway with an HTTP listener and two child HTTPS ListenerSets, each with unique hostnames and certificates.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1713/index.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: gateway.networking.k8s.io/v1\nkind: Gateway\nmetadata:\n  name: parent-gateway\nspec:\n  gatewayClassName: example\n  listeners:\n  - name: foo\n    hostname: foo.com\n    protocol: HTTP\n    port: 80\n---\napiVersion: gateway.networking.x-k8s.io/v1alpha1\nkind: ListenerSet\nmetadata:\n  name: first-workload-listeners\nspec:\n  parentRef:\n    name: parent-gateway\n    kind: Gateway\n    group: gateway.networking.k8s.io\n  listeners:\n  - name: first\n    hostname: first.foo.com\n    protocol: HTTPS\n    port: 443\n    tls:\n      mode: Terminate\n      certificateRefs:\n      - kind: Secret\n        group: \"\"\n        name: first-workload-cert # Provisioned via HTTP01 challenge\n---\napiVersion: gateway.networking.x-k8s.io/v1alpha1\nkind: ListenerSet\nmetadata:\n  name: second-workload-listeners\nspec:\n  parentRef:\n    name: parent-gateway\n    kind: Gateway\n    group: gateway.networking.k8s.io\n  listeners:\n  - name: second\n    hostname: second.foo.com\n    protocol: HTTPS\n    port: 443\n    tls:\n      mode: Terminate\n      certificateRefs:\n      - kind: Secret\n        group: \"\"\n        name: second-workload-cert # Provisioned via HTTP01 challenge\n```\n\n----------------------------------------\n\nTITLE: Traffic Splitting with BackendLBPolicy for One Service\nDESCRIPTION: YAML configuration showing traffic splitting between two services where only one service has session persistence configured via BackendLBPolicy. This demonstrates a configuration where implementation behavior may vary regarding how session persistence is applied.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1619/index.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nkind: HTTPRoute\nmetadata:\n  name: split-route\nspec:\n  rules:\n  - backendRefs:\n    - name: servicev1\n      weight: 50\n    - name: servicev2\n      weight: 50\n---\nkind: BackendLBPolicy\nmetadata:\n  name: lbp-split-route\nspec:\n  targetRef:\n    kind: Service\n    Name: servicev1\n  sessionPersistence:\n    sessionName: split-route-cookie\n    type: Cookie\n```\n\n----------------------------------------\n\nTITLE: Basic HTTPRoute with ServiceImport Backend\nDESCRIPTION: A simple HTTPRoute configuration that forwards traffic to endpoints attached to a \"store\" ServiceImport, demonstrating basic multi-cluster service routing.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1748/index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n{% include 'standard/multicluster/httproute-simple.yaml' %}\n```\n\n----------------------------------------\n\nTITLE: Installing Kubernetes Release Notes Generator for Changelog Creation\nDESCRIPTION: Commands to install and use the Kubernetes release notes generator tool to create changelog entries for a new Gateway API release. This requires setting a GitHub token and specifying commit range, branch, repository, and organization.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/RELEASE.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo install k8s.io/release/cmd/release-notes@latest\nexport GITHUB_TOKEN=your_token_here\nrelease-notes --start-sha EXAMPLE_COMMIT --end-sha EXAMPLE_COMMIT --branch main --repo gateway-api --org kubernetes-sigs\n```\n\n----------------------------------------\n\nTITLE: Configuring Cluster-Routable Gateway Address in YAML\nDESCRIPTION: This YAML snippet demonstrates how to request a GatewayAddress that is routable within the same cluster. It uses the 'infrastructure.routability' field set to 'Cluster' to specify the desired routability.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1651/index.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: gateway.networking.k8s.io/v1beta1\nkind: Gateway\nmetadata:\n  name: prod-web\nspec:\n  gatewayClassName: example\n  infrastructure:\n    routability: Cluster\n  listeners:\n  - protocol: HTTP\n    port: 80\n```\n\n----------------------------------------\n\nTITLE: Defining XBackendTrafficPolicy Custom Resource in Kubernetes\nDESCRIPTION: XBackendTrafficPolicy defines the configuration for how traffic to a target backend should be handled. It includes fields for API version, kind, metadata, spec, and status.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/reference/specx.md#2025-04-22_snippet_4\n\nLANGUAGE: kubernetes\nCODE:\n```\n{\n  \"apiVersion\": \"gateway.networking.x-k8s.io/v1alpha1\",\n  \"kind\": \"XBackendTrafficPolicy\",\n  \"metadata\": {\n    // Refer to Kubernetes API documentation for fields of `metadata`.\n  },\n  \"spec\": {\n    // Spec defines the desired state of BackendTrafficPolicy.\n  },\n  \"status\": {\n    // Status defines the current state of BackendTrafficPolicy.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GRPCMethodMatch Struct in Go for Kubernetes Gateway API\nDESCRIPTION: Defines the GRPCMethodMatch struct which specifies how to match gRPC requests based on service and/or method.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1016/index.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// GRPCPathMatch describes how to select a gRPC route by matching the gRPC\n// request service and/or method..\n//\n// At least one of Service and Method must be a non-empty string.\ntype GRPCMethodMatch struct {\n\t// Type specifies how to match against the service and/or method.\n\t// Support: Core (Exact with service and method specified)\n\t//\n\t// Support Implementation-specific (Exact with method specified but no \n\t// service specified)\n\t//\n\t// Support: Implementation-specific (RegularExpression)\n\t//\n\t// +optional\n\t// +kubebuilder:default=Exact\n\tType *GRPCMethodMatchType `json:\"type,omitempty\"`\n\n\n\t// Value of the service to match against. If left empty or omitted, will\n\t// match all services.\n        //\n```\n\n----------------------------------------\n\nTITLE: Request Flow Steps for Gateway API with TLS\nDESCRIPTION: Describes the modified request flow steps when BackendTLSPolicy is implemented in a gateway using a reverse proxy, with emphasis on the TLS handshake step.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1897/index.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n1. A client makes a request to http://foo.example.com.\n2. DNS resolves the name to a Gateway address.\n3. The reverse proxy receives the request on a Listener and uses the Host header to match an HTTPRoute.\n4. Optionally, the reverse proxy can perform request header and/or path matching based on match rules of the HTTPRoute.\n5. Optionally, the reverse proxy can modify the request, i.e. add/remove headers, based on filter rules of the HTTPRoute.\n6. Lastly, the reverse proxy optionally performs a TLS handshake and forwards the request to one or more objects, i.e. Service, in the cluster based on backendRefs rules of the HTTPRoute and the TargetRefs of the BackendTLSPolicy.\n```\n\n----------------------------------------\n\nTITLE: Adding SubjectAltNames Field to BackendTLSPolicyValidation in Go\nDESCRIPTION: Introduces a new SubjectAltNames field to BackendTLSPolicyValidation to enable backend certificates with different identities than SNI. This supports use cases like SPIFFE which uses URI Subject Names not valid as SNIs.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-3155/index.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype BackendTLSPolicyValidation struct {\n  // SubjectAltNames contains one or more Subject Alternative Names.\n  // When specified, the certificate served from the backend MUST have at least one\n  // Subject Alternate Name matching one of the specified SubjectAltNames.\n  // +kubebuilder:validation:MaxItems=5\n  SubjectAltNames []SubjectAltName `json:\"subjectAltNames,omitempty\"`\n}\n\n// +kubebuilder:validation:Enum=Cookie;Header\ntype SubjectAltNameType string\n\nconst (\n   // HostnameSubjectAltNameType specifies hostname-based SAN.\n   //\n   // Support: Core\n   HostnameSubjectAltNameType SubjectAltNameType = \"Hostname\"\n\n   // URISubjectAltNameType specifies URI-based SAN, e.g. SPIFFE id.\n   //\n   // Support: Core\n   URISubjectAltNameType SubjectAltNameType = \"URI\"\n)\n\n\ntype SubjectAltName struct {\n  // Type determines the format of the Subject Alternative Name. Always required.\n  Type SubjectAltNameType `json:\"type\"`\n\n  // Hostname contains Subject Alternative Name specified in DNS name format. Required when Type is set to Hostname, ignored otherwise.\n  Hostname v1.PreciseHostname `json:\"hostname,omitempty\"`\n\n  // URI contains Subject Alternative Name specified in URI format. Required when Type is set to URI, ignored otherwise.\n  URI string `json:\"uri,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS Listener with External TLS Certificate in Gateway API YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure an HTTPS listener in a Gateway using an external TLS certificate provider. It shows the use of vendor-specific options to reference a certificate stored outside of Kubernetes.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/guides/implementers.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n  listeners:\n  - name: https\n    protocol: HTTPS\n    port: 443\n    tls:\n      mode: Terminate\n      options:\n        vendor.example.com/certificate-name: store-example-com\n```\n\n----------------------------------------\n\nTITLE: Defining HTTPCookie Types in Go\nDESCRIPTION: Defines structs for HTTP cookie-based session persistence configuration, including cookie attributes and validation rules.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1619/index.md#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\ntype HttpCookie struct {\n    // Name defines the cookie's name.\n    //\n    // +kubebuilder:validation:MaxLength=4096\n    Name String `json:\"name,omitempty\"`\n\n    // CookieAttributes defines the cookie's attributes.\n    //\n    // +optional\n    CookieAttributes []CookieAttribute `json:cookieAttributes`\n}\n\ntype CookieAttribute map[string][]string\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPRoute with Multiple ParentRefs in YAML\nDESCRIPTION: Shows how to configure an HTTPRoute to attach to listeners in both a Gateway and a ListenerSet using multiple parentRefs.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1713/index.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: gateway.networking.k8s.io/v1\nkind: HTTPRoute\nmetadata:\n  name: httproute-example\nspec:\n  parentRefs:\n  - name: second-workload-listeners\n    kind: ListenerSet\n    sectionName: second\n  - name: parent-gateway\n    kind: Gateway\n    sectionName: foo\n```\n\n----------------------------------------\n\nTITLE: Checking Out Specific Version of Kong Ingress Controller\nDESCRIPTION: Commands to set the desired version as an environment variable and check out that specific version from the git repository.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.2.1/kong-kubernetes-ingress-controller/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport VERSION=v<x.y.z>\ngit checkout $VERSION\n```\n\n----------------------------------------\n\nTITLE: Example GatewayClass Status with SupportedFeatures in YAML\nDESCRIPTION: This YAML example demonstrates a GatewayClass status object with the new SupportedFeatures field populated. It shows how an implementation would report both core resource support (HTTPRoute) and extended features (like HostRewrite, PortRedirect, etc.).\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-2162/index.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: gateway.networking.k8s.io/v1beta1\nkind: GatewayClass\n...\nstatus:\n  conditions:\n  - lastTransitionTime: \"2022-11-16T10:33:06Z\"\n    message: Handled by XXX controller\n    observedGeneration: 1\n    reason: Accepted\n    status: \"True\"\n    type: Accepted\n  supportedFeatures:\n    - HTTPRoute\n    - HTTPRouteHostRewrite\n    - HTTPRoutePortRedirect\n    - HTTPRouteQueryParamMatching\n```\n\n----------------------------------------\n\nTITLE: Adding Response Header Modifier Field\nDESCRIPTION: YAML snippet showing the addition of a new field for modifying HTTP response headers.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/CHANGELOG/0.x-CHANGELOG.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- A new field `responseHeaderModifier` is added to `.spec.rules.filters`, which\n  allows for modification of HTTP response headers (#1373, @aryan9600)\n```\n\n----------------------------------------\n\nTITLE: HAProxy Timeouts Configuration Flow Diagram\nDESCRIPTION: A sequence diagram detailing the various timeout configurations available in HAProxy. Shows the specific timeouts applicable at different stages of the HTTP request/response cycle.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1742/index.md#2025-04-22_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant C as Client\n    participant P as Proxy\n    participant U as Upstream\n\n    C->>P: Connection Started\n    activate U\n    activate C\n    activate P\n    note left of P: timeout client (idle)\n    C->>P: Starts sending Request\n    C->>P: Finishes Headers\n    C->>P: Finishes request\n    note left of C: timeout http-request\n    deactivate C\n\t\t\tactivate C\n    note left of C: timeout client-fin\n    deactivate C\n\t\tdeactivate P\n    activate U\n    note left of U: timeout queue<br/>(wait for available server)\n    deactivate U\n\n    P->>U: Connection Started\n    activate U\n    P->>U: Starts sending Request\n    activate U\n    P->>U: Finishes Headers\n    P->>U: Finishes request\n\n    note right of U: timeout connect\n    deactivate U\n    note left of U: timeout server<br/>(idle timeout)\n    deactivate U\n    activate U\n    note left of U: timeout server-fin\n    deactivate U\n    U->>P: Starts Response\n    U->>P: Finishes Headers\n    U->>P: Finishes Response\n    P->>C: Starts Response\n    P->>C: Finishes Headers\n    P->>C: Finishes Response\n    activate C\n    note left of C: timeout http-keep-alive\n    deactivate C\n    Note right of P: Repeat if connection sharing\n    Note right of U: timeout tunnel<br/>(for upgraded connections)\n    deactivate U\n    U->>C: Connection ended\n```\n\n----------------------------------------\n\nTITLE: CORS Filter Implementation Example in Rust\nDESCRIPTION: This Rust code snippet provides an example implementation of a CORS filter. It checks if the request method is 'origin' and returns a CORS response if true, otherwise it returns the original request.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1767/index.md#2025-04-22_snippet_20\n\nLANGUAGE: rust\nCODE:\n```\nfn run_filter(req: HTTPRequest) -> FilterResponse {\n  if req.method == origin { return Response(cors_response()) }\n    return Request(req)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting TLS Minimum Version Policy with Namespace-level Defaults\nDESCRIPTION: Demonstrates how to set default TLS minimum version across multiple Gateways using namespace-level policy attachment.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-2649/index.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.example.io/v1alpha1\nkind: TLSMinimumVersionPolicy\nmetadata:\n  name: minimum12\n  namespace: appns\nspec:\n  defaults:\n    minimumTLSVersion: 1.2\n  targetRef:\n    name: appns\n    group: \"\"\n    kind: namespace\n```\n\n----------------------------------------\n\nTITLE: Defining Gateway, HTTPRoute, and ReferenceGrant for Route-to-Gateway Reference in Kubernetes YAML\nDESCRIPTION: This YAML snippet illustrates an alternative approach where Routes reference Gateways using ReferenceGrant. It includes definitions for a Gateway, an HTTPRoute referencing the Gateway, and a ReferenceGrant to allow the cross-namespace reference.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-724/index.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Gateway\nmetadata:\n  name: lb\n  namespace: infra\nspec:\n  listeners:\n  - name: foo\n    hostname: foo.com\n    port: 80\n---\nkind: ReferenceGrant\nmetadata:\n  name: foo-lb\n  namespace: infra\nspec:\n  from:\n  - group: gateway.networking.k8s.io\n    kind: HTTPRoute\n    namespace: foo\n  to:\n  - group: gateway.networking.k8s.io\n    kind: Gateway\n    name: lb\n    sectionName: foo\n---\nkind: HTTPRoute\nmetadata:\n  name: foo\n  namespace: foo\nspec:\n  parentRefs:\n  - kind: Gateway\n    namespace: infra\n    name: lb\n    sectionName: foo\n  rules:\n  - name: abc\n    matches:\n    - path: /bar\n```\n\n----------------------------------------\n\nTITLE: Different Origin URL Examples\nDESCRIPTION: Examples of URLs that have different origins due to variations in scheme, host, or port.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1767/index.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n   http://example.com/\n   http://example.com:8080/\n   http://www.example.com/\n   https://example.com:80/\n   https://example.com/\n   http://example.org/\n   http://ietf.org/\n```\n\n----------------------------------------\n\nTITLE: Full Path Redirect HTTPRoute\nDESCRIPTION: HTTPRoute configuration for full path redirection, replacing entire paths with new values.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/guides/http-redirect-rewrite.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n{% include 'standard/http-redirect-rewrite/httproute-redirect-full.yaml' %}\n```\n\n----------------------------------------\n\nTITLE: Running Experimental Conformance Tests\nDESCRIPTION: Command to execute the experimental conformance tests while specifying the path for the conformance report output file.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.2.1/envoy-gateway/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nCONFORMANCE_REPORT_PATH=conformance-report-k8s.yaml make experimental-conformance\n```\n\n----------------------------------------\n\nTITLE: Defining BackendTrafficPolicy Structs in Go\nDESCRIPTION: Core Go struct definitions for BackendTrafficPolicy, including specifications for traffic management, retry policies, and request rate handling. Includes metadata fields and status tracking.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-3388/index.md#2025-04-22_snippet_2\n\nLANGUAGE: golang\nCODE:\n```\ntype BackendTrafficPolicy struct {\n    metav1.TypeMeta   `json:\",inline\"`\n    metav1.ObjectMeta `json:\"metadata,omitempty\"`\n    Spec BackendTrafficPolicySpec `json:\"spec\"`\n    Status PolicyStatus `json:\"status,omitempty\"`\n}\n\ntype BackendTrafficPolicySpec struct {\n  TargetRefs []LocalPolicyTargetReference `json:\"targetRefs\"`\n  Retry *CommonRetryPolicy `json:\"retry,omitempty\"`\n  SessionPersistence *SessionPersistence `json:\"sessionPersistence,omitempty\"`\n}\n\ntype CommonRetryPolicy struct {\n    BudgetPercent *Int `json:\"budgetPercent,omitempty\"`\n    BudgetInterval *Duration `json:\"budgetInterval,omitempty\"`\n    MinRetryRate *RequestRate `json:\"minRetryRate,omitempty\"`\n}\n\ntype RequestRate struct {\n    Count *Int `json:\"count,omitempty\"`\n    Interval *Duration `json:\"interval,omitempty\"`\n}\n\ntype Duration string\n```\n\n----------------------------------------\n\nTITLE: Adding New Gateway and Listener Conditions\nDESCRIPTION: YAML snippets showing the addition of new conditions and deprecation of old ones for Gateway and Gateway Listener resources.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/CHANGELOG/0.x-CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n- Adds `Accepted` and deprecates `Detached` Listener conditions and reasons (#1446, @mikemorris)\n- Adds `Accepted` and deprecates `Scheduled` Gateway conditions and reasons (#1447, @mikemorris)\n- Adds `Pending` reason for use with all `Accepted` conditions throughout the API (#1453, @youngnick)\n- Adds `Programmed` Gateway and Listener conditions, moves `Ready` to extended\n  conformance (#1499, @LCaparelli)\n- Add `RouteReasonNoMatchingParent` reason for `Accepted` condition. (#1516, @pmalek)\n```\n\n----------------------------------------\n\nTITLE: Traefik Timeouts Configuration Flow Diagram\nDESCRIPTION: A sequence diagram illustrating the timeout configurations in Traefik proxy. Shows the various timeouts that can be applied during different stages of the HTTP request/response cycle.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1742/index.md#2025-04-22_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant C as Client\n    participant P as Proxy\n    participant U as Upstream\n    C->>P: Connection Started\n    activate U\n    C->>P: Starts sending Request\n    activate P\n    C->>P: Finishes Headers\n    Note right of P: respondingTimeouts<br/>readTimeout\n    C->>P: Finishes request\n    deactivate P\n    P->>U: Connection Started\n    activate U\n    Note right of U: forwardingTimeouts<br/>dialTimeout\n    deactivate U\n    P->>U: Starts sending Request\n    P->>U: Finishes request\n    P->>U: Finishes Headers\n    U->>P: Starts Response\n    activate U\n    note right of U: forwardingTimeouts<br/>responseHeaderTimeout\n    U->>P: Finishes Headers\n    deactivate U\n    U->>P: Finishes Response\n    P->>C: Starts Response\n    activate P\n    P->>C: Finishes Headers\n    Note right of P: respondingTimeouts<br/>writeTimeout\n    P->>C: Finishes Response\n    deactivate P\n    Note right of P: Repeat if connection sharing\n    Note right of U: respondingTimeouts<br/>idleTimeout<br/>Keepalive connections only\n    deactivate U\n    U->>C: Connection ended\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPRoute with ListenerSet ParentRef in YAML\nDESCRIPTION: Demonstrates how to configure an HTTPRoute to attach to a specific listener in a ListenerSet using the parentRefs field.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1713/index.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: gateway.networking.k8s.io/v1\nkind: HTTPRoute\nmetadata:\n  name: httproute-example\nspec:\n  parentRefs:\n  - name: second-workload-listeners\n    kind: ListenerSet\n    sectionName: second\n```\n\n----------------------------------------\n\nTITLE: Cross-Namespace ServiceImport Reference with ReferenceGrant\nDESCRIPTION: An example showing how to use ReferenceGrant to enable HTTPRoute to reference a ServiceImport in a different namespace, extending multi-cluster routing capabilities.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1748/index.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n{% include 'standard/multicluster/httproute-referencegrant.yaml' %}\n```\n\n----------------------------------------\n\nTITLE: Removing TLS Override Types and Policy in Go\nDESCRIPTION: This code snippet shows the TLS override types and policy structure that would be removed. These types defined how TLS settings could be overridden at the Route level.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-746/index.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype TLSRouteOverrideType string\n\nconst (\n    // Allows the parameter to be configured from all routes.\n    TLSRouteOverrideAllow TLSRouteOverrideType = \"Allow\"\n\n    // Prohibits the parameter from being configured from any route.\n    TLSRouteOverrideDeny TLSRouteOverrideType = \"Deny\"\n)\n\n// TLSOverridePolicy defines a schema for overriding TLS settings at the Route\n// level.\ntype TLSOverridePolicy struct {\n    // Certificate dictates if TLS certificates can be configured\n    // via Routes. If set to 'Allow', a TLS certificate for a hostname\n    // defined in a Route takes precedence over the certificate defined in\n    // Gateway.\n    //\n    // Support: Core\n    //\n    // +optional\n    // +kubebuilder:default=Deny\n    Certificate *TLSRouteOverrideType `json:\"certificate,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Enforcing TLS Minimum Version with Namespace-level Overrides\nDESCRIPTION: Shows how to enforce minimum TLS version requirements using override policies at the namespace level.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-2649/index.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.example.io/v1alpha1\nkind: TLSMinimumVersionPolicy\nmetadata:\n  name: minimum12\n  namespace: appns\nspec:\n  overrides:\n    minimumTLSVersion: 1.2\n  targetRef:\n    name: appns\n    group: \"\"\n    kind: namespace\n```\n\n----------------------------------------\n\nTITLE: Cloning Gloo Gateway Repository and Checking Out Release Version\nDESCRIPTION: Commands to clone the Gloo Gateway repository from GitHub and checkout a specific release version for testing. This sets up the required codebase for running the conformance tests.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.2.0/gloo-gateway/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/solo-io/gloo.git\ncd gloo\nexport VERSION=\"v1.18.0\"\ngit checkout tags/$VERSION -b $VERSION\n```\n\n----------------------------------------\n\nTITLE: Defining Ready Condition in Go for Gateway API\nDESCRIPTION: This code snippet defines the 'Ready' condition for the Gateway resource in the Gateway API. It describes when the Gateway is expected to be able to serve traffic, with a note about potential incompleteness of configuration.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1364/index.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// This condition is true when the Gateway is expected to be able\n// to serve traffic. Note that this does not indicate that the\n// Gateway configuration is current or even complete (e.g. the\n// controller may still not have reconciled the latest version,\n// or some parts of the configuration could be missing).\n```\n\n----------------------------------------\n\nTITLE: Defining Feature Names for Gateway API Conformance Tests\nDESCRIPTION: Specifies the feature names used for conformance tests and GatewayClass status reporting related to BackendProtocol support.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/CHANGELOG/1.2-CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n* `HTTPRouteBackendProtocolH2C` for H2C support, when\n  `service.spec.ports[].appProtocol` is `kubernetes.io/h2c`.\n* `HTTPRouteBackendProtocolWebSocket` for Websocket support, when\n  `service.spec.ports[].appProtocol` is `kubernetes.io/ws` or\n  `kubernetes.io/wss`.\n```\n\n----------------------------------------\n\nTITLE: Defining SessionPersistencePolicy in Go\nDESCRIPTION: Defines a SessionPersistencePolicy struct for configuring session persistence rules. Includes TypeMeta, ObjectMeta, Spec and Status fields with custom policy configuration options.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1619/index.md#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\ntype SessionPersistencePolicy struct {\n    metav1.TypeMeta   `json:\",inline\"`\n    metav1.ObjectMeta `json:\"metadata,omitempty\"`\n\n    // Spec defines the desired state of SessionPersistencePolicy.\n    Spec SessionPersistencePolicySpec `json:\"spec\"`\n\n    // Status defines the current state of SessionPersistencePolicy.\n    Status PolicyStatus `json:\"status,omitempty\"`\n}\n\ntype SessionPersistencePolicySpec struct {\n    // TargetRef identifies an API object to apply policy to.\n    TargetRef gatewayv1a2.PolicyTargetReference `json:\"targetRef\"`\n\n    // SessionName defines the name of the persistent session token\n    // (e.g. a cookie name).\n    //\n    // +optional\n    // +kubebuilder:validation:MaxLength=4096\n    SessionName String `json:\"sessionName,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring README.md for Gateway API Conformance Reports\nDESCRIPTION: Defines the recommended structure for README.md files in conformance reports, including general information, a table of contents with API channels, implementation versions, modes, and report links, and instructions for reproduction.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1709/index.md#2025-04-22_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n# Acme operator\n\nGeneral information about the Acme/operator project\n\n## Table of contents\n\n| API channel | Implementation version | Mode | Report |\n|-------------|------------------------|------|--------|\n|             |                        |      |        |\n|             |                        |      |        |\n|             |                        |      |        |\n\n## To reproduce\n\nInstructions on how to reproduce the claimed report.\n```\n\n----------------------------------------\n\nTITLE: Multiple ParentRefs with Mesh and Service\nDESCRIPTION: Configuration showing how an HTTPRoute can reference both a Mesh and Service resource as peers in parentRefs.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1294/index.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  parentRefs:\n  - kind: Mesh\n    name: cool-mesh\n  - kind: Service\n    name: foo\n```\n\n----------------------------------------\n\nTITLE: Defining GRPCRoute Status with Parent References in Kubernetes YAML\nDESCRIPTION: This YAML snippet demonstrates how to define the status of a GRPCRoute named 'grpc-example' that has been accepted by a Gateway named 'gw-example' in the 'gw-example-ns' namespace. It shows the structure of the 'status' field with parent references and conditions.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/api-types/grpcroute.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: gateway.networking.k8s.io/v1\nkind: GRPCRoute\nmetadata:\n  name: grpc-example\n...\nstatus:\n  parents:\n  - parentRefs:\n      name: gw-example\n      namespace: gw-example-ns\n    conditions:\n    - type: Accepted\n      status: \"True\"\n```\n\n----------------------------------------\n\nTITLE: Describing HTTPRoute Resource\nDESCRIPTION: Detailed output of gwctl describe httproute command showing complete HTTPRoute resource configuration including spec, status and policies.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-2722/index.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nName: demo-httproute\nNamespace: default\nLabels: <none>\nAnnotations: <none>\nAPI Version: gateway.networking.k8s.io/v1beta1\nKind: HTTPRoute\nMetadata:\n  creationTimestamp: \"2023-11-09T09:45:03Z\"\n  generation: 1\n  resourceVersion: \"290416533\"\n  uid: 716d9e5f-f57a-4e56-81f6-c579d5d17471\nSpec:\n  hostnames:\n  - example.com\n  parentRefs:\n  - group: gateway.networking.k8s.io\n    kind: Gateway\n    name: demo-gateway\n  rules:\n  - backendRefs:\n    - group: \"\"\n      kind: Service\n      name: demo-svc\n      port: 80\n      weight: 1\n    matches:\n    - path:\n        type: PathPrefix\n        value: /example\nStatus:\n  parents:\n  - conditions:\n    - lastTransitionTime: \"2023-12-01T18:49:14Z\"\n      message: \"\"\n      observedGeneration: 1\n      reason: ReconciliationSucceeded\n      status: \"True\"\n      type: Reconciled\n    controllerName: networking.io/gateway\n    parentRef:\n      group: gateway.networking.k8s.io\n      kind: Gateway\n      name: demo-gateway\nDirectlyAttachedPolicies:\n  TYPE                       NAME\n  ----                       ----\n  HealthCheckPolicy.foo.com  demo-health-check-1\n  RetryOnPolicy.baz.com      demo-retry-policy-1\nInheritedPolicies:\n  TYPE                   NAME                                 TARGET KIND   TARGET NAME\n  ----                   ----                                 -----------   -----------\n  TimeoutPolicy.foo.com  demo-timeout-policy-on-gatewayclass  GatewayClass  abc-gatewayclass\n  RetryOnPolicy.baz.com  demo-retry-policy-1                  Gateway       abc-gateway\nEffectivePolicies:\n  HealthCheckPolicy.foo.com:\n    sampleParentField:\n      sampleField: hello\n  RetryOnPolicy.foo.com:\n    sampleParentField:\n      sampleField: namaste\n  TimeoutPolicy.bar.com:\n    timeout1: parent\n    timeout2: child\n    timeout3: parent\n    timeout4: child\nEvents:\n  Type    Reason  Age                    From                   Message\n  ----    ------  ----                   ----                   -------\n  Normal  SYNC    2m12s (x46 over 138m)  sc-gateway-controller  SYNC on default/demo-gateway was a success\n```\n\n----------------------------------------\n\nTITLE: Describing Gateway Resource\nDESCRIPTION: Detailed output of gwctl describe gateway command showing complete Gateway resource configuration including spec, status, routes and policies.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-2722/index.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nName: demo-gateway\nNamespace: default\nLabels: <none>\nAnnotations:\n  annotation.foo: value1\n  annotation.bar.baz: abcdefghijkl\nAPI Version: gateway.networking.k8s.io/v1beta1\nKind: Gateway\nMetadata:\n  creationTimestamp: \"2023-12-01T18:29:41Z\"\n  finalizers:\n  - gateway.finalizer.networking.io\n  generation: 4\n  resourceVersion: \"310164667\"\n  uid: ed046878-f659-4908-b80f-b88c9617ba8a\nSpec:\n  gatewayClassName: l7-global-external-managed\n  listeners:\n  - allowedRoutes:\n      namespaces:\n        from: Same\n    name: http\n    port: 80\n    protocol: HTTP\nStatus:\n  addresses:\n  - type: IPAddress\n    value: 10.0.0.1\n  conditions:\n  - lastTransitionTime: \"2023-12-01T18:49:25Z\"\n    message: \"\"\n    observedGeneration: 3\n    reason: Programmed\n    status: \"True\"\n    type: Programmed\n  listeners:\n  - attachedRoutes: 1\n    conditions:\n    - lastTransitionTime: \"2023-12-01T18:49:25Z\"\n      message: Some message\n      observedGeneration: 3\n      reason: Ready\n      status: \"True\"\n      type: Ready\n    name: http\n    supportedKinds:\n    - group: gateway.networking.k8s.io\n      kind: HTTPRoute\nAttachedRoutes:\n  Kind        Name                 Namespace\n  ----        ----                 ---------\n  HTTPRoute   demo-health-check-1  default\n  TCPRoute    demo-retry-policy-1  default\nDirectlyAttachedPolicies:\n  TYPE                   NAME\n  ----                   ----\n  TimeoutPolicy.foo.com  demo-timeout-policy-on-gatewayclass\n  RetryOnPolicy.baz.com  demo-retry-policy-1\nInheritedPolicies:\n  TYPE                   NAME                                 TARGET KIND   TARGET NAME\n  ----                   ----                                 -----------   -----------\n  TimeoutPolicy.foo.com  demo-timeout-policy-on-gatewayclass  GatewayClass  abc-gatewayclass\nEffectivePolicies:\n  HealthCheckPolicy.foo.com:\n    sampleParentField:\n      sampleField: hello\n  RetryOnPolicy.foo.com:\n    sampleParentField:\n      sampleField: namaste\n  TimeoutPolicy.bar.com:\n    timeout1: parent\n    timeout2: child\n    timeout3: parent\n    timeout4: child\nEvents:\n  Type    Reason  Age                    From                   Message\n  ----    ------  ----                   ----                   -------\n  Normal  SYNC    2m12s (x46 over 138m)  sc-gateway-controller  SYNC on default/demo-gateway was a success\n```\n\n----------------------------------------\n\nTITLE: Running Conformance Tests with Feature Exclusions via Command Line\nDESCRIPTION: Example of running Gateway API conformance tests with specified profiles and explicitly listing unsupported features using command line arguments.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1709/index.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ go test ./conformance/... -args \\\n    -gateway-class=acme \\\n    -conformance-profiles=HTTP,TCP \\\n    -unsupported-features=HTTPResponseHeaderModification,HTTPRouteMethodMatching,HTTPRouteQueryParamMatching,\n```\n\n----------------------------------------\n\nTITLE: Defining GatewayInfrastructure struct in Go for Gateway API\nDESCRIPTION: This code snippet defines the GatewayInfrastructure struct, which is part of the GatewaySpec. It includes fields for Labels, Annotations, and ParametersRef to allow configuration of infrastructure-level attributes for a specific Gateway instance.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1867/index.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype GatewaySpec struct {\n  // Infrastructure defines infrastructure level attributes about this Gateway instance.\n  //\n  // Support: Extended\n  //\n  // +optional\n  Infrastructure GatewayInfrastructure `json:\"infrastructure\"`\n  // ...\n}\n\ntype GatewayInfrastructure struct {\n  // Labels that SHOULD be applied to any resources created in response to this Gateway.\n  //\n  // For implementations creating other Kubernetes objects, this should be the `metadata.labels` field on resources.\n  // For other implementations, this refers to any relevant (implementation specific) \"labels\" concepts.\n  //\n  // An implementation may chose to add additional implementation-specific labels as they see fit.\n  //\n  // Support: Extended\n  //\n  // +optional\n  // +kubebuilder:validation:MaxProperties=8\n  Labels map[AnnotationKey]AnnotationValue `json:\"labels,omitempty\"`\n\n  // Annotations that SHOULD be applied to any resources created in response to this Gateway.\n  //\n  // For implementations creating other Kubernetes objects, this should be the `metadata.annotations` field on resources.\n  // For other implementations, this refers to any relevant (implementation specific) \"annotations\" concepts.\n  //\n  // An implementation may chose to add additional implementation-specific annotations as they see fit.\n  //\n  // Support: Extended\n  //\n  // +optional\n  // +kubebuilder:validation:MaxProperties=8\n  Annotations map[AnnotationKey]AnnotationValue `json:\"annotations,omitempty\"`\n\n  // ParametersRef is a reference to a resource that contains the configuration\n  // parameters corresponding to the Gateway. This is optional if the\n  // controller does not require any additional configuration.\n  //\n  // This follows the same semantics as GatewayClass's `parametersRef`, but on a per-Gateway basis\n  //\n  // The Gateway's GatewayClass may provide its own `parametersRef`. When both are specified,\n  // the merging behavior is implementation specific.\n  // It is generally recommended that GatewayClass provides defaults that can be overridden by a Gateway.\n  //\n  // Support: Implementation-specific\n  //\n  // +optional\n  ParametersRef *LocalParametersReference `json:\"parametersRef,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GRPCMethodMatchType in Go for Kubernetes Gateway API\nDESCRIPTION: This snippet defines the GRPCMethodMatchType, which specifies the semantics of how gRPC methods and services should be compared. It includes constants for Exact and RegularExpression matching types.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1016/index.md#2025-04-22_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\n// MethodMatchType specifies the semantics of how gRPC methods and services should be compared.\n// Valid MethodMatchType values are:\n//\n// * \"Exact\"\n// * \"RegularExpression\"\n//\n// Exact paths must be syntactically valid:\n//\n// - Must not contain `/` character\n//\n// +kubebuilder:validation:Enum=Exact;PathPrefix;RegularExpression\n// +kubebuilder:validation:Enum=Exact;RegularExpression\ntype GRPCMethodMatchType string\n\nconst (\n\t// Matches the service and/or method exactly and with case sensitivity.\n\tPathMatchExact PathMatchType = \"Exact\"\n\n\t// Matches if the service and/or method matches the given regular expression with\n\t// case sensitivity.\n\t//\n\t// Since `\"RegularExpression\"` has custom conformance, implementations\n\t// can support POSIX, PCRE, RE2 or any other regular expression dialect.\n\t// Please read the implementation's documentation to determine the supported\n\t// dialect.\n\tPathMatchRegularExpression PathMatchType = \"RegularExpression\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Listener Structure in Go\nDESCRIPTION: Golang struct definition for Gateway Listener with name field specifications and validation rules\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-724/index.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype Listener struct {\n    // Name is the name of the Listener. If more than one Listener is present\n    // each Listener MUST specify a name. The names of Listeners MUST be unique\n    // within a Gateway.\n    //\n    // Support: Core\n    //\n    // +kubebuilder:validation:MinLength=1\n    // +kubebuilder:validation:MaxLength=253\n    // +optional\n    Name *string `json:\"name,omitempty\"`\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecating v1alpha2 API Versions\nDESCRIPTION: YAML snippet indicating the deprecation of v1alpha2 API versions for GatewayClass, Gateway, and HTTPRoute resources.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/CHANGELOG/0.x-CHANGELOG.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- GatewayClass, Gateway, and HTTPRoute are now only supported with the v1beta1\n  version of the API. The v1alpha2 API versions of these resources will be fully\n  removed in a future release. Additionally, v1alpha2 is marked as deprecated\n  everywhere. (#1348 and #1405, @robscott)\n```\n\n----------------------------------------\n\nTITLE: BackendRef Cross-Namespace Extension\nDESCRIPTION: Definition of the BackendRef struct with namespace field to enable cross-namespace forwarding.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-709/index.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype BackendRef struct {\n    // ...\n\n    // Namespace is the namespace of the backend. When unspecified, the local\n    // namespace is inferred.\n    //\n    // Support: Core\n    //\n    // +kubebuilder:validation:MinLength=1\n    // +kubebuilder:validation:MaxLength=253\n    // +optional\n    Namespace *string `json:\"namespace,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: GatewayClass Status Example in YAML\nDESCRIPTION: These examples demonstrate different status conditions for a GatewayClass, including an initial state, an accepted state, and an error state. The status field contains conditions that indicate the acceptance and validity of the GatewayClass configuration.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/api-types/gatewayclass.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nkind: GatewayClass\n...\nstatus:\n  conditions:\n  - type: Accepted\n    status: False\n    ...\n\n```\n\nLANGUAGE: yaml\nCODE:\n```\nkind: GatewayClass\n...\nstatus:\n  conditions:\n  - type: Accepted\n    status: True\n    ...\n\n```\n\nLANGUAGE: yaml\nCODE:\n```\nkind: GatewayClass\n...\nstatus:\n  conditions:\n  - type: Accepted\n    status: False\n    Reason: BadFooBar\n    Message: \"foobar\" is an FooBar.\n```\n\n----------------------------------------\n\nTITLE: Listing Backends with Wide Output\nDESCRIPTION: Example output of gwctl get backend command showing backend services and their referencing routes, age and policy counts.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-2722/index.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nNAME         TYPE     REFERRED BY ROUTES                         AGE  POLICIES\nfoo-svc      Service  foo-httproute-1,abc-httproute-33 + 4 more  45m  5\nbar-baz-svc  Service  bar-httproute                              11d  1\n```\n\n----------------------------------------\n\nTITLE: BackendTLSPolicy Object Structure Diagram\nDESCRIPTION: Mermaid flowchart showing the structure and relationships between BackendTLSPolicy components including spec, status, validation, and targeting configuration.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/api-types/backendtlspolicy.md#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    backendTLSPolicy[[\"<b>backendTLSPolicy</b> <hr><align=left>BackendTLSPolicySpec: spec<br>PolicyStatus: status</align>\"]]\n    spec[[\"<b>spec</b><hr>PolicyTargetReferenceWithSectionName: targetRefs <br> BackendTLSPolicyValidation: tls\"]]\n    status[[\"<b>status</b><hr>[ ]PolicyAncestorStatus: ancestors\"]]\n    validation[[\"<b>tls</b><hr>LocalObjectReference: caCertificateRefs<br>wellKnownCACertificatesType: wellKnownCACertificates/<br>PreciseHostname: hostname\"]]\n    ancestorStatus[[\"<b>ancestors</b><hr>AncestorRef: parentReference<br>GatewayController: controllerName<br>[]Condition: conditions\"]]\n    targetRefs[[\"<b>targetRefs</b><hr>\"]]\n    service[\"<b>service</>\"] \n    backendTLSPolicy -->spec\n    backendTLSPolicy -->status\n    spec -->targetRefs & validation\n    status -->ancestorStatus\n    targetRefs -->service\n    note[<em>choose only one<hr> caCertificateRefs OR wellKnownCACertificates</em>]\n    style note fill:#fff\n    validation -.- note\n```\n\n----------------------------------------\n\nTITLE: Verifying Gloo Gateway Conformance Report\nDESCRIPTION: Displays the contents of the conformance test report file generated after running the test suite.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.0.0/gloo-gateway/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncat _test/conformance/1.17.4-report.yaml\n```\n\n----------------------------------------\n\nTITLE: Adding Options Field to BackendTLSPolicySpec in Go\nDESCRIPTION: Introduces an options field on BackendTLSPolicy to support implementation-specific TLS configurations. This allows for vendor-specific mTLS automation, restrictions on TLS versions, or supported cipher suites.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-3155/index.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype BackendTLSPolicySpec struct {\n  // Options are a list of key/value pairs to enable extended TLS\n  // configuration for each implementation. For example, configuring the\n  // minimum TLS version or supported cipher suites.\n  //\n  // A set of common keys MAY be defined by the API in the future. To avoid\n  // any ambiguity, implementation-specific definitions MUST use\n  // domain-prefixed names, such as `example.com/my-custom-option`.\n  // Un-prefixed names are reserved for key names defined by Gateway API.\n  //\n  // Support: Implementation-specific\n  //\n  // +optional\n  // +kubebuilder:validation:MaxProperties=16\n  Options map[AnnotationKey]AnnotationValue `json:\"options,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Gateway-Initiated Session Persistence Using Mermaid Sequence Diagram\nDESCRIPTION: This diagram illustrates the flow of a gateway-initiated session using cookies for persistence. It shows how the gateway adds a set-cookie header to responses, which the client then uses in subsequent requests to maintain a persistent connection to the same backend.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1619/index.md#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    actor C as Client\n    participant G as Gateway\n    participant B as Backend\n    C->>+G: Request Web Page\n    activate G\n    G->>+B: Request\n    B-->>-G: Response\n    G->>G: Add set-cookie header\n    G-->>-C: Response<br>[set-cookie]\n    Note right of G: [set-cookie] indicates a response<br> with a set-cookie header.<br>May include other set-cookie<br>headers from backend.\n    C->>C: Create Cookie(s)<br>from set-cookie header(s)\n    Note right of C: [cookie] indicates a request<br> with one or more cookies\n    C->>+G: Request Web Page<br>[cookie]\n    G->>G: Consistent lookup of<br>server using cookie value\n    G->>+B: Request<br>[cookie]\n    B-->>-G: Response\n    G-->>-C: Response\n```\n\n----------------------------------------\n\nTITLE: Defining ListenerStatus Structure\nDESCRIPTION: Golang struct definition for ListenerStatus including name, supported kinds, and attached routes\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-724/index.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype ListenerStatus struct {\n    // Name is the name of the Listener.\n    //\n    // +kubebuilder:validation:MinLength=1\n    // +kubebuilder:validation:MaxLength=253\n    // +optional\n    Name *string `json:\"name,omitempty\"`\n\n    // SupportedKinds is the list indicating the Kinds supported by this\n    // listener. When this is not specified on the Listener, this MUST represent\n    // the kinds an implementation supports for the specified protocol. When\n    // there are kinds specified on the Listener, this MUST represent the\n    // intersection of those kinds and the kinds supported by the implementation\n    // for the specified protocol.\n    //\n    // +kubebuilder:validation:MaxItems=10\n    // +optional\n    SupportedKinds []RouteGroupKind `json:\"supportedKinds,omitempty\"`\n\n    // AttachedRoutes represents the total number of Routes that have been\n    // successfully attached to this Listener.\n    AttachedRoutes int32 `json:\"attachedRoutes\"`\n\n    // Conditions...\n}\n```\n\n----------------------------------------\n\nTITLE: Contour Gateway API Version Table\nDESCRIPTION: Markdown table showing the API channel, implementation version, mode and report link for Contour's Gateway API implementation.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v0.8.0/projectcontour-contour/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|API channel|Implementation version|Mode|Report|\n|-----------|----------------------|----|------|\n|x|[v1.26.0](https://github.com/projectcontour/contour/releases/tag/v1.26.0)|x|[v1.26.0 report](./v1.26.0-report.yaml)|\n```\n\n----------------------------------------\n\nTITLE: TCPRouteRule Definition with Address Matching\nDESCRIPTION: Shows how AddressRouteMatches is incorporated into TCPRouteRule as an optional field for filtering traffic.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-735/index.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype TCPRouteRule struct {\n\tMatches []AddressRouteMatches `json:\"matches,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: BackendTLSPolicy Service Flow Diagram\nDESCRIPTION: Mermaid flowchart illustrating the request flow from client through Gateway and HTTPRoute to backend pods, showing where BackendTLSPolicy applies in the architecture.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/api-types/backendtlspolicy.md#2025-04-22_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    client([\"client\"])\n    gateway[\"Gateway\"]\n    style gateway fill:#02f,color:#fff\n    httproute[\"HTTP<BR>Route\"]\n    style httproute fill:#02f,color:#fff\n    service[\"Service\"]\n    style service fill:#02f,color:#fff\n    pod1[\"Pod\"]\n    style pod1 fill:#02f,color:#fff\n    pod2[\"Pod\"]\n    style pod2 fill:#02f,color:#fff\n    client -.->|HTTP <br> request| gateway\n    gateway --> httproute\n    httproute -.->|BackendTLSPolicy|service\n    service --> pod1 & pod2\n```\n\n----------------------------------------\n\nTITLE: Listing Policies with Wide Output\nDESCRIPTION: Example output of gwctl get policies command showing policy resources with their kinds, targets and types.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-2722/index.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nNAME                                 KIND                                TARGET NAME                     TARGET KIND   POLICY TYPE  AGE\ndemo-timeout-policy-on-gatewayclass  TimeoutPolicy.foo.com               foo-com-external-gateway-class  GatewayClass  Inherited    10d\ndemo-timeout-policy-on-namespace     TimeoutPolicy.foo.com               default                         Namespace     Inherited    10d\ndemo-health-check-1                  HealthCheckPolicy.bar.com           demo-gateway-1                  Gateway       Direct       10d\ndemo-retry-policy-1                  RetryOnPolicy.baz.com               demo-gateway-1                  Gateway       Direct       10d\ndemo-retry-policy-2                  RetryOnPolicy.baz.com               demo-httproute-2                HTTPRoute     Direct       10d\ndemo-tls-min-version-policy-1        TLSMinimumVersionPolicy.foobar.com  demo-gateway-3                  Gateway       Direct       10d\ndemo-tls-min-version-policy-2        TLSMinimumVersionPolicy.foobar.com  demo-gateway-4                  Gateway       Direct       10d\n```\n\n----------------------------------------\n\nTITLE: Effective Policy Status YAML Example\nDESCRIPTION: Shows the YAML structure for reporting effective policies in Gateway API object status. This experimental pattern allows implementations to list policies affecting an object in its status.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-713/index.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Gateway\n...\nstatus:\n  effectivePolicy:\n  - name: some-policy\n    namespace: some-namespace\n    apiGroup: implementation.io\n    kind: AwesomePolicy\n  ...\n```\n\n----------------------------------------\n\nTITLE: Running Code Verification\nDESCRIPTION: Command to run static analysis checks before submitting changes.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/contributing/devguide.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmake verify\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Mesh Traffic Routing with xRoute in YAML\nDESCRIPTION: Example configuration showing how to set up traffic splitting between service versions using xRoute with Service parentRefs. This demonstrates routing 90% traffic to the main service and 10% to a v2 version.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1294/index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmetadata:\n  name: foo-route\n  namespace: store\nspec:\n  parentRefs:\n  - kind: Service\n    name: foo\n  rules:\n    backendRefs:\n    - kind: Service\n      name: foo\n      weight: 90\n    - kind: Service\n      name: foo-v2\n      weight: 10\n```\n\n----------------------------------------\n\nTITLE: Removing RouteOverride Field from GatewayTlsConfig in Go\nDESCRIPTION: This code snippet shows the RouteOverride field that would be removed from the GatewayTlsConfig structure. This field controlled whether TLS settings could be configured via Routes.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-746/index.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// RouteOverride dictates if TLS settings can be configured\n// via Routes or not.\n//\n// CertificateRef must be defined even if `routeOverride.certificate` is\n// set to 'Allow' as it will be used as the default certificate for the\n// listener.\n//\n// Support: Core\n//\n// +optional\n// +kubebuilder:default={certificate:Deny}\nRouteOverride *TLSOverridePolicy `json:\"routeOverride,omitempty\"`\n```\n\n----------------------------------------\n\nTITLE: Defining GatewayClassInfrastructure struct in Go for Gateway API\nDESCRIPTION: This code snippet defines an empty GatewayClassInfrastructure struct, which is intended to be used for GatewayClass-level infrastructure configuration. The exact fields for this struct are not specified in the current proposal.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1867/index.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype GatewayClassInfrastructure struct {\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Fraction Type for Percentage-based Request Mirroring in Go\nDESCRIPTION: This snippet defines a new utility type 'Fraction' to be added to the shared_types.go file. It represents a fraction with numerator and denominator fields, allowing for precise specification of the percentage of requests to be mirrored.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-3171/index.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Fraction struct {\n        // +optional\n        // +kubebuilder:default=100\n        // +kubebuilder:validation:Minimum=0\n        Numerator int32 `json:\"numerator\"`\n\n        // +optional\n        // +kubebuilder:default=100\n        // +kubebuilder:validation:Minimum=1\n        Denominator int32 `json:\"denominator\"`\n}\n```\n\n----------------------------------------\n\nTITLE: BackendTrafficPolicy YAML Configuration Example\nDESCRIPTION: Example YAML configuration demonstrating the implementation of BackendTrafficPolicy with retry settings and status conditions. Shows integration with service targeting and controller feedback.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-3388/index.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: gateway.networking.x-k8s.io/v1alpha1\nkind: BackendTrafficPolicy\nmetadata:\n  name: traffic-policy-example\nspec:\n  targetRefs:\n    - group: \"\"\n      kind: Service\n      name: foo\n  retry:\n    budgetPercent: 20\n    budgetInterval: 10s\n    minRetryRate:\n      count: 3\n      interval: 1s\n  sessionPersistence:\n    ...\n  status:\n    ancestors:\n    - ancestorRef:\n        kind: Mesh\n        namespace: istio-system\n        name: istio\n      controllerName: \"istio.io/mesh-controller\"\n      conditions:\n      - type: \"Accepted\"\n        status: \"False\"\n        reason: \"Invalid\"\n        message: \"BackendTrafficPolicy field sessionPersistence is not supported for Istio mesh traffic.\"\n    - ancestorRef:\n        kind: Gateway\n        namespace: foo-ns\n        name: foo-ingress\n      controllerName: \"istio.io/mesh-controller\"\n      conditions:\n      - type: \"Accepted\"\n        status: \"False\"\n        reason: \"Invalid\"\n        message: \"BackendTrafficPolicy fields retry.budgetPercentage, retry.budgetInterval and retry.minRetryRate are not supported for Istio ingress gateways.\"\n    ...\n```\n\n----------------------------------------\n\nTITLE: Defining Gateway API Duration Format Regular Expression\nDESCRIPTION: Specifies the regular expression pattern that a valid Gateway API Duration string must match.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-2257/index.md#2025-04-22_snippet_0\n\nLANGUAGE: regex\nCODE:\n```\n^([0-9]{1,5}(h|m|s|ms)){1,4}$\n```\n\n----------------------------------------\n\nTITLE: Implementing GEP Metadata Schema in YAML\nDESCRIPTION: This YAML sample demonstrates the proposed GEPDetails schema structure with support for various relationships between GEPs. It includes fields for tracking metadata like author information, relationships to other GEPs (obsoletes/obsoletedBy, extends/extendedBy, seeAlso), external references, feature names, and changelog links.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-2659/index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: internal.gateway.networking.k8s.io/v1alpha1\nkind: GEPDetails\nnumber: 2659\nname: Document and improve the GEP process\nstatus: Memorandum\nauthors:\n  - youngnick\nrelationships:\n  # obsoletes indicates that a GEP makes the linked GEP obsolete, and completely\n  # replaces that GEP. The obsoleted GEP MUST have its obsoletedBy field\n  # set back to this GEP, and MUST be moved to Declined.\n  obsoletes: {}\n  obsoletedBy: {}\n  # extends indicates that a GEP extends the linked GEP, adding more detail\n  # or additional implementation. The extended GEP MUST have its extendedBy\n  # field set back to this GEP.\n  extends: {}\n  extendedBy: {}\n  # seeAlso indicates other GEPs that are relevant in some way without being\n  # covered by an existing relationship.\n  seeAlso: {}\n# references is a list of hyperlinks to relevant external references.\n# It's intended to be used for storing GitHub discussions, Google docs, etc.\nreferences: {}\n# featureNames is a list of the feature names introduced by the GEP, if there\n# are any. This will allow us to track which feature was introduced by which GEP.\nfeatureNames: {}\n# changelog is a list of hyperlinks to PRs that make changes to the GEP, in\n# ascending date order.\nchangelog:\n  - \"https://github.com/kubernetes-sigs/gateway-api/pull/2689\"\n```\n\n----------------------------------------\n\nTITLE: Example ConformanceReport Resource in YAML\nDESCRIPTION: This YAML snippet demonstrates the structure of a ConformanceReport resource. It includes implementation details, Gateway API version and channel, test results for different profiles, and supported features.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1709/index.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1alpha1\nkind: ConformanceReport\nimplementation:\n  organization: acme\n  project: operator\n  url: https://acme.com\n  contact:\n  - @acme/maintainers\n  version: v1.0.0\ndate: \"2023-02-28 20:29:41+00:00\"\ngatewayAPIVersion: v0.8.0\ngatewayAPIChannel: experimental\nmode: default\nprofiles:\n- name: http\n  core:\n    result: success\n    summary: \"all core functionality passed\"\n    statistics:\n      passed: 20\n      skipped: 0\n      failed: 0\n  extended:\n    result: success\n    summary: \"all extended features supported\"\n    statistics:\n      passed: 8\n      skipped: 0\n      failed: 0\n    supportedFeatures:\n    - ExtendedFeature1\n    - ExtendedFeature2\n    - ExtendedFeature3\n    - ExtendedFeature4\n    - ExtendedFeature5\n- name: tcp\n  core:\n    result: success\n    summary: \"all core functionality passed\"\n    statistics:\n      passed: 4\n      skipped: 0\n      failed: 0\n  extended:\n    result: skipped\n    summary: \"some extended features supported\"\n    statistics:\n      passed: 2\n      skipped: 0\n      failed: 0\n    supportedFeatures:\n    - ExtendedFeature1\n    - ExtendedFeature2\n    unsupportedFeatures:\n    - ExtendedFeature3\n```\n\n----------------------------------------\n\nTITLE: Future Extension: Replace Prefix Path Rewrite YAML Example\nDESCRIPTION: Example YAML configuration for a potential future extension that would allow replacing a path prefix independent of the match. This would rewrite requests from '/foo/baz' to '/bar/baz'.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-726/index.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nfilters:\n- type: RequestRewrite\n  requestRewrite:\n    path:\n      type: ReplacePrefix\n      pattern: /foo\n      substitution: /bar\n```\n\n----------------------------------------\n\nTITLE: Removing RouteTLSConfig Structure in Go\nDESCRIPTION: This code snippet shows the RouteTLSConfig structure that would be removed. This structure defined how TLS certificates could be referenced from HTTPRoute resources.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-746/index.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// RouteTLSConfig describes a TLS configuration defined at the Route level.\ntype RouteTLSConfig struct {\n    // CertificateRef is a reference to a Kubernetes object that contains a TLS\n    // certificate and private key. This certificate is used to establish a TLS\n    // handshake for requests that match the hostname of the associated HTTPRoute.\n    // The referenced object MUST reside in the same namespace as HTTPRoute.\n    //\n    // CertificateRef can reference a standard Kubernetes resource, i.e. Secret,\n    // or an implementation-specific custom resource.\n    //\n    // Support: Core (Kubernetes Secrets)\n    //\n    // Support: Implementation-specific (Other resource types)\n    //\n    CertificateRef LocalObjectReference `json:\"certificateRef\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AddressRouteMatches Type in Go\nDESCRIPTION: Defines a structure for specifying source and destination address matching rules for TCP and UDP routes.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-735/index.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype AddressRouteMatches struct {\n\tSourceAddresses []AddressMatch `json:\"sourceAddresses\"`\n\tDestinationAddresses []AddressMatch `json:\"destinationAddresses\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Kustomization Configuration for Standard Channel\nDESCRIPTION: YAML configuration for ReferenceGrant resource in kustomization.yaml for the standard channel deployment.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/CHANGELOG/0.x-CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkustomization.yaml:  # Added missing ReferenceGrant resource\n```\n\n----------------------------------------\n\nTITLE: Actual CORS PUT Request Example\nDESCRIPTION: Example of an actual CORS PUT request and corresponding response headers after successful preflight.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1767/index.md#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nPUT /resource/foo HTTP/1.1\nHost: http.route.cors.com\nKeep-Alive: timeout=5, max=1000\nOrigin: https://foo.example\nAuthorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l\n```\n\nLANGUAGE: text\nCODE:\n```\nAccess-Control-Allow-Origin: https://foo.example\nAccess-Control-Allow-Credentials: true\nAccess-Control-Allow-Methods: GET, PUT, POST, DELETE, PATCH, OPTIONS\nAccess-Control-Allow-Headers: DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization\nAccess-Control-Expose-Headers: Content-Security-Policy\n```\n\n----------------------------------------\n\nTITLE: Configuring Retry Policy with Gateway-level Defaults\nDESCRIPTION: Example of setting default retry policies for HTTP status codes at the Gateway level.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-2649/index.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.example.io/v1alpha1\nkind: RetryOnPolicy\nmetadata:\n  name: retryon5xx\n  namespace: appns\nspec:\n  defaults:\n    retryOn:\n      - \"501\"\n      - \"502\"\n      - \"503\"\n  targetRef:\n    kind: Gateway\n    group: gateway.networking.k8s.io\n    name: we-love-retries\n```\n\n----------------------------------------\n\nTITLE: Defining XListenerSet Custom Resource in Kubernetes\nDESCRIPTION: XListenerSet defines a set of additional listeners to attach to an existing Gateway. It includes fields for API version, kind, metadata, spec, and status.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/reference/specx.md#2025-04-22_snippet_3\n\nLANGUAGE: kubernetes\nCODE:\n```\n{\n  \"apiVersion\": \"gateway.networking.x-k8s.io/v1alpha1\",\n  \"kind\": \"XListenerSet\",\n  \"metadata\": {\n    // Refer to Kubernetes API documentation for fields of `metadata`.\n  },\n  \"spec\": {\n    // Spec defines the desired state of ListenerSet.\n  },\n  \"status\": {\n    // Status defines the current state of ListenerSet.\n    \"conditions\": [\n      {\n        \"lastTransitionTime\": \"1970-01-01T00:00:00Z\",\n        \"message\": \"Waiting for controller\",\n        \"reason\": \"Pending\",\n        \"status\": \"Unknown\",\n        \"type\": \"Accepted\"\n      },\n      {\n        \"lastTransitionTime\": \"1970-01-01T00:00:00Z\",\n        \"message\": \"Waiting for controller\",\n        \"reason\": \"Pending\",\n        \"status\": \"Unknown\",\n        \"type\": \"Programmed\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Backend References in YAML\nDESCRIPTION: This example illustrates how to configure custom backend references using the 'backendRefs' field. It includes additional fields like 'kind' and 'group' for custom resource types.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-718/index.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n...\nbackendRefs:\n- name: foo-v1\n  kind: server\n  group: networking.acme.io\n  port: 80\n  weight: 80\n- name: foo-v1-canary\n  kind: server\n  group: networking.acme.io\n  port: 80\n  weight: 20\n...\n```\n\n----------------------------------------\n\nTITLE: README Template for Gateway API Conformance Reports\nDESCRIPTION: Template for the mandatory README.md file that must be included with each implementation's conformance reports, including project information and test reproduction instructions.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/README.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# Acme operator\n\nGeneral information about the Acme/operator project\n\n## Table of contents\n\n| API channel | Implementation version | Mode | Report |\n|-------------|------------------------|------|--------|\n|             |                        |      |        |\n|             |                        |      |        |\n|             |                        |      |        |\n\n## Reproduce\n\nInstructions on how to reproduce the claimed report.\n```\n\n----------------------------------------\n\nTITLE: API Changes Patch for Route Backend References\nDESCRIPTION: Patch showing the transition from RouteForwardTo to BackendRef, including the removal of ServiceName field and consolidation of backend reference fields into a single structure.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-718/index.md#2025-04-22_snippet_1\n\nLANGUAGE: patch\nCODE:\n```\ndiff --git a/apis/v1alpha1/shared_types.go b/apis/v1alpha1/shared_types.go\nindex 458145f..de720cd 100644\n--- a/apis/v1alpha1/shared_types.go\n+++ b/apis/v1alpha1/shared_types.go\n@@ -94,51 +94,39 @@ type GatewayReference struct {\n \tNamespace string `json:\"namespace\"`\n }\n \n-// RouteForwardTo defines how a Route should forward a request.\n-type RouteForwardTo struct {\n-\t// ServiceName refers to the name of the Service to forward matched requests\n-\t// to. When specified, this takes the place of BackendRef. If both\n-\t// BackendRef and ServiceName are specified, ServiceName will be given\n-\t// precedence.\n+// BackendRef defines how and where a request should be forwarded from the Gateway.\n+type BackendRef struct {\n+\t// Name is the name of the backend resource to forward matched requests to.\n \t//\n \t// If the referent cannot be found, the rule is not included in the route.\n \t// The controller should raise the \"ResolvedRefs\" condition on the Gateway\n \t// with the \"DegradedRoutes\" reason. The gateway status for this route should\n \t// be updated with a condition that describes the error more specifically.\n \t//\n-\t// The protocol to use is defined using AppProtocol field (introduced in\n-\t// Kubernetes 1.18) in the Service resource. In the absence of the\n-\t// AppProtocol field a `networking.x-k8s.io/app-protocol` annotation on the\n-\t// BackendPolicy resource may be used to define the protocol. If the\n-\t// AppProtocol field is available, this annotation should not be used. The\n-\t// AppProtocol field, when populated, takes precedence over the annotation\n-\t// in the BackendPolicy resource. For custom backends, it is encouraged to\n-\t// add a semantically-equivalent field in the Custom Resource Definition.\n+\t// +kubebuilder:validation:MinLength=1\n+\t// +kubebuilder:validation:MaxLength=253\n+\tName string `json:\"name\"`\n+\n+\t// Kind is kind of the backend resource.\n \t//\n-\t// Support: Core\n+\t// Support: Core (Kubernetes Service)\n+\t// Support: Custom (any other resource)\n \t//\n \t// +optional\n+\t// +kubebuilder:validation:MinLength=1\n \t// +kubebuilder:validation:MaxLength=253\n-\tServiceName *string `json:\"serviceName,omitempty\"`\n+\t// +kubebuilder:default=\"service\"\n+\tKind *string `json:\"kind\"`\n \n-\t// BackendRef is a reference to a backend to forward matched requests to. If\n-\t// both BackendRef and ServiceName are specified, ServiceName will be given\n-\t// precedence.\n-\t//\n-\t// If the referent cannot be found, the rule is not included in the route.\n-\t// The controller should raise the \"ResolvedRefs\" condition on the Gateway\n-\t// with the \"DegradedRoutes\" reason. The gateway status for this route should\n-\t// be updated with a condition that describes the error more specifically.\n+\t// Group is the group of the backend resource.\n \t//\n-\t// Support: Custom\n-\t//\n-\t// +optional\n-\tBackendRef *LocalObjectReference `json:\"backendRef,omitempty\"`\n+\t// +kubebuilder:validation:MinLength=1\n+\t// +kubebuilder:validation:MaxLength=253\n+\tGroup string `json:\"group\"`\n \n \t// Port specifies the destination port number to use for the\n-\t// backend referenced by the ServiceName or BackendRef field.\n-\t// If unspecified, the destination port in the request is used\n-\t// when forwarding to a backendRef or serviceName.\n+\t// backend resource.\n+\t// This field is required when the backend is a Kubernetes Service.\n \t//\n \t// Support: Core\n \t//\n@@ -146,11 +134,10 @@ type RouteForwardTo struct {\n \tPort *PortNumber `json:\"port,omitempty\"`\n \n \t// Weight specifies the proportion of HTTP requests forwarded to the backend\n-\t// referenced by the ServiceName or BackendRef field. This is computed as\n-\t// weight/(sum of all weights in this ForwardTo list). For non-zero values,\n-\t// there may be some epsilon from the exact proportion defined here\n-\t// depending on the precision an implementation supports. Weight is not a\n-\t// percentage and the sum of weights does not need to equal 100.\n+\t// This is computed as weight/(sum of all weights in this Backends list).\n+\t// For non-zero values, there may be some epsilon from the exact proportion\n+\t// defined here depending on the precision an implementation supports. Weight\n+\t// is not a percentage and the sum of weights does not need to equal 100.\n```\n\n----------------------------------------\n\nTITLE: Listing HTTP Routes with Wide Output\nDESCRIPTION: Example output of gwctl get httproute command showing HTTPRoute resources with their namespaces, hostnames, parent references, age and policy counts.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-2722/index.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nNAMESPACE  NAME                 HOSTNAMES                          PARENT REFS               AGE  POLICIES\ndefault    foo-httproute-1      example.com,example2.com + 1 more  ns2/demo-gateway-2        5m   2\ndefault    qmn-httproute-100    example.com                        demo-gateway-1            5m   1\nns1        bar-route-21         foo.com,bar.com + 5 more           default/demo-gateway-200  5m   3\nns2        bax-httproute-18777  None                               ns1/demo-gateway-345      5m   4\n```\n\n----------------------------------------\n\nTITLE: Gateway and ListenerSet Type Definitions in Go\nDESCRIPTION: Defines the core struct types for Gateway API's ListenerSet functionality, including GatewaySpec, AllowedListeners, ListenerNamespaces, and ListenerSet. These types handle gateway configuration, listener management, and namespace selection.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1713/index.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype GatewaySpec struct {\n\t...\n\tAllowedListeners *AllowedListeners `json:\"allowedListeners\"`\n\t...\n}\n\ntype AllowedListeners struct {\n\t// +kubebuilder:default={from:Same}\n\tNamespaces *ListenerNamespaces `json:\"namespaces,omitempty\"`\n}\n\n// ListenerNamespaces indicate which namespaces ListenerSets should be selected from.\ntype ListenerNamespaces struct {\n\t// From indicates where ListenerSets can attach to this Gateway. Possible\n\t// values are:\n\t//\n\t// * Same: Only ListenerSets in the same namespace may be attached to this Gateway.\n\t// * Selector: ListenerSets in namespaces selected by the selector may be attached to this Gateway.:w\n\t// * All: ListenerSets in all namespaces may be attached to this Gateway.\n\t// * None: Only listeners defined in the Gateway's spec are allowed\n\t//\n\t// +optional\n\t// +kubebuilder:default=None\n\t// +kubebuilder:validation:Enum=Same;None;Selector;All\n\tFrom *FromNamespaces `json:\"from,omitempty\"`\n\n\t// Selector must be specified when From is set to \"Selector\". In that case,\n\t// only ListenerSets in Namespaces matching this Selector will be selected by this\n\t// Gateway. This field is ignored for other values of \"From\".\n\t//\n\t// +optional\n\tSelector *metav1.LabelSelector `json:\"selector,omitempty\"`\n}\n\n// ListenerSet defines a set of additional listeners to attach to an existing Gateway.\ntype ListenerSet struct {\n\tmetav1.TypeMeta   `json:\",inline\"`\n\tmetav1.ObjectMeta `json:\"metadata,omitempty\"`\n\n\t// Spec defines the desired state of ListenerSet.\n\tSpec ListenerSetSpec `json:\"spec\"`\n\n\t// Status defines the current state of ListenerSet.\n\tStatus ListenerSetStatus `json:\"status,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Running Gateway Conformance Tests for Contour in Bash\nDESCRIPTION: Set up environment variables for the Contour image and report generation, then run the conformance tests using make commands. This includes setting up a kind cluster, running the tests, and optionally cleaning up.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.1.0/projectcontour-contour/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport CONTOUR_E2E_IMAGE=\"ghcr.io/projectcontour/contour:$VERSION\"\nexport GENERATE_GATEWAY_CONFORMANCE_REPORT=\"true\"\nmake setup-kind-cluster run-gateway-conformance cleanup-kind\n```\n\n----------------------------------------\n\nTITLE: Defining BudgetDetails in YAML\nDESCRIPTION: Specifies the structure of BudgetDetails, which is used in RetryConstraint to configure retry budget parameters. It includes fields for percent and interval.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/reference/specx.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npercent: 20 # Default value, range 0-100\ninterval: 10s # Default value\n```\n\n----------------------------------------\n\nTITLE: Defining CORS Headers Middleware Configuration in YAML\nDESCRIPTION: This YAML snippet defines the structure for CORS headers middleware configuration in Traefik. It includes various properties for controlling CORS behavior such as allowed origins, methods, headers, and caching.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1767/index.md#2025-04-22_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nheaders:\ndescription: |-\n  Headers holds the headers middleware configuration.\n  This middleware manages the requests and responses headers.\n  More info: https://doc.traefik.io/traefik/v3.2/middlewares/http/headers/#customrequestheaders\nproperties:\n  accessControlAllowCredentials:\n    description: AccessControlAllowCredentials defines whether the\n                 request can include user credentials.\n    type: boolean\n  accessControlAllowHeaders:\n    description: AccessControlAllowHeaders defines the Access-Control-Allow-Headers\n                 values sent in preflight response.\n    items:\n      type: string\n    type: array\n  accessControlAllowMethods:\n    description: AccessControlAllowMethods defines the Access-Control-Allow-Methods\n                 values sent in preflight response.\n    items:\n      type: string\n    type: array\n  accessControlAllowOriginList:\n    description: AccessControlAllowOriginList is a list of allowable\n                 origins. Can also be a wildcard origin \"*\".\n    items:\n      type: string\n    type: array\n  accessControlAllowOriginListRegex:\n    description: AccessControlAllowOriginListRegex is a list of allowable\n                 origins written following the Regular Expression syntax (https://golang.org/pkg/regexp/).\n    items:\n      type: string\n    type: array\n  accessControlExposeHeaders:\n    description: AccessControlExposeHeaders defines the Access-Control-Expose-Headers\n                 values sent in preflight response.\n    items:\n      type: string\n    type: array\n  accessControlMaxAge:\n    description: AccessControlMaxAge defines the time that a preflight\n                 request may be cached.\n    format: int64\n    type: integer\n  addVaryHeader:\n    description: AddVaryHeader defines whether the Vary header is\n                 automatically added/updated when the AccessControlAllowOriginList\n                 is set.\n    type: boolean\n```\n\n----------------------------------------\n\nTITLE: Visualizing GEP Process Flow with Mermaid Diagram\nDESCRIPTION: This Mermaid flowchart illustrates the state transitions of the GEP process, from initial discussion to completion. It shows the various stages a GEP can go through, including Provisional, Prototyping, Implementable, Experimental, and Standard.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    D([Discuss with<br />the community]) --> C\n    C([Issue Created]) -------> Memorandum\n    C([Issue Created]) --> Provisional\n    Provisional -->|If practical <br /> work needed| Prototyping\n    Provisional -->|GEP Doc PR<br />done| Implementable\n    Prototyping -->|GEP Doc PR<br />done| Implementable\n    Implementable -->|Gateway API<br />work completed| Experimental\n    Experimental -->|Supported in<br />multiple implementations<br />+ Conformance tests| Standard\n    Standard -->|Entire change is GA or implemented| Completed\n```\n\n----------------------------------------\n\nTITLE: Defining HTTPRouteRule and HTTPRouteTimeouts Structs in Go\nDESCRIPTION: Go struct definitions for HTTPRouteRule and HTTPRouteTimeouts, including fields for request and backend request timeouts. The structs use Gateway API Duration formatting and include validation rules.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1742/index.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ntype HTTPRouteRule struct {\n\t// Timeouts defines the timeouts that can be configured for an HTTP request.\n\t//\n\t// Support: Extended\n\t//\n\t// +optional\n\t// <gateway:standard>\n\tTimeouts *HTTPRouteTimeouts `json:\"timeouts,omitempty\"`\n\n\t// ...\n}\n\n// HTTPRouteTimeouts defines timeouts that can be configured for an HTTPRoute.\n// Timeout values are represented with Gateway API Duration formatting.\n// Specifying a zero value such as \"0s\" is interpreted as no timeout.\n//\n// +kubebuilder:validation:XValidation:message=\"backendRequest timeout cannot be longer than request timeout\",rule=\"!(has(self.request) && has(self.backendRequest) && duration(self.request) != duration('0s') && duration(self.backendRequest) > duration(self.request))\"\ntype HTTPRouteTimeouts struct {\n\t// Request specifies the maximum duration for a gateway to respond to an HTTP request.\n\t// If the gateway has not been able to respond before this deadline is met, the gateway\n\t// MUST return a timeout error.\n\t//\n\t// For example, setting the `rules.timeouts.request` field to the value `10s` in an\n\t// `HTTPRoute` will cause a timeout if a client request is taking longer than 10 seconds\n\t// to complete.\n\t//\n\t// This timeout is intended to cover as close to the whole request-response transaction\n\t// as possible although an implementation MAY choose to start the timeout after the entire\n\t// request stream has been received instead of immediately after the transaction is\n\t// initiated by the client.\n\t//\n\t// The value of Request is a Gateway API Duration string as defined by GEP-2257. When this\n\t// field is unspecified, request timeout behavior is implementation-specific.\n\t//\n\t// Support: Extended\n\t//\n\t// +optional\n\tRequest *Duration `json:\"request,omitempty\"`\n\n\t// BackendRequest specifies a timeout for an individual request from the gateway\n\t// to a backend. This covers the time from when the request first starts being\n\t// sent from the gateway to when the full response has been received from the backend.\n\t//\n\t// An entire client HTTP transaction with a gateway, covered by the Request timeout,\n\t// may result in more than one call from the gateway to the destination backend,\n\t// for example, if automatic retries are supported.\n\t//\n\t// The value of BackendRequest must be a Gateway API Duration string as defined by\n\t// GEP-2257.  When this field is unspecified, its behavior is implementation-specific;\n\t// when specified, the value of BackendRequest must be no more than the value of the\n\t// Request timeout (since the Request timeout encompasses the BackendRequest timeout).\n\t//\n\t// Support: Extended\n\t//\n\t// +optional\n\tBackendRequest *Duration `json:\"backendRequest,omitempty\"`\n}\n\n// Duration is a string value representing a duration in time. The format is as specified\n// in GEP-2257, a strict subset of the syntax parsed by Golang time.ParseDuration.\n//\n// +kubebuilder:validation:Pattern=`^([0-9]{1,5}(h|m|s|ms)){1,4}$`\ntype Duration string\n```\n\n----------------------------------------\n\nTITLE: Formatting Table of Envoy Gateway Implementation Details in Markdown\nDESCRIPTION: This snippet defines a markdown table that outlines the API channel, implementation version, mode, and report link for the Envoy Gateway project. It specifically references version v0.6.0 of the implementation.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.0.0/envoy-gateway/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|API channel|Implementation version|Mode|Report|\n|-----------|----------------------|----|------|\n|x|[v0.6.0](https://github.com/envoyproxy/gateway/releases/tag/v0.6.0)|x|[v0.6.0 report](./v0.6.0-report.yaml)|\n```\n\n----------------------------------------\n\nTITLE: Implementing CRD Policy Label in Kubernetes Gateway API\nDESCRIPTION: Required label specification for Policy CRD objects that indicates the type of policy attachment. Must be added to CRDs to identify them as Policy objects and specify whether they use inherited or direct attachment.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-713/index.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ngateway.networking.k8s.io/policy: inherited|direct\n```\n\n----------------------------------------\n\nTITLE: ConformanceReport for Latest Release in YAML\nDESCRIPTION: This YAML snippet shows a ConformanceReport for the latest release of an implementation. It demonstrates full support for HTTP and partial support for TCP.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1709/index.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1alpha1\nkind: ConformanceReport\nimplementation:\n  organization: acme\n  project: operator\n  url: https://acme.com\n  contact:\n  - @acme/maintainers\n  version: v1.0.0\ndate: \"2023-06-1 20:29:41+00:00\"\ngatewayAPIVersion: v1.0.0\ngatewayAPIChannel: experimental\nmode: default\nprofiles:\n- name: http\n  core:\n    result: success\n    summary: \"all core functionality passed\"\n    statistics:\n      passed: 20\n      skipped: 0\n      failed: 0\n  extended:\n    result: success\n    summary: \"all extended features supported\"\n    statistics:\n      passed: 8\n      skipped: 0\n      failed: 0\n    supportedFeatures:\n    - ExtendedFeature1\n    - ExtendedFeature2\n    - ExtendedFeature3\n    unsupportedFeatures:\n    - ExtendedFeature4\n    - ExtendedFeature5\n- name: tcp\n  core:\n    result: success\n    summary: \"all core functionality passed\"\n    statistics:\n      passed: 4\n      skipped: 0\n      failed: 0\n  extended:\n    result: skipped\n    summary: \"some extended features supported\"\n    statistics:\n      passed: 2\n      skipped: 0\n      failed: 0\n    supportedFeatures:\n    - ExtendedFeature1\n    - ExtendedFeature2\n    unsupportedFeatures:\n    - ExtendedFeature3\n```\n\n----------------------------------------\n\nTITLE: Configuring Gateway to Allow ListenerSet Attachment in YAML\nDESCRIPTION: Shows how to configure a Gateway to allow ListenerSet attachment using the allowedListeners field.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1713/index.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: gateway.networking.k8s.io/v1\nkind: Gateway\nmetadata:\n  name: parent-gateway\nspec:\n  allowedListeners:\n  - from: Same\n```\n\n----------------------------------------\n\nTITLE: Installing Envoy Gateway using Helm\nDESCRIPTION: Installs Envoy Gateway v0.0.0-latest using Helm in the envoy-gateway-system namespace\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/hack/implementations/envoy-gateway/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nhelm install eg oci://docker.io/envoyproxy/gateway-helm --version v0.0.0-latest -n envoy-gateway-system --create-namespace\n```\n\n----------------------------------------\n\nTITLE: Defining ListenerEntry in YAML\nDESCRIPTION: Specifies the structure of ListenerEntry, which is used in ListenerSetSpec to define individual listeners. It includes fields for name, hostname, port, protocol, tls, and allowedRoutes.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/reference/specx.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: # SectionName\nhostname: # Hostname\nport: # PortNumber\nprotocol: # ProtocolType\ntls: # GatewayTLSConfig\nallowedRoutes:\n  namespaces:\n    from: Same # Default value\n```\n\n----------------------------------------\n\nTITLE: Resource Model Relationships Table in Markdown\nDESCRIPTION: Summary table showing relationships between different route types, their OSI layers, routing discriminators, TLS support, and purposes.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/concepts/api-overview.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|Object|OSI Layer|Routing Discriminator|TLS Support|Purpose|\n|------|---------|---------------------|-----------|-------|\n|HTTPRoute| Layer 7 | Anything in the HTTP Protocol | Terminated only | HTTP and HTTPS Routing|\n|TLSRoute| Somewhere between layer 4 and 7| SNI or other TLS properties| Passthrough or Terminated | Routing of TLS protocols including HTTPS where inspection of the HTTP stream is not required.|\n|TCPRoute| Layer 4| destination port | Passthrough or Terminated | Allows for forwarding of a TCP stream from the Listener to the Backends |\n|UDPRoute| Layer 4| destination port | None | Allows for forwarding of a UDP stream from the Listener to the Backends. |\n|GRPCRoute| Layer 7 | Anything in the gRPC Protocol | Terminated only | gRPC Routing over HTTP/2 and HTTP/2 cleartext|\n```\n\n----------------------------------------\n\nTITLE: Supported App Protocol Values\nDESCRIPTION: New AppProtocol field values for Service Ports defining HTTP/2 and WebSocket protocols\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/CHANGELOG/1.0-CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkubernetes.io/h2c  # HTTP/2 over cleartext as described in RFC7540\nkubernetes.io/ws   # WebSocket over cleartext as described in RFC6445\nkubernetes.io/wss  # WebSocket over TLS as described in RFC6455\n```\n\n----------------------------------------\n\nTITLE: Defining ParentGatewayReference Struct in Go\nDESCRIPTION: Defines the ParentGatewayReference struct used to identify an API object, including its namespace. It contains fields for group, kind, name, and namespace of the referent.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1713/index.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// ParentGatewayReference identifies an API object including its namespace,\n// defaulting to Gateway.\ntype ParentGatewayReference struct {\n\t// Group is the group of the referent.\n\t//\n\t// +optional\n\t// +kubebuilder:default=\"gateway.networking.k8s.io\"\n\tGroup *Group `json:\"group\"`\n\n\t// Kind is kind of the referent. For example \"Gateway\".\n\t//\n\t// +optional\n\t// +kubebuilder:default=Gateway\n\tKind *Kind `json:\"kind\"`\n\n\t// Name is the name of the referent.\n\tName ObjectName `json:\"name\"`\n\n\t// Namespace is the name of the referent.\n\t// +optional\n\tName *ObjectName `json:\"namespace\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Gateway API Frontmatter Definition\nDESCRIPTION: YAML frontmatter defining the description for the Gateway API v0.5.0 release announcement document.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/blog/2022/graduating-to-beta.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndescription: >\n  We are excited to announce the v0.5.0 release of Gateway API. For the first\n  time, several of our most important Gateway API resources are graduating to\n  beta. Additional, we are starting a new initiative to explore how Gateway API\n  can be used for mesh and introducing new experimental concepts such as URL\n  rewrites.\n---\n```\n\n----------------------------------------\n\nTITLE: Protocol and Route TLS Compatibility Table\nDESCRIPTION: A markdown table showing the compatibility matrix between protocols, route types, and TLS termination modes. Includes HTTP, HTTPS, TLS, TCP, and UDP protocols with their corresponding route types and TLS mode support.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-2907/index.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Protocol  |  Routes | TLS Terminate | TLS Passthough |\n|-----------|---------|---------------|----------------|\n| HTTP      | `HTTPRoute`/`GRPCRoute` | no  | no  |\n| HTTPS     | `HTTPRoute`/`GRPCRoute` | yes | no  |\n| TLS       | `TLSRoute`  | yes | yes | \n| TCP       | `TCPRoute`  | yes | no  |\n| UDP       | `UDPRoute`  | no  | no  |\n```\n\n----------------------------------------\n\nTITLE: Defining Enhancement in Gateway API Project\nDESCRIPTION: This snippet lists criteria for what is considered an enhancement in the Gateway API project. It includes changes to APIs, significant implementation efforts, documentation requirements, and operational impacts.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/contributing/enhancement-requests.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nAn enhancement is generally anything that:\n\n- Introduces changes to an API.\n- Needs significant effort to implement.\n- Requires documentation to utilize.\n- Impacts how a system is operated including addition or removal of significant\n  capabilities.\n```\n\n----------------------------------------\n\nTITLE: Defining Direct Policy Attachment Structure in YAML\nDESCRIPTION: Example structure of a Direct Policy Attachment, showing required fields like spec, status, and targetRef. This is a generic representation and not a complete policy definition.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-2648/index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: gateway.networking.k8s.io/v1alpha2\nkind: ExampleDirectPolicy\nmetadata:\n  name: example-policy\n  namespace: default\nspec:\n  targetRef:\n    kind: Service\n    name: example-service\n  # Policy-specific fields\nstatus:\n  conditions:\n    - type: Ready\n      status: \"True\"\n    - type: Accepted\n      status: \"True\"\n```\n\n----------------------------------------\n\nTITLE: Updating Resource Storage Versions Script\nDESCRIPTION: Bash script to update all GRPCRoutes and ReferenceGrants to the latest storage version by adding a migration timestamp annotation.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/CHANGELOG/1.2-CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncrds=(\"GRPCRoutes\" \"ReferenceGrants\")\n\nfor crd in \"${crds[@]}\"; do\n  output=$(kubectl get \"${crd}\" -A -o json)\n\n  echo \"$output\" | jq -c '.items[]' | while IFS= read -r resource; do\n    namespace=$(echo \"$resource\" | jq -r '.metadata.namespace')\n    name=$(echo \"$resource\" | jq -r '.metadata.name')\n    kubectl patch \"${crd}\" \"${name}\" -n \"${namespace}\" --type='json' -p='[{\"op\": \"replace\", \"path\": \"/metadata/annotations/migration-time\", \"value\": \"'\"$(date +%Y-%m-%dT%H:%M:%S)\"'\" }]'\n  done\ndone\n```\n\n----------------------------------------\n\nTITLE: Defining Policy Conditions in Go for Gateway API\nDESCRIPTION: Constants and types defining policy conditions and reasons for the Gateway API. Includes conditions like Accepted and reasons like Conflicted, Invalid, and TargetNotFound.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-713/index.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ntype PolicyConditionType string\n\ntype PolicyConditionReason string\n\nconst (\n  PolicyConditionAccepted PolicyConditionType = \"Accepted\"\n\n  PolicyReasonAccepted PolicyConditionReason = \"Accepted\"\n\n  PolicyReasonConflicted PolicyConditionReason = \"Conflicted\"\n\n  PolicyReasonInvalid PolicyConditionReason = \"Invalid\"\n\n  PolicyReasonTargetNotFound PolicyConditionReason = \"TargetNotFound\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS in Ingress-NGINX using Annotations\nDESCRIPTION: This YAML snippet demonstrates how to configure CORS in an Ingress resource using Ingress-NGINX annotations. It sets various CORS-related headers and restrictions for cross-origin requests.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1767/index.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  annotations:\n    nginx.ingress.kubernetes.io/enable-cors: \"true\"\n    nginx.ingress.kubernetes.io/cors-allow-origin: 'https://foo.example'\n    nginx.ingress.kubernetes.io/cors-allow-methods: GET, PUT, POST, DELETE, PATCH, OPTIONS\n    nginx.ingress.kubernetes.io/cors-allow-headers: Origin,No-Cache,X-Requested-With,If-Modified-Since,Pragma,Last-Modified,Cache-Control,Expires,Content-Type,X-E4M-With,userId,token,authorization,groot-jwt,x-mokelay-custom-header,EagleEye-UserData,EagleEye-TraceId,EagleEye-RpcId,x-xsrf-token,cn-gw-custom-headers,X-XSRF-TOKEN,DNT,X-CustomHeader,Keep-Alive,User-Agent\n  name: ingress-cors-test\nspec:\n  ingressClassName: nginx-default\n  rules:\n  - host: foo.cors.com\n    http:\n      paths:\n      - path: /\n        pathType: Exact\n        backend:\n          service:\n            name: cors-test-service\n            port:\n              number: 80\n```\n\n----------------------------------------\n\nTITLE: Displaying GatewayClass Information with kubectl\nDESCRIPTION: This snippet demonstrates how to use kubectl to display GatewayClass information, including the new Description field that appears as a column in the output.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/CHANGELOG/0.x-CHANGELOG.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$> kubectl get gatewayclass\nNAME       CONTROLLER                            DESCRIPTION\ninternal   gateway-controller-internal   For non-internet-facing Gateways.\nexternal   gateway-controller-external   For internet-facing Gateways.\n```\n\n----------------------------------------\n\nTITLE: Defining PolicyTargetReference Struct in Go\nDESCRIPTION: This Go struct defines the PolicyTargetReference, which is used to identify an API object to apply policy to. It includes fields for Group, Kind, Name, and optional Namespace.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-2649/index.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// PolicyTargetReference identifies an API object to apply policy to.\ntype PolicyTargetReference struct {\n    // Group is the group of the target resource.\n    //\n    // +kubebuilder:validation:MinLength=1\n    // +kubebuilder:validation:MaxLength=253\n    Group string `json:\"group\"`\n\n    // Kind is kind of the target resource.\n    //\n    // +kubebuilder:validation:MinLength=1\n    // +kubebuilder:validation:MaxLength=253\n    Kind string `json:\"kind\"`\n\n    // Name is the name of the target resource.\n    //\n    // +kubebuilder:validation:MinLength=1\n    // +kubebuilder:validation:MaxLength=253\n    Name string `json:\"name\"`\n\n    // Namespace is the namespace of the referent. When unspecified, the local\n    // namespace is inferred. Even when policy targets a resource in a different\n    // namespace, it may only apply to traffic originating from the same\n    // namespace as the policy.\n    //\n    // +kubebuilder:validation:MinLength=1\n    // +kubebuilder:validation:MaxLength=253\n    // +optional\n    Namespace string `json:\"namespace,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Phantom Mesh ParentRef Configuration\nDESCRIPTION: Example of using a phantom parentRef to signal Istio mesh usage without requiring an actual Mesh resource.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1294/index.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  parentRefs:\n  - kind: Mesh\n    name: istio\n```\n\n----------------------------------------\n\nTITLE: Nginx Timeouts Configuration Flow Diagram\nDESCRIPTION: A sequence diagram showing the timeout configurations available in Nginx, including separate timeouts for GRPC and general HTTP traffic. Illustrates where each timeout is applied during the request/response cycle.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1742/index.md#2025-04-22_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant C as Client\n    participant P as Nginx\n    participant U as Upstream\n    C->>P: Connection Started\n    activate P\n    C->>P: Starts sending Request\n    C->>P: Finishes Headers\n    Note right of P: client_headers_timeout\n    deactivate P\n    activate P\n    C->>P: Finishes request\n    deactivate P\n    Note right of P: client_body_timeout\n    activate U\n    note left of U: proxy_connect_timeout<br/>grpc_connect_timeout\n    deactivate U\n    P->>U: Connection Started\n    Activate U\n\t  Activate U\n    P->>U: Starts sending Request\n    P->>U: Finishes Headers\n\t\tP->>U: Finishes request\n    Note right of U: (between write operations)<br/>proxy_send_timeout<br/>grpc_send_timeout\n    deactivate U\n\t\tactivate U\n    U->>P: Starts Response\n    U->>P: Finishes Headers\n        Note right of U: (between read operations)<br/>proxy_read_timeout<br/>grpc_read_timeout\n    U->>P: Finishes Response\n    deactivate U\n    activate P\n    P->>C: Starts Response\n    P->>C: Finishes Headers\n    P->>C: Finishes Response\n    deactivate P\n    Note left of P: send_timeout (only between two successive write operations)\n    Note left of C: Repeat if connection is shared until server's keepalive_timeout is hit\n    Note Right of U: upstream's keepalive_timeout (if keepalive enabled)\n    U->>C: Connection ended\n\t\tdeactivate U\n```\n\n----------------------------------------\n\nTITLE: Patching CRD Stored Versions\nDESCRIPTION: Commands to patch the ReferenceGrant and GRPCRoute CRDs to update their stored versions after migration.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/guides/index.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl patch customresourcedefinitions referencegrants.gateway.networking.k8s.io --subresource='status' --type='merge' -p '{\"status\":{\"storedVersions\":[\"v1beta1\"]}}'\nkubectl patch customresourcedefinitions grpcroutes.gateway.networking.k8s.io --subresource='status' --type='merge' -p '{\"status\":{\"storedVersions\":[\"v1\"]}}'\n```\n\n----------------------------------------\n\nTITLE: Visualizing Feature Lifecycle in Gateway API with Mermaid\nDESCRIPTION: A flowchart diagram illustrating the lifecycle of a feature or resource in Gateway API, from proposal as a GEP through experimental and standard channels.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/concepts/versioning.md#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    0([Implementable GEP]) --> A\n    A>Experimental Channel] --> B([Widely used and working well?])\n    B -->|Yes| C>Standard Channel]\n    B -->|No| D([Could Changes Help?])\n    D -->|Yes| E([Adjust and try again])\n    D -->|No| F>Remove From API]\n    E -->A\n\nstyle A fill:#eeb\nstyle C fill:#beb\nstyle F fill:#ebb\n```\n\n----------------------------------------\n\nTITLE: Placeholder for BackendTLSPolicy Go struct definition\nDESCRIPTION: This is a placeholder for the Go struct definition of the BackendTLSPolicy resource. The actual implementation will be updated once API changes from PR 2955 are approved.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1897/index.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n//TODO: Will update this section once API changes from PR 2955 are approved.\n```\n\n----------------------------------------\n\nTITLE: Removing HTTPRouteSpec TLS Field in Go\nDESCRIPTION: This code snippet shows the TLS field that would be removed from the HTTPRouteSpec structure. This field allowed defining TLS certificates at the Route level, which caused confusion about scope and conflicts.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-746/index.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// TLS defines the TLS certificate to use for Hostnames defined in this\n// Route. This configuration only takes effect if the AllowRouteOverride\n// field is set to true in the associated Gateway resource.\n//\n// Collisions can happen if multiple HTTPRoutes define a TLS certificate\n// for the same hostname. In such a case, conflict resolution guiding\n// principles apply, specifically, if hostnames are same and two different\n// certificates are specified then the certificate in the\n// oldest resource wins.\n//\n// Please note that HTTP Route-selection takes place after the\n// TLS Handshake (ClientHello). Due to this, TLS certificate defined\n// here will take precedence even if the request has the potential to\n// match multiple routes (in case multiple HTTPRoutes share the same\n// hostname).\n//\n// Support: Core\n//\n// +optional\nTLS *RouteTLSConfig `json:\"tls,omitempty\"`\n```\n\n----------------------------------------\n\nTITLE: Defining HTTPPathModifierType and HTTPPathModifier in Go for Gateway API\nDESCRIPTION: Defines shared path modifier types and configuration for both redirects and rewrites. This includes Absolute path modification and ReplacePrefixMatch types, allowing for complete path replacement or prefix substitution.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-726/index.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// HTTPPathModifierType defines the type of path redirect.\ntype HTTPPathModifierType string\n\nconst (\n  // This type of modifier indicates that the complete path will be replaced by\n  // the path redirect value.\n  AbsoluteHTTPPathModifier HTTPPathModifierType = \"Absolute\"\n\n  // This type of modifier indicates that any prefix path matches will be\n  // replaced by the substitution value. For example, a path with a prefix match\n  // of \"/foo\" and a ReplacePrefixMatch substitution of \"/bar\" will have the\n  // \"/foo\" prefix replaced with \"/bar\" in matching requests.\n  PrefixMatchHTTPPathModifier HTTPPathModifierType = \"ReplacePrefixMatch\"\n)\n\n// HTTPPathModifier defines configuration for path modifiers.\ntype HTTPPathModifier struct {\n  // Type defines the type of path modifier.\n  //\n  // +kubebuilder:validation:Enum=Absolute;ReplacePrefixMatch\n  Type HTTPPathModifierType `json:\"type\"`\n\n  // Substitution defines the HTTP path value to substitute. An empty value (\"\")\n  // indicates that the portion of the path to be changed should be removed from\n  // the resulting path. For example, a request to \"/foo/bar\" with a prefix\n  // match of \"/foo\" would be modified to \"/bar\".\n  //\n  // +kubebuilder:validation:MaxLength=1024\n  Substitution string `json:\"substitution\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Removing ReferencePolicy from API\nDESCRIPTION: YAML snippet indicating the removal of ReferencePolicy from the API in favor of ReferenceGrant.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/CHANGELOG/0.x-CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- ReferencePolicy has been removed from the API in favor of ReferenceGrant.\n  (#1406, @robscott)\n```\n\n----------------------------------------\n\nTITLE: Defining Policy Condition Types in Go for Gateway API\nDESCRIPTION: Go code defining the standard condition types and reasons for policy objects in the Gateway API. Includes definitions for Accepted condition and various reason codes for policy status reporting.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-2648/index.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// PolicyConditionType is a type of condition for a policy.\ntype PolicyConditionType string\n\n// PolicyConditionReason is a reason for a policy condition.\ntype PolicyConditionReason string\n\nconst (\n  // PolicyConditionAccepted indicates whether the policy has been accepted or rejected\n  // by a targeted resource, and why.\n  //\n  // Possible reasons for this condition to be True are:\n  //\n  // * \"Accepted\"\n  //\n  // Possible reasons for this condition to be False are:\n  //\n  // * \"Conflicted\"\n  // * \"Invalid\"\n  // * \"TargetNotFound\"\n  //\n  PolicyConditionAccepted PolicyConditionType = \"Accepted\"\n\n  // PolicyReasonAccepted is used with the \"Accepted\" condition when the policy has been\n  // accepted by the targeted resource.\n  PolicyReasonAccepted PolicyConditionReason = \"Accepted\"\n\n  // PolicyReasonConflicted is used with the \"Accepted\" condition when the policy has not\n  // been accepted by a targeted resource because there is another policy that targets the same\n  // resource and a merge is not possible.\n  PolicyReasonConflicted PolicyConditionReason = \"Conflicted\"\n\n  // PolicyReasonInvalid is used with the \"Accepted\" condition when the policy is syntactically\n  // or semantically invalid.\n  PolicyReasonInvalid PolicyConditionReason = \"Invalid\"\n\n  // PolicyReasonTargetNotFound is used with the \"Accepted\" condition when the policy is attached to\n  // an invalid target resource\n  PolicyReasonTargetNotFound PolicyConditionReason = \"TargetNotFound\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Kind Cluster for Gloo Gateway Testing\nDESCRIPTION: Creates a Kubernetes in Docker (Kind) cluster with specific settings for conformance testing. It uses environment variables to configure the cluster setup.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.0.0/gloo-gateway/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nSKIP_DOCKER=\"true\" CONFORMANCE=\"true\" IMAGE_VARIANT=\"standard\" CLUSTER_NODE_VERSION=\"v1.29.2@sha256:51a1434a5397193442f0be2a297b488b6c919ce8a3931be0ce822606ea5ca245\" ./ci/kind/setup-kind.sh\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for Gateway API Inherited Policy Requirements\nDESCRIPTION: Documentation outlining the core requirements and design guidelines for implementing inherited policy attachments in Kubernetes Gateway API, including policy interaction rules and attachment specifications.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-2649/index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# GEP-2649: Inherited Policy Attachment\n\n* Issue: [#2649](https://github.com/kubernetes-sigs/gateway-api/issues/2649)\n* Status: Experimental\n\n(See [status definitions](../overview.md#gep-states).)\n```\n\n----------------------------------------\n\nTITLE: Webhook Configuration Update\nDESCRIPTION: YAML configuration change for gateway-api-admission-server default imagePullPolicy setting.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/CHANGELOG/0.x-CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nimagePullPolicy: IfNotPresent  # Changed from Always to IfNotPresent\n```\n\n----------------------------------------\n\nTITLE: Visualizing Route and Service Precedence with Mermaid Diagram\nDESCRIPTION: A mermaid diagram showing the precedence relationship between routes and services when both have session persistence configured. Route-level session persistence takes precedence over service-level persistence defined in BackendLBPolicy.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1619/index.md#2025-04-22_snippet_5\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TB\n   RouteX ----> ServiceA((ServiceA))\n   BackendLBPolicyServiceA[BackendLBPolicy] -.-> ServiceA\n   BackendLBPolicyRouteA[SessionPersistence] -.Precedence.-> RouteX\n   linkStyle 2 stroke:red;\n```\n\n----------------------------------------\n\nTITLE: Creating KinD Cluster with MetalLB\nDESCRIPTION: Command to set up a Kubernetes in Docker (KinD) cluster with MetalLB for conformance testing.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.2.1/kgateway/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nSKIP_DOCKER=true CONFORMANCE=true ci/kind/setup-kind.sh\n```\n\n----------------------------------------\n\nTITLE: Implementing CertificateRefs Field in Go for Gateway Listener TLS Configuration\nDESCRIPTION: Definition of a new CertificateRefs field that replaces the singular CertificateRef in GatewayTLSConfig. This allows referencing multiple TLS certificates and private keys for a listener, with configuration options including namespace references, validation limits, and support levels.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-851/index.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n    // CertificateRefs contains a series of references to Kubernetes objects that\n    // contains TLS certificates and private keys. These certificates are used to\n    // establish a TLS handshake for requests that match the hostname of the\n    // associated listener.\n    //\n    // A single CertificateRef to a Kubernetes Secret has \"Core\" support.\n    // Implementations MAY choose to support attaching multiple certificates to\n    // a Listener, but this behavior is implementation-specific.\n    //\n    // References to a resource in different namespace are invalid UNLESS there\n    // is a ReferenceGrant in the target namespace that allows the certificate\n    // to be attached. If a ReferenceGrant does not allow this reference, the\n    // \"ResolvedRefs\" condition MUST be set to False for this listener with the\n    // \"InvalidCertificateRef\" reason.\n    //\n    // This field is required to have at least one element when the mode is set\n    // to \"Terminate\" (default) and is optional otherwise.\n    //\n    // CertificateRefs can reference to standard Kubernetes resources, i.e.\n    // Secret, or implementation-specific custom resources.\n    //\n    // Support: Core - A single reference to a Kubernetes Secret\n    //\n    // Support: Implementation-specific (More than one reference or other resource types)\n    //\n    // +optional\n    // +kubebuilder:validation:MaxItems=64\n    CertificateRefs []*SecretObjectReference `json:\"certificateRefs,omitempty\"`\n```\n\n----------------------------------------\n\nTITLE: Defining EffectivePolicy Resource in YAML for Gateway API\nDESCRIPTION: Example of an EffectivePolicy object that shows the resultant set of policies affecting a targeted object. It includes metadata, policy objects, and the resultant policy configuration.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-713/index.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nkind: EffectivePolicy\napiVersion: gateway.networking.k8s.io/v1alpha2\nmetadata:\n  name: targeted-object\n  namespace: targeted-object-namespace\npolicies:\n- controllerName: implementation.io/ControllerName\n  objects:\n  - name: some-policy\n    namespace: some-namespace\n    apiGroup: implementation.io\n    kind: AwesomePolicy\n  resultantPolicy:\n    awesomePolicy:\n      configitem1:\n        defaults:\n          foo: 1\n        overrides:\n          bar: important-setting\n```\n\n----------------------------------------\n\nTITLE: Creating GitHub Milestone Description for Gateway API Release\nDESCRIPTION: This snippet demonstrates the format for creating a GitHub Milestone description for a Gateway API release. It includes the release manager's name, new experimental features, graduating features, and the feature freeze date.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/RELEASE_MANAGEMENT.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-manager: @<name>\n\nThis milestone introduces the following new experimental features:\n\n* <experimental-feature-1>\n* <experimental-feature-2>\n* <experimental-feature-3>\n\nThis milestone graduates the following features:\n\n* <GA-feature-1>\n* <GA-feature-2>\n\nfeature-freeze: <mm-dd-yy>\n```\n\n----------------------------------------\n\nTITLE: Defining Policy Condition Types and Reasons in Go\nDESCRIPTION: This snippet defines constants for policy condition types and reasons used in the Gateway API. It includes definitions for the Accepted condition and various reasons for policy acceptance or rejection.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-2649/index.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n// PolicyConditionType is a type of condition for a policy.\ntype PolicyConditionType string\n\n// PolicyConditionReason is a reason for a policy condition.\ntype PolicyConditionReason string\n\nconst (\n  // PolicyConditionAccepted indicates whether the policy has been accepted or rejected\n  // by a targeted resource, and why.\n  //\n  // Possible reasons for this condition to be True are:\n  //\n  // * \"Accepted\"\n  //\n  // Possible reasons for this condition to be False are:\n  //\n  // * \"Conflicted\"\n  // * \"Invalid\"\n  // * \"TargetNotFound\"\n  //\n  PolicyConditionAccepted PolicyConditionType = \"Accepted\"\n\n  // PolicyReasonAccepted is used with the \"Accepted\" condition when the policy has been\n  // accepted by the targeted resource.\n  PolicyReasonAccepted PolicyConditionReason = \"Accepted\"\n\n  // PolicyReasonConflicted is used with the \"Accepted\" condition when the policy has not\n  // been accepted by a targeted resource because there is another policy that targets the same\n  // resource and a merge is not possible.\n  PolicyReasonConflicted PolicyConditionReason = \"Conflicted\"\n\n  // PolicyReasonInvalid is used with the \"Accepted\" condition when the policy is syntactically\n  // or semantically invalid.\n  PolicyReasonInvalid PolicyConditionReason = \"Invalid\"\n\n  // PolicyReasonTargetNotFound is used with the \"Accepted\" condition when the policy is attached to\n  // an invalid target resource\n  PolicyReasonTargetNotFound PolicyConditionReason = \"TargetNotFound\"\n)\n```\n\n----------------------------------------\n\nTITLE: Path Prefix Redirect HTTPRoute\nDESCRIPTION: HTTPRoute configuration for path prefix redirection, replacing only matching path prefixes.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/guides/http-redirect-rewrite.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n{% include 'standard/http-redirect-rewrite/httproute-redirect-prefix.yaml' %}\n```\n\n----------------------------------------\n\nTITLE: Running Conformance Tests with Explicitly Supported Features\nDESCRIPTION: Go code example showing how to configure conformance tests by specifying only the supported features instead of listing all unsupported ones, which can be more convenient in some cases.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1709/index.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ncSuite, err := suite.New(suite.Options{\n    GatewayClassName: \"acme\",\n    Profiles: sets.New(\n        HTTP,\n        TCP,\n    ),\n    SupportedFeatures: sets.New(\n        suite.SupportHTTPRouteMethodMatching,\n    ),\n    // other options\n})\n```\n\n----------------------------------------\n\nTITLE: Viewing Conformance Test Report\nDESCRIPTION: Command to display the conformance test report after running the tests, showing Gateway API compatibility results.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.0.0/nginx-nginx-gateway-fabric/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncat conformance-profile.yaml\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Tier Session Persistence Using Mermaid Sequence Diagram\nDESCRIPTION: This diagram illustrates a complex session persistence implementation involving both global and regional load balancers. It demonstrates how cookies are used at multiple levels to maintain consistent connections through the entire request path.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1619/index.md#2025-04-22_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    actor C as Client\n    participant G as Global<br>Load Balancer\n    participant R as Regional Cluster<br>Load Balancer\n    participant B as Backend\n    C->>+G: Request Web Page\n    G->>+R: Request\n    R->>+B: Request\n    B-->>-R: Response\n    R->>R: Initiates session by<br>adding set-cookie header\n    R-->>-G: Response<br>[set-cookie]\n    G->>G: Add or modify<br>set-cookie header\n    G-->>-C: Response<br>[set-cookie*]\n    Note right of G: [set-cookie] indicates a response<br> with a set-cookie header<br>[set-cookie*] indicates a response with a<br>modified or additional set-cookie header\n    C->>C: Create Cookie<br>from set-cookie header\n    Note right of C: [cookie] indicates a request<br> with one or more cookies\n    C->>+G: Request Web Page<br>[cookie]\n    G->>G: Consistent lookup of<br>regional cluster load balancer<br>using cookie value\n    G->>+R: Request<br>[cookie]\n    R->>R: Consistent lookup of backend<br>using cookie value\n    R->>+B: Request<br>[cookie]\n    B-->>-R: Response\n    R-->>-G: Response\n    G-->>-C: Response\n```\n\n----------------------------------------\n\nTITLE: Running Conformance Tests\nDESCRIPTION: Command to execute the experimental conformance tests and generate a report at the specified path.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.1.0/envoy-gateway/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nCONFORMANCE_REPORT_PATH=conformance-report-k8s.yaml make experimental-conformance\n```\n\n----------------------------------------\n\nTITLE: Defining GRPCHeaderMatch Struct in Go for Kubernetes Gateway API\nDESCRIPTION: This snippet defines the GRPCHeaderMatch struct, which describes how to select a gRPC route by matching gRPC request headers. It includes fields for matching type, header name, and value.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1016/index.md#2025-04-22_snippet_8\n\nLANGUAGE: Go\nCODE:\n```\n// GRPCHeaderMatch describes how to select a gRPC route by matching gRPC request\n// headers.\ntype GRPCHeaderMatch struct {\n\t// Type specifies how to match against the value of the header.\n\t//\n\t// +optional\n\t// +kubebuilder:default=Exact\n\tType *HeaderMatchType `json:\"type,omitempty\"`\n\n\t// Name is the name of the gRPC Header to be matched.\n\t//\n\t// If multiple entries specify equivalent header names, only the first\n\t// entry with an equivalent name MUST be considered for a match. Subsequent\n\t// entries with an equivalent header name MUST be ignored. Due to the\n\t// case-insensitivity of header names, \"foo\" and \"Foo\" are considered\n\t// equivalent.\n\tName HeaderName `json:\"name\"`\n\n\t// Value is the value of the gRPC Header to be matched.\n\t//\n\t// +kubebuilder:validation:MinLength=1\n\t// +kubebuilder:validation:MaxLength=4096\n\tValue string `json:\"value\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Running Gateway and HTTPRoute Conformance Tests\nDESCRIPTION: Command to run conformance tests for Gateway and HTTPRoute implementations with a custom gateway class.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/concepts/conformance.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo test ./conformance -run TestConformance -args \\\n    --gateway-class=my-gateway-class \\\n    --supported-features=Gateway,HTTPRoute\n```\n\n----------------------------------------\n\nTITLE: Building Installation YAML Files for Gateway API Release\nDESCRIPTION: Command to generate installation YAML files for a Gateway API release. These files are generated in the release directory and should be attached to the GitHub release.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/RELEASE.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake build-install-yaml\n```\n\n----------------------------------------\n\nTITLE: Implementing ListenerRoutes Structure\nDESCRIPTION: Definition of ListenerRoutes and RouteGroupKind structs for Gateway API route binding configuration\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-724/index.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype ListenerRoutes struct {\n  // ...\n  // Kinds specifies the groups and kinds of Routes that are allowed to bind to\n  // this Gateway listener. When unspecified or empty, the only limitation on\n  // the kinds of Routes supported is the Listener protocol. Kind MUST\n  // correspond to kinds of Routes that are compatible with the application\n  // protocol specified in the Listener's Protocol field. If an implementation\n  // does not support or recognize this resource type, it SHOULD set the\n  // \"ResolvedRefs\" condition to false for this listener with the\n  // \"InvalidRoutesRef\" reason.\n  //\n  // Support: Core\n  //\n  // +optional\n  // +kubebuilder:validation:MaxItems=10\n  Kinds []RouteGroupKind `json:\"kinds,omitempty\"`\n}\n\ntype RouteGroupKind struct {\n  // Group is the group of the Route.\n  //\n  // Support: Core\n  //\n  // +optional\n  // +kubebuilder:default=gateway.networking.k8s.io\n  // +kubebuilder:validation:MaxLength=253\n  Group *string `json:\"group,omitempty\"`\n  // Kind is the kind of the Route.\n  //\n  // Support: Core\n  //\n  // +kubebuilder:validation:MinLength=1\n  // +kubebuilder:validation:MaxLength=253\n  Kind string `json:\"kind\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning Kong Ingress Controller Repository\nDESCRIPTION: Command to clone the Kong Kubernetes Ingress Controller GitHub repository to the local machine and navigate to the project directory.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.2.1/kong-kubernetes-ingress-controller/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/Kong/kubernetes-ingress-controller.git && cd kubernetes-ingress-controller\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPRoute with Gateway Reference in Kubernetes\nDESCRIPTION: Example of how to configure an HTTPRoute that attaches to a Gateway using the new parentRefs field in v1alpha2. The route forwards traffic to a service named foo-svc on port 8080.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/blog/2021/introducing-v1alpha2.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: gateway.networking.k8s.io/v1alpha2\nkind: HTTPRoute\nmetadata:\n  name: foo\nspec:\n  parentRefs:\n  - name: prod-web\n  rules:\n  - backendRefs:\n    - name: foo-svc\n      port: 8080\n```\n\n----------------------------------------\n\nTITLE: Viewing the Conformance Test Report\nDESCRIPTION: Command to display the generated Gateway API conformance test report. This shows the detailed results of the conformance tests for the specific Contour version being tested.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v0.8.1/projectcontour-contour/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncat gateway-conformance-report/projectcontour-contour-*.yaml\n```\n\n----------------------------------------\n\nTITLE: Gateway Infrastructure Labels and Annotations\nDESCRIPTION: Example showing how to specify custom labels and annotations for Gateway-generated resources using the infrastructure field.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1762/index.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: gateway.networking.k8s.io/v1beta1\nkind: Gateway\nmetadata:\n  name: my-gateway\nspec:\n  infrastructure:\n    labels:\n      foo: bar\n    annotations:\n      name: my-annotation\n```\n\n----------------------------------------\n\nTITLE: Checking Out Specific Version\nDESCRIPTION: Commands to set the desired version as an environment variable and checkout that version in git.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.1.0/envoy-gateway/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport VERSION=v<x.y.z>\\ngit checkout $VERSION\n```\n\n----------------------------------------\n\nTITLE: Defining Gateway API TLS Validation Types in Go\nDESCRIPTION: Defines Go structs for TLS frontend validation including ObjectReference for CA certificate references and GatewayTLSConfig/FrontendTLSValidation types for configuring client certificate validation.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-91/index.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype ObjectReference struct {\n\tGroup Group `json:\"group\"`\n\tKind Kind `json:\"kind\"`\n\tName ObjectName `json:\"name\"`\n\tNamespace *Namespace `json:\"namespace,omitempty\"`\n}\n\ntype GatewayTLSConfig struct {\n    ......\n    FrontendValidation *FrontendTLSValidation `json:\"frontendValidation,omitempty\"`\n}\n\ntype FrontendTLSValidation struct {\n    CACertificateRefs []ObjectReference `json:\"caCertificateRefs,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Running Conformance Tests via Go Library\nDESCRIPTION: Go code example for integrating the Gateway API conformance test suite as a library, configuring options including the gateway class name and profiles to test.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1709/index.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ncSuite, err := suite.New(suite.Options{\n    GatewayClassName: \"acme\",\n    Profiles: sets.New(Layer7),\n    // other options\n})\nrequire.NoError(t, err, \"misconfigured conformance test suite\")\ncSuite.Setup(t)\n\nfor i := 0; i < len(tests.ConformanceTests); i++ {\n    test := tests.ConformanceTests[i]\n    test.Run(t, cSuite)\n}\n```\n\n----------------------------------------\n\nTITLE: Building Gateway API Code\nDESCRIPTION: Command to generate code, run static analysis, and generate Kubernetes CRDs using make.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/contributing/devguide.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake generate\n```\n\n----------------------------------------\n\nTITLE: Simple CORS GET Request Example\nDESCRIPTION: Example of a simple CORS GET request with Origin header and server response with CORS headers.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1767/index.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nGET /resource/foo HTTP/1.1\nHost: http.route.cors.com\nOrigin: https://foo.example\n```\n\nLANGUAGE: text\nCODE:\n```\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Methods: GET, HEAD, POST\nAccess-Control-Allow-Headers: Accept,Accept-Language,Content-Language,Content-Type,Range\n```\n\n----------------------------------------\n\nTITLE: Defining PolicyAncestorStatus Struct in Go\nDESCRIPTION: Defines the core PolicyAncestorStatus and PolicyStatus structs used for reporting policy status in Gateway API implementations. These structs enable tracking policy status across different ancestors and controllers with proper type validation.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-713/index.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// PolicyAncestorStatus describes the status of a route with respect to an\n// associated Ancestor.\n//\n// Ancestors refer to objects that are either the Target of a policy or above it in terms\n// of object hierarchy. For example, if a policy targets a Service, an Ancestor could be\n// a Route or a Gateway. \n\n// In the context of policy attachment, the Ancestor is used to distinguish which\n// resource results in a distinct application of this policy. For example, if a policy\n// targets a Service, it may have a distinct result per attached Gateway.\n// \n// Policies targeting the same resource may have different effects depending on the \n// ancestors of those resources. For example, different Gateways targeting the same\n// Service may have different capabilities, especially if they have different underlying\n// implementations. \n//\n// For example, in BackendTLSPolicy, the Policy attaches to a Service that is\n// used as a backend in a HTTPRoute that is itself attached to a Gateway.\n// In this case, the relevant object for status is the Gateway, and that is the\n// ancestor object referred to in this status.\n//\n// Note that a Target of a Policy is also a valid Ancestor, so for objects where\n// the Target is the relevant object for status, this struct SHOULD still be used.\ntype PolicyAncestorStatus struct {\n\t// AncestorRef corresponds with a ParentRef in the spec that this\n\t// RouteParentStatus struct describes the status of.\n\tAncestorRef ParentReference `json:\"ancestorRef\"`\n\n\t// ControllerName is a domain/path string that indicates the name of the\n\t// controller that wrote this status. This corresponds with the\n\t// controllerName field on GatewayClass.\n\t//\n\t// Example: \"example.net/gateway-controller\".\n\t//\n\t// The format of this field is DOMAIN \"/\" PATH, where DOMAIN and PATH are\n\t// valid Kubernetes names\n\t// (https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).\n\t//\n\t// Controllers MUST populate this field when writing status. Controllers should ensure that\n\t// entries to status populated with their ControllerName are cleaned up when they are no\n\t// longer necessary.\n\tControllerName GatewayController `json:\"controllerName\"`\n\n\t// Conditions describes the status of the Policy with respect to the given Ancestor.\n\t//\n\t// +listType=map\n\t// +listMapKey=type\n\t// +kubebuilder:validation:MinItems=1\n\t// +kubebuilder:validation:MaxItems=8\n\tConditions []metav1.Condition `json:\"conditions,omitempty\"`\n}\n\n\n// PolicyStatus defines the common attributes that all Policies SHOULD include\n// within their status.\ntype PolicyStatus struct {\n\t// Ancestors is a list of ancestor resources (usually Gateways) that are\n\t// associated with the route, and the status of the route with respect to\n\t// each ancestor. When this route attaches to a parent, the controller that\n\t// manages the parent and the ancestors MUST add an entry to this list when\n\t// the controller first sees the route and SHOULD update the entry as\n\t// appropriate when the relevant ancestor is modified.\n\t//\n\t// Note that choosing the relevant ancestor is left to the Policy designers;\n\t// an important part of Policy design is designing the right object level at\n\t// which to namespace this status.\n\t//\n\t// Note also that implementations MUST ONLY populate ancestor status for \n\t// the Ancestor resources they are responsible for. Implementations MUST\n\t// use the ControllerName field to uniquely identify the entries in this list\n\t// that they are responsible for.\n\t//\n\t// A maximum of 32 ancestors will be represented in this list. An empty list\n\t// means the Policy is not relevant for any ancestors.\n\t//\n\t// +kubebuilder:validation:MaxItems=32\n\tAncestors []PolicyAncestorStatus `json:\"ancestors\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ReferenceGrant for Cross-Namespace Access in Kubernetes\nDESCRIPTION: Example of ReferenceGrant configuration that allows HTTPRoutes in the prod namespace to forward traffic to Services in the namespace where the ReferenceGrant is installed.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/blog/2021/introducing-v1alpha2.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: gateway.networking.k8s.io/v1alpha2\nkind: ReferenceGrant\nmetadata:\n  name: allow-prod-traffic\nspec:\n  from:\n  - group: gateway.networking.k8s.io\n    kind: HTTPRoute\n    namespace: prod\n  to:\n  - group: \"\"\n    kind: Service\n```\n\n----------------------------------------\n\nTITLE: Checking Out a Specific Contour Version\nDESCRIPTION: Commands to set a version environment variable and checkout that specific version of Contour. This allows testing a particular release version for Gateway API conformance.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v0.8.1/projectcontour-contour/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport VERSION=v<x.y.z>\ngit checkout $VERSION\n```\n\n----------------------------------------\n\nTITLE: Checking CRD Stored Versions\nDESCRIPTION: Commands to check the stored versions of GRPCRoutes and ReferenceGrants CRDs to identify if v1alpha2 needs to be removed.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/guides/index.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get crd grpcroutes.gateway.networking.k8s.io -ojsonpath=\"{.status.storedVersions}\"\nkubectl get crd referencegrants.gateway.networking.k8s.io -ojsonpath=\"{.status.storedVersions}\"\n```\n\n----------------------------------------\n\nTITLE: Viewing Conformance Test Report\nDESCRIPTION: Command to display the conformance test results from the generated report file.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.2.1/kgateway/README.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncat _test/conformance/$VERSION-report.yaml\n```\n\n----------------------------------------\n\nTITLE: Implementing ServiceEntry parentRef in Istio with HTTPRoute\nDESCRIPTION: Example configuration showing how to use an Istio ServiceEntry as an implementation-specific parentRef with HTTPRoute. This demonstrates proper configuration of both the ServiceEntry resource and its corresponding HTTPRoute reference.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1294/index.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.istio.io/v1beta1\nkind: ServiceEntry\nmetadata:\n  name: internal-svc-httpbin\n  namespace : egress\nspec:\n  hosts:\n  - example.com\n  exportTo:\n  - \".\"\n  location: MESH_INTERNAL\n  ports:\n  - number: 80\n    name: http\n    protocol: HTTP\n  resolution: DNS\n---\napiVersion: gateway.networking.k8s.io/v1beta1\nkind: HTTPRoute\nmetadata:\n  name: mongo-internal\nspec:\n  parentRefs:\n  - kind: ServiceEntry\n    group: networking.istio.io/v1beta1\n    name: internal-svc-httpbin\n    namespace: egress\n    sectionName: http # referencing the port name\n  rules:\n  - backendRefs:\n    - name: internal-example\n      port: 80\n```\n\n----------------------------------------\n\nTITLE: Running Conformance Tests with Feature Exclusions via Go Library\nDESCRIPTION: Go code example for running conformance tests with multiple profiles (HTTP, TCP) while explicitly excluding specific features that are not supported by the implementation.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1709/index.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ncSuite, err := suite.New(suite.Options{\n    GatewayClassName: \"acme\",\n    Profiles: sets.New(\n        HTTP,\n        TCP,\n    ),\n    UnsupportedFeatures: sets.New(\n        suite.SupportHTTPResponseHeaderModification,\n        suite.SupportHTTPRouteMethodMatching,\n        suite.SupportHTTPRouteQueryParamMatching,\n    ),\n    // other options\n})\nrequire.NoError(t, err, \"misconfigured conformance test suite\")\ncSuite.Setup(t)\n\nfor i := 0; i < len(tests.ConformanceTests); i++ {\n    test := tests.ConformanceTests[i]\n    test.Run(t, cSuite)\n}\n```\n\n----------------------------------------\n\nTITLE: Running Conformance Tests\nDESCRIPTION: Commands to run Gateway API conformance tests using environment variables to configure the Contour image and enable report generation.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.0.0/projectcontour-contour/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport CONTOUR_E2E_IMAGE=\"ghcr.io/projectcontour/contour:$VERSION\"\nexport GENERATE_GATEWAY_CONFORMANCE_REPORT=\"true\"\nmake setup-kind-cluster run-gateway-conformance cleanup-kind\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS in NGINX Ingress Controller using CRDs\nDESCRIPTION: This YAML snippet shows how to configure CORS in NGINX Ingress Controller using Custom Resource Definitions (CRDs) for VirtualServer and VirtualServerRoute resources. It demonstrates setting response headers for CORS configuration.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1767/index.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nresponseHeaders:\n  add:\n    - name: Access-Control-Allow-Origin\n      value: \"https://foo.example\"\n    - name: Access-Control-Allow-Credentials\n      value: \"true\"\n    - name: Access-Control-Allow-Methods\n      value: \"GET, POST, PATCH\"\n    - name: Access-Control-Allow-Headers\n      value: \"Origin,No-Cache,X-Requested-With,If-Modified-Since,Pragma\"\n    - name: Access-Control-Max-Age\n      value: \"172800\"\n```\n\n----------------------------------------\n\nTITLE: Alternative Backend Reference Configuration in YAML\nDESCRIPTION: This snippet shows an alternative approach to configuring backend references using a 'backendName' field. It demonstrates a more concise syntax but may violate API conventions.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-718/index.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nforwardTo:\n- backendName: foo\n  port: 80\n    kind: <defaults to Service>\n```\n\n----------------------------------------\n\nTITLE: HTTP to HTTPS Redirect Gateway Configuration\nDESCRIPTION: Gateway configuration with both HTTP and HTTPS listeners, using a Kubernetes Secret for TLS certification.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/guides/http-redirect-rewrite.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n{% include 'standard/http-redirect-rewrite/gateway-redirect-http-https.yaml' %}\n```\n\n----------------------------------------\n\nTITLE: Checking Out Specific Traefik Version for Gateway API Testing\nDESCRIPTION: Command for checking out a specific version of Traefik to test. The placeholder 'vX.Y' should be replaced with the actual version tag to test.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.2.1/traefik-traefik/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout vX.Y\n```\n\n----------------------------------------\n\nTITLE: Displaying Istio Gateway API Implementation Status Table in Markdown\nDESCRIPTION: This markdown table shows the API channel, implementation version, mode, and report link for Istio's Gateway API implementation. It includes a link to the latest release and the corresponding conformance report.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.0.0/istio-istio/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|API channel|Implementation version|Mode|Report|\n|-----------|----------------------|----|------|\n|x|[1.20](https://github.com/istio/istio/releases/tag/1.20.0)|x|[v1.20 report](./1.20-report.yaml)|\n```\n\n----------------------------------------\n\nTITLE: Running Gateway API Conformance Tests with Expression Routes\nDESCRIPTION: Command to run the conformance tests with expression routes enabled using the make command.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.2.0/kong-kubernetes-ingress-controller/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nKONG_TEST_EXPRESSION_ROUTES=true make test.conformance\n```\n\n----------------------------------------\n\nTITLE: Describing Gateway Status Fields in Markdown\nDESCRIPTION: Outlines the main components of the GatewayStatus, including Addresses, Listeners, and Conditions. These fields provide information about the current state of the Gateway resource.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/api-types/gateway.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- `Addresses`- Lists the IP addresses that have actually been bound to the\n  Gateway.\n- `Listeners`- Provide status for each unique listener defined in `spec`.\n- `Conditions`- Describe the current status conditions of the Gateway.\n```\n\n----------------------------------------\n\nTITLE: Cloning the Traefik Proxy Repository with Shell\nDESCRIPTION: Command to clone the Traefik Proxy repository from GitHub and navigate into the project directory.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.2.0/traefik-traefik/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/traefik/traefik.git && cd traefik\n```\n\n----------------------------------------\n\nTITLE: Running Gateway API Conformance Tests\nDESCRIPTION: Command to run the Gateway API conformance tests with Kong Ingress Controller, specifying the router flavor (traditional_compatible or expressions) as an environment variable.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.2.1/kong-kubernetes-ingress-controller/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nTEST_KONG_ROUTER_FLAVOR=<traditional_compatible|expressions> make test.conformance\n```\n\n----------------------------------------\n\nTITLE: Example Table of Contents for Gateway API Conformance Reports\nDESCRIPTION: Provides an example of the table of contents in a conformance report README.md, showing different API channels, implementation versions, modes, and links to corresponding reports.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1709/index.md#2025-04-22_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n| API channel  | Implementation version | Mode         | Report                                        |\n|--------------|------------------------|--------------|-----------------------------------------------|\n| standard     | v2.15                  | default      | ./standard-v2.15-default-report.yaml            |\n| standard     | v2.16                  | default      | ./standard-v2.16-default-report.yaml            |\n| experimental | v2.16                  | with-the-lot | ./experimental-v2.16-with-the-lot-report.yaml |\n```\n\n----------------------------------------\n\nTITLE: Enhancing GatewayClassStatus with SupportedFeatures Field in Go\nDESCRIPTION: This code snippet defines the updated GatewayClassStatus struct with the addition of the SupportedFeatures field. The field is a string array that lists features supported by the GatewayClass implementation and is marked as experimental with a maximum of 64 items.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-2162/index.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// GatewayClassStatus is the current status for the GatewayClass.\ntype GatewayClassStatus struct {\n    // Conditions is the current status from the controller for\n    // this GatewayClass.\n    //\n    // Controllers should prefer to publish conditions using values\n    // of GatewayClassConditionType for the type of each Condition.\n    //\n    // +optional\n    // +listType=map\n    // +listMapKey=type\n    // +kubebuilder:validation:MaxItems=8\n    Conditions []metav1.Condition `json:\"conditions,omitempty\"`\n\n    // SupportedFeatures is the features the GatewayClass support.\n    // <gateway:experimental>\n    // +kubebuilder:validation:MaxItems=64\n    SupportedFeatures []string `json:\"supportedFeatures,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Finalizing Service Rollout with HTTPRoute\nDESCRIPTION: This YAML completes the rollout by updating the HTTPRoute to direct all traffic (100%) to foo-v2, effectively decommissioning foo-v1.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/guides/traffic-splitting.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n{% include 'standard/traffic-splitting/traffic-split-3.yaml' %}\n```\n\n----------------------------------------\n\nTITLE: Exporting Version Environment Variable in Bash\nDESCRIPTION: Sets the VERSION environment variable to the specific Gloo Gateway version being tested.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.0.0/gloo-gateway/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport VERSION=\"1.17.4\"\n```\n\n----------------------------------------\n\nTITLE: Running Gateway API Conformance Tests with Shell\nDESCRIPTION: Command to execute the Gateway API conformance tests using make. The test report will be generated in the integration/conformance-reports directory.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.2.0/traefik-traefik/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmake test-gateway-api-conformance\n```\n\n----------------------------------------\n\nTITLE: Cloning Envoy Gateway Repository\nDESCRIPTION: Command to clone the Envoy Gateway GitHub repository and change into the project directory.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.1.0/envoy-gateway/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/envoyproxy/gateway.git && cd gateway\n```\n\n----------------------------------------\n\nTITLE: Gateway API CRD Version Annotations in YAML\nDESCRIPTION: YAML annotations that specify the bundle version and channel (standard or experimental) for Gateway API CRDs. These annotations help identify the version and type of CRD installed in a cluster.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-922/index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ngateway.networking.k8s.io/bundle-version: v0.4.0\ngateway.networking.k8s.io/channel: standard|experimental\n```\n\n----------------------------------------\n\nTITLE: Basic HTTP Flow Diagram for Timeout Analysis\nDESCRIPTION: A basic sequence diagram showing the flow between Client, Proxy, and Upstream server during an HTTP request/response cycle. This serves as the foundation for the timeout analysis.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1742/index.md#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant C as Client\n    participant P as Proxy\n    participant U as Upstream\n    C->>P: Connection Started\n    C->>P: Starts sending Request\n    C->>P: Finishes Headers\n    C->>P: Finishes request\n    P->>U: Connection Started\n    P->>U: Starts sending Request\n    P->>U: Finishes request\n    P->>U: Finishes Headers\n    U->>P: Starts Response\n    U->>P: Finishes Headers\n    U->>P: Finishes Response\n    P->>C: Starts Response\n    P->>C: Finishes Headers\n    P->>C: Finishes Response\n    Note right of P: Repeat if connection sharing\n    U->>C: Connection ended\n```\n\n----------------------------------------\n\nTITLE: Installing Gloo Gateway Helm Chart with Gateway API Extension\nDESCRIPTION: Uses Helm to install or upgrade the Gloo Gateway chart in the gloo-system namespace. It enables the Gateway API extension and uses the version specified in the VERSION environment variable.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.0.0/gloo-gateway/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade -i --create-namespace -n gloo-system gloo gloo/gloo --version $VERSION --set kubeGateway.enabled=true\n```\n\n----------------------------------------\n\nTITLE: Installing Experimental Channel Gateway API\nDESCRIPTION: Command to install the experimental release channel which includes standard resources plus experimental ones like TCPRoute, TLSRoute, and UDPRoute.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/guides/index.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f https://github.com/kubernetes-sigs/gateway-api/releases/download/v1.2.0/experimental-install.yaml\n```\n\n----------------------------------------\n\nTITLE: Running Gateway API Conformance Tests\nDESCRIPTION: This command executes the Gateway API conformance tests for Traefik Proxy. The test results will be available in the './integration/conformance-reports' folder.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.1.0/traefik-traefik/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmake test-gateway-api-conformance\n```\n\n----------------------------------------\n\nTITLE: Listing Gateways with Wide Output\nDESCRIPTION: Example output of gwctl get gateway command displaying Gateway resources with class, addresses, ports, programmed status, age and route counts.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-2722/index.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nNAME               CLASS                    ADDRESSES      PORTS     PROGRAMMED  AGE  POLICIES  HTTPROUTES\ndemo-gateway-2     external-class           10.0.0.1       80        True        20d  10        5\nabc-gateway-12345  internal-class           192.168.100.5  443,8080  False       5d   2         1\nrandom-gateway     regional-internal-class  10.11.12.13    8443      Unknown     3s   3         5\n```\n\n----------------------------------------\n\nTITLE: Running Gateway API Conformance Tests\nDESCRIPTION: Command to run the Gateway API conformance tests with expression routes enabled.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.0.0/kong-kubernetes-ingress-controller/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nKONG_TEST_EXPRESSION_ROUTES=true make test.conformance\n```\n\n----------------------------------------\n\nTITLE: Cloning and Checking Out kgateway Repository\nDESCRIPTION: Commands to clone the kgateway repository and checkout a specific version tag for testing.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.2.1/kgateway/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/kgateway-dev/kgateway.git\ncd kgateway\nexport VERSION=\"v2.0.0\"\ngit checkout tags/$VERSION -b $VERSION\n```\n\n----------------------------------------\n\nTITLE: Displaying GatewayClass with Description in Shell\nDESCRIPTION: Shows how to use kubectl to get GatewayClass resources with the new Description field displayed as a column.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/CHANGELOG/0.x-CHANGELOG.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$> kubectl get gatewayclass\nNAME       CONTROLLER                            DESCRIPTION\ninternal   gateway-controller-internal   For non-internet-facing Gateways.\nexternal   gateway-controller-external   For internet-facing Gateways.\n```\n\n----------------------------------------\n\nTITLE: Deploying CRDs to Cluster\nDESCRIPTION: Commands to deploy Custom Resource Definitions to a Kind cluster and verify their deployment.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/contributing/devguide.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmake crd\nkubectl get crds\n```\n\n----------------------------------------\n\nTITLE: Running Gloo Gateway Conformance Tests\nDESCRIPTION: Make command to execute the conformance tests for Gloo Gateway.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.1.0/gloo-gateway/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nmake conformance\n```\n\n----------------------------------------\n\nTITLE: Running Conformance Tests via Command Line\nDESCRIPTION: Example of running Gateway API conformance tests using go test command line interface with a specified gateway class and conformance profile.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1709/index.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ go test ./conformance/... -args -gateway-class=acme -conformance-profile=Layer7\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Gateway API Roles in Kubernetes\nDESCRIPTION: This image illustrates the different roles involved in using the Gateway API, showing the relationships between infrastructure providers, cluster operators, and application developers.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/concepts/use-cases.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n![Gateway API Roles](../images/gateway-roles.png)\n```\n\n----------------------------------------\n\nTITLE: Listing Namespaces with Wide Output\nDESCRIPTION: Example output of gwctl get namespace command showing namespace status, age and policy counts.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-2722/index.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nNAME         STATUS  AGE  POLICIES\ndefault      Active  46d  3\nkube-system  Active  46d  5\n```\n\n----------------------------------------\n\nTITLE: Viewing Conformance Test Report\nDESCRIPTION: Command to display the generated conformance test report.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.0.0/kong-kubernetes-ingress-controller/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncat ./kong-kubernetes-ingress-controller.yaml\n```\n\n----------------------------------------\n\nTITLE: Checking Out a Specific Version for Testing\nDESCRIPTION: Commands to set a version environment variable and check out that specific version of the Kong Kubernetes Ingress Controller. This ensures tests are run against the desired controller version.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.1.0/kong-kubernetes-ingress-controller/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport VERSION=v<x.y.z>\ngit checkout $VERSION\n```\n\n----------------------------------------\n\nTITLE: Deleting Kind Cluster\nDESCRIPTION: Removes the kind cluster used for testing\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/hack/implementations/envoy-gateway/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkind delete cluster --name envoy-gateway\n```\n\n----------------------------------------\n\nTITLE: Checking CRD Stored Versions in Kubernetes\nDESCRIPTION: Commands to check the stored API versions for GRPCRoute and ReferenceGrant CRDs to identify if v1alpha2 needs to be removed.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/CHANGELOG/1.2-CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get crd grpcroutes.gateway.networking.k8s.io -ojsonpath=\"{.status.storedVersions}\"\nkubectl get crd referencegrants.gateway.networking.k8s.io -ojsonpath=\"{.status.storedVersions}\"\n```\n\n----------------------------------------\n\nTITLE: Cloning Gateway API Repository\nDESCRIPTION: Commands to clone the Gateway API repository into the proper GOPATH directory structure.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/contributing/devguide.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmkdir -p $GOPATH/src/sigs.k8s.io\ncd $GOPATH/src/sigs.k8s.io\ngit clone https://github.com/kubernetes-sigs/gateway-api\ncd gateway-api\n```\n\n----------------------------------------\n\nTITLE: Running Conformance Tests\nDESCRIPTION: Command to execute the conformance test suite using make.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.2.1/kgateway/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nmake conformance\n```\n\n----------------------------------------\n\nTITLE: Running Mesh Conformance Tests\nDESCRIPTION: Command to run conformance tests specifically for mesh implementations.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/concepts/conformance.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo test ./conformance -run TestConformance -args --supported-features=Mesh\n```\n\n----------------------------------------\n\nTITLE: Implementing Backend-Initiated Session Persistence Using Mermaid Sequence Diagram\nDESCRIPTION: This diagram shows how a backend-initiated session works, with the gateway modifying the cookie value set by the backend. The gateway manages the cookie to ensure consistent routing to the same backend for all subsequent requests from the client.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1619/index.md#2025-04-22_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    actor C as Client\n    participant G as Gateway\n    participant B as Backend\n    C->>+G: Request Web Page\n    activate G\n    G->>+B: Request\n    B->>B: Add set-cookie<br>header\n    B-->>-G: Response<br>[set-cookie]\n    G->>G: Modify set-cookie<br>header per configuration\n    G-->>-C: Response<br>[set-cookie*]\n    Note right of G: [set-cookie] indicates a response<br> with a set-cookie header<br>[set-cookie*] indicates a response<br>with a MODIFIED set-cookie header\n    C->>C: Create Cookie<br>from set-cookie header\n    Note right of C: [cookie] indicates a request<br>or response with a cookie\n    C->>+G: Request Web Page<br>[cookie]\n    G->>G: Consistent lookup<br>of server using cookie value\n    G->>+B: Request<br>[cookie]\n    B-->>-G: Response\n    G-->>-C: Response\n```\n\n----------------------------------------\n\nTITLE: Describing GatewayClass Resource\nDESCRIPTION: Detailed output of gwctl describe gatewayclass command showing complete GatewayClass resource configuration including metadata, status and policies.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-2722/index.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nName: foo-com-external-gateway-class\nLabels: <none>\nAnnotations <none>\nAPI Version gateway.networking.k8s.io/v1beta1\nKind: GatewayClass\nMetadata:\n  creationTimestamp: \"2023-06-28T17:33:03Z\"\n  generation: 1\n  resourceVersion: \"108322484\"\n  uid: 80cea521-5416-41c4-b5d1-2ee30f5366a6\nControllerName: foo.com/external-gateway-class\nDescription: Create an external load balancer\nStatus:\n  conditions:\n  - lastTransitionTime: \"2023-05-22T17:29:47Z\"\n    message: \"\"\n    observedGeneration: 1\n    reason: Accepted\n    status: \"True\"\n    type: Accepted\nDirectlyAttachedPolicies:\n  TYPE                   NAME\n  ----                   ----\n  TimeoutPolicy.bar.com  demo-timeout-policy-on-gatewayclass\n```\n\n----------------------------------------\n\nTITLE: Viewing the Conformance Test Report\nDESCRIPTION: Command to display the contents of the conformance test report file that was generated during the test run.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.2.1/kong-kubernetes-ingress-controller/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncat ./kong-kubernetes-ingress-controller.yaml\n```\n\n----------------------------------------\n\nTITLE: Viewing Conformance Test Report\nDESCRIPTION: Command to display the contents of the conformance test report file.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.2.0/kong-kubernetes-ingress-controller/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncat ./kong-kubernetes-ingress-controller.yaml\n```\n\n----------------------------------------\n\nTITLE: Promoting ReferenceGrant to v1beta1 API\nDESCRIPTION: YAML snippet showing the promotion of ReferenceGrant to the v1beta1 API and the standard release channel.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/CHANGELOG/0.x-CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- Promotes ReferenceGrant to the v1beta1 API and the standard release channel\n  (#1455, @nathancoleman)\n```\n\n----------------------------------------\n\nTITLE: Running Full Gateway API Conformance Test Suite\nDESCRIPTION: Command to run the complete Gateway API conformance test suite from the GKE Gateway repository. It specifies the gateway class, conformance profiles, and other metadata for the test report.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.1.0/gke-gateway/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo test ./conformance -run TestConformance -v -timeout=3h -args \\\n    --gateway-class=gke-l7-global-external-managed \\\n    --conformance-profiles=GATEWAY-HTTP \\\n    --organization=GKE \\\n    --project=gke-gateway \\\n    --url=https://cloud.google.com/kubernetes-engine/docs/concepts/gateway-api \\\n    --version=1.30.3-gke.1211000 \\\n    --contact=gke-gateway-dev@google.com \\\n    --report-output=\"/path/to/report\"\n```\n\n----------------------------------------\n\nTITLE: Viewing Test Report\nDESCRIPTION: Command to display the generated conformance test report.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.2.0/kong-gateway-operator/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncat ./standard-${VERSION}-expressions-report.yaml\n```\n\n----------------------------------------\n\nTITLE: Running Combined Gateway and Mesh Tests\nDESCRIPTION: Command to run both mesh and gateway-related conformance tests in a single test run.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/concepts/conformance.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo test ./conformance -run TestConformance -args --supported-features=Mesh,Gateway,HTTPRoute\n```\n\n----------------------------------------\n\nTITLE: Creating GKE Cluster with Gateway API Enabled\nDESCRIPTION: Command to create a Google Kubernetes Engine cluster with the Gateway API standard channel enabled. This is the first step in setting up the environment for Gateway API conformance testing.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.1.0/gke-gateway/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngcloud container clusters create \"${cluster_name}\" --gateway-api=standard --location=\"${location}\"\n```\n\n----------------------------------------\n\nTITLE: Running Istio Gateway API Conformance Tests\nDESCRIPTION: Command to execute Istio conformance tests for the Gateway API implementation using the integration test suite in a Kind cluster.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.2.0/istio-istio/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nprow/integ-suite-kind.sh test.integration.pilot.kube\n```\n\n----------------------------------------\n\nTITLE: Checking Out Specific Traefik Version\nDESCRIPTION: This command checks out a specific version of Traefik Proxy. Replace X.Y with the desired version number to test.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.1.0/traefik-traefik/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout vX.Y\n```\n\n----------------------------------------\n\nTITLE: Checking Out Specific Version\nDESCRIPTION: Commands to set and checkout a specific version of the Kong Gateway Operator.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.2.0/kong-gateway-operator/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport VERSION=v<x.y.z>\ngit checkout $VERSION\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation with Version Information for Gateway API Release\nDESCRIPTION: Command to generate documentation with correct version information for a new Gateway API release. This sets the base reference to the version being released and runs the generate make target.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/RELEASE.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nBASE_REF=vmajor.minor.patch make generate\n```\n\n----------------------------------------\n\nTITLE: Running Exclusive Mesh Tests\nDESCRIPTION: Command to run only mesh tests while explicitly excluding Gateway and ReferenceGrant features.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/concepts/conformance.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngo test ./conformance -run TestConformance -args \\\n    --supported-features=Mesh \\\n    --exempt-features=Gateway,ReferenceGrant\n```\n\n----------------------------------------\n\nTITLE: Cilium Gateway API Version Matrix Table\nDESCRIPTION: Markdown table showing the compatibility matrix between API channels, Cilium implementation versions, operation modes, and conformance test reports.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.1.0/cilium-cilium/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| API channel  | Implementation version                                       | Mode    | Report                                          |\n|--------------|--------------------------------------------------------------|---------|-------------------------------------------------|\n| experimental | [1.16](https://github.com/cilium/cilium/releases/tag/1.16.0) | default | [v1.16 report](./experimental-1.16-default-report.yaml) |\n```\n\n----------------------------------------\n\nTITLE: Running Gateway API Conformance Tests\nDESCRIPTION: Make command to execute the Gateway API conformance test suite against the deployed Gloo Gateway instance.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.2.0/gloo-gateway/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nmake conformance\n```\n\n----------------------------------------\n\nTITLE: Defining AddressMatch Type in Go\nDESCRIPTION: Defines a new type AddressMatch that specifies how to match network addresses, supporting both IP addresses and named addresses with customizable implementation handling.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-735/index.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype AddressMatch struct {\n\tType *AddressType `json:\"type,omitempty\"`\n\tValue string `json:\"value\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Running Istio Gateway API Conformance Tests\nDESCRIPTION: Command for executing Istio conformance tests using the integration test suite in a Kind cluster environment.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.2.1/istio-istio/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nprow/integ-suite-kind.sh test.integration.pilot.kube\n```\n\n----------------------------------------\n\nTITLE: Viewing the Conformance Test Report\nDESCRIPTION: Command to display the generated conformance test report that verifies Gloo Gateway's compliance with the Gateway API specification.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.2.0/gloo-gateway/README.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncat _test/conformance/$VERSION-report.yaml\n```\n\n----------------------------------------\n\nTITLE: Viewing Gloo Gateway Conformance Report\nDESCRIPTION: Command to display the contents of the conformance test report file.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.1.0/gloo-gateway/README.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncat _test/conformance/$VERSION-report.yaml\n```\n\n----------------------------------------\n\nTITLE: Displaying Azure Application Gateway for Containers Implementation Table in Markdown\nDESCRIPTION: This markdown table shows the API channel, implementation version, mode, and report link for Azure Application Gateway for Containers. It provides a quick reference for users to understand the current implementation status and access relevant documentation.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.1.0/azure-application-gateway-for-containers/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|API channel|Implementation version|Mode|Report|\n|-----------|----------------------|----|------|\n|x|[v1.1.0](https://learn.microsoft.com/azure/application-gateway/for-containers/alb-controller-release-notes#latest-release-recommended)|x|[v1.1.0 report](./standard-v1.1.0-default-report.yaml)|\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Namespace Annotations\nDESCRIPTION: Example of running conformance tests with namespace annotations for Linkerd sidecar injection.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/concepts/conformance.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngo test ./conformance -run TestConformance -args \\\n   ...\n   --namespace-annotations=linkerd.io/inject=enabled\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for Kubernetes Gateway API Docs\nDESCRIPTION: This code snippet lists the required Python packages and their versions for the Kubernetes Gateway API documentation project. It includes packages for Markdown processing, MkDocs, and various plugins for documentation generation and enhancement.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/hack/mkdocs/image/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: Plain Text\nCODE:\n```\nClick==8.1.8\nhtmlmin==0.1.12\nJinja2==3.1.6\njsmin==3.0.1\nlivereload==2.7.1\n# mkdocs 2.4.1 requires Markdown < 3.4.0\n# https://github.com/kubernetes-sigs/gateway-api/pull/1671#issuecomment-1400586465\nmarkdown~=3.8\nMarkupSafe==3.0.2\nmkdocs==1.6.1\nmkdocs-awesome-pages-plugin==2.10.1\nmkdocs-macros-plugin==1.3.7\nmkdocs-material==9.6.11\nmkdocs-redirects==1.2.2\nmkdocs-mermaid2-plugin==1.2.1\npandas>=2.0.3\npep562==1.1\nPygments==2.19.1\npymdown-extensions==10.14.3\nPyYAML==6.0.2\nsix==1.17.0\ntabulate==0.9.0\ntornado==6.4.2\n```\n\n----------------------------------------\n\nTITLE: Running Istio Gateway API Conformance Tests\nDESCRIPTION: Command to reproduce Istio conformance tests for the Gateway API implementation. This must be executed from within the Istio repository to test the pilot integration with Kubernetes.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.1.0/istio-istio/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nprow/integ-suite-kind.sh test.integration.pilot.kube\n```\n\n----------------------------------------\n\nTITLE: Running Conformance Tests\nDESCRIPTION: Command to execute the conformance tests with expression routes enabled.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.2.0/kong-gateway-operator/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nKONG_TEST_EXPRESSION_ROUTES=true make test.conformance\n```\n\n----------------------------------------\n\nTITLE: Running Gateway API Conformance Tests with Expression Routes\nDESCRIPTION: Command to run the Gateway API conformance tests with expression routes enabled. This uses the Makefile target for conformance tests with the appropriate environment variable.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.1.0/kong-kubernetes-ingress-controller/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nKONG_TEST_EXPRESSION_ROUTES=true make test.conformance\n```\n\n----------------------------------------\n\nTITLE: Running Single Gateway API Conformance Test Case\nDESCRIPTION: Command to run a specific Gateway API conformance test case rather than the entire suite. This example runs only the HTTPRouteRequestMirror test against the global external managed gateway class.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.1.0/gke-gateway/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngo test ./conformance -run TestConformance -v -args \\\n    --gateway-class=gke-l7-global-external-managed \\\n    --run-test=HTTPRouteRequestMirror\n```\n\n----------------------------------------\n\nTITLE: Configuration Note for Header Handling\nDESCRIPTION: A note explaining the special considerations for header handling and rate limiting in the Microgateway implementation, particularly for HTTPRouteWeight testing and header filtering behavior\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.2.0/airlock-microgateway/README.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n> [!NOTE]\n> The `HTTPRouteWeight` test fires 10 concurrent request to 3 backends totaling in 500 requests to assert a distribution that matches the configured weight.\n> Please be aware that this test exceeds the [5 req/sec rate-limit](https://docs.airlock.com/microgateway/latest/#data/1675772882054.html) enforced in the [community edition](https://www.airlock.com/en/secure-access-hub/components/microgateway/community-edition), causing the test to fail.\n> To successfully pass this test a [premium license](https://www.airlock.com/en/secure-access-hub/components/microgateway/premium-edition)  is required.\n> \n> The Airlock Microgateway drops all request headers except for a well-known built-in standard and tracing headers list (e.g., Accept, Cookie, X-CSRF-TOKEN) to reduce the attack surface.\n> Therefore, to run the conformance tests, a `ContentSecurityPolicy` with a `HeaderRewrites` (see [`conformance-report.yaml`](https://github.com/airlock/microgateway/tree/main/examples/gateway-api/conformance/manifests/conformance-report.yaml)) is required to disable request header filtering for all `HTTPRoute` tests relying on the `MakeRequestAndExpectEventuallyConsistentResponse` assertion.\n> Regardless of whether request header filtering is enabled or disabled, header-based routing works as specified in the Gateway API, as the headers are only filtered before the request is forwarded to the upstream.\n```\n\n----------------------------------------\n\nTITLE: Running Gloo Gateway Conformance Suite\nDESCRIPTION: Executes the conformance test suite for Gloo Gateway using a Make command.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.0.0/gloo-gateway/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake conformance-experimental\n```\n\n----------------------------------------\n\nTITLE: Listing Gateway Classes with Wide Output\nDESCRIPTION: Example output of gwctl get gatewayclass command showing GatewayClass resources with controller, acceptance status, age, description and gateway count.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-2722/index.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nNAME                            CONTROLLER                      ACCEPTED  AGE   DESCRIPTION             Gateways\nbar-com-internal-gateway-class  bar.baz/internal-gateway-class  True      100d  Internal Load Balancer  10\nfoo-com-external-gateway-class  foo.com/external-gateway-class  True      365d  External Load Balancer  25\n```\n\n----------------------------------------\n\nTITLE: Setting Contour Version\nDESCRIPTION: Commands to set the desired version and checkout that specific version in git.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.0.0/projectcontour-contour/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport VERSION=v<x.y.z>\ngit checkout $VERSION\n```\n\n----------------------------------------\n\nTITLE: Creating Kind Cluster with MetalLB\nDESCRIPTION: Command to set up a Kind cluster with MetalLB for conformance testing, using specific environment variables and a setup script.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.1.0/gloo-gateway/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nSKIP_DOCKER=\"true\" CONFORMANCE=true CLUSTER_NODE_VERSION=\"v1.31.0@sha256:53df588e04085fd41ae12de0c3fe4c72f7013bba32a20e7325357a1ac94ba865\" ci/kind/setup-kind.sh\n```\n\n----------------------------------------\n\nTITLE: Enforcing Retry Policy with Gateway-level Overrides\nDESCRIPTION: Demonstrates how to enforce specific retry behavior using override policies at the Gateway level.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-2649/index.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.example.io/v1alpha1\nkind: RetryOnPolicy\nmetadata:\n  name: retryon5xx\n  namespace: appns\nspec:\n  overrides:\n    retryOn:\n      - \"501\"\n      - \"502\"\n      - \"503\"\n  targetRef:\n    kind: Gateway\n    group: gateway.networking.k8s.io\n    name: you-must-retry\n```\n\n----------------------------------------\n\nTITLE: Checking Out Specific Contour Version in Bash\nDESCRIPTION: Set the desired version as an environment variable and checkout that version in the Git repository.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.1.0/projectcontour-contour/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport VERSION=v<x.y.z>\ngit checkout $VERSION\n```\n\n----------------------------------------\n\nTITLE: Cloning Kong Ingress Controller Repository\nDESCRIPTION: Command to clone the Kong Kubernetes Ingress Controller repository and navigate to the project directory.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.2.0/kong-kubernetes-ingress-controller/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/Kong/kubernetes-ingress-controller.git && cd kubernetes-ingress-controller\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Gateway API Release Note Format\nDESCRIPTION: Example of the markdown format used for documenting Gateway API changes. Includes section headers for different types of changes like Status Changes, Spec Cleanup, Validation Fixes, etc.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/CHANGELOG/0.x-CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Status Changes\n\n- The \"Ready\" Gateway and Listener condition has been reserved for future use.\n  (#1888, @howardjohn)\n- The UnsupportedAddress Listener condition reason has been moved to a Gateway\n  condition reason.  (#1888, @howardjohn)\n- The AddressNotAssigned Gateway condition reasons has moved from Accepted to\n  Programmed. (#1888, @howardjohn)\n- The NoResources Gateway condition reasons has moved from Ready to Programmed.\n  (#1888, @howardjohn)\n```\n\n----------------------------------------\n\nTITLE: Deploying Gloo Gateway Helm Chart\nDESCRIPTION: Helm command to upgrade or install Gloo Gateway in the gloo-system namespace, enabling kubeGateway.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.1.0/gloo-gateway/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nhelm upgrade -i --create-namespace -n gloo-system gloo gloo/gloo --version $VERSION --set kubeGateway.enabled=true\n```\n\n----------------------------------------\n\nTITLE: Updating Resource Storage Versions\nDESCRIPTION: Script to update all ReferenceGrants and GRPCRoutes to the latest storage version by adding a migration timestamp.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/guides/index.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncrds=(\"GRPCRoutes\" \"ReferenceGrants\")\n\nfor crd in \"${crds[@]}\"; do\n  output=$(kubectl get \"${crd}\" -A -o json)\n\n  echo \"$output\" | jq -c '.items[]' | while IFS= read -r resource; do\n    namespace=$(echo \"$resource\" | jq -r '.metadata.namespace')\n    name=$(echo \"$resource\" | jq -r '.metadata.name')\n    kubectl patch \"${crd}\" \"${name}\" -n \"${namespace}\" --type='json' -p='[{\"op\": \"replace\", \"path\": \"/metadata/annotations/migration-time\", \"value\": \"'\"$(date +%Y-%m-%dT%H:%M:%S)\"'\" }]'\n  done\ndone\n```\n\n----------------------------------------\n\nTITLE: Cloning Envoy Gateway Repository in Bash\nDESCRIPTION: This command clones the Envoy Gateway GitHub repository and changes the current directory to the cloned repository.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.2.0/envoy-gateway/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/envoyproxy/gateway.git && cd gateway\n```\n\n----------------------------------------\n\nTITLE: Checking Conformance Report in Bash\nDESCRIPTION: This command displays the contents of the generated conformance report file.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.2.0/envoy-gateway/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncat ./conformance-report-k8s.yaml\n```\n\n----------------------------------------\n\nTITLE: HTTPRoute Port Matching Example\nDESCRIPTION: YAML example demonstrating how to configure an HTTPRoute to be applied to specific port 8000, showing attachment to multiple listeners on the same port while excluding listeners on different ports.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-957/index.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nkind: HTTPRoute\nmetadata:\n  name: example\n  namespace: example\nspec:\n  parentRef:\n  - name: my-gateway\n    port: 8000\n  ...\n---\nkind: Gateway\nmetadata:\n  name: my-gateway\n  namespace: example\nspec:\n  listeners:\n  - name: foo\n    port: 8000\n    protocol: HTTP\n    ...\n  - name: bar\n    port: 8000\n    protocol: HTTP\n    ...\n  - name: baz\n    port: 8080\n    ...\n```\n\n----------------------------------------\n\nTITLE: Viewing Conformance Report\nDESCRIPTION: Command to display the contents of the generated conformance test report.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.1.0/envoy-gateway/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncat ./conformance-report-k8s.yaml\n```\n\n----------------------------------------\n\nTITLE: Markdown Table for Kong Kubernetes Ingress Controller Versions\nDESCRIPTION: A markdown table showing the mapping between API channels, implementation versions, modes and their corresponding report files.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v0.8.1/kong-kubernetes-ingress-controller/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|API channel|Implementation version|Mode|Report|\n|-----------|----------------------|----|------|\n|x|[v2.12.0](https://github.com/Kong/kubernetes-ingress-controller/releases/tag/v2.12.0)|x|[v2.12.0 report](./v2.12.0-report.yaml)|\n```\n\n----------------------------------------\n\nTITLE: Viewing Conformance Test Results\nDESCRIPTION: Command to display the conformance test report file after running the tests, which contains information about the implementation's compliance with the Gateway API specification.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.2.1/nginx-nginx-gateway-fabric/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncat conformance-profile.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining Gateway API Version Constant in Go\nDESCRIPTION: This snippet defines a constant for the current Gateway API version. It is used to ensure compatibility between the conformance suite and the installed CRDs.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1709/index.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nconst GatewayAPIVersion = \"0.7.0\"\n```\n\n----------------------------------------\n\nTITLE: Cloning Nginx Gateway Fabric Repository for Testing\nDESCRIPTION: Command to clone the NGINX Gateway Fabric GitHub repository and navigate to the tests directory where conformance tests can be run.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.2.1/nginx-nginx-gateway-fabric/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/nginx/nginx-gateway-fabric.git && cd nginx-gateway-fabric/tests\n```\n\n----------------------------------------\n\nTITLE: Viewing Conformance Test Report\nDESCRIPTION: Command to display the contents of the generated conformance test report file.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.2.1/envoy-gateway/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncat ./conformance-report-k8s.yaml\n```\n\n----------------------------------------\n\nTITLE: Displaying Gateway API Resource Information with gwctl\nDESCRIPTION: Examples of using the gwctl command-line tool to retrieve and display information about Gateway API resources in various formats.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-2722/index.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngwctl get gateways -n foo\ngwctl get httproutes -l version=v1,app=myapp\ngwctl get gateways -n foo -o yaml\ngwctl get httproutes -l version=v1,app=myapp -o json\ngwctl describe gateways my-gateway\ngwctl describe policies my-policy\ngwctl get policies -t kind=httproute\n```\n\n----------------------------------------\n\nTITLE: Cloning Kong Kubernetes Ingress Controller Repository\nDESCRIPTION: Command to clone the Kong Kubernetes Ingress Controller repository from GitHub and navigate to the project directory.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.0.0/kong-kubernetes-ingress-controller/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/Kong/kubernetes-ingress-controller.git && cd kubernetes-ingress-controller\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Example for Gateway API Conformance Reports\nDESCRIPTION: Shows the hierarchical folder organization for storing conformance reports across different Gateway API versions and implementations.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/README.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n|-- conformance/reports\n|   |-- v1.0\n|   |   |-- acme-operator\n|   |   |   |-- README.md\n|   |   |   |-- standard-v2.13-default-report.yaml\n|   |-- v1.1\n|   |   |-- acme-operator\n|   |   |   |-- README.md\n|   |   |   |-- standard-v2.14-default-report.yaml\n|   |   |   |-- standard-v2.14-with-the-lot-report.yaml\n|   |   |   |-- experimental-v2.14-with-the-lot-report.yaml\n|   |   |-- umbrella-operator\n|   |   |   |-- README.md\n|   |   |   |-- standard-v1.8-default-report.yaml\n```\n\n----------------------------------------\n\nTITLE: Deploying kgateway Helm Charts\nDESCRIPTION: Helm commands to install kgateway CRDs and main components in the kgateway-system namespace.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.2.1/kgateway/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nhelm upgrade -i --create-namespace --namespace kgateway-system --version $VERSION kgateway-crds oci://cr.kgateway.dev/kgateway-dev/charts/kgateway-crds\n\nhelm upgrade -i --namespace kgateway-system --version $VERSION kgateway oci://cr.kgateway.dev/kgateway-dev/charts/kgateway\n```\n\n----------------------------------------\n\nTITLE: Implementation Version Table\nDESCRIPTION: Markdown table showing the API channel, implementation version, mode, and report link for Airlock Microgateway conformance testing.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.2.1/airlock-microgateway/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| API channel  | Implementation version                                               | Mode    | Report                                           |\n|--------------|----------------------------------------------------------------------|---------|--------------------------------------------------|\n| experimental | [v4.5.0](https://github.com/airlock/microgateway/releases/tag/4.5.0) | default | [link](./experimental-4.5.0-default-report.yaml) |\n```\n\n----------------------------------------\n\nTITLE: Cloning Traefik Proxy Repository\nDESCRIPTION: This command clones the Traefik Proxy repository and changes to the project directory. It's the first step in reproducing the conformance test results.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.1.0/traefik-traefik/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/traefik/traefik.git && cd traefik\n```\n\n----------------------------------------\n\nTITLE: Viewing Conformance Test Results\nDESCRIPTION: Command to display the conformance test report after running the tests.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.2.0/nginx-nginx-gateway-fabric/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncat conformance-profile.yaml\n```\n\n----------------------------------------\n\nTITLE: HTTP Method-Based Routing with ServiceImports\nDESCRIPTION: An advanced routing configuration that directs write operations (POST, PUT, DELETE) to the primary API endpoint while routing read operations to replicas across multiple clusters.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1748/index.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n{% include 'standard/multicluster/httproute-method.yaml' %}\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown Table for Cilium Gateway API Implementation\nDESCRIPTION: This markdown snippet creates a table displaying the API channel, implementation version, mode, and report link for Cilium's Gateway API implementation. It specifically shows details for version v1.15.0-pre.1.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v0.8.1/cilium/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|API channel|Implementation version|Mode|Report|\n|-----------|----------------------|----|------|\n|x|[v1.15.0-pre.1](https://github.com/cilium/cilium/releases/tag/v1.15.0-pre.1)|x|[v1.15.0-pre.1 report](./v1.15.0-pre.1-report.yaml)|\n```\n\n----------------------------------------\n\nTITLE: Cloning NGINX Gateway Fabric Repository for Testing\nDESCRIPTION: Commands to clone the NGINX Gateway Fabric repository and navigate to the tests directory to prepare for conformance testing.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.0.0/nginx-nginx-gateway-fabric/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/nginx/nginx-gateway-fabric.git && cd nginx-gateway-fabric/tests\n```\n\n----------------------------------------\n\nTITLE: Running Conformance Tests in Bash\nDESCRIPTION: This command runs the experimental conformance tests and specifies the path for the conformance report output.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.2.0/envoy-gateway/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nCONFORMANCE_REPORT_PATH=conformance-report-k8s.yaml make experimental-conformance\n```\n\n----------------------------------------\n\nTITLE: Building Documentation Locally\nDESCRIPTION: Commands to set up a Python virtual environment and run mkdocs for local documentation preview.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/contributing/devguide.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nmake docs\n\n$ make .venv\nCreating a virtualenv in .venv... OK\nTo enter the virtualenv type \"source .venv/bin/activate\", to exit type \"deactivate\"\n(.venv) $ source .venv/bin/activate\n(.venv) $ mkdocs serve\nINFO    -  Building documentation...\n...\n```\n\n----------------------------------------\n\nTITLE: Cloning NGINX Gateway Fabric Repository\nDESCRIPTION: Command to clone the NGINX Gateway Fabric repository and navigate to the tests directory for running conformance tests.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.2.0/nginx-nginx-gateway-fabric/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/nginx/nginx-gateway-fabric.git && cd nginx-gateway-fabric/tests\n```\n\n----------------------------------------\n\nTITLE: Viewing the Generated Conformance Report\nDESCRIPTION: Command to display the contents of the conformance test report generated after running the tests. This file contains the detailed results of the Gateway API conformance tests.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.1.0/kong-kubernetes-ingress-controller/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncat ./kong-kubernetes-ingress-controller.yaml\n```\n\n----------------------------------------\n\nTITLE: Setting Up KinD Cluster with MetalLB for Testing\nDESCRIPTION: Command to create a Kubernetes in Docker (KinD) cluster with MetalLB configured for load balancing. This environment setup is required for the Gateway API conformance tests.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.2.0/gloo-gateway/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nSKIP_DOCKER=true CONFORMANCE=true ci/kind/setup-kind.sh\n```\n\n----------------------------------------\n\nTITLE: Creating Kind Cluster for Envoy Gateway\nDESCRIPTION: Creates a new Kubernetes cluster using kind for testing purposes\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/hack/implementations/envoy-gateway/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n../common/create-cluster.sh\n```\n\n----------------------------------------\n\nTITLE: ConformanceReport for Previous Release in YAML\nDESCRIPTION: This YAML snippet shows a ConformanceReport for a previous release of an implementation. It demonstrates how to report partial support and skipped tests.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1709/index.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1alpha1\nkind: ConformanceReport\nimplementation:\n  organization: acme\n  project: operator\n  url: https://acme.com\n  contact:\n  - @acme/maintainers\n  version: v0.9.0\ndate: \"2023-02-28 20:29:41+00:00\"\ngatewayAPIVersion: v0.8.0\ngatewayAPIChannel: standard\nmode: default\nprofiles:\n- name: http\n  core:\n    result: success\n    summary: \"some core functionality passed\"\n    statistics:\n      passed: 18\n      skipped: 2\n      failed: 0\n    skippedTests:\n    - CoreTest8\n    - CoreTest15\n  extended:\n    result: success\n    summary: \"some extended features supported\"\n    statistics:\n      passed: 8\n      skipped: 0\n      failed: 0\n    supportedFeatures:\n    - ExtendedFeature1\n    - ExtendedFeature2\n    unsupportedFeatures:\n    - ExtendedFeature3\n    - ExtendedFeature4\n    - ExtendedFeature5\n```\n\n----------------------------------------\n\nTITLE: Deploying Gloo Gateway Using Helm\nDESCRIPTION: Helm command to install or upgrade Gloo Gateway in the KinD cluster. This installs the specific version being tested with Kubernetes Gateway API enabled.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.2.0/gloo-gateway/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nhelm upgrade -i --create-namespace -n gloo-system gloo gloo/gloo --version $VERSION --set kubeGateway.enabled=true\n```\n\n----------------------------------------\n\nTITLE: ListenerSet Feature URL Reference\nDESCRIPTION: Reference to the existing Gateway merge functionality in the Gateway API codebase, showing the current spec language about Gateway merging capabilities.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1713/index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://github.com/kubernetes-sigs/gateway-api/blob/541e9fc2b3c2f62915cb58dc0ee5e43e4096b3e2/apis/v1beta1/gateway_types.go#L76-L78\n```\n\n----------------------------------------\n\nTITLE: Google Calendar Embed HTML\nDESCRIPTION: HTML iframe code for embedding the SIG Network calendar that shows Gateway API meetings schedule.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/contributing/index.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe\n  src=\"https://calendar.google.com/calendar/embed?src=88fe1l3qfn2b6r11k8um5am76c%40group.calendar.google.com\"\n  style=\"border: 0\" width=\"800\" height=\"600\" frameborder=\"0\"\n  scrolling=\"no\">\n</iframe>\n```\n\n----------------------------------------\n\nTITLE: Cloning Kong Gateway Operator Repository\nDESCRIPTION: Command to clone the Kong Gateway Operator repository and navigate to the project directory.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.2.0/kong-gateway-operator/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/Kong/gateway-operator.git && cd gateway-operator\n```\n\n----------------------------------------\n\nTITLE: Future Extension: RegEx-based Path Rewrite YAML Example\nDESCRIPTION: Example YAML configuration for a potential future extension that would support regular expression-based path rewrites. This would rewrite requests from '/foo/bar/baz' to '/foo/other/baz'.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-726/index.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nfilters:\n- type: RequestRewrite\n  requestRewrite:\n    path:\n      type: RegularExpression\n      pattern: /foo/(.*)/baz\n      substitution: other\n```\n\n----------------------------------------\n\nTITLE: Patching CRD Storage Versions\nDESCRIPTION: Commands to update the storedVersions field in the CRD status to remove v1alpha2 version after migration.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/CHANGELOG/1.2-CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl patch customresourcedefinitions referencegrants.gateway.networking.k8s.io --subresource='status' --type='merge' -p '{\"status\":{\"storedVersions\":[\"v1beta1\"]}}'\nkubectl patch customresourcedefinitions grpcroutes.gateway.networking.k8s.io --subresource='status' --type='merge' -p '{\"status\":{\"storedVersions\":[\"v1\"]}}'\n```\n\n----------------------------------------\n\nTITLE: Listing Policy CRDs with Wide Output\nDESCRIPTION: Example output of gwctl get policycrds command showing policy CRD types, scopes and counts.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-2722/index.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nNAME                               POLICY TYPE  SCOPE       POLICIES COUNT  AGE\nhealthcheckpolicies.foo.com        Direct       Namespaced  1               5d\nretryonpolicies.foo.com            Direct       Namespaced  2               4d\ntimeoutpolicies.bar.com            Inherited    Cluster     1               10m\ntlsminimumversionpolicies.baz.com  Direct       Namespaced  3               45s\n```\n\n----------------------------------------\n\nTITLE: Checking Out a Specific Version\nDESCRIPTION: Commands to set the desired version as an environment variable and check out that version in the repository.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.0.0/kong-kubernetes-ingress-controller/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport VERSION=v<x.y.z>\ngit checkout $VERSION\n```\n\n----------------------------------------\n\nTITLE: Creating Simple Flowchart using Mermaid\nDESCRIPTION: A basic Mermaid flowchart diagram demonstrating the recommended diagramming approach for Gateway API documentation. This example shows a simple flow from Start to Stop.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/contributing/style-guide.md#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    Start --> Stop\n```\n\n----------------------------------------\n\nTITLE: HTML Comment Template for Custom Content\nDESCRIPTION: HTML comment block showing where to add custom contribution guidelines specific to the repository\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!---\nIf your repo has certain guidelines for contribution, put them here ahead of the general k8s resources\n-->\n```\n\n----------------------------------------\n\nTITLE: Checking Out Specific Kong Ingress Controller Version\nDESCRIPTION: Commands to set a version environment variable and check out that specific version of the Kong Kubernetes Ingress Controller.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.2.0/kong-kubernetes-ingress-controller/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport VERSION=v<x.y.z>\ngit checkout $VERSION\n```\n\n----------------------------------------\n\nTITLE: Apache 2.0 License Header Declaration\nDESCRIPTION: Standard copyright and Apache 2.0 license notice for Kubernetes Gateway API project. Specifies terms of use, distribution, and modification of the codebase.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/hack/boilerplate/boilerplate.generatego.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n/*\nCopyright The Kubernetes Authors.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n```\n\n----------------------------------------\n\nTITLE: HTML Comment Template for Contact Information\nDESCRIPTION: HTML comment block providing a template for adding custom contact information including Slack channel and mailing list details\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!---\nCustom Information - if you're copying this template for the first time you can add custom content here, for example:\n\n## Contact Information\n\n- [Slack channel](https://kubernetes.slack.com/messages/kubernetes-users) - Replace `kubernetes-users` with your slack channel string, this will send users directly to your channel. \n- [Mailing list](URL)\n\n-->\n```\n\n----------------------------------------\n\nTITLE: Linkerd ServiceProfile RetryBudget Configuration\nDESCRIPTION: Configuration parameters for Linkerd's ServiceProfile retry budget implementation. Includes retryRatio for specifying retry-to-original request ratio, minRetriesPerSecond for minimum retry rate, and ttl for request consideration window.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-3388/index.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nretryBudget:\n  retryRatio: 0.2 # Default 20%\n  minRetriesPerSecond: 10 # Default 10\n  ttl: 10s # Default 10s\n```\n\n----------------------------------------\n\nTITLE: Cloning the Kong Kubernetes Ingress Controller Repository\nDESCRIPTION: Command to clone the Kong Kubernetes Ingress Controller repository and navigate to the project directory. This is the first step in reproducing the conformance test results.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.1.0/kong-kubernetes-ingress-controller/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/Kong/kubernetes-ingress-controller.git && cd kubernetes-ingress-controller\n```\n\n----------------------------------------\n\nTITLE: Same Origin URL Examples\nDESCRIPTION: Examples of URLs that have the same origin based on matching scheme, host, and port.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1767/index.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n   http://example.com/\n   http://example.com:80/\n   http://example.com/path/file\n```\n\n----------------------------------------\n\nTITLE: Checking Out Specific Envoy Gateway Version\nDESCRIPTION: Commands to set a version environment variable and check out that specific version of Envoy Gateway.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.2.1/envoy-gateway/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport VERSION=v<x.y.z>\ngit checkout $VERSION\n```\n\n----------------------------------------\n\nTITLE: Checking Out a Specific Traefik Version with Shell\nDESCRIPTION: Command to check out a specific version of Traefik Proxy using git. Replace X.Y with the desired version number.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.2.0/traefik-traefik/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout vX.Y\n```\n\n----------------------------------------\n\nTITLE: Apache 2.0 License Header Declaration\nDESCRIPTION: Standard copyright header text that declares Apache License 2.0 terms for Kubernetes source files. The header includes placeholder for year and basic license terms with reference to full license text.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/hack/boilerplate/boilerplate.go.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/*\nCopyright YEAR The Kubernetes Authors.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n```\n\n----------------------------------------\n\nTITLE: Kong Gateway API Implementation Status Table\nDESCRIPTION: Markdown table showing Kong's Gateway API implementation status, including API channel, implementation version, mode and report link.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v0.7.1/kong-kubernetes-ingress-controller/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|API channel|Implementation version|Mode|Report|\n|-----------|----------------------|----|------|\n|x|[2.10.3](https://github.com/Kong/kubernetes-ingress-controller/releases/tag/v2.10.3)|x|[v2.10.3 report](./2.10.3-report.yaml)|\n```\n\n----------------------------------------\n\nTITLE: Cloning Envoy Gateway Repository\nDESCRIPTION: Command to clone the Envoy Gateway GitHub repository and change into the project directory.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.2.1/envoy-gateway/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/envoyproxy/gateway.git && cd gateway\n```\n\n----------------------------------------\n\nTITLE: Cloning NGINX Gateway Fabric Repository for Testing\nDESCRIPTION: This command clones the NGINX Gateway Fabric repository and changes to the tests directory. It's the first step in reproducing the conformance test results.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.1.0/nginx-nginx-gateway-fabric/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/nginx/nginx-gateway-fabric.git && cd nginx-gateway-fabric/tests\n```\n\n----------------------------------------\n\nTITLE: Defining HTTPRoute for foo.example.com in YAML\nDESCRIPTION: This YAML snippet defines an HTTPRoute resource for the foo.example.com hostname. It attaches to the HTTPS listener of the Gateway and defines routing rules corresponding to the Ingress rules for this hostname.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/guides/migrating-from-ingress.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n{% include 'standard/simple-http-https/foo-route.yaml' %}\n```\n\n----------------------------------------\n\nTITLE: Cloning the Contour GitHub Repository\nDESCRIPTION: Command to clone the Projectcontour Contour repository from GitHub and change to its directory. This is the first step for setting up the environment for running Gateway API conformance tests.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v0.8.1/projectcontour-contour/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/projectcontour/contour && cd contour\n```\n\n----------------------------------------\n\nTITLE: Viewing Conformance Test Report\nDESCRIPTION: This command displays the contents of the conformance profile YAML file, which contains the results of the conformance tests run on NGINX Gateway Fabric.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.1.0/nginx-nginx-gateway-fabric/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncat conformance-profile.yaml\n```\n\n----------------------------------------\n\nTITLE: Viewing Test Report\nDESCRIPTION: Command to display the generated Gateway API conformance test report.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.0.0/projectcontour-contour/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncat gateway-conformance-report/projectcontour-contour-*.yaml\n```\n\n----------------------------------------\n\nTITLE: Cloning Contour Repository\nDESCRIPTION: Command to clone the Projectcontour Contour repository from GitHub and change into the project directory.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.0.0/projectcontour-contour/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/projectcontour/contour && cd contour\n```\n\n----------------------------------------\n\nTITLE: Apache 2.0 License Header for Dockerfile\nDESCRIPTION: This snippet contains the Apache 2.0 license header typically included at the beginning of source files in the Kubernetes project. It outlines the terms under which the software is distributed.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/hack/boilerplate/boilerplate.py.txt#2025-04-22_snippet_0\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# Copyright YEAR The Kubernetes Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Cloning Gloo Gateway Repository and Checking Out Release\nDESCRIPTION: Commands to clone the Gloo Gateway repository, navigate to the project directory, set the version, and checkout the specific release.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.1.0/gloo-gateway/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/solo-io/gloo.git\ncd gloo\nexport VERSION=\"v1.18.0-beta30\"\ngit checkout $VERSION\n```\n\n----------------------------------------\n\nTITLE: Cloning Contour Repository in Bash\nDESCRIPTION: Clone the Contour GitHub repository and navigate to the project directory.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.1.0/projectcontour-contour/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/projectcontour/contour && cd contour\n```\n\n----------------------------------------\n\nTITLE: Defining Apache License 2.0 Header for Kubernetes Gateway API\nDESCRIPTION: This snippet contains the full text of the Apache License 2.0 header used in the Kubernetes Gateway API project. It includes the copyright notice, license terms, and conditions for use, reproduction, and distribution of the software.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/hack/boilerplate/boilerplate.sh.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# Copyright YEAR The Kubernetes Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Markdown Blog Index Structure\nDESCRIPTION: Markdown formatted blog index page listing Gateway API announcements in reverse chronological order with metadata like dates and read times.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/blog/index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Blog\n\n## [Gateway API: Introducing Service Mesh Support!]\n\n<small style=\"position:relative; top:-10px;\">\n  :octicons-calendar-24: August 29, 2023 ·\n  :octicons-clock-24: 5 min read\n</small>\n\n## [Gateway API Graduates to Beta]\n\n<small style=\"position:relative; top:-10px;\">\n  :octicons-calendar-24: July 13, 2022 ·\n  :octicons-clock-24: 5 min read\n</small>\n\n## [Introducing Gateway API v1alpha2]\n\n<small style=\"position:relative; top:-10px;\">\n  :octicons-calendar-24: October 14, 2021 ·\n  :octicons-clock-24: 5 min read\n</small>\n```\n\n----------------------------------------\n\nTITLE: Identifying Non-Enhancement Tasks in Gateway API Project\nDESCRIPTION: This snippet outlines tasks that are typically not considered enhancements in the Gateway API project. These include bug fixes, additional testing, and code refactors.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/site-src/contributing/enhancement-requests.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nIt is unlikely to require an enhancement if it:\n\n- Fixes a bug\n- Adds more testing\n- Code refactors\n```\n\n----------------------------------------\n\nTITLE: API Implementation Version Table\nDESCRIPTION: A markdown table showing the API channel, implementation version, mode, and report link for Airlock Microgateway v4.5.0\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.2.0/airlock-microgateway/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| API channel | Implementation version                                               | Mode    | Report                                       |\n|-------------|----------------------------------------------------------------------|---------|----------------------------------------------|\n| standard    | [v4.5.0](https://github.com/airlock/microgateway/releases/tag/4.5.0) | default | [link](./standard-4.5.0-default-report.yaml) |\n```\n\n----------------------------------------\n\nTITLE: Session Naming Collision Configuration with BackendLBPolicy\nDESCRIPTION: YAML configuration demonstrating an invalid setup where two services have cookie-based session persistence with the same sessionName, which can lead to implementation-specific behavior such as configuration rejection or non-deterministic cookie handling.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1619/index.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nkind: HTTPRoute\nmetadata:\n  name: split-route\nspec:\n  rules:\n  - backendRefs:\n    - name: servicev1\n      weight: 50\n    - name: servicev2\n      weight: 50\n---\nkind: BackendLBPolicy\nmetadata:\n  name: lbp-split-route\nspec:\n  targetRef:\n    kind: Service\n    Name: servicev1\n  sessionPersistence:\n    sessionName: split-route-cookie\n    type: Cookie\n---\nkind: BackendLBPolicy\nmetadata:\n  name: lbp-split-route2\nspec:\n  targetRef:\n    kind: Service\n    Name: servicev2\n  sessionPersistence:\n    sessionName: split-route-cookie\n    type: Cookie\n```\n\n----------------------------------------\n\nTITLE: Defining Strongly-Typed Cookie Configuration in Go\nDESCRIPTION: Implements a strongly-typed approach to cookie configuration with explicit fields for common attributes and a separate list for boolean flags.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1619/index.md#2025-04-22_snippet_14\n\nLANGUAGE: go\nCODE:\n```\ntype HttpCookie struct {\n    // Name defines the cookie's name.\n    //\n    // +kubebuilder:validation:MaxLength=4096\n    Name String `json:\"name,omitempty\"`\n\n    // SameSite defines the cookie's SameSite attribute.\n    //\n    // +optional\n    // +kubebuilder:validation:Enum=Strict;Lax;None\n    SameSite SameSiteType `json:\"sameSite,omitempty\"`\n    // Domain defines the cookie's Domain attribute.\n    //\n    // +optional\n    // +kubebuilder:validation:MaxLength=4096\n    Domain String `json:\"domain,omitempty\"`\n\n    // CookieKeywords defines the cookie's attributes that have no value.\n    //\n    // +optional\n    CookieKeywords []CookieKeyword `json:cookieKeywords`\n}\n\ntype CookieKeyword string\n\nconst (\n    // CookieKeywordsHttpOnly specifies the HttpOnly cookie attribute.\n    CookieKeywordsHttpOnly HttpOnlyMode = \"HttpOnly\"\n    // CookieKeywordsSecure specifies the Secure cookie attribute.\n    CookieKeywordsSecure HttpOnlyMode = \"Secure\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Path Redirects in Kubernetes Gateway API YAML\nDESCRIPTION: Example YAML configuration for an HTTPRoute with a RequestRedirect filter that uses path redirection. This example demonstrates redirecting requests from '/foo/abc' to '/bar/abc'.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-726/index.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nkind: HTTPRoute\napiVersion: gateway.networking.k8s.io/v1alpha2\nmetadata:\n  name: http-filter-1\nspec:\n  rules:\n    - matches:\n      - path:\n          type: Prefix\n          value: /foo\n      filters:\n      - type: RequestRedirect\n        requestRedirect:\n          hostname: foo.com\n          path:\n            type: ReplacePrefixMatch\n            value: /bar\n```\n\n----------------------------------------\n\nTITLE: Defining MaxAge Field for CORS in Go\nDESCRIPTION: Defines the MaxAge field for CORS configuration in Gateway API. This field indicates the duration (in seconds) for the client to cache the results of a 'preflight' request. It has a default value of 5 seconds and must be at least 1 second.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1767/index.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\n// +optional\n// +kubebuilder:default=5\n// +kubebuilder:validation:Minimum=1\nMaxAge int32 `json:\"maxAge,omitempty\"`\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Service with Dynamic Selector\nDESCRIPTION: YAML configuration for a Kubernetes Service with a selector that can be dynamically updated. This demonstrates a case where gateways should maintain existing persistent sessions even if the pod is no longer selected after a selector update.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/geps/gep-1619/index.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Service\nmetadata:\n  name: my-service\nspec:\n  selector:\n    app.kubernetes.io/name: MyApp # Service selector can change\n```\n\n----------------------------------------\n\nTITLE: Checking Out Specific Version in Bash\nDESCRIPTION: These commands set an environment variable for the desired version and checkout that version in the Git repository.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.2.0/envoy-gateway/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport VERSION=v<x.y.z>\ngit checkout $VERSION\n```\n\n----------------------------------------\n\nTITLE: Cloning Traefik Proxy Repository for Gateway API Conformance Testing\nDESCRIPTION: Instructions for cloning the Traefik Proxy repository to reproduce Gateway API conformance test results. This is the first step in the test reproduction process.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.2.1/traefik-traefik/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/traefik/traefik.git && cd traefik\n```\n\n----------------------------------------\n\nTITLE: Viewing Gateway Conformance Test Report for Contour in Bash\nDESCRIPTION: Display the contents of the generated conformance test report file.\nSOURCE: https://github.com/kubernetes-sigs/gateway-api/blob/main/conformance/reports/v1.1.0/projectcontour-contour/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncat gateway-conformance-report/projectcontour-contour-*.yaml\n```"
  }
]