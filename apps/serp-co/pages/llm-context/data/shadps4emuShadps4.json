[
  {
    "owner": "shadps4-emu",
    "repo": "shadps4",
    "content": "TITLE: Demonstrating C++ Coding Style for shadPS4 Emulator Project\nDESCRIPTION: This code snippet illustrates the preferred coding style for the shadPS4 Emulator Project. It covers includes ordering, namespace usage, global variables, enums, structs, templates, and various C++ constructs with proper formatting and commenting.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n// Includes should be sorted lexicographically\n// STD includes first\n#include <array>\n#include <map>\n#include <memory>\n\n// then, library includes\n#include <nihstro/shared_binary.h>\n\n// finally, shadps4 includes\n#include \"common/math_util.h\"\n#include \"common/vector_math.h\"\n\n// each major module is separated\n#include \"video_core/pica.h\"\n#include \"video_core/video_core.h\"\n\nnamespace Example {\n\n// Namespace contents are not indented\n\n// Declare globals at the top (better yet, don't use globals at all!)\nint g_foo{}; // {} can be used to initialize types as 0, false, or nullptr\nchar* g_some_pointer{}; // Pointer * and reference & stick to the type name, and make sure to initialize as nullptr!\n\n/// A colorful enum.\nenum class SomeEnum {\n    Red,   ///< The color of fire.\n    Green, ///< The color of grass.\n    Blue,  ///< Not actually the color of water.\n};\n\n/**\n * Very important struct that does a lot of stuff.\n * Note that the asterisks are indented by one space to align to the first line.\n */\nstruct Position {\n    // Always initialize member variables!\n    int x{};\n    int y{};\n};\n\n// Use \"typename\" rather than \"class\" here\ntemplate <typename T>\nvoid FooBar() {\n    const std::string some_string{\"prefer uniform initialization\"};\n\n    const std::array<int, 4> some_array{\n        5,\n        25,\n        7,\n        42,\n    };\n\n    if (note == the_space_after_the_if) {\n        CallAFunction();\n    } else {\n        // Use a space after the // when commenting\n    }\n\n    // Place a single space after the for loop semicolons, prefer pre-increment\n    for (int i = 0; i != 25; ++i) {\n        // This is how we write loops\n    }\n\n    DoStuff(this, function, call, takes, up, multiple,\n            lines, like, this);\n\n    if (this || condition_takes_up_multiple &&\n        lines && like && this || everything ||\n        alright || then) {\n\n        // Leave a blank space before the if block body if the condition was continued across\n        // several lines.\n    }\n\n    // No indentation for case labels\n    switch (var) {\n    case 1: {\n        const int case_var{var + 3};\n        DoSomething(case_var);\n        break;\n    }\n    case 3:\n        DoSomething(var);\n        return;\n    default:\n        // Yes, even break for the last case\n        break;\n    }\n}\n\n} // namespace Example\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for shadPS4 Emulator\nDESCRIPTION: Sets up the initial CMake configuration, including minimum version, C++ standard, and project name. It also configures platform-specific settings for Apple and Unix systems.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.24)\n\nset(CMAKE_CXX_STANDARD 23)\nset(CMAKE_CXX_STANDARD_REQUIRED True)\n\nif(APPLE)\n    list(APPEND ADDITIONAL_LANGUAGES OBJC)\n    # Starting with 15.4, Rosetta 2 has support for all the necessary instruction sets.\n    set(CMAKE_OSX_DEPLOYMENT_TARGET 15.4 CACHE STRING \"\")\nendif()\n\nif (NOT CMAKE_BUILD_TYPE)\n    set(CMAKE_BUILD_TYPE Release)\nendif()\n\nproject(shadPS4 CXX C ASM ${ADDITIONAL_LANGUAGES})\n\n# Forcing PIE makes sure that the base address is high enough so that it doesn't clash with the PS4 memory.\nif(UNIX AND NOT APPLE)\n    set(CMAKE_POSITION_INDEPENDENT_CODE TRUE)\n\n    # check PIE support at link time\n    include(CheckPIESupported)\n    check_pie_supported(OUTPUT_VARIABLE pie_check LANGUAGES C CXX)\n    if(NOT CMAKE_C_LINK_PIE_SUPPORTED OR NOT CMAKE_CXX_LINK_PIE_SUPPORTED)\n        message(WARNING \"PIE is not supported at link time: ${pie_check}\")\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring ShadPS4 Executable Target in CMake\nDESCRIPTION: This CMake snippet sets up the executable target for ShadPS4, including all necessary components and dependencies. It handles both Qt GUI and SDL versions of the emulator.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/CMakeLists.txt#2025-04-23_snippet_45\n\nLANGUAGE: CMake\nCODE:\n```\nif (ENABLE_QT_GUI)\n    qt_add_executable(shadps4\n        ${AUDIO_CORE}\n        ${IMGUI}\n        ${INPUT}\n        ${QT_GUI}\n        ${COMMON}\n        ${CORE}\n        ${SHADER_RECOMPILER}\n        ${VIDEO_CORE}\n        ${EMULATOR}\n        src/images/shadPS4.icns\n    )\nelse()\n    add_executable(shadps4\n        ${AUDIO_CORE}\n        ${IMGUI}\n        ${INPUT}\n        ${COMMON}\n        ${CORE}\n        ${SHADER_RECOMPILER}\n        ${VIDEO_CORE}\n        ${EMULATOR}\n        src/main.cpp\n        src/emulator.cpp\n        src/emulator.h\n        src/sdl_window.h\n        src/sdl_window.cpp\n    )\nendif()\n\ncreate_target_directory_groups(shadps4)\n\ntarget_link_libraries(shadps4 PRIVATE magic_enum::magic_enum fmt::fmt toml11::toml11 tsl::robin_map xbyak::xbyak Tracy::TracyClient RenderDoc::API FFmpeg::ffmpeg Dear_ImGui gcn half::half ZLIB::ZLIB PNG::PNG)\ntarget_link_libraries(shadps4 PRIVATE Boost::headers GPUOpen::VulkanMemoryAllocator LibAtrac9 sirit Vulkan::Headers xxHash::xxhash Zydis::Zydis glslang::glslang SDL3::SDL3 pugixml::pugixml stb::headers libusb::usb)\n\ntarget_compile_definitions(shadps4 PRIVATE IMGUI_USER_CONFIG=\"imgui/imgui_config.h\")\ntarget_compile_definitions(Dear_ImGui PRIVATE IMGUI_USER_CONFIG=\"${PROJECT_SOURCE_DIR}/src/imgui/imgui_config.h\")\n\nif (ENABLE_DISCORD_RPC)\n    target_compile_definitions(shadps4 PRIVATE ENABLE_DISCORD_RPC)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Core Source Files in CMake for ShadPS4\nDESCRIPTION: This CMake snippet defines a list of core source files for the ShadPS4 emulator, including various devices, file systems, loaders, and libraries.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/CMakeLists.txt#2025-04-23_snippet_36\n\nLANGUAGE: CMake\nCODE:\n```\nset(CORE src/core/aerolib/stubs.cpp\n         src/core/aerolib/stubs.h\n         src/core/aerolib/aerolib.cpp\n         src/core/aerolib/aerolib.h\n         src/core/address_space.cpp\n         src/core/address_space.h\n         src/core/devices/base_device.cpp\n         src/core/devices/base_device.h\n         src/core/devices/ioccom.h\n         src/core/devices/logger.cpp\n         src/core/devices/logger.h\n         src/core/devices/nop_device.h\n         src/core/devices/console_device.cpp\n         src/core/devices/console_device.h\n         src/core/devices/deci_tty6_device.cpp\n         src/core/devices/deci_tty6_device.h\n         src/core/devices/random_device.cpp\n         src/core/devices/random_device.h\n         src/core/devices/urandom_device.cpp\n         src/core/devices/urandom_device.h\n         src/core/devices/srandom_device.cpp\n         src/core/devices/srandom_device.h\n         src/core/file_format/pfs.h\n         src/core/file_format/psf.cpp\n         src/core/file_format/psf.h\n         src/core/file_format/playgo_chunk.cpp\n         src/core/file_format/playgo_chunk.h\n         src/core/file_format/trp.cpp\n         src/core/file_format/trp.h\n         src/core/file_sys/fs.cpp\n         src/core/file_sys/fs.h\n         src/core/loader/dwarf.cpp\n         src/core/loader/dwarf.h\n         src/core/loader/elf.cpp\n         src/core/loader/elf.h\n         src/core/loader/symbols_resolver.h\n         src/core/loader/symbols_resolver.cpp\n         src/core/libraries/libs.h\n         src/core/libraries/libs.cpp\n         ${AJM_LIB}\n         ${AVPLAYER_LIB}\n         ${AUDIO_LIB}\n         ${GNM_LIB}\n         ${KERNEL_LIB}\n         ${NETWORK_LIBS}\n         ${SYSTEM_LIBS}\n         ${HLE_LIBC_INTERNAL_LIB}\n         ${PAD_LIB}\n         ${VIDEOOUT_LIB}\n         ${NP_LIBS}\n         ${PNG_LIB}\n         ${JPEG_LIB}\n         ${PLAYGO_LIB}\n         ${RANDOM_LIB}\n         ${USBD_LIB}\n         ${ZLIB_LIB}\n         ${MISC_LIBS}\n         ${IME_LIB}\n         ${FIBER_LIB}\n         ${VDEC_LIB}\n         ${VR_LIBS}\n         ${DEV_TOOLS}\n         src/core/debug_state.cpp\n         src/core/debug_state.h\n         src/core/linker.cpp\n         src/core/linker.h\n         src/core/memory.cpp\n         src/core/memory.h\n         src/core/module.cpp\n         src/core/module.h\n         src/core/platform.h\n         src/core/signals.cpp\n         src/core/signals.h\n         src/core/thread.cpp\n         src/core/thread.h\n         src/core/tls.cpp\n         src/core/tls.h\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for shadPS4 Emulator\nDESCRIPTION: Sets up and finds various external dependencies required for the shadPS4 emulator project. It includes libraries for graphics, audio, compression, and other utilities necessary for emulation.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/cmake\")\nfind_package(Boost 1.84.0 CONFIG)\nfind_package(FFmpeg 5.1.2 MODULE)\nfind_package(fmt 10.2.0 CONFIG)\nfind_package(glslang 15 CONFIG)\nfind_package(half 1.12.0 MODULE)\nfind_package(magic_enum 0.9.7 CONFIG)\nfind_package(PNG 1.6 MODULE)\nfind_package(RenderDoc 1.6.0 MODULE)\nfind_package(SDL3 3.1.2 CONFIG)\nfind_package(stb MODULE)\nfind_package(toml11 4.2.0 CONFIG)\nfind_package(tsl-robin-map 1.3.0 CONFIG)\nfind_package(VulkanHeaders 1.4.309 CONFIG)\nfind_package(VulkanMemoryAllocator 3.1.0 CONFIG)\nfind_package(xbyak 7.07 CONFIG)\nfind_package(xxHash 0.8.2 MODULE)\nfind_package(ZLIB 1.3 MODULE)\nfind_package(Zydis 5.0.0 CONFIG)\nfind_package(pugixml 1.14 CONFIG)\nfind_package(libusb 1.0.27 MODULE)\nif (APPLE)\n    find_package(date 3.0.1 CONFIG)\nendif()\nlist(POP_BACK CMAKE_MODULE_PATH)\n```\n\n----------------------------------------\n\nTITLE: Adding External Libraries in CMake for shadPS4 Emulator\nDESCRIPTION: Configures and adds various external libraries as dependencies, including Boost, fmtlib, FFmpeg, LibAtrac9, zlib, SDL3, Vulkan, and others. Each library is added conditionally if it hasn't been already included.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/externals/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT TARGET Boost::headers)\n    add_subdirectory(ext-boost)\nendif()\n\nif (NOT TARGET fmt::fmt)\n    add_subdirectory(fmt)\nendif()\n\nif (NOT TARGET FFmpeg::ffmpeg)\n    add_subdirectory(ffmpeg-core)\n    add_library(FFmpeg::ffmpeg ALIAS ffmpeg)\nendif()\n\nfile(GLOB LIBATRAC9_SOURCES LibAtrac9/C/src/*.c)\nadd_library(LibAtrac9 STATIC ${LIBATRAC9_SOURCES})\ntarget_include_directories(LibAtrac9 INTERFACE LibAtrac9/C/src)\n\nif (NOT TARGET ZLIB::ZLIB)\n    set(ZLIB_ENABLE_TESTS OFF)\n    set(WITH_GTEST OFF)\n    set(WITH_NEW_STRATEGIES ON)\n    set(WITH_NATIVE_INSTRUCTIONS ON)\n    set(ZLIB_COMPAT ON CACHE BOOL \"\" FORCE)\n    include(FetchContent)\n    FetchContent_Declare(\n        ZLIB\n        SOURCE_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/zlib-ng\"\n        OVERRIDE_FIND_PACKAGE\n    )\n    FetchContent_MakeAvailable(ZLIB)\n    add_library(ZLIB::ZLIB ALIAS zlib)\n    set(ZLIB_INCLUDE_DIRS \"${FETCHCONTENT_BASE_DIR}/zlib-build\")\nendif()\n\nif (NOT TARGET SDL3::SDL3)\n    set(SDL_TEST_LIBRARY OFF)\n    set(SDL_PIPEWIRE OFF)\n    add_subdirectory(sdl3)\nendif()\n\nif (NOT TARGET Vulkan::Headers)\n    set(VULKAN_HEADERS_ENABLE_MODULE OFF)\n    add_subdirectory(vulkan-headers)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Qt GUI Configuration for ShadPS4 Emulator in CMake\nDESCRIPTION: This CMake snippet conditionally sets up the Qt GUI components for the ShadPS4 emulator, including resource files, updater, and various UI elements.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/CMakeLists.txt#2025-04-23_snippet_44\n\nLANGUAGE: CMake\nCODE:\n```\nif(ENABLE_QT_GUI)\nqt_add_resources(RESOURCE_FILES src/shadps4.qrc)\n\nif (ENABLE_UPDATER)\n    set(UPDATER src/qt_gui/check_update.cpp\n                src/qt_gui/check_update.h\n    )\nendif()\n\nset(QT_GUI src/qt_gui/about_dialog.cpp\n           src/qt_gui/about_dialog.h\n           src/qt_gui/about_dialog.ui\n           src/qt_gui/background_music_player.cpp\n           src/qt_gui/background_music_player.h\n           src/qt_gui/cheats_patches.cpp\n           src/qt_gui/cheats_patches.h\n           src/qt_gui/compatibility_info.cpp\n           src/qt_gui/compatibility_info.h\n\t   src/qt_gui/control_settings.cpp\t   \n           src/qt_gui/control_settings.h\n           src/qt_gui/control_settings.ui\n           src/qt_gui/kbm_gui.cpp\t   \n           src/qt_gui/kbm_gui.h\n           src/qt_gui/kbm_gui.ui\n           src/qt_gui/main_window_ui.h\n           src/qt_gui/main_window.cpp\n           src/qt_gui/main_window.h\n           src/qt_gui/gui_context_menus.h\n           src/qt_gui/game_list_utils.h\n           src/qt_gui/game_info.cpp\n           src/qt_gui/game_info.h\n           src/qt_gui/game_list_frame.cpp\n           src/qt_gui/game_list_frame.h\n           src/qt_gui/game_grid_frame.cpp\n           src/qt_gui/game_grid_frame.h\n           src/qt_gui/game_install_dialog.cpp\n           src/qt_gui/game_install_dialog.h\n           src/qt_gui/trophy_viewer.cpp\n           src/qt_gui/trophy_viewer.h\n           src/qt_gui/elf_viewer.cpp\n           src/qt_gui/elf_viewer.h\n           src/qt_gui/kbm_config_dialog.cpp\n           src/qt_gui/kbm_config_dialog.h\n           src/qt_gui/kbm_help_dialog.cpp\n           src/qt_gui/kbm_help_dialog.h\n           src/qt_gui/main_window_themes.cpp\n           src/qt_gui/main_window_themes.h\n           src/qt_gui/settings_dialog.cpp\n           src/qt_gui/settings_dialog.h\n           src/qt_gui/settings_dialog.ui\n           src/qt_gui/main.cpp\n           ${EMULATOR}\n           ${RESOURCE_FILES}\n           ${TRANSLATIONS}\n           ${UPDATER}\n)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Common Utilities in CMake\nDESCRIPTION: This CMake snippet defines a variable COMMON containing the source files for common utility functions and classes. It includes implementations for logging, configuration management, file I/O, threading, and various helper classes and functions.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/CMakeLists.txt#2025-04-23_snippet_33\n\nLANGUAGE: CMake\nCODE:\n```\nset(COMMON src/common/logging/backend.cpp\n           src/common/logging/backend.h\n           src/common/logging/filter.cpp\n           src/common/logging/filter.h\n           src/common/logging/formatter.h\n           src/common/logging/log_entry.h\n           src/common/logging/log.h\n           src/common/logging/text_formatter.cpp\n           src/common/logging/text_formatter.h\n           src/common/logging/types.h\n           src/common/aes.h\n           src/common/alignment.h\n           src/common/arch.h\n           src/common/assert.cpp\n           src/common/assert.h\n           src/common/bit_field.h\n           src/common/bounded_threadsafe_queue.h\n           src/common/concepts.h\n           src/common/config.cpp\n           src/common/config.h\n           src/common/cstring.h\n           src/common/debug.h\n           src/common/decoder.cpp\n           src/common/decoder.h\n           src/common/elf_info.h\n           src/common/endian.h\n           src/common/enum.h\n           src/common/io_file.cpp\n           src/common/io_file.h\n           src/common/error.cpp\n           src/common/error.h\n           src/common/scope_exit.h\n           src/common/fixed_value.h\n           src/common/func_traits.h\n           src/common/native_clock.cpp\n           src/common/native_clock.h\n           src/common/path_util.cpp\n           src/common/path_util.h\n           src/common/object_pool.h\n           src/common/polyfill_thread.h\n           src/common/rdtsc.cpp\n           src/common/rdtsc.h\n           src/common/sha1.h\n           src/common/signal_context.h\n           src/common/signal_context.cpp\n           src/common/singleton.h\n           src/common/slab_heap.h\n           src/common/slot_vector.h\n           src/common/spin_lock.cpp\n           src/common/spin_lock.h\n           src/common/stb.cpp\n           src/common/stb.h\n           src/common/string_literal.h\n           src/common/string_util.cpp\n           src/common/string_util.h\n           src/common/thread.cpp\n           src/common/thread.h\n           src/common/types.h\n           src/common/uint128.h\n           src/common/unique_function.h\n           src/common/va_ctx.h\n           src/common/ntapi.h\n           src/common/ntapi.cpp\n\n\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Qt GUI Build in Visual Studio\nDESCRIPTION: CMake command arguments to enable Qt GUI support and set the Qt installation path when building with Visual Studio.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/documents/building-windows.md#2025-04-23_snippet_1\n\nLANGUAGE: batch\nCODE:\n```\n-DENABLE_QT_GUI=ON -DCMAKE_PREFIX_PATH=C:\\Qt\\6.8.2\\msvc2022_64\n```\n\n----------------------------------------\n\nTITLE: Configuring Core Emulator Components for ShadPS4 in CMake\nDESCRIPTION: This CMake snippet defines the core emulator components for ShadPS4, including the main emulator class and SDL window implementation.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/CMakeLists.txt#2025-04-23_snippet_43\n\nLANGUAGE: CMake\nCODE:\n```\nset(EMULATOR src/emulator.cpp\n             src/emulator.h\n             src/sdl_window.h\n             src/sdl_window.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Cloning shadPS4 Repository\nDESCRIPTION: Commands to clone the shadPS4 repository and its submodules, and change to the project directory.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/documents/building-linux.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --recursive https://github.com/shadps4-emu/shadPS4.git\ncd shadPS4\n```\n\n----------------------------------------\n\nTITLE: Defining Project Structure for ShadPS4 Emulator in CMake\nDESCRIPTION: This CMake snippet defines the file structure for various components of the ShadPS4 emulator, including video core, buffer cache, texture cache, and renderer implementations.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/CMakeLists.txt#2025-04-23_snippet_40\n\nLANGUAGE: CMake\nCODE:\n```\nProject: /shadps4-emu/shadps4\nContent:\n               src/video_core/amdgpu/types.h\n               src/video_core/amdgpu/default_context.cpp\n               src/video_core/buffer_cache/buffer.cpp\n               src/video_core/buffer_cache/buffer.h\n               src/video_core/buffer_cache/buffer_cache.cpp\n               src/video_core/buffer_cache/buffer_cache.h\n               src/video_core/buffer_cache/memory_tracker_base.h\n               src/video_core/buffer_cache/range_set.h\n               src/video_core/buffer_cache/word_manager.h\n               src/video_core/renderer_vulkan/liverpool_to_vk.cpp\n               src/video_core/renderer_vulkan/liverpool_to_vk.h\n               src/video_core/renderer_vulkan/vk_common.cpp\n               src/video_core/renderer_vulkan/vk_common.h\n               src/video_core/renderer_vulkan/vk_compute_pipeline.cpp\n               src/video_core/renderer_vulkan/vk_compute_pipeline.h\n               src/video_core/renderer_vulkan/vk_graphics_pipeline.cpp\n               src/video_core/renderer_vulkan/vk_graphics_pipeline.h\n               src/video_core/renderer_vulkan/vk_instance.cpp\n               src/video_core/renderer_vulkan/vk_instance.h\n               src/video_core/renderer_vulkan/vk_master_semaphore.cpp\n               src/video_core/renderer_vulkan/vk_master_semaphore.h\n               src/video_core/renderer_vulkan/vk_pipeline_cache.cpp\n               src/video_core/renderer_vulkan/vk_pipeline_cache.h\n               src/video_core/renderer_vulkan/vk_pipeline_common.cpp\n               src/video_core/renderer_vulkan/vk_pipeline_common.h\n               src/video_core/renderer_vulkan/vk_platform.cpp\n               src/video_core/renderer_vulkan/vk_platform.h\n               src/video_core/renderer_vulkan/vk_presenter.cpp\n               src/video_core/renderer_vulkan/vk_presenter.h\n               src/video_core/renderer_vulkan/vk_rasterizer.cpp\n               src/video_core/renderer_vulkan/vk_rasterizer.h\n               src/video_core/renderer_vulkan/vk_resource_pool.cpp\n               src/video_core/renderer_vulkan/vk_resource_pool.h\n               src/video_core/renderer_vulkan/vk_scheduler.cpp\n               src/video_core/renderer_vulkan/vk_scheduler.h\n               src/video_core/renderer_vulkan/vk_shader_hle.cpp\n               src/video_core/renderer_vulkan/vk_shader_hle.h\n               src/video_core/renderer_vulkan/vk_shader_util.cpp\n               src/video_core/renderer_vulkan/vk_shader_util.h\n               src/video_core/renderer_vulkan/vk_swapchain.cpp\n               src/video_core/renderer_vulkan/vk_swapchain.h\n               src/video_core/renderer_vulkan/host_passes/fsr_pass.cpp\n               src/video_core/renderer_vulkan/host_passes/fsr_pass.h\n               src/video_core/renderer_vulkan/host_passes/pp_pass.cpp\n               src/video_core/renderer_vulkan/host_passes/pp_pass.h\n               src/video_core/texture_cache/image.cpp\n               src/video_core/texture_cache/image.h\n               src/video_core/texture_cache/image_info.cpp\n               src/video_core/texture_cache/image_info.h\n               src/video_core/texture_cache/image_view.cpp\n               src/video_core/texture_cache/image_view.h\n               src/video_core/texture_cache/sampler.cpp\n               src/video_core/texture_cache/sampler.h\n               src/video_core/texture_cache/texture_cache.cpp\n               src/video_core/texture_cache/texture_cache.h\n               src/video_core/texture_cache/tile_manager.cpp\n               src/video_core/texture_cache/tile_manager.h\n               src/video_core/texture_cache/types.h\n               src/video_core/texture_cache/host_compatibility.h\n               src/video_core/page_manager.cpp\n               src/video_core/page_manager.h\n               src/video_core/multi_level_page_table.h\n               src/video_core/renderdoc.cpp\n               src/video_core/renderdoc.h\n```\n\n----------------------------------------\n\nTITLE: Cloning shadPS4 Repository with Git\nDESCRIPTION: Command to clone the shadPS4 repository using Git, including submodules. The --depth 1 flag is used for a shallow clone to save space and time.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/documents/building-windows.md#2025-04-23_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\ngit clone --depth 1 --recursive https://github.com/shadps4-emu/shadPS4\n```\n\n----------------------------------------\n\nTITLE: Defining Video Core Source Files in CMake for ShadPS4\nDESCRIPTION: This CMake snippet defines a list of source files for the video core component of the ShadPS4 emulator, focusing on AMDGPU and Liverpool-specific implementations.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/CMakeLists.txt#2025-04-23_snippet_39\n\nLANGUAGE: CMake\nCODE:\n```\nset(VIDEO_CORE src/video_core/amdgpu/liverpool.cpp\n               src/video_core/amdgpu/liverpool.h\n               src/video_core/amdgpu/pixel_format.cpp\n               src/video_core/amdgpu/pixel_format.h\n               src/video_core/amdgpu/pm4_cmds.h\n               src/video_core/amdgpu/pm4_opcodes.h\n               src/video_core/amdgpu/resource.h\n```\n\n----------------------------------------\n\nTITLE: Installing Native Homebrew and Tools on macOS\nDESCRIPTION: This snippet installs the native Homebrew package manager, adds it to the PATH, and installs required development tools like clang-format and cmake.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/documents/building-macos.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Installs native Homebrew to /opt/homebrew\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n# Adds Homebrew to your path\necho 'eval $(/opt/homebrew/bin/brew shellenv)' >> ~/.zprofile\neval $(/opt/homebrew/bin/brew shellenv)\n# Installs tools.\nbrew install clang-format cmake\n```\n\n----------------------------------------\n\nTITLE: Generating Build Directory with CMake\nDESCRIPTION: Command to generate the build directory using CMake, enabling Qt GUI and specifying Clang as the compiler.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/documents/building-linux.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncmake -S . -B build/ -DENABLE_QT_GUI=ON -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Libraries in CMake for shadPS4 Emulator\nDESCRIPTION: Sets up and configures additional libraries such as VMA, RenderDoc, glslang, Robin-map, Xbyak, MagicEnum, Toml11, xxHash, Zydis, and others. Each library is added with specific configurations and compile options.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/externals/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT TARGET GPUOpen::VulkanMemoryAllocator)\n    add_subdirectory(vma)\nendif()\n\nif (NOT TARGET RenderDoc::API)\n    add_library(renderdoc INTERFACE)\n    target_include_directories(renderdoc INTERFACE ./renderdoc)\n    add_library(RenderDoc::API ALIAS renderdoc)\nendif()\n\nif (NOT TARGET glslang::glslang)\n    set(SKIP_GLSLANG_INSTALL ON CACHE BOOL \"\")\n    set(ENABLE_GLSLANG_BINARIES OFF CACHE BOOL \"\")\n    set(ENABLE_SPVREMAPPER OFF CACHE BOOL \"\")\n    set(ENABLE_CTEST OFF CACHE BOOL \"\")\n    set(ENABLE_HLSL OFF CACHE BOOL \"\")\n    set(BUILD_EXTERNAL OFF CACHE BOOL \"\")\n    set(ENABLE_OPT OFF CACHE BOOL \"\")\n    add_subdirectory(glslang)\n    file(COPY glslang/SPIRV DESTINATION glslang/glslang FILES_MATCHING PATTERN \"*.h\")\n    target_include_directories(glslang INTERFACE \"${CMAKE_CURRENT_BINARY_DIR}/glslang\")\nendif()\n\nif (NOT TARGET tsl::robin_map)\n    add_subdirectory(robin-map)\nendif()\n\nif (NOT TARGET xbyak::xbyak)\n    add_subdirectory(xbyak)\nendif()\n\nif (NOT TARGET magic_enum::magic_enum)\n    add_subdirectory(magic_enum)\nendif()\n\nif (NOT TARGET toml11::toml11)\n    add_subdirectory(toml11)\n\n    if (CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\")\n      if (CMAKE_CXX_COMPILER_FRONTEND_VARIANT STREQUAL \"MSVC\")\n        get_target_property(_toml11_compile_options toml11 INTERFACE_COMPILE_OPTIONS)\n        list(REMOVE_ITEM _toml11_compile_options \"/Zc:preprocessor\")\n        set_target_properties(toml11 PROPERTIES INTERFACE_COMPILE_OPTIONS ${_toml11_compile_options})\n      endif()\n    endif()\nendif()\n\nif (NOT TARGET xxHash::xxhash)\n    add_library(xxhash xxhash/xxhash.h xxhash/xxhash.c)\n    target_include_directories(xxhash PUBLIC xxhash)\n    add_library(xxHash::xxhash ALIAS xxhash)\nendif()\n\nif (NOT TARGET Zydis::Zydis)\n    option(ZYDIS_BUILD_TOOLS \"\" OFF)\n    option(ZYDIS_BUILD_EXAMPLES \"\" OFF)\n    add_subdirectory(zydis)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building shadPS4 Project\nDESCRIPTION: Command to build the shadPS4 project using CMake, utilizing parallel compilation for faster build times.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/documents/building-linux.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncmake --build ./build --parallel$(nproc)\n```\n\n----------------------------------------\n\nTITLE: Running shadPS4 Emulator\nDESCRIPTION: This snippet demonstrates how to run the compiled shadPS4 emulator, specifying the path to the game's eboot.bin file.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/documents/building-macos.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./shadps4 /\"PATH\"/\"TO\"/\"GAME\"/\"FOLDER\"/eboot.bin\n```\n\n----------------------------------------\n\nTITLE: Decompiling SPIR-V to GLSL using spirv-cross\nDESCRIPTION: Command to decompile a SPIR-V shader file to GLSL format using spirv-cross. This step allows for human-readable editing of shader code.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/documents/patching-shader.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nspirv-cross -V fs_0x000000.spv --output fs_0x000000.glsl\n```\n\n----------------------------------------\n\nTITLE: Defining Shader Recompiler Source Files in CMake for ShadPS4\nDESCRIPTION: This CMake snippet defines a list of source files for the shader recompiler component of the ShadPS4 emulator, including various backend and frontend files for shader translation and optimization.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/CMakeLists.txt#2025-04-23_snippet_38\n\nLANGUAGE: CMake\nCODE:\n```\nset(SHADER_RECOMPILER src/shader_recompiler/exception.h\n                      src/shader_recompiler/profile.h\n                      src/shader_recompiler/recompiler.cpp\n                      src/shader_recompiler/recompiler.h\n                      src/shader_recompiler/info.h\n                      src/shader_recompiler/params.h\n                      src/shader_recompiler/runtime_info.h\n                      src/shader_recompiler/specialization.h\n                      src/shader_recompiler/backend/bindings.h\n                      src/shader_recompiler/backend/spirv/emit_spirv.cpp\n                      src/shader_recompiler/backend/spirv/emit_spirv.h\n                      src/shader_recompiler/backend/spirv/emit_spirv_atomic.cpp\n                      src/shader_recompiler/backend/spirv/emit_spirv_barriers.cpp\n                      src/shader_recompiler/backend/spirv/emit_spirv_bitwise_conversion.cpp\n                      src/shader_recompiler/backend/spirv/emit_spirv_composite.cpp\n                      src/shader_recompiler/backend/spirv/emit_spirv_context_get_set.cpp\n                      src/shader_recompiler/backend/spirv/emit_spirv_convert.cpp\n                      src/shader_recompiler/backend/spirv/emit_spirv_floating_point.cpp\n                      src/shader_recompiler/backend/spirv/emit_spirv_image.cpp\n                      src/shader_recompiler/backend/spirv/emit_spirv_instructions.h\n                      src/shader_recompiler/backend/spirv/emit_spirv_integer.cpp\n                      src/shader_recompiler/backend/spirv/emit_spirv_logical.cpp\n                      src/shader_recompiler/backend/spirv/emit_spirv_quad_rect.cpp\n                      src/shader_recompiler/backend/spirv/emit_spirv_quad_rect.h\n                      src/shader_recompiler/backend/spirv/emit_spirv_select.cpp\n                      src/shader_recompiler/backend/spirv/emit_spirv_shared_memory.cpp\n                      src/shader_recompiler/backend/spirv/emit_spirv_special.cpp\n                      src/shader_recompiler/backend/spirv/emit_spirv_undefined.cpp\n                      src/shader_recompiler/backend/spirv/emit_spirv_warp.cpp\n                      src/shader_recompiler/backend/spirv/spirv_emit_context.cpp\n                      src/shader_recompiler/backend/spirv/spirv_emit_context.h\n                      src/shader_recompiler/frontend/translate/data_share.cpp\n                      src/shader_recompiler/frontend/translate/export.cpp\n                      src/shader_recompiler/frontend/translate/scalar_alu.cpp\n                      src/shader_recompiler/frontend/translate/scalar_flow.cpp\n                      src/shader_recompiler/frontend/translate/scalar_memory.cpp\n                      src/shader_recompiler/frontend/translate/translate.cpp\n                      src/shader_recompiler/frontend/translate/translate.h\n                      src/shader_recompiler/frontend/translate/vector_alu.cpp\n                      src/shader_recompiler/frontend/translate/vector_interpolation.cpp\n                      src/shader_recompiler/frontend/translate/vector_memory.cpp\n                      src/shader_recompiler/frontend/control_flow_graph.cpp\n                      src/shader_recompiler/frontend/control_flow_graph.h\n                      src/shader_recompiler/frontend/copy_shader.cpp\n                      src/shader_recompiler/frontend/copy_shader.h\n                      src/shader_recompiler/frontend/decode.cpp\n                      src/shader_recompiler/frontend/decode.h\n                      src/shader_recompiler/frontend/fetch_shader.cpp\n                      src/shader_recompiler/frontend/fetch_shader.h\n                      src/shader_recompiler/frontend/format.cpp\n                      src/shader_recompiler/frontend/instruction.cpp\n                      src/shader_recompiler/frontend/instruction.h\n                      src/shader_recompiler/frontend/opcodes.h\n                      src/shader_recompiler/frontend/structured_control_flow.cpp\n                      src/shader_recompiler/frontend/structured_control_flow.h\n                      src/shader_recompiler/ir/passes/constant_propagation_pass.cpp\n                      src/shader_recompiler/ir/passes/dead_code_elimination_pass.cpp\n                      src/shader_recompiler/ir/passes/flatten_extended_userdata_pass.cpp\n                      src/shader_recompiler/ir/passes/hull_shader_transform.cpp\n                      src/shader_recompiler/ir/passes/identity_removal_pass.cpp\n                      src/shader_recompiler/ir/passes/ir_passes.h\n                      src/shader_recompiler/ir/passes/lower_buffer_format_to_raw.cpp\n                      src/shader_recompiler/ir/passes/readlane_elimination_pass.cpp\n                      src/shader_recompiler/ir/passes/resource_tracking_pass.cpp\n                      src/shader_recompiler/ir/passes/ring_access_elimination.cpp\n                      src/shader_recompiler/ir/passes/shader_info_collection_pass.cpp\n                      src/shader_recompiler/ir/passes/shared_memory_barrier_pass.cpp\n                      src/shader_recompiler/ir/passes/shared_memory_to_storage_pass.cpp\n                      src/shader_recompiler/ir/passes/ssa_rewrite_pass.cpp\n                      src/shader_recompiler/ir/abstract_syntax_list.h\n                      src/shader_recompiler/ir/attribute.cpp\n                      src/shader_recompiler/ir/attribute.h\n                      src/shader_recompiler/ir/basic_block.cpp\n                      src/shader_recompiler/ir/basic_block.h\n                      src/shader_recompiler/ir/condition.h\n                      src/shader_recompiler/ir/ir_emitter.cpp\n                      src/shader_recompiler/ir/ir_emitter.h\n                      src/shader_recompiler/ir/microinstruction.cpp\n                      src/shader_recompiler/ir/opcodes.cpp\n                      src/shader_recompiler/ir/opcodes.h\n                      src/shader_recompiler/ir/opcodes.inc\n                      src/shader_recompiler/ir/patch.cpp\n                      src/shader_recompiler/ir/patch.h\n                      src/shader_recompiler/ir/post_order.cpp\n                      src/shader_recompiler/ir/post_order.h\n                      src/shader_recompiler/ir/program.cpp\n                      src/shader_recompiler/ir/program.h\n                      src/shader_recompiler/ir/reinterpret.h\n                      src/shader_recompiler/ir/reg.h\n                      src/shader_recompiler/ir/type.cpp\n                      src/shader_recompiler/ir/type.h\n                      src/shader_recompiler/ir/value.cpp\n                      src/shader_recompiler/ir/value.h\n)\n```\n\n----------------------------------------\n\nTITLE: Compiling GLSL to SPIR-V using glslc\nDESCRIPTION: Command to compile a GLSL shader file back to SPIR-V format using glslc. This step is necessary after editing the shader code. The command includes options for Vulkan version, SPIR-V version, and shader stage.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/documents/patching-shader.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nglslc --target-env=vulkan1.3 --target-spv=spv1.6 -fshader-stage=frag fs_0x000000.glsl -o fs_0x000000.spv\n```\n\n----------------------------------------\n\nTITLE: Defining Kernel Library Files in CMake\nDESCRIPTION: Sets up the Kernel library source files for the emulator, including synchronization primitives, thread management, process handling, and file systems.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/CMakeLists.txt#2025-04-23_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nset(KERNEL_LIB src/core/libraries/kernel/sync/mutex.cpp\n               src/core/libraries/kernel/sync/mutex.h\n               src/core/libraries/kernel/sync/semaphore.h\n               src/core/libraries/kernel/threads/condvar.cpp\n               src/core/libraries/kernel/threads/event_flag.cpp\n               src/core/libraries/kernel/threads/exception.cpp\n               src/core/libraries/kernel/threads/exception.h\n               src/core/libraries/kernel/threads/mutex.cpp\n               src/core/libraries/kernel/threads/pthread_attr.cpp\n               src/core/libraries/kernel/threads/pthread_clean.cpp\n               src/core/libraries/kernel/threads/pthread.cpp\n               src/core/libraries/kernel/threads/pthread_spec.cpp\n               src/core/libraries/kernel/threads/rwlock.cpp\n               src/core/libraries/kernel/threads/semaphore.cpp\n               src/core/libraries/kernel/threads/sleepq.cpp\n               src/core/libraries/kernel/threads/sleepq.h\n               src/core/libraries/kernel/threads/stack.cpp\n               src/core/libraries/kernel/threads/tcb.cpp\n               src/core/libraries/kernel/threads/pthread.h\n               src/core/libraries/kernel/threads/thread_state.cpp\n               src/core/libraries/kernel/threads/thread_state.h\n               src/core/libraries/kernel/process.cpp\n               src/core/libraries/kernel/process.h\n               src/core/libraries/kernel/debug.cpp\n               src/core/libraries/kernel/debug.h\n               src/core/libraries/kernel/equeue.cpp\n               src/core/libraries/kernel/equeue.h\n               src/core/libraries/kernel/file_system.cpp\n               src/core/libraries/kernel/file_system.h\n               src/core/libraries/kernel/kernel.cpp\n               src/core/libraries/kernel/kernel.h\n               src/core/libraries/kernel/memory.cpp\n               src/core/libraries/kernel/memory.h\n               src/core/libraries/kernel/threads.cpp\n               src/core/libraries/kernel/threads.h\n               src/core/libraries/kernel/time.cpp\n               src/core/libraries/kernel/time.h\n               src/core/libraries/kernel/orbis_error.h\n               src/core/libraries/kernel/posix_error.h\n               src/core/libraries/kernel/aio.cpp\n               src/core/libraries/kernel/aio.h\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Target Directory Groups Function in CMake\nDESCRIPTION: Defines a function to automatically generate file groups based on directory hierarchy, improving file organization in IDEs. It groups source files according to their directory structure.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(create_target_directory_groups target_name)\n\n    # Place any files that aren't in the source list in a separate group so that they don't get in the way.\n    source_group(\"Other Files\" REGULAR_EXPRESSION \".\")\n\n    get_target_property(target_sources \"${target_name}\" SOURCES)\n\n    foreach(file_name IN LISTS target_sources)\n        get_filename_component(dir_name \"${file_name}\" PATH)\n        # Group names use '\\' as a separator even though the entire rest of CMake uses '/'...\n        string(REPLACE \"/\" \"\\\\\" group_name \"${dir_name}\")\n        source_group(\"${group_name}\" FILES \"${file_name}\")\n    endforeach()\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Running shadPS4 Executable\nDESCRIPTION: Command to run the compiled shadPS4 executable from the build directory.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/documents/building-windows.md#2025-04-23_snippet_8\n\nLANGUAGE: batch\nCODE:\n```\n./build/shadPS4.exe\n```\n\n----------------------------------------\n\nTITLE: Configuring Architecture-Specific Settings for shadPS4\nDESCRIPTION: Determines the target architecture and sets appropriate compiler options. It supports x86_64 and arm64 architectures, with specific optimizations for x86_64 to match PS4 compatibility.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (APPLE AND CMAKE_OSX_ARCHITECTURES)\n    set(BASE_ARCHITECTURE \"${CMAKE_OSX_ARCHITECTURES}\")\nelseif (CMAKE_SYSTEM_PROCESSOR)\n    set(BASE_ARCHITECTURE \"${CMAKE_SYSTEM_PROCESSOR}\")\nelse()\n    set(BASE_ARCHITECTURE \"${CMAKE_HOST_SYSTEM_PROCESSOR}\")\nendif()\n\nif (BASE_ARCHITECTURE MATCHES \"(x86)|(X86)|(amd64)|(AMD64)\")\n    set(ARCHITECTURE \"x86_64\")\nelseif (BASE_ARCHITECTURE MATCHES \"(aarch64)|(AARCH64)|(arm64)|(ARM64)\")\n    set(ARCHITECTURE \"arm64\")\nelse()\n    message(FATAL_ERROR \"Unsupported CPU architecture: ${BASE_ARCHITECTURE}\")\nendif()\n\nif (ARCHITECTURE STREQUAL \"x86_64\")\n    # Target the same CPU architecture as the PS4, to maintain the same level of compatibility.\n    # Exclude SSE4a as it is only available on AMD CPUs.\n    add_compile_options(-march=btver2 -mtune=generic -mno-sse4a)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Audio Library Files in CMake\nDESCRIPTION: Sets up the Audio library source files including audio input/output components and NGS2 audio system for the emulator.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/CMakeLists.txt#2025-04-23_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nset(AUDIO_LIB src/core/libraries/audio/audioin.cpp\n              src/core/libraries/audio/audioin.h\n              src/core/libraries/audio/audioout.cpp\n              src/core/libraries/audio/audioout.h\n              src/core/libraries/audio/audioout_backend.h\n              src/core/libraries/audio/audioout_error.h\n              src/core/libraries/audio/sdl_audio.cpp\n              src/core/libraries/ngs2/ngs2.cpp\n              src/core/libraries/ngs2/ngs2.h\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Git Revision Information for shadPS4 Project\nDESCRIPTION: Retrieves and processes git information including revision, branch, and remote details. It handles various scenarios including GitHub Actions environment and different git configurations to set appropriate version information.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(\"${CMAKE_CURRENT_SOURCE_DIR}/externals/cmake-modules/GetGitRevisionDescription.cmake\")\nget_git_head_revision(GIT_REF_SPEC GIT_REV)\ngit_describe(GIT_DESC --always --long --dirty)\ngit_branch_name(GIT_BRANCH)\nstring(TIMESTAMP BUILD_DATE \"%Y-%m-%d %H:%M:%S\")\n\nmessage(\"start git things\")\n\n# Try to get the upstream remote and branch\nmessage(\"check for remote and branch\")\nexecute_process(\n  COMMAND git rev-parse --abbrev-ref --symbolic-full-name @{u}\n  OUTPUT_VARIABLE GIT_REMOTE_NAME\n  RESULT_VARIABLE GIT_REMOTE_RESULT\n  ERROR_QUIET\n  OUTPUT_STRIP_TRAILING_WHITESPACE\n)\n\n# If there's no upstream set or the command failed, check remote.pushDefault\nif (GIT_REMOTE_RESULT OR GIT_REMOTE_NAME STREQUAL \"\")\n  message(\"check default push\")\n  execute_process(\n    COMMAND git config --get remote.pushDefault\n    OUTPUT_VARIABLE GIT_REMOTE_NAME\n    RESULT_VARIABLE GIT_REMOTE_RESULT\n    ERROR_QUIET\n    OUTPUT_STRIP_TRAILING_WHITESPACE\n  )\nendif()\n\n# If running in GitHub Actions and the above fails\nif (GIT_REMOTE_RESULT OR GIT_REMOTE_NAME STREQUAL \"\")\n  message(\"check github\")\n  set(GIT_REMOTE_NAME \"origin\")\n\n  # Retrieve environment variables\n  if (DEFINED ENV{GITHUB_HEAD_REF} AND NOT \"$ENV{GITHUB_HEAD_REF}\" STREQUAL \"\")\n    message(\"github head ref: $ENV{GITHUB_HEAD_REF}\")\n    set(GITHUB_HEAD_REF \"$ENV{GITHUB_HEAD_REF}\")\n  else()\n    set(GITHUB_HEAD_REF \"\")\n  endif()\n\n  if (DEFINED ENV{GITHUB_REF} AND NOT \"$ENV{GITHUB_REF}\" STREQUAL \"\")\n    message(\"github ref: $ENV{GITHUB_REF}\")\n    string(REGEX REPLACE \"^refs/[^/]*/\" \"\" GITHUB_BRANCH \"$ENV{GITHUB_REF}\")\n    string(REGEX MATCH \"refs/pull/([0-9]+)/merge\" MATCHED_REF \"$ENV{GITHUB_REF}\")\n    if (MATCHED_REF)\n      set(PR_NUMBER \"${CMAKE_MATCH_1}\")\n      set(GITHUB_BRANCH \"\")\n      message(\"PR number: ${PR_NUMBER}\")\n    else()\n      set(PR_NUMBER \"\")\n    endif()\n  else()\n    set(GITHUB_BRANCH \"\")\n    set(PR_NUMBER \"\")\n  endif()\n\n  if (NOT \"${PR_NUMBER}\" STREQUAL \"\" AND NOT \"${GITHUB_HEAD_REF}\" STREQUAL \"\")\n    set(GIT_BRANCH \"pr-${PR_NUMBER}-${GITHUB_HEAD_REF}\")\n  elseif (NOT \"${PR_NUMBER}\" STREQUAL \"\" AND NOT \"${GITHUB_BRANCH}\" STREQUAL \"\")\n    set(GIT_BRANCH \"pr-${PR_NUMBER}-${GITHUB_BRANCH}\")\n  elseif (NOT \"${PR_NUMBER}\" STREQUAL \"\")\n    set(GIT_BRANCH \"pr-${PR_NUMBER}\")\n  elseif (\"${PR_NUMBER}\" STREQUAL \"\" AND NOT \"${GITHUB_HEAD_REF}\" STREQUAL \"\")\n    set(GIT_BRANCH \"${GITHUB_HEAD_REF}\")\n  elseif (\"${PR_NUMBER}\" STREQUAL \"\" AND NOT \"${GITHUB_BRANCH}\" STREQUAL \"\")\n    set(GIT_BRANCH \"${GITHUB_BRANCH}\")\n  elseif (\"${PR_NUMBER}\" STREQUAL \"\" AND NOT \"${GITHUB_REF}\" STREQUAL \"\")\n    set(GIT_BRANCH \"${GITHUB_REF}\")\n  else()\n    message(\"couldn't find branch\")\n    set(GIT_BRANCH \"detached-head\")\n  endif()\nelse()\n  # Extract remote name if the output contains a remote/branch format\n  string(FIND \"${GIT_REMOTE_NAME}\" \"/\" INDEX)\n  if (INDEX GREATER -1)\n    string(SUBSTRING \"${GIT_REMOTE_NAME}\" 0 \"${INDEX}\" GIT_REMOTE_NAME)\n  else()\n    # If no remote is present (only a branch name), default to origin\n    set(GIT_REMOTE_NAME \"origin\")\n  endif()\nendif()\n\n# Get remote link\nmessage(\"getting remote link\")\nexecute_process(\n  COMMAND git config --get remote.${GIT_REMOTE_NAME}.url\n  OUTPUT_VARIABLE GIT_REMOTE_URL\n  OUTPUT_STRIP_TRAILING_WHITESPACE\n)\n```\n\n----------------------------------------\n\nTITLE: Building shadPS4 Project\nDESCRIPTION: This snippet builds the shadPS4 project using CMake, utilizing parallel compilation based on the number of CPU cores available.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/documents/building-macos.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncmake --build . --parallel$(sysctl -n hw.ncpu)\n```\n\n----------------------------------------\n\nTITLE: Setting Version Information for shadPS4 Emulator\nDESCRIPTION: Configures version information for the shadPS4 emulator, including major, minor, and patch versions. It also sets up resource compilation definitions and generates a scm_rev.cpp file with build information.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n# Set Version\nset(EMULATOR_VERSION_MAJOR \"0\")\nset(EMULATOR_VERSION_MINOR \"8\")\nset(EMULATOR_VERSION_PATCH \"1\")\n\nset_source_files_properties(src/shadps4.rc PROPERTIES COMPILE_DEFINITIONS \"EMULATOR_VERSION_MAJOR=${EMULATOR_VERSION_MAJOR};EMULATOR_VERSION_MINOR=${EMULATOR_VERSION_MINOR};EMULATOR_VERSION_PATCH=${EMULATOR_VERSION_PATCH}\")\n\nset(APP_VERSION \"${EMULATOR_VERSION_MAJOR}.${EMULATOR_VERSION_MINOR}.${EMULATOR_VERSION_PATCH} WIP\")\nset(APP_IS_RELEASE false)\nconfigure_file(\"${CMAKE_CURRENT_SOURCE_DIR}/src/common/scm_rev.cpp.in\" \"${CMAKE_CURRENT_BINARY_DIR}/src/common/scm_rev.cpp\" @ONLY)\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Fedora\nDESCRIPTION: Command to install necessary dependencies for building shadPS4 on Fedora systems using dnf package manager.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/documents/building-linux.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf install clang git cmake libatomic alsa-lib-devel \\\n    pipewire-jack-audio-connection-kit-devel openal-devel \\\n    openssl-devel libevdev-devel libudev-devel libXext-devel \\\n    qt6-qtbase-devel qt6-qtbase-private-devel \\\n    qt6-qtmultimedia-devel qt6-qtsvg-devel qt6-qttools-devel \\\n    vulkan-devel vulkan-validation-layers libpng-devel\n```\n\n----------------------------------------\n\nTITLE: Running shadPS4 with Qt GUI\nDESCRIPTION: Command to run the shadPS4 emulator with Qt GUI enabled.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/documents/building-linux.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n./build/shadps4\n```\n\n----------------------------------------\n\nTITLE: Defining Development Tools in CMake\nDESCRIPTION: This CMake snippet defines a variable DEV_TOOLS containing the source files for development and debugging tools. It includes implementations for various widgets, memory editors, and graphics-related debugging utilities.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/CMakeLists.txt#2025-04-23_snippet_32\n\nLANGUAGE: CMake\nCODE:\n```\nset(DEV_TOOLS src/core/devtools/layer.cpp\n              src/core/devtools/layer.h\n              src/core/devtools/options.cpp\n              src/core/devtools/options.h\n              src/core/devtools/gcn/gcn_context_regs.cpp\n              src/core/devtools/gcn/gcn_op_names.cpp\n              src/core/devtools/gcn/gcn_shader_regs.cpp\n              src/core/devtools/widget/cmd_list.cpp\n              src/core/devtools/widget/cmd_list.h\n              src/core/devtools/widget/common.h\n              src/core/devtools/widget/frame_dump.cpp\n              src/core/devtools/widget/frame_dump.h\n              src/core/devtools/widget/frame_graph.cpp\n              src/core/devtools/widget/frame_graph.h\n              src/core/devtools/widget/imgui_memory_editor.h\n              src/core/devtools/widget/memory_map.cpp\n              src/core/devtools/widget/memory_map.h\n              src/core/devtools/widget/reg_popup.cpp\n              src/core/devtools/widget/reg_popup.h\n              src/core/devtools/widget/reg_view.cpp\n              src/core/devtools/widget/reg_view.h\n              src/core/devtools/widget/shader_list.cpp\n              src/core/devtools/widget/shader_list.h\n              src/core/devtools/widget/text_editor.cpp\n              src/core/devtools/widget/text_editor.h\n)\n```\n\n----------------------------------------\n\nTITLE: Running shadPS4 without Qt GUI\nDESCRIPTION: Command to run the shadPS4 emulator without Qt GUI, specifying the path to the game's boot file.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/documents/building-linux.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n./build/shadps4 /\"PATH\"/\"TO\"/\"GAME\"/\"FOLDER\"/eboot.bin\n```\n\n----------------------------------------\n\nTITLE: Setting Up Platform-Specific and Utility Libraries in CMake for shadPS4 Emulator\nDESCRIPTION: Configures platform-specific libraries like Winpthreads for Windows, and utility libraries such as sirit, half, libpng, Dear ImGui, Tracy, pugixml, libusb, Discord RPC, GCN Headers, and stb. Also includes Apple-specific dependencies.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/externals/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif (WIN32)\n    add_subdirectory(winpthreads)\n    target_include_directories(winpthreads INTERFACE winpthreads/include)\nendif()\n\nadd_subdirectory(sirit)\nif (WIN32)\n    target_compile_options(sirit PUBLIC \"-Wno-error=unused-command-line-argument\")\nendif()\n\nif (NOT TARGET half::half)\n    add_library(half INTERFACE)\n    target_include_directories(half INTERFACE half/include)\n    add_library(half::half ALIAS half)\nendif()\n\nif (NOT TARGET PNG::PNG)\n    set(PNG_SHARED OFF CACHE BOOL \"\" FORCE)\n    set(PNG_STATIC ON CACHE BOOL \"\" FORCE)\n    set(PNG_TESTS OFF CACHE BOOL \"\" FORCE)\n    set(PNG_TOOLS OFF CACHE BOOL \"\" FORCE)\n    set(SKIP_INSTALL_ALL OFF CACHE BOOL \"\" FORCE)\n    add_subdirectory(libpng)\n    add_library(PNG::PNG ALIAS png_static)\nendif()\n\nadd_library(Dear_ImGui\n        dear_imgui/imgui.cpp\n        dear_imgui/imgui_demo.cpp\n        dear_imgui/imgui_draw.cpp\n        dear_imgui/imgui_internal.h\n        dear_imgui/imgui_tables.cpp\n        dear_imgui/imgui_widgets.cpp\n)\ntarget_include_directories(Dear_ImGui INTERFACE dear_imgui/)\n\nif (CMAKE_BUILD_TYPE STREQUAL \"Release\")\n    option(TRACY_ENABLE \"\" OFF)\nelse()\n    option(TRACY_ENABLE \"\" ON)\nendif()\noption(TRACY_NO_CRASH_HANDLER \"\" ON)\noption(TRACY_ON_DEMAND \"\" ON)\noption(TRACY_NO_FRAME_IMAGE \"\" ON)\noption(TRACY_FIBERS \"\" OFF)\noption(TRACY_NO_SYSTEM_TRACING \"\" ON)\noption(TRACY_NO_CALLSTACK \"\" ON)\noption(TRACY_NO_CODE_TRANSFER \"\" ON)\noption(TRACY_NO_SAMPLING \"\" ON)\noption(TRACY_ONLY_LOCALHOST \"\" ON)\noption(TRACY_NO_CONTEXT_SWITCH \"\" ON)\nadd_subdirectory(tracy)\n\nif (NOT TARGET pugixml::pugixml)\n    add_subdirectory(pugixml)\nendif()\n\nif (NOT TARGET libusb::usb)\n    add_subdirectory(libusb)\n    add_library(libusb::usb ALIAS usb-1.0)\nendif()\n\nif (ENABLE_DISCORD_RPC)\n    add_subdirectory(discord-rpc)\nendif()\n\nadd_subdirectory(gcn)\n\nif (NOT TARGET stb::headers)\n    add_library(stb INTERFACE)\n    target_include_directories(stb INTERFACE stb)\n    add_library(stb::headers ALIAS stb)\nendif()\n\nif (APPLE)\n    if (NOT TARGET date::date-tz)\n        option(BUILD_TZ_LIB \"\" ON)\n        option(USE_SYSTEM_TZ_DB \"\" ON)\n        add_subdirectory(date)\n    endif()\n\n    if (NOT TARGET MoltenVK)\n        add_subdirectory(MoltenVK)\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring ImGui Components for ShadPS4 Emulator in CMake\nDESCRIPTION: This CMake snippet defines the ImGui-related components used in the ShadPS4 emulator, including configuration files, rendering implementations, and texture management.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/CMakeLists.txt#2025-04-23_snippet_41\n\nLANGUAGE: CMake\nCODE:\n```\nset(IMGUI src/imgui/imgui_config.h\n          src/imgui/imgui_layer.h\n          src/imgui/imgui_std.h\n          src/imgui/imgui_texture.h\n          src/imgui/renderer/imgui_core.cpp\n          src/imgui/renderer/imgui_core.h\n          src/imgui/renderer/imgui_impl_sdl3.cpp\n          src/imgui/renderer/imgui_impl_sdl3.h\n          src/imgui/renderer/imgui_impl_vulkan.cpp\n          src/imgui/renderer/imgui_impl_vulkan.h\n          src/imgui/renderer/texture_manager.cpp\n          src/imgui/renderer/texture_manager.h\n)\n```\n\n----------------------------------------\n\nTITLE: Installing MSYS2 Dependencies for x86-64 Build\nDESCRIPTION: Pacman command to install necessary packages for building shadPS4 on x86-64 systems using MSYS2.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/documents/building-windows.md#2025-04-23_snippet_3\n\nLANGUAGE: batch\nCODE:\n```\npacman -S --needed git mingw-w64-x86_64-binutils mingw-w64-x86_64-clang mingw-w64-x86_64-cmake mingw-w64-x86_64-rapidjson mingw-w64-x86_64-ninja mingw-w64-x86_64-ffmpeg\n```\n\n----------------------------------------\n\nTITLE: Defining Input Handling Components for ShadPS4 Emulator in CMake\nDESCRIPTION: This CMake snippet lists the input handling components used in the ShadPS4 emulator, including controller and mouse input implementations.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/CMakeLists.txt#2025-04-23_snippet_42\n\nLANGUAGE: CMake\nCODE:\n```\nset(INPUT src/input/controller.cpp\n          src/input/controller.h\n          src/input/input_handler.cpp\n          src/input/input_handler.h\n          src/input/input_mouse.cpp\n          src/input/input_mouse.h\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Qt on x86_64 Mac\nDESCRIPTION: This snippet installs the Qt library on x86_64 Mac systems using Homebrew.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/documents/building-macos.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbrew install qt@6\n```\n\n----------------------------------------\n\nTITLE: Defining Common Source Files in CMake for ShadPS4\nDESCRIPTION: This CMake snippet defines a list of common source files used in the ShadPS4 emulator project. It includes utility files for number handling, memory patching, and version control.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/CMakeLists.txt#2025-04-23_snippet_34\n\nLANGUAGE: CMake\nCODE:\n```\nset(COMMON src/common/number_utils.h\n           src/common/number_utils.cpp\n           src/common/memory_patcher.h\n           src/common/memory_patcher.cpp\n           ${CMAKE_CURRENT_BINARY_DIR}/src/common/scm_rev.cpp\n           src/common/scm_rev.h\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for OpenSUSE\nDESCRIPTION: Command to install necessary dependencies for building shadPS4 on OpenSUSE systems using zypper package manager.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/documents/building-linux.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo zypper install clang git cmake libasound2 libpulse-devel \\\n    libsndio7 libjack-devel openal-soft-devel libopenssl-devel \\\n    zlib-devel libedit-devel systemd-devel libevdev-devel \\\n    qt6-base-devel qt6-multimedia-devel qt6-svg-devel \\\n    qt6-linguist-devel qt6-gui-private-devel vulkan-devel \\\n    vulkan-validationlayers libpng-devel\n```\n\n----------------------------------------\n\nTITLE: Defining GNM Library Files in CMake\nDESCRIPTION: Sets up the GNM graphics driver library source files for the emulator's graphics system.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/CMakeLists.txt#2025-04-23_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nset(GNM_LIB src/core/libraries/gnmdriver/gnmdriver.cpp\n            src/core/libraries/gnmdriver/gnmdriver.h\n            src/core/libraries/gnmdriver/gnmdriver_init.h\n            src/core/libraries/gnmdriver/gnm_error.h\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for MSYS2 x86-64 Build\nDESCRIPTION: CMake command to configure the build for x86-64 systems using MSYS2, specifying Clang compiler and optimization flags.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/documents/building-windows.md#2025-04-23_snippet_5\n\nLANGUAGE: batch\nCODE:\n```\ncmake -S . -B build -DCMAKE_C_COMPILER=\"clang.exe\" -DCMAKE_CXX_COMPILER=\"clang++.exe\" -DCMAKE_CXX_FLAGS=\"-O2 -march=native\"\n```\n\n----------------------------------------\n\nTITLE: Defining Network Libraries Files in CMake\nDESCRIPTION: Sets up the Network libraries source files for the emulator, including HTTP, HTTP2, SSL, and network control functionality.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/CMakeLists.txt#2025-04-23_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\nset(NETWORK_LIBS src/core/libraries/network/http.cpp\n                 src/core/libraries/network/http.h\n                 src/core/libraries/network/http_error.h\n                 src/core/libraries/network/http2.cpp\n                 src/core/libraries/network/http2.h\n                 src/core/libraries/network/net.cpp\n                 src/core/libraries/network/netctl.cpp\n                 src/core/libraries/network/netctl.h\n                 src/core/libraries/network/net_ctl_obj.cpp\n                 src/core/libraries/network/net_ctl_obj.h\n                 src/core/libraries/network/net_ctl_codes.h\n                 src/core/libraries/network/net.h\n                 src/core/libraries/network/ssl.cpp\n                 src/core/libraries/network/ssl.h\n                 src/core/libraries/network/ssl2.cpp\n                 src/core/libraries/network/ssl2.h\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Settings in CMake for shadPS4 Emulator\nDESCRIPTION: Sets initial build configurations, including disabling shared libraries and testing. It also sets the CMP0069 policy and adds MSVC-specific definitions to silence deprecation warnings.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/externals/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(BUILD_SHARED_LIBS OFF)\nset(BUILD_TESTING OFF)\nset_directory_properties(PROPERTIES\n    EXCLUDE_FROM_ALL ON\n    SYSTEM ON\n)\n\nset(CMAKE_POLICY_DEFAULT_CMP0069 NEW)\n\nif (MSVC)\n    add_definitions(-D_CRT_SECURE_NO_WARNINGS -D_CRT_NONSTDC_NO_DEPRECATE -D_SCL_SECURE_NO_WARNINGS)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining AVPlayer Library Files in CMake\nDESCRIPTION: Sets up the AVPlayer library source files for the emulator's audio-video playback system, including file streaming and player state management.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/CMakeLists.txt#2025-04-23_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\nset(AVPLAYER_LIB src/core/libraries/avplayer/avplayer_common.cpp\n                 src/core/libraries/avplayer/avplayer_common.h\n                 src/core/libraries/avplayer/avplayer_file_streamer.cpp\n                 src/core/libraries/avplayer/avplayer_file_streamer.h\n                 src/core/libraries/avplayer/avplayer_impl.cpp\n                 src/core/libraries/avplayer/avplayer_impl.h\n                 src/core/libraries/avplayer/avplayer_source.cpp\n                 src/core/libraries/avplayer/avplayer_source.h\n                 src/core/libraries/avplayer/avplayer_state.cpp\n                 src/core/libraries/avplayer/avplayer_state.h\n                 src/core/libraries/avplayer/avplayer.cpp\n                 src/core/libraries/avplayer/avplayer.h\n                 src/core/libraries/avplayer/avplayer_error.h\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Video Output Library Files in CMake\nDESCRIPTION: This CMake snippet defines a variable VIDEOOUT_LIB containing the source files for the video output library. It includes headers and implementation files for buffer management, driver interface, and video output functionality.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/CMakeLists.txt#2025-04-23_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\nset(VIDEOOUT_LIB src/core/libraries/videoout/buffer.h\n                 src/core/libraries/videoout/driver.cpp\n                 src/core/libraries/videoout/driver.h\n                 src/core/libraries/videoout/video_out.cpp\n                 src/core/libraries/videoout/video_out.h\n                 src/core/libraries/videoout/videoout_error.h\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Shader Files List in CMake\nDESCRIPTION: Defines the list of shader source files to be processed, including various detiler shaders, vertex shaders, compute shaders, and fragment shaders.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/src/video_core/host_shaders/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SHADER_FILES\n    detilers/display_micro_64bpp.comp\n    detilers/macro_32bpp.comp\n    detilers/macro_64bpp.comp\n    detilers/macro_8bpp.comp\n    detilers/micro_128bpp.comp\n    detilers/micro_16bpp.comp\n    detilers/micro_32bpp.comp\n    detilers/micro_64bpp.comp\n    detilers/micro_8bpp.comp\n    fs_tri.vert\n    fsr.comp\n    post_process.frag\n)\n```\n\n----------------------------------------\n\nTITLE: Cloning shadPS4 Repository\nDESCRIPTION: This snippet clones the shadPS4 repository recursively and changes to the project directory.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/documents/building-macos.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --recursive https://github.com/shadps4-emu/shadPS4.git\ncd shadPS4\n```\n\n----------------------------------------\n\nTITLE: Creating Host Shaders Target in CMake\nDESCRIPTION: Defines the final custom target for shader compilation, including all generated headers and source files as dependencies.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/src/video_core/host_shaders/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(SHADER_SOURCES ${SHADER_FILES})\nlist(APPEND SHADER_SOURCES ${GLSL_INCLUDES})\n\nadd_custom_target(host_shaders\n    DEPENDS\n        ${SHADER_HEADERS}\n    SOURCES\n        ${SHADER_SOURCES}\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Internal libc Library Files in CMake\nDESCRIPTION: This CMake snippet defines a variable HLE_LIBC_INTERNAL_LIB containing the source files for an internal implementation of libc functions. It includes files for I/O operations, memory management, string manipulation, and mathematical functions.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/CMakeLists.txt#2025-04-23_snippet_18\n\nLANGUAGE: CMake\nCODE:\n```\nset(HLE_LIBC_INTERNAL_LIB src/core/libraries/libc_internal/libc_internal.cpp\n                 src/core/libraries/libc_internal/libc_internal.h\n                 src/core/libraries/libc_internal/libc_internal_io.cpp\n                 src/core/libraries/libc_internal/libc_internal_io.h\n                 src/core/libraries/libc_internal/libc_internal_memory.cpp\n                 src/core/libraries/libc_internal/libc_internal_memory.h\n                 src/core/libraries/libc_internal/libc_internal_str.cpp\n                 src/core/libraries/libc_internal/libc_internal_str.h\n                 src/core/libraries/libc_internal/libc_internal_math.cpp\n                 src/core/libraries/libc_internal/libc_internal_math.h\n                 src/core/libraries/libc_internal/printf.h\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Qt GUI Support in CMake\nDESCRIPTION: Sets up Qt GUI if enabled, finding required Qt components, configuring translation files, and preparing resource files for the project.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/CMakeLists.txt#2025-04-23_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nif(ENABLE_QT_GUI)\n    find_package(Qt6 REQUIRED COMPONENTS Widgets Concurrent LinguistTools Network Multimedia)\n    qt_standard_project_setup()\n    set(CMAKE_AUTORCC ON)\n    set(CMAKE_AUTOMOC ON)\n    set(CMAKE_AUTOUIC ON)\n\n    set(QT_TRANSLATIONS \"${PROJECT_SOURCE_DIR}/src/qt_gui/translations\")\n    file(GLOB_RECURSE TRANSLATIONS_TS ${QT_TRANSLATIONS}/*.ts)\n\n    set_source_files_properties(${TRANSLATIONS_TS} PROPERTIES OUTPUT_LOCATION \"${CMAKE_CURRENT_BINARY_DIR}/translations\")\n    qt_add_translation(TRANSLATIONS_QM ${TRANSLATIONS_TS})\n\n    set(TRANSLATIONS_QRC ${CMAKE_CURRENT_BINARY_DIR}/translations/translations.qrc)\n    file(WRITE ${TRANSLATIONS_QRC} \"<RCC><qresource prefix=\\\"translations\\\">\\n\")\n    foreach (QM ${TRANSLATIONS_QM})\n        get_filename_component(QM_FILE ${QM} NAME)\n        file(APPEND ${TRANSLATIONS_QRC} \"<file>${QM_FILE}</file>\\n\")\n    endforeach (QM)\n    file(APPEND ${TRANSLATIONS_QRC} \"</qresource></RCC>\")\n\n    qt_add_resources(TRANSLATIONS ${TRANSLATIONS_QRC})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining UI Tips as Multiline String in C++\nDESCRIPTION: This code snippet defines a multiline string using C++'s raw string literal syntax. It contains user interface tips for the ShadPS4 Emulator, including window management, frame dump inspection, and disassembly viewer setup instructions.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/src/core/devtools/help.txt#2025-04-23_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nR\"(\n* If you hold shift, you can move the window without docking it.\n* You don't need to close every window you open. When a parent window is closed, all its children will be closed too.\n* If you want to inspect or compare more than 1 frame dump without undocking, there's a option to keep showing opened popups even when in hide/minimize the frame dump window.\n* To use the disassembly viewer, you need to set up a cli to use a external disassembler and use \"{src}\" as a placeholder for the source code file, e.g. dis.exe --some-opt \"{src}\"\n)\"\n```\n\n----------------------------------------\n\nTITLE: Building shadPS4 with CMake\nDESCRIPTION: Command to build the shadPS4 project using CMake after configuration.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/documents/building-windows.md#2025-04-23_snippet_6\n\nLANGUAGE: batch\nCODE:\n```\ncmake --build build\n```\n\n----------------------------------------\n\nTITLE: Configuring GCN Library in CMake for shadPS4 Emulator\nDESCRIPTION: Defines the GCN project, creates an interface library, adds source files, and sets up include directories. This configuration is part of the shadPS4 emulator project and is licensed under GPL-2.0-or-later.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/externals/gcn/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# SPDX-FileCopyrightText: Copyright 2024 shadPS4 Emulator Project\n# SPDX-License-Identifier: GPL-2.0-or-later\n\nproject(gcn LANGUAGES CXX)\n\nadd_library(gcn INTERFACE)\ntarget_sources(gcn PRIVATE\n  \"include/gcn/si_ci_vi_merged_offset.h\"\n  \"include/gcn/si_ci_vi_merged_pm4_it_opcodes.h\"\n)\n\ntarget_include_directories(gcn INTERFACE include)\n```\n\n----------------------------------------\n\nTITLE: Generating Build Directory for shadPS4\nDESCRIPTION: This snippet generates the build directory for shadPS4 using CMake, specifying the x86_64 architecture. It also mentions an optional flag for building the Qt GUI.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/documents/building-macos.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncmake -S . -B build/ -DCMAKE_OSX_ARCHITECTURES=x86_64\n```\n\n----------------------------------------\n\nTITLE: Defining Network Platform Libraries in CMake\nDESCRIPTION: This CMake snippet defines a variable NP_LIBS containing the source files for various network platform libraries. It includes implementations for common functionality, manager, score tracking, trophy system, web API, party system, and authentication.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/CMakeLists.txt#2025-04-23_snippet_28\n\nLANGUAGE: CMake\nCODE:\n```\nset(NP_LIBS src/core/libraries/np_common/np_common.cpp\n            src/core/libraries/np_common/np_common.h\n            src/core/libraries/np_manager/np_manager.cpp\n            src/core/libraries/np_manager/np_manager.h\n            src/core/libraries/np_score/np_score.cpp\n            src/core/libraries/np_score/np_score.h\n            src/core/libraries/np_trophy/np_trophy.cpp\n            src/core/libraries/np_trophy/np_trophy.h\n            src/core/libraries/np_trophy/trophy_ui.cpp\n            src/core/libraries/np_trophy/trophy_ui.h\n            src/core/libraries/np_trophy/np_trophy_error.h\n            src/core/libraries/np_web_api/np_web_api.cpp\n            src/core/libraries/np_web_api/np_web_api.h\n            src/core/libraries/np_party/np_party.cpp\n            src/core/libraries/np_party/np_party.h\n            src/core/libraries/np_auth/np_auth.cpp\n            src/core/libraries/np_auth/np_auth.h\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Project Directories and Dependencies in CMake\nDESCRIPTION: Adds external subdirectories and includes the src and Resources directories for the project.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/CMakeLists.txt#2025-04-23_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(externals)\ninclude_directories(src)\ninclude_directories(Resources)\n```\n\n----------------------------------------\n\nTITLE: Defining Fiber Library Files in CMake\nDESCRIPTION: This CMake snippet defines a variable FIBER_LIB containing the source files for fiber (lightweight thread) functionality. It includes assembly code for context switching, implementation files, headers, and error handling for fiber management.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/CMakeLists.txt#2025-04-23_snippet_26\n\nLANGUAGE: CMake\nCODE:\n```\nset(FIBER_LIB src/core/libraries/fiber/fiber_context.s\n              src/core/libraries/fiber/fiber.cpp\n              src/core/libraries/fiber/fiber.h\n              src/core/libraries/fiber/fiber_error.h\n)\n```\n\n----------------------------------------\n\nTITLE: Defining System Libraries Files in CMake\nDESCRIPTION: Sets up the System libraries source files for the emulator, including dialog systems, save data handling, user services, and system services.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/CMakeLists.txt#2025-04-23_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\nset(SYSTEM_LIBS src/core/libraries/system/commondialog.cpp\n                src/core/libraries/system/commondialog.h\n                src/core/libraries/system/msgdialog.cpp\n                src/core/libraries/system/msgdialog.h\n                src/core/libraries/system/msgdialog_ui.cpp\n                src/core/libraries/system/posix.cpp\n                src/core/libraries/system/posix.h\n                src/core/libraries/save_data/save_backup.cpp\n                src/core/libraries/save_data/save_backup.h\n                src/core/libraries/save_data/save_instance.cpp\n                src/core/libraries/save_data/save_instance.h\n                src/core/libraries/save_data/save_memory.cpp\n                src/core/libraries/save_data/save_memory.h\n                src/core/libraries/save_data/savedata.cpp\n                src/core/libraries/save_data/savedata.h\n                src/core/libraries/save_data/dialog/savedatadialog.cpp\n                src/core/libraries/save_data/dialog/savedatadialog.h\n                src/core/libraries/save_data/dialog/savedatadialog_ui.cpp\n                src/core/libraries/save_data/dialog/savedatadialog_ui.h\n                src/core/libraries/system/sysmodule.cpp\n                src/core/libraries/system/sysmodule.h\n                src/core/libraries/system/system_error.h\n                src/core/libraries/system/systemservice.cpp\n                src/core/libraries/system/systemservice.h\n                src/core/libraries/system/systemservice_error.h\n                src/core/libraries/system/userservice.cpp\n                src/core/libraries/system/userservice.h\n                src/core/libraries/system/userservice_error.h\n                src/core/libraries/app_content/app_content.cpp\n                src/core/libraries/app_content/app_content.h\n                src/core/libraries/app_content/app_content_error.h\n                src/core/libraries/rtc/rtc.cpp\n                src/core/libraries/rtc/rtc.h\n                src/core/libraries/rtc/rtc_error.h\n                src/core/libraries/disc_map/disc_map.cpp\n                src/core/libraries/disc_map/disc_map.h\n                src/core/libraries/disc_map/disc_map_codes.h\n                src/core/libraries/ngs2/ngs2.cpp\n                src/core/libraries/ngs2/ngs2.h\n                src/core/libraries/ngs2/ngs2_error.h\n                src/core/libraries/ngs2/ngs2_impl.cpp\n                src/core/libraries/ngs2/ngs2_impl.h\n                src/core/libraries/ngs2/ngs2_custom.cpp\n                src/core/libraries/ngs2/ngs2_custom.h\n                src/core/libraries/ngs2/ngs2_reverb.cpp\n                src/core/libraries/ngs2/ngs2_reverb.h\n                src/core/libraries/ngs2/ngs2_geom.cpp\n                src/core/libraries/ngs2/ngs2_geom.h\n                src/core/libraries/ngs2/ngs2_pan.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Shader Header Generation Loop in CMake\nDESCRIPTION: Iterates through shader files to generate corresponding header files using custom commands. Processes each shader file and creates a C++ header containing the shader code.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/src/video_core/host_shaders/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nforeach(FILENAME IN ITEMS ${SHADER_FILES})\n    string(REPLACE \".\" \"_\" SHADER_NAME ${FILENAME})\n    set(SOURCE_FILE ${CMAKE_CURRENT_SOURCE_DIR}/${FILENAME})\n    set(SOURCE_HEADER_FILE ${SHADER_DIR}/${SHADER_NAME}.h)\n    add_custom_command(\n        OUTPUT\n            ${SOURCE_HEADER_FILE}\n        COMMAND\n            ${CMAKE_COMMAND} -P ${HEADER_GENERATOR} ${SOURCE_FILE} ${SOURCE_HEADER_FILE} ${INPUT_FILE}\n        MAIN_DEPENDENCY\n            ${SOURCE_FILE}\n        DEPENDS\n            ${INPUT_FILE}\n    )\n    set(SHADER_HEADERS ${SHADER_HEADERS} ${SOURCE_HEADER_FILE})\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Defining Video Decoding Library Files in CMake\nDESCRIPTION: This CMake snippet defines a variable VDEC_LIB containing the source files for video decoding functionality. It includes implementation files and headers for different video decoding versions, AVC-specific code, and error handling.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/CMakeLists.txt#2025-04-23_snippet_27\n\nLANGUAGE: CMake\nCODE:\n```\nset(VDEC_LIB src/core/libraries/videodec/videodec2_impl.cpp\n             src/core/libraries/videodec/videodec2_impl.h\n             src/core/libraries/videodec/videodec2.cpp\n             src/core/libraries/videodec/videodec2.h\n             src/core/libraries/videodec/videodec2_avc.h\n             src/core/libraries/videodec/videodec.cpp\n             src/core/libraries/videodec/videodec.h\n             src/core/libraries/videodec/videodec_error.h\n             src/core/libraries/videodec/videodec_impl.cpp\n             src/core/libraries/videodec/videodec_impl.h\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Input Method Editor (IME) Library Files in CMake\nDESCRIPTION: This CMake snippet defines a variable IME_LIB containing the source files for the Input Method Editor library. It includes files for error handling, dialog management, and user interface components related to text input.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/CMakeLists.txt#2025-04-23_snippet_19\n\nLANGUAGE: CMake\nCODE:\n```\nset(IME_LIB src/core/libraries/ime/error_dialog.cpp\n            src/core/libraries/ime/error_dialog.h\n            src/core/libraries/ime/ime_common.h\n            src/core/libraries/ime/ime_dialog_ui.cpp\n            src/core/libraries/ime/ime_dialog_ui.h\n            src/core/libraries/ime/ime_dialog.cpp\n            src/core/libraries/ime/ime_dialog.h\n            src/core/libraries/ime/ime_ui.cpp\n            src/core/libraries/ime/ime_ui.h\n            src/core/libraries/ime/ime.cpp\n            src/core/libraries/ime/ime.h\n            src/core/libraries/ime/ime_error.h\n)\n```\n\n----------------------------------------\n\nTITLE: ImGui Font Resource Project Configuration in CMake\nDESCRIPTION: Configures the CMake project for embedding fonts into ImGui resources. Creates a binary font embedding tool and processes a list of TTF fonts into C++ source files that can be compiled into the application.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/src/imgui/renderer/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# SPDX-FileCopyrightText: Copyright 2024 shadPS4 Emulator Project\n# SPDX-License-Identifier: GPL-2.0-or-later\n\nproject(ImGui_Resources)\n\nadd_executable(Dear_ImGui_FontEmbed ${CMAKE_SOURCE_DIR}/externals/dear_imgui/misc/fonts/binary_to_compressed_c.cpp)\n\nset(FONT_LIST\n    NotoSansJP-Regular.ttf\n    ProggyVector-Regular.ttf\n)\n\nset(OutputList \"\")\nFOREACH (FONT_FILE ${FONT_LIST})\n    string(REGEX REPLACE \"-\" \"_\" fontname ${FONT_FILE})\n    string(TOLOWER ${fontname} fontname)\n    string(REGEX REPLACE \".ttf\" \"\" fontname_cpp ${fontname})\n    set(fontname_cpp \"imgui_font_${fontname_cpp}\")\n\n    MESSAGE(STATUS \"Embedding font ${FONT_FILE}\")\n    set(OUTPUT \"generated_fonts/imgui_fonts/${fontname}\")\n    add_custom_command(\n        OUTPUT \"${OUTPUT}.g.cpp\"\n        COMMAND ${CMAKE_COMMAND} -E make_directory \"generated_fonts/imgui_fonts\"\n        COMMAND $<TARGET_FILE:Dear_ImGui_FontEmbed> -nostatic \"${CMAKE_CURRENT_SOURCE_DIR}/fonts/${FONT_FILE}\" ${fontname_cpp} > \"${OUTPUT}.g.cpp\"\n        DEPENDS Dear_ImGui_FontEmbed \"fonts/${FONT_FILE}\"\n        USES_TERMINAL\n    )\n    list(APPEND OutputList \"${OUTPUT}.g.cpp\")\nENDFOREACH ()\n\nadd_library(ImGui_Resources STATIC ${OutputList})\nset(IMGUI_RESOURCES_INCLUDE ${CMAKE_CURRENT_BINARY_DIR}/generated_fonts PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Installing MSYS2 Dependencies for ARM64 Build\nDESCRIPTION: Pacman command to install necessary packages for building shadPS4 on ARM64 systems using MSYS2.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/documents/building-windows.md#2025-04-23_snippet_9\n\nLANGUAGE: batch\nCODE:\n```\npacman -S --needed git mingw-w64-clang-aarch64-binutils mingw-w64-clang-aarch64-clang mingw-w64-clang-aarch64-rapidjson mingw-w64-clang-aarch64-cmake mingw-w64-clang-aarch64-ninja mingw-w64-clang-aarch64-ffmpeg\n```\n\n----------------------------------------\n\nTITLE: Defining Controller (Pad) Library Files in CMake\nDESCRIPTION: This CMake snippet defines a variable PAD_LIB containing the source files for the controller (pad) library. It includes implementation files and headers for handling input from game controllers.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/CMakeLists.txt#2025-04-23_snippet_20\n\nLANGUAGE: CMake\nCODE:\n```\nset(PAD_LIB src/core/libraries/pad/pad.cpp\n            src/core/libraries/pad/pad.h\n            src/core/libraries/pad/pad_errors.h\n)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding x86_64 Specific Files in CMake for ShadPS4\nDESCRIPTION: This CMake snippet adds x86_64 specific CPU patch files to the CORE list if the ARCHITECTURE is set to \"x86_64\".\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/CMakeLists.txt#2025-04-23_snippet_37\n\nLANGUAGE: CMake\nCODE:\n```\nif (ARCHITECTURE STREQUAL \"x86_64\")\n    set(CORE ${CORE}\n             src/core/cpu_patches.cpp\n             src/core/cpu_patches.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining PNG Decoding Library Files in CMake\nDESCRIPTION: This CMake snippet defines a variable PNG_LIB containing the source files for PNG image decoding functionality. It includes implementation files and headers for PNG decoding and error handling.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/CMakeLists.txt#2025-04-23_snippet_21\n\nLANGUAGE: CMake\nCODE:\n```\nset(PNG_LIB src/core/libraries/libpng/pngdec.cpp\n            src/core/libraries/libpng/pngdec.h\n            src/core/libraries/libpng/pngdec_error.h\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Miscellaneous Libraries in CMake\nDESCRIPTION: This CMake snippet defines a variable MISC_LIBS containing the source files for miscellaneous libraries. It includes implementations for screenshot functionality, PlayStation Move controller support, and object management.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/CMakeLists.txt#2025-04-23_snippet_31\n\nLANGUAGE: CMake\nCODE:\n```\nset(MISC_LIBS  src/core/libraries/screenshot/screenshot.cpp\n               src/core/libraries/screenshot/screenshot.h\n               src/core/libraries/move/move.cpp\n               src/core/libraries/move/move.h\n               src/core/libraries/ulobjmgr/ulobjmgr.cpp\n               src/core/libraries/ulobjmgr/ulobjmgr.h\n)\n```\n\n----------------------------------------\n\nTITLE: Defining JPEG Encoding Library Files in CMake\nDESCRIPTION: This CMake snippet defines a variable JPEG_LIB containing the source files for JPEG image encoding functionality. It includes implementation files and headers for JPEG encoding and error handling.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/CMakeLists.txt#2025-04-23_snippet_22\n\nLANGUAGE: CMake\nCODE:\n```\nset(JPEG_LIB src/core/libraries/jpeg/jpeg_error.h\n             src/core/libraries/jpeg/jpegenc.cpp\n             src/core/libraries/jpeg/jpegenc.h\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for NixOS\nDESCRIPTION: Command to set up the development environment for building shadPS4 on NixOS using nix-shell.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/documents/building-linux.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnix-shell shell.nix\n```\n\n----------------------------------------\n\nTITLE: Defining AJM Library Files in CMake\nDESCRIPTION: Sets up the AJM library source files for the emulator, including AT9 and MP3 processing components.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/CMakeLists.txt#2025-04-23_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nset(AJM_LIB src/core/libraries/ajm/ajm.cpp\n            src/core/libraries/ajm/ajm.h\n            src/core/libraries/ajm/ajm_at9.cpp\n            src/core/libraries/ajm/ajm_at9.h\n            src/core/libraries/ajm/ajm_batch.cpp\n            src/core/libraries/ajm/ajm_batch.h\n            src/core/libraries/ajm/ajm_context.cpp\n            src/core/libraries/ajm/ajm_context.h\n            src/core/libraries/ajm/ajm_error.h\n            src/core/libraries/ajm/ajm_instance_statistics.cpp\n            src/core/libraries/ajm/ajm_instance_statistics.h\n            src/core/libraries/ajm/ajm_instance.cpp\n            src/core/libraries/ajm/ajm_instance.h\n            src/core/libraries/ajm/ajm_mp3.cpp\n            src/core/libraries/ajm/ajm_mp3.h\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Distrobox Container for Arch Linux\nDESCRIPTION: Command to create a distrobox container using Arch Linux as the base image, useful for building shadPS4 on distributions with immutable filesystems.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/documents/building-linux.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndistrobox create --name archlinux --init --image archlinux:latest\n```\n\n----------------------------------------\n\nTITLE: Defining USB Device Library Files in CMake\nDESCRIPTION: This CMake snippet defines a variable USBD_LIB containing the source files for USB device functionality. It includes implementation files and headers for USB device management.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/CMakeLists.txt#2025-04-23_snippet_25\n\nLANGUAGE: CMake\nCODE:\n```\nset(USBD_LIB src/core/libraries/usbd/usbd.cpp\n             src/core/libraries/usbd/usbd.h\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Random Number Generation Library Files in CMake\nDESCRIPTION: This CMake snippet defines a variable RANDOM_LIB containing the source files for random number generation functionality. It includes implementation files, headers, and error handling for random number generation.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/CMakeLists.txt#2025-04-23_snippet_24\n\nLANGUAGE: CMake\nCODE:\n```\nset(RANDOM_LIB src/core/libraries/random/random.cpp\n               src/core/libraries/random/random.h\n               src/core/libraries/random/random_error.h\n)\n```\n\n----------------------------------------\n\nTITLE: Defining zlib Library Files in CMake\nDESCRIPTION: This CMake snippet defines a variable ZLIB_LIB containing the source files for zlib compression library. It includes implementation files, headers, and error handling for zlib functionality.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/CMakeLists.txt#2025-04-23_snippet_29\n\nLANGUAGE: CMake\nCODE:\n```\nset(ZLIB_LIB src/core/libraries/zlib/zlib.cpp\n             src/core/libraries/zlib/zlib_sce.h\n             src/core/libraries/zlib/zlib_error.h\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Virtual Reality Libraries in CMake\nDESCRIPTION: This CMake snippet defines a variable VR_LIBS containing the source files for virtual reality functionality. It includes implementation files and headers for head-mounted display (HMD) management.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/CMakeLists.txt#2025-04-23_snippet_30\n\nLANGUAGE: CMake\nCODE:\n```\nset(VR_LIBS  src/core/libraries/hmd/hmd.cpp\n             src/core/libraries/hmd/hmd.h\n)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding Discord RPC Support in CMake for ShadPS4\nDESCRIPTION: This CMake snippet conditionally adds Discord Rich Presence (RPC) support to the ShadPS4 emulator project if the ENABLE_DISCORD_RPC option is enabled.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/CMakeLists.txt#2025-04-23_snippet_35\n\nLANGUAGE: CMake\nCODE:\n```\nif (ENABLE_DISCORD_RPC)\n    list(APPEND COMMON src/common/discord_rpc_handler.cpp src/common/discord_rpc_handler.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Shader Build Paths in CMake\nDESCRIPTION: Configures the output paths for shader headers and includes, setting up directory structure for generated files.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/src/video_core/host_shaders/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SHADER_INCLUDE ${CMAKE_CURRENT_BINARY_DIR}/include)\nset(SHADER_DIR ${SHADER_INCLUDE}/video_core/host_shaders)\nset(HOST_SHADERS_INCLUDE ${SHADER_INCLUDE} PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Debian & Ubuntu\nDESCRIPTION: Command to install necessary dependencies for building shadPS4 on Debian and Ubuntu-based systems using apt package manager.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/documents/building-linux.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install build-essential clang git cmake libasound2-dev \\\n    libpulse-dev libopenal-dev libssl-dev zlib1g-dev libedit-dev \\\n    libudev-dev libevdev-dev libsdl2-dev libjack-dev libsndio-dev \\\n    qt6-base-dev qt6-tools-dev qt6-multimedia-dev libvulkan-dev \\\n    vulkan-validationlayers libpng-dev\n```\n\n----------------------------------------\n\nTITLE: Defining Input Template Files in CMake\nDESCRIPTION: Sets up input template file paths for shader header generation process.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/src/video_core/host_shaders/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(INPUT_FILE ${CMAKE_CURRENT_SOURCE_DIR}/source_shader.h.in)\nset(HEADER_GENERATOR ${CMAKE_CURRENT_SOURCE_DIR}/StringShaderHeader.cmake)\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Arch Linux\nDESCRIPTION: Command to install necessary dependencies for building shadPS4 on Arch Linux systems using pacman package manager.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/documents/building-linux.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo pacman -S base-devel clang git cmake sndio jack2 openal \\\n    qt6-base qt6-declarative qt6-multimedia qt6-tools sdl2 \\\n    vulkan-validation-layers libpng\n```\n\n----------------------------------------\n\nTITLE: Copyright Disclaimer Template\nDESCRIPTION: Sample copyright disclaimer text for employers or institutions to disclaim copyright interest in GPL licensed programs\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/LICENSES/GPL-2.0-or-later.txt#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nYoyodyne, Inc., hereby disclaims all copyright interest in the program `Gnomovision' (which makes passes at compilers) written by James Hacker.\n\nsignature of Ty Coon, 1 April 1989\nTy Coon, President of Vice\n```\n\n----------------------------------------\n\nTITLE: Deploying Qt Dependencies for shadPS4\nDESCRIPTION: Command to automatically populate necessary Qt files for running shadPS4.exe using windeployqt6.exe tool.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/documents/building-windows.md#2025-04-23_snippet_2\n\nLANGUAGE: batch\nCODE:\n```\nC:\\Qt\\6.8.2\\msvc2022_64\\bin\\windeployqt6.exe \"C:\\path\\to\\shadps4.exe\"\n```\n\n----------------------------------------\n\nTITLE: Installing Qt Dependencies for MSYS2 x86-64 Build\nDESCRIPTION: Optional pacman command to install Qt6 packages for building shadPS4 with GUI support on x86-64 systems using MSYS2.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/documents/building-windows.md#2025-04-23_snippet_4\n\nLANGUAGE: batch\nCODE:\n```\npacman -S --needed mingw-w64-x86_64-qt6-base mingw-w64-x86_64-qt6-tools mingw-w64-x86_64-qt6-multimedia\n```\n\n----------------------------------------\n\nTITLE: Installing x86_64 Homebrew and Qt on ARM Mac\nDESCRIPTION: This snippet installs the x86_64 version of Homebrew and the Qt library on ARM Mac systems, which is necessary for building the Qt GUI of shadPS4.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/documents/building-macos.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Installs x86_64 Homebrew to /usr/local\narch -x86_64 /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n# Installs libraries.\narch -x86_64 /usr/local/bin/brew install qt@6\n```\n\n----------------------------------------\n\nTITLE: Checking for pthread_mutex_timedlock Support in CMake\nDESCRIPTION: Checks if pthread_mutex_timedlock is available in the system and adds a compile option if it is. Windows always has these functions through winpthreads.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/CMakeLists.txt#2025-04-23_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(CheckSymbolExists)\ncheck_symbol_exists(pthread_mutex_timedlock \"pthread.h\" HAVE_PTHREAD_MUTEX_TIMEDLOCK)\nif(HAVE_PTHREAD_MUTEX_TIMEDLOCK OR WIN32)\n    add_compile_options(-DHAVE_PTHREAD_MUTEX_TIMEDLOCK)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Clang-specific Options for libc++ in CMake\nDESCRIPTION: Checks if the compiler is Clang or AppleClang and adds the -fexperimental-library flag when using libc++ to enable std::jthread and std::stop_token support.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/CMakeLists.txt#2025-04-23_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nif (CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\" OR CMAKE_CXX_COMPILER_ID STREQUAL \"AppleClang\")\n    # libc++ requires -fexperimental-library to enable std::jthread and std::stop_token support.\n    include(CheckCXXSymbolExists)\n    check_cxx_symbol_exists(_LIBCPP_VERSION version LIBCPP)\n    if(LIBCPP)\n        add_compile_options(-fexperimental-library)\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining PlayGo Library Files in CMake\nDESCRIPTION: This CMake snippet defines a variable PLAYGO_LIB containing the source files for the PlayGo library, which likely handles game installation and loading. It includes implementation files, headers, and dialog management for PlayGo functionality.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/CMakeLists.txt#2025-04-23_snippet_23\n\nLANGUAGE: CMake\nCODE:\n```\nset(PLAYGO_LIB src/core/libraries/playgo/playgo.cpp\n               src/core/libraries/playgo/playgo.h\n               src/core/libraries/playgo/playgo_dialog.cpp\n               src/core/libraries/playgo/playgo_dialog.h\n               src/core/libraries/playgo/playgo_types.h\n)\n```\n\n----------------------------------------\n\nTITLE: Deploying Qt Dependencies for MSYS2 Build\nDESCRIPTION: Optional command to deploy Qt dependencies for the MSYS2 build of shadPS4 using windeployqt6.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/documents/building-windows.md#2025-04-23_snippet_7\n\nLANGUAGE: batch\nCODE:\n```\nwindeployqt6 build/shadps4.exe\n```\n\n----------------------------------------\n\nTITLE: Installing Qt Dependencies for MSYS2 ARM64 Build\nDESCRIPTION: Optional pacman command to install Qt6 packages for building shadPS4 with GUI support on ARM64 systems using MSYS2.\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/documents/building-windows.md#2025-04-23_snippet_10\n\nLANGUAGE: batch\nCODE:\n```\npacman -S --needed mingw-w64-clang-aarch64-qt6-base mingw-w64-clang-aarch64-qt6-tools mingw-w64-clang-aarch64-qt6-multimedia\n```\n\n----------------------------------------\n\nTITLE: Sample Copyright Notice Template\nDESCRIPTION: Template text for adding GPL copyright notice to source files, including program description, copyright year and author\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/LICENSES/GPL-2.0-or-later.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\none line to give the program's name and an idea of what it does.\nCopyright (C) yyyy name of author\n\nThis program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n```\n\n----------------------------------------\n\nTITLE: Interactive Program License Notice\nDESCRIPTION: Sample notice text for interactive programs to display GPL license information on startup\nSOURCE: https://github.com/shadps4-emu/shadps4/blob/main/LICENSES/GPL-2.0-or-later.txt#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nGnomovision version 69, Copyright (C) year name of author\nGnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\nThis is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details.\n```"
  }
]