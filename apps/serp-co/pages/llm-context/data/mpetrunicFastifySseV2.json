[
  {
    "owner": "mpetrunic",
    "repo": "fastify-sse-v2",
    "content": "TITLE: Registering Fastify SSE Plugin\nDESCRIPTION: This snippet shows how to register the FastifySSEPlugin with a Fastify server instance, which is the first step to enable SSE functionality in your application.\nSOURCE: https://github.com/mpetrunic/fastify-sse-v2/blob/master/README.md#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { FastifySSEPlugin } from \"fastify-sse-v2\";\n\nconst server = fastify();\nserver.register(FastifySSEPlugin);\n```\n\n----------------------------------------\n\nTITLE: Sending Individual SSE Events\nDESCRIPTION: Shows how to manually send individual SSE events in a loop and also demonstrates how to send events based on database changes. Includes handling client disconnection through socket close events.\nSOURCE: https://github.com/mpetrunic/fastify-sse-v2/blob/master/README.md#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { FastifySSEPlugin } from \"fastify-sse-v2\";\n\nconst server = fastify();\nserver.register(FastifySSEPlugin);\n\nserver.get(\"/\", async function (req, res) {\n  for (let i = 0; i < 10; i++) {\n    await sleep(2000);\n    res.sse({ id: String(i), data: \"Some message\" });\n  }\n});\n\nfastify.get(\"/listenForChanges\", {}, (request, reply) => {\n  const listenStream = fastify.db\n    .watch(\"doc-uuid\")\n    .on(\"data\", (data) => reply.sse({ data: JSON.stringify(data) }))\n    .on(\"delete\", () => reply.sse({ event: \"close\" }));\n  request.socket.on(\"close\", () => listenStream.end());\n});\n```\n\n----------------------------------------\n\nTITLE: Sending Events from AsyncIterable Source\nDESCRIPTION: This example demonstrates how to send SSE events using an async generator function as the source. It creates a stream of 10 messages with a 2-second delay between each message.\nSOURCE: https://github.com/mpetrunic/fastify-sse-v2/blob/master/README.md#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { FastifySSEPlugin } from \"fastify-sse-v2\";\n\nconst server = fastify();\nserver.register(FastifySSEPlugin);\n\nserver.get(\"/\", function (req, res) {\n  res.sse(\n    (async function* source() {\n      for (let i = 0; i < 10; i++) {\n        sleep(2000);\n        yield { id: String(i), data: \"Some message\" };\n      }\n    })()\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Sending SSE Events from EventEmitters\nDESCRIPTION: This example shows how to send SSE events from Node.js EventEmitters using the events.on API, transforming emitted events into SSE events. Note that this approach is not supported in all Node.js versions.\nSOURCE: https://github.com/mpetrunic/fastify-sse-v2/blob/master/README.md#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { FastifySSEPlugin } from \"fastify-sse-v2\";\nimport { on } from \"events\";\n\nconst server = fastify();\nserver.register(FastifySSEPlugin);\n\nserver.get(\"/\", function (req, res) {\n  res.sse(\n    (async function* () {\n      for await (const [event] of on(eventEmmitter, \"update\")) {\n        yield {\n          event: event.name,\n          data: JSON.stringify(event),\n        };\n      }\n    })()\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring SSE Retry Behavior\nDESCRIPTION: This snippet shows how to configure the retry delay for SSE connections. You can either disable the retry mechanism or set a custom retry interval in milliseconds.\nSOURCE: https://github.com/mpetrunic/fastify-sse-v2/blob/master/README.md#2025-04-19_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { FastifySSEPlugin } from \"fastify-sse-v2\";\n\nconst server = fastify();\n\nserver.register(FastifySSEPlugin) // retryDelay default 3000\n\nserver.register(FastifySSEPlugin, {\n  retryDelay: false // disable retryDelay\n  retryDelay: 5000 // override 5000\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring SSE Stream Buffer Size\nDESCRIPTION: This example demonstrates how to configure the highWaterMark parameter, which controls the buffer size for the SSE stream. This affects when the buffer is considered full and needs to be flushed.\nSOURCE: https://github.com/mpetrunic/fastify-sse-v2/blob/master/README.md#2025-04-19_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { FastifySSEPlugin } from \"fastify-sse-v2\";\n\nconst server = fastify();\n\nserver.register(FastifySSEPlugin) // highWaterMark defaults to 16384 bytes (16kb)\n\nserver.register(FastifySSEPlugin, {\n  highWaterMark: 1024 // override default setting of 16384 (16kb) with 1024 (1kb)\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Fastify SSE Plugin via Yarn\nDESCRIPTION: Command to install the fastify-sse-v2 package using Yarn package manager.\nSOURCE: https://github.com/mpetrunic/fastify-sse-v2/blob/master/README.md#2025-04-19_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\nyarn add fastify-sse-v2\n```"
  }
]