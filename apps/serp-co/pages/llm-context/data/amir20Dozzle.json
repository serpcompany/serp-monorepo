[
  {
    "owner": "amir20",
    "repo": "dozzle",
    "content": "TITLE: Docker Compose Configuration for Dozzle\nDESCRIPTION: Docker Compose configuration to run Dozzle as a service with necessary volume mounts and port mappings.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  dozzle:\n    image: amir20/dozzle:latest\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    ports:\n      - 8080:8080\n```\n\n----------------------------------------\n\nTITLE: Running Dozzle Container with Docker\nDESCRIPTION: Docker run command to start Dozzle container with Docker socket mounted and port exposed.\nSOURCE: https://github.com/amir20/dozzle/blob/master/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run --name dozzle -d --volume=/var/run/docker.sock:/var/run/docker.sock -p 8080:8080 amir20/dozzle:latest\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Dozzle\nDESCRIPTION: Docker Compose YAML configuration for running Dozzle with proper volume mounts and port exposure.\nSOURCE: https://github.com/amir20/dozzle/blob/master/README.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  dozzle:\n    container_name: dozzle\n    image: amir20/dozzle:latest\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    ports:\n      - 8080:8080\n```\n\n----------------------------------------\n\nTITLE: Running Dozzle with Docker CLI\nDESCRIPTION: Simple Docker run command to start Dozzle container with docker.sock mount and port mapping.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -d -v /var/run/docker.sock:/var/run/docker.sock -p 8080:8080 amir20/dozzle:latest\n```\n\n----------------------------------------\n\nTITLE: Configuring User Authentication in YAML Format\nDESCRIPTION: Example of a YAML configuration file for file-based user management in Dozzle. This file defines users with their credentials and access filters.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/authentication.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nusers:\n  # \"admin\" here is username\n  admin:\n    email: me@email.net\n    name: Admin\n    # Generate with docker run run -it --rm amir20/dozzle generate --name Admin --email me@email.net --password secret admin\n    password: $2a$11$9ho4vY2LdJ/WBopFcsAS0uORC0x2vuFHQgT/yBqZyzclhHsoaIkzK\n    filter:\n```\n\n----------------------------------------\n\nTITLE: Pulling Dozzle Docker Image\nDESCRIPTION: Command to pull the latest Dozzle Docker image from Docker Hub.\nSOURCE: https://github.com/amir20/dozzle/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker pull amir20/dozzle:latest\n```\n\n----------------------------------------\n\nTITLE: Configuring RBAC and Deployment for Dozzle in Kubernetes\nDESCRIPTION: YAML configuration that sets up the necessary RBAC permissions, deployment, and service for running Dozzle in Kubernetes mode. It includes a service account, cluster role, cluster role binding, deployment specification, and service definition.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/k8s.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# rbac.yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: pod-viewer\n---\n# clusterrole.yaml\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: pod-viewer-role\nrules:\n  - apiGroups: [\"\"]\n    resources: [\"pods\", \"pods/log\", \"nodes\"]\n    verbs: [\"get\", \"list\", \"watch\"]\n  - apiGroups: [\"metrics.k8s.io\"]\n    resources: [\"pods\"]\n    verbs: [\"get\", \"list\"]\n---\n# clusterrolebinding.yaml\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: pod-viewer-binding\nsubjects:\n  - kind: ServiceAccount\n    name: pod-viewer\n    namespace: default\nroleRef:\n  kind: ClusterRole\n  name: pod-viewer-role\n  apiGroup: rbac.authorization.k8s.io\n---\n# deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: dozzle\nspec:\n  selector:\n    matchLabels:\n      app: dozzle\n  template:\n    metadata:\n      labels:\n        app: dozzle\n    spec:\n      serviceAccountName: pod-viewer\n      containers:\n        - name: dozzle\n          image: amir20/dozzle:latest\n          ports:\n            - containerPort: 8080\n          env:\n            - name: DOZZLE_MODE\n              value: \"k8s\"\n---\n# service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: dozzle-service\nspec:\n  type: ClusterIP\n  selector:\n    app: dozzle\n  ports:\n    - port: 8080\n      targetPort: 8080\n      protocol: TCP\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Configuration for Dozzle\nDESCRIPTION: Complete Kubernetes configuration including RBAC setup, ServiceAccount, ClusterRole, ClusterRoleBinding, and Deployment manifests for Dozzle.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/getting-started.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: pod-viewer\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: pod-viewer-role\nrules:\n  - apiGroups: [\"\"]\n    resources: [\"pods\", \"pods/log\", \"nodes\"]\n    verbs: [\"get\", \"list\", \"watch\"]\n  - apiGroups: [\"metrics.k8s.io\"]\n    resources: [\"pods\"]\n    verbs: [\"get\", \"list\"]\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: pod-viewer-binding\nsubjects:\n  - kind: ServiceAccount\n    name: pod-viewer\n    namespace: default\nroleRef:\n  kind: ClusterRole\n  name: pod-viewer-role\n  apiGroup: rbac.authorization.k8s.io\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: dozzle\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: dozzle\n  template:\n    metadata:\n      labels:\n        app: dozzle\n    spec:\n      serviceAccountName: pod-viewer\n      containers:\n        - name: dozzle\n          image: amir20/dozzle:latest\n          ports:\n            - containerPort: 8080\n          env:\n            - name: DOZZLE_MODE\n              value: \"k8s\"\n```\n\n----------------------------------------\n\nTITLE: Deploying Dozzle in Docker Swarm Mode\nDESCRIPTION: This YAML configuration deploys Dozzle on every node in the swarm using global mode. It sets up the necessary environment variables, volumes, and network configuration for Swarm Mode.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/swarm-mode.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  dozzle:\n    image: amir20/dozzle:latest\n    environment:\n      - DOZZLE_MODE=swarm\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    ports:\n      - 8080:8080\n    networks:\n      - dozzle\n    deploy:\n      mode: global\nnetworks:\n  dozzle:\n    driver: overlay\n```\n\n----------------------------------------\n\nTITLE: Dozzle Docker Swarm Stack Configuration\nDESCRIPTION: Docker Swarm stack configuration for running Dozzle in global mode across all nodes with overlay network.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/getting-started.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  dozzle:\n    image: amir20/dozzle:latest\n    environment:\n      - DOZZLE_MODE=swarm\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    ports:\n      - 8080:8080\n    networks:\n      - dozzle\n    deploy:\n      mode: global\nnetworks:\n  dozzle:\n    driver: overlay\n```\n\n----------------------------------------\n\nTITLE: Connecting to Remote Docker Hosts with TLS Using Docker Compose\nDESCRIPTION: Docker Compose configuration for running Dozzle with TLS certificates to monitor remote Docker hosts. The remote hosts are specified as a comma-separated environment variable.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/remote-hosts.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  dozzle:\n    image: amir20/dozzle:latest\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n      - /path/to/certs:/certs\n    ports:\n      - 8080:8080\n    environment:\n      DOZZLE_REMOTE_HOST: tcp://167.99.1.1:2376,tcp://167.99.1.2:2376\n```\n\n----------------------------------------\n\nTITLE: Running Dozzle in Swarm Mode\nDESCRIPTION: Docker service create command to deploy Dozzle as a global service in Docker Swarm mode.\nSOURCE: https://github.com/amir20/dozzle/blob/master/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker service create --name dozzle --env DOZZLE_MODE=swarm --mode global --mount type=bind,source=/var/run/docker.sock,target=/var/run/docker.sock -p 8080:8080 amir20/dozzle:latest\n```\n\n----------------------------------------\n\nTITLE: Configuring Authelia for Dozzle Authentication\nDESCRIPTION: Complete Authelia YAML configuration file that sets up authentication for Dozzle. Includes jwt secrets, server settings, authentication backend, access control policies, session management, and storage configuration.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/authentication.md#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\njwt_secret: a_very_important_secret\ndefault_redirection_url: https://public.example.com\n\nserver:\n  host: 0.0.0.0\n  port: 9091\n\nlog:\n  level: info\n\ntotp:\n  issuer: authelia.com\n\nauthentication_backend:\n  file:\n    path: /config/users_database.yml\n\naccess_control:\n  default_policy: deny\n  rules:\n    - domain: traefik.example.com\n      policy: one_factor\n    - domain: dozzle.example.com\n      policy: one_factor\n\nsession:\n  secret: unsecure_session_secret\n  domain: example.com # Should match whatever your root protected domain is\n\nregulation:\n  max_retries: 3\n  find_time: 120\n  ban_time: 300\n\nstorage:\n  encryption_key: you_must_generate_a_random_string_of_more_than_twenty_chars_and_configure_this\n  local:\n    path: /config/db.sqlite3\n\nnotifier:\n  filesystem:\n    filename: /config/notification.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring Dozzle Agent with Docker Compose\nDESCRIPTION: Docker Compose configuration for running a Dozzle agent with socket mount and port exposure.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/agent.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  dozzle-agent:\n    image: amir20/dozzle:latest\n    command: agent\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n    ports:\n      - 7007:7007\n```\n\n----------------------------------------\n\nTITLE: Configuring Dozzle with Shell Access in Docker Compose\nDESCRIPTION: This docker-compose configuration sets up Dozzle with shell access enabled. It mounts the Docker socket, exposes port 8080, and sets the DOZZLE_ENABLE_SHELL environment variable to true.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/shell.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  dozzle:\n    image: amir20/dozzle:latest\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    ports:\n      - 8080:8080\n    environment:\n      DOZZLE_ENABLE_SHELL: true\n```\n\n----------------------------------------\n\nTITLE: Running Dozzle Agent with Docker CLI\nDESCRIPTION: Basic command to start a Dozzle agent using Docker run command. Mounts Docker socket and exposes port 7007.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/agent.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -v /var/run/docker.sock:/var/run/docker.sock -p 7007:7007 amir20/dozzle:latest agent\n```\n\n----------------------------------------\n\nTITLE: Configuring Extended Cookie Lifetime with Docker Compose\nDESCRIPTION: Docker Compose configuration for Dozzle with simple authentication and extended cookie TTL of 48 hours for longer user sessions.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/authentication.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  dozzle:\n    image: amir20/dozzle:latest\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n      - /path/to/dozzle/data:/data\n    ports:\n      - 8080:8080\n    environment:\n      DOZZLE_AUTH_PROVIDER: simple\n      DOZZLE_AUTH_TTL: 48h\n```\n\n----------------------------------------\n\nTITLE: Running Dozzle in Agent Mode\nDESCRIPTION: Docker run command to start Dozzle in agent mode for monitoring multiple Docker hosts.\nSOURCE: https://github.com/amir20/dozzle/blob/master/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -v /var/run/docker.sock:/var/run/docker.sock -p 7007:7007 amir20/dozzle:latest agent\n```\n\n----------------------------------------\n\nTITLE: Configuring Dozzle with Custom Base Path in Docker Compose\nDESCRIPTION: This Docker Compose configuration sets up Dozzle with a custom base path '/foobar' using the DOZZLE_BASE environment variable. It mounts the Docker socket and exposes port 8080.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/changing-base.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  dozzle:\n    image: amir20/dozzle:latest\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    ports:\n      - 8080:8080\n    environment:\n      DOZZLE_BASE: /foobar\n```\n\n----------------------------------------\n\nTITLE: Running Dozzle with File-Based Authentication via CLI\nDESCRIPTION: Command-line example for running Dozzle with simple file-based authentication, mounting the necessary volumes for Docker socket access and user data.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/authentication.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ docker run -v /var/run/docker.sock:/var/run/docker.sock -v /path/to/dozzle/data:/data -p 8080:8080 amir20/dozzle --auth-provider simple\n```\n\n----------------------------------------\n\nTITLE: Creating Container Groups in Dozzle using Docker CLI and Docker Compose\nDESCRIPTION: Examples showing how to add the dev.dozzle.group label to containers to create custom groups in Dozzle. The first example uses Docker CLI to run a container with a custom group label, and the second uses Docker Compose with the same labeling approach.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/container-groups.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndocker run --label dev.dozzle.group=myapp hello-world\n```\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  dozzle:\n    image: hello-world\n    labels:\n      - dev.dozzle.group=myapp\n```\n\n----------------------------------------\n\nTITLE: Setting Up File-Based Authentication with Docker Compose\nDESCRIPTION: Docker Compose configuration for deploying Dozzle with simple file-based authentication, including volume mounts for Docker socket and user data.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/authentication.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  dozzle:\n    image: amir20/dozzle:latest\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n      - /path/to/dozzle/data:/data\n    ports:\n      - 8080:8080\n    environment:\n      DOZZLE_AUTH_PROVIDER: simple\n```\n\n----------------------------------------\n\nTITLE: Connecting to Socket Proxy with Docker Compose\nDESCRIPTION: Docker Compose configuration for connecting Dozzle to a Docker Socket Proxy. This setup doesn't require TLS and is suitable for private network environments.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/remote-hosts.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  dozzle:\n    image: amir20/dozzle:latest\n    ports:\n      - 8080:8080\n    environment:\n      DOZZLE_REMOTE_HOST: tcp://123.1.1.1:2375\n```\n\n----------------------------------------\n\nTITLE: Enabling Dozzle Container Actions via Docker Compose\nDESCRIPTION: This Docker Compose configuration sets up Dozzle with container actions enabled through the DOZZLE_ENABLE_ACTIONS environment variable. It mounts the Docker socket and maps port 8080 to allow Dozzle to interact with Docker containers.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/actions.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  dozzle:\n    image: amir20/dozzle:latest\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    ports:\n      - 8080:8080\n    environment:\n      DOZZLE_ENABLE_ACTIONS: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Dozzle with Label Filters\nDESCRIPTION: YAML configuration for deploying Dozzle with label filters, restricting Dozzle to monitor only pods with specific labels in the Kubernetes cluster.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/k8s.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: dozzle\nspec:\n  selector:\n    matchLabels:\n      app: dozzle\n  template:\n    metadata:\n      labels:\n        app: dozzle\n    spec:\n      serviceAccountName: pod-viewer\n      containers:\n        - name: dozzle\n          image: amir20/dozzle:latest\n          ports:\n            - containerPort: 8080\n          env:\n            - name: DOZZLE_MODE\n              value: \"k8s\"\n            - name: DOZZLE_FILTER\n              value: \"env=prod\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Dozzle Container Actions via Docker Run Command\nDESCRIPTION: This command runs Dozzle with container actions enabled using the --enable-actions flag. It mounts the Docker socket and exposes port 8080 to allow Dozzle to interact with Docker containers.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/actions.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndocker run --volume=/var/run/docker.sock:/var/run/docker.sock -p 8080:8080 amir20/dozzle --enable-actions\n```\n\n----------------------------------------\n\nTITLE: Configuring User-Specific Filters in YAML\nDESCRIPTION: Example YAML configuration showing how to set different container visibility filters for admin and guest users in Dozzle.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/authentication.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nusers:\n  admin:\n    email:\n    name: Admin\n    password: $2a$11$9ho4vY2LdJ/WBopFcsAS0uORC0x2vuFHQgT/yBqZyzclhHsoaIkzK\n    filter:\n\n  guest:\n    email:\n    name: Guest\n    password: $2a$11$9ho4vY2LdJ/WBopFcsAS0uORC0x2vuFHQgT/yBqZyzclhHsoaIkzK\n    filter: \"label=com.example.app\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Logging in Docker Compose for Dozzle\nDESCRIPTION: Docker Compose configuration showing how to enable debug level logging for Dozzle by setting the DOZZLE_LEVEL environment variable. The configuration mounts the Docker socket and exposes port 8080.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/debugging.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  dozzle:\n    image: amir20/dozzle:latest\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    ports:\n      - 8080:8080\n    environment:\n      DOZZLE_LEVEL: debug\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Container Name in Docker Compose\nDESCRIPTION: Shows how to set a custom container name for Dozzle using the dev.dozzle.name label in a Docker Compose configuration file.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/container-names.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  dozzle:\n    image: hello-world\n    labels:\n      - dev.dozzle.name=hello\n```\n\n----------------------------------------\n\nTITLE: Configuring Dozzle with Namespace Restriction\nDESCRIPTION: YAML configuration for deploying Dozzle with a namespace restriction, limiting Dozzle to monitor only a specific namespace within the Kubernetes cluster.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/k8s.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: dozzle\nspec:\n  selector:\n    matchLabels:\n      app: dozzle\n  template:\n    metadata:\n      labels:\n        app: dozzle\n    spec:\n      serviceAccountName: pod-viewer\n      containers:\n        - name: dozzle\n          image: amir20/dozzle:latest\n          ports:\n            - containerPort: 8080\n          env:\n            - name: DOZZLE_MODE\n              value: \"k8s\"\n            - name: DOZZLE_NAMESPACE\n              value: \"default\"\n```\n\n----------------------------------------\n\nTITLE: Adding Host Labels with Docker Compose\nDESCRIPTION: Docker Compose configuration demonstrating how to add labels to multiple remote hosts. Each host has a unique label that will be displayed in the Dozzle UI.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/remote-hosts.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  dozzle:\n    image: amir20/dozzle:latest\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n      - /path/to/certs:/certs\n    ports:\n      - 8080:8080\n    environment:\n      DOZZLE_REMOTE_HOST: tcp://167.99.1.1:2376|foo.com,tcp://167.99.1.2:2376|bar.com\n```\n\n----------------------------------------\n\nTITLE: Starting a Docker Socket Proxy with Minimal Access\nDESCRIPTION: Command to run Docker Socket Proxy, exposing the Docker socket without requiring TLS. This configuration provides minimal access needed for Dozzle to monitor containers and system information.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/remote-hosts.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndocker container run --privileged -e CONTAINERS=1 -e INFO=1 -v /var/run/docker.sock:/var/run/docker.sock -p 2375:2375 tecnativa/docker-socket-proxy\n```\n\n----------------------------------------\n\nTITLE: Connecting to Dozzle Agent via Docker Compose\nDESCRIPTION: Docker Compose configuration for connecting to a Dozzle agent using environment variables.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/agent.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  dozzle:\n    image: amir20/dozzle:latest\n    environment:\n      - DOZZLE_REMOTE_AGENT=agent:7007\n    ports:\n      - 8080:8080 # Dozzle UI port\n```\n\n----------------------------------------\n\nTITLE: Adding Standalone Agents to Dozzle in Swarm Mode\nDESCRIPTION: This YAML configuration shows how to add standalone agents to Dozzle when running in Swarm Mode. It includes the DOZZLE_REMOTE_AGENT environment variable to connect to the agent.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/swarm-mode.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  dozzle:\n    image: amir20/dozzle:latest\n    environment:\n      - DOZZLE_MODE=swarm\n      - DOZZLE_REMOTE_AGENT=agent:7007\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    ports:\n      - 8080:8080\n    networks:\n      - dozzle\n    deploy:\n      mode: global\nnetworks:\n  dozzle:\n    driver: overlay\n```\n\n----------------------------------------\n\nTITLE: Running Dozzle with Label Filter in Docker\nDESCRIPTION: This command runs Dozzle in a Docker container with a filter to show only containers with a specific label. It mounts the Docker socket and exposes port 8080.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/filters.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndocker run --volume=/var/run/docker.sock:/var/run/docker.sock -p 8080:8080 amir20/dozzle --filter label=color\n```\n\n----------------------------------------\n\nTITLE: Configuring Forward Proxy Authentication with Docker Compose\nDESCRIPTION: Docker Compose configuration for setting up Dozzle with forward proxy authentication to work with external authentication providers.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/authentication.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  dozzle:\n    image: amir20/dozzle:latest\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    ports:\n      - 8080:8080\n    environment:\n      DOZZLE_AUTH_PROVIDER: forward-proxy\n```\n\n----------------------------------------\n\nTITLE: Running Dozzle with Custom Base Path using Docker\nDESCRIPTION: This command runs Dozzle in a Docker container with a custom base path '/foobar' using the '--base' flag. It mounts the Docker socket and exposes port 8080.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/changing-base.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndocker run --volume=/var/run/docker.sock:/var/run/docker.sock -p 8080:8080 amir20/dozzle --base /foobar\n```\n\n----------------------------------------\n\nTITLE: Complete Authelia Integration with Dozzle\nDESCRIPTION: Complete Docker Compose setup for integrating Dozzle with Authelia and Traefik for advanced authentication and access control.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/authentication.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nnetworks:\n  net:\n    driver: bridge\n\nservices:\n  authelia:\n    image: authelia/authelia\n    container_name: authelia\n    volumes:\n      - ./authelia:/config\n    networks:\n      - net\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.http.routers.authelia.rule=Host(`authelia.example.com`)\"\n      - \"traefik.http.routers.authelia.entrypoints=https\"\n      - \"traefik.http.routers.authelia.tls=true\"\n      - \"traefik.http.routers.authelia.tls.options=default\"\n      - \"traefik.http.middlewares.authelia.forwardauth.address=http://authelia:9091/api/verify?rd=https://authelia.example.com\"\n      - \"traefik.http.middlewares.authelia.forwardauth.trustForwardHeader=true\"\n      - \"traefik.http.middlewares.authelia.forwardauth.authResponseHeaders=Remote-User,Remote-Groups,Remote-Name,Remote-Email\"\n    expose:\n      - 9091\n    restart: unless-stopped\n\n  traefik:\n    image: traefik:2.10.5\n    container_name: traefik\n    volumes:\n      - ./traefik:/etc/traefik\n      - /var/run/docker.sock:/var/run/docker.sock\n    networks:\n      - net\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.http.routers.api.rule=Host(`traefik.example.com`)\"\n      - \"traefik.http.routers.api.entrypoints=https\"\n      - \"traefik.http.routers.api.service=api@internal\"\n      - \"traefik.http.routers.api.tls=true\"\n      - \"traefik.http.routers.api.tls.options=default\"\n      - \"traefik.http.routers.api.middlewares=authelia@docker\"\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    command:\n      - \"--api\"\n      - \"--providers.docker=true\"\n      - \"--providers.docker.exposedByDefault=false\"\n      - \"--providers.file.filename=/etc/traefik/certificates.yml\"\n      - \"--entrypoints.http=true\"\n      - \"--entrypoints.http.address=:80\"\n      - \"--entrypoints.http.http.redirections.entrypoint.to=https\"\n      - \"--entrypoints.http.http.redirections.entrypoint.scheme=https\"\n      - \"--entrypoints.https=true\"\n      - \"--entrypoints.https.address=:443\"\n      - \"--log=true\"\n      - \"--log.level=DEBUG\"\n\n  dozzle:\n    image: amir20/dozzle:latest\n    networks:\n      - net\n    environment:\n      DOZZLE_AUTH_PROVIDER: forward-proxy\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.http.routers.dozzle.rule=Host(`dozzle.example.com`)\"\n      - \"traefik.http.routers.dozzle.entrypoints=https\"\n      - \"traefik.http.routers.dozzle.tls=true\"\n      - \"traefik.http.routers.dozzle.tls.options=default\"\n      - \"traefik.http.routers.dozzle.middlewares=authelia@docker\"\n    expose:\n      - 8080\n    restart: unless-stopped\n```\n\n----------------------------------------\n\nTITLE: Running Dozzle with Forward Proxy Authentication via CLI\nDESCRIPTION: Command-line example for running Dozzle with forward proxy authentication, which reads authentication headers from a proxy server.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/authentication.md#2025-04-21_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\n$ docker run -v /var/run/docker.sock:/var/run/docker.sock -p 8080:8080 amir20/dozzle --auth-provider forward-proxy\n```\n\n----------------------------------------\n\nTITLE: Setting Up Dozzle with Cloudflare Zero Trust Authentication\nDESCRIPTION: Docker Compose configuration for deploying Dozzle with Cloudflare Zero Trust authentication. Configures environment variables to use forward-proxy authentication with Cloudflare's authentication headers.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/authentication.md#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  dozzle:\n    image: amir20/dozzle:latest\n    networks:\n      - net\n    environment:\n      DOZZLE_AUTH_PROVIDER: forward-proxy\n      DOZZLE_AUTH_HEADER_USER: Cf-Access-Authenticated-User-Email\n      DOZZLE_AUTH_HEADER_EMAIL: Cf-Access-Authenticated-User-Email\n      DOZZLE_AUTH_HEADER_NAME: Cf-Access-Authenticated-User-Email\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    expose:\n      - 8080\n    restart: unless-stopped\n```\n\n----------------------------------------\n\nTITLE: Running Dozzle with Podman\nDESCRIPTION: Podman run command to start Dozzle with the Podman socket mounted appropriately.\nSOURCE: https://github.com/amir20/dozzle/blob/master/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npodman run --volume=/run/user/1000/podman/podman.sock:/var/run/docker.sock -d -p 8080:8080 docker.io/amir20/dozzle:latest\n```\n\n----------------------------------------\n\nTITLE: Following Log Files with Docker Compose and Alpine\nDESCRIPTION: A Docker Compose configuration that creates a persistent container to follow a log file on disk. This setup uses Alpine to tail the file with minimal resource usage and can survive server reboots.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/log-files-on-disk.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  dozzle-from-file:\n    container_name: dozzle-from-file\n    image: alpine\n    volumes:\n      - /var/log/system.log:/var/log/stream.log\n    command:\n      - tail\n      - -f\n      - /var/log/stream.log\n    network_mode: none\n    restart: unless-stopped\n```\n\n----------------------------------------\n\nTITLE: Connecting to Dozzle Agent via Docker CLI\nDESCRIPTION: Command to connect to a Dozzle agent using Docker run command with remote agent configuration.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/agent.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -p 8080:8080 amir20/dozzle:latest --remote-agent agent-ip:7007\n```\n\n----------------------------------------\n\nTITLE: Setting Up Filters for Dozzle Agent\nDESCRIPTION: Docker Compose configuration showing how to set up container filters for a Dozzle agent.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/agent.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  dozzle-agent:\n    image: amir20/dozzle:latest\n    command: agent\n    environment:\n      - DOZZLE_FILTER=label=color\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n```\n\n----------------------------------------\n\nTITLE: Running Dozzle in Agent Mode\nDESCRIPTION: This command runs Dozzle in agent mode, which allows monitoring a different Docker host. It mounts the Docker socket and exposes port 8080, while specifying a remote agent IP and port.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/supported-env-vars.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndocker run --volume=/var/run/docker.sock:/var/run/docker.sock -p 8080:8080 amir20/dozzle --remote-agent remote-ip:7007\n```\n\n----------------------------------------\n\nTITLE: Custom Certificate Configuration for Dozzle Agent\nDESCRIPTION: Docker Compose configuration for setting up custom TLS certificates using Docker secrets.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/agent.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  agent:\n    image: amir20/dozzle:latest\n    command: agent\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    secrets:\n      - source: cert\n        target: /dozzle_cert.pem\n      - source: key\n        target: /dozzle_key.pem\n    ports:\n      - 7007:7007\nsecrets:\n  cert:\n    file: ./cert.pem\n  key:\n    file: ./key.pem\n```\n\n----------------------------------------\n\nTITLE: Running Dozzle with Custom Hostname Using Docker Command\nDESCRIPTION: This command runs Dozzle in a Docker container with a custom hostname 'mywebsite.xyz'. It mounts the Docker socket and exposes port 8080 for web access.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/hostname.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndocker run --volume=/var/run/docker.sock:/var/run/docker.sock -p 8080:8080 amir20/dozzle --hostname mywebsite.xyz\n```\n\n----------------------------------------\n\nTITLE: Configuring Dozzle with Docker Secrets\nDESCRIPTION: Docker Compose configuration for setting up Dozzle authentication using Docker secrets to securely manage user credentials.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/authentication.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  dozzle:\n    image: amir20/dozzle:latest\n    environment:\n      - DOZZLE_AUTH_PROVIDER=simple\n    secrets:\n      - source: users\n        target: /data/users.yml\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n      - dozzle:/data\nsecrets:\n  users:\n    file: users.yml\nvolumes:\n  dozzle:\n```\n\n----------------------------------------\n\nTITLE: Adding Host Labels with CLI\nDESCRIPTION: Command line example showing how to add a custom label to a remote host connection. The label is appended to the connection string with a pipe character and will be displayed in the UI.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/remote-hosts.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ndocker run --volume=/var/run/docker.sock:/var/run/docker.sock -p 8080:8080 amir20/dozzle --remote-host tcp://123.1.1.1:2375|foobar.com\n```\n\n----------------------------------------\n\nTITLE: Setting Up Simple Authentication for Dozzle in Swarm Mode\nDESCRIPTION: This YAML configuration demonstrates how to set up simple authentication for Dozzle in Swarm Mode using Docker secrets to store the users.yml file. It includes environment variables for authentication and debug logging.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/swarm-mode.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  dozzle:\n    image: amir20/dozzle:latest\n    environment:\n      - DOZZLE_LEVEL=debug\n      - DOZZLE_MODE=swarm\n      - DOZZLE_AUTH_PROVIDER=simple\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    secrets:\n      - source: users\n        target: /data/users.yml\n\n    ports:\n      - \"8080:8080\"\n    networks:\n      - dozzle\n    deploy:\n      mode: global\n\nnetworks:\n  dozzle:\n    driver: overlay\nsecrets:\n  users:\n    file: users.yml\n```\n\n----------------------------------------\n\nTITLE: Mounting Local Log Files with Alpine using Docker Run\nDESCRIPTION: A Docker run command that mounts a host system log file into an Alpine container and uses tail to follow it, allowing Dozzle to access logs written to files on disk.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/log-files-on-disk.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -v /var/log/system.log:/var/log/test.log alpine tail -f /var/log/test.log\n```\n\n----------------------------------------\n\nTITLE: Configuring Dozzle with Label Filter in Docker Compose\nDESCRIPTION: This Docker Compose configuration sets up Dozzle with a filter to show only containers with a specific label. It mounts the Docker socket, exposes port 8080, and sets the filter using an environment variable.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/filters.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  dozzle:\n    image: amir20/dozzle:latest\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    ports:\n      - 8080:8080\n    environment:\n      DOZZLE_FILTER: label=color\n```\n\n----------------------------------------\n\nTITLE: Creating UUID and engine-id using Ansible for Dozzle with Podman\nDESCRIPTION: This Ansible snippet creates the /var/lib/docker directory and generates a UUID derived from the hostname, writing it to the engine-id file. This helps resolve issues with Dozzle when using Podman.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/podman.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Create /var/lib/docker\n  ansible.builtin.file:\n    path: /var/lib/docker\n    state: directory\n    mode: \"755\"\n\n- name: Create engine-id and derive UUID from hostname\n  ansible.builtin.lineinfile:\n    path: /var/lib/docker/engine-id\n    line: \"{{ hostname | to_uuid }}\"\n    create: true\n    mode: \"0644\"\n    insertafter: \"EOF\"\n```\n\n----------------------------------------\n\nTITLE: Connecting to Remote Docker Hosts with TLS Using CLI\nDESCRIPTION: Command line example for running Dozzle in a container with TLS certificates mounted to monitor remote Docker hosts. The certificates must be mounted to the /certs directory and multiple remote hosts can be specified.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/remote-hosts.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -v /var/run/docker.sock:/var/run/docker.sock -v /path/to/certs:/certs -p 8080:8080 amir20/dozzle --remote-host tcp://167.99.1.1:2376 --remote-host tcp://167.99.1.2:2376\n```\n\n----------------------------------------\n\nTITLE: Generating Custom Certificates for Dozzle Agent\nDESCRIPTION: Commands for generating custom TLS certificates for secure agent communication.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/agent.md#2025-04-21_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\n$ openssl genpkey -algorithm Ed25519 -out key.pem\n$ openssl req -new -key key.pem -out request.csr -subj \"/C=US/ST=California/L=San Francisco/O=My Company\"\n$ openssl x509 -req -in request.csr -signkey key.pem -out cert.pem -days 365\n```\n\n----------------------------------------\n\nTITLE: Connecting to Socket Proxy with CLI\nDESCRIPTION: Command line example for running Dozzle to connect to a Docker Socket Proxy without TLS certificates. This approach is suitable for private networks where TLS is not required.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/remote-hosts.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -p 8080:8080 amir20/dozzle --remote-host tcp://123.1.1.1:2375\n```\n\n----------------------------------------\n\nTITLE: Verifying Metrics API Installation\nDESCRIPTION: Bash command to verify that the Kubernetes Metrics API is running properly by checking pod resource usage.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/k8s.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl top pod\n```\n\n----------------------------------------\n\nTITLE: Running Dozzle with Shell Access Enabled using Docker Command\nDESCRIPTION: This command runs Dozzle with shell access enabled by mounting the Docker socket and setting the enable-shell flag. It exposes port 8080 for web interface access.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/shell.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndocker run --volume=/var/run/docker.sock:/var/run/docker.sock -p 8080:8080 amir20/dozzle --enable-shell\n```\n\n----------------------------------------\n\nTITLE: Counting Log Entries with SQL\nDESCRIPTION: A simple SQL query that counts the total number of log entries in the logs table. This is useful for getting a quick overview of the volume of logs.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/sql-engine.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT COUNT(*) FROM logs\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx Proxy for Dozzle with Custom Base Path\nDESCRIPTION: This Nginx configuration sets up a proxy for Dozzle with a custom base path '/foobar'. It includes necessary proxy settings for WebSocket support and disables caching and buffering.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/changing-base.md#2025-04-21_snippet_2\n\nLANGUAGE: nginx\nCODE:\n```\nlocation ^~ /foobar/ {\n    set $upstream_app dozzle;\n    set $upstream_port 8080;\n    set $upstream_proto http;\n    proxy_pass $upstream_proto://$upstream_app:$upstream_port;\n\n    chunked_transfer_encoding off;\n    proxy_buffering off;\n    proxy_cache off;\n    proxy_http_version 1.1;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection \"upgrade\";\n}\n```\n\n----------------------------------------\n\nTITLE: VitePress Home Page Configuration for Dozzle\nDESCRIPTION: YAML front matter configuration for Dozzle's home page using VitePress. It defines the page layout, title, hero section with call-to-action buttons, and a comprehensive feature list highlighting Dozzle's container monitoring and logging capabilities.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# https://vitepress.dev/reference/default-theme-home-page\nlayout: home\n\ntitle: Home\n\nhero:\n  name: \"Dozzle\"\n  tagline: Simple Container Monitoring and Logging\n  actions:\n    - theme: brand\n      text: Get Started\n      link: /guide/getting-started\n    - theme: alt\n      text: View on GitHub\n      link: https://github.com/amir20/dozzle\n    - theme: alt\n      text: Support 🙏🏼\n      link: https://www.buymeacoffee.com/amirraminfar\n\nfeatures:\n  - title: Self Hosted\n    details: Dozzle is a self-hosted application that runs in your own infrastructure, ensuring your logs remain private and secure.\n    icon: 🏠\n  - title: Real-time Logging & Monitoring\n    details: Captures real-time Docker container logs, enabling quick and efficient issue diagnosis.\n    icon: 🚀\n  - title: Shell Support\n    details: Supports shell access to containers, allowing you to attach or execute commands directly from the browser.\n    link: /guide/shell\n    linkText: Learn More\n    icon: 💻\n  - title: Multi-host Support\n    details: UI support connecting to multiple remote hosts with a simple drop down to choose between different hosts.\n    link: /guide/remote-hosts\n    linkText: Learn More\n    icon: 🌐\n  - title: SQL Engine\n    details: Use SQL queries to analyze logs inside your browser with WebAssembly and DuckDB.\n    icon: 📊\n    linkText: Learn More\n    link: /guide/sql-engine\n  - title: Secured Agents\n    details: Connect to remote hosts securely with agents, providing a more secure way to connect to remote hosts.\n    icon: 🔒\n    link: /guide/agent\n    linkText: Learn More\n  - title: Swarm Support\n    link: /guide/swarm-mode\n    details: Supports Docker Swarm mode, allowing you to manage and monitor your swarm clusters across multiple hosts.\n    icon: 🐳\n    linkText: Learn More\n  - title: Sponsored by Docker OSS\n    details: Dozzle is open source and free to use, with the source code available on GitHub.\n    icon: 📜\n    link: https://hub.docker.com/r/amir20/dozzle\n    linkText: Docker Hub\n```\n\n----------------------------------------\n\nTITLE: Configuring Dozzle Healthcheck in Docker Compose YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure the Dozzle service with healthcheck in a Docker Compose file. It sets up the container to run the 'dozzle healthcheck' command every 3 seconds, with specific timeout, retry, and start period settings.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/healthcheck.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  dozzle:\n    image: amir20/dozzle:latest\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    ports:\n      - 8080:8080\n    healthcheck:\n      test: [\"CMD\", \"/dozzle\", \"healthcheck\"]\n      interval: 3s\n      timeout: 30s\n      retries: 5\n      start_period: 30s\n```\n\n----------------------------------------\n\nTITLE: Enabling Memory Limit Support on ARM Devices\nDESCRIPTION: Configuration to enable memory limit support on ARM devices by modifying the boot command line parameters.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/faq.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncgroup_enable=cpuset cgroup_enable=memory cgroup_memory=1\n```\n\n----------------------------------------\n\nTITLE: Dozzle Agent Healthcheck Configuration\nDESCRIPTION: Docker Compose configuration showing how to set up healthcheck for a Dozzle agent.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/agent.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  dozzle-agent:\n    image: amir20/dozzle:latest\n    command: agent\n    healthcheck:\n      test: [\"CMD\", \"/dozzle\", \"healthcheck\"]\n      interval: 5s\n      retries: 5\n      start_period: 5s\n      start_interval: 5s\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n    ports:\n      - 7007:7007\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Hostname for Dozzle Agent\nDESCRIPTION: Examples of setting custom hostname for a Dozzle agent using both Docker CLI and Compose.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/agent.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -v /var/run/docker.sock:/var/run/docker.sock -p 7007:7007 amir20/dozzle:latest agent --hostname my-special-name\n```\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  dozzle-agent:\n    image: amir20/dozzle:latest\n    command: agent\n    environment:\n      - DOZZLE_HOSTNAME=my-special-name\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n    ports:\n      - 7007:7007\n```\n\n----------------------------------------\n\nTITLE: Configuring Dozzle with Custom Hostname in Docker Compose\nDESCRIPTION: This docker-compose configuration sets up Dozzle with a custom hostname using the DOZZLE_HOSTNAME environment variable. It mounts the Docker socket and exposes port 8080 for web access.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/hostname.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  dozzle:\n    image: amir20/dozzle:latest\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    ports:\n      - 8080:8080\n    environment:\n      DOZZLE_HOSTNAME: mywebsite.xyz\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx Proxy for Dozzle\nDESCRIPTION: Nginx configuration to disable buffering for Dozzle's SSE connections. This setup prevents log streaming issues by disabling proxy buffering and caching for the /api endpoint.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/faq.md#2025-04-21_snippet_0\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n    ...\n\n    location / {\n        proxy_pass                  http://<dozzle.container.ip.address>:8080;\n    }\n\n    location /api {\n        proxy_pass                  http://<dozzle.container.ip.address>:8080;\n\n        proxy_buffering             off;\n        proxy_cache                 off;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik Compression Middleware\nDESCRIPTION: Traefik configuration to exclude text/event-stream from compression, preventing log streaming issues in Dozzle when accessed through Traefik reverse proxy.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/faq.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  middlewares:\n    middlewares-compress:\n      compress:\n        excludedContentTypes:\n          - text/event-stream\n```\n\n----------------------------------------\n\nTITLE: Installing Kubernetes Metrics API\nDESCRIPTION: Bash command to install the Kubernetes Metrics API, which is required for Dozzle to retrieve resource usage information in Kubernetes environments.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/k8s.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml\n```\n\n----------------------------------------\n\nTITLE: Deploy Dozzle Stack Command\nDESCRIPTION: Command to deploy Dozzle stack configuration in Docker Swarm mode.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/getting-started.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker stack deploy -c dozzle-stack.yml <name>\n```\n\n----------------------------------------\n\nTITLE: Deploy Dozzle Kubernetes Configuration\nDESCRIPTION: Command to apply Kubernetes configuration for Dozzle deployment.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/getting-started.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f k8s-dozzle.yml\n```\n\n----------------------------------------\n\nTITLE: Generating User Configuration File\nDESCRIPTION: Command to generate a users.yml file with Dozzle's built-in generate command, creating an admin user with password, email, name, and user filter.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/authentication.md#2025-04-21_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -it --rm amir20/dozzle generate admin --password password --email test@email.net --name \"John Doe\" --user-filter name=foo > users.yml\n```\n\n----------------------------------------\n\nTITLE: Generating users.yml for Dozzle Authentication\nDESCRIPTION: This command generates a users.yml file for Dozzle authentication. It creates a user 'admin' with the specified password, email, and name. The output is redirected to a users.yml file.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/supported-env-vars.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -it --rm amir20/dozzle generate admin --password password --email test@email.net --name \"John Doe\" > users.yml\n```\n\n----------------------------------------\n\nTITLE: Extending Authentication Cookie Lifetime via CLI\nDESCRIPTION: Command-line example for running Dozzle with extended authentication cookie lifetime, setting the TTL to 48 hours for longer sessions.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/authentication.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n$ docker run -v /var/run/docker.sock:/var/run/docker.sock -v /path/to/dozzle/data:/data -p 8080:8080 amir20/dozzle --auth-provider simple --auth-ttl 48h\n```\n\n----------------------------------------\n\nTITLE: VitePress Team Page Component Configuration\nDESCRIPTION: Configures a team page layout using VitePress components and defines team member data with social media links and profile information. Uses Vue.js script setup syntax to initialize components and data.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/team.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport {\n  VPTeamPage,\n  VPTeamPageTitle,\n  VPTeamMembers\n} from 'vitepress/theme'\n\nconst members = [\n  {\n    avatar: 'https://www.github.com/amir20.png',\n    name: 'Amir Raminfar',\n    title: 'Creator',\n    links: [\n      { icon: 'github', link: 'https://github.com/amir20' },\n      { icon: 'linkedin', link: 'https://www.linkedin.com/in/amirraminfar' },\n      { icon: {svg: '<svg fill=\"#000000\" width=\"800px\" height=\"800px\" viewBox=\"0 0 24 24\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"m20.216 6.415-.132-.666c-.119-.598-.388-1.163-1.001-1.379-.197-.069-.42-.098-.57-.241-.152-.143-.196-.366-.231-.572-.065-.378-.125-.756-.192-1.133-.057-.325-.102-.69-.25-.987-.195-.4-.597-.634-.996-.788a5.723 5.723 0 0 0-.626-.194c-1-.263-2.05-.36-3.077-.416a25.834 25.834 0 0 0-3.7.062c-.915.083-1.88.184-2.75.5-.318.116-.646.256-.888.501-.297.302-.393.77-.177 1.146.154.267.415.456.692.58.36.162.737.284 1.123.366 1.075.238 2.189.331 3.287.37 1.218.05 2.437.01 3.65-.118.299-.033.598-.073.896-.119.352-.054.578-.513.474-.834-.124-.383-.457-.531-.834-.473-.466.074-.96.108-1.382.146-1.177.08-2.358.082-3.536.006a22.228 22.228 0 0 1-1.157-.107c-.086-.01-.18-.025-.258-.036-.243-.036-.484-.08-.724-.13-.111-.027-.111-.185 0-.212h.005c.277-.06.557-.108.838-.147h.002c.131-.009.263-.032.394-.048a25.076 25.076 0 0 1 3.426-.12c.674.019 1.347.067 2.017.144l.228.031c.267.04.533.088.798.145.392.085.895.113 1.07.542.055.137.08.288.111.431l.319 1.484a.237.237 0 0 1-.199.284h-.003c-.037.006-.075.01-.112.015a36.704 36.704 0 0 1-4.743.295 37.059 37.059 0 0 1-4.699-.304c-.14-.017-.293-.042-.417-.06-.326-.048-.649-.108-.973-.161-.393-.065-.768-.032-1.123.161-.29.16-.527.404-.675.701-.154.316-.199.66-.267 1-.069.34-.176.707-.135 1.056.087.753.613 1.365 1.37 1.502a39.69 39.69 0 0 0 11.343.376.483.483 0 0 1 .535.53l-.071.697-1.018 9.907c-.041.41-.047.832-.125 1.237-.122.637-.553 1.028-1.182 1.171-.577.131-1.165.2-1.756.205-.656.004-1.31-.025-1.966-.022-.699.004-1.556-.06-2.095-.58-.475-.458-.54-1.174-.605-1.793l-.731-7.013-.322-3.094c-.037-.351-.286-.695-.678-.678-.336.015-.718.3-.678.679l.228 2.185.949 9.112c.147 1.344 1.174 2.068 2.446 2.272.742.12 1.503.144 2.257.156.966.016 1.942.053 2.892-.122 1.408-.258 2.465-1.198 2.616-2.657.34-3.332.683-6.663 1.024-9.995l.215-2.087a.484.484 0 0 1 .39-.426c.402-.078.787-.212 1.074-.518.455-.488.546-1.124.385-1.766zm-1.478.772c-.145.137-.363.201-.578.233-2.416.359-4.866.54-7.308.46-1.748-.06-3.477-.254-5.207-.498-.17-.024-.353-.055-.47-.18-.22-.236-.111-.71-.054-.995.052-.26.152-.609.463-.646.484-.057 1.046.148 1.526.22.577.088 1.156.159 1.737.212 2.48.226 5.002.19 7.472-.14.45-.06.899-.13 1.345-.21.399-.072.84-.206 1.08.206.166.281.188.657.162.974a.544.544 0 0 1-.169.364zm-6.159 3.9c-.862.37-1.84.788-3.109.788a5.884 5.884 0 0 1-1.569-.217l.877 9.004c.065.78.717 1.38 1.5 1.38 0 0 1.243.065 1.658.065.447 0 1.786-.065 1.786-.065.783 0 1.434-.6 1.499-1.38l.94-9.95a3.996 3.996 0 0 0-1.322-.238c-.826 0-1.491.284-2.26.613z\"/></svg>'}, link: 'https://www.buymeacoffee.com/amirraminfar' }\n    ]\n  }\n]\n</script>\n\n<VPTeamPage>\n  <VPTeamPageTitle>\n    <template #title>\n      Team\n    </template>\n    <template #lead>\n      Dozzle is created and maintained by the following people.\n    </template>\n  </VPTeamPageTitle>\n  <VPTeamMembers\n    :members=\"members\"\n  />\n</VPTeamPage>\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Container Name Using Docker Run Command\nDESCRIPTION: Demonstrates how to set a custom container name for Dozzle using the dev.dozzle.name label with Docker run command.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/container-names.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndocker run --label dev.dozzle.name=hello hello-world\n```\n\n----------------------------------------\n\nTITLE: Checking Podman Remote Socket Configuration\nDESCRIPTION: Command to verify if Podman has the remote socket enabled, which is required for Dozzle.\nSOURCE: https://github.com/amir20/dozzle/blob/master/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npodman info\n```\n\n----------------------------------------\n\nTITLE: Example Users Configuration File\nDESCRIPTION: Sample users.yml file that defines an admin user with email, name, and bcrypt-hashed password for Dozzle's file-based authentication.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/authentication.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nusers:\n  admin:\n    email: me@email.net\n    name: Admin\n    password: $2a$11$9ho4vY2LdJ/WBopFcsAS0uORC0x2vuFHQgT/yBqZyzclhHsoaIkzK\n```\n\n----------------------------------------\n\nTITLE: Creating a Virtual Table from JSON Logs with DuckDB\nDESCRIPTION: This SQL query creates a virtual table named 'logs' by unnesting JSON log data from a source file. It's used internally by Dozzle to prepare log data for SQL querying.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/sql-engine.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE logs AS SELECT unnest(m) FROM 'logs.json'\n```\n\n----------------------------------------\n\nTITLE: Filtering Logs by a Specific Field\nDESCRIPTION: This SQL query filters logs to only show entries with a 'level' field set to 'error'. Useful for isolating error messages in your logs.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/sql-engine.md#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM logs WHERE level = 'error'\n```\n\n----------------------------------------\n\nTITLE: Grouping and Counting Logs by a Field\nDESCRIPTION: This SQL query groups logs by the 'level' field and counts the occurrences of each level. It's helpful for understanding the distribution of log levels in your data.\nSOURCE: https://github.com/amir20/dozzle/blob/master/docs/guide/sql-engine.md#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT level, COUNT(*) FROM logs GROUP BY level\n```"
  }
]