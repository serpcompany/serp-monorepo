[
  {
    "owner": "emgucv",
    "repo": "emgucv",
    "content": "TITLE: Generating C# Properties for cv::FileNode using CMake\nDESCRIPTION: This snippet uses the `CREATE_OCV_CLASS_PROPERTY` CMake macro to generate C# wrapper properties for the `cv::FileNode` C++ class, used for reading YAML/XML data. It defines boolean properties like `IsNamed`, `IsEmpty`, `IsSeq`, `IsMap`, `IsInt`, `IsReal`, and `IsString` to check the node's type and status. The output is `Emgu.CV/Core/FileNode.g.cs` in the `Emgu.CV` namespace, using `CvInvoke`. It requires `core_c_extra.h` and depends on `HAVE_opencv_core`.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\nCREATE_OCV_CLASS_PROPERTY( \n    \"core/file_node_property\" \n    \"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV/Core/FileNode.g.cs\"\n    \"cv::FileNode\" \n    \"FileNode\" \n    \"isNamed;empty;isNone;isSeq;isMap;isInt;isReal;isString\" \n    \"bool;bool;bool;bool;bool;bool;bool;bool\" \n    \"val;val;val;val;val;val;val;val\"\n    \"IsNamed;IsEmpty;IsNone;IsSeq;IsMap;IsInt;IsReal;IsString\" \n    \"bool;bool;bool;bool;bool;bool;bool;bool\"\n    \"Returns true if the node has a name;\\n\\tReturns true if the node is empty;\\n\\tReturns true if the node is a \\\"none\\\" object;\\n\\tReturns true if the node is a sequence;\\n\\tReturns true if the node is a mapping;\\n\\tReturns true if the node is an integer;\\n\\tReturns true if the node is a floating-point number;\\n\\tReturns true if the node is a text string\"\n    \"Emgu.CV\"\n    \"CvInvoke\"\n    \"FileNode\"\n\t\"\"\n    \"#include \\\"core_c_extra.h\\\"\"\n\t\"\"\n\t\"\"\n\t${HAVE_opencv_core})\n```\n\n----------------------------------------\n\nTITLE: Macro for Generating Vector Type Bindings between OpenCV and C# - CMake\nDESCRIPTION: This macro encapsulates logic for code generation of vector bindings across C/C++ and C#, handling different types of vector elements (struct, object, vector of vectors, etc). It accepts arguments specifying vector details, generates necessary includes and source files using CONFIGURE_FILE, and allows conditional compilation based on both C/C++ and C# conditions. It expects correct template arguments and assumes file layout conventions for input/output templates as prerequisites.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nMACRO(CREATE_VECTOR_CS vname velement velement_cs element_type cs_source_folder namespace_cs cs_compilation_condition additional_c_header additional_c_code c_compilation_condition )\n  SET(VECTOR_NAME ${vname})\n  SET(VECTOR_ELEMENT ${velement})\n  SET(VECTOR_ELEMENT_CS ${velement_cs})\n  SET(NAMESPACE_CS ${namespace_cs})\n  SET(IS_VECTOR_OF_VECTOR false)\n  \n  SET(VECTOR_ADDITIONAL_INCLUDE \"\")\n  SET(VECTOR_ADDITIONAL_CODE \"\")\n  \n  #SET(extra_macro_args ${ARGN})\n  # Did we get any optional args?\n  #LIST(LENGTH extra_macro_args num_extra_args)\n  #IF (${num_extra_args} GREATER 0)\n  #  list(GET extra_macro_args 0 additional_c_header)\n    SET(VECTOR_ADDITIONAL_INCLUDE ${additional_c_header})\n  #ENDIF()\n  #IF (${num_extra_args} GREATER 1)\n  #  list(GET extra_macro_args 1 additional_c_code)\n    SET(VECTOR_ADDITIONAL_CODE ${additional_c_code})\n  #ENDIF()\n\n  SET(COMPILATION_CONDITION_CS_OPEN \"\")\n  SET(COMPILATION_CONDITION_CS_CLOSE \"\")  \n#  IF (NOT (\"${cs_compilation_condition}\" STREQUAL \"\"))\n#\tSET(COMPILATION_CONDITION_CS_OPEN \"#if ${cs_compilation_condition}\")\n#\tSET(COMPILATION_CONDITION_CS_CLOSE \"#endif\")\n#  ENDIF()\n\n  #SET(COMPILATION_CONDITION_C_OPEN \"\")\n  #SET(COMPILATION_CONDITION_C_CLOSE \"\")    \n  #IF (NOT (\"${c_compilation_condition}\" STREQUAL \"\"))\n\tSET(COMPILATION_CONDITION_C_OPEN \"#if ${c_compilation_condition}\")\n\tSET(COMPILATION_CONDITION_C_ELSE \"#else\")\n\tSET(COMPILATION_CONDITION_C_CLOSE \"#endif\")\n  #ENDIF()\n  \n  if (${element_type} STREQUAL \"struct\")\n    SET(IS_INPUT_OUTPUT_ARRAY true)\n    CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/vectorOfStruct_c.h.in ${CMAKE_CURRENT_SOURCE_DIR}/vector_${VECTOR_NAME}.h)\n    CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/vectorOfStruct_c.cpp.in ${CMAKE_CURRENT_SOURCE_DIR}/vector_${VECTOR_NAME}.cpp)\n    CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/VectorOfStruct.cs.in ${cs_source_folder}/VectorOf${VECTOR_NAME}.cs)\n  ELSEIF(${element_type} STREQUAL \"struct_not_array\")\n    SET(IS_INPUT_OUTPUT_ARRAY false)\n    CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/vectorOfStruct_c.h.in ${CMAKE_CURRENT_SOURCE_DIR}/vector_${VECTOR_NAME}.h)\n    CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/vectorOfStruct_c.cpp.in ${CMAKE_CURRENT_SOURCE_DIR}/vector_${VECTOR_NAME}.cpp)\n    CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/VectorOfStruct.cs.in ${cs_source_folder}/VectorOf${VECTOR_NAME}.cs)\n  ELSEIF(${element_type} STREQUAL \"vector\")\n    SET(VECTOR_ELEMENT_CS ${vname})\n    SET(ELEMENT_OF_ELEMENT ${velement_cs})\n    SET(IS_VECTOR_OF_VECTOR true)\n    CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/vectorOfObject_c.h.in ${CMAKE_CURRENT_SOURCE_DIR}/vector_${VECTOR_NAME}.h)\n    CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/vectorOfObject_c.cpp.in ${CMAKE_CURRENT_SOURCE_DIR}/vector_${VECTOR_NAME}.cpp)\n    CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/VectorOfObject.cs.in ${cs_source_folder}/VectorOf${VECTOR_NAME}.cs)\n  ELSEIF(${element_type} STREQUAL \"object\") \n    SET(IS_INPUT_OUTPUT_ARRAY true)\n    CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/vectorOfObject_c.h.in ${CMAKE_CURRENT_SOURCE_DIR}/vector_${VECTOR_NAME}.h)\n    CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/vectorOfObject_c.cpp.in ${CMAKE_CURRENT_SOURCE_DIR}/vector_${VECTOR_NAME}.cpp)\n    CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/VectorOfObject.cs.in ${cs_source_folder}/VectorOf${VECTOR_NAME}.cs)\n  ELSEIF(${element_type} STREQUAL \"object_not_array\") \n    SET(IS_INPUT_OUTPUT_ARRAY false)\n    CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/vectorOfObject_c.h.in ${CMAKE_CURRENT_SOURCE_DIR}/vector_${VECTOR_NAME}.h)\n    CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/vectorOfObject_c.cpp.in ${CMAKE_CURRENT_SOURCE_DIR}/vector_${VECTOR_NAME}.cpp)\n    CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/VectorOfObject.cs.in ${cs_source_folder}/VectorOf${VECTOR_NAME}.cs)\n  ENDIF()\nENDMACRO()\n```\n\n----------------------------------------\n\nTITLE: Generating C# Properties for cv::cuda::GpuMat using CMake\nDESCRIPTION: This snippet utilizes the `CREATE_OCV_CLASS_PROPERTY` CMake macro to generate C# wrapper properties for the `cv::cuda::GpuMat` C++ class, representing a matrix stored in GPU memory. It defines properties like `IsContinuous`, `Depth`, `IsEmpty`, and `NumberOfChannels`, mapping C++ types (`bool`, `int`) to C# types (`bool`, `CvEnum.DepthType`, `int`). The output file is `Emgu.CV.Cuda/GpuMat.g.cs` in the `Emgu.CV.Cuda` namespace, using `CudaInvoke`. It requires `opencv2/core/cuda.hpp` and `opencv2/core/types_c.h`, and depends on `HAVE_opencv_core`.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nCREATE_OCV_CLASS_PROPERTY( \n    \"core/gpumat_property\" \n    \"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV.Cuda/GpuMat.g.cs\"\n    \"cv::cuda::GpuMat\" \n    \"GpuMat\" \n    \"isContinuous;depth;empty;channels\" \n    \"bool;int;bool;int\" \n    \"val;val;val;val\"\n    \"IsContinuous;Depth;IsEmpty;NumberOfChannels\" \n    \"bool;CvEnum.DepthType;bool;int\"\n    \"True if the data is continues;\n  Depth type;\n  True if the matrix is empty;\n  Number of channels\"\n    \"Emgu.CV.Cuda\"\n    \"CudaInvoke\"\n    \"GpuMat\"\n\t\"\"\n    \"#include \\\"opencv2/core/cuda.hpp\\\"\\n\\t#include \\\"opencv2/core/types_c.h\\\"\"\n\t\"\"\n\t\"\"\n\t${HAVE_opencv_core})\n```\n\n----------------------------------------\n\nTITLE: Creating Shape Context Distance Extractor Property Accessors in EmguCV - CMake\nDESCRIPTION: Specifies a CMake macro to generate .NET wrapper properties for cv::ShapeContextDistanceExtractor. Automatically exports shape-matching parameters (iterations, bins, radii, invariants, weights, stddev) as properties in the EmguCV wrapper. Requires the OpenCV shape module, EmguCV shapes support, and related headers. Parameters control details/features of the shape context distance algorithm, accessible for managed code use.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_57\n\nLANGUAGE: CMake\nCODE:\n```\nCREATE_OCV_CLASS_PROPERTY( \n    \"shape/ShapeContextDistanceExtractor_property\" \n    \"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV/Shape/ShapeContextDistanceExtractor.g.cs\"\n    \"cv::ShapeContextDistanceExtractor\" \n    \"ShapeContextDistanceExtractor\" \n    \"Iterations;AngularBins;RadialBins;InnerRadius;OuterRadius;RotationInvariant;ShapeContextWeight;ImageAppearanceWeight;BendingEnergyWeight;StdDev\" \n    \"int;int;int;float;float;bool;float;float;float;float\" \n    \"prop;prop;prop;prop;prop;prop;prop;prop;prop;prop\"\n    \"Iterations;AngularBins;RadialBins;InnerRadius;OuterRadius;RotationInvariant;ShapeContextWeight;ImageAppearanceWeight;BendingEnergyWeight;StdDev\" \n    \"int;int;int;float;float;bool;float;float;float;float\"\n    \"The number of iterations;\n    The number of angular bins in the shape context descriptor.;\n    The number of radial bins in the shape context descriptor.;\n    The value of the inner radius.;\n    The value of the outer radius.;\n    Rotation Invariant;\n    The weight of the shape context distance in the final distance value.;\n    The weight of the appearance cost in the final distance value.;\n    The weight of the Bending Energy in the final distance value.;\n    Standard Deviation.\"\n    \"Emgu.CV.Shape\"\n    \"ShapeInvoke\"\n    \"ShapeContextDistanceExtractor\"\n\t\"\"\n    \"#include \\\"shape_c.h\\\"\"\n\t\"\"\n\t\"\"\n\t${HAVE_opencv_shape})\n```\n\n----------------------------------------\n\nTITLE: Generating C# Property Wrappers for cv::BackgroundSubtractorMOG2 in CMake\nDESCRIPTION: Uses the `CREATE_OCV_CLASS_PROPERTY` CMake macro to generate C# code (`BackgroundSubtractorMOG2.g.cs`) for the `cv::BackgroundSubtractorMOG2` class. It defines C# properties corresponding to the MOG2 algorithm parameters (e.g., History, NMixtures, BackgroundRatio, VarThreshold, DetectShadows), conditional on `HAVE_opencv_video`.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_55\n\nLANGUAGE: cmake\nCODE:\n```\n   CREATE_OCV_CLASS_PROPERTY( \n    \"video/BackgroundSubtractorMOG2_property\" \n    \"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV/Video/BackgroundSubtractorMOG2.g.cs\"\n    \"cv::BackgroundSubtractorMOG2\" \n    \"BackgroundSubtractorMOG2\" \n    \"History;DetectShadows;ShadowValue;ShadowThreshold;NMixtures;BackgroundRatio;VarThreshold;VarThresholdGen;VarInit;VarMin;VarMax;ComplexityReductionThreshold\" \n    \"int;bool;int;double;int;double;double;double;double;double;double;double\" \n    \"prop;prop;prop;prop;prop;prop;prop;prop;prop;prop;prop;prop\"\n    \"History;DetectShadows;ShadowValue;ShadowThreshold;NMixtures;BackgroundRatio;VarThreshold;VarThresholdGen;VarInit;VarMin;VarMax;ComplexityReductionThreshold\" \n    \"int;bool;int;double;int;double;double;double;double;double;double;double\"\n    \"The number of last frames that affect the background model;\\n\tIf true, the algorithm detects shadows and marks them.;\\n\tShadow value is the value used to mark shadows in the foreground mask. Default value is 127. Value 0 in the mask always means background, 255 means foreground.;\\n\tA shadow is detected if pixel is a darker version of the background. The shadow threshold (Tau in the paper) is a threshold defining how much darker the shadow can be. Tau= 0.5 means that if a pixel is more than twice darker then it is not shadow.;\\n\tThe number of gaussian components in the background model;\\n\tIf a foreground pixel keeps semi-constant value for about backgroundRatio * history frames, it's considered background and added to the model as a center of a new component. It corresponds to TB parameter in the paper.;\\n\tThe main threshold on the squared Mahalanobis distance to decide if the sample is well described by the background model or not. Related to Cthr from the paper.;\n```\n\n----------------------------------------\n\nTITLE: Generating C# Property Wrappers for cv::detail::CameraParams in CMake\nDESCRIPTION: Uses the `CREATE_OCV_CLASS_PROPERTY` CMake macro to generate C# code (`CameraParams.g.cs`) for the `cv::detail::CameraParams` class. It defines multiple C# properties (Focal, Aspect, Ppx, Ppy, R, T) mapping to corresponding C++ members (focal, aspect, ppx, ppy, R, t) with specified types (double, cv::Mat), conditional on `HAVE_opencv_stitching`.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_50\n\nLANGUAGE: cmake\nCODE:\n```\n   CREATE_OCV_CLASS_PROPERTY( \n    \"stitching/camera_params_property\" \n    \"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV/Stitching/CameraParams.g.cs\"\n    \"cv::detail::CameraParams\" \n    \"CameraParams\" \n    \"focal;aspect;ppx;ppy;R;t\" \n    \"double;double;double;double;cv::Mat;cv::Mat\" \n    \"element;element;element;element;element;element\"\n    \"Focal;Aspect;Ppx;Ppy;R;T\" \n    \"double;double;double;double;Mat;Mat\"\n    \"The focal length;\\n    The aspect ratio;\\n    The principal point X;\\n    The principal point Y;\\n    The rotation Mat;\\n    The translation Mat\"\n    \"Emgu.CV.Stitching\"\n    \"StitchingInvoke\"\n    \"CameraParams\"\n\t\"\"\n    \"#include \\\"stitching_c.h\\\"\"\n\t\"\"\n\t\"\"\n\t${HAVE_opencv_stitching})  \n```\n\n----------------------------------------\n\nTITLE: Generating C# Properties for cv::ocl::PlatformInfo using CMake\nDESCRIPTION: This snippet employs the `CREATE_OCV_CLASS_PROPERTY` CMake macro to generate C# wrapper properties for the `cv::ocl::PlatformInfo` C++ class, representing OpenCL platform information. It maps properties like `Name`, `Version`, `Vendor`, and `DeviceNumber` from C++ (`cv::String`, `int`) to C# (`String`, `int`). The generated code is written to `Emgu.CV/Ocl/PlatformInfo.g.cs` in the `Emgu.CV.Ocl` namespace, uses `OclInvoke`, requires `ocl_c.h`, and depends on `HAVE_opencv_core`.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nCREATE_OCV_CLASS_PROPERTY( \n    \"core/ocl_platform_info_property\" \n    \"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV/Ocl/PlatformInfo.g.cs\"\n    \"cv::ocl::PlatformInfo\" \n    \"PlatformInfo\" \n    \"name;version;vendor;deviceNumber\" \n    \"cv::String;cv::String;cv::String;int\" \n    \"val;val;val;val\"\n    \"Name;Version;Vendor;DeviceNumber\" \n    \"String;String;String;int\"\n    \"The platform name;\n  The platform version;\n  The platform vendor;\n  The number of devices\"\n    \"Emgu.CV.Ocl\"\n    \"OclInvoke\"\n    \"PlatformInfo\"\n\t\"\"\n    \"#include \\\"ocl_c.h\\\"\"\n\t\"\"\n\t\"\"\n\t${HAVE_opencv_core})\n```\n\n----------------------------------------\n\nTITLE: Defining Image Processing Property Wrapper (OpenCV IntellgentScissorsMB) in CMake\nDESCRIPTION: This CMake macro call creates property bindings between OpenCV's cv::segmentation::IntelligentScissorsMB C++ class and the corresponding EmguCV .NET types. It enumerates properties, types, and documentation for auto-generation of interop code. Dependencies: OpenCV imgproc_c.h, Emgu.CV, requires property mapping consistency.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_23\n\nLANGUAGE: CMake\nCODE:\n```\nCREATE_OCV_CLASS_PROPERTY( \n    \"imgproc/IntelligentScissorsMB_property\" \n    \"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV/ImgProc/IntelligentScissorsMB.g.cs\"\n    \"cv::segmentation::IntelligentScissorsMB\" \n    \"IntelligentScissorsMB\" \n    \"EdgeFeatureZeroCrossingParameters;GradientMagnitudeMaxLimit\" \n    \"float;float\" \n    \"propW;propW\"\n    \"EdgeFeatureZeroCrossingParameters;GradientMagnitudeMaxLimit\" \n    \"float;float\"\n    \"Switch to Laplacian Zero-Crossing edge feature extractor and specify its parameters. This feature extractor is used by default according to article. Implementation has additional filtering for regions with low-amplitude noise. This filtering is enabled through parameter of minimal gradient amplitude (use some small value 4, 8, 16).;\n    Specify gradient magnitude max value threshold. Zero limit value is used to disable gradient magnitude thresholding (default behavior, as described in original article). Otherwize pixels with gradient magnitude greater than threshold have zero cost.\"\n    \"Emgu.CV\"\n    \"CvInvoke\"\n    \"IntelligentScissorsMB\"\n\t\"\"\n    \"#include \\\"imgproc_c.h\\\"\"\n\t\"\"\n\t\"\"\n\t${HAVE_opencv_imgproc})\n```\n\n----------------------------------------\n\nTITLE: Creating 2D Plot Property Accessors with EmguCV Plot Module - CMake\nDESCRIPTION: Invokes macro for .NET codegen wrapping properties of cv::plot::Plot2d, giving access to plotting ranges, grid, line, and label properties. Suitable for managed code control over plot rendering parameters. Requires EmguCV plotting support and OpenCV plot module. Covers axes ranges, line widths, grid and orientation flags, and text output via property wrappers.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_61\n\nLANGUAGE: CMake\nCODE:\n```\nCREATE_OCV_CLASS_PROPERTY( \n    \"plot/plot2d_property\" \n    \"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV.Contrib/Plot/Plot2d.g.cs\"\n    \"cv::plot::Plot2d\" \n    \"Plot2d\" \n    \"MinX;MinY;MaxX;MaxY;PlotLineWidth;GridLinesNumber;PointIdxToPrint;InvertOrientation;ShowText;ShowGrid;NeedPlotLine\" \n    \"double;double;double;double;int;int;int;bool;bool;bool;bool\" \n    \"propW;propW;propW;propW;propW;propW;propW;propW;propW;propW;propW\"\n    \"MinX;MinY;MaxX;MaxY;PlotLineWidth;GridLinesNumber;PointIdxToPrint;InvertOrientation;ShowText;ShowGrid;NeedPlotLine\" \n    \"double;double;double;double;int;int;int;bool;bool;bool;bool\"\n    \"Min X;\n    Min Y;\n    Max X;\n    Max Y;\n    Plot line width;\n    Grid Lines Number;\n    Sets the index of a point which coordinates will be printed on the top left corner of the plot (if ShowText flag is true);\n    Invert Orientation;\n    Show Text;\n    Show Grid;\n    Need Plot Line\"\n    \"Emgu.CV.Plot\"\n    \"PlotInvoke\"\n    \"Plot2d\"\n\t\"\"\n    \"#include \\\"plot_c.h\\\"\"\n\t\"\"\n\t\"\"\n\t${HAVE_opencv_plot})\n```\n\n----------------------------------------\n\nTITLE: Defining Features2D SimpleBlobDetector Property Wrapper in CMake\nDESCRIPTION: This macro defines property and method bindings for the cv::SimpleBlobDetector::Params C++ class, allowing exposure to managed code via Emgu.CV/Features2D. Includes property data types, names, and multi-line documentation for correct automatic code generation and .NET property mapping. Depends on features2d_c.h and enabled OpenCV features2d module.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_24\n\nLANGUAGE: CMake\nCODE:\n```\nCREATE_OCV_CLASS_PROPERTY( \n    \"features2d/SimpleBlobDetector_property\" \n    \"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV/Features2D/SimpleBlobDetectorParams.g.cs\"\n    \"cv::SimpleBlobDetector::Params\" \n    \"SimpleBlobDetectorParams\" \n    \"thresholdStep;minThreshold;maxThreshold;minDistBetweenBlobs;filterByColor;blobColor;filterByArea;minArea;maxArea;filterByCircularity;minCircularity;maxCircularity;filterByInertia;minInertiaRatio;maxInertiaRatio;filterByConvexity;minConvexity;maxConvexity;minRepeatability;collectContours\" \n    \"float;float;float;float;bool;uchar;bool;float;float;bool;float;float;bool;float;float;bool;float;float;size_t;bool\" \n    \"element;element;element;element;element;element;element;element;element;element;element;element;element;element;element;element;element;element;element;element\"\n    \"ThresholdStep;MinThreshold;MaxThreshold;MinDistBetweenBlobs;FilterByColor;blobColor;FilterByArea;MinArea;MaxArea;FilterByCircularity;MinCircularity;MaxCircularity;FilterByInertia;MinInertiaRatio;MaxInertiaRatio;FilterByConvexity;MinConvexity;MaxConvexity;MinRepeatability;CollectContours\" \n    \"float;float;float;float;bool;Byte;bool;float;float;bool;float;float;bool;float;float;bool;float;float;IntPtr;bool\"\n    \"Threshold step;\n  Min threshold;\n  Max threshold;\n  Min dist between blobs;\n  Filter by color;\n  Blob color;\n  Filter by area;\n  Min area;\n  Max area;\n  Filter by circularity;\n  Min circularity;\n  Max circularity;\n  Filter by inertia;\n  Min inertia ratio;\n  Max inertia ratio;\n  Filter by convexity;\n  Min Convexity;\n  Max Convexity;\n  Min Repeatability;\n  Collect Contours\"\n    \"Emgu.CV.Features2D\"\n    \"Features2DInvoke\"\n    \"SimpleBlobDetectorParams\"\n\t\"\"\n    \"#include \\\"features2d_c.h\\\"\"\n\t\"\"\n\t\"\"\n\t${HAVE_opencv_features2d})\n```\n\n----------------------------------------\n\nTITLE: Initiating C# Property Generation for cv::imgproc::IntelligentScissorsMB\nDESCRIPTION: This CMake snippet starts the definition for generating C# wrapper properties for the `cv::imgproc::IntelligentScissorsMB` C++ class using the `CREATE_OCV_CLASS_PROPERTY` macro. It specifies the identifier 'imgproc/IntelligentScissorsMB_property' and the target C# output file path `Emgu.CV/Imgproc/IntelligentScissorsMB.g.cs`. The specific properties and their mappings are expected to follow this initial part of the macro call. Generation depends on the `HAVE_opencv_imgproc` variable.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_22\n\nLANGUAGE: cmake\nCODE:\n```\nCREATE_OCV_CLASS_PROPERTY( \n    \"imgproc/IntelligentScissorsMB_property\" \n    \"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV/Imgproc/IntelligentScissorsMB.g.cs\"\n```\n\n----------------------------------------\n\nTITLE: Defining Features2D MSER Property Wrapper in CMake\nDESCRIPTION: Defines property bindings for the cv::MSER class for EmguCV Features2D module in CMake. Details C++ property sources, corresponding managed property types, property names and help text. Enables automated code generation for EmguCV with dependencies on the OpenCV features2d C API bridge.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_25\n\nLANGUAGE: CMake\nCODE:\n```\nCREATE_OCV_CLASS_PROPERTY( \n    \"features2d/MSER_property\" \n    \"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV/Features2D/MSER.g.cs\"\n    \"cv::MSER\" \n    \"MSER\" \n    \"Pass2Only;Delta;MinArea;MaxArea\" \n    \"bool;int;int;int\" \n    \"prop;prop;prop;prop\"\n    \"Pass2Only;Delta;MinArea;MaxArea\" \n    \"bool;int;int;int\"\n    \"Pass2 only;\n    Delta;\n    Min Area;\n    Max Area\"\n    \"Emgu.CV.Features2D\"\n    \"Features2DInvoke\"\n    \"MSER\"\n\t\"\"\n    \"#include \\\"features2d_c.h\\\"\"\n\t\"\"\n\t\"\"\n\t${HAVE_opencv_features2d})\n```\n\n----------------------------------------\n\nTITLE: Defining RTrees Properties via Macro - C/C++\nDESCRIPTION: Configures property metadata for Random Forest Trees (RTrees) using a macro, providing detailed property listing including tree structure, learning parameters, and pruning controls. Designed for automated code generation in Emgu CV property exposure pipelines, requiring the OpenCV ML module and ml_c.h.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_35\n\nLANGUAGE: C/C++\nCODE:\n```\n#include \\\"ml_c.h\\\"\n```\n\n----------------------------------------\n\nTITLE: Generating C# Properties for cv::ocl::Device using CMake\nDESCRIPTION: This snippet utilizes the `CREATE_OCV_CLASS_PROPERTY` CMake macro to generate C# wrapper properties for the `cv::ocl::Device` C++ class, representing an OpenCL device. It defines numerous properties like `IsNVidia`, `Available`, `MaxWorkGroupSize`, `Name`, `Version`, etc., mapping their C++ types (e.g., `bool`, `int`, `cv::String`, `size_t`) to corresponding C# types (e.g., `bool`, `int`, `String`, `IntPtr`). The output file is `Emgu.CV/Ocl/Device.g.cs` in the `Emgu.CV.Ocl` namespace, using `OclInvoke`. It requires `ocl_c.h` and depends on `HAVE_opencv_core`.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nCREATE_OCV_CLASS_PROPERTY( \n    \"core/ocl_device_property\" \n    \"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV/Ocl/Device.g.cs\"\n    \"cv::ocl::Device\" \n    \"Device\" \n    \"isNVidia;isIntel;isAMD;addressBits;linkerAvailable;compilerAvailable;available;maxWorkGroupSize;maxComputeUnits;localMemSize;maxMemAllocSize;deviceVersionMajor;deviceVersionMinor;halfFPConfig;singleFPConfig;doubleFPConfig;hostUnifiedMemory;globalMemSize;image2DMaxWidth;image2DMaxHeight;type;name;version;vendorName;driverVersion;extensions;OpenCLVersion;OpenCL_C_Version\" \n    \"bool;bool;bool;int;bool;bool;bool;int;int;int;int;int;int;int;int;int;bool;size_t;int;int;int;cv::String;cv::String;cv::String;cv::String;cv::String;cv::String;cv::String\" \n    \"val;val;val;val;val;val;val;val;val;val;val;val;val;val;val;val;val;val;val;val;val;val;val;val;val;val;val;val\"\n    \"IsNVidia;IsIntel;IsAMD;AddressBits;LinkerAvailable;CompilerAvailable;Available;MaxWorkGroupSize;MaxComputeUnits;LocalMemSize;MaxMemAllocSize;DeviceVersionMajor;DeviceVersionMinor;HalfFPConfig;SingleFPConfig;DoubleFPConfig;HostUnifiedMemory;GlobalMemSize;Image2DMaxWidth;Image2DMaxHeight;Type;Name;Version;VendorName;DriverVersion;Extensions;OpenCLVersion;OpenCLCVersion\" \n    \"bool;bool;bool;int;bool;bool;bool;int;int;int;int;int;int;FpConfig;FpConfig;FpConfig;bool;IntPtr;int;int;DeviceType;String;String;String;String;String;String;String\"\n    \"Indicates if this is an NVidia device;\n  Indicates if this is an Intel device;\n  Indicates if this is an AMD device;\n  The AddressBits;\n  Indicates if the linker is available;\n  Indicates if the compiler is available;\n  Indicates if the device is available;\n  The maximum work group size;\n  The max compute unit;\n  The local memory size;\n  The maximum memory allocation size;\n  The device major version number;\n  The device minor version number;\n  The device half floating point configuration;\n  The device single floating point configuration;\n  The device double floating point configuration;\n  True if the device use unified memory;\n  The global memory size;\n  The image 2d max width;\n  The image2d max height;\n  The ocl device type;\n  The device name;\n  The device version;\n  The device vendor name;\n  The device driver version;\n  The device extensions;\n  The device OpenCL version;\n  The device OpenCL C version\"\n    \"Emgu.CV.Ocl\"\n    \"OclInvoke\"\n    \"Device\"\n\t\"\"\n    \"#include \\\"ocl_c.h\\\"\"\n\t\"\"\n\t\"\"\n\t${HAVE_opencv_core})\n```\n\n----------------------------------------\n\nTITLE: Conditionally Building and Installing Emgu.CV.Models Project with CMake\nDESCRIPTION: This CMake script block executes only if `EMGU_CV_BUILD` or `EMGU_CV_EXAMPLE_BUILD` is true. It defines the `Emgu.CV.Models` project. It checks if the `dotnet` command is available (`DOTNET_FOUND`). If found, it uses the custom `BUILD_DOTNET_PROJ` function to build the `Emgu.CV.Models.csproj` file. If `dotnet` is not found, it triggers a fatal error. After a successful build, it installs the build output directory (`libs/Build/Emgu.CV.Models`) to the specified package destination (`${CPACK_PACKAGE_CLI_FOLDER}/Build`). It adds a dependency on the `Emgu.CV` target if that target exists. Finally, if `ENABLE_SOLUTION_FOLDERS` is enabled, it assigns the project to the 'emgu' folder within the solution.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Models/NetStandard/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nIF(EMGU_CV_BUILD OR EMGU_CV_EXAMPLE_BUILD)\n  #IF (DOTNET_FOUND AND NOT (HAVE_IOS_ONLY))\n  #IF(WIN32 AND (MSVC_VERSION GREATER 1900)) #need MSVC to be at least 2017\n  \n  PROJECT(Emgu.CV.Models)\n  \n  #SET(EXTRA_MSBUILD_FLAGS \"\")\n  #IF(WIN32)\n  #  SET(EXTRA_BUILD_FLAGS \"/p:Platform=\\\"Any CPU\\\"\")\n  #ENDIF()\n  \n  IF(DOTNET_FOUND)\n    #IF (APPLE AND NOT ${CMAKE_APPLE_SILICON_PROCESSOR})\n    # Need to use dotnet to build the project.\n    # dotnet msbuild seems to have a bug on Mac OS, it do not respect the assembly name.\n    # It output Emgu.CV.Model.NetStandard.dll instead of Emgu.CV.Model.dll specified in\n    # the csproj file. dotnet seems to work just fine.\n    BUILD_DOTNET_PROJ(${PROJECT_NAME} \"${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.Models.csproj\" \"\" ALL)\n    #ELSEIF (DOTNET_FOUND)\n    # BUILD_CSPROJ_IN_SOLUTION(${PROJECT_NAME} \"${CMAKE_CURRENT_SOURCE_DIR}/../../Solution/CrossPlatform/Emgu.CV.sln\" \"Emgu.CV.Models.NetStandard\" \"${EXTRA_BUILD_FLAGS}\" ALL)\n  ELSE()\n    MESSAGE(FATAL_ERROR \"dotnet command not found, unable to build Emgu.CV.Models project\")\n  ENDIF()\n  \n  INSTALL(\n    DIRECTORY \n    ${EMGU_CV_SOURCE_DIR}/libs/Build/Emgu.CV.Models\n    DESTINATION ${CPACK_PACKAGE_CLI_FOLDER}/Build\n    COMPONENT emgucv_binary)\n    \n  IF (TARGET Emgu.CV)\n    ADD_DEPENDENCIES(${PROJECT_NAME} Emgu.CV)  \n  ENDIF()\n  \n  #INSTALL(\n  #  DIRECTORY\n  #  ${CMAKE_CURRENT_SOURCE_DIR}\n  #  DESTINATION Emgu.CV.Models\n  #  COMPONENT emgucv_source\n  #  FILES_MATCHING \n  #  PATTERN \"Emgu.CV.Models.csproj\"\n  #  PATTERN \"*.cs\"\n  #  PATTERN \".svn\" EXCLUDE\n  #  PATTERN \"obj\" EXCLUDE\n  #  PATTERN \"CMakeFiles\" EXCLUDE\n  #  PATTERN \"${PROJECT_NAME}.dir\" EXCLUDE\n  #)\n  if(ENABLE_SOLUTION_FOLDERS)\n    set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER \"emgu\")\n  endif() \n  #ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Defining Boost Properties via Macro - C/C++\nDESCRIPTION: Specifies the metadata for properties of OpenCV's Boosting classifier class using macro-based declaration, essential for auto-generation of managed wrappers in Emgu CV. Each property includes a description, with a dependency on OpenCV ML and the ml_c.h include.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_37\n\nLANGUAGE: C/C++\nCODE:\n```\n#include \\\"ml_c.h\\\"\n```\n\n----------------------------------------\n\nTITLE: Creating Tonemap Class Properties for OpenCV Photo Emgu.CV Bindings - CMake\nDESCRIPTION: Generates the C# property for 'Gamma' in the Emgu.CV Tonemap class, controlling gamma correction for tone mapping, mapped from cv::Tonemap. Invokes the CREATE_OCV_CLASS_PROPERTY macro, setting up type mapping, property info, documentation, and build flags. Requires 'photo_c.h' and the OpenCV photo module.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_43\n\nLANGUAGE: CMake\nCODE:\n```\nCREATE_OCV_CLASS_PROPERTY( \n  \"photo/Tonemap_property\" \n  \"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV/Photo/Tonemap.g.cs\"\n  \"cv::Tonemap\" \n  \"Tonemap\" \n  \"Gamma\" \n  \"float\" \n  \"prop\"\n  \"Gamma\" \n  \"float\"\n  \"Positive value for gamma correction. Gamma value of 1.0 implies no correction, gamma equal to 2.2f is suitable for most displays.\"\n  \"Emgu.CV\"\n  \"CvInvoke\"\n  \"Tonemap\"\n  \"\"\n  \"#include \\\"photo_c.h\\\"\"\n  \"\"\n  \"\"\n  ${HAVE_opencv_photo})\n```\n\n----------------------------------------\n\nTITLE: Generating C# Property Wrappers for cv::BackgroundSubtractorKNN in CMake\nDESCRIPTION: This snippet uses the `CREATE_OCV_CLASS_PROPERTY` CMake macro to generate C# code (`BackgroundSubtractorKNN.g.cs`) for the `cv::BackgroundSubtractorKNN` class. It maps parameters related to the KNN background subtraction algorithm (e.g., History, NSamples, Dist2Threshold, DetectShadows) to C# properties, conditional on `HAVE_opencv_video`.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_54\n\nLANGUAGE: cmake\nCODE:\n```\n   CREATE_OCV_CLASS_PROPERTY( \n    \"video/BackgroundSubtractorKNN_property\" \n    \"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV/Video/BackgroundSubtractorKNN.g.cs\"\n    \"cv::BackgroundSubtractorKNN\" \n    \"BackgroundSubtractorKNN\" \n    \"History;NSamples;Dist2Threshold;kNNSamples;DetectShadows;ShadowValue;ShadowThreshold\" \n    \"int;int;double;int;bool;int;double\" \n    \"prop;prop;prop;prop;prop;prop;prop\"\n    \"History;NSamples;Dist2Threshold;KNNSamples;DetectShadows;ShadowValue;ShadowThreshold\" \n    \"int;int;double;int;bool;int;double\"\n    \"The number of last frames that affect the background model;\\n\tThe number of data samples in the background model;\\n\tThe threshold on the squared distance between the pixel and the sample to decide whether a pixel is close to a data sample.;\\n\tThe number of neighbours, the k in the kNN. K is the number of samples that need to be within dist2Threshold in order to decide that pixel is matching the kNN background model.;\\n\tIf true, the algorithm detects shadows and marks them.;\\n\tShadow value is the value used to mark shadows in the foreground mask. Default value is 127. Value 0 in the mask always means background, 255 means foreground.;\\n\tA shadow is detected if pixel is a darker version of the background. The shadow threshold (Tau in the paper) is a threshold defining how much darker the shadow can be. Tau= 0.5 means that if a pixel is more than twice darker then it is not shadow.\"\n    \"Emgu.CV\"\n    \"CvInvoke\"\n    \"BackgroundSubtractorKNN\"\n\t\"\"\n    \"#include \\\"video_c.h\\\"\"\n\t\"\"\n\t\"\"\n\t${HAVE_opencv_video})\n```\n\n----------------------------------------\n\nTITLE: Creating Motion Saliency Property Accessors Using EmguCV Macros - CMake\nDESCRIPTION: Invokes macro to wrap properties of cv::saliency::MotionSaliencyBinWangApr2014, exposing initialization and input size settings for motion saliency calculation. Relies on OpenCV saliency/contrib modules, EmguCV wrappers. Key parameters are image width/height and an initialization routine, made accessible to managed consumers.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_62\n\nLANGUAGE: CMake\nCODE:\n```\nCREATE_OCV_CLASS_PROPERTY( \n    \"saliency/MotionSaliencyBinWangApr2014_property\" \n    \"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV.Contrib/Saliency/MotionSaliencyBinWangApr2014.g.cs\"\n    \"cv::saliency::MotionSaliencyBinWangApr2014\" \n    \"MotionSaliencyBinWangApr2014\" \n    \"ImageWidth;ImageHeight;init\" \n    \"int;int;bool\" \n    \"prop;prop;act\"\n    \"ImageWidth;ImageHeight;Init\" \n    \"int;int;bool\"\n    \"Image width;\n    Image height;\n\tThis function allows the correct initialization of all data structures that will be used by the algorithm.\n\t\"\n    \"Emgu.CV.Saliency\"\n    \"SaliencyInvoke\"\n    \"MotionSaliencyBinWangApr2014\"\n\t\"\"\n    \"#include \\\"saliency_c.h\\\"\"\n\t\"\"\n\t\"\"\n\t${HAVE_opencv_saliency})\n```\n\n----------------------------------------\n\nTITLE: Creating PCTSignatures Class Properties for OpenCV XFeatures2D Emgu.CV Bindings - CMake\nDESCRIPTION: Begins defining properties for the PCTSignatures class in the xfeatures2d module by mapping C++ property metadata to C#. Sets up type information, property lists, and parameter descriptions using the CREATE_OCV_CLASS_PROPERTY macro. Requires xfeatures2d module and relevant headers. The snippet is incomplete in the input, but provides the property mapping intent and macro usage pattern.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_47\n\nLANGUAGE: CMake\nCODE:\n```\nCREATE_OCV_CLASS_PROPERTY( \n  \"xfeatures2d/pct_compute_signature_property\" \n  \"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV.Contrib/XFeatures2D/PCTComputeSignature.g.cs\"\n  \"cv::xfeatures2d::PCTSignatures\" \n  \"PCTSignatures\" \n  \"GrayscaleBits;WindowRadius;WeightX;WeightY;WeightL;WeightA;WeightB;WeightEntropy;IterationCount;MaxClustersCount;ClusterMinSize;JoiningDistance;DropThreshold;DistanceFunction\" \n  \"int;int;float;float;float;float;float;float;int;int;int;float;float;int\" \n  \"prop;prop;prop;prop;prop;prop;prop;prop;prop;prop;prop;prop;prop;prop;prop\"\n  \"GrayscaleBits;WindowRadius;WeightX;WeightY;WeightL;WeightA;WeightB;WeightEntropy;IterationCount;MaxClustersCount;ClusterMinSize;JoiningDistance;DropThreshold;DistanceFunction\" \n  \"int;int;float;float;float;float;float;float;int;int;int;float;float;PCTSignatures.PointDistributionType\"\n  \"Color resolution of the greyscale bitmap represented in allocated bits (i.e., value 4 means that 16 shades of grey are used). The greyscale bitmap is used for computing contrast and entropy values.;\n\\tSize of the texture sampling window used to compute contrast and entropy. (center of the window is always in the pixel selected by x,y coordinates of the corresponding feature sample).;\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Deployment with MauiAsset Build Action - .NET MAUI - XML\nDESCRIPTION: Defines a MauiAsset build action line within the .csproj project file to include all files recursively in the Resources\\Raw directory as deployable assets in a MAUI application. This ensures the files are packaged with the app and assigned logical names so that they can be accessed at runtime. No external NuGet package is needed for this functionality, but the project must be a .NET MAUI application; the inclusion pattern (Resources\\Raw\\**) recursively collects all raw assets.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Example/MAUI/BuildInfo/Resources/Raw/AboutAssets.txt#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<MauiAsset Include=\\\"Resources\\\\Raw\\\\**\\\" LogicalName=\\\"%(RecursiveDir)%(Filename)%(Extension)\\\" />\n```\n\n----------------------------------------\n\nTITLE: Instantiating Vector Bindings for Multiple OpenCV Types - CMake\nDESCRIPTION: This section repeatedly invokes the CREATE_VECTOR_CS macro to generate bindings for multiple standard and custom OpenCV types (e.g., Byte, Int, Point, Rect) as compatible vectors in C#, aligning C++ and C# types. The only dependency is on the macro and the availability of referenced source, template, and target directories. Inputs are vector type names and their type signatures; outputs are configured wrapper files per type.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nCREATE_VECTOR_CS(\"Byte\" \"unsigned char\" \"byte\" \"struct\" \"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV/Util\" Emgu.CV.Util \"\" \"\" \"\" \"1\")\n#CREATE_VECTOR_CS(\"IntPtr\" \"void*\" \"IntPtr\" \"struct\" \"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV/Util\" Emgu.CV.Util \"\" \"\" \"\" \"1\")\nCREATE_VECTOR_CS(\"Int\" \"int\" \"int\" \"struct\" \"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV/Util\" Emgu.CV.Util \"\" \"\" \"\" \"1\")\nCREATE_VECTOR_CS(\"Float\" \"float\" \"float\" \"struct\" \"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV/Util\" Emgu.CV.Util \"\" \"\" \"\" \"1\")\nCREATE_VECTOR_CS(\"Double\" \"double\" \"double\" \"struct\" \"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV/Util\" Emgu.CV.Util \"\" \"\" \"\" \"1\")\nCREATE_VECTOR_CS(\"Point\" \"cv::Point\" \"Point\" \"struct\" \"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV/Util\" Emgu.CV.Util \"\" \"\" \"\" \"1\")\nCREATE_VECTOR_CS(\"PointF\" \"cv::Point2f\" \"PointF\" \"struct\" \"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV/Util\" Emgu.CV.Util \"\" \"\" \"\" \"1\")\nCREATE_VECTOR_CS(\"Point3D32F\" \"cv::Point3f\" \"MCvPoint3D32f\" \"struct\" \"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV/Util\" Emgu.CV.Util \"\" \"\" \"\" \"1\")\nCREATE_VECTOR_CS(\"Rect\" \"cv::Rect\" \"Rectangle\" \"struct\" \"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV/Util\" Emgu.CV.Util \"\" \"\" \"\" \"1\")\nCREATE_VECTOR_CS(\"RotatedRect\" \"cv::RotatedRect\" \"RotatedRect\" \"struct\" \"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV/Util\" Emgu.CV.Util \"\" \"\" \"\" \"1\")\nCREATE_VECTOR_CS(\"KeyPoint\" \"cv::KeyPoint\" \"MKeyPoint\" \"struct\" \"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV/Util\" Emgu.CV.Util \"\" \"\" \"\" \"1\")\nCREATE_VECTOR_CS(\"DMatch\" \"cv::DMatch\" \"MDMatch\" \"struct\" \"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV/Util\" Emgu.CV.Util \"\" \"\" \"\" \"1\")\nCREATE_VECTOR_CS(\"Triangle2DF\" \"cv::Vec6f\" \"Triangle2DF\" \"struct\" \"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV/Util\" Emgu.CV.Util \"\" \"\" \"\" \"1\")\nCREATE_VECTOR_CS(\"Size\" \"cv::Size\" \"Size\" \"struct\" \"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV/Util\" Emgu.CV.Util \"\" \"\" \"\" \"1\")\n```\n\n----------------------------------------\n\nTITLE: Defining NeuralNetwork Class Property - CMake\nDESCRIPTION: This snippet leverages CREATE_OCV_CLASS_PROPERTY to wrap DetphAI's NeuralNetwork node class for managed code, exposing only the NumInferenceThreads property. It details the mapping for property code generation and documentation. This property adjusts the threading behavior for inferences, with zero as a special value indicating automatic thread count selection. Depends on DepthAI C API and Emgu.CV.Dai namespaces.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_74\n\nLANGUAGE: CMake\nCODE:\n```\nCREATE_OCV_CLASS_PROPERTY( \n    \"depthai/neural_network_property\" \n    \"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV.Contrib/DepthAI/NeuralNetwork.g.cs\"\n    \"dai::node::NeuralNetwork\" \n    \"NeuralNetwork\" \n    \"NumInferenceThreads\" \n    \"int\"\n    \"prop\"\n    \"NumInferenceThreads\" \n    \"int\"\n    \"How many inference threads will be used to run the network, Zero means AUTO\"\n    \"Emgu.CV.Dai\"\n    \"DaiInvoke\"\n    \"NeuralNetwork\"\n\t\"\"\n    \"#include \\\"depthai_c.h\\\"\"\n\t\"\"\n\t\"\" \n\t${EMGU_CV_WITH_DEPTHAI})\n```\n\n----------------------------------------\n\nTITLE: Generating C# Property Wrappers for cv::DISOpticalFlow in CMake\nDESCRIPTION: Uses the `CREATE_OCV_CLASS_PROPERTY` CMake macro to generate C# code (`DISOpticalFlow.g.cs`) exposing various properties of the `cv::DISOpticalFlow` C++ class. It maps numerous parameters controlling the DIS optical flow algorithm (e.g., FinestScale, PatchSize, UseMeanNormalization) to corresponding C# properties, conditional on `HAVE_opencv_video`.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_53\n\nLANGUAGE: cmake\nCODE:\n```\n  CREATE_OCV_CLASS_PROPERTY( \n    \"video/disopticalflow_property\" \n    \"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV/Video/DISOpticalFlow.g.cs\"\n    \"cv::DISOpticalFlow\" \n    \"DISOpticalFlow\" \n    \"FinestScale;PatchSize;PatchStride;GradientDescentIterations;VariationalRefinementIterations;VariationalRefinementAlpha;VariationalRefinementDelta;VariationalRefinementGamma;UseMeanNormalization;UseSpatialPropagation\" \n    \"int;int;int;int;int;float;float;float;bool;bool\" \n    \"prop;prop;prop;prop;prop;prop;prop;prop;prop;prop\"\n    \"FinestScale;PatchSize;PatchStride;GradientDescentIterations;VariationalRefinementIterations;VariationalRefinementAlpha;VariationalRefinementDelta;VariationalRefinementGamma;UseMeanNormalization;UseSpatialPropagation\" \n    \"int;int;int;int;int;float;float;float;bool;bool\"\n    \"Finest level of the Gaussian pyramid on which the flow is computed (zero level corresponds to the original image resolution). The final flow is obtained by bilinear upscaling.;\\n\tSize of an image patch for matching (in pixels). Normally, default 8x8 patches work well enough in most cases.;\\n\tStride between neighbor patches. Must be less than patch size. Lower values correspond to higher flow quality.;\\n\tMaximum number of gradient descent iterations in the patch inverse search stage. Higher values may improve quality in some cases.;\\n\tNumber of fixed point iterations of variational refinement per scale. Set to zero to disable variational refinement completely. Higher values will typically result in more smooth and high-quality flow.;\\n\tWeight of the smoothness term;\\n\tWeight of the color constancy term;\\n\tWeight of the gradient constancy term;\\n\tWhether to use mean-normalization of patches when computing patch distance. It is turned on by default as it typically provides a noticeable quality boost because of increased robustness to illumination variations. Turn it off if you are certain that your sequence doesn't contain any changes in illumination.;\\n\tWhether to use spatial propagation of good optical flow vectors. This option is turned on by default, as it tends to work better on average and can sometimes help recover from major errors introduced by the coarse-to-fine scheme employed by the DIS optical flow algorithm. Turning this option off can make the output flow field a bit smoother, however.\"\n    \"Emgu.CV\"\n    \"CvInvoke\"\n    \"DISOpticalFlow\"\n\t\"\"\n    \"#include \\\"video_c.h\\\"\"\n\t\"\"\n\t\"\"\n\t${HAVE_opencv_video})\n```\n\n----------------------------------------\n\nTITLE: Defining VariationalRefinement Properties via Macro - C/C++\nDESCRIPTION: Declares the property structure for the VariationalRefinement class, which is used for dense optical flow refinement in OpenCV. The macro includes documentation for each property and enables automatic generation of managed bindings. This requires the OpenCV video module and inclusion of video_c.h.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_39\n\nLANGUAGE: C/C++\nCODE:\n```\n#include \\\"video_c.h\\\"\n```\n\n----------------------------------------\n\nTITLE: Creating DualTVL1OpticalFlow Class Properties in Optflow for OpenCV Emgu.CV Bindings - CMake\nDESCRIPTION: Defines a set of properties and their metadata for the Emgu.CV DualTVL1OpticalFlow class using the CREATE_OCV_CLASS_PROPERTY macro. It maps multiple numerical and boolean C++ properties, such as Tau, Lambda, Theta, etc., to equivalent C# properties, with descriptions for each. The code is dependent on 'optflow_c.h', and requires the optflow module to be available.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_41\n\nLANGUAGE: CMake\nCODE:\n```\nCREATE_OCV_CLASS_PROPERTY( \n  \"optflow/dual_tvl1_opticalflow_property\" \n  \"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV/Optflow/DualTVL1OpticalFlow.g.cs\"\n  \"cv::optflow::DualTVL1OpticalFlow\" \n  \"DualTVL1OpticalFlow\" \n  \"Tau;Lambda;Theta;Gamma;ScalesNumber;WarpingsNumber;Epsilon;InnerIterations;OuterIterations;UseInitialFlow;ScaleStep;MedianFiltering\" \n  \"double;double;double;double;int;int;double;int;int;bool;double;int\" \n  \"prop;prop;prop;prop;prop;prop;prop;prop;prop;prop;prop;prop\"\n  \"Tau;Lambda;Theta;Gamma;ScalesNumber;WarpingsNumber;Epsilon;InnerIterations;OuterIterations;UseInitialFlow;ScaleStep;MedianFiltering\" \n  \"double;double;double;double;int;int;double;int;int;bool;double;int\"\n  \"Time step of the numerical scheme;\n  Weight parameter for the data term, attachment parameter;\n  Weight parameter for (u - v)^2, tightness parameter;\n  Coefficient for additional illumination variation term;\n  Number of scales used to create the pyramid of images;\n  Number of warpings per scale;\n  Stopping criterion threshold used in the numerical scheme, which is a trade-off between precision and running time;\n  Inner iterations (between outlier filtering) used in the numerical scheme;\n  Outer iterations (number of inner loops) used in the numerical scheme;\n  Use initial flow;\n  Step between scales (less than 1);\n  Median filter kernel size (1 = no filter) (3 or 5)\"\n  \"Emgu.CV\"\n  \"CvInvoke\"\n  \"DualTVL1OpticalFlow\"\n  \"\"\n  \"#include \\\"optflow_c.h\\\"\"\n  \"\"\n  \"\"\n  ${HAVE_opencv_optflow})\n```\n\n----------------------------------------\n\nTITLE: Building and Configuring Emgu.CV NuGet Packages with CMake - CMake\nDESCRIPTION: This CMake script conditionally initiates the creation and configuration of the Emgu.CV NuGet package for Windows. It checks feature flags (platform, architecture, runtime version), sets up the package build process using BUILD_NUGET_PACKAGE, specifies dependencies (including those for CUDA and MSVC runtime), and triggers NuGet package signing when applicable. Key parameters include project and output directory names, csproj and nuspec file paths, and dependency targets. Inputs require the correct platform variables and a supported build environment; outputs result in a built NuGet package ready for consumption. Adjustments should be made carefully to match project-specific directory structures and dependencies.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/platforms/nuget/Emgu.CV.runtime.windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# --------------------------------------------------------\\n#  Copyright (C) 2004-2025 by EMGU Corporation. All rights reserved.\\n# --------------------------------------------------------\\n\\nIF ( (TARGET Emgu.CV)\\n  AND (HAVE_WINDESKTOP_X86 OR HAVE_WINDESKTOP_X64 OR HAVE_WINDESKTOP_ARM64) \\n  AND (NOT (\"${EMGU_WINDOWS_MSVCRT_VERSION}\" STREQUAL \"\")) )\\n  \\n  PROJECT(Emgu.CV.runtime.windows.nuget)\\n\\n  get_filename_component(NUGET_OUTPUT_DIR ${CMAKE_CURRENT_SOURCE_DIR} DIRECTORY)\\n\\n  BUILD_NUGET_PACKAGE(\\n    ${PROJECT_NAME} \\n\\t\"${EMGU_CV_SOURCE_DIR}/Emgu.CV/NetStandard/Emgu.CV.csproj\"  #csproj_file \\n\\t\"${CMAKE_CURRENT_SOURCE_DIR}/Package.nuspec\" #nuspec_file \\n\\t\"${NUGET_OUTPUT_DIR}\" #output_dir \\n\\t\"${CMAKE_CURRENT_SOURCE_DIR}\" #working_dir\\n\\t) \\n\\n  IF (EMGU_NUGET_SIGN_FOUND)\\n    EMGU_SIGN_NUGET(${PROJECT_NAME} \"${NUGET_OUTPUT_DIR}/${EMGUCV_WINDOWS_NUGET_ID}.${CPACK_PACKAGE_VERSION}.nupkg\")\\n  ENDIF()\\n\\n  if(ENABLE_SOLUTION_FOLDERS)\\n    set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER \"nuget\")\\n  endif() \\n\\n  ADD_DEPENDENCIES(${PROJECT_NAME} cvextern)\\n  \\n  IF (TARGET Emgu.CV)\\n    ADD_DEPENDENCIES(${PROJECT_NAME} Emgu.CV)\\n  ENDIF()\\n  \\n  IF (WIN32 AND HAVE_WINDESKTOP_X64 AND WITH_CUDA)\\n  \\tADD_DEPENDENCIES(${PROJECT_NAME} \\n\\t  Emgu.runtime.windows.cuda.fft.nuget \\n\\t  Emgu.runtime.windows.cuda.dnn.cnn.nuget \\n\\t  Emgu.runtime.windows.cuda.dnn.engines.nuget \\n\\t  Emgu.runtime.windows.cuda.dnn.ops.nuget \\n\\t  Emgu.runtime.windows.cuda.dnn.adv.nuget \\n\\t  Emgu.runtime.windows.cuda.blas.nuget\\n      Emgu.runtime.windows.cuda.blas.lt.nuget\\t  \\n\\t  Emgu.runtime.windows.cuda.npp.nuget)\\n  ENDIF()\\n\\n  IF (TARGET Emgu.runtime.windows.msvc.rt.x64.nuget)\\n  \\tADD_DEPENDENCIES(${PROJECT_NAME} Emgu.runtime.windows.msvc.rt.x64.nuget)\\n  ENDIF()\\n\\n  IF (TARGET Emgu.runtime.windows.msvc.rt.x86.nuget)\\n  \\tADD_DEPENDENCIES(${PROJECT_NAME} Emgu.runtime.windows.msvc.rt.x86.nuget)\\n  ENDIF()\\n\\n  IF (TARGET Emgu.runtime.windows.msvc.rt.arm64.nuget)\\n  \\tADD_DEPENDENCIES(${PROJECT_NAME} Emgu.runtime.windows.msvc.rt.arm64.nuget)\\n  ENDIF()\\n\\n#  IF (TARGET Emgu.CV.Platform.NetFramework)\\n#    ADD_DEPENDENCIES(${PROJECT_NAME} Emgu.CV.Platform.NetFramework)\\n#  ENDIF()\\n\\n#  IF (TARGET Emgu.CV.Platform.NetCore)\\n#    ADD_DEPENDENCIES(${PROJECT_NAME} Emgu.CV.Platform.NetCore)\\n#  ENDIF()\\n\\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Creating TonemapReinhard Class Properties for OpenCV Photo Emgu.CV Bindings - CMake\nDESCRIPTION: Defines three float properties (Intensity, LightAdaptation, ColorAdaptation) for the Emgu.CV TonemapReinhard class using the CREATE_OCV_CLASS_PROPERTY macro. Each property includes documentation and value constraints. The code depends on 'photo_c.h' and is built if the photo module is present.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_44\n\nLANGUAGE: CMake\nCODE:\n```\nCREATE_OCV_CLASS_PROPERTY( \n  \"photo/TonemapReinhard_property\" \n  \"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV/Photo/TonemapReinhard.g.cs\"\n  \"cv::TonemapReinhard\" \n  \"TonemapReinhard\" \n  \"Intensity;LightAdaptation;ColorAdaptation\" \n  \"float;float;float\" \n  \"prop;prop;prop\"\n  \"Intensity;LightAdaptation;ColorAdaptation\" \n  \"float;float;float\"\n  \"Result intensity in [-8, 8] range. Greater intensity produces brighter results.;\n\\tLight adaptation in [0, 1] range. If 1 adaptation is based only on pixel value, if 0 it is global, otherwise it is a weighted mean of this two cases.;\n\\tchromatic adaptation in [0, 1] range. If 1 channels are treated independently, if 0 adaptation level is the same for each channel.\"\n  \"Emgu.CV\"\n  \"CvInvoke\"\n  \"TonemapReinhard\"\n  \"\"\n  \"#include \\\"photo_c.h\\\"\"\n  \"\"\n  \"\"\n  ${HAVE_opencv_photo})\n```\n\n----------------------------------------\n\nTITLE: Including Raw Assets via MauiAsset in .csproj XML\nDESCRIPTION: This XML snippet, intended for a .NET MAUI .csproj file, uses the MauiAsset build action to include all files within the 'Resources\\Raw' directory and its subdirectories as application assets. The LogicalName attribute ensures assets are accessible using their relative path and filename.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Example/MAUI/MauiDemoApp/Resources/Raw/AboutAssets.txt#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Setting OpenCV Version Info Source File Path for Build Metadata - CMake\nDESCRIPTION: This snippet sets the OPENCV_BUILD_INFO_VERSION_STRING variable to point at the generated OpenCV version header, and switches its path if building the OpenCV 'world' module. This approach ensures that build and version string metadata is picked up correctly for different OpenCV build modes. Requires properly staged OpenCV binary directories and conditional OpenCV world build, outputs a path variable for use by other build/packaging steps.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_126\n\nLANGUAGE: CMake\nCODE:\n```\nSET(OPENCV_BUILD_INFO_VERSION_STRING ${CMAKE_BINARY_DIR}/opencv/modules/core/version_string.inc)\nIF(BUILD_opencv_world)\n  SET(OPENCV_BUILD_INFO_VERSION_STRING ${CMAKE_BINARY_DIR}/opencv/modules/world/version_string.inc)\nENDIF()\n\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building Emgu.CV Project with CMake - CMake\nDESCRIPTION: This snippet is a CMake configuration script for building the Emgu.CV project. It conditionally checks for build prerequisites, sets platform and framework build flags, chooses appropriate build macros depending on platform and .NET version, installs built binaries to a staging folder, links dependencies, and categorizes the target in solution folders when supported. Dependencies include CMake, .NET SDK, and Emgu.CV related macros. Inputs are project flags (e.g., EMGU_CV_BUILD), outputs are built binaries, and the script expects directories and macros like BUILD_DOTNET_PROJ to be available.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV/NetStandard/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# --------------------------------------------------------\\n#  Copyright (C) 2004-2025 by EMGU Corporation. All rights reserved.\\n# --------------------------------------------------------\\n\\nIF(EMGU_CV_BUILD OR EMGU_CV_EXAMPLE_BUILD)\\n  IF (DOTNET_FOUND)\\n    #IF(WIN32 AND (MSVC_VERSION GREATER 1900)) #need MSVC to be at least 2017\\n    PROJECT(Emgu.CV)\\n    #SET(EXTRA_MSBUILD_FLAGS \"\")\\n    \\n    SET(EXTRA_BUILD_FLAGS \"/p:Platform=\\\"AnyCPU\\\"\")\\n    \\n    #IF (NOT (WIN32 OR APPLE))\\n    #  #LINUX\\n    #  SET(EXTRA_BUILD_FLAGS ${EXTRA_BUILD_FLAGS} \"/p:TargetFrameworks=\\\"netstandard2.0\\\"\")\\n    #ENDIF()\\n    \\n    #IF (APPLE AND NOT ${CMAKE_APPLE_SILICON_PROCESSOR})\\n      BUILD_DOTNET_PROJ(${PROJECT_NAME} \"${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.csproj\" \"${EXTRA_BUILD_FLAGS}\" ALL)\\n    #ELSE()\\n    #  BUILD_CSPROJ_IN_SOLUTION(${PROJECT_NAME} \"${CMAKE_CURRENT_SOURCE_DIR}/../../Solution/CrossPlatform/Emgu.CV.sln\" \"Emgu.CV.Platform.NetStandard\" \"${EXTRA_MSBUILD_FLAGS}\" ALL)\\n    #ENDIF()\\n\\n    INSTALL(\\n      DIRECTORY \\n      ${EMGU_CV_SOURCE_DIR}/libs/Build/Emgu.CV\\n      DESTINATION ${CPACK_PACKAGE_CLI_FOLDER}/Build\\n      COMPONENT emgucv_binary)\\t  \\n\\n    ADD_DEPENDENCIES(${PROJECT_NAME} cvextern)  \\n    \\n    #INSTALL(\\n    #  DIRECTORY\\n    #  ${CMAKE_CURRENT_SOURCE_DIR}\\n    #  DESTINATION Emgu.CV\\n    #  COMPONENT emgucv_source\\n    #  FILES_MATCHING \\n    #  PATTERN \"Emgu.CV.csproj\"\\n    #  PATTERN \".svn\" EXCLUDE\\n    #  PATTERN \"obj\" EXCLUDE\\n    #  PATTERN \"CMakeFiles\" EXCLUDE\\n    #  PATTERN \"${PROJECT_NAME}.dir\" EXCLUDE\\n    #  )\\n    if(ENABLE_SOLUTION_FOLDERS)\\n      set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER \"emgu\")\\n\\tendif() \\n  ENDIF()\\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Loading a Maui Asset at Runtime Using FileSystem API - .NET MAUI - C#\nDESCRIPTION: Demonstrates how to asynchronously read the contents of a raw asset packaged with a MAUI application using the FileSystem.OpenAppPackageFileAsync method. This C# code defines an async function that opens the named asset, creates a StreamReader to read its contents, and stores the resulting string. Requires using System.IO and the Microsoft.Maui.Essentials.Filesystem API. The input filename must match the deployed asset; the function returns the content as a string and should be called within an async context.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Example/MAUI/BuildInfo/Resources/Raw/AboutAssets.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Property Wrappers for OpenCV face Module - CMake\nDESCRIPTION: This code snippet checks for the OpenCV face module and generates wrapper property classes for landmark detection/classification using the CREATE_OCV_CLASS_PROPERTY macro. FacemarkLBFParams and FacemarkAAMParams properties are mapped and described, facilitating interaction with their C++ parameters from .NET via Emgu.CV.Face. It depends on HAVE_opencv_face and requires face_c.h for interop.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_65\n\nLANGUAGE: CMake\nCODE:\n```\n############################### face code gen START ##############################\\nIF (NOT HAVE_opencv_face)\\n  SET(HAVE_opencv_face FALSE)\\nENDIF()\\n  CREATE_OCV_CLASS_PROPERTY( \\n    \\\"face/facemarklbf_params_property\\\" \\n    \\\"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV.Contrib/Face/FacemarkLBFParams.g.cs\\\"\\n    \\\"cv::face::FacemarkLBF::Params\\\" \\n    \\\"FacemarkLBFParams\\\" \\n    \\\"shape_offset;verbose;n_landmarks;initShape_n;stages_n;tree_n;tree_depth;bagging_overlap;save_model;cascade_face;model_filename\\\" \\n    \\\"double;bool;int;int;int;int;int;double;bool;cv::String;cv::String\\\" \\n    \\\"element;element;element;element;element;element;element;element;element;element;element\\\"\\n    \\\"ShapeOffset;Verbose;NLandmarks;InitShapeN;StagesN;TreeN;TreeDepth;BaggingOverlap;SaveModel;CascadeFace;ModelFile\\\" \\n    \\\"double;bool;int;int;int;int;int;double;bool;String;String\\\"\\n    \\\"offset for the loaded face landmark points;\\n\\tshow the training print-out;\\n\\tnumber of landmark points;\\n\\tmultiplier for augment the training data;\\n\\tnumber of refinement stages;\\n\\tnumber of tree in the model for each landmark point refinement;\\n\\tthe depth of decision tree, defines the size of feature;\\n\\toverlap ratio for training the LBF feature;\\n\\tflag to save the trained model or not;\\n\\tfilename of the face detector model;\\n\\tfilename where the trained model will be saved\\\"\\n    \\\"Emgu.CV.Face\\\"\\n    \\\"FaceInvoke\\\"\\n    \\\"FacemarkLBFParams\\\"\\n\\t\\\"\\\"\\n    \\\"#include \\\\\\\"face_c.h\\\\\\\"\\\"\\n\\t\\\"\\\"\\n\\t\\\"\\\"\\n\\t${HAVE_opencv_face})\\n\\n  CREATE_OCV_CLASS_PROPERTY( \\n    \\\"face/facemarkaam_params_property\\\" \\n    \\\"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV.Contrib/Face/FacemarkAAMParams.g.cs\\\"\\n    \\\"cv::face::FacemarkAAM::Params\\\" \\n    \\\"FacemarkAAMParams\\\" \\n    \\\"model_filename;m;n;n_iter;verbose;save_model;max_m;max_n\\\" \\n    \\\"cv::String;int;int;int;bool;bool;int;int\\\" \\n    \\\"element;element;element;element;element;element;element;element\\\"\\n    \\\"ModelFile;M;N;NIter;Verbose;SaveModel;MaxM;MaxN\\\" \\n    \\\"String;int;int;int;bool;bool;int;int\\\"\\n    \\\"filename where the trained model will be saved;\\n\\tM;\\n\\tN;\\n\\tNumber of iteration;\\n\\tshow the training print-out;\\n\\tflag to save the trained model or not;\\n\\tThe maximum value of M;\\n\\tThe maximum value of N\\\"\\n    \\\"Emgu.CV.Face\\\"\\n    \\\"FaceInvoke\\\"\\n    \\\"FacemarkAAMParams\\\"\\n\\t\\\"\\\"\\n    \\\"#include \\\\\\\"face_c.h\\\\\\\"\\\"\\n\\t\\\"\\\"\\n\\t\\\"\\\"\\n\\t${HAVE_opencv_face})\\n\\n############################### face code gen END ##############################\n```\n\n----------------------------------------\n\nTITLE: Defining KNearest Properties via Macro - C/C++\nDESCRIPTION: Uses the CREATE_OCV_CLASS_PROPERTY macro to describe KNearest (k-Nearest Neighbors) classifier properties, specifying their names, types, accessors, and documentation. Supports automatic code generation for property exposure in Emgu CV with dependency on the OpenCV ML module and the ml_c.h header.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_32\n\nLANGUAGE: C/C++\nCODE:\n```\n#include \\\"ml_c.h\\\"\n```\n\n----------------------------------------\n\nTITLE: Setting MSVC Platform Toolset for Target in CMake\nDESCRIPTION: Conditionally sets the `PLATFORM_TOOLSET` property for the target `${the_target}`. If the `EMGUCV_PLATFORM_TOOLSET` variable is defined in the CMake environment, its value is used to specify the MSVC Platform Toolset (e.g., v142, v143) for the target.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_123\n\nLANGUAGE: cmake\nCODE:\n```\nIF(DEFINED EMGUCV_PLATFORM_TOOLSET)\n  set_target_properties(${the_target} PROPERTIES PLATFORM_TOOLSET ${EMGUCV_PLATFORM_TOOLSET})\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Restoring dotnet MAUI Workload - Shell\nDESCRIPTION: Restores the required dotnet MAUI workload ensuring all necessary SDK and components are available for building and running MAUI applications. Requires .NET SDK to be installed and accessible in the environment. No positional parameters are required; execute in the project directory for proper context. Outputs the result of fetching and installing any missing workloads.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Example/MAUI/BuildInfo/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n> dotnet workload restore\n```\n\n----------------------------------------\n\nTITLE: Setting GeoTIFF Build Flag Based on Platform in CMake\nDESCRIPTION: Initializes the `GEOTIFF_LIBRARY` variable to empty. It then sets the `EMGU_CV_WITH_TIFF` cache variable, which controls whether the TIFF wrapper (and subsequently GeoTIFF) is built. This flag is set to `OFF` for Android and Apple platforms, effectively skipping the GeoTIFF build, and `ON` for all other platforms.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_106\n\nLANGUAGE: cmake\nCODE:\n```\nSET(GEOTIFF_LIBRARY)\nIF (ANDROID OR APPLE)\n  SET(EMGU_CV_WITH_TIFF OFF CACHE BOOL \"BUILD TIFF wrapper\")\n  MESSAGE(STATUS \"Skipping tiff\")\nELSE()\n  SET(EMGU_CV_WITH_TIFF ON CACHE BOOL \"BUILD TIFF wrapper\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Defining KalmanFilter Properties via Macro - C/C++\nDESCRIPTION: Defines the set of state-space and noise matrix properties for OpenCV's KalmanFilter, using a macro-based pattern for automated code generation in Emgu CV. All state prediction and correction matrices are documented, and the property code depends on the OpenCV video module with the video_c.h header included.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_38\n\nLANGUAGE: C/C++\nCODE:\n```\n#include \\\"video_c.h\\\"\n```\n\n----------------------------------------\n\nTITLE: Applying Android Specific Build Settings in CMake\nDESCRIPTION: Applies specific configurations when building for the Android platform. If `ANDROID` is true, it adds the `ANDROID` preprocessor definition, links the target `${the_target}` against the C++ standard library (`c++`), and sets a linker option (`-Wl,-z,max-page-size=16384`) to potentially optimize memory usage or work around linker issues on Android.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_116\n\nLANGUAGE: cmake\nCODE:\n```\nIF(ANDROID)\n  ADD_DEFINITIONS(-DANDROID)\n  TARGET_LINK_LIBRARIES(${the_target} c++)\n  target_link_options(${the_target} PRIVATE \"-Wl,-z,max-page-size=16384\")\n  \n  # For Android, tell the linker to transform all the symbols in the static libraries to hidden.\n  # This can significantly reduce the binary size\n  #set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wl,--exclude-libs,ALL\")\n  #set(CMAKE_C_FLAGS \"${CMAKE_CXX_FLAGS} -Wl,--exclude-libs,ALL\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Generating C# Property Wrapper for cv::Stitcher in CMake\nDESCRIPTION: This snippet uses the `CREATE_OCV_CLASS_PROPERTY` CMake macro to generate C# code (`Stitcher.g.cs`) for the `cv::Stitcher` class. It specifically defines the `WorkScale` property in C#, mapping it to the `workScale` member (double) of the C++ class, conditional on the `HAVE_opencv_stitching` CMake variable being true.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_49\n\nLANGUAGE: cmake\nCODE:\n```\n   CREATE_OCV_CLASS_PROPERTY( \n    \"stitching/stitching_property\" \n    \"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV/Stitching/Stitcher.g.cs\"\n    \"cv::Stitcher\" \n    \"Stitcher\" \n    \"workScale\" \n    \"double\" \n    \"val\"\n    \"WorkScale\" \n    \"double\"\n    \"The work scale\"\n    \"Emgu.CV.Stitching\"\n    \"StitchingInvoke\"\n    \"Stitcher\"\n\t\"\"\n    \"#include \\\"stitching_c.h\\\"\"\n\t\"\"\n\t\"\"\n\t${HAVE_opencv_stitching})  \n```\n\n----------------------------------------\n\nTITLE: Generating C# Properties for cv::LineIterator using CMake\nDESCRIPTION: This snippet utilizes the `CREATE_OCV_CLASS_PROPERTY` CMake macro to generate a C# wrapper property for the `cv::LineIterator` C++ class. It defines the `Count` property (int), which represents the total number of pixels along the line being iterated. The output is `Emgu.CV/Imgproc/LineIterator.g.cs` in the `Emgu.CV` namespace, using `CvInvoke`. It requires `imgproc_c.h` and its generation depends on the `HAVE_opencv_imgproc` CMake variable.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\nCREATE_OCV_CLASS_PROPERTY( \n    \"imgproc/LineIterator_property\" \n    \"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV/Imgproc/LineIterator.g.cs\"\n    \"cv::LineIterator\" \n    \"LineIterator\" \n    \"count\" \n    \"int\" \n    \"element\"\n    \"Count\" \n    \"int\"\n    \"The total number of pixels in the line\"\n    \"Emgu.CV\"\n    \"CvInvoke\"\n    \"LineIterator\"\n\t\"\"\n    \"#include \\\"imgproc_c.h\\\"\"\n\t\"\"\n\t\"\"\n\t${HAVE_opencv_imgproc})\n```\n\n----------------------------------------\n\nTITLE: Managing CUDA, OpenCL, and Dependency DLLs - CMake Script\nDESCRIPTION: This CMake snippet automates the detection, aggregation, and installation of DLL dependencies (CUDA, CUBLAS, CUFFT, CUDNN, CURAND, OpenCL, etc.) for the EmguCV extern library. It utilizes conditionals to tailor which dependencies are included based on build options (like WITH_CUDA, WITH_CUDNN), uses FILE(GLOB ...) and LIST(APPEND ...) to aggregate DLL paths, and configures install and copy operations post-build with platform-aware logic. Key parameters include project directory variables, toolkit root paths, version conditions, output directories, and enables modular, platform-adaptive build and deployment without manual tracking of every dependency. The code expects a CMake 3.x+ environment and requires CUDA and OpenCL SDKs installed at paths referenced in the script; outputs are the lists of DLLs copied and installed to the output folder. Limitations include hardcoded file patterns and platform-specific branches that may require updates for future tool versions.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_102\n\nLANGUAGE: CMake\nCODE:\n```\n      MESSAGE(STATUS \"CVEXTERN_CUFFT_DEPENDENCY_DLLS: ${CVEXTERN_CUFFT_DEPENDENCY_DLLS}\")\n      LIST(APPEND CVEXTERN_CUDA_DEPENDENCY_DLLS ${CVEXTERN_CUFFT_DEPENDENCY_DLLS})\n    ENDIF()\n    \n    IF(WITH_CUBLAS)\n      FILE(GLOB CVEXTERN_CUBLAS_DEPENDENCY_DLLS \"${CUDA_TOOLKIT_ROOT_DIR}/bin/cublas*.dll\")\n      MESSAGE(STATUS \"CVEXTERN_CUBLAS_DEPENDENCY_DLLS: ${CVEXTERN_CUBLAS_DEPENDENCY_DLLS}\")\n      LIST(APPEND CVEXTERN_CUDA_DEPENDENCY_DLLS ${CVEXTERN_CUBLAS_DEPENDENCY_DLLS})\n\t  #LIST(APPEND CVEXTERN_CUDA_DEPENDENCY_DLLS \"${CUDA_TOOLKIT_ROOT_DIR}/bin/cublas${CUDA_POSTFIX}_${NPP_POSTFIX}.dll\")\n\t  #IF ((\"${npp_major}\" GREATER 10) OR ((\"${npp_major}\" STREQUAL \"10\") AND (\"${npp_minor}\" GREATER 0)))\n\t  #  LIST(APPEND CVEXTERN_CUDA_DEPENDENCY_DLLS \"${CUDA_TOOLKIT_ROOT_DIR}/bin/cublasLt${CUDA_POSTFIX}_${NPP_POSTFIX}.dll\")\n\t  #ENDIF()\n    ENDIF()  \n  ELSE()  \n    LIST(APPEND CVEXTERN_CUDA_DEPENDENCY_DLLS \n      \"${CUDA_NPP_LIBRARY_ROOT_DIR}/bin/npp${CUDA_POSTFIX}_${npp_major}${npp_minor}_${npp_build}.dll\"\n      \"${CUDA_TOOLKIT_ROOT_DIR}/bin/cudart${CUDA_POSTFIX}_${npp_major}${npp_minor}_${npp_build}.dll\"\n      )\n    #LIST(APPEND CVEXTERN_DEPENDENCY_DLL_NAMES \n    #  npp${CUDA_POSTFIX}_${npp_major}${npp_minor}_${npp_build} \n    #  cudart${CUDA_POSTFIX}_${npp_major}${npp_minor}_${npp_build})\n    \n    IF(WITH_CUFFT)\n      LIST(APPEND CVEXTERN_CUDA_DEPENDENCY_DLLS \"${CUDA_TOOLKIT_ROOT_DIR}/bin/cufft${CUDA_POSTFIX}_${npp_major}${npp_minor}_${npp_build}.dll\")\n      #LIST(APPEND CVEXTERN_DEPENDENCY_DLL_NAMES cufft${CUDA_POSTFIX}_${npp_major}${npp_minor}_${npp_build}) \n    ENDIF()\n    \n    IF(WITH_CUBLAS)\n      LIST(APPEND CVEXTERN_CUDA_DEPENDENCY_DLLS \"${CUDA_TOOLKIT_ROOT_DIR}/bin/cublas${CUDA_POSTFIX}_${npp_major}${npp_minor}_${npp_build}.dll\")\n      #LIST(APPEND CVEXTERN_DEPENDENCY_DLL_NAMES cublas${CUDA_POSTFIX}_${npp_major}${npp_minor}_${npp_build})\n    ENDIF()\n  ENDIF()\n\n  IF(WITH_CUDNN)\n    FILE(GLOB CVEXTERN_CUDNN_DEPENDENCY_DLLS \"${CUDA_TOOLKIT_ROOT_DIR}/bin/cudnn*.dll\" \"${CUDA_TOOLKIT_ROOT_DIR}/bin/zlibwapi.dll\")\n    MESSAGE(STATUS \"CVEXTERN_CUDNN_DEPENDENCY_DLLS: ${CVEXTERN_CUDNN_DEPENDENCY_DLLS}\")\n    LIST(APPEND CVEXTERN_CUDA_DEPENDENCY_DLLS ${CVEXTERN_CUDNN_DEPENDENCY_DLLS})\n\t#MESSAGE(\"WITH_CUDNN: ${WITH_CUDNN}\")\n\t#MESSAGE(\"APPENDING: ${CUDA_TOOLKIT_ROOT_DIR}/bin/cudnn${CUDA_POSTFIX}_${CUDNN_MAJOR_VERSION}.dll\")\n    #LIST(APPEND CVEXTERN_CUDA_DEPENDENCY_DLLS \"${CUDA_TOOLKIT_ROOT_DIR}/bin/cudnn${CUDA_POSTFIX}_${CUDNN_MAJOR_VERSION}.dll\") \n  ENDIF()\n\n  FILE(GLOB CVEXTERN_CURAND_DEPENDENCY_DLLS \"${CUDA_TOOLKIT_ROOT_DIR}/bin/curand*.dll\")\n  MESSAGE(STATUS \"CVEXTERN_CURAND_DEPENDENCY_DLLS: ${CVEXTERN_CURAND_DEPENDENCY_DLLS}\")\n  LIST(APPEND CVEXTERN_CUDA_DEPENDENCY_DLLS ${CVEXTERN_CURAND_DEPENDENCY_DLLS})\n\n  #FILE(GLOB CVEXTERN_CURAND_DEPENDENCY_DLLS \"${CUDA_TOOLKIT_ROOT_DIR}/bin/curand*.dll\")\n  #MESSAGE(STATUS \"CVEXTERN_CURAND_DEPENDENCY_DLLS: ${CVEXTERN_CURAND_DEPENDENCY_DLLS}\")\n  #LIST(APPEND CVEXTERN_CUDA_DEPENDENCY_DLLS ${CVEXTERN_CURAND_DEPENDENCY_DLLS})\n\n  LIST(APPEND CVEXTERN_DEPENDENCY_DLLS ${CVEXTERN_CUDA_DEPENDENCY_DLLS})\n\nENDIF()\n\n#IF(ANDROID OR IOS)\n#  file(GLOB_RECURSE gpu_extern_srcs \"gpu/stitching_c.cpp\" \"gpu/videostab_c.cpp\")\n#  file(GLOB_RECURSE gpu_extern_hdrs \"gpu/stitching_c.h\" \"gpu/videostab_c.h\")\n#ELSE()\n#  file(GLOB_RECURSE gpu_extern_srcs \"gpu/*.cpp\")\n#  file(GLOB_RECURSE gpu_extern_hdrs \"gpu/*.h*\")\n#ENDIF()\n############################### GPU END ################################\n\n############################### OpenCL START ##############################\n#IF(WITH_OPENCL)\n#  MESSAGE(STATUS \"Building cvextern with OPENCL\")\n\n#  IF(WIN32 AND WITH_OPENCL AND NOT (NETFX_CORE))\n#    SET(OPENCL_PROJ OpenCL)\n#  ENDIF()\n#  IF(WIN32)\n#    IF(TARGET_ARCH_64) \n#      MESSAGE(\"Including OpenCL dll: ${PROJECT_SOURCE_DIR}/../lib/3rdParty/x64/OpenCL.dll\")\n#      LIST(APPEND CVEXTERN_DEPENDENCY_DLLS \"${PROJECT_SOURCE_DIR}/../lib/3rdParty/x64/OpenCL.dll\")\n#    else()\n#      MESSAGE(\"Including OpenCL dll: ${PROJECT_SOURCE_DIR}/../lib/3rdParty/x64/OpenCL.dll\")\n#      LIST(APPEND CVEXTERN_DEPENDENCY_DLLS \"${PROJECT_SOURCE_DIR}/../lib/3rdParty/x64/OpenCL.dll\")\n#    ENDIF()\n#  ENDIF()\n#ENDIF()\n############################### OpenCL END ################################\n\n############################### xfeatures2d START ##############################\n\n#  IF( (NOT WITH_CUDA) OR (NOT (TARGET opencv_cudaimgproc)) )\n#    FILE(GLOB xfeatures2d_srcs_excludes \"xfeatures2d/nonfree_gpu_c.cpp\")\n#    LIST(REMOVE_ITEM extern_srcs ${xfeatures2d_srcs_excludes})\n#    FILE(GLOB xfeatures2d_hdrs_excludes \"xfeatures2d/nonfree_gpu_c.h\")\n#    LIST(REMOVE_ITEM extern_hdrs ${xfeatures2d_hdrs_excludes})\n#  ENDIF()\n\n############################### xfeatures2d END ################################\n\nIF(DEFINED CVEXTERN_DEPENDENCY_DLLS)\n  FOREACH(CVEXTERN_DEPENDENCY_DLL ${CVEXTERN_DEPENDENCY_DLLS})\n\tSTRING(REPLACE \"$(ConfigurationName)\" \"release\" CVEXTERN_DEPENDENCY_DLL ${CVEXTERN_DEPENDENCY_DLL})\n    LIST(APPEND CVEXTERN_DEPENDENCY_DLLS_RELEASE ${CVEXTERN_DEPENDENCY_DLL})\n  ENDFOREACH()\n  #MESSAGE(STATUS \"==================> CVEXTERN_DEPENDENCY_DLLS_RELEASE: ${CVEXTERN_DEPENDENCY_DLLS_RELEASE}\")\n  INSTALL(\n    FILES \n    ${CVEXTERN_DEPENDENCY_DLLS_RELEASE}\n    DESTINATION libs${UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER}\n    COMPONENT libs)\nENDIF()\n\n#IF(ANDROID OR APPLE)\n#  FILE(GLOB extern_srcs_excludes \"${PROJECT_SOURCE_DIR}/tiffio.cpp\")\n#  LIST(REMOVE_ITEM extern_srcs ${extern_srcs_excludes})\n#  #MESSAGE(STATUS \"extern_srcs: ${extern_srcs}\")\n#  FILE(GLOB extern_hdrs_excludes \"${PROJECT_SOURCE_DIR}/tiffio_c.h\")\n#  LIST(REMOVE_ITEM extern_hdrs ${extern_hdrs_excludes})\n#ENDIF()\n\n\n\nIF(IOS)\n  add_library(${the_target} STATIC ${extern_srcs} ${extern_hdrs} )\nELSEIF(WIN32)\n  #add the version information for windows binary\n  add_library(${the_target} SHARED ${extern_srcs} ${extern_hdrs} ${PROJECT_SOURCE_DIR}/version.rc )\nELSEIF(\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"Emscripten\")\n  add_library(${the_target} STATIC ${extern_srcs} ${extern_hdrs} )\n  #set_target_properties(${the_target} PROPERTIES SUFFIX \".bc\")    \nELSE()\n  add_library(${the_target} SHARED ${extern_srcs} ${extern_hdrs} )\n  IF (APPLE)\n    set_target_properties(${the_target} PROPERTIES MACOSX_RPATH ON)    \n    #SET(DYLIBBUNDLER_PATH \"${PROJECT_SOURCE_DIR}/../platform/macos/dylibbundler\")\n    #MESSAGE(STATUS \"DYLIBBUNDLER_PATH: ${DYLIBBUNDLER_PATH}\")\n  ENDIF()\nENDIF()  \n\n\nIF(DEFINED CVEXTERN_DEPENDENCY_DLLS)\n  FOREACH(CVEXTERN_DEPENDENCY_DLL ${CVEXTERN_DEPENDENCY_DLLS})\n    LIST(APPEND CVEXTERN_DEPENDENCY_DLL_DEPLOY_COMMAND COMMAND ${CMAKE_COMMAND} -E copy \"${CVEXTERN_DEPENDENCY_DLL}\" \"${CMAKE_RUNTIME_OUTPUT_DIRECTORY}\")\n    GET_FILENAME_COMPONENT(CVEXTERN_DEPENDENCT_DLL_NAME ${CVEXTERN_DEPENDENCY_DLL} NAME_WE)\n    LIST(APPEND CVEXTERN_DEPENDENCY_DLL_NAMES ${CVEXTERN_DEPENDENCT_DLL_NAME})\n  ENDFOREACH()\n  \n  #Promote this to parent scope such that cpack will know what dlls to be included in the package\n  MESSAGE(STATUS \"Copying CVEXTERN_DEPENDENCY_DLL_NAMES to parent scope: ${CVEXTERN_DEPENDENCY_DLL_NAMES}\")\n  SET(CVEXTERN_DEPENDENCY_DLL_NAMES ${CVEXTERN_DEPENDENCY_DLL_NAMES} PARENT_SCOPE)\n  \n  ADD_CUSTOM_COMMAND(\n    TARGET ${the_target}\n    POST_BUILD\n    ${CVEXTERN_DEPENDENCY_DLL_DEPLOY_COMMAND}\n    COMMENT \"Copying ${CVEXTERN_DEPENDENCY_DLLS} to ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}\")\nENDIF()\n\nIF(DEFINED CVEXTERN_CUDA_DEPENDENCY_DLLS)\n  #Promote this to parent scope such that cpack will know what cuda dlls to be included in the package\n  #MESSAGE(\"**************CVEXTERN_CUDA_DEPENDENCY_DLL_NAMES: ${CVEXTERN_CUDA_DEPENDENCY_DLL_NAMES}\")\n  SET(CVEXTERN_CUDA_DEPENDENCY_DLL_NAMES ${CVEXTERN_CUDA_DEPENDENCY_DLL_NAMES} PARENT_SCOPE)\nENDIF()\n\n# For dynamic link numbering conventions\nset_target_properties(${the_target} PROPERTIES\n  OUTPUT_NAME \"${the_target}\"\n  )\n\n# Additional target properties\nset_target_properties(${the_target} PROPERTIES\n  DEBUG_POSTFIX \"${OPENCV_DEBUG_POSTFIX}\"\n  ARCHIVE_OUTPUT_DIRECTORY \"${CMAKE_SOURCE_DIR}/libs${UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER}\"\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_SOURCE_DIR}/libs${UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER}\"\n  LIBRARY_OUTPUT_DIRECTORY \"${CMAKE_SOURCE_DIR}/libs${UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER}\"\n  DEFINE_SYMBOL \"CVAPI_EXPORTS\"\n  )\n\n#if (NOT (WIN32 OR ANDROID OR IOS))\n```\n\n----------------------------------------\n\nTITLE: Suppressing MSVC Compiler Warnings in CMake\nDESCRIPTION: Adds preprocessor definitions to suppress specific warnings when compiling with the Microsoft Visual C++ compiler (MSVC). It disables warning `4251` (related to exporting class templates) and defines `_CRT_SECURE_NO_WARNINGS` to suppress warnings about potentially insecure C runtime functions.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_117\n\nLANGUAGE: cmake\nCODE:\n```\n#disable warnings\nIF(MSVC)\n  ADD_DEFINITIONS(-wd4251 -D_CRT_SECURE_NO_WARNINGS)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Creating Video Tracker Property Accessors with EmguCV Macros - CMake\nDESCRIPTION: Defines CMake macro invocation for generating .NET property access/files for cv::TrackerDaSiamRPN's TrackingScore, exposing the float property to EmguCV. Depends on EmguCV's codegen and OpenCV video module. Key parameter is TrackingScore (float) reflecting tracking confidence. Primarily for auto-generating .NET property accessors interfacing video tracking algorithms in OpenCV.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_56\n\nLANGUAGE: CMake\nCODE:\n```\nCREATE_OCV_CLASS_PROPERTY( \n    \"video/TrackerDaSiamRPN_property\" \n    \"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV/Video/TrackerDaSiamRPN.g.cs\"\n    \"cv::TrackerDaSiamRPN\" \n    \"TrackerDaSiamRPN\" \n    \"TrackingScore\" \n    \"float\" \n    \"propR\"\n    \"TrackingScore\" \n    \"float\"\n    \"Tracking score\"\n    \"Emgu.CV\"\n    \"CvInvoke\"\n    \"TrackerDaSiamRPN\"\n\t\"\"\n\t\"#include \\\"video_c.h\\\"\"\n\t\"\"\n\t\"\"\n\t${HAVE_opencv_video})\n```\n\n----------------------------------------\n\nTITLE: Creating CUDA HOG Detector Property Accessors in EmguCV - CMake\nDESCRIPTION: Utilizes CMake macro to map CUDA HOG (Histogram of Oriented Gradients) detector's key parameters into EmguCV .NET properties. Covers preprocessing settings, detection thresholds, normalization, and stride/format details. Prerequisites include EmguCV's CUDA object detection support and OpenCV cudaobjdetect. Enables managed configuration of CUDA-accelerated HOG detection.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_59\n\nLANGUAGE: CMake\nCODE:\n```\nCREATE_OCV_CLASS_PROPERTY( \n    \"cudaobjdetect/cuda_hog_property\" \n    \"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV.Cuda/Objdetect/CudaHOG.g.cs\"\n    \"cv::cuda::HOG\" \n    \"CudaHOG\"\n    \"GammaCorrection;WinSigma;NumLevels;GroupThreshold;HitThreshold;ScaleFactor;L2HysThreshold;DescriptorFormat;DescriptorSize;WinStride;BlockHistogramSize\" \n    \"bool;double;int;int;double;double;double;int;size_t;CvSize;size_t\" \n    \"prop;prop;prop;prop;prop;prop;prop;propR;propR;struct;propR\"\n    \"GammaCorrection;WinSigma;NumLevels;GroupThreshold;HitThreshold;ScaleFactor;L2HysThreshold;DescriptorFormat;DescriptorSize;WinStride;BlockHistogramSize\" \n    \"bool;double;int;int;double;double;double;CudaHOG.DescrFormat;IntPtr;System.Drawing.Size;IntPtr\"\n    \"Flag to specify whether the gamma correction preprocessing is required or not;\n    Gaussian smoothing window parameter;\n    Maximum number of detection window increases;\n    Coefficient to regulate the similarity threshold. When detected, some objects can be covered by many rectangles. 0 means not to perform grouping. See groupRectangles.;\n    Threshold for the distance between features and SVM classifying plane. Usually it is 0 and should be specfied in the detector coefficients (as the last free coefficient). But if the free coefficient is omitted (which is allowed), you can specify it manually here.;\n    Coefficient of the detection window increase.;\n    L2-Hys normalization method shrinkage.;\n    The descriptor format;\n    Returns the number of coefficients required for the classification.;\n    Window stride. It must be a multiple of block stride.;\n    Returns the block histogram size.\"\n    \"Emgu.CV.Cuda\"\n    \"CudaInvoke\"\n    \"CudaHOG\"\n\t\"\"\n    \"#include \\\"cudaobjdetect_c.h\\\"\"\n\t\"\"\n\t\"\"\n\t${HAVE_opencv_cudaobjdetect})\n```\n\n----------------------------------------\n\nTITLE: Conditional Module Macro Control and Property Guards - CMake\nDESCRIPTION: These code snippets implement conditional compilation logic for module presence and macro setup, using standard IF, SET, and ENDIF blocks. Such constructs avoid build failures or inappropriate code generation for modules that are not found or intentionally omitted. They act as guards, switching relevant variables or disabling property generation.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_69\n\nLANGUAGE: CMake\nCODE:\n```\nIF (NOT HAVE_opencv_structured_light)\n  SET(HAVE_opencv_structured_light FALSE)\nENDIF()\n```\n\nLANGUAGE: CMake\nCODE:\n```\nIF (NOT HAVE_opencv_ximgproc)\n  SET(HAVE_opencv_ximgproc FALSE)\nENDIF()\n```\n\nLANGUAGE: CMake\nCODE:\n```\nIF (NOT HAVE_opencv_surface_matching)\n  SET(HAVE_opencv_surface_matching FALSE)\nENDIF()\n```\n\nLANGUAGE: CMake\nCODE:\n```\nIF (NOT HAVE_opencv_rgbd)\n  SET(HAVE_opencv_rgbd FALSE)\nENDIF()\n```\n\nLANGUAGE: CMake\nCODE:\n```\nIF(WITH_OPENMP)\n  FIND_PACKAGE( OpenMP REQUIRED)\n  if(OPENMP_FOUND)\n    MESSAGE(STATUS \" -- Compiling cvextern with OPENMP\")\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}\")\n    set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}\")\n  endif()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Detecting NVIDIA NPP Version from Headers in CMake\nDESCRIPTION: This snippet attempts to determine the installed NVIDIA Performance Primitives (NPP) version by parsing header files. It first checks for `nppversion.h` and extracts major, minor, and build numbers using `file(STRINGS)` and regular expressions. If `nppversion.h` is not found, it falls back to checking `npp.h` for older define patterns (`NPP_VER_*`). The extracted version numbers are cleaned and exported to the parent CMake scope.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_99\n\nLANGUAGE: cmake\nCODE:\n```\n  if(EXISTS ${CUDA_NPP_INCLUDES}/nppversion.h)\n    SET(NPP_VERSION_FILE ${CUDA_NPP_INCLUDES}/nppversion.h)\n    \n    file( STRINGS ${NPP_VERSION_FILE} npp_major REGEX \"#define NPP_VERSION_MAJOR.*\")\n    file( STRINGS ${NPP_VERSION_FILE} npp_minor REGEX \"#define NPP_VERSION_MINOR.*\")\n    file( STRINGS ${NPP_VERSION_FILE} npp_build REGEX \"#define NPP_VERSION_BUILD.*\")\n    \n    string( REGEX REPLACE \"#define NPP_VERSION_MAJOR[ \\\\t]+|//.*\" \"\" npp_major ${npp_major})\n    string( REGEX REPLACE \"#define NPP_VERSION_MINOR[ \\\\t]+|//.*\" \"\" npp_minor ${npp_minor})\n    string( REGEX REPLACE \"#define NPP_VERSION_BUILD[ \\\\t]+|//.*\" \"\" npp_build ${npp_build})\n  elseif(EXISTS ${CUDA_NPP_INCLUDES}/npp.h)\n    SET(NPP_VERSION_FILE ${CUDA_NPP_INCLUDES}/npp.h)\n    file( STRINGS ${NPP_VERSION_FILE} npp_major REGEX \"#define NPP_VER_MAJOR.*\")\n    file( STRINGS ${NPP_VERSION_FILE} npp_minor REGEX \"#define NPP_VER_MINOR.*\")\n    file( STRINGS ${NPP_VERSION_FILE} npp_build REGEX \"#define NPP_VER_BUILD.*\")\n    \n    string( REGEX REPLACE \"#define NPP_VER_MAJOR[ \\\\t]+|//.*\" \"\" npp_major ${npp_major})\n    string( REGEX REPLACE \"#define NPP_VER_MINOR[ \\\\t]+|//.*\" \"\" npp_minor ${npp_minor})\n    string( REGEX REPLACE \"#define NPP_VER_BUILD[ \\\\t]+|//.*\" \"\" npp_build ${npp_build})\n  endif()\n \n  if(EXISTS ${NPP_VERSION_FILE})\n    #MESSAGE(STATUS \">>>>> npp version header: ${NPP_VERSION_FILE}\")\n\t\n    string( REGEX MATCH \"[0-9]+\" npp_major ${npp_major} ) \n    string( REGEX MATCH \"[0-9]+\" npp_minor ${npp_minor} ) \n    string( REGEX MATCH \"[0-9]+\" npp_build ${npp_build} ) \t\n\t\n\t#MESSAGE(STATUS \">>> npp version major: ${npp_major}\")\n\t#MESSAGE(STATUS \">>> npp version minor: ${npp_minor}\")\n\t#MESSAGE(STATUS \">>> npp version build: ${npp_build}\")\n\t\n\t#Also copy the values to the parent scope\n\tset(npp_major \"${npp_major}\" PARENT_SCOPE)\n\tset(npp_minor \"${npp_minor}\" PARENT_SCOPE)\n\tset(npp_build \"${npp_build}\" PARENT_SCOPE)\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Generating C++/C# Code for cv::String Properties (Marshal Type 'val')\nDESCRIPTION: Checks if the marshalling type (`MARSHAL_TYPE`) is 'val' and the C++ property type (`PROPERTY_TYPE`) is 'cv::String'. Based on the `IS_DUMMY` flag, it generates either dummy or actual C++ header (`C_HEADER_SOURCE`) and source (`C_SOURCE`) code for a function retrieving the string property. It then generates the corresponding C# P/Invoke declaration (`CS_SOURCE`) using `DllImport` and the C# property implementation (`CS_CLASS_SOURCE`) which uses `CvString` to handle marshalling between the native `cv::String` and C# `string`.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n    IF(\"${MARSHAL_TYPE}\" STREQUAL \"val\")\n      IF(\"${PROPERTY_TYPE}\" STREQUAL \"cv::String\") #special handling for functions that returns strings\n\t    IF(IS_DUMMY)\n\t  \t  SET(C_HEADER_SOURCE \"${C_HEADER_SOURCE}\nCVAPI(void) cve${CLASS_NAME}${CS_FUNCTION_NAME}(void* obj, cv::String* str);  \n     \")\n\t      SET(C_SOURCE \"${C_SOURCE}\nvoid cve${CLASS_NAME}${CS_FUNCTION_NAME}(void* obj, cv::String* str) { ${RAISE_FUNCTION_NOT_SUPPORT_CPP} }   \n     \")\n\t    ELSE()\n\t      SET(C_HEADER_SOURCE \"${C_HEADER_SOURCE}\nCVAPI(void) cve${CLASS_NAME}${CS_FUNCTION_NAME}(${CLASS_NAME_FULL}* obj, cv::String* str);  \n     \")\n\t      SET(C_SOURCE \"${C_SOURCE}\nvoid cve${CLASS_NAME}${CS_FUNCTION_NAME}(${CLASS_NAME_FULL}* obj, cv::String* str) { *str = obj->${PROPERTY_NAME}(); }   \n     \")\n\t    ENDIF()\n\t\n\t    SET(CS_SOURCE \"${CS_SOURCE}\n     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] ${MARSHAL_RETURN}\n     internal static extern void cve${CLASS_NAME}${CS_FUNCTION_NAME}(IntPtr obj, IntPtr str);\n     \")\n\t    SET(CS_CLASS_SOURCE \"${CS_CLASS_SOURCE}\n     /// <summary>\n     /// ${CS_DOCUMENTATION}\n     /// </summary>\n     public ${CS_PROPERTY_TYPE} ${CS_FUNCTION_NAME}\n     {\n        get \n        { \n           using (CvString s = new CvString())\n           {  \n              ${cs_invoke_class}.cve${CLASS_NAME}${CS_FUNCTION_NAME}(_ptr, s); \n              return s.ToString();\n           }\n        } \n     }\n     \")\n```\n\n----------------------------------------\n\nTITLE: Finding and Appending HDDL DLLs in CMake\nDESCRIPTION: Sets the directory for Intel HDDL (Hardware Deep Learning Development Kit) DLLs based on `INF_ENGINE_BASE_DIR`. It uses `FILE(GLOB)` to find all DLLs in the specified directory and appends their paths to `CVEXTERN_DEPENDENCY_DLLS`. A status message logs the found DLL names.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_94\n\nLANGUAGE: cmake\nCODE:\n```\n\tSET(INF_HDDL_DLL_DIRS \"${INF_ENGINE_BASE_DIR}/external/hddl/bin\")\n    FILE(GLOB INF_HDDL_DLL_NAMES \"${INF_HDDL_DLL_DIRS}/*.dll\")\n    MESSAGE(STATUS \"^^^^^^^^^^^^^^  INF_HDDL_DLL_NAMES: ${INF_HDDL_DLL_NAMES}\")\n    LIST(APPEND CVEXTERN_DEPENDENCY_DLLS ${INF_HDDL_DLL_NAMES})\n```\n\n----------------------------------------\n\nTITLE: C# Build and Macro Requirements - CMake\nDESCRIPTION: Ensures the CSharp CMake package is found and includes CSharpMacros, which are essential for building C# projects within CMake. This enables proper compilation and integration of managed C# code in the Emgu CV build pipeline.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nFIND_PACKAGE(CSharp REQUIRED)\nINCLUDE (CSharpMacros)\n```\n\n----------------------------------------\n\nTITLE: Generating C++/C# Code for Value-Type Properties (Marshal Type 'val')\nDESCRIPTION: Handles properties where the marshalling type (`MARSHAL_TYPE`) is 'val' but the C++ type (`PROPERTY_TYPE`) is not 'cv::String'. Depending on the `IS_DUMMY` flag, it generates either dummy or actual C++ header (`C_HEADER_SOURCE`) and source (`C_SOURCE`) definitions for a function that returns the property value directly. It also generates the C# P/Invoke declaration (`CS_SOURCE`) and a C# property (`CS_CLASS_SOURCE`) with a getter that directly calls the P/Invoke function.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\n      ELSE()\n\t    IF (IS_DUMMY)\n\t\t  SET(C_HEADER_SOURCE \"${C_HEADER_SOURCE}\nCVAPI(${PROPERTY_TYPE}) cve${CLASS_NAME}${CS_FUNCTION_NAME}(void* obj);  \n     \")\n\t      SET(C_SOURCE \"${C_SOURCE}\n${PROPERTY_TYPE} cve${CLASS_NAME}${CS_FUNCTION_NAME}(void* obj) { ${RAISE_FUNCTION_NOT_SUPPORT_CPP} }   \n     \")\n\t\tELSE()\n\t      SET(C_HEADER_SOURCE \"${C_HEADER_SOURCE}\nCVAPI(${PROPERTY_TYPE}) cve${CLASS_NAME}${CS_FUNCTION_NAME}(${CLASS_NAME_FULL}* obj);  \n     \")\n\t      SET(C_SOURCE \"${C_SOURCE}\n${PROPERTY_TYPE} cve${CLASS_NAME}${CS_FUNCTION_NAME}(${CLASS_NAME_FULL}* obj) { return obj->${PROPERTY_NAME}(); }   \n     \")\n\t\tENDIF()\n\t\n\tSET(CS_SOURCE \"${CS_SOURCE}\n     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)] ${MARSHAL_RETURN}\n     internal static extern ${CS_PROPERTY_TYPE} cve${CLASS_NAME}${CS_FUNCTION_NAME}(IntPtr obj);\n     \")\n\tSET(CS_CLASS_SOURCE \"${CS_CLASS_SOURCE}\n     /// <summary>\n     /// ${CS_DOCUMENTATION}\n     /// </summary>\n     public ${CS_PROPERTY_TYPE} ${CS_FUNCTION_NAME}\n     {\n        get { return ${cs_invoke_class}.cve${CLASS_NAME}${CS_FUNCTION_NAME}(_ptr); } \n     }\n     \")\n      ENDIF()\n```\n\n----------------------------------------\n\nTITLE: Defining MCC CChecker Property Wrapper in CMake\nDESCRIPTION: This macro defines cv::mcc::CChecker property wrappers for EmguCV, specifying native property types, managed equivalents, and documentation for code generation. Requires mcc_c.h for native interop and Emgu.CV.Mcc for managed bindings. Intended to automatically map color checker properties.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_26\n\nLANGUAGE: CMake\nCODE:\n```\nCREATE_OCV_CLASS_PROPERTY( \n    \"mcc/CChecker_property\" \n    \"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV.Contrib/Mcc/CChecker.g.cs\"\n    \"cv::mcc::CChecker\" \n    \"CChecker\" \n    \"Target;Cost\" \n    \"cv::mcc::TYPECHART;float\" \n    \"prop;prop\"\n    \"Target;Cost\" \n    \"CChecker.TypeChart;float\"\n    \"Target;Cost\"\n    \"Emgu.CV.Mcc\"\n    \"MccInvoke\"\n    \"CChecker\"\n\t\"\"\n    \"#include \\\"mcc_c.h\\\"\"\n\t\"\"\n\t\"\"\n\t${HAVE_opencv_mcc})\n```\n\n----------------------------------------\n\nTITLE: Finding and Appending TBB DLLs in CMake\nDESCRIPTION: Sets the directory for Intel TBB DLLs based on `INF_ENGINE_BASE_DIR`. It uses `FILE(GLOB)` to find all DLLs and debug DLLs separately. Debug DLLs are removed from the main list, and the remaining (release) TBB DLLs are appended to `CVEXTERN_DEPENDENCY_DLLS`. Status messages log the directories and found DLL names.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_92\n\nLANGUAGE: cmake\nCODE:\n```\n    SET(INF_TBB_ENGINE_DLL_DIRS \"${INF_ENGINE_BASE_DIR}/external/tbb/bin\")\n\tMESSAGE(STATUS \"^^^^^^^^^^^^^^  INF_TBB_ENGINE_DLL_DIRS: ${INF_TBB_ENGINE_DLL_DIRS}\")\n    FILE(GLOB INF_TBB_DLL_NAMES \"${INF_TBB_ENGINE_DLL_DIRS}/*.dll\")\n\tMESSAGE(STATUS \"^^^^^^^^^^^^^^  INF_TBB_DLL_NAMES: ${INF_TBB_DLL_NAMES}\")\n    FILE(GLOB INF_TBB_DEBUG_DLL_NAMES \"${INF_TBB_ENGINE_DLL_DIRS}/*_debug.dll\")\n\tMESSAGE(STATUS \"^^^^^^^^^^^^^^  INF_TBB_DEBUG_DLL_NAMES: ${INF_TBB_DEBUG_DLL_NAMES}\")\n    IF (INF_TBB_DEBUG_DLL_NAMES)\n      LIST(REMOVE_ITEM INF_TBB_DLL_NAMES ${INF_TBB_DEBUG_DLL_NAMES})\n    ENDIF()\n\tLIST(APPEND CVEXTERN_DEPENDENCY_DLLS ${INF_TBB_DLL_NAMES})\n```\n\n----------------------------------------\n\nTITLE: Building and Configuring EmguCV UWP NuGet Package with CMake - CMake\nDESCRIPTION: This CMake snippet checks if the Windows Store 10 flag is present, then creates a NuGet package project for EmguCV targeting UWP. It locates the required output directory, invokes a custom macro to build a NuGet package from a specified .csproj and .nuspec, and adds dependencies on the Emgu.CV and cvextern targets. If package signing is enabled and the signing tool is present, it signs the resulting NuGet package. Optionally, solution folder properties are set for IDE organization. Prerequisites include CMake, relevant macros (BUILD_NUGET_PACKAGE, EMGU_SIGN_NUGET), and defined CMake variables for EmguCV sources and output locations.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/platforms/nuget/Emgu.CV.runtime.uwp/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# --------------------------------------------------------\\n#  Copyright (C) 2004-2025 by EMGU Corporation. All rights reserved.\\n# --------------------------------------------------------\\n\\nIF (HAVE_WINSTORE_10)\\n\\n  PROJECT(Emgu.CV.runtime.uwp.nuget)\\n\\n  get_filename_component(NUGET_OUTPUT_DIR ${CMAKE_CURRENT_SOURCE_DIR} DIRECTORY)\\n\\n  BUILD_NUGET_PACKAGE(\\n    ${PROJECT_NAME} \\n\\t\"${EMGU_CV_SOURCE_DIR}/Emgu.CV/NetStandard/Emgu.CV.csproj\"  #csproj_file \\n\\t\"${CMAKE_CURRENT_SOURCE_DIR}/Package.nuspec\" #nuspec_file \\n\\t\"${NUGET_OUTPUT_DIR}\" #output_dir \\n\\t\"${CMAKE_CURRENT_SOURCE_DIR}\" #working_dir\\n\\t) \\n\\t\\n  ADD_DEPENDENCIES(${PROJECT_NAME} Emgu.CV cvextern)\\n  \\n  IF (EMGU_NUGET_SIGN_FOUND)\\n    EMGU_SIGN_NUGET(${PROJECT_NAME} \"${NUGET_OUTPUT_DIR}/${EMGUCV_UWP_NUGET_ID}.${CPACK_PACKAGE_VERSION}.nupkg\")\\n  ENDIF()\\n\\n  if(ENABLE_SOLUTION_FOLDERS)\\n    set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER \"nuget\")\\n  endif() \\n  \\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Building and Running iOS MAUI App on Device - Shell\nDESCRIPTION: Builds and deploys the MAUI app directly to a connected physical iOS device via its UUID, targeting net9.0-ios, Release configuration, and ARM64. Requires Apple's development environment, a connected device, and replacement of {YOUR_IOS_DEVICE_UUID} with an actual hardware identifier. Launches the app on the device after successful build and deployment.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Example/MAUI/BuildInfo/README.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n> dotnet build -t:Run -f net9.0-ios -c Release -r ios-arm64 --self-contained -p:_DeviceName={YOUR_IOS_DEVICE_UUID}\n```\n\n----------------------------------------\n\nTITLE: Adding OpenCV DNN OpenVINO Dependency in CMake\nDESCRIPTION: Conditionally adds a build dependency on the `opencv_dnn_openvino` target. If a target named `opencv_dnn_openvino` exists in the build configuration, this command ensures it is built before `${the_target}`.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_111\n\nLANGUAGE: cmake\nCODE:\n```\nIF (TARGET opencv_dnn_openvino)\n  ADD_DEPENDENCIES(${the_target} opencv_dnn_openvino)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring Tesseract classify Library Build in CMake\nDESCRIPTION: This snippet defines and configures the 'tesseract_classify' static library project. It finds source and header files in the 'classify' directory using `file(GLOB ...)` , organizes them into source groups, applies MSVC-specific configurations, includes directories from dependent Tesseract modules (cutil, ccstruct, ccutil, viewer, opencl, dict), adds the static library target, sets project properties, and specifies dependencies for non-MSVC builds.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/tesseract/libtesseract/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\n#classify\nPROJECT(tesseract_classify)\nfile(GLOB tesseract_classify_srcs \"${TESSERACT_SRC_DIR}/classify/*.cpp\")\nfile(GLOB tesseract_classify_hdrs \"${TESSERACT_SRC_DIR}/classify/*.h\")\nsource_group(\"Src\" FILES ${tesseract_classify_srcs})\nsource_group(\"Include\" FILES ${tesseract_classify_hdrs})\nIF(MSVC)\n  add_definitions(-D__MSW32__ -W0)\n  include_directories(\"${TESSERACT_SRC_DIR}/vs2010/include\")\nENDIF()\ninclude_directories(\"${TESSERACT_SRC_DIR}/cutil\" \"${TESSERACT_SRC_DIR}/ccstruct\" \"${TESSERACT_SRC_DIR}/ccutil\" \"${TESSERACT_SRC_DIR}/viewer\" \"${TESSERACT_SRC_DIR}/opencl\" \"${TESSERACT_SRC_DIR}/dict\")\nadd_library(${PROJECT_NAME} STATIC ${tesseract_classify_srcs} ${tesseract_classify_hdrs})\nSET_TESSERACT_PROJECT_PROPERTY(${PROJECT_NAME})\nIF (NOT MSVC)\n  ADD_DEPENDENCIES(${PROJECT_NAME} tesseract_cutil tesseract_ccstruct tesseract_ccutil tesseract_viewer tesseract_opencl tesseract_dict)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Detecting Linux Platform Support and Android Architecture Variants - CMake\nDESCRIPTION: This snippet detects if the current build should be flagged as a Linux build based on a series of build-type or architecture variables (e.g., IS_DEBIAN_ARM_BUILD, HAVE_LINUX_ARM64), then proceeds to construct the ANDROID_LABEL variable by checking which Android architectures are enabled. The code fragment ensures variables like HAVE_LINUX and ANDROID_LABEL are consistently set for downstream logic (like packaging or feature inclusion). Inputs required are a matrix of platform and architecture flags. Results are simple boolean or string flags for major platforms and architecture combinations.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_32\n\nLANGUAGE: CMake\nCODE:\n```\nIF (IS_DEBIAN_ARM_BUILD OR IS_DEBIAN_ARM64_BUILD OR IS_UBUNTU_X64_BUILD OR IS_UBUNTU_X86_BUILD OR IS_UBUNTU_ARM64_BUILD OR HAVE_LINUX_ARM OR HAVE_LINUX_ARM64 OR HAVE_LINUX_X64 OR HAVE_LINUX_X86 OR IS_RHEL_X64_BUILD OR HAVE_RHEL_X64)\n  SET(HAVE_LINUX ON)\nELSE()\n  SET(HAVE_LINUX OFF)\nENDIF()\n\nSET(ANDROID_LABEL \"\")\nIF(HAVE_ANDROID_ARM64_V8A)\n  SET(ANDROID_LABEL \"${ANDROID_LABEL}-arm64-v8a\")\nENDIF()\n#IF(HAVE_ANDROID_ARMEABI)\n#  SET(ANDROID_LABEL \"${ANDROID_LABEL}-armeabi\")\n#ENDIF()\nIF(HAVE_ANDROID_ARMEABI_V7A)\t\n  SET(ANDROID_LABEL \"${ANDROID_LABEL}-armeabi-v7a\")\nENDIF()\nIF(HAVE_ANDROID_X86)\n  SET(ANDROID_LABEL \"${ANDROID_LABEL}-x86\")\nENDIF()\nIF(HAVE_ANDROID_X86_64)\n  SET(ANDROID_LABEL \"${ANDROID_LABEL}-x86_64\")\nENDIF()\n\n#IF(\"${ANDROID_LABEL}\" STREQUAL \"-arm64-v8a-armeabi-armeabi-v7a-x86-x86_64\")\nIF(\"${ANDROID_LABEL}\" STREQUAL \"-arm64-v8a-armeabi-v7a-x86-x86_64\")\n  SET(ANDROID_LABEL \"-android\")\nELSEIF(NOT (\"${ANDROID_LABEL}\" STREQUAL \"\"))\n  SET(ANDROID_LABEL \"-android${ANDROID_LABEL}\")\nENDIF()\n\n```\n\n----------------------------------------\n\nTITLE: Generating C++/C# Code for CvTermCriteria Properties (Marshal Type 'struct')\nDESCRIPTION: Handles properties where the marshalling type (`MARSHAL_TYPE`) is 'struct' and the C++ type (`PROPERTY_TYPE`) is specifically 'CvTermCriteria'. It generates C++ header and source code for getter (`cve...Get...`) and setter (`cve...Set...`) functions, handling dummy implementations if `IS_DUMMY` is true. The actual C++ implementation uses `memcpy` to copy the struct data. Corresponding C# P/Invoke declarations and a C# property with get/set accessors are also generated.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\n    ELSEIF(\"${MARSHAL_TYPE}\" STREQUAL \"struct\")\n      IF(\"${PROPERTY_TYPE}\" STREQUAL \"CvTermCriteria\") #special handling for functions that returns CvTermCriteria\n\t    IF(IS_DUMMY)\n\t  \tSET(C_HEADER_SOURCE \"${C_HEADER_SOURCE}\nCVAPI(void) cve${CLASS_NAME}Get${CS_FUNCTION_NAME}(void* obj, ${PROPERTY_TYPE}* value);\nCVAPI(void) cve${CLASS_NAME}Set${CS_FUNCTION_NAME}(void* obj, ${PROPERTY_TYPE}* value);     \n     \")\n\t    SET(C_SOURCE \"${C_SOURCE}\nvoid cve${CLASS_NAME}Get${CS_FUNCTION_NAME}(void* obj, ${PROPERTY_TYPE}* value) { ${RAISE_FUNCTION_NOT_SUPPORT_CPP} }\nvoid cve${CLASS_NAME}Set${CS_FUNCTION_NAME}(void* obj, ${PROPERTY_TYPE}* value) { ${RAISE_FUNCTION_NOT_SUPPORT_CPP} }     \n     \")\n\t    ELSE()\n\t    SET(C_HEADER_SOURCE \"${C_HEADER_SOURCE}\nCVAPI(void) cve${CLASS_NAME}Get${CS_FUNCTION_NAME}(${CLASS_NAME_FULL}* obj, ${PROPERTY_TYPE}* value);\nCVAPI(void) cve${CLASS_NAME}Set${CS_FUNCTION_NAME}(${CLASS_NAME_FULL}* obj, ${PROPERTY_TYPE}* value);     \n     \")\n        SET(C_SOURCE \"${C_SOURCE}\nvoid cve${CLASS_NAME}Get${CS_FUNCTION_NAME}(${CLASS_NAME_FULL}* obj, ${PROPERTY_TYPE}* value) { ${PROPERTY_TYPE} p = cvTermCriteria(obj->get${PROPERTY_NAME}()); memcpy(value, &p, sizeof(${PROPERTY_TYPE})); }\nvoid cve${CLASS_NAME}Set${CS_FUNCTION_NAME}(${CLASS_NAME_FULL}* obj, ${PROPERTY_TYPE}* value) { obj->set${PROPERTY_NAME}( *value ); }     \n     \")\n\t    ENDIF()\n\t\n      SET(CS_SOURCE \"${CS_SOURCE}\n     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]\n     internal static extern void cve${CLASS_NAME}Get${CS_FUNCTION_NAME}(IntPtr obj, ref ${CS_PROPERTY_TYPE} val);\n     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]\n     internal static extern void cve${CLASS_NAME}Set${CS_FUNCTION_NAME}(IntPtr obj, ref ${CS_PROPERTY_TYPE} val);\n     \")\n      \n      SET(CS_CLASS_SOURCE \"${CS_CLASS_SOURCE}\n     /// <summary>\n     /// ${CS_DOCUMENTATION}\n     /// </summary>\n     public ${CS_PROPERTY_TYPE} ${CS_FUNCTION_NAME}\n     {\n        get { ${CS_PROPERTY_TYPE} v = new ${CS_PROPERTY_TYPE}(); ${cs_invoke_class}.cve${CLASS_NAME}Get${CS_FUNCTION_NAME}(_ptr, ref v); return v; } \n        set { ${cs_invoke_class}.cve${CLASS_NAME}Set${CS_FUNCTION_NAME}(_ptr, ref value); }\n     }\n     \")\n```\n\n----------------------------------------\n\nTITLE: Including Project Modules - CMake\nDESCRIPTION: Includes additional project-specific CMake modules for target architecture and OpenCV version detection, enabling later logic to adapt based on the detected build environment and capabilities.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nINCLUDE (CheckTargetArch)\nINCLUDE (OpenCVVersion)\n```\n\n----------------------------------------\n\nTITLE: Defining DTrees Properties via Macro - C/C++\nDESCRIPTION: Defines the property set for Decision Trees (DTrees) via a code generation macro, specifying property names, types, accessors, and summaries to support wrapping and managed code exposure in Emgu CV. Dependent on OpenCV ML and the ml_c.h header.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_36\n\nLANGUAGE: C/C++\nCODE:\n```\n#include \\\"ml_c.h\\\"\n```\n\n----------------------------------------\n\nTITLE: Emscripten Build Configuration - CMake\nDESCRIPTION: Configures compiler and linker flags specifically for Emscripten builds to enable link-time optimization (LTO) and changes default tools for building static libraries. Adjusts file extensions, AR, and library creation commands for the Emscripten toolchain, allowing Emgu CV to be built for WebAssembly targets.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nIF(\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"Emscripten\")\n  SET(CMAKE_C_FLAGS_RELEASE \"-flto ${CMAKE_C_FLAGS_RELEASE}\")\n  SET(CMAKE_CXX_FLAGS_RELEASE \"-flto ${CMAKE_CXX_FLAGS_RELEASE}\")\n  SET(CMAKE_C_FLAGS_DEBUG \"-flto ${CMAKE_C_FLAGS_DEBUG}\")\n  SET(CMAKE_CXX_FLAGS_DEBUG \"-flto ${CMAKE_CXX_FLAGS_DEBUG}\")\n  SET(CMAKE_EXE_LINKER_FLAGS \"-flto ${CMAKE_EXE_LINKER_FLAGS}\")\n  SET(CMAKE_SHARED_LINKER_FLAGS \"-flto ${CMAKE_SHARED_LINKER_FLAGS}\")\n  #SET(CMAKE_STATIC_LINKER_FLAGS \"-flto ${CMAKE_STATIC_LINKER_FLAGS}\")\n\n  set(CMAKE_AR \"emcc\")\n  set(CMAKE_STATIC_LIBRARY_SUFFIX \".bc\")\n  set(CMAKE_C_CREATE_STATIC_LIBRARY \"<CMAKE_AR> -flto -r -o <TARGET> <LINK_FLAGS> <OBJECTS>\")\n  set(CMAKE_CXX_CREATE_STATIC_LIBRARY \"<CMAKE_AR> -flto -r -o <TARGET> <LINK_FLAGS> <OBJECTS>\")\n\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Generating C++/C# Code for CvSize Properties (Marshal Type 'struct')\nDESCRIPTION: Handles properties where the marshalling type (`MARSHAL_TYPE`) is 'struct' and the C++ type (`PROPERTY_TYPE`) is specifically 'CvSize'. Similar to 'CvTermCriteria', it generates C++ header and source code for getter (`cve...Get...`) and setter (`cve...Set...`) functions, considering the `IS_DUMMY` flag. The C++ implementation uses `memcpy`. It also generates the required C# P/Invoke declarations and a C# property with get/set accessors.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\n      ELSEIF(\"${PROPERTY_TYPE}\" STREQUAL \"CvSize\") #special handling for functions that returns CvSize\n\t    IF(IS_DUMMY)\n\t  \tSET(C_HEADER_SOURCE \"${C_HEADER_SOURCE}\nCVAPI(void) cve${CLASS_NAME}Get${CS_FUNCTION_NAME}(void* obj, ${PROPERTY_TYPE}* value);\nCVAPI(void) cve${CLASS_NAME}Set${CS_FUNCTION_NAME}(void* obj, ${PROPERTY_TYPE}* value);     \n     \")\n\t    SET(C_SOURCE \"${C_SOURCE}\nvoid cve${CLASS_NAME}Get${CS_FUNCTION_NAME}(void* obj, ${PROPERTY_TYPE}* value) { ${RAISE_FUNCTION_NOT_SUPPORT_CPP} }\nvoid cve${CLASS_NAME}Set${CS_FUNCTION_NAME}(void* obj, ${PROPERTY_TYPE}* value) { ${RAISE_FUNCTION_NOT_SUPPORT_CPP} }     \n     \")\n\t    ELSE()\n\t    SET(C_HEADER_SOURCE \"${C_HEADER_SOURCE}\nCVAPI(void) cve${CLASS_NAME}Get${CS_FUNCTION_NAME}(${CLASS_NAME_FULL}* obj, ${PROPERTY_TYPE}* value);\nCVAPI(void) cve${CLASS_NAME}Set${CS_FUNCTION_NAME}(${CLASS_NAME_FULL}* obj, ${PROPERTY_TYPE}* value);     \n     \")\n        SET(C_SOURCE \"${C_SOURCE}\nvoid cve${CLASS_NAME}Get${CS_FUNCTION_NAME}(${CLASS_NAME_FULL}* obj, ${PROPERTY_TYPE}* value) { ${PROPERTY_TYPE} p = cvSize(obj->get${PROPERTY_NAME}()); memcpy(value, &p, sizeof(${PROPERTY_TYPE})); }\nvoid cve${CLASS_NAME}Set${CS_FUNCTION_NAME}(${CLASS_NAME_FULL}* obj, ${PROPERTY_TYPE}* value) { obj->set${PROPERTY_NAME}( *value ); }     \n     \")\n\t    ENDIF()\n\t\n      SET(CS_SOURCE \"${CS_SOURCE}\n     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]\n     internal static extern void cve${CLASS_NAME}Get${CS_FUNCTION_NAME}(IntPtr obj, ref ${CS_PROPERTY_TYPE} val);\n     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]\n     internal static extern void cve${CLASS_NAME}Set${CS_FUNCTION_NAME}(IntPtr obj, ref ${CS_PROPERTY_TYPE} val);\n     \")\n      \n      SET(CS_CLASS_SOURCE \"${CS_CLASS_SOURCE}\n     /// <summary>\n     /// ${CS_DOCUMENTATION}\n     /// </summary>\n     public ${CS_PROPERTY_TYPE} ${CS_FUNCTION_NAME}\n     {\n        get { ${CS_PROPERTY_TYPE} v = new ${CS_PROPERTY_TYPE}(); ${cs_invoke_class}.cve${CLASS_NAME}Get${CS_FUNCTION_NAME}(_ptr, ref v); return v; } \n        set { ${cs_invoke_class}.cve${CLASS_NAME}Set${CS_FUNCTION_NAME}(_ptr, ref value); }\n     }\n     \")\n```\n\n----------------------------------------\n\nTITLE: Enabling Freetype Support Based on Platform - CMake\nDESCRIPTION: Sets a cache BOOL variable EMGU_CV_WITH_FREETYPE based on the current platform. Enables Freetype library support on Windows, Android, iOS, or NETFX_CORE targets and disables it otherwise. This flag is referenced later when managing Freetype and Harfbuzz dependencies.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nIF( WIN32 OR ANDROID OR IOS OR NETFX_CORE)\n  SET(EMGU_CV_WITH_FREETYPE ON CACHE BOOL \"BUILD FREETYPE\")\nELSE() \n  SET(EMGU_CV_WITH_FREETYPE OFF CACHE BOOL \"BUILD FREETYPE\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimum CMake Version - CMake\nDESCRIPTION: Ensures the build system uses at least CMake version 3.16 by calling CMAKE_MINIMUM_REQUIRED at the beginning of the script. This prevents the build from proceeding with unsupported or outdated CMake versions.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nCMAKE_MINIMUM_REQUIRED(VERSION 3.16)\n```\n\n----------------------------------------\n\nTITLE: Configuring CUDA Paths and Detecting Version in CMake\nDESCRIPTION: On Windows with CUDA enabled (`WIN32 AND WITH_CUDA`), this snippet sets up CUDA-related directories. It adds the appropriate CUDA library directory (x64 or Win32) to the link directories and the include directory to the include directories. It then attempts to parse `cuda.h` within the CUDA toolkit includes to extract the `CUDA_VERSION` define, determines the major and minor version numbers, and exports them to the parent scope.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_98\n\nLANGUAGE: cmake\nCODE:\n```\nIF(WIN32 AND WITH_CUDA)\n  IF(TARGET_ARCH_64)\n    LINK_DIRECTORIES(${CUDA_TOOLKIT_ROOT_DIR}/lib/x64)\n  ELSE()\n    LINK_DIRECTORIES(${CUDA_TOOLKIT_ROOT_DIR}/lib/Win32)\n  ENDIF()\n  INCLUDE_DIRECTORIES(${CUDA_TOOLKIT_ROOT_DIR}/include)\n  SET(CUDA_NPP_INCLUDES ${CUDA_TOOLKIT_ROOT_DIR}/include)\n   \n  if(EXISTS ${CUDA_NPP_INCLUDES}/cuda.h)\n    SET(CUDA_VERSION_FILE ${CUDA_NPP_INCLUDES}/cuda.h)\n    \n    file( STRINGS ${CUDA_VERSION_FILE} cuda_version REGEX \"#define CUDA_VERSION.*\")\n\tstring( REGEX REPLACE \"#define CUDA_VERSION[ \\\\t]+|//.*\" \"\" cuda_version ${cuda_version})\n\tstring( SUBSTRING ${cuda_version} 0 2 cuda_major)\n\tstring( SUBSTRING ${cuda_version} 2 2 cuda_minor)\n\tstring( REGEX REPLACE \"[0]+|//.*\" \"\" cuda_minor ${cuda_minor})\n\t#MESSAGE(STATUS \">>> cuda version major: ${cuda_major}\")\n\t#MESSAGE(STATUS \">>> cuda version minor: ${cuda_minor}\")\n\n\t#Also copy the values to the parent scope\n\tset(cuda_major \"${cuda_major}\" PARENT_SCOPE)\n\tset(cuda_minor \"${cuda_minor}\" PARENT_SCOPE)\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Example OCR Project in Emgu CV with CMake - CMake\nDESCRIPTION: This snippet conditionally creates and configures the 'Example.OCR' C# project for Emgu CV using CMake based on the .NET Framework platform and Tesseract/Win32 support. Dependencies include Emgu.CV.Platform.NetFramework, and the snippet calls MSBUILD_CSPROJ_IN_SOLUTION to integrate the project into a Visual Studio solution. Key parameters are platform checks and solution/project paths. Inputs are platform flags; outputs are a configured project with appropriate dependencies and folder structure.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Example/OCR/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nIF(TARGET Emgu.CV.Platform.NetFramework)\n  IF(EMGU_CV_WITH_TESSERACT AND WIN32)\n    PROJECT(Example.OCR)\n\n    MSBUILD_CSPROJ_IN_SOLUTION(${PROJECT_NAME} \"${CMAKE_CURRENT_SOURCE_DIR}/../../Solution/Windows.Desktop/Emgu.CV.Example.sln\" \"OCR\" \"\" ALL)\n    set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER \"Emgu.CV.Examples\")\n    ADD_DEPENDENCIES(${PROJECT_NAME} Emgu.CV.Platform.NetFramework)\n\n  ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring the tesseract_cutil Project in CMake\nDESCRIPTION: Sets up the 'tesseract_cutil' static library project. It collects source and header files, organizes them into source groups, includes directories for ccutil and viewer components, defines the static library target, applies common properties using the SET_TESSERACT_PROJECT_PROPERTY macro, and adds dependencies on tesseract_ccutil and tesseract_viewer for non-MSVC builds.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/tesseract/libtesseract/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\n#cutil\nPROJECT(tesseract_cutil)\nfile(GLOB tesseract_cutil_srcs \"${TESSERACT_SRC_DIR}/cutil/*.cpp\")\nfile(GLOB tesseract_cutil_hdrs \"${TESSERACT_SRC_DIR}/cutil/*.h\")\nsource_group(\"Src\" FILES ${tesseract_cutil_srcs})\nsource_group(\"Include\" FILES ${tesseract_cutil_hdrs})\n#IF(MSVC)\n#  add_definitions(-D__MSW32__ -W0)\n#  include_directories(\"${TESSERACT_SRC_DIR}/vs2010/include\")\n#ENDIF()\ninclude_directories(\"${TESSERACT_SRC_DIR}/ccutil\" \"${TESSERACT_SRC_DIR}/viewer\")\nadd_library(${PROJECT_NAME} STATIC ${tesseract_cutil_srcs} ${tesseract_cutil_hdrs})\n\nSET_TESSERACT_PROJECT_PROPERTY(${PROJECT_NAME})\n\nIF (NOT MSVC)\n  ADD_DEPENDENCIES(${PROJECT_NAME} tesseract_ccutil tesseract_viewer)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Dynamic Source File Aggregation for Optional Modules - CMake\nDESCRIPTION: This snippet iterates over optional OpenCV module dependencies, conditionally adding their include directories and source/header files if they exist and are enabled. It enables modular composition of the native wrapper library and provides granular control for projects building different subsets of OpenCV integration. The resulting file and directory lists help organize the add_library and source_group structure in a scalable fashion.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_70\n\nLANGUAGE: CMake\nCODE:\n```\nFOREACH(CVEXTERN_OPTIONAL_DEP ${OPENCV_MODULE_NAME_CANDIDATES})\n  #MESSAGE(\"Retriveing source folder for project :  opencv_${CVEXTERN_OPTIONAL_DEP}\")\n  #GET_TARGET_PROPERTY(OPENCV_MODULE_SOURCE_DIR opencv_${CVEXTERN_OPTIONAL_DEP} PROJECT_SOURCE_DIR)\n\n  IF (HAVE_opencv_${CVEXTERN_OPTIONAL_DEP})\n    IF ( (DEFINED opencv_${CVEXTERN_OPTIONAL_DEP}_SOURCE_DIR) AND (EXISTS ${opencv_${CVEXTERN_OPTIONAL_DEP}_SOURCE_DIR}/include) )\n      INCLUDE_DIRECTORIES(\"${opencv_${CVEXTERN_OPTIONAL_DEP}_SOURCE_DIR}/include\")\n      MESSAGE(STATUS \"Include directory for cvextern:  ${opencv_${CVEXTERN_OPTIONAL_DEP}_SOURCE_DIR}/include\")\n    ELSEIF (EXISTS \"${OPENCV_MODULES_DIR}/${CVEXTERN_OPTIONAL_DEP}/include\")\n      INCLUDE_DIRECTORIES(\"${OPENCV_MODULES_DIR}/${CVEXTERN_OPTIONAL_DEP}/include\")\n      MESSAGE(STATUS \"Include directory for cvextern:  ${OPENCV_MODULES_DIR}/${CVEXTERN_OPTIONAL_DEP}/include\")\n    ELSEIF (EXISTS \"${OPENCV_EXTRA_MODULES_PATH}/${CVEXTERN_OPTIONAL_DEP}/include\")\n      INCLUDE_DIRECTORIES(\"${OPENCV_EXTRA_MODULES_PATH}/${CVEXTERN_OPTIONAL_DEP}/include\")\n      MESSAGE(STATUS \"Include directory for cvextern:  ${OPENCV_EXTRA_MODULES_PATH}/${CVEXTERN_OPTIONAL_DEP}/include\")\n    ENDIF()\n  ENDIF()\n  \n  SET(CVEXTERN_OPTIONAL_DIR \"${PROJECT_SOURCE_DIR}/${CVEXTERN_OPTIONAL_DEP}\")\n  IF(EXISTS \"${CVEXTERN_OPTIONAL_DIR}\" AND IS_DIRECTORY \"${CVEXTERN_OPTIONAL_DIR}\")\n    \n    INCLUDE_DIRECTORIES(\"${CVEXTERN_OPTIONAL_DIR}\")\n    file(GLOB_RECURSE ${CVEXTERN_OPTIONAL_DEP}_extern_srcs \"${CVEXTERN_OPTIONAL_DEP}/*.cpp\")\n    #MESSAGE(\"srcs: ${${CVEXTERN_OPTIONAL_DEP}_extern_srcs}\")\n    file(GLOB_RECURSE ${CVEXTERN_OPTIONAL_DEP}_extern_hdrs \"${CVEXTERN_OPTIONAL_DEP}/*.h*\")\n    source_group(\"Src_${CVEXTERN_OPTIONAL_DEP}\" FILES ${${CVEXTERN_OPTIONAL_DEP}_extern_srcs})\n    source_group(\"Include_${CVEXTERN_OPTIONAL_DEP}\" FILES ${${CVEXTERN_OPTIONAL_DEP}_extern_hdrs})\n    LIST(APPEND extern_srcs ${${CVEXTERN_OPTIONAL_DEP}_extern_srcs})\n    LIST(APPEND extern_hdrs ${${CVEXTERN_OPTIONAL_DEP}_extern_hdrs})\n  ENDIF()\nENDFOREACH()\n```\n\n----------------------------------------\n\nTITLE: Installing Project Files with Platform-Based Filters in CMake Script\nDESCRIPTION: This CMake script fragment conditionally sets up installation rules for the Emgu.Util project. It uses the INSTALL command to copy specific source and resource files, filtering by extension (e.g., .shproj, .projitems, .cs, .resx) and excluding certain directories (e.g., .svn, obj, CMakeFiles, project build directories) for specific target platforms (Windows, Apple, Android). Prerequisites include having CMake and an environment where the relevant build definition variables are set. The expected output is a deployment of matched files to the destination directory for packaging, omitting excluded files and folders.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.Util/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n#IF(NETFX_CORE OR ANDROID)\nINSTALL(\n  DIRECTORY\n  ${CMAKE_CURRENT_SOURCE_DIR}\n  DESTINATION .\n    COMPONENT emgucv_source\n  FILES_MATCHING \n\tPATTERN \"*.shproj\"\n\tPATTERN \"*.projitems\"\n\tPATTERN \"*.cs\"\n    PATTERN \"*.resx\"\n    PATTERN \".svn\" EXCLUDE\n    PATTERN \"obj\" EXCLUDE\n    PATTERN \"CMakeFiles\" EXCLUDE\n    PATTERN \"${PROJECT_NAME}.dir\" EXCLUDE\n    )\n```\n\n----------------------------------------\n\nTITLE: Setting Windows Store App Build Flag in CMake\nDESCRIPTION: This snippet checks if the build is on Windows (`WIN32`) but not using MinGW (`NOT MINGW`). It sets a cached boolean variable `NETFX_CORE` to `OFF` by default, indicating whether to build for Windows Store Apps. Commented-out code shows potential preprocessor definitions that would be added if `NETFX_CORE` were enabled.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\nIF(WIN32 AND NOT MINGW)\n  SET(NETFX_CORE OFF CACHE BOOL \"Build Windows Store App\")\n  #  IF(NETFX_CORE)\n  #    add_definitions(-DWINAPI_FAMILY=WINAPI_FAMILY_APP -DWINVER=0x0602 -D_WIN32_WINNT=0x0602) \n  #\tadd_definitions(-D_UNICODE)\n  #  ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Adding TIFF Target Dependency in CMake\nDESCRIPTION: Conditionally adds a build dependency on the TIFF library target. If the `TIFF_LIBRARY` variable is set (meaning TIFF support is configured) and it corresponds to an existing CMake target (checked using `TARGET TIFF_LIBRARY`), this ensures the TIFF library target is built before `${the_target}`.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_109\n\nLANGUAGE: cmake\nCODE:\n```\nIF (TIFF_LIBRARY)\n  IF (TARGET TIFF_LIBRARY)\n    ADD_DEPENDENCIES(${the_target} ${TIFF_LIBRARY})\n  ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Restoring NuGet Packages using dotnet CLI\nDESCRIPTION: Uses the dotnet CLI to restore all NuGet package dependencies defined in the project file(s). This command downloads and installs the required packages.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Example/MAUI/MauiDemoApp/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet restore\n```\n\n----------------------------------------\n\nTITLE: Setting Executable Output Path for Non-Windows Builds in CMake\nDESCRIPTION: This snippet sets the `EXECUTABLE_OUTPUT_PATH` variable to the `libs` subdirectory within the CMake source directory (`CMAKE_SOURCE_DIR`) if the target platform is not Windows (`NOT WIN32`).\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\nIF(NOT WIN32)\n  SET(EXECUTABLE_OUTPUT_PATH ${CMAKE_SOURCE_DIR}/libs)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Restoring NuGet Packages for MAUI Project - Shell\nDESCRIPTION: Fetches and restores NuGet dependencies specified for the MAUI project, ensuring all external package requirements (e.g., Emgu CV/OpenCV) are locally available before building. Prerequisite: a correct project .csproj file containing required package references. Run this from the solution or project root directory. Output includes logs of downloaded or resolved packages.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Example/MAUI/BuildInfo/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n> dotnet restore\n```\n\n----------------------------------------\n\nTITLE: Defining Class Property Bindings Using CREATE_OCV_CLASS_PROPERTY - CMake\nDESCRIPTION: These macro invocations generate class property binding code for a wide variety of OpenCV types across stereo, structured light, ximgproc, surface matching, rgbd, and depthai modules. Each macro call maps a specific C++ class and its members to a managed C# type, along with type conversion, read/write semantics, and supplemental metadata and documentation. This approach modularizes code generation, maintains DRY principles, and allows for parameterization based on available modules and build configuration.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_68\n\nLANGUAGE: CMake\nCODE:\n```\nCREATE_OCV_CLASS_PROPERTY( \n    \\\"structured_light/graycodepattern_property\\\" \n    \\\"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV.Contrib/StructuredLight/GrayCodePattern.g.cs\\\" \n    \\\"cv::structured_light::GrayCodePattern\\\" \n    \\\"GrayCodePattern\\\" \n    \\\"NumberOfPatternImages;WhiteThreshold;BlackThreshold\\\" \n    \\\"int;int;int\\\" \n    \\\"propR;propW;propW\\\"\n    \\\"NumberOfPatternImages;WhiteThreshold;BlackThreshold\\\" \n    \\\"int;int;int\\\"\n    \\\"Get the number of pattern images needed for the graycode pattern;\n    White threshold is a number between 0-255 that represents the minimum brightness difference required for valid pixels, between the graycode pattern and its inverse images, used in getProjPixel method;\n    Black threshold is a number between 0-255 that represents the minimum brightness difference required for valid pixels, between the fully illuminated (white) and the not illuminated images (black), used in computeShadowMasks method\n    \\\"\n    \\\"Emgu.CV.StructuredLight\\\"\n    \\\"StructuredLightInvoke\\\"\n    \\\"GrayCodePattern\\\"\n\\t\\\"\\\"\n\\t\\\"#include \\\\\\\"structured_light_c.h\\\\\\\"\\\"\n\\t\\\"\\\"\n\\t\\\"\\\"\n\\t${HAVE_opencv_structured_light})\n```\n\nLANGUAGE: CMake\nCODE:\n```\nCREATE_OCV_CLASS_PROPERTY( \n    \\\"ximgproc/scan_segment_property\\\" \n    \\\"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV.Contrib/XImgproc/ScanSegment.g.cs\\\" \n    \\\"cv::ximgproc::ScanSegment\\\" \n    \\\"ScanSegment\\\" \n    \\\"NumberOfSuperpixels\\\" \n    \\\"int\\\" \n    \\\"propR\\\"\n    \\\"NumberOfSuperpixels\\\" \n    \\\"int\\\"\n    \\\"Returns the actual superpixel segmentation from the last image processed using iterate. Returns zero if no image has been processed.\\\"\n    \\\"Emgu.CV.XImgproc\\\"\n    \\\"XImgprocInvoke\\\"\n    \\\"ScanSegment\\\"\n\\t\\\"\\\"\n\\t\\\"#include \\\\\\\"ximgproc_c.h\\\\\\\"\\\"\n\\t\\\"\\\"\n\\t\\\"\\\"\n\\t${HAVE_opencv_structured_light})\n```\n\nLANGUAGE: CMake\nCODE:\n```\nCREATE_OCV_CLASS_PROPERTY( \n    \\\"surface_matching/pose3d_property\\\" \n    \\\"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV.Contrib/SurfaceMatching/Pose3D.g.cs\\\" \n    \\\"cv::ppf_match_3d::Pose3D\\\" \n    \\\"Pose3D\\\" \n    \\\"alpha;residual;angle;modelIndex;numVotes\\\" \n    \\\"double;double;double;int;int\\\" \n    \\\"element;element;element;element;element\\\"\n    \\\"Alpha;Residual;Angle;ModelIndex;NumVotes\\\" \n    \\\"double;double;double;int;int\\\"\n    \\\"Alpha value;Residual value;Angle value;Model Index;Number of Votes\\\"\n    \\\"Emgu.CV.PpfMatch3d\\\"\n    \\\"PpfMatch3dInvoke\\\"\n    \\\"Pose3D\\\"\n\\t\\\"\\\"\n\\t\\\"#include \\\\\\\"surface_matching_c.h\\\\\\\"\\\"\n\\t\\\"\\\"\n\\t\\\"\\\"\n\\t${HAVE_opencv_surface_matching})\n```\n\nLANGUAGE: CMake\nCODE:\n```\nCREATE_VECTOR_CS(\n    \\\"Pose3D\\\" \n    \\\"std::vector< cv::ppf_match_3d::Pose3D >\\\" \n    \\\"Pose3D\\\" \\\"object_not_array\\\" \n    \\\"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV.Contrib/SurfaceMatching\\\" \n    \\\"Emgu.CV.PpfMatch3d\\\"\n    \\\"\\\" \n    \\\"#include \\\\\\\"surface_matching_c.h\\\\\\\"\\\" \n    \\\"\\\" \n    \\\"defined(HAVE_OPENCV_SURFACE_MATCHING)\\\")\n```\n\nLANGUAGE: CMake\nCODE:\n```\nCREATE_OCV_CLASS_PROPERTY( \n    \\\"rgbd/match_property\\\" \n    \\\"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV.Contrib/Rgbd/Match.g.cs\\\" \n    \\\"cv::linemod::Match\\\" \n    \\\"Match\\\" \n    \\\"x;y;similarity;template_id;class_id\\\" \n    \\\"int;int;float;int;cv::String\\\" \n    \\\"element;element;element;element;element\\\"\n    \\\"X;Y;Similarity;TemplateId;class_id\\\" \n    \\\"int;int;float;int;String\\\"\n    \\\"X position;\\n    Y position;\\n    Similarity;\\n    TemplateId;\\n    Class Id\\\"\n    \\\"Emgu.CV.Linemod\\\"\n    \\\"LinemodInvoke\\\"\n    \\\"Match\\\"\n\\t\\\"\\\"\n\\t\\\"#include \\\\\\\"rgbd_c.h\\\\\\\"\\\"\n\\t\\\"\\\"\n\\t\\\"\\\"\n\\t${HAVE_opencv_rgbd})\n```\n\nLANGUAGE: CMake\nCODE:\n```\nCREATE_OCV_CLASS_PROPERTY( \n    \\\"rgbd/detector_property\\\" \n    \\\"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV.Contrib/Rgbd/Detector.g.cs\\\" \n    \\\"cv::linemod::Detector\\\" \n    \\\"Detector\\\" \n    \\\"pyramidLevels;numTemplates;numClasses\\\" \n    \\\"int;int;int\\\" \n    \\\"val;val;val\\\"\n    \\\"PyramidLevels;NumTemplates;NumClasses\\\" \n    \\\"int;int;int\\\"\n    \\\"Get number of pyramid levels used by this detector.;\\n    Get number of templates.;\\n    Get number of classes.\\\"\n    \\\"Emgu.CV.Linemod\\\"\n    \\\"LinemodInvoke\\\"\n    \\\"Detector\\\"\n\\t\\\"\\\"\n\\t\\\"#include \\\\\\\"rgbd_c.h\\\\\\\"\\\"\n\\t\\\"\\\"\n\\t\\\"\\\"\n\\t${HAVE_opencv_rgbd})\n```\n\nLANGUAGE: CMake\nCODE:\n```\nCREATE_OCV_CLASS_PROPERTY( \n    \\\"rgbd/modality_property\\\" \n    \\\"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV.Contrib/Rgbd/Modality.g.cs\\\" \n    \\\"cv::linemod::Modality\\\" \n    \\\"Modality\\\" \n    \\\"name\\\" \n    \\\"cv::String\\\" \n    \\\"val\\\"\n    \\\"Name\\\" \n    \\\"String\\\"\n    \\\"The name of modality\\\"\n    \\\"Emgu.CV.Linemod\\\"\n    \\\"LinemodInvoke\\\"\n    \\\"Modality\\\"\n\\t\\\"\\\"\n\\t\\\"#include \\\\\\\"rgbd_c.h\\\\\\\"\\\"\n\\t\\\"\\\"\n\\t\\\"\\\"\n\\t${HAVE_opencv_rgbd})\n```\n\nLANGUAGE: CMake\nCODE:\n```\nCREATE_OCV_CLASS_PROPERTY( \n    \\\"depthai/color_camera_property\\\" \n    \\\"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV.Contrib/DepthAI/ColorCamera.g.cs\\\" \n    \\\"dai::node::ColorCamera\\\" \n    \\\"ColorCamera\\\" \n    \\\"Interleaved\\\" \n    \\\"bool\\\"\n    \\\"prop\\\"\n    \\\"Interleaved\\\" \n    \\\"bool\\\"\n    \\\"True if the image pixels are interleaved\\\"\n    \\\"Emgu.CV.Dai\\\"\n    \\\"DaiInvoke\\\"\n    \\\"ColorCamera\\\"\n\\t\\\"\\\"\n    \\\"#include \\\\\\\"depthai_c.h\\\\\\\"\\\"\n\\t\\\"\\\"\n\\t\\\"\\\" \n\\t${EMGU_CV_WITH_DEPTHAI})\n```\n\nLANGUAGE: CMake\nCODE:\n```\nCREATE_OCV_CLASS_PROPERTY( \n    \\\"depthai/mono_camera_property\\\" \n    \\\"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV.Contrib/DepthAI/MonoCamera.g.cs\\\" \n    \\\"dai::node::MonoCamera\\\" \n    \\\"MonoCamera\\\" \n    \\\"Fps\\\" \n    \\\"float\\\"\n    \\\"prop\\\"\n    \\\"Fps\\\" \n    \\\"float\\\"\n    \\\"The rate at which camera should produce frames\\\"\n    \\\"Emgu.CV.Dai\\\"\n    \\\"DaiInvoke\\\"\n    \\\"MonoCamera\\\"\n\\t\\\"\\\"\n    \\\"#include \\\\\\\"depthai_c.h\\\\\\\"\\\"\n\\t\\\"\\\"\n\\t\\\"\\\" \n\\t${EMGU_CV_WITH_DEPTHAI})\n```\n\nLANGUAGE: CMake\nCODE:\n```\nCREATE_OCV_CLASS_PROPERTY( \n    \\\"depthai/img_frame_property\\\" \n    \\\"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV.Contrib/DepthAI/ImgFrame.g.cs\\\" \n    \\\"dai::ImgFrame\\\" \n    \\\"ImgFrame\\\" \n    \\\"Width;Height;InstanceNum;Category;SequenceNum\\\" \n    \\\"uint32_t;uint32_t;uint32_t;uint32_t;int64_t\\\"\n    \\\"prop;prop;prop;prop;prop\\\"\n    \\\"Width;Height;InstanceNum;Category;SequenceNum\\\" \n    \\\"UInt32;UInt32;UInt32;UInt32;Int64\\\"\n    \\\"Image width;\\n    Image height;\\n    Instance number;\\n    Image category;\\n    Image sequence number\\\"\n    \\\"Emgu.CV.Dai\\\"\n    \\\"DaiInvoke\\\"\n    \\\"ImgFrame\\\"\n\\t\\\"\\\"\n    \\\"#include \\\\\\\"depthai_c.h\\\\\\\"\\\"\n\\t\\\"\\\"\n\\t\\\"\\\" \n\\t${EMGU_CV_WITH_DEPTHAI})\n```\n\n----------------------------------------\n\nTITLE: Setting Tesseract Source Directories in CMake\nDESCRIPTION: This snippet sets CMake variables (TESSERACT_OCR_ROOT_DIR, LEPT_ROOT_DIR) pointing to the source directories of Tesseract OCR and its dependency Leptonica within the project's source tree.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_84\n\nLANGUAGE: cmake\nCODE:\n```\nSET(TESSERACT_OCR_ROOT_DIR \"${PROJECT_SOURCE_DIR}/tesseract/libtesseract/tesseract-ocr.git\")\nSET(LEPT_ROOT_DIR \"${PROJECT_SOURCE_DIR}/tesseract/libtesseract/leptonica/leptonica.git\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Intel ICL Redistributables in CMake (Windows)\nDESCRIPTION: This snippet configures dependencies for the Intel C++ Compiler (ICC) on Windows (WIN32 and CV_ICC). It determines the path to the ICC redistributable directory based on the target architecture (32/64 bit) using the ICPP_COMPILER19 environment variable, replaces backslashes with forward slashes, and appends the necessary runtime DLLs (libiomp5md.dll, libmmd.dll, svml_dispmd.dll) to the CVEXTERN_DEPENDENCY_DLLS list.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_81\n\nLANGUAGE: cmake\nCODE:\n```\nIF(WIN32 AND CV_ICC)\n  IF(TARGET_ARCH_64)\n    SET(INTEL_ICC_REDIST_PATH \"$ENV{ICPP_COMPILER19}redist/intel64_win/compiler/\")\n  ELSE()\n    SET(INTEL_ICC_REDIST_PATH \"$ENV{ICPP_COMPILER19}redist/ia32_win/compiler/\")\n  ENDIF()\n  #MESSAGE(STATUS \"OOOOOOOOOOOOOOOOOOOOOOOOOOOO  INTEL_ICC_REDIST_PATH: ${INTEL_ICC_REDIST_PATH}\")\n  STRING(REGEX REPLACE \"\\\\\\\\\" \"/\" INTEL_ICC_REDIST_PATH ${INTEL_ICC_REDIST_PATH})\n  #MESSAGE(STATUS \"OOOOOOOOOOOOOOOOOOOOOOOOOOOO  INTEL_ICC_REDIST_PATH: ${INTEL_ICC_REDIST_PATH}\")\n  #STRING(REGEX REPLACE \"\\\\\" \"/\" INTEL_ICC_REDIST_PATH ${INTEL_ICC_REDIST_PATH})\n  #MESSAGE(STATUS \"OOOOOOOOOOOOOOOOOOOOOOOOOOOO  INTEL_ICC_REDIST_PATH: ${INTEL_ICC_REDIST_PATH}\")\n  #LIST(APPEND CVEXTERN_DEPENDENCY_DLL_NAMES libomp5md libmmd svml_dispmd)\n  LIST(APPEND CVEXTERN_DEPENDENCY_DLLS ${INTEL_ICC_REDIST_PATH}libiomp5md.dll ${INTEL_ICC_REDIST_PATH}libmmd.dll ${INTEL_ICC_REDIST_PATH}svml_dispmd.dll)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring the tesseract_viewer Project in CMake\nDESCRIPTION: Sets up the 'tesseract_viewer' static library project. It gathers source and header files, creates source groups, adds the HAVE_LIBLEPT definition, includes MSVC/Windows Runtime specific handling (disabling graphics if NETFX_CORE is defined), adds the Leptonica include directory, defines the static library target, applies common properties using the SET_TESSERACT_PROJECT_PROPERTY macro, and adds a dependency on libleptonica for non-MSVC builds.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/tesseract/libtesseract/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\n#viewer\nPROJECT(tesseract_viewer)\nfile(GLOB tesseract_viewer_srcs \"${TESSERACT_SRC_DIR}/viewer/*.cpp\")\n#file(GLOB tesseract_viewer_srcs_excludes \"${TESSERACT_SRC_DIR}/viewer/svpaint.cpp\")\n#LIST(REMOVE_ITEM tesseract_viewer_srcs ${tesseract_viewer_srcs_excludes})\nfile(GLOB tesseract_viewer_hdrs \"${TESSERACT_SRC_DIR}/viewer/*.h\")\nsource_group(\"Src\" FILES ${tesseract_viewer_srcs})\nsource_group(\"Include\" FILES ${tesseract_viewer_hdrs})\nadd_definitions(-DHAVE_LIBLEPT)\n\nIF(MSVC)\n  #add_definitions(-D__MSW32__ -W0)\n  #include_directories(\"${TESSERACT_SRC_DIR}/vs2010/include\")\n  IF(NETFX_CORE)\n    add_definitions(-DGRAPHICS_DISABLED)\n  ENDIF()\nENDIF()\ninclude_directories(\"${LEPTONICA_DIR}\")\nadd_library(${PROJECT_NAME} STATIC ${tesseract_viewer_srcs} ${tesseract_viewer_hdrs})\n\nSET_TESSERACT_PROJECT_PROPERTY(${PROJECT_NAME})\n\nIF (NOT MSVC)\n  ADD_DEPENDENCIES(${PROJECT_NAME} libleptonica)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Setting macOS Build Flag in CMake\nDESCRIPTION: This final conditional block checks if the target platform is Apple (`APPLE`) but *not* iOS (`IOS`) and *not* Mac Catalyst (`MAC_CATALYST`, implicitly handled by the preceding `IF/ELSEIF`). If these conditions are met, it indicates a standard macOS build, and the `IS_MAC_BUILD` flag is set to `ON`.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_29\n\nLANGUAGE: cmake\nCODE:\n```\nELSEIF(APPLE)\n  SET(IS_MAC_BUILD ON)\n```\n\n----------------------------------------\n\nTITLE: Adding Core Emgu CV Subdirectories in CMake\nDESCRIPTION: This CMake code adds two essential subdirectories to the build process: `Emgu.CV.Extern` and `Emgu.CV.NativeImage`. These likely contain the C++ extern wrapper code and native image handling components, respectively.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_45\n\nLANGUAGE: cmake\nCODE:\n```\nADD_SUBDIRECTORY(Emgu.CV.Extern)\nADD_SUBDIRECTORY(Emgu.CV.NativeImage)\n```\n\n----------------------------------------\n\nTITLE: Defining DataOutputQueue Class Property - CMake\nDESCRIPTION: This macro invocation configures managed property bindings for the DataOutputQueue class within DepthAI, exposing Blocking and MaxSize properties. It details property type mappings, display names, and descriptions for use in .NET bindings. Requires the DepthAI C API and proper binding of Emgu.CV.Dai and DaiInvoke namespaces. MaxSize is a uint32 numerical parameter that dictates maximum queued messages.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_73\n\nLANGUAGE: CMake\nCODE:\n```\nCREATE_OCV_CLASS_PROPERTY( \n    \"depthai/data_output_queue_property\" \n    \"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV.Contrib/DepthAI/DataOutputQueue.g.cs\"\n    \"dai::DataOutputQueue\" \n    \"DataOutputQueue\" \n    \"Blocking;MaxSize\" \n    \"bool;uint32_t\"\n    \"prop;prop\"\n    \"Blocking;MaxSize\" \n    \"bool;UInt32\"\n    \"Specifies if block or overwrite the oldest message in the queue;\n    Specifies maximum number of messages in the queue\"\n    \"Emgu.CV.Dai\"\n    \"DaiInvoke\"\n    \"DataOutputQueue\"\n\t\"\"\n    \"#include \\\"depthai_c.h\\\"\"\n\t\"\"\n\t\"\" \n\t${EMGU_CV_WITH_DEPTHAI})\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding OpenCV World Module Candidate in CMake\nDESCRIPTION: This CMake snippet checks if the `BUILD_opencv_world` option is enabled. If it is, the 'world' module name is appended to the `OPENCV_MODULE_NAME_CANDIDATES` list. The 'world' module typically represents a single library containing all other OpenCV modules.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_37\n\nLANGUAGE: cmake\nCODE:\n```\nIF(BUILD_opencv_world)\n  LIST (APPEND OPENCV_MODULE_NAME_CANDIDATES world)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Conditionally Building Example.DynamicImage.Asp.Net with CMake\nDESCRIPTION: This CMake code block checks if the .NET SDK is detected (`DOTNET_FOUND` variable is TRUE). If it is, it defines a CMake project named `Example.DynamicImage.Asp.Net`. It then uses the `BUILD_DOTNET_PROJ` function (presumably a custom function defined elsewhere in the build system) to configure the build for the corresponding C# project file (`DynamicImage.Asp.Net.csproj`) located in the current source directory. The built target is assigned to the \"Emgu.CV.Examples\" folder within the IDE's solution explorer using `set_target_properties`. Finally, it adds a build dependency on the `Emgu.CV` target if that target exists, ensuring `Emgu.CV` is built before this example project.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Example/DynamicImage.Asp.Net/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# --------------------------------------------------------\n#  Copyright (C) 2004-2025 by EMGU Corporation. All rights reserved.\n# --------------------------------------------------------\n\nIF (DOTNET_FOUND)\n  PROJECT(Example.DynamicImage.Asp.Net)\n  BUILD_DOTNET_PROJ(${PROJECT_NAME} \"${CMAKE_CURRENT_SOURCE_DIR}/DynamicImage.Asp.Net.csproj\" \"\" ALL)\n  set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER \"Emgu.CV.Examples\")\n  IF (TARGET Emgu.CV)\n\tADD_DEPENDENCIES(${PROJECT_NAME} Emgu.CV)\n  ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Building and Installing Emgu.CV.runtime.maui using CMake\nDESCRIPTION: This CMake script conditionally builds and installs the Emgu.CV.runtime.maui project. It first checks if Android, MAUI iOS, and MAUI Mac support are enabled (`HAVE_ANDROID`, `HAVE_MAUI_IOS`, `HAVE_MAUI_MAC`). If true, it installs source files (`.cs`, `.csproj`, etc.) to the `Emgu.CV.Runtime/Maui` destination, defines a CMake project named `Emgu.CV.runtime.maui`, builds the corresponding C# project using `BUILD_DOTNET_PROJ`, sets up dependencies on `cvextern`, `Emgu.CV`, and platform-specific MAUI runtime targets, and finally installs the compiled binaries (`.dll`, `.pdb`, `.xml`) to the packaging directory.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Runtime/Maui/UI/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# --------------------------------------------------------\n#  Copyright (C) 2004-2025 by EMGU Corporation. All rights reserved.\n# --------------------------------------------------------\n\nIF(HAVE_ANDROID AND HAVE_MAUI_IOS AND HAVE_MAUI_MAC)\n\n  INSTALL(\n    DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n    DESTINATION Emgu.CV.Runtime/Maui\n    COMPONENT emgucv_source\n    FILES_MATCHING \n\tPATTERN \"*.cs\"\n    PATTERN \"*.csproj\"\n\tPATTERN \"Directory.Build.props\"\n\tPATTERN \"README.md\"\n\t#PATTERN \"*.png\"\n    PATTERN \".svn\" EXCLUDE\n    PATTERN \"obj\" EXCLUDE\n\tPATTERN \"bin\" EXCLUDE\n    PATTERN \"CMakeFiles\" EXCLUDE\n    PATTERN \"${PROJECT_NAME}.dir\" EXCLUDE\n    )\n\t\n  PROJECT(Emgu.CV.runtime.maui)\n  SET(EXTRA_BUILD_FLAGS \"/p:Platform=\\\"AnyCPU\\\"\")\n  \n  BUILD_DOTNET_PROJ(${PROJECT_NAME} \"${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.runtime.maui.csproj\" \"${EXTRA_BUILD_FLAGS}\" ALL)\n  \n  if(ENABLE_SOLUTION_FOLDERS)\n      set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER \"emgu\")\n  endif() \n  \n  ADD_DEPENDENCIES(${PROJECT_NAME} cvextern Emgu.CV)\n  \n  IF (TARGET Emgu.CV.runtime.maui.ios)\n    ADD_DEPENDENCIES(${PROJECT_NAME} Emgu.CV.runtime.maui.ios)\n  ENDIF()\n  \n  IF (TARGET Emgu.CV.runtime.maui.macos)\n    ADD_DEPENDENCIES(${PROJECT_NAME} Emgu.CV.runtime.maui.macos)\n  ENDIF()\n  \n  IF (TARGET Emgu.CV.runtime.maui.android)\n    ADD_DEPENDENCIES(${PROJECT_NAME} Emgu.CV.runtime.maui.android)\n  ENDIF()\n  \n  IF (TARGET Emgu.CV.runtime.windows.nuget)\n    ADD_DEPENDENCIES(${PROJECT_NAME} Emgu.CV.runtime.windows.nuget)\n  ENDIF()\n  \n  INSTALL(\n    DIRECTORY \n    ${EMGU_CV_SOURCE_DIR}/libs/Build/Emgu.CV.runtime.maui\n    DESTINATION ${CPACK_PACKAGE_CLI_FOLDER}/Build\n    COMPONENT emgucv_binary\n\tFILES_MATCHING \n      PATTERN \"*.dll\"\n      PATTERN \"*.pdb\"\n      PATTERN \"*.xml\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring VTK Dependencies in CMake (Windows)\nDESCRIPTION: This snippet configures dependencies for the Visualization Toolkit (VTK) on Windows (WIN32) when VTK support is enabled (WITH_VTK). It determines the path to the VTK binary directory (containing DLLs) based on the VTK_DIR variable, finds all DLL files starting with 'vtk' within that directory using FILE(GLOB), and appends the found DLL paths to the CVEXTERN_DEPENDENCY_DLLS list.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_87\n\nLANGUAGE: cmake\nCODE:\n```\nIF (WITH_VTK)\n  IF(WIN32)\n    CMAKE_PATH(SET VTK_DLL_DIRS NORMALIZE \"${VTK_DIR}/bin/Release\")\n    FILE(GLOB VTK_DLL_NAMES \"${VTK_DLL_DIRS}/vtk*.dll\")\n    MESSAGE(STATUS \"VTK_DLL_NAMES: ${VTK_DLL_NAMES}\")\n    LIST(APPEND CVEXTERN_DEPENDENCY_DLLS ${VTK_DLL_NAMES})\n  ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Checking for DOTNET SDK on Supported Platforms - CMake\nDESCRIPTION: Checks if the DOTNET SDK is available and emits a fatal error with instructions when not found, requiring the user to install it depending on the detected Linux distribution. Ensures the managed components of Emgu CV can be built only when .NET Core SDK is present.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nIF (NOT (DOTNET_FOUND))\n  IF (IS_UBUNTU)\n    MESSAGE(FATAL_ERROR \"dotnet sdk is required to build Emgu CV on Ubuntu, please follow the instructions to install dotnet sdk on Ubuntu: https://dotnet.microsoft.com/download/linux-package-manager/ubuntu18-04/sdk-current\")  \n  ELSEIF(IS_DEBIAN OR IS_RHEL)\n    MESSAGE(FATAL_ERROR \"dotnet sdk is required to build Emgu CV\")  \n  ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Defining XLinkOut Class Property - CMake\nDESCRIPTION: This snippet uses the CREATE_OCV_CLASS_PROPERTY macro to generate managed property bindings for the XLinkOut node in DepthAI. It specifies property names, types, descriptions, and necessary code generation and include files. Requires the DepthAI C API and expects Emgu.CV.Dai and DaiInvoke namespaces. It exposes StreamName, FpsLimit, and MetadataOnly to .NET consumers, with descriptive metadata for each property.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_72\n\nLANGUAGE: CMake\nCODE:\n```\nCREATE_OCV_CLASS_PROPERTY( \n    \"depthai/xlinkout_property\" \n    \"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV.Contrib/DepthAI/XLinkOut.g.cs\"\n    \"dai::node::XLinkOut\" \n    \"XLinkOut\" \n    \"StreamName;FpsLimit;MetadataOnly\" \n    \"cv::String;float;bool\"\n    \"prop;prop;prop\"\n    \"StreamName;FpsLimit;MetadataOnly\" \n    \"String;float;bool\"\n    \"The Stream Name;\n    A message sending limit. It's approximated from specified rate;\n    Specify whether to transfer only messages attributes and not buffer data\"\n    \"Emgu.CV.Dai\"\n    \"DaiInvoke\"\n    \"XLinkOut\"\n\t\"\"\n    \"#include \\\"depthai_c.h\\\"\"\n\t\"\"\n\t\"\" \n\t${EMGU_CV_WITH_DEPTHAI})\n```\n\n----------------------------------------\n\nTITLE: Filtering Available OpenCV Modules in CMake\nDESCRIPTION: This CMake code iterates through the `OPENCV_MODULE_NAME_CANDIDATES` list. For each candidate module name, it checks if a target named `opencv_<module_name>` exists (meaning the module was successfully built or found). If the target exists, the module name is appended to the `OPENCV_MODULE_NAMES` list.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_38\n\nLANGUAGE: cmake\nCODE:\n```\nFOREACH(OPENCV_MODULE_NAME ${OPENCV_MODULE_NAME_CANDIDATES})\n  IF(TARGET opencv_${OPENCV_MODULE_NAME})\n    LIST(APPEND OPENCV_MODULE_NAMES ${OPENCV_MODULE_NAME})  \n  ENDIF() \nENDFOREACH()\n```\n\n----------------------------------------\n\nTITLE: Configuring Example Webservice Host Project using CMake - CMake Script\nDESCRIPTION: This CMake snippet conditionally adds the Example.Webservice_Host project to the EMGU Windows Desktop solution when building for the Emgu.CV.Platform.NetFramework target. It uses the PROJECT and MSBUILD_CSPROJ_IN_SOLUTION macros to include the corresponding C# project file (*.csproj) from the specified solution path, sets the folder property for organizational purposes in the IDE, and adds the platform as a dependency to ensure build order. Requires CMake and EMGU-specific macros/functions to be predefined. Parameters such as ${PROJECT_NAME} and ${CMAKE_CURRENT_SOURCE_DIR} denote CMake variables. The logic only executes if the target platform matches, and it depends on correct path resolution to the solution and project files.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Example/Webservice_Host/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# --------------------------------------------------------\\n#  Copyright (C) 2004-2025 by EMGU Corporation. All rights reserved.\\n# --------------------------------------------------------\\n\\nIF(TARGET Emgu.CV.Platform.NetFramework)\\n  PROJECT(Example.Webservice_Host)\\n  MSBUILD_CSPROJ_IN_SOLUTION(${PROJECT_NAME} \"${CMAKE_CURRENT_SOURCE_DIR}/../../Solution/Windows.Desktop/Emgu.CV.Example.sln\" \"Webservice_Host\" \"\" ALL)\\n  set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER \"Emgu.CV.Examples\")\\n  ADD_DEPENDENCIES(${PROJECT_NAME} Emgu.CV.Platform.NetFramework)\\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Building and Running Android MAUI App - Shell\nDESCRIPTION: Builds and runs the MAUI application on Android targets (simulator or connected device) with net9.0-android. Requires Android build tools, an emulator or device connected, and setup of the .NET Android workload. Outputs the launched app on the selected Android environment.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Example/MAUI/BuildInfo/README.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n> dotnet build -t:Run -f net9.0-android\n```\n\n----------------------------------------\n\nTITLE: Configuring TBB Dependency in CMake\nDESCRIPTION: This snippet checks if TBB (Intel Threading Building Blocks) is enabled (WITH_TBB) and if the necessary environment variables (TBB_ENV_INCLUDE, TBB_ENV_LIB) are set. If so, it adds the HAVE_TBB definition, includes TBB headers, links against TBB libraries, and determines the path to the TBB DLL based on the architecture (32/64 bit) and MSVC compiler version (vc10-vc14) on Windows, adding it to the CVEXTERN_DEPENDENCY_DLLS list.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_79\n\nLANGUAGE: cmake\nCODE:\n```\nif (WITH_TBB AND TBB_ENV_INCLUDE AND TBB_ENV_LIB)\n  MESSAGE(STATUS \"CVEXTERN: using TBB\")\n  add_definitions(-DHAVE_TBB)\n  include_directories(${TBB_ENV_INCLUDE})\n  get_filename_component(TBB_ENV_LIB_DIRECTORY \"${TBB_ENV_LIB}\" DIRECTORY)\n  link_directories(${TBB_ENV_LIB_DIRECTORY})\n  \n  IF(WIN32)\n    SET(TBB_BINARY_FILE_DIR \"${TBB_ENV_INCLUDE}/../../redist\")\n    IF(TARGET_ARCH_64)\n      SET(TBB_BINARY_FILE_DIR \"${TBB_BINARY_FILE_DIR}/intel64_win/tbb\")\n    ELSE()\n      SET(TBB_BINARY_FILE_DIR \"${TBB_BINARY_FILE_DIR}/ia32_win/tbb\")\n    ENDIF()\n    \n    if(MSVC10)\n      SET(TBB_BINARY_FILE_DIR \"${TBB_BINARY_FILE_DIR}/vc10\")\n    elseif(MSVC11)\n      SET(TBB_BINARY_FILE_DIR \"${TBB_BINARY_FILE_DIR}/vc11\")\n    elseif(MSVC12)\n      SET(TBB_BINARY_FILE_DIR \"${TBB_BINARY_FILE_DIR}/vc12\")\n    elseif(MSVC14)\n      SET(TBB_BINARY_FILE_DIR \"${TBB_BINARY_FILE_DIR}/vc14\")\n    endif()\n    \n    #LIST(APPEND CVEXTERN_DEPENDENCY_DLL_NAMES tbb)\n    LIST(APPEND CVEXTERN_DEPENDENCY_DLLS \"${TBB_BINARY_FILE_DIR}/tbb.dll\")\n\n  ENDIF()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Tesseract ccmain Library Build (Partial) in CMake\nDESCRIPTION: This snippet begins the configuration for the 'tesseract_ccmain' static library project. It finds source and header files in the 'ccmain' directory using `file(GLOB ...)` , organizes them into source groups using `source_group`, and adds standard definitions (`-DUSE_STD_NAMESPACE`, `-DHAVE_LIBLEPT`). The configuration for adding the library target, setting properties, and dependencies is expected to follow.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/tesseract/libtesseract/CMakeLists.txt#_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\n#ccmain\nPROJECT(tesseract_ccmain)\nfile(GLOB tesseract_ccmain_srcs \"${TESSERACT_SRC_DIR}/ccmain/*.cpp\")\nfile(GLOB tesseract_ccmain_hdrs \"${TESSERACT_SRC_DIR}/ccmain/*.h\")\nsource_group(\"Src\" FILES ${tesseract_ccmain_srcs})\nsource_group(\"Include\" FILES ${tesseract_ccmain_hdrs})\nadd_definitions(-DUSE_STD_NAMESPACE -DHAVE_LIBLEPT)\n#IF(MSVC)\n#  LIST(APPEND tesseract_ccmain_srcs \"${PROJECT_SOURCE_DIR}/${TESSERACT_SRC_DIR}/vs2010/port/gettimeofday.cpp\")\n#  add_definitions(-D__MSW32__ -W0)\n```\n\n----------------------------------------\n\nTITLE: Freetype and Harfbuzz Dependency Handling - CMake\nDESCRIPTION: Detects and configures Freetype and Harfbuzz dependencies if required by platform and feature flags. This section uses find_package to locate Freetype/Harfbuzz, configures include/library variables, and adds diagnostic messages. If not found, it emits status messages; else, sets up include directories and relevant library variables. This enables text rendering support within the Emgu CV build process.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nIF(IS_UBUNTU OR IS_RHEL)\n  #USE system freetype, do nothing here.\nELSEIF (EMGU_CV_WITH_FREETYPE)\n\tMESSAGE(STATUS \"Setting up FREETYPE\")\n#\tfind_package(FREETYPE CONFIG REQUIRED)\n\tfind_package(FREETYPE CONFIG)\n\tif(NOT FREETYPE_FOUND)\n\t\tmessage(STATUS \"FREETYPE:   NO\")\n\telse()\n\t\tmessage(STATUS \"FREETYPE:   ${FREETYPE_DIR} (ver ${FREETYPE_VERSION})\")\n\t\tSET(FREETYPE_INCLUDE_DIRS \"${FREETYPE_DIR}/../../../include/freetype2\")\n\t\tSET(FREETYPE_LIBRARY freetype)\n\t\tget_target_property(FREETYPE_LIBRARIES freetype IMPORTED_LOCATION_RELEASE)\n\t\tSET(FREETYPE_LINK_LIBRARIES ${FREETYPE_LIBRARIES})\n\t\tSET(FREETYPE_LINK_LIBRARIES_XXXXX ${FREETYPE_LINK_LIBRARIES})\n\t\tMESSAGE(STATUS \"FREETYPE_LIBRARIES: ${FREETYPE_LIBRARIES}\")\n\tendif()\n#\tfind_package(HARFBUZZ CONFIG REQUIRED)\n\tfind_package(HARFBUZZ CONFIG) \n\tif(NOT HARFBUZZ_FOUND)\n\t\tmessage(STATUS \"HARFBUZZ:    NO\")\n\telse()\n\t\tmessage(STATUS \"HARFBUZZ:    ${HARFBUZZ_DIR} (ver ${HARFBUZZ_VERSION})\")\n\t\tSET(HARFBUZZ_INCLUDE_DIRS \"${HARFBUZZ_DIR}/../../../include/harfbuzz\")\n\t\tget_target_property(HARFBUZZ_LIBRARY harfbuzz::harfbuzz IMPORTED_LOCATION_RELEASE)\n\t\tSET(HARFBUZZ_LIBRARIES ${HARFBUZZ_LIBRARY})\n\t\tSET(HARFBUZZ_LINK_LIBRARIES ${HARFBUZZ_LIBRARY})\n\t\tSET(HARFBUZZ_LINK_LIBRARIES_XXXXX ${HARFBUZZ_LINK_LIBRARIES})\n\t\tMESSAGE(STATUS \"HARFBUZZ_LIBRARIES: ${HARFBUZZ_LIBRARIES}\")\n\t\tinclude_directories(${HARFBUZZ_INCLUDE_DIRS})\n\tendif()\nELSE()\n  SET(FREETYPE_LIBRARY \"\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Detecting Emgu CV Git Version using CMake\nDESCRIPTION: This CMake snippet attempts to determine the Git commit count for the Emgu CV repository. It checks if the `GIT_EXECUTABLE` is found, executes `git rev-list HEAD --count` to get the commit count, extracts the number, and stores it in `EMGUCV_GITVERSION`. If Git is not found or the command fails, it defaults `EMGUCV_GITVERSION` to '0'.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_39\n\nLANGUAGE: cmake\nCODE:\n```\nIF(GIT_EXECUTABLE)\n  MESSAGE(STATUS \"Extracting Emgu CV git version, please wait...\")\n  EXECUTE_PROCESS(\n    WORKING_DIRECTORY  ${CMAKE_CURRENT_SOURCE_DIR}\n    COMMAND ${GIT_EXECUTABLE} rev-list HEAD --count\n    OUTPUT_VARIABLE GITVERSION_RESULT)\n  STRING(REGEX REPLACE \"^([0123456789]+).*\" \"\\\\1\" EMGUCV_GITVERSION \"${GITVERSION_RESULT}\")\n  STRING(STRIP \"${EMGUCV_GITVERSION}\" EMGUCV_GITVERSION)\n  IF(EMGUCV_GITVERSION MATCHES \"^$\" OR EMGUCV_GITVERSION MATCHES \"^-\")\n    # This is NOT a git repository:\n    SET(EMGUCV_GITVERSION \"0\")\n  ENDIF()\n  MESSAGE(STATUS \"Emgu CV GIT VERSION: ${EMGUCV_GITVERSION}\")\nELSE()\n  # We don't have git:\n  SET(EMGUCV_GITVERSION \"0\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenVINO Dependencies in CMake (Windows)\nDESCRIPTION: This snippet configures dependencies for the Intel OpenVINO Toolkit on Windows (WIN32) when OpenVINO support is enabled (WITH_OPENVINO). It sets up link directories, finds and adds OpenVINO runtime DLLs and associated files (.xml, .mvcmd, .json, .elf) to CVEXTERN_DEPENDENCY_DLLS. It also locates and adds required TBB DLLs, potentially searching alternative locations if not found in the default 3rdparty directory, and excludes debug TBB DLLs. Finally, it identifies and adds the OpenCV DNN OpenVINO backend plugin DLL.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_88\n\nLANGUAGE: cmake\nCODE:\n```\nIF(WITH_OPENVINO)\n\n  IF(WIN32)\n    CMAKE_PATH(SET OPENVINO_RUNTIME_DIR NORMALIZE \"${OpenVINO_DIR}/..\")\n    link_directories(\"${OPENVINO_RUNTIME_DIR}/lib/intel64\")\t\n    SET(OPENVINO_DLL_DIRS \"${OPENVINO_RUNTIME_DIR}/bin/intel64/Release\")\n    FILE(GLOB OPENVINO_DLL_NAMES \"${OPENVINO_DLL_DIRS}/*.dll\" \"${OPENVINO_DLL_DIRS}/*.xml\" \"${OPENVINO_DLL_DIRS}/*.mvcmd\" \"${OPENVINO_DLL_DIRS}/*.json\" \"${OPENVINO_DLL_DIRS}/*.elf\")\n    MESSAGE(STATUS \"OPENVINO_DLL_NAMES: ${OPENVINO_DLL_NAMES}\")\n    LIST(APPEND CVEXTERN_DEPENDENCY_DLLS ${OPENVINO_DLL_NAMES})\n    \n    SET(OPENVINO_TBB_DLL_DIRS \"${OPENVINO_RUNTIME_DIR}/3rdparty/tbb/bin\")\n    FILE(GLOB OPENVINO_TBB_DLL_NAMES \"${OPENVINO_TBB_DLL_DIRS}/*.dll\")\n\tIF (NOT OPENVINO_TBB_DLL_NAMES)\n\t\tSET(OPENVINO_TBB_DLL_DIRS_OLD ${OPENVINO_TBB_DLL_DIRS})\n\t\tIF (TARGET_ARCH_64)\n\t\t\t#MESSAGE(STATUS \"^^^^^^^^^^^^^^ MSVC_TOOLSET_VERSION: ${MSVC_TOOLSET_VERSION}\")\n\t\t\tIF((\"${MSVC_TOOLSET_VERSION}\" STREQUAL \"143\") AND (EXISTS \"${TBB_DIR}/../../../redist/intel64/vc14\"))\n\t\t\t\tCMAKE_PATH(SET OPENVINO_TBB_DLL_DIRS NORMALIZE \"${TBB_DIR}/../../../redist/intel64/vc14\")\n\t\t\tELSE()\n\t\t\t\tCMAKE_PATH(SET OPENVINO_TBB_DLL_DIRS NORMALIZE \"${TBB_DIR}/../../../redist/intel64/vc_mt\")\n\t\t\tENDIF()\n\t\tELSE()\n\t\t\tIF((\"${MSVC_TOOLSET_VERSION}\" STREQUAL \"143\") AND (EXISTS \"${TBB_DIR}/../../../redist/ia32/vc14\"))\n\t\t\t\tCMAKE_PATH(SET OPENVINO_TBB_DLL_DIRS NORMALIZE \"${TBB_DIR}/../../../redist/ia32/vc14\")\n\t\t\tELSE()\n\t\t\t\tCMAKE_PATH(SET OPENVINO_TBB_DLL_DIRS NORMALIZE \"${TBB_DIR}/../../../redist/ia32/vc_mt\")\n\t\t\tENDIF()\n\t\tENDIF()\n\t\tMESSAGE(STATUS \"Cannot find TBB dll in ${OPENVINO_TBB_DLL_DIRS_OLD}, trying to look into ${OPENVINO_TBB_DLL_DIRS}\")\n\t\tFILE(GLOB OPENVINO_TBB_DLL_NAMES \"${OPENVINO_TBB_DLL_DIRS}/*.dll\")\n\tENDIF()\n\t#FILE(TO_CMAKE_PATH \"${OPENVINO_TBB_DLL_DIRS}\" OPENVINO_TBB_DLL_DIRS)\n\tMESSAGE(STATUS \"OPENVINO_TBB_DLL_DIRS: ${OPENVINO_TBB_DLL_DIRS}\")\n    FILE(GLOB OPENVINO_TBB_DEBUG_DLL_NAMES \"${OPENVINO_TBB_DLL_DIRS}/*_debug.dll\")\n    MESSAGE(STATUS \"OPENVINO_TBB_DEBUG_DLL_NAMES: ${OPENVINO_TBB_DEBUG_DLL_NAMES}\")\n    IF (OPENVINO_TBB_DEBUG_DLL_NAMES)\n      LIST(REMOVE_ITEM OPENVINO_TBB_DLL_NAMES ${OPENVINO_TBB_DEBUG_DLL_NAMES})\n    ENDIF()\n\t\n    MESSAGE(STATUS \"OPENVINO_TBB_DLL_NAMES: ${OPENVINO_TBB_DLL_NAMES}\")\n    LIST(APPEND CVEXTERN_DEPENDENCY_DLLS ${OPENVINO_TBB_DLL_NAMES})\n\n    if(TARGET_ARCH_64)\n      set(OPENVINO_SUFFIX _64)\n    endif()\n    set(OPENCV_OPENVINO_OUTPUT_NAME \"opencv_dnn_openvino${OPENCV_VERSION_MAJOR}${OPENCV_VERSION_MINOR}${OPENCV_VERSION_PATCH}${OPENVINO_SUFFIX}\")\n    IF(MSVC_IDE)\n\t  SET(OPENCV_OPENVINO_OUTPUT_FILE_PATH \"${EXECUTABLE_OUTPUT_PATH}/Release/${OPENCV_OPENVINO_OUTPUT_NAME}.dll\")\n    ELSEIF(MSVC AND (CMAKE_GENERATOR MATCHES \"Visual\"))\n\t  SET(OPENCV_OPENVINO_OUTPUT_FILE_PATH \"${EXECUTABLE_OUTPUT_PATH}/${CMAKE_BUILD_TYPE}/${OPENCV_OPENVINO_OUTPUT_NAME}.dll\")\n    ENDIF()\n    MESSAGE(STATUS \"OPENVINO DNN plugin file path: ${OPENCV_OPENVINO_OUTPUT_FILE_PATH}\")\n    LIST(APPEND CVEXTERN_DEPENDENCY_DLLS \"${OPENCV_OPENVINO_OUTPUT_FILE_PATH}\")\n\n  \n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific Library Linking with Optional Dependencies - CMake\nDESCRIPTION: This snippet demonstrates conditional linking of various libraries to the '${the_target}' target, depending on platform, target type (static/dynamic), and the presence of optional features (like Tesseract and Freetype). Dependencies such as FREETYPE, HARFBUZZ, TIFF, GEOTIFF, HDF5, and TESSERACT are linked when corresponding variables or targets exist. Platform-specific commands like INSTALL and message logging are included. The snippet relies on prior CMake configuration settings and environment variables, expects properly initialized targets, and assumes EMGU CV and OpenCV build conventions. Outputs are libraries/binaries in platform-appropriate locations, and install targets for packaging.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_125\n\nLANGUAGE: CMake\nCODE:\n```\n#  target_link_libraries(${the_target} inference_engine)\n#ENDIF()\n\n#message(STATUS \"EMGU_CV_WITH_FREETYPE: ${EMGU_CV_WITH_FREETYPE}\")\nGET_TARGET_PROPERTY(CVEXTERN_TARGET_TYPE ${the_target} TYPE)\nIF (CVEXTERN_TARGET_TYPE STREQUAL STATIC_LIBRARY)\n  # Do not need to link FREETYPE or HARFBUZZ if static linking\n  # e.g. IOS will use FREETYPE and HARFBUZZ framework\nELSEIF (TARGET opencv_freetype)\n  target_link_libraries(${the_target} ${FREETYPE_LIBRARY} ${HARFBUZZ_LIBRARY})\nENDIF()\n\nIF (TARGET opencv_hdf)\n    message(STATUS \"LINK CVEXTERN with HDF5_LIBRARIES: ${HDF5_LIBRARIES}\")\n\ttarget_link_libraries(${the_target} ${HDF5_LIBRARIES})\nENDIF()\n\nIF(ANDROID)\n  IF(EMGU_CV_WITH_TESSERACT)\n    #NOT SURE WHY THE FOLLOWING IS NEEDED, BUT SEEMS TO MAKE THE PROBLEM GOES AWAY\n    target_link_libraries(${the_target} ${TESSERACT_PROJECTS} tesseract_ccstruct tesseract_dict tesseract_classify tesseract_ccutil)\n  ENDIF()\n  INSTALL(TARGETS ${the_target} \n\tRUNTIME DESTINATION libs${UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER} COMPONENT libs\n    LIBRARY DESTINATION libs${UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER} COMPONENT libs\n\tARCHIVE DESTINATION libs${UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER} COMPONENT libs)\nELSEIF(APPLE)\n  IF(EMGU_CV_WITH_TESSERACT)\n    IF(NOT TESSERACT_FOUND)\n      target_link_libraries(${the_target} ${TESSERACT_PROJECTS})\n    ENDIF()\n  ENDIF()  \nELSE()\n  target_link_libraries(${the_target} ${TIFF_LIBRARY})\n  IF (EMGU_CV_WITH_TIFF)\n    target_link_libraries(${the_target} ${GEOTIFF_LIBRARY})\n  ENDIF()\n  IF(EMGU_CV_WITH_TESSERACT)\n    IF(NOT TESSERACT_FOUND)\n      target_link_libraries(${the_target} ${TESSERACT_PROJECTS})\n    ENDIF()\n    IF(WIN32)\n      #additional linkage required for tesseract built on windows\n      target_link_libraries(${the_target} Ws2_32)\n    ENDIF()\n  ENDIF()\n  INSTALL(TARGETS ${the_target} \n    RUNTIME DESTINATION libs${UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER} COMPONENT libs\n    LIBRARY DESTINATION libs${UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER} COMPONENT libs\n    ARCHIVE DESTINATION libs${UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER} COMPONENT libs)\nENDIF()\n\n```\n\n----------------------------------------\n\nTITLE: Finding and Appending nGraph DLLs in CMake\nDESCRIPTION: Sets the directory for nGraph DLLs relative to the `InferenceEngine_DIR` variable. It uses `FILE(GLOB)` to find DLLs matching specific patterns (`*ngraph.dll`, `*_importer.dll`) within that directory and appends the found DLL paths to `CVEXTERN_DEPENDENCY_DLLS`. A status message logs the found DLL names.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_93\n\nLANGUAGE: cmake\nCODE:\n```\n    SET(INF_NGRAPH_DLL_DIRS \"${InferenceEngine_DIR}/../../ngraph/lib\")\n    FILE(GLOB INF_NGRAPH_DLL_NAMES \"${INF_NGRAPH_DLL_DIRS}/*ngraph.dll\" \"${INF_NGRAPH_DLL_DIRS}/*_importer.dll\")\n    MESSAGE(STATUS \"^^^^^^^^^^^^^^  INF_NGRAPH_DLL_NAMES: ${INF_NGRAPH_DLL_NAMES}\")\n    LIST(APPEND CVEXTERN_DEPENDENCY_DLLS ${INF_NGRAPH_DLL_NAMES})\n```\n\n----------------------------------------\n\nTITLE: Setting Cross-Platform Build and Packaging Labels - CMake\nDESCRIPTION: This snippet assigns and composes labels for platform-specific builds (e.g., Windows, UWP, MacOS, iOS, Android) based on which architecture flags are set. It builds up variables such as WINDESKTOP_LABEL, WINSTORE_10_LABEL, WINDOWS_LABEL, IOS_LABEL, and MACOS_LABEL. Prerequisites include architecture flags like HAVE_WINDESKTOP_X64 or HAVE_WINSTORE_10_X86. The output is a set of label variables, used to assemble package names and per-platform build configurations; input is a matrix of architecture flags. This logic streamlines multi-platform builds by providing dynamic, consistent label composition.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_31\n\nLANGUAGE: CMake\nCODE:\n```\n  SET(WINDESKTOP_LABEL \"\")\n  IF(HAVE_WINDESKTOP_X86)\n    SET(WINDESKTOP_LABEL \"${WINDESKTOP_LABEL}_x86\")\n  ENDIF()\n  IF(HAVE_WINDESKTOP_X64)\t\n    SET(WINDESKTOP_LABEL \"${WINDESKTOP_LABEL}_x64\")\n  ENDIF()\n  IF(HAVE_WINDESKTOP_ARM64)\t\n    SET(WINDESKTOP_LABEL \"${WINDESKTOP_LABEL}_arm64\")\n  ENDIF()\n  \n  IF(\"${WINDESKTOP_LABEL}\" STREQUAL \"_x86_x64_arm64\")\n    SET(WINDESKTOP_LABEL \"-windesktop\")\n  ELSEIF(NOT (\"${WINDESKTOP_LABEL}\" STREQUAL \"\"))\n    SET(WINDESKTOP_LABEL \"-windesktop${WINDESKTOP_LABEL}\")\n  ENDIF()\n  \n  SET(WINSTORE_10_LABEL \"\")\n  IF(HAVE_WINSTORE_10_X86)\n    SET(WINSTORE_10_LABEL \"${WINSTORE_10_LABEL}_x86\")\n  ENDIF()\n  IF(HAVE_WINSTORE_10_X64)\n    SET(WINSTORE_10_LABEL \"${WINSTORE_10_LABEL}_x64\")\n  ENDIF()\n  IF(HAVE_WINSTORE_10_ARM)\t\n    SET(WINSTORE_10_LABEL \"${WINSTORE_10_LABEL}_arm\")\n  ENDIF()\n  IF(HAVE_WINSTORE_10_ARM64)\t\n    SET(WINSTORE_10_LABEL \"${WINSTORE_10_LABEL}_arm64\")\n  ENDIF()\n  \n  SET(HAVE_WINSTORE_10 OFF)\n  IF(HAVE_WINSTORE_10_X86 OR HAVE_WINSTORE_10_X64 OR HAVE_WINSTORE_10_ARM OR HAVE_WINSTORE_10_ARM64)\n    SET(HAVE_WINSTORE_10 ON)\n  ENDIF()\n  \n  IF(\"${WINSTORE_10_LABEL}\" STREQUAL \"_x86_x64_arm64\")\n    SET(WINSTORE_10_LABEL \"-UWP\")\n  ELSEIF(NOT (\"${WINSTORE_10_LABEL}\" STREQUAL \"\"))\n    SET(WINSTORE_10_LABEL \"-UWP${WINSTORE_10_LABEL}\")\n  ENDIF()\n  \n  SET(WINDOWS_LABEL \"${WINSTORE_10_LABEL}${WINDESKTOP_LABEL}\")\n  IF (\"${WINDOWS_LABEL}\" STREQUAL \"-UWP-windesktop\")\n    SET(WINDOWS_LABEL \"-windows\")\n  ENDIF()\n  \n  SET(IOS_LABEL \"\")\n  IF(HAVE_IOS)\n    SET(IOS_LABEL \"-ios\")\n  ENDIF()\n  \n  SET(MACOS_LABEL \"\")\n  IF(HAVE_MACOS)\n    SET(MACOS_LABEL \"-macos\")\n  ENDIF()\n\n```\n\n----------------------------------------\n\nTITLE: Defining Macro for Setting Tesseract Project Properties in CMake\nDESCRIPTION: Defines a CMake macro named SET_TESSERACT_PROJECT_PROPERTY that takes a project name as an argument. This macro sets common properties for Tesseract-related targets, including organizing them in a 'tesseract' folder in IDEs, enforcing C/C++ standards (17), setting output directories for libraries on Windows, and optionally applying a specific platform toolset if EMGUCV_PLATFORM_TOOLSET is defined.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/tesseract/libtesseract/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nMACRO(SET_TESSERACT_PROJECT_PROPERTY PROJ_NAME)\n  set_target_properties(${PROJECT_NAME} PROPERTIES \n\tFOLDER \"tesseract\"\n    C_STANDARD 17\n    C_STANDARD_REQUIRED ON\n    CXX_STANDARD 17\n    CXX_STANDARD_REQUIRED ON)\n  IF(WIN32)\n    set_target_properties(${PROJECT_NAME} PROPERTIES \n\tARCHIVE_OUTPUT_DIRECTORY \"${CMAKE_SOURCE_DIR}/libs${UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER}\"\n    RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_SOURCE_DIR}/libs${UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER}\"\n    LIBRARY_OUTPUT_DIRECTORY \"${CMAKE_SOURCE_DIR}/libs${UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER}\")\n  ENDIF()\n  IF(DEFINED EMGUCV_PLATFORM_TOOLSET)\n    set_target_properties(${PROJECT_NAME} PROPERTIES PLATFORM_TOOLSET ${EMGUCV_PLATFORM_TOOLSET})\n  ENDIF()  \nENDMACRO()\n```\n\n----------------------------------------\n\nTITLE: Configuring Tesseract ccstruct Library Build in CMake\nDESCRIPTION: This snippet configures the build for the 'tesseract_ccstruct' static library. It adds necessary include directories from Tesseract source and Leptonica, defines the static library target with its source and header files (`tesseract_ccstruct_srcs`, `tesseract_ccstruct_hdrs`), sets Tesseract-specific project properties using a custom function `SET_TESSERACT_PROJECT_PROPERTY`, and adds dependencies on other Tesseract components and Leptonica for non-MSVC builds.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/tesseract/libtesseract/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\n#  include_directories(\"${TESSERACT_SRC_DIR}/vs2010/include\" \"${TESSERACT_SRC_DIR}/vs2010/port\")\n#ENDIF()\ninclude_directories(\"${TESSERACT_SRC_DIR}/ccutil\" \"${TESSERACT_SRC_DIR}/viewer\" \"${TESSERACT_SRC_DIR}/cutil\" \"${TESSERACT_SRC_DIR}/opencl\" \"${LEPTONICA_DIR}\")\nadd_library(${PROJECT_NAME} STATIC ${tesseract_ccstruct_srcs} ${tesseract_ccstruct_hdrs})\n\nSET_TESSERACT_PROJECT_PROPERTY(${PROJECT_NAME})\n\nIF (NOT MSVC)\n  ADD_DEPENDENCIES(${PROJECT_NAME} tesseract_ccutil tesseract_cutil tesseract_viewer tesseract_opencl libleptonica)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Handling Platform-Specific Post-Build Steps and Artifact Copying/Packaging (Windows/iOS/macOS) - CMake\nDESCRIPTION: This snippet configures custom post-build steps for Windows and Apple (iOS, macOS Catalyst), including copying version/build info, signing binaries, and packaging static libraries and xcframeworks. It uses add_custom_command to set up copying, running libtool/lipo for fat/universal binaries, and invokes xcodebuild to assemble xcframeworks. It expects environment variables and build settings (such as iOS architecture, framework presence, and EMGU CV flags) to be set. Dependencies: valid CMake, Xcode, libtool commands, and directory structure. Outputs: signed DLLs on Windows, version string files, and packaged static libs/xcframeworks on iOS/macOS.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_127\n\nLANGUAGE: CMake\nCODE:\n```\nIF (WIN32)\n  IF (EMGU_SIGN_FOUND)\n    EMGU_SIGN_BINARY(${the_target} ${CMAKE_SOURCE_DIR}/libs${UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER}/cvextern.dll)\n  ENDIF()\n  add_custom_command(TARGET ${the_target}\n    POST_BUILD\n    COMMAND ${CMAKE_COMMAND} -E copy_if_different ${OPENCV_BUILD_INFO_VERSION_STRING} ${CMAKE_SOURCE_DIR}/libs${UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER}/version_string.inc\n    WORKING_DIRECTORY \"${CMAKE_BINARY_DIR}\"\n    COMMENT \"Copying build information from ${OPENCV_BUILD_INFO_VERSION_STRING} to ${CMAKE_SOURCE_DIR}/libs${UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER}/version_string.inc\")\n  #INSTALL(FILES\n  #    \"${CMAKE_SOURCE_DIR}/libs${UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER}/version_string.inc\"\n  #    DESTINATION \"libs${UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER}/\"\n  #    COMPONENT emgucv_binary)\nELSEIF (IOS)\n  SET(IOS_RELEASE_FOLDER \"\")\n  IF (IPHONESIMULATOR)\n    SET(IOS_RELEASE_FOLDER \"Release-iphonesimulator\")\n    SET(IOS_RELEASE_FILENAME \"libcvextern_simulator_${IOS_ARCH}.a\")\n\tadd_custom_command(TARGET ${the_target}\n      POST_BUILD\n      COMMAND ${CMAKE_COMMAND} -E copy_if_different ${OPENCV_BUILD_INFO_VERSION_STRING} ${CMAKE_SOURCE_DIR}/libs/iOS/simulator_${IOS_ARCH}_version_string.inc\n      WORKING_DIRECTORY \"${CMAKE_BINARY_DIR}\"\n      COMMENT \"Copying build information from ${OPENCV_BUILD_INFO_VERSION_STRING} to ${CMAKE_SOURCE_DIR}/libs/iOS/simulator_${IOS_ARCH}_version_string.inc\")\n\t#INSTALL(FILES\n\t#  \"${CMAKE_SOURCE_DIR}/libs/iOS/simulator_${IOS_ARCH}_version_string.inc\"\n\t#  DESTINATION \"libs/iOS/\"\n\t#  COMPONENT emgucv_binary)   \n  ELSEIF(IPHONEOS)\n    SET(IOS_RELEASE_FOLDER \"Release-iphoneos\")\n    SET(IOS_RELEASE_FILENAME \"libcvextern_iphoneos_${IOS_ARCH}.a\")\n\tadd_custom_command(TARGET ${the_target}\n      POST_BUILD\n      COMMAND ${CMAKE_COMMAND} -E copy_if_different ${OPENCV_BUILD_INFO_VERSION_STRING} ${CMAKE_SOURCE_DIR}/libs/iOS/iphoneos_${IOS_ARCH}_version_string.inc\n      WORKING_DIRECTORY \"${CMAKE_BINARY_DIR}\"\n      COMMENT \"Copying build information from ${OPENCV_BUILD_INFO_VERSION_STRING} to ${CMAKE_SOURCE_DIR}/libs/iOS/iphoneos_${IOS_ARCH}_version_string.inc\")\n\t#INSTALL(FILES\n\t#  \"${CMAKE_SOURCE_DIR}/libs/iOS/iphoneos_${IOS_ARCH}_version_string.inc\"\n\t#  DESTINATION \"libs/iOS/\"\n\t#  COMPONENT emgucv_binary) \n  ELSEIF(MAC_CATALYST)\n    SET(IOS_RELEASE_FOLDER \"Release-catalyst\")\n    SET(IOS_RELEASE_FILENAME \"libcvextern_catalyst_${IOS_ARCH}.a\")\n    add_custom_command(TARGET ${the_target}\n      POST_BUILD\n      COMMAND ${CMAKE_COMMAND} -E copy_if_different ${OPENCV_BUILD_INFO_VERSION_STRING} ${CMAKE_SOURCE_DIR}/libs/iOS/catalyst_${IOS_ARCH}_version_string.inc\n      WORKING_DIRECTORY \"${CMAKE_BINARY_DIR}\"\n      COMMENT \"Copying build information from ${OPENCV_BUILD_INFO_VERSION_STRING} to ${CMAKE_SOURCE_DIR}/libs/iOS/catalyst_${IOS_ARCH}_version_string.inc\")\n\t#INSTALL(FILES\n\t#  \"${CMAKE_SOURCE_DIR}/libs/iOS/catalyst_${IOS_ARCH}_version_string.inc\"\n\t#  DESTINATION \"libs/iOS/\"\n\t#  COMPONENT emgucv_binary) \t \n  ENDIF()\n  #MESSAGE(STATUS \"<<<<<< IOS_RELEASE_FOLDER: ${IOS_RELEASE_FOLDER} >>>>>>\") \n  SET(LIBTOOL_LINKING_COMMAND libtool -static -arch_only ${IOS_ARCH} -o ${CMAKE_SOURCE_DIR}/libs/iOS/${IOS_RELEASE_FILENAME} bin${UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER}/Release/*.a opencv/3rdparty/lib/Release/*.a ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/Release/*.a)\n  IF (EMGU_CV_WITH_TESSERACT)\n     LIST(APPEND LIBTOOL_LINKING_COMMAND libs/Release/*.a)\n  ENDIF()\n  \n  GET_TARGET_PROPERTY(CVEXTERN_TARGET_TYPE ${the_target} TYPE)\n  IF (CVEXTERN_TARGET_TYPE STREQUAL STATIC_LIBRARY)\n    #  Do not need to link FREETYPE or HARFBUZZ if static linking\n    # e.g. IOS will use FREETYPE and HARFBUZZ framework\n  ELSEIF (TARGET opencv_freetype)\n    LIST(APPEND LIBTOOL_LINKING_COMMAND ${FREETYPE_LIBRARIES} ${HARFBUZZ_LIBRARIES})\n  ENDIF()\n\n  #IF (TARGET opencv_freetype) \n  #\tLIST(APPEND LIBTOOL_LINKING_COMMAND ${FREETYPE_LIBRARIES} ${HARFBUZZ_LIBRARIES})\n  #ENDIF()\n  add_custom_command(TARGET ${the_target}\n    POST_BUILD\n    COMMAND ${LIBTOOL_LINKING_COMMAND}\n    WORKING_DIRECTORY \"${CMAKE_BINARY_DIR}\"\n    COMMENT \"Linking target for ${IOS_ARCH} using command: ${LIBTOOL_LINKING_COMMAND}\")\n    \n  SET(IPHONEOS_STATIC_LIB_FILE ${CMAKE_SOURCE_DIR}/libs/iOS/libcvextern_iphoneos.a)\n  SET(IPHONESIMULATOR_STATIC_LIB_FILE ${CMAKE_SOURCE_DIR}/libs/iOS/libcvextern_simulator.a)\n  SET(IPHONE_UNIVERSAL_STATIC_LIB_FILE ${CMAKE_SOURCE_DIR}/libs/iOS/libcvextern_universal.a)\n  SET(LIPO_INPUT_FILES)\n  SET(XCFRAMEWORK_INPUT_FILES)\n  SET(IOS_SIMULATOR_x86_64_RELEASE_FILE_NAME ${CMAKE_SOURCE_DIR}/libs/iOS/libcvextern_simulator_x86_64.a)\n  IF (IPHONESIMULATOR)\n    # Only add the x86_64 simulator file to the static library\n    IF((\"${IOS_ARCH}\" STREQUAL \"x86_64\") OR (EXISTS ${IOS_SIMULATOR_x86_64_RELEASE_FILE_NAME}))\n      LIST(APPEND LIPO_INPUT_FILES ${IOS_SIMULATOR_x86_64_RELEASE_FILE_NAME})\n    ENDIF()\n    LIST(APPEND XCFRAMEWORK_INPUT_FILES ${IPHONESIMULATOR_STATIC_LIB_FILE})\n    IF (EXISTS ${IPHONEOS_STATIC_LIB_FILE})\n      LIST(APPEND LIPO_INPUT_FILES ${IPHONEOS_STATIC_LIB_FILE})\n      LIST(APPEND XCFRAMEWORK_INPUT_FILES ${IPHONEOS_STATIC_LIB_FILE})\n    ENDIF()\n    add_custom_command(TARGET ${the_target}\n      POST_BUILD\n      COMMAND lipo -create -output ${IPHONESIMULATOR_STATIC_LIB_FILE} ${CMAKE_SOURCE_DIR}/libs/iOS/libcvextern_simulator_*.a\n      WORKING_DIRECTORY \"${CMAKE_SOURCE_DIR}\"\n      COMMENT \"Linking multiple arch into a single file for iOS simulator\") \n  ELSEIF(IPHONEOS)\n    LIST(APPEND LIPO_INPUT_FILES ${IPHONEOS_STATIC_LIB_FILE})\n    IF (EXISTS ${IOS_SIMULATOR_x86_64_RELEASE_FILE_NAME})\n      LIST(APPEND LIPO_INPUT_FILES \"${IOS_SIMULATOR_x86_64_RELEASE_FILE_NAME}\")\n    ENDIF()\n    IF (EXISTS ${IPHONESIMULATOR_STATIC_LIB_FILE})\n      LIST(APPEND XCFRAMEWORK_INPUT_FILES ${IPHONESIMULATOR_STATIC_LIB_FILE} \"\")\n    ENDIF()\n\n    add_custom_command(TARGET ${the_target}\n      POST_BUILD\n      COMMAND lipo -create -output ${IPHONEOS_STATIC_LIB_FILE} ${CMAKE_SOURCE_DIR}/libs/iOS/libcvextern_iphoneos_*.a\n      WORKING_DIRECTORY \"${CMAKE_SOURCE_DIR}\"\n      COMMENT \"Linking multiple arch into a single file for iOS device\")\n  ENDIF()\n  \n  LIST(LENGTH XCFRAMEWORK_INPUT_FILES XCFRAMEWORK_INPUT_FILES_LENGTH)\n  IF (XCFRAMEWORK_INPUT_FILES_LENGTH GREATER 0)\n      SET(CVEXTERN_CXFRAMEWORK_LIBRARIES)\n\t  FOREACH(XCFRAMEWORK_INPUT_FILE ${XCFRAMEWORK_INPUT_FILES}) \n\t\tLIST(APPEND CVEXTERN_XCFRAMEWORK_LIBRARIES -library ${XCFRAMEWORK_INPUT_FILE})\n\t  ENDFOREACH()\n      add_custom_command(TARGET ${the_target}\n      POST_BUILD\n      COMMAND rm -rf ${CMAKE_SOURCE_DIR}/libs/iOS/libcvextern_ios.xcframework\n      COMMAND xcodebuild -create-xcframework ${CVEXTERN_XCFRAMEWORK_LIBRARIES} -output ${CMAKE_SOURCE_DIR}/libs/iOS/libcvextern_ios.xcframework\n      WORKING_DIRECTORY \"${CMAKE_SOURCE_DIR}/libs/iOS\"\n      COMMENT \"Creating xcframework for iOS using files from: ${XCFRAMEWORK_INPUT_FILES}\")\n  ENDIF()\n  LIST(LENGTH LIPO_INPUT_FILES LIPO_INPUT_FILES_LENGTH)\n  IF (LIPO_INPUT_FILES_LENGTH EQUAL 1)\n    add_custom_command(TARGET ${the_target}\n      POST_BUILD\n      COMMAND ${CMAKE_COMMAND} -E copy ${LIPO_INPUT_FILES} ${IPHONE_UNIVERSAL_STATIC_LIB_FILE} \n      WORKING_DIRECTORY \"${CMAKE_SOURCE_DIR}\"\n      COMMENT \"Linking simulator and iphoneos static library into a universal file for iOS: ${LIPO_INPUT_FILES}\")\n   INSTALL(FILES\n      \"${IPHONE_UNIVERSAL_STATIC_LIB_FILE}\"\n      DESTINATION \"libs/iOS/\"\n      COMPONENT emgucv_binary)    \n  ELSEIF (LIPO_INPUT_FILES_LENGTH GREATER 1)\n    add_custom_command(TARGET ${the_target}\n      POST_BUILD\n      COMMAND lipo -create -output ${IPHONE_UNIVERSAL_STATIC_LIB_FILE} ${LIPO_INPUT_FILES}\n      WORKING_DIRECTORY \"${CMAKE_SOURCE_DIR}\"\n```\n\n----------------------------------------\n\nTITLE: Adding and Linking Optional OpenCV Module Dependencies in CMake\nDESCRIPTION: Iterates through a list of OpenCV module names stored in the `OPENCV_MODULE_NAMES` variable. For each module name (`CVEXTERN_OPTIONAL_DEP`), it adds a build dependency from `${the_target}` to `opencv_${CVEXTERN_OPTIONAL_DEP}` and links `${the_target}` against `opencv_${CVEXTERN_OPTIONAL_DEP}`.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_114\n\nLANGUAGE: cmake\nCODE:\n```\nFOREACH(CVEXTERN_OPTIONAL_DEP ${OPENCV_MODULE_NAMES})\n  MESSAGE(STATUS \"CVEXTERN dependency added:  opencv_${CVEXTERN_OPTIONAL_DEP}\")\n  ADD_DEPENDENCIES(${the_target} opencv_${CVEXTERN_OPTIONAL_DEP})\n  target_link_libraries(${the_target} opencv_${CVEXTERN_OPTIONAL_DEP})\nENDFOREACH()\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenVINO Dependencies in CMake (macOS)\nDESCRIPTION: This snippet handles OpenVINO dependency configuration on macOS (APPLE) when WITH_OPENVINO is enabled. It sets the runtime directory, finds OpenVINO dynamic libraries (.dylib, .so) and associated files (.xml, .mvcmd, .json, .elf) in the Release directory, and appends them to CVEXTERN_DEPENDENCY_DLLS. It also finds the required TBB dynamic libraries distributed with OpenVINO, excludes debug versions, and appends them to the dependency list.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_89\n\nLANGUAGE: cmake\nCODE:\n```\nELSEIF(APPLE)\n    SET(OPENVINO_RUNTIME_DIR \"${OpenVINO_DIR}/..\")\n    SET(OPENVINO_DYLIB_DIRS \"${OPENVINO_RUNTIME_DIR}/lib/intel64/Release\")\n    FILE(GLOB OPENVINO_DYLIB_NAMES \"${OPENVINO_DYLIB_DIRS}/*.dylib\" \"${OPENVINO_DYLIB_DIRS}/*.so\" \"${OPENVINO_DYLIB_DIRS}/*.xml\" \"${OPENVINO_DYLIB_DIRS}/*.mvcmd\" \"${OPENVINO_DYLIB_DIRS}/*.json\" \"${OPENVINO_DYLIB_DIRS}/*.elf\")\n    MESSAGE(STATUS \"^^^^^^^^^^^^^^  OPENVINO_DYLIB_NAMES: ${OPENVINO_DYLIB_NAMES}\")\n    LIST(APPEND CVEXTERN_DEPENDENCY_DLLS ${OPENVINO_DYLIB_NAMES})\n\n    SET(OPENVINO_TBB_DYLIB_DIRS \"${OPENVINO_RUNTIME_DIR}/3rdparty/tbb/lib\")\n    MESSAGE(STATUS \"^^^^^^^^^^^^^^  OPENVINO_TBB_DYLIB_DIRS: ${OPENVINO_TBB_DYLIB_DIRS}\")\n    FILE(GLOB OPENVINO_TBB_DYLIB_NAMES \"${OPENVINO_TBB_DYLIB_DIRS}/*.dylib\")\n    FILE(GLOB OPENVINO_TBB_DEBUG_DYLIB_NAMES \"${OPENVINO_TBB_DYLIB_DIRS}/*_debug.dylib\")\n    MESSAGE(STATUS \"^^^^^^^^^^^^^^  OPENVINO_TBB_DEBUG_DYLIB_NAMES: ${OPENVINO_TBB_DEBUG_DYLIB_NAMES}\")\n    IF (OPENVINO_TBB_DEBUG_DYLIB_NAMES)\n      LIST(REMOVE_ITEM OPENVINO_TBB_DYLIB_NAMES ${OPENVINO_TBB_DEBUG_DYLIB_NAMES})\n    ENDIF()\n    MESSAGE(STATUS \"^^^^^^^^^^^^^^  OPENVINO_TBB_DYLIB_NAMES: ${OPENVINO_TBB_DYLIB_NAMES}\")\n    LIST(APPEND CVEXTERN_DEPENDENCY_DLLS ${OPENVINO_TBB_DYLIB_NAMES})\n  ENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation and Directory Inclusion Using CMake - CMake\nDESCRIPTION: This snippet configures CMake to conditionally install specific source files and project items when building the EMGU library or its examples. It employs the INSTALL command to copy matching files (such as .cs, .shproj, .csproj, .resx, and readme files) to the target location, while explicitly excluding build artifacts, temporary directories, and Unity-related files. The snippet also adds a subdirectory for handling .NET Standard related builds. Prerequisites include a CMake environment with defined build flags (EMGU_CV_BUILD, EMGU_CV_EXAMPLE_BUILD), and existing expected file patterns in the current source directory. Inputs are the files in the source directory; outputs are the installed files in the destination. This script assumes that build and install environments follow the CMake conventions and folder structures.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Models/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# --------------------------------------------------------\\n#  Copyright (C) 2004-2025 by EMGU Corporation. All rights reserved.\\n# --------------------------------------------------------\\n\\nIF(EMGU_CV_BUILD OR EMGU_CV_EXAMPLE_BUILD)\\n\\n  INSTALL(\\n\\t  DIRECTORY\\n\\t  ${CMAKE_CURRENT_SOURCE_DIR}\\n\\t  DESTINATION .\\n\\t\\tCOMPONENT emgucv_source\\n\\t  FILES_MATCHING \\n\\t  PATTERN \"*.cs\"\\n\\t  PATTERN \"*.shproj\"\\n\\t  PATTERN \"*.csproj\"\\n\\t  PATTERN \"*.projitems\"\\n\\t  PATTERN \"*.resx\"\\n\\t  PATTERN \"Directory.Build.props\"\\n\\t  PATTERN \"README.txt\"\\n\\t  PATTERN \"README.md\"\\n\\t  PATTERN \".svn\" EXCLUDE\\n\\t  PATTERN \"obj\" EXCLUDE\\n\\t  PATTERN \"CMakeFiles\" EXCLUDE\\n\\t  PATTERN \"${PROJECT_NAME}.dir\" EXCLUDE\\n\\t  PATTERN \"*Unity*\" EXCLUDE\\n\\t)\\n\\nENDIF()\\n\\nADD_SUBDIRECTORY(NetStandard)\\n\n```\n\n----------------------------------------\n\nTITLE: Defining and Linking ICD Loader Test Executable in CMake\nDESCRIPTION: This CMake code defines an executable target named `icd_loader_test` using the `add_executable` command. It lists multiple C source files (`test_kernel.c`, `main.c`, etc.) that will be compiled to create the executable. The `target_link_libraries` command then links this executable against the `OpenCL` and `IcdLog` libraries, making their functionalities available to the test program. This is a standard procedure in CMake for building executables from source files and specifying their dependencies.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/3rdParty/opencl-icd-1.2.11.0/icd/test/loader_test/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable (icd_loader_test\n    test_kernel.c\n    main.c\n    test_platforms.c\n    icd_test_match.c\n    test_program_objects.c\n    test_sampler_objects.c\n    test_buffer_object.c\n    test_cl_runtime.c\n    callbacks.c\n    test_create_calls.c\n    test_clgl.c\n    test_image_objects.c )\n\ntarget_link_libraries (icd_loader_test OpenCL IcdLog)\n```\n\n----------------------------------------\n\nTITLE: Creating CUDA Cascade Classifier Property Accessors in EmguCV - CMake\nDESCRIPTION: Defines macro to expose properties of cv::cuda::CascadeClassifier (object detector) to EmguCV via auto-generated accessor code. Provides settings for scale factor, neighbor thresholding, object limits, and bounding box sizing. Depends on CUDA-enabled object detection and EmguCV wrapper codegen. Exposes classifier's tuning parameters in managed code.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_60\n\nLANGUAGE: CMake\nCODE:\n```\nCREATE_OCV_CLASS_PROPERTY( \n    \"cudaobjdetect/cuda_cascade_classifier_property\" \n    \"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV.Cuda/Objdetect/CudaCascadeClassifier.g.cs\"\n    \"cv::cuda::CascadeClassifier\"\n    \"CudaCascadeClassifier\"\n    \"ScaleFactor;MinNeighbors;MaxNumObjects;FindLargestObject;MaxObjectSize;MinObjectSize;ClassifierSize\" \n    \"double;int;int;bool;CvSize;CvSize;CvSize\" \n    \"prop;prop;prop;prop;struct;struct;structR\"\n    \"ScaleFactor;MinNeighbors;MaxNumObjects;FindLargestObject;MaxObjectSize;MinObjectSize;ClassifierSize\" \n    \"double;int;int;bool;System.Drawing.Size;System.Drawing.Size;System.Drawing.Size\"\n    \"Parameter specifying how much the image size is reduced at each image scale;\n  Parameter specifying how many neighbors each candidate rectangle should have to retain it;\n  The maximum number of objects;\n  If true, only return the largest object;\n  The maximum object size;\n  The minimum object size;\n  The classifier size\"\n    \"Emgu.CV.Cuda\"\n    \"CudaInvoke\"\n    \"CudaCascadeClassifier\"\n\t\"\"\n    \"#include \\\"cudaobjdetect_c.h\\\"\"\n\t\"\"\n\t\"\"\n\t${HAVE_opencv_cudaobjdetect})\n```\n\n----------------------------------------\n\nTITLE: Building and Running MAUI App for macOS using dotnet CLI\nDESCRIPTION: Builds and immediately runs the MAUI application targeting macOS (Mac Catalyst). It specifies the target framework 'net9.0-maccatalyst'.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Example/MAUI/MauiDemoApp/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet build -t:Run -f net9.0-maccatalyst\n```\n\n----------------------------------------\n\nTITLE: Linking Core OpenCV and Zlib Libraries in CMake\nDESCRIPTION: Links the target `${the_target}` against essential libraries. It links the list of OpenCV libraries specified in `OPENCV_LINKER_LIBS` and the zlib library specified in `ZLIB_LIBRARY`.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_122\n\nLANGUAGE: cmake\nCODE:\n```\n# Add the required libraries for linking:\ntarget_link_libraries(${the_target} \n  ${OPENCV_LINKER_LIBS} \n  ${ZLIB_LIBRARY})\n  #  xtiff \n  #${CVBLOB_LIBRARY})\n```\n\n----------------------------------------\n\nTITLE: Building and Running MAUI App for Android using dotnet CLI\nDESCRIPTION: Builds and runs the MAUI application on a connected Android device or a running Android emulator/simulator. It targets the 'net9.0-android' framework. An Android simulator must be running or a device connected beforehand.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Example/MAUI/MauiDemoApp/README.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ndotnet build -t:Run -f net9.0-android\n```\n\n----------------------------------------\n\nTITLE: Configuring Project Resource Installation with CMake - CMake - Shell\nDESCRIPTION: This CMake code snippet configures the installation of diverse project files for Emgu.CV.Example and DynamicImage.Asp.Net using the INSTALL command. It sets up file matching patterns to include source code (*.cs, *.csproj), configuration (*.config, *.json), resources (images, XML, props), and excludes build output folders (bin, obj). Dependencies required include the CMake build system and a directory structure matching the specified source and destination paths. Patterns ensure only pertinent resources are included in the build, supporting correct packaging of .NET/.NET Core applications.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Example/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nDESTINATION Emgu.CV.Example/BuildInfo.Console/\nCOMPONENT emgucv_example_source\nFILES_MATCHING \nPATTERN \"*.cs\"\nPATTERN \"*.csproj\"\nPATTERN \"*.config\"\nPATTERN \"*.shproj\"\nPATTERN \"*.json\"\nPATTERN \"*.projitems\"\nPATTERN \"*.axml\"\nPATTERN \"*.xaml\"\nPATTERN \"*.xml\"\nPATTERN \"*.txt\"\nPATTERN \"*.png\"\nPATTERN \"*.jpg\"\nPATTERN \"*.dll\"\nPATTERN \"*.json\"\nPATTERN \"*.Build.props\"\nPATTERN \"bin\" EXCLUDE\nPATTERN \"obj\" EXCLUDE\n)\nINSTALL(\n  DIRECTORY\n  \"${CMAKE_CURRENT_SOURCE_DIR}/DynamicImage.Asp.Net/\"\n  DESTINATION Emgu.CV.Example/DynamicImage.Asp.Net/\n  COMPONENT emgucv_example_source\n  FILES_MATCHING \n  PATTERN \"*.cs\"\n  PATTERN \"*.csproj\"\n  PATTERN \"*.config\"\n  PATTERN \"*.shproj\"\n  PATTERN \"*.json\"\n  PATTERN \"*.projitems\"\n  PATTERN \"*.axml\"\n  PATTERN \"*.xaml\"\n  PATTERN \"*.xml\"\n  PATTERN \"*.txt\"\n  PATTERN \"*.png\"\n  PATTERN \"*.jpg\"\n  PATTERN \"*.dll\"\n  PATTERN \"*.json\"\n  PATTERN \"*.Build.props\"\n  PATTERN \"bin\" EXCLUDE\n  PATTERN \"obj\" EXCLUDE\n)\nENDIF()\n\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Building Emgu.runtime.windows.cuda.dnn.cnn NuGet Package (CMake)\nDESCRIPTION: This CMake script conditionally builds the `Emgu.runtime.windows.cuda.dnn.cnn.nuget` project if the build targets Windows (WIN32), includes desktop components (HAVE_WINDESKTOP_X86 or HAVE_WINDESKTOP_X64), and has cuDNN enabled (WITH_CUDNN). It uses the `BUILD_NUGET_PACKAGE` function with specified .csproj and .nuspec files, handles optional NuGet signing via `EMGU_SIGN_NUGET` if `EMGU_NUGET_SIGN_FOUND` is true, adds a dependency on `Emgu.runtime.windows.cuda.dnn.nuget`, and optionally places the project in a 'nuget' solution folder if `ENABLE_SOLUTION_FOLDERS` is enabled.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/platforms/nuget/Emgu.runtime.windows.cuda.dnn.cnn/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# --------------------------------------------------------\n#  Copyright (C) 2004-2025 by EMGU Corporation. All rights reserved.\n# --------------------------------------------------------\n\nIF (WIN32 AND (HAVE_WINDESKTOP_X86 OR HAVE_WINDESKTOP_X64) AND WITH_CUDNN)\n\nPROJECT(Emgu.runtime.windows.cuda.dnn.cnn.nuget)\n\n  get_filename_component(NUGET_OUTPUT_DIR ${CMAKE_CURRENT_SOURCE_DIR} DIRECTORY)\n\n  BUILD_NUGET_PACKAGE(\n    ${PROJECT_NAME} \n\t\"${EMGU_CV_SOURCE_DIR}/Emgu.CV/NetStandard/Emgu.CV.csproj\" #csproj_file \n\t\"${CMAKE_CURRENT_SOURCE_DIR}/Package.nuspec\" #nuspec_file \n\t\"${CMAKE_CURRENT_SOURCE_DIR}/../\" #output_dir \n\t\"${CMAKE_CURRENT_SOURCE_DIR}\" #working_dir\n\t) \n\n  IF (EMGU_NUGET_SIGN_FOUND)\n    EMGU_SIGN_NUGET(${PROJECT_NAME} \"${NUGET_OUTPUT_DIR}/${EMGU_CUDNN_CNN_INFER_NUGET_ID}.${EMGU_CUDNN_VERSION}.nupkg\")\n  ENDIF()\n\n  ADD_DEPENDENCIES(${PROJECT_NAME} Emgu.runtime.windows.cuda.dnn.nuget)\n\nif(ENABLE_SOLUTION_FOLDERS)\n  set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER \"nuget\")\nendif() \n\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Running Emgu CV Docker Image (Shell)\nDESCRIPTION: Executes the 'run_docker' script to start and run the previously built Ubuntu x86-64 Docker image with Emgu CV. This command assumes the 'run_docker' script is available and executable, and that the required Docker image has already been successfully built using 'build_docker'.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Example/Docker/Ubuntu/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nrun_docker\n```\n\n----------------------------------------\n\nTITLE: Configuring and Installing Example Projects Using CMake - CMake\nDESCRIPTION: This CMake script orchestrates the installation of various example demo applications related to Emgu CV, conditionally including subdirectories and copying project files and resources according to the target platform and build options. Prerequisites are CMake and the corresponding Emgu CV source tree, along with defined platform variables reflecting the build environment (such as HAVE_ANDROID, HAVE_WINSTORE_10, etc). The script uses the INSTALL and add_subdirectory commands with complex FILES_MATCHING PATTERN filters to selectively include or exclude project files, ensuring only relevant files are copied. Key parameters include target directories, file pattern filters, and component labels, and the output is a set of installed example project folders with appropriate structure and content. The approach modularizes demo project handling but requires careful maintenance of install rules for future directory or platform changes.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Example/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# --------------------------------------------------------\n\nIF(EMGU_CV_EXAMPLE_BUILD)\n   \n  IF (HAVE_ANDROID OR HAVE_IOS OR HAVE_MACOS OR HAVE_WINDESKTOP_X86 OR HAVE_WINDESKTOP_X64 OR HAVE_WINSTORE_10) \n    INSTALL(\n      DIRECTORY\n      \"${CMAKE_CURRENT_SOURCE_DIR}/MAUI/MauiDemoApp/\"\n      DESTINATION Emgu.CV.Example/MAUI/MauiDemoApp/\n      COMPONENT emgucv_example_source\n      FILES_MATCHING \n      PATTERN \"*.cs\"\n      PATTERN \"*.csproj\"\n      PATTERN \"*.config\"\n      PATTERN \"*.shproj\"\n      PATTERN \"*.projitems\"\n\t  PATTERN \"*.props\"\n      PATTERN \"*.axml\"\n      PATTERN \"*.xaml\"\n      PATTERN \"*.xml\"\n      PATTERN \"*.txt\"\n      PATTERN \"*.png\"\n\t  PATTERN \"*.jpg\"\n\t  PATTERN \"*.svg\"\n      PATTERN \"*.dll\"\n      PATTERN \"*.json\"\n\t  PATTERN \"*.manifest\"\n\t  PATTERN \"*.appxmanifest\"\n\t  PATTERN \"*.plist\"\n\t  PATTERN \"*.ttf\"\n      PATTERN \".git\" EXCLUDE\n      PATTERN \"Debug\" EXCLUDE\n      PATTERN \"Release\" EXCLUDE  \n      )\t  \n  ENDIF()\n  \n  #Windows only demos\n  IF (HAVE_WINDESKTOP_X86 OR HAVE_WINDESKTOP_X64)\n    add_subdirectory(CameraCapture)\n    add_subdirectory(Webservice_Host)\n    add_subdirectory(Webservice_Client)\n    add_subdirectory(OCR)\n    INSTALL(\n      DIRECTORY\n      \"${CMAKE_CURRENT_SOURCE_DIR}/CameraCapture/\"\n      DESTINATION EmgucV.Example/CameraCapture/\n      COMPONENT emgucv_example_source\n      FILES_MATCHING \n      PATTERN \"*.cs\"\n      PATTERN \"*.csproj\"\n      PATTERN \"*.config\"\n      PATTERN \"*.shproj\"\n      PATTERN \"*.Xamarin\"\n      PATTERN \"*.projitems\"\n      PATTERN \"*.axml\"\n      PATTERN \"*.xaml\"\n      PATTERN \"*.xml\"\n      PATTERN \"*.txt\"\n      PATTERN \"*.png\"\n      PATTERN \"*.dll\"\n      PATTERN \"*.json\"\n\t  PATTERN \"*.resx\"\n      PATTERN \".git\" EXCLUDE\n      PATTERN \"Debug\" EXCLUDE\n      PATTERN \"Release\" EXCLUDE  \n      )\n    INSTALL(\n      DIRECTORY\n      \"${CMAKE_CURRENT_SOURCE_DIR}/HelloWorld.WPF/\"\n      DESTINATION Emgu.CV.Example/HelloWorld.WPF/\n      COMPONENT emgucv_example_source\n      FILES_MATCHING \n      PATTERN \"*.cs\"\n      PATTERN \"*.csproj\"\n      PATTERN \"*.config\"\n      PATTERN \"*.props\"\n      PATTERN \"*.projitems\"\n      PATTERN \"*.axml\"\n      PATTERN \"*.xaml\"\n      PATTERN \"*.xml\"\n      PATTERN \"*.txt\"\n      PATTERN \"*.png\"\n      PATTERN \"*.dll\"\n      PATTERN \"*.json\"\n      PATTERN \".git\" EXCLUDE\n      PATTERN \"Debug\" EXCLUDE\n      PATTERN \"Release\" EXCLUDE  \n      )\n\tINSTALL(\n      DIRECTORY\n      \"${CMAKE_CURRENT_SOURCE_DIR}/TF.Interop/\"\n      DESTINATION Emgu.CV.Example/TF.Interop/\n      COMPONENT emgucv_example_source\n      FILES_MATCHING \n      PATTERN \"*.cs\"\n      PATTERN \"*.csproj\"\n      PATTERN \"*.config\"\n      PATTERN \"*.shproj\"\n      PATTERN \"*.Xamarin\"\n      PATTERN \"*.projitems\"\n      PATTERN \"*.axml\"\n      PATTERN \"*.xaml\"\n      PATTERN \"*.xml\"\n      PATTERN \"*.txt\"\n      PATTERN \"*.png\"\n      PATTERN \"*.dll\"\n      PATTERN \"*.json\"\n      PATTERN \".git\" EXCLUDE\n      PATTERN \"Debug\" EXCLUDE\n      PATTERN \"Release\" EXCLUDE  \n      )\n\tINSTALL(\n      DIRECTORY\n      \"${CMAKE_CURRENT_SOURCE_DIR}/TF.Lite.Interop/\"\n      DESTINATION Emgu.CV.Example/TF.Lite.Interop/\n      COMPONENT emgucv_example_source\n      FILES_MATCHING \n      PATTERN \"*.cs\"\n      PATTERN \"*.csproj\"\n      PATTERN \"*.config\"\n      PATTERN \"*.shproj\"\n      PATTERN \"*.Xamarin\"\n      PATTERN \"*.projitems\"\n      PATTERN \"*.axml\"\n      PATTERN \"*.xaml\"\n      PATTERN \"*.xml\"\n      PATTERN \"*.txt\"\n      PATTERN \"*.png\"\n      PATTERN \"*.dll\"\n      PATTERN \"*.json\"\n      PATTERN \".git\" EXCLUDE\n      PATTERN \"Debug\" EXCLUDE\n      PATTERN \"Release\" EXCLUDE  \n      )\n    INSTALL(\n      DIRECTORY\n      \"${CMAKE_CURRENT_SOURCE_DIR}/OCR/\"\n      DESTINATION Emgu.CV.Example/OCR/\n      COMPONENT emgucv_example_source\n      FILES_MATCHING \n      PATTERN \"*.cs\"\n      PATTERN \"*.csproj\"\n      PATTERN \"*.config\"\n      PATTERN \"*.shproj\"\n      PATTERN \"*.Xamarin\"\n      PATTERN \"*.projitems\"\n      PATTERN \"*.axml\"\n      PATTERN \"*.xaml\"\n      PATTERN \"*.xml\"\n      PATTERN \"*.txt\"\n      PATTERN \"*.png\"\n      PATTERN \"*.dll\"\n      PATTERN \"*.json\"\n      PATTERN \".git\" EXCLUDE\n      PATTERN \"Debug\" EXCLUDE\n      PATTERN \"Release\" EXCLUDE  \n      )\n\tINSTALL(\n      DIRECTORY\n      \"${CMAKE_CURRENT_SOURCE_DIR}/Stitching/\"\n      DESTINATION Emgu.CV.Example/Stitching/\n      COMPONENT emgucv_example_source\n      FILES_MATCHING \n      PATTERN \"*.cs\"\n\t  PATTERN \"*.resx\"\n      PATTERN \"*.csproj\"\n      PATTERN \"*.config\"\n      PATTERN \"*.shproj\"\n      PATTERN \"*.Xamarin\"\n      PATTERN \"*.projitems\"\n      PATTERN \"*.axml\"\n      PATTERN \"*.xaml\"\n      PATTERN \"*.xml\"\n      PATTERN \"*.txt\"\n      PATTERN \"*.png\"\n      PATTERN \"*.dll\"\n      PATTERN \"*.json\"\n      PATTERN \".git\" EXCLUDE\n      PATTERN \"Debug\" EXCLUDE\n      PATTERN \"Release\" EXCLUDE  \n      )\n\tINSTALL(\n      DIRECTORY\n      \"${CMAKE_CURRENT_SOURCE_DIR}/Aruco/\"\n      DESTINATION Emgu.CV.Example/Aruco/\n      COMPONENT emgucv_example_source\n      FILES_MATCHING \n      PATTERN \"*.cs\"\n\t  PATTERN \"*.resx\"\n      PATTERN \"*.csproj\"\n      PATTERN \"*.config\"\n      PATTERN \"*.shproj\"\n      PATTERN \"*.projitems\"\n      PATTERN \"*.axml\"\n      PATTERN \"*.xaml\"\n      PATTERN \"*.xml\"\n      PATTERN \"*.txt\"\n      PATTERN \"*.png\"\n      PATTERN \"*.dll\"\n      PATTERN \"*.json\"\n      PATTERN \".git\" EXCLUDE\n      PATTERN \"Debug\" EXCLUDE\n      PATTERN \"Release\" EXCLUDE  \n      )\n\tINSTALL(\n      DIRECTORY\n      \"${CMAKE_CURRENT_SOURCE_DIR}/Webservice_Client/\"\n      DESTINATION Emgu.CV.Example/Webservice_Client/\n      COMPONENT emgucv_example_source\n      FILES_MATCHING \n      PATTERN \"*.cs\"\n      PATTERN \"*.csproj\"\n      PATTERN \"*.config\"\n      PATTERN \"*.shproj\"\n      PATTERN \"*.Xamarin\"\n      PATTERN \"*.projitems\"\n      PATTERN \"*.axml\"\n      PATTERN \"*.xaml\"\n      PATTERN \"*.xml\"\n      PATTERN \"*.txt\"\n      PATTERN \"*.png\"\n      PATTERN \"*.dll\"\n      PATTERN \"*.json\"\n\t  PATTERN \"*.resx\"\n      PATTERN \".git\" EXCLUDE\n      PATTERN \"Debug\" EXCLUDE\n      PATTERN \"Release\" EXCLUDE  \n      )\n\tINSTALL(\n      DIRECTORY\n      \"${CMAKE_CURRENT_SOURCE_DIR}/Webservice_Host/\"\n      DESTINATION Emgu.CV.Example/Webservice_Host/\n      COMPONENT emgucv_example_source\n      FILES_MATCHING \n      PATTERN \"*.cs\"\n      PATTERN \"*.csproj\"\n      PATTERN \"*.config\"\n      PATTERN \"*.shproj\"\n      PATTERN \"*.Xamarin\"\n      PATTERN \"*.projitems\"\n      PATTERN \"*.axml\"\n      PATTERN \"*.xaml\"\n      PATTERN \"*.xml\"\n      PATTERN \"*.txt\"\n      PATTERN \"*.png\"\n      PATTERN \"*.dll\"\n      PATTERN \"*.json\"\n      PATTERN \".git\" EXCLUDE\n      PATTERN \"Debug\" EXCLUDE\n      PATTERN \"Release\" EXCLUDE  \n      )\n\tINSTALL(\n      DIRECTORY\n      \"${CMAKE_CURRENT_SOURCE_DIR}/DepthAI/\"\n      DESTINATION Emgu.CV.Example/DepthAI/\n      COMPONENT emgucv_example_source\n      FILES_MATCHING \n      PATTERN \"*.cs\"\n      PATTERN \"*.csproj\"\n      PATTERN \"*.config\"\n      PATTERN \"*.shproj\"\n      PATTERN \"*.Xamarin\"\n      PATTERN \"*.projitems\"\n      PATTERN \"*.axml\"\n      PATTERN \"*.xaml\"\n      PATTERN \"*.xml\"\n      PATTERN \"*.txt\"\n      PATTERN \"*.png\"\n      PATTERN \"*.dll\"\n      PATTERN \"*.json\"\n      PATTERN \".git\" EXCLUDE\n      PATTERN \"Debug\" EXCLUDE\n      PATTERN \"Release\" EXCLUDE  \n      )\n\tINSTALL(\n      DIRECTORY\n      \"${CMAKE_CURRENT_SOURCE_DIR}/FaceDetectionVB/\"\n      DESTINATION Emgu.CV.Example/FaceDetectionVB/\n      COMPONENT emgucv_example_source\n      FILES_MATCHING \n      PATTERN \"*.vb\"\n      PATTERN \"*.config\"\n      PATTERN \"*.vbproj\"\n      PATTERN \"*.projitems\"\n      PATTERN \"*.axml\"\n      PATTERN \"*.xaml\"\n      PATTERN \"*.xml\"\n      PATTERN \"*.txt\"\n      PATTERN \"*.jpg\"\n      PATTERN \"*.dll\"\n      PATTERN \"*.json\"\n\t  PATTERN \"*.resx\"\n      PATTERN \".git\" EXCLUDE\n      PATTERN \"Debug\" EXCLUDE\n      PATTERN \"Release\" EXCLUDE  \n      )\n  ENDIF()\n  \n  IF(HAVE_WINSTORE_10)\n    INSTALL(\n      DIRECTORY\n      \"${CMAKE_CURRENT_SOURCE_DIR}/HelloWorld.UWP/\"\n      DESTINATION Emgu.CV.Example/HelloWorld.UWP/\n      COMPONENT emgucv_example_source\n      FILES_MATCHING \n      PATTERN \"*.cs\"\n      PATTERN \"Properties/*\"\n      PATTERN \"*.csproj\"\n      PATTERN \"*.appxmanifest\"\n      PATTERN \"*.xaml\"\n\t  PATTERN \"*.xml\"\n      PATTERN \"*.json\"\n      PATTERN \"*.pfx\"\n      PATTERN \"Assets/*.png\"  \n      PATTERN \".git\" EXCLUDE\n      PATTERN \"obj\" EXCLUDE\n      PATTERN \"CMake*\" EXCLUDE\n      PATTERN \"Release\" EXCLUDE\n      PATTERN \"Debug\" EXCLUDE\n      PATTERN \"RelWithDebInfo\" EXCLUDE\n      PATTERN \"*.dir\" EXCLUDE\n      PATTERN \"bin\" EXCLUDE\n      )\n    INSTALL(\n      DIRECTORY\n      \"${CMAKE_CURRENT_SOURCE_DIR}/RealtimeCamera.UWP/\"\n      DESTINATION Emgu.CV.Example/RealtimeCamera.UWP/\n      COMPONENT emgucv_example_source\n      FILES_MATCHING \n      PATTERN \"*.cs\"\n      PATTERN \"Properties/*\"\n      PATTERN \"*.csproj\"\n      PATTERN \"*.appxmanifest\"\n      PATTERN \"*.xaml\"\n\t  PATTERN \"*.xml\"\n      PATTERN \"*.json\"\n      PATTERN \"*.pfx\"\n      PATTERN \"Assets/*.png\"  \n      PATTERN \".git\" EXCLUDE\n      PATTERN \"obj\" EXCLUDE\n      PATTERN \"CMake*\" EXCLUDE\n      PATTERN \"Release\" EXCLUDE\n      PATTERN \"Debug\" EXCLUDE\n      PATTERN \"RelWithDebInfo\" EXCLUDE\n      PATTERN \"*.dir\" EXCLUDE\n      PATTERN \"bin\" EXCLUDE\n      )\n\n  ENDIF()\n   \n  IF(HAVE_WINDESKTOP_X86 OR HAVE_WINDESKTOP_X64 OR HAVE_MACOS OR HAVE_LINUX_ARM OR HAVE_LINUX_X64 OR HAVE_LINUX_X86)\n    add_subdirectory(HelloWorld)\n\tadd_subdirectory(BuildInfo.Console)\n\tadd_subdirectory(DynamicImage.Asp.Net)\n\tINSTALL(\n      DIRECTORY\n      \"${CMAKE_CURRENT_SOURCE_DIR}/HelloWorld/\"\n      DESTINATION Emgu.CV.Example/HelloWorld/\n      COMPONENT emgucv_example_source\n      FILES_MATCHING \n      PATTERN \"*.cs\"\n      PATTERN \"*.csproj\"\n      PATTERN \"*.config\"\n      PATTERN \"*.shproj\"\n      PATTERN \"*.json\"\n      PATTERN \"*.projitems\"\n      PATTERN \"*.axml\"\n      PATTERN \"*.xaml\"\n      PATTERN \"*.xml\"\n      PATTERN \"*.txt\"\n      PATTERN \"*.png\"\n\t  PATTERN \"*.jpg\"\n      PATTERN \"*.dll\"\n      PATTERN \"*.json\"\n\t  PATTERN \"*.Build.props\"\n      PATTERN \"bin\" EXCLUDE\n      PATTERN \"obj\" EXCLUDE\n      )\t\n\tINSTALL(\n      DIRECTORY\n      \"${CMAKE_CURRENT_SOURCE_DIR}/BuildInfo.Console/\"\n\n```\n\n----------------------------------------\n\nTITLE: Generating C# Properties for cv::Moments using CMake\nDESCRIPTION: This snippet utilizes the `CREATE_OCV_CLASS_PROPERTY` CMake macro to generate C# wrapper properties for the `cv::Moments` C++ class, which stores spatial and central image moments. It defines numerous `double` properties representing different moments (e.g., `M00`, `M10`, `Mu20`, `Nu20`). The output is `Emgu.CV/Core/Moments.g.cs` in the `Emgu.CV` namespace, using `CvInvoke`. It requires `core_c_extra.h` and depends on `HAVE_opencv_core`.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nCREATE_OCV_CLASS_PROPERTY( \n    \"core/moments_property\" \n    \"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV/Core/Moments.g.cs\"\n    \"cv::Moments\" \n    \"Moments\" \n    \"m00;m10;m01;m20;m11;m02;m30;m21;m12;m03;mu20;mu11;mu02;mu30;mu21;mu12;mu03;nu20;nu11;nu02;nu30;nu21;nu12;nu03\" \n    \"double;double;double;double;double;double;double;double;double;double;double;double;double;double;double;double;double;double;double;double;double;double;double;double\" \n    \"element;element;element;element;element;element;element;element;element;element;element;element;element;element;element;element;element;element;element;element;element;element;element;element\"\n    \"M00;M10;M01;M20;M11;M02;M30;M21;M12;M03;Mu20;Mu11;Mu02;Mu30;Mu21;Mu12;Mu03;Nu20;Nu11;Nu02;Nu30;Nu21;Nu12;Nu03\" \n    \"double;double;double;double;double;double;double;double;double;double;double;double;double;double;double;double;double;double;double;double;double;double;double;double\" \n    \"Spatial Moment M00;\\n    Spatial Moment M10;\\n    Spatial Moment M01;\\n    Spatial Moment M20;\\n    Spatial Moment M11;\\n    Spatial Moment M02;\\n    Spatial Moment M30;\\n    Spatial Moment M21;\\n    Spatial Moment M12;\\n    Spatial Moment M03;\\n    Central Moment Mu20;\\n    Central Moment Mu11;\\n    Central Moment Mu02;\\n    Central Moment Mu30;\\n    Central Moment Mu21;\\n    Central Moment Mu12;\\n    Central Moment Mu03;\\n    Central Normalized Moment Nu20;\\n    Central Normalized Moment Nu11;\\n    Central Normalized Moment Nu02;\\n    Central Normalized Moment Nu30;\\n    Central Normalized Moment Nu21;\\n    Central Normalized Moment Nu12;\\n    Central Normalized Moment Nu03\"\n    \"Emgu.CV\"\n    \"CvInvoke\"\n    \"Moments\"\n\t\"\"\n    \"#include \\\"core_c_extra.h\\\"\"\n\t\"\"\n\t\"\"\n\t${HAVE_opencv_core})\n```\n\n----------------------------------------\n\nTITLE: Determining Unmanaged Library Output Subfolder in CMake\nDESCRIPTION: This extensive conditional block sets the `UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER` variable based on the target platform and architecture. It covers Android, Emscripten, various Windows versions/architectures (including Windows Store UWP targets using `CMAKE_SYSTEM_NAME` and `CMAKE_SYSTEM_VERSION`), macOS (Apple Silicon and x64), Linux distributions (Ubuntu, RHEL, Debian variants) with different architectures, and iOS (differentiating between device and simulator builds). The subfolder path often corresponds to NuGet runtime identifiers.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_23\n\nLANGUAGE: cmake\nCODE:\n```\nIF(ANDROID)\n  SET(UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER \"/android/${ANDROID_ABI}\")\nELSEIF(\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"Emscripten\")\n  SET(UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER \"/webgl\")\nELSEIF(WIN32)\n  MESSAGE(STATUS \"<<<< MSVC_C_ARCHITECTURE_ID: ${MSVC_C_ARCHITECTURE_ID} >>>>\") \n  IF (\"${EMGUCV_ARCH}\" STREQUAL \"win64\")\n    IF(\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"WindowsStore\" AND (CMAKE_SYSTEM_VERSION MATCHES 10.0))\n\t  SET(UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER \"/runtimes/win10-x64/native\")\n    ELSE()\n      SET(UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER \"/runtimes/win-x64/native\")\n    ENDIF()\n  ELSEIF(\"${EMGUCV_ARCH}\" STREQUAL \"win-arm64\")\n    IF(\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"WindowsStore\" AND (CMAKE_SYSTEM_VERSION MATCHES 10.0))\n\t  SET(UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER \"/runtimes/win10-arm64/native\")\n    ELSE()\n\t  SET(UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER \"/runtimes/win-arm64/native\")\n    ENDIF()\n  ELSEIF(\"${EMGUCV_ARCH}\" STREQUAL \"win-arm\")\n    IF(\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"WindowsStore\" AND (CMAKE_SYSTEM_VERSION MATCHES 10.0))\n\t  SET(UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER \"/runtimes/win10-arm/native\")\n    ELSE()\n\t  SET(UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER \"/runtimes/win-arm/native\")\n    ENDIF()\n  ELSE()\n    IF(\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"WindowsStore\" AND (CMAKE_SYSTEM_VERSION MATCHES 10.0))\n\t#IF(\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"WindowsStore\")\n    #  IF(CMAKE_SYSTEM_VERSION MATCHES 10.0)\n\t  SET(UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER \"/runtimes/win10-x86/native\")    \n\tELSE()\n\t  SET(UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER \"/runtimes/win-x86/native\")\n\tENDIF()\n  ENDIF()\n  #MESSAGE(STATUS \">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> CMAKE_SYSTEM_NAME: ${CMAKE_SYSTEM_NAME}\")\n  #MESSAGE(STATUS \">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> EMGUCV_ARCH: ${EMGUCV_ARCH}\")\n  #MESSAGE(STATUS \">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER: ${UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER}\")\nELSEIF(APPLE AND NOT IOS)\n  IF (\"${EMGUCV_ARCH}\" STREQUAL \"arm64\")\n    SET(UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER \"/runtimes/osx/native/arm64\")\n  ELSE()\n    SET(UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER \"/runtimes/osx/native/x64\")\n  ENDIF()\nELSEIF(\"${EMGUCV_ARCH}\" STREQUAL \"ubuntu_x64\")\n  SET(UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER \"/runtimes/ubuntu-x64/native\")\nELSEIF(\"${EMGUCV_ARCH}\" STREQUAL \"ubuntu_x86\")\n  SET(UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER \"/runtimes/ubuntu-x86/native\")\nELSEIF(\"${EMGUCV_ARCH}\" STREQUAL \"ubuntu_arm64\")\n  SET(UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER \"/runtimes/ubuntu-arm64/native\")\nELSEIF(\"${EMGUCV_ARCH}\" STREQUAL \"ubuntu_arm\")\n  SET(UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER \"/runtimes/ubuntu-arm/native\")\nELSEIF(\"${EMGUCV_ARCH}\" STREQUAL \"rhel_x64\")\n  SET(UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER \"/runtimes/rhel-x64/native\")\nELSEIF(\"${EMGUCV_ARCH}\" STREQUAL \"rhel_x86\")\n  SET(UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER \"/runtimes/rhel-x86/native\")\nELSEIF(\"${EMGUCV_ARCH}\" STREQUAL \"rhel_arm64\")\n  SET(UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER \"/runtimes/rhel-arm64/native\")\nELSEIF(\"${EMGUCV_ARCH}\" STREQUAL \"rhel_arm\")\n  SET(UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER \"/runtimes/rhel-arm/native\")\nELSEIF(\"${EMGUCV_ARCH}\" STREQUAL \"debian_arm\")\n  SET(UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER \"/runtimes/linux-arm/native\")\n  ELSEIF(\"${EMGUCV_ARCH}\" STREQUAL \"debian_arm64\")\n  SET(UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER \"/runtimes/linux-arm64/native\")\nELSEIF(\"${EMGUCV_ARCH}\" STREQUAL \"arm64\")\n  IF(IPHONEOS)\n    SET(UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER \"/iphoneos_arm64\")\n  ELSEIF(IPHONESIMULATOR)\n    SET(UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER \"/simulator_arm64\")\n  ELSE()\n    SET(UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER \"/arm64\")\n  ENDIF()\nELSEIF(\"${EMGUCV_ARCH}\" STREQUAL \"arm\")\n  IF(IPHONEOS)\n    SET(UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER \"/iphoneos_arm\")\n  ELSEIF(IPHONESIMULATOR)\n    SET(UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER \"/simulator_arm\")\n  ELSE()\n    SET(UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER \"/arm\")\n  ENDIF()\nELSE()\n  SET(UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER \"\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building Emgu.CV NuGet Package - CMake\nDESCRIPTION: This CMake script sets up the Emgu.CV.runtime.ubuntu.nuget project to generate a NuGet package on Ubuntu platforms (x64, x86, ARM64). It calls a custom macro to build the NuGet package from a C# project and .nuspec file, sets output and working directories, handles project dependencies, enables code-signing if available, and optionally organizes targets into solution folders. Requires variables for project paths, enabling/disabling code-signing and solution folders, and the code-signing tool to be predefined. Input is based on the C# .csproj and .nuspec files; output is a signed or unsigned NuGet .nupkg in the specified directory.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/platforms/nuget/Emgu.CV.runtime.ubuntu/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# --------------------------------------------------------\\n#  Copyright (C) 2004-2025 by EMGU Corporation. All rights reserved.\\n# --------------------------------------------------------\\n\\nIF(HAVE_UBUNTU_X64 OR HAVE_UBUNTU_X86 OR HAVE_UBUNTU_ARM64)\\n  PROJECT(Emgu.CV.runtime.ubuntu.nuget)\\n\\n  get_filename_component(NUGET_OUTPUT_DIR ${CMAKE_CURRENT_SOURCE_DIR} DIRECTORY)\\n\\n  BUILD_NUGET_PACKAGE(\\n    ${PROJECT_NAME} \\n\\t\"${EMGU_CV_SOURCE_DIR}/Emgu.CV/NetStandard/Emgu.CV.csproj\"  #csproj_file \\n\\t\"${CMAKE_CURRENT_SOURCE_DIR}/Package.nuspec\" #nuspec_file \\n\\t\"${NUGET_OUTPUT_DIR}\" #output_dir \\n\\t\"${CMAKE_CURRENT_SOURCE_DIR}\" #working_dir\\n\\t) \\n\\n  IF(TARGET Emgu.CV)\\n    ADD_DEPENDENCIES(${PROJECT_NAME} Emgu.CV)\\n  ENDIF()\\n  \\n  IF (EMGU_NUGET_SIGN_FOUND)\\n    EMGU_SIGN_NUGET(${PROJECT_NAME} \"${NUGET_OUTPUT_DIR}/${EMGUCV_UBUNTU_NUGET_ID}.${CPACK_PACKAGE_VERSION}.nupkg\")\\n  ENDIF()\\n\\n  if(ENABLE_SOLUTION_FOLDERS)\\n    set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER \"nuget\")\\n  endif() \\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Linking DepthAI Core Library in CMake\nDESCRIPTION: Conditionally links the `depthai-core` library to `${the_target}`. This linking occurs only if the `EMGU_CV_WITH_DEPTHAI` variable is true, enabling DepthAI support.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_113\n\nLANGUAGE: cmake\nCODE:\n```\nIF(EMGU_CV_WITH_DEPTHAI)\n  target_link_libraries(${the_target} depthai-core) \nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Managing TIFF Dependency in CMake\nDESCRIPTION: Configures the TIFF library dependency for `${the_target}`. If `WITH_TIFF` is true, it checks if `BUILD_TIFF` is also true. If so, it adds `libtiff` as a dependency and sets include paths based on the local 3rdparty directory. Otherwise (if `BUILD_TIFF` is false), it tries to find an installed TIFF package using `FIND_PACKAGE`. If not found, it falls back to using the local 3rdparty version. Finally, it adds the determined TIFF include directories. If `WITH_TIFF` is false, `TIFF_LIBRARY` is cleared.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_104\n\nLANGUAGE: cmake\nCODE:\n```\nIF (WITH_TIFF)\n  IF (BUILD_TIFF)\n    ADD_DEPENDENCIES(${the_target} libtiff)\n    SET(TIFF_INCLUDE_DIR \"${OPENCV_SUBFOLDER}/3rdparty/libtiff\")\n    SET(TIFF_CONFIG_INCLUDE_DIR \"${CMAKE_BINARY_DIR}/opencv/3rdparty/libtiff\")\n    SET(TIFF_LIBRARY \"libtiff\")\n  ELSE()\n    FIND_PACKAGE(TIFF)\n    IF(NOT TIFF_FOUND)\n      ADD_DEPENDENCIES(${the_target} libtiff)\n      SET(TIFF_INCLUDE_DIR \"${OPENCV_SUBFOLDER}/3rdparty/libtiff\")\n      SET(TIFF_CONFIG_INCLUDE_DIR \"${CMAKE_BINARY_DIR}/opencv/3rdparty/libtiff\")\n      SET(TIFF_LIBRARY \"libtiff\")\n    ENDIF()\n  ENDIF()\n  INCLUDE_DIRECTORIES(${TIFF_INCLUDE_DIR})\n  INCLUDE_DIRECTORIES(${TIFF_CONFIG_INCLUDE_DIR})\nELSE()\n  SET(TIFF_LIBRARY \"\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Linking Built JPEG Library in CMake\nDESCRIPTION: Conditionally links the `libjpeg-turbo` library to `${the_target}`. This linking occurs only if JPEG support is enabled (`WITH_JPEG` is true) AND libjpeg-turbo was built from source as part of this project (`BUILD_JPEG` is true).\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_121\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_JPEG AND BUILD_JPEG)\n  target_link_libraries(${the_target} libjpeg-turbo)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Linking OpenCL Library for Tesseract in CMake\nDESCRIPTION: Conditionally links the OpenCL library to `${the_target}`. This linking occurs only if both Tesseract support (`EMGU_CV_WITH_TESSERACT`) and Tesseract's OpenCL feature (`TESSERACT_OPENCL`) are enabled.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_124\n\nLANGUAGE: cmake\nCODE:\n```\nIF(EMGU_CV_WITH_TESSERACT AND TESSERACT_OPENCL)\n  #SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} \"${OPENCV_SUBFOLDER}/cmake/\")\n  #include(${OPENCV_SUBFOLDER}/cmake/OpenCVDetectOpenCL.cmake)\n  #MESSAGE(STATUS \"OPENCVL_LIBRARIES: ${OPENCV_LIBRARIES}\")\n  target_link_libraries(${the_target} OpenCL)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring File and Directory Installation with Emgu CV - CMake\nDESCRIPTION: Defines installation rules for Emgu CV using CMake INSTALL commands. Directories and specific files (such as version strings, Visual Studio solution files, XML classifiers from OpenCV) are conditionally installed based on platform and build flags. Uses FILES_MATCHING and PATTERN options for fine-grained inclusion/exclusion, such as omitting build artifacts (bin, obj, .git, etc.) and only including desired solution/examples files. Intended for integration in a larger CMake build, it expects platform variables (e.g., HAVE_WINSTORE_10_X64), root paths (e.g., CMAKE_CURRENT_SOURCE_DIR), and optionally additional dependencies (e.g., OpenCV haarcascades). Outputs the Emgu CV binary, source, and example files to their destination components for final packaging or install. Limitations include reliance on CMake variable configuration and correct environment setups.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_93\n\nLANGUAGE: CMake\nCODE:\n```\n#    )\n\t\n  # ----------------------------------------------------------------------------\n  #  Include the version_str.inc files in the package\n  # ----------------------------------------------------------------------------\n  INSTALL(\n    DIRECTORY\n    ${CMAKE_CURRENT_SOURCE_DIR}/libs\n    DESTINATION .\n    COMPONENT emgucv_binary\n    FILES_MATCHING \n    PATTERN \"*version_string.inc\"\n    PATTERN \".git\" EXCLUDE\n    PATTERN \"obj\" EXCLUDE\n    PATTERN \"CMake*\" EXCLUDE\n    )\n  \n  #WINDOWS STORE EXAMPLE\n  IF(HAVE_WINSTORE_10_X86 OR HAVE_WINSTORE_10_X64 OR HAVE_WINSTORE_10_ARM)  \n    INSTALL(\n      DIRECTORY\n      ${CMAKE_CURRENT_SOURCE_DIR}/Solution\n      DESTINATION .\n      COMPONENT emgucv_example_source\n      FILES_MATCHING \n      PATTERN \"Emgu.CV.Example.Windows.UWP.sln\"\n\t  PATTERN \"Windows.UWP/packages/repositories.config\"\n      PATTERN \".git\" EXCLUDE\n      PATTERN \"bin\" EXCLUDE\n      PATTERN \"Android\" EXCLUDE\n      PATTERN \"iOS\" EXCLUDE\n      PATTERN \"Windows.Phone\" EXCLUDE\n      PATTERN \"Windows.Desktop\" EXCLUDE\n      PATTERN \"CrossPlatform\" EXCLUDE\n\t  PATTERN \"Mac\" EXCLUDE\n      )\n  ENDIF()\n  \n  #WIN32 and not NETFX_CORE solution files\n  IF (HAVE_WINDESKTOP_X86 OR HAVE_WINDESKTOP_X64 OR HAVE_WINDESKTOP_ARM64)\n    INSTALL(\n      DIRECTORY\n      ${CMAKE_CURRENT_SOURCE_DIR}/Solution\n      DESTINATION .\n      COMPONENT emgucv_source\n      FILES_MATCHING \n      PATTERN \"Emgu.CV.sln\"\n      PATTERN \"Emgu.CV.DebuggerVisualizers.sln\"\n      PATTERN \".git\" EXCLUDE\n      PATTERN \"bin\" EXCLUDE\n      PATTERN \"Android\" EXCLUDE\n      PATTERN \"iOS\" EXCLUDE\n      PATTERN \"CrossPlatform\" EXCLUDE\n\t  PATTERN \"Mac\" EXCLUDE\n\t  PATTERN \"Windows.UWP\" EXCLUDE\n      )\n    INSTALL(\n      DIRECTORY\n      ${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.WPF\n      DESTINATION .\n      COMPONENT emgucv_example_source\n      FILES_MATCHING \n      PATTERN \"*.cs\"\n      PATTERN \".git\" EXCLUDE\n      )\n    INSTALL(\n      DIRECTORY\n      ${CMAKE_CURRENT_SOURCE_DIR}/Solution\n      DESTINATION .\n      COMPONENT emgucv_example_source\n      FILES_MATCHING \n      PATTERN \"Emgu.CV.Example.sln\"\n      PATTERN \".git\" EXCLUDE\n      PATTERN \"bin\" EXCLUDE\n      PATTERN \"Android\" EXCLUDE\n      PATTERN \"iOS\" EXCLUDE\n      PATTERN \"Windows.UWP\" EXCLUDE\n      PATTERN \"CrossPlatform\" EXCLUDE\n\t  PATTERN \"Mac\" EXCLUDE\n      )\n    \n    # ----------------------------------------------------------------------------\n    #  The example files\n    # ----------------------------------------------------------------------------\n    # INSTALL(\n      # DIRECTORY\n      # ${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.Example\n      # DESTINATION .\n      # COMPONENT emgucv_example_source\n      # FILES_MATCHING \n      # PATTERN \"*.cs\"\n      # PATTERN \"*.csproj\"\n      # PATTERN \"*.resx\"\n      # PATTERN \"*.h\"\n      # PATTERN \"*.cpp\"\n      # PATTERN \"*.resX\"\n      # PATTERN \"*.ico\"\n      # PATTERN \"*.rc\"\n      # PATTERN \"CPlusPlus/*.vcproj\"\n      # PATTERN \"CPlusPlus/*.vcxproj\"\n      # PATTERN \"*.vb\"\n      # PATTERN \"*.vbproj\"\n      # PATTERN \"*.aspx\" \n      # PATTERN \"*.dll\"\n      # PATTERN \"*.txt\"\n      # PATTERN \"*.xml\"\n      # PATTERN \"*.xaml\"\n      # PATTERN \"*.jpg\"\n      # PATTERN \"*.png\"\n\t  # PATTERN \"*.svg\"\n      # PATTERN \"*.settings\"\n      # PATTERN \"*.config\"\n      # PATTERN \"tessdata/*\"\n      # PATTERN \".git\" EXCLUDE\n      # PATTERN \"obj\" EXCLUDE\n      # PATTERN \"CMake*\" EXCLUDE\n      # PATTERN \"Release\" EXCLUDE\n      # PATTERN \"Debug\" EXCLUDE\n      # PATTERN \"RelWithDebInfo\" EXCLUDE\n      # PATTERN \"*.dir\" EXCLUDE\n      # PATTERN \"Android\" EXCLUDE\n      # PATTERN \"iOS\" EXCLUDE\n      # PATTERN \"Mac\" EXCLUDE\n      # PATTERN \"WindowsStore\" EXCLUDE\n      # PATTERN \"WindowsPhoneApp\" EXCLUDE\n      # PATTERN \"WindowsStoreCameraApp\" EXCLUDE\n      # )\n  ENDIF()\n  \n  INSTALL(\n    FILES\n    \"${OPENCV_SUBFOLDER}/data/haarcascades/haarcascade_frontalface_default.xml\"\n    \"${OPENCV_SUBFOLDER}/data/haarcascades/haarcascade_eye.xml\"\n    DESTINATION opencv/data/haarcascades\n    COMPONENT emgucv_example_source\n    )\n  INSTALL(\n    FILES\n    \"${OPENCV_CONTRIB_SUBFOLDER}/modules/text/samples/trained_classifierNM1.xml\"\n    \"${OPENCV_CONTRIB_SUBFOLDER}/modules/text/samples/trained_classifierNM2.xml\"\n    \"${OPENCV_CONTRIB_SUBFOLDER}/modules/text/samples/trained_classifier_erGrouping.xml\"\n    DESTINATION opencv_contrib/modules/text/samples/\n    COMPONENT emgucv_example_source\n    ) \n```\n\n----------------------------------------\n\nTITLE: Iterating Through Properties and Extracting Variables in CMake\nDESCRIPTION: Calculates the number of properties defined in `PROPERTY_NAMES`. It then initiates a `FOREACH` loop to iterate from 0 to the last property index. Inside the loop, it uses `LIST(GET ...)` to extract the property name, C++ type, marshalling type, C# type, documentation string, and C# function name for the current property index (`ival`) from corresponding CMake lists. The documentation string is stripped of leading/trailing whitespace.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n  LIST(LENGTH PROPERTY_NAMES PROPERTY_COUNT)\n  math(EXPR idx \"${PROPERTY_COUNT} - 1\")\n  FOREACH(ival RANGE ${idx})\n    #MESSAGE(STATUS \"-------------------- PROPERTY_NAMES: ${PROPERTY_NAMES}\")\n    #MESSAGE(STATUS \"-------------------- PROPERTY_TYPES: ${PROPERTY_TYPES}\")\n    #MESSAGE(STATUS \"-------------------- val: ${ival}\")\n    LIST(GET PROPERTY_NAMES ${ival} PROPERTY_NAME)\n    \n    #STRING(SUBSTRING \"${PROPERTY_NAME}\" 1 -1 PROPERTY_NAME_PART2)\n    #STRING(SUBSTRING \"${PROPERTY_NAME}\" 0 1 PROPERTY_NAME_PART1)\n    #STRING(TOUPPER \"${PROPERTY_NAME_PART1}\" PROPERTY_NAME_PART1)\n    #SET(CS_PROPERTY_NAME \"${PROPERTY_NAME_PART1}${PROPERTY_NAME_PART2}\")\n    \n    LIST(GET PROPERTY_TYPES ${ival} PROPERTY_TYPE)\n    LIST(GET MARSHAL_TYPES ${ival} MARSHAL_TYPE)\n    LIST(GET CS_PROPERTY_TYPES ${ival} CS_PROPERTY_TYPE)\n    LIST(GET CS_PROPERTY_DOCS ${ival} CS_DOCUMENTATION )\n    STRING(STRIP \"${CS_DOCUMENTATION}\" CS_DOCUMENTATION )\n    \n    LIST(GET CS_FUNCTION_NAMES ${ival} CS_FUNCTION_NAME)\n```\n\n----------------------------------------\n\nTITLE: Building and Running MacCatalyst MAUI App - Shell\nDESCRIPTION: Builds and runs the MAUI application on macOS targeting net9.0-maccatalyst. This command compiles the project and launches it directly, assuming all workloads and packages have been restored. Must be executed on a suitable macOS system with .NET 9.0 and MacCatalyst support installed. Output is the built and launched application window.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Example/MAUI/BuildInfo/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n> dotnet build -t:Run -f net9.0-maccatalyst\n```\n\n----------------------------------------\n\nTITLE: Finalizing C# Module List and Handling FFMPEG Library in CMake\nDESCRIPTION: This snippet finalizes the C# `ENTRYPOINT_MODULES_STRING` by wrapping the accumulated module library constants into a `List<String>` named `OpenCVModuleList`. It conditionally includes `OpencvFFMpegLibrary` based on the target platform and adds `ExternLibrary`. It then appends the output name of the `cvextern` target to the `OPENCV_LIBRARY_OUTPUT_NAMES` list. Additionally, if building on Windows (`WIN32`) with FFMPEG support (`WITH_FFMPEG`), it calculates the FFMPEG library name (including version and architecture suffix) and appends it to `OPENCV_LIBRARY_OUTPUT_NAMES`.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_88\n\nLANGUAGE: cmake\nCODE:\n```\nSET(ENTRYPOINT_MODULES_STRING \"public static List<String> OpenCVModuleList = new List<String>\\n\\t  {\\n#if !(__ANDROID__ || __IOS__ || UNITY_IPHONE  || UNITY_WEBGL || UNITY_ANDROID || NETFX_CORE)\\n        OpencvFFMpegLibrary,\\n#endif        \\n        ${ENTRYPOINT_MODULES_STRING}\\n        ExternLibrary\\n      };\\n\")\n\nGET_TARGET_PROPERTY(CVEXTERN_OUTPUT_NAME cvextern OUTPUT_NAME)\nLIST(APPEND OPENCV_LIBRARY_OUTPUT_NAMES ${CVEXTERN_OUTPUT_NAME})\n\nif(WIN32 AND WITH_FFMPEG)\n  if(TARGET_ARCH_64)\n    set(FFMPEG_SUFFIX _64)\n  endif()\n  #STRING(LENGTH \"${OPENCV_CORE_OUTPUT_NAME}\" temp)\n  #MATH(EXPR temp \"${temp}-3\")\n  #STRING(SUBSTRING ${OPENCV_CORE_OUTPUT_NAME} ${temp} -1 OPENCV_DLLVERSION)\n  set(OPENCV_FFMPEG_OUTPUT_NAME \"opencv_videoio_ffmpeg${OPENCV_VERSION_MAJOR}${OPENCV_VERSION_MINOR}${OPENCV_VERSION_PATCH}${FFMPEG_SUFFIX}\")\n  #set(OPENCV_FFMPEG_OUTPUT_NAME \"opencv_ffmpeg${FFMPEG_SUFFIX}\")\n  MESSAGE(STATUS \"OPENCV_FFMPEG_OUTPUT_NAME: ${OPENCV_FFMPEG_OUTPUT_NAME}\")\n  LIST(APPEND OPENCV_LIBRARY_OUTPUT_NAMES ${OPENCV_FFMPEG_OUTPUT_NAME})\nendif()\n```\n\n----------------------------------------\n\nTITLE: DepthAI Feature Toggle - CMake\nDESCRIPTION: Unconditionally disables the EMGU_CV_WITH_DEPTHAI feature with a cache BOOL variable, indicating that support for OAK-1 and OAK-D (DepthAI) boards is not built by default. This cache variable can be overridden by the user or by subsequent logic.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nSET(EMGU_CV_WITH_DEPTHAI OFF CACHE BOOL \"Build support for OAK-1 and OAK-D\")\n```\n\n----------------------------------------\n\nTITLE: Conditionally Determining MSVCRT Version for Windows Desktop Builds in CMake\nDESCRIPTION: This CMake block executes if any Windows Desktop platform (x64, x86, ARM64) is enabled. If using MSVC, it extracts the C++ compiler version, parses it into major, minor, patch, and build components, and sets the `EMGU_WINDOWS_MSVCRT_NUGET_VERSION` variable accordingly (omitting the build number if it's zero). It also logs the versions using `MESSAGE(STATUS ...)`. Finally, it sets the title for the Emgu.CV.UI NuGet package.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_64\n\nLANGUAGE: cmake\nCODE:\n```\nIF (HAVE_WINDESKTOP_X64 OR HAVE_WINDESKTOP_X86 OR HAVE_WINDESKTOP_ARM64)\n  #SET(EMGU_WINDOWS_MSVCRT_VERSION ${MSVC_TOOLSET_VERSION})\n  IF(MSVC)\n    SET(EMGU_WINDOWS_MSVCRT_VERSION ${CMAKE_CXX_COMPILER_VERSION})\n\tstring(REPLACE \".\" \";\" EMGU_WINDOWS_MSVCRT_VERSION_LIST ${EMGU_WINDOWS_MSVCRT_VERSION})\n\tlist(GET EMGU_WINDOWS_MSVCRT_VERSION_LIST 0 EMGU_WINDOWS_MSVCRT_VERSION_MAJOR)\n\tlist(GET EMGU_WINDOWS_MSVCRT_VERSION_LIST 1 EMGU_WINDOWS_MSVCRT_VERSION_MINOR)\n\tlist(GET EMGU_WINDOWS_MSVCRT_VERSION_LIST 2 EMGU_WINDOWS_MSVCRT_VERSION_PATCH)\n\tlist(GET EMGU_WINDOWS_MSVCRT_VERSION_LIST 3 EMGU_WINDOWS_MSVCRT_VERSION_BUILD)\n\tMESSAGE(STATUS \"MSVCRT VERSION: ${EMGU_WINDOWS_MSVCRT_VERSION_MAJOR}.${EMGU_WINDOWS_MSVCRT_VERSION_MINOR}.${EMGU_WINDOWS_MSVCRT_VERSION_PATCH}.${EMGU_WINDOWS_MSVCRT_VERSION_BUILD}\")\n    SET(EMGU_WINDOWS_MSVCRT_NUGET_VERSION ${EMGU_WINDOWS_MSVCRT_VERSION})\n\tIF (\"${EMGU_WINDOWS_MSVCRT_VERSION_BUILD}\" STREQUAL \"0\")\n\t  SET(EMGU_WINDOWS_MSVCRT_NUGET_VERSION \"${EMGU_WINDOWS_MSVCRT_VERSION_MAJOR}.${EMGU_WINDOWS_MSVCRT_VERSION_MINOR}.${EMGU_WINDOWS_MSVCRT_VERSION_PATCH}\")\n\tENDIF()\n\tMESSAGE(STATUS \"MSVCRT NUGET VERSION: ${EMGU_WINDOWS_MSVCRT_NUGET_VERSION}\")\n  ENDIF()\n  \n  SET(EMGUCV_UI_NUGET_TITLE \"Windows UI components for Emgu CV\")\n# [...] Commented out UI package definitions\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Generating Property Wrappers for OpenCV dnn Module - CMake\nDESCRIPTION: Here, the script checks for OpenCV's dnn module and applies CREATE_OCV_CLASS_PROPERTY to generate wrappers for neural network properties including layers, network preferences, detection and recognition models. Each macro call provides property mappings and includes dnn_c.h for P/Invoke bridging to OpenCV C++ code. This enables manipulation and querying of deep learning related settings from Emgu.CV.Dnn classes in C#.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_66\n\nLANGUAGE: CMake\nCODE:\n```\n############################### dnn code gen START ##############################\\nIF (NOT HAVE_opencv_dnn)\\n  SET(HAVE_opencv_dnn FALSE)\\nENDIF()\\n  CREATE_OCV_CLASS_PROPERTY( \\n    \\\"dnn/net_property\\\" \\n    \\\"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV/Dnn/Net.g.cs\\\"\\n    \\\"cv::dnn::Net\\\" \\n    \\\"Net\\\" \\n    \\\"PreferableBackend;PreferableTarget;enableFusion;enableWinograd;empty;HalideScheduler\\\" \\n    \\\"int;int;bool;bool;bool;cv::String\\\" \\n    \\\"propW;propW;act1;act1;val;propW\\\"\\n    \\\"PreferableBackend;PreferableTarget;EnableFusion;EnableWinograd;Empty;HalideScheduler\\\" \\n    \\\"Backend;Target;bool;bool;bool;String\\\"\\n    \\\"Ask network to use specific computation backend where it supported.;\\n\\tAsk network to make computations on specific target device.;\\n\\tEnables or disables layer fusion in the network.;\\n    Enables or disables the Winograd compute branch. The Winograd compute branch can speed up 3x3 Convolution at a small loss of accuracy.;\\n\\tReturns true if there are no layers in the network.;\\n\\tSchedule layers that support Halide backend. Then compile them for specific target. For layers that not represented in scheduling file or if no manual scheduling used at all, automatic scheduling will be applied.\\\"\\n    \\\"Emgu.CV.Dnn\\\"\\n    \\\"DnnInvoke\\\"\\n    \\\"Net\\\"\\n\\t\\\"\\\"\\n\\t\\\"#include \\\\\\\"dnn_c.h\\\\\\\"\\\"\\n\\t\\\"\\\"\\n\\t\\\"\\\"\\n\\t${HAVE_opencv_dnn})\\n  CREATE_OCV_CLASS_PROPERTY( \\n    \\\"dnn/layer_property\\\" \\n    \\\"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV/Dnn/Layer.g.cs\\\"\\n    \\\"cv::dnn::Layer\\\" \\n    \\\"Layer\\\" \\n    \\\"name;type;preferableTarget\\\" \\n    \\\"cv::String;cv::String;int\\\" \\n    \\\"elementR;elementR;elementR\\\"\\n    \\\"Name;Type;PreferableTarget\\\" \\n    \\\"String;String;Target\\\"\\n    \\\"The name of the layer;\\n\\tThe layer type;\\n\\tThe preferable target\\\"\\n    \\\"Emgu.CV.Dnn\\\"\\n    \\\"DnnInvoke\\\"\\n    \\\"Layer\\\"\\n\\t\\\"\\\"\\n\\t\\\"#include \\\\\\\"dnn_c.h\\\\\\\"\\\"\\n\\t\\\"\\\"\\n\\t\\\"\\\"\\n\\t${HAVE_opencv_dnn})\\n  CREATE_OCV_CLASS_PROPERTY( \\n    \\\"dnn/TextDetectionModel_EAST_property\\\" \\n    \\\"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV/Dnn/TextDetectionModel_EAST.g.cs\\\"\\n    \\\"cv::dnn::TextDetectionModel_EAST\\\" \\n    \\\"TextDetectionModel_EAST\\\" \\n    \\\"ConfidenceThreshold;NMSThreshold\\\" \\n    \\\"float;float\\\" \\n    \\\"prop;prop\\\"\\n    \\\"ConfidenceThreshold;NMSThreshold\\\" \\n    \\\"float;float\\\"\\n    \\\"Confidence threshold;\\n    Non-maximum suppression threshold\\\"\\n    \\\"Emgu.CV.Dnn\\\"\\n    \\\"DnnInvoke\\\"\\n    \\\"TextDetectionModel_EAST\\\"\\n\\t\\\"\\\"\\n\\t\\\"#include \\\\\\\"dnn_c.h\\\\\\\"\\\"\\n\\t\\\"\\\"\\n\\t\\\"\\\"\\n\\t${HAVE_opencv_dnn})\\n  CREATE_OCV_CLASS_PROPERTY( \\n    \\\"dnn/TextDetectionModel_DB_property\\\" \\n    \\\"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV/Dnn/TextDetectionModel_DB.g.cs\\\"\\n    \\\"cv::dnn::TextDetectionModel_DB\\\" \\n    \\\"TextDetectionModel_DB\\\" \\n    \\\"BinaryThreshold;PolygonThreshold;UnclipRatio;MaxCandidates\\\" \\n    \\\"float;float;double;int\\\" \\n    \\\"prop;prop;prop;prop\\\"\\n    \\\"BinaryThreshold;PolygonThreshold;UnclipRatio;MaxCandidates\\\" \\n    \\\"float;float;double;int\\\"\\n    \\\"Binary threshold;\\n    Polygon threshold;\\n    Unclip ratio;\\n    Max candidates\\\"\\n    \\\"Emgu.CV.Dnn\\\"\\n    \\\"DnnInvoke\\\"\\n    \\\"TextDetectionModel_DB\\\"\\n\\t\\\"\\\"\\n\\t\\\"#include \\\\\\\"dnn_c.h\\\\\\\"\\\"\\n\\t\\\"\\\"\\n\\t\\\"\\\"\\n\\t${HAVE_opencv_dnn})\\n  CREATE_OCV_CLASS_PROPERTY( \\n    \\\"dnn/TextRecognitionModel_property\\\" \\n    \\\"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV/Dnn/TextRecognitionModel.g.cs\\\"\\n    \\\"cv::dnn::TextRecognitionModel\\\" \\n    \\\"TextRecognitionModel\\\" \\n    \\\"DecodeType\\\" \\n    \\\"cv::String\\\" \\n    \\\"prop\\\"\\n    \\\"DecodeType\\\" \\n    \\\"String\\\"\\n    \\\"Decode type\\\"\\n    \\\"Emgu.CV.Dnn\\\"\\n    \\\"DnnInvoke\\\"\\n    \\\"TextRecognitionModel\\\"\\n\\t\\\"\\\"\\n\\t\\\"#include \\\\\\\"dnn_c.h\\\\\\\"\\\"\\n\\t\\\"\\\"\\n\\t\\\"\\\"\\n\\t${HAVE_opencv_dnn})\\n  CREATE_OCV_CLASS_PROPERTY( \\n    \\\"dnn/DetectionModel_property\\\" \\n    \\\"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV/Dnn/DetectionModel.g.cs\\\"\\n    \\\"cv::dnn::DetectionModel\\\" \\n    \\\"DetectionModel\\\" \\n    \\\"NmsAcrossClasses\\\" \\n    \\\"bool\\\" \\n    \\\"prop\\\"\\n    \\\"NmsAcrossClasses\\\" \\n    \\\"bool\\\"\\n    \\\"It true, will perform non-maximum suppression across classes\\\"\\n    \\\"Emgu.CV.Dnn\\\"\\n    \\\"DnnInvoke\\\"\\n    \\\"DetectionModel\\\"\\n\\t\\\"\\\"\\n\\t\\\"#include \\\\\\\"dnn_c.h\\\\\\\"\\\"\\n\\t\\\"\\\"\\n\\t\\\"\\\"\\n\\t${HAVE_opencv_dnn})\\n############################### dnn code gen END ##############################\n```\n\n----------------------------------------\n\nTITLE: Linking Built TIFF Library in CMake\nDESCRIPTION: Conditionally links the `libtiff` library to `${the_target}`. This linking occurs only if TIFF support is enabled (`WITH_TIFF` is true) AND libtiff was built from source as part of this project (`BUILD_TIFF` is true).\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_120\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_TIFF AND BUILD_TIFF)\n  target_link_libraries(${the_target} libtiff)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Listing Connected iOS Devices with xcrun - Shell\nDESCRIPTION: Lists all connected iOS devices and available simulators using the xcrun tool, which is part of Xcode's command-line utilities. Essential for determining the UUID needed to deploy and debug on a physical iOS device. Output provides a list of device names and identifiers.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Example/MAUI/BuildInfo/README.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n> xcrun xctrace list devices\n```\n\n----------------------------------------\n\nTITLE: Disabling ICC /Qipo Optimization Flags for Windows Release Builds - CMake\nDESCRIPTION: This snippet conditionally removes the /Qipo (Interprocedural Optimization) compiler flags from C and C++ release build settings if building on Windows with the Intel C++ Compiler. It ensures compatibility or resolve build issues possibly related to /Qipo. It requires WIN32 and CV_ICC to be set.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_77\n\nLANGUAGE: CMake\nCODE:\n```\nIF(WIN32 AND CV_ICC)\n  STRING(REGEX REPLACE \"/Qipo\" \"\" CMAKE_C_FLAGS_RELEASE ${CMAKE_C_FLAGS_RELEASE})\n  STRING(REGEX REPLACE \"/Qipo\" \"\" CMAKE_CXX_FLAGS_RELEASE ${CMAKE_CXX_FLAGS_RELEASE})\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Finding and Appending ICC Runtime DLLs in CMake\nDESCRIPTION: Locates the Intel C++ Compiler runtime directory using the `ProgramFiles(x86)` environment variable. It replaces backslashes with forward slashes in the path, uses `FILE(GLOB)` to find specific runtime DLLs (`libmmd.dll`, `svml_dispmd.dll`), and appends their paths to `CVEXTERN_DEPENDENCY_DLLS`. A status message logs the found DLL names.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_95\n\nLANGUAGE: cmake\nCODE:\n```\n\tSET(PROGRAMFILES_X86_ENV \"ProgramFiles(x86)\")\n    SET(ICC_RUNTIME_DIRS \"$ENV{${PROGRAMFILES_X86_ENV}}/Common Files/Intel/Shared Libraries/redist/intel64_win/compiler\")\n    STRING(REGEX REPLACE \"\\\\\\\\\" \"/\" ICC_RUNTIME_DIRS ${ICC_RUNTIME_DIRS})\n    FILE(GLOB ICC_RUNTIME_DLL_NAMES \"${ICC_RUNTIME_DIRS}/libmmd.dll\" \"${ICC_RUNTIME_DIRS}/svml_dispmd.dll\")\n    MESSAGE(STATUS \"^^^^^^^^^^^^^^  ICC_RUNTIME_DLL_NAMES: ${ICC_RUNTIME_DLL_NAMES}\")\n    LIST(APPEND CVEXTERN_DEPENDENCY_DLLS ${ICC_RUNTIME_DLL_NAMES})\n```\n\n----------------------------------------\n\nTITLE: Creating a Convenience Constructor Using Point and Size Structures in C#\nDESCRIPTION: This code snippet extends the Rectangle partial class with an additional constructor that accepts Point and Size structures. Internally, it delegates initialization to the existing int-based constructor, extracting values from the Point and Size objects. Dependencies include compatible Point and Size definitions in scope; the approach eases object initialization and improves code clarity where grouped parameters are preferred.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Runtime/Maui/Android/Additions/AboutAdditions.txt#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic partial class Rectangle\n{\n    public Rectangle (Point location, Size size) :\n        this (location.X, location.Y, size.Width, size.Height)\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Files and Package Assets using CMake for Emgu CV - CMake\nDESCRIPTION: These CMake snippets automate the configuration and packaging steps for the Emgu CV .NET libraries and related modules. Using CONFIGURE_FILE commands, it copies and customizes template props, nuspec, targets, and README files for Windows, Linux, and other platforms, and optionally includes signing steps if signing keys are found. Key dependencies include the existence of specific files and environment variables (e.g., EMGU_SIGN_FOUND, WIN32). Inputs are platform and build type definitions; outputs are customized configuration files placed in respective packaging directories. Limitations include the assumption of specific directory structures and pre-existing template files.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_85\n\nLANGUAGE: cmake\nCODE:\n```\n#  ENDIF()\n  \n  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/Emgu.CV.UI.Directory.Build.props.in ${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.WindowsUI/Emgu.CV.WindowsUI/Directory.Build.props)\n  IF(EMGU_SIGN_FOUND AND WIN32)\n    CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/SignBinary.Targets.in ${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.WindowsUI/Emgu.CV.WindowsUI/SignBinary.Targets)\n  ENDIF()\n  IF(EMGU_NUGET_SIGN_FOUND AND WIN32)\n    CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/SignPkg.Targets.in ${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.WindowsUI/Emgu.CV.WindowsUI/SignPkg.Targets)\n  ENDIF()\n  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/Emgu.CV.UI.Package.README.md.in ${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.WindowsUI/Emgu.CV.WindowsUI/docs/README.md)\nENDIF()\n```\n\nLANGUAGE: cmake\nCODE:\n```\nIF(HAVE_LINUX_ARM)\n  SET(EMGUCV_DEBIAN_ARM_NUGET_TITLE \"Emgu CV Native ARM Runtime for Debian (including Raspberry Pi OS)\")\n  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/UseRidGraph.props.in ${CMAKE_CURRENT_SOURCE_DIR}/platforms/nuget/Emgu.CV.runtime.debian-arm/Emgu.CV.runtime.debian-arm.props)\n  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/Emgu.CV.runtime.debian-arm.Package.nuspec.in ${CMAKE_CURRENT_SOURCE_DIR}/platforms/nuget/Emgu.CV.runtime.debian-arm/Package.nuspec)\nENDIF()\n```\n\nLANGUAGE: cmake\nCODE:\n```\nIF(HAVE_LINUX_ARM64)\n  SET(EMGUCV_DEBIAN_ARM64_NUGET_TITLE \"Emgu CV Native ARM64 Runtime for Debian (including Raspberry Pi OS)\")\n  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/UseRidGraph.props.in ${CMAKE_CURRENT_SOURCE_DIR}/platforms/nuget/Emgu.CV.runtime.debian-arm64/Emgu.CV.runtime.debian-arm64.props)\n  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/Emgu.CV.runtime.debian-arm64.Package.nuspec.in ${CMAKE_CURRENT_SOURCE_DIR}/platforms/nuget/Emgu.CV.runtime.debian-arm64/Package.nuspec)\nENDIF()\n```\n\nLANGUAGE: cmake\nCODE:\n```\nIF(HAVE_UBUNTU_X86 OR HAVE_UBUNTU_X64 OR HAVE_UBUNTU_ARM64)\n  SET(EMGUCV_UBUNTU_NUGET_TITLE \"Emgu CV Native Runtime for Ubuntu\")\n  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/UseRidGraph.props.in ${CMAKE_CURRENT_SOURCE_DIR}/platforms/nuget/Emgu.CV.runtime.ubuntu/Emgu.CV.runtime.ubuntu.props)\n  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/Emgu.CV.runtime.ubuntu.Package.nuspec.in ${CMAKE_CURRENT_SOURCE_DIR}/platforms/nuget/Emgu.CV.runtime.ubuntu/Package.nuspec)\n  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/Emgu.CV.runtime.ubuntu.Package.README.md.in ${CMAKE_CURRENT_SOURCE_DIR}/platforms/nuget/Emgu.CV.runtime.ubuntu/README.md)\nENDIF()\n```\n\nLANGUAGE: cmake\nCODE:\n```\nIF(HAVE_RHEL_X86 OR HAVE_RHEL_X64 OR HAVE_RHEL_ARM64)\n  SET(EMGUCV_RHEL_NUGET_TITLE \"Emgu CV Native Runtime for RHEL\")\n  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/Emgu.CV.runtime.rhel.Package.nuspec.in ${CMAKE_CURRENT_SOURCE_DIR}/platforms/nuget/Emgu.CV.runtime.rhel/Package.nuspec)\n  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/UseRidGraph.props.in ${CMAKE_CURRENT_SOURCE_DIR}/platforms/nuget/Emgu.CV.runtime.rhel/Emgu.CV.runtime.rhel.props)\n  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/Emgu.CV.runtime.rhel.Package.README.md.in ${CMAKE_CURRENT_SOURCE_DIR}/platforms/nuget/Emgu.CV.runtime.rhel/README.md)\nENDIF()\n```\n\nLANGUAGE: cmake\nCODE:\n```\nSET(EMGUCV_NUGET_TITLE \"Emgu CV\")\nSET(EMGUCV_NUGET_SUMMARY \"Emgu CV is a cross platform .Net wrapper to the OpenCV image processing library.\")\n\nIF (\"${LICENSE_TYPE}\" STREQUAL \"Commercial\")\n\tSET(EMGUCV_NUGET_TITLE \"${EMGUCV_NUGET_TITLE} Commercial Release\")\n\tSET(EMGUCV_NUGET_SUMMARY \"${EMGUCV_NUGET_SUMMARY} This is the commercial release.\")\n\tIF(HAVE_ANDROID)\n      SET(EMGUCV_MAUI_ANDROID_NUGET_TITLE \"${EMGUCV_MAUI_ANDROID_NUGET_TITLE} Commercial Release for MAUI\")\t  \n\tENDIF()\t\n\tIF(HAVE_WINSTORE_10)\n\t  SET(EMGUCV_UWP_NUGET_TITLE \"${EMGUCV_UWP_NUGET_TITLE} Commercial Release\")\n\tENDIF()\nENDIF()\n```\n\nLANGUAGE: cmake\nCODE:\n```\n#generate nuget config file for Emgu.CV \nCONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/Emgu.CV.Directory.Build.props.in ${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV/NetStandard/Directory.Build.props)\nIF(EMGU_SIGN_FOUND AND WIN32)\n  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/SignBinary.Targets.in ${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV/NetStandard/SignBinary.Targets)\nENDIF()\nIF(EMGU_NUGET_SIGN_FOUND AND WIN32)\n  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/SignPkg.Targets.in ${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV/NetStandard/SignPkg.Targets)\nENDIF()\nCONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/Emgu.CV.Package.README.md.in ${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV/NetStandard/docs/README.md)\n```\n\nLANGUAGE: cmake\nCODE:\n```\n#generate nuget config file for Emgu.CV.Models\nCONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/Emgu.CV.Models.Directory.Build.props.in ${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.Models/NetStandard/Directory.Build.props)\nIF(EMGU_SIGN_FOUND AND WIN32)\n  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/SignBinary.Targets.in ${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.Models/NetStandard/SignBinary.Targets)\nENDIF()\nIF(EMGU_NUGET_SIGN_FOUND AND WIN32)\n  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/SignPkg.Targets.in ${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.Models/NetStandard/SignPkg.Targets)\nENDIF()\nCONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/Emgu.CV.Models.Package.README.md.in ${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.Models/NetStandard/docs/README.md)\n\n```\n\nLANGUAGE: cmake\nCODE:\n```\n# Sign the nuget package\n#SET(EMGUCV_BITMAP_POST_PROCESS_NUGET \"\")\n#IF(EMGU_NUGET_SIGN_FOUND AND WIN32)\n#  file(TO_NATIVE_PATH ${EMGU_NUGET_SIGN_EXECUTABLE} EMGU_NUGET_SIGN_EXECUTABLE_NATIVE_PATH)\n#  file(TO_NATIVE_PATH ${NUGET_EXECUTABLE} NUGET_EXECUTABLE_NATIVE_PATH)\n#  SET(EMGUCV_BITMAP_POST_PROCESS_NUGET \"${EMGUCV_BITMAP_POST_PROCESS_NUGET}\n#  <Target Name=\\\"PostProcessNuget\\\" AfterTargets=\\\"Pack\\\">\n#    <Message Text=\\\"Signing $(PackageOutputPath)\\\\$(PackageId).$(PackageVersion).nupkg\\\" Importance=\\\"high\\\" />\n#    <MakeDir Directories=\\\"$(PackageOutputPath)\\\\signed\\\"/>\n#    <Exec Command='${EMGU_NUGET_SIGN_EXECUTABLE_NATIVE_PATH} \\\"$(PackageOutputPath)\\\\$(PackageId).$(PackageVersion).nupkg\\\" \\\"$(PackageOutputPath)\\\\signed\\\" \\\"${NUGET_EXECUTABLE_NATIVE_PATH}\\\"' WorkingDirectory=\\\"$(PackageOutputPath)\\\" />\n#  </Target>\n#\\t\")\n#ENDIF()\nCONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/Emgu.CV.Bitmap.Directory.Build.props.in ${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.Bitmap/Directory.Build.props)\nIF(EMGU_SIGN_FOUND AND WIN32)\n  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/SignBinary.Targets.in ${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.Bitmap/SignBinary.Targets)\nENDIF()\nIF(EMGU_NUGET_SIGN_FOUND AND WIN32)\n  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/SignPkg.Targets.in ${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.Bitmap/SignPkg.Targets)\nENDIF()\nCONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/Emgu.CV.Bitmap.Package.README.md.in ${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.Bitmap/docs/README.md)\n\n```\n\nLANGUAGE: cmake\nCODE:\n```\n#generate nuget config file for Emgu.CV.Wpf\nCONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/Emgu.CV.Wpf.Directory.Build.props.in ${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.Wpf/Directory.Build.props)\nIF(EMGU_SIGN_FOUND AND WIN32)\n  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/SignBinary.Targets.in ${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.Wpf/SignBinary.Targets)\nENDIF()\nIF(EMGU_NUGET_SIGN_FOUND AND WIN32)\n  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/SignPkg.Targets.in ${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.Wpf/SignPkg.Targets)\nENDIF()\nCONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/Emgu.CV.Wpf.Package.README.md.in ${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.Wpf/docs/README.md)\n\n```\n\nLANGUAGE: cmake\nCODE:\n```\n# Generate nuget config file for Emgu.CV.Wpf\n# Sign and copy the binary\n#SET(EMGUCV_WPF_POST_PROCESS_BINARY \"\")\n#IF(EMGU_SIGN_FOUND AND WIN32)\n#  file(TO_NATIVE_PATH ${EMGU_SIGN_EXECUTABLE} EMGU_SIGN_EXECUTABLE_NATIVE_PATH)\n#  file(TO_NATIVE_PATH ${SIGNTOOL_EXECUTABLE} SIGNTOOL_EXECUTABLE_NATIVE_PATH)\n#  SET(EMGUCV_WPF_POST_PROCESS_BINARY \"\n#  <Target Name=\\\"PostProcessBinary\\\" AfterTargets=\\\"PostBuildEvent\\\" Condition=\\\"Exists('${EMGU_SIGN_EXECUTABLE_NATIVE_PATH}')\\\">\n#    <Message Text=\\\"Signing $(OutputPath)$(AssemblyName).dll\\\" Importance=\\\"high\\\" />\n#\\t<MakeDir Directories=\\\"$(OutputPath)\\\\signed\\\"/>\n#    <Exec Command='${EMGU_SIGN_EXECUTABLE_NATIVE_PATH} \\\"$(OutputPath)$(AssemblyName).dll\\\" \\\"$(OutputPath)signed\\\" \\\"${SIGNTOOL_EXECUTABLE_NATIVE_PATH}\\\"' WorkingDirectory=\\\"$(OutputPath)\\\" />\n#  </Target>\n#\\t\")\n#ENDIF()\n\n```\n\nLANGUAGE: cmake\nCODE:\n```\n# ----------------------------------------------------------------------------\n#  Generate readme file for Emgu CV project\n# ----------------------------------------------------------------------------\nCONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/README.txt.in ${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV/README.txt)\nINSTALL(FILES \"${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV/README.txt\" DESTINATION \".\" COMPONENT emgucv_source)\n\n```\n\nLANGUAGE: cmake\nCODE:\n```\n# ----------------------------------------------------------------------------\n#  Include license file & nuget icon into package\n# ----------------------------------------------------------------------------\nINSTALL(FILES \"${CMAKE_CURRENT_SOURCE_DIR}/LICENSE.txt\" DESTINATION \".\" COMPONENT emgucv_source)\nINSTALL(FILES \"${CMAKE_CURRENT_SOURCE_DIR}/miscellaneous/nuget_icon.png\" DESTINATION \"miscellaneous/\" COMPONENT emgucv_source)\n\n```\n\nLANGUAGE: cmake\nCODE:\n```\n# ----------------------------------------------------------------------------\n#  Generate CvInvokeEntryPoints.cs file for Emgu CV project\n```\n\n----------------------------------------\n\nTITLE: Commented: Generating GAC Removal Script with CMake\nDESCRIPTION: This commented-out CMake code generates a shell script command string to remove managed DLLs from the Mono Global Assembly Cache (GAC). It iterates through a list of DLLs (`EMGUCV_MANAGED_DLLS`), builds a command using `mono-gacutil -u`, and stores it in the `REMOVE_EMGU_FROM_GAC_SCRIPT` variable. This snippet is currently inactive.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_96\n\nLANGUAGE: CMake\nCODE:\n```\n#SET(REMOVE_EMGU_FROM_GAC_SCRIPT \"\")\n#FOREACH(MANAGED_DLL ${EMGUCV_MANAGED_DLLS})\n#  SET(REMOVE_EMGU_FROM_GAC_SCRIPT \"${REMOVE_EMGU_FROM_GAC_SCRIPT} ${MANAGED_DLL}\")\n#ENDFOREACH()\n#SET(REMOVE_EMGU_FROM_GAC_SCRIPT \"for dll in${REMOVE_EMGU_FROM_GAC_SCRIPT}; do ${MONO_GACUTIL_EXEC} -u $dll; done\")\n```\n\n----------------------------------------\n\nTITLE: Checking TBB Configuration Status in CMake\nDESCRIPTION: This snippet checks if TBB is enabled (WITH_TBB) and prints status messages indicating whether the TBB include directory (TBB_ENV_INCLUDE) and library directory (TBB_ENV_LIB) were found. If found on Windows, it also prints the determined path to the TBB DLL.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_80\n\nLANGUAGE: cmake\nCODE:\n```\nIF(WITH_TBB)\n  IF (NOT TBB_ENV_INCLUDE)\n    MESSAGE(STATUS \"Cannot find TBB_INCLUDE_DIRS\")\n  ELSEIF (NOT TBB_ENV_LIB)\n    MESSAGE(STATUS \"Cannot find TBB_LIB_DIR\")\n  ELSE()\n    MESSAGE(STATUS \"tbb dll: ${TBB_BINARY_FILE_DIR}/tbb.dll\")\n  ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building the tesseract_ccmain Static Library in CMake\nDESCRIPTION: This CMake snippet configures the build for the `tesseract_ccmain` static library. It includes necessary directories from Tesseract source (`TESSERACT_SRC_DIR`) and Leptonica (`LEPTONICA_DIR`), defines the library using source and header files stored in `${tesseract_ccmain_srcs}` and `${tesseract_ccmain_hdrs}`, applies specific project properties using `SET_TESSERACT_PROJECT_PROPERTY`, and adds dependencies to other Tesseract components for non-MSVC compilers.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/tesseract/libtesseract/CMakeLists.txt#_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\n#  include_directories(\"${TESSERACT_SRC_DIR}/vs2010/include\" \"${TESSERACT_SRC_DIR}/vs2010/port\")\n#ENDIF()\ninclude_directories(\"${TESSERACT_SRC_DIR}/cutil\" \"${TESSERACT_SRC_DIR}/ccstruct\" \"${TESSERACT_SRC_DIR}/ccutil\" \"${TESSERACT_SRC_DIR}/viewer\" \"${TESSERACT_SRC_DIR}/opencl\" \"${TESSERACT_SRC_DIR}/dict\" \"${TESSERACT_SRC_DIR}/classify\" \"${LEPTONICA_DIR}\" \"${TESSERACT_SRC_DIR}/wordrec\" \"${TESSERACT_SRC_DIR}/textord\" \"${TESSERACT_SRC_DIR}/lstm\")\nadd_library(${PROJECT_NAME} STATIC ${tesseract_ccmain_srcs} ${tesseract_ccmain_hdrs})\n\nSET_TESSERACT_PROJECT_PROPERTY(${PROJECT_NAME})\n\nIF (NOT MSVC)\n  ADD_DEPENDENCIES(${PROJECT_NAME} tesseract_cutil tesseract_ccstruct tesseract_ccutil tesseract_viewer tesseract_opencl tesseract_dict tesseract_classify libleptonica tesseract_wordrec tesseract_textord tesseract_lstm)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building the Emgu CUDA DNN Windows NuGet Package in CMake\nDESCRIPTION: This CMake script defines the build process for the `Emgu.runtime.windows.cuda.dnn.nuget` package. It runs conditionally on Windows with CUDA DNN support (`WIN32`, `HAVE_WINDESKTOP_X86` or `HAVE_WINDESKTOP_X64`, `WITH_CUDNN`). It uses `get_filename_component` to determine the output directory. The `BUILD_NUGET_PACKAGE` function is called with the project name, C# project file path, nuspec file path, output directory, and working directory. If signing is enabled (`EMGU_NUGET_SIGN_FOUND`), the `EMGU_SIGN_NUGET` function signs the generated package. It declares dependencies on `Emgu.runtime.windows.cuda.rt.nuget` and `Emgu.runtime.windows.zlibwapi.nuget` using `ADD_DEPENDENCIES`. Finally, if solution folders are enabled, it assigns the project to the \"nuget\" folder using `set_target_properties`.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/platforms/nuget/Emgu.runtime.windows.cuda.dnn/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# --------------------------------------------------------\n#  Copyright (C) 2004-2025 by EMGU Corporation. All rights reserved.\n# --------------------------------------------------------\n\nIF (WIN32 AND (HAVE_WINDESKTOP_X86 OR HAVE_WINDESKTOP_X64) AND WITH_CUDNN)\n\nPROJECT(Emgu.runtime.windows.cuda.dnn.nuget)\n\n  get_filename_component(NUGET_OUTPUT_DIR ${CMAKE_CURRENT_SOURCE_DIR} DIRECTORY)\n\n  BUILD_NUGET_PACKAGE(\n    ${PROJECT_NAME} \n\t\"${EMGU_CV_SOURCE_DIR}/Emgu.CV/NetStandard/Emgu.CV.csproj\"  #csproj_file \n\t\"${CMAKE_CURRENT_SOURCE_DIR}/Package.nuspec\" #nuspec_file \n\t\"${NUGET_OUTPUT_DIR}\" #output_dir \n\t\"${CMAKE_CURRENT_SOURCE_DIR}\" #working_dir\n\t) \n\n  IF (EMGU_NUGET_SIGN_FOUND)\n    EMGU_SIGN_NUGET(${PROJECT_NAME} \"${NUGET_OUTPUT_DIR}/${EMGU_CUDNN_NUGET_ID}.${EMGU_CUDNN_VERSION}.nupkg\")\n  ENDIF()\n\n  ADD_DEPENDENCIES(${PROJECT_NAME} Emgu.runtime.windows.cuda.rt.nuget)\n  ADD_DEPENDENCIES(${PROJECT_NAME} Emgu.runtime.windows.zlibwapi.nuget)\n\nif(ENABLE_SOLUTION_FOLDERS)\n  set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER \"nuget\")\nendif() \n\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Conditional Configuration for Intel TBB\nDESCRIPTION: Checks if the `WITH_TBB` option is enabled and if the TBB include and library directories (`TBB_INCLUDE_DIR`, `TBB_LIB_DIR`) are defined. If conditions are met, it adds the `HAVE_TBB` preprocessor definition, includes the TBB headers directory, and adds the TBB library directory to the link path.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/tests/cvextern_test/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n############################### TBB START ##############################\nif (WITH_TBB AND TBB_INCLUDE_DIR AND TBB_LIB_DIR)\n  add_definitions(-DHAVE_TBB)\n  include_directories(${TBB_INCLUDE_DIR})\n  link_directories(${TBB_LIB_DIR})\nendif()\n############################### TBB END ################################\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building GeoTIFF Utilities with CMake - CMake\nDESCRIPTION: This CMake code snippet configures the build environment for GeoTIFF utilities by specifying include directories, adding relevant source files based on platform/compiler, and defining executable targets for utilities such as makegeo, listgeo, applygeo, and geotifcp. The script leverages message logging for status reporting, manages linking dependencies (such as xtiff, JPEG, and ZLIB libraries), and configures installation paths for the built executables and libraries. Expected input includes standard CMake environment variables, and the output is a set of compiled utilities accessible in specified directories. Limitations include requiring the CMake and compiler toolchain and availability of external library dependencies prior to building.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/libgeotiff/libgeotiff-1.4.0/bin/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n###############################################################################\\n#\\n# CMake configuration file to build GeoTIFF utility programs\\n#\\n# Author: Mateusz Loskot <mateusz@loskot.net>\\n#\\n###############################################################################\\n\\nINCLUDE_DIRECTORIES(\\n    .\\n    ${CMAKE_SOURCE_DIR})\\n\\nIF(WIN32 AND MSVC)\\n    SET(GETOPT_SOURCE getopt.c)\\nENDIF()\\n###############################################################################\\n# Collect programs to build\\n\\nSET(GEOTIFF_UTILITIES makegeo listgeo applygeo)\\n\\nMESSAGE(STATUS \"Adding GeoTIFF utilities to build\")\\n\\nFOREACH(utility ${GEOTIFF_UTILITIES})\\n    ADD_EXECUTABLE(${utility} ${utility}.c ${GETOPT_SOURCE})\\n    TARGET_LINK_LIBRARIES(${utility} xtiff ${GEOTIFF_LIBRARY_TARGET})\\nENDFOREACH()\\n\\nADD_EXECUTABLE(geotifcp geotifcp.c ${GETOPT_SOURCE})\\nTARGET_LINK_LIBRARIES(geotifcp\\n    xtiff\\n    ${GEOTIFF_LIBRARY_TARGET}\\n    ${JPEG_LIBRARIES}\\n    ${ZLIB_LIBRARIES})\\n\\nSET(GEOTIFF_UTILITIES ${GEOTIFF_UTILITIES} geotifcp )\\n\\nMESSAGE(STATUS \"Adding GeoTIFF utilities to build - done: ${GEOTIFF_UTILITIES}\")\\n\\n###############################################################################\\n# Targets installation\\n\\nINSTALL(TARGETS ${GEOTIFF_UTILITIES}\\n    RUNTIME DESTINATION ${GEOTIFF_BIN_DIR}\\n    LIBRARY DESTINATION ${GEOTIFF_LIB_DIR}\\n    ARCHIVE DESTINATION ${GEOTIFF_LIB_DIR})\n```\n\n----------------------------------------\n\nTITLE: Setting Package Information and Naming Convention - CMake\nDESCRIPTION: This section sets up packaging variables such as package name, description, contact, and dynamic name composition. It constructs CPACK_PACKAGE_NAME using earlier generated platform/architecture labels and appends suffixes for enabled features (CUDA, IPP, etc.), culminating in marking pro builds and the associated LICENSE resource. Prerequisites are the prior definitions of all used variables. The output defines all CMAKE/CPACK variables necessary for later packaging and installer steps, ensuring the final binary matches its build configuration.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_33\n\nLANGUAGE: CMake\nCODE:\n```\nSET(PACKAGE \"${PROJECT_NAME}\")\nSET(GITHUB_REPO_URL \"https://github.com/emgucv/emgucv\")\nSET(CPACK_PACKAGE_CONTACT \"Emgu CV SUPPORT <support@emgu.com>\")\nSET(PACKAGE_BUGREPORT \"${CPACK_PACKAGE_CONTACT}\")\nSET(PACKAGE_NAME \"${PROJECT_NAME}\")\n\n#SET(CPACK_PACKAGE_NAME \"${PACKAGE_NAME}\")\nSET(CPACK_PACKAGE_DESCRIPTION_SUMMARY \"Emgu CV is a cross platform .Net wrapper to the OpenCV image processing library.\")\n\nSET(CPACK_PACKAGE_NAME \"${PACKAGE_NAME}${IOS_LABEL}${ANDROID_LABEL}${MACOS_LABEL}${WINDOWS_LABEL}\")\n\n#STRING(LENGTH \"${CPACK_PACKAGE_NAME}\" PACKAGE_NAME_LENGTH)\n#IF (${PACKAGE_NAME_LENGTH} GREATER 30)\n#   SET(CPACK_PACKAGE_NAME \"${PACKAGE_NAME}-mixed\")\n#   STRING(LENGTH \"${CPACK_PACKAGE_NAME}\" PACKAGE_NAME_LENGTH)\n#ENDIF()\n\n#IF (APPLE)\n#  SET(CPACK_PACKAGE_NAME \"${CPACK_PACKAGE_NAME}-macos\")\n#ENDIF()\n\nIF(WITH_CUDA)\n  SET(CPACK_PACKAGE_NAME \"${CPACK_PACKAGE_NAME}-cuda\")\nENDIF()\n\nIF(WITH_OPENNI) \n  SET(CPACK_PACKAGE_NAME \"${CPACK_PACKAGE_NAME}-openni\")\nENDIF()\n\nIF(CV_ICC)\n  SET(CPACK_PACKAGE_NAME \"${CPACK_PACKAGE_NAME}-icc\")\nENDIF()\n\n#IF(WITH_TBB)\n#  SET(CPACK_PACKAGE_NAME \"${CPACK_PACKAGE_NAME}-tbb\")\n#ENDIF()\n\nIF(WITH_IPP)\n  SET(CPACK_PACKAGE_NAME \"${CPACK_PACKAGE_NAME}-ipp\")\nENDIF()\n\nIF(WITH_INF_ENGINE OR WITH_OPENVINO)\n  SET(CPACK_PACKAGE_NAME \"${CPACK_PACKAGE_NAME}-dldt\")\nENDIF()\n\nSET(IS_PRO_BUILD FALSE)\nIF(\"${CPACK_PACKAGE_NAME}\" STREQUAL \"${PACKAGE_NAME}-ios-android-macos-windows-ipp-dldt\")\n  SET(CPACK_PACKAGE_NAME \"${PACKAGE_NAME}-pro\")\n  SET(IS_PRO_BUILD TRUE)\nENDIF()\n\n\n#IF(EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.Commercial.License.txt\")\n#  SET(LICENSE_FILE_NAME \"Emgu.CV.Commercial.License.txt\")\n#ELSE()\nSET(LICENSE_FILE_NAME \"LICENSE\")\n\nSET(CPACK_RESOURCE_FILE_LICENSE \"${CMAKE_CURRENT_SOURCE_DIR}/${LICENSE_FILE_NAME}\")\n\n#IF (WIN32 OR APPLE OR ANDROID)\nSET(CPACK_PACKAGE_CLI_FOLDER libs)\n#ELSE ()\n#  SET(CPACK_PACKAGE_CLI_FOLDER lib/cli/${PACKAGE_NAME}-${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR})\n#ENDIF()\n\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building a Windows CUDA DNN NuGet Package - CMake\nDESCRIPTION: This snippet checks if the build is targeting Windows with CUDA DNN support, then defines a CMake project to build a NuGet package for the Emgu CV CUDA DNN runtime. It invokes a custom BUILD_NUGET_PACKAGE() macro with project-specific arguments including the csproj and nuspec files, sets output and working directories, conditionally signs the NuGet package if signing is available, adds build dependencies, and assigns the target to a solution folder for organizational purposes. Inputs include environment variables and build condition flags, and the output is a signed (if enabled) and organized NuGet package. Requires CMake, a properly configured Emgu CV source directory, CUDA DNN support, and optional NuGet signing tools.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/platforms/nuget/Emgu.runtime.windows.cuda.dnn.ops/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# --------------------------------------------------------\\n#  Copyright (C) 2004-2025 by EMGU Corporation. All rights reserved.\\n# --------------------------------------------------------\\n\\nIF (WIN32 AND (HAVE_WINDESKTOP_X86 OR HAVE_WINDESKTOP_X64) AND WITH_CUDNN)\\n\\nPROJECT(Emgu.runtime.windows.cuda.dnn.ops.nuget)\\n\\n  get_filename_component(NUGET_OUTPUT_DIR ${CMAKE_CURRENT_SOURCE_DIR} DIRECTORY)\\n\\n  BUILD_NUGET_PACKAGE(\\n    ${PROJECT_NAME} \\n\\t\"${EMGU_CV_SOURCE_DIR}/Emgu.CV/NetStandard/Emgu.CV.csproj\"  #csproj_file \\n\\t\"${CMAKE_CURRENT_SOURCE_DIR}/Package.nuspec\" #nuspec_file \\n\\t\"${CMAKE_CURRENT_SOURCE_DIR}/../\" #output_dir \\n\\t\"${CMAKE_CURRENT_SOURCE_DIR}\" #working_dir\\n\\t) \\n\\n  IF (EMGU_NUGET_SIGN_FOUND)\\n    EMGU_SIGN_NUGET(${PROJECT_NAME} \"${NUGET_OUTPUT_DIR}/${EMGU_CUDNN_OPS_NUGET_ID}.${EMGU_CUDNN_VERSION}.nupkg\")\\n  ENDIF()\\n\\n  ADD_DEPENDENCIES(${PROJECT_NAME} Emgu.runtime.windows.cuda.dnn.nuget)\\n\\nif(ENABLE_SOLUTION_FOLDERS)\\n  set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER \"nuget\")\\nendif() \\n\\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring Conditional Installation and Build for Emgu CV Maui iOS Runtime in CMake (CMake Script)\nDESCRIPTION: This CMake script conditionally installs and builds the Emgu CV Runtime for Maui targeting iOS devices. It installs relevant source files (such as .csproj, .cs, and other configuration files) to a specified destination, triggers the .NET project build process using custom macros (e.g., BUILD_DOTNET_PROJ), handles dependency relationships through ADD_DEPENDENCIES, and applies solution folder organization for IDE integration. Installation rules for binary outputs (e.g., .dll, .pdb, .xml) are also provided. Key parameters include platform targeting and source/destination directory definitions; platform dependencies include iOS detection and Apple platform constraints. This snippet must be used within a CMake environment with the relevant macros and variables defined.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Runtime/Maui/iOS/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# --------------------------------------------------------\\n#  Copyright (C) 2004-2025 by EMGU Corporation. All rights reserved.\\n# --------------------------------------------------------\\n\\nIF(HAVE_IOS)\\n\\n  INSTALL(\\n      DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\\n      DESTINATION Emgu.CV.Runtime/Maui\\n      COMPONENT emgucv_source\\n      FILES_MATCHING \\n      PATTERN \"*.csproj\"\\n\\t  PATTERN \"*.cs\"\\n\\t  PATTERN \"Directory.Build.props\"\\n\\t  PATTERN \"README.md\"\\n      PATTERN \".svn\" EXCLUDE\\n      PATTERN \"obj\" EXCLUDE\\n      PATTERN \"CMakeFiles\" EXCLUDE\\n      PATTERN \"${PROJECT_NAME}.dir\" EXCLUDE\\n      )\\n\\t  \\n  IF (APPLE)\\n    PROJECT(Emgu.CV.runtime.maui.ios)\\n\\tSET(EXTRA_BUILD_FLAGS \"/p:Platform=\\\"AnyCPU\\\"\")\\n    BUILD_DOTNET_PROJ(${PROJECT_NAME} \"${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.runtime.maui.ios.csproj\" \"${EXTRA_BUILD_FLAGS}\" ALL)\\n\\n    ADD_DEPENDENCIES(${PROJECT_NAME} cvextern Emgu.CV)  \\n    if(ENABLE_SOLUTION_FOLDERS)\\n      set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER \"emgu\")\\n    endif() \\n  ENDIF()\\n  \\n  INSTALL(\\n      DIRECTORY \\n      ${EMGU_CV_SOURCE_DIR}/libs/Build/Emgu.CV.runtime.maui.ios\\n      DESTINATION ${CPACK_PACKAGE_CLI_FOLDER}/Build\\n      COMPONENT emgucv_binary\\n\\t  FILES_MATCHING \\n        PATTERN \"*.dll\"\\n        PATTERN \"*.pdb\"\\n        PATTERN \"*.xml\")\\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring Tesseract arch Library with SIMD Optimizations in CMake\nDESCRIPTION: This extensive snippet configures the 'tesseract_arch' static library, focusing on architecture-specific SIMD optimizations. It checks for available CPU instruction sets (AVX, AVX2, FMA, SSE4.1, NEON) based on CMake variables like `CPU_BASELINE_FINAL`. Based on availability, it conditionally appends specific source files (e.g., `dotproductavx.cpp`, `intsimdmatrixneon.cpp`) to the `tesseract_arch_srcs` list and sets appropriate compile flags (e.g., `-D__AVX__`, `-D__ARM_NEON`) for those source files using `set_source_files_properties`. It also compiles `simddetect.cpp` with flags indicating detected features (e.g., `-DHAVE_AVX`). Finally, it defines the static library target with the collected sources and headers, adds common definitions, and sets project properties.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/tesseract/libtesseract/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\n#arch\nPROJECT(tesseract_arch)\n\nMESSAGE(STATUS \"CPU_BASELINE: ${CPU_BASELINE}\")\nMESSAGE(STATUS \"CPU_BASELINE_FINAL: ${CPU_BASELINE_FINAL}\")\n#ocv_check_compiler_optimization(\"AVX\")\n#MESSAGE(STATUS \"CPU_AVX_FLAGS_ON: ${CPU_AVX_FLAGS_ON}\")\n#MESSAGE(STATUS \"CPU_AVX_ENABLED_DEFAULT: ${CPU_AVX_ENABLED_DEFAULT}\")\n\nset(AVX_OPT OFF)\nIF (\"AVX\" IN_LIST CPU_BASELINE_FINAL)\n  SET(AVX_OPT ON)\n  MESSAGE(STATUS \"TESSERACT with AVX: ON\")\nELSE()\n  MESSAGE(STATUS \"TESSERACT with AVX: OFF\")\nENDIF()\n\nset(AVX2_OPT OFF)\nIF (\"AVX2\" IN_LIST CPU_BASELINE_FINAL)\n  SET(AVX2_OPT ON)\n  MESSAGE(STATUS \"TESSERACT with AVX2: ON\")\nELSE()\n  MESSAGE(STATUS \"TESSERACT with AVX2: OFF\")\nENDIF()\n\nset(FMA_OPT OFF)\n\nset(SSE41_OPT OFF)\nIF (\"SSE4_1\" IN_LIST CPU_BASELINE_FINAL)\n  SET(SSE41_OPT ON)\n  MESSAGE(STATUS \"TESSERACT with SSE4_1: ON\")\nELSE()\n  MESSAGE(STATUS \"TESSERACT with SSE4_1: OFF\")\nENDIF()\n\nSET(tesseract_arch_srcs \"${TESSERACT_SRC_DIR}/arch/dotproduct.cpp\" \"${TESSERACT_SRC_DIR}/arch/intsimdmatrix.cpp\" \"${TESSERACT_SRC_DIR}/arch/simddetect.cpp\")\n\nset(NEON_OPT OFF)\nIF ((\"NEON\" IN_LIST CPU_BASELINE_FINAL) OR (IPHONESIMULATOR AND (\"${IOS_ARCH}\" STREQUAL \"arm64\")))\n  SET(NEON_OPT ON)\n  LIST(APPEND tesseract_arch_srcs \"${TESSERACT_SRC_DIR}/arch/dotproductneon.cpp\" \"${TESSERACT_SRC_DIR}/arch/intsimdmatrixneon.cpp\") \n  MESSAGE(STATUS \"TESSERACT with NEON: ON\")\nELSE()\n  MESSAGE(STATUS \"TESSERACT with NEON: OFF\")\nENDIF()\n\nSET(TESSERACT_SIMDDETECT_COMPILE_FLAGS)\n#get_source_file_property(TESSERACT_SIMDDETECT_COMPILE_FLAGS ${TESSERACT_SRC_DIR}/arch/simddetect.cpp COMPILE_FLAGS)\nif(AVX_OPT)\n   list(APPEND tesseract_arch_srcs ${TESSERACT_SRC_DIR}/arch/dotproductavx.cpp)\n   set_source_files_properties(${TESSERACT_SRC_DIR}/arch/dotproductavx.cpp PROPERTIES COMPILE_FLAGS \"-D__AVX__\")\n   SET(TESSERACT_SIMDDETECT_COMPILE_FLAGS \"${TESSERACT_SIMDDETECT_COMPILE_FLAGS} -DHAVE_AVX\")\nendif()\nif(AVX2_OPT)\n   list(APPEND tesseract_arch_srcs ${TESSERACT_SRC_DIR}/arch/intsimdmatrixavx2.cpp)\n   set_source_files_properties(${TESSERACT_SRC_DIR}/arch/intsimdmatrixavx2.cpp PROPERTIES COMPILE_FLAGS \"-D__AVX2__\")\n   SET(TESSERACT_SIMDDETECT_COMPILE_FLAGS \"${TESSERACT_SIMDDETECT_COMPILE_FLAGS} -DHAVE_AVX2\")\nendif()\nif(FMA_OPT)\n   list(APPEND tesseract_arch_srcs ${TESSERACT_SRC_DIR}/arch/dotproductfma.cpp)\n   set_source_files_properties(${TESSERACT_SRC_DIR}/arch/dotproductfma.cpp PROPERTIES COMPILE_FLAGS \"-mfma\")\nendif()\nif(SSE41_OPT)\n   list(APPEND tesseract_arch_srcs ${TESSERACT_SRC_DIR}/arch/dotproductsse.cpp ${TESSERACT_SRC_DIR}/arch/intsimdmatrixsse.cpp)\n   set_source_files_properties(${TESSERACT_SRC_DIR}/arch/dotproductsse.cpp ${TESSERACT_SRC_DIR}/arch/intsimdmatrixsse.cpp PROPERTIES COMPILE_FLAGS \"-D__SSE4_1__ -msse4.1\")\n   SET(TESSERACT_SIMDDETECT_COMPILE_FLAGS \"${TESSERACT_SIMDDETECT_COMPILE_FLAGS} -DHAVE_SSE4_1\")\nendif()\nif(NEON_OPT)\n   list(APPEND tesseract_arch_srcs ${TESSERACT_SRC_DIR}/arch/dotproductneon.cpp ${TESSERACT_SRC_DIR}/arch/intsimdmatrixneon.cpp)\n   set_source_files_properties(${TESSERACT_SRC_DIR}/arch/dotproductneon.cpp ${TESSERACT_SRC_DIR}/arch/intsimdmatrixneon.cpp PROPERTIES COMPILE_FLAGS \"-D__ARM_NEON\")\n   SET(TESSERACT_SIMDDETECT_COMPILE_FLAGS \"${TESSERACT_SIMDDETECT_COMPILE_FLAGS} -DHAVE_NEON\")\nendif()\n\nMESSAGE(STATUS \"------------------------------------ TESSERACT_SIMDDETECT_COMPILE_FLAGS: ${TESSERACT_SIMDDETECT_COMPILE_FLAGS} -------------------------------------\")\nIF(TESSERACT_SIMDDETECT_COMPILE_FLAGS)\n  set_source_files_properties(${TESSERACT_SRC_DIR}/arch/simddetect.cpp PROPERTIES COMPILE_FLAGS \"${TESSERACT_SIMDDETECT_COMPILE_FLAGS}\")\nENDIF()\n\nfile(GLOB tesseract_arch_hdrs \"${TESSERACT_SRC_DIR}/arch/*.h\")\nsource_group(\"Src\" FILES ${tesseract_arch_srcs})\nsource_group(\"Include\" FILES ${tesseract_arch_hdrs})\nadd_definitions(-DUSE_STD_NAMESPACE -DHAVE_LIBLEPT)\n#IF(MSVC)\n#  LIST(APPEND tesseract_arch_srcs \"${PROJECT_SOURCE_DIR}/${TESSERACT_SRC_DIR}/vs2010/port/gettimeofday.cpp\")\n#  add_definitions(-D__MSW32__ -W0)\n#  include_directories(\"${TESSERACT_SRC_DIR}/vs2010/include\" \"${TESSERACT_SRC_DIR}/vs2010/port\")\n#ENDIF()\nadd_library(${PROJECT_NAME} STATIC ${tesseract_arch_srcs} ${tesseract_arch_hdrs})\n\nSET_TESSERACT_PROJECT_PROPERTY(${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Publishing iOS MAUI .ipa for Device Deployment - Shell\nDESCRIPTION: Creates a release-mode .ipa installer file for MAUI app deployment to a physical iOS device, compiling for ARM64 with self-contained publishing. Assumes required Apple certificates/provisioning profiles are set up and the environment has iOS build tools. Outputs an .ipa artifact for distribution.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Example/MAUI/BuildInfo/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n> dotnet publish -f net9.0-ios -c Release -r ios-arm64 --self-contained\n```\n\n----------------------------------------\n\nTITLE: Generating C# Properties for cv::_OutputArray using CMake\nDESCRIPTION: This snippet uses the `CREATE_OCV_CLASS_PROPERTY` CMake macro to generate C# wrapper properties for the `cv::_OutputArray` C++ class. It defines mappings for properties like `FixedSize`, `FixedType`, and `Needed`, specifying their C++ and C# types and descriptions. The generated code is placed in `Emgu.CV/Core/OutputArray.g.cs` within the `Emgu.CV` namespace, using `CvInvoke` for P/Invoke calls, and requires the `core_c_extra.h` header. Generation depends on the `HAVE_opencv_core` CMake variable.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nCREATE_OCV_CLASS_PROPERTY( \n    \"core/output_array_property\" \n    \"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV/Core/OutputArray.g.cs\"\n    \"cv::_OutputArray\" \n    \"OutputArray\" \n    \"fixedSize;fixedType;needed\" \n    \"bool;bool;bool\" \n    \"val;val;val\"\n    \"FixedSize;FixedType;Needed\" \n    \"bool;bool;bool\"\n    \"True if the output array is fixed size;\n  True if the output array is fixed type;\n  True if the output array is needed\"\n    \"Emgu.CV\"\n    \"CvInvoke\"\n    \"OutputArray\"\n\t\"\"\n    \"#include \\\"core_c_extra.h\\\"\"\n\t\"\"\n\t\"\"\n\t${HAVE_opencv_core})\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform and Architecture Variables - CMake\nDESCRIPTION: This snippet performs platform detection (Ubuntu, RHEL) and sets associated platform ID variables based on available system information and supported architectures. It uses conditional logic to set strings representing target platforms (e.g., x86, x64, arm64), then normalizes these to lowercase. Dependencies include the presence of certain CMake cache variables (e.g., IS_UBUNTU, HAVE_UBUNTU_X64) for feature flags, and it outputs logging information for tracking. Inputs include distribution/architecture variables; output is a set of consistently named variables used elsewhere in the build system.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_30\n\nLANGUAGE: CMake\nCODE:\n```\n#  MESSAGE(STATUS \"IS_UBUNTU_ARM64_BUILD: ${IS_UBUNTU_ARM64_BUILD}\")\n#ENDIF()\n#CHECK_BINARY_EXIST(\"libs/arm64\" \"*.so\" HAVE_LINUX_ARM64 ${IS_UBUNTU_ARM64_BUILD})\n\nIF ( IS_UBUNTU )\n  #MESSAGE(STATUS \"TARGET_ARCH_64: ${TARGET_ARCH_64}\")\n  #SET(NUGET_NATIVE_PLATFORM_ID_UBUNTU \"${LSB_RELEASE_ID_SHORT}.${LSB_RELEASE_RELEASE_SHORT}-${NUGET_NATIVE_PLATFORM_ID_ARCH}\")\n  IF (NOT (\"\" STREQUAL \"${LSB_RELEASE_ID_SHORT}\"))\n    SET(NUGET_NATIVE_PLATFORM_ID_UBUNTU \"${LSB_RELEASE_ID_SHORT}-${NUGET_NATIVE_PLATFORM_ID_ARCH}\")\n  ELSEIF (NOT (\"\" STREQUAL \"${DISTRO_ID}\"))  \n    SET(NUGET_NATIVE_PLATFORM_ID_UBUNTU \"${DISTRO_ID}-${NUGET_NATIVE_PLATFORM_ID_ARCH}\")\n  ENDIF()\n  MESSAGE(STATUS \"NUGET_NATIVE_PLATFORM_ID_UBUNTU: ${NUGET_NATIVE_PLATFORM_ID_UBUNTU}\")\nELSE()\n  SET(UBUNTU_DEFAULT_PLATFORM_ID \"ubuntu\")\n  IF (HAVE_UBUNTU_X86)\n    SET(NUGET_NATIVE_PLATFORM_ID_UBUNTU \"${UBUNTU_DEFAULT_PLATFORM_ID}-x86\")\n  ENDIF()\n  IF (HAVE_UBUNTU_X64)\n    SET(NUGET_NATIVE_PLATFORM_ID_UBUNTU \"${UBUNTU_DEFAULT_PLATFORM_ID}-x64\")\n  ENDIF()\n  IF (HAVE_UBUNTU_ARM64)\n    SET(NUGET_NATIVE_PLATFORM_ID_UBUNTU \"${UBUNTU_DEFAULT_PLATFORM_ID}-arm64\")\n  ENDIF()\nENDIF()\nSTRING(TOLOWER \"${NUGET_NATIVE_PLATFORM_ID_UBUNTU}\" NUGET_NATIVE_PLATFORM_ID_UBUNTU)\n\nIF (IS_RHEL)\n  SET(NUGET_NATIVE_PLATFORM_ID_RHEL \"${DISTRO_ID}-${NUGET_NATIVE_PLATFORM_ID_ARCH}\")\n  MESSAGE(STATUS \"NUGET_NATIVE_PLATFORM_ID_RHEL: ${NUGET_NATIVE_PLATFORM_ID_RHEL}\")\nELSE()\n  SET(RHEL_DEFAULT_PLATFORM_ID \"rhel\")\n  IF (HAVE_RHEL_X86)\n    SET(NUGET_NATIVE_PLATFORM_ID_RHEL \"${RHEL_DEFAULT_PLATFORM_ID}-x86\")\n  ENDIF()\n  IF (HAVE_RHEL_X64)\n    SET(NUGET_NATIVE_PLATFORM_ID_RHEL \"${RHEL_DEFAULT_PLATFORM_ID}-x64\")\n  ENDIF()\n  IF (HAVE_RHEL_ARM64)\n    SET(NUGET_NATIVE_PLATFORM_ID_RHEL \"${RHEL_DEFAULT_PLATFORM_ID}-arm64\")\n  ENDIF()\nENDIF()\nSTRING(TOLOWER \"${NUGET_NATIVE_PLATFORM_ID_RHEL}\" NUGET_NATIVE_PLATFORM_ID_RHEL)\n\n```\n\n----------------------------------------\n\nTITLE: Conditionally Appending FFMPEG DLL in CMake\nDESCRIPTION: Checks if the build is on Windows (`WIN32`) and if FFMPEG support is enabled (`WITH_FFMPEG`). If both are true, it constructs the expected name and path of the OpenCV FFMPEG video I/O DLL (`opencv_videoio_ffmpeg*.dll`) based on architecture, OpenCV version, and build type (for MSVC non-IDE builds). The determined DLL path is then appended to the `CVEXTERN_DEPENDENCY_DLLS` list. Commented-out code suggests a check for the file's existence.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_97\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32 AND WITH_FFMPEG)\n  if(TARGET_ARCH_64)\n    set(FFMPEG_SUFFIX _64)\n  endif()\n  set(OPENCV_FFMPEG_OUTPUT_NAME \"opencv_videoio_ffmpeg${OPENCV_VERSION_MAJOR}${OPENCV_VERSION_MINOR}${OPENCV_VERSION_PATCH}${FFMPEG_SUFFIX}\")\n  IF(MSVC_IDE)\n\tSET(OPENCV_FFMPEG_OUTPUT_FILE_PATH \"${EXECUTABLE_OUTPUT_PATH}/Release/${OPENCV_FFMPEG_OUTPUT_NAME}.dll\")\n  ELSEIF(MSVC AND (CMAKE_GENERATOR MATCHES \"Visual\"))\n\tSET(OPENCV_FFMPEG_OUTPUT_FILE_PATH \"${EXECUTABLE_OUTPUT_PATH}/${CMAKE_BUILD_TYPE}/${OPENCV_FFMPEG_OUTPUT_NAME}.dll\")\n  ENDIF()\n  #if(EXISTS \"${OPENCV_FFMPEG_OUTPUT_FILE_PATH}\")\n  LIST(APPEND CVEXTERN_DEPENDENCY_DLLS \"${OPENCV_FFMPEG_OUTPUT_FILE_PATH}\")\n  #ELSE()\n  #  MESSAGE(FATAL_ERROR \"Could not find Open CV FFMPEG dll, please verify if the ffmpeg dll is in '${OPENCV_FFMPEG_OUTPUT_FILE_PATH}'\")\n  #ENDIF()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Collecting CUDA Runtime and CUFFT DLLs in CMake\nDESCRIPTION: Finds the CUDA Runtime DLL (`cudart*.dll`) using `FILE(GLOB)` within the CUDA toolkit bin directory and appends it to the `CVEXTERN_CUDA_DEPENDENCY_DLLS` list. Additionally, if CUFFT support is enabled (`WITH_CUFFT`), it uses `FILE(GLOB)` to find CUFFT DLLs (`cufft*.dll`) in the same directory and appends them to a separate variable `CVEXTERN_CUFFT_DEPENDENCY_DLLS`. Commented-out sections show previous attempts or alternative ways to list these DLLs.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_101\n\nLANGUAGE: cmake\nCODE:\n```\n\tFILE(GLOB CUDART_DLL_FULL_NAME \"${CUDA_TOOLKIT_ROOT_DIR}/bin/cudart${CUDA_POSTFIX}_*.dll\")\n\t\n\tLIST(APPEND CVEXTERN_CUDA_DEPENDENCY_DLLS \"${CUDART_DLL_FULL_NAME}\" )\n    #LIST(APPEND CVEXTERN_DEPENDENCY_DLLS\n    #  \"${CUDA_NPP_LIBRARY_ROOT_DIR}/bin/nppc${CUDA_POSTFIX}_${npp_major}${npp_minor}.dll\"\n    #  \"${CUDA_NPP_LIBRARY_ROOT_DIR}/bin/nppi${CUDA_POSTFIX}_${npp_major}${npp_minor}.dll\"\n    #  \"${CUDA_NPP_LIBRARY_ROOT_DIR}/bin/npps${CUDA_POSTFIX}_${npp_major}${npp_minor}.dll\"\n    #  \"${CUDA_TOOLKIT_ROOT_DIR}/bin/cudart${CUDA_POSTFIX}_${npp_major}${npp_minor}.dll\"\n    #  )\n\t\n    #LIST(APPEND CVEXTERN_DEPENDENCY_DLL_NAMES \n    #  npp${CUDA_POSTFIX}_${npp_major}${npp_minor}_${npp_build} \n    #  cudart${CUDA_POSTFIX}_${npp_major}${npp_minor}_${npp_build})\n    \n    #IF(WITH_NVCUVID)\n    #  LIST(APPEND CVEXTERN_DEPENDENCY_DLLS \"${CUDA_TOOLKIT_ROOT_DIR}/bin/cufft${CUDA_POSTFIX}_${npp_major}${npp_minor}.dll\")\n    #ENDIF()\n    \n    IF(WITH_CUFFT)\n      FILE(GLOB CVEXTERN_CUFFT_DEPENDENCY_DLLS \"${CUDA_TOOLKIT_ROOT_DIR}/bin/cufft*.dll\")\n```\n\n----------------------------------------\n\nTITLE: Detecting Target Architecture and Setting NuGet Platform ID in CMake\nDESCRIPTION: This snippet checks the target architecture using `CHECK_TARGET_ARCH()`, stores it in `EMGUCV_ARCH`, prints a status message, and then determines the corresponding NuGet native platform identifier (`NUGET_NATIVE_PLATFORM_ID_ARCH`) based on whether the target is 64-bit and/or ARM.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\n# ----------------------------------------------------------------------------\nCHECK_TARGET_ARCH()\n\nSET(EMGUCV_ARCH ${TARGET_ARCH_NAME})\nMESSAGE(STATUS \"Building for ${EMGUCV_ARCH}\")\n\nIF ( TARGET_ARCH_64 )\n  IF (TARGET_ARM)\n    SET(NUGET_NATIVE_PLATFORM_ID_ARCH \"arm64\")\n  ELSE()\n    SET(NUGET_NATIVE_PLATFORM_ID_ARCH \"x64\")\n  ENDIF()\nELSE()\n  IF (TARGET_ARM)\n    SET(NUGET_NATIVE_PLATFORM_ID_ARCH \"arm\")\n  ELSE()\n    SET(NUGET_NATIVE_PLATFORM_ID_ARCH \"x86\")\n  ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Conditional Configuration for OpenMP\nDESCRIPTION: Checks if the `WITH_OPENMP` option is enabled. If true, it finds the OpenMP package using `FIND_PACKAGE` and, if found, appends the necessary OpenMP compiler and linker flags (`OpenMP_C_FLAGS`, `OpenMP_CXX_FLAGS`, `OpenMP_EXE_LINKER_FLAGS`) to the corresponding CMake variables.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/tests/cvextern_test/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n############################### OPENMP START ##############################\nIF(WITH_OPENMP)\n  FIND_PACKAGE( OpenMP REQUIRED)\n  if(OPENMP_FOUND)\n    #MESSAGE(STATUS \" -- Compiling cvextern with OPENMP\")\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}\")\n    set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}\")\n  endif()\nENDIF()\n############################### OPENMP END ################################\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building NuGet Package for Emgu CV CUDA NPP (CMake)\nDESCRIPTION: This CMake snippet conditionally configures the creation and optional signing of the Emgu CV CUDA NPP NuGet package for Windows desktops (x86/x64) when CUDA is enabled. It determines the output directory, invokes the BUILD_NUGET_PACKAGE macro with all necessary parameters, and, if a signing tool is found, uses EMGU_SIGN_NUGET to sign the resulting package. The script also adds package dependencies and can assign the project to a 'nuget' solution folder if enabled. Prerequisites include the required CMake macros/functions, EMGU-specific variables, a compatible Windows CUDA environment, and defined signing tools. Inputs are CMake environment variables and external project files; outputs are a NuGet package and optionally a signed package. It must run in the context of an Emgu CV build with all dependencies present.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/platforms/nuget/Emgu.runtime.windows.cuda.npp/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nIF (WIN32 AND (HAVE_WINDESKTOP_X86 OR HAVE_WINDESKTOP_X64) AND WITH_CUDA)\n\nPROJECT(Emgu.runtime.windows.cuda.npp.nuget)\n\n  get_filename_component(NUGET_OUTPUT_DIR ${CMAKE_CURRENT_SOURCE_DIR} DIRECTORY)\n\n  BUILD_NUGET_PACKAGE(\n    ${PROJECT_NAME} \n\t\"${EMGU_CV_SOURCE_DIR}/Emgu.CV/NetStandard/Emgu.CV.csproj\"  #csproj_file \n\t\"${CMAKE_CURRENT_SOURCE_DIR}/Package.nuspec\" #nuspec_file \n\t\"${NUGET_OUTPUT_DIR}\" #output_dir \n\t\"${CMAKE_CURRENT_SOURCE_DIR}\" #working_dir\n\t) \n\n  IF (EMGU_NUGET_SIGN_FOUND)\n    EMGU_SIGN_NUGET(${PROJECT_NAME} \"${NUGET_OUTPUT_DIR}/${EMGU_NPP_NUGET_ID}.${EMGU_NPP_VERSION}.nupkg\")\n  ENDIF()\n\nADD_DEPENDENCIES(${PROJECT_NAME} Emgu.runtime.windows.cuda.rt.nuget)\n\nif(ENABLE_SOLUTION_FOLDERS)\n  set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER \"nuget\")\nendif() \n\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring Post-Build and Installation for Multiple Platforms - CMake\nDESCRIPTION: This CMake script manages the copying, stripping, linking, and installation of platform-dependent native binary files for EmguCV across iOS, Android, Linux, and macOS. It utilizes conditional checks to run different commands based on the build target, e.g., using INSTALL for iOS frameworks, add_custom_command for file operations on Android, and complex library handling logic on macOS (including lipo, install_name_tool, and dependency path adjustments). Dependencies include standard CMake and tools like lipo, cp, chmod, and install_name_tool (macOS). Inputs include architecture, library path variables, and conditional macros. Outputs are organized in platform- and architecture-specific directories. Limitations: The script assumes the existence of source and build files and relies on external CMake variables being set.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_128\n\nLANGUAGE: CMake\nCODE:\n```\n# Multiple platform install commands for iOS\nINSTALL(FILES\n  \"${IPHONE_UNIVERSAL_STATIC_LIB_FILE}\"\n  DESTINATION \"libs/iOS/\"\n  COMPONENT emgucv_binary)\nIF(IPHONESIMULATOR OR IPHONEOS)\n  ... [Omitted repeated INSTALL commands] ...\n  # Additional commented-out conditional INSTALL sections\nELSEIF(MAC_CATALYST)\n  ... [INSTALL commands for Catalyst configurations] ...\nENDIF()\n\nELSEIF (ANDROID)\n  add_custom_command(TARGET ${the_target}\n    POST_BUILD\n    COMMAND ${CMAKE_STRIP} libcvextern.so \n    WORKING_DIRECTORY \"${CMAKE_SOURCE_DIR}/libs${UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER}\"\n    COMMENT \"Stripping libcvextern.so from ${CMAKE_SOURCE_DIR}/libs${UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER}\")\n  add_custom_command(TARGET ${the_target}\n    POST_BUILD\n    COMMAND ${CMAKE_COMMAND} -E copy_if_different ${OPENCV_BUILD_INFO_VERSION_STRING} ${CMAKE_SOURCE_DIR}/libs${UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER}/${ANDROID_ABI}_version_string.inc\n    WORKING_DIRECTORY \"${CMAKE_BINARY_DIR}\"\n    COMMENT \"Copying build information from ${OPENCV_BUILD_INFO_VERSION_STRING} to ${CMAKE_SOURCE_DIR}/libs${UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER}/${ANDROID_ABI}_version_string.inc\")\n  #INSTALL(FILES ...)\nELSEIF (IS_UBUNTU OR IS_DEBIAN OR IS_RHEL)\n  IF (WITH_CUDA)\n    add_custom_command(TARGET ${the_target}\n      POST_BUILD\n      COMMAND cp -fP ${CMAKE_BINARY_DIR}/bin${UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER}/*.so ${CMAKE_BINARY_DIR}/bin${UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER}/*.so.* ${CMAKE_SOURCE_DIR}/libs${UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER}\n      COMMENT \"Copying file to ${CMAKE_SOURCEDIR}/libs${UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER}\")\n  ENDIF()\n  add_custom_command(TARGET ${the_target}\n    POST_BUILD\n    COMMAND ${CMAKE_COMMAND} -E copy_if_different ${OPENCV_BUILD_INFO_VERSION_STRING} ${CMAKE_SOURCE_DIR}/libs${UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER}/${EMGUCV_ARCH}_version_string.inc\n    WORKING_DIRECTORY \"${CMAKE_BINARY_DIR}\"\n    COMMENT \"Copying build information from ${OPENCV_BUILD_INFO_VERSION_STRING} to ${CMAKE_SOURCE_DIR}/libs${UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER}/${EMGUCV_ARCH}_version_string.inc\")\n  #INSTALL(FILES ...)\nELSEIF (APPLE)\n  SET_TARGET_PROPERTIES(${the_target}\n    PROPERTIES\n    XCODE_ATTRIBUTE_COPY_PHASE_STRIP \"YES\"\n    XCODE_ATTRIBUTE_STRIP_INSTALLED_PRODUCT \"YES\"\n    XCODE_ATTRIBUTE_STRIP_STYLE \"non-global\"\n    XCODE_ATTRIBUTE_STRIPFLAGS \"-x -u -r\"\n    XCODE_ATTRIBUTE_DEAD_CODE_STRIPPING \"YES\"\n  )\n  add_custom_command(TARGET ${the_target}\n    POST_BUILD\n    COMMAND mkdir -p ${UNMANAGED_LIBRARY_OUTPUT_PATH}/../arch\n    COMMENT \"Creating arch folder: ${UNMANAGED_LIBRARY_OUTPUT_PATH}/../arch\")\n  IF(EMGU_CV_WITH_DEPTHAI)  \n    ... [copying and lipo commands for libusb.dylib and dependencies] ...\n    add_custom_command(TARGET ${the_target}\n      POST_BUILD\n      COMMAND cp -f ${LIBUSB_PATH} ${UNMANAGED_LIBRARY_OUTPUT_PATH}/../arch/${LIBUSB_FILE_NAME}\n      COMMENT \"Copying file to ${UNMANAGED_LIBRARY_OUTPUT_PATH}/../arch/${LIBUSB_FILE_NAME}\")\n    ... [other install_name_tool, chmod, and lipo commands] ...\n    INSTALL(FILES\n      ${UNMANAGED_LIBRARY_OUTPUT_PATH}/../libusb-1.0.0.dylib\n      DESTINATION \"libs/runtimes/osx/native/\"\n      COMPONENT emgucv_binary)\n  ENDIF()\n  add_custom_command(TARGET ${the_target}\n    POST_BUILD\n    COMMAND ${CMAKE_COMMAND} -E copy_if_different ${OPENCV_BUILD_INFO_VERSION_STRING} ${CMAKE_SOURCE_DIR}/libs${UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER}/../${EMGUCV_ARCH}_version_string.inc\n    WORKING_DIRECTORY \"${CMAKE_BINARY_DIR}\"\n    COMMENT \"Copying build information from ${OPENCV_BUILD_INFO_VERSION_STRING} to ${CMAKE_SOURCE_DIR}/libs${UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER}/../${EMGUCV_ARCH}_version_string.inc\")\n  #INSTALL(FILES ...)\n  SET(CVEXTERN_AND_DEPENDENCY_DLLS ${CVEXTERN_DEPENDENCY_DLLS} \"libcvextern.dylib\")\n  FOREACH(CVEXTERN_DEPENDENCY_DLL ${CVEXTERN_AND_DEPENDENCY_DLLS})\n    GET_FILENAME_COMPONENT(CVEXTERN_DEPENDENCY_DLL_NAME ${CVEXTERN_DEPENDENCY_DLL} NAME_WE)\n    GET_FILENAME_COMPONENT(CVEXTERN_DEPENDENCY_DLL_EXT ${CVEXTERN_DEPENDENCY_DLL} EXT)\n    STRING(TOLOWER ${CVEXTERN_DEPENDENCY_DLL_EXT} CVEXTERN_DEPENDENCY_DLL_EXT_LOWER)\n    add_custom_command(TARGET ${the_target}\n      POST_BUILD\n      COMMAND rm -f ${UNMANAGED_LIBRARY_OUTPUT_PATH}/../${CVEXTERN_DEPENDENCY_DLL_NAME}${CVEXTERN_DEPENDENCY_DLL_EXT}\n      COMMENT \"Removing file ${UNMANAGED_LIBRARY_OUTPUT_PATH}/../${CVEXTERN_DEPENDENCY_DLL_NAME}${CVEXTERN_DEPENDENCY_DLL_EXT}\")\n    IF( (${CVEXTERN_DEPENDENCY_DLL_EXT_LOWER} STREQUAL \".dylib\") OR (${CVEXTERN_DEPENDENCY_DLL_EXT_LOWER} STREQUAL \".so\") ) \n      add_custom_command(TARGET ${the_target}\n        POST_BUILD\n        COMMAND cp -f ${UNMANAGED_LIBRARY_OUTPUT_PATH}/${CVEXTERN_DEPENDENCY_DLL_NAME}${CVEXTERN_DEPENDENCY_DLL_EXT} ${UNMANAGED_LIBRARY_OUTPUT_PATH}/../arch/${CVEXTERN_DEPENDENCY_DLL_NAME}_${CMAKE_SYSTEM_PROCESSOR}${CVEXTERN_DEPENDENCY_DLL_EXT}\n        COMMENT \"Copying file to ${UNMANAGED_LIBRARY_OUTPUT_PATH}/../arch/${CVEXTERN_DEPENDENCY_DLL_NAME}_${CMAKE_SYSTEM_PROCESSOR}${CVEXTERN_DEPENDENCY_DLL_EXT}\")\n      add_custom_command(TARGET ${the_target}\n        POST_BUILD\n        COMMAND lipo ${UNMANAGED_LIBRARY_OUTPUT_PATH}/../arch/${CVEXTERN_DEPENDENCY_DLL_NAME}_*${CVEXTERN_DEPENDENCY_DLL_EXT} -output ${UNMANAGED_LIBRARY_OUTPUT_PATH}/../${CVEXTERN_DEPENDENCY_DLL_NAME}${CVEXTERN_DEPENDENCY_DLL_EXT} -create\n        COMMENT \"Linking target for all architectures and outputing to ${UNMANAGED_LIBRARY_OUTPUT_PATH}/../${CVEXTERN_DEPENDENCY_DLL_NAME}${CVEXTERN_DEPENDENCY_DLL_EXT}\")\n      add_custom_command(TARGET ${the_target}\n        POST_BUILD\n        COMMAND chmod a+x ${UNMANAGED_LIBRARY_OUTPUT_PATH}/../${CVEXTERN_DEPENDENCY_DLL_NAME}${CVEXTERN_DEPENDENCY_DLL_EXT}\n        ... [and so on]\n\n```\n\n----------------------------------------\n\nTITLE: Setting iOS Specific Build Flags in CMake\nDESCRIPTION: This block executes if the target is iOS (`IOS`). It sets the general `IS_IOS_BUILD` flag to `ON`. Subsequently, it checks the `IOS_ARCH` variable against specific iOS architectures (i386, x86_64, armv7s, armv7, arm64) and sets corresponding boolean flags (`IS_IOS_I386_BUILD`, `IS_IOS_X86_64_BUILD`, etc.) to `ON` if a match is found. Status messages indicate which architecture-specific flag is set. Commented-out lines suggest intended usage with the `CHECK_BINARY_EXIST` macro.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_28\n\nLANGUAGE: cmake\nCODE:\n```\nELSEIF(IOS)\n  SET(IS_IOS_BUILD ON)\n  MESSAGE(STATUS \"IS_IOS_BUILD: ${IS_IOS_BUILD}\")\n  \n  SET(IS_IOS_I386_BUILD OFF)\n  IF(IS_IOS_BUILD AND (\"${IOS_ARCH}\" STREQUAL \"i386\"))\n    SET(IS_IOS_I386_BUILD ON)\n    MESSAGE(STATUS \"IS_IOS_I386_BUILD: ${IS_IOS_I386_BUILD}\")\n  ENDIF()\n  #CHECK_BINARY_EXIST(\"libs/iOS\" \"libcvextern_i386.a\" HAVE_IOS_I386 ${IS_IOS_I386_BUILD})\n  \n  SET(IS_IOS_X86_64_BUILD OFF)\n  IF(IS_IOS_BUILD AND (\"${IOS_ARCH}\" STREQUAL \"x86_64\"))\n    SET(IS_IOS_X86_64_BUILD ON)\n    MESSAGE(STATUS \"IS_IOS_X86_64_BUILD: ${IS_IOS_X86_64_BUILD}\")\n  ENDIF()\n  #CHECK_BINARY_EXIST(\"libs/iOS\" \"libcvextern_x86_64.a\" HAVE_IOS_X86_64 ${IS_IOS_X86_64_BUILD})\n  \n  SET(IS_IOS_ARMV7S_BUILD OFF)\n  IF(IS_IOS_BUILD AND (\"${IOS_ARCH}\" STREQUAL \"armv7s\"))\n    SET(IS_IOS_ARMV7S_BUILD ON)\n    MESSAGE(STATUS \"IS_IOS_ARMV7S_BUILD: ${IS_IOS_ARMV7S_BUILD}\")\n  ENDIF()\n  #CHECK_BINARY_EXIST(\"libs/iOS\" \"libcvextern_armv7s.a\" HAVE_IOS_ARMV7S ${IS_IOS_ARMV7S_BUILD})\n  \n  SET(IS_IOS_ARMV7_BUILD OFF)\n  IF(IS_IOS_BUILD AND (\"${IOS_ARCH}\" STREQUAL \"armv7\"))\n    SET(IS_IOS_ARMV7_BUILD ON)\n    MESSAGE(STATUS \"IS_IOS_ARMV7_BUILD: ${IS_IOS_ARMV7_BUILD}\")\n  ENDIF()\n  #CHECK_BINARY_EXIST(\"libs/iOS\" \"libcvextern_armv7.a\" HAVE_IOS_ARMV7 ${IS_IOS_ARMV7_BUILD})\n  \n  SET(IS_IOS_ARM64_BUILD OFF)\n  IF(IS_IOS_BUILD AND (\"${IOS_ARCH}\" STREQUAL \"arm64\"))\n    SET(IS_IOS_ARM64_BUILD ON)\n    MESSAGE(STATUS \"IS_IOS_ARM64_BUILD: ${IS_IOS_ARM64_BUILD}\")\n  ENDIF()\n  #CHECK_BINARY_EXIST(\"libs/iOS\" \"libcvextern_arm64.a\" HAVE_IOS_ARM64 ${IS_IOS_ARM64_BUILD})\n```\n\n----------------------------------------\n\nTITLE: Configuring Emgu.CV CUDA BLAS NuGet Packaging - CMake\nDESCRIPTION: This snippet conditionally sets up a CMake project to build the Emgu.CV CUDA BLAS runtime as a NuGet package for Windows desktop platforms (x86/x64), provided CUDA is enabled. It invokes custom CMake commands to build and optionally sign the package, adds a dependency on a related CUDA runtime NuGet, and places the target in the \"nuget\" solution folder if desired. Required dependencies are CMake, the Emgu.CV source/project files, valid CUDA installation, and optional signing tools. Inputs include project variables and conditionals, outputs are NuGet packages, with certain actions dependent on feature flags and environment variables.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/platforms/nuget/Emgu.runtime.windows.cuda.blas/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# --------------------------------------------------------\\n#  Copyright (C) 2004-2025 by EMGU Corporation. All rights reserved.\\n# --------------------------------------------------------\\n\\nIF (WIN32 AND (HAVE_WINDESKTOP_X86 OR HAVE_WINDESKTOP_X64) AND WITH_CUDA)\\n\\n  PROJECT(Emgu.runtime.windows.cuda.blas.nuget)\\n\\n  get_filename_component(NUGET_OUTPUT_DIR ${CMAKE_CURRENT_SOURCE_DIR} DIRECTORY)\\n\\n  BUILD_NUGET_PACKAGE(\\n    ${PROJECT_NAME} \\n\\t\"${EMGU_CV_SOURCE_DIR}/Emgu.CV/NetStandard/Emgu.CV.csproj\"  #csproj_file \\n\\t\"${CMAKE_CURRENT_SOURCE_DIR}/Package.nuspec\" #nuspec_file \\n\\t\"${NUGET_OUTPUT_DIR}\" #output_dir \\n\\t\"${CMAKE_CURRENT_SOURCE_DIR}\" #working_dir\\n\\t) \\n\\n  IF (EMGU_NUGET_SIGN_FOUND)\\n    EMGU_SIGN_NUGET(${PROJECT_NAME} \"${NUGET_OUTPUT_DIR}/${EMGU_CUDA_BLAS_NUGET_ID}.${EMGU_CUDA_BLAS_VERSION}.nupkg\")\\n  ENDIF()\\n\\nADD_DEPENDENCIES(${PROJECT_NAME} Emgu.runtime.windows.cuda.rt.nuget)\\n\\nif(ENABLE_SOLUTION_FOLDERS)\\n  set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER \"nuget\")\\nendif() \\n\\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring the tesseract_ccutil Project in CMake\nDESCRIPTION: Sets up the 'tesseract_ccutil' static library project. It defines the project, extracts version information (similar to the global version extraction), configures a version header file from a template, sets compile definitions (including PACKAGE_VERSION), adds MSVC/Windows Runtime specific definitions and includes, collects source and header files using file(GLOB), sets include directories, creates source groups for IDE organization, and finally defines the static library target. It then applies common properties using the SET_TESSERACT_PROJECT_PROPERTY macro.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/tesseract/libtesseract/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\n#ccutil\nPROJECT(tesseract_ccutil)\n# Get version with components from VERSION file.\nfile(STRINGS \"${TESSERACT_DIR}/VERSION\" VERSION_PLAIN)\nstring(REGEX REPLACE \"^([^.]*)\\\\..*\" \"\\\\1\" VERSION_MAJOR ${VERSION_PLAIN})\nstring(REGEX REPLACE \"^[^.]*\\\\.([^.]*)\\\\..*\" \"\\\\1\" VERSION_MINOR ${VERSION_PLAIN})\nstring(REGEX REPLACE \"^[^.]*\\\\.[^.]*\\\\.([0-9]*).*\" \"\\\\1\" VERSION_PATCH ${VERSION_PLAIN})\n\n# Provide also same macro names as autoconf (see configure.ac).\nset(GENERIC_MAJOR_VERSION ${VERSION_MAJOR})\nset(GENERIC_MINOR_VERSION ${VERSION_MINOR})\nset(GENERIC_MICRO_VERSION ${VERSION_PATCH})\nSET(PACKAGE_VERSION ${VERSION_PLAIN})\n#MESSAGE(STATUS \"tesseract version source file: ${PROJECT_SOURCE_DIR}/${TESSERACT_SRC_DIR}/api/tess_version.h.in\")\n#MESSAGE(STATUS \"tesseract version output file: ${PROJECT_SOURCE_DIR}/${TESSERACT_SRC_DIR}/api/tess_version.h\")\nconfigure_file(\n    ${PROJECT_SOURCE_DIR}/${TESSERACT_INCLUDE_DIR}/tesseract/version.h.in\n    ${PROJECT_SOURCE_DIR}/${TESSERACT_INCLUDE_DIR}/tesseract/version.h @ONLY)\nSET_SOURCE_FILES_PROPERTIES(${PROJECT_SOURCE_DIR}/${TESSERACT_SRC_DIR}/ccutil/tessdatamanager.cpp  PROPERTIES COMPILE_DEFINITIONS PACKAGE_VERSION=\"${PACKAGE_VERSION}\")\n#add_definitions(-DPACKAGE_VERSION=\"${PACKAGE_VERSION}\")\t\nIF(MSVC)\n  add_definitions(-D__MSW32__ -W0)\n  #include_directories(\"${TESSERACT_SRC_DIR}/vs2010/include\")\n  \n  IF(NETFX_CORE)\n    add_definitions(-D_CRT_SECURE_NO_WARNINGS) \n\tIF(\"8.1\" STREQUAL \"${CMAKE_SYSTEM_VERSION}\")\n\t\tadd_definitions(-FI\"${CMAKE_CURRENT_SOURCE_DIR}/${TESSERACT_DIR}/../windows_runtime_macro_81.h\")\n\tELSEIF(\"10.0\" STREQUAL \"${CMAKE_SYSTEM_VERSION}\")\n\t\tadd_definitions(-FI\"${CMAKE_CURRENT_SOURCE_DIR}/${TESSERACT_DIR}/../windows_runtime_macro_100.h\")\n\tENDIF()\n  ENDIF()\nENDIF()\n\nfile(GLOB tesseract_ccutil_srcs \"${TESSERACT_SRC_DIR}/ccutil/*.cpp\")\n#file(GLOB tesseract_ccutil_srcs_excludes \"${TESSERACT_SRC_DIR}/ccutil/scanutils.cpp\")\n#LIST(REMOVE_ITEM tesseract_ccutil_srcs ${tesseract_ccutil_srcs_excludes})\nfile(GLOB tesseract_ccutil_hdrs \"${TESSERACT_SRC_DIR}/ccutil/*.h\")\n\ninclude_directories(\"${PROJECT_SOURCE_DIR}/${TESSERACT_INCLUDE_DIR}/\")\n\nsource_group(\"Src\" FILES ${tesseract_ccutil_srcs})\nsource_group(\"Include\" FILES ${tesseract_ccutil_hdrs})\n\nIF(MSVC)\n  #include_directories(\"${TESSERACT_SRC_DIR}/vs2010/include\")\n  include_directories(\"${TESSERACT_SRC_DIR}/api/\")\n  #add_definitions(-D__MSW32__ -W0 -DWINDLLNAME=\\\"\\\\\"tesseract\\\\\"\\\")\n  add_definitions(-D__MSW32__ -W0)\nENDIF()\n\nadd_library(${PROJECT_NAME} STATIC ${tesseract_ccutil_srcs} ${tesseract_ccutil_hdrs})\n\nSET_TESSERACT_PROJECT_PROPERTY(${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Including Windows MSVC Runtimes in CMake Build\nDESCRIPTION: Adds subdirectories containing the CMake build configurations for the Windows MSVC runtime components for x86, x64, and ARM64 architectures to the overall EmguCV project build. This command delegates the build process for these specific parts to their respective `CMakeLists.txt` files.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/platforms/nuget/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# --------------------------------------------------------\n#  Copyright (C) 2004-2025 by EMGU Corporation. All rights reserved.\n# --------------------------------------------------------\n\nADD_SUBDIRECTORY(\"Emgu.runtime.windows.msvc.rt.x86\")\nADD_SUBDIRECTORY(\"Emgu.runtime.windows.msvc.rt.x64\")\nADD_SUBDIRECTORY(\"Emgu.runtime.windows.msvc.rt.arm64\")\n```\n\n----------------------------------------\n\nTITLE: Conditional Configuration for OpenVINO Inference Engine\nDESCRIPTION: If the `WITH_INF_ENGINE` option is enabled, this block adds the Intel 64-bit library directory for the OpenVINO Inference Engine to the linker path. The include directory is expected to be set in the `IE_INCLUDE_DIR` variable.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/tests/cvextern_test/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nIF(WITH_INF_ENGINE)\n\t#SET(INF_ENGINE_LIB_DIRS )\n\t#link_directories(\"${INF_ENGINE_LIB_DIRS}/Release\")\n\tlink_directories(\"${IE_INCLUDE_DIR}/../lib/intel64/\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Detecting ZIP Tool and Adding ZIP Generator in CMake\nDESCRIPTION: This CMake snippet checks if the `CPACK_GENERATOR` variable is already set. If not, it searches for the 'zip' command-line tool using `FIND_PROGRAM`. If 'zip' is found, it prints its path and adds 'ZIP' to the `CPACK_GENERATOR` list, enabling the creation of ZIP archives via CPack.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_98\n\nLANGUAGE: CMake\nCODE:\n```\nIF(NOT CPACK_GENERATOR)\n  MESSAGE(STATUS \"Checking for CPACK build type...\")\n  FIND_PROGRAM(ZIP_CMD zip)\n  IF (ZIP_CMD)\n    # ----------------------------------------------------------------------------\n    #  Building .deb package for Debian \n    # ----------------------------------------------------------------------------\n    MESSAGE(STATUS \"FOUND zip: ${ZIP_CMD}\")\n    LIST(APPEND CPACK_GENERATOR ZIP)\n  ENDIF()\n```\n\n----------------------------------------\n\nTITLE: Defining Installation Rules for Emgu CV Artifacts using CMake\nDESCRIPTION: This block defines multiple installation rules using the `INSTALL` command. It specifies files and their destination paths for the installation process. Rules cover installing the OpenCV license, platform-specific solution files (Android, iOS, Mac, CrossPlatform) for examples, pre-built native libraries for macOS and Mac Catalyst, and core source/build files (`.snk`, `CommonAssemblyInfo.cs`, `Directory.Build.props`, license). The installation is componentized (`emgucv_example_source`, `emgucv_binary`, `emgucv_source`) and conditional based on detected platforms (`HAVE_ANDROID`, `HAVE_IOS`, `HAVE_MACOS`, etc.) and build configurations.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_91\n\nLANGUAGE: cmake\nCODE:\n```\nINSTALL(\n  FILES\n  \"opencv/LICENSE\"\n  DESTINATION \"lib\"\n  COMPONENT emgucv_example_source\n  RENAME \"opencv.license.txt\"\n  )    \n\nIF(HAVE_ANDROID)\n  INSTALL(\n    FILES\n    \"Solution/Android/Emgu.CV.Android.Example.sln\"\n    \"Solution/Android/Emgu.CV.Android.sln\"\n    DESTINATION \"Solution/Android\"\n    COMPONENT emgucv_example_source\n    )\n\nENDIF()\n\nIF(HAVE_IOS)\n  INSTALL(\n    FILES\n    \"Solution/iOS/Emgu.CV.iOS.Example.sln\"\n    \"Solution/iOS/Emgu.CV.iOS.Maui.sln\"\n    DESTINATION \"Solution/iOS\"\n    COMPONENT emgucv_example_source\n    )\nENDIF()\n\nIF(HAVE_MACOS)\n  INSTALL(\n    FILES\n    \"Solution/Mac/Emgu.CV.Mac.Example.sln\"\n    DESTINATION \"Solution/Mac\"\n    COMPONENT emgucv_example_source\n    )\n  IF (NOT IS_MACOS_BUILD)\n    INSTALL(\n      FILES\n      \"libs/runtimes/osx/native/libcvextern.dylib\"\n      DESTINATION \"libs/runtimes/osx/native\"\n      COMPONENT emgucv_binary\n      )\n  ENDIF()\nENDIF()\n\nIF(HAVE_MAC_CATALYST)\n  INSTALL(\n    FILES\n    \"Solution/Mac/Emgu.CV.Mac.Maui.sln\"\n    DESTINATION \"Solution/Mac\"\n    COMPONENT emgucv_example_source\n    )\n  IF (HAVE_MAC_CATALYST_ARM64)\n    INSTALL(\n      FILES\n      \"libs/iOS/libcvextern_catalyst_arm64.a\"\n      DESTINATION \"libs/iOS\"\n      COMPONENT emgucv_binary\n      )\n  ENDIF()\n  IF (HAVE_MAC_CATALYST_X86_64)\n    INSTALL(\n      FILES\n      \"libs/iOS/libcvextern_catalyst_x86_64.a\"\n      DESTINATION \"libs/iOS\"\n      COMPONENT emgucv_binary\n      )\n  ENDIF()\nENDIF()\n\nIF (TARGET Emgu.CV.runtime.maui)\n  INSTALL(\n    FILES\n    \"Solution/CrossPlatform/Emgu.CV.CrossPlatform.sln\"\n\\t\"Solution/CrossPlatform/Emgu.CV.sln\"\n    DESTINATION \"Solution/CrossPlatform\"\n    COMPONENT emgucv_example_source\n    )\nENDIF()\n\nINSTALL(\n  FILES\n  \"${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.snk\"\n  \"${CMAKE_CURRENT_SOURCE_DIR}/CommonAssemblyInfo.cs\"\n  \"${CMAKE_CURRENT_SOURCE_DIR}/Directory.Build.props\"\n  \"${CMAKE_CURRENT_SOURCE_DIR}/${LICENSE_FILE_NAME}\"\n  DESTINATION .\n  COMPONENT emgucv_source\n  )\n  \n#IF (EMGU_CV_WITH_FREETYPE)\n#  IF (ANDROID)  \n\\t#INSTALL(EXPORT freetype DESTINATION lib)\n#\n```\n\n----------------------------------------\n\nTITLE: Including Windows and UWP Runtimes in CMake Build\nDESCRIPTION: Adds the subdirectories containing the CMake build configurations for the general EmguCV Windows runtime and the Universal Windows Platform (UWP) runtime to the project build.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/platforms/nuget/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nADD_SUBDIRECTORY(\"Emgu.CV.runtime.windows\")\nADD_SUBDIRECTORY(\"Emgu.CV.runtime.uwp\")\n```\n\n----------------------------------------\n\nTITLE: Code Sign Setup on Windows - CMake\nDESCRIPTION: Includes the FindCodeSign CMake module on Windows to set up parameters and configuration for code signing of build artifacts, which is necessary for distributing signed binaries.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nIF(WIN32)\n  INCLUDE (FindCodeSign)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Conditionally Installing Emgu CV Source Files using CMake INSTALL\nDESCRIPTION: This CMake script uses the `INSTALL` command to copy specific source file types (C#, Shared Project, Project Items, Resources) from the current source directory (`${CMAKE_CURRENT_SOURCE_DIR}`) to the installation root (`.`). The installation is associated with the 'emgucv_source' component and is conditional, executing only if either the `EMGU_CV_BUILD` or `EMGU_CV_EXAMPLE_BUILD` CMake variable is true. It explicitly excludes patterns like `.svn`, `obj`, `CMakeFiles`, and project-specific build directories to avoid installing unnecessary build artifacts or version control metadata.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.OCR/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nIF(EMGU_CV_BUILD OR EMGU_CV_EXAMPLE_BUILD)\n\nINSTALL(\n  DIRECTORY\n  ${CMAKE_CURRENT_SOURCE_DIR}\n  DESTINATION .\n    COMPONENT emgucv_source\n  FILES_MATCHING \n  PATTERN \"*.cs\"\n  PATTERN \"*.shproj\"\n  PATTERN \"*.projitems\"\n  PATTERN \"*.resx\"\n  #PATTERN \"tessdata/eng.*\"\n  PATTERN \".svn\" EXCLUDE\n  PATTERN \"obj\" EXCLUDE\n  PATTERN \"CMakeFiles\" EXCLUDE\n  PATTERN \"${PROJECT_NAME}.dir\" EXCLUDE\n)\n\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Creating CUDA Hough Lines Detector Property Accessors in EmguCV - CMake\nDESCRIPTION: Uses CMake macro to generate .NET wrapper properties for cv::cuda::HoughLinesDetector, exposing key Hough transform tunables for CUDA-accelerated line detection. Requires OpenCV CUDA image processing module and EmguCV Cuda support. Parameters include rho/angle resolution, threshold, vote sorting, and output limits; all become accessible in the managed wrapper.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_58\n\nLANGUAGE: CMake\nCODE:\n```\nCREATE_OCV_CLASS_PROPERTY( \n    \"cudaimgproc/cuda_hough_lines_detector_property\" \n    \"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV.Cuda/Imgproc/CudaHoughLinesDetector.g.cs\"\n    \"cv::cuda::HoughLinesDetector\" \n    \"CudaHoughLinesDetector\" \n    \"Rho;Theta;Threshold;DoSort;MaxLines\" \n    \"float;float;int;bool;int\" \n    \"prop;prop;prop;Prop;Prop\"\n    \"Rho;Theta;Threshold;DoSort;MaxLines\" \n    \"float;float;int;bool;int\"\n    \"Distance resolution of the accumulator in pixels;\n  Angle resolution of the accumulator in radians;\n  Accumulator threshold parameter. Only those lines are returned that get enough;\n  Performs lines sort by votes;\n  Maximum number of output lines\"\n    \"Emgu.CV.Cuda\"\n    \"CudaInvoke\"\n    \"CudaHoughLinesDetector\"\n\t\"\"\n    \"#include \\\"cudaimgproc_c.h\\\"\"\n\t\"\"\n\t\"\"\n\t${HAVE_opencv_cudaimgproc})\n```\n\n----------------------------------------\n\nTITLE: Displaying CUDA, NPP, and cuDNN Version Information with CMake\nDESCRIPTION: Uses the CMake `MESSAGE` command with `STATUS` level to print the detected major, minor, and build/patch versions of NVIDIA Performance Primitives (NPP), CUDA Toolkit, and cuDNN library during the CMake configuration phase. This aids in verifying the build environment setup. It also displays the combined `EMGU_CUDA_VERSION` variable. Commented-out lines indicate potential previous or alternative version checks.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_74\n\nLANGUAGE: cmake\nCODE:\n```\n\tMESSAGE(STATUS \"<<<<<<<<<<<<<<<< npp_minor: ${npp_minor} >>>>>>>>>>>>>>>>>>>>>> \")\n\tMESSAGE(STATUS \"<<<<<<<<<<<<<<<< npp_build: ${npp_build} >>>>>>>>>>>>>>>>>>>>>> \")\n\tMESSAGE(STATUS \"<<<<<<<<<<<<<<<< cuda_major: ${cuda_major} >>>>>>>>>>>>>>>>>>>>>> \")\n\tMESSAGE(STATUS \"<<<<<<<<<<<<<<<< cuda_minor: ${cuda_minor} >>>>>>>>>>>>>>>>>>>>>> \")\n\tMESSAGE(STATUS \"<<<<<<<<<<<<<<<< CUDA_VERSION: ${CUDA_VERSION} >>>>>>>>>>>>>>>>>>>>>> \")\n\t#MESSAGE(STATUS \"<<<<<<<<<<<<<<<< CUDA_VERSION_MAJOR: ${CUDA_VERSION_MAJOR} >>>>>>>>>>>>>>>>>>>>>> \")\n\t#MESSAGE(STATUS \"<<<<<<<<<<<<<<<< CUDA_VERSION_MINOR: ${CUDA_VERSION_MINOR} >>>>>>>>>>>>>>>>>>>>>> \")\n\t#MESSAGE(STATUS \"<<<<<<<<<<<<<<<< cuda_build: ${cuda_build} >>>>>>>>>>>>>>>>>>>>>> \")\n    MESSAGE(STATUS \"<<<<<<<<<<<<<<<< cudnn_version_major: ${CUDNN_VERSION_MAJOR} >>>>>>>>>>>>>>>>>>>>>> \")\n\tMESSAGE(STATUS \"<<<<<<<<<<<<<<<< cudnn_version_minor: ${CUDNN_VERSION_MINOR} >>>>>>>>>>>>>>>>>>>>>> \")\n\tMESSAGE(STATUS \"<<<<<<<<<<<<<<<< cudnn_version_patch: ${CUDNN_VERSION_PATCH} >>>>>>>>>>>>>>>>>>>>>> \")\n\tMESSAGE(STATUS \"<<<<<<<<<<<<<<<< EMGU_CUDA_VERSION: ${EMGU_CUDA_VERSION} >>>>>>>>>>>>>>>>>>>>>> \")\n```\n\n----------------------------------------\n\nTITLE: Defining Emgu CV CUDA DNN Advanced NuGet Package Build (CMake)\nDESCRIPTION: This CMake script defines the project `Emgu.runtime.windows.cuda.dnn.adv.nuget`. It builds the NuGet package using the `BUILD_NUGET_PACKAGE` custom function, referencing a C# project (`Emgu.CV.csproj`) and a `.nuspec` file. The build is conditional on WIN32 platform, specific Windows desktop architectures (HAVE_WINDESKTOP_X86/X64), and the WITH_CUDNN flag being enabled. It also includes optional NuGet package signing via `EMGU_SIGN_NUGET` if `EMGU_NUGET_SIGN_FOUND` is true and sets up dependencies on the base CUDA DNN NuGet package (`Emgu.runtime.windows.cuda.dnn.nuget`). Finally, it organizes the target in a 'nuget' solution folder if `ENABLE_SOLUTION_FOLDERS` is active.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/platforms/nuget/Emgu.runtime.windows.cuda.dnn.adv/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# --------------------------------------------------------\n#  Copyright (C) 2004-2025 by EMGU Corporation. All rights reserved.\n# --------------------------------------------------------\n\nIF (WIN32 AND (HAVE_WINDESKTOP_X86 OR HAVE_WINDESKTOP_X64) AND WITH_CUDNN)\n\nPROJECT(Emgu.runtime.windows.cuda.dnn.adv.nuget)\n\n  get_filename_component(NUGET_OUTPUT_DIR ${CMAKE_CURRENT_SOURCE_DIR} DIRECTORY)\n\n  BUILD_NUGET_PACKAGE(\n    ${PROJECT_NAME} \n\t\"${EMGU_CV_SOURCE_DIR}/Emgu.CV/NetStandard/Emgu.CV.csproj\"  #csproj_file \n\t\"${CMAKE_CURRENT_SOURCE_DIR}/Package.nuspec\" #nuspec_file \n\t\"${NUGET_OUTPUT_DIR}\" #output_dir \n\t\"${CMAKE_CURRENT_SOURCE_DIR}\" #working_dir\n\t) \n\n  IF (EMGU_NUGET_SIGN_FOUND)\n    EMGU_SIGN_NUGET(${PROJECT_NAME} \"${NUGET_OUTPUT_DIR}/${EMGU_CUDNN_ADV_NUGET_ID}.${EMGU_CUDNN_VERSION}.nupkg\")\n  ENDIF()\n\n  ADD_DEPENDENCIES(${PROJECT_NAME} Emgu.runtime.windows.cuda.dnn.nuget)\n\nif(ENABLE_SOLUTION_FOLDERS)\n  set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER \"nuget\")\nendif() \n\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Adding Platform-Specific Subdirectories with CMake - CMake\nDESCRIPTION: This CMake snippet adds four platform-specific subdirectories ('iOS', 'Android', 'Mac', and 'UI') to the build process using the ADD_SUBDIRECTORY command. Each call ensures that CMake processes the listed directories when generating project build files, which relies on those directories containing their own CMakeLists.txt files. Inputs are folder paths relative to this CMake file. No additional dependencies beyond CMake are required. This pattern helps modularize large cross-platform codebases by separating platform-specific logic.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Runtime/Maui/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# --------------------------------------------------------\\n#  Copyright (C) 2004-2025 by EMGU Corporation. All rights reserved.\\n# --------------------------------------------------------\\n\\nADD_SUBDIRECTORY(iOS)\\nADD_SUBDIRECTORY(Android)\\nADD_SUBDIRECTORY(Mac)\\nADD_SUBDIRECTORY(UI)\\n\n```\n\n----------------------------------------\n\nTITLE: Adding Include Directories for Optional OpenCV Modules\nDESCRIPTION: Iterates through a list of potential OpenCV module names (`OPENCV_MODULE_NAME_CANDIDATES`). For each module, if it's available (`HAVE_opencv_<module>`), it attempts to find and add its include directory to the `cvextern_test` target's include path. It checks several possible locations: the module's source directory, the main modules directory, and the extra modules directory.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/tests/cvextern_test/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nFOREACH(CVEXTERN_OPTIONAL_DEP ${OPENCV_MODULE_NAME_CANDIDATES})\n  IF (HAVE_opencv_${CVEXTERN_OPTIONAL_DEP})\n    IF ( (DEFINED opencv_${CVEXTERN_OPTIONAL_DEP}_SOURCE_DIR) AND (EXISTS ${opencv_${CVEXTERN_OPTIONAL_DEP}_SOURCE_DIR}/include) )\n      INCLUDE_DIRECTORIES(\"${opencv_${CVEXTERN_OPTIONAL_DEP}_SOURCE_DIR}/include\")\n      MESSAGE(STATUS \"Include directory for cvextern_test:  ${opencv_${CVEXTERN_OPTIONAL_DEP}_SOURCE_DIR}/include\")\n    ELSEIF (EXISTS \"${OPENCV_MODULES_DIR}/${CVEXTERN_OPTIONAL_DEP}/include\")\n      INCLUDE_DIRECTORIES(\"${OPENCV_MODULES_DIR}/${CVEXTERN_OPTIONAL_DEP}/include\")\n      MESSAGE(STATUS \"Include directory for cvextern_test:  ${OPENCV_MODULES_DIR}/${CVEXTERN_OPTIONAL_DEP}/include\")\n    ELSEIF (EXISTS \"${OPENCV_EXTRA_MODULES_PATH}/${CVEXTERN_OPTIONAL_DEP}/include\")\n      INCLUDE_DIRECTORIES(\"${OPENCV_EXTRA_MODULES_PATH}/${CVEXTERN_OPTIONAL_DEP}/include\")\n      MESSAGE(STATUS \"Include directory for cvextern_test:  ${OPENCV_EXTRA_MODULES_PATH}/${CVEXTERN_OPTIONAL_DEP}/include\")\n    ENDIF()\n  ENDIF()\nENDFOREACH()\n```\n\n----------------------------------------\n\nTITLE: Installing Debian Runtime Project Files using CMake\nDESCRIPTION: This CMake snippet installs the Debian-specific runtime project files (`Emgu.CV.Runtime.Debian.shproj` and `Emgu.CV.Runtime.Debian.projitems`) from the `Debian` subdirectory. Files are copied to the `Emgu.CV.Runtime` destination directory as part of the `emgucv_source` component. It excludes `.svn`, `obj`, and `CMakeFiles` directories/patterns during installation.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Runtime/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n\t\n  INSTALL(\n    DIRECTORY\n    ${CMAKE_CURRENT_SOURCE_DIR}/Debian\n    DESTINATION Emgu.CV.Runtime\n    COMPONENT emgucv_source\n    FILES_MATCHING \n\tPATTERN \"Emgu.CV.Runtime.Debian.shproj\"\n\tPATTERN \"Emgu.CV.Runtime.Debian.projitems\"\n    PATTERN \".svn\" EXCLUDE\n    PATTERN \"obj\" EXCLUDE\n    PATTERN \"CMakeFiles\" EXCLUDE\n    )\n```\n\n----------------------------------------\n\nTITLE: Installing Windows Runtime Project Files using CMake\nDESCRIPTION: This CMake snippet installs the Windows-specific runtime project files (`Emgu.CV.Runtime.Windows.shproj` and `Emgu.CV.Runtime.Windows.projitems`) from the `Windows` subdirectory. Files are copied to the `Emgu.CV.Runtime` destination directory as part of the `emgucv_source` component. It excludes `.svn`, `obj`, and `CMakeFiles` directories/patterns during installation.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Runtime/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n  INSTALL(\n    DIRECTORY\n    ${CMAKE_CURRENT_SOURCE_DIR}/Windows\n    DESTINATION Emgu.CV.Runtime\n    COMPONENT emgucv_source\n    FILES_MATCHING \n\tPATTERN \"Emgu.CV.Runtime.Windows.shproj\"\n\tPATTERN \"Emgu.CV.Runtime.Windows.projitems\"\n    PATTERN \".svn\" EXCLUDE\n    PATTERN \"obj\" EXCLUDE\n    PATTERN \"CMakeFiles\" EXCLUDE\n    )\n```\n\n----------------------------------------\n\nTITLE: Conditional Linking of PNG Library\nDESCRIPTION: Checks if PNG support is enabled (`WITH_PNG`) and if the PNG library is being built as part of this project (`BUILD_PNG`). If both conditions are true, it links the `cvextern_test` target against the `libpng` library.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/tests/cvextern_test/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_PNG AND BUILD_PNG)\n  target_link_libraries(${the_target} libpng)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Enabling SSE Optimizations\nDESCRIPTION: Checks if the `EMGU_ENABLE_SSE` option is enabled. If true, it adds the `__EMGU_ENABLE_SSE__` preprocessor definition. For MSVC compiler on 32-bit Windows (excluding Intel Compiler), it adds the `/arch:SSE2` flag for SSE2 optimizations. On non-Windows, non-Emscripten systems, it adds the `-latomic` flag to the CXX flags, likely for atomic operations used within SSE-enabled code.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/tests/cvextern_test/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nIF(EMGU_ENABLE_SSE)\n  ADD_DEFINITIONS(-D__EMGU_ENABLE_SSE__)\n  IF(MSVC AND EMGUCV_ARCH MATCHES \"win32\" AND (NOT CV_ICC)) \n    SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /arch:SSE2\")        ## Optimization\n  ENDIF()\n  IF ((NOT WIN32) AND NOT (\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"Emscripten\"))\n    SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -latomic\")\n  ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Suppressing Unused Function Warnings for GCC\nDESCRIPTION: Checks if the C++ compiler is GCC (`CMAKE_COMPILER_IS_GNUCXX`). If it is, it appends the `-Wno-unused-function` flag to the C compiler flags (`CMAKE_C_FLAGS`) to suppress warnings about unused functions.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/tests/cvextern_test/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_COMPILER_IS_GNUCXX)\n  set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -Wno-unused-function\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Post-Build Binary Signing Target for Windows with CMake\nDESCRIPTION: Initializes `EMGUCV_POST_PROCESS_BINARY` as empty, then conditionally defines an MSBuild `<Target>` named `PostProcessBinary` if code signing tools are found (`EMGU_SIGN_FOUND`) and the build is for Windows (`WIN32`). This target runs after the standard `PostBuildEvent`. It converts the paths of the signing executables (`EMGU_SIGN_EXECUTABLE`, `SIGNTOOL_EXECUTABLE`) to native Windows paths, creates a 'signed' output directory, and executes the `EMGU_SIGN_EXECUTABLE` command to sign the compiled assembly (`$(OutputPath)$(AssemblyName).dll`). The resulting target definition is stored in `EMGUCV_POST_PROCESS_BINARY` for later use, likely injection into a `.csproj` file.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_83\n\nLANGUAGE: cmake\nCODE:\n```\n# Sign the binary\n  SET(EMGUCV_POST_PROCESS_BINARY \"\")\n  IF(EMGU_SIGN_FOUND AND WIN32)    \n    file(TO_NATIVE_PATH ${EMGU_SIGN_EXECUTABLE} EMGU_SIGN_EXECUTABLE_NATIVE_PATH)\n    file(TO_NATIVE_PATH ${SIGNTOOL_EXECUTABLE} SIGNTOOL_EXECUTABLE_NATIVE_PATH)\n    SET(EMGUCV_POST_PROCESS_BINARY \"${EMGUCV_POST_PROCESS_BINARY}\n    <Target Name=\\\"PostProcessBinary\\\" AfterTargets=\\\"PostBuildEvent\\\" Condition=\\\"Exists('${EMGU_SIGN_EXECUTABLE_NATIVE_PATH}')\\\">\n      <Message Text=\\\"Signing $(OutputPath)$(AssemblyName).dll\\\" Importance=\\\"high\\\" />\n      <MakeDir Directories=\\\"$(OutputPath)\\\\signed\\\"/>\n      <Exec Command='${EMGU_SIGN_EXECUTABLE_NATIVE_PATH} \\\"$(OutputPath)$(AssemblyName).dll\\\" \\\"$(OutputPath)signed\\\" \\\"${SIGNTOOL_EXECUTABLE_NATIVE_PATH}\\\"' WorkingDirectory=\\\"$(OutputPath)\\\" />\n    </Target>\")\n  ENDIF()\n```\n\n----------------------------------------\n\nTITLE: Setting Windows NuGet Package Title in CMake\nDESCRIPTION: This snippet constructs the title for the Emgu CV Windows runtime NuGet package. It uses the previously determined architecture suffix (`EMGUCV_NUGET_TITLE_ARCH`), strips whitespace, and appends a descriptive suffix \"runtime for windows\".\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_69\n\nLANGUAGE: cmake\nCODE:\n```\nSET(EMGUCV_WINDOWS_NUGET_TITLE \"EMGU CV ${EMGUCV_NUGET_TITLE_ARCH}\")\n#SET(EMGUCV_WINDOWS_NUGET_TITLE \"EMGU CV ${EMGUCV_NUGET_TITLE_ARCH}\")\nSTRING(STRIP \"${EMGUCV_WINDOWS_NUGET_TITLE}\" EMGUCV_WINDOWS_NUGET_TITLE)\nSET(EMGUCV_WINDOWS_NUGET_TITLE \"${EMGUCV_WINDOWS_NUGET_TITLE} runtime for windows\")\n```\n\n----------------------------------------\n\nTITLE: Setting macOS NuGet Package Title in CMake\nDESCRIPTION: This CMake snippet sets the title for the Emgu CV macOS runtime NuGet package. It initializes the title, strips potential whitespace, and appends the descriptive suffix \"runtime for MacOS\".\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_71\n\nLANGUAGE: cmake\nCODE:\n```\nSET(EMGUCV_MACOS_NUGET_TITLE \"EMGU CV\")\nSTRING(STRIP \"${EMGUCV_MACOS_NUGET_TITLE}\" EMGUCV_MACOS_NUGET_TITLE)\nSET(EMGUCV_MACOS_NUGET_TITLE \"${EMGUCV_MACOS_NUGET_TITLE} runtime for MacOS\")\n```\n\n----------------------------------------\n\nTITLE: Handling Optional PROJ.4 Dependency in CMake\nDESCRIPTION: This section manages the optional dependency on the PROJ.4 library. It uses a cache variable `WITH_PROJ4` (defaulting to TRUE) to control whether PROJ.4 support is included. If enabled, it uses `FIND_PACKAGE(PROJ4)` to locate the library. If found, it adds the `HAVE_LIBPROJ=1` definition, includes the PROJ.4 include directory, and specifically checks for the existence of `projects.h`, adding `HAVE_PROJECTS_H=1` if found or issuing a fatal error if not.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/libgeotiff/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\n# PROJ.4 support - optional, default=ON\nSET(WITH_PROJ4 TRUE CACHE BOOL \"Choose if PROJ.4 support should be built\")\n\nIF(WITH_PROJ4)\n    FIND_PACKAGE(PROJ4)\n\n    IF(PROJ4_FOUND)\n        ADD_DEFINITIONS(-DHAVE_LIBPROJ=1)\n        INCLUDE_DIRECTORIES(${PROJ4_INCLUDE_DIR})\n\n        IF(EXISTS \"${PROJ4_INCLUDE_DIR}/projects.h\")\n            MESSAGE(STATUS \"Looking for projects.h header from PROJ.4 library - found\")\n            ADD_DEFINITIONS(-DHAVE_PROJECTS_H=1)\n            INCLUDE_DIRECTORIES(${PROJ4_INCLUDE_DIR_2})\n        ELSE()\n            MESSAGE(FATAL_ERROR \"Looking for projects.h from PROJ.4 library - not found\")\n        ENDIF()\n    ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Setting NuGet Runtime Tags and Release Notes in CMake\nDESCRIPTION: This CMake snippet checks if the `OPENCV_EXTRA_MODULES_PATH` variable is empty. If it is, it assumes a 'mini' build lacking extra modules, sets `EMGUCV_RUNTIME_EXTRA_TAG` to \".mini\", and defines a corresponding release note in `EMGUCV_MINI_RELEASE_NOTE`. Otherwise (if extra modules are included), it sets the tag to empty and clears the release note.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_55\n\nLANGUAGE: cmake\nCODE:\n```\nIF( \"${OPENCV_EXTRA_MODULES_PATH}\" STREQUAL \"\" )\n  SET(EMGUCV_RUNTIME_EXTRA_TAG \".mini\")\n  SET(EMGUCV_MINI_RELEASE_NOTE \"This is the mini release that only contains the minimum amount of Open CV modules. For full release that contains all Open CV modules, use a release that is not labeled 'mini'.\")\nELSE()\n  SET(EMGUCV_RUNTIME_EXTRA_TAG \"\")\n  SET(EMGUCV_MINI_RELEASE_NOTE \"\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Conditional NEON Disable for ARM64 Debian (Commented Out)\nDESCRIPTION: This commented-out block aimed to disable NEON optimizations within the PNG library (`-DPNG_ARM_NEON_OPT=0`) specifically for builds targeting Debian on ARM64 (`IS_DEBIAN_ARM64_BUILD`).\nSOURCE: https://github.com/emgucv/emgucv/blob/master/tests/cvextern_test/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\n#IF(IS_DEBIAN_ARM64_BUILD)\n#  MESSAGE(STATUS \"----------------------------- DISABLE NEON on arm64 debian build ---------------------------\")\n#  ADD_DEFINITIONS(-DPNG_ARM_NEON_OPT=0)\n#ENDIF()\n```\n\n----------------------------------------\n\nTITLE: Including Directories with CMake in CMake Language\nDESCRIPTION: Includes the './inc' directory in the list of directories to search for header files using CMake's include_directories command. This enables source files in the project to locate headers in the specified path. There are no parameters beyond the directory path. This is an essential CMake setup step and does not by itself handle file copying or validation.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/3rdParty/opencl-icd-1.2.11.0/icd/test/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories (./inc)\n```\n\n----------------------------------------\n\nTITLE: Setting OpenCV Subfolder Paths - CMake\nDESCRIPTION: Defines CMake variables pointing to the directories containing OpenCV core, contrib, and extra folders for use within other build files. Facilitates downstream subdirectory inclusion and dependency management for the core OpenCV engine and its extensions.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nSET(OPENCV_SUBFOLDER ${CMAKE_CURRENT_SOURCE_DIR}/opencv)\nSET(OPENCV_CONTRIB_SUBFOLDER ${CMAKE_CURRENT_SOURCE_DIR}/opencv_contrib)\nSET(OPENCV_EXTRA_SUBFOLDER ${CMAKE_CURRENT_SOURCE_DIR}/opencv_extra)\n```\n\n----------------------------------------\n\nTITLE: Adding Compiler Definitions for NETFX_CORE in CMake\nDESCRIPTION: This conditional block checks if the NETFX_CORE variable is defined. If true, it adds a preprocessor definition `_CRT_SECURE_NO_WARNINGS` to suppress certain CRT security warnings, potentially useful when targeting .NET Core or UWP environments. Commented-out lines suggest attempts to disable SDL checks.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/libgeotiff/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n        IF(NETFX_CORE)\n          MESSAGE(STATUS \"Disabling depreciation\")\n          ADD_DEFINITIONS(-D_CRT_SECURE_NO_WARNINGS)\n          #ADD_DEFINITIONS(/sdl-)\n          #target_compile_options(geotiff_archive PRIVATE -sdl-)\n          #SET(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -sdl-\")\n          #SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -sdl-\")\n        ENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring CPack Package Details in CMake\nDESCRIPTION: This CMake code sets various CPack variables required for packaging. It defines the package vendor, derives the package version from OpenCV version components and the previously determined `EMGUCV_GITVERSION`, constructs the package file name (conditionally for Android), sets package dependency versions for standard packaging and NuGet, and writes the final package version string to a file named `emgucv.version.txt`.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_40\n\nLANGUAGE: cmake\nCODE:\n```\nSET(CPACK_PACKAGE_VENDOR \"Emgu Corporation\")\nSET(CPACK_PACKAGE_VERSION_MAJOR ${OPENCV_VERSION_MAJOR})\nSET(CPACK_PACKAGE_VERSION_MINOR ${OPENCV_VERSION_MINOR})\nSET(CPACK_PACKAGE_VERSION_PATCH ${OPENCV_VERSION_PATCH})\nSET(CPACK_PACKAGE_VERSION \"${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}.${EMGUCV_GITVERSION}\")\nIF(ANDROID)\n  SET(CPACK_PACKAGE_FILE_NAME \"lib${CPACK_PACKAGE_NAME}\")\nELSE()\n  SET(CPACK_PACKAGE_FILE_NAME \"lib${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}\")\nENDIF()\n\nMESSAGE(STATUS \"Package name will be ${CPACK_PACKAGE_NAME}\")\nFILE(WRITE \"emgucv.version.txt\" \"${CPACK_PACKAGE_VERSION}\")\n\nMATH(EXPR CPACK_PACKAGE_VERSION_PATCH_PLUS_ONE \"${CPACK_PACKAGE_VERSION_PATCH}+1\")\n#SET(CPACK_PACKAGE_DEPENDENCY_VERSION \"[${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}.0,${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH_PLUS_ONE}.0)\")\n#SET(CPACK_PACKAGE_DEPENDENCY_VERSION \"(${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}.0, ${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH_PLUS_ONE}.0)\")\nSET(CPACK_PACKAGE_DEPENDENCY_VERSION \"${CPACK_PACKAGE_VERSION}\")\nSET(NUGET_PACKAGE_DEPENDENCY_VERSION \"${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}.*\")\n```\n\n----------------------------------------\n\nTITLE: Generating Directory.Build.props using CMake\nDESCRIPTION: This CMake code uses the `CONFIGURE_FILE` command to generate a `Directory.Build.props` file in the current source directory from a template file located at `cmake/Directory.Build.props.in`. This likely sets common MSBuild properties for projects within the directory.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_50\n\nLANGUAGE: cmake\nCODE:\n```\nCONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/Directory.Build.props.in ${CMAKE_CURRENT_SOURCE_DIR}/Directory.Build.props)\n```\n\n----------------------------------------\n\nTITLE: Closing Conditional Build Guard\nDESCRIPTION: This marks the end of the conditional block started by `IF(NOT IS_DEBIAN_ARM_BUILD)`. All CMake commands between the `IF` and this `ENDIF` are only processed if the build is not for Debian ARM.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/tests/cvextern_test/CMakeLists.txt#_snippet_25\n\nLANGUAGE: cmake\nCODE:\n```\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring the libgeotiff Static Library Target in CMake\nDESCRIPTION: Adds a static library target named `${GEOTIFF_ARCHIVE_TARGET}` using the sources defined in `GEOTIFF_LIB_SOURCES` and conditionally `GEOTIFF_LIB_CSV_SOURCES`. It then sets target properties: the output name to `${GEOTIFF_LIB_NAME}`, optionally sets the `PLATFORM_TOOLSET` if `EMGUCV_PLATFORM_TOOLSET` is defined, and assigns the target to the '3rdparty' folder for IDE organization (e.g., Visual Studio solution folders).\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/libgeotiff/CMakeLists.txt#_snippet_22\n\nLANGUAGE: cmake\nCODE:\n```\n# Static libgeotiff archive \nADD_LIBRARY(${GEOTIFF_ARCHIVE_TARGET} STATIC\n    ${GEOTIFF_LIB_SOURCES} ${GEOTIFF_LIB_CSV_SOURCES})\nSET_TARGET_PROPERTIES(${GEOTIFF_ARCHIVE_TARGET} PROPERTIES\n    OUTPUT_NAME ${GEOTIFF_LIB_NAME})\nIF(DEFINED EMGUCV_PLATFORM_TOOLSET)\n  set_target_properties(${GEOTIFF_ARCHIVE_TARGET} PROPERTIES PLATFORM_TOOLSET ${EMGUCV_PLATFORM_TOOLSET})\nENDIF()\nset_target_properties(${GEOTIFF_ARCHIVE_TARGET} PROPERTIES FOLDER \"3rdparty\")\n```\n\n----------------------------------------\n\nTITLE: Configuring NuGet Package Specification Files with CMake\nDESCRIPTION: Uses the `CONFIGURE_FILE` command within a conditional block (likely `IF(CUDA_FOUND)` or similar, based on context) to generate multiple NuGet package specification (`.nuspec`) files from template files (`.nuspec.in`). CMake variables like `${CMAKE_CURRENT_SOURCE_DIR}`, `${EMGU_ZLIBWAPI_ID}`, `${EMGU_CUFFT_NUGET_ID}`, `${EMGU_CUDNN_NUGET_ID}`, etc., are substituted with their configured values. This process creates customized `.nuspec` files for distributing dependencies like Zlib, CUFFT, various cuDNN components, NPP, CUDART, and cuBLAS via NuGet, reflecting the specific build environment.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_77\n\nLANGUAGE: cmake\nCODE:\n```\n\t#CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/Emgu.CV.runtime.windows.Package.nuspec.in ${CMAKE_CURRENT_SOURCE_DIR}/platforms/nuget/Emgu.CV.runtime.windows/Package.nuspec)\n\tCONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/${EMGU_ZLIBWAPI_ID}.Package.nuspec.in ${CMAKE_CURRENT_SOURCE_DIR}/platforms/nuget/${EMGU_ZLIBWAPI_ID}/Package.nuspec)\n\tCONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/${EMGU_CUFFT_NUGET_ID}.Package.nuspec.in ${CMAKE_CURRENT_SOURCE_DIR}/platforms/nuget/${EMGU_CUFFT_NUGET_ID}/Package.nuspec)\n\tCONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/${EMGU_CUDNN_NUGET_ID}.Package.nuspec.in ${CMAKE_CURRENT_SOURCE_DIR}/platforms/nuget/${EMGU_CUDNN_NUGET_ID}/Package.nuspec)\n\tCONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/${EMGU_CUDNN_ADV_NUGET_ID}.Package.nuspec.in ${CMAKE_CURRENT_SOURCE_DIR}/platforms/nuget/${EMGU_CUDNN_ADV_NUGET_ID}/Package.nuspec)\n\tCONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/${EMGU_CUDNN_CNN_NUGET_ID}.Package.nuspec.in ${CMAKE_CURRENT_SOURCE_DIR}/platforms/nuget/${EMGU_CUDNN_CNN_NUGET_ID}/Package.nuspec)\n\tCONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/${EMGU_CUDNN_ENGINES_NUGET_ID}.Package.nuspec.in ${CMAKE_CURRENT_SOURCE_DIR}/platforms/nuget/${EMGU_CUDNN_ENGINES_NUGET_ID}/Package.nuspec)\n\tCONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/${EMGU_CUDNN_OPS_NUGET_ID}.Package.nuspec.in ${CMAKE_CURRENT_SOURCE_DIR}/platforms/nuget/${EMGU_CUDNN_OPS_NUGET_ID}/Package.nuspec)\n\tCONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/${EMGU_NPP_NUGET_ID}.Package.nuspec.in ${CMAKE_CURRENT_SOURCE_DIR}/platforms/nuget/${EMGU_NPP_NUGET_ID}/Package.nuspec)\n\tCONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/${EMGU_CUDART_NUGET_ID}.Package.nuspec.in ${CMAKE_CURRENT_SOURCE_DIR}/platforms/nuget/${EMGU_CUDART_NUGET_ID}/Package.nuspec)\n\tCONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/${EMGU_CUDA_BLAS_NUGET_ID}.Package.nuspec.in ${CMAKE_CURRENT_SOURCE_DIR}/platforms/nuget/${EMGU_CUDA_BLAS_NUGET_ID}/Package.nuspec)\n\tCONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/${EMGU_CUDA_BLAS_LT_NUGET_ID}.Package.nuspec.in ${CMAKE_CURRENT_SOURCE_DIR}/platforms/nuget/${EMGU_CUDA_BLAS_LT_NUGET_ID}/Package.nuspec)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Setting Default Build Type and Pedantic Build Option in CMake\nDESCRIPTION: This snippet sets the default CMake build type to 'Release' if it's not already defined, providing common options in the cache description. It also defines a cache variable 'GEOTIFF_BUILD_PEDANTIC' (defaulting to FALSE) to control pedantic compilation warnings, automatically enabling it for Debug builds.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/libgeotiff/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n# General build settings\n\nIF(NOT CMAKE_BUILD_TYPE)\n    SET(CMAKE_BUILD_TYPE Release CACHE STRING\n        \"Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel\"\n        FORCE)\nENDIF()\n\nSET(GEOTIFF_BUILD_PEDANTIC FALSE CACHE BOOL \"Choose compilation in pedantic or relaxed mode\")\nIF(CMAKE_BUILD_TYPE MATCHES Debug)\n    SET(GEOTIFF_BUILD_PEDANTIC TRUE)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Setting Windows-Specific Shared Library Properties in CMake\nDESCRIPTION: Conditionally sets properties for the shared library target (GEOTIFF_LIBRARY_TARGET) specifically for Windows builds using the MSVC compiler. It sets the IMPORT_SUFFIX property to \"_i.lib\", which affects the naming of the import library generated.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/libgeotiff/libgeotiff-1.4.0/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\n# Windows:\nIF(WIN32 AND MSVC)\n    SET_TARGET_PROPERTIES(${GEOTIFF_LIBRARY_TARGET} PROPERTIES IMPORT_SUFFIX \"_i.lib\")\nENDIF(WIN32 AND MSVC)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building the OpenCL ICD Loader Library - CMake - CMake Language\nDESCRIPTION: This CMake script initializes a build environment for compiling the OpenCL ICD Loader as a shared library, with conditional logic to handle both Linux and Windows platforms. Key dependencies include OpenCL headers, which must be provided via the './inc/CL/' directory or set to an appropriate include path, as well as potential system-specific SDKs (e.g., DirectX SDK for Windows). Input parameters such as CMAKE_SYSTEM_NAME and environment variables like DXSDK_DIR affect both the sources included and the inclusion directories. The output is a shared library called 'OpenCL', with target properties such as versioning and output folder, and it also ensures appropriate linker flags are set for Linux. The configuration can be extended with testing functionality by uncommenting related lines.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/3rdParty/opencl-icd-1.2.11.0/icd/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required (VERSION 2.6)\n\nproject (OPENCL_ICD_LOADER)\n\n#set (CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_HOME_DIRECTORY}/bin)\n#set (CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_HOME_DIRECTORY}/bin)\n\nset (OPENCL_ICD_LOADER_SOURCES icd.c icd_dispatch.c)\n\nif (\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"Linux\")\n    list (APPEND OPENCL_ICD_LOADER_SOURCES icd_linux.c icd_exports.map)\nelse ()\n    list (APPEND OPENCL_ICD_LOADER_SOURCES icd_windows.c OpenCL.def)\n    include_directories ($ENV{DXSDK_DIR}/Include)\nendif ()\n\n# Change this to point to a directory containing OpenCL header directory \"CL\"\n# OR copy OpenCL headers to ./inc/CL/\ninclude_directories (./inc)\n\nadd_library (OpenCL SHARED ${OPENCL_ICD_LOADER_SOURCES})\nset_target_properties (OpenCL PROPERTIES VERSION \"1.2\" SOVERSION \"1\")\nset_target_properties (OpenCL PROPERTIES FOLDER \"3rdparty\")\n\nif (\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"Linux\")\n    set_target_properties (OpenCL PROPERTIES LINK_FLAGS \"-Wl,--version-script -Wl,../icd_exports.map\")\nendif ()\n\ntarget_link_libraries (OpenCL ${CMAKE_DL_LIBS})\n\n#enable_testing()\n#add_subdirectory (test)\n\n```\n\n----------------------------------------\n\nTITLE: Creating Static GeoTIFF Library Archive in CMake\nDESCRIPTION: Defines a static library target named by the GEOTIFF_ARCHIVE_TARGET variable using ADD_LIBRARY. It includes the core GeoTIFF sources (GEOTIFF_LIB_SOURCES) and potentially the in-code EPSG sources (GEOTIFF_LIB_CSV_SOURCES). The XTIFF sources are explicitly excluded as noted in the comment. The output name of the archive file is set using SET_TARGET_PROPERTIES.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/libgeotiff/libgeotiff-1.4.0/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\n#---\n# Static libgeotiff archive \n# NOTE: Did not put XTIFF_SOURCES in static lib because libxtiff.a is written out \n#       currently.\n#---\nADD_LIBRARY(${GEOTIFF_ARCHIVE_TARGET} STATIC\n    ${GEOTIFF_LIB_SOURCES} ${GEOTIFF_LIB_CSV_SOURCES})\nSET_TARGET_PROPERTIES(${GEOTIFF_ARCHIVE_TARGET} PROPERTIES\n    OUTPUT_NAME ${GEOTIFF_LIB_NAME})\n```\n\n----------------------------------------\n\nTITLE: Accessing Packaged Raw Assets in C#\nDESCRIPTION: This C# method demonstrates asynchronously accessing a raw asset ('AboutAssets.txt') included in the app package. It uses FileSystem.OpenAppPackageFileAsync to get a stream to the file and StreamReader to read its contents into a string. This requires the Microsoft.Maui.Storage and System.IO namespaces.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Example/MAUI/MauiDemoApp/Resources/Raw/AboutAssets.txt#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding In-Code EPSG Sources in CMake\nDESCRIPTION: Conditionally adds C source files generated from CSV data (datum.c, ellipsoid.c, etc.) to the GEOTIFF_LIB_CSV_SOURCES variable if the CMake option GEOTIFF_ENABLE_INCODE_EPSG is enabled. These sources are then grouped under \"CSV Source Files\" in IDE project files using SOURCE_GROUP.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/libgeotiff/libgeotiff-1.4.0/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nIF (GEOTIFF_ENABLE_INCODE_EPSG)\n    SET(GEOTIFF_LIB_CSV_SOURCES\n        csv/datum.c\n        csv/ellipsoid.c\n        csv/gcs.c\n        csv/pcs.c\n        csv/prime_meridian.c\n        csv/projop_wparm.c\n        csv/unit_of_measure.c)\n    SOURCE_GROUP(\"CSV Source Files\" FILES ${GEOTIFF_LIB_CSV_SOURCES})\nENDIF(GEOTIFF_ENABLE_INCODE_EPSG)\n```\n\n----------------------------------------\n\nTITLE: Setting Library Output Path Based on iOS Target in CMake\nDESCRIPTION: This snippet sets the `LIBRARY_OUTPUT_PATH` variable. If the target platform is iOS (`IOS`), the output path is set to a `libs` subdirectory within the CMake binary directory (`CMAKE_BINARY_DIR`). Otherwise, it's set to a `libs` subdirectory within the CMake source directory (`CMAKE_SOURCE_DIR`).\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\nIF(IOS)\n  SET(LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR}/libs)\nELSE()\n  SET(LIBRARY_OUTPUT_PATH ${CMAKE_SOURCE_DIR}/libs)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: (Commented) Grouping Source Files in IDE Projects\nDESCRIPTION: This commented-out section shows how `SOURCE_GROUP` could be used to organize files within IDE project views (like Visual Studio). It suggests groups for 'CMake Files' (CMakeLists.txt), 'Header Files' (referencing `${GEOTIFF_LIB_HEADERS}`), and 'Source Files' (referencing `${GEOTIFF_LIB_SOURCES}`).\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/libgeotiff/CMakeLists.txt#_snippet_26\n\nLANGUAGE: cmake\nCODE:\n```\n# Define grouping of source files in PROJECT file (e.g. Visual Studio)\n#SOURCE_GROUP(\"CMake Files\" FILES CMakeLists.txt)\n#SOURCE_GROUP(\"Header Files\" FILES ${GEOTIFF_LIB_HEADERS})\n#SOURCE_GROUP(\"Source Files\" FILES ${GEOTIFF_LIB_SOURCES})\n```\n\n----------------------------------------\n\nTITLE: Copying License File using CMake\nDESCRIPTION: This CMake code sets the variable `EMGUCV_LICENSE_FILE` to the value of `${LICENSE_FILE_NAME}.txt`. It then uses `CONFIGURE_FILE` with the `COPYONLY` option to copy the license file (specified by `LICENSE_FILE_NAME`) to the destination path defined by `EMGUCV_LICENSE_FILE` within the current source directory.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_52\n\nLANGUAGE: cmake\nCODE:\n```\nSET (EMGUCV_LICENSE_FILE \"${LICENSE_FILE_NAME}.txt\")\nCONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/${LICENSE_FILE_NAME} ${CMAKE_CURRENT_SOURCE_DIR}/${EMGUCV_LICENSE_FILE} COPYONLY)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Including Ubuntu Runtime in CMake Build\nDESCRIPTION: Adds the subdirectory for the EmguCV Ubuntu runtime to the build, but only if at least one of the CMake variables `HAVE_LINUX_X86`, `HAVE_LINUX_X64`, or `HAVE_LINUX_ARM64` is set to true. This enables building the Ubuntu runtime components based on the detected or configured Linux architecture.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/platforms/nuget/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\n#IF (HAVE_LINUX_X86 OR HAVE_LINUX_X64 OR HAVE_LINUX_ARM64)\nadd_subdirectory(\"Emgu.CV.runtime.ubuntu\")\n#ENDIF()\n```\n\n----------------------------------------\n\nTITLE: Defining a Partial Constructor for an Existing Rectangle Class in C#\nDESCRIPTION: This snippet defines a partial class Rectangle with a constructor that initializes a rectangle using integer coordinates and size parameters. It relies on JNI bindings, indicating integration with native or managed code. The x, y, width, and height parameters directly correspond to rectangle attributes. This approach expects the Rectangle class to be defined as partial to allow extension in separate files.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Runtime/Maui/Android/Additions/AboutAdditions.txt#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic partial class Rectangle\n{\n    public Rectangle (int x, int y, int width, int height)\n    {\n        // JNI bindings\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating C# Properties for cv::QRCodeDetector using CMake\nDESCRIPTION: This snippet employs the `CREATE_OCV_CLASS_PROPERTY` CMake macro to generate C# wrapper properties for the `cv::QRCodeDetector` C++ class. It defines the `EpsX` and `EpsY` properties (both `double`) used in the detection process. The output is `Emgu.CV/Objdetect/QRCodeDetector.g.cs` in the `Emgu.CV` namespace, using `CvInvoke`. It requires `objdetect_c.h` and its generation depends on the `HAVE_opencv_objdetect` CMake variable.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\nCREATE_OCV_CLASS_PROPERTY( \n    \"objdetect/QRCodeDetector_property\" \n    \"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV/Objdetect/QRCodeDetector.g.cs\"\n    \"cv::QRCodeDetector\" \n    \"QRCodeDetector\" \n    \"EpsX;EpsY\" \n    \"double;double\" \n    \"propW;propW\"\n    \"EpsX;EpsY\" \n    \"double;double\"\n    \"EpsX;\\n     EpsY\"\n    \"Emgu.CV\"\n    \"CvInvoke\"\n    \"QRCodeDetector\"\n\t\"\"\n    \"#include \\\"objdetect_c.h\\\"\"\n\t\"\"\n\t\"\"\n\t${HAVE_opencv_objdetect})\n```\n\n----------------------------------------\n\nTITLE: Defining ML EM Property Wrapper in CMake\nDESCRIPTION: Binds properties for the cv::ml::EM class in EmguCV via CMake. Specifies detailed mapping for mixture model learning, with property types, .NET equivalence, and comprehensive documentation for use in automated wrapper code. Requires ml_c.h and ML module enabled.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_29\n\nLANGUAGE: CMake\nCODE:\n```\nCREATE_OCV_CLASS_PROPERTY( \n    \"ml/em_property\" \n    \"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV/Ml/EM.g.cs\"\n    \"cv::ml::EM\" \n    \"EM\" \n    \"ClustersNumber;CovarianceMatrixType;TermCriteria\" \n    \"int;int;CvTermCriteria\" \n    \"prop;prop;struct\"\n    \"ClustersNumber;CovarianceMatrixType;TermCriteria\" \n    \"int;EM.CovarianMatrixType;MCvTermCriteria\"\n    \"The number of mixtures;\n  The type of the mixture covariation matrices;\n  Termination criteria of the procedure. EM algorithm stops either after a certain number of iterations (term_crit.num_iter), or when the parameters change too little (no more than term_crit.epsilon) from iteration to iteration\"\n    \"Emgu.CV.ML\"\n    \"MlInvoke\"\n    \"EM\"\n\t\"\"\n    \"#include \\\"ml_c.h\\\"\"\n\t\"\"\n\t\"\"\n\t${HAVE_opencv_ml})\n```\n\n----------------------------------------\n\nTITLE: Managing GeoTIFF Dependency in CMake\nDESCRIPTION: Conditionally configures the GeoTIFF dependency based on the `EMGU_CV_WITH_TIFF` flag. If enabled, it sets the module path for `FindGeoTIFF.cmake` and attempts to find an installed GeoTIFF package. If found, it logs the include directory. If not found, it builds GeoTIFF from source by adding the `libgeotiff` subdirectory (which contains libgeotiff-1.4.0), setting the include directories (`GEOTIFF_INCLUDE_DIR`), and defining the library names (`GEOTIFF_LIBRARY` as `geotiff_archive` and `xtiff`). Finally, if GeoTIFF is enabled, it adds the `EMGU_CV_WITH_TIFF` preprocessor definition and includes the necessary directories.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_107\n\nLANGUAGE: cmake\nCODE:\n```\nIF(EMGU_CV_WITH_TIFF)\n  SET(CMAKE_MODULE_PATH \"${PROJECT_SOURCE_DIR}/libgeotiff/cmake\")\n  FIND_PACKAGE(GeoTIFF)\n  IF(GEOTIFF_FOUND)\n    MESSAGE(STATUS \"CVEXTERN: GEOTIFF found. INCLUDE DIR: ${GEOTIFF_INCLUDE_DIR}\")\n  ENDIF()\n  IF (NOT GEOTIFF_FOUND)\n    MESSAGE(STATUS \"CVEXTERN: GEOTIFF not found. Building from source\")\n    # ----------------------------------------------------------------------------\n    #  Build libgeotiff \n    # ----------------------------------------------------------------------------\n    SET(LIBGEOTIFF_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/libgeotiff/libgeotiff-1.4.0\")\n    ADD_SUBDIRECTORY(libgeotiff)\n    #MESSAGE(STATUS \"CURRENT Binary DIR: ${CMAKE_CURRENT_BINARY_DIR}\")\n    SET(GEOTIFF_INCLUDE_DIR ${TIFF_INCLUDE_DIR} ${LIBGEOTIFF_DIR} \"${LIBGEOTIFF_DIR}/libxtiff\")\n    SET(GEOTIFF_LIBRARY geotiff_archive xtiff)\n  ENDIF()\n  ADD_DEFINITIONS(-DEMGU_CV_WITH_TIFF)\n  INCLUDE_DIRECTORIES(${GEOTIFF_INCLUDE_DIR})\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Including Platform Check Module - CMake\nDESCRIPTION: Invokes the project-specific CheckPlatform CMake module, enabling detection of build target platform (e.g., Windows, Ubuntu, Apple). This inclusion allows conditional logic later in the script based on platform-specific variables.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nINCLUDE (CheckPlatform)\n```\n\n----------------------------------------\n\nTITLE: Defining ML SVM Property Wrapper in CMake\nDESCRIPTION: Establishes CMake property/code-generation mapping for cv::ml::SVM, exposing key SVM parameters to EmguCV. Specifies C++ property types and documentation aiding managed code generation. Depends on ml_c.h and SVM-specific modules, handles termination criteria, kernels, and optimization settings.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_30\n\nLANGUAGE: CMake\nCODE:\n```\nCREATE_OCV_CLASS_PROPERTY( \n    \"ml/svm_property\" \n    \"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV/Ml/SVM.g.cs\"\n    \"cv::ml::SVM\" \n    \"SVM\" \n    \"Type;Gamma;Coef0;Degree;C;Nu;P;Kernel;TermCriteria;KernelType\" \n    \"int;double;double;double;double;double;double;int;CvTermCriteria;int\" \n    \"prop;prop;prop;prop;prop;prop;prop;propW;struct;propR\"\n    \"Type;Gamma;Coef0;Degree;C;Nu;P;Kernel;TermCriteria;KernelType\" \n    \"SVM.SvmType;double;double;double;double;double;double;SVM.SvmKernelType;MCvTermCriteria;SVM.SvmKernelType\"\n    \"Type of a SVM formulation;\n  Parameter gamma of a kernel function;\n  Parameter coef0 of a kernel function;\n  Parameter degree of a kernel function;\n  Parameter C of a SVM optimization problem;\n  Parameter nu of a SVM optimization problem;\n  Parameter epsilon of a SVM optimization problem;\n  Initialize with one of predefined kernels;\n  Termination criteria of the iterative SVM training procedure which solves a partial case of constrained quadratic optimization problem;\n  Type of a SVM kernel\"\n    \"Emgu.CV.ML\"\n    \"MlInvoke\"\n    \"SVM\"\n\t\"\"\n    \"#include \\\"ml_c.h\\\"\"\n\t\"\"\n\t\"\"\n\t${HAVE_opencv_ml})\n```\n\n----------------------------------------\n\nTITLE: Configuring Install Directory and Filters with CMake - CMake\nDESCRIPTION: This snippet instructs CMake to install files from the current source directory into the destination directory, including only specific file types such as .cs, .csproj, .resx, and project configuration files. It excludes version-control, build system, and output directories (like .svn, obj, bin, CMakeFiles) from the installation. It is used for controlling which files are shipped with the emgucv_source component. CMake must be installed and invoked within a project containing the specified structure. Expected outputs are a filtered collection of source and project configuration files at the target destination; no compilation is performed by this snippet.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.WindowsUI/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nINSTALL(\n  DIRECTORY\n  ${CMAKE_CURRENT_SOURCE_DIR}\n  DESTINATION .\n  COMPONENT emgucv_source\n  FILES_MATCHING \n  PATTERN \"*.cs\"\n  PATTERN \"*.csproj\"\n  PATTERN \"*.resx\"\n  PATTERN \"*.projitems\"\n  PATTERN \"*.shproj\"\n  PATTERN \"Directory.Build.props\"\n  PATTERN \"README.md\"\n  PATTERN \".svn\" EXCLUDE\n  PATTERN \"obj\" EXCLUDE\n  PATTERN \"bin\" EXCLUDE\n  PATTERN \"CMakeFiles\" EXCLUDE\n  )\n```\n\n----------------------------------------\n\nTITLE: Conditionally Installing EMGU CV Source Files using CMake\nDESCRIPTION: This CMake snippet uses the `INSTALL` command within an `IF` block to copy C# source files (`.cs`), project files (`.shproj`, `.csproj`, `.projitems`), resource files (`.resx`), documentation (`README.txt`, `README.md`), and build properties (`Directory.Build.props`) from the current source directory (`${CMAKE_CURRENT_SOURCE_DIR}`) to the installation destination (`.`). The installation is performed as part of the `emgucv_source` component and only occurs if either the `EMGU_CV_BUILD` or `EMGU_CV_EXAMPLE_BUILD` variable is true. It explicitly excludes version control directories (`.svn`), build output directories (`obj`, `CMakeFiles`, project-specific build directories), and files matching `*Unity*`.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# --------------------------------------------------------\n#  Copyright (C) 2004-2025 by EMGU Corporation. All rights reserved.\n# --------------------------------------------------------\n\nIF(EMGU_CV_BUILD OR EMGU_CV_EXAMPLE_BUILD)\n  INSTALL(\n      DIRECTORY\n      ${CMAKE_CURRENT_SOURCE_DIR}\n      DESTINATION .\n      COMPONENT emgucv_source\n      FILES_MATCHING \n      PATTERN \"*.cs\"\n      PATTERN \"*.shproj\"\n\t  PATTERN \"*.csproj\"\n      PATTERN \"*.projitems\"\n      PATTERN \"*.resx\"\n      PATTERN \"README.txt\"\n\t  PATTERN \"README.md\"\n\t  PATTERN \"Directory.Build.props\"\n      PATTERN \".svn\" EXCLUDE\n      PATTERN \"obj\" EXCLUDE\n      PATTERN \"CMakeFiles\" EXCLUDE\n      PATTERN \"${PROJECT_NAME}.dir\" EXCLUDE\n      PATTERN \"*Unity*\" EXCLUDE\n  )\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Conditionally Configuring Tesseract Build in CMake\nDESCRIPTION: This snippet checks if Tesseract support is enabled (EMGU_CV_WITH_TESSERACT). If true, it adds the `tesseract/libtesseract` subdirectory to the build. If Tesseract wasn't found automatically (TESSERACT_FOUND is false), it manually sets the required include directories (TESSERACT_INCLUDE_DIRS) and lists the Tesseract and Leptonica sub-projects (TESSERACT_PROJECTS). It also adds a Windows-specific definition (__MSW32__) unless building for Android.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_85\n\nLANGUAGE: cmake\nCODE:\n```\n  IF(EMGU_CV_WITH_TESSERACT)\n    ADD_SUBDIRECTORY(tesseract/libtesseract)\n    IF(TESSERACT_FOUND)\n    ELSE()\n      SET(TESSERACT_INCLUDE_DIRS \n        \"${TESSERACT_OCR_ROOT_DIR}/include\" \n        \"${TESSERACT_OCR_ROOT_DIR}/src/ccutil\" \n        \"${TESSERACT_OCR_ROOT_DIR}/src/api\" \n        \"${TESSERACT_OCR_ROOT_DIR}/src/ccmain\" \n        \"${TESSERACT_OCR_ROOT_DIR}/src/ccstruct\" \n        \"${LEPT_ROOT_DIR}/src\" \n        \"${PROJECT_SOURCE_DIR}/tesseract\")\n      SET(TESSERACT_PROJECTS tesseract_api tesseract_ccmain tesseract_lstm tesseract_textord tesseract_arch tesseract_wordrec tesseract_classify tesseract_dict tesseract_ccstruct tesseract_opencl tesseract_cutil tesseract_viewer tesseract_ccutil libleptonica)\n    ENDIF()\n\t\n\tIF (ANDROID)\n\tELSE()\n    ADD_DEFINITIONS(-D__MSW32__)\n\tENDIF()\n  ENDIF()\n```\n\n----------------------------------------\n\nTITLE: Conditionally Building C# CameraCapture Example with CMake and MSBuild\nDESCRIPTION: This CMake script checks if the 'Emgu.CV.Platform.NetFramework' target exists. If it does, it defines a new project named 'Example.CameraCapture', uses a custom command 'MSBUILD_CSPROJ_IN_SOLUTION' to invoke MSBuild on the corresponding C# project within the specified solution file ('Emgu.CV.Example.sln'), sets the IDE folder property for the target, and establishes a dependency on the 'Emgu.CV.Platform.NetFramework' target. This ensures the example is built only for the .NET Framework platform and after its platform dependencies are met.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Example/CameraCapture/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# --------------------------------------------------------\n#  Copyright (C) 2004-2025 by EMGU Corporation. All rights reserved.\n# --------------------------------------------------------\n\nIF(TARGET Emgu.CV.Platform.NetFramework)\n  PROJECT(Example.CameraCapture)\n  MSBUILD_CSPROJ_IN_SOLUTION(${PROJECT_NAME} \"${CMAKE_CURRENT_SOURCE_DIR}/../../Solution/Windows.Desktop/Emgu.CV.Example.sln\" \"CameraCapture\" \"\" ALL)\n  set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER \"Emgu.CV.Examples\")\n  ADD_DEPENDENCIES(${PROJECT_NAME} Emgu.CV.Platform.NetFramework)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Linking Dependencies to Shared GeoTIFF Library in CMake\nDESCRIPTION: Links the shared GeoTIFF library target (GEOTIFF_LIBRARY_TARGET) against its external dependencies using TARGET_LINK_LIBRARIES. The dependencies include TIFF (${TIFF_LIBRARIES}), PROJ4 (${PROJ4_LIBRARIES}), ZLIB (${ZLIB_LIBRARIES}), and JPEG (${JPEG_LIBRARIES}). These dependency variables must be set previously, likely by find_package calls.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/libgeotiff/libgeotiff-1.4.0/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nTARGET_LINK_LIBRARIES(${GEOTIFF_LIBRARY_TARGET}\n    ${TIFF_LIBRARIES}\n    ${PROJ4_LIBRARIES}\n    ${ZLIB_LIBRARIES}\n    ${JPEG_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Generating version.rc using CMake\nDESCRIPTION: This CMake code uses `CONFIGURE_FILE` to generate a Windows resource compiler script (`version.rc`) within the `Emgu.CV.Extern` subdirectory. The source template is located at `cmake/version.rc.in`. This file typically embeds version information into the compiled native library.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_51\n\nLANGUAGE: cmake\nCODE:\n```\nCONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/version.rc.in ${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.Extern/version.rc)\n```\n\n----------------------------------------\n\nTITLE: Configuring SSE Support based on Architecture in CMake\nDESCRIPTION: This CMake code sets a cache variable `EMGU_ENABLE_SSE` to control the use of SSE instructions. It enables SSE by default (ON) but disables it (OFF) if the `TARGET_ARCH_64` variable is true, indicating a 64-bit architecture.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_44\n\nLANGUAGE: cmake\nCODE:\n```\nIF (TARGET_ARCH_64)\n  SET(EMGU_ENABLE_SSE OFF CACHE BOOL \"ENABLE SSE for Emgu CV\")\nELSE()\n  SET(EMGU_ENABLE_SSE ON CACHE BOOL \"ENABLE SSE for Emgu CV\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: (Commented) Linking Dependencies for Shared libgeotiff Library\nDESCRIPTION: This commented-out section demonstrates linking the potential shared library target (`${GEOTIFF_LIBRARY_TARGET}`) against required dependencies: libtiff, Proj4 (`${PROJ4_LIBRARIES}`), Zlib (`${ZLIB_LIBRARIES}`), and JPEG (`${JPEG_LIBRARIES}`).\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/libgeotiff/CMakeLists.txt#_snippet_24\n\nLANGUAGE: cmake\nCODE:\n```\n#TARGET_LINK_LIBRARIES(${GEOTIFF_LIBRARY_TARGET}\n#\tlibtiff\n#\t${PROJ4_LIBRARIES}\n#\t${ZLIB_LIBRARIES}\n#\t${JPEG_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Including Windows Zlib Runtime in CMake Build\nDESCRIPTION: Adds the subdirectory containing the CMake build configuration for the Windows Zlib wrapper runtime for the x64 architecture to the EmguCV project build.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/platforms/nuget/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nADD_SUBDIRECTORY(\"Emgu.runtime.windows.zlibwapi.x64\")\n```\n\n----------------------------------------\n\nTITLE: Setting Emgu CV Build Flags in CMake\nDESCRIPTION: This CMake code defines two cache boolean variables: `EMGU_CV_BUILD` and `EMGU_CV_EXAMPLE_BUILD`. Both are set to ON by default, indicating that the main Emgu CV library and the example projects should be built.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_48\n\nLANGUAGE: cmake\nCODE:\n```\nSET(EMGU_CV_BUILD ON CACHE BOOL \"BUILD Emgu CV\")\nSET(EMGU_CV_EXAMPLE_BUILD ON CACHE BOOL \"Build Emgu CV Example\")\n```\n\n----------------------------------------\n\nTITLE: Setting Module Search Paths - CMake\nDESCRIPTION: Appends a custom cmake modules directory to the CMAKE_MODULE_PATH and sets the EMGU_CV_SOURCE_DIR variable. This provides the CMake configuration access to additional project-specific modules and records the root source directory for further use.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nSET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} \"${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules\")\nSET(EMGU_CV_SOURCE_DIR \"${CMAKE_CURRENT_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Displaying CMake Build System Information\nDESCRIPTION: This block prints various CMake variables to the console using `MESSAGE(STATUS ...)` for informational and debugging purposes. It shows the detected Emgu CV architecture, system name, version, generator, host processor, target processor, and potentially Apple Silicon or iOS simulator/device status.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_22\n\nLANGUAGE: cmake\nCODE:\n```\nMESSAGE(STATUS \"<<<< EMGUCV_ARCH: ${EMGUCV_ARCH} >>>>\")\nMESSAGE(STATUS \"<<<< CMAKE_SYSTEM_NAME: ${CMAKE_SYSTEM_NAME} >>>>\")\nMESSAGE(STATUS \"<<<< CMAKE_SYSTEM_VERSION: ${CMAKE_SYSTEM_VERSION} >>>>\")\nMESSAGE(STATUS \"<<<< CMAKE_GENERATOR: ${CMAKE_GENERATOR} >>>>\")\nMESSAGE(STATUS \"<<<< CMAKE_HOST_SYSTEM_PROCESSOR: ${CMAKE_HOST_SYSTEM_PROCESSOR} >>>>\")\nMESSAGE(STATUS \"<<<< CMAKE_SYSTEM_PROCESSOR: ${CMAKE_SYSTEM_PROCESSOR} >>>>\")\nIF(APPLE)\n  MESSAGE(STATUS \"<<<< CMAKE_APPLE_SILICON_PROCESSOR: ${CMAKE_APPLE_SILICON_PROCESSOR} >>>>\")\nENDIF()\nIF(IPHONESIMULATOR)\n  MESSAGE(STATUS \"<<<< IPHONESIMULATOR: ${IPHONESIMULATOR} >>>>\")\nENDIF()\nIF(IPHONEOS)\n  MESSAGE(STATUS \"<<<< IPHONEOS: ${IPHONEOS} >>>>\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Building and Running MAUI App for iOS Simulator (x86-64) using dotnet CLI\nDESCRIPTION: Builds and runs the MAUI application on an attached x86-64 iOS simulator. It specifies the target framework 'net9.0-ios'. Note the limitation mentioned regarding arm64 simulators.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Example/MAUI/MauiDemoApp/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet build -t:Run -f net9.0-ios\n```\n\n----------------------------------------\n\nTITLE: Configuring and Initializing GeoTIFF Build - CMake - CMake\nDESCRIPTION: This snippet represents the main CMake configuration for setting up the build system for the GeoTIFF C/C++ library and its related utilities. It initializes project metadata, specifies build and install directories, defines build types, sets platform- and compiler-specific flags, configures optional features (such as TIFF, PROJ.4, Zlib, JPEG support), locates necessary CSV data resources, and generates the geo_config.h configuration header. Key parameters include toggles for optional components (e.g., WITH_TIFF, WITH_PROJ4), build type selection, and directories for binaries, libraries, and data. Inputs include the build configuration and the presence of required libraries and CSV files; outputs are the configured build environment and generated header files. Prerequisites are a working CMake installation (minimum version 2.6.0), relevant development libraries for dependencies, and a proper source directory layout. The configuration enforces checks and aborts the build if critical resources or APIs are missing.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/libgeotiff/libgeotiff-1.4.0/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n###############################################################################\\n#\\n# CMake main configuration file to build GeoTIFF library and utilities.\\n#\\n# Author: Mateusz Loskot <mateusz@loskot.net>\\n#\\n###############################################################################\\nPROJECT(GeoTIFF)\\n\\nSET(GEOTIFF_LIB_NAME geotiff)\\nSET(GEOTIFF_LIBRARY_TARGET geotiff_library)\\nSET(GEOTIFF_ARCHIVE_TARGET geotiff_archive)\\n\\n##############################################################################\\n# CMake settings\\nCMAKE_MINIMUM_REQUIRED(VERSION 2.6.0)\\n\\nSET(CMAKE_COLOR_MAKEFILE ON)\\n\\n# Allow advanced users to generate Makefiles printing detailed commands\\nMARK_AS_ADVANCED(CMAKE_VERBOSE_MAKEFILE)\\n\\n# Path to additional CMake modules\\nSET(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake ${CMAKE_MODULE_PATH})\\n\\n###############################################################################\\n\\n###\\n# Set up the version and configure a header file with the version in it.\\n###\\nset (GeoTIFF_VERSION_MAJOR 2)\\nset (GeoTIFF_VERSION_MINOR 1)\\nset (GeoTIFF_VERSION_RELEASE 0)\\nset (GeoTIFF_VERSION ${GeoTIFF_VERSION_MAJOR}.${GeoTIFF_VERSION_MINOR}.${GeoTIFF_VERSION_RELEASE})\\n\\n### \\n# Currently commented out.  Could add build data and svn revision in here:\\n# configure_file ( \"${PROJECT_SOURCE_DIR}/geotiff_version.h.in\"\\n#                 \"${PROJECT_BINARY_DIR}/geotiff_version.h\" )\\n###\\n\\n\\n# General build settings\\n\\nIF(NOT CMAKE_BUILD_TYPE)\\n    SET(CMAKE_BUILD_TYPE Debug CACHE STRING\\n        \"Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel\"\\n        FORCE)\\nENDIF()\\n\\nSET(GEOTIFF_BUILD_PEDANTIC FALSE CACHE BOOL \"Choose compilation in pedantic or relaxed mode\")\\nIF(CMAKE_BUILD_TYPE MATCHES Debug)\\n    SET(GEOTIFF_BUILD_PEDANTIC TRUE)\\nENDIF()\\n\\n# TODO: Still testing the output paths --mloskot\\nSET(GEOTIFF_BUILD_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin)\\n\\n# Output directory in which to build RUNTIME target files.\\n# SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${GEOTIFF_BUILD_OUTPUT_DIRECTORY})\\nSET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin)\\n\\n# Output directory in which to build LIBRARY target files\\n# SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${GEOTIFF_BUILD_OUTPUT_DIRECTORY})\\nSET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/lib)\\n\\n# Output directory in which to build ARCHIVE target files.\\n# SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${GEOTIFF_BUILD_OUTPUT_DIRECTORY}) \\nSET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/lib)\\n\\n###############################################################################\\n# Platform and compiler specific settings\\n\\nIF(WIN32)\\n    IF(MSVC) \\n        ADD_DEFINITIONS(-DBUILD_AS_DLL=1)\\n        ADD_DEFINITIONS(/DW4)\\n\\n        IF(MSVC80)\\n            ADD_DEFINITIONS(-D_CRT_SECURE_NO_WARNINGS)\\n            ADD_DEFINITIONS(-D_CRT_NONSTDC_NO_WARNING)\\n            ADD_DEFINITIONS(-D_CRT_SECURE_NO_DEPRECATE)\\n        ENDIF()\\n    ENDIF(MSVC)\\nENDIF()\\n\\nIF(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX)\\n    SET(COMPILE_FLAGS \"-fPIC -Wall -Wno-long-long\")\\n    SET(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${COMPILE_FLAGS} -std=c99\")\\n    SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${COMPILE_FLAGS} -std=c++98\")\\n    IF(GEOTIFF_BUILD_PEDANTIC)\\n        SET(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -pedantic\")\\n        SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -pedantic\")\\n    ENDIF()\\nENDIF()\\n\\n# Check required standard headers\\nINCLUDE(CheckIncludeFiles)\\nCHECK_INCLUDE_FILES(stdio.h HAVE_STDIO_H)\\nCHECK_INCLUDE_FILES(stdlib.h HAVE_STDLIB_H)\\nCHECK_INCLUDE_FILES(string.h HAVE_STRING_H)\\n\\n###############################################################################\\n# User-defined build settings\\n\\nSET(GEOTIFF_CSV_NAMES area.csv codes.csv datum.csv gcs.csv pcs.csv)\\nFIND_PATH(GEOTIFF_CSV_DATA_DIR NAMES ${GEOTIFF_CSV_NAMES}\\n    PATHS \"${CMAKE_SOURCE_DIR}/csv\"\\n    DOC \"Default location of GeoTIFF CSV files\"\\n    NO_DEFAULT_PATH)\\n\\nIF(IS_DIRECTORY ${GEOTIFF_CSV_DATA_DIR} AND EXISTS \"${GEOTIFF_CSV_DATA_DIR}/gcs.csv\")\\n    MESSAGE(STATUS \"Found GeoTIFF CSV files in: ${GEOTIFF_CSV_DATA_DIR}\")\\n    ADD_DEFINITIONS(-DCSV_DATA_DIR=\"${GEOTIFF_CSV_DATA_DIR}\")\\nELSE()\\n    MESSAGE(FATAL_ERROR \"Failed to find GeoTIFF CSV files in: ${GEOTIFF_CSV_DATA_DIR}\")\\nENDIF()\\n\\n# Has the user requested \"incode\" EPSG tables, overriding the default\\n# use of EPSG tables in csv files?\\nSET(GEOTIFF_ENABLE_INCODE_EPSG FALSE CACHE BOOL\\n    \"Choose if C code EPSG tables should be used\")\\nMESSAGE(STATUS \"Enable in-code GeoTIFF EPSG tables: ${GEOTIFF_ENABLE_INCODE_EPSG}\")\\n\\nSET(WITH_UTILITIES TRUE CACHE BOOL \"Choose if GeoTIFF utilities should be built\")\\n\\n###############################################################################\\n# Search for dependencies\\n\\nINCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR})\\nINCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/libxtiff)\\n\\n# TIFF support - required, default=ON\\nSET(WITH_TIFF TRUE CACHE BOOL \"Choose if TIFF support should be built\")\\n\\nIF(WITH_TIFF)\\n    FIND_PACKAGE(TIFF REQUIRED)\\n\\n    IF(TIFF_FOUND)\\n        # Confirm required API is available\\n        INCLUDE(CheckFunctionExists) \\n        SET(CMAKE_REQUIRED_LIBRARIES ${TIFF_LIBRARIES})\\n\\n        CHECK_FUNCTION_EXISTS(TIFFOpen HAVE_TIFFOPEN)\\n        IF(NOT HAVE_TIFFOPEN)\\n            SET(TIFF_FOUND) # ReSET to NOT found for TIFF library\\n            MESSAGE(FATAL_ERROR \"Failed to link with libtiff - TIFFOpen function not found\")\\n        ENDIF()\\n\\n        CHECK_FUNCTION_EXISTS(TIFFMergeFieldInfo HAVE_TIFFMERGEFIELDINFO)\\n        IF(NOT HAVE_TIFFMERGEFIELDINFO)\\n            SET(TIFF_FOUND) # ReSET to NOT found for TIFF library\\n            MESSAGE(FATAL_ERROR \"Failed to link with libtiff - TIFFMergeFieldInfo function not found. libtiff 3.6.0 Beta or later required. Please upgrade or use an older version of libgeotiff\")\\n        ENDIF()\\n        \\n        INCLUDE_DIRECTORIES(${TIFF_INCLUDE_DIR})\\n        ADD_DEFINITIONS(-DHAVE_TIFF=1)\\n    ENDIF(TIFF_FOUND)\\nENDIF(WITH_TIFF)\\n\\n# PROJ.4 support - optional, default=ON\\nSET(WITH_PROJ4 TRUE CACHE BOOL \"Choose if PROJ.4 support should be built\")\\n\\nIF(WITH_PROJ4)\\n    FIND_PACKAGE(PROJ4)\\n\\n    IF(PROJ4_FOUND)\\n        ADD_DEFINITIONS(-DHAVE_LIBPROJ=1)\\n        INCLUDE_DIRECTORIES(${PROJ4_INCLUDE_DIR})\\n\\n        IF(EXISTS \"${PROJ4_INCLUDE_DIR}/projects.h\")\\n            MESSAGE(STATUS \"Looking for projects.h header from PROJ.4 library - found\")\\n            ADD_DEFINITIONS(-DHAVE_PROJECTS_H=1)\\n            INCLUDE_DIRECTORIES(${PROJ4_INCLUDE_DIR_2})\\n        ELSE()\\n            MESSAGE(FATAL_ERROR \"Looking for projects.h from PROJ.4 library - not found\")\\n        ENDIF()\\n    ENDIF()\\nENDIF()\\n\\n# Zlib support - optional, default=OFF\\nSET(WITH_ZLIB FALSE CACHE BOOL \"Choose if zlib support should be built\")\\n\\nIF(WITH_ZLIB)\\n    FIND_PACKAGE(ZLIB)\\n\\n    IF(ZLIB_FOUND)\\n        SET(HAVE_ZIP 1)\\n        INCLUDE_DIRECTORIES(${ZLIB_INCLUDE_DIR})\\n        ADD_DEFINITIONS(-DHAVE_ZIP=${HAVE_ZIP})\\n    ENDIF()\\nENDIF()\\n\\n# JPEG support - optional, default=OFF\\nSET(WITH_JPEG FALSE CACHE BOOL \"Choose if JPEG support should be built\")\\n\\nIF(WITH_JPEG)\\n    FIND_PACKAGE(JPEG)\\n\\n    IF(JPEG_FOUND)\\n        SET(HAVE_JPEG 1)\\n        INCLUDE_DIRECTORIES(${JPEG_INCLUDE_DIR})\\n        ADD_DEFINITIONS(-DHAVE_JPEG=${HAVE_JPEG})\\n    ENDIF()\\nENDIF()\\n\\n###############################################################################\\n# Generate geo_config.h with compile-time configuration\\n\\nMESSAGE(STATUS \"Generating geo_config.h header\")\\n\\nCONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/geo_config.h.in\\n    ${CMAKE_CURRENT_SOURCE_DIR}/geo_config.h)\\n\\nMESSAGE(STATUS \"Generating geo_config.h header - done\")\\n\\n\\n###############################################################################\\n# Installation settings\\n\\nSET(GEOTIFF_CSV_DATA\\n    csv/alias.csv \\n    csv/area.csv \\n    csv/change.csv \\n    csv/compdcs.csv \\n    csv/coordinate_axis.csv \\n    csv/coordinate_axis_name.csv \\n    csv/coordinate_operation.csv \\n    csv/coordinate_operation_method.csv \\n    csv/coordinate_operation_parameter.csv \\n    csv/coordinate_operation_parameter_value.csv \\n    csv/coordinate_operation_path.csv \\n    csv/coordinate_reference_system.csv \\n    csv/coordinate_system.csv \\n    csv/datum.csv \\n    csv/datum_shift.csv \\n    csv/datum_shift_pref.csv \\n    csv/deprecation.csv \\n    csv/ellipsoid.csv \\n    csv/esri_datum_override.csv \\n    csv/gcs.csv \\n    csv/gcs.override.csv \\n    csv/geoccs.csv \\n    csv/naming_system.csv \\n    csv/pcs.csv \\n    csv/pcs.override.csv \\n    csv/prime_meridian.csv \\n    csv/projop_wparm.csv \\n    csv/stateplane.csv \\n    csv/supersession.csv \\n    csv/unit_of_measure.csv \\n    csv/version_history.csv \\n    csv/vertcs.csv \\n    csv/vertcs.override.csv )\\n\\nSET(GEOTIFF_LIB_HEADERS\\n    geotiff.h\\n    geotiffio.h\\n    geovalues.h\\n    geonames.h\\n    geokeys.h\\n    geo_config.h\\n    geo_tiffp.h\\n    geo_keyp.h\\n    geo_normalize.h\\n    cpl_serv.h\\n    geo_simpletags.h\\n    epsg_datum.inc\\n    epsg_gcs.inc\\n    epsg_pm.inc\\n    epsg_units.inc\\n    geo_ctrans.inc\\n    epsg_ellipse.inc\\n    epsg_pcs.inc\\n    epsg_proj.inc\\n    epsg_vertcs.inc\\n    geokeys.inc\\n    libxtiff/xtiffio.h)\\n\\n#    ${PROJECT_BINARY_DIR}/geotiff_version.h\\n\\nIF(WIN32)\\n    SET(DEFAULT_LIB_SUBDIR lib)\\n    SET(DEFAULT_DATA_SUBDIR .)\\n    SET(DEFAULT_INCLUDE_SUBDIR include)\\n\\n    IF(MSVC)\\n        SET(DEFAULT_BIN_SUBDIR bin)\\n    ELSE()\\n        SET(DEFAULT_BIN_SUBDIR .)\\n    ENDIF()\\nELSE()\\n    # Common locatoins for Unix and Mac OS X\\n    SET(DEFAULT_BIN_SUBDIR bin)\\n    SET(DEFAULT_LIB_SUBDIR lib)\\n    SET(DEFAULT_DATA_SUBDIR share)\\n    SET(DEFAULT_INCLUDE_SUBDIR include)\\nENDIF()\\n\\n# Locations are changeable by user to customize layout of GeoTIFF installation\\n\n```\n\n----------------------------------------\n\nTITLE: Generating C# Properties for cv::FaceDetectorYN using CMake\nDESCRIPTION: This snippet uses the `CREATE_OCV_CLASS_PROPERTY` CMake macro to generate C# wrapper properties for the `cv::FaceDetectorYN` C++ class (YuNet face detector). It defines properties like `ScoreThreshold` (float), `NMSThreshold` (float), `TopK` (int), and `InputSize` (CvSize mapped to System.Drawing.Size) for configuring the detector. The output file is `Emgu.CV/Objdetect/FaceDetectorYN.g.cs` in the `Emgu.CV` namespace, using `CvInvoke`. It requires `objdetect_c.h` and depends on `HAVE_opencv_objdetect`.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\nCREATE_OCV_CLASS_PROPERTY( \n    \"objdetect/FaceDetectorYN_property\" \n    \"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV/Objdetect/FaceDetectorYN.g.cs\"\n    \"cv::FaceDetectorYN\" \n    \"FaceDetectorYN\" \n    \"ScoreThreshold;NMSThreshold;TopK;InputSize\" \n    \"float;float;int;CvSize\" \n    \"propW;propW;propW;struct\"\n    \"ScoreThreshold;NMSThreshold;TopK;InputSize\" \n    \"float;float;int;System.Drawing.Size\"\n    \"The score threshold to filter out bounding boxes of score less than the given value;\\n     The Non-maximum-suppression threshold to suppress bounding boxes that have IoU greater than the given value;\\n     The number of bounding boxes to preserve from top rank based on score;\\n     The size for the network input, which overwrites the input size of creating model.\"\n    \"Emgu.CV\"\n    \"CvInvoke\"\n    \"FaceDetectorYN\"\n\t\"\"\n    \"#include \\\"objdetect_c.h\\\"\"\n\t\"\"\n\t\"\"\n\t${HAVE_opencv_objdetect})\n```\n\n----------------------------------------\n\nTITLE: Conditionally Defining Emgu.CV Documentation Build Target in CMake\nDESCRIPTION: This CMake code block checks if the MSBuild executable path is defined (`MSBUILD_EXECUTABLE`) and if the documentation build is enabled (`EMGU_CV_DOCUMENTATION_BUILD`). If both conditions are true, it defines a project named `Emgu.CV.Document`, sets specific MSBuild flags for the Win32 platform, and adds a custom target also named `Emgu.CV.Document`. This target executes a series of commands: restoring NuGet packages, building the main solution, generating HTML documentation using the SHFB project, generating OpenXML documentation using the same SHFB project, and finally creating a zip archive of the 'Help' directory. It also specifies the SHFB project file as a source for the target and adds a dependency on the `Emgu.CV.WindowsUI` target. Lastly, it sets the FOLDER property for IDE organization.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/miscellaneous/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nIF(NOT (\"${MSBUILD_EXECUTABLE}\" STREQUAL \"\") AND ${EMGU_CV_DOCUMENTATION_BUILD})\n#MESSAGE(STATUS \"MSBUILD_EXECUTABLE: ${MSBUILD_EXECUTABLE}\")\nPROJECT(Emgu.CV.Document)\n\nSET(EXTRA_MSBUILD_FLAGS \"\")\nIF(WIN32)\n  SET(EXTRA_MSBUILD_FLAGS \"/p:Platform=\\\"Any CPU\\\"\")\nENDIF()\n\nADD_CUSTOM_TARGET(\n   ${PROJECT_NAME} ALL\n   COMMAND \"${MSBUILD_EXECUTABLE}\" -t:restore \"${CMAKE_CURRENT_SOURCE_DIR}/../Solution/Windows.Desktop/Emgu.CV.sln\"\n   COMMAND \"${MSBUILD_EXECUTABLE}\" /p:Configuration=${DEFAULT_CS_CONFIG} ${EXTRA_MSBUILD_FLAGS} \"${CMAKE_CURRENT_SOURCE_DIR}/../Solution/Windows.Desktop/Emgu.CV.sln\"\n   COMMAND \"${MSBUILD_EXECUTABLE}\" /p:Configuration=${DEFAULT_CS_CONFIG} ${EXTRA_MSBUILD_FLAGS} \"${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.html.shfbproj\"\n   COMMAND \"${MSBUILD_EXECUTABLE}\" /p:Configuration=${DEFAULT_CS_CONFIG} ${EXTRA_MSBUILD_FLAGS} \"${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.html.shfbproj\" /property:PresentationStyle=OpenXml /property:HelpFileFormat=OpenXml\n   COMMAND \"${CMAKE_COMMAND}\" -E tar \"cfv\" \"${CMAKE_CURRENT_SOURCE_DIR}/../Help.zip\" --format=zip \"${CMAKE_CURRENT_SOURCE_DIR}/../Help\"\n   SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.html.shfbproj\n)\nADD_DEPENDENCIES(${PROJECT_NAME} Emgu.CV.WindowsUI)\n\nset_target_properties(${PROJECT_NAME} PROPERTIES FOLDER \"emgu\")\n```\n\n----------------------------------------\n\nTITLE: Building and Running iOS MAUI App on Simulator - Shell\nDESCRIPTION: Builds and runs the MAUI application on an iOS simulator targeting net9.0-ios. The target device must be selected within the simulator environment. Relies on iOS simulator and relevant .NET iOS SDKs being installed. Output is the app running in the iOS simulator.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Example/MAUI/BuildInfo/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n> dotnet build -t:Run -f net9.0-ios\n```\n\n----------------------------------------\n\nTITLE: Defining CMake Macro to Check License Type\nDESCRIPTION: This CMake code defines a macro named `CHECK_LICENSE_TYPE`. Inside the macro, it prints the path to the license file. It then uses `EXECUTE_PROCESS` with either `findstr` (Windows) or `grep` (other OS) to search for the string \"gpl\" within the license file specified by `LICENSE_FILE_NAME`. Based on whether the string is found (checking the length of the output), it sets the `LICENSE_TYPE` variable to either \"Commercial\" or \"Dual License\" and prints the result.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_53\n\nLANGUAGE: cmake\nCODE:\n```\nMACRO(CHECK_LICENSE_TYPE)\n\tMESSAGE(STATUS \"LICENSE FILE: ${CMAKE_CURRENT_SOURCE_DIR}/${LICENSE_FILE_NAME}\")\n    IF (WIN32)\n        EXECUTE_PROCESS(COMMAND \"findstr\" \"gpl\" \"${LICENSE_FILE_NAME}\" WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} OUTPUT_VARIABLE TMP)\n\tELSE()\t\n\t    EXECUTE_PROCESS(COMMAND \"grep\" \"gpl\" \"${LICENSE_FILE_NAME}\" WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} OUTPUT_VARIABLE TMP)\n\tENDIF()\n\t\n\tSTRING(STRIP \"${TMP}\" TMP)\n\tSTRING(LENGTH \"${TMP}\" GPL_LICENSE_LENGTH)\n\tSET (LICENSE_TYPE \"Dual License\")\n\t\n\tIF(${GPL_LICENSE_LENGTH} EQUAL 0)\n\t\tSET(LICENSE_TYPE \"Commercial\")\t\t\n\tENDIF()\n\t\n\tMESSAGE(STATUS \"LICENSE_TYPE: ${LICENSE_TYPE}\")\nENDMACRO()\n```\n\n----------------------------------------\n\nTITLE: Setting Target Properties and Dependencies for Emgu.CV.Bitmap\nDESCRIPTION: This CMake snippet configures the Emgu.CV.Bitmap target within the build system. If solution folders are enabled (`ENABLE_SOLUTION_FOLDERS` is true), it sets the `FOLDER` property to \"emgu\", organizing the project within IDEs like Visual Studio. It also explicitly declares that the Emgu.CV.Bitmap target depends on the Emgu.CV target, ensuring Emgu.CV is built first.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Bitmap/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n    if(ENABLE_SOLUTION_FOLDERS)\n      set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER \"emgu\")\n    endif()\n    ADD_DEPENDENCIES(${PROJECT_NAME} Emgu.CV)\n```\n\n----------------------------------------\n\nTITLE: Setting Final Unmanaged Library Path and Creating Directory in CMake\nDESCRIPTION: This snippet constructs the final `UNMANAGED_LIBRARY_OUTPUT_PATH` by combining the CMake source directory (`CMAKE_SOURCE_DIR`), the `libs` folder, and the previously determined `UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER`. For Android builds, it overrides `LIBRARY_OUTPUT_PATH` with this value. Finally, it ensures the calculated output directory exists using `FILE(MAKE_DIRECTORY ...)`. It also initializes an empty variable `UNMANAGED_DLL_EXTRA`.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_24\n\nLANGUAGE: cmake\nCODE:\n```\nSET(UNMANAGED_LIBRARY_OUTPUT_PATH \"${CMAKE_SOURCE_DIR}/libs${UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER}\")\nIF(ANDROID)\n  SET(LIBRARY_OUTPUT_PATH ${UNMANAGED_LIBRARY_OUTPUT_PATH})\nENDIF()\nFILE(MAKE_DIRECTORY ${UNMANAGED_LIBRARY_OUTPUT_PATH})\n\nSET(UNMANAGED_DLL_EXTRA)\n```\n\n----------------------------------------\n\nTITLE: Creating VideoCapture Class Properties for OpenCV Emgu.CV Bindings - CMake\nDESCRIPTION: Defines properties for the Emgu.CV VideoCapture class by mapping C++ cv::VideoCapture members ('isOpened', 'ExceptionMode', 'release') to generated C# properties using the CREATE_OCV_CLASS_PROPERTY macro. It specifies property names, types, C# targets, and includes necessary headers and build flags. The code expects OpenCV to be present; it is dependent on 'videoio_c_extra.h' and the availability of the videoio module.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_40\n\nLANGUAGE: CMake\nCODE:\n```\nCREATE_OCV_CLASS_PROPERTY( \n  \"videoio/video_capture_property\" \n  \"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV/Videoio/VideoCapture.g.cs\"\n  \"cv::VideoCapture\" \n  \"VideoCapture\" \n  \"isOpened;ExceptionMode;release\" \n  \"bool;bool;void\" \n  \"val;prop;act0\"\n  \"IsOpened;ExceptionMode;Release\" \n  \"bool;bool;void\"\n  \"True if the camera is opened;\nIf True, methods raise exceptions if not successful instead of returning an error code;\nThe method is automatically called by subsequent VideoCapture.Open and by VideoCapture destructor.\"\n  \"Emgu.CV\"\n  \"CvInvoke\"\n  \"VideoCapture\"\n  \"\"\n  \"#include \\\"videoio_c_extra.h\\\"\"\n  \"\"\n  \"\"\n  ${HAVE_opencv_videoio})\n```\n\n----------------------------------------\n\nTITLE: Defining Post-Build VSIX Package Signing Target for Windows with CMake\nDESCRIPTION: Initializes `EMGUCV_POST_PROCESS_VSIX` as empty, then conditionally defines an MSBuild `<Target>` named `PostProcessVSIX` if VSIX signing tools are found (`EMGU_VSIX_SIGN_FOUND`) and the build is for Windows (`WIN32`). This target executes after the `PostBuildEvent`. It converts the paths of the VSIX signing executables (`EMGU_VSIX_SIGN_EXECUTABLE`, `OPENVSIXSIGNTOOL_EXECUTABLE`) to native Windows paths, ensures a 'signed' output directory exists, and runs the `EMGU_VSIX_SIGN_EXECUTABLE` command to sign the generated VSIX package (`$(OutputPath)$(AssemblyName).vsix`). The target definition is stored in the `EMGUCV_POST_PROCESS_VSIX` variable.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_84\n\nLANGUAGE: cmake\nCODE:\n```\n# Sign the debugger visualizer\n  SET(EMGUCV_POST_PROCESS_VSIX \"\")\n  IF(EMGU_VSIX_SIGN_FOUND AND WIN32)\n    file(TO_NATIVE_PATH ${EMGU_VSIX_SIGN_EXECUTABLE} EMGU_VSIX_SIGN_EXECUTABLE_NATIVE_PATH)\n\tfile(TO_NATIVE_PATH ${OPENVSIXSIGNTOOL_EXECUTABLE} OPENVSIXSIGNTOOL_EXECUTABLE_NATIVE_PATH)\n    SET(EMGUCV_POST_PROCESS_VSIX \"${EMGUCV_POST_PROCESS_VSIX}\n    <Target Name=\\\"PostProcessVSIX\\\" AfterTargets=\\\"PostBuildEvent\\\" Condition=\\\"Exists('${EMGU_SIGN_EXECUTABLE_NATIVE_PATH}')\\\">\n      <Message Text=\\\"Signing $(OutputPath)$(AssemblyName).vsix\\\" Importance=\\\"high\\\" />\n      <MakeDir Directories=\\\"$(OutputPath)\\\\signed\\\"/>\n      <Exec Command='${EMGU_VSIX_SIGN_EXECUTABLE_NATIVE_PATH} \\\"$(OutputPath)$(AssemblyName).vsix\\\" \\\"$(OutputPath)signed\\\" \\\"${OPENVSIXSIGNTOOL_EXECUTABLE_NATIVE_PATH}\\\"' WorkingDirectory=\\\"$(OutputPath)\\\" />\n    </Target>\")\n  ENDIF()\n```\n\n----------------------------------------\n\nTITLE: Initializing Project and Setting Include Directories in CMake\nDESCRIPTION: Defines the CMake project named `cvextern_test`. It sets a variable `OPENCV_MODULES_DIR` pointing to the OpenCV modules subdirectory and adds several include directories required for compiling the test executable, including OpenCV headers, Emgu CV Extern headers, the parent directory, and the CMake binary directory.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/tests/cvextern_test/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nproject(cvextern_test)\n\nSET(OPENCV_MODULES_DIR \"${OPENCV_SUBFOLDER}/modules\")\nINCLUDE_DIRECTORIES(\"${OPENCV_SUBFOLDER}/include/opencv\")\nINCLUDE_DIRECTORIES(\"${PROJECT_SOURCE_DIR}/../../Emgu.CV.Extern/\")\nINCLUDE_DIRECTORIES(\"${PROJECT_SOURCE_DIR}/../../\")\n\nINCLUDE_DIRECTORIES(\"${CMAKE_BINARY_DIR}\")\n#INCLUDE_DIRECTORIES(${TIFF_INCLUDE_DIR})\n#INCLUDE_DIRECTORIES(${ZLIB_INCLUDE_DIR})\n#INCLUDE_DIRECTORIES(${GEOTIFF_INCLUDE_DIR})\n```\n\n----------------------------------------\n\nTITLE: Defining OpenCV Module Candidates List in CMake\nDESCRIPTION: This CMake code defines a variable `OPENCV_MODULE_NAME_CANDIDATES` containing a list of potential OpenCV module names. This list is used later to determine which actual OpenCV modules are available in the build.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_36\n\nLANGUAGE: cmake\nCODE:\n```\nSET (OPENCV_MODULE_NAME_CANDIDATES\n  core imgproc video flann ml imgcodecs videoio highgui objdetect features2d calib3d\n  cudaarithm cudawarping cudafilters cudaimgproc cudalegacy cudaoptflow \n  cudastereo cudabgsegm cudafeatures2d cudacodec cudaobjdetect\n  photo superres  \n  videostab shape\n  cudev  \n  face ximgproc xobjdetect xfeatures2d xphoto bgsegm optflow\n  stitching plot\n  dnn dnn_objdetect dnn_superres aruco fuzzy viz bioinspired text tracking\n  dpm\n  saliency\n  img_hash\n  phase_unwrapping\n  freetype\n  hfs\n  quality\n  stereo\n  surface_matching\n  alphamat\n  intensity_transform\n  rapid\n  line_descriptor\n  mcc\n  hdf\n  gapi\n  wechat_qrcode\n  structured_light\n  rgbd\n  reg\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding libxtiff Static Library - CMake Script\nDESCRIPTION: This snippet uses the ADD_LIBRARY command to create a static library named 'xtiff' from the source file 'xtiff.c'. It is intended to be used within a CMake-based build process and requires both CMake and the input source file to be present. The command specifies that the resulting library will be a static library, and can be linked with other targets in the project. Dependencies are minimal, and there are no configurable parameters in this snippet.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/libgeotiff/libgeotiff-1.4.0/libxtiff/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nADD_LIBRARY(xtiff STATIC xtiff.c)\n```\n\n----------------------------------------\n\nTITLE: Defining Lists of GeoTIFF Data and Header Files in CMake\nDESCRIPTION: These two `SET` commands define CMake list variables. `GEOTIFF_CSV_DATA` lists the relative paths to various CSV data files used by GeoTIFF. `GEOTIFF_LIB_HEADERS` lists the header files that constitute the public interface of the libgeotiff library, including the generated `geo_config.h` and various internal `.inc` files.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/libgeotiff/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nSET(GEOTIFF_CSV_DATA\n    csv/alias.csv\n    csv/area.csv\n    csv/change.csv\n    csv/codes.csv\n    csv/coordinate_axis.csv\n    csv/coordinate_axis_name.csv\n    csv/coordinate_operation.csv\n    csv/coordinate_operation_method.csv\n    csv/coordinate_operation_parameter.csv\n    csv/coordinate_operation_parameter_value.csv\n    csv/coordinate_operation_path.csv\n    csv/coordinate_reference_system.csv\n    csv/coordinate_system.csv\n    csv/datum.csv\n    csv/ellipsoid.csv\n    csv/esri_datum_override.csv\n    csv/gcs.csv\n    csv/gcs.override.csv\n    csv/naming_system.csv\n    csv/pcs.csv\n    csv/pcs.override.csv\n    csv/prime_meridian.csv\n    csv/projop_wparm.csv\n    csv/stateplane.csv\n    csv/unit_of_measure.csv\n    csv/version_history.csv)\n\nSET(GEOTIFF_LIB_HEADERS\n    geotiff.h\n    geotiffio.h\n    geovalues.h\n    geonames.h\n    geokeys.h\n    geo_config.h\n    geo_tiffp.h\n    geo_keyp.h\n    geo_normalize.h\n    cpl_serv.h\n    geo_simpletags.h\n    epsg_datum.inc\n    epsg_gcs.inc\n    epsg_pm.inc\n    epsg_units.inc\n    geo_ctrans.inc\n    epsg_ellipse.inc\n    epsg_pcs.inc\n    epsg_proj.inc\n    epsg_vertcs.inc\n    geokeys.inc)\n```\n\n----------------------------------------\n\nTITLE: Defining CUDA-Specific NuGet Package IDs in CMake\nDESCRIPTION: This CMake code checks if the `WITH_CUDA` option is enabled. If it is, it appends '.cuda' to the Windows runtime NuGet ID (`EMGUCV_WINDOWS_NUGET_ID`) and defines several additional NuGet IDs related to CUDA runtime components, including base CUDA runtime, cuBLAS, cuBLAS Lt, NPP, cuFFT, and various cuDNN components (base, advanced, CNN, engines, ops).\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_58\n\nLANGUAGE: cmake\nCODE:\n```\nIF(WITH_CUDA)\n\tSET(EMGUCV_WINDOWS_NUGET_ID \"${EMGUCV_WINDOWS_NUGET_ID}.cuda\")\n\tSET(EMGU_WINDOWS_CUDA_NUGET_ID \"Emgu.runtime.windows.cuda\")\n\tSET(EMGU_CUDART_NUGET_ID \"${EMGU_WINDOWS_CUDA_NUGET_ID}.rt\")\n\tSET(EMGU_CUDA_BLAS_NUGET_ID \"${EMGU_WINDOWS_CUDA_NUGET_ID}.blas\")\n\tSET(EMGU_CUDA_BLAS_LT_NUGET_ID \"${EMGU_CUDA_BLAS_NUGET_ID}.lt\")\n\tSET(EMGU_NPP_NUGET_ID \"${EMGU_WINDOWS_CUDA_NUGET_ID}.npp\")\n\tSET(EMGU_CUFFT_NUGET_ID \"${EMGU_WINDOWS_CUDA_NUGET_ID}.fft\")\n\tSET(EMGU_CUDNN_NUGET_ID \"${EMGU_WINDOWS_CUDA_NUGET_ID}.dnn\")\n\tSET(EMGU_CUDNN_ADV_NUGET_ID \"${EMGU_CUDNN_NUGET_ID}.adv\")\n\tSET(EMGU_CUDNN_CNN_NUGET_ID \"${EMGU_CUDNN_NUGET_ID}.cnn\")\n\tSET(EMGU_CUDNN_ENGINES_NUGET_ID \"${EMGU_CUDNN_NUGET_ID}.engines\")\n\tSET(EMGU_CUDNN_OPS_NUGET_ID \"${EMGU_CUDNN_NUGET_ID}.ops\")\n#ELSE()\n```\n\n----------------------------------------\n\nTITLE: Excluding Core EmguCV Libraries from CMake Build (Commented Out)\nDESCRIPTION: These lines, currently commented out, would typically add the core EmguCV libraries (CV, Bitmap, WPF, Models, UI) to the build process using ADD_SUBDIRECTORY. They are currently excluded, suggesting they might be built separately or managed differently in this configuration.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/platforms/nuget/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n#ADD_SUBDIRECTORY(\"Emgu.CV\")\n#ADD_SUBDIRECTORY(\"Emgu.CV.Bitmap\")\n#ADD_SUBDIRECTORY(\"Emgu.CV.Wpf\")\n#ADD_SUBDIRECTORY(\"Emgu.CV.Models\")\n#ADD_SUBDIRECTORY(\"Emgu.CV.UI\")\n```\n\n----------------------------------------\n\nTITLE: Setting GeoTIFF Project Name and Target Variables in CMake\nDESCRIPTION: This snippet sets the main project name to 'GeoTIFF' and defines CMake variables for the library name ('geotiff') and the archive target name ('geotiff_archive'). The library target name 'geotiff_library' is commented out.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/libgeotiff/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nPROJECT(GeoTIFF)\nSET(GEOTIFF_LIB_NAME geotiff)\n#SET(GEOTIFF_LIBRARY_TARGET geotiff_library)\nSET(GEOTIFF_ARCHIVE_TARGET geotiff_archive)\n```\n\n----------------------------------------\n\nTITLE: Defining Base NuGet Package IDs in CMake\nDESCRIPTION: This CMake code defines several variables holding the base IDs for various Emgu CV related NuGet packages. It sets IDs for the core library (`Emgu.CV`), Bitmap extensions, WPF extensions, models, UI components, Windows runtime (incorporating the `EMGUCV_RUNTIME_EXTRA_TAG`), MSVC runtime dependencies for different architectures (x86, x64, arm64), and the zlibwapi runtime.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_56\n\nLANGUAGE: cmake\nCODE:\n```\nSET(EMGUCV_NUGET_ID \"Emgu.CV\")\nSET(EMGUCV_BITMAP_NUGET_ID \"Emgu.CV.Bitmap\")\nSET(EMGUCV_WPF_NUGET_ID \"Emgu.CV.Wpf\")\nSET(EMGUCV_MODELS_NUGET_ID \"Emgu.CV.Models\")\nSET(EMGUCV_UI_NUGET_ID \"Emgu.CV.UI\")\nSET(EMGUCV_WINDOWS_NUGET_ID \"${EMGUCV_NUGET_ID}.runtime${EMGUCV_RUNTIME_EXTRA_TAG}.windows\")\nSET(EMGU_WINDOWS_MSVCRT_X86_NUGET_ID \"Emgu.runtime.windows.msvc.rt.x86\")\nSET(EMGU_WINDOWS_MSVCRT_X64_NUGET_ID \"Emgu.runtime.windows.msvc.rt.x64\")\nSET(EMGU_WINDOWS_MSVCRT_ARM64_NUGET_ID \"Emgu.runtime.windows.msvc.rt.arm64\")\nSET(EMGU_ZLIBWAPI_ID \"Emgu.runtime.windows.zlibwapi.x64\")\nSET(EMGU_ZLIBWAPI_VERSION \"1.2.3\")\n```\n\n----------------------------------------\n\nTITLE: Adding Windows x86 MSVCRT NuGet Dependency with CMake\nDESCRIPTION: Conditionally appends a NuGet dependency entry for the x86 Microsoft Visual C++ Redistributable (MSVCRT) to the `EMGUCV_WINDOWS_NUGET_DEPENDENCY` variable. This action is performed only if the `HAVE_WINDESKTOP_X86` variable is true, indicating that the build targets the Windows x86 platform. The specific NuGet package ID and version are derived from the CMake variables `${EMGU_WINDOWS_MSVCRT_X86_NUGET_ID}` and `${EMGU_WINDOWS_MSVCRT_VERSION}`.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_78\n\nLANGUAGE: cmake\nCODE:\n```\nIF(HAVE_WINDESKTOP_X86)\n  SET(EMGUCV_WINDOWS_NUGET_DEPENDENCY \"${EMGUCV_WINDOWS_NUGET_DEPENDENCY}\n\t  <dependency id=\\\"${EMGU_WINDOWS_MSVCRT_X86_NUGET_ID}\\\" version=\\\"${EMGU_WINDOWS_MSVCRT_VERSION}\\\" />\n\t  \")\t\t\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Setting Full Installation Directory Paths in CMake\nDESCRIPTION: This snippet sets final variables (`GEOTIFF_BIN_DIR`, `GEOTIFF_LIB_DIR`, `GEOTIFF_INCLUDE_DIR`, `GEOTIFF_DATA_DIR`) based on the values of the customizable subdirectory variables (e.g., `GEOTIFF_BIN_SUBDIR`). These full path variables are typically used in subsequent `INSTALL` commands to specify destination directories relative to the installation prefix.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/libgeotiff/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\n# Full paths for the installation\nSET(GEOTIFF_BIN_DIR ${GEOTIFF_BIN_SUBDIR})\nSET(GEOTIFF_LIB_DIR ${GEOTIFF_LIB_SUBDIR})\nSET(GEOTIFF_INCLUDE_DIR ${GEOTIFF_INCLUDE_SUBDIR})\nSET(GEOTIFF_DATA_DIR ${GEOTIFF_DATA_SUBDIR})\n```\n\n----------------------------------------\n\nTITLE: Building macOS NuGet Package for Emgu.CV Runtime (CMake)\nDESCRIPTION: This CMake script defines the build process for the `Emgu.CV.runtime.macos.nuget` package. It only executes if the `HAVE_MACOS` variable is true. The script defines the project, determines the output directory, calls the custom `BUILD_NUGET_PACKAGE` function with project details, optionally signs the package using `EMGU_SIGN_NUGET` if signing is enabled, sets solution folder properties if `ENABLE_SOLUTION_FOLDERS` is true, and declares dependencies on the `cvextern` target and potentially the `Emgu.CV` target. Key dependencies include the `HAVE_MACOS` variable, several path variables (`EMGU_CV_SOURCE_DIR`, `CMAKE_CURRENT_SOURCE_DIR`), version/ID variables (`CPACK_PACKAGE_VERSION`, `EMGUCV_MACOS_NUGET_ID`), and the custom functions `BUILD_NUGET_PACKAGE` and `EMGU_SIGN_NUGET`.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/platforms/nuget/Emgu.CV.runtime.macos/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nIF (HAVE_MACOS)\n  \n  PROJECT(Emgu.CV.runtime.macos.nuget)\n\n  get_filename_component(NUGET_OUTPUT_DIR ${CMAKE_CURRENT_SOURCE_DIR} DIRECTORY)\n\n  BUILD_NUGET_PACKAGE(\n    ${PROJECT_NAME} \n\t\"${EMGU_CV_SOURCE_DIR}/Emgu.CV/NetStandard/Emgu.CV.csproj\"  #csproj_file \n\t\"${CMAKE_CURRENT_SOURCE_DIR}/Package.nuspec\" #nuspec_file \n\t\"${NUGET_OUTPUT_DIR}\" #output_dir \n\t\"${CMAKE_CURRENT_SOURCE_DIR}\" #working_dir\n\t) \n\n  IF (EMGU_NUGET_SIGN_FOUND)\n    EMGU_SIGN_NUGET(${PROJECT_NAME} \"${NUGET_OUTPUT_DIR}/${EMGUCV_MACOS_NUGET_ID}.${CPACK_PACKAGE_VERSION}.nupkg\")\n  ENDIF()\n\n  if(ENABLE_SOLUTION_FOLDERS)\n    set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER \"nuget\")\n  endif() \n\n  ADD_DEPENDENCIES(${PROJECT_NAME} cvextern)\n  \n  IF (TARGET Emgu.CV)\n    ADD_DEPENDENCIES(${PROJECT_NAME} Emgu.CV)\n  ENDIF()\n\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding Aruco Example Project to EmguCV Solution in CMake\nDESCRIPTION: This CMake script conditionally includes the `Example.Aruco` C# project in the build process. It checks for the presence of the `Emgu.CV.Platform.NetFramework` target. If found, it defines the project, adds it to the `Emgu.CV.Example.sln` Visual Studio solution using a custom `MSBUILD_CSPROJ_IN_SOLUTION` command, organizes it within the \"Emgu.CV.Examples\" folder in the IDE, and establishes a dependency on the .NET Framework platform target.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Example/Aruco/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# --------------------------------------------------------\n#  Copyright (C) 2004-2025 by EMGU Corporation. All rights reserved.\n# --------------------------------------------------------\n\nIF(TARGET Emgu.CV.Platform.NetFramework)\n  PROJECT(Example.Aruco)\n  MSBUILD_CSPROJ_IN_SOLUTION(${PROJECT_NAME} \"${CMAKE_CURRENT_SOURCE_DIR}/../../Solution/Windows.Desktop/Emgu.CV.Example.sln\" \"Aruco\" \"\" ALL)\n  set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER \"Emgu.CV.Examples\")\n  ADD_DEPENDENCIES(${PROJECT_NAME} Emgu.CV.Platform.NetFramework)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Determining NuGet Package Architecture Suffix in CMake\nDESCRIPTION: This snippet determines the architecture suffix string (e.g., \"x86 x64\", \"arm64\") for the Emgu CV NuGet package title based on CMake cache variables (`HAVE_WINDESKTOP_X86`, `HAVE_WINDESKTOP_X64`, `HAVE_WINDESKTOP_ARM64`). It concatenates the supported architectures, strips leading/trailing whitespace, and removes the specific combination \"x86 x64 arm64\" (likely to handle the case where all are present, resulting in an empty suffix, though the replacement string is empty which might be unintended).\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_67\n\nLANGUAGE: cmake\nCODE:\n```\nSET(EMGUCV_NUGET_TITLE_ARCH \"\")\nIF(HAVE_WINDESKTOP_X86)\n SET(EMGUCV_NUGET_TITLE_ARCH \"${EMGUCV_NUGET_TITLE_ARCH} x86\")\nENDIF()\nIF(HAVE_WINDESKTOP_X64)\n SET(EMGUCV_NUGET_TITLE_ARCH \"${EMGUCV_NUGET_TITLE_ARCH} x64\")\nENDIF()\nIF(HAVE_WINDESKTOP_ARM64)\n SET(EMGUCV_NUGET_TITLE_ARCH \"${EMGUCV_NUGET_TITLE_ARCH} arm64\")\nENDIF()\nSTRING(STRIP \"${EMGUCV_NUGET_TITLE_ARCH}\" EMGUCV_NUGET_TITLE_ARCH)\nSTRING(REPLACE \"x86 x64 arm64\" \"\" EMGUCV_NUGET_TITLE_ARCH \"${EMGUCV_NUGET_TITLE_ARCH}\")\n```\n\n----------------------------------------\n\nTITLE: Creating Shared GeoTIFF Library in CMake\nDESCRIPTION: Defines a shared library target named by the GEOTIFF_LIBRARY_TARGET variable using ADD_LIBRARY. It includes the core GeoTIFF sources (GEOTIFF_LIB_SOURCES), potentially the in-code EPSG sources (GEOTIFF_LIB_CSV_SOURCES), and the XTIFF source (XTIFF_SOURCES).\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/libgeotiff/libgeotiff-1.4.0/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\n# Shared libgeotiff library\nADD_LIBRARY(${GEOTIFF_LIBRARY_TARGET} SHARED\n    ${GEOTIFF_LIB_SOURCES} ${GEOTIFF_LIB_CSV_SOURCES} ${XTIFF_SOURCES})\n```\n\n----------------------------------------\n\nTITLE: Marking GeoTIFF Subdirectory Variables as Advanced in CMake\nDESCRIPTION: Marks the previously defined installation subdirectory variables (GEOTIFF_BIN_SUBDIR, GEOTIFF_LIB_SUBDIR, GEOTIFF_INCLUDE_SUBDIR, GEOTIFF_DATA_SUBDIR) as advanced options in CMake configuration interfaces (like cmake-gui). This indicates they are intended for power-users and might not need adjustment for standard builds.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/libgeotiff/libgeotiff-1.4.0/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n# Mark *_SUBDIR variables as advanced and dedicated to use by power-users only.\nMARK_AS_ADVANCED(GEOTIFF_BIN_SUBDIR GEOTIFF_LIB_SUBDIR GEOTIFF_INCLUDE_SUBDIR GEOTIFF_DATA_SUBDIR)\n```\n\n----------------------------------------\n\nTITLE: Adding GeoTIFF Target Dependency in CMake\nDESCRIPTION: Conditionally adds a build dependency on the GeoTIFF library target(s). If the `GEOTIFF_LIBRARY` variable is set (meaning GeoTIFF support is configured) and it corresponds to an existing CMake target (checked using `TARGET GEOTIFF_LIBRARY`), this ensures the GeoTIFF library target(s) are built before `${the_target}`. Note that `GEOTIFF_LIBRARY` might contain multiple target names.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_110\n\nLANGUAGE: cmake\nCODE:\n```\nIF (GEOTIFF_LIBRARY)\n  IF (TARGET GEOTIFF_LIBRARY)\n    ADD_DEPENDENCIES(${the_target} ${GEOTIFF_LIBRARY})\n  ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Packages with CMake\nDESCRIPTION: Configures the installation step for the build using the INSTALL command. It copies all files matching the `*.nupkg` pattern from the current source directory (`${CMAKE_CURRENT_SOURCE_DIR}`) to the `platforms/` directory relative to the installation prefix. This step is associated with the `emgucv_binary` component.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/platforms/nuget/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nINSTALL(\n      DIRECTORY\n      ${CMAKE_CURRENT_SOURCE_DIR}\n      DESTINATION \"platforms/\"\n      COMPONENT emgucv_binary\n      FILES_MATCHING \n      PATTERN \"*.nupkg\"\n)\n```\n\n----------------------------------------\n\nTITLE: Including NetStandard Subdirectory in CMake Build\nDESCRIPTION: This CMake command `ADD_SUBDIRECTORY` tells the build system to descend into the specified `NetStandard` directory and process its `CMakeLists.txt` file. This incorporates the targets and build rules defined within that subdirectory into the main project build.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nADD_SUBDIRECTORY(NetStandard)\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies and Linking OpenCV Modules\nDESCRIPTION: Iterates through the list of required OpenCV module names (`OPENCV_MODULE_NAMES`). For each module, it adds an explicit build dependency (`ADD_DEPENDENCIES`) ensuring the module's target (`opencv_<module>`) is built before `cvextern_test`. It also links the `cvextern_test` executable against each OpenCV module library using `target_link_libraries`.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/tests/cvextern_test/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nFOREACH(CVEXTERN_OPTIONAL_DEP ${OPENCV_MODULE_NAMES}) \n  #  INCLUDE_DIRECTORIES(\"${OPENCV_MODULES_DIR}/${CVEXTERN_OPTIONAL_DEP}/include\")\n  MESSAGE(STATUS \"CVEXTERN_TEST dependency added:  opencv_${CVEXTERN_OPTIONAL_DEP}\")\n  ADD_DEPENDENCIES(${the_target} opencv_${CVEXTERN_OPTIONAL_DEP})\n  target_link_libraries(${the_target} opencv_${CVEXTERN_OPTIONAL_DEP})\nENDFOREACH()\n```\n\n----------------------------------------\n\nTITLE: Conditional Linking of libusb for DepthAI on Windows - CMake\nDESCRIPTION: This conditional block sets up the Windows-specific linking of the libusb-1.0.dll dependency if DepthAI integration is enabled. It constructs the expected binary directory using build type and appends the DLL path to a dependency list for correct runtime linkage. This only applies when both WIN32 and EMGU_CV_WITH_DEPTHAI are set in the build configuration.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_76\n\nLANGUAGE: CMake\nCODE:\n```\nIF(WIN32 )\n  #MESSAGE(STATUS \"++++++++++++++++++++  LIBUSB_BINARY_FILE_DIR: ${LIBUSB_BINARY_FILE_DIR}\")\n  IF (EMGU_CV_WITH_DEPTHAI)\n    SET(LIBUSB_BINARY_FILE_DIR \"${CMAKE_CURRENT_BINARY_DIR}/depthai-core/${CMAKE_BUILD_TYPE}\")\n    LIST(APPEND CVEXTERN_DEPENDENCY_DLLS \"${LIBUSB_BINARY_FILE_DIR}/libusb-1.0.dll\")\n  ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Displaying CPack Generators and Including CPack Module in CMake\nDESCRIPTION: This CMake snippet displays the final list of selected CPack generators stored in the `CPACK_GENERATOR` variable using a status message. It then includes the standard CPack module, which makes CPack targets and commands available for generating packages based on the configured settings.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_104\n\nLANGUAGE: CMake\nCODE:\n```\nMESSAGE(STATUS \"CPACK_GENERATOR: ${CPACK_GENERATOR}\")\nINCLUDE (CPack)\n```\n\n----------------------------------------\n\nTITLE: Including macOS Runtime in CMake Build\nDESCRIPTION: Adds the subdirectory containing the CMake build configuration for the EmguCV macOS runtime to the project build.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/platforms/nuget/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nADD_SUBDIRECTORY(\"Emgu.CV.runtime.macos\")\n```\n\n----------------------------------------\n\nTITLE: Adding OpenCL ICD Subdirectory Conditionally in CMake\nDESCRIPTION: This CMake snippet checks if the `TESSERACT_OPENCL` option is enabled. If it is, it adds the `opencl-icd` directory, located within the `3rdParty` folder relative to the CMake source directory, as a subdirectory to the build. This likely provides OpenCL runtime support needed by Tesseract.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_43\n\nLANGUAGE: cmake\nCODE:\n```\nIF(TESSERACT_OPENCL)\n  ADD_SUBDIRECTORY(${CMAKE_SOURCE_DIR}/3rdParty/opencl-icd-1.2.11.0/icd)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Building EmguCV CUDA BLAS LT NuGet Package for Windows (CMake)\nDESCRIPTION: This CMake script defines a project conditionally executed on Windows (x86/x64) with CUDA enabled. It uses the custom macro `BUILD_NUGET_PACKAGE` to create the `Emgu.runtime.windows.cuda.blas.lt.nuget` package based on the `Emgu.CV.csproj` and a specific `.nuspec` file. It optionally signs the package using `EMGU_SIGN_NUGET` if signing is configured (`EMGU_NUGET_SIGN_FOUND`). A dependency on `Emgu.runtime.windows.cuda.blas.nuget` is added, and the project is placed in a 'nuget' solution folder if `ENABLE_SOLUTION_FOLDERS` is true.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/platforms/nuget/Emgu.runtime.windows.cuda.blas.lt/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nIF (WIN32 AND (HAVE_WINDESKTOP_X86 OR HAVE_WINDESKTOP_X64) AND WITH_CUDA)\n\n  PROJECT(Emgu.runtime.windows.cuda.blas.lt.nuget)\n\n  get_filename_component(NUGET_OUTPUT_DIR ${CMAKE_CURRENT_SOURCE_DIR} DIRECTORY)\n\n  BUILD_NUGET_PACKAGE(\n    ${PROJECT_NAME} \n\t\"${EMGU_CV_SOURCE_DIR}/Emgu.CV/NetStandard/Emgu.CV.csproj\"  #csproj_file \n\t\"${CMAKE_CURRENT_SOURCE_DIR}/Package.nuspec\" #nuspec_file \n\t\"${NUGET_OUTPUT_DIR}\" #output_dir \n\t\"${CMAKE_CURRENT_SOURCE_DIR}\" #working_dir\n\t) \n\n  IF (EMGU_NUGET_SIGN_FOUND)\n    EMGU_SIGN_NUGET(${PROJECT_NAME} \"${NUGET_OUTPUT_DIR}/${EMGU_CUDA_BLAS_LT_NUGET_ID}.${EMGU_CUDA_BLAS_VERSION}.nupkg\")\n  ENDIF()\n\nADD_DEPENDENCIES(${PROJECT_NAME} Emgu.runtime.windows.cuda.blas.nuget)\n\nif(ENABLE_SOLUTION_FOLDERS)\n  set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER \"nuget\")\nendif() \n\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Wrapping NuGet Dependencies and Framework References (Commented Out)\nDESCRIPTION: These commented-out CMake commands wrap the accumulated dependency definitions (`EMGUCV_NUGET_DEPENDENCY`) within `<dependencies>` tags and the framework references (`EMGUCV_NUGET_FRAMEWORK_REFERENCES`) within `<frameworkReferences>` tags. This likely prepares the variables for final insertion into a .nuspec file template.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_66\n\nLANGUAGE: cmake\nCODE:\n```\n#SET(EMGUCV_NUGET_DEPENDENCY \"\n#\t<dependencies>\n#\\${EMGUCV_NUGET_DEPENDENCY}\n#    </dependencies>\")\n\n#SET(EMGUCV_NUGET_FRAMEWORK_REFERENCES \"\n#\t<frameworkReferences>\n#\\${EMGUCV_NUGET_FRAMEWORK_REFERENCES}\n#\n```\n\n----------------------------------------\n\nTITLE: Adding Build Subdirectories with CMake in CMake Language\nDESCRIPTION: Adds three subdirectories—'platform', 'driver_stub', and 'loader_test'—to the CMake build using the add_subdirectory command. This allows modular organization of code and enables each submodule to have its own CMake configuration. These commands take a directory path as the parameter and require the target directories to exist within the project. Subdirectory CMakeLists.txt files must be properly defined.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/3rdParty/opencl-icd-1.2.11.0/icd/test/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory (platform)\nadd_subdirectory (driver_stub)\nadd_subdirectory (loader_test)\n```\n\n----------------------------------------\n\nTITLE: Listing Connected iOS Devices using xcrun\nDESCRIPTION: Uses the 'xcrun xctrace' command-line tool (part of Xcode) to list all connected simulators and physical iOS devices along with their respective UUIDs. This is useful for obtaining the UUID needed for the specific device build/run command.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Example/MAUI/MauiDemoApp/README.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nxcrun xctrace list devices\n```\n\n----------------------------------------\n\nTITLE: Installing GeoTIFF Library Targets with CMake\nDESCRIPTION: Installs the built GeoTIFF library targets (static: GEOTIFF_ARCHIVE_TARGET, shared: GEOTIFF_LIBRARY_TARGET) using the INSTALL(TARGETS ...) command. Runtime components (like DLLs on Windows) are installed to 'bin', library files (shared libraries like .so, .dylib, .dll import libs) are installed to 'lib', and archive files (static libraries like .a, .lib) are installed to 'lib'. Destinations are relative to CMAKE_INSTALL_PREFIX. A commented-out version shows installation using the previously defined *_DIR variables.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/libgeotiff/libgeotiff-1.4.0/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\n# INSTALL(TARGETS ${GEOTIFF_ARCHIVE_TARGET} ${GEOTIFF_LIBRARY_TARGET}\n#\tRUNTIME DESTINATION ${GEOTIFF_BIN_DIR}\n#   LIBRARY DESTINATION ${GEOTIFF_LIB_DIR}\n#   ARCHIVE DESTINATION ${GEOTIFF_LIB_DIR})\n\nINSTALL( TARGETS ${GEOTIFF_ARCHIVE_TARGET} ${GEOTIFF_LIBRARY_TARGET}\n\t RUNTIME DESTINATION bin\n         LIBRARY DESTINATION lib\n\t ARCHIVE DESTINATION lib )\n```\n\n----------------------------------------\n\nTITLE: Configuring Tesseract OpenCL Option in CMake\nDESCRIPTION: This CMake code sets a cache variable `TESSERACT_OPENCL` to control whether OpenCL should be enabled specifically for Tesseract. It defaults to OFF, but the commented-out condition suggests it might have previously been enabled only for MSVC on Win32 when `EMGUCV_WITH_TESSERACT` was also enabled.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_42\n\nLANGUAGE: cmake\nCODE:\n```\nIF(MSVC AND WIN32 AND EMGUCV_WITH_TESSERACT)\n  SET(TESSERACT_OPENCL OFF CACHE BOOL \"ENABLE OpenCL for TESSERACT\")\nELSE()\n  SET(TESSERACT_OPENCL OFF CACHE BOOL \"ENABLE OpenCL for TESSERACT\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Building Emgu CV Docker Image (Shell)\nDESCRIPTION: Executes the 'build_docker' script to create the Ubuntu x86-64 Docker image containing Emgu CV. This command assumes the 'build_docker' script is present in the current directory or system path and has execute permissions.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Example/Docker/Ubuntu/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbuild_docker\n```\n\n----------------------------------------\n\nTITLE: Setting Mac Catalyst Specific Build Flags in CMake\nDESCRIPTION: This block checks if the `MAC_CATALYST` variable is true. If so, it sets the `IS_MAC_CATALYST_BUILD` flag to `ON`. It then further checks the `EMGUCV_ARCH` variable to set architecture-specific Mac Catalyst flags (`IS_MAC_CATALYST_ARM64_BUILD` or `IS_MAC_CATALYST_X86_64_BUILD`) accordingly. Status messages are printed if the flags are set.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_27\n\nLANGUAGE: cmake\nCODE:\n```\nIF(MAC_CATALYST)\n  SET(IS_MAC_CATALYST_BUILD ON)\n  MESSAGE(STATUS \"IS_MAC_CATALYST_BUILD: ${IS_MAC_CATALYST_BUILD}\")\n\n  IF (IS_MAC_CATALYST_BUILD AND (\"${EMGUCV_ARCH}\" STREQUAL \"arm64\"))\n    SET(IS_MAC_CATALYST_ARM64_BUILD ON)\n\tMESSAGE(STATUS \"IS_MAC_CATALYST_ARM64_BUILD: ${IS_MAC_CATALYST_ARM64_BUILD}\")\n  ENDIF()\n\n  IF (IS_MAC_CATALYST_BUILD AND (\"${EMGUCV_ARCH}\" STREQUAL \"x86_64\"))\n    SET(IS_MAC_CATALYST_X86_64_BUILD ON)\n\tMESSAGE(STATUS \"IS_MAC_CATALYST_X86_64_BUILD: ${IS_MAC_CATALYST_X86_64_BUILD}\")\n  ENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building the Leptonica Library using CMake\nDESCRIPTION: This CMake script defines the project 'libleptonica', sets up source file locations using `LEPT_ROOT_DIR`, configures paths, and prepares for auto-configuration. It collects source (.c) and header (.h) files using `file(GLOB)`, excluding specific files like `freetype.c`. Platform-specific configurations are applied: CXX language is optionally enabled for MSVC, specific preprocessor definitions are added for Windows Runtime (NETFX_CORE 8.1/10.0), Android, and iOS. It conditionally adds definitions and include directories for JPEG, PNG, and TIFF based on `WITH_...` and `BUILD_...` variables, always including the zlib directory. Finally, it defines a static library target `${the_target}` (which resolves to `libleptonica`), adds common definitions (`L_LITTLE_ENDIAN`, etc.), suppresses warnings for MSVC, and sets target properties like the IDE folder ('tesseract') and potentially the platform toolset.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/tesseract/libtesseract/leptonica/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# --------------------------------------------------------\n#  Copyright (C) 2004-2025 by EMGU Corporation. All rights reserved.\n# --------------------------------------------------------\n\nPROJECT(libleptonica)\n\n#IF(MSVC)\n#enable_language(CXX)\n#ENDIF()\n\nSET(LEPTON_DIR ${LEPT_ROOT_DIR})\nMESSAGE(STATUS \"LEPTON_DIR: ${LEPTON_DIR}\")\nset(CMAKE_MODULE_PATH \"${CMAKE_MODULE_PATH};${LEPT_ROOT_DIR}/cmake\")\n\nset(AUTOCONFIG_SRC ${LEPT_ROOT_DIR}/config_auto.h.in)\nset(AUTOCONFIG ${LEPT_ROOT_DIR}/src/config_auto.h)\ninclude(Configure)\n \nfile(GLOB lepton_srcs \"${LEPTON_DIR}/src/*.c\")\nfile(GLOB lepton_srcs_excludes \"${LEPTON_DIR}/src/freetype.c\" \"${LEPTON_DIR}/src/endiantest.c\" \"${LEPTON_DIR}/src/xtractprotos.c\" \"${LEPTON_DIR}/src/leptwin.c\"  )\nLIST(REMOVE_ITEM lepton_srcs ${lepton_srcs_excludes})\nfile(GLOB lepton_hdrs \"${LEPTON_DIR}/src/*.h\")\n\nIF(MSVC)\n  SET_SOURCE_FILES_PROPERTIES( ${lepton_srcs} PROPERTIES LANGUAGE CXX)\nENDIF()\n\nIF(NETFX_CORE)\n\tIF(\"8.1\" STREQUAL \"${CMAKE_SYSTEM_VERSION}\")\n\t\tadd_definitions(-FI\"${LEPTON_DIR}/../windows_runtime_macro_81.h\")\n\tELSEIF(\"10.0\" STREQUAL \"${CMAKE_SYSTEM_VERSION}\")\n\t\tadd_definitions(-FI\"${LEPTON_DIR}/../windows_runtime_macro_100.h\")\n\tENDIF()\n \n add_definitions(-sdl- -UUNICODE -U_UNICODE )\nENDIF()\n\nsource_group(\"Src\" FILES ${lepton_srcs})\nsource_group(\"Include\" FILES ${lepton_hdrs})\nset(the_target ${PROJECT_NAME})\n\nadd_definitions(-DL_LITTLE_ENDIAN -DXMD_H -DNO_CONSOLE_IO)\nIF (MSVC)\n  add_definitions(-W0)\nENDIF()\n\nIF (ANDROID)\n\tadd_definitions(-DANDROID_BUILD)\n\t#MESSAGE(\"Leptonica HAVE_FMEMOPEN: ${HAVE_FMEMOPEN}\")\n\t#remove_definitions(-DHAVE_FMEMOPEN)\nELSEIF(IOS OR APPLE)\n\tadd_definitions(-DOS_IOS)\nENDIF()\n\nif (NOT (ANDROID OR APPLE))\n  IF(WITH_JPEG AND BUILD_JPEG)\n    SET(LEPT_USE_JPEG TRUE)\n  ELSE()\n    SET(LEPT_USE_JPEG FALSE)\n  ENDIF()\n  MESSAGE(STATUS \"leptonica HAVE_LIBJPEG: ${LEPT_USE_JPEG}\")\n  if(LEPT_USE_JPEG)\n    add_definitions(-DHAVE_LIBJPEG)\n    include_directories(${OPENCV_SUBFOLDER}/3rdparty/libjpeg)\n  endif()\nendif()\n\nIF(WITH_PNG AND BUILD_PNG) \t\n  SET(LEPT_USE_PNG TRUE)\nELSE()\n  SET(LEP_USE_PNG FALSE)\nENDIF()\nMESSAGE(STATUS \"leptonica HAVE_LIBPNG: ${LEPT_USE_PNG}\")\nif(LEPT_USE_PNG)\n  add_definitions(-DHAVE_LIBPNG)\n  #add_definitions(${PNG_DEFINITIONS})\n  include_directories(${OPENCV_SUBFOLDER}/3rdparty/libpng)\nendif()\n\nIF(WITH_TIFF AND BUILD_TIFF)\n  SET(LEPT_USE_TIFF TRUE)\nELSE()\n  SET(LEPT_USE_TIFF FALSE)\nENDIF()\nMESSAGE(STATUS \"leptonica HAVE_LIBTIFF: ${LEPT_USE_TIFF}\")\nif(LEPT_USE_TIFF)\n  add_definitions(-DHAVE_LIBTIFF)\n  #add_definitions(${PNG_DEFINITIONS})\n  include_directories(${OPENCV_SUBFOLDER}/3rdparty/libtiff)\n  include_directories(${CMAKE_BINARY_DIR}/opencv/3rdparty/libtiff)\nendif()\n\ninclude_directories(${OPENCV_SUBFOLDER}/3rdparty/zlib)\n\nadd_library(${the_target} STATIC ${lepton_srcs} ${lepton_hdrs})\n\nIF(DEFINED EMGUCV_PLATFORM_TOOLSET)\n  set_target_properties(${the_target} PROPERTIES PLATFORM_TOOLSET ${EMGUCV_PLATFORM_TOOLSET})\nENDIF()\n\nset_target_properties(${PROJECT_NAME} PROPERTIES FOLDER \"tesseract\")\n```\n\n----------------------------------------\n\nTITLE: Adding Shared Library Target with CMake - CMake - CMake\nDESCRIPTION: Defines a shared library named 'IcdLog' in the CMake build environment using the source file 'icd_test_log.c'. This command requires CMake to be installed and is used in the CMakeLists.txt configuration to automate the building of a shared library. The key parameter is the target name ('IcdLog') and the list of source files ('icd_test_log.c'); the snippet outputs a platform-appropriate shared library (.so, .dll, etc). No additional dependencies are specified, but the snippet assumes the source file is present and buildable.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/3rdParty/opencl-icd-1.2.11.0/icd/test/platform/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library (IcdLog SHARED icd_test_log.c)\n```\n\n----------------------------------------\n\nTITLE: Installing Mac Runtime Project Files using CMake\nDESCRIPTION: This CMake snippet installs the Mac-specific runtime project files (`Emgu.CV.Runtime.Mac.shproj` and `Emgu.CV.Runtime.Mac.projitems`) from the `Mac` subdirectory. Files are copied to the `Emgu.CV.Runtime` destination directory as part of the `emgucv_source` component. It excludes `.svn`, `obj`, and `CMakeFiles` directories/patterns during installation.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Runtime/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n  INSTALL(\n    DIRECTORY\n    ${CMAKE_CURRENT_SOURCE_DIR}/Mac\n    DESTINATION Emgu.CV.Runtime\n    COMPONENT emgucv_source\n    FILES_MATCHING \n    PATTERN \"Emgu.CV.Runtime.Mac.shproj\"\n    PATTERN \"Emgu.CV.Runtime.Mac.projitems\"\n    PATTERN \".svn\" EXCLUDE\n    PATTERN \"obj\" EXCLUDE\n    PATTERN \"CMakeFiles\" EXCLUDE\n    )\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenCL Driver Stub Sources with CMake - CMake\nDESCRIPTION: This snippet defines a CMake list variable containing the source files needed to build the OpenCL driver stub, conditionally adds the driver_stub.def file if the build platform is not Linux, and specifies how to build the shared library and link it against a required library (IcdLog). It requires CMake (version depending on project requirements) and assumes the presence of the referenced source files. The main parameters are the list of source files, the platform check logic, and the linked libraries; the outcome is a platform-aware shared library with proper dependencies.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/3rdParty/opencl-icd-1.2.11.0/icd/test/driver_stub/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset (OPENCL_DRIVER_STUB_SOURCES cl.c cl_ext.c cl_gl.c icd.c)\n\nif (NOT \"${CMAKE_SYSTEM_NAME}\" STREQUAL \"Linux\")\n    list (APPEND OPENCL_DRIVER_STUB_SOURCES driver_stub.def)\nendif ()\n\nadd_library (OpenCLDriverStub SHARED ${OPENCL_DRIVER_STUB_SOURCES})\n\ntarget_link_libraries (OpenCLDriverStub IcdLog)\n```\n\n----------------------------------------\n\nTITLE: Running Build Script for Emgu CV Docker Image (Batch)\nDESCRIPTION: Executes the `Build_Docker.bat` script to build the Windows x86-64 Docker image containing Emgu CV and its dependencies. Requires Docker for Windows installed and configured with sufficient image size limits (potentially > 60GB) as the base image is large (around 45GB).\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Example/Docker/Windows/README.md#_snippet_0\n\nLANGUAGE: Batch\nCODE:\n```\nBuild_Docker.bat\n```\n\n----------------------------------------\n\nTITLE: Setting Default Shared Library Output Name in CMake\nDESCRIPTION: Sets the OUTPUT_NAME property for the shared library target (GEOTIFF_LIBRARY_TARGET) to the value of the GEOTIFF_LIB_NAME variable. This ensures the shared library file has the intended base name, regardless of platform-specific naming conventions handled elsewhere.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/libgeotiff/libgeotiff-1.4.0/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nSET_TARGET_PROPERTIES(${GEOTIFF_LIBRARY_TARGET} PROPERTIES\n   OUTPUT_NAME ${GEOTIFF_LIB_NAME})\n```\n\n----------------------------------------\n\nTITLE: Defining XTIFF Source File Location in CMake\nDESCRIPTION: Sets the CMake variable XTIFF_SOURCES to the path of the xtiff.c source file located within the libxtiff subdirectory. This source file is part of the extended TIFF functionality.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/libgeotiff/libgeotiff-1.4.0/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nSET(XTIFF_SOURCES libxtiff/xtiff.c)\n```\n\n----------------------------------------\n\nTITLE: Customizing NSIS Installer Commands for Menu Links - Emgu CV - CMake\nDESCRIPTION: Extends CPack NSIS packaging commands to add and remove Start Menu entries for documentation, web links, Visual Studio solutions, and license files in the generated installer. Uses SET to append extra NSIS commands during both installation and uninstallation phases, conditionally adding shortcut creation/removal for Emgu CV documentation and Tesseract OCR if enabled. Depends on CPACK and CPack/NSIS variables (e.g., $SMPROGRAMS, $STARTMENU_FOLDER, $INSTDIR), and other CMake build variables. No external code dependencies but relies on proper values for the various CPack/CMake variables controlling file paths and features.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_94\n\nLANGUAGE: CMake\nCODE:\n```\n  set(CPACK_COMPONENTS_ALL \n    libs #opencv components \n    emgucv_binary \n    emgucv_source\n    emgucv_example_source\n    )\n  \n  set(CPACK_PACKAGE_EXECUTABLES \"\" \"\") #http://public.kitware.com/Bug/view.php?id=7828\n  \n  SET(CPACK_NSIS_CONTACT \"support@emgu.com\")\n  \n  # Define MUI_TEMP that will be used for uninstalling menulinks\n  SET(CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS \"${CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS}\\n !insertmacro MUI_STARTMENU_GETFOLDER Application $MUI_TEMP\")\n  \n  # ----------------------------------------------------------------------------\n  #  Add menu link for documentations\n  # ----------------------------------------------------------------------------\n  SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS \"${CPACK_NSIS_EXTRA_INSTALL_COMMANDS}\\nCreateDirectory \\\\\\\"$SMPROGRAMS\\\\\\\\$STARTMENU_FOLDER\\\\\\\\Documentation\\\\\\\" \")\n  \n  #SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS \"${CPACK_NSIS_EXTRA_INSTALL_COMMANDS}\\nCreateShortCut \\\\\\\"$SMPROGRAMS\\\\\\\\$STARTMENU_FOLDER\\\\\\\\Documentation\\\\\\\\Open CV Documentation.lnk\\\\\\\"  \\\\\\\"$INSTDIR\\\\\\\\doc\\\\\\\\opencv2refman.pdf\\\\\\\" \")\t\n  #SET(CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS \"${CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS}\\n Delete \\\\\\\"$SMPROGRAMS\\\\\\\\$MUI_TEMP\\\\\\\\Documentation\\\\\\\\Open CV Documentation.lnk\\\\\\\" \")\n  \n  IF(EMGU_CV_DOCUMENTATION_BUILD)\n    LIST(APPEND CPACK_COMPONENTS_ALL emgucv_document)\n    set(CPACK_COMPONENT_EMGUCV_DOCUMENT_DISPLAY_NAME \"Emgu CV Documentation\")\n    set(CPACK_COMPONENT_EMGUCV_DOCUMENT_DEPENDS emgucv_binary)\n    SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS \"${CPACK_NSIS_EXTRA_INSTALL_COMMANDS}\\nCreateShortCut \\\\\\\"$SMPROGRAMS\\\\\\\\$STARTMENU_FOLDER\\\\\\\\Documentation\\\\\\\\Emgu CV Documentation.lnk\\\\\\\"  \\\\\\\"$INSTDIR\\\\\\\\Emgu.CV.Documentation.chm\\\\\\\" \")\t\n    SET(CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS \"${CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS}\\n Delete \\\\\\\"$SMPROGRAMS\\\\\\\\$MUI_TEMP\\\\\\\\Documentation\\\\\\\\Emgu CV Documentation.lnk\\\\\\\" \")\n  ENDIF()\n  \n  SET(CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS \"${CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS}\\nRMDir  \\\\\\\"$SMPROGRAMS\\\\\\\\$MUI_TEMP\\\\\\\\Documentation\\\\\\\" \")\n  \n  # ----------------------------------------------------------------------------\n  #  Add menu link for web sites\n  # ----------------------------------------------------------------------------\n  LIST(APPEND CPACK_NSIS_MENU_LINKS \"https://www.emgu.com\" \"Emgu CV wiki\")\n  LIST(APPEND CPACK_NSIS_MENU_LINKS \"${GITHUB_REPO_URL}/discussions\" \"Discussions\")\n  LIST(APPEND CPACK_NSIS_MENU_LINKS \"${GITHUB_REPO_URL}/issues\" \"Issues Tracking\")\n  \n  # ----------------------------------------------------------------------------\n  #  Add menu link for Visual Studio solutions \n  # ----------------------------------------------------------------------------\n  SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS \"${CPACK_NSIS_EXTRA_INSTALL_COMMANDS}\\nCreateDirectory \\\\\\\"$SMPROGRAMS\\\\\\\\$STARTMENU_FOLDER\\\\\\\\Visual Studio Solution\\\\\\\" \")\n  \n  SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS \"${CPACK_NSIS_EXTRA_INSTALL_COMMANDS}\\nCreateShortCut \\\\\\\"$SMPROGRAMS\\\\\\\\$STARTMENU_FOLDER\\\\\\\\Visual Studio Solution\\\\\\\\Visual Studio 2017 - 2022 Examples.lnk\\\\\\\"  \\\\\\\"$INSTDIR\\\\\\\\Solution\\\\\\\\Windows.Desktop\\\\\\\\Emgu.CV.Example.sln\\\\\\\" \")\t\n  \n  SET(CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS \"${CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS}\\n Delete \\\\\\\"$SMPROGRAMS\\\\\\\\$MUI_TEMP\\\\\\\\Visual Studio Solution\\\\\\\\Visual Studio 2017 - 2022 Examples.lnk\\\\\\\" \")\n  \n  SET(CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS \"${CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS}\\nRMDir  \\\\\\\"$SMPROGRAMS\\\\\\\\$MUI_TEMP\\\\\\\\Visual Studio Solution\\\\\\\" \")\n  \n  # ----------------------------------------------------------------------------\n  #  Add menu link for Licenses \n  # ----------------------------------------------------------------------------\n  SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS \"${CPACK_NSIS_EXTRA_INSTALL_COMMANDS}\\nCreateDirectory \\\\\\\"$SMPROGRAMS\\\\\\\\$STARTMENU_FOLDER\\\\\\\\License\\\\\\\" \")\n  \n  SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS \"${CPACK_NSIS_EXTRA_INSTALL_COMMANDS}\\nCreateShortCut \\\\\\\"$SMPROGRAMS\\\\\\\\$STARTMENU_FOLDER\\\\\\\\License\\\\\\\\Emgu CV License.lnk\\\\\\\"  \\\\\\\"$INSTDIR\\\\\\\\${LICENSE_FILE_NAME}\\\\\\\" \")\t\n  SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS \"${CPACK_NSIS_EXTRA_INSTALL_COMMANDS}\\nCreateShortCut \\\\\\\"$SMPROGRAMS\\\\\\\\$STARTMENU_FOLDER\\\\\\\\License\\\\\\\\Open CV License.lnk\\\\\\\"  \\\\\\\"$INSTDIR\\\\\\\\lib\\\\\\\\opencv.license.txt\\\\\\\" \")\n  IF(EMGU_CV_WITH_TESSERACT)\n    SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS \"${CPACK_NSIS_EXTRA_INSTALL_COMMANDS}\\nCreateShortCut \\\\\\\"$SMPROGRAMS\\\\\\\\$STARTMENU_FOLDER\\\\\\\\License\\\\\\\\Tesseract OCR License.lnk\\\\\\\"  \\\\\\\"$INSTDIR\\\\\\\\lib\\\\\\\\tesseract-ocr.license.txt\\\\\\\" \")\t\n  ENDIF()\n  #SET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS \"${CPACK_NSIS_EXTRA_INSTALL_COMMANDS}\\nCreateShortCut \\\\\\\"$SMPROGRAMS\\\\\\\\$STARTMENU_FOLDER\\\\\\\\License\\\\\\\\CvBlob License.lnk\\\\\\\"  \\\\\\\"$INSTDIR\\\\\\\\lib\\\\\\\\3rdParty\\\\\\\\cvblob.license.txt\\\\\\\" \")\t\n  \n  SET(CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS \"${CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS}\\n Delete \\\\\\\"$SMPROGRAMS\\\\\\\\$MUI_TEMP\\\\\\\\License\\\\\\\\Emgu CV License.lnk\\\\\\\" \")\n  SET(CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS \"${CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS}\\n Delete \\\\\\\"$SMPROGRAMS\\\\\\\\$MUI_TEMP\\\\\\\\License\\\\\\\\Open CV License.lnk\\\\\\\" \")\n  IF(EMGU_CV_WITH_TESSERACT)\n    SET(CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS \"${CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS}\\n Delete \\\\\\\"$SMPROGRAMS\\\\\\\\$MUI_TEMP\\\\\\\\License\\\\\\\\Tesseract OCR License.lnk\\\\\\\" \")\n  ENDIF()\n\n```\n\n----------------------------------------\n\nTITLE: Creating RLOFOpticalFlowParameter Class Properties in Optflow for OpenCV Emgu.CV Bindings - CMake\nDESCRIPTION: Maps advanced RLOF optical flow parameter properties to Emgu.CV RLOFOpticalFlowParameter C# code via the CREATE_OCV_CLASS_PROPERTY macro. Supports configuration of iterative solver and descriptor parameters, pyramid levels, windowing, color segmentation, and several computation flags. Dependencies: 'optflow_c.h'; requires optflow module.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_42\n\nLANGUAGE: CMake\nCODE:\n```\nCREATE_OCV_CLASS_PROPERTY( \n  \"optflow/rlof_opticalflow_parameter_property\" \n  \"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV/Optflow/RLOFOpticalFlowParameter.g.cs\"\n  \"cv::optflow::RLOFOpticalFlowParameter\" \n  \"RLOFOpticalFlowParameter\" \n  \"NormSigma0;NormSigma1;SolverType;SupportRegionType;SmallWinSize;LargeWinSize;CrossSegmentationThreshold;MaxLevel;UseInitialFlow;UseIlluminationModel;UseGlobalMotionPrior;MaxIteration;MinEigenValue;GlobalMotionRansacThreshold\" \n  \"float;float;cv::optflow::SolverType;cv::optflow::SupportRegionType;int;int;int;int;bool;bool;bool;int;float;float\" \n  \"prop;prop;prop;prop;prop;prop;prop;prop;prop;prop;prop;prop;prop;prop\"\n  \"NormSigma0;NormSigma1;Solver;SupportRegion;SmallWinSize;LargeWinSize;CrossSegmentationThreshold;MaxLevel;UseInitialFlow;UseIlluminationModel;UseGlobalMotionPrior;MaxIteration;MinEigenValue;GlobalMotionRansacThreshold\" \n  \"float;float;Emgu.CV.RLOFOpticalFlowParameter.SolverType;Emgu.CV.RLOFOpticalFlowParameter.SupportRegionType;int;int;int;int;bool;bool;bool;int;float;float\"\n  \"parameter of the shrinked Hampel norm;\n\\tparameter of the shrinked Hampel norm;\n\\tVariable specifies the iterative refinement strategy;\n\\tVariable specifies the support region shape extraction or shrinking strategy;\n\\tMinimal window size of the support region. This parameter is only used if supportRegionType is Cross;\n\\tMaximal window size of the support region. If supportRegionType is Fixed this gives the exact support region size. The speed of the RLOF is related to the applied win sizes. The smaller the window size the lower is the runtime, but the more sensitive to noise is the method.;\n\\tColor similarity threshold used by cross-based segmentation. Only used  if supportRegionType is Cross. With the cross-bassed segmentation motion boundaries can be computed more accurately;\n\\tMaximal number of pyramid level used. The large this value is the more likely it is to obtain accurate solutions for long-range motions. The runtime is linear related to this parameter;\n\\tUse next point list as initial values. A good initialization can improve the algorithm accuracy and reduce the runtime by a faster convergence of the iteration refinement;\n\\tUse the Gennert and Negahdaripour illumination model instead of the intensity brightness constraint.;\n\\tUse global motion prior initialisation. It allows to be more accurate for long-range motion. The computational complexity is slightly increased by enabling the global motion prior initialisation.;\n\\tNumber of maximal iterations used for the iterative refinement. Lower values can reduce the runtime but also the accuracy.;\n\\tThreshold for the minimal eigenvalue of the gradient matrix defines when to abort the iterative refinement.;\n\\tTo apply the global motion prior motion vectors will be computed on a regularly sampled which are the basis for Homography estimation using RANSAC. The reprojection threshold is based on n-th percentil (given by this value [0 ... 100]) of the motion vectors magnitude. \"\n  \"Emgu.CV\"\n  \"CvInvoke\"\n  \"RLOFOpticalFlowParameter\"\n  \"\"\n  \"#include \\\"optflow_c.h\\\"\"\n  \"\"\n  \"\"\n  ${HAVE_opencv_optflow})  \n```\n\n----------------------------------------\n\nTITLE: Defining Emgu NuGet URL in CMake\nDESCRIPTION: This CMake code sets the variable `NUGET_EMGU_URL` to the Emgu Corporation website URL (https://www.emgu.com). This URL is likely used within generated NuGet specification files.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_57\n\nLANGUAGE: cmake\nCODE:\n```\nSET(NUGET_EMGU_URL \"https://www.emgu.com\")\n```\n\n----------------------------------------\n\nTITLE: Finalizing macOS NuGet Dependencies Structure with CMake\nDESCRIPTION: Wraps the macOS platform dependencies stored in the `EMGUCV_MACOS_NUGET_DEPENDENCY` variable (which may have been populated elsewhere or could be empty) within XML `<dependencies>` tags. This creates the complete dependency section for a macOS-specific EmguCV NuGet package specification file (`.nuspec`).\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_82\n\nLANGUAGE: cmake\nCODE:\n```\nSET(EMGUCV_MACOS_NUGET_DEPENDENCY \"\t<dependencies>\n\t\t${EMGUCV_MACOS_NUGET_DEPENDENCY}\n    </dependencies>\")\n```\n\n----------------------------------------\n\nTITLE: Building ICD Loader and Test using Batch Script (Batch)\nDESCRIPTION: Executes a batch script (`build_using_cmake.bat`) designed to build the OpenCL ICD Loader library (OpenCL.dll), the ICD Loader Test binary (icd_loader_test.exe), and helper libraries on a Windows system. This script likely utilizes CMake internally.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/3rdParty/opencl-icd-1.2.11.0/icd/README.txt#_snippet_1\n\nLANGUAGE: batch\nCODE:\n```\nbuild_using_cmake.bat\n```\n\n----------------------------------------\n\nTITLE: Installing MAUI Source and Binary Files with CMake - CMake\nDESCRIPTION: This snippet uses CMake INSTALL commands to copy Maui-related C# source files, project files, and runtime binaries to their respective installation directories for Emgu.CV's MAUI macOS runtime. It applies pattern-matching to selectively include '*.cs', '*.csproj', configuration files, and documentation, while excluding common build directories such as '.svn', 'obj', 'bin', and 'CMakeFiles'. Requires CMake and correctly set environment variables ('HAVE_MAUI_MAC', 'EMGU_CV_SOURCE_DIR', 'CPACK_PACKAGE_CLI_FOLDER'). Inputs include directory paths and output consists of deployed files in organized target folders, with limitations on which files and directories are included or excluded.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Runtime/Maui/Mac/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# --------------------------------------------------------\\n#  Copyright (C) 2004-2025 by EMGU Corporation. All rights reserved.\\n# --------------------------------------------------------\\n\\nIF(HAVE_MAUI_MAC)\\n\\n  INSTALL(\\n    DIRECTORY\\n    ${CMAKE_CURRENT_SOURCE_DIR}\\n    DESTINATION Emgu.CV.Runtime/Maui\\n    COMPONENT emgucv_source\\n    FILES_MATCHING \\n    PATTERN \"*.cs\"\\n    PATTERN \"*.csproj\"\\n\\tPATTERN \"Directory.Build.props\"\\n\\tPATTERN \"README.md\"\\n    PATTERN \".svn\" EXCLUDE\\n    PATTERN \"obj\" EXCLUDE\\n    PATTERN \"bin\" EXCLUDE\\n    PATTERN \"CMakeFiles\" EXCLUDE\\n    )\\n\\t\\n  INSTALL(\\n      DIRECTORY \\n      ${EMGU_CV_SOURCE_DIR}/libs/Build/Emgu.CV.runtime.maui.macos\\n      DESTINATION ${CPACK_PACKAGE_CLI_FOLDER}/Build\\n      COMPONENT emgucv_binary\\t\\n\\t  FILES_MATCHING \\n        PATTERN \"*.dll\"\\n        PATTERN \"*.pdb\"\\n        PATTERN \"*.xml\")\\t\\t\\n\\n  IF(APPLE)\\t\\n    PROJECT(Emgu.CV.runtime.maui.macos)\\n\\tSET(EXTRA_BUILD_FLAGS \"/p:Platform=\\\"AnyCPU\\\"\")\\n    BUILD_DOTNET_PROJ(${PROJECT_NAME} \"${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.runtime.maui.macos.csproj\" \"${EXTRA_BUILD_FLAGS}\" ALL)\\n        \\n    if(ENABLE_SOLUTION_FOLDERS)\\n      set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER \"emgu\")\\n    endif()\\n\\n    ADD_DEPENDENCIES(${PROJECT_NAME} cvextern Emgu.CV)\\n    ENDIF()\\nENDIF()\\n\n```\n\n----------------------------------------\n\nTITLE: Installing UWP Runtime Project Files using CMake\nDESCRIPTION: This CMake snippet installs the UWP-specific runtime project files (`Emgu.CV.Runtime.UWP.shproj` and `Emgu.CV.Runtime.UWP.projitems`) from the `UWP` subdirectory. Files are copied to the `Emgu.CV.Runtime` destination directory as part of the `emgucv_source` component. It excludes `.svn`, `obj`, and `CMakeFiles` directories/patterns during installation.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Runtime/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n\t\n  INSTALL(\n    DIRECTORY\n    ${CMAKE_CURRENT_SOURCE_DIR}/UWP\n    DESTINATION Emgu.CV.Runtime\n    COMPONENT emgucv_source\n    FILES_MATCHING \n\tPATTERN \"Emgu.CV.Runtime.UWP.shproj\"\n\tPATTERN \"Emgu.CV.Runtime.UWP.projitems\"\n    PATTERN \".svn\" EXCLUDE\n    PATTERN \"obj\" EXCLUDE\n    PATTERN \"CMakeFiles\" EXCLUDE\n    )\n```\n\n----------------------------------------\n\nTITLE: Handling Missing MSBuild for Documentation in CMake\nDESCRIPTION: This is the `ELSE` block corresponding to the initial check for MSBuild. If `MSBUILD_EXECUTABLE` is not found or `EMGU_CV_DOCUMENTATION_BUILD` is false, this block is executed, printing a status message indicating that MSBuild was not found and the documentation project cannot be configured.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/miscellaneous/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nELSE()\nMESSAGE(STATUS \"MSBUILD_EXECUTABLE: NOT FOUND for Documentation project\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Conditionally Installing Emgu CV Source Files using CMake INSTALL command\nDESCRIPTION: This CMake script snippet installs the contents of the current source directory (`${CMAKE_CURRENT_SOURCE_DIR}`) to the installation destination (`.`) under the component `emgucv_source`. The installation only occurs if either `EMGU_CV_BUILD` or `EMGU_CV_EXAMPLE_BUILD` is set to true. It specifically includes C# source files (`.cs`), shared project files (`.shproj`, `.projitems`), and resource files (`.resx`), while excluding common build artifacts (`obj`, `CMakeFiles`, `${PROJECT_NAME}.dir`) and SVN metadata (`.svn`).\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Cuda/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nIF(EMGU_CV_BUILD OR EMGU_CV_EXAMPLE_BUILD)\n\nINSTALL(\n  DIRECTORY\n  ${CMAKE_CURRENT_SOURCE_DIR}\n  DESTINATION .\n    COMPONENT emgucv_source\n  FILES_MATCHING \n  PATTERN \"*.cs\"\n  PATTERN \"*.shproj\"\n  PATTERN \"*.projitems\"\n  PATTERN \"*.resx\"\n  PATTERN \".svn\" EXCLUDE\n  PATTERN \"obj\" EXCLUDE\n  PATTERN \"CMakeFiles\" EXCLUDE\n  PATTERN \"${PROJECT_NAME}.dir\" EXCLUDE\n\n)\n\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Installing Ubuntu Runtime Project Files using CMake\nDESCRIPTION: This CMake snippet installs the Ubuntu-specific runtime project files (`Emgu.CV.Runtime.Ubuntu.shproj` and `Emgu.CV.Runtime.Ubuntu.projitems`) from the `Ubuntu` subdirectory. Files are copied to the `Emgu.CV.Runtime` destination directory as part of the `emgucv_source` component. It excludes `.svn`, `obj`, and `CMakeFiles` directories/patterns during installation.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Runtime/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n\t\n  INSTALL(\n    DIRECTORY\n    ${CMAKE_CURRENT_SOURCE_DIR}/Ubuntu\n    DESTINATION Emgu.CV.Runtime\n    COMPONENT emgucv_source\n    FILES_MATCHING \n\tPATTERN \"Emgu.CV.Runtime.Ubuntu.shproj\"\n\tPATTERN \"Emgu.CV.Runtime.Ubuntu.projitems\"\n    PATTERN \".svn\" EXCLUDE\n    PATTERN \"obj\" EXCLUDE\n    PATTERN \"CMakeFiles\" EXCLUDE\n    )\n```\n\n----------------------------------------\n\nTITLE: Configuring .NET HelloWorld Project Build with CMake - CMake\nDESCRIPTION: This CMake code configures a .NET console application (HelloWorld) as part of the EMGU.CV example projects. It conditionally checks if the .NET environment (DOTNET_FOUND) is available, sets up the project using its corresponding .csproj file, specifies that the build target should be included in the solution's 'Emgu.CV.Examples' folder, and establishes a build dependency on the core Emgu.CV library if it's present. The CMake build must be run in an environment where the required .NET and CMake modules are pre-set, and the script assumes the Emgu.CV build target is already defined elsewhere. The input is the presence of DOTNET_FOUND; the output is a configured and organized HelloWorld example build within the overarching solution.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Example/HelloWorld/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# --------------------------------------------------------\\n#  Copyright (C) 2004-2025 by EMGU Corporation. All rights reserved.\\n# --------------------------------------------------------\\n\\nIF (DOTNET_FOUND)\\n  PROJECT(Example.HelloWorld)\\n  BUILD_DOTNET_PROJ(${PROJECT_NAME} \"${CMAKE_CURRENT_SOURCE_DIR}/HelloWorld.Console.csproj\"  \"\" ALL)\\n  set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER \"Emgu.CV.Examples\")\\n  \\n  IF (TARGET Emgu.CV)\\n    ADD_DEPENDENCIES(${PROJECT_NAME} Emgu.CV)\\n  ENDIF()\\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Restoring MAUI Workload using dotnet CLI\nDESCRIPTION: Executes the dotnet CLI command to ensure the necessary MAUI workload is installed or restored for the project. This is often a prerequisite before restoring packages or building.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Example/MAUI/MauiDemoApp/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet workload restore\n```\n\n----------------------------------------\n\nTITLE: Building and Signing Emgu.CV Runtime NuGet Package for RHEL - CMake\nDESCRIPTION: This CMake script defines the configuration for building the Emgu.CV runtime NuGet package specifically for RHEL x64 environments. It checks for the HAVE_RHEL_X64 flag, sets up project metadata, determines output directories, calls BUILD_NUGET_PACKAGE with the necessary files and paths, attaches build dependencies, conditionally applies NuGet package signing if available, and organizes the resulting package under a solution folder if enabled. Key parameters include project and source directories, csproj and nuspec files, and the package version; dependencies include the Emgu.CV target, EMGU_NUGET_SIGN_FOUND, and related CMake variables. The script expects a CMake environment with relevant variables defined and may be constrained by platform-specific logic.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/platforms/nuget/Emgu.CV.runtime.rhel/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# --------------------------------------------------------\\n#  Copyright (C) 2004-2025 by EMGU Corporation. All rights reserved.\\n# --------------------------------------------------------\\n\\nIF(HAVE_RHEL_X64)\\n  PROJECT(Emgu.CV.runtime.rhel.nuget)\\n\\n  get_filename_component(NUGET_OUTPUT_DIR ${CMAKE_CURRENT_SOURCE_DIR} DIRECTORY)\\n\\n  BUILD_NUGET_PACKAGE(\\n    ${PROJECT_NAME} \\n\\t\"${EMGU_CV_SOURCE_DIR}/Emgu.CV/NetStandard/Emgu.CV.csproj\"  #csproj_file \\n\\t\"${CMAKE_CURRENT_SOURCE_DIR}/Package.nuspec\" #nuspec_file \\n\\t\"${NUGET_OUTPUT_DIR}\" #output_dir \\n\\t\"${CMAKE_CURRENT_SOURCE_DIR}\" #working_dir\\n\\t) \\n  \\n  ADD_DEPENDENCIES(${PROJECT_NAME} Emgu.CV)\\n  \\n  IF (EMGU_NUGET_SIGN_FOUND)\\n    EMGU_SIGN_NUGET(${PROJECT_NAME} \"${NUGET_OUTPUT_DIR}/${EMGUCV_UBUNTU_NUGET_ID}.${CPACK_PACKAGE_VERSION}.nupkg\")\\n  ENDIF()\\n\\n  if(ENABLE_SOLUTION_FOLDERS)\\n    set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER \"nuget\")\\n  endif() \\nENDIF()\\n\n```\n\n----------------------------------------\n\nTITLE: Setting Unix-Specific Shared Library Properties in CMake\nDESCRIPTION: Conditionally sets properties for the shared library target (GEOTIFF_LIBRARY_TARGET) on Unix-like systems. It sets the library OUTPUT_NAME, VERSION (full version), and SOVERSION (major version used for soname linking). It also enables CLEAN_DIRECT_OUTPUT. For Apple platforms (macOS), it sets the INSTALL_NAME_DIR property to ensure correct dynamic library loading after installation.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/libgeotiff/libgeotiff-1.4.0/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\n# Unix, linux:\nIF(UNIX)\n   IF(NOT LINK_SOVERSION)\n      set(LINK_SOVERSION \"${GeoTIFF_VERSION_MAJOR}\")\n   ENDIF(NOT LINK_SOVERSION)\n   IF(NOT LINK_VERSION)\t\n      set(LINK_VERSION \"${GeoTIFF_VERSION}\")\n   ENDIF(NOT LINK_VERSION)\n   SET_TARGET_PROPERTIES(\n      ${GEOTIFF_LIBRARY_TARGET} \n      PROPERTIES\n      OUTPUT_NAME ${GEOTIFF_LIB_NAME}\n      VERSION ${LINK_VERSION}\n      SOVERSION ${LINK_SOVERSION} \n      CLEAN_DIRECT_OUTPUT 1 )\n   if (APPLE)\n      set_target_properties(\n        ${GEOTIFF_LIBRARY_TARGET}\n        PROPERTIES\n        INSTALL_NAME_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n   endif()\n\nELSE(UNIX)\n# Default:\n   SET_TARGET_PROPERTIES(${GEOTIFF_LIBRARY_TARGET} PROPERTIES\n   OUTPUT_NAME ${GEOTIFF_LIB_NAME})\nENDIF(UNIX)\n```\n\n----------------------------------------\n\nTITLE: Including Windows CUDA Runtimes in CMake Build\nDESCRIPTION: Adds multiple subdirectories containing the CMake build configurations for various Windows CUDA runtime components (core runtime, FFT, NPP, BLAS, cuDNN variations) to the EmguCV project build.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/platforms/nuget/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nADD_SUBDIRECTORY(\"Emgu.runtime.windows.cuda.rt\")\nADD_SUBDIRECTORY(\"Emgu.runtime.windows.cuda.fft\")\nADD_SUBDIRECTORY(\"Emgu.runtime.windows.cuda.npp\")\nADD_SUBDIRECTORY(\"Emgu.runtime.windows.cuda.blas\")\nADD_SUBDIRECTORY(\"Emgu.runtime.windows.cuda.blas.lt\")\nADD_SUBDIRECTORY(\"Emgu.runtime.windows.cuda.dnn\")\nADD_SUBDIRECTORY(\"Emgu.runtime.windows.cuda.dnn.cnn\")\nADD_SUBDIRECTORY(\"Emgu.runtime.windows.cuda.dnn.engines\")\nADD_SUBDIRECTORY(\"Emgu.runtime.windows.cuda.dnn.ops\")\nADD_SUBDIRECTORY(\"Emgu.runtime.windows.cuda.dnn.adv\")\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building NuGet Package for Emgu CV CUDA FFT - CMake\nDESCRIPTION: This CMake script conditionally builds the Emgu.runtime.windows.cuda.fft.nuget project if targeting 32/64-bit Windows desktops with CUDA support. It sets up output directories, invokes BUILD_NUGET_PACKAGE with relevant project files, and optionally calls EMGU_SIGN_NUGET for signing the package. Dependencies are set with ADD_DEPENDENCIES, and solution folder organization is handled if enabled. Prerequisites include CMake, EMGU environment variables, and NVIDIA CUDA for FFT support. Inputs include project and configuration files, and outputs are NuGet packages in the specified output directory.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/platforms/nuget/Emgu.runtime.windows.cuda.fft/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# --------------------------------------------------------\\n#  Copyright (C) 2004-2025 by EMGU Corporation. All rights reserved.\\n# --------------------------------------------------------\\n\\nIF (WIN32 AND (HAVE_WINDESKTOP_X86 OR HAVE_WINDESKTOP_X64) AND WITH_CUDA)\\n\\nPROJECT(Emgu.runtime.windows.cuda.fft.nuget)\\n\\n  get_filename_component(NUGET_OUTPUT_DIR ${CMAKE_CURRENT_SOURCE_DIR} DIRECTORY)\\n\\n  BUILD_NUGET_PACKAGE(\\n    ${PROJECT_NAME} \\n\\t\"${EMGU_CV_SOURCE_DIR}/Emgu.CV/NetStandard/Emgu.CV.csproj\"  #csproj_file \\n\\t\"${CMAKE_CURRENT_SOURCE_DIR}/Package.nuspec\" #nuspec_file \\n\\t\"${NUGET_OUTPUT_DIR}\" #output_dir \\n\\t\"${CMAKE_CURRENT_SOURCE_DIR}\" #working_dir\\n\\t) \\n\\n  IF (EMGU_NUGET_SIGN_FOUND)\\n    EMGU_SIGN_NUGET(${PROJECT_NAME} \"${NUGET_OUTPUT_DIR}/${EMGU_CUFFT_NUGET_ID}.${EMGU_CUFFT_VERSION}.nupkg\")\\n  ENDIF()\\n\\n  ADD_DEPENDENCIES(${PROJECT_NAME} Emgu.runtime.windows.cuda.rt.nuget)\\n\\nif(ENABLE_SOLUTION_FOLDERS)\\n  set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER \"nuget\")\\nendif() \\n\\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Identifying Unsuitable Base ASP.NET Docker Image (Shell/Dockerfile)\nDESCRIPTION: Mentions `mcr.microsoft.com/dotnet/aspnet:5.0` as an unsuitable base image for building the Emgu CV Docker container. This image is noted to be missing the Windows Media Foundation dependency, which is required by OpenCV.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Example/Docker/Windows/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nmcr.microsoft.com/dotnet/aspnet:5.0\n```\n\n----------------------------------------\n\nTITLE: Enabling Tesseract Build Flags and Sources in CMake\nDESCRIPTION: This snippet adds the HAVE_EMGUCV_TESSERACT preprocessor definition and includes the Tesseract directories if Tesseract support is enabled (EMGU_CV_WITH_TESSERACT). It also appends the Tesseract C interface header (tesseract_c.h) and implementation file (tesseract.cpp) to the list of external headers (extern_hdrs) and sources (extern_srcs) for the project.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_86\n\nLANGUAGE: cmake\nCODE:\n```\nIF(EMGU_CV_WITH_TESSERACT)\n  ADD_DEFINITIONS(-DHAVE_EMGUCV_TESSERACT)\n  INCLUDE_DIRECTORIES(${TESSERACT_INCLUDE_DIRS})\nENDIF()\n\nLIST(APPEND extern_hdrs \"${PROJECT_SOURCE_DIR}/tesseract/tesseract_c.h\")\nLIST(APPEND extern_srcs \"${PROJECT_SOURCE_DIR}/tesseract/tesseract.cpp\")\n```\n\n----------------------------------------\n\nTITLE: Defining Include Directories and DepthAI Support for OpenCV Build - CMake\nDESCRIPTION: This snippet sets up the project and essential include directories for OpenCV headers and third-party dependencies in a CMake build environment. It also conditionally includes support for DepthAI hardware by adding DepthAI-specific include directories and definitions if EMGU_CV_WITH_DEPTHAI is enabled. Key parameters are directory paths influenced by build variables, and the expected outcome is proper compilation environment setup for subsequent build steps.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(cvextern)\nset(the_target ${PROJECT_NAME})\n\nINCLUDE_DIRECTORIES(\"${OPENCV_SUBFOLDER}/include/opencv\")\nINCLUDE_DIRECTORIES(\"${OPENCV_SUBFOLDER}/modules/core/src/parallel\")\nINCLUDE_DIRECTORIES(\"${OPENCV_SUBFOLDER}/include\")\nINCLUDE_DIRECTORIES(\"${CMAKE_BINARY_DIR}/opencv/3rdparty/zlib\")\n\nIF(EMGU_CV_WITH_DEPTHAI)\n  INCLUDE_DIRECTORIES(\"${CMAKE_CURRENT_SOURCE_DIR}/depthai-core/include/depthai\")\n  add_definitions(-DHAVE_DEPTHAI)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Building and Signing Emgu.CV NuGet Package with CMake - CMake\nDESCRIPTION: This CMake script snippet conditionally creates a NuGet package for Emgu.CV on Linux ARM64 architectures. It specifies project details, input files (such as *.csproj and *.nuspec), output directories, and working path for the package build process. The script supports optional digital signing if signing tools are present, ensures necessary package and project dependencies (like 'cvextern' and 'Emgu.CV') are enforced, and optionally configures solution folder placement for convenience. Required dependencies include CMake, .NET build tools, and (for signing) the EMGU NuGet sign utility. Inputs include project and nuspec file paths; output is a .nupkg file as specified. Correct platform activation and environment setup are necessary for successful execution.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/platforms/nuget/Emgu.CV.runtime.debian-arm64/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# --------------------------------------------------------\\n#  Copyright (C) 2004-2025 by EMGU Corporation. All rights reserved.\\n# --------------------------------------------------------\\n\\nIF(HAVE_LINUX_ARM64)\\n\\n  PROJECT(Emgu.CV.runtime.debian-arm64.nuget)\\n\\n  get_filename_component(NUGET_OUTPUT_DIR ${CMAKE_CURRENT_SOURCE_DIR} DIRECTORY)\\n\\n  BUILD_NUGET_PACKAGE(\\n    ${PROJECT_NAME} \\n\\t\"${EMGU_CV_SOURCE_DIR}/Emgu.CV/NetStandard/Emgu.CV.csproj\"  #csproj_file \\n\\t\"${CMAKE_CURRENT_SOURCE_DIR}/Package.nuspec\" #nuspec_file \\n\\t\"${NUGET_OUTPUT_DIR}\" #output_dir \\n\\t\"${CMAKE_CURRENT_SOURCE_DIR}\" #working_dir\\n\\t) \\n\\n  IF (EMGU_NUGET_SIGN_FOUND)\\n    EMGU_SIGN_NUGET(${PROJECT_NAME} \"${NUGET_OUTPUT_DIR}/${EMGUCV_DEBIAN_ARM64_NUGET_ID}.${CPACK_PACKAGE_VERSION}.nupkg\")\\n  ENDIF()\\n\\n  ADD_DEPENDENCIES(${PROJECT_NAME} cvextern)\\n\\n  IF(TARGET Emgu.CV)\\n    ADD_DEPENDENCIES(${PROJECT_NAME} Emgu.CV)\\n  ENDIF()\\n\\n  if(ENABLE_SOLUTION_FOLDERS)\\n    set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER \"nuget\")\\n  endif() \\n\\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Conditional Linking of TIFF Library\nDESCRIPTION: Checks if TIFF support is enabled (`WITH_TIFF`) and if the TIFF library is being built as part of this project (`BUILD_TIFF`). If both conditions are true, it links the `cvextern_test` target against the `libtiff` library.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/tests/cvextern_test/CMakeLists.txt#_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_TIFF AND BUILD_TIFF)\n  target_link_libraries(${the_target} libtiff)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building ICD Loader and Test using Make (Shell)\nDESCRIPTION: Compiles the OpenCL ICD Loader library (libOpenCL.so), the ICD Loader Test binary (icd_loader_test), and helper libraries on a Linux system using the Make build system. Assumes a Makefile is present in the current directory.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/3rdParty/opencl-icd-1.2.11.0/icd/README.txt#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake\n```\n\n----------------------------------------\n\nTITLE: Building Emgu.CV Debian ARM NuGet Package (CMake)\nDESCRIPTION: This CMake script configures and builds the `Emgu.CV.runtime.debian-arm` NuGet package. It executes only if `HAVE_LINUX_ARM` is defined and true. It utilizes the `BUILD_NUGET_PACKAGE` custom function, taking the Emgu.CV .csproj file and a specific .nuspec file as input. It optionally signs the generated .nupkg file using `EMGU_SIGN_NUGET` if `EMGU_NUGET_SIGN_FOUND` is true. Dependencies are set on the `cvextern` target and potentially the `Emgu.CV` target. If `ENABLE_SOLUTION_FOLDERS` is true, the target is placed in a 'nuget' solution folder.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/platforms/nuget/Emgu.CV.runtime.debian-arm/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# --------------------------------------------------------\n#  Copyright (C) 2004-2025 by EMGU Corporation. All rights reserved.\n# --------------------------------------------------------\n\nIF(HAVE_LINUX_ARM)\n\n  PROJECT(Emgu.CV.runtime.debian-arm.nuget)\n\n  get_filename_component(NUGET_OUTPUT_DIR ${CMAKE_CURRENT_SOURCE_DIR} DIRECTORY)\n\n  BUILD_NUGET_PACKAGE(\n    ${PROJECT_NAME} \n\t\"${EMGU_CV_SOURCE_DIR}/Emgu.CV/NetStandard/Emgu.CV.csproj\"  #csproj_file \n\t\"${CMAKE_CURRENT_SOURCE_DIR}/Package.nuspec\" #nuspec_file \n\t\"${NUGET_OUTPUT_DIR}\" #output_dir \n\t\"${CMAKE_CURRENT_SOURCE_DIR}\" #working_dir\n\t) \n\n  IF (EMGU_NUGET_SIGN_FOUND)\n    EMGU_SIGN_NUGET(${PROJECT_NAME} \"${NUGET_OUTPUT_DIR}/${EMGUCV_DEBIAN_ARM_NUGET_ID}.${CPACK_PACKAGE_VERSION}.nupkg\")\n  ENDIF()\n\n  ADD_DEPENDENCIES(${PROJECT_NAME} cvextern)\n\n  IF(TARGET Emgu.CV)\n    ADD_DEPENDENCIES(${PROJECT_NAME} Emgu.CV)\n  ENDIF()\n\n  if(ENABLE_SOLUTION_FOLDERS)\n    set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER \"nuget\")\n  endif() \n\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows ICD Driver Stub via Registry (Configuration)\nDESCRIPTION: Details the process of registering the OpenCL driver stub DLL as an Installable Client Driver (ICD) on Windows using the Registry Editor. It specifies the registry keys for 32-bit (`HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Khronos\\OpenCL\\Vendors`) and 64-bit (`HKEY_LOCAL_MACHINE\\SOFTWARE\\Khronos\\OpenCL\\Vendors`) applications. A `REG_DWORD` value must be added with the `Name` set to the full path of `OpenCLDriverStub.dll` and `Data` set to `0`. Note that the build script mentioned typically produces a 32-bit test binary.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/3rdParty/opencl-icd-1.2.11.0/icd/README.txt#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nKey for 32-bit apps: HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Khronos\\OpenCL\\Vendors\nKey for 64-bit apps: HKEY_LOCAL_MACHINE\\SOFTWARE\\Khronos\\OpenCL\\Vendors\n\nAdd a REG_DWORD value:\n    Name: c:/full/path/to/OpenCLDriverStub.dll\n    Data: 0\n```\n\n----------------------------------------\n\nTITLE: Adding Tesseract Dependency in CMake\nDESCRIPTION: Manages the build dependency for Tesseract OCR if `EMGU_CV_WITH_TESSERACT` is enabled. It checks if Tesseract was found by `FIND_PACKAGE` (indicated by `TESSERACT_FOUND`). If Tesseract was found externally, no dependency is added here (linking happens elsewhere). If Tesseract was not found externally (implying it's being built as part of this project), it adds dependencies on the Tesseract project targets specified in the `TESSERACT_PROJECTS` variable.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_112\n\nLANGUAGE: cmake\nCODE:\n```\nIF(EMGU_CV_WITH_TESSERACT)\n  IF(TESSERACT_FOUND)\n    #MESSAGE(\"TESSERACT found, no need to add dependency\")\n    #ADD_DEPENDENCIES(${TESSERACT_LIBRARIES})\n  ELSE()  \n    #MESSAGE(\"TESSERACT not found, add dependency to ${TESSERACT_PROJECTS}\")\n    ADD_DEPENDENCIES(${TESSERACT_PROJECTS})\n  ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring Linux ICD Driver Stub (Shell)\nDESCRIPTION: Registers the OpenCL driver stub library as an Installable Client Driver (ICD) on Linux by creating a `.icd` configuration file in the `/etc/OpenCL/vendors/` directory. The file's content is the full path to the stub library (`libOpenCLDriverStub.so`). Requires appropriate permissions to write to the target system directory.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/3rdParty/opencl-icd-1.2.11.0/icd/README.txt#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\necho full/path/to/libOpenCLDriverStub.so > /etc/OpenCL/vendors/test.icd\n```\n\n----------------------------------------\n\nTITLE: Defining GeoTIFF Library Source Files in CMake\nDESCRIPTION: Sets the CMake variable GEOTIFF_LIB_SOURCES to a list of C source files that constitute the core libgeotiff library. This variable will be used when defining the library targets.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/libgeotiff/libgeotiff-1.4.0/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nSET(GEOTIFF_LIB_SOURCES\n    cpl_serv.c\n    cpl_csv.c\n    geo_extra.c\n    geo_free.c\n    geo_get.c\n    geo_names.c\n    geo_new.c\n    geo_normalize.c\n    geo_print.c\n    geo_set.c\n    geo_simpletags.c\n    geo_tiffp.c\n    geo_trans.c\n    geo_write.c\n    geotiff_proj4.c)\n```\n\n----------------------------------------\n\nTITLE: Configuring C# Entry Point File Generation in CMake\nDESCRIPTION: This snippet determines the bitness (`UNMANAGED_CODE_BITNESS`) based on `TARGET_ARCH_64`. It sets a subfolder path (`CVINVOKE_ENTRYPOINTS_FILE_SUBFOLDER`), although currently left empty. For iOS builds, it overrides the `CVEXTERN_OUTPUT_NAME` to `__Internal`. Finally, it uses the `CONFIGURE_FILE` command to generate the `CvInvokeEntryPoints.cs` file from the template `CvInvokeEntryPoints.cs.in`, substituting CMake variables (like `ENTRYPOINT_CS_STRING`, `ENTRYPOINT_MODULES_STRING`, `CVEXTERN_OUTPUT_NAME`, etc.) into the template to create the final C# source file containing P/Invoke library definitions.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_89\n\nLANGUAGE: cmake\nCODE:\n```\nIF(TARGET_ARCH_64)\n  SET(UNMANAGED_CODE_BITNESS \"64\")\nELSE()\n  SET(UNMANAGED_CODE_BITNESS \"32\")\nENDIF()\n\n#IF(ANDROID)\n#  SET(CVINVOKE_ENTRYPOINTS_FILE_SUBFOLDER \"Android/\")\n#ELSE()\nSET(CVINVOKE_ENTRYPOINTS_FILE_SUBFOLDER \"\")\n#ENDIF()\n\nIF(IOS)\n  SET(CVEXTERN_OUTPUT_NAME \"__Internal\")\nENDIF()\nCONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/CvInvokeEntryPoints.cs.in ${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV/PInvoke/${CVINVOKE_ENTRYPOINTS_FILE_SUBFOLDER}CvInvokeEntryPoints.cs)\n```\n\n----------------------------------------\n\nTITLE: Configuring GCC/G++ Compiler Flags in CMake\nDESCRIPTION: This snippet configures compiler flags specifically for GCC (CMAKE_COMPILER_IS_GNUCC) or G++ (CMAKE_COMPILER_IS_GNUCXX). It sets common flags like `-fPIC`, `-Wall`, `-Wno-long-long`, and specifies C99 standard for C files (`-std=c99`) and C++98 standard for C++ files (`-std=c++98`). If the `GEOTIFF_BUILD_PEDANTIC` variable is TRUE, it adds the `-pedantic` flag to enforce stricter standard compliance.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/libgeotiff/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nIF(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX)\n    SET(COMPILE_FLAGS \"-fPIC -Wall -Wno-long-long\")\n    SET(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${COMPILE_FLAGS} -std=c99\")\n    SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${COMPILE_FLAGS} -std=c++98\")\n    IF(GEOTIFF_BUILD_PEDANTIC)\n        SET(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -pedantic\")\n        SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -pedantic\")\n    ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Handling Optional ZLIB Dependency in CMake\nDESCRIPTION: This snippet handles the optional ZLIB dependency. It first attempts to find ZLIB using `FIND_PACKAGE(ZLIB)`. If ZLIB is not found automatically, it sets the `ZLIB_INCLUDE_DIR` to a hardcoded relative path, likely pointing to a ZLIB version bundled within an OpenCV source tree. It then unconditionally sets `HAVE_ZIP=1`, includes the ZLIB include directory, and adds the `HAVE_ZIP=1` preprocessor definition.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/libgeotiff/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\n# Zlib support - optional, default=OFF\nFIND_PACKAGE(ZLIB)\nIF(NOT ZLIB_FOUND)\nSET(ZLIB_INCLUDE_DIR \"${LIBGEOTIFF_DIR}/../../opencv/3rdparty/include\")\nENDIF()\nSET(HAVE_ZIP 1)\nINCLUDE_DIRECTORIES(${ZLIB_INCLUDE_DIR})\nADD_DEFINITIONS(-DHAVE_ZIP=${HAVE_ZIP})\n```\n\n----------------------------------------\n\nTITLE: Generating OpenCV Module Library Names and C# Entry Points in CMake\nDESCRIPTION: This loop iterates through candidate OpenCV module names (`OPENCV_MODULE_NAME_CANDIDATES`). For each module, it checks if a corresponding shared library target (`opencv_${OPENCV_MODULE_NAME}`) exists. If it does, it constructs the full library name using the previously defined prefix/postfix, adds it to `OPENCV_LIBRARY_OUTPUT_NAMES`, and generates platform-specific C# constant strings (`ENTRYPOINT_CS_STRING`). These C# constants define the library name to be used for P/Invoke calls, adapting based on the target environment (iOS, Windows, macOS, Android, Unity Editor/Standalone variants).\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_87\n\nLANGUAGE: cmake\nCODE:\n```\nFOREACH(OPENCV_MODULE_NAME ${OPENCV_MODULE_NAME_CANDIDATES})\n  STRING (TOUPPER \"${OPENCV_MODULE_NAME}\" OPENCV_MODULE_NAME_UPPER)\n  \n  STRING (SUBSTRING \"${OPENCV_MODULE_NAME}\" 0 1 OPENCV_MODULE_NAME_FIRST_LETTER)\n  STRING (TOUPPER \"${OPENCV_MODULE_NAME_FIRST_LETTER}\" OPENCV_MODULE_NAME_FIRST_LETTER_UPPER)\n  STRING (SUBSTRING \"${OPENCV_MODULE_NAME}\" 1 -1 OPENCV_MODULE_NAME_REMAINDER)\n  SET(OPENCV_MODULE_NAME_FIRST_LETTER_UPPER \"${OPENCV_MODULE_NAME_FIRST_LETTER_UPPER}${OPENCV_MODULE_NAME_REMAINDER}\")\n  \n  SET(OPENCV_OUTPUT_PROJ_TYPE \"\")\n  IF(NOT (TARGET opencv_${OPENCV_MODULE_NAME}))\n    SET(OPENCV_${OPENCV_MODULE_NAME_UPPER}_OUTPUT_NAME \"\")\n  ELSE()\n    #MESSAGE( STATUS \"opencv_${OPENCV_MODULE_NAME} type: ${OPENCV_OUTPUT_PROJ_TYPE}\")\n    GET_TARGET_PROPERTY(OPENCV_OUTPUT_PROJ_TYPE opencv_${OPENCV_MODULE_NAME} TYPE)\n    IF(NOT (\"${OPENCV_OUTPUT_PROJ_TYPE}\" STREQUAL \"SHARED_LIBRARY\"))\n      SET(OPENCV_${OPENCV_MODULE_NAME_UPPER}_OUTPUT_NAME \"\")\n    ELSE()\n      GET_TARGET_PROPERTY(OPENCV_OUTPUT_NAME_TMP opencv_${OPENCV_MODULE_NAME} OUTPUT_NAME)\n      SET(OPENCV_${OPENCV_MODULE_NAME_UPPER}_OUTPUT_NAME  ${OPENCV_LIBRARY_OUTPUT_NAME_PREFIX}${OPENCV_OUTPUT_NAME_TMP}${OPENCV_LIBRARY_OUTPUT_NAME_POSTFIX})\n      LIST(APPEND OPENCV_LIBRARY_OUTPUT_NAMES ${OPENCV_${OPENCV_MODULE_NAME_UPPER}_OUTPUT_NAME})\n      SET(ENTRYPOINT_MODULES_STRING \"${ENTRYPOINT_MODULES_STRING}\n      Opencv${OPENCV_MODULE_NAME_FIRST_LETTER_UPPER}Library,\")\n    ENDIF()\n  ENDIF()\n  \n  IF(IOS)\n    SET(ENTRYPOINT_CS_STRING \"${ENTRYPOINT_CS_STRING} \n      /// <summary>\n      /// The file name of the ${OPENCV_MODULE_NAME} library\n      /// </summary>\n      public const string Opencv${OPENCV_MODULE_NAME_FIRST_LETTER_UPPER}Library = \\\"__Internal\\\";\")\n  ELSEIF(((WIN32 AND NOT ANDROID) OR APPLE))\n    IF((\"${OPENCV_OUTPUT_PROJ_TYPE}\" STREQUAL \"SHARED_LIBRARY\"))\n      SET(ANDROID_ENTRYPOINT \"opencv_${OPENCV_MODULE_NAME}\")\n      SET(MACOS_ENTRYPOINT \"opencv_${OPENCV_MODULE_NAME}.${OPENCV_VERSION_MAJOR}.${OPENCV_VERSION_MINOR}.${OPENCV_VERSION_PATCH}\")\n      SET(MACOS_UNITY_STANDALONE_ENTRYPOINT \"@executable_path/../Plugins/emgucv.bundle/Contents/MacOS/lib${MACOS_ENTRYPOINT}.dylib\")\n      SET(MACOS_UNITY_EDITOR_ENTRYPOINT \"Assets/Plugins/emgucv.bundle/Contents/MacOS/lib${MACOS_ENTRYPOINT}.dylib\")\n      SET(WINDOWS_ENTRYPOINT \"opencv_${OPENCV_MODULE_NAME}${OPENCV_VERSION_MAJOR}${OPENCV_VERSION_MINOR}${OPENCV_VERSION_PATCH}\")\n      SET(IOS_ENTRYPOINT \"__Internal\")\n      \n      IF(\"${OPENCV_${OPENCV_MODULE_NAME_UPPER}_OUTPUT_NAME}\" STREQUAL \"\")\n        SET(ANDROID_ENTRYPOINT \"\")\n        SET(MACOS_ENTRYPOINT \"\")\n        SET(MACOS_UNITY_ENTRYPOINT \"emgucv\")\n        SET(WINDOWS_ENTRYPOINT \"\")\n        SET(IOS_ENTRYPOINT \"\")\n      ENDIF()\n      \n      SET(ENTRYPOINT_CS_STRING \"${ENTRYPOINT_CS_STRING} \n      /// <summary>\n      /// The file name of the ${OPENCV_MODULE_NAME} library\n      /// </summary>\n      #if UNITY_EDITOR_WIN || UNITY_STANDALONE_WIN\n      public const string Opencv${OPENCV_MODULE_NAME_FIRST_LETTER_UPPER}Library = \\\"${WINDOWS_ENTRYPOINT}\\\";\n      #elif UNITY_EDITOR_OSX\n      public const string Opencv${OPENCV_MODULE_NAME_FIRST_LETTER_UPPER}Library = \\\"${MACOS_UNITY_EDITOR_ENTRYPOINT}\\\";   \n      #elif UNITY_STANDALONE_OSX\n      public const string Opencv${OPENCV_MODULE_NAME_FIRST_LETTER_UPPER}Library = \\\"${MACOS_UNITY_STANDALONE_ENTRYPOINT}\\\";   \n      #elif __IOS__ || UNITY_IPHONE || UNITY_WEBGL\n      public const string Opencv${OPENCV_MODULE_NAME_FIRST_LETTER_UPPER}Library = \\\"${IOS_ENTRYPOINT}\\\";\n      #elif __ANDROID__ || UNITY_ANDROID\n      public const string Opencv${OPENCV_MODULE_NAME_FIRST_LETTER_UPPER}Library = \\\"${ANDROID_ENTRYPOINT}\\\";\n      #else\n      public const string Opencv${OPENCV_MODULE_NAME_FIRST_LETTER_UPPER}Library = \\\"${OPENCV_${OPENCV_MODULE_NAME_UPPER}_OUTPUT_NAME}\\\";\n      #endif\n\")\n    ENDIF()\n  ELSE()\n    IF(\"${OPENCV_OUTPUT_PROJ_TYPE}\" STREQUAL \"SHARED_LIBRARY\")\n      SET(ENTRYPOINT_CS_STRING \"${ENTRYPOINT_CS_STRING} \n      /// <summary>\n      /// The file name of the ${OPENCV_MODULE_NAME} library\n      /// </summary>\n      public const string Opencv${OPENCV_MODULE_NAME_FIRST_LETTER_UPPER}Library = \\\"${OPENCV_${OPENCV_MODULE_NAME_UPPER}_OUTPUT_NAME}\\\";\")\n    ENDIF()\n  ENDIF()\n  \nENDFOREACH()\n```\n\n----------------------------------------\n\nTITLE: Enabling Position Independent Code (PIC) Flags in CMake\nDESCRIPTION: Adds the '-fPIC' flag to CMAKE_CXX_FLAGS and CMAKE_C_FLAGS for platforms other than Windows, iOS, or Android. This is necessary for creating shared libraries or position-independent executables on these systems.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/tesseract/libtesseract/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nIF (NOT (WIN32 OR IOS OR ANDROID))\n  SET( CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fPIC\" )\n  SET( CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fPIC\" )  \nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Including TIFF Dependency in CMake\nDESCRIPTION: This snippet includes the TIFF include directory (specified by the `TIFF_INCLUDE_DIR` variable) in the project's include paths and adds the preprocessor definition `HAVE_TIFF=1` to indicate that TIFF support is enabled.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/libgeotiff/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\n# Search for dependencies\nINCLUDE_DIRECTORIES(${TIFF_INCLUDE_DIR})\nADD_DEFINITIONS(-DHAVE_TIFF=1)\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenNI Dependency in CMake (Windows)\nDESCRIPTION: This snippet configures the OpenNI (Open Natural Interaction) library dependency for Windows builds (WIN32) when OpenNI support is enabled (WITH_OPENNI). It determines the path to the correct OpenNI DLL (OpenNI64.dll or OpenNI.dll) based on the target architecture (TARGET_ARCH_64) relative to the OpenNI library directory (OPENNI_LIB_DIR) and appends it to the CVEXTERN_DEPENDENCY_DLLS list.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_83\n\nLANGUAGE: cmake\nCODE:\n```\nIF(WIN32 AND WITH_OPENNI)\n  IF(TARGET_ARCH_64)\n    SET(OPENNI_BINARY_FILE \"${OPENNI_LIB_DIR}/../Bin64/OpenNI64.dll\")\n  ELSE()\n    SET(OPENNI_BINARY_FILE \"${OPENNI_LIB_DIR}/../Bin/OpenNI.dll\")\n  ENDIF()\n  \n  LIST(APPEND CVEXTERN_DEPENDENCY_DLLS ${OPENNI_BINARY_FILE})   \nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Point Utility Class in C#\nDESCRIPTION: This snippet introduces a fully managed Point class with two integer properties, X and Y, each supporting get and set. The class is independent of any bindings and designed for purely C# usage in scenarios where a Point representation is needed but not provided by native or generated libraries. No dependencies are required, and the class can be used to construct or reference geometric positions within the binding library.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Runtime/Maui/Android/Additions/AboutAdditions.txt#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Point\n{\n    public int X { get; set; }\n    public int Y { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Customizable Installation Subdirectory Variables in CMake\nDESCRIPTION: This section defines cache variables (`GEOTIFF_BIN_SUBDIR`, `GEOTIFF_LIB_SUBDIR`, `GEOTIFF_INCLUDE_SUBDIR`, `GEOTIFF_DATA_SUBDIR`) that allow users to override the default installation subdirectories determined previously. These variables are initialized with the platform-specific defaults and marked as advanced, indicating they are intended for power users.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/libgeotiff/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\n# Locations are changeable by user to customize layout of GeoTIFF installation\n# (default values are platform-specIFic)\nSET(GEOTIFF_BIN_SUBDIR ${DEFAULT_BIN_SUBDIR} CACHE STRING\n    \"Subdirectory where executables will be installed\")\nSET(GEOTIFF_LIB_SUBDIR ${DEFAULT_LIB_SUBDIR} CACHE STRING\n    \"Subdirectory where libraries will be installed\")\nSET(GEOTIFF_INCLUDE_SUBDIR ${DEFAULT_INCLUDE_SUBDIR} CACHE STRING\n    \"Subdirectory where header files will be installed\")\nSET(GEOTIFF_DATA_SUBDIR ${DEFAULT_DATA_SUBDIR} CACHE STRING\n    \"Subdirectory where data will be installed\")\n\n# Mark *_SUBDIR variables as advanced and dedicated to use by power-users only.\nMARK_AS_ADVANCED(GEOTIFF_BIN_SUBDIR GEOTIFF_LIB_SUBDIR GEOTIFF_INCLUDE_SUBDIR GEOTIFF_DATA_SUBDIR)\n```\n\n----------------------------------------\n\nTITLE: IPP Conditional Inclusion Template - CMake\nDESCRIPTION: This commented block lays out the structure for optionally including and linking with Intel's IPP libraries if WITH_IPP is enabled and IPP_FOUND is true. It is not active, serving as guidance for adding IPP support to OpenCV and Emgu.CV builds. Requires correct resolution of OPENCV_SUBFOLDER, IPP_INCLUDE_DIRS, and IPP_LIBRARY_DIRS.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_78\n\nLANGUAGE: CMake\nCODE:\n```\n#IF(WITH_IPP)\n#  include(${OPENCV_SUBFOLDER}/cmake/OpenCVFindIPP.cmake)\n#  IF (IPP_FOUND)\n#    message(STATUS \"CVEXTERN: USING IPP: ${IPP_LIBRARY_DIRS} \")\n#    add_definitions(-DHAVE_IPP)\n#    include_directories(${IPP_INCLUDE_DIRS})\n#    LINK_DIRECTORIES(${IPP_LIBRARY_DIRS})\n```\n\n----------------------------------------\n\nTITLE: Configuring Tesseract dict Library Build in CMake\nDESCRIPTION: This snippet defines and configures the 'tesseract_dict' static library project. It uses `file(GLOB ...)` to find all source (.cpp) and header (.h) files in the 'dict' directory, groups them for IDE organization, adds MSVC-specific definitions and include paths, sets general include directories for dependent Tesseract modules, creates the static library target, sets project properties, and adds dependencies for non-MSVC builds.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/tesseract/libtesseract/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\n#dict\nPROJECT(tesseract_dict)\nfile(GLOB tesseract_dict_srcs \"${TESSERACT_SRC_DIR}/dict/*.cpp\")\nfile(GLOB tesseract_dict_hdrs \"${TESSERACT_SRC_DIR}/dict/*.h\")\nsource_group(\"Src\" FILES ${tesseract_dict_srcs})\nsource_group(\"Include\" FILES ${tesseract_dict_hdrs})\nIF(MSVC)\n  add_definitions(-D__MSW32__ -W0)\n  include_directories(\"${TESSERACT_SRC_DIR}/vs2010/include\")\nENDIF()\ninclude_directories(\"${TESSERACT_SRC_DIR}/cutil\" \"${TESSERACT_SRC_DIR}/ccstruct\" \"${TESSERACT_SRC_DIR}/ccutil\" \"${TESSERACT_SRC_DIR}/viewer\" \"${TESSERACT_SRC_DIR}/opencl\")\nadd_library(${PROJECT_NAME} STATIC ${tesseract_dict_srcs} ${tesseract_dict_hdrs})\nSET_TESSERACT_PROJECT_PROPERTY(${PROJECT_NAME})\nIF (NOT MSVC)\n  ADD_DEPENDENCIES(${PROJECT_NAME} tesseract_cutil tesseract_ccstruct tesseract_ccutil tesseract_viewer tesseract_opencl)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Excluding Xamarin Runtimes from CMake Build (Commented Out)\nDESCRIPTION: These lines, currently commented out, would include the EmguCV runtimes for Xamarin platforms (macOS, iOS, Android) using ADD_SUBDIRECTORY. Their commented-out state indicates they are currently not part of this specific build configuration.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/platforms/nuget/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n#ADD_SUBDIRECTORY(\"Emgu.CV.runtime.xamarin.macos\")\n#ADD_SUBDIRECTORY(\"Emgu.CV.runtime.xamarin.ios\")\n#ADD_SUBDIRECTORY(\"Emgu.CV.runtime.xamarin.android\")\n```\n\n----------------------------------------\n\nTITLE: Generating C# Properties for cv::cuda::Stream using CMake\nDESCRIPTION: This snippet employs the `CREATE_OCV_CLASS_PROPERTY` CMake macro to generate C# wrapper properties for the `cv::cuda::Stream` C++ class, representing a CUDA stream. It defines the `CudaPtr` property, mapping the C++ `void*` to a C# `IntPtr`. The output is `Emgu.CV.CUDA/Stream.g.cs` in the `Emgu.CV.Cuda` namespace, using `CudaInvoke`. It requires `opencv2/core/cuda.hpp` and `opencv2/core/types_c.h`, and depends on `HAVE_opencv_core`.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nCREATE_OCV_CLASS_PROPERTY( \n    \"core/stream_property\" \n    \"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV.CUDA/Stream.g.cs\"\n    \"cv::cuda::Stream\" \n    \"Stream\" \n    \"cudaPtr\" \n    \"void*\" \n    \"val\"\n    \"CudaPtr\" \n    \"IntPtr\"\n    \"Get pointer to CUDA stream\"\n    \"Emgu.CV.Cuda\"\n    \"CudaInvoke\"\n    \"Stream\"\n\t\"\"\n    \"#include \\\"opencv2/core/cuda.hpp\\\"\\n\\t#include \\\"opencv2/core/types_c.h\\\"\"\n\t\"\"\n\t\"\"\n\t${HAVE_opencv_core})\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building Emgu.CV Maui Android Runtime Project - CMake\nDESCRIPTION: This CMake snippet sets up the build and installation process for the Emgu.CV Maui Android runtime. It conditionally executes if Android support is enabled, installs required source files (like .cs, .csproj, Directory.Build.props, and README.md), and excludes unnecessary directories. It initializes the Maui Android runtime project, sets extra flags for AnyCPU, builds the .NET project using a custom macro, organizes the project within solution folders if enabled, and configures dependencies on native and managed components. It also handles installation of built DLLs, PDBs, and XML documentation to designated directories. Dependencies: CMake, .NET SDK, Emgu.CV sources, cvextern library, correct environment variables. Inputs: Presence of required files and CMake variables. Outputs: Installed source and binary files for the Emgu.CV Maui Android runtime.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Runtime/Maui/Android/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# --------------------------------------------------------\\n#  Copyright (C) 2004-2025 by EMGU Corporation. All rights reserved.\\n# --------------------------------------------------------\\n\\nIF(HAVE_ANDROID)\\n\\n  INSTALL(\\n    DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\\n    DESTINATION Emgu.CV.Runtime/Maui\\n    COMPONENT emgucv_source\\n    FILES_MATCHING \\n\\tPATTERN \"*.cs\"\\n    PATTERN \"*.csproj\"\\n\\tPATTERN \"Directory.Build.props\"\\n\\tPATTERN \"README.md\"\\n    PATTERN \".svn\" EXCLUDE\\n    PATTERN \"obj\" EXCLUDE\\n    PATTERN \"CMakeFiles\" EXCLUDE\\n    PATTERN \"${PROJECT_NAME}.dir\" EXCLUDE\\n    )\\n\\t\\n  PROJECT(Emgu.CV.runtime.maui.android)\\n\\n  SET(EXTRA_BUILD_FLAGS \"/p:Platform=\\\"AnyCPU\\\"\")\\n  \\n  BUILD_DOTNET_PROJ(${PROJECT_NAME} \"${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.runtime.maui.android.csproj\" \"${EXTRA_BUILD_FLAGS}\" ALL)\\n  \\n  if(ENABLE_SOLUTION_FOLDERS)\\n      set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER \"emgu\")\\n  endif() \\n  \\n  ADD_DEPENDENCIES(${PROJECT_NAME} cvextern Emgu.CV)\\n  \\n  INSTALL(\\n      DIRECTORY \\n      ${EMGU_CV_SOURCE_DIR}/libs/Build/Emgu.CV.runtime.maui.android\\n      DESTINATION ${CPACK_PACKAGE_CLI_FOLDER}/Build\\n      COMPONENT emgucv_binary\\n\\t  FILES_MATCHING \\n        PATTERN \"*.dll\"\\n        PATTERN \"*.pdb\"\\n        PATTERN \"*.xml\")  \\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring the tesseract_opencl Project in CMake\nDESCRIPTION: Sets up the 'tesseract_opencl' static library project. It gathers source and header files, creates source groups, defines HAVE_LIBLEPT. For MSVC builds, it adds Windows-specific definitions and conditionally adds USE_OPENCL definition and OpenCL include directories if TESSERACT_OPENCL is enabled. It includes directories for ccutil, viewer, and Leptonica, defines the static library target, applies common properties using SET_TESSERACT_PROJECT_PROPERTY, and adds dependencies on ccutil, viewer, and leptonica for non-MSVC builds.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/tesseract/libtesseract/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\n#opencl\nPROJECT(tesseract_opencl)\nfile(GLOB tesseract_opencl_srcs \"${TESSERACT_SRC_DIR}/opencl/*.cpp\")\nfile(GLOB tesseract_opencl_hdrs \"${TESSERACT_SRC_DIR}/opencl/*.h\")\nsource_group(\"Src\" FILES ${tesseract_opencl_srcs})\nsource_group(\"Include\" FILES ${tesseract_opencl_hdrs})\nadd_definitions(-DHAVE_LIBLEPT)\nIF(MSVC)\n  add_definitions(-D__MSW32__ -W0)\n\n  IF(TESSERACT_OPENCL)\n    add_definitions(-DUSE_OPENCL)\n    #include_directories(\"${OPENCV_SUBFOLDER}/3rdparty/libtiff\")\n    include_directories(\"${CMAKE_SOURCE_DIR}/lib/opencl-icd-1.2.11.0/icd/inc\")\n  ENDIF()\n  #include_directories(\"${TESSERACT_SRC_DIR}/vs2010/include\")\nENDIF()\ninclude_directories(\"${TESSERACT_SRC_DIR}/ccutil\" \"${TESSERACT_SRC_DIR}/viewer\" \"${LEPTONICA_DIR}\")\nadd_library(${PROJECT_NAME} STATIC ${tesseract_opencl_srcs} ${tesseract_opencl_hdrs})\n\nSET_TESSERACT_PROJECT_PROPERTY(${PROJECT_NAME})\n\nIF (NOT MSVC)\n  ADD_DEPENDENCIES(${PROJECT_NAME} tesseract_ccutil tesseract_viewer libleptonica)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring Tesseract lstm Library Build in CMake\nDESCRIPTION: This snippet defines and configures the 'tesseract_lstm' static library project. It gathers source and header files from the 'lstm' directory, organizes them into source groups, adds standard definitions (`-DUSE_STD_NAMESPACE`, `-DHAVE_LIBLEPT`), includes the 'arch' directory for potential SIMD dependencies, adds the static library target, sets Tesseract properties, and adds a dependency on the 'tesseract_arch' library for non-MSVC builds.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/tesseract/libtesseract/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\n#lstm\nPROJECT(tesseract_lstm)\nfile(GLOB tesseract_lstm_srcs \"${TESSERACT_SRC_DIR}/lstm/*.cpp\")\nfile(GLOB tesseract_lstm_hdrs \"${TESSERACT_SRC_DIR}/lstm/*.h\")\nsource_group(\"Src\" FILES ${tesseract_lstm_srcs})\nsource_group(\"Include\" FILES ${tesseract_lstm_hdrs})\nadd_definitions(-DUSE_STD_NAMESPACE -DHAVE_LIBLEPT)\n#IF(MSVC)\n#  LIST(APPEND tesseract_lstm_srcs \"${PROJECT_SOURCE_DIR}/${TESSERACT_SRC_DIR}/vs2010/port/gettimeofday.cpp\")\n#  add_definitions(-D__MSW32__ -W0)\n#  include_directories(\"${TESSERACT_SRC_DIR}/vs2010/include\" \"${TESSERACT_SRC_DIR}/vs2010/port\")\n#ENDIF()\ninclude_directories(\"${TESSERACT_SRC_DIR}/arch\")\nadd_library(${PROJECT_NAME} STATIC ${tesseract_lstm_srcs} ${tesseract_lstm_hdrs})\n\nSET_TESSERACT_PROJECT_PROPERTY(${PROJECT_NAME})\n\nIF (NOT MSVC)\n  ADD_DEPENDENCIES(${PROJECT_NAME} tesseract_arch)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring Tesseract wordrec Library Build in CMake\nDESCRIPTION: This snippet defines and configures the 'tesseract_wordrec' static library project. It gathers source and header files from the 'wordrec' directory, creates source groups, adds MSVC-specific settings, includes necessary directories from other Tesseract components (cutil, ccstruct, ccutil, viewer, opencl, dict, classify), adds the static library target, sets Tesseract properties, and defines dependencies for non-MSVC builds.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/tesseract/libtesseract/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\n#wordrec\nPROJECT(tesseract_wordrec)\nfile(GLOB tesseract_wordrec_srcs \"${TESSERACT_SRC_DIR}/wordrec/*.cpp\")\nfile(GLOB tesseract_wordrec_hdrs \"${TESSERACT_SRC_DIR}/wordrec/*.h\")\nsource_group(\"Src\" FILES ${tesseract_wordrec_srcs})\nsource_group(\"Include\" FILES ${tesseract_wordrec_hdrs})\nIF(MSVC)\n  add_definitions(-D__MSW32__ -W0)\n  include_directories(\"${TESSERACT_SRC_DIR}/vs2010/include\")\nENDIF()\ninclude_directories(\"${TESSERACT_SRC_DIR}/cutil\" \"${TESSERACT_SRC_DIR}/ccstruct\" \"${TESSERACT_SRC_DIR}/ccutil\" \"${TESSERACT_SRC_DIR}/viewer\" \"${TESSERACT_SRC_DIR}/opencl\" \"${TESSERACT_SRC_DIR}/dict\" \"${TESSERACT_SRC_DIR}/classify\")\nadd_library(${PROJECT_NAME} STATIC ${tesseract_wordrec_srcs} ${tesseract_wordrec_hdrs})\n\nSET_TESSERACT_PROJECT_PROPERTY(${PROJECT_NAME})\n\nIF (NOT MSVC)\n  ADD_DEPENDENCIES(${PROJECT_NAME} tesseract_cutil tesseract_ccstruct tesseract_ccutil tesseract_viewer tesseract_opencl tesseract_dict tesseract_classify)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: OpenVINO Dependency Management - CMake\nDESCRIPTION: When the WITH_OPENVINO option is enabled, this snippet locates and configures TBB, OpenVINO, and ngraph via find_package. Ensures that required AI acceleration libraries are available for build targets that leverage OpenVINO.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nIF(WITH_OPENVINO)\n  find_package(TBB CONFIG)\n  find_package(OpenVINO CONFIG)\n  find_package(ngraph CONFIG)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Checking for Standard Header Files in CMake\nDESCRIPTION: This section uses the standard CMake module 'CheckIncludeFiles' to verify the presence of essential C standard library headers: `stdio.h`, `stdlib.h`, and `string.h`. It defines HAVE_* variables (e.g., HAVE_STDIO_H) based on the results of these checks, which can be used for conditional compilation.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/libgeotiff/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\n# Check required standard headers\nINCLUDE(CheckIncludeFiles)\nCHECK_INCLUDE_FILES(stdio.h HAVE_STDIO_H)\nCHECK_INCLUDE_FILES(stdlib.h HAVE_STDLIB_H)\nCHECK_INCLUDE_FILES(string.h HAVE_STRING_H)\n```\n\n----------------------------------------\n\nTITLE: Building Emgu CV CUDA Runtime NuGet Package Using CMake on Windows - CMake\nDESCRIPTION: This CMake script conditionally configures, builds, and optionally signs the Emgu CV CUDA runtime NuGet package when executing on supported Windows desktop environments (x86 or x64) with CUDA enabled. It sets up project metadata, computes paths, and invokes CMake macros/functions for NuGet package building and signing, referencing relevant .csproj and .nuspec files. It also supports solution folder integration if the associated CMake variable is enabled. Dependencies include CMake, Emgu CV source tree, and CUDA/NuGet tooling; required parameters are set through external configuration or passed-in CMake variables. Inputs consist of build flags and paths; outputs are a NuGet package (possibly signed) in the desired directory. The script assumes Win32 and CUDA presence and relies on the existence of specific CMake macros/functions (e.g., BUILD_NUGET_PACKAGE and EMGU_SIGN_NUGET).\nSOURCE: https://github.com/emgucv/emgucv/blob/master/platforms/nuget/Emgu.runtime.windows.cuda.rt/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# --------------------------------------------------------\\n#  Copyright (C) 2004-2025 by EMGU Corporation. All rights reserved.\\n# --------------------------------------------------------\\n\\nIF (WIN32 AND (HAVE_WINDESKTOP_X86 OR HAVE_WINDESKTOP_X64) AND WITH_CUDA)\\n\\nPROJECT(Emgu.runtime.windows.cuda.rt.nuget)\\n\\n  get_filename_component(NUGET_OUTPUT_DIR ${CMAKE_CURRENT_SOURCE_DIR} DIRECTORY)\\n\\n  BUILD_NUGET_PACKAGE(\\n    ${PROJECT_NAME} \\n\\t\"${EMGU_CV_SOURCE_DIR}/Emgu.CV/NetStandard/Emgu.CV.csproj\"  #csproj_file \\n\\t\"${CMAKE_CURRENT_SOURCE_DIR}/Package.nuspec\" #nuspec_file \\n\\t\"${NUGET_OUTPUT_DIR}\" #output_dir \\n\\t\"${CMAKE_CURRENT_SOURCE_DIR}\" #working_dir\\n\\t)\\n\\t\\n  IF (EMGU_NUGET_SIGN_FOUND)\\n    EMGU_SIGN_NUGET(${PROJECT_NAME} \"${NUGET_OUTPUT_DIR}/${EMGU_CUDART_NUGET_ID}.${EMGU_CUDART_VERSION}.nupkg\")\\n  ENDIF()\\n\\n#ADD_DEPENDENCIES(${PROJECT_NAME} Emgu.CV.nuget cvextern)\\n\\nif(ENABLE_SOLUTION_FOLDERS)\\n  set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER \"nuget\")\\nendif() \\n\\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building the EmguCV CUDA DNN Engines NuGet Package in CMake\nDESCRIPTION: This CMake snippet conditionally defines the build process for the `Emgu.runtime.windows.cuda.dnn.engines.nuget` package. It executes only on Windows platforms with specific architectures and when CUDA/cuDNN support is enabled. It determines output directories using `get_filename_component`, invokes the custom `BUILD_NUGET_PACKAGE` macro with project, .csproj, and .nuspec file paths, optionally signs the resulting .nupkg file using the `EMGU_SIGN_NUGET` macro if `EMGU_NUGET_SIGN_FOUND` is true, sets up a dependency on `Emgu.runtime.windows.cuda.dnn.nuget` using `ADD_DEPENDENCIES`, and optionally organizes the project within a 'nuget' solution folder using `set_target_properties` if `ENABLE_SOLUTION_FOLDERS` is enabled.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/platforms/nuget/Emgu.runtime.windows.cuda.dnn.engines/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nIF (WIN32 AND (HAVE_WINDESKTOP_X86 OR HAVE_WINDESKTOP_X64) AND WITH_CUDNN)\n\nPROJECT(Emgu.runtime.windows.cuda.dnn.engines.nuget)\n\n  get_filename_component(NUGET_OUTPUT_DIR ${CMAKE_CURRENT_SOURCE_DIR} DIRECTORY)\n\n  BUILD_NUGET_PACKAGE(\n    ${PROJECT_NAME} \n\t\"${EMGU_CV_SOURCE_DIR}/Emgu.CV/NetStandard/Emgu.CV.csproj\"  #csproj_file \n\t\"${CMAKE_CURRENT_SOURCE_DIR}/Package.nuspec\" #nuspec_file \n\t\"${NUGET_OUTPUT_DIR}\" #output_dir \n\t\"${CMAKE_CURRENT_SOURCE_DIR}\" #working_dir\n\t) \n\n  IF (EMGU_NUGET_SIGN_FOUND)\n    EMGU_SIGN_NUGET(${PROJECT_NAME} \"${NUGET_OUTPUT_DIR}/${EMGU_CUDNN_ENGINES_NUGET_ID}.${EMGU_CUDNN_VERSION}.nupkg\")\n  ENDIF()\n\n  ADD_DEPENDENCIES(${PROJECT_NAME} Emgu.runtime.windows.cuda.dnn.nuget)\n\nif(ENABLE_SOLUTION_FOLDERS)\n  set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER \"nuget\")\nendif() \n\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Publishing MAUI App for iOS Device (ARM64) using dotnet CLI\nDESCRIPTION: Builds and publishes the MAUI application as a self-contained .ipa file suitable for deployment on an ARM64 iOS device. It uses the Release configuration and targets 'net9.0-ios' with the runtime identifier 'ios-arm64'.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Example/MAUI/MauiDemoApp/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndotnet publish -f net9.0-ios -c Release -r ios-arm64 --self-contained\n```\n\n----------------------------------------\n\nTITLE: Building and Running MAUI App on a Specific iOS Device using dotnet CLI\nDESCRIPTION: Builds and runs the MAUI application directly on a connected iOS device identified by its UUID. It uses the Release configuration, targets 'net9.0-ios', specifies the 'ios-arm64' runtime, creates a self-contained build, and requires replacing '{YOUR_IOS_DEVICE_UUID}' with the actual device UUID.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Example/MAUI/MauiDemoApp/README.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndotnet build -t:Run -f net9.0-ios -c Release -r ios-arm64 --self-contained -p:_DeviceName={YOUR_IOS_DEVICE_UUID}\n```\n\n----------------------------------------\n\nTITLE: Installing Emgu.CV.Bitmap Build Outputs and Source Files\nDESCRIPTION: These CMake `INSTALL` commands handle the deployment of the Emgu.CV.Bitmap project. The first command installs the entire build output directory (`${LIBRARY_OUTPUT_PATH}/Build/Emgu.CV.Bitmap`) into the `Build` subdirectory of the designated CLI package folder (`${CPACK_PACKAGE_CLI_FOLDER}`) as part of the `emgucv_binary` component. The second command installs the source files (csproj, cs, props, md) from the current directory into the package root for the `emgucv_source` component, excluding temporary build files and version control directories.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Bitmap/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n    INSTALL(\n      DIRECTORY \n      ${LIBRARY_OUTPUT_PATH}/Build/Emgu.CV.Bitmap\n      DESTINATION ${CPACK_PACKAGE_CLI_FOLDER}/Build\n      COMPONENT emgucv_binary)  \n    #INSTALL(\n    #  FILES \n    #  ${CMAKE_CURRENT_SOURCE_DIR}/../../libs/${PROJECT_NAME}.xml\n    #  ${CMAKE_CURRENT_SOURCE_DIR}/../../libs/${PROJECT_NAME}.dll \n    #  DESTINATION ${CPACK_PACKAGE_CLI_FOLDER}\n    #  COMPONENT emgucv_binary)\n  \n    # ... dependency logic follows ...\n  ENDIF()\n  \n  INSTALL(\n      DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n      DESTINATION .\n      COMPONENT emgucv_source\n      FILES_MATCHING \n      PATTERN \"Emgu.CV.Bitmap.csproj\"\n    PATTERN \"*.cs\"\n    PATTERN \"Directory.Build.props\"\n    PATTERN \"README.md\"\n      PATTERN \".svn\" EXCLUDE\n      PATTERN \"obj\" EXCLUDE\n      PATTERN \"CMakeFiles\" EXCLUDE\n      PATTERN \"${PROJECT_NAME}.dir\" EXCLUDE\n      )\n      \nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Specifying Alternative Base Windows Docker Image (Shell/Dockerfile)\nDESCRIPTION: Identifies `mcr.microsoft.com/windows:10.0.18363.1500-amd64` as a potential base image for building a smaller Emgu CV Docker container compared to the default large base image. Note that using this base image requires manual installation of the .NET SDK.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Example/Docker/Windows/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nmcr.microsoft.com/windows:10.0.18363.1500-amd64\n```\n\n----------------------------------------\n\nTITLE: Collecting CUDA NPP Dependency DLLs in CMake\nDESCRIPTION: Based on the previously detected NPP major/minor version and target architecture (64/32 bit), this snippet constructs the expected filenames for various NPP library DLLs (nppc, nppi, npps, etc.). It iterates through a list of potential NPP DLL paths within the `${CUDA_TOOLKIT_ROOT_DIR}/bin` directory. For each potential DLL, it checks if the file exists and, if so, appends its path to the `CVEXTERN_CUDA_DEPENDENCY_DLLS` list. The naming convention depends on the NPP version (e.g., `_10` for NPP 10.x, `_11` for 11.x, but `_55` for 5.5).\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_100\n\nLANGUAGE: cmake\nCODE:\n```\n  SET(CUDA_NPP_LIBRARY_ROOT_DIR ${CUDA_TOOLKIT_ROOT_DIR})\n  #replace any potential backslash in the path with slash\n  #STRING(REGEX REPLACE \"\\\\\\\\\" \"/\" CUDA_NPP_LIBRARY_ROOT_DIR ${CUDA_NPP_LIBRARY_ROOT_DIR}) \n  \n  IF(TARGET_ARCH_64) \n    SET(CUDA_POSTFIX 64)\n  else()\n    SET(CUDA_POSTFIX 32)\n  ENDIF()\n  \n  SET(CVEXTERN_CUDA_DEPENDENCY_DLLS)\n  \n  IF ((${npp_major} GREATER 5) OR ((${npp_major} STREQUAL \"5\") AND (${npp_minor} GREATER 0)))\n    IF(((${npp_major} GREATER 10) OR ((\"${npp_major}\" STREQUAL \"10\") AND (${npp_minor} GREATER 0)))) \n\t  SET(NPP_POSTFIX \"${npp_major}\")\n\tELSE()\n\t  SET(NPP_POSTFIX \"${npp_major}${npp_minor}\")\n\tENDIF()\n    \n\tSET(CUDA_NPP_DLLS \n\t  \"${CUDA_NPP_LIBRARY_ROOT_DIR}/bin/nppc${CUDA_POSTFIX}_${NPP_POSTFIX}.dll\"\n      \"${CUDA_NPP_LIBRARY_ROOT_DIR}/bin/nppi${CUDA_POSTFIX}_${NPP_POSTFIX}.dll\"\n\t  \"${CUDA_NPP_LIBRARY_ROOT_DIR}/bin/nppial${CUDA_POSTFIX}_${NPP_POSTFIX}.dll\"\n\t  \"${CUDA_NPP_LIBRARY_ROOT_DIR}/bin/nppicc${CUDA_POSTFIX}_${NPP_POSTFIX}.dll\"\n\t  \"${CUDA_NPP_LIBRARY_ROOT_DIR}/bin/nppicom${CUDA_POSTFIX}_${NPP_POSTFIX}.dll\"\n\t  \"${CUDA_NPP_LIBRARY_ROOT_DIR}/bin/nppidei${CUDA_POSTFIX}_${NPP_POSTFIX}.dll\"\n\t  \"${CUDA_NPP_LIBRARY_ROOT_DIR}/bin/nppif${CUDA_POSTFIX}_${NPP_POSTFIX}.dll\"\n\t  \"${CUDA_NPP_LIBRARY_ROOT_DIR}/bin/nppig${CUDA_POSTFIX}_${NPP_POSTFIX}.dll\"\n\t  \"${CUDA_NPP_LIBRARY_ROOT_DIR}/bin/nppim${CUDA_POSTFIX}_${NPP_POSTFIX}.dll\"\n\t  \"${CUDA_NPP_LIBRARY_ROOT_DIR}/bin/nppist${CUDA_POSTFIX}_${NPP_POSTFIX}.dll\"\n\t  \"${CUDA_NPP_LIBRARY_ROOT_DIR}/bin/nppisu${CUDA_POSTFIX}_${NPP_POSTFIX}.dll\"\n\t  \"${CUDA_NPP_LIBRARY_ROOT_DIR}/bin/nppitc${CUDA_POSTFIX}_${NPP_POSTFIX}.dll\"\n      \"${CUDA_NPP_LIBRARY_ROOT_DIR}/bin/npps${CUDA_POSTFIX}_${NPP_POSTFIX}.dll\")\n\tFOREACH(CUDA_NPP_DLL ${CUDA_NPP_DLLS})\n\t  IF(EXISTS \"${CUDA_NPP_DLL}\")\n\t\tLIST(APPEND CVEXTERN_CUDA_DEPENDENCY_DLLS \"${CUDA_NPP_DLL}\")\n\t  ENDIF()\n    ENDFOREACH()\n```\n\n----------------------------------------\n\nTITLE: Setting C++ Standard and Optional Solution Folder\nDESCRIPTION: Sets the required C++ standard for the target to C++11 using the `CXX_STANDARD` property. Additionally, if `ENABLE_SOLUTION_FOLDERS` is enabled, it places the target within a solution folder named \"emgu\" using the `FOLDER` property, primarily for Visual Studio organization.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/tests/cvextern_test/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(${PROJECT_NAME} PROPERTIES CXX_STANDARD 11)\nif(ENABLE_SOLUTION_FOLDERS)\n    set_target_properties(${the_target} PROPERTIES FOLDER \"emgu\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining NuGet Package Properties for Emgu.CV.Bitmap in CMake\nDESCRIPTION: Sets CMake variables for the Emgu.CV.Bitmap NuGet package. It defines the package title, summary, initializes an empty file list and dependency string, and then appends specific files (DLL, XML, icon, license, README) and dependencies (.NET Standard 2.0 group with System.Drawing.Common and the main EmguCV package) to these variables.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_59\n\nLANGUAGE: cmake\nCODE:\n```\nSET(EMGUCV_BITMAP_NUGET_TITLE \"Bitmap extension for Emgu CV\")\nSET(EMGUCV_BITMAP_NUGET_SUMMARY \"This package add extension method to convert Bitmap to and from Emgu objects (e.g. Mat, UMat, GpuMat)\")\nSET(EMGUCV_BITMAP_NUGET_FILE_LIST \"\")\nSET(EMGUCV_BITMAP_NUGET_DEPENDENCY \"\")\nSET(EMGUCV_BITMAP_NUGET_FILE_LIST \"${EMGUCV_BITMAP_NUGET_FILE_LIST} \n    <file src=\\\"..\\\\..\\\\..\\\\libs\\\\Emgu.CV.Bitmap.dll\\\" target=\\\"lib\\\\netstandard2.0\\\" />\n    <file src=\\\"..\\\\..\\\\..\\\\libs\\\\Emgu.CV.Bitmap.xml\\\" target=\\\"lib\\\\netstandard2.0\\\" />\n    <file src=\\\"..\\\\..\\\\..\\\\miscellaneous\\\\nuget_icon.png\\\" target=\\\"icon.png\\\" />\n    <file src=\\\"..\\\\..\\\\..\\\\${EMGUCV_LICENSE_FILE}\\\" target=\\\"\\\" />\n\t<file src=\\\"README.md\\\" target=\\\"docs\\\\\\\" />\")\nSET(EMGUCV_BITMAP_NUGET_DEPENDENCY \"${EMGUCV_BITMAP_NUGET_DEPENDENCY} \n      <group targetFramework=\\\".NETStandard2.0\\\">\n        <dependency id=\\\"System.Drawing.Common\\\" version=\\\"${NUGET_SYSTEM_DRAWING_COMMON_VERSION}\\\" exclude=\\\"Build,Analyzers\\\" />\n        <dependency id=\\\"\\${EMGUCV_NUGET_ID}\\\" version=\\\"\\${CPACK_PACKAGE_DEPENDENCY_VERSION}\\\" />\n      </group>\")\nSET(EMGUCV_BITMAP_NUGET_DEPENDENCY \"\n\t<dependencies>\n\\${EMGUCV_BITMAP_NUGET_DEPENDENCY}\n    </dependencies>\")\n```\n\n----------------------------------------\n\nTITLE: Generating C++/C# Code for Other Struct Properties (Marshal Type 'struct')\nDESCRIPTION: Handles generic struct properties where the marshalling type (`MARSHAL_TYPE`) is 'struct' but the C++ type (`PROPERTY_TYPE`) is neither 'CvTermCriteria' nor 'CvSize'. It generates C++ header and source code for getter (`cve...Get...`) and setter (`cve...Set...`) functions, supporting dummy implementations via `IS_DUMMY`. The C++ implementation uses `memcpy`. The corresponding C# P/Invoke declarations and property (not fully shown for setter generation in the provided text) would also be generated.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\n     ELSE()\n\t  IF(IS_DUMMY)\n\t  \tSET(C_HEADER_SOURCE \"${C_HEADER_SOURCE}\nCVAPI(void) cve${CLASS_NAME}Get${CS_FUNCTION_NAME}(void* obj, ${PROPERTY_TYPE}* value);\nCVAPI(void) cve${CLASS_NAME}Set${CS_FUNCTION_NAME}(void* obj, ${PROPERTY_TYPE}* value);     \n     \")\n\t    SET(C_SOURCE \"${C_SOURCE}\nvoid cve${CLASS_NAME}Get${CS_FUNCTION_NAME}(void* obj, ${PROPERTY_TYPE}* value) { ${RAISE_FUNCTION_NOT_SUPPORT_CPP} }\nvoid cve${CLASS_NAME}Set${CS_FUNCTION_NAME}(void* obj, ${PROPERTY_TYPE}* value) { ${RAISE_FUNCTION_NOT_SUPPORT_CPP} }     \n     \")\n\t  ELSE()\n\t    SET(C_HEADER_SOURCE \"${C_HEADER_SOURCE}\nCVAPI(void) cve${CLASS_NAME}Get${CS_FUNCTION_NAME}(${CLASS_NAME_FULL}* obj, ${PROPERTY_TYPE}* value);\nCVAPI(void) cve${CLASS_NAME}Set${CS_FUNCTION_NAME}(${CLASS_NAME_FULL}* obj, ${PROPERTY_TYPE}* value);     \n     \")\n        SET(C_SOURCE \"${C_SOURCE}\nvoid cve${CLASS_NAME}Get${CS_FUNCTION_NAME}(${CLASS_NAME_FULL}* obj, ${PROPERTY_TYPE}* value) { ${PROPERTY_TYPE} p = obj->get${PROPERTY_NAME}(); memcpy(value, &p, sizeof(${PROPERTY_TYPE})); }\n```\n\n----------------------------------------\n\nTITLE: Selecting C# Compiler Target Framework for EMGU CV - CMake\nDESCRIPTION: Configures the CSC_TARGET_FRAMEWORK cache variable based on platform and compiler, preferring .NET 3.5 on Windows with MSVC and defaulting to a generic C# framework otherwise. This controls which .NET version the Emgu CV managed components are compiled against.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nSET(CSC_PREFERRED_VERSION \"4.0\")\nIF((NOT NETFX_CORE) AND MSVC) \n  #SET CSC 3.5 as the prefered compiler for EMGU CV\n  SET(CSC_TARGET_FRAMEWORK \"3.5\" CACHE STRING \"C#  target framework\")\nELSE()\n  #SET CSC 4.5 (in the .Net framework 4.0 folder) as the prefered compiler for EMGU CV\n  SET(CSC_TARGET_FRAMEWORK \"\" CACHE STRING \"C# target framework\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Setting Default Installation Subdirectories Based on Platform in CMake\nDESCRIPTION: This block sets default subdirectory names for installing binaries, libraries, data, and include files based on the operating system. On Windows (WIN32), it defaults to 'lib', '.', and 'include'. The binary directory is 'bin' for MSVC and '.' otherwise. On Unix-like systems (including macOS), it defaults to 'bin', 'lib', 'share', and 'include'.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/libgeotiff/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\nIF(WIN32)\n    SET(DEFAULT_LIB_SUBDIR lib)\n    SET(DEFAULT_DATA_SUBDIR .)\n    SET(DEFAULT_INCLUDE_SUBDIR include)\n\n    IF(MSVC)\n        SET(DEFAULT_BIN_SUBDIR bin)\n    ELSE()\n        SET(DEFAULT_BIN_SUBDIR .)\n    ENDIF()\nELSE()\n    # Common locatoins for Unix and Mac OS X\n    SET(DEFAULT_BIN_SUBDIR bin)\n    SET(DEFAULT_LIB_SUBDIR lib)\n    SET(DEFAULT_DATA_SUBDIR share)\n    SET(DEFAULT_INCLUDE_SUBDIR include)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Extracting Tesseract Version Information in CMake\nDESCRIPTION: Reads the Tesseract version string from the VERSION file, parses major, minor, and patch components using regular expressions. It attempts to get a more specific version from Git history if available, otherwise defaults to the version from the file. The result is stored in the PACKAGE_VERSION variable.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/tesseract/libtesseract/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n# Get version with components from VERSION file.\nfile(STRINGS \"${TESSERACT_DIR}/VERSION\" VERSION_PLAIN)\nstring(REGEX REPLACE \"^([^.]*)\\\\..*\" \"\\\\1\" VERSION_MAJOR ${VERSION_PLAIN})\nstring(REGEX REPLACE \"^[^.]*\\\\.([^.]*)\\\\..*\" \"\\\\1\" VERSION_MINOR ${VERSION_PLAIN})\nstring(REGEX REPLACE \"^[^.]*\\\\.[^.]*\\\\.([0-9]*).*\" \"\\\\1\" VERSION_PATCH ${VERSION_PLAIN})\nif(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/.git)\n    execute_process(COMMAND git --git-dir ${CMAKE_CURRENT_SOURCE_DIR}/.git describe --abbrev=4\n        OUTPUT_VARIABLE GIT_REV)\n        string(REGEX REPLACE \"\\n$\" \"\" PACKAGE_VERSION \"${GIT_REV}\")\nendif()\nif(NOT PACKAGE_VERSION)\n    set(PACKAGE_VERSION ${VERSION_PLAIN})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Including MSVC System Runtimes in CMake (Windows)\nDESCRIPTION: This snippet handles the inclusion of required Microsoft Visual C++ system runtime libraries (e.g., MSVCRxx.dll) for Windows builds using MSVC, excluding Windows Store/UWP builds (NOT NETFX_CORE). It utilizes the standard CMake module `InstallRequiredSystemLibraries` after disabling automatic skipping, and appends the identified runtime libraries to the CVEXTERN_DEPENDENCY_DLLS list.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_82\n\nLANGUAGE: cmake\nCODE:\n```\nIF(WIN32 AND MSVC AND (NOT NETFX_CORE))\n  # Add install rules for required system runtimes such as MSVCRxx.dll\n  SET (CMAKE_INSTALL_SYSTEM_RUNTIME_LIBS_SKIP ON)\n  INCLUDE(InstallRequiredSystemLibraries)\n  LIST(APPEND CVEXTERN_DEPENDENCY_DLLS ${CMAKE_INSTALL_SYSTEM_RUNTIME_LIBS})   \nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Creating TonemapMantiuk Class Properties for OpenCV Photo Emgu.CV Bindings - CMake\nDESCRIPTION: Creates property bindings for 'Saturation' and 'Scale' in the TonemapMantiuk class within Emgu.CV. The macro includes parameter constraints and details, leverages the OpenCV photo module, and includes the necessary C++ header.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_46\n\nLANGUAGE: CMake\nCODE:\n```\nCREATE_OCV_CLASS_PROPERTY( \n  \"photo/TonemapMantiuk_property\" \n  \"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV/Photo/TonemapMantiuk.g.cs\"\n  \"cv::TonemapMantiuk\" \n  \"TonemapMantiuk\" \n  \"Saturation;Scale\" \n  \"float;float\" \n  \"prop;prop\"\n  \"Saturation;Scale\" \n  \"float;float\"\n  \"Saturation enhancement value.;\n\\tContrast scale factor. HVS response is multiplied by this parameter, thus compressing dynamic range. Values from 0.6 to 0.9 produce best results.\"\n  \"Emgu.CV\"\n  \"CvInvoke\"\n  \"TonemapMantiuk\"\n  \"\"\n  \"#include \\\"photo_c.h\\\"\"\n  \"\"\n  \"\"\n  ${HAVE_opencv_photo})\n```\n\n----------------------------------------\n\nTITLE: Configuring the tesseract_ccstruct Project (Partial) in CMake\nDESCRIPTION: Initiates the setup for the 'tesseract_ccstruct' static library project. It defines the project, gathers source and header files using file(GLOB), and organizes them into source groups within an IDE. Further configuration (like adding the library target, includes, definitions, properties, and dependencies) is expected to follow this snippet.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/tesseract/libtesseract/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\n#ccstruct\nPROJECT(tesseract_ccstruct)\nfile(GLOB tesseract_ccstruct_srcs \"${TESSERACT_SRC_DIR}/ccstruct/*.cpp\")\nfile(GLOB tesseract_ccstruct_hdrs \"${TESSERACT_SRC_DIR}/ccstruct/*.h\")\nsource_group(\"Src\" FILES ${tesseract_ccstruct_srcs})\nsource_group(\"Include\" FILES ${tesseract_ccstruct_hdrs})\n#IF(MSVC)\n#  add_definitions(-D__MSW32__ -W0)\n```\n\n----------------------------------------\n\nTITLE: Defining the Executable Target\nDESCRIPTION: Sets a variable `the_target` to the current project name (`cvextern_test`). Then, it defines an executable target named `cvextern_test` using the collected source (`cvextern_test_srcs`) and header (`cvextern_test_hdrs`) files.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/tests/cvextern_test/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nset(the_target ${PROJECT_NAME})\n\nadd_executable(${the_target} ${cvextern_test_srcs} ${cvextern_test_hdrs})\n```\n\n----------------------------------------\n\nTITLE: Defining Macro to Check for and Install Binary Files in CMake\nDESCRIPTION: This defines a CMake macro named `CHECK_BINARY_EXIST`. The macro takes a folder, a file pattern, a property name (output variable), and a secondary check value as arguments. It uses `FILE(GLOB ...)` to find files matching the pattern within the specified folder relative to the current source directory. If files are found, it appends them to the `UNMANAGED_DLL_EXTRA` list, installs them to the specified destination folder as part of the `emgucv_binary` component, and sets the output property variable to `ON`. Otherwise, it sets the property variable to the value of `second_check`. It includes commented-out logic and messages for debugging.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_25\n\nLANGUAGE: cmake\nCODE:\n```\nMACRO(CHECK_BINARY_EXIST folder pattern property_name second_check)\n  #IF(\"${UNMANAGED_LIBRARY_OUTPUT_PATH}\" STREQUAL \"${CMAKE_CURRENT_SOURCE_DIR}/${folder}\")\n  #  SET(${property_name} ON)\n  #ELSE()\n    FILE(GLOB DLL_LIST \"${CMAKE_CURRENT_SOURCE_DIR}/${folder}/${pattern}\")\n    LIST(LENGTH DLL_LIST DLL_LIST_LENGTH)\n    IF(DLL_LIST_LENGTH GREATER 0)\n      LIST(APPEND UNMANAGED_DLL_EXTRA ${DLL_LIST})\n      MESSAGE(STATUS \"Including the following files in package: ${DLL_LIST}\")\n      INSTALL(\n\t   FILES\n\t   ${DLL_LIST}\n\t   DESTINATION ${folder}\n\t   COMPONENT emgucv_binary\n\t   )  \n      SET(${property_name} ON)\n    ELSE()\n      SET(${property_name} ${second_check})\n    ENDIF()\n  #ENDIF()\n  #MESSAGE(STATUS \"Property - ${property_name}: ${${property_name}}\")\n  IF(${${property_name}})\n    MESSAGE(STATUS \"${property_name}: ${${property_name}}\")\n  ENDIF()\nENDMACRO()\n```\n\n----------------------------------------\n\nTITLE: (Commented) Installing libgeotiff Library Targets\nDESCRIPTION: This commented-out section outlines how to install the built library targets (primarily the static archive, `${GEOTIFF_ARCHIVE_TARGET}`) using the `INSTALL` command. It specifies destinations for potential runtime components (`${GEOTIFF_BIN_DIR}`), library files (`${GEOTIFF_LIB_DIR}`), and archive files (`${GEOTIFF_LIB_DIR}`). Installation for the shared library target is also commented out.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/libgeotiff/CMakeLists.txt#_snippet_25\n\nLANGUAGE: cmake\nCODE:\n```\n#INSTALL(TARGETS ${GEOTIFF_ARCHIVE_TARGET} #${GEOTIFF_LIBRARY_TARGET}\n#    RUNTIME DESTINATION ${GEOTIFF_BIN_DIR}\n#    LIBRARY DESTINATION ${GEOTIFF_LIB_DIR}\n#    ARCHIVE DESTINATION ${GEOTIFF_LIB_DIR})\n```\n\n----------------------------------------\n\nTITLE: Adding DepthAI-core Library Conditionally - CMake\nDESCRIPTION: If EMGU_CV_WITH_DEPTHAI is enabled, ensures that the depthai-core library is always built as a static library via temporarily changing the BUILD_SHARED_LIBS setting. Adds the external 'Emgu.CV.Extern/depthai-core' directory to the build while preserving the original shared/static build configuration. This section is only activated if the user sets EMGU_CV_WITH_DEPTHAI ON.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nIF(EMGU_CV_WITH_DEPTHAI)\n  # Always build depthai-core as a static library\n  SET(BUILD_SHARED_LIBS_CACHE ${BUILD_SHARED_LIBS})\n  SET(BUILD_SHARED_LIBS OFF)\n  add_subdirectory(Emgu.CV.Extern/depthai-core EXCLUDE_FROM_ALL)\n  SET(BUILD_SHARED_LIBS ${BUILD_SHARED_LIBS_CACHE})\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Setting Windows NuGet Package Dependency in CMake\nDESCRIPTION: This CMake code appends a dependency entry to the `EMGUCV_WINDOWS_NUGET_DEPENDENCY` variable. This variable likely accumulates XML fragments for the `<dependencies>` section of a Windows-specific NuGet package specification (.nuspec). It uses the `EMGUCV_NUGET_ID` and `NUGET_PACKAGE_DEPENDENCY_VERSION` variables to define the dependency.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_68\n\nLANGUAGE: cmake\nCODE:\n```\nSET(EMGUCV_WINDOWS_NUGET_DEPENDENCY \"${EMGUCV_WINDOWS_NUGET_DEPENDENCY}<dependency id=\\\"${EMGUCV_NUGET_ID}\\\" version=\\\"${NUGET_PACKAGE_DEPENDENCY_VERSION}\\\" />\")\n#SET(EMGUCV_WINDOWS_NETCORE_NUGET_DEPENDENCY \"<dependency id=\\\"${EMGUCV_NUGET_ID}\\\" version=\\\"${CPACK_PACKAGE_DEPENDENCY_VERSION}\\\" />\")\n#SET(EMGUCV_WINDOWS_NETFRAMEWORK_NUGET_DEPENDENCY \"<dependency id=\\\"${EMGUCV_NUGET_ID}\\\" version=\\\"${CPACK_PACKAGE_DEPENDENCY_VERSION}\\\" />\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Conditional Build for BuildInfo.Console Example in CMake\nDESCRIPTION: This CMake snippet conditionally configures the build for the `Example.BuildInfo.Console` .NET project. It executes only if the .NET SDK is found (`DOTNET_FOUND` is true) and the host system is not Apple Silicon arm64 (`NOT(APPLE AND (\"${CMAKE_HOST_SYSTEM_PROCESSOR}\" STREQUAL \"arm64\"))`). If the conditions are met, it defines the project, uses the `BUILD_DOTNET_PROJ` macro to compile the `BuildInfo.Console.csproj` file located in the current source directory, sets the IDE folder property to \"Emgu.CV.Examples\", and adds a dependency on the `Emgu.CV` target if that target exists.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Example/BuildInfo.Console/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# --------------------------------------------------------\n#  Copyright (C) 2004-2025 by EMGU Corporation. All rights reserved.\n# --------------------------------------------------------\n\nIF (DOTNET_FOUND AND NOT(APPLE AND (\"${CMAKE_HOST_SYSTEM_PROCESSOR}\" STREQUAL \"arm64\")) ) #DO not compile demo on Apple silicon\n  PROJECT(Example.BuildInfo.Console)\n  BUILD_DOTNET_PROJ(${PROJECT_NAME} \"${CMAKE_CURRENT_SOURCE_DIR}/BuildInfo.Console.csproj\"  \"\" ALL)\n  set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER \"Emgu.CV.Examples\")\n  \n  IF (TARGET Emgu.CV)\n    ADD_DEPENDENCIES(${PROJECT_NAME} Emgu.CV)\n  ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: CMake Policy Configuration - CMake\nDESCRIPTION: Checks for the availability of certain CMake policies (CMP0022, CMP0069), and, if supported, sets their default values to NEW for this project. This ensures consistent and modern CMake behavior, without forcibly setting the policies explicitly. These settings affect things like INTERFACE_LINK_LIBRARIES handling and link-time optimizations.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(POLICY CMP0022)\n  #cmake_policy(SET CMP0022 NEW)\n  SET(CMAKE_POLICY_DEFAULT_CMP0022 NEW)\nendif()\nif(POLICY CMP0069)\n  #cmake_policy(SET CMP0069 NEW)\n  SET(CMAKE_POLICY_DEFAULT_CMP0069 NEW)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting macOS NuGet Package Dependency in CMake\nDESCRIPTION: Similar to the Windows dependency setting, this CMake code appends a dependency entry to the `EMGUCV_MACOS_NUGET_DEPENDENCY` variable. This variable is intended for the `<dependencies>` section of a macOS-specific Emgu CV NuGet package. It uses the `EMGUCV_NUGET_ID` and `NUGET_PACKAGE_DEPENDENCY_VERSION` variables.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_70\n\nLANGUAGE: cmake\nCODE:\n```\nSET(EMGUCV_MACOS_NUGET_DEPENDENCY \"${EMGUCV_MACOS_NUGET_DEPENDENCY}<dependency id=\\\"${EMGUCV_NUGET_ID}\\\" version=\\\"${NUGET_PACKAGE_DEPENDENCY_VERSION}\\\" />\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Conditional File Installation with CMake - CMake\nDESCRIPTION: This snippet utilizes CMake scripting to collect all C# files in the current source directory and sets up their installation as part of the TF Lite Interop example, provided that HAVE_WINDESKTOP_LITE is enabled. It depends on variables such as HAVE_WINDESKTOP_LITE, SRC_Example_CVInterop_Lite, and CMAKE_CURRENT_SOURCE_DIR being defined within the CMake context. The main parameters include the file patten used to collect sources (*.cs) and the destination directory for the installation. All listed files are installed to 'Emgu.TF.Example/TF.Lite.Interop' under the 'emgutf_example_source' component. This setup assumes the presence of required files and dependencies as referenced with variable and file path names.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Example/TF.Lite.Interop/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# --------------------------------------------------------\\n#  Copyright (C) 2004-2025 by EMGU Corporation. All rights reserved.\\n# --------------------------------------------------------\\n\\nIF(HAVE_WINDESKTOP_LITE)\\n  FILE(GLOB SRC_Example_TF_Lite_Interop RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} \"*.cs\") \\n\\n  INSTALL(FILES\\n    ${SRC_Example_CVInterop_Lite}\\n\\t\"${CMAKE_CURRENT_SOURCE_DIR}/dog416.png\"\\n    ${CMAKE_CURRENT_SOURCE_DIR}/TF.Lite.Interop.Net.csproj\\n    #${CMAKE_CURRENT_SOURCE_DIR}/App.config\\n    DESTINATION Emgu.TF.Example/TF.Lite.Interop COMPONENT emgutf_example_source)\\n\\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Conditionally Configuring C# Project in CMake\nDESCRIPTION: This CMake script checks if the `Emgu.CV.Platform.NetFramework` target exists. If it does, it defines a CMake project named `Example.Webservice_Client`. It then uses the `MSBUILD_CSPROJ_IN_SOLUTION` command to add the corresponding C# project (`Webservice_Client`) located within the solution directory to the specified Visual Studio solution file (`Emgu.CV.Example.sln`). The `set_target_properties` command organizes this project under the \"Emgu.CV.Examples\" folder in the solution explorer. Finally, `ADD_DEPENDENCIES` ensures that `Example.Webservice_Client` depends on `Emgu.CV.Platform.NetFramework`, meaning the latter must be built first. This setup restricts the configuration and build of this example project to .NET Framework environments.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Example/Webservice_Client/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# --------------------------------------------------------\n#  Copyright (C) 2004-2025 by EMGU Corporation. All rights reserved.\n# --------------------------------------------------------\n\nIF(TARGET Emgu.CV.Platform.NetFramework)\n  PROJECT(Example.Webservice_Client)\n\n  MSBUILD_CSPROJ_IN_SOLUTION(${PROJECT_NAME} \"${CMAKE_CURRENT_SOURCE_DIR}/../../Solution/Windows.Desktop/Emgu.CV.Example.sln\" \"Webservice_Client\" \"\" ALL)\n  set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER \"Emgu.CV.Examples\")\n  ADD_DEPENDENCIES(${PROJECT_NAME} Emgu.CV.Platform.NetFramework)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Running Emgu CV Docker Image via Script (Batch)\nDESCRIPTION: Executes the `run_Docker.bat` script to start and run the previously built Windows x86-64 Docker image for Emgu CV. This command requires the Docker image to have been successfully built using the `Build_Docker.bat` script.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Example/Docker/Windows/README.md#_snippet_1\n\nLANGUAGE: Batch\nCODE:\n```\nrun_Docker.bat\n```\n\n----------------------------------------\n\nTITLE: Generating C# Properties for cv::ocl::Kernel using CMake\nDESCRIPTION: This snippet uses the `CREATE_OCV_CLASS_PROPERTY` CMake macro to generate C# wrappers for properties of the `cv::ocl::Kernel` C++ class, representing an OpenCL kernel. It defines the `Empty` (bool) and `NativeKernelPtr` (void* mapped to IntPtr) properties. The output is `Emgu.CV/Ocl/Kernel.g.cs` in the `Emgu.CV.Ocl` namespace, using `OclInvoke`, requires `ocl_c.h`, and depends on `HAVE_opencv_core`.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nCREATE_OCV_CLASS_PROPERTY( \n    \"core/ocl_kernel_property\" \n    \"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV/Ocl/Kernel.g.cs\"\n    \"cv::ocl::Kernel\" \n    \"OclKernel\"\n    \"empty;ptr\"\n    \"bool;void*\"\n    \"val;val\"\n    \"Empty;NativeKernelPtr\"\n    \"bool;IntPtr\"\n    \"Indicates if the kernel is empty;\n  The pointer to the native kernel\"\n    \"Emgu.CV.Ocl\"\n    \"OclInvoke\"\n    \"Kernel\" \n\t\"\"\n    \"#include \\\"ocl_c.h\\\"\"\n\t\"\"\n\t\"\"\n\t${HAVE_opencv_core})\n```\n\n----------------------------------------\n\nTITLE: Alternative and Platform-Specific Build/Install Commands (Commented) - CMake\nDESCRIPTION: This snippet shows alternative (currently commented-out) CMake INSTALL commands for copying runtime, library, or archive files to target folders, as well as a platform-specific add_custom_command for Emscripten. The Emscripten command merges static libraries into a bitcode file with emcc, utilizing several CMake variables for paths. Required dependencies include Emscripten and the project's static libraries. These commands are intended for specific project environments and and provide extensibility for future build targets or output types.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_130\n\nLANGUAGE: CMake\nCODE:\n```\n#INSTALL(FILES ${the_target} \n#  RUNTIME DESTINATION libs${UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER} COMPONENT libs\n#  LIBRARY DESTINATION libs${UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER} COMPONENT libs\n#  ARCHIVE DESTINATION libs${UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER} COMPONENT libs)\n\n#IF(\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"Emscripten\")\n#  add_custom_command(TARGET ${the_target}\n#    POST_BUILD\n#    COMMAND emcc -o ${CMAKE_SOURCE_DIR}/libs/libcvextern.bc bin${UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER}/*.a opencv/3rdparty/lib/*.a opencv/lib/*.a ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/*.a\n#    WORKING_DIRECTORY \"${CMAKE_BINARY_DIR}\"\n#    COMMENT \"Merging libcvextern.bc\")\n#ENDIF()\n```\n\n----------------------------------------\n\nTITLE: Defining ANN_MLP Properties via Macro - C/C++\nDESCRIPTION: Details property metadata for the OpenCV ANN_MLP (Artificial Neural Network - Multilayer Perceptron) class, enabling generation of property accessors by macro expansion. Properties include termination criteria, backpropagation and annealing parameters, each with type and descriptive documentation, and require the OpenCV ML module and ml_c.h to be available.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_33\n\nLANGUAGE: C/C++\nCODE:\n```\n#include \\\"ml_c.h\\\"\n```\n\n----------------------------------------\n\nTITLE: Excluding MAUI Runtimes from CMake Build (Commented Out)\nDESCRIPTION: These lines, currently commented out, would include the EmguCV runtimes for .NET MAUI platforms (macOS, iOS, Android, and common MAUI) using ADD_SUBDIRECTORY. They are currently excluded from this build configuration.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/platforms/nuget/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n#ADD_SUBDIRECTORY(\"Emgu.CV.runtime.maui.macos\")\n#ADD_SUBDIRECTORY(\"Emgu.CV.runtime.maui.ios\")\n#ADD_SUBDIRECTORY(\"Emgu.CV.runtime.maui.android\")\n#ADD_SUBDIRECTORY(\"Emgu.CV.runtime.maui\")\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories for Emgu CV Managed Components Build in CMake\nDESCRIPTION: This section uses the `ADD_SUBDIRECTORY` command to include the CMakeLists.txt files located in various subdirectories. This effectively incorporates the build configurations for the managed (.NET) components of the Emgu CV library and related projects, such as utilities, core CV wrappers, platform-specific extensions (Bitmap, Wpf, WindowsUI), examples, tests, CUDA wrappers, OCR, Contrib modules, models, runtime components, NuGet packaging, and MAUI support.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_90\n\nLANGUAGE: cmake\nCODE:\n```\n# ----------------------------------------------------------------------------\n#  Build the managed dlls of Emgu CV\n# ----------------------------------------------------------------------------\nADD_SUBDIRECTORY(Emgu.Util)\nADD_SUBDIRECTORY(Emgu.CV)\nADD_SUBDIRECTORY(Emgu.CV.Bitmap)\nADD_SUBDIRECTORY(Emgu.CV.Wpf)\nADD_SUBDIRECTORY(Emgu.CV.WindowsUI)\n\nADD_SUBDIRECTORY(Emgu.CV.Example)\nADD_SUBDIRECTORY(Emgu.CV.Test)\nADD_SUBDIRECTORY(Emgu.CV.Cuda)\n\nADD_SUBDIRECTORY(Emgu.CV.OCR)\n \nADD_SUBDIRECTORY(Emgu.CV.Contrib)\nADD_SUBDIRECTORY(Emgu.CV.Models)\n\nADD_SUBDIRECTORY(Emgu.CV.Runtime)\n\nADD_SUBDIRECTORY(platforms/nuget)\n\n# MAUI will need to use some of the nuget packages. It need to be build after nuget packages is build.\nADD_SUBDIRECTORY(Emgu.CV.Runtime/Maui)\n```\n\n----------------------------------------\n\nTITLE: Creating Objectness BING Saliency Property Accessors Using EmguCV - CMake\nDESCRIPTION: Uses CMake macro to wrap main parameters (W, NSS) of cv::saliency::ObjectnessBING for .NET access. Prerequisites include OpenCV's saliency module and EmguCV codegen tooling. Enables managed code to control objectness estimation parameters for the BING saliency algorithm.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_63\n\nLANGUAGE: CMake\nCODE:\n```\nCREATE_OCV_CLASS_PROPERTY( \n    \"saliency/ObjectnessBING_property\" \n    \"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV.Contrib/Saliency/ObjectnessBING.g.cs\"\n    \"cv::saliency::ObjectnessBING\" \n    \"ObjectnessBING\" \n    \"W;NSS\" \n    \"int;int\" \n    \"prop;prop\"\n    \"W;NSS\" \n    \"int;int\"\n    \"W;\n    NSS\"\n    \"Emgu.CV.Saliency\"\n    \"SaliencyInvoke\"\n    \"ObjectnessBING\"\n\t\"\"\n    \"#include \\\"saliency_c.h\\\"\"\n\t\"\"\n\t\"\"\n\t${HAVE_opencv_saliency})\n```\n\n----------------------------------------\n\nTITLE: Appending Inference Engine Base DLLs in CMake\nDESCRIPTION: Appends the list of Inference Engine base DLLs, previously stored in the `INF_DLL_NAMES` variable, to the `CVEXTERN_DEPENDENCY_DLLS` list. It also logs the content of `INF_DLL_NAMES` for debugging.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_91\n\nLANGUAGE: cmake\nCODE:\n```\n    MESSAGE(STATUS \"^^^^^^^^^^^^^^  INF_DLL_NAMES: ${INF_DLL_NAMES}\")\n    LIST(APPEND CVEXTERN_DEPENDENCY_DLLS ${INF_DLL_NAMES})\n```\n\n----------------------------------------\n\nTITLE: Initializing C++ and C# Source Code Strings in CMake\nDESCRIPTION: Initializes CMake variables `C_SOURCE`, `CS_SOURCE`, and `CS_CLASS_SOURCE` with boilerplate code for C++ source, C# P/Invoke definitions, and C# class structure respectively. These variables will be appended with generated code later in the script. It uses other CMake variables like `fname`, `cs_namespace`, `cs_invoke_class`, and `cs_class_name` for dynamic content.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n  SET(C_SOURCE \"${source_additional_code} #include \\\"${fname}.h\\\"\")\n  \n  SET(CS_SOURCE \"//----------------------------------------------------------------------------\n//  This file is automatically generated, do not modify.      \n//----------------------------------------------------------------------------\n\n${CS_COMPILATION_CONDITION_OPEN}\n\nusing System;\nusing System.Runtime.InteropServices;\nusing Emgu.CV;\nusing Emgu.CV.Structure;\nusing Emgu.Util;\n\nnamespace ${cs_namespace}\n{\n   public static partial class ${cs_invoke_class}\n   {\n\")\n  SET(CS_CLASS_SOURCE \"public partial class ${cs_class_name}\n   {\n\")\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Source Directory and Adding OpenCV Subdirectory\nDESCRIPTION: This snippet saves the current CMake source directory, sets it to the OpenCV subfolder path, enables solution folders in Visual Studio if using MSVC, and then adds the OpenCV subfolder as a subdirectory to the CMake build process. Finally, it restores the original CMake source directory.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_35\n\nLANGUAGE: cmake\nCODE:\n```\nSET(CMAKE_OLD_SOURCE_DIR ${CMAKE_SOURCE_DIR})\nSET(CMAKE_SOURCE_DIR ${OPENCV_SUBFOLDER})\nIF(MSVC)\n  set(ENABLE_SOLUTION_FOLDERS ON CACHE BOOL \"Solution folder in Visual Studio\")\nENDIF()\nADD_SUBDIRECTORY(${OPENCV_SUBFOLDER})\n\nSET(CMAKE_SOURCE_DIR ${CMAKE_OLD_SOURCE_DIR})\n```\n\n----------------------------------------\n\nTITLE: Linking Built PNG Library in CMake\nDESCRIPTION: Conditionally links the `libpng` library to `${the_target}`. This linking occurs only if PNG support is enabled (`WITH_PNG` is true) AND libpng was built from source as part of this project (`BUILD_PNG` is true).\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_119\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_PNG AND BUILD_PNG)\n  target_link_libraries(${the_target} libpng)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding CPUFeatures Include Directory for Android in CMake\nDESCRIPTION: Includes the directory specified by the CPUFEATURES_ROOT variable for Android builds. This is likely needed to access Android-specific CPU feature detection libraries.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/tesseract/libtesseract/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nIF(ANDROID)\n  include_directories(\"${CPUFEATURES_ROOT}\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Defining LogisticRegression Properties via Macro - C/C++\nDESCRIPTION: Lists the property schema for OpenCV's LogisticRegression class using CREATE_OCV_CLASS_PROPERTY. This enables Emgu CV codegen to produce managed property wrappers, covering learning rate, iterations, regularization, batch sizing, and termination criteria. Depends on the OpenCV ML module and inclusion of ml_c.h.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_34\n\nLANGUAGE: C/C++\nCODE:\n```\n#include \\\"ml_c.h\\\"\n```\n\n----------------------------------------\n\nTITLE: Conditionally Including Debian ARM Runtimes in CMake Build\nDESCRIPTION: Adds the subdirectories for EmguCV Debian ARM (arm and arm64) runtimes to the build, but only if the CMake variable `HAVE_LINUX_ARM` is set to true. This allows for conditional compilation based on the target platform or build environment configuration.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/platforms/nuget/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\n#IF (HAVE_LINUX_ARM)\nadd_subdirectory(\"Emgu.CV.runtime.debian-arm\")\nadd_subdirectory(\"Emgu.CV.runtime.debian-arm64\")\n#ENDIF()\n```\n\n----------------------------------------\n\nTITLE: Installing Emgu.CV CHM Documentation File in CMake\nDESCRIPTION: This CMake `INSTALL` command installs the generated CHM documentation file (`Emgu.CV.Documentation.chm`) from the build's Help directory into the root installation directory. This installation rule is associated with the `emgucv_document` component.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/miscellaneous/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nINSTALL(\n  FILES\n  \"${CMAKE_CURRENT_SOURCE_DIR}/../Help/Emgu.CV.Documentation.chm\"\n  DESTINATION ./\n  COMPONENT emgucv_document\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Runtime Output Directories in CMake\nDESCRIPTION: This CMake code configures the output directory for runtime artifacts (like executables and DLLs). It sets `CMAKE_RUNTIME_OUTPUT_DIRECTORY` to the value of `LIBRARY_OUTPUT_PATH` and ensures both release and debug configurations use the same path.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_47\n\nLANGUAGE: cmake\nCODE:\n```\nSET(CMAKE_RUNTIME_OUTPUT_DIRECTORY \"${LIBRARY_OUTPUT_PATH}\" )\nSET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE \"${CMAKE_RUNTIME_OUTPUT_DIRECTORY}\")\nSET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG \"${CMAKE_RUNTIME_OUTPUT_DIRECTORY}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Additional Target Output Properties\nDESCRIPTION: Sets several properties for the target: `DEBUG_POSTFIX` adds a suffix (defined by `OPENCV_DEBUG_POSTFIX`) to the output file name in debug builds. `ARCHIVE_OUTPUT_DIRECTORY` and `RUNTIME_OUTPUT_DIRECTORY` specify the output directories for static libraries/archives and runtime executables/DLLs, respectively, incorporating a potential subfolder defined by `UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER`.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/tests/cvextern_test/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\n# Additional target properties\nset_target_properties(${the_target} PROPERTIES\n\tDEBUG_POSTFIX \"${OPENCV_DEBUG_POSTFIX}\"\n\tARCHIVE_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/lib${UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER}\"\n\tRUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/bin${UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER}\"\n\t)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Defining and Building Emgu.CV.Bitmap C# Project\nDESCRIPTION: This CMake snippet checks if the core Emgu.CV target exists, if .NET is found, and if the target platform is neither Android nor Apple. If these conditions are met, it defines the Emgu.CV.Bitmap project, sets extra MSBuild flags (specifically '/p:Platform=\"AnyCPU\"' on Windows), and uses the custom `BUILD_DOTNET_PROJ` macro to compile the Emgu.CV.Bitmap.csproj file. This ensures the bitmap-related project is only built for relevant desktop platforms.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Bitmap/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nIF (TARGET Emgu.CV)\n  #MESSAGE(STATUS \"......................... ANDROID: ${ANDROID};APPLE: ${APPLE}\")\n  IF (DOTNET_FOUND AND (NOT ANDROID) AND (NOT APPLE))\n    #DO NOT build Emgu.CV.Bitmap for Android or APPLE\n    PROJECT(Emgu.CV.Bitmap)\n      SET(EXTRA_BUILD_FLAGS \"\")\n      IF(WIN32)\n        SET(EXTRA_BUILD_FLAGS \"/p:Platform=\\\"AnyCPU\\\"\")\n      ENDIF()\n\n    #BUILD_CSPROJ_IN_SOLUTION(${PROJECT_NAME} \"${CMAKE_CURRENT_SOURCE_DIR}/../../Solution/CrossPlatform/Emgu.CV.sln\" \"Emgu.CV.Bitmap\" \"${EXTRA_MSBUILD_FLAGS}\" ALL)\n    #IF (EMGU_SIGN_FOUND)\n    #  EMGU_SIGN_BINARY(${PROJECT_NAME} ${CMAKE_CURRENT_SOURCE_DIR}/../../libs/${PROJECT_NAME}.dll)\n    #ENDIF()\n\tBUILD_DOTNET_PROJ(${PROJECT_NAME} \"${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.Bitmap.csproj\" \"${EXTRA_BUILD_FLAGS}\" ALL)\n\n    # ... installation and dependency logic follows ...\n  ENDIF()\n  # ... installation logic follows ...\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Installing C# Source and Project Files with CMake\nDESCRIPTION: This CMake script uses the `INSTALL(DIRECTORY ...)` command to copy files from the current source directory (`${CMAKE_CURRENT_SOURCE_DIR}`) to the root installation destination (`.`). It specifically includes C# source (`.cs`), shared project (`.shproj`), project items (`.projitems`), C# project (`.csproj`), and resource (`.resx`) files, assigning them to the `emgucv_source` component. It explicitly excludes SVN metadata (`.svn`), build output (`obj`), CMake temporary files (`CMakeFiles`), and project-specific build directories (`${PROJECT_NAME}.dir`).\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.NativeImage/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# --------------------------------------------------------\n#  Copyright (C) 2004-2025 by EMGU Corporation. All rights reserved.\n# --------------------------------------------------------\n\nINSTALL(\n  DIRECTORY\n  ${CMAKE_CURRENT_SOURCE_DIR}\n  DESTINATION .\n    COMPONENT emgucv_source\n  FILES_MATCHING \n  PATTERN \"*.cs\"\n  PATTERN \"*.shproj\"\n  PATTERN \"*.projitems\"\n  PATTERN \"*.csproj\"\n  PATTERN \"*.resx\"\n  PATTERN \".svn\" EXCLUDE\n  PATTERN \"obj\" EXCLUDE\n  PATTERN \"CMakeFiles\" EXCLUDE\n  PATTERN \"${PROJECT_NAME}.dir\" EXCLUDE\n)\n```\n\n----------------------------------------\n\nTITLE: Setting OpenCV Library Name Prefix and Postfix in CMake\nDESCRIPTION: This snippet initializes the prefix and postfix for OpenCV library output names. The postfix includes version numbers (`MAJOR.MINOR.PATCH`) specifically for Apple platforms (macOS, iOS), while it remains empty for other operating systems. It also initializes an empty list `OPENCV_LIBRARY_OUTPUT_NAMES` to store the generated library names.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_86\n\nLANGUAGE: cmake\nCODE:\n```\nSET(OPENCV_LIBRARY_OUTPUT_NAME_PREFIX \"\")\nIF (APPLE)\n  SET(OPENCV_LIBRARY_OUTPUT_NAME_POSTFIX \".${OPENCV_VERSION_MAJOR}.${OPENCV_VERSION_MINOR}.${OPENCV_VERSION_PATCH}\")\nELSE()\n  SET(OPENCV_LIBRARY_OUTPUT_NAME_POSTFIX \"\")\nENDIF()\n\nSET(OPENCV_LIBRARY_OUTPUT_NAMES )\n```\n\n----------------------------------------\n\nTITLE: Defining MCC DetectorParameters Property Wrapper in CMake\nDESCRIPTION: Defines property wrappers for cv::mcc::DetectorParameters, mapping to Emgu.CV.Contrib via detailed data type, property, and documentation specifications in CMake. Used by Emgu.CV.Mcc to expose detection settings, relies on OpenCV mcc_c.h include. Ensures consistency in managed property signatures.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_27\n\nLANGUAGE: CMake\nCODE:\n```\nCREATE_OCV_CLASS_PROPERTY( \n    \"mcc/DetectorParameters_property\" \n    \"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV.Contrib/Mcc/DetectorParameters.g.cs\"\n    \"cv::mcc::DetectorParameters\" \n    \"DetectorParameters\" \n    \"adaptiveThreshWinSizeMin;adaptiveThreshWinSizeMax;adaptiveThreshWinSizeStep;adaptiveThreshConstant;minContoursAreaRate;minContoursArea;confidenceThreshold;minContourSolidity;findCandidatesApproxPolyDPEpsMultiplier;borderWidth;B0factor;maxError;minContourPointsAllowed;minContourLengthAllowed;minInterContourDistance;minInterCheckerDistance;minImageSize;minGroupSize\" \n    \"int;int;int;double;double;double;double;double;double;int;float;float;int;int;int;int;int;unsigned\" \n    \"element;element;element;element;element;element;element;element;element;element;element;element;element;element;element;element;element;element\"\n    \"AdaptiveThreshWinSizeMin;AdaptiveThreshWinSizeMax;AdaptiveThreshWinSizeStep;AdaptiveThreshConstant;MinContoursAreaRate;MinContoursArea;ConfidenceThreshold;MinContourSolidity;FindCandidatesApproxPolyDPEpsMultiplier;BorderWidth;B0factor;MaxError;MinContourPointsAllowed;MinContourLengthAllowed;MinInterContourDistance;MinInterCheckerDistance;MinImageSize;MinGroupSize\" \n    \"int;int;int;double;double;double;double;double;double;int;float;float;int;int;int;int;int;uint\"\n    \"AdaptiveThreshold minimum window size;\n    AdaptiveThreshold maximum window size;\n    AdaptiveThreshold window size step;\n    AdaptiveThreshold constant;\n    Minimum Contours Area Rate;\n    Minimum Contours Area;\n    Confidence Threshold;\n    Minimum Contour Solidity;\n    Find Candidates Approx Poly DP Eps Multiplier;\n    Border Width;\n    B0factor;\n    Max Error;\n    Minimum Contour Points Allowed;\n    Minimum Contour Length Allowed;\n    Minimum InterContour Distance;\n    Minimum InterChecker Distance;\n    Minimum Image Size;\n    Minimum Group Size\n    \"  # documentation\n    \"Emgu.CV.Mcc\"\n    \"MccInvoke\"\n    \"DetectorParameters\"\n\t\"\"\n    \"#include \\\"mcc_c.h\\\"\"\n\t\"\"\n\t\"\"\n\t${HAVE_opencv_mcc})\n```\n\n----------------------------------------\n\nTITLE: Installing the Target Executable\nDESCRIPTION: Defines installation rules for the `cvextern_test` target (`${the_target}`). It specifies that runtime artifacts (executables, DLLs) should be installed to the `bin` directory (potentially within a subfolder defined by `UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER`), and library/archive artifacts to the `lib` directory (also with the optional subfolder). These installations are associated with the `main` component.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/tests/cvextern_test/CMakeLists.txt#_snippet_24\n\nLANGUAGE: cmake\nCODE:\n```\nINSTALL(TARGETS ${the_target} \n    RUNTIME DESTINATION bin${UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER} COMPONENT main\n    LIBRARY DESTINATION lib${UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER} COMPONENT main\n    ARCHIVE DESTINATION lib${UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER} COMPONENT main)\n```\n\n----------------------------------------\n\nTITLE: Conditional CUDA Library Path Configuration for Windows\nDESCRIPTION: Checks if the build is on Windows (`WIN32`), CUDA is enabled (`WITH_CUDA`), and adds the appropriate CUDA library directory to the link path based on the target architecture (x64 or Win32). It uses the `CUDA_TOOLKIT_ROOT_DIR` variable.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/tests/cvextern_test/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n############################### GPU START ##############################\nIF(WIN32 AND WITH_CUDA)\n  IF(TARGET_ARCH_64)\n    LINK_DIRECTORIES(${CUDA_TOOLKIT_ROOT_DIR}/lib/x64)\n  ELSE()\n    LINK_DIRECTORIES(${CUDA_TOOLKIT_ROOT_DIR}/lib/Win32)\n  ENDIF()\nENDIF()\n############################### GPU END ################################\n```\n\n----------------------------------------\n\nTITLE: Installing GeoTIFF Header Files with CMake\nDESCRIPTION: Uses the CMake INSTALL command to copy header files listed in the GEOTIFF_LIB_HEADERS variable into the 'include' subdirectory relative to the CMAKE_INSTALL_PREFIX during installation. This makes the headers available for development purposes. A commented-out line shows an alternative destination using the GEOTIFF_INCLUDE_DIR variable.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/libgeotiff/libgeotiff-1.4.0/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n# Install header files for development distribution\n# INSTALL(FILES ${GEOTIFF_LIB_HEADERS} DESTINATION ${GEOTIFF_INCLUDE_DIR})\nINSTALL(FILES ${GEOTIFF_LIB_HEADERS} DESTINATION include)\n```\n\n----------------------------------------\n\nTITLE: Defining CCM ColorCorrectionModel Property Wrapper in CMake\nDESCRIPTION: Defines the property wrapper for cv::ccm::ColorCorrectionModel, auto-generating property exposures for use in Emgu.CV.Ccm. Specifies native-to-managed type conversions, detailed documentation, and requires color correction dependencies. Used for automated interop generation and requires ccm-related C++ includes.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_28\n\nLANGUAGE: CMake\nCODE:\n```\nCREATE_OCV_CLASS_PROPERTY( \n    \"mcc/ColorCorrectionModel_property\" \n    \"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV.Contrib/Mcc/ColorCorrectionModel.g.cs\"\n    \"cv::ccm::ColorCorrectionModel\" \n    \"ColorCorrectionModel\" \n    \"ColorSpace;CCM_TYPE;Loss;Distance;Linear;LinearGamma;LinearDegree;WeightCoeff;MaxCount\" \n    \"cv::ccm::COLOR_SPACE;cv::ccm::CCM_TYPE;double;cv::ccm::DISTANCE_TYPE;cv::ccm::LINEAR_TYPE;double;int;double;int\" \n    \"propW;propW;propR;propW;propW;propW;propW;propW;propW\"\n    \"ColorSpace;CcmType;Loss;DistanceType;LinearType;LinearGamma;LinearDegree;WeightCoeff;MaxCount\" \n    \"ColorCorrectionModel.ColorSpace;ColorCorrectionModel.CcmType;double;ColorCorrectionModel.DistanceType;ColorCorrectionModel.LinearType;double;int;double;int\"\n    \"Color space;\n     Ccm type;\n     Loss;\n     The type of color distance;\n     The method of linearization;\n     The gamma value of gamma correction;\n     The degree of linearization polynomial;\n     The exponent number of L* component of the reference color in CIE Lab color space;\n     Used in MinProblemSolver-DownhillSolver, terminal criteria to the algorithm\"\n    \"Emgu.CV.Ccm\"\n    \"CcmInvoke\"\n    \"ColorCorrectionModel\"\n\t\"\"\n    \"#include \\\"mcc_c.h\\\"\"\n\t\"\"\n\t\"\"\n\t${HAVE_opencv_mcc})\n```\n\n----------------------------------------\n\nTITLE: Installing GeoTIFF CSV Data Files with CMake\nDESCRIPTION: Uses the CMake INSTALL command to copy CSV data files listed in the GEOTIFF_CSV_DATA variable into the 'share/epsg_csv' subdirectory relative to the CMAKE_INSTALL_PREFIX during installation. A commented-out line shows an alternative destination using the GEOTIFF_DATA_DIR variable.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/libgeotiff/libgeotiff-1.4.0/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n# Install CSV data files\n# INSTALL(FILES ${GEOTIFF_CSV_DATA} DESTINATION ${GEOTIFF_DATA_DIR}/epsg_csv)\nINSTALL(FILES ${GEOTIFF_CSV_DATA} DESTINATION share/epsg_csv)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Output Name Property\nDESCRIPTION: Sets the `OUTPUT_NAME` property for the defined target (`the_target`). This ensures the output executable file is named `cvextern_test`, potentially overriding default naming conventions.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/tests/cvextern_test/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\n# For dynamic link numbering convenions\nset_target_properties(${the_target} PROPERTIES\n    OUTPUT_NAME \"${the_target}\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Adding Leptonica Subdirectory in CMake\nDESCRIPTION: Includes the CMakeLists.txt file located in the 'leptonica' subdirectory, processing it as part of the current build configuration. This command integrates the Leptonica library build process.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/tesseract/libtesseract/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n#leptionica\nADD_SUBDIRECTORY(leptonica)\n```\n\n----------------------------------------\n\nTITLE: Setting Solution Folder for Target in CMake\nDESCRIPTION: Conditionally sets the `FOLDER` property for the specified target (`${the_target}`) to `emgu`. This helps organize targets within IDEs like Visual Studio when solution folders are enabled via the `ENABLE_SOLUTION_FOLDERS` variable.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_103\n\nLANGUAGE: cmake\nCODE:\n```\nif(ENABLE_SOLUTION_FOLDERS)\n  set_target_properties(${the_target} PROPERTIES FOLDER \"emgu\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Intel C++ Compiler (ICC) Flags for Windows in CMake\nDESCRIPTION: This block checks if the build is on Windows (`WIN32`) and using the Intel C++ Compiler (`CV_ICC`). If true, it sets specific release optimization flags (`CV_ICC_ADDITIONAL_FLAGS_RELEASE`), replaces the default `/O2` flag in C and CXX release flags, modifies linker flags to ignore the default C runtime library (`libcmt`), and sets the Visual Studio platform toolset information.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nIF(WIN32 AND CV_ICC)\n  #  SET(CV_ICC_ADDITIONAL_FLAGS_RELEASE \"/O3 /QaxCORE-AVX2,AVX,SSE4.1,SSE3 /Qparallel /Qopt-report:1 /Qopt-report-phase:vec /Qopt-report-phase:par /Qopt-report-file:stderr /Qipo /Qunroll-aggressive\")\n  SET(CV_ICC_ADDITIONAL_FLAGS_RELEASE \"/O3 /QaxCORE-AVX2,AVX,SSE4.1,SSE3 /Qparallel /Qopt-report:1 /Qopt-report-phase:vec /Qopt-report-phase:par /Qipo /Qrestrict /Ot\")\n  STRING(REGEX REPLACE \"/O2\" ${CV_ICC_ADDITIONAL_FLAGS_RELEASE} CMAKE_C_FLAGS_RELEASE ${CMAKE_C_FLAGS_RELEASE})\n  STRING(REGEX REPLACE \"/O2\" ${CV_ICC_ADDITIONAL_FLAGS_RELEASE} CMAKE_CXX_FLAGS_RELEASE ${CMAKE_CXX_FLAGS_RELEASE})\n  SET(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} /NODEFAULTLIB:\\\"libcmt\\\"\")\n  SET(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} /NODEFAULTLIB:\\\"libcmt\\\"\")\n  set(EMGUCV_PLATFORM_TOOLSET \"Intel C++ Compiler 19.1\" CACHE STRING \"Platform toolset for Visual Studio\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring General CMake Build Settings\nDESCRIPTION: This section configures general CMake behavior. It enables colored output for Makefiles, marks the verbose Makefile option as advanced, adds a custom CMake module path, and includes the main libgeotiff directory for header searches.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/libgeotiff/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n# CMake settings\n\nSET(CMAKE_COLOR_MAKEFILE ON)\n\n# Allow advanced users to generate Makefiles printing detailed commands\nMARK_AS_ADVANCED(CMAKE_VERBOSE_MAKEFILE)\n\n# Path to additional CMake modules\nSET(CMAKE_MODULE_PATH ${LIBGEOTIFF_DIR}/../cmake ${CMAKE_MODULE_PATH})\n\nINCLUDE_DIRECTORIES(\"${LIBGEOTIFF_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Tesseract OCR Build Option in CMake\nDESCRIPTION: This CMake code sets a cache variable `EMGU_CV_WITH_TESSERACT` to control whether Tesseract OCR support should be built. It's set to ON by default.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_41\n\nLANGUAGE: cmake\nCODE:\n```\n#IF(NETFX_CORE)\n#  SET(EMGU_CV_WITH_TESSERACT OFF CACHE BOOL \"BUILD TESSERACT OCR\")\n#ELSE()\nSET(EMGU_CV_WITH_TESSERACT ON CACHE BOOL \"BUILD TESSERACT OCR\")\n#ENDIF()\n```\n\n----------------------------------------\n\nTITLE: Installing GeoTIFF Documentation Files with CMake\nDESCRIPTION: Uses the CMake INSTALL command to copy documentation files (AUTHORS, ChangeLog, COPYING, INSTALL, LICENSE, README, README_BIN, README.WIN) into the 'doc' subdirectory relative to the CMAKE_INSTALL_PREFIX during the installation phase. A commented-out line shows an alternative destination using the GEOTIFF_DATA_DIR variable.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/libgeotiff/libgeotiff-1.4.0/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n# Install doc files\nINSTALL(FILES\n    AUTHORS ChangeLog COPYING INSTALL LICENSE README README_BIN README.WIN\n    DESTINATION doc)\n#    DESTINATION ${GEOTIFF_DATA_DIR}/doc)\n```\n\n----------------------------------------\n\nTITLE: Configuring SSE Optimizations in CMake\nDESCRIPTION: Conditionally enables SSE (Streaming SIMD Extensions) optimizations. If `EMGU_ENABLE_SSE` is true, it adds the `__EMGU_ENABLE_SSE__` preprocessor definition. Additionally, if building with MSVC (Microsoft Visual C++), not using Intel C++ Compiler (ICC), and targeting a 32-bit architecture (`NOT TARGET_ARCH_64`), it adds the `/arch:SSE2` compiler flag to enable SSE2 instruction set optimizations.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_115\n\nLANGUAGE: cmake\nCODE:\n```\nIF(EMGU_ENABLE_SSE)\n  ADD_DEFINITIONS(-D__EMGU_ENABLE_SSE__)\n  IF(MSVC AND (NOT CV_ICC) AND (NOT TARGET_ARCH_64)) \n    SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /arch:SSE2\")        ## Optimization\n  ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building Emgu.CV.Test.Net Project in CMake\nDESCRIPTION: This CMake script configures the build for the `Emgu.CV.Test.Net` project. It only runs if the .NET SDK (`DOTNET_FOUND`) is found and the target platform is not iOS, Android, or NETFX_CORE (UWP/WinRT). It declares the project, sets extra build flags (`EXTRA_BUILD_FLAGS`) to specify the platform as 'AnyCPU', and uses a custom function `BUILD_DOTNET_PROJ` to compile the specified `.csproj` file. Dependencies are conditionally added on the `Emgu.CV`, `Emgu.CV.Bitmap`, and `Emgu.CV.Models` targets if they exist. Optionally, it places the project in an 'emgu' solution folder if the `ENABLE_SOLUTION_FOLDERS` variable is true.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Test/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# --------------------------------------------------------\n#  Copyright (C) 2004-2025 by EMGU Corporation. All rights reserved.\n# --------------------------------------------------------\n\nIF(DOTNET_FOUND AND (NOT (IOS OR ANDROID OR NETFX_CORE)))\n\n  PROJECT(Emgu.CV.Test.Net)\n\n    SET(EXTRA_BUILD_FLAGS \"/p:Platform=\\\"AnyCPU\\\"\")\n    \n    #IF (NOT (WIN32 OR APPLE))\n    #  #LINUX\n    #  SET(EXTRA_BUILD_FLAGS ${EXTRA_BUILD_FLAGS} \"/p:TargetFrameworks=\\\"netstandard2.0\\\"\")\n    #ENDIF()\n\n    BUILD_DOTNET_PROJ(${PROJECT_NAME} \"${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.Test.Net/Emgu.CV.Test.Net.csproj\" \"${EXTRA_BUILD_FLAGS}\" ALL)\n    #BUILD_CSPROJ_IN_SOLUTION(${PROJECT_NAME} \"${CMAKE_CURRENT_SOURCE_DIR}/../Solution/Windows.Desktop/Emgu.CV.Test.Net.sln\" \"Emgu.CV.Test.Netcore\" \"\" ALL)\n  \n  if(ENABLE_SOLUTION_FOLDERS)\n    set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER \"emgu\")\n  endif()\n  IF (TARGET Emgu.CV)\n    ADD_DEPENDENCIES(${PROJECT_NAME} Emgu.CV)\n  ENDIF()\n\n  IF (TARGET Emgu.CV.Bitmap)\n    ADD_DEPENDENCIES(${PROJECT_NAME} Emgu.CV.Bitmap)\n  ENDIF()\n  \n  IF (TARGET Emgu.CV.Models)\n    ADD_DEPENDENCIES(${PROJECT_NAME} Emgu.CV.Models)\n  ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Managing zlib Dependency in CMake\nDESCRIPTION: Configures the zlib dependency for `${the_target}` based on the platform. On Windows (WIN32), macOS (APPLE), .NET Core (NETFX_CORE), or Ubuntu (IS_UBUNTU), it forces building zlib from the source located in the `3rdparty` directory, adds `zlib` as a build dependency, sets include paths, and defines `ZLIB_LIBRARY`. On other platforms, it attempts to find an installed zlib using `FIND_PACKAGE`. If found, it logs a message. If not found, it falls back to building from source similarly to the other platforms. The determined include directory is added regardless of the method.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_105\n\nLANGUAGE: cmake\nCODE:\n```\nIF(WIN32 OR APPLE OR NETFX_CORE OR IS_UBUNTU)\n  #always build from source on windows / Mac\n  MESSAGE(STATUS \"Building zlib from source\")\n  ADD_DEPENDENCIES(${the_target} zlib)\n  SET(ZLIB_INCLUDE_DIR \"${OPENCV_SUBFOLDER}/3rdparty/zlib\")\n  SET(ZLIB_LIBRARY \"zlib\")\n  INCLUDE_DIRECTORIES(${ZLIB_INCLUDE_DIR})\nELSE()\n  FIND_PACKAGE(ZLIB)\n  IF(ZLIB_FOUND)\n    MESSAGE(STATUS \"CVEXTERN: ZLIB found.\")\n  ELSE()\n    MESSAGE(STATUS \"CVEXTERN: ZLIB not found, building from source\")\n    ADD_DEPENDENCIES(${the_target} zlib)\n    SET(ZLIB_INCLUDE_DIR \"${OPENCV_SUBFOLDER}/3rdparty/zlib\")\n    SET(ZLIB_LIBRARY \"zlib\")\n  ENDIF()\n  INCLUDE_DIRECTORIES(${ZLIB_INCLUDE_DIR})\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Setting Full GeoTIFF Installation Paths in CMake\nDESCRIPTION: Sets CMake variables (GEOTIFF_BIN_DIR, GEOTIFF_LIB_DIR, GEOTIFF_INCLUDE_DIR, GEOTIFF_DATA_DIR) to represent the full installation paths based on the previously defined subdirectory variables. These variables are likely used later in INSTALL commands.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/libgeotiff/libgeotiff-1.4.0/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n# Full paths for the installation\nSET(GEOTIFF_BIN_DIR ${GEOTIFF_BIN_SUBDIR})\nSET(GEOTIFF_LIB_DIR ${GEOTIFF_LIB_SUBDIR})\nSET(GEOTIFF_INCLUDE_DIR ${GEOTIFF_INCLUDE_SUBDIR})\nSET(GEOTIFF_DATA_DIR ${GEOTIFF_DATA_SUBDIR})\n```\n\n----------------------------------------\n\nTITLE: Configuring CPack Generator and Build Options - CMake\nDESCRIPTION: This snippet configures CPack packaging generators and various install/build flags for different platforms using CMake scripting language. It sets defaults and conditionally adjusts options for Android and Windows, manages additional subdirectories, handles build options for documentation and extra components, and specifies installation locations for FFMPEG libraries and other dependencies. Prerequisites include having CMake and platform-specific dependencies set up. Key parameters like CPACK_GENERATOR and build flags (e.g., EMGU_CV_DOCUMENTATION_BUILD, EMGU_CV_EXTRA_BUILD) control which components are built or packaged. The outputs are packaged Emgu CV archives and optionally signed assemblies, with installation behavior dependent on these flags. Limitations include hardcoded paths and dependency on other build system variables.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_92\n\nLANGUAGE: CMake\nCODE:\n```\n#  ENDIF()\\n#ENDIF()\\n\\nIF (ANDROID)\\n  SET(CPACK_GENERATOR ZIP)\\nELSEIF (WIN32)\\n  SET(CPACK_GENERATOR ZIP;7Z)\\n  \\n  #IF(NETFX_CORE)\\n  #  SET(CPACK_GENERATOR ZIP)\\n  #ELSE()  \\n  #  SET(CPACK_GENERATOR NSIS;ZIP)\\n  #ENDIF()\\n  \\n  SET(CPACK_ARCHIVE_COMPONENT_INSTALL ON) #enable components install for zip\\n  IF(CPACK_GENERATOR MATCHES \\\"ZIP\\\")\\n    SET(CPACK_COMPONENTS_ALL_IN_ONE_PACKAGE 1)\\n  ENDIF()\\n  SET(CPACK_NSIS_MODIFY_PATH OFF)\\n  SET(CPACK_NSIS_INSTALL_ROOT \\\"C:\\\\\\\\Emgu\\\")\\n  \\n  #IF(NOT NETFX_CORE)\\n  #  ADD_SUBDIRECTORY(Emgu.CV.DebuggerVisualizers)\\n  #ENDIF()\\n  \\n  IF(NOT NETFX_CORE)\\n\\tADD_SUBDIRECTORY(DebuggerVisualizer)\\n  ENDIF()\\n\\n  if(WITH_FFMPEG)\\n    INSTALL(\\n\\tFILES\\n\\t\\\"${UNMANAGED_LIBRARY_OUTPUT_PATH}/${OPENCV_FFMPEG_OUTPUT_NAME}.dll\\\"\\n\\tDESTINATION \\\"libs/${UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER}/\\\"\\n\\tCOMPONENT libs\\n\\t)\\n  endif()\\n  \\n  # ----------------------------------------------------------------------------\\n  #  Build the documents of Emgu CV\\n  # ----------------------------------------------------------------------------\\n  SET(EMGU_CV_DOCUMENTATION_BUILD OFF CACHE BOOL \\\"Build Emgu CV Documentation\\\")\\n  IF(EMGU_CV_DOCUMENTATION_BUILD)\\n    ADD_SUBDIRECTORY(miscellaneous)\\n  ENDIF()\\n\\n  # ----------------------------------------------------------------------------\\n  #  Set if we should sign the managed assembly\\n  # ----------------------------------------------------------------------------  \\n  IF (WIN32)\\n\\tSET(EMGU_SIGN_ASSEMBLY OFF CACHE BOOL \\\"If enabled, we will sign the managed assembly\\\")\\n  ELSE()\\n\\tSET(EMGU_SIGN_ASSEMBLY ON CACHE BOOL \\\"If enabled, we will sign the managed assembly\\\")\\n  ENDIF()\\n  \\n  # ----------------------------------------------------------------------------\\n  #  Build the extra components of Emgu CV\\n  # ----------------------------------------------------------------------------\\n  SET(EMGU_CV_EXTRA_BUILD OFF CACHE BOOL \\\"Build Emgu CV Extra\\\")\\n  IF(EMGU_CV_EXTRA_BUILD)\\n    ADD_SUBDIRECTORY(Emgu.RPC)\\n  ENDIF()\\n  \\n#  # ----------------------------------------------------------------------------\\n#  #  The source files\\n#  # ----------------------------------------------------------------------------\\n#  INSTALL(\\n#    DIRECTORY\\n#    ${CMAKE_CURRENT_SOURCE_DIR}/lib\\n#    DESTINATION .\\n#    COMPONENT emgucv_source\\n#    FILES_MATCHING \\n#    PATTERN \\\"*.dll\\\"\\n#    PATTERN \\\"*.txt\\\"\\n#    PATTERN \\\"*.xml\\\"\\n#    PATTERN \\\",git\\\" EXCLUDE\\n#    PATTERN \\\"obj\\\" EXCLUDE\\n#    PATTERN \\\"CMake*\\\" EXCLUDE\\n#    PATTERN \\\"Release\\\" EXCLUDE\\n#    PATTERN \\\"${PROJECT_NAME}.dir\\\" EXCLUDE\\n\n```\n\n----------------------------------------\n\nTITLE: Generating C# Vector Wrapper for CameraParams in CMake\nDESCRIPTION: This snippet utilizes the `CREATE_VECTOR_CS` CMake macro to generate C# wrapper code for a vector of `cv::detail::CameraParams`. It specifies the C++ type, the corresponding C# wrapper type (`Emgu.CV.Stitching.CameraParams`), output directory, namespace, and required include file. Generation is conditional based on the `HAVE_OPENCV_STITCHING` definition.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_51\n\nLANGUAGE: cmake\nCODE:\n```\nCREATE_VECTOR_CS(\n    \"CameraParams\" \n    \"cv::detail::CameraParams\" \n    \"Emgu.CV.Stitching.CameraParams\" \n    \"object_not_array\" \n    \"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV/Util\" \n    Emgu.CV.Stitching \n    \"\" \n    \"#include \\\"stitching_c.h\\\"\" \n    \"\" \n    \"defined(HAVE_OPENCV_STITCHING)\")\n```\n\n----------------------------------------\n\nTITLE: Defining Core libgeotiff Source Files in CMake\nDESCRIPTION: Sets the CMake variable `GEOTIFF_LIB_SOURCES` to a list of C source files that constitute the core implementation of the libgeotiff library. These files are referenced relative to the directory specified by the `${LIBGEOTIFF_DIR}` variable.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/libgeotiff/CMakeLists.txt#_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\nSET(GEOTIFF_LIB_SOURCES\n    \"${LIBGEOTIFF_DIR}/cpl_serv.c\"\n    \"${LIBGEOTIFF_DIR}/cpl_csv.c\"\n    \"${LIBGEOTIFF_DIR}/geo_extra.c\"\n    \"${LIBGEOTIFF_DIR}/geo_free.c\"\n    \"${LIBGEOTIFF_DIR}/geo_get.c\"\n    \"${LIBGEOTIFF_DIR}/geo_names.c\"\n    \"${LIBGEOTIFF_DIR}/geo_new.c\"\n    \"${LIBGEOTIFF_DIR}/geo_normalize.c\"\n    \"${LIBGEOTIFF_DIR}/geo_print.c\"\n    \"${LIBGEOTIFF_DIR}/geo_set.c\"\n    \"${LIBGEOTIFF_DIR}/geo_simpletags.c\"\n    \"${LIBGEOTIFF_DIR}/geo_tiffp.c\"\n    \"${LIBGEOTIFF_DIR}/geo_trans.c\"\n    \"${LIBGEOTIFF_DIR}/geo_write.c\"\n    \"${LIBGEOTIFF_DIR}/geotiff_proj4.c\")\n```\n\n----------------------------------------\n\nTITLE: Creating TonemapDrago Class Properties for OpenCV Photo Emgu.CV Bindings - CMake\nDESCRIPTION: Uses CREATE_OCV_CLASS_PROPERTY to generate C# properties 'Saturation' and 'Bias' for the Emgu.CV TonemapDrago class, including documentation on valid value ranges and their effects on tone mapping. The snippet depends on 'photo_c.h' and conditional compilation of the photo module.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_45\n\nLANGUAGE: CMake\nCODE:\n```\nCREATE_OCV_CLASS_PROPERTY( \n  \"photo/TonemapDrago_property\" \n  \"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV/Photo/TonemapDrago.g.cs\"\n  \"cv::TonemapDrago\" \n  \"TonemapDrago\" \n  \"Saturation;Bias\" \n  \"float;float\" \n  \"prop;prop\"\n  \"Saturation;Bias\" \n  \"float;float\"\n  \"Positive saturation enhancement value. 1.0 preserves saturation, values greater than 1 increase saturation and values less than 1 decrease it.;\nValue for bias function in [0, 1] range. Values from 0.7 to 0.9 usually give best results, default value is 0.85.\"\n  \"Emgu.CV\"\n  \"CvInvoke\"\n  \"TonemapDrago\"\n  \"\"\n  \"#include \\\"photo_c.h\\\"\"\n  \"\"\n  \"\"\n  ${HAVE_opencv_photo})\n```\n\n----------------------------------------\n\nTITLE: Generating Property Wrappers for OpenCV xphoto Module - CMake\nDESCRIPTION: This snippet detects if the OpenCV xphoto module is available, then generates .NET property wrapper classes for several cv::xphoto::* classes using the CREATE_OCV_CLASS_PROPERTY macro. Properties and their types, mapping, and comments are provided to generate corresponding C# partial classes for accessing OpenCV parameters in Emgu.CV.XPhoto. Requires HAVE_opencv_xphoto to be enabled and includes the header xphoto_c.h for native interop.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_64\n\nLANGUAGE: CMake\nCODE:\n```\n############################### xphoto code gen START ##############################\\nIF (NOT HAVE_opencv_xphoto)\\n  SET(HAVE_opencv_xphoto FALSE)\\nENDIF()\\n  CREATE_OCV_CLASS_PROPERTY( \\n    \\\"xphoto/simplewb_property\\\" \\n    \\\"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV.Contrib/XPhoto/SimpleWB.g.cs\\\"\\n    \\\"cv::xphoto::SimpleWB\\\" \\n    \\\"SimpleWB\\\" \\n    \\\"InputMin;InputMax;OutputMin;OutputMax;P\\\" \\n    \\\"float;float;float;float;float\\\" \\n    \\\"prop;prop;prop;prop;prop\\\"\\n    \\\"InputMin;InputMax;OutputMin;OutputMax;P\\\" \\n    \\\"float;float;float;float;float\\\"\\n    \\\"Input image range minimum value;\\n\\tInput image range maximum value;\\n\\tOutput image range minimum value;\\n\\tOutput image range maximum value;\\n\\tPercent of top/bottom values to ignore\\\"\\n    \\\"Emgu.CV.XPhoto\\\"\\n    \\\"XPhotoInvoke\\\"\\n    \\\"SimpleWB\\\"\\n\\t\\\"\\\"\\n    \\\"#include \\\\\\\"xphoto_c.h\\\\\\\"\\\"\\n\\t\\\"\\\"\\n\\t\\\"\\\"\\n\\t${HAVE_opencv_xphoto})\\n\\t\\n  CREATE_OCV_CLASS_PROPERTY( \\n    \\\"xphoto/grayworldwb_property\\\" \\n    \\\"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV.Contrib/XPhoto/GrayworldWB.g.cs\\\"\\n    \\\"cv::xphoto::GrayworldWB\\\" \\n    \\\"GrayworldWB\\\" \\n    \\\"SaturationThreshold\\\" \\n    \\\"float\\\" \\n    \\\"prop\\\"\\n    \\\"SaturationThreshold\\\" \\n    \\\"float\\\"\\n    \\\"Maximum saturation for a pixel to be included in the gray-world assumption\\\"\\n    \\\"Emgu.CV.XPhoto\\\"\\n    \\\"XPhotoInvoke\\\"\\n    \\\"GrayworldWB\\\"\\n\\t\\\"\\\"\\n    \\\"#include \\\\\\\"xphoto_c.h\\\\\\\"\\\"\\n\\t\\\"\\\"\\n\\t\\\"\\\"\\n\\t${HAVE_opencv_xphoto})\\n\\n\\tCREATE_OCV_CLASS_PROPERTY( \\n    \\\"xphoto/learningbasedwb_property\\\" \\n    \\\"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV.Contrib/XPhoto/LearningBasedWB.g.cs\\\"\\n    \\\"cv::xphoto::LearningBasedWB\\\" \\n    \\\"LearningBasedWB\\\" \\n    \\\"RangeMaxVal;SaturationThreshold;HistBinNum\\\" \\n    \\\"int;float;int\\\" \\n    \\\"prop;prop;prop\\\"\\n    \\\"RangeMaxVal;SaturationThreshold;HistBinNum\\\" \\n    \\\"int;float;int\\\"\\n    \\\"Maximum possible value of the input image (e.g. 255 for 8 bit images, 4095 for 12 bit images);\\n\\tThreshold that is used to determine saturated pixels, i.e. pixels where at least one of the channels exceeds saturation_threshold x range_max_val are ignored.;\\n\\tDefines the size of one dimension of a three-dimensional RGB histogram that is used internally by the algorithm. It often makes sense to increase the number of bins for images with higher bit depth (e.g. 256 bins for a 12 bit image).\\n\\t\\\"\\n    \\\"Emgu.CV.XPhoto\\\"\\n    \\\"XPhotoInvoke\\\"\\n    \\\"LearningBasedWB\\\"\\n\\t\\\"\\\"\\n    \\\"#include \\\\\\\"xphoto_c.h\\\\\\\"\\\"\\n\\t\\\"\\\"\\n\\t\\\"\\\"\\n\\t${HAVE_opencv_xphoto})\\n\\n  CREATE_OCV_CLASS_PROPERTY( \\n    \\\"xphoto/TonemapDurand_property\\\" \\n    \\\"${CMAKE_CURRENT_SOURCE_DIR}/../Emgu.CV.Contrib/XPhoto/TonemapDurand.g.cs\\\"\\n    \\\"cv::xphoto::TonemapDurand\\\" \\n    \\\"TonemapDurand\\\" \\n    \\\"Saturation;Contrast;SigmaSpace;SigmaColor\\\" \\n    \\\"float;float;float;float\\\" \\n    \\\"prop;prop;prop;prop\\\"\\n    \\\"Saturation;Contrast;SigmaSpace;SigmaColor\\\" \\n    \\\"float;float;float;float\\\"\\n    \\\"Positive saturation enhancement value. 1.0 preserves saturation, values greater than 1 increase saturation and values less than 1 decrease it.;\\n\\tResulting contrast on logarithmic scale, i. e. log(max / min), where max and min are maximum and minimum luminance values of the resulting image.;\\n\\tBilateral filter sigma in color space;\\n\\tbilateral filter sigma in coordinate space\\\"\\n    \\\"Emgu.CV.XPhoto\\\"\\n    \\\"XPhotoInvoke\\\"\\n    \\\"TonemapDurand\\\"\\n\\t\\\"\\\"\\n    \\\"#include \\\\\\\"xphoto_c.h\\\\\\\"\\\"\\n\\t\\\"\\\"\\n\\t\\\"\\\"\\n\\t${HAVE_opencv_xphoto})\\n\\n############################### xphoto code gen END ##############################\n```\n\n----------------------------------------\n\nTITLE: Defining SVMSGD Properties via Macro - C/C++\nDESCRIPTION: Defines the mapping of SVMSGD (Stochastic Gradient Descent SVM) class properties from OpenCV for the Emgu CV .NET API using the CREATE_OCV_CLASS_PROPERTY macro. Lists each property name, type, and documentation, enabling managed code property accessors to be autogenerated. Requires that the OpenCV ML module is available and includes the ml_c.h header.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_31\n\nLANGUAGE: C/C++\nCODE:\n```\n#include \\\"ml_c.h\\\"\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenCV Module Directory Structure and File Discovery - CMake\nDESCRIPTION: These commands set up key OpenCV source and build directories, register include paths, and enumerate all project-local C++ source and header files. They create an organizational foundation for subsequent code generation, macro inclusion, and dually categorized source grouping. These infrastructure definitions are crucial for downstream targets and platform compatibility.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_71\n\nLANGUAGE: CMake\nCODE:\n```\nSET(OPENCV_MODULES_DIR \"${OPENCV_SUBFOLDER}/modules\")\n```\n\nLANGUAGE: CMake\nCODE:\n```\nINCLUDE_DIRECTORIES(\"${CMAKE_BINARY_DIR}\")\nINCLUDE_DIRECTORIES(\"${PROJECT_SOURCE_DIR}\")\n```\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB extern_srcs \"${PROJECT_SOURCE_DIR}/*.cpp\")\nfile(GLOB extern_hdrs \"${PROJECT_SOURCE_DIR}/*.h*\")\nsource_group(\"Src_extern\" FILES ${extern_srcs})\nsource_group(\"Include_extern\" FILES ${extern_hdrs})\n```\n\n----------------------------------------\n\nTITLE: Copying and Installing Unmanaged Library Files - CMake\nDESCRIPTION: This snippet defines a custom post-build command using CMake to copy library files and an INSTALL command to place dependency DLLs into a specific runtime folder for OSX. It depends on prior definition of variables like UNMANAGED_LIBRARY_OUTPUT_PATH and CVEXTERN_DEPENDENCY_DLL_NAME. Key parameters specify the source and destination paths for copying and installation, and the logic is conditioned based on the build target and operating system. The outputs are library or DLL files placed in the desired runtime locations. Limitations include reliance on CMake variable definitions and intended usage only within a specific build context.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_129\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_command(TARGET ${the_target}\n\tPOST_BUILD\n\tCOMMAND cp -f ${UNMANAGED_LIBRARY_OUTPUT_PATH}/${CVEXTERN_DEPENDENCY_DLL_NAME}${CVEXTERN_DEPENDENCY_DLL_EXT} ${UNMANAGED_LIBRARY_OUTPUT_PATH}/../${CVEXTERN_DEPENDENCY_DLL_NAME}${CVEXTERN_DEPENDENCY_DLL_EXT}\n\tCOMMENT \"Copying file to ${UNMANAGED_LIBRARY_OUTPUT_PATH}/../${CVEXTERN_DEPENDENCY_DLL_NAME}${CVEXTERN_DEPENDENCY_DLL_EXT}\")\n\nINSTALL(FILES\n  ${UNMANAGED_LIBRARY_OUTPUT_PATH}/../${CVEXTERN_DEPENDENCY_DLL}\n  DESTINATION \"libs/runtimes/osx/native/\"\n  COMPONENT emgucv_binary)\n```\n\n----------------------------------------\n\nTITLE: Setting C# MarshalAs Attributes for Boolean Properties in CMake\nDESCRIPTION: Initializes `MARSHAL_IN` and `MARSHAL_RETURN` variables to empty strings. It then checks if the C# property type (`CS_PROPERTY_TYPE`) is 'bool'. If it is, it sets `MARSHAL_IN` and `MARSHAL_RETURN` to appropriate `[MarshalAs(CvInvoke.BoolMarshalType)]` attribute strings, which will be used later when generating C# P/Invoke declarations.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n    SET(MARSHAL_IN \"\")\n    SET(MARSHAL_RETURN \"\")\n    IF(\"${CS_PROPERTY_TYPE}\" STREQUAL \"bool\")\n      SET(MARSHAL_IN \"\n        [MarshalAs(CvInvoke.BoolMarshalType)]\")\n      SET(MARSHAL_RETURN \"\n     [return: MarshalAs(CvInvoke.BoolMarshalType)]\")\n    ENDIF()\n```\n\n----------------------------------------\n\nTITLE: Setting Default Value for HAVE_opencv_video in CMake\nDESCRIPTION: This CMake snippet checks if the `HAVE_opencv_video` variable is defined. If it's not defined, it sets the variable to `FALSE`. This ensures the variable has a boolean value for controlling conditional logic related to the OpenCV video module.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_52\n\nLANGUAGE: cmake\nCODE:\n```\nIF (NOT HAVE_opencv_video)\n  SET(HAVE_opencv_video FALSE)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Handling Optional JPEG Dependency in CMake\nDESCRIPTION: This snippet manages the optional JPEG dependency. It uses `FIND_PACKAGE(JPEG)` to locate the library. If not found, it sets `JPEG_INCLUDE_DIR` to a hardcoded relative path, likely pointing to a JPEG library within an OpenCV source tree. It then unconditionally sets `HAVE_JPEG=1`, includes the JPEG include directory, and adds the `HAVE_JPEG=1` preprocessor definition.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/libgeotiff/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\n# JPEG support - optional, default=OFF\nFIND_PACKAGE(JPEG)\nIF(NOT JPEG_FOUND)\n  SET(JPEG_INCLUDE_DIR \"${LIBGEOTIFF_DIR}/../../opencv/3rdparty/include\")\nENDIF()\nSET(HAVE_JPEG 1)\nINCLUDE_DIRECTORIES(${JPEG_INCLUDE_DIR})\nADD_DEFINITIONS(-DHAVE_JPEG=${HAVE_JPEG})\n```\n\n----------------------------------------\n\nTITLE: Conditional Linking of JPEG Library\nDESCRIPTION: Checks if JPEG support is enabled (`WITH_JPEG`) and if the JPEG library is being built as part of this project (`BUILD_JPEG`). If both conditions are true, it links the `cvextern_test` target against the `libjpeg-turbo` library.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/tests/cvextern_test/CMakeLists.txt#_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_JPEG AND BUILD_JPEG)\n  target_link_libraries(${the_target} libjpeg-turbo)\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Enabling C++/CX Extensions for .NET Core on Windows in CMake\nDESCRIPTION: Conditionally adds the `/ZW` compiler flag when building for .NET Core (`NETFX_CORE`). This flag enables C++/CX language extensions, typically used for Windows Runtime components. It's applied only if the target Windows system version (`CMAKE_SYSTEM_VERSION`) is 10.0 or 8.1.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_118\n\nLANGUAGE: cmake\nCODE:\n```\nif(NETFX_CORE)\n  if((CMAKE_SYSTEM_VERSION MATCHES 10.0) OR (CMAKE_SYSTEM_VERSION MATCHES 8.1))\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /ZW\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Linking Core and Optional External Libraries\nDESCRIPTION: Links the `cvextern_test` target against essential libraries defined in the `OPENCV_LINKER_LIBS` variable. Commented-out lines suggest potential linking against `cvextern`, specific OpenCV modules (core, calib3d, etc.), ZLIB, TIFF, and GEOTIFF, which might be handled differently or conditionally elsewhere.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/tests/cvextern_test/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\n# Add the required libraries for linking:\ntarget_link_libraries(${the_target} ${OPENCV_LINKER_LIBS} \n  #cvextern \n  #opencv_core opencv_calib3d opencv_features2d opencv_highgui opencv_imgproc opencv_ml opencv_objdetect \n#  ${ZLIB_LIBRARY} \n#  ${TIFF_LIBRARY} \n#  ${GEOTIFF_LIBRARY}\n)\n```\n\n----------------------------------------\n\nTITLE: Registering a Test Target with CMake in CMake Language\nDESCRIPTION: Registers a test named 'OPENCL_ICD_LOADER_TEST' that will execute the binary located at '${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/icd_loader_test' using CMake's add_test command. This is used to integrate automated testing within the CMake build process. The test depends on correct configuration of CMAKE_RUNTIME_OUTPUT_DIRECTORY and requires that the 'icd_loader_test' binary be built beforehand.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/3rdParty/opencl-icd-1.2.11.0/icd/test/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test (OPENCL_ICD_LOADER_TEST ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/icd_loader_test)\n```\n\n----------------------------------------\n\nTITLE: Adding Windows ARM64 MSVCRT NuGet Dependency with CMake\nDESCRIPTION: Conditionally appends a NuGet dependency entry for the ARM64 Microsoft Visual C++ Redistributable (MSVCRT) to the `EMGUCV_WINDOWS_NUGET_DEPENDENCY` variable. This action is triggered if the `HAVE_WINDESKTOP_ARM64` variable is true, indicating that the build targets the Windows ARM64 platform. The CMake variables `${EMGU_WINDOWS_MSVCRT_ARM64_NUGET_ID}` and `${EMGU_WINDOWS_MSVCRT_VERSION}` provide the required NuGet package ID and version.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_80\n\nLANGUAGE: cmake\nCODE:\n```\nIF(HAVE_WINDESKTOP_ARM64)\n  SET(EMGUCV_WINDOWS_NUGET_DEPENDENCY \"${EMGUCV_WINDOWS_NUGET_DEPENDENCY}\n\t  <dependency id=\\\"${EMGU_WINDOWS_MSVCRT_ARM64_NUGET_ID}\\\" version=\\\"${EMGU_WINDOWS_MSVCRT_VERSION}\\\" />\n\t  \")\t\t\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Running ICD Tests on Windows using ctest (Batch)\nDESCRIPTION: Executes the ICD tests on Windows using the `ctest.exe` command-line tool, which is part of CMake. Requires changing the current directory to the `build` directory first. Assumes the project has been built and the test environment, including the driver stub ICD registry entry, is configured.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/3rdParty/opencl-icd-1.2.11.0/icd/README.txt#_snippet_5\n\nLANGUAGE: batch\nCODE:\n```\ncd build\nctest.exe\n```\n\n----------------------------------------\n\nTITLE: Configuring Inference Engine Dependencies in CMake (Windows - Legacy)\nDESCRIPTION: This snippet configures dependencies for the Intel Inference Engine (IE) on Windows (WIN32) when IE support is enabled via WITH_INF_ENGINE (potentially as an alternative or fallback to WITH_OPENVINO). It determines the IE base directory relative to InferenceEngine_DIR, sets the link directory for intel64 libraries, identifies the directory containing IE DLLs and related files (.xml, .mvcmd, .json, .elf) within the Release build, and uses FILE(GLOB) to find these files, presumably intending to add them to a dependency list (though the LIST(APPEND ...) command is missing or commented out).\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_90\n\nLANGUAGE: cmake\nCODE:\n```\nELSEIF(WITH_INF_ENGINE)\n  IF(WIN32)\n\t#SET(INF_ENGINE_LIB_DIRS )\n\t#link_directories(\"${INF_ENGINE_LIB_DIRS}/Release\")\n    SET(INF_ENGINE_BASE_DIR \"${InferenceEngine_DIR}/../../../inference_engine\")\n    #MESSAGE(STATUS \"^^^^^^^^^^^^^^^^^ IE_INCLUDE_DIR: ${IE_INCLUDE_DIR}\")\n\tlink_directories(\"${INF_ENGINE_BASE_DIR}/lib/intel64/\")\n\t\n\t#SET(INF_ENGINE_DLL_DIRS \"${IE_INCLUDE_DIR}/../../../bin/intel64/Release\")\n    SET(INF_ENGINE_DLL_DIRS \"${INF_ENGINE_BASE_DIR}/bin/intel64/Release\")\n\tFILE(GLOB INF_DLL_NAMES \"${INF_ENGINE_DLL_DIRS}/*.dll\" \"${INF_ENGINE_DLL_DIRS}/*.xml\" \"${INF_ENGINE_DLL_DIRS}/*.mvcmd\" \"${INF_ENGINE_DLL_DIRS}/*.json\" \"${INF_ENGINE_DLL_DIRS}/*.elf\")\n```\n\n----------------------------------------\n\nTITLE: Adding Windows x64 MSVCRT NuGet Dependency with CMake\nDESCRIPTION: Conditionally appends a NuGet dependency entry for the x64 Microsoft Visual C++ Redistributable (MSVCRT) to the `EMGUCV_WINDOWS_NUGET_DEPENDENCY` variable. This occurs only if the `HAVE_WINDESKTOP_X64` variable is true, signifying a Windows x64 build target. The NuGet package ID and version are specified by the CMake variables `${EMGU_WINDOWS_MSVCRT_X64_NUGET_ID}` and `${EMGU_WINDOWS_MSVCRT_VERSION}`.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_79\n\nLANGUAGE: cmake\nCODE:\n```\nIF(HAVE_WINDESKTOP_X64)\n  SET(EMGUCV_WINDOWS_NUGET_DEPENDENCY \"${EMGUCV_WINDOWS_NUGET_DEPENDENCY}\n\t  <dependency id=\\\"${EMGU_WINDOWS_MSVCRT_X64_NUGET_ID}\\\" version=\\\"${EMGU_WINDOWS_MSVCRT_VERSION}\\\" />\n\t  \")\t\t\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Grouping and Appending DepthAI Sources and Headers - CMake\nDESCRIPTION: This section recursively collects all .cpp and .h* files from the depthai directory, groups them for project organization, and appends them to external source and header lists. Used for managing build file inclusions and keeping project structure organized within IDEs or build systems. It does not depend on external packages but assumes PROJECT_SOURCE_DIR is defined.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_75\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB_RECURSE depthai_srcs \"${PROJECT_SOURCE_DIR}/depthai/*.cpp\")\nfile(GLOB_RECURSE depthai_hdrs \"${PROJECT_SOURCE_DIR}/depthai/*.h*\")\n#message(STATUS \">>>>>>>>>>>>>>>>>>>>>>>>>>>>>  depthai_srcs: ${depthai_srcs}\")\n#message(STATUS \">>>>>>>>>>>>>>>>>>>>>>>>>>>>>  depthai_hdrs: ${depthai_hdrs}\")\nsource_group(\"Src_depthai\" FILES ${depthai_srcs})\nsource_group(\"Include_depthai\" FILES ${depthai_hdrs})\nLIST(APPEND extern_srcs ${depthai_srcs})\nLIST(APPEND extern_hdrs ${depthai_hdrs})\n```\n\n----------------------------------------\n\nTITLE: Setting Output Suffix for Emscripten Builds\nDESCRIPTION: Checks if the target system is Emscripten (`CMAKE_SYSTEM_NAME` is \"Emscripten\"). If true, it sets the `SUFFIX` property of the target to `.html`, indicating the expected output format for Emscripten executables.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/tests/cvextern_test/CMakeLists.txt#_snippet_22\n\nLANGUAGE: cmake\nCODE:\n```\nIF(\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"Emscripten\")\n  set_target_properties(${the_target} PROPERTIES SUFFIX \".html\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Including libxtiff Directory in CMake\nDESCRIPTION: This command adds the 'libxtiff' subdirectory within the main libgeotiff source directory to the list of include paths for the compiler.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/libgeotiff/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nINCLUDE_DIRECTORIES(\"${LIBGEOTIFF_DIR}/libxtiff\")\n```\n\n----------------------------------------\n\nTITLE: Conditionally Building GeoTIFF Utilities in CMake\nDESCRIPTION: Checks if the CMake option WITH_UTILITIES is enabled. If true, it adds the 'bin' subdirectory to the build process using ADD_SUBDIRECTORY. This implies the 'bin' directory contains the CMake configuration for building GeoTIFF utility programs.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/libgeotiff/libgeotiff-1.4.0/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\n###############################################################################\n# Build GeoTIFF utilities\n\nIF(WITH_UTILITIES)\n    ADD_SUBDIRECTORY(bin)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Generating CommonAssemblyInfo.cs using CMake\nDESCRIPTION: This CMake snippet includes a custom module `Today.cmake`, calls its `TODAY()` function (which likely sets the `CURRENT_YEAR` variable), and then uses `CONFIGURE_FILE` to generate `CommonAssemblyInfo.cs` from the template file `cmake/CommonAssemblyInfo.cs.in`. This process substitutes variables like `${CURRENT_YEAR}` in the template.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_49\n\nLANGUAGE: cmake\nCODE:\n```\nINCLUDE(Today)\nTODAY() #set the variable CURRENT_YEAR\n\nCONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/CommonAssemblyInfo.cs.in ${CMAKE_CURRENT_SOURCE_DIR}/CommonAssemblyInfo.cs)\n```\n\n----------------------------------------\n\nTITLE: Defining Build Output Directories and OpenCL Optional Target - CMake\nDESCRIPTION: This block configures the runtime output directories for binaries and libraries, and optionally adds OpenCL build steps if enabled. It sets output path variables for both debug and release configurations, and conditionally (if WIN32 and WITH_OPENCL are set) includes OpenCL source directories and sets up output file properties. This supports modular, feature-driven builds but requires the presence of appropriately named subdirectories and source files. The expected outcome is correct binary placement and possible OpenCL integration as a build-time dependency.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_34\n\nLANGUAGE: CMake\nCODE:\n```\nSET(CMAKE_RUNTIME_OUTPUT_DIRECTORY \"${UNMANAGED_LIBRARY_OUTPUT_PATH}\" )\nSET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE \"${CMAKE_RUNTIME_OUTPUT_DIRECTORY}\")\nSET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG \"${CMAKE_RUNTIME_OUTPUT_DIRECTORY}\")\n\n#SET(CMAKE_ARCHIEVE_OUTPUT_DIRECTORY \"${CMAKE_RUNTIME_OUTPUT_DIRECTORY}\")\n#SET(CMAKE_ARCHIEVE_OUTPUT_DIRECTORY_DEBUG \"${CMAKE_ARCHIEVE_OUTPUT_DIRECTORY}\")\n#SET(CMAKE_ARCHIEVE_OUTPUT_DIRECTORY_RELEASE \"${CMAKE_ARCHIEVE_OUTPUT_DIRECTORY}\")\n\n#SET(CMAKE_INSTALL_PREFIX_COPY ${CMAKE_INSTALL_PREFIX})\n#SET(CMAKE_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX}${UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER})\n#SET(CPACK_PACKAGING_INSTALL_PREFIX ${UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER})\n#SET(DESTDIR ${UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER})\n#SET(CPACK_OUTPUT_FILE_PREFIX \"x64\")\n\nSET(ENTRYPOINT_CS_STRING \"\")\nSET(ENTRYPOINT_MODULES_STRING \"\")\n\n#Add opencl\n#IF(WIN32 AND (NOT NETFX_CORE) )\n#  IF(WITH_OPENCL)\n#    MESSAGE(STATUS \"Open CL build included\")\n#   SET(OPENCL_SOURCE_FOLDER \"${CMAKE_CURRENT_SOURCE_DIR}/lib/opencl-icd-1.2.11.0/icd\")\n#   ADD_SUBDIRECTORY(${OPENCL_SOURCE_FOLDER})\n#   #GET_TARGET_PROPERTY(OPENCL_OUTPUT_NAME OpenCL OUTPUT_NAME)\n\n#   set(OPENCL_FOUND YES)\n#   set(OPENCL_LIBRARY \"${CMAKE_CURRENT_SOURCE_DIR}/bin/Release/opencl.lib\" CACHE STRING \"OpenCL library\")\n#   set(OPENCL_INCLUDE_DIR \"${OPENCL_SOURCE_FOLDER}/inc\" CACHE STRING \"OpenCL include directory\")\n#   mark_as_advanced(OPENCL_INCLUDE_DIR OPENCL_LIBRARY)\n\n#   SET(ENTRYPOINT_MODULES_STRING \"${ENTRYPOINT_MODULES_STRING}\n#        OpenclLibrary,\")\n#   SET(ENTRYPOINT_CS_STRING \"${ENTRYPOINT_CS_STRING} \n#      /// <summary>\n#      /// The file name of the OpenCL library\n#      /// </summary>\n\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building the tesseract_api Static Library in CMake\nDESCRIPTION: This CMake snippet sets up the build for the `tesseract_api` static library. It reads the Tesseract version from a file, generates a configuration header (`config_auto.h`) defining `PACKAGE_VERSION`, locates API source and header files while excluding specific ones like `tesseractmain.cpp`, sets up source groups, adds necessary include directories and compile definitions (`USE_STD_NAMESPACE`, `HAVE_LIBLEPT`), defines the static library, conditionally adds compile flags for non-MSVC platforms to `baseapi.cpp`, applies Tesseract-specific properties, and adds dependencies to other required Tesseract components for non-MSVC builds.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/tesseract/libtesseract/CMakeLists.txt#_snippet_22\n\nLANGUAGE: cmake\nCODE:\n```\n#api\nPROJECT(tesseract_api)\t\nfile(READ \"${TESSERACT_DIR}/VERSION\" TESSERACT_VERSION)\nSTRING(STRIP \"${TESSERACT_VERSION}\" TESSERACT_VERSION)\nfile(WRITE \"${TESSERACT_SRC_DIR}/api/config_auto.h\" \"#define PACKAGE_VERSION \\\"${TESSERACT_VERSION}\\\"\")\nfile(GLOB tesseract_api_srcs \"${TESSERACT_SRC_DIR}/api/*.cpp\")\nfile(GLOB tesseract_api_srcs_excludes \"${TESSERACT_SRC_DIR}/api/tesseractmain.cpp\" \"${TESSERACT_SRC_DIR}/api/capi.cpp\")\nLIST(REMOVE_ITEM tesseract_api_srcs ${tesseract_api_srcs_excludes})\nfile(GLOB tesseract_api_hdrs \"${TESSERACT_SRC_DIR}/api/*.h\" \"${TESSERACT_INCLUDE_DIR}/tesseract/baseapi.h\" \"${TESSERACT_INCLUDE_DIR}/tesseract/renderer.h\")\n#file(GLOB tesseract_api_hdrs_excludes \"${TESSERACT_SRC_DIR}/api/capi.h\")\n#LIST(REMOVE_ITEM tesseract_api_hdrs ${tesseract_api_hdrs_excludes})\n\nsource_group(\"Src\" FILES ${tesseract_api_srcs})\nsource_group(\"Include\" FILES ${tesseract_api_hdrs})\nadd_definitions(-DUSE_STD_NAMESPACE -DHAVE_LIBLEPT)\n#IF(MSVC)\n#  add_definitions(-D__MSW32__ -W0)\n#  include_directories(\"${TESSERACT_SRC_DIR}/vs2008/include\" \"${TESSERACT_SRC_DIR}/vs2008/port\")\n#ENDIF()\ninclude_directories(\"${TESSERACT_SRC_DIR}/cutil\" \"${TESSERACT_SRC_DIR}/ccstruct\" \"${TESSERACT_SRC_DIR}/ccutil\" \"${TESSERACT_SRC_DIR}/viewer\" \"${TESSERACT_SRC_DIR}/opencl\" \"${TESSERACT_SRC_DIR}/dict\" \"${TESSERACT_SRC_DIR}/classify\" \"${LEPTONICA_DIR}\" \"${TESSERACT_SRC_DIR}/ccmain\" \"${TESSERACT_SRC_DIR}/wordrec\" \"${TESSERACT_SRC_DIR}/textord\")\nSET_SOURCE_FILES_PROPERTIES(${PROJECT_SOURCE_DIR}/${TESSERACT_SRC_DIR}/api/baseapi.cpp  PROPERTIES COMPILE_DEFINITIONS PACKAGE_VERSION=\"${PACKAGE_VERSION}\")\nSET_SOURCE_FILES_PROPERTIES(${PROJECT_SOURCE_DIR}/${TESSERACT_SRC_DIR}/api/renderer.cpp  PROPERTIES COMPILE_DEFINITIONS PACKAGE_VERSION=\"${PACKAGE_VERSION}\")\n\nadd_library(${PROJECT_NAME} STATIC ${tesseract_api_srcs} ${tesseract_api_hdrs})\nIF(NOT MSVC)\n  set_property(\n  SOURCE \"${TESSERACT_SRC_DIR}/api/baseapi.cpp\"\n  APPEND PROPERTY COMPILE_FLAGS -DVERSION=0\n  )\nENDIF()\n\nSET_TESSERACT_PROJECT_PROPERTY(${PROJECT_NAME})\n\nIF(NOT MSVC)\n  ADD_DEPENDENCIES(${PROJECT_NAME} tesseract_ccmain tesseract_cutil tesseract_ccstruct tesseract_ccutil tesseract_viewer tesseract_opencl tesseract_dict tesseract_classify libleptonica tesseract_wordrec tesseract_textord)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Setting Default Value for HAVE_opencv_stitching in CMake\nDESCRIPTION: This CMake snippet checks if the `HAVE_opencv_stitching` variable is defined. If not, it sets the variable to `FALSE`. This ensures the variable has a boolean value for subsequent conditional logic related to the OpenCV stitching module.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_48\n\nLANGUAGE: cmake\nCODE:\n```\nIF (NOT HAVE_opencv_stitching)\n  SET(HAVE_opencv_stitching FALSE)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Finalizing Windows NuGet Dependencies Structure with CMake\nDESCRIPTION: Wraps the accumulated Windows platform dependencies (previously added to `EMGUCV_WINDOWS_NUGET_DEPENDENCY` for different architectures) within XML `<dependencies>` tags. This prepares the complete dependency section for inclusion in a Windows-specific EmguCV NuGet package specification file (`.nuspec`).\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_81\n\nLANGUAGE: cmake\nCODE:\n```\nSET(EMGUCV_WINDOWS_NUGET_DEPENDENCY \"\t<dependencies>\n\t\t${EMGUCV_WINDOWS_NUGET_DEPENDENCY}\n    </dependencies>\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Tesseract textord Library Build in CMake\nDESCRIPTION: This snippet sets up the 'tesseract_textord' static library project. It finds source and header files in the 'textord' directory, organizes them into source groups, adds a definition `-DHAVE_LIBLEPT` to indicate Leptonica support, applies MSVC-specific configurations, includes directories from numerous dependent Tesseract modules and Leptonica, adds the static library target, sets Tesseract properties, and defines dependencies (including libleptonica) for non-MSVC builds.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/tesseract/libtesseract/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\n#textord\nPROJECT(tesseract_textord)\nfile(GLOB tesseract_textord_srcs \"${TESSERACT_SRC_DIR}/textord/*.cpp\")\nfile(GLOB tesseract_textord_hdrs \"${TESSERACT_SRC_DIR}/textord/*.h\")\nsource_group(\"Src\" FILES ${tesseract_textord_srcs})\nsource_group(\"Include\" FILES ${tesseract_textord_hdrs})\nadd_definitions(-DHAVE_LIBLEPT)\nIF(MSVC)\n  add_definitions(-D__MSW32__ -W0)\n  include_directories(\"${TESSERACT_SRC_DIR}/vs2010/include\")\nENDIF()\ninclude_directories(\"${TESSERACT_SRC_DIR}/cutil\" \"${TESSERACT_SRC_DIR}/ccstruct\" \"${TESSERACT_SRC_DIR}/ccutil\" \"${TESSERACT_SRC_DIR}/viewer\" \"${TESSERACT_SRC_DIR}/opencl\" \"${TESSERACT_SRC_DIR}/dict\" \"${TESSERACT_SRC_DIR}/classify\" \"${LEPTONICA_DIR}\" \"${TESSERACT_SRC_DIR}/ccmain\" \"${TESSERACT_SRC_DIR}/wordrec\")\nadd_library(${PROJECT_NAME} STATIC ${tesseract_textord_srcs} ${tesseract_textord_hdrs})\n\nSET_TESSERACT_PROJECT_PROPERTY(${PROJECT_NAME})\n\nIF (NOT MSVC)\n  ADD_DEPENDENCIES(${PROJECT_NAME} tesseract_cutil tesseract_ccstruct tesseract_ccutil tesseract_viewer tesseract_opencl tesseract_dict tesseract_classify libleptonica tesseract_wordrec)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Setting Numeric CUDA Version String with CMake\nDESCRIPTION: Determines a numeric-only CUDA version string stored in the `CUDA_VERSION_NUMERIC_ONLY` variable. It attempts to use the detected `cuda_major` and `cuda_minor` versions first. If these are not both available, it falls back to using the `npp_major` and `npp_minor` versions. This variable is likely used for version-dependent logic or naming conventions later in the build process.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_75\n\nLANGUAGE: cmake\nCODE:\n```\n\tIF ( (${cuda_major}) AND (${cuda_minor}) )\n\t  SET(CUDA_VERSION_NUMERIC_ONLY \"${cuda_major}${cuda_minor}\")\n\tELSE()\n\t  SET(CUDA_VERSION_NUMERIC_ONLY \"${npp_major}${npp_minor}\")\n\tENDIF()\n```\n\n----------------------------------------\n\nTITLE: Adding MSVC Compiler Definitions on Windows in CMake\nDESCRIPTION: This snippet checks if the build is running on Windows (WIN32) and using the MSVC compiler. If both conditions are true, it adds preprocessor definitions `BUILD_AS_DLL=1` (likely for enabling dllexport/dllimport) and `-W0` to suppress warnings. Commented-out code suggests definitions previously used for older MSVC versions (MSVC80) to disable specific CRT warnings.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/libgeotiff/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nIF(WIN32)\n    IF(MSVC) \n        ADD_DEFINITIONS(-DBUILD_AS_DLL=1)\n        ADD_DEFINITIONS(-W0)\n\n#        IF(MSVC80)\n#            ADD_DEFINITIONS(-D_CRT_SECURE_NO_WARNINGS)\n#            ADD_DEFINITIONS(-D_CRT_NONSTDC_NO_WARNING)\n#            ADD_DEFINITIONS(-D_CRT_SECURE_NO_DEPRECATE)\n#        ENDIF()\n    ENDIF(MSVC)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Project Declaration - CMake\nDESCRIPTION: Declares the main CMake project as 'emgucv'. This enables project-wide configuration, sets project-specific variables, and prepares for further settings and subdirectory inclusion.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nPROJECT(emgucv)\n```\n\n----------------------------------------\n\nTITLE: Initializing Platform Build Flags in CMake\nDESCRIPTION: This snippet initializes several boolean flags to `OFF` before platform-specific checks are performed. These flags (`IS_IOS_BUILD`, `IS_MAC_CATALYST_BUILD`, etc.) are used later in the build process to conditionally include code or set other options based on the target platform (iOS, Mac Catalyst, macOS) and architecture.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_26\n\nLANGUAGE: cmake\nCODE:\n```\n#MESSAGE(STATUS \"CMAKE_SYSTEM_NAME: ${CMAKE_SYSTEM_NAME}\")\nSET(IS_IOS_BUILD OFF)\nSET(IS_MAC_CATALYST_BUILD OFF)\nSET(IS_MAC_CATALYST_ARM64_BUILD OFF)\nSET(IS_MAC_CATALYST_X86_64_BUILD OFF)  \nSET(IS_MAC_BUILD OFF)\nSET(IS_MAC_ARM64_BUILD OFF)\nSET(IS_MAC_X86_64_BUILD OFF)\n```\n\n----------------------------------------\n\nTITLE: Running ICD Tests on Linux using Make (Shell)\nDESCRIPTION: Executes the ICD tests on Linux by running the 'test' target defined in the Makefile. This command typically invokes `ctest` or a similar test runner. Assumes the project has been successfully built and the test environment (e.g., driver stub ICD) is properly configured.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/3rdParty/opencl-icd-1.2.11.0/icd/README.txt#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmake test\n```\n\n----------------------------------------\n\nTITLE: Adjusting Compiler Optimization Flags for ICC on Windows in CMake\nDESCRIPTION: Checks if the current build environment is Windows (WIN32) and uses the Intel C++ Compiler (CV_ICC). If both conditions are true, it replaces the /O3 optimization flag with /O2 for both C and C++ release builds.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/tesseract/libtesseract/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nIF(WIN32 AND CV_ICC) \n  STRING(REGEX REPLACE \"/O3\" \"/O2\" CMAKE_C_FLAGS_RELEASE ${CMAKE_C_FLAGS_RELEASE})\n  STRING(REGEX REPLACE \"/O3\" \"/O2\" CMAKE_CXX_FLAGS_RELEASE ${CMAKE_CXX_FLAGS_RELEASE})\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Collecting Source and Header Files\nDESCRIPTION: Uses `file(GLOB ...)` to find all `.cpp` and `.h*` files in the current directory. It stores these file paths in `cvextern_test_srcs` and `cvextern_test_hdrs` respectively and assigns them to source groups named \"Src\" and \"Include\" for organization in IDEs like Visual Studio.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/tests/cvextern_test/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nfile(GLOB cvextern_test_srcs \"./*.cpp\")\nsource_group(\"Src\" FILES ${cvextern_test_srcs})\nfile(GLOB cvextern_test_hdrs \"./*.h*\")\nsource_group(\"Include\" FILES ${cvextern_test_hdrs})\n```\n\n----------------------------------------\n\nTITLE: Building and Configuring Windows x86 MSVC Runtime NuGet Package in CMake\nDESCRIPTION: This CMake script conditionally defines a project for creating a NuGet package (`Emgu.runtime.windows.msvc.rt.x86.nuget`) for the Windows x86 MSVC runtime components of Emgu CV. It determines the output directory, calls a custom function `BUILD_NUGET_PACKAGE` with project, nuspec, output, and working directory details. If NuGet signing is configured (`EMGU_NUGET_SIGN_FOUND`), it signs the generated package using `EMGU_SIGN_NUGET`. Dependencies are added on the `cvextern` target and conditionally on the `Emgu.CV` target. Finally, if solution folders are enabled, it assigns the project to a 'nuget' folder.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/platforms/nuget/Emgu.runtime.windows.msvc.rt.x86/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nIF (WIN32 AND HAVE_WINDESKTOP_X86)\n\nPROJECT(Emgu.runtime.windows.msvc.rt.x86.nuget)\n\n  get_filename_component(NUGET_OUTPUT_DIR ${CMAKE_CURRENT_SOURCE_DIR} DIRECTORY)\n\n  BUILD_NUGET_PACKAGE(\n    ${PROJECT_NAME} \n\t\"${EMGU_CV_SOURCE_DIR}/Emgu.CV/NetStandard/Emgu.CV.csproj\"  #csproj_file \n\t\"${CMAKE_CURRENT_SOURCE_DIR}/Package.nuspec\" #nuspec_file \n\t\"${NUGET_OUTPUT_DIR}\" #output_dir \n\t\"${CMAKE_CURRENT_SOURCE_DIR}\" #working_dir\n\t) \n\n  IF (EMGU_NUGET_SIGN_FOUND)\n    EMGU_SIGN_NUGET(${PROJECT_NAME} \"${NUGET_OUTPUT_DIR}/${EMGU_WINDOWS_MSVCRT_X86_NUGET_ID}.${EMGU_WINDOWS_MSVCRT_NUGET_VERSION}.nupkg\")\n  ENDIF()\n\n  ADD_DEPENDENCIES(${PROJECT_NAME} cvextern)\n\n  IF (TARGET Emgu.CV)\n    ADD_DEPENDENCIES(${PROJECT_NAME} Emgu.CV)\n  ENDIF()\n\n  if(ENABLE_SOLUTION_FOLDERS)\n    set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER \"nuget\")\n  endif() \n\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Executing License Type Check Macro in CMake\nDESCRIPTION: This single line of CMake code calls the previously defined macro `CHECK_LICENSE_TYPE`. This executes the logic within the macro to determine and report the license type based on the content of the license file.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_54\n\nLANGUAGE: cmake\nCODE:\n```\nCHECK_LICENSE_TYPE()\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building EmguCV Runtime NuGet Package on Windows x64 with CMake - CMake\nDESCRIPTION: This snippet configures a CMake script to create the EmguCV runtime NuGet package for x64 Windows using custom CMake commands. It conditionally defines the project, sets up NuGet output directories, invokes NuGet package building via BUILD_NUGET_PACKAGE, performs signing if available, declares dependencies (such as 'cvextern' and 'Emgu.CV'), and organizes the package into Visual Studio solution folders based on a flag. Prerequisites include CMake, proper environment variable configuration (such as WIN32, HAVE_WINDESKTOP_X64, EMGU_CV_SOURCE_DIR), and the presence of the relevant custom CMake functions/macros. Key parameters specify csproj, nuspec file paths, output directories, and signing tools, while outputs include the built and optionally signed NuGet .nupkg file. The script is limited to Windows x64 builds with the requisite dependencies and custom CMake tooling.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/platforms/nuget/Emgu.runtime.windows.msvc.rt.x64/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# --------------------------------------------------------\\n#  Copyright (C) 2004-2025 by EMGU Corporation. All rights reserved.\\n# --------------------------------------------------------\\n\\nIF (WIN32 AND HAVE_WINDESKTOP_X64)\\n\\n  PROJECT(Emgu.runtime.windows.msvc.rt.x64.nuget)\\n\\n  get_filename_component(NUGET_OUTPUT_DIR ${CMAKE_CURRENT_SOURCE_DIR} DIRECTORY)\\n\\n  BUILD_NUGET_PACKAGE(\\n    ${PROJECT_NAME} \\n\\t\"${EMGU_CV_SOURCE_DIR}/Emgu.CV/NetStandard/Emgu.CV.csproj\"  #csproj_file \\n\\t\"${CMAKE_CURRENT_SOURCE_DIR}/Package.nuspec\" #nuspec_file \\n\\t\"${NUGET_OUTPUT_DIR}\" #output_dir \\n\\t\"${CMAKE_CURRENT_SOURCE_DIR}\" #working_dir\\n\\t) \\n\\n  IF (EMGU_NUGET_SIGN_FOUND)\\n    EMGU_SIGN_NUGET(${PROJECT_NAME} \"${NUGET_OUTPUT_DIR}/${EMGU_WINDOWS_MSVCRT_X64_NUGET_ID}.${EMGU_WINDOWS_MSVCRT_NUGET_VERSION}.nupkg\")\\n  ENDIF()\\n\\n  ADD_DEPENDENCIES(${PROJECT_NAME} cvextern)\\n\\n  IF (TARGET Emgu.CV)\\n    ADD_DEPENDENCIES(${PROJECT_NAME} Emgu.CV)\\n  ENDIF()\\n\\n  if(ENABLE_SOLUTION_FOLDERS)\\n    set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER \"nuget\")\\n  endif() \\n\\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Defining Source Groups for IDEs in CMake\nDESCRIPTION: Uses the SOURCE_GROUP command to organize files within IDE project views (like Visual Studio filters or Xcode groups). It groups the main CMakeLists.txt file under \"CMake Files\", header files listed in GEOTIFF_LIB_HEADERS under \"Header Files\", and source files listed in GEOTIFF_LIB_SOURCES under \"Source Files\".\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/libgeotiff/libgeotiff-1.4.0/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\n# Define grouping of source files in PROJECT file (e.g. Visual Studio)\nSOURCE_GROUP(\"CMake Files\" FILES CMakeLists.txt)\nSOURCE_GROUP(\"Header Files\" FILES ${GEOTIFF_LIB_HEADERS})\nSOURCE_GROUP(\"Source Files\" FILES ${GEOTIFF_LIB_SOURCES})\n```\n\n----------------------------------------\n\nTITLE: Defining Emgu ARM64 MSVC Runtime NuGet Project in CMake\nDESCRIPTION: This CMake script conditionally defines a project (`Emgu.runtime.windows.msvc.rt.arm64.nuget`) when building on Windows with ARM64 Desktop support (`WIN32 AND HAVE_WINDESKTOP_ARM64`). It uses the `BUILD_NUGET_PACKAGE` function to create the NuGet package from specified `.csproj` and `.nuspec` files, placing the output in the parent directory. It optionally signs the package using `EMGU_SIGN_NUGET` if signing tools are found (`EMGU_NUGET_SIGN_FOUND`). Dependencies are set on `cvextern` and `Emgu.CV` targets, and the project is assigned to the \"nuget\" solution folder if `ENABLE_SOLUTION_FOLDERS` is true.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/platforms/nuget/Emgu.runtime.windows.msvc.rt.arm64/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# --------------------------------------------------------\n#  Copyright (C) 2004-2025 by EMGU Corporation. All rights reserved.\n# --------------------------------------------------------\n\nIF (WIN32 AND HAVE_WINDESKTOP_ARM64)\n\n  PROJECT(Emgu.runtime.windows.msvc.rt.arm64.nuget)\n\n  get_filename_component(NUGET_OUTPUT_DIR ${CMAKE_CURRENT_SOURCE_DIR} DIRECTORY)\n\n  BUILD_NUGET_PACKAGE(\n    ${PROJECT_NAME} \n\t\"${EMGU_CV_SOURCE_DIR}/Emgu.CV/NetStandard/Emgu.CV.csproj\"  #csproj_file \n\t\"${CMAKE_CURRENT_SOURCE_DIR}/Package.nuspec\" #nuspec_file \n\t\"${NUGET_OUTPUT_DIR}\" #output_dir \n\t\"${CMAKE_CURRENT_SOURCE_DIR}\" #working_dir\n\t) \n\n  IF (EMGU_NUGET_SIGN_FOUND)\n    EMGU_SIGN_NUGET(${PROJECT_NAME} \"${NUGET_OUTPUT_DIR}/${EMGU_WINDOWS_MSVCRT_ARM64_NUGET_ID}.${EMGU_WINDOWS_MSVCRT_NUGET_VERSION}.nupkg\")\n  ENDIF()\n\n  ADD_DEPENDENCIES(${PROJECT_NAME} cvextern)\n\n  IF (TARGET Emgu.CV)\n    ADD_DEPENDENCIES(${PROJECT_NAME} Emgu.CV)\n  ENDIF()\n\n  if(ENABLE_SOLUTION_FOLDERS)\n    set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER \"nuget\")\n  endif() \n\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring Conditional NuGet Package Build with Signing in CMake (CMake)\nDESCRIPTION: This snippet defines conditional logic in a CMakeLists.txt file to build and possibly sign a NuGet package for Emgu CV zlibwapi. It checks for Windows OS, Windesktop targets, and CUDNN support before setting up the project and registering build and signing commands. Dependencies include CMake, required variables set in the project, and external tools or macros such as BUILD_NUGET_PACKAGE and EMGU_SIGN_NUGET. Key parameters specify paths to the csproj and nuspec files, the output directory, and signing configuration. Inputs are configuration variables and project/layout files, and the output is a signed or unsigned NuGet package. Limitations: only runs when specific build variables are set and assumes supporting macros and tools are available in the build system.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/platforms/nuget/Emgu.runtime.windows.zlibwapi.x64/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# --------------------------------------------------------\\n#  Copyright (C) 2004-2025 by EMGU Corporation. All rights reserved.\\n# --------------------------------------------------------\\n\\nIF (WIN32 AND (HAVE_WINDESKTOP_X86 OR HAVE_WINDESKTOP_X64) AND WITH_CUDNN)\\n\\n  PROJECT(Emgu.runtime.windows.zlibwapi.nuget)\\n  \\n    get_filename_component(NUGET_OUTPUT_DIR ${CMAKE_CURRENT_SOURCE_DIR} DIRECTORY)\\n  \\n    BUILD_NUGET_PACKAGE(\\n      ${PROJECT_NAME} \\n\\t  \\\"${EMGU_CV_SOURCE_DIR}/Emgu.CV/NetStandard/Emgu.CV.csproj\\\"  #csproj_file \\n\\t  \\\"${CMAKE_CURRENT_SOURCE_DIR}/Package.nuspec\\\" #nuspec_file \\n\\t  \\\"${CMAKE_CURRENT_SOURCE_DIR}/../\\\" #output_dir \\n\\t  \\\"${CMAKE_CURRENT_SOURCE_DIR}\\\" #working_dir\\n\\t  ) \\n\\t  \\n  IF (EMGU_NUGET_SIGN_FOUND)\\n    EMGU_SIGN_NUGET(${PROJECT_NAME} \\\"${NUGET_OUTPUT_DIR}/${EMGU_ZLIBWAPI_ID}.${EMGU_ZLIBWAPI_VERSION}.nupkg\\\")\\n  ENDIF()\\n\\t\\n    if(ENABLE_SOLUTION_FOLDERS)\\n      set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER \\\"nuget\\\")\\n    endif() \\n\\t\\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Adding OpenCL Project Dependency in CMake\nDESCRIPTION: Conditionally adds a build dependency on the OpenCL project specified by the `OPENCL_PROJ` variable. If the `OPENCL_PROJ` variable is defined and presumably holds the name of an OpenCL-related target, this ensures that target is built before `${the_target}`.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_108\n\nLANGUAGE: cmake\nCODE:\n```\nIF (OPENCL_PROJ)\n  ADD_DEPENDENCIES(${the_target} ${OPENCL_PROJ})\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Defining NuGet Package Properties for Emgu.CV.Wpf in CMake\nDESCRIPTION: Sets CMake variables for the Emgu.CV.Wpf NuGet package. It defines the package title and summary, and initializes an empty file list variable. The summary specifies that the package provides extension methods for converting between BitmapSource and Emgu objects.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_60\n\nLANGUAGE: cmake\nCODE:\n```\nSET(EMGUCV_WPF_NUGET_TITLE \"WPF extension for Emgu CV\")\nSET(EMGUCV_WPF_NUGET_SUMMARY \"This package add extension method to convert BitmapSource to and from Emgu objects (e.g. Mat)\")\nSET(EMGUCV_WPF_NUGET_FILE_LIST \"\")\n```\n\n----------------------------------------\n\nTITLE: Defining NuGet Package Properties for Emgu.CV.Models in CMake\nDESCRIPTION: Sets CMake variables for the experimental Emgu.CV.Models NuGet package. It defines the package title and summary, explaining its purpose for handling image processing/AI models, and initializes empty file list and dependency variables. The summary notes that the component is under active development.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_61\n\nLANGUAGE: cmake\nCODE:\n```\nSET(EMGUCV_MODELS_NUGET_TITLE \"Experimental component to help download, initialize and execute image processing/AI models.\")\nSET(EMGUCV_MODELS_NUGET_SUMMARY \"Experimental component to help download, initialize and execute image processing/AI models. This is under active development and API may change from time to time.\")\nSET(EMGUCV_MODELS_NUGET_FILE_LIST \"\")\nSET(EMGUCV_MODELS_NUGET_DEPENDENCY \"\")\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Build Artifacts on Linux (Shell)\nDESCRIPTION: Removes automatically generated build artifacts, specifically the 'build' and 'bin' directories, on a Linux system using a 'clobber' target defined in the project's Makefile. This command helps restore the source directory to a clean state, deleting intermediate and final build products.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/3rdParty/opencl-icd-1.2.11.0/icd/README.txt#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nmake clobber\n```\n\n----------------------------------------\n\nTITLE: Setting NuGet Package Vendor and Printing Status Message in CMake\nDESCRIPTION: This snippet sets the `NUGET_PACKAGE_VENDOR` CMake variable, likely used in the `.nuspec` file generation, to the value of `CPACK_PACKAGE_VENDOR`. It also prints a status message to the CMake output, indicating the value of the `npp_major` variable, useful for debugging CUDA/NPP version detection.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_73\n\nLANGUAGE: cmake\nCODE:\n```\nSET(NUGET_PACKAGE_VENDOR \"${CPACK_PACKAGE_VENDOR}\")\n\nMESSAGE(STATUS \"<<<<<<<<<<<<<<<< npp_major: ${npp_major} >>>>>>>>>>>>>>>>>>>> \")\n```\n\n----------------------------------------\n\nTITLE: Adding libxtiff Subdirectory to CMake Build\nDESCRIPTION: Includes the 'libxtiff' subdirectory in the build process using the ADD_SUBDIRECTORY command. CMake will process the CMakeLists.txt file located within the 'libxtiff' directory.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/libgeotiff/libgeotiff-1.4.0/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\n###############################################################################\n# Build libxtiff library\n\nADD_SUBDIRECTORY(libxtiff)\n```\n\n----------------------------------------\n\nTITLE: Including RHEL Runtime in CMake Build\nDESCRIPTION: Adds the subdirectory containing the CMake build configuration for the EmguCV Red Hat Enterprise Linux (RHEL) runtime to the project build.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/platforms/nuget/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(\"Emgu.CV.runtime.rhel\")\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory with CMake - CMake\nDESCRIPTION: This snippet uses the CMake ADD_SUBDIRECTORY command to include the Emgu.CV.WindowsUI directory in the build process. This enables CMake to process the CMakeLists.txt (if present) inside the specified subdirectory, incorporating its build targets, configuration, and dependencies into the parent project. No parameters other than the relative subdirectory path are required. The snippet assumes that the referenced directory exists and is properly structured for CMake.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.WindowsUI/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nADD_SUBDIRECTORY(Emgu.CV.WindowsUI)\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Output Directories in CMake\nDESCRIPTION: This snippet sets the output directories for build artifacts. It defines a variable 'GEOTIFF_BUILD_OUTPUT_DIRECTORY' pointing to 'bin' within the project binary directory and then sets the standard CMake output directory variables (CMAKE_RUNTIME_OUTPUT_DIRECTORY, CMAKE_LIBRARY_OUTPUT_DIRECTORY, CMAKE_ARCHIVE_OUTPUT_DIRECTORY) to use this path.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/libgeotiff/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n# TODO: Still testing the output paths --mloskot\nSET(GEOTIFF_BUILD_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin)\n\n# Output directory in which to build RUNTIME target files.\nSET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${GEOTIFF_BUILD_OUTPUT_DIRECTORY})\n\n# Output directory in which to build LIBRARY target files\nSET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${GEOTIFF_BUILD_OUTPUT_DIRECTORY})\n\n# Output directory in which to build ARCHIVE target files.\nSET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${GEOTIFF_BUILD_OUTPUT_DIRECTORY})\n```\n\n----------------------------------------\n\nTITLE: Conditionally Enabling Testing and Adding Test Subdirectory in CMake\nDESCRIPTION: This CMake code checks if the build is not targeting Android, iOS, .NET Core (NETFX_CORE), or Apple platforms. If none of these conditions are met, it enables testing using `ENABLE_TESTING()` and adds the `tests/cvextern_test` subdirectory to the build, which likely contains tests for the C++ extern wrapper.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_46\n\nLANGUAGE: cmake\nCODE:\n```\nIF(NOT (ANDROID OR IOS OR NETFX_CORE OR APPLE))\n  ENABLE_TESTING()\n  ADD_SUBDIRECTORY(tests/cvextern_test)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring CUDA-Specific NuGet Settings in CMake\nDESCRIPTION: This block executes only if CUDA support is enabled (`WITH_CUDA` is true). It configures titles, versions, dependencies, and file lists for various CUDA-related NuGet packages (runtime, NPP, cuBLAS, cuFFT, cuDNN components) required by Emgu CV when built with CUDA. It determines versions based on detected CUDA/cuDNN installations, defines XML snippets for `.nuspec` file contents (dependencies and file inclusions for win-x64), and appends these CUDA dependencies to the main Windows runtime package dependency list (`EMGUCV_WINDOWS_NUGET_DEPENDENCY`). A check for `WITH_CUDNN` further refines dependencies.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_72\n\nLANGUAGE: cmake\nCODE:\n```\nIF(WITH_CUDA)\n    \n\tSET(EMGUCV_WINDOWS_NUGET_TITLE \"${EMGUCV_WINDOWS_NUGET_TITLE} with CUDA support\")\n\tSET(EMGU_CUDA_NUGET_TITLE \"Native x64 CUDA dependency for EMGU CV\")\n\t#SET(EMGU_CUDA_VERSION \"${npp_major}.${npp_minor}.${npp_build}\")\n\tIF ( (${cuda_major}) AND (${cuda_minor}) AND (${npp_build}) )\n\t  SET(EMGU_CUDA_VERSION \"${cuda_major}.${cuda_minor}.${npp_build}\")\n\tELSEIF (${CUDA_VERSION} AND (${npp_build}) )\n\t  SET(EMGU_CUDA_VERSION \"${CUDA_VERSION}.${npp_build}\")\n\tELSEIF (${CUDA_VERSION})\n\t  SET(EMGU_CUDA_VERSION \"${CUDA_VERSION}\")\n\tENDIF()\n\t\n\t\n\tSET(EMGU_CUDART_VERSION \"${EMGU_CUDA_VERSION}\")\n\tSET(EMGU_CUDA_NUGET_DEPENDENCY_STR \"${EMGU_CUDA_VERSION}\")\n\tSET(EMGU_CUFFT_VERSION \"${EMGU_CUDA_VERSION}\")\n\tSET(EMGU_CUFFT_NUGET_TITLE \"Native x64 FFT component for CUDA\")\n\tSET(EMGU_CUDNN_VERSION \"${CUDNN_VERSION_MAJOR}.${CUDNN_VERSION_MINOR}.${CUDNN_VERSION_PATCH}\")\n\tIF (\"${EMGU_CUDNN_VERSION}\" STREQUAL \"\")\n\t\tMESSAGE(FATAL_ERROR \"FAILED to detect DNN version\")\n\tENDIF()\n\tSET(EMGU_CUDNN_NUGET_DEPENDENCY_STR \"${EMGU_CUDNN_VERSION}\")\n\tSET(EMGU_CUDNN_NUGET_TITLE \"Native x64 DNN component for CUDA\")\n\tSET(EMGU_CUDNN_CNN_NUGET_TITLE \"Native x64 CNN component for CUDA DNN\")\n\tSET(EMGU_CUDNN_ENGINES_NUGET_TITLE \"Native x64 CNN engines component for CUDA DNN\")\n\tSET(EMGU_CUDNN_OPS_NUGET_TITLE \"Native x64 OPS component for CUDA DNN\")\n\t#SET(EMGU_CUDNN_CNN_INFER_NUGET_TITLE \"Native x64 CNN component for CUDA DNN\")\n\t#SET(EMGU_CUDNN_CNN_TRAIN_NUGET_TITLE \"Native x64 CNN training component for CUDA DNN\")\n\tSET(EMGU_NPP_VERSION \"${EMGU_CUDA_VERSION}\")\n\tSET(EMGU_CUDA_BLAS_VERSION \"${EMGU_CUDA_VERSION}\")\n\tSET(EMGU_NPP_NUGET_TITLE \"Native x64 NPP component for CUDA\")\n\tSET(EMGU_CUDA_BLAS_NUGET_TITLE \"Native x64 blas component for CUDA\")\n\tSET(EMGU_CUDA_BLAS_LT_NUGET_TITLE \"Native x64 blas lt component for CUDA\")\n\t\n\tIF(HAVE_WINDESKTOP_X64)\n\t    #SET(CUDA_EULA_URL https://docs.nvidia.com/pdf/EULA.pdf)\n\t\t#file(DOWNLOAD ${CUDA_EULA_URL} \"${CMAKE_CURRENT_SOURCE_DIR}/platforms/nuget/Emgu.CV.runtime.windows.cuda.npp/EULA.pdf\")\n\t\t#file(DOWNLOAD ${CUDA_EULA_URL} \"${CMAKE_CURRENT_SOURCE_DIR}/platforms/nuget/Emgu.CV.runtime.windows.cuda.cufft/EULA.pdf\")\n\t\t#file(COPY \"${CUDA_TOOLKIT_ROOT_DIR}/EULA.txt\" DESTINATION \"${CMAKE_CURRENT_SOURCE_DIR}/platforms/nuget/Cudnn\")\n\t\tSET(EMGU_CUDA_RT_NUGET_FILE_LIST \"${EMGU_CUDA_RT_NUGET_FILE_LIST} \n\t\t<file src=\\\"..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-x64\\\\native\\\\cu*.dll\\\" exclude=\\\"..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-x64\\\\native\\\\cufft*.dll;..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-x64\\\\native\\\\cudnn*.dll;..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-x64\\\\native\\\\cublas*.dll\\\" target=\\\"runtimes\\\\win-x64\\\\native\\\" /> \n\t\t<file src=\\\"..\\\\..\\\\..\\\\miscellaneous\\\\nuget_icon.png\\\" target=\\\"icon.png\\\" />\t\t\n\t\t<file src=\\\"EULA.txt\\\" target=\\\"CUDA_EULA.txt\\\" />\")\n\t\tSET(EMGU_CUDA_NPP_NUGET_FILE_LIST \"${EMGU_CUDA_NPP_NUGET_FILE_LIST} \n\t\t<file src=\\\"..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-x64\\\\native\\\\npp*.dll\\\" target=\\\"runtimes\\\\win-x64\\\\native\\\" />\n\t\t<file src=\\\"..\\\\..\\\\..\\\\miscellaneous\\\\nuget_icon.png\\\" target=\\\"icon.png\\\" />\t\t\n\t\t<file src=\\\"EULA.txt\\\" target=\\\"CUDA_EULA.txt\\\" />\")\n\t\tSET(EMGU_CUDA_BLAS_NUGET_FILE_LIST \"${EMGU_CUDA_BLAS_NUGET_FILE_LIST} \n\t\t<file src=\\\"..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-x64\\\\native\\\\cublas64*.dll\\\" target=\\\"runtimes\\\\win-x64\\\\native\\\" />\n\t\t<file src=\\\"..\\\\..\\\\..\\\\miscellaneous\\\\nuget_icon.png\\\" target=\\\"icon.png\\\" />\t\t\n\t\t<file src=\\\"EULA.txt\\\" target=\\\"CUDA_EULA.txt\\\" />\")\n\t\tSET(EMGU_CUDA_BLAS_LT_NUGET_FILE_LIST \"${EMGU_CUDA_BLAS_LT_NUGET_FILE_LIST} \n\t\t<file src=\\\"..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-x64\\\\native\\\\cublasLt*.dll\\\" target=\\\"runtimes\\\\win-x64\\\\native\\\" />\n\t\t<file src=\\\"..\\\\..\\\\..\\\\miscellaneous\\\\nuget_icon.png\\\" target=\\\"icon.png\\\" />\t\t\n\t\t<file src=\\\"EULA.txt\\\" target=\\\"CUDA_EULA.txt\\\" />\")\n\t\tSET(EMGU_CUFFT_NUGET_FILE_LIST \"${EMGU_CUFFT_NUGET_FILE_LIST} \n\t\t<file src=\\\"..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-x64\\\\native\\\\cufft*.dll\\\" target=\\\"runtimes\\\\win-x64\\\\native\\\" />\n\t\t<file src=\\\"..\\\\..\\\\..\\\\miscellaneous\\\\nuget_icon.png\\\" target=\\\"icon.png\\\" />\n\t\t<file src=\\\"EULA.txt\\\" target=\\\"CUDA_EULA.txt\\\" />\")\n\t\tSET(EMGU_CUDNN_NUGET_FILE_LIST \"${EMGU_CUDNN_NUGET_FILE_LIST} \n\t\t<file src=\\\"..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-x64\\\\native\\\\cudnn*.dll\\\" exclude=\\\"..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-x64\\\\native\\\\cudnn_engines*.dll;..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-x64\\\\native\\\\cudnn_ops*.dll;..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-x64\\\\native\\\\cudnn_cnn*.dll;..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-x64\\\\native\\\\cudnn_adv*.dll\\\" target=\\\"runtimes\\\\win-x64\\\\native\\\" />\n\t\t<file src=\\\"..\\\\..\\\\..\\\\miscellaneous\\\\nuget_icon.png\\\" target=\\\"icon.png\\\" />\n\t\t<file src=\\\"NVIDIA_SLA_cuDNN_Support.txt\\\" target=\\\"cuDNN_SLA.txt\\\" />\")\n\n\t\tSET(EMGU_CUDNN_CNN_NUGET_FILE_LIST \"${EMGU_CUDNN_CNN_NUGET_FILE_LIST} \n\t\t<file src=\\\"..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-x64\\\\native\\\\cudnn_cnn*.dll\\\" target=\\\"runtimes\\\\win-x64\\\\native\\\" />\n\t\t<file src=\\\"..\\\\..\\\\..\\\\miscellaneous\\\\nuget_icon.png\\\" target=\\\"icon.png\\\" />\n\t\t<file src=\\\"NVIDIA_SLA_cuDNN_Support.txt\\\" target=\\\"cuDNN_SLA.txt\\\" />\")\n\t\tSET(EMGU_CUDNN_ENGINES_NUGET_FILE_LIST \"${EMGU_CUDNN_ENGINES_NUGET_FILE_LIST} \n\t\t<file src=\\\"..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-x64\\\\native\\\\cudnn_engines*.dll\\\" target=\\\"runtimes\\\\win-x64\\\\native\\\" />\n\t\t<file src=\\\"..\\\\..\\\\..\\\\miscellaneous\\\\nuget_icon.png\\\" target=\\\"icon.png\\\" />\n\t\t<file src=\\\"NVIDIA_SLA_cuDNN_Support.txt\\\" target=\\\"cuDNN_SLA.txt\\\" />\")\n\t\tSET(EMGU_CUDNN_CNN_NUGET_DEPENDENCY \"\n\t\t<dependencies>\n\t\t  <dependency id=\\\"${EMGU_CUDNN_NUGET_ID}\\\" version=\\\"${EMGU_CUDNN_NUGET_DEPENDENCY_STR}\\\" />\n\t\t</dependencies>\")\n\t\tSET(EMGU_CUDNN_ENGINES_NUGET_DEPENDENCY \"\n\t\t<dependencies>\n\t\t  <dependency id=\\\"${EMGU_CUDNN_NUGET_ID}\\\" version=\\\"${EMGU_CUDNN_NUGET_DEPENDENCY_STR}\\\" />\n\t\t</dependencies>\")\n\t\tSET(EMGU_CUDNN_OPS_NUGET_FILE_LIST \"${EMGU_CUDNN_OPS_NUGET_FILE_LIST} \n\t\t<file src=\\\"..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-x64\\\\native\\\\cudnn_ops*.dll\\\" target=\\\"runtimes\\\\win-x64\\\\native\\\" />\n\t\t<file src=\\\"..\\\\..\\\\..\\\\miscellaneous\\\\nuget_icon.png\\\" target=\\\"icon.png\\\" />\n\t\t<file src=\\\"NVIDIA_SLA_cuDNN_Support.txt\\\" target=\\\"cuDNN_SLA.txt\\\" />\")\n\t\tSET(EMGU_CUDNN_OPS_NUGET_DEPENDENCY \"\n\t\t<dependencies>\n\t\t  <dependency id=\\\"${EMGU_CUDNN_NUGET_ID}\\\" version=\\\"${EMGU_CUDNN_NUGET_DEPENDENCY_STR}\\\" />\n\t\t</dependencies>\")\n\t\tSET(EMGU_CUDNN_ADV_NUGET_FILE_LIST \"${EMGU_CUDNN_ADV_NUGET_FILE_LIST} \n\t\t<file src=\\\"..\\\\..\\\\..\\\\libs\\\\runtimes\\\\win-x64\\\\native\\\\cudnn_adv*.dll\\\" target=\\\"runtimes\\\\win-x64\\\\native\\\" />\n\t\t<file src=\\\"..\\\\..\\\\..\\\\miscellaneous\\\\nuget_icon.png\\\" target=\\\"icon.png\\\" />\n\t\t<file src=\\\"NVIDIA_SLA_cuDNN_Support.txt\\\" target=\\\"cuDNN_SLA.txt\\\" />\")\n\t\tSET(EMGU_CUDNN_ADV_NUGET_DEPENDENCY \"\n\t\t<dependencies>\n\t\t  <dependency id=\\\"${EMGU_CUDNN_NUGET_ID}\\\" version=\\\"${EMGU_CUDNN_NUGET_DEPENDENCY_STR}\\\" />\n\t\t</dependencies>\")\n\t\tSET(EMGU_CUDNN_NUGET_DEPENDENCY \"\n\t\t<dependencies>\n\t\t  <dependency id=\\\"${EMGU_CUDART_NUGET_ID}\\\" version=\\\"${EMGU_CUDA_NUGET_DEPENDENCY_STR}\\\" />\n\t\t  <dependency id=\\\"${EMGU_ZLIBWAPI_ID}\\\" version=\\\"${EMGU_ZLIBWAPI_VERSION}\\\" />\n\t\t</dependencies>\")\n\t\tSET(EMGUCV_WINDOWS_NUGET_DEPENDENCY \"${EMGUCV_WINDOWS_NUGET_DEPENDENCY}\n\t\t  <dependency id=\\\"${EMGU_CUDART_NUGET_ID}\\\" version=\\\"${EMGU_CUDA_NUGET_DEPENDENCY_STR}\\\" />\n\t\t  <dependency id=\\\"${EMGU_CUDA_BLAS_LT_NUGET_ID}\\\" version=\\\"${EMGU_CUDA_NUGET_DEPENDENCY_STR}\\\" />\n\t\t  <dependency id=\\\"${EMGU_CUDA_BLAS_NUGET_ID}\\\" version=\\\"${EMGU_CUDA_NUGET_DEPENDENCY_STR}\\\" />\n\t\t  <dependency id=\\\"${EMGU_NPP_NUGET_ID}\\\" version=\\\"${EMGU_CUDA_NUGET_DEPENDENCY_STR}\\\" />\n\t\t  <dependency id=\\\"${EMGU_CUFFT_NUGET_ID}\\\" version=\\\"${EMGU_CUDA_NUGET_DEPENDENCY_STR}\\\" />\n\t\t  <dependency id=\\\"${EMGU_CUDNN_ADV_NUGET_ID}\\\" version=\\\"${EMGU_CUDNN_NUGET_DEPENDENCY_STR}\\\" />\n\t\t  <dependency id=\\\"${EMGU_CUDNN_CNN_NUGET_ID}\\\" version=\\\"${EMGU_CUDNN_NUGET_DEPENDENCY_STR}\\\" />\n\t\t  <dependency id=\\\"${EMGU_CUDNN_ENGINES_NUGET_ID}\\\" version=\\\"${EMGU_CUDNN_NUGET_DEPENDENCY_STR}\\\" />\n\t\t  <dependency id=\\\"${EMGU_CUDNN_OPS_NUGET_ID}\\\" version=\\\"${EMGU_CUDNN_NUGET_DEPENDENCY_STR}\\\" />\n\t\t  <dependency id=\\\"${EMGU_ZLIBWAPI_ID}\\\" version=\\\"${EMGU_ZLIBWAPI_VERSION}\\\" />\n\t\t  \")\n\t\tIF (WITH_CUDNN)\n\t\t  SET(EMGUCV_WINDOWS_NUGET_DEPENDENCY \"${EMGUCV_WINDOWS_NUGET_DEPENDENCY}<dependency id=\\\"${EMGU_CUDNN_NUGET_ID}\\\" version=\\\"${EMGU_CUDNN_NUGET_DEPENDENCY_STR}\\\" />\")\n\t    ENDIF()\n\tENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Setting Tesseract and Leptonica Directories in CMake\nDESCRIPTION: Defines CMake variables pointing to the Tesseract source, include directories, and the Leptonica source directory. These variables are used throughout the script to locate Tesseract and Leptonica files.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/tesseract/libtesseract/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n#SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} \"${CMAKE_CURRENT_SOURCE_DIR}../../../opencv/cmake\")\n#include(OpenCVCompilerOptimizations)\n\n#cmake_minimum_required(VERSION 2.8)\nSET(TESSERACT_DIR \"tesseract-ocr.git\")\nSET(TESSERACT_SRC_DIR \"${TESSERACT_DIR}/src\")\nSET(TESSERACT_INCLUDE_DIR \"${TESSERACT_DIR}/include\")\nSET(LEPTONICA_DIR \"${LEPT_ROOT_DIR}/src\")\n```\n\n----------------------------------------\n\nTITLE: Determining CUFFT Library Postfix for Windows with CMake\nDESCRIPTION: Sets the `CUFFT_POSTFIX` variable specifically for Windows builds (when `WIN32` is true). The value depends on the NPP library version: if NPP major version is greater than 10, or if it's 10 and minor is greater than 0, the postfix is set to the CUDA major version (fallback to NPP major if CUDA major is unavailable). Otherwise (for older NPP versions), the postfix combines the NPP major and minor versions. This postfix helps in constructing the correct filename for the CUFFT library.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_76\n\nLANGUAGE: cmake\nCODE:\n```\n\tIF(WIN32)\n\t  IF((${npp_major} GREATER 10) OR ((\"${npp_major}\" STREQUAL \"10\") AND (${npp_minor} GREATER 0)))\n\t    IF (${cuda_major})\n\t      SET(CUFFT_POSTFIX \"${cuda_major}\")\n\t    else()\n\t      SET(CUFFT_POSTFIX \"${npp_major}\")\n\t    endif()\n\t  ELSE()\n\t    SET(CUFFT_POSTFIX \"${npp_major}${npp_minor}\")\n\t  ENDIF()\n\tENDIF()\n```\n\n----------------------------------------\n\nTITLE: Defining xtiff Static Library Target in CMake\nDESCRIPTION: This snippet defines a static library target named 'xtiff' using the source file 'xtiff.c' located in the 'libxtiff' directory relative to LIBGEOTIFF_DIR. It includes the TIFF include directory and conditionally sets the platform toolset if EMGUCV_PLATFORM_TOOLSET is defined. Finally, it assigns the target to the '3rdparty' folder in IDEs like Visual Studio.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/libgeotiff/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# Build libxtiff library\nPROJECT(xtiff)\ninclude_directories( ${TIFF_INCLUDE_DIR})\nADD_LIBRARY(${PROJECT_NAME} STATIC \"${LIBGEOTIFF_DIR}/libxtiff/xtiff.c\")\nIF(DEFINED EMGUCV_PLATFORM_TOOLSET)\n  set_target_properties(${PROJECT_NAME} PROPERTIES PLATFORM_TOOLSET ${EMGUCV_PLATFORM_TOOLSET})\nENDIF()\nset_target_properties(${PROJECT_NAME} PROPERTIES FOLDER \"3rdparty\")\n```\n\n----------------------------------------\n\nTITLE: Setting Platform Toolset Property\nDESCRIPTION: Checks if the `EMGUCV_PLATFORM_TOOLSET` variable is defined. If it is, this block sets the `PLATFORM_TOOLSET` property for the target, allowing specification of a particular toolset (e.g., a specific Visual Studio version) for the build.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/tests/cvextern_test/CMakeLists.txt#_snippet_23\n\nLANGUAGE: cmake\nCODE:\n```\nIF(DEFINED EMGUCV_PLATFORM_TOOLSET)\n  set_target_properties(${the_target} PROPERTIES PLATFORM_TOOLSET ${EMGUCV_PLATFORM_TOOLSET})\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Conditional Build Guard for Non-Debian ARM Builds\nDESCRIPTION: This block ensures that the entire build configuration for `cvextern_test` is skipped if the `IS_DEBIAN_ARM_BUILD` variable is set to true. All subsequent CMake commands within this file are only processed if this condition is false.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/tests/cvextern_test/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nIF(NOT IS_DEBIAN_ARM_BUILD)\n```\n\n----------------------------------------\n\nTITLE: Including Module-Specific Header Files - CMake\nDESCRIPTION: These code snippets perform conditional inclusion of C/C++ header files for specific OpenCV modules. This ensures that generated code can access the needed class/property definitions and functions, with proper preprocessing guards, enabling cross-module development and extension. The include directives are wrapped within empty lines for separation but are essential dependencies for later macro-driven binding code.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_67\n\nLANGUAGE: CMake\nCODE:\n```\n#include \\\"stereo_c.h\\\"\n```\n\nLANGUAGE: CMake\nCODE:\n```\n#include \\\"structured_light_c.h\\\"\n```\n\nLANGUAGE: CMake\nCODE:\n```\n#include \\\"ximgproc_c.h\\\"\n```\n\nLANGUAGE: CMake\nCODE:\n```\n#include \\\"surface_matching_c.h\\\"\n```\n\nLANGUAGE: CMake\nCODE:\n```\n#include \\\"rgbd_c.h\\\"\n```\n\nLANGUAGE: CMake\nCODE:\n```\n#include \\\"depthai_c.h\\\"\n```\n\n----------------------------------------\n\nTITLE: Generating geo_config.h Header File in CMake\nDESCRIPTION: This snippet uses the `CONFIGURE_FILE` command to generate the `geo_config.h` header file. It takes the template file `geo_config.h.in` (located in a cmake subdirectory relative to `LIBGEOTIFF_DIR`) and processes it, substituting CMake variables (like HAVE_TIFF, HAVE_LIBPROJ, etc.) to create the final `geo_config.h` file in the `LIBGEOTIFF_DIR`. Status messages indicate the start and completion of the generation process.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/libgeotiff/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\n# Generate geo_config.h with compile-time configuration\n\nMESSAGE(STATUS \"Generating geo_config.h header\")\n\nCONFIGURE_FILE(${LIBGEOTIFF_DIR}/../cmake/geo_config.h.in\n    ${LIBGEOTIFF_DIR}/geo_config.h)\n\nMESSAGE(STATUS \"Generating geo_config.h header - done\")\n```\n\n----------------------------------------\n\nTITLE: Configuring GeoTIFF EPSG Table Source in CMake\nDESCRIPTION: This snippet defines a boolean cache variable `GEOTIFF_ENABLE_INCODE_EPSG`, defaulting to FALSE. This variable controls whether the library uses EPSG tables compiled directly into the code instead of reading them from external CSV files at runtime. A status message indicates the chosen setting.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/libgeotiff/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\n# Has the user requested \"incode\" EPSG tables, overriding the default\n# use of EPSG tables in csv files?\nSET(GEOTIFF_ENABLE_INCODE_EPSG FALSE CACHE BOOL\n    \"Choose if C code EPSG tables should be used\")\nMESSAGE(STATUS \"Enable in-code GeoTIFF EPSG tables: ${GEOTIFF_ENABLE_INCODE_EPSG}\")\n```\n\n----------------------------------------\n\nTITLE: Installing Source Files with Conditional Logic - CMake\nDESCRIPTION: This snippet defines a CMake install directive that copies all matching C# source and related project files from the current source directory to the installation destination. It includes conditional logic to restrict execution to compatible platforms and build scenarios. Dependencies include a configured CMake environment, and key parameters are the file patterns to include or exclude during installation. No output is produced unless the build flags and platform match the specified conditions.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Contrib/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# --------------------------------------------------------\\n#  Copyright (C) 2004-2025 by EMGU Corporation. All rights reserved.\\n# --------------------------------------------------------\\n\\nIF(EMGU_CV_BUILD OR EMGU_CV_EXAMPLE_BUILD)\\n\\nPROJECT(Emgu.CV.Contrib)\\n\\nIF(WIN32 OR APPLE OR ANDROID)\\n\\nINSTALL(\\n  DIRECTORY\\n  ${CMAKE_CURRENT_SOURCE_DIR}\\n  DESTINATION .\\n    COMPONENT emgucv_source\\n  FILES_MATCHING \\n  PATTERN \"*.cs\"\\n  PATTERN \"*.shproj\"\\n  PATTERN \"*.projitems\"\\n  PATTERN \"*.resx\"\\n  PATTERN \".svn\" EXCLUDE\\n  PATTERN \"obj\" EXCLUDE\\n  PATTERN \"CMakeFiles\" EXCLUDE\\n  PATTERN \"${PROJECT_NAME}.dir\" EXCLUDE\\n)\\n\\nENDIF()  \\n\\nENDIF()\\n\n```\n\n----------------------------------------\n\nTITLE: Conditionally Including EPSG CSV Source Files in CMake\nDESCRIPTION: Checks the CMake boolean variable `GEOTIFF_ENABLE_INCODE_EPSG`. If true, it sets the `GEOTIFF_LIB_CSV_SOURCES` variable to a list of C files (located in the `csv/` subdirectory relative to the CMakeLists.txt file) containing embedded EPSG data. This allows building libgeotiff with built-in projection data. The commented `SOURCE_GROUP` command would organize these files in IDEs if uncommented.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/libgeotiff/CMakeLists.txt#_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\nIF (GEOTIFF_ENABLE_INCODE_EPSG)\n    SET(GEOTIFF_LIB_CSV_SOURCES\n        csv/datum.c\n        csv/ellipsoid.c\n        csv/gcs.c\n        csv/pcs.c\n        csv/prime_meridian.c\n        csv/projop_wparm.c\n        csv/unit_of_measure.c)\n    #SOURCE_GROUP(\"CSV Source Files\" FILES ${GEOTIFF_LIB_CSV_SOURCES})\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Installing Emgu.CV SHFB Project File in CMake\nDESCRIPTION: This CMake `INSTALL` command installs the Sandcastle Help File Builder project file (`Emgu.CV.html.shfbproj`) from the current source directory into the `miscellaneous` subdirectory of the installation path. This installation rule is associated with the `emgucv_document` component.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/miscellaneous/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nINSTALL(\n  FILES\n  \"${CMAKE_CURRENT_SOURCE_DIR}/Emgu.CV.html.shfbproj\"\n  DESTINATION miscellaneous\n  COMPONENT emgucv_document\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting GeoTIFF Installation Subdirectory Variables in CMake\nDESCRIPTION: Defines CMake cache variables (GEOTIFF_BIN_SUBDIR, GEOTIFF_LIB_SUBDIR, GEOTIFF_INCLUDE_SUBDIR, GEOTIFF_DATA_SUBDIR) to specify the subdirectories for installing executables, libraries, headers, and data files respectively. Default values are platform-specific (using DEFAULT_* variables). These variables allow users to customize installation locations.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/libgeotiff/libgeotiff-1.4.0/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n# (default values are platform-specIFic)\nSET(GEOTIFF_BIN_SUBDIR ${DEFAULT_BIN_SUBDIR} CACHE STRING\n    \"Subdirectory where executables will be installed\")\nSET(GEOTIFF_LIB_SUBDIR ${DEFAULT_LIB_SUBDIR} CACHE STRING\n    \"Subdirectory where libraries will be installed\")\nSET(GEOTIFF_INCLUDE_SUBDIR ${DEFAULT_INCLUDE_SUBDIR} CACHE STRING\n    \"Subdirectory where header files will be installed\")\nSET(GEOTIFF_DATA_SUBDIR ${DEFAULT_DATA_SUBDIR} CACHE STRING\n    \"Subdirectory where data will be installed\")\n```\n\n----------------------------------------\n\nTITLE: Installing Tesseract License File in CMake\nDESCRIPTION: Installs the Tesseract LICENSE file into the 'lib' destination directory, renaming it to 'tesseract-ocr.license.txt'. This installation is associated with the 'emgucv_source' component.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/tesseract/libtesseract/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nINSTALL(\n  FILES\n  \"${TESSERACT_DIR}/LICENSE\"\n  DESTINATION \"lib\"\n  COMPONENT emgucv_source\n  RENAME \"tesseract-ocr.license.txt\"\n  )\n```\n\n----------------------------------------\n\nTITLE: Filtering Files and Replacing Text using Unix Find and Sed - Shell\nDESCRIPTION: This shell snippet finds all files in the project directory, excluding '.git', image files ('*.png', '*.jpg'), binaries ('*.dll'), and '.gitmodules', and performs an in-place replacement of '2004-2024 by EMGU Corporation' with '2004-2025 by EMGU Corporation' using 'sed'. Dependencies include a Unix-like environment with 'find' and 'sed' installed. The command takes no parameters but operates on the current directory, and outputs modified files in-place. It is limited by platform compatibility and file system permissions.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/miscellaneous/HeaderUpgradeScript.txt#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n#find -name .git -prune -o -name *.png -prune -o -name *.jpg -prune -o -name *.dll -prune -o -name .gitmodules -prune -o -type f -print\nfind -name .git -prune -o -name *.png -prune -o -name *.jpg -prune -o -name *.dll -prune -o -name .gitmodules -prune -o -type f -exec sed -i 's/2004-2024 by EMGU Corporation/2004-2025 by EMGU Corporation/g' {} \\;\n```\n\n----------------------------------------\n\nTITLE: Commented: Setting CPACK_STRIP_FILES with CMake\nDESCRIPTION: This commented-out CMake command sets the `CPACK_STRIP_FILES` variable to an empty string. This variable typically controls whether CPack should strip binaries included in the package. This snippet is currently inactive.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_97\n\nLANGUAGE: CMake\nCODE:\n```\n#SET(CPACK_STRIP_FILES \"\")\n```\n\n----------------------------------------\n\nTITLE: Default Installation Paths for NVIDIA CUDA Toolkit\nDESCRIPTION: Specifies the default directory locations where the NVIDIA CUDA Toolkit is installed on Windows, Linux, and Mac operating systems. The '#.#' represents the specific version number.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/platforms/nuget/Emgu.runtime.windows.cuda.rt/EULA.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nWindows platform:\n\n%ProgramFiles%\\NVIDIA GPU Computing Toolkit\\CUDA\\v#.#\n\nLinux platform:\n\n/usr/local/cuda-#.#\n\nMac platform:\n\n/Developer/NVIDIA/CUDA-#.#\n```\n\n----------------------------------------\n\nTITLE: Default Installation Paths for NVIDIA CUDA Samples\nDESCRIPTION: Provides the default locations for NVIDIA CUDA Samples installation on Windows, Linux, and Mac platforms. Note the multiple possible locations on Linux. The '#.#' indicates the specific version number.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/platforms/nuget/Emgu.runtime.windows.cuda.rt/EULA.txt#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nWindows platform:\n\n%ProgramData%\\NVIDIA Corporation\\CUDA Samples\\v#.#\n\nLinux platform:\n\n/usr/local/cuda-#.#/samples\n\nand\n\n$HOME/NVIDIA_CUDA-#.#_Samples\n\nMac platform:\n\n/Developer/NVIDIA/CUDA-#.#/samples\n```\n\n----------------------------------------\n\nTITLE: Default Installation Path for NVIDIA Nsight Visual Studio Edition (Windows)\nDESCRIPTION: Shows the default installation directory for NVIDIA Nsight Development Platform, Visual Studio Edition on Windows systems. The '#.#' represents the specific version number.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/platforms/nuget/Emgu.runtime.windows.cuda.rt/EULA.txt#_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nWindows platform:\n\n%ProgramFiles(x86)%\\NVIDIA Corporation\\Nsight Visual Studio Edition #.#\n```\n\n----------------------------------------\n\nTITLE: Required Notice for Distributing Modified Sample Source Code\nDESCRIPTION: Specifies the mandatory notice text that must be included in modifications and derivative works of NVIDIA sample source code when distributed, as per the license agreement's distribution requirements (Section 1.1.2).\nSOURCE: https://github.com/emgucv/emgucv/blob/master/platforms/nuget/Emgu.runtime.windows.cuda.rt/EULA.txt#_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n“This software contains source code provided by NVIDIA Corporation.”\n```\n\n----------------------------------------\n\nTITLE: Commented: Configuring DEB Package Generation with CMake\nDESCRIPTION: This commented-out CMake block configures CPack for generating Debian (.deb) packages. It checks if 'DEB' is in `CPACK_GENERATOR`, sets paths for control files, writes preinst, postinst, and prerm scripts using `FILE(WRITE)`, defines package priority and dependencies (conditionally adding Tesseract and TBB), and sets `CPACK_DEBIAN_PACKAGE_CONTROL_EXTRA`. This entire configuration block is currently inactive.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_102\n\nLANGUAGE: CMake\nCODE:\n```\n#LIST(FIND CPACK_GENERATOR \"DEB\" TEMP)\n#IF(NOT (${TEMP} EQUAL -1))\n#  SET(DEBIAN_CONTROL_FILE_FOLDER \"${CMAKE_CURRENT_SOURCE_DIR}/cmake/debian\")\n#  FILE(WRITE ${DEBIAN_CONTROL_FILE_FOLDER}/preinst ${PREINST_SCRIPT}) \n#  FILE(WRITE ${DEBIAN_CONTROL_FILE_FOLDER}/postinst\n#    \"#!/bin/sh\\nset -e\\nif [ \\\"$1\\\" = \\\"configure\\\" ]; then\\n  ldconfig\\n  ${MONO_GACUTIL_EXEC} -il /usr/${CPACK_PACKAGE_CLI_FOLDER}/clifilelist.txt -package ${CPACK_PACKAGE_NAME}\\nfi\\n\")\n#  FILE(WRITE ${DEBIAN_CONTROL_FILE_FOLDER}/prerm\n#    \"#!/bin/sh\\nset -e\\nif [ \\\"$1\\\" = \\\"remove\\\" ] || [ \\\"$1\\\" = \\\"upgrade\\\" ] && [ -x /usr/share/cli-common/gac-package-remove ]; then\\n${REMOVE_EMGU_FROM_GAC_SCRIPT}\\nfi\\n\")\n    \n#  SET(DEBIAN_PACKAGE_PRIORITY \"optional\")\n#  SET(CPACK_DEBIAN_PACKAGE_CONTROL_EXTRA \"${DEBIAN_CONTROL_FILE_FOLDER}/preinst;${DEBIAN_CONTROL_FILE_FOLDER}/postinst;${DEBIAN_CONTROL_FILE_FOLDER}/prerm;${DEBIAN_CONTROL_FILE_FOLDER}/postrm\")\n#  SET(CPACK_DEBIAN_PACKAGE_DEPENDS \"mono-runtime (>> 2.4.2), mono-2.0-gac, libtiff5, libgeotiff2, libgtk-3-0, libgstreamer1.0-0, libavcodec54, libswscale2, libavformat54, libopenexr6, libjasper1, libdc1394-22, libv4l-0, libqt4-opengl\")\n#  IF(EMGU_CV_WITH_TESSERACT)\n#    SET(CPACK_DEBIAN_PACKAGE_DEPENDS \"${CPACK_DEBIAN_PACKAGE_DEPENDS}, libtesseract3\")\n#  ENDIF()\n#  IF(WITH_TBB)\n#    SET(CPACK_DEBIAN_PACKAGE_DEPENDS \"${CPACK_DEBIAN_PACKAGE_DEPENDS}, libtbb2\")\n#  ENDIF()\n#ENDIF()\n```\n\n----------------------------------------\n\nTITLE: Defining Standard NuGet Files/Dependencies for Emgu.CV.Models (Commented Out)\nDESCRIPTION: This commented-out CMake block defines the standard files (DLL, XML, icon, license, README for netstandard2.0) and dependencies (System.Drawing.Common, Emgu.CV for netstandard2.0) for the Emgu.CV.Models NuGet package. It appends these definitions to the respective variables and wraps the dependencies in `<dependencies>` tags.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_63\n\nLANGUAGE: cmake\nCODE:\n```\n#SET(EMGUCV_MODELS_NUGET_FILE_LIST \"${EMGUCV_MODELS_NUGET_FILE_LIST} \n#    <file src=\\\"..\\\\..\\\\..\\\\libs\\\\Emgu.CV.Models.dll\\\" target=\\\"lib\\\\netstandard2.0\\\" />\n#    <file src=\\\"..\\\\..\\\\..\\\\libs\\\\Emgu.CV.Models.xml\\\" target=\\\"lib\\\\netstandard2.0\\\" />\n#    <file src=\\\"..\\\\..\\\\..\\\\miscellaneous\\\\nuget_icon.png\\\" target=\\\"icon.png\\\" />\n#    <file src=\\\"..\\\\..\\\\..\\\\${EMGUCV_LICENSE_FILE}\\\" target=\\\"\\\" />\n#\t<file src=\\\"README.md\\\" target=\\\"docs\\\\\\\" />\")\n#SET(EMGUCV_MODELS_NUGET_DEPENDENCY \"${EMGUCV_MODELS_NUGET_DEPENDENCY} \n#      <group targetFramework=\\\".NETStandard2.0\\\">\n#        <dependency id=\\\"System.Drawing.Common\\\" version=\\\"\\${NUGET_SYSTEM_DRAWING_COMMON_VERSION}\\\" exclude=\\\"Build,Analyzers\\\" />\n#        <dependency id=\\\"\\${EMGUCV_NUGET_ID}\\\" version=\\\"\\${CPACK_PACKAGE_DEPENDENCY_VERSION}\\\" />\n#      </group>\")\n#SET(EMGUCV_MODELS_NUGET_DEPENDENCY \"\n#\t<dependencies>\n#\\${EMGUCV_MODELS_NUGET_DEPENDENCY}\n#    </dependencies>\")\n```\n\n----------------------------------------\n\nTITLE: Defining NuGet Package Files/Dependencies for Emgu.CV.UI (Commented Out)\nDESCRIPTION: This commented-out CMake block defines the files (platform-specific DLLs/XMLs for .NET Framework 4.6.1 and .NET Core 3.1, icon, license, README) and dependencies (Emgu.CV.Bitmap) for the Emgu.CV.UI NuGet package. It also includes framework references for Windows Forms (.NET Core) and framework assemblies (.NET Framework). The definitions are grouped by target framework.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_65\n\nLANGUAGE: cmake\nCODE:\n```\n#  SET(EMGUCV_UI_NUGET_FILE_LIST \"${EMGUCV_UI_NUGET_FILE_LIST} \n#    <file src=\\\"..\\\\..\\\\..\\\\libs\\\\Emgu.CV.Platform.NetFramework.dll\\\" target=\\\"lib\\\\net461\\\" />\n#    <file src=\\\"..\\\\..\\\\..\\\\libs\\\\Emgu.CV.Platform.NetFramework.xml\\\" target=\\\"lib\\\\net461\\\" />\n#    <file src=\\\"..\\\\..\\\\..\\\\libs\\\\Emgu.CV.Platform.NetCore.dll\\\" target=\\\"lib\\\\netcoreapp3.1\\\" />\n#    <file src=\\\"..\\\\..\\\\..\\\\libs\\\\Emgu.CV.Platform.NetCore.xml\\\" target=\\\"lib\\\\netcoreapp3.1\\\" />\n#    <file src=\\\"..\\\\..\\\\..\\\\miscellaneous\\\\nuget_icon.png\\\" target=\\\"icon.png\\\" />\n#    <file src=\\\"..\\\\..\\\\..\\\\${EMGUCV_LICENSE_FILE}\\\" target=\\\"\\\" />\n#\t<file src=\\\"README.md\\\" target=\\\"docs\\\\\\\" />\")\n#  SET(EMGUCV_UI_NUGET_DEPENDENCY \"${EMGUCV_UI_NUGET_DEPENDENCY}\n#      <group targetFramework=\\\".NETFramework4.6.1\\\">\n#        <dependency id=\\\"\\${EMGUCV_BITMAP_NUGET_ID}\\\" version=\\\"\\${CPACK_PACKAGE_DEPENDENCY_VERSION}\\\" />\n#      </group>\")\n#  SET(EMGUCV_UI_NUGET_DEPENDENCY \"${EMGUCV_UI_NUGET_DEPENDENCY}\n#      <group targetFramework=\\\".NETCoreApp3.1\\\">\n#        <dependency id=\\\"\\${EMGUCV_BITMAP_NUGET_ID}\\\" version=\\\"\\${CPACK_PACKAGE_DEPENDENCY_VERSION}\\\" />\n#      </group>\")\n#  SET(EMGUCV_UI_NUGET_DEPENDENCY \"${EMGUCV_UI_NUGET_DEPENDENCY}\n#    <frameworkReferences>\n#      <group targetFramework=\\\".NETCoreApp3.1\\\">\n#        <frameworkReference name=\\\"Microsoft.WindowsDesktop.App.WindowsForms\\\" />\n#      </group>\n#    </frameworkReferences>\")\n#  SET(EMGUCV_UI_NUGET_DEPENDENCY \"\n#\t<dependencies>\n#\\${EMGUCV_UI_NUGET_DEPENDENCY}\n#    </dependencies>\n#    <frameworkAssemblies>\n#      <frameworkAssembly assemblyName=\\\"System.Windows.Forms\\\" targetFramework=\\\".NETFramework4.6.1\\\" />\n#    </frameworkAssemblies>\")\n```\n\n----------------------------------------\n\nTITLE: (Commented) Shared libgeotiff Library Definition and Configuration\nDESCRIPTION: This commented-out section shows how a shared library target (`${GEOTIFF_LIBRARY_TARGET}`) could be defined using the same source files. It includes commented code for potentially setting an import suffix for MSVC builds on Windows (`_i.lib`) and setting the output name to `${GEOTIFF_LIB_NAME}`.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/libgeotiff/CMakeLists.txt#_snippet_23\n\nLANGUAGE: cmake\nCODE:\n```\n# Shared libgeotiff library\n#ADD_LIBRARY(${GEOTIFF_LIBRARY_TARGET} SHARED\n#    ${GEOTIFF_LIB_SOURCES} ${GEOTIFF_LIB_CSV_SOURCES})\n\n#IF(WIN32 AND MSVC)\n#    SET_TARGET_PROPERTIES(${GEOTIFF_LIBRARY_TARGET} PROPERTIES IMPORT_SUFFIX \"_i.lib\")\n#ENDIF()\n\n#SET_TARGET_PROPERTIES(${GEOTIFF_LIBRARY_TARGET} PROPERTIES\n#    OUTPUT_NAME ${GEOTIFF_LIB_NAME})\n```\n\n----------------------------------------\n\nTITLE: Commented: Detecting DPKG Tool and Adding DEB Generator in CMake\nDESCRIPTION: This commented-out CMake code attempts to find the 'dpkg' command using `FIND_PROGRAM`. If found, it would print its path and add 'DEB' to the `CPACK_GENERATOR` list, enabling Debian package generation. This block is currently inactive.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_99\n\nLANGUAGE: CMake\nCODE:\n```\n    #FIND_PROGRAM(DPKG_CMD dpkg)\n    #IF (DPKG_CMD)\n      # ----------------------------------------------------------------------------\n      #  Building .deb package for Debian \n      # ----------------------------------------------------------------------------\n    #  MESSAGE(STATUS \"FOUND dpkg: ${DPKG_CMD}\")\n    #  LIST(APPEND CPACK_GENERATOR DEB)\n    #ENDIF()\n```\n\n----------------------------------------\n\nTITLE: Conditionally Defining iOS-Specific NuGet Files/Dependencies for Emgu.CV.Models (Commented Out)\nDESCRIPTION: This commented-out CMake block intended to conditionally add iOS-specific files (DLLs, XMLs for MAUI macOS and iOS targets) and dependencies (System.Drawing.Common, Emgu.CV) to the Emgu.CV.Models NuGet package configuration if the `HAVE_IOS` variable was true. The file paths target specific MAUI folders.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_62\n\nLANGUAGE: cmake\nCODE:\n```\n#IF (HAVE_IOS)\n  #SET(EMGUCV_MODELS_NUGET_FILE_LIST \"${EMGUCV_MODELS_NUGET_FILE_LIST} \n#\t<file src=\\\"..\\\\..\\\\..\\\\libs\\\\iOS\\\\Emgu.CV.Models.dll\\\" target=\\\"lib\\\\${EMGUCV_MAUI_MACOS_DST_FOLDER}\\\" />\n#    <file src=\\\"..\\\\..\\\\..\\\\libs\\\\iOS\\\\Emgu.CV.Models.xml\\\" target=\\\"lib\\\\${EMGUCV_MAUI_MACOS_DST_FOLDER}\\\" />\n#\t<file src=\\\"..\\\\..\\\\..\\\\libs\\\\iOS\\\\Emgu.CV.Models.dll\\\" target=\\\"lib\\\\${EMGUCV_MAUI_IOS_DST_FOLDER}\\\" />\n#    <file src=\\\"..\\\\..\\\\..\\\\libs\\\\iOS\\\\Emgu.CV.Models.xml\\\" target=\\\"lib\\\\${EMGUCV_MAUI_IOS_DST_FOLDER}\\\" />\n#\t\")\n#  SET(EMGUCV_MODELS_NUGET_DEPENDENCY \"${EMGUCV_MODELS_NUGET_DEPENDENCY}\n#\t  <group targetFramework=\\\"\\${EMGUCV_MAUI_MACOS_DST_FOLDER}\\\">\n#        <dependency id=\\\"System.Drawing.Common\\\" version=\\\"\\${NUGET_SYSTEM_DRAWING_COMMON_VERSION}\\\" exclude=\\\"Build,Analyzers\\\" />\n#        <dependency id=\\\"\\${EMGUCV_NUGET_ID}\\\" version=\\\"\\${CPACK_PACKAGE_DEPENDENCY_VERSION}\\\" />\n#      </group>\n#\t  <group targetFramework=\\\"\\${EMGUCV_MAUI_IOS_DST_FOLDER}\\\">\n#        <dependency id=\\\"System.Drawing.Common\\\" version=\\\"\\${NUGET_SYSTEM_DRAWING_COMMON_VERSION}\\\" exclude=\\\"Build,Analyzers\\\" />\n#        <dependency id=\\\"\\${EMGUCV_NUGET_ID}\\\" version=\\\"\\${CPACK_PACKAGE_DEPENDENCY_VERSION}\\\" />\n#      </group>\")\n#ENDIF()\n```\n\n----------------------------------------\n\nTITLE: Conditional Atomic Linking for ARM Debian (Commented Out)\nDESCRIPTION: This commented-out block was intended to link the `atomic` library for builds targeting Debian on ARM (`IS_DEBIAN_ARM_BUILD`). It demonstrates different ways to specify linking against the atomic library.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/tests/cvextern_test/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\n#IF(IS_DEBIAN_ARM_BUILD)\n#  MESSAGE(STATUS \"----------------------------- Linking with atomic on arm debian build ---------------------------\")\n#  #target_link_libraries(${the_target} atomic)\n#  target_link_libraries(${the_target} -latomic)\n#  target_link_options(${the_target} PRIVATE -latomic)\n#  SET(CMAKE_EXE_LINKER_FLAGS ${CMAKE_EXE_LINKER_FLAGS} -latomic)\n#ENDIF()\n```\n\n----------------------------------------\n\nTITLE: Commented: Defining Pre-installation Script Content with CMake\nDESCRIPTION: This commented-out CMake code defines a simple shell script content (`PREINST_SCRIPT`) intended for pre-installation steps. The script creates necessary directories for the package installation. This variable would likely be used later to write a preinst script file. This snippet is currently inactive.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_101\n\nLANGUAGE: CMake\nCODE:\n```\n#SET(PREINST_SCRIPT \"#!/bin/sh\\nmkdir -p /usr/lib/pkgconfig /usr/${CPACK_PACKAGE_CLI_FOLDER} /usr/share/opencv/haarcascades /usr/share/opencv/lbpcascades /usr/share/opencv/doc \\n\")\n```\n\n----------------------------------------\n\nTITLE: Commented: Appending Specific Inference Engine Plugin DLLs\nDESCRIPTION: This commented-out section lists potential commands to explicitly append paths for various Intel Inference Engine plugin DLLs (e.g., inference_engine.dll, MKLDNNPlugin.dll, myriadPlugin.dll) and their dependencies to the `CVEXTERN_DEPENDENCY_DLLS` list. These lines are currently inactive.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/Emgu.CV.Extern/CMakeLists.txt#_snippet_96\n\nLANGUAGE: cmake\nCODE:\n```\n\t##Add the inference_engine dll\n\t#LIST(APPEND CVEXTERN_DEPENDENCY_DLLS \"${INF_ENGINE_DLL_DIRS}/inference_engine.dll\")\n\t##Add CPU ingerence plugin and dependency\n\t#LIST(APPEND CVEXTERN_DEPENDENCY_DLLS \"${INF_ENGINE_DLL_DIRS}/MKLDNNPlugin.dll\")\n\t#LIST(APPEND CVEXTERN_DEPENDENCY_DLLS \"${INF_ENGINE_DLL_DIRS}/mkl_tiny.dll\")\n\t#LIST(APPEND CVEXTERN_DEPENDENCY_DLLS \"${INF_ENGINE_DLL_DIRS}/libiomp5md.dll\")\n\t##Add Intel Integrated Graphics plugin and dependency\n\t#LIST(APPEND CVEXTERN_DEPENDENCY_DLLS \"${INF_ENGINE_DLL_DIRS}/clDNNPlugin.dll\")\n\t#LIST(APPEND CVEXTERN_DEPENDENCY_DLLS \"${INF_ENGINE_DLL_DIRS}/clDNN64.dll\")\n\t##Add Heterogeneous plugin and dependency\n\t#LIST(APPEND CVEXTERN_DEPENDENCY_DLLS \"${INF_ENGINE_DLL_DIRS}/HeteroPlugin.dll\")\n\t##Add HDDL plugin and dependency\n\t#LIST(APPEND CVEXTERN_DEPENDENCY_DLLS \"${INF_ENGINE_DLL_DIRS}/clDNN64.dll\")\n\t##Add Myriad plugin and dependency\n\t#LIST(APPEND CVEXTERN_DEPENDENCY_DLLS \"${INF_ENGINE_DLL_DIRS}/myriadPlugin.dll\")\n\t##Add GNA plugin and dependency\n\t#LIST(APPEND CVEXTERN_DEPENDENCY_DLLS \"${INF_ENGINE_DLL_DIRS}/GNAPlugin.dll\")\n\t#LIST(APPEND CVEXTERN_DEPENDENCY_DLLS \"${INF_ENGINE_DLL_DIRS}/gna.dll\")\n  ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Commented: Detecting RPMBUILD Tool and Adding RPM Generator in CMake\nDESCRIPTION: This commented-out CMake code attempts to find the 'rpmbuild' command using `FIND_PROGRAM`. If found, it would print its path and add 'RPM' to the `CPACK_GENERATOR` list, enabling RPM package generation. This block is currently inactive.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_100\n\nLANGUAGE: CMake\nCODE:\n```\n    #FIND_PROGRAM(RPMBUILD_CMD rpmbuild)\n    #IF(RPMBUILD_CMD)\n      # ----------------------------------------------------------------------------\n      #  Building .rpm package  \n      # ----------------------------------------------------------------------------\n    #  MESSAGE(STATUS \"FOUND rpmbuild: ${RPMBUILD_CMD}\")\n    #  LIST(APPEND CPACK_GENERATOR RPM)\n    #ENDIF()\n  ENDIF()\n```\n\n----------------------------------------\n\nTITLE: Commented: Configuring RPM Package Generation with CMake\nDESCRIPTION: This commented-out CMake block configures CPack for generating RPM packages. It checks if 'RPM' is in `CPACK_GENERATOR`, sets the license and required dependencies (conditionally adding TBB and Tesseract), defines paths for control files, writes preinst, postinst, and prerm scripts using `FILE(WRITE)`, and sets the corresponding CPack RPM script variables (`CPACK_RPM_*_SCRIPT_FILE`). This entire configuration block is currently inactive.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_103\n\nLANGUAGE: CMake\nCODE:\n```\n#LIST(FIND CPACK_GENERATOR \"RPM\" TEMP)\n#IF(NOT (${TEMP} EQUAL -1))  \n#  SET(CPACK_RPM_PACKAGE_LICENSE \"GPL v3\")\n#  SET(CPACK_RPM_PACKAGE_REQUIRES \"mono-core >= 2.6, mono-wcf, jasper, libgeotiff, gtk2, OpenEXR, libv4l, libdc1394, qt\")\n#  IF (WITH_TBB)\n#    SET(CPACK_RPM_PACKAGE_REQUIRES \", tbb\")\n#  ENDIF()\n#  IF(EMGUCV_WITH_TESSERACT AND TESSERACT_FOUND)\n#    SET(CPACK_RPM_PACKAGE_REQUIRES \", tesseract\")\n#  ENDIF()    \n#  SET(RPM_CONTROL_FILE_FOLDER \"${CMAKE_CURRENT_SOURCE_DIR}/cmake/rpm\")\n#  FILE(WRITE ${RPM_CONTROL_FILE_FOLDER}/preinst ${PREINST_SCRIPT})\n#  FILE(WRITE ${RPM_CONTROL_FILE_FOLDER}/postinst\n#    \"ldconfig\\n${MONO_GACUTIL_EXEC} -il /usr/${CPACK_PACKAGE_CLI_FOLDER}/clifilelist.txt -package ${CPACK_PACKAGE_NAME}\\n\")\n#  FILE(WRITE ${RPM_CONTROL_FILE_FOLDER}/prerm\n#    \"${REMOVE_EMGU_FROM_GAC_SCRIPT}\\n\")\n#  SET(CPACK_RPM_PRE_INSTALL_SCRIPT_FILE \"${RPM_CONTROL_FILE_FOLDER}/preinst\")\n#  SET(CPACK_RPM_POST_INSTALL_SCRIPT_FILE \"${RPM_CONTROL_FILE_FOLDER}/postinst\")\n#  SET(CPACK_RPM_PRE_UNINSTALL_SCRIPT_FILE \"${RPM_CONTROL_FILE_FOLDER}/prerm\")\n#  SET(CPACK_RPM_POST_UNINSTALL_SCRIPT_FILE \"${RPM_CONTROL_FILE_FOLDER}/postrm\")\n#ENDIF()\t\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Conditional Configuration for Intel IPP (Commented Out)\nDESCRIPTION: This section contains commented-out CMake code intended to find and configure the Intel Integrated Performance Primitives (IPP) library if the `WITH_IPP` flag is enabled. It would add definitions, include directories, and link directories if IPP is found.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/tests/cvextern_test/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n############################### IPP START ##############################\n#IF(WITH_IPP)\n#include(${OPENCV_SUBFOLDER}/cmake/OpenCVFindIPP.cmake)\n#  IF (IPP_FOUND)\n#    message(STATUS \"CVEXTERN: USING IPP: ${IPP_LIBRARY_DIRS} \")\n#    add_definitions(-DHAVE_IPP)\n#    include_directories(${IPP_INCLUDE_DIRS})\n#    LINK_DIRECTORIES(${IPP_LIBRARY_DIRS})\n#  ENDIF()\n#ENDIF()\n############################### IPP END ################################\n```\n\n----------------------------------------\n\nTITLE: Commented: Installing pkgconfig File with CMake\nDESCRIPTION: This commented-out CMake code demonstrates how to install a pkgconfig (.pc) file using the `install` command. It specifies the source file path using variables and sets the destination directory to `/usr/lib/pkgconfig`. This snippet is currently inactive.\nSOURCE: https://github.com/emgucv/emgucv/blob/master/CMakeLists.txt#_snippet_95\n\nLANGUAGE: CMake\nCODE:\n```\n#  ${LINUX_CONTROL_FILE_FOLDER}/${CPACK_PACKAGE_NAME}.pc\n#  DESTINATION /usr/lib/pkgconfig\n#  COMPONENT emgucv_binary)\n```"
  }
]