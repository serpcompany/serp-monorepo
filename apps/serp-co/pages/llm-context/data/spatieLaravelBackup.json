[
  {
    "owner": "spatie",
    "repo": "laravel-backup",
    "content": "TITLE: Laravel Backup Default Configuration\nDESCRIPTION: Complete default configuration file for the Laravel backup package, including backup sources, database settings, notification options, and cleanup strategies.\nSOURCE: https://github.com/spatie/laravel-backup/blob/main/docs/installation-and-setup.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n\n    'backup' => [\n\n        /*\n         * The name of this application. You can use this name to monitor\n         * the backups.\n         */\n        'name' => env('APP_NAME', 'laravel-backup'),\n\n        'source' => [\n\n            'files' => [\n\n                /*\n                 * The list of directories and files that will be included in the backup.\n                 */\n                'include' => [\n                    base_path(),\n                ],\n\n                /*\n                 * These directories and files will be excluded from the backup.\n                 *\n                 * Directories used by the backup process will automatically be excluded.\n                 */\n                'exclude' => [\n                    base_path('vendor'),\n                    base_path('node_modules'),\n                ],\n\n                /*\n                 * Determines if symlinks should be followed.\n                 */\n                'follow_links' => false,\n\n                /*\n                 * Determines if it should avoid unreadable folders.\n                 */\n                'ignore_unreadable_directories' => false,\n\n                /*\n                 * This path is used to make directories in resulting zip-file relative\n                 * Set to `null` to include complete absolute path\n                 * Example: base_path()\n                 */\n                'relative_path' => null,\n            ],\n\n            /*\n             * The names of the connections to the databases that should be backed up\n             * MySQL, PostgreSQL, SQLite and Mongo databases are supported.\n             */\n            'databases' => [\n                'mysql',\n            ],\n        ],\n\n        'database_dump_compressor' => null,\n\n        'database_dump_file_timestamp_format' => null,\n\n        'database_dump_filename_base' => 'database',\n\n        'database_dump_file_extension' => '',\n\n        'destination' => [\n\n            'filename_prefix' => '',\n\n            'disks' => [\n                'local',\n            ],\n        ],\n\n        'temporary_directory' => storage_path('app/backup-temp'),\n\n        'password' => env('BACKUP_ARCHIVE_PASSWORD'),\n\n        'encryption' => 'default',\n    ],\n\n    'notifications' => [\n\n        'notifications' => [\n            \\Spatie\\Backup\\Notifications\\Notifications\\BackupHasFailedNotification::class => ['mail'],\n            \\Spatie\\Backup\\Notifications\\Notifications\\UnhealthyBackupWasFoundNotification::class => ['mail'],\n            \\Spatie\\Backup\\Notifications\\Notifications\\CleanupHasFailedNotification::class => ['mail'],\n            \\Spatie\\Backup\\Notifications\\Notifications\\BackupWasSuccessfulNotification::class => ['mail'],\n            \\Spatie\\Backup\\Notifications\\Notifications\\HealthyBackupWasFoundNotification::class => ['mail'],\n            \\Spatie\\Backup\\Notifications\\Notifications\\CleanupWasSuccessfulNotification::class => ['mail'],\n        ],\n\n        'notifiable' => \\Spatie\\Backup\\Notifications\\Notifiable::class,\n\n        'mail' => [\n            'to' => 'your@example.com',\n\n            'from' => [\n                'address' => env('MAIL_FROM_ADDRESS', 'hello@example.com'),\n                'name' => env('MAIL_FROM_NAME', 'Example'),\n            ],\n        ],\n\n        'slack' => [\n            'webhook_url' => '',\n            'channel' => null,\n            'username' => null,\n            'icon' => null,\n        ],\n\n        'discord' => [\n            'webhook_url' => '',\n            'username' => '',\n            'avatar_url' => '',\n        ],\n    ],\n\n    'monitor_backups' => [\n        [\n            'name' => env('APP_NAME', 'laravel-backup'),\n            'disks' => ['local'],\n            'health_checks' => [\n                \\Spatie\\Backup\\Tasks\\Monitor\\HealthChecks\\MaximumAgeInDays::class => 1,\n                \\Spatie\\Backup\\Tasks\\Monitor\\HealthChecks\\MaximumStorageInMegabytes::class => 5000,\n            ],\n        ],\n    ],\n\n    'cleanup' => [\n        'strategy' => \\Spatie\\Backup\\Tasks\\Cleanup\\Strategies\\DefaultStrategy::class,\n\n        'default_strategy' => [\n            'keep_all_backups_for_days' => 7,\n            'keep_daily_backups_for_days' => 16,\n            'keep_weekly_backups_for_weeks' => 8,\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Backup Content and Destinations in Laravel\nDESCRIPTION: This configuration snippet defines the content to be included in backups, including files, directories, and databases. It also specifies the destination disks for storing backups.\nSOURCE: https://github.com/spatie/laravel-backup/blob/main/docs/taking-backups/overview.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n'backup' => [\n\n     /*\n      * The name of this application. You can use this name to monitor\n      * the backups.\n      */\n     'name' => env('APP_NAME', 'laravel-backup'),\n\n     'source' => [\n\n         'files' => [\n\n             /*\n              * The list of directories and files that will be included in the backup.\n              */\n             'include' => [\n                 base_path(),\n             ],\n\n             /*\n              * These directories and files will be excluded from the backup.\n              */\n             'exclude' => [\n                 base_path('vendor'),\n                 base_path('node_modules'),\n             ],\n\n             /*\n              * Determines if symlinks should be followed.\n              */\n             'follow_links' => false,\n\n            /*\n             * This path is used to make directories in resulting zip-file relative\n             * Set to false to include complete absolute path\n             * Example: base_path()\n             */\n            'relative_path' => false,\n         ],\n\n         /*\n          * The names of the connections to the databases that should be backed up\n          * MySQL, PostgreSQL, SQLite and Mongo databases are supported.\n          */\n         'databases' => [\n             'mysql',\n         ],\n     ],\n\n     'destination' => [\n\n         /*\n          * The disk names on which the backups will be stored.\n          */\n         'disks' => [\n             'local',\n         ],\n     ],\n]\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Files to Backup Using Event Listener in PHP\nDESCRIPTION: Example event listener implementation that demonstrates how to add extra files to the backup manifest by listening for the BackupManifestWasCreated event and calling the addFiles() method with an array of file paths.\nSOURCE: https://github.com/spatie/laravel-backup/blob/main/docs/advanced-usage/adding-extra-files-to-a-backup.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Spatie\\Backup\\Events\\BackupManifestWasCreated;\n\nEvent::listen(BackupManifestWasCreated::class, function (BackupManifestWasCreated $event) {\n   $event->manifest->addFiles([$path1, $path2, ...]);\n});\n```\n\n----------------------------------------\n\nTITLE: Scheduling Laravel Backup Commands in Console Kernel\nDESCRIPTION: Configuration for scheduling daily backup and cleanup commands in Laravel's Console Kernel. Sets backup cleaning at 1:00 AM and backup execution at 1:30 AM.\nSOURCE: https://github.com/spatie/laravel-backup/blob/main/docs/installation-and-setup.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nprotected function schedule(Schedule $schedule)\n{\n   $schedule->command('backup:clean')->daily()->at('01:00');\n   $schedule->command('backup:run')->daily()->at('01:30');\n}\n```\n\n----------------------------------------\n\nTITLE: Running Backup Commands in Laravel\nDESCRIPTION: These commands demonstrate how to run backups using the Laravel Backup package. Options include backing up to specific disks, backing up only the database, or only files.\nSOURCE: https://github.com/spatie/laravel-backup/blob/main/docs/taking-backups/overview.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan backup:run\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan backup:run --only-to-disk=name-of-your-disk\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan backup:run --only-db\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan backup:run --only-files\n```\n\n----------------------------------------\n\nTITLE: Configuring Backup Cleanup Strategy in Laravel\nDESCRIPTION: This configuration snippet from 'config/backup.php' defines the cleanup strategy and retention rules for backups. It specifies how long to keep backups of different frequencies and sets a maximum storage limit.\nSOURCE: https://github.com/spatie/laravel-backup/blob/main/docs/cleaning-up-old-backups/overview.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n//config/backup.php\n\n    'cleanup' => [\n        /*\n         * The strategy that will be used to cleanup old backups. The default strategy\n         * will keep all backups for a certain amount of days. After that period only\n         * a daily backup will be kept. After that period only weekly backups will\n         * be kept and so on.\n         *\n         * No matter how you configure it the default strategy will never\n         * delete the newest backup.\n         */\n        'strategy' => \\Spatie\\Backup\\Tasks\\Cleanup\\Strategies\\DefaultStrategy::class,\n\n        'default_strategy' => [\n\n            /*\n             * The number of days that all backups must be kept.\n             */\n            'keep_all_backups_for_days' => 7,\n\n            /*\n             * The number of days that all daily backups must be kept.\n             */\n            'keep_daily_backups_for_days' => 16,\n\n            /*\n             * The number of weeks of which one weekly backup must be kept.\n             */\n            'keep_weekly_backups_for_weeks' => 8,\n\n            /*\n             * The number of months of which one monthly backup must be kept.\n             */\n            'keep_monthly_backups_for_months' => 4,\n\n            /*\n             * The number of years of which one yearly backup must be kept.\n             */\n            'keep_yearly_backups_for_years' => 2,\n\n            /*\n             * After cleaning up the backups remove the oldest backup until\n             * this amount of megabytes has been reached.\n             * Set null for unlimited size.\n             */\n            'delete_oldest_backups_when_using_more_megabytes_than' => 5000,\n        ],\n    ],\n```\n\n----------------------------------------\n\nTITLE: Configuring Laravel Backup Notifications in config/backup.php\nDESCRIPTION: This code snippet shows the notification configuration section from the backup.php config file. It defines which events trigger notifications, which channels to use (mail, Slack), and the notification recipients. The configuration includes options for email addresses and Slack webhook details.\nSOURCE: https://github.com/spatie/laravel-backup/blob/main/docs/sending-notifications/overview.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n//config/backup.php\n\n    /*\n     * You can get notified when specific events occur. Out of the box you can use 'mail' and 'slack'.\n     * For Slack you need to install laravel/slack-notification-channel.\n     *\n     * You can also use your own notification classes, just make sure the class is named after one of\n     * the `Spatie\\Backup\\Events` classes.\n     */\n    'notifications' => [\n\n        'notifications' => [\n            \\Spatie\\Backup\\Notifications\\Notifications\\BackupHasFailedNotification::class => ['mail'],\n            \\Spatie\\Backup\\Notifications\\Notifications\\UnhealthyBackupWasFoundNotification::class => ['mail'],\n            \\Spatie\\Backup\\Notifications\\Notifications\\CleanupHasFailedNotification::class => ['mail'],\n            \\Spatie\\Backup\\Notifications\\Notifications\\BackupWasSuccessfulNotification::class => ['mail'],\n            \\Spatie\\Backup\\Notifications\\Notifications\\HealthyBackupWasFoundNotification::class => ['mail'],\n            \\Spatie\\Backup\\Notifications\\Notifications\\CleanupWasSuccessfulNotification::class => ['mail'],\n        ],\n\n        /*\n         * Here you can specify the notifiable to which the notifications should be sent. The default\n         * notifiable will use the variables specified in this config file.\n         */\n        'notifiable' => \\Spatie\\Backup\\Notifications\\Notifiable::class,\n\n        'mail' => [\n            'to' => 'your@example.com',\n\n            'from' => [\n                'address' => env('MAIL_FROM_ADDRESS', 'hello@example.com'),\n                'name' => env('MAIL_FROM_NAME', 'Example'),\n            ],\n        ],\n\n        'slack' => [\n            'webhook_url' => '',\n\n            /*\n             * If this is set to null the default channel of the webhook will be used.\n             */\n            'channel' => null,\n\n            'username' => null,\n\n            'icon' => null,\n\n        ],\n    ],\n```\n\n----------------------------------------\n\nTITLE: Configuring backup monitoring settings in Laravel\nDESCRIPTION: Configuration that specifies which applications should be monitored and when backups are considered unhealthy based on age and storage size.\nSOURCE: https://github.com/spatie/laravel-backup/blob/main/docs/monitoring-the-health-of-all-backups/overview.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n//config/backup.php\n\n    /*\n     *  In this array you can specify which backups should be monitored.\n     *  If a backup does not meet the specified requirements the\n     *  UnHealthyBackupWasFound-event will be fired.\n     */\n    'monitor_backups' => [\n        [\n            'name' => env('APP_NAME'),\n            'disks' => ['s3'],\n            'health_checks' => [\n                \\Spatie\\Backup\\Tasks\\Monitor\\HealthChecks\\MaximumAgeInDays::class => 1,\n                \\Spatie\\Backup\\Tasks\\Monitor\\HealthChecks\\MaximumStorageInMegabytes::class => 5000,\n            ],\n        ],\n\n        /*\n        [\n            'name' => 'name of the second app',\n            'disks' => ['s3'],\n            'health_checks' => [\n                \\Spatie\\Backup\\Tasks\\Monitor\\HealthChecks\\MaximumAgeInDays::class => 1,\n                \\Spatie\\Backup\\Tasks\\Monitor\\HealthChecks\\MaximumStorageInMegabytes::class => 5000,\n            ],\n        ],\n        */\n    ],\n```\n\n----------------------------------------\n\nTITLE: Configuring Backup Destinations in Laravel\nDESCRIPTION: This configuration snippet shows how to specify the destination disks for storing backups. It's recommended to use external services or servers for backup storage.\nSOURCE: https://github.com/spatie/laravel-backup/blob/main/docs/taking-backups/overview.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n    'destination' => [\n\n       /*\n        * The disk names on which the backups will be stored. \n        */\n        'disks' => [\n            'local'\n        ],\n    ],\n```\n\n----------------------------------------\n\nTITLE: Installing Laravel Backup Package via Composer\nDESCRIPTION: Command to install the spatie/laravel-backup package using Composer package manager.\nSOURCE: https://github.com/spatie/laravel-backup/blob/main/docs/installation-and-setup.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require spatie/laravel-backup\n```\n\n----------------------------------------\n\nTITLE: Configuring Backup Archive Encryption in Laravel Environment File\nDESCRIPTION: This snippet shows how to set up the encryption password for backup archives using an environment variable in the .env file. This is the simplest way to enable encryption for your backups.\nSOURCE: https://github.com/spatie/laravel-backup/blob/main/docs/advanced-usage/encrypt-backup-archives.md#2025-04-16_snippet_0\n\nLANGUAGE: env\nCODE:\n```\nBACKUP_ARCHIVE_PASSWORD=your_secure_password_here\n```\n\n----------------------------------------\n\nTITLE: Scheduling backup monitoring command in Laravel\nDESCRIPTION: Configure the Laravel scheduler to run the backup:monitor command daily at 3:00 AM in the Console/Kernel.php file.\nSOURCE: https://github.com/spatie/laravel-backup/blob/main/docs/monitoring-the-health-of-all-backups/overview.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n//app/Console/Kernel.php\n\nprotected function schedule(Schedule $schedule)\n{\n   $schedule->command('backup:monitor')->daily()->at('03:00');\n}\n```\n\n----------------------------------------\n\nTITLE: MySQL Database Dump Configuration\nDESCRIPTION: Configuration for MySQL database dumping including binary path, timeout settings, and table exclusions. Allows customization of dump parameters and SSL settings.\nSOURCE: https://github.com/spatie/laravel-backup/blob/main/docs/installation-and-setup.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n'connections' => [\n\t'mysql' => [\n\t\t'driver'    => 'mysql'\n\t\t...,\n\t\t'dump' => [\n\t\t   'dump_binary_path' => '/path/to/the/binary',\n\t\t   'use_single_transaction',\n\t\t   'timeout' => 60 * 5,\n\t\t   'exclude_tables' => ['table1', 'table2'],\n\t\t   'add_extra_option' => '--optionname=optionvalue',\n\t\t]\n\t],\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Binary Dump Format in Database Configuration\nDESCRIPTION: This snippet demonstrates how to add the binary format option to the PostgreSQL connection configuration in Laravel's database.php file. The '--format=c' flag tells pg_dump to output in PostgreSQL's custom binary format, which produces smaller files and faster restore times.\nSOURCE: https://github.com/spatie/laravel-backup/blob/main/docs/advanced-usage/binary-database-dumps-with-postgresql.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n//config/database.php\n'connections' => [\n\t'pgsql' => [\n\t\t'driver'    => 'pgsql'\n\t\t...,\n\t\t'dump' => [\n\t\t    ...,\n\t\t    'add_extra_option' => '--format=c', // and any other pg_dump flags\n\t\t]\n\t],\n```\n\n----------------------------------------\n\nTITLE: Running Laravel Backup in Isolated Mode\nDESCRIPTION: This command demonstrates how to execute the Laravel Backup task in isolated mode. The --isolated option ensures the backup job runs on only one server when the application's scheduler is running on multiple servers. This prevents duplicate backups and potential conflicts.\nSOURCE: https://github.com/spatie/laravel-backup/blob/main/docs/advanced-usage/isolated-mode.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nphp artisan backup:run --isolated\n```\n\n----------------------------------------\n\nTITLE: Backup Success Event Class Definition\nDESCRIPTION: Event class that fires when backup is successfully completed. Contains a backupDestination property with the backup destination details.\nSOURCE: https://github.com/spatie/laravel-backup/blob/main/docs/taking-backups/events.md#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nSpatie\\Backup\\Events\\BackupWasSuccessful\n```\n\n----------------------------------------\n\nTITLE: Healthy Backup Event Class Definition - PHP\nDESCRIPTION: Event class that is fired when the backup monitor determines backups are healthy on a destination filesystem. Contains a backupDestinationStatus property with backup status information.\nSOURCE: https://github.com/spatie/laravel-backup/blob/main/docs/monitoring-the-health-of-all-backups/events.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nSpatie\\Backup\\Events\\HealthyBackupWasFound\n```\n\n----------------------------------------\n\nTITLE: Unhealthy Backup Event Class Definition - PHP\nDESCRIPTION: Event class that is fired when the backup monitor determines backups are unhealthy or cannot access the destination filesystem. Contains a backupDestinationStatus property with backup status information.\nSOURCE: https://github.com/spatie/laravel-backup/blob/main/docs/monitoring-the-health-of-all-backups/events.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nSpatie\\Backup\\Events\\UnhealthyBackupWasFound\n```\n\n----------------------------------------\n\nTITLE: Database Dumping Event Class Definition\nDESCRIPTION: Event class that fires before database dumping begins. Contains the database dumper instance for potential modifications.\nSOURCE: https://github.com/spatie/laravel-backup/blob/main/docs/taking-backups/events.md#2025-04-16_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nSpatie\\Backup\\Events\\DumpingDatabase\n```\n\n----------------------------------------\n\nTITLE: Publishing Laravel Backup Configuration File\nDESCRIPTION: Artisan command to publish the package's configuration file to the Laravel config directory.\nSOURCE: https://github.com/spatie/laravel-backup/blob/main/docs/installation-and-setup.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan vendor:publish --provider=\"Spatie\\Backup\\BackupServiceProvider\" --tag=backup-config\n```\n\n----------------------------------------\n\nTITLE: Executing Backup Cleanup Command in Laravel\nDESCRIPTION: This command runs the backup cleanup process using the Laravel Artisan CLI.\nSOURCE: https://github.com/spatie/laravel-backup/blob/main/docs/cleaning-up-old-backups/overview.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan backup:clean\n```\n\n----------------------------------------\n\nTITLE: Checking backup status in Laravel via command line\nDESCRIPTION: Artisan command to view the status of all monitored backup destination filesystems.\nSOURCE: https://github.com/spatie/laravel-backup/blob/main/docs/monitoring-the-health-of-all-backups/overview.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan backup:list\n```\n\n----------------------------------------\n\nTITLE: Configuring Extra Options for Backup Disks in Laravel\nDESCRIPTION: This configuration snippet demonstrates how to add extra options to the Flysystem driver of a backup disk, which may be necessary in some cases.\nSOURCE: https://github.com/spatie/laravel-backup/blob/main/docs/taking-backups/overview.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// in config filesystems.php\n\nreturn [\n\n    // ..\n    \n    'disks' => [\n        's3' => [\n            'driver' => 's3',\n            // ...\n            'backup_options' => [\n               // add extra options here\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Customizing Backup Archive Encryption in Laravel Config File\nDESCRIPTION: This snippet demonstrates how to customize the encryption settings in the config/backup.php file. It allows for more advanced configuration of the backup archive encryption process.\nSOURCE: https://github.com/spatie/laravel-backup/blob/main/docs/advanced-usage/encrypt-backup-archives.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// In config/backup.php\n'backup' => [\n    'password' => env('BACKUP_ARCHIVE_PASSWORD'),\n    'encryption' => 'default' // or any other supported encryption method\n]\n```\n\n----------------------------------------\n\nTITLE: Event Listener for Encrypting Backup Archives in Laravel\nDESCRIPTION: This snippet shows the event and listener used for encrypting backup archives. The EncryptBackupArchive listener is attached to the BackupZipWasCreated event when the required configuration is present.\nSOURCE: https://github.com/spatie/laravel-backup/blob/main/docs/advanced-usage/encrypt-backup-archives.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Spatie\\Backup\\Listeners\\EncryptBackupArchive;\nuse Spatie\\Backup\\Events\\BackupZipWasCreated;\n\n// The listener is automatically added when both required config keys are not null\n```\n\n----------------------------------------\n\nTITLE: Backup Failure Event Class Definition\nDESCRIPTION: Event class that fires when backup process fails. Contains exception details and optional backup destination information.\nSOURCE: https://github.com/spatie/laravel-backup/blob/main/docs/taking-backups/events.md#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nSpatie\\Backup\\Events\\BackupHasFailed\n```\n\n----------------------------------------\n\nTITLE: Backup Manifest Creation Event Class Definition\nDESCRIPTION: Event class that fires when the backup manifest is created. Contains the manifest object with database dumps and selected files.\nSOURCE: https://github.com/spatie/laravel-backup/blob/main/docs/taking-backups/events.md#2025-04-16_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nSpatie\\Backup\\Events\\BackupManifestWasCreated\n```\n\n----------------------------------------\n\nTITLE: Backup Zip Creation Event Class Definition\nDESCRIPTION: Event class that fires when the backup zip file is created. Contains the path to the created zip file.\nSOURCE: https://github.com/spatie/laravel-backup/blob/main/docs/taking-backups/events.md#2025-04-16_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nSpatie\\Backup\\Events\\BackupZipWasCreated\n```\n\n----------------------------------------\n\nTITLE: Accessing CleanupWasSuccessful Event in PHP\nDESCRIPTION: The CleanupWasSuccessful event is fired when old backups are successfully removed from a destination filesystem. It provides access to the backup destination through a public property.\nSOURCE: https://github.com/spatie/laravel-backup/blob/main/docs/cleaning-up-old-backups/events.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nSpatie\\Backup\\Events\\CleanupWasSuccessful\n```\n\n----------------------------------------\n\nTITLE: Accessing CleanupHasFailed Event in PHP\nDESCRIPTION: The CleanupHasFailed event is fired when the cleanup process encounters an error. It provides access to the exception details and optional backup destination information.\nSOURCE: https://github.com/spatie/laravel-backup/blob/main/docs/cleaning-up-old-backups/events.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nSpatie\\Backup\\Events\\CleanupHasFailed\n```\n\n----------------------------------------\n\nTITLE: Scheduling Laravel Backup Commands in Console Routes\nDESCRIPTION: Alternative configuration for Laravel 11+ to schedule backup commands using console routes. Implements the same daily schedule as the kernel version.\nSOURCE: https://github.com/spatie/laravel-backup/blob/main/docs/installation-and-setup.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Schedule;\n\nSchedule::command('backup:clean')->daily()->at('01:00');\nSchedule::command('backup:run')->daily()->at('01:30');\n```\n\n----------------------------------------\n\nTITLE: MySQL SSL Skip Configuration\nDESCRIPTION: Configuration to bypass TLS/SSL self-signed certificate errors in MySQL/MariaDB connections by setting skip_ssl option.\nSOURCE: https://github.com/spatie/laravel-backup/blob/main/docs/installation-and-setup.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n'connections' => [\n\t'mysql' => [\n\t\t'driver'    => 'mysql'\n\t\t...,\n\t\t'dump' => [\n                    'dump_binary_path' => '/path/to/the/binary',\n                    'skip_ssl' => true,\n\t\t   ...,\n\t\t]\n\t],\n```\n\n----------------------------------------\n\nTITLE: Custom Database Dumper Implementation\nDESCRIPTION: Example of extending the database dumper functionality with a custom implementation for MySQL using DbDumperFactory.\nSOURCE: https://github.com/spatie/laravel-backup/blob/main/docs/installation-and-setup.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nDbDumperFactory::extend('mysql', function() {\n    return new YourCustomMysqlDumper();\n});\n\nuse Spatie\\DbDumper\\DbDumper;\n\nclass YourCustomMysqlDumper extends DbDumper\n{\n\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Laravel Backup Translation Files\nDESCRIPTION: Artisan command to publish the package's translation files.\nSOURCE: https://github.com/spatie/laravel-backup/blob/main/docs/installation-and-setup.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan vendor:publish --provider=\"Spatie\\Backup\\BackupServiceProvider\" --tag=backup-translations\n```\n\n----------------------------------------\n\nTITLE: Creating Custom BackupHasFailedNotification Class for Pusher Integration\nDESCRIPTION: Custom notification class that extends the base BackupHasFailedNotification and adds Pusher push notification functionality. It defines a toPushNotification method that configures the mobile notification with appropriate message and sound.\nSOURCE: https://github.com/spatie/laravel-backup/blob/main/docs/sending-notifications/adding-extra-notification-channels.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Notifications;\n\nuse Spatie\\Backup\\Notifications\\Notifications\\BackupHasFailedNotification as BaseNotification;\nuse NotificationChannels\\PusherPushNotifications\\Message;\n\nclass BackupHasFailedNotification extends BaseNotification\n{\n    public function toPushNotification($notifiable)\n    {\n        return Message::create()\n            ->iOS()\n            ->badge(1)\n            ->sound('fail')\n            ->body(\"The backup of {$this->applicationName()} to disk {$this->diskName()} has failed\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Notification in Laravel Backup Configuration\nDESCRIPTION: Configuration update in config/backup.php to register the custom notification class and specify which channels to use. This demonstrates how to add the Pusher channel alongside default mail and Slack channels.\nSOURCE: https://github.com/spatie/laravel-backup/blob/main/docs/sending-notifications/adding-extra-notification-channels.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// config/backup.php\nuse \\NotificationChannels\\PusherPushNotifications\\Channel as PusherChannel\n\n...\n\n    'notifications' => [\n\n        'notifications' => [\n            \\App\\Notifications\\BackupHasFailedNotification::class => ['mail', 'slack', PusherChannel::class],\n            ...\n\n```\n\n----------------------------------------\n\nTITLE: Extending Laravel Backup Notifiable Class\nDESCRIPTION: Example of extending the default Spatie\\Backup\\Notifications\\Notifiable class to add support for custom notification channels. The class implements a custom routing method to retrieve configuration properties for an additional notification channel.\nSOURCE: https://github.com/spatie/laravel-backup/blob/main/docs/sending-notifications/customizing-the-notifiable.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Notifications;\n\nuse Spatie\\Backup\\Notifications\\Notifiable;\n\nclass BackupNotifiable extends Notifiable\n{\n    public function routeNotificationForAnotherNotificationChannel()\n    {\n        return $this->config()->notifications->another_notification_channel->property;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Notifiable Class\nDESCRIPTION: Configuration example showing how to register the custom notifiable class in the Laravel Backup configuration file (config/backup.php).\nSOURCE: https://github.com/spatie/laravel-backup/blob/main/docs/sending-notifications/customizing-the-notifiable.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// config/backup.php\n    'notifications' => [\n    ...\n\n        'notifiable' => App\\Notifications\\BackupNotifiable::class,\n```\n\n----------------------------------------\n\nTITLE: Running Backup for Non-Laravel Applications\nDESCRIPTION: Command to execute the backup process after configuring Laravel to back up a non-Laravel application. This will initiate the backup based on the configuration specified in the backup.php and databases.php files.\nSOURCE: https://github.com/spatie/laravel-backup/blob/main/docs/advanced-usage/backing-up-a-non-laravel-application.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan backup:run\n```\n\n----------------------------------------\n\nTITLE: Setting Custom File Extension for Binary Database Dumps\nDESCRIPTION: This snippet shows how to configure the Laravel Backup package to use a custom file extension for the database dump files. By changing the extension from the default to 'backup', you can clearly identify the dump as a binary format rather than a standard SQL file.\nSOURCE: https://github.com/spatie/laravel-backup/blob/main/docs/advanced-usage/binary-database-dumps-with-postgresql.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n//config/backup.php\n'backup' => [\n    ...,\n    'database_dump_file_extension' => 'backup', // produces a FILENAME.backup database dump\n  ],\n```\n\n----------------------------------------\n\nTITLE: Defining BackupManifestWasCreated Event Class in PHP\nDESCRIPTION: Core event class definition that gets fired after backup manifest creation. Contains a manifest property that holds reference to the backup manifest object which can be modified to add additional files.\nSOURCE: https://github.com/spatie/laravel-backup/blob/main/docs/advanced-usage/adding-extra-files-to-a-backup.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace Spatie\\Backup\\Events;\n\nuse Spatie\\Backup\\Tasks\\Backup\\Manifest;\n\nclass BackupManifestWasCreated\n{\n    /** @var \\Spatie\\Backup\\Tasks\\Backup\\Manifest */\n    public $manifest;\n\n    public function __construct(Manifest $manifest)\n    {\n        $this->manifest = $manifest;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Pusher Push Notifications Package for Laravel\nDESCRIPTION: Command to install the Pusher Push Notifications channel package using Composer. This is the first step in adding Pusher as a notification channel for Laravel Backup.\nSOURCE: https://github.com/spatie/laravel-backup/blob/main/docs/sending-notifications/adding-extra-notification-channels.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nlaravel-notification-channels/pusher-push-notifications\n```\n\n----------------------------------------\n\nTITLE: Installing Slack Notification Channel for Laravel Backup\nDESCRIPTION: Command to install the Laravel Slack notification channel package required for sending backup notifications to Slack.\nSOURCE: https://github.com/spatie/laravel-backup/blob/main/docs/requirements.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require laravel/slack-notification-channel\n```\n\n----------------------------------------\n\nTITLE: Running Laravel Backup Command\nDESCRIPTION: The command to execute a new backup operation using the Laravel Backup package. This artisan command creates a ZIP file containing specified directories and database dumps.\nSOURCE: https://github.com/spatie/laravel-backup/blob/main/docs/high-level-overview.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan backup:run\n```\n\n----------------------------------------\n\nTITLE: Running Laravel Backup Command\nDESCRIPTION: This command initiates the backup process for the Laravel application using the Laravel Backup package. It creates a zip file containing specified files and a database dump.\nSOURCE: https://github.com/spatie/laravel-backup/blob/main/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan backup:run\n```\n\n----------------------------------------\n\nTITLE: Running Laravel Backup Tests\nDESCRIPTION: This command runs the test suite for the Laravel Backup package using Composer. It ensures that all package functionalities are working as expected.\nSOURCE: https://github.com/spatie/laravel-backup/blob/main/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer test\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Cleanup Strategy in Laravel Backup\nDESCRIPTION: This code snippet shows the method signature for implementing a custom cleanup strategy by extending the abstract CleanupStrategy class. It demonstrates how to delete the oldest backup from a BackupCollection.\nSOURCE: https://github.com/spatie/laravel-backup/blob/main/docs/cleaning-up-old-backups/overview.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Spatie\\Backup\\BackupDestination\\BackupCollection;\n\npublic function deleteOldBackups(BackupCollection $backupCollection)\n```\n\nLANGUAGE: php\nCODE:\n```\n// Retrieve an instance of `Spatie\\Backup\\BackupDestination\\Backup`\n$backup = $backups->oldestBackup();\n\n// Bye bye backup\n$backup->delete();\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry Format\nDESCRIPTION: Standard format used for documenting version changes in the Laravel Backup package changelog. Includes version number, date, changes, contributors, and links to full changelog.\nSOURCE: https://github.com/spatie/laravel-backup/blob/main/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 9.2.9 - 2025-03-03\n\n**Full Changelog**: https://github.com/spatie/laravel-backup/compare/9.2.8...9.2.9\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry with Changes\nDESCRIPTION: Extended changelog entry format that includes detailed sections for changes and new contributors, along with pull request references and comparison links.\nSOURCE: https://github.com/spatie/laravel-backup/blob/main/CHANGELOG.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 9.2.8 - 2025-03-03\n\n### What's Changed\n\n* set config defaults\n* remove the `only()` from tests by @pxpm in https://github.com/spatie/laravel-backup/pull/1875\n\n### New Contributors\n\n* @SebKay made their first contribution in https://github.com/spatie/laravel-backup/pull/1876\n\n**Full Changelog**: https://github.com/spatie/laravel-backup/compare/9.2.4...9.2.8\n```\n\n----------------------------------------\n\nTITLE: Laravel Backup Version History\nDESCRIPTION: Markdown formatted changelog entries documenting version updates, changes, and contributors for the Laravel Backup package.\nSOURCE: https://github.com/spatie/laravel-backup/blob/main/CHANGELOG.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### What's Changed\n\n- Fix error an Installation Doc by @thomasdominic\n- Update high-level-overview.md by @souravtah\n- Update introduction.md by @souravtah\n- Add Dependabot Automation by @patinthehat\n- fix: zh-TW translation by @hms5232\n[...additional entries truncated for brevity...]\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Health Check Method in PHP\nDESCRIPTION: This snippet shows the abstract method signature that needs to be implemented when creating a custom health check. The method takes a BackupDestination object as a parameter and should throw an InvalidHealthCheck exception if the backup is not healthy.\nSOURCE: https://github.com/spatie/laravel-backup/blob/main/docs/monitoring-the-health-of-all-backups/creating-your-custom-health-check.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function checkHealth(BackupDestination $backupDestination);\n```\n\n----------------------------------------\n\nTITLE: Defining Metadata for Laravel Backup v9 Documentation\nDESCRIPTION: This YAML-like frontmatter defines metadata for the Laravel Backup v9 documentation page. It specifies the title, slogan, GitHub repository URL, and the main branch of the project.\nSOURCE: https://github.com/spatie/laravel-backup/blob/main/docs/_index.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: v9\nslogan: One day you'll thank us for this\ngithubUrl: https://github.com/spatie/laravel-backup\nbranch: main\n---\n```\n\n----------------------------------------\n\nTITLE: Running Laravel Backup Command in Bash\nDESCRIPTION: This command initiates the backup process for a Laravel application. It creates a zipfile containing all specified directories and a database dump, storing it in the configured filesystem locations.\nSOURCE: https://github.com/spatie/laravel-backup/blob/main/docs/introduction.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan backup:run\n```"
  }
]