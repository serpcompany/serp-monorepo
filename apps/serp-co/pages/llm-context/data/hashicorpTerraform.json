[
  {
    "owner": "hashicorp",
    "repo": "terraform",
    "content": "TITLE: Declaring Output Values with Basic Value Reference in Terraform HCL\nDESCRIPTION: This snippet demonstrates how to declare an output value within a Terraform module using HCL. The output block exposes the private IP address of an AWS EC2 instance (referenced as aws_instance.server.private_ip) to the parent module or user. This foundational pattern is required for returning values from modules. The only dependency is that the referenced resource and attribute must exist in the current module scope. Input: none; Output: value of aws_instance.server.private_ip.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/values/outputs.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\noutput \"instance_ip_addr\" {\n  value = aws_instance.server.private_ip\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AWS Network Infrastructure using HCL\nDESCRIPTION: This HCL code defines a simple AWS network topology. It configures the required AWS provider, declares variables for region, CIDR block, and availability zones, configures the AWS provider instance with the region variable, defines an AWS VPC resource using the CIDR block variable, and defines multiple AWS subnet resources using 'count' based on the availability zones list. It demonstrates referencing other resources (implicit dependency), using list indexing with 'count.index', and utilizing the 'cidrsubnet' function to calculate subnet CIDR blocks dynamically.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \"~> 1.0.4\"\n    }\n  }\n}\n\nvariable \"aws_region\" {}\n\nvariable \"base_cidr_block\" {\n  description = \"A /16 CIDR range definition, such as 10.1.0.0/16, that the VPC will use\"\n  default = \"10.1.0.0/16\"\n}\n\nvariable \"availability_zones\" {\n  description = \"A list of availability zones in which to create subnets\"\n  type = list(string)\n}\n\nprovider \"aws\" {\n  region = var.aws_region\n}\n\nresource \"aws_vpc\" \"main\" {\n  # Referencing the base_cidr_block variable allows the network address\n  # to be changed without modifying the configuration.\n  cidr_block = var.base_cidr_block\n}\n\nresource \"aws_subnet\" \"az\" {\n  # Create one subnet for each given availability zone.\n  count = length(var.availability_zones)\n\n  # For each subnet, use one of the specified availability zones.\n  availability_zone = var.availability_zones[count.index]\n\n  # By referencing the aws_vpc.main object, Terraform knows that the subnet\n  # must be created only after the VPC is created.\n  vpc_id = aws_vpc.main.id\n\n  # Built-in functions and operators can be used for simple transformations of\n  # values, such as computing a subnet address. Here we create a /20 prefix for\n  # each subnet, using consecutive addresses for each availability zone,\n  # such as 10.1.16.0/20 .\n  cidr_block = cidrsubnet(aws_vpc.main.cidr_block, 4, count.index+1)\n}\n```\n\n----------------------------------------\n\nTITLE: Explicitly Passing Aliased Provider to Terraform Module using HCL\nDESCRIPTION: This example demonstrates explicit provider passing in a root module. It defines a default AWS provider and an aliased provider (`aws.usw2` for `us-west-2`). The `module \"example\"` block uses the `providers` argument to pass the aliased configuration `aws.usw2` to the child module, making it the default `aws` provider within that child's scope.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/develop/providers.mdx#2025-04-22_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\n# The default \"aws\" configuration is used for AWS resources in the root\n# module where no explicit provider instance is selected.\nprovider \"aws\" {\n  region = \"us-west-1\"\n}\n\n# An alternate configuration is also defined for a different\n# region, using the alias \"usw2\".\nprovider \"aws\" {\n  alias  = \"usw2\"\n  region = \"us-west-2\"\n}\n\n# An example child module is instantiated with the alternate configuration,\n# so any AWS resources it defines will use the us-west-2 region.\nmodule \"example\" {\n  source    = \"./example\"\n  providers = {\n    aws = aws.usw2\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Resource and Nested Blocks in Terraform HCL\nDESCRIPTION: Illustrates the definition of a Terraform 'resource' block of type 'aws_instance' with a nested 'network_interface' block. This snippet shows multiple block levels with arguments and nested content, which is the core way HCL expresses hierarchical configuration. It requires an AWS provider for 'aws_instance', and the resource and nested labels demonstrate how identifiers and labels are used. Key parameters include the resource type, instance label, argument assignments, and nested block structure.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/syntax/configuration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"example\" {\n  ami = \"abc123\"\n\n  network_interface {\n    # ...\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Illustrating Basic HCL Syntax Elements\nDESCRIPTION: This snippet demonstrates the fundamental syntax of the Terraform language (HCL). It shows a 'resource' block with type 'aws_vpc' and label 'main', containing an argument 'cidr_block' assigned the value of an expression 'var.base_cidr_block'. Below the specific example, it provides a generic template illustrating the components: block type, block labels, block body, identifiers (arguments), and expressions.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_vpc\" \"main\" {\n  cidr_block = var.base_cidr_block\n}\n\n<BLOCK TYPE> \"<BLOCK LABEL>\" \"<BLOCK LABEL>\" {\n  # Block body\n  <IDENTIFIER> = <EXPRESSION> # Argument\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Data Source in Terraform HCL\nDESCRIPTION: This snippet demonstrates how to declare a data source using the 'data' block in Terraform. It shows an example of querying an AWS AMI with specific tags and constraints.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/data-sources/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"aws_ami\" \"example\" {\n  most_recent = true\n\n  owners = [\"self\"]\n  tags = {\n    Name   = \"app-server\"\n    Tested = \"true\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Conditional Expressions for Default Values in Terraform\nDESCRIPTION: An example showing how to use conditional expressions to provide default values when variables are empty or invalid.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/conditionals.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nvar.a == \"\" ? \"default-a\" : var.a\n```\n\n----------------------------------------\n\nTITLE: Integrating Terraform Cloud or Enterprise in HCL\nDESCRIPTION: This snippet defines how to use the `cloud` block within the `terraform` block to connect the configuration to HCP Terraform or Terraform Enterprise for remote state storage, execution, and other managed features. It contains nested attributes for organization, workspace parameters, hostname, and authentication token. Only one `cloud` block may be present, and it cannot be used together with a `backend` block; all values must be constant.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/terraform.mdx#2025-04-22_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  cloud  {\n    <cloud-configuration>\n  }\n  # . . .\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Google Cloud Provider in Terraform\nDESCRIPTION: This snippet demonstrates how to configure the Google Cloud provider with project and region settings. Provider configurations belong in the root module of a Terraform configuration.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/providers/configuration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nprovider \"google\" {\n  project = \"acme-app\"\n  region  = \"us-central1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform File Extensions\nDESCRIPTION: Two supported file extensions for Terraform configurations - standard .tf files for HCL syntax and .tf.json for JSON-based variant.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/files/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.tf\n.tf.json\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple AWS EC2 Instances using count in Terraform HCL\nDESCRIPTION: This HCL snippet demonstrates the basic usage of the `count` meta-argument to create four identical AWS EC2 instances. It utilizes the `count.index` object within the `tags` block to assign a unique name to each instance (Server 0, Server 1, etc.). The `ami` and `instance_type` arguments are applied to all four instances.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/meta-arguments/count.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"server\" {\n  count = 4 # create four similar EC2 instances\n\n  ami           = \"ami-a1b2c3d4\"\n  instance_type = \"t2.micro\"\n\n  tags = {\n    Name = \"Server ${count.index}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Provider with Source and Version for Terraform v0.13+ Compatibility (HCL)\nDESCRIPTION: This snippet shows the explicit declaration of a required provider's source address and version constraint in Terraform v0.13+ compatible syntax. The 'aws' provider is required with source 'hashicorp/aws' and version matching '~> 1.0', enabling strict control of installed provider versions using latest conventions. This approach enables compatibility with both new and legacy modules, provided other guidelines are followed.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/providers/requirements.mdx#2025-04-22_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \"~> 1.0\"\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-level Nested Dynamic Blocks in Terraform\nDESCRIPTION: Example showing how to implement nested dynamic blocks to generate a complex resource structure based on the previously defined variable, creating origin_group blocks with nested origin blocks.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/dynamic-blocks.mdx#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\n  dynamic \"origin_group\" {\n    for_each = var.load_balancer_origin_groups\n    content {\n      name = origin_group.key\n\n      dynamic \"origin\" {\n        for_each = origin_group.value.origins\n        content {\n          hostname = origin.value.hostname\n        }\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Lifecycle with create_before_destroy in Terraform (HCL)\nDESCRIPTION: This snippet shows how to define a lifecycle block within a Terraform resource to set create_before_destroy to true, instructing Terraform to create replacement infrastructure before destroying the existing resource. No external dependencies are required beyond standard Terraform HCL usage. The example shows a resource (azurerm_resource_group) with custom lifecycle management; input parameters are taken from prior resource configuration and the output is the controlled creation and destruction order of the resource.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/meta-arguments/lifecycle.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azurerm_resource_group\" \"example\" {\n  # ...\n\n  lifecycle {\n    create_before_destroy = true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring terraform_remote_state with Azure Backend\nDESCRIPTION: This HCL snippet configures the terraform_remote_state data source to use the Azure backend with parameters like use_oidc, use_azuread_auth, tenant_id, client_id, storage_account_name, container_name, and key. It facilitates remote state retrieval with Azure Active Directory authentication through OpenID Connect/Workload identity federation.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/azurerm.mdx#2025-04-22_snippet_14\n\nLANGUAGE: HCL\nCODE:\n```\ndata \"terraform_remote_state\" \"foo\" {\n  backend = \"azurerm\"\n  config = {\n    use_oidc             = true                                    # Can also be set via `ARM_USE_OIDC` environment variable.\n    use_azuread_auth     = true                                    # Can also be set via `ARM_USE_AZUREAD` environment variable.\n    tenant_id            = \"00000000-0000-0000-0000-000000000000\"  # Can also be set via `ARM_TENANT_ID` environment variable.\n    client_id            = \"00000000-0000-0000-0000-000000000000\"  # Can also be set via `ARM_CLIENT_ID` environment variable.\n    storage_account_name = \"abcd1234\"                              # There is not environment variable support for this input.\n    container_name       = \"tfstate\"                               # There is not environment variable support for this input.\n    key                  = \"prod.terraform.tfstate\"                # There is not environment variable support for this input.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Preconditions for Resource Lifecycle in Terraform HCL\nDESCRIPTION: Defines a Terraform AWS EC2 instance with a precondition custom check inside the 'lifecycle' block, ensuring that a referenced AMI has 'x86_64' architecture. The condition validates assumptions before resource creation or modification. If the precondition fails, Terraform aborts the apply and displays the custom error message. Requires use of computed values and is suited for enforcing invariants important for operational correctness.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/resources/syntax.mdx#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"example\" {\n  instance_type = \"t2.micro\"\n  ami           = \"ami-abc123\"\n\n  lifecycle {\n    # The AMI ID must refer to an AMI that contains an operating system\n    # for the `x86_64` architecture.\n    precondition {\n      condition     = data.aws_ami.example.architecture == \"x86_64\"\n      error_message = \"The selected AMI must be for the x86_64 architecture.\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic terraform apply Usage (CLI)\nDESCRIPTION: This is the fundamental syntax for the `terraform apply` command. It can be run with options and optionally a saved plan file. If no plan file is provided, it runs in automatic plan mode.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/apply.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterraform apply [options] [plan file]\n```\n\n----------------------------------------\n\nTITLE: Defining Provider Metadata in Terraform HCL\nDESCRIPTION: This snippet presents the use of the `provider_meta` block to specify metadata fields expected by certain providers within the configuration's `terraform` block. This metadata can be consumed by providers for custom behavior but is generally used in advanced or special cases. The block is optional and may contain arbitrary key-value pairs determined by the provider; it does not reference variables.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/terraform.mdx#2025-04-22_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  provider_meta {\n    <DATA>\n  }\n  # . . .\n}\n```\n\n----------------------------------------\n\nTITLE: Basic For Expression vs Splat Expression in HCL\nDESCRIPTION: Demonstrates the equivalence between a for expression and a splat expression for extracting a list of IDs from objects.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/splat.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n[for o in var.list : o.id]\n```\n\nLANGUAGE: hcl\nCODE:\n```\nvar.list[*].id\n```\n\n----------------------------------------\n\nTITLE: Declaring Basic Input Variables in HCL\nDESCRIPTION: Demonstrates declaring multiple input variables in Terraform using the `variable` block. It shows examples for `string`, `list(string)`, and complex `list(object)` types, including setting default values for optional variables. The `type` argument enforces value types, while `default` provides a fallback if no value is explicitly set.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/values/variables.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"image_id\" {\n  type = string\n}\n\nvariable \"availability_zone_names\" {\n  type    = list(string)\n  default = [\"us-west-1a\"]\n}\n\nvariable \"docker_ports\" {\n  type = list(object({\n    internal = number\n    external = number\n    protocol = string\n  }))\n  default = [\n    {\n      internal = 8300\n      external = 8300\n      protocol = \"tcp\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Display Terraform CLI Commands and Usage\nDESCRIPTION: Shows the complete list of available Terraform CLI commands including main workflow commands and additional utilities. Displays global options for command execution.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nUsage: terraform [global options] <subcommand> [args]\n\nThe available commands for execution are listed below.\nThe primary workflow commands are given first, followed by\nless common or more advanced commands.\n\nMain commands:\n  init          Prepare your working directory for other commands\n  validate      Check whether the configuration is valid\n  plan          Show changes required by the current configuration\n  apply         Create or update infrastructure\n  destroy       Destroy previously-created infrastructure\n\nAll other commands:\n  console       Try Terraform expressions at an interactive command prompt\n  fmt           Reformat your configuration in the standard style\n  force-unlock  Release a stuck lock on the current workspace\n  get           Install or upgrade remote Terraform modules\n  graph         Generate a Graphviz graph of the steps in an operation\n  import        Associate existing infrastructure with a Terraform resource\n  login         Obtain and save credentials for a remote host\n  logout        Remove locally-stored credentials for a remote host\n  metadata      Metadata related commands\n  modules       Show all declared modules in a working directory\n  output        Show output values from your root module\n  providers     Show the providers required for this configuration\n  refresh       Update the state to match remote systems\n  show          Show the current state or a saved plan\n  state         Advanced state management\n  taint         Mark a resource instance as not fully functional\n  untaint       Remove the 'tainted' state from a resource instance\n  version       Show the current Terraform version\n  workspace     Workspace management\n\nGlobal options (use these before the subcommand, if any):\n  -chdir=DIR    Switch to a different working directory before executing the\n                given subcommand.\n  -help         Show this help output, or the help for a specified subcommand.\n  -version      An alias for the \"version\" subcommand.\n```\n\n----------------------------------------\n\nTITLE: Configuring a Provider with a Local Name in Terraform\nDESCRIPTION: This example shows how to use a provider's local name when configuring it in a Terraform configuration. The local name is defined in the required_providers block.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/providers/requirements.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    mycloud = {\n      source  = \"mycorp/mycloud\"\n      version = \"~> 1.0\"\n    }\n  }\n}\n\nprovider \"mycloud\" {\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Composing Terraform Modules for AWS Network and Consul Cluster (HCL)\nDESCRIPTION: This snippet demonstrates the composition of two Terraform modules: one for networking and another for a Consul cluster. The network module is configured with a base CIDR block, and its outputs are passed into the consul_cluster module through variables, illustrating dependency inversion. Prerequisites include a modular project structure and compatible output/input variables for vpc_id and subnet_ids. Inputs are only used via module arguments, and the modules are assumed to exist in the project's directory.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/develop/composition.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"network\" {\n  source = \"./modules/aws-network\"\n\n  base_cidr_block = \"10.0.0.0/8\"\n}\n\nmodule \"consul_cluster\" {\n  source = \"./modules/aws-consul-cluster\"\n\n  vpc_id     = module.network.vpc_id\n  subnet_ids = module.network.subnet_ids\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Dependencies with depends_on - Terraform HCL\nDESCRIPTION: This snippet showcases the usage of the depends_on meta-argument for an AWS EC2 instance resource. It explicitly declares a dependency on an IAM role policy, which Terraform cannot automatically infer. This ensures the role policy is created before the instance, as required for correct functionality. It highlights the explicit declaration of dependencies in Terraform's HCL syntax.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/meta-arguments/depends_on.mdx#2025-04-22_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nresource \"aws_iam_role\" \"example\" {\n  name = \"example\"\n\n  # assume_role_policy is omitted for brevity in this example. Refer to the\n  # documentation for aws_iam_role for a complete example.\n  assume_role_policy = \"...\"\n}\n\nresource \"aws_iam_instance_profile\" \"example\" {\n  # Because this expression refers to the role, Terraform can infer\n  # automatically that the role must be created first.\n  role = aws_iam_role.example.name\n}\n\nresource \"aws_iam_role_policy\" \"example\" {\n  name   = \"example\"\n  role   = aws_iam_role.example.name\n  policy = jsonencode({\n    \"Statement\" = [{\n      # This policy allows software running on the EC2 instance to\n      # access the S3 API.\n      \"Action\" = \"s3:*\",\n      \"Effect\" = \"Allow\",\n    }],\n  })\n}\n\nresource \"aws_instance\" \"example\" {\n  ami           = \"ami-a1b2c3d4\"\n  instance_type = \"t2.micro\"\n\n  # Terraform can infer from this that the instance profile must\n  # be created before the EC2 instance.\n  iam_instance_profile = aws_iam_instance_profile.example\n\n  # However, if software running in this EC2 instance needs access\n  # to the S3 API in order to boot properly, there is also a \"hidden\"\n  # dependency on the aws_iam_role_policy that Terraform cannot\n  # automatically infer, so it must be declared explicitly:\n  depends_on = [\n    aws_iam_role_policy.example\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Declaring Required Providers in Terraform Configuration\nDESCRIPTION: This snippet demonstrates how to declare required providers in a Terraform configuration. It specifies the provider's local name, source address, and version constraint.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/providers/requirements.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    mycloud = {\n      source  = \"mycorp/mycloud\"\n      version = \"~> 1.0\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using for_each with aws_vpc Resource - Terraform HCL\nDESCRIPTION: This snippet demonstrates iterating over a map of networks to declare multiple aws_vpc resources using the for_each meta-argument. Each map element (from var.networks) produces a resource instance, enabling individual resource creation per network. Inputs: var.networks (map of objects). Key parameters: for_each, cidr_block. Dependencies: AWS provider, aws_vpc resource type. Output: Multiple AWS VPCs are created, one per network.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/setproduct.mdx#2025-04-22_snippet_5\n\nLANGUAGE: HCL\nCODE:\n```\nresource \"aws_vpc\" \"example\" {\n  for_each = var.networks\n\n  cidr_block = each.value.base_cidr_block\n}\n```\n\n----------------------------------------\n\nTITLE: Provisioning Multiple AWS IAM Users with for_each in Terraform HCL\nDESCRIPTION: This snippet shows how to create several aws_iam_user resources by passing a set of strings into the for_each meta-argument. It requires the aws provider for Terraform, with the user names determined by members of the set. Ensures a resource is created for each unique user name; each.key is used for the user's name. Outputs include individually managed user resources.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/meta-arguments/for_each.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_iam_user\" \"the-accounts\" {\n  for_each = toset([\"Todd\", \"James\", \"Alice\", \"Dottie\"])\n  name     = each.key\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Backend with Managed Identity in Terraform\nDESCRIPTION: Azure Storage backend configuration using Managed Identity authentication. Supports both System and User Assigned Managed Identities with optional client ID configuration.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/azurerm.mdx#2025-04-22_snippet_10\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  backend \"azurerm\" {\n    use_msi              = true                                    # Can also be set via `ARM_USE_MSI` environment variable.\n    tenant_id            = \"00000000-0000-0000-0000-000000000000\"  # Can also be set via `ARM_TENANT_ID` environment variable.\n    subscription_id      = \"00000000-0000-0000-0000-000000000000\"  # Can also be set via `ARM_SUBSCRIPTION_ID` environment variable.\n    client_id            = \"00000000-0000-0000-0000-000000000000\"  # Can also be set via `ARM_CLIENT_ID` environment variable. Not required for System Assigned Managed Identity.\n    resource_group_name  = \"StorageAccount-ResourceGroup\"          # Can be passed via `-backend-config=`\"resource_group_name=<resource group name>\"` in the `init` command.\n    storage_account_name = \"abcd1234\"                              # Can be passed via `-backend-config=`\"storage_account_name=<storage account name>\"` in the `init` command.\n    container_name       = \"tfstate\"                               # Can be passed via `-backend-config=`\"container_name=<container name>\"` in the `init` command.\n    key                  = \"prod.terraform.tfstate\"                # Can be passed via `-backend-config=`\"key=<blob key name>\"` in the `init` command.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Provider Requirements in Terraform Modules using HCL\nDESCRIPTION: This snippet demonstrates how to declare provider requirements within a Terraform module using a `terraform` block. It specifies the required provider source (`hashicorp/aws`) and a version constraint (`>= 2.7.0`), ensuring Terraform uses a compatible provider version. This declaration is necessary in each module that uses the provider, even though configurations are shared.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/develop/providers.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \">= 2.7.0\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Minimal Module Structure in Shell\nDESCRIPTION: This shell command snippet uses the \\'tree\\' command to display the directory structure of a minimal Terraform module that adheres to the recommended standard module structure. It outlines the presence of essential files like README.md, main.tf, variables.tf, and outputs.tf, which are foundational for developing compliant modules.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/develop/structure.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ tree minimal-module/\n.\n├── README.md\n├── main.tf\n├── variables.tf\n├── outputs.tf\n```\n\n----------------------------------------\n\nTITLE: Enforcing Preconditions in Terraform Outputs Using Custom Condition (HCL)\nDESCRIPTION: This snippet enforces an assumption using Terraform's precondition in an output block, ensuring that the referenced EC2 instance has an encrypted root EBS volume. If the precondition fails, a custom error message is shown. Required dependencies are the aws_instance and data.aws_ebs_volume objects, and Terraform 1.2+ for precondition support. The input expects properly linked resources, and output is a validated API base URL.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/develop/composition.mdx#2025-04-22_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\noutput \"api_base_url\" {\n  value = \"https://${aws_instance.example.private_dns}:8433/\"\n\n  # The EC2 instance must have an encrypted root volume.\n  precondition {\n    condition     = data.aws_ebs_volume.example.encrypted\n    error_message = \"The server's root volume is not encrypted.\"\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Chaining for_each Across AWS Resources for VPC and Internet Gateway Creation in Terraform HCL\nDESCRIPTION: This snippet demonstrates chaining the for_each meta-argument from one resource (aws_vpc) to another (aws_internet_gateway) and outputting results with dependency management. Requires the aws provider, a map input variable for VPCs, and Terraform 0.12.6+ for for_each support. Each VPC is provisioned from 'var.vpcs', and each internet gateway is created per VPC by referencing aws_vpc.example. Outputs a map of VPC IDs and explicitly declares a dependency between output and gateway resources for correct ordering.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/meta-arguments/for_each.mdx#2025-04-22_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"vpcs\" {\n  type = map(object({\n    cidr_block = string\n  }))\n}\n\nresource \"aws_vpc\" \"example\" {\n  # One VPC for each element of var.vpcs\n  for_each = var.vpcs\n\n  # each.value here is a value from var.vpcs\n  cidr_block = each.value.cidr_block\n}\n\nresource \"aws_internet_gateway\" \"example\" {\n  # One Internet Gateway per VPC\n  for_each = aws_vpc.example\n\n  # each.value here is a full aws_vpc object\n  vpc_id = each.value.id\n}\n\noutput \"vpc_ids\" {\n  value = {\n    for k, v in aws_vpc.example : k => v.id\n  }\n\n  # The VPCs aren't fully functional until their\n  # internet gateways are running.\n  depends_on = [aws_internet_gateway.example]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Postcondition for AWS AMI Component Validation\nDESCRIPTION: A data source declaration with a postcondition that verifies the AMI has the correct component tag. This ensures the provided AMI ID refers to the intended system component.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/custom-conditions.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"aws_ami\" \"example\" {\n  id = var.aws_ami_id\n\n  lifecycle {\n    # The AMI ID must refer to an existing AMI that has the tag \"nomad-server\".\n    postcondition {\n      condition     = self.tags[\"Component\"] == \"nomad-server\"\n      error_message = \"tags[\\\"Component\\\"] must be \\\"nomad-server\\\".\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing List Elements in Terraform HCL\nDESCRIPTION: This snippet demonstrates how to access elements in a list by index in Terraform. It creates two outputs, one for the first element and another for the second element of the 'example_list'.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/types.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\noutput \"first_element\" {\n  value = local.example_list[0]\n}\noutput \"second_element\" {\n  value = local.example_list[1]\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Resources with Arguments in Terraform HCL\nDESCRIPTION: Declares an AWS EC2 instance resource named 'web' with custom Amazon Machine Image (AMI) and instance type arguments. Requires the AWS provider to be configured separately and the specified AMI to exist. 'ami' selects the machine image, while 'instance_type' determines the compute tier. The resource block is the primary method for specifying infrastructure objects to manage; values for arguments can be literals or references to other objects. Outputs a state-managed resource in AWS. Resource name must be unique within the module and meet naming restrictions.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/resources/syntax.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"web\" {\n  ami           = \"ami-a1b2c3d4\"\n  instance_type = \"t2.micro\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Terraform Block Configuration in HCL\nDESCRIPTION: This snippet shows a complete example of a `terraform` block defining all supported built-in arguments, including required version, required providers, provider meta, mutually exclusive backend or cloud configuration, and experimental features. It is intended as a template for advanced Terraform workspace configuration, where users can customize provider sources, version constraints, remote state backends, cloud integration, and feature flags. Dependencies include the Terraform CLI and any specified providers; users must choose only one of the mutually exclusive blocks (`backend` or `cloud`). All parameter values must be constants.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/terraform.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_version = \"<version>\"\n  required_providers {\n    <PROVIDER> {\n      version = \"<version-constraint>\"\n      source = \"<provider-address>\"\n    }\n  }\n  provider_meta \"<LABEL>\" { \n    # Shown for completeness but only used for specific cases     \n  }\n  backend \"<TYPE>\" {        \n    # `backend` is mutually exclusive with `cloud` \n    \"<ARGUMENTS>\"\n  }\n  cloud {                   \n    # `cloud` is mutually exclusive with `backend` \n    organization = \"<organization-name>\"\n    workspaces {\n      tags = [ \"<tag>\" ]\n      name = \"<workspace-name>\"\n      project = \"<project-name>\"\n    }\n    hostname = \"app.terraform.io\"\n    token - \"<TOKEN>\"\n  }\n  experiments = [ \"<feature-name>\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating Multiple Module Instances with for_each in Terraform HCL\nDESCRIPTION: This snippet illustrates using for_each with a set of strings to create multiple instances of a Terraform module. Each instance corresponds to a set entry and is passed to the module 'bucket' with its own name parameter. Requires a local ./publish_bucket module that expects a 'name' input variable. Each.module instance gets a unique name suffixed with '_bucket'.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/meta-arguments/for_each.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n# my_buckets.tf\nmodule \"bucket\" {\n  for_each = toset([\"assets\", \"media\"])\n  source   = \"./publish_bucket\"\n  name     = \"${each.key}_bucket\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Backend in Terraform\nDESCRIPTION: Example of configuring the 'remote' backend type within a Terraform configuration. This specifies the organization and workspace to store state data remotely.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  backend \"remote\" {\n    organization = \"example_corp\"\n\n    workspaces {\n      name = \"my-app-prod\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating All Subnet Combinations from Network and Subnet Lists - Terraform HCL\nDESCRIPTION: This snippet shows how to convert input maps (networks and subnets) to lists, compute all unique combinations via setproduct, and generate calculated output properties for each combination. The local values construct two lists from the maps, then processes the setproduct result to extract meaningful keys and calculated CIDR blocks for each subnet. Dependencies: Terraform local values, setproduct, for expressions, and cidrsubnet. Inputs: var.networks, var.subnets. Outputs: local.network_subnets (list of subnet objects with keys and attributes).\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/setproduct.mdx#2025-04-22_snippet_6\n\nLANGUAGE: HCL\nCODE:\n```\nlocals {\n  # setproduct works with sets and lists, but the variables are both maps\n  # so convert them first.\n  networks = [\n    for key, network in var.networks : {\n      key        = key\n      cidr_block = network.cidr_block\n    }\n  ]\n  subnets = [\n    for key, subnet in var.subnets : {\n      key    = key\n      number = subnet.number\n    }\n  ]\n\n  network_subnets = [\n    # in pair, element zero is a network and element one is a subnet,\n    # in all unique combinations.\n    for pair in setproduct(local.networks, local.subnets) : {\n      network_key = pair[0].key\n      subnet_key  = pair[1].key\n      network_id  = aws_vpc.example[pair[0].key].id\n\n      # The cidr_block is derived from the corresponding network. Refer to the\n      # cidrsubnet function for more information on how this calculation works.\n      cidr_block = cidrsubnet(pair[0].cidr_block, 4, pair[1].number)\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Propagating Sensitive Outputs Across Modules and Resources in Terraform HCL\nDESCRIPTION: This comprehensive snippet includes both root and child module usage of sensitive outputs. It demonstrates how sensitive output values propagate through module attributes and are referenced in resource arguments. Sensitive outputs are redacted in apply/plan output, but are still available in state files. Dependencies: presence of ./mod child module, resource definitions, and relevant attribute references. Inputs: none; Outputs: sensitive value for resource attributes or outputs.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/values/outputs.mdx#2025-04-22_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\n# main.tf\n\nmodule \"foo\" {\n  source = \"./mod\"\n}\n\nresource \"test_instance\" \"x\" {\n  some_attribute = module.foo.a # resource attribute references a sensitive output\n}\n\noutput \"out\" {\n  value     = \"xyz\"\n  sensitive = true\n}\n\n# mod/main.tf, our module containing a sensitive output\n\noutput \"a\" {\n  value     = \"secret\"\n  sensitive = true\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Simple Local Values in Terraform HCL\nDESCRIPTION: This snippet demonstrates the basic declaration of local values within a `locals` block in Terraform HCL. It assigns the string literal 'forum' to `local.service_name` and 'Community Team' to `local.owner`. These named values can then be reused elsewhere in the module configuration.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/values/locals.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nlocals {\n  service_name = \"forum\"\n  owner        = \"Community Team\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Azure Resource Groups Using for_each in Terraform HCL\nDESCRIPTION: This snippet demonstrates creating multiple azurerm_resource_group resources using the for_each meta-argument over a map, allowing individual key-value pairs to determine the group's name and location. Requires the azurerm provider and Terraform 0.12.6+ with for_each support. Expects a map object for for_each, with each.key as the resource name and each.value as the Azure region. Outputs are the Azure resource group instances tied to the provided map; cannot be combined in the same block with count.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/meta-arguments/for_each.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azurerm_resource_group\" \"rg\" {\n  for_each = tomap({\n    a_group       = \"eastus\"\n    another_group = \"westus2\"\n  })\n  name     = each.key\n  location = each.value\n}\n```\n\n----------------------------------------\n\nTITLE: Using can() Function for Safe Regex Validation in Terraform\nDESCRIPTION: A variable declaration that uses the can() function to safely perform regex validation on an AMI ID. This approach prevents the validation itself from causing errors if the regex cannot find a match.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/custom-conditions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"image_id\" {\n  type        = string\n  description = \"The id of the machine image (AMI) to use for the server.\"\n\n  validation {\n    # regex(...) fails if it cannot find a match\n    condition     = can(regex(\"^ami-\", var.image_id))\n    error_message = \"The image_id value must be a valid AMI id, starting with \\\"ami-\\\".\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Terraform Cloud Integration - HCL\nDESCRIPTION: This Terraform configuration block sets up integration with HCP Terraform (Terraform Cloud/Enterprise) by specifying organization, hostname, and workspace tagging options. It enables remote state management, centralized input variable storage, and enhanced collaborative workflows. Required dependencies include an HCP Terraform (Terraform Cloud) account and an API key. Key parameters are the organization name, optional hostname, and workspace tags. The output is a Terraform CLI environment configured to communicate with Terraform Cloud.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/intro/core-workflow.mdx#2025-04-22_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\\n  cloud {\\n    organization = \\\"my-org\\\"\\n    hostname = \\\"app.terraform.io\\\" # Optional; defaults to app.terraform.io\\n\\n    workspaces {\\n      tags = {\\n        layer = \\\"networking\\\"\\n        source = \\\"cli\\\"\\n      }\\n      \\n      # For terraform versions below 1.10, you must specify key-only tags\\n      # using a list of strings. Example:\\n      # tags = [\\\"networking\\\", \\\"source:cli\\\"]\\n    }\\n  }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Provider in Terraform Stack\nDESCRIPTION: This snippet demonstrates how to configure the AWS provider in a Terraform Stack, including required_providers block and provider block with region and assume role settings.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/reference/tfstack.mdx#2025-04-22_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nrequired_providers {\n    aws = {\n        source  = \"hashicorp/aws\"\n        version = \"~> 5.7.0\"\n    }\n}\n\n# \"main\" is the alias for this provider\nprovider \"aws\" \"main\" {\n# The config block accepts the configuration for a provider\n    config {\n        region = var.region\n\n        assume_role_with_web_identity {\n            role_arn           = var.role_arn\n            web_identity_token = var.identity_token\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ephemeral Resources and Write-Only Arguments in Terraform\nDESCRIPTION: This snippet demonstrates how to use ephemeral resources and write-only arguments in Terraform. It creates a random password, stores it in AWS Secrets Manager, and uses it to configure an RDS instance without persisting the sensitive data in Terraform's state.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/resources/ephemeral/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nephemeral \"random_password\" \"db_password\" {\n  length           = 16\n  override_special = \"!#$%&*()-_=+[]{}<>:?\"\n}\n\nresource \"aws_secretsmanager_secret\" \"db_password\" {\n  name = \"db_password\"\n}\n\nresource \"aws_secretsmanager_secret_version\" \"db_password\" {\n  secret_id                = aws_secretsmanager_secret.db_password.id\n  secret_string_wo         = ephemeral.random_password.db_password.result\n  secret_string_wo_version = 1\n}\n\nephemeral \"aws_secretsmanager_secret_version\" \"db_password\" {\n  secret_id = aws_secretsmanager_secret_version.db_password.secret_id\n}\n\nresource \"aws_db_instance\" \"example\" {\n  instance_class      = \"db.t3.micro\"\n  allocated_storage   = \"5\"\n  engine              = \"postgres\"\n  username            = \"example\"\n  skip_final_snapshot = true\n  password_wo         = ephemeral.aws_secretsmanager_secret_version.db_password.secret_string\n  password_wo_version = aws_secretsmanager_secret_version.db_password.secret_string_wo_version\n}\n```\n\n----------------------------------------\n\nTITLE: Using terraform_data for replace_triggered_by in Terraform HCL\nDESCRIPTION: This snippet demonstrates how to use the terraform_data resource to trigger replacement of another resource based on a variable change. It's useful when you need to force replacement of a resource that doesn't have a convenient attribute for this purpose.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/resources/terraform-data.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"revision\" {\n  default = 1\n}\n\nresource \"terraform_data\" \"replacement\" {\n  input = var.revision\n}\n\n# This resource has no convenient attribute which forces replacement,\n# but can now be replaced by any change to the revision variable value.\nresource \"example_database\" \"test\" {\n  lifecycle {\n    replace_triggered_by = [terraform_data.replacement]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Organizing Data Sources and Resources in Terraform HCL\nDESCRIPTION: Example showing how to organize data sources before the resources that reference them for better readability. The resource references data from aws_ami and aws_availability_zones data sources.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/style.mdx#2025-04-22_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"aws_ami\" \"web\" {\n  ##...\n}\n\ndata \"aws_availability_zones\" \"available\" {\n  ##...\n}\n\nresource \"aws_instance\" \"web\" {\n  ami               = data.aws_ami.web.id\n  availability_zone = data.aws_availability_zones.available.names[0]\n  ##...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Set Variable for Resource Iteration in Terraform HCL\nDESCRIPTION: This HCL snippet illustrates defining an input variable named `subnet_ids` with the explicit type `set(string)`. This allows users of the module to provide a set of strings directly. The variable `var.subnet_ids` is then consumed by the `for_each` meta-argument in an `aws_instance` resource block, enabling the creation of multiple instances based on the provided set elements without requiring an explicit `toset` conversion within the resource block.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/meta-arguments/for_each.mdx#2025-04-22_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"subnet_ids\" {\n  type = set(string)\n}\n\nresource \"aws_instance\" \"server\" {\n  for_each = var.subnet_ids\n\n  # (and the other arguments as above)\n}\n```\n\n----------------------------------------\n\nTITLE: Calling and Configuring a Child Module - Terraform HCL\nDESCRIPTION: This snippet demonstrates how to instantiate a child module in Terraform by defining a `module` block with a specified source path and input variables (in this case, `servers`). The module call enables resource composition and reuse, requiring the `source` argument (path to module) and supporting additional arguments that match the child module's input variables. No external dependencies are required beyond Terraform. The expected behavior is to include all resources defined in `./app-cluster` with the parameter `servers = 5` in the current configuration.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/syntax.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"servers\" {\n  source = \"./app-cluster\"\n\n  servers = 5\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Required Providers in Terraform Using HCL\nDESCRIPTION: This snippet demonstrates usage of the `required_providers` block within the `terraform` block to declare all provider plugins necessary for the configuration. Each provider is listed by name and may specify additional attributes like source and version. The configuration ensures that Terraform fetches the correct plugins from the registry as determined by the user's constraints. The main parameters are the provider names, and the block accepts nested blocks for each provider. No outputs are produced, but provider resolution occurs during `terraform init`.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/terraform.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    <PROVIDER> {}\n  }\n  # . . .\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Resource Attributes in Terraform HCL\nDESCRIPTION: Demonstrates the syntax for referencing resource attributes in Terraform expressions. This allows you to use information from one resource to configure another.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/resources/behavior.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n<RESOURCE TYPE>.<NAME>.<ATTRIBUTE>\n```\n\n----------------------------------------\n\nTITLE: Defining a Single Component in Terraform Stacks (HCL)\nDESCRIPTION: This HCL snippet defines a single infrastructure component named 'cluster' within a `components.tfstack.hcl` file. It specifies a local module source ('./eks'), provides input values derived from variables (`var.aws_region`, `var.prefix`) and a static value (`\"t2.medium\"`), and maps required providers (aws, random, tls, cloudinit) to their respective configurations.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/create/config.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# components.tfstack.hcl\n\ncomponent \"cluster\" {\n    source = \"./eks\"\n    inputs = {\n        aws_region          = var.aws_region\n        cluster_name_prefix = var.prefix\n        instance_type       = \"t2.medium\"\n    }\n    providers = {\n        aws       = provider.aws.this\n        random    = provider.random.this\n        tls       = provider.tls.this\n        cloudinit = provider.cloudinit.this\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Backend in Terraform\nDESCRIPTION: Basic configuration of S3 backend for Terraform state storage, specifying the bucket, key path, and AWS region.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/s3.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  backend \"s3\" {\n    bucket = \"mybucket\"\n    key    = \"path/to/my/key\"\n    region = \"us-east-1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Terraform Output Variables Using HCL\nDESCRIPTION: This snippet shows how to declare output variables in Terraform's HashiCorp Configuration Language (HCL), including regular, list, and sensitive outputs. Outputs are defined with names, their computed values (referencing resource or variable attributes), and the optional “sensitive” flag for masking values in standard output. This definition is required in Terraform modules for the “terraform output” command to extract and display values after applying infrastructure changes.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/output.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\noutput \"instance_ips\" {\n  value = aws_instance.web.*.public_ip\n}\n\noutput \"lb_address\" {\n  value = aws_alb.web.public_dns\n}\n\noutput \"password\" {\n  sensitive = true\n  value     = var.secret_password\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using terraform_data as a replacement for null_resource in Terraform HCL\nDESCRIPTION: This example shows how to use terraform_data as a container for arbitrary actions taken by a provisioner. It triggers replacement based on changes to other resources and executes a local command using a provisioner.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/resources/terraform-data.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"web\" {\n  # ...\n}\n\nresource \"aws_instance\" \"database\" {\n  # ...\n}\n\n# A use-case for terraform_data is as a do-nothing container\n# for arbitrary actions taken by a provisioner.\nresource \"terraform_data\" \"bootstrap\" {\n  triggers_replace = [\n    aws_instance.web.id,\n    aws_instance.database.id\n  ]\n\n  provisioner \"local-exec\" {\n    command = \"bootstrap-hosts.sh\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Terraform Changes and Reviewing Plan - CLI - shell\nDESCRIPTION: This command runs 'terraform apply', which generates and displays an execution plan before prompting the user for confirmation. The user can review planned infrastructure changes and must explicitly approve before any resources are created or updated. Dependencies include a configured Terraform environment and valid credentials for any required providers. Outputs include the detailed plan and, upon confirmation, the applied infrastructure resources.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/intro/core-workflow.mdx#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ terraform apply\\n\\nAn execution plan has been generated and is shown below.\\n# ...\\n\n```\n\n----------------------------------------\n\nTITLE: Organizing Resource Blocks with Arguments and Meta-Arguments in Terraform HCL - HCL\nDESCRIPTION: This HCL snippet demonstrates the recommended order of arguments, meta-arguments, and nested blocks inside a Terraform resource block. Meta-arguments should appear first, followed by standard arguments, then nested blocks; meta-argument blocks (like lifecycle) should be placed last. This organizational pattern improves code structure and clarity. The snippet uses the aws_instance resource to exemplify argument placement and indentation conventions and requires the AWS provider for functional execution.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/style.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"example\" {\n  # meta-argument first\n  count = 2\n\n  ami           = \"abc123\"\n  instance_type = \"t2.micro\"\n\n  network_interface {\n    # ...\n  }\n\n  # meta-argument block last\n  lifecycle {\n    create_before_destroy = true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining S3 Backend in Terraform - HCL\nDESCRIPTION: This snippet is a Terraform backend configuration in HashiCorp Configuration Language (HCL) which instructs Terraform to use S3 as the backend for storing state files. It specifies the bucket, object key, region and enables lock file usage for safe state edits. Required dependencies are AWS credentials and an S3 bucket. Inputs include bucket/key/region values; outputs are Terraform state operations performed against this S3 backend. Limitations: primary use is with Amazon S3, as S3 compatible providers are only partially supported.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/s3.mdx#2025-04-22_snippet_9\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  backend \"s3\" {\n    bucket       = \"example-bucket\"\n    key          = \"path/to/state\"\n    use_lockfile = true\n    region       = \"us-east-1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Block for AWS Instance (Terraform HCL)\nDESCRIPTION: This snippet showcases how to define a resource block for an AWS EC2 instance in Terraform's HCL configuration language. The resource is given a unique name ('example') for subsequent referencing. The body of the block can be left incomplete at the time of import, and can be completed post-import to match desired state. Prerequisites: Terraform installed, AWS provider configured, and valid credentials. Key input is the resource type and local name, and the output is a configuration block recognized by Terraform.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/import/usage.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"example\" {\n  # ...instance configuration...\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Remote State Outputs with terraform_remote_state (remote Backend, HCL)\nDESCRIPTION: Demonstrates how to use the terraform_remote_state data source with the remote backend to retrieve outputs from another Terraform workspace. It shows parameterization of organization and workspace, and illustrates referencing remote state outputs in aws_instance resources for both Terraform >=0.12 and <=0.11. Requires Terraform configured with a remote backend and an existing state (workspace) to reference; aws provider is assumed for aws_instance resources. Inputs are organization and workspace, outputs are retrieved resource IDs; limitations include correct permissions and backend support.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/state/remote-state-data.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"terraform_remote_state\" \"vpc\" {\n  backend = \"remote\"\n\n  config = {\n    organization = \"hashicorp\"\n    workspaces = {\n      name = \"vpc-prod\"\n    }\n  }\n}\n\n# Terraform >= 0.12\nresource \"aws_instance\" \"foo\" {\n  # ...\n  subnet_id = data.terraform_remote_state.vpc.outputs.subnet_id\n}\n\n# Terraform <= 0.11\nresource \"aws_instance\" \"foo\" {\n  # ...\n  subnet_id = \"${data.terraform_remote_state.vpc.subnet_id}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Descriptions to Terraform Input Variables in HCL\nDESCRIPTION: Illustrates how to add a description to a Terraform input variable using the `description` argument within a `variable` block. This description serves as documentation for users of the module, explaining the variable's purpose and expected value format.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/values/variables.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"image_id\" {\n  type        = string\n  description = \"The id of the machine image (AMI) to use for the server.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using ignore_changes to Selectively Manage Resource Attributes in Terraform (HCL)\nDESCRIPTION: This code illustrates the use of the ignore_changes meta-argument in a lifecycle block within an aws_instance resource, which tells Terraform to ignore changes to specified attributes (such as tags) when updating infrastructure state. This is useful for sharing resource management with external processes or when certain attributes are managed outside of Terraform. The dependencies are standard AWS provider configuration; primary input is the resource definition, and the main effect is that Terraform will ignore any changes to the listed attributes in future operations.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/meta-arguments/lifecycle.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"example\" {\n  # ...\n\n  lifecycle {\n    ignore_changes = [\n      # Ignore changes to tags, e.g. because a management agent\n      # updates these based on some ruleset managed elsewhere.\n      tags,\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Maximum Allowed Patch Version with '~>' Operator in Terraform Required Providers (HCL)\nDESCRIPTION: This snippet shows how to restrict installation of a provider to only patch-level updates within a specified minor release by using the '~> 1.0.4' version constraint in the 'required_providers' block. This is appropriate for root configurations where accidental upgrades to breaking releases must be prevented. The local provider alias 'mycloud' is assigned to 'hashicorp/aws' and locked to versions compatible with 1.0.4 (i.e., 1.0.x where x >= 4 but < 1.1.0).\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/providers/requirements.mdx#2025-04-22_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    mycloud = {\n      source  = \"hashicorp/aws\"\n      version = \"~> 1.0.4\"\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Multi-Instance AWS Resources Using count - Terraform HCL\nDESCRIPTION: This snippet shows how to define multiple AWS EC2 instance resources in Terraform using the count meta-argument. The count keyword allows creation of a specified number of instances of the given resource type. Required dependencies include the Terraform AWS provider and appropriate credentials. Here, count is set to 4, producing four 'web' instances. The resource accepts standard EC2 instance arguments (not shown). Inputs: count value. Outputs: aws_instance resource instances. Limitation: all instances are indexed numerically.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/state/resource-addressing.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \\\"aws_instance\\\" \\\"web\\\" {\n  # ...\n  count = 4\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Resources with Destroy-Time Provisioner in Terraform HCL\nDESCRIPTION: Removes an 'aws_instance.example' resource from Terraform and ensures that the managed infrastructure object is destroyed, executing a local-exec provisioner on deletion. The provisioner runs when destroying the instance, using 'self.id' for context. Requires Terraform v1.7+, and 'destroy = true' within 'lifecycle' ensures destruction of the remote object. The provisioner provides custom cleanup actions or notifications at resource destruction. Only certain references are available within the provisioner.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/resources/syntax.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nremoved {\n  from = aws_instance.example\n\n  lifecycle {\n    destroy = true\n  }\n\n  provisioner \"local-exec\" {\n    when    = destroy\n    command = \"echo 'Instance ${self.id} has been destroyed.'\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Controlling Parallel Execution of Run Blocks in HCL\nDESCRIPTION: This HCL example (`with_config.tftest.hcl`) illustrates defining multiple `run` blocks and managing parallel execution. A top-level `test` block sets `parallel = true`, enabling parallel execution by default for `run` blocks within the file. A `variables` block sets a shared variable. The `run` blocks \"first\" and \"second\" implicitly inherit the parallel setting. The `run` block \"third\" explicitly overrides the global setting with `parallel = false`, ensuring it runs sequentially relative to other non-parallel blocks.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/tests/index.mdx#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\n# with_config.tftest.hcl\ntest {\n  parallel = true\n}\n\nvariables {\n  bucket_prefix = \"test\"\n}\n\nrun \"first\" {\n  assert {\n    condition     = aws_s3_bucket.bucket.bucket == \"test-bucket\"\n    error_message = \"S3 bucket name did not match expected\"\n  }\n}\n\nrun \"second\" {\n  assert {\n    condition     = aws_s3_bucket.bucket.bucket == \"test-bucket\"\n    error_message = \"S3 bucket name did not match expected\"\n  }\n}\n\nrun \"third\" {\n  parallel = false\n  assert {\n    condition     = aws_s3_bucket.bucket.bucket == \"test-bucket\"\n    error_message = \"S3 bucket name did not match expected\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Ephemeral Output Values in Child Modules using Terraform HCL\nDESCRIPTION: This example defines an ephemeral output in a Terraform child module, preventing the value from being persisted in state or plan files (available since v1.10). The ephemeral = true flag is useful for passing sensitive or temporary data (like database credentials) between modules without retaining it. The referenced resource must exist. Output: secret value; Limitation: only allowed in child modules, not root modules.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/values/outputs.mdx#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\n# modules/db/main.tf\n\noutput \"secret_id\" {\n  value       = aws_secretsmanager_secret.secret_id\n  description = \"Temporary secret ID for accessing database in AWS.\"\n  ephemeral   = true\n}\n```\n\n----------------------------------------\n\nTITLE: Using Kubernetes Cluster Module in Terraform\nDESCRIPTION: This HCL snippet provides an example of a module that sets up a Kubernetes cluster on Azure and demonstrates how to connect monitoring tools to the cluster using its hostname as input.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/develop/composition.mdx#2025-04-22_snippet_10\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"k8s_cluster\" {\n  source = \"modules/azurerm-k8s-cluster\"\n\n  # (Azure-specific configuration arguments)\n}\n\nmodule \"monitoring_tools\" {\n  source = \"modules/monitoring_tools\"\n\n  cluster_hostname = module.k8s_cluster.hostname\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Mixed-Type List to Set in Terraform\nDESCRIPTION: This example shows how toset handles a list with mixed-type elements. It converts all elements to the most general type, in this case, strings.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/toset.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> toset([\"a\", \"b\", 3])\n[\n  \"3\",\n  \"a\",\n  \"b\",\n]\n```\n\n----------------------------------------\n\nTITLE: Editing Terraform Configuration and Iterative Planning - CLI - shell\nDESCRIPTION: This snippet demonstrates the common workflow of editing Terraform configuration files and running 'terraform plan' to test and refine changes repeatedly. It assumes the presence of a valid configuration file and a previously initialized Terraform environment. Inputs are configuration edits; outputs are the plan preview to validate changes before applying.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/intro/core-workflow.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Make edits to config\\n$ vim main.tf\\n\\n# Review plan\\n$ terraform plan\\n\\n# Make additional edits, and repeat\\n$ vim main.tf\\n\n```\n\n----------------------------------------\n\nTITLE: Using Data Source Output in Resource Configuration in Terraform HCL\nDESCRIPTION: This example shows how to reference the output of a data source in a resource configuration. It demonstrates how to use the AMI ID obtained from a data source when creating an EC2 instance.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/data-sources/index.mdx#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"web\" {\n  ami           = data.aws_ami.web.id\n  instance_type = \"t1.micro\"\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Input Variables in Terraform Resources\nDESCRIPTION: Example showing how to reference a variable value in a resource configuration using the var.NAME syntax, where NAME matches the variable label declared in the configuration.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/values/variables.mdx#2025-04-22_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"example\" {\n  instance_type = \"t2.micro\"\n  ami           = var.image_id\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Provider Configuration Aliases in Terraform Modules using HCL\nDESCRIPTION: This snippet shows how to declare provider requirements including configuration aliases. The `configuration_aliases` argument within the `required_providers` block defines additional named configurations (e.g., `aws.alternate`) for the provider within the module scope. These aliases allow resources in the module to reference specific provider configurations passed down from the parent.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/develop/providers.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \">= 2.7.0\"\n      configuration_aliases = [ aws.alternate ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Resources Without Destroy in Terraform HCL\nDESCRIPTION: Removes the Terraform state association for an 'aws_instance.example' resource but retains the actual infrastructure object. The 'removed' block's 'from' argument identifies the resource to disconnect, while the required 'lifecycle' block sets 'destroy = false'. Requires Terraform v1.7+; for earlier versions, state removal must be done manually via CLI. Result is Terraform stops managing the resource but does not destroy it on the provider platform.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/resources/syntax.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nremoved {\n  from = aws_instance.example\n\n  lifecycle {\n    destroy = false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating AMI ID Format in Terraform Variable\nDESCRIPTION: A variable declaration with validation that ensures the image_id is formatted as a valid AMI ID starting with 'ami-'. This pattern helps prevent configuration errors early.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/custom-conditions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"image_id\" {\n  type        = string\n  description = \"The id of the machine image (AMI) to use for the server.\"\n\n  validation {\n    condition     = length(var.image_id) > 4 && substr(var.image_id, 0, 4) == \"ami-\"\n    error_message = \"The image_id value must be a valid AMI id, starting with \\\"ami-\\\".\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Preconditions to Resource Lifecycle in Terraform (HCL)\nDESCRIPTION: This snippet demonstrates incorporating a precondition block inside a lifecycle block of an aws_instance resource. The precondition asserts that the AMI architecture is 'x86_64', providing an early validation mechanism within Terraform plans and applies. Dependencies include reference to a data.aws_ami resource; the condition and error_message parameters specify the validation to perform and the message to return when unmet. Inputs are resource attributes, outputs are early, contextual error messages during plan or apply if the precondition is not met.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/meta-arguments/lifecycle.mdx#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"example\" {\n  instance_type = \"t2.micro\"\n  ami           = \"ami-abc123\"\n\n  lifecycle {\n    # The AMI ID must refer to an AMI that contains an operating system\n    # for the `x86_64` architecture.\n    precondition {\n      condition     = data.aws_ami.example.architecture == \"x86_64\"\n      error_message = \"The selected AMI must be for the x86_64 architecture.\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implicit Ephemeral Behavior with Local Values in HCL\nDESCRIPTION: Illustrates how the ephemeral characteristic propagates in Terraform. An ephemeral variable `password` is declared. A local value `database_password` is then defined, referencing `var.password`. Because `var.password` is ephemeral, the local value `local.database_password` automatically becomes ephemeral as well and will not be stored in state or plan files.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/values/variables.mdx#2025-04-22_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"password\" {\n  type      = string\n  ephemeral = true\n}\n\nlocals {\n  # local.database_password is implicitly ephemeral because \n  # var.password is ephemeral.\n  database_password = var.password\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Collection and String Lengths with Terraform `length`\nDESCRIPTION: This snippet demonstrates the basic usage of the Terraform `length` function. It shows calculating the length of an empty list (0), a list with two elements (2), a map with one element (1), and a string with five characters (5).\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/length.mdx#2025-04-22_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\n> length([])\n0\n> length([\"a\", \"b\"])\n2\n> length({\"a\" = \"b\"})\n1\n> length(\"hello\")\n5\n```\n\n----------------------------------------\n\nTITLE: Planning Changes with Terraform CLI - Shell\nDESCRIPTION: This command generates an execution plan in Terraform by comparing your current configuration and state to the actual infrastructure objects, without making changes. It helps users see the proposed actions before applying them, ensuring that modifications are intentional and validated. Requires a working directory initialized with Terraform, and operates only on the selected workspace.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/run/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nterraform plan\n```\n\n----------------------------------------\n\nTITLE: Utilizing each and count Objects in Terraform HCL\nDESCRIPTION: In Terraform HCL, `each` and `count` objects are used within blocks that leverage meta-arguments like `for_each` and `count`. They allow referencing expanded resources and data, enabling dynamic configuration based on input sets or state. Correct implementation requires understanding of these meta-arguments and their influence on resource declaration and control flow.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/custom-conditions.mdx#2025-04-22_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"vpc_cidrs\" {\n  type = set(string)\n}\n\ndata \"aws_vpc\" \"example\" {\n  for_each = var.vpc_cidrs\n\n  filter {\n    name   = \"cidr\"\n    values = [each.key]\n  }\n}\n\nresource \"aws_internet_gateway\" \"example\" {\n  for_each = data.aws_vpc.example\n  vpc_id = each.value.id\n\n  lifecycle {\n    precondition {\n      condition     = data.aws_vpc.example[each.key].state == \"available\"\n      error_message = \"VPC ${each.key} must be available.\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Alternate Provider Configuration for a Resource in Terraform\nDESCRIPTION: This example shows how to use an alternate provider configuration for a resource by setting its 'provider' meta-argument to a provider reference.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/providers/configuration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"foo\" {\n  provider = aws.west\n\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring remote-exec provisioner in Terraform HCL\nDESCRIPTION: This snippet demonstrates how to use the remote-exec provisioner with an AWS EC2 instance. It establishes an SSH connection and executes inline commands on the remote resource.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/resources/provisioners/remote-exec.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"web\" {\n  # ...\n\n  # Establishes connection to be used by all\n  # generic remote provisioners (i.e. file/remote-exec)\n  connection {\n    type     = \"ssh\"\n    user     = \"root\"\n    password = var.root_password\n    host     = self.public_ip\n  }\n\n  provisioner \"remote-exec\" {\n    inline = [\n      \"puppet apply\",\n      \"consul join ${aws_instance.web.private_ip}\",\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Provider Configuration Aliases in Terraform Modules\nDESCRIPTION: This snippet demonstrates how to declare configuration aliases within a module to receive alternate provider configurations from the parent module using the 'configuration_aliases' argument.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/providers/configuration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    mycloud = {\n      source  = \"mycorp/mycloud\"\n      version = \"~> 1.0\"\n      configuration_aliases = [ mycloud.alternate ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enforcing Preconditions on Output Values in Terraform HCL\nDESCRIPTION: This example shows how to declare output values with a custom precondition that enforces the EC2 instance root volume is encrypted. If the condition is not met (data.aws_ebs_volume.example.encrypted evaluates to false), Terraform will raise an error with the provided message. This pattern is useful for enforcing module invariants and providing early error signaling. Required dependencies: data.aws_ebs_volume.example and aws_instance.example. Inputs: referenced data and resource; Outputs: URL string if condition passes.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/values/outputs.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\noutput \"api_base_url\" {\n  value = \"https://${aws_instance.example.private_dns}:8433/\"\n\n  # The EC2 instance must have an encrypted root volume.\n  precondition {\n    condition     = data.aws_ebs_volume.example.encrypted\n    error_message = \"The server's root volume is not encrypted.\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Buckets with Optional Attributes in Terraform\nDESCRIPTION: Demonstrates how to use the 'buckets' variable type to configure multiple buckets with different optional attributes and defaults.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/type-constraints.mdx#2025-04-22_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nbuckets = [\n  {\n    name = \"production\"\n    website = {\n      routing_rules = <<-EOT\n      [\n        {\n          \"Condition\" = { \"KeyPrefixEquals\": \"img/\" },\n          \"Redirect\"  = { \"ReplaceKeyPrefixWith\": \"images/\" }\n        }\n      ]\n      EOT\n    }\n  },\n  {\n    name = \"archived\"\n    enabled = false\n  },\n  {\n    name = \"docs\"\n    website = {\n      index_document = \"index.txt\"\n      error_document = \"error.txt\"\n    }\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: JSON Encoding in Terraform\nDESCRIPTION: Example of using jsonencode function to generate valid JSON instead of heredoc strings.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/strings.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n  example = jsonencode({\n    a = 1\n    b = \"hello\"\n  })\n```\n\n----------------------------------------\n\nTITLE: Explicit Output Dependency Declaration in Terraform HCL\nDESCRIPTION: This code shows how to declare explicit dependencies for an output value by using depends_on. This secondary dependency ensures that aws_security_group_rule.local_access is created before users rely on the IP output, possibly for connectivity reasons. It's particularly useful when implicit dependency detection is insufficient. Inputs: aws_instance.server.private_ip, aws_security_group_rule.local_access; Outputs: instance private IP address. Use sparingly and always comment its purpose.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/values/outputs.mdx#2025-04-22_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\noutput \"instance_ip_addr\" {\n  value       = aws_instance.server.private_ip\n  description = \"The private IP address of the main server instance.\"\n\n  depends_on = [\n    # Security group rule must be created before this IP address could\n    # actually be used, otherwise the services will be unreachable.\n    aws_security_group_rule.local_access,\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Creation-Time Local-Exec Provisioner in Terraform Resource Block (HCL)\nDESCRIPTION: This HCL snippet demonstrates how to use the built-in local-exec provisioner inside a Terraform aws_instance resource block. The provisioner runs a shell command referencing the aws_instance attribute self.private_ip to output the server's private IP. No external dependencies are required aside from Terraform and a supported provider (here, aws). Key parameters: command (shell command to execute). This provisioner runs only when the resource is created, and if it fails, the resource is tainted unless on_failure is set otherwise.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/resources/provisioners/syntax.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"web\" {\n  # ...\n\n  provisioner \"local-exec\" {\n    command = \"echo The server's IP address is ${self.private_ip}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Import Block with Resource in Terraform HCL\nDESCRIPTION: Shows the basic syntax for an import block that imports an AWS instance with ID 'i-abcd1234' into the aws_instance.example resource in the root module.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/import/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nimport {\n  to = aws_instance.example\n  id = \"i-abcd1234\"\n}\n\nresource \"aws_instance\" \"example\" {\n  name = \"hashi\"\n  # (other resource arguments...)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Using a Terraform Module\nDESCRIPTION: This snippet demonstrates how to reference a local Terraform module for deploying an application stack. It shows the structure required to define inputs that customize the infrastructure setup. Dependencies include having Terraform installed and a local module available at './modules/appstack'. The given variables, 'web_instance_count' and 'api_instance_count', adjust the scale of the deployment. The output captures the IPs of web instances. Outputs depend on the module's implementation and the infrastructure being set up.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/intro/phases/adopt.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"appstack\" {\n  source = \"./modules/appstack\"\n\n  web_instance_count = 2\n  api_instance_count = 1\n}\n\noutput \"web_instance_ips\" {\n  value = module.appstack.web_ips\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Module Version from Registry - Terraform HCL\nDESCRIPTION: This snippet illustrates how to reference a module from the public Terraform Registry or any compliant module registry, specifying both a `source` registry address and an explicit `version` constraint. Input variable `servers` is also set. When used, Terraform will download and use version `0.0.5` of the provided module unless another version is already installed and meets the constraint. This controls reproducibility and stability for module dependencies. The registry module must exist and support versioning.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/syntax.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"consul\" {\n  source  = \"hashicorp/consul/aws\"\n  version = \"0.0.5\"\n\n  servers = 3\n}\n```\n\n----------------------------------------\n\nTITLE: Conditionally Assuming IAM Roles in AWS Provider based on Terraform Workspace (Terraform)\nDESCRIPTION: This HCL snippet shows how to configure the AWS provider in Terraform to dynamically assume different IAM roles based on the currently selected workspace. It defines a variable `workspace_iam_roles` mapping workspace names (e.g., 'staging', 'production') to their corresponding IAM role ARNs. The `assume_role` block within the provider configuration uses the `terraform.workspace` interpolation function to look up the correct `role_arn` from the map, enabling environment-specific permissions in a multi-account setup. AWS credentials for the initial authentication (before assuming the role) are expected to be provided via environment variables or the AWS credentials file.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/s3.mdx#2025-04-22_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\n```hcl\nvariable \"workspace_iam_roles\" {\n  default = {\n    staging    = \"arn:aws:iam::STAGING-ACCOUNT-ID:role/Terraform\"\n    production = \"arn:aws:iam::PRODUCTION-ACCOUNT-ID:role/Terraform\"\n  }\n}\n\nprovider \"aws\" {\n  # No credentials explicitly set here because they come from either the\n  # environment or the global credentials file.\n\n  assume_role = {\n    role_arn = var.workspace_iam_roles[terraform.workspace]\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Using Local Values in Terraform HCL\nDESCRIPTION: Example of using local values to create reusable expressions that can be referenced multiple times. This example creates a name suffix that combines region and environment variables.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/style.mdx#2025-04-22_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\nlocals {\n  name_suffix = \"${var.region}-${var.environment}\"\n}\n\nresource \"aws_instance\" \"web\" {\n  ami           = data.aws_ami.ubuntu.id\n  instance_type = \"t3.micro\"\n\n  tags = {\n    Name = \"web-${local.name_suffix}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Marking File Content as Sensitive using `sensitive` in HCL\nDESCRIPTION: This HCL snippet demonstrates using the `sensitive` function within a `locals` block to read the content of a file (`sensitive.txt`) located in the current module's directory and mark the resulting string as sensitive. This prevents the file's content from being inadvertently exposed in Terraform's output. It depends on the `file` function and the `path.module` variable.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/sensitive.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n```hcl\nlocals {\n  sensitive_content = sensitive(file(\"${path.module}/sensitive.txt\"))\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Triggering Runs on Output Value Changes in Terraform Stack\nDESCRIPTION: This snippet illustrates how changes in an upstream Stack's output values automatically trigger runs for dependent downstream Stacks. It shows the application Stack configuration that depends on the networking Stack's VPC ID output.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/deploy/pass-data.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n# Application Stack deployment configuration\n\nupstream_input \"network_stack\" {\n  type   = \"stack\"\n  source = \"app.terraform.io/hashicorp/Default Project/networking-stack\"\n}\n\ndeployment \"application\" {\n  inputs = {\n    vpc_id = upstream_input.network_stack.vpc_id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Variables via Command Line in Terraform\nDESCRIPTION: Examples of setting variables using the -var command line option with different data types including strings, lists, and maps in Unix-style shell syntax.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/values/variables.mdx#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nterraform apply -var=\"image_id=ami-abc123\"\nterraform apply -var='image_id_list=[\"ami-abc123\",\"ami-def456\"]' -var=\"instance_type=t2.micro\"\nterraform apply -var='image_id_map={\"us-east-1\":\"ami-abc123\",\"us-east-2\":\"ami-def456\"}'\n```\n\n----------------------------------------\n\nTITLE: Multi-Region Provider Configuration in Terraform\nDESCRIPTION: Comprehensive example demonstrating how to configure multiple providers across different regions for both AWS and Google Cloud, and how to pass these configurations to separate module instances.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/develop/providers.mdx#2025-04-22_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\nprovider \"aws\" {\n  alias  = \"usw1\"\n  region = \"us-west-1\"\n}\n\nprovider \"aws\" {\n  alias  = \"usw2\"\n  region = \"us-west-2\"\n}\n\nprovider \"google\" {\n  alias       = \"usw1\"\n  credentials = file(\"account.json\")\n  project     = \"my-project-id\"\n  region      = \"us-west1\"\n  zone        = \"us-west1-a\"\n}\n\nprovider \"google\" {\n  alias       = \"usw2\"\n  credentials = file(\"account.json\")\n  project     = \"my-project-id\"\n  region      = \"us-west2\"\n  zone        = \"us-west2-a\"\n}\n\nmodule \"bucket_w1\" {\n  source    = \"./publish_bucket\"\n  providers = {\n    aws.src    = aws.usw1\n    google.src = google.usw1\n  }\n}\n\nmodule \"bucket_w2\" {\n  source    = \"./publish_bucket\"\n  providers = {\n    aws.src    = aws.usw2\n    google.src = google.usw2\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining moved Block in Terraform HCL\nDESCRIPTION: This snippet demonstrates a complete `moved` block configuration in Terraform, specifying an old address using the `from` field and a new address using the `to` field. The block supports refactoring operations by programmatically relocating resources without destroying them. The block requires string values for both the `from` and `to` parameters, referencing the previous and new resource addresses, respectively.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/moved.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nmoved {\n    from = <old address for the resource>\n    to = <new address for the resource>\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Splat Expression with Nested Access\nDESCRIPTION: Shows how to use splat expressions to access nested attributes and indexes from complex data structures.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/splat.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nvar.list[*].interfaces[0].name\n```\n\nLANGUAGE: hcl\nCODE:\n```\n[for o in var.list : o.interfaces[0].name]\n```\n\n----------------------------------------\n\nTITLE: Testing Input Variable Validation in Terraform (HCL)\nDESCRIPTION: This snippet demonstrates how to test the validation block on an input variable in Terraform. It includes a configuration file that accepts a single input variable that must be an even number, and a test file with two run blocks to validate both passing and failing conditions.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/tests/index.mdx#2025-04-22_snippet_18\n\nLANGUAGE: hcl\nCODE:\n```\n# main.tf\n\nvariable \"input\" {\n  type = number\n\n  validation {\n    condition = var.input % 2 == 0\n    error_message = \"must be even number\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Provider Aliasing in Terraform HCL (Providers Definition)\nDESCRIPTION: Demonstrates how to define multiple instances of the same provider using aliases. This example creates two AWS provider configurations for different regions.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/style.mdx#2025-04-22_snippet_9\n\nLANGUAGE: hcl\nCODE:\n```\nprovider \"aws\" {\n  region = \"us-east-1\"\n}\n\nprovider \"aws\" {\n  alias  = \"west\"\n  region = \"us-west-2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Lightweight Multi-cloud Abstractions using Terraform HCL\nDESCRIPTION: This HCL snippet demonstrates creating lightweight multi-cloud abstractions by defining a recordset object for DNS configurations and deploying it to Amazon Route53 via a Terraform module. This allows for easy swapping of DNS providers.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/develop/composition.mdx#2025-04-22_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"webserver\" {\n  source = \"./modules/webserver\"\n}\n\nlocals {\n  fixed_recordsets = [\n    {\n      name = \"www\"\n      type = \"CNAME\"\n      ttl  = 3600\n      records = [\n        \"webserver01\",\n        \"webserver02\",\n        \"webserver03\",\n      ]\n    },\n  ]\n  server_recordsets = [\n    for i, addr in module.webserver.public_ip_addrs : {\n      name    = format(\"webserver%02d\", i)\n      type    = \"A\"\n      records = [addr]\n    }\n  ]\n}\n\nmodule \"dns_records\" {\n  source = \"./modules/route53-dns-records\"\n\n  route53_zone_id = var.route53_zone_id\n  recordsets      = concat(local.fixed_recordsets, local.server_recordsets)\n}\n```\n\n----------------------------------------\n\nTITLE: Provider Configuration with Count in Terraform\nDESCRIPTION: Example showing how to properly configure providers when using count with modules in Terraform. Demonstrates configuring multiple AWS provider regions and passing provider configurations to child modules.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/develop/providers.mdx#2025-04-22_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\nprovider \"aws\" {\n  region = \"us-west-1\"\n}\n\nprovider \"aws\" {\n  region = \"us-east-1\"\n  alias  = \"east\"\n}\n\nmodule \"child\" {\n  count = 2\n  providers = {\n    # By default, the child module would use the\n    # default (unaliased) AWS provider configuration\n    # using us-west-1, but this will override it\n    # to use the additional \"east\" configuration\n    # for its resources instead.\n    aws = aws.east\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Multiple Resources Using for_each in Terraform\nDESCRIPTION: Demonstrates how to import multiple resources using the for_each argument in an import block, mapping multiple S3 buckets to expanded resources.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/import/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nlocals {\n  buckets = {\n    \"staging\" = \"bucket1\"\n    \"uat\"     = \"bucket2\"\n    \"prod\"    = \"bucket3\"\n  }\n}\n\nimport {\n  for_each = local.buckets\n  to = aws_s3_bucket.this[each.key]\n  id = each.value\n}\n\nresource \"aws_s3_bucket\" \"this\" {\n  for_each = local.buckets\n}\n```\n\n----------------------------------------\n\nTITLE: Using fileset with for_each for Resource Creation in Terraform HCL\nDESCRIPTION: Demonstrates a common use case for the `fileset` function: dynamically creating multiple resource instances using the `for_each` meta-argument. The `fileset` function provides the set of file names (matching `files/*` within the module directory) to iterate over, and `each.value` can be used within the `example_thing` resource block to refer to the current file name during configuration.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/fileset.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"example_thing\" \"example\" {\n  for_each = fileset(path.module, \"files/*\")\n\n  # other configuration using each.value\n}\n```\n\n----------------------------------------\n\nTITLE: Resource Instance Filtering Example - HCL\nDESCRIPTION: Shows a practical example of filtering AWS instance IDs based on availability zone using a for expression.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/matchkeys.mdx#2025-04-22_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\n[for x in aws_instance.example: x.id if x.availability_zone == \"us-east-1a\"]\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Validation Rules for Terraform Variables in HCL\nDESCRIPTION: Shows how to add a `validation` block to a Terraform input variable declaration. This allows for custom rules beyond basic type constraints. The `condition` expression must evaluate to true for the value to be valid, and `error_message` provides feedback if the condition fails. This example checks if an AMI ID starts with 'ami-' and has a minimum length.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/values/variables.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"image_id\" {\n  type        = string\n  description = \"The id of the machine image (AMI) to use for the server.\"\n\n  validation {\n    condition     = length(var.image_id) > 4 && substr(var.image_id, 0, 4) == \"ami-\"\n    error_message = \"The image_id value must be a valid AMI id, starting with \\\"ami-\\\".\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Variable Block in Terraform Stack Configuration\nDESCRIPTION: This snippet illustrates the complete structure of a variable block in a Terraform Stack configuration file, including fields for description, type, default value, and sensitivity.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/reference/tfstack.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"unique_variable_name\" {\n    description = \"Description of the purpose of this variable\"\n    type        = string\n    default     = \"Default variable value\"\n    sensitive   = false\n    nullable    = false\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Component Block in Terraform Stack Configuration\nDESCRIPTION: This snippet demonstrates the complete structure of a component block in a Terraform Stack configuration file. It includes fields for source, inputs, and providers.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/reference/tfstack.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ncomponent \"unique_name\" {\n    source = <The Terraform module to source>\n    inputs = {\n        input_name          = <variable_value>\n    }\n    providers = {\n        random    = provider.provider_name.provider_alias\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering Resource Replacement with replace_triggered_by in Terraform (HCL)\nDESCRIPTION: This example demonstrates the replace_triggered_by lifecycle meta-argument, which triggers resource replacement when referenced resources or attributes change. Here, the lifecycle block is configured for aws_appautoscaling_target to replace the target resource whenever the specified aws_ecs_service instance changes. Dependencies include the appropriate AWS provider and resource references. Input parameters are the referenced resource addresses, and the outcome is targeted replacement behavior tied to external resource changes.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/meta-arguments/lifecycle.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_appautoscaling_target\" \"ecs_target\" {\n  # ...\n  lifecycle {\n    replace_triggered_by = [\n      # Replace `aws_appautoscaling_target` each time this instance of\n      # the `aws_ecs_service` is replaced.\n      aws_ecs_service.svc.id\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Provisioners with terraform_data in Terraform HCL\nDESCRIPTION: This snippet demonstrates how to use terraform_data to run a bootstrap script across a cluster of AWS EC2 instances. It uses the triggers_replace argument to ensure re-provisioning when any instance changes, and sets up a remote-exec provisioner to run the bootstrap script on the first instance of the cluster.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/resources/provisioners/null_resource.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"cluster\" {\n  count = 3\n\n  # ...\n}\n\nresource \"terraform_data\" \"cluster\" {\n  # Replacement of any instance of the cluster requires re-provisioning\n  triggers_replace = aws_instance.cluster[*].id\n\n  # Bootstrap script can run on any instance of the cluster\n  # So we just choose the first in this case\n  connection {\n    host = aws_instance.cluster[0].public_ip\n  }\n\n  provisioner \"remote-exec\" {\n    # Bootstrap script called with private_ip of each node in the cluster\n    inline = [\n      \"bootstrap-cluster.sh ${join(\" \", aws_instance.cluster[*].private_ip)}\",\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Check Block with HTTP Health Check in HCL\nDESCRIPTION: This snippet demonstrates how to declare a 'check' block that loads the Terraform website and validates that it returns the expected status code 200. It includes a scoped data source and an assertion.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/checks/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ncheck \"health_check\" {\n  data \"http\" \"terraform_io\" {\n    url = \"https://www.terraform.io\"\n  }\n\n  assert {\n    condition = data.http.terraform_io.status_code == 200\n    error_message = \"${data.http.terraform_io.url} returned an unhealthy status code\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Region-Specific Deployments and Identities in HCL\nDESCRIPTION: This HCL snippet demonstrates configuring deployments for different AWS regions ('us-east-1', 'us-west-1') within a `deployments.tfdeploy.hcl` file. It defines separate `deployment` blocks ('us_dev_east', 'us_dev_west') with region-specific inputs and utilizes distinct `identity_token` blocks ('aws_west', 'aws_east') for potentially separate OIDC configurations per region or workload.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/use-cases.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n# deployments.tfdeploy.hcl\n\nidentity_token \"aws_west\" {\n    audience = [\"aws.workload.identity.west\"]\n}\n\nidentity_token \"aws_east\" {\n    audience = [\"aws.workload.identity.east\"]\n}\n\ndeployment \"us_dev_east\" {\n    inputs = {\n        aws_region     = \"us-east-1\"\n        instance_count = 2\n        role_arn       = \"<YOUR_ROLE_ARN>\"\n        identity_token = identity_token.aws_east.jwt\n    }\n}\n\ndeployment \"us_dev_west\" {\n    inputs = {\n        aws_region     = \"us-west-1\"\n        instance_count = 2\n        role_arn       = \"<YOUR_ROLE_ARN>\"\n        identity_token = identity_token.aws_west.jwt\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple AWS Provider Instances in Terraform\nDESCRIPTION: This example shows how to create multiple configurations for the AWS provider, using the 'alias' meta-argument to define an additional configuration for a different region.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/providers/configuration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n# The default provider configuration; resources that begin with `aws_` will use\n# it as the default, and it can be referenced as `aws`.\nprovider \"aws\" {\n  region = \"us-east-1\"\n}\n\n# Additional provider configuration for west coast region; resources can\n# reference this as `aws.west`.\nprovider \"aws\" {\n  alias  = \"west\"\n  region = \"us-west-2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing an Existing AWS Instance into Terraform State (Terraform CLI - Shell)\nDESCRIPTION: This shell command uses 'terraform import' to associate an existing AWS EC2 instance (identified by its unique ID, e.g., 'i-abcd1234') with the declared resource block in Terraform configuration ('aws_instance.example'). Required dependencies: Terraform CLI installed, valid AWS credentials, and an existing resource block for the target resource. The main parameter is the resource address, along with the instance ID. Input is the CLI command, and output is the resource registered in Terraform state file. Limitation: can only import one resource at a time.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/import/usage.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ terraform import aws_instance.example i-abcd1234\n```\n\n----------------------------------------\n\nTITLE: Configuring Deployments Across Different AWS Accounts in HCL\nDESCRIPTION: This HCL snippet in `deployments.tfdeploy.hcl` configures deployments for distinct AWS accounts ('development' and 'production'). It uses separate `identity_token` blocks ('aws_prod', 'aws_dev') and provides different IAM `role_arn` inputs for each deployment, enabling account-specific authentication via OIDC. The 'production' deployment also demonstrates targeting multiple regions within its account.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/use-cases.mdx#2025-04-22_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\n# deployments.tfdeploy.hcl\n\nidentity_token \"aws_prod\" {\n    audience = [\"aws.prod.workload.identity\"]\n}\n\nidentity_token \"aws_dev\" {\n     audience = [\"aws.dev.workload.identity\"]\n}\n\ndeployment \"development\" {\n    inputs = {\n        aws_region     = \"us-east-1\"\n        role_arn       = \"<development AWS account IAM role ARN>\"\n        identity_token = identity_token.aws_dev.jwt\n    }\n}\n\ndeployment \"production\" {\n    inputs = {\n        regions        = [\"us-east-1\", \"us-west-1\"]\n        role_arn       = \"<production AWS account IAM role ARN>\"\n        identity_token = identity_token.aws_prod.jwt\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Blocks to Generate Repeatable Nested Blocks in Terraform\nDESCRIPTION: Example demonstrating how to use the 'dynamic' block to dynamically generate repeatable nested blocks. It iterates over the 'settings' variable to create multiple 'setting' blocks.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/dynamic-blocks.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_elastic_beanstalk_environment\" \"tfenvtest\" {\n  name                = \"tf-test-name\"\n  application         = aws_elastic_beanstalk_application.tftest.name\n  solution_stack_name = \"64bit Amazon Linux 2018.03 v2.11.4 running Go 1.12.6\"\n\n  dynamic \"setting\" {\n    for_each = var.settings\n    content {\n      namespace = setting.value[\"namespace\"]\n      name = setting.value[\"name\"]\n      value = setting.value[\"value\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Module Output in Resource Block - Terraform HCL\nDESCRIPTION: This example shows how to reference an output value from a child module (in this case, `instance_ids` from the `servers` module) as an input to a resource (e.g., `aws_elb`). This pattern allows exposing and consuming module outputs for flexible infrastructure composition. Assumes the child module defines `output \"instance_ids\"`. Resource inputs that depend on module outputs should ensure outputs are correctly defined and exported.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/syntax.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_elb\" \"example\" {\n  # ...\n\n  instances = module.servers.instance_ids\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Values with Arguments in Terraform HCL\nDESCRIPTION: Demonstrates how to assign a value to an argument in Terraform's HCL syntax. The code shows an argument named 'image_id' being set to a string literal value. No special dependencies are required; this syntax is valid anywhere an argument assignment is accepted according to the parent block's schema. The left side is the argument name and the right side is an expression (here, an explicit string value); types for values depend on schema context.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/syntax/configuration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nimage_id = \"abc123\"\n\n```\n\n----------------------------------------\n\nTITLE: Configuring SSH and WinRM Connections for Terraform Provisioners\nDESCRIPTION: This snippet demonstrates how to set up SSH and WinRM connections for file provisioners in Terraform. It shows examples of copying files to remote systems using both connection types, with different authentication methods.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/resources/provisioners/connection.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# Copies the file as the root user using SSH\nprovisioner \"file\" {\n  source      = \"conf/myapp.conf\"\n  destination = \"/etc/myapp.conf\"\n\n  connection {\n    type     = \"ssh\"\n    user     = \"root\"\n    password = var.root_password\n    host     = var.host\n  }\n}\n\n# Copies the file as the Administrator user using WinRM\nprovisioner \"file\" {\n  source      = \"conf/myapp.conf\"\n  destination = \"C:/App/myapp.conf\"\n\n  connection {\n    type     = \"winrm\"\n    user     = \"Administrator\"\n    password = var.admin_password\n    host     = var.host\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic For Expression in HCL\nDESCRIPTION: Demonstrates a simple for expression that transforms a list of strings to uppercase values using the upper() function.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/for.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n[for s in var.list : upper(s)]\n```\n\n----------------------------------------\n\nTITLE: Configuring Deployment with AWS Identity Token\nDESCRIPTION: Example of a complete deployment configuration that defines an AWS identity token and passes it to a deployment along with a role ARN. This setup enables OIDC-based authentication for AWS resources within the deployment.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/deploy/authenticate.mdx#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\n# deployments.tfdeploy.hcl\n\nidentity_token \"aws\" {\n    audience = [\"aws.workload.identity\"]\n}\n\ndeployment \"development\" {\n    inputs = {\n        role_arn   \t= \"<YOUR_ROLE_ARN>\"\n        identity_token = identity_token.aws.jwt\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Backend with Azure DevOps OIDC Authentication\nDESCRIPTION: Example configuration for setting up Terraform backend with Azure Blob Storage using Azure DevOps OpenID Connect authentication. Includes additional service connection ID required for Azure DevOps integration.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/azurerm.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  backend \"azurerm\" {\n    use_oidc                         = true\n    oidc_azure_service_connection_id = \"00000000-0000-0000-0000-000000000000\"\n    use_azuread_auth                 = true\n    tenant_id                        = \"00000000-0000-0000-0000-000000000000\"\n    client_id                        = \"00000000-0000-0000-0000-000000000000\"\n    storage_account_name             = \"abcd1234\"\n    container_name                   = \"tfstate\"\n    key                              = \"prod.terraform.tfstate\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disallowing Null Input Values in Terraform Variables\nDESCRIPTION: Example showing how to use the nullable argument to disallow null values for a variable. When nullable is false, Terraform ensures the variable value will never be null within the module.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/values/variables.mdx#2025-04-22_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"example\" {\n  type     = string\n  nullable = false\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing a Resource Instance in a Nested Module - Terraform CLI Shell Session\nDESCRIPTION: This shell command uses the Terraform CLI's `plan` command with the `-replace` flag to instruct Terraform to schedule a forced replacement of a specific resource instance within a nested module (`module.example.aws_instance.example`). The command must be run from a directory containing an initialized Terraform configuration and state. Inputs are the explicit hierarchical addresses of resources; output is a Terraform plan proposing the replacement. Used for manual repairs or upgrades when necessary.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/syntax.mdx#2025-04-22_snippet_3\n\nLANGUAGE: shellsession\nCODE:\n```\n$ terraform plan -replace=module.example.aws_instance.example\n```\n\n----------------------------------------\n\nTITLE: Executing Terraform Plan with Config Generation\nDESCRIPTION: Command to run terraform plan with the generate-config-out flag to generate configuration for resources defined in import blocks.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/import/generating-configuration.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ terraform plan -generate-config-out=\"generated_resources.tf\"\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Provider in Terraform Stack Component\nDESCRIPTION: This snippet demonstrates how to use a dynamically configured provider in a Stack component, allowing for multi-region deployments of the same module.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/create/declare-providers.mdx#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\n# components.tfstack.hcl\n\ncomponent \"s3\" {\n    for_each = var.regions\n\n    source = \"./s3\"\n\n    inputs = {\n        region = each.value\n    }\n\n    providers = {\n        aws    = provider.aws.configurations[each.value]\n        random = provider.random.this\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Modules from the Terraform Public Registry (HCL)\nDESCRIPTION: This snippet shows how to reference a module hosted on the public Terraform Registry using a registry address as the source and specifying a version. Dependencies include access to the registry and, for private modules, appropriate credentials. Inputs are the registry address and version, output is the module's configuration sourced at the specified version.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/sources.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"consul\" {\n  source = \"hashicorp/consul/aws\"\n  version = \"0.1.0\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: AWS Instance Configuration with Pre/Post Conditions in Terraform\nDESCRIPTION: Example showing AWS EC2 instance configuration with preconditions to validate AMI architecture and postconditions to verify DNS hostname allocation and volume encryption.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/custom-conditions.mdx#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"aws_ami\" \"example\" {\n  owners = [\"amazon\"]\n\n  filter {\n    name   = \"image-id\"\n    values = [\"ami-abc123\"]\n  }\n}\n\nresource \"aws_instance\" \"example\" {\n  instance_type = \"t3.micro\"\n  ami           = data.aws_ami.example.id\n\n  lifecycle {\n    # The AMI ID must refer to an AMI that contains an operating system\n    # for the `x86_64` architecture.\n    precondition {\n      condition     = data.aws_ami.example.architecture == \"x86_64\"\n      error_message = \"The selected AMI must be for the x86_64 architecture.\"\n    }\n\n    # The EC2 instance must be allocated a public DNS hostname.\n    postcondition {\n      condition     = self.public_dns != \"\"\n      error_message = \"EC2 instance must be in a VPC that has public DNS hostnames enabled.\"\n    }\n  }\n}\n\ndata \"aws_ebs_volume\" \"example\" {\n  filter {\n    name = \"volume-id\"\n    values = [aws_instance.example.root_block_device[0].volume_id]\n  }\n\n  lifecycle {\n    # The EC2 instance will have an encrypted root volume.\n    postcondition {\n      condition     = self.encrypted\n      error_message = \"The server's root volume is not encrypted.\"\n    }\n  }\n}\n\noutput \"api_base_url\" {\n  value = \"https://${aws_instance.example.private_dns}:8433/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Module Accepting Name Variable to Create S3 Bucket and IAM User in Terraform HCL\nDESCRIPTION: This sample Terraform submodule demonstrates defining a 'name' variable and using it in the aws_s3_bucket and aws_iam_user resources. It enables each module instance (created via for_each in the parent) to have dedicated resources named per its supplied argument. Dependencies include the aws provider, a parent module passing 'name', and any required resource parameters for extended configuration. Outputs are separate buckets and IAM users per module instance; other parameters can be added as needed.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/meta-arguments/for_each.mdx#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\n# publish_bucket/bucket-and-cloudfront.tf\nvariable \"name\" {} # this is the input parameter of the module\n\nresource \"aws_s3_bucket\" \"example\" {\n  # Because var.name includes each.key in the calling\n  # module block, its value will be different for\n  # each instance of this module.\n  bucket = var.name\n\n  # ...\n}\n\nresource \"aws_iam_user\" \"deploy_user\" {\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Provider Source and Version in Terraform HCL\nDESCRIPTION: This example shows how to specify detailed provider requirements like version constraints and registry source address within the `required_providers` block. It ensures that only compatible provider plugin versions are used, and downloads them from the specified address. Key parameters include the `version` string supporting constraint syntax and the mandatory `source` registry address. The configuration is static and evaluated at initialization.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/terraform.mdx#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    <PROVIDER> {\n      version = \"<version-constraint>\"\n      source = \"<address>\"      \n    }\n  }\n  # . . .\n}\n```\n\n----------------------------------------\n\nTITLE: Organizing Terraform Modules and Environments\nDESCRIPTION: This snippet shows a directory structure for organizing Terraform modules and separate environments (dev, prod, staging). Each environment has its own backend configuration, main file, and variables.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/style.mdx#2025-04-22_snippet_18\n\nLANGUAGE: plaintext\nCODE:\n```\n├── modules\n│   ├── compute\n│   │   └── main.tf\n│   ├── database\n│   │   └── main.tf\n│   └── network\n│       └── main.tf\n├── dev\n│   ├── backend.tf\n│   ├── main.tf\n│   └── variables.tf\n├── prod\n│   ├── backend.tf\n│   ├── main.tf\n│   └── variables.tf\n└── staging\n    ├── backend.tf\n    ├── main.tf\n    └── variables.tf\n```\n\n----------------------------------------\n\nTITLE: Declaring Minimum Provider Version Constraint in Terraform Configuration (HCL)\nDESCRIPTION: This snippet defines a Terraform configuration that sets a minimum required version for a provider using the '>= 1.0' constraint in the 'required_providers' block. It demonstrates best practice for modules to declare compatibility with provider versions, ensuring that only acceptable minimum versions are used. 'mycloud' is mapped to the 'hashicorp/aws' provider source and requires at least version 1.0, giving flexibility for future upgrades while maintaining module stability.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/providers/requirements.mdx#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    mycloud = {\n      source  = \"hashicorp/aws\"\n      version = \">= 1.0\"\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining and Passing Provider Configurations to a Child Module - Terraform HCL\nDESCRIPTION: This snippet shows how to define two AWS provider configurations (default and an aliased configuration for a secondary region) in a Terraform root module, and how to pass the alternate provider instance to a child module using the 'providers' meta-argument. Dependencies: Terraform, AWS provider. Key parameters: 'region' for provider configuration and the 'providers' map in the module block. The child module will use the specified provider configuration (aws.usw2) for its AWS resources instead of inheriting the parent default. Input: None directly (just Terraform config). Output: Module resources use the specified AWS provider instance.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/meta-arguments/module-providers.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# The default \"aws\" configuration is used for AWS resources in the root\n# module where no explicit provider instance is selected.\nprovider \"aws\" {\n  region = \"us-west-1\"\n}\n\n# An alternate configuration is also defined for a different\n# region, using the alias \"usw2\".\nprovider \"aws\" {\n  alias  = \"usw2\"\n  region = \"us-west-2\"\n}\n\n# An example child module is instantiated with the alternate configuration,\n# so any AWS resources it defines will use the us-west-2 region.\nmodule \"example\" {\n  source    = \"./example\"\n  providers = {\n    aws = aws.usw2\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using setproduct to Compute All Combinations - Terraform HCL\nDESCRIPTION: This snippet demonstrates the basic usage of the setproduct function in HCL, where two lists are passed as arguments. It outputs all possible pairs (Cartesian product) of environments and applications. Prerequisites: At least two non-empty collections (lists/sets) of consistent element type. Inputs: Two lists of strings. Output: A list of lists, each representing a unique combination. Returns an empty list if any input is empty, and coerces element types if necessary.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/setproduct.mdx#2025-04-22_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nsetproduct(sets...)\n```\n\nLANGUAGE: HCL\nCODE:\n```\n> setproduct([\"development\", \"staging\", \"production\"], [\"app1\", \"app2\"])\n[\n  [\n    \"development\",\n    \"app1\",\n  ],\n  [\n    \"development\",\n    \"app2\",\n  ],\n  [\n    \"staging\",\n    \"app1\",\n  ],\n  [\n    \"staging\",\n    \"app2\",\n  ],\n  [\n    \"production\",\n    \"app1\",\n  ],\n  [\n    \"production\",\n    \"app2\",\n  ],\n]\n```\n\n----------------------------------------\n\nTITLE: Using fileexists Function in Terraform\nDESCRIPTION: The `fileexists` function in HCL checks if a specified file exists at a given path during configuration parsing. It is essential for determining file presence before Terraform actions. The function accepts a file path as a parameter and returns a boolean indicating the file's existence, functioning solely with regular files.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/fileexists.mdx#2025-04-22_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nfileexists(path)\n```\n\nLANGUAGE: HCL\nCODE:\n```\n> fileexists(\"${path.module}/hello.txt\")\ntrue\n```\n\nLANGUAGE: HCL\nCODE:\n```\nfileexists(\"custom-section.sh\") ? file(\"custom-section.sh\") : local.default_content\n```\n\n----------------------------------------\n\nTITLE: CLI Input Configuration for Remote Backend\nDESCRIPTION: Example showing remote backend configuration using CLI input with a separate backend configuration file.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/remote.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n# main.tf\nterraform {\n  required_version = \"~> 0.12.0\"\n\n  backend \"remote\" {}\n}\n```\n\nLANGUAGE: hcl\nCODE:\n```\n# config.remote.tfbackend\nworkspaces { name = \"workspace\" }\nhostname     = \"app.terraform.io\"\norganization = \"company\"\n```\n\nLANGUAGE: sh\nCODE:\n```\nterraform init -backend-config=config.remote.tfbackend\n```\n\n----------------------------------------\n\nTITLE: Configuring Backend State Storage in Terraform HCL\nDESCRIPTION: This example demonstrates how to specify a state backend using the `backend` block inside the `terraform` block, which controls where Terraform's state files are stored (e.g., S3, local, remote). The backend type and configuration are parameters and must be constants. The configuration is mutually exclusive with the `cloud` block and is required for remote collaboration or particular state requirements.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/terraform.mdx#2025-04-22_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  backend \"<TYPE>\" {\n    <backend-configuration>\n  }\n  # . . .\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Resource Creation with for_each in Terraform HCL\nDESCRIPTION: Example of using the for_each meta-argument to create multiple resources from a single resource block based on a list of strings. Also demonstrates how to reference these resources in outputs.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/style.mdx#2025-04-22_snippet_11\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"web_instances\" {\n  type        = list(string)\n  description = \"A list of instances for the web application\"\n  default = [\n    \"ui\",\n    \"api\",\n    \"db\",\n    \"metrics\"\n  ]\n}\nresource \"aws_instance\" \"web\" {\n  for_each = toset(var.web_instances)\n  ami           = data.aws_ami.webapp.id\n  instance_type = \"t3.micro\"\n  tags = {\n    Name = \"web_${each.key}\"\n  }\n}\noutput \"web_private_ips\" {\n  description = \"Private IPs of the web instances\"\n  value = {\n    for k, v in aws_instance.web : k => v.private_ip\n  }\n}\noutput \"web_ui_public_ip\" {\n  description = \"Public IP of the web UI instance\"\n  value       = aws_instance.web[\"ui\"].public_ip\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Required Terraform Version in HCL\nDESCRIPTION: This example illustrates enforcing a minimum or specific Terraform CLI version using the `required_version` attribute within the `terraform` block. This ensures that the configuration is applied only with compatible Terraform versions, preventing execution failures due to incompatible changes. There are no parameters except the required version string; provider plugin versions are managed separately. Input is a string literal version or constraint, and output is version restriction enforcement at plan time.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/terraform.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_version = \"<Terraform version>\"\n  # . . .\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Sensitive Variable in Terraform HCL\nDESCRIPTION: Example of declaring a variable as sensitive to prevent Terraform from showing its value in plan or apply output. Sensitive values are still recorded in state but hidden from command output.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/values/variables.mdx#2025-04-22_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"user_information\" {\n  type = object({\n    name    = string\n    address = string\n  })\n  sensitive = true\n}\n\nresource \"some_resource\" \"a\" {\n  name    = var.user_information.name\n  address = var.user_information.address\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming a Module Call in Terraform HCL\nDESCRIPTION: This example demonstrates how to rename a module call in Terraform by updating the module name in the 'module' block and using a 'moved' block to track the change. Terraform will recognize the updated module path and maintain continuity for all resources defined within the module.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/develop/refactoring.mdx#2025-04-22_snippet_4\n\nLANGUAGE: HCL\nCODE:\n```\nmodule \"b\" {\n  source = \"../modules/example\"\n\n  # (module arguments)\n}\n\nmoved {\n  from = module.a\n  to   = module.b\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming Outputs from Upstream Terraform Stack\nDESCRIPTION: This snippet shows how to use an `upstream_input` block in an application Stack's deployment configuration to consume the VPC ID output from a networking Stack. It creates a dependency on the upstream Stack.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/deploy/pass-data.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n# Application Stack deployment configuration\n\nupstream_input \"network_stack\" {\n  type   = \"stack\"\n  source = \"app.terraform.io/hashicorp/Default Project/networking-stack\"\n}\n\ndeployment \"application\" {\n  inputs = {\n    vpc_id = upstream_input.network_stack.vpc_id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Required Aliased Providers in Terraform Child Module using HCL\nDESCRIPTION: This snippet shows the `required_providers` block within the child module (`./tunnel` from the previous example). It declares its dependency on the `hashicorp/aws` provider and specifies the `configuration_aliases` (`aws.src`, `aws.dst`) it expects the calling module to provide configurations for via the `providers` argument in the `module` block.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/develop/providers.mdx#2025-04-22_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \">= 2.7.0\"\n      configuration_aliases = [ aws.src, aws.dst ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Batch Upgrading Terraform Modules on Unix-like Systems\nDESCRIPTION: This bash command demonstrates how to batch upgrade multiple Terraform modules in a repository using the `find` command on Unix-like systems. It recursively finds all `.tf` files, extracts their directories, and runs `terraform 0.13upgrade` on each unique directory.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/0.13upgrade.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ find . -name '*.tf' | xargs -n1 dirname | uniq | xargs -n1 terraform 0.13upgrade -yes\n```\n\n----------------------------------------\n\nTITLE: Defining Import Block in Terraform Configuration\nDESCRIPTION: Example of an import block that specifies a resource to be imported into Terraform state using its ID.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/import/generating-configuration.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nimport {\n  to = aws_iot_thing.bar\n  id = \"foo\"\n}\n```\n\n----------------------------------------\n\nTITLE: Determining Run Environment in Terraform HCL\nDESCRIPTION: HCL code snippet demonstrating how to determine if a Terraform run is local or remote using HCP_TERRAFORM_RUN_ID environment variable.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/remote.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\noutput \"current_workspace_name\" {\n  value = terraform.workspace\n}\n\nvariable \"HCP_TERRAFORM_RUN_ID\" {\n  type    = string\n  default = \"\"\n}\n\noutput \"remote_execution_determine\" {\n  value = \"Remote run environment? %{if var.HCP_TERRAFORM_RUN_ID != \"\"}Yes%{else}No this is local%{endif}!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Outputs in Terraform Stack Deployment Configuration\nDESCRIPTION: This snippet demonstrates how to use a `publish_output` block in a networking Stack's deployment configuration to export a VPC ID. It allows other Stacks in the same project to reference this output.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/deploy/pass-data.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# Networking Stack deployment configuration\n\npublish_output \"vpc_id\" {\n  description = \"The networking Stack's VPC's ID.\"\n  value       = deployment.network.vpc_id\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Multi-Stage Terraform Test for S3 Object Creation\nDESCRIPTION: Defines a complete test file that sets up an S3 bucket, executes the main configuration to create objects, and verifies the results using custom modules.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/tests/index.mdx#2025-04-22_snippet_15\n\nLANGUAGE: hcl\nCODE:\n```\nvariables {\n  bucket = \"my_test_bucket\"\n  files = {\n    \"file-one.txt\": \"data/files/file_one.txt\"\n    \"file-two.txt\": \"data/files/file_two.txt\"\n  }\n}\n\nprovider \"aws\" {\n  region = \"us-east-1\"\n}\n\nrun \"setup\" {\n  # Create the S3 bucket we will use later.\n\n  module {\n    source = \"./testing/setup\"\n  }\n}\n\nrun \"execute\" {\n  # This is empty, we just run the configuration under test using all the default settings.\n}\n\nrun \"verify\" {\n  # Load and count the objects created in the \"execute\" run block.\n\n  module {\n    source = \"./testing/loader\"\n  }\n\n  assert {\n    condition = length(data.aws_s3_objects.objects.keys) == 2\n    error_message = \"created the wrong number of s3 objects\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cloud-Init with Terraform\nDESCRIPTION: This snippet demonstrates how to use the cloudinit_config data source to create a cloud-init configuration for provisioning files on a remote machine. It uses YAML encoding to specify file contents and paths.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/resources/provisioners/syntax.mdx#2025-04-22_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\ndata \"cloudinit_config\" \"my_cloud_config\" {\n  gzip          = false\n  base64_encode = false\n\n  part {\n    content_type = \"text/cloud-config\"\n    filename     = \"cloud.conf\"\n    content = yamlencode(\n      {\n        \"write_files\" : [\n          {\n            \"path\" : \"/etc/foo.conf\",\n            \"content\" : \"foo contents\",\n          },\n          {\n            \"path\" : \"/etc/bar.conf\",\n            \"content\" : file(\"bar.conf\"),\n          },\n          {\n            \"path\" : \"/etc/baz.conf\",\n            \"content\" : templatefile(\"baz.tpl.conf\", { SOME_VAR = \"qux\" }),\n          },\n        ],\n      }\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Local Modules with Paths in Terraform (HCL)\nDESCRIPTION: This snippet demonstrates how to include a child module using a relative local file path as the source. The path must begin with \"./\" or \"../\", indicating that the module will be sourced from a directory within the same repository. No additional dependencies are required beyond a local Terraform installation and the presence of the specified directory. The input is a relative path; output is the inclusion of the module's resources during plan/apply.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/sources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"consul\" {\n  source = \"./consul\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Enabling for_each for a Resource in Terraform HCL\nDESCRIPTION: This snippet illustrates how to transition a resource from being a singular instance to having multiple instances using 'for_each'. It includes defining a local map in Terraform, using it in a 'resource' block and recording the change with a 'moved' block to map the original resource to a specific instance key.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/develop/refactoring.mdx#2025-04-22_snippet_2\n\nLANGUAGE: HCL\nCODE:\n```\nlocals {\n  instances = tomap({\n    big = {\n      instance_type = \"m3.large\"\n    }\n    small = {\n      instance_type = \"t2.medium\"\n    }\n  })\n}\n\nresource \"aws_instance\" \"a\" {\n  for_each = local.instances\n\n  instance_type = each.value.instance_type\n  # (other resource-type-specific configuration)\n}\n\nmoved {\n  from = aws_instance.a\n  to   = aws_instance.a[\"small\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Environment Deployments in HCL\nDESCRIPTION: This HCL snippet defines two separate deployments, 'production' and 'development', within a `deployments.tfdeploy.hcl` file. Each deployment block specifies unique input values (like `aws_region`, `instance_count`, `role_arn`, `identity_token`) tailored for its respective environment, demonstrating how Stacks manage distinct configurations.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/use-cases.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# deployments.tfdeploy.hcl\n\ndeployment \"production\" {\n    inputs = {\n        aws_region     = \"us-west-1\"\n        instance_count = 2\n        role_arn       = \"<YOUR_ROLE_ARN>\"\n        identity_token = identity_token.aws.jwt\n    }\n}\n\ndeployment \"development\" {\n    inputs = {\n        aws_region     = \"us-east-1\"\n        instance_count = 2\n        role_arn       = \"<YOUR_ROLE_ARN>\"\n        identity_token = identity_token.aws.jwt\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Resources using Terraform CLI - Bash\nDESCRIPTION: This code snippet demonstrates the use of the 'terraform import' command in a shell environment. The command allows users to add existing infrastructure resources to Terraform's state files, making them manageable by Terraform. It is required that a corresponding resource block be manually defined in the Terraform configuration. The command does not generate configuration, only state associations; a resource address and an identifier must be provided. Ensure all prerequisites, such as proper authentication configuration and the correct resource block in main.tf, are met before running this command.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/import/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterraform import [options] ADDRESS ID\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS S3 Backend with Assume Role in Terraform\nDESCRIPTION: This snippet demonstrates how to configure the AWS S3 backend for Terraform state storage, including the use of an assume role configuration. It specifies the bucket, key, region, and role ARN to assume.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/s3.mdx#2025-04-22_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  backend \"s3\" {\n    bucket = \"example-bucket\"\n    key    = \"path/to/state\"\n    region = \"us-east-1\"\n    assume_role = {\n      role_arn = \"arn:aws:iam::PRODUCTION-ACCOUNT-ID:role/Terraform\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AWS Provider and Role with Terraform\nDESCRIPTION: This snippet configures the AWS provider in Terraform by using variables for region, role, and web identity token. It assumes a role with web identity using the provided AWS token and role ARN. Dependencies include the AWS Provider and variables for 'aws_token', 'aws_region', and 'aws_role'. Inputs are AWS credentials and outputs are authenticated AWS provider settings for further Terraform operations.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/reference/tfdeploy.mdx#2025-04-22_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"aws_token\" {\n  type      = string\n  ephemeral = true\n}\n\nvariable \"aws_region\" {\n  type = string\n}\n\nvariable \"aws_role\" {\n  type = string\n}\n\nprovider \"aws\" \"this\" {\n  config {\n    region = var.aws_region\n    assume_role_with_web_identity {\n      role_arn           = var.aws_role\n      web_identity_token = var.aws_token\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using terraform.applying to Select AWS Role ARN in Terraform HCL\nDESCRIPTION: This snippet demonstrates how to use the terraform.applying symbol to conditionally select different AWS role ARNs based on whether Terraform is in an apply operation. It uses different permissions (read-only for planning, full write access for applying) to follow the principle of least privilege.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/terraform-applying.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nlocals {\n  aws_read_role_arn  = \"arn:aws:iam::XXXXX:role/terraform-read\"\n  aws_write_role_arn = \"arn:aws:iam::XXXXX:role/terraform-full\"\n\n  # We only need read-only credentials to plan, so if Terraform is applying \n  # we want to use our AWS role that allows us to write.\n  role_arn = terraform.applying ? local.aws_write_role_arn : local.aws_read_role_arn\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Stack Components per Region in HCL\nDESCRIPTION: This HCL code, found in a `components.tfstack.hcl` file, defines a Stack component named 's3'. It employs the `for_each` meta-argument to iterate over `var.regions`, creating an instance of the component (sourced from the local './s3' module) for each region. It dynamically passes the current region (`each.value`) as input and assigns the corresponding region-specific AWS provider configuration (`provider.aws.configurations[each.value]`).\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/use-cases.mdx#2025-04-22_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\n# components.tfstack.hcl\n\ncomponent \"s3\" {\n    for_each = var.regions\n\n    source = \"./s3\"\n\n    inputs = {\n        region = each.value\n    }\n\n    providers = {\n        aws    = provider.aws.configurations[each.value]\n        random = provider.random.this\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing into a Module in Terraform\nDESCRIPTION: Example showing how to import a resource into a module using the import block.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/import/index.mdx#2025-04-22_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nimport {\n  to = module.instances.aws_instance.example\n  id = \"i-abcd1234\"\n}\n```\n\n----------------------------------------\n\nTITLE: Passing a Data aws_ami Object to a Terraform Module (HCL)\nDESCRIPTION: This snippet illustrates supplying an existing AWS AMI found via a data block to a module in Terraform. The data \"aws_ami\" block filters by owner and tags, retrieving an existing object, which is then passed to the module as its 'ami' input. This approach is useful when shared infrastructure is pre-existing, reducing duplication and complexity. Module inputs must match the data object's attribute schema.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/develop/composition.mdx#2025-04-22_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\n# Or, in situations where the AMI already exists:\n\ndata \"aws_ami\" \"example\" {\n  owner = \"9999933333\"\n\n  tags = {\n    application = \"example-app\"\n    environment = \"dev\"\n  }\n}\n\nmodule \"example\" {\n  source = \"./modules/example\"\n\n  ami = data.aws_ami.example\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting and Storing Ephemeral Password in AWS Secrets Manager\nDESCRIPTION: This comprehensive example demonstrates generating a random password, storing it in AWS Secrets Manager, retrieving it, and using it as a write-only argument for an AWS RDS instance.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/resources/ephemeral/write-only.mdx#2025-04-22_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nephemeral \"random_password\" \"db_password\" {\n  length           = 16\n  override_special = \"!#$%&*()-_=+[]{}<>:?\"\n}\n\nresource \"aws_secretsmanager_secret\" \"db_password\" {\n  name = \"db_password\"\n}\n\nresource \"aws_secretsmanager_secret_version\" \"db_password\" {\n  secret_id                = aws_secretsmanager_secret.db_password.id\n  secret_string_wo         = ephemeral.random_password.db_password.result\n  secret_string_wo_version = 1\n}\n\nephemeral \"aws_secretsmanager_secret_version\" \"db_password\" {\n  secret_id = aws_secretsmanager_secret_version.db_password.secret_id\n}\n\nresource \"aws_db_instance\" \"example\" {\n  instance_class      = \"db.t3.micro\"\n  allocated_storage   = \"5\"\n  engine              = \"postgres\"\n  username            = \"example\"\n  skip_final_snapshot = true\n  password_wo         = ephemeral.aws_secretsmanager_secret_version.db_password.secret_string\n  password_wo_version = aws_secretsmanager_secret_version.db_password.secret_string_wo_version\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Latest Available AMI with Specific Tags in Terraform HCL\nDESCRIPTION: This snippet demonstrates how to use filters and the 'most_recent' flag to find the latest available AMI with specific tags. It showcases more advanced querying capabilities of data sources.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/data-sources/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n# Find the latest available AMI that is tagged with Component = web\ndata \"aws_ami\" \"web\" {\n  filter {\n    name   = \"state\"\n    values = [\"available\"]\n  }\n\n  filter {\n    name   = \"tag:Component\"\n    values = [\"web\"]\n  }\n\n  most_recent = true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Operation Timeouts for Resources in Terraform HCL\nDESCRIPTION: Declares an AWS RDS DB instance resource with explicit create and delete timeouts. The 'timeouts' block allows setting string durations controlling how long these operations can run before Terraform reports failure. Supported operations and block availability depend on provider resource type; here, 'create' is 60 minutes and 'delete' is 2 hours. Useful for long-running infrastructure operations that may exceed default limits; incorrect values may lead to premature failures.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/resources/syntax.mdx#2025-04-22_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_db_instance\" \"example\" {\n  # ...\n\n  timeouts {\n    create = \"60m\"\n    delete = \"2h\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Provisioner Failure with the on_failure Attribute in Terraform (HCL)\nDESCRIPTION: This example illustrates specifying the on_failure argument in a local-exec provisioner for an aws_instance resource in Terraform HCL. By setting on_failure to continue, failures in the local-exec script will not stop Terraform apply but will allow creation to proceed. This can help prevent interruptions during automation at the cost of potential state drift. Requires no extra dependencies except a working Terraform setup.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/resources/provisioners/syntax.mdx#2025-04-22_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"web\" {\n  # ...\n\n  provisioner \"local-exec\" {\n    command    = \"echo The server's IP address is ${self.private_ip}\"\n    on_failure = continue\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Resource Configuration with Static Nested Block in Terraform\nDESCRIPTION: Example of a basic resource configuration with a static nested block. This shows the limitation that nested blocks like 'setting' are typically literal blocks where expressions cannot be used directly.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/dynamic-blocks.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_elastic_beanstalk_environment\" \"tfenvtest\" {\n  name = \"tf-test-name\" # can use expressions here\n\n  setting {\n    # but the \"setting\" block is always a literal block\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Local Values Referencing Resources and Other Locals in Terraform HCL\nDESCRIPTION: These snippets show how local values can be defined using expressions that reference other Terraform constructs. The `instance_ids` local concatenates instance IDs from two different `aws_instance` resources using a splat expression. The `common_tags` local creates a map using previously defined locals (`local.service_name` and `local.owner`), useful for applying consistent tags across multiple resources.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/values/locals.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nlocals {\n  # Ids for multiple sets of EC2 instances, merged together\n  instance_ids = concat(aws_instance.blue.*.id, aws_instance.green.*.id)\n}\n\nlocals {\n  # Common tags to be assigned to all resources\n  common_tags = {\n    Service = local.service_name\n    Owner   = local.owner\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Block with Splat Expression\nDESCRIPTION: Example of using splat expressions with dynamic blocks to handle optional input variables and null values.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/splat.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"website_setting\" {\n  type = object({\n    index_document = string\n    error_document = string\n  })\n  default = null\n}\n\nresource \"aws_s3_bucket\" \"example\" {\n  # ...\n\n  dynamic \"website\" {\n    for_each = var.website_setting[*]\n    content {\n      index_document = website.value.index_document\n      error_document = website.value.error_document\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Azure Key Vault with Ephemeral Password for MySQL Server\nDESCRIPTION: Terraform configuration that generates a random password, stores it in Azure Key Vault as a secret, and uses it to create a MySQL Flexible Server. The configuration uses write-only arguments to prevent the password from being stored in Terraform's state file.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/resources/ephemeral/write-only.mdx#2025-04-22_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nprovider \"azurerm\" {\n  features {}\n}\n\nephemeral \"random_password\" \"db_password\" {\n  length           = 16\n  override_special = \"!#$%&*()-_=+[]{}<>:?\"\n}\n\nlocals {\n db_password_version = 1\n}\n\nresource \"azurerm_resource_group\" \"example\" {\n  name     = \"example-resource-group\"\n  location = \"westeurope\"\n}\n\ndata \"azurerm_client_config\" \"current\" {}\n\nresource \"azurerm_key_vault\" \"example\" {\n  name                       = \"example-key-vault\"\n  location                   = azurerm_resource_group.example.location\n  resource_group_name        = azurerm_resource_group.example.name\n  tenant_id                  = data.azurerm_client_config.current.tenant_id\n  sku_name                   = \"standard\"\n  soft_delete_retention_days = 7\n\n  access_policy {\n    tenant_id = data.azurerm_client_config.current.tenant_id\n    object_id = data.azurerm_client_config.current.object_id\n\n    key_permissions = [\n      \"Get\",\n    ]\n\n    secret_permissions = [\n      \"Get\",\n      \"Delete\",\n      \"List\",\n      \"Purge\",\n      \"Recover\",\n      \"Set\",\n    ]\n  }\n}\n\nresource \"azurerm_key_vault_secret\" \"example\" {\n  name             = \"example-secret\"\n  value_wo         = ephemeral.random_password.db_password.result\n  value_wo_version = local.db_password_version\n  key_vault_id     = azurerm_key_vault.example.id\n}\n\nephemeral \"azurerm_key_vault_secret\" \"db_password\" {\n  name         = azurerm_key_vault_secret.example.name\n  key_vault_id = azurerm_key_vault.example.id\n}\n\nresource \"azurerm_mysql_flexible_server\" \"example\" {\n  name                 = \"example-mysql-flexible-server\"\n  resource_group_name  = azurerm_resource_group.example.name\n  location             = azurerm_resource_group.example.location\n  sku_name             = \"B_Standard_B1s\"\n\n  administrator_login               = \"newuser\"\n  administrator_password_wo         = ephemeral.azurerm_key_vault_secret.db_password.value\n  administrator_password_wo_version = local.db_password_version\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Terraform Configuration Example\nDESCRIPTION: Example of the generated configuration file that Terraform creates based on the imported resource, containing a minimal resource block.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/import/generating-configuration.mdx#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_iot_thing\" \"bar\" {\n  name = \"foo\"\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Resource Replacement on Terraform\nDESCRIPTION: This snippet demonstrates how to manually replace a resource using the `-replace` flag in the `terraform apply` command. This technique is useful when Terraform cannot automatically detect an issue with a resource that requires replacement. The command will force the replacement of the specified resource by adding the `-replace` option with the resource address.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/state/taint.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shellsession\nCODE:\n```\n$ terraform apply -replace=\\\"aws_instance.example\\\"\n# ...\n\n  # aws_instance.example will be replaced, as requested\n-/+ resource \\\"aws_instance\\\" \\\"example\\\" {\n      # ...\n    }\n```\n\n----------------------------------------\n\nTITLE: Enabling S3 Native State Locking in Terraform Backend Configuration (HCL)\nDESCRIPTION: This Terraform configuration snippet demonstrates how to enable the experimental S3 native state locking feature within the S3 backend block. Setting `use_lockfile` to `true` activates this feature, which places a `.tflock` file alongside the state file in the S3 bucket. This requires updating IAM policies and S3 bucket policies to grant permissions for the new lock file. This feature can be used alongside or independently of DynamoDB locking.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/upgrade-guides/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n```terraform\nterraform {\n  backend \"s3\" {\n    # additional configuration omitted for brevity\n    use_lockfile = true\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Dynamic List Generation with For Expression\nDESCRIPTION: Demonstrates using argument syntax with a dynamic for expression to generate a list of objects based on a variable.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/attr-as-blocks.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nexample = [\n  for name in var.names: {\n    foo = name\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Examples of Using the Terraform fileset Function in HCL\nDESCRIPTION: Provides multiple examples demonstrating the usage of the `fileset` function in Terraform HCL. It shows how to match specific file extensions (`*.txt`), use brace expansion (`{hello,world}.txt`), match all files in a directory (`*`), and recursively match files in subdirectories (`**`). The examples assume a specific file structure relative to `path.module` and illustrate the expected output sets.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/fileset.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> fileset(path.module, \"files/*.txt\")\n[\n  \"files/hello.txt\",\n  \"files/world.txt\",\n]\n\n> fileset(path.module, \"files/{hello,world}.txt\")\n[\n  \"files/hello.txt\",\n  \"files/world.txt\",\n]\n\n> fileset(\"${path.module}/files\", \"*\")\n[\n  \"hello.txt\",\n  \"world.txt\",\n]\n\n> fileset(\"${path.module}/files\", \"**\")\n[\n  \"hello.txt\",\n  \"world.txt\",\n  \"subdirectory/anotherfile.txt\",\n]\n```\n\n----------------------------------------\n\nTITLE: Adding Descriptions to Output Values in Terraform HCL\nDESCRIPTION: This snippet illustrates how to declare an output value with a description for documentation clarity. The description attribute is optional but recommended for module usability, clarifying the purpose and the kind of value expected. Prerequisite: referenced resource must be present. Inputs: none; Outputs: AWS EC2 instance's private IP. No functional change, improves module self-documentation.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/values/outputs.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\noutput \"instance_ip_addr\" {\n  value       = aws_instance.server.private_ip\n  description = \"The private IP address of the main server instance.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Required Providers and an S3 Resource - Terraform HCL\nDESCRIPTION: This snippet illustrates a core Terraform configuration in HCL that specifies the required AWS provider, accepts a 'bucket_name' variable, and creates an 'aws_s3_bucket' resource using that variable. It demonstrates the base infrastructure setup needed for subsequent testing and mocking, establishing dependencies on the 'hashicorp/aws' provider. Inputs include the 'bucket_name' variable, and the output is the creation/declaration of an S3 bucket resource. No real cloud credentials are needed for local testing if used with mocking features.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/tests/mocking.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# main.tf\n\nterraform {\n  required_providers {\n    aws = {\n      source = \"hashicorp/aws\"\n    }\n  }\n}\n\nvariable \"bucket_name\" {\n  type = string\n}\n\nresource \"aws_s3_bucket\" \"my_bucket\" {\n  bucket = var.bucket_name\n}\n\n```\n\n----------------------------------------\n\nTITLE: Logical Operators in Terraform\nDESCRIPTION: Examples of logical operators in Terraform including OR, AND, and NOT. These operators expect boolean values as inputs and return boolean results for combining logical conditions.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/operators.mdx#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\na || b\n```\n\nLANGUAGE: hcl\nCODE:\n```\na && b\n```\n\nLANGUAGE: hcl\nCODE:\n```\n!a\n```\n\n----------------------------------------\n\nTITLE: Exposing Nested Module Outputs at Root Level in Terraform (HCL)\nDESCRIPTION: Shows how to make outputs from a nested module available as root-level outputs, ensuring data is accessible via terraform_remote_state across configurations. The module block imports another Terraform module, and the root output block maps a nested module output directly as a root output. This is essential when remote state consumers need access to nested data. Requires the nested module to declare the source and have defined outputs; output is a passthrough at the root level with the same value as module.app.example. Limitations are that only explicitly exposed outputs are available.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/state/remote-state-data.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"app\" {\n  source = \"...\"\n}\n\noutput \"app_value\" {\n  # This syntax is for Terraform 0.12 or later.\n  value = module.app.example\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Backend for Terraform State Storage\nDESCRIPTION: This snippet demonstrates how to configure the local backend in Terraform to store state files on the local filesystem. The optional 'path' parameter specifies a relative path to the terraform.tfstate file.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/local.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  backend \"local\" {\n    path = \"relative/path/to/terraform.tfstate\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Trust Policy for HCP Terraform Stack Authentication\nDESCRIPTION: This Terraform configuration sets up the necessary AWS IAM resources for OIDC-based authentication of HCP Terraform Stacks. It creates an OpenID Connect provider, IAM role, and policy attachments to allow Stacks to assume the role and access AWS resources.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/deploy/authenticate.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# main.tf\n\nvariable \"aws_region\" {\n  type        = string\n  description = \"The AWS region to create the role in.\"\n}\n\nvariable \"tf_organization\" {\n  type        = string\n  description = \"The name of the organization that this workspace and Stack live in.\"\n}\n\nvariable \"tf_project\" {\n  type        = string\n  description = \"The name of the project that this workspace and Stack live in.\"\n}\n\nvariable \"tf_stack\" {\n  type        = string\n  description = \"The name of the Stack you will you use this token in.\"\n}\n\nprovider \"aws\" {\n  region = var.aws_region\n}\n\nresource \"aws_iam_openid_connect_provider\" \"stacks_openid_provider\" {\n  url            = \"https://app.terraform.io\"\n  client_id_list = [\"aws.workload.identity\"]\n\n  # This is the thumbprint of https://app.terraform.io as of 2024/08/07\n  # Refer to \"Adjust access of trust\" to learn how to update this thumbprint\n  thumbprint_list = [\"9e99a48a9960b14926bb7f3b02e22da2b0ab7280\"]\n}\n\nresource \"aws_iam_role\" \"stacks_role\" {\n  name               = \"stacks-${var.tf_organization}-${var.tf_project}-${var.tf_stack}\"\n  assume_role_policy = data.aws_iam_policy_document.stacks_role_policy.json\n}\n\ndata \"aws_iam_policy_document\" \"stacks_role_policy\" {\n  statement {\n    effect = \"Allow\"\n    principals {\n      type        = \"Federated\"\n      identifiers = [aws_iam_openid_connect_provider.stacks_openid_provider.arn]\n    }\n    actions = [\"sts:AssumeRoleWithWebIdentity\"]\n    condition {\n      test     = \"StringEquals\"\n      variable = \"app.terraform.io:aud\"\n      values   = [\"aws.workload.identity\"]\n    }\n    condition {\n      test     = \"StringLike\"\n      variable = \"app.terraform.io:sub\"\n      # This value dictates which HCP Terraform organizations, projects,  \n      # and stacks can assume the new role you are creating.\n      # \n      # You can widen access to an entire organization or project by\n      # tweaking the value below. You can also restrict access to specific\n      # deployments or operations. Refer to Configure trust for more information.\n      values = [\"organization:${var.tf_organization}:project:${var.tf_project}:stack:${var.tf_stack}:*\"]\n    }\n  }\n}\n\n# Now, you give the new role access to things you want to manage in your Stack.\n#\n# The policies below are too broad for a production use case, but you set them \n# broadly for now to ensure this Stacks can do anything during development and \n# testing. In practice, only give your Stack access to what it needs to manage.\n\nresource \"aws_iam_role_policy_attachment\" \"iam\" {\n  role       = aws_iam_role.stacks_role.name\n  policy_arn = \"arn:aws:iam::aws:policy/IAMFullAccess\"\n}\n\nresource \"aws_iam_role_policy_attachment\" \"sudo\" {\n  role       = aws_iam_role.stacks_role.name\n  policy_arn = \"arn:aws:iam::aws:policy/PowerUserAccess\"\n}\n\n# Your workspace returns this output role, which you use to configure your \n# deployments. \noutput \"role_arn\" {\n  value = aws_iam_role.stacks_role.arn\n}\n```\n\n----------------------------------------\n\nTITLE: Using Comments for Clarity in Terraform Resources - HCL\nDESCRIPTION: This snippet highlights the idiomatic use of the '#' symbol for both single and multi-line comments in Terraform HCL. The example places comments before a resource block to clarify its role, promoting maintainable code by explaining intent or complex logic. No dependencies are required, and this pattern is portable across all Terraform projects. The code also illustrates the definition of a google_compute_vpn_tunnel resource and can be expanded for real configurations.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/style.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n# Each tunnel is responsible for encrypting and decrypting traffic exiting\n# and leaving its associated gateway.\nresource \"google_compute_vpn_tunnel\" \"tunnel1\" {\n  ## ...\n```\n\n----------------------------------------\n\nTITLE: Updating Terraform State After Renaming a Resource (Shell)\nDESCRIPTION: Executes the `terraform state mv` command to update the Terraform state, mapping the existing remote object previously tracked as `packet_device.worker` to the new resource address `packet_device.helper`. This command should be run after renaming the corresponding resource block in the configuration.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/state/mv.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform state mv packet_device.worker packet_device.helper\n```\n\n----------------------------------------\n\nTITLE: Executing Terraform Destroy Command in Shell\nDESCRIPTION: This command is an alias for 'terraform apply -destroy', used to deprovision all objects managed by a Terraform configuration. It accepts most options that 'terraform apply' does, but doesn't accept a plan file argument and forces the selection of the 'destroy' planning mode.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/destroy.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nterraform destroy [options]\n```\n\n----------------------------------------\n\nTITLE: Configuring OCI Backend in Terraform\nDESCRIPTION: This snippet demonstrates how to configure the OCI backend in Terraform. It includes both required and optional parameters for setting up state storage in OCI Object Storage.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/oci.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  backend \"oci\" {\n    # Required\n    bucket            = \"mybucket\"\n    namespace         = \"my-namespace\"\n     # Optional\n    tenancy_ocid      = \"ocid1.tenancy.oc1..xxxxxxx\"\n    user_ocid         = \"ocid1.user.oc1..xxxxxxxx\"\n    fingerprint       = \"xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx\"\n    private_key_path  = \"~/.oci/oci_api_key.pem\"\n    region            = \"us-ashburn-1\"\n    key               = \"path/to/my/key\"\n    workspace_key_prefix = \"envs/\"\n    kms_key_id        = \"ocid1.key.oc1.iad.xxxxxxxxxxxxxx\"\n    auth              = \"APIKey\"\n    config_file_profile = \"DEFAULT\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Remote State Data Source Configuration\nDESCRIPTION: Configuration example for accessing remote state using the terraform_remote_state data source.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/remote.mdx#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"terraform_remote_state\" \"foo\" {\n  backend = \"remote\"\n\n  config = {\n    organization = \"company\"\n\n    workspaces = {\n      name = \"workspace\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing a Module Without Destroying Resources - Terraform HCL\nDESCRIPTION: This snippet demonstrates how to remove a Terraform module from management in v1.7 and above, using a `removed` block. The block specifies the `from` address (module to remove) and a mandatory `lifecycle` block with `destroy = false`, which detaches the objects from Terraform state without destroying the underlying infrastructure. This is intended for scenarios where you want to stop managing a module's resources without deleting them. The `removed` block is not supported in Terraform versions earlier than 1.7.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/syntax.mdx#2025-04-22_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nremoved {\n  from = module.example\n\n  lifecycle {\n    destroy = false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Parallel Execution in Terraform Tests\nDESCRIPTION: An example of how to configure parallel execution of run blocks in Terraform tests. This shows how to set the parallel attribute at both the test and run block levels and demonstrates the dependencies between run blocks.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/tests/index.mdx#2025-04-22_snippet_20\n\nLANGUAGE: hcl\nCODE:\n```\n# parallel.tftest.hcl\n\ntest {\n  // This would set the parallel flag to true in all runs\n  parallel = true\n}\n\nvariables {\n  foo = \"foo\"\n}\n\n\nrun \"primary_db\" {\n  // This is the first run block, and it is available to be executed right away.\n  state_key = \"primary\"\n  module {\n    source = \"./setup\"\n  }\n\n  variables {\n    input = \"foo\"\n  }\n\n  assert {\n    condition = output.value == var.foo\n    error_message = \"bad\"\n  }\n}\n\nrun \"secondary_db\" {\n  // This run block can be executed in parallel with the `primary_db` run block, because it does not reference its\n  // output and has a different state key.\n  state_key = \"secondary\"\n  module {\n    source = \"./setup\"\n  }\n\n  variables {\n    input = \"foo\"\n  }\n\n  assert {\n    condition = output.value == var.foo\n    error_message = \"bad\"\n  }\n}\n\nrun \"site_one\" {\n  // This run block can only be executed after the `primary_db` run block is completed, because it references the output of the `primary_db` run block.\n  state_key = \"unique_2\"\n  variables {\n    input = run.primary_db.value\n  }\n\n  assert {\n    condition = output.value == var.foo\n    error_message = \"double bad\"\n  }\n}\n\nrun \"site_two\" {\n  // This run block can only be executed after the `primary_db` run block is completed, because it references the output of the `primary_db` run block.\n  // After that, it can be executed in parallel with the `site_one` run block.\n  state_key = \"unique_3\"\n  variables {\n    input = run.primary_db.value\n  }\n\n  assert {\n    condition = output.value == var.foo\n    error_message = \"double bad\"\n  }\n}\n\nrun \"using_external_db\" {\n  // This run block does not reference the output of any other run block, and it has a different state key from its\n  // preceding runs, so it can be executed in parallel with runs `primary_db` and `secondary_db`.\n  state_key = \"unique_4\"\n  variables {\n    input = \"externally_created_db\"\n  }\n\n  assert {\n    condition = output.value == var.foo\n    error_message = \"double bad\"\n  }\n}\n\nrun \"site_four\" {\n  // This run block has set `parallel = false`.\n  // Therefore, it will wait for all preceding runs to complete before it can be executed.\n  state_key = \"unique_5\"\n\n  // This overrides the global parallel flag.\n  parallel = false\n  variables {\n    input = run.secondary_db.value\n  }\n\n  assert {\n    condition = output.value == var.foo\n    error_message = \"double bad\"\n  }\n}\n\nrun \"site_five\" {\n  // This run block will wait for the run `site_four` to complete, because run `site_four` has the `parallel` attribute set to `false`.\n  state_key = \"unique_6\"\n  variables {\n    input = run.secondary_db.value\n  }\n\n  assert {\n    condition = output.value == var.foo\n    error_message = \"double bad\"\n  }\n}\n\nrun \"site_six\" {\n  // This run block can only be executed after the run `site_five` is completed, because it references the output of the run `site_five`.\n  state_key = \"unique_7\"\n  variables {\n    input = run.site_five.value\n  }\n\n  assert {\n    condition = output.value == var.foo\n    error_message = \"double bad\"\n  }\n}\n\nrun \"same_state\" {\n  // This run block uses an existing state key \"unique_7\", so it will wait for the run `site_six` to complete.\n  state_key = \"unique_7\"\n  variables {\n    input = \"another_external_db\"\n  }\n\n  assert {\n    condition = output.value == var.foo\n    error_message = \"double bad\"\n  }\n}\n\nrun \"site_eight\" {\n  // This run block is entirely unrelated to the other run blocks, however, because `site_four`, \n  // which is one of its preceding runs has the `parallel` attribute set to `false`,\n  // it cannot run until site_four is completed. It can be executed in parallel with `site_five` and `site_six`.\n  state_key = \"unique_7\"\n  variables {\n    input = \"yet_another_external_db\"\n  }\n\n  assert {\n    condition = output.value == var.foo\n    error_message = \"double bad\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Write-Only Argument in AWS RDS Instance\nDESCRIPTION: This snippet demonstrates how to declare a write-only argument (password_wo) for an AWS RDS instance. The password_wo argument accepts a value to use as the database password, which is not stored in Terraform's state.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/resources/ephemeral/write-only.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_db_instance\" \"test\" {\n  instance_class      = \"db.t3.micro\"\n  allocated_storage   = \"5\"\n  engine              = \"postgres\"\n  username            = \"example\"\n  skip_final_snapshot = true\n  password_wo         = <ephemeral or non-ephemeral value>\n  password_wo_version = 1\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Infrastructure with Terraform CLI - Shell\nDESCRIPTION: This command applies the planned infrastructure changes as specified by the present configuration, making actual modifications to resources using provider APIs. It prompts for user confirmation before proceeding, unless overridden using flags. Dependencies include prior initialization with Terraform CLI, and the command works within the context of the current workspace.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/run/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform apply\n```\n\n----------------------------------------\n\nTITLE: Using For_Each in Component Block for Multi-Region Deployment\nDESCRIPTION: This example shows how to use the for_each meta-argument in a component block to provision modules across multiple AWS regions for a given environment.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/reference/tfstack.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ncomponent \"s3\" {\n    for_each = var.regions\n\n    source = \"./s3\"\n\n    inputs = {\n        region = each.value\n    }\n\n    providers = {\n        aws    = provider.aws.configurations[each.value]\n        random = provider.random.this\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Variable Definition Files in Terraform\nDESCRIPTION: Commands showing how to specify a variable definitions file (.tfvars) on the command line with -var-file for different operating systems.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/values/variables.mdx#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nterraform apply -var-file=\"testing.tfvars\"\n```\n\nLANGUAGE: shell\nCODE:\n```\nterraform apply -var-file='testing.tfvars'\n```\n\nLANGUAGE: shell\nCODE:\n```\nterraform apply -var-file=\"testing.tfvars\"\n```\n\n----------------------------------------\n\nTITLE: Importing a Resource with count Meta-Argument in Terraform\nDESCRIPTION: Shows how to import a resource that includes the count meta-argument in Terraform.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/import/index.mdx#2025-04-22_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\nimport {\n  to = aws_instance.example[0]\n  id = \"i-abcd1234\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using SCP-like Syntax for Git SSH Sources in Terraform\nDESCRIPTION: This snippet shows how to use the alternative SCP-like syntax for Git repositories over SSH, where the ssh:// prefix is omitted and only the git:: prefix is included.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/sources.mdx#2025-04-22_snippet_9\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"storage\" {\n  source = \"git::username@example.com:storage.git\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Ephemeral Resource for Write-Only Password\nDESCRIPTION: This snippet demonstrates using an ephemeral resource to generate a random password and pass it to the password_wo write-only argument of an AWS RDS instance.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/resources/ephemeral/write-only.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nephemeral \"random_password\" \"db_password\" {\n  length           = 16\n  override_special = \"!#$%&*()-_=+[]{}<>:?\"\n}\n\nresource \"aws_db_instance\" \"example\" {\n  instance_class      = \"db.t3.micro\"\n  allocated_storage   = \"5\"\n  engine              = \"postgres\"\n  username            = \"example\"\n  skip_final_snapshot = true\n  password_wo         = ephemeral.random_password.db_password.result\n  password_wo_version = 1\n}\n```\n\n----------------------------------------\n\nTITLE: Using an Archive File from an HTTP URL as a Module Source in Terraform\nDESCRIPTION: This snippet demonstrates how to directly reference a zip archive via HTTP URL as a module source, which Terraform will automatically download and extract.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/sources.mdx#2025-04-22_snippet_12\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"vpc\" {\n  source = \"https://example.com/vpc-module.zip\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fine-Grained S3 IAM Policy for Terraform State - JSON\nDESCRIPTION: This snippet shows a sample AWS IAM policy written in JSON that grants specific permissions over S3 objects used for Terraform state and lock files. It allows listing a specific prefix, getting and putting a tfstate, and managing the lock file. This configuration enhances state file security by limiting access to only required IAM entities. The prerequisite is an AWS account and familiarity with IAM policy documents. Input values include the bucket and key names; output is the applied policy in AWS. Constraints: this policy is limited to single state and lock files as shown.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/s3.mdx#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": \"s3:ListBucket\",\n      \"Resource\": \"arn:aws:s3:::example-bucket\",\n      \"Condition\": {\n        \"StringEquals\": {\n          \"s3:prefix\": \"path/to/state\"\n        }\n      }\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\"s3:GetObject\", \"s3:PutObject\"],\n      \"Resource\": [\n        \"arn:aws:s3:::example-bucket/myapp/production/tfstate\",\n      ]\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\"s3:GetObject\", \"s3:PutObject\", \"s3:DeleteObject\"],\n      \"Resource\": [\n        \"arn:aws:s3:::example-bucket/myapp/production/tfstate.tflock\"\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Production Deployment in HCP Terraform\nDESCRIPTION: This example shows how to create a deployment named 'production' with specific inputs for AWS region and instance count.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/reference/tfdeploy.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ndeployment \"production\" {\n    inputs = {\n        aws_region     = \"us-west-1\"\n        instance_count = 2\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the sort Function in Terraform to Sort a List of Strings\nDESCRIPTION: This example demonstrates how to use the sort function to sort a list of strings lexicographically. The function returns a new list with the strings arranged in ascending order based on Unicode codepoints.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/sort.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nsort([\"e\", \"d\", \"a\", \"x\"])\n```\n\n----------------------------------------\n\nTITLE: Handling Variable Input Types with try Function in Terraform\nDESCRIPTION: This snippet shows how to use the try function to handle a variable that might be provided in different forms. It normalizes the input to a consistent list type regardless of whether the input was a string or already a list.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/try.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"example\" {\n  type = any\n}\n\nlocals {\n  example = try(\n    [tostring(var.example)],\n    tolist(var.example),\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Conditionally Scaling Resources Based on Terraform Workspace in HCL\nDESCRIPTION: This HCL snippet demonstrates conditionally setting the `count` meta-argument for an `aws_instance` resource based on the current Terraform workspace. It uses the `terraform.workspace` interpolation within a ternary operator: if the current workspace is named 'default', it sets the count to 5; otherwise, it sets the count to 1. This pattern is useful for creating different environment sizes (e.g., larger production vs. smaller staging/dev).\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/state/workspaces.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"example\" {\n  count = terraform.workspace == \"default\" ? 5 : 1\n\n  # ... other arguments\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL with Ephemeral Credentials - HCL\nDESCRIPTION: This example configures the PostgreSQL provider using credentials from an ephemeral resource, ensuring that sensitive information like database credentials are not stored in state or plan files. Dependencies include the postgresql provider and an AWS Secrets Manager resource for secret retrieval. Inputs include AWS instance details and secret manager identifiers, with outputs managed through local variables.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/resources/ephemeral/reference.mdx#2025-04-22_snippet_1\n\nLANGUAGE: HCL\nCODE:\n```\nephemeral \"aws_secretsmanager_secret_version\" \"db_master\" {\n  secret_id = aws_secretsmanager_secret_version.db_password.secret_id\n}\n\nlocals {\n  credentials = jsondecode(ephemeral.aws_secretsmanager_secret_version.db_master.secret_string)\n}\n\nprovider \"postgresql\" {\n  host     = aws_db_instance.example.address\n  port     = aws_db_instance.example.port\n  username = local.credentials[\"username\"]\n  password = local.credentials[\"password\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Mock Data Files for Reusable Mocked Resources - Terraform HCL\nDESCRIPTION: This snippet is a standalone mock data file ('.tfmock.hcl') containing 'mock_resource' and 'mock_data' blocks. It provides a reusable definition for the 'arn' attribute of all AWS S3 buckets, allowing tests to import these mocks via the 'source' attribute in 'mock_provider' blocks. This encourages DRY (Don't Repeat Yourself) practices and centralizes test data for multiple test files.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/tests/mocking.mdx#2025-04-22_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\n# ./testing/aws/data.tfmock.hcl\n\nmock_resource \"aws_s3_bucket\" {\n  defaults = {\n    arn = \"arn:aws:s3:::name\"\n  }\n}\n\nmock_data \"aws_s3_bucket\" {\n  defaults = {\n    arn = \"arn:aws:s3:::name\"\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Conditional Resource Creation with count in Terraform HCL\nDESCRIPTION: Demonstrates using the count meta-argument with a conditional expression to optionally create resources. This example creates an instance only when enable_metrics is true.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/style.mdx#2025-04-22_snippet_13\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"enable_metrics\" {\n  description = \"True if the metrics server should be deployed\"\n  type        = bool\n  default     = true\n}\n\nresource \"aws_instance\" \"web\" {\n  count = var.enable_metrics ? 1 : 0\n\n  ami           = data.aws_ami.webapp.id\n  instance_type = \"t3.micro\"\n  ##...\n}\n```\n\n----------------------------------------\n\nTITLE: External Backend Configuration File for S3\nDESCRIPTION: Example of an external configuration file containing S3 backend settings. This file can be referenced during terraform init to provide the remaining backend configuration values.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/index.mdx#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\n# state.config\nbucket = \"your-bucket\" \nkey    = \"your-state.tfstate\"\nregion = \"eu-central-1\"\nprofile= \"Your_Profile\"\n```\n\n----------------------------------------\n\nTITLE: Structuring Terraform Project for Multiple Environments\nDESCRIPTION: This snippet demonstrates a recommended directory structure for organizing Terraform configurations across multiple environments. It separates resources into compute, database, and networking components.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/style.mdx#2025-04-22_snippet_17\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── compute\n│   ├── main.tf\n│   ├── outputs.tf\n│   └── variables.tf\n├── database\n│   ├── main.tf\n│   ├── outputs.tf\n│   └── variables.tf\n└── networking\n    ├── main.tf\n    ├── outputs.tf\n    └── variables.tf\n```\n\n----------------------------------------\n\nTITLE: Using Provider Aliases in Resources and Modules\nDESCRIPTION: Shows how to reference aliased providers in resources and modules. The example specifies the west provider alias for both a direct resource and within a module.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/style.mdx#2025-04-22_snippet_10\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"example\" {\n  provider = aws.west\n  # ...\n}\n\nmodule \"aws_vpc\" {\n  source = \"./aws_vpc\"\n  providers = {\n    aws = aws.west\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Template Generation using yamlencode in Terraform\nDESCRIPTION: Shows how to use a template with yamlencode to generate valid YAML output from Terraform expressions.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/templatefile.mdx#2025-04-22_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\n${yamlencode({\n  \"backends\": [for addr in ip_addrs : \"${addr}:${port}\"],\n})}\n```\n\n----------------------------------------\n\nTITLE: Passing Multiple Aliased Providers to Terraform Module using HCL\nDESCRIPTION: This root module configuration defines two aliased AWS providers (`usw1` and `usw2` for different regions). It then calls the `./tunnel` child module, using the `providers` map to explicitly pass both aliased configurations. The `aws.usw1` configuration in the root is mapped to `aws.src` within the child, and `aws.usw2` is mapped to `aws.dst`.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/develop/providers.mdx#2025-04-22_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nprovider \"aws\" {\n  alias  = \"usw1\"\n  region = \"us-west-1\"\n}\n\nprovider \"aws\" {\n  alias  = \"usw2\"\n  region = \"us-west-2\"\n}\n\nmodule \"tunnel\" {\n  source    = \"./tunnel\"\n  providers = {\n    aws.src = aws.usw1\n    aws.dst = aws.usw2\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Mixing Real and Mocked Providers with Aliases - Terraform HCL\nDESCRIPTION: This snippet shows how to use both real and mocked AWS providers in a Terraform test file, differentiating them with an 'alias'. It instructs Terraform which provider to use in each test run by setting the 'providers' argument within 'run' blocks. This enables testing scenarios using actual provider APIs or mocks as needed, requiring that one provider be assigned an alias (e.g., 'fake'). Dependencies include the 'aws' provider and the mocking framework.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/tests/mocking.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n# mocked_providers.tftest.hcl\n\nprovider \"aws\" {}\n\nmock_provider \"aws\" {\n  alias = \"fake\"\n}\n\nrun \"use_real_provider\" {\n  providers = {\n    aws = aws\n  }\n}\n\nrun \"use_mocked_provider\" {\n  providers = {\n    aws = aws.fake\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Forcing Resource Replacement in terraform plan (CLI Option)\nDESCRIPTION: Explains the `-replace=ADDRESS` option, available from Terraform v0.15.2. It instructs Terraform to plan to replace the resource instance at the given address, regardless of whether an update or no action would normally be planned. Useful for replacing degraded resources. Cannot be used with `-destroy`.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/plan.mdx#2025-04-22_snippet_5\n\nLANGUAGE: cli\nCODE:\n```\n-replace=ADDRESS\n```\n\n----------------------------------------\n\nTITLE: Using encode_expr with tfe_variable in Terraform\nDESCRIPTION: This example demonstrates how to use the encode_expr function to create multiple tfe_variable resources. The function converts different data types into Terraform expression syntax, which is then used with tfe_variable resources with hcl=true to create HCP Terraform workspace variables.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/terraform-encode_expr.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nlocals {\n  workspace_vars = {\n    example1 = \"Hello\"\n    example2 = [\"A\", \"B\"]\n  }\n}\n\nresource \"tfe_variable\" \"test\" {\n  for_each = local.workspace_vars\n\n  category     = \"terraform\"\n  workspace_id = tfe_workspace.example.id\n\n  key   = each.key\n  value = provider::terraform::encode_expr(each.value)\n  hcl   = true\n}\n```\n\n----------------------------------------\n\nTITLE: Using Remote State in Terraform Configuration\nDESCRIPTION: Configuration for accessing another Terraform configuration's outputs via the terraform_remote_state data source using an S3 backend.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/s3.mdx#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"terraform_remote_state\" \"network\" {\n  backend = \"s3\"\n  config = {\n    bucket = \"terraform-state-prod\"\n    key    = \"network/terraform.tfstate\"\n    region = \"us-east-1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Shared Mock Data via Source Attribute - Terraform HCL\nDESCRIPTION: This brief snippet demonstrates referencing an external directory containing mock data definitions through the 'source' attribute of the 'mock_provider' block. This mechanism allows multiple test files to share the same resource/data overrides, promoting consistency and maintainability of test mocks.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/tests/mocking.mdx#2025-04-22_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\nmock_provider \"aws\" {\n  source = \"./testing/aws\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Basic Version Constraint Syntax in Terraform HCL\nDESCRIPTION: Demonstrates the basic syntax for specifying version constraints in Terraform configuration. Shows how to define a version constraint using operators and version numbers.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/version-constraints.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nversion = \"<operator> <version>\"\n```\n\n----------------------------------------\n\nTITLE: Importing Resources Into Multiple Module Instances in Terraform\nDESCRIPTION: Shows how to import resources across multiple module instances using for_each, with complex mapping between groups and buckets.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/import/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nlocals {\n  buckets = [\n    { \n      group = \"one\"\n      key   = \"bucket1\"\n      id    = \"one_1\"\n    },\n    {\n      group = \"one\"\n      key   = \"bucket2\"\n      id    = \"one_2\"\n    },\n    {\n      group = \"two\"\n      key   = \"bucket1\"\n      id    = \"two_1\"\n    },\n    {\n      group = \"two\"\n      key   = \"bucket2\"\n      id    = \"two_2\"\n    },\n  ]\n}\n\nimport {\n  for_each = local.buckets\n  id = each.value.id\n  to = module.group[each.value.group].aws_s3_bucket.this[each.value.key]\n}\n```\n\n----------------------------------------\n\nTITLE: Conditionally Setting Optional Attributes in Terraform\nDESCRIPTION: Shows how to conditionally set optional attributes in a module call based on a boolean variable.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/type-constraints.mdx#2025-04-22_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"legacy_filenames\" {\n  type     = bool\n  default  = false\n  nullable = false\n}\n\nmodule \"buckets\" {\n  source = \"./modules/buckets\"\n\n  buckets = [\n    {\n      name = \"maybe_legacy\"\n      website = {\n        error_document = var.legacy_filenames ? \"ERROR.HTM\" : null\n        index_document = var.legacy_filenames ? \"INDEX.HTM\" : null\n      }\n    },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Conditional Expression Syntax in Terraform HCL\nDESCRIPTION: The fundamental syntax for conditional expressions in Terraform, using the ternary operator format of condition ? true_val : false_val.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/conditionals.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ncondition ? true_val : false_val\n```\n\n----------------------------------------\n\nTITLE: Creating Ephemeral Local Values by Referencing Ephemeral Variables in Terraform HCL\nDESCRIPTION: This HCL configuration defines input variables, including one marked as `ephemeral`. It then declares local values within a `locals` block. The `local.session_token` becomes implicitly ephemeral because its expression depends on the ephemeral `var.service_token`. Ephemeral values are not stored in the Terraform state and are available from Terraform v1.10 onwards.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/values/locals.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"service_name\" {\n  type    = string\n  default = \"forum\"\n}\n\nvariable \"environment\" {\n  type    = string\n  default = \"dev\"\n}\n\nvariable \"service_token\" {\n  type      = string\n  ephemeral = true\n}\n\nlocals {\n  service_tag   = \"${var.service_name}-${var.environment}\"\n  session_token = \"${var.service_name}:${var.service_token}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Remote State Outputs with terraform_remote_state (local Backend, HCL)\nDESCRIPTION: Illustrates using the terraform_remote_state data source with the local backend for reading outputs from a local Terraform state file. The config block specifies the path to the state file. Demonstrates referencing outputs in aws_instance resources for both major Terraform versions, highlighting syntax differences. Requires a local state file at the specified path, and the aws provider. Main input is the state file path; outputs are network attributes such as subnet_id. Only root module outputs are available; nested outputs require explicit passthrough.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/state/remote-state-data.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"terraform_remote_state\" \"vpc\" {\n  backend = \"local\"\n\n  config = {\n    path = \"...\"\n  }\n}\n\n# Terraform >= 0.12\nresource \"aws_instance\" \"foo\" {\n  # ...\n  subnet_id = data.terraform_remote_state.vpc.outputs.subnet_id\n}\n\n# Terraform <= 0.11\nresource \"aws_instance\" \"foo\" {\n  # ...\n  subnet_id = \"${data.terraform_remote_state.vpc.subnet_id}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AWS Provider in Terraform Stack Configuration\nDESCRIPTION: This snippet demonstrates how to define an AWS provider in a Stack configuration file. It includes setting required providers, configuring the provider with an alias, and specifying authentication details.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/create/declare-providers.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# providers.tfstack.hcl\n\nrequired_providers {\n    aws = {\n        source  = \"hashicorp/aws\"\n        version = \"~> 5.7.0\"\n    }\n}\n\n# Setting \"this\" as the alias name\nprovider \"aws\" \"this\" {\n    config {\n        region = var.region\n\n        assume_role_with_web_identity {\n            role_arn           = var.role_arn\n            web_identity_token = var.identity_token\n        }\n\n        default_tags {\n            tags = var.default_tags\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Variable Precedence Test Configuration in HCL\nDESCRIPTION: Example showing how to define variables at root level and override them in run blocks for testing S3 bucket naming\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/tests/index.mdx#2025-04-22_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\n# variable_precedence.tftest.hcl\n\nvariables {\n  bucket_prefix = \"test\"\n}\n\nrun \"uses_root_level_value\" {\n\n  command = plan\n\n  assert {\n    condition     = aws_s3_bucket.bucket.bucket == \"test-bucket\"\n    error_message = \"S3 bucket name did not match expected\"\n  }\n\n}\n\nrun \"overrides_root_level_value\" {\n\n  command = plan\n\n  variables {\n    bucket_prefix = \"other\"\n  }\n\n  assert {\n    condition     = aws_s3_bucket.bucket.bucket == \"other-bucket\"\n    error_message = \"S3 bucket name did not match expected\"\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing a Local Value in a Resource Configuration in Terraform HCL\nDESCRIPTION: This snippet illustrates how to reference a previously defined local value within a resource block using the `local.<NAME>` syntax. The `tags` argument of the `aws_instance` resource named `example` is assigned the value of `local.common_tags`. This promotes consistency and simplifies updates by centralizing the tag definition.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/values/locals.mdx#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"example\" {\n  # ...\n\n  tags = local.common_tags\n}\n```\n\n----------------------------------------\n\nTITLE: Example Directory Structure for Terraform Module with Tests\nDESCRIPTION: Illustrates a standard project layout for a Terraform module including main configuration files (`.tf`), a dedicated `tests` directory containing test files (`.tftest.hcl`), and an optional `testing/setup` directory for reusable test setup modules.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/test.mdx#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nproject/\n|-- main.tf\n|-- outputs.tf\n|-- terraform.tf\n|-- variables.tf\n|-- tests/\n|   |-- validations.tftest.hcl\n|   |-- outputs.tftest.hcl\n|-- testing/\n    |-- setup/\n        |-- main.tf\n        |-- outputs.tf\n        |-- terraform.tf\n        |-- variables.tf\n```\n\n----------------------------------------\n\nTITLE: Defining Root Provider for Implicit Inheritance in Terraform using HCL\nDESCRIPTION: This code shows a root Terraform module defining a default AWS provider configuration (for the `us-west-1` region). It then instantiates a child module located at `./child`. Due to implicit inheritance, this child module will automatically use the default AWS provider defined in the root module for its AWS resources.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/develop/providers.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nprovider \"aws\" {\n  region = \"us-west-1\"\n}\n\nmodule \"child\" {\n  source = \"./child\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Terraform Input Variables via TF_VAR_name in Shell\nDESCRIPTION: Demonstrates setting Terraform input variables using environment variables prefixed with `TF_VAR_`. Terraform checks these environment variables last when resolving variable values. This example shows how to set a string (`region`, `ami`), a list (`alist`), and a map (`amap`) variable.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/config/environment-variables.mdx#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nexport TF_VAR_region=us-west-1\nexport TF_VAR_ami=ami-049d-8641\nexport TF_VAR_alist='[1,2,3]'\nexport TF_VAR_amap='{ foo = \"bar\", baz = \"qux\" }'\n```\n\n----------------------------------------\n\nTITLE: Health Check Implementation with Check Block in Terraform\nDESCRIPTION: Example demonstrating how to implement a health check using Terraform's check block functionality to verify website availability.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/custom-conditions.mdx#2025-04-22_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\ncheck \"health_check\" {\n  data \"http\" \"terraform_io\" {\n    url = \"https://www.terraform.io\"\n  }\n\n  assert {\n    condition = data.http.terraform_io.status_code == 200\n    error_message = \"${data.http.terraform_io.url} returned an unhealthy status code\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Condition Check for Data Source in Terraform HCL\nDESCRIPTION: This example shows how to use a postcondition block within a data source to ensure the retrieved AMI has the correct tags. It demonstrates the use of custom condition checks in data sources.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/data-sources/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"aws_ami\" \"example\" {\n  id = var.aws_ami_id\n\n  lifecycle {\n    # The AMI ID must refer to an existing AMI that has the tag \"nomad-server\".\n    postcondition {\n      condition     = self.tags[\"Component\"] == \"nomad-server\"\n      error_message = \"tags[\\\"Component\\\"] must be \\\"nomad-server\\\".\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Tainted Terraform Resources\nDESCRIPTION: This snippet describes the automatic replacement of resources in a tainted state. Terraform marks resources as tainted when it detects they may not be fully functional, automatically replacing them during the next `plan` or `apply` step. This process ensures that any degraded components are recreated to meet the desired state.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/state/taint.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shellsession\nCODE:\n```\n  # aws_instance.example is tainted, so must be replaced\n-/+ resource \\\"aws_instance\\\" \\\"example\\\" {\n      # ...\n    }\n```\n\n----------------------------------------\n\nTITLE: User Role Filtering Example\nDESCRIPTION: Complex example showing how to split users into admin and regular users using filtered for expressions.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/for.mdx#2025-04-22_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"users\" {\n  type = map(object({\n    is_admin = bool\n  }))\n}\n\nlocals {\n  admin_users = {\n    for name, user in var.users : name => user\n    if user.is_admin\n  }\n  regular_users = {\n    for name, user in var.users : name => user\n    if !user.is_admin\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating AWS Instances Based on List Length using count in Terraform HCL\nDESCRIPTION: This HCL snippet illustrates a common but potentially fragile pattern (prior to `for_each`) where `count` is set to the length of a variable list (`var.subnet_ids`). It then uses `count.index` to access elements from the list (`var.subnet_ids[count.index]`) to assign a unique `subnet_id` to each `aws_instance`. This approach is sensitive to changes in the list order or removal of elements.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/meta-arguments/count.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"subnet_ids\" {\n  type = list(string)\n}\n\nresource \"aws_instance\" \"server\" {\n  # Create one instance for each subnet\n  count = length(var.subnet_ids)\n\n  ami           = \"ami-a1b2c3d4\"\n  instance_type = \"t2.micro\"\n  subnet_id     = var.subnet_ids[count.index]\n\n  tags = {\n    Name = \"Server ${count.index}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: For Expression with List of Objects - HCL\nDESCRIPTION: Demonstrates filtering using a for expression with a list of objects, showing how to access object attributes.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/matchkeys.mdx#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\n[for x in [{id=\"i-123\",zone=\"us-west\"},{id=\"i-abc\",zone=\"us-east\"}]: x.id if x.zone == \"us-east\"]\n```\n\n----------------------------------------\n\nTITLE: Creating Replan Rule for Production Deployment Errors in Terraform\nDESCRIPTION: This snippet shows how to define a 'replan' orchestration rule that triggers a replan if the production deployment of a Stack errors out and if HCP Terraform hasn't already attempted to replan twice. It uses multiple check blocks to ensure specific conditions are met.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/deploy/conditions.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\norchestrate \"replan\" \"replan_prod_for_errors\" {\n    check {\n        condition = context.plan.deployment == deployment.production\n        reason = \"Only automatically replan production deployments.\"\n    }\n\n    check {\n        condition = context.plan.applyable == false\n        reason = \"Only automatically replan plans that were not applyable.\"\n    }\n\n    check {\n        condition = context.plan.replans < 2\n        reason = \"Only automatically replan failed plans once.\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Plan JSON Structure Format\nDESCRIPTION: The comprehensive JSON structure representing a Terraform plan. It includes the prior state, configuration, planned values, resource changes, resource drift, and output changes. This structure enables automation tools to analyze and potentially act on Terraform plans.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/json-format.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"format_version\": \"1.0\",\n\n  // \"prior_state\" is a representation of the state that the configuration is\n  // being applied to, using the state representation described above.\n  \"prior_state\":  <state-representation>,\n\n  // \"applyable\" indicates that it would make sense for a wrapping automation\n  // to try to apply this plan, possibly after asking a human operator for\n  // approval.\n  //\n  // Other attributes may give additional context about why the plan is not\n  // applyable, but wrapping automations should use this flag as their\n  // primary condition to accommodate potential changes to the exact definition\n  // of \"applyable\" in future Terraform versions.\n  \"applyable\": true,\n\n  // \"complete\" indicates that Terraform expects that after applying this\n  // plan the actual state will match the desired state.\n  //\n  // An incomplete plan is expected to require at least one additional\n  // plan/apply round to achieve convergence, and so wrapping automations\n  // should ideally either automatically start a new plan/apply round after\n  // this plan is applied, or prompt the operator that they should do so.\n  //\n  // Other attributes may give additional context about why the plan is not\n  // complete, but wrapping automations should use this flag as their\n  // primary condition to accommodate potential changes to the exact definition\n  // of \"complete\" in future Terraform versions.\n  \"complete\": true,\n\n  // \"errored\" indicates whether planning failed. An errored plan cannot be applied,\n  // but the actions planned before failure may help to understand the error.\n  \"errored\": false,\n\n  // \"configuration\" is a representation of the configuration being applied to the\n  // prior state, using the configuration representation described above.\n  \"configuration\": <configuration-representation>,\n\n  // \"planned_values\" is a description of what is known so far of the outcome in\n  // the standard value representation, with any as-yet-unknown values omitted.\n  \"planned_values\": <values-representation>,\n\n  // \"proposed_unknown\" is a representation of the attributes, including any\n  // potentially-unknown attributes. Each value is replaced with \"true\" or\n  // \"false\" depending on whether it is known in the proposed plan.\n  \"proposed_unknown\": <values-representation>,\n\n  // \"variables\" is a representation of all the variables provided for the given\n  // plan. This is structured as a map similar to the output map so we can add\n  // additional fields in later.\n  \"variables\": {\n    \"varname\": {\n      \"value\": \"varvalue\"\n    },\n  },\n\n  // \"resource_changes\" is a description of the individual change actions that\n  // Terraform plans to use to move from the prior state to a new state\n  // matching the configuration.\n  \"resource_changes\": [\n    // Each element of this array describes the action to take\n    // for one instance object. All resources in the\n    // configuration are included in this list.\n    {\n      // \"address\" is the full absolute address of the resource instance this\n      // change applies to, in the same format as addresses in a value\n      // representation.\n      \"address\": \"module.child.aws_instance.foo[0]\",\n\n      // \"previous_address\" is the full absolute address of this resource\n      // instance as it was known after the previous Terraform run.\n      // Included only if the address has changed, e.g. by handling\n      // a \"moved\" block in the configuration.\n      \"previous_address\": \"module.instances.aws_instance.foo[0]\",\n\n      // \"module_address\", if set, is the module portion of the above address.\n      // Omitted if the instance is in the root module.\n      \"module_address\": \"module.child\",\n\n      // \"mode\", \"type\", \"name\", and \"index\" have the same meaning as in a\n      // value representation.\n      \"mode\": \"managed\",\n      \"type\": \"aws_instance\",\n      \"name\": \"foo\",\n      \"index\": 0,\n\n      // \"deposed\", if set, indicates that this action applies to a \"deposed\"\n      // object of the given instance rather than to its \"current\" object.\n      // Omitted for changes to the current object. \"address\" and \"deposed\"\n      // together form a unique key across all change objects in a particular\n      // plan. The value is an opaque key representing the specific deposed\n      // object.\n      \"deposed\": \"deadbeef\",\n\n      // \"change\" describes the change that will be made to the indicated\n      // object. The <change-representation> is detailed in a section below.\n      \"change\": <change-representation>,\n\n      // \"action_reason\" is some optional extra context about why the\n      // actions given inside \"change\" were selected. This is the JSON\n      // equivalent of annotations shown in the normal plan output like\n      // \"is tainted, so must be replaced\" as opposed to just \"must be\n      // replaced\".\n      //\n      // These reason codes are display hints only and the set of possible\n      // hints may change over time. Users of this must be prepared to\n      // encounter unrecognized reasons and treat them as unspecified reasons.\n      //\n      // The current set of possible values is:\n      // - \"replace_because_tainted\": the object in question is marked as\n      //   \"tainted\" in the prior state, so Terraform planned to replace it.\n      // - \"replace_because_cannot_update\": the provider indicated that one\n      //   of the requested changes isn't possible without replacing the\n      //   existing object with a new object.\n      // - \"replace_by_request\": the user explicitly called for this object\n      //   to be replaced as an option when creating the plan, which therefore\n      //   overrode what would have been a \"no-op\" or \"update\" action otherwise.\n      // - \"delete_because_no_resource_config\": Terraform found no resource\n      //   configuration corresponding to this instance.\n      // - \"delete_because_no_module\": The resource instance belongs to a\n      //   module instance that's no longer declared, perhaps due to changing\n      //   the \"count\" or \"for_each\" argument on one of the containing modules.\n      // - \"delete_because_wrong_repetition\": The instance key portion of the\n      //   resource address isn't of a suitable type for the corresponding\n      //   resource's configured repetition mode (count, for_each, or neither).\n      // - \"delete_because_count_index\": The corresponding resource uses count,\n      //   but the instance key is out of range for the currently-configured\n      //   count value.\n      // - \"delete_because_each_key\": The corresponding resource uses for_each,\n      //   but the instance key doesn't match any of the keys in the\n      //   currently-configured for_each value.\n      // - \"read_because_config_unknown\": For a data resource, Terraform cannot\n      //   read the data during the plan phase because of values in the\n      //   configuration that won't be known until the apply phase.\n      // - \"read_because_dependency_pending\": For a data resource, Terraform\n      //   cannot read the data during the plan phase because the data\n      //   resource depends on at least one managed resource that also has\n      //   a pending change in the same plan.\n      //\n      // If there is no special reason to note, Terraform will omit this\n      // property altogether.\n      \"action_reason\": \"replace_because_tainted\"\n    }\n  ],\n\n  // \"resource_drift\" is a description of the changes Terraform detected\n  // when it compared the most recent state to the prior saved state.\n  \"resource_drift\": [\n    {\n        // \"resource_drift\" uses the same object structure as\n        // \"resource_changes\".\n    }\n  ],\n\n  // \"relevant_attributes\" lists the sources of all values contributing to\n  // changes in the plan. You can use \"relevant_attributes\" to filter\n  // \"resource_drift\" and determine which external changes may have affected the\n  // plan result.\n  \"relevant_attributes\": [\n    {\n      \"resource\": \"aws_instance.foo\",\n      \"attribute\": \"attr\",\n    }\n  ]\n\n  // \"output_changes\" describes the planned changes to the output values of the\n  // root module.\n  \"output_changes\": {\n    // Keys are the defined output value names.\n    \"foo\": {\n\n      // \"change\" describes the change that will be made to the indicated output\n      // value, using the same representation as for resource changes except\n      // that the only valid actions values are:\n      //   [\"create\"]\n      //   [\"update\"]\n      //   [\"delete\"]\n      // In the Terraform CLI 0.12.0 release, Terraform is not yet fully able to\n      // track changes to output values, so the actions indicated may not be\n      // fully accurate, but the \"after\" value will always be correct.\n      \"change\": <change-representation>,\n    }\n  },\n\n  // \"checks\" describes the partial results for any checkable objects, such as\n  // resources with postconditions, with as much information as Terraform can\n  // recognize at plan time. Some objects will have status \"unknown\" to\n  // indicate that their status will only be determined after applying the plan.\n  \"checks\" <checks-representation>\n}\n```\n\n----------------------------------------\n\nTITLE: Splitting a Terraform Module into Multiple Modules\nDESCRIPTION: Shows how to split a single module containing multiple AWS instances into two separate modules. It includes the original module, the new modules, and the shim configuration using moved blocks to maintain existing resource addresses.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/develop/refactoring.mdx#2025-04-22_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"a\" {\n  # (other resource-type-specific configuration)\n}\n\nresource \"aws_instance\" \"b\" {\n  # (other resource-type-specific configuration)\n}\n\nresource \"aws_instance\" \"c\" {\n  # (other resource-type-specific configuration)\n}\n```\n\nLANGUAGE: hcl\nCODE:\n```\n# module \"x\"\n\nresource \"aws_instance\" \"a\" {\n  # (other resource-type-specific configuration)\n}\n\nresource \"aws_instance\" \"b\" {\n  # (other resource-type-specific configuration)\n}\n```\n\nLANGUAGE: hcl\nCODE:\n```\n# module \"y\"\n\nresource \"aws_instance\" \"c\" {\n  # (other resource-type-specific configuration)\n}\n```\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"x\" {\n  source = \"../modules/x\"\n\n  # ...\n}\n\nmodule \"y\" {\n  source = \"../modules/y\"\n\n  # ...\n}\n\nmoved {\n  from = aws_instance.a\n  to   = module.x.aws_instance.a\n}\n\nmoved {\n  from = aws_instance.b\n  to   = module.x.aws_instance.b\n}\n\nmoved {\n  from = aws_instance.c\n  to   = module.y.aws_instance.c\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Locals for Shared Deployment Values in HCL\nDESCRIPTION: This snippet demonstrates how to use the locals block in a deployment configuration file to define shared values across multiple deployments. It sets variables for the Terraform organization and project name.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/design.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# deployments.tfdeploy.hcl\n\n# Define variables that multiple deployments use.\nlocals {\n    tf_organization    = \"<organization_name>\"\n    tf_project_name    = \"<project_name>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Coalesce Function Usage in Terraform\nDESCRIPTION: Demonstrates basic usage of the coalesce function with strings and numbers. Shows how the function returns the first non-empty value from its arguments.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/coalesce.mdx#2025-04-22_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\n> coalesce(\"a\", \"b\")\na\n> coalesce(\"\", \"b\")\nb\n> coalesce(1,2)\n1\n```\n\n----------------------------------------\n\nTITLE: Using Postcondition for HTTP Health Check in HCL\nDESCRIPTION: This snippet shows an alternative approach using a postcondition block to validate that the Terraform website returns the expected status code of 200. It demonstrates the difference between check blocks and postconditions.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/checks/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"http\" \"terraform_io\" {\n  url = \"https://www.terraform.io\"\n\n  lifecycle {\n    postcondition {\n        condition = self.status_code == 200\n        error_message = \"${self.url} returned an unhealthy status code\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Tagging Resources with Terraform Workspace Name in HCL\nDESCRIPTION: This HCL code snippet illustrates how to use the current Terraform workspace name to dynamically generate resource tags. It uses the `${terraform.workspace}` interpolation within the `tags` block of an `aws_instance` resource to set the 'Name' tag. The resulting tag will include the workspace name (e.g., 'web - default', 'web - staging'), aiding in resource identification across different environments managed by workspaces.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/state/workspaces.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"example\" {\n  tags = {\n    Name = \"web - ${terraform.workspace}\"\n  }\n\n  # ... other arguments\n}\n```\n\n----------------------------------------\n\nTITLE: Mixed Type Merging in Terraform HCL\nDESCRIPTION: Shows merging multiple maps where a string value is overridden by a list, demonstrating type conversion during merge.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/merge.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nmerge({a=\"b\"}, {a=[1,2], c=\"z\"}, {d=3})\n```\n\n----------------------------------------\n\nTITLE: File Function Usage Example\nDESCRIPTION: Demonstrates practical usage of the file function, showing how to read contents from a file named 'hello.txt' in the current module's directory using path.module variable.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/file.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> file(\"${path.module}/hello.txt\")\nHello World\n```\n\n----------------------------------------\n\nTITLE: Declaring Ephemeral Input Variables in HCL\nDESCRIPTION: Demonstrates declaring an ephemeral input variable in Terraform by setting the `ephemeral` argument to `true`. Ephemeral variables are available during the Terraform runtime (apply, plan, etc.) but are not persisted in the state file or plan file. This is useful for temporary values like session tokens.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/values/variables.mdx#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"session_token\" {\n  type      = string\n  ephemeral = true\n}\n```\n\n----------------------------------------\n\nTITLE: Activating Refresh-Only Mode in terraform plan (CLI Option)\nDESCRIPTION: Explains the `-refresh-only` option, available in Terraform v0.15.4 and later. This mode generates a plan that only updates the Terraform state and root module outputs to align with changes made to remote objects outside of Terraform, without proposing infrastructure changes based on configuration. It is useful for reconciling Terraform's state.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/plan.mdx#2025-04-22_snippet_3\n\nLANGUAGE: cli\nCODE:\n```\n-refresh-only\n```\n\n----------------------------------------\n\nTITLE: Template File Example with Map Iteration in Terraform\nDESCRIPTION: A template file example demonstrating how to iterate over a map of configuration key-value pairs.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/templatefile.mdx#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\n%{ for config_key, config_value in config }\nset ${config_key} = ${config_value}\n%{ endfor ~}\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Git Revision for Module Source (HCL)\nDESCRIPTION: These snippets show how to select a specific tag or commit in a Git repository when sourcing a module by adding the \"ref\" argument as a query parameter in the source URL. This requires the repository to have the specified revision/tag available. Inputs are the repository URL and revision identifier, which could be a tag or SHA-1 hash.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/sources.mdx#2025-04-22_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\n# select a specific tag\nmodule \"vpc\" {\n  source = \"git::https://example.com/vpc.git?ref=v1.2.0\"\n}\n\n# directly select a commit using its SHA-1 hash\nmodule \"storage\" {\n  source = \"git::https://example.com/storage.git?ref=51d462976d84fdea54b47d80dcabbf680badcdb8\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Referencing Modules from GitHub via HTTPS (HCL)\nDESCRIPTION: This example uses a GitHub HTTPS URL as the module source. The module will be cloned from the public repository over HTTPS. For private repos, credentials must be configured either via environment variables or credential helpers. The input is a standard GitHub repository URL.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/sources.mdx#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"consul\" {\n  source = \"github.com/hashicorp/example\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Stack Deployments in HCL\nDESCRIPTION: Example snippet demonstrating how to define deployments in a Stack deployment configuration file (tfdeploy.hcl). Deployments specify how the Stack's infrastructure should be replicated across environments.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ndeployment {\n  // Configuration for a Stack deployment\n}\n```\n\n----------------------------------------\n\nTITLE: Filtered For Expression in HCL\nDESCRIPTION: Demonstrates filtering elements in a for expression using an if clause to exclude empty strings.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/for.mdx#2025-04-22_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\n[for s in var.list : upper(s) if s != \"\"]\n```\n\n----------------------------------------\n\nTITLE: Moving Resources within Modules using Terraform HCL\nDESCRIPTION: This snippet demonstrates the usage of a 'moved' block to record the renaming of a resource in Terraform. It specifies the old and new names of the resource, enabling Terraform to recognize the resource move and update its state accordingly, avoiding destruction of the existing resource.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/develop/refactoring.mdx#2025-04-22_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nmoved {\n  from = aws_instance.a\n  to   = aws_instance.b\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Data Sources into Terraform Modules using Dependency Inversion (HCL)\nDESCRIPTION: This snippet shows how to inject dynamically discovered AWS VPC and subnet IDs into a module using Terraform data sources and dependency inversion. Data blocks retrieve existing VPC and subnet information via tags and vpc_id, while the module receives these as arguments. This pattern avoids hard-coding and allows infrastructure sharing or delegation. Dependencies include AWS provider configuration and existing infrastructure matching the tags provided. Module inputs must accept the injected values.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/develop/composition.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"aws_vpc\" \"main\" {\n  tags = {\n    Environment = \"production\"\n  }\n}\n\ndata \"aws_subnet_ids\" \"main\" {\n  vpc_id = data.aws_vpc.main.id\n}\n\nmodule \"consul_cluster\" {\n  source = \"./modules/aws-consul-cluster\"\n\n  vpc_id     = data.aws_vpc.main.id\n  subnet_ids = data.aws_subnet_ids.main.ids\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Object Attributes in Terraform\nDESCRIPTION: Shows how to define optional attributes in an object type constraint, including an optional attribute with a default value.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/type-constraints.mdx#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"with_optional_attribute\" {\n  type = object({\n    a = string                # a required attribute\n    b = optional(string)      # an optional attribute\n    c = optional(number, 127) # an optional attribute with default value\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Terraform S3 Backend with Assume Role via Web Identity (Terraform)\nDESCRIPTION: This snippet demonstrates configuring the Terraform S3 backend to store state in an AWS S3 bucket and authenticate by assuming an IAM role using web identity federation (OIDC/OAuth). It specifies the bucket name, state file key, AWS region, and includes the `assume_role_with_web_identity` block which requires the ARN of the role to assume (`role_arn`) and either the web identity token (`web_identity_token`) or the path to a file containing it (`web_identity_token_file`).\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/s3.mdx#2025-04-22_snippet_5\n\nLANGUAGE: terraform\nCODE:\n```\n```terraform\nterraform {\n  backend \"s3\" {\n    bucket = \"example-bucket\"\n    key    = \"path/to/state\"\n    region = \"us-east-1\"\n    assume_role_with_web_identity = {\n      role_arn           = \"arn:aws:iam::PRODUCTION-ACCOUNT-ID:role/Terraform\"\n      web_identity_token = \"<token value>\"\n    }\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Declaring Required Providers for In-house or Local Terraform Provider Distribution (HCL)\nDESCRIPTION: This snippet defines a 'required_providers' block for an in-house provider using a custom source address (e.g., terraform.example.com/examplecorp/ourcloud) and sets a minimum version constraint with '>= 1.0'. It is intended for scenarios where providers are distributed via local filesystem mirrors rather than through the public registry, with the hostname being arbitrary but organizationally controlled. The alias 'mycloud' is used for local referencing. Required dependencies include placement of the proper provider binary in the expected directory structure for Terraform to locate and use.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/providers/requirements.mdx#2025-04-22_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    mycloud = {\n      source  = \"terraform.example.com/examplecorp/ourcloud\"\n      version = \">= 1.0\"\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Providers with Test File Variables and Run Block Outputs\nDESCRIPTION: Demonstrates how to use test file variables and run block outputs to configure providers, allowing for dynamic credential management in tests.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/tests/index.mdx#2025-04-22_snippet_11\n\nLANGUAGE: hcl\nCODE:\n```\nprovider \"vault\" {\n  # ... vault configuration ...\n}\n\nprovider \"aws\" {\n  region     = \"us-east-1\"\n\n  # The `aws` provider can reference the outputs of the \"vault_setup\" run block.\n  access_key = run.vault_setup.aws_access_key\n  secret_key = run.vault_setup.aws_secret_key\n}\n\nrun \"vault_setup\" {\n  module {\n    # This module should only include reference to the Vault provider. Terraform\n    # will automatically work out which providers to supply based on the module\n    # configuration. The tests will error if a run block requires access to a\n    # provider that references outputs from a run block that has not executed.\n    source = \"./testing/vault-setup\"\n  }\n}\n\nrun \"use_aws_provider\" {\n  # This run block can then use both the `aws` and `vault` providers, as the\n  # previous run block provided all the data required for the `aws` provider.\n}\n```\n\n----------------------------------------\n\nTITLE: Basic AWS Instance Resource Configuration in HCL\nDESCRIPTION: Example showing how to configure an AWS EC2 instance with multiple EBS block devices using Terraform HCL syntax. Demonstrates basic resource arguments and nested block configuration.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/references.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"example\" {\n  ami           = \"ami-abc123\"\n  instance_type = \"t2.micro\"\n\n  ebs_block_device {\n    device_name = \"sda2\"\n    volume_size = 16\n  }\n  ebs_block_device {\n    device_name = \"sda3\"\n    volume_size = 20\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Stack Components in HCL\nDESCRIPTION: Example snippet showing how to define components in a Stack configuration file (tfstack.hcl). Components represent individual Terraform modules within a Stack.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ncomponent {\n  // Configuration for a Stack component\n}\n```\n\n----------------------------------------\n\nTITLE: Importing a Resource with for_each Meta-Argument in Terraform\nDESCRIPTION: Example showing how to import a resource that uses the for_each meta-argument in Terraform.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/import/index.mdx#2025-04-22_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\nimport {\n  to = aws_instance.example[\"foo\"]\n  id = \"i-abcd1234\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using terraform providers lock Command to Pre-populate Checksums\nDESCRIPTION: A bash command that demonstrates how to use the terraform providers lock command to pre-populate checksums for a specific set of platforms, which helps avoid ongoing additions of new h1: hashes as you work with different target platforms.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/files/dependency-lock.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nterraform providers lock \\\n  -platform=linux_arm64 \\\n  -platform=linux_amd64 \\\n  -platform=darwin_amd64 \\\n  -platform=windows_amd64\n```\n\n----------------------------------------\n\nTITLE: Using Implicitly Inherited Provider in Terraform Child Module using HCL\nDESCRIPTION: This snippet, intended for a child module (e.g., `./child` from the previous example), defines an `aws_s3_bucket` resource. Since no explicit provider is specified and its parent module defined a default AWS provider, this resource will automatically use the implicitly inherited provider configuration from the parent.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/develop/providers.mdx#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_s3_bucket\" \"example\" {\n  bucket = \"provider-inherit-example\"\n}\n```\n\n----------------------------------------\n\nTITLE: Object Creation with For Expression\nDESCRIPTION: Shows how to create an object using a for expression with key-value mapping using the => operator.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/for.mdx#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\n{for s in var.list : s => upper(s)}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Template with Map Variables in Terraform\nDESCRIPTION: Shows how to call the templatefile function with a nested map structure to generate configuration settings.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/templatefile.mdx#2025-04-22_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\ntemplatefile(\n               \"${path.module}/config.tftpl\",\n               {\n                 config = {\n                   \"x\"   = \"y\"\n                   \"foo\" = \"bar\"\n                   \"key\" = \"value\"\n                 }\n               }\n              )\n```\n\n----------------------------------------\n\nTITLE: Using the `contains` Function in Terraform HCL\nDESCRIPTION: Shows the syntax and provides examples for the `contains` function in HCL. The function takes a collection (list, tuple, or set) and a value as input. It returns `true` if the collection contains an element equal to the value, and `false` otherwise. Examples illustrate checking for the presence and absence of elements within a list.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/contains.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ncontains(list, value)\n```\n\nLANGUAGE: hcl\nCODE:\n```\n> contains([\"a\", \"b\", \"c\"], \"a\")\ntrue\n> contains([\"a\", \"b\", \"c\"], \"d\")\nfalse\n```\n\n----------------------------------------\n\nTITLE: Using State Keys to Share State Between Run Blocks (HCL)\nDESCRIPTION: This example demonstrates how to use the 'state_key' attribute to force Terraform to use the same state file for different run blocks, even when they load configuration from separate sources.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/tests/index.mdx#2025-04-22_snippet_17\n\nLANGUAGE: hcl\nCODE:\n```\nrun \"setup\" {\n  state_key = \"main\"\n\n  module {\n    source = \"./testing/setup\"\n  }\n}\n\nrun \"init\" {\n\n  # By setting the state key to \"main\" we are telling Terraform to use the same\n  # state file for this run block as the \"setup\" run block. This means that the\n  # resources created by the \"setup\" run block will be available to the\n  # configuration in this run block.\n  state_key = \"main\"\n\n  assert {\n    # In practice we'd do some interesting checks and tests here but the\n    # assertions aren't important for this example.\n  }\n\n  # ... more assertions ...\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Backend Type in Terraform Configuration\nDESCRIPTION: Example showing how to specify a remote backend type as a backend block label. This is the first part of configuring where Terraform will store state.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nbackend \"remote\" {\n  organization = \"example_corp\"\n  . . . \n}\n```\n\n----------------------------------------\n\nTITLE: Module Reference Example in Terraform\nDESCRIPTION: Demonstrates how to reference workspace information within a module configuration using a name prefix pattern. Shows proper usage of terraform.workspace for naming resources.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/references.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"example\" {\n  # ...\n\n  name_prefix = \"app-${terraform.workspace}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Outputting File Hash with filesha256 in Terraform HCL\nDESCRIPTION: This snippet defines an output block in Terraform that uses filesha256 to compute and display the SHA-256 hash of example.txt. The value attribute is set to the result of filesha256, and this will make the hash visible as a Terraform output. Dependencies are limited to Terraform itself, and the function works with any file accessible from the execution context.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/filesha256.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\noutput \"file_hash\" {\n  value = filesha256(\"example.txt\")\n}\n```\n\n----------------------------------------\n\nTITLE: Using Provider in Terraform Stack Component\nDESCRIPTION: This snippet shows how to use a defined provider in a Stack component. It demonstrates passing the provider to the component and specifying inputs.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/create/declare-providers.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n# components.tfstack.hcl\n\ncomponent \"s3\" {\n    source = \"./s3\"\n    inputs = {\n        aws_region = var.aws_region\n    }\n    providers = {\n        aws = provider.aws.this\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Ephemeral Resources in Terraform\nDESCRIPTION: This snippet defines an ephemeral block in Terraform, used to configure a temporary resource that does not persist in state files. The block requires the specification of resource type and name, along with any attributes and meta-arguments pertinent to the ephemeral resource.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/resources/ephemeral/reference.mdx#2025-04-22_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nephemeral \"<resource_type>\" \"<resource_name>\" {\n  <attributes>\n  <meta-arguments>\n}\n```\n\n----------------------------------------\n\nTITLE: Locking In-house Providers Using Mirror Options - Shell\nDESCRIPTION: This shell snippet shows how to restrict lock-file updates to a specific provider available only through a local filesystem mirror. It demonstrates combining `terraform providers lock` with the `-fs-mirror` option (for a local directory), multiple `-platform` settings (for cross-platform support), and directly identifying the provider via a source address. The command is intended for use when locking private/in-house providers not published to public registries. Arguments are wrapped for Unix shells with comments provided for clarity; on Windows, use a single line and omit backslashes/comments.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/providers/lock.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform providers lock \\\n  -fs-mirror=/usr/local/terraform/providers\n  -platform=windows_amd64 \\\n  -platform=darwin_amd64 \\\n  -platform=linux_amd64 \\\n  tf.example.com/ourcompany/ourplatform\n\n```\n\n----------------------------------------\n\nTITLE: Template File Example with List Iteration in Terraform\nDESCRIPTION: A template file example showing how to iterate over a list of IP addresses to generate backend configurations.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/templatefile.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n%{ for addr in ip_addrs ~}\nbackend ${addr}:${port}\n%{ endfor ~}\n```\n\n----------------------------------------\n\nTITLE: Setting TF_LOG_PATH to Persist Terraform Logs in Shell\nDESCRIPTION: Sets the `TF_LOG_PATH` environment variable to specify a file (`./terraform.log` in this example) where Terraform should write its log output. The `TF_LOG` variable must also be set (e.g., to `trace`, `debug`, `info`) for any logging to occur and be persisted to this file.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/config/environment-variables.mdx#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nexport TF_LOG_PATH=./terraform.log\n```\n\n----------------------------------------\n\nTITLE: Merge Function for Optional Arguments\nDESCRIPTION: Shows how to use the merge function to provide default values for optional arguments when accepting user input in a module.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/attr-as-blocks.mdx#2025-04-22_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nexample = [\n  for ex in var.examples: merge({\n    foo = null # (or any other suitable default value)\n  }, ex)\n]\n```\n\n----------------------------------------\n\nTITLE: Combining Mixed Type Lists with Concat in Terraform\nDESCRIPTION: Example showing how to combine multiple lists of different types including empty lists, numbers, strings, and nested lists using the concat function.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/concat.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nconcat([], [1, \"a\"], [[3], \"c\"])\n[\n  1,\n  \"a\",\n  [\n    3,\n  ],\n  \"c\",\n]\n```\n\n----------------------------------------\n\nTITLE: CIDR Netmask Function Example - HCL\nDESCRIPTION: Example demonstrating the conversion of a CIDR notation (172.16.0.0/12) to its corresponding subnet mask (255.240.0.0).\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/cidrnetmask.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> cidrnetmask(\"172.16.0.0/12\")\n255.240.0.0\n```\n\n----------------------------------------\n\nTITLE: Basic Arithmetic Operations in Terraform\nDESCRIPTION: Examples of arithmetic operations in Terraform including addition, subtraction, multiplication, division, modulo, and negation. These operators work with numeric values and produce numeric results.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/operators.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\na + b\n```\n\nLANGUAGE: hcl\nCODE:\n```\na - b\n```\n\nLANGUAGE: hcl\nCODE:\n```\na * b\n```\n\nLANGUAGE: hcl\nCODE:\n```\na / b\n```\n\nLANGUAGE: hcl\nCODE:\n```\na % b\n```\n\nLANGUAGE: hcl\nCODE:\n```\n-a\n```\n\n----------------------------------------\n\nTITLE: Provisioning Files to Resources with Terraform\nDESCRIPTION: This snippet illustrates the use of the `file` provisioner in Terraform to copy files and directories to resources. It shows how to specify the source file or directory and the destination path on the remote system. The snippet highlights syntax for provisioning individual files or entire directories using the `file` provisioner block within an `aws_instance` resource declaration.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/resources/provisioners/file.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n```hcl\nresource \"aws_instance\" \"web\" {\n  # ...\n\n  # Copies the myapp.conf file to /etc/myapp.conf\n  provisioner \"file\" {\n    source      = \"conf/myapp.conf\"\n    destination = \"/etc/myapp.conf\"\n  }\n\n  # Copies the string in content into /tmp/file.log\n  provisioner \"file\" {\n    content     = \"ami used: ${self.ami}\"\n    destination = \"/tmp/file.log\"\n  }\n\n  # Copies the configs.d folder to /etc/configs.d\n  provisioner \"file\" {\n    source      = \"conf/configs.d\"\n    destination = \"/etc\"\n  }\n\n  # Copies all files and folders in apps/app1 to D:/IIS/webapp1\n  provisioner \"file\" {\n    source      = \"apps/app1/\"\n    destination = \"D:/IIS/webapp1\"\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Terraform API Token Credentials\nDESCRIPTION: This snippet illustrates the use of a `credentials` block to store API tokens for interacting with Terraform network services. The token should be a valid user or team token when using HCP Terraform or Terraform Enterprise.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/config/config-file.mdx#2025-04-22_snippet_1\n\nLANGUAGE: HCL\nCODE:\n```\ncredentials \"app.terraform.io\" {\n  token = \"xxxxxx.atlasv1.zzzzzzzzzzzzz\"\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Resources by Name with Terraform CLI\nDESCRIPTION: This command filters the resources listed from the Terraform state file by a specific resource name. It aids in narrowing down large states to resources of interest by matching their names.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/state/list.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ terraform state list aws_instance.bar\naws_instance.bar[0]\naws_instance.bar[1]\n```\n\n----------------------------------------\n\nTITLE: Expanding List Arguments in Terraform Functions\nDESCRIPTION: Shows how to expand a list into separate arguments for a function call using the spread operator (...) in Terraform.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/function-calls.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nmin([55, 2453, 2]...)\n```\n\n----------------------------------------\n\nTITLE: Referencing Modules from a Generic Git Repository (HCL)\nDESCRIPTION: These snippets demonstrate cloning modules from arbitrary Git repositories using the \"git::\" prefix. The source can specify HTTPS or SSH protocols, with credentials handled either through environment (HTTPS) or SSH keys. Suitable for both public and private repositories, as long as access is configured. The input is a Git URL.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/sources.mdx#2025-04-22_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"vpc\" {\n  source = \"git::https://example.com/vpc.git\"\n}\n\nmodule \"storage\" {\n  source = \"git::ssh://username@example.com/storage.git\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Terraform Provisioner Script Path\nDESCRIPTION: This snippet shows how you can specify a custom script path for Terraform provisioners. By default, Terraform uses a random path in the remote filesystem to store scripts, but you can override it using the `script_path` option in the `connection` block. Replace `%RAND%` with randomly selected digits to avoid collisions. On Windows, use forward slashes for compatibility with Terraform's escape characters.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/resources/provisioners/connection.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nconnection {\n  # ...\n  script_path = \"H:/terraform-temp/script_%RAND%.sh\"\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Alternate Provider Configurations for a Child Module in Terraform\nDESCRIPTION: This snippet demonstrates how to select alternate provider configurations for a child module using the 'providers' meta-argument to map provider configurations to local provider names inside the module.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/providers/configuration.mdx#2025-04-22_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"aws_vpc\" {\n  source = \"./aws_vpc\"\n  providers = {\n    aws = aws.west\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: regexall Function Usage Examples in HCL\nDESCRIPTION: Demonstrates practical examples of using regexall to find pattern matches in strings, including counting matches and testing for existence of matches.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/regexall.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> regexall(\"[a-z]+\", \"1234abcd5678efgh9\")\n[\n  \"abcd\",\n  \"efgh\",\n]\n\n> length(regexall(\"[a-z]+\", \"1234abcd5678efgh9\"))\n2\n\n> length(regexall(\"[a-z]+\", \"123456789\")) > 0\nfalse\n```\n\n----------------------------------------\n\nTITLE: Calculating Consecutive IP Ranges with CIDR in HCL\nDESCRIPTION: The `cidrsubnets` function calculates consecutive IP address ranges within a given CIDR prefix, allowing for multiple additional subnet prefix bits (`newbits`) to be specified for address planning. It returns a list of address ranges in CIDR notation. It accepts both IPv4 and IPv6 prefixes, and outputs match the input addressing scheme. Care should be taken to not alter arguments of existing real infrastructure to avoid invalidation of address assignments.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/cidrsubnets.mdx#2025-04-22_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\ncidrsubnets(prefix, newbits...)\n```\n\nLANGUAGE: HCL\nCODE:\n```\n> cidrsubnets(\"10.1.0.0/16\", 4, 4, 8, 4)\n[\n  \"10.1.0.0/20\",\n  \"10.1.16.0/20\",\n  \"10.1.32.0/24\",\n  \"10.1.48.0/20\",\n]\n```\n\nLANGUAGE: HCL\nCODE:\n```\n> cidrsubnets(\"fd00:fd12:3456:7890::/56\", 16, 16, 16, 32)\n[\n  \"fd00:fd12:3456:7800::/72\",\n  \"fd00:fd12:3456:7800:100::/72\",\n  \"fd00:fd12:3456:7800:200::/72\",\n  \"fd00:fd12:3456:7800:300::/88\",\n]\n```\n\nLANGUAGE: HCL\nCODE:\n```\n> [for cidr_block in cidrsubnets(\"10.0.0.0/8\", 8, 8, 8, 8) : cidrsubnets(cidr_block, 4, 4)]\n[\n  [\n    \"10.0.0.0/20\",\n    \"10.0.16.0/20\",\n  ],\n  [\n    \"10.1.0.0/20\",\n    \"10.1.16.0/20\",\n  ],\n  [\n    \"10.2.0.0/20\",\n    \"10.2.16.0/20\",\n  ],\n  [\n    \"10.3.0.0/20\",\n    \"10.3.16.0/20\",\n  ],\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Data Source with Custom Provider in Terraform HCL\nDESCRIPTION: Example demonstrating how to specify a non-default provider configuration for an AWS AMI data source using the provider meta-argument. The provider 'aws.west' is used instead of the default AWS provider configuration.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/data-sources/index.mdx#2025-04-22_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"aws_ami\" \"web\" {\n  provider = aws.west\n\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Variable Structure for Multi-level Nested Blocks in Terraform\nDESCRIPTION: Example of a complex variable definition that would be used for generating multi-level nested block structures, defining a map of objects with nested objects for load balancer origin groups.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/dynamic-blocks.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"load_balancer_origin_groups\" {\n  type = map(object({\n    origins = set(object({\n      hostname = string\n    }))\n  }))\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Values to a List with tolist Function - Terraform\nDESCRIPTION: The tolist function in Terraform converts different types of values to a list. It is particularly used to normalize types in module outputs, and explicitly convert set values to lists while maintaining an undefined order. The function requires input elements of the same type; if they differ, they will be converted to the most general type.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/tolist.mdx#2025-04-22_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\n> tolist([\"a\", \"b\", \"c\"])\n[\n  \"a\",\n  \"b\",\n  \"c\",\n]\n```\n\nLANGUAGE: Terraform\nCODE:\n```\n> tolist([\"a\", \"b\", 3])\n[\n  \"a\",\n  \"b\",\n  \"3\",\n]\n```\n\n----------------------------------------\n\nTITLE: Setting a Simple String Variable on Unix-like Shells via CLI\nDESCRIPTION: This command demonstrates passing a simple string input variable named 'name' with the value 'value' to the `terraform plan` command using the `-var` option. It uses single quotes (') to ensure the shell interprets the argument literally on Unix-like systems (e.g., Linux, macOS).\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/plan.mdx#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nterraform plan -var 'name=value'\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Deployments in HCL\nDESCRIPTION: This snippet shows how to define multiple deployment blocks for different environments (production and staging) with varying configurations.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/deploy/config.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n# deployments.tfdeploy.hcl\n\ndeployment \"production\" {\n  inputs = {\n    aws_region     = \"us-west-1\"\n    instance_count = 2\n  }\n}\n\ndeployment \"staging\" {\n  inputs = {\n    aws_region     = \"us-west-1\"\n    instance_count = 1\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Variable Value in Terraform Variable Definitions File (HCL)\nDESCRIPTION: Shows how to set a variable value in a Terraform .tfvars file using HCL syntax. This example also illustrates a common mistake where the variable name is misspelled.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/values/variables.mdx#2025-04-22_snippet_16\n\nLANGUAGE: hcl\nCODE:\n```\nmosse = \"Moose\"\n```\n\n----------------------------------------\n\nTITLE: Executing the terraform plan command (CLI)\nDESCRIPTION: Basic usage of the `terraform plan` command. It looks for the root module configuration in the current directory and creates an execution plan, previewing the changes Terraform intends to make to the infrastructure without actually applying them. Optional arguments can modify its behavior.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/plan.mdx#2025-04-22_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\nterraform plan [options]\n```\n\n----------------------------------------\n\nTITLE: Example Output of `terraform workspace list` Command in Shell\nDESCRIPTION: This shell output demonstrates the result of executing the `terraform workspace list` command. It lists all existing workspaces ('default', 'development', 'jsmith-test') found in the current Terraform project directory, marking the currently active workspace ('development') with an asterisk (*).\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/workspace/list.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ terraform workspace list\n  default\n* development\n  jsmith-test\n```\n\n----------------------------------------\n\nTITLE: Auto-Approving Safe Plans for Non-Production Deployments in Terraform\nDESCRIPTION: This snippet shows how to create an 'auto_approve' rule that automatically approves plans that do not remove resources in non-production deployments. It uses multiple checks to ensure no resources are being removed and that the deployment is not for production.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/deploy/conditions.mdx#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\norchestrate \"auto_approve\" \"safe_plans\" {\n    # Ensure that no resource is removed.\n    check {\n        condition = context.plan.changes.remove == 0\n        reason    = \"Plan is destroying ${context.plan.changes.remove} resources.\"\n    }\n\n    # Ensure that the deployment is not your production environment. \n    check {\n        condition = context.plan.deployment != deployment.production\n        reason    = \"Production plans are not eligible for auto_approve.\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Evaluating Functions in Terraform Console Shell\nDESCRIPTION: Shows how to interactively evaluate Terraform built-in functions using the 'terraform console' command. The user inputs the max function with arguments (5, 12, 9), and the console immediately outputs the result (12). This requires a working Terraform installation, and inputs must follow Terraform HCL syntax. This approach is helpful for quick experimentation and validation of function behavior without modifying configuration files.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n> max(5, 12, 9)\n12\n```\n\n----------------------------------------\n\nTITLE: Handling Length Exceeding String Remainder in HCL substr\nDESCRIPTION: Demonstrates the behavior of the HCL `substr` function when the specified length (10) exceeds the number of remaining characters after the offset (6). It extracts the rest of the available string ('world') from 'hello world'.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/substr.mdx#2025-04-22_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\n> substr(\"hello world\", 6, 10)\nworld\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure CLI Backend for Terraform\nDESCRIPTION: This HCL snippet configures Terraform to use Azure CLI for backend authentication in Terraform. It requires a pre-authenticated Azure CLI session. Parameters like tenant_id, subscription_id, resource_group_name, storage_account_name, container_name, and key are configurable. The CLI automatically manages these values, reducing manual overhead.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/azurerm.mdx#2025-04-22_snippet_11\n\nLANGUAGE: HCL\nCODE:\n```\nterraform {\n  backend \"azurerm\" {\n    use_cli              = true                                    # Can also be set via `ARM_USE_CLI` environment variable.\n    tenant_id            = \"00000000-0000-0000-0000-000000000000\"  # Can also be set via `ARM_TENANT_ID` environment variable. Azure CLI will fallback to use the connected tenant ID if not supplied.\n    subscription_id      = \"00000000-0000-0000-0000-000000000000\"  # Can also be set via `ARM_SUBSCRIPTION_ID` environment variable. Azure CLI will fallback to use the connected subscription ID if not supplied.\n    resource_group_name  = \"StorageAccount-ResourceGroup\"          # Can be passed via `-backend-config=`\"resource_group_name=<resource group name>\"` in the `init` command.\n    storage_account_name = \"abcd1234\"                              # Can be passed via `-backend-config=`\"storage_account_name=<storage account name>\"` in the `init` command.\n    container_name       = \"tfstate\"                               # Can be passed via `-backend-config=`\"container_name=<container name>\"` in the `init` command.\n    key                  = \"prod.terraform.tfstate\"                # Can be passed via `-backend-config=`\"key=<blob key name>\"` in the `init` command.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Destroy-Time Local-Exec Provisioner in Terraform Resource Block (HCL)\nDESCRIPTION: This HCL snippet shows configuration of a destroy-time local-exec provisioner within an aws_instance resource block. The provisioner's when attribute is set to destroy, causing the specified command to execute just before Terraform destroys the associated resource. It is critical to ensure the command is idempotent, as destroy-time provisioners may be retried if failures occur. No additional prerequisites are needed apart from Terraform and the relevant provider plugin.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/resources/provisioners/syntax.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"web\" {\n  # ...\n\n  provisioner \"local-exec\" {\n    when    = destroy\n    command = \"echo 'Destroy-time provisioner'\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Terraform Directory Without Backend\nDESCRIPTION: This shell command initializes a Terraform working directory without configuring any backend, which is necessary to prepare the directory for validation. The command uses the `-backend=false` flag to prevent backend configuration. This is typically required before performing validation, especially if the backend isn't necessary for the validation context.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/validate.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ terraform init -backend=false\n```\n\n----------------------------------------\n\nTITLE: Using local-exec Provisioner with Environment Variables in Terraform\nDESCRIPTION: This example shows how to use the local-exec provisioner with custom environment variables. It executes a command that writes the values of these variables to a file.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/resources/provisioners/local-exec.mdx#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"web\" {\n  # ...\n\n  provisioner \"local-exec\" {\n    command = \"echo $FOO $BAR $BAZ >> env_vars.txt\"\n\n    environment = {\n      FOO = \"bar\"\n      BAR = 1\n      BAZ = \"true\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: COS Backend with CAM Role Name\nDESCRIPTION: Configuration for COS backend using CAM (Cloud Access Management) role name for authentication. Uses instance metadata for credential retrieval.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/cos.mdx#2025-04-22_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  backend \"cos\" {\n    region        = \"ap-guangzhou\"\n    bucket        = \"bucket-for-terraform-state-{appid}\"\n    prefix        = \"terraform/state\"\n    cam_role_name = \"my-cam-role-name\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Expanding Arguments in Terraform Merge\nDESCRIPTION: Illustrates using the expansion operator (...) to merge multiple maps from an array into a single map.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/merge.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nmerge([{a=\"b\", c=\"d\"}, {}, {e=\"f\", c=\"z\"}]...)\n```\n\n----------------------------------------\n\nTITLE: Flattening Nested Lists in Terraform\nDESCRIPTION: This HCL code snippet demonstrates the use of the `flatten` function to eliminate nested lists within a data structure. The `flatten` function converts nested lists into a single list to facilitate easier handling within Terraform configurations. It also shows how to model nested structures such as networks and subnets that align with resource repetition requirements in Terraform.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/flatten.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"networks\" {\n  type = map(object({\n    cidr_block = string\n    subnets    = map(object({ cidr_block = string }))\n  }))\n  default = {\n    \"private\" = {\n      cidr_block = \"10.1.0.0/16\"\n      subnets = {\n        \"db1\" = {\n          cidr_block = \"10.1.0.1/16\"\n        }\n        \"db2\" = {\n          cidr_block = \"10.1.0.2/16\"\n        }\n      }\n    },\n    \"public\" = {\n      cidr_block = \"10.1.1.0/16\"\n      subnets = {\n        \"webserver\" = {\n          cidr_block = \"10.1.1.1/16\"\n        }\n        \"email_server\" = {\n          cidr_block = \"10.1.1.2/16\"\n        }\n      }\n    }\n    \"dmz\" = {\n      cidr_block = \"10.1.2.0/16\"\n      subnets = {\n        \"firewall\" = {\n          cidr_block = \"10.1.2.1/16\"\n        }\n      }\n    }\n  }\n}\n\nresource \"aws_vpc\" \"example\" {\n  for_each = var.networks\n\n  cidr_block = each.value.cidr_block\n}\n\nlocals {\n  # flatten ensures that this local value is a flat list of objects, rather\n  # than a list of lists of objects.\n  network_subnets = flatten([\n    for network_key, network in var.networks : [\n      for subnet_key, subnet in network.subnets : {\n        network_key = network_key\n        subnet_key  = subnet_key\n        network_id  = aws_vpc.example[network_key].id\n        cidr_block  = subnet.cidr_block\n      }\n    ]\n  ])\n}\n\nresource \"aws_subnet\" \"example\" {\n  # local.network_subnets is a list, so we must now project it into a map\n  # where each key is unique. We'll combine the network and subnet keys to\n  # produce a single unique key per instance.\n  for_each = tomap({\n    for subnet in local.network_subnets : \"${subnet.network_key}.${subnet.subnet_key}\" => subnet\n  })\n\n  vpc_id            = each.value.network_id\n  availability_zone = each.value.subnet_key\n  cidr_block        = each.value.cidr_block\n}\n\n```\n\n----------------------------------------\n\nTITLE: Explicit Null Assignment in List Objects\nDESCRIPTION: Demonstrates how to handle required attributes when using argument syntax by explicitly setting null values.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/attr-as-blocks.mdx#2025-04-22_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nexample = [\n  {\n    foo = null\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Using local-exec Provisioner with AWS Instance in Terraform\nDESCRIPTION: This snippet demonstrates how to use the local-exec provisioner with an AWS EC2 instance. It executes a command to append the instance's private IP to a local file after the instance is created.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/resources/provisioners/local-exec.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"web\" {\n  # ...\n\n  provisioner \"local-exec\" {\n    command = \"echo ${self.private_ip} >> private_ips.txt\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating and Using an Identity Token for AWS Authentication\nDESCRIPTION: This example demonstrates how to generate an identity token for AWS authentication and use it in a deployment configuration.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/reference/tfdeploy.mdx#2025-04-22_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nidentity_token \"aws\" {\n  audience = [\"aws.workload.identity\"]\n}\n\ndeployment \"staging\" {\n  inputs = {\n    aws_region = \"eu-west-1\"\n    role_arn   = \"arn:aws:iam::123456789101:role/my-oidc-role\"\n    aws_token  = identity_token.aws.jwt\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Remote Backend Configuration in Terraform\nDESCRIPTION: Examples of basic remote backend configuration for both single and multiple workspace scenarios.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/remote.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n# Using a single workspace:\nterraform {\n  backend \"remote\" {\n    hostname = \"app.terraform.io\"\n    organization = \"company\"\n\n    workspaces {\n      name = \"my-app-prod\"\n    }\n  }\n}\n\n# Using multiple workspaces:\nterraform {\n  backend \"remote\" {\n    hostname = \"app.terraform.io\"\n    organization = \"company\"\n\n    workspaces {\n      prefix = \"my-app-\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Timestamp Format Using Can Function in Terraform\nDESCRIPTION: Example showing how to use the 'can' function for timestamp validation in variable declarations. The function tests if a string can be formatted as a timestamp.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/can.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"timestamp\" {\n  type        = string\n\n  validation {\n    # formatdate fails if the second argument is not a valid timestamp\n    condition     = can(formatdate(\"\", var.timestamp))\n    error_message = \"The timestamp argument requires a valid RFC 3339 timestamp.\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Terraform Plan Tests with Customized Providers\nDESCRIPTION: Executes a Terraform plan command with customized provider mappings, demonstrating how to override default provider configurations in tests.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/tests/index.mdx#2025-04-22_snippet_10\n\nLANGUAGE: hcl\nCODE:\n```\nrun \"customised_providers\" {\n\n  command = plan\n\n  providers = {\n    aws           = aws\n    aws.secondary = aws.tertiary\n  }\n\n  assert {\n    condition     = aws_s3_bucket.primary_bucket.bucket == \"test-us-east-1-primary\"\n    error_message = \"invalid value for primary S3 bucket\"\n  }\n\n  assert {\n    condition     = aws_s3_bucket.secondary_bucket.bucket == \"test-eu-west-2-secondary\"\n    error_message = \"invalid value for secondary S3 bucket\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Backend in Terraform\nDESCRIPTION: Basic configuration for HTTP backend in Terraform that specifies the REST endpoint address and lock/unlock addresses for state management.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/http.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  backend \"http\" {\n    address = \"http://myrest.api.com/foo\"\n    lock_address = \"http://myrest.api.com/foo\"\n    unlock_address = \"http://myrest.api.com/foo\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Development Overrides for Provider Development in Terraform (HCL)\nDESCRIPTION: This configuration block allows provider developers to override normal provider installation methods. It specifies a local directory to use for a particular provider, bypassing version and checksum verifications to facilitate development and testing.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/config/config-file.mdx#2025-04-22_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\nprovider_installation {\n\n  # Use /home/developer/tmp/terraform-null as an overridden package directory\n  # for the hashicorp/null provider. This disables the version and checksum\n  # verifications for this provider and forces Terraform to look for the\n  # null provider plugin in the given directory.\n  dev_overrides {\n    \"hashicorp/null\" = \"/home/developer/tmp/terraform-null\"\n  }\n\n  # For all other providers, install them directly from their origin provider\n  # registries as normal. If you omit this, Terraform will _only_ use\n  # the dev_overrides block, and so no other providers will be available.\n  direct {}\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating split Function with Various Inputs in Terraform HCL\nDESCRIPTION: This series of example snippets illustrate how the split function works with different kinds of input strings and separators in Terraform HCL. The first example splits a comma-separated string into a list of elements, the second shows splitting a string with no separator present, and the third demonstrates splitting an empty string, resulting in a single empty string in the list. These examples require no external dependencies and are directly executable in Terraform's expression evaluator. They showcase expected behavior with typical and edge-case inputs.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/split.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> split(\",\", \"foo,bar,baz\")\n[\n  \"foo\",\n  \"bar\",\n  \"baz\",\n]\n```\n\nLANGUAGE: hcl\nCODE:\n```\n> split(\",\", \"foo\")\n[\n  \"foo\",\n]\n```\n\nLANGUAGE: hcl\nCODE:\n```\n> split(\",\", \"\")\n[\n  \"\",\n]\n```\n\n----------------------------------------\n\nTITLE: Using a String Value for Write-Only Argument\nDESCRIPTION: This example shows how to use a string value for a write-only argument in an AWS RDS instance resource. While possible, it's recommended to use ephemeral values for better security.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/resources/ephemeral/write-only.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_db_instance\" \"test\" {\n  instance_class      = \"db.t3.micro\"\n  allocated_storage   = \"5\"\n  engine              = \"postgres\"\n  username            = \"example\"\n  skip_final_snapshot = true\n  password_wo         = \"my-password-here\"\n  password_wo_version = 1\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Function Call Syntax in Terraform HCL\nDESCRIPTION: Demonstrates the standard syntax for calling functions in Terraform configuration language, with function name followed by arguments in parentheses.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/function-calls.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n<FUNCTION NAME>(<ARGUMENT 1>, <ARGUMENT 2>)\n```\n\n----------------------------------------\n\nTITLE: Defining anytrue Function Syntax in Terraform HCL\nDESCRIPTION: Demonstrates the basic syntax for using the anytrue function in Terraform's HCL. The function takes a list as an argument and returns a boolean value.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/anytrue.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nanytrue(list)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Backend with SAS Token in Terraform\nDESCRIPTION: Basic Azure Storage backend configuration using SAS token authentication. Includes storage account configuration with container and state file path settings.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/azurerm.mdx#2025-04-22_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  backend \"azurerm\" {\n    sas_token            = \"abcdefghijklmnopqrstuvwxyz0123456789...\"  # Can also be set via `ARM_SAS_TOKEN` environment variable.\n    storage_account_name = \"abcd1234\"                                 # Can be passed via `-backend-config=`\"storage_account_name=<storage account name>\"` in the `init` command.\n    container_name       = \"tfstate\"                                  # Can be passed via `-backend-config=`\"container_name=<container name>\"` in the `init` command.\n    key                  = \"prod.terraform.tfstate\"                   # Can be passed via `-backend-config=`\"key=<blob key name>\"` in the `init` command.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing AWS Instance into Module\nDESCRIPTION: This command imports an AWS EC2 instance with ID 'i-abcd1234' into the 'aws_instance.bar' resource within the 'foo' module.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/import.mdx#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ terraform import module.foo.aws_instance.bar i-abcd1234\n```\n\n----------------------------------------\n\nTITLE: Defining bcrypt Function Syntax in Terraform HCL\nDESCRIPTION: Demonstrates the syntax for using the bcrypt function in Terraform. The function takes a string and an optional cost parameter, defaulting to 10 if not specified.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/bcrypt.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nbcrypt(string, cost)\n```\n\n----------------------------------------\n\nTITLE: Converting an Object to a Map in Terraform\nDESCRIPTION: Basic example showing how to convert an object to a map using the tomap function. The resulting map preserves the key-value pairs from the input object.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/tomap.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> tomap({\"a\" = 1, \"b\" = 2})\n{\n  \"a\" = 1\n  \"b\" = 2\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Substring with Negative Offset and Length in HCL\nDESCRIPTION: Shows how to use negative offsets and lengths with the `substr` function in HCL. A negative offset (-5) counts from the end of the string. A negative length (-1) indicates taking the remainder of the string from the given offset. This example extracts 'world' from 'hello world'.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/substr.mdx#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\n> substr(\"hello world\", -5, -1)\nworld\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Backend with OIDC for Azure DevOps in Terraform\nDESCRIPTION: Azure Storage backend configuration using OpenID Connect authentication for Azure DevOps. Includes service connection ID and standard Azure configuration settings.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/azurerm.mdx#2025-04-22_snippet_9\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  backend \"azurerm\" {\n    use_oidc                         = true                                    # Can also be set via `ARM_USE_OIDC` environment variable.\n    oidc_azure_service_connection_id = \"00000000-0000-0000-0000-000000000000\"  # Can also be set via `ARM_OIDC_AZURE_SERVICE_CONNECTION_ID` environment variable.\n    tenant_id                        = \"00000000-0000-0000-0000-000000000000\"  # Can also be set via `ARM_TENANT_ID` environment variable.\n    subscription_id                  = \"00000000-0000-0000-0000-000000000000\"  # Can also be set via `ARM_SUBSCRIPTION_ID` environment variable.\n    client_id                        = \"00000000-0000-0000-0000-000000000000\"  # Can also be set via `ARM_CLIENT_ID` environment variable.\n    resource_group_name              = \"StorageAccount-ResourceGroup\"          # Can be passed via `-backend-config=`\"resource_group_name=<resource group name>\"` in the `init` command.\n    storage_account_name             = \"abcd1234\"                              # Can be passed via `-backend-config=`\"storage_account_name=<storage account name>\"` in the `init` command.\n    container_name                   = \"tfstate\"                               # Can be passed via `-backend-config=`\"container_name=<container name>\"` in the `init` command.\n    key                              = \"prod.terraform.tfstate\"                # Can be passed via `-backend-config=`\"key=<blob key name>\"` in the `init` command.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Variable Definitions File Syntax\nDESCRIPTION: Example of a .tfvars file format showing variable assignments for strings and lists using HCL syntax.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/values/variables.mdx#2025-04-22_snippet_10\n\nLANGUAGE: hcl\nCODE:\n```\nimage_id = \"ami-abc123\"\navailability_zone_names = [\n  \"us-east-1a\",\n  \"us-west-1c\",\n]\n```\n\n----------------------------------------\n\nTITLE: Complete S3 Template Retrieval and Rendering Example in HCL\nDESCRIPTION: A full example that retrieves a template from an S3 bucket and dynamically renders it using the templatestring function. The example defines an AWS S3 object data source and outputs the rendered template with a variable substitution.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/templatestring.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"aws_s3_object\" \"example\" {\n  bucket = \"example-example\"\n  key    = \"example.tmpl\"\n}\n\noutput \"example\" {\n  value = templatestring(data.aws_s3_object.example.body, {\n    name = var.name\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: COS Backend with Assume Role Configuration\nDESCRIPTION: Configuration for COS backend that uses assumed role credentials. Includes role ARN, session name, and duration parameters for cross-account access.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/cos.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  backend \"cos\" {\n    region = \"ap-guangzhou\"\n    bucket = \"bucket-for-terraform-state-{appid}\"\n    prefix = \"terraform/state\"\n    assume_role {\n      role_arn         = \"qcs::cam::uin/xxx:roleName/yyy\"\n      session_name     = \"my-session-name\"\n      session_duration = 7200\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Template Generation using jsonencode in Terraform\nDESCRIPTION: Demonstrates using a template with jsonencode to generate valid JSON output without manually handling escaping or delimiters.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/templatefile.mdx#2025-04-22_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\n${jsonencode({\n  \"backends\": [for addr in ip_addrs : \"${addr}:${port}\"],\n})}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating anytrue Function Usage in Terraform\nDESCRIPTION: Provides multiple examples of using the anytrue function with different input scenarios, including lists with string \"true\", boolean true, mixed booleans, and an empty list.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/anytrue.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> anytrue([\"true\"])\ntrue\n> anytrue([true])\ntrue\n> anytrue([true, false])\ntrue\n> anytrue([])\nfalse\n```\n\n----------------------------------------\n\nTITLE: Terraform Override Configuration\nDESCRIPTION: Example of an override file that modifies the AMI of the AWS instance resource.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/files/override.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"web\" {\n  ami = \"foo\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using file provisioner with remote-exec in Terraform HCL\nDESCRIPTION: This snippet shows how to use the file provisioner to upload a script and then execute it with arguments using the remote-exec provisioner. This approach allows passing arguments to scripts.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/resources/provisioners/remote-exec.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"web\" {\n  # ...\n\n  provisioner \"file\" {\n    source      = \"script.sh\"\n    destination = \"/tmp/script.sh\"\n  }\n\n  provisioner \"remote-exec\" {\n    inline = [\n      \"chmod +x /tmp/script.sh\",\n      \"/tmp/script.sh args\",\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Workspaces in HCP Terraform\nDESCRIPTION: Defines the workspaces block that specifies which HCP Terraform workspaces should be associated with the configuration, allowing tag-based, name-based, or project-based identification.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/terraform.mdx#2025-04-22_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  cloud  {\n    workspaces {\n      tags = [ \"<workspace-tag>\" ] # Mutually exclusive with `name`\n      name = \"<workspace-name>\" # Mutually exclusive with `tags`\n      project = \"<project-name>\"\n    }            \n  }\n  # . . .\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Map to YAML with yamlencode in Terraform\nDESCRIPTION: Examples of using the yamlencode function to convert Terraform maps to YAML strings. The examples show simple key-value pairs, nested structures with arrays, and complex combinations of maps and lists.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/yamlencode.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> yamlencode({\"a\":\"b\", \"c\":\"d\"})\n\"a\": \"b\"\n\"c\": \"d\"\n\n> yamlencode({\"foo\":[1, 2, 3], \"bar\": \"baz\"})\n\"bar\": \"baz\"\n\"foo\":\n- 1\n- 2\n- 3\n\n> yamlencode({\"foo\":[1, {\"a\":\"b\",\"c\":\"d\"}, 3], \"bar\": \"baz\"})\n\"bar\": \"baz\"\n\"foo\":\n- 1\n- \"a\": \"b\"\n  \"c\": \"d\"\n- 3\n```\n\n----------------------------------------\n\nTITLE: Configuring HCP Terraform Cloud Block with Tags\nDESCRIPTION: Example configuration showing how to set up a cloud block in Terraform to connect to HCP Terraform using organization settings, project name, and workspace tags.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/cloud/settings.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  cloud {\n    organization = \"my-org\"\n    hostname = \"app.terraform.io\" # Optional; defaults to app.terraform.io\n\n    workspaces {\n      project = \"networking-development\"\n\n      tags = {\n        layer = \"networking\"\n        source = \"cli\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Modules from Bitbucket Repository (HCL)\nDESCRIPTION: Shows how to configure the source argument with a Bitbucket repository address. For public repositories, access is straightforward; for private repositories, additional credentials are needed and the scheme may be resolved to either Git or Mercurial based on repository type. This reference works only for public repositories by default.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/sources.mdx#2025-04-22_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"consul\" {\n  source = \"bitbucket.org/hashicorp/terraform-consul-aws\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining an AWS S3 Bucket Resource in HCL\nDESCRIPTION: This HCL snippet defines a basic Terraform configuration (`main.tf`) for creating an AWS S3 bucket. It configures the AWS provider, declares an input variable `bucket_prefix`, defines an `aws_s3_bucket` resource whose name incorporates the variable, and specifies an output `bucket_name` to expose the final bucket name. This serves as the configuration under test in subsequent examples.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/tests/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# main.tf\n\nprovider \"aws\" {\n    region = \"eu-central-1\"\n}\n\nvariable \"bucket_prefix\" {\n  type = string\n}\n\nresource \"aws_s3_bucket\" \"bucket\" {\n  bucket = \"${var.bucket_prefix}-bucket\"\n}\n\noutput \"bucket_name\" {\n  value = aws_s3_bucket.bucket.bucket\n}\n```\n\n----------------------------------------\n\nTITLE: Range Function Examples - HCL\nDESCRIPTION: Various examples showing different use cases of the range function with different parameters and step values.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/range.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n> range(3)\n[\n  0,\n  1,\n  2,\n]\n\n> range(1, 4)\n[\n  1,\n  2,\n  3,\n]\n\n> range(1, 8, 2)\n[\n  1,\n  3,\n  5,\n  7,\n]\n\n> range(1, 4, 0.5)\n[\n  1,\n  1.5,\n  2,\n  2.5,\n  3,\n  3.5,\n]\n\n> range(4, 1)\n[\n  4,\n  3,\n  2,\n]\n\n> range(10, 5, -2)\n[\n  10,\n  8,\n  6,\n]\n```\n\n----------------------------------------\n\nTITLE: Aligning Argument Assignments in Terraform HCL - HCL\nDESCRIPTION: This HCL snippet illustrates the preferred style for aligning equals signs among arguments within the same nesting level in Terraform configuration files. By aligning the assignments, code becomes easier to scan and compare. There are no functional dependencies; this is strictly a formatting convention for clarity. Input is standard Terraform argument assignment; output is a human-readable, consistently formatted block.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/style.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nami           = \"abc123\"\ninstance_type = \"t2.micro\"\n```\n\n----------------------------------------\n\nTITLE: List Iteration with Index in HCL\nDESCRIPTION: Demonstrates iterating over a list with access to both the index and value, creating formatted strings.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/for.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n[for i, v in var.list : \"${i} is ${v}\"]\n```\n\n----------------------------------------\n\nTITLE: Refresh-Only Planning Mode Option for terraform apply (CLI)\nDESCRIPTION: When running `terraform apply` without a saved plan, the `-refresh-only` option creates a plan solely to update the Terraform state and root module output values based on the current remote objects.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/apply.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n-refresh-only\n```\n\n----------------------------------------\n\nTITLE: Showing Removal of Unused Provider from Terraform Lock File\nDESCRIPTION: A diff showing how Terraform removes a provider entry from the .terraform.lock.hcl file when that provider is no longer required in either the configuration or state.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/files/dependency-lock.mdx#2025-04-22_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n--- .terraform.lock.hcl\t2020-10-07 16:12:07.539570634 -0700\n+++ .terraform.lock.hcl\t2020-10-07 16:12:15.267487237 -0700\n@@ -6,26 +6,6 @@\n   ]\n }\n\n-provider \"registry.terraform.io/hashicorp/azurerm\" {\n-  version     = \"2.30.0\"\n-  constraints = \"~> 2.12\"\n-  hashes = [\n-    \"h1:FJwsuowaG5CIdZ0WQyFZH9r6kIJeRKts9+GcRsTz1+Y=\",\n-    \"h1:c/ntSXrDYM1mUir2KufijYebPcwKqS9CRGd3duDSGfY=\",\n-    \"h1:yre4Ph76g9H84MbuhZ2z5MuldjSA4FsrX6538O7PCcY=\",\n-    \"zh:04f0a50bb2ba92f3bea6f0a9e549ace5a4c13ef0cbb6975494cac0ef7d4acb43\",\n-    \"zh:2082e12548ebcdd6fd73580e83f626ed4ed13f8cdfd51205d8696ffe54f30734\",\n-    \"zh:246bcc449e9a92679fb30f3c0a77f05513886565e2dcc66b16c4486f51533064\",\n-    \"zh:24de3930625ac9014594d79bfa42d600eca65e9022b9668b54bfd0d924e21d14\",\n-    \"zh:2a22893a576ff6f268d9bf81cf4a56406f7ba79f77826f6df51ee787f6d2840a\",\n-    \"zh:2b27485e19c2aaa9f15f29c4cff46154a9720647610171e30fc6c18ddc42ec28\",\n-    \"zh:435f24ce1fb2b63f7f02aa3c84ac29c5757cd29ec4d297ed0618423387fe7bd4\",\n-    \"zh:7d99725923de5240ff8b34b5510569aa4ebdc0bdb27b7bac2aa911a8037a3893\",\n-    \"zh:7e3b5d0af3b7411dd9dc65ec9ab6caee8c191aee0fa7f20fc4f51716e67f50c0\",\n-    \"zh:da0af4552bef5a29b88f6a0718253f3bf71ce471c959816eb7602b0dadb469ca\",\n-  ]\n-}\n-\n provider \"registry.terraform.io/newrelic/newrelic\" {\n   version     = \"2.1.2\"\n   constraints = \"~> 2.1.1\"\n```\n\n----------------------------------------\n\nTITLE: Simple Ephemeral Variable Example in Terraform\nDESCRIPTION: Shows how to declare an ephemeral variable and use ephemeralasnull to convert it to null in an output.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/ephemeralasnull.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"example\" {\n  type      = string\n  default   = \"test\"\n  ephemeral = true\n}\n\n# This output returns null.\noutput \"example_output\" {\n  value       = ephemeralasnull(var.example)\n}\n```\n\n----------------------------------------\n\nTITLE: Using trimspace Function in Terraform\nDESCRIPTION: Example demonstrating the trimspace function which removes any space characters (including regular spaces, tabs, newlines, and other Unicode space characters) from the start and end of a given string.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/trimspace.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> trimspace(\"  hello\\n\\n\")\nhello\n```\n\n----------------------------------------\n\nTITLE: Using UUID Strings as Namespaces with uuidv5 in Terraform\nDESCRIPTION: Examples of using explicit UUID strings as namespaces with the uuidv5 function, including both standard RFC 4122 namespaces and custom UUID namespaces.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/uuidv5.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n> uuidv5(\"6ba7b810-9dad-11d1-80b4-00c04fd430c8\", \"www.terraform.io\")\na5008fae-b28c-5ba5-96cd-82b4c53552d6\n```\n\n----------------------------------------\n\nTITLE: Basic Can Function Usage Examples in Terraform\nDESCRIPTION: Demonstrates basic usage of the 'can' function with local variables, showing successful and failed attribute access scenarios.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/can.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> local.foo\n{\n  \"bar\" = \"baz\"\n}\n> can(local.foo.bar)\ntrue\n> can(local.foo.boop)\nfalse\n```\n\n----------------------------------------\n\nTITLE: Supplying Multiple Aliased Provider Configurations to a Module - Terraform HCL\nDESCRIPTION: This code demonstrates defining two aliased AWS provider configurations (usw1 and usw2) and passing both to a child module, assigning them to different provider configuration names ('src' and 'dst') expected by the module. Dependencies: Terraform, AWS provider. Key parameters: 'alias', 'region', and the mapping in the providers argument. The tunnel module will use aws.usw1 where it refers to aws.src, and aws.usw2 where it refers to aws.dst. Input: None directly. Output: The child module can manage infrastructure in multiple regions as required.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/meta-arguments/module-providers.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nprovider \"aws\" {\n  alias  = \"usw1\"\n  region = \"us-west-1\"\n}\n\nprovider \"aws\" {\n  alias  = \"usw2\"\n  region = \"us-west-2\"\n}\n\nmodule \"tunnel\" {\n  source    = \"./tunnel\"\n  providers = {\n    aws.src = aws.usw1\n    aws.dst = aws.usw2\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Querying Map Keys with Terraform keys Function - HCL\nDESCRIPTION: This example demonstrates how to use the keys function in Terraform's HCL to extract and list the keys from a specified map. The input map {a=1, c=2, d=3} is processed and the resulting list [\"a\", \"c\", \"d\"] is produced in lexicographical order. No external dependencies are required, and the function operates on any map provided as input, returning the keys as a list of strings.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/keys.mdx#2025-04-22_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\n> keys({a=1, c=2, d=3})\n[\n  \"a\",\n  \"c\",\n  \"d\",\n]\n```\n\n----------------------------------------\n\nTITLE: Computing Base64-encoded SHA512 Hash in Terraform\nDESCRIPTION: Demonstrates how to use the base64sha512 function to compute a SHA512 hash of a string and encode it in Base64 format. The function first encodes the input string as UTF-8, applies the SHA512 algorithm according to RFC 4634, and then encodes the result using the standard Base64 alphabet defined in RFC 4648 section 4.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/base64sha512.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> base64sha512(\"hello world\")\nMJ7MSJwS1utMxA9QyQLytNDtd+5RGnx6m808qG1M2G+YndNbxf9JlnDaNCVbRbDP2DDoH2Bdz33FVC6TrpzXbw==\n```\n\n----------------------------------------\n\nTITLE: cidrsubnet Function Examples\nDESCRIPTION: Demonstrates practical examples of using cidrsubnet function with different IP ranges and subnet configurations, showing both IPv4 and IPv6 examples.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/cidrsubnet.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> cidrsubnet(\"172.16.0.0/12\", 4, 2)\n172.18.0.0/16\n> cidrsubnet(\"10.1.2.0/24\", 4, 15)\n10.1.2.240/28\n> cidrsubnet(\"fd00:fd12:3456:7890::/56\", 16, 162)\nfd00:fd12:3456:7800:a200::/72\n```\n\n----------------------------------------\n\nTITLE: Deleting Terraform Workspace Command Shell\nDESCRIPTION: The example demonstrates how to use the `terraform workspace delete` command to delete a specified workspace in Terraform. Ensure the workspace is not the current one, and that it is not tracking resources unless the `-force` flag is used. Key options include `-force` to force deletion and `-lock=false` to avoid state lock. This is applicable only in a command-line environment.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/workspace/delete.mdx#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ terraform workspace delete example\nDeleted workspace \"example\".\n```\n\n----------------------------------------\n\nTITLE: Resulting Merged Configuration\nDESCRIPTION: The final configuration after merging the original and override files, showing how the AMI value is overridden while preserving other settings.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/files/override.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"web\" {\n  instance_type = \"t2.micro\"\n  ami           = \"foo\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Terraform Credentials Helper in HCL\nDESCRIPTION: This HCL snippet demonstrates how to configure a credentials helper named \"credstore\" within the Terraform CLI configuration file (`terraform.rc` or `terraform.d/*.tfrc`). It includes an `args` block to specify command-line arguments (`--host=credstore.example.com`) that Terraform will pass to the helper executable upon invocation.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/credentials-helpers.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ncredentials_helper \"credstore\" {\n  args = [\"--host=credstore.example.com\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Resource Configuration for Import in Terraform\nDESCRIPTION: Shows a simple resource configuration that must be defined before importing a resource, paired with its import block.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/import/index.mdx#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nimport {\n  to = aws_instance.example\n  id = \"i-abcd1234\"\n}\n\nresource \"aws_instance\" \"example\" {\n  name = \"renderer\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Fixed Object Collections in HCL\nDESCRIPTION: Demonstrates the recommended block syntax for defining a fixed collection of objects in Terraform configuration. Shows how to define multiple example blocks with different values.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/attr-as-blocks.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nexample {\n  foo = \"bar\"\n}\nexample {\n  foo = \"baz\"\n}\n```\n\n----------------------------------------\n\nTITLE: CSV Decoding with AWS Instance Creation using for_each\nDESCRIPTION: Complex example demonstrating how to use csvdecode with for_each meta-argument to create multiple AWS instances based on CSV data. The example includes CSV data definition and resource configuration with instance type and AMI specifications.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/csvdecode.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nlocals {\n  # We've included this inline to create a complete example, but in practice\n  # this is more likely to be loaded from a file using the \"file\" function.\n  csv_data = <<-CSV\n    local_id,instance_type,ami\n    foo1,t2.micro,ami-54d2a63b\n    foo2,t2.micro,ami-54d2a63b\n    foo3,t2.micro,ami-54d2a63b\n    bar1,m3.large,ami-54d2a63b\n  CSV\n\n  instances = csvdecode(local.csv_data)\n}\n\nresource \"aws_instance\" \"example\" {\n  for_each = tomap({ for inst in local.instances : inst.local_id => inst })\n\n  instance_type = each.value.instance_type\n  ami           = each.value.ami\n}\n```\n\n----------------------------------------\n\nTITLE: DynamoDB Table Resource Configuration\nDESCRIPTION: Example showing DynamoDB table configuration with replicas and computed attributes.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/tests/mocking.mdx#2025-04-22_snippet_12\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_dynamodb_table\" \"my_table\" {\n  name     = \"my_table\"\n  hash_key = \"key\"\n\n  attribute {\n    name = \"key\"\n    type = \"S\"\n  }\n\n  replica {\n    region_name = \"eu-west-2\"\n  }\n\n  replica {\n    region_name = \"us-east-1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the can Function in Terraform HCL\nDESCRIPTION: The `can` function in Terraform HCL is used to test the validity of an expression as a condition. It returns `true` if an expression evaluates successfully and `false` in case of an error. This can be useful for using functions like `regex` or type conversion functions in condition expressions to ensure they don't produce runtime errors. The function relies on the availability of the `can` method and any dependencies specified within the conditional expressions.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/custom-conditions.mdx#2025-04-22_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\ncondition = can(regex(\"^[a-z]+$\", var.name))\n```\n\nLANGUAGE: hcl\nCODE:\n```\ncondition = can(tostring(data.terraform_remote_state.example.outputs[\"name\"]))\n```\n\nLANGUAGE: hcl\nCODE:\n```\ncondition = can(tolist(data.terraform_remote_state.example.outputs[\"items\"]))\n```\n\nLANGUAGE: hcl\nCODE:\n```\ncondition = can(var.example.foo)\n```\n\nLANGUAGE: hcl\nCODE:\n```\ncondition = can(var.example[0])\n```\n\n----------------------------------------\n\nTITLE: Converting Strings to Lowercase in Terraform\nDESCRIPTION: Examples demonstrating the usage of the lower() function to convert strings to lowercase. The function handles both ASCII and Unicode characters following Unicode's definition of letter cases.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/lower.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> lower(\"HELLO\")\nhello\n> lower(\"ΓΕΙΑ ΣΟΥ\")\n\"γεια σου\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Passing Terraform Test Case (HCL)\nDESCRIPTION: This HCL code defines a Terraform test file (`example_1.tftest.hcl`) containing a single test run named `true_is_true`. It uses an `assert` block to verify that the `local.true` variable (defined in `main.tf`) correctly equals the string \"true\". This assertion is expected to pass.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/test.mdx#2025-04-22_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\n# example_1.tftest.hcl\nrun \"true_is_true\" {\n  assert {\n    condition     = local.true == \"true\"\n    error_message = \"local.true did not match expected value\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Passing a Managed aws_ami_copy Resource to a Terraform Module (HCL)\nDESCRIPTION: This snippet shows usage where a Terraform module receives an aws_ami_copy resource as its AMI input. The aws_ami_copy resource copies an existing AMI, and the resulting object is passed directly to the module. This promotes explicit infrastructure management and aligns with the module's object-type input expectation. The code assumes the aws_ami_copy resource is valid and will be created in the same apply operation.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/develop/composition.mdx#2025-04-22_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\n# In situations where the AMI will be directly managed:\n\nresource \"aws_ami_copy\" \"example\" {\n  name              = \"local-copy-of-ami\"\n  source_ami_id     = \"ami-abc123\"\n  source_ami_region = \"eu-west-1\"\n}\n\nmodule \"example\" {\n  source = \"./modules/example\"\n\n  ami = aws_ami_copy.example\n}\n\n```\n\n----------------------------------------\n\nTITLE: Lookup Function Syntax - HCL\nDESCRIPTION: Basic syntax for the lookup function that takes a map, key, and default value as parameters. The default parameter is technically optional but recommended since v0.7.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/lookup.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nlookup(map, key, default)\n```\n\n----------------------------------------\n\nTITLE: Explicit Type Conversion in Conditional Expressions\nDESCRIPTION: Example demonstrating explicit type conversion in a conditional expression using the tostring function for clarity and maintainability.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/conditionals.mdx#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nvar.example ? tostring(12) : \"hello\"\n```\n\n----------------------------------------\n\nTITLE: Calculate symmetric difference using set operations in HCL\nDESCRIPTION: This code snippet demonstrates how to compute the symmetric difference of two sets by utilizing set operations like `setsubtract` and `setunion`. It is a practical example where the difference between sets leads to a set containing elements not shared by both input sets.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/setsubtract.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n> setunion(setsubtract([\"a\", \"b\", \"c\"], [\"a\", \"c\", \"d\"]), setsubtract([\"a\", \"c\", \"d\"], [\"a\", \"b\", \"c\"]))\ntoset([\n  \"b\",\n  \"d\",\n])\n```\n\n----------------------------------------\n\nTITLE: Error Handling: Unsupported YAML Tags in Terraform\nDESCRIPTION: Illustrates the error when trying to decode YAML with unsupported tags, as yamldecode only supports specific YAML tags.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/yamldecode.mdx#2025-04-22_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nyamldecode(\"{a: !not-supported foo}\")\n```\n\n----------------------------------------\n\nTITLE: Calculating Unicode String Length with Terraform `length`\nDESCRIPTION: This example illustrates how the Terraform `length` function handles strings containing multi-byte Unicode characters. It correctly counts the number of grapheme clusters (user-perceived characters), resulting in a length of 2 for the string \"👾🕹️\", rather than counting bytes.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/length.mdx#2025-04-22_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\n> length(\"👾🕹️\")\n2\n```\n\n----------------------------------------\n\nTITLE: Calculating Intersection of String Sets in HCL\nDESCRIPTION: Demonstrates the use of `setintersection` with three sets containing string elements. The function identifies the single element \"b\" that is present in all three input sets `[\"a\", \"b\"]`, `[\"b\", \"c\"]`, and `[\"b\", \"d\"]` and returns it as a new set.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/setintersection.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> setintersection([\"a\", \"b\"], [\"b\", \"c\"], [\"b\", \"d\"])\n[\n  \"b\",\n]\n```\n\n----------------------------------------\n\nTITLE: Basic try Function Examples in Terraform\nDESCRIPTION: These examples demonstrate the basic usage of the try function for accessing object attributes. It shows how try returns the first successful expression or falls back to a default value if the attribute doesn't exist.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/try.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n> local.foo\n{\n  \"bar\" = \"baz\"\n}\n> try(local.foo.bar, \"fallback\")\nbaz\n> try(local.foo.boop, \"fallback\")\nfallback\n```\n\n----------------------------------------\n\nTITLE: Defining Variables and Outputs in Terraform HCL\nDESCRIPTION: Example showing the recommended format for defining variables and outputs in Terraform. Includes examples of regular variables, sensitive variables, and output values.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/style.mdx#2025-04-22_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"db_disk_size\" {\n  type        = number\n  description = \"Disk size for the API database\"\n  default     = 100\n}\n\nvariable \"db_password\" {\n  type        = string\n  description = \"Database password\"\n  sensitive   = true\n}\n\noutput \"web_public_ip\" {\n  description = \"Public IP of the web instance\"\n  value       = aws_instance.web.public_ip\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Terraform Remote State Data Source with Local Backend\nDESCRIPTION: This snippet shows how to configure a terraform_remote_state data source to read state from a local backend. The 'path' parameter points to an existing state file, potentially in a parent directory using path.module reference.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/local.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"terraform_remote_state\" \"foo\" {\n  backend = \"local\"\n\n  config = {\n    path = \"${path.module}/../../terraform.tfstate\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Backend with Azure CLI Authentication\nDESCRIPTION: Configuration example using Azure CLI authentication for Azure backend. Requires a pre-authenticated Azure CLI session.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/azurerm.mdx#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  backend \"azurerm\" {\n    use_cli              = true                                    # Can also be set via `ARM_USE_CLI` environment variable.\n    use_azuread_auth     = true                                    # Can also be set via `ARM_USE_AZUREAD` environment variable.\n    tenant_id            = \"00000000-0000-0000-0000-000000000000\"  # Can also be set via `ARM_TENANT_ID` environment variable. Azure CLI will fallback to use the connected tenant ID if not supplied.\n    storage_account_name = \"abcd1234\"                              # Can be passed via `-backend-config=`\"storage_account_name=<storage account name>\"` in the `init` command.\n    container_name       = \"tfstate\"                               # Can be passed via `-backend-config=`\"container_name=<container name>\"` in the `init` command.\n    key                  = \"prod.terraform.tfstate\"                # Can be passed via `-backend-config=`\"key=<blob key name>\"` in the `init` command.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Duplicates from a List with distinct Function in Terraform HCL\nDESCRIPTION: This code snippet demonstrates how to use the distinct function in Terraform's HashiCorp Configuration Language (HCL) to eliminate duplicate values from an input list while preserving the original order of the first occurrences. No additional dependencies are required beyond Terraform with HCL support. The input is a list containing repeated string elements, and the output is a new list with only unique strings, ordered as they first appear.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/distinct.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> distinct([\"a\", \"b\", \"a\", \"c\", \"d\", \"b\"])\n[\n  \"a\",\n  \"b\",\n  \"c\",\n  \"d\",\n]\n```\n\n----------------------------------------\n\nTITLE: Showing a Module Resource in Terraform State\nDESCRIPTION: This snippet shows how to query the attributes of a Terraform resource within a module using the `terraform state show` command. The specific path to the resource within the module must be provided.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/state/show.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ terraform state show 'module.foo.packet_device.worker'\n```\n\n----------------------------------------\n\nTITLE: Defining Stack Input Variables for Dynamic Deployment in HCL\nDESCRIPTION: This HCL code defines input variables within a `variables.tfstack.hcl` file for a Terraform Stack. It declares a set of strings variable `regions` to specify target deployment regions, and string variables `identity_token` (marked ephemeral) and `role_arn` for AWS OIDC authentication configuration.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/use-cases.mdx#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\n# variables.tfstack.hcl\n\n# The regions variable is where we specify each region we want to deploy this \n# Stack's infrastructure within. \nvariable \"regions\" {\n    type = set(string)\n}\n\n# The identity_token and role_arn are for configuring this Stack to\n# authenticate with AWS using OIDC.\nvariable \"identity_token\" {\n    type      = string\n    ephemeral = true\n}\n\nvariable \"role_arn\" {\n    type = string\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Identity Token in Terraform Stacks\nDESCRIPTION: Defines an identity token block for AWS authentication in Terraform Stacks. This simple configuration specifies the audience for the JWT token that will be used for OIDC-based authentication.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/deploy/authenticate.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nidentity_token \"aws\" {\n    audience = [\"aws.workload.identity\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Multiple AWS Subnets from All Network/Subnet Combinations - Terraform HCL\nDESCRIPTION: This snippet illustrates the use of for_each to project a list of network-subnet combinations into a map for resource instantiation. Each key is a unique combination of network and subnet keys. Each aws_subnet resource refers to its network, subnet attributes, and calculates its CIDR block. Dependencies: local.network_subnets, aws_vpc.example, AWS provider. Outputs: Multiple aws_subnet resources with distinct configurations per key.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/setproduct.mdx#2025-04-22_snippet_7\n\nLANGUAGE: HCL\nCODE:\n```\nresource \"aws_subnet\" \"example\" {\n  # local.network_subnets is a list, so project it into a map\n  # where each key is unique. Combine the network and subnet keys to\n  # produce a single unique key per instance.\n  for_each = tomap({\n    for subnet in local.network_subnets : \"${subnet.network_key}.${subnet.subnet_key}\" => subnet\n  })\n\n  vpc_id            = each.value.network_id\n  availability_zone = each.value.subnet_key\n  cidr_block        = each.value.cidr_block\n}\n```\n\n----------------------------------------\n\nTITLE: Combining String Lists with Concat in Terraform\nDESCRIPTION: Example demonstrating how to combine two string lists using the concat function. Shows combining lists containing empty strings.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/concat.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nconcat([\"a\", \"\"], [\"b\", \"c\"])\n[\n  \"a\",\n  \"\",\n  \"b\",\n  \"c\",\n]\n```\n\n----------------------------------------\n\nTITLE: External Backend Configuration File for Consul\nDESCRIPTION: Example of an external Consul backend configuration file showing top-level attributes without terraform or backend wrapper blocks. This file can be referenced during terraform init.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/index.mdx#2025-04-22_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\naddress = \"demo.consul.io\"\npath    = \"example_app/terraform_state\"\nscheme  = \"https\"\n```\n\n----------------------------------------\n\nTITLE: Output Value Declaration with Publish Output Block\nDESCRIPTION: The 'publish_output' block is employed to export values from a current Stack for use in other project Stacks. This requires Terraform version 'terraform_1.10.0-alpha20241009' or higher. It defines 'description' and 'value', where 'value' is the deployment attribute to output. This allows sharing of key outputs across Terraform Stacks.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/reference/tfdeploy.mdx#2025-04-22_snippet_10\n\nLANGUAGE: hcl\nCODE:\n```\npublish_output \"output_name\" {\n  description = \"Description of the purpose of this output\"\n  value       = deployment.deployment_name.some_value\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Identity Token for OIDC Authentication\nDESCRIPTION: This snippet shows how to configure an identity token block for generating a JWT to be used in OIDC authentication.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/reference/tfdeploy.mdx#2025-04-22_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nidentity_token \"unique_to_stack_name\" {\n  audience = [\"audience this token is intended for\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Using filesha256 for File Hashing in Terraform HCL\nDESCRIPTION: This snippet demonstrates the syntax for using the filesha256 function to compute the SHA-256 hash of a file by specifying its path. The parameter path should be the relative or absolute path to the desired file. The function outputs a string containing the file's SHA-256 hash encoded in hexadecimal. There are no required dependencies beyond Terraform itself, and the function works for both text and binary files.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/filesha256.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nfilesha256(path)\n```\n\n----------------------------------------\n\nTITLE: Referencing All Instances of a Counted Resource - Terraform Resource Addressing\nDESCRIPTION: This snippet shows how to reference all instances of a resource that has multiple instances via count. The address aws_instance.web, without an index, selects all corresponding resource instances created by the count meta-argument. Useful for bulk operations or output mapping. No additional parameters required.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/state/resource-addressing.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\naws_instance.web\n```\n\n----------------------------------------\n\nTITLE: Basic Templatefile Function Syntax in Terraform HCL\nDESCRIPTION: Demonstrates the basic syntax for the templatefile function, which takes a file path and a variables object as parameters.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/templatefile.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ntemplatefile(path, vars)\n```\n\n----------------------------------------\n\nTITLE: Configuring COS Backend for Terraform State\nDESCRIPTION: Basic configuration example for setting up Terraform to store state in Tencent Cloud Object Storage (COS). Specifies region, bucket, and prefix parameters.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/cos.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  backend \"cos\" {\n    region = \"ap-guangzhou\"\n    bucket = \"bucket-for-terraform-state-1258798060\"\n    prefix = \"terraform/state\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Output Option for terraform apply (CLI)\nDESCRIPTION: The `-json` option enables machine-readable JSON output for the apply process. It implies `-input=false` and requires either `-auto-approve` or a saved plan file.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/apply.mdx#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n-json\n```\n\n----------------------------------------\n\nTITLE: Using Filesha512 in Terraform Output Block\nDESCRIPTION: Demonstrates how to use the filesha512 function within a Terraform output block to expose the hash value.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/filesha512.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\noutput \"file_hash\" {\n  value = filesha512(\"example.txt\")\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Terraform Resource Configuration\nDESCRIPTION: Example of a basic AWS instance resource configuration in the main configuration file.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/files/override.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"web\" {\n  instance_type = \"t2.micro\"\n  ami           = \"ami-408c7f28\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Ceil Function in Terraform\nDESCRIPTION: Examples demonstrating the usage of ceil() function in Terraform to round numbers up to the nearest integer. Shows behavior with both whole numbers and decimal values.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/ceil.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> ceil(5)\n5\n> ceil(5.1)\n6\n```\n\n----------------------------------------\n\nTITLE: Basic Map Merging in Terraform HCL\nDESCRIPTION: Demonstrates merging two maps with a duplicate key 'c', where the value from the second map takes precedence.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/merge.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nmerge({a=\"b\", c=\"d\"}, {e=\"f\", c=\"z\"})\n```\n\n----------------------------------------\n\nTITLE: S3 Bucket IAM Permissions for Terraform State\nDESCRIPTION: AWS IAM policy statement for S3 bucket permissions required for Terraform state operations including listing, getting, and putting objects.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/s3.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": \"s3:ListBucket\",\n      \"Resource\": \"arn:aws:s3:::mybucket\",\n      \"Condition\": {\n        \"StringEquals\": {\n          \"s3:prefix\": \"path/to/my/key\"\n        }\n      }\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\"s3:GetObject\", \"s3:PutObject\"],\n      \"Resource\": [\n        \"arn:aws:s3:::mybucket/path/to/my/key\"\n      ]\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\"s3:GetObject\", \"s3:PutObject\", \"s3:DeleteObject\"],\n      \"Resource\": [\n        \"arn:aws:s3:::mybucket/path/to/my/key.tflock\"\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Disable Locking Option for terraform apply (CLI)\nDESCRIPTION: The `-lock=false` option prevents Terraform from acquiring a state lock during the apply operation. This is potentially dangerous if concurrent operations might occur.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/apply.mdx#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n-lock=false\n```\n\n----------------------------------------\n\nTITLE: Auto-Approving All Planning Operations in Terraform\nDESCRIPTION: This example demonstrates how to use the 'context' variable to create an 'auto_approve' rule that automatically approves all planning operations. It checks if the operation is a plan and not an apply.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/deploy/conditions.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\norchestrate \"auto_approve\" \"allow_plans\" {\n    check {\n        # Check that the operation is a plan\n        condition = context.operation == \"plan\"\n        reason = \"Apply operations need manual approval.\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Main Configuration for S3 Object Creation\nDESCRIPTION: Defines the main Terraform configuration for creating S3 objects in an existing bucket. This module is the primary subject of the test.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/tests/index.mdx#2025-04-22_snippet_12\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"bucket\" {\n  type = string\n}\n\nvariable \"files\" {\n  type = map(string)\n}\n\ndata \"aws_s3_bucket\" \"bucket\" {\n  bucket = var.bucket\n}\n\nresource \"aws_s3_object\" \"object\" {\n  for_each = var.files\n\n  bucket = data.aws_s3_bucket.bucket.id\n  key = each.key\n  source = each.value\n\n  etag = filemd5(each.value)\n}\n```\n\n----------------------------------------\n\nTITLE: Reversing Strings with Terraform strrev Function - HCL\nDESCRIPTION: The strrev function reverses the characters in a given string, respecting Unicode grapheme cluster boundaries. It is used in HashiCorp Configuration Language (HCL) for manipulating string data. The function takes a single string parameter and returns a new string with characters in reverse order. No additional dependencies are required, and the input must be a valid string.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/strrev.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nstrrev(string)\n```\n\n----------------------------------------\n\nTITLE: Setting Complex-typed Environment Variable for Terraform (Shell)\nDESCRIPTION: Shows how to set a complex-typed Terraform variable (in this case, a list) using an environment variable in a Unix-style shell. This requires careful attention to string escaping rules.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/values/variables.mdx#2025-04-22_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n$ export TF_VAR_availability_zone_names='[\"us-west-1b\",\"us-west-1d\"]'\n```\n\n----------------------------------------\n\nTITLE: Configuring an Orchestration Rule in HCP Terraform\nDESCRIPTION: This snippet demonstrates how to define an orchestration rule for auto-approving plans based on specific conditions.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/reference/tfdeploy.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\norchestrate \"auto_approve\" \"name_of_check\" {\n  check {\n    condition = <the condition that HCP Terraform evaluates>\n    reason =\"Provide the reason why this check failed.\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Deployment Authentication with Identity Token in HCL\nDESCRIPTION: This snippet demonstrates how to use an identity_token block for AWS authentication and incorporate it into a deployment configuration.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/deploy/config.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n# deployments.tfdeploy.hcl\n\nidentity_token \"aws\" {\n  audience = [\"aws.workload.identity\"]\n}\n\ndeployment \"staging\" {\n  inputs = {\n    aws_region = \"eu-west-1\"\n    role_arn   = \"arn:aws:iam::123456789101:role/my-oidc-role\"\n    aws_token  = identity_token.aws.jwt\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Chomp Function for Newline Removal in Terraform\nDESCRIPTION: Examples demonstrating how the chomp function removes different types of newline characters (\\n, \\r\\n) from the end of strings. The function preserves the original string content while removing only the trailing newlines.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/chomp.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> chomp(\"hello\\n\")\nhello\n```\n\nLANGUAGE: hcl\nCODE:\n```\n> chomp(\"hello\\r\\n\")\nhello\n```\n\nLANGUAGE: hcl\nCODE:\n```\n> chomp(\"hello\\n\\n\")\nhello\n```\n\n----------------------------------------\n\nTITLE: Executing Terraform Scripts with SSH\nDESCRIPTION: Illustrates how to configure a Terraform provisioner connection to execute scripts on a remote system using SSH and SCP. The script path can include `%RAND%` for unique file naming. As of Terraform v1.1, the script path is correctly quoted to prevent shell expansion vulnerabilities present in earlier versions.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/resources/provisioners/connection.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nconnection {\n  type = \"ssh\"\n  # ...\n  script_path = \"terraform_provisioner_%RAND%.sh\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic String Formatting Examples in HCL\nDESCRIPTION: Demonstrates basic string and number formatting using the format function.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/format.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> format(\"Hello, %s!\", \"Ander\")\nHello, Ander!\n> format(\"There are %d lights\", 4)\nThere are 4 lights\n```\n\n----------------------------------------\n\nTITLE: Creating Partial Backend Configuration with Empty Values\nDESCRIPTION: Example of a partial backend configuration in the main Terraform file, with keys set to empty values. These values will be populated from a separate configuration file or command-line arguments.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n# state.tf\nterraform {\n  backend \"s3\" {\n    bucket = \"\" \n    key    = \"\"\n    region = \"\"\n    profile= \"\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using 'any' Type Constraint with AWS S3 Object in Terraform\nDESCRIPTION: Demonstrates a valid use case for the 'any' type constraint when passing data directly to a resource without inspection.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/type-constraints.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"settings\" {\n  type = any\n}\n\nresource \"aws_s3_object\" \"example\" {\n  # ...\n\n  # This is a reasonable use of \"any\" because this module\n  # just writes any given data to S3 as JSON, without\n  # inspecting it further or applying any constraints\n  # to its type or value.\n  content = jsonencode(var.settings)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Loader Module for S3 Object Verification\nDESCRIPTION: Defines a loader module that retrieves S3 objects for verification. This module is used to validate the results of the main configuration.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/tests/index.mdx#2025-04-22_snippet_14\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"bucket\" {\n  type = string\n}\n\ndata \"aws_s3_objects\" \"objects\" {\n  bucket = var.bucket\n}\n```\n\n----------------------------------------\n\nTITLE: Decoding Base64 String in Terraform\nDESCRIPTION: This example demonstrates how to use the base64decode function to decode a Base64 encoded string. The function takes a Base64 encoded string as input and returns the original decoded string.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/base64decode.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> base64decode(\"SGVsbG8gV29ybGQ=\")\n```\n\n----------------------------------------\n\nTITLE: Normalizing Data with try Function in Terraform HCL\nDESCRIPTION: This snippet demonstrates using the try function to normalize data structures retrieved from external systems in YAML format. It creates predictable attributes that can be safely used elsewhere in the configuration.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/try.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nlocals {\n  raw_value = yamldecode(file(\"${path.module}/example.yaml\"))\n  normalized_value = {\n    name   = tostring(try(local.raw_value.name, null))\n    groups = try(local.raw_value.groups, [])\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Decoding JSON Object Strings Using Terraform jsondecode - HCL\nDESCRIPTION: This snippet demonstrates using the jsondecode function to convert a JSON string representing an object into a Terraform map. The function takes a JSON string with key-value pairs as input and returns a Terraform object with matching attribute names and values. No external dependencies are required, but the input must be a valid JSON string; improper formatting will result in errors.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/jsondecode.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> jsondecode(\"{\\\"hello\\\": \\\"world\\\"}\")\n{\n  \"hello\" = \"world\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic nonsensitive Function Usage with SHA256\nDESCRIPTION: Demonstrates using nonsensitive to output a hash of a sensitive value, showing how to safely expose derived non-sensitive data.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/nonsensitive.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\noutput \"sensitive_example_hash\" {\n  value = nonsensitive(sha256(var.sensitive_example))\n}\n```\n\n----------------------------------------\n\nTITLE: Targeting Specific Resources in terraform plan (CLI Option)\nDESCRIPTION: Details the `-target=ADDRESS` option. This flag restricts Terraform's planning efforts to only the resource instances matching the specified address and their dependencies. It is intended for exceptional circumstances like error recovery or working around limitations, not for routine use.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/plan.mdx#2025-04-22_snippet_6\n\nLANGUAGE: cli\nCODE:\n```\n-target=ADDRESS\n```\n\n----------------------------------------\n\nTITLE: Using the Terraform Logout Command in HCL\nDESCRIPTION: The `terraform logout` command is used to remove stored credentials from previous logins. It can be used with an optional hostname parameter, defaulting to HCP Terraform if not specified.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/logout.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform logout [hostname]\n```\n\n----------------------------------------\n\nTITLE: Filtering List Elements with Terraform Compact Function\nDESCRIPTION: Demonstrates how to use the compact function to remove null and empty string elements from a list. The function takes a list of strings as input and returns a new list containing only non-empty, non-null values.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/compact.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ncompact([\"a\", \"\", \"b\", null, \"c\"])\n```\n\n----------------------------------------\n\nTITLE: Multiple Provider Configuration Test\nDESCRIPTION: Demonstrates configuration of multiple AWS providers with aliases in test files\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/tests/index.mdx#2025-04-22_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\n# main.tf\n\nterraform {\n  required_providers {\n    aws = {\n      source                = \"hashicorp/aws\"\n      configuration_aliases = [aws.secondary]\n    }\n  }\n}\n\nvariable \"bucket_prefix\" {\n  default = \"test\"\n  type    = string\n}\n\nresource \"aws_s3_bucket\" \"primary_bucket\" {\n  bucket = \"${var.bucket_prefix}-primary\"\n}\n\nresource \"aws_s3_bucket\" \"secondary_bucket\" {\n  provider = aws.secondary\n  bucket   = \"${var.bucket_prefix}-secondary\"\n}\n```\n\nLANGUAGE: hcl\nCODE:\n```\n# customised_providers.tftest.hcl\n\nprovider \"aws\" {\n  region = \"us-east-1\"\n}\n\nprovider \"aws\" {\n  alias  = \"secondary\"\n  region = \"eu-central-1\"\n}\n\nrun \"providers\" {\n\n  command = plan\n\n  assert {\n    condition     = aws_s3_bucket.primary_bucket.bucket == \"test-primary\"\n    error_message = \"invalid value for primary S3 bucket\"\n  }\n\n  assert {\n    condition     = aws_s3_bucket.secondary_bucket.bucket == \"test-secondary\"\n    error_message = \"invalid value for secondary S3 bucket\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using trimprefix Function to Remove Prefix in Terraform\nDESCRIPTION: This snippet demonstrates how to use the trimprefix function to remove a specified prefix from the beginning of a string. It shows successful prefix removal and cases where the string remains unchanged.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/trimprefix.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> trimprefix(\"helloworld\", \"hello\")\nworld\n```\n\nLANGUAGE: hcl\nCODE:\n```\n> trimprefix(\"helloworld\", \"cat\")\nhelloworld\n```\n\nLANGUAGE: hcl\nCODE:\n```\n> trimprefix(\"--hello\", \"-\")\n-hello\n```\n\n----------------------------------------\n\nTITLE: Basic EC2 Instance Conditional Creation with One Function\nDESCRIPTION: Demonstrates using the 'one' function with AWS EC2 instance creation, conditionally creating an instance and returning its IP address or null.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/one.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"include_ec2_instance\" {\n  type    = bool\n  default = true\n}\n\nresource \"aws_instance\" \"example\" {\n  count = var.include_ec2_instance ? 1 : 0\n\n  # (other resource arguments...)\n}\n\noutput \"instance_ip_address\" {\n  value = one(aws_instance.example[*].private_ip)\n}\n```\n\n----------------------------------------\n\nTITLE: Testing with a Mocked AWS Provider - Terraform HCL\nDESCRIPTION: This HCL test file snippet uses the 'mock_provider' block to simulate the AWS provider's responses without needing real AWS credentials. It demonstrates initializing a mocked provider, setting a test variable, and asserting that the mocked AWS S3 bucket resource's 'bucket' attribute matches the expected value. The snippet is to be used with the 'terraform test' framework, expects the mock_provider block for AWS, and validates resource configuration within an isolated test context.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/tests/mocking.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n# bucket_name.tftest.hcl\n\nmock_provider \"aws\" {}\n\nrun \"sets_correct_name\" {\n  variables {\n    bucket_name = \"my-bucket-name\"\n  }\n\n  assert {\n    condition     = aws_s3_bucket.my_bucket.bucket == \"my-bucket-name\"\n    error_message = \"incorrect bucket name\"\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding Duration to Timestamp with timeadd in HCL\nDESCRIPTION: This example demonstrates how to use the `timeadd` function in HCL to add 10 minutes (\"10m\") to the timestamp \"2024-08-16T12:45:05Z\". The expected output shown in the comment is \"2024-08-16T12:55:05Z\". It requires a valid RFC 3339 timestamp and a duration string as input.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/timeadd.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> timeadd(\"2024-08-16T12:45:05Z\", \"10m\")\n\"2024-08-16T12:55:05Z\"\n```\n\n----------------------------------------\n\nTITLE: Enabling count for a Module Call in Terraform\nDESCRIPTION: Demonstrates how to add a count meta-argument to a module call and use a moved block to preserve existing resources. This allows for creating multiple instances of a module while maintaining backward compatibility.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/develop/refactoring.mdx#2025-04-22_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"a\" {\n  source = \"../modules/example\"\n  count  = 3\n\n  # (module arguments)\n}\n\nmoved {\n  from = module.a\n  to   = module.a[2]\n}\n```\n\n----------------------------------------\n\nTITLE: Using tobool Function for Boolean Conversion in HCL\nDESCRIPTION: This snippet demonstrates the usage of the `tobool` function in Terraform HCL. It shows successful conversions for boolean `true`, the string \"true\", and `null`. It also illustrates error cases when attempting to convert the string \"no\" or the number 1, as only boolean values, `null`, and the exact strings \"true\" or \"false\" are permissible inputs.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/tobool.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> tobool(true)\ntrue\n> tobool(\"true\")\ntrue\n> tobool(null)\nnull\n> tobool(\"no\")\nError: Invalid function argument\n\nInvalid value for \"v\" parameter: cannot convert \"no\" to bool: only the strings\n\"true\" or \"false\" are allowed.\n\n> tobool(1)\nError: Invalid function argument\n\nInvalid value for \"v\" parameter: cannot convert number to bool.\n```\n\n----------------------------------------\n\nTITLE: Practical Example of abs Function in Terraform HCL\nDESCRIPTION: Shows a practical use case of the abs function in Terraform. It defines a variable with a negative value and uses abs to output its absolute value.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/abs.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"num\" {\n  default = -10\n}\n\noutput \"absolute_value\" {\n  value = abs(var.num)\n}\n```\n\n----------------------------------------\n\nTITLE: CIDR Host Function Examples\nDESCRIPTION: Examples demonstrating cidrhost function usage with different network prefixes and host numbers for both IPv4 and IPv6 addresses.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/cidrhost.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> cidrhost(\"10.12.112.0/20\", 16)\n10.12.112.16\n> cidrhost(\"10.12.112.0/20\", 268)\n10.12.113.12\n> cidrhost(\"fd00:fd12:3456:7890:00a2::/72\", 34)\nfd00:fd12:3456:7890::22\n```\n\n----------------------------------------\n\nTITLE: Enabling Deferred Actions Experiment with terraform plan (Shell)\nDESCRIPTION: Demonstrates enabling the experimental \"deferred actions\" feature using the `-allow-deferral` option with the `terraform plan` command. This allows `count` and `for_each` arguments in modules, resources, and data blocks to handle unknown values during planning, offering more flexibility. The feature is under active development and not yet ready for general use.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform plan -allow-deferral\n```\n\n----------------------------------------\n\nTITLE: Input Variable Validation in Terraform HCL\nDESCRIPTION: Demonstrates how to use input variable validation to enforce additional rules beyond type checking. This example ensures that the web instance count is greater than 1.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/style.mdx#2025-04-22_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"web_instance_count\" {\n  type        = number\n  description = \"Number of web instances to deploy. This application requires at least two instances.\"\n\n  validation {\n    condition     = var.web_instance_count > 1\n    error_message = \"This application requires at least two web instances.\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using coalescelist in Terraform\nDESCRIPTION: The coalescelist function in Terraform takes any number of list arguments and returns the first non-empty list. It is useful for selecting the first available set of values from multiple lists. The function can also expand an outer list using the '...' syntax to apply the operation across multiple lists. It's important to ensure the lists are compatible in type and structure.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/coalescelist.mdx#2025-04-22_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\n> coalescelist([\"a\", \"b\"], [\"c\", \"d\"])\n[\n  \"a\",\n  \"b\",\n]\n```\n\nLANGUAGE: Terraform\nCODE:\n```\n> coalescelist([], [\"c\", \"d\"])\n[\n  \"c\",\n  \"d\",\n]\n```\n\nLANGUAGE: Terraform\nCODE:\n```\n> coalescelist([[], [\"c\", \"d\"]]...)\n[\n  \"c\",\n  \"d\",\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple AWS Providers in Terraform Test\nDESCRIPTION: Defines multiple AWS provider configurations with different regions for testing purposes. This setup allows testing with different AWS regions in the same test file.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/tests/index.mdx#2025-04-22_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\nprovider \"aws\" {\n  region = \"us-east-1\"\n}\n\nprovider \"aws\" {\n  alias  = \"secondary\"\n  region = \"eu-central-1\"\n}\n\nprovider \"aws\" {\n  alias  = \"tertiary\"\n  region = \"eu-west-2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing AWS Instance into Resource\nDESCRIPTION: This command imports an AWS EC2 instance with ID 'i-abcd1234' into the Terraform resource named 'aws_instance.foo'.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/import.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ terraform import aws_instance.foo i-abcd1234\n```\n\n----------------------------------------\n\nTITLE: Formatting Terraform Stack Configuration Files\nDESCRIPTION: Command to format Terraform Stack configuration files (.tfstack.hcl and .tfdeploy.hcl) to match Terraform's canonical format and style.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/reference/tfstacks-cli.mdx#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ tfstacks fmt [options] [target]\n```\n\n----------------------------------------\n\nTITLE: Data-only Module Example in Terraform\nDESCRIPTION: This HCL example outlines a data-only module to manage shared network configurations in AWS, enabling reusability and abstraction through data retrieval rather than creation.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/develop/composition.mdx#2025-04-22_snippet_11\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"network\" {\n  source = \"./modules/join-network-aws\"\n\n  environment = \"production\"\n}\n\nmodule \"k8s_cluster\" {\n  source = \"./modules/aws-k8s-cluster\"\n\n  subnet_ids = module.network.aws_subnet_ids\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Provider Lock File for Terraform Stack\nDESCRIPTION: This command uses the Terraform Stacks CLI to generate a provider lock file, which is required for running a Stack.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/create/declare-providers.mdx#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ tfstacks providers lock\n```\n\n----------------------------------------\n\nTITLE: Querying Index in a List using index Function - Terraform HCL\nDESCRIPTION: This snippet shows the syntax for using the index function to retrieve the zero-based index of a value within a list in Terraform HCL. The function is used as index(list, value), where list is the collection to search and value is the item to find. It returns the index of the given value or an error if the value is not in the list. No additional dependencies are required, but it assumes both arguments are valid (i.e., 'list' is a valid list and 'value' is a supported type for comparison).\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/index_function.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nindex(list, value)\n```\n\n----------------------------------------\n\nTITLE: Defining Syntax for the timeadd Function in HCL\nDESCRIPTION: This snippet illustrates the basic syntax for using the `timeadd` function in HCL. It takes two string arguments: `timestamp` (in RFC 3339 format) and `duration` (a number followed by a time unit like 'h', 'm', 's'). The function returns a new timestamp string representing the original timestamp adjusted by the duration.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/timeadd.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ntimeadd(timestamp, duration)\n```\n\n----------------------------------------\n\nTITLE: Configuring Parallel Test Execution with the Test Block in HCL\nDESCRIPTION: This HCL snippet demonstrates the use of the optional `test` block within a `.tftest.hcl` file. By setting the `parallel` attribute to `true`, it configures the Terraform test framework to execute all eligible `run` blocks within this test file concurrently, potentially speeding up test execution.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/tests/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n# with_config.tftest.hcl\ntest {\n  parallel = true\n}\n```\n\n----------------------------------------\n\nTITLE: Deduplicating List with toset in Terraform\nDESCRIPTION: This example illustrates how toset removes duplicate values and disregards the original order when converting a list to a set.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/toset.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n> toset([\"c\", \"b\", \"b\"])\n[\n  \"b\",\n  \"c\",\n]\n```\n\n----------------------------------------\n\nTITLE: Extracting Substring with Positive Offset and Length in HCL\nDESCRIPTION: Demonstrates using the `substr` function in HCL to extract a substring ('ello') from 'hello world' starting at offset 1 (the second character) with a maximum length of 4 characters.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/substr.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> substr(\"hello world\", 1, 4)\nello\n```\n\n----------------------------------------\n\nTITLE: Indented Heredoc in Terraform\nDESCRIPTION: Example of indented heredoc syntax using <<- for better formatting in nested blocks.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/strings.mdx#2025-04-22_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nblock {\n  value = <<-EOT\n  hello\n    world\n  EOT\n}\n```\n\n----------------------------------------\n\nTITLE: Using the 'values' Function in Terraform to Extract Map Values\nDESCRIPTION: This example demonstrates how to use the 'values' function to extract all values from a map into a list. The values are returned in lexicographical order based on their corresponding keys.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/values.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nvalues({a=3, c=2, d=1})\n```\n\n----------------------------------------\n\nTITLE: Converting List to Set for Resource Creation in Terraform HCL\nDESCRIPTION: This HCL snippet demonstrates converting a list of subnet ID strings into a set using the `toset` function within a `locals` block. This resulting set (`local.subnet_ids`) is then used with the `for_each` meta-argument in an `aws_instance` resource block to create multiple EC2 instances, one for each unique subnet ID. The `each.key` attribute references the current set element (subnet ID) within the resource configuration.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/meta-arguments/for_each.mdx#2025-04-22_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nlocals {\n  subnet_ids = toset([\n    \"subnet-abcdef\",\n    \"subnet-012345\",\n  ])\n}\n\nresource \"aws_instance\" \"server\" {\n  for_each = local.subnet_ids\n\n  ami           = \"ami-a1b2c3d4\"\n  instance_type = \"t2.micro\"\n  subnet_id     = each.key # note: each.key and each.value are the same for a set\n\n  tags = {\n    Name = \"Server ${each.key}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the issensitive Function in Terraform HCL\nDESCRIPTION: These examples illustrate the usage of the `issensitive` function in the Terraform console. The first example shows it returning `true` for a value wrapped in the `sensitive` function. The second example returns `false` for a regular string. The third example shows it returning `true` when checking a variable that has been declared with `sensitive = true`.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/issensitive.mdx#2025-04-22_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\n> issensitive(sensitive(\"secret\"))\ntrue\n> issensitive(\"hello\")\nfalse\n> issensitive(var.my-var-with-sensitive-set-to-true)\ntrue\n```\n\n----------------------------------------\n\nTITLE: Subtracting Duration from Timestamp with timeadd in HCL\nDESCRIPTION: This example shows how to subtract 10 minutes from the timestamp \"2024-08-16T12:45:05Z\" using the `timeadd` function in HCL by providing a negative duration (\"-10m\"). The expected result shown in the comment is \"2024-08-16T12:35:05Z\". This relies on the function's ability to handle negative duration strings.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/timeadd.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n> timeadd(\"2024-08-16T12:45:05Z\", \"-10m\")\n\"2024-08-16T12:35:05Z\"\n```\n\n----------------------------------------\n\nTITLE: Scripting Terraform JSON Output with jq Filtering via Shell\nDESCRIPTION: This shell example demonstrates using “terraform output -json” to emit machine-readable output, piped through jq to select the first element of a list. The -json flag outputs all values in strict JSON, supporting reliable scripting and automation by enabling tools like jq or other JSON consumers. The command assumes jq is installed on the system.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/output.mdx#2025-04-22_snippet_5\n\nLANGUAGE: shellsession\nCODE:\n```\n$ terraform output -json instance_ips | jq -r '.[0]'\n54.43.114.12\n\n```\n\n----------------------------------------\n\nTITLE: Using the title Function in Terraform\nDESCRIPTION: Demonstrates the 'title' function which converts the first letter of each word in a string to uppercase. The function follows Unicode's definition of letters and case conversion.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/title.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> title(\"hello world\")\nHello World\n```\n\n----------------------------------------\n\nTITLE: Demonstrating abspath Function Usage in Terraform\nDESCRIPTION: This snippet shows how to use the abspath function in Terraform. It takes the path.root variable and converts it to an absolute path, returning the full filesystem path to the root of the Terraform configuration.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/abspath.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> abspath(path.root)\n/home/user/some/terraform/root\n```\n\n----------------------------------------\n\nTITLE: Replace Function Examples in Terraform HCL\nDESCRIPTION: Examples demonstrating both simple string replacement and regular expression-based replacement with the replace function.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/replace.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> replace(\"1 + 2 + 3\", \"+\", \"-\")\n1 - 2 - 3\n\n> replace(\"hello world\", \"/w.*d/\", \"everybody\")\nhello everybody\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Token for HCP Terraform\nDESCRIPTION: Specifies an authentication token for HCP Terraform, though it's recommended to use the terraform login command or CLI configuration file instead of hardcoding the token in configuration.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/terraform.mdx#2025-04-22_snippet_10\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  cloud  {\n    token = \"<token>\"\n  }\n  # . . .\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Minimum Value Using Terraform\nDESCRIPTION: This code snippet demonstrates using the \\\"min\\\" function in Terraform to find and return the smallest number from a set of numbers provided as input arguments. Numbers can be passed individually or as a list expanded using \\\"...\\\". The function directly returns the smallest value as output.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/min.mdx#2025-04-22_snippet_0\n\nLANGUAGE: \nCODE:\n```\n> min(12, 54, 3)\n3\n```\n\nLANGUAGE: \nCODE:\n```\n> min([12, 54, 3]...)\n3\n```\n\n----------------------------------------\n\nTITLE: Basic Syntax for templatestring Function in HCL\nDESCRIPTION: Shows the general syntax for invoking the templatestring function in Terraform. The first argument must be a reference to an object defined in the module, and subsequent arguments specify variables to use for rendering the template.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/templatestring.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ntemplatestring(ARG1, ARG2, . . .)\n```\n\n----------------------------------------\n\nTITLE: Replace Function Syntax in Terraform HCL\nDESCRIPTION: Basic syntax for the replace function that takes three arguments: the input string, substring to find, and replacement string.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/replace.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nreplace(string, substring, replacement)\n```\n\n----------------------------------------\n\nTITLE: Basic JSON Encoding in Terraform\nDESCRIPTION: Demonstrates how to use the jsonencode function to convert a Terraform map into a JSON string. The example shows converting a simple key-value pair into its JSON representation.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/jsonencode.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\njsonencode({\"hello\"=\"world\"})\n```\n\nLANGUAGE: json\nCODE:\n```\n{\"hello\":\"world\"}\n```\n\n----------------------------------------\n\nTITLE: TF_DATA_DIR Environment Variable\nDESCRIPTION: The `TF_DATA_DIR` environment variable allows specifying a custom location for the `.terraform` directory, used for storing provider plugins and modules, instead of the current working directory.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/apply.mdx#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nTF_DATA_DIR\n```\n\n----------------------------------------\n\nTITLE: Referencing Remote State from Kubernetes Backend\nDESCRIPTION: Example of how to reference state stored in a Kubernetes backend using terraform_remote_state data source.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/kubernetes.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"terraform_remote_state\" \"foo\" {\n  backend = \"kubernetes\"\n  config = {\n    secret_suffix    = \"state\"\n    load_config_file = true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Variable Types for Networks and Subnets - Terraform HCL\nDESCRIPTION: This snippet defines variables for networks and subnets as maps of objects with specific attributes, used as structured inputs for module-level configuration. The 'networks' variable contains objects with 'base_cidr_block' strings, and the 'subnets' variable contains objects with a numeric 'number'. These are later converted to lists for processing with setproduct. Prerequisites: Terraform variable blocks; requires variables to be set during module usage.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/setproduct.mdx#2025-04-22_snippet_4\n\nLANGUAGE: HCL\nCODE:\n```\nvariable \"networks\" {\n  type = map(object({\n    base_cidr_block = string\n  }))\n}\n\nvariable \"subnets\" {\n  type = map(object({\n    number = number\n  }))\n}\n```\n\n----------------------------------------\n\nTITLE: String Interpolation Example\nDESCRIPTION: Demonstration of string interpolation using ${} syntax to embed variable values.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/strings.mdx#2025-04-22_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\n\"Hello, ${var.name}!\"\n```\n\n----------------------------------------\n\nTITLE: formatdate Usage Examples in HCL\nDESCRIPTION: Demonstrates various formatting examples using the formatdate function with different format specifications and timestamps.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/formatdate.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> formatdate(\"DD MMM YYYY hh:mm ZZZ\", \"2018-01-02T23:12:01Z\")\n02 Jan 2018 23:12 UTC\n> formatdate(\"EEEE, DD-MMM-YY hh:mm:ss ZZZ\", \"2018-01-02T23:12:01Z\")\nTuesday, 02-Jan-18 23:12:01 UTC\n> formatdate(\"EEE, DD MMM YYYY hh:mm:ss ZZZ\", \"2018-01-02T23:12:01-08:00\")\nTue, 02 Jan 2018 23:12:01 -0800\n> formatdate(\"MMM DD, YYYY\", \"2018-01-02T23:12:01Z\")\nJan 02, 2018\n> formatdate(\"HH:mmaa\", \"2018-01-02T23:12:01Z\")\n11:12pm\n```\n\n----------------------------------------\n\nTITLE: CIDR Host Function Syntax\nDESCRIPTION: Basic syntax for the cidrhost function that takes a prefix in CIDR notation and a host number to calculate a full host IP address.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/cidrhost.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ncidrhost(prefix, hostnum)\n```\n\n----------------------------------------\n\nTITLE: Removing a for_each-Keyed Resource Instance with terraform state rm - PowerShell\nDESCRIPTION: This PowerShell-specific snippet demonstrates removing a particular for_each-keyed resource instance ('example') and requires escaping inner quotes with backslashes while wrapping the address in single quotes. Preserves the resource remotely and exclusively updates Terraform state.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/state/rm.mdx#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ terraform state rm 'packet_device.worker[\\\"example\\\"]'\n```\n\n----------------------------------------\n\nTITLE: Position-based Formatting in HCL\nDESCRIPTION: Demonstrates how to use argument position numbers in format specifications.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/format.mdx#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\n> format(\"%[1]s%[2]s%[1]s%[3]s\", \"/\", \"path\", \"file.tf\")\n\"/path/file.tf\"\n```\n\n----------------------------------------\n\nTITLE: Computing Cartesian Product of Single-Element Lists - Terraform HCL\nDESCRIPTION: This snippet shows setproduct applied to two single-element lists, resulting in a single pair containing both elements. Prerequisites: Two single-element lists. Inputs: [\"a\"], [\"b\"]. Output: A list containing one combination list. Constraints: Element types must be consistent or coercible.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/setproduct.mdx#2025-04-22_snippet_2\n\nLANGUAGE: HCL\nCODE:\n```\n> setproduct([\"a\"], [\"b\"])\n[\n  [\n    \"a\",\n    \"b\",\n  ],\n]\n```\n\n----------------------------------------\n\nTITLE: Moving an Entire Module into a Parent Module (Shell)\nDESCRIPTION: Executes `terraform state mv` to update the Terraform state after refactoring an entire module (`module.app`) into a parent module (`module.parent`) within the configuration. This command changes the state address from `module.app` to `module.parent.module.app`.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/state/mv.mdx#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nterraform state mv module.app module.parent.module.app\n```\n\n----------------------------------------\n\nTITLE: Using timecmp in Resource Lifecycle Conditions in Terraform HCL\nDESCRIPTION: An example showing how to use the timecmp function in a resource's lifecycle block to create a custom condition that checks if a certificate expiration date is at least 30 days in the future.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/timecmp.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n  lifecycle {\n    postcondition {\n      condition     = timecmp(timestamp(), timeadd(self.expiration_timestamp, \"-720h\")) < 0\n      error_message = \"Certificate will expire in less than 30 days.\"\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Pushing State Files Using Terraform CLI in Shell\nDESCRIPTION: This snippet demonstrates the syntax for the `terraform state push` command used to upload a local state file to a configured backend. Users must provide the path to the desired state file or use '-' to read from stdin. The command includes options such as `-force` to disable safety checks and `-ignore-remote-version` for certain backend integrations. Input: state file path or stdin, Output: state updated in backend. Requires Terraform CLI, configured backend, and properly formatted UTF-8 state files.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/state/push.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nterraform state push [options] PATH\n```\n\n----------------------------------------\n\nTITLE: Marking Outputs as Sensitive in Terraform HCL\nDESCRIPTION: This snippet demonstrates the use of the sensitive flag in output declarations. When sensitive = true is set, Terraform will redact the output's value in CLI displays, helping prevent accidental exposure of secrets during plan or apply. The underlying values, however, are still stored in unencrypted state files unless additional precautions are taken. Inputs: referenced instance password or literal string; Outputs: hidden in CLI. Dependencies: aws_db_instance.db or manual value.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/values/outputs.mdx#2025-04-22_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\noutput \"db_password\" {\n  value       = aws_db_instance.db.password\n  description = \"The password for logging in to the database.\"\n  sensitive   = true\n}\n```\n\n----------------------------------------\n\nTITLE: Converting List to Set in Terraform\nDESCRIPTION: This example demonstrates how to use the toset function to convert a list of strings to a set. The resulting set removes any duplicate elements and discards the original ordering.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/toset.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> toset([\"a\", \"b\", \"c\"])\n[\n  \"a\",\n  \"b\",\n  \"c\",\n]\n```\n\n----------------------------------------\n\nTITLE: Rendering a Template with List Variables in Terraform\nDESCRIPTION: Shows how to call the templatefile function with a path and an object containing port and IP address list variables.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/templatefile.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\ntemplatefile(\"${path.module}/backends.tftpl\", { port = 8080, ip_addrs = [\"10.0.0.1\", \"10.0.0.2\"] })\n```\n\n----------------------------------------\n\nTITLE: Using strcontains Function in HCL\nDESCRIPTION: The strcontains function determines if a specified substring exists within another string in HCL scripts. It takes two string parameters: 'string' and 'substr'. The function returns a boolean value indicating the presence of 'substr' within 'string'.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/strcontains.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nstrcontains(string, substr)\n```\n\nLANGUAGE: hcl\nCODE:\n```\n> strcontains(\"hello world\", \"wor\")\ntrue\n```\n\nLANGUAGE: hcl\nCODE:\n```\n> strcontains(\"hello world\", \"wod\")\nfalse\n```\n\n----------------------------------------\n\nTITLE: Basic Filesha512 Function Syntax in Terraform\nDESCRIPTION: Demonstrates the basic syntax for using the filesha512 function to compute a file's SHA-512 hash.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/filesha512.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nfilesha512(path)\n```\n\n----------------------------------------\n\nTITLE: Null-Handling EC2 Instance Creation with One Function\nDESCRIPTION: Shows how to use the 'one' function with splat operator to handle null instance types, creating an instance conditionally based on a nullable variable.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/one.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"ec2_instance_type\" {\n  description = \"The type of instance to create. If set to null, no instance will be created.\"\n\n  type    = string\n  default = null\n}\n\nresource \"aws_instance\" \"example\" {\n  count = length(var.ec2_instance_type[*])\n\n  instance_type = var.ec2_instance_type\n  # (other resource arguments...)\n}\n\noutput \"instance_ip_address\" {\n  value = one(aws_instance.example[*].private_ip)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Terraform and Provider Versions in HCL\nDESCRIPTION: This snippet demonstrates how to pin Terraform and provider versions in the terraform block. It specifies the AWS provider version and sets a minimum required Terraform version.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/style.mdx#2025-04-22_snippet_14\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \"5.34.0\"\n    }\n  }\n\n  required_version = \">= 1.7\"\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to HCP Terraform with Tag-Based Workspaces\nDESCRIPTION: Links a working directory to HCP Terraform workspaces in the 'example_corp' organization that contain the 'layer=app' tag, using the map format for tags (requiring Terraform 1.10+).\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/terraform.mdx#2025-04-22_snippet_13\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  cloud {\n    organization = \"example_corp\"\n    workspaces {\n      tags = {\n        layer = \"app\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: List Expansion with Coalesce in Terraform\nDESCRIPTION: Shows how to use the spread operator (...) to expand a list as arguments to the coalesce function.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/coalesce.mdx#2025-04-22_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\n> coalesce([\"\", \"b\"]...)\nb\n```\n\n----------------------------------------\n\nTITLE: Specifying Multiple Local-Exec Provisioners in a Terraform Resource Block (HCL)\nDESCRIPTION: This snippet exemplifies how to define several local-exec provisioners in a single aws_instance resource block. Each provisioner runs its command in the order declared.The pattern allows sequential configuration or setup tasks during resource provisioning. Only the applicable provisioners for the current operation (creation or destruction) are executed. There are no extra dependencies beyond Terraform and associated plugins.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/resources/provisioners/syntax.mdx#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"web\" {\n  # ...\n\n  provisioner \"local-exec\" {\n    command = \"echo first\"\n  }\n\n  provisioner \"local-exec\" {\n    command = \"echo second\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Variables and Resources in Terraform Configuration\nDESCRIPTION: Shows a Terraform configuration that defines a map variable 'apps' and creates random_pet resources using a for_each loop.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/console.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"apps\" {\n  type = map(any)\n  default = {\n    \"foo\" = {\n      \"region\" = \"us-east-1\",\n    },\n    \"bar\" = {\n      \"region\" = \"eu-west-1\",\n    },\n    \"baz\" = {\n      \"region\" = \"ap-south-1\",\n    },\n  }\n}\n\nresource \"random_pet\" \"example\" {\n  for_each = var.apps\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Backend Prefix to Cloud Tags\nDESCRIPTION: Example demonstrating how to migrate from a remote backend using prefix to a cloud block using tags for workspace identification.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/cloud/settings.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n-  backend \"remote\" {\n+  cloud {\n     organization = \"my-org\"\n\n    workspaces {\n-      prefix = \"my-app-\"\n+      tags = {\n+        app = \"mine\"\n+      }\n    }\n   }\n }\n```\n\n----------------------------------------\n\nTITLE: Defining Alltrue Function in Terraform HCL\nDESCRIPTION: This snippet shows the basic syntax for using the alltrue function in Terraform. It takes a list as an argument and returns a boolean value.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/alltrue.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nalltrue(list)\n```\n\n----------------------------------------\n\nTITLE: Initializing Terraform Backend with Command-line Configuration\nDESCRIPTION: Demonstrates how to initialize Terraform with backend configuration parameters specified via command-line arguments. Shows setting the address, path, and scheme for a backend configuration.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/index.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform init \\\n    -backend-config=\"address=demo.consul.io\" \\\n    -backend-config=\"path=example_app/terraform_state\" \\\n    -backend-config=\"scheme=https\"\n```\n\n----------------------------------------\n\nTITLE: Decoding JSON Primitive Strings (Boolean) via Terraform jsondecode - HCL\nDESCRIPTION: This snippet illustrates decoding a JSON-encoded Boolean string using jsondecode in Terraform. The function interprets the JSON boolean value string as a native Terraform boolean. The input is a valid JSON boolean ('true'), and the output is the corresponding Terraform boolean value. The snippet operates standalone and requires no additional dependencies.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/jsondecode.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> jsondecode(\"true\")\ntrue\n```\n\n----------------------------------------\n\nTITLE: Removing a suffix from a string using trimsuffix in Terraform\nDESCRIPTION: This example demonstrates removing the 'world' suffix from the end of 'helloworld', resulting in 'hello'.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/trimsuffix.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> trimsuffix(\"helloworld\", \"world\")\nhello\n```\n\n----------------------------------------\n\nTITLE: Using Terraform Modules Command (Shell Session)\nDESCRIPTION: Demonstrates the output structure of the `terraform modules` command, highlighting declared modules, their sources, and versions. This output is useful for understanding module dependencies and configuration hierarchy. No external dependencies are needed, but Terraform v1.10.0 or later is required.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/modules.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\nModules declared by configuration:\n\n.\n├── \"my_private_registry_module\"[app.terraform.io/hashicorp/label/null] 1.0.0 (>=1.0.0, < 2.0.1)\n├── \"my_public_registry_module\"[terraform-aws-modules/iam/aws] 5.47.1 (>5.0.1)\n└── \"my_local_module_a\"[./path/to/local/module_a]\n    └── \"my_local_module_b\"[./path/to/local/module_a/module_b]\n        └── \"my_local_module_c\"[./path/to/local/module/module_a/module_b/module_c]\n```\n\n----------------------------------------\n\nTITLE: Syntax Definition for the substr Function in HCL\nDESCRIPTION: Defines the syntax for the `substr` function in Terraform HCL. It takes a string, an offset (start position, 0-based), and a length (maximum number of characters) as arguments to extract a substring.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/substr.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nsubstr(string, offset, length)\n```\n\n----------------------------------------\n\nTITLE: One Function Basic Examples\nDESCRIPTION: Basic examples showing the behavior of the 'one' function with empty lists, single-element lists, and invalid multi-element lists.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/one.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n> one([])\nnull\n> one([\"hello\"])\n\"hello\"\n> one([\"hello\", \"goodbye\"])\n\nError: Invalid function argument\n\nInvalid value for \"list\" parameter: must be a list, set, or tuple value with\neither zero or one elements.\n```\n\n----------------------------------------\n\nTITLE: Setting Input Variables from a File for terraform plan (CLI Option)\nDESCRIPTION: Describes the `-var-file=FILENAME` option. It loads input variable values from a specified variable definitions file (typically a `.tfvars` file). This option can be used multiple times to include values from several files.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/plan.mdx#2025-04-22_snippet_8\n\nLANGUAGE: cli\nCODE:\n```\n-var-file=FILENAME\n```\n\n----------------------------------------\n\nTITLE: Using Encode Tfvars Function in HCL\nDESCRIPTION: Demonstrates how to use the provider::terraform::encode_tfvars function to encode an object into a .tfvars file format. The example argument is used, and the expected output is a key-value pair formatted for the .tfvars file. Note that attribute names must comply with Terraform's variable naming conventions.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/terraform-encode_tfvars.mdx#2025-04-22_snippet_1\n\nLANGUAGE: HCL\nCODE:\n```\nprovider::terraform::encode_tfvars({\n  example = \"Hello!\"\n})\n```\n\n----------------------------------------\n\nTITLE: Executing Terraform State Replace-Provider Command\nDESCRIPTION: The shell command example demonstrates how to replace the existing provider for resources in a Terraform state with a new provider specified by the user. No external dependencies are required other than ensuring Terraform is installed and the user's state configuration is accessible. Inputs include the current provider FQN and the new provider FQN, and the expected outcome is an updated Terraform state with the new provider. The command includes options for auto-approval, state locking, and configuration backup.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/state/replace-provider.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ terraform state replace-provider hashicorp/aws registry.acme.corp/acme/aws\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Provider with Variable Set Credentials\nDESCRIPTION: Defines ephemeral variables for AWS credentials and configures the AWS provider to use them. This setup enables authentication using credentials obtained from a variable set in HCP Terraform.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/deploy/authenticate.mdx#2025-04-22_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\n# providers.tfstack.hcl\n\nvariable \"access_key\" {\n  description = \"AWS access key\"\n  type     = string\n  ephemeral = true\n}\n\nvariable \"secret_key\" {\n  description = \"AWS sensitive secret key.\"\n  type     = string\n  sensitive = true\n  ephemeral = true\n}\n\nvariable \"session_token\" {\n  description = \"AWS session token.\"\n  type     = string\n  sensitive = true\n  ephemeral = true\n}\n\nrequired_providers {\n  aws = {\n    source  = \"hashicorp/aws\"\n    version = \"~> 5.7.0\"\n  }\n}\n\nprovider \"aws\" \"this\" {\n  config {\n    access_key = var.access_key\n    secret_key = var.secret_key\n    token = var.session_token\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using type function in Terraform console to inspect value types\nDESCRIPTION: This snippet demonstrates how to use the type function in Terraform console to examine the detailed structure of variable types. It shows the difference between a simple 'tuple' and a complex tuple containing nested object types.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/type.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n> type(var.list)\ntuple\n> type(local.default_list)\ntuple([\n    object({\n        foo: string,\n        map: object({\n            bleep: string,\n        }),\n    }),\n    object({\n        beep: string,\n    }),\n])\n```\n\n----------------------------------------\n\nTITLE: Nested Block Configuration with Labels in HCL\nDESCRIPTION: Example showing how to configure nested blocks with logical keys/labels in Terraform. Demonstrates the device block type with named labels for reference purposes.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/references.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\ndevice \"foo\" {\n  size = 2\n}\ndevice \"bar\" {\n  size = 4\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Backend in Terraform\nDESCRIPTION: Basic configuration for storing Terraform state in a Kubernetes secret. Demonstrates setting the secret suffix and config path for authentication.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/kubernetes.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  backend \"kubernetes\" {\n    secret_suffix    = \"state\"\n    config_path      = \"~/.kube/config\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic CSV Decoding Example in Terraform\nDESCRIPTION: Simple example showing how csvdecode converts a CSV string into a list of maps with header row values as keys.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/csvdecode.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ncsvdecode(\"a,b,c\\n1,2,3\\n4,5,6\")\n```\n\n----------------------------------------\n\nTITLE: Filesha1 Function in Output Block\nDESCRIPTION: Demonstrates how to use filesha1 function within a Terraform output block, using path.module to reference a file in the current module's directory.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/filesha1.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\noutput \"file_hash\" { \n  value = filesha1(\"${path.module}/example.txt\") \n}\n```\n\n----------------------------------------\n\nTITLE: Applying the `sensitive` Function in Terraform Console\nDESCRIPTION: These examples show the behavior of the `sensitive` function when used in the Terraform console (`terraform console`). Applying `sensitive` to different data types (number, string, list) results in the output `(sensitive value)`, indicating that Terraform recognizes the value as sensitive and suppresses its display.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/sensitive.mdx#2025-04-22_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\n```\n> sensitive(1)\n(sensitive value)\n> sensitive(\"hello\")\n(sensitive value)\n> sensitive([])\n(sensitive value)\n```\n```\n\n----------------------------------------\n\nTITLE: Declaring a Module with Version in HCL\nDESCRIPTION: This snippet shows how to declare a module in Terraform configuration, specifying its source and version. It uses the vault-starter module from the AWS provider.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/style.mdx#2025-04-22_snippet_15\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"vault_starter\" {\n  source  = \"hashicorp/vault-starter/aws\"\n  version = \"1.0.0\"\n  ##...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Tuple in HCL\nDESCRIPTION: This snippet shows how to define a tuple with string, number, and boolean values in HCL, matching the tuple type tuple([string, number, bool]).\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/type-constraints.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n[\"a\", 15, true]\n```\n\n----------------------------------------\n\nTITLE: Configuring OSS Backend for Terraform State Storage\nDESCRIPTION: Sets up an OSS backend with state locking via TableStore. This configuration requires a pre-existing OSS bucket and TableStore table. The state will be stored at the specified path within the bucket, and locking is handled by the TableStore table.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/oss.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  backend \"oss\" {\n    bucket = \"bucket-for-terraform-state\"\n    prefix   = \"path/mystate\"\n    key   = \"version-1.tfstate\"\n    region = \"cn-beijing\"\n    tablestore_endpoint = \"https://terraform-remote.cn-hangzhou.ots.aliyuncs.com\"\n    tablestore_table = \"statelock\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Trim Function Usage in Terraform HCL\nDESCRIPTION: This snippet provides examples of using the trim function in Terraform. It shows how to remove specific characters from the start and end of strings, including punctuation and whitespace.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/trim.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> trim(\"?!hello?!\", \"!?\")\n\"hello\"\n\n> trim(\"foobar\", \"far\")\n\"oob\"\n\n> trim(\"   hello! world.!  \", \"! \")\n\"hello! world.\"\n```\n\n----------------------------------------\n\nTITLE: Mirror Providers with Terraform CLI Command\nDESCRIPTION: This shell command downloads necessary provider plugins for Terraform configurations and copies them into a specified local directory, creating a filesystem mirror. It is useful in environments without access to the Terraform Registry. Required prerequisites include Terraform v0.13 or later and knowledge of the target system’s OS and architecture. The command generates a path structure and includes options for specifying the target platform and control over using a lock file.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/providers/mirror.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nterraform providers mirror [options] <target-dir>\n```\n\n----------------------------------------\n\nTITLE: Importing AWS Instance into Resource with For_Each (Windows cmd.exe)\nDESCRIPTION: This command imports an AWS EC2 instance with ID 'i-abcd1234' into the 'example' instance of the 'aws_instance.baz' resource configured with for_each in Windows cmd.exe.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/import.mdx#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ terraform import aws_instance.baz[\\\"example\\\"] i-abcd1234\n```\n\n----------------------------------------\n\nTITLE: Creating a New Workspace Terraform Command\nDESCRIPTION: The `terraform workspace new` command is used to initialize a new workspace in Terraform with the specified name. This command supports optional flags to customize state locking behavior and state file initialization. The command is used in scenarios where isolated environments are required within a single Terraform configuration.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/workspace/new.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ terraform workspace new example\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ terraform workspace new -state=old.terraform.tfstate example\n```\n\n----------------------------------------\n\nTITLE: \"Using join function in Terraform HCL\"\nDESCRIPTION: \"The 'join' function in Terraform HCL concatenates all the elements of a specified list of strings into one single string, using a provided separator. It requires a separator parameter and a list of strings parameter. The output is a single string formed by the concatenation of the list elements with the separator. This function does not account for nested lists or non-string elements.\"\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/join.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\njoin(separator, list)\n```\n\n----------------------------------------\n\nTITLE: Setting Plugin Cache Directory in Terraform CLI Configuration\nDESCRIPTION: This HCL snippet configures a directory for caching downloaded provider plugins, which helps avoid repeated downloads for multiple configurations. The `plugin_cache_dir` must exist before use, and it's important on Windows to use forward slashes in the path.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/config/config-file.mdx#2025-04-22_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nplugin_cache_dir = \"$HOME/.terraform.d/plugin-cache\"\n```\n\n----------------------------------------\n\nTITLE: Basic Regex Function Syntax in HCL\nDESCRIPTION: Basic syntax for the regex function in Terraform's HCL configuration language. The function takes two arguments: a pattern string and the target string to match against.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/regex.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nregex(pattern, string)\n```\n\n----------------------------------------\n\nTITLE: Certificate Validation Using Plantimestamp in Terraform\nDESCRIPTION: Example demonstrating how to use plantimestamp() in a custom check block to validate TLS certificate expiration dates\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/plantimestamp.mdx#2025-04-22_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\ncheck \"terraform_io_certificate\" {\n  data \"tls_certificate\" \"terraform_io\" {\n    url = \"https://www.terraform.io/\"\n  }\n\n  assert {\n    condition = timecmp(plantimestamp(), data.tls_certificate.terraform_io.certificates[0].not_after) < 0\n    error_message = \"terraform.io certificate has expired\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using pathexpand Function in Terraform\nDESCRIPTION: Demonstrates how the pathexpand function expands the tilde character to a user's home directory path and shows an example with an absolute path that remains unchanged.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/pathexpand.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> pathexpand(\"~/.ssh/id_rsa\")\n/home/steve/.ssh/id_rsa\n> pathexpand(\"/etc/resolv.conf\")\n/etc/resolv.conf\n```\n\n----------------------------------------\n\nTITLE: Implementing S3 Data Module\nDESCRIPTION: Module configuration for retrieving credentials data from an S3 bucket and exposing it as an output.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/tests/mocking.mdx#2025-04-22_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"data_bucket_name\" {\n  type = string\n}\n\ndata \"aws_s3_object\" \"data_bucket\" {\n  bucket = var.data_bucket_name\n  key    = \"credentials.json\"\n}\n\noutput \"data\" {\n  value = jsondecode(data.aws_s3_object.data_bucket.body)\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Terraform Enterprise with Key-Only Tags\nDESCRIPTION: Links a working directory to workspaces in Terraform Enterprise that have the 'app' key-only tag. This format works with Terraform Enterprise prior to v202411-1 or Terraform prior to v1.10.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/terraform.mdx#2025-04-22_snippet_14\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  cloud {\n    organization = \"example_corp\"\n    hostname = \"my.terraform-enterprise.host\"\n    workspaces {\n      tags = [\"app\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Required Terraform Provider in HCL\nDESCRIPTION: This code snippet shows how to declare a dependency on the built-in 'terraform' provider, which contains the encode_tfvars function. The terraform block specifies the provider's source as 'terraform.io/builtin/terraform'. This declaration is necessary before using the function in a module.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/terraform-encode_tfvars.mdx#2025-04-22_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nterraform {\n  required_providers {\n    terraform = {\n      source = \"terraform.io/builtin/terraform\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating JSON Output with `terraform show -json` (Shell)\nDESCRIPTION: Shows how to use the `-json` flag with `terraform show` to produce machine-readable JSON output representing the Terraform state or plan. This requires Terraform v0.12 or later. Be aware that sensitive values will be displayed in plain text in the JSON output.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/show.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform show -json\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Backend with OIDC for GitHub in Terraform\nDESCRIPTION: Azure Storage backend configuration using OpenID Connect authentication for GitHub workflows. Includes tenant, subscription, and client configuration settings.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/azurerm.mdx#2025-04-22_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  backend \"azurerm\" {\n    use_oidc             = true                                    # Can also be set via `ARM_USE_OIDC` environment variable.\n    tenant_id            = \"00000000-0000-0000-0000-000000000000\"  # Can also be set via `ARM_TENANT_ID` environment variable.\n    subscription_id      = \"00000000-0000-0000-0000-000000000000\"  # Can also be set via `ARM_SUBSCRIPTION_ID` environment variable.\n    client_id            = \"00000000-0000-0000-0000-000000000000\"  # Can also be set via `ARM_CLIENT_ID` environment variable.\n    resource_group_name  = \"StorageAccount-ResourceGroup\"          # Can be passed via `-backend-config=`\"resource_group_name=<resource group name>\"` in the `init` command.\n    storage_account_name = \"abcd1234\"                              # Can be passed via `-backend-config=`\"storage_account_name=<storage account name>\"` in the `init` command.\n    container_name       = \"tfstate\"                               # Can be passed via `-backend-config=`\"container_name=<container name>\"` in the `init` command.\n    key                  = \"prod.terraform.tfstate\"                # Can be passed via `-backend-config=`\"key=<blob key name>\"` in the `init` command.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: For Loop Template Directive\nDESCRIPTION: Example of using for directive to iterate over a collection in string templates.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/strings.mdx#2025-04-22_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\n<<EOT\n%{ for ip in aws_instance.example[*].private_ip }\nserver ${ip}\n%{ endfor }\nEOT\n```\n\n----------------------------------------\n\nTITLE: Configuring a Git Module with Shallow Clone in Terraform\nDESCRIPTION: This snippet demonstrates how to use the depth parameter with a Git repository source to create a shallow clone, which includes only the specified number of commits in history to reduce clone time.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/sources.mdx#2025-04-22_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"vpc\" {\n  source = \"git::https://example.com/vpc.git?depth=1&ref=v1.2.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Element Function Basic Usage Example\nDESCRIPTION: Demonstrates basic usage of the element function to retrieve the second element (index 1) from a list.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/element.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nelement([\"a\", \"b\", \"c\"], 1)\n```\n\n----------------------------------------\n\nTITLE: Base64gzip Function AWS S3 Example in HCL\nDESCRIPTION: Demonstrates a practical use case of base64gzip function when uploading compressed content to an AWS S3 bucket.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/base64gzip.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_s3_object\" \"example\" {\n  bucket = \"my_bucket\"\n  key = \"example.txt\"\n  content_base64 = base64gzip(local.my_data)\n  content_encoding = \"gzip\"\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Ephemeralasnull Usage with Maps in Terraform\nDESCRIPTION: Demonstrates a more complex use case where ephemeralasnull is used with maps containing mixed ephemeral and non-ephemeral values.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/ephemeralasnull.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"session_token\" {\n  type      = string\n  default   = \"test\"\n  ephemeral = true\n}\n\nvariable \"configuration\" {\n  type = map(string)\n  default = {\n    \"env\" = \"development\"\n  }\n}\n\n# This is a contrived example, but this pattern works with any object that is a mix of ephemeral and non-ephemeral values. \nlocals {\n  configuration_with_token = merge(\n    var.configuration,\n    { \"session_token\" = var.session_token }\n  )\n  ephemeral = true\n}\n\noutput \"configuration_settings\" {\n# Using ephemeralasnull enables you to output the non-ephemeral values.\n  value       = ephemeralasnull(local.things_with_token)\n  description = \"Environment setting.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring a Terraform Monorepo in HCL\nDESCRIPTION: This snippet illustrates the directory structure of a Terraform monorepo. It shows the organization of modules and configuration files for a project that includes function, queue, and VPC resources.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/style.mdx#2025-04-22_snippet_16\n\nLANGUAGE: hcl\nCODE:\n```\n.\n├── modules\n│   ├── function\n│   │   ├── main.tf      # contains aws_iam_role, aws_lambda_function\n│   │   ├── outputs.tf\n│   │   └── variables.tf\n│   ├── queue\n│   │   ├── main.tf      # contains aws_sqs_queue\n│   │   ├── outputs.tf\n│   │   └── variables.tf\n│   └── vpc\n│       ├── main.tf      # contains aws_vpc, aws_subnet\n│       ├── outputs.tf\n│       └── variables.tf\n├── main.tf\n├── outputs.tf\n└── variables.tf\n```\n\n----------------------------------------\n\nTITLE: Providing Default Attribute Values for Mocked Resources/Data - Terraform HCL\nDESCRIPTION: This snippet shows how to define default values for specific attributes (like 'arn') of mocked AWS resources and data sources in Terraform tests. Using the 'mock_resource' and 'mock_data' blocks within a 'mock_provider', the example ensures that the 'arn' attribute for all 'aws_s3_bucket' instances is always set to a specific value. The snippet depends on Terraform's mocking framework and is used to ensure attribute-based logic or assertions behave consistently during tests.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/tests/mocking.mdx#2025-04-22_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nmock_provider \"aws\" {\n  mock_resource \"aws_s3_bucket\" {\n    defaults = {\n      arn = \"arn:aws:s3:::name\"\n    }\n  }\n\n  mock_data \"aws_s3_bucket\" {\n    defaults = {\n      arn = \"arn:aws:s3:::name\"\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Basic Format Function Declaration in HCL\nDESCRIPTION: Shows the basic syntax for calling the format function in Terraform.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/format.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nformat(spec, values...)\n```\n\n----------------------------------------\n\nTITLE: Importing AWS Instance into Resource with For_Each (Linux/Mac/UNIX)\nDESCRIPTION: This command imports an AWS EC2 instance with ID 'i-abcd1234' into the 'example' instance of the 'aws_instance.baz' resource configured with for_each on Linux, Mac OS, or UNIX systems.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/import.mdx#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ terraform import 'aws_instance.baz[\"example\"]' i-abcd1234\n```\n\n----------------------------------------\n\nTITLE: Initializing From a Module Source\nDESCRIPTION: Syntax for initializing a working directory by copying a source module. This option allows initializing from an empty directory using a module from version control or an example configuration.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/init.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nterraform init -from-module=MODULE-SOURCE\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Terraform CLI Configuration File via TF_CLI_CONFIG_FILE in Shell\nDESCRIPTION: Sets the `TF_CLI_CONFIG_FILE` environment variable to specify a non-default path for the Terraform CLI configuration file. This example sets the path to `$HOME/.terraformrc-custom`. Note that `TERRAFORM_CONFIG` is a deprecated alias for this variable.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/config/environment-variables.mdx#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nexport TF_CLI_CONFIG_FILE=\"$HOME/.terraformrc-custom\"\n```\n\n----------------------------------------\n\nTITLE: Examples of timecmp Function Usage in Terraform HCL\nDESCRIPTION: Examples demonstrating the timecmp function's behavior when comparing timestamps in different scenarios, including equal timestamps, timestamps with different times, and timestamps with different UTC offsets.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/timecmp.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> timecmp(\"2017-11-22T00:00:00Z\", \"2017-11-22T00:00:00Z\")\n0\n> timecmp(\"2017-11-22T00:00:00Z\", \"2017-11-22T01:00:00Z\")\n-1\n> timecmp(\"2017-11-22T01:00:00Z\", \"2017-11-22T00:00:00Z\")\n1\n> timecmp(\"2017-11-22T01:00:00Z\", \"2017-11-22T00:00:00-01:00\")\n0\n```\n\n----------------------------------------\n\nTITLE: Defining Orchestration Rules for Automatic Deployment Management in HCL\nDESCRIPTION: This snippet demonstrates how to create an orchestration rule to automatically approve plans when there are no changes to a specific component.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/deploy/config.mdx#2025-04-22_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\n# deployments.tfdeploy.hcl\n\norchestrate \"auto_approve\" \"no_pet_changes\" {\n  check {\n    # Check that the pet component has no changes\n    condition = context.plan.component_changes[\"component.pet\"].total == 0\n    reason    = \"Changes proposed to pet component.\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Element Function Wrap-around Behavior Example\nDESCRIPTION: Shows how the element function handles indices greater than the list length by wrapping around to the beginning.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/element.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nelement([\"a\", \"b\", \"c\"], 3)\n```\n\n----------------------------------------\n\nTITLE: Using parseint Function in Terraform\nDESCRIPTION: Examples demonstrating the parseint function usage with different number bases. Shows conversion of decimal, hexadecimal, binary, and base-62 numbers. Includes error case for invalid binary input.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/parseint.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> parseint(\"100\", 10)\n100\n\n> parseint(\"FF\", 16)\n255\n\n> parseint(\"-10\", 16)\n-16\n\n> parseint(\"1011111011101111\", 2)\n48879\n\n> parseint(\"aA\", 62)\n656\n\n> parseint(\"12\", 2)\n\nError: Invalid function argument\n\nInvalid value for \"number\" parameter: cannot parse \"12\" as a base 2 integer.\n```\n\n----------------------------------------\n\nTITLE: Setting Input Variables via Command Line for terraform plan (CLI Option)\nDESCRIPTION: Explains the `-var 'NAME=VALUE'` option. It allows setting the value for a single input variable declared in the root module directly via the command line. This option can be used multiple times to set values for different variables.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/plan.mdx#2025-04-22_snippet_7\n\nLANGUAGE: cli\nCODE:\n```\n-var 'NAME=VALUE'\n```\n\n----------------------------------------\n\nTITLE: Provision Progress JSON Log Format\nDESCRIPTION: Example of a Terraform provision progress log message showing provisioner output\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/machine-readable-ui.mdx#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@level\": \"info\",\n  \"@message\": \"null_resource.none[0]: (local-exec): Executing: [\\\"/bin/sh\\\" \\\"-c\\\" \\\"sleep 10 && exit 1\\\"]\",\n  \"@module\": \"terraform.ui\",\n  \"@timestamp\": \"2021-03-26T16:38:43.997869-04:00\",\n  \"hook\": {\n    \"resource\": {\n      \"addr\": \"null_resource.none[0]\",\n      \"module\": \"\",\n      \"resource\": \"null_resource.none[0]\",\n      \"implied_provider\": \"null\",\n      \"resource_type\": \"null_resource\",\n      \"resource_name\": \"none\",\n      \"resource_key\": 0\n    },\n    \"provisioner\": \"local-exec\",\n    \"output\": \"Executing: [\\\"/bin/sh\\\" \\\"-c\\\" \\\"sleep 10 && exit 1\\\"]\"\n  },\n  \"type\": \"provision_progress\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using local-exec Provisioner with PowerShell in Terraform\nDESCRIPTION: This snippet demonstrates using the local-exec provisioner with PowerShell. It executes a PowerShell command to create a file with the current date.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/resources/provisioners/local-exec.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"terraform_data\" \"example2\" {\n  provisioner \"local-exec\" {\n    command = \"Get-Date > completed.txt\"\n    interpreter = [\"PowerShell\", \"-Command\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Terraform Checksum Verification Error\nDESCRIPTION: Example of an error message shown when Terraform fails to install a provider due to mismatched checksums. This indicates a potential security issue or corruption in the provider package.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/files/dependency-lock.mdx#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nError: Failed to install provider\n\nError while installing hashicorp/azurerm v2.1.0: the current package for\nregistry.terraform.io/hashicorp/azurerm 2.1.0 doesn't match any of the\nchecksums previously recorded in the dependency lock file.\n```\n\n----------------------------------------\n\nTITLE: Using an S3 Bucket as a Module Source in Terraform\nDESCRIPTION: This snippet demonstrates how to reference an archive stored in an AWS S3 bucket as a module source using the s3:: prefix, which enables AWS-style authentication.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/sources.mdx#2025-04-22_snippet_14\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"consul\" {\n  source = \"s3::https://s3-eu-west-1.amazonaws.com/examplecorp-terraform-modules/vpc.zip\"\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Modules from GitHub via SSH (HCL)\nDESCRIPTION: This snippet demonstrates sourcing a module from a GitHub repository using the SSH protocol, which is suitable for private repositories or automated systems with SSH keys configured. Requires SSH key authentication set up for the relevant user/account.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/sources.mdx#2025-04-22_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"consul\" {\n  source = \"git@github.com:hashicorp/example.git\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using For_Each in Provider Block for Multi-Region AWS Configurations\nDESCRIPTION: This example illustrates how to use the for_each meta-argument in a provider block to create multiple AWS configurations for different regions.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/reference/tfstack.mdx#2025-04-22_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nprovider \"aws\" \"configurations\" {\n    for_each = var.regions\n\n    config {\n        region = each.value\n\n        assume_role_with_web_identity {\n            role_arn           = var.role_arn\n            web_identity_token = var.identity_token\n        }\n\n        default_tags {\n            tags = var.default_tags\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reporting Ephemeral Operation Error - Terraform UI - JSON\nDESCRIPTION: This sample provides the 'ephemeral_op_errored' JSON message, detailing an error that occurred during an ephemeral resource operation. It contains resource metadata, the action attempted, and elapsed time at the point of failure. This event is usually accompanied by a separate diagnostic message for detailed error information.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/machine-readable-ui.mdx#2025-04-22_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@level\": \"info\",\n  \"@message\": \"ephemeral.random_password.example: Opening errored after 2s\",\n  \"@module\": \"terraform.ui\",\n  \"@timestamp\": \"2024-10-30T10:34:26.222465-00:00\",\n  \"hook\": {\n    \"resource\": {\n      \"addr\": \"ephemeral.random_password.example\",\n      \"module\": \"\",\n      \"resource\": \"ephemeral.random_password.example\",\n      \"implied_provider\": \"random\",\n      \"resource_type\": \"random_password\",\n      \"resource_name\": \"example\",\n      \"resource_key\": null\n    },\n    \"action\": \"open\",\n    \"elapsed_seconds\": 2\n  },\n  \"type\": \"ephemeral_op_errored\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic YAML Object Decoding with yamldecode in Terraform\nDESCRIPTION: Demonstrates decoding a simple YAML key-value pair into a Terraform object.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/yamldecode.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nyamldecode(\"hello: world\")\n```\n\n----------------------------------------\n\nTITLE: Referencing Modules from a Private Registry with Host Prefix (HCL)\nDESCRIPTION: This snippet demonstrates referencing private modules from a custom or SaaS-hosted registry by including the hostname in the source argument and specifying a version. The user must have credentials for accessing the private registry, which may require CLI config authentication. Inputs include the custom registry hostname and module path.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/sources.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"consul\" {\n  source = \"app.terraform.io/example-corp/k8s-cluster/azurerm\"\n  version = \"1.1.0\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Basic Plantimestamp Usage in Terraform\nDESCRIPTION: Simple example showing the basic usage of plantimestamp() function returning a UTC timestamp in RFC 3339 format\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/plantimestamp.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> plantimestamp()\n2018-05-13T07:44:12Z\n```\n\n----------------------------------------\n\nTITLE: Element Function Negative Index Example\nDESCRIPTION: Demonstrates using a negative index (-1) to access the last element of a list.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/element.mdx#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nelement([\"a\", \"b\", \"c\"], -1)\n```\n\n----------------------------------------\n\nTITLE: Computing Cartesian Product with Empty Arguments - Terraform HCL\nDESCRIPTION: This snippet illustrates the behavior of setproduct when one argument is an empty list. The result is always an empty list, mimicking the mathematical property that the product with zero elements is zero. Prerequisites: Two or more input collections; at least one is empty. Inputs: Non-empty list and empty list. Output: Empty list.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/setproduct.mdx#2025-04-22_snippet_1\n\nLANGUAGE: HCL\nCODE:\n```\n> setproduct([\"development\", \"staging\", \"production\"], [])\n[]\n```\n\n----------------------------------------\n\nTITLE: Showing a Resource with For_Each in Terraform State\nDESCRIPTION: This snippet illustrates how to display the attributes of a specific instance of a resource configured with the `for_each` meta-argument. When special characters are present, resource names must be enclosed in single quotes.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/state/show.mdx#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ terraform state show 'packet_device.worker[\"example\"]'\n```\n\n----------------------------------------\n\nTITLE: Filtering Resources by Module with Terraform CLI\nDESCRIPTION: This example command filters resources by a module name, listing all resources within the specified module and any submodules. It is used to focus on specific sections of a state managed by a module.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/state/list.mdx#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ terraform state list module.elb\nmodule.elb.aws_elb.main\nmodule.elb.module.secgroups.aws_security_group.sg\n```\n\n----------------------------------------\n\nTITLE: Selecting a Specific Revision from a Mercurial Repository in Terraform\nDESCRIPTION: This snippet shows how to select a specific branch or tag in a Mercurial repository using the ref argument, which specifies which revision Terraform should use.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/sources.mdx#2025-04-22_snippet_11\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"vpc\" {\n  source = \"hg::http://example.com/vpc.hg?ref=v1.2.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Component Definition with for_each in Terraform\nDESCRIPTION: Example of defining multiple components using for_each to deploy across multiple AWS regions.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/reference/tfstack.mdx#2025-04-22_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\ncomponent \"s3_buckets\" {\n    source = \"./s3\"\n\n    for_each = var.regions\n\n    providers = {\n        aws = provider.aws.config[each.value]\n    }\n\n    variables = {\n        region = each.value\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing a Resource in a Child Module with terraform state rm - Shell\nDESCRIPTION: This shell snippet shows how to remove the binding for a resource defined within a specific child module by incorporating the module path into the resource address. Requires the module and resource to exist in state. The argument 'module.foo.packet_device.worker' tells Terraform to remove all 'worker' instances in the 'packet_device' resource inside the 'foo' module from Terraform's state. No actual resources are deleted remotely.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/state/rm.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ terraform state rm 'module.foo.packet_device.worker'\n```\n\n----------------------------------------\n\nTITLE: Applying Base64 Encoding to a String in Terraform\nDESCRIPTION: This snippet demonstrates how to use the base64encode function in Terraform to encode a string. The function first encodes the input string as UTF-8, then applies Base64 encoding using the standard Base64 alphabet.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/base64encode.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> base64encode(\"Hello World\")\nSGVsbG8gV29ybGQ=\n```\n\n----------------------------------------\n\nTITLE: Using max Function with List Expansion in Terraform\nDESCRIPTION: Shows how to use the spread operator (...) to expand a list of numbers as individual arguments to the max function.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/max.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> max([12, 54, 3]...)\n54\n```\n\n----------------------------------------\n\nTITLE: Set Conversion with For Expression\nDESCRIPTION: Shows how to convert a for expression result into a set using the toset function.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/for.mdx#2025-04-22_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\ntoset([for e in var.set : e.example])\n```\n\n----------------------------------------\n\nTITLE: Defining Output Block in Terraform Stack Configuration\nDESCRIPTION: This example shows the complete structure of an output block in a Terraform Stack configuration file, including fields for description, type, value, and sensitivity.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/reference/tfstack.mdx#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\noutput \"unique_name_of_output\" {\n  description = \"Description of the purpose of this output\"\n  type        = string\n  value       = component.component_name.some_value\n  sensitive   = false\n  ephemeral   = false\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Mixed-Type Values to a Map in Terraform\nDESCRIPTION: Example demonstrating how tomap handles mixed data types by converting elements to the most general type. Here, the boolean value is converted to a string to maintain type consistency in the map.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/tomap.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> tomap({\"a\" = \"foo\", \"b\" = true})\n{\n  \"a\" = \"foo\"\n  \"b\" = \"true\"\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Type Conversion in Conditional Expressions\nDESCRIPTION: Example of implicit type conversion in a conditional expression, where a number and string can be used as alternative return values due to Terraform's automatic conversion.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/conditionals.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nvar.example ? 12 : \"hello\"\n```\n\n----------------------------------------\n\nTITLE: Verbose Test Plan JSON Output\nDESCRIPTION: Detailed plan output in verbose mode showing planned resource changes and provider schemas. Includes resource addresses, change actions, and provider configurations.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/machine-readable-ui.mdx#2025-04-22_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@level\": \"info\",\n  \"@message\": \"-verbose flag enabled, printing plan\",\n  \"@module\": \"terraform.ui\",\n  \"@testfile\": \"validation.tftest.hcl\",\n  \"@testrun\": \"successful_validation\",\n  \"@timestamp\": \"2023-08-09T17:10:06.211942+02:00\",\n  \"test_plan\": {\n    \"plan_format_version\": \"1.2\",\n    \"resource_changes\": [\n      {\n        \"address\": \"aws_instance.primary\",\n        \"mode\": \"managed\",\n        \"type\": \"aws_instance\",\n        \"name\": \"primary\",\n        \"provider_name\": \"registry.terraform.io/hashicorp/aws\",\n        \"change\": {\n          \"actions\": [\n            \"create\"\n          ],\n          \"before\": null,\n          \"after\": {\n            \"ami\": \"af84f887-e3eb-9e52-5f8b-8a2803734fd0\"\n          },\n          \"after_unknown\": {},\n          \"before_sensitive\": false,\n          \"after_sensitive\": {}\n        }\n      }\n    ],\n    \"provider_format_version\": \"1.0\",\n    \"provider_schemas\": {\n      \"registry.terraform.io/hashicorp/aws\": {\n        \"provider\": {\n          \"version\": 0\n        },\n        \"resource_schemas\": {\n          \"aws_instance\": {\n            \"version\": 0,\n            \"block\": {\n              \"attributes\": {\n                \"ami\": {\n                  \"type\": \"string\",\n                  \"description_kind\": \"plain\",\n                  \"required\": true\n                }\n              },\n              \"description_kind\": \"plain\"\n            }\n          }\n        }\n      }\n    }\n  },\n  \"type\": \"test_plan\"\n}\n```\n\n----------------------------------------\n\nTITLE: Removing a for_each-Keyed Resource Instance with terraform state rm - Shell (Unix)\nDESCRIPTION: For resources managed with for_each, this Unix shell example shows how to remove a specific instance identified by the key 'example'. Proper quoting is needed as both brackets and quotes can interfere with shell parsing. The command only affects the Terraform state, not the underlying infrastructure.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/state/rm.mdx#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ terraform state rm 'packet_device.worker[\"example\"]'\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Provider Package Download Information\nDESCRIPTION: This JSON object represents the response from the provider package download API. It includes download URLs, checksums, supported protocols, and signing key information.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/provider-registry-protocol.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"protocols\": [\"4.0\", \"5.1\"],\n  \"os\": \"linux\",\n  \"arch\": \"amd64\",\n  \"filename\": \"terraform-provider-random_2.0.0_linux_amd64.zip\",\n  \"download_url\": \"https://releases.hashicorp.com/terraform-provider-random/2.0.0/terraform-provider-random_2.0.0_linux_amd64.zip\",\n  \"shasums_url\": \"https://releases.hashicorp.com/terraform-provider-random/2.0.0/terraform-provider-random_2.0.0_SHA256SUMS\",\n  \"shasums_signature_url\": \"https://releases.hashicorp.com/terraform-provider-random/2.0.0/terraform-provider-random_2.0.0_SHA256SUMS.sig\",\n  \"shasum\": \"5f9c7aa76b7c34d722fc9123208e26b22d60440cb47150dd04733b9b94f4541a\",\n  \"signing_keys\": {\n    \"gpg_public_keys\": [\n      {\n        \"key_id\": \"51852D87348FFC4C\",\n        \"ascii_armor\": \"-----BEGIN PGP PUBLIC KEY BLOCK-----\\nVersion: GnuPG v1\\n\\nmQENBFMORM0BCADBRyKO1MhCirazOSVwcfTr1xUxjPvfxD3hjUwHtjsOy/bT6p9f\\nW2mRPfwnq2JB5As+paL3UGDsSRDnK9KAxQb0NNF4+eVhr/EJ18s3wwXXDMjpIifq\\nfIm2WyH3G+aRLTLPIpscUNKDyxFOUbsmgXAmJ46Re1fn8uKxKRHbfa39aeuEYWFA\\n3drdL1WoUngvED7f+RnKBK2G6ZEpO+LDovQk19xGjiMTtPJrjMjZJ3QXqPvx5wca\\nKSZLr4lMTuoTI/ZXyZy5bD4tShiZz6KcyX27cD70q2iRcEZ0poLKHyEIDAi3TM5k\\nSwbbWBFd5RNPOR0qzrb/0p9ksKK48IIfH2FvABEBAAG0K0hhc2hpQ29ycCBTZWN1\\ncml0eSA8c2VjdXJpdHlAaGFzaGljb3JwLmNvbT6JATgEEwECACIFAlMORM0CGwMG\\nCwkIBwMCBhUIAgkKCwQWAgMBAh4BAheAAAoJEFGFLYc0j/xMyWIIAIPhcVqiQ59n\\nJc07gjUX0SWBJAxEG1lKxfzS4Xp+57h2xxTpdotGQ1fZwsihaIqow337YHQI3q0i\\nSqV534Ms+j/tU7X8sq11xFJIeEVG8PASRCwmryUwghFKPlHETQ8jJ+Y8+1asRydi\\npsP3B/5Mjhqv/uOK+Vy3zAyIpyDOMtIpOVfjSpCplVRdtSTFWBu9Em7j5I2HMn1w\\nsJZnJgXKpybpibGiiTtmnFLOwibmprSu04rsnP4ncdC2XRD4wIjoyA+4PKgX3sCO\\nklEzKryWYBmLkJOMDdo52LttP3279s7XrkLEE7ia0fXa2c12EQ0f0DQ1tGUvyVEW\\nWmJVccm5bq25AQ0EUw5EzQEIANaPUY04/g7AmYkOMjaCZ6iTp9hB5Rsj/4ee/ln9\\nwArzRO9+3eejLWh53FoN1rO+su7tiXJA5YAzVy6tuolrqjM8DBztPxdLBbEi4V+j\\n2tK0dATdBQBHEh3OJApO2UBtcjaZBT31zrG9K55D+CrcgIVEHAKY8Cb4kLBkb5wM\\nskn+DrASKU0BNIV1qRsxfiUdQHZfSqtp004nrql1lbFMLFEuiY8FZrkkQ9qduixo\\nmTT6f34/oiY+Jam3zCK7RDN/OjuWheIPGj/Qbx9JuNiwgX6yRj7OE1tjUx6d8g9y\\n0H1fmLJbb3WZZbuuGFnK6qrE3bGeY8+AWaJAZ37wpWh1p0cAEQEAAYkBHwQYAQIA\\nCQUCUw5EzQIbDAAKCRBRhS2HNI/8TJntCAClU7TOO/X053eKF1jqNW4A1qpxctVc\\nz8eTcY8Om5O4f6a/rfxfNFKn9Qyja/OG1xWNobETy7MiMXYjaa8uUx5iFy6kMVaP\\n0BXJ59NLZjMARGw6lVTYDTIvzqqqwLxgliSDfSnqUhubGwvykANPO+93BBx89MRG\\nunNoYGXtPlhNFrAsB1VR8+EyKLv2HQtGCPSFBhrjuzH3gxGibNDDdFQLxxuJWepJ\\nEK1UbTS4ms0NgZ2Uknqn1WRU1Ki7rE4sTy68iZtWpKQXZEJa0IGnuI2sSINGcXCJ\\noEIgXTMyCILo34Fa/C6VCm2WBgz9zZO8/rHIiQm1J5zqz0DrDwKBUM9C\\n=LYpS\\n-----END PGP PUBLIC KEY BLOCK-----\",\n        \"trust_signature\": \"\",\n        \"source\": \"HashiCorp\",\n        \"source_url\": \"https://www.hashicorp.com/security.html\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Double-Slash Syntax for Module Sub-directories in Git Repositories\nDESCRIPTION: This snippet demonstrates how to use the double-slash // syntax to reference a module located in a sub-directory of a Git repository, while also specifying a specific version with the ref parameter.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/sources.mdx#2025-04-22_snippet_16\n\nLANGUAGE: hcl\nCODE:\n```\ngit::https://example.com/network.git//modules/vpc?ref=v1.2.0\n```\n\n----------------------------------------\n\nTITLE: Example Usage of bcrypt Function in Terraform HCL\nDESCRIPTION: Shows an example of using the bcrypt function to hash the string 'hello world'. The function returns a hashed string in the Modular Crypt Format.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/bcrypt.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> bcrypt(\"hello world\")\n$2a$10$D5grTTzcsqyvAeIAnY/mYOIqliCoG7eAMX0/oFcuD.iErkksEbcAa\n```\n\n----------------------------------------\n\nTITLE: Splitting a String with split Function in Terraform HCL\nDESCRIPTION: This snippet demonstrates the syntax for calling the split function in Terraform HCL. The split function takes two arguments: a separator string and the input string to be split. It outputs a list of substrings separated by the given separator. This function requires no additional dependencies and is a built-in part of the Terraform configuration language. It expects the input string and separator to be UTF-8 compatible and returns a list of type string, with empty input yielding a list containing a single empty string.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/split.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nsplit(separator, string)\n```\n\n----------------------------------------\n\nTITLE: Using formatlist Function with Lists in HCL\nDESCRIPTION: These examples demonstrate how to use the `formatlist` function in Terraform HCL. The first example formats each element of a single list using a simple format string. The second example uses a static string argument ('Salutations') which is repeated for each element of the list argument during formatting. Both examples output a list of formatted strings.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/formatlist.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> formatlist(\"Hello, %s!\", [\"Valentina\", \"Ander\", \"Olivia\", \"Sam\"])\n[\n  \"Hello, Valentina!\",\n  \"Hello, Ander!\",\n  \"Hello, Olivia!\",\n  \"Hello, Sam!\",\n]\n> formatlist(\"%s, %s!\", \"Salutations\", [\"Valentina\", \"Ander\", \"Olivia\", \"Sam\"])\n[\n  \"Salutations, Valentina!\",\n  \"Salutations, Ander!\",\n  \"Salutations, Olivia!\",\n  \"Salutations, Sam!\",\n]\n```\n\n----------------------------------------\n\nTITLE: Using setunion Function with String Sets in Terraform HCL\nDESCRIPTION: Demonstrates using the setunion function with multiple sets of strings. This example combines three sets: [\"a\", \"b\"], [\"b\", \"c\"], and [\"d\"], resulting in a single set containing all unique elements.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/setunion.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> setunion([\"a\", \"b\"], [\"b\", \"c\"], [\"d\"])\n[\n  \"d\",\n  \"b\",\n  \"c\",\n  \"a\",\n]\n```\n\n----------------------------------------\n\nTITLE: Example Usage of textencodebase64 Function with UTF-16LE Encoding in Terraform\nDESCRIPTION: Example demonstrating how to use the textencodebase64 function to encode the string \"Hello World\" using UTF-16LE encoding, which is commonly used by Windows-originated software like PowerShell.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/textencodebase64.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> textencodebase64(\"Hello World\", \"UTF-16LE\")\nSABlAGwAbABvACAAVwBvAHIAbABkAA==\n```\n\n----------------------------------------\n\nTITLE: File Function Basic Syntax\nDESCRIPTION: Shows the basic syntax for using the file function in Terraform. The function takes a path parameter and returns the file contents as a string.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/file.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nfile(path)\n```\n\n----------------------------------------\n\nTITLE: Example Output for Network and Subnet Combinations - Terraform HCL\nDESCRIPTION: This snippet displays the expected output of the network_subnets local — a list of subnet descriptions, each combining attributes from a network and a subnet, including derived CIDR blocks and network IDs. Useful for documentation, validation, and debugging. Output: Static list of sample subnet objects, one per distinct network/subnet pair.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/setproduct.mdx#2025-04-22_snippet_9\n\nLANGUAGE: HCL\nCODE:\n```\n[\n  {\n    \"cidr_block\" = \"10.1.16.0/20\"\n    \"network_id\" = \"vpc-0bfb00ca6173ea5aa\"\n    \"network_key\" = \"a\"\n    \"subnet_key\" = \"a\"\n  },\n  {\n    \"cidr_block\" = \"10.1.32.0/20\"\n    \"network_id\" = \"vpc-0bfb00ca6173ea5aa\"\n    \"network_key\" = \"a\"\n    \"subnet_key\" = \"b\"\n  },\n  {\n    \"cidr_block\" = \"10.1.48.0/20\"\n    \"network_id\" = \"vpc-0bfb00ca6173ea5aa\"\n    \"network_key\" = \"a\"\n    \"subnet_key\" = \"c\"\n  },\n  {\n    \"cidr_block\" = \"10.2.16.0/20\"\n    \"network_id\" = \"vpc-0d193e011f6211a7d\"\n    \"network_key\" = \"b\"\n    \"subnet_key\" = \"a\"\n  },\n  {\n    \"cidr_block\" = \"10.2.32.0/20\"\n    \"network_id\" = \"vpc-0d193e011f6211a7d\"\n    \"network_key\" = \"b\"\n    \"subnet_key\" = \"b\"\n  },\n  {\n    \"cidr_block\" = \"10.2.48.0/20\"\n    \"network_id\" = \"vpc-0d193e011f6211a7d\"\n    \"network_key\" = \"b\"\n    \"subnet_key\" = \"c\"\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Using the sum Function in Terraform\nDESCRIPTION: Example demonstrating how to use the sum function to calculate the total of a list of numbers. The function takes a list containing both integers and floating-point numbers and returns their sum as a floating-point value.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/sum.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> sum([10, 13, 6, 4.5])\n33.5\n```\n\n----------------------------------------\n\nTITLE: Configuring Provider Installation Paths in Terraform\nDESCRIPTION: This HCL snippet demonstrates how to configure specific paths for provider installations using a local filesystem mirror and directly from origin registries. The `filesystem_mirror` block requires a `path` parameter to specify the directory to search, while the `direct` block takes optional `include` and `exclude` parameters to filter providers.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/config/config-file.mdx#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nprovider_installation {\n  filesystem_mirror {\n    path    = \"/usr/share/terraform/providers\"\n    include = [\"example.com/*/*\"]\n  }\n  direct {\n    exclude = [\"example.com/*/*\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Component Removal with for_each in Terraform\nDESCRIPTION: Example of removing multiple components using for_each to handle multiple AWS regions.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/reference/tfstack.mdx#2025-04-22_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\nremoved {\n    source = \"./s3\"\n\n    for_each = var.regions\n\n    from = component.s3_buckets[each.value]\n    providers = {\n        aws = provider.aws.config[each.value]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Workspace and Running Remote Terraform Plan - CLI - shell\nDESCRIPTION: This shell snippet shows switching to a remote workspace via the Terraform CLI and triggering a remote plan execution against HCP Terraform. After selecting the correct workspace, 'terraform plan' runs remotely, integrating outputs with the web UI for further review. Dependent on valid workspace definitions and HCP Terraform credentials. Outputs include command-line streaming of remote execution and a browser-accessible plan.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/intro/core-workflow.mdx#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ terraform workspace select my-app-dev\\nSwitched to workspace \\\"my-app-dev\\\".\\n\\n$ terraform plan\\n\\nRunning plan remotely in Terraform Enterprise.\\n\\nOutput will stream here. To view this plan in a browser, visit:\\n\\nhttps://app.terraform.io/my-org/my-app-dev/.../\\n\\nRefreshing Terraform state in-memory prior to plan...\\n\n```\n\n----------------------------------------\n\nTITLE: Importing AWS Instance into Resource with Count\nDESCRIPTION: This command imports an AWS EC2 instance with ID 'i-abcd1234' into the first instance of the 'aws_instance.baz' resource configured with count.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/import.mdx#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ terraform import 'aws_instance.baz[0]' i-abcd1234\n```\n\n----------------------------------------\n\nTITLE: State Representation Format in Terraform JSON Output\nDESCRIPTION: The JSON structure for Terraform state representation. This format includes the values representation object derived from the state and the Terraform version that created it. Since state is fully known, the values representation is always complete.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/json-format.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // \"values\" is a values representation object derived from the values in the\n  // state. Because the state is always fully known, this is always complete.\n  \"values\": <values-representation>\n\n  \"terraform_version\": \"version.string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Describing Terraform Resource Object Structure - Terraform Resource - JSON\nDESCRIPTION: This snippet demonstrates the structure of a Terraform 'resource' object as used in event messages. It breaks down a resource address into key components required for unambiguous referencing, such as full address, module, type, name, and provider. Consumers must extract and process these fields to correlate events with actual infrastructure components.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/machine-readable-ui.mdx#2025-04-22_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"addr\": \"module.pets.random_pet.pet[\\\"friend\\\"]\",\n  \"module\": \"module.pets\",\n  \"resource\": \"random_pet.pet[\\\"friend\\\"]\",\n  \"implied_provider\": \"random\",\n  \"resource_type\": \"random_pet\",\n  \"resource_name\": \"pet\",\n  \"resource_key\": \"friend\"\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Provider Metadata in Terraform Module\nDESCRIPTION: This HCL snippet demonstrates how to specify provider metadata within a Terraform module using the `provider_meta` nested block. This block should match the provider schema and allows the module to pass specific metadata to the provider. It requires Terraform version 0.13.0 or higher and the appropriate provider version supporting the schema.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/provider-meta.mdx#2025-04-22_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nterraform {\n  provider_meta \"my-provider\" {\n    hello = \"world\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Computing SHA256 Hash in Terraform\nDESCRIPTION: Demonstrates using the sha256 function to compute the SHA256 hash of a string. The function first encodes the input string as UTF-8, applies the SHA256 algorithm, and returns the hash encoded as lowercase hexadecimal digits.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/sha256.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> sha256(\"hello world\")\nb94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable for Terraform (Shell)\nDESCRIPTION: Demonstrates how to set a simple string-typed Terraform variable using an environment variable in a Unix-style shell.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/values/variables.mdx#2025-04-22_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\n$ export TF_VAR_image_id='ami-abc123'\n```\n\n----------------------------------------\n\nTITLE: Accessing Remote State from COS in Another Configuration\nDESCRIPTION: Example of using the terraform_remote_state data source to access state stored in COS from another Terraform configuration.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/cos.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"terraform_remote_state\" \"foo\" {\n  backend = \"cos\"\n\n  config = {\n    region = \"ap-guangzhou\"\n    bucket = \"bucket-for-terraform-state-1258798060\"\n    prefix = \"terraform/state\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Terraform Test State in JSON Format\nDESCRIPTION: This JSON snippet shows the structure of a log entry from a Terraform test run. It includes metadata such as log level, message, module, and timestamp, as well as detailed information about the test state including instances, planned resources, and test interrupts.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/machine-readable-ui.mdx#2025-04-22_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@level\": \"info\",\n  \"@message\": \"-verbose flag enabled, printing state\",\n  \"@module\": \"terraform.ui\",\n  \"@testfile\": \"validation.tftest.hcl\",\n  \"@testrun\": \"successful_validation\",\n  \"@timestamp\": \"2023-08-09T17:18:21.173008+02:00\",\n  \"test_interrupt\": {\n    \"state\": [\n      {\n        \"instance\": \"aws_instance.primary\"\n      }\n    ],\n    \"states\": {\n      \"unsuccessful_validation\": [\n        {\n          \"instance\": \"aws_instance.secondary\"\n        }\n      ]\n    },\n    \"planned\": [\n      \"aws_instance.secondary\"\n    ]\n  },\n  \"type\": \"test_interrupt\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running a Specific Terraform Test File (Unix)\nDESCRIPTION: Demonstrates executing the `terraform test` command on Linux, macOS, or other Unix-like systems, targeting only the `validations.tftest.hcl` file located within the default `tests` directory using the `-filter` option.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/test.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform test -filter=tests/validations.tftest.hcl\n```\n\n----------------------------------------\n\nTITLE: Downloading a Specific Module Version via curl Command (Terraform Registry API) in Text\nDESCRIPTION: Illustrates how to initiate a download request for a specific module version from the registry via curl. The API responds with an HTTP 204 and sets the 'X-Terraform-Get' header, which indicates the actual source archive location. This example demonstrates proper endpoint usage for module retrieval; requires curl and internet connectivity.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/module-registry-protocol.mdx#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n$ curl -i 'https://registry.terraform.io/v1/modules/hashicorp/consul/aws/0.0.1/download'\n```\n\n----------------------------------------\n\nTITLE: Defining Upstream Inputs for Stack Dependencies\nDESCRIPTION: The 'upstream_input' block specifies another Stack to consume outputs from, requiring Terraform version 'terraform_1.10.0-alpha20241009' or higher. This block is defined by 'type' and 'source', where 'type' is always 'stack', and 'source' specifies the URL of the upstream stack.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/reference/tfdeploy.mdx#2025-04-22_snippet_12\n\nLANGUAGE: hcl\nCODE:\n```\nupstream_input \"upstream_stack_name\" {\n  type   = \"stack\"\n  source = \"app.terraform.io/{organization_name}/{project_name}/{upstream_stack_name}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating variable type inconsistency in Terraform HCL\nDESCRIPTION: This code snippet demonstrates a configuration that would cause a type inconsistency error. It defines an empty list variable, a local value with a complex structure, and an output that conditionally selects between them, leading to type matching issues.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/type.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"list\" {\n  default = []\n}\n\nlocals {\n  default_list = [\n    {\n      foo = \"bar\"\n      map = { bleep = \"bloop\" }\n    },\n    {\n      beep = \"boop\"\n    },\n  ]\n}\n\noutput \"list\" {\n  value = var.list != [] ? var.list : local.default_list\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Auto-Approve Rule for No Pet Component Changes in Terraform\nDESCRIPTION: This snippet demonstrates how to create an 'auto_approve' orchestration rule that automatically approves plans if they do not include any changes for the 'pet' component. It uses the 'context' variable to check the component changes.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/deploy/conditions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\norchestrate \"auto_approve\" \"no_pet_changes\" {\n    check {\n        # Check that the pet component has no changes\n        condition = context.plan.component_changes[\"component.pet\"].total == 0\n        reason = \"Not automatically approved because changes proposed to pet component.\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Credentials Helper in Terraform\nDESCRIPTION: This code snippet sets up a `credentials_helper` to manage credential storage outside the CLI configuration file. The helper is identified by its label, and optional `args` can be used to pass additional arguments.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/config/config-file.mdx#2025-04-22_snippet_2\n\nLANGUAGE: HCL\nCODE:\n```\ncredentials_helper \"example\" {\n  args = []\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Index Example - Terraform HCL\nDESCRIPTION: This example demonstrates the use of the index function on a list literal [\"a\", \"b\", \"c\"] to locate the position of the value \"b\", returning 1. The list is provided directly within the function call, and the output shows the expected result. No external dependencies are needed. This snippet illustrates expected function behavior for existing values.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/index_function.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nindex([\"a\", \"b\", \"c\"], \"b\")\n1\n```\n\n----------------------------------------\n\nTITLE: Zipmap Function Example in Terraform HCL\nDESCRIPTION: Shows a practical example of using the zipmap function to create a map from two lists. In this example, it creates a map with keys \"a\" and \"b\" mapped to values 1 and 2 respectively.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/zipmap.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> zipmap([\"a\", \"b\"], [1, 2])\n{\n  \"a\" = 1\n  \"b\" = 2\n}\n```\n\n----------------------------------------\n\nTITLE: Using trimsuffix with a non-matching suffix in Terraform\nDESCRIPTION: This example shows what happens when the specified suffix 'cat' doesn't match the end of the string 'helloworld'. The original string is returned unchanged.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/trimsuffix.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> trimsuffix(\"helloworld\", \"cat\")\nhelloworld\n```\n\n----------------------------------------\n\nTITLE: Example of Resource Address Change using moved Block\nDESCRIPTION: This code example shows how to move an AWS instance in Terraform by changing its address from `aws_instance.a` to `aws_instance.b` using a `moved` block. It demonstrates the use of `from` and `to` parameters to specify the existing resource location and its new location, enabling Terraform to manage the resource's reallocation without deletion.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/moved.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nmoved {\n  from = aws_instance.a\n  to   = aws_instance.b\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Unicode Substring in HCL\nDESCRIPTION: Illustrates that the HCL `substr` function counts offsets and lengths based on Unicode characters, not bytes. This example extracts the first Unicode character ('🤔') from the string '🤔🤷' starting at offset 0 with a length of 1.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/substr.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n> substr(\"🤔🤷\", 0, 1)\n🤔\n```\n\n----------------------------------------\n\nTITLE: Terraform Provisioners with JSON\nDESCRIPTION: This JSON snippet illustrates multiple provisioner blocks within a resource, maintaining their order using an array. It defines 'local-exec', 'file', and 'remote-exec' provisioners for an AWS instance, maintaining configuration order significance in JSON.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/syntax/json.mdx#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resource\": {\n    \"aws_instance\": {\n      \"example\": {\n        \"provisioner\": [\n          {\n            \"local-exec\": {\n              \"command\": \"echo 'Hello World' >example.txt\"\n            }\n          },\n          {\n            \"file\": {\n              \"source\": \"example.txt\",\n              \"destination\": \"/tmp/example.txt\"\n            }\n          },\n          {\n            \"remote-exec\": {\n              \"inline\": [\"sudo install-something -f /tmp/example.txt\"]\n            }\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using terraform fmt Command in HCL\nDESCRIPTION: The basic usage of the `terraform fmt` command, which scans the current directory for configuration files. It can also accept specific targets like directories, files, or standard input.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/fmt.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform fmt [options] [target...]\n```\n\n----------------------------------------\n\nTITLE: Example Configuration for Varset Store Access\nDESCRIPTION: This snippet exemplifies accessing 'varset' type stores to consume global variables using specific 'id' and 'category'. It configures two 'store' blocks for accessing both Terraform and environment variables, facilitating data input in deployment blocks through referenced variable sets.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/reference/tfdeploy.mdx#2025-04-22_snippet_9\n\nLANGUAGE: hcl\nCODE:\n```\nstore \"varset\" \"tokens\" {\n  id       = \"varset-###\"\n  category = \"terraform\"\n}\n\nstore \"varset\" \"available_regions\" {\n  id       = \"varset-###\"\n  category = \"env\"\n}\n\ndeployment \"main\" {\n  inputs = {\n    regions   = store.varset.available_regions.regions\n    tfe_token = store.varset.tokens.tfe_token\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing All Resources with Terraform CLI\nDESCRIPTION: This shell command lists all resources within the Terraform state, including those within modules, by default. It's useful for getting a complete overview of the current infrastructure state. No specific parameters are needed when invoking the command in this manner.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/state/list.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ terraform state list\naws_instance.foo\naws_instance.bar[0]\naws_instance.bar[1]\nmodule.elb.aws_elb.main\n```\n\n----------------------------------------\n\nTITLE: Basic timecmp Function Syntax in Terraform HCL\nDESCRIPTION: The basic syntax for using the timecmp function in Terraform, which takes two timestamp arguments and returns a numeric value indicating their ordering.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/timecmp.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ntimecmp(timestamp_a, timestamp_b)\n```\n\n----------------------------------------\n\nTITLE: Basic filebase64 Function Syntax in Terraform HCL\nDESCRIPTION: Demonstrates the basic syntax for using the filebase64 function to read and encode file contents.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/filebase64.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nfilebase64(path)\n```\n\n----------------------------------------\n\nTITLE: Defining Module Registry Service Discovery Document using JSON\nDESCRIPTION: Specifies the 'modules.v1' key for the service discovery protocol, mapping to the base URL for registry API endpoints. Registries implement this response at their discovery endpoint, allowing Terraform CLI to locate and interact with the module API. Requires the registry server to respond with a valid JSON object that includes the desired protocol mapping.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/module-registry-protocol.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"modules.v1\": \"/terraform/modules/v1/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the setunion Function Syntax in Terraform HCL\nDESCRIPTION: Shows the basic syntax for calling the setunion function in Terraform. The function accepts multiple sets as arguments and returns their union.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/setunion.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nsetunion(sets...)\n```\n\n----------------------------------------\n\nTITLE: Defining Syntax for formatlist Function in HCL\nDESCRIPTION: This snippet shows the general syntax for the `formatlist` function in HCL. It takes a format specification string (`spec`) and a variable number of subsequent arguments (`values...`). The function processes these values according to the spec string to produce a list of strings. The specification syntax is the same as the `format` function.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/formatlist.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nformatlist(spec, values...)\n```\n\n----------------------------------------\n\nTITLE: Declaring String Variable in Terraform (HCL)\nDESCRIPTION: Demonstrates how to declare a simple string-typed variable in Terraform using HCL syntax.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/values/variables.mdx#2025-04-22_snippet_15\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"moose\" {\n  type = string\n}\n```\n\n----------------------------------------\n\nTITLE: Disable Input Option for terraform apply (CLI)\nDESCRIPTION: The `-input=false` option disables all interactive prompts from Terraform, including plan approval, potentially causing the apply to fail if confirmation is required. It's often used with `-auto-approve` or a saved plan in automation.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/apply.mdx#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n-input=false\n```\n\n----------------------------------------\n\nTITLE: Configuring Provider Network Mirror in Terraform CLI Configuration (HCL)\nDESCRIPTION: Demonstrates how to enable a provider network mirror in Terraform by specifying the mirror URL in the CLI configuration file using the provider_installation block. This setup is required for Terraform to fetch providers from an alternative source instead of the default registry. The key parameter is the 'url', which should point to the base URL of the mirror (must use https and a trailing slash); there are no additional dependencies other than Terraform CLI v0.13.2 or later. Inputs: None (example config); Output: Terraform CLI uses the specified URL for provider downloads.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/provider-network-mirror-protocol.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nprovider_installation {\n  network_mirror {\n    url = \"https://terraform.example.com/providers/\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Terraform Apply with Destroy Option in Shell\nDESCRIPTION: This command is equivalent to 'terraform destroy', used to deprovision all objects managed by a Terraform configuration. It's available in Terraform v0.15.2 and later versions.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/destroy.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform apply -destroy\n```\n\n----------------------------------------\n\nTITLE: JSON Structure for Block Representation\nDESCRIPTION: Details the JSON sub-object structure used to describe blocks within a schema (providers, resources, nested blocks). It includes maps for 'attributes' (defining type, description, required/optional status, computed status, and sensitivity) and 'block_types' for nested blocks (specifying nesting mode, block structure, and item counts).\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/providers/schema.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // \"attributes\" describes any attributes that appear directly inside the\n  // block. Keys in this map are the attribute names.\n  \"attributes\":  {\n    \"example_attribute_name\": {\n      // \"type\" is a representation of a type specification\n      // that the attribute's value must conform to.\n      \"type\": \"string\",\n\n      // \"description\" is an English-language description of\n      // the purpose and usage of the attribute.\n      \"description\": \"string\",\n\n      // \"required\", if set to true, specifies that an\n      // omitted or null value is not permitted.\n      \"required\": bool,\n\n      // \"optional\", if set to true, specifies that an\n      // omitted or null value is permitted.\n      \"optional\": bool,\n\n      // \"computed\", if set to true, indicates that the\n      // value comes from the provider rather than the\n      // configuration.\n      \"computed\": bool,\n\n      // \"sensitive\", if set to true, indicates that the\n      // attribute may contain sensitive information.\n      \"sensitive\": bool\n    },\n  },\n  // \"block_types\" describes any nested blocks that appear directly\n  // inside the block.\n  // Keys in this map are the names of the block_type.\n  \"block_types\": {\n    \"example_block_name\": {\n      // \"nesting_mode\" describes the nesting mode for the\n      // child block, and can be one of the following:\n      // \tsingle\n      // \tlist\n      // \tset\n      // \tmap\n      \"nesting_mode\": \"list\",\n      \"block\": <block-representation>,\n\n      // \"min_items\" and \"max_items\" set lower and upper\n      // limits on the number of child blocks allowed for\n      // the list and set modes. These are\n      // omitted for other modes.\n      \"min_items\": 1,\n      \"max_items\": 3\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Configuration for Upstream Inputs\nDESCRIPTION: An example using 'upstream_input' to consume data from a network Stack, incorporating 'type' and 'source' to define dependencies. The downstream Stack uses 'upstream_input' to access outputs like VPC ID from the upstream Stack, facilitating inter-stack communications.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/reference/tfdeploy.mdx#2025-04-22_snippet_13\n\nLANGUAGE: hcl\nCODE:\n```\n# Application Stack's deployment configuration\n\nupstream_input \"network_stack\" {\n  type   = \"stack\"\n  source = \"app.terraform.io/hashicorp/Default Project/networking-stack\"\n}\n\ndeployment \"application\" {\n  inputs = {\n    vpc_id = upstream_input.network_stack.vpc_id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the transpose Function in Terraform\nDESCRIPTION: This example demonstrates how to use the transpose function to swap keys and values in a map of lists of strings. It shows the input map and the resulting output after transposition.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/transpose.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> transpose({\"a\" = [\"1\", \"2\"], \"b\" = [\"2\", \"3\"]})\n{\n  \"1\" = [\n    \"a\",\n  ],\n  \"2\" = [\n    \"a\",\n    \"b\",\n  ],\n  \"3\" = [\n    \"b\",\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Backend with GitHub OIDC Authentication\nDESCRIPTION: Example configuration for setting up Terraform backend with Azure Blob Storage using GitHub OpenID Connect authentication. Includes required settings for storage account access and Azure AD authentication.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/azurerm.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  backend \"azurerm\" {\n    use_oidc             = true\n    use_azuread_auth     = true\n    tenant_id            = \"00000000-0000-0000-0000-000000000000\"\n    client_id            = \"00000000-0000-0000-0000-000000000000\"\n    storage_account_name = \"abcd1234\"\n    container_name       = \"tfstate\"\n    key                  = \"prod.terraform.tfstate\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Type Conversion Examples in Coalesce Function\nDESCRIPTION: Illustrates type conversion behavior when mixing different argument types in the coalesce function, including successful conversions and error cases.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/coalesce.mdx#2025-04-22_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\n> coalesce(1, \"hello\")\n\"1\"\n> coalesce(true, \"hello\")\n\"true\"\n> coalesce({}, \"hello\")\n\nError: Error in function call\n\nCall to function \"coalesce\" failed: all arguments must have the same type.\n```\n\n----------------------------------------\n\nTITLE: Grouping Mode For Expression\nDESCRIPTION: Demonstrates using grouping mode with ... to create a map of lists grouping users by role.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/for.mdx#2025-04-22_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"users\" {\n  type = map(object({\n    role = string\n  }))\n}\n\nlocals {\n  users_by_role = {\n    for name, user in var.users : user.role => name...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Intersection of Mixed-Type Sets in HCL\nDESCRIPTION: Illustrates `setintersection` operating on sets with mixed element types (strings and numbers). The input sets are `[\"bob\",\"jane\",3]`, `[\"jane\",3,\"ajax\",10]`, and `[\"3\",\"jane\",26,\"nomad\"]`. The function identifies the common elements as the string \"jane\" and the string representation \"3\" (implicitly converting the number 3 for comparison), returning them in a new set.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/setintersection.mdx#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\n> setintersection([\"bob\",\"jane\",3], [\"jane\",3,\"ajax\",10], [\"3\",\"jane\",26,\"nomad\"])\ntoset([\n  \"3\",\n  \"jane\",\n])\n```\n\n----------------------------------------\n\nTITLE: Renaming a Resource in Terraform HCL\nDESCRIPTION: This snippet shows the process of renaming a resource in Terraform, using a 'resource' block to define the new name and a 'moved' block to keep track of the change. Terraform updates its state to treat existing resources under the old name as if they were created with the new name.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/develop/refactoring.mdx#2025-04-22_snippet_1\n\nLANGUAGE: HCL\nCODE:\n```\nresource \"aws_instance\" \"b\" {\n  count = 2\n\n  # (resource-type-specific configuration)\n}\n\nmoved {\n  from = aws_instance.a\n  to   = aws_instance.b\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Using slice Function in Terraform HCL\nDESCRIPTION: This example demonstrates using the slice function to extract elements from a list of strings. It takes elements from index 1 through 2 (indices 1 and 2) from a four-element list.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/slice.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> slice([\"a\", \"b\", \"c\", \"d\"], 1, 3)\n[\n  \"b\",\n  \"c\",\n]\n```\n\n----------------------------------------\n\nTITLE: Displaying Complete Module Structure in Shell\nDESCRIPTION: This shell command snippet showcases the complete directory structure of a Terraform module utilizing the \\'tree\\' command. It includes optional components like nested modules and examples, demonstrating a comprehensive setup that extends beyond minimal requirements with the inclusion of multiple submodule and example directories.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/develop/structure.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ tree complete-module/\n.\n├── README.md\n├── main.tf\n├── variables.tf\n├── outputs.tf\n├── ...\n├── modules/\n│   ├── nestedA/\n│   │   ├── README.md\n│   │   ├── variables.tf\n│   │   ├── main.tf\n│   │   ├── outputs.tf\n│   ├── nestedB/\n│   ├── .../\n├── examples/\n│   ├── exampleA/\n│   │   ├── main.tf\n│   ├── exampleB/\n│   ├── .../\n```\n\n----------------------------------------\n\nTITLE: Practical Range Function Usage - HCL\nDESCRIPTION: Example showing practical usage of range function with variables and string formatting to generate name sequences.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/range.mdx#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"name_counts\" {\n  type    = map(number)\n  default = {\n    \"foo\" = 2\n    \"bar\" = 4\n  }\n}\n\nlocals {\n  expanded_names = {\n    for name, count in var.name_counts : name => [\n      for i in range(count) : format(\"%s%02d\", name, i)\n    ]\n  }\n}\n\noutput \"expanded_names\" {\n  value = local.expanded_names\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming a Resource Block in Terraform Configuration (Diff)\nDESCRIPTION: Illustrates the change in a Terraform configuration file when renaming a resource block from `packet_device.worker` to `packet_device.helper`. This configuration change necessitates using the `terraform state mv` command afterwards to update the state accordingly.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/state/mv.mdx#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n-resource \"packet_device\" \"worker\" {\n+resource \"packet_device\" \"helper\" {\n   # ...\n }\n```\n\n----------------------------------------\n\nTITLE: Using Predefined Namespace Keywords with uuidv5 in Terraform\nDESCRIPTION: Examples of using the predefined namespace keywords (dns, url, oid, x500) with the uuidv5 function to generate deterministic UUIDs.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/uuidv5.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> uuidv5(\"dns\", \"www.terraform.io\")\na5008fae-b28c-5ba5-96cd-82b4c53552d6\n\n> uuidv5(\"url\", \"https://www.terraform.io/\")\n9db6f67c-dd95-5ea0-aa5b-e70e5c5f7cf5\n\n> uuidv5(\"oid\", \"1.3.6.1.4\")\naf9d40a5-7a36-5c07-b23a-851cd99fbfa5\n\n> uuidv5(\"x500\", \"CN=Example,C=GB\")\n84e09961-4aa4-57f8-95b7-03edb1073253\n```\n\n----------------------------------------\n\nTITLE: Extracting Directory Path with dirname in Terraform HCL\nDESCRIPTION: This example demonstrates the basic usage of the `dirname` function in Terraform HCL. It takes the string \"foo/bar/baz.txt\" as input and returns \"foo/bar\", effectively removing the last part of the path ('baz.txt'). This operation is performed purely on the string representation and does not involve filesystem access.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/dirname.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> dirname(\"foo/bar/baz.txt\")\nfoo/bar\n```\n\n----------------------------------------\n\nTITLE: Reporting Test File Progress and Status - Terraform Test - JSON\nDESCRIPTION: This snippet showcases the 'test_file' progress message produced by Terraform's testing subsystem. The JSON payload identifies the test file, its progress phase, and status upon completion (e.g., pass, error, fail, skip). Required parameters include the test file's path and status, providing detailed tracking of test execution in automated pipelines or dashboards.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/machine-readable-ui.mdx#2025-04-22_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@level\": \"info\",\n  \"@message\": \"main.tftest.hcl... pass\",\n  \"@module\": \"terraform.ui\",\n  \"@testfile\": \"validation.tftest.hcl\",\n  \"@timestamp\": \"2023-08-09T16:12:30.724368+02:00\",\n  \"test_file\": {\n    \"path\": \"validation.tftest.hcl\",\n    \"progress\": \"complete\",\n    \"status\": \"pass\"\n  },\n  \"type\": \"test_file\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Variable for Import ID in Terraform\nDESCRIPTION: Demonstrates how to use the value of a variable as the import ID in an import block.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/import/index.mdx#2025-04-22_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nimport {\n  to = aws_instance.example\n  id = var.instance_id\n}\n```\n\n----------------------------------------\n\nTITLE: JSON-style Formatting with %#v in HCL\nDESCRIPTION: Shows how to use the %#v verb for JSON-style formatting of various data types.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/format.mdx#2025-04-22_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\n> format(\"%#v\", \"hello\")\n\"\\\"hello\\\"\"\n> format(\"%#v\", true)\n\"true\"\n> format(\"%#v\", 1)\n\"1\"\n> format(\"%#v\", {a = 1})\n\"{\\\"a\\\":1}\"\n> format(\"%#v\", [true])\n\"[true]\"\n> format(\"%#v\", null)\n\"null\"\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Provider with Web Identity in HCL\nDESCRIPTION: This snippet shows how to configure the AWS provider to use the web identity token generated in the deployment configuration.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/deploy/config.mdx#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\n# providers.tfstack.hcl\n\nprovider \"aws\" \"this\" {\n  config {\n    region = var.aws_region\n    assume_role_with_web_identity {\n      role_arn           = var.aws_role\n      web_identity_token = var.aws_token\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Terraform Variables with Environment Variables\nDESCRIPTION: Example showing how to set Terraform variables using environment variables prefixed with TF_VAR_ in a Unix shell environment.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/values/variables.mdx#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n$ export TF_VAR_image_id=ami-abc123\n$ terraform plan\n...\n```\n\n----------------------------------------\n\nTITLE: Console Examples of nonsensitive Function\nDESCRIPTION: Terraform console examples showing various uses of the nonsensitive function, including both valid and invalid usage patterns.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/nonsensitive.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n> var.mixed_content_json\n(sensitive value)\n> local.mixed_content\n(sensitive value)\n> local.mixed_content[\"password\"]\n(sensitive value)\n> nonsensitive(local.mixed_content[\"username\"])\n\"zqb\"\n> nonsensitive(\"clear\")\n\nError: Invalid function argument\n\nInvalid value for \"value\" parameter: the given value is not sensitive, so this\ncall is redundant.\n```\n\n----------------------------------------\n\nTITLE: Querying Provider Package Download Information using cURL\nDESCRIPTION: This cURL command demonstrates how to request download information for a specific version of the 'random' provider for Linux AMD64 platform.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/provider-registry-protocol.mdx#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl 'https://registry.terraform.io/v1/providers/hashicorp/random/2.0.0/download/linux/amd64'\n```\n\n----------------------------------------\n\nTITLE: Accessing Map Values in Terraform Console\nDESCRIPTION: Demonstrates how to access and print a value from a map variable in the Terraform console.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/console.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n> var.apps.foo\n```\n\n----------------------------------------\n\nTITLE: Invoking a Terraform Credentials Helper with the 'forget' Verb (Shell)\nDESCRIPTION: This shell command demonstrates how Terraform executes a configured credentials helper (`terraform-credentials-credstore`) to delete stored credentials for a specific hostname (`app.terraform.io`) using the `forget` verb. No JSON credentials object is exchanged for this operation. The helper should exit silently with status 0 on success.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/credentials-helpers.mdx#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nterraform-credentials-credstore --host=credstore.example.com forget app.terraform.io\n```\n\n----------------------------------------\n\nTITLE: Configuring Store Block in Terraform\nDESCRIPTION: The 'store' block is used to define key-value secrets or variable sets in a Terraform deployment. It accepts headers for store type and name, and its fields specify where and how credentials are accessed. It requires a defined 'store_type' and 'store_name'. Outputs are secret or variable references for use in deployments.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/reference/tfdeploy.mdx#2025-04-22_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\nstore \"store_type\" \"store_name\" {\n  <store type specific arguments>\n}\n```\n\n----------------------------------------\n\nTITLE: Using base64sha256 Function in Terraform\nDESCRIPTION: This example demonstrates how to use the base64sha256 function in Terraform. It computes the SHA256 hash of the string 'hello world' and encodes it with Base64.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/base64sha256.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> base64sha256(\"hello world\")\nuU0nuZNNPgilLlLX2n2r+sSE7+N6U4DukIj3rOLvzek=\n```\n\n----------------------------------------\n\nTITLE: Computing SHA-512 Hash of a File Using filesha512 in Terraform HCL\nDESCRIPTION: This example illustrates the usage of filesha512, closely related to filesha256, to compute the SHA-512 hash of a file named example.txt. The command takes the file path as input and returns a string with the hex-encoded hash value. Use this function for obtaining SHA-512 digests of entire files. No extra dependencies are required.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/filesha256.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n$ filesha512(\"example.txt\")\na591a6d40bf420404a011733cfb7b190d62c65bf0bcda32b0b571d0f6a26f2bb\n```\n\n----------------------------------------\n\nTITLE: Querying Module Versions via curl Command (Terraform Registry API) in Text\nDESCRIPTION: Shows an example HTTP GET request to list available versions for a module via the registry API using curl. The command retrieves version data for the specified namespace, name, and system. No dependencies required except curl and network access; outputs JSON describing the available module versions.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/module-registry-protocol.mdx#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n$ curl 'https://registry.terraform.io/v1/modules/hashicorp/consul/aws/versions'\n```\n\n----------------------------------------\n\nTITLE: Map Iteration with Keys in HCL\nDESCRIPTION: Shows how to iterate over a map with access to both keys and values, calculating the combined length of each key-value pair.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/for.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n[for k, v in var.map : length(k) + length(v)]\n```\n\n----------------------------------------\n\nTITLE: Specifying Cloud Organization in Terraform HCL\nDESCRIPTION: This example shows how to connect a configuration to a particular organization in HCP Terraform by specifying the `organization` parameter within the `cloud` block. This field is required for remote operations and may be set as an environment variable (`TF_CLOUD_ORGANIZATION`) or directly as a string. Only one organization may be set and is referenced statically.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/terraform.mdx#2025-04-22_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  cloud  {\n    organization = \"<organization-name>\"\n  }\n  # . . .\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Values Using tostring - Terraform - HCL\nDESCRIPTION: These examples show the application of the 'tostring' function to various input types in Terraform. Conversions for string, number, bool, and null are demonstrated, along with an invalid use case for a list. The outputs show how primitive types and null are converted, while complex types produce an error. Requires Terraform and configuration files using HCL syntax. Inputs are values passed to 'tostring'; outputs are their string equivalents or an error for unsupported types. Limitations: Only primitive types and null can be converted.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/tostring.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> tostring(\"hello\")\n\"hello\"\n```\n\nLANGUAGE: hcl\nCODE:\n```\n> tostring(1)\n\"1\"\n```\n\nLANGUAGE: hcl\nCODE:\n```\n> tostring(true)\n\"true\"\n```\n\nLANGUAGE: hcl\nCODE:\n```\n> tostring(null)\ntostring(null)\n```\n\nLANGUAGE: hcl\nCODE:\n```\n> tostring([])\nError: Invalid function argument\n\nInvalid value for \"v\" parameter: cannot convert tuple to string.\n```\n\n----------------------------------------\n\nTITLE: Running Terraform Plan Tests with Default Providers\nDESCRIPTION: Executes a Terraform plan command and asserts the correct configuration of S3 buckets in different regions using the default provider setup.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/tests/index.mdx#2025-04-22_snippet_9\n\nLANGUAGE: hcl\nCODE:\n```\nrun \"default_providers\" {\n\n  command = plan\n\n  assert {\n    condition     = aws_s3_bucket.primary_bucket.bucket == \"test-us-east-1-primary\"\n    error_message = \"invalid value for primary S3 bucket\"\n  }\n\n  assert {\n    condition     = aws_s3_bucket.secondary_bucket.bucket == \"test-eu-central-1-secondary\"\n    error_message = \"invalid value for secondary S3 bucket\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Base64gzip Function Basic Syntax in HCL\nDESCRIPTION: Demonstrates the basic syntax for using the base64gzip function in Terraform configurations.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/base64gzip.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nbase64gzip(ARGS)\n```\n\n----------------------------------------\n\nTITLE: Using setsubtract function in HCL\nDESCRIPTION: The `setsubtract` function in HCL is used to create a new set with elements from the first set that aren't present in the second set, effectively computing the relative complement. It requires two sets as inputs, and outputs a set with the difference. This function is crucial when specific elements need to be excluded from a primary set.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/setsubtract.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nsetsubtract(a, b)\n```\n\n----------------------------------------\n\nTITLE: Basic Terraform 0.12upgrade Command Execution in Bash\nDESCRIPTION: Example of running the terraform 0.12upgrade command interactively in a terminal. Shows the confirmation prompt that appears when upgrading a module in the current directory.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/0.12upgrade.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform 0.12upgrade\n\nThis command will rewrite the configuration files in the given directory so\nthat they use the new syntax features from Terraform v0.12, and will identify\nany constructs that may need to be adjusted for correct operation with\nTerraform v0.12.\n\nWe recommend using this command in a clean version control work tree, so that\nyou can easily see the proposed changes as a diff against the latest commit.\nIf you have uncommitted changes already present, we recommend aborting this\ncommand and dealing with them before running this command again.\n\nWould you like to upgrade the module in the current directory?\n  Only 'yes' will be accepted to confirm.\n\n  Enter a value: yes\n```\n\n----------------------------------------\n\nTITLE: Correct Resource Naming with Quoted Type and Descriptive Identifier - HCL\nDESCRIPTION: This HCL snippet represents the correct, recommended way to define a resource block in Terraform. It uses double quotes around the resource type and the identifier, and the identifier is a descriptive noun with snake_case, omitting the redundant resource type. This pattern provides improved consistency and readability. It's universally applicable to any Terraform project.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/style.mdx#2025-04-22_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"web_api\" {...}\n```\n\n----------------------------------------\n\nTITLE: Moving a Specific 'for_each' Resource Instance (Unix Shell)\nDESCRIPTION: Executes `terraform state mv` on Unix-like shells (Linux, macOS) to move a specific instance identified by a string key (`example123`) of a resource managed by the `for_each` meta-argument. It re-associates the state of `packet_device.worker[\"example123\"]` with `packet_device.helper[\"example456\"]`. Single quotes are used to prevent shell interpretation of brackets and double quotes.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/state/mv.mdx#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nterraform state mv 'packet_device.worker[\"example123\"]' 'packet_device.helper[\"example456\"]'\n```\n\n----------------------------------------\n\nTITLE: Using textdecodebase64 Function in Terraform\nDESCRIPTION: This example demonstrates how to use the textdecodebase64 function to decode a Base64-encoded string that was originally UTF-16LE encoded. The function takes two parameters: the Base64-encoded string and the encoding name.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/textdecodebase64.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> textdecodebase64(\"SABlAGwAbABvACAAVwBvAHIAbABkAA==\", \"UTF-16LE\")\nHello World\n```\n\n----------------------------------------\n\nTITLE: Lookup Function Examples - HCL\nDESCRIPTION: Examples demonstrating successful key lookup and fallback to default value when key doesn't exist in the map.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/lookup.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> lookup({a=\"ay\", b=\"bee\"}, \"a\", \"what?\")\nay\n> lookup({a=\"ay\", b=\"bee\"}, \"c\", \"what?\")\nwhat?\n```\n\n----------------------------------------\n\nTITLE: Upgrading a Go Dependency to the Latest Version using go get\nDESCRIPTION: This command utilizes the `go get` subcommand with the `latest` pseudo-version to update the specified Go dependency (`example.com/foo/bar`) to its most recent stable release within the current Go module (usually the root). Following this, `make syncdeps` is required to synchronize this updated dependency version across other internal modules that also use it. Requires the Go toolchain.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/docs/dependency-upgrades.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo get example.com/foo/bar@latest\n```\n\n----------------------------------------\n\nTITLE: Disabling State Refresh during terraform plan (CLI Option)\nDESCRIPTION: Describes the `-refresh=false` option. It disables the default behavior of synchronizing the Terraform state with the actual state of remote objects before planning. While potentially speeding up the process, it might lead to an incorrect plan if external changes have occurred. Cannot be used with `-refresh-only` mode.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/plan.mdx#2025-04-22_snippet_4\n\nLANGUAGE: cli\nCODE:\n```\n-refresh=false\n```\n\n----------------------------------------\n\nTITLE: formatdate Literal Character Examples in HCL\nDESCRIPTION: Shows how to include literal characters in format strings using single quotes and escape sequences.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/formatdate.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n> formatdate(\"h'h'mm\", \"2018-01-02T23:12:01-08:00\")\n23h12\n> formatdate(\"H 'o''clock'\", \"2018-01-02T23:12:01-08:00\")\n11 o'clock\n```\n\n----------------------------------------\n\nTITLE: Basic Component Removal Configuration in Terraform HCL\nDESCRIPTION: Basic structure of a removed block that specifies the source module, component to remove, and required providers.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/reference/tfstack.mdx#2025-04-22_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\nremoved {\n    source = \"<The module that the component you want to remove uses>\"\n\n    from = component.component_name\n    providers = {\n        aws = provider.aws.this\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Variables and AWS Provider with Identity Token\nDESCRIPTION: Defines variables for role ARN and identity token, and configures the AWS provider to use web identity token authentication. This configuration completes the OIDC setup by using the token passed from the deployment configuration.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/deploy/authenticate.mdx#2025-04-22_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\n# variables.tfstack.hcl\n\nvariable \"role_arn\" {\n    type = string\n}\n\nvariable \"identity_token\" {\n    type      = string\n    ephemeral = true\n}\n\n# providers.tfstack.hcl\n\nrequired_providers {\n    aws = {\n        source  = \"hashicorp/aws\"\n        version = \"~> 5.7.0\"\n    }\n}\n\nprovider \"aws\" \"this\" {\n    config {\n        region = var.region\n        assume_role_with_web_identity {\n            role_arn           = var.aws_role\n            web_identity_token = var.aws_token\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of set difference using setsubtract in HCL\nDESCRIPTION: Demonstrates the use of `setsubtract` to subtract elements of one array from another. It showcases a simple example and the usage of the function within expressions to calculate set differences, highlighting the resultant output.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/setsubtract.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> setsubtract([\"a\", \"b\", \"c\"], [\"a\", \"c\"])\ntoset([\n  \"b\",\n])\n```\n\n----------------------------------------\n\nTITLE: Disabling Interactive Prompts with TF_INPUT in Shell\nDESCRIPTION: Sets the `TF_INPUT` environment variable to `0` (or `false`). This prevents Terraform commands from interactively prompting the user for input variables that haven't been otherwise specified, effectively behaving as if the `-input=false` command-line flag was used.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/config/environment-variables.mdx#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nexport TF_INPUT=0\n```\n\n----------------------------------------\n\nTITLE: Upgrading a Go Dependency to a Specific Version using go get\nDESCRIPTION: This command uses the Go toolchain's `go get` subcommand to update a specific Go dependency (`example.com/foo/bar`) to a precise version (`v1.0.0`) within the current Go module, typically the root module. After running this command, `make syncdeps` should be executed to propagate the version change to other dependent internal modules. Requires the Go toolchain.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/docs/dependency-upgrades.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo get example.com/foo/bar@v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Resource Provider Configuration in JSON\nDESCRIPTION: Demonstrates how to configure resource providers using JSON syntax, including provider references and meta-arguments.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/syntax/json.mdx#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resource\": {\n    \"aws_instance\": {\n      \"example\": {\n        \"provider\": \"aws.foo\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Namespace UUIDs with uuidv5 in Terraform\nDESCRIPTION: Example showing how to use a custom UUID as a namespace with the uuidv5 function, useful for non-RFC 4122 defined namespaces.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/uuidv5.mdx#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\n> uuidv5(\"743ac3c0-3bf7-4a5b-9e6c-59360447c757\", \"LIBS:diskfont.library\")\nede1a974-df7e-5f17-84b9-76208818b2c8\n```\n\n----------------------------------------\n\nTITLE: Basic cidrsubnet Function Syntax\nDESCRIPTION: Shows the basic syntax for calling the cidrsubnet function with its required parameters: prefix (in CIDR notation), newbits (number of additional bits), and netnum (network number).\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/cidrsubnet.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ncidrsubnet(prefix, newbits, netnum)\n```\n\n----------------------------------------\n\nTITLE: Matchkeys Basic Usage Example - HCL\nDESCRIPTION: Demonstrates using matchkeys to filter instance IDs based on matching regions, returning instances from us-east.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/matchkeys.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nmatchkeys([\"i-123\", \"i-abc\", \"i-def\"], [\"us-west\", \"us-east\", \"us-east\"], [\"us-east\"])\n```\n\n----------------------------------------\n\nTITLE: Setting Hostname for Terraform Enterprise\nDESCRIPTION: Specifies the hostname for a Terraform Enterprise deployment within the cloud block. This is required when connecting to a Terraform Enterprise instance rather than the default HCP Terraform service.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/terraform.mdx#2025-04-22_snippet_9\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  cloud  {\n    hostname = \"app.terraform.io\"\n  }\n  # . . .\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing a Single for_each Resource by Key - Terraform Resource Addressing\nDESCRIPTION: This snippet illustrates referencing a specific instance in a group of aws_instance resources created using for_each. The address aws_instance.web[\\\"example\\\"] selects the resource instance with key 'example', allowing targeted operations. Prerequisites: Resource must use for_each mapping and the key must exist in that map.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/state/resource-addressing.mdx#2025-04-22_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\naws_instance.web[\\\"example\\\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic AWS Terraform Setup\nDESCRIPTION: Basic Terraform configuration that sets up AWS provider requirements and creates a local file using data from an S3 module.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/tests/mocking.mdx#2025-04-22_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    aws = {\n      source = \"hashicorp/aws\"\n    }\n  }\n}\n\nmodule \"credentials\" {\n  source = \"./modules/s3_data\"\n\n  data_bucket_name = \"my_company_bucket_name\"\n}\n\nresource \"local_file\" \"credentials_json\" {\n  filename = \"credentials.json\"\n  content  = jsonencode(module.credentials.data)\n}\n```\n\n----------------------------------------\n\nTITLE: Using abs Function in Terraform HCL\nDESCRIPTION: Demonstrates the basic syntax of the abs function in Terraform HCL. It shows how to use the function with positive, zero, and negative numbers.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/abs.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nabs(number)\n```\n\nLANGUAGE: hcl\nCODE:\n```\n$ abs(23)\n23\n$ abs(0)\n0\n$ abs(-12.4)\n12.4\n```\n\n----------------------------------------\n\nTITLE: Moving and Renaming a Resource into a Child Module (Shell)\nDESCRIPTION: Demonstrates using `terraform state mv` to update the state when a resource `packet_device.worker` is moved into a child module `worker` and simultaneously renamed to `main` within that module's configuration. The command maps the old state address to the new address `module.worker.packet_device.main`.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/state/mv.mdx#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nterraform state mv packet_device.worker module.worker.packet_device.main\n```\n\n----------------------------------------\n\nTITLE: Moving a Resource into a Child Module in Terraform State (Shell)\nDESCRIPTION: Uses `terraform state mv` to associate the existing remote object tracked as `packet_device.worker` (in the root module) with its new address `module.worker.packet_device.worker` after refactoring the resource block into a child module named `worker` in the configuration.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/state/mv.mdx#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nterraform state mv packet_device.worker module.worker.packet_device.worker\n```\n\n----------------------------------------\n\nTITLE: Displaying Terraform Version and Plugins (Shell)\nDESCRIPTION: Executes the basic `terraform version` command without any flags. The output displays the Terraform binary version (e.g., v0.15.0), the platform it's running on (e.g., darwin_amd64), versions of installed providers (like `hashicorp/null`), and potentially messages about available updates or security bulletins if applicable.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/version.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shellsession\nCODE:\n```\n$ terraform version\nTerraform v0.15.0\non darwin_amd64\n+ provider registry.terraform.io/hashicorp/null v3.0.0\n\nYour version of Terraform is out of date! The latest version\nis X.Y.Z. You can update by downloading from https://developer.hashicorp.com/terraform/install\n```\n\n----------------------------------------\n\nTITLE: Calculating Intersection of Numeric Sets in HCL\nDESCRIPTION: Shows `setintersection` applied to three sets containing numeric elements (integers and floats). The function processes `[3,3.3,4]`, `[4,3.3,65,99]`, and `[4.0,3.3]`, finding the common elements `3.3` and `4` (treating `4.0` as equivalent to `4`). It returns these common numbers in a new set.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/setintersection.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n> setintersection([3,3.3,4], [4,3.3,65,99], [4.0,3.3])\ntoset([\n  3.3,\n  4,\n])\n```\n\n----------------------------------------\n\nTITLE: Practical Indent Function Usage in Terraform Output\nDESCRIPTION: Shows a practical example of using the indent function within a Terraform output block to format a description variable with 2-space indentation.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/indent.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\noutput \"formatted_description\" {\n  value = indent(2, var.description)\n}\n```\n\n----------------------------------------\n\nTITLE: Launching Terraform with Delve Debug Server\nDESCRIPTION: This command executes the compiled Terraform binary via Delve, passing arguments and starting a debug server. It allows for remote debugging connections.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/docs/debugging.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndlv exec $HOME/go/bin/terraform --headless --listen :2345 --log -- apply\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Backend with Client Secret Authentication\nDESCRIPTION: Legacy configuration using client secret authentication for Azure backend. Requires management of client secret credentials.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/azurerm.mdx#2025-04-22_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  backend \"azurerm\" {\n    use_azuread_auth     = true                                    # Can also be set via `ARM_USE_AZUREAD` environment variable.\n    tenant_id            = \"00000000-0000-0000-0000-000000000000\"  # Can also be set via `ARM_TENANT_ID` environment variable.\n    client_id            = \"00000000-0000-0000-0000-000000000000\"  # Can also be set via `ARM_CLIENT_ID` environment variable.\n    client_secret        = \"************************************\"  # Can also be set via `ARM_CLIENT_SECRET` environment variable.\n    storage_account_name = \"abcd1234\"                              # Can be passed via `-backend-config=`\"storage_account_name=<storage account name>\"` in the `init` command.\n    container_name       = \"tfstate\"                               # Can be passed via `-backend-config=`\"container_name=<container name>\"` in the `init` command.\n    key                  = \"prod.terraform.tfstate\"                # Can be passed via `-backend-config=`\"key=<blob key name>\"` in the `init` command.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Indent Function Syntax in Terraform HCL\nDESCRIPTION: Demonstrates the basic syntax of the indent function which takes two arguments: the number of spaces to indent and the string to be indented.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/indent.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nindent(num_spaces, string)\n```\n\n----------------------------------------\n\nTITLE: Example of Publish Output Block\nDESCRIPTION: Example of a 'publish_output' block configuration to output a VPC ID from a network deployment, making it accessible to other project Stacks. It demonstrates a simple configuration with 'description' and 'value', showcasing output of networking identifiers.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/reference/tfdeploy.mdx#2025-04-22_snippet_11\n\nLANGUAGE: hcl\nCODE:\n```\n# Network Stack's deployment configuration\n\npublish_output \"vpc_id\" {\n  description = \"The networking Stack's VPC's ID.\"\n  value       = deployment.network.vpc_id\n}\n```\n\n----------------------------------------\n\nTITLE: Auto-Approving Deployments with No Pet Component Changes\nDESCRIPTION: This example shows an orchestration rule that automatically approves deployments if a specific component has not changed.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/reference/tfdeploy.mdx#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\norchestrate \"auto_approve\" \"no_pet_changes\" {\n  check {\n    condition = context.plan.component_changes[\"component.pet\"].total == 0\n    reason    = \"Changes proposed to pet component.\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparison Operators in Terraform\nDESCRIPTION: Examples of comparison operators in Terraform. These operators expect numeric values as inputs and return boolean results, allowing for less than, less than or equal to, greater than, and greater than or equal to comparisons.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/operators.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\na < b\n```\n\nLANGUAGE: hcl\nCODE:\n```\na <= b\n```\n\nLANGUAGE: hcl\nCODE:\n```\na > b\n```\n\nLANGUAGE: hcl\nCODE:\n```\na >= b\n```\n\n----------------------------------------\n\nTITLE: Executing Terraform Planning Command\nDESCRIPTION: The terraform plan command refreshes current state and generates an action plan showing resources to be created, destroyed, or modified.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/intro/vs/cloudformation.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterraform plan\n```\n\n----------------------------------------\n\nTITLE: Running HCL Tests After Unicode Update\nDESCRIPTION: Command to run all HCL tests to check for regressions after updating Unicode tables.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/docs/unicode.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo test ./...\n```\n\n----------------------------------------\n\nTITLE: Local Variable Declaration in JSON\nDESCRIPTION: Shows how to declare local variables using JSON syntax with expression interpretation.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/syntax/json.mdx#2025-04-22_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"locals\": {\n    \"greeting\": \"Hello, ${var.name}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Syntax of the setintersection Function in HCL\nDESCRIPTION: Defines the basic syntax for calling the `setintersection` function. It accepts a variable number of set arguments (indicated by `sets...`), which should be provided as a comma-delimited list of sets (e.g., `[\"a\",\"b\"], [\"a\",\"c\",\"g\"]`). The function returns an unordered set containing elements present in all input sets.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/setintersection.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nsetintersection(sets...)\n```\n\n----------------------------------------\n\nTITLE: Nested Structures with Optional Attributes and Defaults in Terraform\nDESCRIPTION: Defines a complex variable type for storage buckets with optional attributes and nested optional objects with default values.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/type-constraints.mdx#2025-04-22_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"buckets\" {\n  type = list(object({\n    name    = string\n    enabled = optional(bool, true)\n    website = optional(object({\n      index_document = optional(string, \"index.html\")\n      error_document = optional(string, \"error.html\")\n      routing_rules  = optional(string)\n    }), {})\n  }))\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing create_before_destroy with Dependency Replacement in Terraform with GraphViz\nDESCRIPTION: A GraphViz diagram showing the operation order when A has create_before_destroy set and only A is being replaced while B is updated. B is updated after A is created but before the old A is destroyed.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/docs/destroying.md#2025-04-22_snippet_7\n\nLANGUAGE: graphviz\nCODE:\n```\ndigraph replacement {\n    subgraph create {\n        rank=same;\n        a [label=\"A create\"];\n        b [label=\"B update\"];\n        a -> b [dir=back];\n    }\n    subgraph destroy {\n        rank=same;\n        a_d [label=\"A destroy\"];\n    }\n\n    a -> a_d [dir=back, style=dotted];\n    b -> a_d [dir=back];\n}\n```\n\n----------------------------------------\n\nTITLE: Using the uuid Function in Terraform\nDESCRIPTION: This example demonstrates calling the uuid function which returns a UUID-format string generated using random bytes. Note that this function generates a new value each time it's called.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/uuid.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> uuid()\nb5ee72a3-54dd-c4b8-551c-4bdc0204cedb\n```\n\n----------------------------------------\n\nTITLE: Installing Terraform Stack CLI on Amazon Linux\nDESCRIPTION: Commands to install the terraform-stacks-cli on Amazon Linux using yum package manager.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/reference/tfstacks-cli.mdx#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo yum install -y yum-utils shadow-utils\n$ sudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo\n$ sudo yum -y install terraform-stacks-cli\n```\n\n----------------------------------------\n\nTITLE: Removing All Resources in a Module with terraform state rm - Shell\nDESCRIPTION: This example shows how to remove all bindings for all resources associated with every instance of the module named 'foo'. This is useful for bulk untracking a module and its child resources from state without affecting remote infrastructure. Requires the specified module to be present in state.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/state/rm.mdx#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ terraform state rm 'module.foo'\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Terraform Test with Plan and Assert in HCL\nDESCRIPTION: This HCL snippet shows a Terraform test file (`valid_string_concat.tftest.hcl`) designed to validate the S3 bucket naming logic from the example `main.tf`. It defines a test-level `variables` block to set `bucket_prefix`. The `run` block executes a `terraform plan` (specified by `command = plan`) and uses an `assert` block to check if the computed bucket name (`aws_s3_bucket.bucket.bucket`) matches the expected value (\"test-bucket\") without actually creating infrastructure.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/tests/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n# valid_string_concat.tftest.hcl\n\nvariables {\n  bucket_prefix = \"test\"\n}\n\nrun \"valid_string_concat\" {\n\n  command = plan\n\n  assert {\n    condition     = aws_s3_bucket.bucket.bucket == \"test-bucket\"\n    error_message = \"S3 bucket name did not match expected\"\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Chunklist Function Syntax in HCL\nDESCRIPTION: Shows the basic syntax for the chunklist function which takes a list and chunk size as parameters.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/chunklist.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nchunklist(list, chunk_size)\n```\n\n----------------------------------------\n\nTITLE: Referencing a Module from Terraform Registry\nDESCRIPTION: This code snippet shows how to reference a module from the Terraform Registry using the `module` block with a specified source. The source conforms to a particular structure, typically `namespace/module/provider`, and allows Terraform to locate the module repository. This snippet captures a module named \"consul\" sourced from the \"hashicorp/consul/aws\" path.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/develop/publish.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"consul\" {\n  source = \"hashicorp/consul/aws\"\n}\n```\n\n----------------------------------------\n\nTITLE: GCS Custom Storage Endpoint URL Format\nDESCRIPTION: Example of a Private Service Connect endpoint URL format for GCS backend configuration.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/gcs.mdx#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://storage-xyz.p.googleapis.com/storage/v1/b\n```\n\n----------------------------------------\n\nTITLE: Range Function Syntax - HCL\nDESCRIPTION: Basic syntax variations for the range function showing different parameter combinations.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/range.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nrange(max)\nrange(start, limit)\nrange(start, limit, step)\n```\n\n----------------------------------------\n\nTITLE: Displaying Terraform Version and Plugins in JSON Format (Shell)\nDESCRIPTION: Executes the `terraform version` command with the `-json` flag. This produces a machine-readable JSON output containing structured information like the Terraform version (`terraform_version`), platform (`platform`), selected provider versions (`provider_selections`), and whether the Terraform version is outdated (`terraform_outdated`). Upgrade and security bulletin details are omitted in this format.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/version.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shellsession\nCODE:\n```\n$ terraform version -json\n{\n  \"terraform_version\": \"0.15.0\",\n  \"platform\": \"darwin_amd64\",\n  \"provider_selections\": {\n    \"registry.terraform.io/hashicorp/null\": \"3.0.0\"\n  },\n  \"terraform_outdated\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Matchkeys Function Syntax - HCL\nDESCRIPTION: Shows the basic syntax for the matchkeys function which takes three parameters: valueslist, keyslist, and searchset.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/matchkeys.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nmatchkeys(valueslist, keyslist, searchset)\n```\n\n----------------------------------------\n\nTITLE: Base64gzip Function Simple Usage in HCL\nDESCRIPTION: Shows a simple example of using base64gzip function with a local variable.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/base64gzip.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nbase64gzip(local.my_data)\n```\n\n----------------------------------------\n\nTITLE: Reversing a Sequence with Terraform\nDESCRIPTION: This snippet demonstrates the use of the 'reverse' function within Terraform to reverse a sequence of numbers. The input is a list, and the output is the reversed version of that list. The 'reverse' function does not alter the original sequence, and its only dependency is the presence of a valid sequence as input.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/reverse.mdx#2025-04-22_snippet_0\n\nLANGUAGE: unknown\nCODE:\n```\n> reverse([1, 2, 3])\\n[\\n  3,\\n  2,\\n  1,\\n]\n```\n\n----------------------------------------\n\nTITLE: Calling Built-in Functions in Terraform HCL\nDESCRIPTION: Demonstrates how to invoke a built-in function (max) in Terraform's HCL syntax, passing multiple numeric arguments to determine the maximum value. No additional dependencies are required beyond standard Terraform setup. Arguments (here, integers 5, 12, and 9) are specified within parentheses; the function returns the largest value (12). This syntax is used within Terraform configurations or expressions wherever function calls are permitted.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nmax(5, 12, 9)\n```\n\n----------------------------------------\n\nTITLE: Adding a Staging Environment Deployment in HCL\nDESCRIPTION: This HCL code extends the previous multi-environment example by adding a 'staging' deployment block to the `deployments.tfdeploy.hcl` file. It illustrates the ease of scaling Stack configurations to include additional environments while maintaining a consistent structure.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/use-cases.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n# deployments.tfdeploy.hcl\n\ndeployment \"production\" {\n    inputs = {\n        aws_region     = \"us-west-1\"\n        instance_count = 2\n        role_arn       = \"<YOUR_ROLE_ARN>\"\n        identity_token = identity_token.aws.jwt\n    }\n}\n\ndeployment \"development\" {\n    inputs = {\n        aws_region     = \"us-east-1\"\n        instance_count = 2\n        role_arn       = \"<YOUR_ROLE_ARN>\"\n        identity_token = identity_token.aws.jwt\n    }\n}\n\ndeployment \"staging\" {\n    inputs = {\n        aws_region     = \"us-east-1\"\n        instance_count = 2\n        role_arn       = \"<YOUR_ROLE_ARN>\"\n        identity_token = identity_token.aws.jwt\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Consul Backend in Terraform\nDESCRIPTION: Basic configuration for setting up Consul as a backend for Terraform state storage. Specifies the address, scheme, and path for the Consul KV store.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/consul.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  backend \"consul\" {\n    address = \"consul.example.com\"\n    scheme  = \"https\"\n    path    = \"full/path\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Alltrue Function with Different Inputs in Terraform\nDESCRIPTION: These examples demonstrate the usage of the alltrue function with different inputs. It shows how the function evaluates lists containing boolean and string values.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/alltrue.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> alltrue([\"true\", true])\ntrue\n> alltrue([true, false])\nfalse\n```\n\n----------------------------------------\n\nTITLE: Accessing Unicode Version in Go\nDESCRIPTION: Shows how to retrieve the current Unicode version supported by the Go runtime using the unicode.Version constant.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/docs/unicode.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nunicode.Version\n```\n\n----------------------------------------\n\nTITLE: Generating SHA256 Hash of Decoded AES Key\nDESCRIPTION: This command chain decodes the base64 key, generates its SHA-256 hash, and then base64 encodes the result. Replace <base64_key> with the actual key generated in the previous step.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/oci.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\necho -n <base64_key> | base64 -d | openssl dgst -sha256 -binary | base64\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables for Terraform Enterprise Configuration\nDESCRIPTION: Demonstrates a configuration that uses environment variables TF_CLOUD_ORGANIZATION and TF_CLOUD_HOSTNAME instead of hardcoded values, allowing the same configuration to be reused in different CI pipelines.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/terraform.mdx#2025-04-22_snippet_15\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  cloud {\n    workspaces {\n      tags = [\"app\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the startswith function in HCL\nDESCRIPTION: The startswith function in Terraform's HCL checks if a given string begins with a specified prefix. It requires two string parameters: the string to test and the prefix to check against. The function outputs a boolean value, true if the string starts with the given prefix and false otherwise. This function is commonly used in conditionals within Terraform configurations.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/startswith.mdx#2025-04-22_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nstartswith(string, prefix)\n```\n\n----------------------------------------\n\nTITLE: Defining a Deployment Block in HCP Terraform Configuration\nDESCRIPTION: This snippet demonstrates the structure of a deployment block in an HCP Terraform configuration file. It shows how to specify inputs for a deployment named 'unique_name'.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/reference/tfdeploy.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndeployment \"unique_name\" {\n  inputs = {\n    key     = \"value\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Variable Sets with Varset Store\nDESCRIPTION: This 'store' configuration enables access to variable sets in HCP Terraform. It defines the 'id' for the variable set and a 'category' which specifies whether it uses Terraform or environment variables. Key parameters include 'id' and 'category', required for accessing specific variables from the store.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/reference/tfdeploy.mdx#2025-04-22_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\nstore \"varset\" \"store_name\" {\n  id       = \"<variable_set_id>\"\n  category = <\"terraform\" or \"env\">\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Terraform Stack CLI on CentOS or RHEL\nDESCRIPTION: Commands to install the terraform-stacks-cli on CentOS or Red Hat Enterprise Linux (RHEL) using yum package manager.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/reference/tfstacks-cli.mdx#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo yum install -y yum-utils\n$ sudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo\n$ sudo yum -y install terraform-stacks-cli\n```\n\n----------------------------------------\n\nTITLE: Using -auto-approve with terraform apply (CLI)\nDESCRIPTION: The `-auto-approve` option allows `terraform apply` to execute the generated plan without requiring interactive confirmation. This is useful in automation but requires caution.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/apply.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n-auto-approve\n```\n\n----------------------------------------\n\nTITLE: Basic Provider Configuration Test\nDESCRIPTION: Shows how to configure AWS provider with region specification in test files\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/tests/index.mdx#2025-04-22_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\n# main.tf\n\nterraform {\n  required_providers {\n    aws = {\n      source = \"hashicorp/aws\"\n    }\n  }\n}\n\nvariable \"bucket_prefix\" {\n  type = string\n}\n\nresource \"aws_s3_bucket\" \"bucket\" {\n  bucket = \"${var.bucket_prefix}-bucket\"\n}\n\noutput \"bucket_name\" {\n  value = aws_s3_bucket.bucket.bucket\n}\n```\n\nLANGUAGE: hcl\nCODE:\n```\n# customised_provider.tftest.hcl\n\nprovider \"aws\" {\n    region = \"eu-central-1\"\n}\n\nvariables {\n  bucket_prefix = \"test\"\n}\n\nrun \"valid_string_concat\" {\n\n  command = plan\n\n  assert {\n    condition     = aws_s3_bucket.bucket.bucket == \"test-bucket\"\n    error_message = \"S3 bucket name did not match expected\"\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Required Provider for encode_expr Function in Terraform\nDESCRIPTION: This snippet shows how to declare a dependency on the built-in terraform provider, which is required to use the encode_expr function. This configuration must be included in your module to access the function.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/terraform-encode_expr.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    terraform = {\n      source = \"terraform.io/builtin/terraform\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a List Variable on Unix-like Shells via CLI\nDESCRIPTION: This command demonstrates passing a `list(string)` input variable named 'name' using the `-var` option on Unix-like shells. It requires providing a valid Terraform language expression (HCL) representing the list value, enclosed in single quotes (') for the shell.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/plan.mdx#2025-04-22_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\n# Unix-style shell\nterraform plan -var 'name=[\"a\", \"b\", \"c\"]'\n```\n\n----------------------------------------\n\nTITLE: Using OCI Remote State in Terraform Configuration\nDESCRIPTION: This snippet shows how to use the terraform_remote_state data source to access state stored in OCI Object Storage from another Terraform configuration.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/oci.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"terraform_remote_state\" \"mystate\" {\n  backend = \"oci\"\n  config = {\n    bucket            = \"mybucket\"\n    key               = \"path/to/my/key\"\n    namespace         = \"my-namespace\"\n    tenancy_ocid      = \"ocid1.tenancy.oc1..xxxxxxx\"\n    user_ocid         = \"ocid1.user.oc1..xxxxxxxx\"\n    fingerprint       = \"xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx\"\n    private_key_path  = \"~/.oci/oci_api_key.pem\"\n    region            = \"us-ashburn-1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running a Specific Terraform Test File (Windows Cmd)\nDESCRIPTION: Demonstrates executing the `terraform test` command in the Windows `cmd.exe` shell, targeting only the `validations.tftest.hcl` file located within the default `tests` directory using the `-filter` option. Note the use of backslashes for the file path.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/test.mdx#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nterraform test -filter=tests\\validations.tftest.hcl\n```\n\n----------------------------------------\n\nTITLE: Alternative Using For Expression with Map - HCL\nDESCRIPTION: Shows how to achieve similar filtering using a for expression with a map, which may be more readable in some cases.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/matchkeys.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n[for i, z in {\"i-123\"=\"us-west\",\"i-abc\"=\"us-east\",\"i-def\"=\"us-east\"}: i if z == \"us-east\"]\n```\n\n----------------------------------------\n\nTITLE: Using basename Function in Terraform\nDESCRIPTION: Demonstrates how to use the basename function to extract the final segment of a filesystem path. The function handles both Unix-style forward slashes and Windows-style backslashes depending on the host platform.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/basename.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> basename(\"foo/bar/baz.txt\")\nbaz.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Cache Directory with Environment Variables\nDESCRIPTION: This bash command sets the `TF_PLUGIN_CACHE_DIR` environment variable to define the plugin cache directory for the current shell session, overriding any configurations in the CLI configuration file.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/config/config-file.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nexport TF_PLUGIN_CACHE_DIR=\"$HOME/.terraform.d/plugin-cache\"\n```\n\n----------------------------------------\n\nTITLE: Computing SHA512 Hash in Terraform\nDESCRIPTION: This example demonstrates using the sha512 function to compute a hash of the string \"hello world\". The function converts the input to UTF-8, applies the SHA512 algorithm, and returns the hash as lowercase hexadecimal digits.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/sha512.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> sha512(\"hello world\")\n309ecc489c12d6eb4cc40f50c902f2b4d0ed77ee511a7c7a9bcd3ca86d4cd86f989dd35bc5ff499670da34255b45b0cfd830e81f605dcf7dc5542e93ae9cd76f\n```\n\n----------------------------------------\n\nTITLE: Installing Terraform Stack CLI on Fedora\nDESCRIPTION: Commands to install the terraform-stacks-cli on Fedora Linux distribution using dnf package manager.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/reference/tfstacks-cli.mdx#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo dnf install -y dnf-plugins-core\n$ sudo dnf config-manager addrepo --from-repofile=https://rpm.releases.hashicorp.com/fedora/hashicorp.repo\n$ sudo dnf -y install terraform-stacks-cli\n```\n\n----------------------------------------\n\nTITLE: Accessing Remote State from OSS using terraform_remote_state Data Source\nDESCRIPTION: Demonstrates how to access state outputs stored in an OSS backend from another Terraform configuration. The data source retrieves all root outputs defined in the referenced remote state.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/oss.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"terraform_remote_state\" \"network\" {\n    backend   = \"oss\"\n    config    = {\n        bucket = \"remote-state-dns\"\n        key    = \"terraform.tfstate\"\n        prefix = \"mystate/state\"\n        region = \"cn-beijing\"\n    }\n    outputs   = {}\n    workspace = \"default\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Set Variable in Terraform HCL\nDESCRIPTION: This snippet demonstrates how to define a set variable in Terraform. It creates a variable named 'example_set' of type set(string) with default values.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/types.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"example_set\" {\n  type    = set(string)\n  default = [\"foo\", \"bar\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Mixed Element Types in setproduct - Terraform HCL\nDESCRIPTION: This snippet demonstrates setproduct's type coercion behavior when lists contain mixed types (strings and numbers). Numbers are automatically converted to strings to ensure consistent element types among the combinations. Prerequisites: At least two input collections; element types must be coercible or convertible. Inputs: [\"staging\", \"production\"], [\"a\", 2]. Output: List of lists, with all numbers represented as strings for consistency.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/setproduct.mdx#2025-04-22_snippet_3\n\nLANGUAGE: HCL\nCODE:\n```\n> setproduct([\"staging\", \"production\"], [\"a\", 2])\n[\n  [\n    \"staging\",\n    \"a\",\n  ],\n  [\n    \"staging\",\n    \"2\",\n  ],\n  [\n    \"production\",\n    \"a\",\n  ],\n  [\n    \"production\",\n    \"2\",\n  ],\n]\n```\n\n----------------------------------------\n\nTITLE: Initializing Terraform Stack Configuration\nDESCRIPTION: Command to initialize a Terraform Stack configuration, downloading any required dependencies.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/reference/tfstacks-cli.mdx#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ tfstacks init\n```\n\n----------------------------------------\n\nTITLE: Running terraform plan (CLI)\nDESCRIPTION: The `terraform plan` command is used to create an execution plan. `terraform apply` implicitly runs this when no saved plan file is provided.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/apply.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nterraform plan\n```\n\n----------------------------------------\n\nTITLE: Equality Operators in Terraform\nDESCRIPTION: Examples of equality operators in Terraform. These operators compare two values of any type and return boolean results, requiring both arguments to be of exactly the same type for comparison.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/operators.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\na == b\n```\n\nLANGUAGE: hcl\nCODE:\n```\na != b\n```\n\n----------------------------------------\n\nTITLE: Using a Google Cloud Storage Bucket as a Module Source in Terraform\nDESCRIPTION: This snippet shows how to reference an archive stored in Google Cloud Storage as a module source using the gcs:: prefix, which enables GCP authentication.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/sources.mdx#2025-04-22_snippet_15\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"consul\" {\n  source = \"gcs::https://www.googleapis.com/storage/v1/modules/foomodule.zip\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using HTML Meta Tag for Module Source Redirection\nDESCRIPTION: This snippet shows an HTML meta element that can be used in an HTTP response to redirect Terraform to another module source address when using HTTP URLs as module sources.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/sources.mdx#2025-04-22_snippet_17\n\nLANGUAGE: html\nCODE:\n```\n<meta name=\"terraform-get\" content=\"github.com/hashicorp/example\" />\n```\n\n----------------------------------------\n\nTITLE: Defining the textencodebase64 Function in Terraform HCL\nDESCRIPTION: Function declaration for textencodebase64 which takes a string and an encoding name as parameters and returns the base64 encoded result of the string using the specified character encoding.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/textencodebase64.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ntextencodebase64(string, encoding_name)\n```\n\n----------------------------------------\n\nTITLE: Moving a Specific 'for_each' Resource Instance (Windows CMD)\nDESCRIPTION: Executes `terraform state mv` on Windows Command Prompt (`cmd.exe`) to move a specific instance identified by a string key (`example123`) of a resource managed by `for_each`. It re-associates the state of `packet_device.worker[\"example123\"]` with `packet_device.helper[\"example456\"]`. Backslashes are required to escape the double quotes within the brackets for `cmd.exe`.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/state/mv.mdx#2025-04-22_snippet_8\n\nLANGUAGE: cmd\nCODE:\n```\nterraform state mv packet_device.worker[\\\"example123\\\"] packet_device.helper[\\\"example456\\\"]\n```\n\n----------------------------------------\n\nTITLE: Destroying Infrastructure with Terraform CLI - Shell\nDESCRIPTION: This command removes all existing managed infrastructure resources in the current directory and workspace, essentially reverting everything back to a blank state. It leverages Terraform state data to ensure proper resource targeting and asks for user confirmation before proceeding. Requires an initialized working directory and is often used for environment teardown when infrastructure is no longer needed.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/run/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nterraform destroy\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Component Instances with for_each in Terraform Stacks (HCL)\nDESCRIPTION: This HCL snippet, typically found in `components.tfstack.hcl`, demonstrates using the `for_each` meta-argument within a `component` block to create multiple instances of an 's3' component based on the `var.regions` variable. Each instance uses the './s3' module, receives the region as an input (`each.value`), and is configured with specific provider instances (e.g., `provider.aws.configurations[each.value]`).\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/create/config.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n# components.tfstack.hcl\n\ncomponent \"s3\" {\n    for_each = var.regions\n\n    source = \"./s3\"\n\n    inputs = {\n        region = each.value\n    }\n\n    providers = {\n        aws    = provider.aws.configurations[each.value]\n        random = provider.random.this\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Equivalent Native Terraform Configuration\nDESCRIPTION: This HCL snippet provides an equivalent configuration to its JSON counterpart, defining both a variable and an AWS instance resource. It highlights the conversion between JSON and native syntax, which can be crucial for programmatic configurations.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/syntax/json.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"example\" {\n  default = \"hello\"\n}\n\nresource \"aws_instance\" \"example\" {\n  instance_type = \"t2.micro\"\n  ami           = \"ami-abc123\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AWS VPC and Subnet Resources in Terraform (HCL)\nDESCRIPTION: This snippet defines an AWS VPC and a dependent subnet resource in Terraform using HCL. It demonstrates expressing the relationship between resources with direct references and embedded functions (e.g., cidrsubnet). Dependencies include AWS Terraform provider and the related VPC and Subnet resources. The snippet expects no input variables and produces managed AWS network resources whose identifiers and properties can be referenced elsewhere. Both resources must be deployed in the same region/context.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/develop/composition.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_vpc\" \"example\" {\n  cidr_block = \"10.1.0.0/16\"\n}\n\nresource \"aws_subnet\" \"example\" {\n  vpc_id = aws_vpc.example.id\n\n  availability_zone = \"us-west-2b\"\n  cidr_block        = cidrsubnet(aws_vpc.example.cidr_block, 4, 1)\n}\n\n```\n\n----------------------------------------\n\nTITLE: Exposing Terraform Core via RPC using terraform rpcapi (Shell)\nDESCRIPTION: Introduces the experimental `terraform rpcapi` command, designed to expose Terraform Core functions through an RPC interface compatible with `go-plugin`. This feature is currently unstable, primarily intended for the Terraform Stacks private preview, and its API is subject to change without notice. Use outside of the private preview is discouraged.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nterraform rpcapi\n```\n\n----------------------------------------\n\nTITLE: Using the decode_tfvars Function in HCL\nDESCRIPTION: Example of calling the provider::terraform::decode_tfvars function with a heredoc string containing .tfvars syntax.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/terraform-decode_tfvars.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nprovider::terraform::decode_tfvars(\n  <<EOT\n    example = \"Hello!\"\n  EOT\n)\n```\n\n----------------------------------------\n\nTITLE: Interactive Terraform Apply with Refresh Only - Bash\nDESCRIPTION: This snippet recommends using `terraform apply` with the `-refresh-only` option to safely update the Terraform state. The command presents an interactive prompt for confirming detected changes, allowing review before they are committed. Suitable for Terraform versions v0.15.4 and above.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/refresh.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nterraform apply -refresh-only\n```\n\n----------------------------------------\n\nTITLE: Executing Basic Terraform State Pull Command in Shell\nDESCRIPTION: Demonstrates the basic usage of the 'terraform state pull' command in a shell environment. This command downloads the current Terraform state from its configured backend (remote or local) and outputs the raw state data (in the latest compatible version) to standard output.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/state/pull.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nterraform state pull\n```\n\n----------------------------------------\n\nTITLE: Minimal Backend Configuration for Consul\nDESCRIPTION: Example of a minimal backend configuration that specifies only the backend type (Consul). This enables using partial configuration where the remaining settings are provided during initialization.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/index.mdx#2025-04-22_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  backend \"consul\" {}\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Terraform Apply JSON Output Stream\nDESCRIPTION: This snippet provides a sample output stream generated by running `terraform apply -json`. It demonstrates the sequence of JSON objects emitted, each on a new line, representing different events during the apply process, such as version info, planned changes, resource creation progress, apply completion, and outputs. Each object includes common keys like `@level`, `@message`, `@module`, `@timestamp`, and a specific `type` field indicating the nature of the message.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/machine-readable-ui.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"@level\":\"info\",\"@message\":\"Terraform 0.15.4\",\"@module\":\"terraform.ui\",\"@timestamp\":\"2021-05-25T13:32:41.275359-04:00\",\"terraform\":\"0.15.4\",\"type\":\"version\",\"ui\":\"0.1.0\"}\n{\"@level\":\"info\",\"@message\":\"random_pet.animal: Plan to create\",\"@module\":\"terraform.ui\",\"@timestamp\":\"2021-05-25T13:32:41.705503-04:00\",\"change\":{\"resource\":{\"addr\":\"random_pet.animal\",\"module\":\"\",\"resource\":\"random_pet.animal\",\"implied_provider\":\"random\",\"resource_type\":\"random_pet\",\"resource_name\":\"animal\",\"resource_key\":null},\"action\":\"create\"},\"type\":\"planned_change\"}\n{\"@level\":\"info\",\"@message\":\"Plan: 1 to add, 0 to change, 0 to destroy.\",\"@module\":\"terraform.ui\",\"@timestamp\":\"2021-05-25T13:32:41.705638-04:00\",\"changes\":{\"add\":1,\"change\":0,\"remove\":0,\"operation\":\"plan\"},\"type\":\"change_summary\"}\n{\"@level\":\"info\",\"@message\":\"random_pet.animal: Creating...\",\"@module\":\"terraform.ui\",\"@timestamp\":\"2021-05-25T13:32:41.825308-04:00\",\"hook\":{\"resource\":{\"addr\":\"random_pet.animal\",\"module\":\"\",\"resource\":\"random_pet.animal\",\"implied_provider\":\"random\",\"resource_type\":\"random_pet\",\"resource_name\":\"animal\",\"resource_key\":null},\"action\":\"create\"},\"type\":\"apply_start\"}\n{\"@level\":\"info\",\"@message\":\"random_pet.animal: Creation complete after 0s [id=smart-lizard]\",\"@module\":\"terraform.ui\",\"@timestamp\":\"2021-05-25T13:32:41.826179-04:00\",\"hook\":{\"resource\":{\"addr\":\"random_pet.animal\",\"module\":\"\",\"resource\":\"random_pet.animal\",\"implied_provider\":\"random\",\"resource_type\":\"random_pet\",\"resource_name\":\"animal\",\"resource_key\":null},\"action\":\"create\",\"id_key\":\"id\",\"id_value\":\"smart-lizard\",\"elapsed_seconds\":0},\"type\":\"apply_complete\"}\n{\"@level\":\"info\",\"@message\":\"Apply complete! Resources: 1 added, 0 changed, 0 destroyed.\",\"@module\":\"terraform.ui\",\"@timestamp\":\"2021-05-25T13:32:41.869168-04:00\",\"changes\":{\"add\":1,\"change\":0,\"remove\":0,\"operation\":\"apply\"},\"type\":\"change_summary\"}\n{\"@level\":\"info\",\"@message\":\"Outputs: 1\",\"@module\":\"terraform.ui\",\"@timestamp\":\"2021-05-25T13:32:41.869280-04:00\",\"outputs\":{\"pets\":{\"sensitive\":false,\"type\":\"string\",\"value\":\"smart-lizard\"}},\"type\":\"outputs\"}\n```\n\n----------------------------------------\n\nTITLE: Defining Trim Function Syntax in Terraform HCL\nDESCRIPTION: This snippet shows the syntax for using the trim function in Terraform's HCL. It takes two arguments: the string to be trimmed and a set of characters to remove from the start and end of the string.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/trim.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ntrim(string, str_character_set)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Backend with Access Key Authentication\nDESCRIPTION: Legacy configuration using storage account access key authentication for Azure backend. Requires management of access key credentials.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/azurerm.mdx#2025-04-22_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  backend \"azurerm\" {\n    access_key           = \"abcdefghijklmnopqrstuvwxyz0123456789...\"  # Can also be set via `ARM_ACCESS_KEY` environment variable.\n    storage_account_name = \"abcd1234\"                                 # Can be passed via `-backend-config=`\"storage_account_name=<storage account name>\"` in the `init` command.\n    container_name       = \"tfstate\"                                  # Can be passed via `-backend-config=`\"container_name=<container name>\"` in the `init` command.\n    key                  = \"prod.terraform.tfstate\"                   # Can be passed via `-backend-config=`\"key=<blob key name>\"` in the `init` command.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating API Token for HCP Terraform (HCL)\nDESCRIPTION: Use the terraform login command to generate an API token for your HCP Terraform user account. This allows authentication for CLI-driven runs and using HCP Terraform as a state backend or private module registry.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/auth/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform login\n```\n\n----------------------------------------\n\nTITLE: Committing Terraform Changes to Git - CLI - shell\nDESCRIPTION: This set of commands shows how to add configuration changes to Git and commit them with a descriptive message. The snippet is intended for version controlled infrastructure management and requires Git to be set up in the project folder. Inputs are file changes (main.tf); the output is a committed change with optional commit hash and summary.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/intro/core-workflow.mdx#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ git add main.tf\\n$ git commit -m 'Managing infrastructure as code!'\\n\\n[main (root-commit) f735520] Managing infrastructure as code!\\n 1 file changed, 1 insertion(+)\\n\n```\n\n----------------------------------------\n\nTITLE: Defining Terraform Backend Interface in Go\nDESCRIPTION: This code defines the Backend interface in Terraform, which is implemented by different backend types. It includes methods for managing workspaces and operations.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/docs/architecture.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype Backend interface {\n    ConfigSchema() *configschema.Block\n    PrepareConfig(cty.Value) (cty.Value, tfdiags.Diagnostics)\n    Configure(cty.Value) tfdiags.Diagnostics\n    StateMgr(workspace string) (statemgr.Full, error)\n    Workspaces() ([]string, error)\n    DeleteWorkspace(name string) error\n}\n```\n\n----------------------------------------\n\nTITLE: Using the terraform force-unlock Command (Shell)\nDESCRIPTION: Demonstrates the basic command syntax for `terraform force-unlock`. This command manually removes a lock on the Terraform state, requiring the specific `LOCK_ID` of the lock to be removed. Optional arguments can be provided.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/force-unlock.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nterraform force-unlock [options] LOCK_ID\n```\n\n----------------------------------------\n\nTITLE: Conditional Template Directive\nDESCRIPTION: Example of using if/else directive in string templates for conditional content.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/strings.mdx#2025-04-22_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\n\"Hello, %{ if var.name != \"\" }${var.name}%{ else }unnamed%{ endif }!\"\n```\n\n----------------------------------------\n\nTITLE: Formatting GCS KMS Encryption Key Path\nDESCRIPTION: Shows the format for specifying a Cloud KMS key path for state file encryption in GCS backend configuration.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/gcs.mdx#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nprojects/{{project}}/locations/{{location}}/keyRings/{{keyRing}}/cryptoKeys/{{name}}\n```\n\n----------------------------------------\n\nTITLE: Template Rendering with Reference to S3 Object in HCL\nDESCRIPTION: Example showing how to use the templatestring function to render a template from an AWS S3 object. The function uses the S3 object's body content as the template and passes a name variable to be used in the rendering.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/templatestring.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ntemplatestring(data.aws_s3_object.example.body, {\n  name = var.name\n})\n```\n\n----------------------------------------\n\nTITLE: Removing a for_each-Keyed Resource Instance with terraform state rm - Windows Command Prompt\nDESCRIPTION: This example shows the syntax required for deleting a specific for_each-keyed resource instance ('example') using terraform state rm from the Windows Command Prompt. Backslashes are used to escape quotes as per Windows shell requirements. Command only removes state bindings, not remote resources.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/state/rm.mdx#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ terraform state rm packet_device.worker[\\\"example\\\"]\n```\n\n----------------------------------------\n\nTITLE: Change Working Directory in Terraform CLI\nDESCRIPTION: Example command demonstrating how to use the -chdir option to run Terraform commands from a different directory than the root module directory.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nterraform -chdir=environments/production apply\n```\n\n----------------------------------------\n\nTITLE: Initializing and Validating Terraform Stack Configuration (Shell)\nDESCRIPTION: These shell commands demonstrate how to use the `terraform-stacks-cli` tool to prepare and check a Terraform Stack configuration. `tfstacks init` initializes the stack, potentially downloading providers and modules, and generates lock files. `tfstacks validate` checks the syntax and consistency of the `.tfstack.hcl` files. These commands are run in the stack's root directory.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/create/config.mdx#2025-04-22_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ tfstacks init\n$ tfstacks validate\n```\n\n----------------------------------------\n\nTITLE: Equivalent Native Lifecycle Block in Terraform\nDESCRIPTION: This HCL snippet demonstrates the equivalent native syntax for a lifecycle block within a resource. It supports understanding how to transition between JSON and HCL for similar configuration structures.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/syntax/json.mdx#2025-04-22_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"example\" {\n  lifecycle {\n    create_before_destroy = true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Structure for Schema Representation\nDESCRIPTION: Defines the JSON sub-object used within the `provider_schemas` output to represent the schema for a specific provider, resource, or data source. It includes the schema version (distinct from the provider version) and embeds the detailed block structure.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/providers/schema.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // \"version\" is the schema version, not the provider version\n  \"version\": int64,\n  \"block\": <block-representation>\n}\n```\n\n----------------------------------------\n\nTITLE: Using the self Object in Terraform HCL\nDESCRIPTION: The `self` object in Terraform HCL is used within postcondition blocks of resources to refer to their attributes. It's mainly useful for checking resource attributes' states post-creation or modification to ensure they meet specified criteria. This requires appropriate configuration within the resource block to effectively use the `self` object and implement necessary checks.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/custom-conditions.mdx#2025-04-22_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"example\" {\n  instance_type = \"t2.micro\"\n  ami           = \"ami-abc123\"\n\n  lifecycle {\n    postcondition {\n      condition     = self.instance_state == \"running\"\n      error_message = \"EC2 instance must be running.\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running a Remote Speculative Plan for Terraform Stack\nDESCRIPTION: Command to run a remote, speculative plan for a Terraform Stack configuration, requiring organization, stack, and deployment information.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/reference/tfstacks-cli.mdx#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ tfstacks plan -organization=REQUIRED_ORG_NAME -stack=REQUIRED_STACK_ID -deployment=REQUIRED_DEPLOYMENT [-hostname=hostname]\n```\n\n----------------------------------------\n\nTITLE: Legacy Attribute-only Splat Expression\nDESCRIPTION: Shows the older style splat expression syntax using .* and its equivalent for expression.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/splat.mdx#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nvar.list.*.interfaces[0].name\n```\n\nLANGUAGE: hcl\nCODE:\n```\n[for o in var.list : o.interfaces][0].name\n```\n\n----------------------------------------\n\nTITLE: Checking Unknown Values in Terraform Console\nDESCRIPTION: Illustrates how to check if certain values may not be known until apply in the Terraform console.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/console.mdx#2025-04-22_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\n> random_pet.example\n```\n\n----------------------------------------\n\nTITLE: Using terraform show to Inspect Plans (CLI)\nDESCRIPTION: The `terraform show` command is used to inspect the contents of a saved plan file before applying it, allowing verification of the planned actions.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/apply.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nterraform show\n```\n\n----------------------------------------\n\nTITLE: Whitespace Control in Templates\nDESCRIPTION: Example showing whitespace control using ~ marker in template directives.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/strings.mdx#2025-04-22_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\n<<EOT\n%{ for ip in aws_instance.example[*].private_ip ~}\nserver ${ip}\n%{ endfor ~}\nEOT\n```\n\n----------------------------------------\n\nTITLE: Using local-exec Provisioner with Perl Interpreter in Terraform\nDESCRIPTION: This example shows how to use the local-exec provisioner with a Perl interpreter. It executes a Perl command to create a file with the current timestamp.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/resources/provisioners/local-exec.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"terraform_data\" \"example1\" {\n  provisioner \"local-exec\" {\n    command = \"open WFH, '>completed.txt' and print WFH scalar localtime\"\n    interpreter = [\"perl\", \"-e\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Moving a Specific Instance of a 'count' Resource (Shell)\nDESCRIPTION: Uses `terraform state mv` to move a specific instance (index 0) of a resource managed by the `count` meta-argument. It re-associates the state of the object tracked as `packet_device.worker[0]` with the new address `packet_device.helper[0]`. Note that brackets may require quoting or escaping depending on the shell.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/state/mv.mdx#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ terraform state mv 'packet_device.worker[0]' 'packet_device.helper[0]'\n```\n\n----------------------------------------\n\nTITLE: Template Interpolation Comparison in HCL\nDESCRIPTION: Shows how format function compares to template interpolation syntax for simple formatting.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/format.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n> format(\"Hello, %s!\", var.name)\nHello, Valentina!\n> \"Hello, ${var.name}!\"\nHello, Valentina!\n```\n\n----------------------------------------\n\nTITLE: Visualizing Terraform Dependency Graph\nDESCRIPTION: The terraform graph command visualizes the dependency ordering of resources in the execution plan.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/intro/vs/cloudformation.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nterraform graph\n```\n\n----------------------------------------\n\nTITLE: Updating Protocol 6 Symlink in Terraform Core\nDESCRIPTION: A shell command used by Terraform core contributors to update the symbolic link for the protocol 6 definition. It points the internal `tfplugin6.proto` symlink to the specific `.proto` file corresponding to the new `<MINOR_VERSION>` located in the `docs/plugin-protocol/` directory. This step ensures the build process uses the correct protocol definition file. `<MINOR_VERSION>` should be replaced with the actual version number.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/docs/plugin-protocol/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nln -sf ../../docs/plugin-protocol/tfplugin6.<MINOR_VERSION>.proto ./internal/tfplugin6/tfplugin6.proto\n```\n\n----------------------------------------\n\nTITLE: Top-Level JSON Structure for Providers Schema\nDESCRIPTION: Illustrates the overall structure of the JSON output generated by `terraform providers schema -json`. This top-level object includes a `format_version` and a `provider_schemas` map containing detailed schemas for each provider, including their resources, data sources, and functions.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/providers/schema.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"format_version\": \"1.0\",\n\n  // \"provider_schemas\" describes the provider schemas for all\n  // providers throughout the configuration tree.\n  \"provider_schemas\": {\n    // keys in this map are the provider type, such as \"random\"\n    \"example_provider_name\": {\n      // \"provider\" is the schema for the provider configuration\n      \"provider\": <schema-representation>,\n\n      // \"resource_schemas\" map the resource type name to the resource's schema\n      \"resource_schemas\": {\n        \"example_resource_name\": <schema-representation>\n      },\n\n      // \"data_source_schemas\" map the data source type name to the\n      // data source's schema\n      \"data_source_schemas\": {\n        \"example_datasource_name\": <schema-representation>,\n      },\n\n      // \"ephemeral_resource_schemas\" map the resource type name to the\n      // resource's schema\n      \"ephemeral_resource_schemas\": {\n        \"example_resource_name\": <schema-representation>,\n      },\n\n      // \"functions\" map the provider function name to the function definition\n      \"functions\": {\n        \"example_function\": <function-representation>\n      }\n    },\n    \"example_provider_two\": { … }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GCS Backend in Terraform\nDESCRIPTION: Basic configuration for setting up Google Cloud Storage as a backend for Terraform state storage. Specifies the bucket name and prefix path for state files.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/gcs.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  backend \"gcs\" {\n    bucket  = \"tf-state-prod\"\n    prefix  = \"terraform/state\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Orchestration Rules for Stack Deployments in HCL\nDESCRIPTION: Example snippet showing how to set up orchestration rules for Stack deployments using the orchestrate block. These rules can automate approvals and handle errors.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\norchestrate {\n  // Orchestration rules for Stack deployments\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Empty Collection with Attribute Syntax\nDESCRIPTION: Shows how to explicitly specify zero objects using attribute syntax with an empty list.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/attr-as-blocks.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nexample = []\n```\n\n----------------------------------------\n\nTITLE: Invoking a Terraform Credentials Helper with the 'get' Verb (Shell)\nDESCRIPTION: This shell command shows how Terraform executes a configured credentials helper (`terraform-credentials-credstore`) to retrieve credentials for a specific hostname (`app.terraform.io`) using the `get` verb. Configured arguments (`--host=credstore.example.com`) are passed before the verb and hostname. The helper should output a JSON credentials object to stdout on success.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/credentials-helpers.mdx#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nterraform-credentials-credstore --host=credstore.example.com get app.terraform.io\n```\n\n----------------------------------------\n\nTITLE: Saving terraform plan output to a file (CLI Option)\nDESCRIPTION: Describes the `-out=FILE` option for `terraform plan`. This option saves the generated execution plan to the specified file on disk. This saved plan can later be passed to `terraform apply` for execution, which is a common practice in automation workflows.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/plan.mdx#2025-04-22_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\n-out=FILE\n```\n\n----------------------------------------\n\nTITLE: Disabling Terraform Logging via TF_LOG in Shell\nDESCRIPTION: Sets the `TF_LOG` environment variable to `off` to disable detailed logging. Alternatively, unsetting the variable achieves the same result. This is used to turn off debugging output.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/config/environment-variables.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport TF_LOG=off\n```\n\n----------------------------------------\n\nTITLE: Retrieving HCP Terraform Thumbprint for AWS OIDC Provider\nDESCRIPTION: This shell command retrieves the current SSL certificate thumbprint for app.terraform.io, which is used to configure the AWS OIDC provider for HCP Terraform Stack authentication. The command uses OpenSSL to fetch the certificate and extract its SHA1 fingerprint.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/deploy/authenticate.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ echo | openssl s_client -showcerts -servername app.terraform.io -connect app.terraform.io:443 2>/dev/null | openssl x509 -fingerprint -noout -sha1\nsha1 Fingerprint=FD:88:23:AE:FB:96:13:28:A1:34:70:6D:C8:57:5A:17:0F:0B:B3:7C\n```\n\n----------------------------------------\n\nTITLE: COS Backend with Custom Endpoint Configuration\nDESCRIPTION: Configuration for COS backend with a custom endpoint URL. Allows connecting to specific COS endpoint for internal network access.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/cos.mdx#2025-04-22_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  backend \"cos\" {\n    region   = \"ap-guangzhou\"\n    bucket   = \"bucket-for-terraform-state-1258798060\"\n    prefix   = \"terraform/state\"\n    endpoint = \"http://cos-internal.ap-guangzhou.tencentcos.cn\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CIDR Netmask Function Syntax - HCL\nDESCRIPTION: Basic syntax for the cidrnetmask function that converts an IPv4 CIDR prefix to a subnet mask address. The prefix parameter must be in IPv4 CIDR notation format.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/cidrnetmask.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ncidrnetmask(prefix)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Correct Terraform `create_before_destroy` Propagation (DOT)\nDESCRIPTION: This DOT graph definition, embedded in an HTML comment, illustrates Terraform's correct handling of `create_before_destroy` with dependencies. It shows how propagating the `create_before_destroy` behavior to the dependency (`A`) resolves execution graph cycles by appropriately reversing dependencies involving destroy actions, ensuring a valid order of operations (A create, B create, B destroy, A destroy).\nSOURCE: https://github.com/hashicorp/terraform/blob/main/docs/destroying.md#2025-04-22_snippet_10\n\nLANGUAGE: dot\nCODE:\n```\ndigraph replacement {\n    subgraph create {\n        rank=same;\n        a [label=\"A create\"];\n        b [label=\"B create\"];\n        a -> b [dir=back];\n    }\n    subgraph destroy {\n        rank=same;\n        a_d [label=\"A destroy\"];\n        b_d [label=\"B destroy\"];\n        a_d -> b_d;\n    }\n\n    a -> a_d [dir=back];\n    a -> b_d [dir=back, style=dotted];\n    b -> a_d [dir=back, style=dotted];\n    b -> b_d [dir=back];\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating tonumber Function Usage in Terraform\nDESCRIPTION: This code snippet shows various examples of using the tonumber function in Terraform. It demonstrates successful conversions of numbers, strings containing numbers, and null values, as well as an error case for invalid input.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/tonumber.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> tonumber(1)\n1\n> tonumber(\"1\")\n1\n> tonumber(null)\nnull\n> tonumber(\"no\")\nError: Invalid function argument\n\nInvalid value for \"v\" parameter: cannot convert \"no\" to number: string must be\na decimal representation of a number.\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Output Structure for Function Signatures with Comments in JavaScript\nDESCRIPTION: This snippet demonstrates the full top-level JSON structure output by the `terraform metadata functions -json` command, with extensive inline comments explaining each key. It models an example API response including format versioning, a map of function signatures, and detailed documentation for attributes regarding function name, description, return type, fixed and variadic parameters. Requires understanding of JSON and comment syntax as presented here for documentation; the example is not valid JSON for direct parsing due to comment usage and placeholder objects.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/functions-meta.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\\n  \\\"format_version\\\": \\\"1.0\\\",\\n\\n  // \\\"function_signatures\\\" describes the signatures for all\\n  // available functions.\\n  \\\"function_signatures\\\": {\\n    // keys in this map are the function names, such as \\\"abs\\\"\\n    \\\"example_function\\\": {\\n      // \\\"description\\\" is an English-language description of\\n      // the purpose and usage of the function in Markdown.\\n      \\\"description\\\": \\\"string\\\",\\n\\n      // \\\"return_type\\\" is a representation of a type specification\\n      // that the function returns.\\n      \\\"return_type\\\": \\\"string\\\",\\n\\n      // \\\"parameters\\\" is an optional list of the positional parameters\\n      // that the function accepts.\\n      \\\"parameters\\\": [\\n        <parameter-representation>,\\n        …\\n      ],\\n\\n      // \\\"variadic_parameter\\\" is an optional representation of the\\n      // additional arguments that the function accepts after those\\n      // matching with the fixed parameters.\\n      \\\"variadic_parameter\\\": <parameter-representation>\\n    },\\n    \\\"example_function_two\\\": { … }\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Parallelism Option for terraform apply (CLI)\nDESCRIPTION: The `-parallelism=n` option limits the number of concurrent resource operations during the apply process. The default value is 10.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/apply.mdx#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n-parallelism=n\n```\n\n----------------------------------------\n\nTITLE: Configuring Terraform Registry Client Timeout via TF_REGISTRY_CLIENT_TIMEOUT in Shell\nDESCRIPTION: Sets the `TF_REGISTRY_CLIENT_TIMEOUT` environment variable to configure the timeout duration (in seconds) for requests made to the remote Terraform Registry. The default is 10 seconds. This example increases the timeout to 15 seconds.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/config/environment-variables.mdx#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nexport TF_REGISTRY_CLIENT_TIMEOUT=15\n```\n\n----------------------------------------\n\nTITLE: Representing API Tokens in JSON for Terraform Credentials Helpers\nDESCRIPTION: This JSON object illustrates the standard format for representing API credentials within the Terraform credentials helper protocol, specifically for API tokens. The `token` property holds the actual API token string required by Terraform.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/credentials-helpers.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"token\": \"example-token-value\"\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Terraform Lock File Change Message\nDESCRIPTION: Example of the message Terraform displays when changes are made to the lock file during initialization. This indicates that the user should review and commit the changes if they are intentional.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/files/dependency-lock.mdx#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nTerraform has made some changes to the provider dependency selections recorded\nin the .terraform.lock.hcl file. Review those changes and commit them to your\nversion control system if they represent changes you intended to make.\n```\n\n----------------------------------------\n\nTITLE: Visualizing Simple Resource Creation in Terraform with GraphViz\nDESCRIPTION: A GraphViz diagram illustrating the dependency relationships between three resources during creation, where B depends on A and C depends on B.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/docs/destroying.md#2025-04-22_snippet_0\n\nLANGUAGE: graphviz\nCODE:\n```\ndigraph create {\n    subgraph nodes {\n        rank=same;\n        a [label=\"A create\"];\n        b [label=\"B create\"];\n        c [label=\"C create\"];\n        b -> c [dir=back];\n        a -> b [dir=back];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing a Resource Binding with terraform state rm - Shell\nDESCRIPTION: This shell snippet demonstrates using terraform state rm to dissociate all instances of the packet_device resource named 'worker' from Terraform's state. The command requires a valid Terraform installation and assumes the current directory has an initialized working configuration/state. The parameter 'packet_device.worker' specifies the resource to remove. No effect is made on remote infrastructure; only Terraform's state is affected.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/state/rm.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ terraform state rm 'packet_device.worker'\n```\n\n----------------------------------------\n\nTITLE: Referencing a Mercurial Repository as a Module Source in Terraform\nDESCRIPTION: This snippet demonstrates how to use a Mercurial repository as a module source by prefixing the address with hg::, which tells Terraform to use Mercurial for cloning the repository.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/sources.mdx#2025-04-22_snippet_10\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"vpc\" {\n  source = \"hg::http://example.com/vpc.hg\"\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Single Resource Replacement in Terraform with GraphViz\nDESCRIPTION: A GraphViz diagram showing the process when only resource A needs replacement while B only needs an update. A is destroyed and recreated before B is updated.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/docs/destroying.md#2025-04-22_snippet_4\n\nLANGUAGE: graphviz\nCODE:\n```\ndigraph replacement {\n    subgraph create {\n        rank=same;\n        a [label=\"A create\"];\n        b [label=\"B update\"];\n        a -> b [dir=back];\n    }\n    subgraph destroy {\n        rank=same;\n        a_d [label=\"A destroy\"];\n    }\n\n    a -> a_d;\n    b -> a_d [style=dotted];\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Structure for Function Representation\nDESCRIPTION: Specifies the JSON sub-object structure defining provider functions within the schema output. It includes fields for summary, detailed description (Markdown), potential deprecation messages, return type specification, a list of positional parameters, and an optional variadic parameter.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/providers/schema.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // \"summary\" is a shortened English-language description of\n  // the purpose of the function in Markdown.\n  \"summary\": \"string\",\n\n  // \"description\" is a longer English-language description of\n  // the purpose and usage of the function in Markdown.\n  \"description\": \"string\",\n\n  // \"deprecation_message\" when present signals that the function is deprecated\n  // and the message contains practitioner-facing actions for the deprecation.\n  \"deprecation_message\": \"string\",\n\n  // \"return_type\" is a representation of a type specification\n  // that the function returns.\n  \"return_type\": \"string\",\n\n  // \"parameters\" is an optional list of the positional parameters\n  // that the function accepts.\n  \"parameters\": [\n    <parameter-representation>,\n    // ...\n  ],\n\n  // \"variadic_parameter\" is an optional representation of the\n  // additional arguments that the function accepts after those\n  // matching with the fixed parameters.\n  \"variadic_parameter\": <parameter-representation>\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring an Object-type Input Variable in Terraform (HCL)\nDESCRIPTION: The snippet declares a Terraform input variable of type object, specifying only required fields (id, architecture), to accept AMI-related information. This pattern allows for flexible module input, supporting both managed and externally-supplied AMI objects with at least the specified fields. No default value is supplied, so the caller must provide this variable. Compatibility requires Terraform 0.12+ with object type support.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/develop/composition.mdx#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"ami\" {\n  type = object({\n    # Declare an object using only the subset of attributes the module\n    # needs. Terraform will allow any object that has at least these\n    # attributes.\n    id           = string\n    architecture = string\n  })\n}\n\n```\n\n----------------------------------------\n\nTITLE: Checking for Empty Lists in Terraform\nDESCRIPTION: Example showing how to check if a list is empty in Terraform. The code demonstrates the proper usage of the length function rather than direct comparison which might produce unexpected results due to type differences.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/operators.mdx#2025-04-22_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nlength(var.list) == 0\n```\n\nLANGUAGE: hcl\nCODE:\n```\nvar.list == []\n```\n\n----------------------------------------\n\nTITLE: Handling Provider Name Conflicts in Terraform Configuration\nDESCRIPTION: This snippet demonstrates how to handle conflicts when using two providers with the same preferred local name. It uses compound local names to distinguish between them.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/providers/requirements.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    hashicorp-http = {\n      source  = \"hashicorp/http\"\n      version = \"~> 2.0\"\n    }\n    mycorp-http = {\n      source  = \"mycorp/http\"\n      version = \"~> 1.0\"\n    }\n  }\n}\n\nprovider \"mycorp-http\" {\n  # ...\n}\n\ndata \"http\" \"example\" {\n  provider = hashicorp-http\n  #...\n}\n```\n\n----------------------------------------\n\nTITLE: Encoding State Files with Set-Content in PowerShell\nDESCRIPTION: This snippet demonstrates using PowerShell's `Set-Content` to ensure that state files are written in UTF-8 encoding without a byte order mark (BOM), which is required by Terraform. This is particularly useful for Windows environments to guarantee state file compatibility. Input: output of `terraform state push`, Output: a properly encoded `terraform.tfstate` file.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/state/push.mdx#2025-04-22_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nterraform state push | Set-Content terraform.tfstate\n```\n\n----------------------------------------\n\nTITLE: Initializing a Terraform Project and Git Repository - CLI - shell\nDESCRIPTION: This sequence of shell commands demonstrates how to initialize a new Git repository, edit a Terraform configuration file, and initialize a Terraform working directory. It highlights best practices such as using version control and following up with Terraform's 'init' command to ready the environment for future provisioning. Dependencies include Git and Terraform installed locally. Key parameters include the desired directory and configuration filename (main.tf). Outputs are a Git-initialized folder and a fully initialized Terraform workspace.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/intro/core-workflow.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Create repository\\n$ git init my-infra && cd my-infra\\n\\nInitialized empty Git repository in /.../my-infra/.git/\\n\\n# Write initial config\\n$ vim main.tf\\n\\n# Initialize Terraform\\n$ terraform init\\n\\nInitializing provider plugins...\\n# ...\\nTerraform has been successfully initialized!\\n\n```\n\n----------------------------------------\n\nTITLE: Refreshing Terraform State with `terraform refresh` (Shell)\nDESCRIPTION: References the `terraform refresh` command. This command updates the state file against real resources. It might be necessary to run `terraform refresh` before using `terraform show -json` on a state file, especially if providers have been updated since the state was written, to ensure the displayed state is accurate.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/show.mdx#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nterraform refresh\n```\n\n----------------------------------------\n\nTITLE: COS Backend with Combined CAM Role and Assume Role\nDESCRIPTION: Advanced configuration combining CAM role and Assume Role for authentication. Performs CAM authentication first, then proceeds with Assume Role.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/cos.mdx#2025-04-22_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  backend \"cos\" {\n    region        = \"ap-guangzhou\"\n    bucket        = \"bucket-for-terraform-state-{appid}\"\n    prefix        = \"terraform/state\"\n    cam_role_name = \"my-cam-role-name\"\n    assume_role {\n      role_arn         = \"qcs::cam::uin/xxx:roleName/yyy\"\n      session_name     = \"my-session-name\"\n      session_duration = 7200\n      external_id      = \"my-external-id\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Alternate Provider Configuration using Meta-Argument in HCL\nDESCRIPTION: This HCL example demonstrates defining multiple configurations for the 'google' provider, one default (for 'us-central1') and one with the alias 'europe' (for 'europe-west1'). It then shows how to create a 'google_compute_instance' resource and explicitly assign it to the 'europe' provider configuration using the `provider = google.europe` meta-argument, overriding the default association.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/meta-arguments/resource-provider.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# default configuration\nprovider \"google\" {\n  region = \"us-central1\"\n}\n\n# alternate configuration, whose alias is \"europe\"\nprovider \"google\" {\n  alias  = \"europe\"\n  region = \"europe-west1\"\n}\n\nresource \"google_compute_instance\" \"example\" {\n  # This \"provider\" meta-argument selects the google provider\n  # configuration whose alias is \"europe\", rather than the\n  # default configuration.\n  provider = google.europe\n\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Data Generation Stage in a Mocked Provider - Terraform HCL\nDESCRIPTION: This code demonstrates customizing when Terraform generates mock data for a provider by using the 'override_during' attribute within a 'mock_provider' block. By setting 'override_during = plan', it causes Terraform to generate fake values during the planning phase instead of the default apply phase. Useful for testing scenarios that depend on availability of resource attributes before apply; requires use with the 'terraform test' features.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/tests/mocking.mdx#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nmock_provider \"aws\" {\n  override_during = plan\n}\n\n```\n\n----------------------------------------\n\nTITLE: Connecting to Delve Debug Server via CLI\nDESCRIPTION: This command connects to the headless Delve debug server using the Delve CLI, allowing for debugging of the Terraform process.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/docs/debugging.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndlv connect :2345\n```\n\n----------------------------------------\n\nTITLE: Basic Quoted String in Terraform\nDESCRIPTION: Simple example of a quoted string literal in Terraform configuration language.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/strings.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n\"hello\"\n```\n\n----------------------------------------\n\nTITLE: Selecting a Terraform Workspace via TF_WORKSPACE in Shell\nDESCRIPTION: Sets the `TF_WORKSPACE` environment variable to programmatically select a Terraform workspace, overriding any currently selected workspace. This example selects `your_workspace`. It's an alternative to `terraform workspace select` and is recommended primarily for non-interactive scenarios like automation.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/config/environment-variables.mdx#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nexport TF_WORKSPACE=your_workspace\n```\n\n----------------------------------------\n\nTITLE: Standard Heredoc Block Usage\nDESCRIPTION: Example showing heredoc syntax within a configuration block without indentation handling.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/strings.mdx#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nblock {\n  value = <<EOT\nhello\nworld\nEOT\n}\n```\n\n----------------------------------------\n\nTITLE: Adding New Provider Dependency in Terraform Lock File (HCL)\nDESCRIPTION: This diff shows the changes made to .terraform.lock.hcl when adding a new provider (azurerm) dependency. It includes the version, constraints, and package hashes for the new provider.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/files/dependency-lock.mdx#2025-04-22_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n--- .terraform.lock.hcl\t2020-10-07 16:12:07.539570634 -0700\n+++ .terraform.lock.hcl\t2020-10-07 16:12:15.267487237 -0700\n@@ -6,6 +6,26 @@\n   ]\n }\n\n+provider \"registry.terraform.io/hashicorp/azurerm\" {\n+  version     = \"2.30.0\"\n+  constraints = \"~> 2.12\"\n+  hashes = [\n+    \"h1:FJwsuowaG5CIdZ0WQyFZH9r6kIJeRKts9+GcRsTz1+Y=\",\n+    \"h1:c/ntSXrDYM1mUir2KufijYebPcwKqS9CRGd3duDSGfY=\",\n+    \"h1:yre4Ph76g9H84MbuhZ2z5MuldjSA4FsrX6538O7PCcY=\",\n+    \"zh:04f0a50bb2ba92f3bea6f0a9e549ace5a4c13ef0cbb6975494cac0ef7d4acb43\",\n+    \"zh:2082e12548ebcdd6fd73580e83f626ed4ed13f8cdfd51205d8696ffe54f30734\",\n+    \"zh:246bcc449e9a92679fb30f3c0a77f05513886565e2dcc66b16c4486f51533064\",\n+    \"zh:24de3930625ac9014594d79bfa42d600eca65e9022b9668b54bfd0d924e21d14\",\n+    \"zh:2a22893a576ff6f268d9bf81cf4a56406f7ba79f77826f6df51ee787f6d2840a\",\n+    \"zh:2b27485e19c2aaa9f15f29c4cff46154a9720647610171e30fc6c18ddc42ec28\",\n+    \"zh:435f24ce1fb2b63f7f02aa3c84ac29c5757cd29ec4d297ed0618423387fe7bd4\",\n+    \"zh:7d99725923de5240ff8b34b5510569aa4ebdc0bdb27b7bac2aa911a8037a3893\",\n+    \"zh:7e3b5d0af3b7411dd9dc65ec9ab6caee8c191aee0fa7f20fc4f51716e67f50c0\",\n+    \"zh:da0af4552bef5a29b88f6a0718253f3bf71ce471c959816eb7602b0dadb469ca\",\n+  ]\n+}\n+\n provider \"registry.terraform.io/newrelic/newrelic\" {\n   version     = \"2.1.2\"\n   constraints = \"~> 2.1.1\"\n```\n\n----------------------------------------\n\nTITLE: Visualizing Incorrect Terraform `create_before_destroy` Handling (DOT)\nDESCRIPTION: This DOT graph definition, embedded in an HTML comment, illustrates a scenario where applying `create_before_destroy` only to a dependent resource (`B`) without forcing it onto its dependency (`A`) leads to a cycle in Terraform's execution plan. It visualizes the create and destroy nodes for resources A and B and their interdependencies, highlighting the problematic cycle introduced by naive `create_before_destroy` application.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/docs/destroying.md#2025-04-22_snippet_9\n\nLANGUAGE: dot\nCODE:\n```\ndigraph replacement {\n    subgraph create {\n        rank=same;\n        a [label=\"A create\"];\n        b [label=\"B create\"];\n        a -> b [dir=back];\n    }\n    subgraph destroy {\n        rank=same;\n        a_d [label=\"A destroy\"];\n        b_d [label=\"B destroy\"];\n        a_d -> b_d;\n    }\n\n    a -> a_d;\n    a -> b_d [style=dotted];\n    b -> a_d [style=dotted];\n    b -> b_d [dir=back];\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Terraform Login Command\nDESCRIPTION: The basic syntax for the terraform login command, which obtains an API token for Terraform services. If no hostname is provided, it defaults to HCP Terraform at app.terraform.io.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/login.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterraform login [hostname]\n```\n\n----------------------------------------\n\nTITLE: Querying a Sensitive Output Variable by Name via Terraform CLI\nDESCRIPTION: This shell snippet shows how using “terraform output” with a named sensitive output reveals the actual plain-text value, bypassing masking. Sensitive values are stored as cleartext in state but not redacted for named queries. Use care to avoid exposing secrets in logs; additional access controls or redactions may be necessary to protect secrets.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/output.mdx#2025-04-22_snippet_2\n\nLANGUAGE: shellsession\nCODE:\n```\n$ terraform output password\npassword = notasecurepassword\n\n```\n\n----------------------------------------\n\nTITLE: Executing Terraform Apply with Refresh Only Option - Bash\nDESCRIPTION: This snippet provides the equivalent command to `terraform refresh`, suggesting the use of `terraform apply` with the `-refresh-only` and `-auto-approve` options. This method helps update the Terraform state with the current settings from remote objects, while highlighting the risks of its automatic application without manual confirmation. This approach requires Terraform version v0.15.4 or later.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/refresh.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterraform apply -refresh-only -auto-approve\n```\n\n----------------------------------------\n\nTITLE: Complete Dynamic Component Removal with Variable Tracking\nDESCRIPTION: Comprehensive example showing component removal with separate variables for active and to-be-removed regions.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/reference/tfstack.mdx#2025-04-22_snippet_9\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"regions\" {\n    type = set(string)\n}\n\n# Adding a region to this variable instructs HCP Terraform to remove it.\nvariable \"removed_regions\" {\n    type = set(string)\n}\n\ncomponent \"s3_buckets\" {\n    source = \"./s3\"\n\n    for_each = var.regions\n\n    providers = {\n        aws = provider.aws.config[each.value]\n    }\n\n    variables = {\n        region = each.value\n    }\n}\n\nremoved {\n    source = \"./s3\"\n    # Iterate and remove the regions in our new removed_regions variable.\n    for_each = var.removed_regions\n\n    from = component.s3_buckets[each.value]\n    providers = {\n        aws = provider.aws.config[each.value]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Provider Requirements\nDESCRIPTION: Specifies required provider versions and sources. This example requires AWS provider version 2.7.0 or later from the public Terraform registry.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/terraform.mdx#2025-04-22_snippet_12\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    aws = {\n      version = \">= 2.7.0\"\n      source = \"hashicorp/aws\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Confirming Apply and Completing Terraform Provision - CLI - shell\nDESCRIPTION: This snippet shows the Terraform CLI prompt that asks the user to confirm infrastructure provisioning. Only an explicit 'yes' input is accepted. Upon approval, Terraform applies all pending actions as per the most recent plan. Outputs specify the numbers of resources added, changed, or destroyed. Dependency is an up-to-date Terraform configuration with necessary permissions.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/intro/core-workflow.mdx#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nDo you want to perform these actions?\\n\\n  Terraform will perform the actions described above.\\n  Only 'yes' will be accepted to approve.\\n  Enter a value: yes\\n\\n# ...\\n\\nApply complete! Resources: 1 added, 0 changed, 0 destroyed.\\n\n```\n\n----------------------------------------\n\nTITLE: Executing `terraform show` to Inspect State/Plan (Shell)\nDESCRIPTION: Demonstrates the basic command syntax for `terraform show`. This command displays human-readable output from a specified Terraform state file or plan file. If no file path is provided, it shows the latest state snapshot. Options like `-no-color` or `-json` can modify the output.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/show.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nterraform show [options] [file]\n```\n\n----------------------------------------\n\nTITLE: Showing Attributes of a Resource in Terraform State\nDESCRIPTION: This snippet demonstrates how to use the `terraform state show` command to display the attributes of a single resource in the Terraform state file. It requires the address of the resource and may specify the path to the state file using the `-state` flag. Intended for human-readable output.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/state/show.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ terraform state show 'packet_device.worker'\n# packet_device.worker:\nresource \"packet_device\" \"worker\" {\n    billing_cycle = \"hourly\"\n    created       = \"2015-12-17T00:06:56Z\"\n    facility      = \"ewr1\"\n    hostname      = \"prod-xyz01\"\n    id            = \"6015bg2b-b8c4-4925-aad2-f0671d5d3b13\"\n    locked        = false\n}\n```\n\n----------------------------------------\n\nTITLE: Completing Ephemeral Operation - Terraform UI - JSON\nDESCRIPTION: This JSON snippet shows the 'ephemeral_op_complete' message, reporting that an ephemeral operation (such as open, renew, or close) has finished for a resource. Key fields are the resource details, action performed, and 'elapsed_seconds' showing the total operation duration. Tools can use this for summarization or completion triggers.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/machine-readable-ui.mdx#2025-04-22_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@level\": \"info\",\n  \"@message\": \"ephemeral.random_password.example: Opening complete after 1s\",\n  \"@module\": \"terraform.ui\",\n  \"@timestamp\": \"2024-10-30T10:34:26.222465-00:00\",\n  \"hook\": {\n    \"resource\": {\n      \"addr\": \"ephemeral.random_password.example\",\n      \"module\": \"\",\n      \"resource\": \"ephemeral.random_password.example\",\n      \"implied_provider\": \"random\",\n      \"resource_type\": \"random_password\",\n      \"resource_name\": \"example\",\n      \"resource_key\": null\n    },\n    \"action\": \"open\",\n    \"elapsed_seconds\": 1\n  },\n  \"type\": \"ephemeral_op_complete\"\n}\n```\n\n----------------------------------------\n\nTITLE: Remote State Data Source Configuration with GCS\nDESCRIPTION: Examples of accessing remote state stored in GCS using the terraform_remote_state data source, showing syntax for both Terraform 0.12+ and earlier versions.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/gcs.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"terraform_remote_state\" \"foo\" {\n  backend = \"gcs\"\n  config = {\n    bucket  = \"terraform-state\"\n    prefix  = \"prod\"\n  }\n}\n\n# Terraform >= 0.12\nresource \"local_file\" \"foo\" {\n  content  = data.terraform_remote_state.foo.outputs.greeting\n  filename = \"${path.module}/outputs.txt\"\n}\n\n# Terraform <= 0.11\nresource \"local_file\" \"foo\" {\n  content  = \"${data.terraform_remote_state.foo.greeting}\"\n  filename = \"${path.module}/outputs.txt\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic AWS Providers per Region in HCL\nDESCRIPTION: This HCL snippet, typically in a `providers.tfstack.hcl` file, configures required providers (AWS, random) and dynamically creates AWS provider instances for each region specified in the `var.regions` variable. It utilizes the `for_each` meta-argument within the `provider \"aws\"` block and configures each instance for OIDC authentication using `var.role_arn` and `var.identity_token`.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/use-cases.mdx#2025-04-22_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\n# providers.tfstack.hcl\n\nrequired_providers {\n    aws = {\n        source  = \"hashicorp/aws\"\n        version = \"~> 5.7.0\"\n    }\n\n    random = {\n        source  = \"hashicorp/random\"\n        version = \"~> 3.5.1\"\n    }\n}\n\n\nprovider \"aws\" \"configurations\" {\n# This provider configuration iterates through and creates a configuration\n# for each region.\n    for_each = var.regions\n\n    config {\n        region = each.value\n\n        assume_role_with_web_identity {\n        role_arn           = var.role_arn\n        web_identity_token = var.identity_token\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Terraform Variable in JSON\nDESCRIPTION: This JSON snippet specifies a Terraform variable named 'example' with a default value of 'hello'. It demonstrates the structure of defining variables in JSON format for Terraform configurations. No specific dependencies are needed other than having Terraform setup to read JSON configuration files with a '.tf.json' suffix, interpreting the JSON object as a native syntax block.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/syntax/json.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"variable\": {\n    \"example\": {\n      \"default\": \"hello\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic max Function Usage in Terraform\nDESCRIPTION: Demonstrates using the max function with multiple individual number arguments to find the greatest value.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/max.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> max(12, 54, 3)\n54\n```\n\n----------------------------------------\n\nTITLE: Using urlencode Function with Various String Inputs in Terraform\nDESCRIPTION: Examples demonstrating the urlencode function in Terraform. The function applies URL encoding to strings, encoding special characters using percent encoding per RFC 3986, and handling both ASCII and non-ASCII (UTF-8) characters properly.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/urlencode.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> urlencode(\"Hello World!\")\nHello+World%21\n> urlencode(\"☃\")\n%E2%98%83\n> \"http://example.com/search?q=${urlencode(\"terraform urlencode\")}\"\nhttp://example.com/search?q=terraform+urlencode\n```\n\n----------------------------------------\n\nTITLE: Validating Terraform Stack Configuration\nDESCRIPTION: Command to validate the syntax and static types of a Terraform Stack configuration.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/reference/tfstacks-cli.mdx#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ tfstacks validate\n```\n\n----------------------------------------\n\nTITLE: Setting Remote State Persistence Interval via TF_STATE_PERSIST_INTERVAL in Shell\nDESCRIPTION: Sets the `TF_STATE_PERSIST_INTERVAL` environment variable to define the interval (in seconds) at which Terraform attempts to persist state to a remote backend during an `apply` operation. The default minimum is 20 seconds, though specific backends might enforce a higher minimum. This example sets the desired interval to 100 seconds.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/config/environment-variables.mdx#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nexport TF_STATE_PERSIST_INTERVAL=100\n```\n\n----------------------------------------\n\nTITLE: Defining a Failing Terraform Test Case (HCL)\nDESCRIPTION: This HCL code defines a Terraform test file (`example_2.tftest.hcl`) containing a single test run named `false_is_false`. It uses an `assert` block to check if the `local.false` variable equals the string \"false\". Based on the example `main.tf` where `local.false` is incorrectly set to \"true\", this assertion is expected to fail.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/test.mdx#2025-04-22_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\n# example_2.tftest.hcl\nrun \"false_is_false\" {\n  assert {\n    condition     = local.false == \"false\"\n    error_message = \"local.false did not match expected value\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Backend During Initialization\nDESCRIPTION: Option for providing partial backend configuration during initialization. Useful when backend settings are dynamic or sensitive and cannot be statically specified in the configuration file.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/init.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nterraform init -backend-config=...\n```\n\n----------------------------------------\n\nTITLE: Element Function Basic Syntax in HCL\nDESCRIPTION: Basic syntax definition for the element function that takes a list and index parameter to retrieve a single element.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/element.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nelement(list, index)\n```\n\n----------------------------------------\n\nTITLE: Running a Specific Terraform Test File (PowerShell)\nDESCRIPTION: Demonstrates executing the `terraform test` command in a PowerShell environment, targeting only the `validations.tftest.hcl` file located within the default `tests` directory using the `-filter` option. Note the use of backslashes and single quotes for the file path.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/test.mdx#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nterraform test -filter='tests\\validations.tftest.hcl'\n```\n\n----------------------------------------\n\nTITLE: Adding Comments in Terraform JSON Configuration\nDESCRIPTION: Demonstrates how to add comments in JSON configuration using the special '//' property name within block bodies. This is useful for documentation while maintaining valid JSON syntax.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/syntax/json.mdx#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resource\": {\n    \"aws_instance\": {\n      \"example\": {\n        \"//\": \"This instance runs the scheduled tasks for backup\",\n\n        \"instance_type\": \"t2.micro\",\n        \"ami\": \"ami-abc123\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using pow Function in Terraform\nDESCRIPTION: Demonstrates using the pow function to calculate exponents. The function takes two arguments: the base number and the power to raise it to. Returns the result of raising the first number to the power of the second number.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/pow.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> pow(3, 2)\n9\n```\n\nLANGUAGE: hcl\nCODE:\n```\n> pow(4, 0)\n1\n```\n\n----------------------------------------\n\nTITLE: Updating Write-Only Arguments with Versions\nDESCRIPTION: This example shows how to update a write-only argument by incrementing its version. This triggers the provider to use the new password_wo value to update the AWS RDS instance.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/resources/ephemeral/write-only.mdx#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_db_instance\" \"main\" {\n  instance_class      = \"db.t3.micro\"\n  allocated_storage   = \"5\"\n  engine              = \"postgres\"\n  username            = \"example\"\n  password_wo         = \"new-password-here\"\n  password_wo_version = 2\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing a Single Instance by Numeric Index - Terraform Resource Addressing\nDESCRIPTION: This example demonstrates how to reference a single instance of a resource, created via count, in Terraform. Using the address syntax aws_instance.web[3], users can select the fourth (index 3) instance of the resource aws_instance.web. This method depends on the resource having a count argument, with instances indexed from 0.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/state/resource-addressing.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\naws_instance.web[3]\n```\n\n----------------------------------------\n\nTITLE: Upgrading Existing Provider Version in Terraform Lock File (HCL)\nDESCRIPTION: This diff illustrates the changes in .terraform.lock.hcl when upgrading an existing provider (azurerm) to a newer version. It updates the version, constraints, and package hashes for the provider.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/files/dependency-lock.mdx#2025-04-22_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n--- .terraform.lock.hcl\t2020-10-07 16:44:25.819579509 -0700\n+++ .terraform.lock.hcl\t2020-10-07 16:43:42.785665945 -0700\n@@ -7,22 +7,22 @@\n }\n\n provider \"registry.terraform.io/hashicorp/azurerm\" {\n-  version     = \"2.1.0\"\n-  constraints = \"~> 2.1.0\"\n+  version     = \"2.0.0\"\n+  constraints = \"2.0.0\"\n   hashes      = [\n-    \"h1:EOJImaEaVThWasdqnJjfYc6/P8N/MRAq1J7avx5ZbV4=\",\n-    \"zh:0015b491cf9151235e57e35ea6b89381098e61bd923f56dffc86026d58748880\",\n-    \"zh:4c5682ba1e0fc7e2e602d3f103af1638f868c31fe80cc1a884a97f6dad6e1c11\",\n-    \"zh:57bac885b108c91ade4a41590062309c832c9ab6bf6a68046161636fcaef1499\",\n-    \"zh:5810d48f574c0e363c969b3f45276369c8f0a35b34d6202fdfceb7b85b3ac597\",\n-    \"zh:5c6e37a44462b8662cf9bdd29ce30523712a45c27c5d4711738705be0785db41\",\n-    \"zh:64548940a3387aa3a752e709ee9eb9982fa820fe60eb60e5f212cc1d2c58549e\",\n-    \"zh:7f46749163da17330bbb5293dc825333c86304baa0a7c6256650ac536b4567c8\",\n-    \"zh:8f8970f2df75ac43ffdd112055ee069d8bd1030f7eb4367cc4cf494a1fa802c3\",\n-    \"zh:9ad693d00dc5d7d455d06faba70e716bce727c6706f7293288e87fd7956b8fe0\",\n-    \"zh:b6e3cb55e6aec62b47edd0d2bd5e14bd6a2bcfdac65930a6e9e819934734c57b\",\n-    \"zh:d6a3f3b9b05c28ecf3919e9e7afa185805a6d7442fc4b3eedba749c2731d1f0e\",\n-    \"zh:d81fb624a357c57c7ea457ce543d865b39b12f26c2edd58a2f7cd43326c91010\",\n+    \"h1:bigGXBoRbp7dv79bEEn+aaju8575qEXHQ57XHVPJeB8=\",\n+    \"zh:09c603c8904ca4a5bc19e82335afbc2837dcc4bee81e395f9daccef2f2cba1c8\",\n+    \"zh:194a919d4836d6c6d4ce598d0c66cce00ddc0d0b5c40d01bb32789964d818b42\",\n+    \"zh:1f269627df4e266c4e0ef9ee2486534caa3c8bea91a201feda4bca525005aa0a\",\n+    \"zh:2bae3071bd5f8e553355c4b3a547d6efe1774a828142b762e9a4e85f79be7f63\",\n+    \"zh:6c98dfa5c3468e8d02e2b3af7c4a8a14a5d469ce5a642909643b413a17ca338b\",\n+    \"zh:7af78f61666fd45fbf428161c061ea2623162d601b79dc71d6a5158756853ffa\",\n+    \"zh:883c2df86ae9ba2a5c167cf5c2c7deca0239171a224d6d335f0fd6dd9c283830\",\n+    \"zh:a2028379078577d8ff5ecfca6e8a8b25a25ffb1686de0ee52a7fe8011783488b\",\n+    \"zh:abe6ef399552fd3861a454a839cd978c1d15735658fdc00f9054435aff0f4620\",\n+    \"zh:c30b1bf14077913c3cdf34979b1434dbb1353cb5995eb3956b191c50538b64a9\",\n+    \"zh:ca64ae2ad9793e5631e3b0b9327f7cb22cb5d8e9de57be7d85821791b1d5a375\",\n+    \"zh:fffe56904a38109bb8d613b02808a177c3ddfac19f03b3aac799281fea38f475\",\n   ]\n }\n```\n\n----------------------------------------\n\nTITLE: Reporting Provision Errored Message - Terraform UI - JSON\nDESCRIPTION: This snippet illustrates the JSON object structure for a 'provision_errored' message, emitted when a resource's provisioner fails. It highlights the resource and provisioner involved, which is critical for error handling and diagnostics in automated systems. Inputs display the failed resource's full address and provisioner context, with the type indicating failure.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/machine-readable-ui.mdx#2025-04-22_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@level\": \"info\",\n  \"@message\": \"null_resource.none[0]: (local-exec) Provisioning errored\",\n  \"@module\": \"terraform.ui\",\n  \"@timestamp\": \"2021-03-26T16:38:54.013572-04:00\",\n  \"hook\": {\n    \"resource\": {\n      \"addr\": \"null_resource.none[0]\",\n      \"module\": \"\",\n      \"resource\": \"null_resource.none[0]\",\n      \"implied_provider\": \"null\",\n      \"resource_type\": \"null_resource\",\n      \"resource_name\": \"none\",\n      \"resource_key\": 0\n    },\n    \"provisioner\": \"local-exec\"\n  },\n  \"type\": \"provision_errored\"\n}\n```\n\n----------------------------------------\n\nTITLE: DynamoDB IAM Permissions for Terraform State Locking\nDESCRIPTION: AWS IAM policy statement for DynamoDB table permissions required for Terraform state locking operations, including describing tables and manipulating items.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/s3.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"dynamodb:DescribeTable\",\n        \"dynamodb:GetItem\",\n        \"dynamodb:PutItem\",\n        \"dynamodb:DeleteItem\"\n      ],\n      \"Resource\": \"arn:aws:dynamodb:*:*:table/mytable\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Basic formatdate Function Syntax in HCL\nDESCRIPTION: Shows the basic syntax for using the formatdate function in Terraform configuration language.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/formatdate.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nformatdate(spec, timestamp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Backend with Managed Identity Authentication\nDESCRIPTION: Configuration example using Managed Identity (MSI) for Azure backend authentication. Requires MSI to be enabled and proper configuration of storage account access.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/azurerm.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  backend \"azurerm\" {\n    use_msi              = true                                    # Can also be set via `ARM_USE_MSI` environment variable.\n    use_azuread_auth     = true                                    # Can also be set via `ARM_USE_AZUREAD` environment variable.\n    tenant_id            = \"00000000-0000-0000-0000-000000000000\"  # Can also be set via `ARM_TENANT_ID` environment variable.\n    client_id            = \"00000000-0000-0000-0000-000000000000\"  # Can also be set via `ARM_CLIENT_ID` environment variable. Not required for System Assigned Managed Identity.\n    storage_account_name = \"abcd1234\"                              # Can be passed via `-backend-config=`\"storage_account_name=<storage account name>\"` in the `init` command.\n    container_name       = \"tfstate\"                               # Can be passed via `-backend-config=`\"container_name=<container name>\"` in the `init` command.\n    key                  = \"prod.terraform.tfstate\"                # Can be passed via `-backend-config=`\"key=<blob key name>\"` in the `init` command.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Filesha1 Function Syntax in HCL\nDESCRIPTION: Demonstrates the basic syntax for using the filesha1 function in Terraform configuration.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/filesha1.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nfilesha1(path)\n```\n\n----------------------------------------\n\nTITLE: Chunklist Function Usage Examples in HCL\nDESCRIPTION: Demonstrates practical examples of using the chunklist function with different chunk sizes. Shows splitting a list of strings into chunks of size 2 and size 1.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/chunklist.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> chunklist([\"a\", \"b\", \"c\", \"d\", \"e\"], 2)\n[\n  [\n    \"a\",\n    \"b\",\n  ],\n  [\n    \"c\",\n    \"d\",\n  ],\n  [\n    \"e\",\n  ],\n]\n> chunklist([\"a\", \"b\", \"c\", \"d\", \"e\"], 1)\n[\n  [\n    \"a\",\n  ],\n  [\n    \"b\",\n  ],\n  [\n    \"c\",\n  ],\n  [\n    \"d\",\n  ],\n  [\n    \"e\",\n  ],\n]\n```\n\n----------------------------------------\n\nTITLE: Initiating Refresh Start Event - Terraform UI - JSON\nDESCRIPTION: This snippet represents the 'refresh_start' event's JSON payload, recording when Terraform begins refreshing the state for a resource. Inputs specify the targeted resource and include 'id_key' and 'id_value' to uniquely identify the resource instance. This is emitted at the start of a refresh operation, listing vital identification details for tracking.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/machine-readable-ui.mdx#2025-04-22_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@level\": \"info\",\n  \"@message\": \"null_resource.none[0]: Refreshing state... [id=1971614370559474622]\",\n  \"@module\": \"terraform.ui\",\n  \"@timestamp\": \"2021-03-26T14:18:06.508915-04:00\",\n  \"hook\": {\n    \"resource\": {\n      \"addr\": \"null_resource.none[0]\",\n      \"module\": \"\",\n      \"resource\": \"null_resource.none[0]\",\n      \"implied_provider\": \"null\",\n      \"resource_type\": \"null_resource\",\n      \"resource_name\": \"none\",\n      \"resource_key\": 0\n    },\n    \"id_key\": \"id\",\n    \"id_value\": \"1971614370559474622\"\n  },\n  \"type\": \"refresh_start\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Providers with Terraform CLI - Markdown\nDESCRIPTION: This Markdown snippet outlines the basic usage of the `terraform providers` command. It provides a quick command-line invocation example to help users understand how to list all required providers for the current Terraform configuration. No dependencies or prerequisites other than having the Terraform CLI installed and configured are needed. The command takes no parameters, outputs provider metadata to the terminal, and is intended for quick inspection during configuration development.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/providers.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nUsage: `terraform providers`\n```\n\n----------------------------------------\n\nTITLE: Completing Refresh Event - Terraform UI - JSON\nDESCRIPTION: This JSON structure exemplifies a 'refresh_complete' message, which signals the completion of a Terraform state refresh for a specific resource. It documents the resource and its unique ID, showing that refresh processing has ended. This message is commonly used for audit logging and monitoring refresh workflows.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/machine-readable-ui.mdx#2025-04-22_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@level\": \"info\",\n  \"@message\": \"null_resource.none[0]: Refresh complete [id=1971614370559474622]\",\n  \"@module\": \"terraform.ui\",\n  \"@timestamp\": \"2021-03-26T14:18:06.509371-04:00\",\n  \"hook\": {\n    \"resource\": {\n      \"addr\": \"null_resource.none[0]\",\n      \"module\": \"\",\n      \"resource\": \"null_resource.none[0]\",\n      \"implied_provider\": \"null\",\n      \"resource_type\": \"null_resource\",\n      \"resource_name\": \"none\",\n      \"resource_key\": 0\n    },\n    \"id_key\": \"id\",\n    \"id_value\": \"1971614370559474622\"\n  },\n  \"type\": \"refresh_complete\"\n}\n```\n\n----------------------------------------\n\nTITLE: Destroy Planning Mode Option for terraform apply (CLI)\nDESCRIPTION: When running `terraform apply` without a saved plan, the `-destroy` option creates a plan to destroy all remote objects managed by the configuration.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/apply.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n-destroy\n```\n\n----------------------------------------\n\nTITLE: Basic regexall Function Syntax in HCL\nDESCRIPTION: Shows the basic syntax for calling the regexall function with a pattern and string parameter.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/regexall.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nregexall(pattern, string)\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin Cache and Disabling Checkpoints\nDESCRIPTION: This snippet demonstrates how to define the plugin cache directory and disable checkpoint features in the Terraform CLI configuration. The `plugin_cache_dir` specifies the location of the plugin cache, while `disable_checkpoint` is set to `true` to prevent automatic upgrade and security checks.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/config/config-file.mdx#2025-04-22_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nplugin_cache_dir   = \"$HOME/.terraform.d/plugin-cache\"\ndisable_checkpoint = true\n```\n\n----------------------------------------\n\nTITLE: Accessing Variable Set Credentials in Terraform Deployments\nDESCRIPTION: Demonstrates how to use a store block to access credentials from an HCP Terraform variable set. This configuration retrieves AWS credentials from a variable set and passes them to a deployment.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/deploy/authenticate.mdx#2025-04-22_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\n# deployments.tfdeploy.hcl\n\n# Source environment secrets from your HCP Terraform variable set\nstore \"varset\" \"tokens\" {\n  id       = \"varset-<variables-set-id>\"\n  category = \"env\"\n}\n\n# Access your variable set's value using your store and pass them into your \n# deployment's inputs.\ndeployment \"test\" {\n  inputs = {\n    access_key = store.varset.tokens.AWS_ACCESS_KEY_ID    \n    secret_key = store.varset.tokens.AWS_SECRET_ACCESS_KEY\n    session_token = store.varset.tokens.AWS_SESSION_TOKEN\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: One Function with Sets\nDESCRIPTION: Examples demonstrating the use of 'one' function with sets, including empty sets, single-element sets, and invalid multi-element sets.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/one.mdx#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\n> one(toset([]))\nnull\n> one(toset([\"hello\"]))\n\"hello\"\n> one(toset([\"hello\",\"goodbye\"]))\n\nError: Invalid function argument\n\nInvalid value for \"list\" parameter: must be a list, set, or tuple value with\neither zero or one elements.\n```\n\n----------------------------------------\n\nTITLE: Using CIDR Function in Terraform Console\nDESCRIPTION: Demonstrates the use of the cidrnetmask function in the Terraform console to calculate the netmask of a CIDR block.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/console.mdx#2025-04-22_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\n> cidrnetmask(\"172.16.0.0/12\")\n```\n\n----------------------------------------\n\nTITLE: JSON Nested Block Mapping Example\nDESCRIPTION: This JSON snippet describes how nested blocks are represented, in this case for lifecycle settings of a resource. It shows how a lifecycle block is directly nested within a resource block in JSON format, akin to HCL representations.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/syntax/json.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resource\": {\n    \"aws_instance\": {\n      \"example\": {\n        \"lifecycle\": {\n          \"create_before_destroy\": true\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Forcing Archive Interpretation for HTTP Sources in Terraform\nDESCRIPTION: This snippet shows how to force Terraform to interpret an HTTP URL as an archive using the archive parameter, even when the URL doesn't have a recognized archive file extension.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/sources.mdx#2025-04-22_snippet_13\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"vpc\" {\n  source = \"https://example.com/vpc-module?archive=zip\"\n}\n```\n\n----------------------------------------\n\nTITLE: Reporting Provision Complete Message - Terraform UI - JSON\nDESCRIPTION: This snippet shows the JSON structure for a 'provision_complete' message in Terraform, indicating that a resource has finished executing its 'local-exec' provisioner. Dependencies include having a valid Terraform execution environment. The key 'hook' object details the provisioned resource; relevant parameters include resource addresses and provisioner type. The input is generated by Terraform and contains data about a successfully completed provisioning event.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/machine-readable-ui.mdx#2025-04-22_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@level\": \"info\",\n  \"@message\": \"null_resource.none[0]: (local-exec) Provisioning complete\",\n  \"@module\": \"terraform.ui\",\n  \"@timestamp\": \"2021-03-17T09:34:06.239043-04:00\",\n  \"hook\": {\n    \"resource\": {\n      \"addr\": \"null_resource.none[0]\",\n      \"module\": \"\",\n      \"resource\": \"null_resource.none[0]\",\n      \"implied_provider\": \"null\",\n      \"resource_type\": \"null_resource\",\n      \"resource_name\": \"none\",\n      \"resource_key\": 0\n    },\n    \"provisioner\": \"local-exec\"\n  },\n  \"type\": \"provision_complete\"\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Based Postgres Backend Configuration\nDESCRIPTION: Configuration setup using environment variables for sensitive credentials\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/pg.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  backend \"pg\" {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Remote State Data Source\nDESCRIPTION: Configuration for accessing remote state stored in an HTTP backend using the terraform_remote_state data source.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/http.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"terraform_remote_state\" \"foo\" {\n  backend = \"http\"\n  config = {\n    address = \"http://my.rest.api.com\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating State File Management in Terraform Tests (HCL)\nDESCRIPTION: This snippet shows how Terraform manages multiple state files across different run blocks and modules in a test file. It illustrates the default behavior of state file creation and reuse.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/tests/index.mdx#2025-04-22_snippet_16\n\nLANGUAGE: hcl\nCODE:\n```\nrun \"setup\" {\n\n  # This run block references an alternate module and is the first run block\n  # to reference this particular alternate module. Therefore, Terraform creates\n  # and populates a new empty state file for this run block.\n\n  module {\n    source = \"./testing/setup\"\n  }\n}\n\nrun \"init\" {\n\n  # This run block does not reference an alternate module, so it uses the main\n  # state file for the configuration under test. As this is the first run block\n  # to reference the main configuration, the previously empty state file now\n  # contains the resources created by this run block.\n\n  assert {\n    # In practice we'd do some interesting checks and tests here but the\n    # assertions aren't important for this example.\n  }\n\n  # ... more assertions ...\n}\n\nrun \"update_setup\" {\n\n  # We've now re-referenced the setup module, so the state file that was created\n  # for the first \"setup\" run block will be reused. It will contain any\n  # resources that were created as part of the other run block before this run\n  # block executes and will be updated with any changes made by this run block\n  # after.\n\n  module {\n    source = \"./testing/setup\"\n  }\n\n  variables {\n    # In practice, we'd likely make some changes to the module compared to the\n    # first run block here. Otherwise, there would be no point recalling the\n    # module.\n  }\n}\n\nrun \"update\" {\n\n  # As with the \"init\" run block, we are executing against the main configuration\n  # again. This means we'd load the main state file that was initially populated\n  # by the \"init\" run block, and any changes made by this \"run\" block will be\n  # carried forward to any future run blocks that execute against the main\n  # configuration.\n\n  # ... updated variables ...\n\n  # ... assertions ...\n}\n\nrun \"loader\" {\n\n  # This run block is now referencing our second alternate module so will create\n  # our third and final state file. The other two state files are managing\n  # resources from the main configuration and resources from the setup module.\n  # We are getting a new state file for this run block as the loader module has\n  # not previously been referenced by any run blocks.\n\n  module {\n    source = \"./testing/loader\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Floor Function in Terraform\nDESCRIPTION: The floor function in Terraform returns the closest whole number that is less than or equal to the input value. It is useful in situations where you need to round down decimal values. The function is purely mathematical and applies to numerical values without any additional dependencies.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/floor.mdx#2025-04-22_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\n> floor(5)\n5\n> floor(4.9)\n4\n```\n\n----------------------------------------\n\nTITLE: Filtering Map in Terraform Console\nDESCRIPTION: Shows how to filter a map based on a specific value using a for expression in the Terraform console.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/console.mdx#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\n> { for key, value in var.apps : key => value if value.region == \"us-east-1\" }\n```\n\n----------------------------------------\n\nTITLE: Setting a List Variable on Windows Command Prompt via CLI\nDESCRIPTION: This command demonstrates passing a `list(string)` input variable named 'name' using the `-var` option on Windows Command Prompt (`cmd.exe`). It requires providing a valid Terraform language expression (HCL) representing the list value, enclosed in double quotes (\") for the shell, with inner double quotes escaped using backslashes (`\\`).\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/plan.mdx#2025-04-22_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n# Windows Command Prompt (do not use PowerShell on Windows)\nterraform plan -var \"name=[\\\"a\\\", \\\"b\\\", \\\"c\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Running terraform providers lock for Multiple Platforms - Shell\nDESCRIPTION: This shell command demonstrates how to run the `terraform providers lock` command with the `-platform` flag specified multiple times to pre-populate provider lock entries for Windows (amd64), macOS (amd64), and Linux (amd64). No special dependencies are needed beyond Terraform installed and a configuration in the current directory. Each `-platform` argument ensures the lock file includes package checksums for the specified OS/CPU architectures. The command uses Unix-style shell line wrapping and comments are included for readability; for Windows, arguments must be placed on a single line without trailing backslashes or comments.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/providers/lock.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nterraform providers lock \\\n  -platform=windows_amd64 \\ # 64-bit Windows\n  -platform=darwin_amd64 \\  # 64-bit macOS\n  -platform=linux_amd64     # 64-bit Linux\n\n```\n\n----------------------------------------\n\nTITLE: Test Summary JSON Output\nDESCRIPTION: Final summary message showing overall test execution results including counts of passed, failed, errored and skipped tests.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/machine-readable-ui.mdx#2025-04-22_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@level\": \"info\",\n  \"@message\": \"Success! 2 passed, 0 failed.\",\n  \"@module\": \"terraform.ui\",\n  \"@timestamp\": \"2023-08-09T16:26:45.482070+02:00\",\n  \"test_summary\": {\n    \"status\": \"pass\",\n    \"passed\": 2,\n    \"failed\": 0,\n    \"errored\": 0,\n    \"skipped\": 0\n  },\n  \"type\": \"test_summary\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Provider in Terraform Stack\nDESCRIPTION: This example illustrates how to use the for_each meta-argument to create dynamic provider configurations, which is useful for multi-region deployments.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/create/declare-providers.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n# providers.tfstack.hcl\n\nrequired_providers {\n    aws = {\n        source  = \"hashicorp/aws\"\n        version = \"~> 5.7.0\"\n    }\n}\n\n\nprovider \"aws\" \"configurations\" {\n# This provider configuration iterates through and creates a configuration\n# for each region.\n    for_each = var.regions\n\n    config {\n        region = each.value\n\n        assume_role_with_web_identity {\n            role_arn           = var.role_arn\n            web_identity_token = var.identity_token\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Terraform Plan Output with Config Generation\nDESCRIPTION: Example output of running terraform plan with generate-config-out flag, showing the planned import and generated resource configuration.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/import/generating-configuration.mdx#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ terraform plan -generate-config-out=generated.tf\n\naws_iot_thing.bar: Preparing import... [id=foo]\naws_iot_thing.bar: Refreshing state... [id=foo]\n\nTerraform will perform the following actions:\n\n  # aws_iot_thing.bar will be imported\n  # (config will be generated)\n    resource \"aws_iot_thing\" \"bar\" {\n        arn               = \"arn:aws:iot:eu-west-1:1234567890:thing/foo\"\n        attributes        = {}\n        default_client_id = \"foo\"\n        id                = \"foo\"\n        name              = \"foo\"\n        version           = 1\n    }\n\nPlan: 1 to import, 0 to add, 0 to change, 0 to destroy.\n\n╷\n│ Warning: Config generation is experimental\n│ \n│ Generating configuration during import is currently experimental, and the generated configuration format may change in future versions.\n╵\n\n──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n\nTerraform has generated configuration and written it to generated.tf. Please review the configuration and edit it as necessary before adding it to version control.\n```\n\n----------------------------------------\n\nTITLE: Generating Base64-encoded AES Key with OpenSSL\nDESCRIPTION: This command generates a 256-bit (32-byte) base64-encoded AES key using OpenSSL. The output is a random, secure key suitable for encryption purposes.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/oci.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nopenssl rand -base64 32\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Test Override Approaches\nDESCRIPTION: Examples of different override approaches including file-level and run-block-level overrides with mock providers.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/tests/mocking.mdx#2025-04-22_snippet_10\n\nLANGUAGE: hcl\nCODE:\n```\nmock_provider \"aws\" {}\n\noverride_data {\n  target = module.credentials.data.aws_s3_object.data_bucket\n  values = {\n    body = \"{\\\"username\\\":\\\"username\\\",\\\"password\\\":\\\"password\\\"}\"\n  }\n}\n\nrun \"test_file_override\" {\n  assert {\n    condition     = jsondecode(local_file.credentials_json.content).username == \"username\"\n    error_message = \"incorrect username\"\n  }\n}\n\nrun \"test_run_override\" {\n  override_data {\n    target = module.credentials.data.aws_s3_object.data_bucket\n    values = {\n      body = \"{\\\"username\\\":\\\"a_different_username\\\",\\\"password\\\":\\\"password\\\"}\"\n    }\n  }\n\n  assert {\n    condition     = jsondecode(local_file.credentials_json.content).username == \"a_different_username\"\n    error_message = \"incorrect username\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of filebase64 Function in Terraform\nDESCRIPTION: Shows a practical example of using filebase64 to read and encode the contents of a text file located in the module's directory.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/filebase64.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nfilebase64(\"${path.module}/hello.txt\")\n```\n\n----------------------------------------\n\nTITLE: Activating Destroy Mode in terraform plan (CLI Option)\nDESCRIPTION: Details the `-destroy` option for `terraform plan`. Activating this mode creates a plan whose goal is to destroy all remote objects managed by the configuration, similar to running `terraform destroy`. This mode is mutually exclusive with other planning modes.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/plan.mdx#2025-04-22_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\n-destroy\n```\n\n----------------------------------------\n\nTITLE: Defining a Terraform Resource in JSON\nDESCRIPTION: This JSON snippet represents a Terraform resource configuration for an AWS instance. The 'aws_instance' resource is named 'example' and specifies properties like 'instance_type' and 'ami'. It showcases the nesting needed for resource configuration in JSON versus native syntax. Dependencies include the ability for Terraform to interpret this JSON structure as corresponding to its native configuration.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/syntax/json.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resource\": {\n    \"aws_instance\": {\n      \"example\": {\n        \"instance_type\": \"t2.micro\",\n        \"ami\": \"ami-abc123\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing from a Custom Provider in Terraform\nDESCRIPTION: Demonstrates how to import a resource from a custom resource provider by specifying the provider alias in the import block.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/import/index.mdx#2025-04-22_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\nprovider \"aws\" {\n  alias = \"europe\"\n  region = \"eu-west-1\"\n}\n\nimport {\n  provider = aws.europe\n  to = aws_instance.example[\"foo\"]\n  id = \"i-abcd1234\"\n}\n```\n\n----------------------------------------\n\nTITLE: Change Summary JSON Log Format\nDESCRIPTION: Example of a Terraform change summary log message showing final resource counts after an apply operation\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/machine-readable-ui.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@level\": \"info\",\n  \"@message\": \"Apply complete! Resources: 1 added, 0 changed, 0 destroyed.\",\n  \"@module\": \"terraform.ui\",\n  \"@timestamp\": \"2021-05-25T13:32:41.869168-04:00\",\n  \"changes\": {\n    \"add\": 1,\n    \"change\": 0,\n    \"remove\": 0,\n    \"operation\": \"apply\"\n  },\n  \"type\": \"change_summary\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Terraform Remote State Data Source with Consul\nDESCRIPTION: Configuration for accessing Terraform state stored in Consul as a data source. Allows reading state data from a specified path in the Consul KV store.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/consul.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"terraform_remote_state\" \"foo\" {\n  backend = \"consul\"\n  config = {\n    path = \"full/path\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Terraform Test File Extensions\nDESCRIPTION: Terraform test files use specific file extensions to identify them. These extensions are used for both HCL and JSON formatted test files.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/files/tests.mdx#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.tftest.hcl\n.tftest.json\n```\n\n----------------------------------------\n\nTITLE: Moving a Single Resource to a 'count' Resource Instance (Shell)\nDESCRIPTION: Demonstrates moving a resource instance that was not previously managed by `count` (`packet_device.main`) to become the first instance (index 0) of a resource now managed by `count` (`packet_device.all[0]`). This is useful when refactoring a single resource to be part of a counted set. Note potential shell quoting needs for brackets.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/state/mv.mdx#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ terraform state mv 'packet_device.main' 'packet_device.all[0]'\n```\n\n----------------------------------------\n\nTITLE: Terraform endswith Function Usage Examples\nDESCRIPTION: Examples showing how the endswith function returns true when a string ends with the specified suffix and false otherwise.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/endswith.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> endswith(\"hello world\", \"world\")\ntrue\n\n> endswith(\"hello world\", \"hello\")\nfalse\n```\n\n----------------------------------------\n\nTITLE: Importing AWS Instance into Resource with For_Each (PowerShell)\nDESCRIPTION: This command imports an AWS EC2 instance with ID 'i-abcd1234' into the 'example' instance of the 'aws_instance.baz' resource configured with for_each in PowerShell.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/import.mdx#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ terraform import 'aws_instance.baz[\\\"example\\\"]' i-abcd1234\n```\n\n----------------------------------------\n\nTITLE: Using sha1 Function in Terraform\nDESCRIPTION: Demonstrates how to use the sha1 function to compute the SHA1 hash of a string. The function takes a UTF-8 encoded string input and returns the hash in lowercase hexadecimal format.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/sha1.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> sha1(\"hello world\")\n2aae6c35c94fcfb415dbe95f408b9ce91ee846ed\n```\n\n----------------------------------------\n\nTITLE: Installing Terraform Stack CLI with Homebrew\nDESCRIPTION: Commands to install the terraform-stacks-cli using Homebrew package manager on macOS.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/reference/tfstacks-cli.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ brew tap hashicorp/tap\n$ brew install hashicorp/tap/tfstacks\n```\n\n----------------------------------------\n\nTITLE: Terraform Expression Representation Schema\nDESCRIPTION: Defines how Terraform represents individual expressions in configuration, including constant values and references to other objects. Shows the structure for representing both simple and complex references.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/json-format.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"constant_value\": \"hello\",\n  \"references\": [\n    \"data.template_file.foo[1].vars[\\\"baz\\\"]\",\n    \"data.template_file.foo[1].vars\",\n    \"data.template_file.foo[1]\",\n    \"data.template_file.foo\",\n    \"module.foo.bar\",\n    \"module.foo\",\n    \"var.example[0]\",\n    \"var.example\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Locking Terraform Stack Provider Versions\nDESCRIPTION: Command to create or update the provider lock file for a Terraform Stack configuration, with an optional platform specification.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/reference/tfstacks-cli.mdx#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ tfstacks providers lock [-platform=os_arch]\n```\n\n----------------------------------------\n\nTITLE: Using endswith Function Syntax in Terraform HCL\nDESCRIPTION: Demonstrates the basic syntax for using the endswith function, which takes a string to check and a suffix string as parameters.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/endswith.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nendswith(string, suffix)\n```\n\n----------------------------------------\n\nTITLE: Appending Custom User-Agent to Terraform AWS Provider - Shell\nDESCRIPTION: This shell snippet sets the TF_APPEND_USER_AGENT environment variable for the Terraform process, enabling appending custom User-Agent metadata to AWS API requests. It is useful for tracking request origin in logs, e.g., distinguishing CI/CD jobs. This requires Terraform v0.13.1 or higher and a supported AWS provider. Inputs: a custom string; output: HTTP requests sent with additional User-Agent info. Constraint: takes effect only if the environment variable is set for the Terraform process.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/s3.mdx#2025-04-22_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nexport TF_APPEND_USER_AGENT=\"JenkinsAgent/i-12345678 BuildID/1234 (Optional Extra Information)\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Experimental Features in Terraform\nDESCRIPTION: Defines a list of experimental feature names to opt into. These features are subject to change and not recommended for production use, as they may introduce breaking changes in minor or patch releases.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/terraform.mdx#2025-04-22_snippet_11\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  experiments = [ \"<feature-name>\" ]\n  # . . .\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing a Resource Using Terraform Apply - Shell\nDESCRIPTION: This snippet demonstrates how to force Terraform to replace a specific resource (e.g., \"aws_instance.example[0]\") using the `-replace` option during a `terraform apply` run. This approach requires Terraform v0.15.2 or later and shows an example of explicit resource addressing in the CLI. The command will generate a plan indicating the replacement before applying changes; no changes to the configuration files are required.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/taint.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ terraform apply -replace=\"aws_instance.example[0]\"\n```\n\n----------------------------------------\n\nTITLE: Creating Speculative Destroy Plan in Terraform\nDESCRIPTION: This command creates a speculative destroy plan, showing the proposed destroy changes without executing them. It runs 'terraform plan' in destroy mode.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/destroy.mdx#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nterraform plan -destroy\n```\n\n----------------------------------------\n\nTITLE: Range Function Algorithm - Pseudocode\nDESCRIPTION: Pseudocode demonstrating the sequence-building algorithm used by the range function.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/range.mdx#2025-04-22_snippet_1\n\nLANGUAGE: pseudocode\nCODE:\n```\nlet num = start\nwhile num < limit: (or, for negative step, num > limit)\n  append num to the sequence\n  num = num + step\nreturn the sequence\n```\n\n----------------------------------------\n\nTITLE: Configuring the Built-in Terraform Provider in HCL\nDESCRIPTION: Configuration block required to use the provider::terraform::decode_tfvars function, declaring a dependency on the built-in terraform provider.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/terraform-decode_tfvars.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    terraform = {\n      source = \"terraform.io/builtin/terraform\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Terraform Resource Drift Message (JSON Output)\nDESCRIPTION: This snippet shows an example of a `resource_drift` message in Terraform's JSON output. Such messages are emitted during planning if Terraform detects that a managed resource has been modified outside of Terraform. The message includes a `change` object containing the resource's address (`resource`) and the detected action (`action`, e.g., 'update').\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/machine-readable-ui.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@level\": \"info\",\n  \"@message\": \"random_pet.animal: Drift detected (update)\",\n  \"@module\": \"terraform.ui\",\n  \"@timestamp\": \"2021-05-25T13:32:41.705503-04:00\",\n  \"change\": {\n    \"resource\": {\n      \"addr\": \"random_pet.animal\",\n      \"module\": \"\",\n      \"resource\": \"random_pet.animal\",\n      \"implied_provider\": \"random\",\n      \"resource_type\": \"random_pet\",\n      \"resource_name\": \"animal\",\n      \"resource_key\": null\n    },\n    \"action\": \"update\"\n  },\n  \"type\": \"resource_drift\"\n}\n```\n\n----------------------------------------\n\nTITLE: Variable Planning Options for terraform apply (CLI)\nDESCRIPTION: When running `terraform apply` without a saved plan, the `-var` and `-var-file` options allow setting input variables for the plan, similar to `terraform plan`.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/apply.mdx#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n-var\n```\n\nLANGUAGE: bash\nCODE:\n```\n-var-file\n```\n\n----------------------------------------\n\nTITLE: Remote State Data Source Configuration\nDESCRIPTION: Configuration for accessing remote state stored in Postgres backend\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/pg.mdx#2025-04-22_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"terraform_remote_state\" \"network\" {\n  backend = \"pg\"\n  config = {\n    conn_str = \"postgres://localhost/terraform_backend\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the signum Function in Terraform\nDESCRIPTION: Examples of using the signum function to determine the sign of a number, returning -1 for negative numbers, 0 for zero, and 1 for positive numbers.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/signum.mdx#2025-04-22_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\n> signum(-13)\n-1\n> signum(0)\n0\n> signum(344)\n1\n```\n\n----------------------------------------\n\nTITLE: Saving Terraform State to File with UTF-8 Encoding in PowerShell\nDESCRIPTION: Illustrates how to use 'terraform state pull' in PowerShell, piping the output to the 'Set-Content' cmdlet. This ensures the state is saved to a file (e.g., 'terraform.tfstate') with the required UTF-8 encoding, avoiding potential issues with byte order marks (BOM).\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/state/pull.mdx#2025-04-22_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nterraform state pull | Set-Content terraform.tfstate\n```\n\n----------------------------------------\n\nTITLE: Calculating Logarithms with HCL\nDESCRIPTION: This snippet demonstrates how to use the log function in HCL to calculate the logarithm of a number given a particular base. The log function requires two parameters: 'number' for the value whose logarithm is required, and 'base' to specify the base of the logarithm. The function returns the logarithmic value as a float. Dependencies include the Terraform HCL environment. This function is often used in conjunction with the ceil function to determine the minimal number of binary digits necessary to represent a certain number of distinct values.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/log.mdx#2025-04-22_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nlog(number, base)\n```\n\n----------------------------------------\n\nTITLE: Zipmap Function Syntax in Terraform HCL\nDESCRIPTION: Demonstrates the syntax for calling the zipmap function which takes two parameters: a list of keys and a list of values. Both lists must be the same length, and keyslist must contain only strings.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/zipmap.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nzipmap(keyslist, valueslist)\n```\n\n----------------------------------------\n\nTITLE: Alternate Directory Structure with Root-Level Terraform Tests\nDESCRIPTION: Illustrates an alternative project layout where Terraform test files (`.tftest.hcl`) reside directly in the root configuration directory alongside the main `.tf` files, instead of within a dedicated `tests` directory. Test files in the root are always loaded regardless of the `-test-directory` flag.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/test.mdx#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nproject/\n|-- main.tf\n|-- outputs.tf\n|-- terraform.tf\n|-- variables.tf\n|-- validations.tftest.hcl\n|-- outputs.tftest.hcl\n|-- testing/\n    |-- setup/\n        |-- main.tf\n        |-- outputs.tf\n        |-- terraform.tf\n        |-- variables.tf\n```\n\n----------------------------------------\n\nTITLE: Module Override Example\nDESCRIPTION: Demonstration of overriding an entire module's outputs in Terraform tests.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/tests/mocking.mdx#2025-04-22_snippet_11\n\nLANGUAGE: hcl\nCODE:\n```\nmock_provider \"aws\" {}\n\noverride_module {\n  target = module.credentials\n  outputs = {\n    data = { username = \"username\", password = \"password\" }\n  }\n}\n\nrun \"test\" {\n  assert {\n    condition     = jsondecode(local_file.credentials_json.content).username == \"username\"\n    error_message = \"incorrect username\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a String Variable with Single Quotes on Unix-like Shells\nDESCRIPTION: This command shows how to pass a string input variable 'name' containing a single quote (value: `va'lue`) using `-var` on Unix-like shells. It requires escaping the embedded single quote for the shell by ending the quoted sequence, adding an escaped quote (`\\'`), and restarting the quoted sequence.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/plan.mdx#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nterraform plan -var 'name=va'\\''lue'\n```\n\n----------------------------------------\n\nTITLE: Variable References Between Run Blocks\nDESCRIPTION: Demonstrates how to reference variables between run blocks and from global scope\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/tests/index.mdx#2025-04-22_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nvariables {\n  global_value = \"some value\"\n}\n\nrun \"run_block_one\" {\n  variables {\n    local_value = var.global_value\n  }\n\n  # ...\n  # Some test assertions should go here.\n  # ...\n}\n\nrun \"run_block_two\" {\n  variables {\n    local_value = run.run_block_one.output_one\n  }\n\n  # ...\n  # Some test assertions should go here.\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Moving a Specific 'for_each' Resource Instance (PowerShell)\nDESCRIPTION: Executes `terraform state mv` on Windows PowerShell to move a specific instance identified by a string key (`example123`) of a resource managed by `for_each`. It re-associates the state of `packet_device.worker[\"example123\"]` with `packet_device.helper[\"example456\"]`. Single quotes enclose the addresses, and backslashes escape the inner double quotes for PowerShell.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/state/mv.mdx#2025-04-22_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\nterraform state mv 'packet_device.worker[\\\"example123\\\"]' 'packet_device.helper[\\\"example456\\\"]'\n```\n\n----------------------------------------\n\nTITLE: Database Creation Command for Postgres Backend\nDESCRIPTION: Command to create the required Postgres database before backend initialization\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/pg.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shellsession\nCODE:\n```\ncreatedb terraform_backend\n```\n\n----------------------------------------\n\nTITLE: Setting a Simple String Variable on Windows Command Prompt via CLI\nDESCRIPTION: This command demonstrates passing a simple string input variable named 'name' with the value 'value' to the `terraform plan` command using the `-var` option on the Windows Command Prompt (`cmd.exe`). It uses double quotes (\") around the argument as recommended for this environment. Using PowerShell on Windows for this purpose is discouraged.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/plan.mdx#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nterraform plan -var \"name=value\"\n```\n\n----------------------------------------\n\nTITLE: Using the slice Function in Terraform HCL\nDESCRIPTION: The slice function extracts consecutive elements from a list based on a start index (inclusive) and end index (exclusive). It returns an error if either index is outside the bounds of the list.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/slice.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nslice(list, startindex, endindex)\n```\n\n----------------------------------------\n\nTITLE: Example Output from for_each Resources in Terraform HCL\nDESCRIPTION: Shows the output format when using for_each to create multiple resources. The output includes a map of instance names to private IPs and a direct reference to a specific instance's public IP.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/style.mdx#2025-04-22_snippet_12\n\nLANGUAGE: hcl\nCODE:\n```\nweb_private_ips = {\n  \"api\" = \"172.31.25.29\"\n  \"db\" = \"172.31.18.33\"\n  \"metrics\" = \"172.31.26.112\"\n  \"ui\" = \"172.31.20.142\"\n}\nweb_ui_public_ip = \"18.216.208.182\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Values Representation Structure in Terraform\nDESCRIPTION: Comprehensive example showing the JSON structure used for representing values in Terraform state and plan output. Includes outputs from root module, resource definitions, and child module structures with detailed comments explaining each field and their purposes.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/json-format.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"outputs\": {\n    \"private_ip\": {\n      \"value\": \"192.168.3.2\",\n      \"type\": \"string\",\n      \"sensitive\": false\n    }\n  },\n\n  \"root_module\": {\n    \"resources\": [\n      {\n        \"address\": \"aws_instance.example[1]\",\n        \"mode\": \"managed\",\n        \"type\": \"aws_instance\",\n        \"name\": \"example\",\n        \"index\": 1,\n        \"provider_name\": \"aws\",\n        \"schema_version\": 2,\n        \"values\": {\n          \"id\": \"i-abc123\",\n          \"instance_type\": \"t2.micro\"\n        },\n        \"sensitive_values\": {\n          \"id\": true\n        }\n      }\n    ]\n\n    \"child_modules\": [\n      {\n        \"address\": \"module.child\",\n        \"resources\": [\n            {\n              \"address\": \"module.child.aws_instance.foo\"\n            }\n        ],\n        \"child_modules\": [ ... ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Resources by ID with Terraform CLI\nDESCRIPTION: This command lists a specific resource based on its ID. Useful for locating where in the configuration a particular resource is defined by using its unique identifier when the state is large.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/state/list.mdx#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ terraform state list -id=sg-1234abcd\nmodule.elb.aws_security_group.sg\n```\n\n----------------------------------------\n\nTITLE: Generating Python gRPC Stubs with protoc\nDESCRIPTION: Demonstrates using the `protoc` command with the `--python_out` and `--grpc_python_out` flags to compile a `.proto` file (e.g., `tfplugin5.1.proto`) into Python code and gRPC stubs for building a Terraform plugin SDK. Dependencies include `protoc` and the gRPC Python plugin. The output files are generated in the current directory (`.`).\nSOURCE: https://github.com/hashicorp/terraform/blob/main/docs/plugin-protocol/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nprotoc --python_out=. --grpc_python_out=. tfplugin5.1.proto\n```\n\n----------------------------------------\n\nTITLE: Calling Timestamp Function in Terraform Language\nDESCRIPTION: Demonstrates calling the timestamp() function in Terraform's configuration language, returning the current UTC date and time as a string formatted according to RFC 3339. No external dependencies beyond Terraform itself are required. The expected output is a timestamp string such as '2018-05-13T07:44:12Z'. This function is non-deterministic and not recommended for use directly in resource attributes since it updates on each Terraform run, but may be combined with ignore_changes for specific use cases.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/timestamp.mdx#2025-04-22_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ntimestamp()\n```\n\n----------------------------------------\n\nTITLE: Defining an Object in HCL\nDESCRIPTION: This snippet demonstrates how to define an object with name and age attributes in HCL, which matches the object type object({ name=string, age=number }).\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/type-constraints.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n{\n  name = \"John\"\n  age  = 52\n}\n```\n\n----------------------------------------\n\nTITLE: Error Output for Conflicting Resource Arguments\nDESCRIPTION: Example error output when Terraform encounters conflicting arguments while generating configuration, showing the specific conflict details.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/import/generating-configuration.mdx#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ terraform plan -generate-config-out=\"generated.tf\"\n╷\n│ Error: Conflicting configuration arguments\n│ \n│   with aws_instance.ubuntu,\n│   on g.tf line 20, in resource \"aws_instance\" \"ubuntu\":\n│   20:   ipv6_address_count                   = 0\n│ \n│ \"ipv6_address_count\": conflicts with ipv6_addresses\n╵\n```\n\n----------------------------------------\n\nTITLE: Sample Request to List Available Versions - CURL\nDESCRIPTION: This CURL request exemplifies how to send a GET request to the Terraform Registry to list versions for a specific provider identified by namespace and type.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/provider-registry-protocol.mdx#2025-04-22_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\ncurl 'https://registry.terraform.io/v1/providers/hashicorp/random/versions'\n```\n\n----------------------------------------\n\nTITLE: Using Mock Provider with Data Override\nDESCRIPTION: Test configuration showing how to override S3 object data using a mock provider approach.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/tests/mocking.mdx#2025-04-22_snippet_9\n\nLANGUAGE: hcl\nCODE:\n```\nmock_provider \"aws\" {\n  override_data {\n    target = module.credentials.data.aws_s3_object.data_bucket\n    values = {\n      body = \"{\\\"username\\\":\\\"username\\\",\\\"password\\\":\\\"password\\\"}\"\n    }\n  }\n}\n\nrun \"test\" {\n  assert {\n    condition     = jsondecode(local_file.credentials_json.content).username == \"username\"\n    error_message = \"incorrect username\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Recordsets Variable in Terraform\nDESCRIPTION: This HCL snippet defines a variable for recordsets, capturing key elements of a DNS configuration in a type-safe manner, facilitating module interoperability and provider independence.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/develop/composition.mdx#2025-04-22_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"recordsets\" {\n  type = list(object({\n    name    = string\n    type    = string\n    ttl     = number\n    records = list(string)\n  }))\n}\n```\n\n----------------------------------------\n\nTITLE: Example JUnit XML Output from Terraform Test (XML)\nDESCRIPTION: Shows the content of an example `output.xml` file generated by running `terraform test` with the `-junit-xml=./output.xml` flag. The XML structure follows the JUnit standard, detailing test suites (one per test file), test cases (one per `run` block), execution time, and includes a `<failure>` element with error details for the failing test case.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/test.mdx#2025-04-22_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?><testsuites>\n  <testsuite name=\"example_1.tftest.hcl\" tests=\"1\" skipped=\"0\" failures=\"0\" errors=\"0\">\n    <testcase name=\"true_is_true\" classname=\"example_1.tftest.hcl\" time=\"0.002295\" timestamp=\"2025-01-13T19:23:16Z\"></testcase>\n  </testsuite>\n  <testsuite name=\"example_2.tftest.hcl\" tests=\"1\" skipped=\"0\" failures=\"1\" errors=\"0\">\n    <testcase name=\"false_is_false\" classname=\"example_2.tftest.hcl\" time=\"0.001468\" timestamp=\"2025-01-13T19:23:16Z\">\n      <failure message=\"local.false did not match expected value\"><![CDATA[\nError: Test assertion failed\n\n  on example_2.tftest.hcl line 3, in run \"false_is_false\":\n   3:     condition     = local.false == \"false\"\n    ├────────────────\n    │ local.false is \"true\"\n\nlocal.false did not match expected value\n]]></failure>\n    </testcase>\n  </testsuite>\n</testsuites>\n```\n\n----------------------------------------\n\nTITLE: Creating and Switching to a Git Branch - CLI - shell\nDESCRIPTION: This command is used in team workflows where each collaborator works on individual branches. It checks out a new branch for isolated development, reducing merge conflicts and facilitating easier code review. The dependency is an initialized Git repository. The output is a working branch with changes separated from the main branch.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/intro/core-workflow.mdx#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ git checkout -b add-load-balancer\\n\\nSwitched to a new branch 'add-load-balancer'\\n\n```\n\n----------------------------------------\n\nTITLE: Marking a Resource as Tainted with Terraform Taint - Shell\nDESCRIPTION: This shell snippet shows the usage pattern for the deprecated `terraform taint` command, outlining its generic syntax. The placeholder `<address>` represents the specific resource address to be marked as tainted following resource address conventions in Terraform. The `terraform taint` command requires an initialized state and grants several options for state locking and backend-specific behaviors. Input is the resource address; output is the modified state containing the taint marker. The command is deprecated (use `-replace` with `terraform apply` for new workflows).\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/taint.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ terraform taint [options] <address>\n```\n\n----------------------------------------\n\nTITLE: Computing MD5 Hash in Terraform HCL\nDESCRIPTION: Demonstrates using the md5() function to compute the MD5 hash of a string. The function takes a string input, encodes it as UTF-8, applies the MD5 algorithm, and returns the hash encoded in lowercase hexadecimal.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/md5.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> md5(\"hello world\")\n5eb63bbbe01eeed093cb22bb8f5acdc3\n```\n\n----------------------------------------\n\nTITLE: Disable Color Option for terraform apply (CLI)\nDESCRIPTION: The `-no-color` option removes terminal formatting sequences from the output, suitable for environments that cannot interpret them.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/apply.mdx#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n-no-color\n```\n\n----------------------------------------\n\nTITLE: Basic uuidv5 Function Syntax in Terraform\nDESCRIPTION: The basic syntax for the uuidv5 function, showing that it takes two parameters: a namespace and a name.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/uuidv5.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nuuidv5(namespace, name)\n```\n\n----------------------------------------\n\nTITLE: Creating Setup Module for S3 Bucket\nDESCRIPTION: Defines a setup module that creates an S3 bucket for use in the main configuration test. This module is used to prepare the test environment.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/tests/index.mdx#2025-04-22_snippet_13\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"bucket\" {\n  type = string\n}\n\nresource \"aws_s3_bucket\" \"bucket\" {\n  bucket = var.bucket\n}\n```\n\n----------------------------------------\n\nTITLE: Change Representation Schema in JavaScript\nDESCRIPTION: Defines the JSON schema for representing resource changes in Terraform. This structure details how Terraform represents actions like create, update, delete operations, along with before/after states, unknown values, and sensitivity markers for resources.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/json-format.mdx#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // \"actions\" are the actions that will be taken on the object selected by the\n  // properties below.\n  // Valid actions values are:\n  //    [\"no-op\"]\n  //    [\"create\"]\n  //    [\"read\"]\n  //    [\"update\"]\n  //    [\"delete\", \"create\"]\n  //    [\"create\", \"delete\"]\n  //    [\"delete\"]\n  // The two \"replace\" actions are represented in this way to allow callers to\n  // e.g. just scan the list for \"delete\" to recognize all three situations\n  // where the object will be deleted, allowing for any new deletion\n  // combinations that might be added in future.\n  \"actions\": [\"update\"],\n\n  // \"before\" and \"after\" are representations of the object value both before\n  // and after the action. For [\"create\"] and [\"delete\"] actions, either\n  // \"before\" or \"after\" is unset (respectively). For [\"no-op\"], the before and\n  // after values are identical. The \"after\" value will be incomplete if there\n  // are values within it that won't be known until after apply.\n  \"before\": <value-representation>,\n  \"after\": <value-representation>,\n\n  // \"after_unknown\" is an object value with similar structure to \"after\", but\n  // with all unknown leaf values replaced with \"true\", and all known leaf\n  // values omitted. This can be combined with \"after\" to reconstruct a full\n  // value after the action, including values which will only be known after\n  // apply.\n  \"after_unknown\": {\n    \"id\": true\n  },\n\n  // \"before_sensitive\" and \"after_sensitive\" are object values with similar\n  // structure to \"before\" and \"after\", but with all sensitive leaf values\n  // replaced with true, and all non-sensitive leaf values omitted. These\n  // objects should be combined with \"before\" and \"after\" to prevent accidental\n  // display of sensitive values in user interfaces.\n  \"before_sensitive\": {},\n  \"after_sensitive\": {\n    \"triggers\": {\n      \"boop\": true\n    }\n  },\n\n  // \"replace_paths\" is an array of arrays representing a set of paths into the\n  // object value which resulted in the action being \"replace\". This will be\n  // omitted if the action is not replace, or if no paths caused the\n  // replacement (for example, if the resource was tainted). Each path\n  // consists of one or more steps, each of which will be a number or a\n  // string.\n  \"replace_paths\": [[\"triggers\"]],\n\n  // \"importing\" is present only when the object is being imported as part\n  // of this change.\n  \"importing\": {\n    // \"id\" is the import ID of the object being imported.\n    \"id\": \"foo\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Outputs JSON Log Format\nDESCRIPTION: Example of a Terraform outputs log message showing the values of root module outputs after an operation\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/machine-readable-ui.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@level\": \"info\",\n  \"@message\": \"Outputs: 1\",\n  \"@module\": \"terraform.ui\",\n  \"@timestamp\": \"2021-05-25T13:32:41.869280-04:00\",\n  \"outputs\": {\n    \"pets\": {\n      \"sensitive\": false,\n      \"type\": \"string\",\n      \"value\": \"smart-lizard\"\n    }\n  },\n  \"type\": \"outputs\"\n}\n```\n\n----------------------------------------\n\nTITLE: Lock Timeout Option for terraform apply (CLI)\nDESCRIPTION: The `-lock-timeout=DURATION` option specifies how long Terraform should retry acquiring a state lock before failing. The DURATION is a number followed by a time unit (e.g., '3s').\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/apply.mdx#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n-lock-timeout=DURATION\n```\n\n----------------------------------------\n\nTITLE: Filesha1 Function Example with Return Value\nDESCRIPTION: Shows an example usage of filesha1 function with its hexadecimal output.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/filesha1.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n$ filesha1(\"example.txt\")\nd3486ae9136e7856bc42212385ea797094475802\n```\n\n----------------------------------------\n\nTITLE: Converting a Tuple to a List using `tolist` in HCL\nDESCRIPTION: This HCL expression demonstrates the modern method (Terraform v0.12+) for creating a list, replacing the deprecated `list()` function. It constructs a tuple using bracket notation `[a, b, c]` and then explicitly converts this tuple to a list using the built-in `tolist` function. The variables `a`, `b`, and `c` represent existing values or variable references within the Terraform configuration.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/list.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n```hcl\ntolist([a, b, c])\n```\n```\n\n----------------------------------------\n\nTITLE: Evaluating Split Function in Terraform Console\nDESCRIPTION: Demonstrates how to use the Terraform console in a non-interactive script by piping a command to split a string into a list.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/console.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ echo 'split(\",\", \"foo,bar,baz\")' | terraform console\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Secret Backend for Terraform\nDESCRIPTION: This HCL snippet configures Terraform to use a client secret for backend authentication with Azure. It's advised only for backward compatibility as it requires secret management. Parameters include tenant_id, subscription_id, client_id, client_secret, resource_group_name, storage_account_name, container_name, and key.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/azurerm.mdx#2025-04-22_snippet_12\n\nLANGUAGE: HCL\nCODE:\n```\nterraform {\n  backend \"azurerm\" {\n    tenant_id            = \"00000000-0000-0000-0000-000000000000\"  # Can also be set via `ARM_TENANT_ID` environment variable.\n    subscription_id      = \"00000000-0000-0000-0000-000000000000\"  # Can also be set via `ARM_SUBSCRIPTION_ID` environment variable.\n    client_id            = \"00000000-0000-0000-0000-000000000000\"  # Can also be set via `ARM_CLIENT_ID` environment variable.\n    client_secret        = \"************************************\"  # Can also be set via `ARM_CLIENT_SECRET` environment variable.\n    resource_group_name  = \"StorageAccount-ResourceGroup\"          # Can be passed via `-backend-config=`\"resource_group_name=<resource group name>\"` in the `init` command.\n    storage_account_name = \"abcd1234\"                              # Can be passed via `-backend-config=`\"storage_account_name=<storage account name>\"` in the `init` command.\n    container_name       = \"tfstate\"                               # Can be passed via `-backend-config=`\"container_name=<container name>\"` in the `init` command.\n    key                  = \"prod.terraform.tfstate\"                # Can be passed via `-backend-config=`\"key=<blob key name>\"` in the `init` command.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Service Discovery Using Provider Registry Protocol - JSON\nDESCRIPTION: The JSON snippet demonstrates the service discovery document for a host implementing only the provider registry protocol. It highlights the use of the `providers.v1` service identifier and shows the base URL for related URLs.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/provider-registry-protocol.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"providers.v1\": \"/terraform/providers/v1/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Listing Available Versions - JSON\nDESCRIPTION: The JSON response shows available versions of a provider, each with version numbers, supported protocols, and compatible platforms. It helps Terraform decide which version of a provider to use across configurations based on compatibility hints.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/provider-registry-protocol.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"versions\": [\n    {\n      \"version\": \"2.0.0\",\n      \"protocols\": [\"4.0\", \"5.1\"],\n      \"platforms\": [\n        {\"os\": \"darwin\", \"arch\": \"amd64\"},\n        {\"os\": \"linux\", \"arch\": \"amd64\"},\n        {\"os\": \"linux\", \"arch\": \"arm\"},\n        {\"os\": \"windows\", \"arch\": \"amd64\"}\n      ]\n    },\n    {\n      \"version\": \"2.0.1\",\n      \"protocols\": [\"5.2\"],\n      \"platforms\": [\n        {\"os\": \"darwin\", \"arch\": \"amd64\"},\n        {\"os\": \"linux\", \"arch\": \"amd64\"},\n        {\"os\": \"linux\", \"arch\": \"arm\"},\n        {\"os\": \"windows\", \"arch\": \"amd64\"}\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Equivalent Native Provisioners in Terraform\nDESCRIPTION: This HCL snippet provides an equivalent configuration for multiple provisioners within a resource, demonstrating how to translate between HCL and JSON syntax effectively, while keeping execution order intact.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/syntax/json.mdx#2025-04-22_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"example\" {\n  # (resource configuration omitted for brevity)\n\n  provisioner \"local-exec\" {\n    command = \"echo 'Hello World' >example.txt\"\n  }\n  provisioner \"file\" {\n    source      = \"example.txt\"\n    destination = \"/tmp/example.txt\"\n  }\n  provisioner \"remote-exec\" {\n    inline = [\n      \"sudo install-something -f /tmp/example.txt\",\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Workspaces with Terraform Shell\nDESCRIPTION: The code snippet demonstrates how to list available workspaces and select a specific workspace using the terraform workspace select command. Key functionality includes switching to a specified workspace, with an optional flag to create the workspace if it does not exist. It requires a pre-installed Terraform environment with multiple configured workspaces. The command takes the workspace name as an input and switches the context to the selected workspace, returning a confirmation message. A limitation is that the workspace must exist unless the -or-create flag is used.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/workspace/select.mdx#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ terraform workspace list\\n  default\\n* development\\n  jsmith-test\\n\\n$ terraform workspace select default\\nSwitched to workspace \\\"default\\\".\n```\n\n----------------------------------------\n\nTITLE: Listing Available Module Versions via Terraform Registry API using JSON\nDESCRIPTION: Demonstrates a typical response from the module registry API for listing module versions. This JSON structure contains a 'modules' array with version objects, allowing the Terraform CLI or other consumers to parse available versions and select those matching version constraints. The standard requires the requested module to appear as the first element of the returned list.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/module-registry-protocol.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"modules\": [\n      {\n         \"versions\": [\n            {\"version\": \"1.0.0\"},\n            {\"version\": \"1.1.0\"},\n            {\"version\": \"2.0.0\"}\n         ]\n      }\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Changes in Provider Checksums in Terraform Lock File\nDESCRIPTION: A diff showing the addition of a new h1: checksum to an existing provider block in the .terraform.lock.hcl file, demonstrating how Terraform gradually transitions between different hashing schemes.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/files/dependency-lock.mdx#2025-04-22_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n--- .terraform.lock.hcl\t2020-10-07 17:24:23.397892140 -0700\n+++ .terraform.lock.hcl\t2020-10-07 17:24:57.423130253 -0700\n@@ -10,6 +10,7 @@\n   version     = \"2.1.0\"\n   constraints = \"~> 2.1.0\"\n   hashes = [\n+    \"h1:1xvaS5D8B8t6J6XmXxX8spo97tAzjhacjedFX1B47Fk=\",\n     \"h1:EOJImaEaVThWasdqnJjfYc6/P8N/MRAq1J7avx5ZbV4=\",\n     \"zh:0015b491cf9151235e57e35ea6b89381098e61bd923f56dffc86026d58748880\",\n     \"zh:4c5682ba1e0fc7e2e602d3f103af1638f868c31fe80cc1a884a97f6dad6e1c11\",\n```\n\n----------------------------------------\n\nTITLE: Decoding YAML Boolean Value with yamldecode in Terraform\nDESCRIPTION: Shows how yamldecode handles YAML boolean values, converting them to Terraform boolean type.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/yamldecode.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nyamldecode(\"true\")\n```\n\n----------------------------------------\n\nTITLE: Terraform Backend Configuration in JSON\nDESCRIPTION: Illustrates how to configure Terraform backend settings and version constraints using JSON syntax.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/syntax/json.mdx#2025-04-22_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"terraform\": {\n    \"required_version\": \">= 0.12.0\",\n    \"backend\": {\n      \"s3\": {\n        \"region\": \"us-west-2\",\n        \"bucket\": \"acme-terraform-states\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Syntax Definition for the Terraform fileset Function in HCL\nDESCRIPTION: Defines the syntax for the Terraform `fileset` function. It takes two arguments: `path`, the directory to search within, and `pattern`, a glob pattern to match filenames against. The function returns a set of matching file paths relative to the given path, using forward slashes `/` as separators.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/fileset.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nfileset(path, pattern)\n```\n\n----------------------------------------\n\nTITLE: Version Range Constraint Example in Terraform HCL\nDESCRIPTION: Shows how to specify a version range constraint that allows versions between 1.2.0 (inclusive) and 2.0.0 (exclusive). This is a common pattern for ensuring compatibility while allowing minor version updates.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/version-constraints.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nversion = \">= 1.2.0, < 2.0.0\"\n```\n\n----------------------------------------\n\nTITLE: Checks Representation Schema in JavaScript\nDESCRIPTION: Defines the JSON schema for representing validation check results in Terraform. This structure details how Terraform records the state of checkable objects (like resources with conditions) and their validation status across multiple instances.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/json-format.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    // \"address\" describes the address of the checkable object whose status\n    // this object is describing.\n    \"address\": {\n      // \"kind\" specifies what kind of checkable object this is. Different\n      // kinds of object will have different additional properties inside the\n      // address object, but all kinds include both \"kind\" and \"to_display\".\n      // The two valid kinds are \"resource\" and \"output_value\".\n      \"kind\": \"resource\",\n\n      // \"to_display\" contains an opaque string representation of the address\n      // of the object that is suitable for display in a UI. For consumers that\n      // have special handling depending on the value of \"kind\", this property\n      // is a good fallback to use when the application doesn't recognize the\n      // \"kind\" value.\n      \"to_display\": \"aws_instance.example\",\n\n      // \"mode\" is included for kind \"resource\" only, and specifies the resource\n      // mode which can either be \"managed\" (for \"resource\" blocks) or \"data\"\n      // (for \"data\" blocks).\n      \"mode\": \"managed\",\n\n      // \"type\" is included for kind \"resource\" only, and specifies the resource\n      // type.\n      \"type\": \"aws_instance\",\n\n      // \"name\" is the local name of the object. For a resource this is the\n      // second label in the resource block header, and for an output value\n      // this is the single label in the output block header.\n      \"name\": \"example\",\n\n      // \"module\" is included if the object belongs to a module other than\n      // the root module, and provides an opaque string representation of the\n      // module this object belongs to. This example is of a root module\n      // resource and so \"module\" is not included.\n    }\n\n    // \"status\" is the aggregate status of all of the instances of the object\n    // being described by this object.\n    // The possible values are \"pass\", \"fail\", \"error\", and \"unknown\".\n    \"status\": \"fail\",\n\n    // \"instances\" describes the current status of each of the instances of\n    // the object being described. An object can have multiple instances if\n    // it is either a resource which has \"count\" or \"for_each\" set, or if\n    // it's contained within a module that has \"count\" or \"for_each\" set.\n    //\n    // If \"instances\" is empty or omitted, that can either mean that the object\n    // has no instances at all (e.g. count = 0) or that an error blocked\n    // evaluation of the repetition argument. You can distinguish these cases\n    // using the \"status\" property, which will be \"pass\" or \"error\" for a\n    // zero-instance object and \"unknown\" for situations where an error blocked\n    // evalation.\n    \"instances\": [\n      {\n        // \"address\" is an object similar to the property of the same name in\n        // the containing object. Merge the instance-level address into the\n        // object-level address, overwriting any conflicting property names,\n        // to create a full description of the instance's address.\n        \"address\": {\n          // \"to_display\" overrides the property of the same name in the main\n          // object's address, to include any module instance or resource\n          // instance keys that uniquely identify this instance.\n          \"to_display\": \"aws_instance.example[0]\",\n\n          // \"instance_key\" is included for resources only and specifies the\n          // resource-level instance key, which can either be a number or a\n          // string. Omitted for single-instance resources.\n          \"instance_key\": 0,\n\n          // \"module\" is included if the object belongs to a module other than\n          // the root module, and provides an opaque string representation of the\n          // module instance this object belongs to.\n        },\n\n        // \"status\" describes the result of running the configured checks\n        // against this particular instance of the object, with the same\n        // possible values as the \"status\" in the parent object.\n        //\n        // \"fail\" means that the condition evaluated successfully but returned\n        // false, while \"error\" means that the condition expression itself\n        // was invalid.\n        \"status\": \"fail\",\n\n        // \"problems\" might be included for statuses \"fail\" or \"error\", in\n        // which case it describes the individual conditions that failed for\n        // this instance, if any.\n        // When a condition expression is invalid, Terraform returns that as\n        // a normal error message rather than as a problem in this list.\n        \"problems\": [\n          {\n            // \"message\" is the string that resulted from evaluating the\n            // error_message argument of the failing condition.\n            \"message\": \"Server does not have a public IPv6 address.\"\n          }\n        ]\n      },\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Apply Start JSON Log Format\nDESCRIPTION: Example of a Terraform apply start log message indicating the beginning of a resource creation operation\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/machine-readable-ui.mdx#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@level\": \"info\",\n  \"@message\": \"random_pet.animal: Creating...\",\n  \"@module\": \"terraform.ui\",\n  \"@timestamp\": \"2021-05-25T13:32:41.825308-04:00\",\n  \"hook\": {\n    \"resource\": {\n      \"addr\": \"random_pet.animal\",\n      \"module\": \"\",\n      \"resource\": \"random_pet.animal\",\n      \"implied_provider\": \"random\",\n      \"resource_type\": \"random_pet\",\n      \"resource_name\": \"animal\",\n      \"resource_key\": null\n    },\n    \"action\": \"create\"\n  },\n  \"type\": \"apply_start\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Parameter Representation Schema for Terraform Function Signatures in JavaScript\nDESCRIPTION: This snippet details the structure of a parameter representation within the function signature schema. It lists the required fields such as name and type, and an optional description, using comments for explanations. The neutral JSON-like syntax with commentary is aimed at documenting the structure rather than providing an immediately usable JSON object.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/functions-meta.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\\n  // \\\"name\\\" is the internal name of the parameter\\n  \\\"name\\\": \\\"string\\\",\\n\\n  // \\\"description\\\" is an optional English-language description of\\n  // the purpose and usage of the parameter in Markdown.\\n  \\\"description\\\": \\\"string\\\",\\n\\n  // \\\"type\\\" is a representation of a type specification\\n  // that the parameter's value must conform to.\\n  \\\"type\\\": \\\"string\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Using the upper Function in Terraform\nDESCRIPTION: Demonstrates usage of the upper function which converts all cased letters in a string to uppercase. The examples show transformation of English and non-English characters, highlighting that the function uses Unicode's definition of letters and case.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/upper.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> upper(\"hello\")\nHELLO\n> upper(\"алло!\")\nАЛЛО!\n```\n\n----------------------------------------\n\nTITLE: Converting Map Constructor to Modern Terraform Syntax\nDESCRIPTION: Shows how to replace the deprecated map() function with the modern object literal syntax and tomap function. The example demonstrates converting map(\"a\", \"b\", \"c\", \"d\") to an equivalent modern syntax.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/map.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ntomap({\n  a = \"b\"\n  c = \"d\"\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Terraform Stack CLI on Debian or Ubuntu\nDESCRIPTION: Commands to install the terraform-stacks-cli on Debian or Ubuntu Linux distributions using apt package manager.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/reference/tfstacks-cli.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg\n$ echo \"deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/hashicorp.list\n$ sudo apt update && sudo apt install terraform-stacks-cli\n```\n\n----------------------------------------\n\nTITLE: Terraform Modules Command JSON Output (JavaScript)\nDESCRIPTION: Shows the JSON output format of the `terraform modules -json` command, detailing the module key, source, and version information. The JSON format enhances machine-readability and allows for automated processing of module configurations. Requires Terraform v1.10.0 or later, and expects structured JSON output.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/modules.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"format_version\": \"1.0\",\n    \"modules\": [\n        {\n            \"key\": \"my_private_registry_module\",\n            \"source\": \"app.terraform.io/hashicorp/label/null\",\n            \"version\": \"1.0.0\"\n        },\n        {\n            \"key\": \"my_public_registry_module\",\n            \"source\": \"terraform-aws-modules/iam/aws\",\n            \"version\": \"5.47.1\"\n        },\n        {\n            \"key\": \"my_local_module_a\",\n            \"source\": \"./path/to/local/module_a\",\n            \"version\": \"\"\n        },\n        {\n            \"key\": \"my_local_module_b\",\n            \"source\": \"./path/to/local/module_a/module_b\",\n            \"version\": \"\"\n        },\n        {\n            \"key\": \"my_local_module_c\",\n            \"source\": \"./path/to/local/module/module_a/module_b/module_c\",\n            \"version\": \"\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Configuration Structure JSON Schema\nDESCRIPTION: Defines the core JSON structure for representing Terraform configurations, including provider configs, root module structure, resources, and module calls. Shows how configuration elements are organized before evaluation.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/json-format.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"provider_config\": {\n    \"opaque_provider_ref_aws\": {\n      \"name\": \"aws\",\n      \"full_name\": \"registry.terraform.io/hashicorp/aws\",\n      \"alias\": \"foo\",\n      \"module_address\": \"module.child\",\n      \"expressions\": <block-expressions-representation>\n    }\n  },\n  \"root_module\": {\n    \"outputs\": {\n      \"example\": {\n        \"expression\": <expression-representation>,\n        \"sensitive\": false\n      }\n    },\n    \"resources\": [\n      {\n        \"address\": \"aws_instance.example\",\n        \"mode\": \"managed\",\n        \"type\": \"aws_instance\",\n        \"name\": \"example\",\n        \"provider_config_key\": \"opaque_provider_ref_aws\",\n        \"provisioners\": [\n          {\n            \"type\": \"local-exec\",\n            \"expressions\": <block-expressions-representation>\n          }\n        ],\n        \"expressions\": <block-expressions-representation>,\n        \"schema_version\": 2,\n        \"count_expression\": <expression-representation>,\n        \"for_each_expression\": <expression-representation>\n      }\n    ],\n    \"module_calls\": {\n      \"child\": {\n        \"resolved_source\": \"./child\",\n        \"expressions\": <block-expressions-representation>,\n        \"count_expression\": <expression-representation>,\n        \"for_each_expression\": <expression-representation>,\n        \"module\": <module-configuration-representation>\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Go Dependencies Across Terraform Modules using Make\nDESCRIPTION: This command executes the `syncdeps` target defined in the project's Makefile. It runs a script that synchronizes dependency versions across all internal Go modules (root and backends), ensuring they all use the newest compatible version of each shared external dependency by updating `go.mod` and `go.sum` files. This is crucial because all components are linked into a single executable. Requires Make and the Go toolchain.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/docs/dependency-upgrades.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake syncdeps\n```\n\n----------------------------------------\n\nTITLE: Provider Block Configuration in JSON\nDESCRIPTION: Shows how to configure multiple provider instances with aliases and regions using JSON syntax.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/syntax/json.mdx#2025-04-22_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"provider\": {\n    \"aws\": [\n      {\n        \"region\": \"us-east-1\"\n      },\n      {\n        \"alias\": \"usw1\",\n        \"region\": \"us-west-1\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Input Values for Network and Subnet Maps - Terraform HCL\nDESCRIPTION: This snippet provides an example of how the 'networks' and 'subnets' variables may be instantiated by a user. Each network has a base_cidr_block, and each subnet has a unique number. These clearly structured maps become the inputs for the network/subnet combinatorial logic earlier described. Inputs: Hardcoded example data for module testing or documentation.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/setproduct.mdx#2025-04-22_snippet_8\n\nLANGUAGE: HCL\nCODE:\n```\nnetworks = {\n  a = {\n    base_cidr_block = \"10.1.0.0/16\"\n  }\n  b = {\n    base_cidr_block = \"10.2.0.0/16\"\n  }\n}\nsubnets = {\n  a = {\n    number = 1\n  }\n  b = {\n    number = 2\n  }\n  c = {\n    number = 3\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example HTTP API Response: List Available Provider Versions (JSON)\nDESCRIPTION: Shows the expected JSON response for the endpoint that lists available provider versions, formatted as specified by the network mirror protocol. The response consists of a single 'versions' property mapping individual version numbers to empty objects. There are no required external dependencies, but this format must be served by the mirror's HTTP endpoint for compatibility. Inputs: HTTP GET on the endpoint; Output: List of available versions as JSON.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/provider-network-mirror-protocol.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"versions\": {\n    \"2.0.0\": {},\n    \"2.0.1\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Ending HCP Terraform or Terraform Enterprise Session (HCL)\nDESCRIPTION: Use the terraform logout command to end your current session with HCP Terraform or Terraform Enterprise. This revokes the API token and logs you out of the platform.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/auth/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nterraform logout\n```\n\n----------------------------------------\n\nTITLE: Decrypting Ciphertext with rsadecrypt in HCL\nDESCRIPTION: This snippet demonstrates the use of the `rsadecrypt` function which decrypts an RSA-encrypted ciphertext using a base64-encoded ciphertext and a PEM-encoded RSA private key. The `ciphertext` parameter should adhere to the PKCS #1 v1.5 padding scheme and the function is limited to decryption without a corresponding encryption function.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/rsadecrypt.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nrsadecrypt(ciphertext, privatekey)\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n> rsadecrypt(filebase64(\\\"${path.module}/ciphertext\\\"), file(\\\"privatekey.pem\\\"))\\nHello, world!\n```\n\n----------------------------------------\n\nTITLE: JSON Structure for Function Parameter Representation\nDESCRIPTION: Outlines the JSON sub-object structure used to describe individual parameters within a function definition. Each parameter representation includes its internal name, an optional description (Markdown), a boolean indicating if null values are allowed, and its type specification.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/providers/schema.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // \"name\" is the internal name of the parameter\n  \"name\": \"string\",\n\n  // \"description\" is an optional English-language description of\n  // the purpose and usage of the parameter in Markdown.\n  \"description\": \"string\",\n\n  // \"is_nullable\" is true if null is acceptable value for the argument\n  \"is_nullable\": bool,\n\n  // \"type\" is a representation of a type specification\n  // that the parameter's value must conform to.\n  \"type\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Heredoc String in Terraform\nDESCRIPTION: Example of a heredoc string literal using EOT delimiter for multi-line text.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/strings.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n<<EOT\nhello\nworld\nEOT\n```\n\n----------------------------------------\n\nTITLE: Module Configuration in JSON\nDESCRIPTION: Demonstrates module configuration including source, version, and provider specifications in JSON format.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/syntax/json.mdx#2025-04-22_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"module\": {\n    \"example\": {\n      \"source\": \"hashicorp/consul/azurerm\",\n      \"version\": \"= 1.0.0\",\n      \"providers\": {\n        \"aws\": \"aws.usw1\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Variable Block Configuration in JSON\nDESCRIPTION: Shows the JSON syntax for declaring variables with type and default value specifications.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/syntax/json.mdx#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"variable\": {\n    \"example\": {\n      \"type\": \"string\",\n      \"default\": \"hello\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Test Run Status JSON Output\nDESCRIPTION: Examples of JSON messages emitted during test run execution showing completion and progress status updates. Includes timestamps, test file info, and execution progress metrics.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/machine-readable-ui.mdx#2025-04-22_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@level\": \"info\",\n  \"@message\": \"  \\\"successful_validation\\\"... pass\",\n  \"@module\": \"terraform.ui\",\n  \"@testfile\": \"validation.tftest.hcl\",\n  \"@testrun\": \"successful_validation\",\n  \"@timestamp\": \"2023-08-09T16:12:30.724407+02:00\",\n  \"test_run\": {\n    \"path\": \"main.tftest.hcl\",\n    \"run\": \"successful_validation\",\n    \"progress\": \"complete\",\n    \"status\": \"pass\"\n  },\n  \"type\": \"test_run\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@level\": \"info\",\n  \"@message\": \"  \\\"successful_validation\\\"... in progress\",\n  \"@module\": \"terraform.ui\",\n  \"@testfile\": \"validation.tftest.hcl\",\n  \"@testrun\": \"successful_validation\",\n  \"@timestamp\": \"2023-08-09T16:12:30.724407+02:00\",\n  \"test_run\": {\n    \"path\": \"main.tftest.hcl\",\n    \"run\": \"successful_validation\",\n    \"progress\": \"running\",\n    \"elapsed\": 2024\n  },\n  \"type\": \"test_run\"\n}\n```\n\n----------------------------------------\n\nTITLE: Reporting Ephemeral Operation Progress - Terraform UI - JSON\nDESCRIPTION: This code sample presents the 'ephemeral_op_progress' message in JSON form, updating the status and elapsed time of an in-progress ephemeral resource operation. Required fields include resource identification, current action, and 'elapsed_seconds' indicating duration in seconds. This structure is useful for visual progress displays or time-based alerts.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/machine-readable-ui.mdx#2025-04-22_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@level\": \"info\",\n  \"@message\": \"ephemeral.random_password.example: Closing... [3s elapsed]\",\n  \"@module\": \"terraform.ui\",\n  \"@timestamp\": \"2024-10-30T10:34:26.222465-00:00\",\n  \"hook\": {\n    \"resource\": {\n      \"addr\": \"ephemeral.random_password.example\",\n      \"module\": \"\",\n      \"resource\": \"ephemeral.random_password.example\",\n      \"implied_provider\": \"random\",\n      \"resource_type\": \"random_password\",\n      \"resource_name\": \"example\",\n      \"resource_key\": null\n    },\n    \"action\": \"close\",\n    \"elapsed_seconds\": 3\n  },\n  \"type\": \"ephemeral_op_progress\"\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Expression Mapping Example\nDESCRIPTION: This JSON snippet is used to declare a Terraform output that derives its value from an AWS instance resource. It uses expression interpolation within JSON, showing how expressions are parsed and interpreted when JSON syntax is used instead of native syntax.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/syntax/json.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"output\": {\n    \"example\": {\n      \"value\": \"${aws_instance.example}\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Shell Tab-completion for Terraform CLI\nDESCRIPTION: Commands for installing and uninstalling Terraform CLI tab-completion support for bash and zsh shells.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nterraform -install-autocomplete\n```\n\nLANGUAGE: bash\nCODE:\n```\nterraform -uninstall-autocomplete\n```\n\n----------------------------------------\n\nTITLE: Enabling Experimental Features in Terraform Build\nDESCRIPTION: Command to build Terraform with experimental features enabled using ldflags. By default, experimental features are disabled unless explicitly enabled with this build flag.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/BUILDING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo build -ldflags \"-w -s -X 'main.experimentsAllowed=yes'\" -o bin/ .\n```\n\n----------------------------------------\n\nTITLE: Using filemd5 Function in Terraform\nDESCRIPTION: The filemd5 function is a variant of md5 that computes the MD5 hash of a file's contents and encodes it as hex. Unlike md5(file(filename)), it can handle binary files since it's not restricted to UTF-8 text.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/filemd5.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nfilemd5\n```\n\n----------------------------------------\n\nTITLE: Planned Change JSON Log Format\nDESCRIPTION: Example of a Terraform planned change log message showing resource creation intent\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/machine-readable-ui.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@level\": \"info\",\n  \"@message\": \"random_pet.animal: Plan to create\",\n  \"@module\": \"terraform.ui\",\n  \"@timestamp\": \"2021-05-25T13:32:41.705503-04:00\",\n  \"change\": {\n    \"resource\": {\n      \"addr\": \"random_pet.animal\",\n      \"module\": \"\",\n      \"resource\": \"random_pet.animal\",\n      \"implied_provider\": \"random\",\n      \"resource_type\": \"random_pet\",\n      \"resource_name\": \"animal\",\n      \"resource_key\": null\n    },\n    \"action\": \"create\"\n  },\n  \"type\": \"planned_change\"\n}\n```\n\n----------------------------------------\n\nTITLE: Resource Instance Key Changes with Terraform HCL\nDESCRIPTION: This series of 'moved' blocks in Terraform HCL shows how to handle changes to resource instance keys, allowing the refactoring of resource instances by renaming keys or switching between 'count' and 'for_each'. It details how to specify mappings to maintain object continuity within Terraform's state.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/develop/refactoring.mdx#2025-04-22_snippet_3\n\nLANGUAGE: HCL\nCODE:\n```\n# Both old and new configuration used \"for_each\", but the\n# \"small\" element was renamed to \"tiny\".\nmoved {\n  from = aws_instance.b[\"small\"]\n  to   = aws_instance.b[\"tiny\"]\n}\n\n# The old configuration used \"count\" and the new configuration\n# uses \"for_each\", with the following mappings from\n# index to key:\nmoved {\n  from = aws_instance.c[0]\n  to   = aws_instance.c[\"small\"]\n}\nmoved {\n  from = aws_instance.c[1]\n  to   = aws_instance.c[\"tiny\"]\n}\n\n# The old configuration used \"count\", and the new configuration\n# uses neither \"count\" nor \"for_each\", and you want to keep\n# only the object at index 2.\nmoved {\n  from = aws_instance.d[2]\n  to   = aws_instance.d\n}\n```\n\n----------------------------------------\n\nTITLE: Legacy Provider Requirement Syntax for Terraform v0.12 Compatibility (HCL)\nDESCRIPTION: This snippet demonstrates the legacy method (pre-v0.13) of declaring a provider version constraint in Terraform configuration without specifying the 'source' argument. The provider alias 'aws' is directly set to '~> 1.0', supporting backwards compatibility for modules that run on Terraform v0.12.26 and earlier. The 'source' is ignored in these versions, so only the version constraint and local name must match for proper resolution.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/providers/requirements.mdx#2025-04-22_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    aws = \"~> 1.0\"\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting a String Variable with Double Quotes on Windows Command Prompt\nDESCRIPTION: This command shows how to pass a string input variable 'name' containing a double quote (value: `va\"lue`) using `-var` on the Windows Command Prompt (`cmd.exe`). It requires escaping the embedded double quote with a backslash (`\\`) within the double-quoted argument.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/plan.mdx#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nterraform plan -var \"name=va\\\"lue\"\n```\n\n----------------------------------------\n\nTITLE: Importing Terraform Core Packages in Go\nDESCRIPTION: This snippet shows the import paths for key Terraform Core packages, including command, backend, configs, and states. It demonstrates how to access core components in Go code.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/docs/architecture.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/hashicorp/terraform/internal/command\"\n    \"github.com/hashicorp/terraform/internal/backend\"\n    \"github.com/hashicorp/terraform/internal/configs\"\n    \"github.com/hashicorp/terraform/internal/states\"\n)\n```\n\n----------------------------------------\n\nTITLE: Complex nonsensitive Usage with JSON Processing\nDESCRIPTION: Shows how to handle mixed sensitive and non-sensitive content in JSON data, demonstrating separation of concerns and selective exposure of non-sensitive parts.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/nonsensitive.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"mixed_content_json\" {\n  description = \"A JSON string containing a mixture of sensitive and non-sensitive values.\"\n  type        = string\n  sensitive   = true\n}\n\nlocals {\n  # mixed_content is derived from var.mixed_content_json, so it\n  # is also considered to be sensitive.\n  mixed_content = jsondecode(var.mixed_content_json)\n\n  # password_from_json is derived from mixed_content, so it's\n  # also considered to be sensitive.\n  password_from_json = local.mixed_content[\"password\"]\n\n  # username_from_json would normally be considered to be\n  # sensitive too, but system-specific knowledge tells us\n  # that the username is a non-sensitive fragment of the\n  # original document, and so we can override Terraform's\n  # determination.\n  username_from_json = nonsensitive(local.mixed_content[\"username\"])\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Provider in HCL\nDESCRIPTION: This snippet demonstrates how to configure the AWS provider in Terraform using variables for access and secret keys. This configuration can be used when importing AWS resources.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/import.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"access_key\" {}\nvariable \"secret_key\" {}\n\nprovider \"aws\" {\n  access_key = var.access_key\n  secret_key = var.secret_key\n}\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Cluster Hostname Output Using Terraform\nDESCRIPTION: This snippet outputs the hostname of a Kubernetes cluster in Azure from a Terraform module. This allows other modules to dynamically depend on and utilize the cluster's endpoint.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/develop/composition.mdx#2025-04-22_snippet_9\n\nLANGUAGE: hcl\nCODE:\n```\noutput \"hostname\" {\n  value = azurerm_kubernetes_cluster.main.fqdn\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Set to List in Terraform HCL\nDESCRIPTION: This snippet shows how to convert a set to a list using the tolist function in Terraform. It stores the converted list as a local variable named 'example_list'.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/types.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nlocals {\n  example_list = tolist(var.example_set)\n}\n```\n\n----------------------------------------\n\nTITLE: Basic OSS Backend Configuration Example\nDESCRIPTION: Minimal configuration to use OSS for remote state storage. Specifies the bucket, prefix, key, and region for storing Terraform state files in Alibaba Cloud OSS.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/oss.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  backend \"oss\" {\n    bucket = \"remote-state-dns\"\n    prefix = \"mystate/state\"\n    key    = \"terraform.tfstate\"\n    region = \"cn-beijing\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Format for Terraform Variable Definitions\nDESCRIPTION: Example of a JSON-formatted variable definitions file with the .tfvars.json extension, showing how to define string and list variables.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/values/variables.mdx#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"image_id\": \"ami-abc123\",\n  \"availability_zone_names\": [\"us-west-1a\", \"us-west-1c\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth Configuration for Terraform Login\nDESCRIPTION: The snippet provides an example of OAuth configuration required by Terraform when performing an authorization request. It specifies server endpoints and ports necessary for implementing Terraform-native services in a third-party system. Key parameters include 'client_id', 'authz', 'token', and 'ports', with default and optional settings explained.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/login-protocol.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"login.v1\": {\n    \"client\": \"terraform-cli\",\n    \"grant_types\": [\"authz_code\"],\n    \"authz\": \"/oauth/authorization\",\n    \"token\": \"/oauth/token\",\n    \"ports\": [10000, 10010],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example HTTP API Response: List Available Installation Packages (JSON)\nDESCRIPTION: This JSON snippet illustrates the response from a network mirror endpoint that describes available distribution archives for a specific provider version. Each platform (e.g., darwin_amd64, linux_amd64) object contains a package download URL and a list of cryptographic hashes for verification. There are no special dependencies, but the mirror must return data in this format to satisfy Terraform CLI requests. Inputs: HTTP GET at the version endpoint; Output: JSON with 'archives' mapping platforms to download URLs and hashes.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/provider-network-mirror-protocol.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"archives\": {\n    \"darwin_amd64\": {\n      \"url\": \"terraform-provider-random_2.0.0_darwin_amd64.zip\",\n      \"hashes\": [\n        \"h1:4A07+ZFc2wgJwo8YNlQpr1rVlgUDlxXHhPJciaPY5gs=\"\n      ]\n    },\n    \"linux_amd64\": {\n      \"url\": \"terraform-provider-random_2.0.0_linux_amd64.zip\",\n      \"hashes\": [\n        \"h1:lCJCxf/LIowc2IGS9TPjWDyXY4nOmdGdfcwwDQCOURQ=\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Result from decode_tfvars Function in HCL\nDESCRIPTION: Sample output from the decode_tfvars function showing the resulting object structure with key-value pairs from the parsed .tfvars content.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/terraform-decode_tfvars.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n{\n  example = \"Hello!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Ephemeral Operation - Terraform UI - JSON\nDESCRIPTION: This snippet depicts the 'ephemeral_op_start' message structure, indicating that Terraform is beginning an ephemeral resource operation, such as opening a temporary password resource. It includes resource identification and the specific action ('open', 'renew', or 'close') being initiated. Inputs must include resource and operation details, and consumers should expect a follow-up on progress or completion.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/machine-readable-ui.mdx#2025-04-22_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@level\": \"info\",\n  \"@message\": \"ephemeral.random_password.example: Opening...\",\n  \"@module\": \"terraform.ui\",\n  \"@timestamp\": \"2024-10-30T10:34:26.222465-00:00\",\n  \"hook\": {\n    \"resource\": {\n      \"addr\": \"ephemeral.random_password.example\",\n      \"module\": \"\",\n      \"resource\": \"ephemeral.random_password.example\",\n      \"implied_provider\": \"random\",\n      \"resource_type\": \"random_password\",\n      \"resource_name\": \"example\",\n      \"resource_key\": null\n    },\n    \"action\": \"open\"\n  },\n  \"type\": \"ephemeral_op_start\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using the -force Option with terraform force-unlock (Shell)\nDESCRIPTION: Specifies the `-force` option for the `terraform force-unlock` command. When used, this flag suppresses the confirmation prompt that normally appears before unlocking the state, proceeding with the unlock action directly.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/force-unlock.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n-force\n```\n\n----------------------------------------\n\nTITLE: Apply Progress JSON Log Format\nDESCRIPTION: Example of a Terraform apply progress log message showing elapsed time during resource creation\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/machine-readable-ui.mdx#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@level\": \"info\",\n  \"@message\": \"null_resource.none[4]: Still creating... [30s elapsed]\",\n  \"@module\": \"terraform.ui\",\n  \"@timestamp\": \"2021-03-17T09:34:26.222465-04:00\",\n  \"hook\": {\n    \"resource\": {\n      \"addr\": \"null_resource.none[4]\",\n      \"module\": \"\",\n      \"resource\": \"null_resource.none[4]\",\n      \"implied_provider\": \"null\",\n      \"resource_type\": \"null_resource\",\n      \"resource_name\": \"none\",\n      \"resource_key\": 4\n    },\n    \"action\": \"create\",\n    \"elapsed_seconds\": 30\n  },\n  \"type\": \"apply_progress\"\n}\n```\n\n----------------------------------------\n\nTITLE: Provision Start JSON Log Format\nDESCRIPTION: Example of a Terraform provision start log message showing the beginning of a provisioner execution\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/machine-readable-ui.mdx#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@level\": \"info\",\n  \"@message\": \"null_resource.none[0]: Provisioning with 'local-exec'...\",\n  \"@module\": \"terraform.ui\",\n  \"@timestamp\": \"2021-03-26T16:38:43.997431-04:00\",\n  \"hook\": {\n    \"resource\": {\n      \"addr\": \"null_resource.none[0]\",\n      \"module\": \"\",\n      \"resource\": \"null_resource.none[0]\",\n      \"implied_provider\": \"null\",\n      \"resource_type\": \"null_resource\",\n      \"resource_name\": \"none\",\n      \"resource_key\": 0\n    },\n    \"provisioner\": \"local-exec\"\n  },\n  \"type\": \"provision_start\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Dependent Code Artifacts in Terraform Core\nDESCRIPTION: Executes the `generate` target in the project's Makefile. This command is run after regenerating the Protobuf Go code (`make protobuf`) and typically generates other necessary code artifacts, such as mock implementations based on the updated protocol interfaces. Expected changes appear in `internal/plugin/mock_proto/mock.go` and `internal/plugin6/mock_proto/mock.go`.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/docs/plugin-protocol/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmake generate\n```\n\n----------------------------------------\n\nTITLE: Inline JSON Encoding in Terraform Configuration\nDESCRIPTION: An example of using jsonencode directly in a Terraform configuration file without creating separate template files.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/templatefile.mdx#2025-04-22_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\nlocals {\n  backend_config_json = jsonencode({\n    \"backends\": [for addr in ip_addrs : \"${addr}:${port}\"],\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling: Circular References in YAML Decoding\nDESCRIPTION: Shows the error that occurs when attempting to decode YAML with circular references, which are not supported.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/yamldecode.mdx#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nyamldecode(\"{a: &foo [1, *foo, 3]}\")\n```\n\n----------------------------------------\n\nTITLE: Running Terraform Cloud/Enterprise Integration Tests with Go\nDESCRIPTION: This command runs the integration tests for Terraform's cloud features. It requires setting environment variables for authentication and specifying test flags. The command uses ldflags to set the Prerelease version, which is necessary for version-dependent behaviors.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/internal/cloud/e2e/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nTFE_TOKEN=<token> TFE_HOSTNAME=<hostname> TF_ACC=1 go test  ./internal/cloud/e2e/... -ldflags \"-X \\\"github.com/hashicorp/terraform/version.Prerelease=<PRE-RELEASE>\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Setup for Postgres Backend\nDESCRIPTION: Shell commands to set up environment variables for backend configuration\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/pg.mdx#2025-04-22_snippet_3\n\nLANGUAGE: shellsession\nCODE:\n```\n$ export PG_CONN_STR=postgres://user:pass@db.example.com/terraform_backend\n$ terraform init\n```\n\n----------------------------------------\n\nTITLE: Visualizing Resource Updates in Terraform with GraphViz\nDESCRIPTION: A GraphViz diagram showing dependency relationships during resource updates, where a new resource A is created and existing resources B and C are updated with references to it.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/docs/destroying.md#2025-04-22_snippet_1\n\nLANGUAGE: graphviz\nCODE:\n```\ndigraph update {\n    subgraph nodes {\n        rank=same;\n        a [label=\"A create\"];\n        b [label=\"B update\"];\n        c [label=\"C update\"];\n        b -> c [dir=back];\n        a -> b [dir=back];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Emitting Test Abstract Discovery - Terraform Test - JSON\nDESCRIPTION: This code example depicts the JSON format of a 'test_abstract' message, identifying test files and run blocks Terraform has discovered during a test session. The 'test_abstract' object maps filenames to an array describing the contained test cases or statuses. Prerequisites include having test files in place, and this can be used to preview test inventory before execution.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/machine-readable-ui.mdx#2025-04-22_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@level\": \"info\",\n  \"@message\": \"Found 1 file and 2 run blocks\",\n  \"@module\": \"terraform.ui\",\n  \"@timestamp\": \"2023-08-09T16:12:30.325582+02:00\",\n  \"test_abstract\": {\n    \"validation.tftest.hcl\": [\n      \"passed_validation\",\n      \"failed_validatation\"\n    ]\n  },\n  \"type\": \"test_abstract\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example Terraform Version Message (JSON Output)\nDESCRIPTION: This JSON object illustrates the structure of a `version` message, which is the initial message in Terraform's machine-readable UI output stream. It specifies the Terraform version (`terraform`) that emitted the message and the version of the JSON UI schema (`ui`) being used for subsequent messages, ensuring compatibility for parsing tools.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/machine-readable-ui.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@level\": \"info\",\n  \"@message\": \"Terraform 0.15.4\",\n  \"@module\": \"terraform.ui\",\n  \"@timestamp\": \"2021-05-25T13:32:41.275359-04:00\",\n  \"terraform\": \"0.15.4\",\n  \"type\": \"version\",\n  \"ui\": \"0.1.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example Output of Ephemeralasnull Function in Terraform\nDESCRIPTION: Shows the expected output format when using ephemeralasnull with a configuration containing both ephemeral and non-ephemeral values.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/ephemeralasnull.mdx#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nOutputs:\n\nconfiguration_settings = {\n  \"env\" = \"development\"\n  \"session_token\" = tostring(null)\n}\n```\n\n----------------------------------------\n\nTITLE: Signing Data with GPG CLI\nDESCRIPTION: This snippet demonstrates how to sign a file using GPG. The command is used to sign the `sample_release/sample_0.1.0_SHA256SUMS` file in a detached format, outputting the signature to `sample_release/sample_0.1.0_SHA256SUMS.sig`. The snippet requires the secret GPG key identified by the ID `200BDA882C95B80A`.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/internal/releaseauth/testdata/sample.md#2025-04-22_snippet_1\n\nLANGUAGE: CLI\nCODE:\n```\ngpg -u 200BDA882C95B80A --output sample_release/sample_0.1.0_SHA256SUMS.sig --detach-sig sample_release/sample_0.1.0_SHA256SUMS\n```\n\n----------------------------------------\n\nTITLE: Displaying Terraform Plan Output\nDESCRIPTION: This snippet shows the output of a Terraform plan command, indicating the number of resources to be added, changed, or destroyed.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/intro/core-workflow.mdx#2025-04-22_snippet_9\n\nLANGUAGE: hcl\nCODE:\n```\nPlan: 1 to add, 0 to change, 0 to destroy.\n```\n\n----------------------------------------\n\nTITLE: Filesha512 Function Example with Command Line Output\nDESCRIPTION: Shows an example of using filesha512 function with command line output, demonstrating the hex-encoded hash value returned.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/filesha512.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n$ filesha512(\"example.txt\")\n861844d6704e8573fec34d967e20bcfe6e061b3348b3b0c7e9b7c6a482f6f15a48bffd0fb928fd8c9f9196f7a8596d5e32b45d5a25488a8499396a67442c1d76\n```\n\n----------------------------------------\n\nTITLE: Basic Ephemeralasnull Function Syntax in Terraform\nDESCRIPTION: Demonstrates the basic syntax for using the ephemeralasnull function in Terraform.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/ephemeralasnull.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nephemeralasnull(var.my_ephemeral_value)\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Deployment Configuration in HCL\nDESCRIPTION: This snippet demonstrates how to create a basic deployment configuration block for a production environment. It specifies input values for AWS region and instance count.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/deploy/config.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# deployments.tfdeploy.hcl\n\ndeployment \"production\" {\n    inputs = {\n        aws_region     = \"us-west-1\"\n        instance_count = 2\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Command-Line Arguments with TF_CLI_ARGS in Shell\nDESCRIPTION: The `TF_CLI_ARGS` environment variable allows specifying additional command-line arguments that apply to *all* Terraform commands. These arguments are inserted after the subcommand (like `plan` or `apply`) but before any flags specified directly on the command line. This is useful for setting default behaviors in CI environments.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/config/environment-variables.mdx#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n# Example Usage context (not a direct code block in source)\n# TF_CLI_ARGS=\"-input=false\" terraform apply -force\n# This sets the TF_CLI_ARGS variable for the duration of the command.\n```\n\n----------------------------------------\n\nTITLE: Test Cleanup JSON Output\nDESCRIPTION: Example of cleanup message showing resources that could not be automatically destroyed and require manual cleanup. Lists specific resource instances that need attention.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/machine-readable-ui.mdx#2025-04-22_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@level\": \"info\",\n  \"@message\": \"Terraform left some resources in state after executing main.tftest.hcl, they need to be cleaned up manually.\",\n  \"@module\": \"terraform.ui\",\n  \"@testfile\": \"validation.tftest.hcl\",\n  \"@testrun\": \"successful_validation\",\n  \"@timestamp\": \"2023-08-09T16:12:30.724407+02:00\",\n  \"test_cleanup\": {\n    \"failed_resources\": [\n      {\n        \"instance\": \"aws_instance.primary\"\n      },\n      {\n         \"instance\": \"aws_instance.secondary\"\n      }\n    ]\n  },\n  \"type\": \"test_cleanup\"\n}\n```\n\n----------------------------------------\n\nTITLE: Output Block Configuration in JSON\nDESCRIPTION: Illustrates how to define output values using JSON syntax with expression interpretation.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/syntax/json.mdx#2025-04-22_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"output\": {\n    \"example\": {\n      \"value\": \"${aws_instance.example}\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Protocol 5 Symlink in Terraform Core\nDESCRIPTION: A shell command used by Terraform core contributors to update the symbolic link for the protocol 5 definition. It points the internal `tfplugin5.proto` symlink to the specific `.proto` file corresponding to the new `<MINOR_VERSION>` located in the `docs/plugin-protocol/` directory. This is a step in preparing the codebase for generating code based on the updated protocol. `<MINOR_VERSION>` should be replaced with the actual version number.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/docs/plugin-protocol/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nln -sf ../../docs/plugin-protocol/tfplugin5.<MINOR_VERSION>.proto ./internal/tfplugin5/tfplugin5.proto\n```\n\n----------------------------------------\n\nTITLE: Compact Warnings Option for terraform apply (CLI)\nDESCRIPTION: The `-compact-warnings` option modifies the output to show only summary messages for warnings, unless errors are also present.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/apply.mdx#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n-compact-warnings\n```\n\n----------------------------------------\n\nTITLE: Unsafe nonsensitive Function Usage Examples\nDESCRIPTION: Demonstrates potentially dangerous uses of the nonsensitive function that could expose sensitive data, included as cautionary examples.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/nonsensitive.mdx#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\n> nonsensitive(var.mixed_content_json)\n<<EOT\n{\n  \"username\": \"zqb\",\n  \"password\": \"p4ssw0rd\"\n}\nEOT\n> nonsensitive(local.mixed_content)\n{\n  \"password\" = \"p4ssw0rd\"\n  \"username\" = \"zqb\"\n}\n> nonsensitive(local.mixed_content[\"password\"])\n\"p4ssw0rd\"\n```\n\n----------------------------------------\n\nTITLE: Apply Errored JSON Log Format\nDESCRIPTION: Example of a Terraform apply error log message showing a failed resource creation\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/machine-readable-ui.mdx#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@level\": \"info\",\n  \"@message\": \"null_resource.none[0]: Creation errored after 10s\",\n  \"@module\": \"terraform.ui\",\n  \"@timestamp\": \"2021-03-26T16:38:54.013910-04:00\",\n  \"hook\": {\n    \"resource\": {\n      \"addr\": \"null_resource.none[0]\",\n      \"module\": \"\",\n      \"resource\": \"null_resource.none[0]\",\n      \"implied_provider\": \"null\",\n      \"resource_type\": \"null_resource\",\n      \"resource_name\": \"none\",\n      \"resource_key\": 0\n    },\n    \"action\": \"create\",\n    \"elapsed_seconds\": 10\n  },\n  \"type\": \"apply_errored\"\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Apply Output for Import\nDESCRIPTION: Example output of running terraform apply after generating configuration, showing the successful import of the resource.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/import/generating-configuration.mdx#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ terraform apply\n\naws_iot_thing.bar: Preparing import... [id=foo]\naws_iot_thing.bar: Refreshing state... [id=foo]\n\nTerraform will perform the following actions:\n\n  # aws_iot_thing.bar will be imported\n    resource \"aws_iot_thing\" \"bar\" {\n        arn               = \"arn:aws:iot:eu-west-1:1234567890:thing/foo\"\n        attributes        = {}\n        default_client_id = \"foo\"\n        id                = \"foo\"\n        name              = \"foo\"\n        version           = 1\n    }\n\nPlan: 1 to import, 0 to add, 0 to change, 0 to destroy.\naws_iot_thing.bar: Importing... [id=foo]\naws_iot_thing.bar: Import complete [id=foo]\n\nApply complete! Resources: 1 imported, 0 added, 0 changed, 0 destroyed.\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Certificate Backend for Terraform\nDESCRIPTION: This HCL snippet configures Terraform to use a client certificate for Azure backend authentication. Like client secrets, it's retained for backward compatibility. Parameters include tenant_id, subscription_id, client_id, client_certificate_path, client_certificate_password, resource_group_name, storage_account_name, container_name, and key.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/azurerm.mdx#2025-04-22_snippet_13\n\nLANGUAGE: HCL\nCODE:\n```\nterraform {\n  backend \"azurerm\" {\n    tenant_id                   = \"00000000-0000-0000-0000-000000000000\"  # Can also be set via `ARM_TENANT_ID` environment variable.\n    subscription_id             = \"00000000-0000-0000-0000-000000000000\"  # Can also be set via `ARM_SUBSCRIPTION_ID` environment variable.\n    client_id                   = \"00000000-0000-0000-0000-000000000000\"  # Can also be set via `ARM_CLIENT_ID` environment variable.\n    client_certificate_path     = \"/path/to/bundle.pfx\"                   # Can also be set via `ARM_CLIENT_CERTIFICATE_PATH` environment variable.\n    client_certificate_password = \"************************************\"  # Can also be set via `ARM_CLIENT_CERTIFICATE_PASSWORD` environment variable.\n    resource_group_name  = \"StorageAccount-ResourceGroup\"          # Can be passed via `-backend-config=`\"resource_group_name=<resource group name>\"` in the `init` command.\n    storage_account_name        = \"abcd1234\"                              # Can be passed via `-backend-config=`\"storage_account_name=<storage account name>\"` in the `init` command.\n    container_name              = \"tfstate\"                               # Can be passed via `-backend-config=`\"container_name=<container name>\"` in the `init` command.\n    key                         = \"prod.terraform.tfstate\"                # Can be passed via `-backend-config=`\"key=<blob key name>\"` in the `init` command.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Mixed Configuration with Environment Variables\nDESCRIPTION: Combination of configuration file and environment variables for credentials\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/pg.mdx#2025-04-22_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  backend \"pg\" {\n    conn_str = \"postgres://db.example.com/terraform_backend\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing GNU Find on macOS for Terraform Batch Upgrades\nDESCRIPTION: Command to install GNU findutils on macOS using Homebrew. This is necessary because the default Mac OS X find command doesn't support the -printf argument needed for batch upgrades.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/0.12upgrade.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbrew install findutils\n```\n\n----------------------------------------\n\nTITLE: Decoding YAML with Anchors and References in Terraform\nDESCRIPTION: Demonstrates how yamldecode handles YAML anchors (&) and references (*) to create equivalent data structures.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/yamldecode.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nyamldecode(\"{a: &foo [1, 2, 3], b: *foo}\")\n```\n\n----------------------------------------\n\nTITLE: Verbose Test State JSON Output\nDESCRIPTION: Detailed state output in verbose mode showing current resource states and provider schemas. Includes resource values, provider configurations, and schema definitions.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/machine-readable-ui.mdx#2025-04-22_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@level\": \"info\",\n  \"@message\": \"-verbose flag enabled, printing state\",\n  \"@module\": \"terraform.ui\",\n  \"@testfile\": \"validation.tftest.hcl\",\n  \"@testrun\": \"successful_validation\",\n  \"@timestamp\": \"2023-08-09T17:18:21.173008+02:00\",\n  \"test_state\": {\n    \"state_format_version\": \"1.0\",\n    \"root_module\": {\n      \"resources\": [\n        {\n          \"address\": \"aws_instance.primary\",\n          \"mode\": \"managed\",\n          \"type\": \"aws_instance\",\n          \"name\": \"primary\",\n          \"provider_name\": \"registry.terraform.io/hashicorp/aws\",\n          \"schema_version\": 0,\n          \"values\": {\n            \"ami\": \"af84f887-e3eb-9e52-5f8b-8a2803734fd0\"\n          },\n          \"sensitive_values\": {}\n        }\n      ]\n    },\n    \"provider_format_version\": \"1.0\",\n    \"provider_schemas\": {\n      \"registry.terraform.io/hashicorp/aws\": {\n        \"provider\": {\n          \"version\": 0\n        },\n        \"resource_schemas\": {\n          \"aws_instance\": {\n            \"version\": 0,\n            \"block\": {\n              \"attributes\": {\n                \"ami\": {\n                  \"type\": \"string\",\n                  \"description_kind\": \"plain\",\n                  \"required\": true\n                }\n              },\n              \"description_kind\": \"plain\"\n            }\n          }\n        }\n      }\n    }\n  },\n  \"type\": \"test_state\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Selecting Terraform Workspaces - Bash\nDESCRIPTION: This snippet demonstrates how to create and select Terraform workspaces from the command line using the Terraform CLI. New workspaces such as 'staging' and 'production' are created with 'terraform workspace new', and a workspace is selected with 'terraform workspace select'. These operations are prerequisites for using environment-specific infrastructure in Terraform. Dependencies include Terraform installed and properly configured, and a backend initialized with 'terraform init'. The expected inputs are workspace names; outputs include confirmation messages. Limitations: only works with initialized Terraform configurations and valid backend setups.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/s3.mdx#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform workspace new staging\nCreated and switched to workspace \"staging\"!\n\n...\n\n$ terraform workspace new production\nCreated and switched to workspace \"production\"!\n\n...\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform workspace select staging\n$ terraform apply\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Cache to Override Dependency Lock File in Terraform (HCL)\nDESCRIPTION: This configuration setting allows Terraform to use packages from the global cache directory even when they don't match checksums in the dependency lock file. This is intended for exceptional situations where teams don't preserve the dependency lock file in version control.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/config/config-file.mdx#2025-04-22_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\nplugin_cache_may_break_dependency_lock_file = true\n```\n\n----------------------------------------\n\nTITLE: Running Terraform 0.13upgrade Command\nDESCRIPTION: This snippet demonstrates the interactive usage of the `terraform 0.13upgrade` command. It shows the command's output, including the explanation of its purpose and the confirmation prompt.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/0.13upgrade.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform 0.13upgrade\n\nThis command will update the configuration files in the given directory to use\nthe new provider source features from Terraform v0.13. It will also highlight\nany providers for which the source cannot be detected, and advise how to\nproceed.\n\nWe recommend using this command in a clean version control work tree, so that\nyou can easily see the proposed changes as a diff against the latest commit.\nIf you have uncommited changes already present, we recommend aborting this\ncommand and dealing with them before running this command again.\n\nWould you like to upgrade the module in the current directory?\n  Only 'yes' will be accepted to confirm.\n\n  Enter a value: yes\n```\n\n----------------------------------------\n\nTITLE: Regenerating Protobuf Go Code in Terraform Core\nDESCRIPTION: Executes the `protobuf` target in the project's Makefile. This command typically uses `protoc` (via the symlinks updated in previous steps) to regenerate the Go source files (`*.pb.go`) based on the definitions in the latest minor version `.proto` files for protocols 5 and 6. This is essential after modifying the protocol definitions. Expected changes appear in `internal/tfplugin5/tfplugin5.pb.go` and `internal/tfplugin6/tfplugin6.pb.go`.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/docs/plugin-protocol/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmake protobuf\n```\n\n----------------------------------------\n\nTITLE: Global -chdir Option (CLI)\nDESCRIPTION: The global `-chdir` option can be used with `terraform apply` (and other commands) to specify a different working directory for Terraform operations, replacing a deprecated usage pattern.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/apply.mdx#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n-chdir\n```\n\n----------------------------------------\n\nTITLE: Using Moved Blocks with Count/For_Each in Terraform Modules\nDESCRIPTION: Illustrates how to use moved blocks when refactoring modules that use count or for_each meta-arguments. It shows how to specify instance keys when referring to resources within such modules.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/develop/refactoring.mdx#2025-04-22_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\nmoved {\n  from = aws_instance.example\n  to   = module.new[2].aws_instance.example\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Resource Update after Dependency Destruction in Terraform with GraphViz\nDESCRIPTION: A GraphViz diagram showing a scenario where B is destroyed and A is updated afterward, illustrating the dependency relationship between update and destroy operations.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/docs/destroying.md#2025-04-22_snippet_5\n\nLANGUAGE: graphviz\nCODE:\n```\ndigraph destroy_then_update {\n    subgraph update {\n        rank=same;\n        a [label=\"A update\"];\n    }\n    subgraph destroy {\n        rank=same;\n        b_d [label=\"B destroy\"];\n    }\n\n    a -> b_d;\n}\n```\n\n----------------------------------------\n\nTITLE: Pushing Terraform Repo to Remote Origin - CLI - shell\nDESCRIPTION: This set of Git commands demonstrates how to set a remote GitHub repository destination and push the local main branch to the specified remote. It is intended for safe backup and collaboration, assuming prior repository and authentication setup. Inputs include the remote URL; output pushes all current commits to the remote repository.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/intro/core-workflow.mdx#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ git remote add origin https://github.com/*user*/*repo*.git\\n$ git push origin main\\n\n```\n\n----------------------------------------\n\nTITLE: COS Backend with Shared Credentials on Windows\nDESCRIPTION: Configuration for COS backend using shared credentials file on Windows systems. Uses Windows-style path for credentials directory.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/cos.mdx#2025-04-22_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  backend \"cos\" {\n    region                 = \"ap-guangzhou\"\n    bucket                 = \"bucket-for-terraform-state-{appid}\"\n    prefix                 = \"terraform/state\"\n    shared_credentials_dir = \"C:\\\\Users\\\\tf_user\\\\.tccli\"\n    profile                = \"default\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Terraform Documentation Content with npm\nDESCRIPTION: This command runs a content check to validate documentation changes against a set of rules before committing.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run content-check\n```\n\n----------------------------------------\n\nTITLE: Batch Upgrading Terraform Modules on Windows with PowerShell\nDESCRIPTION: This PowerShell command demonstrates how to batch upgrade multiple Terraform modules in a repository on Windows systems. It recursively finds all `.tf` files, extracts their directories, and runs `terraform 0.13upgrade` on each unique directory.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/0.13upgrade.mdx#2025-04-22_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nGet-Childitem -Recurse -Include *.tf | Split-Path | `\nSelect-Object -Unique | ForEach-Object { terraform 0.13upgrade -yes $_.FullName }\n```\n\n----------------------------------------\n\nTITLE: Importing Private GPG Key for Terraform CloudPlugin Test Data\nDESCRIPTION: This command imports a private GPG key used for signing test data in the Terraform CloudPlugin package. The key is stored in the 'sample.private.key' file.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/internal/cloudplugin/testdata/sample.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngpg --import sample.private.key\n```\n\n----------------------------------------\n\nTITLE: Building Terraform without Dev Version Flag\nDESCRIPTION: Command to build Terraform with the dev version flag disabled using ldflags. This will make Terraform report its version without the -dev suffix (e.g., 1.5.0 instead of 1.5.0-dev).\nSOURCE: https://github.com/hashicorp/terraform/blob/main/BUILDING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo build -ldflags \"-w -s -X 'github.com/hashicorp/terraform/version.dev=no'\" -o bin/ .\n```\n\n----------------------------------------\n\nTITLE: Launching Terraform Documentation Preview Locally\nDESCRIPTION: This command builds and serves the Terraform documentation website locally for preview. It should be run from the top-level terraform directory.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake website\n```\n\n----------------------------------------\n\nTITLE: Setting GOPATH Environment Variable in Bash\nDESCRIPTION: This command sets the GOPATH environment variable for Bash, which is required for previewing Terraform documentation changes locally.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport $GOPATH=~/go\n```\n\n----------------------------------------\n\nTITLE: Setting GOPATH Environment Variable in Zsh\nDESCRIPTION: This command sets the GOPATH environment variable for Zsh by appending it to the .zshrc file, which is required for previewing Terraform documentation changes locally.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/README.md#2025-04-22_snippet_2\n\nLANGUAGE: zsh\nCODE:\n```\necho -n 'export GOPATH=~/go' >> ~/.zshrc\n```\n\n----------------------------------------\n\nTITLE: Replace Planning Option for terraform apply (CLI)\nDESCRIPTION: When running `terraform apply` without a saved plan, the `-replace` option specifies specific resource instances that Terraform should plan to replace.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/apply.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n-replace\n```\n\n----------------------------------------\n\nTITLE: Batch Upgrading Multiple Terraform Modules in Unix-like Systems\nDESCRIPTION: Command for batch upgrading all Terraform modules in a repository. Uses find to locate all .tf files, extracts unique directories, and runs terraform 0.12upgrade with the -yes flag on each directory.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/0.12upgrade.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfind . -name '*.tf' -printf \"%h\\n\" | uniq | xargs -n1 terraform 0.12upgrade -yes\n```\n\n----------------------------------------\n\nTITLE: Using loadMainBundleConfigForTest Helper in Terraform Tests\nDESCRIPTION: Instructions for using the loadMainBundleConfigForTest helper function to load test configurations from subdirectories within the synthetic source bundle.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/internal/stacks/stackruntime/testdata/mainbundle/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Make a subdirectory under `test/` with a name that's related to your test\n  case(s).\n- Use the `loadMainBundleConfigForTest` helper, passing the name of your\n  test directory as the source directory.\n```\n\n----------------------------------------\n\nTITLE: Importing Secret Key with GPG CLI\nDESCRIPTION: This snippet shows how to import a secret key into GPG for the purpose of signing data. The command `gpg --import` is used, which requires the path to the key file `sample.private.key`. The imported key is essential for the subsequent signing operations.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/internal/releaseauth/testdata/sample.md#2025-04-22_snippet_0\n\nLANGUAGE: CLI\nCODE:\n```\ngpg --import sample.private.key\n```\n\n----------------------------------------\n\nTITLE: Compiling Terraform with Debug Flags in Go\nDESCRIPTION: This command compiles Terraform with the appropriate compiler flags for debugging. It enables all compiler optimizations and inlining.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/docs/debugging.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngo install -gcflags=\"all=-N -l\"\n```\n\n----------------------------------------\n\nTITLE: Sample HTTP 204 Response with X-Terraform-Get Header for Module Download in Text\nDESCRIPTION: Provides an example server response for a successful module download endpoint request, including status line, essential headers, and the 'X-Terraform-Get' header that directs clients to the exact location of the module package. This pattern is required for Terraform CLI compatibility and ensures module acquisition works as expected.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/module-registry-protocol.mdx#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nHTTP/1.1 204 No Content\nContent-Length: 0\nX-Terraform-Get: https://api.github.com/repos/hashicorp/terraform-aws-consul/tarball/v0.0.1//*?archive=tar.gz\n```\n\n----------------------------------------\n\nTITLE: COS Backend with Shared Credentials on Linux/MacOS\nDESCRIPTION: Configuration for COS backend using shared credentials file on Linux/MacOS systems. Specifies credentials directory and profile name.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/cos.mdx#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  backend \"cos\" {\n    region                 = \"ap-guangzhou\"\n    bucket                 = \"bucket-for-terraform-state-{appid}\"\n    prefix                 = \"terraform/state\"\n    shared_credentials_dir = \"/Users/tf_user/.tccli\"\n    profile                = \"default\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing State Manager Interface in Go\nDESCRIPTION: This snippet shows the Full interface for state managers in Terraform. It defines methods for reading, writing, and locking state data.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/docs/architecture.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype Full interface {\n    Reader\n    Writer\n    Refresher\n    Locker\n    PersistentMeta\n}\n```\n\n----------------------------------------\n\nTITLE: Signing SHA256SUMS File for Terraform CloudPlugin Test Data\nDESCRIPTION: This command signs the SHA256SUMS file for the Terraform CloudPlugin test data using a specific GPG key. It creates a detached signature file for the checksum file of version 0.1.0.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/internal/cloudplugin/testdata/sample.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngpg -u 200BDA882C95B80A --output archives/terraform-cloudplugin_0.1.0_SHA256SUMS.sig --detach-sig archives/terraform-cloudplugin_0.1.0_SHA256SUMS\n```\n\n----------------------------------------\n\nTITLE: Example Output of Encode Tfvars Function\nDESCRIPTION: This snippet displays the expected result produced by the encode_tfvars function. The function converts an object to this format, which is suitable for a .tfvars file in Terraform.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/terraform-encode_tfvars.mdx#2025-04-22_snippet_2\n\nLANGUAGE: HCL\nCODE:\n```\nexample = \"Hello!\"\n```\n\n----------------------------------------\n\nTITLE: Visualizing Complete Resource Replacement in Terraform with GraphViz\nDESCRIPTION: A GraphViz diagram illustrating the replacement process when both resources A and B need to be replaced. B is destroyed before A, then A is recreated before B.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/docs/destroying.md#2025-04-22_snippet_3\n\nLANGUAGE: graphviz\nCODE:\n```\ndigraph replacement {\n    subgraph create {\n        rank=same;\n        a [label=\"A create\"];\n        b [label=\"B create\"];\n        a -> b [dir=back];\n    }\n    subgraph destroy {\n        rank=same;\n        a_d [label=\"A destroy\"];\n        b_d [label=\"B destroy\"];\n        a_d -> b_d;\n    }\n\n    a -> a_d;\n    a -> b_d [style=dotted];\n    b -> a_d [style=dotted];\n    b -> b_d;\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking a Terraform Credentials Helper with the 'store' Verb (Shell)\nDESCRIPTION: This shell command illustrates how Terraform runs a configured credentials helper (`terraform-credentials-credstore`) to store new credentials for a hostname (`app.terraform.io`) using the `store` verb. Terraform passes the JSON credentials object (containing the token) to the helper's standard input. The helper should exit silently with status 0 on success.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/credentials-helpers.mdx#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nterraform-credentials-credstore --host=credstore.example.com store app.terraform.io\n```\n\n----------------------------------------\n\nTITLE: Incorrect Resource Naming Without Quotes and Improper Identifiers - HCL\nDESCRIPTION: This snippet demonstrates a non-idiomatic, discouraged resource declaration in Terraform HCL, omitting quotes around the resource type and using a hyphenated identifier containing the resource type redundantly. Its purpose is to illustrate bad practice for the reader; it should be avoided in any implementation. No dependencies are required; input and output are for instructional purposes only.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/style.mdx#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nresource aws_instance webAPI-aws-instance {...}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Update before Destroying create_before_destroy Resource in Terraform with GraphViz\nDESCRIPTION: A GraphViz diagram showing a reduced case where a dependency B is updated before the create_before_destroy resource A is destroyed, demonstrating how the dependency ordering is maintained.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/docs/destroying.md#2025-04-22_snippet_8\n\nLANGUAGE: graphviz\nCODE:\n```\ndigraph update {\n    subgraph create {\n        rank=same;\n        b [label=\"B update\"];\n    }\n    subgraph destroy {\n        rank=same;\n        a_d [label=\"A destroy\"];\n    }\n\n    b -> a_d [dir=back];\n}\n```\n\n----------------------------------------\n\nTITLE: Apply Complete JSON Log Format\nDESCRIPTION: Example of a Terraform apply complete log message indicating successful resource creation\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/machine-readable-ui.mdx#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@level\": \"info\",\n  \"@message\": \"random_pet.animal: Creation complete after 0s [id=smart-lizard]\",\n  \"@module\": \"terraform.ui\",\n  \"@timestamp\": \"2021-05-25T13:32:41.826179-04:00\",\n  \"hook\": {\n    \"resource\": {\n      \"addr\": \"random_pet.animal\",\n      \"module\": \"\",\n      \"resource\": \"random_pet.animal\",\n      \"implied_provider\": \"random\",\n      \"resource_type\": \"random_pet\",\n      \"resource_name\": \"animal\",\n      \"resource_key\": null\n    },\n    \"action\": \"create\",\n    \"id_key\": \"id\",\n    \"id_value\": \"smart-lizard\",\n    \"elapsed_seconds\": 0\n  },\n  \"type\": \"apply_complete\"\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing create_before_destroy with All Resources Replaced in Terraform with GraphViz\nDESCRIPTION: A GraphViz diagram illustrating replacement when A has create_before_destroy set. The order changes so A is created before B is destroyed, and A is destroyed last.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/docs/destroying.md#2025-04-22_snippet_6\n\nLANGUAGE: graphviz\nCODE:\n```\ndigraph replacement {\n    subgraph create {\n        rank=same;\n        a [label=\"A create\"];\n        b [label=\"B create\"];\n        a -> b [dir=back];\n    }\n    subgraph destroy {\n        rank=same;\n        a_d [label=\"A destroy\"];\n        b_d [label=\"B destroy\"];\n        a_d -> b_d;\n    }\n\n    a -> a_d [dir=back];\n    a -> b_d;\n    b -> a_d [dir=back];\n    b -> b_d;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Backend with Client Certificate Authentication\nDESCRIPTION: Legacy configuration using client certificate authentication for Azure backend. Requires management of certificate credentials.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/azurerm.mdx#2025-04-22_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  backend \"azurerm\" {\n    use_azuread_auth            = true                                    # Can also be set via `ARM_USE_AZUREAD` environment variable.\n    tenant_id                   = \"00000000-0000-0000-0000-000000000000\"  # Can also be set via `ARM_TENANT_ID` environment variable.\n    client_id                   = \"00000000-0000-0000-0000-000000000000\"  # Can also be set via `ARM_CLIENT_ID` environment variable.\n    client_certificate_path     = \"/path/to/bundle.pfx\"                   # Can also be set via `ARM_CLIENT_CERTIFICATE_PATH` environment variable.\n    client_certificate_password = \"************************************\"  # Can also be set via `ARM_CLIENT_CERTIFICATE_PASSWORD` environment variable.\n    storage_account_name        = \"abcd1234\"                              # Can be passed via `-backend-config=`\"storage_account_name=<storage account name>\"` in the `init` command.\n    container_name              = \"tfstate\"                               # Can be passed via `-backend-config=`\"container_name=<container name>\"` in the `init` command.\n    key                         = \"prod.terraform.tfstate\"                # Can be passed via `-backend-config=`\"key=<blob key name>\"` in the `init` command.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Terraform Provider Version Incompatibility Error Messages\nDESCRIPTION: These code snippets show example error messages that Terraform Core displays when there's a version incompatibility between Terraform and a provider plugin. They illustrate how Terraform suggests compatible versions or indicates incompatibility for manually installed plugins.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/docs/plugin-protocol/README.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nProvider \"aws\" v1.0.0 is not compatible with Terraform v0.12.0.\n\nProvider version v2.0.0 is the earliest compatible version.\nSelect it with the following version constraint:\n\n    version = \"~> 2.0.0\"\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nProvider \"aws\" v3.0.0 is not compatible with Terraform v0.12.0.\nProvider version v2.34.0 is the latest compatible version. Select \nit with the following constraint:\n\n    version = \"~> 2.34.0\"\n\nAlternatively, upgrade to the latest version of Terraform for compatibility with newer provider releases.\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nThe installed version of provider \"example\" is not compatible with Terraform v0.12.0.\n\nThis provider was loaded from:\n     /usr/local/bin/terraform-provider-example_v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Constructing Provider Mirror URL for Darwin AMD64\nDESCRIPTION: Example of how Terraform resolves a relative URL for downloading a provider plugin archive. The URL is constructed by combining the base URL with the provider path and filename.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/provider-network-mirror-protocol.mdx#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n```\nhttps://terraform.example.com/providers/registry.terraform.io/hashicorp/random/terraform-provider-random_2.0.0_darwin_amd64.zip\n```\n```\n\n----------------------------------------\n\nTITLE: Static List of Objects Expression\nDESCRIPTION: Shows an alternative but valid way to define a static list of objects using argument syntax instead of block syntax.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/attr-as-blocks.mdx#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nexample = [\n  {\n    foo = \"bar\"\n  },\n  {\n    foo = \"baz\"\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Generating Unicode Tables for HCL\nDESCRIPTION: Command to run the code generation process for updating Unicode tables in HCL. This process requires Ruby and the Ragel state machine compiler.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/docs/unicode.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo generate ./hclsyntax\n```\n\n----------------------------------------\n\nTITLE: Using trimsuffix to remove a single character suffix in Terraform\nDESCRIPTION: This example demonstrates removing a single '-' character from the end of 'hello--', resulting in 'hello-' since only one occurrence of the suffix is removed.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/trimsuffix.mdx#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n> trimsuffix(\"hello--\", \"-\")\nhello-\n```\n\n----------------------------------------\n\nTITLE: Defining Multi-Instance AWS Resources Using for_each - Terraform HCL\nDESCRIPTION: This code snippet demonstrates how to declare multiple aws_instance resources in Terraform with unique keys using the for_each meta-argument. The for_each parameter is set to a map, enabling creation of separate instances keyed by the given strings. Dependencies: AWS provider and valid credentials. Inputs: a map via tomap function. Outputs: multiple uniquely keyed aws_instance objects. Limitations: keys must be unique strings.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/state/resource-addressing.mdx#2025-04-22_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nresource \\\"aws_instance\\\" \\\"web\\\" {\n  # ...\n  for_each = tomap({\n    \\\"terraform\\\": \\\"value1\\\",\n    \\\"resource\\\":  \\\"value2\\\",\n    \\\"indexing\\\":  \\\"value3\\\",\n    \\\"example\\\":   \\\"value4\\\",\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Listing All Terraform Outputs via CLI Shell\nDESCRIPTION: This snippet demonstrates invoking “terraform output” from the shell with no arguments to print all outputs for the current root module. The sample result includes lists, strings, and the display for a sensitive value. This command works out-of-the-box after a successful Terraform apply and reads from the default state file or remote state backend.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/output.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shellsession\nCODE:\n```\n$ terraform output\ninstance_ips = [\n  \"54.43.114.12\",\n  \"52.122.13.4\",\n  \"52.4.116.53\"\n]\nlb_address = \"my-app-alb-1657023003.us-east-1.elb.amazonaws.com\"\npassword = <sensitive>\n\n```\n\n----------------------------------------\n\nTITLE: Direct String Extraction with Terraform Output –raw Flag in Shell\nDESCRIPTION: This snippet illustrates extracting a single string output in its raw form with “terraform output -raw”, bypassing lists, JSON, or quoting. The result is plain, UTF-8 encoded text suitable for direct consumption in shell scripts or pipelines. The -raw option only works for string, number, or boolean outputs and does not support complex types.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/output.mdx#2025-04-22_snippet_6\n\nLANGUAGE: shellsession\nCODE:\n```\n$ terraform output -raw lb_address\nmy-app-alb-1657023003.us-east-1.elb.amazonaws.com\n\n```\n\n----------------------------------------\n\nTITLE: Generating PNG Image from Terraform Graph Output\nDESCRIPTION: This command pipes the output of `terraform graph` with the plan type option into the `dot` command to generate a PNG image of the graph.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/graph.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shellsession\nCODE:\n```\n$ terraform graph -type=plan | dot -Tpng >graph.png\n```\n\n----------------------------------------\n\nTITLE: Credential Setup via Environment Variables\nDESCRIPTION: Interactive shell commands for setting up sensitive credentials\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/pg.mdx#2025-04-22_snippet_5\n\nLANGUAGE: shellsession\nCODE:\n```\n$ export PGUSER=user\n$ read -s PGPASSWORD\n$ export PGPASSWORD\n$ terraform init\n```\n\n----------------------------------------\n\nTITLE: Terraform Block Expressions Representation Schema\nDESCRIPTION: Shows how Terraform represents block contents and nested structures in configuration. Demonstrates mapping of attributes and handling of different block nesting modes.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/json-format.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"ami\": <expression-representation>,\n  \"instance_type\": <expression-representation>,\n  \"root_block_device\": <expression-representation>,\n  \"ebs_block_device\": [\n    <expression-representation>\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: DynamoDB Mock Resource Configuration\nDESCRIPTION: Example of mocking a DynamoDB table resource with computed attributes and replicas.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/tests/mocking.mdx#2025-04-22_snippet_13\n\nLANGUAGE: hcl\nCODE:\n```\nmock_resource \"aws_dynamodb_table\" {\n  defaults = {\n    arn = \"aws:dynamodb:::my_table\"\n    replica = {\n      arn = \"aws:dynamodb:::my_replica\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating from Remote Backend to Cloud Block\nDESCRIPTION: Example showing how to migrate from a remote backend configuration to a cloud block while maintaining the same workspace name.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/cloud/settings.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n-  backend \"remote\" {\n+    cloud {\n       organization = \"my-org\"\n\n       workspaces {\n          name = \"my-app-prod\"\n       }\n     }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Command-Specific Arguments with TF_CLI_ARGS_name in Shell\nDESCRIPTION: The `TF_CLI_ARGS_name` environment variable format allows specifying additional command-line arguments for a *specific* Terraform command `name` (e.g., `plan`, `apply`). These arguments are inserted similarly to `TF_CLI_ARGS` but only affect the designated command. The example `TF_CLI_ARGS_plan=\"-refresh=false\"` would add `-refresh=false` only to `terraform plan` commands.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/config/environment-variables.mdx#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n# Example Usage context (not a direct code block in source)\n# TF_CLI_ARGS_plan=\"-refresh=false\"\n```\n\n----------------------------------------\n\nTITLE: Using count and for_each Meta-Arguments in Terraform Blocks (HCL)\nDESCRIPTION: Mentions the `count` and `for_each` meta-arguments used within Terraform's `module`, `resource`, and `data` blocks for creating multiple instances based on expressions. In the context of the `-allow-deferral` experiment, these arguments can accept unknown values during the plan phase, allowing for more dynamic resource provisioning.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\ncount\n```\n\nLANGUAGE: hcl\nCODE:\n```\nfor_each\n```\n\n----------------------------------------\n\nTITLE: Querying List Outputs from Terraform State via CLI\nDESCRIPTION: This snippet shows querying a list output (“instance_ips”) via the Terraform CLI, returning all IPs as a formatted array for inspection or further processing. This output is in a human-readable format by default; for structured parsing in scripts, use the -json or -raw option as needed.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/output.mdx#2025-04-22_snippet_4\n\nLANGUAGE: shellsession\nCODE:\n```\n$ terraform output instance_ips\ninstance_ips = [\n  \"54.43.114.12\",\n  \"52.122.13.4\",\n  \"52.4.116.53\"\n]\n\n```\n\n----------------------------------------\n\nTITLE: Querying a Specific Output Value by Name from Terraform State\nDESCRIPTION: This command shows retrieval of a specific output (“lb_address”) from the Terraform state using the CLI. The output is formatted as a JSON string if the value is a string, which is helpful for automated consumption or select parsing. This behavior is standard for non-list, non-object outputs when no flags are specified.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/output.mdx#2025-04-22_snippet_3\n\nLANGUAGE: shellsession\nCODE:\n```\n$ terraform output lb_address\n\"my-app-alb-1657023003.us-east-1.elb.amazonaws.com\"\n\n```\n\n----------------------------------------\n\nTITLE: Example error output from Terraform type inconsistency\nDESCRIPTION: This snippet shows the error message Terraform produces when there's a type inconsistency in conditional expressions, even though both sides are tuples. The error hints at structural differences between the two tuple types.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/type.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nError: Inconsistent conditional result types\n\n  on main.tf line 18, in output \"list\":\n  18:   value = var.list != [] ? var.list : local.default_list\n    |----------------\n    | local.default_list is tuple with 2 elements\n    | var.list is empty tuple\n\nThe true and false result expressions must have consistent types. The given\nexpressions are tuple and tuple, respectively.\n```\n\n----------------------------------------\n\nTITLE: Example Terraform Service Discovery Document (JSON)\nDESCRIPTION: This JSON object represents an example discovery document returned by the `/.well-known/terraform.json` endpoint for a given hostname. It maps Terraform native service identifiers (like `modules.v1` for the module registry API version 1) to their corresponding base URLs. The service URL can be absolute or relative to the final discovery URL.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/remote-service-discovery.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"modules.v1\": \"https://modules.example.com/v1/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing List Diff in Go for Terraform JSON Formatting\nDESCRIPTION: Creates a computed Diff object representing changes to a list of primitives in a Terraform plan. The diff includes various change actions like create, delete, and no-op for list elements.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/internal/command/jsonformat/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nlistDiff := computed.NewDiff(renderers.List([]computed.Diff{\n    computed.NewDiff(renderers.Primitive(0.0, 0.0, cty.Number), plans.NoOp, false),\n    computed.NewDiff(renderers.Primitive(1.0, nil, cty.Number), plans.Delete, false),\n    computed.NewDiff(renderers.Primitive(nil, 4.0, cty.Number), plans.Create, false),\n    computed.NewDiff(renderers.Primitive(2.0, 2.0, cty.Number), plans.NoOp, false)\n}, plans.Update, false))\n```\n\n----------------------------------------\n\nTITLE: Testing Input Validation with expect_failures in Terraform\nDESCRIPTION: A Terraform test file that validates variable inputs. It shows how to test both successful validation (with an even number) and failing validation (with an odd number) using expect_failures.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/tests/index.mdx#2025-04-22_snippet_19\n\nLANGUAGE: hcl\nCODE:\n```\n# input_validation.tftest.hcl\n\nvariables {\n  input = 0\n}\n\nrun \"zero\" {\n  # The variable defined above is even, so we expect the validation to pass.\n\n  command = plan\n}\n\nrun \"one\" {\n  # This time we set the variable is odd, so we expect the validation to fail.\n\n  command = plan\n\n  variables {\n    input = 1\n  }\n\n  expect_failures = [\n    var.input,\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Removing a Count-Indexed Resource Instance with terraform state rm - Shell\nDESCRIPTION: This snippet demonstrates removing a specific indexed instance (here, index 0) from a resource defined with the count meta-argument. Quotes are used to ensure shell compatibility, as brackets may have special meaning. Requires that the resource exists with that index in state.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/state/rm.mdx#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ terraform state rm 'packet_device.worker[0]'\n```\n\n----------------------------------------\n\nTITLE: Defining Local Variables for Terraform Test Example (HCL)\nDESCRIPTION: This HCL configuration snippet, intended for `main.tf`, defines two local variables, `true` and `false`. The `false` variable is intentionally assigned the string \"true\" to serve as the basis for a failing test case example.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/test.mdx#2025-04-22_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\n# main.tf\nlocals {\n  true  = \"true\"\n  false = \"true\" # incorrect, should be \"false\"!\n}\n```\n\n----------------------------------------\n\nTITLE: Chaining Moved Blocks in Terraform for Multiple Refactors\nDESCRIPTION: Demonstrates how to chain multiple moved blocks to document a sequence of moves for the same object. This approach allows for successful upgrades from multiple previous versions of a module.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/develop/refactoring.mdx#2025-04-22_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\nmoved {\n  from = aws_instance.a\n  to   = aws_instance.b\n}\n\nmoved {\n  from = aws_instance.b\n  to   = aws_instance.c\n}\n```\n\n----------------------------------------\n\nTITLE: Showing a Resource with Count in Terraform State\nDESCRIPTION: This snippet demonstrates how to view the attributes of a specific instance of a resource configured with the `count` meta-argument using `terraform state show`. The zero-based index specifies the instance.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/state/show.mdx#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ terraform state show 'packet_device.worker[0]'\n```\n\n----------------------------------------\n\nTITLE: Running the Basic Terraform Init Command\nDESCRIPTION: The basic syntax for running the terraform init command, which initializes a working directory containing Terraform configuration files. This is the first command to run after writing a new configuration or cloning one from version control.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/init.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterraform init [options]\n```\n\n----------------------------------------\n\nTITLE: Showing a Resource with For_Each in Windows Cmd\nDESCRIPTION: This snippet provides the Windows `cmd.exe` command syntax for displaying attributes of a resource instance configured with `for_each`, ensuring proper escaping of special characters.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/state/show.mdx#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ terraform state show packet_device.worker[\\\"example\\\"]\n```\n\n----------------------------------------\n\nTITLE: Visualizing Simple Resource Destruction in Terraform with GraphViz\nDESCRIPTION: A GraphViz diagram showing the destruction order of resources, which is the inverse of the creation order. C is destroyed first, followed by B, then A.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/docs/destroying.md#2025-04-22_snippet_2\n\nLANGUAGE: graphviz\nCODE:\n```\ndigraph destroy {\n    subgraph nodes {\n        rank=same;\n        a [label=\"A destroy\"];\n        b [label=\"B destroy\"];\n        c [label=\"C destroy\"];\n        a -> b;\n        b -> c;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Legacy Local Backend Options for terraform apply (CLI)\nDESCRIPTION: For configurations using only the `local` backend, `terraform apply` accepts legacy options `-state`, `-state-out`, and `-backup` for managing state files directly.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/apply.mdx#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n-state\n```\n\nLANGUAGE: bash\nCODE:\n```\n-state-out\n```\n\nLANGUAGE: bash\nCODE:\n```\n-backup\n```\n\n----------------------------------------\n\nTITLE: Executing the Terraform Providers Schema Command\nDESCRIPTION: Demonstrates the basic command-line syntax for running the `terraform providers schema` command. The optional `-json` flag is highlighted as required to produce machine-readable JSON output.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/providers/schema.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ terraform providers schema [options]\n```\n\n----------------------------------------\n\nTITLE: Setting TF_LOG for Trace-Level Debugging in Shell\nDESCRIPTION: Sets the `TF_LOG` environment variable to `trace` to enable detailed logging output on stderr. This is useful for debugging Terraform execution by providing maximum verbosity.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/config/environment-variables.mdx#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexport TF_LOG=trace\n```\n\n----------------------------------------\n\nTITLE: Showing a Resource with For_Each in PowerShell\nDESCRIPTION: This snippet displays the PowerShell command to show a specific instance of a resource configured with `for_each`. It accounts for escaping special characters in the resource name.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/state/show.mdx#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ terraform state show 'packet_device.worker[\\\"example\\\"]'\n```\n\n----------------------------------------\n\nTITLE: Root-Level Comments in Terraform JSON\nDESCRIPTION: Shows how to add comments at the root level of a JSON configuration file, useful for indicating file generation sources or warnings.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/syntax/json.mdx#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"//\": \"This file is generated by generate-outputs.py. DO NOT HAND-EDIT!\",\n\n  \"output\": {\n    \"example\": {\n      \"value\": \"${aws_instance.example}\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the min() Function with Multiple Arguments in Terraform\nDESCRIPTION: Example of using the min() function that takes multiple number arguments and returns the smallest value.\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/function-calls.mdx#2025-04-22_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nmin(55, 3453, 2)\n```\n\n----------------------------------------\n\nTITLE: Basic Postgres Backend Configuration in Terraform\nDESCRIPTION: Basic configuration for setting up Postgres backend with direct connection string specification\nSOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/pg.mdx#2025-04-22_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  backend \"pg\" {\n    conn_str = \"postgres://user:pass@db.example.com/terraform_backend\"\n  }\n}\n```"
  }
]