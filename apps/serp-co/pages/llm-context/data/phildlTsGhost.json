[
  {
    "owner": "phildl",
    "repo": "ts-ghost",
    "content": "TITLE: Implementing Ghost Content API in Remix Route\nDESCRIPTION: Complete implementation of a Remix route that fetches and displays Ghost blog posts using the Content API. Includes loader function for data fetching and React component for rendering.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/content-api/remix/page.mdx#2025-04-06_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { json, type LoaderArgs, type V2_MetaFunction } from \"@remix-run/node\";\nimport { Link, useLoaderData } from \"@remix-run/react\";\nimport { TSGhostContentAPI } from \"@ts-ghost/content-api\";\n\nexport const meta: V2_MetaFunction = () => {\n  return [{ title: \"New Remix App\" }];\n};\n\nexport async function loader({ request }: LoaderArgs) {\n  const api = new TSGhostContentAPI(\n    process.env.GHOST_URL || \"\",\n    process.env.GHOST_CONTENT_API_KEY || \"\",\n    \"v5.0\"\n  );\n  const [settings, posts] = await Promise.all([api.settings.fetch(), api.posts.browse().fetch()]);\n\n  if (!settings.success) {\n    throw new Error(settings.errors.join(\", \"));\n  }\n  if (!posts.success) {\n    throw new Error(posts.errors.join(\", \"));\n  }\n  return json({ settings: settings.data, posts: posts.data });\n}\n\nexport default function Index() {\n  const { settings, posts } = useLoaderData<typeof loader>();\n\n  return (\n    <div style={{ fontFamily: \"system-ui, sans-serif\", lineHeight: \"1.4\" }}>\n      <h1>This is a list of posts for {settings.title}:</h1>\n      <ul>\n        {posts.map((post) => (\n          <li key={post.slug}>\n            <Link to={`/${post.slug}`}>{post.title}</Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing TSGhostAdminAPI and Using Browse Method in TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize the TSGhostAdminAPI client and use the browse method with various options for filtering and ordering posts.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/admin-api/browse/page.mdx#2025-04-06_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TSGhostAdminAPI } from \"@ts-ghost/admin-api\";\n\nconst api = new TSGhostAdminAPI(\n  \"https://demo.ghost.io\",\n  \"1efedd9db174adee2d23d982:4b74dca0219bad629852191af326a45037346c2231240e0f7aec1f9371cc14e8\",\n  \"v5.0\"\n);\n\nlet query = api.posts.browse({\n  page: 1,\n  limit: 5,\n  filter: \"name:bar+slug:-test\",\n  //      ^? the text here will throw a TypeScript lint error if you use unknown fields.\n  order: \"title DESC\",\n  //      ^? the text here will throw a TypeScript lint error if you use unknown fields.\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Ghost API\nDESCRIPTION: Environment variable configuration for Ghost blog URL and Content API key.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/content-api/quickstart/page.mdx#2025-04-06_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nGHOST_URL=\"https://myblog.com\"\nGHOST_CONTENT_API_KEY=\"e9b414c5d95a5436a647ff04ab\"\n```\n\n----------------------------------------\n\nTITLE: Initializing TSGhost Admin API Client\nDESCRIPTION: Shows how to initialize the TSGhost Admin API client with blog URL and admin API credentials.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/admin-api/overview/page.mdx#2025-04-06_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TSGhostAdminAPI } from \"@ts-ghost/admin-api\";\n\nconst api = new TSGhostAdminAPI(\n  \"https://demo.ghost.io\",\n  \"1efedd9db174adee2d23d982:4b74dca0219bad629852191af326a45037346c2231240e0f7aec1f9371cc14e8\",\n  \"v5.0\"\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using the Ghost Content API Client\nDESCRIPTION: Example of initializing the TSGhostContentAPI client and creating a function to fetch blog posts with field selection.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-content-api/README.md#2025-04-06_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TSGhostContentAPI } from \"@ts-ghost/content-api\";\n\nconst api = new TSGhostContentAPI(\n  process.env.GHOST_URL || \"\",\n  process.env.GHOST_CONTENT_API_KEY || \"\",\n  \"v5.47.0\"\n);\n\nexport async function getBlogPosts() {\n  const response = await api.posts\n    .browse({\n      limit: 10,\n    })\n    .fields({\n      title: true,\n      slug: true,\n      id: true,\n    })\n    .fetch();\n  if (!response.success) {\n    throw new Error(response.errors.join(\", \"));\n  }\n  // Response data is typed correctly with only the requested fields\n  // {\n  //   title: string;\n  //   slug: string;\n  //   id: string;\n  // }[]\n  return response.data;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling API Response with Type-Safe Result Handling\nDESCRIPTION: Demonstrates how to use the fetch method from a ReadFetcher and handle the result with proper type safety. The result is a discriminated union that provides different handling for success and error cases.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-core-api/README.md#2025-04-06_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst composedAPI = new APIComposer(\n  { schema: simplifiedSchema, output: simplifiedSchema, include: simplifiedIncludeSchema },\n  api\n);\nconst readFetcher = composedAPI.read({ slug: \"typescript-is-cool\" });\nlet result = await readFetcher.fetch();\nif (result.success) {\n  const post = result.data;\n  //     ^? type {\"slug\":string; \"title\": string}\n} else {\n  // errors array of objects\n  console.log(result.errors.map((e) => e.message).join(\"\\n\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Querying blog posts using ts-ghost Admin API in TypeScript\nDESCRIPTION: This TypeScript code demonstrates how to initialize the TSGhostAdminAPI client, create a function to fetch blog posts, and handle the response. It includes error handling and type-safe access to the response data.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/admin-api/quickstart/page.mdx#2025-04-06_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TSGhostAdminAPI } from \"@ts-ghost/admin-api\";\n\nconst api = new TSGhostAdminAPI(\n  process.env.GHOST_URL || \"\",\n  process.env.GHOST_ADMIN_API_KEY || \"\",\n  \"v5.47.0\"\n);\n\nexport async function getBlogPosts() {\n  const response = await api.posts\n    .browse({\n      limit: 10,\n    })\n    .fields({\n      title: true,\n      slug: true,\n      id: true,\n      html: true,\n      plaintext: true,\n    })\n    .formats({\n      html: true,\n      plaintext: true,\n    })\n    .fetch();\n  if (!response.success) {\n    throw new Error(response.errors.join(\", \"));\n  }\n  // Response data is typed correctly with only the requested fields\n  // {\n  //   title: string;\n  //   slug: string;\n  //   id: string;\n  //   html: string;\n  //   plaintext: string;\n  // }[]\n  return response.data;\n}\n```\n\n----------------------------------------\n\nTITLE: Performing CRUD Operations with Ghost Admin API\nDESCRIPTION: Demonstrates how to perform add, edit, and delete operations on a Ghost post resource. Shows proper error handling and type safety with the returned objects.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-admin-api/README.md#2025-04-06_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TSGhostAdminAPI } from \"@ts-ghost/admin-api\";\n\nlet url = \"https://demo.ghost.io\";\nlet key = \"1efedd9db174adee2d23d982:4b74dca0219bad629852191af326a45037346c2231240e0f7aec1f9371cc14e8\";\nconst api = new TSGhostAdminAPI(url, key, \"v5.0\");\n\n// Input data are fully typed and then parsed through the appropriate Zod Schema\nconst adding = await api.posts.add({\n  title: title,\n  html: \"<p>Hello from ts-ghost</p>\",\n  tags: [{ name: \"ts-ghost\" }],\n  tiers: [{ name: \"ts-ghost\" }],\n  custom_excerpt: \"This is custom excerpt from ts-ghost\",\n  meta_title: \"Meta Title from ts-ghost\",\n  meta_description: \"Description from ts-ghost\",\n  featured: true,\n  og_title: \"OG Title from ts-ghost\",\n  og_description: \"OG Description from ts-ghost\",\n  twitter_title: \"Twitter Title from ts-ghost\",\n  twitter_description: \"Twitter Description from ts-ghost\",\n  visibility: \"public\",\n  slug: \"foobarbaz\",\n});\n\nif (!adding.success) {\n  console.error(adding.errors);\n  throw new Error(\"Failed to create post\");\n}\n\nconst newPost = adding.data;\n//     ^? type Post\n\n// Update\nconst postEdit = await api.posts.edit(newPost.id, {\n  custom_excerpt: \"Modified excerpt from ghost\",\n  // This is required by Ghost to send the updated_at field with the updated_at\n  // of the post you want to edit.\n  updated_at: new Date(newPost.updated_at || \"\"),\n});\n\nif (!postEdit.success) {\n  console.error(postEdit.errors);\n  throw new Error(\"Failed to edit post\");\n}\n\nconst editedPost = postEdit.data;\n//     ^? type Post\n\n// Delete\nconst postDelete = await api.posts.delete(editedPost.id);\nif (!postDelete.success) {\n  console.error(postDelete.errors);\n  throw new Error(\"Failed to delete post\");\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Ghost API in NextJS Server Component\nDESCRIPTION: NextJS server component that fetches blog posts and site settings using the Ghost Content API, then renders them in a React component.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/content-api/nextjs/page.mdx#2025-04-06_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { api } from \"./ghost\";\n\nasync function getBlogPosts() {\n  const response = await api.posts.browse().fields({ title: true, slug: true, id: true }).fetch();\n  if (!response.success) {\n    throw new Error(response.errors.join(\", \"));\n  }\n  return response.data;\n}\n\nasync function getSiteSettings() {\n  const response = await api.settings.fetch();\n  if (!response.success) {\n    throw new Error(response.errors.join(\", \"));\n  }\n  return response.data;\n}\n\n// async Server Component\nexport default async function HomePage() {\n  const [posts, settings] = await Promise.all([getBlogPosts(), getSiteSettings()]);\n  return (\n    <div>\n      <h1>This is a list of posts for {settings.title}:</h1>\n      <ul>\n        {posts.map((post) => (\n          <li key={post.id}>\n            {post.title} ({post.slug})\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Posts with Tags Filter using TS-Ghost Content API in TypeScript\nDESCRIPTION: This snippet demonstrates how to use TS-Ghost to fetch posts filtered by tags. It initializes the TSGhostContentAPI, sets up a query to browse posts with a specific tag, and includes authors and tags in the result.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/content-api/migrating-from-ghost-sdk/page.mdx#2025-04-06_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TSGhostContentAPI, type Post } from \"@ts-ghost/content-api\";\n\nlet url = \"https://demo.ghost.io\";\nlet key = \"22444f78447824223cefc48062\"; // Content API KEY\nconst api = new TSGhostContentAPI(url, key, \"v5.0\");\n\nlet posts: Post[] = [];\nlet cursor = await api.posts\n  .browse({ filter: \"tags:hash-tag\" })\n  .include({ authors: true, tags: true })\n  .fetch();\nif (result.success) {\n  posts = result.data;\n}\nreturn posts\n```\n\n----------------------------------------\n\nTITLE: Installing ts-ghost Admin API package using pnpm\nDESCRIPTION: This command installs the @ts-ghost/admin-api package using the pnpm package manager.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/admin-api/quickstart/page.mdx#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @ts-ghost/admin-api\n```\n\n----------------------------------------\n\nTITLE: NextJS App Router with Ghost Content API\nDESCRIPTION: Implementation of a NextJS App Router page component that fetches and displays blog posts and site settings using Ghost Content API.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-content-api/README.md#2025-04-06_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport { api } from \"./ghost\";\n\nasync function getBlogPosts() {\n  const response = await api.posts.browse().fields({ title: true, slug: true, id: true }).fetch();\n  if (!response.success) {\n    throw new Error(response.errors.join(\", \"));\n  }\n  return response.data;\n}\n\nasync function getSiteSettings() {\n  const response = await api.settings.fetch();\n  if (!response.success) {\n    throw new Error(response.errors.join(\", \"));\n  }\n  return response.data;\n}\n\n// async Server Component\nexport default async function HomePage() {\n  const [posts, settings] = await Promise.all([getBlogPosts(), getSiteSettings()]);\n  return (\n    <div>\n      <h1>This is a list of posts for {settings.title}:</h1>\n      <ul>\n        {posts.map((post) => (\n          <li key={post.id}>\n            {post.title} ({post.slug})\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching and Error Handling in TS-Ghost\nDESCRIPTION: Demonstrates the pattern for fetching data and handling success/error responses using TypeScript discriminated unions.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-admin-api/README.md#2025-04-06_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nlet result = await api.posts.read({ slug: \"this-is-a-slug\" }).fetch();\nif (result.success) {\n  const posts = result.data;\n  //     ^? type Post\n} else {\n  // errors array of objects\n  console.log(result.errors.map((e) => e.message).join(\"\\n\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Paginating and Fetching Posts with Authors and Tags in TypeScript using @ts-ghost/admin-api\nDESCRIPTION: This snippet demonstrates how to retrieve all posts, including associated authors and tags, using pagination with the @ts-ghost/admin-api library. It uses the paginate function to handle multiple pages of results.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/admin-api/common-recipes/page.mdx#2025-04-06_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TSGhostAdminAPI, type Post } from \"@ts-ghost/admin-api\";\n\nlet url = \"https://demo.ghost.io\";\nlet key = \"1efedd9db174adee2d23d982:4b74dca0219bad629852191af326a45037346c2231240e0f7aec1f9371cc14e8\"; // Admin API KEY\nconst api = new TSGhostAdminAPI(url, key, \"v5.0\");\n\nconst posts: Post[] = [];\nlet cursor = await api.posts\n  .browse()\n  .include({ authors: true, tags: true })\n  .paginate();\nif (cursor.current.success) posts.push(...cursor.current.data);\nwhile (cursor.next) {\n  cursor = await cursor.next.paginate();\n  if (cursor.current.success) posts.push(...cursor.current.data);\n}\nreturn posts;\n```\n\n----------------------------------------\n\nTITLE: Paginating Ghost Posts with Authors and Tags\nDESCRIPTION: Recipe for fetching all posts including authors and tags data with pagination handling using the paginate function.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-content-api/README.md#2025-04-06_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TSGhostContentAPI, type Post } from \"@ts-ghost/content-api\";\n\nlet url = \"https://demo.ghost.io\";\nlet key = \"22444f78447824223cefc48062\"; // Content API KEY\nconst api = new TSGhostContentAPI(url, key, \"v5.0\");\n\nconst posts: Post[] = [];\nlet cursor = await api.posts\n  .browse()\n  .include({ authors: true, tags: true })\n  .paginate();\nif (cursor.current.success) posts.push(...cursor.current.data);\nwhile (cursor.next) {\n  cursor = await cursor.next.paginate();\n  if (cursor.current.success) posts.push(...cursor.current.data);\n}\nreturn posts;\n```\n\n----------------------------------------\n\nTITLE: Using Browse Method with All Available Options\nDESCRIPTION: Demonstrates how to use the browse method with all available query parameters including page, limit, filter and order. These parameters allow filtering and ordering of the search results.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-core-api/README.md#2025-04-06_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst composedAPI = new APIComposer(\n  { schema: simplifiedSchema, identitySchema: identitySchema, include: simplifiedIncludeSchema },\n  api\n);\nlet query = composedAPI.browse({\n  page: 1,\n  limit: 5,\n  filter: \"title:typescript+slug:-test\",\n  order: \"title DESC\",\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Ghost CMS Data in Next.js App Router\nDESCRIPTION: This snippet demonstrates how to use TSGhostAdminAPI in a Next.js 13 app router to fetch blog posts and site settings from Ghost CMS. It includes error handling and data rendering in an async server component.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-admin-api/README.md#2025-04-06_snippet_31\n\nLANGUAGE: tsx\nCODE:\n```\nimport { api } from \"./ghost\";\n\nasync function getBlogPosts() {\n  const response = await api.posts.browse().fields({ title: true, slug: true, id: true }).fetch();\n  if (!response.success) {\n    throw new Error(response.errors.join(\", \"));\n  }\n  return response.data;\n}\n\nasync function getSiteSettings() {\n  const response = await api.site.fetch();\n  if (!response.success) {\n    throw new Error(response.errors.join(\", \"));\n  }\n  return response.data;\n}\n\n// async Server Component\nexport default async function HomePage() {\n  const [posts, site] = await Promise.all([getBlogPosts(), getSiteSettings()]);\n  return (\n    <div>\n      <h1>This is a list of posts for {site.title}:</h1>\n      <ul>\n        {posts.map((post) => (\n          <li key={post.id}>\n            {post.title} ({post.slug})\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating APIComposer with Schema Definitions\nDESCRIPTION: Creates an APIComposer instance with various Zod schemas to define the structure of API data and validation rules. This example shows how to set up the basic schema, identity schema, include schema, and create schema.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-core-api/README.md#2025-04-06_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { z } from \"zod\";\nimport { APIComposer, type ContentAPICredentials } from \"@ts-ghost/core-api\";\n\nconst api: ContentAPICredentials = {\n  url: \"https://ghost.org\",\n  key: \"7d2d15d7338526d43c2fadc47c\",\n  version: \"v5.0\",\n  resource: \"posts\",\n};\n\nconst simplifiedSchema = z.object({\n  title: z.string(),\n  slug: z.string(),\n  count: z.number().optional(),\n});\n\n// the \"identity\" schema is used to validate the inputs of the `read`method of the APIComposer\nconst identitySchema = z.union([z.object({ slug: z.string() }), z.object({ id: z.string() })]);\n\n// the \"include\" schema is used to validate the \"include\" parameters of the API call\n// it is specific to the Ghost API resource targeted.\n// The format is always { 'name_of_the_field': true }\nconst simplifiedIncludeSchema = z.object({\n  count: z.literal(true).optional(),\n});\n\nconst createSchema = z.object({\n  foo: z.string(),\n  bar: z.string().nullish(),\n  baz: z.boolean().nullish(),\n});\n\nconst composedAPI = new APIComposer(\n  {\n    schema: simplifiedSchema,\n    identitySchema: identitySchema,\n    include: simplifiedIncludeSchema,\n    createSchema: createSchema,\n    createOptionsSchema: z.object({\n      option_1: z.boolean(),\n    }),\n  },\n  api\n);\n```\n\n----------------------------------------\n\nTITLE: Handling Browse Query Results in Ghost Content API (TypeScript)\nDESCRIPTION: Example showing how to handle the discriminated union result from a browse query. Demonstrates checking the success field to determine if the query was successful and accessing the data or errors.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/content-api/browse/page.mdx#2025-04-06_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nlet result = await api.posts.browse().fetch();\nif (result.success) {\n  const posts = result.data;\n  //     ^? type Post[]\n} else {\n  // errors array of objects\n  console.log(result.errors.map((e) => e.message).join(\"\\n\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing APIComposer with Zod Schemas\nDESCRIPTION: Example showing how to instantiate APIComposer with custom Zod schemas for type-safe API interactions. Demonstrates setting up credentials, schemas, and composer configuration.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/core-api/page.mdx#2025-04-06_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { z } from \"zod\";\nimport { APIComposer, HTTPClient, type HTTPClientOptions } from \"@ts-ghost/core-api\";\n\nconst credentials: HTTPClientOptions = {\n  url: \"https://ghost.org\",\n  key: \"7d2d15d7338526d43c2fadc47c\",\n  version: \"v5.0\",\n  endpoint: \"content\",\n};\n\nconst httpClient = new HTTPClient(credentials);\n\nconst simplifiedSchema = z.object({\n  title: z.string(),\n  slug: z.string(),\n  count: z.number().optional(),\n});\n\nconst identitySchema = z.union([z.object({ slug: z.string() }), z.object({ id: z.string() })]);\n\nconst simplifiedIncludeSchema = z.object({\n  count: z.literal(true).optional(),\n});\n\nconst createSchema = z.object({\n  foo: z.string(),\n  bar: z.string().nullish(),\n  baz: z.boolean().nullish(),\n});\n\nconst composedAPI = new APIComposer(\n  \"posts\",\n  {\n    schema: simplifiedSchema,\n    identitySchema: identitySchema,\n    include: simplifiedIncludeSchema,\n    createSchema: createSchema,\n    createOptionsSchema: z.object({\n      option_1: z.boolean(),\n    }),\n  },\n  HTTPClient\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Ghost API in a NextJS Server Component\nDESCRIPTION: NextJS page component that fetches blog posts and site settings from Ghost using the Admin API. The component displays the site title and a list of posts using server-side rendering.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/admin-api/nextjs/page.mdx#2025-04-06_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { api } from \"./ghost\";\n\nasync function getBlogPosts() {\n  const response = await api.posts.browse().fields({ title: true, slug: true, id: true }).fetch();\n  if (!response.success) {\n    throw new Error(response.errors.join(\", \"));\n  }\n  return response.data;\n}\n\nasync function getSiteSettings() {\n  const response = await api.site.fetch();\n  if (!response.success) {\n    throw new Error(response.errors.join(\", \"));\n  }\n  return response.data;\n}\n\n// async Server Component\nexport default async function HomePage() {\n  const [posts, site] = await Promise.all([getBlogPosts(), getSiteSettings()]);\n  return (\n    <div>\n      <h1>This is a list of posts for {site.title}:</h1>\n      <ul>\n        {posts.map((post) => (\n          <li key={post.id}>\n            {post.title} ({post.slug})\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Browse Query Options in Ghost Admin API\nDESCRIPTION: Shows how to configure pagination, filtering, and sorting options when building a browse query with the Ghost Admin API. Demonstrates type-checking for filter and order fields.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-admin-api/README.md#2025-04-06_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TSGhostAdminAPI } from \"@ts-ghost/admin-api\";\n\nconst api = new TSGhostAdminAPI(\n  \"https://demo.ghost.io\",\n  \"1efedd9db174adee2d23d982:4b74dca0219bad629852191af326a45037346c2231240e0f7aec1f9371cc14e8\",\n  \"v5.0\"\n);\n\nlet query = api.posts.browse({\n  page: 1,\n  limit: 5,\n  filter: \"name:bar+slug:-test\",\n  //      ^? the text here will throw a TypeScript lint error if you use unknown fields.\n  order: \"title DESC\",\n  //      ^? the text here will throw a TypeScript lint error if you use unknown fields.\n});\n```\n\n----------------------------------------\n\nTITLE: Field Selection with Type Safety\nDESCRIPTION: Example of selecting specific fields from a post with type-safe results.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-content-api/README.md#2025-04-06_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nlet result = await api.posts\n  .read({\n    slug: \"typescript-is-cool\",\n  })\n  .fields({\n    id: true,\n    slug: true,\n    title: true,\n  })\n  .fetch();\n```\n\n----------------------------------------\n\nTITLE: Fetching All Posts with Pagination in Ghost Content API using TypeScript\nDESCRIPTION: This snippet demonstrates how to retrieve all posts from a Ghost site with pagination, including related authors and tags. It uses the paginate function to automatically handle pagination while accumulating posts in an array.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/content-api/common-recipes/page.mdx#2025-04-06_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TSGhostContentAPI, type Post } from \"@ts-ghost/content-api\";\n\nlet url = \"https://demo.ghost.io\";\nlet key = \"22444f78447824223cefc48062\"; // Content API KEY\nconst api = new TSGhostContentAPI(url, key, \"v5.0\");\n\nconst posts: Post[] = [];\nlet cursor = await api.posts\n  .browse()\n  .include({ authors: true, tags: true })\n  .paginate();\nif (cursor.current.success) posts.push(...cursor.current.data);\nwhile (cursor.next) {\n  cursor = await cursor.next.paginate();\n  if (cursor.current.success) posts.push(...cursor.current.data);\n}\nreturn posts;\n```\n\n----------------------------------------\n\nTITLE: Building API Queries with APIComposer\nDESCRIPTION: Demonstrates how to build type-safe queries using the APIComposer instance. Shows query parameter validation and type checking.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/core-api/page.mdx#2025-04-06_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { z } from \"zod\";\nimport { APIComposer, HTTPClient, type HTTPClientOptions } from \"@ts-ghost/core-api\";\n\nconst credentials: HTTPClientOptions = {\n  url: \"https://ghost.org\",\n  key: \"7d2d15d7338526d43c2fadc47c\",\n  version: \"v5.0\",\n  endpoint: \"content\",\n};\n\nconst httpClient = new HTTPClient(credentials);\n\nconst simplifiedSchema = z.object({\n  title: z.string(),\n  slug: z.string(),\n  count: z.number().optional(),\n});\nconst identitySchema = z.union([z.object({ slug: z.string() }), z.object({ id: z.string() })]);\nconst simplifiedIncludeSchema = z.object({\n  count: z.literal(true).optional(),\n});\n\nconst composedAPI = new APIComposer(\n  \"posts\",\n  { schema: simplifiedSchema, identitySchema: identitySchema, include: simplifiedIncludeSchema },\n  httpClient\n);\nlet query = composedAPI.browse({\n  limit: 5,\n  order: \"title DESC\",\n});\n```\n\n----------------------------------------\n\nTITLE: Reading Posts by ID or Slug\nDESCRIPTION: Shows how to fetch a single post using either ID or slug as the identifier.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-content-api/README.md#2025-04-06_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nlet query = api.posts.read({\n  id: \"edHks74hdKqhs34izzahd45\"\n});\n\n// or\n\nlet query = api.posts.read({\n  slug: \"typescript-is-awesome-in-2025\"\n});\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Browse Query with Filtering and Ordering\nDESCRIPTION: Example of a browse query with pagination, limit, filtering, and ordering parameters.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-content-api/README.md#2025-04-06_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nlet query = api.posts.browse({\n  page: 1,\n  limit: 5,\n  filter: \"name:bar+slug:-test\",\n  //      ^? the text here will throw a TypeScript lint error if you use unknown fields.\n  order: \"title DESC\",\n  //      ^? the text here will throw a TypeScript lint error if you use unknown fields.\n});\n```\n\n----------------------------------------\n\nTITLE: Updating a Ghost Post with updated_at field using the Admin API in TypeScript\nDESCRIPTION: This code demonstrates how to fetch a post by slug and then update it by including the current updated_at timestamp to avoid UPDATE_COLLISION errors. The snippet first initializes the Admin API client, fetches the post, and then updates it with a new custom excerpt.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/admin-api/posts-update-collision-error/page.mdx#2025-04-06_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TSGhostAdminAPI } from \"@ts-ghost/admin-api\";\n\nconst api = new TSGhostAdminAPI(env.GHOST_URL, env.GHOST_ADMIN_API_KEY, \"v5.0\");\n\nconst result = await api.posts\n  .read({\n    slug: \"coming-soon\",\n  })\n  .fetch();\n\nif (!result.success) {\n  throw new Error(result.errors.join(\", \"));\n}\nconst post = result.data;\n\nconst postEditResult = await api.posts.edit(post.id, {\n  custom_excerpt: \"Modified excerpt from ghost\",\n  updated_at: new Date(post.updated_at || \"\"),\n});\n```\n\n----------------------------------------\n\nTITLE: Using Custom Fetch Options with Ghost Content API in TypeScript\nDESCRIPTION: Example showing how to customize fetch behavior by passing RequestInit options to control caching when querying Ghost posts.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-content-api/README.md#2025-04-06_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nlet query = await api.posts\n  .browse({\n    limit: 5,\n    order: \"title DESC\",\n  })\n  .fetch({\n    cache: \"no-cache\",\n  });\n```\n\n----------------------------------------\n\nTITLE: NextJS Ghost API Client Initialization\nDESCRIPTION: Example showing how to create a dedicated file for Ghost API initialization in NextJS app directory structure.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-content-api/README.md#2025-04-06_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TSGhostContentAPI } from \"@ts-ghost/content-api\";\n\nexport const api = new TSGhostContentAPI(\n  process.env.GHOST_URL || \"\",\n  process.env.GHOST_CONTENT_API_KEY || \"\",\n  \"v5.0\"\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Post using ts-ghost Admin API in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a new post with the minimum required field (title) using the ts-ghost Admin API. It initializes the API client and uses the 'add' method on the 'posts' resource.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/admin-api/add/page.mdx#2025-04-06_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TSGhostAdminAPI } from \"@ts-ghost/admin-api\";\n\nconst api = new TSGhostAdminAPI(\n  \"https://demo.ghost.io\",\n  \"1efedd9db174adee2d23d982:4b74dca0219bad629852191af326a45037346c2231240e0f7aec1f9371cc14e8\",\n  \"v5.0\"\n);\n\nconst postAdd = await api.posts.add({\n  title: title,\n});\n```\n\n----------------------------------------\n\nTITLE: NextJS 13+ Ghost API Integration with Revalidation\nDESCRIPTION: Example demonstrating Ghost API integration with NextJS 13+ using the next.revalidate option to automatically refresh data every 10 seconds.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/content-api/fetching/page.mdx#2025-04-06_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlet query = await api.posts\n  .browse({\n    limit: 5,\n    order: \"title DESC\",\n  })\n  .fetch({ next: { revalidate: 10 } }); // NextJS revalidate this data every 10 seconds at most\n```\n\n----------------------------------------\n\nTITLE: Using fields() Method for Selecting Specific Fields in TypeScript\nDESCRIPTION: Demonstrates how to use the fields() method to select specific fields when reading or browsing posts. This modifies the output to include only the selected fields, providing type safety.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/admin-api/output-modifiers/page.mdx#2025-04-06_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Example with read...\nlet result = await api.posts.read({ slug: \"slug\"}).fields({ title: true }).fetch();\n\n// ... and with browse\nlet result = await api.posts.browse({limit: 2}).fields({ title: true }).fetch();\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with Ghost Admin API in TypeScript\nDESCRIPTION: Demonstrates how to build and execute a query to fetch member data from the Ghost Admin API. Shows both a query with specific field selection and one without field selection.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-admin-api/README.md#2025-04-06_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nlet query = await api.members\n  .browse({\n    limit: 5,\n    order: \"email ASC\",\n  })\n  .fields({\n    id: true,\n    email: true,\n    name: true,\n  })\n  .fetch();\n\n// or without fields selection\n\nlet query2 = await api.members\n  .browse({\n    limit: 5,\n    order: \"email ASC\",\n  })\n  .fetch();\n```\n\n----------------------------------------\n\nTITLE: Deleting a Member using Ghost Admin API in TypeScript\nDESCRIPTION: This snippet demonstrates how to delete a member using the TSGhostAdminAPI. It initializes the API client, calls the delete method on the members resource, and handles the result. The function requires the member's ID as an argument.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/admin-api/delete/page.mdx#2025-04-06_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TSGhostAdminAPI } from \"@ts-ghost/admin-api\";\n\nconst api = new TSGhostAdminAPI(\n  \"https://demo.ghost.io\",\n  \"1efedd9db174adee2d23d982:4b74dca0219bad629852191af326a45037346c2231240e0f7aec1f9371cc14e8\",\n  \"v5.0\"\n);\nconst result = await api.members.delete(\"edHks74hdKqhs34izzahd45\");\n\nif (!result.success) {\n  console.error(result.errors);\n  throw new Error(\"Failed to delete Member\");\n}\n```\n\n----------------------------------------\n\nTITLE: Paginated Posts Fetching\nDESCRIPTION: Shows how to fetch all posts including related authors and tags using pagination.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-admin-api/README.md#2025-04-06_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TSGhostAdminAPI, type Post } from \"@ts-ghost/admin-api\";\n\nlet url = \"https://demo.ghost.io\";\nlet key = \"1efedd9db174adee2d23d982:4b74dca0219bad629852191af326a45037346c2231240e0f7aec1f9371cc14e8\"; // Admin API KEY\nconst api = new TSGhostAdminAPI(url, key, \"v5.0\");\n\nconst posts: Post[] = [];\nlet cursor = await api.posts\n  .browse()\n  .include({ authors: true, tags: true })\n  .paginate();\nif (cursor.current.success) posts.push(...cursor.current.data);\nwhile (cursor.next) {\n  cursor = await cursor.next.paginate();\n  if (cursor.current.success) posts.push(...cursor.current.data);\n}\nreturn posts;\n```\n\n----------------------------------------\n\nTITLE: Using Read Method to Fetch Single Resources\nDESCRIPTION: Shows how to use the read method to fetch a single resource by either ID or slug. This is used when you need to retrieve a specific item from the Ghost API.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-core-api/README.md#2025-04-06_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst composedAPI = new APIComposer(\n  { schema: simplifiedSchema, identitySchema: identitySchema, include: simplifiedIncludeSchema },\n  api\n);\nlet query = composedAPI.read({\n  id: \"edHks74hdKqhs34izzahd45\"\n});\n\n// or\n\nlet query = composedAPI.read({\n  slug: \"typescript-is-awesome-in-2025\"\n});\n```\n\n----------------------------------------\n\nTITLE: Creating New Ghost Member with Admin API\nDESCRIPTION: Creates a new member in Ghost with basic information (name and email) using the Admin API. The send_email option is set to false to prevent automatic notification.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/admin-api/members-recipes/page.mdx#2025-04-06_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TSGhostAdminAPI } from \"@ts-ghost/admin-api\";\n\nconst api = new TSGhostAdminAPI(env.GHOST_URL, env.GHOST_ADMIN_API_KEY, \"v5.0\");\n\nconst membersAdd = await api.members.add(\n  { name: \"Philippe\", email: \"philippe@ts-ghost.com\" },\n  { send_email: false }\n);\n```\n\n----------------------------------------\n\nTITLE: Filtering Posts with Ghost API in TypeScript\nDESCRIPTION: Demonstrates how to filter featured posts while excluding a specific slug using the Ghost API filter syntax with type safety.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-content-api/README.md#2025-04-06_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst slugToExclude = \"test\";\n\nlet query = await api.posts\n  .browse({\n    filter: `featured:true+slug:-${slugToExclude}`,\n  })\n  .fetch();\n```\n\n----------------------------------------\n\nTITLE: Selecting specific fields with fields() in ts-ghost\nDESCRIPTION: Extended example demonstrating how to use fields() to select multiple specific fields (id, slug, title) when reading a post, with type-safety preserved in the result.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/content-api/output-modifiers/page.mdx#2025-04-06_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlet result = await api.posts\n  .read({\n    slug: \"typescript-is-cool\",\n  })\n  .fields({\n    id: true,\n    slug: true,\n    title: true,\n  })\n  .fetch();\n\nif (result.success) {\n  const post = result.data;\n  //     ^? type {\"id\": string; \"slug\":string; \"title\": string}\n}\n```\n\n----------------------------------------\n\nTITLE: Ordering Posts in Ghost API\nDESCRIPTION: Shows how to order posts by title in descending order using the Ghost API order parameter.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-content-api/README.md#2025-04-06_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nlet query = await api.posts\n  .browse({\n    order: \"title DESC\",\n  })\n  .fetch();\n```\n\n----------------------------------------\n\nTITLE: Implementing Ghost Content API Queries in TypeScript\nDESCRIPTION: TypeScript implementation showing how to initialize the Ghost Content API client and create a function to fetch blog posts with specific fields. Includes error handling and type safety.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/content-api/quickstart/page.mdx#2025-04-06_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TSGhostContentAPI } from \"@ts-ghost/content-api\";\n\nconst api = new TSGhostContentAPI(\n  process.env.GHOST_URL || \"\",\n  process.env.GHOST_CONTENT_API_KEY || \"\",\n  \"v5.47.0\"\n);\n\nexport async function getBlogPosts() {\n  const response = await api.posts\n    .browse({\n      limit: 10,\n    })\n    .fields({\n      title: true,\n      slug: true,\n      id: true,\n    })\n    .fetch();\n  if (!response.success) {\n    throw new Error(response.errors.join(\", \"));\n  }\n  // Response data is typed correctly with only the requested fields\n  // {\n  //   title: string;\n  //   slug: string;\n  //   id: string;\n  // }[]\n  return response.data;\n}\n```\n\n----------------------------------------\n\nTITLE: Ordering Posts in Ghost Content API (TypeScript)\nDESCRIPTION: Example showing how to order posts by title in descending order using the order parameter. Demonstrates the basic syntax for ordering results.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/content-api/browse/page.mdx#2025-04-06_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nlet query = await api.posts\n  .browse({\n    order: \"title DESC\",\n  })\n  .fetch();\n```\n\n----------------------------------------\n\nTITLE: Filtering Ghost Posts with TypeScript Type Safety\nDESCRIPTION: Demonstrates filtering Ghost posts by featured status while excluding specific slugs. Shows how TypeScript provides type safety for the filter parameters.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-admin-api/README.md#2025-04-06_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst slugToExclude = \"test\";\n\nlet query = await api.posts\n  .browse({\n    filter: `featured:true+slug:-${slugToExclude}`,\n  })\n  .fetch();\n```\n\n----------------------------------------\n\nTITLE: Fetching Ghost Posts with Filtering and Pagination\nDESCRIPTION: This snippet shows how to fetch posts from the Ghost API with filtering and pagination. It demonstrates using the browse method to get posts, filtering by tags, limiting results, and including specific fields.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/core-api/usage/page.mdx#2025-04-06_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst { posts } = api.content;\n\nconst response = await posts\n  .browse()\n  .filter('tag', 'hash-getting-started')\n  .fields('title', 'url', 'published_at')\n  .limit(5)\n  .fetch();\n```\n\n----------------------------------------\n\nTITLE: Basic Read Query Examples in TypeScript\nDESCRIPTION: Examples showing how to use the read method with different identity fields (id and slug) to fetch a single post.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/content-api/read/page.mdx#2025-04-06_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlet query = api.posts.read({\n  id: \"edHks74hdKqhs34izzahd45\"\n});\n\n// or\n\nlet query = api.posts.read({\n  slug: \"typescript-is-awesome-in-2025\"\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Posts with New API\nDESCRIPTION: Shows how to query posts using the new API version, with separate methods for input parameters, include options, and field selection.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-content-api/CHANGELOG.md#2025-04-06_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await api.posts\n  .browse({\n    limit: 5,\n    order: \"title DESC\",\n  })\n  .include({\n    authors: true,\n  })\n  .fetch();\n\nconst onePost = await api.posts\n  .read({\n    slug: \"test-post\",\n  })\n  .fields({\n    slug: true,\n    html: true,\n  })\n  .fetch();\n```\n\n----------------------------------------\n\nTITLE: Fetching and Handling Read Query Results\nDESCRIPTION: Example demonstrating how to fetch data using the read method and handle the discriminated union result with success/error states.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/content-api/read/page.mdx#2025-04-06_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nlet result = await api.posts.read({ slug: \"this-is-a-slug\" }).fetch();\nif (result.success) {\n  const posts = result.data;\n  //     ^? type Post\n} else {\n  // errors array of objects\n  console.log(result.errors.map((e) => e.message).join(\"\\n\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Ghost Posts with Cache Control\nDESCRIPTION: Demonstrates how to fetch posts from Ghost API with custom cache behavior using the standard fetch options. The example shows fetching 5 posts ordered by title in descending order with no-cache directive.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/admin-api/fetching/page.mdx#2025-04-06_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlet query = await api.posts\n  .browse({\n    limit: 5,\n    order: \"title DESC\",\n  })\n  .fetch({\n    cache: \"no-cache\",\n  });\n```\n\n----------------------------------------\n\nTITLE: Fetching Data from the Ghost Content API\nDESCRIPTION: Examples of executing queries with and without field selection using the fetch method.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-content-api/README.md#2025-04-06_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nlet query = await api.posts\n  .browse({\n    limit: 5,\n    order: \"title DESC\",\n  })\n  .fields({\n    id: true,\n    slug: true,\n    title: true,\n  })\n  .fetch();\n\n// or without fields selection\n\nlet query2 = await api.posts\n  .browse({\n    limit: 5,\n    order: \"title DESC\",\n  })\n  .fetch();\n```\n\n----------------------------------------\n\nTITLE: Using Fetch Options in Ghost API Requests\nDESCRIPTION: Example of passing fetch options to the API request using standard RequestInit interface.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-core-api/README.md#2025-04-06_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nlet result = await api.posts.read({ slug: \"typescript-is-cool\" }).fetch({ cache: \"no-store\" });\n```\n\n----------------------------------------\n\nTITLE: Configuring Ghost API Client with ts-ghost in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure a Ghost API client using the ts-ghost library. It initializes a connection to the Ghost Content API with a provided URL and API key.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/core-api/usage/page.mdx#2025-04-06_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ghost } from '@ts-ghost/client';\n\nconst api = ghost({\n  url: 'https://demo.ghost.io',\n  key: '22444f78447824223cefc48062',\n  version: 'v5.0'\n});\n```\n\n----------------------------------------\n\nTITLE: Using Field Selection in Ghost API TypeScript Client\nDESCRIPTION: Example of using the fields() method to select specific fields in the API response. Shows type inference and field selection.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-core-api/README.md#2025-04-06_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BrowseFetcher } from \"@ts-ghost/core-api\";\n\nconst browseFetcher = new BrowseFetcher(\n  {\n    schema: simplifiedSchema,\n    output: simplifiedSchema,\n    include: simplifiedIncludeSchema,\n  },\n  {\n    browseParams: {\n      limit: 1,\n    },\n  },\n  api\n);\nlet result = await browseFetcher\n  .fields({\n    slug: true,\n    title: true,\n  })\n  .fetch();\n\nif (result.success) {\n  const post = result.data;\n}\n```\n\n----------------------------------------\n\nTITLE: Including relations with include() in ts-ghost\nDESCRIPTION: Example showing how to use include() to add additional related data to the API response, specifically including post count for an author.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/content-api/output-modifiers/page.mdx#2025-04-06_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nlet result = await api.authors\n  .read({\n    slug: \"phildl\",\n  })\n  .include({ \"count.posts\": true })\n  .fetch();\n```\n\n----------------------------------------\n\nTITLE: Including Additional Data in Ghost API Requests\nDESCRIPTION: Example of using the include() method to request additional data fields in the API response.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-core-api/README.md#2025-04-06_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst bf = new BrowseFetcher(\n  { schema: simplifiedSchema, output: simplifiedSchema, include: simplifiedIncludeSchema },\n  {},\n  api\n);\nlet result = await bf\n  .include({\n    count: true,\n  })\n  .fetch();\n```\n\n----------------------------------------\n\nTITLE: Updating Ghost Member with Stripe Customer ID\nDESCRIPTION: Updates an existing member to add their Stripe customer ID. Uses the member's ID to identify the record and the send_email option is set to false.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/admin-api/members-recipes/page.mdx#2025-04-06_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TSGhostAdminAPI } from \"@ts-ghost/admin-api\";\n\nconst api = new TSGhostAdminAPI(env.GHOST_URL, env.GHOST_ADMIN_API_KEY, \"v5.0\");\n\nconst membersEdit = await api.members.edit(\n  \"edHks74hdKqhs34izzahd45\",\n  { stripe_customer_id: \"cus_123456789\" },\n  { send_email: false }\n);\n```\n\n----------------------------------------\n\nTITLE: Using Fields Method to Select Specific Output Properties in ts-ghost\nDESCRIPTION: Demonstrates how to use the fields method to modify the output schema to include only specific fields. The example shows importing required components, instantiating a fetcher, and selecting specific fields using the fields method.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/core-api/page.mdx#2025-04-06_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BrowseFetcher, HTTPClient } from \"@ts-ghost/core-api\";\n\nconst httpClient = new HTTPClient({\n  url: \"https://ghost.org\",\n  key: \"7d2d15d7338526d43c2fadc47c\",\n  version: \"v5.0\",\n  endpoint: \"content\",\n});\n// Example of instantiating a Fetcher, even though you will probably not do it\nconst browseFetcher = new BrowseFetcher(\n  \"members\",\n  {\n    schema: simplifiedSchema,\n    output: simplifiedSchema,\n    include: simplifiedIncludeSchema,\n  },\n  {\n    browseParams: {\n      limit: 1,\n    },\n  },\n  httpClient\n);\nlet result = await browseFetcher\n  .fields({\n    slug: true,\n    title: true,\n    // ^? available fields come form the `simplifiedSchema` passed in the constructor\n  })\n  .fetch();\n\nif (result.success) {\n  const post = result.data;\n  //     ^? type {\"slug\":string; \"title\": string}\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Unknown Inputs with TypeScript in TSGhostAdminAPI\nDESCRIPTION: This snippet shows how to handle unknown inputs when using TSGhostAdminAPI with TypeScript, demonstrating type casting and the use of 'satisfies' for maintaining type safety.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-admin-api/README.md#2025-04-06_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\n// `fieldsKeys` comes from outside\nconst outputFields = fieldsKeys.reduce((acc, k) => {\n  acc[k as keyof Post] = true;\n  return acc;\n}, {} as { [k in keyof Post]?: true | undefined });\nconst result = await api.posts.browse().fields(outputFields).fetch();\n\nconst outputFields = {\n  slug: true,\n  title: true,\n} satisfies { [k in keyof Post]?: true | undefined };\n\nlet test = api.posts.browse().fields(outputFields);\n```\n\n----------------------------------------\n\nTITLE: Fetching Ghost Instance Settings in TypeScript using @ts-ghost/admin-api\nDESCRIPTION: This snippet shows how to retrieve the settings of a Ghost instance using the @ts-ghost/admin-api library. The settings are returned as an array of key-value pairs, with keys representing setting names and values representing setting values.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/admin-api/common-recipes/page.mdx#2025-04-06_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TSGhostAdminAPI, type Post } from \"@ts-ghost/admin-api\";\n\nlet url = \"https://demo.ghost.io\";\nlet key = \"1efedd9db174adee2d23d982:4b74dca0219bad629852191af326a45037346c2231240e0f7aec1f9371cc14e8\"; // Admin API KEY\nconst api = new TSGhostAdminAPI(url, key, \"v5.0\");\n\nlet result = await api.settings.fetch();\nif (result.success) {\n  const settings = result.data;\n  //     ^? type Settings {title: string; description: string; ...\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Reading Users in TS-Ghost Admin API\nDESCRIPTION: Demonstrates how to initialize the TS-Ghost Admin API client and perform read operations on users using different identity fields.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-admin-api/README.md#2025-04-06_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TSGhostAdminAPI } from \"@ts-ghost/admin-api\";\n\nconst api = new TSGhostAdminAPI(\n  \"https://demo.ghost.io\",\n  \"1efedd9db174adee2d23d982:4b74dca0219bad629852191af326a45037346c2231240e0f7aec1f9371cc14e8\",\n  \"v5.0\"\n);\n\nlet query = api.users.read({\n  email: \"philippe@ts-ghost.com\"\n});\n\n// or\n\nlet query = api.users.read({\n  id: \"edHks74hdKqhs34izzahd45\"\n});\n```\n\n----------------------------------------\n\nTITLE: Ordering Posts by Title in Ghost Admin API\nDESCRIPTION: This example demonstrates how to use the browse method to order posts by title in descending order.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/admin-api/browse/page.mdx#2025-04-06_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nlet query = await api.posts\n  .browse({\n    order: \"title DESC\",\n  })\n  .fetch();\n```\n\n----------------------------------------\n\nTITLE: Fetching User Data with Email or ID in Ghost Admin API (TypeScript)\nDESCRIPTION: Demonstrates how to use the 'read' method to fetch a single user from the Ghost Admin API using either email or ID as the identity field.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/admin-api/read/page.mdx#2025-04-06_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TSGhostAdminAPI } from \"@ts-ghost/admin-api\";\n\nconst api = new TSGhostAdminAPI(\n  \"https://demo.ghost.io\",\n  \"1efedd9db174adee2d23d982:4b74dca0219bad629852191af326a45037346c2231240e0f7aec1f9371cc14e8\",\n  \"v5.0\"\n);\n\nlet query = api.users.read({\n  email: \"philippe@ts-ghost.com\"\n});\n\n// or\n\nlet query = api.users.read({\n  id: \"edHks74hdKqhs34izzahd45\"\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching and Handling Data from Ghost Admin API (TypeScript)\nDESCRIPTION: Demonstrates how to fetch data using the 'read' method and handle the response, including error checking and type inference for successful responses.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/admin-api/read/page.mdx#2025-04-06_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nlet result = await api.posts.read({ slug: \"this-is-a-slug\" }).fetch();\nif (result.success) {\n  const posts = result.data;\n  //     ^? type Post\n} else {\n  // errors array of objects\n  console.log(result.errors.map((e) => e.message).join(\"\\n\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Identity Fields in Ghost Admin API Read Method (TypeScript)\nDESCRIPTION: Shows how to use multiple identity fields in the 'read' method, with a note on the priority order when multiple fields are provided.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/admin-api/read/page.mdx#2025-04-06_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlet query = api.users.read({\n  id: \"edHks74hdKqhs34izzahd45\", // id will take priority\n  email: \"philippe@ts-ghost.com\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Identity Fields in TS-Ghost\nDESCRIPTION: Shows how to use multiple identity fields in a read operation, with explanation of field priority.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-admin-api/README.md#2025-04-06_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nlet query = api.users.read({\n  id: \"edHks74hdKqhs34izzahd45\", // id will take priority\n  email: \"philippe@ts-ghost.com\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using the Browse Method with Options in Ghost Content API (TypeScript)\nDESCRIPTION: Example showing all the available options for the browse method including page, limit, filter, and order parameters. The query is validated through a Zod Schema.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/content-api/browse/page.mdx#2025-04-06_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlet query = api.posts.browse({\n  page: 1,\n  limit: 5,\n  filter: \"name:bar+slug:-test\",\n  //      ^? the text here will throw a TypeScript lint error if you use unknown fields.\n  order: \"title DESC\",\n  //      ^? the text here will throw a TypeScript lint error if you use unknown fields.\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering Featured Posts in Ghost Admin API\nDESCRIPTION: This snippet shows how to use the browse method to filter for featured posts while excluding a specific slug.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/admin-api/browse/page.mdx#2025-04-06_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst slugToExclude = \"test\";\n\nlet query = await api.posts\n  .browse({\n    filter: `featured:true+slug:-${slugToExclude}`,\n  })\n  .fetch();\n```\n\n----------------------------------------\n\nTITLE: Fetching Top 3 Tags by Post Count in Ghost Admin API\nDESCRIPTION: This snippet shows how to use the browse method to fetch the top 3 public tags ordered by post count, including the post count in the result.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/admin-api/browse/page.mdx#2025-04-06_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\napi.tags\n.browse({\n  order: \"count.posts DESC\",\n  filter: \"visibility:public\",\n  limit: 3,\n})\n.include({ \"count.posts\": true })\n.fetch(),\n```\n\n----------------------------------------\n\nTITLE: Retrieving Active Paid Tiers in Ghost\nDESCRIPTION: Fetches all active paid tiers from Ghost, including their benefits, monthly price, and yearly price. Includes error handling for failed requests.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/admin-api/members-recipes/page.mdx#2025-04-06_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TSGhostAdminAPI } from \"@ts-ghost/admin-api\";\n\nconst api = new TSGhostAdminAPI(env.GHOST_URL, env.GHOST_ADMIN_API_KEY, \"v5.0\");\nconst tiers = await api.tiers\n  .browse({\n    filter: \"active:true+type:paid\",\n  })\n  .include({ benefits: true, monthly_price: true, yearly_price: true })\n  .fetch();\n\nif (!tiers.success) {\n  throw new Error(tiers.errors.join(\", \"));\n}\nconsole.log(tiers);\n```\n\n----------------------------------------\n\nTITLE: Editing a Member Record in TS-Ghost Admin API\nDESCRIPTION: This snippet demonstrates how to edit a member record using the TS-Ghost Admin API. It shows initializing the API client, calling the edit method on the members resource, and specifying the member ID, new data, and options.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/admin-api/edit/page.mdx#2025-04-06_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TSGhostAdminAPI } from \"@ts-ghost/admin-api\";\n\nconst api = new TSGhostAdminAPI(\n  \"https://demo.ghost.io\",\n  \"1efedd9db174adee2d23d982:4b74dca0219bad629852191af326a45037346c2231240e0f7aec1f9371cc14e8\",\n  \"v5.0\"\n);\n\nconst membersEdit = await api.members.edit(\n  \"edHks74hdKqhs34izzahd45\",\n  { stripe_customer_id: \"cus_123456789\" },\n  { send_email: false }\n);\n```\n\n----------------------------------------\n\nTITLE: Formatting Content with formats() Method in TypeScript\nDESCRIPTION: Shows how to use the formats() method to get post or page content in different formats. This example retrieves both plaintext and HTML formats of a post's content.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/admin-api/output-modifiers/page.mdx#2025-04-06_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nlet result = await api.posts\n  .read({\n    slug: \"this-is-a-post-slug\",\n  })\n  .formats({\n    plaintext: true,\n    html: true,\n  })\n  .fetch();\n```\n\n----------------------------------------\n\nTITLE: Filtering Posts with Ghost Content API (TypeScript)\nDESCRIPTION: Example showing how to filter posts by featured status while excluding a specific slug. Demonstrates the filter parameter with dynamic values.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/content-api/browse/page.mdx#2025-04-06_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst slugToExclude = \"test\";\n\nlet query = await api.posts\n  .browse({\n    filter: `featured:true+slug:-${slugToExclude}`,\n  })\n  .fetch();\n```\n\n----------------------------------------\n\nTITLE: Creating a Member with Options using ts-ghost Admin API in TypeScript\nDESCRIPTION: This example shows how to create a new member using the ts-ghost Admin API, including the use of options. It demonstrates setting the 'send_email' option to false when adding a member.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/admin-api/add/page.mdx#2025-04-06_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TSGhostAdminAPI } from \"@ts-ghost/admin-api\";\n\nconst api = new TSGhostAdminAPI(\n  \"https://demo.ghost.io\",\n  \"1efedd9db174adee2d23d982:4b74dca0219bad629852191af326a45037346c2231240e0f7aec1f9371cc14e8\",\n  \"v5.0\"\n);\n\nconst memberAdd = await api.members.add(\n  { name: \"Philippe\", email: \"philippe@ts-ghost.com\" },\n  { send_email: false }\n);\n```\n\n----------------------------------------\n\nTITLE: Deleting Members with TSGhost Admin API\nDESCRIPTION: Shows how to delete a member record using their ID and handle potential errors in the response.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-admin-api/README.md#2025-04-06_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TSGhostAdminAPI } from \"@ts-ghost/admin-api\";\n\nconst api = new TSGhostAdminAPI(\n  \"https://demo.ghost.io\",\n  \"1efedd9db174adee2d23d982:4b74dca0219bad629852191af326a45037346c2231240e0f7aec1f9371cc14e8\",\n  \"v5.0\"\n);\nconst result = await api.members.delete(\"edHks74hdKqhs34izzahd45\");\n\nif (!result.success) {\n  console.error(result.errors);\n  throw new Error(\"Failed to delete Member\");\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up environment variables for Ghost API\nDESCRIPTION: This snippet shows how to set up environment variables for the Ghost URL and Admin API key in a .env file.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/admin-api/quickstart/page.mdx#2025-04-06_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nGHOST_URL=\"https://myblog.com\"\nGHOST_ADMIN_API_KEY=\"1efedd9db174adee2d23d982:4b74dca0219bad629852191af326a45037346c2231240e0f7aec1f9371cc14e8\"\n```\n\n----------------------------------------\n\nTITLE: Deleting Records with Ghost API\nDESCRIPTION: Example of deleting records using the delete() method with record ID.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-core-api/README.md#2025-04-06_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nlet newPost = await composedAPI.edit(\"edHks74hdKqhs34izzahd45\", {\n  title: \"My new post\",\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Ghost Settings\nDESCRIPTION: Example showing how to fetch Ghost instance settings, which is a specific resource that cannot be queried like other resources.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-content-api/README.md#2025-04-06_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TSGhostContentAPI, type Post } from \"@ts-ghost/content-api\";\n\nlet url = \"https://demo.ghost.io\";\nlet key = \"22444f78447824223cefc48062\"; // Content API KEY\nconst api = new TSGhostContentAPI(url, key, \"v5.0\");\n\nlet result = await api.settings.fetch();\nif (result.success) {\n  const settings = result.data;\n  //     ^? type Settings {title: string; description: string; ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ghost API Environment Variables\nDESCRIPTION: Setting up environment variables for Ghost URL and Admin API key in a .env file. These variables are required for authenticating with the Ghost Admin API.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/admin-api/remix/page.mdx#2025-04-06_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nGHOST_URL=\"https://myblog.com\"\nGHOST_ADMIN_API_KEY=\"1efedd9db174adee2d23d982:4b74dca0219bad629852191af326a45037346c2231240e0f7aec1f9371cc14e8\"\n```\n\n----------------------------------------\n\nTITLE: Deleting Records with the delete Method in ts-ghost\nDESCRIPTION: Shows how to delete a record using the delete method. The method requires the ID of the record to delete, and returns a success indicator since Ghost API returns an empty response for deletions.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/core-api/page.mdx#2025-04-06_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nlet newPost = await composedAPI.edit(\"edHks74hdKqhs34izzahd45\", {\n  title: \"My new post\",\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Browse Fetch Response Type in TypeScript\nDESCRIPTION: Type definition for the response structure when using the browse.fetch() method. Includes success and error cases with pagination metadata.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-core-api/README.md#2025-04-06_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst result: {\n    success: true;\n    data: z.infer<typeof simplifiedSchema>[];\n    meta: {\n        pagination: {\n            pages: number;\n            limit: number;\n            page: number;\n            total: number;\n            prev: number | null;\n            next: number | null;\n        };\n    };\n} | {\n    success: false;\n    errors: {\n        message: string;\n        type: string;\n    }[];\n}\n```\n\n----------------------------------------\n\nTITLE: Understanding Delete Method Response Types in ts-ghost\nDESCRIPTION: Shows the type structure of the response from the delete method. The response is a discriminated union with either a simple success indicator or an error object with messages, as Ghost API returns an empty response for deletions.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/core-api/page.mdx#2025-04-06_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n// return from the `delete` method\nconst result: {\n    success: true;\n} | {\n    success: false;\n    errors: {\n        message: string;\n        type: string;\n    }[];\n}\n```\n\n----------------------------------------\n\nTITLE: Maintaining Type-Safety with 'satisfies' Operator in ts-ghost\nDESCRIPTION: This snippet shows how to pre-declare output fields with the 'satisfies' operator to maintain type-safety. The resulting type will only include the explicitly selected fields.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/admin-api/advanced-typescript/page.mdx#2025-04-06_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst outputFields = {\n  slug: true,\n  title: true,\n} satisfies { [k in keyof Post]?: true | undefined };\n\nlet test = api.posts.browse().fields(outputFields);\n```\n\n----------------------------------------\n\nTITLE: Using Type Satisfies for Ghost API Field Selection\nDESCRIPTION: TypeScript recipe demonstrating how to maintain type safety when pre-declaring fields to select using the satisfies operator.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-content-api/README.md#2025-04-06_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nconst outputFields = {\n  slug: true,\n  title: true,\n} satisfies { [k in keyof Post]?: true | undefined };\n\nlet test = api.posts.browse().fields(outputFields);\n```\n\n----------------------------------------\n\nTITLE: Checking API Result in TypeScript Ghost Admin API\nDESCRIPTION: This snippet shows how to check if the API result is a success or an error using the new 'success' property.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-admin-api/CHANGELOG.md#2025-04-06_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nif (result.success) {\n  // do something with result.data\n} else {\n  // do something with result.errors\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Uncontrolled String Inputs with BrowseParams Type Helper in ts-ghost\nDESCRIPTION: This example demonstrates using the BrowseParams type helper to handle uncontrolled string inputs for order and filter parameters. This approach enables runtime checking while avoiding TypeScript type errors.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/admin-api/advanced-typescript/page.mdx#2025-04-06_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { BrowseParams, Post } from \"@ts-ghost/admin-api\";\n\nconst uncontrolledOrderInput = async (formData: FormData) => {\n  const order = formData.get(\"order\");\n  const filter = formData.get(\"filter\");\n  const result = await api.posts\n    .browse({ order, filter } as BrowseParams<{ order: string; filter: string }, Post>)\n    .fetch();\n};\n```\n\n----------------------------------------\n\nTITLE: Type Casting for Dynamic Order and Filter Parameters\nDESCRIPTION: TypeScript recipe for handling user-provided order and filter strings in Ghost Content API queries using type helpers.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-content-api/README.md#2025-04-06_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { BrowseParams, Post } from \"@ts-ghost/content-api\";\n\nconst uncontrolledOrderInput = async (formData: FormData) => {\n  const order = formData.get(\"order\");\n  const filter = formData.get(\"filter\");\n  const result = await api.posts\n    .browse({ order, filter } as BrowseParams<{ order: string; filter: string }, Post>)\n    .fetch();\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Unknown Fields with Type Casting in TypeScript\nDESCRIPTION: Demonstrates how to handle unknown input fields using type casting with 'as' keyword. While this approach resolves compilation errors, it sacrifices type-safety as the Post type will contain all fields rather than just selected ones.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/content-api/advanced-typescript/page.mdx#2025-04-06_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst outputFields = fieldsKeys.reduce((acc, k) => {\n  acc[k as keyof Post] = true;\n  return acc;\n}, {} as { [k in keyof Post]?: true | undefined });\nconst result = await api.posts.browse().fields(outputFields).fetch();\n```\n\n----------------------------------------\n\nTITLE: Type-Safe Field Selection using satisfies Operator\nDESCRIPTION: Shows how to pre-declare output fields while maintaining type-safety using the 'satisfies' operator. This approach ensures the Post type only includes the explicitly selected fields.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/content-api/advanced-typescript/page.mdx#2025-04-06_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst outputFields = {\n  slug: true,\n  title: true,\n} satisfies { [k in keyof Post]?: true | undefined };\n\nlet test = api.posts.browse().fields(outputFields);\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Ghost API\nDESCRIPTION: Environment variable configuration for Ghost blog URL and admin API key.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-admin-api/README.md#2025-04-06_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nGHOST_URL=\"https://myblog.com\"\nGHOST_ADMIN_API_KEY=\"1efedd9db174adee2d23d982:4b74dca0219bad629852191af326a45037346c2231240e0f7aec1f9371cc14e8\"\n```\n\n----------------------------------------\n\nTITLE: Handling Unknown Inputs with Type Casting in ts-ghost\nDESCRIPTION: This snippet demonstrates how to use type casting with 'as' to handle unknown field inputs. However, this approach loses type-safety as the resulting Post type will contain all fields, not just the selected ones.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/admin-api/advanced-typescript/page.mdx#2025-04-06_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// `fieldsKeys` comes from outside\nconst outputFields = fieldsKeys.reduce((acc, k) => {\n  acc[k as keyof Post] = true;\n  return acc;\n}, {} as { [k in keyof Post]?: true | undefined });\nconst result = await api.posts.browse().fields(outputFields).fetch();\n```\n\n----------------------------------------\n\nTITLE: Fetch Options in TS-Ghost\nDESCRIPTION: Demonstrates how to use fetch options and NextJS-specific features for data fetching.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-admin-api/README.md#2025-04-06_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nlet query = await api.posts\n  .browse({\n    limit: 5,\n    order: \"title DESC\",\n  })\n  .fetch({\n    cache: \"no-cache\",\n  });\n```\n\n----------------------------------------\n\nTITLE: Handling Browse Query Results in Ghost Admin API\nDESCRIPTION: This snippet demonstrates how to handle the result of a browse query, including error handling and type checking.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/admin-api/browse/page.mdx#2025-04-06_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nlet result = await api.posts.browse().fetch();\nif (result.success) {\n  const posts = result.data;\n  //     ^? type Post[]\n} else {\n  // errors array of objects\n  console.log(result.errors.map((e) => e.message).join(\"\\n\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Browse Query Results in Ghost Admin API\nDESCRIPTION: This snippet demonstrates how to handle the result of a browse query, including error handling and type checking.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/admin-api/browse/page.mdx#2025-04-06_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nlet result = await api.posts.browse().fetch();\nif (result.success) {\n  const posts = result.data;\n  //     ^? type Post[]\n} else {\n  // errors array of objects\n  console.log(result.errors.map((e) => e.message).join(\"\\n\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Output Modifiers in TypeScript\nDESCRIPTION: Demonstrates how to combine multiple output modifiers (fields, formats) to customize the API response. This example selects specific fields and formats for a post.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/admin-api/output-modifiers/page.mdx#2025-04-06_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nlet result = await api.posts\n  .read({\n    slug: \"this-is-a-post-slug\",\n  })\n  .fields({\n    title: true,\n    slug: true,\n    plaintext: true,\n    html: true,\n  })\n  .formats({\n    plaintext: true,\n    html: true,\n  })\n  .fetch();\n```\n\n----------------------------------------\n\nTITLE: Setting up environment variables for Ghost API\nDESCRIPTION: Environment variables configuration for Ghost URL and Content API key in a .env file.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/content-api/nextjs/page.mdx#2025-04-06_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nGHOST_URL=\"https://myblog.com\"\nGHOST_CONTENT_API_KEY=\"e9b414c5d95a5436a647ff04ab\"\n```\n\n----------------------------------------\n\nTITLE: Filtering Posts with Tags in TS-Ghost Admin API\nDESCRIPTION: This example demonstrates how to use TS-Ghost Admin API to filter posts by tags and include authors and tags in the response. It shows the proper way to browse posts with a specific tag filter and handle the response.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/admin-api/migrating-from-ghost-sdk/page.mdx#2025-04-06_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TSGhostAdminAPI, type Post } from \"@ts-ghost/admin-api\";\n\nconst api = new TSGhostAdminAPI(env.GHOST_URL, env.GHOST_ADMIN_API_KEY, \"v5.0\");\n\nlet posts: Post[] = [];\nlet cursor = await api.posts\n  .browse({ filter: \"tags:hash-tag\" })\n  .include({ authors: true, tags: true })\n  .fetch();\nif (result.success) {\n  posts = result.data;\n}\nreturn posts\n```\n\n----------------------------------------\n\nTITLE: Querying Ghost Blog Posts with TypeScript\nDESCRIPTION: Example of using the Ghost Admin API to fetch blog posts with specific fields and formats.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-admin-api/README.md#2025-04-06_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TSGhostAdminAPI } from \"@ts-ghost/admin-api\";\n\nconst api = new TSGhostAdminAPI(\n  process.env.GHOST_URL || \"\",\n  process.env.GHOST_ADMIN_API_KEY || \"\",\n  \"v5.47.0\"\n);\n\nexport async function getBlogPosts() {\n  const response = await api.posts\n    .browse({\n      limit: 10,\n    })\n    .fields({\n      title: true,\n      slug: true,\n      id: true,\n      html: true,\n      plaintext: true,\n    })\n    .formats({\n      html: true,\n      plaintext: true,\n    })\n    .fetch();\n  if (!response.success) {\n    throw new Error(response.errors.join(\", \"));\n  }\n  return response.data;\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating from QueryBuilder to APIComposer in TypeScript\nDESCRIPTION: Demonstrates how to update existing code from using QueryBuilder to the new APIComposer, including limiting access to specific methods.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-core-api/CHANGELOG.md#2025-04-06_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { APIComposer } from \"@ts-ghost/core-api\";\n// ...\nreturn new APIComposer(\n  {\n    schema: adminPostsSchema,\n    identitySchema: slugOrIdSchema,\n    include: postsIncludeSchema,\n  },\n  api,\n).access([\"read\", \"browse\"]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Ghost CMS Environment Variables\nDESCRIPTION: This snippet demonstrates how to set up environment variables for Ghost CMS URL and API key in a Next.js project.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-admin-api/README.md#2025-04-06_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\nGHOST_URL=\"https://myblog.com\"\nGHOST_ADMIN_API_KEY=\"1efedd9db174adee2d23d982:4b74dca0219bad629852191af326a45037346c2231240e0f7aec1f9371cc14e8\"\n```\n\n----------------------------------------\n\nTITLE: Handling Response Types in Ghost Admin API\nDESCRIPTION: Shows the TypeScript discriminated union type that represents the response from a Ghost Admin API query. The response can be success or failure, with different properties available in each case.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-admin-api/README.md#2025-04-06_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst result: {\n    success: true;\n    data: Member; // Shape depends on resource + browse | read + output modifiers\n    // contains aditionnal metadata for browse queries\n} | {\n    success: false;\n    errors: {\n        message: string;\n        type: string;\n    }[];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring QueryBuilder with Identity Schema in TypeScript\nDESCRIPTION: Shows how to set up a QueryBuilder instance with custom schemas for the Ghost API, including an identity schema for read operations.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-core-api/CHANGELOG.md#2025-04-06_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { z } from \"zod\";\nimport { QueryBuilder, type ContentAPICredentials } from \"@ts-ghost/core-api\";\n\nconst api: ContentAPICredentials = {\n  url: \"https://ghost.org\",\n  key: \"7d2d15d7338526d43c2fadc47c\",\n  version: \"v5.0\",\n  resource: \"posts\",\n};\n\nconst simplifiedSchema = z.object({\n  title: z.string(),\n  slug: z.string(),\n  count: z.number().optional(),\n});\n\n// the \"identity\" schema is used to validate the inputs of the `read`method of the QueryBuilder\nconst identitySchema = z.union([\n  z.object({ slug: z.string() }),\n  z.object({ id: z.string() }),\n]);\n\nconst simplifiedIncludeSchema = z.object({\n  count: z.literal(true).optional(),\n});\n\nconst qb = new QueryBuilder(\n  {\n    schema: simplifiedSchema,\n    identitySchema: identitySchema,\n    include: simplifiedIncludeSchema,\n  },\n  api,\n);\n```\n\n----------------------------------------\n\nTITLE: Ordering Tags with Nested Properties\nDESCRIPTION: Example of ordering tags by post count and including additional filters and limits.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-content-api/README.md#2025-04-06_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\napi.tags\n.browse({\n  order: \"count.posts DESC\",\n  filter: \"visibility:public\",\n  limit: 3,\n})\n.include({ \"count.posts\": true })\n.fetch(),\n```\n\n----------------------------------------\n\nTITLE: Extending QueryBuilder for Custom Ghost API Resources in TypeScript\nDESCRIPTION: Demonstrates how to extend the QueryBuilder class to create a custom query builder for specific Ghost API resources, such as members.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-core-api/CHANGELOG.md#2025-04-06_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { z } from \"zod\";\nimport { adminMembersSchema, QueryBuilder } from \"@ts-ghost/core-api\";\n\nconst membersIncludeSchema = z.object({});\nconst queryIdentitySchema = z.object({\n  id: z.string(),\n});\nexport class MemberQueryBuilder<\n  Shape extends typeof adminMembersSchema.shape,\n  Identity extends typeof queryIdentitySchema,\n  IncludeShape extends typeof membersIncludeSchema.shape,\n> extends QueryBuilder<Shape, Identity, IncludeShape> {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Query Results with TypeScript\nDESCRIPTION: Shows the typical workflow for handling query results with proper TypeScript type checking, including error handling and accessing the returned data.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-admin-api/README.md#2025-04-06_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nlet result = await api.posts.browse().fetch();\nif (result.success) {\n  const posts = result.data;\n  //     ^? type Post[]\n} else {\n  // errors array of objects\n  console.log(result.errors.map((e) => e.message).join(\"\\n\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Updating API Result Structure in TypeScript Ghost Admin API\nDESCRIPTION: This snippet demonstrates the change in the API result structure from using a 'status' key to a 'success' key for discriminating between successful and error responses.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-admin-api/CHANGELOG.md#2025-04-06_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// example for the browse query (the data is an array of objects)\nconst result:\n  | {\n      success: true;\n      data: Post[];\n      meta: {\n        pagination: {\n          pages: number;\n          limit: number;\n          page: number;\n          total: number;\n          prev: number | null;\n          next: number | null;\n        };\n      };\n    }\n  | {\n      success: false;\n      errors: {\n        message: string;\n        type: string;\n      }[];\n    };\n```\n\n----------------------------------------\n\nTITLE: Full Export Command with Host and API Key in Ghost Blog Buster CLI\nDESCRIPTION: This example shows a complete export command including the host URL and Content API key. It exports posts to a specified output folder.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/ghost-blog-buster/usage/page.mdx#2025-04-06_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nghost-blog-buster export posts --host https://astro-starter.digitalpress.blog --key e9b414c5d95a5436a647ff04ab --output ./posts\n```\n\n----------------------------------------\n\nTITLE: Output Modification in TS-Ghost\nDESCRIPTION: Shows how to modify API output using field selection, includes, and format specifications.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-admin-api/README.md#2025-04-06_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nlet result = await api.posts\n  .read({\n    slug: \"typescript-is-cool\",\n  })\n  .fields({\n    id: true,\n    slug: true,\n    title: true,\n  })\n  .fetch();\n```\n\n----------------------------------------\n\nTITLE: Type Definition Example for Content API Response\nDESCRIPTION: Example showing the updated response type structure with success/error discrimination\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-content-api/CHANGELOG.md#2025-04-06_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst result:\n  | {\n      success: true;\n      data: Post[];\n      meta: {\n        pagination: {\n          pages: number;\n          limit: number;\n          page: number;\n          total: number;\n          prev: number | null;\n          next: number | null;\n        };\n      };\n    }\n  | {\n      success: false;\n      errors: {\n        message: string;\n        type: string;\n      }[];\n    };\n```\n\n----------------------------------------\n\nTITLE: Installing Ghost Blog Buster CLI globally using npm\nDESCRIPTION: This command installs the Ghost Blog Buster CLI tool globally on the system, making it available for use in any terminal session.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/ghost-blog-buster/installation/page.mdx#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @ts-ghost/ghost-blog-buster\n```\n\n----------------------------------------\n\nTITLE: Response Error Handling Example\nDESCRIPTION: Example showing how to handle success/error states in the API response\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-content-api/CHANGELOG.md#2025-04-06_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nif (result.success) {\n  // do something with result.data\n} else {\n  // do something with result.errors\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Records in TS-Ghost\nDESCRIPTION: Shows how to create new records using the add method with and without options.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-admin-api/README.md#2025-04-06_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nconst memberAdd = await api.members.add(\n  { name: \"Philippe\", email: \"philippe@ts-ghost.com\" },\n  { send_email: false }\n);\n```\n\n----------------------------------------\n\nTITLE: Member Management API Example\nDESCRIPTION: Example demonstrating member creation and update operations using the admin API\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-content-api/CHANGELOG.md#2025-04-06_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst createNewMember = await api.members.add(\n  { email: \"abcdefgh@msn.com\" },\n  { send_email: true },\n);\nassert(createNewMember.success);\nconst newMember = createNewMember.data;\n// id => 6438cc365a8fdb00013a8783\nconst updateMember = await api.members.edit(\"6438cc365a8fdb00013a8783\", {\n  name: \"FooBarBaz\",\n  note: \"Hello from ts-ghost\",\n  labels: [{ name: \"ts-ghost\" }],\n  geolocation: \"Reunion\",\n  stripe_customer_id: \"aiuhdiuahzdiuhaizudhaiuzdhiuazd\",\n});\nif (updateMember.success) {\n  const member = updateMember.data;\n  console.log(\"labels\", member.labels);\n}\n```\n\n----------------------------------------\n\nTITLE: Editing Members with TSGhost Admin API\nDESCRIPTION: Demonstrates how to edit an existing member record by adding a Stripe customer ID while controlling email notifications. Shows initialization of the API client and handling of the edit operation.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-admin-api/README.md#2025-04-06_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TSGhostAdminAPI } from \"@ts-ghost/admin-api\";\n\nconst api = new TSGhostAdminAPI(\n  \"https://demo.ghost.io\",\n  \"1efedd9db174adee2d23d982:4b74dca0219bad629852191af326a45037346c2231240e0f7aec1f9371cc14e8\",\n  \"v5.0\"\n);\n\nconst membersEdit = await api.members.edit(\n  \"edHks74hdKqhs34izzahd45\",\n  { stripe_customer_id: \"cus_123456789\" },\n  { send_email: false }\n);\n```\n\n----------------------------------------\n\nTITLE: Updating APIVersion TypeScript Definition\nDESCRIPTION: Updates the TypeScript definition of APIVersion to accept only 'v5.x' versions and adds regex validation to the corresponding Zod schema.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-content-api/CHANGELOG.md#2025-04-06_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nAPIVersion = 'v5.x';\n```\n\n----------------------------------------\n\nTITLE: Querying Posts with Old API\nDESCRIPTION: Demonstrates how to query posts using the old API version, including input parameters and output options.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-content-api/CHANGELOG.md#2025-04-06_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await api.posts\n  .browse({\n    input: {\n      limit: 5,\n      order: \"title DESC\",\n    },\n    output: {\n      include: {\n        authors: true,\n      },\n    },\n  })\n  .fetch();\n\nconst onePost = await api.posts\n  .read({\n    input: {\n      slug: \"test-post\",\n    },\n    output: {\n      fields: {\n        slug: true,\n        html: true,\n      },\n    },\n  })\n  .fetch();\n```\n\n----------------------------------------\n\nTITLE: Creating New Members with TSGhost Admin API\nDESCRIPTION: Demonstrates creating a new member with basic information and later updating them with subscription details.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-admin-api/README.md#2025-04-06_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TSGhostAdminAPI } from \"@ts-ghost/admin-api\";\n\nconst api = new TSGhostAdminAPI(env.GHOST_URL, env.GHOST_ADMIN_API_KEY, \"v5.0\");\n\nconst membersAdd = await api.members.add(\n  { name: \"Philippe\", email: \"philippe@ts-ghost.com\" },\n  { send_email: false }\n);\n```\n\n----------------------------------------\n\nTITLE: TypeScript Member Creation with Admin API\nDESCRIPTION: Example showing how to create and update a member using the Admin API. The code demonstrates adding a new member with an email address and then updating that member with additional details such as name, notes, labels, geolocation, and Stripe customer ID.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/apps/ghost-blog-buster/CHANGELOG.md#2025-04-06_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst createNewMember = await api.members.add(\n  { email: \"abcdefgh@msn.com\" },\n  { send_email: true },\n);\nassert(createNewMember.success);\nconst newMember = createNewMember.data;\n// id => 6438cc365a8fdb00013a8783\nconst updateMember = await api.members.edit(\"6438cc365a8fdb00013a8783\", {\n  name: \"FooBarBaz\",\n  note: \"Hello from ts-ghost\",\n  labels: [{ name: \"ts-ghost\" }],\n  geolocation: \"Reunion\",\n  stripe_customer_id: \"aiuhdiuahzdiuhaizudhaiuzdhiuazd\",\n});\nif (updateMember.success) {\n  const member = updateMember.data;\n  console.log(\"labels\", member.labels);\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Active Paid Tiers\nDESCRIPTION: Shows how to retrieve all active paid tiers with their benefits and pricing information using filters and includes.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-admin-api/README.md#2025-04-06_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TSGhostAdminAPI } from \"@ts-ghost/admin-api\";\n\nconst api = new TSGhostAdminAPI(env.GHOST_URL, env.GHOST_ADMIN_API_KEY, \"v5.0\");\nconst tiers = await api.tiers\n  .browse({\n    filter: \"active:true+type:paid\",\n  })\n  .include({ benefits: true, monthly_price: true, yearly_price: true })\n  .fetch();\n\nif (!tiers.success) {\n  throw new Error(tiers.errors.join(\", \"));\n}\nconsole.log(tiers);\n```\n\n----------------------------------------\n\nTITLE: Handling Unknown Field Selection with Type Casting\nDESCRIPTION: TypeScript recipe for handling dynamic field selection in Ghost Content API queries while maintaining some type safety.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-content-api/README.md#2025-04-06_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\n// `fieldsKeys` comes from outside\nconst outputFields = fieldsKeys.reduce((acc, k) => {\n  acc[k as keyof Post] = true;\n  return acc;\n}, {} as { [k in keyof Post]?: true | undefined });\nconst result = await api.posts.browse().fields(outputFields).fetch();\n```\n\n----------------------------------------\n\nTITLE: Fetching Member Subscriptions\nDESCRIPTION: Shows how to retrieve and filter active subscriptions for a specific member.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-admin-api/README.md#2025-04-06_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TSGhostAdminAPI } from \"@ts-ghost/admin-api\";\n\nexport const getMemberActiveSubscriptions = async (memberId: string) => {\n  const api = new TSGhostAdminAPI(env.GHOST_URL, env.GHOST_ADMIN_API_KEY, \"v5.0\");\n  const subscriptions = await api.members.read({ id: memberId }).fields({ subscriptions: true }).fetch();\n  if (!subscriptions.success) {\n    throw new Error(subscriptions.errors.join(\", \"));\n  }\n  return subscriptions.data.subscriptions.filter((sub) => sub.status === \"active\");\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Posts with Collision Handling\nDESCRIPTION: Demonstrates how to properly update posts while avoiding UPDATE_COLLISION errors by including the updated_at field.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-admin-api/README.md#2025-04-06_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TSGhostAdminAPI } from \"@ts-ghost/admin-api\";\n\nconst api = new TSGhostAdminAPI(env.GHOST_URL, env.GHOST_ADMIN_API_KEY, \"v5.0\");\n\nconst result = await api.posts\n  .read({\n    slug: \"coming-soon\",\n  })\n  .fetch();\n\nif (!result.success) {\n  throw new Error(result.errors.join(\", \"));\n}\nconst post = result.data;\n\nconst postEditResult = await api.posts.edit(post.id, {\n  custom_excerpt: \"Modified excerpt from ghost\",\n  updated_at: new Date(post.updated_at || \"\"),\n});\n```\n\n----------------------------------------\n\nTITLE: Ordering Query Results with Ghost Admin API\nDESCRIPTION: Shows how to order query results using the order parameter, with examples of sorting posts by title and using nested properties for more complex ordering.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-admin-api/README.md#2025-04-06_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nlet query = await api.posts\n  .browse({\n    order: \"title DESC\",\n  })\n  .fetch();\n```\n\n----------------------------------------\n\nTITLE: Fetching Ghost Settings\nDESCRIPTION: Demonstrates how to fetch and handle Ghost instance settings using the Admin API.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-admin-api/README.md#2025-04-06_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TSGhostAdminAPI, type Post } from \"@ts-ghost/admin-api\";\n\nlet url = \"https://demo.ghost.io\";\nlet key = \"1efedd9db174adee2d23d982:4b74dca0219bad629852191af326a45037346c2231240e0f7aec1f9371cc14e8\"; // Admin API KEY\nconst api = new TSGhostAdminAPI(url, key, \"v5.0\");\n\nlet result = await api.settings.fetch();\nif (result.success) {\n  const settings = result.data;\n  //     ^? type Settings {title: string; description: string; ...\n}\n```\n\n----------------------------------------\n\nTITLE: Ordering by Nested Properties in Ghost Admin API\nDESCRIPTION: Demonstrates using nested properties in ordering, specifically for fetching tags ordered by their post count in descending order.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-admin-api/README.md#2025-04-06_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\napi.tags\n.browse({\n  order: \"count.posts DESC\",\n  filter: \"visibility:public\",\n  limit: 3,\n})\n.include({ \"count.posts\": true })\n.fetch(),\n```\n\n----------------------------------------\n\nTITLE: Using Fetch Options with ts-ghost API Requests\nDESCRIPTION: Demonstrates how to pass options to the fetch and paginate methods. The options object is the standard RequestInit object from the fetch API, which can be useful when using NextJS augmented fetch.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/core-api/page.mdx#2025-04-06_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nlet result = await api.posts.read({ slug: \"typescript-is-cool\" }).fetch({ cache: \"no-store\" });\n```\n\n----------------------------------------\n\nTITLE: Fetching Ghost CMS Data in Remix Route Loader\nDESCRIPTION: This snippet demonstrates how to use TSGhostAdminAPI in a Remix route loader to fetch site information and posts from a Ghost CMS. It initializes the API client, makes parallel requests, and handles errors.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-admin-api/README.md#2025-04-06_snippet_27\n\nLANGUAGE: tsx\nCODE:\n```\nimport { json, type LoaderArgs, type V2_MetaFunction } from \"@remix-run/node\";\nimport { Link, useLoaderData } from \"@remix-run/react\";\nimport { TSGhostAdminAPI } from \"@ts-ghost/admin-api\";\n\nexport const meta: V2_MetaFunction = () => {\n  return [{ title: \"New Remix App\" }];\n};\n\nexport async function loader({ request }: LoaderArgs) {\n  const api = new TSGhostAdminAPI(\n    process.env.GHOST_URL || \"\",\n    process.env.GHOST_ADMIN_API_KEY || \"\",\n    \"v5.0\"\n  );\n  const [site, posts] = await Promise.all([api.site.fetch(), api.posts.browse().fetch()]);\n\n  if (!site.success) {\n    throw new Error(site.errors.join(\", \"));\n  }\n  if (!posts.success) {\n    throw new Error(posts.errors.join(\", \"));\n  }\n  return json({ site: site.data, posts: posts.data });\n}\n\nexport default function Index() {\n  const { site, posts } = useLoaderData<typeof loader>();\n\n  return (\n    <div style={{ fontFamily: \"system-ui, sans-serif\", lineHeight: \"1.4\" }}>\n      <h1>This is a list of posts for {site.title}:</h1>\n      <ul>\n        {posts.map((post) => (\n          <li key={post.slug}>\n            <Link to={`/${post.slug}`}>{post.title}</Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing TSGhostAdminAPI in Next.js\nDESCRIPTION: This snippet shows how to install the TSGhostAdminAPI package using pnpm in a Next.js project.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-admin-api/README.md#2025-04-06_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @ts-ghost/admin-api\n```\n\n----------------------------------------\n\nTITLE: Handling Unknown Order/Filter Strings in TSGhostAdminAPI\nDESCRIPTION: This snippet demonstrates how to handle unknown order or filter strings in TSGhostAdminAPI using TypeScript type helpers and the 'as' keyword for type assertion.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-admin-api/README.md#2025-04-06_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { BrowseParams, Post } from \"@ts-ghost/admin-api\";\n\nconst uncontrolledOrderInput = async (formData: FormData) => {\n  const order = formData.get(\"order\");\n  const filter = formData.get(\"filter\");\n  const result = await api.posts\n    .browse({ order, filter } as BrowseParams<{ order: string; filter: string }, Post>)\n    .fetch();\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing TSGhostAdminAPI in Next.js\nDESCRIPTION: This snippet shows how to create a file to instantiate the TSGhostAdminAPI client in a Next.js application using environment variables.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-admin-api/README.md#2025-04-06_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TSGhostAdminAPI } from \"@ts-ghost/admin-api\";\n\nexport const api = new TSGhostAdminAPI(\n  process.env.GHOST_URL || \"\",\n  process.env.GHOST_ADMIN_API_KEY || \"\",\n  \"v5.0\"\n);\n```\n\n----------------------------------------\n\nTITLE: Setting up Environment Variables for Ghost\nDESCRIPTION: Environment configuration for connecting to Ghost CMS with the URL and Admin API key.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/admin-api/nextjs/page.mdx#2025-04-06_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nGHOST_URL=\"https://myblog.com\"\nGHOST_ADMIN_API_KEY=\"1efedd9db174adee2d23d982:4b74dca0219bad629852191af326a45037346c2231240e0f7aec1f9371cc14e8\"\n```\n\n----------------------------------------\n\nTITLE: Creating and Updating Members in TypeScript Ghost Admin API\nDESCRIPTION: This snippet demonstrates how to use the new 'add' and 'edit' methods for the 'members' resource in the Ghost Admin API.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-admin-api/CHANGELOG.md#2025-04-06_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst createNewMember = await api.members.add(\n  { email: \"abcdefgh@msn.com\" },\n  { send_email: true },\n);\nassert(createNewMember.success);\nconst newMember = createNewMember.data;\n// id => 6438cc365a8fdb00013a8783\nconst updateMember = await api.members.edit(\"6438cc365a8fdb00013a8783\", {\n  name: \"FooBarBaz\",\n  note: \"Hello from ts-ghost\",\n  labels: [{ name: \"ts-ghost\" }],\n  geolocation: \"Reunion\",\n  stripe_customer_id: \"aiuhdiuahzdiuhaizudhaiuzdhiuazd\",\n});\nif (updateMember.success) {\n  const member = updateMember.data;\n  console.log(\"labels\", member.labels);\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating Ghost Content API in TypeScript\nDESCRIPTION: Creation of a Ghost Content API instance using environment variables in a TypeScript file.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/content-api/nextjs/page.mdx#2025-04-06_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TSGhostContentAPI } from \"@ts-ghost/content-api\";\n\nexport const api = new TSGhostContentAPI(\n  process.env.GHOST_URL || \"\",\n  process.env.GHOST_CONTENT_API_KEY || \"\",\n  \"v5.0\"\n);\n```\n\n----------------------------------------\n\nTITLE: Updated API Query Structure in TypeScript Ghost Admin API\nDESCRIPTION: This snippet shows the new structure for making API queries, where input parameters are passed directly to the resource method, and output options are chained using methods like 'include' and 'fields'.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-admin-api/CHANGELOG.md#2025-04-06_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await api.posts\n  .browse({\n    limit: 5,\n    order: \"title DESC\",\n  })\n  .include({\n    authors: true,\n  })\n  .fetch();\n\nconst onePost = await api.posts\n  .read({\n    slug: \"test-post\",\n  })\n  .fields({\n    slug: true,\n    html: true,\n  })\n  .fetch();\n```\n\n----------------------------------------\n\nTITLE: Installing Ghost Content API Package\nDESCRIPTION: Command to install the @ts-ghost/content-api package using pnpm package manager.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/content-api/remix/page.mdx#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @ts-ghost/content-api\n```\n\n----------------------------------------\n\nTITLE: Configuring Ghost API Environment Variables\nDESCRIPTION: Environment variable setup for Ghost blog URL and Content API key.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/content-api/remix/page.mdx#2025-04-06_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nGHOST_URL=\"https://myblog.com\"\nGHOST_CONTENT_API_KEY=\"e9b414c5d95a5436a647ff04ab\"\n```\n\n----------------------------------------\n\nTITLE: Field Selection in Ghost Content API Queries\nDESCRIPTION: Example of selecting specific fields (id, slug, title) from posts using the fields method.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-content-api/README.md#2025-04-06_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nlet query = api.posts\n  .browse({\n    limit: 5,\n    order: \"title DESC\",\n  })\n  .fields({\n    id: true,\n    slug: true,\n    title: true,\n  });\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript Ghost Admin API Client\nDESCRIPTION: Command to install the @ts-ghost/admin-api package using pnpm package manager.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-admin-api/README.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @ts-ghost/admin-api\n```\n\n----------------------------------------\n\nTITLE: Installing TS-Ghost Content API Package\nDESCRIPTION: Command to install the TS-Ghost Content API package with pnpm package manager.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-content-api/README.md#2025-04-06_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @ts-ghost/content-api\n```\n\n----------------------------------------\n\nTITLE: Installing the Ghost Content API Client\nDESCRIPTION: Command to install the @ts-ghost/content-api package using pnpm package manager.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-content-api/README.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @ts-ghost/content-api\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Ghost API\nDESCRIPTION: Example of environment variables needed for the Ghost Content API client connection.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-content-api/README.md#2025-04-06_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nGHOST_URL=\"https://myblog.com\"\nGHOST_CONTENT_API_KEY=\"e9b414c5d95a5436a647ff04ab\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Ghost API Environment Variables\nDESCRIPTION: Environment variables configuration for Ghost URL and Content API key.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-content-api/README.md#2025-04-06_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nGHOST_URL=\"https://myblog.com\"\nGHOST_CONTENT_API_KEY=\"e9b414c5d95a5436a647ff04ab\"\n```\n\n----------------------------------------\n\nTITLE: Instantiating the Ghost Content API Client\nDESCRIPTION: Basic example of initializing the TSGhostContentAPI client with a demo Ghost blog URL, API key, and version.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-content-api/README.md#2025-04-06_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TSGhostContentAPI } from \"@ts-ghost/content-api\";\n\nconst api = new TSGhostContentAPI(\"https://demo.ghost.io\", \"22444f78447824223cefc48062\", \"v5.0\");\n```\n\n----------------------------------------\n\nTITLE: Remix Route Loader with Ghost Content API\nDESCRIPTION: Complete example of implementing a Remix route loader that fetches Ghost settings and posts, handles errors, and passes data to the component.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-content-api/README.md#2025-04-06_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { json, type LoaderArgs, type V2_MetaFunction } from \"@remix-run/node\";\nimport { Link, useLoaderData } from \"@remix-run/react\";\nimport { TSGhostContentAPI } from \"@ts-ghost/content-api\";\n\nexport const meta: V2_MetaFunction = () => {\n  return [{ title: \"New Remix App\" }];\n};\n\nexport async function loader({ request }: LoaderArgs) {\n  const api = new TSGhostContentAPI(\n    process.env.GHOST_URL || \"\",\n    process.env.GHOST_CONTENT_API_KEY || \"\",\n    \"v5.0\"\n  );\n  const [settings, posts] = await Promise.all([api.settings.fetch(), api.posts.browse().fetch()]);\n\n  if (!settings.success) {\n    throw new Error(settings.errors.join(\", \"));\n  }\n  if (!posts.success) {\n    throw new Error(posts.errors.join(\", \"));\n  }\n  return json({ settings: settings.data, posts: posts.data });\n}\n\nexport default function Index() {\n  const { settings, posts } = useLoaderData<typeof loader>();\n\n  return (\n    <div style={{ fontFamily: \"system-ui, sans-serif\", lineHeight: \"1.4\" }}>\n      <h1>This is a list of posts for {settings.title}:</h1>\n      <ul>\n        {posts.map((post) => (\n          <li key={post.slug}>\n            <Link to={`/${post.slug}`}>{post.title}</Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @ts-ghost/core-api Package\nDESCRIPTION: Command to install the @ts-ghost/core-api package using pnpm package manager.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-core-api/README.md#2025-04-06_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm i @ts-ghost/core-api\n```\n\n----------------------------------------\n\nTITLE: Manually Instantiating a BrowseFetcher\nDESCRIPTION: Example of manually creating a BrowseFetcher instance, although typically this would be done through the APIComposer. Shows the required parameters including schema, output schema, and API configuration.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-core-api/README.md#2025-04-06_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BrowseFetcher } from \"@ts-ghost/core-api\";\n\n// Example of instantiating a Fetcher, even though you will probably not do it\nconst browseFetcher = new BrowseFetcher(\n  {\n    schema: simplifiedSchema,\n    output: simplifiedSchema,\n    include: simplifiedIncludeSchema,\n  },\n  {\n    browseParams: {\n      limit: 1,\n    },\n  },\n  api\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Ghost Blog Buster CLI using npx\nDESCRIPTION: Command to run the Ghost Blog Buster CLI tool directly using npx without installation.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/README.md#2025-04-06_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx @ts-ghost/ghost-blog-buster\n```\n\n----------------------------------------\n\nTITLE: Manually Instantiating a BrowseFetcher\nDESCRIPTION: Example of manually creating a BrowseFetcher instance, although typically this would be done through the APIComposer. Shows the required parameters including schema, output schema, and API configuration.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-core-api/README.md#2025-04-06_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BrowseFetcher } from \"@ts-ghost/core-api\";\n\n// Example of instantiating a Fetcher, even though you will probably not do it\nconst browseFetcher = new BrowseFetcher(\n  {\n    schema: simplifiedSchema,\n    output: simplifiedSchema,\n    include: simplifiedIncludeSchema,\n  },\n  {\n    browseParams: {\n      limit: 1,\n    },\n  },\n  api\n);\n```\n\n----------------------------------------\n\nTITLE: Installing TS Ghost Admin API package\nDESCRIPTION: Command to install the TypeScript Ghost Admin API package in your project using npm.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/README.md#2025-04-06_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @ts-ghost/admin-api\n```\n\n----------------------------------------\n\nTITLE: Implementing Browse Paginate Response Type in TypeScript\nDESCRIPTION: Type definition for the response structure when using the browse.paginate() method. Includes pagination metadata and next page fetcher.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-core-api/README.md#2025-04-06_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst result: {\n    success: true;\n    data: z.infer<typeof simplifiedSchema>[];\n    meta: {\n        pagination: {\n            pages: number;\n            limit: number;\n            page: number;\n            total: number;\n            prev: number | null;\n            next: number | null;\n        };\n    };\n    next: BrowseFetcher | undefined;\n} | {\n    success: false;\n    errors: {\n        message: string;\n        type: string;\n    }[];\n    next: undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Browse Paginate Response Type in TypeScript\nDESCRIPTION: Type definition for the response structure when using the browse.paginate() method. Includes pagination metadata and next page fetcher.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-core-api/README.md#2025-04-06_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst result: {\n    success: true;\n    data: z.infer<typeof simplifiedSchema>[];\n    meta: {\n        pagination: {\n            pages: number;\n            limit: number;\n            page: number;\n            total: number;\n            prev: number | null;\n            next: number | null;\n        };\n    };\n    next: BrowseFetcher | undefined;\n} | {\n    success: false;\n    errors: {\n        message: string;\n        type: string;\n    }[];\n    next: undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Installation Commands\nDESCRIPTION: Commands to install and run Ghost Blog Buster using npx or global installation via npm.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/apps/ghost-blog-buster/README.md#2025-04-06_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx @ts-ghost/ghost-blog-buster\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -g @ts-ghost/ghost-blog-buster\n```\n\nLANGUAGE: sh\nCODE:\n```\nghost-blog-buster\n```\n\n----------------------------------------\n\nTITLE: Export Posts Command with Content API\nDESCRIPTION: Commands to export posts using the Content API with options for host URL, API key, and output directory.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/apps/ghost-blog-buster/README.md#2025-04-06_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nghost-blog-buster export posts --output ./posts\n```\n\nLANGUAGE: sh\nCODE:\n```\nghost-blog-buster export posts --host https://astro-starter.digitalpress.blog --key e9b414c5d95a5436a647ff04ab --output ./posts\n```\n\n----------------------------------------\n\nTITLE: Specifying Content Formats in Ghost API Requests\nDESCRIPTION: Example of using the formats() method to request specific content formats (html, plaintext) in the API response.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-core-api/README.md#2025-04-06_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst bf = new BrowseFetcher(\n  { schema: simplifiedSchema, output: simplifiedSchema, include: simplifiedIncludeSchema },\n  {},\n  api\n);\nlet result = await bf\n  .formats({\n    html: true,\n    plaintext: true,\n  })\n  .fetch();\n```\n\n----------------------------------------\n\nTITLE: Help Command\nDESCRIPTION: Command to display help information for the CLI tool.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/apps/ghost-blog-buster/README.md#2025-04-06_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nghost-blog-buster --help\n```\n\n----------------------------------------\n\nTITLE: Chaining Multiple Query Modifiers in Ghost API\nDESCRIPTION: Example of chaining multiple methods (fields, formats, include) to customize the API response.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-core-api/README.md#2025-04-06_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst bf = new BrowseFetcher(\n  { schema: simplifiedSchema, output: simplifiedSchema, include: simplifiedIncludeSchema },\n  {},\n  api\n);\nlet result = await bf\n  .fields({\n    slug: true,\n    title: true,\n    html: true,\n    plaintext: true,\n    count: true,\n  })\n  .formats({\n    html: true,\n    plaintext: true,\n  })\n  .include({\n    count: true,\n  })\n  .fetch();\n```\n\n----------------------------------------\n\nTITLE: Export Content with Admin API\nDESCRIPTION: Commands to export content using the Admin API with full authentication and output options.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/apps/ghost-blog-buster/README.md#2025-04-06_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nghost-blog-buster export-admin posts --output ./posts\n```\n\nLANGUAGE: sh\nCODE:\n```\nghost-blog-buster export-admin posts --host https://astro-starter.digitalpress.blog --key 1efedd9db174adee2d23d982:4b74dca0219bad629852191af326a45037346c2231240e0f7aec1f9371cc14e8 --output ./posts\n```\n\n----------------------------------------\n\nTITLE: Piping Commands Example\nDESCRIPTION: Example of using pipe operators to redirect output to files.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/apps/ghost-blog-buster/README.md#2025-04-06_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nghost-blog-buster export authors --host https://astro-starter.digitalpress.blog --key e9b414c5d95a5436a647ff04ab > authors.json\n```\n\n----------------------------------------\n\nTITLE: Editing Records with Ghost API\nDESCRIPTION: Example of editing existing records using the edit() method with record ID.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-core-api/README.md#2025-04-06_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nlet newPost = await composedAPI.edit(\"edHks74hdKqhs34izzahd45\", {\n  title: \"My new post\",\n});\n```\n\n----------------------------------------\n\nTITLE: Running Ghost Blog Buster CLI using npx without installation\nDESCRIPTION: This command uses npx to run the Ghost Blog Buster tool directly without installing it globally, providing a quick way to use the tool on-demand.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/ghost-blog-buster/installation/page.mdx#2025-04-06_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx @ts-ghost/ghost-blog-buster\n```\n\n----------------------------------------\n\nTITLE: Creating an HTTPClientFactory for API Composition in TypeScript\nDESCRIPTION: Code example showing the interface and implementation of HTTPClientFactory, which is required for API Composer since version 6.0.0. The factory pattern resolves lifecycle issues with the HTTPClient.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-core-api/CHANGELOG.md#2025-04-06_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type HTTPClientOptions = {\n  key: string;\n  version: APICredentials[\"version\"];\n  url: APICredentials[\"url\"];\n  endpoint: \"content\" | \"admin\";\n};\n\nexport interface IHTTPClientFactory {\n  create(config: HTTPClientOptions): HTTPClient;\n}\n\nexport class HTTPClientFactory implements IHTTPClientFactory {\n  constructor(private config: HTTPClientOptions) {}\n\n  public create() {\n    return new HTTPClient(this.config);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Posts with Content API in Ghost Blog Buster CLI\nDESCRIPTION: This command exports all posts to a specified output folder using the Content API. It demonstrates the basic usage of the 'export' command with the 'posts' resource.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/ghost-blog-buster/usage/page.mdx#2025-04-06_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nghost-blog-buster export posts --output ./posts\n```\n\n----------------------------------------\n\nTITLE: Displaying Help in Ghost Blog Buster CLI\nDESCRIPTION: This command shows how to display the help information for the Ghost Blog Buster CLI.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/ghost-blog-buster/usage/page.mdx#2025-04-06_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nghost-blog-buster --help\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateOptionsSchema in API Composer for Ghost Admin API\nDESCRIPTION: Example showing how to define updateOptionsSchema in the APIComposer to specify query parameters available only for update operations in the Ghost Admin API.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-core-api/CHANGELOG.md#2025-04-06_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nreturn new APIComposer(\n  \"posts\",\n  {\n    schema: adminPostsSchema,\n    identitySchema: slugOrIdSchema,\n    include: postsIncludeSchema,\n    createSchema: adminPostsCreateSchema,\n    updateSchema: adminPostsUpdateSchema,\n    updateOptionsSchema: z.object({\n      newsletter: z.string().optional(),\n      email_segment: z.string().optional(),\n      force_rerender: z.boolean().optional(),\n      save_revision: z.boolean().optional(),\n      convert_to_lexical: z.boolean().optional(),\n      source: z.literal(\"html\").optional(),\n    }),\n    createOptionsSchema: z.object({\n      source: z.literal(\"html\").optional(),\n    }),\n  },\n  this.httpClient,\n).access([\"browse\", \"read\", \"add\", \"edit\", \"delete\"]);\n```\n\n----------------------------------------\n\nTITLE: Exporting Posts with Admin API in Ghost Blog Buster CLI\nDESCRIPTION: This command demonstrates how to export posts using the Admin API, which is useful for exporting content that includes both free and paid content.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/ghost-blog-buster/usage/page.mdx#2025-04-06_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nghost-blog-buster export-admin posts --output ./posts\n```\n\n----------------------------------------\n\nTITLE: Initializing APIComposer for Ghost Content API in TypeScript\nDESCRIPTION: Demonstrates how to set up an APIComposer instance with custom schemas for the Ghost Content API, including simplified schemas for posts and include options.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-core-api/CHANGELOG.md#2025-04-06_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { APIComposer, type ContentAPICredentials } from \"@ts-ghost/core-api\";\n\nconst api: ContentAPICredentials = {\n  url: \"https://ghost.org\",\n  key: \"1234\",\n  version: \"v5.0\",\n  resource: \"posts\",\n  endpoint: \"content\",\n};\n\nconst simplifiedSchema = z.object({\n  id: z.string(),\n  foo: z.string(),\n  bar: z.string(),\n  baz: z.boolean().optional(),\n  count: z.number().optional(),\n});\n\nconst simplifiedIncludeSchema = z.object({\n  count: z.literal(true).optional(),\n  \"count.posts\": z.literal(true).optional(),\n});\n\nconst identitySchema = z.union([\n  z.object({ id: z.string() }),\n  z.object({ slug: z.string() }),\n  z.object({ email: z.string() }),\n]);\n\nconst createSchema = z.object({\n  foo: z.string(),\n  bar: z.string().nullish(),\n  baz: z.boolean().nullish(),\n});\n\nconst composer = new APIComposer(\n  {\n    schema: simplifiedSchema,\n    identitySchema: identitySchema,\n    include: simplifiedIncludeSchema,\n    // optional\n    createSchema,\n    // optional\n    createOptionsSchema: z.object({\n      option_1: z.boolean(),\n    }),\n  },\n  api,\n);\n\nconst res = await composer\n  .browse({\n    limit: 10,\n    page: 2,\n  })\n  .fetch();\n```\n\n----------------------------------------\n\nTITLE: Starting Remix Development Server\nDESCRIPTION: Command to start the Remix application in development mode. This launches the app with hot reloading enabled, automatically rebuilding assets when files are changed.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/examples/remix/README.md#2025-04-06_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Running Remix in Production Mode\nDESCRIPTION: Command to start the Remix application in production mode after building. This runs the optimized version of the app.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/examples/remix/README.md#2025-04-06_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Limiting API Access with APIComposer in TypeScript\nDESCRIPTION: Shows how to use the access method of APIComposer to restrict available API methods, allowing only specific operations like read and browse.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/packages/ts-ghost-core-api/CHANGELOG.md#2025-04-06_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst composer = new APIComposer(\n  {\n    schema: simplifiedSchema,\n    identitySchema: identitySchema,\n    include: simplifiedIncludeSchema,\n    // optional\n    createSchema,\n    // optional\n    createOptionsSchema: z.object({\n      option_1: z.boolean(),\n    }),\n  },\n  api\n);\n\nconst composedAPI = composer.access([\"read\", \"browse]);\n\ncomposedAPI.browse({ limit: 10, page: 2 }).fetch();\ncomposedAPI.read({ id: \"1234\" }).fetch();\n\n// TS error and Runtime error `add` doesn't exist\ncomposedAPI.add({ foo: \"bar\" }).fetch();\n```\n\n----------------------------------------\n\nTITLE: Running Tests in Watch Mode\nDESCRIPTION: Commands to run tests in watch mode, either for all packages or for a specific package using the --filter flag. This is useful during development to get immediate feedback on code changes.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/CONTRIBUTING.md#2025-04-06_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# From the project root directory\npnpm test:watch\n# If you want to test a specific package\npnpm test:watch --filter @ts-ghost/core-api\n```\n\n----------------------------------------\n\nTITLE: Installing Ghost Blog Buster CLI globally\nDESCRIPTION: Command to install the Ghost Blog Buster CLI tool globally on your system using npm.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/README.md#2025-04-06_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -g @ts-ghost/ghost-blog-buster\n```\n\n----------------------------------------\n\nTITLE: Running All Validation Checks\nDESCRIPTION: Command to run all validation checks including linting, type checking, and tests. This is useful to ensure all quality checks pass before submitting changes.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/CONTRIBUTING.md#2025-04-06_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# From the project root directory\npnpm validate\n```\n\n----------------------------------------\n\nTITLE: Starting the Documentation Development Server\nDESCRIPTION: Command to navigate to the documentation directory and start the development server. This allows contributors to preview and work on the project documentation.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/CONTRIBUTING.md#2025-04-06_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd www/ && pnpm dev\n```\n\n----------------------------------------\n\nTITLE: Installing TS Ghost Content API package\nDESCRIPTION: Command to install the TypeScript Ghost Content API package in your project using npm.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/README.md#2025-04-06_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @ts-ghost/content-api\n```\n\n----------------------------------------\n\nTITLE: Installing TS Ghost Core API package\nDESCRIPTION: Command to install the TypeScript Ghost Core API package, which contains base building blocks for API interactions.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/README.md#2025-04-06_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @ts-ghost/core-api\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up the ts-ghost Repository\nDESCRIPTION: Commands to clone the ts-ghost repository, navigate to the project directory, install dependencies with pnpm, and build the project. This is the initial setup required for development.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/CONTRIBUTING.md#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:PhilDL/ts-ghost.git\ncd ts-ghost\npnpm i\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Building All Packages in the Monorepo\nDESCRIPTION: Command to build all packages in the ts-ghost monorepo. This uses turborepo to orchestrate the build process across all packages from the project root.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/CONTRIBUTING.md#2025-04-06_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# From the project root directory\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests Against a Ghost Instance\nDESCRIPTION: Command to run integration tests against a real Ghost instance. These tests require specific environment variables to be set and will likely fail without the correct configuration for the test Ghost instance.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/CONTRIBUTING.md#2025-04-06_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# From the project root directory\n# This will fail as it is expecting specific values from a specific Ghost Instance\npnpm test:integration:watch\n```\n\n----------------------------------------\n\nTITLE: Running Linting and Type Checking\nDESCRIPTION: Commands to run ESLint for code linting and TypeScript type checking. These commands help ensure code quality and catch type errors before runtime.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/CONTRIBUTING.md#2025-04-06_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Eslint\npnpm lint\n# Typecheck typescript\npnpm typecheck\n```\n\n----------------------------------------\n\nTITLE: Building Remix Application for Production\nDESCRIPTION: Command to build the Remix application for production deployment. This creates optimized assets in the build directory.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/examples/remix/README.md#2025-04-06_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Migrating Remix Application to a New Template\nDESCRIPTION: Series of commands to create a new Remix project with a different hosting template and migrate the existing app code. This preserves application logic while changing the deployment configuration.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/examples/remix/README.md#2025-04-06_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncd ..\n# create a new project, and pick a pre-configured host\nnpx create-remix@latest\ncd my-new-remix-app\n# remove the new project's app (not the old one!)\nrm -rf app\n# copy your app over\ncp -R ../my-old-remix-app/app app\n```\n\n----------------------------------------\n\nTITLE: Running Ghost Blog Buster CLI in the terminal\nDESCRIPTION: This command launches the interactive version of the Ghost Blog Buster tool in the terminal after global installation.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/ghost-blog-buster/installation/page.mdx#2025-04-06_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nghost-blog-buster\n```\n\n----------------------------------------\n\nTITLE: Full Export Command with Admin API in Ghost Blog Buster CLI\nDESCRIPTION: This example shows a complete export command using the Admin API, including the host URL and Admin API key. It exports posts to a specified output folder.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/ghost-blog-buster/usage/page.mdx#2025-04-06_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nghost-blog-buster export-admin posts --host https://astro-starter.digitalpress.blog --key 1efedd9db174adee2d23d982:4b74dca0219bad629852191af326a45037346c2231240e0f7aec1f9371cc14e8 --output ./posts\n```\n\n----------------------------------------\n\nTITLE: Piping Export Output to File in Ghost Blog Buster CLI\nDESCRIPTION: This command demonstrates how to pipe the export output directly into a file. It exports authors data and saves it to a JSON file.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/ghost-blog-buster/usage/page.mdx#2025-04-06_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nghost-blog-buster export authors --host https://astro-starter.digitalpress.blog --key e9b414c5d95a5436a647ff04ab > authors.json\n```\n\n----------------------------------------\n\nTITLE: Installing ts-ghost core-api Package\nDESCRIPTION: Command to install the @ts-ghost/core-api package using pnpm package manager.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/core-api/page.mdx#2025-04-06_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm i @ts-ghost/core-api\n```\n\n----------------------------------------\n\nTITLE: Configuring Browse Query Parameters\nDESCRIPTION: Example showing all available browse query parameters including pagination, filtering, and ordering options.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/core-api/page.mdx#2025-04-06_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst composedAPI = new APIComposer(\n  \"posts\",\n  { schema: simplifiedSchema, identitySchema: identitySchema, include: simplifiedIncludeSchema },\n  httpClient\n);\nlet query = composedAPI.browse({\n  page: 1,\n  limit: 5,\n  filter: \"title:typescript+slug:-test\",\n  order: \"title DESC\",\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Read Queries\nDESCRIPTION: Shows how to perform read operations by ID or slug using the APIComposer.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/core-api/page.mdx#2025-04-06_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst composedAPI = new APIComposer(\n  \"posts\",\n  { schema: simplifiedSchema, identitySchema: identitySchema, include: simplifiedIncludeSchema },\n  httpClient\n);\nlet query = composedAPI.read({\n  id: \"edHks74hdKqhs34izzahd45\"\n});\n\n// or\n\nlet query = composedAPI.read({\n  slug: \"typescript-is-awesome-in-2025\"\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Fetch Results\nDESCRIPTION: Demonstrates error handling and type-safe result processing from fetch operations.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/core-api/page.mdx#2025-04-06_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst composedAPI = new APIComposer(\n  \"posts\",\n  { schema: simplifiedSchema, output: simplifiedSchema, include: simplifiedIncludeSchema },\n  httpClient\n);\nconst readFetcher = composedAPI.read({ slug: \"typescript-is-cool\" });\nlet result = await readFetcher.fetch();\nif (result.success) {\n  const post = result.data;\n} else {\n  console.log(result.errors.map((e) => e.message).join(\"\\n\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Including Additional Data with the include Method in ts-ghost\nDESCRIPTION: Shows how to use the include method to request additional data not provided by default. The include key is specific to each resource and defined in the resource's Schema, with TypeScript providing guidance on available options.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/core-api/page.mdx#2025-04-06_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst bf = new BrowseFetcher(\n  \"posts\",\n  { schema: simplifiedSchema, output: simplifiedSchema, include: simplifiedIncludeSchema },\n  {},\n  httpClient\n);\nlet result = await bf\n  .include({\n    count: true,\n  })\n  .fetch();\n```\n\n----------------------------------------\n\nTITLE: Including Content Formats with the formats Method in ts-ghost\nDESCRIPTION: Demonstrates the formats method for including additional content formats like plaintext, HTML, or mobiledoc. This is specifically used with Post and Page resources to retrieve content in different formats.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/core-api/page.mdx#2025-04-06_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst bf = new BrowseFetcher(\n  \"posts\",\n  { schema: simplifiedSchema, output: simplifiedSchema, include: simplifiedIncludeSchema },\n  {},\n  httpClient\n);\nlet result = await bf\n  .formats({\n    html: true,\n    plaintext: true,\n  })\n  .fetch();\n```\n\n----------------------------------------\n\nTITLE: Chaining Output Modification Methods in ts-ghost\nDESCRIPTION: Shows how to chain the fields, formats, and include methods together to customize the output comprehensively. This allows selecting specific fields, requesting additional formats, and including extra data in a single query.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/core-api/page.mdx#2025-04-06_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst bf = new BrowseFetcher(\n  \"posts\",\n  { schema: simplifiedSchema, output: simplifiedSchema, include: simplifiedIncludeSchema },\n  {},\n  httpClient\n);\nlet result = await bf\n  .fields({\n    slug: true,\n    title: true,\n    html: true,\n    plaintext: true,\n    count: true,\n  })\n  .formats({\n    html: true,\n    plaintext: true,\n  })\n  .include({\n    count: true,\n  })\n  .fetch();\n```\n\n----------------------------------------\n\nTITLE: Creating Records with the add Method in ts-ghost\nDESCRIPTION: Shows how to create a new record using the add method. The method takes an input object parsed with createSchema and an optional options object parsed with createOptionsSchema, returning the newly created record.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/core-api/page.mdx#2025-04-06_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst composedAPI = new APIComposer(\n  \"posts\",\n  {\n    schema: simplifiedSchema,\n    identitySchema: identitySchema,\n    include: simplifiedIncludeSchema,\n    createSchema: createSchema,\n    createOptionsSchema: z.object({\n      option_1: z.boolean(),\n    }),\n  },\n  httpClient\n);\nlet newPost = await composedAPI.add(\n  {\n    title: \"My new post\",\n  },\n  {\n    option_1: true,\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Understanding Add Method Response Types in ts-ghost\nDESCRIPTION: Shows the type structure of the response from the add method. The response is a discriminated union with either success data containing the newly created record, or an error object with messages.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/core-api/page.mdx#2025-04-06_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// return from the `add` method\nconst result: {\n    success: true;\n    data: z.infer<typeof simplifiedSchema>; // parsed by the Zod Schema given in the config\n} | {\n    success: false;\n    errors: {\n        message: string;\n        type: string;\n    }[];\n}\n```\n\n----------------------------------------\n\nTITLE: Editing Records with the edit Method in ts-ghost\nDESCRIPTION: Demonstrates how to edit an existing record using the edit method. The method requires the ID of the record to edit and an input object of fields to update, with all fields being optional through Partial typing.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/core-api/page.mdx#2025-04-06_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nlet newPost = await composedAPI.edit(\"edHks74hdKqhs34izzahd45\", {\n  title: \"My new post\",\n});\n```\n\n----------------------------------------\n\nTITLE: Understanding Edit Method Response Types in ts-ghost\nDESCRIPTION: Shows the type structure of the response from the edit method. The response is a discriminated union with either success data containing the updated record, or an error object with messages.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/core-api/page.mdx#2025-04-06_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// return from the `edit` method\nconst result: {\n    success: true;\n    data: z.infer<typeof simplifiedSchema>; // parsed by the Zod Schema given in the config\n} | {\n    success: false;\n    errors: {\n        message: string;\n        type: string;\n    }[];\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing TSGhost Content API Client\nDESCRIPTION: Shows how to initialize the TSGhost Content API client with a blog URL and API credentials.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/content-api/overview/page.mdx#2025-04-06_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TSGhostContentAPI } from \"@ts-ghost/content-api\";\n\nconst api = new TSGhostContentAPI(\"https://demo.ghost.io\", \"22444f78447824223cefc48062\", \"v5.0\");\n```\n\n----------------------------------------\n\nTITLE: Building Basic Browse Query\nDESCRIPTION: Demonstrates how to build a basic browse query with pagination and ordering options using type-safe parameters.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/content-api/overview/page.mdx#2025-04-06_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlet query = api.posts.browse({\n  limit: 5,\n  order: \"title DESC\",\n  //      ^? the text here will throw a TypeScript lint error if you use unknown field.\n});\n```\n\n----------------------------------------\n\nTITLE: Query with Field Selection\nDESCRIPTION: Shows how to build a query with field selection to retrieve specific post attributes using the fields modifier.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/content-api/overview/page.mdx#2025-04-06_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nlet query = api.posts\n  .browse({\n    limit: 5,\n    order: \"title DESC\",\n  })\n  .fields({\n    id: true,\n    slug: true,\n    title: true,\n  });\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with and without Field Selection\nDESCRIPTION: Demonstrates how to execute queries and fetch data from the API, showing both field-selected and complete record retrieval approaches.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/content-api/overview/page.mdx#2025-04-06_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nlet query = await api.posts\n  .browse({\n    limit: 5,\n    order: \"title DESC\",\n  })\n  .fields({\n    id: true,\n    slug: true,\n    title: true,\n  })\n  .fetch();\n\n// or without fields selection\n\nlet query2 = await api.posts\n  .browse({\n    limit: 5,\n    order: \"title DESC\",\n  })\n  .fetch();\n```\n\n----------------------------------------\n\nTITLE: Handling Unknown Order/Filter Parameters with BrowseParams\nDESCRIPTION: Illustrates how to handle uncontrolled order or filter inputs using the BrowseParams type helper. This approach enables runtime checking while maintaining TypeScript compatibility for user inputs or FormData.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/content-api/advanced-typescript/page.mdx#2025-04-06_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { BrowseParams, Post } from \"@ts-ghost/content-api\";\n\nconst uncontrolledOrderInput = async (formData: FormData) => {\n  const order = formData.get(\"order\");\n  const filter = formData.get(\"filter\");\n  const result = await api.posts\n    .browse({ order, filter } as BrowseParams<{ order: string; filter: string }, Post>)\n    .fetch();\n};\n```\n\n----------------------------------------\n\nTITLE: Outputting content in different formats with formats() in ts-ghost\nDESCRIPTION: Example demonstrating how to use formats() to get post content in alternative formats like plaintext and HTML alongside the default format.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/content-api/output-modifiers/page.mdx#2025-04-06_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nlet result = await api.posts\n  .read({\n    slug: \"this-is-a-post-slug\",\n  })\n  .formats({\n    plaintext: true,\n    html: true,\n  })\n  .fetch();\n```\n\n----------------------------------------\n\nTITLE: Fetching Ghost Site Settings with TypeScript\nDESCRIPTION: This snippet shows how to retrieve the settings from a Ghost instance. Unlike other resources, the settings resource can only be fetched directly without building a query. The code handles type safety with success checking.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/content-api/common-recipes/page.mdx#2025-04-06_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TSGhostContentAPI, type Post } from \"@ts-ghost/content-api\";\n\nlet url = \"https://demo.ghost.io\";\nlet key = \"22444f78447824223cefc48062\"; // Content API KEY\nconst api = new TSGhostContentAPI(url, key, \"v5.0\");\n\nlet result = await api.settings.fetch();\nif (result.success) {\n  const settings = result.data;\n  //     ^? type Settings {title: string; description: string; ...\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Fields with fields() Method in TypeScript\nDESCRIPTION: Shows how to use the fields() method to select specific fields when reading a post. The output schema is modified to only include the selected fields, and TypeScript provides type safety for the result.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/admin-api/output-modifiers/page.mdx#2025-04-06_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlet result = await api.posts\n  .read({\n    slug: \"typescript-is-cool\",\n  })\n  .fields({\n    id: true,\n    slug: true,\n    title: true,\n  })\n  .fetch();\n\nif (result.success) {\n  const post = result.data;\n  //     ^? type {\"id\": string; \"slug\":string; \"title\": string}\n}\n```\n\n----------------------------------------\n\nTITLE: Including Relations with include() Method in TypeScript\nDESCRIPTION: Demonstrates how to use the include() method to add additional data that the Ghost API doesn't provide by default. This example includes the post count for an author.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/admin-api/output-modifiers/page.mdx#2025-04-06_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nlet result = await api.authors\n  .read({\n    slug: \"phildl\",\n  })\n  .include({ \"count.posts\": true })\n  .fetch();\n```\n\n----------------------------------------\n\nTITLE: Building Member Browse Query\nDESCRIPTION: Demonstrates how to build a typed query to browse members with limit and order parameters.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/admin-api/overview/page.mdx#2025-04-06_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlet query = api.members.browse({\n  limit: 5,\n  order: \"name ASC\",\n  //      ^? the text here will throw a TypeScript lint error if you use unknown field.\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Members with Field Selection\nDESCRIPTION: Shows how to query members with field selection to limit the returned data to specific fields.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/admin-api/overview/page.mdx#2025-04-06_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nlet query = api.members\n  .browse({\n    limit: 5,\n    order: \"email ASC\",\n  })\n  .fields({\n    id: true,\n    email: true,\n    name: true,\n  });\n```\n\n----------------------------------------\n\nTITLE: Performing CRUD Operations on Posts\nDESCRIPTION: Comprehensive example showing how to create, update, and delete posts with error handling.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/admin-api/overview/page.mdx#2025-04-06_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TSGhostAdminAPI } from \"@ts-ghost/admin-api\";\n\nlet url = \"https://demo.ghost.io\";\nlet key = \"1efedd9db174adee2d23d982:4b74dca0219bad629852191af326a45037346c2231240e0f7aec1f9371cc14e8\";\nconst api = new TSGhostAdminAPI(url, key, \"v5.0\");\n\n// Input data are fully typed and then parsed through the appropriate Zod Schema\nconst adding = await api.posts.add({\n  title: title,\n  html: \"<p>Hello from ts-ghost</p>\",\n  tags: [{ name: \"ts-ghost\" }],\n  tiers: [{ name: \"ts-ghost\" }],\n  custom_excerpt: \"This is custom excerpt from ts-ghost\",\n  meta_title: \"Meta Title from ts-ghost\",\n  meta_description: \"Description from ts-ghost\",\n  featured: true,\n  og_title: \"OG Title from ts-ghost\",\n  og_description: \"OG Description from ts-ghost\",\n  twitter_title: \"Twitter Title from ts-ghost\",\n  twitter_description: \"Twitter Description from ts-ghost\",\n  visibility: \"public\",\n  slug: \"foobarbaz\",\n});\n\nif (!adding.success) {\n  console.error(adding.errors);\n  throw new Error(\"Failed to create post\");\n}\n\nconst newPost = adding.data;\n//     ^? type Post\n\n// Update\nconst postEdit = await api.posts.edit(newPost.id, {\n  custom_excerpt: \"Modified excerpt from ghost\",\n  // This is required by Ghost to send the updated_at field with the updated_at\n  // of the post you want to edit.\n  updated_at: new Date(newPost.updated_at || \"\"),\n});\n\nif (!postEdit.success) {\n  console.error(postEdit.errors);\n  throw new Error(\"Failed to edit post\");\n}\n\nconst editedPost = postEdit.data;\n//     ^? type Post\n\n// Delete\nconst postDelete = await api.posts.delete(editedPost.id);\nif (!postDelete.success) {\n  console.error(postDelete.errors);\n  throw new Error(\"Failed to delete post\");\n}\n```\n\n----------------------------------------\n\nTITLE: Installing ts-ghost Admin API\nDESCRIPTION: Command to install the @ts-ghost/admin-api package using pnpm package manager.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/admin-api/nextjs/page.mdx#2025-04-06_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @ts-ghost/admin-api\n```\n\n----------------------------------------\n\nTITLE: Initializing the Ghost Admin API in NextJS\nDESCRIPTION: TypeScript module that creates and exports a Ghost Admin API instance using environment variables.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/admin-api/nextjs/page.mdx#2025-04-06_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TSGhostAdminAPI } from \"@ts-ghost/admin-api\";\n\nexport const api = new TSGhostAdminAPI(\n  process.env.GHOST_URL || \"\",\n  process.env.GHOST_ADMIN_API_KEY || \"\",\n  \"v5.0\"\n);\n```\n\n----------------------------------------\n\nTITLE: Fetching Active Member Subscriptions\nDESCRIPTION: Retrieves and filters active subscriptions for a specific member using their member ID. Includes error handling and filters subscriptions based on active status.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/admin-api/members-recipes/page.mdx#2025-04-06_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TSGhostAdminAPI } from \"@ts-ghost/admin-api\";\n\nexport const getMemberActiveSubscriptions = async (memberId: string) => {\n  const api = new TSGhostAdminAPI(env.GHOST_URL, env.GHOST_ADMIN_API_KEY, \"v5.0\");\n  const subscriptions = await api.members.read({ id: memberId }).fields({ subscriptions: true }).fetch();\n  if (!subscriptions.success) {\n    throw new Error(subscriptions.errors.join(\", \"));\n  }\n  return subscriptions.data.subscriptions.filter((sub) => sub.status === \"active\");\n};\n```\n\n----------------------------------------\n\nTITLE: NextJS 13+ Ghost API Integration with Revalidation\nDESCRIPTION: Shows how to use NextJS-specific fetch options with the Ghost API, implementing data revalidation. The example demonstrates fetching posts with a 10-second revalidation interval.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/admin-api/fetching/page.mdx#2025-04-06_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlet query = await api.posts\n  .browse({\n    limit: 5,\n    order: \"title DESC\",\n  })\n  .fetch({ next: { revalidate: 10 } }); // NextJS revalidate this data every 10 seconds at most\n```\n\n----------------------------------------\n\nTITLE: Response Type for Delete Operation in Ghost Admin API\nDESCRIPTION: This snippet shows the TypeScript type definition for the response returned by the delete method. It illustrates that the response can either indicate success with no data, or failure with an array of errors.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/admin-api/delete/page.mdx#2025-04-06_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// return from the `delete` method\nconst result: {\n    success: true;\n} | {\n    success: false;\n    errors: {\n        message: string;\n        type: string;\n    }[];\n}\n```\n\n----------------------------------------\n\nTITLE: Result Type for 'add' Method in ts-ghost Admin API\nDESCRIPTION: This code snippet illustrates the TypeScript type definition for the result returned by the 'add' method. It shows the structure of both successful and failed responses, including the parsed data or error messages.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/docs/src/app/docs/admin-api/add/page.mdx#2025-04-06_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// return from the `add` method\nconst result: {\n    success: true;\n    data: Member; // parsed by the Zod Schema given in the config\n} | {\n    success: false;\n    errors: {\n        message: string;\n        type: string;\n    }[];\n}\n```\n\n----------------------------------------\n\nTITLE: Admin API Settings Resource Example Response\nDESCRIPTION: Example of the blog settings array returned by the Admin API's settings resource. The response is an array of key-value pairs representing various blog configuration settings such as title, description, logo, and cover image.\nSOURCE: https://github.com/PhilDL/ts-ghost/blob/main/apps/ghost-blog-buster/CHANGELOG.md#2025-04-06_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  success: true,\n  data: [\n    {\n      key: 'title',\n      value: 'My blog - TypeScript, Python & JavaScript Tutorials'\n    },\n    {\n      key: 'description',\n      value: 'TypeScript Developement Tutorials. Real-world examples and useful code snippets!'\n    },\n    {\n      key: 'logo',\n      value: 'https://myblog.com/content/images/2021/04/myblog.png'\n    },\n    { key: 'cover_image', value: null },\n    // ...\n}\n```"
  }
]