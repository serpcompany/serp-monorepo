[
  {
    "owner": "typedoc2md",
    "repo": "typedoc-plugin-markdown",
    "content": "TITLE: Configure TypeDoc Plugin Markdown with JSON\nDESCRIPTION: This snippet demonstrates how to configure TypeDoc and the typedoc-plugin-markdown plugin using a JSON file.  It specifies the schema, entry points, output directory, and plugins. The `$schema` property links to the JSON schema for validation and autocompletion. The 'plugin' array includes the names of plugins to load.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/docs/option-typings.mdx#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"$schema\": \"https://typedoc-plugin-markdown.org/schema.json\",\n  \"entryPoints\": [\"./src/index.ts\", \"./src/secondary-entry.ts\"],\n  \"out\": \"docs\",\n  \"plugin\": [\"typedoc-plugin-markdown\", \"some-other-plugin\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Multi-Instance TypeDoc with Docusaurus\nDESCRIPTION: This snippet shows how to configure the `docusaurus-plugin-typedoc` in `docusaurus.config.js` to build multiple TypeDoc instances. Each instance is defined with a unique `id`, entry points (`entryPoints`), a TypeScript configuration file (`tsconfig`), and an output directory (`out`). This allows generating separate documentation for different APIs.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/plugins/docusaurus/guides/multi-instance.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    [\n      'docusaurus-plugin-typedoc',\n      {\n        id: 'api-1',\n        entryPoints: ['../api-1/src/index.ts'],\n        tsconfig: '../api-1/tsconfig.json',\n        out: 'api-1',\n      },\n    ],\n    [\n      'docusaurus-plugin-typedoc',\n      {\n        id: 'api-2',\n        entryPoints: ['../api-2/src/index.ts'],\n        tsconfig: '../api-2/tsconfig.json',\n        out: 'api-2',\n      },\n    ],\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: TypeDoc Configuration with docsRoot (JSON)\nDESCRIPTION: This configuration sets the output directory to './docs/typedoc-api' and specifies the documentation root as './docs'. This is necessary when TypeDoc is run from outside the VitePress project's root directory, ensuring correct path resolution for generated documentation within the VitePress structure.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/plugins/vitepress/options.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"out\": \"./docs/typedoc-api\",\n  \"docsRoot\": \"./docs\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Docusaurus Sidebar\nDESCRIPTION: Configures the Docusaurus sidebar using the `docusaurus-plugin-typedoc` plugin. The `sidebar` option allows customizing sidebar generation, including disabling automatic configuration, formatting the JSON output, generating a TypeScript file, and applying a class name to deprecated items.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/plugins/docusaurus/options.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  plugins: [\n    [\n      'docusaurus-plugin-typedoc',\n      {\n        sidebar: {\n          autoConfiguration: true,\n          pretty: false,\n          typescript: false,\n          deprecatedItemClassName: 'typedoc-sidebar-item-deprecated',\n        },\n      },\n    ],\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeDoc Plugins in typedoc.json\nDESCRIPTION: This JSON configuration enables the typedoc-plugin-markdown and typedoc-gitlab-wiki-theme plugins within TypeDoc. The `plugin` array specifies the names of the plugins to load during TypeDoc execution, enabling their features for documentation generation.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/plugins/gitlab-wiki/quick-start.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugin\": [\"typedoc-plugin-markdown\", \"typedoc-gitlab-wiki-theme\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeDoc Plugins with JSON\nDESCRIPTION: This JSON snippet demonstrates how to configure TypeDoc to use the `typedoc-plugin-markdown`, `typedoc-plugin-frontmatter`, and a custom frontmatter plugin specified at `./custom-frontmatter.mjs`.  The `plugin` array lists the plugins TypeDoc should load during the documentation generation process.  This configuration enables customization of frontmatter using the provided plugins.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/plugins/frontmatter/customizing.mdx#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugin\": [\n    \"typedoc-plugin-markdown\",\n    \"typedoc-plugin-frontmatter\",\n    \"./custom-frontmatter.mjs\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing outputFileStrategy Option - TypeScript\nDESCRIPTION: Initializes the `outputFileStrategy` option, which determines how output files are generated, choosing between `members` (default) and `modules`. The 'members' strategy generates a file for each exported member, while 'modules' creates a single file per module, hoisting all members. This option helps control the file structure and navigation of the generated documentation.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-markdown/options/namespaces/declarations/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    help: 'Determines how output files are generated.',\n    type: ParameterType.Map,\n    map: OutputFileStrategy,\n    defaultValue: OutputFileStrategy.Members,\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Page Titles with Strings in JSON\nDESCRIPTION: This example shows how to use the `pageTitleTemplates` option in a `typedoc.json` file to customize page titles using strings with placeholders. It demonstrates how to use placeholders like `{projectName}`, `{version}`, `{kind}`, and `{name}` within the strings to generate titles.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/docs/options/display-options.mdx#_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"pageTitleTemplates\": {\n    \"index\": \"{projectName} {version}\",\n    \"member\": \"{kind}: {name}\",\n    \"module\": \"{name}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Remark Plugins Globally (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to configure remark plugins globally to all documentation pages.  It includes examples of specifying a plugin name directly or using a tuple of plugin and plugin options. Plugins must be installed individually. Includes remark-mdx and remark-github examples.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/plugins/remark/options.mdx#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"remarkPlugins\": [\n    \"remark-mdx\",\n    [\"remark-github\", { \"repository\": \"myorg/myrepo\" }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Frontmatter Plugin in TypeScript\nDESCRIPTION: This TypeScript snippet shows how to create a custom TypeDoc plugin that modifies the frontmatter of a page before it is written to a Markdown file. It listens for the `MarkdownPageEvent.BEGIN` event and updates the `page.frontmatter` object based on the page model's reflection kind. Specifically, it sets the title to the class name if the page represents a class.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/plugins/frontmatter/customizing.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @ts-check\nimport { ReflectionKind } from 'typedoc';\nimport { MarkdownPageEvent } from 'typedoc-plugin-markdown';\n\n/**\n * @param {import('typedoc-plugin-markdown').MarkdownApplication} app\n */\nexport function load(app) {\n  app.renderer.on(\n    MarkdownPageEvent.BEGIN,\n    /** @param {import('typedoc-plugin-markdown').MarkdownPageEvent} page */\n    (page) => {\n      /**\n       * Update page.frontmatter object using information from the page model\n       *\n       * Here if the page is a class, we set the title to the class name\n       */\n      if (page.model?.kind == ReflectionKind.Class) {\n        page.frontmatter = {\n          // e.g add a title\n          title: page.model?.name,\n          // spread the existing frontmatter\n          ...page.frontmatter,\n        };\n      }\n    },\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing remark-mdx using npm/yarn\nDESCRIPTION: This command installs the remark-mdx plugin as a development dependency using npm or yarn. remark-mdx is essential for parsing MDX syntax correctly when using MDX in your documentation.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/plugins/remark/remark-plugins-usage.mdx#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install remark-mdx --save-dev\n```\n\n----------------------------------------\n\nTITLE: Modifying Page Content with Page Events in Typescript\nDESCRIPTION: This code shows how to modify the content of a page using page events in Typescript. It listens for the `MarkdownPageEvent.BEGIN` event and replaces all occurrences of 'foo' with 'bar' in the page contents. The `page.contents` property is used to access and modify the page's markdown content.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/docs/customizing-output.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// @ts-check\nimport { MarkdownPageEvent } from 'typedoc-plugin-markdown';\n/**\n * @param {import('typedoc-plugin-markdown').MarkdownApplication} app\n */\nexport function load(app) {\n  app.renderer.on(MarkdownPageEvent.BEGIN, (page) => {\n    page.contents = page.contents.replace('foo', 'bar');\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Example Configuration for Remark Plugins in typedoc.json\nDESCRIPTION: This JSON snippet provides an example of how to conditionally use Remark plugins in your typedoc.json configuration. It shows how to apply different plugins to different file types and kinds, using applyTo to target specific elements.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/plugins/remark/remark-plugins-usage.mdx#_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"plugin\": [\"typedoc-plugin-markdown\", \"typedoc-plugin-remark\"],\n  \"remarkPlugins\": [\n    // Apply remark-mdx and remark-github to all files.\n    {\n      \"applyTo\": \"*\",\n      \"plugins\": [\n        \"remark-mdx\",\n        [\"remark-github\", { \"repository\": \"myorg/myrepo\" }]\n      ]\n    },\n    // Apply remark-toc to Readme page and members kinds of Document, Class and Interface only.\n    {\n      \"applyTo\": [\"Readme\", \"Document\", \"Class\", \"Interface\"],\n      \"plugins\": [\n        // remark-insert-headings is additionally required\n        // (only display toc heading if there are more than two headings)\n        [\n          \"remark-insert-headings\",\n          {\n            \"text\": \"Contents\",\n            \"position\": \"start\",\n            \"minHeadingCount\": 2\n          }\n        ],\n        [\"remark-toc\", { \"maxDepth\": 2 }]\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configure frontmatterCommentTags in typedoc.json\nDESCRIPTION: This JSON snippet shows how to configure the 'frontmatterCommentTags' option in typedoc.json. This option specifies which comment block tags should be extracted and added to the frontmatter.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/plugins/frontmatter/options.mdx#_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"frontmatterCommentTags\": [\"author\", \"description\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeDoc Router to 'member' in typedoc.json\nDESCRIPTION: This JSON snippet configures the TypeDoc router option to 'member'.  It instructs the typedoc-plugin-markdown plugin to generate a separate Markdown file for each exported module member.  This mirrors a combination of TypeDoc's `kind` and `structure` routers, and it is equivalent to the deprecated `outputFileStrategy=\"members\"` option.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/docs/output-file-structure.mdx#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"router\": \"member\"\n}\n```\n\n----------------------------------------\n\nTITLE: TypeDoc Sidebar Configuration (JSON)\nDESCRIPTION: This JSON snippet configures the autogenerated VitePress sidebar. It sets 'autoConfiguration' to true to enable sidebar generation, specifies the format as 'vitepress' for compatibility, disables pretty formatting of the sidebar JSON, and sets sidebar items with children to be collapsed by default.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/plugins/vitepress/options.mdx#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sidebar\": {\n    \"autoConfiguration\": true,\n    \"format\": \"vitepress\",\n    \"pretty\": false,\n    \"collapsed\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a local plugin in typedoc.json\nDESCRIPTION: This example demonstrates how to register a local plugin by adding its path to the `plugin` array in the `typedoc.json` configuration file.  Ensure the plugin is consumed as ESM.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/docs/customizing-output.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugin\": [\"typedoc-plugin-markdown\", \"./local-plugins/my-custom-plugin.mjs\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming Generated Sidebar with TypeScript\nDESCRIPTION: Shows how to import and use the generated `typedoc-sidebar.ts` file in a Docusaurus sidebar configuration using TypeScript. The `typedocSidebar` category links to the 'api/index' document, and its items are sourced from the `typedocSidebar.items` export. Requires Docusaurus and TypeScript.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/plugins/docusaurus/guides/sidebar.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { SidebarsConfig } from '@docusaurus/plugin-content-docs';\nimport typedocSidebar from './docs/api/typedoc-sidebar';\n\nconst sidebars: SidebarsConfig = {\n  typedocSidebar: [\n    {\n      type: 'category',\n      label: 'Typedoc API',\n      link: {\n        type: 'doc',\n        id: 'api/index',\n      },\n      items: typedocSidebar.items,\n    },\n  ],\n};\n\nexport default sidebars;\n```\n\n----------------------------------------\n\nTITLE: Configuring remark-mdx in typedoc.json\nDESCRIPTION: This JSON snippet demonstrates how to configure the remark-mdx plugin within the typedoc.json file. By adding 'remark-mdx' to the 'remarkPlugins' array, TypeDoc will use this plugin to process MDX syntax during documentation generation.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/plugins/remark/remark-plugins-usage.mdx#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"remarkPlugins\": [\"remark-mdx\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring the Plugin in typedoc.json\nDESCRIPTION: This JSON configuration file shows how to specify the typedoc-plugin-markdown plugin using the `plugin` option. The `out` option specifies the output directory for the generated documentation.  TypeDoc will load and use the plugin when generating documentation.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/docs/quick-start.mdx#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugin\": [\"typedoc-plugin-markdown\"],\n  \"out\": \"./docs\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring VitePress sidebar\nDESCRIPTION: This TypeScript snippet configures the VitePress theme to include a sidebar generated by TypeDoc. It imports a JSON file containing the sidebar configuration and adds it to the VitePress theme configuration under the `sidebar` property.  The `docsRoot` option may need to be configured if TypeDoc is running outside of the VitePress project root.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/plugins/vitepress/quick-start.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport typedocSidebar from '../api/typedoc-sidebar.json';\n\nmodule.exports = {\n  themeConfig: {\n    nav: [{ text: 'API', link: '/api/' }],\n    sidebar: [\n      {\n        text: 'API',\n        items: typedocSidebar,\n      },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Sidebar Configuration Object Declaration - TypeScript\nDESCRIPTION: This code snippet defines the structure and properties of the `sidebar` configuration object.  It includes `autoConfiguration` to enable/disable sidebar generation and `heading` to specify the text displayed as the sidebar heading. The snippet showcases type declarations and default values for each property.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-gitlab-wiki-theme/options/namespaces/declarations/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * > `const` **sidebar**: `object`\n *\n * Defined in: [options/declarations.ts:14](https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/packages/typedoc-gitlab-wiki-theme/src/options/declarations.ts#L14)\n *\n * **sidebar.autoConfiguration**\n *\n * Set to `false` to disable sidebar generation. Defaults to true.\n *\n * **sidebar.heading**\n *\n * The heading displayed above the sidebar.\n */\n```\n\n----------------------------------------\n\nTITLE: MarkdownRenderer 'on' Event Listener\nDESCRIPTION: This snippet demonstrates how to listen for the `beginPage` or `endPage` events using the `on` method of the `MarkdownRenderer`. The callback function receives a `MarkdownPageEvent` object as an argument, allowing you to modify the page rendering process.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-markdown/types/interfaces/MarkdownRenderer.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napp.renderer.on(MarkdownPageEvent.BEGIN, (renderer) => {});\n```\n\n----------------------------------------\n\nTITLE: Configure Docusaurus with typedoc-plugin-markdown\nDESCRIPTION: Configures the Docusaurus `docusaurus.config.js` file to include the `docusaurus-plugin-typedoc` plugin and its options.  The `entryPoints` and `tsconfig` options are specified to tell TypeDoc where to find the source files and TypeScript configuration.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/plugins/docusaurus/quick-start.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  // Add option types\n  plugins: [\n    [\n      'docusaurus-plugin-typedoc',\n\n      // Options\n      {\n        entryPoints: ['../src/index.ts'],\n        tsconfig: '../tsconfig.json',\n      },\n    ],\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeDoc plugins\nDESCRIPTION: This JSON configuration file specifies the plugins that TypeDoc should use, in this case, typedoc-plugin-markdown and typedoc-vitepress-theme. This configuration ensures that TypeDoc generates markdown output and applies the VitePress theme.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/plugins/vitepress/quick-start.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugin\": [\"typedoc-plugin-markdown\", \"typedoc-vitepress-theme\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming Generated Sidebar with CommonJs\nDESCRIPTION: Demonstrates how to import and use the generated `typedoc-sidebar.cjs` file in a Docusaurus sidebar configuration using CommonJs. The `typedocSidebar` is defined as a category, linking to the 'api/index' document, and its items are populated from the required CJS file. Requires Docusaurus.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/plugins/docusaurus/guides/sidebar.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// @ts-check\n\n/** @type {import('@docusaurus/plugin-content-docs').SidebarsConfig} */\nconst sidebars = {\n  typedocSidebar: [\n    {\n      type: 'category',\n      label: 'TypeDoc API',\n      link: {\n        type: 'doc',\n        id: 'api/index',\n      },\n      items: require('./docs/api/typedoc-sidebar.cjs'),\n    },\n  ],\n};\nmodule.exports = sidebars;\n```\n\n----------------------------------------\n\nTITLE: Defining a Docs Script in package.json\nDESCRIPTION: This JSON snippet shows how to define a script named `docs` in the `package.json` file that runs the `typedoc` command. This allows users to generate documentation using `npm run docs`.  It simplifies the documentation generation process.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/docs/quick-start.mdx#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"docs\": \"typedoc\"\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Page Titles with Functions in JavaScript\nDESCRIPTION: This example demonstrates how to use the `pageTitleTemplates` option in a `typedoc.cjs` file to customize page titles using functions. It shows how to access arguments such as `projectName`, `version`, `kind`, and `name` to create dynamic titles.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/docs/options/display-options.mdx#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\npageTitleTemplates: {\n  index: (args) => `${args.projectName}: ${args.version}`,\n  module: (args) => `${args.kind}: ${args.name}`,\n  member: (args) => `${args.kind}: ${args.name}`,\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing publicPath option in TypeDoc Plugin Markdown\nDESCRIPTION: This code snippet initializes the `publicPath` option, allowing users to specify the base path for all URLs. If undefined, all URLs will be relative.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-markdown/options/namespaces/declarations/README.md#_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    help: 'Specify the base path for all urls.',\n    type: ParameterType.String,\n    defaultValue: undefined,\n}\n```\n\n----------------------------------------\n\nTITLE: Building All Packages with npm\nDESCRIPTION: This command builds all packages within the monorepo. It compiles the source code and prepares the packages for testing and usage.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/GETTING_STARTED.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build-all\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeDoc to use typedoc-plugin-frontmatter\nDESCRIPTION: This JSON configuration adds `typedoc-plugin-markdown` and `typedoc-plugin-frontmatter` to the TypeDoc plugin list. The `typedoc.json` file is used by TypeDoc to customize its behavior and include the plugins, allowing for markdown generation and frontmatter processing within the documentation.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/plugins/frontmatter/quick-start.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugin\": [\"typedoc-plugin-markdown\", \"typedoc-plugin-frontmatter\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Async Tasks with Async Jobs in Typescript\nDESCRIPTION: This code demonstrates how to perform asynchronous tasks before or after rendering using async jobs in Typescript. It pushes asynchronous functions to the `preRenderAsyncJobs` and `postRenderAsyncJobs` arrays of the renderer, allowing async processing before or after the rendering process.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/docs/customizing-output.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// @ts-check\n/**\n * @param {import('typedoc-plugin-markdown').MarkdownApplication} app\n */\nexport function load(app) {\n  app.renderer.preRenderAsyncJobs.push(async (renderer) => {\n    await doSomethingAsync(renderer);\n  });\n\n  app.renderer.postRenderAsyncJobs.push(async (renderer) => {\n    await doSomethingAsync(renderer);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Define block tags in TypeScript\nDESCRIPTION: This TypeScript snippet illustrates how to define block tags within a comment block. These tags can be extracted and added to the frontmatter of the generated markdown file using the 'frontmatterCommentTags' option.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/plugins/frontmatter/options.mdx#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * @author Joe Bloggs\n *\n * @description A description that will be added to frontmatter.\n */\n```\n\n----------------------------------------\n\nTITLE: Configuring Typedoc with Plugin\nDESCRIPTION: This JSON configuration enables the typedoc-plugin-markdown and typedoc-github-wiki-theme plugins within a TypeDoc project.  The \"plugin\" array specifies the names of the plugins to load.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/plugins/github-wiki/quick-start.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugin\": [\"typedoc-plugin-markdown\", \"typedoc-github-wiki-theme\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing indexFormat Declaration Option - Typescript\nDESCRIPTION: Initializes the `indexFormat` declaration option. This option controls the format of index items (members, packages, documents). It uses a `ParameterType.Map` with possible values from the `DisplayFormat` enum and defaults to `DisplayFormat.List`.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-markdown/options/namespaces/declarations/README.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    help: 'Sets the format of index items.',\n    type: ParameterType.Map,\n    map: DisplayFormat,\n    defaultValue: DisplayFormat.List,\n}\n```\n\n----------------------------------------\n\nTITLE: Remark Stringify Options Initializer in TypeScript\nDESCRIPTION: This code defines the initializer for the `remarkStringifyOptions` option, specifying its help text, type (Object), default value (empty object), and a validation function.  The validation function throws an error if the provided value is not an object. This allows users to customize the behavior of the remark-stringify plugin.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-remark/options/namespaces/declarations/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    help: 'Custom options for the remark-stringify plugin.',\n    type: ParameterType.Object,\n    defaultValue: {},\n    validate(value) {\n        if (typeof value !== 'object') {\n            throw new Error('[typedoc-plugin-remark] remarkStringifyOptions must be an object.');\n        }\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Anchors Option Configuration TypeScript\nDESCRIPTION: Configures the option to add HTML anchors to page headings, useful when the Markdown parser does not automatically assign header IDs.  This ensures cross-linking to symbols within a page works correctly, especially for linkable symbols in table rows.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-markdown/options/namespaces/declarations/README.md#_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    help: 'Add HTML anchors to page headings.',\n    type: ParameterType.Boolean,\n    defaultValue: false,\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring useCodeBlocks Option in TypeDoc\nDESCRIPTION: This configuration option determines whether to wrap signatures and declarations in code blocks. Setting it to `true` will wrap them in code blocks for improved readability. When enabled linking to other references is not available, a work around is to use the `@link` tag to manually reference types.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/docs/options/display-options.mdx#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"useCodeBlocks\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Content with Hooks in Typescript\nDESCRIPTION: This code demonstrates how to use hooks to inject content into the output using Typescript. It registers a hook on the 'page.begin' event to insert a string at the beginning of the markdown output. The `app.renderer.markdownHooks.on` method allows attaching a function to a hook.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/docs/customizing-output.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @ts-check\n/**\n * @param {import('typedoc-plugin-markdown').MarkdownApplication} app\n */\nexport function load(app) {\n  app.renderer.markdownHooks.on(\n    'page.begin',\n    () => `**Generated using \\`page.begin\\` hook**`,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring remark-toc and remark-insert-headings in typedoc.json\nDESCRIPTION: This JSON snippet demonstrates how to configure the remark-toc and remark-insert-headings plugins within the typedoc.json file. It includes configurations for the heading text and table of contents depth.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/plugins/remark/remark-plugins-usage.mdx#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"remarkPlugins\": [\n    [\"remark-insert-headings\", { \"text\": \"Contents\" }],\n    [\"remark-toc\", { \"maxDepth\": 2 }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring interfacePropertiesFormat Option in TypeDoc\nDESCRIPTION: This configuration option specifies the output format for interface properties. Accepts one of 'list', 'table', or 'htmlTable', defaulting to 'list'.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/docs/options/display-options.mdx#_snippet_9\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"interfacePropertiesFormat\": \"list\"\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering with MarkdownRenderer in TypeDoc plugin\nDESCRIPTION: The `render` function is the entry point for rendering TypeDoc projects into markdown format. It takes the `MarkdownRenderer`, `ProjectReflection`, and `outputDirectory` as parameters.  It adapts the default theme's render method by removing HTML-specific logic and incorporating markdown-specific logic.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-markdown/renderer/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * The render method for the Markdown plugin\n */\n\n/** @param renderer */\n/** @param project */\n/** @param outputDirectory */\n```\n\n----------------------------------------\n\nTITLE: Configure YAML stringify options in typedoc.json\nDESCRIPTION: This JSON snippet shows how to configure the 'yamlStringifyOptions' option in typedoc.json. It allows passing options directly to the yaml.stringify() method for customizing YAML serialization.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/plugins/frontmatter/options.mdx#_snippet_9\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"yamlStringifyOptions\": {\n    \"defaultStringType\": \"QUOTE_SINGLE\",\n    \"defaultKeyType\": \"PLAIN\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Define New Option Declaration in TypeScript\nDESCRIPTION: This snippet defines a new option declaration for the TypeDoc plugin.  It specifies the help text, parameter type (Boolean in this case), and default value for the option. The `@category` tag determines the category in which the option will be displayed in the documentation. The option is defined as a named export within `./src/options/declarations.ts`.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/packages/typedoc-plugin-markdown/internal-docs/adding-options.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Some more detailed comments about the option.\n *\n * @category Display\n */\nexport const myNewOption: Partial<DeclarationOption> = {\n  help: 'A short description of the option.',\n  type: ParameterType.Boolean,\n  defaultValue: false,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Remark Plugins Conditionally (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to apply remark plugins selectively to specific page types.  The `applyTo` field specifies the page kinds to which the plugins should be applied. It supports applying to all pages using \"*\" or specifying an array of page kinds such as \"Class\" and \"Interface\".\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/plugins/remark/options.mdx#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"remarkPlugins\": [\n    {\n      \"applyTo\": \"*\",\n      \"plugins\": [\"remark-mdx\"]\n    },\n    {\n      \"applyTo\": [\"Class\", \"Interface\"],\n      \"plugins\": [\"remark-github\", { \"repository\": \"myorg/myrepo\" }]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring parametersFormat Option in TypeDoc\nDESCRIPTION: This configuration option specifies the output format for parameters and type parameters of functions and class methods. Accepts one of 'list', 'table', or 'htmlTable', defaulting to 'list'.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/docs/options/display-options.mdx#_snippet_8\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"parametersFormat\": \"list\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring expandObjects Option in TypeDoc\nDESCRIPTION: This configuration option determines whether to expand objects inside declarations. When enabled full object representations are shown. Defaults to `false` which collapses object declarations to preserve space and improve readability.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/docs/options/display-options.mdx#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"expandObjects\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Merge Readme in TypeDoc JSON\nDESCRIPTION: This JSON snippet disables the merging of the documentation index page into the readme page. By default, a separate readme page is created when a readme file is resolved. Setting `mergeReadme` to `false` ensures that a separate readme page is generated.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/docs/options/file-options.mdx#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"mergeReadme\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Preset Options Configuration JSON\nDESCRIPTION: This JSON snippet defines preset options for the typedoc-plugin-markdown plugin. It sets the entry file name to 'home.md' and hides the page header. These settings provide a basic configuration for generating markdown documentation.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/plugins/gitlab-wiki/options.mdx#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"entryFileName\": \"home.md\",\n  \"hidePageHeader\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring propertyMembersFormat Option in TypeDoc\nDESCRIPTION: This configuration option specifies the output format for property members of interfaces and classes. Takes effect only when the property declaration is rendered in 'list' format. Accepts one of 'list', 'table', or 'htmlTable', defaulting to 'list'.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/docs/options/display-options.mdx#_snippet_13\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"propertyMembersFormat\": \"list\"\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Flatten Output Files in TypeDoc JSON\nDESCRIPTION: This JSON snippet configures the output file structure. By default, files are generated in a directory structure. Setting `flattenOutputFiles` to `false` ensures that files are generated in the default directory structure.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/docs/options/file-options.mdx#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"flattenOutputFiles\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Running TypeDoc before VitePress\nDESCRIPTION: This JSON snippet shows how to add `typedoc` command as a pre-documentation step in package.json file. This ensures that TypeDoc is executed before building the VitePress documentation.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/plugins/vitepress/quick-start.mdx#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"predocs\": \"typedoc\"\n\"docs:dev\": \"vitepress dev\",\n\"docs:build\": \"vitepress build\"\n```\n\n----------------------------------------\n\nTITLE: Configuring classPropertiesFormat Option in TypeDoc\nDESCRIPTION: This configuration option specifies the output format for class properties. Accepts one of 'list', 'table', or 'htmlTable', defaulting to 'list'.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/docs/options/display-options.mdx#_snippet_10\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"classPropertiesFormat\": \"list\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing frontmatterCommentTags Option\nDESCRIPTION: This TypeScript snippet defines the configuration for the `frontmatterCommentTags` Typedoc option. It specifies that comment block tags can be added to frontmatter and sets the parameter type as an array.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-frontmatter/options/namespaces/declarations/README.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    help: 'Specify which comment block tags should be added to frontmatter.',\n    type: ParameterType.Array,\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Exclude Scopes in Paths in TypeDoc JSON\nDESCRIPTION: This JSON snippet configures the generation of file paths. By default, directories are split by scopes when generating file paths. Setting `excludeScopesInPaths` to `false` ensures that the `@scope` reference is included in the path when generating files and directories.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/docs/options/file-options.mdx#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"excludeScopesInPaths\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Block Tags with TypeDoc Option in TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates how to extend the default block tags recognized by TypeDoc using the `--blockTags` option in a JavaScript configuration file. It imports `OptionDefaults` and adds `@description` and `@author` to the list of allowed tags, effectively suppressing the warning for these tags.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/plugins/frontmatter/block-tags-warning.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OptionDefaults } from 'typedoc';\n\nconst config = {\n  blockTags: [...OptionDefaults.blockTags, '@description', '@author'],\n};\n```\n\n----------------------------------------\n\nTITLE: Configure frontmatter naming convention in typedoc.json\nDESCRIPTION: This JSON snippet shows how to configure the 'frontmatterNamingConvention' option in typedoc.json. It specifies the naming convention for frontmatter variables. Options are 'camelCase' (default) or 'snakeCase'.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/plugins/frontmatter/options.mdx#_snippet_8\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"frontmatterNamingConvention\": \"camelCase\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing typedoc-plugin-frontmatter using npm\nDESCRIPTION: This command installs the typedoc-plugin-frontmatter as a development dependency using npm. The `--save-dev` flag ensures it's added to the `devDependencies` section of the `package.json` file. It prepares the project to utilize frontmatter within TypeDoc documentation.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/plugins/frontmatter/quick-start.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install typedoc-plugin-frontmatter --save-dev\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeDoc to use Markdown Plugins\nDESCRIPTION: This JSON configuration file (`typedoc.json`) instructs TypeDoc to load and use the `typedoc-plugin-markdown` and `typedoc-plugin-remark` plugins when generating documentation. The `plugin` array specifies the names of the plugins to be loaded.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/plugins/remark/quick-start.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugin\": [\"typedoc-plugin-markdown\", \"typedoc-plugin-remark\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Frontmatter Naming Convention Enum (TypeScript)\nDESCRIPTION: This code defines an enumeration called `FrontmatterNamingConvention` with two members: `CamelCase` and `SnakeCase`. This enum is used to specify the naming convention for frontmatter keys generated by the typedoc-plugin-frontmatter.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-frontmatter/options/namespaces/maps/README.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * Defines option maps TypeDoc parameter Map types.\n */\n\n\n\n/**\n * Naming convention for frontmatter keys.\n */\nexport enum FrontmatterNamingConvention {\n  /**\n   * Use camel case naming convention.\n   */\n  CamelCase = 'camelCase',\n  /**\n   * Use snake case naming convention.\n   */\n  SnakeCase = 'snakeCase',\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing parametersFormat Declaration Option - Typescript\nDESCRIPTION: Initializes the `parametersFormat` declaration option. This option specifies the output format for parameters and type parameters. It uses a `ParameterType.Map` with possible values from the `DisplayFormat` enum and defaults to `DisplayFormat.List`.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-markdown/options/namespaces/declarations/README.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    help: 'Sets the format of parameter and type parameter groups.',\n    type: ParameterType.Map,\n    map: DisplayFormat,\n    defaultValue: DisplayFormat.List,\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeDoc Router to 'kind' in typedoc.json\nDESCRIPTION: This JSON snippet demonstrates configuring the TypeDoc router to 'kind'. The typedoc-plugin-markdown decorates core routers to fix the '.html' extension and add support for the plugin's file options. Using this router allows generating Markdown output with the same structure as the default HTML theme.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/docs/output-file-structure.mdx#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"router\": \"kind\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting File Extension in TypeDoc JSON\nDESCRIPTION: This JSON snippet configures the file extension for the generated Markdown files. It sets the `fileExtension` option to `.mdx`, which is useful for compatibility with Markdown parsers that require this extension.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/docs/options/file-options.mdx#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"fileExtension\": \".mdx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Plugin with the CLI\nDESCRIPTION: This command uses the TypeDoc CLI to generate documentation.  The `--plugin typedoc-plugin-markdown` option loads the markdown plugin and the `--out ./docs` option specifies that documentation should be output to the ./docs directory. The plugin generates markdown files instead of the default HTML.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/docs/quick-start.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ntypedoc --plugin typedoc-plugin-markdown --out ./docs\n```\n\n----------------------------------------\n\nTITLE: Page Title Templates Example JavaScript\nDESCRIPTION: Example showing how to configure page title templates within the `typedoc.cjs` configuration file. It defines templates for index, module, and member pages using placeholders and function arguments.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-markdown/options/namespaces/declarations/README.md#_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\npageTitleTemplates: {\n index: (args) => `${args.projectName}: ${args.version}`,\n module: (args) => args.name,\n member: (args) => `${args.kind}: ${args.name}`,\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing and Writing TypeDoc Navigation to JSON (TypeScript)\nDESCRIPTION: This snippet demonstrates how to access the TypeDoc navigation structure within a custom plugin using the `postRenderAsyncJobs` feature.  It retrieves the navigation object from the renderer, converts it to a JSON string, and writes it to a file named `navigation.json`. This allows developers to create custom navigation implementations by consuming the JSON structure.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/docs/utilizing-navigation.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// @ts-check\n\nimport { MarkdownApplication } from 'typedoc-plugin-markdown';\n\n/**\n * @param {import('typedoc-plugin-markdown').MarkdownApplication} app\n */\nexport function load(app) {\n  app.renderer.postRenderAsyncJobs.push(async (renderer) => {\n    // The navigation JSON structure is available on the navigation object.\n    const navigation = renderer.navigation;\n\n    // This can be parsed to something else or written straight to a file:\n    fs.writeFileSync('navigation.json', JSON.stringify(navigation));\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing expandObjects Declaration Option - Typescript\nDESCRIPTION: Initializes the `expandObjects` declaration option.  This option controls whether object declarations are expanded or collapsed. It's a boolean value, defaulting to `false` (collapsed).\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-markdown/options/namespaces/declarations/README.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    help: 'Expand objects inside declarations.',\n    type: ParameterType.Boolean,\n    defaultValue: false,\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Sidebar into Autogenerated Sidebar\nDESCRIPTION: Illustrates how to inject the generated `typedoc-sidebar.cjs` file into an autogenerated Docusaurus sidebar using the `sidebarItemsGenerator` function in `docusaurus.config.js`. This is done by mapping over the default sidebar items and replacing the items of a specific category (identified by `link.id === 'api/index'`) with the contents of the required CJS file. Requires Docusaurus.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/plugins/docusaurus/guides/sidebar.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction injectTypeDocSidebar(items) {\n  return items.map((item) => {\n    if (item.link?.id === 'api/index') {\n      return {\n        ...item,\n        items: require('./docs/api/typedoc-sidebar.cjs'),\n      };\n    }\n    return item;\n  });\n}\n\npresets: [\n    [\n      'classic',\n      /** @type {import('@docusaurus/preset-classic').Options} */\n      ({\n        docs: {\n          async sidebarItemsGenerator({\n            defaultSidebarItemsGenerator,\n            ...args\n          }) {\n            return injectTypeDocSidebar(\n              await defaultSidebarItemsGenerator(args),\n            );\n          },\n        },\n      }),\n    ],\n  ],\n```\n\n----------------------------------------\n\nTITLE: Initializing useCodeBlocks Declaration Option - Typescript\nDESCRIPTION: Initializes the `useCodeBlocks` declaration option.  This option determines whether signatures and declarations are wrapped in code blocks in the generated Markdown.  It is a boolean value with a default value of false.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-markdown/options/namespaces/declarations/README.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    help: 'Wraps signatures and declarations in code blocks.',\n    type: ParameterType.Boolean,\n    defaultValue: false,\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring hidePageTitle Option in TypeDoc\nDESCRIPTION: This configuration option determines whether to display the page title in the generated documentation. Setting it to `true` will hide the page title; `false` (default) will show it.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/docs/options/display-options.mdx#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"hidePageTitle\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeDoc Router to 'module' in typedoc.json\nDESCRIPTION: This JSON snippet configures the TypeDoc router option to 'module'. It instructs the typedoc-plugin-markdown plugin to generate a single Markdown file for each module and namespace, consolidating all module members into that file. This results in a flat navigation structure and reduces the number of files generated. It is equivalent to the deprecated `outputFileStrategy=\"modules\"`.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/docs/output-file-structure.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"router\": \"module\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing preserveFrontmatterCommentTags Option\nDESCRIPTION: This TypeScript snippet defines the configuration for the `preserveFrontmatterCommentTags` Typedoc option. It determines whether tags defined in frontmatter block tags are preserved in the output.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-frontmatter/options/namespaces/declarations/README.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    help: 'Preserve tags defined in frontmatter block tags in output.',\n    type: ParameterType.Boolean,\n    defaultValue: false,\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing hidePageTitle Declaration Option - Typescript\nDESCRIPTION: Initializes the `hidePageTitle` declaration option.  This option configures whether the page title is printed in the generated Markdown output. It is a boolean value with a default value of false.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-markdown/options/namespaces/declarations/README.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    help: 'Do not print page title.',\n    type: ParameterType.Boolean,\n    defaultValue: false,\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring typeAliasPropertiesFormat Option in TypeDoc\nDESCRIPTION: This configuration option specifies the output format for type alias properties. Accepts one of 'list', 'table', or 'htmlTable', defaulting to 'list'.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/docs/options/display-options.mdx#_snippet_11\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"typeAliasPropertiesFormat\": \"list\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing blockTagsPreserveOrder Declaration Option - Typescript\nDESCRIPTION: Initializes the `blockTagsPreserveOrder` declaration option. This option specifies comment block tags that should preserve their position in the generated markdown.  It's an array of strings, defaulting to an empty array, and includes a validation function.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-markdown/options/namespaces/declarations/README.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n[\"@example\", \"@deprecated\"]\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    help: 'Specifies comment block tags that should preserve their position.',\n    type: ParameterType.Array,\n    defaultValue: [],\n    validate(value, i18n) {\n        if (!value.every((tag) => typeof tag === 'string' && /^@[a-zA-Z][a-zA-Z0-9]*$/.test(tag))) {\n            throw new Error(i18n.option_0_values_must_be_array_of_tags('blockTags'));\n        }\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing excludeScopesInPaths Option - TypeScript\nDESCRIPTION: Initializes the `excludeScopesInPaths` option, which removes references to `@scope` in file paths when generating directories. This option affects the directory structure for packages named with a scope (e.g., `@scope/package-1`). The option is ignored if `flattenOutputFiles` is set to `true`.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-markdown/options/namespaces/declarations/README.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    help: 'Exclude writing @ scope directories in paths.',\n    type: ParameterType.Boolean,\n    defaultValue: false,\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring enumMembersFormat Option in TypeDoc\nDESCRIPTION: This configuration option specifies the output format for enumeration members. Accepts one of 'list', 'table', or 'htmlTable', defaulting to 'list'.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/docs/options/display-options.mdx#_snippet_12\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"enumMembersFormat\": \"list\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing entryFileName Option - TypeScript\nDESCRIPTION: Initializes the `entryFileName` option, which defines the filename for the root page of the documentation and each module directory (equivalent to `index.html`). The default value is `README`, suitable for repos and Wikis, but `index` may be preferred for static site generators. This option controls the name of the main entry point for the documentation.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-markdown/options/namespaces/declarations/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    help: 'The file name of the entry page.',\n    type: ParameterType.String,\n    defaultValue: 'README',\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing modulesFileName Option - TypeScript\nDESCRIPTION: Initializes the `modulesFileName` option, which specifies the filename for the separate modules or index page. This option is not applicable when the `--readme` option is set to `none` or `--mergeReadme` is set to `true`. It determines the filename used for the modules index page in the generated documentation.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-markdown/options/namespaces/declarations/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    help: 'The file name of the separate modules / index page.',\n    type: ParameterType.String,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TypeDoc Plugin Presets in TypeScript\nDESCRIPTION: Defines a constant `presets` object with default configurations for TypeDoc plugin, including the plugins to use, the output directory (`out`), and several boolean flags to control UI elements like breadcrumbs and page headers.  It also sets the default entry file name to 'index.md'.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/docusaurus-plugin-typedoc/options/namespaces/presets/README.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst presets: object = {\n  plugin: ['typedoc-plugin-markdown', 'docusaurus-plugin-typedoc'],\n  out: './docs/api',\n  hideBreadcrumbs: true,\n  hidePageHeader: true,\n  entryFileName: 'index.md'\n};\n```\n\n----------------------------------------\n\nTITLE: Set global frontmatter variables in typedoc.json\nDESCRIPTION: This JSON snippet shows how to define global frontmatter variables using the 'frontmatterGlobals' option in typedoc.json. It sets the 'layout' to 'docs' and 'sidebar' to true for all generated markdown files.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/plugins/frontmatter/options.mdx#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"frontmatterGlobals\": {\n    \"layout\": \"docs\",\n    \"sidebar\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Sidebar Declaration Option Typescript\nDESCRIPTION: This code snippet defines the initializer for the `sidebar` declaration option. It includes a `help` string, a `type` specified as `ParameterType.Mixed`, a `defaultValue` set to `DEFAULT_SIDEBAR_OPTIONS`, and a `validate` function. The `validate` function checks if the provided value is an object and warns if invalid keys are present, comparing against available properties from `DEFAULT_SIDEBAR_OPTIONS`.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/docusaurus-plugin-typedoc/options/namespaces/declarations/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    help: 'Configures the autogenerated Docusaurus sidebar.',\n    type: ParameterType.Mixed,\n    defaultValue: DEFAULT_SIDEBAR_OPTIONS,\n    validate(value) {\n        if (typeof value !== 'object') {\n            console.warn('[typedoc-plugin-markdown] Sidebar must be an object.');\n        }\n        const invalidKeys = Object.keys(value as {}).filter((key) => !Object.keys(DEFAULT_SIDEBAR_OPTIONS).includes(key));\n        if (invalidKeys.length > 0) {\n            console.warn(`[typedoc-plugin-markdown] Invalid keys in sidebar options: ${invalidKeys.join(', ')}`);\n        }\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Syntax Highlighting Example in VitePress with JavaScript\nDESCRIPTION: Demonstrates JavaScript syntax highlighting with line highlighting using VitePress and Shikiji. The code snippet highlights line 4 of a JavaScript object definition.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devtools/examples/vitepress/markdown-examples.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  data () {\n    return {\n      msg: 'Highlighted!'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing mergeReadme Option - TypeScript\nDESCRIPTION: Initializes the `mergeReadme` option, which appends the documentation index page to the readme page, generating a single root page. By default, a separate readme page is created when a readme file is resolved. This option has no effect when the `--readme` option is set to `none`.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-markdown/options/namespaces/declarations/README.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    help: 'Appends the documentation index page to the readme page.',\n    type: ParameterType.Boolean,\n    defaultValue: false,\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring remark-github in typedoc.json\nDESCRIPTION: This JSON snippet demonstrates how to configure the remark-github plugin within the typedoc.json file. It shows how to specify the repository to link references to, enhancing the documentation with automatic GitHub links.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/plugins/remark/remark-plugins-usage.mdx#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"remarkPlugins\": [\"remark-github\", { \"repository\": \"myorg/myrepo\" }]\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Watch Mode in docusaurus.config.js with Environment Variables\nDESCRIPTION: This snippet shows how to integrate TypeDoc's watch mode into the `docusaurus.config.js` file. The `watch` option within the `docusaurus-plugin-typedoc` plugin configuration is dynamically set based on the `TYPEDOC_WATCH` environment variable. This allows for conditional enabling of watch mode based on the environment.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/plugins/docusaurus/guides/watch-mode.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    [\n      'docusaurus-plugin-typedoc',\n      {\n        entryPoints: ['../src/index.ts'],\n        tsconfig: '../tsconfig.json',\n        watch: process.env.TYPEDOC_WATCH,\n      },\n    ],\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Containers in VitePress\nDESCRIPTION: Illustrates the use of custom containers in VitePress, including 'info', 'tip', 'warning', 'danger', and 'details' blocks. These containers provide a way to highlight different types of content within a Markdown document.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devtools/examples/vitepress/markdown-examples.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n::: info\nThis is an info box.\n:::\n\n::: tip\nThis is a tip.\n:::\n\n::: warning\nThis is a warning.\n:::\n\n::: danger\nThis is a dangerous warning.\n:::\n\n::: details\nThis is a details block.\n:::\n```\n\n----------------------------------------\n\nTITLE: Initializing typeDeclarationVisibility option in TypeDoc Plugin Markdown\nDESCRIPTION: This code snippet initializes the `typeDeclarationVisibility` option, configuring the visibility level for type declaration documentation. It provides options for 'verbose' (full details) and 'compact' (summarized as JSON) documentation of nested types. The default value is set to 'Verbose'.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-markdown/options/namespaces/declarations/README.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    help: 'Set the visibility level for type declaration documentation.',\n    type: ParameterType.Map,\n    map: TypeDeclarationVisibility,\n    defaultValue: TypeDeclarationVisibility.Verbose,\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Frontmatter Globals Example\nDESCRIPTION: This TypeScript snippet shows an example of how `frontmatterGlobals` can be configured as a JSON object. This object defines global frontmatter variables that will be included in all generated documentation pages.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-frontmatter/options/namespaces/declarations/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\"layout\": \"docs\", \"sidebar\": true }\n```\n\n----------------------------------------\n\nTITLE: Basic Plugin Skeleton in Javascript\nDESCRIPTION: This is a basic plugin skeleton using Javascript. It imports MarkdownApplication from 'typedoc-plugin-markdown' and exports a load function that takes the application instance as an argument. The load function is where plugin logic should be added.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/docs/customizing-output.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// @ts-check\n\nimport { MarkdownApplication } from 'typedoc-plugin-markdown';\n\n/**\n * @param {import('typedoc-plugin-markdown').MarkdownApplication} app\n */\nexport function load(app) {\n  // do something with app instance\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing propertyMembersFormat option in TypeDoc Plugin Markdown\nDESCRIPTION: This code snippet initializes the `propertyMembersFormat` option, which controls the formatting style for property members in interfaces and classes. It offers options for list, table, and HTML table formats. The default setting is 'List'. This option is only effective when the property declaration is rendered in a 'list' format.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-markdown/options/namespaces/declarations/README.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    help: 'Sets the format of style for property members for interfaces and classes.',\n    type: ParameterType.Map,\n    map: DisplayFormat,\n    defaultValue: DisplayFormat.List,\n}\n```\n\n----------------------------------------\n\nTITLE: Define Custom Theme in TypeScript\nDESCRIPTION: This code snippet defines a new theme called “customTheme” and registers it with the TypeDoc application.  It uses the `defineTheme` method to associate the string 'customTheme' with the `MyMarkdownTheme` class. This allows TypeDoc to later instantiate the theme by name. The class `MyMarkdownTheme` extends `MarkdownTheme`.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/packages/typedoc-plugin-markdown/internal-docs/custom-theme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport function load(app) {\n  app.renderer.defineTheme('customTheme', MyMarkdownTheme);\n}\n\nclass MyMarkdownTheme extends MarkdownTheme {}\n```\n\n----------------------------------------\n\nTITLE: Initializing entryModule Option - TypeScript\nDESCRIPTION: Initializes the `entryModule` option, allowing a specific module (typically named `index`) to act as the root page of the documentation. The module name should be specified, not the file name. A separate modules index page will not be generated when using this option, which works better with navigation enabled.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-markdown/options/namespaces/declarations/README.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    help: 'The name of a module that should act as the root page for the documentation.',\n    type: ParameterType.String,\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing membersWithOwnFile Option - TypeScript\nDESCRIPTION: Initializes the `membersWithOwnFile` option, which specifies which types of members should be exported to their own file. This option is only effective when `outputFileStrategy` is set to `members`. It allows for fine-grained control over which members get dedicated files in the generated documentation.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-markdown/options/namespaces/declarations/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    help: 'Determines which members are exported to their own file.',\n    type: ParameterType.Array,\n    validate(values) {\n        const validValues = ALLOWED_OWN_FILE_MEMBERS;\n        for (const kind of values) {\n            if (!validValues.includes(kind)) {\n                throw new Error(`'${kind}' is an invalid value for 'membersWithOwnFile'. Allowed values are: ${validValues.join(', ')}`);\n            }\n        }\n    },\n    defaultValue: ALLOWED_OWN_FILE_MEMBERS,\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing anchorPrefix option in TypeDoc Plugin Markdown\nDESCRIPTION: This code snippet initializes the `anchorPrefix` option, allowing users to specify a custom anchor prefix when anchoring to in-page symbols. This is useful when parsers require a custom anchor prefix.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-markdown/options/namespaces/declarations/README.md#_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    help: 'Custom anchor prefix when anchoring to in-page symbols.',\n    type: ParameterType.String,\n    defaultValue: undefined,\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Encoding Option Configuration TypeScript\nDESCRIPTION: Configures the option to use HTML encoded entities for angle brackets in the generated documentation. By default, angle brackets are escaped with backslashes. This option provides an alternative for better compatibility with some Markdown processors.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-markdown/options/namespaces/declarations/README.md#_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    help: 'Use HTML encoded entities for angle brackets.',\n    type: ParameterType.Boolean,\n    defaultValue: false,\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeDoc to Use the Plugin\nDESCRIPTION: This JSON configuration shows how to integrate the custom remark plugin with TypeDoc by specifying the path to the plugin file in the `remarkPlugins` array. This allows TypeDoc to use the plugin during the documentation generation process.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/plugins/remark/writing-a-plugin.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"remarkPlugins\": [\"./my-custom-plugin.mjs\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Hook Definition (TypeScript)\nDESCRIPTION: Defines a hook function used to tap into the TypeDoc rendering pipeline. This allows theme developers to subscribe to various events and modify the output based on those events. The hook function accepts an event name and arguments specific to that event, then returns an array of strings.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-markdown/theme/classes/MarkdownThemeContext.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n> **hook**: \\<`K`\\>(`event`, ...`args`) => `string`[]\n\nDefined in: [packages/typedoc-plugin-markdown/src/theme/markdown-themeContext.ts:168](https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/packages/typedoc-plugin-markdown/src/theme/markdown-themeContext.ts#L168)\n\nHook into the TypeDoc rendering system.\n\nEmits an event to all currently subscribed listeners.\n\n#### Type Parameters\n\n| Type Parameter |\n| ------ |\n| `K` *extends* keyof [`MarkdownRendererHooks`](../../types/interfaces/MarkdownRendererHooks.md) |\n\n#### Parameters\n\n| Parameter | Type | Description |\n| ------ | ------ | ------ |\n| `event` | `K` | the event to emit. |\n| ...`args` | [`MarkdownRendererHooks`](../../types/interfaces/MarkdownRendererHooks.md)[`K`] | any arguments required for the event. |\n\n#### Returns\n\n`string`[]\n```\n\n----------------------------------------\n\nTITLE: Initializing sanitizeComments option in TypeDoc Plugin Markdown\nDESCRIPTION: This code snippet initializes the `sanitizeComments` option, which escapes angle brackets `<` `>` and curly braces `{` `}` inside JsDoc comments. This provides an additional layer of XSS security. The default value is set to false.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-markdown/options/namespaces/declarations/README.md#_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    help: 'Sanitize HTML and JSX inside JsDoc comments.',\n    type: ParameterType.Boolean,\n    defaultValue: false,\n}\n```\n\n----------------------------------------\n\nTITLE: Extending themes with custom context in TypeScript\nDESCRIPTION: Shows how to extend the theme by providing a custom render context class. This allows for custom partials, helpers, and templates to be defined, which can then be used during the rendering process. This snippet shows how to customize templates, partials and helpers.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-markdown/theme/documents/Custom Theme.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyMarkdownTheme extends MarkdownTheme {\n  getRenderContext(page) {\n    return new MyMarkdownThemeContext(this, page, this.application.options);\n  }\n}\n\nclass MyMarkdownThemeContext extends MarkdownThemeContext {\n  // customise templates\n  templates = {\n    ...this.templates,\n    reflection: (model) => {\n      return `New template for ${model.name}!`;\n    },\n  };\n\n  // customise partials\n  partials = {\n    ...this.partials,\n    header: (model) => {\n      return `\n# Welcome to custom header for ${this.page.project.name} project and ${model.name} model!\nUse my new helper - ${this.helpers.newHelper()}\n   `;\n    },\n  };\n\n  // customise helpers\n  helpers = {\n    ...this.helpers,\n    newHelper: () => {\n      return 'New helper!';\n    },\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing expandParameters Declaration Option - Typescript\nDESCRIPTION: Initializes the `expandParameters` declaration option.  This option determines whether parameters in signature definitions display full type information. It's a boolean value defaulting to `false` (only parameter name is displayed).\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-markdown/options/namespaces/declarations/README.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    help: 'Expand parameters in signature parentheses to display type information.',\n    type: ParameterType.Boolean,\n    defaultValue: false,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RemarkPlugin Type Alias - TypeScript\nDESCRIPTION: This snippet defines the `RemarkPlugin` type alias. It can be either a string or an array containing a string (representing a plugin name) and a configuration object (Record<string, any>). This allows for flexible configuration of remark plugins.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-remark/types/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype RemarkPlugin = string | [string, Record<string, any>];\n```\n\n----------------------------------------\n\nTITLE: Preset Typedoc Plugin Markdown Options\nDESCRIPTION: Defines a set of preset options for typedoc-plugin-markdown, configuring the output directory, hiding breadcrumbs and page headers, and setting the entry file name.  These settings provide a basic configuration for generating markdown documentation.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/plugins/docusaurus/options.mdx#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"out\": \"./docs/api\",\n  \"hideBreadcrumbs\": true,\n  \"hidePageHeader\": true,\n  \"entryFileName\": \"index.md\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing typeDeclarationFormat option in TypeDoc Plugin Markdown\nDESCRIPTION: This code snippet initializes the `typeDeclarationFormat` option, which specifies the output format for type declarations of variables and type aliases. The available formats are list, table, and HTML table. The default format is set to 'List'.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-markdown/options/namespaces/declarations/README.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    help: 'Sets the format of style for type declaration members.',\n    type: ParameterType.Map,\n    map: DisplayFormat,\n    defaultValue: DisplayFormat.List,\n}\n```\n\n----------------------------------------\n\nTITLE: project Template Definition (TypeScript)\nDESCRIPTION: Defines the `project` template, which maps to the root project reflection. This template is used to render the index page/documentation root. It accepts a `page` parameter of type `MarkdownPageEvent<ProjectReflection>` and returns a string.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-markdown/theme/classes/MarkdownThemeContext.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n#### project()\n\n> **project**: (`page`) => `string`\n\nTemplate that maps to the root project reflection. This will be the index page / documentation root page.\n\n##### Parameters\n\n| Parameter | Type |\n| ------ | ------ |\n| `page` | [`MarkdownPageEvent`](../../events/classes/MarkdownPageEvent.md)\\<[`ProjectReflection`](https://typedoc.org/api/classes/Models.ProjectReflection.html)\\> |\n\n##### Returns\n\n`string`\n```\n\n----------------------------------------\n\nTITLE: Initializing the plugin - load() - TypeScript\nDESCRIPTION: The `load` function is responsible for initializing the plugin within the TypeDoc application. It accepts a `MarkdownApplication` object as a parameter, which provides access to the TypeDoc environment and configuration. This function is the entry point for the plugin's functionality.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-github-wiki-theme/core/README.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * \t@param app\n */\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Remark Stringify Options (JSON)\nDESCRIPTION: This JSON snippet shows how to configure the `remark-stringify` plugin.  The `remarkStringifyOptions` field accepts a key-value object that allows customization of the markdown serialization process, such as bullet style and fence style.  The example sets the bullet style to \"+\" and the fence style to \"~\".\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/plugins/remark/options.mdx#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"remarkStringifyOptions\": {\n    \"bullet\": \"+\",\n    \"fence\": \"~\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing enumMembersFormat option in TypeDoc Plugin Markdown\nDESCRIPTION: This code snippet initializes the `enumMembersFormat` option, which determines the output format for enumeration members in the generated Markdown documentation. It allows users to choose between list, table, or HTML table formats. The default value is set to 'List'.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-markdown/options/namespaces/declarations/README.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    help: 'Sets the format of enumeration members.',\n    type: ParameterType.Map,\n    map: DisplayFormat,\n    defaultValue: DisplayFormat.List,\n}\n```\n\n----------------------------------------\n\nTITLE: Preset Configuration Object in TypeScript\nDESCRIPTION: Defines a configuration object with default settings for the typedoc-vitepress-theme. The settings include hiding the page header, setting the entry file name to 'index.md', and setting the output directory to './api'.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-vitepress-theme/options/namespaces/presets/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Defined in: [options/presets.ts:1](https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/packages/typedoc-vitepress-theme/src/options/presets.ts#L1)\n */\nconst presets: {\n  hidePageHeader: boolean;\n  entryFileName: string;\n  out: string;\n} = {\n  hidePageHeader: true,\n  entryFileName: 'index.md',\n  out: './api'\n};\n```\n\n----------------------------------------\n\nTITLE: Define YAML frontmatter layout and sidebar\nDESCRIPTION: This YAML snippet demonstrates how to define the layout and sidebar properties within a frontmatter block. It specifies the 'docs' layout and enables the sidebar.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/plugins/frontmatter/options.mdx#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n---\nlayout: docs\nsidebar: true\n---\n```\n\n----------------------------------------\n\nTITLE: Page Title Templates Configuration TypeScript\nDESCRIPTION: Configures custom page title templates for index, module, and member pages in the documentation. Templates can be strings with placeholders or functions with input arguments for dynamic title generation.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-markdown/options/namespaces/declarations/README.md#_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    help: 'Change specific text placeholders in the template.',\n    type: ParameterType.Object,\n    defaultValue: DEFAULT_PAGE_TITLES,\n    configFileOnly: true,\n    validate(value) {\n        if (!value || typeof value !== 'object') {\n            throw new Error('[typedoc-plugin-markdown] textContentMappings must be an object.');\n        }\n        for (const val of Object.values(value)) {\n            if (typeof val !== 'string' && typeof val !== 'function') {\n                throw new Error(`[typedoc-plugin-markdown] All values of textContentMappings must be strings or functions.`);\n            }\n        }\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Table - TypeScript\nDESCRIPTION: This function creates a markdown table from the provided headers and rows. It allows customizing header alignment. It takes arrays of strings for headers and rows, and a boolean for header alignment. The function returns the formatted markdown table string.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-markdown/libs/namespaces/markdown/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Comments for table\n *\n * @param headers\n * @param rows\n * @param headerLeftAlign\n * @returns string\n */\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter with Block Tags\nDESCRIPTION: This YAML code illustrates the expected output when using block tags in TypeScript comments. The `@author` and `@description` tags are extracted and added to the frontmatter block.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-frontmatter/options/namespaces/declarations/README.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n---\nauthor: Joe Bloggs\ndescription: A description that will be added to frontmatter.\n---\n```\n\n----------------------------------------\n\nTITLE: TypeScript Readme Frontmatter Example\nDESCRIPTION: This TypeScript snippet shows an example of how `readmeFrontmatter` can be configured as a JSON object. This object defines frontmatter variables specific to the readme page.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-frontmatter/options/namespaces/declarations/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\"onReadme\": \"true\" }\n```\n\n----------------------------------------\n\nTITLE: Anchor Casing Option Configuration TypeScript\nDESCRIPTION: Configures the option to preserve the casing of anchor links when generating documentation. By default, anchor links are lowercased.  This is necessary for documentation engines that require case-sensitive anchor links.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-markdown/options/namespaces/declarations/README.md#_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    help: 'Preserve anchor casing when generating link to symbols.',\n    type: ParameterType.Boolean,\n    defaultValue: false,\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing readmeFrontmatter Option\nDESCRIPTION: This TypeScript snippet defines the configuration for the `readmeFrontmatter` Typedoc option.  It includes help text, the parameter type, default value and validation function to ensure the value is an object.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-frontmatter/options/namespaces/declarations/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    help: 'Specify static variables to be added to the readme page only.',\n    type: ParameterType.Object,\n    defaultValue: {},\n    validate(value) {\n        if (typeof value !== 'object') {\n            throw new Error('[typedoc-plugin-frontmatter] readmeFrontmatter must be an object.');\n        }\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing formatWithPrettier option in TypeDoc Plugin Markdown\nDESCRIPTION: This code snippet initializes the `formatWithPrettier` option, which enables the integration of Prettier for additional output formatting. It formats code blocks, aligns table cells, removes unnecessary escape characters, and wraps long lines. Prettier must be installed separately. The default value is set to false.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-markdown/options/namespaces/declarations/README.md#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    help: 'Apply additional output formatting with Prettier.',\n    type: ParameterType.Boolean,\n    defaultValue: false,\n}\n```\n\n----------------------------------------\n\nTITLE: Default Plugin Function in docusaurus.ts\nDESCRIPTION: The default function serves as the main entry point for the Docusaurus plugin. It receives the Docusaurus context and plugin options as parameters, and returns a promise containing the plugin's name and a function to extend the CLI.  It configures the plugin and sets up the integration with Docusaurus.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/docusaurus-plugin-typedoc/core/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * > **default**(`context`, `opts`): `Promise`<\\{ `name`: `string`; `extendCli`: `void`; \\}>\n *\n * Defined in: [docusaurus-plugin-typedoc/src/plugin/docusaurus.ts:7](https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/packages/docusaurus-plugin-typedoc/src/plugin/docusaurus.ts#L7)\n */\n```\n\n----------------------------------------\n\nTITLE: Accessing VitePress Data with useData() in Markdown\nDESCRIPTION: This snippet demonstrates how to import and use the `useData` API from `vitepress` within a `<script setup>` block in a Markdown file. It retrieves the `theme`, `page`, and `frontmatter` data objects and makes them available for use in the template.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devtools/examples/vitepress/api-examples.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n<script setup>\nimport { useData } from 'vitepress'\n\nconst { theme, page, frontmatter } = useData()\n</script>\n\n## Results\n\n### Theme Data\n<pre>{{ theme }}</pre>\n\n### Page Data\n<pre>{{ page }}</pre>\n\n### Page Frontmatter\n<pre>{{ frontmatter }}</pre>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Block Tags Example\nDESCRIPTION: This TypeScript code demonstrates how block tags can be used within comments to add variables to the frontmatter.  These tags should be present within the comment block of the symbol exported to a page.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-frontmatter/options/namespaces/declarations/README.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * \\@author Joe Bloggs\n *\n * \\@description A description that will be added to frontmatter.\n */\n```\n\n----------------------------------------\n\nTITLE: Initializing tableColumnSettings option in TypeDoc Plugin Markdown\nDESCRIPTION: This code snippet initializes the `tableColumnSettings` option. This option allows you to control the visibility of columns, prioritizing readability over displaying complete data. In addition you can control the alignment of the header text.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-markdown/options/namespaces/declarations/README.md#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    help: 'Control how table columns are configured and displayed.',\n    type: ParameterType.Flags,\n    defaults: {\n        hideDefaults: false,\n        hideInherited: false,\n        hideModifiers: false,\n        hideOverrides: false,\n        hideSources: false,\n        hideValues: false,\n        leftAlignHeaders: false,\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: reflection Template Definition (TypeScript)\nDESCRIPTION: Defines the `reflection` template, which is used to render individual reflection models within the documentation.  It takes a `page` of type `MarkdownPageEvent<DeclarationReflection>` as a parameter and returns a string representing the rendered reflection.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-markdown/theme/classes/MarkdownThemeContext.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n#### reflection()\n\n> **reflection**: (`page`) => `string`\n\nTemplate that maps to individual reflection models.\n\n##### Parameters\n\n| Parameter | Type |\n| ------ | ------ |\n| `page` | [`MarkdownPageEvent`](../../events/classes/Models.DeclarationReflection.html)\\> |\n\n##### Returns\n\n`string`\n```\n\n----------------------------------------\n\nTITLE: Sidebar Configuration in typedoc.json\nDESCRIPTION: This JSON snippet configures the sidebar generation within the typedoc.json file for the typedoc-plugin-markdown plugin. It enables automatic sidebar configuration and sets the sidebar heading to 'API'. This allows for customization of the navigation sidebar in the generated documentation.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/plugins/gitlab-wiki/options.mdx#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"sidebar\": {\n    \"autoConfiguration\": true,\n    \"heading\": \"API\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring expandParameters Option in TypeDoc\nDESCRIPTION: This configuration option determines whether to expand parameters in signature parentheses to display type information. By default only the parameter name is displayed. Setting this to `true` will show full type information.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/docs/options/display-options.mdx#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"expandParameters\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Resolved Tags - Typescript\nDESCRIPTION: This function retrieves and resolves tags from a TypeDoc application and comment. It takes the application instance and an optional comment as input. It returns an object containing the resolved tags. The MarkdownApplication type and Comment class are dependencies.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-frontmatter/tags/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetResolvedTags(`app`, `comment`?): `object`\n```\n\n----------------------------------------\n\nTITLE: readme Template Definition (TypeScript)\nDESCRIPTION: Defines the `readme` template, which is specifically used for the resolved README file.  This template is not used when the 'readme' option is set to 'none'. It takes a `page` of type `MarkdownPageEvent<ProjectReflection>` and returns a string.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-markdown/theme/classes/MarkdownThemeContext.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n#### readme()\n\n> **readme**: (`page`) => `string`\n\nTemplate that specifically maps to the resolved readme file. This template is not used when 'readme' is set to 'none'.\n\n##### Parameters\n\n| Parameter | Type |\n| ------ | ------ |\n| `page` | [`MarkdownPageEvent`](../../events/classes/MarkdownPageEvent.md)\\<[`ProjectReflection`](https://typedoc.org/api/classes/Models.ProjectReflection.html)\\> |\n\n##### Returns\n\n`string`\n```\n\n----------------------------------------\n\nTITLE: Initializing hideBreadcrumbs Declaration Option - Typescript\nDESCRIPTION: Initializes the `hideBreadcrumbs` declaration option.  This option determines whether breadcrumbs are displayed in the generated Markdown output. It is a boolean value with a default value of false.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-markdown/options/namespaces/declarations/README.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    help: 'Do not print breadcrumbs.',\n    type: ParameterType.Boolean,\n    defaultValue: false,\n}\n```\n\n----------------------------------------\n\nTITLE: Start Local Development Server\nDESCRIPTION: This command starts a local development server for the Docusaurus website. It automatically opens a browser window and provides live updates as changes are made to the project files.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devtools/examples/docusaurus/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn start\n```\n\n----------------------------------------\n\nTITLE: Styling Deprecated Sidebar Items with CSS\nDESCRIPTION: Shows how to style deprecated sidebar items in a Docusaurus sidebar using CSS. A specific CSS class name (`.typedoc-sidebar-item-deprecated`) is attached to deprecated items, which can then be styled using CSS rules. This example applies a line-through text decoration to deprecated items.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/plugins/docusaurus/guides/sidebar.mdx#_snippet_3\n\nLANGUAGE: CSS\nCODE:\n```\n.typedoc-sidebar-item-deprecated {\n  text-decoration: line-through;\n}\n```\n\n----------------------------------------\n\nTITLE: Default Remark Plugins Option Initializer in TypeScript\nDESCRIPTION: This code defines the initializer for the `defaultRemarkPlugins` option, specifying its help text, type (Flags), and default values (gfm, frontmatter, and mdx set to true). This option allows users to enable or disable the default remark plugins that are loaded.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-remark/options/namespaces/declarations/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    help: 'A set of flags that control the enabling or disabling of remark plugins that are loaded by default.',\n    type: ParameterType.Flags,\n    defaults: {\n        gfm: true,\n        frontmatter: true,\n        mdx: true,\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Frontmatter Tags - Typescript\nDESCRIPTION: This function generates frontmatter tags based on a comment, a list of frontmatter tags, and a naming convention. It takes a Comment object, an array of tag strings, and a naming convention as input. It returns an object representing the frontmatter tags. Dependencies include the Comment class and FrontmatterNamingConvention type.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-frontmatter/tags/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetFrontmatterTags(`comment`, `frontmatterTags`, `namingConvention`): `object`\n```\n\n----------------------------------------\n\nTITLE: Build Static Website Content\nDESCRIPTION: This command generates static content for the Docusaurus website and outputs it to the `build` directory. This content can then be served using any static content hosting service.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devtools/examples/docusaurus/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn build\n```\n\n----------------------------------------\n\nTITLE: Sidebar Type Declaration - TypeScript\nDESCRIPTION: This TypeScript code snippet showcases the type declaration within the `sidebar` object. It defines 'help', 'type', and 'defaultValue' properties, specifying the data type and default value for each. This configuration controls the sidebar generation process.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-gitlab-wiki-theme/options/namespaces/declarations/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * #### Type declaration\n *\n * | Name | Type | Default value |\n * | ------ | ------ | ------ |\n * | <a id=\"help-2\"></a> `help` | `string` | 'Configures the autogenerated `_Sidebar.md file`.' |\n * | <a id=\"type-2\"></a> `type` | `ParameterType` | ParameterType.Mixed |\n * | <a id=\"defaultvalue-2\"></a> `defaultValue` | `any` | DEFAULT_SIDEBAR_OPTIONS |\n */\n```\n\n----------------------------------------\n\nTITLE: Setting up MarkdownRenderer in TypeDoc plugin\nDESCRIPTION: The `setupRenderer` function configures the TypeDoc application for markdown rendering. It creates dedicated hooks and async job collections for markdown rendering. The function accepts a TypeDoc `Application` instance as its parameter.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-markdown/renderer/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Create dedicated hooks and async job collections for markdown rendering.\n */\n\n/** @param app */\n```\n\n----------------------------------------\n\nTITLE: Build Static Website Content\nDESCRIPTION: This command generates static content for the Docusaurus website into the `build` directory. This content can then be served using any static content hosting service.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devtools/examples/docusaurus-ts/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn build\n```\n\n----------------------------------------\n\nTITLE: Configure TypeDoc Plugin Markdown with JavaScript\nDESCRIPTION: This snippet illustrates how to configure TypeDoc and the typedoc-plugin-markdown plugin using a JavaScript file. It utilizes a JSDoc `@type` annotation to provide TypeScript type checking and autocompletion within JavaScript. It combines TypeDoc options with the plugin options using intersection types. It specifies the entry points, output directory, and plugins.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/docs/option-typings.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// @ts-check\n\n/** @type {import('typedoc').TypeDocOptions & import('typedoc-plugin-markdown').PluginOptions} */\nmodule.exports = {\n  entryPoints: ['./src/index.ts', './src/secondary-entry.ts'],\n  out: 'doc',\n  plugin: ['typedoc-plugin-markdown', 'some-other-plugin']\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing indexFrontmatter Option\nDESCRIPTION: This TypeScript snippet defines the configuration for the `indexFrontmatter` Typedoc option. It includes help text, the parameter type, default value, and a validation function to ensure the value is an object.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-frontmatter/options/namespaces/declarations/README.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    help: 'Specify static variables to be added to the index page only.',\n    type: ParameterType.Object,\n    defaultValue: {},\n    validate(value) {\n        if (typeof value !== 'object') {\n            throw new Error('[typedoc-plugin-frontmatter] indexFrontmatter must be an object.');\n        }\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a new TypeDoc option in TypeScript\nDESCRIPTION: This code snippet demonstrates how to declare a new TypeDoc option within the `src/options/declarations.ts` file. It defines the option's help text, type, and default value. The `@category` tag is used to categorize the option in the documentation.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-markdown/options/documents/Adding options.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Some more detailed comments about the option.\n *\n * @category Display\n */\nexport const myNewOption: Partial<DeclarationOption> = {\n  help: 'A short description of the option.',\n  type: ParameterType.Boolean,\n  defaultValue: false,\n};\n```\n\n----------------------------------------\n\nTITLE: Running Tests with npm\nDESCRIPTION: This command executes the full test suite, including generating fixtures, running validation scripts, and triggering Jest spec files. It relies on a `prebuild` task to generate fixtures.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/packages/typedoc-plugin-markdown/internal-docs/test-and-validation.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Initializing prettierConfigFile option in TypeDoc Plugin Markdown\nDESCRIPTION: This code snippet initializes the `prettierConfigFile` option, allowing users to specify a custom Prettier configuration file location. It's applicable only when `formatWithPrettier` is set to true. By default, Prettier uses the options resolved from a discovered Prettier configuration file.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-markdown/options/namespaces/declarations/README.md#_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    help: 'Specify a custom Prettier configuration file location.',\n    type: ParameterType.Path,\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Snapshots with npm\nDESCRIPTION: This command updates the snapshot source and adds a test in the relevant spec file, useful when code changes require new snapshots to be generated.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/packages/typedoc-plugin-markdown/internal-docs/test-and-validation.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test:update\n```\n\n----------------------------------------\n\nTITLE: Initializing frontmatterGlobals Option\nDESCRIPTION: This TypeScript snippet defines the configuration for the `frontmatterGlobals` Typedoc option. It includes the help text, parameter type, default value, and a validation function to ensure the value is an object.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-frontmatter/options/namespaces/declarations/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    help: 'Specify static variables to be added to all frontmatter blocks.',\n    type: ParameterType.Object,\n    defaultValue: {},\n    validate(value) {\n        if (typeof value !== 'object') {\n            throw new Error('[typedoc-plugin-frontmatter] frontmatterGlobals must be an object.');\n        }\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: VitePress Home Page YAML Configuration\nDESCRIPTION: This YAML snippet configures the home page layout, hero section (including name, text, tagline, and action buttons), and feature sections (with titles and details) for a VitePress site. It utilizes the default theme's home page layout.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devtools/examples/vitepress/index.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n---\n# https://vitepress.dev/reference/default-theme-home-page\nlayout: home\n\nhero:\n  name: \"My Awesome Project\"\n  text: \"A VitePress Site\"\n  tagline: My great project tagline\n  actions:\n    - theme: brand\n      text: Markdown Examples\n      link: /markdown-examples\n    - theme: alt\n      text: API Examples\n      link: /api-examples\n\nfeatures:\n  - title: Feature A\n    details: Lorem ipsum dolor sit amet, consectetur adipiscing elit\n  - title: Feature B\n    details: Lorem ipsum dolor sit amet, consectetur adipiscing elit\n  - title: Feature C\n    details: Lorem ipsum dolor sit amet, consectetur adipiscing elit\n---\n```\n\n----------------------------------------\n\nTITLE: Initializing ALLOWED_OWN_FILE_MEMBERS in TypeScript\nDESCRIPTION: This code snippet initializes the `ALLOWED_OWN_FILE_MEMBERS` constant, which defines the default reflection kinds that are allowed to have their own files. It uses an array of `ReflectionKind` enum values converted to strings. This constant is used for the `membersWithOwnFile` option.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-markdown/options/namespaces/constants/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n[\n    ReflectionKind[ReflectionKind.Enum],\n    ReflectionKind[ReflectionKind.Variable],\n    ReflectionKind[ReflectionKind.Function],\n    ReflectionKind[ReflectionKind.Class],\n    ReflectionKind[ReflectionKind.Interface],\n    ReflectionKind[ReflectionKind.TypeAlias],\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Remark Plugins in TypeScript\nDESCRIPTION: This code demonstrates how to configure remark plugins using an array of strings or an array of strings with associated options. Each plugin used must be installed individually.  An error is thrown if the value is not an array.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-remark/options/namespaces/declarations/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n[\"remark-github\", [\"remark-toc\", { \"maxDepth\": 3 }] ]\n```\n\n----------------------------------------\n\nTITLE: Configure Docusaurus for CommonMark parsing in JavaScript\nDESCRIPTION: This code snippet configures Docusaurus to use CommonMark parsing instead of the default MDX. It sets the `format` option to 'detect' within the `markdown` configuration in `docusaurus.config.js`. This allows for more relaxed Markdown parsing.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/plugins/docusaurus/guides/mdx.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmarkdown: {\n    format: 'detect',\n}\n```\n\n----------------------------------------\n\nTITLE: YAML output with frontmatter variables\nDESCRIPTION: This YAML snippet shows the output after extracting comment block tags into frontmatter. The 'author' and 'description' variables are added to the frontmatter block.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/plugins/frontmatter/options.mdx#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\n---\nauthor: Joe Bloggs\ndescription: A description that will be added to frontmatter.\n---\n```\n\n----------------------------------------\n\nTITLE: Installing remark-github using npm/yarn\nDESCRIPTION: This command installs the remark-github plugin as a development dependency using npm or yarn. remark-github automatically links references to commits, issues, and users in your documentation, similar to how GitHub does in comments.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/plugins/remark/remark-plugins-usage.mdx#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install remark-github --save-dev\n```\n\n----------------------------------------\n\nTITLE: Deploy Website using SSH\nDESCRIPTION: This command deploys the Docusaurus website to GitHub Pages using SSH. The `USE_SSH` environment variable must be set to `true` to enable SSH deployment.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devtools/examples/docusaurus-ts/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ USE_SSH=true yarn deploy\n```\n\n----------------------------------------\n\nTITLE: Cloning Git Repository\nDESCRIPTION: Clones the typedoc-plugin-markdown repository from GitHub to the local machine.  The <your-username> placeholder should be replaced with the user's actual GitHub username. This step is required before any development or testing can be performed.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/documents/Getting-Started.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:<your-username>/typedoc-plugin-markdown.git\n```\n\n----------------------------------------\n\nTITLE: Preserve frontmatter comment tags in typedoc.json\nDESCRIPTION: This JSON snippet shows how to configure the 'preserveFrontmatterCommentTags' option in typedoc.json. Setting it to 'false' (default) removes the tags from the final output.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/plugins/frontmatter/options.mdx#_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"preserveFrontmatterCommentTags\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Preset TypeDoc Plugin Markdown Options (JSON)\nDESCRIPTION: This JSON snippet shows preset options for the typedoc-plugin-markdown plugin. It configures the plugin to hide the page header, use 'index.md' as the entry file name, and output the documentation to the './api' directory. These settings provide a basic configuration for generating markdown documentation.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/plugins/vitepress/options.mdx#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hidePageHeader\": true,\n  \"entryFileName\": \"index.md\",\n  \"out\": \"./api\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TypeDoc Plugin Markdown Presets\nDESCRIPTION: This code snippet defines the `presets` constant, which is an object containing default values for several options used by the TypeDoc GitHub Wiki Theme.  The `entryFileName` sets the name of the main entry point file, `hidePageHeader` determines whether to hide the page header, and `flattenOutputFiles` controls whether the output files are flattened into a single directory. These presets provide a convenient way to configure the theme with common settings.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-github-wiki-theme/options/namespaces/presets/README.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * @module Options\n */\n\n/**\n * Defines the available presets\n */\nexport const presets = {\n  entryFileName: 'Home.md',\n  hidePageHeader: true,\n  flattenOutputFiles: true,\n};\n\n```\n\n----------------------------------------\n\nTITLE: Defining Block Tags in tsdoc.json\nDESCRIPTION: This JSON configuration file (`tsdoc.json`) demonstrates how to define custom block tags for TypeDoc. It includes the `@description` and `@author` tags, specifying their `syntaxKind` as \"block\". By placing this file next to the `tsconfig.json` file, TypeDoc will recognize these tags and suppress the unknown tag warnings.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/plugins/frontmatter/block-tags-warning.mdx#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://developer.microsoft.com/en-us/json-schemas/tsdoc/v0/tsdoc.schema.json\",\n  \"extends\": [\"typedoc/tsdoc.json\"],\n  \"tagDefinitions\": [\n    {\n      \"tagName\": \"@description\",\n      \"syntaxKind\": \"block\"\n    },\n    {\n      \"tagName\": \"@author\",\n      \"syntaxKind\": \"block\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Typedoc Plugin Markdown\nDESCRIPTION: This command installs typedoc, typedoc-plugin-markdown, and typedoc-github-wiki-theme as development dependencies using npm.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/plugins/github-wiki/quick-start.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install typedoc typedoc-plugin-markdown typedoc-github-wiki-theme --save-dev\n```\n\n----------------------------------------\n\nTITLE: Defining English Locale Translations\nDESCRIPTION: Defines the translations for the English ('en') locale. It includes key-value pairs for various theme-related strings, like 'Default value', 'Description', etc. These translations will be used when the application's locale is set to English.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-markdown/internationalization/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    theme_default_value: 'Default value',\n    theme_default_type: 'Default type',\n    theme_description: 'Description',\n    theme_event: 'Event',\n    theme_re_exports: 'Re-exports',\n    theme_renames_and_re_exports: 'Renames and re-exports',\n    theme_extends: 'Extends',\n    theme_extended_by: 'Extended by',\n    theme_globals: 'Globals',\n    theme_member: 'Member',\n    theme_member_plural: 'Members',\n    theme_modifier: 'Modifier',\n    theme_name: 'Name',\n    theme_package: 'Package',\n    theme_packages: 'Packages',\n    theme_type: 'Type',\n    theme_value: 'Value',\n    theme_version: 'Version',\n}\n```\n\n----------------------------------------\n\nTITLE: Truncating Blog Post Content\nDESCRIPTION: This markdown snippet shows the use of a `<!-- truncate -->` comment to limit the blog post size in list views. This is useful to show a summary of the post in the list view, while the full content is only displayed on the post's page. This is used in blogging platforms like Docusaurus to create summaries.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devtools/examples/docusaurus-ts/blog/2019-05-29-long-blog-post.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n<!-- truncate -->\n```\n\n----------------------------------------\n\nTITLE: Render Template Type Alias Definition (TypeScript)\nDESCRIPTION: Defines the `RenderTemplate` type alias, a function type used for rendering templates.  It accepts a generic type `T` as input data and returns a string. This type is defined in `packages/typedoc-plugin-markdown/src/types/theme.ts`.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-markdown/types/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Defines the template type to use for rendering.\n *\n * @typeparam T\n */\nexport type RenderTemplate<T> = (data: T) => string;\n```\n\n----------------------------------------\n\nTITLE: Install markserv Globally (Shell)\nDESCRIPTION: This command installs the `markserv` package globally using npm. `markserv` is a simple web server for serving Markdown files. This allows developers to view the generated Markdown documentation in a browser.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/packages/typedoc-plugin-markdown/internal-docs/getting-started.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm i -g markserv\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with npm\nDESCRIPTION: This command installs all the required dependencies for the project using npm. It ensures that the project has all the necessary libraries and tools to build and run.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/GETTING_STARTED.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Initializing flattenOutputFiles Option - TypeScript\nDESCRIPTION: Initializes the `flattenOutputFiles` option, which flattens the output file structure to a single directory, removing the default directory structure that mirrors the project's module hierarchy. Setting this to `true` simplifies the output directory by placing all generated files in one location.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-markdown/options/namespaces/declarations/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    help: 'Flatten output files to a single directory.',\n    type: ParameterType.Boolean,\n    defaultValue: false,\n}\n```\n\n----------------------------------------\n\nTITLE: Serve Playground Docs with markserv (Shell)\nDESCRIPTION: This command starts the `markserv` server, serving the `README.md` file located in the playground's documentation output directory. This enables developers to view the generated Markdown documentation in a browser. It requires `markserv` to be installed.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/packages/typedoc-plugin-markdown/internal-docs/getting-started.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmarkserv ./playground/docs/README.md\n```\n\n----------------------------------------\n\nTITLE: Consuming the custom theme in typedoc.json\nDESCRIPTION: Demonstrates how to use the defined custom theme by specifying its name in the `theme` option within the `typedoc.json` configuration file. This instructs TypeDoc to use the custom theme when generating documentation.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-markdown/theme/documents/Custom Theme.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugin\": [\"typedoc-plugin-mardown\", \"./local-plugins/my-custom-plugin.js\"],\n  \"theme\": \"customTheme\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Korean Locale Translations\nDESCRIPTION: Defines the translations for the Korean ('ko') locale, providing key-value pairs for various theme-related strings in Korean. This includes translations like '기본 값' for 'Default value', '설명' for 'Description', etc.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-markdown/internationalization/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    theme_default_value: '기본 값',\n    theme_default_type: '기본 유형',\n    theme_description: '설명',\n    theme_event: '이벤트',\n    theme_re_exports: '다시 내보내진 원본:',\n    theme_renames_and_re_exports: '새 이름으로 내보내진 원본:',\n    theme_extends: '확장',\n    theme_extended_by: '에 의해 확장됨',\n    theme_globals: '전역',\n    theme_member: '멤버',\n    theme_member_plural: '멤버들',\n    theme_modifier: '수정자',\n    theme_name: '이름',\n    theme_package: '패키지',\n    theme_packages: '패키지',\n    theme_type: '유형',\n    theme_value: '값',\n    theme_version: '버전',\n}\n```\n\n----------------------------------------\n\nTITLE: Extend Theme with Custom Render Context in TypeScript\nDESCRIPTION: This code demonstrates how to extend the theme to provide custom templates, partials, and helpers by creating a custom render context class.  It overrides the `getRenderContext` method to return an instance of `MyMarkdownThemeContext`. It then overrides the `templates`, `partials` and `helpers` properties of the context class to add custom logic.  The `...this.templates` syntax is used to inherit the default values.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/packages/typedoc-plugin-markdown/internal-docs/custom-theme.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyMarkdownTheme extends MarkdownTheme {\n  getRenderContext(page) {\n    return new MyMarkdownThemeContext(this, page, this.application.options);\n  }\n}\n\nclass MyMarkdownThemeContext extends MarkdownThemeContext {\n  // customise templates\n  templates = {\n    ...this.templates,\n    reflection: (model) => {\n      return `New template for ${model.name}!`;\n    },\n  };\n\n  // customise partials\n  partials = {\n    ...this.partials,\n    header: (model) => {\n      return `\\n# Welcome to custom header for ${this.page.project.name} project and ${model.name} model!\\nUse my new helper - ${this.helpers.newHelper()}\\n   `;\n    },\n  };\n\n  // customise helpers\n  helpers = {\n    ...this.helpers,\n    newHelper: () => {\n      return 'New helper!';\n    },\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring hideBreadcrumbs Option in TypeDoc\nDESCRIPTION: This configuration option determines whether to display breadcrumbs in the generated documentation. Setting it to `true` will hide the breadcrumbs; `false` (default) will show them.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/docs/options/display-options.mdx#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"hideBreadcrumbs\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Remark Plugin\nDESCRIPTION: This JavaScript code defines a remark plugin that adds a `meta` property with the value `playground` to all code blocks within the documentation. It uses `unist-util-visit` to traverse the syntax tree and modify the code nodes. The plugin is exported as a default function.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/plugins/remark/writing-a-plugin.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { visit } from 'unist-util-visit';\n\nexport default function mySimpleRemarkPlugin() {\n  return (tree) => {\n    visit(tree, 'code', (node) => {\n      node.meta = `playground`;\n    });\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Building npm Packages\nDESCRIPTION: Builds all packages within the npm workspace. This is a crucial step to compile the source code and prepare the packages for testing and usage. This command uses the `npm run build-all` command defined in the package.json file.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/documents/Getting-Started.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build-all\n```\n\n----------------------------------------\n\nTITLE: Installing TypeDoc Plugin Markdown\nDESCRIPTION: This command installs the typedoc and typedoc-plugin-markdown packages as development dependencies using npm. The `--save-dev` flag ensures that the packages are saved to the `devDependencies` section of the `package.json` file.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/docs/quick-start.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install typedoc typedoc-plugin-markdown --save-dev\n```\n\n----------------------------------------\n\nTITLE: Cloning Repository with Git\nDESCRIPTION: This command clones the forked repository from GitHub to the local machine. Replace `<your-username>` with the actual GitHub username. This is the first step in setting up the local development environment.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/GETTING_STARTED.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:<your-username>/typedoc-plugin-markdown.git\n```\n\n----------------------------------------\n\nTITLE: Initializing fileExtension Option - TypeScript\nDESCRIPTION: Initializes the `fileExtension` option, which specifies the file extension for generated output files. Common extensions are `.md` (default) or `.markdown`, but `.mdx` may be necessary for compatibility with specific Markdown parsers. This option determines the filename suffix for the generated documentation files.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-markdown/options/namespaces/declarations/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    help: 'Specify the file extension for generated output files.',\n    type: ParameterType.String,\n    defaultValue: '.md',\n    validate(value) {\n        if (!value.startsWith('.')) {\n            throw new Error('[typedoc-plugin-markdown] \"fileExtension\" must start with a period.');\n        }\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring hidePageHeader Option in TypeDoc\nDESCRIPTION: This configuration option determines whether to display the page header in the generated documentation. Setting it to `true` will hide the page header; `false` (default) will show it.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/docs/options/display-options.mdx#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"hidePageHeader\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory\nDESCRIPTION: This command changes the current directory to the root of the cloned repository. It is a necessary step before installing dependencies and building the project.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/GETTING_STARTED.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd typedoc-plugin-markdown\n```\n\n----------------------------------------\n\nTITLE: Installing remark-toc and remark-insert-headings using npm/yarn\nDESCRIPTION: This command installs both remark-insert-headings and remark-toc plugins as development dependencies using npm or yarn. remark-toc adds a table of contents to your documentation, and remark-insert-headings is required to insert a placeholder heading for the table of contents.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/plugins/remark/remark-plugins-usage.mdx#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install remark-insert-headings remark-toc --save-dev\n```\n\n----------------------------------------\n\nTITLE: Run the Playground (Shell)\nDESCRIPTION: This command executes the playground script defined in the project's package.json file. The playground generates sample documentation using the plugin, allowing developers to test and experiment with different configurations and customizations. It depends on npm being installed and the project having a 'playground' script.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/packages/typedoc-plugin-markdown/internal-docs/getting-started.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run playground\n```\n\n----------------------------------------\n\nTITLE: Testing All Packages with npm\nDESCRIPTION: This command runs all tests for all packages within the monorepo.  This is a crucial step to ensure the code is working as expected and that no regressions have been introduced.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/GETTING_STARTED.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test-all\n```\n\n----------------------------------------\n\nTITLE: Setting Modules File Name in TypeDoc JSON\nDESCRIPTION: This JSON snippet configures the file name for the modules/index page. It sets the `modulesFileName` option to `documentation`, which overrides the default name (modules, packages, or globals). This option is not applicable when `readme` is set to `none` or `mergeReadme` is set to `true`.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/docs/options/file-options.mdx#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"modulesFileName\": \"documentation\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Docs Script\nDESCRIPTION: This command executes the `docs` script defined in the `package.json` file using npm. This script typically runs the TypeDoc command to generate documentation, as configured in the package.json.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/docs/quick-start.mdx#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm run docs\n```\n\n----------------------------------------\n\nTITLE: TypeDoc Configuration: docsRoot\nDESCRIPTION: This JSON snippet configures the `docsRoot` option in `typedoc.json`. It specifies the path to the VitePress project root directory, which is used when TypeDoc is run from outside of the VitePress project's root. This setting is crucial for correctly resolving paths and generating documentation within the VitePress structure.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-vitepress-theme/options/namespaces/declarations/README.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"out\": \"./docs/typedoc-api\",\n   \"docsRoot\": \"./docs\",\n}\n```\n\n----------------------------------------\n\nTITLE: Deploy Website using SSH\nDESCRIPTION: This command deploys the Docusaurus website to GitHub Pages using SSH for authentication. It builds the website and pushes the static content to the `gh-pages` branch.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devtools/examples/docusaurus/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ USE_SSH=true yarn deploy\n```\n\n----------------------------------------\n\nTITLE: Wrapping string in backticks - TypeScript\nDESCRIPTION: This function wraps the input string with backticks, a common markdown formatting technique for inline code or commands. It takes a string as input and returns the backtick-wrapped string.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-markdown/libs/namespaces/markdown/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Wraps a string in backticks.\n *\n * @param text\n * @returns string\n */\n\n```\n\n----------------------------------------\n\nTITLE: TypeDoc Block Tag Warning in Shell\nDESCRIPTION: This shell command illustrates the warning message generated by TypeDoc when it encounters an unknown block tag such as `@description`. This typically occurs when using custom tags not recognized by default.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/plugins/frontmatter/block-tags-warning.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n[warning] Encountered an unknown block tag @description\n```\n\n----------------------------------------\n\nTITLE: Presets object definition - TypeScript\nDESCRIPTION: Defines a constant object named `presets` that holds default configuration values for the TypeDoc plugin. These values include `entryFileName` set to 'home.md' and `hidePageHeader` set to true. The object provides default settings for the generation of markdown documentation, specifically tailored for the GitLab Wiki theme.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-gitlab-wiki-theme/options/namespaces/presets/README.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst presets: `object` = {\n  entryFileName: 'home.md',\n  hidePageHeader: true\n}\n```\n\n----------------------------------------\n\nTITLE: Deploy Website using GitHub Username\nDESCRIPTION: This command deploys the Docusaurus website to GitHub Pages using a GitHub username. The `GIT_USER` environment variable must be set to your GitHub username.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devtools/examples/docusaurus-ts/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ GIT_USER=<Your GitHub username> yarn deploy\n```\n\n----------------------------------------\n\nTITLE: Sidebar Variable Declaration in TypeScript\nDESCRIPTION: Defines the 'sidebar' constant, an object used to configure the sidebar generation. The sidebar.autoConfiguration setting can disable automatic generation, and sidebar.heading sets the displayed heading. The type declaration specifies the properties 'help', 'type', and 'defaultValue' with their respective types and default values.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-github-wiki-theme/options/namespaces/declarations/README.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst sidebar: object\n```\n\n----------------------------------------\n\nTITLE: Installing npm Dependencies\nDESCRIPTION: Navigates to the cloned repository directory and installs all npm dependencies listed in the package.json files. This command ensures that all required packages are available to build and test the project. It uses `npm install` to fetch and install dependencies.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/documents/Getting-Started.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd typedoc-plugin-markdown\n\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Defining a custom theme in TypeScript\nDESCRIPTION: Defines a new theme called \"customTheme\" and registers it with the TypeDoc application. This allows the theme to be used by specifying its name in the TypeDoc configuration.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-markdown/theme/documents/Custom Theme.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport function load(app) {\n  app.renderer.defineTheme('customTheme', MyMarkdownTheme);\n}\n\nclass MyMarkdownTheme extends MarkdownTheme {}\n```\n\n----------------------------------------\n\nTITLE: Installing TypeDoc and plugins via npm/yarn\nDESCRIPTION: This command installs TypeDoc, typedoc-plugin-markdown, and typedoc-vitepress-theme as development dependencies using npm. The npm2yarn comment indicates that this command can be converted to its yarn equivalent for yarn users.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/plugins/vitepress/quick-start.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install typedoc typedoc-plugin-markdown typedoc-vitepress-theme --save-dev\n```\n\n----------------------------------------\n\nTITLE: document Template Definition (TypeScript)\nDESCRIPTION: Defines the `document` template which is used for project documents.  It accepts a `page` of type `MarkdownPageEvent<DocumentReflection>` and renders a string. This template is mapped to a project document in the `MarkdownTheme` configuration.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-markdown/theme/classes/MarkdownThemeContext.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n#### document()\n\n> **document**: (`page`) => `string`\n\nTemplate that maps to a project document.\n\n##### Parameters\n\n| Parameter | Type |\n| ------ | ------ |\n| `page` | [`MarkdownPageEvent`](../../events/classes/MarkdownPageEvent.md)\\<`DocumentReflection`\\> |\n\n##### Returns\n\n`string`\n```\n\n----------------------------------------\n\nTITLE: getPackagesCount Method Definition (TypeScript)\nDESCRIPTION: Defines a method to return the total number of packages within the project. This is helpful in scenarios where the documentation is structured around multiple packages. The method returns a number representing the package count.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-markdown/theme/classes/MarkdownThemeContext.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n> **getPackagesCount**(): `number`\n\nDefined in: [packages/typedoc-plugin-markdown/src/theme/markdown-themeContext.ts:123](https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/packages/typedoc-plugin-markdown/src/theme/markdown-themeContext.ts#L123)\n\nReturn the number of packages in the project.\n\n#### Returns\n\n`number`\n```\n\n----------------------------------------\n\nTITLE: Basic TypeDoc Configuration with docsRoot (JSON)\nDESCRIPTION: This JSON snippet shows a basic configuration for the `docsRoot` option. Setting `docsRoot` to './' tells the plugin that the documentation root is the current directory. This is suitable when TypeDoc is run from the VitePress project root.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/plugins/vitepress/options.mdx#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"docsRoot\": \"./\"\n}\n```\n\n----------------------------------------\n\nTITLE: MarkdownRenderer 'on' Render Event Listener\nDESCRIPTION: This snippet shows how to listen for the `beginRender` or `endRender` events using the `on` method. The callback function receives a `MarkdownRendererEvent` object, enabling you to perform actions before or after the rendering process.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-markdown/types/interfaces/MarkdownRenderer.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napp.renderer.on(MarkdownRendererEvent.BEGIN, (renderer) => {});\n```\n\n----------------------------------------\n\nTITLE: Installing typedoc-plugin-markdown using npm\nDESCRIPTION: This command installs the typedoc and typedoc-plugin-markdown packages as development dependencies using npm. This allows developers to generate Markdown documentation from their TypeScript projects.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/packages/typedoc-plugin-markdown/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install typedoc typedoc-plugin-markdown --save-dev\n```\n\n----------------------------------------\n\nTITLE: Initializing hideGroupHeadings Declaration Option - Typescript\nDESCRIPTION: Initializes the `hideGroupHeadings` declaration option.  This option controls whether members are grouped by kind in the output.  It is a boolean value with a default value of false, which means members will be grouped by default.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-markdown/options/namespaces/declarations/README.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    help: 'Excludes grouping by kind so all members are rendered at the same level.',\n    type: ParameterType.Boolean,\n    defaultValue: false,\n}\n```\n\n----------------------------------------\n\nTITLE: Example Remark Stringify Options Configuration\nDESCRIPTION: This code snippet shows an example of how to configure options for the `remark-stringify` plugin, which is used to serialize the markdown. It demonstrates setting options such as `bullet` and `fence`.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-remark/options/namespaces/declarations/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{  \"bullet\": \"+\", \"fence\": \"~\" }\n```\n\n----------------------------------------\n\nTITLE: Installing Typedoc Plugins with npm/yarn\nDESCRIPTION: This command installs typedoc, typedoc-plugin-markdown, and typedoc-plugin-remark as development dependencies using either npm or yarn, based on the `npm2yarn` alias. This step is required to use the markdown plugin.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/plugins/remark/quick-start.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install typedoc typedoc-plugin-markdown typedoc-plugin-remark --save-dev\n```\n\n----------------------------------------\n\nTITLE: Installing Typedoc Plugins with npm\nDESCRIPTION: This command installs the necessary dependencies for generating markdown documentation using TypeDoc, including typedoc-plugin-markdown and typedoc-gitlab-wiki-theme. It uses npm to add these packages as development dependencies.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/plugins/gitlab-wiki/quick-start.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install typedoc typedoc-plugin-markdown typedoc-gitlab-wiki-theme --save-dev\n```\n\n----------------------------------------\n\nTITLE: Consume Custom Theme in typedoc.json\nDESCRIPTION: This JSON configuration shows how to consume the custom theme defined in the previous step.  The `plugin` array ensures the typedoc-plugin-markdown and potentially a local plugin are loaded. The `theme` option is set to 'customTheme', instructing TypeDoc to use the registered custom theme during the rendering process.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/packages/typedoc-plugin-markdown/internal-docs/custom-theme.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugin\": [\"typedoc-plugin-mardown\", \"./local-plugins/my-custom-plugin.js\"],\n  \"theme\": \"customTheme\"\n}\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies using Yarn\nDESCRIPTION: This command installs all the necessary dependencies for the Docusaurus website using Yarn package manager. It reads the `package.json` file and installs the specified packages.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devtools/examples/docusaurus-ts/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies using npm/yarn\nDESCRIPTION: Installs the necessary dependencies for using typedoc-plugin-markdown with Docusaurus, including TypeDoc, the plugin itself, and the Docusaurus plugin. The --save-dev flag ensures they are added as development dependencies.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/plugins/docusaurus/quick-start.mdx#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install typedoc typedoc-plugin-markdown docusaurus-plugin-typedoc --save-dev\n```\n\n----------------------------------------\n\nTITLE: Initializing hidePageHeader Declaration Option - Typescript\nDESCRIPTION: Initializes the `hidePageHeader` declaration option.  This option controls whether the page header is printed in the generated Markdown output. It is a boolean value with a default value of false.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-markdown/options/namespaces/declarations/README.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    help: 'Do not print page header.',\n    type: ParameterType.Boolean,\n    defaultValue: false,\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Heading - TypeScript\nDESCRIPTION: This function generates a markdown heading string based on the provided level and text. The heading level determines the number of '#' characters prepended to the text. It takes a level (number) and the text (string) for the heading as input and returns the formatted markdown heading string.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-markdown/libs/namespaces/markdown/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Returns a heading in markdown format\n *\n * @param level The level of the heading\n * @param text The text of the heading\n * @returns string\n */\n```\n\n----------------------------------------\n\nTITLE: Preset Options Configuration JSON\nDESCRIPTION: This JSON snippet defines preset options for typedoc-plugin-markdown, setting the entry file name, hiding the page header, and flattening output files. These options provide a basic configuration for the plugin.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/plugins/github-wiki/options.mdx#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"entryFileName\": \"Home.md\",\n  \"hidePageHeader\": true,\n  \"flattenOutputFiles\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Sidebar Configuration in typedoc.json\nDESCRIPTION: This JSON snippet configures the sidebar options within the typedoc.json file. It enables auto-generation of the sidebar and sets the heading displayed above it. It requires the typedoc.json file and influences how the sidebar is created.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/plugins/github-wiki/options.mdx#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"sidebar\": {\n    \"autoConfiguration\": true,\n    \"heading\": \"API\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Entry File Name in TypeDoc JSON\nDESCRIPTION: This JSON snippet configures the name of the entry file for the documentation. It sets the `entryFileName` option to `index`, which can be more suitable for static site generators compared to the default `README`.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/docs/options/file-options.mdx#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"entryFileName\": \"index\"\n}\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies with Yarn\nDESCRIPTION: This command installs all the necessary dependencies for the Docusaurus website project using Yarn. It reads the `package.json` file to identify and install the required packages.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devtools/examples/docusaurus/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn\n```\n\n----------------------------------------\n\nTITLE: Set readme frontmatter variable in typedoc.json\nDESCRIPTION: This JSON snippet demonstrates how to add a frontmatter variable to the readme page only using the 'readmeFrontmatter' option in typedoc.json. It sets the 'onReadme' property to 'true'.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/plugins/frontmatter/options.mdx#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"readmeFrontmatter\": {\n    \"onReadme\": \"true\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Set index frontmatter variable in typedoc.json\nDESCRIPTION: This JSON snippet demonstrates how to add a frontmatter variable to the index page only using the 'indexFrontmatter' option in typedoc.json. It sets the 'onIndex' property to 'true'.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/plugins/frontmatter/options.mdx#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"indexFrontmatter\": {\n    \"onIndex\": \"true\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring indexFormat Option in TypeDoc\nDESCRIPTION: This configuration option sets the format of index items in the generated documentation. It accepts one of the following string values: 'list', 'table', or 'htmlTable'. The default is 'list'.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/docs/options/display-options.mdx#_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"indexFormat\": \"list\"\n}\n```\n\n----------------------------------------\n\nTITLE: getRelativeUrl Method Definition (TypeScript)\nDESCRIPTION: Defines a method to generate a relative URL from the current page's context. This method is useful for creating links within the generated documentation. It accepts the target URL (`url`) and an optional boolean (`ignorePublicPath`) to specify whether to ignore the configured public path.  The method returns a string representing the relative URL.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-markdown/theme/classes/MarkdownThemeContext.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n> **getRelativeUrl**(`url`, `ignorePublicPath`): `string`\n\nDefined in: [packages/typedoc-plugin-markdown/src/theme/markdown-themeContext.ts:137](https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/packages/typedoc-plugin-markdown/src/theme/markdown-themeContext.ts#L137)\n\nReturns the relative URL (from the current page context url).\n\nIf public path is set, it will be used as the base URL.\n\n#### Parameters\n\n| Parameter | Type | Default value | Description |\n| ------ | ------ | ------ | ------ |\n| `url` | `string` | `undefined` | The URL to make relative. |\n| `ignorePublicPath` | `boolean` | `false` | Whether to ignore the public path. |\n\n#### Returns\n\n`string`\n```\n\n----------------------------------------\n\nTITLE: Configuring typeDeclarationFormat Option in TypeDoc\nDESCRIPTION: This configuration option specifies the output format for type declarations of variables and type aliases. Accepts one of 'list', 'table', or 'htmlTable', defaulting to 'list'.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/docs/options/display-options.mdx#_snippet_14\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"typeDeclarationFormat\": \"list\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Tests with npm\nDESCRIPTION: This command runs all tests, generates fixtures, runs validation scripts, and triggers the spec files using Jest.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-markdown/documents/Test-and-Validation.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Accessing VitePress Data with useData() in Markdown (Expanded)\nDESCRIPTION: This snippet demonstrates how to import and use the `useData` API from `vitepress` within a `<script setup>` block in a Markdown file. It retrieves the `site`, `theme`, `page`, and `frontmatter` data objects and makes them available for use in the template.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devtools/examples/vitepress/api-examples.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n<script setup>\nimport { useData } from 'vitepress'\n\nconst { site, theme, page, frontmatter } = useData()\n</script>\n\n## Results\n\n### Theme Data\n<pre>{{ theme }}</pre>\n\n### Page Data\n<pre>{{ page }}</pre>\n\n### Page Frontmatter\n<pre>{{ frontmatter }}</pre>\n```\n\n----------------------------------------\n\nTITLE: Defining PluginOptions Interface\nDESCRIPTION: The PluginOptions interface describes the configuration options available for the Docusaurus Typedoc plugin, allowing customization of TypeDoc's behavior. This interface is crucial for configuring the plugin within a Docusaurus site's configuration file.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/docusaurus-plugin-typedoc/core/README.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Initializing classPropertiesFormat Declaration Option - Typescript\nDESCRIPTION: Initializes the `classPropertiesFormat` declaration option. This option configures how class properties are formatted. It uses a `ParameterType.Map` with possible values from the `DisplayFormat` enum and defaults to `DisplayFormat.List`.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-markdown/options/namespaces/declarations/README.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    help: 'Sets the format of property groups for classes.',\n    type: ParameterType.Map,\n    map: DisplayFormat,\n    defaultValue: DisplayFormat.List,\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Snapshots with npm\nDESCRIPTION: This command updates the snapshot source and adds a test in the relevant spec file. It should be run when changes are made to the code that require updating snapshots.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-markdown/documents/Test-and-Validation.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test:update\n```\n\n----------------------------------------\n\nTITLE: Creating Link - TypeScript\nDESCRIPTION: This function generates a markdown link with a specified label and URL. It takes a label (string) for the link text and a URL (string) for the link destination. It returns the formatted markdown link string.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-markdown/libs/namespaces/markdown/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * The link element\n *\n * @param label The text to display for the link\n * @param url The url to link to\n * @returns string\n */\n```\n\n----------------------------------------\n\nTITLE: Loading the TypeDoc Plugin\nDESCRIPTION: The `load` function is the entry point for the TypeDoc plugin. It takes a `MarkdownApplication` instance as a parameter and initializes the plugin within that application. It returns void.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-vitepress-theme/core/README.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Initializing interfacePropertiesFormat Declaration Option - Typescript\nDESCRIPTION: Initializes the `interfacePropertiesFormat` declaration option. This option configures how interface properties are formatted. It uses a `ParameterType.Map` with possible values from the `DisplayFormat` enum and defaults to `DisplayFormat.List`.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-markdown/options/namespaces/declarations/README.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    help: 'Sets the format of property groups for interfaces.',\n    type: ParameterType.Map,\n    map: DisplayFormat,\n    defaultValue: DisplayFormat.List,\n}\n```\n\n----------------------------------------\n\nTITLE: Deploy Website with GitHub Username\nDESCRIPTION: This command deploys the Docusaurus website to GitHub Pages using a specified GitHub username. It builds the website and pushes the static content to the `gh-pages` branch.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devtools/examples/docusaurus/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ GIT_USER=<Your GitHub username> yarn deploy\n```\n\n----------------------------------------\n\nTITLE: Example Anchor Prefix\nDESCRIPTION: Example showing a valid anchor prefix string to be used in the `anchorPrefix` option.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-markdown/options/namespaces/declarations/README.md#_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\n\"markdown-header\"\n```\n\n----------------------------------------\n\nTITLE: Configuring blockTagsPreserveOrder Option in TypeDoc\nDESCRIPTION: This configuration option specifies comment block tags that should preserve their position in the documentation. This is an array of string values representing the tags.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/docs/options/display-options.mdx#_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"blockTagsPreserveOrder\": [\"@example\", \"@deprecated\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Import statements for icons, images and components\nDESCRIPTION: Imports necessary modules and components for creating a user interface, including FontAwesome icons, next/image for image rendering, and nextra/components for cards.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/plugins/index.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{/* prettier-ignore */}\nimport { faBook, faFileLines } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport Image from 'next/image';\nimport { Cards } from 'nextra/components';\n```\n\n----------------------------------------\n\nTITLE: Remark Plugins Option Initializer in TypeScript\nDESCRIPTION: This code defines the initializer for the `remarkPlugins` option, specifying its help text, type (Mixed), default value (empty array), and a validation function.  The validation function throws an error if the provided value is not an array. This allows users to specify an array of remark plugin names to be executed.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-remark/options/namespaces/declarations/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    help: 'An array of remark plugin names to be executed.',\n    type: ParameterType.Mixed,\n    defaultValue: [],\n    validate(value) {\n        if (!Array.isArray(value)) {\n            throw new Error('[typedoc-plugin-remark] remarkPlugins must be an array.');\n        }\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Contents - formatContents() - TypeScript\nDESCRIPTION: The `formatContents` function takes a string of contents as input and applies formatting to it. It returns the formatted string. This function is used to standardize the output of the TypeDoc documentation.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-github-wiki-theme/core/README.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * \t@param contents\n */\n```\n\n----------------------------------------\n\nTITLE: Defining Japanese Locale Translations\nDESCRIPTION: Defines the translations for the Japanese ('ja') locale. It includes key-value pairs for various theme-related strings translated into Japanese, such as 'デフォルト値' for 'Default value', '説明' for 'Description', etc.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-markdown/internationalization/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    theme_default_value: 'デフォルト値',\n    theme_default_type: 'デフォルトタイプ',\n    theme_description: '説明',\n    theme_event: 'イベント',\n    theme_re_exports: '再エクスポート',\n    theme_renames_and_re_exports: 'リネームと再エクスポート',\n    theme_extends: '拡張',\n    theme_extended_by: 'によって拡張された',\n    theme_globals: 'グローバル変数',\n    theme_member: 'メンバー',\n    theme_member_plural: 'メンバー',\n    theme_modifier: '修飾子',\n    theme_name: '名前',\n    theme_package: 'パッケージ',\n    theme_packages: 'パッケージ',\n    theme_type: 'タイプ',\n    theme_value: '値',\n    theme_version: 'バージョン',\n}\n```\n\n----------------------------------------\n\nTITLE: getPackageMetaData Method Definition (TypeScript)\nDESCRIPTION: Defines a method to retrieve package metadata for a given package name.  This method is used when the entrypointStrategy is set to `packages`, enabling package-specific documentation. It takes a `packageName` string as input and returns the corresponding `PackageMetaData` object if found, or `undefined` if not.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-markdown/theme/classes/MarkdownThemeContext.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n> **getPackageMetaData**(`packageName`): `undefined` \\| [`PackageMetaData`](../../types/interfaces/PackageMetaData.md)\n\nDefined in: [packages/typedoc-plugin-markdown/src/theme/markdown-themeContext.ts:116](https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/packages/typedoc-plugin-markdown/src/theme/markdown-themeContext.ts#L116)\n\nReturns the package meta data for a given package name when entrypointStrategy is set to `packages`.\n\n#### Parameters\n\n| Parameter | Type | Description |\n| ------ | ------ | ------ |\n| `packageName` | `string` | The package name as per `name` field from `package.json`. |\n\n#### Returns\n\n`undefined` \\| [`PackageMetaData`](../../types/interfaces/PackageMetaData.md)\n```\n\n----------------------------------------\n\nTITLE: TypeScript Index Frontmatter Example\nDESCRIPTION: This TypeScript snippet shows an example of how `indexFrontmatter` can be configured as a JSON object. This object defines frontmatter variables specific to the index page.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-frontmatter/options/namespaces/declarations/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n{\"onIndex\": \"true\" }\n```\n\n----------------------------------------\n\nTITLE: Defining Chinese Locale Translations\nDESCRIPTION: Defines the translations for the Chinese ('zh') locale, with key-value pairs providing Chinese translations for theme-related strings. For instance, it translates 'Default value' to '默认值', 'Description' to '描述', etc.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-markdown/internationalization/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    theme_default_value: '默认值',\n    theme_default_type: '默认类型',\n    theme_description: '描述',\n    theme_event: '事件',\n    theme_re_exports: '重新导出',\n    theme_renames_and_re_exports: '重命名并重新导出',\n    theme_extends: '继承',\n    theme_extended_by: '继承于',\n    theme_globals: '全局变量',\n    theme_member: '成员',\n    theme_member_plural: '成员',\n    theme_modifier: '修饰符',\n    theme_name: '名称',\n    theme_package: '包',\n    theme_packages: '包',\n    theme_type: '类型',\n    theme_value: '值',\n    theme_version: '版本',\n}\n```\n\n----------------------------------------\n\nTITLE: Add Timestamp to Template (TypeScript)\nDESCRIPTION: This code snippet adds a timestamp to the index template of the typedoc-plugin-markdown. It modifies the template to include the current date and time in UTC string format.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/packages/typedoc-plugin-markdown/internal-docs/getting-started.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst md: string[] = [];\n\nmd.push(`Updated: ${new Date().toUTCString()}`);\n```\n\n----------------------------------------\n\nTITLE: Testing npm Packages\nDESCRIPTION: Tests all packages within the npm workspace to ensure they function correctly. This step validates the code and helps identify any potential issues. The command executes all tests defined in the package.json file using `npm run test-all`.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/documents/Getting-Started.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test-all\n```\n\n----------------------------------------\n\nTITLE: Start Local Development Server\nDESCRIPTION: This command starts a local development server for the Docusaurus website. It enables hot reloading, reflecting changes in the code without restarting the server.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devtools/examples/docusaurus-ts/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn start\n```\n\n----------------------------------------\n\nTITLE: Run the Playground Again (Shell)\nDESCRIPTION: This command executes the playground script defined in the project's package.json file, after the index template has been modified. It will regenerate the markdown files so that the changes to the template will be reflected.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/packages/typedoc-plugin-markdown/internal-docs/getting-started.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpm run playground\n```\n\n----------------------------------------\n\nTITLE: Example Public Path\nDESCRIPTION: Example showing a valid URL path to be used in the `publicPath` option.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-markdown/options/namespaces/declarations/README.md#_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\n\"http://abc.com\"\n```\n\n----------------------------------------\n\nTITLE: Defining Blog Post Metadata\nDESCRIPTION: This markdown snippet defines the metadata for a blog post, including its slug, title, author, and tags.  This metadata is typically used by blogging platforms like Docusaurus to organize and display the blog post correctly.  The slug is used for the URL, the title is for display, the authors are credited, and the tags are for categorization.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devtools/examples/docusaurus-ts/blog/2019-05-29-long-blog-post.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n---\nslug: long-blog-post\ntitle: Long Blog Post\nauthors: yangshun\ntags: [hello, docusaurus]\n---\n```\n\n----------------------------------------\n\nTITLE: MarkdownThemeContext Constructor Definition (TypeScript)\nDESCRIPTION: Defines the constructor for the `MarkdownThemeContext` class. It accepts a `theme` of type `MarkdownTheme`, a `page` of type `MarkdownPageEvent`, and `options` of type `Options`. These parameters are used to initialize the context with the current theme, page event, and application options, respectively.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-markdown/theme/classes/MarkdownThemeContext.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n> **new MarkdownThemeContext**(`theme`, `page`, `options`): [`MarkdownThemeContext`](MarkdownThemeContext.md)\n\nDefined in: [packages/typedoc-plugin-markdown/src/theme/markdown-themeContext.ts:42](https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/packages/typedoc-plugin-markdown/src/theme/markdown-themeContext.ts#L42)\n\n#### Parameters\n\n| Parameter | Type | Description |\n| ------ | ------ | ------ |\n| `theme` | [`MarkdownTheme`](MarkdownTheme.md) | The theme instance. |\n| `page` | [`MarkdownPageEvent`](../../events/classes/MarkdownPageEvent.md)\\<[`Reflection`](https://typedoc.org/api/classes/Reflection.html)\\> | The current page event. |\n| `options` | [`Options`](https://typedoc.org/api/types/Configuration.Options.html) | The options provided to the application. |\n\n#### Returns\n\n[`MarkdownThemeContext`](MarkdownThemeContext.md)\n```\n\n----------------------------------------\n\nTITLE: Navigate to the Plugin Directory (Shell)\nDESCRIPTION: This command navigates the terminal to the directory containing the typedoc-plugin-markdown package. This step is necessary to execute subsequent commands related to the plugin.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/packages/typedoc-plugin-markdown/internal-docs/getting-started.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd packages/typedoc-plugin-markdown\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Example\nDESCRIPTION: This YAML snippet demonstrates a basic frontmatter block with `layout` and `sidebar` variables. It's an example of how frontmatter can be structured to control document layout and navigation.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-frontmatter/options/namespaces/declarations/README.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: docs\nsidebar: true\n---\n```\n\n----------------------------------------\n\nTITLE: Embedding Interactive React Button in MDX\nDESCRIPTION: This snippet demonstrates how to embed a simple interactive React button within an MDX blog post.  The button, when clicked, triggers an alert. It leverages JSX syntax within the MDX context to define the React component.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devtools/examples/docusaurus-ts/blog/2021-08-01-mdx-blog-post.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<button onClick={() => alert('button clicked!')}>Click me!</button>\n```\n\n----------------------------------------\n\nTITLE: Initializing frontmatterNamingConvention Option\nDESCRIPTION: This TypeScript snippet defines the configuration for the `frontmatterNamingConvention` Typedoc option. It allows configuring the output style of frontmatter variables using the FrontmatterNamingConvention enum.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-frontmatter/options/namespaces/declarations/README.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    help: 'The naming convention that variables should be output as. ',\n    type: ParameterType.Map,\n    map: FrontmatterNamingConvention,\n    defaultValue: FrontmatterNamingConvention.CamelCase,\n}\n```\n\n----------------------------------------\n\nTITLE: Example Prettier Config File Path\nDESCRIPTION: Example showing a valid file path to be used in the `prettierConfigFile` option.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-markdown/options/namespaces/declarations/README.md#_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\n\"./path/to/.prettierrc.json\"\n```\n\n----------------------------------------\n\nTITLE: Variable Declaration TypeScript\nDESCRIPTION: This code snippet demonstrates a basic variable declaration in TypeScript. It declares a constant variable 'x' and assigns it the integer value 1.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/packages/typedoc-plugin-remark/test/stubs/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst x = 1;\n```\n\n----------------------------------------\n\nTITLE: Configuring NPM Scripts for Watch Mode in package.json\nDESCRIPTION: This snippet demonstrates how to configure npm scripts within `package.json` to control TypeDoc's watch mode using environment variables. `TYPEDOC_WATCH=true` enables watch mode during development (`start`), while `TYPEDOC_WATCH=false` disables it during the build process.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/plugins/docusaurus/guides/watch-mode.mdx#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"scripts\": {\n    \"start\": \"TYPEDOC_WATCH=true docusaurus start\",\n    \"build\": \"TYPEDOC_WATCH=false docusaurus build\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Internationalization setup\nDESCRIPTION: This function sets up internationalization within the TypeDoc application. It takes the TypeDoc application instance as input and merges the plugin's translatable strings with the core TypeDoc strings.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/devguide/typedoc-plugin-markdown/internationalization/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * **setupInternationalization**(`app`): `void`\n *\n * Defined in: [packages/typedoc-plugin-markdown/src/internationalization/setup.ts:11](https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/packages/typedoc-plugin-markdown/src/internationalization/setup.ts#L11)\n *\n * Returns subset of translatable strings for the plugin.\n *\n * These will then be merged with the main set of TypeDoc string.\n *\n * #### Parameters\n *\n * | Parameter | Type |\n * | ------ | ------ |\n * | `app` | [`Application`](https://typedoc.org/api/classes/Application.html) |\n *\n * #### Returns\n *\n * `void`\n```\n\n----------------------------------------\n\nTITLE: Configuring tableColumnSettings Option in TypeDoc\nDESCRIPTION: This configuration option controls how table columns are configured and displayed, allowing control over column visibility and header alignment.\nSOURCE: https://github.com/typedoc2md/typedoc-plugin-markdown/blob/main/docs/content/docs/options/display-options.mdx#_snippet_15\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"tableColumnSettings\": {\n    \"hideDefaults\": false,\n    \"hideInherited\": false,\n    \"hideModifiers\": false,\n    \"hideOverrides\": false,\n    \"hideSources\": false,\n    \"hideValues\": false,\n    \"leftAlignHeaders\": false\n  }\n}\n```"
  }
]