[
  {
    "owner": "lsposed",
    "repo": "lsposed",
    "content": "TITLE: Creating a Static Library\nDESCRIPTION: This command creates a static library named after the project. It uses the 'add_library' command to define the project as a STATIC library type and specifies the source files required for compilation which are defined using 'SRC_LIST'.\nSOURCE: https://github.com/lsposed/lsposed/blob/master/core/src/main/jni/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(${PROJECT_NAME} STATIC ${SRC_LIST})\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: These lines configure include directories for the library. The 'target_include_directories' command adds directories to the include paths for the compilation, allowing the compiler to locate header files used in the project. 'PUBLIC' indicates that these include directories are exposed to dependent projects.\nSOURCE: https://github.com/lsposed/lsposed/blob/master/core/src/main/jni/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(${PROJECT_NAME} PUBLIC include)\ntarget_include_directories(${PROJECT_NAME} PRIVATE src)\n```\n\n----------------------------------------\n\nTITLE: Defining minimum CMake version and creating dex2oat executable in CMake\nDESCRIPTION: This snippet specifies the minimum required CMake version, creates an executable target named 'dex2oat' from the source file 'dex2oat.c', and links the 'log' library to it. It establishes the core compilation instructions for the 'dex2oat' component.\nSOURCE: https://github.com/lsposed/lsposed/blob/master/dex2oat/src/main/cpp/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.4.1)\n\nadd_executable(dex2oat dex2oat.c)\n\ntarget_link_libraries(dex2oat log)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries\nDESCRIPTION: This section links the required libraries for the project. The `target_link_libraries` command specifies the libraries to link, with 'PUBLIC' indicating libraries needed by consumers and 'PRIVATE' for internal use. The listed libraries include 'dobby', 'lsplant_static', 'log', 'fmt-header-only', and 'dex_builder_static'.\nSOURCE: https://github.com/lsposed/lsposed/blob/master/core/src/main/jni/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(${PROJECT_NAME} PUBLIC dobby lsplant_static log fmt-header-only)\ntarget_link_libraries(${PROJECT_NAME} PRIVATE dex_builder_static)\n```\n\n----------------------------------------\n\nTITLE: Collecting Source Files\nDESCRIPTION: These lines use 'aux_source_directory' to find and list source files within specific directories. These commands populate the 'SRC_LIST' variable with the paths of source files in 'src' and 'src/jni' directories, which are then used to compile the static library.\nSOURCE: https://github.com/lsposed/lsposed/blob/master/core/src/main/jni/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\naux_source_directory(src SRC_LIST)\naux_source_directory(src/jni SRC_LIST)\n```\n\n----------------------------------------\n\nTITLE: CMake Minimum Version Declaration\nDESCRIPTION: This snippet specifies the minimum required version of CMake for the project. It ensures compatibility with the build environment by enforcing a minimum version requirement, allowing proper parsing and execution of CMake commands and ensuring the build process can be correctly interpreted.\nSOURCE: https://github.com/lsposed/lsposed/blob/master/core/src/main/jni/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.4.1)\n```\n\n----------------------------------------\n\nTITLE: Defining libc++abi Source Files and Configuration\nDESCRIPTION: Lists the C++ ABI implementation source files needed for the build and sets specific flags and include directories for the ABI component.\nSOURCE: https://github.com/lsposed/lsposed/blob/master/external/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIBCXXABI_SOURCES\n        abort_message.cpp\n        cxa_aux_runtime.cpp\n        cxa_default_handlers.cpp\n        cxa_exception_storage.cpp\n        cxa_guard.cpp\n        cxa_handlers.cpp\n        cxa_noexception.cpp\n        cxa_thread_atexit.cpp\n        cxa_vector.cpp\n        cxa_virtual.cpp\n        stdlib_exception.cpp\n        stdlib_new_delete.cpp\n        stdlib_stdexcept.cpp\n        stdlib_typeinfo.cpp\n        )\nlist(TRANSFORM LIBCXXABI_SOURCES PREPEND cxx/src/abi/)\nset(LIBCXXABI_FLAGS\n        -Wno-macro-redefined\n        -Wno-unknown-attributes\n        -DHAS_THREAD_LOCAL)\nset(LIBCXXABI_INCLUDES cxx/include/abi)\n```\n\n----------------------------------------\n\nTITLE: Configuring libc++ Build Flags and Includes\nDESCRIPTION: Sets compiler flags and include directories for libc++. Disables exceptions, RTTI, visibility annotations, and localization to create a minimal build.\nSOURCE: https://github.com/lsposed/lsposed/blob/master/external/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIBCXX_EXPORT_FLAGS\n        -DLIBCXX_BUILDING_LIBCXXABI\n        -D_LIBCPP_NO_EXCEPTIONS\n        -D_LIBCPP_NO_RTTI\n        -D_LIBCPP_BUILDING_LIBRARY\n        -D_LIBCPP_DISABLE_VISIBILITY_ANNOTATIONS\n        -D_LIBCXXABI_NO_EXCEPTIONS\n        -D_LIBCPP_HAS_NO_LOCALIZATION\n        )\nset(LIBCXX_FLAGS\n        -fvisibility-global-new-delete-hidden\n        -fvisibility=hidden\n        -fvisibility-inlines-hidden\n        )\nset(LIBCXX_EXPORT_INCLUDES cxx/include)\nset(LIBCXX_INCLUDES cxx/src)\n```\n\n----------------------------------------\n\nTITLE: Defining libc++ Source Files\nDESCRIPTION: Creates a list of C++ standard library source files to be compiled, with many optional components commented out to reduce size.\nSOURCE: https://github.com/lsposed/lsposed/blob/master/external/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIBCXX_SOURCES\n        algorithm.cpp\n#        any.cpp\n        atomic.cpp\n        barrier.cpp\n#        bind.cpp\n        charconv.cpp\n        chrono.cpp\n        condition_variable.cpp\n        condition_variable_destructor.cpp\n#        debug.cpp\n        exception.cpp\n#        filesystem/directory_iterator.cpp\n#        filesystem/int128_builtins.cpp\n#        filesystem/operations.cpp\n        functional.cpp\n        future.cpp\n        hash.cpp\n#        ios.cpp\n#        ios.instantiations.cpp\n#        iostream.cpp\n#        locale.cpp\n        memory.cpp\n        mutex.cpp\n        mutex_destructor.cpp\n        new.cpp\n        optional.cpp\n        random.cpp\n#        regex.cpp\n#        ryu/d2fixed.cpp\n#        ryu/d2s.cpp\n#        ryu/f2s.cpp\n        shared_mutex.cpp\n        stdexcept.cpp\n        string.cpp\n#        strstream.cpp\n        system_error.cpp\n        thread.cpp\n#        typeinfo.cpp\n        utility.cpp\n        valarray.cpp\n        variant.cpp\n        vector.cpp\n        )\n\nlist(TRANSFORM LIBCXX_SOURCES PREPEND cxx/src/)\n```\n\n----------------------------------------\n\nTITLE: Debug Symbol Handling for LSPosed Daemon in CMake\nDESCRIPTION: Implements conditional debug symbol generation if DEBUG_SYMBOLS_PATH is defined. Creates separate debug files, strips the main binary, and adds GNU debug links to maintain debugging capabilities while reducing binary size.\nSOURCE: https://github.com/lsposed/lsposed/blob/master/daemon/src/main/jni/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (DEFINED DEBUG_SYMBOLS_PATH)\n    message(STATUS \"Debug symbols will be placed at ${DEBUG_SYMBOLS_PATH}\")\n    add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD\n            COMMAND ${CMAKE_COMMAND} -E make_directory ${DEBUG_SYMBOLS_PATH}/${ANDROID_ABI}\n            COMMAND ${CMAKE_OBJCOPY} --only-keep-debug $<TARGET_FILE:${PROJECT_NAME}>\n            ${DEBUG_SYMBOLS_PATH}/${ANDROID_ABI}/${PROJECT_NAME}.debug\n            COMMAND ${CMAKE_STRIP} --strip-all $<TARGET_FILE:${PROJECT_NAME}>\n            COMMAND ${CMAKE_OBJCOPY} --add-gnu-debuglink ${DEBUG_SYMBOLS_PATH}/${ANDROID_ABI}/${PROJECT_NAME}.debug\n            $<TARGET_FILE:${PROJECT_NAME}>)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building Static libc++ Library\nDESCRIPTION: Creates a static library target that combines both libc++ and libc++abi sources with all the configured flags and include directories.\nSOURCE: https://github.com/lsposed/lsposed/blob/master/external/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(cxx STATIC ${LIBCXX_SOURCES} ${LIBCXXABI_SOURCES})\ntarget_compile_options(cxx PUBLIC ${LIBCXX_EXPORT_FLAGS})\ntarget_compile_options(cxx PRIVATE ${LIBCXX_FLAGS} ${LIBCXXABI_FLAGS} -ffunction-sections -fdata-sections)\ntarget_include_directories(cxx PUBLIC ${LIBCXX_EXPORT_INCLUDES})\ntarget_include_directories(cxx PRIVATE ${LIBCXX_INCLUDES} ${LIBCXXABI_INCLUDES})\n\nlink_libraries(cxx)\n```\n\n----------------------------------------\n\nTITLE: Adding External Dependencies\nDESCRIPTION: This code adds a subdirectory containing external dependencies to the build process. It makes available the resources located in a specified folder, allowing inclusion of external libraries and resources required during compilation and linking of the project, promoting modularity and reuse of pre-built components.\nSOURCE: https://github.com/lsposed/lsposed/blob/master/core/src/main/jni/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(${EXTERNAL_ROOT} external)\n```\n\n----------------------------------------\n\nTITLE: Configuring, Building, and Managing Debug Symbols for LSPosed (CMake)\nDESCRIPTION: This CMake script initializes the LSPosed project, sets minimum CMake requirements, and includes core dependencies via add_subdirectory. It conditionally configures sources according to the chosen API (riru or zygisk), adds relevant source files, sets up include directories, and links against the core and log libraries. If debug symbol output is defined, it generates and stores them in a structured directory, strips binaries, and attaches debug links, requiring CMake, CMake OBJCOPY, and STRIP tools. Inputs include API parameters and optional debug symbols path; outputs are the compiled shared library and its debug symbols.\nSOURCE: https://github.com/lsposed/lsposed/blob/master/magisk-loader/src/main/jni/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(lspd)\ncmake_minimum_required(VERSION 3.4.1)\n\nadd_subdirectory(${CORE_ROOT} core)\n\nconfigure_file(template/loader.cpp src/loader.cpp)\n\naux_source_directory(src SRC_LIST)\nif (${API} STREQUAL \"riru\")\n    set(SRC_LIST ${SRC_LIST} api/riru_main.cpp)\nelif (${API} STREQUAL \"zygisk\")\n    set(SRC_LIST ${SRC_LIST} api/zygisk_main.cpp)\nendif()\n\nadd_library(${PROJECT_NAME} SHARED ${SRC_LIST} ${CMAKE_CURRENT_BINARY_DIR}/src/loader.cpp)\n\ntarget_include_directories(${PROJECT_NAME} PUBLIC include)\ntarget_include_directories(${PROJECT_NAME} PRIVATE src)\n\ntarget_link_libraries(${PROJECT_NAME} core log)\n\nif (DEFINED DEBUG_SYMBOLS_PATH)\n    set(DEBUG_SYMBOLS_PATH ${DEBUG_SYMBOLS_PATH}/${API})\n    message(STATUS \"Debug symbols will be placed at ${DEBUG_SYMBOLS_PATH}\")\n    add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD\n            COMMAND ${CMAKE_COMMAND} -E make_directory ${DEBUG_SYMBOLS_PATH}/${ANDROID_ABI}\n            COMMAND ${CMAKE_OBJCOPY} --only-keep-debug $<TARGET_FILE:${PROJECT_NAME}>\n            ${DEBUG_SYMBOLS_PATH}/${ANDROID_ABI}/${PROJECT_NAME}.debug\n            COMMAND ${CMAKE_STRIP} --strip-all $<TARGET_FILE:${PROJECT_NAME}>\n            COMMAND ${CMAKE_OBJCOPY} --add-gnu-debuglink ${DEBUG_SYMBOLS_PATH}/${ANDROID_ABI}/${PROJECT_NAME}.debug\n            $<TARGET_FILE:${PROJECT_NAME}>)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Dobby and Symbol Resolver Options\nDESCRIPTION: Sets Dobby to build as a static library rather than shared, and disables the Symbol Resolver plugin.\nSOURCE: https://github.com/lsposed/lsposed/blob/master/external/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nSET_OPTION(DOBBY_GENERATE_SHARED OFF)\nSET_OPTION(Plugin.SymbolResolver OFF)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Options Macro\nDESCRIPTION: Defines a macro called SET_OPTION that sets a CMake option with a specific value and forces it to be cached internally.\nSOURCE: https://github.com/lsposed/lsposed/blob/master/external/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nmacro(SET_OPTION option value)\n    set(${option} ${value} CACHE INTERNAL \"\" FORCE)\nendmacro()\n```\n\n----------------------------------------\n\nTITLE: Configuring LSPosed Daemon Project in CMake\nDESCRIPTION: Defines the project name, minimum CMake version, source files, and builds a shared library. Links necessary dependencies including lsplant_static, dex_builder_static, android, and log libraries.\nSOURCE: https://github.com/lsposed/lsposed/blob/master/daemon/src/main/jni/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(daemon)\ncmake_minimum_required(VERSION 3.4.1)\n\nadd_subdirectory(${EXTERNAL_ROOT} external)\n\nset(SOURCES\n        dex2oat.cpp\n        logcat.cpp\n        obfuscation.cpp\n        )\n\nadd_library(${PROJECT_NAME} SHARED ${SOURCES})\n\ntarget_include_directories(${PROJECT_NAME} PRIVATE ${CMAKE_CURRENT_SOURCE_DIR})\n\ntarget_link_libraries(${PROJECT_NAME} PRIVATE lsplant_static dex_builder_static android log)\n```\n\n----------------------------------------\n\nTITLE: Adding External Dependencies\nDESCRIPTION: Configures lsplant to build as a static library and adds dobby and fmt as subdirectories. Sets fmt-specific compilation flags to optimize its build.\nSOURCE: https://github.com/lsposed/lsposed/blob/master/external/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nOPTION(LSPLANT_BUILD_SHARED OFF)\nadd_subdirectory(lsplant/lsplant/src/main/jni)\nadd_subdirectory(dobby)\nadd_subdirectory(fmt)\ntarget_compile_definitions(fmt-header-only INTERFACE FMT_STATIC_THOUSANDS_SEPARATOR=1 FMT_USE_FLOAT=0 FMT_USE_DOUBLE=0 FMT_USE_LONG_DOUBLE=0)\n```\n\n----------------------------------------\n\nTITLE: Conditional Debug Symbols Handling in CMake for Android\nDESCRIPTION: This snippet checks if the 'DEBUG_SYMBOLS_PATH' variable is defined; if so, it creates a directory for debug symbols, extracts debug information from the 'dex2oat' binary with 'objcopy', strips all symbols with 'strip', and associates debug symbols with the binary. It facilitates debugging support in the build process.\nSOURCE: https://github.com/lsposed/lsposed/blob/master/dex2oat/src/main/cpp/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (DEFINED DEBUG_SYMBOLS_PATH)\n    message(STATUS \"Debug symbols will be placed at ${DEBUG_SYMBOLS_PATH}\")\n    add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD\n            COMMAND ${CMAKE_COMMAND} -E make_directory ${DEBUG_SYMBOLS_PATH}/${ANDROID_ABI}\n            COMMAND ${CMAKE_OBJCOPY} --only-keep-debug $<TARGET_FILE:${PROJECT_NAME}>\n            ${DEBUG_SYMBOLS_PATH}/${ANDROID_ABI}/${PROJECT_NAME}.debug\n            COMMAND ${CMAKE_STRIP} --strip-all $<TARGET_FILE:${PROJECT_NAME}>\n            COMMAND ${CMAKE_OBJCOPY} --add-gnu-debuglink ${DEBUG_SYMBOLS_PATH}/${ANDROID_ABI}/${PROJECT_NAME}.debug\n            $<TARGET_FILE:${PROJECT_NAME}>)\nendif()\n```"
  }
]