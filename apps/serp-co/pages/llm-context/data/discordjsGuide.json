[
  {
    "owner": "discordjs",
    "repo": "guide",
    "content": "TITLE: Initializing a Discord.js Bot Client\nDESCRIPTION: Creates a basic Discord.js bot that connects to Discord using your token. The code sets up a client instance with Guild intents, establishes an event listener for when the bot is ready, and logs in using the token from a config file.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/creating-your-bot/main-file.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Require the necessary discord.js classes\nconst { Client, Events, GatewayIntentBits } = require('discord.js');\nconst { token } = require('./config.json');\n\n// Create a new client instance\nconst client = new Client({ intents: [GatewayIntentBits.Guilds] });\n\n// When the client is ready, run this code (only once).\n// The distinction between `client: Client<boolean>` and `readyClient: Client<true>` is important for TypeScript developers.\n// It makes some properties non-nullable.\nclient.once(Events.ClientReady, readyClient => {\n\tconsole.log(`Ready! Logged in as ${readyClient.user.tag}`);\n});\n\n// Log in to Discord with your client's token\nclient.login(token);\n```\n\n----------------------------------------\n\nTITLE: Implementing Command Execution Function for Discord.js Slash Commands\nDESCRIPTION: A simple execute method that handles the interaction by responding with a message. Discord requires all interactions to receive a response to indicate successful command receipt.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/creating-your-bot/slash-commands.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nasync execute(interaction) {\n\tawait interaction.reply('Pong!')\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Embeds with EmbedBuilder in Discord.js\nDESCRIPTION: This snippet demonstrates how to create and send an embed message using the EmbedBuilder class from discord.js. It shows setting various properties like color, title, URL, author, description, thumbnail, fields, image, timestamp, and footer.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/embeds.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// at the top of your file\nconst { EmbedBuilder } = require('discord.js');\n\n// inside a command, event listener, etc.\nconst exampleEmbed = new EmbedBuilder()\n\t.setColor(0x0099FF)\n\t.setTitle('Some title')\n\t.setURL('https://discord.js.org/')\n\t.setAuthor({ name: 'Some name', iconURL: 'https://i.imgur.com/AfFp7pu.png', url: 'https://discord.js.org' })\n\t.setDescription('Some description here')\n\t.setThumbnail('https://i.imgur.com/AfFp7pu.png')\n\t.addFields(\n\t\t{ name: 'Regular field title', value: 'Some value here' },\n\t\t{ name: '\\u200B', value: '\\u200B' },\n\t\t{ name: 'Inline field title', value: 'Some value here', inline: true },\n\t\t{ name: 'Inline field title', value: 'Some value here', inline: true },\n\t)\n\t.addFields({ name: 'Inline field title', value: 'Some value here', inline: true })\n\t.setImage('https://i.imgur.com/AfFp7pu.png')\n\t.setTimestamp()\n\t.setFooter({ text: 'Some footer text here', iconURL: 'https://i.imgur.com/AfFp7pu.png' });\n\nchannel.send({ embeds: [exampleEmbed] });\n```\n\n----------------------------------------\n\nTITLE: Executing Commands in Discord.js\nDESCRIPTION: Handles the execution of commands, including error handling and appropriate responses to the user.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/creating-your-bot/command-handling.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclient.on(Events.InteractionCreate, async interaction => {\n\tif (!interaction.isChatInputCommand()) return;\n\n\tconst command = interaction.client.commands.get(interaction.commandName);\n\n\tif (!command) {\n\t\tconsole.error(`No command matching ${interaction.commandName} was found.`);\n\t\treturn;\n\t}\n\n\ttry {\n\t\tawait command.execute(interaction);\n\t} catch (error) {\n\t\tconsole.error(error);\n\t\tif (interaction.replied || interaction.deferred) {\n\t\t\tawait interaction.followUp({ content: 'There was an error while executing this command!', flags: MessageFlags.Ephemeral });\n\t\t} else {\n\t\t\tawait interaction.reply({ content: 'There was an error while executing this command!', flags: MessageFlags.Ephemeral });\n\t\t}\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Discord.js Client with Gateway Intents\nDESCRIPTION: Example showing how to initialize a Discord.js client with specific Gateway Intents. Demonstrates setting up basic and privileged intents like Guilds, GuildMessages, MessageContent, and GuildMembers.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/intents.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Client, GatewayIntentBits } = require('discord.js');\n\nconst client = new Client({\n\tintents: [\n\t\tGatewayIntentBits.Guilds,\n\t\tGatewayIntentBits.GuildMessages,\n\t\tGatewayIntentBits.MessageContent,\n\t\tGatewayIntentBits.GuildMembers,\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Audio Player Behavior in Discord.js\nDESCRIPTION: Shows how to customize the behavior of an audio player, specifically setting the noSubscriber behavior to pause when there are no active subscribers.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/voice/audio-player.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createAudioPlayer, NoSubscriberBehavior } = require('@discordjs/voice');\n\nconst player = createAudioPlayer({\n\tbehaviors: {\n\t\tnoSubscriber: NoSubscriberBehavior.Pause,\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Dynamic Event Handling in Discord.js Bot\nDESCRIPTION: This code demonstrates how to dynamically load and register event handlers in a Discord.js bot. It reads event files from a directory and sets up the appropriate event listeners.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/creating-your-bot/event-handling.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst fs = require('node:fs');\nconst path = require('node:path');\nconst { Client, Collection, GatewayIntentBits } = require('discord.js');\nconst { token } = require('./config.json');\n\nconst client = new Client({ intents: [GatewayIntentBits.Guilds] });\n\nclient.commands = new Collection();\nconst foldersPath = path.join(__dirname, 'commands');\nconst commandFolders = fs.readdirSync(foldersPath);\n\nfor (const folder of commandFolders) {\n\tconst commandsPath = path.join(foldersPath, folder);\n\tconst commandFiles = fs.readdirSync(commandsPath).filter(file => file.endsWith('.js'));\n\tfor (const file of commandFiles) {\n\t\tconst filePath = path.join(commandsPath, file);\n\t\tconst command = require(filePath);\n\t\tif ('data' in command && 'execute' in command) {\n\t\t\tclient.commands.set(command.data.name, command);\n\t\t} else {\n\t\t\tconsole.log(`[WARNING] The command at ${filePath} is missing a required \"data\" or \"execute\" property.`);\n\t\t}\n\t}\n}\n\nconst eventsPath = path.join(__dirname, 'events');\nconst eventFiles = fs.readdirSync(eventsPath).filter(file => file.endsWith('.js'));\n\nfor (const file of eventFiles) {\n\tconst filePath = path.join(eventsPath, file);\n\tconst event = require(filePath);\n\tif (event.once) {\n\t\tclient.once(event.name, (...args) => event.execute(...args));\n\t} else {\n\t\tclient.on(event.name, (...args) => event.execute(...args));\n\t}\n}\n\nclient.login(token);\n```\n\n----------------------------------------\n\nTITLE: Implementing InteractionCreate Event Handler in Discord.js\nDESCRIPTION: This code sets up an event listener for the InteractionCreate event in Discord.js. It handles chat input commands, executes the appropriate command, and handles errors.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/creating-your-bot/event-handling.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclient.on(Events.InteractionCreate, async interaction => {\n\tif (!interaction.isChatInputCommand()) return;\n\n\tconst command = interaction.client.commands.get(interaction.commandName);\n\n\tif (!command) {\n\t\tconsole.error(`No command matching ${interaction.commandName} was found.`);\n\t\treturn;\n\t}\n\n\ttry {\n\t\tawait command.execute(interaction);\n\t} catch (error) {\n\t\tconsole.error(error);\n\t\tif (interaction.replied || interaction.deferred) {\n\t\t\tawait interaction.followUp({ content: 'There was an error while executing this command!', flags: MessageFlags.Ephemeral });\n\t\t} else {\n\t\t\tawait interaction.reply({ content: 'There was an error while executing this command!', flags: MessageFlags.Ephemeral });\n\t\t}\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Slash Command Definition using SlashCommandBuilder in Discord.js\nDESCRIPTION: A minimal slash command definition using SlashCommandBuilder to create a ping command that requires a name and description. Slash command names must follow specific formatting rules.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/creating-your-bot/slash-commands.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnew SlashCommandBuilder()\n\t.setName('ping')\n\t.setDescription('Replies with Pong!');\n```\n\n----------------------------------------\n\nTITLE: User Information Command Implementation for Discord.js\nDESCRIPTION: A slash command that provides information about the user who triggered the command, including their username and when they joined the server, demonstrating interaction with user and member objects.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/creating-your-bot/slash-commands.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { SlashCommandBuilder } = require('discord.js');\n\nmodule.exports = {\n\tdata: new SlashCommandBuilder()\n\t\t.setName('user')\n\t\t.setDescription('Provides information about the user.'),\n\tasync execute(interaction) {\n\t\t// interaction.user is the object representing the User who ran the command\n\t\t// interaction.member is the GuildMember object, which represents the user in the specific guild\n\t\tawait interaction.reply(`This command was run by ${interaction.user.username}, who joined on ${interaction.member.joinedAt}.`);\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Autocomplete Response Implementation\nDESCRIPTION: Shows how to implement filtered autocomplete responses based on user input.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/slash-commands/autocomplete.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n\tdata: new SlashCommandBuilder()\n\t\t.setName('guide')\n\t\t.setDescription('Search discordjs.guide!')\n\t\t.addStringOption(option =>\n\t\t\toption.setName('query')\n\t\t\t\t.setDescription('Phrase to search for')\n\t\t\t\t.setAutocomplete(true)),\n\tasync autocomplete(interaction) {\n\t\tconst focusedValue = interaction.options.getFocused();\n\t\tconst choices = ['Popular Topics: Threads', 'Sharding: Getting started', 'Library: Voice Connections', 'Interactions: Replying to slash commands', 'Popular Topics: Embed preview'];\n\t\tconst filtered = choices.filter(choice => choice.startsWith(focusedValue));\n\t\tawait interaction.respond(\n\t\t\tfiltered.map(choice => ({ name: choice, value: choice })),\n\t\t);\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Command Collection in Discord.js\nDESCRIPTION: Sets up the necessary imports and initializes a Collection to store bot commands. This is the foundation for the command handler.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/creating-your-bot/command-handling.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst fs = require('node:fs');\nconst path = require('node:path');\nconst { Client, Collection, Events, GatewayIntentBits } = require('discord.js');\nconst { token } = require('./config.json');\n\nconst client = new Client({ intents: [GatewayIntentBits.Guilds] });\n\nclient.commands = new Collection();\n```\n\n----------------------------------------\n\nTITLE: Error Handling with Try/Catch in Async/Await for Discord.js\nDESCRIPTION: Implementing error handling with try/catch blocks when using async/await in Discord.js. This pattern replaces the .catch() method used in Promise chains and provides a clean way to handle exceptions.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/async-await.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nclient.on(Events.InteractionCreate, async interaction => {\n\tif (commandName === 'react') {\n\t\ttry {\n\t\t\tconst response = await interaction.reply({ content: 'Reacting!', withResponse: true });\n\t\t\tconst { message } = response.resource;\n\t\t\tawait message.react('🇦');\n\t\t\tawait message.react('🇧');\n\t\t\tawait message.react('🇨');\n\t\t} catch (error) {\n\t\t\t// handle failure of any Promise rejection inside here\n\t\t}\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Complete interactionCreate Event Handler with Multiple Interaction Types in Discord.js\nDESCRIPTION: Extended interactionCreate event handler that processes different types of interactions including chat commands, buttons, and select menus. This demonstrates how to create a permanent component handler for all interaction types.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/message-components/interactions.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Events } = require('discord.js');\n\nmodule.exports = {\n\tname: Events.InteractionCreate,\n\tasync execute(interaction) {\n\t\tif (interaction.isChatInputCommand()) {\n\t\t\tconst command = interaction.client.commands.get(interaction.commandName);\n\n\t\t\tif (!command) {\n\t\t\t\tconsole.error(`No command matching ${interaction.commandName} was found.`);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tawait command.execute(interaction);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(`Error executing ${interaction.commandName}`);\n\t\t\t\tconsole.error(error);\n\t\t\t}\n\t\t} else if (interaction.isButton()) {\n\t\t\t// respond to the button\n\t\t} else if (interaction.isStringSelectMenu()) {\n\t\t\t// respond to the select menu\n\t\t}\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Using GuildBanManager in Discord.js v13\nDESCRIPTION: Shows how to fetch bans using the new GuildBanManager instead of the removed Guild methods for bans.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/changes-in-v13.md#2025-04-09_snippet_15\n\nLANGUAGE: diff\nCODE:\n```\n- guild.fetchBan(user);\n+ guild.bans.fetch(user);\n\n- guild.fetchBans();\n+ guild.bans.fetch();\n```\n\n----------------------------------------\n\nTITLE: Defining a Slash Command with Options in Discord.js\nDESCRIPTION: This snippet shows how to create a 'ban' slash command with two options: a required 'target' user and an optional 'reason' string. It also sets default member permissions and context.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/slash-commands/parsing-options.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { InteractionContextType, PermissionFlagsBits, SlashCommandBuilder } = require('discord.js');\n\nmodule.exports = {\n\tdata: new SlashCommandBuilder()\n\t\t.setName('ban')\n\t\t.setDescription('Select a member and ban them.')\n\t\t.addUserOption(option =>\n\t\t\toption\n\t\t\t\t.setName('target')\n\t\t\t\t.setDescription('The member to ban')\n\t\t\t\t.setRequired(true))\n\t\t.addStringOption(option =>\n\t\t\toption\n\t\t\t\t.setName('reason')\n\t\t\t\t.setDescription('The reason for banning'))\n\t\t.setDefaultMemberPermissions(PermissionFlagsBits.BanMembers)\n\t\t.setContexts(InteractionContextType.Guild),\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Client and Guild IDs for Discord.js Bot\nDESCRIPTION: This JSON snippet shows the structure of the config.json file, which includes the bot token, client ID, and guild ID. These values are essential for authenticating and deploying slash commands.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/creating-your-bot/command-deployment.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"token\": \"your-token-goes-here\",\n\t\"clientId\": \"your-application-id-goes-here\",\n\t\"guildId\": \"your-server-id-goes-here\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Text Input Components to a Discord.js Modal\nDESCRIPTION: Shows how to add text input components to a modal form, including both short and paragraph style inputs. The example includes setting up action rows and showing the modal to the user.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/interactions/modals.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { ActionRowBuilder, Events, ModalBuilder, TextInputBuilder, TextInputStyle } = require('discord.js');\n\nclient.on(Events.InteractionCreate, async interaction => {\n\tif (!interaction.isChatInputCommand()) return;\n\n\tif (interaction.commandName === 'ping') {\n\t\t// Create the modal\n\t\tconst modal = new ModalBuilder()\n\t\t\t.setCustomId('myModal')\n\t\t\t.setTitle('My Modal');\n\n\t\t// Add components to modal\n\n\t\t// Create the text input components\n\t\tconst favoriteColorInput = new TextInputBuilder()\n\t\t\t.setCustomId('favoriteColorInput')\n\t\t    // The label is the prompt the user sees for this input\n\t\t\t.setLabel(\"What's your favorite color?\")\n\t\t    // Short means only a single line of text\n\t\t\t.setStyle(TextInputStyle.Short);\n\n\t\tconst hobbiesInput = new TextInputBuilder()\n\t\t\t.setCustomId('hobbiesInput')\n\t\t\t.setLabel(\"What's some of your favorite hobbies?\")\n\t\t    // Paragraph means multiple lines of text.\n\t\t\t.setStyle(TextInputStyle.Paragraph);\n\n\t\t// An action row only holds one text input,\n\t\t// so you need one action row per text input.\n\t\tconst firstActionRow = new ActionRowBuilder().addComponents(favoriteColorInput);\n\t\tconst secondActionRow = new ActionRowBuilder().addComponents(hobbiesInput);\n\n\t\t// Add inputs to the modal\n\t\tmodal.addComponents(firstActionRow, secondActionRow);\n\n\t\t// Show the modal to the user\n\t\tawait interaction.showModal(modal);\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Unhandled Promise Rejections in Discord.js\nDESCRIPTION: Implementation of a global error handler for unhandled promise rejections. Helps diagnose API errors by logging detailed error information including the error path, code, and method.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/errors.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nprocess.on('unhandledRejection', error => {\n\tconsole.error('Unhandled promise rejection:', error);\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Discord.js Client and Setting Up Event Handlers\nDESCRIPTION: This snippet sets up the Discord.js client, imports necessary modules, and defines basic event handlers for the bot. It includes the skeleton code for handling messages and interactions.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/sequelize/currency.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Op } = require('sequelize');\nconst { Client, codeBlock, Collection, Events, GatewayIntentBits } = require('discord.js');\nconst { Users, CurrencyShop } = require('./dbObjects.js');\n\nconst client = new Client({ intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessages] });\nconst currency = new Collection();\n\nclient.once(Events.ClientReady, readyClient => {\n\tconsole.log(`Ready! Logged in as ${readyClient.user.tag}`);\n});\n\nclient.on(Events.MessageCreate, async message => {\n\tif (message.author.bot) return;\n\taddBalance(message.author.id, 1);\n});\n\nclient.on(Events.InteractionCreate, async interaction => {\n\tif (!interaction.isChatInputCommand()) return;\n\n\tconst { commandName } = interaction;\n\t// ...\n});\n\nclient.login('your-token-goes-here');\n```\n\n----------------------------------------\n\nTITLE: Updating Client Initialization in Discord.js v14\nDESCRIPTION: Changes required for initializing a Discord.js client in v14, including updated import statements and new enum usage for intents and partials.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/changes-in-v14.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n- const { Client, Intents } = require('discord.js');\n+ const { Client, GatewayIntentBits, Partials } = require('discord.js');\n\n- const client = new Client({ intents: [Intents.FLAGS.GUILDS], partials: ['CHANNEL'] });\n+ const client = new Client({ intents: [GatewayIntentBits.Guilds], partials: [Partials.Channel] });\n```\n\n----------------------------------------\n\nTITLE: Awaiting Modal Submission with Timeout in Discord.js\nDESCRIPTION: This code snippet demonstrates how to use the awaitModalSubmit method to wait for a modal submission. It includes a timeout of 60 seconds and handles both successful submissions and timeouts. The method returns a promise that resolves with the interaction if submitted, or rejects if no submission is received within the specified time.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/collectors.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ninitialInteraction.awaitModalSubmit({ time: 60_000, filter })\n\t.then(interaction => interaction.editReply('Thank you for your submission!'))\n\t.catch(err => console.log('No modal submit interaction was collected'));\n```\n\n----------------------------------------\n\nTITLE: Server Information Command Implementation for Discord.js\nDESCRIPTION: A slash command that provides information about the Discord server (guild) where the command was used, showing basic server properties like name and member count.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/creating-your-bot/slash-commands.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { SlashCommandBuilder } = require('discord.js');\n\nmodule.exports = {\n\tdata: new SlashCommandBuilder()\n\t\t.setName('server')\n\t\t.setDescription('Provides information about the server.'),\n\tasync execute(interaction) {\n\t\t// interaction.guild is the object representing the Guild in which the command was run\n\t\tawait interaction.reply(`This server is ${interaction.guild.name} and has ${interaction.guild.memberCount} members.`);\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing ClientReady Event Handler in Discord.js\nDESCRIPTION: This code sets up an event listener for the ClientReady event in Discord.js. It logs a message when the client is ready and logged in.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/creating-your-bot/event-handling.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclient.once(Events.ClientReady, readyClient => {\n\tconsole.log(`Ready! Logged in as ${readyClient.user.tag}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Slash Command with Choices in Discord.js\nDESCRIPTION: This snippet illustrates how to create a 'gif' slash command with a 'category' option that has predefined choices. It demonstrates setting up multiple choices for a string option.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/slash-commands/parsing-options.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { SlashCommandBuilder } = require('discord.js');\n\nmodule.exports = {\n\tdata: new SlashCommandBuilder()\n\t\t.setName('gif')\n\t\t.setDescription('Sends a random gif!')\n\t\t.addStringOption(option =>\n\t\t\toption.setName('category')\n\t\t\t\t.setDescription('The gif category')\n\t\t\t\t.setRequired(true)\n\t\t\t\t.addChoices(\n\t\t\t\t\t{ name: 'Funny', value: 'gif_funny' },\n\t\t\t\t\t{ name: 'Meme', value: 'gif_meme' },\n\t\t\t\t\t{ name: 'Movie', value: 'gif_movie' },\n\t\t\t\t)),\n\tasync execute(interaction) {\n\t\tconst category = interaction.options.getString('category');\n\t\t// category must be one of 'gif_funny', 'gif_meme', or 'gif_movie'\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Converting Collection to Array in JavaScript\nDESCRIPTION: Shows different methods to convert a Collection to an Array, including Array.from() and spread syntax for values, keys, and key-value pairs.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/collections.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// For values.\nArray.from(collection.values());\n[...collection.values()];\n\n// For keys.\nArray.from(collection.keys());\n[...collection.keys()];\n\n// For [key, value] pairs.\nArray.from(collection);\n[...collection];\n```\n\n----------------------------------------\n\nTITLE: Complete OAuth2 Token Exchange Implementation\nDESCRIPTION: Full implementation of OAuth2 token exchange using Express and Undici, including error handling and token response processing.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/oauth2/README.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst { request } = require('undici');\nconst express = require('express');\nconst { clientId, clientSecret, port } = require('./config.json');\n\nconst app = express();\n\napp.get('/', async ({ query }, response) => {\n\tconst { code } = query;\n\n\tif (code) {\n\t\ttry {\n\t\t\tconst tokenResponseData = await request('https://discord.com/api/oauth2/token', {\n\t\t\t\tmethod: 'POST',\n\t\t\t\tbody: new URLSearchParams({\n\t\t\t\t\tclient_id: clientId,\n\t\t\t\t\tclient_secret: clientSecret,\n\t\t\t\t\tcode,\n\t\t\t\t\tgrant_type: 'authorization_code',\n\t\t\t\t\tredirect_uri: `http://localhost:${port}`,\n\t\t\t\t\tscope: 'identify',\n\t\t\t\t}).toString(),\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/x-www-form-urlencoded',\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tconst oauthData = await tokenResponseData.body.json();\n\t\t\tconsole.log(oauthData);\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t}\n\t}\n\n\treturn response.sendFile('index.html', { root: '.' });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Basic String Option Command in Discord.js\nDESCRIPTION: Demonstrates how to create a basic echo command with a string input option using SlashCommandBuilder.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/slash-commands/advanced-creation.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { SlashCommandBuilder } = require('discord.js');\n\nconst data = new SlashCommandBuilder()\n\t.setName('echo')\n\t.setDescription('Replies with your input!')\n\t.addStringOption(option =>\n\t\toption.setName('input')\n\t\t\t.setDescription('The input to echo back'));\n```\n\n----------------------------------------\n\nTITLE: Setting Up Keyv with Discord.js\nDESCRIPTION: JavaScript code showing how to set up Keyv with Discord.js for per-guild prefix configuration.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/keyv/README.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst Keyv = require('keyv');\nconst { Client, Events, GatewayIntentBits } = require('discord.js');\nconst { globalPrefix, token } = require('./config.json');\n\nconst client = new Client({ intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessages, GatewayIntentBits.MessageContent] });\nconst prefixes = new Keyv('sqlite://path/to.sqlite');\n```\n\n----------------------------------------\n\nTITLE: Creating a Private Thread in Discord.js\nDESCRIPTION: Shows how to create a private thread by specifying ChannelType.PrivateThread as the type.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/threads.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst { ChannelType, ThreadAutoArchiveDuration } = require('discord.js');\n\nconst thread = await channel.threads.create({\n\tname: 'mod-talk',\n\tautoArchiveDuration: ThreadAutoArchiveDuration.OneHour,\n\ttype: ChannelType.PrivateThread,\n\treason: 'Needed a separate thread for moderation',\n});\n\nconsole.log(`Created thread: ${thread.name}`);\n```\n\n----------------------------------------\n\nTITLE: Database Initialization Script for Discord Currency System\nDESCRIPTION: Initializes the database with Sequelize models and populates the CurrencyShop with initial items. Supports force syncing with command line arguments to reset the database if needed.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/sequelize/currency.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst Sequelize = require('sequelize');\n\nconst sequelize = new Sequelize('database', 'username', 'password', {\n\thost: 'localhost',\n\tdialect: 'sqlite',\n\tlogging: false,\n\tstorage: 'database.sqlite',\n});\n\nconst CurrencyShop = require('./models/CurrencyShop.js')(sequelize, Sequelize.DataTypes);\nrequire('./models/Users.js')(sequelize, Sequelize.DataTypes);\nrequire('./models/UserItems.js')(sequelize, Sequelize.DataTypes);\n\nconst force = process.argv.includes('--force') || process.argv.includes('-f');\n\nsequelize.sync({ force }).then(async () => {\n\tconst shop = [\n\t\tCurrencyShop.upsert({ name: 'Tea', cost: 1 }),\n\t\tCurrencyShop.upsert({ name: 'Coffee', cost: 2 }),\n\t\tCurrencyShop.upsert({ name: 'Cake', cost: 5 }),\n\t];\n\n\tawait Promise.all(shop);\n\tconsole.log('Database synced');\n\n\tsequelize.close();\n}).catch(console.error);\n```\n\n----------------------------------------\n\nTITLE: Implementing Localization in Discord.js Commands\nDESCRIPTION: Demonstrates how to add localizations for command names and descriptions in multiple languages.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/slash-commands/advanced-creation.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst { SlashCommandBuilder } = require('discord.js');\n\nconst data = new SlashCommandBuilder()\n\t.setName('dog')\n\t.setNameLocalizations({\n\t\tpl: 'pies',\n\t\tde: 'hund',\n\t})\n\t.setDescription('Get a cute picture of a dog!')\n\t.setDescriptionLocalizations({\n\t\tpl: 'Słodkie zdjęcie pieska!',\n\t\tde: 'Poste ein niedliches Hundebild!',\n\t})\n\t.addStringOption(option =>\n\t\toption\n\t\t\t.setName('breed')\n\t\t\t.setDescription('Breed of dog')\n\t\t\t.setNameLocalizations({\n\t\t\t\tpl: 'rasa',\n\t\t\t\tde: 'rasse',\n\t\t\t})\n\t\t\t.setDescriptionLocalizations({\n\t\t\t\tpl: 'Rasa psa',\n\t\t\t\tde: 'Hunderasse',\n\t\t\t}),\n\t);\n```\n\n----------------------------------------\n\nTITLE: Basic Discord.js Bot Template with ES6\nDESCRIPTION: A fundamental Discord.js bot setup that includes client initialization, event handling for ClientReady and InteractionCreate events, and token authentication. Serves as a template for the async examples that follow.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/async-await.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Client, Events, GatewayIntentBits } = require('discord.js');\n\nconst client = new Client({ intents: [GatewayIntentBits.Guilds] });\n\nclient.once(Events.ClientReady, () => {\n\tconsole.log('I am ready!');\n});\n\nclient.on(Events.InteractionCreate, interaction => {\n\tif (!interaction.isChatInputCommand()) return;\n\n\tif (interaction.commandName === 'react') {\n\t\t// ...\n\t}\n});\n\nclient.login('your-token-goes-here');\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Activity Types in Discord.js\nDESCRIPTION: Code to set a Discord bot's activity to different types like Watching, Listening, or Competing using ActivityType enum.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/faq.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst { ActivityType } = require('discord.js');\n\nclient.user.setActivity('activity', { type: ActivityType.Watching });\nclient.user.setActivity('activity', { type: ActivityType.Listening });\nclient.user.setActivity('activity', { type: ActivityType.Competing });\n```\n\n----------------------------------------\n\nTITLE: Handling Interaction Events in Discord.js\nDESCRIPTION: Sets up an event listener for the interactionCreate event, filtering for chat input command interactions.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/creating-your-bot/command-handling.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclient.on(Events.InteractionCreate, interaction => {\n\tif (!interaction.isChatInputCommand()) return;\n\tconsole.log(interaction);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Configuration File in JSON Format\nDESCRIPTION: Basic example of a config.json file structure for storing a Discord bot token. This approach allows you to keep sensitive values in a separate file and import them when needed.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/creating-your-bot/README.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"token\": \"your-token-goes-here\"\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Permissions Using has() Method\nDESCRIPTION: Demonstrates how to check if a PermissionsBitField has specific permissions using the has() method, including examples with decimal bit fields, flag arrays, and Administrator permission handling.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/permissions.md#2025-04-09_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst { PermissionsBitField } = require('discord.js');\n\nconst bitPermissions = new PermissionsBitField(268_550_160n);\n\nconsole.log(bitPermissions.has(PermissionsBitField.Flags.ManageChannels));\n// output: true\n\nconsole.log(bitPermissions.has([PermissionsBitField.Flags.ManageChannels, PermissionsBitField.Flags.EmbedLinks]));\n// output: true\n\nconsole.log(bitPermissions.has([PermissionsBitField.Flags.ManageChannels, PermissionsBitField.Flags.KickMembers]));\n// output: false\n\nconst flagsPermissions = new PermissionsBitField([\n\tPermissionsBitField.Flags.ManageChannels,\n\tPermissionsBitField.Flags.EmbedLinks,\n\tPermissionsBitField.Flags.AttachFiles,\n\tPermissionsBitField.Flags.ReadMessageHistory,\n\tPermissionsBitField.Flags.ManageRoles,\n]);\n\nconsole.log(flagsPermissions.has(PermissionsBitField.Flags.ManageChannels));\n// output: true\n\nconsole.log(flagsPermissions.has([PermissionsBitField.Flags.ManageChannels, PermissionsBitField.Flags.EmbedLinks]));\n// output: true\n\nconsole.log(flagsPermissions.has([PermissionsBitField.Flags.ManageChannels, PermissionsBitField.Flags.KickMembers]));\n// output: false\n\nconst adminPermissions = new PermissionsBitField(PermissionsBitField.Flags.Administrator);\n\nconsole.log(adminPermissions.has(PermissionsBitField.Flags.ManageChannels));\n// output: true\n\nconsole.log(adminPermissions.has(PermissionsBitField.Flags.ManageChannels, true));\n// output: true\n\nconsole.log(adminPermissions.has(PermissionsBitField.Flags.ManageChannels, false));\n// output: false\n```\n\n----------------------------------------\n\nTITLE: Installing ESLint for Discord.js Projects\nDESCRIPTION: Commands to install ESLint and its JavaScript plugin using different package managers (npm, yarn, pnpm, bun).\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/preparations/setting-up-a-linter.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-dev eslint @eslint/js\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn add eslint @eslint/js --dev\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm add --save-dev eslint @eslint/js\n```\n\nLANGUAGE: sh\nCODE:\n```\nbun add --dev eslint\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Promise Function in JavaScript\nDESCRIPTION: A demonstration of creating and using a Promise to handle asynchronous operations. This example shows a function that simulates message deletion with timeout and includes promise resolution and rejection handling.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/async-await.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction deleteMessages(amount) {\n\treturn new Promise((resolve, reject) => {\n\t\tif (amount > 10) return reject(new Error('You can\\'t delete more than 10 Messages at a time.'));\n\t\tsetTimeout(() => resolve('Deleted 10 messages.'), 2_000);\n\t});\n}\n\ndeleteMessages(5).then(value => {\n\t// `deleteMessages` is complete and has not encountered any errors\n\t// the resolved value will be the string \"Deleted 10 messages\"\n}).catch(error => {\n\t// `deleteMessages` encountered an error\n\t// the error will be an Error Object\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Config Values from JSON File in JavaScript\nDESCRIPTION: Example showing how to import and use values from a config.json file in a JavaScript application. This demonstrates destructuring to extract specific properties from the imported configuration.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/creating-your-bot/README.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { token } = require('./config.json');\n\nconsole.log(token);\n```\n\n----------------------------------------\n\nTITLE: Setting Base Permissions for Roles in JavaScript\nDESCRIPTION: Shows how to set base permissions for roles, including the @everyone role, using discord.js PermissionsBitField.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/permissions.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { PermissionsBitField } = require('discord.js');\n\nguild.roles.everyone.setPermissions([PermissionsBitField.Flags.SendMessages, PermissionsBitField.Flags.ViewChannel]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Item Purchase Command with Sequelize and Discord.js\nDESCRIPTION: This code snippet shows how to implement an item purchase command. It checks if the item exists, if the user has enough balance, and then adds the item to the user's inventory using Sequelize associations.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/sequelize/currency.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nelse if (commandName === 'buy') {\n\tconst itemName = interaction.options.getString('item');\n\tconst item = await CurrencyShop.findOne({ where: { name: { [Op.like]: itemName } } });\n\n\tif (!item) return interaction.reply(`That item doesn't exist.`);\n\tif (item.cost > getBalance(interaction.user.id)) {\n\t\treturn interaction.reply(`You currently have ${getBalance(interaction.user.id)}, but the ${item.name} costs ${item.cost}!`);\n\t}\n\n\tconst user = await Users.findOne({ where: { user_id: interaction.user.id } });\n\taddBalance(interaction.user.id, -item.cost);\n\tawait user.addItem(item);\n\n\treturn interaction.reply(`You've bought: ${item.name}.`);\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Specific Discord Bot Commands with REST API in JavaScript\nDESCRIPTION: This snippet demonstrates how to delete specific guild-based or global commands using the Discord.js REST API. It requires the command ID which can be obtained from the Discord server settings under the Bots and Apps integration section.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/slash-commands/deleting-commands.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { REST, Routes } = require('discord.js');\nconst { clientId, guildId, token } = require('./config.json');\n\nconst rest = new REST().setToken(token);\n\n// ...\n\n// for guild-based commands\nrest.delete(Routes.applicationGuildCommand(clientId, guildId, 'commandId'))\n\t.then(() => console.log('Successfully deleted guild command'))\n\t.catch(console.error);\n\n// for global commands\nrest.delete(Routes.applicationCommand(clientId, 'commandId'))\n\t.then(() => console.log('Successfully deleted application command'))\n\t.catch(console.error);\n```\n\n----------------------------------------\n\nTITLE: Handling Urban Dictionary API Response\nDESCRIPTION: Processing the Urban Dictionary API response and sending a reply with the definition or a not found message.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/rest-api.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nif (commandName === 'urban') {\n\t// ...\n\tif (!list.length) {\n\t\treturn interaction.editReply(`No results found for **${term}**.`);\n\t}\n\n\tinteraction.editReply(`**${term}**: ${list[0].definition}`);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables via Command Line\nDESCRIPTION: Example of setting environment variables directly in the command line when starting a Node.js application. This method allows passing multiple variables that will be available through process.env.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/creating-your-bot/README.md#2025-04-09_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nA=123 B=456 DISCORD_TOKEN=your-token-goes-here node index.js\n```\n\n----------------------------------------\n\nTITLE: Complete Ping Command Implementation for Discord.js\nDESCRIPTION: A full implementation of a ping command in Discord.js, showing both the command definition and execution method exported in a single module for use in command handling systems.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/creating-your-bot/slash-commands.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { SlashCommandBuilder } = require('discord.js');\n\nmodule.exports = {\n\tdata: new SlashCommandBuilder()\n\t\t.setName('ping')\n\t\t.setDescription('Replies with Pong!'),\n\tasync execute(interaction) {\n\t\tawait interaction.reply('Pong!');\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Reaction Collector in Discord.js\nDESCRIPTION: Demonstrates how to create a basic reaction collector that waits for either a thumbs up or thumbs down reaction from a specific user. The collector times out after 60 seconds and handles both successful reactions and timeouts.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/reactions.md#2025-04-09_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nmessage.react('👍').then(() => message.react('👎'));\n\nconst collectorFilter = (reaction, user) => {\n\treturn ['👍', '👎'].includes(reaction.emoji.name) && user.id === interaction.user.id;\n};\n\nmessage.awaitReactions({ filter: collectorFilter, max: 1, time: 60_000, errors: ['time'] })\n\t.then(collected => {\n\t\tconst reaction = collected.first();\n\n\t\tif (reaction.emoji.name === '👍') {\n\t\t\tmessage.reply('You reacted with a thumbs up.');\n\t\t} else {\n\t\t\tmessage.reply('You reacted with a thumbs down.');\n\t\t}\n\t})\n\t.catch(collected => {\n\t\tmessage.reply('You reacted with neither a thumbs up, nor a thumbs down.');\n\t});\n```\n\n----------------------------------------\n\nTITLE: Configuring Sequelize Connection for SQLite\nDESCRIPTION: Setting up the Sequelize connection to use SQLite as the database engine. Defines the connection parameters including host, dialect, and storage location.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/sequelize/README.md#2025-04-09_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst client = new Client({ intents: [GatewayIntentBits.Guilds] });\n\nconst sequelize = new Sequelize('database', 'user', 'password', {\n\thost: 'localhost',\n\tdialect: 'sqlite',\n\tlogging: false,\n\t// SQLite only\n\tstorage: 'database.sqlite',\n});\n```\n\n----------------------------------------\n\nTITLE: Quiz Questions JSON Structure for Discord.js Bot\nDESCRIPTION: Defines a JSON structure for quiz questions and answers, allowing for multiple correct answers per question.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/collectors.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n\t{\n\t\t\"question\": \"What color is the sky?\",\n\t\t\"answers\": [\"blue\"]\n\t},\n\t{\n\t\t\"question\": \"How many letters are there in the alphabet?\",\n\t\t\"answers\": [\"26\", \"twenty-six\", \"twenty six\", \"twentysix\"]\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Attaching Images to Embeds with Plain Objects in Discord.js\nDESCRIPTION: This snippet shows how to attach an image file to a message and use it in an embed created with a plain object. Similar to the EmbedBuilder approach, the image is referenced using the 'attachment://' protocol.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/embeds.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { AttachmentBuilder } = require('discord.js');\n// ...\nconst file = new AttachmentBuilder('../assets/discordjs.png');\n\nconst exampleEmbed = {\n\ttitle: 'Some title',\n\timage: {\n\t\turl: 'attachment://discordjs.png',\n\t},\n};\n\nchannel.send({ embeds: [exampleEmbed], files: [file] });\n```\n\n----------------------------------------\n\nTITLE: Setting Default Member Permissions for Kick Command in Discord.js\nDESCRIPTION: This snippet shows how to create a slash command for kicking members, setting the default permission to require the KickMembers flag. It uses the SlashCommandBuilder to construct the command with options and permissions.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/slash-commands/permissions.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { SlashCommandBuilder, PermissionFlagsBits } = require('discord.js');\n\nconst data = new SlashCommandBuilder()\n\t.setName('kick')\n\t.setDescription('Select a member and kick them.')\n\t.addUserOption(option =>\n\t\toption\n\t\t\t.setName('target')\n\t\t\t.setDescription('The member to kick')\n\t\t\t.setRequired(true))\n\t.setDefaultMemberPermissions(PermissionFlagsBits.KickMembers);\n```\n\n----------------------------------------\n\nTITLE: Discord.js Skeleton Code for API Interactions\nDESCRIPTION: Basic setup for a Discord.js client with command handling and interaction deferral for API requests.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/rest-api.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Client, EmbedBuilder, Events, GatewayIntentBits } = require('discord.js');\n\nconst client = new Client({ intents: [GatewayIntentBits.Guilds] });\n\nclient.once(Events.ClientReady, readyClient => {\n\tconsole.log(`Ready! Logged in as ${readyClient.user.tag}`);\n});\n\nclient.on(Events.InteractionCreate, async interaction => {\n\tif (!interaction.isChatInputCommand()) return;\n\n\tconst { commandName } = interaction;\n\tawait interaction.deferReply();\n\t// ...\n});\n\nclient.login('your-token-goes-here');\n```\n\n----------------------------------------\n\nTITLE: Await Message Component in Discord.js\nDESCRIPTION: Uses awaitMessageComponent() to collect a single string select interaction from the command initiator, with a 60-second timeout.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/collectors.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst { ComponentType } = require('discord.js');\n\nconst collectorFilter = i => {\n\ti.deferUpdate();\n\treturn i.user.id === interaction.user.id;\n};\n\nmessage.awaitMessageComponent({ filter: collectorFilter, componentType: ComponentType.StringSelect, time: 60_000 })\n\t.then(interaction => interaction.editReply(`You selected ${interaction.values.join(', ')}!`))\n\t.catch(err => console.log('No interactions were collected.'));\n```\n\n----------------------------------------\n\nTITLE: Advanced Discord.js Client Cache Customization\nDESCRIPTION: This snippet shows advanced cache customization, limiting GuildMemberManager to 200 members per guild and using a keepOverLimit function to always cache the client's own member object.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/miscellaneous/cache-customization.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = new Client({\n\tmakeCache: Options.cacheWithLimits({\n\t\t...Options.DefaultMakeCacheSettings,\n\t\tReactionManager: 0,\n\t\tGuildMemberManager: {\n\t\t\tmaxSize: 200,\n\t\t\tkeepOverLimit: member => member.id === member.client.user.id,\n\t\t},\n\t}),\n});\n```\n\n----------------------------------------\n\nTITLE: Editing an Existing Embed Message in Discord.js\nDESCRIPTION: This snippet shows how to edit an existing message to update its embed content. It creates a new EmbedBuilder with updated content and passes it to the message's edit method.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/embeds.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst exampleEmbed = new EmbedBuilder()\n\t.setTitle('Some title')\n\t.setDescription('Description after the edit');\n\nmessage.edit({ embeds: [exampleEmbed] });\n```\n\n----------------------------------------\n\nTITLE: Setting Command Context and Permissions for Ban Command in Discord.js\nDESCRIPTION: This snippet demonstrates how to create a slash command for banning members, setting both the default permission to require the BanMembers flag and restricting the command to guild contexts only. It uses the SlashCommandBuilder and InteractionContextType.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/slash-commands/permissions.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { InteractionContextType, PermissionFlagsBits, SlashCommandBuilder } = require('discord.js');\n\nconst data = new SlashCommandBuilder()\n\t.setName('ban')\n\t.setDescription('Select a member and ban them.')\n\t.addUserOption(option =>\n\t\toption\n\t\t\t.setName('target')\n\t\t\t.setDescription('The member to ban')\n\t\t\t.setRequired(true))\n\t.setDefaultMemberPermissions(PermissionFlagsBits.BanMembers)\n\t.setContexts(InteractionContextType.Guild);\n```\n\n----------------------------------------\n\nTITLE: Basic Message Component Collector in Discord.js\nDESCRIPTION: Sets up a collector for button interactions, allowing the command initiator to interact while providing feedback to other users.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/collectors.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { ComponentType } = require('discord.js');\n\nconst collector = message.createMessageComponentCollector({ componentType: ComponentType.Button, time: 15_000 });\n\ncollector.on('collect', i => {\n\tif (i.user.id === interaction.user.id) {\n\t\ti.reply(`${i.user.id} clicked on the ${i.customId} button.`);\n\t} else {\n\t\ti.reply({ content: `These buttons aren't for you!`, flags: MessageFlags.Ephemeral });\n\t}\n});\n\ncollector.on('end', collected => {\n\tconsole.log(`Collected ${collected.size} interactions.`);\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Button Data in Discord.js v14\nDESCRIPTION: Changes required for defining button data in v14, including new enum import and usage for button styles.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/changes-in-v14.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n+ const { ButtonStyle } = require('discord.js');\n\nconst button = {\n  label: 'test',\n- style: 'PRIMARY',\n+ style: ButtonStyle.Primary,\n  customId: '1234'\n}\n```\n\n----------------------------------------\n\nTITLE: Enhanced Text Formatting with Multiple Text Elements in Discord.js Canvas\nDESCRIPTION: This snippet enhances the canvas by adding multiple text elements with different styling. It adds a 'Profile' label above the member's name and appends an exclamation mark to the display name while applying dynamic font sizing.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/canvas.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nclient.on(Events.InteractionCreate, async interaction => {\n\t// ...\n\tcontext.strokeRect(0, 0, canvas.width, canvas.height);\n\n\t// Slightly smaller text placed above the member's display name\n\tcontext.font = '28px sans-serif';\n\tcontext.fillStyle = '#ffffff';\n\tcontext.fillText('Profile', canvas.width / 2.5, canvas.height / 3.5);\n\n\t// Add an exclamation point here and below\n\tcontext.font = applyText(canvas, `${interaction.member.displayName}!`);\n\tcontext.fillStyle = '#ffffff';\n\tcontext.fillText(`${interaction.member.displayName}!`, canvas.width / 2.5, canvas.height / 1.8);\n\t// ...\n});\n```\n\n----------------------------------------\n\nTITLE: Conditionally Modifying Embed Objects in Discord.js\nDESCRIPTION: This snippet shows how to modify a plain embed object based on certain conditions, such as adding a color property if the message author is a bot.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/embeds.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst exampleEmbed = { title: 'Some title' };\n\nif (message.author.bot) {\n\texampleEmbed.color = 0x7289da;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Audio Resources in Discord.js\nDESCRIPTION: Demonstrates various ways to create audio resources using @discordjs/voice, including basic creation, enabling inline volume, and specifying input types for better performance.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/voice/audio-resources.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createReadStream } = require('node:fs');\nconst { join } = require('node:path');\nconst { createAudioResource, StreamType } = require('@discordjs/voice');\n\n// Basic, default options are:\n// Input type is unknown, so will use FFmpeg to convert to Opus under-the-hood\n// Inline volume is opt-in to improve performance\nlet resource = createAudioResource(join(__dirname, 'file.mp3'));\n\n// Will use FFmpeg with volume control enabled\nresource = createAudioResource(join(__dirname, 'file.mp3'), { inlineVolume: true });\nresource.volume.setVolume(0.5);\n\n// Will play .ogg or .webm Opus files without FFmpeg for better performance\n// Remember, inline volume is still disabled\nresource = createAudioResource(createReadStream(join(__dirname, 'file.ogg'), {\n\tinputType: StreamType.OggOpus,\n}));\n\n// Will play with FFmpeg due to inline volume being enabled.\nresource = createAudioResource(createReadStream(join(__dirname, 'file.webm'), {\n\tinputType: StreamType.WebmOpus,\n\tinlineVolume: true,\n}));\n\nplayer.play(resource);\n```\n\n----------------------------------------\n\nTITLE: Implementing Inventory Check Command with Sequelize and Discord.js\nDESCRIPTION: This code snippet shows how to implement an inventory check command. It uses Sequelize associations to retrieve a user's items from the database and display them in a formatted message.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/sequelize/currency.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nelse if (commandName === 'inventory') {\n\tconst target = interaction.options.getUser('user') ?? interaction.user;\n\tconst user = await Users.findOne({ where: { user_id: target.id } });\n\tconst items = await user.getItems();\n\n\tif (!items.length) return interaction.reply(`${target.tag} has nothing!`);\n\n\treturn interaction.reply(`${target.tag} currently has ${items.map(i => `${i.amount} ${i.item.name}`).join(', ')}`);\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Button Confirmation Results in Discord.js\nDESCRIPTION: Code showing the complete flow of awaiting a button interaction and handling different responses (confirm or cancel) in a ban command implementation. The code processes the customId to determine which action to take.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/message-components/interactions.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await interaction.reply({\n\tcontent: `Are you sure you want to ban ${target.username} for reason: ${reason}?`,\n\tcomponents: [row],\n\twithResponse: true,\n});\n\nconst collectorFilter = i => i.user.id === interaction.user.id;\ntry {\n\tconst confirmation = await response.resource.message.awaitMessageComponent({ filter: collectorFilter, time: 60_000 });\n\n\tif (confirmation.customId === 'confirm') {\n\t\tawait interaction.guild.members.ban(target);\n\t\tawait confirmation.update({ content: `${target.username} has been banned for reason: ${reason}`, components: [] });\n\t} else if (confirmation.customId === 'cancel') {\n\t\tawait confirmation.update({ content: 'Action cancelled', components: [] });\n\t}\n} catch {\n\tawait interaction.editReply({ content: 'Confirmation not received within 1 minute, cancelling', components: [] });\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Custom Emojis for Reactions in Discord.js\nDESCRIPTION: Illustrates how to find a custom emoji using the find() method on the guild's emoji cache, then use it for a reaction. This approach is useful when you need to retrieve the full emoji object.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/reactions.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nif (commandName === 'react-custom') {\n\tconst response = await interaction.reply({ content: 'You can react with custom emojis!', withResponse: true });\n\tconst message = response.resource.message;\n\tconst reactionEmoji = message.guild.emojis.cache.find(emoji => emoji.name === 'blobreach');\n\tmessage.react(reactionEmoji);\n}\n```\n\n----------------------------------------\n\nTITLE: Conditionally Modifying Embeds in Discord.js\nDESCRIPTION: This snippet shows how to modify an EmbedBuilder instance based on certain conditions, such as changing the embed color if the message author is a bot.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/embeds.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst exampleEmbed = new EmbedBuilder().setTitle('Some title');\n\nif (message.author.bot) {\n\texampleEmbed.setColor(0x7289DA);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Basic Text to Canvas in Discord.js\nDESCRIPTION: This snippet shows how to add text to a canvas image using fillText. It sets font properties including size, style, and color before rendering the member's display name on the image.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/canvas.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nclient.on(Events.InteractionCreate, async interaction => {\n\t// ...\n\tcontext.strokeRect(0, 0, canvas.width, canvas.height);\n\n\t// Select the font size and type from one of the natively available fonts\n\tcontext.font = '60px sans-serif';\n\n\t// Select the style that will be used to fill the text in\n\tcontext.fillStyle = '#ffffff';\n\n\t// Actually fill the text with a solid color\n\tcontext.fillText(interaction.member.displayName, canvas.width / 2.5, canvas.height / 1.8);\n\t// ...\n});\n```\n\n----------------------------------------\n\nTITLE: Deferred Response Implementation\nDESCRIPTION: Demonstrates how to handle longer-running commands using deferReply() to show a thinking state\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/slash-commands/response-methods.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst wait = require('node:timers/promises').setTimeout;\n\nclient.on(Events.InteractionCreate, async interaction => {\n\tif (!interaction.isChatInputCommand()) return;\n\n\tif (interaction.commandName === 'ping') {\n\t\tawait interaction.deferReply();\n\t\tawait wait(4_000);\n\t\tawait interaction.editReply('Pong!');\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Editing a Tag with Discord.js and Sequelize\nDESCRIPTION: This snippet shows how to update a tag's description in the database using Sequelize's update method. It handles the 'edittag' command, updating the tag if found or returning an error message if not.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/sequelize/README.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nelse if (command === 'edittag') {\n\tconst tagName = interaction.options.getString('name');\n\tconst tagDescription = interaction.options.getString('description');\n\n\t// equivalent to: UPDATE tags (description) values (?) WHERE name='?';\n\tconst affectedRows = await Tags.update({ description: tagDescription }, { where: { name: tagName } });\n\n\tif (affectedRows > 0) {\n\t\treturn interaction.reply(`Tag ${tagName} was edited.`);\n\t}\n\n\treturn interaction.reply(`Could not find a tag with name ${tagName}.`);\n}\n```\n\n----------------------------------------\n\nTITLE: Reacting with Custom Emojis in Discord.js\nDESCRIPTION: Shows how to react to a message with a custom emoji using its ID. This snippet is part of an interaction handler for a 'react-custom' command.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/reactions.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclient.on(Events.InteractionCreate, async interaction => {\n\tif (!interaction.isChatInputCommand()) return;\n\n\tconst { commandName } = interaction;\n\n\tif (commandName === 'react-custom') {\n\t\tconst response = await interaction.reply({ content: 'You can react with custom emojis!', withResponse: true });\n\t\tresponse.resource.message.react('123456789012345678');\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Resending a Received Embed in Discord.js\nDESCRIPTION: This snippet demonstrates how to retrieve an embed from a received message, convert it to an EmbedBuilder, modify it, and send it again. This is useful for forwarding or modifying existing embeds.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/embeds.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst receivedEmbed = message.embeds[0];\nconst exampleEmbed = EmbedBuilder.from(receivedEmbed).setTitle('New title');\n\nchannel.send({ embeds: [exampleEmbed] });\n```\n\n----------------------------------------\n\nTITLE: Sending Messages via Bot Client Webhook\nDESCRIPTION: Complete example of sending a webhook message using a bot client, including webhook discovery and error handling.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/webhooks.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Client, EmbedBuilder, Events, GatewayIntentBits } = require('discord.js');\nconst { token } = require('./config.json');\n\nconst client = new Client({ intents: [GatewayIntentBits.Guilds] });\n\nconst embed = new EmbedBuilder()\n\t.setTitle('Some Title')\n\t.setColor(0x00FFFF);\n\nclient.once(Events.ClientReady, async () => {\n\tconst channel = client.channels.cache.get('123456789012345678');\n\ttry {\n\t\tconst webhooks = await channel.fetchWebhooks();\n\t\tconst webhook = webhooks.find(wh => wh.token);\n\n\t\tif (!webhook) {\n\t\t\treturn console.log('No webhook was found that I can use!');\n\t\t}\n\n\t\tawait webhook.send({\n\t\t\tcontent: 'Webhook test',\n\t\t\tusername: 'some-username',\n\t\t\tavatarURL: 'https://i.imgur.com/AfFp7pu.png',\n\t\t\tembeds: [embed],\n\t\t});\n\t} catch (error) {\n\t\tconsole.error('Error trying to send a message: ', error);\n\t}\n});\n\nclient.login(token);\n```\n\n----------------------------------------\n\nTITLE: Creating PermissionsBitField from Permission Flags Array\nDESCRIPTION: Shows how to create a PermissionsBitField object from an array of permission flags, which is more readable than using numeric values.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/permissions.md#2025-04-09_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst { PermissionsBitField } = require('discord.js');\n\nconst flags = [\n\tPermissionsBitField.Flags.ViewChannel,\n\tPermissionsBitField.Flags.EmbedLinks,\n\tPermissionsBitField.Flags.AttachFiles,\n\tPermissionsBitField.Flags.ReadMessageHistory,\n\tPermissionsBitField.Flags.ManageRoles,\n];\n\nconst permissions = new PermissionsBitField(flags);\n```\n\n----------------------------------------\n\nTITLE: Probing and Creating Audio Resources in Discord.js\nDESCRIPTION: Demonstrates how to use demuxProbe to determine the stream type and create optimized audio resources for different file formats.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/voice/audio-resources.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createReadStream } = require('node:fs');\nconst { demuxProbe, createAudioResource } = require('@discordjs/voice');\n\nasync function probeAndCreateResource(readableStream) {\n\tconst { stream, type } = await demuxProbe(readableStream);\n\treturn createAudioResource(stream, { inputType: type });\n}\n\nasync function createResources() {\n\t// Creates an audio resource with inputType = StreamType.Arbitrary\n\tconst mp3Stream = await probeAndCreateResource(createReadStream('file.mp3'));\n\n\t// Creates an audio resource with inputType = StreamType.OggOpus\n\tconst oggStream = await probeAndCreateResource(createReadStream('file.ogg'));\n\n\t// Creates an audio resource with inputType = StreamType.WebmOpus\n\tconst webmStream = await probeAndCreateResource(createReadStream('file.webm'));\n}\n\ncreateResources();\n```\n\n----------------------------------------\n\nTITLE: Removing Reactions by Emoji in Discord.js\nDESCRIPTION: Implementation to remove all instances of a specific emoji reaction from a message. Uses the message.reactions cache to locate and remove the target emoji.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/reactions.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nmessage.reactions.cache.get('123456789012345678').remove()\n\t.catch(error => console.error('Failed to remove reactions:', error));\n```\n\n----------------------------------------\n\nTITLE: Creating Confirm and Cancel Buttons in Discord.js\nDESCRIPTION: This snippet demonstrates how to create 'Confirm' and 'Cancel' buttons using the ButtonBuilder class. It sets custom IDs, labels, and styles for both buttons.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/message-components/buttons.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { ButtonBuilder, ButtonStyle, SlashCommandBuilder } = require('discord.js');\n\nmodule.exports = {\n\t// data: new SlashCommandBuilder()...\n\tasync execute(interaction) {\n\t\tconst target = interaction.options.getUser('target');\n\t\tconst reason = interaction.options.getString('reason') ?? 'No reason provided';\n\n\t\tconst confirm = new ButtonBuilder()\n\t\t\t.setCustomId('confirm')\n\t\t\t.setLabel('Confirm Ban')\n\t\t\t.setStyle(ButtonStyle.Danger);\n\n\t\tconst cancel = new ButtonBuilder()\n\t\t\t.setCustomId('cancel')\n\t\t\t.setLabel('Cancel')\n\t\t\t.setStyle(ButtonStyle.Secondary);\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing ShardingManager in Discord.js\nDESCRIPTION: Sets up a ShardingManager to spawn the recommended number of shards for a Discord bot. This manager creates and manages separate processes for each shard.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/sharding/README.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { ShardingManager } = require('discord.js');\n\nconst manager = new ShardingManager('./bot.js', { token: 'your-token-goes-here' });\n\nmanager.on('shardCreate', shard => console.log(`Launched shard ${shard.id}`));\n\nmanager.spawn();\n```\n\n----------------------------------------\n\nTITLE: Accessing Client Application in Discord.js v13\nDESCRIPTION: Shows how to access the client application info using the new property instead of the removed fetchApplication method.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/changes-in-v13.md#2025-04-09_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n- client.fetchApplication().then(application => console.log(application.name))\n+ console.log(client.application.name);\n```\n\n----------------------------------------\n\nTITLE: Handling Voice Connection Disconnects in Discord.js\nDESCRIPTION: Implements advanced disconnect handling logic for voice connections, including detection of channel changes versus true disconnects with timeout handling.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/voice/voice-connections.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { VoiceConnectionStatus, entersState } = require('@discordjs/voice');\n\nconnection.on(VoiceConnectionStatus.Disconnected, async (oldState, newState) => {\n\ttry {\n\t\tawait Promise.race([\n\t\t\tentersState(connection, VoiceConnectionStatus.Signalling, 5_000),\n\t\t\tentersState(connection, VoiceConnectionStatus.Connecting, 5_000),\n\t\t]);\n\t\t// Seems to be reconnecting to a new channel - ignore disconnect\n\t} catch {\n\t\t// Seems to be a real disconnect which SHOULDN'T be recovered from\n\t\tconnection.destroy();\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Reactions by User in Discord.js\nDESCRIPTION: Implementation to remove all reactions from a specific user on a message. This iterates through cached reactions to find and remove those belonging to the target user.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/reactions.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst userReactions = message.reactions.cache.filter(reaction => reaction.users.cache.has(userId));\n\ntry {\n\tfor (const reaction of userReactions.values()) {\n\t\tawait reaction.users.remove(userId);\n\t}\n} catch (error) {\n\tconsole.error('Failed to remove reactions.');\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Associations Between Models for Discord Currency System\nDESCRIPTION: Sets up associations between models and adds utility methods to the Users prototype for managing items. This includes methods for adding items to a user's inventory and retrieving all items a user owns.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/sequelize/currency.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst Sequelize = require('sequelize');\n\nconst sequelize = new Sequelize('database', 'username', 'password', {\n\thost: 'localhost',\n\tdialect: 'sqlite',\n\tlogging: false,\n\tstorage: 'database.sqlite',\n});\n\nconst Users = require('./models/Users.js')(sequelize, Sequelize.DataTypes);\nconst CurrencyShop = require('./models/CurrencyShop.js')(sequelize, Sequelize.DataTypes);\nconst UserItems = require('./models/UserItems.js')(sequelize, Sequelize.DataTypes);\n\nUserItems.belongsTo(CurrencyShop, { foreignKey: 'item_id', as: 'item' });\n\nReflect.defineProperty(Users.prototype, 'addItem', {\n\tvalue: async item => {\n\t\tconst userItem = await UserItems.findOne({\n\t\t\twhere: { user_id: this.user_id, item_id: item.id },\n\t\t});\n\n\t\tif (userItem) {\n\t\t\tuserItem.amount += 1;\n\t\t\treturn userItem.save();\n\t\t}\n\n\t\treturn UserItems.create({ user_id: this.user_id, item_id: item.id, amount: 1 });\n\t},\n});\n\nReflect.defineProperty(Users.prototype, 'getItems', {\n\tvalue: () => {\n\t\treturn UserItems.findAll({\n\t\t\twhere: { user_id: this.user_id },\n\t\t\tinclude: ['item'],\n\t\t});\n\t},\n});\n\nmodule.exports = { Users, CurrencyShop, UserItems };\n```\n\n----------------------------------------\n\nTITLE: Fetching Guild Owner in Discord.js v13\nDESCRIPTION: Shows how to fetch the guild owner using the new fetchOwner method instead of accessing the owner property which has been removed due to caching unreliability.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/changes-in-v13.md#2025-04-09_snippet_19\n\nLANGUAGE: diff\nCODE:\n```\n- console.log(guild.owner);\n+ guild.fetchOwner().then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Quick Project Initialization with yarn\nDESCRIPTION: Command to quickly initialize a Node.js project with yarn using default values for all prompts via the -y flag.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/preparations/README.md#2025-04-09_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nyarn init -y\n```\n\n----------------------------------------\n\nTITLE: Handling Reactions on Uncached Messages using Partials in Discord.js\nDESCRIPTION: Shows how to set up Discord.js client with partials to handle reactions on old/uncached messages. Includes error handling for partial reaction fetching and demonstrates proper event handling for MessageReactionAdd events.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/reactions.md#2025-04-09_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Client, Events, GatewayIntentBits, Partials } = require('discord.js');\n\nconst client = new Client({\n\tintents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessages, GatewayIntentBits.GuildMessageReactions],\n\tpartials: [Partials.Message, Partials.Channel, Partials.Reaction],\n});\n\nclient.on(Events.MessageReactionAdd, async (reaction, user) => {\n\t// When a reaction is received, check if the structure is partial\n\tif (reaction.partial) {\n\t\t// If the message this reaction belongs to was removed, the fetching might result in an API error which should be handled\n\t\ttry {\n\t\t\tawait reaction.fetch();\n\t\t} catch (error) {\n\t\t\tconsole.error('Something went wrong when fetching the message:', error);\n\t\t\t// Return as `reaction.message.author` may be undefined/null\n\t\t\treturn;\n\t\t}\n\t}\n\n\t// Now the message has been cached and is fully available\n\tconsole.log(`${reaction.message.author}'s message \"${reaction.message.content}\" gained a reaction!`);\n\t// The reaction is now also fully available and the properties will be reflected accurately:\n\tconsole.log(`${reaction.count} user(s) have given the same reaction to this message!`);\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting a Thread in Discord.js\nDESCRIPTION: Demonstrates how to find and delete a specific thread from a channel using the thread name.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/threads.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst thread = channel.threads.cache.find(x => x.name === 'food-talk');\nawait thread.delete();\n```\n\n----------------------------------------\n\nTITLE: Enabling Partial Structures in Discord.js Client\nDESCRIPTION: This snippet demonstrates how to enable partial structures when creating a Discord.js client. It shows how to specify which structures (Message, Channel, and Reaction) should be allowed as partials.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/partials.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Client, Partials } = require('discord.js');\n\nconst client = new Client({ partials: [Partials.Message, Partials.Channel, Partials.Reaction] });\n```\n\n----------------------------------------\n\nTITLE: Handling WebSocket Errors in Discord.js\nDESCRIPTION: Implementation of a shard error handler to log WebSocket connection errors. Uses the Events.ShardError event to capture and log any WebSocket-related errors that occur during bot operation.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/errors.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclient.on(Events.ShardError, error => {\n\tconsole.error('A websocket connection encountered an error:', error);\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Tag Info with Discord.js and Sequelize\nDESCRIPTION: This snippet demonstrates how to retrieve and display information about a specific tag using Sequelize's findOne method. It handles the 'taginfo' command, showing metadata like creator, creation date, and usage count.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/sequelize/README.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nelse if (commandName == 'taginfo') {\n\tconst tagName = interaction.options.getString('name');\n\n\t// equivalent to: SELECT * FROM tags WHERE name = 'tagName' LIMIT 1;\n\tconst tag = await Tags.findOne({ where: { name: tagName } });\n\n\tif (tag) {\n\t\treturn interaction.reply(`${tagName} was created by ${tag.username} at ${tag.createdAt} and has been used ${tag.usage_count} times.`);\n\t}\n\n\treturn interaction.reply(`Could not find tag: ${tagName}`);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Member Permissions for Ban Command in Discord.js\nDESCRIPTION: This snippet demonstrates how to create a slash command for banning members, setting the default permission to require the BanMembers flag. It uses the SlashCommandBuilder to construct the command with options and permissions.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/slash-commands/permissions.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { SlashCommandBuilder, PermissionFlagsBits } = require('discord.js');\n\nconst data = new SlashCommandBuilder()\n\t.setName('ban')\n\t.setDescription('Select a member and ban them.')\n\t.addUserOption(option =>\n\t\toption\n\t\t\t.setName('target')\n\t\t\t.setDescription('The member to ban')\n\t\t\t.setRequired(true))\n\t.setDefaultMemberPermissions(PermissionFlagsBits.BanMembers);\n```\n\n----------------------------------------\n\nTITLE: Creating a Thread in Discord.js\nDESCRIPTION: Creates a new thread in a channel with specified name and auto-archive duration. Uses the GuildTextThreadManager to create a public thread.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/threads.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst thread = await channel.threads.create({\n\tname: 'food-talk',\n\tautoArchiveDuration: ThreadAutoArchiveDuration.OneHour,\n\treason: 'Needed a separate thread for food',\n});\n\nconsole.log(`Created thread: ${thread.name}`);\n```\n\n----------------------------------------\n\nTITLE: Implementing Tag Creation Command\nDESCRIPTION: Command handler for adding a new tag to the database. Creates a record with the tag name, description, and username, with error handling for duplicate tags.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/sequelize/README.md#2025-04-09_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nclient.on(Events.InteractionCreate, async interaction => {\n\tif (!interaction.isChatInputCommand()) return;\n\n\tconst { commandName } = interaction;\n\n\tif (commandName === 'addtag') {\n\t\tconst tagName = interaction.options.getString('name');\n\t\tconst tagDescription = interaction.options.getString('description');\n\n\t\ttry {\n\t\t\t// equivalent to: INSERT INTO tags (name, description, username) values (?, ?, ?);\n\t\t\tconst tag = await Tags.create({\n\t\t\t\tname: tagName,\n\t\t\t\tdescription: tagDescription,\n\t\t\t\tusername: interaction.user.username,\n\t\t\t});\n\n\t\t\treturn interaction.reply(`Tag ${tag.name} added.`);\n\t\t}\n\t\tcatch (error) {\n\t\t\tif (error.name === 'SequelizeUniqueConstraintError') {\n\t\t\t\treturn interaction.reply('That tag already exists.');\n\t\t\t}\n\n\t\t\treturn interaction.reply('Something went wrong with adding a tag.');\n\t\t}\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Migrating from MessageEmbed to EmbedBuilder in Discord.js\nDESCRIPTION: Shows how to convert code from using MessageEmbed to the new EmbedBuilder class, including changes to the addField method which has been replaced with addFields.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/changes-in-v14.md#2025-04-09_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n- new MessageEmbed().addField('Inline field title', 'Some value here', true);\n\n+ new EmbedBuilder().addFields([\n+  { name: 'one', value: 'one', inline: true },\n+  { name: 'two', value: 'two', inline: true },\n+]);\n```\n\n----------------------------------------\n\nTITLE: Initializing a Project with yarn\nDESCRIPTION: Command to initialize a new Node.js project with yarn, creating a package.json file that tracks project dependencies and information.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/preparations/README.md#2025-04-09_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn init\n```\n\n----------------------------------------\n\nTITLE: Tracking Message Deletions with Audit Logs in Discord.js\nDESCRIPTION: Event handler that monitors message deletions through audit logs. Identifies both the executor who deleted the message and the target user whose message was deleted.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/audit-logs.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { AuditLogEvent, Events } = require('discord.js');\n\nclient.on(Events.GuildAuditLogEntryCreate, async auditLog => {\n\t// Define your variables.\n\t// The extra information here will be the channel.\n\tconst { action, extra: channel, executorId, targetId } = auditLog;\n\n\t// Check only for deleted messages.\n\tif (action !== AuditLogEvent.MessageDelete) return;\n\n\t// Ensure the executor is cached.\n\tconst executor = await client.users.fetch(executorId);\n\n\t// Ensure the author whose message was deleted is cached.\n\tconst target = await client.users.fetch(targetId);\n\n\t// Log the output.\n\tconsole.log(`A message by ${target.tag} was deleted by ${executor.tag} in ${channel}.`);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Thread from Message in Discord.js\nDESCRIPTION: Demonstrates how to create a thread from an existing message using startThread() method.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/threads.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst thread = await message.startThread({\n\tname: 'food-talk',\n\tautoArchiveDuration: ThreadAutoArchiveDuration.OneHour,\n\treason: 'Needed a separate thread for food',\n});\n\nconsole.log(`Created thread: ${thread.name}`);\n```\n\n----------------------------------------\n\nTITLE: Measuring Roundtrip Latency in Discord.js\nDESCRIPTION: This code shows how to measure and display the roundtrip latency of a Discord bot. It sends an initial message, then edits it with the calculated latency based on the difference between the creation timestamps of the interaction and the sent message.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/faq.md#2025-04-09_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nconst sent = await interaction.reply({ content: 'Pinging...' });\ninteraction.editReply(`Roundtrip latency: ${sent.createdTimestamp - interaction.createdTimestamp}ms`);\n```\n\n----------------------------------------\n\nTITLE: Editing Channel Permission Overwrites in JavaScript\nDESCRIPTION: Demonstrates how to edit existing permission overwrites on a channel using discord.js.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/permissions.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// edits overwrites to disallow everyone to view the channel\nchannel.permissionOverwrites.edit(guild.id, { ViewChannel: false });\n\n// edits overwrites to allow a user to view the channel\nchannel.permissionOverwrites.edit(user.id, { ViewChannel: true });\n```\n\n----------------------------------------\n\nTITLE: Updating UserFlags References\nDESCRIPTION: Migration to new UserFlags constants for partner and developer flags.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/changes-in-v13.md#2025-04-09_snippet_31\n\nLANGUAGE: diff\nCODE:\n```\n- user.flags.has(UserFlags.FLAGS.DISCORD_PARTNER)\n+ user.flags.has(UserFlags.FLAGS.PARTNERED_SERVER_OWNER)\n\n- user.flags.has(UserFlags.FLAGS.VERIFIED_DEVELOPER)\n+ user.flags.has(UserFlags.FLAGS.EARLY_VERIFIED_BOT_DEVELOPER)\n```\n\n----------------------------------------\n\nTITLE: Implementing InteractionCreate Event in Separate File for Discord.js\nDESCRIPTION: This code defines the InteractionCreate event in a separate file. It exports an object with the event name and the execute function to handle chat input commands.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/creating-your-bot/event-handling.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Events, MessageFlags } = require('discord.js');\n\nmodule.exports = {\n\tname: Events.InteractionCreate,\n\tasync execute(interaction) {\n\t\tif (!interaction.isChatInputCommand()) return;\n\n\t\tconst command = interaction.client.commands.get(interaction.commandName);\n\n\t\tif (!command) {\n\t\t\tconsole.error(`No command matching ${interaction.commandName} was found.`);\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tawait command.execute(interaction);\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t\tif (interaction.replied || interaction.deferred) {\n\t\t\t\tawait interaction.followUp({ content: 'There was an error while executing this command!', flags: MessageFlags.Ephemeral });\n\t\t\t} else {\n\t\t\t\tawait interaction.reply({ content: 'There was an error while executing this command!', flags: MessageFlags.Ephemeral });\n\t\t\t}\n\t\t}\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Sending Webhook Messages to Thread in Discord.js\nDESCRIPTION: Demonstrates how to send messages to a thread using a webhook from the parent channel.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/threads.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst webhooks = await channel.fetchWebhooks();\nconst webhook = webhooks.first();\n\nawait webhook.send({\n\tcontent: 'Look ma! I\\'m in a thread!',\n\tthreadId: '123456789012345678',\n});\n```\n\n----------------------------------------\n\nTITLE: Attaching Images to Embeds with EmbedBuilder in Discord.js\nDESCRIPTION: This snippet demonstrates how to attach an image file to a message and use it in an embed created with EmbedBuilder. The image is referenced using the 'attachment://' protocol followed by the filename.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/embeds.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { AttachmentBuilder, EmbedBuilder } = require('discord.js');\n// ...\nconst file = new AttachmentBuilder('../assets/discordjs.png');\nconst exampleEmbed = new EmbedBuilder()\n\t.setTitle('Some title')\n\t.setImage('attachment://discordjs.png');\n\nchannel.send({ embeds: [exampleEmbed], files: [file] });\n```\n\n----------------------------------------\n\nTITLE: Manipulating Permissions with add() and remove()\nDESCRIPTION: Shows how to add or remove permissions from a PermissionsBitField object without dealing with bitwise operations, using the add() and remove() methods.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/permissions.md#2025-04-09_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst { PermissionsBitField } = require('discord.js');\n\nconst permissions = new PermissionsBitField([\n\tPermissionsBitField.Flags.ViewChannel,\n\tPermissionsBitField.Flags.EmbedLinks,\n\tPermissionsBitField.Flags.AttachFiles,\n\tPermissionsBitField.Flags.ReadMessageHistory,\n\tPermissionsBitField.Flags.ManageRoles,\n]);\n\nconsole.log(permissions.has(PermissionsBitField.Flags.KickMembers));\n// output: false\n\npermissions.add(PermissionsBitField.Flags.KickMembers);\nconsole.log(permissions.has(PermissionsBitField.Flags.KickMembers));\n// output: true\n\npermissions.remove(PermissionsBitField.Flags.KickMembers);\nconsole.log(permissions.has(PermissionsBitField.Flags.KickMembers));\n// output: false\n```\n\n----------------------------------------\n\nTITLE: Implementing a Prefix Command with Keyv\nDESCRIPTION: JavaScript code for a command that allows users to set and retrieve guild-specific prefixes using Keyv.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/keyv/README.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nclient.on(Events.MessageCreate, async message => {\n\t// ...\n\tif (command === 'prefix') {\n\t\t// if there's at least one argument, set the prefix\n\t\tif (args.length) {\n\t\t\tawait prefixes.set(message.guild.id, args[0]);\n\t\t\treturn message.channel.send(`Successfully set prefix to \\`${args[0]}\\``);\n\t\t}\n\n\t\treturn message.channel.send(`Prefix is \\`${await prefixes.get(message.guild.id) || globalPrefix}\\``);\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Sequentially Adding Message Reactions Using Promise Chaining in Discord.js\nDESCRIPTION: Implementation that ensures emoji reactions are added in the correct order by chaining promises with .then() methods. This approach also includes error handling for failed reactions.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/reactions.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nclient.on(Events.InteractionCreate, async interaction => {\n\tif (!interaction.isChatInputCommand()) return;\n\n\tconst { commandName } = interaction;\n\n\tif (commandName === 'fruits') {\n\t\tconst response = await interaction.reply({ content: 'Reacting with fruits!', withResponse: true });\n\n\t\tresponse.resource.message.react('🍎')\n\t\t\t.then(() => message.react('🍊'))\n\t\t\t.then(() => message.react('🍇'))\n\t\t\t.catch(error => console.error('One of the emojis failed to react:', error));\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Joining a Thread in Discord.js\nDESCRIPTION: Shows how to join a thread if it's joinable using the join() method.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/threads.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst thread = channel.threads.cache.find(x => x.name === 'food-talk');\nif (thread.joinable) await thread.join();\n```\n\n----------------------------------------\n\nTITLE: Checking Role Permissions in JavaScript\nDESCRIPTION: Demonstrates how to check if a member has a specific role or a role with a particular name using discord.js.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/permissions.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmember.roles.cache.has('role-id-here');\n// returns true if the member has the role\n\nmember.roles.cache.some(role => role.name === 'Mod');\n// returns true if any of the member's roles is exactly named \"Mod\"\n```\n\n----------------------------------------\n\nTITLE: Generating Invite Links in Discord.js v13\nDESCRIPTION: Shows how to update code to generate invite links with the new options format, which now requires a scopes array and permissions to be specified in an object.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/changes-in-v13.md#2025-04-09_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\n- client.generateInvite([Permissions.FLAGS.SEND_MESSAGES]);\n+ client.generateInvite({ scopes: ['bot'], permissions: [Permissions.FLAGS.SEND_MESSAGES] })\n```\n\n----------------------------------------\n\nTITLE: Loading Command Files in Discord.js\nDESCRIPTION: Dynamically loads command files from a specified directory structure. It filters for JavaScript files and sets them in the commands Collection.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/creating-your-bot/command-handling.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclient.commands = new Collection();\n\nconst foldersPath = path.join(__dirname, 'commands');\nconst commandFolders = fs.readdirSync(foldersPath);\n\nfor (const folder of commandFolders) {\n\tconst commandsPath = path.join(foldersPath, folder);\n\tconst commandFiles = fs.readdirSync(commandsPath).filter(file => file.endsWith('.js'));\n\tfor (const file of commandFiles) {\n\t\tconst filePath = path.join(commandsPath, file);\n\t\tconst command = require(filePath);\n\t\t// Set a new item in the Collection with the key as the command name and the value as the exported module\n\t\tif ('data' in command && 'execute' in command) {\n\t\t\tclient.commands.set(command.data.name, command);\n\t\t} else {\n\t\t\tconsole.log(`[WARNING] The command at ${filePath} is missing a required \"data\" or \"execute\" property.`);\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Errors in Discord.js Audio Player\nDESCRIPTION: Shows how to handle errors from an audio player by logging the error and playing the next resource within the error handler.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/voice/audio-player.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createAudioResource } = require('@discordjs/voice');\n\nconst resource = createAudioResource('/home/user/voice/music.mp3', {\n\tmetadata: {\n\t\ttitle: 'A good song!',\n\t},\n});\n\nplayer.play(resource);\n\nplayer.on('error', error => {\n\tconsole.error(`Error: ${error.message} with resource ${error.resource.metadata.title}`);\n\tplayer.play(getNextResource());\n});\n```\n\n----------------------------------------\n\nTITLE: Leaving a Thread in Discord.js\nDESCRIPTION: Demonstrates how to leave a thread using the leave() method.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/threads.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst thread = channel.threads.cache.find(x => x.name === 'food-talk');\nawait thread.leave();\n```\n\n----------------------------------------\n\nTITLE: Starting Discord.js Bot with PM2\nDESCRIPTION: This command starts a Discord.js bot application using PM2. Replace 'your-app-name.js' with the actual filename of your bot's main script.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/improving-dev-environment/pm2.md#2025-04-09_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npm2 start your-app-name.js\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to Broadcast Eval in Discord.js\nDESCRIPTION: This snippet illustrates how to pass arguments from the outer scope into a broadcastEval call. It defines a function that accepts a context object as its second parameter, allowing for dynamic argument passing to sharded evaluations.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/sharding/additional-information.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction funcName(c, { arg }) {\n\t// ...\n}\n\nclient.shard.broadcastEval(funcName, { context: { arg: 'arg' } });\n```\n\n----------------------------------------\n\nTITLE: Localized Response Implementation\nDESCRIPTION: Demonstrates how to provide localized responses based on the user's locale setting\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/slash-commands/response-methods.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclient.on(Events.InteractionCreate, interaction => {\n\tconst locales = {\n\t\tpl: 'Witaj Świecie!',\n\t\tde: 'Hallo Welt!',\n\t};\n\tinteraction.reply(locales[interaction.locale] ?? 'Hello World (default is english)');\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Post in a Forum Channel in Discord.js\nDESCRIPTION: Code to create a new thread post in a Discord forum channel with a name, message content, and applied tags.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/faq.md#2025-04-09_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst channel = client.channels.cache.get('id');\nchannel.threads.create({ name: 'Post name', message: { content: 'Message content' }, appliedTags: ['tagID', 'anotherTagID'] });\n```\n\n----------------------------------------\n\nTITLE: Managing Thread Archive State in Discord.js\nDESCRIPTION: Shows how to archive and unarchive a thread using setArchived() method.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/threads.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst thread = channel.threads.cache.find(x => x.name === 'food-talk');\nawait thread.setArchived(true); // archived\nawait thread.setArchived(false); // unarchived\n```\n\n----------------------------------------\n\nTITLE: Creating an Audio Player in Discord.js\nDESCRIPTION: Demonstrates how to create a basic audio player using the createAudioPlayer function from @discordjs/voice.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/voice/audio-player.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createAudioPlayer } = require('@discordjs/voice');\n\nconst player = createAudioPlayer();\n```\n\n----------------------------------------\n\nTITLE: Targeting Specific Shards in Discord.js\nDESCRIPTION: This code snippet shows how to target a specific shard (in this case, shard 0) for execution. It uses the broadcastEval method to send a command to all shards, but only the specified shard will execute the process.exit() command.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/sharding/additional-information.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclient.shard.broadcastEval(c => {\n\tif (c.shard.ids.includes(0)) process.exit();\n});\n```\n\n----------------------------------------\n\nTITLE: Syncing Currency Data on Bot Ready Event in Discord.js\nDESCRIPTION: This code snippet shows how to synchronize the currency collection with the database when the bot becomes ready. It retrieves all stored balances and sets them in the currency collection for easy access.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/sequelize/currency.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nclient.once(Events.ClientReady, async readyClient => {\n\tconst storedBalances = await Users.findAll();\n\tstoredBalances.forEach(b => currency.set(b.user_id, b));\n\n\tconsole.log(`Logged in as ${readyClient.user.tag}!`);\n});\n```\n\n----------------------------------------\n\nTITLE: Dynamic Font Size Adjustment for Canvas Text in Discord.js\nDESCRIPTION: This snippet implements an applyText function that dynamically adjusts font size based on text length to prevent overflow. It gradually decreases the font size until the text fits within the allocated space on the canvas.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/canvas.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Pass the entire Canvas object because you'll need access to its width and context\nconst applyText = (canvas, text) => {\n\tconst context = canvas.getContext('2d');\n\n\t// Declare a base size of the font\n\tlet fontSize = 70;\n\n\tdo {\n\t\t// Assign the font to the context and decrement it so it can be measured again\n\t\tcontext.font = `${fontSize -= 10}px sans-serif`;\n\t\t// Compare pixel width of the text to the canvas minus the approximate avatar size\n\t} while (context.measureText(text).width > canvas.width - 300);\n\n\t// Return the result to use in the actual canvas\n\treturn context.font;\n};\n\nclient.on(Events.InteractionCreate, async interaction => {\n\t// ...\n\tcontext.strokeRect(0, 0, canvas.width, canvas.height);\n\n\t// Assign the decided font to the canvas\n\tcontext.font = applyText(canvas, interaction.member.displayName);\n\tcontext.fillStyle = '#ffffff';\n\tcontext.fillText(interaction.member.displayName, canvas.width / 2.5, canvas.height / 1.8);\n\t// ...\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Members to Thread in Discord.js\nDESCRIPTION: Shows how to add a member to a thread using their user ID.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/threads.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst thread = channel.threads.cache.find(x => x.name === 'food-talk');\nawait thread.members.add('140214425276776449');\n```\n\n----------------------------------------\n\nTITLE: Creating and Displaying a Modal in Discord.js\nDESCRIPTION: Demonstrates how to create a basic modal form with a title and custom ID in response to a slash command interaction.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/interactions/modals.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Events, ModalBuilder } = require('discord.js');\n\nclient.on(Events.InteractionCreate, async interaction => {\n\tif (!interaction.isChatInputCommand()) return;\n\n\tif (interaction.commandName === 'ping') {\n\t\tconst modal = new ModalBuilder()\n\t\t\t.setCustomId('myModal')\n\t\t\t.setTitle('My Modal');\n\n\t\t// TODO: Add components to modal...\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Using GuildMemberManager in Discord.js v13\nDESCRIPTION: Shows how to add a member to a guild using the new GuildMemberManager instead of the removed Guild#addMember method.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/changes-in-v13.md#2025-04-09_snippet_14\n\nLANGUAGE: diff\nCODE:\n```\n- guild.addMember(user, { accessToken: token });\n+ guild.members.add(user, { accessToken: token });\n```\n\n----------------------------------------\n\nTITLE: Initializing package.json\nDESCRIPTION: Commands to initialize a new package.json file using different package managers\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/improving-dev-environment/package-json-scripts.md#2025-04-09_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm init -y\n```\n\n----------------------------------------\n\nTITLE: Initializing Discord.js Client with Default Limited Cache Settings\nDESCRIPTION: This snippet shows how to create a new Discord.js Client with default cache limits applied. It uses the Options.cacheWithLimits() method with DefaultMakeCacheSettings to limit message caches.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/miscellaneous/cache-customization.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Client, Options } = require('discord.js');\n\nconst client = new Client({\n\tmakeCache: Options.cacheWithLimits(Options.DefaultMakeCacheSettings),\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Websocket Heartbeat Ping in Discord.js\nDESCRIPTION: This snippet demonstrates how to check and display the websocket heartbeat ping of a Discord bot. It uses the client.ws.ping property to get the ping in milliseconds.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/faq.md#2025-04-09_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\ninteraction.reply(`Websocket heartbeat: ${client.ws.ping}ms.`);\n```\n\n----------------------------------------\n\nTITLE: Removing All Reactions from a Message in Discord.js\nDESCRIPTION: Simple implementation to remove all reactions from a Discord message at once. Requires ManageMessages permission to function properly.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/reactions.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nmessage.reactions.removeAll()\n\t.catch(error => console.error('Failed to clear reactions:', error));\n```\n\n----------------------------------------\n\nTITLE: Removing Members from Thread in Discord.js\nDESCRIPTION: Shows how to remove a member from a thread using their user ID.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/threads.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst thread = channel.threads.cache.find(x => x.name === 'food-talk');\nawait thread.members.remove('140214425276776449');\n```\n\n----------------------------------------\n\nTITLE: Handling Keyv Connection Errors\nDESCRIPTION: JavaScript code showing how to handle connection errors in Keyv.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/keyv/README.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nkeyv.on('error', err => console.error('Keyv connection error:', err));\n```\n\n----------------------------------------\n\nTITLE: Adding a Role to a Guild Member in Discord.js\nDESCRIPTION: Code to add a specific role to a guild member. It retrieves both the role and the target member from interaction options and adds the role to the member.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/faq.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst role = interaction.options.getRole('role');\nconst member = interaction.options.getMember('target');\nmember.roles.add(role);\n```\n\n----------------------------------------\n\nTITLE: Blocking Users from a Database in Discord.js\nDESCRIPTION: Code to check if a user is blocked by querying a database for their ID when an interaction is received.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/faq.md#2025-04-09_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nclient.on(Events.InteractionCreate, async interaction => {\n\tconst blockedUsers = await database.query('SELECT user_id FROM blocked_users;');\n\tif (blockedUsers.includes(interaction.user.id)) return;\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Message Reactions Without Order Handling in Discord.js\nDESCRIPTION: Basic implementation of adding emoji reactions to a Discord message that may not display in the intended order due to the asynchronous nature of message.react() promises.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/reactions.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nclient.on(Events.InteractionCreate, async interaction => {\n\tif (!interaction.isChatInputCommand()) return;\n\n\tconst { commandName } = interaction;\n\n\tif (commandName === 'fruits') {\n\t\tconst response = await interaction.reply({ content: 'Reacting with fruits!', withResponse: true });\n\t\tconst { message } = response.resource;\n\t\tmessage.react('🍎');\n\t\tmessage.react('🍊');\n\t\tmessage.react('🍇');\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Migrating MessageEmbed File Attachments\nDESCRIPTION: Updates to file attachment handling in message embeds using MessageOptions.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/changes-in-v13.md#2025-04-09_snippet_27\n\nLANGUAGE: diff\nCODE:\n```\n- channel.send({ embeds: [new MessageEmbed().setTitle(\"Files\").attachFiles(file)] })\n+ channel.send({ embeds: [new MessageEmbed().setTitle(\"Files\")], files: [file] })\n```\n\n----------------------------------------\n\nTITLE: Monitoring Voice Connection State in Discord.js\nDESCRIPTION: Shows how to monitor the state of a voice connection using event listeners. This example demonstrates listening for the Ready state.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/voice/voice-connections.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { VoiceConnectionStatus } = require('@discordjs/voice');\n\nconnection.on(VoiceConnectionStatus.Ready, () => {\n\tconsole.log('The connection has entered the Ready state - ready to play audio!');\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an Action Row with Components in Discord.js\nDESCRIPTION: This snippet demonstrates how to create an action row and add components to it using the ActionRowBuilder class. This is the basic pattern for creating any action row with interactive elements.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/message-components/action-rows.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst row = new ActionRowBuilder()\n\t.addComponents(component);\n```\n\n----------------------------------------\n\nTITLE: Unicode Emoji Character Mapping in JavaScript\nDESCRIPTION: This snippet defines a module that maps letters, numbers, and some symbols to their corresponding Unicode emoji characters. It can be used to easily retrieve emoji representations of characters in Discord.js applications.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/faq.md#2025-04-09_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\n// emojiCharacters.js\nmodule.exports = {\n\ta: '🇦', b: '🇧', c: '🇨', d: '🇩',\n\te: '🇪', f: '🇫', g: '🇬', h: '🇭',\n\ti: '🇮', j: '🇯', k: '🇰', l: '🇱',\n\tm: '🇲', n: '🇳', o: '🇴', p: '🇵',\n\tq: '🇶', r: '🇷', s: '🇸', t: '🇹',\n\tu: '🇺', v: '🇻', w: '🇼', x: '🇽',\n\ty: '🇾', z: '🇿', 0: '0️⃣', 1: '1️⃣',\n\t2: '2️⃣', 3: '3️⃣', 4: '4️⃣', 5: '5️⃣',\n\t6: '6️⃣', 7: '7️⃣', 8: '8️⃣', 9: '9️⃣',\n\t10: '🔟', '#': '#️⃣', '*': '*️⃣',\n\t'!': '❗', '?': '❓',\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Link Button in Discord.js\nDESCRIPTION: This snippet shows how to create a link button using the ButtonBuilder class. Link buttons must have a URL and cannot have a custom ID. They open the provided link in the browser without sending an interaction to the bot.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/message-components/buttons.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst button = new ButtonBuilder()\n\t.setLabel('discord.js docs')\n\t.setURL('https://discord.js.org')\n\t.setStyle(ButtonStyle.Link);\n```\n\n----------------------------------------\n\nTITLE: Extracting User Data from Context Menu in Discord.js\nDESCRIPTION: Demonstrates how to extract the username from a user context menu interaction. This code shows how to access the targetUser property and destructure the username from it.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/interactions/context-menus.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclient.on(Events.InteractionCreate, interaction => {\n\tif (!interaction.isUserContextMenuCommand()) return;\n\t// Get the User's username from context menu\n\tconst { username } = interaction.targetUser;\n\tconsole.log(username);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Bot Avatar in Discord.js\nDESCRIPTION: Code to change a Discord bot's avatar image using the setAvatar method with a URL or file path.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/faq.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nclient.user.setAvatar('URL or path');\n```\n\n----------------------------------------\n\nTITLE: Basic Message Collector in Discord.js\nDESCRIPTION: Demonstrates how to create a basic message collector using Discord.js. It filters messages containing 'discord' and logs collected messages.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/collectors.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst collectorFilter = m => m.content.includes('discord');\nconst collector = interaction.channel.createMessageCollector({ filter: collectorFilter, time: 15_000 });\n\ncollector.on('collect', m => {\n\tconsole.log(`Collected ${m.content}`);\n});\n\ncollector.on('end', collected => {\n\tconsole.log(`Collected ${collected.size} items`);\n});\n```\n\n----------------------------------------\n\nTITLE: Sending a Message to a Specific Channel in Discord.js\nDESCRIPTION: Code to send a message to a specific channel using the channel's ID to retrieve it from the cache.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/faq.md#2025-04-09_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst channel = client.channels.cache.get('id');\nchannel.send('content');\n```\n\n----------------------------------------\n\nTITLE: Editing Discord Webhook Properties\nDESCRIPTION: Example of modifying an existing webhook's properties including name, avatar, and channel.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/webhooks.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nwebhook.edit({\n\tname: 'Some-username',\n\tavatar: 'https://i.imgur.com/AfFp7pu.png',\n\tchannel: '222197033908436994',\n})\n\t.then(webhook => console.log(`Edited webhook ${webhook}`))\n\t.catch(console.error);\n```\n\n----------------------------------------\n\nTITLE: Message Unpin API Call - Discord.js\nDESCRIPTION: Example showing equivalent message unpinning methods using MessageManager and direct Message instance.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/changes-in-v13.md#2025-04-09_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nchannel.messages.unpin('876543210987654321', options)\n```\n\n----------------------------------------\n\nTITLE: Ephemeral Response Implementation\nDESCRIPTION: Demonstrates how to send an ephemeral message that is only visible to the command executor using MessageFlags.Ephemeral\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/slash-commands/response-methods.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclient.on(Events.InteractionCreate, async interaction => {\n\tif (!interaction.isChatInputCommand()) return;\n\n\tif (interaction.commandName === 'ping') {\n\t\tawait interaction.reply({ content: 'Secret Pong!', flags: MessageFlags.Ephemeral });\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Complete Stats Command Implementation\nDESCRIPTION: Full implementation of a stats command handler that combines shard statistics. Shows the command in context of an InteractionCreate event handler.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/sharding/README.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclient.on(Events.InteractionCreate, interaction => {\n\t// ...\n\tif (commandName === 'stats') {\n\t\tconst promises = [\n\t\t\tclient.shard.fetchClientValues('guilds.cache.size'),\n\t\t\tclient.shard.broadcastEval(c => c.guilds.cache.reduce((acc, guild) => acc + guild.memberCount, 0)),\n\t\t];\n\n\t\treturn Promise.all(promises)\n\t\t\t.then(results => {\n\t\t\t\tconst totalGuilds = results[0].reduce((acc, guildCount) => acc + guildCount, 0);\n\t\t\t\tconst totalMembers = results[1].reduce((acc, memberCount) => acc + memberCount, 0);\n\t\t\t\treturn interaction.reply(`Server count: ${totalGuilds}\\nMember count: ${totalMembers}`);\n\t\t\t})\n\t\t\t.catch(console.error);\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Bot Username in Discord.js\nDESCRIPTION: Code to change a Discord bot's username using the setUsername method.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/faq.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nclient.user.setUsername('username');\n```\n\n----------------------------------------\n\nTITLE: Timing Out a Guild Member in Discord.js\nDESCRIPTION: Code to timeout (temporarily restrict) a guild member for a specified duration. The timeout duration is specified in milliseconds, with a one minute timeout in this example.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/faq.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst member = interaction.options.getMember('target');\nmember.timeout(60_000); // Timeout for one minute\n```\n\n----------------------------------------\n\nTITLE: Sending Messages Across Shards with Discord.js\nDESCRIPTION: This snippet demonstrates how to send a message to a channel that may be on a different shard using broadcastEval. It searches for the channel across all shards and sends a message if found.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/sharding/extended.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif (commandName === 'send') {\n\tconst id = interaction.options.getString('destination');\n\treturn client.shard.broadcastEval(async (c, { channelId }) => {\n\t\tconst channel = c.channels.cache.get(channelId);\n\t\tif (channel) {\n\t\t\tawait channel.send(`This is a message from shard ${c.shard.ids.join(',')}!`);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}, { context: { channelId: id } })\n\t\t.then(console.log);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Currency Transfer Command in Discord.js\nDESCRIPTION: This snippet implements a currency transfer command. It checks for valid transfer amounts, deducts from the sender's balance, and adds to the recipient's balance using the addBalance() function.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/sequelize/currency.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nelse if (commandName === 'transfer') {\n\tconst currentAmount = getBalance(interaction.user.id);\n\tconst transferAmount = interaction.options.getInteger('amount');\n\tconst transferTarget = interaction.options.getUser('user');\n\n\tif (transferAmount > currentAmount) return interaction.reply(`Sorry ${interaction.user}, you only have ${currentAmount}.`);\n\tif (transferAmount <= 0) return interaction.reply(`Please enter an amount greater than zero, ${interaction.user}.`);\n\n\taddBalance(interaction.user.id, -transferAmount);\n\taddBalance(transferTarget.id, transferAmount);\n\n\treturn interaction.reply(`Successfully transferred ${transferAmount}💰 to ${transferTarget.tag}. Your current balance is ${getBalance(interaction.user.id)}💰`);\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Client Usage Examples in Discord.js\nDESCRIPTION: Examples demonstrating incorrect usage of Discord.js client that leads to token-related errors. Shows common mistakes when working with client instances and async operations.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/errors.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Client, GatewayIntentBits } = require('discord.js');\n\n// Should not be here!\nconst client = new Client({ intents: [GatewayIntentBits.Guilds] });\n\nmodule.exports = interaction => {\n\tconst id = interaction.options.getString('id');\n\t// Should be `interaction.client` instead!\n\tclient.users.fetch(id).then(user => {\n\t\tinteraction.reply(`Your requested user: ${user.tag}`);\n\t});\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Client, Events, GatewayIntentBits } = require('discord.js');\n\nconst client = new Client({ intents: [GatewayIntentBits.Guilds] });\n\nclient.on(Events.InteractionCreate, someHandlerFunction);\n\nclient.login('your-token-goes-here');\n// client will not be logged in yet!\nclient.users.fetch('myId').then(someInitFunction);\n```\n\n----------------------------------------\n\nTITLE: Kicking a Guild Member in Discord.js\nDESCRIPTION: Code to kick a member from a guild. It retrieves the target member from interaction options and uses the kick method.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/faq.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst member = interaction.options.getMember('target');\nmember.kick();\n```\n\n----------------------------------------\n\nTITLE: Unbanning a User in Discord.js\nDESCRIPTION: Code to unban a previously banned user from a guild. It gets the user from interaction options and calls the guild's unban method.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/faq.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst user = interaction.options.getUser('target');\nguild.members.unban(user);\n```\n\n----------------------------------------\n\nTITLE: Loading and Drawing User Avatar\nDESCRIPTION: Code showing how to fetch, load, and draw a user's avatar onto the canvas using undici for HTTP requests.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/canvas.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { request } = require('undici');\n\nclient.on(Events.InteractionCreate, async interaction => {\n\t// ...\n\tcontext.strokeRect(0, 0, canvas.width, canvas.height);\n\n\t// Using undici to make HTTP requests for better performance\n\tconst { body } = await request(interaction.user.displayAvatarURL({ extension: 'jpg' }));\n\tconst avatar = await Canvas.loadImage(await body.arrayBuffer());\n\n\t// If you don't care about the performance of HTTP requests, you can instead load the avatar using\n\t// const avatar = await Canvas.loadImage(interaction.user.displayAvatarURL({ extension: 'jpg' }));\n\n\t// Draw a shape onto the main canvas\n\tcontext.drawImage(avatar, 25, 0, 200, canvas.height);\n\t// ...\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Discord.js Bot with ES6 Syntax\nDESCRIPTION: This snippet demonstrates the basic setup of a Discord.js bot using ES6 features like const declarations and arrow functions. It includes event handlers for bot ready state and interaction commands.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/es6-syntax.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Client, Events, GatewayIntentBits } = require('discord.js');\nconst config = require('./config.json');\n\nconst client = new Client({ intents: [GatewayIntentBits.Guilds] });\n\nclient.once(Events.ClientReady, () => {\n\tconsole.log('Ready!');\n});\n\nclient.on(Events.InteractionCreate, interaction => {\n\tif (!interaction.isChatInputCommand()) return;\n\n\tconst { commandName } = interaction;\n\n\tif (commandName === 'ping') {\n\t\tinteraction.reply('Pong.');\n\t} else if (commandName === 'beep') {\n\t\tinteraction.reply('Boop.');\n\t} else if (commandName === 'server') {\n\t\tinteraction.reply('Guild name: ' + interaction.guild.name + '\\nTotal members: ' + interaction.guild.memberCount);\n\t} else if (commandName === 'user-info') {\n\t\tinteraction.reply('Your username: ' + interaction.user.username + '\\nYour ID: ' + interaction.user.id);\n\t}\n});\n\nclient.login(config.token);\n```\n\n----------------------------------------\n\nTITLE: Basic Discord.js Client Setup with Canvas\nDESCRIPTION: Initial setup code showing Discord.js client configuration with Canvas integration and basic command handling structure.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/canvas.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { AttachmentBuilder, Client, Events, GatewayIntentBits } = require('discord.js');\nconst Canvas = require('@napi-rs/canvas');\n\nconst client = new Client({ intents: [GatewayIntentBits.Guilds] });\n\nclient.once(Events.ClientReady, readyClient => {\n\tconsole.log(`Ready! Logged in as ${readyClient.user.tag}`);\n});\n\nclient.on(Events.InteractionCreate, interaction => {\n\tif (!interaction.isChatInputCommand()) return;\n\n\tif (interaction.commandName === 'profile') {\n\t\t// ...\n\t}\n});\n\nclient.login('your-token-goes-here');\n```\n\n----------------------------------------\n\nTITLE: Checking if a Guild Member Has a Specific Role in Discord.js\nDESCRIPTION: Code to check if a guild member has a role with a specific name. It uses the cache and some method to find a matching role name.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/faq.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst member = interaction.options.getMember('target');\nif (member.roles.cache.some(role => role.name === 'role name')) {\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Allowed Mentions by ID in Discord.js\nDESCRIPTION: Code demonstrating how to mention specific users or roles by ID while preventing others from triggering notifications.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/faq.md#2025-04-09_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nchannel.send({\n\tcontent: '<@123456789012345678> <@987654321098765432> <@&102938475665748392>',\n\tallowedMentions: { users: ['123456789012345678'], roles: ['102938475665748392'] },\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Message Reply Syntax in Discord.js v13\nDESCRIPTION: Shows how to migrate to the new reply syntax which now uses Discord's reply feature instead of prepending a user mention to the content. Now requires a message reference instead of a user ID.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/changes-in-v13.md#2025-04-09_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n- channel.send('content', { reply: '123456789012345678' }); // User id\n+ channel.send({ content: 'content', reply: { messageReference: '765432109876543219' }}); // Message id\n```\n\n----------------------------------------\n\nTITLE: Customizing Discord.js Client Sweeper Settings\nDESCRIPTION: This example demonstrates how to customize sweeper settings for messages and users. It sets up hourly sweeps to remove messages older than 30 minutes and all bots except the client itself.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/miscellaneous/cache-customization.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = new Client({\n\tsweepers: {\n\t\t...Options.DefaultSweeperSettings,\n\t\tmessages: {\n\t\t\tinterval: 3_600, // Every hour.\n\t\t\tlifetime: 1_800, // Remove messages older than 30 minutes.\n\t\t},\n\t\tusers: {\n\t\t\tinterval: 3_600, // Every hour.\n\t\t\tfilter: () => user => user.bot && user.id !== user.client.user.id, // Remove all bots.\n\t\t},\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Modifying Route for Global Command Deployment in Discord.js\nDESCRIPTION: This JavaScript snippet shows how to modify the REST API route to deploy slash commands globally instead of to a specific guild. This change allows the commands to be available in all guilds where the bot has the necessary permissions.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/creating-your-bot/command-deployment.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nawait rest.put(\n\tRoutes.applicationCommands(clientId),\n\t{ body: commands },\n);\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Channel Permissions with Category in JavaScript\nDESCRIPTION: Shows how to synchronize a channel's permissions with its parent category using discord.js.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/permissions.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nif (!channel.parent) {\n\treturn console.log('This channel is not listed under a category');\n}\n\nchannel.lockPermissions()\n\t.then(() => console.log('Successfully synchronized permissions with parent channel'))\n\t.catch(console.error);\n```\n\n----------------------------------------\n\nTITLE: Setting Bot's Playing Status in Discord.js\nDESCRIPTION: Code to set a Discord bot's activity status to a \"Playing\" status with a specified activity name.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/faq.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nclient.user.setActivity('activity');\n```\n\n----------------------------------------\n\nTITLE: Using BigInt for Permissions in Discord.js v13\nDESCRIPTION: Shows how to handle Bitfields which are now BigInt instead of Number. This can be done using the BigInt() class or the n-suffixed BigInt literal.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/changes-in-v13.md#2025-04-09_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n- const p = new Permissions(104_324_673);\n+ const p = new Permissions(BigInt(104_324_673));\n+ const p = new Permissions(104_324_673n);\n```\n\n----------------------------------------\n\nTITLE: Creating a .env File for Environment Variables\nDESCRIPTION: Example of a .env file structure that stores key-value pairs for environment variables. Each line contains a variable name and its value that will be loaded into the application environment.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/creating-your-bot/README.md#2025-04-09_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nA=123\nB=456\nDISCORD_TOKEN=your-token-goes-here\n```\n\n----------------------------------------\n\nTITLE: Serializing Permissions in Discord.js\nDESCRIPTION: Shows how to use the serialize() method to convert a Permissions object into an object mapping permission names to boolean values, indicating which permissions are available in the instance.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/permissions.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst memberPermissions = member.permissions.serialize();\nconst rolePermissions = role.permissions.serialize();\n/* output: {\nSendMessages: true,\nAddReactions: true,\nBanMembers: false,\n...\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Adding Channel Permission Overwrites in JavaScript\nDESCRIPTION: Demonstrates how to add permission overwrites for roles or users on a channel using discord.js.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/permissions.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nchannel.permissionOverwrites.create(channel.guild.roles.everyone, { ViewChannel: false });\n```\n\n----------------------------------------\n\nTITLE: Setting Bot's Status in Discord.js\nDESCRIPTION: Code to set a Discord bot's online status (online, idle, do not disturb, or invisible) using the PresenceUpdateStatus enum.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/faq.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst { PresenceUpdateStatus } = require('discord.js');\n\nclient.user.setStatus(PresenceUpdateStatus.Online);\nclient.user.setStatus(PresenceUpdateStatus.Idle);\nclient.user.setStatus(PresenceUpdateStatus.DoNotDisturb);\nclient.user.setStatus(PresenceUpdateStatus.Invisible);\n```\n\n----------------------------------------\n\nTITLE: Handling Feedback for Cross-Shard Message Sending in Discord.js\nDESCRIPTION: This snippet shows how to provide feedback to the user after attempting to send a message across shards. It checks the results of the broadcastEval to determine if the message was sent successfully.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/sharding/extended.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nreturn client.shard.broadcastEval(c => {\n\t// ...\n})\n\t.then(sentArray => {\n\t\t// Search for a non falsy value before providing feedback\n\t\tif (!sentArray.includes(true)) {\n\t\t\treturn message.reply('I could not find such a channel.');\n\t\t}\n\t\treturn message.reply(`I have sent a message to channel: \\`${id}\\`!`);\n\t});\n```\n\n----------------------------------------\n\nTITLE: Generating a Dependency Report for @discordjs/voice\nDESCRIPTION: JavaScript code to generate a detailed report of installed dependencies related to @discordjs/voice, including core dependencies, Opus libraries, encryption libraries, and FFmpeg configuration.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/voice/README.md#2025-04-09_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nconst { generateDependencyReport } = require('@discordjs/voice');\n\nconsole.log(generateDependencyReport());\n\n/*\n--------------------------------------------------\nCore Dependencies\n- @discordjs/voice: 0.3.1\n- prism-media: 1.2.9\n\nOpus Libraries\n- @discordjs/opus: 0.5.3\n- opusscript: not found\n\nEncryption Libraries\n- sodium: 3.0.2\n- libsodium-wrappers: not found\n- tweetnacl: not found\n\nFFmpeg\n- version: 4.2.4-1ubuntu0.1\n- libopus: yes\n--------------------------------------------------\n*/\n```\n\n----------------------------------------\n\nTITLE: Importing undici Request Function\nDESCRIPTION: Importing the request function from the undici library for making HTTP requests.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/rest-api.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { request } = require('undici');\n```\n\n----------------------------------------\n\nTITLE: Removing Channel Permission Overwrites in JavaScript\nDESCRIPTION: Demonstrates how to remove permission overwrites for a specific member or role on a channel using discord.js.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/permissions.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// deleting the channel's overwrite for the user who interacted\nchannel.permissionOverwrites.delete(interaction.user.id);\n```\n\n----------------------------------------\n\nTITLE: Using PermissionOverwriteManager in Discord.js v13\nDESCRIPTION: Shows how to create permission overwrites using the new PermissionOverwriteManager instead of the removed GuildChannel#createOverwrite method.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/changes-in-v13.md#2025-04-09_snippet_21\n\nLANGUAGE: diff\nCODE:\n```\n- channel.createOverwrite(user, { VIEW_CHANNEL: false });\n+ channel.permissionOverwrites.create(user, { VIEW_CHANNEL: false });\n```\n\n----------------------------------------\n\nTITLE: Creating an Input Prompt with Message Collector in Discord.js\nDESCRIPTION: Code to prompt a user for additional input using a message collector that waits for a response within a time limit.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/faq.md#2025-04-09_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\ninteraction.reply('Please enter more input.').then(() => {\n\tconst collectorFilter = m => interaction.user.id === m.author.id;\n\n\tinteraction.channel.awaitMessages({ filter: collectorFilter, time: 60_000, max: 1, errors: ['time'] })\n\t\t.then(messages => {\n\t\t\tinteraction.followUp(`You've entered: ${messages.first().content}`);\n\t\t})\n\t\t.catch(() => {\n\t\t\tinteraction.followUp('You did not enter any input!');\n\t\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Discord Messages with @discord-message-components/vue in HTML\nDESCRIPTION: This snippet demonstrates how to create fake Discord messages using the @discord-message-components/vue library. It shows the basic structure with DiscordMessages as the parent component and DiscordMessage components as children, along with attributes for user profiles and mentions.\nSOURCE: https://github.com/discordjs/guide/blob/main/CONTRIBUTING.md#2025-04-09_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<DiscordMessages>\n\t<DiscordMessage profile=\"user\">\n\t\t!ping\n\t</DiscordMessage>\n\t<DiscordMessage profile=\"bot\">\n\t\t<DiscordMention :highlight=\"true\" profile=\"user\" />, pong! Took 250ms\n\t</DiscordMessage>\n\t<DiscordMessage author=\"Another User\" avatar=\"green\">\n\t\tPung!\n\t</DiscordMessage>\n</DiscordMessages>\n```\n\n----------------------------------------\n\nTITLE: Creating Circular Avatar Mask\nDESCRIPTION: Code demonstrating how to create a circular clipping mask for the avatar image using canvas arc operations.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/canvas.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nclient.on(Events.InteractionCreate, async interaction => {\n\t// ...\n\tcontext.strokeRect(0, 0, canvas.width, canvas.height);\n\n\t// Pick up the pen\n\tcontext.beginPath();\n\n\t// Start the arc to form a circle\n\tcontext.arc(125, 125, 100, 0, Math.PI * 2, true);\n\n\t// Put the pen down\n\tcontext.closePath();\n\n\t// Clip off the region you drew on\n\tcontext.clip();\n\t// ...\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Member Permissions in JavaScript\nDESCRIPTION: Shows how to check if a member has specific permissions using the .has() method in discord.js.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/permissions.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { PermissionsBitField } = require('discord.js');\n\nif (member.permissions.has(PermissionsBitField.Flags.KickMembers)) {\n\tconsole.log('This member can kick');\n}\n\nif (member.permissions.has([PermissionsBitField.Flags.KickMembers, PermissionsBitField.Flags.BanMembers])) {\n\tconsole.log('This member can kick and ban');\n}\n\nif (member.permissions.has(PermissionsBitField.Flags.KickMembers, false)) {\n\tconsole.log('This member can kick without allowing admin to override');\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Guild Members in Discord.js v13\nDESCRIPTION: Shows how to access guild members now that the Guild#member helper method has been removed in favor of accessing the cache directly.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/changes-in-v13.md#2025-04-09_snippet_18\n\nLANGUAGE: diff\nCODE:\n```\n- guild.member(user);\n+ guild.members.cache.get(user.id)\n```\n\n----------------------------------------\n\nTITLE: Checking if a Structure is Partial in Discord.js\nDESCRIPTION: This code example shows how to check whether a message object is partial using the .partial property. This property returns true for partial structures and false for complete structures.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/partials.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif (message.partial) {\n\tconsole.log('The message is partial.');\n} else {\n\tconsole.log('The message is not partial.');\n}\n```\n\n----------------------------------------\n\nTITLE: NPM Cache Clean Command\nDESCRIPTION: Command to force clean the NPM cache to resolve ELIFECYCLE errors.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/errors.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm cache clean --force\n```\n\n----------------------------------------\n\nTITLE: Adding Border to Canvas\nDESCRIPTION: Code showing how to add a colored border around the canvas image.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/canvas.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nclient.on(Events.InteractionCreate, async interaction => {\n\t// ...\n\tcontext.drawImage(background, 0, 0, canvas.width, canvas.height);\n\n\t// Set the color of the stroke\n\tcontext.strokeStyle = '#0099ff';\n\n\t// Draw a rectangle with the dimensions of the entire canvas\n\tcontext.strokeRect(0, 0, canvas.width, canvas.height);\n\t// ...\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Urban Dictionary Definition\nDESCRIPTION: Making a request to the Urban Dictionary API with a search term and processing the JSON response.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/rest-api.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclient.on(Events.InteractionCreate, async interaction => {\n\t// ...\n\tif (commandName === 'urban') {\n\t\tconst term = interaction.options.getString('term');\n\t\tconst query = new URLSearchParams({ term });\n\n\t\tconst dictResult = await request(`https://api.urbandictionary.com/v0/define?${query}`);\n\t\tconst { list } = await dictResult.body.json();\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Migrating GuildMember Permission Check\nDESCRIPTION: Updates to permission checking using the permissions property instead of hasPermission method.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/changes-in-v13.md#2025-04-09_snippet_25\n\nLANGUAGE: diff\nCODE:\n```\n- member.hasPermission(Permissions.FLAGS.SEND_MESSAGES);\n+ member.permissions.has(Permissions.FLAGS.SEND_MESSAGES);\n```\n\n----------------------------------------\n\nTITLE: Migrating REST Event Handlers in Discord.js\nDESCRIPTION: Shows how to update REST event handling code to use Undici's Diagnostics Channel instead of the removed apiRequest event.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/changes-in-v14.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport diagnosticsChannel from 'node:diagnostics_channel';\n\ndiagnosticsChannel.channel('undici:request:create').subscribe(data => {\n\t// If you use TypeScript, `data` may be casted as\n\t// `DiagnosticsChannel.RequestCreateMessage`\n\t// from Undici to receive type definitions.\n\tconst { request } = data;\n\tconsole.log(request.method); // Log the method\n\tconsole.log(request.path); // Log the path\n\tconsole.log(request.headers); // Log the headers\n\tconsole.log(request); // Or just log everything!\n});\n```\n\n----------------------------------------\n\nTITLE: Banning a User in Discord.js\nDESCRIPTION: Code to ban a user from a guild using the Discord.js framework. It retrieves the target user from the interaction options and uses the guild's ban method.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/faq.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst user = interaction.options.getUser('target');\nguild.members.ban(user);\n```\n\n----------------------------------------\n\nTITLE: Required Options in Discord.js Commands\nDESCRIPTION: Demonstrates how to make command options required using setRequired(true).\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/slash-commands/advanced-creation.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { SlashCommandBuilder } = require('discord.js');\n\nconst data = new SlashCommandBuilder()\n\t.setName('echo')\n\t.setDescription('Replies with your input!')\n\t.addStringOption(option =>\n\t\toption.setName('input')\n\t\t\t.setDescription('The input to echo back')\n\t\t\t.setRequired(true));\n```\n\n----------------------------------------\n\nTITLE: Implementing Random Cat Command\nDESCRIPTION: Adding a command to fetch and send a random cat image in response to a Discord interaction.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/rest-api.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nclient.on(Events.InteractionCreate, async interaction => {\n\t// ...\n\tif (commandName === 'cat') {\n\t\tconst catResult = await request('https://aws.random.cat/meow');\n\t\tconst { file } = await catResult.body.json();\n\t\tinteraction.editReply({ files: [file] });\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Reply Mentions in Discord.js v13\nDESCRIPTION: Shows how to control whether a reply will notify the author of the original message using the new allowedMentions.repliedUser option.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/changes-in-v13.md#2025-04-09_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n- message.reply('content')\n+ message.reply({ content: 'content', allowedMentions: { repliedUser: false }})\n```\n\n----------------------------------------\n\nTITLE: Pino Logger Setup\nDESCRIPTION: Configuration and usage of Pino logger in a Discord.js bot.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/miscellaneous/useful-packages.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst pino = require('pino');\nconst logger = pino();\nmodule.exports = logger;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Client, Events, GatewayIntentBits } = require('discord.js');\nconst client = new Client({ intents: [GatewayIntentBits.Guilds] });\nconst logger = require('./logger');\n\nclient.once(Events.ClientReady, () => logger.info('The bot is online'));\nclient.on(Events.Debug, info => logger.debug(info));\nclient.on(Events.Warn, info => logger.warn(info));\nclient.on(Events.Error, error => logger.error(error));\n\nclient.login('your-token-goes-here');\n```\n\n----------------------------------------\n\nTITLE: Accessing Voice Connection in Discord.js\nDESCRIPTION: Shows how to access an existing voice connection using the guild ID. This is the recommended way to retrieve voice connections instead of tracking them manually.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/voice/voice-connections.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getVoiceConnection } = require('@discordjs/voice');\n\nconst connection = getVoiceConnection(myVoiceChannel.guild.id);\n```\n\n----------------------------------------\n\nTITLE: Getting Custom Emojis for Reactions in Discord.js\nDESCRIPTION: Shows how to get a custom emoji using the get() method on the client's emoji cache, then use it for a reaction. This method is more direct when you know the emoji's ID.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/reactions.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nif (commandName === 'react-custom') {\n\tconst response = await interaction.reply({ content: 'You can react with custom emojis!', withResponse: true });\n\tconst reactionEmoji = client.emojis.cache.get('123456789012345678');\n\tresponse.resource.message.react(reactionEmoji);\n}\n```\n\n----------------------------------------\n\nTITLE: Message Deletion with Async/Await in Discord.js\nDESCRIPTION: Refactoring the message deletion example to use async/await instead of Promise chaining. This demonstrates how to store the resolved Promise value in a variable for later use with async/await syntax.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/async-await.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nclient.on(Events.InteractionCreate, async interaction => {\n\tif (commandName === 'delete') {\n\t\ttry {\n\t\t\tconst response = await interaction.reply({ content: 'This message will be deleted.', withResponse: true });\n\t\t\tsetTimeout(() => response.resource.message.delete(), 10_000);\n\t\t} catch (error) {\n\t\t\t// handle error\n\t\t}\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Vanity URL Data in Discord.js v13\nDESCRIPTION: Shows how to fetch vanity URL data using the new fetchVanityData method instead of the removed fetchVanityCode method.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/changes-in-v13.md#2025-04-09_snippet_17\n\nLANGUAGE: diff\nCODE:\n```\n- Guild.fetchVanityCode().then(code => console.log(`Vanity URL: https://discord.gg/${code}`));\n+ Guild.fetchVanityData().then(res => console.log(`Vanity URL: https://discord.gg/${res.code} with ${res.uses} uses`));\n```\n\n----------------------------------------\n\nTITLE: Updating Allowed Mentions Configuration in Discord.js v13\nDESCRIPTION: Shows how to migrate from the deprecated 'disableMentions' option to the new 'allowedMentions' configuration, which provides more granular control over mention parsing.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/changes-in-v13.md#2025-04-09_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n- const client = new Discord.Client({ disableMentions: 'everyone' });\n+ const client = new Discord.Client({ allowedMentions: { parse: ['users', 'roles'], repliedUser: true } });\n```\n\n----------------------------------------\n\nTITLE: Awaiting Component Interactions in Discord.js\nDESCRIPTION: Code demonstrating how to await a single button interaction response using awaitMessageComponent() with a filter to ensure only the original user can interact with it. Includes timeout handling and proper response cleanup.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/message-components/interactions.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await interaction.reply({\n\tcontent: `Are you sure you want to ban ${target.username} for reason: ${reason}?`,\n\tcomponents: [row],\n\twithResponse: true,\n});\n\nconst collectorFilter = i => i.user.id === interaction.user.id;\n\ntry {\n\tconst confirmation = await response.resource.message.awaitMessageComponent({ filter: collectorFilter, time: 60_000 });\n} catch {\n\tawait interaction.editReply({ content: 'Confirmation not received within 1 minute, cancelling', components: [] });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Webhook Using Discord.js Channel Method\nDESCRIPTION: Example of creating a new webhook for a channel with custom name and avatar.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/webhooks.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nchannel.createWebhook({\n\tname: 'Some-username',\n\tavatar: 'https://i.imgur.com/AfFp7pu.png',\n})\n\t.then(webhook => console.log(`Created webhook ${webhook}`))\n\t.catch(console.error);\n```\n\n----------------------------------------\n\nTITLE: Problematic Asynchronous Execution in Discord.js\nDESCRIPTION: An example of incorrect message reaction handling that doesn't account for the asynchronous nature of Discord.js methods. This approach could lead to race conditions and unpredictable ordering of reactions.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/async-await.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclient.on(Events.InteractionCreate, interaction => {\n\t// ...\n\tif (commandName === 'react') {\n\t\tconst response = interaction.reply({ content: 'Reacting!', withResponse: true });\n\t\tconst { message } = response.resource;\n\t\tmessage.react('🇦');\n\t\tmessage.react('🇧');\n\t\tmessage.react('🇨');\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Shard Respawn Parameters\nDESCRIPTION: Migration to object-based parameters for shard respawning with renamed timeout parameter.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/changes-in-v13.md#2025-04-09_snippet_29\n\nLANGUAGE: diff\nCODE:\n```\n- shard.respawn(500, 30_000);\n+ shard.respawn({ delay: 500, timeout: 30_000 });\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Limits for Discord.js Client\nDESCRIPTION: Example of how to set custom cache limits for different managers in the Discord.js Client using the new makeCache option.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/changes-in-v13.md#2025-04-09_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst client = new Client({\n\tmakeCache: Options.cacheWithLimits({\n\t\tMessageManager: 200, // This is default\n\t\tPresenceManager: 0,\n\t\t// Add more class names here\n\t}),\n});\n```\n\n----------------------------------------\n\nTITLE: Advanced Command Handler with Autocomplete\nDESCRIPTION: Shows integration of autocomplete handling into a command handler system with error management.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/slash-commands/autocomplete.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclient.on(Events.InteractionCreate, async interaction => {\n\tif (interaction.isChatInputCommand()) {\n\t\t// command handling\n\t} else if (interaction.isAutocomplete()) {\n\t\tconst command = interaction.client.commands.get(interaction.commandName);\n\n\t\tif (!command) {\n\t\t\tconsole.error(`No command matching ${interaction.commandName} was found.`);\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tawait command.autocomplete(interaction);\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t}\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Sequentially Adding Message Reactions Using Async/Await in Discord.js\nDESCRIPTION: Implementation that ensures emoji reactions are added in the correct order by using async/await syntax. This provides a cleaner approach with proper error handling.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/reactions.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nclient.on(Events.InteractionCreate, async interaction => {\n\tif (!interaction.isChatInputCommand()) return;\n\n\tconst { commandName } = interaction;\n\n\tif (commandName === 'fruits') {\n\t\tconst response = await interaction.reply({ content: 'Reacting with fruits!', withResponse: true });\n\t\tconst { message } = response.resource;\n\n\t\ttry {\n\t\t\tawait message.react('🍎');\n\t\t\tawait message.react('🍊');\n\t\t\tawait message.react('🍇');\n\t\t} catch (error) {\n\t\t\tconsole.error('One of the emojis failed to react:', error);\n\t\t}\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Message Deletion with Promise Chaining in Discord.js\nDESCRIPTION: Example of scheduling a message for deletion using Promise chaining with setTimeout. This shows how to access the resolved value of a Promise to perform actions on it later.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/async-await.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nclient.on(Events.InteractionCreate, interaction => {\n\t// ...\n\tif (commandName === 'delete') {\n\t\tinteraction.reply({ content: 'This message will be deleted.', withResponse: true })\n\t\t\t.then(response => setTimeout(() => response.resource.message.delete(), 10_000))\n\t\t\t.catch(error => {\n\t\t\t\t// handle error\n\t\t\t});\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Starting PM2 Process with Custom Name\nDESCRIPTION: This command starts a PM2 process with a custom name for easy identification in PM2's list and monitoring tools.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/improving-dev-environment/pm2.md#2025-04-09_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npm2 start your-app-name.js --name \"Some cool name\"\n```\n\n----------------------------------------\n\nTITLE: Detecting Webhook Messages in Discord.js\nDESCRIPTION: Simple code snippet to check if a message was sent by a webhook by examining the webhookId property.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/webhooks.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif (message.webhookId) return;\n```\n\n----------------------------------------\n\nTITLE: Defining a Sequelize Model for Tags\nDESCRIPTION: Creating a database model for storing tags with fields for name, description, username, and usage count. This is equivalent to creating a table in SQL.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/sequelize/README.md#2025-04-09_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n/*\n * equivalent to: CREATE TABLE tags(\n * name VARCHAR(255) UNIQUE,\n * description TEXT,\n * username VARCHAR(255),\n * usage_count  INT NOT NULL DEFAULT 0\n * );\n */\nconst Tags = sequelize.define('tags', {\n\tname: {\n\t\ttype: Sequelize.STRING,\n\t\tunique: true,\n\t},\n\tdescription: Sequelize.TEXT,\n\tusername: Sequelize.STRING,\n\tusage_count: {\n\t\ttype: Sequelize.INTEGER,\n\t\tdefaultValue: 0,\n\t\tallowNull: false,\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Start Script\nDESCRIPTION: Adding a start script to package.json to run the bot using Node.js\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/improving-dev-environment/package-json-scripts.md#2025-04-09_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"start\": \"node .\"\n```\n\n----------------------------------------\n\nTITLE: Sequential Promise Chaining in Discord.js for Message Reactions\nDESCRIPTION: Using Promise chaining with .then() to ensure reactions are added sequentially in a specific order. This approach handles asynchronous operations correctly but can lead to callback nesting.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/async-await.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nclient.on(Events.InteractionCreate, interaction => {\n\t// ...\n\tif (commandName === 'react') {\n\t\tinteraction.reply({ content: 'Reacting!', withResponse: true })\n\t\t\t.then(response => {\n\t\t\t\tconst { message } = response.resource;\n\n\t\t\t\tmessage.react('🇦')\n\t\t\t\t\t.then(() => message.react('🇧'))\n\t\t\t\t\t.then(() => message.react('🇨'))\n\t\t\t\t\t.catch(error => {\n\t\t\t\t\t\t// handle failure of any Promise rejection inside here\n\t\t\t\t\t});\n\t\t\t});\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Saving PM2 Process List\nDESCRIPTION: This command saves the current list of PM2 processes, ensuring they will be automatically started after a system restart.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/improving-dev-environment/pm2.md#2025-04-09_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\npm2 save\n```\n\n----------------------------------------\n\nTITLE: Comprehensive ESLint Configuration for Discord.js\nDESCRIPTION: A detailed ESLint configuration file with a comprehensive set of rules tailored for Discord.js projects. It includes rules for code style, best practices, and error prevention.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/preparations/setting-up-a-linter.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst js = require('@eslint/js');\n\nmodule.exports = [\n\tjs.configs.recommended,\n\t{\n\t\tlanguageOptions: {\n\t\t\tecmaVersion: 'latest',\n\t\t},\n\t\trules: {\n\t\t\t'arrow-spacing': ['warn', { before: true, after: true }],\n\t\t\t'brace-style': ['error', 'stroustrup', { allowSingleLine: true }],\n\t\t\t'comma-dangle': ['error', 'always-multiline'],\n\t\t\t'comma-spacing': 'error',\n\t\t\t'comma-style': 'error',\n\t\t\tcurly: ['error', 'multi-line', 'consistent'],\n\t\t\t'dot-location': ['error', 'property'],\n\t\t\t'handle-callback-err': 'off',\n\t\t\tindent: ['error', 'tab'],\n\t\t\t'keyword-spacing': 'error',\n\t\t\t'max-nested-callbacks': ['error', { max: 4 }],\n\t\t\t'max-statements-per-line': ['error', { max: 2 }],\n\t\t\t'no-console': 'off',\n\t\t\t'no-empty-function': 'error',\n\t\t\t'no-floating-decimal': 'error',\n\t\t\t'no-inline-comments': 'error',\n\t\t\t'no-lonely-if': 'error',\n\t\t\t'no-multi-spaces': 'error',\n\t\t\t'no-multiple-empty-lines': ['error', { max: 2, maxEOF: 1, maxBOF: 0 }],\n\t\t\t'no-shadow': ['error', { allow: ['err', 'resolve', 'reject'] }],\n\t\t\t'no-trailing-spaces': ['error'],\n\t\t\t'no-var': 'error',\n\t\t\t'no-undef': 'off',\n\t\t\t'object-curly-spacing': ['error', 'always'],\n\t\t\t'prefer-const': 'error',\n\t\t\tquotes: ['error', 'single'],\n\t\t\tsemi: ['error', 'always'],\n\t\t\t'space-before-blocks': 'error',\n\t\t\t'space-before-function-paren': ['error', {\n\t\t\t\tanonymous: 'never',\n\t\t\t\tnamed: 'never',\n\t\t\t\tasyncArrow: 'always',\n\t\t\t}],\n\t\t\t'space-in-parens': 'error',\n\t\t\t'space-infix-ops': 'error',\n\t\t\t'space-unary-ops': 'error',\n\t\t\t'spaced-comment': 'error',\n\t\t\tyoda: 'error',\n\t\t},\n\t},\n];\n```\n\n----------------------------------------\n\nTITLE: Detecting Modal Submissions in Discord.js\nDESCRIPTION: Shows how to set up an event listener for modal submissions using the interactionCreate event with the isModalSubmit type guard to filter for modal interactions.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/interactions/modals.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclient.on(Events.InteractionCreate, interaction => {\n\tif (!interaction.isModalSubmit()) return;\n\tconsole.log(interaction);\n});\n```\n\n----------------------------------------\n\nTITLE: Subscribing to All State Transitions in Discord.js Voice\nDESCRIPTION: This snippet shows how to listen to all state transitions for both VoiceConnection and AudioPlayer using a single event listener. It logs the transition from old state to new state for both components.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/voice/life-cycles.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconnection.on('stateChange', (oldState, newState) => {\n\tconsole.log(`Connection transitioned from ${oldState.status} to ${newState.status}`);\n});\n\nplayer.on('stateChange', (oldState, newState) => {\n\tconsole.log(`Audio player transitioned from ${oldState.status} to ${newState.status}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Await Messages for Quiz in Discord.js\nDESCRIPTION: Implements a quiz command using awaitMessages() in Discord.js. It selects a random question, waits for the correct answer, and provides feedback.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/collectors.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst quiz = require('./quiz.json');\n// ...\nconst item = quiz[Math.floor(Math.random() * quiz.length)];\nconst collectorFilter = response => {\n\treturn item.answers.some(answer => answer.toLowerCase() === response.content.toLowerCase());\n};\n\ninteraction.reply({ content: item.question, withResponse: true })\n\t.then(response => {\n\t\tresponse.resource.message.channel.awaitMessages({ filter: collectorFilter, max: 1, time: 30_000, errors: ['time'] })\n\t\t\t.then(collected => {\n\t\t\t\tinteraction.followUp(`${collected.first().author} got the correct answer!`);\n\t\t\t})\n\t\t\t.catch(collected => {\n\t\t\t\tinteraction.followUp('Looks like nobody got the answer this time.');\n\t\t\t});\n\t});\n```\n\n----------------------------------------\n\nTITLE: Generating PM2 Startup Script for Specific Systems\nDESCRIPTION: This command allows specifying the operating system manually when generating the PM2 startup script. Replace [option] with the appropriate system identifier.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/improving-dev-environment/pm2.md#2025-04-09_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\npm2 startup [ubuntu | ubuntu14 | ubuntu12 | centos | centos6 | arch | oracle | amazon | macos | darwin | freesd | systemd | systemv | upstart | launchd | rcd | openrc]\n```\n\n----------------------------------------\n\nTITLE: Creating Embed Helper Function\nDESCRIPTION: Defining a helper function to truncate strings for use in Discord embeds.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/rest-api.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst trim = (str, max) => (str.length > max ? `${str.slice(0, max - 3)}...` : str);\n```\n\n----------------------------------------\n\nTITLE: Sending a Direct Message to a User in Discord.js\nDESCRIPTION: Code to send a direct message to a specific user using their ID or from an interaction.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/faq.md#2025-04-09_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nclient.users.send('id', 'content');\n```\n\n----------------------------------------\n\nTITLE: Migrating from Util Methods to Top-level Exports in Discord.js\nDESCRIPTION: Shows how to update code that uses Util methods to import them as top-level exports directly from the discord.js package.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/changes-in-v14.md#2025-04-09_snippet_13\n\nLANGUAGE: diff\nCODE:\n```\n- import { Util } from 'discord.js';\n- Util.escapeMarkdown(message);\n+ import { escapeMarkdown } from 'discord.js';\n+ escapeMarkdown(message);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Cooldown Logic in InteractionCreate Event\nDESCRIPTION: Implements the core cooldown logic including collection initialization, timestamp tracking, and cooldown duration calculation.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-features/cooldowns.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { cooldowns } = interaction.client;\n\nif (!cooldowns.has(command.data.name)) {\n\tcooldowns.set(command.data.name, new Collection());\n}\n\nconst now = Date.now();\nconst timestamps = cooldowns.get(command.data.name);\nconst defaultCooldownDuration = 3;\nconst cooldownAmount = (command.cooldown ?? defaultCooldownDuration) * 1_000;\n\nif (timestamps.has(interaction.user.id)) {\n\t// ...\n}\n\ntry {\n\t// ...\n} catch (error) {\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using broadcastEval for Member Count Across Shards\nDESCRIPTION: Shows how to execute the same code across all shards using broadcastEval to calculate total member count across all guilds in all shards.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/sharding/README.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclient.shard\n\t.broadcastEval(c => c.guilds.cache.reduce((acc, guild) => acc + guild.memberCount, 0))\n\t.then(console.log);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nclient.shard\n\t.broadcastEval(c => c.guilds.cache.reduce((acc, guild) => acc + guild.memberCount, 0))\n\t.then(results => {\n\t\treturn interaction.reply(`Total member count: ${results.reduce((acc, memberCount) => acc + memberCount, 0)}`);\n\t})\n\t.catch(console.error);\n```\n\n----------------------------------------\n\nTITLE: Implementing Advanced Validation in Discord.js Commands\nDESCRIPTION: Demonstrates advanced validation including length limits and channel type restrictions.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/slash-commands/advanced-creation.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { SlashCommandBuilder, ChannelType } = require('discord.js');\n\nconst data = new SlashCommandBuilder()\n\t.setName('echo')\n\t.setDescription('Replies with your input!')\n\t.addStringOption(option =>\n\t\toption.setName('input')\n\t\t\t.setDescription('The input to echo back')\n\t\t\t.setMaxLength(2_000))\n\t.addChannelOption(option =>\n\t\toption.setName('channel')\n\t\t\t.setDescription('The channel to echo into')\n\t\t\t.addChannelTypes(ChannelType.GuildText))\n\t.addBooleanOption(option =>\n\t\toption.setName('embed')\n\t\t\t.setDescription('Whether or not the echo should be embedded'));\n```\n\n----------------------------------------\n\nTITLE: Handling Audio Player State Changes in Discord.js\nDESCRIPTION: Demonstrates how to listen for state changes in an audio player, specifically the transition to the Playing state.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/voice/audio-player.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { AudioPlayerStatus } = require('@discordjs/voice');\n\nplayer.on(AudioPlayerStatus.Playing, () => {\n\tconsole.log('The audio player has started playing!');\n});\n```\n\n----------------------------------------\n\nTITLE: Using partition() Method on Collection in JavaScript\nDESCRIPTION: Explains and demonstrates the usage of the partition() method, which splits a Collection into two based on a provided condition.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/collections.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// `bots` is a Collection of users where their `bot` property was true.\n// `humans` is a Collection where the property was false instead!\nconst [bots, humans] = collection.partition(u => u.bot);\n\n// Both return true.\nbots.every(b => b.bot);\nhumans.every(h => !h.bot);\n```\n\n----------------------------------------\n\nTITLE: Configuring Command Cooldown Property in Discord.js\nDESCRIPTION: Shows how to add a cooldown property to a Discord.js slash command definition. Sets a 5-second cooldown for the 'ping' command.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-features/cooldowns.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { SlashCommandBuilder } = require('discord.js');\n\nmodule.exports = {\n\tcooldown: 5,\n\tdata: new SlashCommandBuilder()\n\t\t.setName('ping')\n\t\t.setDescription('Replies with Pong!'),\n\tasync execute(interaction) {\n\t\t// ...\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Editing Command Response\nDESCRIPTION: Shows how to edit an initial response after a delay using ChatInputCommandInteraction#editReply()\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/slash-commands/response-methods.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst wait = require('node:timers/promises').setTimeout;\n\nclient.on(Events.InteractionCreate, async interaction => {\n\tif (!interaction.isChatInputCommand()) return;\n\n\tif (interaction.commandName === 'ping') {\n\t\tawait interaction.reply('Pong!');\n\t\tawait wait(2_000);\n\t\tawait interaction.editReply('Pong again!');\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Disabled Button in Discord.js\nDESCRIPTION: This code demonstrates how to create a disabled button using the setDisabled method. Disabled buttons cannot be interacted with but remain visible in the message.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/message-components/buttons.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst button = new ButtonBuilder()\n\t.setCustomId('disabled')\n\t.setLabel('Click me?')\n\t.setStyle(ButtonStyle.Primary)\n\t.setDisabled(true);\n```\n\n----------------------------------------\n\nTITLE: NPM Package Reinstallation Command\nDESCRIPTION: Command to reinstall packages from package.json after cleaning cache and removing node_modules.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/errors.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Limiting a Command to a Specific User in Discord.js\nDESCRIPTION: Code to restrict a command so only a specific user (identified by their ID) can use it.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/faq.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nif (interaction.user.id === 'id') {\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating the Reload Command Structure in Discord.js\nDESCRIPTION: Defines the basic structure of a slash command named 'reload' that takes a required string option for the command name to be reloaded.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-features/reloading-commands.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { SlashCommandBuilder } = require('discord.js');\n\nmodule.exports = {\n\tdata: new SlashCommandBuilder()\n\t\t.setName('reload')\n\t\t.setDescription('Reloads a command.')\n\t\t.addStringOption(option =>\n\t\t\toption.setName('command')\n\t\t\t\t.setDescription('The command to reload.')\n\t\t\t\t.setRequired(true)),\n\tasync execute(interaction) {\n\t\t// ...\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing a Command Handler with Keyv\nDESCRIPTION: JavaScript code for a basic command handler that uses Keyv to manage per-guild prefixes.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/keyv/README.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclient.on(Events.MessageCreate, async message => {\n\tif (message.author.bot) return;\n\n\tlet args;\n\t// handle messages in a guild\n\tif (message.guild) {\n\t\tlet prefix;\n\n\t\tif (message.content.startsWith(globalPrefix)) {\n\t\t\tprefix = globalPrefix;\n\t\t} else {\n\t\t\t// check the guild-level prefix\n\t\t\tconst guildPrefix = await prefixes.get(message.guild.id);\n\t\t\tif (message.content.startsWith(guildPrefix)) prefix = guildPrefix;\n\t\t}\n\n\t\t// if we found a prefix, setup args; otherwise, this isn't a command\n\t\tif (!prefix) return;\n\t\targs = message.content.slice(prefix.length).trim().split(/\\s+/);\n\t} else {\n\t\t// handle DMs\n\t\tconst slice = message.content.startsWith(globalPrefix) ? globalPrefix.length : 0;\n\t\targs = message.content.slice(slice).split(/\\s+/);\n\t}\n\n\t// get the first space-delimited argument after the prefix as the command\n\tconst command = args.shift().toLowerCase();\n});\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Redundant Packages in Discord.js v14\nDESCRIPTION: Commands to uninstall packages that are now included in Discord.js v14, preventing version conflicts. Shown for npm, yarn, and pnpm package managers.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/changes-in-v14.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm uninstall @discordjs/builders @discordjs/formatters @discordjs/rest discord-api-types\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn remove @discordjs/builders @discordjs/formatters @discordjs/rest discord-api-types\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm remove @discordjs/builders @discordjs/formatters @discordjs/rest discord-api-types\n```\n\n----------------------------------------\n\nTITLE: Managing Thread Lock State in Discord.js\nDESCRIPTION: Shows how to lock and unlock a thread using setLocked() method.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/threads.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst thread = channel.threads.cache.find(x => x.name === 'food-talk');\nawait thread.setLocked(true); // locked\nawait thread.setLocked(false); // unlocked\n```\n\n----------------------------------------\n\nTITLE: Playing Audio Resources with Discord.js Audio Player\nDESCRIPTION: Illustrates how to create an audio resource, play it on an audio player, and subscribe multiple voice connections to the same player.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/voice/audio-player.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst resource = createAudioResource('/home/user/voice/track.mp3');\nplayer.play(resource);\n\n// Play \"track.mp3\" across two voice connections\nconnection1.subscribe(player);\nconnection2.subscribe(player);\n```\n\n----------------------------------------\n\nTITLE: Restructured interactionCreate Event Handler in Discord.js\nDESCRIPTION: Refactored interactionCreate event handler with inverted logic to prepare for handling multiple interaction types. This restructuring maintains the same functionality but makes it easier to add more interaction type handlers.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/message-components/interactions.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Events } = require('discord.js');\n\nmodule.exports = {\n\tname: Events.InteractionCreate,\n\tasync execute(interaction) {\n\t\tif (interaction.isChatInputCommand()) {\n\t\t\tconst command = interaction.client.commands.get(interaction.commandName);\n\n\t\t\tif (!command) {\n\t\t\t\tconsole.error(`No command matching ${interaction.commandName} was found.`);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tawait command.execute(interaction);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(`Error executing ${interaction.commandName}`);\n\t\t\t\tconsole.error(error);\n\t\t\t}\n\t\t}\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Windows Build Tools with pnpm\nDESCRIPTION: Command to install Windows build tools globally with pnpm to support native dependencies like @discordjs/opus and sodium.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/voice/README.md#2025-04-09_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\npnpm add --global --production --add-python-to-path windows-build-tools\n```\n\n----------------------------------------\n\nTITLE: Updating ThreadMemberManager.fetch() Parameters in Discord.js\nDESCRIPTION: Shows the parameter structure changes in ThreadMemberManager.fetch() where the second parameter has been merged into the first and boolean shortcuts have been removed.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/changes-in-v14.md#2025-04-09_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\n// The second parameter is merged into the first parameter.\n- threadMemberManager.fetch('1234567890', { cache: false, force: true });\n+ threadMemberManager.fetch({ member: '1234567890', cache: false, force: true });\n\n// The lone boolean has been removed. One must be explicit here.\n- threadMemberManager.fetch(false);\n+ threadMemberManager.fetch({ cache: false });\n```\n\n----------------------------------------\n\nTITLE: Basic Reaction Collector in Discord.js\nDESCRIPTION: Creates a reaction collector that listens for the 👍 emoji from the original message author. It logs collected reactions and the total count.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/collectors.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst collectorFilter = (reaction, user) => {\n\treturn reaction.emoji.name === '👍' && user.id === message.author.id;\n};\n\nconst collector = message.createReactionCollector({ filter: collectorFilter, time: 15_000 });\n\ncollector.on('collect', (reaction, user) => {\n\tconsole.log(`Collected ${reaction.emoji.name} from ${user.tag}`);\n});\n\ncollector.on('end', collected => {\n\tconsole.log(`Collected ${collected.size} items`);\n});\n```\n\n----------------------------------------\n\nTITLE: Basic interactionCreate Event Handler in Discord.js\nDESCRIPTION: Example of a basic interactionCreate event handler that processes chat input commands. This code shows how command interactions are routed to their respective command handlers when received by the bot.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/message-components/interactions.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Events } = require('discord.js');\n\nmodule.exports = {\n\tname: Events.InteractionCreate,\n\tasync execute(interaction) {\n\t\tif (!interaction.isChatInputCommand()) return;\n\n\t\tconst command = interaction.client.commands.get(interaction.commandName);\n\n\t\tif (!command) {\n\t\t\tconsole.error(`No command matching ${interaction.commandName} was found.`);\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tawait command.execute(interaction);\n\t\t} catch (error) {\n\t\t\tconsole.error(`Error executing ${interaction.commandName}`);\n\t\t\tconsole.error(error);\n\t\t}\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Thank You Message with Vue Components\nDESCRIPTION: This HTML snippet uses custom Vue components to render a Discord-like thank you message. It includes an emoji image within the message content.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/whats-new.md#2025-04-09_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<DiscordMessages>\n\t<DiscordMessage profile=\"bot\">\n\t\tThank you to all of those that contributed to the development of discord.js and the guide!\n\t\t<span class=\"emoji-container\">\n\t\t\t<img class=\"emoji-image\" title=\"heart\" alt=\":heart:\" src=\"https://cdn.jsdelivr.net/gh/twitter/twemoji@v14.0.2/assets/72x72/2764.png\" />\n\t\t</span>\n\t</DiscordMessage>\n</DiscordMessages>\n```\n\n----------------------------------------\n\nTITLE: Creating a Channel with Permission Overwrites in JavaScript\nDESCRIPTION: Shows how to create a new channel with specific permission overwrites using discord.js.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/permissions.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { ChannelType, PermissionsBitField } = require('discord.js');\n\nguild.channels.create({\n\tname: 'new-channel',\n\ttype: ChannelType.GuildText,\n\tpermissionOverwrites: [\n\t\t{\n\t\t\tid: interaction.guild.id,\n\t\t\tdeny: [PermissionsBitField.Flags.ViewChannel],\n\t\t},\n\t\t{\n\t\t\tid: interaction.user.id,\n\t\t\tallow: [PermissionsBitField.Flags.ViewChannel],\n\t\t},\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Installing discord.js with npm\nDESCRIPTION: Command to install the discord.js library using npm, which is required for creating a Discord bot.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/preparations/README.md#2025-04-09_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nnpm install discord.js\n```\n\n----------------------------------------\n\nTITLE: Using find() method in Array and Collection in JavaScript\nDESCRIPTION: Demonstrates the usage of the find() method in both Array and Collection, highlighting the similarity in interface but difference in callback parameters.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/collections.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Assume we have an array of users and a collection of the same users.\narray.find(u => u.discriminator === '1000');\ncollection.find(u => u.discriminator === '1000');\n```\n\n----------------------------------------\n\nTITLE: Creating Component Collectors for Select Menus in Discord.js\nDESCRIPTION: Implementation of an InteractionCollector to handle multiple StringSelectMenuInteraction events. This code creates a collector that filters for select menu interactions and responds to each selection made by users.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/message-components/interactions.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await interaction.reply({\n\tcontent: 'Choose your starter!',\n\tcomponents: [row],\n\twithResponse: true,\n});\n\nconst collector = response.resource.message.createMessageComponentCollector({ componentType: ComponentType.StringSelect, time: 3_600_000 });\n\ncollector.on('collect', async i => {\n\tconst selection = i.values[0];\n\tawait i.reply(`${i.user} has selected ${selection}!`);\n});\n```\n\n----------------------------------------\n\nTITLE: Running Scripts with Package Managers\nDESCRIPTION: Commands to run start and lint scripts using different package managers (npm, yarn, pnpm, bun)\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/improving-dev-environment/package-json-scripts.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm run start\nnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Loading and Drawing Background Image\nDESCRIPTION: Code demonstrating how to load and draw a background image onto the canvas, then create and send an attachment.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/canvas.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclient.on(Events.InteractionCreate, async interaction => {\n\t// ...\n\tconst context = canvas.getContext('2d');\n\n\tconst background = await Canvas.loadImage('./wallpaper.jpg');\n\n\t// This uses the canvas dimensions to stretch the image onto the entire canvas\n\tcontext.drawImage(background, 0, 0, canvas.width, canvas.height);\n\n\t// Use the helpful Attachment class structure to process the file for you\n\tconst attachment = new AttachmentBuilder(await canvas.encode('png'), { name: 'profile-image.png' });\n\n\tinteraction.reply({ files: [attachment] });\n});\n```\n\n----------------------------------------\n\nTITLE: Using State Transition Helper in Discord.js Voice\nDESCRIPTION: This code snippet shows how to use the entersState helper function to write sequential logic for state transitions. It attempts to start playback and waits for the player to enter the Playing state within 5 seconds.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/voice/life-cycles.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { AudioPlayerStatus, entersState } = require('@discordjs/voice');\n\nasync function start() {\n\tplayer.play(resource);\n\ttry {\n\t\tawait entersState(player, AudioPlayerStatus.Playing, 5_000);\n\t\t// The player has entered the Playing state within 5 seconds\n\t\tconsole.log('Playback has started!');\n\t} catch (error) {\n\t\t// The player has not entered the Playing state and either:\n\t\t// 1) The 'error' event has been emitted and should be handled\n\t\t// 2) 5 seconds have passed\n\t\tconsole.error(error);\n\t}\n}\n\nvoid start();\n```\n\n----------------------------------------\n\nTITLE: Installing Windows Build Tools with yarn\nDESCRIPTION: Command to install Windows build tools globally with yarn to support native dependencies like @discordjs/opus and sodium.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/voice/README.md#2025-04-09_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nyarn global add --production --add-python-to-path windows-build-tools\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Canvas Context\nDESCRIPTION: Code showing how to create a canvas with specific dimensions and get its context for drawing.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/canvas.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclient.on(Events.InteractionCreate, async interaction => {\n\tif (!interaction.isChatInputCommand()) return;\n\n\tif (interaction.commandName === 'profile') {\n\t\t// Create a 700x250 pixel canvas and get its context\n\t\t// The context will be used to modify the canvas\n\t\tconst canvas = Canvas.createCanvas(700, 250);\n\t\tconst context = canvas.getContext('2d');\n\t\t// ...\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Centered Image Banner\nDESCRIPTION: HTML markup for centering and displaying the discord.js guide banner image\nSOURCE: https://github.com/discordjs/guide/blob/main/README.md#2025-04-09_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div align=\"center\">\n\t<img src=\"guide/images/branding/banner-blurple-small.png\" title=\"discord.js Guide\" alt=\"discord.js Guide\" />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Template Literal Formatting with common-tags\nDESCRIPTION: Shows how to use stripIndents from common-tags to format multi-line strings.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/miscellaneous/useful-packages.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst packageName = 'common-tags';\n\nif (someCondition) {\n\tconst poem = stripIndents`\n\t\tI like ${packageName}.\n\t\tIt makes my strings so pretty,\n\t\tyou should use it too.\n\t`;\n\n\tconsole.log(poem);\n```\n\n----------------------------------------\n\nTITLE: Terminal Styling with Chalk\nDESCRIPTION: Examples of using Chalk for colorful console output.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/miscellaneous/useful-packages.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.error(chalk.redBright('FATAL ERROR'), 'Something really bad happened!');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(chalk.green.bgBrightBlack.underline('This is so pretty.'));\n```\n\n----------------------------------------\n\nTITLE: Deleting a Tag with Discord.js and Sequelize\nDESCRIPTION: This snippet demonstrates how to delete a tag from the database using Sequelize's destroy method. It handles the 'deletetag' command, removing the tag if found or returning an error message if not.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/sequelize/README.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nelse if (command === 'deletetag') {\n\tconst tagName = interaction.options.getString('name');\n\t// equivalent to: DELETE from tags WHERE name = ?;\n\tconst rowCount = await Tags.destroy({ where: { name: tagName } });\n\n\tif (!rowCount) return interaction.reply('That tag doesn\\'t exist.');\n\n\treturn interaction.reply('Tag deleted.');\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Keyv Usage Example\nDESCRIPTION: JavaScript code demonstrating basic Keyv operations like set, get, and clear.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/keyv/README.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n(async () => {\n\t// true\n\tawait keyv.set('foo', 'bar');\n\n\t// bar\n\tawait keyv.get('foo');\n\n\t// undefined\n\tawait keyv.clear();\n\n\t// undefined\n\tawait keyv.get('foo');\n})();\n```\n\n----------------------------------------\n\nTITLE: Installing Discord.js v13 using npm, yarn, or pnpm\nDESCRIPTION: Commands to install Discord.js v13 using different package managers. Includes options for text-only and voice support installations.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/changes-in-v13.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install discord.js # text-only\nnpm install discord.js @discordjs/voice # voice support\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn add discord.js # text-only\nyarn add discord.js @discordjs/voice # voice support\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm add discord.js # text-only\npnpm add discord.js @discordjs/voice # voice support\n```\n\n----------------------------------------\n\nTITLE: Updating Broadcast Evaluation\nDESCRIPTION: Changes to broadcastEval method to use functions instead of strings.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/changes-in-v13.md#2025-04-09_snippet_30\n\nLANGUAGE: diff\nCODE:\n```\n- client.shard.broadcastEval('this.guilds.cache.size')\n+ client.shard.broadcastEval(client => client.guilds.cache.size)\n```\n\n----------------------------------------\n\nTITLE: Bulk Deleting All Discord Bot Commands with REST API in JavaScript\nDESCRIPTION: This snippet shows how to delete all commands in a specific scope by passing an empty array when setting commands. It can delete all guild-based commands for a specific guild or all global commands for the application.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/slash-commands/deleting-commands.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { REST, Routes } = require('discord.js');\nconst { clientId, guildId, token } = require('./config.json');\n\nconst rest = new REST().setToken(token);\n\n// ...\n\n// for guild-based commands\nrest.put(Routes.applicationGuildCommands(clientId, guildId), { body: [] })\n\t.then(() => console.log('Successfully deleted all guild commands.'))\n\t.catch(console.error);\n\n// for global commands\nrest.put(Routes.applicationCommands(clientId), { body: [] })\n\t.then(() => console.log('Successfully deleted all application commands.'))\n\t.catch(console.error);\n```\n\n----------------------------------------\n\nTITLE: Creating Keyv Instances with Different Backends\nDESCRIPTION: JavaScript code demonstrating how to create Keyv instances with various backend configurations.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/keyv/README.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst Keyv = require('keyv');\n\n// One of the following\nconst keyv = new Keyv(); // for in-memory storage\nconst keyv = new Keyv('redis://user:pass@localhost:6379');\nconst keyv = new Keyv('mongodb://user:pass@localhost:27017/dbname');\nconst keyv = new Keyv('sqlite://path/to/database.sqlite');\nconst keyv = new Keyv('postgresql://user:pass@localhost:5432/dbname');\nconst keyv = new Keyv('mysql://user:pass@localhost:3306/dbname');\n```\n\n----------------------------------------\n\nTITLE: Checking and Reinstalling Discord.js using npm, yarn, or pnpm\nDESCRIPTION: Commands to check the installed version of Discord.js and reinstall it if necessary, using different package managers.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/changes-in-v13.md#2025-04-09_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# check version\nnpm list discord.js\n# uninstall and re-install\nnpm uninstall discord.js\nnpm install discord.js\n```\n\nLANGUAGE: sh\nCODE:\n```\n# check version\nyarn list discord.js\n# uninstall and re-install\nyarn remove discord.js\nyarn add discord.js\n```\n\nLANGUAGE: sh\nCODE:\n```\n# check version\npnpm list discord.js\n# uninstall and re-install\npnpm remove discord.js\npnpm add discord.js\n```\n\n----------------------------------------\n\nTITLE: Adding Reactions to Bot Messages in Discord.js\nDESCRIPTION: Code to add both Unicode emoji and custom emoji reactions to a message sent by the bot.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/faq.md#2025-04-09_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\ninteraction.channel.send('My message to react to.').then(sentMessage => {\n\t// Unicode emoji\n\tsentMessage.react('👍');\n\n\t// Custom emoji\n\tsentMessage.react('123456789012345678');\n\tsentMessage.react('<emoji:123456789012345678>');\n\tsentMessage.react('<a:emoji:123456789012345678>');\n\tsentMessage.react('emoji:123456789012345678');\n\tsentMessage.react('a:emoji:123456789012345678');\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Keyv and Backend Packages\nDESCRIPTION: Commands to install Keyv and its backend packages using different package managers.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/keyv/README.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install keyv\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @keyv/redis\nnpm install @keyv/mongo\nnpm install @keyv/sqlite\nnpm install @keyv/postgres\nnpm install @keyv/mysql\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Object Destructuring in JavaScript\nDESCRIPTION: This snippet shows how to use object destructuring to extract properties from objects, including examples with configuration files and Discord.js interaction objects. It demonstrates how destructuring can make code more concise and easier to read.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/es6-syntax.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = require('./config.json');\nconst prefix = config.prefix;\nconst token = config.token;\n\n// With destructuring\nconst { prefix, token } = require('./config.json');\n\n// In Discord.js event handlers\nclient.on(Events.InteractionCreate, interaction => {\n\tconst { commandName } = interaction;\n\n\tif (commandName === 'ping') {\n\t\t// ping command here...\n\t} else if (commandName === 'beep') {\n\t\t// beep command here...\n\t}\n\t// other commands here...\n});\n\n// Renaming variables when destructuring\n// `default` is a reserved keyword\nconst { 'default': defaultValue } = someObject;\n\nconsole.log(defaultValue);\n// 'Some default value here'\n```\n\n----------------------------------------\n\nTITLE: Listing All Tags with Discord.js and Sequelize\nDESCRIPTION: This snippet shows how to retrieve and display a list of all tag names using Sequelize's findAll method. It handles the 'showtags' command, fetching only the 'name' attribute for performance and joining the results into a comma-separated string.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/sequelize/README.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nelse if (command === 'showtags') {\n\t// equivalent to: SELECT name FROM tags;\n\tconst tagList = await Tags.findAll({ attributes: ['name'] });\n\tconst tagString = tagList.map(t => t.name).join(', ') || 'No tags set.';\n\n\treturn interaction.reply(`List of tags: ${tagString}`);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up local development environment for Discord.js guide\nDESCRIPTION: Instructions for cloning the repository, installing dependencies, and running a local development server. This setup allows contributors to work on the guide locally.\nSOURCE: https://github.com/discordjs/guide/blob/main/CONTRIBUTING.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/discordjs/guide.git\ncd guide\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Template Literals vs String Concatenation in JavaScript\nDESCRIPTION: This snippet illustrates the differences between traditional string concatenation and ES6 template literals. It shows how template literals simplify string interpolation, function calls within strings, and multiline string creation.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/es6-syntax.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// variables/function used throughout the examples\nconst username = 'Sanctuary';\nconst password = 'pleasedonthackme';\n\nfunction letsPretendThisDoesSomething() {\n\treturn 'Yay for sample data.';\n}\n\n// regular string concatenation\nconsole.log('Your username is: **' + username + '**.');\nconsole.log('Your password is: **' + password + '**.');\n\nconsole.log('1 + 1 = ' + (1 + 1));\n\nconsole.log('And here\\'s a function call: ' + letsPretendThisDoesSomething());\n\nconsole.log(\n\t'Putting strings on new lines\\n'\n\t+ 'can be a bit painful\\n'\n\t+ 'with string concatenation. :(',\n);\n\n// template literals\nconsole.log(`Your username is: **${username}**.`);\nconsole.log(`Your password is: **${password}**.`);\n\nconsole.log(`1 + 1 = ${1 + 1}`);\n\nconsole.log(`And here's a function call: ${letsPretendThisDoesSomething()}`);\n\nconsole.log(`\n\tPutting strings on new lines\n\tis a breeze\n\twith template literals! :)\n`);\n```\n\n----------------------------------------\n\nTITLE: Finding Online Guild Members in Discord.js\nDESCRIPTION: Code to fetch all guild members with their presences and filter for those with an online status.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/faq.md#2025-04-09_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n// First use guild.members.fetch to make sure all members are cached\nguild.members.fetch({ withPresences: true }).then(fetchedMembers => {\n\tconst totalOnline = fetchedMembers.filter(member => member.presence?.status === PresenceUpdateStatus.Online);\n\t// Now you have a collection with all online member objects in the totalOnline variable\n\tconsole.log(`There are currently ${totalOnline.size} members online in this guild!`);\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Guild Voice State in Discord.js v13\nDESCRIPTION: Shows how to access the guild voice state now that the Guild#voice getter has been removed in favor of accessing it through the client's member object.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/changes-in-v13.md#2025-04-09_snippet_20\n\nLANGUAGE: diff\nCODE:\n```\n- guild.voice\n+ guild.me.voice\n```\n\n----------------------------------------\n\nTITLE: Running linting script for Discord.js guide\nDESCRIPTION: Command to run the linting script, which checks both JavaScript files and JavaScript code blocks inside Markdown files for consistency and adherence to coding standards.\nSOURCE: https://github.com/discordjs/guide/blob/main/CONTRIBUTING.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Using Async/Await for Message Reactions in Discord.js\nDESCRIPTION: Refactoring the Promise chain example to use async/await syntax, making the code more readable and sequential. This approach achieves the same result as Promise chaining but with cleaner syntax.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/async-await.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nclient.on(Events.InteractionCreate, async interaction => {\n\t// ...\n\tif (commandName === 'react') {\n\t\tconst response = await interaction.reply({ content: 'Reacting!', withResponse: true });\n\t\tconst { message } = response.resource;\n\t\tawait message.react('🇦');\n\t\tawait message.react('🇧');\n\t\tawait message.react('🇨');\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables in JavaScript\nDESCRIPTION: Example showing how to access environment variables in a JavaScript application using the global process.env object. This allows retrieving values passed through the command line or environment.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/creating-your-bot/README.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(process.env.A);\nconsole.log(process.env.B);\nconsole.log(process.env.DISCORD_TOKEN);\n```\n\n----------------------------------------\n\nTITLE: Updating Role Creation Method\nDESCRIPTION: Changes to role creation syntax removing nested data object and updating reason parameter.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/changes-in-v13.md#2025-04-09_snippet_28\n\nLANGUAGE: diff\nCODE:\n```\n- guild.roles.create({ data: { name: \"New role\" } }, \"Creating new role\");\n+ guild.roles.create({ name: \"New role\", reason: \"Creating new role\" })\n```\n\n----------------------------------------\n\nTITLE: Using DocsLink Component for discord.js Documentation Links in Markdown\nDESCRIPTION: This snippet shows various ways to use the DocsLink component to create links to the discord.js documentation. It demonstrates linking to different classes, events, methods, and static properties, as well as specifying different documentation sections and branches.\nSOURCE: https://github.com/discordjs/guide/blob/main/CONTRIBUTING.md#2025-04-09_snippet_5\n\nLANGUAGE: md\nCODE:\n```\nDiscord.js docs, latest configured stable branch, `class/Client`:\n<DocsLink path=\"class/Client\" />\n<DocsLink path=\"class/Client\">`Client`</DocsLink>\n<!-- [`Client`](https://discord.js.org/#/docs/discord.js/14.x.y/class/Client) -->\n\nEvents, methods, and static properties:\n<DocsLink path=\"class/Client?scrollTo=e-ready\" />\n<DocsLink path=\"class/Intents?scrollTo=s-FLAGS\" />\n<DocsLink path=\"class/Interaction?scrollTo=isCommand\" type=\"method\" />\n<!-- [`Client#event:ready`](https://discord.js.org/#/docs/discord.js/14.x.y/class/Client) -->\n<!-- [`Intents.FLAGS`](https://discord.js.org/#/docs/discord.js/14.x.y/class/Intents?scrollTo=s-FLAGS) -->\n<!-- [`Interaction#isCommand()`](https://discord.js.org/#/docs/discord.js/14.x.y/class/Interaction?scrollTo=isCommand) -->\n\nDiscord.js docs, v12 branch, `class/Client`:\n<DocsLink section=\"discord.js\" branch=\"v12\" path=\"class/Client\" />\n<!-- [`Client`](https://discord.js.org/#/docs/discord.js/v12/class/Client) -->\n\nCollection docs, stable branch (no `branch` prop set), `Collection:Class#partition`:\n<DocsLink section=\"collection\" path=\"Collection:Class#partition\" type=\"method\" />\n<!-- [`Collection#partition()`](https://discordjs.dev/docs/packages/collection/stable/Collection:Class#partition) -->\n```\n\n----------------------------------------\n\nTITLE: Using Arrow Function Syntax for Async Functions\nDESCRIPTION: Alternative syntax for declaring async functions using arrow function notation. This approach is commonly used with variable assignments and callback functions.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/async-await.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst declaredAsAsync = async () => {\n\t// ...\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring an Async Function in JavaScript\nDESCRIPTION: Example of declaring a function as async using both traditional function syntax and arrow function syntax. Async functions always return a Promise and allow the use of await within their body.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/async-await.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nasync function declaredAsAsync() {\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Starting PM2 Process with File Watch\nDESCRIPTION: This command starts a PM2 process with the watch option, which automatically restarts the process when file changes are detected. Useful for development environments.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/improving-dev-environment/pm2.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npm2 start your-app-name.js --watch\n```\n\n----------------------------------------\n\nTITLE: Quick Project Initialization with npm\nDESCRIPTION: Command to quickly initialize a Node.js project with npm using default values for all prompts via the -y flag.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/preparations/README.md#2025-04-09_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm init -y\n```\n\n----------------------------------------\n\nTITLE: Implementing State Parameter Security\nDESCRIPTION: JavaScript functions for generating and validating OAuth2 state parameters to prevent CSRF attacks\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/oauth2/README.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction generateRandomString() {\n\tlet randomString = '';\n\tconst randomNumber = Math.floor(Math.random() * 10);\n\n\tfor (let i = 0; i < 20 + randomNumber; i++) {\n\t\trandomString += String.fromCharCode(33 + Math.floor(Math.random() * 94));\n\t}\n\n\treturn randomString;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating MessageManager.fetch() Parameters in Discord.js\nDESCRIPTION: Demonstrates the parameter structure change in MessageManager.fetch() where the second parameter has been removed and its options merged into the first parameter object.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/changes-in-v14.md#2025-04-09_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n- messageManager.fetch('1234567890', { cache: false, force: true });\n+ messageManager.fetch({ message: '1234567890', cache: false, force: true });\n```\n\n----------------------------------------\n\nTITLE: Optimizing Audio Resources with Opus Streams in Discord.js\nDESCRIPTION: Shows how to create audio resources from Ogg or WebM Opus streams for improved performance by bypassing FFmpeg conversion.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/voice/audio-resources.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createReadStream } = require('node:fs');\nconst { createAudioResource, StreamType } = require('@discordjs/voice');\n\nlet resource = createAudioResource(createReadStream('my_file.ogg'), {\n\tinputType: StreamType.OggOpus,\n});\n\nresource = createAudioResource(createReadStream('my_file.webm'), {\n\tinputType: StreamType.WebmOpus,\n});\n```\n\n----------------------------------------\n\nTITLE: Standard Project Initialization with pnpm\nDESCRIPTION: Command to initialize a Node.js project with pnpm, which will prompt for project configuration details.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/preparations/README.md#2025-04-09_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\npnpm init\n```\n\n----------------------------------------\n\nTITLE: OAuth2 Authentication Handler\nDESCRIPTION: Enhanced HTML template with JavaScript for handling OAuth2 authentication flow and API requests\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/oauth2/README.md#2025-04-09_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"info\">Hoi!</div>\n<a id=\"login\" style=\"display: none;\" href=\"your-oauth2-URL-here\">Identify Yourself</a>\n<script>\n\twindow.onload = () => {\n\t\tconst fragment = new URLSearchParams(window.location.hash.slice(1));\n\t\tconst [accessToken, tokenType] = [fragment.get('access_token'), fragment.get('token_type')];\n\n\t\tif (!accessToken) {\n\t\t\treturn (document.getElementById('login').style.display = 'block');\n\t\t}\n\n\t\tfetch('https://discord.com/api/users/@me', {\n\t\t\theaders: {\n\t\t\t\tauthorization: `${tokenType} ${accessToken}`,\n\t\t\t},\n\t\t})\n\t\t\t.then(result => result.json())\n\t\t\t.then(response => {\n\t\t\t\tconst { username, discriminator } = response;\n\t\t\t\tdocument.getElementById('info').innerText += ` ${username}#${discriminator}`;\n\t\t\t})\n\t\t\t.catch(console.error);\n\t};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Code Block Formatting in Discord.js\nDESCRIPTION: Demonstrates how to create inline code blocks and regular code blocks with optional syntax highlighting using inlineCode() and codeBlock() functions.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/formatters.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { inlineCode, codeBlock } = require('discord.js');\nconst jsString = 'const value = true;';\n\nconst inline = inlineCode(jsString);\nconst codeblock = codeBlock(jsString);\nconst highlighted = codeBlock('js', jsString);\n```\n\n----------------------------------------\n\nTITLE: Using Async Arrow Functions as Event Listeners in Discord.js\nDESCRIPTION: Example showing how to use async arrow functions as event listeners in Discord.js. This pattern allows using await directly within the event handler function.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/async-await.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclient.on('event', async (first, last) => {\n\t// ...\n});\n```\n\n----------------------------------------\n\nTITLE: Installing discord.js with bun\nDESCRIPTION: Command to install the discord.js library using bun, which is required for creating a Discord bot.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/preparations/README.md#2025-04-09_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nbun add discord.js\n```\n\n----------------------------------------\n\nTITLE: User Data Fetch Implementation\nDESCRIPTION: Code snippet demonstrating how to fetch user data using the obtained OAuth2 access token.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/oauth2/README.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst userResult = await request('https://discord.com/api/users/@me', {\n\theaders: {\n\t\tauthorization: `${oauthData.token_type} ${oauthData.access_token}`,\n\t},\n});\n\nconsole.log(await userResult.body.json());\n```\n\n----------------------------------------\n\nTITLE: Handling Subcommands in a Slash Command Execution in Discord.js\nDESCRIPTION: This code shows how to handle different subcommands within a single slash command. It demonstrates checking which subcommand was used and executing different logic accordingly.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/slash-commands/parsing-options.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n\t// data: new SlashCommandBuilder()...\n\tasync execute(interaction) {\n\t\tif (interaction.options.getSubcommand() === 'user') {\n\t\t\tconst user = interaction.options.getUser('target');\n\n\t\t\tif (user) {\n\t\t\t\tawait interaction.reply(`Username: ${user.username}\\nID: ${user.id}`);\n\t\t\t} else {\n\t\t\t\tawait interaction.reply(`Your username: ${interaction.user.username}\\nYour ID: ${interaction.user.id}`);\n\t\t\t}\n\t\t} else if (interaction.options.getSubcommand() === 'server') {\n\t\t\tawait interaction.reply(`Server name: ${interaction.guild.name}\\nTotal members: ${interaction.guild.memberCount}`);\n\t\t}\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Discord.js Client with Reaction Intents\nDESCRIPTION: Sets up a Discord.js client with the necessary intents for handling messages and reactions. It also includes basic event handlers for client ready and interaction creation.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/reactions.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Client, Events, GatewayIntentBits } = require('discord.js');\n\nconst client = new Client({\n\tintents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessages, GatewayIntentBits.GuildMessageReactions],\n});\n\nclient.once(Events.ClientReady, readyClient => {\n\tconsole.log(`Ready! Logged in as ${readyClient.user.tag}`);\n});\n\nclient.on(Events.InteractionCreate, interaction => {\n\t// ...\n});\n\nclient.login('your-token-goes-here');\n```\n\n----------------------------------------\n\nTITLE: Initializing a Project with pnpm\nDESCRIPTION: Command to initialize a new Node.js project with pnpm, creating a package.json file that tracks project dependencies and information.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/preparations/README.md#2025-04-09_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm init\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth2 Settings with JSON\nDESCRIPTION: Basic configuration file storing Discord client credentials and server port settings\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/oauth2/README.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"clientId\": \"\",\n\t\"clientSecret\": \"\",\n\t\"port\": 53134\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Message Component Classes in Discord.js\nDESCRIPTION: Demonstrates how to update component creation code to use the new Builder-suffixed classes that replace the previous Message-prefixed component classes.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/changes-in-v14.md#2025-04-09_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n- const button = new MessageButton();\n+ const button = new ButtonBuilder();\n\n- const selectMenu = new MessageSelectMenu();\n+ const selectMenu = new StringSelectMenuBuilder();\n\n- const actionRow = new MessageActionRow();\n+ const actionRow = new ActionRowBuilder();\n\n- const textInput = new TextInputComponent();\n+ const textInput = new TextInputBuilder();\n```\n\n----------------------------------------\n\nTITLE: Combining Shard Statistics with Promise.all()\nDESCRIPTION: Shows how to use Promise.all() to fetch and combine guild and member counts across all shards. Uses client.shard.fetchClientValues() for guild counts and broadcastEval() for member counts.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/sharding/README.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst promises = [\n\tclient.shard.fetchClientValues('guilds.cache.size'),\n\tclient.shard.broadcastEval(c => c.guilds.cache.reduce((acc, guild) => acc + guild.memberCount, 0)),\n];\n\nPromise.all(promises)\n\t.then(results => {\n\t\tconst totalGuilds = results[0].reduce((acc, guildCount) => acc + guildCount, 0);\n\t\tconst totalMembers = results[1].reduce((acc, memberCount) => acc + memberCount, 0);\n\t\treturn interaction.reply(`Server count: ${totalGuilds}\\nMember count: ${totalMembers}`);\n\t})\n\t.catch(console.error);\n```\n\n----------------------------------------\n\nTITLE: Comparing ES5 and ES6 String Concatenation in Discord.js\nDESCRIPTION: This snippet compares ES5 string concatenation with ES6 template literals in Discord.js bot responses. It demonstrates how template literals improve readability and ease of writing multiline strings with variable interpolation.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/es6-syntax.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// ES5 version\nelse if (commandName === 'server') {\n\tinteraction.reply('Guild name: ' + interaction.guild.name + '\\nTotal members: ' + interaction.guild.memberCount);\n}\nelse if (commandName === 'user-info') {\n\tinteraction.reply('Your username: ' + interaction.user.username + '\\nYour ID: ' + interaction.user.id);\n}\n\n// ES6 version, using template literals\nelse if (commandName === 'server') {\n\tinteraction.reply(`Guild name: ${interaction.guild.name}\\nTotal members: ${interaction.guild.memberCount}`);\n}\nelse if (commandName === 'user-info') {\n\tinteraction.reply(`Your username: ${interaction.user.username}\\nYour ID: ${interaction.user.id}`);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Cooldown Collection in Discord.js\nDESCRIPTION: Initializes a Collection to store command cooldowns at the client level.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-features/cooldowns.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclient.cooldowns = new Collection();\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Discord.js Class Instance Notation\nDESCRIPTION: Shows how to use instance notation for calling methods on Discord.js classes. The example demonstrates calling the reply method on a BaseInteraction instance.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/notation.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<BaseInteraction>.reply('Hello')\n```\n\n----------------------------------------\n\nTITLE: Managing Webhook Messages\nDESCRIPTION: Examples of fetching, editing, and deleting messages sent through webhooks.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/webhooks.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst message = await webhookClient.fetchMessage('123456789012345678');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst message = await webhook.editMessage('123456789012345678', {\n\tcontent: 'Edited!',\n\tembeds: [embed],\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nawait webhookClient.deleteMessage('123456789012345678');\n```\n\n----------------------------------------\n\nTITLE: Comparing Regular Functions and Arrow Functions in Discord.js\nDESCRIPTION: This snippet compares the syntax of regular functions (ES5) with arrow functions (ES6) in the context of Discord.js event handlers and utility functions. It demonstrates how arrow functions can make code more concise and readable.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/es6-syntax.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// regular functions, full ES5\nclient.once(Events.ClientReady, function() {\n\tconsole.log('Ready!');\n});\n\nclient.on(Events.TypingStart, function(typing) {\n\tconsole.log(typing.user.tag + ' started typing in #' + typing.channel.name);\n});\n\nclient.on(Events.MessageCreate, function(message) {\n\tconsole.log(message.author.tag + ' sent: ' + message.content);\n});\n\nvar doubleAge = function(age) {\n\treturn 'Your age doubled is: ' + (age * 2);\n};\n\n// inside a message collector command\nvar collectorFilter = function(m) {\n\treturn m.content === 'I agree' && !m.author.bot;\n};\n\nvar collector = message.createMessageCollector({ filter: collectorFilter, time: 15_000 });\n\n// arrow functions, full ES6\nclient.once(Events.ClientReady, () => console.log('Ready!'));\n\nclient.on(Events.TypingStart, typing => console.log(`${typing.user.tag} started typing in #${typing.channel.name}`));\n\nclient.on(Events.MessageCreate, message => console.log(`${message.author.tag} sent: ${message.content}`));\n\nconst doubleAge = age => `Your age doubled is: ${age * 2}`;\n\n// inside a message collector command\nconst collectorFilter = m => m.content === 'I agree' && !m.author.bot;\nconst collector = message.createMessageCollector({ filter: collectorFilter, time: 15_000 });\n```\n\n----------------------------------------\n\nTITLE: Handling Cooldown Expiration and User Feedback\nDESCRIPTION: Manages cooldown expiration checks and provides user feedback when commands are on cooldown.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-features/cooldowns.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nif (timestamps.has(interaction.user.id)) {\n\tconst expirationTime = timestamps.get(interaction.user.id) + cooldownAmount;\n\n\tif (now < expirationTime) {\n\t\tconst expiredTimestamp = Math.round(expirationTime / 1_000);\n\t\treturn interaction.reply({ content: `Please wait, you are on a cooldown for \\`${command.data.name}\\`. You can use it again <t:${expiredTimestamp}:R>.`, flags: MessageFlags.Ephemeral });\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Client Event Names in Discord.js v13\nDESCRIPTION: Shows how to update the deprecated 'message' event to the new 'messageCreate' event name, which aligns with Discord's naming conventions.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/changes-in-v13.md#2025-04-09_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n- client.on(\"message\", message => { ... });\n+ client.on(\"messageCreate\", message => { ... });\n```\n\n----------------------------------------\n\nTITLE: Stopping an Audio Player in Discord.js\nDESCRIPTION: Demonstrates how to stop an audio player when it's no longer needed, allowing it to be garbage collected.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/voice/audio-player.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nplayer.stop();\n```\n\n----------------------------------------\n\nTITLE: Traditional Array Item Extraction in JavaScript\nDESCRIPTION: Example showing the traditional way of extracting items from an array using index-based access within a profile command context.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/es6-syntax.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// assuming we're in a `profile` command and have an `args` variable\nconst name = args[0];\nconst age = args[1];\nconst location = args[2];\n```\n\n----------------------------------------\n\nTITLE: Managing Cooldown Timeout and Cleanup\nDESCRIPTION: Sets up automatic cleanup of cooldown entries using setTimeout and manages user timestamp tracking.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-features/cooldowns.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nif (timestamps.has(interaction.user.id)) {\n\t// ...\n}\n\ntimestamps.set(interaction.user.id, now);\nsetTimeout(() => timestamps.delete(interaction.user.id), cooldownAmount);\n```\n\n----------------------------------------\n\nTITLE: Discord.js Generic Type Examples\nDESCRIPTION: Examples of complex type signatures using generics in Discord.js documentation.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/notation.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nArray<String>\nPromise<User>\nArray<Promise<User|GuildMember>>\nCollection<Snowflake, User>\n```\n\n----------------------------------------\n\nTITLE: Package Installation Commands\nDESCRIPTION: Commands for installing the Undici package using different package managers.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/oauth2/README.md#2025-04-09_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnpm install undici\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add undici\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm add undici\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun add undici\n```\n\n----------------------------------------\n\nTITLE: Express Route Handler for Access Code\nDESCRIPTION: Basic Express route handler that logs the OAuth2 access code from the query parameters.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/oauth2/README.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\napp.get('/', (request, response) => {\n\tconsole.log(`The access code is: ${request.query.code}`);\n\treturn response.sendFile('index.html', { root: '.' });\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Windows Build Tools with npm\nDESCRIPTION: Command to install Windows build tools globally with npm to support native dependencies like @discordjs/opus and sodium.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/voice/README.md#2025-04-09_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --global --production --add-python-to-path windows-build-tools\n```\n\n----------------------------------------\n\nTITLE: Converting Permission Numbers to PermissionsBitField Objects\nDESCRIPTION: Demonstrates how to convert permission decimal numbers to a PermissionsBitField object for easier manipulation without using bitwise operations.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/permissions.md#2025-04-09_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst { PermissionsBitField } = require('discord.js');\n\nconst permissions = new PermissionsBitField(268_550_160n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Permission Flags Using toArray() in Discord.js\nDESCRIPTION: This snippet demonstrates how to convert a Permissions object into an array of permission flags using the toArray() method, useful for displaying or manipulating permissions in a more readable format.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/permissions.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst memberPermissions = member.permissions.toArray();\nconst rolePermissions = role.permissions.toArray();\n// output: ['SendMessages', 'AddReactions', 'ChangeNickname', ...]\n```\n\n----------------------------------------\n\nTITLE: Basic OAuth2 HTML Interface\nDESCRIPTION: HTML template for displaying OAuth2 login interface and user information\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/oauth2/README.md#2025-04-09_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<title>My Discord OAuth2 App</title>\n\t</head>\n\t<body>\n\t\t<div id=\"info\">Hoi!</div>\n\t</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Installing Windows Build Tools with bun\nDESCRIPTION: Command to install Windows build tools globally with bun to support native dependencies like @discordjs/opus and sodium.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/voice/README.md#2025-04-09_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nbun add --global --production --add-python-to-path windows-build-tools\n```\n\n----------------------------------------\n\nTITLE: Accessing Collection Values in Discord.js v13\nDESCRIPTION: Shows how to access collection values and keys now that the array() and keyArray() methods have been removed in favor of using the spread operator with iterators.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/changes-in-v13.md#2025-04-09_snippet_13\n\nLANGUAGE: diff\nCODE:\n```\n- collection.array();\n+ [...collection.values()];\n\n- collection.keyArray();\n+ [...collection.keys()];\n```\n\n----------------------------------------\n\nTITLE: Initializing a Project with npm\nDESCRIPTION: Command to initialize a new Node.js project with npm, creating a package.json file that tracks project dependencies and information.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/preparations/README.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm init\n```\n\n----------------------------------------\n\nTITLE: Setting up Express Server for OAuth2\nDESCRIPTION: Express.js server configuration that serves the HTML page and handles OAuth2 redirects\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/oauth2/README.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require('express');\nconst { port } = require('./config.json');\n\nconst app = express();\n\napp.get('/', (request, response) => {\n\treturn response.sendFile('index.html', { root: '.' });\n});\n\napp.listen(port, () => console.log(`App listening at http://localhost:${port}`));\n```\n\n----------------------------------------\n\nTITLE: Installing @discordjs/voice Package with npm\nDESCRIPTION: Command to install the @discordjs/voice package and libsodium-wrappers encryption dependency using npm package manager.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/voice/README.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @discordjs/voice libsodium-wrappers\n```\n\n----------------------------------------\n\nTITLE: Discord.js Bot Skeleton with Sequelize\nDESCRIPTION: Initial skeleton code for a Discord.js bot with Sequelize integration. This includes the basic structure for a bot that responds to commands.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/sequelize/README.md#2025-04-09_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// Require Sequelize\nconst Sequelize = require('sequelize');\n// Require the necessary discord.js classes\nconst { Client, Events, GatewayIntentBits } = require('discord.js');\n\n// Create a new client instance\nconst client = new Client({ intents: [GatewayIntentBits.Guilds] });\n\n// When the client is ready, run this code (only once)\nclient.once(Events.ClientReady, readyClient => {\n\tconsole.log(`Ready! Logged in as ${readyClient.user.tag}`);\n});\n\nclient.on(Events.InteractionCreate, async interaction => {\n\tif (!interaction.isChatInputCommand()) return;\n\n\tconst { commandName } = interaction;\n\t// ...\n});\n\n// Login to Discord with your client's token\nclient.login('your-token-goes-here');\n```\n\n----------------------------------------\n\nTITLE: Installing @discordjs/voice Package with pnpm\nDESCRIPTION: Command to install the @discordjs/voice package and libsodium-wrappers encryption dependency using pnpm package manager.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/voice/README.md#2025-04-09_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @discordjs/voice libsodium-wrappers\n```\n\n----------------------------------------\n\nTITLE: Fetching Complete Data for a Partial Structure in Discord.js\nDESCRIPTION: This example demonstrates how to use the .fetch() method to retrieve the complete data for a partial message. It includes error handling with a try-catch block and shows how to use the full message after fetching.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/partials.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nif (message.partial) {\n\tmessage.fetch()\n\t\t.then(fullMessage => {\n\t\t\tconsole.log(fullMessage.content);\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.log('Something went wrong when fetching the message: ', error);\n\t\t});\n} else {\n\tconsole.log(message.content);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing dotenv Package for Environment Variable Management\nDESCRIPTION: Commands for installing the dotenv package using different package managers. This library simplifies loading environment variables from a .env file into the Node.js environment.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/creating-your-bot/README.md#2025-04-09_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm install dotenv\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn add dotenv\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm add dotenv\n```\n\n----------------------------------------\n\nTITLE: Configuring String Select Menu Options\nDESCRIPTION: Example of configuring a string select menu option with additional properties like description, emoji, and default selection state.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/message-components/select-menus.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst select = new StringSelectMenuBuilder()\n\t.setCustomId('select')\n\t.addOptions(\n\t\tnew StringSelectMenuOptionBuilder()\n\t\t\t.setLabel('Option')\n\t\t\t.setValue('option')\n\t\t\t.setDescription('A selectable option')\n\t\t\t.setEmoji('123456789012345678')\n\t\t\t.setDefault(true),\n\t);\n```\n\n----------------------------------------\n\nTITLE: Adding an Emoji to a Button in Discord.js\nDESCRIPTION: This snippet shows how to add a guild emoji to a button using the setEmoji method. The emoji is specified using its ID.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/message-components/buttons.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst button = new ButtonBuilder()\n\t.setCustomId('primary')\n\t.setLabel('Primary')\n\t.setStyle(ButtonStyle.Primary)\n\t.setEmoji('123456789012345678');\n```\n\n----------------------------------------\n\nTITLE: Using Flag Constants for Permissions in Discord.js v13\nDESCRIPTION: Shows how to update code to use flag constants instead of string literals for bitfield flags, which is the recommended approach in v13.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/changes-in-v13.md#2025-04-09_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n- permissions.has('SEND_MESSAGES')\n+ permissions.has(Permissions.FLAGS.SEND_MESSAGES)\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables with dotenv in JavaScript\nDESCRIPTION: Example showing how to use the dotenv package to load environment variables from a .env file in a JavaScript application. The config() method loads variables into process.env for access throughout the application.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/creating-your-bot/README.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst dotenv = require('dotenv');\n\ndotenv.config();\n\nconsole.log(process.env.A);\nconsole.log(process.env.B);\nconsole.log(process.env.DISCORD_TOKEN);\n```\n\n----------------------------------------\n\nTITLE: Pausing and Unpausing Audio Player in Discord.js\nDESCRIPTION: Shows how to pause an audio player and then unpause it after a specified delay using setTimeout.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/voice/audio-player.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nplayer.pause();\n\n// Unpause after 5 seconds\nsetTimeout(() => player.unpause(), 5_000);\n```\n\n----------------------------------------\n\nTITLE: Using fetchClientValues for Guild Count Across Shards\nDESCRIPTION: Demonstrates how to retrieve guild count from all shards using the fetchClientValues method and reduce the results to get the total count.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/sharding/README.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclient.shard.fetchClientValues('guilds.cache.size').then(console.log);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nclient.shard.fetchClientValues('guilds.cache.size')\n\t.then(results => {\n\t\tconsole.log(`${results.reduce((acc, guildCount) => acc + guildCount, 0)} total guilds`);\n\t})\n\t.catch(console.error);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nclient.on(Events.InteractionCreate, interaction => {\n\t// ...\n\tif (commandName === 'stats') {\n\t\treturn client.shard.fetchClientValues('guilds.cache.size')\n\t\t\t.then(results => {\n\t\t\t\treturn interaction.reply(`Server count: ${results.reduce((acc, guildCount) => acc + guildCount, 0)}`);\n\t\t\t})\n\t\t\t.catch(console.error);\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Message Delete Timeout\nDESCRIPTION: Changes to message deletion with timeout, using setTimeout instead of options object.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/changes-in-v13.md#2025-04-09_snippet_26\n\nLANGUAGE: diff\nCODE:\n```\n- message.delete({ timeout: 10_000 });\n+ setTimeout(() => message.delete(), 10_000);\n```\n\n----------------------------------------\n\nTITLE: Syncing the Database Model on Bot Startup\nDESCRIPTION: Ensuring the database table exists by synchronizing the model when the bot starts up. This creates the table if it doesn't exist.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/sequelize/README.md#2025-04-09_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nclient.once(Events.ClientReady, readyClient => {\n\tTags.sync();\n\tconsole.log(`Logged in as ${readyClient.user.tag}!`);\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Application Command Data in Discord.js v14\nDESCRIPTION: Changes required for defining application command data in v14, including new enum imports and usage for command types and option types.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/changes-in-v14.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n+ const { ApplicationCommandType, ApplicationCommandOptionType } = require('discord.js');\n\nconst command = {\n  name: 'ping',\n- type: 'CHAT_INPUT',\n+ type: ApplicationCommandType.ChatInput,\n  options: [{\n    name: 'option',\n    description: 'A sample option',\n-   type: 'STRING',\n+   type: ApplicationCommandOptionType.String,\n  }],\n};\n```\n\n----------------------------------------\n\nTITLE: Installing undici package\nDESCRIPTION: Commands to install the undici package using different package managers.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/rest-api.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install undici\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn add undici\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm add undici\n```\n\nLANGUAGE: sh\nCODE:\n```\nbun add undici\n```\n\n----------------------------------------\n\nTITLE: Migrating GuildChannel Permission Overwrites\nDESCRIPTION: Updates to permission overwrite handling using the new PermissionOverwriteManager instead of the deprecated overwritePermissions method.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/changes-in-v13.md#2025-04-09_snippet_22\n\nLANGUAGE: diff\nCODE:\n```\n- channel.overwritePermissions([{ id: user.id , allow: ['VIEW_CHANNEL'], deny: ['SEND_MESSAGES'] }]);\n+ channel.permissionOverwrites.set([{ id: user.id , allow: ['VIEW_CHANNEL'], deny: ['SEND_MESSAGES'] }]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Tag Retrieval Command\nDESCRIPTION: Command handler for fetching and displaying a tag's description. Includes incrementing the usage count when a tag is accessed.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/sequelize/README.md#2025-04-09_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nif (commandName === 'addtag') {\n\t// ...\n}\nelse if (command === 'tag') {\n\tconst tagName = interaction.options.getString('name');\n\n\t// equivalent to: SELECT * FROM tags WHERE name = 'tagName' LIMIT 1;\n\tconst tag = await Tags.findOne({ where: { name: tagName } });\n\n\tif (tag) {\n\t\t// equivalent to: UPDATE tags SET usage_count = usage_count + 1 WHERE name = 'tagName';\n\t\ttag.increment('usage_count');\n\n\t\treturn interaction.reply(tag.get('description'));\n\t}\n\n\treturn interaction.reply(`Could not find tag: ${tagName}`);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Context Menu Command Builder in Discord.js\nDESCRIPTION: Demonstrates how to create a context menu command using ContextMenuCommandBuilder and set its type to User command type. This code shows the basic setup for a user-targeted context menu.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/interactions/context-menus.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { ContextMenuCommandBuilder, ApplicationCommandType } = require('discord.js');\n\nconst data = new ContextMenuCommandBuilder()\n\t.setName('User Information')\n\t.setType(ApplicationCommandType.User);\n```\n\n----------------------------------------\n\nTITLE: Fetching Filtered Audit Logs in Discord.js\nDESCRIPTION: Demonstrates how to fetch specific audit logs by type, in this case filtering for invite creation events and limiting to one result.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/audit-logs.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { AuditLogEvent } = require('discord.js');\n\nconst fetchedLogs = await guild.fetchAuditLogs({\n\ttype: AuditLogEvent.InviteCreate,\n\tlimit: 1,\n});\n\nconst firstEntry = fetchedLogs.entries.first();\n```\n\n----------------------------------------\n\nTITLE: Updating WebhookClient Constructor\nDESCRIPTION: Changes to WebhookClient initialization using object parameters instead of separate arguments.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/changes-in-v13.md#2025-04-09_snippet_32\n\nLANGUAGE: diff\nCODE:\n```\n- new WebhookClient(id, token, options);\n+ new WebhookClient({ id, token }, options);\n\n+ new WebhookClient({ url }, options);\n```\n\n----------------------------------------\n\nTITLE: Defining CurrencyShop Model in Sequelize for Discord Currency System\nDESCRIPTION: Creates a CurrencyShop model with name and cost fields. The name field is set to be unique, and cost is required. Timestamps are disabled for this model.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/sequelize/currency.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = (sequelize, DataTypes) => {\n\treturn sequelize.define('currency_shop', {\n\t\tname: {\n\t\t\ttype: DataTypes.STRING,\n\t\t\tunique: true,\n\t\t},\n\t\tcost: {\n\t\t\ttype: DataTypes.INTEGER,\n\t\t\tallowNull: false,\n\t\t},\n\t}, {\n\t\ttimestamps: false,\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Sending Buttons in a Discord.js Interaction Reply\nDESCRIPTION: This code shows how to create an action row with buttons and send them as components in an interaction reply. It includes creating the buttons, adding them to an action row, and sending the reply with the components.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/message-components/buttons.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { ActionRowBuilder, ButtonBuilder, ButtonStyle, SlashCommandBuilder } = require('discord.js');\n\nmodule.exports = {\n\t// data: new SlashCommandBuilder()...\n\tasync execute(interaction) {\n\t\tconst target = interaction.options.getUser('target');\n\t\tconst reason = interaction.options.getString('reason') ?? 'No reason provided';\n\n\t\tconst confirm = new ButtonBuilder()\n\t\t\t.setCustomId('confirm')\n\t\t\t.setLabel('Confirm Ban')\n\t\t\t.setStyle(ButtonStyle.Danger);\n\n\t\tconst cancel = new ButtonBuilder()\n\t\t\t.setCustomId('cancel')\n\t\t\t.setLabel('Cancel')\n\t\t\t.setStyle(ButtonStyle.Secondary);\n\n\t\tconst row = new ActionRowBuilder()\n\t\t\t.addComponents(cancel, confirm);\n\n\t\tawait interaction.reply({\n\t\t\tcontent: `Are you sure you want to ban ${target} for reason: ${reason}?`,\n\t\t\tcomponents: [row],\n\t\t});\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Array Destructuring in JavaScript\nDESCRIPTION: Demonstrates concise array destructuring syntax to extract multiple values from an array in a single line.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/es6-syntax.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst [name, age, location] = args;\n```\n\n----------------------------------------\n\nTITLE: Role Edit API Call - Discord.js\nDESCRIPTION: Example showing equivalent role editing methods using RoleManager and direct Role instance.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/changes-in-v13.md#2025-04-09_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nguild.roles.edit('123456789098765432', options)\n```\n\n----------------------------------------\n\nTITLE: Implementing Balance Check Command in Discord.js\nDESCRIPTION: This snippet demonstrates how to implement a command to check a user's balance. It uses the getBalance() function to retrieve the balance of either the command user or a mentioned user.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/sequelize/currency.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nif (commandName === 'balance') {\n\tconst target = interaction.options.getUser('user') ?? interaction.user;\n\n\treturn interaction.reply(`${target.tag} has ${getBalance(target.id)}💰`);\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking Role Changes for Guild Members in Discord.js\nDESCRIPTION: Code to detect which roles were added or removed from a guild member by comparing the old and new member objects in a guildMemberUpdate event.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/faq.md#2025-04-09_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n// Start by declaring a guildMemberUpdate listener\n// This code should be placed outside of any other listener callbacks to prevent listener nesting\nclient.on(Events.GuildMemberUpdate, (oldMember, newMember) => {\n\t// If the role(s) are present on the old member object but no longer on the new one (i.e role(s) were removed)\n\tconst removedRoles = oldMember.roles.cache.filter(role => !newMember.roles.cache.has(role.id));\n\tif (removedRoles.size > 0) {\n\t\tconsole.log(`The roles ${removedRoles.map(r => r.name)} were removed from ${oldMember.displayName}.`);\n\t}\n\n\t// If the role(s) are present on the new member object but are not on the old one (i.e role(s) were added)\n\tconst addedRoles = newMember.roles.cache.filter(role => !oldMember.roles.cache.has(role.id));\n\tif (addedRoles.size > 0) {\n\t\tconsole.log(`The roles ${addedRoles.map(r => r.name)} were added to ${oldMember.displayName}.`);\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Discord Bot Without Sharding\nDESCRIPTION: Example of a simple Discord bot without sharding implementation, containing a stats command that reports the server count. This needs to be modified to work with sharding.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/sharding/README.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// bot.js\nconst { Client, Events, GatewayIntentBits } = require('discord.js');\n\nconst client = new Client({ intents: [GatewayIntentBits.Guilds] });\n\nclient.on(Events.InteractionCreate, interaction => {\n\tif (!interaction.isChatInputCommand()) return;\n\n\tconst { commandName } = interaction;\n\n\tif (commandName === 'stats') {\n\t\treturn interaction.reply(`Server count: ${client.guilds.cache.size}.`);\n\t}\n});\n\nclient.login('your-token-goes-here');\n```\n\n----------------------------------------\n\nTITLE: Updating Channel Type Checks in Discord.js v13\nDESCRIPTION: Shows how to update channel type checks, as channel types are now uppercase and align with Discord's naming conventions.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/changes-in-v13.md#2025-04-09_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n- if(channel.type === 'text') channel.send('Content');\n+ if(channel.type === 'GUILD_TEXT') channel.send('Content');\n```\n\n----------------------------------------\n\nTITLE: Generating PM2 Startup Script\nDESCRIPTION: This command detects the available init system, generates the config, and enables the startup system for PM2. It's used to set up PM2 to start on system boot.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/improving-dev-environment/pm2.md#2025-04-09_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\npm2 startup\n```\n\n----------------------------------------\n\nTITLE: Updating GuildBanManager create method in Discord.js\nDESCRIPTION: Demonstrates the change from using 'days' to 'deleteMessageSeconds' when creating a ban in Discord.js version 13.11 and later. This change affects how the duration for message deletion is specified.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/changes-in-v13.md#2025-04-09_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\n<GuildBanManager>.create('123456789', {\n-  days: 3\n+  deleteMessageSeconds: 3 * 24 * 60 * 60\n});\n```\n\n----------------------------------------\n\nTITLE: Migrating from MessageAttachment to AttachmentBuilder in Discord.js\nDESCRIPTION: Shows how to update code from using the deprecated MessageAttachment class to the new AttachmentBuilder class, which now uses a different constructor syntax with an options object.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/changes-in-v14.md#2025-04-09_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n- new MessageAttachment(buffer, 'image.png');\n\n+ new AttachmentBuilder(buffer, { name: 'image.png' });\n```\n\n----------------------------------------\n\nTITLE: Updating GuildMember Ban Method\nDESCRIPTION: Changes to the ban method to use an options object instead of a string parameter.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/changes-in-v13.md#2025-04-09_snippet_24\n\nLANGUAGE: diff\nCODE:\n```\n- member.ban('reason')\n+ member.ban({ reason: 'reason' })\n```\n\n----------------------------------------\n\nTITLE: Stopping PM2 Process\nDESCRIPTION: This command stops a running PM2 process without removing it from PM2's interface.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/improving-dev-environment/pm2.md#2025-04-09_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\npm2 stop your-app-name.js\n```\n\n----------------------------------------\n\nTITLE: Timestamp Formatting in Discord.js\nDESCRIPTION: Shows how to format Unix timestamps and dates into Discord time strings using the time() function with optional timestamp styles.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/formatters.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { time, TimestampStyles } = require('discord.js');\nconst date = new Date();\n\nconst timeString = time(date);\nconst relative = time(date, TimestampStyles.RelativeTime);\n```\n\n----------------------------------------\n\nTITLE: Basic package.json Structure\nDESCRIPTION: Default structure of a package.json file after initialization, showing basic metadata and script configuration\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/improving-dev-environment/package-json-scripts.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"name\": \"my-bot\",\n\t\"version\": \"1.0.0\",\n\t\"description\": \"A Discord bot!\",\n\t\"main\": \"index.js\",\n\t\"scripts\": {\n\t\t\"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n\t},\n\t\"keywords\": [],\n\t\"author\": \"\",\n\t\"license\": \"ISC\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Cache for Discord.js Client\nDESCRIPTION: Example of how to implement a custom cache factory function for the Discord.js Client, allowing for more fine-grained control over caching behavior.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/changes-in-v13.md#2025-04-09_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst client = new Client({\n\tmakeCache: manager => {\n\t\tif (manager.name === 'MessageManager') return new LimitedCollection({ maxSize: 0 });\n\t\treturn new Collection();\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Lint Script\nDESCRIPTION: Adding an ESLint script to package.json for code linting\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/improving-dev-environment/package-json-scripts.md#2025-04-09_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"lint\": \"eslint .\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Select User Menu\nDESCRIPTION: Shows how to create a user select menu that allows selecting multiple users using setMinValues and setMaxValues methods.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/message-components/select-menus.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n\t// data: new SlashCommandBuilder()...\n\tasync execute(interaction) {\n\t\tconst userSelect = new UserSelectMenuBuilder()\n\t\t\t.setCustomId('users')\n\t\t\t.setPlaceholder('Select multiple users.')\n\t\t\t.setMinValues(1)\n\t\t\t.setMaxValues(10);\n\n\t\tconst row1 = new ActionRowBuilder()\n\t\t\t.addComponents(userSelect);\n\n\t\tawait interaction.reply({\n\t\t\tcontent: 'Select users:',\n\t\t\tcomponents: [row1],\n\t\t});\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling PM2 Startup on Boot\nDESCRIPTION: This command disables PM2 from starting automatically on system boot.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/improving-dev-environment/pm2.md#2025-04-09_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\npm2 unstartup\n```\n\n----------------------------------------\n\nTITLE: Message Reaction API Call - Discord.js\nDESCRIPTION: Example showing equivalent message reaction methods using MessageManager and direct Message instance.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/changes-in-v13.md#2025-04-09_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nchannel.messages.react('876543210987654321', emoji)\n```\n\n----------------------------------------\n\nTITLE: Setting Both Status and Activity in Discord.js\nDESCRIPTION: Code to set a Discord bot's status and activity simultaneously using the setPresence method.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/faq.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst { PresenceUpdateStatus } = require('discord.js');\n\nclient.user.setPresence({ activities: [{ name: 'activity' }], status: PresenceUpdateStatus.Idle });\n```\n\n----------------------------------------\n\nTITLE: Installing @discordjs/voice Package with yarn\nDESCRIPTION: Command to install the @discordjs/voice package and libsodium-wrappers encryption dependency using yarn package manager.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/voice/README.md#2025-04-09_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @discordjs/voice libsodium-wrappers\n```\n\n----------------------------------------\n\nTITLE: Installing discord.js with pnpm\nDESCRIPTION: Command to install the discord.js library using pnpm, which is required for creating a Discord bot.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/preparations/README.md#2025-04-09_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\npnpm add discord.js\n```\n\n----------------------------------------\n\nTITLE: Migrating REST Event Listeners in Discord.js\nDESCRIPTION: Shows how to update REST event listener code to use the new event names and locations on the client.rest object instead of directly on the client.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/changes-in-v14.md#2025-04-09_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n- client.on('apiResponse', ...);\n+ client.rest.on('response', ...);\n\n- client.on('invalidRequestWarning', ...);\n+ client.rest.on('invalidRequestWarning', ...);\n\n- client.on('rateLimit', ...);\n+ client.rest.on('rateLimited', ...);\n```\n\n----------------------------------------\n\nTITLE: Mentioning a User in a Message in Discord.js\nDESCRIPTION: Code showing two methods for mentioning a user in a message: using template literals and using the mention format with user ID.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/faq.md#2025-04-09_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst user = interaction.options.getUser('target');\nawait interaction.reply(`Hi, ${user}.`);\nawait interaction.followUp(`Hi, <@${user.id}>.`);\n```\n\n----------------------------------------\n\nTITLE: Basic Markdown Formatting in Discord.js\nDESCRIPTION: Demonstrates the usage of basic Markdown formatting functions including bold, italic, strikethrough, underline, spoiler, quote, blockquote, and subtext formatting.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/formatters.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { blockQuote, bold, italic, quote, spoiler, strikethrough, underline, subtext } = require('discord.js');\nconst string = 'Hello!';\n\nconst boldString = bold(string);\nconst italicString = italic(string);\nconst strikethroughString = strikethrough(string);\nconst underlineString = underline(string);\nconst spoilerString = spoiler(string);\nconst quoteString = quote(string);\nconst blockquoteString = blockQuote(string);\nconst subtextString = subtext(string);\n```\n\n----------------------------------------\n\nTITLE: Partial Array Destructuring with Skipped Elements\nDESCRIPTION: Shows how to use array destructuring while skipping unwanted elements using empty comma placeholders.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/es6-syntax.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst [, username, id] = message.content.match(someRegex);\n```\n\n----------------------------------------\n\nTITLE: Defining UserItems Junction Table in Sequelize for Discord Currency System\nDESCRIPTION: Creates a UserItems junction table that links Users and CurrencyShop tables. It tracks how many of each item a user owns with the amount field that defaults to 0.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/sequelize/currency.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = (sequelize, DataTypes) => {\n\treturn sequelize.define('user_item', {\n\t\tuser_id: DataTypes.STRING,\n\t\titem_id: DataTypes.INTEGER,\n\t\tamount: {\n\t\t\ttype: DataTypes.INTEGER,\n\t\t\tallowNull: false,\n\t\t\t'default': 0,\n\t\t},\n\t}, {\n\t\ttimestamps: false,\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Controlling Mentions in Messages in Discord.js\nDESCRIPTION: Code showing how to control which mentions trigger notifications using the allowedMentions option, at both client initialization and per-message level.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/faq.md#2025-04-09_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nnew Client({ allowedMentions: { parse: ['users', 'roles'] } });\n```\n\n----------------------------------------\n\nTITLE: Installing @discordjs/voice Package with bun\nDESCRIPTION: Command to install the @discordjs/voice package and libsodium-wrappers encryption dependency using bun package manager.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/voice/README.md#2025-04-09_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nbun add @discordjs/voice libsodium-wrappers\n```\n\n----------------------------------------\n\nTITLE: Creating WebhookClient Instance in Discord.js\nDESCRIPTION: Examples of instantiating a WebhookClient using either id/token or URL approach.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/webhooks.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst webhookClient = new WebhookClient({ id: 'id', token: 'token' });\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst webhookClient = new WebhookClient({ url: 'https://discord.com/api/webhooks/id/token' });\n```\n\n----------------------------------------\n\nTITLE: Defining Users Model in Sequelize for Discord Currency System\nDESCRIPTION: Creates a Users model with a user_id primary key and balance field. This model disables timestamps and ensures that balance is never null with a default value of 0.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/sequelize/currency.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = (sequelize, DataTypes) => {\n\treturn sequelize.define('users', {\n\t\tuser_id: {\n\t\t\ttype: DataTypes.STRING,\n\t\t\tprimaryKey: true,\n\t\t},\n\t\tbalance: {\n\t\t\ttype: DataTypes.INTEGER,\n\t\t\tdefaultValue: 0,\n\t\t\tallowNull: false,\n\t\t},\n\t}, {\n\t\ttimestamps: false,\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Blocking Specific Users from Using a Bot in Discord.js\nDESCRIPTION: Code to prevent specific users from interacting with the bot by checking their IDs against a blocked users list.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/faq.md#2025-04-09_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst blockedUsers = ['id1', 'id2'];\nclient.on(Events.InteractionCreate, interaction => {\n\tif (blockedUsers.includes(interaction.user.id)) return;\n});\n```\n\n----------------------------------------\n\nTITLE: Hyperlink Formatting in Discord.js\nDESCRIPTION: Shows how to format hyperlinks using hyperlink() for masked markdown links and hideLinkEmbed() to prevent URL embedding.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/formatters.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { hyperlink, hideLinkEmbed } = require('discord.js');\nconst url = 'https://discord.js.org/';\n\nconst link = hyperlink('discord.js', url);\nconst hiddenEmbed = hideLinkEmbed(url);\n```\n\n----------------------------------------\n\nTITLE: Sending Messages via WebhookClient\nDESCRIPTION: Complete example of sending a message with embeds using WebhookClient, including custom username and avatar.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/webhooks.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { EmbedBuilder, WebhookClient } = require('discord.js');\nconst { webhookId, webhookToken } = require('./config.json');\n\nconst webhookClient = new WebhookClient({ id: webhookId, token: webhookToken });\n\nconst embed = new EmbedBuilder()\n\t.setTitle('Some Title')\n\t.setColor(0x00FFFF);\n\nwebhookClient.send({\n\tcontent: 'Webhook test',\n\tusername: 'some-username',\n\tavatarURL: 'https://i.imgur.com/AfFp7pu.png',\n\tembeds: [embed],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Currency Helper Methods in JavaScript\nDESCRIPTION: This snippet defines helper methods for managing user currency. It includes functions to add balance and get balance for users, utilizing a Collection for caching and interacting with the database.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/sequelize/currency.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nasync function addBalance(id, amount) {\n\tconst user = currency.get(id);\n\n\tif (user) {\n\t\tuser.balance += Number(amount);\n\t\treturn user.save();\n\t}\n\n\tconst newUser = await Users.create({ user_id: id, balance: amount });\n\tcurrency.set(id, newUser);\n\n\treturn newUser;\n}\n\nfunction getBalance(id) {\n\tconst user = currency.get(id);\n\treturn user ? user.balance : 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Mention Formatting in Discord.js\nDESCRIPTION: Demonstrates how to format Snowflake IDs into user, channel, and role mentions using respective mention functions.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/formatters.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { channelMention, roleMention, userMention } = require('discord.js');\nconst id = '123456789012345678';\n\nconst channel = channelMention(id);\nconst role = roleMention(id);\nconst user = userMention(id);\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Reactions in Parallel Using Promise.all() in Discord.js\nDESCRIPTION: Optimized implementation for adding multiple reactions when order doesn't matter using Promise.all(). This allows all reactions to be processed simultaneously with a single error handler.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/reactions.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nif (commandName === 'fruits') {\n\tconst message = await interaction.reply({ content: 'Reacting with fruits!' });\n\tPromise.all([\n\t\tmessage.react('🍎'),\n\t\tmessage.react('🍊'),\n\t\tmessage.react('🍇'),\n\t])\n\t\t.catch(error => console.error('One of the emojis failed to react:', error));\n}\n```\n\n----------------------------------------\n\nTITLE: Installing discord.js with yarn\nDESCRIPTION: Command to install the discord.js library using yarn, which is required for creating a Discord bot.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/preparations/README.md#2025-04-09_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nyarn add discord.js\n```\n\n----------------------------------------\n\nTITLE: Multiple Autocomplete Options Handler\nDESCRIPTION: Demonstrates handling multiple autocomplete options in a single command with different suggestion sets.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/slash-commands/autocomplete.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n\tdata: new SlashCommandBuilder()\n\t\t.setName('guide')\n\t\t.setDescription('Search discordjs.guide!')\n\t\t.addStringOption(option =>\n\t\t\toption.setName('query')\n\t\t\t\t.setDescription('Phrase to search for')\n\t\t\t\t.setAutocomplete(true))\n\t\t.addStringOption(option =>\n\t\t\toption.setName('version')\n\t\t\t\t.setDescription('Version to search in')\n\t\t\t\t.setAutocomplete(true)),\n\tasync autocomplete(interaction) {\n\t\tconst focusedOption = interaction.options.getFocused(true);\n\t\tlet choices;\n\n\t\tif (focusedOption.name === 'query') {\n\t\t\tchoices = ['Popular Topics: Threads', 'Sharding: Getting started', 'Library: Voice Connections', 'Interactions: Replying to slash commands', 'Popular Topics: Embed preview'];\n\t\t}\n\n\t\tif (focusedOption.name === 'version') {\n\t\t\tchoices = ['v9', 'v11', 'v12', 'v13', 'v14'];\n\t\t}\n\n\t\tconst filtered = choices.filter(choice => choice.startsWith(focusedOption.value));\n\t\tawait interaction.respond(\n\t\t\tfiltered.map(choice => ({ name: choice, value: choice })),\n\t\t);\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Discord.js Method Parameter Notation\nDESCRIPTION: Example showing how method parameters are documented in Discord.js, using TextChannel's send method as an example.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/notation.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nTextChannel#send(options)\n```\n\n----------------------------------------\n\nTITLE: Initializing a Project with bun\nDESCRIPTION: Command to initialize a new Node.js project with bun, creating a package.json file that tracks project dependencies and information.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/preparations/README.md#2025-04-09_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nbun init\n```\n\n----------------------------------------\n\nTITLE: Creating a .gitignore File for Secure Git Practices\nDESCRIPTION: Example of a .gitignore file that specifies which files and directories Git should exclude from version control. This prevents sensitive information like tokens from being committed to repositories.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/creating-your-bot/README.md#2025-04-09_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nnode_modules\n.env\nconfig.json\n```\n\n----------------------------------------\n\nTITLE: Implementing Boolean Option in Discord.js Command\nDESCRIPTION: Shows how to add a boolean option to control whether the response should be ephemeral.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/slash-commands/advanced-creation.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { SlashCommandBuilder } = require('discord.js');\n\nconst data = new SlashCommandBuilder()\n\t.setName('echo')\n\t.setDescription('Replies with your input!')\n\t.addStringOption(option =>\n\t\toption.setName('input')\n\t\t\t.setDescription('The input to echo back'))\n\t.addBooleanOption(option =>\n\t\toption.setName('ephemeral')\n\t\t\t.setDescription('Whether or not the echo should be ephemeral'));\n```\n\n----------------------------------------\n\nTITLE: Discord.js Class Property Access Examples\nDESCRIPTION: Examples showing how to reference properties, methods, and events using the hash (#) notation in Discord.js documentation.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/notation.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nBaseInteraction#user\nTextChannel#send\nClient#interactionCreate\n```\n\n----------------------------------------\n\nTITLE: Alternative Custom Emoji Reaction Formats in Discord.js\nDESCRIPTION: Demonstrates different formats for passing custom emojis to the react() method, including various string representations of the emoji.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/reactions.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmessage.react('<:blobreach:123456789012345678>');\nmessage.react('blobreach:123456789012345678');\nmessage.react('<a:blobreach:123456789012345678>');\nmessage.react('a:blobreach:123456789012345678');\n```\n\n----------------------------------------\n\nTITLE: Sending Action Rows with Interaction Reply in Discord.js\nDESCRIPTION: This example shows how to send action rows as part of an interaction reply. The components property of the InteractionReplyOptions accepts an array of action rows.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/message-components/action-rows.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst row = new ActionRowBuilder()\n\t.addComponents(component);\n\nawait interaction.reply({ components: [row] });\n```\n\n----------------------------------------\n\nTITLE: Using Extra Utility Methods on Collection in JavaScript\nDESCRIPTION: Demonstrates the usage of additional utility methods provided by the Collection class, such as random(), first(), last(), and sweep().\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/collections.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// A random value.\ncollection.random();\n\n// The first value.\ncollection.first();\n\n// The first 5 values.\ncollection.first(5);\n\n// Similar to `first`, but from the end.\ncollection.last();\ncollection.last(2);\n\n// Removes anything that meets the condition from the collection.\n// Sort of like `filter`, but in-place.\ncollection.sweep(user => user.username === 'Bob');\n```\n\n----------------------------------------\n\nTITLE: Example Discord Bot Token Format\nDESCRIPTION: Demonstrates the correct format of a Discord bot token, which is used for authentication. This is shown as an example and is an invalidated token.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/preparations/setting-up-a-bot-application.md#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nNzkyNzE1NDU0MTk2MDg4ODQy.X-hvzA.Ovy4MCQywSkoMRRclStW4xAYK7I\n```\n\n----------------------------------------\n\nTITLE: Implementing Shop Display Command with Sequelize and Discord.js\nDESCRIPTION: This snippet demonstrates how to implement a command to display all items in the shop. It uses Sequelize to fetch all items from the CurrencyShop model and formats them into a code block for display.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/sequelize/currency.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nelse if (commandName === 'shop') {\n\tconst items = await CurrencyShop.findAll();\n\treturn interaction.reply(codeBlock(items.map(i => `${i.name}: ${i.cost}💰`).join('\\n')));\n}\n```\n\n----------------------------------------\n\nTITLE: Follow-up Messages Implementation\nDESCRIPTION: Shows how to send additional follow-up messages after the initial response\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/slash-commands/response-methods.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nclient.on(Events.InteractionCreate, async interaction => {\n\tif (!interaction.isChatInputCommand()) return;\n\n\tif (interaction.commandName === 'ping') {\n\t\tawait interaction.reply('Pong!');\n\t\tawait interaction.followUp('Pong again!');\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Basic Audit Logs in Discord.js\nDESCRIPTION: Shows how to fetch basic audit logs from a Discord guild and access the first entry. Uses guild.fetchAuditLogs() method which returns a Promise containing the audit logs.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/audit-logs.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst fetchedLogs = await guild.fetchAuditLogs();\nconst firstEntry = fetchedLogs.entries.first();\n```\n\n----------------------------------------\n\nTITLE: Array Formatting with common-tags\nDESCRIPTION: Demonstrates using common-tags to format arrays into readable strings.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/miscellaneous/useful-packages.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst options = ['add', 'delete', 'edit'];\n\n// -> Do you want me to add, delete or edit the channel?\ninteraction.reply(oneLineCommaListsOr`\n\tDo you want me to ${options} the channel?\n`);\n```\n\n----------------------------------------\n\nTITLE: Installing PM2 via Package Managers\nDESCRIPTION: This snippet shows how to install PM2 globally using different package managers like npm, yarn, pnpm, and bun.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/improving-dev-environment/pm2.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --global pm2\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn global add pm2\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm add --global pm2\n```\n\nLANGUAGE: sh\nCODE:\n```\nbun add --global pm2\n```\n\n----------------------------------------\n\nTITLE: Complete package.json with Scripts\nDESCRIPTION: Final package.json configuration with both start and lint scripts added\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/improving-dev-environment/package-json-scripts.md#2025-04-09_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"name\": \"my-bot\",\n\t\"version\": \"1.0.0\",\n\t\"description\": \"A Discord bot!\",\n\t\"main\": \"index.js\",\n\t\"scripts\": {\n\t\t\"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n\t\t\"start\": \"node .\",\n\t\t\"lint\": \"eslint .\"\n\t},\n\t\"keywords\": [],\n\t\"author\": \"\",\n\t\"license\": \"ISC\"\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking User Kicks with Audit Logs in Discord.js\nDESCRIPTION: Event handler that monitors user kicks through audit logs. Identifies both the executor who performed the kick and the target user who was kicked.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/audit-logs.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { AuditLogEvent, Events } = require('discord.js');\n\nclient.on(Events.GuildAuditLogEntryCreate, async auditLog => {\n\t// Define your variables.\n\tconst { action, executorId, targetId } = auditLog;\n\n\t// Check only for kicked users.\n\tif (action !== AuditLogEvent.MemberKick) return;\n\n\t// Ensure the executor is cached.\n\tconst executor = await client.users.fetch(executorId);\n\n\t// Ensure the kicked guild member is cached.\n\tconst kickedUser = await client.users.fetch(targetId);\n\n\t// Now you can log the output!\n\tconsole.log(`${kickedUser.tag} was kicked by ${executor.tag}.`);\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Context Menu Interactions in Discord.js\nDESCRIPTION: Shows how to handle incoming context menu command interactions by checking if the interaction is a user context menu command type. This code demonstrates the basic interaction filtering.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/interactions/context-menus.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclient.on(Events.InteractionCreate, interaction => {\n\tif (!interaction.isUserContextMenuCommand()) return;\n\tconsole.log(interaction);\n});\n```\n\n----------------------------------------\n\nTITLE: Highlighting code changes in Markdown\nDESCRIPTION: Example of how to use code block line highlighting in Markdown to show additions or differences in code snippets. This technique is preferred over diff code blocks for clarity.\nSOURCE: https://github.com/discordjs/guide/blob/main/CONTRIBUTING.md#2025-04-09_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nclient.once(Events.ClientReady, readyClient => {\n\tconsole.log(`Ready! Logged in as ${readyClient.user.tag}`);\n});\n\nclient.on(Events.MessageCreate, message => {\n\tconsole.log(message.content);\n});\n```\n\nLANGUAGE: js\nCODE:\n```\nclient.once(Events.ClientReady, readyClient => {\n\tconsole.log(`Ready! Logged in as ${readyClient.user.tag}`);\n});\n\nclient.on(Events.MessageCreate, message => {\n\tif (message.content === '!ping') {\n\t\tmessage.channel.send('Pong.');\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Sequelize and Dependencies\nDESCRIPTION: Commands to install Discord.js, Sequelize, and SQLite3 using different package managers.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/sequelize/README.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install discord.js sequelize sqlite3\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn add discord.js sequelize sqlite3\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm install discord.js sequelize sqlite3\n```\n\nLANGUAGE: sh\nCODE:\n```\nbun add discord.js sequelize sqlite3\n```\n\n----------------------------------------\n\nTITLE: Managing Discord.js IntentsBitField\nDESCRIPTION: Examples of creating and manipulating IntentsBitField instances, showing how to add and remove specific intents dynamically using the IntentsBitField utility structure.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/intents.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Client, IntentsBitField } = require('discord.js');\n\nconst myIntents = new IntentsBitField();\nmyIntents.add(IntentsBitField.Flags.GuildPresences, IntentsBitField.Flags.GuildMembers);\n\nconst client = new Client({ intents: myIntents });\n\n// other examples:\nconst otherIntents = new IntentsBitField([IntentsBitField.Flags.Guilds, IntentsBitField.Flags.DirectMessages]);\notherIntents.remove([IntentsBitField.Flags.DirectMessages]);\n```\n\n----------------------------------------\n\nTITLE: Using broadcastEval to Find Emojis in Discord.js\nDESCRIPTION: This snippet shows how to use the findEmoji function with broadcastEval to search for an emoji across all shards and handle the result, including displaying the found emoji.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/sharding/extended.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nreturn client.shard.broadcastEval(findEmoji, { context: { nameOrId: emojiNameOrId } })\n\t.then(emojiArray => {\n\t\t// Locate a non falsy result, which will be the emoji in question\n\t\tconst foundEmoji = emojiArray.find(emoji => emoji);\n\t\tif (!foundEmoji) return message.reply('I could not find such an emoji.');\n\t\treturn message.reply(`I have found the ${foundEmoji.animated ? `<${foundEmoji.identifier}>` : `<:${foundEmoji.identifier}> emoji!`}!`);\n\t});\n```\n\n----------------------------------------\n\nTITLE: OAuth2 Token Response Format\nDESCRIPTION: Example JSON response format for a successful OAuth2 token exchange.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/oauth2/README.md#2025-04-09_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"access_token\": \"an access token\",\n\t\"token_type\": \"Bearer\",\n\t\"expires_in\": 604800,\n\t\"refresh_token\": \"a refresh token\",\n\t\"scope\": \"identify\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using GuildInviteManager in Discord.js v13\nDESCRIPTION: Shows how to fetch guild invites using the new GuildInviteManager instead of the removed Guild#fetchInvites method.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/changes-in-v13.md#2025-04-09_snippet_16\n\nLANGUAGE: diff\nCODE:\n```\n- guild.fetchInvites();\n+ guild.invites.fetch();\n```\n\n----------------------------------------\n\nTITLE: Using GuildInviteManager in Discord.js v13\nDESCRIPTION: Shows how to fetch guild invites using the new GuildInviteManager instead of the removed Guild#fetchInvites method.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/changes-in-v13.md#2025-04-09_snippet_16\n\nLANGUAGE: diff\nCODE:\n```\n- guild.fetchInvites();\n+ guild.invites.fetch();\n```\n\n----------------------------------------\n\nTITLE: Example Client Secret Format\nDESCRIPTION: Shows the format of a client secret, which is different from a bot token and should not be used for bot authentication.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/preparations/setting-up-a-bot-application.md#2025-04-09_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nkxbsDRU5UfAaiO7ar9GFMHSlmTwYaIYn\n```\n\n----------------------------------------\n\nTITLE: Reacting with Unicode Emojis in Discord.js\nDESCRIPTION: Demonstrates how to react to a message with a Unicode emoji using the message.react() method. This snippet is part of an interaction handler for a 'react' command.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/reactions.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclient.on(Events.InteractionCreate, async interaction => {\n\tif (!interaction.isChatInputCommand()) return;\n\n\tconst { commandName } = interaction;\n\n\tif (commandName === 'react') {\n\t\tconst response = await interaction.reply({ content: 'You can react with Unicode emojis!', withResponse: true });\n\t\tresponse.resource.message.react('😄');\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Modal Class in Discord.js\nDESCRIPTION: Shows the class name change from Modal to ModalBuilder, following the new naming convention in Discord.js v14.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/changes-in-v14.md#2025-04-09_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n- const modal = new Modal();\n+ const modal = new ModalBuilder();\n```\n\n----------------------------------------\n\nTITLE: Quick Project Initialization with bun\nDESCRIPTION: Command to quickly initialize a Node.js project with bun using default values for all prompts via the -y flag.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/preparations/README.md#2025-04-09_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nbun init -y\n```\n\n----------------------------------------\n\nTITLE: Responding to Modal Submissions in Discord.js\nDESCRIPTION: Demonstrates how to respond to a modal submission by checking the custom ID and sending a reply to confirm the submission was received successfully.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/interactions/modals.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nclient.on(Events.InteractionCreate, async interaction => {\n\tif (!interaction.isModalSubmit()) return;\n\tif (interaction.customId === 'myModal') {\n\t\tawait interaction.reply({ content: 'Your submission was received successfully!' });\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Individual Events in Discord.js Voice\nDESCRIPTION: This snippet demonstrates how to subscribe to specific state change events for VoiceConnection and AudioPlayer. It listens for the 'Ready' state of the connection and the 'Playing' state of the audio player.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/voice/life-cycles.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { VoiceConnectionStatus, AudioPlayerStatus } = require('@discordjs/voice');\n\nconnection.on(VoiceConnectionStatus.Ready, (oldState, newState) => {\n\tconsole.log('Connection is in the Ready state!');\n});\n\nplayer.on(AudioPlayerStatus.Playing, (oldState, newState) => {\n\tconsole.log('Audio player is in the Playing state!');\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Subcommands in Discord.js\nDESCRIPTION: Shows how to implement subcommands for different command variants with specific options.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/slash-commands/advanced-creation.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst { SlashCommandBuilder } = require('discord.js');\n\nconst data = new SlashCommandBuilder()\n\t.setName('info')\n\t.setDescription('Get info about a user or a server!')\n\t.addSubcommand(subcommand =>\n\t\tsubcommand\n\t\t\t.setName('user')\n\t\t\t.setDescription('Info about a user')\n\t\t\t.addUserOption(option => option.setName('target').setDescription('The user')))\n\t.addSubcommand(subcommand =>\n\t\tsubcommand\n\t\t\t.setName('server')\n\t\t\t.setDescription('Info about the server'));\n```\n\n----------------------------------------\n\nTITLE: Node.js Warning Trace Command\nDESCRIPTION: Command to enable tracing of warnings in Node.js CLI for debugging EventEmitter memory leaks.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/errors.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnode --trace-warnings index.js\n```\n\n----------------------------------------\n\nTITLE: TypeScript Action Row Typing for Modals in Discord.js\nDESCRIPTION: Shows how to properly type an ActionRowBuilder for use with modals in TypeScript, specifying the generic parameter to ensure type safety.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/interactions/modals.md#2025-04-09_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n- new ActionRowBuilder()\n+ new ActionRowBuilder<ModalActionRowComponentBuilder>()\n```\n\n----------------------------------------\n\nTITLE: Managing Audio Player State Transitions in Discord.js\nDESCRIPTION: Demonstrates handling errors and state transitions by logging errors and playing the next resource when the player enters the Idle state.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/voice/audio-player.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createAudioResource } = require('@discordjs/voice');\n\nconst resource = createAudioResource('/home/user/voice/music.mp3', {\n\tmetadata: {\n\t\ttitle: 'A good song!',\n\t},\n});\n\nplayer.play(resource);\n\nplayer.on('error', error => {\n\tconsole.error(error);\n});\n\nplayer.on(AudioPlayerStatus.Idle, () => {\n\tplayer.play(getNextResource());\n});\n```\n\n----------------------------------------\n\nTITLE: Creating String Select Menu with Pokemon Options\nDESCRIPTION: Demonstrates how to create a string select menu with custom options using StringSelectMenuBuilder. Creates a Pokemon starter selection menu with three options: Bulbasaur, Charmander, and Squirtle.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/message-components/select-menus.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { StringSelectMenuBuilder, StringSelectMenuOptionBuilder, SlashCommandBuilder } = require('discord.js');\n\nmodule.exports = {\n\t// data: new SlashCommandBuilder()...\n\tasync execute(interaction) {\n\t\tconst select = new StringSelectMenuBuilder()\n\t\t\t.setCustomId('starter')\n\t\t\t.setPlaceholder('Make a selection!')\n\t\t\t.addOptions(\n\t\t\t\tnew StringSelectMenuOptionBuilder()\n\t\t\t\t\t.setLabel('Bulbasaur')\n\t\t\t\t\t.setDescription('The dual-type Grass/Poison Seed Pokémon.')\n\t\t\t\t\t.setValue('bulbasaur'),\n\t\t\t\tnew StringSelectMenuOptionBuilder()\n\t\t\t\t\t.setLabel('Charmander')\n\t\t\t\t\t.setDescription('The Fire-type Lizard Pokémon.')\n\t\t\t\t\t.setValue('charmander'),\n\t\t\t\tnew StringSelectMenuOptionBuilder()\n\t\t\t\t\t.setLabel('Squirtle')\n\t\t\t\t\t.setDescription('The Water-type Tiny Turtle Pokémon.')\n\t\t\t\t\t.setValue('squirtle'),\n\t\t\t);\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Using Unicode Emoji Character Mapping in Discord.js\nDESCRIPTION: This code demonstrates how to use the emojiCharacters module to retrieve Unicode emoji representations of characters. It imports the module and logs examples of accessing different emoji characters.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/faq.md#2025-04-09_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\n// index.js\nconst emojiCharacters = require('./emojiCharacters.js');\n\nconsole.log(emojiCharacters.a); // 🇦\nconsole.log(emojiCharacters[10]); // 🔟\nconsole.log(emojiCharacters['!']); // ❗\n```\n\n----------------------------------------\n\nTITLE: Using Unicode Emoji Character Mapping in Discord.js\nDESCRIPTION: This code demonstrates how to use the emojiCharacters module to retrieve Unicode emoji representations of characters. It imports the module and logs examples of accessing different emoji characters.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/faq.md#2025-04-09_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\n// index.js\nconst emojiCharacters = require('./emojiCharacters.js');\n\nconsole.log(emojiCharacters.a); // 🇦\nconsole.log(emojiCharacters[10]); // 🔟\nconsole.log(emojiCharacters['!']); // ❗\n```\n\n----------------------------------------\n\nTITLE: Sending Select Menu with Action Row\nDESCRIPTION: Shows how to send a select menu by adding it to an ActionRow and including it in an interaction reply. Demonstrates proper component organization and message sending.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/message-components/select-menus.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { ActionRowBuilder, StringSelectMenuBuilder, StringSelectMenuOptionBuilder, SlashCommandBuilder } = require('discord.js');\n\nmodule.exports = {\n\t// data: new SlashCommandBuilder()...\n\tasync execute(interaction) {\n\t\tconst select = new StringSelectMenuBuilder()\n\t\t\t.setCustomId('starter')\n\t\t\t.setPlaceholder('Make a selection!')\n\t\t\t.addOptions(\n\t\t\t\tnew StringSelectMenuOptionBuilder()\n\t\t\t\t\t.setLabel('Bulbasaur')\n\t\t\t\t\t.setDescription('The dual-type Grass/Poison Seed Pokémon.')\n\t\t\t\t\t.setValue('bulbasaur'),\n\t\t\t\tnew StringSelectMenuOptionBuilder()\n\t\t\t\t\t.setLabel('Charmander')\n\t\t\t\t\t.setDescription('The Fire-type Lizard Pokémon.')\n\t\t\t\t\t.setValue('charmander'),\n\t\t\t\tnew StringSelectMenuOptionBuilder()\n\t\t\t\t\t.setLabel('Squirtle')\n\t\t\t\t\t.setDescription('The Water-type Tiny Turtle Pokémon.')\n\t\t\t\t\t.setValue('squirtle'),\n\t\t\t);\n\n\t\tconst row = new ActionRowBuilder()\n\t\t\t.addComponents(select);\n\n\t\tawait interaction.reply({\n\t\t\tcontent: 'Choose your starter!',\n\t\t\tcomponents: [row],\n\t\t});\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Embeds with Plain Objects in Discord.js\nDESCRIPTION: This snippet demonstrates how to create and send an embed message using a plain JavaScript object instead of EmbedBuilder. It includes all the same properties as the EmbedBuilder example.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/embeds.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst exampleEmbed = {\n\tcolor: 0x0099ff,\n\ttitle: 'Some title',\n\turl: 'https://discord.js.org',\n\tauthor: {\n\t\tname: 'Some name',\n\t\ticon_url: 'https://i.imgur.com/AfFp7pu.png',\n\t\turl: 'https://discord.js.org',\n\t},\n\tdescription: 'Some description here',\n\tthumbnail: {\n\t\turl: 'https://i.imgur.com/AfFp7pu.png',\n\t},\n\tfields: [\n\t\t{\n\t\t\tname: 'Regular field title',\n\t\t\tvalue: 'Some value here',\n\t\t},\n\t\t{\n\t\t\tname: '\\u200b',\n\t\t\tvalue: '\\u200b',\n\t\t\tinline: false,\n\t\t},\n\t\t{\n\t\t\tname: 'Inline field title',\n\t\t\tvalue: 'Some value here',\n\t\t\tinline: true,\n\t\t},\n\t\t{\n\t\t\tname: 'Inline field title',\n\t\t\tvalue: 'Some value here',\n\t\t\tinline: true,\n\t\t},\n\t\t{\n\t\t\tname: 'Inline field title',\n\t\t\tvalue: 'Some value here',\n\t\t\tinline: true,\n\t\t},\n\t],\n\timage: {\n\t\turl: 'https://i.imgur.com/AfFp7pu.png',\n\t},\n\ttimestamp: new Date().toISOString(),\n\tfooter: {\n\t\ttext: 'Some footer text here',\n\t\ticon_url: 'https://i.imgur.com/AfFp7pu.png',\n\t},\n};\n\nchannel.send({ embeds: [exampleEmbed] });\n```\n\n----------------------------------------\n\nTITLE: Updating Component Collector Configuration in Discord.js\nDESCRIPTION: This snippet demonstrates how to update the component collector configuration to use the new ComponentType enum values instead of string literals. It imports the ComponentType enum and uses it to specify the button component type.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/changes-in-v14.md#2025-04-09_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n+ const { ComponentType } = require('discord.js');\n\nconst collector = interaction.channel.createMessageComponentCollector({\n\tfilter: collectorFilter,\n-\tcomponentType: 'BUTTON',\n+\tcomponentType: ComponentType.Button,\n\ttime: 20_000\n});\n```\n\n----------------------------------------\n\nTITLE: Reloading Command Implementation in Discord.js\nDESCRIPTION: Implements the core functionality to reload a command by removing it from the require cache, re-requiring the file, and updating the commands collection. Uses try-catch to handle potential errors during the reload process.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-features/reloading-commands.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndelete require.cache[require.resolve(`./${command.data.name}.js`)];\n\ntry {\n\tconst newCommand = require(`./${command.data.name}.js`);\n\tinteraction.client.commands.set(newCommand.data.name, newCommand);\n\tawait interaction.reply(`Command \\`${newCommand.data.name}\\` was reloaded!`);\n} catch (error) {\n\tconsole.error(error);\n\tawait interaction.reply(`There was an error while reloading a command \\`${command.data.name}\\`:\\n\\`${error.message}\\``);\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Discord.js Client Cache Limits\nDESCRIPTION: This example demonstrates how to customize cache limits for specific managers. It extends the default settings and sets the ReactionManager cache limit to 0, effectively disabling reaction caching.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/miscellaneous/cache-customization.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = new Client({\n\tmakeCache: Options.cacheWithLimits({\n\t\t...Options.DefaultMakeCacheSettings,\n\t\tReactionManager: 0,\n\t}),\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing ClientReady Event in Separate File for Discord.js\nDESCRIPTION: This code defines the ClientReady event in a separate file. It exports an object with the event name, a flag to run once, and the execute function.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/creating-your-bot/event-handling.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Events } = require('discord.js');\n\nmodule.exports = {\n\tname: Events.ClientReady,\n\tonce: true,\n\texecute(client) {\n\t\tconsole.log(`Ready! Logged in as ${client.user.tag}`);\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Installing @napi-rs/canvas Package\nDESCRIPTION: Commands for installing the @napi-rs/canvas package using different package managers.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/canvas.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @napi-rs/canvas\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @napi-rs/canvas\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @napi-rs/canvas\n```\n\nLANGUAGE: sh\nCODE:\n```\nbun add @napi-rs/canvas\n```\n\n----------------------------------------\n\nTITLE: Validating Command Existence in Discord.js\nDESCRIPTION: Checks if the command specified for reloading exists in the client's commands collection. Returns an error message if the command is not found.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-features/reloading-commands.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n\t// ...\n\tasync execute(interaction) {\n\t\tconst commandName = interaction.options.getString('command', true).toLowerCase();\n\t\tconst command = interaction.client.commands.get(commandName);\n\n\t\tif (!command) {\n\t\t\treturn interaction.reply(`There is no command with name \\`${commandName}\\`!`);\n\t\t}\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Message Deletion in Discord.js\nDESCRIPTION: Example of handling specific Discord API error codes when deleting messages. Shows both manual error code checking and using Discord.js constants for error handling.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/errors.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmessage.delete().catch(error => {\n\tif (error.code !== 10_008) {\n\t\tconsole.error('Failed to delete the message:', error);\n\t}\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { RESTJSONErrorCodes } = require('discord.js');\n\nmessage.delete().catch(error => {\n\tif (error.code !== RESTJSONErrorCodes.UnknownMessage) {\n\t\tconsole.error('Failed to delete the message:', error);\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Deploying Slash Commands for Discord.js Bot\nDESCRIPTION: This JavaScript script is used to deploy slash commands for a Discord.js bot. It reads command files from a directory structure, prepares them for deployment, and uses the Discord REST API to register the commands with a specific guild.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/creating-your-bot/command-deployment.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { REST, Routes } = require('discord.js');\nconst { clientId, guildId, token } = require('./config.json');\nconst fs = require('node:fs');\nconst path = require('node:path');\n\nconst commands = [];\n// Grab all the command folders from the commands directory you created earlier\nconst foldersPath = path.join(__dirname, 'commands');\nconst commandFolders = fs.readdirSync(foldersPath);\n\nfor (const folder of commandFolders) {\n\t// Grab all the command files from the commands directory you created earlier\n\tconst commandsPath = path.join(foldersPath, folder);\n\tconst commandFiles = fs.readdirSync(commandsPath).filter(file => file.endsWith('.js'));\n\t// Grab the SlashCommandBuilder#toJSON() output of each command's data for deployment\n\tfor (const file of commandFiles) {\n\t\tconst filePath = path.join(commandsPath, file);\n\t\tconst command = require(filePath);\n\t\tif ('data' in command && 'execute' in command) {\n\t\t\tcommands.push(command.data.toJSON());\n\t\t} else {\n\t\t\tconsole.log(`[WARNING] The command at ${filePath} is missing a required \"data\" or \"execute\" property.`);\n\t\t}\n\t}\n}\n\n// Construct and prepare an instance of the REST module\nconst rest = new REST().setToken(token);\n\n// and deploy your commands!\n(async () => {\n\ttry {\n\t\tconsole.log(`Started refreshing ${commands.length} application (/) commands.`);\n\n\t\t// The put method is used to fully refresh all commands in the guild with the current set\n\t\tconst data = await rest.put(\n\t\t\tRoutes.applicationGuildCommands(clientId, guildId),\n\t\t\t{ body: commands },\n\t\t);\n\n\t\tconsole.log(`Successfully reloaded ${data.length} application (/) commands.`);\n\t} catch (error) {\n\t\t// And of course, make sure you catch and log any errors!\n\t\tconsole.error(error);\n\t}\n})();\n```\n\n----------------------------------------\n\nTITLE: Creating a Role with Permissions in JavaScript\nDESCRIPTION: Demonstrates how to create a new role with specific permissions using discord.js.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/permissions.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { PermissionsBitField } = require('discord.js');\n\nguild.roles.create({ name: 'Mod', permissions: [PermissionsBitField.Flags.SendMessages, PermissionsBitField.Flags.KickMembers] });\n```\n\n----------------------------------------\n\nTITLE: Configuring Text Input Options in Discord.js\nDESCRIPTION: Demonstrates how to customize a TextInputBuilder with validation options, placeholders, default values, and required fields. These options help control the user input experience.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/interactions/modals.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst input = new TextInputBuilder()\n\t// set the maximum number of characters to allow\n\t.setMaxLength(1_000)\n\t// set the minimum number of characters required for submission\n\t.setMinLength(10)\n\t// set a placeholder string to prompt the user\n\t.setPlaceholder('Enter some text!')\n\t// set a default value to pre-fill the input\n\t.setValue('Default')\n\t // require a value in this input field\n\t.setRequired(true);\n```\n\n----------------------------------------\n\nTITLE: Git Installation Command for Ubuntu/Debian\nDESCRIPTION: Command to install Git on Ubuntu/Debian systems via apt package manager.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/errors.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install git\n```\n\n----------------------------------------\n\nTITLE: Checking Final Permissions in JavaScript\nDESCRIPTION: Demonstrates how to check the final permissions for a guild member or role in a specific channel using discord.js.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/permissions.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// final permissions for a guild member using permissionsFor\nconst botPermissionsFor = channel.permissionsFor(guild.members.me);\n\n// final permissions for a guild member using permissionsIn\nconst botPermissionsIn = guild.members.me.permissionsIn(channel);\n\n// final permissions for a role\nconst rolePermissions = channel.permissionsFor(role);\n```\n\n----------------------------------------\n\nTITLE: Extracting Data from Modal Submissions in Discord.js\nDESCRIPTION: Shows how to extract values submitted by users in a modal form by using the fields.getTextInputValue() method with the appropriate input custom IDs.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/interactions/modals.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclient.on(Events.InteractionCreate, interaction => {\n\tif (!interaction.isModalSubmit()) return;\n\n\t// Get the data entered by the user\n\tconst favoriteColor = interaction.fields.getTextInputValue('favoriteColorInput');\n\tconst hobbies = interaction.fields.getTextInputValue('hobbiesInput');\n\tconsole.log({ favoriteColor, hobbies });\n});\n```\n\n----------------------------------------\n\nTITLE: Process Warning Event Handler\nDESCRIPTION: JavaScript code to handle and log process warnings using the process.on() event listener.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/errors.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nprocess.on('warning', console.warn);\n```\n\n----------------------------------------\n\nTITLE: Listening for Shard Messages in Discord.js\nDESCRIPTION: This snippet demonstrates how to listen for messages from individual shards after spawning them using the ShardingManager. It logs the evaluated code and result for each shard message.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/sharding/additional-information.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmanager.spawn()\n\t.then(shards => {\n\t\tshards.forEach(shard => {\n\t\t\tshard.on('message', message => {\n\t\t\t\tconsole.log(`Shard[${shard.id}] : ${message._eval} : ${message._result}`);\n\t\t\t});\n\t\t});\n\t})\n\t.catch(console.error);\n```\n\n----------------------------------------\n\nTITLE: Updating Channel Permission Overwrites\nDESCRIPTION: Migration from updateOverwrite to the new PermissionOverwriteManager.edit method for managing channel permissions.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/changes-in-v13.md#2025-04-09_snippet_23\n\nLANGUAGE: diff\nCODE:\n```\n- channel.updateOverwrite(user, { VIEW_CHANNEL: false });\n+ channel.permissionOverwrites.edit(user, { VIEW_CHANNEL: false });\n```\n\n----------------------------------------\n\nTITLE: Handling Audio Resource Errors in Discord.js\nDESCRIPTION: Shows how to handle errors from audio resources using an audio player's error event, which is the recommended approach for most scenarios.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/voice/audio-resources.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createAudioResource, createAudioPlayer } = require('@discordjs/voice');\n\nconst player = createAudioPlayer();\n// An AudioPlayer will always emit an \"error\" event with a .resource property\nplayer.on('error', error => {\n\tconsole.error('Error:', error.message, 'with track', error.resource.metadata.title);\n});\n\nconst resource = createAudioResource('/home/user/voice/music.mp3', {\n\tmetadata: {\n\t\ttitle: 'A good song!',\n\t},\n});\nplayer.play(resource);\n```\n\n----------------------------------------\n\nTITLE: Message Timing with ms Package\nDESCRIPTION: Demonstrates using the ms package to calculate and format time differences between messages.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/miscellaneous/useful-packages.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nawait interaction.reply('Send two messages and I\\'ll tell you how far apart you sent them.');\nconst messages = await interaction.channel.awaitMessages({\n\tfilter: m => m.author.id === interaction.user.id,\n\tmax: 2,\n\ttime: 30e3,\n\terrors: ['time'],\n});\n\nconst difference = messages.last().createdTimestamp - messages.first().createdTimestamp;\nconst formatted = ms(difference);\n\nawait interaction.followUp(`You sent the two messages ${formatted} apart.`);\n```\n\n----------------------------------------\n\nTITLE: Adding Channel Option to Discord.js Command\nDESCRIPTION: Extends the echo command by adding a channel option to specify where the response should be sent.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/slash-commands/advanced-creation.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { SlashCommandBuilder } = require('discord.js');\n\nconst data = new SlashCommandBuilder()\n\t.setName('echo')\n\t.setDescription('Replies with your input!')\n\t.addStringOption(option =>\n\t\toption.setName('input')\n\t\t\t.setDescription('The input to echo back'))\n\t.addChannelOption(option =>\n\t\toption.setName('channel')\n\t\t\t.setDescription('The channel to echo into'));\n```\n\n----------------------------------------\n\nTITLE: Creating Voice Connection in Discord.js\nDESCRIPTION: Demonstrates how to create a voice connection using the @discordjs/voice package. The connection requires channelId, guildId, and voiceAdapterCreator parameters.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/voice/voice-connections.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { joinVoiceChannel } = require('@discordjs/voice');\n\nconst connection = joinVoiceChannel({\n\tchannelId: channel.id,\n\tguildId: channel.guild.id,\n\tadapterCreator: channel.guild.voiceAdapterCreator,\n});\n```\n\n----------------------------------------\n\nTITLE: Duration Formatting with Day.js\nDESCRIPTION: Shows how to compare dates and format durations using Day.js duration plugin.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/miscellaneous/useful-packages.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif (date.isValid()) {\n\tconst now = dayjs();\n\tconst duration = date - now;\n\tconst formatted = dayjs.duration(duration, 'ms').format();\n\n\tif (duration > 0) {\n\t\tinteraction.reply(`The date you gave me is ${formatted} into the future.`);\n\t} else {\n\t\tinteraction.reply(`The date you gave me is ${formatted} into the past.`);\n\t}\n} else {\n\tinteraction.reply('You didn\\'t give me a valid date.');\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Autocomplete Interaction Handler\nDESCRIPTION: Demonstrates basic handling of autocomplete interactions using the interactionCreate event.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/slash-commands/autocomplete.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclient.on(Events.InteractionCreate, interaction => {\n\tif (!interaction.isAutocomplete()) return;\n\t// do autocomplete handling\n});\n```\n\n----------------------------------------\n\nTITLE: Await Reactions in Discord.js\nDESCRIPTION: Demonstrates how to use awaitReactions() to collect up to 4 👍 reactions from the original message author within 60 seconds.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/collectors.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst collectorFilter = (reaction, user) => {\n\treturn reaction.emoji.name === '👍' && user.id === message.author.id;\n};\n\nmessage.awaitReactions({ filter: collectorFilter, max: 4, time: 60_000, errors: ['time'] })\n\t.then(collected => console.log(collected.size))\n\t.catch(collected => {\n\t\tconsole.log(`After a minute, only ${collected.size} out of 4 reacted.`);\n\t});\n```\n\n----------------------------------------\n\nTITLE: Rendering Discord Messages with Vue Components\nDESCRIPTION: This HTML snippet uses custom Vue components to render Discord-like messages. It demonstrates the use of interaction commands and emoji images within the message content.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/whats-new.md#2025-04-09_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<DiscordMessages>\n\t<DiscordMessage profile=\"bot\">\n\t\t<template #interactions>\n\t\t\t<DiscordInteraction\n\t\t\t\tprofile=\"user\"\n\t\t\t\tauthor=\"discord.js\"\n\t\t\t\t:command=\"true\"\n\t\t\t>upgrade</DiscordInteraction>\n\t\t</template>\n\t\tdiscord.js v14 has released and the guide has been updated!\n\t\t<span class=\"emoji-container\">\n\t\t\t<img class=\"emoji-image\" title=\"tada\" alt=\":tada:\" src=\"https://cdn.jsdelivr.net/gh/twitter/twemoji@v14.0.2/assets/72x72/1f389.png\" />\n\t\t</span>\n\t\t<br />\n\t\tThis includes additions and changes made in Discord, such as slash commands and message components.\n\t</DiscordMessage>\n</DiscordMessages>\n```\n\n----------------------------------------\n\nTITLE: Playing Audio with Voice Connection in Discord.js\nDESCRIPTION: Demonstrates how to subscribe a voice connection to an audio player and manage the subscription. Includes timing control for unsubscribing after a delay.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/voice/voice-connections.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Subscribe the connection to the audio player (will play audio on the voice connection)\nconst subscription = connection.subscribe(audioPlayer);\n\n// subscription could be undefined if the connection is destroyed!\nif (subscription) {\n\t// Unsubscribe after 5 seconds (stop playing audio on the voice connection)\n\tsetTimeout(() => subscription.unsubscribe(), 5_000);\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Emoji Container in HTML/CSS\nDESCRIPTION: This snippet defines CSS styles for displaying emoji images inline with text. It sets the dimensions and vertical alignment of emoji images within a container.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/whats-new.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<style scoped>\n.emoji-container {\n\tdisplay: inline-block;\n}\n\n.emoji-container .emoji-image {\n\twidth: 1.375rem;\n\theight: 1.375rem;\n\tvertical-align: bottom;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Attaching Error Handler to Audio Resource in Discord.js\nDESCRIPTION: Demonstrates how to attach an error handler directly to an audio resource, though this approach is not recommended for most use cases.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/voice/audio-resources.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createAudioResource, createAudioPlayer } = require('@discordjs/voice');\n\nconst player = createAudioPlayer();\n\nconst resource = createAudioResource('/home/user/voice/music.mp3', {\n\tmetadata: {\n\t\ttitle: 'A good song!',\n\t},\n});\n\n// Not recommended - listen to errors from the audio player instead for most usecases!\nresource.playStream.on('error', error => {\n\tconsole.error('Error:', error.message, 'with track', resource.metadata.title);\n});\n\nplayer.play(resource);\n```\n\n----------------------------------------\n\nTITLE: Basic Slash Command Reply Implementation\nDESCRIPTION: Shows the basic structure of a slash command with a simple reply response using ChatInputCommandInteraction#reply()\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/slash-commands/response-methods.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n\tdata: new SlashCommandBuilder()\n\t\t.setName('ping')\n\t\t.setDescription('Replies with Pong!'),\n\tasync execute(interaction) {\n\t\tawait interaction.reply('Pong!');\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Constructing Discord Bot Invite URL\nDESCRIPTION: This code snippet shows the basic structure of a Discord bot invite link. It includes the OAuth2 authorization URL, client ID parameter, permissions parameter, and scope for bot and slash commands.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/preparations/adding-your-bot-to-servers.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```:no-line-numbers\nhttps://discord.com/api/oauth2/authorize?client_id=123456789012345678&permissions=0&scope=bot%20applications.commands\n```\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Specification for ActionRowBuilder in Discord.js\nDESCRIPTION: This diff snippet shows how to properly type an ActionRowBuilder when using TypeScript by specifying the component type that the action row will contain using generic parameters.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/message-components/action-rows.md#2025-04-09_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n- new ActionRowBuilder()\n+ new ActionRowBuilder<ButtonBuilder>()\n```\n\n----------------------------------------\n\nTITLE: Converting API Components to Mutable Components in Discord.js\nDESCRIPTION: Shows how to make components received from the API mutable using the ComponentBuilder.from() method, as direct mutation is no longer supported.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/changes-in-v14.md#2025-04-09_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n- const editedButton = receivedButton\n-   .setDisabled(true);\n\n+ const { ButtonBuilder } = require('discord.js');\n+ const editedButton = ButtonBuilder.from(receivedButton)\n+   .setDisabled(true);\n```\n\n----------------------------------------\n\nTITLE: Replacing Channel Permission Overwrites in JavaScript\nDESCRIPTION: Shows how to replace all permission overwrites on a channel with a new set using discord.js.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/popular-topics/permissions.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// copying overwrites from another channel\nchannel.permissionOverwrites.set(otherChannel.permissionOverwrites.cache);\n\n// replacing overwrites with PermissionOverwriteOptions\nchannel.permissionOverwrites.set([\n\t{\n\t\tid: guild.id,\n\t\tdeny: [PermissionsBitField.Flags.ViewChannel],\n\t},\n\t{\n\t\tid: user.id,\n\t\tallow: [PermissionsBitField.Flags.ViewChannel],\n\t},\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring ShardingManager with Command-line Arguments in Discord.js\nDESCRIPTION: This example demonstrates how to create a new ShardingManager instance with custom execArgv and shardArgs. These arguments allow passing command-line options to Node.js and the bot script respectively when running in a sharded environment.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/sharding/additional-information.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst manager = new ShardingManager('./bot.js', {\n\texecArgv: ['--trace-warnings'],\n\tshardArgs: ['--ansi', '--color'],\n\ttoken: 'your-token-goes-here',\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Random Cat Image from API\nDESCRIPTION: Making a request to the random.cat API and processing the JSON response to get a random cat image URL.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/additional-info/rest-api.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst catResult = await request('https://aws.random.cat/meow');\nconst { file } = await catResult.body.json();\n```\n\n----------------------------------------\n\nTITLE: Executing a Slash Command and Parsing Options in Discord.js\nDESCRIPTION: This code demonstrates how to retrieve and use the values of command options in the execute method. It shows accessing the 'target' user and 'reason' string, with a default value for the optional reason.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/slash-commands/parsing-options.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n\t// data: new SlashCommandBuilder()...\n\tasync execute(interaction) {\n\t\tconst target = interaction.options.getUser('target');\n\t\tconst reason = interaction.options.getString('reason') ?? 'No reason provided';\n\n\t\tawait interaction.reply(`Banning ${target.username} for reason: ${reason}`);\n\t\tawait interaction.guild.members.ban(target);\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Finding Emojis Across Shards in Discord.js\nDESCRIPTION: This function demonstrates how to search for an emoji across all shards using broadcastEval. It returns the emoji object if found, or null if not found.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/sharding/extended.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction findEmoji(c, { nameOrId }) {\n\tconst emoji = c.emojis.cache.get(nameOrId) || c.emojis.cache.find(e => e.name.toLowerCase() === nameOrId.toLowerCase());\n\tif (!emoji) return null;\n\t// If you wanted to delete the emoji with discord.js, this is where you would do it. Otherwise, don't include this code.\n\temoji.delete();\n\treturn emoji;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Autocomplete in SlashCommand\nDESCRIPTION: Shows how to configure a slash command with autocomplete functionality by setting up a string option with autocomplete enabled.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/slash-commands/autocomplete.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { SlashCommandBuilder } = require('discord.js');\n\nconst data = new SlashCommandBuilder()\n\t.setName('guide')\n\t.setDescription('Search discordjs.guide!')\n\t.addStringOption(option =>\n\t\toption.setName('query')\n\t\t\t.setDescription('Phrase to search for')\n\t\t\t.setAutocomplete(true));\n```\n\n----------------------------------------\n\nTITLE: Basic ESLint Configuration for Discord.js\nDESCRIPTION: A basic ESLint configuration file (eslint.config.js) for Discord.js projects. It sets up the recommended rules and allows for custom rule definitions.\nSOURCE: https://github.com/discordjs/guide/blob/main/guide/preparations/setting-up-a-linter.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst js = require('@eslint/js');\n\nmodule.exports = [\n\tjs.configs.recommended,\n\t{\n\t\tlanguageOptions: {\n\t\t\tecmaVersion: 'latest',\n\t\t},\n\t\trules: {\n\n\t\t},\n\t},\n];\n```"
  }
]