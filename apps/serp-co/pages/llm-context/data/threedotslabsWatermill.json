[
  {
    "owner": "threedotslabs",
    "repo": "watermill",
    "content": "TITLE: Implementing Publisher and Subscriber Interfaces in Go\nDESCRIPTION: Shows the core interfaces that need to be implemented when working with Watermill: Publisher for sending messages and Subscriber for receiving messages.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/getting-started.md#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype Publisher interface {\n\tPublish(topic string, messages ...*Message) error\n\tClose() error\n}\n\ntype Subscriber interface {\n\tSubscribe(ctx context.Context, topic string) (<-chan *Message, error)\n\tClose() error\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Publisher Interface in Go\nDESCRIPTION: This snippet defines the Publisher interface in Watermill. It includes methods for publishing messages and closing the publisher. The interface is designed to support both synchronous and asynchronous publishing.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/pub-sub.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nPublisher interface {\n    Publish(topic string, messages ...*Message) error\n    Close() error\n```\n\n----------------------------------------\n\nTITLE: Defining Publisher and Subscriber Interfaces in Go\nDESCRIPTION: This code snippet defines the Publisher and Subscriber interfaces used in Watermill. These interfaces specify the methods that must be implemented by all pub/sub implementations.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/README.md#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype Publisher interface {\n\tPublish(topic string, messages ...*Message) error\n\tClose() error\n}\n\ntype Subscriber interface {\n\tSubscribe(ctx context.Context, topic string) (<-chan *Message, error)\n\tClose() error\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Router in Go\nDESCRIPTION: The Run method that starts the Router and all registered handlers, accepting a context for cancellation and returning an error if unsuccessful.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/messages-router.md#2025-04-19_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// Run runs all the handlers of the router with the given context.\n//\n// This is a blocking function.\n// When all handlers have finished (for instance, because they were canceled by the passed context) this function returns.\n// When context is canceled and the router has finished closing, nil is returned.\n// If the closing operation times out, a context.DeadlineExceeded error is returned.\nfunc (r *Router) Run(ctx context.Context) (err error) {\n```\n\n----------------------------------------\n\nTITLE: Configuring Watermill Router (Go)\nDESCRIPTION: Demonstrates how to configure a Watermill Router with plugins and middlewares. This snippet sets up a new router with metrics, correlation ID, and recoverer middleware.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/getting-started.md#2025-04-19_snippet_20\n\nLANGUAGE: go\nCODE:\n```\nrouter, err := message.NewRouter(message.RouterConfig{}, watermill.NewStdLogger(false, false))\nrouter.AddPlugin(plugin.SignalsHandler)\nrouter.AddMiddleware(\n    middleware.CorrelationID,\n    middleware.Retry{MaxRetries: 3}.Middleware,\n    middleware.Recoverer,\n```\n\n----------------------------------------\n\nTITLE: Defining Publisher and Subscriber Interfaces in Go\nDESCRIPTION: This snippet shows the Publisher and Subscriber interfaces that need to be implemented for a custom Pub/Sub in Watermill. It includes methods for publishing messages, subscribing to topics, and initializing subscriptions.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/development/pub-sub-implementing.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Publisher interface {\n\tPublish(topic string, messages ...*Message) error\n\tClose() error\n}\n\ntype Subscriber interface {\n\tSubscribe(ctx context.Context, topic string) (<-chan *Message, error)\n\tClose() error\n}\n\ntype SubscribeInitializer interface {\n\tSubscribe(ctx context.Context, topic string) (o <-chan *Message, err error)\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Messages in Watermill\nDESCRIPTION: Demonstrates how to subscribe to a topic and process incoming messages, including acknowledging them with Ack().\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/getting-started.md#2025-04-19_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmessages, err := subscriber.Subscribe(ctx, \"example.topic\")\nif err != nil {\n\tpanic(err)\n}\n\nfor msg := range messages {\n\tfmt.Printf(\"received message: %s, payload: %s\\n\", msg.UUID, string(msg.Payload))\n\tmsg.Ack()\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Watermill via Go Modules\nDESCRIPTION: Shows how to install the Watermill library using the go get command.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/getting-started.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get -u github.com/ThreeDotsLabs/watermill\n```\n\n----------------------------------------\n\nTITLE: Adding Handlers to Watermill Router (Go)\nDESCRIPTION: Shows how to add handlers to a Watermill Router. This example demonstrates adding a handler that both subscribes to and publishes messages using a GoChannel pub/sub.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/getting-started.md#2025-04-19_snippet_21\n\nLANGUAGE: go\nCODE:\n```\nrouter.AddHandler(\n    \"handler_name\",\n    \"in_topic\",\n    pubSub,\n    \"out_topic\",\n    pubSub,\n    func(msg *message.Message) ([]*message.Message, error) {\n        // handler logic\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up a CQRS Application with Watermill and AMQP\nDESCRIPTION: Example of configuring and connecting CQRS components including command bus, event bus, and AMQP (RabbitMQ) as the message broker. The setup demonstrates how to wire up handlers and create a complete CQRS application.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/cqrs.md#2025-04-19_snippet_17\n\nLANGUAGE: go\nCODE:\n```\nmain() {\n\tlogger := watermill.NewStdLogger(false, false)\n\trouter, err := message.NewRouter(message.RouterConfig{}, logger)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\t// CQRS is built on top of the Watermill\n\t// When creating a CQRS instance, we need to provide the message router and the publisher.\n\t// In this case, we use the AMQP pub/sub.\n\tamqpConfig := amqp.NewDurableQueueConfig(\"amqp://guest:guest@localhost:5672/\")\n\n\tcommandsPublisher, err := amqp.NewPublisher(amqpConfig, logger)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tcommandsSubscriber, err := amqp.NewSubscriber(amqpConfig, logger)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\teventsPublisher, err := amqp.NewPublisher(amqpConfig, logger)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\teventsSubscriber, err := amqp.NewSubscriber(amqpConfig, logger)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\t// OrderBus is responsible for handling PaymentProcess command and publishing OrderPaid event\n\t// EventBus is responsible for distributing events to the specified event handlers\n\tcommandBus, err := cqrs.NewCommandBus(\n\t\tcommandsPublisher,\n\t\tcommandsSubscriber,\n\t\trouter,\n\t\tcqrs.CommandBusConfig{\n\t\t\tGeneratePublishTopic: func(commandName string) string {\n\t\t\t\treturn commandName\n\t\t\t},\n\t\t},\n\t)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\teventBus, err := cqrs.NewEventBus(\n\t\teventsPublisher,\n\t\teventsSubscriber,\n\t\trouter,\n\t\tcqrs.EventBusConfig{\n\t\t\tGeneratePublishTopic: func(eventName string) string {\n\t\t\t\treturn eventName\n\t\t\t},\n\t\t},\n\t)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\t// Now let's register the command handlers and event handlers\n\tbookingHandler := NewBookingHandler(eventBus)\n\tcommandBus.AddHandler(\"CreateBooking\", bookingHandler.CreateBooking)\n\n\t// Create a read model, which is updated when events are published by event bus\n\treport := &BookingsFinancialReport{}\n\teventBus.AddHandler(\"ReportHandler\", \"BookingCreated\", func(ctx context.Context, event *proto.BookingCreated) error {\n\t\treturn report.AddBooking(&domain.Booking{\n\t\t\tID:    event.Id,\n\t\t\tPrice: event.Price,\n\t\t})\n\t})\n\n\terr := router.Run()\n```\n\n----------------------------------------\n\nTITLE: EventBus Interface Definition in Go\nDESCRIPTION: Defines the EventBus interface which is responsible for publishing events to the message bus. It includes configuration options for event marshaling, generating publish topics, and subscription topics.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/cqrs.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// EventBus transports events to event handlers.\ntype EventBus interface {\n\t// Publish sends the event to the message bus.\n\tPublish(ctx context.Context, event interface{}) error\n}\n```\n\nLANGUAGE: go\nCODE:\n```\ntype EventBusConfig struct {\n\t// Marshaler is used to marshal and unmarshal events.\n\t// It is required to be set.\n\tMarshaler CommandEventMarshaler\n\n\t// GeneratePublishTopic generates topic name based on the event type.\n\t//\n\t// By default, it's set to:\n\t//\t func(params GenerateEventPublishTopicParams) string {\n\t//\t\treturn params.EventName\n\t//\t }\n\tGeneratePublishTopic GenerateEventPublishTopicFn\n\n\t// OnPublish is called before sending the message. It can be used to log, add metrics etc.\n\t//\n\t// By default, it's no-op.\n\tOnPublish OnEventPublishFn\n\n\t// Logger instance used to log.\n\t// If not provided, watermill.NopLogger is used.\n\tLogger watermill.LoggerAdapter\n}\n\nfunc (c *EventBusConfig) setDefaults() {\n```\n\n----------------------------------------\n\nTITLE: Router Handler Example in Go\nDESCRIPTION: An example of implementing a handler function in Watermill, showing how to process an incoming message and produce a new one with a modified payload.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/messages-router.md#2025-04-19_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// AddHandler returns a handler who's responsible for marking incoming messages\n// as processed and publishing the resulting messages.\nrouter.AddHandler(\n\t\"struct_handler\",        // handler name, must be unique\n\ttopicIn,                 // topic from which we will read\n\tsubscriber,              // subscriber instance\n\ttopicOut,                // topic to which we will publish\n\tpublisher,               // publisher instance\n\tfunc(msg *message.Message) ([]*message.Message, error) {\n\t\t// All messages need to be ACK'ed outside of the handler\n\t\t// otherwise they will be redelivered by the broker.\n\t\t//\n\t\t// ACK here is a good practice, because if the handler is\n\t\t// unable to process the message then we want to retry.\n\t\t//\n\t\t// For more info or different ACK, see the docs.\n\t\tmsg.Ack()\n\n\t\t// log the received message\n\t\tfmt.Printf(\"received message: %s, payload: %s\\n\", msg.UUID, string(msg.Payload))\n\n\t\t// Create a new message with the previous message's UUID as the payload.\n\t\tnewMessage := message.NewMessage(watermill.NewUUID(), []byte(msg.UUID))\n\n\t\t// Return the new message to be published\n\t\treturn []*message.Message{newMessage}, nil\n\t},\n)\n\nfunc (h *Handler) handleMessage(message *Message, fields LogFields) (messages []*Message, err error) {\n\treturn h(message)\n```\n\n----------------------------------------\n\nTITLE: Handler Function Signature Definition in Go\nDESCRIPTION: The HandlerFunc type definition which processes messages and optionally produces new ones. It takes a message and returns produced messages and an error.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/messages-router.md#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// HandlerFunc is function that processes Messages.\n//\n// msg.Ack() is called automatically when HandlerFunc doesn't return error.\n// You can set up custom Ack/Nack strategy with middlewares.\ntype HandlerFunc func(msg *Message) ([]*Message, error)\n```\n\n----------------------------------------\n\nTITLE: Implementing Message Handler Function in Watermill (Go)\nDESCRIPTION: Shows an example of a message handler function in Watermill. This handler prints the received message and returns it for further processing.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/getting-started.md#2025-04-19_snippet_23\n\nLANGUAGE: go\nCODE:\n```\nfunc printMessages(msg *message.Message) ([]*message.Message, error) {\n    fmt.Printf(\"\\nGot message: %s\\n\", string(msg.Payload))\n    return message.Messages{msg}, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Ack/Nack Reception in Go\nDESCRIPTION: Demonstrates how to handle the reception of Ack or Nack signals using a select statement with channels.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/message.md#2025-04-19_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nselect {\ncase <-msg.Acked():\n\t// handle ack\ncase <-msg.Nacked():\n\t// handle nack\n}\n```\n\n----------------------------------------\n\nTITLE: Transactional Events Using Watermill's Forwarder in Go\nDESCRIPTION: This code snippet demonstrates the recommended approach using Watermill's Forwarder component, which allows storing data and publishing events within a single database transaction, ensuring atomicity and preventing inconsistencies.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/advanced/forwarder.md#2025-04-19_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// 3. Persists data and events in a single transaction\nfunc runLotteryThirdApproach(publisher message.Publisher, db *sql.DB) error {\n\tlotteryID := uuid.NewString()\n\twinnerID := pickRandomWinner() // Simplified, in reality would fetch from DB\n\n\tlotteryEvent := LotteryEvent{\n\t\tID:      lotteryID,\n\t\tWinnerID: winnerID,\n\t}\n\n\t// Begin transaction\n\ttx, err := db.Begin()\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"couldn't begin transaction\")\n\t}\n\tdefer tx.Rollback()\n\n\t// Store winner to a database\n\t_, err = tx.Exec(\n\t\t\"INSERT INTO lottery_winners (lottery_id, winner_id) VALUES (?, ?)\",\n\t\tlotteryID, winnerID,\n\t)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"couldn't store winner\")\n\t}\n\n\t// Publish event that lottery has been completed\n\t// (in the same transaction as database!)\n\tmsg := message.NewMessage(watermill.NewUUID(), marshalEvent(lotteryEvent))\n\terr = publisher.Publish(googleCloudEventTopic, msg)\n```\n\n----------------------------------------\n\nTITLE: Defining Message Handler Function Signature in Go\nDESCRIPTION: This code snippet defines the core function signature used in Watermill for message handling. It takes a pointer to a Message and returns a slice of Message pointers and an error.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/README.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc(*Message) ([]*Message, error)\n```\n\n----------------------------------------\n\nTITLE: Adding No-Publisher Handler to Router in Go\nDESCRIPTION: The AddNoPublisherHandler method signature for adding handlers that don't produce new messages, only consuming and processing incoming ones.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/messages-router.md#2025-04-19_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// AddNoPublisherHandler adds a new handler.\n//\n// handlerName must be unique. It is used for identification and metrics.\nfunc (r *Router) AddNoPublisherHandler(\n\thandlerName string,\n\tsubscriber Subscriber,\n\ttopic string,\n\thandlerFunc NoPublishHandlerFunc,\n) *Handler {\n```\n\n----------------------------------------\n\nTITLE: Publishing Transactional Events in Go\nDESCRIPTION: Example of publishing messages within a database transaction using Watermill.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/pubsubs/sql.md#2025-04-19_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfunc simulateEvents(ctx context.Context, tx *sql.Tx) error {\n\tpub, err := sql.NewPublisher(\n\t\tnil,\n\t\ttx,\n\t\tsql.PublisherConfig{\n\t\t\tSchemaAdapter: postgresSchema,\n\t\t},\n\t\twatermill.NewStdLogger(false, false),\n\t)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn pub.Publish(\n```\n\n----------------------------------------\n\nTITLE: Adding Prometheus Metrics to Watermill Router in Go\nDESCRIPTION: Function to add Prometheus metrics to a Watermill router, wrapping all handlers, publishers, and subscribers with metric collection.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/advanced/metrics.md#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// AddPrometheusRouterMetrics wraps all handlers added to this router with Prometheus metrics.\n// This includes the handlers' publishers and subscribers.\nfunc (b PrometheusMetricsBuilder) AddPrometheusRouterMetrics(r *router.Router) {\n\tb.decoratedRouter = r\n\tr.AddMiddleware(\n\t\tb.routerMetricsMiddleware(),\n\t)\n\tr.AddMiddleware(\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages with Watermill (Go)\nDESCRIPTION: Shows how to publish a message to a specific topic using Watermill's Publish method. Error handling is included to ensure successful publication.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/getting-started.md#2025-04-19_snippet_19\n\nLANGUAGE: go\nCODE:\n```\nerr := publisher.Publish(\"example.topic\", msg)\nif err != nil {\n    panic(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Router with Middleware in Go\nDESCRIPTION: Demonstrates how to set up a Watermill router with middleware that applies to all handlers, as well as handler-specific middleware. The example shows both global middleware configuration and per-handler middleware application.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/middlewares.md#2025-04-19_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nrouter, err := message.NewRouter(message.RouterConfig{}, logger)\nif err != nil {\n\tpanic(err)\n}\n\n// This middleware will be executed for every message sent to the router\nrouter.AddMiddleware(\n\tmiddleware.Recoverer,\n\tmiddleware.CorrelationID,\n)\n\nrouter.AddHandler(\n\t\"handler_1\",\n\tpubSub,\n\t\"input_topic_1\",\n\tpubSub,\n\t\"output_topic\",\n\tmessage.PassthroughHandler,\n)\n\nrouter.AddHandler(\n\t\"handler_2\",\n\t// This middleware will be executed only for messages sent to this handler\n\tmiddleware.Retry{\n\t\tMaxRetries:      3,\n\t\tInitialInterval: time.Millisecond * 100,\n\t\tMaxInterval:     time.Second,\n\t\tMultiplier:      2,\n\t}.Middleware,\n\tpubSub,\n\t\"input_topic_2\",\n\tpubSub,\n\t\"output_topic\",\n\tmessage.PassthroughHandler,\n)\n\n// Now that all handlers are registered, we're running the Router.\n```\n\n----------------------------------------\n\nTITLE: Publishing Events Before Storing Data in Go\nDESCRIPTION: This code snippet demonstrates the first approach to handling events and data persistence, where an event is published before storing data in the database. This approach can lead to inconsistency if database storage fails after event publication.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/advanced/forwarder.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// 1. Publishes event first, persists data later\nfunc runLotteryFirstApproach(publisher message.Publisher, db *sql.DB) error {\n\tlotteryID := uuid.NewString()\n\twinnerID := pickRandomWinner() // Simplified, in reality would fetch from DB\n\n\tlotteryEvent := LotteryEvent{\n\t\tID:      lotteryID,\n\t\tWinnerID: winnerID,\n\t}\n\n\t// Publish event that lottery has been completed\n\tmsg := message.NewMessage(watermill.NewUUID(), marshalEvent(lotteryEvent))\n\terr := publisher.Publish(googleCloudEventTopic, msg)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"couldn't publish event\")\n\t}\n\n\t// Store winner in the database\n\t_, err = db.Exec(\n\t\t\"INSERT INTO lottery_winners (lottery_id, winner_id) VALUES (?, ?)\",\n\t\tlotteryID, winnerID,\n\t)\n\t// In case this fails, it's going to be problematic. Event has been\n\t// emitted, but we have no winner saved in the database.\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"couldn't store winner\")\n\t}\n\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Running FanIn Component in Go\nDESCRIPTION: Demonstrates how to create and run a FanIn component that merges multiple topics. Shows initialization with a publisher, subscriber, and configuration options. Includes error handling and basic setup.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/advanced/fanin.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nlogger := watermill.NewStdLogger(false, false)\n\n// create Publisher and Subscriber\npub, err := // ...\nsub, err := // ...\n\nfi, err := fanin.NewFanIn(\n    sub,\n    pub,\n    fanin.Config{\n        SourceTopics: upstreamTopics,\n        TargetTopic:  downstreamTopic,\n    },\n    logger,\n)\nif err != nil {\n    panic(err)\n}\n\nif err := fi.Run(context.Background()); err != nil {\n    panic(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Running Watermill Router (Go)\nDESCRIPTION: Demonstrates how to start the Watermill Router and handle any potential errors during its execution.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/getting-started.md#2025-04-19_snippet_24\n\nLANGUAGE: go\nCODE:\n```\nif err := router.Run(context.Background()); err != nil {\n    panic(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Watermill with NATS Streaming Pub/Sub\nDESCRIPTION: Example implementation using NATS Streaming as a message broker, showing setup and message processing.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/getting-started.md#2025-04-19_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"time\"\n\n\t\"github.com/ThreeDotsLabs/watermill\"\n\t\"github.com/ThreeDotsLabs/watermill-nats/pkg/nats\"\n\t\"github.com/ThreeDotsLabs/watermill/message\"\n\t\"github.com/nats-io/stan.go\"\n)\n\nfunc main() {\n\tsubscriber, err := nats.NewStreamingSubscriber(\n\t\tnats.StreamingSubscriberConfig{\n\t\t\tClusterID:        \"test-cluster\",\n\t\t\tClientID:         \"example-subscriber\",\n\t\t\tQueueGroup:       \"example\", // subscribes in queue group - only one active subscriber per queue group\n\t\t\tDurableName:      \"my-durable\",\n\t\t\tSubscribersCount: 4, // how many goroutines should consume messages\n\t\t\tCloseTimeout:     time.Minute,\n\t\t\tAckWaitTimeout:   time.Second * 30,\n\t\t\tStanOptions: []stan.Option{\n\t\t\t\tstan.NatsURL(\"nats://nats-streaming:4222\"),\n\t\t\t},\n\t\t\tUnmarshalFunc: nats.DefaultMarshalFunc,\n\t\t},\n\t\twatermill.NewStdLogger(false, false),\n\t)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tmessages, err := subscriber.Subscribe(context.Background(), \"example.topic\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tprocess(messages)\n```\n\nLANGUAGE: go\nCODE:\n```\nfunc process(messages <-chan *message.Message) {\n\tfor msg := range messages {\n\t\tlog.Printf(\"received message: %s, payload: %s\", msg.UUID, string(msg.Payload))\n\n\t\t// we need to Acknowledge that we received and processed the message,\n\t\t// otherwise, it will be resent over and over again.\n\t\tmsg.Ack()\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing SQL Publisher in Go\nDESCRIPTION: Example of initializing a SQL publisher with Watermill.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/pubsubs/sql.md#2025-04-19_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npublisher, err := sql.NewPublisher(\n\tdb,\n\tsql.PublisherConfig{\n\t\tSchemaAdapter: mysqlSchema,\n\t},\n\tlogger,\n)\nif err != nil {\n\tpanic(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Message Handler to Router in Go\nDESCRIPTION: The AddHandler method signature for adding a handler to the Router with a subscriber, publisher, topic configurations, and handler function.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/messages-router.md#2025-04-19_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// AddHandler adds a new handler.\n//\n// handlerName must be unique. It is used for identification and metrics.\nfunc (r *Router) AddHandler(\n\thandlerName string,\n\tsubscriber Subscriber,\n\tpublisher Publisher,\n\ttopic string,\n\tpublishTopic string,\n\thandlerFunc HandlerFunc,\n) *Handler {\n```\n\n----------------------------------------\n\nTITLE: Setting Up Watermill's Forwarder Component in Go\nDESCRIPTION: This code snippet shows how to configure and run the Forwarder component, which listens for messages in the database and forwards them to the message broker, enabling the outbox pattern implementation.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/advanced/forwarder.md#2025-04-19_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Setup the Forwarder component to forward messages from MySQL to Google Pub/Sub\nfwd, err := forwarder.NewForwarder(\n\tmySQLSubscriber,\n\tgoogleCloudPublisher,\n\tforwarder.Config{\n\t\tForwarderTopic:            forwarderTopic,\n\t\tAcknowledgeOnForward:      true,\n\t\tResendOnError:             true,\n\t\tNackOnUnforwardableError:  true,\n\t\tClosePubSubOnForwarderClose: true,\n\t},\n\twatermill.NewStdLogger(false, false),\n)\nif err != nil {\n\tpanic(err)\n}\n\nerr := fwd.Run(ctx)\n```\n\n----------------------------------------\n\nTITLE: Implementing Watermill with AWS SQS Pub/Sub\nDESCRIPTION: Example implementation using AWS SQS as a message broker, showing setup and message processing.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/getting-started.md#2025-04-19_snippet_14\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\n\t\"github.com/ThreeDotsLabs/watermill\"\n\t\"github.com/ThreeDotsLabs/watermill-amazonsqs/pkg/amazonsqs\"\n\t\"github.com/ThreeDotsLabs/watermill/message\"\n\t\"github.com/aws/aws-sdk-go/aws\"\n\t\"github.com/aws/aws-sdk-go/aws/credentials\"\n\t\"github.com/aws/aws-sdk-go/aws/session\"\n)\n\nfunc main() {\n\tawsSession, err := session.NewSession(&aws.Config{\n\t\tRegion:      aws.String(\"us-east-1\"),\n\t\tEndpoint:    aws.String(\"http://localstack:4566\"),\n\t\tCredentials: credentials.NewStaticCredentials(\"access\", \"secret\", \"\"),\n\t})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tsubscriber, err := amazonsqs.NewSubscriber(\n\t\tamazonsqs.SubscriberConfig{\n\t\t\tSession: awsSession,\n\t\t},\n\t\twatermill.NewStdLogger(false, false),\n\t)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tmessages, err := subscriber.Subscribe(context.Background(), \"example.topic\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tprocess(messages)\n```\n\nLANGUAGE: go\nCODE:\n```\nfunc process(messages <-chan *message.Message) {\n\tfor msg := range messages {\n\t\tprintln(\"received message:\", msg.UUID)\n\t\tprintln(\"message metadata:\", msg.Metadata)\n\t\tprintln(\"message payload:\", string(msg.Payload))\n\n\t\t// we need to Acknowledge that we received and processed the message,\n\t\t// otherwise, it will be resent over and over again.\n\t\tmsg.Ack()\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Watermill with AWS SNS Pub/Sub\nDESCRIPTION: Example implementation using AWS SNS for publishing and SQS for subscribing, showing setup and message processing.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/getting-started.md#2025-04-19_snippet_16\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\n\t\"github.com/ThreeDotsLabs/watermill\"\n\t\"github.com/ThreeDotsLabs/watermill-amazonsqs/pkg/amazonsqs\"\n\t\"github.com/ThreeDotsLabs/watermill/message\"\n\t\"github.com/aws/aws-sdk-go/aws\"\n\t\"github.com/aws/aws-sdk-go/aws/credentials\"\n\t\"github.com/aws/aws-sdk-go/aws/session\"\n)\n\nfunc main() {\n\tawsSession, err := session.NewSession(&aws.Config{\n\t\tRegion:      aws.String(\"us-east-1\"),\n\t\tEndpoint:    aws.String(\"http://localstack:4566\"),\n\t\tCredentials: credentials.NewStaticCredentials(\"access\", \"secret\", \"\"),\n\t})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tsubscriber, err := amazonsqs.NewSubscriberWithSns(\n\t\tamazonsqs.SubscriberConfig{\n\t\t\tSession: awsSession,\n\t\t},\n\t\twatermill.NewStdLogger(false, false),\n\t)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tmessages, err := subscriber.Subscribe(context.Background(), \"example.topic\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tgo process(messages)\n```\n\nLANGUAGE: go\nCODE:\n```\nfunc process(messages <-chan *message.Message) {\n\tfor msg := range messages {\n\t\tprintln(\"received message:\", msg.UUID)\n\t\tprintln(\"message metadata:\", msg.Metadata)\n\t\tprintln(\"message payload:\", string(msg.Payload))\n\n\t\t// we need to Acknowledge that we received and processed the message,\n\t\t// otherwise, it will be resent over and over again.\n\t\tmsg.Ack()\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Nack Method for Message in Go\nDESCRIPTION: Implements the Nack method for the Message struct, which indicates failed processing of a message.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/message.md#2025-04-19_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Nack negatively acknowledges the message.\n// Returns true if the negative acknowledge is successful.\nfunc (m *Message) Nack() bool {\n```\n\n----------------------------------------\n\nTITLE: Defining Subscriber Interface in Go\nDESCRIPTION: This snippet defines the Subscriber interface in Watermill. It includes methods for subscribing to topics, receiving messages, and closing the subscriber. The interface is designed to support the Ack/Nack mechanism for message processing.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/pub-sub.md#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nSubscriber interface {\n    Subscribe(ctx context.Context, topic string) (<-chan *Message, error)\n    Close() error\n```\n\n----------------------------------------\n\nTITLE: CommandBus Interface Definition in Go\nDESCRIPTION: Defines the CommandBus interface which is responsible for sending commands to command handlers. It includes configuration options for marshaling, generating publish topics, and publishing behavior.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/cqrs.md#2025-04-19_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// CommandBus transports commands to command handlers.\ntype CommandBus interface {\n\t// Send sends the command to the message bus.\n\tSend(ctx context.Context, cmd interface{}) error\n}\n```\n\nLANGUAGE: go\nCODE:\n```\ntype CommandBusConfig struct {\n\t// Marshaler is used to marshal and unmarshal commands.\n\t// It is required to be set.\n\tMarshaler CommandEventMarshaler\n\n\t// GeneratePublishTopic generates topic name based on the command type.\n\t//\n\t// By default, it's set to:\n\t//\t func(params GenerateCommandPublishTopicParams) string {\n\t//\t\treturn params.CommandName\n\t//\t }\n\tGeneratePublishTopic GenerateCommandPublishTopicFn\n\n\t// OnSend is called before sending the message. It can be used to log, add metrics etc.\n\t//\n\t// By default, it's no-op.\n\tOnSend OnCommandSendFn\n\n\t// Logger instance used to log.\n\t// If not provided, watermill.NopLogger is used.\n\tLogger watermill.LoggerAdapter\n}\n\nfunc (c *CommandBusConfig) setDefaults() {\n```\n\n----------------------------------------\n\nTITLE: EventProcessor Interface Definition in Go\nDESCRIPTION: Defines the EventProcessor interface which handles event processing and routing to appropriate handlers. It includes configuration options for marshaling, generating subscription topics, and event acknowledgment behavior.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/cqrs.md#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// EventProcessor dispatches events to the handlers.\ntype EventProcessor interface {\n\t// AddHandlers adds event handlers to the processor.\n\t// They are started when Run() is executed.\n\tAddHandlers(handlers ...EventHandler) error\n\n\t// Run runs all added event handlers.\n\tRun(ctx context.Context) error\n\n\t// Close closes all additional resources used to instantiate the EventProcessor.\n\tClose() error\n}\n```\n\nLANGUAGE: go\nCODE:\n```\ntype EventProcessorConfig struct {\n\t// GenerateSubscribeTopic generates topic for subscribing to events.\n\t//\n\t// By default, it's set to:\n\t//\t func(params GenerateEventSubscribeTopicParams) string {\n\t//\t\treturn params.EventName\n\t//\t }\n\tGenerateSubscribeTopic GenerateEventSubscribeTopicFn\n\n\t// SubscriberConstructor is used to create subscriber for EventHandler.\n\t// It is called for every EventHandler.\n\t//\n\t// SubscriberConstructor is required.\n\tSubscriberConstructor EventProcessorSubscriberConstructorFn\n\n\t// AckOnUnknownEvent is true, all events not handled by EventHandler will be acknowledged.\n\t// If false, when event will not be handled, event is Nacked.\n\t//\n\t// By default, it's set to false.\n\tAckOnUnknownEvent bool\n\n\t// Marshaler is used to marshal and unmarshal events.\n\t// It is required to be set.\n\tMarshaler CommandEventMarshaler\n\n\t// Logger instance used to log.\n\t// If not provided, watermill.NopLogger is used.\n\tLogger watermill.LoggerAdapter\n\n\t// OnHandle is called before handling the event by the handler.\n\t// It can be used to log, add metrics etc.\n\t//\n\t// By default, it's no-op.\n\tOnHandle OnEventHandleFn\n\n\t// GenerateHandlerGroupSubscribeTopic generates topic for subscribing to events using handler group.\n\t//\n\t// By default, it's not set and handler groups are not supported.\n\tGenerateHandlerGroupSubscribeTopic GenerateEventHandlerGroupSubscribeTopicFn\n\n\t// GroupSubscriberConstructor is used to create subscriber for EventHandler group.\n\t// It is called for every handlers group.\n\t//\n\t// If not set, handler groups are not supported.\n\tGroupSubscriberConstructor EventProcessorGroupSubscriberConstructorFn\n}\n\nfunc (c *EventProcessorConfig) setDefaults() {\n```\n\n----------------------------------------\n\nTITLE: Connecting to RabbitMQ Publisher\nDESCRIPTION: Code snippet demonstrating how to create a new RabbitMQ publisher for Watermill by connecting to an AMQP server.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/pubsubs/amqp.md#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npublisher, err := amqp.NewPublisher(amqp.NewDurablePubSubConfig(amqpURI), watermill.NewStdLogger(false, false))\nif err != nil {\n\tpanic(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Messages in Watermill (Go)\nDESCRIPTION: Demonstrates how to create a new message using Watermill's NewMessage function. The message payload is a byte slice, allowing for various serialization formats.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/getting-started.md#2025-04-19_snippet_18\n\nLANGUAGE: go\nCODE:\n```\nmsg := message.NewMessage(watermill.NewUUID(), []byte(\"Hello, world!\"))\n```\n\n----------------------------------------\n\nTITLE: CommandProcessor Interface Definition in Go\nDESCRIPTION: Defines the CommandProcessor interface which routes commands to appropriate handlers. It includes configuration options for marshaling, generating subscription topics, and command handling.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/cqrs.md#2025-04-19_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// CommandProcessor dispatches commands to command handlers.\ntype CommandProcessor interface {\n\t// AddHandlers adds command handlers to the processor.\n\t// They are started when Run() is executed.\n\tAddHandlers(handlers ...CommandHandler) error\n\n\t// Run runs all added command handlers.\n\tRun(ctx context.Context) error\n\n\t// Close closes all additional resources used to instantiate the CommandProcessor.\n\tClose() error\n}\n```\n\nLANGUAGE: go\nCODE:\n```\ntype CommandProcessorConfig struct {\n\t// GenerateSubscribeTopic generates topic for subscribing to command.\n\t//\n\t// By default, it's set to:\n\t//\t func(params GenerateCommandSubscribeTopicParams) string {\n\t//\t\treturn params.CommandName\n\t//\t }\n\tGenerateSubscribeTopic GenerateCommandSubscribeTopicFn\n\n\t// SubscriberConstructor is used to create subscriber for CommandHandler.\n\t// It is called for every CommandHandler.\n\t//\n\t// SubscriberConstructor is required.\n\tSubscriberConstructor CommandProcessorSubscriberConstructorFn\n\n\t// Marshaler is used to marshal and unmarshal commands.\n\t// It is required to be set.\n\tMarshaler CommandEventMarshaler\n\n\t// Logger instance used to log.\n\t// If not provided, watermill.NopLogger is used.\n\tLogger watermill.LoggerAdapter\n\n\t// OnHandle is called before handling the command by the handler.\n\t// It can be used to log, add metrics etc.\n\t//\n\t// By default, it's no-op.\n\tOnHandle OnCommandHandleFn\n\n\t// AckCommandErrors determines if processor should acknowledge messages when handler returns error or panic.\n\t// If set to false (default), messages won't be acknowledged and will be re-delivered.\n\t//\n\t// By default, it's set to false.\n\tAckCommandErrors bool\n}\n\nfunc (c *CommandProcessorConfig) setDefaults() {\n```\n\n----------------------------------------\n\nTITLE: EventHandler Interface Definition in Go\nDESCRIPTION: Defines the EventHandler interface which is responsible for handling specific event types. It includes methods for event type identification and handling events in context.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/cqrs.md#2025-04-19_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// EventHandler receives events defined by NewEvent and handles them with the Handle method.\ntype EventHandler interface {\n\t// HandlerName is the name used in metrics, logs etc.\n\tHandlerName() string\n\n\t// NewEvent should return the type of event which this handler should handle.\n\t// For example, return &MyEvent{}\n\tNewEvent() interface{}\n\n\t// Handle is the actual handling of the event.\n\tHandle(ctx context.Context, event interface{}) error\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to RabbitMQ Subscriber\nDESCRIPTION: Code snippet demonstrating how to create a new RabbitMQ subscriber for Watermill by connecting to an AMQP server.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/pubsubs/amqp.md#2025-04-19_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nsubscriber, err := amqp.NewSubscriber(amqp.NewDurablePubSubConfig(amqpURI), watermill.NewStdLogger(false, false))\nif err != nil {\n\tpanic(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Generic Group Event Handler in Watermill CQRS\nDESCRIPTION: Creation of a generic group event handler for processing multiple events. This approach is useful when you need to handle many events without creating individual handlers for each event type.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/cqrs.md#2025-04-19_snippet_12\n\nLANGUAGE: go\nCODE:\n```\ncqrs.NewGroupEventHandler(\"posts_read_model\", func(ctx context.Context, event *AddedPost) error {\n\treturn postsReadModel.Add(event.PostUUID())\n}),\n```\n\n----------------------------------------\n\nTITLE: CommandEventMarshaler Interface Definition in Go\nDESCRIPTION: Defines the CommandEventMarshaler interface which is responsible for marshaling and unmarshaling commands and events between their Go struct representations and message formats.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/cqrs.md#2025-04-19_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// CommandEventMarshaler marshals and unmarshals commands and events to/from messages.\ntype CommandEventMarshaler interface {\n\t// Marshal marshals command or event to message.\n\tMarshal(v interface{}) (*message.Message, error)\n\n\t// Unmarshal unmarshals message to command or event.\n\tUnmarshal(msg *message.Message, v interface{}) error\n\n\t// Name returns the name of the command or event based on the type.\n\tName(v interface{}) string\n\n\t// NameFromMessage returns the name of the command or event based on the message.\n\tNameFromMessage(msg *message.Message) string\n}\n```\n\n----------------------------------------\n\nTITLE: Sending a Command Example in Go\nDESCRIPTION: Example of creating and sending a BookRoom command using the CommandBus. This demonstrates how to initiate actions in a CQRS system.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/cqrs.md#2025-04-19_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nbookRoomCmd := &BookRoom{\n\tRoomID: \"3\",\n\tGuest:  \"John\",\n}\n\nlogger.Info(\"Sending BookRoom command\", watermill.LogFields{\n\t\"room_id\": bookRoomCmd.RoomID,\n\t\"guest\":   bookRoomCmd.Guest,\n})\n\nerr = commandBus.Send(context.Background(), bookRoomCmd)\nif err != nil {\n\tpanic(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Google Cloud Pub/Sub Publisher in Go\nDESCRIPTION: Code snippet demonstrating how to create a Google Cloud Pub/Sub publisher using Watermill. It uses the NewPublisher function with a PublisherConfig.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/pubsubs/googlecloud.md#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npublisher, err := googlecloud.NewPublisher(\n\tgooglecloud.PublisherConfig{\n\t\tProjectID: os.Getenv(\"PUBSUB_PROJECT_ID\"),\n\t},\n\twatermill.NewStdLogger(false, false),\n)\nif err != nil {\n\tpanic(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Kafka Publisher in Watermill\nDESCRIPTION: Constructor function for creating a new Kafka publisher. It allows customization of marshaler and Sarama configuration.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/pubsubs/kafka.md#2025-04-19_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// NewPublisher creates a new Kafka Publisher.\n//\n// Watermill's message.UUID is used for Kafka's Message Key.\nfunc NewPublisher(\n\tkafkaBrokers []string,\n\tmarshaler Marshaler,\n\toverwriteSaramaConfig *sarama.Config,\n\tlogger watermill.LoggerAdapter,\n) (*Publisher, error)\n```\n\n----------------------------------------\n\nTITLE: Creating Kafka Subscriber in Watermill\nDESCRIPTION: Constructor function for creating a new Kafka subscriber. It configures how messages are consumed from Kafka topics.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/pubsubs/kafka.md#2025-04-19_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// NewSubscriber creates a new Kafka Subscriber.\nfunc NewSubscriber(\n\tconfig SubscriberConfig,\n\tlogger watermill.LoggerAdapter,\n) (*Subscriber, error)\n```\n\n----------------------------------------\n\nTITLE: BookRoomHandler Implementation in Go\nDESCRIPTION: Implementation of a CommandHandler for processing the BookRoom command. It demonstrates how to handle a command and publish resulting events using the EventBus.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/cqrs.md#2025-04-19_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n// BookRoomHandler is a command handler, which handles BookRoom commands.\ntype BookRoomHandler struct {\n\tEventBus *cqrs.EventBus\n}\n\nfunc (b BookRoomHandler) HandlerName() string {\n\treturn \"BookRoomHandler\"\n}\n\n// NewCommand returns type of command which this handler can handle.\nfunc (b BookRoomHandler) NewCommand() interface{} {\n\treturn &BookRoom{}\n}\n\n// Handle contains the business logic for the command handler.\n//\n// In this case, we are just publishing the event. In real applications, you would have here some business logic.\n// For example, checking if the room is available, etc.\nfunc (b BookRoomHandler) Handle(ctx context.Context, cmd interface{}) error {\n\t// BookRoomHandler handles only BookRoom commands, so we can safely cast it\n\tbc := cmd.(*BookRoom)\n\n\tevt := &RoomBooked{\n\t\tWhen:   time.Now(),\n\t\tRoomID: bc.RoomID,\n\t\tGuest:  bc.Guest,\n\t}\n\n\treturn b.EventBus.Publish(ctx, evt)\n}\n```\n\n----------------------------------------\n\nTITLE: IsRunning Check for Router in Go\nDESCRIPTION: The IsRunning method returns a boolean indicating whether the Router is currently running, providing a simple status check.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/messages-router.md#2025-04-19_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// IsRunning returns true if router is running.\nfunc (r *Router) IsRunning()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Prometheus Metrics Server in Go\nDESCRIPTION: Example of creating a Prometheus registry, starting a metrics server, and adding metrics to a Watermill router.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/advanced/metrics.md#2025-04-19_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nprometheusRegistry, closeMetricsServer := metrics.CreateRegistryAndServeHTTP(\":8081\")\ndefer closeMetricsServer()\n\n// we leave the namespace and subsystem empty,\n// they will be used to prefix metric names\nmetricsBuilder := metrics.NewPrometheusMetricsBuilder(prometheusRegistry, \"\", \"\")\nmetricsBuilder.AddPrometheusRouterMetrics(router)\n```\n\n----------------------------------------\n\nTITLE: Kafka Subscriber Configuration Example\nDESCRIPTION: Example of setting up a Kafka publisher in Watermill. Demonstrates how to create a publisher instance with the necessary parameters.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/pubsubs/kafka.md#2025-04-19_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npublisher, err := kafka.NewPublisher(\n\t[]string{\"localhost:9092\"},\n\tkafka.DefaultMarshaler{},\n\tnil,\n\twatermill.NewStdLogger(false, false),\n)\nif err != nil {\n\tpanic(err)\n}\n```\n\n----------------------------------------\n\nTITLE: OrderBeerOnRoomBooked Event Handler Implementation in Go\nDESCRIPTION: Implementation of an EventHandler that responds to RoomBooked events by sending an OrderBeer command. This demonstrates event-driven behavior in a CQRS system.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/cqrs.md#2025-04-19_snippet_10\n\nLANGUAGE: go\nCODE:\n```\n// OrderBeerOnRoomBooked is an event handler, which handles RoomBooked event and emits OrderBeer command.\ntype OrderBeerOnRoomBooked struct {\n\tCommandBus *cqrs.CommandBus\n}\n\nfunc (o OrderBeerOnRoomBooked) HandlerName() string {\n\treturn \"OrderBeerOnRoomBooked\"\n}\n\n// NewEvent returns type of event which this handler can handle.\nfunc (o OrderBeerOnRoomBooked) NewEvent() interface{} {\n\treturn &RoomBooked{}\n}\n\n// Handle contains the business logic of the event handler.\n// In this case, it produces the OrderBeer command.\nfunc (o OrderBeerOnRoomBooked) Handle(ctx context.Context, event interface{}) error {\n\t// OrderBeerOnRoomBooked handles only RoomBooked events, so we can safely cast it\n\trb := event.(*RoomBooked)\n\n\tlogger.Info(\"Room booked\", watermill.LogFields{\n\t\t\"room_id\": rb.RoomID,\n\t\t\"guest\":   rb.Guest,\n\t})\n\n\treturn o.CommandBus.Send(ctx, &OrderBeer{\n\t\tRoomID: rb.RoomID,\n\t\tGuest:  rb.Guest,\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Group Event Handler in Watermill CQRS\nDESCRIPTION: Function signature for creating a new group event handler that can process multiple event types. This approach allows for organizing related event handlers under a single group name.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/cqrs.md#2025-04-19_snippet_15\n\nLANGUAGE: go\nCODE:\n```\n// NewGroupEventHandler returns HandlerFunc which handles event of type handlerFunc's argument.\n// GroupEventHandler provides a way to handle all of the events generated in a specific group of handlers.\nfunc NewGroupEventHandler\n```\n\n----------------------------------------\n\nTITLE: Checking if Router is Running in Go\nDESCRIPTION: The Running method returns a channel that's closed when the Router stops running, useful for monitoring Router status.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/messages-router.md#2025-04-19_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// Running is closed when router is running.\n// In other case it will be a new open channel.\nfunc (r *Router) Running()\n```\n\n----------------------------------------\n\nTITLE: Implementing Watermill with Google Cloud Pub/Sub\nDESCRIPTION: Example implementation using Google Cloud Pub/Sub, showing setup and message processing with the GCP Pub/Sub client.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/getting-started.md#2025-04-19_snippet_8\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\n\t\"github.com/ThreeDotsLabs/watermill\"\n\t\"github.com/ThreeDotsLabs/watermill-googlecloud/pkg/googlecloud\"\n\t\"github.com/ThreeDotsLabs/watermill/message\"\n)\n\nfunc main() {\n\tsubscriber, err := googlecloud.NewSubscriber(\n\t\tgooglecloud.SubscriberConfig{\n\t\t\tGenerateSubscriptionName: googlecloud.TopicSubscriptionName,\n\t\t\tProjectID:                \"test-project\",\n\t\t},\n\t\twatermill.NewStdLogger(false, false),\n\t)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tmessages, err := subscriber.Subscribe(context.Background(), \"example.topic\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tprocess(messages)\n```\n\nLANGUAGE: go\nCODE:\n```\nfunc process(messages <-chan *message.Message) {\n\tfor msg := range messages {\n\t\tprintln(\"received message:\", msg.UUID)\n\t\tprintln(\"message metadata:\", msg.Metadata)\n\t\tprintln(\"message payload:\", string(msg.Payload))\n\n\t\t// we need to Acknowledge that we received and processed the message,\n\t\t// otherwise, it will be resent over and over again.\n\t\tmsg.Ack()\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages to Kafka in Watermill\nDESCRIPTION: Function signature for publishing messages to Kafka topics. Shows how messages are published in Watermill's Kafka implementation.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/pubsubs/kafka.md#2025-04-19_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// Publish publishes message to Kafka.\n//\n// Publish is blocking and wait for acks from brokers.\n// When one of messages processing fails - function returns error.\n//\n// Publish is guaranteed to be at least once delivery.\nfunc (p *Publisher) Publish\n```\n\n----------------------------------------\n\nTITLE: Event Handler Group Implementation in Go\nDESCRIPTION: Example of using the EventGroupProcessor to handle multiple event types with a single subscriber. This is useful for maintaining event order when processing different event types from a single topic.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/cqrs.md#2025-04-19_snippet_11\n\nLANGUAGE: go\nCODE:\n```\neventProcessor.AddHandlersGroup(\n\t\"notifiers\",\n\t&AccountCreated{},\n\t&AccountDeleted{},\n\t&PasswordChanged{},\n\t[]cqrs.EventHandler{\n\t\ttestEventHandler{\n\t\t\thandlerName: \"SendEmailOnAccountCreated\",\n\t\t\teventName:   \"account_created\",\n\t\t},\n\t\ttestEventHandler{\n\t\t\thandlerName: \"SendPushOnAccountCreated\",\n\t\t\teventName:   \"account_created\",\n\t\t},\n\t\ttestEventHandler{\n\t\t\thandlerName: \"DeleteSessionsOnPasswordChanged\",\n\t\t\teventName:   \"password_changed\",\n\t\t},\n\t},\n)\n\nif err != nil {\n```\n\n----------------------------------------\n\nTITLE: Creating a New SQL Subscriber in Go\nDESCRIPTION: Function signature for creating a new SQL subscriber with Watermill.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/pubsubs/sql.md#2025-04-19_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nfunc NewSubscriber(\n\tdb *sql.DB,\n\tconfig SubscriberConfig,\n\tlogger watermill.LoggerAdapter,\n) (*Subscriber, error)\n```\n\n----------------------------------------\n\nTITLE: Configuring SQS Subscriber in Go\nDESCRIPTION: Struct definition for SQS Subscriber configuration in Watermill, including AWS settings and queue options.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/pubsubs/aws.md#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype SubscriberConfig struct {\n\tAWSConfig aws.Config\n\tGenerateQueueName GenerateQueueNameFn\n\tQueueUrlResolver QueueUrlResolver\n\tGenerateReceiveMessageInput GenerateReceiveMessageInputFunc\n\tGenerateCreateQueueInput GenerateCreateQueueInputFunc\n\tReceiveTimeout time.Duration\n\tVisibilityTimeout time.Duration\n\tMaxNumberOfMessages int32\n\tWaitTimeSeconds int32\n\tMaxNumberOfReceives int32\n\tRetryTopic string\n\tDeadLetterTopic string\n\tOptFns []func(*amazonsqs.Options)\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Kafka Topics in Watermill\nDESCRIPTION: Function signature for subscribing to Kafka topics. Shows how messages are consumed in Watermill's Kafka implementation.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/pubsubs/kafka.md#2025-04-19_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// Subscribe subscribes messages from Kafka.\n//\n// Subscribe creates a consumer group for given topic.\n// When consumer from this consumerGroup receives message, it sends all the messages through the output channel.\nfunc (s *Subscriber) Subscribe\n```\n\n----------------------------------------\n\nTITLE: Router Configuration Structure in Go\nDESCRIPTION: The RouterConfig struct that defines configuration options for the Router, including close timeout, plugin publisher, subscriber, and handlers configs.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/messages-router.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype RouterConfig struct {\n\tCloseTimeout time.Duration\n\n\tPlugin Plugin\n\n\tPublisherConfig  RouterPublishConfig\n\tSubscriberConfig RouterSubscriberConfig\n\tHandlersConfig   RouterHandlerConfig\n}\n```\n\n----------------------------------------\n\nTITLE: CommandHandler Interface Definition in Go\nDESCRIPTION: Defines the CommandHandler interface which is responsible for handling specific command types. It includes methods for command type identification and handling commands in context.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/cqrs.md#2025-04-19_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// CommandHandler receives commands defined by NewCommand and handles them with the Handle method.\ntype CommandHandler interface {\n\t// HandlerName is the name used in metrics, logs etc.\n\tHandlerName() string\n\n\t// NewCommand should return the type of command which this handler should handle.\n\t// For example, return &MyCommand{}\n\tNewCommand() interface{}\n\n\t// Handle is the actual handling of the command.\n\tHandle(ctx context.Context, cmd interface{}) error\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing SQL Subscriber in Go\nDESCRIPTION: Example of initializing a SQL subscriber with Watermill.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/pubsubs/sql.md#2025-04-19_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nsubscriber, err := sql.NewSubscriber(\n\tdb,\n\tsql.SubscriberConfig{\n\t\tSchemaAdapter:    mysqlSchema,\n\t\tOffsetsAdapter:   sql.DefaultMySQLOffsetsAdapter{},\n\t\tPollInterval:     100 * time.Millisecond,\n\t},\n\tlogger,\n)\nif err != nil {\n\tpanic(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Google Cloud Pub/Sub Subscriber in Go\nDESCRIPTION: Code snippet showing how to create a Google Cloud Pub/Sub subscriber using Watermill. It uses the NewSubscriber function with a SubscriberConfig.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/pubsubs/googlecloud.md#2025-04-19_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nsubscriber, err := googlecloud.NewSubscriber(\n\tgooglecloud.SubscriberConfig{\n\t\tProjectID: os.Getenv(\"PUBSUB_PROJECT_ID\"),\n\t\tGenerateSubscriptionName: googlecloud.TopicSubscriptionName,\n\t},\n\twatermill.NewStdLogger(false, false),\n)\nif err != nil {\n\tpanic(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Handler Middleware Definition in Go\nDESCRIPTION: The HandlerMiddleware type defines a function that wraps a handler, allowing for pre and post-processing of messages and implementing cross-cutting concerns.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/messages-router.md#2025-04-19_snippet_11\n\nLANGUAGE: go\nCODE:\n```\n// HandlerMiddleware allows us to write something like decorators to HandlerFunc.\ntype HandlerMiddleware func(h HandlerFunc) HandlerFunc\n```\n\n----------------------------------------\n\nTITLE: EventGroupProcessor Interface Definition in Go\nDESCRIPTION: Defines the EventGroupProcessor interface that handles event processing for groups of handlers. This allows multiple event types to be processed by a single subscriber while maintaining event order.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/cqrs.md#2025-04-19_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// EventGroupProcessor is a EventProcessor created for specific group of event handlers which share common Subscriber.\n// It allows multiple handlers to process events with a single Subscriber instance.\ntype EventGroupProcessor interface {\n\t// AddHandlers adds event handlers to the group processor.\n\tAddHandlers(handlers ...EventHandler) error\n\n\t// Run runs all added handlers with single Subscriber.\n\tRun(ctx context.Context) error\n\n\t// Close closes the resources used by the processor.\n\tClose() error\n}\n```\n\nLANGUAGE: go\nCODE:\n```\ntype EventGroupProcessorConfig struct {\n\t// Marshaler is used to marshal and unmarshal events.\n\t// It is required to be set.\n\tMarshaler CommandEventMarshaler\n\n\t// Logger instance used to log.\n\t// If not provided, watermill.NopLogger is used.\n\tLogger watermill.LoggerAdapter\n\n\t// OnHandle is called before handling the event by the handler.\n\t// It can be used to log, add metrics etc.\n\t//\n\t// By default, it's no-op.\n\tOnHandle OnEventHandleFn\n\n\t// AckOnUnknownEvent when true, all events not handled by any EventHandler will be acknowledged.\n\t// If false, when message is not handled, it is Nacked.\n\t//\n\t// By default, it's set to false.\n\tAckOnUnknownEvent bool\n}\n\nfunc (c *EventGroupProcessorConfig) setDefaults() {\n```\n\n----------------------------------------\n\nTITLE: Managing Context in Message Struct\nDESCRIPTION: Shows methods for getting and setting the context within a Message struct, allowing for context-aware message handling.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/message.md#2025-04-19_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// Context returns the message's context.\nfunc (m *Message) Context() context.Context {\n\treturn m.ctx\n}\n\n// SetContext sets the message's context.\nfunc (m *Message) SetContext(ctx context.Context) {\n```\n\n----------------------------------------\n\nTITLE: Configuring SQL Subscriber in Go\nDESCRIPTION: Struct definition for SubscriberConfig, specifying configuration options for the SQL subscriber.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/pubsubs/sql.md#2025-04-19_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype SubscriberConfig struct {\n\tSchemaAdapter\n\tOffsetsAdapter\n\n\tPollInterval   time.Duration\n\tResume         bool\n\tInitializeSchema bool\n\n\tConsumerGroup string\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Message Structure in Go\nDESCRIPTION: Defines the Message struct, which is a core component of Watermill. It includes fields for UUID, Payload, Metadata, and context.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/message.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Message struct {\n\tUUID     string\n\tPayload  []byte\n\tMetadata Metadata\n\tack      *atomicMessageAck\n\tctx      context.Context\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AMQP Consumer Groups\nDESCRIPTION: Example showing how to implement consumer groups functionality in AMQP by creating multiple subscribers with different queue name suffixes.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/pubsubs/amqp.md#2025-04-19_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc createSubscriber(consumerGroup string) (message.Subscriber, error) {\n\tsubsConfig := amqp.NewDurablePubSubConfig(\"amqp://guest:guest@localhost:5672/\")\n\n\t// with this function, we are making queue per consumer group\n\t// in this case, every subscriber will receive all messages\n\tsubsConfig.GenerateQueueNameTopicNameWithSuffix(consumerGroup)\n\n\treturn amqp.NewSubscriber(\n\t\tsubsConfig,\n\t\twatermill.NewStdLogger(false, false),\n\t)\n}\n\n// [... other code ...]\n\nmessages1, err := subscriber1.Subscribe(context.Background(), \"example.topic\")\nif err != nil {\n\tpanic(err)\n}\n\nmessages2, err := subscriber2.Subscribe(context.Background(), \"example.topic\")\nif err != nil {\n\tpanic(err)\n}\n\ngo process(\"subscriber_1\", messages1)\ngo process(\"subscriber_2\", messages2)\n```\n\n----------------------------------------\n\nTITLE: Router Plugin Interface in Go\nDESCRIPTION: The RouterPlugin interface defines hooks that can be implemented to intercept and modify the Router's behavior at various lifecycle stages.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/messages-router.md#2025-04-19_snippet_12\n\nLANGUAGE: go\nCODE:\n```\n// RouterPlugin is function which is executed on Router start and close.\n// Return value is passed to PluginPublisher and PluginSubscriber.\ntype RouterPlugin interface {\n\t// OnHandlerAdded is executed when handler is added.\n\t// Doesn't matter if it's added before, or after router start.\n\tOnHandlerAdded(handlerName string)\n\n\t// OnHandlerStarted is executed when handler is started.\n\tOnHandlerStarted(handlerName string, subscription *Subscription)\n\n\t// OnHandlerStopped is executed when handler is stopped.\n\tOnHandlerStopped(handlerName string, subscription *Subscription)\n\n\t// OnRouterStarted is executed when Router.Run() is executed.\n\tOnRouterStarted()\n\n\t// OnRouterStopped is executed when Router.Close() is executed.\n\tOnRouterStopped()\n```\n\n----------------------------------------\n\nTITLE: Initializing Redis Client for Subscriber in Go\nDESCRIPTION: Example of creating a Redis client for a subscriber in Go, including error handling.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/pubsubs/redisstream.md#2025-04-19_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nsubClient := redis.NewClient(&redis.Options{\n\tAddr: redisAddr,\n})\n\nsubscriber, err := redisstream.NewSubscriber(\n\tredisstream.SubscriberConfig{\n\t\tClient: subClient,\n\t},\n\twatermill.NewStdLogger(false, false),\n)\nif err != nil {\n\tpanic(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Ack Method for Message in Go\nDESCRIPTION: Implements the Ack method for the Message struct, which acknowledges successful processing of a message.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/message.md#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Ack acknowledges the message.\n// Returns true if the acknowledge is successful.\nfunc (m *Message) Ack() bool {\n```\n\n----------------------------------------\n\nTITLE: Creating an Event Handler in Watermill CQRS\nDESCRIPTION: Function signature for creating a new event handler in Watermill's CQRS component. This enables handling events with a generic function based on the event type.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/cqrs.md#2025-04-19_snippet_14\n\nLANGUAGE: go\nCODE:\n```\n// NewEventHandler returns HandlerFunc which handles event of type handlerFunc's argument.\n// For example, if handlerFunc is `func(ctx context.Context, event *MyEvent) error`, handler will handle *MyEvent.\nfunc NewEventHandler\n```\n\n----------------------------------------\n\nTITLE: Implementing Watermill with Go Channel Pub/Sub\nDESCRIPTION: Example implementation using Go channels as a Pub/Sub mechanism, showing setup and message processing.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/getting-started.md#2025-04-19_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"time\"\n\n\t\"github.com/ThreeDotsLabs/watermill\"\n\t\"github.com/ThreeDotsLabs/watermill/message\"\n\t\"github.com/ThreeDotsLabs/watermill/pubsub/gochannel\"\n)\n\nfunc main() {\n\tpubSub := gochannel.NewGoChannel(\n\t\tgochannel.Config{},\n\t\twatermill.NewStdLogger(false, false),\n\t)\n\n\tmessages, err := pubSub.Subscribe(context.Background(), \"example.topic\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tgo process(messages)\n\n```\n\nLANGUAGE: go\nCODE:\n```\nfunc process(messages <-chan *message.Message) {\n\tfor msg := range messages {\n\t\tlog.Printf(\"received message: %s, payload: %s\", msg.UUID, string(msg.Payload))\n\n\t\t// we need to Acknowledge that we received and processed the message,\n\t\t// otherwise, it will be resent over and over again.\n\t\tmsg.Ack()\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GoChannel via Constructor\nDESCRIPTION: The constructor function for creating a new GoChannel instance with configuration options. It allows setting up the pub/sub implementation with desired parameters.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/pubsubs/gochannel.md#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc NewGoChannel(\n\toptions ...*GoChannelConfig,\n) (*GoChannel, error) {\n\tconfig, err := configsBuilder.NewBuilder(\"gochannel\", &GoChannelConfig{}).\n\t\tAddOptions(options...).Build()\n\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tconfig, ok := config.(*GoChannelConfig)\n\tif !ok {\n\t\treturn nil, errors.New(\"invalid config\")\n\t}\n\tif config.QueueSize <= 0 {\n\t\treturn nil, errors.New(\"queue size cannot be <= 0\")\n\t}\n\n\tif config.Persistent {\n\t\treturn newPersistentGoChannel(config)\n\t}\n\n\treturn &GoChannel{\n\t\tconfig: config,\n\t\tclosed: make(chan struct{}),\n\t\tsubscriptions: &subscriptions{\n\t\t\tlogger:\n```\n\n----------------------------------------\n\nTITLE: Adding Delay to Raw Messages in Go using Watermill\nDESCRIPTION: Demonstrates how to add a 10-second delay to a raw message using Watermill's delay package. Creates a new message with UUID and applies delay metadata.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/advanced/delayed-messages.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmsg := message.NewMessage(watermill.NewUUID(), []byte(\"hello\"))\ndelay.Message(msg, delay.For(time.Second * 10))\n```\n\n----------------------------------------\n\nTITLE: Creating SSE Router with NATS Pub/Sub in Go\nDESCRIPTION: Initializes a Server-Sent Events router using watermill-http. This example configures the router with NATS as the Pub/Sub mechanism, though any Pub/Sub supported by Watermill could be used.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/_examples/real-world-examples/server-sent-events/README.md#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nsseRouter, err := watermillHTTP.NewSSERouter(\n    watermillHTTP.SSERouterConfig{\n        UpstreamSubscriber: router.Subscriber,\n        ErrorHandler:       watermillHTTP.DefaultErrorHandler,\n    },\n    router.Logger,\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Watermill with Kafka Pub/Sub\nDESCRIPTION: Example implementation using Kafka as a message broker, showing how to set up the publisher and subscriber.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/getting-started.md#2025-04-19_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\n\t\"github.com/ThreeDotsLabs/watermill\"\n\t\"github.com/ThreeDotsLabs/watermill-kafka/v2/pkg/kafka\"\n\t\"github.com/ThreeDotsLabs/watermill/message\"\n)\n\nfunc main() {\n\tsubscriber, err := kafka.NewSubscriber(\n\t\tkafka.SubscriberConfig{\n\t\t\tBrokers:               []string{\"kafka:9092\"},\n\t\t\tConsumerGroup:        \"example_consumer_group\",\n\t\t\tAutoOffsetReset:      \"earliest\",\n\t\t\tOverwriteSaramaConfig: kafka.DefaultSaramaSubscriberConfig(),\n\t\t},\n\t\twatermill.NewStdLogger(false, false),\n\t)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tmessages, err := subscriber.Subscribe(context.Background(), \"example.topic\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tprocess(messages)\n```\n\nLANGUAGE: go\nCODE:\n```\nfunc process(messages <-chan *message.Message) {\n\tfor msg := range messages {\n\t\tprintln(\"received message:\", msg.UUID)\n\t\tprintln(\"message metadata:\", msg.Metadata)\n\t\tprintln(\"message payload:\", string(msg.Payload))\n\n\t\t// we need to Acknowledge that we received and processed the message,\n\t\t// otherwise, it will be resent over and over again.\n\t\tmsg.Ack()\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New SQL Publisher in Go\nDESCRIPTION: Function signature for creating a new SQL publisher with Watermill.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/pubsubs/sql.md#2025-04-19_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc NewPublisher(\n\tdb *sql.DB,\n\ttx *sql.Tx,\n\tconfig PublisherConfig,\n\tlogger watermill.LoggerAdapter,\n) (*Publisher, error)\n```\n\n----------------------------------------\n\nTITLE: Creating a New FanOut Instance in Go\nDESCRIPTION: This snippet shows how to create a new FanOut instance using the NewFanOut function. It requires a logger and optionally allows setting a channel buffer size.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/advanced/fanout.md#2025-04-19_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n// NewFanOut creates new FanOut.\n//\n// outputChannelBuffer sets the size of the output channels buffer.\nfunc NewFanOut(logger watermill.LoggerAdapter, outputChannelBuffer int64) *FanOut {\n\treturn &FanOut{\n\t\toutputChannelBuffer: outputChannelBuffer,\n\t\tLogger:              logger,\n\t}\n)\n```\n\n----------------------------------------\n\nTITLE: Client-Side EventSource Implementation in JavaScript\nDESCRIPTION: Frontend code that establishes an SSE connection using the EventSource API. It creates a connection to a feed endpoint and sets up an event listener to process incoming updates.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/_examples/real-world-examples/server-sent-events/README.md#2025-04-19_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nthis.es = new EventSource('/api/feeds/' + this.feed)\n\nthis.es.addEventListener('data', event => {\n    let data = JSON.parse(event.data);\n    this.posts_stream = data.posts;\n}, false);\n```\n\n----------------------------------------\n\nTITLE: Kafka Message Marshaler Interface in Watermill\nDESCRIPTION: Interface definition for marshaling Watermill messages to Kafka format. Specifies the contract for converting between message formats.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/pubsubs/kafka.md#2025-04-19_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n// Marshaler marshals Watermill's message to Kafka message.\ntype Marshaler interface {\n\t// Marshal marshals message to kafka.Message.\n\t// Topic is intentionally separated from message to avoid topic leaks to other middlewares,\n\t// which may cause publishing to invalid topic.\n\tMarshal(topic string, msg *message.Message) (*sarama.ProducerMessage, error)\n\n\t// Unmarshal unmarshals kafka.ConsumerMessage to Watermill's message.\n\tUnmarshal(kafkaMsg *sarama.ConsumerMessage) (*message.Message, error)\n}\n\n// DefaultMarshaler is default implementation for Marshaler interface used by Watermill.\nfunc (DefaultMarshaler)\n```\n\n----------------------------------------\n\nTITLE: Initializing Redis Client for Publisher in Go\nDESCRIPTION: Example of creating a Redis client for a publisher in Go, including error handling.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/pubsubs/redisstream.md#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npubClient := redis.NewClient(&redis.Options{\n\tAddr: redisAddr,\n})\n\npublisher, err := redisstream.NewPublisher(\n\tredisstream.PublisherConfig{\n\t\tClient: pubClient,\n\t},\n\twatermill.NewStdLogger(false, false),\n)\nif err != nil {\n\tpanic(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Running the FanOut Component in Go\nDESCRIPTION: This snippet shows how to run the FanOut component. It starts processing messages from all added subscriptions and distributes them to all output channels.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/advanced/fanout.md#2025-04-19_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\n// Run runs all subscriptions and starts fanout.\n//\n// When close is sent, close on all subscriptions is sent.\n// When all subscriptions are closed, nil is sent to closeCh.\nfunc (f *FanOut) Run(ctx context.Context) (closeCh <-chan struct{}, err error) {\n\tf.Lock()\n\tdefer f.Unlock()\n\n\tif f.running {\n\t\treturn nil, errors.New(\"FanOut is already running\")\n\t}\n\tf.running = true\n)\n```\n\n----------------------------------------\n\nTITLE: Running HTTP Subscriber with Watermill Router in Go\nDESCRIPTION: Code snippet showing how to start the HTTP server for the subscriber after the router is running.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/pubsubs/http.md#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n<-r.Running()\nhttpSubscriber.StartHTTPServer()\n```\n\n----------------------------------------\n\nTITLE: Using Delay with CQRS Context in Watermill\nDESCRIPTION: Shows how to delay message processing in a CQRS context by wrapping the command execution with delay metadata using WithContext.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/advanced/delayed-messages.md#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ncmd := SendFeedbackForm{}\nctx = delay.WithContext(ctx, delay.For(time.Hour*24))\nif err := h.commandBus.Send(ctx, cmd); err != nil {\n    return err\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SQS with Local Emulator in Go\nDESCRIPTION: Example of configuring SQS to use a local emulator like goaws or localstack for development or testing purposes.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/pubsubs/aws.md#2025-04-19_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    amazonsqs \"github.com/aws/aws-sdk-go-v2/service/sqs\"\n\t\"github.com/ThreeDotsLabs/watermill-amazonsqs/sqs\"\n)\n\nfunc main() {\n\t// ...\n\n    sqsOpts := []func(*amazonsqs.Options){\n        amazonsqs.WithEndpointResolverV2(sqs.OverrideEndpointResolver{\n            Endpoint: transport.Endpoint{\n                URI: *lo.Must(url.Parse(\"http://localstack:4566\")),\n            },\n        }),\n    }\n\n\tsqsConfig := sqs.SubscriberConfig{\n\t\tAWSConfig: cfg,\n\t\tOptFns:    sqsOpts,\n\t}\n\n\tsub, err := sqs.NewSubscriber(sqsConfig, logger)\n\tif err != nil {\n\t\tpanic(fmt.Errorf(\"unable to create new subscriber: %w\", err))\n\t}\n\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Kafka Partitioning with Custom Marshaler in Watermill\nDESCRIPTION: Implementation of a Kafka marshaler that supports message partitioning. Allows controlling which Kafka partition receives specific messages.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/pubsubs/kafka.md#2025-04-19_snippet_9\n\nLANGUAGE: go\nCODE:\n```\ntype kafkaJsonWithPartitioning struct {\n\tgeneratePartitionKey func(topic string, msg *message.Message) (string, error)\n}\n\n// Marshal marshals message to kafka message.\n// The key is generated by the function provided in NewWithPartitioningMarshaler constructor.\nfunc (j kafkaJsonWithPartitioning) Marshal\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages with GoChannel\nDESCRIPTION: The Publish method documentation and function signature for sending messages to a specific topic using the GoChannel implementation.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/pubsubs/gochannel.md#2025-04-19_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Publish publishes message to the topic.\n//\n// Publish will not return until the message is successfully sent to the topic or an error occurred.\nfunc (g *GoChannel) Publish\n```\n\n----------------------------------------\n\nTITLE: Implementing a Read Model with an Event Handler in Watermill CQRS\nDESCRIPTION: Example of a read model implementation that processes booking events to build a financial report. This demonstrates how to create and update a read model based on events in a CQRS architecture.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/cqrs.md#2025-04-19_snippet_16\n\nLANGUAGE: go\nCODE:\n```\n// BookingsFinancialReport is a read model, which calculates some statistics of bookings.\ntype BookingsFinancialReport struct {\n\tBooksCount      int64\n\tTotalPaidAmount int64\n\tmux             sync.Mutex\n}\n\nfunc (b *BookingsFinancialReport) AddBooking(booking *domain.Booking) error {\n\tb.mux.Lock()\n\tdefer b.mux.Unlock()\n\n\tb.BooksCount++\n\tb.TotalPaidAmount += booking.Price\n\n\treturn nil\n}\n\nfunc main() {\n```\n\n----------------------------------------\n\nTITLE: StreamAdapter Interface Definition for SSE in Go\nDESCRIPTION: Interface definition for StreamAdapter used with SSERouter. It defines methods for responding to HTTP requests and validating incoming messages to determine if they should trigger updates to clients.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/_examples/real-world-examples/server-sent-events/README.md#2025-04-19_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype StreamAdapter interface {\n\t// GetResponse returns the response to be sent back to client.\n\t// Any errors that occur should be handled and written to `w`, returning false as `ok`.\n\tGetResponse(w http.ResponseWriter, r *http.Request) (response interface{}, ok bool)\n\t// Validate validates if the incoming message should be handled by this handler.\n\t// Typically this involves checking some kind of model ID.\n\tValidate(r *http.Request, msg *message.Message) (ok bool)\n}\n```\n\n----------------------------------------\n\nTITLE: Default Sarama Subscriber Configuration\nDESCRIPTION: Default configuration for the Sarama Kafka client used by Watermill's subscriber. This function sets up sensible defaults for consuming messages from Kafka.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/pubsubs/kafka.md#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// DefaultSaramaSubscriberConfig creates a default Sarama config used by Subscriber.\nfunc DefaultSaramaSubscriberConfig() *sarama.Config {\n\tconfig := sarama.NewConfig()\n\tconfig.Version = sarama.V1_0_0_0\n\tconfig.Consumer.Return.Errors = true\n\tconfig.ClientID = \"watermill\"\n\n\treturn config\n}\n```\n\n----------------------------------------\n\nTITLE: Kafka Publisher Configuration Example\nDESCRIPTION: Example of setting up a Kafka publisher with specific Sarama configuration. Shows how to configure the Kafka client for message publishing.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/pubsubs/kafka.md#2025-04-19_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nsaramaSubscriberConfig := kafka.DefaultSaramaSubscriberConfig()\n// equivalent to kafka.SetSaramaLoggerToWatermill\nsaramaSubscriberConfig.ClientID = \"watermill_example\"\n\nsubscriber, err := kafka.NewSubscriber(\n\tkafka.SubscriberConfig{\n\t\tBrokers:               []string{\"localhost:9092\"},\n\t\tConsumerGroup:         \"test_consumer_group\",\n\t\tAutoOffsetReset:       \"earliest\",\n\t\tOverwriteSaramaConfig: saramaSubscriberConfig,\n\t},\n\twatermill.NewStdLogger(false, false),\n)\nif err != nil {\n\tpanic(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding No-Publisher Handler to Watermill Router (Go)\nDESCRIPTION: Demonstrates how to add a handler that only subscribes to messages without publishing, using the AddNoPublisherHandler method of the Watermill Router.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/getting-started.md#2025-04-19_snippet_22\n\nLANGUAGE: go\nCODE:\n```\nrouter.AddNoPublisherHandler(\n    \"handler_name\",\n    \"in_topic\",\n    pubSub,\n    func(msg *message.Message) error {\n        // handler logic\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Defining DefaultMySQLSchema in Go\nDESCRIPTION: Struct definition for DefaultMySQLSchema, which implements the SchemaAdapter interface for MySQL.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/pubsubs/sql.md#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype DefaultMySQLSchema struct {\n\tSchemaAdapter\n\tGenerateUUID      func() string\n\tTableName         string\n\tOffsetsTableName string\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PrometheusMetricsBuilder in Go\nDESCRIPTION: Defines the PrometheusMetricsBuilder struct which provides convenience functions to wrap publishers, subscribers and handlers with Prometheus metrics.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/advanced/metrics.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// PrometheusMetricsBuilder provides convenient functions to decorate publishers, subscribers and handlers\n// with Prometheus metrics.\ntype PrometheusMetricsBuilder struct {\n\tNamespace string\n\tSubsystem string\n\tRegistry  *prometheus.Registry\n\n\tHandlerBuckets  []float64\n\tPublishBuckets  []float64\n\tNodeName        string\n\tdecoratedRouter router.Router\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OffsetsAdapter Interface in Go\nDESCRIPTION: Interface definition for OffsetsAdapter, which handles offset management for SQL Pub/Sub.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/pubsubs/sql.md#2025-04-19_snippet_11\n\nLANGUAGE: go\nCODE:\n```\ntype OffsetsAdapter interface {\n\tSaveOffset(db *sql.DB, topic, consumerGroup string, offset int64) error\n\tGetOffset(db *sql.DB, topic, consumerGroup string) (int64, error)\n\tInitialize(db *sql.DB, offsetsTableName string) error\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a NATS Jetstream Publisher in Go\nDESCRIPTION: Example of creating a new NATS Jetstream publisher with Watermill. It demonstrates how to configure and initialize a publisher instance.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/pubsubs/nats.md#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npublisher, err := nats.NewPublisher(\n\tnats.PublisherConfig{\n\t\tURL: \"nats://localhost:4222\",\n\t\tMarshalFunc: nats.GobMarshaler{},\n\t},\n\twatermill.NewStdLogger(false, false),\n)\nif err != nil {\n\tpanic(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing PrometheusMetricsBuilder in Go\nDESCRIPTION: Example of initializing a PrometheusMetricsBuilder with empty namespace and subsystem, and adding metrics to a Watermill router.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/advanced/metrics.md#2025-04-19_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// we leave the namespace and subsystem empty,\n// they will be used to prefix metric names\nmetricsBuilder := metrics.NewPrometheusMetricsBuilder(prometheusRegistry, \"\", \"\")\nmetricsBuilder.AddPrometheusRouterMetrics(router)\n```\n\n----------------------------------------\n\nTITLE: Router Context Access Functions in Go\nDESCRIPTION: Utility functions for retrieving handler information from the message context, including handler name, subscriber name, and publish topic.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/messages-router.md#2025-04-19_snippet_13\n\nLANGUAGE: go\nCODE:\n```\n// HandlerNameFromCtx extracts the handler name from the context.\nfunc HandlerNameFromCtx(ctx context.Context) string {\n\treturn ctx.Value(handlerNameKey).(string)\n}\n\n// SubscriberNameFromCtx extracts the subscriber name from the context.\nfunc SubscriberNameFromCtx(ctx context.Context) string {\n\treturn ctx.Value(subscriberNameKey).(string)\n}\n\n// PublishTopicFromCtx extracts the publish topic from the context.\nfunc PublishTopicFromCtx(ctx context.Context) string {\n\treturn ctx.Value(publishTopicKey).(string)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PostgreSQLQueueOffsetsAdapter in Go\nDESCRIPTION: Struct definition for PostgreSQLQueueOffsetsAdapter, handling offsets for the queue-based schema.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/pubsubs/sql.md#2025-04-19_snippet_13\n\nLANGUAGE: go\nCODE:\n```\ntype PostgreSQLQueueOffsetsAdapter struct {\n\tOffsetsTableName string\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SNS Subscriber Configuration in Go\nDESCRIPTION: This snippet shows the structure of the SubscriberConfig for SNS in Watermill. It includes various options for configuring the subscriber, such as AWS configuration, topic resolver, and SQS queue settings.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/pubsubs/aws.md#2025-04-19_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype SubscriberConfig struct {\n\tAWSConfig   aws.Config\n\tOptFns      []func(*sns.Options)\n\tTopicARN    string\n\tTopicName   string\n\tTopicRegion string\n\tQueueName   string\n\tQueuePolicy string\n\tQueueRegion string\n\tQueueURL    string\n\tTopicResolver\n\tGenerateSqsQueueNameFn\n```\n\n----------------------------------------\n\nTITLE: Creating Prometheus Registry and Serving HTTP Metrics in Go\nDESCRIPTION: Functions for creating a Prometheus registry and serving HTTP metrics, including one that creates a new registry and another that uses an existing one.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/advanced/metrics.md#2025-04-19_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// CreateRegistryAndServeHTTP creates a new prometheus.Registry and starts a HTTP server,\n// which serves the default Prometheus handler at /metrics endpoint.\nfunc CreateRegistryAndServeHTTP(address string) (*prometheus.Registry, io.Closer, error) {\n\n// ServeHTTP starts a HTTP server which serves the default Prometheus handler at /metrics endpoint.\nfunc ServeHTTP(\n```\n\n----------------------------------------\n\nTITLE: Closing the Router in Go\nDESCRIPTION: The Close method gracefully shuts down the Router, waiting for all handlers to finish according to the configured timeout.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/messages-router.md#2025-04-19_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n// Close gracefully closes all handlers and subscribers.\n// This function blocks until all handlers have either been closed or a timeout has expired.\nfunc (r *Router) Close()\n```\n\n----------------------------------------\n\nTITLE: Message Marshaling Function Definition\nDESCRIPTION: Type definition for the MarshalMessageFunc that controls how messages are written to io.Writer\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/pubsubs/io.md#2025-04-19_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// MarshalMessageFunc\n// PayloadMarshalFunc\n```\n\n----------------------------------------\n\nTITLE: Configuring SNS with Local Emulator in Go\nDESCRIPTION: This snippet demonstrates how to configure the SNS subscriber to use a local emulator like goaws or localstack for development or testing purposes. It overrides the endpoint using the OptFns option.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/pubsubs/aws.md#2025-04-19_snippet_8\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\tamazonsns \"github.com/aws/aws-sdk-go-v2/service/sns\"\n\t\"github.com/ThreeDotsLabs/watermill-amazonsns/sns\"\n)\n\nfunc main() {\n\t// ...\n\n    snsOpts := []func(*amazonsns.Options){\n        amazonsns.WithEndpointResolverV2(sns.OverrideEndpointResolver{\n            Endpoint: transport.Endpoint{\n                URI: *lo.Must(url.Parse(\"http://localstack:4566\")),\n            },\n        }),\n    }\n\n\tsnsConfig := sns.SubscriberConfig{\n\t\tAWSConfig: cfg,\n\t\tOptFns:    snsOpts,\n\t}\n\n\tsub, err := sns.NewSubscriber(snsConfig, sqsConfig, logger)\n\tif err != nil {\n\t\tpanic(fmt.Errorf(\"unable to create new subscriber: %w\", err))\n\t}\n\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Subscription to FanOut in Go\nDESCRIPTION: This code demonstrates how to add a subscription to a FanOut instance. It requires a topic name and a subscriber, and must be called before starting the FanOut.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/advanced/fanout.md#2025-04-19_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\n// AddSubscription adds a subscription to FanOut.\n// It needs to be called before Run().\nfunc (f *FanOut) AddSubscription(topic string, sub message.Subscriber) {\n\tf.Lock()\n\tdefer f.Unlock()\n\n\tf.subscriptions = append(f.subscriptions, subscription{topic, sub})\n)\n```\n\n----------------------------------------\n\nTITLE: Running Handlers on an Existing Router in Go\nDESCRIPTION: The RunHandlers method starts handlers that were added after the Router was already running, allowing for dynamic handler registration.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/messages-router.md#2025-04-19_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n// RunHandlers runs all handlers that were added after the router was started.\nfunc (r *Router) RunHandlers\n```\n\n----------------------------------------\n\nTITLE: Defining HandlerMiddleware Interface in Go\nDESCRIPTION: Shows the type definition of HandlerMiddleware in Watermill, which is a function that wraps a message handler with additional functionality.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/middlewares.md#2025-04-19_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n// HandlerMiddleware allows us to wrap a existing handler with another one.\ntype HandlerMiddleware func(h HandlerFunc) HandlerFunc\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages with SQL Publisher in Go\nDESCRIPTION: Function signature for publishing messages using the SQL publisher.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/pubsubs/sql.md#2025-04-19_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc (p *Publisher) Publish(topic string, messages ...*message.Message) error\n```\n\n----------------------------------------\n\nTITLE: Implementing ARN Topic Resolver in Go\nDESCRIPTION: This code implements GenerateArnTopicResolver, which generates AWS SNS topic ARNs based on the provided region and account ID.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/pubsubs/aws.md#2025-04-19_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// GenerateArnTopicResolver implements TopicResolver.\ntype GenerateArnTopicResolver struct {\n\tRegion    string\n\tAccountID string\n}\n\nfunc (r GenerateArnTopicResolver) ResolveTopic(topic string) (string, error) {\n\treturn fmt.Sprintf(\"arn:aws:sns:%s:%s:%s\", r.Region, r.AccountID, topic), nil\n}\n\nfunc (r GenerateArnTopicResolver) ResolveQueueURL(topic string) (string, error) {\n\treturn \"\", errors.New(\"not implemented\")\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping a Specific Handler in Go\nDESCRIPTION: The Stop method allows stopping an individual handler without stopping the entire Router, providing granular control over message processing.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/messages-router.md#2025-04-19_snippet_10\n\nLANGUAGE: go\nCODE:\n```\n// Stop stops the Handler.\nfunc (h *Handler) Stop()\n```\n\n----------------------------------------\n\nTITLE: Setting Custom HTTP Status Code in Watermill Message Handler\nDESCRIPTION: Example of how to set a custom HTTP status code when handling a message in Watermill.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/pubsubs/http.md#2025-04-19_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// msg is a *message.Message\nhttp.SetResponseStatusCode(msg, http.StatusForbidden)\nmsg.Nack()\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Messages with SQL Subscriber in Go\nDESCRIPTION: Function signature for subscribing to messages using the SQL subscriber.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/pubsubs/sql.md#2025-04-19_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nfunc (s *Subscriber) Subscribe(ctx context.Context, topic string) (<-chan *message.Message, error)\n```\n\n----------------------------------------\n\nTITLE: Creating a Command Handler in Watermill CQRS\nDESCRIPTION: Function signature for creating a new command handler in Watermill's CQRS component. This is used to handle commands with a generic function.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/cqrs.md#2025-04-19_snippet_13\n\nLANGUAGE: go\nCODE:\n```\n// NewCommandHandler returns HandlerFunc which handles command of type handlerFunc's argument.\n// For example, if handlerFunc is `func(ctx context.Context, cmd *MyCommand) error`, handler will handle *MyCommand.\nfunc NewCommandHandler\n```\n\n----------------------------------------\n\nTITLE: Configuring SQL Publisher in Go\nDESCRIPTION: Struct definition for PublisherConfig, specifying configuration options for the SQL publisher.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/pubsubs/sql.md#2025-04-19_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype PublisherConfig struct {\n\tSchemaAdapter\n\tAutocommit bool\n}\n```\n\n----------------------------------------\n\nTITLE: Adding SSE Handler to HTTP Router in Go\nDESCRIPTION: Example of adding an SSE handler to a router. The handler is created using sseRouter.AddHandler and then attached to a specific route pattern.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/_examples/real-world-examples/server-sent-events/README.md#2025-04-19_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npostHandler := sseRouter.AddHandler(PostUpdatedTopic, postStream)\n\n// ...\n\nr.Get(\"/posts/{id}\", postHandler)\n```\n\n----------------------------------------\n\nTITLE: Wrapping Subscribers and Publishers with Prometheus Metrics in Go\nDESCRIPTION: Demonstrates how to wrap standalone subscribers and publishers with Prometheus metrics using PrometheusMetricBuilder methods.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/advanced/metrics.md#2025-04-19_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nsubWithMetrics, err := metricsBuilder.DecorateSubscriber(subscriber)\nif err != nil {\n\tpanic(err)\n}\n\npubWithMetrics, err := metricsBuilder.DecoratePublisher(publisher)\nif err != nil {\n\tpanic(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Message Unmarshaling Function Definition\nDESCRIPTION: Type definition for the UnmarshalMessageFunc that controls how bytes are interpreted from io.Reader\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/pubsubs/io.md#2025-04-19_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// UnmarshalMessageFunc\n// PayloadUnmarshalFunc\n```\n\n----------------------------------------\n\nTITLE: Defining GoChannel Struct in Watermill\nDESCRIPTION: The GoChannel struct declaration which serves as the foundation for the Go Channel Pub/Sub implementation in Watermill.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/pubsubs/gochannel.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// GoChannel struct {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Validate for All Feeds Updates in Go\nDESCRIPTION: Simple implementation of the Validate method that accepts all messages for triggering updates to feed streams.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/_examples/real-world-examples/server-sent-events/README.md#2025-04-19_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc (f allFeedsStreamAdapter) Validate(r *http.Request, msg *message.Message) (ok bool) {\n\treturn true\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Message Requeuer in Go\nDESCRIPTION: Example of setting up a basic message requeuer that moves messages from one topic back to the same topic after a delay. Uses Watermill's requeuer component with subscriber, publisher, and delay configuration. Note that using delay this way is not recommended as it blocks the entire requeue process.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/advanced/requeuing-after-error.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nreq, err := requeuer.NewRequeuer(requeuer.Config{\n    Subscriber:     sub,\n    SubscribeTopic: \"topic\",\n    Publisher:      pub,\n    GeneratePublishTopic: func(params requeuer.GeneratePublishTopicParams) (string, error) {\n        return \"topic\", nil\n    },\n    Delay: time.Millisecond * 200,\n}, logger)\nif err != nil {\n\treturn err\n}\n\nerr := req.Run(context.Background())\nif err != nil {\n    return err\n}\n```\n\n----------------------------------------\n\nTITLE: Using pprof for Goroutine Inspection\nDESCRIPTION: Example of pprof output showing goroutine states, providing a non-destructive way to diagnose deadlocks in production Watermill applications.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/troubleshooting.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngoroutine profile: total 5\n1 @ 0x41024c 0x6a8311 0x6a9bcb 0x6a948d 0x7028bc 0x70260a 0x42f187 0x45c971\n#\t0x6a8310\tgithub.com/ThreeDotsLabs/watermill.LogFields.Add+0xd0\t\t\t\t\t\t\t\t/home/example/go/src/github.com/ThreeDotsLabs/watermill/log.go:15\n#\t0x6a9bca\tgithub.com/ThreeDotsLabs/watermill/pubsub/gochannel.(*GoChannel).sendMessage+0x6fa\t/home/example/go/src/github.com/ThreeDotsLabs/watermill/pubsub/gochannel/pubsub.go:75\n#\t0x6a948c\tgithub.com/ThreeDotsLabs/watermill/pubsub/gochannel.(*GoChannel).Publish+0x6c\t\t/home/example/go/src/github.com/ThreeDotsLabs/watermill/pubsub/gochannel/pubsub.go:53\n#\t0x7028bb\tmain.publishMessages+0x1eb\t\t\t\t\t\t\t\t\t\t\t\t/home/example/go/src/github.com/ThreeDotsLabs/watermill/docs/src-link/_examples/pubsubs/go-channel/main.go:43\n#\t0x702609\tmain.main+0x209\t\t\t\t\t\t\t\t\t\t\t\t\t\t/home/example/go/src/github.com/ThreeDotsLabs/watermill/docs/src-link/_examples/pubsubs/go-channel/main.go:36\n#\t0x42f186\truntime.main+0x206\t\t\t\t\t\t\t\t\t\t\t\t\t/usr/lib/go/src/runtime/proc.go:201\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Defining Topic Resolver Interface in Go\nDESCRIPTION: This code defines the TopicResolver interface used in Watermill for resolving AWS SNS topic ARNs. It includes methods for resolving topic ARNs and queue URLs.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/pubsubs/aws.md#2025-04-19_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// TopicResolver is used to resolve AWS SNS Topic ARN.\ntype TopicResolver interface {\n\tResolveTopic(topic string) (string, error)\n\tResolveQueueURL(topic string) (string, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GenerateRoutingKey for AMQP Configuration in Go\nDESCRIPTION: Function implementation for the new GenerateRoutingKey parameter that replaces the Config.QueueBindConfig.RoutingKey constant in AMQP infrastructure. This maintains backward compatibility with previous routing key behavior.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/UPGRADE-0.4.md#2025-04-19_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc(topic string) string {\n    return \"routing_key\"\n}\n```\n\n----------------------------------------\n\nTITLE: Storing Data Before Publishing Events in Go\nDESCRIPTION: This code snippet shows the second approach where data is persisted in the database before publishing an event. This approach avoids inconsistency where events reference non-existent data, but can result in actions not being triggered if event publishing fails.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/advanced/forwarder.md#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// 2. Persists data first, publishes event later\nfunc runLotterySecondApproach(publisher message.Publisher, db *sql.DB) error {\n\tlotteryID := uuid.NewString()\n\twinnerID := pickRandomWinner() // Simplified, in reality would fetch from DB\n\n\tlotteryEvent := LotteryEvent{\n\t\tID:      lotteryID,\n\t\tWinnerID: winnerID,\n\t}\n\n\t// Store winner in the database first\n\t_, err := db.Exec(\n\t\t\"INSERT INTO lottery_winners (lottery_id, winner_id) VALUES (?, ?)\",\n\t\tlotteryID, winnerID,\n\t)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"couldn't store winner\")\n\t}\n\n\t// Publish event that lottery has been completed\n\tmsg := message.NewMessage(watermill.NewUUID(), marshalEvent(lotteryEvent))\n\terr = publisher.Publish(googleCloudEventTopic, msg)\n\t// In case this fails, it's not as problematic as in 1st approach.\n\t// Database has been updated with a winner, but event hasn't been emitted.\n\t// We'd need to somehow emit it anyway.\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"couldn't publish event\")\n\t}\n\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Running MySQL to Google Pub/Sub Example with Docker Compose\nDESCRIPTION: Command to start the Docker containers needed for the example that demonstrates publishing events in transactions using Watermill's Forwarder component. This will set up the required infrastructure (MySQL and Google Pub/Sub emulator) through the docker-compose configuration.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/_examples/real-world-examples/transactional-events-forwarder/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up\n```\n\n----------------------------------------\n\nTITLE: Marshaler Interface Definition\nDESCRIPTION: Interface definition for the Marshaler that handles conversion of Watermill messages to Firestore-compatible format. The Marshaler handles both marshaling and unmarshaling of messages for storage in Firestore.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/pubsubs/firestore.md#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Marshaler\n```\n\n----------------------------------------\n\nTITLE: Implementing Watermill with RabbitMQ (AMQP) Pub/Sub\nDESCRIPTION: Example implementation using RabbitMQ as a message broker via AMQP protocol, showing setup and message processing.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/getting-started.md#2025-04-19_snippet_10\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\n\t\"github.com/ThreeDotsLabs/watermill\"\n\t\"github.com/ThreeDotsLabs/watermill-amqp/pkg/amqp\"\n\t\"github.com/ThreeDotsLabs/watermill/message\"\n)\n\nfunc main() {\n\tamqpConfig := amqp.NewDurableQueueConfig(\"amqp://guest:guest@rabbitmq:5672/\")\n\n\tsubscriber, err := amqp.NewSubscriber(\n\t\tamqpConfig,\n\t\twatermill.NewStdLogger(false, false),\n\t)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tmessages, err := subscriber.Subscribe(context.Background(), \"example.topic\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tprocess(messages)\n```\n\nLANGUAGE: go\nCODE:\n```\nfunc process(messages <-chan *message.Message) {\n\tfor msg := range messages {\n\t\tprintln(\"received message:\", msg.UUID)\n\t\tprintln(\"message metadata:\", msg.Metadata)\n\t\tprintln(\"message payload:\", string(msg.Payload))\n\n\t\t// we need to Acknowledge that we received and processed the message,\n\t\t// otherwise, it will be resent over and over again.\n\t\tmsg.Ack()\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using Partitioning Marshaler with Watermill Kafka\nDESCRIPTION: Example of using partitioning in Kafka with Watermill. Shows how to create a custom marshaler that routes messages to specific partitions.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/pubsubs/kafka.md#2025-04-19_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nmarshaler := kafka.NewWithPartitioningMarshaler(func(topic string, msg *message.Message) (string, error) {\n    return msg.Metadata.Get(\"partition\"), nil\n})\n```\n\n----------------------------------------\n\nTITLE: Running the Transactional Events Example with Docker Compose\nDESCRIPTION: Command to start the Docker containers for the transactional events example using docker-compose.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/_examples/real-world-examples/transactional-events/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up\n```\n\n----------------------------------------\n\nTITLE: Defining PostgreSQLQueueSchema in Go\nDESCRIPTION: Struct definition for PostgreSQLQueueSchema, implementing a queue-based schema for PostgreSQL.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/pubsubs/sql.md#2025-04-19_snippet_12\n\nLANGUAGE: go\nCODE:\n```\ntype PostgreSQLQueueSchema struct {\n\tGenerateUUID      func() string\n\tTableName         string\n\tOffsetsTableName string\n\tDeleteMessageAfterAck bool\n\tWhereClause       string\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Watermill with SQL Pub/Sub\nDESCRIPTION: Example implementation using SQL (PostgreSQL) as a message storage and transport system.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/getting-started.md#2025-04-19_snippet_12\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\n\t\"github.com/ThreeDotsLabs/watermill\"\n\t\"github.com/ThreeDotsLabs/watermill-sql/pkg/sql\"\n\t\"github.com/ThreeDotsLabs/watermill/message\"\n\t_ \"github.com/lib/pq\"\n)\n\nfunc main() {\n\tdb, err := sql.Open(\"postgres\", \"postgres://watermill:password@postgres:5432/watermill?sslmode=disable\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tsubscriber, err := sql.NewSubscriber(\n\t\tdb,\n\t\tsql.SubscriberConfig{\n\t\t\tSchemaAdapter:    sql.DefaultPostgreSQLSchema{},\n\t\t\tOffsetsAdapter:  sql.DefaultPostgreSQLOffsetsAdapter{},\n\t\t\tConsumerGroup:   \"example_consumer_group\",\n\t\t\tConsumersCount:  4, // how many goroutines should consume messages\n\t\t\tTrackedMessages: 100, // how many not yet acknowledged messages should be in flight\n\t\t},\n\t\twatermill.NewStdLogger(false, false),\n\t)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tmessages, err := subscriber.Subscribe(context.Background(), \"example.topic\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tprocess(messages)\n```\n\nLANGUAGE: go\nCODE:\n```\nfunc process(messages <-chan *message.Message) {\n\tfor msg := range messages {\n\t\tprintln(\"received message:\", msg.UUID)\n\t\tprintln(\"message metadata:\", msg.Metadata)\n\t\tprintln(\"message payload:\", string(msg.Payload))\n\n\t\t// we need to Acknowledge that we received and processed the message,\n\t\t// otherwise, it will be resent over and over again.\n\t\tmsg.Ack()\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Watermill Logger with Debug Options in Go\nDESCRIPTION: Configures a standard logger for Watermill with debug and trace options enabled to provide detailed logs for troubleshooting.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/troubleshooting.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nlogger := watermill.NewStdLogger(true, true)\n```\n\n----------------------------------------\n\nTITLE: Implementing HandlerName for Command Handlers in Go\nDESCRIPTION: Implementation of the newly required HandlerName method for CommandHandler interface to maintain backward compatibility with metrics component naming conventions.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/UPGRADE-0.4.md#2025-04-19_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc (h CommandHandler) HandlerName() string {\n    return fmt.Sprintf(\"command_processor-%s\", h)\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Persistent Event Log Example with Docker Compose\nDESCRIPTION: Command to start the Docker Compose environment which runs the persistent event log example that stores Google Cloud Pub/Sub messages into MySQL.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/_examples/real-world-examples/persistent-event-log/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up\n```\n\n----------------------------------------\n\nTITLE: Implementing Validate for Post Updates in Go\nDESCRIPTION: Implementation of the Validate method for a post stream adapter. It checks if a message pertains to the specific post ID requested in the HTTP request.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/_examples/real-world-examples/server-sent-events/README.md#2025-04-19_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (p postStreamAdapter) Validate(r *http.Request, msg *message.Message) (ok bool) {\n\tpostUpdated := PostUpdated{}\n\n\terr := json.Unmarshal(msg.Payload, &postUpdated)\n\tif err != nil {\n\t\treturn false\n\t}\n\n\tpostID := chi.URLParam(r, \"id\")\n\n\treturn postUpdated.OriginalPost.ID == postID\n}\n```\n\n----------------------------------------\n\nTITLE: SQL (PostgreSQL) Docker Compose Configuration for Watermill\nDESCRIPTION: Docker Compose configuration to run PostgreSQL locally for development with Watermill SQL Pub/Sub.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/getting-started.md#2025-04-19_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\nservices:\n  postgres:\n    image: postgres:11\n    restart: unless-stopped\n    environment:\n      POSTGRES_USER: watermill\n      POSTGRES_PASSWORD: password\n      POSTGRES_DB: watermill\n    volumes:\n      - ./schema.sql:/docker-entrypoint-initdb.d/1.sql\n    ports:\n      - \"5432:5432\"\n  golang:\n    image: golang:1.19\n    restart: unless-stopped\n    depends_on:\n      - postgres\n    volumes:\n      - .:/app\n    working_dir: /app\n    command: go run main.go\n```\n\n----------------------------------------\n\nTITLE: Running a Specific Pub/Sub Test with Go Test\nDESCRIPTION: Shell command to run a single Pub/Sub test case in Watermill, useful for isolating and debugging specific functionality.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/troubleshooting.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake up\ngo test -v ./... -run TestPublishSubscribe/TestContinueAfterSubscribeClose\n```\n\n----------------------------------------\n\nTITLE: Querying Stored Events from MySQL Database\nDESCRIPTION: Command to execute a MySQL query that displays the events stored in the watermill_events table, showing the messages transferred from Google Cloud Pub/Sub to MySQL.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/_examples/real-world-examples/persistent-event-log/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose exec mysql mysql -e 'select * from watermill.watermill_events;'\n```\n\n----------------------------------------\n\nTITLE: Implementing Transparent Topic Resolver in Go\nDESCRIPTION: This snippet shows the implementation of TransparentTopicResolver, which directly uses the provided topic as the ARN without modification.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/pubsubs/aws.md#2025-04-19_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// TransparentTopicResolver implements TopicResolver.\ntype TransparentTopicResolver struct{}\n\nfunc (TransparentTopicResolver) ResolveTopic(topic string) (string, error) {\n\treturn topic, nil\n}\n\nfunc (TransparentTopicResolver) ResolveQueueURL(topic string) (string, error) {\n\treturn topic, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Syntax for Mill CLI Tool\nDESCRIPTION: The fundamental syntax for using the 'mill' CLI tool. It requires specifying a provider (e.g., Kafka, Google Cloud Pub/Sub, RabbitMQ) and a command (typically 'produce' or 'consume'), followed by appropriate flags for the specific context.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/tools/mill/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmill <provider> <command>\n```\n\n----------------------------------------\n\nTITLE: Examining Test Logs by UUID\nDESCRIPTION: Example of using grep to filter test output by a specific test UUID to see detailed logs for that particular test execution.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/troubleshooting.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncat test.out | grep 81eeb56c-3336-4eb9-a0ac-13abda6f38ff | less\n\n[watermill] 2020/08/18 14:51:46.283366 subscriber.go:300:       level=TRACE msg=\"Msg acked\" message_uuid=5c920330-5075-4870-8d86-9013771eee78 provider=google_cloud_pubsub subscription_name=topic_81eeb56c-3336-4eb9-a0ac-13abda6f38ff topic=topic_81eeb56c-3336-4eb9-a0ac-13abda6f38ff\n[watermill] 2020/08/18 14:51:46.283405 subscriber.go:300:       level=TRACE msg=\"Msg acked\" message_uuid=46e04a08-994e-4c04-afff-7fd42fd67f95 provider=google_cloud_pubsub subscription_name=topic_81eeb56c-3336-4eb9-a0ac-13abda6f38ff topic=topic_81eeb56c-3336-4eb9-a0ac-13abda6f38ff\n2020/08/18 14:51:46 all messages (100/100) received in bulk read after 110.04155ms of 45s (test ID: 81eeb56c-3336-4eb9-a0ac-13abda6f38ff)\n[watermill] 2020/08/18 14:51:46.284569 subscriber.go:186:       level=DEBUG msg=\"Closing message consumer\" provider=google_cloud_pubsub subscription_name=topic_81eeb56c-3336-4eb9-a0ac-13abda6f38ff topic=topic_81eeb56c-3336-4eb9-a0ac-13abda6f38ff\n[watermill] 2020/08/18 14:51:46.284828 subscriber.go:300:       level=TRACE msg=\"Msg acked\" message_uuid=2f409208-d4d2-46f6-b6b9-afb1aea0e59f provider=google_cloud_pubsub subscription_name=topic_81eeb56c-3336-4eb9-a0ac-13abda6f38ff topic=topic_81eeb56c-3336-4eb9-a0ac-13abda6f38ff\n        --- PASS: TestPublishSubscribe/TestPublishSubscribe/81eeb56c-3336-4eb9-a0ac-13abda6f38ff (2.38s)\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose Services\nDESCRIPTION: Command to start all services defined in the docker-compose configuration file. This launches the complete webhook system including Kafka, Zookeeper, producer, webhook server, and router services.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/_examples/real-world-examples/sending-webhooks/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up\n```\n\n----------------------------------------\n\nTITLE: Consuming Events from Kafka Topic\nDESCRIPTION: Command to connect to the server container and consume events produced on the Kafka topic using the mill tool.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/_examples/real-world-examples/transactional-events/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose exec server mill kafka consume -b kafka:9092 -t events\n```\n\n----------------------------------------\n\nTITLE: Consuming Kafka Messages to Local Log File\nDESCRIPTION: An example of using 'mill' to consume messages from a Kafka topic and append them to a local log file. This can be used to replicate log entries from a centralized Kafka topic to multiple hosts.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/tools/mill/README.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmill kafka consume -t myservice-logs --brokers kafka-host:8082 >> myservice.log\n```\n\n----------------------------------------\n\nTITLE: Debugging Deadlocks with SIGQUIT\nDESCRIPTION: Example of a SIGQUIT output showing goroutine stack traces, useful for diagnosing deadlocks in Watermill applications.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/troubleshooting.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nSIGQUIT: quit\nPC=0x45e7c3 m=0 sigcode=128\n\ngoroutine 1 [runnable]:\ngithub.com/ThreeDotsLabs/watermill/pubsub/gochannel.(*GoChannel).sendMessage(0xc000024100, 0x7c5250, 0xd, 0xc000872d70, 0x0, 0x0)\n\t/home/example/go/src/github.com/ThreeDotsLabs/watermill/pubsub/gochannel/pubsub.go:83 +0x36a\ngithub.com/ThreeDotsLabs/watermill/pubsub/gochannel.(*GoChannel).Publish(0xc000024100, 0x7c5250, 0xd, 0xc000098530, 0x1, 0x1, 0x0, 0x0)\n\t/home/example/go/src/github.com/ThreeDotsLabs/watermill/pubsub/gochannel/pubsub.go:53 +0x6d\nmain.publishMessages(0x7fdf7a317000, 0xc000024100)\n\t/home/example/go/src/github.com/ThreeDotsLabs/watermill/docs/src-link/_examples/pubsubs/go-channel/main.go:43 +0x1ec\nmain.main()\n\t/home/example/go/src/github.com/ThreeDotsLabs/watermill/docs/src-link/_examples/pubsubs/go-channel/main.go:36 +0x20a\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Running the Exactly-once Delivery Counter Demo\nDESCRIPTION: Commands to start the Docker containers and run the demo program. The run.go script needs to be executed with Docker privileges as it restarts containers during the test.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/_examples/real-world-examples/exactly-once-delivery-counter/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up\n\ngo run run.go\n```\n\n----------------------------------------\n\nTITLE: Consuming Messages from Kafka 'events' Topic\nDESCRIPTION: This command uses the 'mill' tool to consume messages from the 'events' Kafka topic, showing the initial events being processed by the Watermill application.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/_examples/basic/1-your-first-app/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose exec server mill kafka consume -b kafka:9092 --topic events\n```\n\n----------------------------------------\n\nTITLE: Listing Google Cloud Pub/Sub Subscriptions\nDESCRIPTION: Command to list existing subscriptions in Google Cloud Pub/Sub using the 'mill' tool. If a topic is specified, it will list subscriptions for that topic; otherwise, it lists all subscriptions for all topics.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/tools/mill/README.md#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmill googlecloud subscription ls [-t topic]\n```\n\n----------------------------------------\n\nTITLE: Running the Application with Docker Compose\nDESCRIPTION: Command to start the application using Docker Compose, making it available at http://localhost:8080.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/_examples/real-world-examples/server-sent-events/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up\n```\n\n----------------------------------------\n\nTITLE: Consuming Processed Messages from Kafka 'events-processed' Topic\nDESCRIPTION: This command uses the 'mill' tool to consume messages from the 'events-processed' Kafka topic, showing the events after they have been processed by the Watermill application.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/_examples/basic/1-your-first-app/README.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose exec server mill kafka consume -b kafka:9092 -t events-processed\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose for Watermill Metrics Example\nDESCRIPTION: Command to start the docker-compose bundle for the Watermill metrics example. This launches the Golang application, Prometheus for metrics collection, and Grafana for visualization.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/_examples/basic/4-metrics/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up\n```\n\n----------------------------------------\n\nTITLE: Installing Mill CLI Tool for Watermill\nDESCRIPTION: Command to install the 'mill' CLI tool using Go's package manager. This will download and install the latest version of the tool from the specified GitHub repository.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/tools/mill/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo install github.com/ThreeDotsLabs/watermill/tools/mill@latest\n```\n\n----------------------------------------\n\nTITLE: Running Database Synchronization with Docker Compose\nDESCRIPTION: Command to start the Docker containers for the MySQL to PostgreSQL synchronization example using docker-compose. This launches the necessary services and begins the synchronization process.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/_examples/real-world-examples/synchronizing-databases/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose for Realtime Feed Example\nDESCRIPTION: This command starts the Docker containers for the realtime feed example, which includes the producer and consumer services along with Kafka.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/_examples/basic/2-realtime-feed/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up\n```\n\n----------------------------------------\n\nTITLE: Installing Watermill Redis Stream Package in Go\nDESCRIPTION: Command to install the Watermill Redis Stream package using Go's package manager.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/pubsubs/redisstream.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/ThreeDotsLabs/watermill-redisstream\n```\n\n----------------------------------------\n\nTITLE: Installing pq CLI Tool for Watermill\nDESCRIPTION: Command to install the pq CLI tool from the ThreeDotsLabs Watermill repository using Go install.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/tools/pq/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo install github.com/ThreeDotsLabs/watermill/tools/pq@latest\n```\n\n----------------------------------------\n\nTITLE: Filtering Service Logs\nDESCRIPTION: Command to view logs from specific services in the docker-compose setup. The optional -f flag enables continuous log following. The {service} parameter specifies which service's logs to display.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/_examples/real-world-examples/sending-webhooks/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose logs [-f] {service}\n```\n\n----------------------------------------\n\nTITLE: CQRS Flow Sequence Diagram in Mermaid\nDESCRIPTION: A mermaid sequence diagram depicting the flow of commands and events in the CQRS application. It shows how BookRoom commands are handled, RoomBooked events are published, and subsequent OrderBeer commands and BeerOrdered events are processed.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/_examples/basic/5-cqrs-protobuf/README.md#2025-04-19_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant M as Main\n    participant CB as CommandBus\n    participant BRH as BookRoomHandler\n    participant EB as EventBus\n    participant OBRB as OrderBeerOnRoomBooked\n    participant OBH as OrderBeerHandler\n    participant BFR as BookingsFinancialReport\n\n    Note over M,BFR: Commands use AMQP queue, Events use AMQP pub/sub\n    \n    M->>CB: Send(BookRoom)<br/>topic: commands.BookRoom\n    CB->>BRH: Handle(BookRoom)\n    \n    BRH->>EB: Publish(RoomBooked)<br/>topic: events.RoomBooked\n    \n    par Process RoomBooked Event\n        EB->>OBRB: Handle(RoomBooked)\n        OBRB->>CB: Send(OrderBeer)<br/>topic: commands.OrderBeer\n        CB->>OBH: Handle(OrderBeer)\n        OBH->>EB: Publish(BeerOrdered)<br/>topic: events.BeerOrdered\n        \n        EB->>BFR: Handle(RoomBooked)\n        Note over BFR: Updates financial report\n    end\n```\n\n----------------------------------------\n\nTITLE: Installing Watermill AWS Package\nDESCRIPTION: Command to install the Watermill AWS package using Go modules.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/pubsubs/aws.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/ThreeDotsLabs/watermill-aws\n```\n\n----------------------------------------\n\nTITLE: Consuming Posts Count from Kafka Topic\nDESCRIPTION: This command allows you to view the posts counter published on the 'posts_count' Kafka topic. It uses the 'mill' CLI tool to consume messages from the specified Kafka broker and topic.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/_examples/basic/2-realtime-feed/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose exec consumer mill kafka consume -b kafka:9092 -t posts_count\n```\n\n----------------------------------------\n\nTITLE: Installing Watermill Firestore Package\nDESCRIPTION: Command to install the Watermill Firestore package using Go package manager.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/pubsubs/firestore.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/ThreeDotsLabs/watermill-firestore\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose for CQRS Application\nDESCRIPTION: Command to start the application containers using Docker Compose, which sets up the necessary infrastructure including Kafka and the application services.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/_examples/basic/6-cqrs-ordered-events/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up\n```\n\n----------------------------------------\n\nTITLE: Installing Watermill Google Cloud Pub/Sub Package\nDESCRIPTION: Command to install the Watermill Google Cloud Pub/Sub package using go get.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/pubsubs/googlecloud.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/ThreeDotsLabs/watermill-googlecloud\n```\n\n----------------------------------------\n\nTITLE: Running the CQRS Example Application with Docker Compose\nDESCRIPTION: Command to run the CQRS example application using Docker Compose. This will start all necessary services and dependencies defined in the docker-compose.yml file.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/_examples/basic/5-cqrs-protobuf/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up\n```\n\n----------------------------------------\n\nTITLE: Installing Watermill AMQP Package\nDESCRIPTION: Command to install the Watermill AMQP package using Go modules.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/pubsubs/amqp.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/ThreeDotsLabs/watermill-amqp/v3\n```\n\n----------------------------------------\n\nTITLE: Creating a NATS Jetstream Subscriber in Go\nDESCRIPTION: Example of creating a new NATS Jetstream subscriber with Watermill. It shows how to configure and initialize a subscriber instance.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/pubsubs/nats.md#2025-04-19_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nsubscriber, err := nats.NewSubscriber(\n\tnats.SubscriberConfig{\n\t\tURL:            \"nats://localhost:4222\",\n\t\tUnmarshalFunc:  nats.GobMarshaler{},\n\t\tCleanupTimeout: time.Second * 30,\n\t\tSubjectFromTopic: func(topic string) string {\n\t\t\treturn topic\n\t\t},\n\t\tQueueGroupPrefix: \"nats_test\",\n\t},\n\twatermill.NewStdLogger(false, false),\n)\nif err != nil {\n\tpanic(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Watermill NATS Package in Go\nDESCRIPTION: Command to install the Watermill NATS package using Go modules.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/pubsubs/nats.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/ThreeDotsLabs/watermill-nats/v2\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose for HTTP to Kafka Example\nDESCRIPTION: Command to start all required services using docker-compose, which will set up the HTTP webhook receiver and Kafka infrastructure.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/_examples/real-world-examples/receiving-webhooks/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up\n```\n\n----------------------------------------\n\nTITLE: Installing Watermill Bolt Package\nDESCRIPTION: Command to install the Watermill Bolt package using Go modules\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/pubsubs/bolt.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/ThreeDotsLabs/watermill-bolt\n```\n\n----------------------------------------\n\nTITLE: Installing Watermill SQL package in Go\nDESCRIPTION: Command to install the Watermill SQL package using go get.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/pubsubs/sql.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/ThreeDotsLabs/watermill-sql/v3\n```\n\n----------------------------------------\n\nTITLE: Installing Watermill HTTP Plugin in Go\nDESCRIPTION: Command to install the Watermill HTTP plugin using Go's package manager.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/pubsubs/http.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/ThreeDotsLabs/watermill-http/v2\n```\n\n----------------------------------------\n\nTITLE: Querying MySQL Database Contents\nDESCRIPTION: Command to inspect the users table in the MySQL database after synchronization. This shows the source data that will be transferred to PostgreSQL.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/_examples/real-world-examples/synchronizing-databases/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose exec mysql mysql -e 'select * from watermill.users;'\n```\n\n----------------------------------------\n\nTITLE: Installing Watermill IO Package\nDESCRIPTION: Command to install the Watermill IO package using go get\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/pubsubs/io.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/ThreeDotsLabs/watermill-io\n```\n\n----------------------------------------\n\nTITLE: Running Watermill Example with Docker Compose\nDESCRIPTION: This command starts the Watermill example application using Docker Compose, which sets up the necessary environment including Golang, Kafka, and Zookeeper.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/_examples/basic/1-your-first-app/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up\n```\n\n----------------------------------------\n\nTITLE: NATS Streaming Docker Compose Configuration for Watermill\nDESCRIPTION: Docker Compose configuration to run NATS Streaming locally for development with Watermill.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/getting-started.md#2025-04-19_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\nservices:\n  nats-streaming:\n    image: nats-streaming:0.22.0\n    command: [\"-p\", \"4222\", \"-m\", \"8222\"]\n    ports:\n      - \"4222:4222\"\n      - \"8222:8222\"\n  golang:\n    image: golang:1.19\n    restart: unless-stopped\n    depends_on:\n      - nats-streaming\n    volumes:\n      - .:/app\n    working_dir: /app\n    command: go run main.go\n```\n\n----------------------------------------\n\nTITLE: Querying PostgreSQL Database Contents\nDESCRIPTION: Command to inspect the users table in the PostgreSQL database after synchronization. This shows the destination data that has been transferred from MySQL.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/_examples/real-world-examples/synchronizing-databases/README.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose exec postgres psql -U watermill -d watermill -c 'select * from users;'\n```\n\n----------------------------------------\n\nTITLE: Installing Watermill Kafka Module\nDESCRIPTION: Command to install the Watermill Kafka integration module using Go modules.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/pubsubs/kafka.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/ThreeDotsLabs/watermill-kafka/v3\n```\n\n----------------------------------------\n\nTITLE: AWS SQS Docker Compose Configuration for Watermill\nDESCRIPTION: Docker Compose configuration to run LocalStack (AWS services emulator) for SQS locally for development with Watermill.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/getting-started.md#2025-04-19_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\nservices:\n  localstack:\n    image: localstack/localstack:latest\n    ports:\n      - \"4566:4566\"            # LocalStack Gateway\n      - \"4510-4559:4510-4559\"  # external services port range\n    environment:\n      - SERVICES=sqs\n      - DEBUG=1\n      - DATA_DIR=/tmp/localstack/data\n      - DOCKER_HOST=unix:///var/run/docker.sock\n      - AWS_DEFAULT_REGION=us-east-1\n      - AWS_ACCESS_KEY_ID=access\n      - AWS_SECRET_ACCESS_KEY=secret\n    volumes:\n      - \"./init-aws.sh:/etc/localstack/init/ready.d/init-aws.sh\"\n      - \"/var/run/docker.sock:/var/run/docker.sock\"\n  golang:\n    image: golang:1.19\n    restart: unless-stopped\n    depends_on:\n      - localstack\n    volumes:\n      - .:/app\n    working_dir: /app\n    command: go run main.go\n```\n\n----------------------------------------\n\nTITLE: Generating Clean Go Module Files for Watermill Release\nDESCRIPTION: Command to generate a clean go.mod file as part of the Watermill release procedure.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/RELEASE-PROCEDURE.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake generate_gomod\n```\n\n----------------------------------------\n\nTITLE: Marshaler Interface Definition\nDESCRIPTION: Interface definition for message marshaling between Watermill messages and byte slices for Bolt storage\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/pubsubs/bolt.md#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Marshaler\n```\n\n----------------------------------------\n\nTITLE: Piping Service Output to Kafka Producer\nDESCRIPTION: An advanced usage example demonstrating how to pipe the output of a service through 'tee' for local logging, and then use 'mill' to produce messages to a Kafka topic. This allows for both local and distributed logging of service output.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/tools/mill/README.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmyservice | tee myservice.log | mill kafka produce -t myservice-logs --brokers kafka-host:8082\n```\n\n----------------------------------------\n\nTITLE: Continuous File Reading Example\nDESCRIPTION: Example showing how to implement continuous file reading similar to tail -f command\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/pubsubs/io.md#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// this will read the file continuously, similar to `tail -f`\nreturn false\n```\n\n----------------------------------------\n\nTITLE: Defining QueueUrlResolver Interface in Go\nDESCRIPTION: Interface definition for QueueUrlResolver used to resolve SQS queue URLs in Watermill.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/pubsubs/aws.md#2025-04-19_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// QueueUrlResolver is used to resolve the queue URL based on the topic name.\ntype QueueUrlResolver interface {\n\tResolveQueueURL(ctx context.Context, topicName string) (string, error)\n}\n\n// GenerateQueueUrlResolver is a function that generates a QueueUrlResolver.\ntype GenerateQueueUrlResolver func(client *amazonsqs.Client) QueueUrlResolver\n```\n\n----------------------------------------\n\nTITLE: Updating Go-Channel Pub/Sub Import Path\nDESCRIPTION: This bash command updates the import path for the go-channel Pub/Sub implementation, which remains within the main Watermill package but moves to a different subdirectory.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/UPGRADE-1.0.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfind . -type f -iname '*.go' -exec sed -i -E \"s/github\\.com\\/ThreeDotsLabs\\/watermill\\/message\\/infrastructure\\/gochannel/github\\.com\\/ThreeDotsLabs\\/watermill\\/pubsub\\/gochannel/\" \"{}\" +;\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose for Watermill Consumer Groups Example\nDESCRIPTION: Command to start the Docker containers for the interactive Consumer Groups example. This will set up the necessary services and make the demo accessible via a web browser.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/_examples/real-world-examples/consumer-groups/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up\n```\n\n----------------------------------------\n\nTITLE: Embedding Watermill Releases Tracker in HTML\nDESCRIPTION: This snippet embeds an iframe that displays the Watermill releases tracker from releases.threedots.tech. The iframe is set to full width and a height of 1000 pixels, with no border.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/development/releases.md#2025-04-19_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe src=\"https://releases.threedots.tech\" frameborder=\"0\" style=\"border: 0; width: 100%; height: 1000px\"></iframe>\n```\n\n----------------------------------------\n\nTITLE: Building and Running Watermill.io Documentation\nDESCRIPTION: Commands to build and run the watermill.io documentation locally. This involves executing a build script and then starting a development server.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/DEVELOP.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./build.sh\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Removing Google Cloud Pub/Sub Subscription\nDESCRIPTION: Command to remove an existing subscription from Google Cloud Pub/Sub using the 'mill' tool.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/tools/mill/README.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmill googlecloud subscription rm <subscription_id>\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Frontmatter for Watermill Documentation Page\nDESCRIPTION: This YAML frontmatter block sets up the configuration for a Hugo documentation page in the Watermill project. It includes metadata such as title, description, date, draft status, weight, table of contents setting, and SEO parameters.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/_index.md#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"Docs\"\ndescription: \"\"\nsummary: \"\"\ndate: 2023-09-07T16:12:03+02:00\nlastmod: 2023-09-07T16:12:03+02:00\ndraft: false\nweight: 999\ntoc: true\nseo:\n  title: \"\" # custom title (optional)\n  description: \"\" # custom description (recommended)\n  canonical: \"\" # custom canonical URL (optional)\n  noindex: false # false (default) or true\n---\n```\n\n----------------------------------------\n\nTITLE: Setting PostgreSQL Connection for Delayed Requeue Example\nDESCRIPTION: Example of setting the DATABASE_URL environment variable for connecting to a PostgreSQL database used in the delayed requeue example.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/tools/pq/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport DATABASE_URL=\"postgres://watermill:password@postgres:5432/watermill?sslmode=disable\"\n```\n\n----------------------------------------\n\nTITLE: Validating Examples During Watermill Release\nDESCRIPTION: Command to update and validate examples as part of the Watermill release procedure.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/RELEASE-PROCEDURE.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake validate_examples\n```\n\n----------------------------------------\n\nTITLE: Using pq with Custom Prefix\nDESCRIPTION: Command to run pq CLI tool with PostgreSQL backend and a specific topic using a custom prefix via the -raw-topic flag.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/tools/pq/README.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npq -backend postgres -raw-topic my_prefix_requeue\n```\n\n----------------------------------------\n\nTITLE: Adding Google Cloud Pub/Sub Subscription\nDESCRIPTION: Command to create a new subscription for a Google Cloud Pub/Sub topic using the 'mill' tool. Additional flags can be used to configure the subscription's settings.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/tools/mill/README.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmill googlecloud subscription add -t <topic> <subscription_id>\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Watermill Documentation Page\nDESCRIPTION: This YAML frontmatter block configures metadata for the Watermill documentation page, including title, description, dates, and SEO settings.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/_index.md#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"Watermill\"\ndescription: \"Building event-driven applications the easy way in Go.\"\nlead: \"Building event-driven applications the easy way in Go.\"\ndate: 2023-09-07T16:33:54+02:00\nlastmod: 2023-09-07T16:33:54+02:00\ndraft: false\nseo:\n  title: \"Watermill\" # custom title (optional)\n  description: \"\" # custom description (recommended)\n  canonical: \"\" # custom canonical URL (optional)\n  noindex: false # false (default) or true\n---\n```\n\n----------------------------------------\n\nTITLE: Using pq with Default Prefix\nDESCRIPTION: Basic command to run pq CLI tool with PostgreSQL backend and a specific topic, using the default 'watermill_' prefix.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/tools/pq/README.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npq -backend postgres -topic requeue\n```\n\n----------------------------------------\n\nTITLE: Implementing HandlerName for Event Handlers in Go\nDESCRIPTION: Implementation of the newly required HandlerName method for EventHandler interface to maintain backward compatibility with metrics component naming conventions.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/UPGRADE-0.4.md#2025-04-19_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (h EventHandler) HandlerName() string {\n    return fmt.Sprintf(\"event_processor-%s\", ObjectName(h))\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Test Output with Grep\nDESCRIPTION: Commands demonstrating how to use grep to filter test logs by UUID, allowing for focused troubleshooting of specific test cases.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/troubleshooting.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n> go test -v ./... > test.out\n\n> less test.out\n\n// ...\n\n--- PASS: TestPublishSubscribe (0.00s)\n    --- PASS: TestPublishSubscribe/TestPublishSubscribe (2.38s)\n        --- PASS: TestPublishSubscribe/TestPublishSubscribe/81eeb56c-3336-4eb9-a0ac-13abda6f38ff (2.38s)\n```\n\n----------------------------------------\n\nTITLE: Watermill Package Interface Changes in Markdown\nDESCRIPTION: Documentation of breaking changes in the watermill/message, watermill/message/infrastructure, watermill/message/router/middleware, and watermill packages when upgrading from version 0.2.x to 0.3.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/UPGRADE-0.3.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# UPGRADE FROM 0.2.x to 0.3\n\n# `watermill/message`\n\n- `message.Message.Ack` and `message.Message.Nack` now return `bool` instead of `error`\n- `message.Subscriber.Subscribe` now accepts `context.Context` as the first argument\n- `message.Subscriber.Subscribe` now returns `<-chan *Message` instead of `chan *Message`\n- `message.Router.AddHandler` and `message.Router.AddNoPublisherHandler` now panic, instead of returning error\n\n# `watermill/message/infrastructure`\n\n- updated all Pub/Subs to new `message.Subscriber` interface\n- `gochannel.NewGoChannel` now accepts `gochannel.Config`, instead of positional parameters\n- `http.NewSubscriber` now accepts `http.SubscriberConfig`, instead of positional parameters\n\n# `watermill/message/router/middleware`\n\n- `metrics.NewMetrics` is removed, please use the [metrics](components/metrics) component instead\n\n# `watermill`\n\n- `watermill.LoggerAdapter` interface now requires a `With(fields LogFields) LoggerAdapter` method\n```\n\n----------------------------------------\n\nTITLE: Migrating Pub/Sub Import Paths in Go Files\nDESCRIPTION: This bash command uses find and sed to update import paths for Pub/Subs in Go files, moving them to separate repositories. It handles AMQP, Google Cloud, HTTP, IO, Kafka, NATS, and SQL implementations.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/UPGRADE-1.0.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfind . -type f -iname '*.go' -exec sed -i -E \"s/github\\.com\\/ThreeDotsLabs\\/watermill\\/message\\/infrastructure\\/(amqp|googlecloud|http|io|kafka|nats|sql)/github.com\\/ThreeDotsLabs\\/watermill-\\1\\/pkg\\/\\1/\" \"{}\" +;\n```\n\n----------------------------------------\n\nTITLE: AWS SNS Docker Compose Configuration for Watermill\nDESCRIPTION: Docker Compose configuration to run LocalStack (AWS services emulator) for SNS and SQS locally for development with Watermill.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/getting-started.md#2025-04-19_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\nservices:\n  localstack:\n    image: localstack/localstack:latest\n    ports:\n      - \"4566:4566\"            # LocalStack Gateway\n      - \"4510-4559:4510-4559\"  # external services port range\n    environment:\n      - SERVICES=sns,sqs\n      - DEBUG=1\n      - DATA_DIR=/tmp/localstack/data\n      - DOCKER_HOST=unix:///var/run/docker.sock\n      - AWS_DEFAULT_REGION=us-east-1\n      - AWS_ACCESS_KEY_ID=access\n      - AWS_SECRET_ACCESS_KEY=secret\n    volumes:\n      - \"./init-aws.sh:/etc/localstack/init/ready.d/init-aws.sh\"\n      - \"/var/run/docker.sock:/var/run/docker.sock\"\n  golang:\n    image: golang:1.19\n    restart: unless-stopped\n    depends_on:\n      - localstack\n    volumes:\n      - .:/app\n    working_dir: /app\n    command: go run main.go\n```\n\n----------------------------------------\n\nTITLE: Kafka Docker Compose Configuration for Watermill\nDESCRIPTION: Docker Compose configuration to run Kafka locally for development with Watermill.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/getting-started.md#2025-04-19_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\nservices:\n  zookeeper:\n    image: confluentinc/cp-zookeeper:7.0.0\n    container_name: zookeeper\n    environment:\n      ZOOKEEPER_CLIENT_PORT: 2181\n      ZOOKEEPER_TICK_TIME: 2000\n  kafka:\n    image: confluentinc/cp-kafka:7.0.0\n    container_name: kafka\n    ports:\n      - 9092:9092\n    depends_on:\n      - zookeeper\n    environment:\n      KAFKA_BROKER_ID: 1\n      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181\n      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092\n      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1\n      KAFKA_AUTO_CREATE_TOPICS_ENABLE: \"true\"\n  golang:\n    image: golang:1.19\n    container_name: golang\n    restart: unless-stopped\n    depends_on:\n      - kafka\n    volumes:\n      - .:/app\n    working_dir: /app\n    command: go run main.go\n```\n\n----------------------------------------\n\nTITLE: Documenting Server Sent Events Project with Go and htmx in Markdown\nDESCRIPTION: This Markdown snippet provides a brief introduction to the example project, explaining its purpose and referencing the related blog post. It sets the context for the implementation of live website updates using Go, SSE, and htmx.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/_examples/real-world-examples/server-sent-events-htmx/README.md#2025-04-19_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Server Sent Events (htmx)\n\nThis is an example project described in [Live website updates with Go, SSE, and htmx](https://threedots.tech/post/live-website-updates-go-sse-htmx/).\n```\n\n----------------------------------------\n\nTITLE: Google Cloud Pub/Sub Docker Compose Configuration for Watermill\nDESCRIPTION: Docker Compose configuration to run Google Cloud Pub/Sub emulator locally for development with Watermill.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/getting-started.md#2025-04-19_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\nservices:\n  pubsub:\n    image: google/cloud-sdk:272.0.0\n    ports:\n      - \"8085:8085\"\n    command: |\n      bash -c 'gcloud beta emulators pubsub start --host-port=0.0.0.0:8085'\n  golang:\n    image: golang:1.19\n    restart: unless-stopped\n    depends_on:\n      - pubsub\n    volumes:\n      - .:/app\n    working_dir: /app\n    environment:\n      PUBSUB_EMULATOR_HOST: pubsub:8085\n    command: go run main.go\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Messages with GoChannel\nDESCRIPTION: The Subscribe method documentation and function signature for receiving messages from a specific topic using the GoChannel implementation.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/pubsubs/gochannel.md#2025-04-19_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Subscribe subscribes messages from the topic.\n//\n// Subscribe for go-channel is little different than other implementations. It doesn't wait for Ack/Nack.\n// Messages are also not redelivered.\nfunc (g *GoChannel) Subscribe\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Docker Compose Configuration for Watermill\nDESCRIPTION: Docker Compose configuration to run RabbitMQ locally for development with Watermill.\nSOURCE: https://github.com/threedotslabs/watermill/blob/master/docs/content/docs/getting-started.md#2025-04-19_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\nservices:\n  rabbitmq:\n    image: rabbitmq:3.7.14-management\n    ports:\n      - 5672:5672\n      - 15672:15672\n  golang:\n    image: golang:1.19\n    restart: unless-stopped\n    depends_on:\n      - rabbitmq\n    volumes:\n      - .:/app\n    working_dir: /app\n    command: go run main.go\n```"
  }
]