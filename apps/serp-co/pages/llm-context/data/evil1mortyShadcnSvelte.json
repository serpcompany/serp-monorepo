[
  {
    "owner": "evil1morty",
    "repo": "shadcn-svelte",
    "content": "TITLE: Configuring Tailwind CSS with Custom Theme Settings\nDESCRIPTION: Complete tailwind.config.js file that sets up the theme with custom colors, border radius, font family, keyframes, and animations. It includes dark mode support and uses CSS variables for theming.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/installation/manual.md#2025-04-15_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { fontFamily } from \"tailwindcss/defaultTheme\";\nimport tailwindcssAnimate from \"tailwindcss-animate\";\n\n/** @type {import('tailwindcss').Config} */\nconst config = {\n  darkMode: [\"class\"],\n  content: [\"./src/**/*.{html,js,svelte,ts}\"],\n  safelist: [\"dark\"],\n  theme: {\n    container: {\n      center: true,\n      padding: \"2rem\",\n      screens: {\n        \"2xl\": \"1400px\",\n      },\n    },\n    extend: {\n      colors: {\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n        },\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      borderRadius: {\n        xl: \"calc(var(--radius) + 4px)\",\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      fontFamily: {\n        sans: [\"geist-sans\", ...fontFamily.sans],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--bits-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--bits-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n        \"caret-blink\": {\n          \"0%,70%,100%\": { opacity: \"1\" },\n          \"20%,50%\": { opacity: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"caret-blink\": \"caret-blink 1.25s ease-out infinite\",\n      },\n    },\n  },\n  plugins: [tailwindcssAnimate],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Implementing DataTable with Column Visibility in Svelte\nDESCRIPTION: A complete implementation of a DataTable component in Svelte with column visibility toggles. It uses TanStack table core functionality and Shadcn UI components to create a data table with sorting, filtering, pagination, and column visibility features.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/data-table.md#2025-04-15_snippet_14\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\" generics=\"TData, TValue\">\n  import {\n    type ColumnDef,\n    type PaginationState,\n    type SortingState,\n    type ColumnFiltersState,\n    type VisibilityState,\n    getCoreRowModel,\n    getPaginationRowModel,\n    getSortedRowModel,\n    getFilteredRowModel,\n  } from \"@tanstack/table-core\";\n  import * as DropdownMenu from \"$lib/components/ui/dropdown-menu/index.js\";\n\n  let { columns, data }: DataTableProps<TData, TValue> = $props();\n\n  let pagination = $state<PaginationState>({ pageIndex: 0, pageSize: 10 });\n  let sorting = $state<SortingState>([]);\n  let columnFilters = $state<ColumnFiltersState>([]);\n  let columnVisibility = $state<VisibilityState>({});\n\n  const table = createSvelteTable({\n    get data() {\n      return data;\n    },\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    onPaginationChange: (updater) => {\n      if (typeof updater === \"function\") {\n        pagination = updater(pagination);\n      } else {\n        pagination = updater;\n      }\n    },\n    onSortingChange: (updater) => {\n      if (typeof updater === \"function\") {\n        sorting = updater(sorting);\n      } else {\n        sorting = updater;\n      }\n    },\n    onColumnFiltersChange: (updater) => {\n      if (typeof updater === \"function\") {\n        columnFilters = updater(columnFilters);\n      } else {\n        columnFilters = updater;\n      }\n    },\n    onColumnVisibilityChange: (updater) => {\n      if (typeof updater === \"function\") {\n        columnVisibility = updater(columnVisibility);\n      } else {\n        columnVisibility = updater;\n      }\n    },\n    state: {\n      get pagination() {\n        return pagination;\n      },\n      get sorting() {\n        return sorting;\n      },\n      get columnFilters() {\n        return columnFilters;\n      },\n      get columnVisibility() {\n        return columnVisibility;\n      },\n    },\n  });\n</script>\n\n<div>\n  <div class=\"flex items-center py-4\">\n    <Input\n      placeholder=\"Filter emails...\"\n      value={table.getColumn(\"email\")?.getFilterValue() as string}\n      onchange={(e) =>\n        table.getColumn(\"email\")?.setFilterValue(e.currentTarget.value)}\n      oninput={(e) =>\n        table.getColumn(\"email\")?.setFilterValue(e.currentTarget.value)}\n      class=\"max-w-sm\"\n    />\n    <DropdownMenu.Root>\n      <DropdownMenu.Trigger>\n        {#snippet child({ props })}\n          <Button {...props} variant=\"outline\" class=\"ml-auto\">Columns</Button>\n        {/snippet}\n      </DropdownMenu.Trigger>\n      <DropdownMenu.Content align=\"end\">\n        {#each table\n          .getAllColumns()\n          .filter((col) => col.getCanHide()) as column (column.id)}\n          <DropdownMenu.CheckboxItem\n            class=\"capitalize\"\n            bind:checked={\n              () => column.getIsVisible(), (v) => column.toggleVisibility(!!v)\n            }\n          >\n            {column.id}\n          </DropdownMenu.CheckboxItem>\n        {/each}\n      </DropdownMenu.Content>\n    </DropdownMenu.Root>\n  </div>\n  <div class=\"rounded-md border\">\n    <Table.Root><!--...--></Table.Root>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Building the DataTable Component with Svelte and TanStack Table\nDESCRIPTION: Creates a reusable DataTable component that integrates TanStack Table with Svelte components, handling data rendering, headers, and empty states.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/data-table.md#2025-04-15_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\" generics=\"TData, TValue\">\n  import { type ColumnDef, getCoreRowModel } from \"@tanstack/table-core\";\n  import {\n    createSvelteTable,\n    FlexRender,\n  } from \"$lib/components/ui/data-table/index.js\";\n  import * as Table from \"$lib/components/ui/table/index.js\";\n\n  type DataTableProps<TData, TValue> = {\n    columns: ColumnDef<TData, TValue>[];\n    data: TData[];\n  };\n\n  let { data, columns }: DataTableProps<TData, TValue> = $props();\n\n  const table = createSvelteTable({\n    get data() {\n      return data;\n    },\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n  });\n</script>\n\n<div class=\"rounded-md border\">\n  <Table.Root>\n    <Table.Header>\n      {#each table.getHeaderGroups() as headerGroup (headerGroup.id)}\n        <Table.Row>\n          {#each headerGroup.headers as header (header.id)}\n            <Table.Head>\n              {#if !header.isPlaceholder}\n                <FlexRender\n                  content={header.column.columnDef.header}\n                  context={header.getContext()}\n                />\n              {/if}\n            </Table.Head>\n          {/each}\n        </Table.Row>\n      {/each}\n    </Table.Header>\n    <Table.Body>\n      {#each table.getRowModel().rows as row (row.id)}\n        <Table.Row data-state={row.getIsSelected() && \"selected\"}>\n          {#each row.getVisibleCells() as cell (cell.id)}\n            <Table.Cell>\n              <FlexRender\n                content={cell.column.columnDef.cell}\n                context={cell.getContext()}\n              />\n            </Table.Cell>\n          {/each}\n        </Table.Row>\n      {:else}\n        <Table.Row>\n          <Table.Cell colspan={columns.length} class=\"h-24 text-center\">\n            No results.\n          </Table.Cell>\n        </Table.Row>\n      {/each}\n    </Table.Body>\n  </Table.Root>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating a Complete Sidebar with Navigation Menu\nDESCRIPTION: Full implementation of a sidebar with navigation menu items. This example demonstrates how to create a sidebar with grouped menu items, each with icons and labels, organized in a clean structure.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/sidebar.md#2025-04-15_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import Calendar from \"@lucide/svelte/icons/calendar\";\n  import House from \"@lucide/svelte/icons/house\";\n  import Inbox from \"@lucide/svelte/icons/inbox\";\n  import Search from \"@lucide/svelte/icons/search\";\n  import Settings from \"@lucide/svelte/icons/settings\";\n  import * as Sidebar from \"$lib/components/ui/sidebar/index.js\";\n\n  // Menu items.\n  const items = [\n    {\n      title: \"Home\",\n      url: \"#\",\n      icon: House,\n    },\n    {\n      title: \"Inbox\",\n      url: \"#\",\n      icon: Inbox,\n    },\n    {\n      title: \"Calendar\",\n      url: \"#\",\n      icon: Calendar,\n    },\n    {\n      title: \"Search\",\n      url: \"#\",\n      icon: Search,\n    },\n    {\n      title: \"Settings\",\n      url: \"#\",\n      icon: Settings,\n    },\n  ];\n</script>\n\n<Sidebar.Root>\n  <Sidebar.Content>\n    <Sidebar.Group>\n      <Sidebar.GroupLabel>Application</Sidebar.GroupLabel>\n      <Sidebar.GroupContent>\n        <Sidebar.Menu>\n          {#each items as item (item.title)}\n            <Sidebar.MenuItem>\n              <Sidebar.MenuButton>\n                {#snippet child({ props })}\n                  <a href={item.url} {...props}>\n                    <item.icon />\n                    <span>{item.title}</span>\n                  </a>\n                {/snippet}\n              </Sidebar.MenuButton>\n            </Sidebar.MenuItem>\n          {/each}\n        </Sidebar.Menu>\n      </Sidebar.GroupContent>\n    </Sidebar.Group>\n  </Sidebar.Content>\n</Sidebar.Root>\n```\n\n----------------------------------------\n\nTITLE: Implementing Filtering in Svelte Data Table\nDESCRIPTION: This snippet shows how to add filtering capabilities to a Svelte data table. It adds column filtering state, configures the filtered row model, and includes an input field for filtering by email column values.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/data-table.md#2025-04-15_snippet_13\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\" generics=\"TData, TValue\">\n  import {\n    type ColumnDef,\n    type PaginationState,\n    type SortingState,\n    type ColumnFiltersState,\n    getCoreRowModel,\n    getPaginationRowModel,\n    getSortedRowModel,\n    getFilteredRowModel,\n  } from \"@tanstack/table-core\";\n  import { Input } from \"$lib/components/ui/input/index.js\";\n\n  let { columns, data }: DataTableProps<TData, TValue> = $props();\n\n  let pagination = $state<PaginationState>({ pageIndex: 0, pageSize: 10 });\n  let sorting = $state<SortingState>([]);\n  let columnFilters = $state<ColumnFiltersState>([]);\n\n  const table = createSvelteTable({\n    get data() {\n      return data;\n    },\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    onPaginationChange: (updater) => {\n      if (typeof updater === \"function\") {\n        pagination = updater(pagination);\n      } else {\n        pagination = updater;\n      }\n    },\n    onSortingChange: (updater) => {\n      if (typeof updater === \"function\") {\n        sorting = updater(sorting);\n      } else {\n        sorting = updater;\n      }\n    },\n    onColumnFiltersChange: (updater) => {\n      if (typeof updater === \"function\") {\n        columnFilters = updater(columnFilters);\n      } else {\n        columnFilters = updater;\n      }\n    },\n    state: {\n      get pagination() {\n        return pagination;\n      },\n      get sorting() {\n        return sorting;\n      },\n      get columnFilters() {\n        return columnFilters;\n      },\n    },\n  });\n</script>\n\n<div>\n  <div class=\"flex items-center py-4\">\n    <Input\n      placeholder=\"Filter emails...\"\n      value={(table.getColumn(\"email\")?.getFilterValue() as string) ?? \"\"}\n      onchange={(e) => {\n        table.getColumn(\"email\")?.setFilterValue(e.currentTarget.value);\n      }}\n      oninput={(e) => {\n        table.getColumn(\"email\")?.setFilterValue(e.currentTarget.value);\n      }}\n      class=\"max-w-sm\"\n    />\n  </div>\n  <div class=\"rounded-md border\">\n    <Table.Root><!-- ... --></Table.Root>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing DataTable with Row Selection in Svelte\nDESCRIPTION: Enhanced version of the DataTable component with row selection capability. It builds upon the previous implementation by adding row selection state and handlers to the TanStack table configuration.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/data-table.md#2025-04-15_snippet_17\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\" generics=\"TData, TValue\">\n  import {\n    type ColumnDef,\n    type PaginationState,\n    type SortingState,\n    type ColumnFiltersState,\n    type VisibilityState,\n    type RowSelectionState,\n    getCoreRowModel,\n    getPaginationRowModel,\n    getSortedRowModel,\n    getFilteredRowModel,\n  } from \"@tanstack/table-core\";\n  import * as DropdownMenu from \"$lib/components/ui/dropdown-menu/index.js\";\n\n  let { columns, data }: DataTableProps<TData, TValue> = $props();\n\n  let pagination = $state<PaginationState>({ pageIndex: 0, pageSize: 10 });\n  let sorting = $state<SortingState>([]);\n  let columnFilters = $state<ColumnFiltersState>([]);\n  let columnVisibility = $state<VisibilityState>({});\n  let rowSelection = $state<RowSelectionState>({});\n\n  const table = createSvelteTable({\n    get data() {\n      return data;\n    },\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    onPaginationChange: (updater) => {\n      if (typeof updater === \"function\") {\n        pagination = updater(pagination);\n      } else {\n        pagination = updater;\n      }\n    },\n    onSortingChange: (updater) => {\n      if (typeof updater === \"function\") {\n        sorting = updater(sorting);\n      } else {\n        sorting = updater;\n      }\n    },\n    onColumnFiltersChange: (updater) => {\n      if (typeof updater === \"function\") {\n        columnFilters = updater(columnFilters);\n      } else {\n        columnFilters = updater;\n      }\n    },\n    onColumnVisibilityChange: (updater) => {\n      if (typeof updater === \"function\") {\n        columnVisibility = updater(columnVisibility);\n      } else {\n        columnVisibility = updater;\n      }\n    },\n    onRowSelectionChange: (updater) => {\n      if (typeof updater === \"function\") {\n        rowSelection = updater(rowSelection);\n      } else {\n        rowSelection = updater;\n      }\n    },\n    state: {\n      get pagination() {\n        return pagination;\n      },\n      get sorting() {\n        return sorting;\n      },\n      get columnFilters() {\n        return columnFilters;\n      },\n      get columnVisibility() {\n        return columnVisibility;\n      },\n      get rowSelection() {\n        return rowSelection;\n      },\n    },\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Combobox with Popover and Command Components in SvelteKit\nDESCRIPTION: This code demonstrates how to create a Combobox component by combining Popover and Command components. It creates a searchable dropdown selection with keyboard navigation support. The implementation includes handling the selected value state and refocusing the trigger button after selection.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/combobox.md#2025-04-15_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import Check from \"@lucide/svelte/icons/check\";\n  import ChevronsUpDown from \"@lucide/svelte/icons/chevrons-up-down\";\n  import { tick } from \"svelte\";\n  import * as Command from \"$lib/components/ui/command/index.js\";\n  import * as Popover from \"$lib/components/ui/popover/index.js\";\n  import { Button } from \"$lib/components/ui/button/index.js\";\n  import { cn } from \"$lib/utils.js\";\n\n  const frameworks = [\n    {\n      value: \"sveltekit\",\n      label: \"SvelteKit\",\n    },\n    {\n      value: \"next.js\",\n      label: \"Next.js\",\n    },\n    {\n      value: \"nuxt.js\",\n      label: \"Nuxt.js\",\n    },\n    {\n      value: \"remix\",\n      label: \"Remix\",\n    },\n    {\n      value: \"astro\",\n      label: \"Astro\",\n    },\n  ];\n\n  let open = $state(false);\n  let value = $state(\"\");\n  let triggerRef = $state<HTMLButtonElement>(null!);\n\n  const selectedValue = $derived(\n    frameworks.find((f) => f.value === value)?.label\n  );\n\n  // We want to refocus the trigger button when the user selects\n  // an item from the list so users can continue navigating the\n  // rest of the form with the keyboard.\n  function closeAndFocusTrigger() {\n    open = false;\n    tick().then(() => {\n      triggerRef.focus();\n    });\n  }\n</script>\n\n<Popover.Root bind:open>\n  <Popover.Trigger bind:ref={triggerRef}>\n    {#snippet child({ props })}\n      <Button\n        variant=\"outline\"\n        class=\"w-[200px] justify-between\"\n        {...props}\n        role=\"combobox\"\n        aria-expanded={open}\n      >\n        {selectedValue || \"Select a framework...\"}\n        <ChevronsUpDown class=\"ml-2 size-4 shrink-0 opacity-50\" />\n      </Button>\n    {/snippet}\n  </Popover.Trigger>\n  <Popover.Content class=\"w-[200px] p-0\">\n    <Command.Root>\n      <Command.Input placeholder=\"Search framework...\" />\n      <Command.List>\n        <Command.Empty>No framework found.</Command.Empty>\n        <Command.Group>\n          {#each frameworks as framework}\n            <Command.Item\n              value={framework.value}\n              onSelect={() => {\n                value = framework.value;\n                closeAndFocusTrigger();\n              }}\n            >\n              <Check\n                class={cn(\n                  \"mr-2 size-4\",\n                  value !== framework.value && \"text-transparent\"\n                )}\n              />\n              {framework.label}\n            </Command.Item>\n          {/each}\n        </Command.Group>\n      </Command.List>\n    </Command.Root>\n  </Popover.Content>\n</Popover.Root>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Date Picker in Svelte\nDESCRIPTION: A basic date picker implementation using Popover and Calendar components. Features include date formatting, timezone handling, and a customizable trigger button. The component uses TypeScript for type safety and internationalized date handling.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/date-picker.md#2025-04-15_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import CalendarIcon from \"@lucide/svelte/icons/calendar\";\n  import {\n    type DateValue,\n    DateFormatter,\n    getLocalTimeZone,\n  } from \"@internationalized/date\";\n  import { cn } from \"$lib/utils.js\";\n  import { Button } from \"$lib/components/ui/button/index.js\";\n  import { Calendar } from \"$lib/components/ui/calendar/index.js\";\n  import * as Popover from \"$lib/components/ui/popover/index.js\";\n\n  const df = new DateFormatter(\"en-US\", {\n    dateStyle: \"long\",\n  });\n\n  let value = $state<DateValue>();\n</script>\n\n<Popover.Root>\n  <Popover.Trigger>\n    {#snippet child({ props })}\n      <Button\n        variant=\"outline\"\n        class={cn(\n          \"w-[280px] justify-start text-left font-normal\",\n          !value && \"text-muted-foreground\"\n        )}\n        {...props}\n      >\n        <CalendarIcon class=\"mr-2 size-4\" />\n        {value ? df.format(value.toDate(getLocalTimeZone())) : \"Select a date\"}\n      </Button>\n    {/snippet}\n  </Popover.Trigger>\n  <Popover.Content class=\"w-auto p-0\">\n    <Calendar bind:value type=\"single\" initialFocus />\n  </Popover.Content>\n</Popover.Root>\n```\n\n----------------------------------------\n\nTITLE: Basic Dropdown Menu Implementation in Svelte\nDESCRIPTION: Demonstrates the basic structure of a dropdown menu component with a trigger, content group, label, separator, and menu items. Uses the bits-ui dropdown menu component imported from the local components directory.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/dropdown-menu.md#2025-04-15_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import * as DropdownMenu from \"$lib/components/ui/dropdown-menu/index.js\";\n</script>\n\n<DropdownMenu.Root>\n  <DropdownMenu.Trigger>Open</DropdownMenu.Trigger>\n  <DropdownMenu.Content>\n    <DropdownMenu.Group>\n      <DropdownMenu.Label>My Account</DropdownMenu.Label>\n      <DropdownMenu.Separator />\n      <DropdownMenu.Item>Profile</DropdownMenu.Item>\n      <DropdownMenu.Item>Billing</DropdownMenu.Item>\n      <DropdownMenu.Item>Team</DropdownMenu.Item>\n      <DropdownMenu.Item>Subscription</DropdownMenu.Item>\n    </DropdownMenu.Group>\n  </DropdownMenu.Content>\n</DropdownMenu.Root>\n```\n\n----------------------------------------\n\nTITLE: Command Dialog with Keyboard Shortcut Integration in Svelte\nDESCRIPTION: Implements a command menu in a dialog that can be toggled with Cmd+K or Ctrl+K keyboard shortcut. This example shows how to bind state to control the dialog's open state and handle keyboard events at the document level.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/command.md#2025-04-15_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import * as Command from \"$lib/components/ui/command/index.js\";\n  import { onMount } from \"svelte\";\n\n  let open = $state(false);\n\n  function handleKeydown(e: KeyboardEvent) {\n    if (e.key === \"k\" && (e.metaKey || e.ctrlKey)) {\n      e.preventDefault();\n      open = !open;\n    }\n  }\n</script>\n\n<svelte:document onkeydown={handleKeydown} />\n\n<Command.Dialog bind:open>\n  <Command.Input placeholder=\"Type a command or search...\" />\n  <Command.List>\n    <Command.Empty>No results found.</Command.Empty>\n    <Command.Group heading=\"Suggestions\">\n      <Command.Item>Calendar</Command.Item>\n      <Command.Item>Search Emoji</Command.Item>\n      <Command.Item>Calculator</Command.Item>\n    </Command.Group>\n  </Command.List>\n</Command.Dialog>\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination Component in Svelte\nDESCRIPTION: Example of how to implement the Pagination component in a Svelte application. This snippet demonstrates creating a paginated interface with previous/next buttons, ellipsis for page gaps, and clickable page links. The pagination is configured for 100 items with 10 items per page.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/pagination.md#2025-04-15_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import * as Pagination from \"$lib/components/ui/pagination/index.js\";\n</script>\n\n<Pagination.Root count={100} perPage={10}>\n  {#snippet children({ pages, currentPage })}\n    <Pagination.Content>\n      <Pagination.Item>\n        <Pagination.PrevButton />\n      </Pagination.Item>\n      {#each pages as page (page.key)}\n        {#if page.type === \"ellipsis\"}\n          <Pagination.Item>\n            <Pagination.Ellipsis />\n          </Pagination.Item>\n        {:else}\n          <Pagination.Item isVisible={currentPage === page.value}>\n            <Pagination.Link {page} isActive={currentPage === page.value}>\n              {page.value}\n            </Pagination.Link>\n          </Pagination.Item>\n        {/if}\n      {/each}\n      <Pagination.Item>\n        <Pagination.NextButton />\n      </Pagination.Item>\n    </Pagination.Content>\n  {/snippet}\n</Pagination.Root>\n```\n\n----------------------------------------\n\nTITLE: Basic Form Structure in Svelte\nDESCRIPTION: Demonstrates the basic structure of a form using Formsnap components in Svelte.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/form.md#2025-04-15_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<form>\n  <Form.Field>\n    <Form.Control>\n      <Form.Label />\n      <!-- Any Form input component -->\n    </Form.Control>\n    <Form.Description />\n    <Form.FieldErrors />\n  </Form.Field>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Creating Column Definitions for TanStack Table\nDESCRIPTION: Defines the column structure for the payments data table using TanStack Table's ColumnDef type, specifying accessors and headers for each column.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/data-table.md#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { ColumnDef } from \"@tanstack/table-core\";\n\n// This type is used to define the shape of our data.\n// You can use a Zod schema here if you want.\nexport type Payment = {\n  id: string;\n  amount: number;\n  status: \"pending\" | \"processing\" | \"success\" | \"failed\";\n  email: string;\n};\n\nexport const columns: ColumnDef<Payment>[] = [\n  {\n    accessorKey: \"status\",\n    header: \"Status\",\n  },\n  {\n    accessorKey: \"email\",\n    header: \"Email\",\n  },\n  {\n    accessorKey: \"amount\",\n    header: \"Amount\",\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Creating Application Layout with Sidebar\nDESCRIPTION: Base layout template that sets up the sidebar provider and structure. It imports the sidebar components and wraps the application content, providing the foundation for the sidebar implementation.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/sidebar.md#2025-04-15_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import * as Sidebar from \"$lib/components/ui/sidebar/index.js\";\n  import AppSidebar from \"$lib/components/app-sidebar.svelte\";\n\n  let { children } = $props();\n</script>\n\n<Sidebar.Provider>\n  <AppSidebar />\n  <main>\n    <Sidebar.Trigger />\n    {@render children?.()}\n  </main>\n</Sidebar.Provider>\n```\n\n----------------------------------------\n\nTITLE: Implementing Sorting in Svelte Data Table\nDESCRIPTION: This code updates the DataTable component to support sorting functionality. It adds state management for sorting state and configures the table with sorted row models and appropriate event handlers.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/data-table.md#2025-04-15_snippet_11\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\" generics=\"TData, TValue\">\n  import {\n    type ColumnDef,\n    type PaginationState,\n    type SortingState,\n    getCoreRowModel,\n    getPaginationRowModel,\n    getSortedRowModel,\n  } from \"@tanstack/table-core\";\n\n  let { columns, data }: DataTableProps<TData, TValue> = $props();\n\n  let pagination = $state<PaginationState>({ pageIndex: 0, pageSize: 10 });\n  let sorting = $state<SortingState>([]);\n\n  const table = createSvelteTable({\n    get data() {\n      return data;\n    },\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    onSortingChange: (updater) => {\n      if (typeof updater === \"function\") {\n        sorting = updater(sorting);\n      } else {\n        sorting = updater;\n      }\n    },\n    onPaginationChange: (updater) => {\n      if (typeof updater === \"function\") {\n        pagination = updater(pagination);\n      } else {\n        pagination = updater;\n      }\n    },\n    state: {\n      get pagination() {\n        return pagination;\n      },\n      get sorting() {\n        return sorting;\n      },\n    },\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating a Form Component in Svelte\nDESCRIPTION: Shows how to create a form component using Formsnap, Superforms, and Zod in Svelte.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/form.md#2025-04-15_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import * as Form from \"$lib/components/ui/form/index.js\";\n  import { Input } from \"$lib/components/ui/input/index.js\";\n  import { formSchema, type FormSchema } from \"./schema\";\n  import {\n    type SuperValidated,\n    type Infer,\n    superForm,\n  } from \"sveltekit-superforms\";\n  import { zodClient } from \"sveltekit-superforms/adapters\";\n\n  let { data }: { data: { form: SuperValidated<Infer<FormSchema>> } } =\n    $props();\n\n  const form = superForm(data.form, {\n    validators: zodClient(formSchema),\n  });\n\n  const { form: formData, enhance } = form;\n</script>\n\n<form method=\"POST\" use:enhance>\n  <Form.Field {form} name=\"username\">\n    <Form.Control>\n      {#snippet children({ props })}\n        <Form.Label>Username</Form.Label>\n        <Input {...props} bind:value={$formData.username} />\n      {/snippet}\n    </Form.Control>\n    <Form.Description>This is your public display name.</Form.Description>\n    <Form.FieldErrors />\n  </Form.Field>\n  <Form.Button>Submit</Form.Button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Using Dialog Component in Svelte\nDESCRIPTION: Example of how to implement the Dialog component in a Svelte application. The code shows the basic structure with Dialog.Root, Dialog.Trigger, Dialog.Content, Dialog.Header, Dialog.Title, and Dialog.Description elements.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/dialog.md#2025-04-15_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import * as Dialog from \"$lib/components/ui/dialog/index.js\";\n</script>\n\n<Dialog.Root>\n  <Dialog.Trigger>Open</Dialog.Trigger>\n  <Dialog.Content>\n    <Dialog.Header>\n      <Dialog.Title>Are you sure absolutely sure?</Dialog.Title>\n      <Dialog.Description>\n        This action cannot be undone. This will permanently delete your account\n        and remove your data from our servers.\n      </Dialog.Description>\n    </Dialog.Header>\n  </Dialog.Content>\n</Dialog.Root>\n```\n\n----------------------------------------\n\nTITLE: Implementing Select Component in Svelte\nDESCRIPTION: Basic implementation of the Select component showing how to create a theme selector with Light, Dark, and System options. The example demonstrates the component structure with Root, Trigger, Content, and Item subcomponents.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/select.md#2025-04-15_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import * as Select from \"$lib/components/ui/select/index.js\";\n</script>\n\n<Select.Root type=\"single\">\n  <Select.Trigger class=\"w-[180px]\"></Select.Trigger>\n  <Select.Content>\n    <Select.Item value=\"light\">Light</Select.Item>\n    <Select.Item value=\"dark\">Dark</Select.Item>\n    <Select.Item value=\"system\">System</Select.Item>\n  </Select.Content>\n</Select.Root>\n```\n\n----------------------------------------\n\nTITLE: Defining Selection Column for Data Table in TypeScript\nDESCRIPTION: TypeScript definition of a selection column for a data table using TanStack Table. It adds checkbox functionality for both the header (to select all rows) and individual cells (to select single rows).\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/data-table.md#2025-04-15_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { ColumnDef } from \"@tanstack/table-core\";\nimport { renderComponent } from \"$lib/components/ui/data-table/index.js\";\nimport { Checkbox } from \"$lib/components/ui/checkbox/index.js\";\n\nexport const columns: ColumnDef<Payment>[] = [\n  // ...\n  {\n    id: \"select\",\n    header: ({ table }) =>\n      renderComponent(Checkbox, {\n        checked: table.getIsAllPageRowsSelected(),\n        indeterminate:\n          table.getIsSomePageRowsSelected() &&\n          !table.getIsAllPageRowsSelected(),\n        onCheckedChange: (value) => table.toggleAllPageRowsSelected(!!value),\n        \"aria-label\": \"Select all\",\n      }),\n    cell: ({ row }) =>\n      renderComponent(Checkbox, {\n        checked: row.getIsSelected(),\n        onCheckedChange: (value) => row.toggleSelected(!!value),\n        \"aria-label\": \"Select row\",\n      }),\n    enableSorting: false,\n    enableHiding: false,\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Tooltip Component in Svelte\nDESCRIPTION: Example showing how to implement a basic tooltip component using Shadcn-Svelte. The code demonstrates the provider, root, trigger, and content structure for creating an interactive tooltip that appears on hover.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/tooltip.md#2025-04-15_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import * as Tooltip from \"$lib/components/ui/tooltip/index.js\";\n</script>\n\n<Tooltip.Provider>\n  <Tooltip.Root>\n    <Tooltip.Trigger>Hover</Tooltip.Trigger>\n    <Tooltip.Content>\n      <p>Add to library</p>\n    </Tooltip.Content>\n  </Tooltip.Root>\n</Tooltip.Provider>\n```\n\n----------------------------------------\n\nTITLE: Handling Form Submission in SvelteKit\nDESCRIPTION: Shows how to create an action that handles form submission in SvelteKit using Superforms and Zod.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/form.md#2025-04-15_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { PageServerLoad, Actions } from \"./$types.js\";\nimport { fail } from \"@sveltejs/kit\";\nimport { superValidate } from \"sveltekit-superforms\";\nimport { zod } from \"sveltekit-superforms/adapters\";\nimport { formSchema } from \"./schema\";\n\nexport const load: PageServerLoad = async () => {\n  return {\n    form: await superValidate(zod(formSchema)),\n  };\n};\n\nexport const actions: Actions = {\n  default: async (event) => {\n    const form = await superValidate(event, zod(formSchema));\n    if (!form.valid) {\n      return fail(400, {\n        form,\n      });\n    }\n    return {\n      form,\n    };\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Alert Dialog Component in Svelte\nDESCRIPTION: This code snippet demonstrates how to use the Alert Dialog component in a Svelte application. It shows the basic structure with trigger, content, header with title and description, and footer with cancel and action buttons. The component requires importing from the UI library.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/alert-dialog.md#2025-04-15_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import * as AlertDialog from \"$lib/components/ui/alert-dialog/index.js\";\n</script>\n\n<AlertDialog.Root>\n  <AlertDialog.Trigger>Open</AlertDialog.Trigger>\n  <AlertDialog.Content>\n    <AlertDialog.Header>\n      <AlertDialog.Title>Are you absolutely sure?</AlertDialog.Title>\n      <AlertDialog.Description>\n        This action cannot be undone. This will permanently delete your account\n        and remove your data from our servers.\n      </AlertDialog.Description>\n    </AlertDialog.Header>\n    <AlertDialog.Footer>\n      <AlertDialog.Cancel>Cancel</AlertDialog.Cancel>\n      <AlertDialog.Action>Continue</AlertDialog.Action>\n    </AlertDialog.Footer>\n  </AlertDialog.Content>\n</AlertDialog.Root>\n```\n\n----------------------------------------\n\nTITLE: Using Card Component in Svelte\nDESCRIPTION: Demonstrates how to implement a basic card component with header, content, and footer sections using the Card component library. The component supports title, description, main content, and footer elements.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/card.md#2025-04-15_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import * as Card from \"$lib/components/ui/card/index.js\";\n</script>\n\n<Card.Root>\n  <Card.Header>\n    <Card.Title>Card Title</Card.Title>\n    <Card.Description>Card Description</Card.Description>\n  </Card.Header>\n  <Card.Content>\n    <p>Card Content</p>\n  </Card.Content>\n  <Card.Footer>\n    <p>Card Footer</p>\n  </Card.Footer>\n</Card.Root>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Sidebar Menu Structure with Projects List in Svelte\nDESCRIPTION: This snippet demonstrates how to build a basic sidebar menu structure with a list of projects. It shows the hierarchical structure of Sidebar components including Root, Content, Group, Menu, and MenuItem components.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/sidebar.md#2025-04-15_snippet_18\n\nLANGUAGE: svelte\nCODE:\n```\n<Sidebar.Root>\n  <Sidebar.Content>\n    <Sidebar.Group>\n      <Sidebar.GroupLabel>Projects</Sidebar.GroupLabel>\n      <Sidebar.GroupContent>\n        <Sidebar.Menu>\n          {#each projects as project}\n            <Sidebar.MenuItem>\n              <Sidebar.MenuButton>\n                {#snippet child({ props })}\n                  <a href={project.url} {...props}>\n                    <project.icon />\n                    <span>{project.name}</span>\n                  </a>\n                {/snippet}\n              </Sidebar.MenuButton>\n            </Sidebar.MenuItem>\n          {/each}\n        </Sidebar.Menu>\n      </Sidebar.GroupContent>\n    </Sidebar.Group>\n  </Sidebar.Content>\n</Sidebar.Root>\n```\n\n----------------------------------------\n\nTITLE: Implementing Context Menu in Svelte\nDESCRIPTION: Basic implementation of a Context Menu component that displays action options when a user right-clicks an element. The example shows how to structure the component with a trigger element and content containing menu items like Profile, Billing, Team, and Subscription.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/context-menu.md#2025-04-15_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import * as ContextMenu from \"$lib/components/ui/context-menu/index.js\";\n</script>\n\n<ContextMenu.Root>\n  <ContextMenu.Trigger>Right click</ContextMenu.Trigger>\n  <ContextMenu.Content>\n    <ContextMenu.Item>Profile</ContextMenu.Item>\n    <ContextMenu.Item>Billing</ContextMenu.Item>\n    <ContextMenu.Item>Team</ContextMenu.Item>\n    <ContextMenu.Item>Subscription</ContextMenu.Item>\n  </ContextMenu.Content>\n</ContextMenu.Root>\n```\n\n----------------------------------------\n\nTITLE: Implementing Accordion Component in Svelte\nDESCRIPTION: This code snippet shows the implementation of an Accordion component using the imported Accordion components. It demonstrates the structure of the Accordion with multiple items, triggers, and content.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/index.md#2025-04-15_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<Accordion.Root multiple>\n\n<Accordion.Item value=\"faq-1\">\n\n<Accordion.Trigger>\nWhy not packaged as a dependency?\n</Accordion.Trigger>\n\n<Accordion.Content>\n\nThe idea behind this is to give you ownership and control over the code, allowing you to decide how the components are built and styled.\n\nStart with some sensible defaults, then customize the components to your needs.\n\nOne of the drawback of packaging the components in an npm package is that the style is coupled with the implementation. _The design of your components should be separate from their implementation._\n\n</Accordion.Content>\n</Accordion.Item>\n<Accordion.Item value=\"faq-2\">\n<Accordion.Trigger>\nWhich frameworks are supported?\n</Accordion.Trigger>\n<Accordion.Content>\nThis port is built to be used with Svelte/SvelteKit.\n</Accordion.Content>\n</Accordion.Item>\n<Accordion.Item value=\"faq-3\">\n<Accordion.Trigger>\nCan I use this in my project?\n</Accordion.Trigger>\n<Accordion.Content>\nYes. Free to use for personal and commercial projects. No attribution required.\nBut let us know if you do use it. We'd love to see what you build with it.\n</Accordion.Content>\n</Accordion.Item>\n</Accordion.Root>\n```\n\n----------------------------------------\n\nTITLE: Making Email Column Sortable in TanStack Table\nDESCRIPTION: This code updates the columns configuration to make the email column sortable by rendering a DataTableEmailButton component with appropriate click handlers for toggling sorting direction.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/data-table.md#2025-04-15_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { ColumnDef } from \"@tanstack/table-core\";\nimport { renderComponent } from \"$lib/components/ui/data-table/index.js\";\nimport DataTableEmailButton from \"./data-table-email-button.svelte\";\n\nexport const columns: ColumnDef<Payment>[] = [\n  // ...\n  {\n    accessorKey: \"email\",\n    header: ({ column }) =>\n      renderComponent(DataTableEmailButton, {\n        onclick: () => column.toggleSorting(column.getIsSorted() === \"asc\"),\n      }),\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Menubar Component in Svelte\nDESCRIPTION: Example of implementing a basic menubar component with nested menu items, shortcuts, and separators. Uses the Menubar component from bits-ui library to create a desktop-like menu interface.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/menubar.md#2025-04-15_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import * as Menubar from \"$lib/components/ui/menubar/index.js\";\n</script>\n\n<Menubar.Root>\n  <Menubar.Menu>\n    <Menubar.Trigger>File</Menubar.Trigger>\n    <Menubar.Content>\n      <Menubar.Item>\n        New Tab\n        <Menubar.Shortcut>⌘T</Menubar.Shortcut>\n      </Menubar.Item>\n      <Menubar.Item>New Window</Menubar.Item>\n      <Menubar.Separator />\n      <Menubar.Item>Share</Menubar.Item>\n      <Menubar.Separator />\n      <Menubar.Item>Print</Menubar.Item>\n    </Menubar.Content>\n  </Menubar.Menu>\n</Menubar.Root>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Popover Component in Svelte\nDESCRIPTION: Example of how to implement the Popover component in a Svelte file. The component uses a Root, Trigger, and Content structure to create a popover interface.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/popover.md#2025-04-15_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import * as Popover from \"$lib/components/ui/popover/index.js\";\n</script>\n\n<Popover.Root>\n  <Popover.Trigger>Open</Popover.Trigger>\n  <Popover.Content>Place content for the popover here.</Popover.Content>\n</Popover.Root>\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination in Svelte Data Table Component\nDESCRIPTION: This snippet demonstrates how to add pagination functionality to a Svelte data table component using TanStack Table. It sets up state for pagination and configures the table to use both core and pagination row models.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/data-table.md#2025-04-15_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\" generics=\"TData, TValue\">\n  import {\n    type ColumnDef,\n    type PaginationState,\n    getCoreRowModel,\n    getPaginationRowModel,\n  } from \"@tanstack/table-core\";\n\n  type DataTableProps<TData, TValue> = {\n    data: TData[];\n    columns: ColumnDef<TData, TValue>[];\n  };\n\n  let { data, columns }: DataTableProps<TData, TValue> = $props();\n\n  let pagination = $state<PaginationState>({ pageIndex: 0, pageSize: 10 });\n\n  const table = createSvelteTable({\n    get data() {\n      return data;\n    },\n    columns,\n    state: {\n      get pagination() {\n        return pagination;\n      },\n    },\n    onPaginationChange: (updater) => {\n      if (typeof updater === \"function\") {\n        pagination = updater(pagination);\n      } else {\n        pagination = updater;\n      }\n    },\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic Carousel Implementation in Svelte\nDESCRIPTION: Basic usage example showing how to implement the Carousel component by importing the necessary components and structuring a basic carousel with content, items, and navigation buttons.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/carousel.md#2025-04-15_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import * as Carousel from \"$lib/components/ui/carousel/index.js\";\n</script>\n\n<Carousel.Root>\n  <Carousel.Content>\n    <Carousel.Item>...</Carousel.Item>\n    <Carousel.Item>...</Carousel.Item>\n    <Carousel.Item>...</Carousel.Item>\n  </Carousel.Content>\n  <Carousel.Previous />\n  <Carousel.Next />\n</Carousel.Root>\n```\n\n----------------------------------------\n\nTITLE: Updating Column Definition with Custom Actions in TanStack Table\nDESCRIPTION: This snippet shows how to update the columns definition to include a custom actions component. It demonstrates passing row data to a DataTableActions component using the renderComponent helper function.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/data-table.md#2025-04-15_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { ColumnDef } from \"@tanstack/table-core\";\nimport { renderComponent } from \"$lib/components/ui/data-table/index.js\";\nimport DataTableActions from \"./data-table-actions.svelte\";\n\nexport const columns: ColumnDef<Payment>[] = [\n  // ...\n  {\n    id: \"actions\",\n    cell: ({ row }) => {\n      // You can pass whatever you need from `row.original` to the component\n      return renderComponent(DataTableActions, { id: row.original.id });\n    },\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Breadcrumb Component in Svelte\nDESCRIPTION: Demonstrates the basic usage of the Breadcrumb component, including Root, List, Item, Link, Separator, and Page subcomponents.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/breadcrumb.md#2025-04-15_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import * as Breadcrumb from \"$lib/components/ui/breadcrumb/index.js\";\n</script>\n\n<Breadcrumb.Root>\n  <Breadcrumb.List>\n    <Breadcrumb.Item>\n      <Breadcrumb.Link href=\"/\">Home</Breadcrumb.Link>\n    </Breadcrumb.Item>\n    <Breadcrumb.Separator />\n    <Breadcrumb.Item>\n      <Breadcrumb.Link href=\"/components\">Components</Breadcrumb.Link>\n    </Breadcrumb.Item>\n    <Breadcrumb.Separator />\n    <Breadcrumb.Item>\n      <Breadcrumb.Page>Breadcrumb</Breadcrumb.Page>\n    </Breadcrumb.Item>\n  </Breadcrumb.List>\n</Breadcrumb.Root>\n```\n\n----------------------------------------\n\nTITLE: Creating a Collapsible Sidebar Menu in Svelte\nDESCRIPTION: This snippet demonstrates how to make a collapsible sidebar menu using the Collapsible component. It allows users to expand and collapse sections of the menu to better organize navigation options.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/sidebar.md#2025-04-15_snippet_25\n\nLANGUAGE: svelte\nCODE:\n```\n<Sidebar.Menu>\n  <Collapsible.Root open class=\"group/collapsible\">\n    <Sidebar.MenuItem>\n      <Collapsible.Trigger>\n        {#snippet child({ props })}\n          <Sidebar.MenuButton {...props} />\n        {/snippet}\n      </Collapsible.Trigger>\n      <Collapsible.Content>\n        <Sidebar.MenuSub>\n          <Sidebar.MenuSubItem />\n        </Sidebar.MenuSub>\n      </Collapsible.Content>\n    </Sidebar.MenuItem>\n  </Collapsible.Root>\n</Sidebar.Menu>\n```\n\n----------------------------------------\n\nTITLE: Adding Pagination Controls to Svelte Data Table\nDESCRIPTION: This snippet shows how to implement pagination controls using Button components with the TanStack Table API. It includes previous and next page buttons with appropriate disabled states based on table pagination state.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/data-table.md#2025-04-15_snippet_9\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\" generics=\"TData, TValue\">\n  import { Button } from \"$lib/components/ui/button/index.js\";\n\n  let { columns, data }: DataTableProps<TData, TValue> = $props();\n\n  let pagination = $state<PaginationState>({ pageIndex: 0, pageSize: 10 });\n\n  const table = createSvelteTable({\n    get data() {\n      return data;\n    },\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n  });\n</script>\n\n<div>\n  <div class=\"rounded-md border\">\n    <Table.Root>\n      <!--- ... table implementation -->\n    </Table.Root>\n  </div>\n  <div class=\"flex items-center justify-end space-x-2 py-4\">\n    <Button\n      variant=\"outline\"\n      size=\"sm\"\n      onclick={() => table.previousPage()}\n      disabled={!table.getCanPreviousPage()}\n    >\n      Previous\n    </Button>\n    <Button\n      variant=\"outline\"\n      size=\"sm\"\n      onclick={() => table.nextPage()}\n      disabled={!table.getCanNextPage()}\n    >\n      Next\n    </Button>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Loading Skeletons in Sidebar Menu with Svelte\nDESCRIPTION: This snippet demonstrates how to create loading skeletons within a sidebar menu. This is useful for showing a loading state while waiting for data to load, providing visual feedback to users.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/sidebar.md#2025-04-15_snippet_27\n\nLANGUAGE: svelte\nCODE:\n```\n<Sidebar.Menu>\n  {#each Array.from({ length: 5 }) as _, index (index)}\n    <Sidebar.MenuItem>\n      <Sidebar.MenuSkeleton />\n    </Sidebar.MenuItem>\n  {/each}\n</Sidebar.Menu>\n```\n\n----------------------------------------\n\nTITLE: Basic Slider Implementation in Svelte\nDESCRIPTION: Demonstrates how to implement a basic single-thumb slider component that allows selecting a value from 0 to 100. Uses the $state reactive variable to bind the selected value.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/slider.md#2025-04-15_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { Slider } from \"$lib/components/ui/slider/index.js\";\n  let value = $state(33);\n</script>\n\n<Slider type=\"single\" bind:value max={100} step={1} />\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Sidebar Component Structure\nDESCRIPTION: Basic implementation of a sidebar component showing the fundamental structure with Root, Header, Content, Group, and Footer components from the sidebar library.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/sidebar.md#2025-04-15_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import * as Sidebar from \"$lib/components/ui/sidebar/index.js\";\n</script>\n\n<Sidebar.Root>\n  <Sidebar.Header />\n  <Sidebar.Content>\n    <Sidebar.Group />\n    <Sidebar.Group />\n  </Sidebar.Content>\n  <Sidebar.Footer />\n</Sidebar.Root>\n```\n\n----------------------------------------\n\nTITLE: Basic Command Menu Implementation in Svelte\nDESCRIPTION: Demonstrates the basic structure of a command menu with input, list, groups, and items. This example shows how to organize commands into different groups with headings and separate them with a separator.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/command.md#2025-04-15_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import * as Command from \"$lib/components/ui/command/index.js\";\n</script>\n\n<Command.Root>\n  <Command.Input placeholder=\"Type a command or search...\" />\n  <Command.List>\n    <Command.Empty>No results found.</Command.Empty>\n    <Command.Group heading=\"Suggestions\">\n      <Command.Item>Calendar</Command.Item>\n      <Command.Item>Search Emoji</Command.Item>\n      <Command.Item>Calculator</Command.Item>\n    </Command.Group>\n    <Command.Separator />\n    <Command.Group heading=\"Settings\">\n      <Command.Item>Profile</Command.Item>\n      <Command.Item>Billing</Command.Item>\n      <Command.Item>Settings</Command.Item>\n    </Command.Group>\n  </Command.List>\n</Command.Root>\n```\n\n----------------------------------------\n\nTITLE: Implementing ModeWatcher in Svelte Root Layout\nDESCRIPTION: This snippet shows how to set up the ModeWatcher component in your Svelte root layout file to enable dark mode functionality. It imports the ModeWatcher component from the mode-watcher package and places it at the top level of your application to manage the dark mode state.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/dark-mode/svelte.md#2025-04-15_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { ModeWatcher } from \"mode-watcher\";\n  let { children } = $props();\n</script>\n\n<ModeWatcher />\n{@render children?.()}\n```\n\n----------------------------------------\n\nTITLE: Implementing Avatar Component in Svelte\nDESCRIPTION: Basic implementation of the Avatar component with Image and Fallback elements. The Avatar provides user representation with image support and text fallback when the image fails to load.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/avatar.md#2025-04-15_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import * as Avatar from \"$lib/components/ui/avatar/index.js\";\n</script>\n\n<Avatar.Root>\n  <Avatar.Image src=\"https://github.com/shadcn.png\" alt=\"@shadcn\" />\n  <Avatar.Fallback>CN</Avatar.Fallback>\n</Avatar.Root>\n```\n\n----------------------------------------\n\nTITLE: Handling Carousel Events in Svelte\nDESCRIPTION: Example showing how to listen to events from the Carousel using the API instance, specifically handling the 'select' event when the selected slide changes.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/carousel.md#2025-04-15_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { type CarouselAPI } from \"$lib/components/ui/carousel/context.js\";\n  import * as Carousel from \"$lib/components/ui/carousel/index.js\";\n\n  let api = $state<CarouselAPI>();\n\n  $effect(() => {\n    if (api) {\n      api.on(\"select\", () => {\n        // do something\n      });\n    }\n  });\n</script>\n\n<Carousel.Root setApi={(emblaApi) => (api = emblaApi)}>\n  <Carousel.Content>\n    <Carousel.Item>...</Carousel.Item>\n    <Carousel.Item>...</Carousel.Item>\n    <Carousel.Item>...</Carousel.Item>\n  </Carousel.Content>\n</Carousel.Root>\n```\n\n----------------------------------------\n\nTITLE: Input OTP with Separator in Svelte\nDESCRIPTION: Illustrates how to add a separator between groups of cells in the OTP input, creating two groups of two digits.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/input-otp.md#2025-04-15_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import * as InputOTP from \"$lib/components/ui/input-otp/index.js\";\n</script>\n\n<InputOTP.Root maxlength={4}>\n  {#snippet children({ cells })}\n    <InputOTP.Group>\n      {#each cells.slice(0, 2) as cell}\n        <InputOTP.Slot {cell} />\n      {/each}\n    </InputOTP.Group>\n    <InputOTP.Separator />\n    <InputOTP.Group>\n      {#each cells.slice(2, 4) as cell}\n        <InputOTP.Slot {cell} />\n      {/each}\n    </InputOTP.Group>\n  {/snippet}\n</InputOTP.Root>\n```\n\n----------------------------------------\n\nTITLE: Using Drawer Component in Svelte\nDESCRIPTION: Example of how to use the Drawer component in a Svelte file, including importing, structuring, and basic usage of various Drawer subcomponents.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/drawer.md#2025-04-15_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import * as Drawer from \"$lib/components/ui/drawer/index.js\";\n</script>\n\n<Drawer.Root>\n  <Drawer.Trigger>Open</Drawer.Trigger>\n  <Drawer.Content>\n    <Drawer.Header>\n      <Drawer.Title>Are you sure absolutely sure?</Drawer.Title>\n      <Drawer.Description>This action cannot be undone.</Drawer.Description>\n    </Drawer.Header>\n    <Drawer.Footer>\n      <Button>Submit</Button>\n      <Drawer.Close>Cancel</Drawer.Close>\n    </Drawer.Footer>\n  </Drawer.Content>\n</Drawer.Root>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Alert Component in Svelte\nDESCRIPTION: This snippet demonstrates how to import and use the Alert component in a Svelte file. It shows the basic structure of an alert with a title and description.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/alert.md#2025-04-15_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import * as Alert from \"$lib/components/ui/alert/index.js\";\n</script>\n\n<Alert.Root>\n  <Alert.Title>Heads up!</Alert.Title>\n  <Alert.Description>\n    You can add components to your app using the cli.\n  </Alert.Description>\n</Alert.Root>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Controlled Sidebar with Function Binding in Svelte\nDESCRIPTION: This example shows how to create a controlled sidebar using Svelte's Function Binding. It demonstrates two approaches for binding to the open state of the sidebar for programmatic control.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/sidebar.md#2025-04-15_snippet_32\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import * as Sidebar from \"$lib/components/ui/sidebar/index.js\";\n\n  let myOpen = $state(true);\n</script>\n\n<Sidebar.Provider bind:open={() => myOpen, (newOpen) => (myOpen = newOpen)}>\n  <Sidebar.Root />\n</Sidebar.Provider>\n\n<!-- or -->\n\n<Sidebar.Provider bind:open>\n  <Sidebar.Root />\n</Sidebar.Provider>\n```\n\n----------------------------------------\n\nTITLE: Implementing Accordion Component in Svelte\nDESCRIPTION: This snippet demonstrates how to use the Accordion component in a Svelte application. It shows importing the component, creating an Accordion with a single item containing a trigger and content.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/accordion.md#2025-04-15_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import * as Accordion from \"$lib/components/ui/accordion/index.js\";\n</script>\n\n<Accordion.Root type=\"single\">\n  <Accordion.Item value=\"item-1\">\n    <Accordion.Trigger>Is it accessible?</Accordion.Trigger>\n    <Accordion.Content>\n      Yes. It adheres to the WAI-ARIA design pattern.\n    </Accordion.Content>\n  </Accordion.Item>\n</Accordion.Root>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Sheet Component in Svelte\nDESCRIPTION: This snippet demonstrates how to import and use the Sheet component from the UI library. It shows the basic structure with Root, Trigger, Content, Header, Title, and Description elements to create a modal-like interface.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/sheet.md#2025-04-15_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import * as Sheet from \"$lib/components/ui/sheet/index.js\";\n</script>\n\n<Sheet.Root>\n  <Sheet.Trigger>Open</Sheet.Trigger>\n  <Sheet.Content>\n    <Sheet.Header>\n      <Sheet.Title>Are you sure absolutely sure?</Sheet.Title>\n      <Sheet.Description>\n        This action cannot be undone. This will permanently delete your account\n        and remove your data from our servers.\n      </Sheet.Description>\n    </Sheet.Header>\n  </Sheet.Content>\n</Sheet.Root>\n```\n\n----------------------------------------\n\nTITLE: Using AspectRatio Component in Svelte\nDESCRIPTION: Example of how to implement the AspectRatio component in a Svelte application. This snippet shows how to import the component and use it with a 16:9 ratio to properly size an image, maintaining the aspect ratio regardless of container width.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/aspect-ratio.md#2025-04-15_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { AspectRatio } from \"$lib/components/ui/aspect-ratio/index.js\";\n</script>\n\n<div class=\"w-[450px]\">\n  <AspectRatio ratio={16 / 9} class=\"bg-muted\">\n    <img src=\"...\" alt=\"...\" class=\"rounded-md object-cover\" />\n  </AspectRatio>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Table Component Structure in Svelte\nDESCRIPTION: Demonstrates the basic structure of a table using the Table component. Includes a caption, header with column titles, and a sample data row showing invoice information.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/table.md#2025-04-15_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<Table.Root>\n  <Table.Caption>A list of your recent invoices.</Table.Caption>\n  <Table.Header>\n    <Table.Row>\n      <Table.Head class=\"w-[100px]\">Invoice</Table.Head>\n      <Table.Head>Status</Table.Head>\n      <Table.Head>Method</Table.Head>\n      <Table.Head class=\"text-right\">Amount</Table.Head>\n    </Table.Row>\n  </Table.Header>\n  <Table.Body>\n    <Table.Row>\n      <Table.Cell class=\"font-medium\">INV001</Table.Cell>\n      <Table.Cell>Paid</Table.Cell>\n      <Table.Cell>Credit Card</Table.Cell>\n      <Table.Cell class=\"text-right\">$250.00</Table.Cell>\n    </Table.Row>\n  </Table.Body>\n</Table.Root>\n```\n\n----------------------------------------\n\nTITLE: Form Field Example with Email Input in Svelte\nDESCRIPTION: Shows an example of a form field for email input using Formsnap and Superforms in Svelte.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/form.md#2025-04-15_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<form method=\"POST\" use:enhance>\n  <Form.Field {form} name=\"email\">\n    <Form.Control>\n      {#snippet children({ props })}\n        <Form.Label>Email</Form.Label>\n        <Input {...props} bind:value={$formData.email} />\n      {/snippet}\n    </Form.Control>\n    <Form.Description />\n    <Form.FieldErrors />\n  </Form.Field>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Formatting Amount Column with Svelte Snippets\nDESCRIPTION: Enhances the amount column to format values as currency and align them to the right using Svelte 5 Snippets and TanStack Table's column definition.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/data-table.md#2025-04-15_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { ColumnDef } from \"@tanstack/table-core\";\nimport { createRawSnippet } from \"svelte\";\nimport { renderSnippet } from \"$lib/components/ui/data-table/index.js\";\n\nexport const columns: ColumnDef<Payment>[] = [\n  {\n    accessorKey: \"amount\",\n    header: () => {\n      const amountHeaderSnippet = createRawSnippet(() => ({\n        render: () => `<div class=\"text-right\">Amount</div>`,\n      }));\n      return renderSnippet(amountHeaderSnippet, \"\");\n    },\n    cell: ({ row }) => {\n      const formatter = new Intl.NumberFormat(\"en-US\", {\n        style: \"currency\",\n        currency: \"USD\",\n      });\n\n      const amountCellSnippet = createRawSnippet<[string]>((getAmount) => {\n        const amount = getAmount();\n        return {\n          render: () => `<div class=\"text-right font-medium\">${amount}</div>`,\n        };\n      });\n\n      return renderSnippet(\n        amountCellSnippet,\n        formatter.format(parseFloat(row.getValue(\"amount\")))\n      );\n    },\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Creating Row Actions Menu with Dropdown\nDESCRIPTION: Implements a dropdown menu for row actions using the shadcn-svelte DropdownMenu component, providing options to copy payment ID and view related details.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/data-table.md#2025-04-15_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import Ellipsis from \"@lucide/svelte/icons/ellipsis\";\n  import { Button } from \"$lib/components/ui/button/index.js\";\n  import * as DropdownMenu from \"$lib/components/ui/dropdown-menu/index.js\";\n\n  let { id }: { id: string } = $props();\n</script>\n\n<DropdownMenu.Root>\n  <DropdownMenu.Trigger>\n    {#snippet child({ props })}\n      <Button\n        {...props}\n        variant=\"ghost\"\n        size=\"icon\"\n        class=\"relative size-8 p-0\"\n      >\n        <span class=\"sr-only\">Open menu</span>\n        <Ellipsis />\n      </Button>\n    {/snippet}\n  </DropdownMenu.Trigger>\n  <DropdownMenu.Content>\n    <DropdownMenu.Group>\n      <DropdownMenu.Label>Actions</DropdownMenu.Label>\n      <DropdownMenu.Item onclick={() => navigator.clipboard.writeText(id)}>\n        Copy payment ID\n      </DropdownMenu.Item>\n    </DropdownMenu.Group>\n    <DropdownMenu.Separator />\n    <DropdownMenu.Item>View customer</DropdownMenu.Item>\n    <DropdownMenu.Item>View payment details</DropdownMenu.Item>\n  </DropdownMenu.Content>\n</DropdownMenu.Root>\n```\n\n----------------------------------------\n\nTITLE: Using Inset Variant with Sidebar in Svelte\nDESCRIPTION: Demonstrates how to use the inset variant of the sidebar, which requires wrapping the main content in a SidebarInset component.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/sidebar.md#2025-04-15_snippet_10\n\nLANGUAGE: svelte\nCODE:\n```\n<Sidebar.Provider>\n  <Sidebar.Root variant=\"inset\">\n    <Sidebar.Inset>\n      <main>\n        <!-- Your main content -->\n      </main>\n    </Sidebar.Inset>\n  </Sidebar.Root>\n</Sidebar.Provider>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Label Component in Svelte\nDESCRIPTION: This snippet demonstrates how to import the Label component from the UI library and use it to create an accessible label for an email input field. The Label component accepts a 'for' attribute to associate it with a specific form control.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/label.md#2025-04-15_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { Label } from \"$lib/components/ui/label/index.js\";\n</script>\n\n<Label for=\"email\">Your email address</Label>\n```\n\n----------------------------------------\n\nTITLE: Implementing Responsive Carousel Items in Svelte\nDESCRIPTION: Example showing how to create responsive carousel items that adjust their size based on screen width. Items are set to 50% width on medium screens and 33% on larger screens.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/carousel.md#2025-04-15_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- 50% on small screens and 33% on larger screens. -->\n<Carousel.Root>\n  <Carousel.Content>\n    <Carousel.Item class=\"md:basis-1/2 lg:basis-1/3\">...</Carousel.Item>\n    <Carousel.Item class=\"md:basis-1/2 lg:basis-1/3\">...</Carousel.Item>\n    <Carousel.Item class=\"md:basis-1/2 lg:basis-1/3\">...</Carousel.Item>\n  </Carousel.Content>\n</Carousel.Root>\n```\n\n----------------------------------------\n\nTITLE: Implementing Tabs Component in Svelte\nDESCRIPTION: This code snippet demonstrates how to implement the Tabs component in a Svelte application. It shows the basic structure with a root element, list of triggers, and content panels that correspond to each tab.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/tabs.md#2025-04-15_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import * as Tabs from \"$lib/components/ui/tabs/index.js\";\n</script>\n\n<Tabs.Root value=\"account\" class=\"w-[400px]\">\n  <Tabs.List>\n    <Tabs.Trigger value=\"account\">Account</Tabs.Trigger>\n    <Tabs.Trigger value=\"password\">Password</Tabs.Trigger>\n  </Tabs.List>\n  <Tabs.Content value=\"account\">\n    Make changes to your account here.\n  </Tabs.Content>\n  <Tabs.Content value=\"password\">Change your password here.</Tabs.Content>\n</Tabs.Root>\n```\n\n----------------------------------------\n\nTITLE: Implementing Collapsible Component in Svelte\nDESCRIPTION: A basic example of implementing a collapsible panel component in Svelte. The component includes three main parts: Root (the container), Trigger (the clickable element that toggles the panel), and Content (the expandable/collapsible content area).\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/collapsible.md#2025-04-15_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import * as Collapsible from \"$lib/components/ui/collapsible/index.js\";\n</script>\n\n<Collapsible.Root>\n  <Collapsible.Trigger>Can I use this in my project?</Collapsible.Trigger>\n  <Collapsible.Content>\n    Yes. Free to use for personal and commercial projects. No attribution\n    required.\n  </Collapsible.Content>\n</Collapsible.Root>\n```\n\n----------------------------------------\n\nTITLE: Implementing MenuAction with MenuButton in Svelte Sidebar\nDESCRIPTION: This example shows how to use the MenuAction component alongside MenuButton. The MenuAction works independently of MenuButton, allowing for additional interactions within the same menu item.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/sidebar.md#2025-04-15_snippet_22\n\nLANGUAGE: svelte\nCODE:\n```\n<Sidebar.MenuItem>\n  <Sidebar.MenuButton>\n    {#snippet child({ props })}\n      <a href=\"/home\" {...props}>\n        <House />\n        <span>Home</span>\n      </a>\n    {/snippet}\n  </Sidebar.MenuButton>\n  <Sidebar.MenuAction>\n    <Plus /> <span class=\"sr-only\">Add Project</span>\n  </Sidebar.MenuAction>\n</Sidebar.MenuItem>\n```\n\n----------------------------------------\n\nTITLE: Creating Sortable Email Header Button Component for Svelte Data Table\nDESCRIPTION: This code defines a DataTableEmailButton component that adds sorting functionality to an email column header. It includes an arrow icon to indicate sortability and passes through button properties.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/data-table.md#2025-04-15_snippet_10\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import type { ComponentProps } from \"svelte\";\n  import ArrowUpDown from \"@lucide/svelte/icons/arrow-up-down\";\n  import { Button } from \"$lib/components/ui/button/index.js\";\n\n  let { variant = \"ghost\", ...restProps }: ComponentProps<typeof Button> =\n    $props();\n</script>\n\n<Button {variant} {...restProps}>\n  Email\n  <ArrowUpDown class=\"ml-2\" />\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Implementing Sidebar Footer with Dropdown in Svelte\nDESCRIPTION: Shows how to add a sticky footer to the sidebar using Sidebar.Footer component, including a dropdown menu for user actions.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/sidebar.md#2025-04-15_snippet_13\n\nLANGUAGE: svelte\nCODE:\n```\n<Sidebar.Provider>\n  <Sidebar.Root>\n    <Sidebar.Header />\n    <Sidebar.Content />\n    <Sidebar.Footer>\n      <Sidebar.Menu>\n        <Sidebar.MenuItem>\n          <DropdownMenu.Root>\n            <DropdownMenu.Trigger>\n              {#snippet child({ props })}\n                <Sidebar.MenuButton\n                  {...props}\n                  class=\"data-[state=open]:bg-sidebar-accent data-[state=open]:text-sidebar-accent-foreground\"\n                >\n                  Username\n                  <ChevronUp class=\"ml-auto\" />\n                </Sidebar.MenuButton>\n              {/snippet}\n            </DropdownMenu.Trigger>\n            <DropdownMenu.Content\n              side=\"top\"\n              class=\"w-[--bits-dropdown-menu-anchor-width]\"\n            >\n              <DropdownMenu.Item>\n                <span>Account</span>\n              </DropdownMenu.Item>\n              <DropdownMenu.Item>\n                <span>Billing</span>\n              </DropdownMenu.Item>\n              <DropdownMenu.Item>\n                <span>Sign out</span>\n              </DropdownMenu.Item>\n            </DropdownMenu.Content>\n          </DropdownMenu.Root>\n        </Sidebar.MenuItem>\n      </Sidebar.Menu>\n    </Sidebar.Footer>\n  </Sidebar.Root>\n  <Sidebar.Inset>\n    <header class=\"flex h-12 items-center justify-between px-4\">\n      <Sidebar.Trigger />\n    </header>\n  </Sidebar.Inset>\n</Sidebar.Provider>\n```\n\n----------------------------------------\n\nTITLE: Multiple Thumbs Slider Implementation in Svelte\nDESCRIPTION: Shows how to create a slider with multiple thumbs (specifically two in this example) for selecting a range of values. The value is bound to an array containing the position of each thumb.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/slider.md#2025-04-15_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { Slider } from \"$lib/components/ui/slider/index.js\";\n  let value = $state([25, 75]);\n</script>\n\n<Slider type=\"multiple\" bind:value max={100} step={1} />\n```\n\n----------------------------------------\n\nTITLE: Implementing the Page Component with DataTable\nDESCRIPTION: Renders the DataTable component in a page, importing the necessary columns definition and passing in the data from the server.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/data-table.md#2025-04-15_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import DataTable from \"./data-table.svelte\";\n  import { columns } from \"./columns.js\";\n\n  let { data } = $props();\n</script>\n\n<DataTable {data} {columns} />\n```\n\n----------------------------------------\n\nTITLE: Using Toggle Group Component in Svelte\nDESCRIPTION: This snippet demonstrates how to import and use the Toggle Group component in a Svelte application. It shows a basic setup with a single toggle group containing three items with values 'a', 'b', and 'c'.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/toggle-group.md#2025-04-15_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import * as ToggleGroup from \"$lib/components/ui/toggle-group/index.js\";\n</script>\n\n<ToggleGroup.Root type=\"single\">\n  <ToggleGroup.Item value=\"a\">A</ToggleGroup.Item>\n  <ToggleGroup.Item value=\"b\">B</ToggleGroup.Item>\n  <ToggleGroup.Item value=\"c\">C</ToggleGroup.Item>\n</ToggleGroup.Root>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Sidebar Trigger with useSidebar Hook in Svelte\nDESCRIPTION: This example shows how to create a custom trigger for the sidebar using the useSidebar hook. This approach provides more flexibility for controlling the sidebar state programmatically.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/sidebar.md#2025-04-15_snippet_30\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { useSidebar } from \"$lib/components/ui/sidebar/index.js\";\n  const sidebar = useSidebar();\n</script>\n\n<button onclick={() => sidebar.toggle()}>Toggle Sidebar</button>\n```\n\n----------------------------------------\n\nTITLE: Creating Inline Theme Script for Dark Mode in Astro\nDESCRIPTION: This script manages dark mode preference in localStorage, prevents FUOC, and observes theme changes. It's added inline to the Astro page for immediate execution.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/dark-mode/astro.md#2025-04-15_snippet_0\n\nLANGUAGE: astro\nCODE:\n```\n<script is:inline>\n  const isBrowser = typeof localStorage !== 'undefined';\n  const getThemePreference = () => {\n    if (isBrowser && localStorage.getItem('theme')) {\n      return localStorage.getItem('theme');\n    }\n    return window.matchMedia('(prefers-color-scheme: dark)').matches\n      ? 'dark' : 'light';\n  };\n  const isDark = getThemePreference() === 'dark';\n  document.documentElement.classList[isDark ? 'add' : 'remove']('dark');\n\n  if (isBrowser) {\n    const observer = new MutationObserver(() => {\n      const isDark = document.documentElement.classList.contains('dark');\n      localStorage.setItem('theme', isDark ? 'dark' : 'light');\n    });\n    observer.observe(document.documentElement, {\n      attributes: true,\n      attributeFilter: ['class']\n    });\n  }\n</script>\n\n<html lang=\"en\">\n\t<body>\n      <h1>Astro</h1>\n\t</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Input OTP with Custom Pattern in Svelte\nDESCRIPTION: Shows how to use a custom pattern for the OTP input, allowing both digits and characters.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/input-otp.md#2025-04-15_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import * as InputOTP from \"$lib/components/ui/input-otp/index.js\";\n  import { REGEXP_ONLY_DIGITS_AND_CHARS } from \"bits-ui\";\n</script>\n\n<InputOTP.Root maxlength={6} pattern={REGEXP_ONLY_DIGITS_AND_CHARS}>\n  <!-- ... -->\n</InputOTP.Root>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Sidebar Toggle Trigger in Svelte\nDESCRIPTION: This snippet demonstrates how to add a toggle button for the sidebar using the Sidebar.Trigger component. It must be used within a Sidebar.Provider to properly control the sidebar state.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/sidebar.md#2025-04-15_snippet_29\n\nLANGUAGE: svelte\nCODE:\n```\n<Sidebar.Provider>\n  <Sidebar.Root />\n  <main>\n    <Sidebar.Trigger />\n  </main>\n</Sidebar.Provider>\n```\n\n----------------------------------------\n\nTITLE: Adding Badges to Sidebar Menu Items in Svelte\nDESCRIPTION: This example shows how to add badges to menu items using the MenuBadge component. Badges can be used to display notifications, counts, or status indicators alongside menu items.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/sidebar.md#2025-04-15_snippet_26\n\nLANGUAGE: svelte\nCODE:\n```\n<Sidebar.MenuItem>\n  <Sidebar.MenuButton />\n  <Sidebar.MenuBadge>24</Sidebar.MenuBadge>\n</Sidebar.MenuItem>\n```\n\n----------------------------------------\n\nTITLE: Configuring Path Aliases in tsconfig.json\nDESCRIPTION: Updates the tsconfig.json file to include path aliases for non-SvelteKit projects. This configuration maps $lib to the source library directory for TypeScript resolution.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/installation/manual.md#2025-04-15_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    // ... other options\n    \"paths\": {\n      \"$lib\": [\"./src/lib\"],\n      \"$lib/*\": [\"./src/lib/*\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating DataTableCheckbox Component in Svelte\nDESCRIPTION: A checkbox component specifically designed for use in data tables. It wraps the Shadcn UI Checkbox component with additional props to handle checked state changes required for table row selection.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/data-table.md#2025-04-15_snippet_15\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import type { ComponentProps } from \"svelte\";\n  import { Checkbox } from \"$lib/components/ui/checkbox/index.js\";\n\n  let {\n    checked = false,\n    onCheckedChange = (v) => (checked = v),\n    ...restProps\n  }: ComponentProps<typeof Checkbox> = $props();\n</script>\n\n<Checkbox bind:checked={() => checked, onCheckedChange} {...restProps} />\n```\n\n----------------------------------------\n\nTITLE: Basic Toast Usage Example\nDESCRIPTION: Demonstrates how to use the toast function from svelte-sonner to display toast notifications. This example shows a simple button that triggers a \"Hello world\" toast notification when clicked.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/sonner.md#2025-04-15_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { toast } from \"svelte-sonner\";\n  import { Button } from \"$lib/components/ui/button/index.js\";\n</script>\n\n<Button onclick={() => toast(\"Hello world\")}>Show toast</Button>\n```\n\n----------------------------------------\n\nTITLE: Adding Plugins to Carousel in Svelte\nDESCRIPTION: Example showing how to add plugins to the Carousel, specifically implementing the Autoplay plugin to automatically advance slides every 2000ms.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/carousel.md#2025-04-15_snippet_9\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import Autoplay from \"embla-carousel-autoplay\";\n  import * as Carousel from \"$lib/components/ui/carousel/index.js\";\n</script>\n\n<Carousel.Root\n  plugins={[\n    Autoplay({\n      delay: 2000,\n    }),\n  ]}\n>\n  <!-- ... -->\n</Carousel.Root>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Switch Component in Svelte\nDESCRIPTION: This snippet demonstrates how to import and use the Switch component in a Svelte file. It shows the basic usage of the Switch component without any additional props or customization.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/switch.md#2025-04-15_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { Switch } from \"$lib/components/ui/switch/index.js\";\n</script>\n\n<Switch />\n```\n\n----------------------------------------\n\nTITLE: Creating a DropdownMenu with MenuAction in Svelte Sidebar\nDESCRIPTION: This snippet demonstrates how to integrate a DropdownMenu with a Sidebar.MenuAction component. It creates a more complex interaction pattern with options that appear in a dropdown when clicking on the menu action.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/sidebar.md#2025-04-15_snippet_23\n\nLANGUAGE: svelte\nCODE:\n```\n<Sidebar.MenuItem>\n  <Sidebar.MenuButton>\n    {#snippet child({ props })}\n      <a href=\"#\" {...props}>\n        <House />\n        <span>Home</span>\n      </a>\n    {/snippet}\n  </Sidebar.MenuButton>\n  <DropdownMenu.Root>\n    <DropdownMenu.Trigger>\n      {#snippet child({ props })}\n        <Sidebar.MenuAction {...props}>\n          <Ellipsis />\n        </Sidebar.MenuAction>\n      {/snippet}\n    </DropdownMenu.Trigger>\n    <DropdownMenu.Content side=\"right\" align=\"start\">\n      <DropdownMenu.Item>\n        <span>Edit Project</span>\n      </DropdownMenu.Item>\n      <DropdownMenu.Item>\n        <span>Delete Project</span>\n      </DropdownMenu.Item>\n    </DropdownMenu.Content>\n  </DropdownMenu.Root>\n</Sidebar.MenuItem>\n```\n\n----------------------------------------\n\nTITLE: Creating a Button Link in Svelte\nDESCRIPTION: Shows how to convert a Button into a link by passing an href property, which renders as an anchor element.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/button.md#2025-04-15_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { Button } from \"$lib/components/ui/button/index.js\";\n</script>\n\n<Button href=\"/dashboard\">Dashboard</Button>\n```\n\n----------------------------------------\n\nTITLE: Implementing Radio Group in Svelte\nDESCRIPTION: Example of how to use the Radio Group component in a Svelte file. It demonstrates importing necessary components and creating a basic radio group with two options.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/radio-group.md#2025-04-15_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { Label } from \"$lib/components/ui/label/index.js\";\n  import * as RadioGroup from \"$lib/components/ui/radio-group/index.js\";\n</script>\n\n<RadioGroup.Root value=\"option-one\">\n  <div class=\"flex items-center space-x-2\">\n    <RadioGroup.Item value=\"option-one\" id=\"option-one\" />\n    <Label for=\"option-one\">Option One</Label>\n  </div>\n  <div class=\"flex items-center space-x-2\">\n    <RadioGroup.Item value=\"option-two\" id=\"option-two\" />\n    <Label for=\"option-two\">Option Two</Label>\n  </div>\n</RadioGroup.Root>\n```\n\n----------------------------------------\n\nTITLE: Displaying Selected Row Count in Svelte\nDESCRIPTION: A Svelte code snippet that shows how to display the number of selected rows in a data table. It uses the TanStack table API methods to retrieve the count of selected rows and total filterable rows.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/data-table.md#2025-04-15_snippet_18\n\nLANGUAGE: svelte\nCODE:\n```\n<div class=\"text-muted-foreground flex-1 text-sm\">\n  {table.getFilteredSelectedRowModel().rows.length} of{\" \"}\n  {table.getFilteredRowModel().rows.length} row(s) selected.\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Path Aliases in SvelteKit\nDESCRIPTION: Shows how to set up custom path aliases in svelte.config.js for projects that don't use the default $lib alias.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/installation/sveltekit.md#2025-04-15_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  // ... other config\n  kit: {\n    // ... other config\n    alias: {\n      \"@/*\": \"./path/to/lib/*\",\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Sidebar Header with Dropdown in Svelte\nDESCRIPTION: Demonstrates how to add a sticky header to the sidebar using Sidebar.Header component, including a dropdown menu for workspace selection.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/sidebar.md#2025-04-15_snippet_12\n\nLANGUAGE: svelte\nCODE:\n```\n<Sidebar.Root>\n  <Sidebar.Header>\n    <Sidebar.Menu>\n      <Sidebar.MenuItem>\n        <DropdownMenu.Root>\n          <DropdownMenu.Trigger>\n            {#snippet child({ props })}\n              <Sidebar.MenuButton {...props}>\n                Select Workspace\n                <ChevronDown class=\"ml-auto\" />\n              </Sidebar.MenuButton>\n            {/snippet}\n          </DropdownMenu.Trigger>\n          <DropdownMenu.Content class=\"w-[--bits-dropdown-menu-anchor-width]\">\n            <DropdownMenu.Item>\n              <span>Acme Inc</span>\n            </DropdownMenu.Item>\n            <DropdownMenu.Item>\n              <span>Acme Corp.</span>\n            </DropdownMenu.Item>\n          </DropdownMenu.Content>\n        </DropdownMenu.Root>\n      </Sidebar.MenuItem>\n    </Sidebar.Menu>\n  </Sidebar.Header>\n</Sidebar.Root>\n```\n\n----------------------------------------\n\nTITLE: Setting Active State for Sidebar MenuButton in Svelte\nDESCRIPTION: This snippet shows how to mark a MenuButton as active using the isActive prop. This is useful for highlighting the current page or section in the navigation menu.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/sidebar.md#2025-04-15_snippet_21\n\nLANGUAGE: svelte\nCODE:\n```\n<Sidebar.MenuButton isActive>\n  {#snippet child({ props })}\n    <a href=\"/home\" {...props}>\n      <House />\n      <span>Home</span>\n    </a>\n  {/snippet}\n</Sidebar.MenuButton>\n```\n\n----------------------------------------\n\nTITLE: Adding a Rail Component to Sidebar in Svelte\nDESCRIPTION: This snippet demonstrates how to add a rail component to the sidebar, which can be used as an alternative way to toggle the sidebar. The rail is added within the Sidebar.Root component.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/sidebar.md#2025-04-15_snippet_31\n\nLANGUAGE: svelte\nCODE:\n```\n<Sidebar.Root>\n  <Sidebar.Header />\n  <Sidebar.Content>\n    <Sidebar.Group />\n  </Sidebar.Content>\n  <Sidebar.Footer />\n  <Sidebar.Rail />\n</Sidebar.Root>\n```\n\n----------------------------------------\n\nTITLE: Setting Component Style in components.json for shadcn-svelte\nDESCRIPTION: Defines the style for components, which can be either 'default' or 'new-york'. This setting cannot be changed after initialization.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components-json.md#2025-04-15_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"style\": \"default\" | \"new-york\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SubMenu Structure in Svelte Sidebar\nDESCRIPTION: This example shows the basic structure for creating a submenu within a Sidebar.Menu. It uses MenuSubItem and MenuSubButton components to render nested navigation options.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/sidebar.md#2025-04-15_snippet_24\n\nLANGUAGE: svelte\nCODE:\n```\n<Sidebar.MenuItem>\n  <Sidebar.MenuButton />\n  <Sidebar.MenuSub>\n    <Sidebar.MenuSubItem>\n      <Sidebar.MenuSubButton />\n    </Sidebar.MenuSubItem>\n    <Sidebar.MenuSubItem>\n      <Sidebar.MenuSubButton />\n    </Sidebar.MenuSubItem>\n  </Sidebar.MenuSub>\n</Sidebar.MenuItem>\n```\n\n----------------------------------------\n\nTITLE: Customizing Resizable Handle in Svelte\nDESCRIPTION: Shows how to customize the resizable handle by using the 'withHandle' prop on the ResizableHandle component.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/resizable.md#2025-04-15_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import * as Resizable from \"$lib/components/ui/resizable/index.js\";\n</script>\n\n<Resizable.PaneGroup direction=\"vertical\">\n  <Resizable.Pane>One</Resizable.Pane>\n  <Resizable.Handle withHandle />\n  <Resizable.Pane>Two</Resizable.Pane>\n</Resizable.PaneGroup>\n```\n\n----------------------------------------\n\nTITLE: Using Hover Card Component in Svelte\nDESCRIPTION: This snippet demonstrates how to import and use the Hover Card component in a Svelte file. It shows the basic structure with Root, Trigger, and Content elements.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/hover-card.md#2025-04-15_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import * as HoverCard from \"$lib/components/ui/hover-card/index.js\";\n</script>\n\n<HoverCard.Root>\n  <HoverCard.Trigger>Hover</HoverCard.Trigger>\n  <HoverCard.Content>\n    SvelteKit - Web development, streamlined\n  </HoverCard.Content>\n</HoverCard.Root>\n```\n\n----------------------------------------\n\nTITLE: Structuring Sidebar Content with Groups in Svelte\nDESCRIPTION: Demonstrates how to structure the content of the sidebar using Sidebar.Content and Sidebar.Group components.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/sidebar.md#2025-04-15_snippet_14\n\nLANGUAGE: svelte\nCODE:\n```\n<Sidebar.Root>\n  <Sidebar.Content>\n    <Sidebar.Group />\n    <Sidebar.Group />\n  </Sidebar.Content>\n</Sidebar.Root>\n```\n\n----------------------------------------\n\nTITLE: Setting Components Alias in components.json for shadcn-svelte\nDESCRIPTION: Specifies the import alias for components in the project.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components-json.md#2025-04-15_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"aliases\": {\n    \"components\": \"$lib/components\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Responsive Spacing in Carousel Items\nDESCRIPTION: Example showing how to implement responsive spacing between carousel items that changes based on screen size, with smaller spacing on mobile and larger spacing on desktop.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/carousel.md#2025-04-15_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<Carousel.Root>\n  <Carousel.Content class=\"-ml-2 md:-ml-4\">\n    <Carousel.Item class=\"pl-2 md:pl-4\">...</Carousel.Item>\n    <Carousel.Item class=\"pl-2 md:pl-4\">...</Carousel.Item>\n    <Carousel.Item class=\"pl-2 md:pl-4\">...</Carousel.Item>\n  </Carousel.Content>\n</Carousel.Root>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Toggle Component in Svelte\nDESCRIPTION: This snippet demonstrates how to import and use the Toggle component in a Svelte file. It shows the basic usage of the Toggle component with a text label.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/toggle.md#2025-04-15_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { Toggle } from \"$lib/components/ui/toggle/index.js\";\n</script>\n\n<Toggle>Toggle</Toggle>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using shadcn-svelte Button Component in Svelte\nDESCRIPTION: Demonstrates how to import and use a shadcn-svelte Button component after adding it to your project using the CLI tool.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/installation/sveltekit.md#2025-04-15_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { Button } from \"$lib/components/ui/button/index.js\";\n</script>\n\n<Button>Click me</Button>\n```\n\n----------------------------------------\n\nTITLE: ESLint Flat Config for Shadcn-Svelte Components\nDESCRIPTION: Shows how to configure ESLint using the flat config format to ignore false positive errors in Shadcn-Svelte components.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/installation/index.md#2025-04-15_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('eslint').Linter.FlatConfig[]} */\nexport default [\n  /* ... */\n  {\n    files: [\"**/*.svelte\"],\n    languageOptions: {\n      parserOptions: {\n        parser: ts.parser,\n      },\n    },\n  },\n  {\n    /* location of your components where you would like to apply these rules  */\n    files: [\"**/components/ui/**/*.svelte\"],\n    rules: {\n      \"@typescript-eslint/no-unused-vars\": [\n        \"warn\",\n        {\n          argsIgnorePattern: \"^_\",\n          varsIgnorePattern: \"^\\\\$\\\\$(Props|Events|Slots|Generic)$\",\n        },\n      ],\n    },\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Using the Carousel API in Svelte with State Management\nDESCRIPTION: Example showing how to get access to the Carousel API instance to track the current item and total count of items, using Svelte's reactive state system.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/carousel.md#2025-04-15_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { type CarouselAPI } from \"$lib/components/ui/carousel/context.js\";\n  import * as Carousel from \"$lib/components/ui/carousel/index.js\";\n\n  let api = $state<CarouselAPI>();\n  let current = $state(0);\n  const count = $derived(api ? api.scrollSnapList().length : 0);\n\n  $effect(() => {\n    if (api) {\n      current = api.selectedScrollSnap() + 1;\n      api.on(\"select\", () => {\n        current = api!.selectedScrollSnap() + 1;\n      });\n    }\n  });\n</script>\n\n<Carousel.Root setApi={(emblaApi) => (api = emblaApi)}>\n  <Carousel.Content>\n    <Carousel.Item>...</Carousel.Item>\n    <Carousel.Item>...</Carousel.Item>\n    <Carousel.Item>...</Carousel.Item>\n  </Carousel.Content>\n</Carousel.Root>\n```\n\n----------------------------------------\n\nTITLE: Basic Checkbox Usage in Svelte\nDESCRIPTION: Demonstrates the minimal implementation of the Checkbox component with no additional props or configurations.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/checkbox.md#2025-04-15_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<Checkbox />\n```\n\n----------------------------------------\n\nTITLE: Creating a Link-Based MenuButton in Svelte Sidebar\nDESCRIPTION: This snippet shows how to create a MenuButton that renders as an anchor tag (<a>) instead of the default button. It uses the child snippet to customize the rendered element while maintaining the component's functionality.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/sidebar.md#2025-04-15_snippet_19\n\nLANGUAGE: svelte\nCODE:\n```\n<Sidebar.MenuButton>\n  {#snippet child({ props })}\n    <a href=\"/home\" {...props}> Home </a>\n  {/snippet}\n</Sidebar.MenuButton>\n```\n\n----------------------------------------\n\nTITLE: Importing Checkbox Component in Svelte\nDESCRIPTION: Shows how to import the Checkbox component from the UI library into a Svelte file. This is the first step to using the component in a Svelte application.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/checkbox.md#2025-04-15_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { Checkbox } from \"$lib/components/ui/checkbox/index.js\";\n</script>\n```\n\n----------------------------------------\n\nTITLE: ESLint Configuration for Shadcn-Svelte Components\nDESCRIPTION: Provides an ESLint configuration to ignore false positive errors in Shadcn-Svelte components, specifically for unused variables and props.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/installation/index.md#2025-04-15_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rules\": {\n    \"@typescript-eslint/no-unused-vars\": [\n      \"warn\",\n      {\n        \"argsIgnorePattern\": \"^_\",\n        \"varsIgnorePattern\": \"^\\\\$\\\\$(Props|Events|Slots|Generic)$\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Vertical Resizable Pane Group in Svelte\nDESCRIPTION: Demonstrates how to create a vertical resizable pane group using the 'direction' prop set to 'vertical'.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/resizable.md#2025-04-15_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import * as Resizable from \"$lib/components/ui/resizable/index.js\";\n</script>\n\n<Resizable.PaneGroup direction=\"vertical\">\n  <Resizable.Pane>One</Resizable.Pane>\n  <Resizable.Handle />\n  <Resizable.Pane>Two</Resizable.Pane>\n</Resizable.PaneGroup>\n```\n\n----------------------------------------\n\nTITLE: Creating a Form Schema with Zod in TypeScript\nDESCRIPTION: Defines a Zod schema for form validation in TypeScript.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/form.md#2025-04-15_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { z } from \"zod\";\n\nexport const formSchema = z.object({\n  username: z.string().min(2).max(50),\n});\n\nexport type FormSchema = typeof formSchema;\n```\n\n----------------------------------------\n\nTITLE: Adding an Action to Sidebar Group in Svelte\nDESCRIPTION: Shows how to add an action button to a Sidebar.Group using the Sidebar.GroupAction component.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/sidebar.md#2025-04-15_snippet_17\n\nLANGUAGE: svelte\nCODE:\n```\n<Sidebar.Group>\n  <Sidebar.GroupLabel>Projects</Sidebar.GroupLabel>\n  <Sidebar.GroupAction title=\"Add Project\">\n    <Plus /> <span class=\"sr-only\">Add Project</span>\n  </Sidebar.GroupAction>\n  <Sidebar.GroupContent />\n</Sidebar.Group>\n```\n\n----------------------------------------\n\nTITLE: Init Command Options\nDESCRIPTION: Lists all available options for the shadcn-svelte init command including working directory configuration, dependency management, component styling, and path configurations.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/cli.md#2025-04-15_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nUsage: shadcn-svelte init [options]\n\ninitialize your project and install dependencies\n\nOptions:\n  -c, --cwd <cwd>            the working directory (default: the current directory)\n  --no-deps                  disable adding & installing dependencies\n  --style <name>             the style for the components (choices: \"default\", \"new-york\")\n  --base-color <name>        the base color for the components (choices: \"slate\", \"gray\", \"zinc\", \"neutral\", \"stone\")\n  --css <path>               path to the global CSS file\n  --tailwind-config <path>   path to the tailwind config file\n  --components-alias <path>  import alias for components\n  --utils-alias <path>       import alias for utils\n  -h, --help                 display help for command\n```\n\n----------------------------------------\n\nTITLE: Creating a Tailwind CSS Class Utility Function\nDESCRIPTION: TypeScript utility that creates a helper function for conditionally merging Tailwind CSS classes. Uses clsx and tailwind-merge to handle class combinations efficiently and prevent class conflicts.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/installation/manual.md#2025-04-15_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Icon and Label to Sidebar MenuButton in Svelte\nDESCRIPTION: This example demonstrates how to add an icon and a label to a MenuButton component. The label is wrapped in a span tag to ensure proper styling and truncation behavior.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/sidebar.md#2025-04-15_snippet_20\n\nLANGUAGE: svelte\nCODE:\n```\n<Sidebar.MenuButton>\n  {#snippet child({ props })}\n    <a href=\"/home\" {...props}>\n      <House />\n      <span>Home</span>\n    </a>\n  {/snippet}\n</Sidebar.MenuButton>\n```\n\n----------------------------------------\n\nTITLE: Setting Carousel Orientation in Svelte\nDESCRIPTION: Example showing how to set the orientation of the carousel using the orientation prop, which can be either 'vertical' or 'horizontal'.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/carousel.md#2025-04-15_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<Carousel.Root orientation=\"vertical | horizontal\">\n  <Carousel.Content>\n    <Carousel.Item>...</Carousel.Item>\n    <Carousel.Item>...</Carousel.Item>\n    <Carousel.Item>...</Carousel.Item>\n  </Carousel.Content>\n</Carousel.Root>\n```\n\n----------------------------------------\n\nTITLE: Configuring Carousel Item Sizes in Svelte\nDESCRIPTION: Examples showing how to set fixed and responsive sizes for carousel items using utility classes. The example demonstrates setting items to 33% of the carousel width.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/carousel.md#2025-04-15_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- 33% of the carousel width. -->\n<Carousel.Root>\n  <Carousel.Content>\n    <Carousel.Item class=\"basis-1/3\">...</Carousel.Item>\n    <Carousel.Item class=\"basis-1/3\">...</Carousel.Item>\n    <Carousel.Item class=\"basis-1/3\">...</Carousel.Item>\n  </Carousel.Content>\n</Carousel.Root>\n```\n\n----------------------------------------\n\nTITLE: Update Command Options\nDESCRIPTION: Lists all available options for the shadcn-svelte update command, including working directory configuration, batch updates, confirmation settings, and proxy configuration.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/cli.md#2025-04-15_snippet_4\n\nLANGUAGE: txt\nCODE:\n```\nUsage: shadcn-svelte update [options] [components...]\n\nupdate components in your project\n\nArguments:\n  components       name of components\n\nOptions:\n  -c, --cwd <cwd>  the working directory (default: the current directory)\n  -a, --all        update all existing components (default: false)\n  -y, --yes        skip confirmation prompt (default: false)\n  --proxy <proxy>  fetch components from registry using a proxy\n  -h, --help       display help for command\n```\n\n----------------------------------------\n\nTITLE: Configuring Carousel Options in Svelte\nDESCRIPTION: Example showing how to pass configuration options to the Embla Carousel using the opts prop, including align and loop settings.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/carousel.md#2025-04-15_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<Carousel.Root\n  opts={{\n    align: \"start\",\n    loop: true,\n  }}\n>\n  <Carousel.Content>\n    <Carousel.Item>...</Carousel.Item>\n    <Carousel.Item>...</Carousel.Item>\n    <Carousel.Item>...</Carousel.Item>\n  </Carousel.Content>\n</Carousel.Root>\n```\n\n----------------------------------------\n\nTITLE: Setting Up CSS Variables for Light and Dark Themes\nDESCRIPTION: CSS configuration for app.css that sets up CSS variables for both light and dark themes. It defines variables for background, foreground, colors, border styles, and more to support the component library's theming system.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/installation/manual.md#2025-04-15_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 240 10% 3.9%;\n    --muted: 240 4.8% 95.9%;\n    --muted-foreground: 240 3.8% 46.1%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 240 10% 3.9%;\n    --card: 0 0% 100%;\n    --card-foreground: 240 10% 3.9%;\n    --border: 240 5.9% 90%;\n    --input: 240 5.9% 90%;\n    --primary: 240 5.9% 10%;\n    --primary-foreground: 0 0% 98%;\n    --secondary: 240 4.8% 95.9%;\n    --secondary-foreground: 240 5.9% 10%;\n    --accent: 240 4.8% 95.9%;\n    --accent-foreground: 240 5.9% 10%;\n    --destructive: 0 72.22% 50.59%;\n    --destructive-foreground: 0 0% 98%;\n    --ring: 240 5% 64.9%;\n    --radius: 0.5rem;\n\n    --sidebar-background: 0 0% 98%;\n    --sidebar-foreground: 240 5.3% 26.1%;\n    --sidebar-primary: 240 5.9% 10%;\n    --sidebar-primary-foreground: 0 0% 98%;\n    --sidebar-accent: 240 4.8% 95.9%;\n    --sidebar-accent-foreground: 240 5.9% 10%;\n    --sidebar-border: 220 13% 91%;\n    --sidebar-ring: 240 5% 64.9%;\n  }\n\n  .dark {\n    --background: 240 10% 3.9%;\n    --foreground: 0 0% 98%;\n    --muted: 240 3.7% 15.9%;\n    --muted-foreground: 240 5% 64.9%;\n    --popover: 240 10% 3.9%;\n    --popover-foreground: 0 0% 98%;\n    --card: 240 10% 3.9%;\n    --card-foreground: 0 0% 98%;\n    --border: 240 3.7% 15.9%;\n    --input: 240 3.7% 15.9%;\n    --primary: 0 0% 98%;\n    --primary-foreground: 240 5.9% 10%;\n    --secondary: 240 3.7% 15.9%;\n    --secondary-foreground: 0 0% 98%;\n    --accent: 240 3.7% 15.9%;\n    --accent-foreground: 0 0% 98%;\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 0 85.7% 97.3%;\n    --ring: 240 3.7% 48%;\n\n    --sidebar-background: 240 5.9% 10%;\n    --sidebar-foreground: 240 4.8% 95.9%;\n    --sidebar-primary: 224.3 76.3% 48%;\n    --sidebar-primary-foreground: 0 0% 100%;\n    --sidebar-accent: 240 3.7% 15.9%;\n    --sidebar-accent-foreground: 240 4.8% 95.9%;\n    --sidebar-border: 240 3.7% 15.9%;\n    --sidebar-ring: 240 4.9% 83.9%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n    font-feature-settings:\n      \"rlig\" 1,\n      \"calt\" 1;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Separator Component in Svelte\nDESCRIPTION: Basic example showing how to import and use the Separator component from the shadcn-svelte UI library. The component provides visual or semantic separation between content elements.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/separator.md#2025-04-15_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { Separator } from \"$lib/components/ui/separator/index.js\";\n</script>\n\n<Separator />\n```\n\n----------------------------------------\n\nTITLE: shadcn-svelte CLI Configuration Options\nDESCRIPTION: Shows the configuration options that will be presented when running the shadcn-svelte init command to set up components.json.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/installation/sveltekit.md#2025-04-15_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nWould you like to use TypeScript (recommended)? › Yes\nWhich style would you like to use? › Default\nWhich color would you like to use as base color? › Slate\nWhere is your global CSS file? › src/app.css\nWhere is your tailwind.config.[cjs|js|ts] located? › tailwind.config.js\nConfigure the import alias for components: › $lib/components\nConfigure the import alias for utils: › $lib/utils\nConfigure the import alias for hooks: › $lib/hooks\nConfigure the import alias for ui: › $lib/components/ui\n```\n\n----------------------------------------\n\nTITLE: Creating a Page Component with Form in Svelte\nDESCRIPTION: Demonstrates how to create a page component that uses the form component in Svelte.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/form.md#2025-04-15_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import type { PageData } from \"./$types.js\";\n  import SettingsForm from \"./settings-form.svelte\";\n  let { data }: { data: PageData } = $props();\n</script>\n\n<SettingsForm {data} />\n```\n\n----------------------------------------\n\nTITLE: Adding ModeWatcher Component to Astro Page\nDESCRIPTION: This snippet demonstrates how to import and use the ModeWatcher component from mode-watcher in an Astro page. The component is loaded on the client-side using the client:load directive.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/dark-mode/astro.md#2025-04-15_snippet_1\n\nLANGUAGE: astro\nCODE:\n```\n---\nimport \"$lib/styles/app.css\";\nimport { ModeWatcher } from \"mode-watcher\";\n---\n\n<!-- inline-script -->\n<html lang=\"en\">\n\t<body>\n      <h1>Astro</h1>\n      <ModeWatcher client:load />\n\t</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Using buttonVariants Helper for Styled Links\nDESCRIPTION: Demonstrates using the buttonVariants helper function to create an anchor element that looks like a button with the specified variant styles.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/button.md#2025-04-15_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { buttonVariants } from \"$lib/components/ui/button\";\n</script>\n\n<a href=\"/dashboard\" class={buttonVariants({ variant: \"outline\" })}>\n  Dashboard\n</a>\n```\n\n----------------------------------------\n\nTITLE: Using Badge Component in Svelte\nDESCRIPTION: This example demonstrates how to use the Badge component with an outline variant in a Svelte file.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/badge.md#2025-04-15_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<Badge variant=\"outline\">Badge</Badge>\n```\n\n----------------------------------------\n\nTITLE: Defining Popover CSS Variables\nDESCRIPTION: This snippet sets CSS variables for popover components like DropdownMenu, HoverCard, and Popover.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/theming.md#2025-04-15_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n--popover: 0 0% 100%;\n--popover-foreground: 222.2 47.4% 11.2%;\n```\n\n----------------------------------------\n\nTITLE: Installing shadcn-svelte Components with CLI\nDESCRIPTION: Command-line instruction for adding specific shadcn-svelte components to a project using the npx command. This allows developers to selectively add only the components they need.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/tailwind4.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-svelte@latest add button\n```\n\n----------------------------------------\n\nTITLE: Customizing Sidebar Width with CSS Variables\nDESCRIPTION: Example of how to customize the width of the sidebar using CSS variables. This approach allows for easy resizing of the sidebar without modifying the component code.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/sidebar.md#2025-04-15_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<Sidebar.Provider\n  style=\"--sidebar-width: 20rem; --sidebar-width-mobile: 20rem;\"\n>\n  <Sidebar.Root />\n</Sidebar.Provider>\n```\n\n----------------------------------------\n\nTITLE: Importing Button Component in Svelte\nDESCRIPTION: Shows how to import the Button component from the UI library for use in a Svelte component.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/button.md#2025-04-15_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { Button } from \"$lib/components/ui/button/index.js\";\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining Secondary CSS Variables\nDESCRIPTION: This snippet defines CSS variables for secondary colors, typically used in Button components.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/theming.md#2025-04-15_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n--secondary: 210 40% 96.1%;\n--secondary-foreground: 222.2 47.4% 11.2%;\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Input OTP Component in Svelte\nDESCRIPTION: Demonstrates the basic implementation of the Input OTP component with a 6-digit code split into two groups of three digits.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/input-otp.md#2025-04-15_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import * as InputOTP from \"$lib/components/ui/input-otp/index.js\";\n</script>\n\n<InputOTP.Root maxlength={6}>\n  {#snippet children({ cells })}\n    <InputOTP.Group>\n      {#each cells.slice(0, 3) as cell}\n        <InputOTP.Slot {cell} />\n      {/each}\n    </InputOTP.Group>\n    <InputOTP.Separator />\n    <InputOTP.Group>\n      {#each cells.slice(3, 6) as cell}\n        <InputOTP.Slot {cell} />\n      {/each}\n    </InputOTP.Group>\n  {/snippet}\n</InputOTP.Root>\n```\n\n----------------------------------------\n\nTITLE: Styling Sidebar Group Based on Collapsible State in Svelte\nDESCRIPTION: This snippet shows how to hide a Sidebar.Group component when the sidebar is in 'icon' mode. It uses a CSS class with a data attribute selector to control visibility based on the collapsible state.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/sidebar.md#2025-04-15_snippet_34\n\nLANGUAGE: svelte\nCODE:\n```\n<Sidebar.Root collapsible=\"icon\">\n  <Sidebar.Content>\n    <Sidebar.Group class=\"group-data-[collapsible=icon]:hidden\" />\n  </Sidebar.Content>\n</Sidebar.Root>\n```\n\n----------------------------------------\n\nTITLE: Using Skeleton Component with Custom Styling\nDESCRIPTION: Demonstrates how to use the Skeleton component with custom height, width, and border radius classes. This creates a placeholder with a rounded appearance while content is loading.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/skeleton.md#2025-04-15_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<Skeleton class=\"h-[20px] w-[100px] rounded-full\" />\n```\n\n----------------------------------------\n\nTITLE: Dark Mode Navigation Component in Svelte\nDESCRIPTION: A component that renders a navigation grid with links to dark mode implementation guides for Svelte and Astro frameworks. Uses LinkedCard components and framework-specific icons.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/dark-mode/index.md#2025-04-15_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\timport { LinkedCard } from '$lib/components/docs'\n\timport SvelteWhite from '$lib/components/docs/icons/svelte-white.svelte'\n</script>\n\n<div class=\"grid sm:grid-cols-2 gap-4 mt-8 sm:gap-6\">\n  <LinkedCard href=\"/docs/dark-mode/svelte\">\n  <SvelteWhite />\n    <p class=\"font-medium mt-2\">Svelte</p>\n  </LinkedCard>\n  <LinkedCard href=\"/docs/dark-mode/astro\">\n  <svg role=\"img\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\" class=\"w-10 h-10\" fill=\"currentColor\"><title>Astro</title><path d=\"M16.074 16.86C15.354 17.476 13.917 17.895 12.262 17.895C10.23 17.895 8.527 17.263 8.075 16.412C7.914 16.9 7.877 17.458 7.877 17.814C7.877 17.814 7.771 19.564 8.988 20.782C8.988 20.15 9.501 19.637 10.133 19.637C11.216 19.637 11.215 20.582 11.214 21.349V21.418C11.214 22.582 11.925 23.579 12.937 24C12.7812 23.6794 12.7005 23.3275 12.701 22.971C12.701 21.861 13.353 21.448 14.111 20.968C14.713 20.585 15.383 20.161 15.844 19.308C16.0926 18.8493 16.2225 18.3357 16.222 17.814C16.2221 17.4903 16.1722 17.1685 16.074 16.86ZM15.551 0.6C15.747 0.844 15.847 1.172 16.047 1.829L20.415 16.176C18.7743 15.3246 17.0134 14.7284 15.193 14.408L12.35 4.8C12.3273 4.72337 12.2803 4.65616 12.2162 4.60844C12.152 4.56072 12.0742 4.53505 11.9943 4.53528C11.9143 4.5355 11.8366 4.56161 11.7727 4.60969C11.7089 4.65777 11.6623 4.72524 11.64 4.802L8.83 14.405C7.00149 14.724 5.23264 15.3213 3.585 16.176L7.974 1.827C8.174 1.171 8.274 0.843 8.471 0.6C8.64406 0.385433 8.86922 0.218799 9.125 0.116C9.415 0 9.757 0 10.443 0H13.578C14.264 0 14.608 0 14.898 0.117C15.1529 0.219851 15.3783 0.386105 15.551 0.6Z\" fill=\"currentColor\"></path></svg>\n    <p class=\"font-medium mt-2\">Astro</p>\n  </LinkedCard>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Muted CSS Variables\nDESCRIPTION: This snippet sets CSS variables for muted backgrounds, used in components like TabsList, Skeleton, and Switch.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/theming.md#2025-04-15_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n--muted: 210 40% 96.1%;\n--muted-foreground: 215.4 16.3% 46.9%;\n```\n\n----------------------------------------\n\nTITLE: Command-line Output for Project Initialization Questions\nDESCRIPTION: Shows the interactive questions that appear when running the shadcn-svelte init command, including style options, base color selection, file path configurations for CSS and Tailwind, and import alias settings.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/cli.md#2025-04-15_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nWhich style would you like to use? › Default\nWhich base color would you like to use? › Slate\nWhere is your global CSS file? (this file will be overwritten) › src/app.css\nWhere is your Tailwind config located? (this file will be overwritten) › tailwind.config.[cjs|js|ts]\nConfigure the import alias for components: › $lib/components\nConfigure the import alias for utils: › $lib/utils\n```\n\n----------------------------------------\n\nTITLE: Using Scroll Area Component in Svelte\nDESCRIPTION: Example of how to import and use the Scroll Area component in a Svelte file. It demonstrates creating a scrollable area with custom content.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/scroll-area.md#2025-04-15_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { ScrollArea } from \"$lib/components/ui/scroll-area/index.js\";\n</script>\n\n<ScrollArea class=\"h-[200px] w-[350px] rounded-md border p-4\">\n  Jokester began sneaking into the castle in the middle of the night and\n  leaving jokes all over the place: under the king's pillow, in his soup, even\n  in the royal toilet. The king was furious, but he couldn't seem to stop\n  Jokester. And then, one day, the people of the kingdom discovered that the\n  jokes left by Jokester were so funny that they couldn't help but laugh. And\n  once they started laughing, they couldn't stop.\n</ScrollArea>\n```\n\n----------------------------------------\n\nTITLE: Returning Form Data in SvelteKit Load Function\nDESCRIPTION: Demonstrates how to return form data from a SvelteKit load function using Superforms and Zod.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/form.md#2025-04-15_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { PageServerLoad } from \"./$types.js\";\nimport { superValidate } from \"sveltekit-superforms\";\nimport { formSchema } from \"./schema\";\nimport { zod } from \"sveltekit-superforms/adapters\";\n\nexport const load: PageServerLoad = async () => {\n  return {\n    form: await superValidate(zod(formSchema)),\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Listing Available shadcn Components\nDESCRIPTION: Command to view all available components that can be added through the shadcn-svelte CLI by running the add command without arguments.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/packages/cli/README.md#2025-04-15_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-svelte add\n```\n\n----------------------------------------\n\nTITLE: Creating a Sidebar Group with Label and Action in Svelte\nDESCRIPTION: Shows how to create a section within the sidebar using Sidebar.Group, including a label, optional action, and content.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/sidebar.md#2025-04-15_snippet_15\n\nLANGUAGE: svelte\nCODE:\n```\n<Sidebar.Root>\n  <Sidebar.Content>\n    <Sidebar.Group>\n      <Sidebar.GroupLabel>Application</Sidebar.GroupLabel>\n      <Sidebar.GroupAction>\n        <Plus /> <span class=\"sr-only\">Add Project</span>\n      </Sidebar.GroupAction>\n      <Sidebar.GroupContent></Sidebar.GroupContent>\n    </Sidebar.Group>\n  </Sidebar.Content>\n</Sidebar.Root>\n```\n\n----------------------------------------\n\nTITLE: Importing Table Component in Svelte\nDESCRIPTION: Imports all components from the Table module using the namespace import syntax. This allows access to all table-related components such as Root, Caption, Header, etc.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/table.md#2025-04-15_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import * as Table from \"$lib/components/ui/table/index.js\";\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating a Badge Link in Svelte\nDESCRIPTION: This snippet shows how to create a link that looks like a badge using the badgeVariants helper function in a Svelte file.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/badge.md#2025-04-15_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { badgeVariants } from \"$lib/components/ui/badge/index.js\";\n</script>\n\n<a href=\"/dashboard\" class={badgeVariants({ variant: \"outline\" })}>Badge</a>\n```\n\n----------------------------------------\n\nTITLE: Basic Sidebar Root Component Usage in Svelte\nDESCRIPTION: Demonstrates the basic usage of the Sidebar.Root component in a Svelte file. It imports the necessary components and renders the root sidebar element.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/sidebar.md#2025-04-15_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import * as Sidebar from \"$lib/components/ui/sidebar/index.js\";\n</script>\n\n<Sidebar.Root />\n```\n\n----------------------------------------\n\nTITLE: Adding a Specific shadcn Component Example\nDESCRIPTION: Example of adding the alert-dialog component to a Svelte project using the shadcn-svelte CLI.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/packages/cli/README.md#2025-04-15_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-svelte add alert-dialog\n```\n\n----------------------------------------\n\nTITLE: Creating Global TailwindCSS Stylesheet\nDESCRIPTION: CSS file that imports Tailwind's base, components, and utilities stylesheets, serving as the global stylesheet for the Astro project.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/installation/astro.md#2025-04-15_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\n----------------------------------------\n\nTITLE: Using Progress Component in Svelte\nDESCRIPTION: Example of how to import and use the Progress component in a Svelte file. It demonstrates setting a value prop to indicate the progress percentage.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/progress.md#2025-04-15_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { Progress } from \"$lib/components/ui/progress/index.js\";\n</script>\n\n<Progress value={33} />\n```\n\n----------------------------------------\n\nTITLE: Using Separators in Sidebar Structure with Svelte\nDESCRIPTION: This example shows how to add separators within a sidebar to visually divide sections. Separators can be used at various levels of the sidebar hierarchy to improve visual organization.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/sidebar.md#2025-04-15_snippet_28\n\nLANGUAGE: svelte\nCODE:\n```\n<Sidebar.Root>\n  <Sidebar.Header />\n  <Sidebar.Separator />\n  <Sidebar.Content>\n    <Sidebar.Group />\n    <Sidebar.Separator />\n    <Sidebar.Group />\n  </Sidebar.Content>\n</Sidebar.Root>\n```\n\n----------------------------------------\n\nTITLE: CLI Configuration Prompts for shadcn-svelte\nDESCRIPTION: Sample output showing the configuration questions and responses when initializing shadcn-svelte in a Vite project, including paths and style preferences.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/installation/vite.md#2025-04-15_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nWould you like to use TypeScript (recommended)? › Yes\nWhich style would you like to use? › Default\nWhich color would you like to use as base color? › Slate\nWhere is your global CSS file? › src/app.css\nWhere is your tailwind.config.[cjs|js|ts] located? › tailwind.config.js\nConfigure the import alias for components: › $lib/components\nConfigure the import alias for utils: › $lib/utils\nConfigure the import alias for hooks: › $lib/hooks\nConfigure the import alias for ui: › $lib/components/ui\n```\n\n----------------------------------------\n\nTITLE: Implementing a Collapsible Sidebar Group in Svelte\nDESCRIPTION: Demonstrates how to create a collapsible sidebar group by wrapping it in a Collapsible component.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/sidebar.md#2025-04-15_snippet_16\n\nLANGUAGE: svelte\nCODE:\n```\n<Collapsible.Root open class=\"group/collapsible\">\n  <Sidebar.Group>\n    <Sidebar.GroupLabel>\n      {#snippet child({ props })}\n        <Collapsible.Trigger {...props}>\n          Help\n          <ChevronDown\n            class=\"ml-auto transition-transform group-data-[state=open]/collapsible:rotate-180\"\n          />\n        </Collapsible.Trigger>\n      {/snippet}\n    </Sidebar.GroupLabel>\n    <Collapsible.Content>\n      <Sidebar.GroupContent />\n    </Collapsible.Content>\n  </Sidebar.Group>\n</Collapsible.Root>\n```\n\n----------------------------------------\n\nTITLE: Configuring Path Aliases in svelte.config.js\nDESCRIPTION: Updates the svelte.config.js file to include custom path aliases for the project. This enables importing components using the @/* syntax instead of the default $lib path.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/installation/manual.md#2025-04-15_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  // ... other config\n  kit: {\n    // ... other config\n    alias: {\n      \"@/*\": \"./path/to/lib/*\",\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Styling Menu Action Based on Menu Button Active State in Svelte\nDESCRIPTION: This example demonstrates how to make a menu action visible when its associated menu button is active. It uses a CSS class with a peer selector and data attribute to control the opacity of the menu action based on the active state of the menu button.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/sidebar.md#2025-04-15_snippet_35\n\nLANGUAGE: svelte\nCODE:\n```\n<Sidebar.MenuItem>\n  <Sidebar.MenuButton />\n  <Sidebar.MenuAction\n    class=\"peer-data-[active=true]/menu-button:opacity-100\"\n  />\n</Sidebar.MenuItem>\n```\n\n----------------------------------------\n\nTITLE: Adding Sidebar Color Variables to CSS\nDESCRIPTION: CSS variables that define the color scheme for the sidebar component in both light and dark modes. These variables control background, foreground, primary, accent, border and ring colors.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/sidebar.md#2025-04-15_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n@layer base {\n  :root {\n    --sidebar-background: 0 0% 98%;\n    --sidebar-foreground: 240 5.3% 26.1%;\n    --sidebar-primary: 240 5.9% 10%;\n    --sidebar-primary-foreground: 0 0% 98%;\n    --sidebar-accent: 240 4.8% 95.9%;\n    --sidebar-accent-foreground: 240 5.9% 10%;\n    --sidebar-border: 220 13% 91%;\n    --sidebar-ring: 217.2 91.2% 59.8%;\n  }\n\n  .dark {\n    --sidebar-background: 240 5.9% 10%;\n    --sidebar-foreground: 240 4.8% 95.9%;\n    --sidebar-primary: 224.3 76.3% 48%;\n    --sidebar-primary-foreground: 0 0% 100%;\n    --sidebar-accent: 240 3.7% 15.9%;\n    --sidebar-accent-foreground: 240 4.8% 95.9%;\n    --sidebar-border: 240 3.7% 15.9%;\n    --sidebar-ring: 217.2 91.2% 59.8%;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Textarea Component in Svelte\nDESCRIPTION: Shows how to import the Textarea component from the UI component library.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/textarea.md#2025-04-15_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { Textarea } from \"$lib/components/ui/textarea/index.js\";\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing Badge Component in Svelte\nDESCRIPTION: This snippet shows how to import the Badge component from the UI library in a Svelte file.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/badge.md#2025-04-15_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { Badge } from \"$lib/components/ui/badge/index.js\";\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic Textarea Usage\nDESCRIPTION: Demonstrates the simplest implementation of the Textarea component.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/textarea.md#2025-04-15_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<Textarea />\n```\n\n----------------------------------------\n\nTITLE: Embedding Figma Design with AspectRatio Component\nDESCRIPTION: Uses the AspectRatio component to create a responsive container with a 16:9 ratio for embedding a Figma iframe. The iframe links to the shadcn UI components Figma file.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/figma.md#2025-04-15_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<AspectRatio ratio={16 / 9} class=\"w-full mt-4\">\n\n  <iframe\n    title=\"Figma page for shadcn\"\n    src=\"https://embed.figma.com/file/1203061493325953101/hf_embed?community_viewer=true&embed_host=shadcn&hub_file_id=1203061493325953101&kind=&viewer=1\"\n    class=\"h-full w-full overflow-hidden rounded-lg border bg-muted\"\n  />\n</AspectRatio>\n```\n\n----------------------------------------\n\nTITLE: Simplifying utils.ts for Svelte 5\nDESCRIPTION: Updates the utils.ts file for Svelte 5 by removing the flyAndScale function and only exporting the cn utility for class name merging.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/migration/svelte-5/index.md#2025-04-15_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing flyAndScale Transition Function in TypeScript\nDESCRIPTION: This code defines a custom flyAndScale transition function for Svelte components. It creates a smooth animation that combines flying and scaling effects, with customizable parameters for direction, scale, and duration. The function handles transform calculations and returns a TransitionConfig object compatible with Svelte's transition system.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/changelog.md#2025-04-15_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\nimport { cubicOut } from \"svelte/easing\";\nimport type { TransitionConfig } from \"svelte/transition\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\ntype FlyAndScaleParams = {\n  y?: number;\n  x?: number;\n  start?: number;\n  duration?: number;\n};\n\nexport const flyAndScale = (\n  node: Element,\n  params: FlyAndScaleParams = { y: -8, x: 0, start: 0.95, duration: 150 }\n): TransitionConfig => {\n  const style = getComputedStyle(node);\n  const transform = style.transform === \"none\" ? \"\" : style.transform;\n\n  const scaleConversion = (\n    valueA: number,\n    scaleA: [number, number],\n    scaleB: [number, number]\n  ) => {\n    const [minA, maxA] = scaleA;\n    const [minB, maxB] = scaleB;\n\n    const percentage = (valueA - minA) / (maxA - minA);\n    const valueB = percentage * (maxB - minB) + minB;\n\n    return valueB;\n  };\n\n  const styleToString = (\n    style: Record<string, number | string | undefined>\n  ): string => {\n    return Object.keys(style).reduce((str, key) => {\n      if (style[key] === undefined) return str;\n      return str + key + \":\" + style[key] + \";\";\n    }, \"\");\n  };\n\n  return {\n    duration: params.duration ?? 200,\n    delay: 0,\n    css: (t) => {\n      const y = scaleConversion(t, [0, 1], [params.y ?? 5, 0]);\n      const x = scaleConversion(t, [0, 1], [params.x ?? 0, 0]);\n      const scale = scaleConversion(t, [0, 1], [params.start ?? 0.95, 1]);\n\n      return styleToString({\n        transform:\n          transform +\n          \"translate3d(\" +\n          x +\n          \"px, \" +\n          y +\n          \"px, 0) scale(\" +\n          scale +\n          \")\",\n        opacity: t,\n      });\n    },\n    easing: cubicOut,\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Skeleton Component in Svelte\nDESCRIPTION: Shows how to import the Skeleton component from the project's component library. This is the first step needed before using the component in a Svelte application.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/skeleton.md#2025-04-15_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { Skeleton } from \"$lib/components/ui/skeleton/index.js\";\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic Button Usage with Outline Variant\nDESCRIPTION: Demonstrates the basic usage of the Button component with the outline variant.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/button.md#2025-04-15_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<Button variant=\"outline\">Button</Button>\n```\n\n----------------------------------------\n\nTITLE: Importing ComponentPreview in Svelte\nDESCRIPTION: Imports the ComponentPreview component from the docs components library. This component is used throughout the page to display examples of typography elements.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/typography.md#2025-04-15_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { ComponentPreview } from \"$lib/components/docs\"\n</script>\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog\nDESCRIPTION: Full changelog document detailing version history from 0.0.2 through 1.0.0-next.8, including breaking changes, new features, and bug fixes.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/packages/cli/CHANGELOG.md#2025-04-15_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# shadcn-svelte\n\n## 1.0.0-next.8\n\n### Patch Changes\n\n- d764bdf: fix(cli)(next): Add missing ui alias option\n\n## 1.0.0-next.7\n\n### Patch Changes\n\n- 8826014: feat: Improved error message when fetching the registry fails\n\n## 1.0.0-next.6\n\n### Patch Changes\n\n- 7669720: fix: workaround caching issue preventing the correct registry from being fetched\n\n## 1.0.0-next.5\n\n### Patch Changes\n\n- 61d98fd: chore: Add warning for incompatible dependency\n\n## 1.0.0-next.4\n\n### Patch Changes\n\n- f932494: fix: ensure `ui` and `hooks` paths are normalized\n\n## 1.0.0-next.3\n\n### Patch Changes\n\n- 11d0ff3: fix: Ensure `svelte-kit sync` executes locally\n\n## 1.0.0-next.2\n\n### Patch Changes\n\n- fb7c683: fix(next): add newline to end of `components.json`\n\n## 1.0.0-next.1\n\n### Patch Changes\n\n- e29f8f5: fix: Ensure `utils.(js|ts)` is not fetched from the registry on `update` command\n- e29f8f5: fix: `update` command now properly updates components\n\n## 1.0.0-next.0\n\n### Major Changes\n\n- b479077: Svelte 5\n\n## 0.14.0\n\n### Minor Changes\n\n- bc787f3: Install all dependencies as dev dependencies\n\n## 0.13.0\n\n### Minor Changes\n\n- 06a19d8: feat: Added selection prompt for package managers if one cannot be detected\n\n## 0.12.2\n\n### Patch Changes\n\n- e67c1fd: chore: use `package-manager-detector`\n\n## 0.12.1\n\n### Patch Changes\n\n- d43d140: fix: Use correct cwd when syncing SvelteKit projects\n\n## 0.12.0\n\n### Minor Changes\n\n- b6b4601: feat: Added `--no-deps` flag to `init` command\n\n### Patch Changes\n\n- b6b4601: breaking: Changed `--nodep` flag to `--no-deps` for `add` command\n\n## 0.11.1\n\n### Patch Changes\n\n- c2d1ed6: fix: Fixes bug with incorrect flag assignments\n\n## 0.11.0\n\n### Minor Changes\n\n- 6c9b9ee: feat: Added CLI flags for each option for `init`\n- 6c9b9ee: feat: Removed TypeScript prompt in favor of auto detection\n\n## 0.10.7\n\n### Patch Changes\n\n- f201baa: chore: Replaced `node-fetch` for `node-fetch-native`\n\n## 0.10.6\n\n### Patch Changes\n\n- becb41d: chore: Added more http proxy options\n\n## 0.10.5\n\n### Patch Changes\n\n- 2d80e21: chore: Added an overwrite notice for the global stylesheet and tailwind config\n\n## 0.10.4\n\n### Patch Changes\n\n- ba14ef5: fix: Allow a registry dependency to optionally be overwritten\n\n## 0.10.3\n\n### Patch Changes\n\n- 6a30f8a: fix: Changed unsupported runtime error into a warning and fixed a Bun specific issue\n\n## 0.10.2\n\n### Patch Changes\n\n- 9c20e7a: fix: Added an error for unsupported runtimes\n\n## 0.10.1\n\n### Patch Changes\n\n- 7f487a5: fix: Updating `utils` in JS mode now updates with the proper syntax\n\n## 0.10.0\n\n### Minor Changes\n\n- 231f674: feat: Added TypeScript support for the tailwind config\n\n### Patch Changes\n\n- ebd04c4: chore: Added import path validators for the `init` command\n- c5afe89: chore: Improved printed error messages\n- c5afe89: chore: Certain config files can now be auto-detected and suggested during `init`\n\n## 0.9.4\n\n### Patch Changes\n\n- 226f09e: chore: Removed `typescript` as a peer dependency\n- 226f09e: chore: Provide a descriptive error when import aliases do not reference a valid `[tsconfig|jsconfig].json` path alias\n\n## 0.9.3\n\n### Patch Changes\n\n- 222f462: chore: Replaced `tsconfig-paths` for a custom path alias resolver\n\n## 0.9.2\n\n### Patch Changes\n\n- 7f39dbf: fix: Icons are now installed in the `add` command\n\n## 0.9.1\n\n### Patch Changes\n\n- 8c43ad3: chore: Optimized dependencies and minified package\n- 8c43ad3: chore: Replaced `zod` for `valibot`\n\n## 0.9.0\n\n### Minor Changes\n\n- 66931b3: feat: Added support for the `--proxy` flag to the `update` command\n- 66931b3: feat: Graphical overhaul, replacing `prompts` for `@clack/prompts`\n- 66931b3: feat: Added a prompt to overwrite existing components to the `add` command\n\n### Patch Changes\n\n- 66931b3: perf: Optimized dependency installation\n\n## 0.8.3\n\n### Patch Changes\n\n- 0b1836e: fix: Fixed component update warning and malformed filename for `utils`\n\n## 0.8.2\n\n### Patch Changes\n\n- 1f6ea79: chore: Simplified use of internal aliases\n\n## 0.8.1\n\n### Patch Changes\n\n- fd888487: chore: Added unused file warnings for the `update` command\n\n## 0.8.0\n\n### Minor Changes\n\n- d7ae8b54: feat: Replaced `radix-icons-svelte` with [svelte-radix](https://github.com/shinokada/svelte-radix) for New York style\n\n## 0.7.0\n\n### Minor Changes\n\n- bfdc861: feat: Add support for JS\n\n## 0.6.1\n\n### Patch Changes\n\n- 59dca2c: fix: Support use of `jsconfig.json`\n\n## 0.6.0\n\n### Minor Changes\n\n- 024cd2a: feat: Added support for non SvelteKit frameworks\n\n## 0.5.0\n\n### Minor Changes\n\n- dcceae8: feat: Added a `utils` option for `update`\n\n## 0.4.2\n\n### Patch Changes\n\n- 004f7f0: fix: Removed redundant overwrite warning in `add`\n\n## 0.4.1\n\n### Patch Changes\n\n- 3068583: fix: `tailwind.config.ts` is no longer mistakenly deleted on `init`\n\n## 0.4.0\n\n### Minor Changes\n\n- 3151474: feat: Added an `--all` flag to the `update` command\n\n### Patch Changes\n\n- d9cc40c: fix: If no lockfile is found, install dependencies with the current PM of the proccess\n\n## 0.3.8\n\n### Patch Changes\n\n- 744f149: Bump zod from 3.21.4 to 3.22.3 in /packages/cli\n\n## 0.3.7\n\n### Patch Changes\n\n- 9660a09: rename extension name from .postcss to .pcss\n\n## 0.3.6\n\n### Patch Changes\n\n- 614681f: feat: Ability to use a proxy when adding components\n- efb9694: Fix: destructive a11y contrast issues\n\n## 0.3.5\n\n### Patch Changes\n\n- 9456656: Feat: update add command with -a flag to install all components in the registry\n\n## 0.3.4\n\n### Patch Changes\n\n- 9c21525: safelist `\"dark\"` in tailwind config for out-of-the-box dark mode support\n\n## 0.3.3\n\n### Patch Changes\n\n- e218143: Update file overwrite warning to include the css file\n\n## 0.3.2\n\n### Patch Changes\n\n- 47b7008: - Strip unicode characters from CLI input\n\n## 0.3.1\n\n### Patch Changes\n\n- b791a75: - Remove `tailwindcss-animate` from dependencies\n\n## 0.3.0\n\n### Minor Changes\n\n- 8b72f01: - Add `flyAndScale` transitions util\n\n## 0.2.0\n\n### Minor Changes\n\n- c4e2a41: Refactored to use the new registry system\n\n## 0.1.2\n\n### Patch Changes\n\n- 9c10deb: fix: typo in svelte4 warnings\n\n## 0.1.1\n\n### Patch Changes\n\n- 78962e9: add warnings for svelte v4 support\n\n## 0.1.0\n\n### Minor Changes\n\n- 58a62ef: Added `update` command for updating existing components\n\n### Patch Changes\n\n- 58a62ef: Fixed select-all option during multiselect prompts\n\n## 0.0.13\n\n### Patch Changes\n\n- fa77377: Replaced `tailwind.config.cjs` for an ESM template\n\n## 0.0.12\n\n### Patch Changes\n\n- 5bc78d5: fix: properly order opts and args in `add` CLI command\n\n## 0.0.11\n\n### Patch Changes\n\n- ae47aa6: add --nodep flag to disable adding and installing dependencies (advanced)\n\n## 0.0.10\n\n### Patch Changes\n\n- 1b41d9c: Add parser to CLI prettier config\n\n## 0.0.9\n\n### Patch Changes\n\n- 2c0f259: Fixed dynamic import path error for Windows\n\n## 0.0.8\n\n### Patch Changes\n\n- d704098: Modify destructive background color to be meet AA contrast\n\n## 0.0.7\n\n### Patch Changes\n\n- fa06a5d: Displays the correct version number\n- edb3089: Preserve the content of `svelte.config.js` when running the `init` command\n\n## 0.0.6\n\n### Patch Changes\n\n- 86c696f: Add shadcn config to svelte.config.js to remember the component location after initial add\n- bc8cd90: Automatically add aliases to `svelte.config.js`\n\n## 0.0.5\n\n### Patch Changes\n\n- a5ddff2: Update link to shadcn-svelte in prompt\n\n## 0.0.4\n\n### Patch Changes\n\n- d4e0883: Add `type ClassValue` to import in `lib/utils.ts`\n\n## 0.0.3\n\n### Patch Changes\n\n- 4c3ff02: Change dark destructive color to meet contrast accessibility guidelines\n\n## 0.0.2\n\n### Patch Changes\n\n- Initial release\n```\n\n----------------------------------------\n\nTITLE: Manual Installation Steps for Range Calendar\nDESCRIPTION: A Svelte snippet showing the manual installation process, including installing required dependencies and copying component source files.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/range-calendar.md#2025-04-15_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n{#snippet manual()}\n<Steps>\n<Step>\n\nInstall `bits-ui` and `@internalized/date`:\n\n</Step>\n<PMInstall command=\"bits-ui @internationalized/date -D\" />\n<Step>Copy and paste the component source files linked at the top of this page into your project.</Step>\n</Steps>\n{/snippet}\n```\n\n----------------------------------------\n\nTITLE: Integrating Mode Toggle in Astro Page\nDESCRIPTION: This code shows how to import and add both the ModeWatcher and a custom ModeToggle component to an Astro page. Both components use the client:load directive for client-side rendering.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/dark-mode/astro.md#2025-04-15_snippet_2\n\nLANGUAGE: astro\nCODE:\n```\n---\nimport \"$lib/styles/app.css\";\nimport { ModeWatcher } from \"mode-watcher\";\nimport ModeToggle from \"$lib/components/mode-toggle.svelte\";\n---\n\n<!-- inline-script -->\n<html lang=\"en\">\n\t<body>\n      <h1>Astro</h1>\n      <ModeWatcher client:load />\n      <ModeToggle client:load />\n\t</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Using ComponentPreview for Typography Demonstration\nDESCRIPTION: Example of using the ComponentPreview component to display typography elements. Each preview includes an empty div that would contain the actual component in the implementation.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/typography.md#2025-04-15_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<ComponentPreview name=\"typography-demo\">\n\n<div></div>\n\n</ComponentPreview>\n```\n\n----------------------------------------\n\nTITLE: Adding Calendar Component via CLI\nDESCRIPTION: Command to add the calendar component to your project using the provided package manager command.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/calendar.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n<PMAddComp name=\"calendar\" />\n```\n\n----------------------------------------\n\nTITLE: Server-side Data Loading for Payments Table\nDESCRIPTION: Implements the server-side load function to fetch payment data for the data table component.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/data-table.md#2025-04-15_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function load() {\n  // logic to fetch payments data here\n  const payments = await getPayments();\n  return {\n    payments,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Astro's Tailwind Configuration\nDESCRIPTION: Configuration adjustment in astro.config.mjs to prevent duplicate Tailwind base styles by setting the applyBaseStyles option to false, since base styles are already included in the custom app.css file.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/installation/astro.md#2025-04-15_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineConfig({\n  integrations: [\n    tailwind({\n      applyBaseStyles: false,\n    }),\n    // ...\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Toaster Component in Layout File\nDESCRIPTION: Shows how to add the Sonner Toaster component to a Svelte layout file. The Toaster component should be imported from the local components directory, not directly from the svelte-sonner package.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/sonner.md#2025-04-15_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { Toaster } from \"$lib/components/ui/sonner/index.js\";\n  let { children } = $props();\n</script>\n\n<Toaster />\n\n{@render children?.()}\n```\n\n----------------------------------------\n\nTITLE: Installing Radio Group Component via CLI\nDESCRIPTION: Command to add the radio-group component using a package manager.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/radio-group.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n<PMAddComp name=\"radio-group\" />\n```\n\n----------------------------------------\n\nTITLE: Installing bits-ui Dependency\nDESCRIPTION: Command to install the bits-ui package as a development dependency.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/radio-group.md#2025-04-15_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n<PMInstall command=\"bits-ui -D\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Calendar Dependencies\nDESCRIPTION: Command to install the required dependencies (bits-ui and @internationalized/date) for the Calendar component.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/calendar.md#2025-04-15_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n<PMInstall command=\"bits-ui @internationalized/date -D\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Accent CSS Variables\nDESCRIPTION: This snippet sets CSS variables for accent colors, used in hover effects on components like DropdownMenuItem and SelectItem.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/theming.md#2025-04-15_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n--accent: 210 40% 96.1%;\n--accent-foreground: 222.2 47.4% 11.2%;\n```\n\n----------------------------------------\n\nTITLE: Installing Scroll Area Component via CLI\nDESCRIPTION: Command to add the Scroll Area component using a package manager CLI.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/scroll-area.md#2025-04-15_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n<PMAddComp name=\"scroll-area\" />\n```\n\n----------------------------------------\n\nTITLE: Installing bits-ui Dependency\nDESCRIPTION: Command to install the bits-ui dependency using a package manager.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/scroll-area.md#2025-04-15_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n<PMInstall command=\"bits-ui -D\" />\n```\n\n----------------------------------------\n\nTITLE: Importing and Using shadcn-svelte Components in Svelte Files\nDESCRIPTION: Example of how to import and use a Button component from shadcn-svelte in a Svelte file after installation.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/installation/vite.md#2025-04-15_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { Button } from \"$lib/components/ui/button/index.js\";\n</script>\n\n<Button>Click me</Button>\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Base Paths in tsconfig.json for Vite\nDESCRIPTION: Updates the tsconfig.json file by adding baseUrl and paths properties to properly resolve $lib imports in a Vite project with shadcn-svelte.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/installation/vite.md#2025-04-15_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  \"files\": [],\n  \"references\": [\n    { \"path\": \"./tsconfig.app.json\" },\n    { \"path\": \"./tsconfig.node.json\" }\n  ],\n  \"compilerOptions\": {\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"$lib\": [\"./src/lib\"],\n      \"$lib/*\": [\"./src/lib/*\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Sidebar Width Constants\nDESCRIPTION: TypeScript constants that define the default width values for the sidebar in both mobile and desktop views. These can be customized to adjust the sidebar width throughout the application.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/sidebar.md#2025-04-15_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport const SIDEBAR_WIDTH = \"16rem\";\nexport const SIDEBAR_WIDTH_MOBILE = \"18rem\";\n```\n\n----------------------------------------\n\nTITLE: Installing Breadcrumb Component using CLI in Svelte\nDESCRIPTION: Shows how to install the Breadcrumb component using the CLI command.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/breadcrumb.md#2025-04-15_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n<PMAddComp name=\"breadcrumb\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Path Aliases in tsconfig.json\nDESCRIPTION: JSON configuration for setting up path aliases in an Astro project, specifically defining the '$lib/*' alias to point to the './src/*' directory, which simplifies imports across the project.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/installation/astro.md#2025-04-15_snippet_1\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"compilerOptions\": {\n    // ...\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"$lib/*\": [\"./src/*\"],\n    },\n    // ...\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing shadcn-svelte Dependencies\nDESCRIPTION: Command to initialize dependencies for a new project. This installs required packages, adds the cn utility, configures tailwind.config.cjs, and sets up CSS variables.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/packages/cli/README.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-svelte init\n```\n\n----------------------------------------\n\nTITLE: Range Calendar Component Preview\nDESCRIPTION: A Svelte component preview snippet demonstrating the Range Calendar component with empty div content.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/range-calendar.md#2025-04-15_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<ComponentPreview name=\"range-calendar-demo\">\n\n<div></div>\n\n</ComponentPreview>\n```\n\n----------------------------------------\n\nTITLE: Using a shadcn-svelte Button Component in Svelte\nDESCRIPTION: Example of how to import and use a Button component from shadcn-svelte in a Svelte file. Shows the basic usage pattern with a variant property.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/tailwind4.md#2025-04-15_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { Button } from \"$lib/components/ui/button\";\n</script>\n\n<Button variant=\"outline\">Button</Button>\n```\n\n----------------------------------------\n\nTITLE: Installing PaneForge Dependency\nDESCRIPTION: Command to install the PaneForge library as a development dependency using the package manager.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/resizable.md#2025-04-15_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n<PMInstall command=\"paneforge -D\" />\n```\n\n----------------------------------------\n\nTITLE: Updating tailwind.config for Svelte 5\nDESCRIPTION: Updates the Tailwind configuration with tailwindcss-animate plugin, adds sidebar colors, and specifies animations required for Svelte 5 components.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/migration/svelte-5/index.md#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Config } from 'tailwindcss';\nimport tailwindcssAnimate from 'tailwindcss-animate';\n\nconst config: Config = {\n\tdarkMode: ['class'],\n\tcontent: ['./src/**/*.{html,js,svelte,ts}'],\n\tsafelist: ['dark'],\n\ttheme: {\n\t\tcontainer: {\n\t\t\t// unchanged ...\n\t\t},\n\t\textend: {\n\t\t\tcolors: {\n\t\t\t\t// unchanged ...\n\t\t\t\tsidebar: {\n\t\t\t\t\tDEFAULT: \"hsl(var(--sidebar-background))\",\n\t\t\t\t\tforeground: \"hsl(var(--sidebar-foreground))\",\n\t\t\t\t\tprimary: \"hsl(var(--sidebar-primary))\",\n\t\t\t\t\t\"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n\t\t\t\t\taccent: \"hsl(var(--sidebar-accent))\",\n\t\t\t\t\t\"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n\t\t\t\t\tborder: \"hsl(var(--sidebar-border))\",\n\t\t\t\t\tring: \"hsl(var(--sidebar-ring))\",\n        \t\t},\n\t\t\t},\n\t\t\tborderRadius: {\n\t\t\t\t// unchanged ...\n\t\t\t},\n\t\t\tfontFamily: {\n                // unchanged ...\n\t\t\t},\n\t\t\tkeyframes: {\n\t\t\t\t'accordion-down': {\n\t\t\t\t\tfrom: { height: '0' },\n\t\t\t\t\tto: { height: 'var(--bits-accordion-content-height)' }\n\t\t\t\t},\n\t\t\t\t'accordion-up': {\n\t\t\t\t\tfrom: { height: 'var(--bits-accordion-content-height)' },\n\t\t\t\t\tto: { height: '0' }\n\t\t\t\t},\n\t\t\t\t'caret-blink': {\n\t\t\t\t\t'0%,70%,100%': { opacity: '1' },\n\t\t\t\t\t'20%,50%': { opacity: '0' }\n\t\t\t\t}\n\t\t\t},\n\t\t\tanimation: {\n\t\t\t\t'accordion-down': 'accordion-down 0.2s ease-out',\n\t\t\t\t'accordion-up': 'accordion-up 0.2s ease-out',\n\t\t\t\t'caret-blink': 'caret-blink 1.25s ease-out infinite'\n\t\t\t}\n\t\t}\n\t},\n\tplugins: [tailwindcssAnimate]\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Installing bits-ui Dependency for Progress Component\nDESCRIPTION: Command to install the bits-ui dependency required for the Progress component.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/progress.md#2025-04-15_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n<PMInstall command=\"bits-ui -D\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Utils Alias in components.json for shadcn-svelte\nDESCRIPTION: Defines the import alias for utility functions used in the project.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components-json.md#2025-04-15_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"aliases\": {\n    \"utils\": \"$lib/utils.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Path Aliases in vite.config.ts\nDESCRIPTION: Updates the vite.config.ts file to include path aliases for non-SvelteKit projects. This configures Vite to resolve the $lib alias to the correct directory path.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/installation/manual.md#2025-04-15_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport path from \"path\";\n\nexport default defineConfig({\n  // ... other options\n  resolve: {\n    alias: {\n      $lib: path.resolve(\"./src/lib\"),\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Component Selection Interface\nDESCRIPTION: Shows the interactive component selection interface that appears when running the add command, displaying a list of available components that can be added to the project.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/cli.md#2025-04-15_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\nWhich components would you like to add? › Space to select. Return to submit.\n\n◯  accordion\n◯  alert\n◯  alert-dialog\n◯  aspect-ratio\n◯  avatar\n◯  badge\n◯  button\n◯  card\n◯  checkbox\n◯  collapsible\n```\n\n----------------------------------------\n\nTITLE: Using shadcn-svelte Button Component in Astro\nDESCRIPTION: Example of importing and using a shadcn-svelte Button component in an Astro file, demonstrating the component integration pattern for this specific framework combination.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/installation/astro.md#2025-04-15_snippet_7\n\nLANGUAGE: astro\nCODE:\n```\n---\nimport { Button } from \"$lib/components/ui/button/index.js\";\n---\n\n<html lang=\"en\">\n\t<head>\n\t\t<title>Astro</title>\n\t</head>\n\t<body>\n\t\t<Button>Hello World</Button>\n\t</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Setting Registry URL in components.json for shadcn-svelte\nDESCRIPTION: Specifies the registry URL for fetching components. This can be pinned to a specific release or a custom fork.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components-json.md#2025-04-15_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"registry\": \"https://next.shadcn-svelte.com/registry\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Vaul Svelte Dependency\nDESCRIPTION: Command to install the vaul-svelte dependency using a package manager.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/drawer.md#2025-04-15_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n<PMInstall command=\"vaul-svelte -D\" />\n```\n\n----------------------------------------\n\nTITLE: Using Proxy Settings with HTTP Environment Variables\nDESCRIPTION: Demonstrates how to use HTTP proxy environment variables when executing shadcn-svelte CLI commands to route requests through a proxy server.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/cli.md#2025-04-15_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nHTTP_PROXY=\"<proxy-url>\" npx shadcn-svelte@next init\n```\n\n----------------------------------------\n\nTITLE: Defining Schema in components.json for shadcn-svelte\nDESCRIPTION: Sets the JSON Schema for the components.json file, which defines the structure and allowed values for the configuration.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components-json.md#2025-04-15_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://next.shadcn-svelte.com/schema.json\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration Options for shadcn-svelte Setup\nDESCRIPTION: Terminal output showing the configuration questions prompted by the shadcn-svelte init command, including TypeScript usage, style preferences, base color selection, and path alias configurations.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/installation/astro.md#2025-04-15_snippet_4\n\nLANGUAGE: txt\nCODE:\n```\nWould you like to use TypeScript (recommended)? › Yes\nWhich style would you like to use? › Default\nWhich color would you like to use as base color? › Slate\nWhere is your global CSS file? › src/styles/app.css\nWhere is your tailwind.config.[cjs|mjs|js|ts] located? › tailwind.config.mjs\nConfigure the import alias for components: › $lib/components\nConfigure the import alias for utils: › $lib/utils\nConfigure the import alias for hooks: › $lib/hooks\nConfigure the import alias for ui: › $lib/components/ui\n```\n\n----------------------------------------\n\nTITLE: Updating Tailwind Content Configuration\nDESCRIPTION: Modification to tailwind.config.mjs to ensure Astro files are included in the content array, allowing Tailwind to process styles in Astro templates.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/installation/astro.md#2025-04-15_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconst config = {\n  content: [\"./src/**/*.{astro,html,js,jsx,md,mdx,svelte,ts,tsx,vue}\"],\n  // ...\n};\n// ...\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Using useSidebar Hook in Svelte\nDESCRIPTION: Shows how to use the useSidebar hook to access sidebar state and methods within a Svelte component. This hook returns a reactive class instance and must be called during the component lifecycle.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/sidebar.md#2025-04-15_snippet_11\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { useSidebar } from \"$lib/components/ui/sidebar/index.js\";\n\n  sidebar.state;\n  sidebar.isMobile;\n  sidebar.toggle();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript in components.json for shadcn-svelte\nDESCRIPTION: Enables or disables TypeScript support for the project.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components-json.md#2025-04-15_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"typescript\": true | false\n}\n```\n\n----------------------------------------\n\nTITLE: Updating components.json for Svelte 5\nDESCRIPTION: Updates the components.json configuration file for Svelte 5 compatibility by adding registry path and new aliases for hooks and UI components.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/migration/svelte-5/index.md#2025-04-15_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://next.shadcn-svelte.com/schema.json\",\n  \"style\": \"default\",\n  \"tailwind\": {\n    \"config\": \"tailwind.config.js\",\n    \"css\": \"src/app.css\",\n    \"baseColor\": \"zinc\"\n  },\n  \"aliases\": {\n    \"components\": \"$lib/components\",\n    \"utils\": \"$lib/utils\",\n    \"ui\": \"$lib/components/ui\",\n    \"hooks\": \"$lib/hooks\"\n  },\n  \"typescript\": true,\n  \"registry\": \"https://next.shadcn-svelte.com/registry\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind Base Color in components.json for shadcn-svelte\nDESCRIPTION: Sets the base color for generating the default color palette. This setting cannot be changed after initialization.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components-json.md#2025-04-15_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tailwind\": {\n    \"baseColor\": \"gray\" | \"neutral\" | \"slate\" | \"stone\" | \"zinc\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing AspectRatio Component in Svelte\nDESCRIPTION: Imports the AspectRatio component from the registry UI library for use in the Svelte component.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/figma.md#2025-04-15_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { AspectRatio } from '$lib/registry/ui/aspect-ratio';\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Transitions in AlertDialog Content Component in Svelte\nDESCRIPTION: This Svelte component demonstrates how to use the flyAndScale transition in a UI component. It imports the transition function and applies it to the AlertDialogPrimitive.Content element. The component allows for customization of the transition and its configuration through props.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/changelog.md#2025-04-15_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { AlertDialog as AlertDialogPrimitive } from \"bits-ui\";\n  import * as AlertDialog from \"./index.js\";\n  import { cn, flyAndScale } from \"$lib/utils.js\";\n\n  type $$Props = AlertDialogPrimitive.ContentProps;\n\n  let className: $$Props[\"class\"] = undefined;\n  export let transition: $$Props[\"transition\"] = flyAndScale;\n  export let transitionConfig: $$Props[\"transitionConfig\"] = undefined;\n  export { className as class };\n</script>\n\n<AlertDialog.Portal>\n  <AlertDialog.Overlay />\n  <AlertDialogPrimitive.Content\n    {transition}\n    {transitionConfig}\n    class={cn(\n      \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg  sm:rounded-lg md:w-full\",\n      className\n    )}\n    {...$$restProps}\n  >\n    <slot />\n  </AlertDialogPrimitive.Content>\n</AlertDialog.Portal>\n```\n\n----------------------------------------\n\nTITLE: Setting Tailwind CSS Path in components.json for shadcn-svelte\nDESCRIPTION: Defines the path to the CSS file that imports Tailwind CSS into the project.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components-json.md#2025-04-15_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tailwind\": {\n    \"css\": \"src/app.{p,post}css\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sidebar Props in Svelte\nDESCRIPTION: Shows how to set various props on the Sidebar.Root component, including side, variant, and collapsible options.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/sidebar.md#2025-04-15_snippet_9\n\nLANGUAGE: svelte\nCODE:\n```\n<Sidebar.Root side=\"left | right\" />\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<Sidebar.Root variant=\"sidebar | floating | inset\" />\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<Sidebar.Root collapsible=\"offcanvas | icon | none\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Payment Types and Sample Data in TypeScript\nDESCRIPTION: Defines the Payment type structure with fields for id, amount, status, and email, along with sample payment data to populate the table.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/data-table.md#2025-04-15_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Payment = {\n  id: string;\n  amount: number;\n  status: \"pending\" | \"processing\" | \"success\" | \"failed\";\n  email: string;\n};\n\nexport const data: Payment[] = [\n  {\n    id: \"728ed52f\",\n    amount: 100,\n    status: \"pending\",\n    email: \"m@example.com\",\n  },\n  {\n    id: \"489e1d42\",\n    amount: 125,\n    status: \"processing\",\n    email: \"example@gmail.com\",\n  },\n  // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Installing Hover Card Component via CLI\nDESCRIPTION: This snippet shows how to install the Hover Card component using a custom CLI command.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/hover-card.md#2025-04-15_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n<PMAddComp name=\"hover-card\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Opt-out in components.json\nDESCRIPTION: Shows how to disable TypeScript in the components.json configuration file by setting the typescript flag to false.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/installation/index.md#2025-04-15_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"style\": \"default\",\n  \"tailwind\": {\n    \"config\": \"tailwind.config.js\",\n    \"css\": \"src/app.css\"\n  },\n  \"typescript\": false,\n  \"aliases\": {\n    \"utils\": \"$lib/utils\",\n    \"components\": \"$lib/components\",\n    \"hooks\": \"$lib/hooks\",\n    \"ui\": \"$lib/components/ui\"\n  },\n  \"registry\": \"https://next.shadcn-svelte.com/registry\"\n}\n```\n\n----------------------------------------\n\nTITLE: Changelog Entries in Markdown\nDESCRIPTION: Chronological changelog entries detailing version changes from 0.1.0 down to 0.0.2, including component updates, fixes, and configuration changes.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/CHANGELOG.md#2025-04-15_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# www\n\n## 0.1.0\n\n### Minor Changes\n\n- d733f29: Update `Slider` component to latest Bits UI API\n\n## 0.0.6\n\n### Patch Changes\n\n- 1ba3100: fix: add mode-watcher to Sonner registry dependencies\n\n## 0.0.5\n\n### Patch Changes\n\n- 9c21525: safelist `\"dark\"` in tailwind config for out-of-the-box dark mode support\n\n## 0.0.4\n\n### Patch Changes\n\n- 9c10deb: fix: typo in svelte4 warnings\n\n## 0.0.3\n\n### Patch Changes\n\n- 78962e9: add warnings for svelte v4 support\n\n## 0.0.2\n\n### Patch Changes\n\n- 82eaa35: Textarea: Replaced default `h-20` to `min-h-[80px]` to allow rows to adjust height.\n```\n\n----------------------------------------\n\nTITLE: Installing Resizable Component using CLI\nDESCRIPTION: Command to add the Resizable component to the project using the package manager's CLI.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/resizable.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n<PMAddComp name=\"resizable\" />\n```\n\n----------------------------------------\n\nTITLE: Adding New Color Variables in CSS\nDESCRIPTION: This snippet demonstrates how to add new color variables (warning in this case) to the CSS file for both light and dark themes.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/theming.md#2025-04-15_snippet_12\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  --warning: 38 92% 50%;\n  --warning-foreground: 48 96% 89%;\n}\n\n.dark {\n  --warning: 48 96% 89%;\n  --warning-foreground: 38 92% 50%;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Minimal Sidebar with Content\nDESCRIPTION: A minimal sidebar implementation with just Root and Content components, which serves as the starting point for building more complex sidebars.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/sidebar.md#2025-04-15_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import * as Sidebar from \"$lib/components/ui/sidebar/index.js\";\n</script>\n\n<Sidebar.Root>\n  <Sidebar.Content />\n</Sidebar.Root>\n```\n\n----------------------------------------\n\nTITLE: Adding shadcn Components with Parameters\nDESCRIPTION: Command syntax for adding specific shadcn components to a Svelte project. This adds the component files and installs all required dependencies.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/packages/cli/README.md#2025-04-15_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcn-svelte add [component]\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic SvelteKit Layout with CSS Import\nDESCRIPTION: Basic SvelteKit layout component that imports the global CSS styles for the application. Uses the new props syntax to handle children rendering properly.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/installation/manual.md#2025-04-15_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import \"../app.css\";\n  let { children } = $props();\n</script>\n\n{@render children?.()}\n```\n\n----------------------------------------\n\nTITLE: Defining Destructive CSS Variables\nDESCRIPTION: This snippet defines CSS variables for destructive actions, such as Button with destructive variant.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/theming.md#2025-04-15_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n--destructive: 0 100% 50%;\n--destructive-foreground: 210 40% 98%;\n```\n\n----------------------------------------\n\nTITLE: Configuring Import Aliases in jsconfig.json\nDESCRIPTION: Demonstrates how to set up import aliases in a JavaScript project using jsconfig.json when opting out of TypeScript.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/installation/index.md#2025-04-15_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"paths\": {\n      \"$lib/*\": [\"./src/lib/*\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Card CSS Variables\nDESCRIPTION: This snippet defines CSS variables for the background and foreground colors of Card components.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/theming.md#2025-04-15_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n--card: 0 0% 100%;\n--card-foreground: 222.2 47.4% 11.2%;\n```\n\n----------------------------------------\n\nTITLE: Using Custom Color Utility Classes in Svelte\nDESCRIPTION: This Svelte snippet demonstrates how to use the newly added custom color utility classes (warning and warning-foreground) in a component.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/theming.md#2025-04-15_snippet_14\n\nLANGUAGE: svelte\nCODE:\n```\n<div class=\"bg-warning text-warning-foreground\"></div>\n```\n\n----------------------------------------\n\nTITLE: Exporting Form.Control Component in shadcn-svelte\nDESCRIPTION: Adding and exporting the Form.Control component from formsnap in the form/index.ts file to ensure accessibility and compatibility with other form components.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/changelog.md#2025-04-15_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// ...rest\nconst Control = FormPrimitive.Control;\n\nexport {\n  // ...rest\n  Control,\n  Control as FormControl,\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a new Astro project with CLI prompts\nDESCRIPTION: Terminal output showing the configuration questions that appear when creating a new Astro project, including project location, starter template, TypeScript configuration, and repository initialization options.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/installation/astro.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n- Where should we create your new project?\n./your-app-name\n- How would you like to start your new project?\nChoose a starter template (or Empty)\n- Do you plan to write TypeScript?\nYes\n- How strict should TypeScript be?\nStrict\n- Install dependencies?\nYes\n- Initialize a new git repository? (optional)\nYes/No\n```\n\n----------------------------------------\n\nTITLE: Defining Default Background CSS Variables\nDESCRIPTION: This snippet defines CSS variables for the default background and foreground colors, typically used for the body and main text.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/theming.md#2025-04-15_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n--background: 0 0% 100%;\n--foreground: 222.2 47.4% 11.2%;\n```\n\n----------------------------------------\n\nTITLE: Extending Tailwind Config with New Colors\nDESCRIPTION: This JavaScript snippet shows how to extend the Tailwind configuration to include new custom colors (warning in this case) defined in CSS variables.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/theming.md#2025-04-15_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  theme: {\n    extend: {\n      colors: {\n        warning: \"hsl(var(--warning))\",\n        \"warning-foreground\": \"hsl(var(--warning-foreground))\",\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Svelte Components and Icons\nDESCRIPTION: This snippet demonstrates how to import Accordion components, a Callout component, and a CircleAlert icon in a Svelte file. It shows the use of aliased imports and importing from specific paths.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/index.md#2025-04-15_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import * as Accordion from '$lib/registry/ui/accordion';\n  import { Callout } from '$lib/components/docs';\n  import CircleAlert from \"@lucide/svelte/icons/circle-alert\";\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Path Aliases in vite.config.ts\nDESCRIPTION: Updates the Vite configuration file to set up path aliases for resolving $lib imports at runtime in a shadcn-svelte project.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/installation/vite.md#2025-04-15_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport path from \"path\";\n\nexport default defineConfig({\n  // ... other options\n  resolve: {\n    alias: {\n      $lib: path.resolve(\"./src/lib\"),\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Path Aliases in tsconfig.app.json for Vite\nDESCRIPTION: Updates the tsconfig.app.json file with baseUrl and paths properties to help the IDE resolve $lib imports in a Vite project with shadcn-svelte.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/installation/vite.md#2025-04-15_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    // ...\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"$lib\": [\"./src/lib\"],\n      \"$lib/*\": [\"./src/lib/*\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using CSS Variables in Svelte Component\nDESCRIPTION: This example demonstrates how to apply the defined CSS variables to a Svelte component. It sets the background color to primary and text color to primary-foreground.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/theming.md#2025-04-15_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<div class=\"bg-primary text-primary-foreground\">Hello</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Primary CSS Variables for Theming\nDESCRIPTION: This snippet shows how to define CSS variables for primary colors without using color space functions. It sets the background and foreground colors for primary elements.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/theming.md#2025-04-15_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n--primary: 222.2 47.4% 11.2%;\n--primary-foreground: 210 40% 98%;\n```\n\n----------------------------------------\n\nTITLE: CSS Variables for Theming Sidebar Components\nDESCRIPTION: This CSS snippet defines the theme variables used for styling the sidebar components. It includes variables for background, foreground, primary colors, accents, borders, and more, with different values for light and dark modes.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/sidebar.md#2025-04-15_snippet_33\n\nLANGUAGE: css\nCODE:\n```\n@layer base {\n  :root {\n    --sidebar-background: 0 0% 98%;\n    --sidebar-foreground: 240 5.3% 26.1%;\n    --sidebar-primary: 240 5.9% 10%;\n    --sidebar-primary-foreground: 0 0% 98%;\n    --sidebar-accent: 240 4.8% 95.9%;\n    --sidebar-accent-foreground: 240 5.9% 10%;\n    --sidebar-border: 220 13% 91%;\n    --sidebar-ring: 217.2 91.2% 59.8%;\n  }\n\n  .dark {\n    --sidebar-background: 240 5.9% 10%;\n    --sidebar-foreground: 240 4.8% 95.9%;\n    --sidebar-primary: 0 0% 98%;\n    --sidebar-primary-foreground: 240 5.9% 10%;\n    --sidebar-accent: 240 3.7% 15.9%;\n    --sidebar-accent-foreground: 240 4.8% 95.9%;\n    --sidebar-border: 240 3.7% 15.9%;\n    --sidebar-ring: 217.2 91.2% 59.8%;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Sidebar Keyboard Shortcut in TypeScript\nDESCRIPTION: Sets the keyboard shortcut used to open and close the sidebar. The default is 'b', which translates to cmd+b on Mac and ctrl+b on Windows.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/sidebar.md#2025-04-15_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport const SIDEBAR_KEYBOARD_SHORTCUT = \"b\";\n```\n\n----------------------------------------\n\nTITLE: Updating Form.Label Component in shadcn-svelte\nDESCRIPTION: Changes to the Form.Label component to accommodate internal changes in formsnap. The ids returned from getFormField() is now a store requiring the $ prefix when used.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/changelog.md#2025-04-15_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<Label\n  for={$ids.input}\n  class={cn($errors && \"text-destructive\", className)}\n  {...$$restProps}\n>\n  <slot />\n</Label>\n```\n\n----------------------------------------\n\nTITLE: Importing Global CSS in Astro Page\nDESCRIPTION: Example of importing the global CSS file in an Astro page using the path alias defined in tsconfig.json.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/installation/astro.md#2025-04-15_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n---\nimport \"$lib/styles/app.css\";\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Ring and Radius CSS Variables\nDESCRIPTION: This snippet sets CSS variables for focus ring color and border radius for various components.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/theming.md#2025-04-15_snippet_11\n\nLANGUAGE: css\nCODE:\n```\n--ring: 215 20.2% 65.1%;\n--radius: 0.5rem;\n```\n\n----------------------------------------\n\nTITLE: Defining Input CSS Variables\nDESCRIPTION: This snippet sets the CSS variable for input border colors, used in components like Input, Select, and Textarea.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/theming.md#2025-04-15_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n--input: 214.3 31.8% 91.4%;\n```\n\n----------------------------------------\n\nTITLE: Defining Border CSS Variables\nDESCRIPTION: This snippet defines the default border color CSS variable.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/theming.md#2025-04-15_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n--border: 214.3 31.8% 91.4%;\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Input Component in Svelte\nDESCRIPTION: Basic example showing how to import and use the Input component in a Svelte file. This demonstrates the minimal setup required to add an input field to your Svelte application.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/input.md#2025-04-15_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { Input } from \"$lib/components/ui/input/index.js\";\n</script>\n\n<Input />\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Resizable Component in Svelte\nDESCRIPTION: Example of how to import and use the Resizable component to create a horizontal pane group with two resizable panes.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/resizable.md#2025-04-15_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import * as Resizable from \"$lib/components/ui/resizable/index.js\";\n</script>\n\n<Resizable.PaneGroup direction=\"horizontal\">\n  <Resizable.Pane>One</Resizable.Pane>\n  <Resizable.Handle />\n  <Resizable.Pane>Two</Resizable.Pane>\n</Resizable.PaneGroup>\n```\n\n----------------------------------------\n\nTITLE: Setting Carousel Item Spacing in Svelte\nDESCRIPTION: Example showing how to configure spacing between carousel items using padding and negative margin utility classes. Uses pl-4 on items and -ml-4 on the content container.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/carousel.md#2025-04-15_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<Carousel.Root>\n  <Carousel.Content class=\"-ml-4\">\n    <Carousel.Item class=\"pl-4\">...</Carousel.Item>\n    <Carousel.Item class=\"pl-4\">...</Carousel.Item>\n    <Carousel.Item class=\"pl-4\">...</Carousel.Item>\n  </Carousel.Content>\n</Carousel.Root>\n```\n\n----------------------------------------\n\nTITLE: Add Command Options\nDESCRIPTION: Lists all available options for the shadcn-svelte add command, including working directory configuration, dependency management, batch installation, confirmation settings, and file handling options.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/cli.md#2025-04-15_snippet_3\n\nLANGUAGE: txt\nCODE:\n```\nUsage: shadcn-svelte add [options] [components...]\n\nadd components to your project\n\nArguments:\n  components         name of components\n\nOptions:\n  -c, --cwd <cwd>    the working directory (default: the current directory)\n  --no-deps          skips adding & installing package dependencies\n  -a, --all          install all components to your project (default: false)\n  -y, --yes          skip confirmation prompt (default: false)\n  -o, --overwrite    overwrite existing files (default: false)\n  --proxy <proxy>    fetch components from registry using a proxy\n  -p, --path <path>  the path to add the component to\n  -h, --help         display help for command\n```\n\n----------------------------------------\n\nTITLE: Updating Icon Imports in shadcn-svelte (New Method)\nDESCRIPTION: The updated method of importing icons with deep imports to prevent Vite from optimizing entire icon collections, improving dev server performance.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/changelog.md#2025-04-15_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Check from \"@lucide/svelte/icons/check\";\n// or\nimport Check from \"svelte-radix/Check.svelte\";\n```\n\n----------------------------------------\n\nTITLE: Updating Icon Imports in shadcn-svelte (Old Method)\nDESCRIPTION: The previous method of importing icons from @lucide/svelte or radix-icons-svelte packages that was causing performance issues with the dev server.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/changelog.md#2025-04-15_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Check } from \"@lucide/svelte\";\n// or\nimport { Check } from \"radix-icons-svelte\";\n```\n\n----------------------------------------\n\nTITLE: CLI Installation Method for Range Calendar\nDESCRIPTION: A Svelte snippet showing the CLI installation method using a custom PMAddComp component to add the range-calendar component.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/range-calendar.md#2025-04-15_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n{#snippet cli()}\n<PMAddComp name=\"range-calendar\" />\n{/snippet}\n```\n\n----------------------------------------\n\nTITLE: Installing Progress Component via CLI in Svelte\nDESCRIPTION: Command to add the Progress component using a package manager CLI.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/progress.md#2025-04-15_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n<PMAddComp name=\"progress\" />\n```\n\n----------------------------------------\n\nTITLE: Installing bits-ui Dependency\nDESCRIPTION: This command installs the bits-ui package as a dev dependency, which is required for the Hover Card component.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/hover-card.md#2025-04-15_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n<PMInstall command=\"bits-ui -D\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Drawer Component via CLI\nDESCRIPTION: Command to add the drawer component using a package manager CLI.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components/drawer.md#2025-04-15_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n<PMAddComp name=\"drawer\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS in components.json for shadcn-svelte\nDESCRIPTION: Specifies the path to the Tailwind CSS configuration file, which can be either a JavaScript or TypeScript file.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/components-json.md#2025-04-15_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tailwind\": {\n    \"config\": \"tailwind.config.js\" | \"tailwind.config.ts\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Accordion Components in TypeScript\nDESCRIPTION: Demonstrates how to import Accordion components from the index.ts file in a TypeScript environment. Shows both wildcard and named import syntax.\nSOURCE: https://github.com/evil1morty/shadcn-svelte/blob/next-tailwind-4/sites/docs/src/content/installation/index.md#2025-04-15_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Accordion from '$lib/components/ui/accordion\"\n// or\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger\n} from \"$lib/components/ui/accordion\"\n```"
  }
]