[
  {
    "owner": "freqtrade",
    "repo": "pandas-ta",
    "content": "TITLE: Creating Trade Analysis Table from Trend Signals\nDESCRIPTION: Code to create a trade analysis table from the generated trend signals. Extracts entry and exit points, calculates trade statistics, and displays trade information including unrealized profit/loss for open positions.\nSOURCE: https://github.com/freqtrade/pandas-ta/blob/main/examples/AIExample.ipynb#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nentries = trendy.TS_Entries * asset.close\nentries = entries[~np.isclose(entries, 0)]\nentries.dropna(inplace=True)\nentries.name = \"Entry\"\n\nexits = trendy.TS_Exits * asset.close\nexits = exits[~np.isclose(exits, 0)]\nexits.dropna(inplace=True)\nexits.name = \"Exit\"\n\ntotal_trades = trendy.TS_Trades.abs().sum()\nrt_trades = int(trendy.TS_Trades.abs().sum() // 2)\n\nall_trades = trendy.TS_Trades.copy().fillna(0)\nall_trades = all_trades[all_trades != 0]\n\ntrades = pd.DataFrame({\n    \"Signal\": all_trades,\n    entries.name: entries,\n    exits.name: exits\n})\n\n# Show some stats if there is an active trade (when there is an odd number of round trip trades)\nif total_trades % 2 != 0:\n    unrealized_pnl = asset.close.iloc[-1] - entries.iloc[-1]\n    unrealized_pnl_pct_change = 100 * ((asset.close.iloc[-1] / entries.iloc[-1]) - 1)\n    print(\"Current Trade:\")\n    print(f\"Price Entry | Last:\\t{entries.iloc[-1]:.4f} | {asset.close.iloc[-1]:.4f}\")\n    print(f\"Unrealized PnL | %:\\t{unrealized_pnl:.4f} | {unrealized_pnl_pct_change:.4f}%\")\nprint(f\"\\nTrades Total | Round Trip:\\t{total_trades} | {rt_trades}\")\nprint(f\"Trade Coverage: {100 * asset.TS_Trends.sum() / asset.shape[0]:.2f}%\")\n\ntrades\n```\n\n----------------------------------------\n\nTITLE: Comparing Buy-and-Hold vs Cumulative Strategy Returns\nDESCRIPTION: Visualizes the comparison between buy-and-hold returns and cumulative active returns from the strategy. Uses area charts to show the performance difference over time.\nSOURCE: https://github.com/freqtrade/pandas-ta/blob/main/examples/AIExample.ipynb#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n((asset[[\"PCTRET_1\", \"ACTRET_1\"]] + 1).cumprod() - 1).plot(figsize=(16, 3), kind=\"area\", stacked=False, color=colors(\"GyOr\"), title=\"B&H vs. Cum. Active Returns\", alpha=.4, grid=True).axhline(0, color=\"black\")\n```\n\n----------------------------------------\n\nTITLE: Calculating and Visualizing Active Returns\nDESCRIPTION: Calculates and plots active returns, which are returns made during the course of a trend. Compares percentage returns with active returns to evaluate strategy performance.\nSOURCE: https://github.com/freqtrade/pandas-ta/blob/main/examples/AIExample.ipynb#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nasset[\"ACTRET_1\"] = trendy.TS_Trends.shift(1) * asset.PCTRET_1\nasset[[\"PCTRET_1\", \"ACTRET_1\"]].plot(figsize=(16, 3), color=colors(\"GyOr\"), alpha=1, grid=True).axhline(0, color=\"black\")\n```\n\n----------------------------------------\n\nTITLE: Generating Trend Signals from Indicators\nDESCRIPTION: Code to generate trend signals (entries, exits, and trades) from the trend indicators created earlier. Uses the tsignals method from Pandas TA to convert trend conditions into actionable signals.\nSOURCE: https://github.com/freqtrade/pandas-ta/blob/main/examples/AIExample.ipynb#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ntrendy = asset.ta.tsignals(long, asbool=False, append=True)\ntrendy.tail()\n```\n\n----------------------------------------\n\nTITLE: Implementing VectorBT Backtesting with Pandas-TA Golden Cross Strategy\nDESCRIPTION: This code snippet demonstrates how to create a Golden Cross strategy using Pandas-TA and backtest it with VectorBT. It fetches AAPL data, creates a Golden Cross signal using 50 and 200-day SMAs, generates boolean trading signals, and evaluates portfolio performance with VectorBT.\nSOURCE: https://github.com/freqtrade/pandas-ta/blob/main/README.md#2025-04-23_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nimport pandas_ta as ta\nimport vectorbt as vbt\n\ndf = pd.DataFrame().ta.ticker(\"AAPL\") # requires 'yfinance' installed\n\n# Create the \"Golden Cross\" \ndf[\"GC\"] = df.ta.sma(50, append=True) > df.ta.sma(200, append=True)\n\n# Create boolean Signals(TS_Entries, TS_Exits) for vectorbt\ngolden = df.ta.tsignals(df.GC, asbool=True, append=True)\n\n# Sanity Check (Ensure data exists)\nprint(df)\n\n# Create the Signals Portfolio\npf = vbt.Portfolio.from_signals(df.close, entries=golden.TS_Entries, exits=golden.TS_Exits, freq=\"D\", init_cash=100_000, fees=0.0025, slippage=0.0025)\n\n# Print Portfolio Stats and Return Stats\nprint(pf.stats())\nprint(pf.returns_stats())\n```\n\n----------------------------------------\n\nTITLE: Creating Trend Indicators with Pandas TA\nDESCRIPTION: Implementation of trend indicators using Pandas TA technical analysis functions. Demonstrates how to create long trend signals using exponential moving averages (EMA) and adds various technical indicators to the asset dataframe.\nSOURCE: https://github.com/freqtrade/pandas-ta/blob/main/examples/AIExample.ipynb#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Example Long Trends\n# long = ta.sma(asset.close, 50) > ta.sma(asset.close, 200) # SMA(50) > SMA(200) \"Golden/Death Cross\"\n# long = ta.sma(asset.close, 10) > ta.sma(asset.close, 20) # SMA(10) > SMA(20)\nlong = ta.ema(asset.close, 8) > ta.ema(asset.close, 21) # EMA(8) > EMA(21)\n# long = ta.increasing(ta.ema(asset.close, 50))\n# long = ta.macd(asset.close).iloc[:,1] > 0 # MACD Histogram is positive\n# long = ta.amat(asset.close, 50, 200).AMATe_LR_2  # Long Run of AMAT(50, 200) with lookback of 2 bars\n\n# long &= ta.increasing(ta.ema(asset.close, 50), 2) # Uncomment for further long restrictions, in this case when EMA(50) is increasing/sloping upwards\n# long = 1 - long # uncomment to create a short signal of the trend\n\nasset.ta.ema(length=8, sma=False, append=True)\nasset.ta.ema(length=21, sma=False, append=True)\nasset.ta.ema(length=50, sma=False, append=True)\nasset.ta.percent_return(append=True)\nprint(\"TA Columns Added:\")\nasset[asset.columns[5:]].tail()\n```\n\n----------------------------------------\n\nTITLE: Implementing Technical Analysis Strategy with Class-based Approach in Python\nDESCRIPTION: Shows how to create and run a strategy using the Strategy class in pandas-ta, which allows grouping multiple technical indicators together for batch processing.\nSOURCE: https://github.com/freqtrade/pandas-ta/blob/main/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# (1) Create the Strategy\nMyStrategy = ta.Strategy(\n    name=\"DCSMA10\",\n    ta=[\n        {\"kind\": \"ohlc4\"},\n        {\"kind\": \"sma\", \"length\": 10},\n        {\"kind\": \"donchian\", \"lower_length\": 10, \"upper_length\": 15},\n        {\"kind\": \"ema\", \"close\": \"OHLC4\", \"length\": 10, \"suffix\": \"OHLC4\"},\n    ]\n)\n\n# (2) Run the Strategy\ndf.ta.strategy(MyStrategy, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Technical Analysis Strategies in pandas-ta\nDESCRIPTION: Demonstrates how to create a custom strategy with specific indicators and parameters, allowing for personalized technical analysis combinations.\nSOURCE: https://github.com/freqtrade/pandas-ta/blob/main/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Create your own Custom Strategy\nCustomStrategy = ta.Strategy(\n    name=\"Momo and Volatility\",\n    description=\"SMA 50,200, BBANDS, RSI, MACD and Volume SMA 20\",\n    ta=[\n        {\"kind\": \"sma\", \"length\": 50},\n        {\"kind\": \"sma\", \"length\": 200},\n        {\"kind\": \"bbands\", \"length\": 20},\n        {\"kind\": \"rsi\"},\n        {\"kind\": \"macd\", \"fast\": 8, \"slow\": 21},\n        {\"kind\": \"sma\", \"close\": \"volume\", \"length\": 20, \"prefix\": \"VOLUME\"},\n    ]\n)\n# To run your \"Custom Strategy\"\ndf.ta.strategy(CustomStrategy)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Trade Signals on a Timeline\nDESCRIPTION: Plots trade signals (entries and exits) on a timeline. Shows the points where the strategy generates buy (1) and sell (-1) signals based on the trend conditions.\nSOURCE: https://github.com/freqtrade/pandas-ta/blob/main/examples/AIExample.ipynb#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ntrendy.TS_Trades.plot(figsize=(16, 1.5), color=colors(\"BkBl\")[0], grid=True)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Long and Short Trends with Area Charts\nDESCRIPTION: Creates area charts to visualize long and short trends detected by the trading strategy. Long trends are shown in green and short trends in red, helping to identify market regime changes.\nSOURCE: https://github.com/freqtrade/pandas-ta/blob/main/examples/AIExample.ipynb#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nlong_trend = trendy.TS_Trends\nshort_trend = 1 - long_trend\n\nlong_trend.plot(figsize=(16, 0.85), kind=\"area\", stacked=True, color=colors()[0], alpha=0.25) # Green Area\nshort_trend.plot(figsize=(16, 0.85), kind=\"area\", stacked=True, color=colors()[1], alpha=0.25) # Red Area\n```\n\n----------------------------------------\n\nTITLE: Creating Price and Indicator Chart Visualization\nDESCRIPTION: Generates a price chart with technical indicators using matplotlib. Plots the close price along with EMAs (8, 21, and 50 period) to visualize trend patterns and potential trading signals.\nSOURCE: https://github.com/freqtrade/pandas-ta/blob/main/examples/AIExample.ipynb#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# chart = asset[\"close\"] #asset[[\"close\", \"SMA_10\", \"SMA_20\", \"SMA_50\", \"SMA_200\"]]\n# chart = asset[[\"close\", \"SMA_10\", \"SMA_20\"]]\nchart = asset[[\"close\", \"EMA_8\", \"EMA_21\", \"EMA_50\"]]\nchart.plot(figsize=(16, 10), color=colors(\"BkGrOrRd\"), title=ptitle, grid=True)\n```\n\n----------------------------------------\n\nTITLE: Running Built-in Technical Analysis Strategies in pandas-ta\nDESCRIPTION: Examples of using pre-built strategies in pandas-ta, including the CommonStrategy and AllStrategy which are provided by default in the library.\nSOURCE: https://github.com/freqtrade/pandas-ta/blob/main/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Running the Builtin CommonStrategy as mentioned above\ndf.ta.strategy(ta.CommonStrategy)\n\n# The Default Strategy is the ta.AllStrategy. The following are equivalent:\ndf.ta.strategy()\ndf.ta.strategy(\"All\")\ndf.ta.strategy(ta.AllStrategy)\n```\n\n----------------------------------------\n\nTITLE: Using Categorical Technical Analysis Strategies in pandas-ta\nDESCRIPTION: Examples of running technical indicators grouped by category, such as Momentum or Overlap, and how to override default parameters for these categorical strategies.\nSOURCE: https://github.com/freqtrade/pandas-ta/blob/main/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# List of indicator categories\ndf.ta.categories\n\n# Running a Categorical Strategy only requires the Category name\ndf.ta.strategy(\"Momentum\") # Default values for all Momentum indicators\ndf.ta.strategy(\"overlap\", length=42) # Override all Overlap 'length' attributes\n```\n\n----------------------------------------\n\nTITLE: Creating Complex MACD Strategy\nDESCRIPTION: Creates a comprehensive strategy combining MACD, RSI, Bollinger Bands, SMAs and Cumulative Log Returns.\nSOURCE: https://github.com/freqtrade/pandas-ta/blob/main/examples/PandasTA_Strategy_Examples.ipynb#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nmomo_bands_sma_ta = [\n    {\"kind\":\"sma\", \"length\": 50},\n    {\"kind\":\"sma\", \"length\": 200},\n    {\"kind\":\"bbands\", \"length\": 20, \"ddof\": 0},\n    {\"kind\":\"macd\"},\n    {\"kind\":\"rsi\"},\n    {\"kind\":\"log_return\", \"cumulative\": True},\n    {\"kind\":\"sma\", \"close\": \"CUMLOGRET_1\", \"length\": 5, \"suffix\": \"CUMLOGRET\"},\n]\nmomo_bands_sma_strategy = ta.Strategy(\n    \"Momo, Bands and SMAs and Cumulative Log Returns\", # name\n    momo_bands_sma_ta, # ta\n    \"MACD and RSI Momo with BBANDS and SMAs 50 & 200 and Cumulative Log Returns\" # description\n)\nmomo_bands_sma_strategy\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Strategy A\nDESCRIPTION: Demonstrates creating a simple strategy with two SMA indicators of different lengths.\nSOURCE: https://github.com/freqtrade/pandas-ta/blob/main/examples/PandasTA_Strategy_Examples.ipynb#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncustom_a = ta.Strategy(name=\"A\", ta=[{\"kind\": \"sma\", \"length\": 50}, {\"kind\": \"sma\", \"length\": 200}])\ncustom_a\n```\n\n----------------------------------------\n\nTITLE: Using Candlestick Patterns in Pandas-TA\nDESCRIPTION: Demonstrates how to analyze candlestick patterns with Pandas-TA. Shows how to get all patterns at once, a single specific pattern, or a selected subset of patterns.\nSOURCE: https://github.com/freqtrade/pandas-ta/blob/main/README.md#2025-04-23_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n# Get all candle patterns (This is the default behaviour)\ndf = df.ta.cdl_pattern(name=\"all\")\n\n# Get only one pattern\ndf = df.ta.cdl_pattern(name=\"doji\")\n\n# Get some patterns\ndf = df.ta.cdl_pattern(name=[\"doji\", \"inside\"])\n```\n\n----------------------------------------\n\nTITLE: Working with Technical Indicators in Pandas-TA\nDESCRIPTION: Shows how to list available technical indicators in the Pandas-TA library. Demonstrates listing all indicators, returning them as a list, and filtering the indicators with an exclusion list.\nSOURCE: https://github.com/freqtrade/pandas-ta/blob/main/README.md#2025-04-23_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n# Prints the indicators and utility functions\ndf.ta.indicators()\n\n# Returns a list of indicators and utility functions\nind_list = df.ta.indicators(as_list=True)\n\n# Prints the indicators and utility functions that are not in the excluded list\ndf.ta.indicators(exclude=[\"cg\", \"pgo\", \"ui\"])\n# Returns a list of the indicators and utility functions that are not in the excluded list\nsmaller_list = df.ta.indicators(exclude=[\"cg\", \"pgo\", \"ui\"], as_list=True)\n```\n\n----------------------------------------\n\nTITLE: Downloading Financial Data with yfinance in Pandas-TA\nDESCRIPTION: Shows how to use the ticker method to download historical price data from Yahoo Finance. Demonstrates different time periods and intervals for data retrieval, including daily, weekly, and hourly data.\nSOURCE: https://github.com/freqtrade/pandas-ta/blob/main/README.md#2025-04-23_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n# Download Chart history using yfinance. (pip install yfinance) https://github.com/ranaroussi/yfinance\n# It uses the same keyword arguments as yfinance (excluding start and end)\ndf = df.ta.ticker(\"aapl\") # Default ticker is \"SPY\"\n\n# Period is used instead of start/end\n# Valid periods: 1d,5d,1mo,3mo,6mo,1y,2y,5y,10y,ytd,max\n# Default: \"max\"\ndf = df.ta.ticker(\"aapl\", period=\"1y\") # Gets this past year\n\n# History by Interval by interval (including intraday if period < 60 days)\n# Valid intervals: 1m,2m,5m,15m,30m,60m,90m,1h,1d,5d,1wk,1mo,3mo\n# Default: \"1d\"\ndf = df.ta.ticker(\"aapl\", period=\"1y\", interval=\"1wk\") # Gets this past year in weeks\ndf = df.ta.ticker(\"aapl\", period=\"1mo\", interval=\"1h\") # Gets this past month in hours\n\n# BUT WAIT!! THERE'S MORE!!\nhelp(ta.yf)\n```\n\n----------------------------------------\n\nTITLE: Using Multiprocessing with Technical Analysis Strategies in pandas-ta\nDESCRIPTION: Shows how to utilize multiprocessing capabilities in pandas-ta for faster computation of technical indicators, with options for controlling verbosity, timing, and core usage.\nSOURCE: https://github.com/freqtrade/pandas-ta/blob/main/README.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# VWAP requires the DataFrame index to be a DatetimeIndex.\n# * Replace \"datetime\" with the appropriate column from your DataFrame\ndf.set_index(pd.DatetimeIndex(df[\"datetime\"]), inplace=True)\n\n# Runs and appends all indicators to the current DataFrame by default\n# The resultant DataFrame will be large.\ndf.ta.strategy()\n# Or the string \"all\"\ndf.ta.strategy(\"all\")\n# Or the ta.AllStrategy\ndf.ta.strategy(ta.AllStrategy)\n\n# Use verbose if you want to make sure it is running.\ndf.ta.strategy(verbose=True)\n\n# Use timed if you want to see how long it takes to run.\ndf.ta.strategy(timed=True)\n\n# Choose the number of cores to use. Default is all available cores.\n# For no multiprocessing, set this value to 0.\ndf.ta.cores = 4\n\n# Maybe you do not want certain indicators.\n# Just exclude (a list of) them.\ndf.ta.strategy(exclude=[\"bop\", \"mom\", \"percent_return\", \"wcp\", \"pvi\"], verbose=True)\n\n# Perhaps you want to use different values for indicators.\n# This will run ALL indicators that have fast or slow as parameters.\n# Check your results and exclude as necessary.\ndf.ta.strategy(fast=10, slow=50, verbose=True)\n\n# Sanity check. Make sure all the columns are there\ndf.columns\n```\n\n----------------------------------------\n\nTITLE: Standard Pandas TA Usage Example\nDESCRIPTION: Demonstrates the standard style of using Pandas TA where input columns are explicitly defined. Shows simple moving average calculation with a length of 10.\nSOURCE: https://github.com/freqtrade/pandas-ta/blob/main/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsma10 = ta.sma(df[\"Close\"], length=10)\n```\n\n----------------------------------------\n\nTITLE: Initializing Trading Analysis Environment with Pandas TA\nDESCRIPTION: Setup code for importing required libraries and configuring the Python environment for trading analysis. Imports pandas, numpy, mplfinance, pandas_ta, and sets display options.\nSOURCE: https://github.com/freqtrade/pandas-ta/blob/main/examples/AIExample.ipynb#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n%pylab inline\nimport datetime as dt\nimport random as rnd\nfrom sys import float_info as sflt\n\nfrom tqdm import tqdm\n\nimport numpy as np\nimport pandas as pd\npd.set_option(\"max_rows\", 100)\npd.set_option(\"max_columns\", 20)\n\nimport mplfinance as mpf\nimport pandas_ta as ta\n\nfrom tqdm.notebook import trange, tqdm\n\nfrom watchlist import colors, Watchlist # Is this failing? If so, copy it locally. See above.\n\nprint(f\"Numpy v{np.__version__}\")\nprint(f\"Pandas v{pd.__version__}\")\nprint(f\"mplfinance v{mpf.__version__}\")\nprint(f\"\\nPandas TA v{ta.version}\\nTo install the Latest Version:\\n$ pip install -U git+https://github.com/twopirllc/pandas-ta\\n\")\n%matplotlib inline\n```\n\n----------------------------------------\n\nTITLE: Quick Start Guide - Basic Pandas TA Usage\nDESCRIPTION: Example showing how to import the library, load data, set datetime index, and calculate basic returns using Pandas TA functions.\nSOURCE: https://github.com/freqtrade/pandas-ta/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nimport pandas_ta as ta\n\ndf = pd.DataFrame() # Empty DataFrame\n\n# Load data\ndf = pd.read_csv(\"path/to/symbol.csv\", sep=\",\")\n# OR if you have yfinance installed\ndf = df.ta.ticker(\"aapl\")\n\n# VWAP requires the DataFrame index to be a DatetimeIndex.\n# Replace \"datetime\" with the appropriate column from your DataFrame\ndf.set_index(pd.DatetimeIndex(df[\"datetime\"]), inplace=True)\n\n# Calculate Returns and append to the df DataFrame\ndf.ta.log_return(cumulative=True, append=True)\ndf.ta.percent_return(cumulative=True, append=True)\n\n# New Columns with results\ndf.columns\n\n# Take a peek\ndf.tail()\n```\n\n----------------------------------------\n\nTITLE: Initializing Pandas TA Environment\nDESCRIPTION: Sets up the Python environment with required imports for pandas_ta technical analysis, including matplotlib, pandas, and AlphaVantage API integration.\nSOURCE: https://github.com/freqtrade/pandas-ta/blob/main/examples/PandasTA_Strategy_Examples.ipynb#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%matplotlib inline\nimport datetime as dt\n\nfrom tqdm import tqdm\n\nimport pandas as pd\nimport pandas_ta as ta\nfrom alphaVantageAPI.alphavantage import AlphaVantage\n\nfrom watchlist import Watchlist\n\nprint(f\"\\nPandas TA v{ta.version}\\nTo install the Latest Version:\\n$ pip install -U git+https://github.com/twopirllc/pandas-ta\\n\")\n%pylab inline\n```\n\n----------------------------------------\n\nTITLE: Preparing and Trimming Asset Data for Analysis\nDESCRIPTION: Code for preparing a selected asset's data for analysis. Trims the data to a specific time duration, converts column names to lowercase, and removes unnecessary columns like dividends and splits.\nSOURCE: https://github.com/freqtrade/pandas-ta/blob/main/examples/AIExample.ipynb#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nduration = \"1y\"\nasset = watch.data[ticker]\nrecent = recent_bars(asset, duration)\nasset.columns = asset.columns.str.lower()\nasset.drop(columns=[\"dividends\", \"split\"], errors=\"ignore\", inplace=True)\nasset = asset.copy().tail(recent)\nasset\n```\n\n----------------------------------------\n\nTITLE: Loading Financial Data with Watchlist in Pandas TA\nDESCRIPTION: Code for loading financial data using the Watchlist class from Pandas TA. Fetches data for multiple tickers from Yahoo Finance and prepares it for analysis.\nSOURCE: https://github.com/freqtrade/pandas-ta/blob/main/examples/AIExample.ipynb#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntf = \"D\"\ntickers = [\"SPY\", \"QQQ\", \"AAPL\", \"TSLA\", \"BTC-USD\"]\nwatch = Watchlist(tickers, tf=tf, ds_name=\"yahoo\", timed=True)\n# watch.strategy = ta.CommonStrategy # If you have a Custom Strategy, you can use it here.\nwatch.load(tickers, analyze=True, verbose=False)\n```\n\n----------------------------------------\n\nTITLE: Checking DataFrame Datetime Order in pandas-ta\nDESCRIPTION: Shows how to verify if a DataFrame's index is properly ordered for time-series analysis, which is important for many technical indicators.\nSOURCE: https://github.com/freqtrade/pandas-ta/blob/main/README.md#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# The 'datetime_ordered' property returns True if the DataFrame\n# index is of Pandas datetime64 and df.index[0] < df.index[-1].\n# Otherwise it returns False.\ndf.ta.datetime_ordered\n```\n\n----------------------------------------\n\nTITLE: Converting DataFrame Index to UTC for Technical Analysis in pandas-ta\nDESCRIPTION: Shows how to standardize the DataFrame's time index to UTC timezone, which is important for consistent time-based analysis across different datasets.\nSOURCE: https://github.com/freqtrade/pandas-ta/blob/main/README.md#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n# Sets the DataFrame index to UTC format.\ndf.ta.to_utc\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Strategy without Multiprocessing in pandas-ta\nDESCRIPTION: Shows how to create a strategy that will not use multiprocessing by explicitly naming output columns, which is useful when column order or naming is important.\nSOURCE: https://github.com/freqtrade/pandas-ta/blob/main/README.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nNonMPStrategy = ta.Strategy(\n    name=\"EMAs, BBs, and MACD\",\n    description=\"Non Multiprocessing Strategy by rename Columns\",\n    ta=[\n        {\"kind\": \"ema\", \"length\": 8},\n        {\"kind\": \"ema\", \"length\": 21},\n        {\"kind\": \"bbands\", \"length\": 20, \"col_names\": (\"BBL\", \"BBM\", \"BBU\")},\n        {\"kind\": \"macd\", \"fast\": 8, \"slow\": 21, \"col_names\": (\"MACD\", \"MACD_H\", \"MACD_S\")}\n    ]\n)\n# Run it\ndf.ta.strategy(NonMPStrategy)\n```\n\n----------------------------------------\n\nTITLE: Implementing Parameter-Based Strategy\nDESCRIPTION: Shows how to create a strategy using params keyword for shorthand parameter arguments and col_numbers for specific column selection.\nSOURCE: https://github.com/freqtrade/pandas-ta/blob/main/examples/PandasTA_Strategy_Examples.ipynb#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nparams_ta = [\n    {\"kind\":\"ema\", \"params\": (10,)},\n    {\"kind\":\"macd\", \"params\": (9, 19, 10), \"col_numbers\": (1,)},\n    {\"kind\":\"bbands\", \"col_numbers\": (0,2), \"col_names\": (\"LB\", \"UB\")},\n    {\"kind\":\"log_return\", \"params\": (5, False)},\n]\nparams_ta_strategy = ta.Strategy(\n    \"EMA, MACD History, Outter BBands, Log Returns\",\n    params_ta,\n    \"EMA, MACD History, BBands(LB, UB), and Log Returns Strategy\"\n)\nparams_ta_strategy\n```\n\n----------------------------------------\n\nTITLE: Using Prefix and Suffix with Technical Indicators in pandas-ta\nDESCRIPTION: Shows how to add prefixes and suffixes to the column names of technical indicators, which helps in organizing and identifying indicator outputs in the DataFrame.\nSOURCE: https://github.com/freqtrade/pandas-ta/blob/main/README.md#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n# Applying a prefix to the name of an indicator.\nprehl2 = df.ta.hl2(prefix=\"pre\")\nprint(prehl2.name)  # \"pre_HL2\"\n\n# Applying a suffix to the name of an indicator.\nendhl2 = df.ta.hl2(suffix=\"post\")\nprint(endhl2.name)  # \"HL2_post\"\n\n# Applying a prefix and suffix to the name of an indicator.\nbothhl2 = df.ta.hl2(prefix=\"pre\", suffix=\"post\")\nprint(bothhl2.name)  # \"pre_HL2_post\"\n```\n\n----------------------------------------\n\nTITLE: Calculating Time Range of DataFrame for Technical Analysis in pandas-ta\nDESCRIPTION: Shows how to determine the time span covered by the DataFrame in various units (years, months, days, etc.), which is useful for understanding the data timeframe.\nSOURCE: https://github.com/freqtrade/pandas-ta/blob/main/README.md#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n# Returns the time range of the DataFrame as a float.\n# By default, it returns the time in \"years\"\ndf.ta.time_range\n\n# Available time_ranges include: \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\". \"seconds\"\ndf.ta.time_range = \"days\"\ndf.ta.time_range # prints DataFrame time in \"days\" as float\n```\n\n----------------------------------------\n\nTITLE: Reversing DataFrame Order for Technical Analysis in pandas-ta\nDESCRIPTION: Demonstrates how to get a reversed version of the DataFrame, which can be useful for certain technical analysis operations that need different data ordering.\nSOURCE: https://github.com/freqtrade/pandas-ta/blob/main/README.md#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n# The 'reverse' is a helper property that returns the DataFrame\n# in reverse order.\ndf.ta.reverse\n```\n\n----------------------------------------\n\nTITLE: Adding Constants to DataFrame for Technical Analysis in pandas-ta\nDESCRIPTION: Demonstrates how to add and remove constant values to/from a DataFrame, which can be useful for certain technical analysis calculations requiring fixed values.\nSOURCE: https://github.com/freqtrade/pandas-ta/blob/main/README.md#2025-04-23_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\n\n# Add constant '1' to the DataFrame\ndf.ta.constants(True, [1])\n# Remove constant '1' to the DataFrame\ndf.ta.constants(False, [1])\n```\n\n----------------------------------------\n\nTITLE: Managing DataFrame Constants in Pandas-TA\nDESCRIPTION: Demonstrates how to add and remove constant values to a DataFrame for charting purposes. The code shows how to add a range of horizontal lines and then selectively remove specific ones.\nSOURCE: https://github.com/freqtrade/pandas-ta/blob/main/README.md#2025-04-23_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n# Adding constants for charting\nimport numpy as np\nchart_lines = np.append(np.arange(-4, 5, 1), np.arange(-100, 110, 10))\ndf.ta.constants(True, chart_lines)\n# Removing some constants from the DataFrame\ndf.ta.constants(False, np.array([-60, -40, 40, 60]))\n```\n\n----------------------------------------\n\nTITLE: Checking Last Run Time of Technical Analysis in pandas-ta\nDESCRIPTION: Shows how to retrieve the timestamp of when pandas-ta was last executed on the DataFrame, which can be useful for tracking analysis timing.\nSOURCE: https://github.com/freqtrade/pandas-ta/blob/main/README.md#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n# Returns the time Pandas TA was last run as a string.\ndf.ta.last_run\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiprocessing Cores for Technical Analysis in pandas-ta\nDESCRIPTION: Shows how to set the number of CPU cores used for multiprocessing when running technical analysis strategies, including how to disable multiprocessing.\nSOURCE: https://github.com/freqtrade/pandas-ta/blob/main/README.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# Set the number of cores to use for strategy multiprocessing\n# Defaults to the number of cpus you have.\ndf.ta.cores = 4\n\n# Set the number of cores to 0 for no multiprocessing.\ndf.ta.cores = 0\n\n# Returns the number of cores you set or your default number of cpus.\ndf.ta.cores\n```\n\n----------------------------------------\n\nTITLE: Setting Exchange for Technical Analysis Date Calculations in pandas-ta\nDESCRIPTION: Demonstrates how to set the exchange used for calendar calculations, which affects the last_run property and potentially other date-time dependent operations.\nSOURCE: https://github.com/freqtrade/pandas-ta/blob/main/README.md#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n# Sets the Exchange to use when calculating the last_run property. Default: \"NYSE\"\ndf.ta.exchange\n\n# Set the Exchange to use.\n# Available Exchanges: \"ASX\", \"BMF\", \"DIFX\", \"FWB\", \"HKE\", \"JSE\", \"LSE\", \"NSE\", \"NYSE\", \"NZSX\", \"RTS\", \"SGX\", \"SSE\", \"TSE\", \"TSX\"\ndf.ta.exchange = \"LSE\"\n```\n\n----------------------------------------\n\nTITLE: Preparing Chart Display Strings for Visualization\nDESCRIPTION: Generates formatted strings for chart titles and labels. Creates display strings for date ranges, ticker information, and OHLCV (Open, High, Low, Close, Volume) values for visualization.\nSOURCE: https://github.com/freqtrade/pandas-ta/blob/main/examples/AIExample.ipynb#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nextime = ta.get_time(to_string=True)\nfirst_date, last_date = asset.index[0], asset.index[-1]\nf_date = f\"{first_date.day_name()} {first_date.month}-{first_date.day}-{first_date.year}\"\nl_date = f\"{last_date.day_name()} {last_date.month}-{last_date.day}-{last_date.year}\"\nlast_ohlcv = f\"Last OHLCV: ({asset.iloc[-1].open:.4f}, {asset.iloc[-1].high:.4f}, {asset.iloc[-1].low:.4f}, {asset.iloc[-1].close:.4f}, {int(asset.iloc[-1].volume)})\"\nptitle = f\"\\n{ticker} [{tf} for {duration}({recent} bars)] from {f_date} to {l_date}\\n{last_ohlcv}\\n{extime}\"\n```\n\n----------------------------------------\n\nTITLE: Selecting a Specific Asset from Watchlist Data\nDESCRIPTION: Code snippet that selects a specific ticker from the loaded watchlist data and prints its shape and column information. This shows how to access individual assets from the watchlist collection.\nSOURCE: https://github.com/freqtrade/pandas-ta/blob/main/examples/AIExample.ipynb#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nticker = tickers[0] # change tickers by changing the index\nprint(f\"{ticker} {watch.data[ticker].shape}\\nColumns: {', '.join(list(watch.data[ticker].columns))}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Adjusted Close Column for Technical Analysis in pandas-ta\nDESCRIPTION: Demonstrates how to configure pandas-ta to use an adjusted close price column instead of the default close price column for calculations.\nSOURCE: https://github.com/freqtrade/pandas-ta/blob/main/README.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# Set ta to default to an adjusted column, 'adj_close', overriding default 'close'.\ndf.ta.adjusted = \"adj_close\"\ndf.ta.sma(length=10, append=True)\n\n# To reset back to 'close', set adjusted back to None.\ndf.ta.adjusted = None\n```\n\n----------------------------------------\n\nTITLE: Creating Recent Bars Function for Time Period Selection\nDESCRIPTION: Utility function that calculates the number of bars to display based on a specified time frame. Converts time frame strings like '1y' or '6mo' into the corresponding number of trading days.\nSOURCE: https://github.com/freqtrade/pandas-ta/blob/main/examples/AIExample.ipynb#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef recent_bars(df, tf: str = \"1y\"):\n    # All Data: 0, Last Four Years: 0.25, Last Two Years: 0.5, This Year: 1, Last Half Year: 2, Last Quarter: 4\n    yearly_divisor = {\"all\": 0, \"10y\": 0.1, \"5y\": 0.2, \"4y\": 0.25, \"3y\": 1./3, \"2y\": 0.5, \"1y\": 1, \"6mo\": 2, \"3mo\": 4}\n    yd = yearly_divisor[tf] if tf in yearly_divisor.keys() else 0\n    return int(ta.RATE[\"TRADING_DAYS_PER_YEAR\"] / yd) if yd > 0 else df.shape[0]\n```\n\n----------------------------------------\n\nTITLE: Accessing Technical Analysis Categories in pandas-ta\nDESCRIPTION: Shows how to retrieve the list of available technical analysis categories provided by the pandas-ta library.\nSOURCE: https://github.com/freqtrade/pandas-ta/blob/main/README.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# List of Pandas TA categories.\ndf.ta.categories\n```\n\n----------------------------------------\n\nTITLE: Accessing Help Documentation - Pandas TA Usage Guide\nDESCRIPTION: Examples showing how to access help documentation for the library and specific indicators.\nSOURCE: https://github.com/freqtrade/pandas-ta/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nimport pandas_ta as ta\n\n# Create a DataFrame so 'ta' can be used.\ndf = pd.DataFrame()\n\n# Help about this, 'ta', extension\nhelp(df.ta)\n\n# List of all indicators\ndf.ta.indicators()\n\n# Help about an indicator such as bbands\nhelp(ta.bbands)\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for Trading Analysis with Python\nDESCRIPTION: Package installation instructions for setting up a Python environment for trading analysis. Includes essential libraries for data manipulation, visualization, and API access.\nSOURCE: https://github.com/freqtrade/pandas-ta/blob/main/examples/AIExample.ipynb#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n#!pip install numpy\n#!pip install pandas\n#!pip install mplfinance\n#!pip install pandas-datareader\n#!pip install requests_cache\n#!pip install tqdm\n#!pip install alphaVantage-api # Required for Watchlist\n```\n\n----------------------------------------\n\nTITLE: Requirements Specification for pandas-ta\nDESCRIPTION: A requirements.txt file listing the exact versions of Python packages needed for the pandas-ta project. It includes data analysis libraries like numpy and pandas, along with supporting utilities for date handling and timezone management.\nSOURCE: https://github.com/freqtrade/pandas-ta/blob/main/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnumpy==1.22.0\npandas==1.2.0\npython-dateutil==2.8.1\npytz==2021.1\nsix==1.16.0\n```\n\n----------------------------------------\n\nTITLE: Installing Pandas TA from GitHub\nDESCRIPTION: Command to install the latest version of Pandas TA library directly from GitHub repository using pip.\nSOURCE: https://github.com/freqtrade/pandas-ta/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install -U git+https://github.com/twopirllc/pandas-ta\n```\n\n----------------------------------------\n\nTITLE: Installing Pandas TA Library - Python Package Installation\nDESCRIPTION: Various methods to install the Pandas TA library, including stable release via pip, latest version from GitHub, and development version.\nSOURCE: https://github.com/freqtrade/pandas-ta/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install pandas_ta\n$ pip install -U git+https://github.com/twopirllc/pandas-ta\n$ pip install -U git+https://github.com/twopirllc/pandas-ta.git@development\n```"
  }
]