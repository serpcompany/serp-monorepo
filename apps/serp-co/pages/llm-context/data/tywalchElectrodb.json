[
  {
    "owner": "tywalch",
    "repo": "electrodb",
    "content": "TITLE: Creating ElectroDB Entity with TypeScript\nDESCRIPTION: Demonstrates how to create a Task entity using ElectroDB with a defined schema, including attributes and indexes for DynamoDB. The example shows configuration of primary and secondary indexes with composite keys for a task tracking application.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/modeling/entities.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport DynamoDB from \"aws-sdk/clients/dynamodb\";\nimport { Entity } from \"electrodb\";\n\nconst client = new DynamoDB.DocumentClient();\n\nconst table = \"electro\";\n\nconst Task = new Entity(\n  {\n    model: {\n      entity: \"task\",\n      version: \"1\",\n      service: \"taskapp\",\n    },\n    attributes: {\n      task: {\n        type: \"string\",\n        default: () => uuid(),\n      },\n      project: {\n        type: \"string\",\n      },\n      employee: {\n        type: \"string\",\n      },\n      description: {\n        type: \"string\",\n      },\n    },\n    indexes: {\n      task: {\n        pk: {\n          field: \"pk\",\n          composite: [\"task\"],\n        },\n        sk: {\n          field: \"sk\",\n          composite: [\"project\", \"employee\"],\n        },\n      },\n      project: {\n        index: \"gsi1pk-gsi1sk-index\",\n        pk: {\n          field: \"gsi1pk\",\n          composite: [\"project\"],\n        },\n        sk: {\n          field: \"gsi1sk\",\n          composite: [\"employee\", \"task\"],\n        },\n      },\n      assigned: {\n        collection: \"assignments\",\n        index: \"gsi3pk-gsi3sk-index\",\n        pk: {\n          field: \"gsi3pk\",\n          composite: [\"employee\"],\n        },\n        sk: {\n          field: \"gsi3sk\",\n          composite: [\"project\", \"task\"],\n        },\n      },\n    },\n  },\n  { table, client },\n);\n```\n\n----------------------------------------\n\nTITLE: Defining ElectroDB Schema for Book Entity in TypeScript\nDESCRIPTION: This snippet demonstrates how to define a schema for a 'Book' entity in ElectroDB. It includes model information, attributes with various types and constraints, and index definitions for querying.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/modeling/schema.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  model: {\n    entity: 'book',\n    version: '1',\n    service: 'bookstore'\n  },\n  attributes: {\n    storeId: {\n      type: 'string',\n    },\n    bookId: {\n      type: 'string',\n    },\n    price: {\n      type: 'number',\n      required: true,\n    },\n    title: {\n      type: 'string',\n    },\n    author: {\n      type: 'string',\n    },\n    condition: {\n      type: ['EXCELLENT', 'GOOD', 'FAIR', 'POOR'] as const,\n      required: true,\n    },\n    genre: {\n      type: 'set',\n      items: 'string',\n    },\n    published: {\n      type: 'number',\n    }\n  },\n  indexes: {\n    byLocation: {\n      pk: {\n        field: 'pk',\n        composite: ['storeId']\n      },\n      sk: {\n        field: 'sk',\n        composite: ['bookId']\n      }\n    },\n    byAuthor: {\n      index: 'gsi1pk-gsi1sk-index',\n      pk: {\n        field: 'gsi1pk',\n        composite: ['author']\n      },\n      sk: {\n        field: 'gsi1sk',\n        composite: ['title']\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Attribute Definition Structure in TypeScript\nDESCRIPTION: The complete TypeScript interface for defining attributes in an ElectroDB entity schema. This shows all available properties that can be configured on an attribute including type constraints, validation, formatting options, and data transformation capabilities.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/modeling/attributes.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  type: \"string\" | \"number\" | \"boolean\" | \"list\" | \"map\" | \"set\" | \"any\" | ReadonlyArray<string> | CustomAttributeType<T>;\n  required?: boolean;\n  default?: <T> | (() => <T>);\n  validate?: RegExp | ((value: T) => void | string);\n  field?: string;\n  readOnly?: boolean;\n  label?: string;\n  get?: (attribute: T, schema: any) => T | void | undefined;\n  set?: (attribute?: T, schema?: any) => T | void | undefined;\n  watch?: \"*\" | string[];\n  padding?: {\n      length: number;\n      char: string;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Index Structure in ElectroDB\nDESCRIPTION: This snippet shows the structure for defining indexes in ElectroDB. It includes options for specifying access patterns, partition keys, sort keys, and various index properties such as collections and types.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/modeling/indexes.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nindexes: {\n\t[AccessPatternName]: {\n\t\tindex?: string;\n\t\tcollection?: string | string[];\n\t\ttype?: 'isolated' | 'clustered';\n\t\tpk: {\n\t\t\tfield: string;\n\t\t\tcomposite: AttributeName[];\n\t\t\ttemplate?: string;\n\t\t\tcast?: 'string' | 'number';\n\t\t\tcasing?: 'upper' | 'lower' | 'none';\n\t\t},\n\t\tsk?: {\n\t\t\tfield: string;\n\t\t\tcomposite: AttributesName[];\n\t\t\ttemplate?: string;\n\t\t\tcast?: 'string' | 'number';\n\t\t\tcasing?: 'upper' | 'lower' | 'none';\n\t\t},\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ElectroDB to Ignore Ownership for Existing Data\nDESCRIPTION: This snippet demonstrates how to use the 'ignoreOwnership' execution option when building params or querying the table. This is crucial when working with existing data not created by ElectroDB to prevent data leakage between entities.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/recipes/use-electrodb-with-existing-table.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// when building params\n.params({ ignoreOwnership: true })\n\n// when querying the table\n.go({ ignoreOwnership: true })\n```\n\n----------------------------------------\n\nTITLE: Defining Book Entity in TypeScript with ElectroDB\nDESCRIPTION: This code snippet defines the 'book' entity using ElectroDB. It includes attributes like book ID, title, description, publisher, and loan information. The entity has multiple indexes for different access patterns, including copies, loans, author works, and releases.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/examples/library-system.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst book = new Entity(\n  {\n    model: {\n      entity: \"book\",\n      version: \"1\",\n      service: \"library\",\n    },\n    attributes: {\n      bookId: {\n        type: \"string\",\n      },\n      bookTitle: {\n        type: \"string\",\n        required: true,\n      },\n      description: {\n        type: \"string\",\n        required: true,\n      },\n      publisher: {\n        type: \"string\",\n        required: true,\n      },\n      releaseDate: {\n        type: \"string\",\n        required: true,\n      },\n      authorFirstName: {\n        type: \"string\",\n        required: true,\n      },\n      authorLastName: {\n        type: \"string\",\n        required: true,\n      },\n      isbn: {\n        type: \"string\",\n        required: true,\n      },\n      loanStartDate: {\n        type: \"string\",\n      },\n      loanEndDate: {\n        type: \"string\",\n      },\n      memberId: {\n        type: \"string\",\n      },\n    },\n    indexes: {\n      copies: {\n        collection: [\"detail\"],\n        pk: {\n          field: \"pk\",\n          composite: [\"isbn\"],\n        },\n        sk: {\n          field: \"sk\",\n          composite: [\"bookId\"],\n        },\n      },\n      loans: {\n        collection: [\"account\"],\n        index: \"gsi1pk-gsi1sk-index\",\n        pk: {\n          field: \"gsi1pk\",\n          composite: [\"memberId\"],\n        },\n        sk: {\n          field: \"gsi1sk\",\n          composite: [\"loanEndDate\"],\n        },\n      },\n      author: {\n        collection: [\"works\"],\n        index: \"gsi2pk-gsi2sk-index\",\n        pk: {\n          field: \"gsi2pk\",\n          composite: [\"authorLastName\", \"authorFirstName\"],\n        },\n        sk: {\n          field: \"gsi2sk\",\n          composite: [\"loanEndDate\"],\n        },\n      },\n      releases: {\n        collection: [\"titles\"],\n        index: \"gsi3pk-gsi3sk-index\",\n        pk: {\n          field: \"gsi3pk\",\n          composite: [\"bookTitle\"],\n        },\n        sk: {\n          field: \"gsi3sk\",\n          composite: [\"releaseDate\"],\n        },\n      },\n    },\n  },\n  { table },\n);\n```\n\n----------------------------------------\n\nTITLE: Querying Books by Author with ElectroDB\nDESCRIPTION: Example of querying books using the byAuthor index to find all books by a specific author.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/core-concepts/quick-start.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data, cursor } = await Book.query\n  .byAuthor({ author: \"Stephen King\" })\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Patching a Task with ElectroDB in TypeScript\nDESCRIPTION: This code demonstrates ElectroDB's fluent API for updating a task entity with various operations including set, add, and append. The example shows patch operations with conditional logic to update only if the task is currently 'in-progress'.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/core-concepts/Introduction.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data } = await tasks\n  .patch({\n    team: \"core\",\n    task: \"45-662\",\n    project: \"backend\",\n  })\n  .set({ status: \"open\" })\n  .add({ points: 5 })\n  .append({\n    comments: [\n      {\n        user: \"janet\",\n        body: \"This seems half-baked.\",\n      },\n    ],\n  })\n  .where(({ status }, { eq }) => eq(status, \"in-progress\"))\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Defining Book Entity in ElectroDB\nDESCRIPTION: TypeScript code defining a Book entity with attributes, indexes, and configuration for use with ElectroDB.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/core-concepts/quick-start.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport DynamoDB from \"aws-sdk/clients/dynamodb\";\nimport { Entity } from \"electrodb\";\n\nconst client = new DynamoDB.DocumentClient();\n\nconst table = \"electro\";\n\nconst Book = new Entity(\n  {\n    model: {\n      entity: \"book\",\n      version: \"1\",\n      service: \"store\",\n    },\n    attributes: {\n      storeId: {\n        type: \"string\",\n      },\n      bookId: {\n        type: \"string\",\n      },\n      price: {\n        type: \"number\",\n        required: true,\n      },\n      title: {\n        type: \"string\",\n      },\n      author: {\n        type: \"string\",\n      },\n      condition: {\n        type: [\"EXCELLENT\", \"GOOD\", \"FAIR\", \"POOR\"] as const,\n        required: true,\n      },\n      genre: {\n        type: \"set\",\n        items: \"string\",\n      },\n      published: {\n        type: \"string\",\n      },\n    },\n    indexes: {\n      byLocation: {\n        pk: {\n          field: \"pk\",\n          composite: [\"storeId\"],\n        },\n        sk: {\n          field: \"sk\",\n          composite: [\"bookId\"],\n        },\n      },\n      byAuthor: {\n        index: \"gsi1pk-gsi1sk-index\",\n        pk: {\n          field: \"gsi1pk\",\n          composite: [\"author\"],\n        },\n        sk: {\n          field: \"gsi1sk\",\n          composite: [\"title\"],\n        },\n      },\n    },\n  },\n  { client, table },\n);\n```\n\n----------------------------------------\n\nTITLE: Importing ElectroDB in JavaScript\nDESCRIPTION: How to require Entity and Service classes from ElectroDB in JavaScript.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/core-concepts/quick-start.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Entity, Service } = require(\"electrodb\");\n```\n\n----------------------------------------\n\nTITLE: Basic Update Operation in TypeScript\nDESCRIPTION: Example showing how to update a task item with multiple operations including set, add, and append while using a condition\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/update.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntasks\n  .update({\n    team: \"core\",\n    task: \"45-662\",\n    project: \"backend\",\n  })\n  .set({ status: \"open\" })\n  .add({ points: 5 })\n  .append({\n    comments: [\n      {\n        user: \"janet\",\n        body: \"This seems half-baked.\",\n      },\n    ],\n  })\n  .where(({ status }, { eq }) => eq(status, \"in-progress\"))\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Updating Task Entity with ElectroDB in TypeScript\nDESCRIPTION: This snippet demonstrates how to use ElectroDB to update a task entity. It includes setting a status, adding points, and appending a comment, with a condition on the current status.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntasks\n  .patch({\n    team: \"core\",\n    task: \"45-662\",\n    project: \"backend\",\n  })\n  .set({ status: \"open\" })\n  .add({ points: 5 })\n  .append({\n    comments: [\n      {\n        user: \"janet\",\n        body: \"This seems half-baked.\",\n      },\n    ],\n  })\n  .where(({ status }, { eq }) => eq(status, \"in-progress\"))\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Defining Composite Attributes and Indexes in ElectroDB\nDESCRIPTION: This snippet demonstrates how to define attributes and indexes using composite attribute arrays in ElectroDB. It shows the structure for defining attributes with labels and how to compose indexes using these attributes.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/modeling/indexes.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nattributes: {\n\tstoreId: {\n\t\ttype: \"string\",\n\t\tlabel: \"sid\",\n\t},\n\tmallId: {\n\t\ttype: \"string\",\n\t\tlabel: \"mid\",\n\t},\n\tbuildingId: {\n\t\ttype: \"string\",\n\t\tlabel: \"bid\",\n\t},\n\tunitId: {\n\t\ttype: \"string\",\n\t\tlabel: \"uid\",\n\t}\n},\nindexes: {\n\tlocations: {\n\t\tpk: {\n\t\t\tfield: \"pk\",\n\t\t\tcomposite: [\"storeId\"]\n\t\t},\n\t\tsk: {\n\t\t\tfield: \"sk\",\n\t\t\tcomposite: [\"mallId\", \"buildingId\", \"unitId\"]\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Tasks Entity Schema with ElectroDB in TypeScript\nDESCRIPTION: This snippet defines a Tasks entity using ElectroDB. It includes a detailed attribute schema with various data types, validation rules, and computed fields. The entity also defines multiple indexes for efficient querying, including GSIs for assignments and backlog.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/partials/tasks-example.entity.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity } from \"electrodb\";\n\nconst table = \"your_table_name\";\n\nconst tasks = new Entity({\nmodel: {\nentity: \"tasks\",\nversion: \"1\",\nservice: \"taskapp\"\n},\nattributes: {\nteam: {\ntype: \"string\",\nrequired: true\n},\ntask: {\ntype: \"string\",\nrequired: true\n},\nproject: {\ntype: \"string\",\nrequired: true\n},\nuser: {\ntype: \"string\",\nrequired: true\n},\ntitle: {\ntype: \"string\",\nrequired: true,\n},\ndescription: {\ntype: \"string\"\n},\nstatus: {\n// use an array to type an enum\ntype: [\"open\", \"in-progress\", \"on-hold\", \"closed\"] as const,\ndefault: \"open\"\n},\npoints: {\ntype: \"number\",\n},\ntags: {\ntype: \"set\",\nitems: \"string\"\n},\ncomments: {\ntype: \"list\",\nitems: {\ntype: \"map\",\nproperties: {\nuser: {\ntype: \"string\"\n},\nbody: {\ntype: \"string\"\n}\n}\n}\n},\nclosed: {\ntype: \"string\",\nvalidate: /[0-9]{4}-[0-9]{2}-[0-9]{2}/,\n},\ncreatedAt: {\ntype: \"number\",\ndefault: () => Date.now(),\n// cannot be modified after created\nreadOnly: true\n},\nupdatedAt: {\ntype: \"number\",\n// watch for changes to any attribute\nwatch: \"*\",\n// set current timestamp when updated\nset: () => Date.now(),\nreadOnly: true\n}\n},\nindexes: {\nprojects: {\npk: {\nfield: \"pk\",\ncomposite: [\"team\"]\n},\nsk: {\nfield: \"sk\",\n// create composite keys for partial sort key queries\ncomposite: [\"project\", \"task\"]\n}\n},\nassigned: {\n// collections allow for queries across multiple entities\ncollection: \"assignments\",\nindex: \"gsi1pk-gsi1sk-index\",\npk: {\n// map to your GSI Hash/Partition key\nfield: \"gsi1pk\",\ncomposite: [\"user\"]\n},\nsk: {\n// map to your GSI Range/Sort key\nfield: \"gsi1sk\",\ncomposite: [\"status\"]\n}\n},\nbacklog: {\n// map to the GSI name on your DynamoDB table\nindex: \"gsi2pk-gsi2sk-index\",\npk: {\nfield: \"gsi2pk\",\ncomposite: [\"project\"]\n},\nsk: {\nfield: \"gsi2sk\",\ncomposite: [\"team\", \"closed\"],\n}\n}\n}\n}, { table });\n```\n\n----------------------------------------\n\nTITLE: Querying an ElectroDB Collection\nDESCRIPTION: This example demonstrates how to query the 'assignments' collection for a specific employee. It shows the client setup and the collection query that retrieves both employee and task data in a single request.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/modeling/collections.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport DynamoDB from \"aws-sdk/clients/dynamodb\";\n\nconst table = \"projectmanagement\";\nconst client = new DynamoDB.DocumentClient();\n\nconst TaskApp = new Service({\n  employee: Employee,\n  task: Task,\n});\n\nawait TaskApp.collections.assignments({ employeeId: \"JExotic\" }).go();\n```\n\n----------------------------------------\n\nTITLE: Defining Employee Entity in ElectroDB\nDESCRIPTION: Creates an Employee entity with attributes like name, office, title, team, and salary. Includes multiple indexes for different access patterns including employee lookup, team management, and direct reports.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/examples/human-resources.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity } from \"electrodb\";\n\nconst Employee = new Entity({\n  model: {\n    entity: \"employee\",\n    version: \"1\",\n    service: \"taskapp\",\n  },\n  attributes: {\n    employee: {\n      type: \"string\",\n    },\n    firstName: {\n      type: \"string\",\n    },\n    lastName: {\n      type: \"string\",\n    },\n    office: {\n      type: \"string\",\n    },\n    title: {\n      type: \"string\",\n    },\n    team: {\n      type: [\"development\", \"marketing\", \"finance\", \"product\"] as const,\n    },\n    salary: {\n      type: \"string\",\n    },\n    manager: {\n      type: \"string\",\n    },\n    dateHired: {\n      type: \"string\",\n    },\n    birthday: {\n      type: \"string\",\n    },\n  },\n  indexes: {\n    employee: {\n      pk: {\n        field: \"pk\",\n        composite: [\"employee\"],\n      },\n      sk: {\n        field: \"sk\",\n        composite: [],\n      },\n    },\n    coworkers: {\n      index: \"gsi1pk-gsi1sk-index\",\n      collection: \"workplaces\",\n      pk: {\n        field: \"gsi1pk\",\n        composite: [\"office\"],\n      },\n      sk: {\n        field: \"gsi1sk\",\n        composite: [\"team\", \"title\", \"employee\"],\n      },\n    },\n    teams: {\n      index: \"gsi2pk-gsi2sk-index\",\n      pk: {\n        field: \"gsi2pk\",\n        composite: [\"team\"],\n      },\n      sk: {\n        field: \"gsi2sk\",\n        composite: [\"title\", \"salary\", \"employee\"],\n      },\n    },\n    employeeLookup: {\n      collection: \"assignments\",\n      index: \"gsi3pk-gsi3sk-index\",\n      pk: {\n        field: \"gsi3pk\",\n        composite: [\"employee\"],\n      },\n      sk: {\n        field: \"gsi3sk\",\n        composite: [],\n      },\n    },\n    roles: {\n      index: \"gsi4pk-gsi4sk-index\",\n      pk: {\n        field: \"gsi4pk\",\n        composite: [\"title\"],\n      },\n      sk: {\n        field: \"gsi4sk\",\n        composite: [\"salary\", \"employee\"],\n      },\n    },\n    directReports: {\n      index: \"gsi5pk-gsi5sk-index\",\n      pk: {\n        field: \"gsi5pk\",\n        composite: [\"manager\"],\n      },\n      sk: {\n        field: \"gsi5sk\",\n        composite: [\"team\", \"office\", \"employee\"],\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Employee Entity Schema in TypeScript with ElectroDB\nDESCRIPTION: Defines the Employee entity with attributes like employee ID, personal details, team information, and multiple indexes for different access patterns. Includes validation for dates and typed team values.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/examples/task-manager.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport moment from \"moment\";\nimport { v4 as uuid } from \"uuid\";\nimport { Entity, EntityItem, QueryResponse, CreateEntityItem } from \"electrodb\";\nimport { table, client } from \"../config\";\n\nexport const employee = new Entity({\n  model: {\n    entity: \"employee\",\n    version: \"1\",\n    service: \"taskmanager\"\n  },\n  attributes: {\n    employee: {\n      type: \"string\",\n      default: () => uuid()\n    },\n    firstName: {\n      type: \"string\",\n      required: true\n    },\n    lastName: {\n      type: \"string\",\n      required: true\n    },\n    office: {\n      type: \"string\",\n      required: true\n    },\n    title: {\n      type: \"string\",\n      required: true\n    },\n    team: {\n      type: [\"development\", \"marketing\", \"finance\", \"product\", \"cool cats and kittens\"] as const,\n      required: true\n    },\n    salary: {\n      type: \"string\",\n      required: true\n    },\n    manager: {\n      type: \"string\"\n    },\n    dateHired: {\n      type: \"string\",\n      validate: (date: string) => {\n        if (!moment(date).isValid) {\n          throw new Error(\"Invalid date format\");\n        }\n      }\n    },\n    birthday: {\n      type: \"string\",\n      validate: (date: string) => {\n        if (!moment(date).isValid) {\n          throw new Error(\"Invalid date format\");\n        }\n      }\n    }\n  },\n  indexes: {\n    employee: {\n      pk: {\n        field: \"pk\",\n        composite: [\"employee\"]\n      },\n      sk: {\n        field: \"sk\",\n        composite: []\n      }\n    },\n    coworkers: {\n      index: \"gsi1pk-gsi1sk-index\",\n      collection: \"workplaces\",\n      pk: {\n        field: \"gsi1pk\",\n        composite: [\"office\"]\n      },\n      sk: {\n        field: \"gsi1sk\",\n        composite: [\"team\", \"title\", \"employee\"]\n      }\n    },\n    teams: {\n      index: \"gsi2pk-gsi2sk-index\",\n      pk: {\n        field: \"gsi2pk\",\n        composite: [\"team\"]\n      },\n      sk: {\n        field: \"gsi2sk\",\n        composite: [\"dateHired\", \"title\"]\n      }\n    },\n    employeeLookup: {\n      collection: \"assignments\",\n      index: \"gsi3pk-gsi3sk-index\",\n      pk: {\n        field: \"gsi3pk\",\n        composite: [\"employee\"]\n      },\n      sk: {\n        field: \"gsi3sk\",\n        composite: []\n      }\n    },\n    roles: {\n      index: \"gsi4pk-gsi4sk-index\",\n      pk: {\n        field: \"gsi4pk\",\n        composite: [\"title\"]\n      },\n      sk: {\n        field: \"gsi4sk\",\n        composite: [\"salary\"]\n      }\n    },\n    directReports: {\n      index: \"gsi5pk-gsi5sk-index\",\n      pk: {\n        field: \"gsi5pk\",\n        composite: [\"manager\"]\n      },\n      sk: {\n        field: \"gsi5sk\",\n        composite: [\"team\", \"office\"]\n      }\n    }\n  }\n}, { table, client });\n```\n\n----------------------------------------\n\nTITLE: Configuring ElectroDB Entity for Mall Store Directory\nDESCRIPTION: This TypeScript code defines an ElectroDB Entity named 'StoreLocations' for a mall store directory service. It specifies the model, attributes, and indexes for the entity, including validation rules and composite keys for different access patterns.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/partials/entity-query-example-setup.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport DynamoDB from \"aws-sdk/clients/dynamodb\";\nimport { Entity } from \"electrodb\";\n\nconst client = new DynamoDB.DocumentClient();\n\nconst table = \"electro\";\n\nconst StoreLocations = new Entity(\n  {\n    model: {\n      service: \"MallStoreDirectory\",\n      entity: \"MallStore\",\n      version: \"1\",\n    },\n    attributes: {\n      cityId: {\n        type: \"string\",\n        required: true,\n      },\n      mallId: {\n        type: \"string\",\n        required: true,\n      },\n      storeId: {\n        type: \"string\",\n        required: true,\n      },\n      buildingId: {\n        type: \"string\",\n        required: true,\n      },\n      unitId: {\n        type: \"string\",\n        required: true,\n      },\n      category: {\n        type: [\n          \"spite store\",\n          \"food/coffee\",\n          \"food/meal\",\n          \"clothing\",\n          \"electronics\",\n          \"department\",\n          \"misc\",\n        ],\n        required: true,\n      },\n      leaseEndDate: {\n        type: \"string\",\n        required: true,\n      },\n      rent: {\n        type: \"string\",\n        required: true,\n        validate: /^(\\d+\\.\\d{2})$/,\n      },\n      discount: {\n        type: \"string\",\n        required: false,\n        default: \"0.00\",\n        validate: /^(\\d+\\.\\d{2})$/,\n      },\n      tenants: {\n        type: \"set\",\n        items: \"string\",\n      },\n      warnings: {\n        type: \"number\",\n        default: 0,\n      },\n      deposit: {\n        type: \"number\",\n      },\n      contact: {\n        type: \"set\",\n        items: \"string\",\n      },\n      rentalAgreement: {\n        type: \"list\",\n        items: {\n          type: \"map\",\n          properties: {\n            type: {\n              type: \"string\",\n            },\n            detail: {\n              type: \"string\",\n            },\n          },\n        },\n      },\n      petFee: {\n        type: \"number\",\n      },\n      fees: {\n        type: \"number\",\n      },\n      tags: {\n        type: \"set\",\n        items: \"string\",\n      },\n    },\n    indexes: {\n      stores: {\n        pk: {\n          field: \"pk\",\n          composite: [\"cityId\", \"mallId\"],\n        },\n        sk: {\n          field: \"sk\",\n          composite: [\"buildingId\", \"storeId\"],\n        },\n      },\n      units: {\n        index: \"gsi1pk-gsi1sk-index\",\n        pk: {\n          field: \"gsi1pk\",\n          composite: [\"mallId\"],\n        },\n        sk: {\n          field: \"gsi1sk\",\n          composite: [\"buildingId\", \"unitId\"],\n        },\n      },\n      leases: {\n        index: \"gsi2pk-gsi2sk-index\",\n        pk: {\n          field: \"gsi2pk\",\n          composite: [\"storeId\"],\n        },\n        sk: {\n          field: \"gsi2sk\",\n          composite: [\"leaseEndDate\"],\n        },\n      },\n    },\n  },\n  { table, client },\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Unique Constraint in ElectroDB Transaction with TypeScript\nDESCRIPTION: This function demonstrates how to implement a unique constraint mechanism using ElectroDB transactions. It creates a new agent while ensuring the email remains unique across the service.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/transact-write.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CreateEntityItem } from \"electrodb\";\n\ntype NewAgent = CreateEntityItem<typeof agent>;\n\nasync function createNewAgent(newAgent: NewAgent) {\n  return mi6.transaction\n    .write(({ agent, constraint }) => [\n      agent.create(newAgent).commit({ response: \"all_old\" }),\n      constraint\n        .create({\n          name: \"email\",\n          value: newAgent.email,\n          entity: agent.schema.model.entity,\n        })\n        .commit(),\n    ])\n    .go();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Issues Entity with ElectroDB in TypeScript\nDESCRIPTION: Defines an Issues entity for a version control system using ElectroDB. It includes attributes like issue number, repository details, status tracking, and content. The entity has multiple access patterns defined through indexes for different query scenarios.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/examples/version-control.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity } from \"electrodb\";\nimport moment from \"moment\";\nimport {\n  TicketTypes,\n  IssueTicket,\n  StatusTypes,\n  toStatusString,\n  toStatusCode,\n} from \"./types\";\n\nexport const issues = new Entity({\n  model: {\n    entity: \"issues\",\n    service: \"versioncontrol\",\n    version: \"1\",\n  },\n  attributes: {\n    issueNumber: {\n      type: \"string\",\n    },\n    repoName: {\n      type: \"string\",\n    },\n    repoOwner: {\n      type: \"string\",\n    },\n    username: {\n      type: \"string\",\n    },\n    ticketType: {\n      type: TicketTypes,\n      set: () => IssueTicket,\n      readOnly: true,\n    },\n    ticketNumber: {\n      type: \"string\",\n      readOnly: true,\n      watch: [\"issueNumber\"],\n      set: (_, { issueNumber }) => issueNumber,\n    },\n    status: {\n      type: StatusTypes,\n      default: \"Open\",\n      set: (val) => toStatusCode(val),\n      get: (val) => toStatusString(val),\n    },\n    subject: {\n      type: \"string\",\n    },\n    body: {\n      type: \"string\",\n    },\n    createdAt: {\n      type: \"string\",\n      set: () => moment.utc().format(),\n      readOnly: true,\n    },\n    updatedAt: {\n      type: \"string\",\n      watch: \"*\",\n      set: () => moment.utc().format(),\n      readOnly: true,\n    },\n  },\n  indexes: {\n    issue: {\n      collection: \"issueReview\",\n      pk: {\n        composite: [\"repoOwner\", \"repoName\", \"issueNumber\"],\n        field: \"pk\",\n      },\n      sk: {\n        composite: [],\n        field: \"sk\",\n      },\n    },\n    created: {\n      collection: [\"owned\", \"managed\"],\n      index: \"gsi1pk-gsi1sk-index\",\n      pk: {\n        field: \"gsi1pk\",\n        composite: [\"username\"],\n      },\n      sk: {\n        field: \"gsi1sk\",\n        composite: [\"status\", \"createdAt\"],\n      },\n    },\n    todos: {\n      collection: \"activity\",\n      index: \"gsi2pk-gsi2sk-index\",\n      pk: {\n        composite: [\"repoOwner\", \"repoName\"],\n        field: \"gsi2pk\",\n      },\n      sk: {\n        composite: [\"status\", \"createdAt\"],\n        field: \"gsi2sk\",\n      },\n    },\n    _: {\n      collection: \"subscribers\",\n      index: \"gsi4pk-gsi4sk-index\",\n      pk: {\n        composite: [\"repoOwner\", \"repoName\", \"ticketNumber\"],\n        field: \"gsi4pk\",\n      },\n      sk: {\n        composite: [],\n        field: \"gsi4sk\",\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Virtual Attributes with Watch Property in ElectroDB\nDESCRIPTION: This code defines an ElectroDB entity with a virtual attribute 'displayPrice' that watches the 'price' attribute. The 'displayPrice' uses a getter to format the price with a dollar sign, and uses a setter that returns undefined to ensure it's never persisted to DynamoDB.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/recipes/virtual-attribute.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  model: {\n    entity: \"services\",\n    service: \"costEstimator\",\n    version: \"1\"\n  },\n  attributes: {\n    service: {\n      type: \"string\"\n    },\n    price: {\n      type: \"number\",\n      required: true\n    },\n    displayPrice: {\n      type: \"string\",\n      watch: [\"price\"],\n      get: (_, {price}) => {\n        return \"$\" + price;\n      },\n      set: () => undefined\n    }\n  },\n  indexes: {\n    pricing: {\n      pk: {\n        field: \"pk\",\n        composite: [\"service\"]\n      },\n      sk: {\n        field: \"sk\",\n        composite: []\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Author Entity in TypeScript with ElectroDB\nDESCRIPTION: This code snippet defines the 'author' entity using ElectroDB. It includes attributes like first name, last name, birthday, and bio. The entity has two indexes: 'writer' for querying by last name and first name, and 'info' for associating works with the author.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/examples/library-system.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst author = new Entity(\n  {\n    model: {\n      entity: \"author\",\n      version: \"1\",\n      service: \"library\",\n    },\n    attributes: {\n      authorFirstName: {\n        type: \"string\",\n        required: true,\n      },\n      authorLastName: {\n        type: \"string\",\n        required: true,\n      },\n      birthday: {\n        type: \"string\",\n      },\n      bio: {\n        type: \"string\",\n        required: true,\n      },\n    },\n    indexes: {\n      writer: {\n        pk: {\n          field: \"pk\",\n          composite: [\"authorLastName\"],\n        },\n        sk: {\n          field: \"sk\",\n          composite: [\"authorFirstName\", \"birthday\"],\n        },\n      },\n      info: {\n        collection: [\"works\"],\n        index: \"gsi2pk-gsi2sk-index\",\n        pk: {\n          field: \"gsi2pk\",\n          composite: [\"authorLastName\", \"authorFirstName\"],\n        },\n        sk: {\n          field: \"gsi2sk\",\n          composite: [],\n        },\n      },\n    },\n  },\n  { table },\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Genre Entity in TypeScript with ElectroDB\nDESCRIPTION: This code snippet defines the 'genre' entity using ElectroDB. It includes attributes for genre, subgenre, and book information. The entity has multiple indexes for querying by book, categories, author, and title.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/examples/library-system.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst genre = new Entity(\n  {\n    model: {\n      entity: \"genre\",\n      version: \"1\",\n      service: \"library\",\n    },\n    attributes: {\n      genre: {\n        type: \"string\",\n        required: true,\n      },\n      isbn: {\n        type: \"string\",\n      },\n      bookTitle: {\n        type: \"string\",\n      },\n      authorFirstName: {\n        type: \"string\",\n        required: true,\n      },\n      authorLastName: {\n        type: \"string\",\n        required: true,\n      },\n      subgenre: {\n        type: \"string\",\n      },\n    },\n    indexes: {\n      book: {\n        collection: [\"detail\"],\n        pk: {\n          field: \"pk\",\n          composite: [\"isbn\"],\n        },\n        sk: {\n          field: \"sk\",\n          composite: [\"genre\", \"subgenre\"],\n        },\n      },\n      categories: {\n        index: \"gsi1pk-gsi1sk-index\",\n        pk: {\n          field: \"gsi1pk\",\n          composite: [\"genre\"],\n        },\n        sk: {\n          field: \"gsi1sk\",\n          composite: [\"subgenre\"],\n        },\n      },\n      author: {\n        collection: [\"works\"],\n        index: \"gsi2pk-gsi2sk-index\",\n        pk: {\n          field: \"gsi2pk\",\n          composite: [\"authorLastName\", \"authorFirstName\"],\n        },\n        sk: {\n          field: \"gsi2sk\",\n          composite: [\"genre\"],\n        },\n      },\n      title: {\n        collection: [\"titles\"],\n        index: \"gsi3pk-gsi3sk-index\",\n        pk: {\n          field: \"gsi3pk\",\n          composite: [\"bookTitle\"],\n        },\n        sk: {\n          field: \"gsi13sk\",\n          composite: [\"genre\", \"subgenre\"],\n        },\n      },\n    },\n  },\n  { table },\n);\n```\n\n----------------------------------------\n\nTITLE: Querying Author Details, Books, and Genres in TypeScript with ElectroDB\nDESCRIPTION: This code snippet shows how to retrieve author details, books, and genres by the author's full name using the ElectroDB collections API. It then structures the returned data into a custom object.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/examples/library-system.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nawait library.collections\n  .works({ authorLastName: \"king\", authorFirstName: \"stephen\" })\n  .go()\n  .then((works) => {\n    const [writer] = works.data.author;\n    const books = works.data.book;\n    const genres = works.data.genre;\n    return {\n      writer,\n      books,\n      genres,\n    };\n  });\n```\n\n----------------------------------------\n\nTITLE: Creating ElectroDB Service for Version Control System\nDESCRIPTION: This snippet creates an ElectroDB Service that combines multiple entities (users, issues, repositories, pullRequests, subscriptions, issueComments, and pullRequestComments) into a single service for the version control system.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/examples/version-control.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport const table = \"electro\";\n\nexport const store = new Service(\n  {\n    users,\n    issues,\n    repositories,\n    pullRequests,\n    subscriptions,\n    issueComments,\n    pullRequestComments,\n  },\n  { table },\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Task Entity Schema in TypeScript with ElectroDB\nDESCRIPTION: Defines the Task entity with project and employee associations, status tracking, and multiple indexes for different query patterns.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/examples/task-manager.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, EntityItem, QueryResponse, CreateEntityItem } from \"electrodb\";\nimport { table, client } from \"../config\";\n\nexport const task = new Entity({\n  model: {\n    entity: \"task\",\n    version: \"1\",\n    service: \"taskmanager\"\n  },\n  attributes: {\n    task: {\n      type: \"string\",\n      required: true\n    },\n    project: {\n      type: \"string\",\n      required: true\n    },\n    employee: {\n      type: \"string\",\n      required: true\n    },\n    description: {\n      type: \"string\"\n    },\n    status: {\n      type: [\"open\", \"in-progress\", \"closed\"] as const,\n      default: \"open\"\n    },\n    points: {\n      type: \"number\",\n      required: true\n    },\n    comments: {\n      type: \"any\"\n    }\n  },\n  indexes: {\n    task: {\n      pk: {\n        field: \"pk\",\n        composite: [\"task\"]\n      },\n      sk: {\n        field: \"sk\",\n        composite: [\"project\", \"employee\"]\n      }\n    },\n    project: {\n      index: \"gsi1pk-gsi1sk-index\",\n      pk: {\n        field: \"gsi1pk\",\n        composite: [\"project\"]\n      },\n      sk: {\n        field: \"gsi1sk\",\n        composite: [\"employee\", \"status\"]\n      }\n    },\n    assigned: {\n      collection: \"assignments\",\n      index: \"gsi3pk-gsi3sk-index\",\n      pk: {\n        field: \"gsi3pk\",\n        composite: [\"employee\"]\n      },\n      sk: {\n        field: \"gsi3sk\",\n        composite: [\"project\", \"status\"]\n      }\n    },\n    statuses: {\n      index: \"gsi4pk-gsi4sk-index\",\n      pk: {\n        field: \"gsi4pk\",\n        composite: [\"status\"]\n      },\n      sk: {\n        field: \"gsi4sk\",\n        composite: [\"project\", \"employee\"]\n      }\n    }\n  }\n}, { table, client });\n```\n\n----------------------------------------\n\nTITLE: Dynamic Filtering with ElectroDB\nDESCRIPTION: Example showing how to implement dynamic filtering based on input parameters for querying animals by keepers.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/queries/filters.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype GetAnimalOptions = {\n  habitat: string;\n  keepers: string[];\n};\n\nfunction getAnimals(options: GetAnimalOptions) {\n  const { habitat, keepers } = options;\n  return animals.query.exhibit({ habitat })\n  .where(({ keeper }, { eq }) => {\n    return keepers.map((name) => eq(keeper, name)).join(' AND ');\n  }).go()\n}\n\nconst { data, cursor } = await getAnimals({\n  habitat: \"RainForest\",\n  keepers: [\"Joe Exotic\", \"Carol Baskin\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Entities and Service for DynamoDB Collections\nDESCRIPTION: Sets up Employee and Task entities with their respective attributes and indexes, then combines them into a TaskApp service. Includes collection configuration for cross-entity querying.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/queries/collection.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst DynamoDB = require(\"aws-sdk/clients/dynamodb\");\nconst table = \"projectmanagement\";\nconst client = new DynamoDB.DocumentClient();\n\nconst employees = new Entity(\n  {\n    model: {\n      entity: \"employees\",\n      version: \"1\",\n      service: \"taskapp\",\n    },\n    attributes: {\n      employeeId: {\n        type: \"string\",\n      },\n      organizationId: {\n        type: \"string\",\n      },\n      name: {\n        type: \"string\",\n      },\n      team: {\n        type: [\"jupiter\", \"mercury\", \"saturn\"],\n      },\n    },\n    indexes: {\n      staff: {\n        pk: {\n          field: \"pk\",\n          composite: [\"organizationId\"],\n        },\n        sk: {\n          field: \"sk\",\n          composite: [\"employeeId\"],\n        },\n      },\n      employee: {\n        collection: \"assignments\",\n        index: \"gsi2\",\n        pk: {\n          field: \"gsi2pk\",\n          composite: [\"employeeId\"],\n        },\n        sk: {\n          field: \"gsi2sk\",\n          composite: [],\n        },\n      },\n    },\n  },\n  { client, table },\n);\n\nconst tasks = new Entity(\n  {\n    model: {\n      entity: \"tasks\",\n      version: \"1\",\n      service: \"taskapp\",\n    },\n    attributes: {\n      taskId: {\n        type: \"string\",\n      },\n      employeeId: {\n        type: \"string\",\n      },\n      projectId: {\n        type: \"string\",\n      },\n      title: {\n        type: \"string\",\n      },\n      body: {\n        type: \"string\",\n      },\n    },\n    indexes: {\n      project: {\n        pk: {\n          field: \"pk\",\n          composite: [\"projectId\"],\n        },\n        sk: {\n          field: \"sk\",\n          composite: [\"taskId\"],\n        },\n      },\n      assigned: {\n        collection: \"assignments\",\n        index: \"gsi2\",\n        pk: {\n          field: \"gsi2pk\",\n          composite: [\"employeeId\"],\n        },\n        sk: {\n          field: \"gsi2sk\",\n          composite: [],\n        },\n      },\n    },\n  },\n  { client, table },\n);\n\nconst TaskApp = new Service({ employees, tasks });\n```\n\n----------------------------------------\n\nTITLE: Defining Organization Entity in TypeScript\nDESCRIPTION: This code defines an Organization entity using ElectroDB, including attributes and indexes. It demonstrates the use of read-only and composite attributes in index definitions.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/update.mdx#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity } from \"electrodb\";\n\nconst table = \"electro\";\n\nconst Organization = new Entity(\n  {\n    model: {\n      entity: \"organization\",\n      service: \"app\",\n      version: \"1\",\n    },\n    attributes: {\n      id: {\n        type: \"string\",\n      },\n      name: {\n        type: \"string\",\n        required: true,\n      },\n      description: {\n        type: \"string\",\n      },\n      deleted: {\n        type: \"boolean\",\n        required: true,\n        default: false,\n      },\n      createdAt: {\n        type: \"string\",\n        readOnly: true,\n        required: true,\n        set: () => new Date().toISOString(),\n        default: () => new Date().toISOString(),\n      },\n    },\n    indexes: {\n      record: {\n        pk: {\n          field: \"pk\",\n          composite: [\"id\"],\n        },\n        sk: {\n          field: \"sk\",\n          composite: [],\n        },\n      },\n      all: {\n        index: \"gsi1pk-gsi1sk-index\",\n        pk: {\n          field: \"gsi1pk\",\n          composite: [],\n        },\n        sk: {\n          field: \"gsi1sk\",\n          composite: [\"deleted\", \"createdAt\"], // SK has both readonly and mutable attributes\n        },\n      },\n    },\n  },\n  { table },\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Timestamps in ElectroDB Entity Model\nDESCRIPTION: Configuration for an ElectroDB entity model that implements automatic timestamp management. The model includes createdAt timestamps that are set once and cannot be modified, and updatedAt timestamps that automatically update when any attribute changes. Both fields are required and have default values.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/recipes/created-at-updated-at.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  model: {\n    entity: \"transaction\",\n    service: \"bank\",\n    version: \"1\"\n  },\n  attributes: {\n    accountNumber: {\n      type: \"string\"\n    },\n    transactionId: {\n      type: \"string\"\n    },\n    description: {\n      type: \"string\",\n    },\n    createdAt: {\n      type: \"number\",\n      readOnly: true,\n      required: true,\n      default: () => Date.now(),\n      set: () => Date.now(),\n    },\n    updatedAt: {\n      type: \"number\",\n      watch: \"*\",\n      required: true,\n      default: () => Date.now(),\n      set: () => Date.now(),\n    }\n  },\n  indexes: {\n    transactions: {\n      pk: {\n        field: \"pk\",\n        composite: [\"accountNumber\"]\n      },\n      sk: {\n        field: \"sk\",\n        composite: [\"transactionId\"]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Entity Definitions with Sub-Collections\nDESCRIPTION: Complete entity definitions showcasing sub-collections implementation for employees, tasks, and project members.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/modeling/collections.mdx#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity } from \"electrodb\";\n\nconst employees = new Entity({\n  model: {\n    entity: \"employees\",\n    version: \"1\",\n    service: \"taskapp\",\n  },\n  attributes: {\n    employeeId: {\n      type: \"string\",\n    },\n    organizationId: {\n      type: \"string\",\n    },\n    name: {\n      type: \"string\",\n    },\n    team: {\n      type: [\"jupiter\", \"mercury\", \"saturn\"] as const,\n    },\n  },\n  indexes: {\n    staff: {\n      pk: {\n        field: \"pk\",\n        composite: [\"organizationId\"],\n      },\n      sk: {\n        field: \"sk\",\n        composite: [\"employeeId\"],\n      },\n    },\n    employee: {\n      collection: \"contributions\",\n      index: \"gsi2\",\n      pk: {\n        field: \"gsi2pk\",\n        composite: [\"employeeId\"],\n      },\n      sk: {\n        field: \"gsi2sk\",\n        composite: [],\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Book Record with ElectroDB\nDESCRIPTION: Example of creating a new book record using the Book entity.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/core-concepts/quick-start.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nawait Book.create({\n  bookId: \"beedabe8-e34e-4d41-9272-0755be9a2a9f\",\n  storeId: \"pdx-45\",\n  author: \"Stephen King\",\n  title: \"IT\",\n  condition: \"GOOD\",\n  price: 15,\n  genre: [\"HORROR\", \"THRILLER\"],\n  published: \"1986-09-15\",\n}).go();\n```\n\n----------------------------------------\n\nTITLE: Patching a Task Item with ElectroDB\nDESCRIPTION: This snippet demonstrates how to use the patch method to update a task item, setting its status, adding points, and appending a comment. It also includes a condition to only update if the current status is 'in-progress'.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/patch.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntasks\n  .patch({\n    team: \"core\",\n    task: \"45-662\",\n    project: \"backend\",\n  })\n  .set({ status: \"open\" })\n  .add({ points: 5 })\n  .append({\n    comments: [\n      {\n        user: \"janet\",\n        body: \"This seems half-baked.\",\n      },\n    ],\n  })\n  .where(({ status }, { eq }) => eq(status, \"in-progress\"))\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Advanced Upsert with Chained Operations in ElectroDB\nDESCRIPTION: An example of using upsert with additional chained operations including add, subtract, ifNotExists, and append. This demonstrates how to perform complex data manipulations in a single operation.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/upsert.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nawait StoreLocations.upsert({\n  cityId: \"Atlanta1\",\n  storeId: \"LatteLarrys\",\n  mallId: \"EastPointe\",\n  buildingId: \"BuildingA1\",\n  unitId: \"B47\",\n  category: \"food/coffee\",\n  leaseEndDate: \"2020-03-22\",\n  rent: \"4500.00\",\n})\n  .add({ deposit: 100, tenants: [\"Larry David\"] })\n  .ifNotExists({ warnings: 0 })\n  .subtract({ petFee: 250 })\n  .append({\n    rentalAgreement: [\n      {\n        type: \"amendment\",\n        detail: \"Larry David accepts coffee liability\",\n      },\n    ],\n  })\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Defining Access Patterns for Entities in ElectroDB with Collection Naming\nDESCRIPTION: This TypeScript snippet demonstrates how to define access patterns for three entities (employees, tasks, and projectMembers) with appropriate collection naming conventions. It shows the use of sub-collections, where multiple entities share the same GSI and partition key pattern but represent different logical groupings.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/modeling/collections.mdx#2025-04-21_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\n// employees entity\nemployee: {\n  collection: \"contributions\",\n  index: \"gsi2\",\n  pk: {\n    field: \"gsi2pk\",\n    composite: [\"employeeId\"],\n  },\n  sk: {\n    field: \"gsi2sk\",\n    composite: [],\n  },\n}\n\n// tasks entity\nassigned: {\n  collection: [\"contributions\", \"assignments\"] as const,\n  index: \"gsi2\",\n  pk: {\n    field: \"gsi2pk\",\n    composite: [\"employeeId\"],\n  },\n  sk: {\n    field: \"gsi2sk\",\n    composite: [\"projectId\"],\n  },\n}\n\n// projectMembers entity\nprojects: {\n  collection: [\"contributions\", \"assignments\"] as const,\n  index: \"gsi2\",\n  pk: {\n    field: \"gsi2pk\",\n    composite: [\"employeeId\"],\n  },\n  sk: {\n    field: \"gsi2sk\",\n    composite: [],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Params Query in ElectroDB with TypeScript\nDESCRIPTION: Example showing how to construct and execute a query using the params() method in ElectroDB. The query filters mall store leases based on date range and rent criteria.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/core-concepts/executing-queries.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst params = MallStores.query\n  .leases({ mallId })\n  .between({ leaseEndDate: \"2020-06-01\" }, { leaseEndDate: \"2020-07-31\" })\n  .where(({ rent }, { lte }) => lte(rent, \"5000.00\"))\n  .params();\n```\n\n----------------------------------------\n\nTITLE: Creating ElectroDB Service for Employee Management\nDESCRIPTION: Combines Employee, Task, and Office entities into a unified service with DynamoDB configuration.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/examples/human-resources.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst DynamoDB = require(\"aws-sdk/clients/dynamodb\");\nconst client = new DynamoDB.DocumentClient({ region: \"us-east-1\" });\nconst { Service } = require(\"electrodb\");\nconst table = \"projectmanagement\";\n\nconst EmployeeApp = new Service(\n  {\n    employees: Employee,\n    tasks: Task,\n    offices: Office,\n  },\n  { client, table },\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Office Entity in ElectroDB\nDESCRIPTION: Creates an Office entity to manage physical office locations with address details. Includes indexes for location-based queries and workplace collections.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/examples/human-resources.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity } from \"electrodb\";\n\nconst Office = new Entity({\n  model: {\n    entity: \"office\",\n    version: \"1\",\n    service: \"taskapp\",\n  },\n  attributes: {\n    office: {\n      type: \"string\",\n    },\n    country: {\n      type: \"string\",\n    },\n    state: {\n      type: \"string\",\n    },\n    city: {\n      type: \"string\",\n    },\n    zip: {\n      type: \"string\",\n    },\n    address: {\n      type: \"string\",\n    },\n  },\n  indexes: {\n    locations: {\n      pk: {\n        field: \"pk\",\n        composite: [\"country\", \"state\"],\n      },\n      sk: {\n        field: \"sk\",\n        composite: [\"city\", \"zip\", \"office\"],\n      },\n    },\n    office: {\n      index: \"gsi1pk-gsi1sk-index\",\n      collection: \"workplaces\",\n      pk: {\n        field: \"gsi1pk\",\n        composite: [\"office\"],\n      },\n      sk: {\n        field: \"gsi1sk\",\n        composite: [],\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Performing Put Operation with Conditional Expression in ElectroDB\nDESCRIPTION: This snippet demonstrates how to use the put() method in ElectroDB to create a new record with a conditional expression. It includes all required attributes and uses a where clause to add a condition.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/put.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait StoreLocations.put({\n  cityId: \"Atlanta1\",\n  storeId: \"LatteLarrys\",\n  mallId: \"EastPointe\",\n  buildingId: \"BuildingA1\",\n  unitId: \"B47\",\n  category: \"food/coffee\",\n  leaseEndDate: \"2020-03-22\",\n  rent: \"4500.00\",\n})\n  .where((attr, op) => op.eq(attr.rent, \"4500.00\"))\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Parsing DocumentClient Responses with ElectroDB in TypeScript\nDESCRIPTION: Demonstrates basic usage of the parse() method to convert DocumentClient results from get, query, and update operations into typed ElectroDB entities. The parse method applies formatting and returns properly typed objects.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/reference/parse.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst myEntity = new Entity({...});\nconst getResults = await docClient.get({...}).promise();\nconst queryResults = await docClient.query({...}).promise();\nconst updateResults = await docClient.update({...}).promise();\nconst formattedGetResults = myEntity.parse(getResults);\nconst formattedQueryResults = myEntity.parse(formattedQueryResults);\n```\n\n----------------------------------------\n\nTITLE: Defining Users Entity in ElectroDB\nDESCRIPTION: This snippet defines the 'users' entity using ElectroDB. It includes attributes for user profile information, following/followers, and timestamps. The entity also defines indexes for querying user data and related collections.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/examples/version-control.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport const users = new Entity({\n  model: {\n    entity: \"user\",\n    service: \"versioncontrol\",\n    version: \"1\",\n  },\n  attributes: {\n    username: {\n      type: \"string\",\n    },\n    fullName: {\n      type: \"string\",\n    },\n    photo: {\n      type: \"string\",\n    },\n    bio: {\n      type: \"string\",\n    },\n    location: {\n      type: \"string\",\n    },\n    pinned: {\n      type: \"any\",\n    },\n    following: {\n      type: \"set\",\n      items: \"string\",\n    },\n    followers: {\n      type: \"set\",\n      items: \"string\",\n    },\n    createdAt: {\n      type: \"string\",\n      set: () => moment.utc().format(),\n      readOnly: true,\n    },\n    updatedAt: {\n      type: \"string\",\n      watch: \"*\",\n      set: () => moment.utc().format(),\n      readOnly: true,\n    },\n  },\n  indexes: {\n    user: {\n      collection: \"overview\",\n      pk: {\n        composite: [\"username\"],\n        field: \"pk\",\n      },\n      sk: {\n        composite: [],\n        field: \"sk\",\n      },\n    },\n    _: {\n      collection: \"owned\",\n      index: \"gsi1pk-gsi1sk-index\",\n      pk: {\n        composite: [\"username\"],\n        field: \"gsi1pk\",\n      },\n      sk: {\n        field: \"gsi1sk\",\n        composite: [],\n      },\n    },\n    subscriptions: {\n      collection: \"watching\",\n      index: \"gsi3pk-gsi3sk-index\",\n      pk: {\n        composite: [\"username\"],\n        field: \"gsi3pk\",\n      },\n      sk: {\n        composite: [],\n        field: \"gsi3sk\",\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Constraint Entity in ElectroDB with TypeScript\nDESCRIPTION: This code defines a 'constraint' entity in ElectroDB to enforce uniqueness for properties within the MI6 service. It includes attributes for name, value, and entity, with indexes for value and name.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/transact-write.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst constraint = new Entity(\n  {\n    model: {\n      entity: \"constraint\",\n      version: \"1\",\n      service: \"MI6\",\n    },\n    attributes: {\n      name: {\n        type: \"string\",\n        required: true,\n      },\n      value: {\n        type: \"string\",\n        required: true,\n      },\n      entity: {\n        type: \"string\",\n        required: true,\n      },\n    },\n    indexes: {\n      value: {\n        pk: {\n          field: \"pk\",\n          composite: [\"value\"],\n        },\n        sk: {\n          field: \"sk\",\n          composite: [\"name\", \"entity\"],\n        },\n      },\n      name: {\n        index: \"gsi1pk-gsi2sk-index\",\n        pk: {\n          field: \"gsi1pk\",\n          composite: [\"name\", \"entity\"],\n        },\n        sk: {\n          field: \"gsi1sk\",\n          composite: [\"value\"],\n        },\n      },\n    },\n  },\n  { table, client }\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Map Attributes in ElectroDB\nDESCRIPTION: Shows how to define map attributes in ElectroDB, which leverage DynamoDB's native support for object-like structures. Map attributes can contain nested attributes of various types.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/modeling/attributes.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nattributes: {\n  myMapAttribute: {\n    type: \"map\",\n    properties: {\n      myStringAttribute: {\n        type: \"string\"\n      },\n      myNumberAttribute: {\n        type: \"number\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Employee Entity with Collections in ElectroDB\nDESCRIPTION: This snippet shows how to create an Employee entity with a collection named 'assignments' on a GSI2 index. The entity defines attributes and indexes needed for collection relationships.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/modeling/collections.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity } from \"electrodb\";\n\nexport const Employee = new Entity({\n  model: {\n    entity: \"employee\",\n    version: \"1\",\n    service: \"taskapp\",\n  },\n  attributes: {\n    employeeId: {\n      type: \"string\",\n    },\n    organizationId: {\n      type: \"string\",\n    },\n    name: {\n      type: \"string\",\n    },\n    team: {\n      type: [\"jupiter\", \"mercury\", \"saturn\"] as const,\n    },\n  },\n  indexes: {\n    staff: {\n      pk: {\n        field: \"pk\",\n        composite: [\"organizationId\"],\n      },\n      sk: {\n        field: \"sk\",\n        composite: [\"employeeId\"],\n      },\n    },\n    employee: {\n      collection: \"assignments\",\n      index: \"gsi2\",\n      pk: {\n        field: \"gsi2pk\",\n        composite: [\"employeeId\"],\n      },\n      sk: {\n        field: \"gsi2sk\",\n        composite: [],\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Performing Get Transactions with ElectroDB Service\nDESCRIPTION: Example showing how to perform get transactions using ElectroDB Service. The transaction.get() method accepts a callback function that returns an array of queries using the commit() method instead of go() or params().\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/queries/transact-get.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait yourService.transaction\n  .get(({ entity1, entity2 }) => [\n    entity1.get({ prop1: \"value1\", prop2: \"value2\" }).commit(),\n    entity2.get({ prop1: \"value2\", prop2: \"value3\" }).commit(),\n  ])\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Implementing Idempotent Agent Kills Counter with DynamoDB Transaction\nDESCRIPTION: Function that demonstrates how to increment an agent's kill count using DynamoDB transactions with ClientRequestToken to ensure idempotency. The function accepts an agent's ID, designation, kills count, and a token for idempotency control.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/transact-write.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype IncrementAgentKillsOptions = {\n  id: string;\n  kills: number;\n  token: string;\n  designation: string;\n};\n\nasync function incrementAgentKills(options: IncrementAgentKillsOptions) {\n  const { id, designation, kills, token } = options;\n\n  return mi6.transaction\n    .write(({ agent }) => [\n      agent.patch({ id, designation }).add({ kills }).commit(),\n    ])\n    .go({ token });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PullRequests Entity with ElectroDB in TypeScript\nDESCRIPTION: Defines a PullRequests entity for tracking pull requests in a version control system. It includes attributes for pull request details, status tracking, reviewer management, and timestamps, with multiple access patterns through indexes.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/examples/version-control.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity } from \"electrodb\";\nimport moment from \"moment\";\nimport {\n  NotYetViewed,\n  TicketTypes,\n  PullRequestTicket,\n  StatusTypes,\n  toStatusString,\n  toStatusCode,\n} from \"./types\";\n\nexport const pullRequests = new Entity({\n  model: {\n    entity: \"pullRequest\",\n    service: \"versioncontrol\",\n    version: \"1\",\n  },\n  attributes: {\n    pullRequestNumber: {\n      type: \"string\",\n      required: true,\n    },\n    repoName: {\n      type: \"string\",\n      required: true,\n    },\n    repoOwner: {\n      type: \"string\",\n      required: true,\n    },\n    username: {\n      type: \"string\",\n      required: true,\n    },\n    ticketType: {\n      type: TicketTypes,\n      default: () => PullRequestTicket,\n      set: () => PullRequestTicket,\n      readOnly: true,\n    },\n    ticketNumber: {\n      type: \"string\",\n      readOnly: true,\n      watch: [\"pullRequestNumber\"],\n      set: (_, { issueNumber }) => issueNumber,\n    },\n    status: {\n      type: StatusTypes,\n      default: \"Open\",\n      set: (val) => toStatusCode(val),\n      get: (val) => toStatusString(val),\n    },\n    reviewers: {\n      type: \"list\",\n      items: {\n        type: \"map\",\n        properties: {\n          username: {\n            type: \"string\",\n            required: true,\n          },\n          approved: {\n            type: \"boolean\",\n            required: true,\n          },\n          createdAt: {\n            type: \"string\",\n            default: () => moment.utc().format(),\n            readOnly: true,\n          },\n        },\n      },\n    },\n    createdAt: {\n      type: \"string\",\n      set: () => moment.utc().format(),\n      readOnly: true,\n    },\n    updatedAt: {\n      type: \"string\",\n      watch: \"*\",\n      set: () => moment.utc().format(),\n      readOnly: true,\n    },\n  },\n  indexes: {\n    pullRequest: {\n      collection: \"PRReview\",\n      pk: {\n        composite: [\"repoOwner\", \"repoName\", \"pullRequestNumber\"],\n        field: \"pk\",\n      },\n      sk: {\n        composite: [],\n        field: \"sk\",\n      },\n    },\n    created: {\n      collection: [\"owned\", \"managed\"],\n      index: \"gsi1pk-gsi1sk-index\",\n      pk: {\n        field: \"gsi1pk\",\n        composite: [\"username\"],\n      },\n      sk: {\n        field: \"gsi1sk\",\n        composite: [\"status\", \"createdAt\"],\n      },\n    },\n    enhancements: {\n      collection: \"activity\",\n      index: \"gsi2pk-gsi2sk-index\",\n      pk: {\n        field: \"gsi2pk\",\n        composite: [\"repoOwner\", \"repoName\"],\n      },\n      sk: {\n        field: \"gsi2sk\",\n        composite: [\"status\", \"createdAt\"],\n      },\n    },\n    _: {\n      collection: \"subscribers\",\n      index: \"gsi4pk-gsi4sk-index\",\n      pk: {\n        composite: [\"repoOwner\", \"repoName\", \"ticketNumber\"],\n        field: \"gsi4pk\",\n      },\n      sk: {\n        composite: [],\n        field: \"gsi4sk\",\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Multiple Where Clauses in ElectroDB\nDESCRIPTION: Shows how to chain multiple where clauses with implicit AND operations, including both the query implementation and resulting DynamoDB query structure.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/queries/filters.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nlet MallStores = new Entity(model, { table: \"StoreDirectory\" });\nlet stores = await MallStores.query\n  .leases({ mallId: \"EastPointe\" })\n  .between({ leaseEndDate: \"2020-04-01\" }, { leaseEndDate: \"2020-07-01\" })\n  .where(\n    ({ rent, discount }, { between, eq }) => `\n\t\t${between(rent, \"2000.00\", \"5000.00\")} AND ${eq(discount, \"1000.00\")}\n\t`,\n  )\n  .where(\n    ({ category }, { eq }) => `\n\t\t${eq(category, \"food/coffee\")}\n\t`,\n  )\n  .go();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"TableName\": \"StoreDirectory\",\n  \"ExpressionAttributeNames\": {\n    \"#rent\": \"rent\",\n    \"#discount\": \"discount\",\n    \"#category\": \"category\",\n    \"#pk\": \"idx2pk\",\n    \"#sk1\": \"idx2sk\"\n  },\n  \"ExpressionAttributeValues\": {\n    \":rent1\": \"2000.00\",\n    \":rent2\": \"5000.00\",\n    \":discount1\": \"1000.00\",\n    \":category1\": \"food/coffee\",\n    \":pk\": \"$mallstoredirectory_1#mallid_eastpointe\",\n    \":sk1\": \"$mallstore#leaseenddate_2020-04-01#storeid_\",\n    \":sk2\": \"$mallstore#leaseenddate_2020-07-01#storeid_\"\n  },\n  \"KeyConditionExpression\": \"#pk = :pk and #sk1 BETWEEN :sk1 AND :sk2\",\n  \"IndexName\": \"idx2\",\n  \"FilterExpression\": \"(#rent between :rent1 and :rent2) AND (#discount = :discount1 AND #category = :category1)\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Mall Store Leases with ElectroDB\nDESCRIPTION: Demonstrates querying mall store leases using ElectroDB's query builder. Filters leases by mall ID, lease end date range, and maximum rent amount.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/core-concepts/executing-queries.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst results = await MallStores.query\n  .leases({ mallId })\n  .between({ leaseEndDate: \"2020-06-01\" }, { leaseEndDate: \"2020-07-31\" })\n  .where(({ rent }, { lte }) => lte(rent, \"5000.00\"))\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Equivalent DynamoDB Parameters for ElectroDB Create Operation\nDESCRIPTION: Shows the actual DynamoDB parameters that ElectroDB generates for a create operation. Includes the Item to be created, TableName, ConditionExpression to ensure the item doesn't already exist, and expression attribute names and values.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/create.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Item\": {\n    \"cityId\": \"Atlanta1\",\n    \"mallId\": \"EastPointe\",\n    \"storeId\": \"LatteLarrys\",\n    \"buildingId\": \"BuildingA1\",\n    \"unitId\": \"B47\",\n    \"category\": \"food/coffee\",\n    \"leaseEndDate\": \"2020-03-22\",\n    \"rent\": \"4500.00\",\n    \"discount\": \"0.00\",\n    \"pk\": \"$mallstoredirectory#cityid_atlanta1#mallid_eastpointe\",\n    \"sk\": \"$mallstore_1#buildingid_buildinga1#storeid_lattelarrys\",\n    \"gsi1pk\": \"$mallstoredirectory#mallid_eastpointe\",\n    \"gsi1sk\": \"$mallstore_1#buildingid_buildinga1#unitid_b47\",\n    \"gsi2pk\": \"$mallstoredirectory#storeid_lattelarrys\",\n    \"gsi2sk\": \"$mallstore_1#leaseenddate_2020-03-22\",\n    \"__edb_e__\": \"MallStore\",\n    \"__edb_v__\": \"1\"\n  },\n  \"TableName\": \"StoreDirectory\",\n  \"ConditionExpression\": \"attribute_not_exists(pk) AND attribute_not_exists(sk) AND #rent = :rent_w1\",\n  \"ExpressionAttributeNames\": {\n    \"#rent\": \"rent\"\n  },\n  \"ExpressionAttributeValues\": {\n    \":rent_w1\": \"4500.00\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining List Attributes in ElectroDB\nDESCRIPTION: Demonstrates how to define list attributes in ElectroDB, which model array-like structures using DynamoDB's List type. List attributes can contain elements of various types.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/modeling/attributes.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nattributes: {\n  myStringList: {\n    type: \"list\",\n    items: {\n      type: \"string\"\n    },\n  },\n  myMapList: {\n    myMapAttribute: {\n      type: \"map\",\n      properties: {\n        myStringAttribute: {\n          type: \"string\"\n        },\n        myNumberAttribute: {\n          type: \"number\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Office Entity Schema in TypeScript with ElectroDB\nDESCRIPTION: Defines the Office entity with location attributes and indexes for querying by location hierarchy and office lookup.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/examples/task-manager.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, EntityItem, QueryResponse, CreateEntityItem } from \"electrodb\";\nimport { table, client } from \"../config\";\n\nexport const office = new Entity({\n  model: {\n    entity: \"office\",\n    version: \"1\",\n    service: \"taskmanager\"\n  },\n  attributes: {\n    office: {\n      type: \"string\"\n    },\n    country: {\n      type: \"string\"\n    },\n    state: {\n      type: \"string\"\n    },\n    city: {\n      type: \"string\"\n    },\n    zip: {\n      type: \"string\"\n    },\n    address: {\n      type: \"string\"\n    }\n  },\n  indexes: {\n    locations: {\n      pk: {\n        field: \"pk\",\n        composite: [\"country\", \"state\"]\n      },\n      sk: {\n        field: \"sk\",\n        composite: [\"city\", \"zip\", \"office\"]\n      }\n    },\n    office: {\n      index: \"gsi1pk-gsi1sk-index\",\n      collection: \"workplaces\",\n      pk: {\n        field: \"gsi1pk\",\n        composite: [\"office\"]\n      },\n      sk: {\n        field: \"gsi1sk\",\n        composite: []\n      }\n    }\n  }\n}, { table, client });\n```\n\n----------------------------------------\n\nTITLE: Basic Query with Partition Key\nDESCRIPTION: Demonstrates querying stores with the minimum required partition key attributes (cityId and mallId)\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/queries/query.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait StoreLocations.query\n  .stores({\n    cityId: \"Atlanta1\",\n    mallId: \"EastPointe\",\n  })\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Querying Collections in ElectroDB\nDESCRIPTION: Basic example of querying collections in ElectroDB to fetch assignments for a specific employee.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/modeling/collections.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst results = await TaskApp.collections\n  .assignments({ employeeId: \"JExotic\" })\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Defining ElectroDB Index Structure for Book Entity in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to define the index structure for a Book entity in ElectroDB. It shows the mapping between the DynamoDB table attributes and the ElectroDB schema, including both the main table and the Global Secondary Index.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/modeling/schema.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nindexes: {\n    byLocation: {\n        pk: {\n            field: 'pk',\n            composite: ['storeId']\n        },\n        sk: {\n            field: 'sk',\n            composite: ['bookId']\n        }\n    },\n    byAuthor: {\n        index: 'gsi1pk-gsi1sk-index',\n        pk: {\n            field: 'gsi1pk',\n            composite: ['author']\n        },\n        sk: {\n            field: 'gsi1sk',\n            composite: ['title']\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating MI6 Service in ElectroDB with TypeScript\nDESCRIPTION: This snippet demonstrates how to create a service in ElectroDB by combining multiple entities. Here, the 'mi6' service is created with 'constraint' and 'agent' entities.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/transact-write.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mi6 = new Service({ constraint, agent });\n```\n\n----------------------------------------\n\nTITLE: Using Match Method with StoreLocations Entity in TypeScript\nDESCRIPTION: Example of using the Match method (shown as find in this particular example) to query store locations with multiple filter criteria. This query searches for stores in a specific mall and building with a particular lease end date and rent amount.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/queries/match.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait StoreLocations.find({\n  mallId: \"EastPointe\",\n  buildingId: \"BuildingA1\",\n  leaseEndDate: \"2020-03-22\",\n  rent: \"1500.00\",\n}).go();\n```\n\n----------------------------------------\n\nTITLE: Using Where Method for Condition Expressions in ElectroDB\nDESCRIPTION: Example of using ElectroDB's 'where' method to add a ConditionExpression to an update operation. This demonstrates how to check if an animal is pregnant and if the last evaluation is before a certain date before performing an update.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/conditions.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nanimals\n  .update({\n    animal: \"blackbear\",\n    name: \"Isabelle\",\n  })\n  // no longer pregnant because Ernesto was born!\n  .set({\n    isPregnant: false,\n    lastEvaluation: \"2021-09-12\",\n    lastEvaluationBy: \"stephanie.adler\",\n  })\n  // welcome to the world Ernesto!\n  .append({\n    offspring: [\n      {\n        name: \"Ernesto\",\n        birthday: \"2021-09-12\",\n        note: \"healthy birth, mild pollen allergy\",\n      },\n    ],\n  })\n  // using the where clause can guard against making\n  // updates against stale data\n  .where(\n    ({ isPregnant, lastEvaluation }, { lt, eq }) => `\n    ${eq(isPregnant, true)} AND ${lt(lastEvaluation, \"2021-09-12\")}\n  `,\n  )\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Implementing Item Counting with ElectroDB and DynamoDB in TypeScript\nDESCRIPTION: This snippet demonstrates how to use ElectroDB to count items in DynamoDB using the SELECT operation. It includes entity definitions, service creation, and functions for different counting scenarios such as collection members, entity queries, and scans.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/recipes/item-counters.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, Service } from 'electrodb';\n\nconst table = \"accounts\";\n\nconst User = new Entity({\n  model: {\n    entity: 'user',\n    service: 'accounts',\n    version: '1',\n  },\n  attributes: {\n    accountId: {\n      type: 'string',\n    },\n    userId: {\n      type: 'string',\n    },\n    name: {\n      type: 'string',\n    },\n  },\n  indexes: {\n    account: {\n      collection: 'members',\n      pk: {\n        field: 'pk',\n        composite: ['accountId'],\n      },\n      sk: {\n        field: 'sk',\n        composite: ['userId'],\n      }\n    },\n  },\n}, { table });\n\nconst Account = new Entity({\n  model: {\n    entity: 'account',\n    service: 'accounts',\n    version: '1',\n  },\n  attributes: {\n    accountId: {\n      type: 'string',\n    },\n    name: {\n      type: 'string',\n    },\n  },\n  indexes: {\n    account: {\n      collection: 'members',\n      pk: {\n        field: 'pk',\n        composite: ['accountId'],\n      },\n      sk: {\n        field: 'sk',\n        composite: [],\n      }\n    },\n  },\n}, { table });\n\nconst AccountService = new Service({ User, Account });\n\ntype Cursor = string | null;\n\ntype QueryResponse = {\n  cursor: Cursor;\n  data: unknown;\n}\n\ntype CountQueryResponse = {\n  cursor: Cursor;\n  data: { count: number };\n}\n\ntype CountFnOptions = {\n  next: Cursor;\n}\n\ntype CountFn = (options: CountFnOptions) => Promise<CountQueryResponse>;\n\nfunction toCountFnResponse(resp: QueryResponse): CountQueryResponse {\n  const { cursor } = resp;\n\n  const data = { count: 0 };\n  if (typeof resp.data === 'object' && resp.data !== null && 'Count' in resp.data && typeof resp.data.Count === 'number') {\n    data.count = resp.data.Count;\n  };\n\n  return {\n    cursor,\n    data,\n  };\n}\n\ntype PaginateCountQueryOptions = {\n  countFn: CountFn;\n}\n\n// this function exists to demonstrate how you might implement some indirection to accomplish this task in a generic way\nasync function paginateCountQuery(options: PaginateCountQueryOptions) {\n  const { countFn } = options;\n  let count = 0;\n  let next: Cursor = null;\n  do {\n    const { cursor, data } = await countFn({ next });\n    count += data.count;\n    next = cursor;\n  } while(next);\n\n  return count;\n}\n\ntype CreateCountFnOptions = {\n  accountId: string;\n}\n\n// count collection query\nfunction createMembersCountFn(options: CreateCountFnOptions): CountFn {\n  const { accountId } = options;\n  return ({ next }) => {\n    return AccountService.collections\n      .members({ accountId })\n      .go({\n        // `raw` allows you return the unprocess results directly from DynamoDB (escape hatch)\n        data: 'raw',\n        // paginate through the results using the cursor\n        cursor: next,\n        // `params` allows you to append additional parameters to the DynamoDB query (escape hatch)\n        params: { Select: 'COUNT'},\n        // transform results\n      }).then(toCountFnResponse);\n  };\n}\n\n// count entity query\nfunction createUsersCountFn(options: CreateCountFnOptions): CountFn {\n  const { accountId } = options;\n  return async ({ next }) => {\n    return User.query.account({ accountId })\n      .go({\n        // `raw` allows you return the unprocess results directly from DynamoDB (escape hatch)\n        data: 'raw',\n        // paginate through the results using the cursor\n        cursor: next,\n        // `params` allows you to append additional parameters to the DynamoDB query (escape hatch)\n        params: { Select: 'COUNT'},\n        // transform results\n      }).then(toCountFnResponse);\n  };\n}\n\nfunction createUsersScanCountFn(options: CreateCountFnOptions): CountFn {\n  const { accountId } = options;\n  return async ({ next }) => {\n    return User.scan\n      .where((attr, op) => op.eq(attr.accountId, accountId))\n      .go({\n        // `raw` allows you return the unprocess results directly from DynamoDB (escape hatch)\n        data: 'raw',\n        // paginate through the results using the cursor\n        cursor: next,\n        // `params` allows you to append additional parameters to the DynamoDB query (escape hatch)\n        params: { Select: 'COUNT'},\n        // transform results\n      }).then(toCountFnResponse);\n  };\n}\n\n(async function main() {\n  const accountId = '1234';\n\n  const membersCount = await paginateCountQuery({\n    countFn: createMembersCountFn({ accountId })\n  });\n\n  const usersCount = await paginateCountQuery({\n    countFn: createUsersCountFn({ accountId })\n  });\n\n  const usersScanCount = await paginateCountQuery({\n    countFn: createUsersScanCountFn({ accountId })\n  });\n})().catch(console.error);\n```\n\n----------------------------------------\n\nTITLE: Basic Entity Pagination in ElectroDB\nDESCRIPTION: Demonstrates basic cursor-based pagination using ElectroDB entities to query mall store leases. Shows how to pass cursors between subsequent queries.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/queries/pagination.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst results1 = await MallStores.query.leases({ mallId }).go(); // no \"cursor\" passed to `.go()`\n\nconst results2 = await MallStores.query.leases({ mallId })\n  .go({ cursor: results1.cursor }); // Paginate by querying with the \"cursor\" from your first query\n```\n\n----------------------------------------\n\nTITLE: Querying Books Within a Genre in TypeScript\nDESCRIPTION: This snippet demonstrates how to query books within a specific genre using ElectroDB.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/examples/library-system.mdx#2025-04-21_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data, cursor } = await genre.query.categories({ genre: \"horror\" }).go();\n```\n\n----------------------------------------\n\nTITLE: Approve Pull Request - ElectroDB TypeScript Function\nDESCRIPTION: Function to approve a pull request by updating the reviewer's approval status. Takes repository owner, name, pull request number, and username as parameters. Validates reviewer existence before approval.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/examples/version-control.mdx#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function approvePullRequest(\n  repoOwner: string,\n  repoName: string,\n  pullRequestNumber: string,\n  username: string,\n) {\n  const pullRequest = await store.entities.pullRequests\n    .get({ repoOwner, repoName, pullRequestNumber })\n    .go();\n\n  if (!pullRequest.data || !pullRequest.data.reviewers) {\n    return false;\n  }\n\n  let index: number = -1;\n\n  for (let i = 0; i < pullRequest.data.reviewers.length; i++) {\n    const reviewer = pullRequest.data.reviewers[i];\n    if (reviewer.username === username) {\n      index = i;\n    }\n  }\n\n  if (index === -1) {\n    return false;\n  }\n\n  return store.entities.pullRequests\n    .update({ repoOwner, repoName, pullRequestNumber })\n    .data(({ reviewers }, { set }) => {\n      set(reviewers[index].approved, true);\n    })\n    .where(\n      ({ reviewers }, { eq }) => `\n            ${eq(reviewers[index].username, username)};\n        `,\n    )\n    .go()\n    .then(() => true)\n    .catch(() => false);\n}\n```\n\n----------------------------------------\n\nTITLE: Overview Collection Query Example\nDESCRIPTION: Demonstrates querying the overview collection to fetch tasks and project members for a specific project.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/modeling/collections.mdx#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// overview\nconst results = await TaskApp.collections\n  .overview({ projectId: \"SD-204\" })\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Performing Batch Put Operation with ElectroDB in TypeScript\nDESCRIPTION: This snippet demonstrates how to perform a batch put operation using ElectroDB. It shows inserting multiple store location records with various attributes and using the concurrency option.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/batch-put.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst unprocessed = await StoreLocations.put([\n  {\n    cityId: \"LosAngeles1\",\n    storeId: \"LatteLarrys\",\n    mallId: \"EastPointe\",\n    buildingId: \"F34\",\n    unitId: \"a1\",\n    category: \"food/coffee\",\n    leaseEndDate: \"2022-03-22\",\n    rent: \"4500.00\",\n  },\n  {\n    cityId: \"LosAngeles1\",\n    storeId: \"MochaJoes\",\n    mallId: \"EastPointe\",\n    buildingId: \"F35\",\n    unitId: \"a2\",\n    category: \"food/coffee\",\n    leaseEndDate: \"2021-01-22\",\n    rent: \"1500.00\",\n  },\n]).go({ concurrency: 1 }); // `concurrency` value is optional and default's to `1`\n```\n\n----------------------------------------\n\nTITLE: Equivalent DynamoDB Parameters for Patch Operation\nDESCRIPTION: This JSON object represents the equivalent DynamoDB parameters for the patch operation shown in the previous TypeScript example. It includes the UpdateExpression, ExpressionAttributeNames, ExpressionAttributeValues, and other necessary parameters.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/patch.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"UpdateExpression\": \"SET #status = :status_u0, #comments = list_append(#comments, :comments_u0), #updatedAt = :updatedAt_u0, #gsi1sk = :gsi1sk_u0, #team = :team_u0, #project = :project_u0, #task = :task_u0, #__edb_e__ = :__edb_e___u0, #__edb_v__ = :__edb_v___u0 ADD #points :points_u0\",\n  \"ExpressionAttributeNames\": {\n    \"#pk\": \"pk\",\n    \"#sk\": \"sk\",\n    \"#status\": \"status\",\n    \"#points\": \"points\",\n    \"#comments\": \"comments\",\n    \"#updatedAt\": \"updatedAt\",\n    \"#gsi1sk\": \"gsi1sk\",\n    \"#team\": \"team\",\n    \"#project\": \"project\",\n    \"#task\": \"task\",\n    \"#__edb_e__\": \"__edb_e__\",\n    \"#__edb_v__\": \"__edb_v__\"\n  },\n  \"ExpressionAttributeValues\": {\n    \":status0\": \"in-progress\",\n    \":status_u0\": \"open\",\n    \":points_u0\": 5,\n    \":comments_u0\": [\n      {\n        \"user\": \"janet\",\n        \"body\": \"This seems half-baked.\"\n      }\n    ],\n    \":updatedAt_u0\": 1692723798360,\n    \":gsi1sk_u0\": \"$assignments#tasks_1#status_open\",\n    \":team_u0\": \"core\",\n    \":project_u0\": \"backend\",\n    \":task_u0\": \"45-662\",\n    \":__edb_e___u0\": \"tasks\",\n    \":__edb_v___u0\": \"1\"\n  },\n  \"TableName\": \"your_table_name\",\n  \"Key\": {\n    \"pk\": \"$taskapp#team_core\",\n    \"sk\": \"$tasks_1#project_backend#task_45-662\"\n  },\n  \"ConditionExpression\": \"attribute_exists(#pk) AND attribute_exists(#sk) AND #status = :status0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Pagination Example with Cursor Handling\nDESCRIPTION: Comprehensive example showing how to implement pagination with cursor handling to fetch all team members, including type definitions and result accumulation.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/queries/pagination.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// EntityItem is the type for a returned item\n// QueryResponse is the type for the full electrodb response to a query\nimport { EntityItem, QueryResponse } from \"electrodb\";\n\n// (your entity)\nimport { users } from \"./entities\";\n\ntype UserItem = EntityItem<typeof users>;\ntype UserQueryResponse = QueryResponse<typeof users>;\n\nasync function getTeamMembers(team: string) {\n  let members: UserItem[] = [];\n  let cursor = null;\n  do {\n    const results: UserQueryResponse = await users.query\n      .members({ team })\n      .go({ cursor });\n    members = [...members, ...results.data];\n    cursor = results.cursor;\n  } while (cursor !== null);\n\n  return members;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Books by Author's Last Name in TypeScript with ElectroDB\nDESCRIPTION: This code snippet demonstrates how to query all copies of books by an author's last name using the ElectroDB query API.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/examples/library-system.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data, cursor } = await author.query\n  .writer({ authorLastName: \"king\" })\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Follow Repository - ElectroDB TypeScript Function\nDESCRIPTION: Simple function to add a follower to a repository's followers list. Takes repository owner, name, and follower username as parameters.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/examples/version-control.mdx#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function followRepository(\n  repoOwner: string,\n  repoName: string,\n  follower: string,\n) {\n  await store.entities.repositories\n    .update({ repoOwner, repoName })\n    .add({ followers: [follower] })\n    .go();\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Genres and Subgenres by Book in TypeScript\nDESCRIPTION: These snippets show how to query the genres and subgenres associated with a book, either by ISBN or book title.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/examples/library-system.mdx#2025-04-21_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nawait genre.query.book({ isbn: \"9783453435773\" }).go();\nawait genre.query.title({ bookTitle: \"it\" }).go();\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Attribute Types with CustomAttributeType in ElectroDB (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the CustomAttributeType function to define a complex union type for a personnel role attribute in an ElectroDB Entity. It includes the definition of a PersonnelRole type and its integration into an Entity schema.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/modeling/attributes.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, CustomAttributeType } from \"electrodb\";\n\nconst table = \"workplace_table\";\n\ntype PersonnelRole =\n  | {\n      type: \"employee\";\n      startDate: number;\n      endDate?: number;\n    }\n  | {\n      type: \"contractor\";\n      contractStartDate: number;\n      contractEndDate: number;\n    };\n\nconst person = new Entity(\n  {\n    model: {\n      entity: \"personnel\",\n      service: \"workplace\",\n      version: \"1\",\n    },\n    attributes: {\n      id: {\n        type: \"string\",\n      },\n      role: {\n        type: CustomAttributeType<PersonnelRole>(\"any\"),\n        required: true,\n      },\n    },\n    indexes: {\n      record: {\n        pk: {\n          field: \"pk\",\n          composite: [\"id\"],\n        },\n        sk: {\n          field: \"sk\",\n          composite: [],\n        },\n      },\n    },\n  },\n  { table },\n);\n```\n\n----------------------------------------\n\nTITLE: Generated DynamoDB Parameters from ElectroDB Operations\nDESCRIPTION: This snippet shows the raw DynamoDB parameters generated by ElectroDB from the task update operations above. It illustrates how ElectroDB handles attribute names, values, update expressions, key structures, and condition expressions automatically.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/core-concepts/Introduction.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"UpdateExpression\": \"SET #status = :status_u0, #points = #points + :points_u0, #comments = list_append(#comments, :comments_u0), #updatedAt = :updatedAt_u0, #gsi1sk = :gsi1sk_u0\",\n  \"ExpressionAttributeNames\": {\n    \"#status\": \"status\",\n    \"#points\": \"points\",\n    \"#comments\": \"comments\",\n    \"#updatedAt\": \"updatedAt\",\n    \"#gsi1sk\": \"gsi1sk\"\n  },\n  \"ExpressionAttributeValues\": {\n    \":status0\": \"in-progress\",\n    \":status_u0\": \"open\",\n    \":points_u0\": 5,\n    \":comments_u0\": [\n      {\n        \"user\": \"janet\",\n        \"body\": \"This seems half-baked.\"\n      }\n    ],\n    \":updatedAt_u0\": 1630977029015,\n    \":gsi1sk_u0\": \"$assignments#tasks_1#status_open\"\n  },\n  \"TableName\": \"your_table_name\",\n  \"Key\": {\n    \"pk\": \"$taskapp#team_core\",\n    \"sk\": \"$tasks_1#project_backend#task_45-662\"\n  },\n  \"ConditionExpression\": \"attribute_exists(pk) AND attribute_exists(sk) AND #status = :status0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Equivalent DynamoDB Parameters for Batch Put in JSON\nDESCRIPTION: This snippet demonstrates the equivalent DynamoDB parameters generated by ElectroDB for a batch put operation. It shows the structure of the RequestItems object with PutRequest items.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/batch-put.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"RequestItems\": {\n    \"StoreDirectory\": [\n      {\n        \"PutRequest\": {\n          \"Item\": {\n            \"cityId\": \"LosAngeles1\",\n            \"mallId\": \"EastPointe\",\n            \"storeId\": \"LatteLarrys\",\n            \"buildingId\": \"F34\",\n            \"unitId\": \"a1\",\n            \"category\": \"food/coffee\",\n            \"leaseEndDate\": \"2022-03-22\",\n            \"rent\": \"4500.00\",\n            \"discount\": \"0.00\",\n            \"pk\": \"$mallstoredirectory#cityid_losangeles1#mallid_eastpointe\",\n            \"sk\": \"$mallstore_1#buildingid_f34#storeid_lattelarrys\",\n            \"gsi1pk\": \"$mallstoredirectory#mallid_eastpointe\",\n            \"gsi1sk\": \"$mallstore_1#buildingid_f34#unitid_a1\",\n            \"gsi2pk\": \"$mallstoredirectory#storeid_lattelarrys\",\n            \"gsi2sk\": \"$mallstore_1#leaseenddate_2022-03-22\",\n            \"__edb_e__\": \"MallStore\",\n            \"__edb_v__\": \"1\"\n          }\n        }\n      },\n      {\n        \"PutRequest\": {\n          \"Item\": {\n            \"cityId\": \"LosAngeles1\",\n            \"mallId\": \"EastPointe\",\n            \"storeId\": \"MochaJoes\",\n            \"buildingId\": \"F35\",\n            \"unitId\": \"a2\",\n            \"category\": \"food/coffee\",\n            \"leaseEndDate\": \"2021-01-22\",\n            \"rent\": \"1500.00\",\n            \"discount\": \"0.00\",\n            \"pk\": \"$mallstoredirectory#cityid_losangeles1#mallid_eastpointe\",\n            \"sk\": \"$mallstore_1#buildingid_f35#storeid_mochajoes\",\n            \"gsi1pk\": \"$mallstoredirectory#mallid_eastpointe\",\n            \"gsi1sk\": \"$mallstore_1#buildingid_f35#unitid_a2\",\n            \"gsi2pk\": \"$mallstoredirectory#storeid_mochajoes\",\n            \"gsi2sk\": \"$mallstore_1#leaseenddate_2021-01-22\",\n            \"__edb_e__\": \"MallStore\",\n            \"__edb_v__\": \"1\"\n          }\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Upsert Operation in ElectroDB with TypeScript\nDESCRIPTION: A basic example of using the upsert method to create or update a store location record in DynamoDB. This operation will create a new record if it doesn't exist or update it if it does.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/upsert.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait StoreLocations.upsert({\n  cityId: \"Atlanta1\",\n  storeId: \"LatteLarrys\",\n  mallId: \"EastPointe\",\n  buildingId: \"BuildingA1\",\n  unitId: \"B47\",\n  category: \"food/coffee\",\n  leaseEndDate: \"2020-03-22\",\n  rent: \"4500.00\",\n}).go();\n```\n\n----------------------------------------\n\nTITLE: Querying Employee Birthdays and Anniversaries with ElectroDB in TypeScript\nDESCRIPTION: This snippet shows how to query employee birthdays and anniversaries within a specific date range using ElectroDB. It demonstrates both service-level and entity-level query methods.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/examples/human-resources.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst startDate = \"2020-05-01\";\nconst endDate = \"2020-06-01\";\n\n// on the service\nawait EmployeeApp.entities.employees\n  .workplaces({ office: \"gw zoo\" })\n  .where(\n    ({ birthday, dateHired }, { between }) => `\n        ${between(dateHired, startDate, endDate)} OR\n        ${between(birthday, startDate, endDate)}\n    `,\n  )\n  .go();\n\n// on the entity\nawait employees\n  .workplaces({ office: \"gw zoo\" })\n  .where(\n    ({ birthday, dateHired }, { between }) => `\n        ${between(dateHired, startDate, endDate)} OR\n        ${between(birthday, startDate, endDate)}\n    `,\n  )\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Querying Subgenres by Author and Genre in TypeScript\nDESCRIPTION: This snippet shows how to query subgenres associated with a specific author and genre combination using ElectroDB.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/examples/library-system.mdx#2025-04-21_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data, cursor } = await genre.query\n  .author({\n    authorFirstName: \"stephen\",\n    authorLastName: \"king\",\n    genre: \"horror\",\n  })\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Querying Member Information by MemberId in TypeScript\nDESCRIPTION: This snippet demonstrates how to query member information using a specific memberId in the library management system.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/examples/library-system.mdx#2025-04-21_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data, cursor } = await member.query\n  .member({ memberId: \"0000001\" })\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Implementing Index Scoping for Entity Isolation in ElectroDB\nDESCRIPTION: This snippet demonstrates how to use index scoping to isolate different entities (organization and user) on the same index. It uses the 'scope' property to create unique partition keys for each entity.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/modeling/indexes.mdx#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst organization = new Entity({\n  model: {\n    entity: \"organization\",\n    service: \"taskapp\",\n    version: \"1\"\n  },\n  attributes: {\n    organizationId: {\n      type: \"string\"\n    },\n  },\n  indexes: {\n    myIndex: {\n      scope: \"org\", // <--- Scope is set to unique value \"org\"\n      pk: {\n        field: \"pk\",\n        composite: []\n      },\n      sk: {\n        field: \"sk\",\n        composite: [\"organizationId\"]\n      }\n    }\n  }\n}, { table: \"your_table_name\" });\n\nconst user = new Entity({\n  model: {\n    entity: \"user\",\n    service: \"taskapp\",\n    version: \"1\"\n  },\n  attributes: {\n    userId: {\n      type: \"string\"\n    },\n  },\n  indexes: {\n    myIndex: {\n      scope: \"user\", // <--- Scope is set to unique value \"user\"\n      pk: {\n        field: \"pk\",\n        composite: []\n      },\n      sk: {\n        field: \"sk\",\n        composite: [\"userId\"]\n      }\n    }\n  }\n}, { table: \"your_table_name\" });\n```\n\n----------------------------------------\n\nTITLE: Querying Employee-Specific Tasks\nDESCRIPTION: Demonstrates querying tasks assigned to a specific employee using both service and entity-level queries.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/examples/human-resources.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// on the service\nawait EmployeeApp.entities.tasks.query.assigned({ employee: \"cbaskin\" }).go();\n\n// on the entity\nawait tasks.query.assigned({ employee: \"cbaskin\" }).go();\n```\n\n----------------------------------------\n\nTITLE: Implementing a Fee Calculation Using Watch Attributes in ElectroDB\nDESCRIPTION: This example demonstrates how to create a calculated 'fee' attribute that automatically updates to 20% of the 'price' attribute whenever price changes. The 'watch' property ensures the setter callback is called on any price update operations.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/recipes/calculated-attribute.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  model: {\n    entity: \"products\",\n    service: \"estimator\",\n    version: \"1\"\n  },\n  attributes: {\n    product: {\n      type: \"string\"\n    },\n    price: {\n      type: \"number\",\n              required: true\n    },\n    fee: {\n      type: \"number\",\n              watch: [\"price\"],\n              set: (_, {price}) => {\n        return price * .2;\n      }\n    }\n  },\n  indexes: {\n    pricing: {\n      pk: {\n        field: \"pk\",\n                composite: [\"product\"]\n      },\n      sk: {\n        field: \"sk\",\n                composite: []\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Equivalent DynamoDB Parameters for Batch Delete\nDESCRIPTION: This JSON snippet illustrates the equivalent DynamoDB parameters for the batch delete operation performed in ElectroDB. It shows the structure of the DeleteRequest for multiple items.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/batch-delete.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"RequestItems\": {\n    \"StoreDirectory\": [\n      {\n        \"DeleteRequest\": {\n          \"Key\": {\n            \"pk\": \"$mallstoredirectory#cityid_losangeles1#mallid_eastpointe\",\n            \"sk\": \"$mallstore_1#buildingid_f34#storeid_lattelarrys\"\n          }\n        }\n      },\n      {\n        \"DeleteRequest\": {\n          \"Key\": {\n            \"pk\": \"$mallstoredirectory#cityid_losangeles1#mallid_eastpointe\",\n            \"sk\": \"$mallstore_1#buildingid_f35#storeid_mochajoes\"\n          }\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Performing BatchGet Operation with ElectroDB in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the 'get' method of an ElectroDB entity to perform a BatchGet operation. It retrieves multiple store locations based on their composite attributes and uses the 'concurrent' execution option.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/queries/batch-get.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { data, unprocessed } = await StoreLocations.get([\n  {\n    storeId: \"LatteLarrys\",\n    mallId: \"EastPointe\",\n    buildingId: \"F34\",\n    cityId: \"Atlanta1\",\n  },\n  {\n    storeId: \"MochaJoes\",\n    mallId: \"WestEnd\",\n    buildingId: \"A21\",\n    cityId: \"Madison2\",\n  },\n]).go({ concurrent: 1 }); // `concurrent` value is optional and default's to `1`\n```\n\n----------------------------------------\n\nTITLE: Patching a Store Location with ElectroDB\nDESCRIPTION: This example demonstrates how to use the patch method to update a store location's category. It includes a condition to only update if the current category is 'food/coffee'.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/patch.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nawait StoreLocations.patch({ cityId, mallId, storeId, buildingId })\n  .set({ category: \"food/meal\" })\n  .where((attr, op) => op.eq(attr.category, \"food/coffee\"))\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Creating New Tasks in TypeScript with ElectroDB\nDESCRIPTION: Shows how to type and create new task items using the CreateEntityItem type.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/examples/task-manager.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ntype CreateTaskItem = CreateEntityItem<typeof task>;\n\nfunction createNewTask(item: CreateTaskItem) {\n  return taskManager.entities.task.put(item).go();\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Developer Salaries in TypeScript with ElectroDB\nDESCRIPTION: Demonstrates filtering employees by title and salary criteria using entity queries.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/examples/task-manager.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst title = \"Junior Software Engineer\";\nconst salary = \"100000\";\n\nconst developers = await taskManager.entities.employee.query\n  .roles({ title })\n  .gt({ salary })\n  .go();\n```\n\n----------------------------------------\n\nTITLE: ElectroDB Scan Response Format\nDESCRIPTION: This code snippet shows the expected response format when using the scan method in ElectroDB. It returns an object with data and an optional cursor.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/queries/scan.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  data: Array<YOUR_SCHEMA>,\n  cursor: string | undefined\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Case-Insensitive Search Field with Hidden Attributes in ElectroDB\nDESCRIPTION: This example shows how to implement a hidden 'descriptionSearch' attribute that maintains a lowercase version of the 'description' field for case-insensitive filtering. The watch property ensures the search field updates whenever the description changes.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/recipes/calculated-attribute.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  model: {\n    entity: \"transaction\",\n    service: \"bank\",\n    version: \"1\"\n  },\n  attributes: {\n    accountNumber: {\n      type: \"string\"\n    },\n    transactionId: {\n      type: \"string\"\n    },\n    amount: {\n      type: \"number\",\n    },\n    description: {\n      type: \"string\",\n    },\n    descriptionSearch: {\n      type: \"string\",\n      hidden: true,\n      watch: [\"description\"],\n      set: (_, {description}) => {\n        if (typeof description === \"string\") {\n            return description.toLowerCase();\n        }\n      }\n    }\n  },\n  indexes: {\n    transactions: {\n      pk: {\n        field: \"pk\",\n        composite: [\"accountNumber\"]\n      },\n      sk: {\n        field: \"sk\",\n        composite: [\"transactionId\"]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Equivalent DynamoDB Parameters for ElectroDB Scan\nDESCRIPTION: This code snippet displays the equivalent DynamoDB parameters generated by ElectroDB for the scan operation. It includes TableName, ExpressionAttributeNames, ExpressionAttributeValues, and FilterExpression.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/queries/scan.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"TableName\": \"StoreDirectory\",\n  \"ExpressionAttributeNames\": {\n    \"#category\": \"category\",\n    \"#leaseEndDate\": \"leaseEndDate\",\n    \"#pk\": \"pk\",\n    \"#sk\": \"sk\",\n    \"#__edb_e__\": \"__edb_e__\",\n    \"#__edb_v__\": \"__edb_v__\"\n  },\n  \"ExpressionAttributeValues\": {\n    \":category_w1\": \"food/coffee\",\n    \":category_w2\": \"spite store\",\n    \":leaseEndDate_w1\": \"2020-03\",\n    \":leaseEndDate_w2\": \"2020-04\",\n    \":pk\": \"$mallstoredirectory#cityid_\",\n    \":sk\": \"$mallstore_1#buildingid_\",\n    \":__edb_e__\": \"MallStore\",\n    \":__edb_v__\": \"1\"\n  },\n  \"FilterExpression\": \"begins_with(#pk, :pk) AND #__edb_e__ = :__edb_e__ AND #__edb_v__ = :__edb_v__ AND begins_with(#sk, :sk) AND (#category = :category_w1 OR #category = :category_w2) AND (#leaseEndDate between :leaseEndDate_w1 and :leaseEndDate_w2)\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Direct Reports with ElectroDB in TypeScript\nDESCRIPTION: This snippet demonstrates how to query for direct reports of a specific manager using ElectroDB. It shows both service-level and entity-level query methods.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/examples/human-resources.mdx#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// on the service\nawait EmployeeApp.entities.employees.reports({ manager: \"jlowe\" }).go();\n\n// on the entity\nawait employees.reports({ manager: \"jlowe\" }).go();\n```\n\n----------------------------------------\n\nTITLE: Querying Books by Title in TypeScript\nDESCRIPTION: This snippet shows how to query books or copies by their title using ElectroDB.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/examples/library-system.mdx#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data, cursor } = await book.query.releases({ bookTitle: \"it\" }).go();\n```\n\n----------------------------------------\n\nTITLE: Initializing ElectroDB Service with DynamoDB v2 Client\nDESCRIPTION: Shows how to create an ElectroDB Service instance with multiple entities using AWS SDK v2 DocumentClient. Demonstrates service initialization with table name and client configuration.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/reference/dynamodb-client.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity } from \"electrodb\";\nimport { DocumentClient } from \"aws-sdk/clients/dynamodb\";\nconst table = \"my_table_name\";\nconst client = new DocumentClient({\n  region: \"us-east-1\",\n});\n\nconst task = new Entity({\n  // your model\n});\n\nconst user = new Entity({\n  // your model\n});\n\nconst service = new Service(\n  { task, user },\n  {\n    client, // <----- client\n    table,\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Setting DynamoDB Client via setClient Method\nDESCRIPTION: Demonstrates how to set the DynamoDB client after Entity instantiation using the setClient method. Shows client configuration with region specification.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/reference/dynamodb-client.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity } from \"electrodb\";\nimport { DocumentClient } from \"aws-sdk/clients/dynamodb\";\nconst table = \"my_table_name\";\nconst client = new DocumentClient({\n  region: \"us-east-1\",\n});\n\nconst task = new Entity({\n  // your model\n});\n\ntask.setClient(client);\n```\n\n----------------------------------------\n\nTITLE: Querying Mall Stores\nDESCRIPTION: Various query implementations for retrieving store information based on different criteria including mall location, building, category, and lease dates.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/examples/shopping-mall-directory.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Query all stores in a mall\nlet mallId = \"EastPointe\";\nlet stores = await StoreLocations.query.units({ mallId }).go();\n\n// Query stores by building\nlet buildingId = \"BuildingA1\";\nlet stores = await StoreLocations.query.units({ mallId, buildingId }).go();\n\n// Query by unit\nlet unitId = \"B47\";\nlet stores = await StoreLocations.query.units({ mallId, buildingId, unitId }).go();\n\n// Query by category\nlet category = \"food/coffee\";\nlet stores = await StoreLocations.query\n  .units({ mallId })\n  .where((attr, op) => op.eq(attr.category, category))\n  .go();\n\n// Query by lease end date\nlet q2StartDate = \"2020-04-01\";\nlet stores = await StoreLocations.query\n  .leases({ storeId })\n  .lt({ leaseEndDate: q2StartDate })\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Using field() Method for Custom Field References in ElectroDB\nDESCRIPTION: Shows how to use the field() method to reference fields not present in the model. This method can be combined with escape() to create custom DynamoDB filters.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/queries/filters.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nanimals.query\n  .exhibit({ habitat: \"Africa\", enclosure: \"5b\" })\n  .where(\n    (_, { field, escape }) => `\n    contains(${field(\"gsi1sk\")}, ${escape(\"value\")})\n  `,\n  )\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Using Composite Attribute Templates in ElectroDB\nDESCRIPTION: This example shows how to use composite attribute templates in ElectroDB. It demonstrates a custom key structure using templates, which is useful for adapting ElectroDB to existing table structures.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/modeling/indexes.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  model: {\n      entity: \"MallStoreCustom\",\n      version: \"1\",\n      service: \"mallstoredirectory\"\n  },\n  attributes: {\n    storeId: {\n        type: \"string\"\n    },\n    mallId: {\n        type: \"string\"\n    },\n    buildingId: {\n        type: \"string\"\n    },\n    unitId: {\n        type: \"string\"\n    }\n  },\n  indexes: {\n    locations: {\n      pk: {\n        field: \"pk\",\n        composite: [\"storeId\"],        \n        template: \"sid_${storeId}\"\n      },\n      sk: {\n        field: \"sk\",\n        composite: [\"mallId\", \"buildingId\", \"unitId\"],\n        template: \"mid_${mallId}#bid_${buildingId}#uid_${unitId}\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Chaining Multiple Where Clauses in ElectroDB TypeScript Query\nDESCRIPTION: This example shows how to chain multiple where clauses in an ElectroDB query. It queries store leases in a mall, filtering by date range, rent range, discount, and category. The resulting FilterExpressions are combined with an implicit AND operator.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/conditions.mdx#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nlet MallStores = new Entity(model, { table: \"StoreDirectory\" });\nlet stores = await MallStores.query\n  .leases({ mallId: \"EastPointe\" })\n  .between({ leaseEndDate: \"2020-04-01\" }, { leaseEndDate: \"2020-07-01\" })\n  .where(\n    ({ rent, discount }, { between, eq }) => `\n\t\t${between(rent, \"2000.00\", \"5000.00\")} AND ${eq(discount, \"1000.00\")}\n\t`,\n  )\n  .where(\n    ({ category }, { eq }) => `\n\t\t${eq(category, \"food/coffee\")}\n\t`,\n  )\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Basic Filter Expression with Where Clause in ElectroDB\nDESCRIPTION: Demonstrates how to use the where method to add a FilterExpression to query animals based on pregnancy status or offspring existence.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/queries/filters.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nanimals.query\n  .exhibit({ habitat: \"Africa\" })\n  .where(\n    ({ isPregnant, offspring }, { exists, eq }) => `\n    ${eq(isPregnant, true)} OR ${exists(offspring)}\n  `,\n  )\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Creating a Store Location Record with ElectroDB\nDESCRIPTION: An example of creating a new store location record using ElectroDB's create method. The example includes a condition expression to verify the rent value matches '4500.00' before creating the record.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/create.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait StoreLocations.create({\n  cityId: \"Atlanta1\",\n  storeId: \"LatteLarrys\",\n  mallId: \"EastPointe\",\n  buildingId: \"BuildingA1\",\n  unitId: \"B47\",\n  category: \"food/coffee\",\n  leaseEndDate: \"2020-03-22\",\n  rent: \"4500.00\",\n})\n  .where((attr, op) => op.eq(attr.rent, \"4500.00\"))\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Creating TaskManager Service in TypeScript with ElectroDB\nDESCRIPTION: Combines employee, task, and office entities into a single service for unified access.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/examples/task-manager.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport const taskManager = new Service({\n  employee,\n  task,\n  office\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Library Service in TypeScript with ElectroDB\nDESCRIPTION: This code snippet creates a Library service by combining all the previously defined entities (author, book, genre, and member) using ElectroDB's Service class.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/examples/library-system.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Service } from \"electrodb\";\n\nconst library = new Service({\n  author,\n  book,\n  genre,\n  member,\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Overdue Books by Member ID in TypeScript with ElectroDB\nDESCRIPTION: This code snippet demonstrates how to query all overdue books for a specific member using the ElectroDB query API with a date comparison.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/examples/library-system.mdx#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst today = \"2022-07-30\";\n\nconst { data, cursor } = await book.query\n  .loans({ memberId: \"0000001\" })\n  .gt({ loanEndDate: today })\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Defining Task Entity with Collections in ElectroDB\nDESCRIPTION: This snippet defines a Task entity that participates in the same 'assignments' collection as the Employee entity, establishing a relationship between tasks and employees.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/modeling/collections.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity } from \"electrodb\";\n\nconst Task = new Entity({\n  model: {\n    entity: \"tasks\",\n    version: \"1\",\n    service: \"taskapp\",\n  },\n  attributes: {\n    taskId: {\n      type: \"string\",\n    },\n    employeeId: {\n      type: \"string\",\n    },\n    projectId: {\n      type: \"string\",\n    },\n    title: {\n      type: \"string\",\n    },\n    body: {\n      type: \"string\",\n    },\n  },\n  indexes: {\n    project: {\n      pk: {\n        field: \"pk\",\n        composite: [\"projectId\"],\n      },\n      sk: {\n        field: \"sk\",\n        composite: [\"taskId\"],\n      },\n    },\n    assigned: {\n      collection: \"assignments\",\n      index: \"gsi2\",\n      pk: {\n        field: \"gsi2pk\",\n        composite: [\"employeeId\"],\n      },\n      sk: {\n        field: \"gsi2sk\",\n        composite: [\"projectId\"],\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Index Without Sort Key in ElectroDB\nDESCRIPTION: This snippet demonstrates how to define an index without a sort key in ElectroDB. The index only has a partition key (pk) with a composite attribute 'id'.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/modeling/indexes.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  indexes: {\n    myIndex: {\n      pk: {\n        field: \"pk\",\n        composite: [\"id\"]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Chained Where Clauses with OR and AND Logic\nDESCRIPTION: Example of chaining multiple where clauses with both OR and AND logic. This checks if an animal is dangerous OR hasn't been fed, AND has a birthday within the last month.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/conditions.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nanimals\n  .update({ animal: \"tiger\", name: \"janet\" })\n  .set({ keeper: \"Joe Exotic\" })\n  .where(\n    (attr, op) => `\n    ${op.eq(attr.dangerous, true)} OR ${op.notExists(attr.lastFed)}\n  `,\n  )\n  .where(({ birthday }, { between }) => {\n    const today = Date.now();\n    const lastMonth = today - 1000 * 60 * 60 * 24 * 30;\n    return between(birthday, lastMonth, today);\n  })\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Basic Data Method Update Operations - JavaScript\nDESCRIPTION: Demonstrates various update operations using the data() method including set, add, subtract, remove, append, and delete operations on different attribute types.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/update.mdx#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nawait StoreLocations.update({ cityId, mallId, storeId, buildingId })\n  .data((a, o) => {\n    const newTenant = o.value(a.tenants, [\"larry\"]);\n    o.set(a.category, \"food/meal\");\n    o.add(a.tenants, newTenant);\n    o.add(a.warnings, 1);\n    o.subtract(a.deposit, 200);\n    o.remove(a.discount);\n    o.append(a.rentalAgreement, [\n      {\n        type: \"amendment\",\n        detail: \"no soup for you\"\n      }\n    ]);\n    o.delete(a.tags, [\"coffee\"]);\n    o.del(a.contact, [\"555-345-2222\"]);\n    o.add(a.fees, o.name(a.petFee));\n  })\n  .where((attr, op) => op.eq(attr.category, \"food/coffee\"))\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Deleting a Store Location Record with ElectroDB\nDESCRIPTION: Example of deleting a store location record by providing the composite attributes to the delete method. The example shows how to remove a store location using storeId, mallId, buildingId, and cityId as identifiers.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/delete.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait StoreLocations.delete({\n  storeId: \"LatteLarrys\",\n  mallId: \"EastPointe\",\n  buildingId: \"F34\",\n  cityId: \"Atlanta1\",\n}).go();\n```\n\n----------------------------------------\n\nTITLE: Querying Contributions Collection in ElectroDB (TypeScript)\nDESCRIPTION: This example demonstrates how to query the 'contributions' collection in ElectroDB using TypeScript. It shows the method call and the expected response format.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/modeling/collections.mdx#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// contributions\nconst results = await TaskApp.collections\n  .contributions({ employeeId: \"JExotic\" })\n  .go();\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  data: {\n    tasks: [...], // tasks assigned to employeeId \"JExotic\"\n    projectMembers: [...], // projects with employeeId \"JExotic\"\n    employees: [...] // employee record(s) with employeeId \"JExotic\"\n  },\n  cursor: null,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Task Entity in ElectroDB\nDESCRIPTION: Creates a Task entity to represent work items assigned to employees, including project association and task descriptions. Features indexes for task lookup by project and employee assignment.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/examples/human-resources.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity } from \"electrodb\";\n\nconst Task = new Entity({\n  model: {\n    entity: \"task\",\n    version: \"1\",\n    service: \"taskapp\",\n  },\n  attributes: {\n    task: \"string\",\n    project: \"string\",\n    employee: \"string\",\n    description: \"string\",\n  },\n  indexes: {\n    task: {\n      pk: {\n        field: \"pk\",\n        composite: [\"task\"],\n      },\n      sk: {\n        field: \"sk\",\n        composite: [\"project\", \"employee\"],\n      },\n    },\n    project: {\n      index: \"gsi1pk-gsi1sk-index\",\n      pk: {\n        field: \"gsi1pk\",\n        composite: [\"project\"],\n      },\n      sk: {\n        field: \"gsi1sk\",\n        composite: [\"employee\", \"task\"],\n      },\n    },\n    assigned: {\n      collection: \"assignments\",\n      index: \"gsi3pk-gsi3sk-index\",\n      pk: {\n        field: \"gsi3pk\",\n        composite: [\"employee\"],\n      },\n      sk: {\n        field: \"gsi3sk\",\n        composite: [\"project\", \"task\"],\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Employee Assignments in TypeScript with ElectroDB\nDESCRIPTION: Shows how to fetch employee details and their assigned tasks using collections.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/examples/task-manager.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data, cursor } = await taskManager.collections\n  .assignments({ employee: \"tyler.walch\" })\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Querying Checked Out Books by Author in TypeScript\nDESCRIPTION: This snippet demonstrates how to query all copies of books by a specific author that are not available for checkout. It uses a comparison with 'AVAILABLE' to filter out books that are currently on loan.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/examples/library-system.mdx#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst BOOK_IS_AVAILABLE = \"AVAILABLE\";\n\nconst { data, cursor } = await book.query\n  .author({\n    authorLastName: \"king\",\n    authorFirstName: \"stephen\",\n  })\n  .lt({ loanEndDate: BOOK_IS_AVAILABLE })\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Implementing Sparse Indexes with Condition Callback in ElectroDB\nDESCRIPTION: This example shows how to create a sparse index using a condition callback in ElectroDB. The index 'myIndex' will only include items where the 'type' attribute is 'closed'.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/modeling/indexes.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  indexes: {\n    myIndex: {\n      index: \"gsi1\",\n      condition: (attr) => attr.type === \"closed\"\n      pk: {\n        field: \"gsi1pk\",\n        composite: [\"organizationId\"]\n      },\n      sk: {\n        field: \"gsi1sk\",\n        composite: [\"type\", \"accountId\"]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Filtering with Where Clauses\nDESCRIPTION: Example demonstrating dynamic filtering with where clauses. This function builds a query that excludes animals with certain keepers by dynamically adding multiple where clauses in a loop.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/conditions.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntype GetAnimalOptions = {\n  habitat: string;\n  keepers: string[];\n};\nfunction getAnimals(options: GetAnimalOptions) {\n  const { habitat, excludeKeepers } = options;\n  const query = animals.query.exhibit({ habitat });\n\n  for (const name of excludeKeepers) {\n    query.where(({ keeper }, { ne }) => ne(keeper, name));\n  }\n\n  return query.go();\n}\n\nconst { data, cursor } = await getAnimals({\n  habitat: \"RainForest\",\n  keepers: [\"Joe Exotic\", \"Carol Baskin\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Office Details and Employees\nDESCRIPTION: Shows how to retrieve all employees and office details for a specific office location using the workplaces collection.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/examples/human-resources.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nawait EmployeeApp.collections.workplaces({ office: \"big cat rescue\" }).go();\n```\n\n----------------------------------------\n\nTITLE: Removing an Attribute with ElectroDB Patch\nDESCRIPTION: This example shows how to use the patch method to remove an attribute (discount) from a store location. It includes a condition to only update if the current category is 'food/coffee'.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/patch.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nawait StoreLocations.patch({ cityId, mallId, storeId, buildingId })\n  .remove([\"discount\"])\n  .where((attr, op) => op.eq(attr.category, \"food/coffee\"))\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Defining Organization Entity with ElectroDB in TypeScript\nDESCRIPTION: Creates an Organization entity with a primary record index and a secondary 'all' index that includes deletion status. The entity includes attributes for id, name, description, deletion status, and creation timestamp with appropriate type definitions and constraints.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/partials/example-entity-organization.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity } from \"electrodb\";\n\nconst table = \"electro\";\n\nconst Organization = new Entity(\n  {\n    model: {\n      entity: \"organization\",\n      service: \"app\",\n      version: \"1\",\n    },\n    attributes: {\n      id: {\n        type: \"string\",\n      },\n      name: {\n        type: \"string\",\n        required: true,\n      },\n      description: {\n        type: \"string\",\n      },\n      deleted: {\n        type: \"boolean\",\n        required: true,\n        default: false,\n      },\n      createdAt: {\n        type: \"string\",\n        readOnly: true,\n        required: true,\n        set: () => new Date().toISOString(),\n        default: () => new Date().toISOString(),\n      },\n    },\n    indexes: {\n      record: {\n        pk: {\n          field: \"pk\",\n          composite: [\"id\"],\n        },\n        sk: {\n          field: \"sk\",\n          composite: [],\n        },\n      },\n      all: {\n        index: \"gsi1pk-gsi1sk-index\",\n        pk: {\n          field: \"gsi1pk\",\n          composite: [],\n        },\n        sk: {\n          field: \"gsi1sk\",\n          composite: [\"deleted\", \"createdAt\"], // SK has both readonly and mutable attributes\n        },\n      },\n    },\n  },\n  { table },\n);\n```\n\n----------------------------------------\n\nTITLE: ElectroDB Complex Update Operations Example\nDESCRIPTION: Demonstrates various update operations using ElectroDB's data() method, including set, add, subtract, remove, append, and delete operations on different attribute types.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/patch.mdx#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nawait StoreLocations.patch({ cityId, mallId, storeId, buildingId })\n  .data((a, o) => {\n    const newTenant = o.value(a.tenants, [\"larry\"]);\n    o.set(a.category, \"food/meal\");\n    o.add(a.tenants, newTenant);\n    o.add(a.warnings, 1);\n    o.subtract(a.deposit, 200);\n    o.remove(a.discount);\n    o.append(a.rentalAgreement, [\n      {\n        type: \"ammendment\",\n        detail: \"no soup for you\"\n      }\n    ]);\n    o.delete(a.tags, [\"coffee\"]);\n    o.del(a.contact, [\"555-345-2222\"]);\n    o.add(a.fees, o.name(a.petFee));\n  })\n  .where((attr, op) => op.eq(attr.category, \"food/coffee\"))\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Querying Books on Loan to a Specific Member in TypeScript with ElectroDB\nDESCRIPTION: This code snippet shows how to query all books currently on loan to a specific member using the ElectroDB query API.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/examples/library-system.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data, cursor } = await book.query.loans({ memberId: \"0000001\" }).go();\n```\n\n----------------------------------------\n\nTITLE: Using Composite Chain Method for Key Construction in ElectroDB\nDESCRIPTION: This example shows how to use the composite chain method in ElectroDB to build keys during an update using attributes that are not being modified. It's particularly useful for migrating existing entities or updating attributes in an index composite when some attributes are readOnly.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/patch.mdx#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst id = \"00001\";\nconst existing = await Organization.get({ id }).go();\n\nif (existing.data?.deleted) {\n  await Organization.patch({ id: \"00001\" })\n    .set({ deleted: false })\n    .composite({ createdAt: existing.data.createdAt })\n    .go();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Index Key Casing in ElectroDB\nDESCRIPTION: This snippet demonstrates how to configure casing for index keys in ElectroDB. It shows setting uppercase casing for the partition key and no casing conversion for the sort key of a GSI.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/modeling/indexes.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  indexes: {\n    myIndex: {\n      index: \"gsi1\",\n      pk: {\n        field: \"gsi1pk\",\n        casing: \"upper\", // Acct_0120 -> ACCT_0120\n        composite: [\"organizationId\"]\n      },\n      sk: {\n        field: \"gsi1sk\",\n        casing: \"none\", // Acct_0120 -> Acct_0120\n        composite: [\"accountId\"]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Map Attributes in ElectroDB\nDESCRIPTION: Example of filtering queries based on nested map attributes using the where() method with complex attribute types.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/queries/filters.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nanimals.query\n  .farm({ habitat: \"Africa\" })\n  .where(({ veterinarian }, { eq }) => eq(veterinarian.name, \"Herb Peterson\"))\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Processing DynamoDB Stream Events with ElectroDB Parse in TypeScript\nDESCRIPTION: Shows how to handle DynamoDB stream events by first unmarshalling the response using the DynamoDB Converter and then applying the parse() method. This converts stream events into typed business entities.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/reference/parse.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { unmarshall } from '@aws-sdk/util-dynamodb';\nimport { DynamoDBStreamEvent } from \"aws-lambda\";\nimport { MyEntity } from \"./my-entity\";\n\nfunction main(event: DynamoDBStreamEvent) {\n  const parsed = event.Records.map((record) =>\n    unmarshall(record.dynamodb.NewImage),\n  ).map((item) => MyEntity.parse({ Item: item }));\n\n  console.log(parsed);\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Project Tasks in TypeScript with ElectroDB\nDESCRIPTION: Shows how to find tasks by status and points criteria for a specific project.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/examples/task-manager.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst status = \"open\";\nconst project = \"135-53\";\n\nconst tasks = await taskManager.entities.task.query\n  .statuses({ status, project })\n  .where(({ points }, { lte }) => lte(points, 13))\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Updating Composite Attributes in ElectroDB\nDESCRIPTION: This example demonstrates how to update composite attributes in ElectroDB while maintaining data consistency. It shows how ElectroDB prevents partial updates to composite keys and leverages values from the primary index for secondary index updates.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/patch.mdx#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nentity\n  .patch({ attr1: \"value1\", attr2: \"value2\" })\n  .set({ attr4: \"value4\" })\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Defining Repositories Entity in ElectroDB\nDESCRIPTION: This snippet defines the 'repositories' entity using ElectroDB. It includes attributes like repoName, repoOwner, description, and various metadata fields. The entity also defines indexes for efficient querying.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/examples/version-control.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport const repositories = new Entity({\n  model: {\n    entity: \"repositories\",\n    service: \"versioncontrol\",\n    version: \"1\",\n  },\n  attributes: {\n    repoName: {\n      type: \"string\",\n    },\n    repoOwner: {\n      type: \"string\",\n    },\n    about: {\n      type: \"string\",\n    },\n    username: {\n      type: \"string\",\n      readOnly: true,\n      watch: [\"repoOwner\"],\n      set: (_, { repoOwner }) => repoOwner,\n    },\n    description: {\n      type: \"string\",\n    },\n    isPrivate: {\n      type: \"boolean\",\n    },\n    license: {\n      type: licenses,\n    },\n    defaultBranch: {\n      type: \"string\",\n      default: \"main\",\n    },\n    topics: {\n      type: \"set\",\n      items: \"string\",\n    },\n    followers: {\n      type: \"set\",\n      items: \"string\",\n    },\n    stars: {\n      type: \"set\",\n      items: \"string\",\n    },\n    createdAt: {\n      type: \"string\",\n      set: () => moment.utc().format(),\n      readOnly: true,\n    },\n    updatedAt: {\n      type: \"string\",\n      watch: \"*\",\n      set: () => moment.utc().format(),\n      readOnly: true,\n    },\n  },\n  indexes: {\n    repositories: {\n      collection: \"alerts\",\n      pk: {\n        composite: [\"repoOwner\"],\n        field: \"pk\",\n      },\n      sk: {\n        composite: [\"repoName\"],\n        field: \"sk\",\n      },\n    },\n    created: {\n      collection: \"owned\",\n      index: \"gsi1pk-gsi1sk-index\",\n      pk: {\n        composite: [\"username\"],\n        field: \"gsi1pk\",\n      },\n      sk: {\n        composite: [\"isPrivate\", \"createdAt\"],\n        field: \"gsi1sk\",\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Books by Author's Full Name in TypeScript\nDESCRIPTION: This snippet demonstrates how to query all books or copies by an author's full name using ElectroDB. It's a duplicate access pattern that allows for additional access patterns, including cross-entity collection.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/examples/library-system.mdx#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data, cursor } = await book.query\n  .author({ authorLastName: \"king\", authorFirstName: \"stephen\" })\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Querying Office Locations\nDESCRIPTION: Demonstrates how to find office locations by country and state using both service and entity-level queries.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/examples/human-resources.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// on the service\nawait EmployeeApp.entities.office\n  .locations({ country: \"usa\", state: \"florida\" })\n  .go();\n\n// on the entity\nawait office.locations({ country: \"usa\", state: \"florida\" }).go();\n```\n\n----------------------------------------\n\nTITLE: Retrieving an Item Using ElectroDB Get Method in TypeScript\nDESCRIPTION: A basic example showing how to use the 'get' method to retrieve a single store location by providing all required Table Index composite attributes as an object.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/queries/get.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst results = await StoreLocations.get({\n  storeId: \"LatteLarrys\",\n  mallId: \"EastPointe\",\n  buildingId: \"F34\",\n  cityId: \"Atlanta1\",\n}).go();\n```\n\n----------------------------------------\n\nTITLE: Paginated Query with Count Limit\nDESCRIPTION: Implementation of a paginated query function with count limiting to control the number of items returned per request.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/queries/pagination.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype GetItemsOptions = {\n  mallId: string;\n  cursor: string;\n  limit?: number;\n}\n\nasync function getLeases(options: GetItemsOptions) {\n  const { mallId, cursor, limit } = options;\n\n  if (limit < 1 || limit >= 200) {\n    throw new Error('Limit must be at least 1 and at most 200');\n  }\n\n  return MallStores.query.leases({ mallId })\n    .go({ cursor, count: limit });\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Items to Nested Complex Attributes in ElectroDB\nDESCRIPTION: This snippet demonstrates how to add an item to a 'set' attribute within a 'map' attribute that is an element of a 'list' attribute using ElectroDB. It shows two methods: using the patch method directly and using the data method with a callback function.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/patch.mdx#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// Set values must use the DocumentClient to create a `set`\nconst newSetValue = StoreLocations.client.createSet(\"setItemValue\");\n\n// via Data Method\nawait StoreLocations.patch({ cityId, mallId, storeId, buildingId })\n  .add({ \"listAttribute[1].setAttribute\": newSetValue })\n  .go();\n\nawait StoreLocations.patch({ cityId, mallId, storeId, buildingId })\n  .data(({ listAttribute }, { add }) => {\n    add(listAttribute[1].setAttribute, newSetValue);\n  })\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Querying Workplace Information in TypeScript with ElectroDB\nDESCRIPTION: Demonstrates querying across entities using Collections to find office and staff information.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/examples/task-manager.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst workplace = await taskManager.collections\n  .workplaces({ office: \"portland\" })\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Defining Subscriptions Entity in ElectroDB\nDESCRIPTION: This snippet defines the 'subscriptions' entity using ElectroDB. It includes attributes for repository and ticket subscriptions, with custom setters and getters for ticket-related fields. The entity also defines indexes for querying subscriptions by repository, user, and tickets.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/examples/version-control.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport const subscriptions = new Entity({\n  model: {\n    entity: \"subscription\",\n    service: \"versioncontrol\",\n    version: \"1\",\n  },\n  attributes: {\n    repoName: {\n      type: \"string\",\n      required: true,\n    },\n    repoOwner: {\n      type: \"string\",\n      required: true,\n    },\n    username: {\n      type: \"string\",\n      required: true,\n    },\n    ticketNumber: {\n      type: \"string\",\n      default: () => IsNotTicket,\n      set: (ticketNumber) => {\n        if (ticketNumber === IsNotTicket) {\n          return RepositorySubscription;\n        } else {\n          return ticketNumber;\n        }\n      },\n      get: (ticketNumber) => {\n        if (ticketNumber === RepositorySubscription) {\n          return IsNotTicket;\n        } else {\n          return ticketNumber;\n        }\n      },\n    },\n    ticketType: {\n      type: TicketTypes,\n      default: () => IsNotTicket,\n      set: (ticketType) => {\n        if (ticketType === IsNotTicket) {\n          return RepositorySubscription;\n        } else {\n          return ticketType;\n        }\n      },\n      get: (ticketType) => {\n        if (ticketType === RepositorySubscription) {\n          return IsNotTicket;\n        } else {\n          return ticketType;\n        }\n      },\n    },\n    createdAt: {\n      type: \"string\",\n      set: () => moment.utc().format(),\n      readOnly: true,\n    },\n    updatedAt: {\n      type: \"string\",\n      watch: \"*\",\n      set: () => moment.utc().format(),\n      readOnly: true,\n    },\n  },\n  indexes: {\n    repository: {\n      pk: {\n        composite: [\"repoOwner\", \"repoName\"],\n        field: \"pk\",\n      },\n      sk: {\n        composite: [\"username\", \"ticketType\", \"ticketNumber\"],\n        field: \"sk\",\n      },\n    },\n    user: {\n      collection: \"watching\",\n      index: \"gsi3pk-gsi3sk-index\",\n      pk: {\n        composite: [\"username\"],\n        field: \"gsi3pk\",\n      },\n      sk: {\n        composite: [\"ticketType\", \"ticketNumber\"],\n        field: \"gsi3sk\",\n      },\n    },\n    tickets: {\n      collection: \"subscribers\",\n      index: \"gsi4pk-gsi4sk-index\",\n      pk: {\n        composite: [\"repoOwner\", \"repoName\", \"ticketNumber\"],\n        field: \"gsi4pk\",\n      },\n      sk: {\n        composite: [\"ticketType\", \"username\"],\n        field: \"gsi4sk\",\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering Animals with Name Function in TypeScript\nDESCRIPTION: Demonstrates how to use the name() function to create a filter that compares two attributes (lastFedBy and keeper) in a DynamoDB query.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/conditions.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nanimals.query\n  .exhibit({ habitat: \"Africa\", enclosure: \"5b\" })\n  .where(\n    ({ lastFedBy, keeper }, { name }) => `\n    ${name(lastFedBy)} != ${name(keeper)}\n  `,\n  )\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Creating New Store Location in TypeScript\nDESCRIPTION: Creates a new store entry in the mall directory with details like mall ID, store ID, building location, unit number, category, lease end date, and rent.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/examples/shopping-mall-directory.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait StoreLocations.create({\n  mallId: \"EastPointe\",\n  storeId: \"LatteLarrys\",\n  buildingId: \"BuildingA1\",\n  unitId: \"B47\",\n  category: \"spite store\",\n  leaseEndDate: \"2020-02-29\",\n  rent: \"5000.00\",\n}).go();\n```\n\n----------------------------------------\n\nTITLE: Querying Available Books by Author in TypeScript\nDESCRIPTION: This snippet shows how to query all copies of books by a specific author that are available to be checked out. It uses a constant 'AVAILABLE' to indicate book availability in the loanEndDate property.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/examples/library-system.mdx#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst BOOK_IS_AVAILABLE = \"AVAILABLE\";\n\nconst { data, cursor } = await book.query\n  .author({\n    authorLastName: \"king\",\n    authorFirstName: \"stephen\",\n    loanEndDate: BOOK_IS_AVAILABLE,\n  })\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Scanning Items with Filters in ElectroDB\nDESCRIPTION: This code snippet demonstrates how to use the scan method with filters in ElectroDB. It scans for store locations based on category and lease end date criteria.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/queries/scan.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait StoreLocations.scan\n  .where(\n    ({ category }, { eq }) => `\n        ${eq(category, \"food/coffee\")} OR ${eq(category, \"spite store\")}\n    `,\n  )\n  .where(\n    ({ leaseEndDate }, { between }) => `\n        ${between(leaseEndDate, \"2020-03\", \"2020-04\")}\n    `,\n  )\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Querying Member Information and Checked Out Books in TypeScript with ElectroDB\nDESCRIPTION: This code snippet demonstrates how to retrieve member information and their checked out books using the ElectroDB collections API, then structuring the data into a custom object.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/examples/library-system.mdx#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst results = await library.collections\n  .account({ memberId: \"0000001\" })\n  .go()\n  .then((result) => {\n    const [member] = result.data.member;\n    const books = result.data.book;\n    return {\n      member,\n      books,\n    };\n  });\n```\n\n----------------------------------------\n\nTITLE: Implementing Counter Transaction Operations\nDESCRIPTION: Demonstrates transactional operations for creating and removing employees while maintaining various counter states using DynamoDB transactions.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/recipes/item-counters.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst AccountService = new Service({ Employee, OrganizationItemCounter, TeamCounter, GlobalCounter });\n\nexport type CreateEmployeeOptions = {\n  organizationId: string;\n  teamId: string;\n  employeeId: string;\n  name: string;\n}\n\nexport function createEmployee(options: CreateEmployeeOptions) {\n  const { organizationId, employeeId, name, teamId } = options;\n\n  return AccountService.transaction.write(({ Employee, OrganizationItemCounter, GlobalCounter, TeamCounter }) => [\n    Employee.create({ organizationId, employeeId, name }).commit(),\n\n    GlobalCounter.upsert({}).add({count: 1}).commit(),\n    TeamCounter.upsert({organizationId, teamId}).add({count: 1}).commit(),\n    OrganizationItemCounter.upsert({organizationId, kind: 'employee'}).add({count: 1}).commit(),\n  ]).go();\n}\n\nexport type RemoveEmployeeOptions = {\n  organizationId: string;\n  teamId: string;\n  employeeId: string;\n}\n\nexport function removeEmployee(options: RemoveEmployeeOptions) {\n  const { organizationId, employeeId, teamId } = options;\n\n  return AccountService.transaction.write(({ Employee, OrganizationItemCounter, GlobalCounter, TeamCounter }) => [\n    Employee.remove({ organizationId, employeeId }).commit(),\n\n    GlobalCounter.upsert({}).subtract({count: 1}).commit(),\n    TeamCounter.upsert({organizationId, teamId}).subtract({count: 1}).commit(),\n    OrganizationItemCounter.upsert({organizationId, kind: 'employee'}).subtract({count: 1}).commit(),\n  ]).go();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Service in ElectroDB with TypeScript\nDESCRIPTION: This snippet demonstrates how to create a Service in ElectroDB by importing the Service class and initializing it with Entity objects. It shows how to assign aliases to entities and provide optional table and client parameters.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/modeling/services.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Service } from \"electrodb\";\n\nconst TaskApp = new Service(\n  {\n    employee: Employee, // available at TaskApp.entities.personnel\n    task: Task, // available at TaskApp.entities.directives\n  },\n  { table, client },\n);\n```\n\n----------------------------------------\n\nTITLE: ElectroDB Collection Response Format\nDESCRIPTION: This snippet shows the structure of the response returned from a collection query in ElectroDB. The response contains separate arrays for each entity type in the collection.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/modeling/collections.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  data: {\n    task: EmployeeItem[];\n    employee: TaskItem[];\n  }\n  cursor: string | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Index With Empty Sort Key in ElectroDB\nDESCRIPTION: This example shows how to define an index with a sort key that has no composite attributes. This allows for more query opportunities and access patterns like collections.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/modeling/indexes.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  indexes: {\n    myIndex: {\n      pk: {\n        field: \"pk\",\n        composite: [\"id\"]\n      },\n      sk: {\n        field: \"sk\",\n        composite: []\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Organization with Composite Method in JavaScript\nDESCRIPTION: This example demonstrates updating an organization entity using the composite method to handle read-only attributes in the index. It updates the 'deleted' field while preserving the 'createdAt' value.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/update.mdx#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst id = \"00001\";\nconst existing = await Organization.get({ id }).go();\n\nif (existing.data?.deleted) {\n  await Organization.update({ id: \"00001\" })\n    .set({ deleted: false })\n    .composite({ createdAt: existing.data.createdAt })\n    .go();\n}\n```\n\n----------------------------------------\n\nTITLE: Collection Query Equivalent DynamoDB Parameters\nDESCRIPTION: This shows the raw DynamoDB parameters that ElectroDB generates when executing a collection query. It demonstrates how the partition key and sort key are structured for collection queries.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/modeling/collections.mdx#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"TableName\": \"projectmanagement\",\n  \"ExpressionAttributeNames\": { \"#pk\": \"gsi2pk\", \"#sk1\": \"gsi2sk\" },\n  \"ExpressionAttributeValues\": {\n    \":pk\": \"$taskapp_1#employeeid_joeexotic\",\n    \":sk1\": \"$assignments\"\n  },\n  \"KeyConditionExpression\": \"#pk = :pk and begins_with(#sk1, :sk1)\",\n  \"IndexName\": \"gsi2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Query with Partition Key and First Sort Key\nDESCRIPTION: Shows querying with partition key and the first sort key attribute included\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/queries/query.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait StoreLocations.query\n  .stores({\n    cityId: \"Atlanta1\",\n    mallId: \"EastPointe\",\n    buildingId: \"f34\",\n  })\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Querying Project Tasks\nDESCRIPTION: Shows how to query all tasks associated with a specific project using both service and entity-level queries.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/examples/human-resources.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// on the service\nawait EmployeeApp.entities.tasks.query\n  .project({ project: \"Murder Carol\" })\n  .go();\n\n// on the entity\nawait tasks.query.project({ project: \"Murder Carol\" }).go();\n```\n\n----------------------------------------\n\nTITLE: Custom Filter Expression Using Name and Value Functions\nDESCRIPTION: Shows how to create custom filter expressions using ElectroDB's name() and value() functions for comparing keeper attributes.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/queries/filters.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nanimals.query\n  .exhibit({ habitat: \"Africa\", enclosure: \"5b\" })\n  .where(\n    ({ keeper }, { name, value, eq }) => `\n    ${name(keeper)} = ${value(keeper, \"Tiger King\")}\n  `,\n  )\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Querying Books Within a Genre and Subgenre in TypeScript\nDESCRIPTION: This snippet shows how to query books within a specific genre and subgenre combination using ElectroDB.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/examples/library-system.mdx#2025-04-21_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data, cursor } = await genre.query\n  .categories({ genre: \"horror\", subgenre: \"killer clowns\" })\n  .go();\n```\n\n----------------------------------------\n\nTITLE: ElectroDB Query Options Interface in TypeScript\nDESCRIPTION: TypeScript interface showing all available query options that can be used with ElectroDB's `.params()` and `.go()` methods. These options control query behavior, data formatting, pagination, error handling, and more when interacting with DynamoDB.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/partials/query-options.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  params?: object;\n  table?: string;\n  data?: 'raw' | 'includeKeys' | 'attributes';\n  pager?: 'raw' | 'cursor';\n  originalErr?: boolean;\n  response?: \"default\" | \"none\" | \"all_old\" | \"updated_old\" | \"all_new\" | \"updated_new\";\n  ignoreOwnership?: boolean;\n  limit?: number;\n  count?: number;\n  pages?: number | 'all';\n  logger?: (event) => void;\n  listeners Array<(event) => void>;\n  attributes?: string[];\n  order?: 'asc' | 'desc';\n  compare?: 'attributes' | 'keys' | 'v2';\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Options Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for ElectroDB query execution options. Includes options for customizing params, table selection, data formatting, error handling, concurrent operations, unprocessed records handling, response values, ownership checking, and logging capabilities.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/partials/mutation-query-options.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  params?: object;\n  table?: string;\n  data?: 'raw' | 'includeKeys' | 'attributes';\n  originalErr?: boolean;\n  concurrent?: number;\n  unprocessed?: \"raw\" | \"item\";\n  response?: \"default\" | \"none\" | \"all_old\" | \"updated_old\" | \"all_new\" | \"updated_new\";\n  ignoreOwnership?: boolean;\n  logger?: (event) => void;\n  listeners Array<(event) => void>;\n  attributes?: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Unique Genres by Author in TypeScript\nDESCRIPTION: This snippet demonstrates how to query and extract unique genres associated with a specific author. It uses a Set to ensure uniqueness of the genres.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/examples/library-system.mdx#2025-04-21_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nawait genre.query\n  .author({ authorFirstName: \"stephen\", authorLastName: \"king\" })\n  .go()\n  .then((results) => {\n    const uniqueGenres = new Set<string>();\n    for (const { genre } of results.data) {\n      uniqueGenres.add(genre);\n    }\n    return Array.from(uniqueGenres);\n  });\n```\n\n----------------------------------------\n\nTITLE: Creating an Asset Entity with ElectroDB\nDESCRIPTION: TypeScript implementation of an ElectroDB Entity for assets with two access patterns: a primary index for retrieving by accountId and assetId, and a GSI 'locations' for querying assets by geographic information.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/recipes/keys-only-gsi.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport DynamoDB from \"aws-sdk/clients/dynamodb\";\nimport { Entity } from 'electrodb';\n\nconst client = new DynamoDB.DocumentClient();\n\nconst table = 'electro';\n\nconst assets = new Entity({\n    model: {\n        entity: 'assets',\n        version: '1',\n        service: 'inventory'\n    },\n    attributes: {\n        assetId: {\n            type: 'string'\n        },\n        accountId: {\n            type: 'string'\n        },\n        name: {\n            type: 'string'\n        },\n        description: {\n            type: 'string'\n        },\n        city: {\n            type: 'string'\n        },\n        county: {\n            type: 'string'\n        },\n        state: {\n            type: 'string'\n        },\n        zip: {\n            type: 'string'\n        }\n    },\n    indexes: {\n        assets: {\n            pk: {\n                field: 'pk',\n                composite: ['accountId']\n            },\n            sk: {\n                field: 'sk',\n                composite: ['assetId']\n            }\n        },\n        locations: {\n            collection: 'geographics',\n            index: 'gsi1pk-gsi1sk-index',\n            pk: {\n                field: 'gsi1pk',\n                composite: ['state'],\n            },\n            sk: {\n                field: 'gsi1sk',\n                composite: ['county', 'city', 'zip'],\n            }\n        }\n}\n}, { table, client });\n```\n\n----------------------------------------\n\nTITLE: Comparing Entity and Collection Query Parameters in ElectroDB\nDESCRIPTION: These snippets highlight the key difference in sort key parameter structure between entity and collection queries. Collection queries use a more general sort key prefix.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/modeling/collections.mdx#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ExpressionAttributeValues\": { \":sk1\": \"$assignments#tasks_1\" }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ExpressionAttributeValues\": { \":sk1\": \"$assignments\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Team Members by Hire Date in TypeScript with ElectroDB\nDESCRIPTION: Demonstrates finding team members based on their hire date range using moment.js for date calculations.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/examples/task-manager.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst team = \"marketing\";\nconst twoYearsAgo = moment.utc().subtract(2, \"years\").format(\"YYYY-MM-DD\");\nconst fiveYearsAgo = moment.utc().subtract(5, \"years\").format(\"YYYY-MM-DD\");\n\nconst recentHires = await taskManager.entities.employee.query\n  .teams({ team })\n  .between({ dateHired: fiveYearsAgo }, { dateHired: twoYearsAgo })\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Filtering Lease Agreements with Multiple Conditions\nDESCRIPTION: Shows how to query lease agreements with multiple conditions including date range, city, and category filters using ElectroDB's query API with complex where clause.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/queries/query.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nawait StoreLocations.query\n  .leases({ storeId: \"LatteLarrys\" })\n  .gte({ leaseEndDate: \"2010-00-00\" })\n  .where(\n    (attr, op) => `\n      ${op.eq(attr.cityId, \"Atlanta1\")} AND ${op.contains(\n        attr.category,\n        \"food\",\n      )}\n  `,\n  )\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Defining DynamoDB Table with Generic Pay-Per-Request Configuration in JSON\nDESCRIPTION: This JSON snippet shows the DynamoDB table definition with a generic Pay-Per-Request configuration. It includes the main table structure and a Global Secondary Index, using generic attribute names for flexibility.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/modeling/schema.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"TableName\": \"electro\",\n  \"KeySchema\": [\n    {\n      \"AttributeName\": \"pk\",\n      \"KeyType\": \"HASH\"\n    },\n    {\n      \"AttributeName\": \"sk\",\n      \"KeyType\": \"RANGE\"\n    }\n  ],\n  \"AttributeDefinitions\": [\n    {\n      \"AttributeName\": \"pk\",\n      \"AttributeType\": \"S\"\n    },\n    {\n      \"AttributeName\": \"sk\",\n      \"AttributeType\": \"S\"\n    },\n    {\n      \"AttributeName\": \"gsi1pk\",\n      \"AttributeType\": \"S\"\n    },\n    {\n      \"AttributeName\": \"gsi1sk\",\n      \"AttributeType\": \"S\"\n    }\n  ],\n  \"GlobalSecondaryIndexes\": [\n    {\n      \"IndexName\": \"gsi1pk-gsi1sk-index\",\n      \"KeySchema\": [\n        {\n          \"AttributeName\": \"gsi1pk\",\n          \"KeyType\": \"HASH\"\n        },\n        {\n          \"AttributeName\": \"gsi1sk\",\n          \"KeyType\": \"RANGE\"\n        }\n      ],\n      \"Projection\": {\n        \"ProjectionType\": \"ALL\"\n      }\n    }\n  ],\n  \"BillingMode\": \"PAY_PER_REQUEST\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Types and Utility Functions for Version Control System in TypeScript\nDESCRIPTION: This code snippet defines types and utility functions for a version control system. It includes definitions for status types, ticket types, and functions for converting between status codes and strings. It also provides type guards for identifying issue and pull request comments.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/examples/version-control.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/* istanbul ignore file */\nimport { IssueCommentIds, PullRequestCommentIds } from \"./index\";\n\nexport const StatusTypes = [\"Open\", \"Closed\"] as const;\n\nexport type Status = (typeof StatusTypes)[number];\n\nexport function toStatusCode(status: unknown) {\n  for (let index in StatusTypes) {\n    if (StatusTypes[index] === status) {\n      return `${index}`;\n    }\n  }\n}\n\nexport function toStatusString(code: unknown) {\n  for (let index in StatusTypes) {\n    if (`${index}` === code) {\n      return StatusTypes[index];\n    }\n  }\n}\n\nexport const PullRequestTicket = \"PullRequest\";\nexport const IssueTicket = \"Issue\";\nexport const IsNotTicket = \"\";\nexport const TicketTypes = [\n  IssueTicket,\n  PullRequestTicket,\n  IsNotTicket,\n] as const;\n\nexport const NotYetViewed = \"#\";\n\nexport type SubscriptionTypes = (typeof TicketTypes)[number];\n\nexport function isIssueCommentIds(comment: any): comment is IssueCommentIds {\n  return comment.issueNumber !== undefined && comment.username !== undefined;\n}\n\nexport function isPullRequestCommentIds(\n  comment: any,\n): comment is PullRequestCommentIds {\n  return (\n    comment.pullRequestNumber !== undefined && comment.username !== undefined\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Entity with Opaque Types in ElectroDB (TypeScript)\nDESCRIPTION: This snippet demonstrates how to create an Entity in ElectroDB using opaque types for employeeId and ageInMonths. It uses CustomAttributeType to define these attributes with their base primitive types while maintaining type safety.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/recipes/opaque-types.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, CustomAttributeType } from \"electrodb\";\n\nconst UniqueKeySymbol: unique symbol = Symbol();\ntype EmployeeID = string & { [UniqueKeySymbol]: any };\n\nconst UniqueAgeSymbol: unique symbol = Symbol();\ntype Month = number & { [UniqueAgeSymbol]: any };\n\nconst table = \"workplace_table\";\n\nconst person = new Entity(\n  {\n    model: {\n      entity: \"personnel\",\n      service: \"workplace\",\n      version: \"1\",\n    },\n    attributes: {\n      employeeId: {\n        type: CustomAttributeType<EmployeeID>(\"string\"),\n      },\n      firstName: {\n        type: \"string\",\n        required: true,\n      },\n      lastName: {\n        type: \"string\",\n        required: true,\n      },\n      ageInMonths: {\n        type: CustomAttributeType<Month>(\"number\"),\n      },\n    },\n    indexes: {\n      record: {\n        pk: {\n          field: \"pk\",\n          composite: [\"employeeId\"],\n        },\n        sk: {\n          field: \"sk\",\n          composite: [],\n        },\n      },\n    },\n  },\n  { table },\n);\n```\n\n----------------------------------------\n\nTITLE: Finding Store Locations Using ElectroDB Find Method\nDESCRIPTION: Example showing how to use the Find method to query store locations by mallId and buildingId. The method automatically determines the best index to use for the query.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/queries/find.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait StoreLocations.find({\n  mallId: \"EastPointe\",\n  buildingId: \"BuildingA1\",\n}).go();\n```\n\n----------------------------------------\n\nTITLE: Implementing Access Patterns for Version Control System\nDESCRIPTION: This section defines various access patterns for the version control system, including functions to retrieve public repositories, review pull requests and issues, get user pull requests, close pull requests, load user data, get subscriptions, and retrieve unread comments.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/examples/version-control.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function getPublicRepository(username: string) {\n  return store.entities.repositories.query.created({\n    username,\n    isPrivate: false,\n  });\n}\n\nexport async function reviewPullRequest(options: {\n  pr: PullRequestIds;\n  cursor?: string;\n}) {\n  const { pr, cursor } = options;\n  return store.collections.PRReview(pr).go({ cursor, order: \"desc\" });\n}\n\nexport async function reviewIssue(options: {\n  issue: IssueIds;\n  cursor?: string;\n}) {\n  const { issue, cursor } = options;\n  return store.collections.issueReview(issue).go({ cursor, order: \"desc\" });\n}\n\nexport async function getUserPullRequests(options: {\n  username: string;\n  status?: Status;\n  cursor?: string;\n}) {\n  const { username, status, cursor } = options;\n  return store.entities.pullRequests.query\n    .created({ username, status })\n    .go({ cursor, order: \"desc\" });\n}\n\nexport async function closePullRequest(user: string, pr: PullRequestIds) {\n  return store.entities.pullRequests\n    .update(pr)\n    .set({ status: \"Closed\" })\n    .where(\n      ({ username, repoOwner }, { eq }) => `\n            ${eq(username, user)} OR ${eq(repoOwner, user)}\n        `,\n    )\n    .go();\n}\n\nexport async function getFirstPageLoad(username: string) {\n  const results: OwnedItems = {\n    issues: [],\n    pullRequests: [],\n    repositories: [],\n    users: [],\n  };\n\n  let next = null;\n\n  do {\n    const { cursor, data } = await store.collections.owned({ username }).go();\n    results.issues = results.issues.concat(data.issues);\n    results.pullRequests = results.pullRequests.concat(data.pullRequests);\n    results.repositories = results.repositories.concat(data.repositories);\n    results.users = results.users.concat(data.users);\n    next = cursor;\n  } while (next !== null);\n\n  return results;\n}\n\nexport async function getSubscribed(\n  repoOwner: string,\n  repoName: string,\n  ticketNumber: string = IsNotTicket,\n) {\n  return store.collections\n    .subscribers({ repoOwner, repoName, ticketNumber })\n    .go();\n}\n\nconst MinDate = \"0000-00-00\";\nconst MaxDate = \"9999-99-99\";\n\nexport async function getUnreadComments(user: string) {\n  const start = {\n    createdAt: MinDate,\n    replyViewed: NotYetViewed,\n  };\n  const end = {\n    createdAt: MaxDate,\n    replyViewed: NotYetViewed,\n  };\n  let [issues, pullRequests] = await Promise.all([\n    store.entities.issueComments.query\n      .replies({ replyTo: user })\n      .between(start, end)\n      .go(),\n\n    store.entities.pullRequestComments.query\n      .replies({ replyTo: user })\n      .between(start, end)\n      .go(),\n  ]);\n\n  return {\n    issues,\n    pullRequests,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Employee Tasks and Information\nDESCRIPTION: Demonstrates how to query all tasks and employee information for a specific employee using the assignments collection.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/examples/human-resources.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nawait EmployeeApp.collections.assignments({ employee: \"CBaskin\" }).go();\n```\n\n----------------------------------------\n\nTITLE: Querying Book and Genre Details in TypeScript\nDESCRIPTION: These snippets show how to query a book and its genres by ISBN or book title using the library collections.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/examples/library-system.mdx#2025-04-21_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nawait library.collections.detail({ isbn: \"9783453435773\" }).go();\nawait library.collections.titles({ bookTitle: \"it\" }).go();\n```\n\n----------------------------------------\n\nTITLE: Updating Composite Attributes Example in TypeScript\nDESCRIPTION: This code snippet demonstrates updating an entity with composite attributes in ElectroDB, showing how the library handles partial updates to maintain data consistency across indexes.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/update.mdx#2025-04-21_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nentity\n  .update({ attr1: \"value1\", attr2: \"value2\" })\n  .set({ attr4: \"value4\" })\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Querying Lease Agreements\nDESCRIPTION: Series of examples showing different ways to query lease agreements using various operators\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/queries/query.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nawait StoreLocations.query.leases({ storeId: \"LatteLarrys\" }).go();\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait StoreLocations.query\n  .leases({\n    storeId: \"LatteLarrys\",\n    leaseEndDate: \"2020-03-22\",\n  })\n  .go();\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait StoreLocations.query\n  .leases({ storeId: \"LatteLarrys\" })\n  .begins({ leaseEndDate: \"2020-00-00\" })\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Defining Repositories Entity with ElectroDB in TypeScript\nDESCRIPTION: Beginning of a Repositories entity definition for a version control system using ElectroDB. The snippet shows the entity import and the start of license type definitions that would be used in the complete entity definition.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/examples/version-control.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity } from \"electrodb\";\nimport moment from \"moment\";\n\nexport const licenses = [\n  \"afl-3.0\",\n  \"apache-2.0\",\n  \"artistic-2.0\",\n  \"bsl-1.0\",\n  \"bsd-2-clause\",\n  \"bsd-3-clause\",\n  \"bsd-3-clause-clear\",\n  \"cc\",\n  \"cc0-1.0\",\n  \"cc-by-4.0\",\n  \"cc-by-sa-4.0\",\n  \"wtfpl\",\n  \"ecl-2.0\",\n  \"epl-1.0\",\n  \"epl-2.0\",\n  \"eupl-1.1\",\n  \"agpl-3.0\",\n  \"gpl\",\n  \"gpl-2.0\",\n  \"gpl-3.0\",\n  \"lgpl\",\n  \"lgpl-2.1\",\n  \"lgpl-3.0\",\n  \"isc\",\n  \"lppl-1.3c\",\n  \"ms-pl\",\n```\n\n----------------------------------------\n\nTITLE: Response Format for ElectroDB Put Operation\nDESCRIPTION: This snippet shows the expected response format from an ElectroDB Put operation. The response includes a data object containing the schema of the created item.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/put.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  data: {\n    YOUR_SCHEMA;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Books by Title and Partial Release Date in TypeScript\nDESCRIPTION: These snippets demonstrate how to query books by title and partial release date. Queries can be provided with just the year, or the year and month, allowing for flexible date-based searches.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/examples/library-system.mdx#2025-04-21_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nbook.query.releases({ bookTitle: \"it\" }).gte({ releaseDate: \"1990-00-00\" }).go();\n\nbook.query\n  .releases({ bookTitle: \"it\" })\n  .between({ releaseDate: \"1990-00-00\" }, { releaseDate: \"2019-99-99\" })\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Entity Logger Implementation\nDESCRIPTION: Example of implementing a logger callback function when instantiating an Entity in ElectroDB. Shows how to set up logging for entity-level events.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/reference/events-logging.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DynamoDB } from \"aws-sdk\";\nimport { Entity, ElectroEvent } from \"electrodb\";\n\nconst table = \"my_table_name\";\nconst client = new DynamoDB.DocumentClient();\nconst logger = (event: ElectroEvent) => {\n  console.log(JSON.stringify(event, null, 4));\n};\n\nconst task = new Entity(\n  {\n    // your model\n  },\n  {\n    client,\n    table,\n    logger, // <----- logger listener\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Book Record with ElectroDB\nDESCRIPTION: Example of retrieving a single book record by its primary key.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/core-concepts/quick-start.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst book = await Book.get({\n  bookId: \"beedabe8-e34e-4d41-9272-0755be9a2a9f\",\n  storeId: \"pdx-45\",\n}).go();\n```\n\n----------------------------------------\n\nTITLE: Removing an Item with ElectroDB in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the 'remove' method in ElectroDB to delete a store location. It requires providing all composite attributes of the Table Index.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/remove.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait StoreLocations.remove({\n  storeId: \"LatteLarrys\",\n  mallId: \"EastPointe\",\n  buildingId: \"F34\",\n  cityId: \"Atlanta1\",\n}).go();\n```\n\n----------------------------------------\n\nTITLE: Querying Lease Agreements by Date Range\nDESCRIPTION: Demonstrates how to query lease agreements for a specific store between 2010 and 2020 using ElectroDB's between operation.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/queries/query.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nawait StoreLocations.query\n  .leases({ storeId: \"LatteLarrys\" })\n  .between({ leaseEndDate: \"2010-00-00\" }, { leaseEndDate: \"2020-99-99\" })\n  .go();\n```\n\n----------------------------------------\n\nTITLE: DynamoDB Table Definition for ElectroDB\nDESCRIPTION: JSON configuration for creating a DynamoDB table with appropriate key schema and GSI for use with ElectroDB.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/core-concepts/quick-start.mdx#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"TableName\": \"electro\",\n  \"KeySchema\": [\n    {\n      \"AttributeName\": \"pk\",\n      \"KeyType\": \"HASH\"\n    },\n    {\n      \"AttributeName\": \"sk\",\n      \"KeyType\": \"RANGE\"\n    }\n  ],\n  \"AttributeDefinitions\": [\n    {\n      \"AttributeName\": \"pk\",\n      \"AttributeType\": \"S\"\n    },\n    {\n      \"AttributeName\": \"sk\",\n      \"AttributeType\": \"S\"\n    },\n    {\n      \"AttributeName\": \"gsi1pk\",\n      \"AttributeType\": \"S\"\n    },\n    {\n      \"AttributeName\": \"gsi1sk\",\n      \"AttributeType\": \"S\"\n    }\n  ],\n  \"GlobalSecondaryIndexes\": [\n    {\n      \"IndexName\": \"gsi1pk-gsi1sk-index\",\n      \"KeySchema\": [\n        {\n          \"AttributeName\": \"gsi1pk\",\n          \"KeyType\": \"HASH\"\n        },\n        {\n          \"AttributeName\": \"gsi1sk\",\n          \"KeyType\": \"RANGE\"\n        }\n      ],\n      \"Projection\": {\n        \"ProjectionType\": \"ALL\"\n      }\n    }\n  ],\n  \"BillingMode\": \"PAY_PER_REQUEST\"\n}\n```\n\n----------------------------------------\n\nTITLE: ElectroDB Execution Options Interface in TypeScript\nDESCRIPTION: Defines the TypeScript interface for execution options that can be passed to .params() and .go() methods to customize query behavior or add parameters to a query.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/queries/get.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  params?: object;\n  table?: string;\n  data?: 'raw' | 'includeKeys' | 'attributes';\n  originalErr?: boolean;\n  concurrent?: number;\n  ignoreOwnership?: boolean;\n  logger?: (event) => void;\n  listeners Array<(event) => void>;\n  attributes?: string[];\n};\n```\n\n----------------------------------------\n\nTITLE: ElectroDB Find Method Response Format\nDESCRIPTION: Type definition showing the response format of the Find method, which returns an array of records matching the schema and an optional cursor for pagination.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/queries/find.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  data: Array<YOUR_SCHEMA>,\n  cursor: string | undefined\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Authors by Full Name in TypeScript with ElectroDB\nDESCRIPTION: This code snippet demonstrates how to query authors by their full name (last name and first name) using the ElectroDB query API.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/examples/library-system.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nawait author.query\n  .writer({ authorLastName: \"smith\", authorFirstName: \"john\" })\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Querying Employee Salaries by Title\nDESCRIPTION: Shows how to query employees by title with salary constraints using both service and entity-level queries.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/examples/human-resources.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// on the service\nawait EmployeeApp.entities.employees\n  .roles({ title: \"animal wrangler\" })\n  .lte({ salary: \"150.00\" })\n  .go();\n\n// on the entity\nawait employees\n  .roles({ title: \"animal wrangler\" })\n  .lte({ salary: \"150.00\" })\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Querying Books by Store Location and Price with ElectroDB\nDESCRIPTION: Example of querying books using the byLocation index with a price filter condition.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/core-concepts/quick-start.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data, cursor } = await Book.query\n  .byLocation({ storeId: \"pdx-45\" })\n  .where(({ price }, { lte }) => lte(price, 10))\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Performing Batch Delete in ElectroDB with TypeScript\nDESCRIPTION: This snippet demonstrates how to perform a batch delete operation using ElectroDB. It deletes multiple store locations and includes an option for concurrent execution.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/batch-delete.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlet unprocessed = await StoreLocations.delete([\n  {\n    storeId: \"LatteLarrys\",\n    mallId: \"EastPointe\",\n    buildingId: \"F34\",\n    cityId: \"LosAngeles1\",\n  },\n  {\n    storeId: \"MochaJoes\",\n    mallId: \"EastPointe\",\n    buildingId: \"F35\",\n    cityId: \"LosAngeles1\",\n  },\n]).go({ concurrent: 1 }); // `concurrent` value is optional and default's to `1`\n```\n\n----------------------------------------\n\nTITLE: Add Numbers and Sets to Store Location\nDESCRIPTION: Example showing how to add numeric values and set elements to existing attributes using ElectroDB's add() method.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/update.mdx#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nawait StoreLocations.update({ cityId, mallId, storeId, buildingId })\n  .add({\n    warnings: 1, // \"number\" attribute\n    tenants: [\"larry\"], // \"set\" attribute\n  })\n  .where((attr, op) => op.eq(attr.category, \"food/coffee\"))\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Adding Number and Set Values in DynamoDB\nDESCRIPTION: Demonstrates using the add() method to increment a numeric value and add elements to a set attribute.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/patch.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nawait StoreLocations.patch({ cityId, mallId, storeId, buildingId })\n  .add({\n    warnings: 1, // \"number\" attribute\n    tenants: [\"larry\"], // \"set\" attribute\n  })\n  .where((attr, op) => op.eq(attr.category, \"food/coffee\"))\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Employee Birthday and Anniversary Query in TypeScript\nDESCRIPTION: This snippet shows the structure of the response returned when querying for employee birthdays and anniversaries. It includes employee details and a cursor for pagination.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/examples/human-resources.mdx#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  data: [\n    {\n      employee: \"jexotic\",\n      firstName: \"joe\",\n      lastName: \"maldonado-passage\",\n      office: \"gw zoo\",\n      title: \"tiger king\",\n      team: \"founders\",\n      salary: \"10000.00\",\n      manager: \"jlowe\",\n      dateHired: \"1999-02-23\",\n      birthday: \"1963-03-05\",\n    }\n  ],\n  cursor: '...'\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DynamoDB Table Schema for ElectroDB\nDESCRIPTION: This JSON snippet defines the schema for a DynamoDB table named 'electro'. It specifies the primary key structure, attribute definitions, and two global secondary indexes. The table uses PAY_PER_REQUEST billing mode.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/partials/entity-query-example-setup.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"TableName\": \"electro\",\n  \"KeySchema\": [\n    {\n      \"AttributeName\": \"pk\",\n      \"KeyType\": \"HASH\"\n    },\n    {\n      \"AttributeName\": \"sk\",\n      \"KeyType\": \"RANGE\"\n    }\n  ],\n  \"AttributeDefinitions\": [\n    {\n      \"AttributeName\": \"pk\",\n      \"AttributeType\": \"S\"\n    },\n    {\n      \"AttributeName\": \"sk\",\n      \"AttributeType\": \"S\"\n    },\n    {\n      \"AttributeName\": \"gsi1pk\",\n      \"AttributeType\": \"S\"\n    },\n    {\n      \"AttributeName\": \"gsi1sk\",\n      \"AttributeType\": \"S\"\n    }\n  ],\n  \"GlobalSecondaryIndexes\": [\n    {\n      \"IndexName\": \"gsi1pk-gsi1sk-index\",\n      \"KeySchema\": [\n        {\n          \"AttributeName\": \"gsi1pk\",\n          \"KeyType\": \"HASH\"\n        },\n        {\n          \"AttributeName\": \"gsi1sk\",\n          \"KeyType\": \"RANGE\"\n        }\n      ],\n      \"Projection\": {\n        \"ProjectionType\": \"ALL\"\n      }\n    },\n    {\n      \"IndexName\": \"gsi2pk-gsi2sk-index\",\n      \"KeySchema\": [\n        {\n          \"AttributeName\": \"gsi2pk\",\n          \"KeyType\": \"HASH\"\n        },\n        {\n          \"AttributeName\": \"gsi2sk\",\n          \"KeyType\": \"RANGE\"\n        }\n      ],\n      \"Projection\": {\n        \"ProjectionType\": \"ALL\"\n      }\n    }\n  ],\n  \"BillingMode\": \"PAY_PER_REQUEST\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Authors by Last Name and Partial First Name in TypeScript with ElectroDB\nDESCRIPTION: This code snippet shows how to query authors by their last name and a partial first name using the ElectroDB query API with the 'begins' method.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/examples/library-system.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nawait author.query\n  .writer({ authorLastName: \"king\" })\n  .begins({ authorFirstName: \"s\" })\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Updating Nested Set Attribute in JavaScript\nDESCRIPTION: This snippet shows how to add an item to a set attribute nested within a map attribute that is an element of a list attribute using ElectroDB's update method.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/update.mdx#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// Set values must use the DocumentClient to create a `set`\nconst newSetValue = StoreLocations.client.createSet(\"setItemValue\");\n\n// via Data Method\nawait StoreLocations.update({ cityId, mallId, storeId, buildingId })\n  .add({ \"listAttribute[1].setAttribute\": newSetValue })\n  .go();\n\nawait StoreLocations.update({ cityId, mallId, storeId, buildingId })\n  .data(({ listAttribute }, { add }) => {\n    add(listAttribute[1].setAttribute, newSetValue);\n  })\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Updating a Book Record with ElectroDB\nDESCRIPTION: Example of updating an existing book record's price and condition.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/core-concepts/quick-start.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nawait Book.patch({\n  bookId: \"beedabe8-e34e-4d41-9272-0755be9a2a9f\",\n  storeId: \"pdx-45\",\n})\n  .set({\n    price: 10,\n    condition: \"FAIR\",\n  })\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Performing Write Transactions in ElectroDB with TypeScript\nDESCRIPTION: This snippet demonstrates how to use the transaction.write() method in ElectroDB to perform write transactions across multiple entities. It shows the basic structure of a transaction and how to commit mutations.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/transact-write.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait yourService.transaction\n  .write(({ entity1, entity2 }) => [\n    entity1\n      .create({ prop1: \"value1\", prop2: \"value2\" })\n      .commit({ response: \"all_old\" }),\n\n    entity2\n      .update({ prop1: \"value1\", prop2: \"value2\" })\n      .set({ prop3: \"value3\" })\n      .commit({ response: \"all_old\" }),\n  ])\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Subtract Numeric Value from Deposit\nDESCRIPTION: Example demonstrating how to subtract a numeric value from an existing deposit attribute using ElectroDB's subtract() method.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/update.mdx#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nawait StoreLocations.update({ cityId, mallId, storeId, buildingId })\n  .subtract({ deposit: 500 })\n  .where((attr, op) => op.eq(attr.category, \"food/coffee\"))\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Appending List Elements in DynamoDB\nDESCRIPTION: Demonstrates appending elements to a list attribute using the append() method.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/patch.mdx#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nawait StoreLocations.patch({ cityId, mallId, storeId, buildingId })\n  .append({\n    rentalAgreement: [\n      {\n        type: \"ammendment\",\n        detail: \"no soup for you\",\n      },\n    ],\n  })\n  .where((attr, op) => op.eq(attr.category, \"food/coffee\"))\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Equivalent DynamoDB Parameters for Condition Expression\nDESCRIPTION: The JSON representation of the parameters that would be sent to DynamoDB's DocumentClient for the condition expression shown in the previous example. This shows the generated UpdateExpression, ExpressionAttributeNames, ExpressionAttributeValues, and ConditionExpression.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/conditions.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"UpdateExpression\": \"SET #isPregnant = :isPregnant_u0, #lastEvaluation = :lastEvaluation_u0, #lastEvaluationBy = :lastEvaluationBy_u0, #offspring = list_append(#offspring, :offspring_u0)\",\n  \"ExpressionAttributeNames\": {\n    \"#isPregnant\": \"isPregnant\",\n    \"#lastEvaluation\": \"lastEvaluation\",\n    \"#lastEvaluationBy\": \"lastEvaluationBy\",\n    \"#offspring\": \"offspring\"\n  },\n  \"ExpressionAttributeValues\": {\n    \":isPregnant0\": true,\n    \":lastEvaluation0\": \"2021-09-12\",\n    \":isPregnant_u0\": false,\n    \":lastEvaluation_u0\": \"2021-09-12\",\n    \":lastEvaluationBy_u0\": \"stephanie.adler\",\n    \":offspring_u0\": [\n      {\n        \"name\": \"Ernesto\",\n        \"birthday\": \"2021-09-12\",\n        \"note\": \"healthy birth, mild pollen allergy\"\n      }\n    ]\n  },\n  \"TableName\": \"zoo_manifest\",\n  \"Key\": {\n    \"pk\": \"$zoo#animal_blackbear\",\n    \"sk\": \"$animals_1#name_isabelle\"\n  },\n  \"ConditionExpression\": \"#isPregnant = :isPregnant0 AND #lastEvaluation < :lastEvaluation0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Single Filter Operation with Destructuring\nDESCRIPTION: Example demonstrating the use of JavaScript destructuring with the where clause. This achieves the same result as the previous example but with cleaner syntax.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/conditions.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nanimals\n  .update({ animal: \"tiger\", name: \"janet\" })\n  .set({ keeper: \"Joe Exotic\" })\n  .where(({ dangerous }, { eq }) => eq(dangerous, true))\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Querying Book Copies by ISBN in TypeScript with ElectroDB\nDESCRIPTION: This code snippet demonstrates how to query all copies of a book by its ISBN using the ElectroDB query API.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/examples/library-system.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data, cursor } = await book.query\n  .copies({ isbn: \"9783453435773\" })\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Collection Query with Filters in ElectroDB\nDESCRIPTION: Shows how to use filters in collection queries with complex conditions across entities.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/queries/collection.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst results - await TaskApp.collections\n  .assignments({employee: \"CBaskin\"})\n  .where(({ project }, { notExists, contains }) => `\n    ${notExists(project)} OR ${contains(project, \"murder\")}\n  `)\n  .go();\n```\n\n----------------------------------------\n\nTITLE: ElectroDB Transaction Options Interface\nDESCRIPTION: Interface definition for ElectroDB transaction execution options, showing the available configuration parameters for transaction operations.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/transact-write.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  token?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Store Details\nDESCRIPTION: Fetches details for a specific store location using composite attributes as identifiers.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/examples/shopping-mall-directory.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nlet storeId = \"LatteLarrys\";\nlet mallId = \"EastPointe\";\nlet buildingId = \"BuildingA1\";\nlet unitId = \"B47\";\n\nawait StoreLocations.get({ storeId, mallId, buildingId, unitId }).go();\n```\n\n----------------------------------------\n\nTITLE: Delete Contact from Set\nDESCRIPTION: Example demonstrating how to delete elements from a set attribute using ElectroDB's delete() method for contact information.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/update.mdx#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nawait StoreLocations.update({ cityId, mallId, storeId, buildingId })\n  .delete({ contact: [\"555-345-2222\"] })\n  .where((attr, op) => op.eq(attr.category, \"food/coffee\"))\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Deleting Set Elements in DynamoDB\nDESCRIPTION: Shows how to remove elements from a set attribute using the delete() method.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/patch.mdx#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nawait StoreLocations.patch({ cityId, mallId, storeId, buildingId })\n  .delete({ contact: [\"555-345-2222\"] })\n  .where((attr, op) => op.eq(attr.category, \"food/coffee\"))\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Creating Deterministic ClientRequestToken\nDESCRIPTION: Example of creating a deterministic token value for DynamoDB ClientRequestToken using a composite string based on operation date.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/transact-write.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst token = \"daily-headcount-count-2022-03-16\";\n```\n\n----------------------------------------\n\nTITLE: Resulting DynamoDB Query Structure from ElectroDB TypeScript Query\nDESCRIPTION: This JSON structure represents the DynamoDB query generated by the ElectroDB TypeScript query in the previous snippet. It includes the table name, expression attribute names and values, key condition expression, index name, and filter expression.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/conditions.mdx#2025-04-21_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"TableName\": \"StoreDirectory\",\n  \"ExpressionAttributeNames\": {\n    \"#rent\": \"rent\",\n    \"#discount\": \"discount\",\n    \"#category\": \"category\",\n    \"#pk\": \"idx2pk\",\n    \"#sk1\": \"idx2sk\"\n  },\n  \"ExpressionAttributeValues\": {\n    \":rent1\": \"2000.00\",\n    \":rent2\": \"5000.00\",\n    \":discount1\": \"1000.00\",\n    \":category1\": \"food/coffee\",\n    \":pk\": \"$mallstoredirectory_1#mallid_eastpointe\",\n    \":sk1\": \"$mallstore#leaseenddate_2020-04-01#storeid_\",\n    \":sk2\": \"$mallstore#leaseenddate_2020-07-01#storeid_\"\n  },\n  \"KeyConditionExpression\": \"#pk = :pk and #sk1 BETWEEN :sk1 AND :sk2\",\n  \"IndexName\": \"idx2\",\n  \"FilterExpression\": \"(#rent between :rent1 and :rent2) AND (#discount = :discount1 AND #category = :category1)\"\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Template Usage in ElectroDB\nDESCRIPTION: Demonstrates advanced template configuration with prefix and postfix formatting for string attributes used as index keys.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/modeling/indexes.mdx#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  model: {\n    entity: \"your_entity_name\",\n    service: \"your_service_name\",\n    version: \"1\"\n  },\n  attributes: {\n    accountId: {\n      type: \"string\" // only string types are both supported for this example\n    },\n    organizationId: {\n      type: \"string\"\n    },\n    name: {\n      type: \"string\"\n    }\n  },\n  indexes: {\n    \"your_access_pattern_name\": {\n      pk: {\n        field: \"accountId\",\n        composite: [\"accountId\"],\n        template: \"prefix_${accountId}_postfix\"\n      },\n      sk: {\n        field: \"organizationId\",\n        composite: [\"organizationId\"]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Member Entity in TypeScript with ElectroDB\nDESCRIPTION: This code snippet defines the 'member' entity using ElectroDB. It includes attributes for member information and address. The entity has two indexes: 'member' for querying by member ID, and an additional index for potential future access patterns.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/examples/library-system.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst member = new Entity(\n  {\n    model: {\n      entity: \"member\",\n      version: \"1\",\n      service: \"library\",\n    },\n    attributes: {\n      memberId: {\n        type: \"string\",\n      },\n      membershipStartDate: {\n        type: \"string\",\n      },\n      membershipEndDate: {\n        type: \"string\",\n      },\n      address: {\n        type: \"map\",\n        properties: {\n          streetAddress: {\n            type: \"string\",\n          },\n          city: {\n            type: \"string\",\n          },\n          state: {\n            type: \"string\",\n          },\n          zip: {\n            type: \"string\",\n          },\n        },\n      },\n    },\n    indexes: {\n      member: {\n        pk: {\n          field: \"pk\",\n          composite: [\"memberId\"],\n        },\n        sk: {\n          field: \"sk\",\n          composite: [],\n        },\n      },\n      _: {\n        // this is a duplicate access pattern for the entity\n        // but exists to open the door to additional access\n        // patterns on the gsi. The 'account' lets you get\n        // loans and member information by memberId, but in\n        // the future could have other associations by memberId\n        // such as \"notes\", \"fees\", etc.\n        collection: [\"account\"],\n        index: \"gsi1pk-gsi1sk-index\",\n        pk: {\n          field: \"gsi1pk\",\n          composite: [\"memberId\"],\n        },\n        sk: {\n          field: \"gsi1sk\",\n          composite: [],\n        },\n      },\n    },\n  },\n  { table },\n);\n```\n\n----------------------------------------\n\nTITLE: Response Format for Batch Put Operation in TypeScript\nDESCRIPTION: This snippet shows the expected response format from a batch put operation in ElectroDB. It returns an array of unprocessed composite attributes.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/batch-put.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  unprocessed: Array<YOUR_COMPOSITE_ATTRIBUTES>;\n}\n```\n\n----------------------------------------\n\nTITLE: Append to Rental Agreement List\nDESCRIPTION: Example showing how to append elements to an existing list attribute using ElectroDB's append() method for rental agreements.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/update.mdx#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nawait StoreLocations.update({ cityId, mallId, storeId, buildingId })\n  .append({\n    rentalAgreement: [\n      {\n        type: \"amendment\",\n        detail: \"no soup for you\",\n      },\n    ],\n  })\n  .where((attr, op) => op.eq(attr.category, \"food/coffee\"))\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Entity Query Example in ElectroDB\nDESCRIPTION: This demonstrates querying a single entity using the assigned access pattern. This is contrasted with collection queries to show the differences in approach and results.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/modeling/collections.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nawait TaskApp.entities.task.query.assigned({ employeeId: \"JExotic\" }).go();\n```\n\n----------------------------------------\n\nTITLE: Subtracting Numeric Values in DynamoDB\nDESCRIPTION: Shows how to subtract a value from a numeric attribute using the subtract() method.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/patch.mdx#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nawait StoreLocations.patch({ cityId, mallId, storeId, buildingId })\n  .subtract({ deposit: 500 })\n  .where((attr, op) => op.eq(attr.category, \"food/coffee\"))\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Equivalent DynamoDB Parameters\nDESCRIPTION: The raw DynamoDB parameters that ElectroDB generates for the delete operation, showing the internal composite key structure used in the database operation.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/delete.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Key\": {\n    \"pk\": \"$mallstoredirectory#cityid_atlanta1#mallid_eastpointe\",\n    \"sk\": \"$mallstore_1#buildingid_f34#storeid_lattelarrys\"\n  },\n  \"TableName\": \"YOUR_TABLE_NAME\"\n}\n```\n\n----------------------------------------\n\nTITLE: Default Response Type Definition in TypeScript\nDESCRIPTION: Defines the default response format for update operations, returning entity identifiers.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/patch.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  data: EntityIdentifiers<typeof StoreLocations>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Numeric Keys for Indexes in ElectroDB\nDESCRIPTION: This snippet demonstrates how to define both partition and sort keys as numeric values in ElectroDB. It uses the 'template' property to specify that the keys should be numeric.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/modeling/indexes.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst schema = {\n  model: {\n    entity: \"numeric\",\n    service: \"example\",\n    version: \"1\",\n  },\n  attributes: {\n    number1: {\n      type: \"number\", // defined as number\n    },\n    number2: {\n      type: \"number\", // defined as number\n    },\n  },\n  indexes: {\n    record: {\n      pk: {\n        field: \"pk\",\n        template: \"${number1}\", // will build PK as numeric value\n      },\n      sk: {\n        field: \"sk\",\n        template: \"${number2}\", // will build SK as numeric value\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining IssueComments Entity with ElectroDB in TypeScript\nDESCRIPTION: Defines an IssueComments entity for tracking comments on issues in a version control system. It includes attributes for comment details, reply handling, and timestamp tracking, with indexes to support different query scenarios including replies and conversations.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/examples/version-control.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity } from \"electrodb\";\nimport moment from \"moment\";\nimport {\n  TicketTypes,\n  IssueTicket,\n  StatusTypes,\n  toStatusString,\n  toStatusCode,\n} from \"./types\";\n\nexport const issueComments = new Entity({\n  model: {\n    entity: \"issueComment\",\n    service: \"versioncontrol\",\n    version: \"1\",\n  },\n  attributes: {\n    issueNumber: {\n      type: \"string\",\n    },\n    commentId: {\n      type: \"string\",\n    },\n    username: {\n      type: \"string\",\n    },\n    replyTo: {\n      type: \"string\",\n    },\n    replyViewed: {\n      type: \"string\",\n      default: NotYetViewed,\n      get: (replyViewed) => {\n        if (replyViewed !== NotYetViewed) {\n          return replyViewed;\n        }\n      },\n      set: (replyViewed) => {\n        if (replyViewed === undefined) {\n          return NotYetViewed;\n        }\n        return replyViewed;\n      },\n    },\n    repoName: {\n      type: \"string\",\n    },\n    repoOwner: {\n      type: \"string\",\n    },\n    body: {\n      type: \"string\",\n    },\n    createdAt: {\n      type: \"string\",\n      set: () => moment.utc().format(),\n      readOnly: true,\n    },\n    updatedAt: {\n      type: \"string\",\n      watch: \"*\",\n      set: () => moment.utc().format(),\n      readOnly: true,\n    },\n  },\n  indexes: {\n    comments: {\n      collection: \"issueReview\",\n      pk: {\n        composite: [\"repoOwner\", \"repoName\", \"issueNumber\"],\n        field: \"pk\",\n      },\n      sk: {\n        composite: [\"commentId\"],\n        field: \"sk\",\n      },\n    },\n    created: {\n      collection: \"conversations\",\n      index: \"gsi1pk-gsi1sk-index\",\n      pk: {\n        field: \"gsi1pk\",\n        composite: [\"username\"],\n      },\n      sk: {\n        field: \"gsi1sk\",\n        composite: [\"repoOwner\", \"repoName\", \"issueNumber\"],\n      },\n    },\n    replies: {\n      collection: \"inbox\",\n      index: \"gsi2pk-gsi2sk-index\",\n      pk: {\n        composite: [\"replyTo\"],\n        field: \"gsi2pk\",\n      },\n      sk: {\n        composite: [\"createdAt\", \"replyViewed\"],\n        field: \"gsi2sk\",\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Team-Scoped Counter Entity\nDESCRIPTION: Implements a counter entity scoped to specific teams within organizations using composite keys for partitioning.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/recipes/item-counters.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst TeamCounter = new Entity({\n  model: {\n    entity: 'team-counter',\n    service: 'directory',\n    version: '1',\n  },\n  attributes: {\n    organizationId: {\n      type: 'string',\n    },\n    teamId: {\n      type: 'string',\n    },\n    count: {\n      type: 'number',\n    },\n  },\n  indexes: {\n    organization: {\n      collection: 'employed',\n      pk: {\n        field: 'pk',\n        composite: ['organizationId'],\n      },\n      sk: {\n        field: 'sk',\n        composite: ['teamId'],\n      }\n    },\n  },\n}, { table });\n```\n\n----------------------------------------\n\nTITLE: Set Operation Example\nDESCRIPTION: Example of using the set() method to update a store's category with a condition\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/update.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nawait StoreLocations.update({ cityId, mallId, storeId, buildingId })\n  .set({ category: \"food/meal\" })\n  .where((attr, op) => op.eq(attr.category, \"food/coffee\"))\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Response Format for Match Queries in TypeScript\nDESCRIPTION: Shows the structure of the response returned by the Match method. The response includes an array of data matching the schema definition and an optional cursor for pagination.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/queries/match.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  data: Array<YOUR_SCHEMA>,\n  cursor: string | undefined\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Store Lease Date\nDESCRIPTION: Updates the lease end date for an existing store location using composite attributes for identification.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/examples/shopping-mall-directory.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlet storeId = \"LatteLarrys\";\nlet mallId = \"EastPointe\";\nlet buildingId = \"BuildingA1\";\nlet unitId = \"B47\";\n\nawait StoreLocations.patch({ storeId, mallId, buildingId, unitId })\n  .set({ leaseEndDate: \"2021-02-28\" })\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Default Response Format TypeScript Interface\nDESCRIPTION: Type definition for the default response format of update operations\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/update.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  data: EntityIdentifiers<typeof tasks>;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Assignments Collection in ElectroDB (JSON)\nDESCRIPTION: This snippet demonstrates the equivalent DynamoDB parameters for querying the 'assignments' collection in ElectroDB. It shows the use of a GSI and the specific attribute mappings.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/modeling/collections.mdx#2025-04-21_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"KeyConditionExpression\": \"#pk = :pk and begins_with(#sk1, :sk1)\",\n  \"TableName\": \"projectmanagement\",\n  \"ExpressionAttributeNames\": { \"#pk\": \"gsi2pk\", \"#sk1\": \"gsi2sk\" },\n  \"ExpressionAttributeValues\": {\n    \":pk\": \"$taskapp#employeeid_jexotic\",\n    \":sk1\": \"$contributions#assignments\"\n  },\n  \"IndexName\": \"gsi2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Equality Filter with Value Function\nDESCRIPTION: Shows how to implement a custom equality filter using the value() function to compare a keeper attribute against a specific value.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/conditions.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nanimals.query\n  .exhibit({ habitat: \"Africa\", enclosure: \"5b\" })\n  .where(\n    ({ keeper }, { name, value, eq }) => `\n    ${name(keeper)} = ${value(keeper, \"Tiger King\")}\n  `,\n  )\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Defining DynamoDB Table Schema with GSI\nDESCRIPTION: Defines a DynamoDB table named 'electro' with composite primary key (pk, sk) and a Global Secondary Index. The table uses PAY_PER_REQUEST billing mode and includes attribute definitions for all key schema elements.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/partials/table-definition.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"TableName\": \"electro\",\n  \"KeySchema\": [\n    {\n      \"AttributeName\": \"pk\",\n      \"KeyType\": \"HASH\"\n    },\n    {\n      \"AttributeName\": \"sk\",\n      \"KeyType\": \"RANGE\"\n    }\n  ],\n  \"AttributeDefinitions\": [\n    {\n      \"AttributeName\": \"pk\",\n      \"AttributeType\": \"S\"\n    },\n    {\n      \"AttributeName\": \"sk\",\n      \"AttributeType\": \"S\"\n    },\n    {\n      \"AttributeName\": \"gsi1pk\",\n      \"AttributeType\": \"S\"\n    },\n    {\n      \"AttributeName\": \"gsi1sk\",\n      \"AttributeType\": \"S\"\n    }\n  ],\n  \"GlobalSecondaryIndexes\": [\n    {\n      \"IndexName\": \"gsi1pk-gsi1sk-index\",\n      \"KeySchema\": [\n        {\n          \"AttributeName\": \"gsi1pk\",\n          \"KeyType\": \"HASH\"\n        },\n        {\n          \"AttributeName\": \"gsi1sk\",\n          \"KeyType\": \"RANGE\"\n        }\n      ],\n      \"Projection\": {\n        \"ProjectionType\": \"ALL\"\n      }\n    }\n  ],\n  \"BillingMode\": \"PAY_PER_REQUEST\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Employee Entity with ElectroDB\nDESCRIPTION: Defines an Employee entity schema with organization and employee details, including primary and sort key configurations for DynamoDB.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/recipes/item-counters.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, Service } from 'electrodb';\n\nconst table = 'company-directory';\n\nconst Employee = new Entity({\n  model: {\n    entity: 'employee',\n    service: 'directory',\n    version: '1',\n  },\n  attributes: {\n    organizationId: {\n      type: 'string',\n    },\n    employeeId: {\n      type: 'string',\n    },\n    name: {\n      type: 'string',\n    },\n    teamId: {\n      type: 'string',\n    }\n  },\n  indexes: {\n    employees: {\n      collection: 'employed',\n      pk: {\n        field: 'pk',\n        composite: ['organizationId'],\n      },\n      sk: {\n        field: 'sk',\n        composite: ['employeeId'],\n      }\n    }\n  },\n}, { table });\n```\n\n----------------------------------------\n\nTITLE: Map Property Update Examples\nDESCRIPTION: Shows how to update properties within a map attribute using both chain methods and data() method.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/patch.mdx#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// via Chain Method\nawait StoreLocations.patch({ cityId, mallId, storeId, buildingId })\n  .set({ \"mapAttribute.mapProperty\": \"value\" })\n  .go();\n\n// via Data Method\nawait StoreLocations.patch({ cityId, mallId, storeId, buildingId })\n  .data(({ mapAttribute }, { set }) => set(mapAttribute.mapProperty, \"value\"))\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Query with Complete Keys\nDESCRIPTION: Example of a query including all partition and sort key attributes\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/queries/query.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait StoreLocations.query\n  .stores({\n    cityId: \"Atlanta1\",\n    mallId: \"EastPointe\",\n    storeId: \"LatteLarrys\",\n    buildingId: \"f34\",\n  })\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Implementing Attribute Watching in ElectroDB\nDESCRIPTION: Demonstrates how to use the 'watch' property to trigger getter/setter callbacks when specific attributes are accessed or modified. This feature is useful for maintaining consistency across related attributes or implementing advanced denormalization patterns.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/modeling/attributes.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nmyAttr: {\n  type: \"string\",\n  watch: [\"otherAttr\"],\n  set: (myAttr, {otherAttr}) => {\n    // Whenever \"myAttr\" or \"otherAttr\" are updated from an `update` or `patch` operation, this callback will be fired.\n    // Note: myAttr or otherAttr could be independently undefined because either attribute could have triggered this callback\n  },\n  get: (myAttr, {otherAttr}) => {\n    // Whenever \"myAttr\" or \"otherAttr\" are retrieved from a `query` or `get` operation, this callback will be fired.\n    // Note: myAttr or otherAttr could be independently undefined because either attribute could have triggered this callback.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Agent Entity in ElectroDB with TypeScript\nDESCRIPTION: This code defines an 'agent' entity for MI6 personnel using ElectroDB. It specifies attributes like id, designation, email, and others, along with an index for operatives.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/transact-write.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst agent = new Entity(\n  {\n    model: {\n      entity: \"agent\",\n      version: \"1\",\n      service: \"MI6\",\n    },\n    attributes: {\n      id: {\n        type: \"string\",\n      },\n      designation: {\n        type: \"string\",\n      },\n      email: {\n        type: \"string\",\n        required: true,\n      },\n      firstName: {\n        type: \"string\",\n      },\n      lastName: {\n        type: \"string\",\n      },\n      alive: {\n        type: \"boolean\",\n        required: true,\n      },\n      kills: {\n        type: \"number\",\n        default: 0,\n      },\n    },\n    indexes: {\n      operatives: {\n        pk: {\n          field: \"pk\",\n          composite: [\"designation\"],\n        },\n        sk: {\n          field: \"sk\",\n          composite: [\"id\"],\n        },\n      },\n    },\n  },\n  { table, client }\n);\n```\n\n----------------------------------------\n\nTITLE: Map Property Update Examples - JavaScript\nDESCRIPTION: Examples showing how to update map properties using both chain methods and data() method.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/update.mdx#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// via Chain Method\nawait StoreLocations.update({ cityId, mallId, storeId, buildingId })\n  .set({ \"mapAttribute.mapProperty\": \"value\" })\n  .go();\n\n// via Data Method\nawait StoreLocations.update({ cityId, mallId, storeId, buildingId })\n  .data(({ mapAttribute }, { set }) => set(mapAttribute.mapProperty, \"value\"))\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Mark Comment Reply as Read - ElectroDB TypeScript Function\nDESCRIPTION: Function to mark comment replies as read for both issue and pull request comments. Takes user ID and comment IDs as parameters and updates the replyViewed timestamp. Only allows marking replies as read for the user who was replied to.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/examples/version-control.mdx#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function readReply(\n  user: string,\n  comment: IssueCommentIds,\n): Promise<boolean>;\nexport async function readReply(\n  user: string,\n  comment: PullRequestCommentIds,\n): Promise<boolean>;\nexport async function readReply(user: string, comment: any): Promise<boolean> {\n  const replyViewed = moment.utc().format();\n  if (isIssueCommentIds(comment)) {\n    return await store.entities.issueComments\n      .patch(comment)\n      .set({ replyViewed })\n      .where(({ replyTo }, { eq }) => eq(replyTo, user))\n      .go()\n      .then(() => true)\n      .catch(() => false);\n  } else if (isPullRequestCommentIds(comment)) {\n    return await store.entities.pullRequestComments\n      .patch(comment)\n      .set({ replyViewed })\n      .where(({ replyTo }, { eq }) => eq(replyTo, user))\n      .go()\n      .then(() => true)\n      .catch(() => false);\n  } else {\n    return false;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: List Element Update Examples\nDESCRIPTION: Demonstrates how to remove elements from a list attribute using both chain methods and data() method.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/patch.mdx#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// via Chain Method\nawait StoreLocations.patch({ cityId, mallId, storeId, buildingId })\n  .remove([\"listAttribute[0]\"])\n  .go();\n\n// via Data Method\nawait StoreLocations.patch({ cityId, mallId, storeId, buildingId })\n  .data(({ listAttribute }, { remove }) => remove(listAttribute[0]))\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Collection Definition Examples\nDESCRIPTION: Demonstrates two equivalent ways to define collections in ElectroDB - as a string and as a string array.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/modeling/collections.mdx#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  collection: \"assignments\"\n  pk: {\n    field: \"pk\",\n    composite: [\"employeeId\"]\n  },\n  sk: {\n    field: \"sk\",\n    composite: [\"projectId\"]\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  collection: [\"assignments\"]\n  pk: {\n    field: \"pk\",\n    composite: [\"employeeId\"]\n  },\n  sk: {\n    field: \"sk\",\n    composite: [\"projectId\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Watch All in ElectroDB\nDESCRIPTION: Shows how to use the 'watch' property with a '*' value to trigger callbacks for any changes to an item. This is useful for implementing global item-level logic or validation.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/modeling/attributes.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nmyAttr: {\n  type: \"string\",\n  watch: \"*\", // <- \"watch all\"\n  set: (myAttr, allAttributes) => {\n    // Whenever an `update` or `patch` operation is performed, this callback will be fired.\n    // Note: myAttr or the attributes under `allAttributes` could be independently undefined because either attribute could have triggered this callback\n  },\n  get: (myAttr, allAttributes) => {\n    // Whenever a `query` or `get` operation is performed, this callback will be fired.\n    // Note: myAttr or the attributes under `allAttributes` could be independently undefined because either attribute could have triggered this callback\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Subgenres by Book and Main Genre in TypeScript\nDESCRIPTION: These snippets demonstrate how to query the sub-genres associated with a book and one of its main genres, using either ISBN or book title.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/examples/library-system.mdx#2025-04-21_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nawait genre.query.book({ isbn: \"9783453435773\", genre: \"horror\" }).go();\nawait genre.query.title({ bookTitle: \"it\", genre: \"horror\" }).go();\n```\n\n----------------------------------------\n\nTITLE: Equivalent DynamoDB Parameters for ElectroDB Put Operation\nDESCRIPTION: This snippet illustrates the equivalent DynamoDB parameters generated by ElectroDB for the Put operation. It includes the Item object, table name, condition expression, and attribute names and values.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/put.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Item\": {\n    \"cityId\": \"Atlanta1\",\n    \"mallId\": \"EastPointe\",\n    \"storeId\": \"LatteLarrys\",\n    \"buildingId\": \"BuildingA1\",\n    \"unitId\": \"B47\",\n    \"category\": \"food/coffee\",\n    \"leaseEndDate\": \"2020-03-22\",\n    \"rent\": \"4500.00\",\n    \"discount\": \"0.00\",\n    \"pk\": \"$mallstoredirectory#cityid_atlanta1#mallid_eastpointe\",\n    \"sk\": \"$mallstore_1#buildingid_buildinga1#storeid_lattelarrys\",\n    \"gsi1pk\": \"$mallstoredirectory#mallid_eastpointe\",\n    \"gsi1sk\": \"$mallstore_1#buildingid_buildinga1#unitid_b47\",\n    \"gsi2pk\": \"$mallstoredirectory#storeid_lattelarrys\",\n    \"gsi2sk\": \"$mallstore_1#leaseenddate_2020-03-22\",\n    \"__edb_e__\": \"MallStore\",\n    \"__edb_v__\": \"1\"\n  },\n  \"TableName\": \"StoreDirectory\",\n  \"ConditionExpression\": \"#rent = :rent_w1\",\n  \"ExpressionAttributeNames\": {\n    \"#rent\": \"rent\"\n  },\n  \"ExpressionAttributeValues\": {\n    \":rent_w1\": \"4500.00\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Assignments Collection in ElectroDB (TypeScript)\nDESCRIPTION: This example shows how to query the 'assignments' collection in ElectroDB using TypeScript. It demonstrates the method call and the expected response format.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/modeling/collections.mdx#2025-04-21_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nconst results = await TaskApp.collections\n  .assignments({ employeeId: \"JExotic\" })\n  .go();\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  data: {\n    tasks: [...],          // tasks assigned to employeeId \"JExotic\"\n    projectMembers: [...], // projects with employeeId \"JExotic\"\n  },\n  cursor: null,\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Staff Access Pattern in ElectroDB (TypeScript)\nDESCRIPTION: This snippet demonstrates how to query the 'staff' access pattern in ElectroDB using TypeScript. It shows the method call syntax using the domain-specific access pattern name.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/modeling/collections.mdx#2025-04-21_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nawait employee.query.staff({ organizationId: \"nike\" }).go();\n```\n\n----------------------------------------\n\nTITLE: Response Format for BatchGet Operation in TypeScript\nDESCRIPTION: This code block shows the TypeScript interface for the response format of a BatchGet operation in ElectroDB. It includes an array of retrieved data and an array of unprocessed items.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/queries/batch-get.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  data: Array<YOUR_SCHEMA>,\n  unprocessed: Array<YOUR_COMPOSITE_ATTRIBUTES>\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Access Pattern in ElectroDB (TypeScript)\nDESCRIPTION: This example shows how to define an access pattern named 'staff' in ElectroDB. It demonstrates the composition of partition and sort keys using domain-specific attributes.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/modeling/collections.mdx#2025-04-21_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nstaff: {\n  pk: {\n    field: \"pk\",\n    composite: [\"organizationId\"]\n  },\n  sk: {\n    field: \"sk\",\n    composite: [\"employeeId\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: List Element Update Examples - JavaScript\nDESCRIPTION: Examples demonstrating how to remove elements from a list attribute using both chain methods and data() method.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/update.mdx#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// via Chain Method\nawait StoreLocations.update({ cityId, mallId, storeId, buildingId })\n  .remove([\"listAttribute[0]\"])\n  .go();\n\n// via Data Method\nawait StoreLocations.update({ cityId, mallId, storeId, buildingId })\n  .data(({ listAttribute }, { remove }) => remove(listAttribute[0]))\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Defining PullRequestComments Entity with ElectroDB in TypeScript\nDESCRIPTION: Defines a PullRequestComments entity for tracking comments on pull requests in a version control system. It includes attributes for comment details, reply management, and timestamp tracking, with indexes for different access patterns.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/examples/version-control.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity } from \"electrodb\";\nimport moment from \"moment\";\nimport {\n  NotYetViewed,\n  TicketTypes,\n  PullRequestTicket,\n  StatusTypes,\n  toStatusString,\n  toStatusCode,\n} from \"./types\";\n\nexport const pullRequestComments = new Entity({\n  model: {\n    entity: \"pullRequestComment\",\n    service: \"versioncontrol\",\n    version: \"1\",\n  },\n  attributes: {\n    repoName: {\n      type: \"string\",\n    },\n    username: {\n      type: \"string\",\n    },\n    repoOwner: {\n      type: \"string\",\n    },\n    pullRequestNumber: {\n      type: \"string\",\n    },\n    commentId: {\n      type: \"string\",\n    },\n    replyTo: {\n      type: \"string\",\n    },\n    replyViewed: {\n      type: \"string\",\n      default: NotYetViewed,\n      get: (replyViewed) => {\n        if (replyViewed !== NotYetViewed) {\n          return replyViewed;\n        }\n      },\n      set: (replyViewed) => {\n        if (replyViewed === undefined) {\n          return NotYetViewed;\n        }\n        return replyViewed;\n      },\n    },\n    createdAt: {\n      type: \"string\",\n      set: () => moment.utc().format(),\n      readOnly: true,\n    },\n    updatedAt: {\n      type: \"string\",\n      watch: \"*\",\n      set: () => moment.utc().format(),\n      readOnly: true,\n    },\n  },\n  indexes: {\n    comments: {\n      collection: \"PRReview\",\n      pk: {\n        composite: [\"repoOwner\", \"repoName\", \"pullRequestNumber\"],\n        field: \"pk\",\n      },\n      sk: {\n        composite: [\"commentId\"],\n        field: \"sk\",\n      },\n    },\n    created: {\n      collection: \"conversations\",\n      index: \"gsi1pk-gsi1sk-index\",\n      pk: {\n        field: \"gsi1pk\",\n        composite: [\"username\"],\n      },\n      sk: {\n        field: \"gsi1sk\",\n        composite: [\"repoOwner\", \"repoName\"],\n      },\n    },\n    replies: {\n      collection: \"inbox\",\n      index: \"gsi2pk-gsi2sk-index\",\n      pk: {\n        composite: [\"replyTo\"],\n        field: \"gsi2pk\",\n      },\n      sk: {\n        composite: [\"createdAt\", \"replyViewed\"],\n        field: \"gsi2sk\",\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Generated DynamoDB Query Parameters\nDESCRIPTION: Example of the underlying DynamoDB query parameters generated by ElectroDB's Find method, showing how it constructs the key conditions and attribute mappings.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/queries/find.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"KeyConditionExpression\": \"#pk = :pk and begins_with(#sk1, :sk1)\",\n  \"TableName\": \"StoreDirectory\",\n  \"ExpressionAttributeNames\": {\n    \"#mallId\": \"mallId\",\n    \"#buildingId\": \"buildingId\",\n    \"#pk\": \"gsi1pk\",\n    \"#sk1\": \"gsi1sk\"\n  },\n  \"ExpressionAttributeValues\": {\n    \":mallId1\": \"EastPointe\",\n    \":buildingId1\": \"BuildingA1\",\n    \":pk\": \"$mallstoredirectory#mallid_eastpointe\",\n    \":sk1\": \"$mallstore_1#buildingid_buildinga1#unitid_\"\n  },\n  \"IndexName\": \"gsi1pk-gsi1sk-index\"\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering List Elements in ElectroDB\nDESCRIPTION: Demonstrates filtering on specific elements within a list attribute using array index notation.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/queries/filters.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nanimals.query\n  .exhibit({ habitat: \"Tundra\" })\n  .where(({ offspring }, { eq }) => eq(offspring[0].name, \"Blitzen\"))\n  .go();\n```\n\n----------------------------------------\n\nTITLE: CollectionItem Type Definition\nDESCRIPTION: Complex type definition for collection query results.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/reference/typescript.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport type CollectionItem<\n  SERVICE extends Service<any>,\n  COLLECTION extends keyof SERVICE[\"collections\"],\n> = SERVICE extends Service<infer E>\n  ? Pick<\n      {\n        [EntityName in keyof E]: E[EntityName] extends Entity<\n          infer A,\n          infer F,\n          infer C,\n          infer S\n        >\n          ? COLLECTION extends keyof CollectionAssociations<E>\n            ? EntityName extends CollectionAssociations<E>[COLLECTION]\n              ? ResponseItem<A, F, C, S>[]\n              : never\n            : never\n          : never;\n      },\n      COLLECTION extends keyof CollectionAssociations<E>\n        ? CollectionAssociations<E>[COLLECTION]\n        : never\n    >\n  : never;\n```\n\n----------------------------------------\n\nTITLE: Collection Response Format\nDESCRIPTION: Shows the expected response format when querying collections, including tasks and employee records.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/modeling/collections.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  data: {\n    tasks: [...],    // tasks for employeeId \"JExotic\"\n    employees: [...] // employee record(s) with employeeId \"JExotic\"\n  },\n  cursor: null\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Collection Query in ElectroDB\nDESCRIPTION: Demonstrates a simple collection query to retrieve assignments for a specific employee.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/queries/collection.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst results = await TaskApp.collections\n  .assignments({ employeeId: \"JExotic\" })\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Initializing ElectroDB Entity with Key Schema\nDESCRIPTION: Example of creating an ElectroDB entity with composite key structure for a 'thing' model with organization and account identifiers.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/reference/conversions.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, createConversions } from \"electrodb\";\n\nconst thing = new Entity(\n  {\n    model: {\n      entity: \"thing\",\n      version: \"1\",\n      service: \"thingstore\",\n    },\n    attributes: {\n      organizationId: {\n        type: \"string\",\n      },\n      accountId: {\n        type: \"string\",\n      },\n      name: {\n        type: \"string\",\n      },\n      description: {\n        type: \"string\",\n      },\n    },\n    indexes: {\n      records: {\n        pk: {\n          field: \"pk\",\n          composite: [\"organizationId\"],\n        },\n        sk: {\n          field: \"sk\",\n          composite: [\"accountId\"],\n        },\n      },\n    },\n  },\n  { table: \"my_table\" },\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Keys Only from KEYS_ONLY Index in ElectroDB\nDESCRIPTION: TypeScript example demonstrating how to retrieve just the keys from a KEYS_ONLY GSI by using the ignoreOwnership and includeKeys options. This avoids hydration while still getting usable data.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/recipes/keys-only-gsi.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// The elements in the `data` array are just the keys of the index, despite the typing saying otherwise.\nconst { data, cursor } = await assets.query\n  .locations({ state: \"Georgia\" })\n  .go({ ignoreOwnership: true, data: \"includeKeys\" });\n```\n\n----------------------------------------\n\nTITLE: Single Filter Operation in Where Clause\nDESCRIPTION: Example showing how to use a single filter operation in a where clause. This checks if an animal is dangerous before updating the keeper to 'Joe Exotic'.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/conditions.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nanimals\n  .update({ habitat: \"Africa\", enclosure: \"5b\" })\n  .set({ keeper: \"Joe Exotic\" })\n  .where((attr, op) => op.eq(attr.dangerous, true))\n  .go();\n```\n\n----------------------------------------\n\nTITLE: TransactionItem Interface Definition\nDESCRIPTION: TypeScript interface definition for the TransactionItem type that represents the response structure for each operation in a transaction. Includes properties for rejection status, error codes, messages, and the retrieved item.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/queries/transact-get.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype TransactionItem<T> = {\n  rejected: boolean;\n  code?: TransactionItemCode; // 'None' | 'ConditionalCheckFailed' | 'ItemCollectionSizeLimitExceeded' | 'TransactionConflict' | 'ProvisionedThroughputExceeded' | 'ThrottlingError' | 'ValidationError';\n  message?: string | undefined;\n  item: null | T;\n};\n```\n\n----------------------------------------\n\nTITLE: Remove Discount Update Operation\nDESCRIPTION: Example of a DynamoDB update operation to remove a discount field while updating store location details.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/update.mdx#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"UpdateExpression\": \"SET #cityId = :cityId_u0, #mallId = :mallId_u0, #buildingId = :buildingId_u0, #storeId = :storeId_u0, #__edb_e__ = :__edb_e___u0, #__edb_v__ = :__edb_v___u0 REMOVE #discount\",\n  \"ExpressionAttributeNames\": {\n    \"#category\": \"category\",\n    \"#discount\": \"discount\",\n    \"#cityId\": \"cityId\",\n    \"#mallId\": \"mallId\",\n    \"#buildingId\": \"buildingId\",\n    \"#storeId\": \"storeId\",\n    \"#__edb_e__\": \"__edb_e__\",\n    \"#__edb_v__\": \"__edb_v__\"\n  },\n  \"ExpressionAttributeValues\": {\n    \":category0\": \"food/coffee\",\n    \":cityId_u0\": \"Portland\",\n    \":mallId_u0\": \"EastPointe\",\n    \":buildingId_u0\": \"A34\",\n    \":storeId_u0\": \"LatteLarrys\",\n    \":__edb_e___u0\": \"MallStore\",\n    \":__edb_v___u0\": \"1\"\n  },\n  \"TableName\": \"electro\",\n  \"Key\": {\n    \"pk\": \"$mallstoredirectory#cityid_portland#mallid_eastpointe\",\n    \"sk\": \"$mallstore_1#buildingid_a34#storeid_lattelarrys\"\n  },\n  \"ConditionExpression\": \"#category = :category0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Raw DynamoDB Responses from KEYS_ONLY Index in ElectroDB\nDESCRIPTION: TypeScript example showing how to retrieve the raw DynamoDB response when querying a KEYS_ONLY GSI. This gives direct access to the Items and LastEvaluatedKey from the DynamoDB response.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/recipes/keys-only-gsi.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// result is the actual DynamoDB response, despite the typing saying otherwise.\nconst result: any = await assets.query\n  .locations({ state: \"Georgia\" })\n  .go({ data: \"raw\" });\nconst { Items, LastEvaluatedKey } = result;\n```\n\n----------------------------------------\n\nTITLE: Service Configuration\nDESCRIPTION: Shows how to configure an ElectroDB service with multiple entities and DynamoDB client setup.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/modeling/collections.mdx#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport DynamoDB from \"aws-sdk/clients/dynamodb\";\n\nconst table = \"projectmanagement\";\nconst client = new DynamoDB.DocumentClient();\n\nconst TaskApp = new Service(\n  {\n    employees,\n    tasks,\n    projectMembers,\n  },\n  { client, table },\n);\n```\n\n----------------------------------------\n\nTITLE: Query Event Type Definition in TypeScript\nDESCRIPTION: TypeScript interface definition for the query event that occurs when executing queries via go() method. Includes event type, method types, and parameter definitions.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/reference/events-logging.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ElectroQueryEvent<P extends any = any> {\n  type: \"query\";\n  method:\n    | \"put\"\n    | \"get\"\n    | \"query\"\n    | \"scan\"\n    | \"update\"\n    | \"delete\"\n    | \"remove\"\n    | \"patch\"\n    | \"create\"\n    | \"batchGet\"\n    | \"batchWrite\";\n  config: any;\n  params: P;\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Field Filter with Field Function\nDESCRIPTION: Shows how to use the field() function to reference and filter on fields not present in the model definition.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/conditions.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nanimals.query\n  .exhibit({ habitat: \"Africa\", enclosure: \"5b\" })\n  .where(\n    (_, { field, escape }) => `\n    contains(${field(\"gsi1sk\")}, ${escape(\"value\")})\n  `,\n  )\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Transaction Response Interface\nDESCRIPTION: TypeScript interface showing the structure of the response returned when executing a transaction. Contains an array of TransactionItem results and a canceled flag indicating transaction status.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/queries/transact-get.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  data: TransactionItem<T>[];\n  canceled: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Conditions in Where Clause\nDESCRIPTION: Example showing how to specify multiple conditions in a where clause using template strings. This checks if an animal is dangerous AND if the lastFed attribute doesn't exist.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/conditions.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nanimals\n  .update({ animal: \"tiger\", name: \"janet\" })\n  .set({ keeper: \"Joe Exotic\" })\n  .where(\n    (attr, op) => `\n    ${op.eq(attr.dangerous, true)} AND ${op.notExists(attr.lastFed)}\n  `,\n  )\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Hydrating Queries with KEYS_ONLY Index in ElectroDB\nDESCRIPTION: TypeScript example showing how to query a KEYS_ONLY GSI with the hydrate option. This performs an initial query followed by a batchGet to retrieve the complete items.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/recipes/keys-only-gsi.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// the locations index (gsi1pk-gsi1sk-index) is a KEYS_ONLY projection\nconst { data, cursor } = await assets.query\n  .locations({ state: \"Georgia\" })\n  .go({ hydrate: true });\n```\n\n----------------------------------------\n\nTITLE: DynamoDB Equivalent Parameters\nDESCRIPTION: Shows the equivalent DynamoDB parameters generated by ElectroDB for the filter expression query.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/queries/filters.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"KeyConditionExpression\": \"#pk = :pk and begins_with(#sk1, :sk1)\",\n  \"TableName\": \"zoo_manifest\",\n  \"ExpressionAttributeNames\": {\n    \"#isPregnant\": \"isPregnant\",\n    \"#offspring\": \"offspring\",\n    \"#pk\": \"gsi1pk\",\n    \"#sk1\": \"gsi1sk\"\n  },\n  \"ExpressionAttributeValues\": {\n    \":isPregnant0\": true,\n    \":pk\": \"$zoo#habitat_africa\",\n    \":sk1\": \"$animals_1#enclosure_\"\n  },\n  \"IndexName\": \"gsi1pk-gsi1sk-index\",\n  \"FilterExpression\": \"#isPregnant = :isPregnant0 OR attribute_exists(#offspring)\"\n}\n```\n\n----------------------------------------\n\nTITLE: Results Event Type Definition in TypeScript\nDESCRIPTION: TypeScript interface definition for the results event that occurs when results are returned from DynamoDB. Includes success status and result data.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/reference/events-logging.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ElectroResultsEvent<R extends any = any> {\n  type: \"results\";\n  method:\n    | \"put\"\n    | \"get\"\n    | \"query\"\n    | \"scan\"\n    | \"update\"\n    | \"delete\"\n    | \"remove\"\n    | \"patch\"\n    | \"create\"\n    | \"batchGet\"\n    | \"batchWrite\";\n  config: any;\n  results: R;\n  success: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering on List Attribute Element in ElectroDB TypeScript\nDESCRIPTION: This snippet demonstrates how to update a record while filtering on an element within a list attribute using ElectroDB. It updates the 'keeper' field for a tiger named 'janet' where the first offspring's name is 'Blitzen'.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/conditions.mdx#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nanimals\n  .update({ animal: \"tiger\", name: \"janet\" })\n  .set({ keeper: \"Joe Exotic\" })\n  .where(({ offspring }, { eq }) => eq(offspring[0].name, \"Blitzen\"))\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Equivalent DynamoDB Update Parameters in JSON\nDESCRIPTION: This JSON object represents the equivalent DynamoDB update parameters generated by ElectroDB for the organization update operation, including update expressions and condition expressions.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/update.mdx#2025-04-21_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"UpdateExpression\": \"SET #deleted = :deleted_u0, #gsi1sk = :gsi1sk_u0, #id = :id_u0, #__edb_e__ = :__edb_e___u0, #__edb_v__ = :__edb_v___u0\",\n  \"ExpressionAttributeNames\": {\n    \"#createdAt\": \"createdAt\",\n    \"#deleted\": \"deleted\",\n    \"#gsi1sk\": \"gsi1sk\",\n    \"#id\": \"id\",\n    \"#__edb_e__\": \"__edb_e__\",\n    \"#__edb_v__\": \"__edb_v__\"\n  },\n  \"ExpressionAttributeValues\": {\n    \":createdAt0\": \"2023-08-22T16:37:45.700Z\",\n    \":deleted_u0\": false,\n    \":gsi1sk_u0\": \"$organization_1#deleted_false#createdat_2023-08-22t16:37:45.700z\",\n    \":id_u0\": \"00001\",\n    \":__edb_e___u0\": \"organization\",\n    \":__edb_v___u0\": \"1\"\n  },\n  \"TableName\": \"electro\",\n  \"Key\": {\n    \"pk\": \"$app#id_00001\",\n    \"sk\": \"$organization_1\"\n  },\n  \"ConditionExpression\": \"#createdAt = :createdAt0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Map Attribute Filtering\nDESCRIPTION: Demonstrates filtering on a complex map attribute by accessing nested properties within the veterinarian object.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/conditions.mdx#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nanimals\n  .update({ animal: \"tiger\", name: \"janet\" })\n  .set({ keeper: \"Joe Exotic\" })\n  .where(({ veterinarian }, { eq }) => eq(veterinarian.name, \"Herb Peterson\"))\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Equivalent Parameters for Composite Update in ElectroDB\nDESCRIPTION: This JSON snippet shows the equivalent DynamoDB parameters generated by ElectroDB for the composite update operation. It includes the UpdateExpression, ExpressionAttributeNames, ExpressionAttributeValues, and other necessary parameters.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/patch.mdx#2025-04-21_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"UpdateExpression\": \"SET #deleted = :deleted_u0, #gsi1sk = :gsi1sk_u0, #id = :id_u0, #__edb_e__ = :__edb_e___u0, #__edb_v__ = :__edb_v___u0\",\n  \"ExpressionAttributeNames\": {\n    \"#createdAt\": \"createdAt\",\n    \"#deleted\": \"deleted\",\n    \"#gsi1sk\": \"gsi1sk\",\n    \"#id\": \"id\",\n    \"#__edb_e__\": \"__edb_e__\",\n    \"#__edb_v__\": \"__edb_v__\"\n  },\n  \"ExpressionAttributeValues\": {\n    \":createdAt0\": \"2023-08-22T17:26:27.718Z\",\n    \":deleted_u0\": false,\n    \":gsi1sk_u0\": \"$organization_1#deleted_false#createdat_2023-08-22t17:26:27.718z\",\n    \":id_u0\": \"00001\",\n    \":__edb_e___u0\": \"organization\",\n    \":__edb_v___u0\": \"1\"\n  },\n  \"TableName\": \"electro\",\n  \"Key\": {\n    \"pk\": \"$app#id_00001\",\n    \"sk\": \"$organization_1\"\n  },\n  \"ConditionExpression\": \"#createdAt = :createdAt0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Overview Collection Response Format\nDESCRIPTION: Shows the response format when querying the overview collection, including tasks and project members data.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/modeling/collections.mdx#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  data: {\n    tasks: [...],         // tasks associated with projectId \"SD-204\"\n    projectMembers: [...] // employees of project \"SD-204\"\n  },\n  cursor: null,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Enum Attributes in ElectroDB\nDESCRIPTION: Demonstrates how to define enum attributes in ElectroDB, including the use of 'as const' for TypeScript type enforcement. This example shows different ways to define enum attributes and their resulting TypeScript types.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/modeling/attributes.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nattributes: {\n  myEnumAttribute1: {\n      type: [\"option1\", \"option2\", \"option3\"]        // TypeScript enforces as `string[]`\n  },\n  myEnumAttribute2: {\n    type: [\"option1\", \"option2\", \"option3\"] as const // TypeScript enforces as `\"option1\" | \"option2\" | \"option3\" | undefined`\n  },\n  myEnumAttribute3: {\n    required: true,\n    type: [\"option1\", \"option2\", \"option3\"] as const // TypeScript enforces as `\"option1\" | \"option2\" | \"option3\"`\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Counting Books Checked Out by User in TypeScript with ElectroDB\nDESCRIPTION: This code snippet shows how to count the number of books checked out by a specific user using the ElectroDB query API and then processing the result.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/examples/library-system.mdx#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst count = await book.query\n  .loans({ memberId: \"0000001\" })\n  .go()\n  .then((loans) => loans.data.length);\n```\n\n----------------------------------------\n\nTITLE: Equivalent DynamoDB Parameters for ElectroDB Get Operation in JSON\nDESCRIPTION: Shows the underlying DynamoDB parameters that ElectroDB generates when executing a get operation, including the formatted composite key structure.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/queries/get.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Key\": {\n    \"pk\": \"$mallstoredirectory#cityid_atlanta1#mallid_eastpointe\",\n    \"sk\": \"$mallstore_1#buildingid_f34#storeid_lattelarrys\"\n  },\n  \"TableName\": \"YOUR_TABLE_NAME\"\n}\n```\n\n----------------------------------------\n\nTITLE: Size Comparison with Escape Function\nDESCRIPTION: Demonstrates using the escape() function to create a filter that compares the size of an attribute against a static value.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/conditions.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nanimals.query\n  .exhibit({ habitat: \"Africa\", enclosure: \"5b\" })\n  .where(\n    ({ diet }, { size, escape }) => `\n    ${size(diet)} > ${escape(2)}\n  `,\n  )\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Equivalent Parameters for Composite Attribute Update in ElectroDB\nDESCRIPTION: This JSON snippet shows the equivalent DynamoDB parameters generated by ElectroDB for updating composite attributes. It includes the UpdateExpression, ExpressionAttributeNames, ExpressionAttributeValues, and other necessary parameters.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/patch.mdx#2025-04-21_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"UpdateExpression\": \"SET #attr4 = :attr4_u0, #gsi1sk = :gsi1sk_u0, #attr1 = :attr1_u0, #attr2 = :attr2_u0\",\n  \"ExpressionAttributeNames\": {\n    \"#attr4\": \"attr4\",\n    \"#gsi1sk\": \"gsi1sk\",\n    \"#attr1\": \"attr1\",\n    \"#attr2\": \"attr2\"\n  },\n  \"ExpressionAttributeValues\": {\n    \":attr4_u0\": \"value6\",\n    \":gsi1sk_u0\": \"$update-edgecases_1#attr2_value2#attr4_value6\",\n    \":attr1_u0\": \"value1\",\n    \":attr2_u0\": \"value2\"\n  },\n  \"TableName\": \"YOUR_TABLE_NAME\",\n  \"Key\": {\n    \"pk\": \"$service#attr1_value1\",\n    \"sk\": \"$entity_version#attr2_value2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ElectroDB Query Options Interface in TypeScript\nDESCRIPTION: TypeScript interface defining all available execution options that can be passed to `.params()` and `.go()` methods. These options control query behavior including parameter customization, table selection, response formatting, error handling, and performance settings.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/partials/batch-mutation-execution-options.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  params?: object;\n  table?: string;\n  data?: 'raw' | 'includeKeys' | 'attributes';\n  originalErr?: boolean;\n  concurrent?: number;\n  unprocessed?: \"raw\" | \"item\";\n  response?: \"default\" | \"none\" | \"all_old\" | \"updated_old\" | \"all_new\" | \"updated_new\";;\n  logger?: (event) => void;\n  listeners Array<(event) => void>;\n  attributes?: string[];\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing ElectroDB Entity with DynamoDB v2 Client\nDESCRIPTION: Demonstrates how to create an ElectroDB Entity instance with AWS SDK v2 DocumentClient. Shows client configuration with region specification and table name setup.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/reference/dynamodb-client.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity } from \"electrodb\";\nimport { DocumentClient } from \"aws-sdk/clients/dynamodb\";\nconst table = \"my_table_name\";\nconst client = new DocumentClient({\n  region: \"us-east-1\",\n});\n\nconst task = new Entity(\n  {\n    // your model\n  },\n  {\n    client, // <----- client\n    table,\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Template-Based Index Configuration in ElectroDB\nDESCRIPTION: Example showing how to use the template property for custom key formatting with optional composite attributes.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/modeling/indexes.mdx#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  model: {\n    entity: \"your_entity_name\",\n    service: \"your_service_name\",\n    version: \"1\"\n  },\n  attributes: {\n    accountId: {\n      type: \"string\" // string and number types are both supported\n    }\n  },\n  indexes: {\n    \"your_access_pattern_name\": {\n      pk: {\n        field: \"accountId\",\n        composite: [\"accountId\"],\n        template: \"${accountId}\"\n      },\n      sk: {...}\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: DynamoDB Query Parameters\nDESCRIPTION: Shows the equivalent DynamoDB query parameters generated by ElectroDB for collection queries.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/modeling/collections.mdx#2025-04-21_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"TableName\": \"projectmanagement\",\n  \"ExpressionAttributeNames\": { \"#pk\": \"gsi2pk\", \"#sk1\": \"gsi2sk\" },\n  \"ExpressionAttributeValues\": {\n    \":pk\": \"$taskapp_1#employeeid_joeexotic\",\n    \":sk1\": \"$assignments\"\n  },\n  \"KeyConditionExpression\": \"#pk = :pk and begins_with(#sk1, :sk1)\",\n  \"IndexName\": \"gsi2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using escape() Method for Query Filtering in ElectroDB\nDESCRIPTION: Demonstrates how to use the escape() method to filter queries based on attribute size comparison. The escape() method allows providing primitives to expressions without specific attribute requirements.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/queries/filters.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nanimals.query\n  .exhibit({ habitat: \"Africa\", enclosure: \"5b\" })\n  .where(\n    ({ diet }, { size, escape }) => `\n    ${size(diet)} > ${escape(2)}\n  `,\n  )\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Default Response Format for Upsert Operations\nDESCRIPTION: The standard response format returned by an upsert operation. The response contains the entity identifiers of the upserted record.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/upsert.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  data: EntityIdentifiers<typeof StoreLocations>;\n}\n```\n\n----------------------------------------\n\nTITLE: DynamoDB Query Parameters Output\nDESCRIPTION: JSON output showing the formatted DynamoDB query parameters generated by the params() method, including index name, table name, attribute names/values, and expressions.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/core-concepts/executing-queries.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"IndexName\": \"idx2\",\n  \"TableName\": \"electro\",\n  \"ExpressionAttributeNames\": {\n    \"#rent\": \"rent\",\n    \"#pk\": \"idx2pk\",\n    \"#sk1\": \"idx2sk\"\n  },\n  \"ExpressionAttributeValues\": {\n    \":rent1\": \"5000.00\",\n    \":pk\": \"$mallstoredirectory_1#mallid_eastpointe\",\n    \":sk1\": \"$mallstore#leaseenddate_2020-06-01#rent_\",\n    \":sk2\": \"$mallstore#leaseenddate_2020-07-31#rent_\"\n  },\n  \"KeyConditionExpression\": \"#pk = :pk and #sk1 BETWEEN :sk1 AND :sk2\",\n  \"FilterExpression\": \"#rent <= :rent1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using the compare Option for v2 Compatibility in ElectroDB v3\nDESCRIPTION: Example of using the new 'compare' execution option with the value 'v2' to maintain backward compatibility with ElectroDB v2 query behavior. This option is deprecated but allows for smoother migration.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/core-concepts/v3-migration.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{ compare: \"v2\" }\n```\n\n----------------------------------------\n\nTITLE: Configuring Attributes as Indexes in ElectroDB\nDESCRIPTION: Example of using attribute fields directly as index keys without prefixing, showing how to map accountId and productNumber as primary key fields.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/modeling/indexes.mdx#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  model: {\n    entity: \"your_entity_name\",\n    service: \"your_service_name\",\n    version: \"1\"\n  },\n  attributes: {\n    accountId: {\n      type: \"string\"\n    },\n    productNumber: {\n      type: \"number\"\n    }\n  },\n  indexes: {\n    products: {\n      pk: {\n        field: \"accountId\",\n        composite: [\"accountId\"]\n      },\n      sk: {\n        field: \"productNumber\",\n        composite: [\"productNumber\"]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Direct Reports Query in TypeScript\nDESCRIPTION: This snippet shows the structure of the response returned when querying for direct reports. It includes employee details and a cursor for pagination.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/examples/human-resources.mdx#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  data: [\n    {\n      employee: \"jexotic\",\n      firstName: \"joe\",\n      lastName: \"maldonado-passage\",\n      office: \"gw zoo\",\n      title: \"tiger king\",\n      team: \"founders\",\n      salary: \"10000.00\",\n      manager: \"jlowe\",\n      dateHired: \"1999-02-23\",\n      birthday: \"1963-03-05\",\n    }\n  ],\n  cursor: '...'\n}\n```\n\n----------------------------------------\n\nTITLE: Entity Get Request with Template in ElectroDB\nDESCRIPTION: Example of making a get request with templated keys and the resulting DynamoDB query parameters.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/modeling/indexes.mdx#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nawait myEntity\n  .get({\n    accountId: \"1111-2222-3333-4444\",\n    organizationId: \"AAAA-BBBB-CCCC-DDDD\",\n  })\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Defining ElectroValidationError Type in TypeScript\nDESCRIPTION: This code snippet defines the TypeScript interface for ElectroValidationError, which is used to provide detailed information about validation errors in ElectroDB. It includes properties for the error code, date, fields with validation issues, and causes of the errors.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/reference/errors.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nElectroValidationError<T extends Error = Error> extends ElectroError {\n    readonly name: \"ElectroValidationError\"\n    readonly code: number;\n    readonly date: number;\n    readonly isElectroError: boolean;\n    ref: {\n        readonly code: number;\n        readonly section: string;\n        readonly name: string;\n        readonly sym: unique symbol;\n    }\n    readonly fields: ReadonlyArray<{\n        /**\n         * The json path to the attribute that had a validation error\n         */\n        readonly field: string;\n        /**\n         * A description of the validation error for that attribute\n         */\n        readonly reason: string;\n        /**\n         * Index of the value passed (present only in List attribute validation errors)\n         */\n        readonly index: number | undefined;\n        /**\n         * The error thrown from the attribute's validate callback (if applicable)\n         */\n        readonly cause: T | undefined;\n    }>\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Set Attributes in ElectroDB\nDESCRIPTION: Shows how to define set attributes in ElectroDB, supporting String and Number Sets. Set attributes can be defined with finite lists of acceptable values, similar to enum attributes.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/modeling/attributes.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nattributes: {\n  myStringSet: {\n    type: \"set\",\n    items: \"string\"\n  },\n  myNumberSet: {\n    type: \"set\",\n    items: \"number\"\n  },\n  myEnumStringSet: {\n    type: \"set\",\n    items: [\"RED\", \"GREEN\", \"BLUE\"] as const // electrodb will only accept the included strings \"RED\", \"GREEN\", and/or \"BLUE\"\n  }\n  myEnumNumberSet: {\n    type: \"set\",\n    items: [1, 2, 3, 4] as const // electrodb will only accept the included numbers 1, 2, 3, or 4\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: DynamoDB Update Parameters - JSON\nDESCRIPTION: Shows the equivalent DynamoDB parameters generated by ElectroDB for the update operations.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/update.mdx#2025-04-21_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"UpdateExpression\": \"SET #category = :category_u0, #deposit = #deposit - :deposit_u0, #rentalAgreement = list_append(#rentalAgreement, :rentalAgreement_u0), #fees = #fees + #petFee, #cityId = :cityId_u0, #mallId = :mallId_u0, #buildingId = :buildingId_u0, #storeId = :storeId_u0, #__edb_e__ = :__edb_e___u0, #__edb_v__ = :__edb_v___u0 REMOVE #discount ADD #tenants :tenants_u0, #warnings :warnings_u0 DELETE #tags :tags_u0, #contact :contact_u0\",\n  \"ExpressionAttributeNames\": {...},\n  \"ExpressionAttributeValues\": {...},\n  \"TableName\": \"electro\",\n  \"Key\": {...},\n  \"ConditionExpression\": \"#category = :category0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying with Scope in ElectroDB\nDESCRIPTION: Examples showing how query results are formatted when using scope in index definitions for both organization and user entities.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/modeling/indexes.mdx#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\norganization.query.myIndex({organizationId: '123'}).go();\n// {\n//     \"KeyConditionExpression\": \"#pk = :pk and #sk1 = :sk1\",\n//     \"TableName\": \"your_table_name\",\n//     \"ExpressionAttributeNames\": {\n//         \"#pk\": \"pk\",\n//         \"#sk1\": \"sk\"\n//     },\n//     \"ExpressionAttributeValues\": {\n//         \":pk\": \"$taskapp_org\",\n//         \":sk1\": \"$organization_1#organizationid_org123\"\n//     }\n// }\n```\n\nLANGUAGE: typescript\nCODE:\n```\nuser.query.myIndex({userId: '456'}).go();\n// {\n//     \"KeyConditionExpression\": \"#pk = :pk and #sk1 = :sk1\",\n//     \"TableName\": \"your_table_name\",\n//     \"ExpressionAttributeNames\": {\n//         \"#pk\": \"pk\",\n//         \"#sk1\": \"sk\"\n//     },\n//     \"ExpressionAttributeValues\": {\n//         \":pk\": \"$taskapp_user\",\n//         \":sk1\": \"$organization_1#organizationid_org123\"\n//     }\n// }\n```\n\n----------------------------------------\n\nTITLE: Equivalent DynamoDB Parameters for Match Query in JSON\nDESCRIPTION: Shows the raw DynamoDB parameters that ElectroDB generates when using the Match method. This includes the KeyConditionExpression, TableName, ExpressionAttributeNames, ExpressionAttributeValues, IndexName, and FilterExpression.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/queries/match.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"KeyConditionExpression\": \"#pk = :pk and begins_with(#sk1, :sk1)\",\n  \"TableName\": \"StoreDirectory\",\n  \"ExpressionAttributeNames\": {\n    \"#mallId\": \"mallId\",\n    \"#buildingId\": \"buildingId\",\n    \"#leaseEndDate\": \"leaseEndDate\",\n    \"#rent\": \"rent\",\n    \"#pk\": \"gsi1pk\",\n    \"#sk1\": \"gsi1sk\"\n  },\n  \"ExpressionAttributeValues\": {\n    \":mallId1\": \"EastPointe\",\n    \":buildingId1\": \"BuildingA1\",\n    \":leaseEndDate1\": \"2020-03-22\",\n    \":rent1\": \"1500.00\",\n    \":pk\": \"$mallstoredirectory#mallid_eastpointe\",\n    \":sk1\": \"$mallstore_1#buildingid_buildinga1#unitid_\"\n  },\n  \"IndexName\": \"gsi1pk-gsi1sk-index\",\n  \"FilterExpression\": \"#mallId = :mallId1 AND#buildingId = :buildingId1 AND#leaseEndDate = :leaseEndDate1 AND#rent = :rent1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Output JSON for Composite Attribute Array Example\nDESCRIPTION: This JSON object shows the resulting key structure after applying the composite attribute array. It demonstrates how ElectroDB formats the partition key (pk) and sort key (sk) using the defined attributes and labels.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/modeling/indexes.mdx#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"pk\": \"$mallstoredirectory_1#sid_storevalue\",\n  \"sk\": \"$mallstores#mid_mallvalue#bid_buildingvalue#uid_unitvalue\"\n}\n```\n\n----------------------------------------\n\nTITLE: EntityRecord Type Definition\nDESCRIPTION: Type definition for complete entity records.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/reference/typescript.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype EntityRecord<E extends Entity<any, any, any, any>> = E extends Entity<\n  infer A,\n  infer F,\n  infer C,\n  infer S\n>\n  ? Item<A, F, C, S, S[\"attributes\"]>\n  : never;\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Counter Entity\nDESCRIPTION: Creates a service-wide counter entity without specific partition keys for global counting across the service.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/recipes/item-counters.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst GlobalCounter = new Entity({\n  model: {\n    entity: 'global-counter',\n    service: 'directory',\n    version: '1',\n  },\n  attributes: {\n    count: {\n      type: 'number',\n    },\n  },\n  indexes: {\n    count: {\n      pk: {\n        field: 'pk',\n        composite: [],\n      },\n      sk: {\n        field: 'sk',\n        composite: [],\n      }\n    },\n  },\n}, { table });\n```\n\n----------------------------------------\n\nTITLE: ElectroDB Query Result Structure\nDESCRIPTION: Shows the expected output structure from an ElectroDB query, containing an array of results matching the schema and an optional cursor for pagination.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/core-concepts/executing-queries.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  data: Array<YOUR_SCHEMA>,\n  cursor: string | undefined\n}\n```\n\n----------------------------------------\n\nTITLE: Output JSON for Composite Attribute Template Example\nDESCRIPTION: This JSON object illustrates the key structure resulting from the composite attribute template. It shows how the custom template is applied to create the partition key (pk) and sort key (sk) without ElectroDB's default prefixes.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/modeling/indexes.mdx#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"pk\": \"sid_storevalue\",\n  \"sk\": \"mid_mallvalue#bid_buildingvalue#uid_unitvalue\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generated DynamoDB Update Expression in JSON\nDESCRIPTION: This JSON object represents the DynamoDB update expression generated by ElectroDB based on the previous TypeScript code. It includes the UpdateExpression, ExpressionAttributeNames, ExpressionAttributeValues, TableName, Key, and ConditionExpression.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"UpdateExpression\": \"SET #status = :status_u0, #points = #points + :points_u0, #comments = list_append(#comments, :comments_u0), #updatedAt = :updatedAt_u0, #gsi1sk = :gsi1sk_u0\",\n  \"ExpressionAttributeNames\": {\n    \"#status\": \"status\",\n    \"#points\": \"points\",\n    \"#comments\": \"comments\",\n    \"#updatedAt\": \"updatedAt\",\n    \"#gsi1sk\": \"gsi1sk\"\n  },\n  \"ExpressionAttributeValues\": {\n    \":status0\": \"in-progress\",\n    \":status_u0\": \"open\",\n    \":points_u0\": 5,\n    \":comments_u0\": [\n      {\n        \"user\": \"janet\",\n        \"body\": \"This seems half-baked.\"\n      }\n    ],\n    \":updatedAt_u0\": 1630977029015,\n    \":gsi1sk_u0\": \"$assignments#tasks_1#status_open\"\n  },\n  \"TableName\": \"your_table_name\",\n  \"Key\": {\n    \"pk\": \"$taskapp#team_core\",\n    \"sk\": \"$tasks_1#project_backend#task_45-662\"\n  },\n  \"ConditionExpression\": \"attribute_exists(pk) AND attribute_exists(sk) AND #status = :status0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Idempotent Transaction Behavior\nDESCRIPTION: Example showing how multiple calls to incrementAgentKills with the same token result in only one actual increment operation within DynamoDB's timing window.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/transact-write.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// kills `0` -> `2`\nawait incrementAgentKills({\n  token,\n  id: \"7\",\n  kills: 2,\n  designation: \"00\",\n});\n\n// still results in `2`\nawait incrementAgentKills({\n  token,\n  id: \"7\",\n  kills: 2,\n  designation: \"00\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using data Option Instead of Deprecated Options in ElectroDB v3\nDESCRIPTION: Example of migrating from deprecated v2 options 'includeKeys' and 'raw' to the v3 'data' option. In v3, you need to use { data: \"includeKeys\" } and { data: \"raw\" } respectively.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/core-concepts/v3-migration.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{ data: \"includeKeys\" }\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{ data: \"raw\" }\n```\n\n----------------------------------------\n\nTITLE: ElectroDB Execution Options TypeScript Interface\nDESCRIPTION: TypeScript interface defining the available execution options that can be passed to both the `.params()` and `.go()` methods when building a query. These options provide control over various aspects of query execution and response formatting.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/queries/batch-get.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  params?: object;\n  table?: string;\n  data?: 'raw' | 'includeKeys' | 'attributes';\n  originalErr?: boolean;\n  concurrent?: number;\n  unprocessed?: \"raw\" | \"item\";\n  response?: \"default\" | \"none\" | \"all_old\" | \"updated_old\" | \"all_new\" | \"updated_new\";\n  ignoreOwnership?: boolean;\n  logger?: (event) => void;\n  listeners Array<(event) => void>;\n  preserveBatchOrder?: boolean;\n  attributes?: string[];\n};\n```\n\n----------------------------------------\n\nTITLE: QueryResponse Type Definition\nDESCRIPTION: Type definition for query responses containing data array and cursor.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/reference/typescript.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport type QueryResponse<E extends Entity<any, any, any, any>> = {\n  data: EntityItem<E>[];\n  cursor: string | null;\n};\n```\n\n----------------------------------------\n\nTITLE: Entity Listeners Implementation\nDESCRIPTION: Example of implementing multiple listeners for an Entity in ElectroDB. Shows how to configure multiple event listeners for entity-level events.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/reference/events-logging.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DynamoDB } from \"aws-sdk\";\nimport { Entity, ElectroEvent } from \"electrodb\";\n\nconst table = \"my_table_name\";\nconst client = new DynamoDB.DocumentClient();\nconst listener1 = (event: ElectroEvent) => {\n  // do work\n};\n\nconst listener2 = (event: ElectroEvent) => {\n  // do work\n};\n\nconst task = new Entity(\n  {\n    // your model\n  },\n  {\n    client,\n    table,\n    listeners: [\n      listener1,\n      listener2, // <----- supports multiple listeners\n    ],\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Equivalent DynamoDB Parameters for BatchGet in JSON\nDESCRIPTION: This JSON snippet illustrates the equivalent DynamoDB parameters for a BatchGet operation. It shows the structure of the 'RequestItems' object with the table name and the composite keys for each item to be retrieved.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/queries/batch-get.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"RequestItems\": {\n    [\"YOUR_TABLE_NAME\"]: {\n      \"Keys\": [\n        {\n          \"pk\": \"$mallstoredirectory#cityid_atlanta1#mallid_eastpointe\",\n          \"sk\": \"$mallstore_1#buildingid_f34#storeid_lattelarrys\"\n        },\n        {\n          \"pk\": \"$mallstoredirectory#cityid_madison2#mallid_westend\",\n          \"sk\": \"$mallstore_1#buildingid_a21#storeid_mochajoes\"\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Service Logger Implementation\nDESCRIPTION: Example of implementing a logger callback function when instantiating a Service in ElectroDB. Demonstrates service-level logging configuration.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/reference/events-logging.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DynamoDB } from \"aws-sdk\";\nimport { Entity, ElectroEvent } from \"electrodb\";\n\nconst table = \"my_table_name\";\nconst client = new DynamoDB.DocumentClient();\nconst logger = (event: ElectroEvent) => {\n  console.log(JSON.stringify(event, null, 4));\n};\n\nconst task = new Entity({\n  // your model\n});\n\nconst user = new Entity({\n  // your model\n});\n\nconst service = new Service(\n  { task, user },\n  {\n    client,\n    table,\n    logger, // <----- logger listener\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Passing DocClient to Entity Constructor in JavaScript\nDESCRIPTION: Example of how to correctly pass the DynamoDB DocClient to an Entity constructor. This is required when using query operations that need a client connection to DynamoDB.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/reference/errors.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nnew Entity(schema, { client });\n```\n\n----------------------------------------\n\nTITLE: Converting Composite Attributes Example\nDESCRIPTION: Sample composite attributes object structure used for key conversions.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/reference/conversions.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst composite = {\n  accountId: \"be0c1696-50e5-47b2-8e7b-ec14d842a3f0\",\n  organizationId: \"a13417bc-0105-4ca1-98ed-dc83204d9c08\",\n};\n```\n\n----------------------------------------\n\nTITLE: ElectroDB Response Format for Get Operations in TypeScript\nDESCRIPTION: Shows the TypeScript type for the response returned by the get operation, which includes the data (either the retrieved entity item or null) and an optional cursor.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/queries/get.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  data: EntityItem<typeof StoreLocations> | null,\n  cursor: string | undefined\n}\n```\n\n----------------------------------------\n\nTITLE: Entity Query Equivalent DynamoDB Parameters\nDESCRIPTION: The raw DynamoDB parameters for an entity query, highlighting the difference in sort key structure compared to collection queries. Entity queries include the entity type in the sort key prefix.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/modeling/collections.mdx#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"KeyConditionExpression\": \"#pk = :pk and begins_with(#sk1, :sk1)\",\n  \"TableName\": \"projectmanagement\",\n  \"ExpressionAttributeNames\": {\n    \"#pk\": \"gsi2pk\",\n    \"#sk1\": \"gsi2sk\"\n  },\n  \"ExpressionAttributeValues\": {\n    \":pk\": \"$taskapp#employeeid_jexotic\",\n    \":sk1\": \"$assignments#tasks_1\"\n  },\n  \"IndexName\": \"gsi2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Service Listeners Implementation\nDESCRIPTION: Example of implementing multiple listeners for a Service in ElectroDB. Demonstrates how to set up multiple event listeners at the service level.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/reference/events-logging.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DynamoDB } from \"aws-sdk\";\nimport { Entity, ElectroEvent } from \"electrodb\";\n\nconst table = \"my_table_name\";\nconst client = new DynamoDB.DocumentClient();\n\nconst listener1 = (event: ElectroEvent) => {\n  // do work\n};\n\nconst listener2 = (event: ElectroEvent) => {\n  // do work\n};\n\nconst task = new Entity({\n  // your model\n});\n\nconst user = new Entity({\n  // your model\n});\n\nconst service = new Service(\n  { task, user },\n  {\n    client,\n    table,\n    listeners: [\n      listener1,\n      listener2, // <----- supports multiple listeners\n    ],\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Querying Contributions Collection in ElectroDB (JSON)\nDESCRIPTION: This snippet shows the equivalent DynamoDB parameters for querying the 'contributions' collection in ElectroDB. It demonstrates the use of a GSI and the attribute mappings.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/modeling/collections.mdx#2025-04-21_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"KeyConditionExpression\": \"#pk = :pk and begins_with(#sk1, :sk1)\",\n  \"TableName\": \"projectmanagement\",\n  \"ExpressionAttributeNames\": { \"#pk\": \"gsi2pk\", \"#sk1\": \"gsi2sk\" },\n  \"ExpressionAttributeValues\": {\n    \":pk\": \"$taskapp#employeeid_jexotic\",\n    \":sk1\": \"$contributions\"\n  },\n  \"IndexName\": \"gsi2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DynamoDB Table with Global Secondary Indexes\nDESCRIPTION: JSON configuration for a DynamoDB table named 'electro' with a primary key of 'pk' and 'sk', and a Global Secondary Index 'gsi1pk-gsi1sk-index' with ALL projection type.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/recipes/keys-only-gsi.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"TableName\": \"electro\",\n    \"KeySchema\":[\n{\n    \"AttributeName\":\"pk\",\n    \"KeyType\":\"HASH\"\n},\n{\n    \"AttributeName\":\"sk\",\n    \"KeyType\":\"RANGE\"\n}\n    ],\n    \"AttributeDefinitions\":[\n{\n    \"AttributeName\":\"pk\",\n    \"AttributeType\":\"S\"\n},\n{\n    \"AttributeName\":\"sk\",\n    \"AttributeType\":\"S\"\n},\n{\n    \"AttributeName\":\"gsi1pk\",\n    \"AttributeType\":\"S\"\n},\n{\n    \"AttributeName\":\"gsi1sk\",\n    \"AttributeType\":\"S\"\n}\n    ],\n    \"GlobalSecondaryIndexes\":[\n{\n    \"IndexName\":\"gsi1pk-gsi1sk-index\",\n    \"KeySchema\":[\n{\n    \"AttributeName\":\"gsi1pk\",\n    \"KeyType\":\"HASH\"\n},\n{\n    \"AttributeName\":\"gsi1sk\",\n    \"KeyType\":\"RANGE\"\n}\n    ],\n    \"Projection\":{\n    \"ProjectionType\":\"ALL\"\n}\n}\n    ],\n    \"BillingMode\":\"PAY_PER_REQUEST\"\n}\n```\n\n----------------------------------------\n\nTITLE: Response Format for ElectroDB Create Operation\nDESCRIPTION: Shows the structure of the response returned after a successful create operation. The response contains the created record in a data property with the schema structure defined in the model.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/create.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  data: {\n    YOUR_SCHEMA;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Overview Collection in ElectroDB (JSON)\nDESCRIPTION: This snippet shows the equivalent DynamoDB parameters for querying the 'overview' collection in ElectroDB. It demonstrates the KeyConditionExpression and attribute mappings used.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/modeling/collections.mdx#2025-04-21_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"KeyConditionExpression\": \"#pk = :pk and begins_with(#sk1, :sk1)\",\n  \"TableName\": \"projectmanagement\",\n  \"ExpressionAttributeNames\": { \"#pk\": \"pk\", \"#sk1\": \"sk\" },\n  \"ExpressionAttributeValues\": {\n    \":pk\": \"$taskapp#projectid_sd-204\",\n    \":sk1\": \"$overview\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: DynamoDB Equivalent Parameters\nDESCRIPTION: Shows the raw DynamoDB parameters that are generated from the ElectroDB update operations.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/patch.mdx#2025-04-21_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"UpdateExpression\": \"SET #category = :category_u0, #deposit = #deposit - :deposit_u0, #rentalAgreement = list_append(#rentalAgreement, :rentalAgreement_u0), #fees = #fees + #petFee, #cityId = :cityId_u0, #mallId = :mallId_u0, #buildingId = :buildingId_u0, #storeId = :storeId_u0, #__edb_e__ = :__edb_e___u0, #__edb_v__ = :__edb_v___u0 REMOVE #discount ADD #tenants :tenants_u0, #warnings :warnings_u0 DELETE #tags :tags_u0, #contact :contact_u0\",\n  \"ExpressionAttributeNames\": {...},\n  \"ExpressionAttributeValues\": {...},\n  \"TableName\": \"electro\",\n  \"Key\": {...},\n  \"ConditionExpression\": \"attribute_exists(#pk) AND attribute_exists(#sk) AND #category = :category0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Equivalent DynamoDB Parameters for Composite Update in JSON\nDESCRIPTION: This JSON object shows the equivalent DynamoDB update parameters generated by ElectroDB for updating an entity with composite attributes, demonstrating how index keys are constructed.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/update.mdx#2025-04-21_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"UpdateExpression\": \"SET #attr4 = :attr4_u0, #gsi1sk = :gsi1sk_u0, #attr1 = :attr1_u0, #attr2 = :attr2_u0\",\n  \"ExpressionAttributeNames\": {\n    \"#attr4\": \"attr4\",\n    \"#gsi1sk\": \"gsi1sk\",\n    \"#attr1\": \"attr1\",\n    \"#attr2\": \"attr2\"\n  },\n  \"ExpressionAttributeValues\": {\n    \":attr4_u0\": \"value6\",\n    \":gsi1sk_u0\": \"$update-edgecases_1#attr2_value2#attr4_value6\",\n    \":attr1_u0\": \"value1\",\n    \":attr2_u0\": \"value2\"\n  },\n  \"TableName\": \"YOUR_TABLE_NAME\",\n  \"Key\": {\n    \"pk\": \"$service#attr1_value1\",\n    \"sk\": \"$entity_version#attr2_value2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Input JSON for Composite Attribute Examples\nDESCRIPTION: This JSON object represents the input data used in the composite attribute examples. It contains values for storeId, mallId, buildingId, and unitId.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/modeling/indexes.mdx#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"storeId\": \"STOREVALUE\",\n    \"mallId\": \"MALLVALUE\",\n    \"buildingId\": \"BUILDINGVALUE\",\n    \"unitId\": \"UNITVALUE\"\n}\n```\n\n----------------------------------------\n\nTITLE: Default Response Type Definition\nDESCRIPTION: TypeScript type definition showing the structure of the default response when deleting an entity. The response contains the entity identifiers of the deleted StoreLocations record.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/delete.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  data: EntityIdentifiers<typeof StoreLocations>;\n}\n```\n\n----------------------------------------\n\nTITLE: DynamoDB Parameters for Upsert Operation\nDESCRIPTION: The equivalent DynamoDB parameters generated by ElectroDB for the upsert operation. This shows the internal translation from ElectroDB's interface to DynamoDB's native API.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/upsert.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"TableName\": \"StoreDirectory\",\n  \"UpdateExpression\": \"SET #__edb_e__ = :__edb_e___u0, #__edb_v__ = :__edb_v___u0, #cityId = :cityId_u0, #mallId = :mallId_u0, #storeId = :storeId_u0, #buildingId = :buildingId_u0, #unitId = :unitId_u0, #category = :category_u0, #leaseEndDate = :leaseEndDate_u0, #rent = :rent_u0, #discount = :discount_u0, #gsi1pk = :gsi1pk_u0, #gsi1sk = :gsi1sk_u0, #gsi2pk = :gsi2pk_u0, #gsi2sk = :gsi2sk_u0\",\n  \"ExpressionAttributeNames\": {\n    \"#__edb_e__\": \"__edb_e__\",\n    \"#__edb_v__\": \"__edb_v__\",\n    \"#cityId\": \"cityId\",\n    \"#mallId\": \"mallId\",\n    \"#storeId\": \"storeId\",\n    \"#buildingId\": \"buildingId\",\n    \"#unitId\": \"unitId\",\n    \"#category\": \"category\",\n    \"#leaseEndDate\": \"leaseEndDate\",\n    \"#rent\": \"rent\",\n    \"#discount\": \"discount\",\n    \"#gsi1pk\": \"gsi1pk\",\n    \"#gsi1sk\": \"gsi1sk\",\n    \"#gsi2pk\": \"gsi2pk\",\n    \"#gsi2sk\": \"gsi2sk\"\n  },\n  \"ExpressionAttributeValues\": {\n    \":__edb_e___u0\": \"MallStore\",\n    \":__edb_v___u0\": \"1\",\n    \":cityId_u0\": \"Atlanta1\",\n    \":mallId_u0\": \"EastPointe\",\n    \":storeId_u0\": \"LatteLarrys\",\n    \":buildingId_u0\": \"BuildingA1\",\n    \":unitId_u0\": \"B47\",\n    \":category_u0\": \"food/coffee\",\n    \":leaseEndDate_u0\": \"2020-03-22\",\n    \":rent_u0\": \"4500.00\",\n    \":discount_u0\": \"0.00\",\n    \":gsi1pk_u0\": \"$mallstoredirectory#mallid_eastpointe\",\n    \":gsi1sk_u0\": \"$mallstore_1#buildingid_buildinga1#unitid_b47\",\n    \":gsi2pk_u0\": \"$mallstoredirectory#storeid_lattelarrys\",\n    \":gsi2sk_u0\": \"$mallstore_1#leaseenddate_2020-03-22\"\n  },\n  \"Key\": {\n    \"pk\": \"$mallstoredirectory#cityid_atlanta1#mallid_eastpointe\",\n    \"sk\": \"$mallstore_1#buildingid_buildinga1#storeid_lattelarrys\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Default Response Format for Remove Operation in TypeScript\nDESCRIPTION: This snippet shows the default response format for the 'remove' operation in ElectroDB. The response contains the entity identifiers of the removed item.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/remove.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  data: EntityIdentifiers<typeof StoreLocations>;\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Store Location\nDESCRIPTION: Removes a store location from the directory using composite attributes for identification.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/examples/shopping-mall-directory.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nlet storeId = \"LatteLarrys\";\nlet mallId = \"EastPointe\";\nlet buildingId = \"BuildingA1\";\nlet unitId = \"B47\";\nlet storeId = \"LatteLarrys\";\n\nawait StoreLocations.delete({ storeId, mallId, buildingId, unitId }).go();\n```\n\n----------------------------------------\n\nTITLE: Customizing Accent Color in Astro Theme CSS\nDESCRIPTION: This snippet shows how to change the default accent color from blue to red in the Astro theme by modifying the CSS variables in the theme.css file.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/README.md#2025-04-21_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n/* src/styles/theme.css */\n:root {\n  color-scheme: light;\n-  --theme-accent: hsla(var(--color-blue), 1);\n+  --theme-accent: hsla(var(--color-red), 1);   /* or: hsla(#FF0000, 1); */\n```\n\n----------------------------------------\n\nTITLE: Paginated Query Response Structure\nDESCRIPTION: Example JSON response structure from a paginated query showing the cursor and data format.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/queries/pagination.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cursor\": \"...\",\n  \"data\": [\n    {\n      \"mall\": \"3010aa0d-5591-4664-8385-3503ece58b1c\",\n      \"leaseEnd\": \"2020-01-20\",\n      \"sector\": \"7d0f5c19-ec1d-4c1e-b613-a4cc07eb4db5\",\n      \"store\": \"MNO\",\n      \"unit\": \"B5\",\n      \"id\": \"e0705325-d735-4fe4-906e-74091a551a04\",\n      \"building\": \"BuildingE\",\n      \"category\": \"food/coffee\",\n      \"rent\": \"0.00\"\n    },\n    {\n      \"mall\": \"3010aa0d-5591-4664-8385-3503ece58b1c\",\n      \"leaseEnd\": \"2020-01-20\",\n      \"sector\": \"7d0f5c19-ec1d-4c1e-b613-a4cc07eb4db5\",\n      \"store\": \"ZYX\",\n      \"unit\": \"B9\",\n      \"id\": \"f201a1d3-2126-46a2-aec9-758ade8ab2ab\",\n      \"building\": \"BuildingI\",\n      \"category\": \"food/coffee\",\n      \"rent\": \"0.00\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: DynamoDB Parameters for Advanced Upsert with Chained Operations\nDESCRIPTION: The equivalent DynamoDB parameters generated for an advanced upsert operation with chained operations. This shows how ElectroDB translates multiple operations into a single DynamoDB UpdateItem operation.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/upsert.mdx#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"TableName\": \"electro\",\n  \"UpdateExpression\": \"SET #__edb_e__ = :__edb_e___u0, #__edb_v__ = :__edb_v___u0, #cityId = :cityId_u0, #mallId = :mallId_u0, #storeId = :storeId_u0, #buildingId = :buildingId_u0, #unitId = :unitId_u0, #category = :category_u0, #leaseEndDate = :leaseEndDate_u0, #rent = :rent_u0, #discount = :discount_u0, #gsi1pk = :gsi1pk_u0, #gsi1sk = :gsi1sk_u0, #gsi2pk = :gsi2pk_u0, #gsi2sk = :gsi2sk_u0, #warnings = if_not_exists(#warnings, :warnings_u0), #petFee = (if_not_exists(#petFee, :petFee_default_value_u0) - :petFee_u0), #rentalAgreement = list_append(if_not_exists(#rentalAgreement, :rentalAgreement_default_value_u0), :rentalAgreement_u0) ADD #deposit :deposit_u0, #tenants :tenants_u0\",\n  \"ExpressionAttributeNames\": {\n    \"#__edb_e__\": \"__edb_e__\",\n    \"#__edb_v__\": \"__edb_v__\",\n    \"#cityId\": \"cityId\",\n    \"#mallId\": \"mallId\",\n    \"#storeId\": \"storeId\",\n    \"#buildingId\": \"buildingId\",\n    \"#unitId\": \"unitId\",\n    \"#category\": \"category\",\n    \"#leaseEndDate\": \"leaseEndDate\",\n    \"#rent\": \"rent\",\n    \"#discount\": \"discount\",\n    \"#gsi1pk\": \"gsi1pk\",\n    \"#gsi1sk\": \"gsi1sk\",\n    \"#gsi2pk\": \"gsi2pk\",\n    \"#gsi2sk\": \"gsi2sk\",\n    \"#deposit\": \"deposit\",\n    \"#tenants\": \"tenants\",\n    \"#warnings\": \"warnings\",\n    \"#petFee\": \"petFee\",\n    \"#rentalAgreement\": \"rentalAgreement\"\n  },\n  \"ExpressionAttributeValues\": {\n    \":__edb_e___u0\": \"MallStore\",\n    \":__edb_v___u0\": \"1\",\n    \":cityId_u0\": \"Atlanta\",\n    \":mallId_u0\": \"EastPointe\",\n    \":storeId_u0\": \"LatteLarrys\",\n    \":buildingId_u0\": \"BuildingA1\",\n    \":unitId_u0\": \"B47\",\n    \":category_u0\": \"food/coffee\",\n    \":leaseEndDate_u0\": \"2020-03-22\",\n    \":rent_u0\": \"4500.00\",\n    \":discount_u0\": \"0.00\",\n    \":gsi1pk_u0\": \"$mallstoredirectory#mallid_eastpointe\",\n    \":gsi1sk_u0\": \"$mallstore_1#buildingid_buildinga1#unitid_b47\",\n    \":gsi2pk_u0\": \"$mallstoredirectory#storeid_lattelarrys\",\n    \":gsi2sk_u0\": \"$mallstore_1#leaseenddate_2020-03-22\",\n    \":deposit_u0\": 100,\n    \":tenants_u0\": [\"Larry David\"],\n    \":warnings_u0\": 0,\n    \":petFee_u0\": 250,\n    \":petFee_default_value_u0\": 0,\n    \":rentalAgreement_u0\": [\n      {\n        \"type\": \"amendment\",\n        \"detail\": \"Larry David accepts coffee liability\"\n      }\n    ],\n    \":rentalAgreement_default_value_u0\": []\n  },\n  \"Key\": {\n    \"pk\": \"$mallstoredirectory#cityid_atlanta#mallid_eastpointe\",\n    \"sk\": \"$mallstore_1#buildingid_buildinga1#storeid_lattelarrys\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Equivalent DynamoDB Parameters for Remove Operation in JSON\nDESCRIPTION: This JSON snippet represents the equivalent DynamoDB parameters for the 'remove' operation in ElectroDB. It includes the Key, TableName, and ConditionExpression.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/remove.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Key\": {\n    \"pk\": \"$mallstoredirectory#cityid_atlanta1#mallid_eastpointe\",\n    \"sk\": \"$mallstore_1#buildingid_f34#storeid_lattelarrys\"\n  },\n  \"TableName\": \"YOUR_TABLE_TABLE\",\n  \"ConditionExpression\": \"attribute_exists(pk) AND attribute_exists(sk)\"\n}\n```\n\n----------------------------------------\n\nTITLE: CustomAttributeType Example\nDESCRIPTION: Basic example showcasing the usage of ElectroDB's type utilities.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/reference/typescript.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype EntitySchema = QueryResponse<typeof MyEntity>\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-language Sidebar Navigation\nDESCRIPTION: Demonstrates how to extend the SIDEBAR configuration to support multiple languages by adding a separate navigation structure for Spanish content.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/README.md#2025-04-21_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n// src/config.ts\nexport const SIDEBAR = {\n  en: [\n    { text: 'Section Header', header: true, },\n    { text: 'Introduction', link: 'en/introduction' },\n    // ...\n  ],\n+  es: [\n+    { text: 'Encabezado de sección', header: true, },\n+    { text: 'Introducción', link: 'es/introduction' },\n+    // ...\n+  ],\n};\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS SDK v2 DocumentClient\nDESCRIPTION: Shows basic configuration of AWS SDK v2 DocumentClient with region specification.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/reference/dynamodb-client.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DocumentClient } from \"aws-sdk/clients/dynamodb\";\nconst client = new DocumentClient({\n  region: \"us-east-1\",\n});\n```\n\n----------------------------------------\n\nTITLE: Equivalent DynamoDB Parameters\nDESCRIPTION: The raw DynamoDB parameters that get generated from the update operation\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/update.mdx#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"UpdateExpression\": \"SET #status = :status_u0, #points = #points + :points_u0, #comments = list_append(#comments, :comments_u0), #updatedAt = :updatedAt_u0, #gsi1sk = :gsi1sk_u0\",\n  \"ExpressionAttributeNames\": {\n    \"#status\": \"status\",\n    \"#points\": \"points\",\n    \"#comments\": \"comments\",\n    \"#updatedAt\": \"updatedAt\",\n    \"#gsi1sk\": \"gsi1sk\"\n  },\n  \"ExpressionAttributeValues\": {\n    \":status0\": \"in-progress\",\n    \":status_u0\": \"open\",\n    \":points_u0\": 5,\n    \":comments_u0\": [\n      {\n        \"user\": \"janet\",\n        \"body\": \"This seems half-baked.\"\n      }\n    ],\n    \":updatedAt_u0\": 1630977029015,\n    \":gsi1sk_u0\": \"$assignments#tasks_1#status_open\"\n  },\n  \"TableName\": \"your_table_name\",\n  \"Key\": {\n    \"pk\": \"$taskapp#team_core\",\n    \"sk\": \"$tasks_1#project_backend#task_45-662\"\n  },\n  \"ConditionExpression\": \"attribute_exists(pk) AND attribute_exists(sk) AND #status = :status0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS SDK v3 DynamoDBClient\nDESCRIPTION: Shows basic configuration of AWS SDK v3 DynamoDBClient with region specification.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/reference/dynamodb-client.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DynamoDBClient } from \"@aws-sdk/client-dynamodb\";\nconst client = new DynamoDBClient({\n  region: \"us-east-1\",\n});\n```\n\n----------------------------------------\n\nTITLE: EntityIdentifiers Type Definition\nDESCRIPTION: Type definition for entity identifiers used in CRUD operations.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/reference/typescript.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport type EntityIdentifiers<E extends Entity<any, any, any, any>> =\n  E extends Entity<infer A, infer F, infer C, infer S>\n    ? AllTableIndexCompositeAttributes<A, F, C, S>\n    : never;\n```\n\n----------------------------------------\n\nTITLE: Configuring Sidebar Navigation in Astro\nDESCRIPTION: This snippet demonstrates how to customize the sidebar navigation by modifying the SIDEBAR object in the config.ts file, including section headers and page links.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const SIDEBAR = {\n  en: [\n    { text: \"Section Header\", header: true },\n    { text: \"Introduction\", link: \"en/introduction\" },\n    { text: \"Page 2\", link: \"en/page-2\" },\n    { text: \"Page 3\", link: \"en/page-3\" },\n\n    { text: \"Another Section\", header: true },\n    { text: \"Page 4\", link: \"en/page-4\" },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Passing DocClient to Service Constructor in JavaScript\nDESCRIPTION: Example of how to correctly pass the DynamoDB DocClient to a Service constructor. Similar to Entity initialization, this is required for executing queries to DynamoDB.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/reference/errors.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnew Service(\"\", { client });\n```\n\n----------------------------------------\n\nTITLE: Remove Operation Example\nDESCRIPTION: Example of using the remove() method to delete an attribute from a store location\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/update.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nawait StoreLocations.update({ cityId, mallId, storeId, buildingId })\n  .remove([\"discount\"])\n  .where((attr, op) => op.eq(attr.category, \"food/coffee\"))\n  .go();\n```\n\n----------------------------------------\n\nTITLE: Composite to Keys/Cursor Conversion Methods\nDESCRIPTION: Methods for converting composite attributes to keys and cursors, including access pattern-specific conversions.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/reference/conversions.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst conversions = createConversions(thing);\n\n// from Composite to all possible index Keys\nconversions.fromComposite.toKeys(item);\n\n// from Composite to Cursor\nconversions.fromComposite.toCursor(item);\n\n// from Composite to Keys for a specific access pattern\nconversions.byAccessPattern.records.fromComposite.toKeys(item);\n// from Composite to Cursor for a specific access pattern\nconversions.byAccessPattern.records.fromComposite.toCursor(item);\n```\n\n----------------------------------------\n\nTITLE: Installing ElectroDB with Yarn\nDESCRIPTION: Command to install ElectroDB as a project dependency using Yarn package manager.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/core-concepts/quick-start.mdx#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add electrodb\n```\n\n----------------------------------------\n\nTITLE: Installing ElectroDB with NPM\nDESCRIPTION: Command to install ElectroDB as a project dependency using NPM package manager.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/core-concepts/quick-start.mdx#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install electrodb --save\n```\n\n----------------------------------------\n\nTITLE: Example of Duplicate Index Definition in JavaScript\nDESCRIPTION: Example showing how duplicate index names can be accidentally defined in an ElectroDB model, which would trigger error code 1004 for duplicate indexes.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/reference/errors.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  indexes: {\n    index1: {\n      index: \"idx1\", // <-- duplicate \"idx1\"\n      pk: {},\n      sk: {}\n    },\n    index2: {\n      index: \"idx1\", // <-- duplicate \"idx1\"\n      pk: {},\n      sk: {}\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Strict Mode Key Conversion Options\nDESCRIPTION: Examples of using strict mode options when converting composite attributes to keys and cursors.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/reference/conversions.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst conversions = createConversions(thing);\n\n// from Composite to all possible index Keys\nconversions.fromComposite.toKeys(item, { strict: \"all\" });\n\n// from Composite to Cursor\nconversions.fromComposite.toCursor(item, { strict: \"all\" });\n\n// from Composite to Keys for a specific access pattern\nconversions.byAccessPattern.records.fromComposite.toKeys(item, {\n  strict: \"all\",\n});\n\n// from Composite to Cursor for a specific access pattern\nconversions.byAccessPattern.records.fromComposite.toCursor(item, {\n  strict: \"all\",\n});\n```\n\n----------------------------------------\n\nTITLE: Access Pattern Index Definition\nDESCRIPTION: Definition of an access pattern using composite attributes for units\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/queries/query.mdx#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"units\": {\n    \"index\": \"gsi1pk-gsi1sk-index\",\n    \"pk\": {\n      \"field\": \"gsi1pk\",\n      \"composite\": [\"mallId\"]\n    },\n    \"sk\": {\n      \"field\": \"gsi1sk\",\n      \"composite\": [\"buildingId\", \"unitId\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Index Definitions With and Without Sort Keys in JavaScript\nDESCRIPTION: Examples showing how ElectroDB interprets index definitions with and without Sort Keys. This is important for avoiding error code 1005 when using collections.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/reference/errors.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// ElectroDB interprets as index *not having* an SK.\n{\n  indexes: {\n    myIndex: {\n      pk: {\n        field: \"pk\",\n        composite: [\"id\"]\n      }\n    }\n  }\n}\n// ElectroDB interprets as index *having* SK, but this model does not attach any composite attributes to it.\n{\n  indexes: {\n    myIndex: {\n      pk: {\n        field: \"pk\",\n        composite: [\"id\"]\n      },\n      sk: {\n        field: \"sk\",\n        composite: []\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Response Format for Batch Delete in ElectroDB\nDESCRIPTION: This snippet shows the expected response format for a batch delete operation in ElectroDB. The response includes an array of unprocessed items.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/mutations/batch-delete.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  unprocessed: Array<YOUR_COMPOSITE_ATTRIBUTES>;\n}\n```\n\n----------------------------------------\n\nTITLE: ElectroError Class Definition in TypeScript\nDESCRIPTION: TypeScript definition of the ElectroError class which extends the standard Error class. It adds additional properties like error code, date, cause, and reference information to provide more context about the error.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/reference/errors.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport class ElectroError<E extends Error = Error> extends Error {\n  readonly name: \"ElectroError\";\n  readonly code: number;\n  readonly date: number;\n  readonly cause: E | undefined;\n  readonly isElectroError: boolean;\n  ref: {\n    readonly code: number;\n    readonly section: string;\n    readonly name: string;\n    readonly sym: unique symbol;\n  };\n}\n\nexport interface ElectroValidationErrorFieldReference<T extends Error = Error> {\n  /**\n   * The json path to the attribute that had a validation error\n   */\n  readonly field: string;\n\n  /**\n   * A description of the validation error for that attribute\n   */\n  readonly reason: string;\n\n  /**\n   * Index of the value passed (present only in List attribute validation errors)\n   */\n  readonly index: number | undefined;\n\n  /**\n   * The error thrown from the attribute's validate callback (if applicable)\n   */\n  readonly cause: T | undefined;\n}\n\nexport class ElectroValidationError<\n  E extends Error = Error,\n> extends ElectroError<E> {\n  readonly fields: ReadonlyArray<ElectroValidationErrorFieldReference<E>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Primary Index vs Global Secondary Index Definition in JavaScript\nDESCRIPTION: Example showing how ElectroDB differentiates between Primary Index and Global Secondary Index based on the presence of the 'index' property in the definition.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/reference/errors.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// ElectroDB interprets as the Primary Index because it lacks an `index` property.\n{\n  indexes: {\n    myIndex: {\n      pk: {\n        field: \"pk\",\n        composite: [\"org\"]\n      },\n      sk: {\n        field: \"sk\",\n        composite: [\"id\"]\n      }\n    }\n  }\n}\n// ElectroDB interprets as a Global Secondary Index because it has an `index` property.\n{\n  indexes: {\n    myIndex: {\n      index: \"gsi1\"\n      pk: {\n        field: \"gsi1pk\",\n        composite: [\"org\"]\n      },\n      sk: {\n        field: \"gsi1sk\",\n        composite: [\"id\"]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic-Scoped Counter Entity\nDESCRIPTION: Defines a counter entity with dynamic scoping using a 'kind' attribute to partition counts by different types within an organization.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/recipes/item-counters.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst OrganizationItemCounter = new Entity({\n  model: {\n    entity: 'member-counter',\n    service: 'directory',\n    version: '1',\n  },\n  attributes: {\n    organizationId: {\n      type: 'string',\n    },\n    kind: {\n        type: ['employee', 'team'] as const,\n    },\n    count: {\n      type: 'number',\n    },\n  },\n  indexes: {\n    organization: {\n      collection: 'employed',\n      pk: {\n        field: 'pk',\n        composite: ['organizationId'],\n      },\n      sk: {\n        field: 'sk',\n        composite: [\"kind\"],\n      }\n    },\n  },\n}, { table });\n```\n\n----------------------------------------\n\nTITLE: Setting Page Metadata in Astro Markdown Frontmatter\nDESCRIPTION: An example of how to use frontmatter in Markdown pages to set metadata properties like title and description for SEO optimization.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/README.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Example title\ndescription: Really cool docs example that uses Astro\nlayout: ../../layouts/MainLayout.astro\n---\n\n# Page content...\n```\n\n----------------------------------------\n\nTITLE: Adding New Language Support in Astro Config\nDESCRIPTION: Shows how to add Spanish as a supported language by updating the KNOWN_LANGUAGES map in the config.ts file to enable the language switcher in the site header.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/README.md#2025-04-21_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n// src/config.ts\nexport const KNOWN_LANGUAGES = {\n  English: 'en',\n+  Spanish: 'es',\n};\n```\n\n----------------------------------------\n\nTITLE: Changing Default Language Redirect\nDESCRIPTION: Shows how to modify the default language redirect in the index.astro file to use Spanish as the default language instead of English.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/README.md#2025-04-21_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n<script>\n- window.location.pathname = `/en/introduction`;\n+ window.location.pathname = `/es/introduction`;\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing ElectroDB in TypeScript\nDESCRIPTION: How to import Entity and Service classes from ElectroDB in TypeScript.\nSOURCE: https://github.com/tywalch/electrodb/blob/master/www/src/pages/en/core-concepts/quick-start.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, Service } from \"electrodb\";\n```"
  }
]