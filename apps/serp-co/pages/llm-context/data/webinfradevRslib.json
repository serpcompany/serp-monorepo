[
  {
    "owner": "web-infra-dev",
    "repo": "rslib",
    "content": "TITLE: Configuring React Plugin in Rslib\nDESCRIPTION: Sets up the React plugin in an Rslib project configuration file, with the target set to 'web' for React component development. This configuration registers the Rsbuild React Plugin which adds the necessary setup for React builds.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/solution/react.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@rslib/core';\nimport { pluginReact } from '@rsbuild/plugin-react';\n\nexport default defineConfig({\n  lib: [\n    // ...\n  ],\n  output: {\n    target: 'web',\n  },\n  plugins: [pluginReact(/** options here */)],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom tsconfig.json Path in Rslib\nDESCRIPTION: This snippet shows how to configure a custom tsconfig.json file path in the Rslib configuration file, allowing for more flexible TypeScript setup.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/basic/typescript.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  lib: [\n    // ...\n  ],\n  source: {\n    tsconfigPath: './tsconfig.custom.json',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Rslib Configuration for ESM and CJS Output\nDESCRIPTION: Configures Rslib to output both ESM and CJS formats using ES2021 syntax. This demonstrates the core 'lib' configuration array that defines each output format.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/basic/configure-rslib.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  lib: [\n    { format: 'esm', syntax: 'es2021' },\n    { format: 'cjs', syntax: 'es2021' },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Using create-rslib CLI with Template and Directory Flags\nDESCRIPTION: Example of using create-rslib with command-line flags to create a project in a specific directory with a predefined template.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/start/quick-start.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-rslib --dir my-project --template example\n\n# Using abbreviations\nnpx create-rslib -d my-project -t example\n```\n\n----------------------------------------\n\nTITLE: Consuming Remote Module Federation Modules at Runtime\nDESCRIPTION: This code snippet demonstrates how to consume other Module Federation modules at runtime using @module-federation/enhanced/runtime, ensuring compatibility across multiple formats.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/advanced/module-federation.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { init, loadRemote } from '@module-federation/enhanced/runtime';\nimport { Suspense, createElement, lazy } from 'react';\n\ninit({\n  name: 'rslib_provider',\n  remotes: [\n    {\n      name: 'mf_remote',\n      entry: 'http://localhost:3002/mf-manifest.json',\n    },\n  ],\n});\n\nexport const Counter: React.FC = () => {\n  return (\n    <div>\n      <Suspense fallback={<div>loading</div>}>\n        {createElement(\n          lazy(\n            () =>\n              loadRemote('mf_remote') as Promise<{\n                default: React.FC;\n              }>,\n          ),\n        )}\n      </Suspense>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Output of rslib -h Command\nDESCRIPTION: The help output showing available rslib commands including build, inspect, mf-dev and their basic descriptions.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/basic/cli.mdx#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nUsage: rslib <command> [options]\n\nOptions:\n  -V, --version      output the version number\n  -h, --help         display help for command\n\nCommands:\n  build [options]    build the library for production\n  inspect [options]  inspect the Rsbuild / Rspack configs of Rslib projects\n  mf-dev [options]   start Rsbuild dev server of Module Federation format\n  help [command]     display help for command\n```\n\n----------------------------------------\n\nTITLE: Configuring SVGR for Mixed Import in Bundleless Mode\nDESCRIPTION: This configuration sets up SVGR to support mixed imports in bundleless mode. It enables both URL and React component imports from the same SVG file.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/advanced/svgr-files.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\npluginSvgr({\n  mixedImport: true,\n  svgrOptions: {\n    exportType: 'named',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Federation Plugin in Rslib\nDESCRIPTION: This snippet shows how to configure the Module Federation plugin in the rslib.config.ts file. It sets up the plugin with exposes, shared dependencies, and output settings.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/zh/guide/advanced/module-federation.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { pluginModuleFederation } from '@module-federation/rsbuild-plugin';\nimport { pluginReact } from '@rsbuild/plugin-react';\nimport { defineConfig } from '@rslib/core';\n\nexport default defineConfig({\n  lib: [\n    // ... 其他 format\n    {\n      format: 'mf',\n      output: {\n        distPath: {\n          root: './dist/mf',\n        },\n        // production 时, 在这里使用线上 assetPrefix\n        assetPrefix: 'http://localhost:3001/mf',\n      },\n      // Storybook 在 dev 下使用\n      dev: {\n        assetPrefix: 'http://localhost:3001/mf',\n      },\n      plugins: [\n        pluginModuleFederation({\n          name: 'rslib_provider',\n          exposes: {\n            // 这里添加 expose\n          },\n          // 此处无法添加 \"remote\"，因为你可能会在一次构建中构建 \"esm\" 或 \"cjs\" 产物。\n          // 如果你希望 Rslib 包使用远程模块，请参考下面。\n          shared: {\n            react: {\n              singleton: true,\n            },\n            'react-dom': {\n              singleton: true,\n            },\n          },\n        }),\n      ],\n    },\n  ],\n  // Storybook 在 dev 下使用\n  server: {\n    port: 3001,\n  },\n  output: {\n    target: 'web',\n  },\n  plugins: [pluginReact()],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Federation Plugin in Rslib\nDESCRIPTION: This snippet demonstrates how to set up the Module Federation plugin in the rslib.config.ts file. It includes configuration for output formats, asset prefixes, and shared dependencies.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/advanced/module-federation.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { pluginModuleFederation } from '@module-federation/rsbuild-plugin';\nimport { pluginReact } from '@rsbuild/plugin-react';\nimport { defineConfig } from '@rslib/core';\n\nexport default defineConfig({\n  lib: [\n    // ... other format\n    {\n      format: 'mf',\n      output: {\n        distPath: {\n          root: './dist/mf',\n        },\n        // for production, add online assetPrefix here\n        assetPrefix: 'http://localhost:3001/mf',\n      },\n      // for Storybook to dev\n      dev: {\n        assetPrefix: 'http://localhost:3001/mf',\n      },\n      plugins: [\n        pluginModuleFederation({\n          name: 'rslib_provider',\n          exposes: {\n            // add expose here\n          },\n          // can not add 'remote' here, because you may build 'esm' or 'cjs' assets in one build.\n          // if you want the Rslib package use remote module, please see below.\n          shared: {\n            react: {\n              singleton: true,\n            },\n            'react-dom': {\n              singleton: true,\n            },\n          },\n        }),\n      ],\n    },\n  ],\n  // for Storybook to dev\n  server: {\n    port: 3001,\n  },\n  output: {\n    target: 'web',\n  },\n  plugins: [pluginReact()],\n});\n```\n\n----------------------------------------\n\nTITLE: Using Browserslist Queries in Rslib Configuration\nDESCRIPTION: Example of configuring Rslib with browserslist queries to determine syntax compatibility. This approach allows targeting specific browser versions rather than ECMAScript versions directly.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/config/lib/syntax.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  lib: [\n    {\n      syntax: ['last 2 versions', '> 1%'],\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Rslib for UMD Library Build\nDESCRIPTION: This configuration example demonstrates how to set up Rslib to build a UMD library. It specifies the UMD format, sets a UMD name, defines external dependencies, and configures the React plugin for compatibility with older versions.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/basic/output-format.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { pluginReact } from '@rsbuild/plugin-react';\nimport { defineConfig } from '@rslib/core';\n\nexport default defineConfig({\n  lib: [\n    {\n      format: 'umd',\n      umdName: 'RslibUmdExample',\n      output: {\n        externals: {\n          react: 'React',\n        },\n        distPath: {\n          root: './dist/umd',\n        },\n      },\n    },\n  ],\n  output: {\n    target: 'web',\n  },\n  plugins: [\n    pluginReact({\n      swcReactOptions: {\n        runtime: 'classic',\n      },\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables in Rslib Configuration\nDESCRIPTION: Demonstrates how to use Node.js environment variables to dynamically set different configurations based on the build environment, specifically changing source aliases.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/basic/configure-rslib.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@rslib/core';\n\nexport default defineConfig({\n  lib: [\n    {\n      format: 'esm',\n    },\n  ],\n  source: {\n    alias: {\n      '@request':\n        process.env.NODE_ENV === 'development'\n          ? './src/request.dev.js'\n          : './src/request.prod.js',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing React in Source Code\nDESCRIPTION: Example of importing React in a TypeScript source file, which demonstrates code that relies on an external dependency.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/advanced/third-party-deps.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nconsole.info(React);\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for Rslib migration\nDESCRIPTION: Example package.json configuration for an Rslib project, showing the required fields and scripts after migrating from Modern.js Module. It includes the necessary exports configuration, file references, and development dependencies.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/migration/modernjs-module.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"rslib\",\n  \"version\": \"1.0.0\",\n  \"type\": \"module\",\n  \"exports\": {\n    \".\": {\n      \"types\": \"./dist/index.d.ts\",\n      \"import\": \"./dist/index.js\"\n    }\n  },\n  \"module\": \"./dist/index.js\",\n  \"types\": \"./dist/index.d.ts\",\n  \"files\": [\"dist\"],\n  \"scripts\": {\n    \"build\": \"rslib build\",\n    \"check\": \"biome check --write\",\n    \"dev\": \"rslib build --watch\",\n    \"format\": \"biome format --write\",\n    \"test\": \"vitest run\"\n  },\n  \"devDependencies\": {\n    \"@biomejs/biome\": \"^1.9.3\",\n    \"@rslib/core\": \"^0.1.3\",\n    \"typescript\": \"^5.6.3\",\n    \"vitest\": \"^2.1.8\"\n  },\n  \"peerDependencies\": {},\n  \"dependencies\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Bundle Mode Entry Points in TypeScript\nDESCRIPTION: Example configuration for bundle mode with custom entry point specification.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/config/lib/bundle.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  lib: [\n    {\n      format: 'cjs',\n      bundle: true,\n    },\n  ],\n  source: {\n    entry: {\n      index: './foo/index.ts',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Importing SVG as Named React Component in Bundleless Mode\nDESCRIPTION: This example shows how to import an SVG file as a named React component in bundleless mode. The ReactComponent is imported from the SVG file and can be used directly in JSX.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/advanced/svgr-files.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ReactComponent as Logo } from './logo.svg';\n\nexport const App = () => <Logo />;\n```\n\n----------------------------------------\n\nTITLE: Configuring Host App for Module Federation\nDESCRIPTION: This code snippet demonstrates how to set up a host application to consume the Rslib Module Federation library using the @module-federation/rsbuild-plugin.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/advanced/module-federation.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { pluginModuleFederation } from '@module-federation/rsbuild-plugin';\nimport { defineConfig } from '@rsbuild/core';\nimport { pluginReact } from '@rsbuild/plugin-react';\n\nexport default defineConfig({\n  plugins: [\n    pluginReact(),\n    pluginModuleFederation({\n      name: 'rsbuild_host',\n      remotes: {\n        rslib: 'rslib@http://localhost:3001/mf/mf-manifest.json',\n      },\n      shared: {\n        react: {\n          singleton: true,\n        },\n        'react-dom': {\n          singleton: true,\n        },\n      },\n      // Enable this when the output of Rslib is build under 'production' mode, while the host app is 'development'.\n      // Reference: https://lib.rsbuild.dev/guide/advanced/module-federation#faqs\n      shareStrategy: 'loaded-first',\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Defining LibConfig and RslibConfig Interfaces in TypeScript\nDESCRIPTION: TypeScript interface definitions for Rslib configuration. LibConfig extends EnvironmentConfig with library-specific options like format, bundling preferences, and output customization. RslibConfig extends RsbuildConfig and requires an array of LibConfig objects to generate different library outputs.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/config/lib/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface LibConfig extends EnvironmentConfig {\n  format?: Format;\n  bundle?: boolean;\n  autoExtension?: boolean;\n  autoExternal?: AutoExternal;\n  redirect?: Redirect;\n  syntax?: Syntax;\n  externalHelpers?: boolean;\n  banner?: BannerAndFooter;\n  footer?: BannerAndFooter;\n  shims?: Shims;\n  dts?: Dts;\n  umdName?: string;\n}\n\ninterface RslibConfig extends RsbuildConfig {\n  lib: LibConfig[];\n}\n```\n\n----------------------------------------\n\nTITLE: Development Tools Selection Interface\nDESCRIPTION: Example of the interactive CLI interface for selecting development tools like Vitest and Storybook when creating a new Rslib project.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/start/quick-start.mdx#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n◆  Select development tools (Use <space> to select, <enter> to continue)\n│  ◻ Storybook\n│  ◻ Vitest\n└\n```\n\n----------------------------------------\n\nTITLE: Configuring Different Output Targets Per Format\nDESCRIPTION: Demonstrates how to set separate Rsbuild configurations for different output formats. This example configures ESM output for web and CJS output inherits the common target configuration for Node.js.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/basic/configure-rslib.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  lib: [\n    // The target of the ESM output is `web`\n    {\n      format: 'esm',\n      output: {\n        target: 'web',\n      },\n    },\n    // The CJS output inherits the common configuration and target is `node`\n    {\n      format: 'cjs',\n    },\n  ],\n  output: {\n    target: 'node',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using Mixed Import for SVG in Bundleless Mode\nDESCRIPTION: This example demonstrates how to use mixed import for SVG files in bundleless mode. It imports both the URL and the React component from the same SVG file.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/advanced/svgr-files.mdx#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport logoUrl, { ReactComponent as Logo } from './logo.svg';\n\nconsole.log(logoUrl); // -> string\nconsole.log(Logo); // -> React component\n```\n\n----------------------------------------\n\nTITLE: Configuring Rslib for Node.js Library Output\nDESCRIPTION: Sample configuration file for Rslib showing how to set up multiple output formats (ESM and CJS) for a Node.js library. This configuration defines separate distribution paths for each format.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/solution/nodejs.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@rslib/core';\n\nexport default defineConfig({\n  lib: [\n    {\n      format: 'esm',\n      output: {\n        distPath: {\n          root: './dist/esm',\n        },\n      },\n    },\n    {\n      format: 'cjs',\n      output: {\n        distPath: {\n          root: './dist/cjs',\n        },\n      },\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Rslib Babel Plugin with Polyfill for Browser Compatibility\nDESCRIPTION: This code snippet demonstrates how to set up the Rsbuild Babel plugin with polyfill options to inject polyfills for older browsers. It uses babel-plugin-polyfill-corejs3 with the usage-pure method targeting IE 10.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/advanced/output-compatibility.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { pluginBabel } from '@rsbuild/plugin-babel';\nimport { defineConfig } from '@rslib/core';\n\nexport default defineConfig({\n  lib: [\n    {\n      format: 'esm',\n    },\n  ],\n  plugins: [\n    pluginBabel({\n      babelLoaderOptions: {\n        plugins: [\n          [\n            require('babel-plugin-polyfill-corejs3'),\n            {\n              method: 'usage-pure',\n              targets: { ie: '10' },\n              version: '3.29',\n            },\n          ],\n        ],\n      },\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring tsconfig.json for Declaration Files in Rslib\nDESCRIPTION: TypeScript configuration options that Rslib automatically enforces to ensure proper generation of declaration files. These settings ensure the TypeScript Compiler API generates only declaration files without emitting JavaScript.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/advanced/dts.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"noEmit\": false,\n    \"declaration\": true,\n    \"emitDeclarationOnly\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring External Dependencies in Declaration Files\nDESCRIPTION: Example showing how to configure which dependency types should be externalized and not bundled into the declaration file using the autoExternal option.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/packages/plugin-dts/README.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\npluginDts({\n  autoExternal: {\n    dependencies: true,\n    optionalDependencies: true,\n    peerDependencies: true,\n    devDependencies: false,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating basic rslib.config.ts configuration\nDESCRIPTION: Basic rslib.config.ts configuration that replaces modern.config.ts. It defines the source entry points and library output format, with ESM as the default and TypeScript declaration files generation disabled.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/migration/modernjs-module.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@rslib/core';\n\nexport default defineConfig({\n  source: {\n    entry: {\n      index: ['./src/**'],\n    },\n  },\n  lib: [\n    {\n      bundle: false,\n      dts: true,\n      format: 'esm',\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic React Button Component Story with Storybook\nDESCRIPTION: This example shows how to create a simple story for a Button component in Storybook. It defines a meta object with title and component properties, and exports a Primary story with specific arguments for the component.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/advanced/storybook.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from '../src/Button';\n\nconst meta = {\n  title: 'Example/Button',\n  component: Button,\n};\n\nexport default meta;\n\nexport const Primary = {\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring CSS Modules in rslib.config.ts\nDESCRIPTION: Configuration for enabling and customizing CSS Modules in an Rslib project with options for local identity name formatting. Uses the same CSS Modules options as the official css-modules package.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/migration/modernjs-module.mdx#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@rslib/core';\nimport { pluginSass } from '@rsbuild/plugin-sass';\n\nexport default defineConfig({\n  lib: [\n    {\n      //...\n      output: {\n        cssModules: {\n          // the CSS Modules options are 1:1 the same as in the official \"css-modules\" package\n          localIdentName: '[local]--[hash:base64:5]',\n        },\n      },\n    },\n  ],\n  plugins: [pluginSass()],\n});\n```\n\n----------------------------------------\n\nTITLE: Building Multiple Specific Library Formats\nDESCRIPTION: Example command to build both ESM and CJS format libraries by repeating the --lib option with different library IDs.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/basic/cli.mdx#2025-04-21_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n# Build the libraries with id `esm` and `cjs`\nnpx rslib build --lib esm --lib cjs\n```\n\n----------------------------------------\n\nTITLE: YAML Plugin Configuration\nDESCRIPTION: Configuration for enabling YAML file support in Rslib using @rsbuild/plugin-yaml.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/advanced/json-files.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { pluginYaml } from '@rsbuild/plugin-yaml';\n\nexport default {\n  plugins: [pluginYaml()],\n};\n```\n\n----------------------------------------\n\nTITLE: Using Module Federation Runtime in Rslib\nDESCRIPTION: This snippet demonstrates how to use the Module Federation Runtime to dynamically load remote modules in Rslib.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/zh/guide/advanced/module-federation.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { init, loadRemote } from '@module-federation/enhanced/runtime';\nimport { Suspense, createElement, lazy } from 'react';\n\ninit({\n  name: 'rslib_provider',\n  remotes: [\n    {\n      name: 'mf_remote',\n      entry: 'http://localhost:3002/mf-manifest.json',\n    },\n  ],\n});\n\nexport const Counter: React.FC = () => {\n  return (\n    <div>\n      <Suspense fallback={<div>loading</div>}>\n        {createElement(\n          lazy(\n            () =>\n              loadRemote('mf_remote') as Promise<{\n                default: React.FC;\n              }>,\n          ),\n        )}\n      </Suspense>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration with defineConfig Helper\nDESCRIPTION: Shows how to use the defineConfig utility from @rslib/core in a TypeScript configuration file to get type hints and autocompletion while configuring Rslib.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/basic/configure-rslib.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@rslib/core';\n\nexport default defineConfig({\n  lib: [\n    {\n      format: 'esm',\n      syntax: 'es2021',\n    },\n  ],\n  output: {\n    target: 'node',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding rsbuild-plugin-dts to Rsbuild Configuration\nDESCRIPTION: Example of adding the DTS plugin to a Rsbuild configuration file. This snippet imports the plugin and adds it to the plugins array.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/packages/plugin-dts/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// rsbuild.config.ts\nimport { pluginDts } from 'rsbuild-plugin-dts';\n\nexport default {\n  plugins: [pluginDts()],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Alias in Rslib\nDESCRIPTION: Example showing how to configure resolve.alias to replace lodash with lodash-es during bundling. This configuration ensures all lodash imports are mapped to lodash-es in the final bundle.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/config/rsbuild/resolve.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  // ...\n  resolve: {\n    alias: {\n      lodash: 'lodash-es',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Assets with Alias in CSS\nDESCRIPTION: This example shows how to import an asset using an alias path in a CSS file. It demonstrates that alias imports are supported in CSS as well.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/advanced/static-assets.mdx#2025-04-21_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.logo {\n  background-image: url('@/assets/logo.png');\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom External Dependencies in Rslib\nDESCRIPTION: TypeScript configuration example showing how to customize which dependencies should be kept external using autoExternal and externals options.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/advanced/third-party-deps.mdx#2025-04-21_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineConfig({\n  lib: [\n    {\n      // ...\n      autoExternal: true,\n      output: {\n        externals: ['pkg-1', /pkg-2/],\n      },\n      // ...\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Bundle Mode Configuration Example\nDESCRIPTION: Complete configuration example for bundle mode using defineConfig.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/config/lib/bundle.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  lib: [\n    {\n      format: 'cjs',\n      bundle: true,\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct TypeScript Export Syntax for Rslib\nDESCRIPTION: This snippet illustrates the correct way to export types in TypeScript when using Rslib, to ensure compatibility with SWC and Babel transpilation.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/basic/typescript.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Wrong\nexport { SomeType } from './types';\n\n// Correct\nexport type { SomeType } from './types';\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Library IDs in Rslib\nDESCRIPTION: Example demonstrating how to specify custom IDs for libraries in Rslib. Custom IDs provide better readability and allow targeting specific libraries during the build process with the CLI.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/zh/config/lib/id.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  lib: [\n    { format: 'esm', id: 'my-lib-a' }, // ID is `my-lib-a`\n    { format: 'cjs', id: 'my-lib-b' }, // ID is `my-lib-b`\n    { format: 'esm' },                 // ID is `esm0`\n    { format: 'umd', id: 'my-lib-c' }, // ID is `my-lib-c`\n    { format: 'esm' },                 // ID is `esm1`\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Bundleless Mode Configuration Example\nDESCRIPTION: Complete configuration example for bundleless mode with source entry patterns.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/config/lib/bundle.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  lib: [\n    {\n      format: 'cjs',\n      bundle: false,\n    },\n  ],\n  source: {\n    entry: {\n      index: ['./src/**'],\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook for Module Federation\nDESCRIPTION: This snippet shows how to configure Storybook to work with Rslib Module Federation, including setting up addons and remotes.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/zh/guide/advanced/module-federation.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { dirname, join } from 'node:path';\nimport type { StorybookConfig } from 'storybook-react-rsbuild';\n\nfunction getAbsolutePath(value: string): any {\n  return dirname(require.resolve(join(value, 'package.json')));\n}\n\nconst config: StorybookConfig = {\n  stories: [\n    '../stories/**/*.mdx',\n    '../stories/**/*.stories.@(js|jsx|mjs|ts|tsx)',\n  ],\n  framework: {\n    name: getAbsolutePath('storybook-react-rsbuild'),\n    options: {},\n  },\n  addons: [\n    {\n      name: getAbsolutePath('storybook-addon-rslib'),\n      options: {\n        rslib: {\n          include: ['**/stories/**'],\n        },\n      },\n    },\n    {\n      name: '@module-federation/storybook-addon/preset',\n      options: {\n        // 在添加 rslib module manifest 给 storybook dev\n        // 我们在上面已经设置了 dev.assetPrefix 和 server.port 到 3001 在 rslib.config.ts\n        remotes: {\n          'rslib-module':\n            //还可以在这里添加 storybook 的 shared\n            // shared: {}\n            'rslib-module@http://localhost:3001/mf/mf-manifest.json',\n        },\n      },\n    },\n  ],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Configuring Classic JSX Transform in Rslib\nDESCRIPTION: Demonstrates how to configure the React plugin to use the classic JSX transform runtime instead of the default automatic transform. This is useful for projects using older versions of React before 16.14.0.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/solution/react.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { pluginReact } from '@rsbuild/plugin-react';\nimport { defineConfig } from '@rslib/core';\n\nexport default defineConfig({\n  lib: [\n    // ...\n  ],\n  output: {\n    target: 'web',\n  },\n  plugins: [\n    pluginReact({\n      swcReactOptions: {\n        runtime: 'classic',\n      },\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Dependencies in package.json\nDESCRIPTION: Sample package.json structure showing where dependencies and devDependencies are declared for a project.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/advanced/third-party-deps.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {},\n  \"devDependencies\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Externalized Dependency Types in rslib Configuration\nDESCRIPTION: Example showing how to customize which dependency types should be externalized by configuring autoExternal as an object with specific settings for each dependency type.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/config/lib/auto-external.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  lib: [\n    {\n      format: 'esm',\n      autoExternal: {\n        dependencies: false,\n        peerDependencies: false,\n      },\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring React as a Dependency in package.json\nDESCRIPTION: Examples of declaring React as either a regular dependency or a peer dependency in package.json.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/advanced/third-party-deps.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"react\": \"^18\"\n  },\n  // or\n  \"peerDependencies\": {\n    \"react\": \"^18\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook for Module Federation\nDESCRIPTION: This snippet shows how to set up Storybook configuration to work with Rslib Module Federation, including necessary addons and remote module configuration.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/advanced/module-federation.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { dirname, join } from 'node:path';\nimport type { StorybookConfig } from 'storybook-react-rsbuild';\n\nfunction getAbsolutePath(value: string): any {\n  return dirname(require.resolve(join(value, 'package.json')));\n}\n\nconst config: StorybookConfig = {\n  stories: [\n    '../stories/**/*.mdx',\n    '../stories/**/*.stories.@(js|jsx|mjs|ts|tsx)',\n  ],\n  framework: {\n    name: getAbsolutePath('storybook-react-rsbuild'),\n    options: {},\n  },\n  addons: [\n    {\n      name: getAbsolutePath('storybook-addon-rslib'),\n      options: {\n        rslib: {\n          include: ['**/stories/**'],\n        },\n      },\n    },\n    {\n      name: '@module-federation/storybook-addon/preset',\n      options: {\n        // add your rslib module manifest here for storybook dev\n        // we have set dev.assetPrefix and server.port to 3001 in rslib.config.ts above\n        remotes: {\n          'rslib-module':\n            // you can also add shared here for storybook app\n            // shared: {}\n            'rslib-module@http://localhost:3001/mf/mf-manifest.json',\n        },\n      },\n    },\n  ],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Setting Custom JSX Import Source for Emotion\nDESCRIPTION: Shows how to configure a custom import source for the JSX transform when using the automatic runtime. This example configures Emotion as the JSX import source instead of the default React import.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/solution/react.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { pluginReact } from '@rsbuild/plugin-react';\nimport { defineConfig } from '@rslib/core';\n\nexport default defineConfig({\n  lib: [\n    // ...\n  ],\n  output: {\n    target: 'web',\n  },\n  plugins: [\n    pluginReact({\n      swcReactOptions: {\n        importSource: '@emotion/react',\n      },\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Bundled Declaration Files\nDESCRIPTION: Configuration example showing how to enable bundled TypeScript declaration file generation using the object syntax.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/config/lib/dts.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  lib: [\n    {\n      format: 'esm',\n      dts: {\n        bundle: true,\n      },\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Registering SVGR Plugin in Rslib Configuration\nDESCRIPTION: This snippet demonstrates how to register the @rsbuild/plugin-svgr plugin in the rslib.config.ts file. It imports the plugin and adds it to the plugins array in the configuration.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/advanced/svgr-files.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { pluginSvgr } from '@rsbuild/plugin-svgr';\n\nexport default {\n  plugins: [pluginSvgr()],\n};\n```\n\n----------------------------------------\n\nTITLE: Importing SVG as React Component in Bundle Mode\nDESCRIPTION: This example shows how to import an SVG file as a React component in bundle mode using the ?react suffix. The imported Logo component can be used directly in JSX.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/advanced/svgr-files.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport Logo from './logo.svg?react';\n\nexport const App = () => <Logo />;\n```\n\n----------------------------------------\n\nTITLE: Displaying Output Structure Without outBase\nDESCRIPTION: Demonstrates the default output directory structure when outBase is not specified. The lowest common ancestor (src/utils) is used as the base.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/config/lib/out-base.mdx#2025-04-21_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\ndist\n├── bar\n│   └── index.js\n├── foo\n│   └── index.js\n└── index.js\n```\n\n----------------------------------------\n\nTITLE: Enabling TypeScript declaration files in rslib.config.ts\nDESCRIPTION: Configuration snippet for enabling TypeScript declaration file generation in Rslib by setting the dts option to true in the library configuration.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/migration/modernjs-module.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@rslib/core';\n\nexport default defineConfig({\n  //...\n  lib: [\n    {\n      //...\n      dts: true,\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Node.js Polyfill Support in Rslib\nDESCRIPTION: This snippet shows how to configure Rslib to use the Node.js polyfill plugin for browser-side compatibility. It enables Node core libraries to be used in browser environments by automatically injecting polyfills.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/advanced/output-compatibility.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@rslib/core';\nimport { pluginNodePolyfill } from '@rsbuild/plugin-node-polyfill';\n\nexport default defineConfig({\n  lib: [{ format: 'esm' }],\n  plugins: [pluginNodePolyfill()],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring React support in rslib.config.ts\nDESCRIPTION: Configuration for supporting React in an Rslib project using the @rsbuild/plugin-react plugin. Sets the output target to 'web' and applies the React plugin to handle JSX and React-specific optimizations.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/migration/modernjs-module.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@rslib/core';\n// Quick tip: You can use all Rsbuild plugins here since they are compatible with Rslib\nimport { pluginReact } from '@rsbuild/plugin-react';\n\nexport default defineConfig({\n  //...\n  output: {\n    target: 'web',\n  },\n  plugins: [pluginReact()],\n});\n```\n\n----------------------------------------\n\nTITLE: JavaScript Output with External Helper Functions\nDESCRIPTION: Resulting JavaScript output when 'externalHelpers' is set to true. Helper functions are imported from @swc/helpers instead of being inlined.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/config/lib/external-helpers.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as __WEBPACK_EXTERNAL_MODULE__swc_helpers_class_call_check__ from '@swc/helpers/_/_class_call_check';\nimport * as __WEBPACK_EXTERNAL_MODULE__swc_helpers_create_class__ from '@swc/helpers/_/_create_class';\nvar src_FOO = /*#__PURE__*/ (function () {\n  'use strict';\n  function FOO() {\n    (0, __WEBPACK_EXTERNAL_MODULE__swc_helpers_class_call_check__._)(this, FOO);\n  }\n  (0, __WEBPACK_EXTERNAL_MODULE__swc_helpers_create_class__._)(FOO, [\n    {\n      key: 'bar',\n      get: function () {},\n    },\n  ]);\n  return FOO;\n})();\nexport { src_FOO as default };\n```\n\n----------------------------------------\n\nTITLE: Module Federation Minification Configuration\nDESCRIPTION: Default minification configuration for Module Federation format, enabling full minification while preserving remote entry global variables.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/config/rsbuild/output.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  output: {\n    minify: {\n      js: true,\n      css: false,\n      jsOptions: {\n        minimizerOptions: {\n          mangle: false,\n          minify: true,\n          compress: {\n            defaults: false,\n            unused: true,\n            dead_code: true,\n            toplevel: false,\n          },\n          format: {\n            comments: 'some',\n            preserve_annotations: true,\n          },\n        },\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Equivalent Object Configuration for Default autoExternal Behavior\nDESCRIPTION: Shows the equivalent object configuration for the default autoExternal behavior, which externalizes dependencies, optionalDependencies, and peerDependencies but bundles devDependencies.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/config/lib/auto-external.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  lib: [\n    {\n      format: 'esm',\n      autoExternal: {\n        dependencies: true,\n        optionalDependencies: true,\n        peerDependencies: true,\n        devDependencies: false,\n      },\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Rsbuild Plugin in TypeScript\nDESCRIPTION: Example of registering a React plugin in Rslib configuration file. Shows how to import and configure plugins using the defineConfig function from @rslib/core.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/config/rsbuild/plugins.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@rslib/core';\nimport { pluginReact } from '@rsbuild/plugin-react';\n\nexport default defineConfig({\n  plugins: [pluginReact()],\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Common Rsbuild Configurations in Rslib\nDESCRIPTION: Shows how to set common Rsbuild configurations outside the 'lib' field that will be inherited by all output formats. In this example, setting the output target to 'web'.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/basic/configure-rslib.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  lib: [\n    { format: 'esm', syntax: 'es2021' },\n    { format: 'cjs', syntax: 'es2021' },\n  ],\n  output: {\n    target: 'web',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Module Federation Dev Command to package.json\nDESCRIPTION: This snippet shows how to add the dev command for Module Federation development in the package.json file.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/advanced/module-federation.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"rslib mf-dev\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Source and Transformed ESM Code for __dirname\nDESCRIPTION: Demonstrates how __dirname is transformed in ESM modules when shims.esm.__dirname is true, showing both the source code and the resulting ESM output.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/zh/config/lib/shims.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(__dirname);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { fileURLToPath as __webpack_fileURLToPath__ } from 'url';\nimport { dirname as __webpack_dirname__ } from 'path';\nvar src_dirname = __webpack_dirname__(\n  __webpack_fileURLToPath__(import.meta.url),\n);\nconsole.log(src_dirname);\n```\n\n----------------------------------------\n\nTITLE: Referencing Preset Types in Rslib TypeScript Projects\nDESCRIPTION: This snippet demonstrates how to reference preset type definitions provided by @rslib/core in a TypeScript project using Rslib.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/basic/typescript.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"@rslib/core/types\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Asset Handling with Rspack (TypeScript)\nDESCRIPTION: This configuration example shows how to use the Rspack tool to add custom handling for PDF files, treating them as assets and preserving import statements.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/advanced/static-assets.mdx#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  tools: {\n    rspack(config, { addRules }) {\n      addRules([\n        {\n          test: /\\.pdf$/,\n          // Convert assets to separate files and keep import statements\n          type: 'asset/resource',\n          generator: {\n            importMode: 'preserve',\n          },\n        },\n      ]);\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: CLI Command for Building Specific Libraries\nDESCRIPTION: Example of using the --lib flag to build specific libraries by their IDs in the command line interface.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/config/lib/id.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx rslib build --lib my-lib-a --lib my-lib-b\n```\n\n----------------------------------------\n\nTITLE: Example Source and Transformed ESM Code for __filename\nDESCRIPTION: Shows how __filename is transformed in ESM modules when shims.esm.__filename is true, providing both the original code and the resulting ESM output.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/zh/config/lib/shims.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(__filename);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { fileURLToPath as __webpack_fileURLToPath__ } from 'url';\nimport { dirname as __webpack_dirname__ } from 'path';\nvar src_dirname = __webpack_dirname__(\n  __webpack_fileURLToPath__(import.meta.url),\n);\nvar src_filename = __webpack_fileURLToPath__(import.meta.url);\nconsole.log(src_filename);\n```\n\n----------------------------------------\n\nTITLE: Configuring Isolated Modules in TypeScript for Rslib\nDESCRIPTION: This snippet shows how to enable the isolatedModules option in tsconfig.json for Rslib projects. This is necessary when using TypeScript with SWC or Babel transpilation.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/zh/guide/basic/typescript.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"isolatedModules\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating package.json Scripts for Rslib Migration\nDESCRIPTION: Shows the required changes to package.json scripts when migrating from tsup to Rslib commands. Demonstrates the replacement of tsup commands with equivalent Rslib CLI commands.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/migration/tsup.mdx#2025-04-21_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n{\n  \"scripts\": {\n-   \"build\": \"tsup\",\n-   \"build:watch\": \"tsup --watch\",\n+   \"build\": \"rslib build\",\n+   \"build:watch\": \"rslib build --watch\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables in rslib.config.ts\nDESCRIPTION: Example of accessing environment variables in the rslib configuration file using both import.meta.env and process.env syntax.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/basic/cli.mdx#2025-04-21_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nconsole.log(import.meta.env.FOO); // 'hello'\nconsole.log(import.meta.env.BAR); // '1'\n\nconsole.log(process.env.FOO); // 'hello'\nconsole.log(process.env.BAR); // '1'\n```\n\n----------------------------------------\n\nTITLE: Registering Rsbuild Plugin in Rslib Configuration\nDESCRIPTION: This snippet demonstrates how to register a Rsbuild plugin (in this case, the React plugin) in the Rslib configuration file. It shows the usage of the 'plugins' option in the configuration object.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/zh/config/rsbuild/plugins.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@rslib/core';\nimport { pluginReact } from '@rsbuild/plugin-react';\n\nexport default defineConfig({\n  plugins: [pluginReact()],\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Banner Type in TypeScript\nDESCRIPTION: TypeScript type definition for the Banner configuration object that can specify content to inject at the top of JavaScript, CSS, and declaration files.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/config/lib/banner.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Banner = {\n  js?: string;\n  css?: string;\n  dts?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Required TypeScript Compiler Settings for Declaration File Generation\nDESCRIPTION: These TypeScript compiler options are automatically set by Rslib when generating declaration files to ensure proper output of type definitions without emitting JavaScript code.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/zh/guide/advanced/dts.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"noEmit\": false,\n    \"declaration\": true,\n    \"emitDeclarationOnly\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Default Redirect Configuration for Bundleless Mode\nDESCRIPTION: The default configuration for redirect in bundleless mode, showing the default values for path and extension redirections for JavaScript, styles, assets, and TypeScript declaration files.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/config/lib/redirect.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst defaultRedirect = {\n  js: {\n    path: true,\n    extension: true,\n  },\n  style: {\n    path: true,\n    extension: true,\n  },\n  asset: true,\n  dts: {\n    path: true,\n    extension: false,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Extending Asset Types in Rslib Configuration (TypeScript)\nDESCRIPTION: This configuration snippet demonstrates how to extend the types of assets handled by Rslib, specifically adding support for PDF files.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/advanced/static-assets.mdx#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  source: {\n    assetsInclude: /\\.pdf$/,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Current Directory Project Creation Interface\nDESCRIPTION: Example of the interactive CLI interface for creating a project in the current directory, with options to override existing files.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/start/quick-start.mdx#2025-04-21_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n◆  Create Rslib Project\n│\n◇  Project name or path\n│  .\n│\n◇  \".\" is not empty, please choose:\n│  Continue and override files\n```\n\n----------------------------------------\n\nTITLE: Enabling Bundleless Declaration Files\nDESCRIPTION: Configuration example showing how to enable bundleless TypeScript declaration file generation using boolean syntax.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/config/lib/dts.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  lib: [\n    {\n      format: 'esm',\n      dts: true,\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Image Assets in React Component (TypeScript/JSX)\nDESCRIPTION: This snippet demonstrates how to import an image asset and use it in a React component. It shows the import syntax and how the imported asset resolves to a URL string.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/advanced/static-assets.mdx#2025-04-21_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// Import the logo.png image in the 'src/assets' directory\nimport logo from './assets/logo.png';\n\nconsole.log(logo); // \"/static/logo.[hash].png\"\n\nexport default = () => <img src={logo} />;\n```\n\n----------------------------------------\n\nTITLE: Defining Default Output Path Configuration in Rslib\nDESCRIPTION: The default configuration for output paths in Rslib, showing the directory structure for different types of assets. This includes JavaScript, CSS, SVG, fonts, WebAssembly, images, and other media files.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/zh/config/rsbuild/output.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst defaultDistPath = {\n  root: 'dist',\n  js: './',\n  jsAsync: './',\n  css: './',\n  cssAsync: './',\n  svg: 'static/svg',\n  font: 'static/font',\n  wasm: 'static/wasm',\n  image: 'static/image',\n  media: 'static/media',\n  assets: 'static/assets',\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring UMD Export Name in Rslib TypeScript Configuration\nDESCRIPTION: This snippet demonstrates how to set the 'umdName' property in the Rslib configuration file. It specifies 'MyLibrary' as the export name for the UMD bundle, which will be mounted to global.MyLibrary.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/config/lib/umd-name.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  lib: [\n    {\n      format: 'umd',\n      umdName: 'MyLibrary',\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Style Processing in Rslib\nDESCRIPTION: Configuration to skip preprocessing of SCSS files in bundleless mode by setting entry exclusions, configuring file copying, and disabling style extension redirects\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/faq/features.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  lib: [\n    {\n      // ...\n      source: {\n        entry: {\n          index: ['./src/**', '!src/**/*.scss'],\n        },\n      },\n      output: {\n        copy: [{ from: '**/*.scss', context: path.join(__dirname, 'src') }],\n      },\n      redirect: {\n        style: {\n          extension: false,\n        },\n      },\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Importing JSON Files with Default Import\nDESCRIPTION: Example of importing JSON files using default import syntax in JavaScript. Shows both the JSON file structure and how to access its properties.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/advanced/json-files.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"foo\",\n  \"items\": [1, 2]\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport example from './example.json';\n\nconsole.log(example.name); // 'foo';\nconsole.log(example.items); // [1, 2];\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition of autoExternal Configuration\nDESCRIPTION: Defines the TypeScript type for the autoExternal configuration option, which can be either a boolean or an object specifying handling for different dependency types.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/config/lib/auto-external.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype AutoExternal =\n  | boolean\n  | {\n      dependencies?: boolean;\n      optionalDependencies?: boolean;\n      devDependencies?: boolean;\n      peerDependencies?: boolean;\n    };\n```\n\n----------------------------------------\n\nTITLE: Configuring Minification for ESM/CJS/UMD Formats in Rslib\nDESCRIPTION: Default minification configuration for ESM, CJS, and UMD formats in Rslib. This setup only performs dead code elimination and unused code removal without full minification or mangling of the code.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/zh/config/rsbuild/output.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  output: {\n    minify: {\n      js: true,\n      css: false,\n      jsOptions: {\n        minimizerOptions: {\n          mangle: false,\n          minify: false,\n          compress: {\n            defaults: false,\n            unused: true,\n            dead_code: true,\n            toplevel: true,\n          },\n          format: {\n            comments: 'some',\n            preserve_annotations: true,\n          },\n        },\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Upgrading Rslib and Rsbuild Dependencies with Taze\nDESCRIPTION: This command upgrades all dependencies that include 'rslib' or 'rsbuild' in their names to the latest major version. It uses the 'taze' CLI tool with the 'major' parameter and writes changes to package.json.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/basic/upgrade-rslib.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx taze major --include \"/(rsbuild|rslib)/\" -w\n```\n\n----------------------------------------\n\nTITLE: Output of Bundled Asset Import in ESM (JavaScript)\nDESCRIPTION: This snippet shows the transformed output of an asset import in a bundled ESM format. It demonstrates how Rslib handles asset imports in the build process.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/advanced/static-assets.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport logo_namespaceObject from './static/svg/logo.svg';\n\nconsole.log(logo_namespaceObject);\n```\n\n----------------------------------------\n\nTITLE: Example Using __filename in Source Code\nDESCRIPTION: Simple example of using the CommonJS __filename global variable in source code.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/config/lib/shims.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(__filename);\n```\n\n----------------------------------------\n\nTITLE: 配置Babel插件和Polyfill (TypeScript)\nDESCRIPTION: 这段代码展示了如何在rslib.config.ts中配置Babel插件和polyfill-corejs3插件,以便为指定的目标浏览器版本注入polyfill。需要先安装@rsbuild/plugin-babel、babel-plugin-polyfill-corejs3和core-js-pure依赖。\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/zh/guide/advanced/output-compatibility.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { pluginBabel } from '@rsbuild/plugin-babel';\nimport { defineConfig } from '@rslib/core';\n\nexport default defineConfig({\n  lib: [\n    {\n      format: 'esm',\n    },\n  ],\n  plugins: [\n    pluginBabel({\n      babelLoaderOptions: {\n        plugins: [\n          [\n            require('babel-plugin-polyfill-corejs3'),\n            {\n              method: 'usage-pure',\n              targets: { ie: '10' },\n              version: '3.29',\n            },\n          ],\n        ],\n      },\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Minification for Module Federation Format in Rslib\nDESCRIPTION: Default minification configuration for the Module Federation (MF) format in Rslib. Unlike other formats, this enables full minification while preserving global variables in the remoteEntry file to prevent tree-shaking issues.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/zh/config/rsbuild/output.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  output: {\n    minify: {\n      js: true,\n      css: false,\n      jsOptions: {\n        minimizerOptions: {\n          mangle: false,\n          // 启用压缩\n          minify: true,\n          compress: {\n            defaults: false,\n            unused: true,\n            dead_code: true,\n            // 避免 remoteEntry 的全局变量被 tree-shaking\n            toplevel: false,\n          },\n          format: {\n            comments: 'some',\n            preserve_annotations: true,\n          },\n        },\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Viewing Available CLI Commands with rslib -h\nDESCRIPTION: Command to display help information for the rslib CLI, showing all available commands and options.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/basic/cli.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx rslib -h\n```\n\n----------------------------------------\n\nTITLE: Configuring isolatedModules in tsconfig.json for Rslib TypeScript Projects\nDESCRIPTION: This snippet shows how to enable the 'isolatedModules' option in tsconfig.json, which is necessary when using TypeScript with Rslib due to the limitations of SWC and Babel in compiling TypeScript.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/basic/typescript.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"isolatedModules\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Optional Tools Selection Interface\nDESCRIPTION: Example of the interactive CLI interface for selecting code quality tools like Biome, ESLint, and Prettier when creating a new Rslib project.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/start/quick-start.mdx#2025-04-21_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n◆  Select additional tools (Use <space> to select, <enter> to continue)\n│  ◻ Add Biome for code linting and formatting\n│  ◻ Add ESLint for code linting\n│  ◻ Add Prettier for code formatting\n└\n```\n\n----------------------------------------\n\nTITLE: Usage Options for rslib build Command\nDESCRIPTION: The help output for the rslib build command showing available options such as config path, root directory, environment mode, and watch mode.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/basic/cli.mdx#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nUsage: rslib build [options]\n\nbuild the library for production\n\nOptions:\n  -c --config <config>  specify the configuration file, can be a relative or absolute path\n  -r --root <root>      specify the project root directory, can be an absolute path or a path relative to cwd\n  --env-mode <mode>     specify the env mode to load the `.env.[mode]` file\n  --env-dir <dir>       specify the directory to load `.env` files\n  --lib <id>            specify the library (repeatable, e.g. --lib esm --lib cjs)\n  -w --watch            turn on watch mode, watch for changes and rebuild\n  -h, --help            display help for command\n```\n\n----------------------------------------\n\nTITLE: Mixing ECMAScript Version and Browserslist Queries\nDESCRIPTION: Example of combining an ECMAScript version with a browserslist query in Rslib configuration. Rslib converts the ECMAScript version to a browserslist query and merges them together.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/config/lib/syntax.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  lib: [\n    {\n      syntax: ['es2015', 'node 20'],\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Enable Bundleless TypeScript Declaration Generation\nDESCRIPTION: Configuration example showing how to enable bundleless TypeScript declaration file generation.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/zh/config/lib/dts.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  lib: [\n    {\n      format: 'esm',\n      dts: true,\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring SVGR for Named Export in Bundleless Mode\nDESCRIPTION: This configuration sets up SVGR to use named exports in bundleless mode. It sets the exportType option to 'named' to enable importing the SVG as a React component using the ReactComponent name.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/advanced/svgr-files.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\npluginSvgr({\n  svgrOptions: {\n    exportType: 'named',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: TSConfig Exclusion for Type Generation\nDESCRIPTION: Example of a tsconfig.json file that excludes test files from TypeScript type declaration generation.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/zh/config/lib/bundle.mdx#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n// tsconfig.json\n{\n  \"include\": [\"src\"],\n  \"exclude\": [\"src/**/*.test.ts\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Library ID Configuration in TypeScript\nDESCRIPTION: Demonstrates how to customize library IDs by explicitly setting the id field in the configuration, mixing both custom and auto-generated IDs.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/config/lib/id.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  lib: [\n    { format: 'esm', id: 'my-lib-a' }, // ID is `my-lib-a`\n    { format: 'cjs', id: 'my-lib-b' }, // ID is `my-lib-b`\n    { format: 'esm' },                 // ID is `esm0`\n    { format: 'umd', id: 'my-lib-c' }, // ID is `my-lib-c`\n    { format: 'esm' },                 // ID is `esm1`\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Setting ECMAScript Version in Rslib Configuration\nDESCRIPTION: Example of configuring Rslib to use a specific ECMAScript version (es2015) for syntax downgrading. This sets a direct target version rather than using browserslist queries.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/config/lib/syntax.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  lib: [\n    {\n      syntax: 'es2015',\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Excluding Test Files in Bundleless Mode\nDESCRIPTION: Configuration example showing how to exclude test files from the build process in bundleless mode using glob patterns with negation.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/zh/config/lib/bundle.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  lib: [\n    {\n      format: 'cjs',\n      bundle: false,\n    },\n  ],\n  source: {\n    entry: {\n      index: ['./src/**', '!src/**/*.test.ts'],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Output Directory for TypeScript Declarations\nDESCRIPTION: Configuration example showing how to specify a custom output directory for TypeScript declaration files.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/zh/config/lib/dts.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  lib: [\n    {\n      format: 'esm',\n      dts: {\n        distPath: './dist-types',\n      },\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Declaration Files Output Directory\nDESCRIPTION: Configuration example showing how to specify a custom output directory for TypeScript declaration files.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/config/lib/dts.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  lib: [\n    {\n      format: 'esm',\n      dts: {\n        distPath: './dist-types',\n      },\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: TypeScript DTS Configuration Type Definition\nDESCRIPTION: Type definition for the DTS configuration object that specifies various options for TypeScript declaration file generation.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/zh/config/lib/dts.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Dts =\n  | {\n      bundle?: boolean;\n      distPath?: string;\n      build?: boolean;\n      abortOnError?: boolean;\n      autoExtension?: boolean;\n    }\n  | boolean;\n```\n\n----------------------------------------\n\nTITLE: Output of Bundleless Asset Import in ESM (JavaScript)\nDESCRIPTION: This example shows the transformed output of an asset import in a bundleless ESM format. It demonstrates how Rslib preserves import statements for static assets.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/advanced/static-assets.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport logo from './assets/logo.mjs';\n\nconsole.log(logo);\n```\n\n----------------------------------------\n\nTITLE: Default Redirect Configuration in Rslib\nDESCRIPTION: The default values for the redirect configuration in Rslib, showing the default behavior for path and extension rewriting for JavaScript, CSS, assets, and TypeScript declaration files.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/zh/config/lib/redirect.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst defaultRedirect = {\n  js: {\n    path: true,\n    extension: true,\n  },\n  style: {\n    path: true,\n    extension: true,\n  },\n  asset: true,\n  dts: {\n    path: true,\n    extension: false,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Running Storybook Commands for Development and Building\nDESCRIPTION: This snippet shows the basic Storybook CLI commands for starting the development server and building static files for production. These commands use npx to execute Storybook binaries.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/advanced/storybook.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx storybook dev   // development mode\nnpx storybook build // build static files\n```\n\n----------------------------------------\n\nTITLE: Example Source and Transformed ESM Code for require\nDESCRIPTION: Shows how require is transformed in ESM modules when shims.esm.require is true, including various require use cases and their ESM equivalents.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/zh/config/lib/shims.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst someModule = require('./someModule');\n\n// dynamic require\nconst dynamicRequiredModule = require(SOME_VALUE_IN_RUNTIME);\n// require.resolve\nconst someModulePath = require.resolve('./someModule');\n// use require as a expression\nconst lazyFn = (module, requireFn) => {};\nlazyFn('./other.js', require);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport __rslib_shim_module__ from 'module';\nconst require = /*#__PURE__*/ __rslib_shim_module__.createRequire(\n  import.meta.url,\n);\n// dynamic require\nrequire(SOME_VALUE_IN_RUNTIME);\n// require.resolve\nrequire.resolve('./someModule');\n// use require as a expression\nconst lazyFn = (module, requireFn) => {};\nlazyFn('./other.js', require);\n```\n\n----------------------------------------\n\nTITLE: Default Dist Path Configuration in TypeScript\nDESCRIPTION: Default configuration object for output directory paths in Rsbuild, defining locations for different types of assets including JavaScript, CSS, SVG, fonts, and other media files.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/config/rsbuild/output.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst defaultDistPath = {\n  root: 'dist',\n  js: './',\n  jsAsync: './',\n  css: './',\n  cssAsync: './',\n  svg: 'static/svg',\n  font: 'static/font',\n  wasm: 'static/wasm',\n  image: 'static/image',\n  media: 'static/media',\n  assets: 'static/assets',\n};\n```\n\n----------------------------------------\n\nTITLE: Type Declaration for PNG Assets in TypeScript\nDESCRIPTION: This snippet shows how to declare types for PNG image assets in TypeScript, resolving type errors when importing these assets in TypeScript files.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/advanced/static-assets.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// Taking png images as an example\ndeclare module '*.png' {\n  const content: string;\n  export default content;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring External Module Aliases in Rslib\nDESCRIPTION: Example demonstrating how to use output.externals to replace React and ReactDOM with Preact/compat for external module resolution. This configuration affects how external dependencies are resolved at runtime.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/config/rsbuild/resolve.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  // ...\n  output: {\n    externals: {\n      react: 'preact/compat',\n      'react-dom': 'preact/compat',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: ESM/CJS/UMD Minification Configuration\nDESCRIPTION: Default minification configuration for ESM, CJS, and UMD formats, focusing on dead code elimination and unused code removal while preserving necessary annotations.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/config/rsbuild/output.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  output: {\n    minify: {\n      js: true,\n      css: false,\n      jsOptions: {\n        minimizerOptions: {\n          mangle: false,\n          minify: false,\n          compress: {\n            defaults: false,\n            unused: true,\n            dead_code: true,\n            toplevel: true,\n          },\n          format: {\n            comments: 'some',\n            preserve_annotations: true,\n          },\n        },\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Full Comment Preservation in Rslib\nDESCRIPTION: Configuration to preserve all comments in output files by modifying minification options\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/faq/features.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  lib: [\n    // ...\n  ],\n  output: {\n    minify: {\n      jsOptions: {\n        minimizerOptions: {\n          format: {\n            comments: 'all', // This will preserve all comments\n          },\n        },\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Example Using __dirname in Source Code\nDESCRIPTION: Simple example of using the CommonJS __dirname global variable in source code.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/config/lib/shims.mdx#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(__dirname);\n```\n\n----------------------------------------\n\nTITLE: Configuring Import Path Redirection in Declaration Files\nDESCRIPTION: Example showing how to configure the redirect option to control how import paths are transformed in the generated declaration files.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/packages/plugin-dts/README.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\npluginDts({\n  redirect: {\n    path: true,\n    extension: false,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Recursive Upgrade of Rslib Dependencies in Monorepo\nDESCRIPTION: This command is used in a monorepo setup to recursively upgrade Rslib and Rsbuild related packages. It uses the '-r' option for recursive upgrades across all packages in the monorepo.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/basic/upgrade-rslib.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx taze --include /(rsbuild|rslib)/ -w -r\n```\n\n----------------------------------------\n\nTITLE: Defining Shims Type Structure in TypeScript\nDESCRIPTION: TypeScript type definition for the Shims configuration object, which specifies shim options for CommonJS and ESM module formats.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/config/lib/shims.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Shims = {\n  cjs?: {\n    'import.meta.url'?: boolean;\n  };\n  esm?: {\n    __filename?: boolean;\n    __dirname?: boolean;\n    require?: boolean;\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring External Module Aliases in Rslib\nDESCRIPTION: Example demonstrating how to use output.externals to replace React dependencies with Preact/compat at runtime. These modules will not be bundled but imported externally.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/zh/config/rsbuild/resolve.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  // ...\n  output: {\n    externals: {\n      react: 'preact/compat',\n      'react-dom': 'preact/compat',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Declarations\nDESCRIPTION: Type declarations for YAML and TOML file imports in TypeScript projects.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/advanced/json-files.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"@rslib/core/types\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module '*.yaml' {\n  const content: Record<string, any>;\n  export default content;\n}\ndeclare module '*.yml' {\n  const content: Record<string, any>;\n  export default content;\n}\ndeclare module '*.toml' {\n  const content: Record<string, any>;\n  export default content;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Output Directory for Declaration Files\nDESCRIPTION: Configuration example showing how to specify a custom output directory for the generated declaration files using the distPath option.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/packages/plugin-dts/README.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\npluginDts({\n  distPath: './dist-types',\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Default Entry in Bundleless Mode\nDESCRIPTION: Defines the default entry point configuration for bundleless mode in Rslib. It uses a glob pattern 'src/**' to include all files in the src directory.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/config/rsbuild/source.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst defaultEntry = {\n  index: 'src/**',\n};\n```\n\n----------------------------------------\n\nTITLE: Major Version Upgrade of Rslib Dependencies\nDESCRIPTION: This command explicitly upgrades to the major version of Rslib and Rsbuild related packages. It's useful when you want to ensure you're getting the latest major version updates.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/basic/upgrade-rslib.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx taze major --include /(rsbuild|rslib)/ -w\n```\n\n----------------------------------------\n\nTITLE: Upgrading Locked Versions of Rslib Dependencies\nDESCRIPTION: This command upgrades locked versions of Rslib and Rsbuild related packages. It uses the '-l' option to include locked versions in the upgrade process.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/basic/upgrade-rslib.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx taze --include /(rsbuild|rslib)/ -w -l\n```\n\n----------------------------------------\n\nTITLE: Defining Redirect Type Definitions in TypeScript\nDESCRIPTION: TypeScript type definitions for the redirect configuration options in bundleless mode, defining types for JavaScript, style, TypeScript declaration, and asset path redirections.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/config/lib/redirect.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype JsRedirect = {\n  path?: boolean;\n  extension?: boolean;\n};\n\ntype StyleRedirect = {\n  path?: boolean;\n  extension?: boolean;\n};\n\ntype DtsRedirect = {\n  path?: boolean;\n  extension?: boolean;\n};\n\ntype Redirect = {\n  js?: JsRedirect;\n  style?: StyleRedirect;\n  asset?: boolean;\n  dts?: DtsRedirect;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Bundleless Mode with Glob Patterns\nDESCRIPTION: Example of bundleless mode configuration using glob patterns to include files.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/config/lib/bundle.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  lib: [\n    {\n      format: 'cjs',\n      bundle: false,\n    },\n  ],\n  source: {\n    entry: {\n      index: './foo/**',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling Build Abort on Type Errors\nDESCRIPTION: Configuration example showing how to prevent build failures when TypeScript declaration file generation encounters errors.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/config/lib/dts.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  lib: [\n    {\n      format: 'esm',\n      dts: {\n        abortOnError: false,\n      },\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Upgrading Specific Rslib Scope Packages with Taze\nDESCRIPTION: This command upgrades only packages under the '@rslib' scope. It demonstrates how to adjust the 'include' pattern to target specific packages for upgrade.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/basic/upgrade-rslib.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx taze --include /@rslib/ -w\n```\n\n----------------------------------------\n\nTITLE: Intermediate Module for Asset Import in Bundleless ESM (JavaScript)\nDESCRIPTION: This snippet shows an intermediate module created by Rslib for handling asset imports in bundleless ESM format. It demonstrates how asset references are preserved.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/advanced/static-assets.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport logo_namespaceObject from '../static/svg/logo.svg';\nexport { logo_namespaceObject as default };\n```\n\n----------------------------------------\n\nTITLE: Importing Image Assets in CSS\nDESCRIPTION: This snippet demonstrates how to import and use an image asset in a CSS file using a relative path. It shows the basic syntax for referencing assets in CSS.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/advanced/static-assets.mdx#2025-04-21_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n.logo {\n  background-image: url('./assets/logo.png');\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Shims Type Structure in TypeScript\nDESCRIPTION: TypeScript type definition for the Shims configuration object which specifies options for both CommonJS and ESM module compatibility features.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/zh/config/lib/shims.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Shims = {\n  cjs?: {\n    'import.meta.url'?: boolean;\n  };\n  esm?: {\n    __filename?: boolean;\n    __dirname?: boolean;\n    require?: boolean;\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Writing Storybook Stories with Remote Module\nDESCRIPTION: This snippet demonstrates how to write Storybook stories that import components from a remote Module Federation module.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/advanced/module-federation.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\n// Load your remote module here, Storybook will act as the host app.\nimport { Counter } from 'rslib-module';\n\nconst Component = () => <Counter />;\n\nexport default {\n  title: 'App Component',\n  component: Component,\n};\n\nexport const Primary = {};\n```\n\n----------------------------------------\n\nTITLE: Bundleless Mode Example with Custom Entry\nDESCRIPTION: Complete configuration example for bundleless mode that specifies custom entry points to generate multiple output files.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/zh/config/lib/bundle.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  lib: [\n    {\n      format: 'cjs',\n      bundle: false,\n    },\n  ],\n  source: {\n    entry: {\n      index: ['./src/**'],\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Building a Single Specific Library Format\nDESCRIPTION: Example command to build only the ESM format library by using the --lib option to filter by library ID.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/basic/cli.mdx#2025-04-21_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n# Only build the library with id `esm`\nnpx rslib build --lib esm\n```\n\n----------------------------------------\n\nTITLE: TOML Plugin Configuration\nDESCRIPTION: Configuration for enabling TOML file support in Rslib using @rsbuild/plugin-toml.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/advanced/json-files.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { pluginToml } from '@rsbuild/plugin-toml';\n\nexport default {\n  plugins: [pluginToml()],\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Mode for Rslib Build\nDESCRIPTION: Command to specify the environment mode as 'test' when building, which will load .env.test and .env.test.local files.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/basic/cli.mdx#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx rslib build --env-mode test\n```\n\n----------------------------------------\n\nTITLE: Writing Stories with Remote Modules\nDESCRIPTION: This snippet demonstrates how to write Storybook stories using remote modules from a Module Federation setup.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/zh/guide/advanced/module-federation.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\n// 在这里加载远程模块，Storybook 相当于宿主应用.\nimport { Counter } from 'rslib-module';\n\nconst Component = () => <Counter />;\n\nexport default {\n  title: 'App Component',\n  component: Component,\n};\n\nexport const Primary = {};\n```\n\n----------------------------------------\n\nTITLE: JavaScript Output with Inlined Helper Functions\nDESCRIPTION: Resulting JavaScript output when 'externalHelpers' is set to false. Helper functions are inlined within the file.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/config/lib/external-helpers.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction _class_call_check(instance, Constructor) {\n  if (!(instance instanceof Constructor))\n    throw new TypeError('Cannot call a class as a function');\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if ('value' in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nvar src_FOO = /*#__PURE__*/ (function () {\n  'use strict';\n  function FOO() {\n    _class_call_check(this, FOO);\n  }\n  _create_class(FOO, [\n    {\n      key: 'bar',\n      get: function () {},\n    },\n  ]);\n  return FOO;\n})();\nexport { src_FOO as default };\n```\n\n----------------------------------------\n\nTITLE: Banner Type Definition in TypeScript\nDESCRIPTION: Defines the Banner type structure with optional properties for JavaScript, CSS, and TypeScript declaration files.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/zh/config/lib/banner.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Banner = {\n  js?: string;\n  css?: string;\n  dts?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Output Structure With outBase Configured to src Directory\nDESCRIPTION: Shows the resulting output directory structure when outBase is set to './src', which changes the base directory and preserves more of the original folder structure in the output.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/zh/config/lib/out-base.mdx#2025-04-21_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\ndist\\n└── utils\\n    ├── bar\\n    │   └── index.js\\n    ├── foo\\n    │   └── index.js\\n    └── index.js\n```\n\n----------------------------------------\n\nTITLE: Importing Assets with Alias in TypeScript/JSX\nDESCRIPTION: This snippet shows how to import an asset using an alias path. It demonstrates that the imported asset still resolves to a URL string.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/advanced/static-assets.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport logo from '@/assets/logo.png';\n\nconsole.log(logo); // \"/static/logo.[hash].png\"\n\nexport default = () => <img src={logo} />;\n```\n\n----------------------------------------\n\nTITLE: TOML File Import Example\nDESCRIPTION: Demonstrates importing and using TOML files in TypeScript, including the TOML file structure.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/advanced/json-files.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport example from './example.toml';\n\nconsole.log(example.hello); // 'world';\nconsole.log(example.foo); // { bar: 'baz' };\n```\n\nLANGUAGE: toml\nCODE:\n```\nhello = \"world\"\n\n[foo]\nbar = \"baz\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Federation Share Strategy in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up the shareStrategy option in the pluginModuleFederation configuration to 'loaded-first'. This configuration helps resolve issues related to loading different modes of React and React DOM when using Module Federation.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/advanced/module-federation.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\npluginModuleFederation({\n  // ...\n  shareStrategy: 'loaded-first',\n}),\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Main Configuration File for Rslib Projects\nDESCRIPTION: This code snippet demonstrates how to configure the Storybook main.js file to work with Rslib. It specifies the stories location patterns, required addons including storybook-addon-rslib, and sets the framework to storybook-react-rsbuild.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/advanced/storybook.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  stories: [\n    '../stories/**/*.mdx',\n    '../stories/**/*.stories.@(js|jsx|mjs|ts|tsx)',\n  ],\n  addons: ['@storybook/addon-essentials', 'storybook-addon-rslib'],\n  framework: 'storybook-react-rsbuild', // storybook-react-rsbuild for example\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring RSLib with External Helpers Disabled\nDESCRIPTION: RSLib configuration file setting 'externalHelpers' to false, which results in helper functions being inlined in the output.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/config/lib/external-helpers.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  lib: [\n    {\n      syntax: 'es5',\n      externalHelpers: false,\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Banner Content with Rspack Plugin\nDESCRIPTION: Example of how to customize banner content by adding a BannerPlugin instance through the tools.rspack.plugins configuration. This provides more control over banner behavior than the standard configuration.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/config/lib/banner.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  lib: [\n    {\n      // ...\n      tools: {\n        rspack: {\n          plugins: [\n            new rspack.BannerPlugin({\n              // ... options\n            }),\n          ],\n        },\n      },\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Example of import.meta.url Source Code\nDESCRIPTION: Example showing how import.meta.url is used in source code to load a file relative to the current module.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/config/lib/shims.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { readFileSync } from 'fs';\nconst buffer = readFileSync(new URL('./data.proto', import.meta.url));\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Example in outBase Documentation\nDESCRIPTION: Shows an example project directory structure to illustrate how outBase affects output. The structure includes a package.json, config file, and source files in nested directories.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/zh/config/lib/out-base.mdx#2025-04-21_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n.\\n├── package.json\\n├── rslib.config.ts\\n└── src\\n    └── utils\\n        ├── bar\\n        │   └── index.ts\\n        ├── foo\\n        │   └── index.ts\\n        └── index.ts\n```\n\n----------------------------------------\n\nTITLE: Configuring External Dependencies for DTS Generation\nDESCRIPTION: Configuration to exclude specific dependencies when generating declaration files with dts.bundle enabled\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/faq/features.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  lib: [\n    // ...\n  ],\n  output: {\n    externals: ['@types/react'],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Linking to Assets Domain in Markdown\nDESCRIPTION: This snippet demonstrates how to create a link to the assets domain using Markdown syntax.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/README.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n<https://assets.rspack.dev/>\n```\n\n----------------------------------------\n\nTITLE: Default Entry Configuration for Bundleless Mode in Rslib\nDESCRIPTION: Shows the default entry point configuration for bundleless mode in Rslib, which uses a glob pattern to include all files under the src directory.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/zh/config/rsbuild/source.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst defaultEntry = {\n  index: 'src/**',\n};\n```\n\n----------------------------------------\n\nTITLE: Transformed ESM Output with __filename Shim\nDESCRIPTION: Transformed ESM output when __filename shim is enabled, showing how the filename is derived from import.meta.url.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/config/lib/shims.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { fileURLToPath as __webpack_fileURLToPath__ } from 'url';\nimport { dirname as __webpack_dirname__ } from 'path';\nvar src_dirname = __webpack_dirname__(\n  __webpack_fileURLToPath__(import.meta.url),\n);\nvar src_filename = __webpack_fileURLToPath__(import.meta.url);\nconsole.log(src_filename);\n```\n\n----------------------------------------\n\nTITLE: Configuring Code Readability Preservation in Rslib\nDESCRIPTION: Configuration to maintain code readability while compressing output by disabling name mangling and minification\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/faq/features.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  lib: [\n    // ...\n  ],\n  output: {\n    minify: {\n      jsOptions: {\n        minimizerOptions: {\n          // preserve variable name and disable minify for easier debugging\n          mangle: false,\n          minify: false,\n          compress: true,\n        },\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Footer Type in TypeScript\nDESCRIPTION: TypeScript type definition for the Footer object, which specifies optional string properties for JavaScript, CSS, and declaration file footers.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/config/lib/footer.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Footer = {\n  js?: string;\n  css?: string;\n  dts?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Bundleless Output for JSON Import\nDESCRIPTION: Shows the compiled output in bundleless mode when importing JSON files.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/advanced/json-files.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as example from './example.js';\n\nconsole.log(example.name);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nvar example_namespaceObject = JSON.parse('{\"name\":\"foo\",\"items\":[1,2]}');\nvar __webpack_exports__items = example_namespaceObject.items;\nvar __webpack_exports__name = example_namespaceObject.name;\nexport { __webpack_exports__items as items, __webpack_exports__name as name };\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Module Federation\nDESCRIPTION: This JSON snippet shows how to configure tsconfig.json to include Module Federation types and stories for TypeScript support.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/advanced/module-federation.mdx#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    // ...\n    \"paths\": {\n      \"*\": [\"./@mf-types/*\"]\n    }\n  },\n  \"include\": [\"src/**/*\", \".storybook/**/*\", \"stories/**/*\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Named Import of JSON Files\nDESCRIPTION: Demonstrates named import syntax for JSON files, including both the source file and implementation.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/advanced/json-files.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { name } from './example.json';\n\nconsole.log(name); // 'foo';\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"foo\",\n  \"items\": [1, 2]\n}\n```\n\n----------------------------------------\n\nTITLE: Example Using require in Source Code\nDESCRIPTION: Example demonstrating various CommonJS require patterns in source code, including dynamic requires and require.resolve.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/config/lib/shims.mdx#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst someModule = require('./someModule');\n\n// dynamic require\nconst dynamicRequiredModule = require(SOME_VALUE_IN_RUNTIME);\n// require.resolve\nconst someModulePath = require.resolve('./someModule');\n// use require as a expression\nconst lazyFn = (module, requireFn) => {};\nlazyFn('./other.js', require);\n```\n\n----------------------------------------\n\nTITLE: Importing SVG as URL in Bundle Mode\nDESCRIPTION: This snippet demonstrates how to import an SVG file as a URL in bundle mode. The imported logoURL is a string representing the path to the SVG file.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/advanced/svgr-files.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport logoURL from './static/logo.svg';\n\nconsole.log(logoURL);\n```\n\n----------------------------------------\n\nTITLE: Configuring Bundle Option in rsbuild-plugin-dts\nDESCRIPTION: Example of enabling the bundle option in the DTS plugin configuration to bundle declaration files using API Extractor.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/packages/plugin-dts/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\npluginDts({\n  bundle: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Rslib Configuration\nDESCRIPTION: Basic Rslib configuration file setup using TypeScript. Creates a minimal configuration file that can be extended with additional options as needed.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/migration/tsup.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@rslib/core';\n\nexport default defineConfig({});\n```\n\n----------------------------------------\n\nTITLE: Usage Options for rslib mf-dev Command\nDESCRIPTION: The help output for the rslib mf-dev command, used to start a development server for Module Federation format libraries.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/basic/cli.mdx#2025-04-21_snippet_14\n\nLANGUAGE: text\nCODE:\n```\nUsage: rslib mf-dev [options]\n\nstart Rsbuild dev server of Module Federation format\n\nOptions:\n  -c --config <config>  specify the configuration file, can be a relative or absolute path\n  -r --root <root>      specify the project root directory, can be an absolute path or a path relative to cwd\n  --env-mode <mode>     specify the env mode to load the `.env.[mode]` file\n  --env-dir <dir>       specify the directory to load `.env` files\n  --lib <id>            specify the library (repeatable, e.g. --lib esm --lib cjs)\n  -h, --help            display help for command\n```\n\n----------------------------------------\n\nTITLE: Disabling autoExternal in rslib Configuration\nDESCRIPTION: Example showing how to completely disable the autoExternal behavior by setting it to false, which will result in all dependencies being bundled.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/config/lib/auto-external.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  lib: [\n    {\n      format: 'esm',\n      autoExternal: false,\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Building Specific Libraries Using Custom IDs with Rslib CLI\nDESCRIPTION: Command-line example showing how to build specific libraries by referencing their custom IDs with the --lib flag. This allows targeting only the libraries you need to build.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/zh/config/lib/id.mdx#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx rslib build --lib my-lib-a --lib my-lib-b\n```\n\n----------------------------------------\n\nTITLE: Transformed ESM Output with require Shim\nDESCRIPTION: Transformed ESM output when require shim is enabled, showing how createRequire is used to emulate CommonJS require functionality.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/config/lib/shims.mdx#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport __rslib_shim_module__ from 'module';\nconst require = /*#__PURE__*/ __rslib_shim_module__.createRequire(\n  import.meta.url,\n);\n// dynamic require\nrequire(SOME_VALUE_IN_RUNTIME);\n// require.resolve\nrequire.resolve('./someModule');\n// use require as a expression\nconst lazyFn = (module, requireFn) => {};\nlazyFn('./other.js', require);\n```\n\n----------------------------------------\n\nTITLE: 配置Node Polyfill插件 (TypeScript)\nDESCRIPTION: 这段代码展示了如何在rslib.config.ts中配置@rsbuild/plugin-node-polyfill插件,以便在浏览器端提供Node.js核心库的polyfill。需要先安装@rsbuild/plugin-node-polyfill依赖。\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/zh/guide/advanced/output-compatibility.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@rslib/core';\nimport { pluginNodePolyfill } from '@rsbuild/plugin-node-polyfill';\n\nexport default defineConfig({\n  lib: [{ format: 'esm' }],\n  plugins: [pluginNodePolyfill()],\n});\n```\n\n----------------------------------------\n\nTITLE: YAML File Import Example\nDESCRIPTION: Demonstrates importing and using YAML files in TypeScript, including the YAML file structure.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/advanced/json-files.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport example from './example.yaml';\n\nconsole.log(example.hello); // 'world';\nconsole.log(example.foo); // { bar: 'baz' };\n```\n\nLANGUAGE: yaml\nCODE:\n```\nhello: world\nfoo:\n  bar: baz\n```\n\n----------------------------------------\n\nTITLE: Accessing Overridden Environment Variables\nDESCRIPTION: Example showing how environment variables are overridden by .env.local files, with the most specific file taking precedence.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/basic/cli.mdx#2025-04-21_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nconsole.log(import.meta.env.BAR); // '2'\nconsole.log(process.env.BAR); // '2'\n```\n\n----------------------------------------\n\nTITLE: Default Shims Configuration in JavaScript\nDESCRIPTION: Default configuration for module system shims in rslib, enabling import.meta.url for CommonJS output while disabling ESM compatibility shims by default.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/config/lib/shims.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst defaultShims = {\n  cjs: {\n    'import.meta.url': true,\n  },\n  esm: {\n    __filename: false,\n    __dirname: false,\n    require: false,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Footer Content with Rspack BannerPlugin\nDESCRIPTION: Example of customizing footer content in Rslib configuration using Rspack's BannerPlugin. This allows for more advanced footer options beyond the default settings.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/config/lib/footer.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  lib: [\n    {\n      // ...\n      tools: {\n        rspack: {\n          plugins: [\n            new rspack.BannerPlugin({\n              footer: true,\n              // ... options\n            }),\n          ],\n        },\n      },\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring tsconfig.json for Module Federation\nDESCRIPTION: This snippet shows how to configure tsconfig.json to include Module Federation types and stories files.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/zh/guide/advanced/module-federation.mdx#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    // ...\n    \"paths\": {\n      \"*\": [\"./@mf-types/*\"]\n    }\n  },\n  \"include\": [\"src/**/*\", \".storybook/**/*\", \"stories/**/*\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Environment Directory for Rslib Build\nDESCRIPTION: Command to specify a custom directory for environment files, instructing rslib to look for .env files in the specified directory.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/basic/cli.mdx#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx rslib build --env-dir config\n```\n\n----------------------------------------\n\nTITLE: Excluding Test Files in Bundleless Mode\nDESCRIPTION: Configuration showing how to exclude test files using glob patterns in bundleless mode.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/config/lib/bundle.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  lib: [\n    {\n      format: 'cjs',\n      bundle: false,\n    },\n  ],\n  source: {\n    entry: {\n      index: ['./src/**', '!src/**/*.test.ts'],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling Build Abort on Type Errors\nDESCRIPTION: Configuration example showing how to disable aborting the build when type errors occur during declaration file generation.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/packages/plugin-dts/README.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\npluginDts({\n  abortOnError: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Directory Structure\nDESCRIPTION: Shows the initial project directory structure before building. This structure is used to demonstrate how outBase affects the output.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/config/lib/out-base.mdx#2025-04-21_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n.\n├── package.json\n├── rslib.config.ts\n└── src\n    └── utils\n        ├── bar\n        │   └── index.ts\n        ├── foo\n        │   └── index.ts\n        └── index.ts\n```\n\n----------------------------------------\n\nTITLE: Configuring Host Application for Module Federation\nDESCRIPTION: This snippet demonstrates how to configure a host application to consume the Rslib Module Federation library using the @module-federation/rsbuild-plugin.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/zh/guide/advanced/module-federation.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { pluginModuleFederation } from '@module-federation/rsbuild-plugin';\nimport { defineConfig } from '@rsbuild/core';\nimport { pluginReact } from '@rsbuild/plugin-react';\n\nexport default defineConfig({\n  plugins: [\n    pluginReact(),\n    pluginModuleFederation({\n      name: 'rsbuild_host',\n      remotes: {\n        rslib: 'rslib@http://localhost:3001/mf/mf-manifest.json',\n      },\n      shared: {\n        react: {\n          singleton: true,\n        },\n        'react-dom': {\n          singleton: true,\n        },\n      },\n      // 开启这个当 Rslib 产物为 'production' 模式， 但是宿主应用是 'development' 模式。\n      // 参考链接: https://lib.rsbuild.dev/guide/advanced/module-federation#faqs\n      shareStrategy: 'loaded-first',\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Output of rslib inspect Command\nDESCRIPTION: Example output showing the paths to generated configuration files after running the inspect command.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/basic/cli.mdx#2025-04-21_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n➜ npx rslib inspect\n\nInspect config succeed, open following files to view the content:\n\n  - Rsbuild Config: /project/dist/.rsbuild/rsbuild.config.mjs\n  - Rspack Config (esm): /project/dist/.rsbuild/rspack.config.esm.mjs\n```\n\n----------------------------------------\n\nTITLE: Running rslib inspect with Verbose Option\nDESCRIPTION: Command to run the inspect operation with verbose output, which includes full function definitions in the generated configuration files.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/basic/cli.mdx#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nrslib inspect --verbose\n```\n\n----------------------------------------\n\nTITLE: Starting the Remote Module for Module Federation Development\nDESCRIPTION: Command to start the remote module development server for Module Federation setup. This is the first step in the development workflow.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/examples/module-federation/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev:remote\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration for Declaration Files\nDESCRIPTION: TSConfig setup to exclude test files from TypeScript declaration generation.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/config/lib/bundle.mdx#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"include\": [\"src\"],\n  \"exclude\": [\"src/**/*.test.ts\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Disable Build Abort on Type Errors\nDESCRIPTION: Configuration example showing how to prevent build failures when TypeScript declaration generation encounters errors.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/zh/config/lib/dts.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  lib: [\n    {\n      format: 'esm',\n      dts: {\n        abortOnError: false,\n      },\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Building the Rslib Library\nDESCRIPTION: Command to build the Rslib library using pnpm.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/packages/create-rslib/template-common/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Displaying Output Structure With outBase Set to ./src\nDESCRIPTION: Shows the output directory structure when outBase is configured as './src'. This changes the base output directory, resulting in a different structure.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/config/lib/out-base.mdx#2025-04-21_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\ndist\n└── utils\n    ├── bar\n    │   └── index.js\n    ├── foo\n    │   └── index.js\n    └── index.js\n```\n\n----------------------------------------\n\nTITLE: Output of rslib inspect with Multiple Formats\nDESCRIPTION: Example output when inspecting a project with multiple output formats (esm and cjs), showing the paths to all generated configuration files.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/basic/cli.mdx#2025-04-21_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n➜ npx rslib inspect\n\nInspect config succeed, open following files to view the content:\n\n  - Rsbuild Config (esm): /project/dist/.rsbuild/rsbuild.config.esm.mjs\n  - Rsbuild Config (cjs): /project/dist/.rsbuild/rsbuild.config.cjs.mjs\n  - Rspack Config (esm): /project/dist/.rsbuild/rspack.config.esm.mjs\n  - Rspack Config (cjs): /project/dist/.rsbuild/rspack.config.cjs.mjs\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Alias in Rslib\nDESCRIPTION: Example showing how to configure resolve.alias to replace lodash with lodash-es during bundling. The aliased module will be included in the final bundle.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/zh/config/rsbuild/resolve.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  // ...\n  resolve: {\n    alias: {\n      lodash: 'lodash-es',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Correct Type Export Syntax for Isolated Modules in TypeScript\nDESCRIPTION: This snippet demonstrates the correct way to export types when using isolated modules in TypeScript, avoiding cross-file type references that can't be correctly compiled by SWC or Babel.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/zh/guide/basic/typescript.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// 错误\nexport { SomeType } from './types';\n\n// 正确\nexport type { SomeType } from './types';\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Command to install all project dependencies, create symlinks between packages in the monorepo, and build all packages via nx.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Usage Options for rslib inspect Command\nDESCRIPTION: The help output for the rslib inspect command showing available options for inspecting Rsbuild and Rspack configurations.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/basic/cli.mdx#2025-04-21_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nUsage: rslib inspect [options]\n\ninspect the Rsbuild / Rspack configs of Rslib projects\n\nOptions:\n  -c --config <config>  specify the configuration file, can be a relative or absolute path\n  -r --root <root>      specify the project root directory, can be an absolute path or a path relative to cwd\n  --env-mode <mode>     specify the env mode to load the `.env.[mode]` file\n  --env-dir <dir>       specify the directory to load `.env` files\n  --lib <id>            specify the library (repeatable, e.g. --lib esm --lib cjs)\n  --output <output>     specify inspect content output path (default: \".rsbuild\")\n  --verbose             show full function definitions in output\n  -h, --help            display help for command\n```\n\n----------------------------------------\n\nTITLE: Serving Built Module Federation Component\nDESCRIPTION: Command to serve the built distribution files in production mode.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/examples/module-federation/mf-react-component/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm run serve\n```\n\n----------------------------------------\n\nTITLE: Customizing Declaration File Extension\nDESCRIPTION: Example of changing the extension of generated declaration files from the default .d.ts to .d.mts using the dtsExtension option.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/packages/plugin-dts/README.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\npluginDts({\n  dtsExtension: '.d.mts',\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Test Snapshots\nDESCRIPTION: Command to update test snapshots when intentional changes are made to tested outputs.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/CONTRIBUTING.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npnpm run test:unit -u\n```\n\n----------------------------------------\n\nTITLE: Configuring CSS Loader to Ignore Specific Assets (TypeScript)\nDESCRIPTION: This configuration snippet shows how to set up the CSS loader to ignore specific asset paths, preserving them as-is in the output CSS.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/advanced/static-assets.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  tools: {\n    cssLoader: {\n      url: {\n        filter: (url) => {\n          if (/\\/image\\/font/.test(url)) {\n            return false;\n          }\n          return true;\n        },\n      },\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Default SWC Comment Preservation Configuration\nDESCRIPTION: Default SWC configuration for comment preservation showing the jsc.minify.format settings that preserve some legal comments and annotations\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/faq/features.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    comments: 'some',\n    preserveAnnotations: true,\n}\n```\n\n----------------------------------------\n\nTITLE: Building Rslib MF Host for Production\nDESCRIPTION: Command to build the Module Federation host application for production deployment.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/examples/module-federation/mf-host/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Defining Syntax Types in TypeScript\nDESCRIPTION: TypeScript type definitions for EcmaScriptVersion and Syntax options supported by Rslib. The Syntax type can be either an EcmaScriptVersion string or an array of strings for browserslist queries.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/config/lib/syntax.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype EcmaScriptVersion =\n  | 'es5'\n  | 'es6'\n  | 'es2015'\n  | 'es2016'\n  | 'es2017'\n  | 'es2018'\n  | 'es2019'\n  | 'es2020'\n  | 'es2021'\n  | 'es2022'\n  | 'es2023'\n  | 'es2024'\n  | 'esnext';\n\ntype Syntax = EcmaScriptVersion | string[];\n```\n\n----------------------------------------\n\nTITLE: Custom Rspack BannerPlugin Configuration Example\nDESCRIPTION: Demonstrates how to customize footer behavior by directly configuring the Rspack BannerPlugin through the tools.rspack.plugins option when the default settings don't meet requirements.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/zh/config/lib/footer.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  lib: [\n    {\n      // ...\n      tools: {\n        rspack: {\n          plugins: [\n            new rspack.BannerPlugin({\n              footer: true,\n              // ... options\n            }),\n          ],\n        },\n      },\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Example .env.local File for Overriding Variables\nDESCRIPTION: Example of overriding an environment variable using a .env.local file, which takes precedence over the base .env file.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/basic/cli.mdx#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nBAR=2\n```\n\n----------------------------------------\n\nTITLE: Previewing Rslib MF Host Production Build\nDESCRIPTION: Command to run a local preview server for the production build of the Module Federation host application.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/examples/module-federation/mf-host/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm preview\n```\n\n----------------------------------------\n\nTITLE: Disabling Declaration Files Generation\nDESCRIPTION: Configuration example showing how to disable TypeScript declaration file generation.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/config/lib/dts.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  lib: [\n    {\n      format: 'esm',\n      dts: false,\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server for Module Federation Component\nDESCRIPTION: Command to start the development server for the Module Federation React component.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/examples/module-federation/mf-react-component/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Disable TypeScript Declaration Generation\nDESCRIPTION: Configuration example showing how to disable TypeScript declaration file generation.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/zh/config/lib/dts.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  lib: [\n    {\n      format: 'esm',\n      dts: false,\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Example .env File Content\nDESCRIPTION: Example of environment variables defined in a .env file, which can be accessed in the code during build time.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/basic/cli.mdx#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nFOO=hello\nBAR=1\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js LTS with NVM\nDESCRIPTION: Commands to install and activate the Long-Term Support (LTS) version of Node.js using Node Version Manager (nvm).\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/start/quick-start.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Install Node.js LTS\nnvm install --lts\n# Switch to Node.js LTS\nnvm use --lts\n```\n\n----------------------------------------\n\nTITLE: Defining DTS Type Configuration in TypeScript\nDESCRIPTION: Type definition for the DTS configuration object that specifies various options for TypeScript declaration file generation.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/config/lib/dts.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Dts =\n  | {\n      bundle?: boolean;\n      distPath?: string;\n      build?: boolean;\n      abortOnError?: boolean;\n      autoExtension?: boolean;\n    }\n  | boolean;\n```\n\n----------------------------------------\n\nTITLE: Running Development Server for Rslib MF Host\nDESCRIPTION: Command to start the development server for the Module Federation host application.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/examples/module-federation/mf-host/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Building Packages with nx\nDESCRIPTION: Commands for building specific packages or all packages in the monorepo using nx, including watch mode for development.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/CONTRIBUTING.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx build @rslib/core\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Rslib Project\nDESCRIPTION: Command to install all required dependencies for the Rslib project using pnpm package manager.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/packages/create-rslib/template-common/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Customizing JavaScript Output File Extensions in RSLib Configuration\nDESCRIPTION: This snippet demonstrates how to configure RSLib to customize JavaScript output file extensions. It shows setting autoExtension to false for CommonJS format and specifying custom filenames for both CommonJS and ESM formats.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/config/lib/auto-extension.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  lib: [\n    {\n      format: 'cjs',\n      autoExtension: false,\n      output: {\n        filename: {\n          js: '[name].cjs',\n        },\n      },\n    },\n    {\n      format: 'esm',\n      output: {\n        filename: {\n          js: '[name].mjs',\n        },\n      },\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Starting the Host App for Module Federation\nDESCRIPTION: Command to start the host application that consumes the Module Federation remote modules. This is the final step in setting up the development environment for the host app approach.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/examples/module-federation/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev:host\n```\n\n----------------------------------------\n\nTITLE: Enable Bundled TypeScript Declaration Generation\nDESCRIPTION: Configuration example showing how to enable bundled TypeScript declaration file generation using api-extractor.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/zh/config/lib/dts.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  lib: [\n    {\n      format: 'esm',\n      dts: {\n        bundle: true,\n      },\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests\nDESCRIPTION: Commands for running unit tests across the entire project or for specific packages, including snapshot updates.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/CONTRIBUTING.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npnpm run test:unit\n```\n\n----------------------------------------\n\nTITLE: Checking Node.js Version with Bash\nDESCRIPTION: Command to verify the currently installed Node.js version to ensure compatibility with Rslib requirements.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/start/quick-start.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode -v\n```\n\n----------------------------------------\n\nTITLE: Importing SVG Asset in TypeScript\nDESCRIPTION: This example shows how to import an SVG asset in a TypeScript file. It demonstrates the basic import syntax for static assets.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/advanced/static-assets.mdx#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport logo from './assets/logo.svg';\n\nconsole.log(logo);\n```\n\n----------------------------------------\n\nTITLE: create-rslib CLI Options Reference\nDESCRIPTION: Reference for all available command-line flags and options when using the create-rslib tool.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/start/quick-start.mdx#2025-04-21_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nUsage: create-rslib [options]\n\nOptions:\n\n  -h, --help       display help for command\n  -d, --dir        create project in specified directory\n  -t, --template   specify the template to use\n  --tools          select additional tools (biome, eslint, prettier)\n  --override       override files in target directory\n```\n\n----------------------------------------\n\nTITLE: Building Rslib in Watch Mode\nDESCRIPTION: Command to build the Rslib library in watch mode, which automatically rebuilds when files are changed.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/packages/create-rslib/template-common/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js with Version Managers\nDESCRIPTION: Commands to switch to the project's specified Node.js version using either fnm or nvm version managers. This ensures consistent Node.js version across all contributors.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# with fnm\nfnm use\n\n# with nvm\nnvm use\n```\n\n----------------------------------------\n\nTITLE: Bundle Mode Example with Default Entry\nDESCRIPTION: Complete configuration example for bundle mode that uses the default settings to generate a single output file.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/zh/config/lib/bundle.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  lib: [\n    {\n      format: 'cjs',\n      bundle: true,\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Generated Output with External React Dependency\nDESCRIPTION: The resulting output JavaScript code after Rslib processing, showing how external dependencies are handled without bundling them.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/advanced/third-party-deps.mdx#2025-04-21_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport * as __WEBPACK_EXTERNAL_MODULE_react__ from 'react';\nconsole.info(__WEBPACK_EXTERNAL_MODULE_react__['default']);\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for a Single Package\nDESCRIPTION: Command to run unit tests for a specific package in the monorepo.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/CONTRIBUTING.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npnpm run test:unit packages/core\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft API Extractor for Bundle Option\nDESCRIPTION: Command to install @microsoft/api-extractor as a development dependency, which is required when using the bundle option to bundle declaration files.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/packages/plugin-dts/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm add @microsoft/api-extractor -D\n```\n\n----------------------------------------\n\nTITLE: Building All Packages\nDESCRIPTION: Command to build all packages in the monorepo using the predefined build script.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/CONTRIBUTING.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm run build\n```\n\n----------------------------------------\n\nTITLE: Linking to Rspack Writing Style Guide in Markdown\nDESCRIPTION: This snippet demonstrates how to create a link to the Rspack writing style guide using Markdown syntax.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/README.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[Writing style guide](https://github.com/web-infra-dev/rspack/tree/main/website#writing-style-guide)\n```\n\n----------------------------------------\n\nTITLE: Defining Default Entry in Bundle Mode\nDESCRIPTION: Defines the default entry point configuration for bundle mode in Rslib. It specifies 'src/index.js' as the default entry with support for various JavaScript and TypeScript file extensions.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/config/rsbuild/source.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst defaultEntry = {\n  // default support for other suffixes such as ts, tsx, jsx, mjs, cjs\n  index: 'src/index.js',\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling pnpm Package Manager with Corepack\nDESCRIPTION: Command to enable pnpm via Corepack, which is required for managing dependencies in this monorepo.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncorepack enable\n```\n\n----------------------------------------\n\nTITLE: Running Linting with Biome\nDESCRIPTION: Command to run the Biome linter on the codebase to maintain consistency and readability.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/CONTRIBUTING.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Importing Overview Component from Rspress Theme in JSX\nDESCRIPTION: This code snippet imports the Overview component from the Rspress theme, which is probably used to structure the overview section of the documentation.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/config/rsbuild/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Overview } from 'rspress/theme';\n```\n\n----------------------------------------\n\nTITLE: Importing RsbuildDocBadge Component in React\nDESCRIPTION: This code snippet imports the RsbuildDocBadge component from the @components directory. This component is likely used to display documentation badges throughout the file.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/config/rsbuild/tools.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { RsbuildDocBadge } from '@components/RsbuildDocBadge';\n```\n\n----------------------------------------\n\nTITLE: Building in Watch Mode\nDESCRIPTION: Command to build a specific package in watch mode, which automatically rebuilds when changes are detected.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/CONTRIBUTING.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx build @rslib/core --watch\n```\n\n----------------------------------------\n\nTITLE: Starting the Rslib Module Federation Module\nDESCRIPTION: Command to start the Rslib Module Federation module development server. This is the second step in the development workflow after starting the remote module.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/examples/module-federation/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev:rslib\n```\n\n----------------------------------------\n\nTITLE: Filtering Integration Tests\nDESCRIPTION: Commands to filter integration tests by keywords in file paths or test names.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/CONTRIBUTING.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n# Only run test cases which contains `dts` keyword in file path\npnpm test:integration dts\n# Only run test cases which contains `dts` keyword in test name\npnpm test:integration -t dts\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Types for Redirect Configuration in Rslib\nDESCRIPTION: Type definitions for the redirect configuration options in Rslib, which control how import paths are rewritten in bundleless mode output files.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/zh/config/lib/redirect.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype JsRedirect = {\n  path?: boolean;\n  extension?: boolean;\n};\n\ntype StyleRedirect = {\n  path?: boolean;\n  extension?: boolean;\n};\n\ntype DtsRedirect = {\n  path?: boolean;\n  extension?: boolean;\n};\n\ntype Redirect = {\n  js?: JsRedirect;\n  style?: StyleRedirect;\n  asset?: boolean;\n  dts?: DtsRedirect;\n};\n```\n\n----------------------------------------\n\nTITLE: Installing rsbuild-plugin-dts with npm\nDESCRIPTION: Command to install the rsbuild-plugin-dts package as a development dependency using npm.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/packages/plugin-dts/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm add rsbuild-plugin-dts -D\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components for Glossary Documentation\nDESCRIPTION: Imports MDX components to provide detailed explanations for different module formats and technologies in the glossary page. These components are used within the document to expand on each glossary term.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/start/glossary.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ESM from './components/ESM.mdx';\nimport CJS from './components/CJS.mdx';\nimport UMD from './components/UMD.mdx';\nimport MF from './components/MF.mdx';\n```\n\n----------------------------------------\n\nTITLE: Defining Page Metadata in Markdown Frontmatter\nDESCRIPTION: This markdown frontmatter defines metadata for the page, including the page type and title suffix for a Rsbuild-based library development tool documentation.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\npageType: home\ntitleSuffix: ' - Rsbuild-based library development tool'\n---\n```\n\n----------------------------------------\n\nTITLE: Basic Bundleless Mode Configuration in Rslib\nDESCRIPTION: Configuration example for bundleless mode in Rslib, setting the format to CommonJS and disabling bundling to output multiple files.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/zh/config/lib/bundle.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  lib: [\n    {\n      format: 'cjs',\n      bundle: false,\n    },\n  ],\n  source: {\n    entry: {\n      index: './foo/**',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Dependency Struct in Rust\nDESCRIPTION: Defines a struct 'Dependency' with fields for version requirement and dependency mode. It includes methods for creating new instances and checking compatibility.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/tests/integration/copy/temp-3/b.txt#2025-04-21_snippet_2\n\nLANGUAGE: Rust\nCODE:\n```\n#[derive(Debug, Clone, PartialEq, Eq)]\npub struct Dependency {\n    pub version_req: VersionReq,\n    pub mode: DependencyMode,\n}\n\nimpl Dependency {\n    pub fn new(version_req: VersionReq, mode: DependencyMode) -> Self {\n        Self { version_req, mode }\n    }\n\n    pub fn is_compatible_with(&self, version: &Version) -> bool {\n        self.version_req.matches(version)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Watch Mode for Rslib Build\nDESCRIPTION: Command to run rslib build with watch mode enabled, which will watch for changes in source files and automatically rebuild.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/basic/cli.mdx#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx rslib build -w\n```\n\n----------------------------------------\n\nTITLE: Importing RsbuildDocBadge Component in JSX\nDESCRIPTION: This code snippet imports the RsbuildDocBadge component from the @components directory, which is likely used to display a badge for Rsbuild documentation links.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/config/rsbuild/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { RsbuildDocBadge } from '@components/RsbuildDocBadge';\n```\n\n----------------------------------------\n\nTITLE: Implementing Package Struct in Rust\nDESCRIPTION: Defines a struct 'Package' with fields for name, version, and dependencies. It includes methods for creating new instances and adding dependencies.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/tests/integration/copy/temp-3/b.txt#2025-04-21_snippet_1\n\nLANGUAGE: Rust\nCODE:\n```\n#[derive(Debug, Clone, PartialEq, Eq)]\npub struct Package {\n    pub name: String,\n    pub version: Version,\n    pub dependencies: HashMap<String, Dependency>,\n}\n\nimpl Package {\n    pub fn new(name: String, version: Version) -> Self {\n        Self {\n            name,\n            version,\n            dependencies: HashMap::new(),\n        }\n    }\n\n    pub fn add_dependency(&mut self, name: String, dependency: Dependency) {\n        self.dependencies.insert(name, dependency);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Git Branch for Development\nDESCRIPTION: Git command to create and checkout a new branch for development work, which makes it easier to submit pull requests later.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngit checkout -b MY_BRANCH_NAME\n```\n\n----------------------------------------\n\nTITLE: Implementing Version Struct in Rust\nDESCRIPTION: Defines a struct 'Version' representing semantic versioning. It includes fields for major, minor, and patch versions, as well as methods for parsing and comparing versions.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/tests/integration/copy/temp-3/b.txt#2025-04-21_snippet_3\n\nLANGUAGE: Rust\nCODE:\n```\n#[derive(Debug, Clone, PartialEq, Eq, PartialOrd, Ord)]\npub struct Version {\n    pub major: u64,\n    pub minor: u64,\n    pub patch: u64,\n}\n\nimpl Version {\n    pub fn new(major: u64, minor: u64, patch: u64) -> Self {\n        Self { major, minor, patch }\n    }\n\n    pub fn parse(version_str: &str) -> Result<Self, String> {\n        let parts: Vec<&str> = version_str.split('.').collect();\n        if parts.len() != 3 {\n            return Err(\"Invalid version format\".to_string());\n        }\n\n        let major = parts[0].parse().map_err(|_| \"Invalid major version\")?;\n        let minor = parts[1].parse().map_err(|_| \"Invalid minor version\")?;\n        let patch = parts[2].parse().map_err(|_| \"Invalid patch version\")?;\n\n        Ok(Self::new(major, minor, patch))\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Linking to Rspress Repository in Markdown\nDESCRIPTION: This snippet demonstrates how to create a link to the Rspress GitHub repository using Markdown syntax.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[Rspress](https://github.com/web-infra-dev/rspress)\n```\n\n----------------------------------------\n\nTITLE: Building Module Federation Component\nDESCRIPTION: Command to build the React component project for production deployment.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/examples/module-federation/mf-react-component/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm run build\n```\n\n----------------------------------------\n\nTITLE: Alternative TypeScript declaration for Rslib types\nDESCRIPTION: Alternative approach for providing TypeScript declarations by referencing the types included in the @rslib/core package, which handles various module imports including CSS, Sass, and other assets.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/migration/modernjs-module.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"@rslib/core/types\" />\n```\n\n----------------------------------------\n\nTITLE: Footer Type Definition in TypeScript\nDESCRIPTION: Defines the Footer type interface with optional js, css, and dts string properties used for injecting content at the end of respective output files.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/zh/config/lib/footer.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Footer = {\n  js?: string;\n  css?: string;\n  dts?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Linking to Rspress Website in Markdown\nDESCRIPTION: This snippet shows how to create a link to the Rspress website using Markdown syntax.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/README.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[Rspress Website](https://rspress.dev/)\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Libraries with Default IDs in Rslib\nDESCRIPTION: Example showing how Rslib generates default IDs for multiple libraries with different formats. The ID format follows the pattern '${format}${index}', where index is included only when multiple libraries use the same format.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/zh/config/lib/id.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  lib: [\n    { format: 'esm' }, // id is `esm0`\n    { format: 'cjs' }, // id is `cjs`\n    { format: 'esm' }, // id is `esm1`\n    { format: 'umd' }, // id is `umd`\n    { format: 'esm' }, // id is `esm2`\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Default Library ID Generation Example in TypeScript\nDESCRIPTION: Example configuration showing how Rslib automatically generates library IDs based on format and index when no custom IDs are specified.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/config/lib/id.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  lib: [\n    { format: 'esm' }, // id is `esm0`\n    { format: 'cjs' }, // id is `cjs`\n    { format: 'esm' }, // id is `esm1`\n    { format: 'umd' }, // id is `umd`\n    { format: 'esm' }, // id is `esm2`\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Default Entry Configuration for Bundle Mode in Rslib\nDESCRIPTION: Shows the default entry point configuration for bundle mode in Rslib, which sets 'src/index.js' as the main entry file while supporting various JavaScript and TypeScript extensions.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/zh/config/rsbuild/source.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst defaultEntry = {\n  // 默认支持其他后缀，如 ts、tsx、jsx、mjs、cjs\n  index: 'src/index.js',\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Banner Configuration with Rspack in Rslib\nDESCRIPTION: Example of creating a custom banner configuration by directly using Rspack's BannerPlugin through the tools.rspack.plugins option in the Rslib configuration.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/zh/config/lib/banner.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  lib: [\n    {\n      // ...\n      tools: {\n        rspack: {\n          plugins: [\n            new rspack.BannerPlugin({\n              // ... options\n            }),\n          ],\n        },\n      },\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Adding a Footer to Declaration Files\nDESCRIPTION: Configuration example showing how to inject content at the bottom of each generated declaration file using the footer option.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/packages/plugin-dts/README.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\npluginDts({\n  footer: '/** @footer */',\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a Banner to Declaration Files\nDESCRIPTION: Configuration example showing how to inject content at the top of each generated declaration file using the banner option.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/packages/plugin-dts/README.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\npluginDts({\n  banner: '/** @banner */',\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring RSLib with External Helpers Enabled\nDESCRIPTION: RSLib configuration file setting 'externalHelpers' to true, which results in helper functions being imported from @swc/helpers.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/config/lib/external-helpers.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  lib: [\n    {\n      syntax: 'es5',\n      externalHelpers: true,\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Class with Getter in TypeScript\nDESCRIPTION: Example TypeScript code defining a class 'FOO' with a getter 'bar'. This serves as the input for demonstrating the effect of the 'externalHelpers' option.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/config/lib/external-helpers.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default class FOO {\n  get bar() {\n    return;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Linking to Rstack Design Resources Repository in Markdown\nDESCRIPTION: This snippet shows how to create a link to the Rstack design resources repository using Markdown syntax.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/README.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n[rspack-contrib/rstack-design-resources](https://github.com/rspack-contrib/rstack-design-resources)\n```\n\n----------------------------------------\n\nTITLE: Bundle Output for JSON Import\nDESCRIPTION: Shows the compiled output in bundle mode when importing JSON files.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/advanced/json-files.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nvar example_namespaceObject = {\n  u: 'foo',\n};\nconsole.log(example_namespaceObject.u);\n```\n\n----------------------------------------\n\nTITLE: Configuring Sass support in rslib.config.ts\nDESCRIPTION: Configuration for enabling Sass support in an Rslib project using the @rsbuild/plugin-sass plugin to process .scss files during the build process.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/migration/modernjs-module.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from '@rslib/core';\n// Quick tip: You can use all Rsbuild plugins here since they are compatible with Rslib\nimport { pluginSass } from '@rsbuild/plugin-sass';\n\nexport default defineConfig({\n  //...\n  plugins: [pluginSass()],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating TypeScript declaration for Sass modules\nDESCRIPTION: TypeScript declaration file (env.d.ts) for resolving type issues with Sass modules. Provides type definitions for importing .scss files as CSS modules with class names as keys.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/migration/modernjs-module.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module '*.scss' {\n  const content: { [className: string]: string };\n  export default content;\n}\n```\n\n----------------------------------------\n\nTITLE: Default Output Structure Without outBase Configuration\nDESCRIPTION: Shows the resulting output directory structure when outBase is not specified, with the nearest common ancestor of all entry files (src/utils) being used as the base directory.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/zh/config/lib/out-base.mdx#2025-04-21_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\ndist\\n├── bar\\n│   └── index.js\\n├── foo\\n│   └── index.js\\n└── index.js\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom tsconfig.json Path in Rslib\nDESCRIPTION: This snippet demonstrates how to configure a custom tsconfig.json file path in Rslib using the source.tsconfigPath option in the rslib.config.ts file.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/zh/guide/basic/typescript.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  lib: [\n    // ...\n  ],\n  source: {\n    tsconfigPath: './tsconfig.custom.json',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Default Shims Configuration in JavaScript\nDESCRIPTION: Default configuration for shims that enables import.meta.url in CommonJS modules while disabling __filename, __dirname, and require shims in ESM modules by default.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/zh/config/lib/shims.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst defaultShims = {\n  cjs: {\n    'import.meta.url': true,\n  },\n  esm: {\n    __filename: false,\n    __dirname: false,\n    require: false,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Example Source and Transformed CommonJS Code for import.meta.url\nDESCRIPTION: Demonstrates how import.meta.url is transformed when shims.cjs['import.meta.url'] is true, showing the source code and the resulting CommonJS output.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/zh/config/lib/shims.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { readFileSync } from 'fs';\nconst buffer = readFileSync(new URL('./data.proto', import.meta.url));\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { readFileSync } = require('fs');\nconst buffer = readFileSync(\n  new URL(\n    './data.proto',\n    /*#__PURE__*/ (function () {\n      return typeof document === 'undefined'\n        ? new (module.require('url'.replace('', '')).URL)(\n            'file:' + __filename,\n          ).href\n        : (document.currentScript && document.currentScript.src) ||\n            new URL('main.js', document.baseURI).href;\n    })(),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Transformed CJS Output with import.meta.url Shim\nDESCRIPTION: Transformed CommonJS output when import.meta.url shim is enabled, showing how the URL is resolved for both Node.js and browser environments.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/config/lib/shims.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { readFileSync } = require('fs');\nconst buffer = readFileSync(\n  new URL(\n    './data.proto',\n    /*#__PURE__*/ (function () {\n      return typeof document === 'undefined'\n        ? new (module.require('url'.replace('', '')).URL)(\n            'file:' + __filename,\n          ).href\n        : (document.currentScript && document.currentScript.src) ||\n            new URL('main.js', document.baseURI).href;\n    })(),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Referencing Preset Types in Rslib TypeScript Projects\nDESCRIPTION: This snippet shows how to reference preset types provided by @rslib/core in a TypeScript project, including types for CSS Modules, static assets, and import.meta.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/zh/guide/basic/typescript.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"@rslib/core/types\" />\n```\n\n----------------------------------------\n\nTITLE: Transformed ESM Output with __dirname Shim\nDESCRIPTION: Transformed ESM output when __dirname shim is enabled, showing how the directory name is derived from import.meta.url.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/config/lib/shims.mdx#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { fileURLToPath as __webpack_fileURLToPath__ } from 'url';\nimport { dirname as __webpack_dirname__ } from 'path';\nvar src_dirname = __webpack_dirname__(\n  __webpack_fileURLToPath__(import.meta.url),\n);\nconsole.log(src_dirname);\n```\n\n----------------------------------------\n\nTITLE: Basic Bundle Mode Configuration in Rslib\nDESCRIPTION: Configuration example for bundle mode in Rslib, setting the format to CommonJS and enabling bundling.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/zh/config/lib/bundle.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  lib: [\n    {\n      format: 'cjs',\n      bundle: true,\n    },\n  ],\n  source: {\n    entry: {\n      index: './foo/index.ts',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Output of CSS Asset Import\nDESCRIPTION: This snippet shows the transformed output of an asset import in a CSS file. It demonstrates how Rslib adjusts the asset path in the build process.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/en/guide/advanced/static-assets.mdx#2025-04-21_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n.logo {\n  background-image: url('./static/image/logo.png');\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Storybook for Module Federation Development\nDESCRIPTION: Command to start Storybook for developing and testing Module Federation components. This is an alternative to using a host app and provides a component development environment.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/examples/module-federation/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev:storybook\n```\n\n----------------------------------------\n\nTITLE: Describing Express Plugin Example in Markdown\nDESCRIPTION: This Markdown snippet introduces an example project that demonstrates how to use Rslib to build a simple Node.js package, specifically an Express plugin. It serves as a README or documentation for the example, providing a brief overview of the project's purpose.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/examples/express-plugin/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# @examples/express-plugin\n\nThis example demonstrates how to use Rslib to build a simple Node.js package.\n```\n\n----------------------------------------\n\nTITLE: Getting Started with Module Federation Remote Module Commands in Bash\nDESCRIPTION: Basic command-line instructions for developing, building, and previewing the Module Federation remote module. Includes commands for starting the development server, creating production builds, and previewing builds locally.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/examples/module-federation/mf-remote/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm build\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm preview\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests\nDESCRIPTION: Commands for running integration tests, including filtering by keywords in file paths or test names.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/CONTRIBUTING.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npnpm run test:integration\n```\n\n----------------------------------------\n\nTITLE: Custom Dictionary Word List\nDESCRIPTION: A comprehensive list of technical terms and package names used in the project, including build tools, file formats, and technical concepts.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/scripts/dictionary.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nantd\napng\napplescript\natrules\nautodocs\nbiomejs\nbrotli\nbrowserslistrc\nbundleless\ncaniuse\nCEHQ\nchunkhash\nChunktmp\ncjsx\nclassname\ncodegen\ncodesandbox\ncodspeed\ncompat\nconsolas\ncontentful\ncorejs\ncorepack\ncraco\ncrossorigin\nctsx\ndatauri\ndedupe\ndeepmerge\ndistpath\ndocgen\ndogfooding\ndorny\nenvinfo\nestree\nfacti\nfilenaming\nflac\nflexbox\nflexbugs\nfnames\nfrontends\nfullhash\ngzipped\nicss\nidents\niife\nimagex\nimportee\njfif\njiti\njscpuprofile\njsesc\njsxs\nkoppers\nlightningcss\nliyincode\nlongpaths\nmanypkg\nmattcompiles\nmemfs\nmenlo\nmetafile\nmicrofrontend\nmicrofrontends\nmjsx\nmodularly\nmtsx\nnapi\nnodenext\nnolyfill\nnpmjs\nntqry\nonclosetag\nonopentag\nontext\nosascript\noutbase\noutro\npageerror\npathinfo\npcss\nperfetto\npicocolors\npjpeg\npluggable\npmmmwh\npnpx\npostcssrc\npreact\nprebundle\npreflights\nprefresh\npreprocessors\npublint\npxtorem\nquxx\nrebranded\nrolldown\nrootdir\nrsbuild\nrsdoctor\nrsfamily\nrslib\nrslog\nrspack\nrspress\nrstack\nselfsign\nselfsigned\nsirv\nsokra\nspeedscope\nsrcset\nstacktracey\nstyl\nstylex\nsubdir\nsubpage\nsubresource\nsubresources\nsvgr\nswcrc\nsystemjs\ntailwindcss\ntaze\ntemplating\ntinyglobby\ntranspiling\ntreeshaking\ntsbuildinfo\ntsconfck\ntsdoc\ntsup\nunencapsulated\nunocss\nunpatch\nunplugin\nunpredictibly\nunshift\nunstubAllEnvs\nupath\nvitest\nvnode\nwatchpack\nwebm\nwebp\n```\n\n----------------------------------------\n\nTITLE: Adding Dev Script for Module Federation in package.json\nDESCRIPTION: This snippet shows how to add a dev script in the package.json file to start the Module Federation development mode for Rslib.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/website/docs/zh/guide/advanced/module-federation.mdx#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"rslib mf-dev\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DependencyMode Enum in Rust\nDESCRIPTION: Defines an enum 'DependencyMode' with variants Normal and Development, representing different dependency types in package management.\nSOURCE: https://github.com/web-infra-dev/rslib/blob/main/tests/integration/copy/temp-3/b.txt#2025-04-21_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\n#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, Serialize, Deserialize)]\npub enum DependencyMode {\n    Normal,\n    Development,\n}\n```"
  }
]