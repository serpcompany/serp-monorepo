[
  {
    "owner": "shortlink-org",
    "repo": "shortlink",
    "content": "TITLE: Implementing a Saga Transaction Manager with Shortlink Saga in Go\nDESCRIPTION: This Go example demonstrates creating a multi-step saga for adding a link within a service using the Shortlink saga pattern implementation. The workflow initializes a saga's context, defines sequential and dependent steps (saving the link, fetching metadata, and sending notifications), and sets up rejection handlers for rollback. Dependencies include the \\\"github.com/shortlink-org/shortlink/pkg/pattern/saga\\\" package, a Store implementation for link management, and functional handlers for business logic steps. The input consists of a context and a Link object, while the output is an error if any step fails; saga options like logging and goroutine limits can be set as needed.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/pkg/pattern/saga/README.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\\n\\nimport (\\n\\t\\\"context\\\"\\n\\t\\n  \\\"github.com/shortlink-org/shortlink/pkg/pattern/saga\\\"\\n)\\n\\nfunc (l *linkUseCase) addLinkSaga(ctx, link link.Link) error {\\n\\tconst SAGA_NAME = \\\"Add link\\\"\\n\\tconst SAGA_STEP_SAVE_LINK = \\\"Save link in store\\\"\\n\\tconst SAGA_STEP_GET_METADATA = \\\"Get metadata by link\\\"\\n\\n  // create a new saga for add link\\n  sagaAddLink, errs := saga.\\n    New(SAGA_NAME).   // name saga\\n    WithContext(ctx). // ctx for tracing\\n    Build()\\n  \\n  if len(errs) > 0 {\\n    // check err...\\n  }\\n  \\n  // step: save to store\\n  _, err = saga.AddStep(SAGA_STEP_SAVE_LINK).\\n    Then(func(context.Context) error {\\n      err := l.Store.Add(link)\\n      return err\\n    }).\\n    Reject(func(context.Context, thenErr error) error {\\n      err := l.Store.Delete(link)\\n      return err\\n    }).\\n    Build()\\n  \\n  if len(errs) > 0 {\\n    // check err...\\n  }\\n\\n  // step: get metadata\\n  saga.AddStep(SAGA_STEP_GET_METADATA).\\n    Then(addFunc).\\n    Reject(cancelAddFunc)\\n\\n  // step: send notify\\n  saga.AddStep(\\\"send notify\\\").\\n    Needs(SAGA_STEP_SAVE_LINK, SAGA_STEP_GET_METADATA).\\n    Then(youNotifyFunc)\\n  \\n  // Run saga\\n  err := sagaAddLink.Play(nil)\\n  return err\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Using Batch Processing with shortlink-org in Go\nDESCRIPTION: This Go code snippet demonstrates how to set up and use the shortlink-org batch processing package. It includes defining a batch callback function for processing items, configuring batch size and flush intervals, handling errors via a channel, pushing items for processing, and managing concurrent item result handling. Dependencies include the shortlink-org/shortlink/pkg/batch package and the Go standard library. Input is a stream of string items, output is processed results sent over channels, and the batching process is both concurrency-safe and cancelable via a context. The code illustrates key patterns such as asynchronous error handling and context-driven shutdown, but assumes that batch.New and related methods exist and conform to the described API.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/pkg/batch/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\\n\\nimport (\\n\\t\\\"context\\\"\\n\\t\\\"fmt\\\"\\n\\t\\\"time\\\"\\n\\n  \\\"github.com/shortlink-org/shortlink/pkg/batch\\\"\\n)\\n\\nfunc main() {\\n  ctx, cancel := context.WithCancel(context.Background())\\n  defer cancel()\\n\\n  // Define the callback function to process a batch of items.\\n  callback := func(items []*batch.Item[string]) error {\\n    for _, item := range items {\\n      // Simulate processing work.\\n      time.Sleep(10 * time.Millisecond)\\n      item.CallbackChannel <- item.Item + \\\" processed\\\"\\n      close(item.CallbackChannel)\\n    }\\n    \\n    return nil\\n  }\\n\\n  // Create a new batch processor with custom options.\\n  // Note: New returns an error channel to report callback errors.\\n  b, errChan := batch.New(ctx, callback, batch.WithSize[string](5), batch.WithInterval[string](time.Second))\\n\\n  // Process errors from the error channel.\\n  go func() {\\n    for err := range errChan {\\n      fmt.Println(\\\"Error:\\\", err)\\n    }\\n  }()\\n\\n  // Push items into the batch processor.\\n  for i := 0; i < 20; i++ {\\n    resChan := b.Push(fmt.Sprintf(\\\"Item %d\\\", i))\\n    \\n    go func(ch chan string) {\\n      if result, ok := <-ch; ok {\\n        fmt.Println(result)\\n      } else {\\n        fmt.Println(\\\"Channel closed before processing\\\")\\n      }\\n    }(resChan)\\n  }\\n\\n  // Wait to ensure all items are processed.\\n  time.Sleep(2 * time.Second)\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Log Event Format - JSON\nDESCRIPTION: This snippet specifies the recommended structure for a log entry using JSON. It includes fields such as log level, message, timestamp (formatted according to RFC3339Nano), caller details, and trace identifier. The format is intended for use with distributed tracing, and fields like level enforce strict enumerated values. There are no third-party dependencies required to generate this object, but logging libraries must serialize logs following this format for consistency.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/docs/ADR/decisions/0010-logger-format.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"level\": \"info\",\n  \"msg\": \"message\",\n  \"timestamp\": \"2006-01-02T15:04:05.999999999Z07:00\",\n  \"caller\": \"main.go:42\",\n  \"trace_id\": \"trace_id\"\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Permission Schemas to SpiceDB Using Go\nDESCRIPTION: This Go snippet demonstrates using the 'auth.Migrations' function to apply embedded permission schema files to a SpiceDB server via the Authzed API. It retrieves all \\\".zed\\\" schema files, migrates them, and logs a fatal error if the operation fails. The function reads its configuration (API timeout and shared key) from the environment variables 'SPICE_DB_TIMEOUT' and 'SPICE_DB_COMMON_KEY'. Inputs include the execution context and relevant environment variables; output is nil on success or an error on failure. Requires the Go 'context' and 'log' packages, and the custom 'auth' package.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/pkg/auth/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nerr := auth.Migrations(context.Background())\nif err != nil {\n    log.Fatalf(\"Failed to migrate permissions: %v\", err)\n}\n```\n\n----------------------------------------\n\nTITLE: Using PartMap for Concurrent Map Operations in Go\nDESCRIPTION: This Go code demonstrates how to initialize and use the PartMap concurrent map, including setting, retrieving, and deleting values. It requires the PartMap package (\\\"github.com/shortlink-org/shortlink/pkg/types/partmap\\\") and a partitioner implementation such as hashSumPartitioner. The parameters include the partitioner configuration and initial capacity. Inputs include string keys and values, with outputs reflecting success or fail on operations. Proper error handling is demonstrated for initialization failures. The example shows typical CRUD operations on the concurrent map.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/pkg/types/partmap/README.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\\n\\nimport (\\n  \\\"fmt\\\"\\n  \\\"log\\\"\\n\\n  \\\"github.com/shortlink-org/shortlink/pkg/types/partmap\\\"\\n)\\n\\nfunc main() {\\n  m, err := partmap.New(&hashSumPartitioner{1000}, 1000)\\n  if err != nil {\\n    log.Fatalf(\\\"Failed to create PartMap: %v\\\", err)\\n  }\\n\\n  // Set a value\\n  m.Set(\\\"key1\\\", \\\"value1\\\")\\n\\n  // Get a value\\n  if val, ok := m.Get(\\\"key1\\\"); ok {\\n      fmt.Println(\\\"Value:\\\", val)\\n  }\\n\\n  // Delete a value\\n  m.Delete(\\\"key1\\\")\\n\\n  // Get the length\\n  fmt.Println(\\\"Length:\\\", m.Len())\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes Network Topology with PlantUML (PlantUML)\nDESCRIPTION: This PlantUML snippet visually documents the network topology in a Kubernetes cluster, showcasing node roles, Cilium pods, Istio, ingress, and API gateways. It includes necessary dependencies via remote includes for Kubernetes and C4 PlantUML libraries, enabling detailed real-world cloud-native diagrams. Node-to-pod mappings, inter-node connections, and key networking entry points (NGINX Ingress and Gateway API) are explicitly represented; relationships clarify data and control flows within the cluster, with color coding for quick role identification. To render this UML, PlantUML with Internet access is required for fetching the .puml includes; knowledge of Kubernetes resource relationships will help interpret the diagram. Input consists only of architecture definitions, and the output is a diagram visualizing both physical and logical networking structure.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/ops/docs/ADR/decisions/0031-k8s-network.md#_snippet_0\n\nLANGUAGE: plantuml\nCODE:\n```\n@startuml k8s_nodes_network\\n\\n' Define KubernetesPuml for URL inclusion\\n!define KubernetesPuml https://raw.githubusercontent.com/dcasati/kubernetes-PlantUML/master/dist\\n\\n' Include common Kubernetes components\\n!includeurl KubernetesPuml/kubernetes_Common.puml\\n!includeurl KubernetesPuml/kubernetes_Context.puml\\n\\n' Include specific components for nodes and Cilium\\n!includeurl KubernetesPuml/OSS/KubernetesNode.puml\\n!includeurl KubernetesPuml/OSS/KubernetesPod.puml\\n!includeurl KubernetesPuml/OSS/KubernetesSvc.puml\\n\\n' Include C4 model\\n!includeurl https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml\\n\\nskinparam backgroundColor #FEFEFE\\nskinparam handwritten false\\n\\nleft to right direction\\n\\n' Define simple blocks for Kubernetes Ingress and Gateway API\\nrectangle \"NGINX Ingress\" as nginx_ingress #98FB98\\nrectangle \"Gateway API\" as gateway_api #FF69B4\\n\\n' Define C4 Context\\nLAYOUT_TOP_DOWN()\\n\\nSystem_Boundary(k8s_cluster, \"K8s Cluster\") {\\n    ' Define Nodes\\n    KubernetesNode(talos_bxi_ihe, \"talos-bxi-ihe\\\\nStatus: Ready\\\\nRoles: <none>\\\\nAge: 78d\\\\nVersion: v1.30.3\", \"#ffcccc\")\\n    KubernetesNode(talos_coj_emd, \"talos-coj-emd\\\\nStatus: Ready\\\\nRoles: <none>\\\\nAge: 78d\\\\nVersion: v1.30.3\", \"#ccffcc\")\\n    KubernetesNode(talos_dks_th8, \"talos-dks-th8\\\\nStatus: Ready\\\\nRoles: <none>\\\\nAge: 78d\\\\nVersion: v1.30.3\", \"#ccccff\")\\n    KubernetesNode(talos_t8v_b87, \"talos-t8v-b87\\\\nStatus: Ready\\\\nRoles: control-plane\\\\nAge: 78d\\\\nVersion: v1.30.3\", \"#ffcc00\")\\n    \\n    ' Define Cilium pods\\n    KubernetesPod(cilium_pod1, \"cilium-pod1\", \"#ffd700\")\\n    KubernetesPod(cilium_pod2, \"cilium-pod2\", \"#ffd700\")\\n    KubernetesPod(cilium_pod3, \"cilium-pod3\", \"#ffd700\")\\n    KubernetesPod(cilium_pod4, \"cilium-pod4\", \"#ffd700\")\\n    \\n    ' Define Istio\\n    KubernetesPod(istio_pod, \"Istio Pod\", \"#87CEEB\")\\n    \\n    ' Define Networking\\n    Rel(talos_bxi_ihe, cilium_pod1, \"Network with Cilium\")\\n    Rel(talos_coj_emd, cilium_pod2, \"Network with Cilium\")\\n    Rel(talos_dks_th8, cilium_pod3, \"Network with Cilium\")\\n    Rel(talos_t8v_b87, cilium_pod4, \"Network with Cilium\")\\n\\n    ' Network connections between nodes\\n    Rel_Left(talos_bxi_ihe, talos_coj_emd, \"Inter-node Network\")\\n    Rel_Left(talos_coj_emd, talos_dks_th8, \"Inter-node Network\")\\n    Rel_Left(talos_dks_th8, talos_t8v_b87, \"Inter-node Network\")\\n    \\n    ' Define Relationships for Istio, NGINX Ingress, and Gateway API\\n    Rel(istio_pod, nginx_ingress, \"Ingress Traffic\")\\n    Rel(istio_pod, gateway_api, \"Gateway Traffic\")\\n}\\n\\n@enduml\n```\n\n----------------------------------------\n\nTITLE: Querying Lock Information and Blocking PIDs in PostgreSQL\nDESCRIPTION: SQL query that identifies lock chains and blocking processes in PostgreSQL. The query combines information from pg_locks and pg_stat_activity to show detailed lock information, blocking PIDs, and query details. It helps diagnose lock-related performance issues and deadlocks.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/ops/docs/ADR/decisions/0009-postgres-tips.md#_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nWITH sos AS (\n\tSELECT array_cat(array_agg(pid),\n           array_agg((pg_blocking_pids(pid))[array_length(pg_blocking_pids(pid),1)])) pids\n\tFROM pg_locks\n\tWHERE NOT granted\n)\nSELECT a.pid, a.usename, a.datname, a.state,\n\t   a.wait_event_type || ': ' || a.wait_event AS wait_event,\n       current_timestamp-a.state_change time_in_state,\n       current_timestamp-a.xact_start time_in_xact,\n       l.relation::regclass relname,\n       l.locktype, l.mode, l.page, l.tuple,\n       pg_blocking_pids(l.pid) blocking_pids,\n       (pg_blocking_pids(l.pid))[array_length(pg_blocking_pids(l.pid),1)] last_session,\n       coalesce((pg_blocking_pids(l.pid))[1]||'.'||coalesce(case when locktype='transactionid' then 1 else array_length(pg_blocking_pids(l.pid),1)+1 end,0),a.pid||'.0') lock_depth,\n       a.query\nFROM pg_stat_activity a\n     JOIN sos s on (a.pid = any(s.pids))\n     LEFT OUTER JOIN pg_locks l on (a.pid = l.pid and not l.granted)\nORDER BY lock_depth;\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up PostgreSQL Test Data with Sysbench TPCC - Shell\nDESCRIPTION: This shell script cleans up the PostgreSQL database after benchmark tests by removing tables and data created for the TPCC workload. It depends on the database and initial test configuration remaining unchanged. Main parameters are similar to previous commands but without certain options. The cleanup operation is crucial to restore the environment post-benchmark.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/ops/docker-compose/database/postgres/BENCHMARK.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n```shell\n./tpcc.lua \\\n  --pgsql-host=localhost \\\n  --pgsql-port=5432 \\\n  --pgsql-user=postgres \\\n  --pgsql-password=shortlink \\\n  --pgsql-db=shortlink \\\n  --threads=2 \\\n  --tables=10 \\\n  --scale=100 \\\n  --trx_level=RC \\\n  --db-driver=pgsql \\\n  cleanup\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Graceful Shutdown with Context in Go\nDESCRIPTION: Demonstrates how to properly implement graceful shutdown for database connections using context with timeout. Sets a 5-second timeout for cleanup operations.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/pkg/db/README.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\ndefer cancel()\n// Utilize ctx in your database tasks\n```\n\n----------------------------------------\n\nTITLE: Setting Statement Timeout in PostgreSQL - SQL\nDESCRIPTION: This code sets the statement timeout for all queries on a specific database in PostgreSQL to 60 seconds ('60s'). Use this to ensure long-running queries do not consume excessive resources or block other operations. The command requires `ALTER` privileges on the target database, and the setting will apply to new sessions on 'mydatabase'. Input: the target database name. Output: alters session behavior for query timeout; limitations include not affecting existing sessions and requiring sufficient privileges.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/ops/docs/ADR/decisions/0005-postgres-optimization.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Set timeout (in seconds) before a query cancels:\nALTER DATABASE mydatabase SET statement_timeout = '60s';\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Role Variables with YAML\nDESCRIPTION: This YAML snippet lists configurable variables for managing Docker installation with Ansible, including Docker edition, package state, service behaviors, Compose installation, repository URLs, and user/group settings. These variables allow customization for Linux distributions like Debian/Ubuntu or RHEL/CentOS, with flexibility for version selection, group membership, and Docker daemon options. Inputs are variable keys and values, affecting how the Docker software and related services are installed, enabled, and configured during provisioning.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/ops/ansible/playbooks/roles/geerlingguy.docker/README.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Edition can be one of: 'ce' (Community Edition) or 'ee' (Enterprise Edition).\ndocker_edition: 'ce'\ndocker_package: \"docker-{{ docker_edition }}\"\ndocker_package_state: present\n\ndocker_service_state: started\ndocker_service_enabled: true\ndocker_restart_handler_state: restarted\n\ndocker_install_compose: true\ndocker_compose_version: \"1.26.0\"\ndocker_compose_arch: x86_64\ndocker_compose_path: /usr/local/bin/docker-compose\n\ndocker_repo_url: https://download.docker.com/linux\n\ndocker_apt_release_channel: stable\ndocker_apt_arch: amd64\ndocker_apt_repository: \"deb [arch={{ docker_apt_arch }}] {{ docker_repo_url }}/{{ ansible_distribution | lower }} {{ ansible_distribution_release }} {{ docker_apt_release_channel }}\"\ndocker_apt_ignore_key_error: True\ndocker_apt_gpg_key: \"{{ docker_repo_url }}/{{ ansible_distribution | lower }}/gpg\"\n\ndocker_yum_repo_url: \"{{ docker_repo_url }}/{{ (ansible_distribution == 'Fedora') | ternary('fedora','centos') }}/docker-{{ docker_edition }}.repo\"docker_edition }}.repo\ndocker_yum_repo_enable_nightly: '0'\ndocker_yum_repo_enable_test: '0'\ndocker_yum_gpg_key: \"{{ docker_repo_url }}/centos/gpg\"\n\ndocker_users:\n  - user1\n  - user2\n\ndocker_daemon_options:\n  storage-driver: \"devicemapper\"\n  log-opts:\n    max-size: \"100m\"\n\n```\n\n----------------------------------------\n\nTITLE: Installing Roles and Running Playbooks with Ansible in Shell\nDESCRIPTION: This shell snippet demonstrates how to install Ansible Galaxy roles as defined in 'requirements.yml', then execute the main playbook 'playbooks/playbook.yml' to configure target infrastructure. 'ansible-galaxy install' handles dependency resolution while 'ansible-playbook' applies configuration to hosts. Requires Ansible and access to the specified playbook and requirements files. Inputs are paths to the requirement and playbook files; output is infrastructure provisioning per playbook tasks.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/ops/ansible/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nansible-galaxy install -r requirements.yml\\nansible-playbook playbooks/playbook.yml\n```\n\n----------------------------------------\n\nTITLE: Initializing Cache Client in Go\nDESCRIPTION: Demonstrates how to create a new instance of the cache client using the New function with proper error handling.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/pkg/cache/README.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nctx := context.Background()\ncacheClient, err := cache.New(ctx)\nif err != nil {\n    log.Fatal(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Microservice Directory Structure - Markdown\nDESCRIPTION: This Markdown-formatted code snippet presents a representative filesystem tree for organizing microservices, covering Docker, Helm, GitLab CI, application boundaries, and documentation conventions. It serves as a template for teams to implement the prescribed structure, ensuring all critical infrastructure, application logic, and documentation files are consistently placed. No dependencies are required for viewing this structure; it is meant for informational and planning purposes only, and actual implementation must create these directories and files as outlined.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/docs/ADR/decisions/0021-microservice-structure.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\n├── ops/dockerfile/{{serviceName}}.Dockerfile\n├── ops/docker-compose/application/{{serviceName}}/{{serviceName}}.yml\n├── ops/Helm/{{boundary context}}/{{serviceName}}/Chart.yaml\n├── .gitlab/ci/workflows/matrix_build_base.yml\n├── .gitlab/ci/workflows/matrix_build_helm.yml\n├── ops/argocd/boundaries/{{boundary context}}/{{serviceName}}/application.yaml\n└── boundaries/{{serviceName}}\n    ├── application/\n    ├── docs/\n    │   └── ADR/\n    │       └── decisions/\n    │           └── 0001-init.md\n    ├── cmd/\n    ├── di/\n    ├── domain/\n    ├── infrastructure/\n    ├── tests/\n    ├── Makefile\n    └── README.md\n```\n```\n\n----------------------------------------\n\nTITLE: Example Ansible Playbook for Pip Installation\nDESCRIPTION: This playbook demonstrates how to use the Pip role in an Ansible playbook. It specifies the hosts, defines variables for package installation, and includes the role.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/ops/ansible/playbooks/roles/geerlingguy.pip/README.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- hosts: all\n\n  vars:\n    pip_install_packages:\n      - name: docker\n      - name: awscli\n\n  roles:\n    - geerlingguy.pip\n```\n\n----------------------------------------\n\nTITLE: Configuring protoc-gen-rich-model Plugin with buf - YAML\nDESCRIPTION: This YAML configuration snippet demonstrates how to use the protoc-gen-rich-model plugin within a buf build pipeline. It specifies plugin options such as output path, generation strategy, and filters to control which message types (e.g., Link, Links) are processed. This requires buf and the plugin to be installed; expected output is generated Go structs in the specified directory.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/pkg/protoc/protoc-gen-rich-model/README.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: v1\n\nmanaged:\n  enabled: true\n\nplugins:\n  - plugin: rich-model\n    strategy: all\n    out: boundaries/link/link\n    opt:\n      - \"paths=source_relative\"\n      - \"filter=Link;Links\"\n```\n\n----------------------------------------\n\nTITLE: Migrating from npm to pnpm in Local Development\nDESCRIPTION: Commands to switch from npm to pnpm in local development environments and Dockerfiles. This involves installing pnpm globally, removing existing node_modules and package-lock.json, and reinstalling dependencies with pnpm.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/docs/ADR/decisions/0031-js-package-manager.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -g pnpm\nrm -rf node_modules\npnpm install\nrm -rf package-lock.json\n```\n\n----------------------------------------\n\nTITLE: Deleting Cache Values in Go\nDESCRIPTION: Shows how to remove values from the cache using the Delete function.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/pkg/cache/README.md#_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nerr := cacheClient.Delete(ctx, \"key1\")\n```\n\n----------------------------------------\n\nTITLE: Running Node.js Script for Kubernetes Secret Extraction (Bash)\nDESCRIPTION: This Bash snippet demonstrates how to run a Node.js script that fetches a specific secret value from a Kubernetes cluster and writes it to a .env file. It requires Node.js, npm, and Kubernetes access with permissions for secrets. Replace the placeholder parameters (namespace, secret, key, and envKey) with your actual values. The script optionally allows specifying the .env file path. Output is written to a .env file in the current directory by default.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/pkg/k8s/kube-secret-fetcher/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start -- --namespace <namespace> --secret <secret-name> --key <key> --envKey <envKey>\n```\n\n----------------------------------------\n\nTITLE: Enabling pnpm in CI Environments\nDESCRIPTION: Commands to enable pnpm in Continuous Integration environments using corepack. This approach prepares and activates the latest version of pnpm (v8) without requiring global installation.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/docs/ADR/decisions/0031-js-package-manager.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncorepack enable\ncorepack prepare pnpm@latest-8 --activate\n```\n\n----------------------------------------\n\nTITLE: Collecting and Applying PGO Profiles with Go Toolchain - Bash\nDESCRIPTION: This snippet demonstrates a typical workflow for collecting CPU profiles with pprof, merging multiple profiles, and building a Go application using PGO data for optimization. Dependencies include a running Go application with pprof endpoints exposed, the Go toolchain (go tool pprof), and access to the build environment. The commands fetch a profile from a locally running application, combine profile data into a PGO-compatible format, and build the application with profile-guided optimizations enabled. Inputs are pprof profile files, and outputs are an optimized binary and merged profile file; the commands must be run in a shell with appropriate permissions.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/docs/ADR/decisions/0017-profile-guided-optimization.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Get profile\\n$> curl -s  http://localhost:7071/debug/pprof/profile\\?seconds\\=30 > ./cpu.out\\n# Merging profiles\\n$> go tool pprof -proto a.pprof b.pprof > default.pgo\\n# Build\\n$> go build -o app -pgo=auto ./boundaries/api/api-gateway/cmd/api.go\n```\n\n----------------------------------------\n\nTITLE: Enforcing a Private Setter Method in Go\nDESCRIPTION: Provides a compliant example where a Go value object struct defines a private setter method, following immutability best practices enforced by the plugin. No dependencies are needed. The setValue method is only accessible within the same package, ensuring encapsulation of state changes.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/pkg/golangci-lint/value-object/README.md#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage example\n\ntype ValueObject struct {\n    value int\n}\n\n// Private setter method - follows best practices\nfunc (v *ValueObject) setValue(val int) {\n    v.value = val\n}\n```\n\n----------------------------------------\n\nTITLE: Formula for Calculating Average Response Time with Caching\nDESCRIPTION: This formula calculates the average response time based on database access time, cache miss rate, and cache access time. It helps evaluate the effectiveness of a caching implementation by showing how response time is affected by cache performance.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/docs/ADR/decisions/0022-cache.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nAverageTime = DBAccessTime * CacheMissRate + CacheAccessTime\n```\n\n----------------------------------------\n\nTITLE: Defining Event Naming Constants for MQ Events in Go\nDESCRIPTION: This Go code snippet defines constants for Message Queue (MQ) event topic names, following the prescribed event naming convention (e.g., \\\"shortlink.link.event.new\\\"). The constants MQ_EVENT_LINK_NEW and MQ_EVENT_LINK_CREATED can be referenced throughout the codebase to subscribe to or publish related events, ensuring consistency. No external dependencies are required, and the constants should be used as topics for event-driven messaging mechanisms.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/docs/ADR/decisions/0002-implement-as-event-naming.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// MQ events\\nconst (\\n\\t// MQ_EVENT_LINK_NEW - subscribe on request created link\\n\\tMQ_EVENT_LINK_NEW = \\\"shortlink.link.event.new\\\"\\n\\n\\t// MQ_EVENT_LINK_CREATED - subscribe on created link\\n\\tMQ_EVENT_LINK_CREATED = \\\"shortlink.link.event.created\\\"\\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Environment and Git Submodules - Shell\nDESCRIPTION: These shell snippets guide contributors to initialize Git submodules and set up the required environment configuration. The instructions assume the presence of a .env.example file and require Git installation. \"git submodule update --init --recursive\" ensures all submodules are fetched, and \"cp .env.example .env\" creates the environment configuration file for local use. No special parameters are required, and the commands should be run in the project root. The commands must be executed before launching or building the project.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Install GIT sub-repository\\ngit submodule update --init --recursive\\n\\n# Setting up the environment\\ncp .env.example .env\n```\n\n----------------------------------------\n\nTITLE: Configuring Pip Package Installation in YAML\nDESCRIPTION: This YAML structure defines a list of packages to be installed via Pip. It demonstrates various options including specifying versions, installing the latest release, uninstalling packages, updating to the latest version, forcing reinstallation, and installing in a specific virtualenv.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/ops/ansible/playbooks/roles/geerlingguy.pip/README.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npip_install_packages:\n  # Specify names and versions.\n  - name: docker\n    version: \"1.2.3\"\n  - name: awscli\n    version: \"1.11.91\"\n\n  # Or specify bare packages to get the latest release.\n  - docker\n  - awscli\n\n  # Or uninstall a package.\n  - name: docker\n    state: absent\n\n  # Or update a package to the latest version.\n  - name: docker\n    state: latest\n\n  # Or force a reinstall.\n  - name: docker\n    state: forcereinstall\n\n  # Or install a package in a particular virtualenv.\n  - name: docker\n    virtualenv: /my_app/venv\n```\n\n----------------------------------------\n\nTITLE: Managing Minikube/Kubernetes Services with Make - Shell\nDESCRIPTION: These Make-based shell snippets provide commands for launching and managing the Shortlink stack on Minikube/Kubernetes. \"make minikube-up\" and \"make helm-shortlink-up\" bring up the required Kubernetes infrastructure; \"make minikube-down\" tears down all resources. Prerequisites include Minikube (v1.28+), Kubernetes, and Helm installed locally. These commands simplify development/testing in a Kubernetes environment and are executed from the repo root.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmake minikube-up\\nmake helm-shortlink-up\n```\n\nLANGUAGE: shell\nCODE:\n```\nmake minikube-down\n```\n\n----------------------------------------\n\nTITLE: Running and Stopping Services with Make and Docker Compose - Shell\nDESCRIPTION: These shell snippets use Make commands to run or stop project services via Docker Compose. \"make run\" launches all services (many containers), while \"make dev\" runs only necessary containers. \"make down\" stops all running services. Docker and Docker Compose must be installed. No parameters required; run these from the repository root. Used for local or CI development and testing feedback loops.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Run all stack. WARNING: This command run a lot of containers\\nmake run\\n\\n# Run only the containers that are necessary scope of the project\\nmake dev\n```\n\nLANGUAGE: shell\nCODE:\n```\nmake down\n```\n\n----------------------------------------\n\nTITLE: Using geerlingguy.pip and geerlingguy.docker Roles with YAML\nDESCRIPTION: This YAML playbook demonstrates how to combine the installation of the Docker Python library via the geerlingguy.pip role with the geerlingguy.docker role on all hosts. It ensures that the Python 'docker' library is available for Ansible modules managing Docker after Docker itself is installed. Prerequisites include having both roles available in the Ansible environment. Inputs specify Python packages to install via pip, and roles to apply to all target hosts.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/ops/ansible/playbooks/roles/geerlingguy.docker/README.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- hosts: all\n\n  vars:\n    pip_install_packages:\n      - name: docker\n\n  roles:\n    - geerlingguy.pip\n    - geerlingguy.docker\n\n```\n\n----------------------------------------\n\nTITLE: Provisioning Environment with Vagrant and Applying Ansible Playbooks in Shell\nDESCRIPTION: This snippet provides a sequence to initialize a Vagrant-based environment by bringing up virtual machines from the 'ops/vagrant' directory, then changes directory to 'ops/ansible' and applies an Ansible playbook to the Vagrant infrastructure. It requires Vagrant, Ansible, and the playbook file. The workflow enables repeated and automated provisioning and configuration of a development or test environment. Outputs include bootstrapped VMs with Ansible-managed configurations.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/ops/ansible/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd ops/vagrant\\nvagrant up\\n\\ncd ops/ansible\\nansible-playbook playbooks/playbook.yml\n```\n\n----------------------------------------\n\nTITLE: Using uber/goleak in TestMain for Goroutine Leak Detection\nDESCRIPTION: This code shows how to implement the uber/goleak package in a TestMain function to detect goroutine leaks in tests. The function verifies that no goroutines are leaked during test execution and then runs the tests.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/docs/ADR/decisions/0028-go-and-debug-concurrency.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc TestMain(m *testing.M) {\n  goleak.VerifyTestMain(m)\n\t\n\tos.Exit(m.Run())\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Validation Rules with CEL\nDESCRIPTION: Examples of Common Expression Language rules for validating object properties. The first rule ensures that replica counts are properly ordered, while the second validates that an object's name matches a specific value.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/poc/cel/README.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n# Validate that the three fields defining replicas are ordered appropriately\nself.minReplicas <= self.replicas && self.replicas <= self.maxReplicas\n\n# Validate that an object's name matches a specific value (making it a singleton)\nself.metadata.name == 'singleton'\n```\n\n----------------------------------------\n\nTITLE: Configuring Sidecar Resource in Istio with YAML\nDESCRIPTION: This YAML snippet defines a Sidecar resource in Istio, specifying a custom egress configuration for an entire namespace. It restricts outbound access to a defined set of hosts spanning the current namespace, Istio system, ingress, Prometheus Operator, and kube-system, thereby improving mesh security and efficiency. Required dependency is a running Istio installation; place in a Kubernetes manifest repository or apply directly with kubectl. Key parameters are 'apiVersion', 'kind', 'metadata.name', and 'spec.egress.hosts', which control resource identification and allowed destinations. Inputs are the targeted namespaces and hosts; output is an updated Sidecar configuration. Limitations include the need for regular updates and a solid understanding of service dependencies to avoid connectivity issues.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/ops/docs/ADR/decisions/0006-istio.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.istio.io/v1\\nkind: Sidecar\\nmetadata:\\n  name: default\\nspec:\\n  egress:\\n    - hosts:\\n      - \"./*\"                   # current namespace\\n      - \"istio-system/*\"        # istio-system services\\n      - \"istio-ingress/*\"       # istio-ingress services\\n      - \"prometheus-operator/*\" # prometheus-operator services\\n      - \"kube-system/*\"         # kube-system services\n```\n\n----------------------------------------\n\nTITLE: Example Playbook Usage for Ansible Role\nDESCRIPTION: Demonstrates how to include the role in an Ansible playbook. It shows the basic structure of using a role with a variable passed as a parameter.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/ops/ansible/playbooks/roles/ui-next/README.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- hosts: servers\n  roles:\n     - { role: username.rolename, x: 42 }\n```\n\n----------------------------------------\n\nTITLE: Updating package.json to Enforce pnpm Usage\nDESCRIPTION: Recommended package.json script configurations to enforce the use of pnpm and improve compatibility. The preinstall hook prevents the use of other package managers.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/docs/ADR/decisions/0031-js-package-manager.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n\"scripts\": {\n  \"build\": \"pnpm build\",\n  \"preinstall\": \"npx only-allow pnpm\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Stage, Multi-Platform Docker Build Cache - Dockerfile in YAML\nDESCRIPTION: This Dockerfile snippet, formatted in YAML-style markdown, demonstrates an optimized multi-stage build process for Node.js applications targeting multiple platforms. It uses environment variable-based logic for selecting the appropriate builder, separates dependency installation and artifact preparation, and utilizes build-time caching for efficient production image generation. Prerequisites include Docker with BuildKit support and proper environment variables (such as APP_ENV, BUILDPLATFORM) set in the CI pipeline. Input files include application packages and build artifacts, while outputs result in a production-ready image with static content served by an Nginx base. Constraints include ensuring all referenced stages and files exist, and the use of appropriate image tags.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/ops/docs/ADR/decisions/0010-docker-tips.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\n# Base stage: Install dependencies only when needed\nFROM --platform=$BUILDPLATFORM node:23.0.0-alpine AS development-builder\n\n# Development build stage: Copy over only necessary files for production\nFROM --platform=$BUILDPLATFORM development-builder AS cache\nCOPY --from=development-builder /app/packages/next/out /app/out\n\n# Cache stage: Prepare artifacts for production without additional dependencies.\nFROM --platform=$BUILDPLATFORM alpine:3.19 AS ci-builder\nFROM --platform=$BUILDPLATFORM ${APP_ENV}-builder AS cache\n\nCOPY ./boundaries/ui-monorepo/packages/next/out /app/out\n\n# Production image: use cache from development or CI layers\nFROM ghcr.io/nginxinc/nginx-unprivileged:1.25-alpine\nCOPY --from=cache /app/out ./next\n\n```\n\n----------------------------------------\n\nTITLE: Modeling Container Architecture with C4-PlantUML - PlantUML\nDESCRIPTION: This PlantUML code snippet produces a Container Diagram using C4-PlantUML, visualizing A/B Platform subsystems such as the Web UI, API, Database, and Metrics Collector, along with their interactions and external user roles. It requires the PlantUML engine and C4_Container.puml from the C4-PlantUML library. The code documents the technologies and relationships among platform containers, serving as system documentation and requiring no direct parameterization. Rendering these diagrams expects web access to the referenced include.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/boundaries/platform/ab_platform/docs/ADR/decisions/0003-c4-model.md#_snippet_1\n\nLANGUAGE: plantuml\nCODE:\n```\n@startuml\\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml\\n\\ntitle Container Diagram - A/B Platform\\n\\nPerson(user, \\\"Experiment Manager\\\")\\nSystem_Boundary(ab_platform, \\\"A/B Platform Monolith\\\") {\\n    Container(web_ui, \\\"Web UI\\\", \\\"React\\\", \\\"User interface for managing test cases and experiments\\\")\\n    Container(api, \\\"API\\\", \\\"Go\\\", \\\"API layer for handling experiment-related requests\\\")\\n    Container(db, \\\"Database\\\", \\\"PostgreSQL\\\", \\\"Stores test cases, variations, and results\\\")\\n    Container(metrics_collector, \\\"Metrics Collector\\\", \\\"Prometheus\\\", \\\"Collects and monitors performance metrics\\\")\\n}\\n\\nRel(user, web_ui, \\\"Interacts with\\\")\\nRel(web_ui, api, \\\"Submits test cases\\\")\\nRel(api, db, \\\"Reads and writes data\\\")\\nRel(api, metrics_collector, \\\"Sends experiment metrics\\\")\\n@enduml\n```\n\n----------------------------------------\n\nTITLE: Queue Structure Definition in Go\nDESCRIPTION: Defines a basic queue structure that holds a value and points to the next node. Includes comments explaining each field.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/pkg/types/README.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Queue struct {\n\tvalue interface{} // the value held by this node\n\tnext  *Queue    // the next node in the queue\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring Yarn for Backstage\nDESCRIPTION: Commands for enabling corepack, setting up yarn, installing dependencies, and updating packages interactively in a Backstage application.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/boundaries/platform/backstage/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n### install yarn\ncorepack enable\nyarn set version stable\nyarn install\n\n### update dependencies\nyarn upgrade-interactive\n```\n\n----------------------------------------\n\nTITLE: Benchmarking PartMap and Standard Map in Go\nDESCRIPTION: This shell code block shows raw benchmark output from Go, comparing concurrent write performance for standard maps, sync.Map, and partitioned maps (PartMap). There are no dependencies other than Go's benchmarking framework. The benchmarks measure throughput, memory usage, and allocation statistics in a multicore environment. It is expected to be run in a POSIX shell with a precompiled Go benchmark binary.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/pkg/types/partmap/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nBenchmarkStd\\nBenchmarkStd/set_std_concurrently\\nBenchmarkStd/set_std_concurrently-16         \\t 220958\\t      6605 ns/op\\t     322 B/op\\t       4 allocs/op\\nBenchmarkSyncStd\\nBenchmarkSyncStd/set_sync_map_std_concurrently\\nBenchmarkSyncStd/set_sync_map_std_concurrently-16         \\t 132684\\t     26067 ns/op\\t     506 B/op\\t      10 allocs/op\\nBenchmarkPartitioned\\nBenchmarkPartitioned/set_partitioned_concurrently\\nBenchmarkPartitioned/set_partitioned_concurrently-16      \\t 251509\\t      6586 ns/op\\t     329 B/op\\t       6 allocs/op\\n\n```\n\n----------------------------------------\n\nTITLE: Available shortctl Command-Line Options - Plaintext\nDESCRIPTION: This snippet lists the supported command-line options for the 'shortctl' tool, including description, short flags, and default values. It relies on parsing by the spf13/cobra framework and should be read as part of the command's autogenerated help output. Parameters include directory includer/excluder flags, help, and output file customization. The output is expected to conform to GNU-like CLI standards.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/boundaries/platform/shortctl/shortctl.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n      --exclude-dir string   Exclude directories (default \"vendor,node_modules,dist,ui\")\n  -h, --help                 help for shortctl\n      --include-dir string   Include directories (default \"cmd,internal,pkg\")\n      --o string             Output file path (default \"./docs/env.md\")\n```\n\n----------------------------------------\n\nTITLE: Installing Molecule Docker Driver using pip\nDESCRIPTION: Command to install Molecule with Docker driver support using pip package manager. The installation can be done in a virtual environment or with the --user flag for best practices.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/ops/ansible/playbooks/roles/ui-next/molecule/default/INSTALL.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install 'molecule[docker]'\n```\n\n----------------------------------------\n\nTITLE: Making API Requests to CEL Evaluation Endpoint\nDESCRIPTION: Example of how to use curl to send a POST request to a CEL evaluation endpoint. The request includes a rule identifier and JSON payload with claims and timestamp data for evaluation.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/poc/cel/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://localhost:8080/evaluate \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"rule\": \"jwt_audience.cel\",\n    \"claims\": {\n      \"exp\": 1234567890,\n      \"aud\": \"my-audience\"\n    },\n    \"now\": 1234567891\n  }'\n```\n\n----------------------------------------\n\nTITLE: Scheduling GitLab Backups via Cron and Docker - Bash\nDESCRIPTION: Automates the process of creating repository and configuration backups for GitLab. The first line triggers a full backup daily at 5:00 AM using `gitlab-rake`, while the second, at 6:00 AM, creates a tarball of the GitLab configuration folder with restricted permissions via `umask 0077`. Assumes docker, cron, and a running 'gitlab' container. Useful for disaster recovery and routine backup strategies.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/ops/docker-compose/tooling/saas/gitlab/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n0 5 * * * docker exec -t gitlab gitlab-rake gitlab:backup:create\n0 6 * * * docker exec -t gitlab /bin/sh -c 'umask 0077; tar cfz /var/opt/gitlab/backups/$(date \"+etc-gitlab-\\%s.tgz\") -C /etc/gitlab'\n```\n\n----------------------------------------\n\nTITLE: Defining Organizational Directory Structure\nDESCRIPTION: Demonstrates the recommended hierarchical structure for organizing projects, workspaces, and maintainer teams within a company's repository system. Shows how to organize projects into workspaces and separate maintainer teams by specialty.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/docs/ADR/decisions/0006-codeowner.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n- groupCompany\n  - project-workspace-1\n    - project-1\n    - project-2\n    - project-3\n  - project-workspace-N\n    - project-1\n    - project-N\n  - maintainers\n    - frontend\n    - backend\n    - database\n    - etc...\n```\n\n----------------------------------------\n\nTITLE: Configuring buf for protoc-gen-go-orm Usage\nDESCRIPTION: This YAML configuration for buf specifies how to use the protoc-gen-go-orm plugin. It sets the output directory, plugin options including ORM type, package name, and filter, as well as path options.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/pkg/protoc/protoc-gen-go-orm/README.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: v1\n\nmanaged:\n  enabled: true\n\nplugins:\n  - plugin: go-orm\n    out: boundaries/link/link\n    opt:\n      - \"orm=postgres,pkg=package_name,filter=Link\"\n      - \"paths=source_relative\"\n```\n\n----------------------------------------\n\nTITLE: Visualizing Graceful Shutdown Flow with PlantUML\nDESCRIPTION: A PlantUML diagram showing the interaction between the main function, the graceful shutdown function, and OS signals. The diagram illustrates how the graceful shutdown function listens for SIGINT, SIGQUIT, and SIGTERM signals, and returns the received signal to the main function before exiting with code 143.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/pkg/graceful_shutdown/README.md#_snippet_0\n\nLANGUAGE: plantuml\nCODE:\n```\n@startuml\nparticipant \"Main Function\" as Main\nparticipant \"GracefulShutdown Function\" as GS\nparticipant \"OS Signal\" as OS\n\nMain -> GS: Calls GracefulShutdown()\nactivate GS\nGS -> OS: Listens for SIGINT, SIGQUIT, SIGTERM\nOS --> GS: Sends signal\nGS --> Main: Returns received signal and exits with code 143\ndeactivate GS\n@enduml\n```\n\n----------------------------------------\n\nTITLE: Approving a Kubernetes Certificate Signing Request with kubectl - Bash\nDESCRIPTION: This snippet demonstrates how to approve a specific Certificate Signing Request (CSR) in a Kubernetes cluster using the kubectl CLI. Replace \\\"csr-fm7hw\\\" with the actual CSR name you wish to approve. This command requires cluster-admin privileges or sufficient RBAC permissions to approve CSRs. The command finalizes the certificate signing process, enabling the approved entity to authenticate against the cluster.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/ops/docs/ADR/decisions/0004-kubernetes-tips.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl certificate approve csr-fm7hw\n```\n\n----------------------------------------\n\nTITLE: Listing Kubernetes Certificate Signing Requests with kubectl - Bash\nDESCRIPTION: This snippet shows how to retrieve all Certificate Signing Requests (CSRs) in a Kubernetes cluster and sort them by their creation timestamp using the kubectl CLI. It requires a properly configured kubectl environment with access to the desired Kubernetes cluster. The command sorts CSRs, making it easier for administrators to identify new or pending requests for review. No additional dependencies are needed besides a working kubectl installation with access rights.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/ops/docs/ADR/decisions/0004-kubernetes-tips.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get csr --sort-by=.metadata.creationTimestamp\n```\n\n----------------------------------------\n\nTITLE: Registering GitLab Runner via Docker - Bash\nDESCRIPTION: Registers a GitLab Runner with a specified GitLab instance from within the Docker environment. The command uses 'docker exec -it' to access the 'gitlab-runner' container and invokes 'gitlab-runner register' with specified service and clone URLs. Dependencies include a running GitLab Runner container and network connectivity to the GitLab service. Parameters such as '--url' and '--clone-url' need to match GitLab's network configuration.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/ops/docker-compose/tooling/saas/gitlab/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it gitlab-runner gitlab-runner register --url \"http://gitlab:10180\" --clone-url \"http://gitlab:10180\"\n```\n\n----------------------------------------\n\nTITLE: Installing protoc-gen-go-orm via Go\nDESCRIPTION: This command installs the protoc-gen-go-orm plugin using Go's package management system. It fetches the plugin from the specified GitHub repository.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/pkg/protoc/protoc-gen-go-orm/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo install github.com/shortlink-org/shortlink/pkg/protoc/protoc-gen-go-orm\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Backstage Backend\nDESCRIPTION: Command to install project dependencies using Yarn with the --immutable flag to ensure consistent installations. This should be run from the project root directory before starting the backend.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/boundaries/platform/backstage/packages/backend/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn install --immutable\n```\n\n----------------------------------------\n\nTITLE: Running Benchmark on PostgreSQL with Sysbench TPCC - Shell\nDESCRIPTION: This shell script executes the Sysbench TPCC benchmark test against the prepared PostgreSQL database. Dependencies include a pre-initialized database (from the prepare stage) and sysbench-tpcc. Parameters extend those in the prepare step with the addition of test duration and report interval. The script reports performance metrics and must be run in a compatible shell environment.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/ops/docker-compose/database/postgres/BENCHMARK.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n```shell\n./tpcc.lua \\\n  --pgsql-host=localhost \\\n  --pgsql-port=5432 \\\n  --pgsql-user=postgres \\\n  --pgsql-password=shortlink \\\n  --pgsql-db=shortlink \\\n  --threads=2 \\\n  --tables=10 \\\n  --scale=100 \\\n  --trx_level=RC \\\n  --db-ps-mode=auto \\\n  --db-driver=pgsql \\\n  --time=3000 \\\n  --report-interval=1 \\\n  run\n```\n```\n\n----------------------------------------\n\nTITLE: Installing GitLab Agent on Kubernetes using Helm - Bash\nDESCRIPTION: This Bash snippet installs or upgrades the GitLab Agent on a Kubernetes cluster using Helm. It adds the GitLab Helm charts repository, updates chart information, and deploys the agent to the specified namespace with custom configuration values such as the image tag, authentication token, and KAS address. Dependencies include a working Helm setup, Kubernetes cluster, and required configuration values such as namespace, token, and desired image version. Inputs are provided as CLI parameters, and the output is the deployed/upgraded GitLab Agent in the targeted namespace.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/docs/tutorial/deploy-k8s.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add gitlab https://charts.gitlab.io\\nhelm repo update\\nhelm upgrade --install contabo gitlab/gitlab-agent \\\\\\n  --namespace <namespace> \\\\\\n  --create-namespace \\\\\\n  --set image.tag=<version> \\\\\\n  --set config.token=<token> \\\\\\n  --set config.kasAddress=wss://kas.gitlab.com\n```\n\n----------------------------------------\n\nTITLE: Visualizing Saga State Transitions with Mermaid (Diagramming Language)\nDESCRIPTION: This Mermaid diagram models the state transitions of a saga in a distributed system workflow. By graphically representing the main states (INIT, WAIT, RUN, etc.) and their transitions, it clarifies the multi-step process and highlights possible error/rejection flows. The color-coded nodes provide quick context on each step's status, making it useful for documentation or presentations and requires a Markdown processor or tool that supports Mermaid diagrams.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/pkg/pattern/saga/README.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\\n  INIT[Initialization] --\\u003e|Initialization Complete| WAIT[Waiting]\\n  WAIT --\\u003e|Waiting Complete| RUN[Running]\\n  RUN --\\u003e|Running Complete| DONE[Done]\\n  RUN --\\u003e|Error Occurred| REJECT[Rejection]\\n  REJECT --\\u003e|Rejection Handled| FAIL[Failure]\\n  REJECT --\\u003e|Rollback Triggered| ROLLBACK[Rollback]\\n\\n  style INIT fill:#FFADAD\\n  style WAIT fill:#FFD6A5\\n  style RUN fill:#FDFFB6\\n  style DONE fill:#CAFFBF\\n  style REJECT fill:#9BF6FF\\n  style FAIL fill:#A0C4FF\\n  style ROLLBACK fill:#BDB2FF\n```\n\n----------------------------------------\n\nTITLE: Installing protoc-gen-rich-model via Go - Bash\nDESCRIPTION: These installation commands install the protoc-gen-rich-model plugin using Go's install command. The first installs directly from the GitHub repository, and the second allows for development by installing from a local path. Go and a configured $GOPATH/bin are required; after execution, the protoc-gen-rich-model binary should be available in your PATH.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/pkg/protoc/protoc-gen-rich-model/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo install github.com/shortlink-org/shortlink/pkg/protoc/protoc-gen-rich-model\n\n# for development\ngo install ./pkg/protoc/protoc-gen-rich-model\n```\n\n----------------------------------------\n\nTITLE: Starting Kubernetes Proxy Server\nDESCRIPTION: Initiates a proxy server for the Kubernetes API on localhost port 8001, enabling direct HTTP access to the API server.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/docs/tutorial/kubernetes-tips.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$> kubectl proxy\nStarting to serve on 127.0.0.1:8001\n```\n\n----------------------------------------\n\nTITLE: Visualizing PgBouncer Load Balancer Flow - Mermaid\nDESCRIPTION: This Mermaid diagram visualizes the flow of client connections through PgBouncer, a load balancer, and connection pools to the PostgreSQL server. It outlines the steps from establishing the client connection, load balancing decisions (including round robin and custom algorithms), assignment of connection pools, and server communication, before returning the response. The diagram also includes style blocks to distinguish different process nodes and algorithm options. No software dependencies are required to interpret the process, but Mermaid rendering tools are needed to view the flowchart. This diagram is designed for architectural overviews rather than execution, with no code-level inputs or outputs.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/ops/docker-compose/database/postgres/README.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\\n  A[Client] -->|1. Connect| B(PgBouncer)\\n  B -->|2. Check Load Balancer| LB[Load Balancer]\\n  LB -->|3. Choose Connection Pool| C[Connection Pool]\\n  C -->|4. Assign| D[Server Connection]\\n  D -->|5. Process| E[PostgreSQL Server]\\n  E -->|6. Response| D\\n  D -->|7. Return| C\\n  C -->|8. Forward| LB\\n  LB -->|9. Send to PgBouncer| B\\n  B -->|10. Send| A\\n\\n  subgraph \\\"PgBouncer Setup\\\"\\n    B\\n    LB\\n    C\\n  end\\n\\n  subgraph \\\"Load Balancing Algorithms\\\"\\n    L1[Round Robin]\\n    L2[Least Connection]\\n    L3[Custom Algorithm]\\n  end\\n\\n  LB -.-> L1\\n  LB -.-> L2\\n  LB -.-> L3\\n\\n  style A fill:#e3ebf3,stroke:#1a73e8\\n  style B fill:#e3ebf3,stroke:#1a73e8\\n  style C fill:#f7e3d3,stroke:#e18728\\n  style D fill:#e3ebf3,stroke:#1a73e8\\n  style E fill:#e3ebf3,stroke:#1a73e8\\n  style LB fill:#f7e3d3,stroke:#e18728\\n  style L1 fill:#d4f0c4,stroke:#50b840\\n  style L2 fill:#d4f0c4,stroke:#50b840\\n  style L3 fill:#d4f0c4,stroke:#50b840\n```\n\n----------------------------------------\n\nTITLE: Launching Shortlink with Skaffold via Make - Shell\nDESCRIPTION: These shell snippets use Make targets to manage Skaffold-based launches, including setup (skaffold-init), start (skaffold-up), teardown (skaffold-down), and debug mode (skaffold-debug). Requires Skaffold, Docker, and Kubernetes installed locally. These commands orchestrate builds and deployments with automatic updates and debugging. Run these from the root of the repository; Skaffold configs must be present. No advanced parameters needed.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmake skaffold-init\\nmake skaffold-up\n```\n\nLANGUAGE: shell\nCODE:\n```\nmake skaffold-down\n```\n\nLANGUAGE: shell\nCODE:\n```\nmake skaffold-debug\n```\n\n----------------------------------------\n\nTITLE: Cache System Flow Diagram in Mermaid\nDESCRIPTION: A flow diagram illustrating the caching process from initial request through cache checking, database fetching, and cache updating. Shows the decision flow for cache hits and misses.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/ops/docs/ADR/decisions/0002-cache-system.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    A[Request] --> B[Service]\n    B --> C[Check Cache]\n    C --> D{Cache Hit?}\n    D -- Yes --> E[Return Cached Data]\n    D -- No --> F[Database]\n    F --> G[Fetch Data]\n    G --> H[Update Cache]\n    H --> E\n```\n\n----------------------------------------\n\nTITLE: Visualizing Falco Integration with Argo Workflow Architecture\nDESCRIPTION: Diagram showing how Falco works with Argo events and workflows to provide intrusion detection and prevention. The flow illustrates how Falco detects compromised pods, pushes alerts to Falcosidekick, which notifies Argo events, triggering Argo workflow to create a deletion pod that removes the compromised pod.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/ops/docs/ADR/decisions/0029-ids-and-ips.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\n┌─────────────┐           ┌─────────┐          ┌────────────────┐\n│             │  detect   │         │  push    │                │\n│  pwned pod  ├───────────►  falco  ├──────────► falcosidekick  ├────┐\n│             │           │         │          │                │    │\n└──────▲──────┘           └─────────┘          └────────────────┘    │ notify\n       │                                                             │\n       │                                                             │\ndelete │   ┌──────────────┐          ┌───────────────┐        ┌──────▼──────┐\n       │   │              │          │               │        │             │\n       └───┤ deletion pod ◄──────────┤ argo workflow │        │ argo events │\n           │              │  create  │               │        │             │\n           └──────────────┘          └────────────▲──┘        └─┬───────────┘\n                                                  │             │\n                                          trigger │             │ push\n                                                  │             │\n                                                ┌─┴─────────────▼──┐\n                                                │       bus        │\n                                                └──────────────────┘\n```\n\n----------------------------------------\n\nTITLE: Configuring Gatling Test Parameters in Bash\nDESCRIPTION: Demonstrates how to pass configuration parameters to the JVM for Gatling tests, including logging options and metrics configuration for InfluxDB.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/poc/gatling/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nGatling logs:\nCONSOLE_LOGGING=ON - turn on console logging\nFILE_LOGGING=ON - turn on logging in file \"target/gatling/gatling.log\"\nGRAYLOG_LOGGING=ON - turn on logging in graylog\n    graylog params:\n        GRAYLOG_HOST - graylog host\n        GRAYLOG_PORT - on which port graylog input is\n        GRAYLOG_STREAM - name of graylog stream\n\nGatling metrics in influxdb:\nGRAPHITE_HOST - influxdb with configured graphite plugin host\nGRAPHITE_PORT - see /etc/influxdb/influxdb.conf: bind-address\nINFLUX_PREFIX - see /etc/influxdb/influxdb.conf: database\n```\n\n----------------------------------------\n\nTITLE: Including PlantUML Components for Search Service in Shortlink Project\nDESCRIPTION: This PlantUML configuration imports common presets and service-specific components for creating architectural diagrams. It includes a common preset from the project's repository and specific diagram definitions for the search service, including both external dependencies and the service itself.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/docs/c4/containers/services/search/README.md#_snippet_0\n\nLANGUAGE: plantuml\nCODE:\n```\n!include https://raw.githubusercontent.com/shortlink-org/shortlink/main/docs/c4/containers/preset/common.puml\n\n!include services/search/ext.puml\n!include services/search/service.puml\n```\n\n----------------------------------------\n\nTITLE: Setting Cache Values in Go\nDESCRIPTION: Shows how to add values to the cache using the Set function with a key-value pair.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/pkg/cache/README.md#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nkey := \"myKey\"\nvalue := \"myValue\"\n\nerr := cacheClient.Set(ctx, cache.Item{\n  Key:   key,\n  Value: value,\n})\n```\n\n----------------------------------------\n\nTITLE: Getting Cache Values in Go\nDESCRIPTION: Demonstrates how to retrieve values from the cache using the Get function with proper type handling.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/pkg/cache/README.md#_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nkey := \"myKey\"\nresp := cache2.Item{}\nerr := cacheClient.Get(ctx, key, &resp)\n```\n\n----------------------------------------\n\nTITLE: Starting the Backstage Backend Server\nDESCRIPTION: Command to start the Backstage backend server in development mode. This should be run from the packages/backend directory after installing dependencies.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/boundaries/platform/backstage/packages/backend/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Including PlantUML Diagram Definitions for Shortlink Project\nDESCRIPTION: Imports PlantUML diagram definitions from both remote and local sources. Includes a common preset from the main repository and specific notify service diagrams.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/docs/c4/containers/services/notify/README.md#_snippet_0\n\nLANGUAGE: plantuml\nCODE:\n```\n!include https://raw.githubusercontent.com/shortlink-org/shortlink/main/docs/c4/containers/preset/common.puml\n\n!include services/notify/ext.puml\n!include services/notify/service.puml\n```\n\n----------------------------------------\n\nTITLE: Queue Constructor Implementation\nDESCRIPTION: Creates a new queue instance with the provided value and nil next pointer.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/pkg/types/README.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc NewQueue(value interface{}) *Queue {\n\treturn &Queue{value: value}\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Protocol-Specific API Gateway Architecture with Mermaid - Mermaid\nDESCRIPTION: This snippet presents a Mermaid diagram that visualizes the newly proposed architecture for splitting the API Gateway Service into four specialized protocol gateways (REST, GraphQL, gRPC, CloudEvents). Dependencies include support for rendering Mermaid diagrams, often found in Markdown viewers or documentation tooling. The nodes and edges represent various client communication paths and backend microservice connections, clarifying relationships and responsibilities. Inputs are diagram declarations in Mermaid syntax; outputs are rendered flow diagrams. Limitations include the requirement for a proper Mermaid renderer to view the visual output.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/boundaries/api/api-gateway/docs/ADR/decisions/0002-split-api-gateway-service-into-separate-services-for-each-protocol.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\\n    A[Client Applications] --> |HTTP REST| B[REST API Gateway Service]\\n    A --> |GraphQL| C[GraphQL API Gateway Service]\\n    A --> |gRPC| D[gRPC API Gateway Service]\\n    A --> |CloudEvents| E[CloudEvents API Gateway Service]\\n    B --> F[Microservice 1]\\n    C --> G[Microservice 2]\\n    D --> H[Microservice 3]\\n    E --> I[Microservice 4]\\n    F --> B\\n    G --> C\\n    H --> D\\n    I --> E\n```\n\n----------------------------------------\n\nTITLE: Queue Push Operation\nDESCRIPTION: Implementation of the Push method that adds a new value to the end of the queue by traversing to the last node.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/pkg/types/README.md#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc (q *Queue) Push(value interface{}) {\n\tfor q.next != nil {\n\t\tq = q.next\n\t}\n\tq.next = &Queue{value: value}\n}\n```\n\n----------------------------------------\n\nTITLE: Describing System Context with C4 PlantUML - PlantUML\nDESCRIPTION: This PlantUML snippet defines a C4 model system context diagram for the API Gateway service. It includes references to common preset files and actors, defines boundaries for gateway, authentication, and link services, and models interactions between customers and system boundaries. Dependencies include access to external PlantUML includes via GitHub URLs and local preset files (actors/customer.puml, boundaries/gateway.puml, etc.). The snippet expects these dependency files to be present and accessible either locally or remotely to correctly render the diagram. Outputs a UML diagram illustrating the relationships and flows between customer, gateway, authentication, and link boundaries.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/boundaries/api/api-gateway/README.md#_snippet_0\n\nLANGUAGE: plantuml\nCODE:\n```\n!include https://raw.githubusercontent.com/shortlink-org/shortlink/main/docs/c4/containers/preset/common.puml\\n!include https://raw.githubusercontent.com/shortlink-org/shortlink/main/docs/c4/containers/preset/c1.puml\\n\\n!include actors/customer.puml\\n\\n!include boundaries/gateway.puml\\n!include boundaries/auth.puml\\n!include boundaries/link.puml\\n\\ncustomer --> gatewayBoundary : uses\\ngatewayBoundary --> authBoundary : check auth\\ngatewayBoundary --> linkBoundary : create link\n```\n\n----------------------------------------\n\nTITLE: Initializing a Raft Node in Go\nDESCRIPTION: Example code showing how to initialize a new Raft node with basic configuration including node name and bind address.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/pkg/raft/README.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"github.com/shortlink-org/shortlink/pkg/raft\"\n)\n\nfunc main() {\n\tr, err := raft.New(raft.Config{\n\t\tName:     \"node1\",\n\t\tBindAddr: \"localhost:8001\",\n\t})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tr.Go(func() {\n\t\t// Do something\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Running shortctl Command - Plaintext\nDESCRIPTION: This snippet demonstrates the correct basic invocation of the 'shortctl' CLI tool using the command line. No dependencies are required other than the executable itself. The snippet assumes a functional installation of shortctl and provides a conceptual template for further customizations with flags.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/boundaries/platform/shortctl/shortctl.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nshortctl [flags]\n```\n\n----------------------------------------\n\nTITLE: CEL Evaluation Response Format\nDESCRIPTION: Example of a JSON response from the CEL evaluation endpoint. The response shows the evaluation results for different rules, with boolean values indicating whether each rule passed or failed.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/poc/cel/README.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\"jwt_audience.cel\":true,\"jwt_exp.cel\":true}\n```\n\n----------------------------------------\n\nTITLE: Including Health Probes Using Helm Template - Go Template\nDESCRIPTION: This Helm chart code snippet demonstrates how to include a common probe configuration in the deployment templates of Shortlink services using the shortlink-common.probe helper. It leverages Helm's include function and indents the generated probe YAML by six spaces for proper formatting. This approach assumes the existence of a reusable probe template and a populated .Values.deploy section containing deployment-specific configurations. The output is injected directly into the Helm release, requiring Helm 3 and the shortlink-common.probe helper to be defined elsewhere in the chart codebase.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/docs/ADR/decisions/0003-observability-health-check.md#_snippet_0\n\nLANGUAGE: gotemplate\nCODE:\n```\n{{- include \\\"shortlink-common.probe\\\" .Values.deploy | indent 6 }}\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Hashes with pip Requirements - Shell\nDESCRIPTION: Declares a series of --hash arguments for use in a pip requirements file, pairing each hash with a particular package version to guarantee that only specific, pre-validated artifacts are installed. The hash flags are meant to be used in conjunction with a package name/version line and serve as an integrity verification step during the package installation process. This technique requires pip (v8.0 or above) and is supported in requirements.txt files, helping to prevent supply chain attacks by ensuring that only the approved distributions are accepted.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/poc/ml-diff/ml/requirements.txt#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n--hash=sha256:b3b00cdc8f1317b5f33191df1386c0befd16625f49d979fe77a8d44cae82410d \\\n--hash=sha256:b4fc2525eca2c69a59260f583c56a7557c6ccdf8deafdba6e060f94c1c59738e \\\n--hash=sha256:b8b7a3b86e411e4bce21186e1c180d792f3d99223dcfa3b4f597ecc92fa1a422 \\\n--hash=sha256:c06beb2e839ecc641366000ca84f3cf6fa9faa1777e29cf0c04be6e4d096a348 \\\n--hash=sha256:d056391530ccd1e501056160e3c9673b4da4805eb67eb2bdf4e983e1f9c9204e \\\n--hash=sha256:dc4765af3386811c3ca21638f63b9cf5ecf66261cc4815c1db3f1e7dc7b79db2 \\\n--hash=sha256:dc5cf3d68c5a20ad6d571584c0750ec641cc46aeef1c1507be51300e6003a7e1 \\\n--hash=sha256:e7be3fa5d2eb9be7d77c3734ff1d599151bb523674be9b834e8da6abe132f44e \\\n--hash=sha256:e8ca8cb270fee8f1f76fa9bfd5c3507d60c6438bbee5687f81042e2bb98e5a97 \\\n--hash=sha256:fa909b1a36e000a03c382aade0bd2063fd5680ff8b8e501660c0f59f021a6415\n```\n\n----------------------------------------\n\nTITLE: Launching Gatling Performance Tests in Scala\nDESCRIPTION: Provides commands to run maximum performance and stability tests using Gatling.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/poc/gatling/README.md#_snippet_4\n\nLANGUAGE: scala\nCODE:\n```\n\"Gatling / testOnly shortlink.load.gatling.MaxPerformance\" - maximum performance test\n\"Gatling / testOnly shortlink.load.gatling.Stability\" - stability test\n```\n\n----------------------------------------\n\nTITLE: Pinning setuptools Version with Hash Verification - Shell\nDESCRIPTION: Specifies a particular version (76.1.0) of the setuptools package along with two associated SHA256 hashes for binary and/or source distributions. This format ensures installations only proceed if the downloaded setuptools artifact matches one of the approved hashes, using pip's hash-checking features. Dependencies include Python, pip, and should be placed in requirements.txt files for projects requiring strong supply chain protection. Key parameters include the exact version and multiple hashes to allow for different distribution types.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/poc/ml-diff/ml/requirements.txt#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsetuptools==76.1.0 \\\n--hash=sha256:34750dcb17d046929f545dec9b8349fe42bf4ba13ddffee78428aec422dbfb73 \\\n--hash=sha256:4959b9ad482ada2ba2320c8f1a8d8481d4d8d668908a7a1b84d987375cd7f5bd\n```\n\n----------------------------------------\n\nTITLE: Visualizing Transactional Outbox Pattern with PlantUML\nDESCRIPTION: This PlantUML diagram illustrates the components and flow of the transactional outbox pattern. It shows the interaction between the application, database, message queue, and external service, highlighting the steps involved in ensuring reliable message delivery.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/pkg/pattern/transactional_outbox/README.md#_snippet_0\n\nLANGUAGE: plantuml\nCODE:\n```\n@startuml C4_Transactional_Outbox\n\n!define C4PlantUML https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master\n!include C4PlantUML/C4_Context.puml\n!include C4PlantUML/C4_Container.puml\n!include C4PlantUML/C4_Component.puml\n\nLAYOUT_WITH_LEGEND()\n\n' Define your system\nSystem_Boundary(s1, \"Your System\") {\n    ContainerDb(db1, \"Database\", \"Relational DBMS\", \"Stores user data and outbox table\")\n    Container(app, \"Application\", \"Your favorite technology\", \"Handles business logic\")\n    Container(mq, \"Message Queue\", \"RabbitMQ/Kafka\", \"Buffers messages for asynchronous processing\")\n}\n\n' Define external systems\nSystem_Ext(externalService, \"External Service\", \"Consumes messages for further processing\")\n\n' Show the transactional outbox pattern flow\nRel(app, db1, \"Writes to\", \"1. Performs database transaction including write to outbox table\")\nRel(db1, app, \"Dispatch\", \"2. Outbox Poller reads and publishes messages\", \"Polling mechanism/Transaction log tailing\")\nRel_L(app, mq, \"3. Publishes messages to\", \"AMQP/Kafka client\")\nRel(mq, externalService, \"4. Sends messages to\")\n\n@enduml\n```\n\n----------------------------------------\n\nTITLE: Generating C4 Model Diagram for Cloudflare Integration using PlantUML\nDESCRIPTION: This PlantUML code generates a C4 model diagram illustrating the integration of Cloudflare, Kubernetes, and the decision to drop Envoy response headers. It shows the flow of traffic from users through Cloudflare to the Kubernetes cluster and internal services.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/docs/ADR/decisions/0035-use-cloudflare.md#_snippet_0\n\nLANGUAGE: plantuml\nCODE:\n```\n@startuml\n!include https://raw.githubusercontent.com/RicardoNiepel/C4-PlantUML/master/C4_Container.puml\n\ntitle C4 Model - Integrating Cloudflare, Kubernetes, and Dropping Envoy Response Headers\n\nPerson(user, \"User\")\n\nContainer_Boundary(cdn, \"Cloudflare\") {\n    Container(cloudflare, \"Cloudflare Services\", \"CDN, DDoS Protection, WAF, SSL\", \"Provides security, performance, and reliability enhancements\")\n    Container_Ext(googleAnalytics, \"Google Analytics\", \"Analytics\", \"Provides insights into user behavior and website performance\")\n}\n\nContainer_Boundary(k8s, \"Kubernetes Cluster\") {\n    Container(nginxIngress, \"Nginx Ingress Controller\", \"Nginx\", \"Manages incoming traffic and routes to services within the cluster\")\n    Container(application, \"Application\", \"Spring Boot\", \"Handles business logic\")\n    Container(envoyProxy, \"Envoy Proxy\", \"Envoy\", \"Proxy server handling traffic between Cloudflare and internal services\")\n}\n\nRel(user, cloudflare, \"Requests website content\")\nRel(cloudflare, envoyProxy, \"Forwards requests and responses, drops and adds headers\", \"HTTPS\")\nRel(cloudflare, googleAnalytics, \"Sends usage data to\", \"HTTPS\")\nRel(envoyProxy, nginxIngress, \"Routes traffic to\", \"HTTP\")\nRel(nginxIngress, application, \"Proxies requests to\", \"HTTP\")\n\n@enduml\n```\n\n----------------------------------------\n\nTITLE: Implementing CSS prefers-reduced-transparency for Reduced Transparency\nDESCRIPTION: This CSS snippet demonstrates how to use the prefers-reduced-transparency media query to reduce transparency effects for users who prefer reduced transparency. It sets the background opacity to 0 when the user has enabled this preference.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/docs/ADR/decisions/0039-ui-accessibility.md#_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.bg-white {\n  @media (prefers-reduced-transparency: reduce) {\n    --tw-bg-opacity: 0;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Stuck Namespace Deletion\nDESCRIPTION: Process to force delete a stuck namespace by extracting the namespace JSON, modifying it, and sending a finalize request to the API server.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/docs/tutorial/kubernetes-tips.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$> kubectl get namespace istio-system -o json > tmp.json\n# remove \"spec.kubernetes\"\n$> vim tmp.json\n$> curl -k -H \"Content-Type: application/json\" -X PUT --data-binary @tmp.json http://127.0.0.1:8001/api/v1/namespaces/istio-system/finalize\n```\n\n----------------------------------------\n\nTITLE: Diagramming Kubernetes Node Hardware Configuration with PlantUML - PlantUML\nDESCRIPTION: This PlantUML snippet describes a high-level hardware configuration for a Kubernetes cluster using multiple PlantUML includes, featuring Talos-managed nodes. It visualizes three Kubernetes nodes within a system boundary, each annotated with its hostname, readiness status, role assignments, node age, and Kubernetes version. Dependencies include remote PlantUML libraries for Kubernetes and C4-PlantUML context modeling. The input is the PlantUML diagram code, outputting a schematic visualization. The diagram's main limitation is reliance on Internet-accessible includes; offline rendering may fail.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/ops/docs/ADR/decisions/0003-maintaining-kubernetes.md#_snippet_0\n\nLANGUAGE: PlantUML\nCODE:\n```\n@startuml k8s_nodes\\n\\n' Define KubernetesPuml for URL inclusion\\n!define KubernetesPuml https://raw.githubusercontent.com/dcasati/kubernetes-PlantUML/master/dist\\n\\n' Include common Kubernetes components\\n!includeurl KubernetesPuml/kubernetes_Common.puml\\n!includeurl KubernetesPuml/kubernetes_Context.puml\\n\\n' Include specific components for nodes\\n!includeurl KubernetesPuml/OSS/KubernetesNode.puml\\n\\n' Include C4 model\\n!includeurl https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml\\n\\nskinparam backgroundColor #FEFEFE\\nskinparam handwritten false\\n\\nleft to right direction\\n\\n' Define C4 Context\\nLAYOUT_TOP_DOWN()\\n\\nSystem_Boundary(k8s_cluster, \"K8s Cluster\") {\\n    ' Define Nodes\\n    KubernetesNode(talos_bxi_ihe, \"talos-bxi-ihe\\\\nStatus: Ready\\\\nRoles: <none>\\\\nAge: 78d\\\\nVersion: v1.31.2\", \"#ffcccc\")\\n    KubernetesNode(talos_coj_emd, \"talos-coj-emd\\\\nStatus: Ready\\\\nRoles: <none>\\\\nAge: 78d\\\\nVersion: v1.31.2\", \"#ccffcc\")\\n    KubernetesNode(talos_dks_th8, \"talos-dks-th8\\\\nStatus: Ready\\\\nRoles: <none>\\\\nAge: 78d\\\\nVersion: v1.31.2\", \"#ccccff\")\\n}\\n\\n@enduml\n```\n\n----------------------------------------\n\nTITLE: Importing PlantUML Logger Service Components\nDESCRIPTION: Imports PlantUML diagram components for a logger service architecture, including common presets, external service definitions, service components, and database configurations.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/docs/c4/containers/services/logger/README.md#_snippet_0\n\nLANGUAGE: plantuml\nCODE:\n```\n!include https://raw.githubusercontent.com/shortlink-org/shortlink/main/docs/c4/containers/preset/common.puml\n\n!include services/logger/ext.puml\n!include services/logger/service.puml\n!include services/logger/db.puml\n```\n\n----------------------------------------\n\nTITLE: Linking to Benchmarking Resource - Markdown\nDESCRIPTION: This snippet creates a hyperlink to an external repository hosting benchmarks comparing Nx, Turborepo, and Lerna for monorepo management. This provides readers with further evaluation context. No dependencies are needed to render, and it is for use in markdown documentation. The displayed label is 'link to benchmarking repo' and the URL points to the benchmarking section of a GitHub repo.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/docs/ADR/decisions/0036-nx-monorepo.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> [link to benchmarking repo](https://github.com/vsavkin/large-monorepo#benchmarking-nx-turbo-and-lerna)\n```\n\n----------------------------------------\n\nTITLE: Including PlantUML Presets and External Service Definitions - PlantUML\nDESCRIPTION: This snippet configures a PlantUML diagram by including a remote common preset and external service definitions. It requires Internet access to fetch remote PlantUML files. The included files provide reusable C4 model containers and service extension definitions, standardizing the diagramming environment for system documentation.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/docs/c4/containers/services/ws/README.md#_snippet_0\n\nLANGUAGE: PlantUML\nCODE:\n```\n```plantuml\\n!include https://raw.githubusercontent.com/shortlink-org/shortlink/main/docs/c4/containers/preset/common.puml\\n\\n!include services/ws/ext.puml\\n!include services/ws/service.puml\\n```\n```\n\n----------------------------------------\n\nTITLE: Including PlantUML Presets and Service Diagrams - PlantUML\nDESCRIPTION: This PlantUML snippet imports diagram presets and service definitions for the shortlink project. It requires an internet connection for external URLs and local access to project-specific diagram files for additional context. The inputs are the referenced PlantUML files, and the output is a composite diagram context ready for further diagram definition.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/docs/c4/containers/services/shortdb/README.md#_snippet_0\n\nLANGUAGE: PlantUML\nCODE:\n```\n```plantuml\\n!include https://raw.githubusercontent.com/shortlink-org/shortlink/main/docs/c4/containers/preset/common.puml\\n\\n!include services/shortdb/ext.puml\\n!include services/shortdb/service.puml\\n```\n```\n\n----------------------------------------\n\nTITLE: Removing ArgoCD Application Finalizers\nDESCRIPTION: Commands to remove finalizers from an ArgoCD application named 'temporal' in the argocd namespace. This is useful when an application is stuck in deletion or needs to be forcefully removed.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/ops/docs/ADR/decisions/0032-argocd-tips.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl -n argocd patch app temporal -p '{\"metadata\": {\"finalizers\": null}}' --type merge\n```\n\n----------------------------------------\n\nTITLE: Visualizing Raft Server States with Mermaid Diagram\nDESCRIPTION: A state diagram showing the transitions between different states in the Raft consensus algorithm including Follower, Candidate, and Leader states.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/pkg/raft/README.md#_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nstateDiagram-v2\n  UNSPECIFIED --> Follower: times out, start election\n  Follower    --> Candidate: times out, start election\n  Candidate   --> Candidate: timeout, new election\n  Candidate   --> Leader: win election\n  Candidate   --> Follower: receive vote from majority\n```\n\n----------------------------------------\n\nTITLE: Showing Makefile Help with Bash Command\nDESCRIPTION: This snippet demonstrates how to display the help message containing all available Makefile commands and targets for the A/B Testing Platform project. Users must have Make installed as a prerequisite. Executing this command in a terminal within the project directory will list the available tasks and a brief description for each. The parameter 'help' triggers the Makefile's self-documentation feature. The output is text-based, and no additional dependencies are required beyond standard Make functionality.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/boundaries/platform/ab_platform/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$> make help # show help message with all commands and targets\n```\n\n----------------------------------------\n\nTITLE: Including PlantUML Service Components\nDESCRIPTION: Imports common preset definitions and gamification service components for architecture diagramming using PlantUML include directives. Loads both external and internal service definitions.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/docs/c4/containers/services/gamification/README.md#_snippet_0\n\nLANGUAGE: plantuml\nCODE:\n```\n!include https://raw.githubusercontent.com/shortlink-org/shortlink/main/docs/c4/containers/preset/common.puml\n\n!include services/gamification/ext.puml\n!include services/gamification/service.puml\n```\n\n----------------------------------------\n\nTITLE: Generating SBOM with SPDX in Docker - Shell\nDESCRIPTION: This shell snippet demonstrates how to generate a Software Bill of Materials (SBOM) using the spdx/spdx-sbom-generator Docker image. The command mounts the project directory and an output directory into the container, then runs the generator with the specified project path (\\\"/repository/pkg/shortdb-operator\\\") and output path (\\\"/docs/bom\\\"). Prerequisites include having Docker installed and access to the source directories. Inputs are the paths to the repository and output directories, and the output is the generated SBOM files. Limitations include requiring proper file permissions and sufficient disk space for both input and output directories.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/docs/bom/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$> docker run -it --rm \\\n  -v $PWD:/repository \\\n  -v \"$(pwd)/out:/out\" \n  spdx/spdx-sbom-generator \\\n    -p /repository/pkg/shortdb-operator \\\n    -o /docs/bom\n```\n\n----------------------------------------\n\nTITLE: Importing PlantUML Component Diagrams\nDESCRIPTION: Imports common presets and UI component diagrams for landing page, next.js application, API gateway, and UI kit components using PlantUML include directives.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/docs/c4/containers/ui/README.md#_snippet_0\n\nLANGUAGE: plantuml\nCODE:\n```\n!include https://raw.githubusercontent.com/shortlink-org/shortlink/main/docs/c4/containers/preset/common.puml\n\n!include ui/landing/landing.puml\n\n!include ui/next/next.puml\n!include ui/next/gateway.puml\n\n!include ui/ui_kit/ui_kit.puml\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Structure in Scala\nDESCRIPTION: Shows the directory structure for the Gatling performance testing project, including resources, test cases, scenarios, and configurations.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/poc/gatling/README.md#_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\nsrc.test.resources - project resources\nsrc.test.scala.shortlink.load.gatling.cases - simple cases\nsrc.test.scala.shortlink.load.gatling.scenarios - common load scenarios assembled from simple cases\nsrc.test.scala.shortlink.load.gatling - common test configs\n```\n\n----------------------------------------\n\nTITLE: Running Gatling Test with Breakpoints in Scala\nDESCRIPTION: Demonstrates how to run a Gatling test from IDEA with breakpoints for debugging purposes.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/poc/gatling/README.md#_snippet_3\n\nLANGUAGE: scala\nCODE:\n```\nshortlink.load.GatlingRunner\n```\n\n----------------------------------------\n\nTITLE: Running Debug Gatling Test in Scala\nDESCRIPTION: Shows how to run a debug test with a single user, requiring a proxy on localhost:8888.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/poc/gatling/README.md#_snippet_2\n\nLANGUAGE: scala\nCODE:\n```\n\"Gatling / testOnly shortlink.load.gatling.Debug\"\n```\n\n----------------------------------------\n\nTITLE: Starting DTM Example Project with Make and Go\nDESCRIPTION: Commands for setting up the environment with make and running the main Go application. The process requires two steps: first setting up dependencies with 'make up' and then running the main Go program.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/poc/xa/dtm-example/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$> make up\n$> go run main.go\n```\n\n----------------------------------------\n\nTITLE: Importing PlantUML System Boundaries for Shortlink Architecture\nDESCRIPTION: This PlantUML code imports system boundary definitions for visualizing the shortlink project architecture. It first includes a common preset file, then imports various boundary definition files for different service domains such as authentication, gateway, link management, and others.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/docs/c4/containers/boundaries/README.md#_snippet_0\n\nLANGUAGE: plantuml\nCODE:\n```\n!include https://raw.githubusercontent.com/shortlink-org/shortlink/main/docs/c4/containers/preset/common.puml\n\n!include boundaries/auth.puml\n!include boundaries/chat.puml\n!include boundaries/delivery.puml\n!include boundaries/gateway.puml\n!include boundaries/integration.puml\n!include boundaries/link.puml\n!include boundaries/marketing.puml\n!include boundaries/notification.puml\n!include boundaries/billing.puml\n!include boundaries/platform.puml\n!include boundaries/search.puml\n!include boundaries/shortdb.puml\n```\n\n----------------------------------------\n\nTITLE: Assigning geerlingguy.docker Role to Hosts with YAML\nDESCRIPTION: This minimal YAML playbook applies the geerlingguy.docker role to all hosts, ensuring Docker is installed and configured as defined by the role's internal tasks and variables. There are no custom variables or additional steps, making it suitable for basic Docker setups or as a starting point for more complex automation. The required dependency is the correct availability of the role itself in the Ansible environment.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/ops/ansible/playbooks/roles/geerlingguy.docker/README.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- hosts: all\n  roles:\n    - geerlingguy.docker\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Makefile Help with Bash\nDESCRIPTION: Shows how to execute the Makefile help command in Bash to list all available build and deployment commands and targets for the ShortLink project. Requires a Makefile to be present in the project directory. The parameter 'help' lists possible commands and descriptions, and the output is shown directly in the terminal. No additional dependencies are required beyond standard make and Bash shell.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/boundaries/platform/shortctl/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n```bash\\n$> make help # show help message with all commands and targets\\n```\n```\n\n----------------------------------------\n\nTITLE: Visualizing Database Provisioning Workflow with Mermaid - Diagram\nDESCRIPTION: This mermaid code block defines a sequence diagram that illustrates the process of provisioning isolated Postgres databases for each microservice. It visualizes the interactions between components such as the PostgresCluster CRD, database initialization scripts, migration processes, secret management, and the local development workflow. No external dependencies are required other than rendering support for mermaid diagrams; the block is meant for documentation and architectural communication. Inputs are the involved actors and sequence of operations; output is a rendered diagram showing the flow, with a note on developer usage.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/docs/ADR/decisions/0026-pattern-database-per-service.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\\n    participant A as PostgresCluster CRD\\n    participant B as DatabaseInitSQL\\n    participant C as Migration\\n    participant D as Kube-secret-fetcher\\n    participant E as Local Developer\\n    A->>B: Create Postgres Cluster\\n    B->>C: Set up with admin credentials\\n    C->>D: Initialize schema\\n    D-->>E: Fetch URI from secret\\n    Note over E: Uses URI for development\n```\n\n----------------------------------------\n\nTITLE: Including PlantUML Files for Referral Service Diagram\nDESCRIPTION: This snippet includes multiple PlantUML files to construct a diagram for the referral service. It includes common presets, external components, main service, and database definitions.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/docs/c4/containers/services/referral/README.md#_snippet_0\n\nLANGUAGE: plantuml\nCODE:\n```\n!include https://raw.githubusercontent.com/shortlink-org/shortlink/main/docs/c4/containers/preset/common.puml\n\n!include services/referral/ext.puml\n!include services/referral/service.puml\n!include services/referral/db.puml\n```\n\n----------------------------------------\n\nTITLE: Including PlantUML Components for Billing Service\nDESCRIPTION: Imports necessary PlantUML components for rendering billing service architecture diagrams. Includes common presets, external dependencies, service definitions, and database configurations from the shortlink project.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/docs/c4/containers/services/billing/README.md#_snippet_0\n\nLANGUAGE: plantuml\nCODE:\n```\n!include https://raw.githubusercontent.com/shortlink-org/shortlink/main/docs/c4/containers/preset/common.puml\n\n!include services/billing/ext.puml\n!include services/billing/service.puml\n!include services/billing/db.puml\n```\n\n----------------------------------------\n\nTITLE: Including PlantUML C4 Model Presets and Service Modules - PlantUML\nDESCRIPTION: This PlantUML snippet configures a diagram by including several preset files: a remote common C4 model preset and three local service/module-related PlantUML files. These includes provide reusable components, styles, and relationships required to construct layered C4 container diagrams. The remote preset ensures compliance with the Shortlink project’s UML standards, while the service and db modules describe domain-specific architectural elements. Dependencies include PlantUML and network access for the remote preset. Expected output is a well-structured C4-style diagram in UML. All include URLs and paths must be valid and resolvable for successful rendering.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/docs/c4/containers/services/link/README.md#_snippet_0\n\nLANGUAGE: plantuml\nCODE:\n```\n!include https://raw.githubusercontent.com/shortlink-org/shortlink/main/docs/c4/containers/preset/common.puml\n\n!include services/link/ext.puml\n!include services/link/service.puml\n!include services/link/db.puml\n```\n\n----------------------------------------\n\nTITLE: Importing PlantUML Definitions for Auth Service\nDESCRIPTION: Imports necessary PlantUML files for creating architecture diagrams of the authentication service. Includes a common preset file from the repository and two authentication service specific files: external dependencies and the service definition.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/docs/c4/containers/services/auth/README.md#_snippet_0\n\nLANGUAGE: plantuml\nCODE:\n```\n!include https://raw.githubusercontent.com/shortlink-org/shortlink/main/docs/c4/containers/preset/common.puml\n\n!include services/auth/ext.puml\n!include services/auth/service.puml\n```\n\n----------------------------------------\n\nTITLE: Including PlantUML Definitions for Metadata Services\nDESCRIPTION: This snippet includes PlantUML definitions from external files to build diagrams for the shortlink project's metadata services. It imports common preset definitions, external dependencies, service components, and database configurations.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/docs/c4/containers/services/metadata/README.md#_snippet_0\n\nLANGUAGE: plantuml\nCODE:\n```\n!include https://raw.githubusercontent.com/shortlink-org/shortlink/main/docs/c4/containers/preset/common.puml\n\n!include services/matedata/ext.puml\n!include services/metadata/service.puml\n!include services/metadata/db.puml\n```\n\n----------------------------------------\n\nTITLE: Including PlantUML Wallet Service Components\nDESCRIPTION: PlantUML include directives that load common presets and wallet service diagrams from external source files.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/docs/c4/containers/services/wallet/README.md#_snippet_0\n\nLANGUAGE: plantuml\nCODE:\n```\n!include https://raw.githubusercontent.com/shortlink-org/shortlink/main/docs/c4/containers/preset/common.puml\n\n!include services/wallet/ext.puml\n!include services/wallet/service.puml\n```\n\n----------------------------------------\n\nTITLE: Including PlantUML Preset Modules (PlantUML)\nDESCRIPTION: This snippet imports a shared C4 container model preset from a remote repository as well as two local PlantUML include files specific to the 'shortctl' service (one for extensions and one for the service definition). PlantUML must be installed to compile or render diagrams using these directives. Each include resolves project-specific templates, standard semantic objects, and shared diagramming rules, facilitating modular and DRY documentation. All include statements expect the referenced files and paths to be accessible at runtime; network access is required for remote includes.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/docs/c4/containers/services/shortctl/README.md#_snippet_0\n\nLANGUAGE: PlantUML\nCODE:\n```\n!include https://raw.githubusercontent.com/shortlink-org/shortlink/main/docs/c4/containers/preset/common.puml\n\n!include services/shortctl/ext.puml\n!include services/shortctl/service.puml\n```\n\n----------------------------------------\n\nTITLE: Importing PlantUML Components for Shortlink Project\nDESCRIPTION: This snippet imports common PlantUML preset configurations from a remote repository and includes service-specific diagram definitions for the proxy service. The imports reference both external dependencies and internal service components.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/docs/c4/containers/services/proxy/README.md#_snippet_0\n\nLANGUAGE: plantuml\nCODE:\n```\n!include https://raw.githubusercontent.com/shortlink-org/shortlink/main/docs/c4/containers/preset/common.puml\n\n!include services/proxy/ext.puml\n!include services/proxy/service.puml\n```\n\n----------------------------------------\n\nTITLE: Including C4-Model Presets and Service Definitions - PlantUML\nDESCRIPTION: This code snippet imports a shared C4-Model preset from a remote source and local service definition files into a PlantUML diagram. It establishes the common visual and structural elements needed for system-level documentation in the Shortlink repository. The snippet requires PlantUML to process external includes and assumes the availability of referenced files locally or remotely; inputs are the .puml file paths, and there is no direct output except as part of the rendered diagram.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/docs/c4/containers/services/csi/README.md#_snippet_0\n\nLANGUAGE: plantuml\nCODE:\n```\n!include https://raw.githubusercontent.com/shortlink-org/shortlink/main/docs/c4/containers/preset/common.puml\n\n!include services/csi/ext.puml\n!include services/csi/service.puml\n```\n\n----------------------------------------\n\nTITLE: Including PlantUML Diagram Definitions\nDESCRIPTION: Imports common PlantUML presets and Chrome extension specific diagram definitions from external files for system documentation.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/docs/c4/containers/services/chrome-extension/README.md#_snippet_0\n\nLANGUAGE: plantuml\nCODE:\n```\n!include https://raw.githubusercontent.com/shortlink-org/shortlink/main/docs/c4/containers/preset/common.puml\n\n!include services/chrome-extension/ext.puml\n!include services/chrome-extension/service.puml\n```\n\n----------------------------------------\n\nTITLE: Configuring Telemetry Resource in Istio with YAML\nDESCRIPTION: This YAML snippet declares a Telemetry resource for Istio, enabling access logging across all workloads in the mesh through the 'envoy' provider. The configuration omits selector criteria, ensuring mesh-wide applicability, and leverages default behaviors for enabling or overriding logging. Dependencies are Istio (v1.7+) with Telemetry CRDs installed. Key parameters include 'metadata.name', 'spec.accessLogging.providers', and the 'name' of the provider. Input is the global intent for mesh-wide access logging, and the output is an active logging configuration via Envoy sidecars. Limitations are that explicit 'disabled' overrides may be needed for more granular control in complex hierarchies.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/ops/docs/ADR/decisions/0006-istio.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: telemetry.istio.io/v1alpha1\\nkind: Telemetry\\nmetadata:\\n  name: default\\nspec:\\n  # no selector specified, applies to all workloads\\n  accessLogging:\\n    - providers:\\n        - name: envoy\\n      # By default, this turns on access logging (no need to set `disabled: false`).\\n      # Unspecified `disabled` will be treated as `disabled: false`, except in\\n      # cases where a parent configuration has marked as `disabled: true`. In\\n      # those cases, `disabled: false` must be set explicitly to override.\n```\n\n----------------------------------------\n\nTITLE: Including PlantUML Resources for Shortlink Project\nDESCRIPTION: This PlantUML code includes external resources and service-specific diagrams for a shortlink project. It references a common preset and report service diagrams from external files.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/docs/c4/containers/services/report/README.md#_snippet_0\n\nLANGUAGE: plantuml\nCODE:\n```\n!include https://raw.githubusercontent.com/shortlink-org/shortlink/main/docs/c4/containers/preset/common.puml\n\n!include services/report/ext.puml\n!include services/report/service.puml\n```\n\n----------------------------------------\n\nTITLE: Including Preset and Service Modules - PlantUML\nDESCRIPTION: This PlantUML snippet imports a remote base preset for C4 container diagrams and integrates two local service definition files for stats functionality. It requires network access for the remote include and correct relative paths for the local modules. The code does not produce diagrams on its own but is intended to serve as a reusable include for higher-level PlantUML architecture visualization files.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/docs/c4/containers/services/stats/README.md#_snippet_0\n\nLANGUAGE: PlantUML\nCODE:\n```\n!include https://raw.githubusercontent.com/shortlink-org/shortlink/main/docs/c4/containers/preset/common.puml\n\n!include services/stats/ext.puml\n!include services/stats/service.puml\n```\n\n----------------------------------------\n\nTITLE: Including Presets and Service Diagrams with PlantUML - PlantUML\nDESCRIPTION: This snippet demonstrates how to assemble a PlantUML architecture diagram using the C4 model by including external preset and service files. The initial inclusion brings in a shared preset from a remote HTTP URL for consistent styling and structure, followed by local inclusions that add service-specific extensions and definitions. This approach depends on the PlantUML runtime's ability to retrieve remote files and access relative file paths, and presumes the external files define valid PlantUML elements that are used or referenced elsewhere in the final diagram.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/docs/c4/containers/services/shortdb-operator/README.md#_snippet_0\n\nLANGUAGE: PlantUML\nCODE:\n```\n!include https://raw.githubusercontent.com/shortlink-org/shortlink/main/docs/c4/containers/preset/common.puml\n\n!include services/shortdb-operator/ext.puml\n!include services/shortdb-operator/service.puml\n```\n\n----------------------------------------\n\nTITLE: Visualizing Local Kubernetes Cluster Architecture with Mermaid\nDESCRIPTION: A Mermaid diagram illustrating the workflow of using Vagrant to create VMs, Ansible for provisioning, and Kubeadm for setting up a Kubernetes cluster. The diagram shows the relationship between components and their sequential flow.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/poc/vagrant/README.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n\n  A[Vagrant] --> B[VMs]\n  B --> C[Kubeadm]\n  C --> D[K8S Cluster]\n  A --> E[Ansible]\n  E --> B\n\n  subgraph \"Local K8S Cluster\"\n    D\n  end\n\n  classDef title fill:#f9d2d2,stroke:#333,stroke-width:2px;\n  class A title\n```\n\n----------------------------------------\n\nTITLE: Security Implementation Flow Diagram using Mermaid\nDESCRIPTION: Visualization of the deployment flow showing integration between Git, GitLab CI/CD, Helm, ArgoCD, and Kubernetes services with security components.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/docs/ADR/decisions/0013-security.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    A(GIT) -- Push --> B(GitLab CI/CD)\n    B -- Run --> C[Helm]\n    C -- Use --> D(helm secrets)\n    B -- Pul --> F[ArgoCD]\n    F -- Run --> G[Kubernetes]\n    G -- Run --> H[Service]\n    style A fill:#58c0f0,stroke:#333,stroke-width:2px\n    style B fill:#4caf50,stroke:#333,stroke-width:2px\n    style C fill:#f9a825,stroke:#333,stroke-width:2px\n    style D fill:#f9a825,stroke:#333,stroke-width:2px\n    style F fill:#f9a825,stroke:#333,stroke-width:2px\n    style G fill:#f9a825,stroke:#333,stroke-width:2px\n    style H fill:#f9a825,stroke:#333,stroke-width:2px\n```\n\n----------------------------------------\n\nTITLE: Fixing Failed Helm Release\nDESCRIPTION: Patches a Helm release secret to update its status to 'deployed', useful for recovering from failed Helm upgrades.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/docs/tutorial/kubernetes-tips.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$> kubectl -n app-namespace patch secret release-name.v123 --type=merge -p '{\"metadata\":{\"labels\":{\"status\":\"deployed\"}}}'\n```\n\n----------------------------------------\n\nTITLE: Preparing PostgreSQL for Benchmarking using Sysbench TPCC - Shell\nDESCRIPTION: This shell script prepares the PostgreSQL database for benchmarking by initializing tables and data required for the TPCC workload via the sysbench-tpcc tool. It requires a running PostgreSQL instance and assumes the sysbench-tpcc Lua script is available. Key parameters include connection information (host, port, user, password), thread count, table and scale for test size, as well as the transaction isolation level. The command must be executed in a shell environment with the appropriate dependencies installed.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/ops/docker-compose/database/postgres/BENCHMARK.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n```shell\n./tpcc.lua \\\n  --pgsql-host=localhost \\\n  --pgsql-port=5432 \\\n  --pgsql-user=postgres \\\n  --pgsql-password=shortlink \\\n  --pgsql-db=shortlink \\\n  --threads=2 \\\n  --tables=10 \\\n  --scale=100 \\\n  --trx_level=RC \\\n  --db-ps-mode=auto \\\n  --db-driver=pgsql \\\n  prepare\n```\n```\n\n----------------------------------------\n\nTITLE: Visualizing Helm Values Schema Validation Pipeline - PlantUML\nDESCRIPTION: This PlantUML diagram visually represents the end-to-end workflow for validating Helm chart values using values.schema.json. It depicts the decision logic for generating and using schema files in the CI/CD pipeline: developers update values.yaml, schema generation and validation are conditional on the presence of .schema.yaml, and builds are passed or failed accordingly. PlantUML (rendered as a code block) is used for documentation and process communication and requires no external dependencies beyond a PlantUML renderer. Inputs are configuration files and git commits; outputs are passed or failed builds with appropriate validation feedback.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/ops/docs/ADR/decisions/0033-helm-use-values-schemas-json.md#_snippet_0\n\nLANGUAGE: PlantUML\nCODE:\n```\n@startuml\\ntitle Helm Values Schema Validation Pipeline\\n\\nstart\\n\\n:Developer updates `values.yaml`;\\n:Commit changes to repository;\\n\\nif (Is `.schema.yaml` present?) then (Yes)\\n  :Run `helm-values-generate` target;\\n  :Generate `values.schema.json` using helm-values-schema-json;\\n  :Validate `values.yaml` against `values.schema.json`;\\n  if (Validation Success?) then (Yes)\\n    :Proceed with CI/CD pipeline;\\n  else (No)\\n    :Fail the build with validation errors;\\n  endif\\nelse (No)\\n  :Skip schema validation;\\n  :Proceed with CI/CD pipeline;\\nendif\\n\\nstop\\n\\n@enduml\n```\n\n----------------------------------------\n\nTITLE: Modeling System Context with C4-PlantUML - PlantUML\nDESCRIPTION: This PlantUML code block defines a System Context Diagram for the A/B Platform utilizing the C4-PlantUML library. The diagram displays the primary human user (Experiment Manager), the platform as a system, and its integration with an external metrics system (Prometheus). Dependencies include the PlantUML rendering engine and access to the C4_Context.puml include file. Inputs are not programmatic; the output is a system context diagram for documentation. Ensure internet access for external URL includes when rendering.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/boundaries/platform/ab_platform/docs/ADR/decisions/0003-c4-model.md#_snippet_0\n\nLANGUAGE: plantuml\nCODE:\n```\n@startuml\\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml\\n\\ntitle System Context - A/B Platform\\n\\nPerson(user, \\\"Experiment Manager\\\", \\\"Manages test cases and experiments.\\\")\\nSystem(ab_platform, \\\"A/B Platform\\\", \\\"Platform to run and manage A/B tests.\\\")\\nSystem_Ext(prometheus, \\\"Prometheus\\\", \\\"Collects and monitors platform metrics.\\\")\\n\\nRel(user, ab_platform, \\\"Creates and manages test cases\\\")\\nRel(ab_platform, prometheus, \\\"Sends experiment metrics for monitoring\\\")\\n@enduml\n```\n\n----------------------------------------\n\nTITLE: Visualizing Worker Pool Architecture with Mermaid\nDESCRIPTION: This mermaid diagram illustrates the structure of a worker pool. It shows multiple workers (W1-W5) processing tasks (Task1-Task5) in parallel, with all tasks converging to a 'Done' state before producing a final Result.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/pkg/concurrency/worker_pool/README.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n\nsubgraph Worker Pool\nW1-->Task1\nW2-->Task2\nW3-->Task3\nW4-->Task4\nW5-->Task5\nend\n \nTask1-->Done\nTask2-->Done\nTask3-->Done\nTask4-->Done\nTask5-->Done\nDone-->Result\n```\n\n----------------------------------------\n\nTITLE: Including Presets and Services in PlantUML Diagrams - PlantUML\nDESCRIPTION: This snippet demonstrates how to structure a PlantUML file for infrastructure documentation by including external presets and service definition files. The dependencies are included from public URLs: a common C4 model preset, a Cloudflare extensions file, and a Cloudflare service definition. No input parameters are required. The file is intended to be further extended with entity and relationship definitions, with the primary output being improved modularity and maintainability of PlantUML diagrams. Limitations: the file only sets up includes and does not define diagram elements itself.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/docs/c4/containers/services/cloudflare/README.md#_snippet_0\n\nLANGUAGE: plantuml\nCODE:\n```\n!include https://raw.githubusercontent.com/shortlink-org/shortlink/main/docs/c4/containers/preset/common.puml\n\n!include services/cloudflare/ext.puml\n!include services/cloudflare/service.puml\n```\n\n----------------------------------------\n\nTITLE: Visualizing Microservice Protocol Routing with Mermaid - Mermaid\nDESCRIPTION: This mermaid diagram illustrates how client applications interact with various API Gateway Services, each supporting a different protocol (HTTP REST, GraphQL, gRPC, CloudEvents, and WebSocket), with each gateway connected to dedicated microservices. Mermaid is required to render the diagram, and no additional dependencies are needed. The inputs are protocol types and service names, and the output is a visual graph representation showing the architecture's flow, facilitating architectural discussions and documentation.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/boundaries/api/api-gateway/docs/ADR/decisions/0003-adding-websocket-protocol-support.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\\n    A[Client Applications] --> |HTTP REST| B[REST API Gateway Service]\\n    A --> |GraphQL| C[GraphQL API Gateway Service]\\n    A --> |gRPC| D[gRPC API Gateway Service]\\n    A --> |CloudEvents| E[CloudEvents API Gateway Service]\\n    A --> |WebSocket| F[WebSocket API Gateway Service]\\n    B --> G[Microservice 1]\\n    C --> H[Microservice 2]\\n    D --> I[Microservice 3]\\n    E --> J[Microservice 4]\\n    F --> K[Microservice 5]\\n    G --> B\\n    H --> C\\n    I --> D\\n    J --> E\\n    K --> F\n```\n\n----------------------------------------\n\nTITLE: Visualizing API Gateway Architecture with Mermaid Diagram\nDESCRIPTION: A diagram showing the flow of communication between client applications, the API Gateway Service, and multiple microservices. It illustrates support for multiple protocols including HTTP REST, GraphQL, gRPC, and CloudEvents.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/boundaries/api/api-gateway/docs/ADR/decisions/0001-init.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    A[Client Applications] --> |HTTP REST| B[API Gateway Service]\n    A --> |GraphQL| B\n    A --> |gRPC| B\n    A --> |CloudEvents| B\n    B --> C[Microservice 1]\n    B --> D[Microservice 2]\n    B --> E[Microservice 3]\n    C --> B\n    D --> B\n    E --> B\n```\n\n----------------------------------------\n\nTITLE: Visualizing Docker Build Cache Layer Flow with Mermaid in Markdown\nDESCRIPTION: This Mermaid diagram illustrates the decision points and relationships between Docker build stages in a multi-platform pipeline, specifically distinguishing between CI and development environments for determining the caching strategy. No external dependencies are required, except for a Markdown viewer that supports Mermaid diagrams. The graph details how environment variables like APP_ENV guide selection of builder images and how they connect to the eventual production image output.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/ops/docs/ADR/decisions/0010-docker-tips.md#_snippet_0\n\nLANGUAGE: Mermaid\nCODE:\n```\ngraph TD;\n  APP_ENV(\"$APP_ENV decision point\") -->|ci| CI_Builder[\"CI Builder as Cache\"]\n  APP_ENV -->|development| Development_Builder[\"Development Builder as Cache\"]\n  CI_Builder --> Production[\"Production Image\"]\n  Development_Builder --> Production\n\n```\n\n----------------------------------------\n\nTITLE: Including C4 Model Presets and Service Diagrams - PlantUML\nDESCRIPTION: This PlantUML snippet imports a common C4 model preset from a remote repository and locally includes additional extension and service diagram definitions for the 'bff-link' service. Dependencies include network access to fetch remote PlantUML files and the presence of local diagram files at the specified relative paths. No additional parameters are required; the code is used to assemble complex service diagrams by composition.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/docs/c4/containers/services/bff-web/README.md#_snippet_0\n\nLANGUAGE: PlantUML\nCODE:\n```\n!include https://raw.githubusercontent.com/shortlink-org/shortlink/main/docs/c4/containers/preset/common.puml\n\n!include services/bff-link/ext.puml\n!include services/bff-link/service.puml\n```\n\n----------------------------------------\n\nTITLE: Including C4 PlantUML Presets and Service Definitions - PlantUML\nDESCRIPTION: This snippet prepares a PlantUML diagram environment by including a remote C4 model preset as well as two local files defining extensions and service elements. It requires an accessible network for remote file inclusion and proper file path setup within the repository for local includes. The snippet does not produce output by itself but configures the environment for subsequent PlantUML diagram content.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/docs/c4/containers/services/support/README.md#_snippet_0\n\nLANGUAGE: plantuml\nCODE:\n```\n!include https://raw.githubusercontent.com/shortlink-org/shortlink/main/docs/c4/containers/preset/common.puml\n\n!include services/support/ext.puml\n!include services/support/service.puml\n```\n\n----------------------------------------\n\nTITLE: Including C4 Container Preset and Bot Services in PlantUML - PlantUML\nDESCRIPTION: This snippet demonstrates the use of the !include directive in PlantUML to import a shared C4 container preset from a remote GitHub repository and two local service definitions for bot extension and bot service logic. Dependencies include access to the referenced URLs and the local relative paths. Inputs are the URLs and paths to PlantUML files, and outputs are the expanded diagram components. Requires PlantUML tooling and internet connectivity for remote includes; accuracy depends on the included files' correctness.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/docs/c4/containers/services/bot/README.md#_snippet_0\n\nLANGUAGE: PlantUML\nCODE:\n```\n!include https://raw.githubusercontent.com/shortlink-org/shortlink/main/docs/c4/containers/preset/common.puml\n\n!include services/bot/ext.puml\n!include services/bot/service.puml\n```\n\n----------------------------------------\n\nTITLE: Including Preset and Service Modules in PlantUML Configuration\nDESCRIPTION: This snippet demonstrates the use of PlantUML's !include directive to import a shared architectural preset from the Shortlink project's public repository and additional local chat service definitions for C4 modeling. The preset file provides standardized architecture elements, while the service files define system extensions and the main chat service structure. Inputs include valid PlantUML file paths or URLs, and the main output is a composed UML diagram when rendered. Requires an environment with PlantUML and internet access for remote includes. Constraints: relative paths depend on repository structure; remote availability of included files is needed.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/docs/c4/containers/services/chat/README.md#_snippet_0\n\nLANGUAGE: plantuml\nCODE:\n```\n!include https://raw.githubusercontent.com/shortlink-org/shortlink/main/docs/c4/containers/preset/common.puml\n\n!include services/chat/ext.puml\n!include services/chat/service.puml\n```\n\n----------------------------------------\n\nTITLE: Including PlantUML Dependencies for AI Plugin Service Diagram\nDESCRIPTION: This PlantUML code includes external files to set up the common preset and define the AI Plugin service diagram. It uses remote includes from the project's GitHub repository.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/docs/c4/containers/services/ai-plugin/README.md#_snippet_0\n\nLANGUAGE: plantuml\nCODE:\n```\n!include https://raw.githubusercontent.com/shortlink-org/shortlink/main/docs/c4/containers/preset/common.puml\n\n!include services/ai-plugin/ext.puml\n!include services/ai-plugin/service.puml\n```\n\n----------------------------------------\n\nTITLE: Importing PlantUML Components for Newsletter Service Diagrams\nDESCRIPTION: This PlantUML code imports necessary diagram components for visualizing the newsletter service architecture. It includes a common preset followed by specific components for the newsletter service's external dependencies, main service definition, and database configuration.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/docs/c4/containers/services/newsletter/README.md#_snippet_0\n\nLANGUAGE: plantuml\nCODE:\n```\n!include https://raw.githubusercontent.com/shortlink-org/shortlink/main/docs/c4/containers/preset/common.puml\n\n!include services/newsletter/ext.puml\n!include services/newsletter/service.puml\n!include services/newsletter/db.puml\n```\n\n----------------------------------------\n\nTITLE: Including PlantUML Container Presets and Service Diagrams - PlantUML\nDESCRIPTION: This PlantUML snippet includes a remote common container preset and two local service diagrams. It relies on the remote \"common.puml\" for consistent visualization presets and aggregates extended and core service definitions for the \"merch\" service. Dependencies include network access for the remote !include and the existence of the referenced local files. Inputs are the included PlantUML files; the output is the composed UML diagram visualizing the combined service architecture. This approach assumes the included files are correctly formatted and accessible.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/docs/c4/containers/services/merch/README.md#_snippet_0\n\nLANGUAGE: PlantUML\nCODE:\n```\n```plantuml\\n!include https://raw.githubusercontent.com/shortlink-org/shortlink/main/docs/c4/containers/preset/common.puml\\n\\n!include services/merch/ext.puml\\n!include services/merch/service.puml\\n```\n```\n\n----------------------------------------\n\nTITLE: Including PlantUML Diagrams for API Gateway\nDESCRIPTION: This snippet includes PlantUML diagram definitions from external sources and local files. It imports common presets and specific diagrams for the API Gateway service.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/docs/c4/containers/services/api-gateway/README.md#_snippet_0\n\nLANGUAGE: plantuml\nCODE:\n```\n!include https://raw.githubusercontent.com/shortlink-org/shortlink/main/docs/c4/containers/preset/common.puml\n\n!include services/api-gateway/ext.puml\n!include services/api-gateway/service.puml\n```\n\n----------------------------------------\n\nTITLE: Including C4 Container Diagram Presets and Actor Definitions in PlantUML\nDESCRIPTION: This PlantUML snippet imports a C4-Model container diagram preset from a remote repository and several local actor definition files. The includes ensure the diagram uses a standardized style and that domain-specific actors (courier, customer, manager, moderator, support, and event) are defined and available for later use in diagrams. Dependencies include access to the specified external URL and the presence of referenced local files within the 'actors' directory. No parameters are required, and the input is a series of include directives. The output is a fully configured PlantUML environment for creating system and container diagrams. Limitations include possible network or file system errors if any include target is missing.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/docs/c4/containers/actors/README.md#_snippet_0\n\nLANGUAGE: PlantUML\nCODE:\n```\n!include https://raw.githubusercontent.com/shortlink-org/shortlink/main/docs/c4/containers/preset/common.puml\n\n!include actors/courier.puml\n\n!include actors/customer.puml\n\n!include actors/manager.puml\n\n!include actors/moderator.puml\n\n!include actors/support.puml\n\n!include actors/event.puml\n```\n\n----------------------------------------\n\nTITLE: Installing Molecule Docker Driver via pip - Bash\nDESCRIPTION: This bash command installs the Molecule Docker driver using pip, an essential tool for testing Ansible roles and collections in isolated Docker environments. It is recommended to use a Python virtual environment for the installation to prevent dependency conflicts, but users may also add the '--user' flag to install packages to the user site. The command installs the 'molecule[docker]' bundle, pulling Molecule core and Docker driver extras as dependencies. The user should have pip and Docker Engine pre-installed.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/ops/ansible/playbooks/roles/nginx/molecule/default/INSTALL.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install 'molecule[docker]'\n```\n\n----------------------------------------\n\nTITLE: Reconfiguring and Managing GitLab Omnibus via Docker - Bash\nDESCRIPTION: Runs core administrative commands ('reconfigure', 'restart', and 'status') for the GitLab Omnibus package from within its Docker container. These commands are essential for applying configuration changes, restarting services, and checking GitLab's current operational status. Requires a running container named 'gitlab' and appropriate privileges. Outputs status information, applies configuration changes, or triggers service restarts as needed.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/ops/docker-compose/tooling/saas/gitlab/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it gitlab gitlab-ctl reconfigure\ndocker exec -it gitlab gitlab-ctl restart\ndocker exec -it gitlab gitlab-ctl status\n```\n\n----------------------------------------\n\nTITLE: Retrieving GitLab Root Password via Docker - Bash\nDESCRIPTION: Retrieves the initial GitLab root password by executing a `cat` command inside the running GitLab container using `docker exec -it`. Requires Docker to be installed and running, and a container named 'gitlab' to exist. Outputs the contents of '/etc/gitlab/initial_root_password' to the terminal, aiding in administrative access after setup.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/ops/docker-compose/tooling/saas/gitlab/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it gitlab cat /etc/gitlab/initial_root_password\n```\n\n----------------------------------------\n\nTITLE: Shell Output Example for Specification Pattern\nDESCRIPTION: Shows example output from a specification pattern implementation, demonstrating how the pattern filters users based on a name-based rule. The output includes both matching and non-matching cases.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/pkg/pattern/specification/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Example print:\n\n$> User Alice satisfies the specification\n$> User Bob does not satisfy the specification: Specification failed: User Bob's name does not start with 'A'\n$> User Charlie does not satisfy the specification: Specification failed: User Charlie's name does not start with 'A'\n$> Filtered users: [0xc0001080c0]\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting GitLab Socket Issues with Docker - Bash\nDESCRIPTION: Provides manual recovery steps for resolving socket-related problems in a GitLab setup. The first command deletes the problematic socket file from the host filesystem, while the second restarts the GitLab Docker container to restore service operations. The steps assume access to the file path './data/gitlab/data/gitlab-rails/sockets/gitlab.socket' and require Docker installed.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/ops/docker-compose/tooling/saas/gitlab/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Problem with socket\nrm ./data/gitlab/data/gitlab-rails/sockets/gitlab.socket\ndocker restart gitlab\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Kubernetes Pods Across All Namespaces (Shell)\nDESCRIPTION: This script, named 'cleanup_pods.sh', is designed to clean up pods across all namespaces in a Kubernetes cluster. It likely iterates through all namespaces and removes pods based on certain criteria, helping to maintain cluster health and resource availability.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/ops/script/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncleanup_pods.sh\n```\n\n----------------------------------------\n\nTITLE: Installing and Building k6 with Distributed Tracing Plugin\nDESCRIPTION: Commands to install k6 and build it with the xk6-distributed-tracing plugin. This setup enables the use of k6 for integration testing with distributed tracing capabilities.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/docs/ADR/decisions/0020-k6.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo install go.k6.io/xk6/cmd/xk6@latest\nxk6 build --with github.com/grafana/xk6-distributed-tracing@latest\n```\n\n----------------------------------------\n\nTITLE: Example Ansible Role Usage Playbook\nDESCRIPTION: Demonstrates how to include and use the role in an Ansible playbook with parameters.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/ops/ansible/playbooks/roles/nginx/README.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- hosts: servers\n  roles:\n     - { role: username.rolename, x: 42 }\n```\n\n----------------------------------------\n\nTITLE: Defining Pip Package and Executable in YAML\nDESCRIPTION: These variables define the package name for Pip installation and the executable name. They can be customized based on the Python version and system requirements.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/ops/ansible/playbooks/roles/geerlingguy.pip/README.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npip_package: python3-pip\n\npip_executable: pip3\n```\n\n----------------------------------------\n\nTITLE: Exporting Template and Creating New ADR - adr-tools Shell Script\nDESCRIPTION: This snippet demonstrates how to configure the 'adr-tools' environment by setting the ADR_TEMPLATE variable to point to a custom template, and create a new Architecture Decision Record by running the 'adr new' command. It requires that the 'adr-tools' are installed and available in the user's environment. 'ADR_TEMPLATE' should contain the absolute path to the template file, while 'adr new' expects a short descriptive title for the new decision; outputs and resulting files will be created in the ADR directory. The process should be run in a shell supporting environment variables and requires file system access.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/docs/ADR/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexport ADR_TEMPLATE=${PWD}/docs/ADR/template/template.md\nadr new Implement as Unix shell scripts\n```\n\n----------------------------------------\n\nTITLE: Creating New ADR Using Shell Commands\nDESCRIPTION: Commands to set up and create a new Architectural Decision Record using the ADR tools. Sets the template path and creates a new ADR titled 'Implement as Unix shell scripts'.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/ops/docs/ADR/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexport ADR_TEMPLATE=${PWD}/docs/ADR/template/template.md\nadr new Implement as Unix shell scripts\n```\n\n----------------------------------------\n\nTITLE: Building and Operating with Makefile in Bash\nDESCRIPTION: Demonstrates how to use Makefile to display help messages for all supported commands and targets, facilitating plugin build and deployment. Requires Make and a properly defined Makefile. The input command displays a summary of available operations for the user within a terminal.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/pkg/golangci-lint/value-object/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake help # show help message with all commands and targets\n```\n\n----------------------------------------\n\nTITLE: Demonstrating a Public Setter Method in Go\nDESCRIPTION: Shows an example of a Go value object struct with a public setter method, which is not recommended when aiming for immutable or encapsulated domain objects. No external dependencies are required. The SetValue method exposes value mutation to any package, violating value-object plugin linting rules.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/pkg/golangci-lint/value-object/README.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage example\n\ntype ValueObject struct {\n    value int\n}\n\n// Public setter method - not recommended\nfunc (v *ValueObject) SetValue(val int) {\n    v.value = val\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring ArgoCD Directory Layout with Bash Tree Output - Bash\nDESCRIPTION: This snippet demonstrates the directory layout for organizing ArgoCD configuration files using a tree-like structure in Bash. It highlights the categorization of configurations by draft, infrastructure, knative, kustomize patches, and boundaries for different shortlink services. No specific dependencies are required beyond a Unix-like shell with basic file and directory commands. The output helps teams maintain clarity and organization in their ArgoCD configuration management.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/ops/argocd/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n.\\n├── draft              # Draft configurations\\n├── infrastructure     # ArgoCD applications for infrastructure components\\n├── knative            # ArgoCD applications for knative components\\n├── kustomize          # Kustomize patches for ArgoCD applications\\n├── shortlink-link     # ArgoCD applications for link boundary components\\n├── shortlink-billing  # ArgoCD applications for billing boundary components\\n├── shortlink-shop     # ArgoCD applications for shop boundary components\\n└── shortlink          # ArgoCD applications for common shortlink components\n```\n\n----------------------------------------\n\nTITLE: Importing Cache Package in Go\nDESCRIPTION: Shows how to import the cache package and its dependencies in a Go application.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/pkg/cache/README.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"github.com/go-redis/cache/v9\"\n\n\t\"github.com/shortlink-org/shortlink/pkg/cache\"\n)\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Dependencies with Hash Pinning in requirements.txt (plaintext)\nDESCRIPTION: This snippet lists several Python packages, each with a version and a set of SHA256 hashes, as output from tools like pip-tools or pip-compile. It is used by pip to install exact versions of dependencies while validating their integrity via hashes. No code execution occurs; this file is only read by pip or automation tools during install. All lines containing backslashes indicate lines continuation for command compatibility. Key dependencies listed include 'asgiref', 'fonttools', 'matplotlib', and 'numpy', each followed by securely specified hashes for integrity checking. No parameters or runtime input/output involved, but each referenced package must be available on a supported index.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/poc/ml-diff/ml/requirements.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n#    uv pip compile pyproject.toml --generate-hashes -o requirements.txt --no-deps\nasgiref==3.8.1 \\\n    --hash=sha256:3e1e3ecc849832fe52ccf2cb6686b7a55f82bb1d6aee72a58826471390335e47 \\\n    --hash=sha256:c343bd80a0bec947a9860adb4c432ffa7db769836c64238fc34bdc3fec84d590\nfonttools==4.56.0 \\\n    --hash=sha256:003548eadd674175510773f73fb2060bb46adb77c94854af3e0cc5bc70260049 \\\n    --hash=sha256:0073b62c3438cf0058488c002ea90489e8801d3a7af5ce5f7c05c105bee815c3 \\\n    --hash=sha256:1088182f68c303b50ca4dc0c82d42083d176cba37af1937e1a976a31149d4d14 \\\n    --hash=sha256:133bedb9a5c6376ad43e6518b7e2cd2f866a05b1998f14842631d5feb36b5786 \\\n    --hash=sha256:14a3e3e6b211660db54ca1ef7006401e4a694e53ffd4553ab9bc87ead01d0f05 \\\n    --hash=sha256:17f39313b649037f6c800209984a11fc256a6137cbe5487091c6c7187cae4685 \\\n    --hash=sha256:193b86e9f769320bc98ffdb42accafb5d0c8c49bd62884f1c0702bc598b3f0a2 \\\n    --hash=sha256:2d351275f73ebdd81dd5b09a8b8dac7a30f29a279d41e1c1192aedf1b6dced40 \\\n    --hash=sha256:300c310bb725b2bdb4f5fc7e148e190bd69f01925c7ab437b9c0ca3e1c7cd9ba \\\n    --hash=sha256:331954d002dbf5e704c7f3756028e21db07097c19722569983ba4d74df014000 \\\n    --hash=sha256:38b947de71748bab150259ee05a775e8a0635891568e9fdb3cdd7d0e0004e62f \\\n    --hash=sha256:3cf4f8d2a30b454ac682e12c61831dcb174950c406011418e739de592bbf8f76 \\\n    --hash=sha256:3fd3fccb7b9adaaecfa79ad51b759f2123e1aba97f857936ce044d4f029abd71 \\\n    --hash=sha256:442ad4122468d0e47d83bc59d0e91b474593a8c813839e1872e47c7a0cb53b10 \\\n    --hash=sha256:47b5e4680002ae1756d3ae3b6114e20aaee6cc5c69d1e5911f5ffffd3ee46c6b \\\n    --hash=sha256:53f5e9767978a4daf46f28e09dbeb7d010319924ae622f7b56174b777258e5ba \\\n    --hash=sha256:62b4c6802fa28e14dba010e75190e0e6228513573f1eeae57b11aa1a39b7e5b1 \\\n    --hash=sha256:62cc1253827d1e500fde9dbe981219fea4eb000fd63402283472d38e7d8aa1c6 \\\n    --hash=sha256:654ac4583e2d7c62aebc6fc6a4c6736f078f50300e18aa105d87ce8925cfac31 \\\n    --hash=sha256:661a8995d11e6e4914a44ca7d52d1286e2d9b154f685a4d1f69add8418961563 \\\n    --hash=sha256:6c1d38642ca2dddc7ae992ef5d026e5061a84f10ff2b906be5680ab089f55bb8 \\\n    --hash=sha256:6e81c1cc80c1d8bf071356cc3e0e25071fbba1c75afc48d41b26048980b3c771 \\\n    --hash=sha256:705837eae384fe21cee5e5746fd4f4b2f06f87544fa60f60740007e0aa600311 \\\n    --hash=sha256:7ef04bc7827adb7532be3d14462390dd71287644516af3f1e67f1e6ff9c6d6df \\\n    --hash=sha256:86b2a1013ef7a64d2e94606632683f07712045ed86d937c11ef4dde97319c086 \\\n    --hash=sha256:8d1613abd5af2f93c05867b3a3759a56e8bf97eb79b1da76b2bc10892f96ff16 \\\n    --hash=sha256:965d0209e6dbdb9416100123b6709cb13f5232e2d52d17ed37f9df0cc31e2b35 \\\n    --hash=sha256:96a4271f63a615bcb902b9f56de00ea225d6896052c49f20d0c91e9f43529a29 \\\n    --hash=sha256:9d94449ad0a5f2a8bf5d2f8d71d65088aee48adbe45f3c5f8e00e3ad861ed81a \\\n    --hash=sha256:9da650cb29bc098b8cfd15ef09009c914b35c7986c8fa9f08b51108b7bc393b4 \\\n    --hash=sha256:a05d1f07eb0a7d755fbe01fee1fd255c3a4d3730130cf1bfefb682d18fd2fcea \\\n    --hash=sha256:a114d1567e1a1586b7e9e7fc2ff686ca542a82769a296cef131e4c4af51e58f4 \\\n    --hash=sha256:a1af375734018951c31c0737d04a9d5fd0a353a0253db5fbed2ccd44eac62d8c \\\n    --hash=sha256:b23d30a2c0b992fb1c4f8ac9bfde44b5586d23457759b6cf9a787f1a35179ee0 \\\n    --hash=sha256:bc871904a53a9d4d908673c6faa15689874af1c7c5ac403a8e12d967ebd0c0dc \\\n    --hash=sha256:bce60f9a977c9d3d51de475af3f3581d9b36952e1f8fc19a1f2254f1dda7ce9c \\\n    --hash=sha256:bd9825822e7bb243f285013e653f6741954d8147427aaa0324a862cdbf4cbf62 \\\n    --hash=sha256:ca7962e8e5fc047cc4e59389959843aafbf7445b6c08c20d883e60ced46370a5 \\\n    --hash=sha256:d0cb73ccf7f6d7ca8d0bc7ea8ac0a5b84969a41c56ac3ac3422a24df2680546f \\\n    --hash=sha256:d54a45d30251f1d729e69e5b675f9a08b7da413391a1227781e2a297fa37f6d2 \\\n    --hash=sha256:d6ca96d1b61a707ba01a43318c9c40aaf11a5a568d1e61146fafa6ab20890793 \\\n    --hash=sha256:d6f195c14c01bd057bc9b4f70756b510e009c83c5ea67b25ced3e2c38e6ee6e9 \\\n    --hash=sha256:e2cad98c94833465bcf28f51c248aaf07ca022efc6a3eba750ad9c1e0256d278 \\\n    --hash=sha256:e2e993e8db36306cc3f1734edc8ea67906c55f98683d6fd34c3fc5593fdbba4c \\\n    --hash=sha256:e9270505a19361e81eecdbc2c251ad1e1a9a9c2ad75fa022ccdee533f55535dc \\\n    --hash=sha256:f20e2c0dfab82983a90f3d00703ac0960412036153e5023eed2b4641d7d5e692 \\\n    --hash=sha256:f36a0868f47b7566237640c026c65a86d09a3d9ca5df1cd039e30a1da73098a0 \\\n    --hash=sha256:f59746f7953f69cc3290ce2f971ab01056e55ddd0fb8b792c31a8acd7fee2d28 \\\n    --hash=sha256:fa760e5fe8b50cbc2d71884a1eff2ed2b95a005f02dda2fa431560db0ddd927f \\\n    --hash=sha256:ffda9b8cd9cb8b301cae2602ec62375b59e2e2108a117746f12215145e3f786c\nmatplotlib==3.10.1 \\\n    --hash=sha256:01e63101ebb3014e6e9f80d9cf9ee361a8599ddca2c3e166c563628b39305dbb \\\n    --hash=sha256:02582304e352f40520727984a5a18f37e8187861f954fea9be7ef06569cf85b4 \\\n    --hash=sha256:057206ff2d6ab82ff3e94ebd94463d084760ca682ed5f150817b859372ec4401 \\\n    --hash=sha256:0721a3fd3d5756ed593220a8b86808a36c5031fce489adb5b31ee6dbb47dd5b2 \\\n    --hash=sha256:0f69dc9713e4ad2fb21a1c30e37bd445d496524257dfda40ff4a8efb3604ab5c \\\n    --hash=sha256:11b65088c6f3dae784bc72e8d039a2580186285f87448babb9ddb2ad0082993a \\\n    --hash=sha256:1985ad3d97f51307a2cbfc801a930f120def19ba22864182dacef55277102ba6 \\\n    --hash=sha256:19b06241ad89c3ae9469e07d77efa87041eac65d78df4fcf9cac318028009b01 \\\n    --hash=sha256:2589659ea30726284c6c91037216f64a506a9822f8e50592d48ac16a2f29e044 \\\n    --hash=sha256:35e87384ee9e488d8dd5a2dd7baf471178d38b90618d8ea147aced4ab59c9bea \\\n    --hash=sha256:3f06bad951eea6422ac4e8bdebcf3a70c59ea0a03338c5d2b109f57b64eb3972 \\\n    --hash=sha256:4c59af3e8aca75d7744b68e8e78a669e91ccbcf1ac35d0102a7b1b46883f1dd7 \\\n    --hash=sha256:4f0647b17b667ae745c13721602b540f7aadb2a32c5b96e924cd4fea5dcb90f1 \\\n    --hash=sha256:56c5d9fcd9879aa8040f196a235e2dcbdf7dd03ab5b07c0696f80bc6cf04bedd \\\n    --hash=sha256:5d45d3f5245be5b469843450617dcad9af75ca50568acf59997bed9311131a0b \\\n    --hash=sha256:648406f1899f9a818cef8c0231b44dcfc4ff36f167101c3fd1c9151f24220fdc \\\n    --hash=sha256:66e907a06e68cb6cfd652c193311d61a12b54f56809cafbed9736ce5ad92f107 \\\n    --hash=sha256:7e496c01441be4c7d5f96d4e40f7fca06e20dcb40e44c8daa2e740e1757ad9e6 \\\n    --hash=sha256:8e875b95ac59a7908978fe307ecdbdd9a26af7fa0f33f474a27fcf8c99f64a19 \\\n    --hash=sha256:8e8e25b1209161d20dfe93037c8a7f7ca796ec9aa326e6e4588d8c4a5dd1e473 \\\n    --hash=sha256:a144867dd6bf8ba8cb5fc81a158b645037e11b3e5cf8a50bd5f9917cb863adfe \\\n    --hash=sha256:a3dfb036f34873b46978f55e240cff7a239f6c4409eac62d8145bad3fc6ba5a3 \\\n    --hash=sha256:a97ff127f295817bc34517255c9db6e71de8eddaab7f837b7d341dee9f2f587f \\\n    --hash=sha256:aa3854b5f9473564ef40a41bc922be978fab217776e9ae1545c9b3a5cf2092a3 \\\n    --hash=sha256:bc411ebd5889a78dabbc457b3fa153203e22248bfa6eedc6797be5df0164dbf9 \\\n    --hash=sha256:c42eee41e1b60fd83ee3292ed83a97a5f2a8239b10c26715d8a6172226988d7b \\\n    --hash=sha256:c96f2c2f825d1257e437a1482c5a2cf4fee15db4261bd6fc0750f81ba2b4ba3d \\\n    --hash=sha256:cfd414bce89cc78a7e1d25202e979b3f1af799e416010a20ab2b5ebb3a02425c \\\n    --hash=sha256:d0673b4b8f131890eb3a1ad058d6e065fb3c6e71f160089b65f8515373394698 \\\n    --hash=sha256:d3809916157ba871bcdd33d3493acd7fe3037db5daa917ca6e77975a94cef779 \\\n    --hash=sha256:dc6ab14a7ab3b4d813b88ba957fc05c79493a037f54e246162033591e770de6f \\\n    --hash=sha256:e8d2d0e3881b129268585bf4765ad3ee73a4591d77b9a18c214ac7e3a79fb2ba \\\n    --hash=sha256:e9b4bb156abb8fa5e5b2b460196f7db7264fc6d62678c03457979e7d5254b7be \\\n    --hash=sha256:ff2ae14910be903f4a24afdbb6d7d3a6c44da210fc7d42790b87aeac92238a16\nnumpy==2.2.5 \\\n    --hash=sha256:0255732338c4fdd00996c0421884ea8a3651eea555c3a56b84892b66f696eb70 \\\n    --hash=sha256:02f226baeefa68f7d579e213d0f3493496397d8f1cff5e2b222af274c86a552a \\\n    --hash=sha256:059b51b658f4414fff78c6d7b1b4e18283ab5fa56d270ff212d5ba0c561846f4 \\\n    --hash=sha256:0bcb1d057b7571334139129b7f941588f69ce7c4ed15a9d6162b2ea54ded700c \\\n    --hash=sha256:0cd48122a6b7eab8f06404805b1bd5856200e3ed6f8a1b9a194f9d9054631beb \\\n    --hash=sha256:19f4718c9012e3baea91a7dba661dcab2451cda2550678dc30d53acb91a7290f \\\n    --hash=sha256:1a161c2c79ab30fe4501d5a2bbfe8b162490757cf90b7f05be8b80bc02f7bb8e \\\n    --hash=sha256:1f4a922da1729f4c40932b2af4fe84909c7a6e167e6e99f71838ce3a29f3fe26 \\\n    --hash=sha256:261a1ef047751bb02f29dfe337230b5882b54521ca121fc7f62668133cb119c9 \\\n    --hash=sha256:262d23f383170f99cd9191a7c85b9a50970fe9069b2f8ab5d786eca8a675d60b \\\n    --hash=sha256:2ba321813a00e508d5421104464510cc962a6f791aa2fca1c97b1e65027da80d \\\n    --hash=sha256:2c1a1c6ccce4022383583a6ded7bbcda22fc635eb4eb1e0a053336425ed36dfa \\\n    --hash=sha256:352d330048c055ea6db701130abc48a21bec690a8d38f8284e00fab256dc1376 \\\n    --hash=sha256:369e0d4647c17c9363244f3468f2227d557a74b6781cb62ce57cf3ef5cc7c610 \\\n    --hash=sha256:36ab5b23915887543441efd0417e6a3baa08634308894316f446027611b53bf1 \\\n    --hash=sha256:37e32e985f03c06206582a7323ef926b4e78bdaa6915095ef08070471865b906 \\\n    --hash=sha256:3a801fef99668f309b88640e28d261991bfad9617c27beda4a3aec4f217ea073 \\\n    --hash=sha256:3d14b17b9be5f9c9301f43d2e2a4886a33b53f4e6fdf9ca2f4cc60aeeee76372 \\\n    --hash=sha256:422cc684f17bc963da5f59a31530b3936f57c95a29743056ef7a7903a5dbdf88 \\\n    --hash=sha256:4520caa3807c1ceb005d125a75e715567806fed67e315cea619d5ec6e75a4191 \\\n    --hash=sha256:47834cde750d3c9f4e52c6ca28a7361859fcaf52695c7dc3cc1a720b8922683e \\\n    --hash=sha256:47f9ed103af0bc63182609044b0490747e03bd20a67e391192dde119bf43d52f \\\n    --hash=sha256:498815b96f67dc347e03b719ef49c772589fb74b8ee9ea2c37feae915ad6ebda \\\n    --hash=sha256:54088a5a147ab71a8e7fdfd8c3601972751ded0739c6b696ad9cb0343e21ab73 \\\n    --hash=sha256:55f09e00d4dccd76b179c0f18a44f041e5332fd0e022886ba1c0bbf3ea4a18d0 \\\n    --hash=sha256:5a0ac90e46fdb5649ab6369d1ab6104bfe5854ab19b645bf5cda0127a13034ae \\\n    --hash=sha256:6411f744f7f20081b1b4e7112e0f4c9c5b08f94b9f086e6f0adf3645f85d3a4d \\\n    --hash=sha256:6413d48a9be53e183eb06495d8e3b006ef8f87c324af68241bbe7a39e8ff54c3 \\\n    --hash=sha256:7451f92eddf8503c9b8aa4fe6aa7e87fd51a29c2cfc5f7dbd72efde6c65acf57 \\\n```\n\n----------------------------------------\n\nTITLE: Displaying Supported Versions Table in Markdown\nDESCRIPTION: This snippet shows a markdown table that lists the supported versions of the ShortLink project for security updates. It indicates that version 0.13.0 is supported, while versions below 13.0 are not.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/SECURITY.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Version | Supported          |\n| ------- | ------------------ |\n| 0.13.0   | :white_check_mark: |\n| < 13.0   | :x:                |\n```\n\n----------------------------------------\n\nTITLE: Visualizing Decision Process with Mermaid Diagram - Mermaid\nDESCRIPTION: This Mermaid code snippet renders a flowchart diagram that visualizes the tool selection and decision-making process for remote Kubernetes development in the ADR. It outlines the evaluation of Skaffold, Devfile.io, and GitHub Codespaces as options, showing the selection pathway and final implementation. No dependencies are needed for the diagram itself, but rendering requires a Markdown viewer or tool that supports Mermaid diagrams. Input is interpreted by the Mermaid processor; output is a flowchart visualization to clarify the organization’s decision workflow.\nSOURCE: https://github.com/shortlink-org/shortlink/blob/main/docs/ADR/decisions/0024-selecting-a-development-tool-for-remote-machine.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n  A[Developer Needs] --> B[Skaffold]\n  A --> C[Devfile.io]\n  A --> D[GitHub Codespaces]\n  B --> E[Selected Tool]\n  C -->|Not selected| E\n  D -->|Not selected| E\n  E --> F[Implemented in Workflow]\n```"
  }
]