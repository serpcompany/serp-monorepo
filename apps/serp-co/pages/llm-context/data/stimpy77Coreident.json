[
  {
    "owner": "stimpy77",
    "repo": "coreident",
    "content": "TITLE: Initializing CoreIdent Services in ASP.NET Core\nDESCRIPTION: Demonstrates the setup of CoreIdent services in Program.cs, including configuration binding, dependency injection setup, and authentication/authorization configuration. Shows proper service registration order for EF Core integration.\nSOURCE: https://github.com/stimpy77/coreident/blob/main/docs/Developer_Training_Guide.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddOptions<CoreIdentOptions>()\n    .Bind(builder.Configuration.GetSection(\"CoreIdent\"))\n    .ValidateDataAnnotations()\n    .ValidateOnStart();\n\nbuilder.Services.AddCoreIdent();\n\nbuilder.Services.AddAuthentication().AddJwtBearer();\nbuilder.Services.AddAuthorization();\n\nvar app = builder.Build();\n```\n\n----------------------------------------\n\nTITLE: Configuring CoreIdent Options in appsettings.json\nDESCRIPTION: JSON configuration for CoreIdent in appsettings.json. This includes essential settings such as the issuer URI, audience, signing key secret, token lifetimes, and optional security settings for token family tracking and theft detection.\nSOURCE: https://github.com/stimpy77/coreident/blob/main/README.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ConnectionStrings\": {\n     // Add your DB connection string if using EF Core\n    \"DefaultConnection\": \"DataSource=coreident.db;Cache=Shared\"\n  },\n  \"CoreIdent\": {\n    \"Issuer\": \"https://localhost:5001\", // IMPORTANT: Replace with your actual issuer URI (HTTPS recommended)\n    \"Audience\": \"https://localhost:5001\",             // IMPORTANT: Replace with your API audience identifier\n    \"SigningKeySecret\": \"REPLACE_THIS_WITH_A_VERY_STRONG_AND_SECRET_KEY_32_BYTES_OR_LONGER\", // MUST be strong, unique, >= 32 Bytes (256 bits) for HS256, and kept secret!\n    \"AccessTokenLifetime\": \"00:15:00\",  // 15 minutes\n    \"RefreshTokenLifetime\": \"7.00:00:00\", // 7 days\n    \"ConsumedTokenRetentionPeriod\": \"30.00:00:00\", // Optional: How long to keep consumed tokens (for audit/theft detection) before cleanup. Default: 30 days.\n    \"TokenSecurity\": { // Optional: Security settings\n      \"EnableTokenFamilyTracking\": true, // Default=true (Recommended). Set to false to disable family tracking & revocation on theft detection.\n      \"TokenTheftDetectionMode\": \"RevokeFamily\" // Default. Options: Silent, RevokeFamily, RevokeAllUserTokens. Only applies if EnableTokenFamilyTracking=true.\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CoreIdent Settings in appsettings.json\nDESCRIPTION: JSON configuration example for CoreIdent showing essential settings including issuer, audience, signing key, and token lifetimes. Demonstrates proper configuration structure and important security parameters.\nSOURCE: https://github.com/stimpy77/coreident/blob/main/docs/Developer_Training_Guide.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"CoreIdent\": {\n    \"Issuer\": \"https://localhost:7123\",\n    \"Audience\": \"https://localhost:7123\",\n    \"SigningKeySecret\": \"YOUR_VERY_STRONG_AND_SECRET_SIGNING_KEY_HERE_MIN_32_BYTES\",\n    \"AccessTokenLifetime\": \"00:15:00\",\n    \"RefreshTokenLifetime\": \"7.00:00:00\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CoreIdent Services and JWT Authentication in ASP.NET Core\nDESCRIPTION: Sets up CoreIdent core services and JWT Bearer authentication in an ASP.NET Core application. Includes configuration of token validation parameters and authorization services.\nSOURCE: https://github.com/stimpy77/coreident/blob/main/README.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddCoreIdent(options =>\n{\n    builder.Configuration.GetSection(\"CoreIdent\").Bind(options);\n});\n\nbuilder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)\n    .AddJwtBearer(options =>\n    {\n        var coreIdentOptions = builder.Configuration.GetSection(\"CoreIdent\").Get<CoreIdentOptions>()!;\n        if (coreIdentOptions == null || string.IsNullOrEmpty(coreIdentOptions.SigningKeySecret))\n        {\n            throw new InvalidOperationException(\"CoreIdent options (Issuer, Audience, SigningKeySecret) must be configured.\");\n        }\n\n        options.TokenValidationParameters = new TokenValidationParameters\n        {\n            ValidateIssuerSigningKey = true,\n            IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(coreIdentOptions.SigningKeySecret)),\n            ValidateIssuer = true,\n            ValidIssuer = coreIdentOptions.Issuer,\n            ValidateAudience = true,\n            ValidAudience = coreIdentOptions.Audience,\n            ValidateLifetime = true,\n            ClockSkew = TimeSpan.FromMinutes(1)\n        };\n    });\n\nbuilder.Services.AddAuthorization();\n```\n\n----------------------------------------\n\nTITLE: Mapping CoreIdent Endpoints in ASP.NET Core\nDESCRIPTION: Shows how to map CoreIdent's authentication endpoints in an ASP.NET Core application, including proper middleware order and endpoint configuration. Demonstrates setting up authentication paths with custom base URL.\nSOURCE: https://github.com/stimpy77/coreident/blob/main/docs/Developer_Training_Guide.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar app = builder.Build();\n\napp.UseAuthentication();\napp.UseAuthorization();\n\napp.MapCoreIdentEndpoints(\"/auth\");\n\napp.MapGet(\"/\", () => \"Hello World!\");\n\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Pipeline and CoreIdent Endpoints in C#\nDESCRIPTION: This code snippet demonstrates the setup of the HTTP request pipeline, including authentication, authorization, and CoreIdent endpoints. It also includes examples of mapping application endpoints.\nSOURCE: https://github.com/stimpy77/coreident/blob/main/README.md#2025-04-22_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\napp.UseHttpsRedirection();\n\napp.UseAuthentication(); // Must be called before UseAuthorization\napp.UseAuthorization();\n\n// Map CoreIdent endpoints\napp.MapCoreIdentEndpoints(options =>\n{\n    // Example: Customize the base path or specific endpoints\n    // options.BasePath = \"/identity\";\n    // options.RegisterPath = \"signup\";\n});\n\n// Map your application's endpoints/controllers\napp.MapGet(\"/\", () => \"Hello World!\");\n// Example protected endpoint\napp.MapGet(\"/protected\", (ClaimsPrincipal user) => $\"Hello {user.Identity?.Name}! You are authenticated.\")\n   .RequireAuthorization();\n\n\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Implementing AddCoreIdent Extension Method in C#\nDESCRIPTION: Creates an IServiceCollection extension method for adding CoreIdent services. Registers CoreIdentOptions, core services (ITokenService, IUserStore, IPasswordHasher), and necessary ASP.NET Core services.\nSOURCE: https://github.com/stimpy77/coreident/blob/main/DEVPLAN.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic static IServiceCollection AddCoreIdent(this IServiceCollection services, Action<CoreIdentOptions> configureOptions)\n{\n    services.Configure(configureOptions);\n    services.AddSingleton<IValidateOptions<CoreIdentOptions>, CoreIdentOptionsValidator>();\n    services.AddScoped<ITokenService, JwtTokenService>();\n    services.AddSingleton<IUserStore, InMemoryUserStore>();\n    services.AddSingleton<IPasswordHasher, DefaultPasswordHasher>();\n    // Add other necessary services\n    return services;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CoreIdent Services in ASP.NET Core (C#)\nDESCRIPTION: Extension methods for configuring CoreIdent services in an ASP.NET Core application. These methods add CoreIdent to the dependency injection container and set up middleware for handling CoreIdent endpoints.\nSOURCE: https://github.com/stimpy77/coreident/blob/main/Technical_Plan.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nIServiceCollection.AddCoreIdent(Action<CoreIdentOptions> configureOptions)\n```\n\nLANGUAGE: csharp\nCODE:\n```\nIApplicationBuilder.UseCoreIdent()\n```\n\n----------------------------------------\n\nTITLE: Configuring Entity Framework Core Storage for CoreIdent\nDESCRIPTION: Sets up Entity Framework Core storage configuration including connection string and service registration for CoreIdent stores.\nSOURCE: https://github.com/stimpy77/coreident/blob/main/README.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nvar connectionString = builder.Configuration.GetConnectionString(\"DefaultConnection\") ?? \"DataSource=coreident_readme.db;Cache=Shared\";\nbuilder.Services.AddDbContext<YourApplicationDbContext>(options =>\n    options.UseSqlite(connectionString));\n\nbuilder.Services.AddCoreIdentEntityFrameworkStores<YourApplicationDbContext>();\n```\n\n----------------------------------------\n\nTITLE: Mapping External User Model to CoreIdentUser - C#\nDESCRIPTION: This snippet shows how to properly map an external user model to a CoreIdentUser instance within the FindUserByUsernameAsync delegate. It highlights the importance of correctly setting properties that are required for authentication and claims generation.\nSOURCE: https://github.com/stimpy77/coreident/blob/main/docs/Developer_Training_Guide.md#2025-04-22_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\noptions.FindUserByUsernameAsync = async (normalizedUsername, ct) => {\n    var externalUser = await myExternalUserService.FindByUsernameAsync(normalizedUsername);\n    if (externalUser == null) return null;\n\n    // Create and populate the CoreIdentUser\n    return new CoreIdentUser {\n        Id = externalUser.ExternalSystemId, // Map your unique ID\n        UserName = externalUser.PrimaryEmail, // Map the username/email used for login\n        NormalizedUserName = externalUser.PrimaryEmail?.ToUpperInvariant(), // Provide the normalized version if possible\n        // Other properties like LockoutEnabled, AccessFailedCount could be mapped if relevant\n        // --- DO NOT MAP A PASSWORD HASH --- CoreIdent relies on ValidateCredentialsAsync\n    };\n};\n```\n\n----------------------------------------\n\nTITLE: Detailed Configuration of DelegatedUserStore - C#\nDESCRIPTION: This snippet provides a deeper dive into the configuration options for the DelegatedUserStore, detailing how to set up the required and optional delegates. It emphasizes validation and the registration of `DelegatedUserStore` as the `IUserStore` implementation.\nSOURCE: https://github.com/stimpy77/coreident/blob/main/docs/Developer_Training_Guide.md#2025-04-22_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddCoreIdentDelegatedUserStore(options =>\n{\n    // REQUIRED Delegates:\n    options.FindUserByIdAsync = ... // Your logic here\n    options.FindUserByUsernameAsync = ... // Your logic here\n    options.ValidateCredentialsAsync = ... // Your logic here\n\n    // OPTIONAL Delegates:\n    options.GetClaimsAsync = ... // Optional: Your logic here\n    // Other IUserStore methods like GetUserIdAsync, GetUsernameAsync,\n    // GetNormalizedUserNameAsync have default implementations in DelegatedUserStore\n    // that work directly off the CoreIdentUser object returned by FindUser... methods.\n    // You generally don't need to override these unless you have specific needs.\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing IUserStore Interface in C#\nDESCRIPTION: The IUserStore interface defines methods for CRUD operations on CoreIdentUser objects. It includes methods for creating users, finding users by ID or username, and managing password hashes.\nSOURCE: https://github.com/stimpy77/coreident/blob/main/docs/Developer_Training_Guide.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IUserStore\n{\n    Task<CoreIdentUser> CreateAsync(CoreIdentUser user);\n    Task<CoreIdentUser> FindByUsernameAsync(string normalizedUsername);\n    Task<CoreIdentUser> FindByIdAsync(string userId);\n    Task<string> GetPasswordHashAsync(CoreIdentUser user);\n    Task SetPasswordHashAsync(CoreIdentUser user, string passwordHash);\n    // Additional methods like UpdateUserAsync and DeleteUserAsync\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing JwtTokenService in C#\nDESCRIPTION: Implements the JwtTokenService class for generating JWT access tokens and refresh tokens. Uses System.IdentityModel.Tokens.Jwt and reads configuration from CoreIdentOptions.\nSOURCE: https://github.com/stimpy77/coreident/blob/main/DEVPLAN.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class JwtTokenService : ITokenService\n{\n    private readonly CoreIdentOptions _options;\n    private readonly IUserStore _userStore;\n\n    public JwtTokenService(IOptions<CoreIdentOptions> options, IUserStore userStore)\n    {\n        _options = options.Value;\n        _userStore = userStore;\n    }\n\n    public async Task<string> GenerateAccessTokenAsync(User user)\n    {\n        var claims = new List<Claim>\n        {\n            new Claim(JwtRegisteredClaimNames.Sub, user.Id),\n            new Claim(JwtRegisteredClaimNames.Name, user.Username),\n            new Claim(JwtRegisteredClaimNames.Email, user.Email)\n        };\n\n        var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_options.SigningKeySecret));\n        var creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);\n\n        var token = new JwtSecurityToken(\n            issuer: _options.Issuer,\n            audience: _options.Audience,\n            claims: claims,\n            expires: DateTime.UtcNow.Add(_options.AccessTokenLifetime),\n            signingCredentials: creds);\n\n        return new JwtSecurityTokenHandler().WriteToken(token);\n    }\n\n    public Task<string> GenerateRefreshTokenAsync()\n    {\n        var randomNumber = new byte[32];\n        using var rng = RandomNumberGenerator.Create();\n        rng.GetBytes(randomNumber);\n        return Task.FromResult(Convert.ToBase64String(randomNumber));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CoreIdentOptions Class in C#\nDESCRIPTION: Defines the CoreIdentOptions class with properties for Issuer, Audience, SigningKeySecret, AccessTokenLifetime, and RefreshTokenLifetime. Uses TimeSpan for lifetime values.\nSOURCE: https://github.com/stimpy77/coreident/blob/main/DEVPLAN.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class CoreIdentOptions\n{\n    public string Issuer { get; set; }\n    public string Audience { get; set; }\n    public string SigningKeySecret { get; set; }\n    public TimeSpan AccessTokenLifetime { get; set; }\n    public TimeSpan RefreshTokenLifetime { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Delegated User Store for CoreIdent (C#)\nDESCRIPTION: Extension method for configuring a delegated user store in CoreIdent. This allows integration with existing application user databases or logic by providing custom implementations for user-related operations.\nSOURCE: https://github.com/stimpy77/coreident/blob/main/Technical_Plan.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nIServiceCollection.AddCoreIdent().AddDelegatedUserStore(Action<DelegatedUserStoreOptions> configure)\n```\n\n----------------------------------------\n\nTITLE: Configuring CoreIdent User Lookup in C#\nDESCRIPTION: This snippet demonstrates how to configure a custom user lookup function for CoreIdent. It simulates finding a user by username and returns a CoreIdentUser object if found.\nSOURCE: https://github.com/stimpy77/coreident/blob/main/README.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nawait Task.Delay(10); // Placeholder\nConsole.WriteLine($\"Delegated: Finding user by Username: {normalizedUsername}\");\n// Simulate finding a user for the example\nif (normalizedUsername == \"DELEGATED@EXAMPLE.COM\") {\n    return new CoreIdentUser { Id = \"delegated-user-123\", UserName = \"delegated@example.com\", Email = \"delegated@example.com\", NormalizedUserName = \"DELEGATED@EXAMPLE.COM\" };\n}\nreturn null;\n```\n\n----------------------------------------\n\nTITLE: Registering EF Core Stores in Dependency Injection\nDESCRIPTION: This snippet shows how to register your application's DbContext and the necessary CoreIdent EF Core stores in the service container using AddCoreIdentEntityFrameworkStores method.\nSOURCE: https://github.com/stimpy77/coreident/blob/main/docs/Developer_Training_Guide.md#2025-04-22_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nvar builder = WebApplication.CreateBuilder(args);\n\n// 1. Register CoreIdent Core services (AFTER configuring options)\nbuilder.Services.AddCoreIdent(options => /* ... configure options ... */);\n\n// 2. Register YOUR application's DbContext (using your chosen provider)\nvar connectionString = builder.Configuration.GetConnectionString(\"DefaultConnection\");\nbuilder.Services.AddDbContext<YourApplicationDbContext>(options =>\n    options.UseSqlite(connectionString)); // Or UseSqlServer, UseNpgsql, etc.\n\n// 3. Register the CoreIdent EF Core stores, pointing to YOUR DbContext\n//    (YourApplicationDbContext MUST incorporate CoreIdentDbContext's configuration)\nbuilder.Services.AddCoreIdentEntityFrameworkStores<YourApplicationDbContext>();\n\nvar app = builder.Build();\n// ... rest of Program.cs\n```\n\n----------------------------------------\n\nTITLE: Defining IUserStore Interface in C#\nDESCRIPTION: Defines the IUserStore interface with methods for creating, finding, updating, and deleting users. Includes a StoreResult enum for operation outcomes.\nSOURCE: https://github.com/stimpy77/coreident/blob/main/DEVPLAN.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IUserStore\n{\n    Task<StoreResult> CreateUserAsync(User user);\n    Task<User> FindUserByIdAsync(string userId);\n    Task<User> FindUserByUsernameAsync(string username);\n    Task<StoreResult> UpdateUserAsync(User user);\n    Task<StoreResult> DeleteUserAsync(string userId);\n}\n\npublic enum StoreResult\n{\n    Success,\n    Failure,\n    Conflict\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DelegatedUserStore with User Retrieval Delegates - C#\nDESCRIPTION: This snippet demonstrates how to configure the DelegatedUserStore by providing delegates necessary for finding users and validating credentials. It specifies implementations for finding users by ID and username as well as for validating passwords. Ensure your service correctly handles user management logic.\nSOURCE: https://github.com/stimpy77/coreident/blob/main/docs/Developer_Training_Guide.md#2025-04-22_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddCoreIdentDelegatedUserStore(options =>\n{\n    // REQUIRED: Provide a function to find a user by ID\n    options.FindUserByIdAsync = async (userId, ct) => {\n        // Your logic using your service/repository to find the user\n        var externalUser = await myExternalUserService.FindByIdAsync(userId);\n        if (externalUser == null) return null;\n        // Map YOUR user model to CoreIdentUser (excluding password hash)\n        return new CoreIdentUser { Id = externalUser.Id, UserName = externalUser.Email, ... };\n    };\n\n    // REQUIRED: Provide a function to find a user by username\n    options.FindUserByUsernameAsync = async (normalizedUsername, ct) => {\n        var externalUser = await myExternalUserService.FindByUsernameAsync(normalizedUsername);\n        if (externalUser == null) return null;\n        return new CoreIdentUser { Id = externalUser.Id, UserName = externalUser.Email, ... };\n    };\n\n    // REQUIRED: Provide a function to validate credentials\n    // !! IMPORTANT: This delegate receives the PLAIN TEXT password submitted by the user.\n    // !! Your external service MUST handle the secure validation against its stored credentials.\n    options.ValidateCredentialsAsync = async (username, password, ct) => {\n         // Your logic: Call your service to check the password\n         return await myExternalUserService.CheckPasswordAsync(username, password);\n    };\n\n    // OPTIONAL: Provide a function to get user claims\n    options.GetClaimsAsync = async (coreIdentUser, ct) => {\n        // Your logic: Get claims for the user ID from your system\n        var externalClaims = await myExternalUserService.GetUserClaimsAsync(coreIdentUser.Id);\n        // Map to System.Security.Claims.Claim\n        return externalClaims.Select(c => new Claim(c.Type, c.Value)).ToList();\n    };\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing IPasswordHasher Interface in C#\nDESCRIPTION: The IPasswordHasher interface defines methods for hashing and verifying passwords in CoreIdent. It uses the PBKDF2 algorithm with HMAC-SHA256 for secure password storage.\nSOURCE: https://github.com/stimpy77/coreident/blob/main/docs/Developer_Training_Guide.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IPasswordHasher\n{\n    string HashPassword(CoreIdentUser user, string password);\n    PasswordVerificationResult VerifyHashedPassword(CoreIdentUser user, string hashedPassword, string providedPassword);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Entity Framework Core Storage for CoreIdent (C#)\nDESCRIPTION: Extension method for configuring Entity Framework Core as the storage provider for CoreIdent. This method adds EF Core stores to the CoreIdent configuration.\nSOURCE: https://github.com/stimpy77/coreident/blob/main/Technical_Plan.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nIServiceCollection.AddCoreIdent().AddEntityFrameworkStores<TContext>()\n```\n\n----------------------------------------\n\nTITLE: Delegated User Store Options Definition in C#\nDESCRIPTION: This snippet defines the `DelegatedUserStoreOptions` class, which contains `Func<>` delegates for user authentication and authorization. These delegates (`FindUserByIdAsync`, `FindUserByUsernameAsync`, `ValidateCredentialsAsync`, `GetClaimsAsync`) are provided by the consumer to integrate with existing user databases or systems. This allows for custom implementations of user management within the CoreIdent framework.\nSOURCE: https://github.com/stimpy77/coreident/blob/main/LLMINDEX.md#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n\"DelegatedUserStoreOptions.cs: Defines `Func<>` delegates (`FindUserByIdAsync`, `FindUserByUsernameAsync`, `ValidateCredentialsAsync`, `GetClaimsAsync`) to be provided by the consumer.\"\n```\n\n----------------------------------------\n\nTITLE: Entity Framework Core DbContext Configuration for CoreIdent\nDESCRIPTION: Example implementations of database context configuration for CoreIdent using Entity Framework Core. Shows both inheritance and configuration application approaches.\nSOURCE: https://github.com/stimpy77/coreident/blob/main/README.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic class YourApplicationDbContext : CoreIdentDbContext\n{\n    public DbSet<YourAppEntity> YourAppEntities { get; set; }\n\n    public YourApplicationDbContext(DbContextOptions<YourApplicationDbContext> options)\n        : base(options)\n    {\n    }\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        base.OnModelCreating(modelBuilder);\n        modelBuilder.Entity<YourAppEntity>().HasKey(e => e.Id);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Credential Validation for CoreIdent in C#\nDESCRIPTION: This code configures the credential validation process for CoreIdent. It includes a critical security warning about handling plain text passwords and demonstrates a simple validation check.\nSOURCE: https://github.com/stimpy77/coreident/blob/main/README.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n// ⚠️ CRITICAL SECURITY WARNING ⚠️\n// The 'ValidateCredentialsAsync' delegate receives the user's PLAIN TEXT password.\n// YOUR implementation of this delegate MUST securely validate this password against\n// YOUR existing credential store (which MUST store hashed passwords).\n// CoreIdent's IPasswordHasher is BYPASSED in this flow.\n// YOU ARE RESPONSIBLE for the security of this validation process.\noptions.ValidateCredentialsAsync = async (username, password, ct) => {\n    // Example: Replace with your actual validation logic calling your service\n    // return await myExternalUserService.CheckPasswordAsync(username, password);\n     await Task.Delay(10); // Placeholder\n     Console.WriteLine($\"Delegated: Validating credentials for: {username}\");\n     // Simulate password check for the example user\n     return username == \"delegated@example.com\" && password == \"Password123!\";\n};\n```\n\n----------------------------------------\n\nTITLE: Inheritance from CoreIdentDbContext in .NET\nDESCRIPTION: This snippet shows how to inherit from CoreIdentDbContext to define your application's specific DbSets. It ensures that CoreIdent configurations are applied by calling the base implementation in OnModelCreating.\nSOURCE: https://github.com/stimpy77/coreident/blob/main/docs/Developer_Training_Guide.md#2025-04-22_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n// In YourApplicationDbContext.cs\nusing CoreIdent.Storage.EntityFrameworkCore;\nusing Microsoft.EntityFrameworkCore;\n\npublic class YourApplicationDbContext : CoreIdentDbContext // Inherit here\n{\n    // Your application's specific DbSets\n    public DbSet<YourAppEntity> YourAppEntities { get; set; }\n\n    public YourApplicationDbContext(DbContextOptions<YourApplicationDbContext> options)\n        : base(options) // Pass options to base constructor\n    {\n    }\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        // IMPORTANT: Call base implementation FIRST to apply CoreIdent configs\n        base.OnModelCreating(modelBuilder);\n\n        // Your application's specific entity configurations below\n        modelBuilder.Entity<YourAppEntity>().HasKey(e => e.Id);\n        // ... other configurations ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up User Claims Retrieval for CoreIdent in C#\nDESCRIPTION: This snippet shows how to configure a function to retrieve user claims in CoreIdent. It simulates getting claims for a user and returns a list of sample claims.\nSOURCE: https://github.com/stimpy77/coreident/blob/main/README.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n// Optional: Provide a function to get user claims if needed\noptions.GetClaimsAsync = async (user, ct) => {\n     await Task.Delay(10); // Placeholder\n     Console.WriteLine($\"Delegated: Getting claims for: {user.UserName}\");\n     return new List<Claim> { new Claim(ClaimTypes.GivenName, \"Delegated\"), new Claim(ClaimTypes.Role, \"User\") };\n};\n```\n\n----------------------------------------\n\nTITLE: Delegated User Store Extension Method in C#\nDESCRIPTION: This snippet outlines the `AddCoreIdentDelegatedUserStore` extension method, which is located in `CoreIdentDelegatedUserStoreExtensions.cs`. This extension method registers the `DelegatedUserStore` as a scoped `IUserStore` within the dependency injection container. It also handles the configuration and validation of options for the delegated user store, ensuring it is properly set up for use.\nSOURCE: https://github.com/stimpy77/coreident/blob/main/LLMINDEX.md#2025-04-22_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n\"Extensions/CoreIdentDelegatedUserStoreExtensions.cs: Contains `AddCoreIdentDelegatedUserStore` extension method (registers `DelegatedUserStore` as Scoped `IUserStore`, configures and validates options).\"\n```\n\n----------------------------------------\n\nTITLE: Implementing AddCoreIdentEntityFrameworkStores Extension in C#\nDESCRIPTION: Creates an extension method for IServiceCollection to register CoreIdent's Entity Framework Core stores and DbContext.\nSOURCE: https://github.com/stimpy77/coreident/blob/main/DEVPLAN.md#2025-04-22_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic static class CoreIdentEntityFrameworkExtensions\n{\n    public static IServiceCollection AddCoreIdentEntityFrameworkStores<TContext>(this IServiceCollection services)\n        where TContext : DbContext\n    {\n        services.AddScoped<IUserStore, EfUserStore<TContext>>();\n        services.AddScoped<IRefreshTokenStore, EfRefreshTokenStore<TContext>>();\n        services.AddScoped<IClientStore, EfClientStore<TContext>>();\n        services.AddScoped<IScopeStore, EfScopeStore<TContext>>();\n        return services;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying CoreIdent Configurations with DbContext in .NET\nDESCRIPTION: This snippet demonstrates how to apply CoreIdent configurations in a custom DbContext. It inherits from the standard DbContext and explicitly uses the ApplyConfigurationsFromAssembly method.\nSOURCE: https://github.com/stimpy77/coreident/blob/main/docs/Developer_Training_Guide.md#2025-04-22_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\n// In YourApplicationDbContext.cs\nusing CoreIdent.Storage.EntityFrameworkCore; // Needed for CoreIdentDbContext type\nusing Microsoft.EntityFrameworkCore;\n\npublic class YourApplicationDbContext : DbContext // Inherit from standard DbContext\n{\n    // Your application's specific DbSets\n    public DbSet<YourAppEntity> YourAppEntities { get; set; }\n\n    // CoreIdent DbSets are optional here unless you need direct access\n    // public DbSet<CoreIdentUser> Users { get; set; }\n\n    public YourApplicationDbContext(DbContextOptions<YourApplicationDbContext> options)\n        : base(options)\n    {\n    }\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        base.OnModelCreating(modelBuilder); \n\n        // Apply CoreIdent's configurations from its assembly\n        modelBuilder.ApplyConfigurationsFromAssembly(typeof(CoreIdentDbContext).Assembly);\n\n        // Your application's specific entity configurations below\n        modelBuilder.Entity<YourAppEntity>().HasKey(e => e.Id);\n        // ... other configurations ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing CoreIdent Packages via NuGet\nDESCRIPTION: Commands to install the core CoreIdent package and optional storage adapters using the .NET CLI. This includes the main package, EntityFrameworkCore storage, and a delegated user store adapter.\nSOURCE: https://github.com/stimpy77/coreident/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package CoreIdent.Core\ndotnet add package CoreIdent.Storage.EntityFrameworkCore # For EF Core persistence\ndotnet add package CoreIdent.Adapters.DelegatedUserStore # For delegating to existing systems\n# Ensure you also add your EF Core Database Provider, e.g.:\ndotnet add package Microsoft.EntityFrameworkCore.Sqlite\n```\n\n----------------------------------------\n\nTITLE: Configuring Delegated User Store Service Extension in C#\nDESCRIPTION: Service collection extension method for registering a delegated user store implementation with custom configuration\nSOURCE: https://github.com/stimpy77/coreident/blob/main/DEVPLAN.md#2025-04-22_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\npublic static IServiceCollection AddCoreIdentDelegatedUserStore(\n    this IServiceCollection services, \n    Action<DelegatedUserStoreOptions> configure) {\n    var options = new DelegatedUserStoreOptions();\n    configure(options);\n    services.AddSingleton(options);\n    services.AddScoped<IUserStore, DelegatedUserStore>();\n    return services;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite Storage for CoreIdent (C#)\nDESCRIPTION: Extension method for configuring SQLite as the storage provider for CoreIdent. This method adds SQLite stores to the CoreIdent configuration.\nSOURCE: https://github.com/stimpy77/coreident/blob/main/Technical_Plan.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nIServiceCollection.AddCoreIdent().AddSqliteStores(...)\n```\n\n----------------------------------------\n\nTITLE: Managing EF Core Migrations in .NET\nDESCRIPTION: This snippet outlines the steps for managing database schema migrations using EF Core in .NET applications. It includes commands for adding migrations and specifies how to reference the correct projects.\nSOURCE: https://github.com/stimpy77/coreident/blob/main/docs/Developer_Training_Guide.md#2025-04-22_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\n# Install Tools: Ensure you have the EF Core command-line tools installed (dotnet tool install --global dotnet-ef).\n# Add Migration: Run the migration command from your terminal, specifying the project containing your DbContext.\n\n// Example command to add initial schema migration\n// If your DbContext is in your startup project:\ndotnet ef migrations add InitialCoreIdentSchema --context YourApplicationDbContext -p ../path/to/src/CoreIdent.Storage.EntityFrameworkCore\n\n// If your DbContext is in a separate project:\ndotnet ef migrations add InitialCoreIdentSchema --project src/MyDataAccess/MyDataAccess.csproj --startup-project src/MyWebApp/MyWebApp.csproj --context YourApplicationDbContext\n\n// Replace InitialCoreIdentSchema with a descriptive name.\n// Replace YourApplicationDbContext with the name of your DbContext.\n```\n\n----------------------------------------\n\nTITLE: Defining IRefreshTokenStore Interface in C#\nDESCRIPTION: Specifies the methods for the IRefreshTokenStore interface in CoreIdent, including storing, retrieving, and removing refresh tokens.\nSOURCE: https://github.com/stimpy77/coreident/blob/main/DEVPLAN.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\ninterface IRefreshTokenStore\n{\n    Task StoreRefreshTokenAsync(CoreIdentRefreshToken token);\n    Task<CoreIdentRefreshToken> GetRefreshTokenAsync(string tokenHandle);\n    Task RemoveRefreshTokenAsync(string tokenHandle);\n}\n```\n\n----------------------------------------\n\nTITLE: Delegated User Store Implementation in C#\nDESCRIPTION: This snippet describes the `DelegatedUserStore` class, which implements the `IUserStore` interface. It uses the delegates configured in `DelegatedUserStoreOptions` to perform user-related operations. Write operations are intentionally not implemented and throw a `NotImplementedException`, indicating that this store is primarily for reading user data from an external source.\nSOURCE: https://github.com/stimpy77/coreident/blob/main/LLMINDEX.md#2025-04-22_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n\"DelegatedUserStore.cs: Implements `IUserStore` by calling the configured delegates. Write operations throw `NotImplementedException`.\"\n```\n\n----------------------------------------\n\nTITLE: IUserGrantStore Interface Definition in C#\nDESCRIPTION: This snippet refers to the `IUserGrantStore.cs` file, which defines the `IUserGrantStore` interface. This interface outlines the methods for persisting and retrieving user consent grants. Implementations of this interface handle the storage and retrieval of user consent data, allowing the CoreIdent system to track and manage user authorization decisions.\nSOURCE: https://github.com/stimpy77/coreident/blob/main/LLMINDEX.md#2025-04-22_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n\"Stores: `IUserGrantStore.cs`, `InMemoryUserGrantStore.cs`, `EfUserGrantStore.cs`\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Claims Provider in C#\nDESCRIPTION: Example implementation of ICustomClaimsProvider interface to add custom claims to tokens based on user context and requested scopes.\nSOURCE: https://github.com/stimpy77/coreident/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyCustomClaimsProvider : ICustomClaimsProvider\n{\n    public Task<IEnumerable<Claim>> GetCustomClaimsAsync(TokenRequestContext context, CancellationToken cancellationToken)\n    {\n        var claims = new List<Claim>();\n        if (context.User != null && context.Scopes?.Contains(\"roles\") == true)\n        {\n            claims.Add(new Claim(\"role\", \"admin\")); // Example: add role claim\n        }\n        return Task.FromResult<IEnumerable<Claim>>(claims);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JWT Header Structure in JSON\nDESCRIPTION: Defines the standard JWT header structure specifying the token type and signing algorithm used by CoreIdent.\nSOURCE: https://github.com/stimpy77/coreident/blob/main/docs/Developer_Training_Guide.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{ \"alg\": \"HS256\", \"typ\": \"JWT\" }\n```\n\n----------------------------------------\n\nTITLE: HTTP Authorization Code Flow Token Request\nDESCRIPTION: POST request to /auth/token endpoint for exchanging authorization code for tokens. Includes required parameters for the Authorization Code flow with PKCE.\nSOURCE: https://github.com/stimpy77/coreident/blob/main/docs/Developer_Training_Guide.md#2025-04-22_snippet_24\n\nLANGUAGE: http\nCODE:\n```\nPOST /auth/token\nContent-Type: application/x-www-form-urlencoded\n\ngrant_type=authorization_code&\ncode=[code_handle]&\nredirect_uri=[redirect_uri]&\nclient_id=[client_id]&\ncode_verifier=[code_verifier]&\nclient_secret=[client_secret]\n```\n\n----------------------------------------\n\nTITLE: JWT Payload Structure in JSON\nDESCRIPTION: Demonstrates the complete JWT payload structure including standard claims and optional user-specific claims used in CoreIdent tokens.\nSOURCE: https://github.com/stimpy77/coreident/blob/main/docs/Developer_Training_Guide.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sub\": \"user-guid-or-id\",\n  \"iss\": \"https://localhost:7123\",\n  \"aud\": \"https://localhost:7123\",\n  \"exp\": 1678886400,\n  \"iat\": 1678885500,\n  \"jti\": \"guid-unique-token-id\",\n  \"name\": \"Test User\",\n  \"email\": \"test@example.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Claims Provider\nDESCRIPTION: Code snippet showing how to register a custom claims provider in the dependency injection container after CoreIdent setup.\nSOURCE: https://github.com/stimpy77/coreident/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddScoped<ICustomClaimsProvider, MyCustomClaimsProvider>();\n```\n\n----------------------------------------\n\nTITLE: Defining Delegated User Store Options in C#\nDESCRIPTION: Configuration class for customizable user store delegates with flexible authentication mechanisms\nSOURCE: https://github.com/stimpy77/coreident/blob/main/DEVPLAN.md#2025-04-22_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\npublic class DelegatedUserStoreOptions {\n    public Func<string, Task<CoreIdentUser>> FindUserByIdDelegate { get; set; }\n    public Func<string, string, Task<bool>> ValidateCredentialsDelegate { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CoreIdentDbContext in C#\nDESCRIPTION: Outlines the structure of the CoreIdentDbContext class for Entity Framework Core, including DbSet properties for various CoreIdent entities.\nSOURCE: https://github.com/stimpy77/coreident/blob/main/DEVPLAN.md#2025-04-22_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic class CoreIdentDbContext : DbContext\n{\n    public DbSet<CoreIdentUser> Users { get; set; }\n    public DbSet<CoreIdentRefreshToken> RefreshTokens { get; set; }\n    public DbSet<CoreIdentClient> Clients { get; set; }\n    public DbSet<CoreIdentScope> Scopes { get; set; }\n    public DbSet<UserClaim> UserClaims { get; set; }\n    public DbSet<ClientSecret> ClientSecrets { get; set; }\n    public DbSet<ScopeClaim> ScopeClaims { get; set; }\n\n    // Entity configurations, relationship definitions, etc.\n}\n```\n\n----------------------------------------\n\nTITLE: Apply Entity Framework Core Database Migration\nDESCRIPTION: This command applies the pending database migrations to the database specified in the startup project's configuration. It requires specifying the context and may need the startup project and project paths if run from a different directory.\nSOURCE: https://github.com/stimpy77/coreident/blob/main/docs/Developer_Training_Guide.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n\"dotnet ef database update --context YourApplicationDbContext\"\n```\n\n----------------------------------------\n\nTITLE: Defining IUserStore Interface in C#\nDESCRIPTION: Outlines the methods to be included in the IUserStore interface for CoreIdent, including password management, claim management, and lockout functionality.\nSOURCE: https://github.com/stimpy77/coreident/blob/main/DEVPLAN.md#2025-04-22_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\ninterface IUserStore\n{\n    Task SetPasswordHashAsync(string userId, string passwordHash);\n    Task<string> GetPasswordHashAsync(string userId);\n    Task<IList<Claim>> GetClaimsAsync(string userId);\n    Task AddClaimsAsync(string userId, IEnumerable<Claim> claims);\n    Task ReplaceClaimAsync(string userId, Claim claim, Claim newClaim);\n    Task RemoveClaimsAsync(string userId, IEnumerable<Claim> claims);\n    Task<DateTimeOffset?> GetLockoutEndDateAsync(string userId);\n    Task<int> IncrementAccessFailedCountAsync(string userId);\n    Task ResetAccessFailedCountAsync(string userId);\n    // Other methods...\n}\n```\n\n----------------------------------------\n\nTITLE: User Registration Request Format in JSON\nDESCRIPTION: Example JSON request body for the POST /auth/register endpoint. Contains required fields for user registration including email and password.\nSOURCE: https://github.com/stimpy77/coreident/blob/main/docs/Developer_Training_Guide.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"email\": \"test@example.com\",\n  \"password\": \"YourStrongPassword123!\"\n}\n```\n\n----------------------------------------\n\nTITLE: User Login Request Format in JSON\nDESCRIPTION: Example JSON request body for the POST /auth/login endpoint. Contains credentials required for user authentication.\nSOURCE: https://github.com/stimpy77/coreident/blob/main/docs/Developer_Training_Guide.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"email\": \"test@example.com\",\n  \"password\": \"YourStrongPassword123!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Applying EF Core Migrations to Update Database\nDESCRIPTION: Command to apply existing migrations to the database, updating its schema to match the current model. This specifies the DbContext class and relevant projects.\nSOURCE: https://github.com/stimpy77/coreident/blob/main/docs/Developer_Training_Guide.md#2025-04-22_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ndotnet ef database update --context YourApplicationDbContext --project src/CoreIdent.Storage.EntityFrameworkCore --startup-project src/YourWebAppProject\n```\n\n----------------------------------------\n\nTITLE: Successful Login Response Format in JSON\nDESCRIPTION: Example JSON response body returned on successful login. Contains access token, refresh token, token expiration time, and token type.\nSOURCE: https://github.com/stimpy77/coreident/blob/main/docs/Developer_Training_Guide.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"refresh_token\": \"aBcDeFgHiJkLmNoPqRsTuVwXyZ123456...\",\n  \"expires_in\": 900,\n  \"token_type\": \"Bearer\"\n}\n```\n\n----------------------------------------\n\nTITLE: Refresh Token Request Format in JSON\nDESCRIPTION: Shows the expected JSON format for refresh token requests sent to the /auth/token/refresh endpoint.\nSOURCE: https://github.com/stimpy77/coreident/blob/main/docs/Developer_Training_Guide.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{ \"refreshToken\": \"aBcDeFgHiJkLmNoPqRsTuVwXyZ123456...\" }\n```\n\n----------------------------------------\n\nTITLE: Defining IPasswordHasher Interface in C#\nDESCRIPTION: Defines the IPasswordHasher interface with methods for hashing and verifying passwords.\nSOURCE: https://github.com/stimpy77/coreident/blob/main/DEVPLAN.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IPasswordHasher\n{\n    string HashPassword(string password);\n    bool VerifyHashedPassword(string hashedPassword, string providedPassword);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing OpenID Connect ID Token Structure\nDESCRIPTION: Example structure of an ID token payload showing standard OIDC claims including issuer, subject, audience, expiration time, and optional profile information.\nSOURCE: https://github.com/stimpy77/coreident/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"iss\": \"https://your-issuer.com\",\n  \"sub\": \"user-guid-or-id\",\n  \"aud\": \"client-id\",\n  \"exp\": 1713559200,\n  \"iat\": 1713555600,\n  \"nonce\": \"random-nonce-value\",\n  \"name\": \"Jane Doe\",\n  \"email\": \"jane@example.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: UserGrant Model Definition in C#\nDESCRIPTION: This snippet refers to the `UserGrant.cs` file, which defines the `UserGrant` model used in the CoreIdent project. This model represents the consent granted by a user to a client application, allowing it to access specific resources or perform certain actions on the user's behalf. This is a key component of the user consent mechanism implemented in Phase 4.\nSOURCE: https://github.com/stimpy77/coreident/blob/main/LLMINDEX.md#2025-04-22_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n\"Models: `UserGrant.cs`\"\n```\n\n----------------------------------------\n\nTITLE: OIDC Discovery Endpoint Response Example in JSON\nDESCRIPTION: Example response from the /.well-known/openid-configuration endpoint that provides metadata about the CoreIdent server configuration. This includes URLs for authorization, token issuance, JWKS, and supported scopes and authentication methods.\nSOURCE: https://github.com/stimpy77/coreident/blob/main/docs/Developer_Training_Guide.md#2025-04-22_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"issuer\": \"https://localhost:7100\",\n  \"authorization_endpoint\": \"https://localhost:7100/auth/authorize\",\n  \"token_endpoint\": \"https://localhost:7100/auth/token\",\n  \"jwks_uri\": \"https://localhost:7100/.well-known/jwks.json\",\n  \"scopes_supported\": [\"openid\", \"profile\", \"email\", \"offline_access\"],\n  \"response_types_supported\": [\"code\"],\n  \"grant_types_supported\": [\"authorization_code\", \"refresh_token\", \"client_credentials\"],\n  \"id_token_signing_alg_values_supported\": [\"HS256\"],\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: JWKS Endpoint Response Example in JSON\nDESCRIPTION: Example response from the /.well-known/jwks.json endpoint that publishes the public key(s) used by CoreIdent to sign JWTs. This endpoint allows clients to retrieve keys needed to verify token signatures, showing a conceptual HS256 key structure.\nSOURCE: https://github.com/stimpy77/coreident/blob/main/docs/Developer_Training_Guide.md#2025-04-22_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"keys\": [\n    {\n      \"kty\": \"oct\", // Key Type: Octet sequence (Symmetric)\n      \"use\": \"sig\", // Usage: Signature\n      \"kid\": \"default-hs256-key\", // Key ID\n      \"alg\": \"HS256\"\n      // \"k\": \"...\" // The actual secret is NOT exposed here\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP Client Credentials Flow Token Request\nDESCRIPTION: POST request to /auth/token endpoint for client credentials flow. Shows both authentication methods: Basic Auth header and request body parameters.\nSOURCE: https://github.com/stimpy77/coreident/blob/main/docs/Developer_Training_Guide.md#2025-04-22_snippet_25\n\nLANGUAGE: http\nCODE:\n```\nPOST /auth/token\nAuthorization: Basic [base64(client_id:client_secret)]\nContent-Type: application/x-www-form-urlencoded\n\ngrant_type=client_credentials&\nscope=[space_separated_scopes]\n```\n\n----------------------------------------\n\nTITLE: Provider Package Configurations\nDESCRIPTION: Setup methods for various authentication providers including Google, Web3, and LNURL authentication.\nSOURCE: https://github.com/stimpy77/coreident/blob/main/Technical_Plan.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nAddGoogleProvider(...)\nAddWeb3Provider(...)\nAddLnurlAuthProvider(...)\n```\n\n----------------------------------------\n\nTITLE: CoreIdent Client Configuration in C#\nDESCRIPTION: This snippet focuses on configuring clients using the `CoreIdentClient` model, specifically the `RequireConsent` flag. When `RequireConsent` is set to true for a client, the user will be prompted to grant consent before the client can access their resources. The `ConsentPath` in `CoreIdentRouteOptions` specifies the endpoint where the user is redirected to provide consent.\nSOURCE: https://github.com/stimpy77/coreident/blob/main/LLMINDEX.md#2025-04-22_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\n\"Configuration: `RequireConsent` flag in `CoreIdentClient`, `ConsentPath` in `CoreIdentRouteOptions`.\"\n```\n\n----------------------------------------\n\nTITLE: Consent Endpoint Extension in C#\nDESCRIPTION: This snippet describes the addition of `/consent` endpoints to `CoreIdentEndpointRouteBuilderExtensions.cs`, which are used for handling user consent requests.  These endpoints support both GET and POST requests, allowing users to view and submit their consent decisions. The endpoints are integrated into the routing configuration to facilitate the user consent flow.\nSOURCE: https://github.com/stimpy77/coreident/blob/main/LLMINDEX.md#2025-04-22_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\n\"Endpoints: `/authorize` update, `/consent` GET/POST in `CoreIdentEndpointRouteBuilderExtensions.cs`.\"\n```\n\n----------------------------------------\n\nTITLE: Installing EF Core CLI Tools\nDESCRIPTION: Command to install the Entity Framework Core command-line interface tools globally, which are required for creating and applying database migrations.\nSOURCE: https://github.com/stimpy77/coreident/blob/main/docs/Developer_Training_Guide.md#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install --global dotnet-ef\n```\n\n----------------------------------------\n\nTITLE: Adding an EF Core Migration for CoreIdent Schema\nDESCRIPTION: Command to create a new migration for the CoreIdent schema. This specifies the DbContext class, projects, and output directory for migration files.\nSOURCE: https://github.com/stimpy77/coreident/blob/main/docs/Developer_Training_Guide.md#2025-04-22_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ndotnet ef migrations add InitialCoreIdentSchema --context YourApplicationDbContext --project src/CoreIdent.Storage.EntityFrameworkCore --startup-project src/YourWebAppProject -o Data/Migrations\n```\n\n----------------------------------------\n\nTITLE: Defining IClientStore Interface in C#\nDESCRIPTION: Outlines the method for the IClientStore interface in CoreIdent, used for finding clients by their ID.\nSOURCE: https://github.com/stimpy77/coreident/blob/main/DEVPLAN.md#2025-04-22_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\ninterface IClientStore\n{\n    Task<CoreIdentClient> FindClientByIdAsync(string clientId);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IScopeStore Interface in C#\nDESCRIPTION: Specifies the methods for the IScopeStore interface in CoreIdent, used for finding scopes by name and retrieving all scopes.\nSOURCE: https://github.com/stimpy77/coreident/blob/main/DEVPLAN.md#2025-04-22_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\ninterface IScopeStore\n{\n    Task<IEnumerable<CoreIdentScope>> FindScopesByNameAsync(IEnumerable<string> scopeNames);\n    Task<IEnumerable<CoreIdentScope>> GetAllScopesAsync();\n}\n```\n\n----------------------------------------\n\nTITLE: Sample EF Core Migration Add Output\nDESCRIPTION: Example of the expected console output when successfully adding a new migration. Shows the build process and completion message.\nSOURCE: https://github.com/stimpy77/coreident/blob/main/docs/Developer_Training_Guide.md#2025-04-22_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nBuild started...\nBuild succeeded.\nTo undo this action, use 'ef migrations remove'\nDone. To undo this action, use 'ef migrations remove'\n```\n\n----------------------------------------\n\nTITLE: Sample EF Core Database Update Output\nDESCRIPTION: Example of the expected console output when successfully applying migrations to the database. Shows the build process and which migrations were applied.\nSOURCE: https://github.com/stimpy77/coreident/blob/main/docs/Developer_Training_Guide.md#2025-04-22_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nBuild started...\nBuild succeeded.\nApplying migration '20250413033857_InitialCoreIdentSchema'.\nDone.\n```"
  }
]